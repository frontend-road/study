{"id":70708,"title":"16 | ZooKeeper是如何保证数据一致性的？","content":"<p>你可能还记得，我们在讲HDFS和HBase架构分析时都提到了ZooKeeper。在分布式系统里的多台服务器要对数据状态达成一致，其实是一件很有难度和挑战的事情，因为服务器集群环境的软硬件故障随时会发生，多台服务器对一个数据的记录保持一致，需要一些技巧和设计。</p><p>这也就是我们今天要讨论的分布式系统一致性与ZooKeeper的架构。</p><p>在讲分布式系统一致性前，我们先回顾一下HDFS。HDFS为了保证整个集群的高可用，需要部署两台NameNode服务器，一台作为主服务器，一台作为从服务器。当主服务器不可用的时候，就切换到从服务器上访问。但是如果不同的应用程序（Client）或者DataNode做出的关于主服务器是否可用的判断不同，那么就会导致HDFS集群混乱。</p><p>比如两个应用程序都需要对一个文件路径进行写操作，但是如果两个应用程序对于哪台服务器是主服务器的判断不同，就会分别连接到两个不同的NameNode上，并都得到了对同一个文件路径的写操作权限，这样就会引起文件数据冲突，同一个文件指向了两份不同的数据。</p><p>这种不同主服务器做出不同的响应，在分布式系统中被称作“脑裂”。光看这个词你也可以看出问题的严重性，这时候集群处于混乱状态，根本无法使用。那我们引入一个专门进行判断的服务器当“裁判”，让“裁判”决定哪个服务器是主服务器不就完事了吗？</p><!-- [[[read_end]]] --><p>但是这个做出判断决策的服务器也有可能会出现故障不可访问，同样整个服务器集群也不能正常运行。所以这个做出判断决策的服务器必须由多台服务器组成，来保证高可用，任意一台服务器宕机都不会影响系统的可用性。</p><p>那么问题又来了，这几台做出判断决策的服务器又如何防止“脑裂”，自己不会出现混乱状态呢？有时候真的很无奈，分布式系统设计就像是一个追着自己尾巴咬的喵喵，兜兜转转回到开头。</p><p>但是问题必须还要解决，我们比较常用的多台服务器状态一致性的解决方案就是ZooKeeper。</p><h2>分布式一致性原理</h2><p>讲分布式一致性时，相信你肯定多少听过著名的CAP原理。CAP原理认为，一个提供数据服务的分布式系统无法同时满足数据<strong>一致性</strong>（Consistency）、<strong>可用性</strong>（Availibility）、<strong>分区耐受性</strong>（Patition Tolerance）这三个条件，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/b2/bfdc62821672a82c24e6e6f5b62ae6b2.png?wh=1268x730\" alt=\"\"></p><p>一致性是说，每次读取的数据都应该是最近写入的数据或者返回一个错误（Every read receives the most recent write or an error），而不是过期数据，也就是说，数据是一致的。</p><p>可用性是说，每次请求都应该得到一个响应，而不是返回一个错误或者失去响应，不过这个响应不需要保证数据是最近写入的（Every request receives a (non-error) response, without the guarantee that it contains the most recent write），也就是说系统需要一直都是可以正常使用的，不会引起调用者的异常，但是并不保证响应的数据是最新的。</p><p>分区耐受性是说，即使因为网络原因，部分服务器节点之间消息丢失或者延迟了，系统依然应该是可以操作的（The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes）。</p><p>当网络分区失效发生的时候，我们要么取消操作，这样数据就是一致的，但是系统却不可用；要么我们继续写入数据，但是数据的一致性就得不到保证。</p><p>对于一个分布式系统而言，网络失效一定会发生，也就是说，分区耐受性是必须要保证的，那么在可用性和一致性上就必须二选一。当网络分区失效，也就是网络不可用的时候，如果选择了一致性，系统就可能返回一个错误码或者干脆超时，即系统不可用。如果选择了可用性，那么系统总是可以返回一个数据，但是并不能保证这个数据是最新的。</p><p>所以，关于CAP原理，更准确的说法是，在分布式系统必须要满足分区耐受性的前提下，可用性和一致性无法同时满足。</p><h2>ZAB算法与ZooKeeper架构</h2><p>ZooKeeper主要提供数据的一致性服务，其实现分布式系统的状态一致性依赖一个叫Paxos的算法。Paxos算法在多台服务器通过内部的投票表决机制决定一个数据的更新与写入。Paxos的基本思路请看下面的图。</p><p><img src=\"https://static001.geekbang.org/resource/image/5b/28/5b47c6fd9f61be41daa1f88662c6fb28.png?wh=1318x844\" alt=\"\"></p><p>应用程序连接到任意一台服务器后提起状态修改请求（也可以是获得某个状态锁的请求），从图上看也就是服务器1，会将这个请求发送给集群中其他服务器进行表决。如果某个服务器同时收到了另一个应用程序同样的修改请求，它可能会拒绝服务器1的表决，并且自己也发起一个同样的表决请求，那么其他服务器就会根据时间戳和服务器排序规则进行表决。</p><p>表决结果会发送给其他所有服务器，最终发起表决的服务器也就是服务器1，会根据收到的表决结果决定该修改请求是否可以执行，事实上，只有在收到多数表决同意的情况下才会决定执行。当有多个请求同时修改某个数据的情况下，服务器的表决机制保证只有一个请求会通过执行，从而保证了数据的一致性。</p><p>Paxos算法有点过于复杂、实现难度也比较高，所以ZooKeeper在编程实现的时候将其简化成了一种叫做ZAB的算法（Zookeeper Atomic Broadcast， Zookeeper原子广播）。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/42/e3a0b1855e8455cf59584bce0ab5c042.png?wh=2482x1266\" alt=\"\"></p><p>ZAB算法的目的，同样是在多台服务器之间达成一致，保证这些服务器上存储的数据是一致的。ZAB算法的主要特点在于：需要在这些服务器中选举一个Leader，所有的写请求都必须提交给Leader。由Leader服务器向其他服务器（Follower）发起Propose，通知所有服务器：我们要完成一个写操作请求，大家检查自己的数据状态，是否有问题。</p><p>如果所有Follower服务器都回复Leader服务器ACK，即没有问题，那么Leader服务器会向所有Follower发送Commit命令，要求所有服务器完成写操作。这样包括Leader服务器在内的所有ZooKeeper集群服务器的数据，就都更新并保持一致了。如果有两个客户端程序同时请求修改同一个数据，因为必须要经过Leader的审核，而Leader只接受其中一个请求，数据也会保持一致。</p><p>在实际应用中，客户端程序可以连接任意一个Follower，进行数据读写操作。如果是写操作，那么这个请求会被这个Follower发送给Leader，进行如上所述的处理；如果是读操作，因为所有服务器的数据都是一致的，那么这个Follower直接返回自己本地的数据给客户端就可以了。</p><p>ZooKeeper通过一种树状结构记录数据，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/0e/27/0e54cac5e7a7ed422d0750a0e2d3e127.png?wh=610x630\" alt=\"\"></p><p>应用程序可以通过路径的方式访问ZooKeeper中的数据，比如/services/YaView/services/stupidname这样的路径方式修改、读取数据。ZooKeeper还支持监听模式，当数据发生改变的时候，通知应用程序。</p><p>因为大数据系统通常都是主从架构，主服务器管理集群的状态和元信息（meta-info），为了保证集群状态一致防止“脑裂”，所以运行期只能有一个主服务器工作（active master），但是为了保证高可用，必须有另一个主服务器保持热备（standby master）。那么应用程序和集群其他服务器如何才能知道当前哪个服务器是实际工作的主服务器呢？</p><p>所以很多大数据系统都依赖ZooKeeper提供的一致性数据服务，用于选举集群当前工作的主服务器。一台主服务器启动后向ZooKeeper注册自己为当前工作的主服务器，而另一台服务器就只能成为热备主服务器，应用程序运行期都和当前工作的主服务器通信。</p><p>如果当前工作的主服务器宕机（在ZooKeeper上记录的心跳数据不再更新），热备主服务器通过ZooKeeper的监控机制发现当前工作的主服务器宕机，就向ZooKeeper注册自己成为当前工作的主服务器。应用程序和集群其他服务器跟新的主服务器通信，保证系统正常运行。</p><p>利用ZooKeeper选主服务器的伪代码如下：</p><pre><code>//读取path路径/servers/leader的值\n//第二个参数true，表示监听这个path的变化。\n1 value = getdata(“/servers/leader”, true) \n\n//如果有返回值，表示主服务器已经产生(即path中记录的value，为当前主服务器的机器名)\n//当前函数退出\n2 if(value != null){exit}\n\n//执行到这里，表示还没有主服务器，将自己的主机名写入/servers/leader\n//EPHEMERAL表示这是一个临时路径，如果当前程序崩溃，即主服务器崩溃，ZooKeeper会删除这个path\n3 result = create(“/servers/leader”, hostname, EPHEMERAL) \n\n//如果上一步创建path成功，当前函数退出\n4 if result = successful{exit}\n\n//执行到这里，表示既没有主服务器，自己也没有成功成为主服务器，从头再来\n5.goto step 1\n</code></pre><p>使用ZooKeeper提供的API接口，代码非常简单。所有要选举成为主服务器的服务器在启动的时候都在自己的服务器上执行上面这段伪代码的逻辑，其中的getdata、create会连接到ZooKeeper集群去处理。但是根据ZAB算法，只有一个服务器能将自己的hostname写入到ZooKeeper的主服务器路径/servers/leader中，保证集群只有一个主服务器。</p><p>而成功成为主服务器的服务器在创建/servers/leader路径的时候，已指定当前路径为EPHEMERAL，即临时路径。如果当前的主服务器宕机，那么该服务器和ZooKeeper的长连接也就中断了，ZooKeeper据此判断该服务器宕机，删除这个路径。其他监听这个路径的服务器（即在伪代码1中，第二个参数设置为true）就会收到通知，所有服务器重新执行以上的伪代码，重新选举出新的、唯一的主服务器。</p><p>此外，说到ZooKeeper的性能，因为ZooKeeper系统的多台服务器存储相同数据，并且每次数据更新都要所有服务器投票表决，所以和一般的分布式系统相反，ZooKeeper集群的写操作性能会随着服务器数量的增加而下降。</p><p><img src=\"https://static001.geekbang.org/resource/image/f1/d1/f1767fc5ac7ee1af6d391690db5e58d1.png?wh=964x676\" alt=\"\"></p><p>ZooKeeper通过ZAB算法实现数据一致性，并为各种大数据系统提供主服务器选举服务。虽然ZooKeeper并没有什么特别强大的功能，但是在各类分布式系统和大数据系统中，ZooKeeper的出镜率非常高，因此也是很多系统的基础设施。</p><h2>小结</h2><p>如果我们单独看大数据和分布式系统的很多解决方案，如果不把它们放在大规模数据和大规模服务器集群的场景下思考，可能会觉得很多问题和方案都很莫名其妙。比如要保证分布式系统中数据的一致性，才诞生了Paxos、ZAB这样专门的算法和ZooKeeper这样的产品。</p><p>Paxos算法只考虑所有服务器都是可信任的情况。但在分布式系统中还有一类场景，需要考虑当集群中的服务器存在恶意服务器的情况。当这些恶意服务器企图篡改伪造数据，或者传递虚假信息的时候，如何保证系统继续有效运行呢？比如目前非常火的区块链，就需要考虑这种场景。</p><p>区块链采取的解决方案是工作量证明。一台服务器要想在分布式集群中记录数据（即所谓分布式记账），必须进行一个规模庞大的计算，比如计算一个256Bit的hash值，这个值的前若干位必须为0。比特币区块链就是采用类似这样的工作量证明算法，为了进行这样的hash计算，目前比特币区块链消耗的电量相当于一个中等规模国家的用电量。</p><p>通过这种工作量证明方式，保证了恶意服务器要想伪造篡改数据，必须拥有强大的计算能力（占整个集群服务器计算能力的51%以上），而只要我们认为大多数服务器是善意的，那么这样的区块链分布式集群就是可靠的。</p><h2>思考题</h2><p>除了工作量证明，还有什么方法可以保证分布式系统中不可信任的机器无法篡改或伪造数据？</p><p>欢迎你写下自己的思考或疑问，与我和其他同学一起讨论。</p>","neighbors":{"left":{"article_title":"15 | 流式计算的代表：Storm、Flink、Spark Streaming","id":70619},"right":{"article_title":"17 | 模块答疑：这么多技术，到底都能用在什么场景里？","id":71366}},"comments":[{"had_liked":false,"id":46231,"user_name":"面试官问","can_delete":false,"product_type":"c1","uid":1009375,"ip_address":"","ucode":"F9CE89589772F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/df/501ba989.jpg","comment_is_top":true,"comment_ctime":1543887145,"is_pvip":true,"replies":[{"id":"16884","content":"CAP的P如果按字面意思理解，网络分区容错，应该是A的一种情况，这样对设计没有指导意义，所以在9年前第一次看到CAP原理，我就按分片理解，这样所有的分布式系统就可以解释了，不存在不能探讨的分布式对象。这次专栏发布后，很多同学对P的理解提出质疑，我又查了下资料，确实这种理解比较激进，可能会造成误导，这部分内容已经删除，很抱歉。<br><br>memcached和zk是最典型的分布式系统，一个分布式的关键原理不适用于最典型的分布式系统，老实说，很郁闷。","user_name":"作者回复","comment_id":46231,"uid":"1007349","ip_address":"","utype":1,"ctime":1544108028,"user_name_real":"李智慧"}],"discussion_count":2,"race_medal":0,"score":"9.2233721715425997e+18","product_id":100020201,"comment_content":"CAP 定理关注的是对数据的读写操作，而不是分布式系统的所有功能，它要求分布式系统节点间是互相连接且有数据共享的，例如 Memcache 的集群中节点相互间没有连接和数据共享，因此不是 CAP 定理讨论的对象，同理 ZooKeeper 的选举机制也不是 CAP 探讨的对象。<br><br>摘自从零开始学架构，大家可以探讨下。","like_count":31,"discussions":[{"author":{"id":1052446,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0f/1e/7877ce4d.jpg","nickname":"RussellSN","note":"","ucode":"E570B075D4AD21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78740,"discussion_content":"谈及分布式系统，从结构上讨论，仅涉及两个核心要素。一个是时钟同步，一个是副本管理。zk选举的term涉及时钟对齐，多数据副本涉及副本管理，属于典型分布式场景。至于连接、共享不是根本要素。分布式的根本要素是无限大容量的系统表现得像一台主机，怎么实现它，从理论上推导就是上面那两个要素。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1575997593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431389,"discussion_content":"CAP的P如果按字面意思理解，网络分区容错，应该是A的一种情况，这样对设计没有指导意义，所以在9年前第一次看到CAP原理，我就按分片理解，这样所有的分布式系统就可以解释了，不存在不能探讨的分布式对象。这次专栏发布后，很多同学对P的理解提出质疑，我又查了下资料，确实这种理解比较激进，可能会造成误导，这部分内容已经删除，很抱歉。\n\nmemcached和zk是最典型的分布式系统，一个分布式的关键原理不适用于最典型的分布式系统，老实说，很郁闷。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1544108028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46322,"user_name":"M","can_delete":false,"product_type":"c1","uid":1117633,"ip_address":"","ucode":"88F6F1433A01A3","user_header":"https://static001.geekbang.org/account/avatar/00/11/0d/c1/d36816df.jpg","comment_is_top":false,"comment_ctime":1543900048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"74558344080","product_id":100020201,"comment_content":"P和数据分不分片并没有任何关系吧。在分布式系统中P就是满足的，否则就是单机了。所以一般考虑的是CP和AP，CP是指在网络分区形成(分布式节点之间不能互相通信)的情况下，牺牲可用性，满足一致性，只有等到数据同步完成后才能恢复可用。而AP是指在网络分区形成的情况下，向外部继续提供使用，但是数据可能不一致(因为节点之间不能通信，所有节点的数据可能不一致)","like_count":17},{"had_liked":false,"id":46162,"user_name":"shangyu","can_delete":false,"product_type":"c1","uid":1011389,"ip_address":"","ucode":"13A26E53508D75","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/bd/b83ad32d.jpg","comment_is_top":false,"comment_ctime":1543859275,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"57378434123","product_id":100020201,"comment_content":"请问老师 对于文中这句话不太理解：“但是 ZooKeeper 系统中所有服务器都存储相同的数据，也就是数据没有分片存储，因此不满足分区耐受性”。zk没有分片但是都存储了相同数据，也就是有冗余备份，一定是要数据有分片才满足P吗","like_count":13},{"had_liked":false,"id":52276,"user_name":"忠厚","can_delete":false,"product_type":"c1","uid":1105648,"ip_address":"","ucode":"86ED2B630187C9","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/f0/ccf46294.jpg","comment_is_top":false,"comment_ctime":1545357080,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"40200062744","product_id":100020201,"comment_content":"ZooKeeper 集群的性能会随着服务器数量的增加而下降<br>这个描述不准确，ZK中有三种角色 leader  Follower observer ，而observer不参与投票，增加observer性能上不会有太大损失（在投票通过后leader结点会通知其他所有结点进行数据更新，这个过程是通过广播的形式完成，而且leader并不等待更新的结果）","like_count":9},{"had_liked":false,"id":46210,"user_name":"cc_hust","can_delete":false,"product_type":"c1","uid":1035537,"ip_address":"","ucode":"13783705132B9B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/11/3de96927.jpg","comment_is_top":false,"comment_ctime":1543885117,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27313688893","product_id":100020201,"comment_content":"个人理解，CAP 中的P跟是否分片存储没有关系。在分布式环境中，P是必选项，需要权衡多副本的一致性和可用性， 单机系统才是放弃了P。","like_count":6,"discussions":[{"author":{"id":1232768,"avatar":"https://static001.geekbang.org/account/avatar/00/12/cf/80/012a0b90.jpg","nickname":"以吻封笺","note":"","ucode":"A526E8F27DF5A1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572091,"discussion_content":"单机不是放弃了，而是没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652598634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102139,"user_name":"老范","can_delete":false,"product_type":"c1","uid":1055827,"ip_address":"","ucode":"F7D86D34A013D0","user_header":"","comment_is_top":false,"comment_ctime":1560150115,"is_pvip":false,"replies":[{"id":"36921","content":"谢谢老范","user_name":"作者回复","comment_id":102139,"uid":"1007349","ip_address":"","utype":1,"ctime":1560215681,"user_name_real":"李智慧"}],"discussion_count":1,"race_medal":0,"score":"23034986595","product_id":100020201,"comment_content":"但是 ZooKeeper 系统中所有服务器都存储相同的数据，也就是数据没有分片存储，因此不满足分区耐受性<br><br>建议老师修改下上处：我们用 sharding 表示分片，用 partition 表示网络分区，partion tolerance 和 sharding 二者是不同概念，并没有如老师您所述的关系。 在 CAP 理论中，当网络分区发生时，ZK 选择了 Consistence，舍弃了 Availability。","like_count":5,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453279,"discussion_content":"谢谢老范","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560215681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46296,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1543894809,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23018731289","product_id":100020201,"comment_content":"“CAP 定理关注的是对数据的读写操作，而不是分布式系统的所有功能，它要求分布式系统节点间是互相连接且有数据共享的，例如 Memcache 的集群中节点相互间没有连接和数据共享，因此不是 CAP 定理讨论的对象，同理 ZooKeeper 的选举机制也不是 CAP 探讨的对象。<br><br>摘自从零开始学架构，大家可以探讨下。”<br><br>有道理！我个人的理解是ZooKeeper本身确实不熟CAP探讨的对象。但是ZooKeeper的很多应用场景，如分布式系统的数据一致性，才是CAP探讨对象。解决问题的钥匙不是问题本身，我理解的对么？","like_count":5},{"had_liked":false,"id":46262,"user_name":"Jowin","can_delete":false,"product_type":"c1","uid":1114356,"ip_address":"","ucode":"19017F7D06C22A","user_header":"https://static001.geekbang.org/account/avatar/00/11/00/f4/cc5f0896.jpg","comment_is_top":false,"comment_ctime":1543890795,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23018727275","product_id":100020201,"comment_content":"zookeeper提供的数据读写服务是cp模型，也就是强一致性。老师这里说的是zookeeper节点间的数据同步模型，如果非要套用cap的话，应该也是cp模型，容忍少于半数的节点故障，一旦多余半数的节点故障，就无法达成一致，系统就不可用性了。","like_count":5,"discussions":[{"author":{"id":1207529,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6c/e9/377a3b09.jpg","nickname":"H.L.","note":"","ucode":"125D13548A0CA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":10172,"discussion_content":"不是强一致性，无论zk，consul，etcd，都是最终一致性。我没见过哪个开源能做到强一致性","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568269847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46224,"user_name":"Kaer","can_delete":false,"product_type":"c1","uid":1113558,"ip_address":"","ucode":"1BD233D3FAC2B1","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/d6/71e1cc29.jpg","comment_is_top":false,"comment_ctime":1543886380,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23018722860","product_id":100020201,"comment_content":"P跟是指网络出现分区，不是数据分区。数据的分区是：shareding","like_count":5,"discussions":[{"author":{"id":1031868,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/bc/62d402da.jpg","nickname":"Goku","note":"","ucode":"8008F3BB10E609","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13811,"discussion_content":"CAP里的P确实是网络分区，不过数据分片也可以称作partition。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568704478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003824,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/51/30/da6ae0d8.jpg","nickname":"cellardoor","note":"","ucode":"ECB20F7DFC5A65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385329,"discussion_content":"Replica 更合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627005049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46236,"user_name":"阿巍-豆夫","can_delete":false,"product_type":"c1","uid":1005123,"ip_address":"","ucode":"732188848B0A85","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/43/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1543887628,"is_pvip":false,"replies":[{"id":"16569","content":"强一致，回复client的时候，zk服务器就已经一致了","user_name":"作者回复","comment_id":46236,"uid":"1007349","ip_address":"","utype":1,"ctime":1543899378,"user_name_real":"李智慧"}],"discussion_count":2,"race_medal":0,"score":"18723756812","product_id":100020201,"comment_content":"zk是最终一致性吧，这个没说清楚啊。","like_count":5,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431392,"discussion_content":"强一致，回复client的时候，zk服务器就已经一致了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543899378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567160,"discussion_content":"ZK 写是强一致，读是最终一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650849227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46261,"user_name":"dancer","can_delete":false,"product_type":"c1","uid":1019036,"ip_address":"","ucode":"B8D5641A3AC490","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/9c/d48473ab.jpg","comment_is_top":false,"comment_ctime":1543890687,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14428792575","product_id":100020201,"comment_content":"老师，P的释义感觉不是很准确，查了一下维基百科的定义，<br>Partition tolerance: The system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes","like_count":3},{"had_liked":false,"id":46191,"user_name":"galen","can_delete":false,"product_type":"c1","uid":1119804,"ip_address":"","ucode":"93056616C4450C","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/3c/eee3e6f5.jpg","comment_is_top":false,"comment_ctime":1543882795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14428784683","product_id":100020201,"comment_content":"如何保证从Zookeep节点中读取的数据，是最新的数据？<br>Zookeep节点可能还在同步数据，当前节点的数据不是最新的数据","like_count":3},{"had_liked":false,"id":278947,"user_name":"工科生小猴子","can_delete":false,"product_type":"c1","uid":1592148,"ip_address":"","ucode":"CE52F63EE72301","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLhpCNoXf1fPfkU8icso2kvjAVtmDibric0VBt9FdtfopM90Y8DlBYnM4UUmh9x7M79LpcIkWXnEeib7A/132","comment_is_top":false,"comment_ctime":1613478646,"is_pvip":false,"replies":[{"id":"101431","content":"选主要求一致性，不然选出两个主就乱套了，不冲突啊。<br><br>ZK是一个独立的集群，也被大数据集群用来做选主，是大数据集群的组成部分，不冲突啊。","user_name":"作者回复","comment_id":278947,"uid":"1007349","ip_address":"","utype":1,"ctime":1613634785,"user_name_real":"李智慧"}],"discussion_count":2,"race_medal":0,"score":"10203413238","product_id":100020201,"comment_content":"看完这篇文章，我对zookeeper更加疑惑了。又说zookeeper用来保证数据一致性，一会又是选举主服务器，越看越迷惑。还有，zookeeper集群，到底是一个独立的集群，还是大数据业务集群的一个有机组成部分？？？？？","like_count":2,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515572,"discussion_content":"选主要求一致性，不然选出两个主就乱套了，不冲突啊。\n\nZK是一个独立的集群，也被大数据集群用来做选主，是大数据集群的组成部分，不冲突啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613634785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":567159,"discussion_content":"ZAB 有两种模式，一种是用于选主，一种用于数据同步。\n\n采zookeeper集群，是因为要保证高可用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650849202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152772,"user_name":"Zend","can_delete":false,"product_type":"c1","uid":1053921,"ip_address":"","ucode":"80EBB0B6772E27","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","comment_is_top":false,"comment_ctime":1574077877,"is_pvip":false,"replies":[{"id":"58692","content":"如果连zookeeper集群本身的机器就不可信任，黑名单也是不可信任的。<br><br>可以参考区块链的实现机制。我在《后端技术》专栏会讲区块链技术架构。","user_name":"作者回复","comment_id":152772,"uid":"1007349","ip_address":"","utype":1,"ctime":1574085989,"user_name_real":"李智慧"}],"discussion_count":2,"race_medal":0,"score":"10164012469","product_id":100020201,"comment_content":"是否可以在分布式系统中不信任的机器加入黑名单，放在ZooKeeper上。","like_count":2,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474935,"discussion_content":"如果连zookeeper集群本身的机器就不可信任，黑名单也是不可信任的。\n\n可以参考区块链的实现机制。我在《后端技术》专栏会讲区块链技术架构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574085989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053921,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","nickname":"Zend","note":"","ucode":"80EBB0B6772E27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52829,"discussion_content":"好的 谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574087126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137219,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1569658418,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10159593010","product_id":100020201,"comment_content":"估计是删除了部分内容，看评论好多都在聊CAP，看正文没见CAP什么事，不过之前学习过ZK是属于CP的。<br>另外，感觉老师这个讲的浅，随便一个zk的讲解都比这多，我自己百度过分布式一致性协议，感觉2PC&#47;3PC还能理解，对于ZAB的简单说明也能理解，不过paxos确实理解不了，很期待有人能通俗易懂的将所有分布式一致性协议都对比讲解清楚一下！","like_count":2,"discussions":[{"author":{"id":1046584,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/38/8af56e18.jpg","nickname":"知识没学到","note":"","ucode":"5D819DFFC7AB08","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362941,"discussion_content":"上面推荐的那个专栏很好，还另外推荐一个“周志明的软件架构课”里面第31/32讲里也有相关内容，讲的也特别好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617077129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174512,"discussion_content":"最近出的课程《分布式协议与算法实战》应该可以满足要求。同学这么活跃，想必也买了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581924068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52479,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1545390572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135325164","product_id":100020201,"comment_content":"老师能专门讲一下zookeeper的leader选举机制吗","like_count":2},{"had_liked":false,"id":200198,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1066546,"ip_address":"","ucode":"1075986F8D116D","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/32/2bb481d2.jpg","comment_is_top":false,"comment_ctime":1585556449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880523745","product_id":100020201,"comment_content":"就为了看zookeeper怎样保证分布式存储的一致性来的😄","like_count":1},{"had_liked":false,"id":129956,"user_name":"大魔王汪汪","can_delete":false,"product_type":"c1","uid":1010680,"ip_address":"","ucode":"4B205CB52FC95F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/f8/b4da7936.jpg","comment_is_top":false,"comment_ctime":1567340007,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5862307303","product_id":100020201,"comment_content":"zk集群可用性怎么保证呢？这不又回到原始的问题了？","like_count":1,"discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174520,"discussion_content":"ZK集群包括至少3台的服务器，内部选举后有一个Leader、多个Follower，如果Leader挂了会触发故障恢复流程，重新选举，改朝换代","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581924507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":47284,"user_name":"阿里巴巴骊骅","can_delete":false,"product_type":"c1","uid":1042492,"ip_address":"","ucode":"FDA3C20D9E622A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/3c/e8c80390.jpg","comment_is_top":false,"comment_ctime":1544100109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839067405","product_id":100020201,"comment_content":"请问老师 对于文中这句话不太理解：“但是 ZooKeeper 系统中所有服务器都存储相同的数据，也就是数据没有分片存储，因此不满足分区耐受性”。zk没有分片但是都存储了相同数据，也就是有冗余备份，一定是要数据有分片才满足P吗","like_count":1},{"had_liked":false,"id":47016,"user_name":"欧嘉权Felix","can_delete":false,"product_type":"c1","uid":1109587,"ip_address":"","ucode":"5257A38D4D3884","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/53/b8fe4560.jpg","comment_is_top":false,"comment_ctime":1544019148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838986444","product_id":100020201,"comment_content":"不是很理解老师说的不符合p的原因 zk是cp系统吧","like_count":1},{"had_liked":false,"id":46426,"user_name":"Any Hello mino","can_delete":false,"product_type":"c1","uid":1004683,"ip_address":"","ucode":"01EF8ECC801F6D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/8b/27ae435c.jpg","comment_is_top":false,"comment_ctime":1543923021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838890317","product_id":100020201,"comment_content":"Zookeeper是cp吧？选举的时候不是都是不可用的","like_count":1},{"had_liked":false,"id":46243,"user_name":"阿巍-豆夫","can_delete":false,"product_type":"c1","uid":1005123,"ip_address":"","ucode":"732188848B0A85","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/43/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1543888368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838855664","product_id":100020201,"comment_content":"paxos 怎么实现强一致性，有点晕了？","like_count":1},{"had_liked":false,"id":46215,"user_name":"hunterlodge","can_delete":false,"product_type":"c1","uid":1069755,"ip_address":"","ucode":"5B83A79E784161","user_header":"https://static001.geekbang.org/account/avatar/00/10/52/bb/225e70a6.jpg","comment_is_top":false,"comment_ctime":1543885366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838852662","product_id":100020201,"comment_content":"p是指分区耐受性，而不是分区本身，zk没有分片存储，也就不存在耐受性的问题，所以我的理解是，本质上zk不是严格的分布式系统","like_count":1},{"had_liked":false,"id":46200,"user_name":"sgl","can_delete":false,"product_type":"c1","uid":1252243,"ip_address":"","ucode":"D73875BA22954F","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/93/e3b44969.jpg","comment_is_top":false,"comment_ctime":1543883769,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5838851065","product_id":100020201,"comment_content":"区块链也是一个很好的技术，被比特币耽误了","like_count":1,"discussions":[{"author":{"id":1127799,"avatar":"https://static001.geekbang.org/account/avatar/00/11/35/77/95e95b32.jpg","nickname":"木杉","note":"","ucode":"85651CBDDF7EDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321922,"discussion_content":"比特币也是一个不错的例子，被国内的币种耽误了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604651042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":46194,"user_name":"jon","can_delete":false,"product_type":"c1","uid":1253287,"ip_address":"","ucode":"5768A34E292CAA","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/a7/d379ca4f.jpg","comment_is_top":false,"comment_ctime":1543883004,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838850300","product_id":100020201,"comment_content":"zookeeper解决了分布式式环境中的数据一致性问题，放弃数据分片存储，采用的是，投票选举的算法获得过半票数的节点获得读写权","like_count":1},{"had_liked":false,"id":46186,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1543882267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5838849563","product_id":100020201,"comment_content":"我也感觉老师说的cap有点问题 按理来说 zk 是cp 系统 只要是分布式系统 p 就是天然存在的 并不是说 没有数据分片 就没有 p","like_count":1},{"had_liked":false,"id":353476,"user_name":"Asran","can_delete":false,"product_type":"c1","uid":1342581,"ip_address":"广东","ucode":"DFABF37F8A71EA","user_header":"","comment_is_top":false,"comment_ctime":1659491668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659491668","product_id":100020201,"comment_content":"分区容错性表示，一个系统虽然是分布式的，但是对外看上去应该是一个整体，不能由于分布式系统内部的某个节点挂掉，或网络出现故障，而导致系统对外表现异常。所以，对于分布式系统而言是一定要保证分区（分布）容错性的。","like_count":0},{"had_liked":false,"id":341112,"user_name":"Jay","can_delete":false,"product_type":"c1","uid":1592078,"ip_address":"","ucode":"42669FDE25765B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIM0sj0oP7bZwm2dWHq1n1XIsJLwGr122Qb1S2EytzAp62YZKJsiaNHTQayolevlBJGiaq7eBRHCGrg/132","comment_is_top":false,"comment_ctime":1649376279,"is_pvip":false,"replies":[{"id":"124790","content":"原文：1 ZooKeeper 主要提供数据的一致性 服务，其实现分布式系统的状态一致性依赖一个叫 Paxos 的算法。2 Paxos 算法有点过于复杂、实现难度也比较高，所以 ZooKeeper 在编程实现的时候将其简化成了一种叫做 ZAB 的算法","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1649643872,"ip_address":"","comment_id":341112,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1649376279","product_id":100020201,"comment_content":"但是这个做出判断决策的服务器也有可能会出现故障不可访问，同样整个服务器集群也不能正常运行。所以这个做出判断决策的服务器必须由多台服务器组成，来保证高可用，任意一台服务器宕机都不会影响系统的可用性。那么问题又来了，这几台做出判断决策的服务器又如何防止“脑裂”，自己不会出现混乱状态呢？有时候真的很无奈，分布式系统设计就像是一个追着自己尾巴咬的喵喵，兜兜转转回到开头。<br><br>-------------------------老师在文章中已经提到这个问题，可看完文章，我还是没有理解zookeeper集群本身的一致性是如何保证。   现在只看到zookeeper能够保证注册到它上面服务的一致性","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561469,"discussion_content":"原文：1 ZooKeeper 主要提供数据的一致性 服务，其实现分布式系统的状态一致性依赖一个叫 Paxos 的算法。2 Paxos 算法有点过于复杂、实现难度也比较高，所以 ZooKeeper 在编程实现的时候将其简化成了一种叫做 ZAB 的算法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649643872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330515,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1642006187,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642006187","product_id":100020201,"comment_content":"paxos 严格一致，但是复杂。zab，raft都是选主之后复制，有主就有任期的概念，任期涉及时间，时间不能数学上保障，时间的误差在工程上认为可接受。xab和raft选举的时候是牺牲了可用性的，时间在秒级别。paxos无主，故障可以极快的速度恢复。raft这类在无故障的时候可以比paxos快","like_count":0},{"had_liked":false,"id":325783,"user_name":"莎思比亚","can_delete":false,"product_type":"c1","uid":2066849,"ip_address":"","ucode":"71A9C184E9832C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/89/a1/2e2d6d0b.jpg","comment_is_top":false,"comment_ctime":1639129230,"is_pvip":false,"replies":[{"id":"118298","content":"这块确实，需要订正一下","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1639391675,"ip_address":"","comment_id":325783,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639129230","product_id":100020201,"comment_content":"这门课有点捣糨糊的意思，误导…… Zeekeeper是Zookeeper Atomic Broadcast协议","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538273,"discussion_content":"这块确实，需要订正一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639391676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281844,"user_name":"你为啥那么牛","can_delete":false,"product_type":"c1","uid":1503506,"ip_address":"","ucode":"1ABC604A54A8F6","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","comment_is_top":false,"comment_ctime":1614922402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614922402","product_id":100020201,"comment_content":"之前阅读过无数关于cap的文章，晦涩难懂，一知半解。看评论，大家对p的各有理解。一个是关注数据读写，一个是网络分区。不过，从这篇文章开始，我才算对cap的概念有了一个清晰。<br><br>从cap定理看，关注数据，而不是全部功能。那就是说，在业务量非常大的情况下，要保证数据更新的业务，数据读业务可以按需处理，比如限流、降级、熔断、缓存，这些操作会导致可用性或者一致性问题，但最终是要保证数据的正常处理，也是p所关注的。当然所造成业务功能体验，只能排次位来。<br><br>而对于某些系统来说，只会满足cp或者ap。cp在所有数据状态达成一致后，才会反馈响应给client。ap只需要在一个或几个数据状态更新后，即可用，不必等到所有数据一致。<br><br>照此推理，其实都属于cap范畴，只不过是舍弃a还是舍弃c的问题。<br><br>不知道我怎么理解有没有问题？","like_count":0},{"had_liked":false,"id":279956,"user_name":"Goku","can_delete":false,"product_type":"c1","uid":1031868,"ip_address":"","ucode":"8008F3BB10E609","user_header":"https://static001.geekbang.org/account/avatar/00/0f/be/bc/62d402da.jpg","comment_is_top":false,"comment_ctime":1614026020,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614026020","product_id":100020201,"comment_content":"distributed consensus, 叫分布式共识更恰当。","like_count":0},{"had_liked":false,"id":251745,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1601820963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601820963","product_id":100020201,"comment_content":"这个问题可以用另一种问法替代,怎么在分布式系统中判定这台服务器是恶意的呢？","like_count":0},{"had_liked":false,"id":247977,"user_name":"泊浮目","can_delete":false,"product_type":"c1","uid":1067981,"ip_address":"","ucode":"182A7CC2F6BDAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/4b/cd/185e5378.jpg","comment_is_top":false,"comment_ctime":1599963731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599963731","product_id":100020201,"comment_content":"ZK实现的是最终一致性。因为ZAB协议，在事务请求发起时，只要集群中一半的服务器同步完成即可。如果client的读请求发到集群中未同步的机器上，那么就会读到旧数据。","like_count":0},{"had_liked":false,"id":233212,"user_name":"丁婷","can_delete":false,"product_type":"c1","uid":1913692,"ip_address":"","ucode":"CCD22F62097405","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/0hSQWvd1HbzrsA5xh9tm9oUthTG9BiagIghmMnuF8YFfarKovb4E9jOCw69icLNaeJNClH1ia6f3conGibIicPRkxBg/132","comment_is_top":false,"comment_ctime":1594261485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594261485","product_id":100020201,"comment_content":"可以不可以用密钥对的方式来防止恶意修改数据呢？在zk和各服务器节点之间保存一对密钥，由zk对发过来的密钥进行匹配算法，就像令牌一样，只有通过算法后就认为是可通行的。","like_count":0},{"had_liked":false,"id":195104,"user_name":"Geek_beace6","can_delete":false,"product_type":"c1","uid":1822658,"ip_address":"","ucode":"80457C4651ABFB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK3VJ6MdTNNHpExyaK0dB06erBW14eez8soPEgict1WQdBS8gAFxB2OhaYUOcLtZUHoZ59vyHCrOFg/132","comment_is_top":false,"comment_ctime":1585136938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585136938","product_id":100020201,"comment_content":"我的数据怎么储存到大数据平台里面,具体落地怎么实现呢?有没有资料或者文档可以推荐","like_count":0},{"had_liked":false,"id":159988,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1575854708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575854708","product_id":100020201,"comment_content":"为了高可用、高并发、高可靠，引入了集群；但集群中谁是头的判断很重要，<br>万一大家的判断不同，就会出现脑裂。所以引入了裁判，一个会有单点故障，所以最好引入多个，但又会谁是主裁的问题。这是一个递归问题.....","like_count":0},{"had_liked":false,"id":79772,"user_name":"落落彩虹","can_delete":false,"product_type":"c1","uid":1264832,"ip_address":"","ucode":"F4CE1908DF149A","user_header":"https://static001.geekbang.org/account/avatar/00/13/4c/c0/73d52c05.jpg","comment_is_top":false,"comment_ctime":1553555997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553555997","product_id":100020201,"comment_content":"对于思考题其实我不知道答案......","like_count":0},{"had_liked":false,"id":69020,"user_name":"小谢同学","can_delete":false,"product_type":"c1","uid":1032544,"ip_address":"","ucode":"E809E6BC470631","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/60/fc3689d0.jpg","comment_is_top":false,"comment_ctime":1550647363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550647363","product_id":100020201,"comment_content":"我觉得CAP理论的关键在于要搞清楚对于A所覆盖范围的理解，在分布式系统中A的定义是全局性的，所以P的情况只需要理解成系统中一部分失效了（至于是网络还是什么原因不需要考虑），在这样出现P的前提下，如果想保持C那么这个系统就不是全局可用的或者说干脆就别用了","like_count":0},{"had_liked":false,"id":61478,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1547705956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547705956","product_id":100020201,"comment_content":"什么叫作工作量证明","like_count":0},{"had_liked":false,"id":61477,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1547705818,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547705818","product_id":100020201,"comment_content":"ZooKeeper服务器在一个一般系统中有几个，如何保证ZooKeeper自己的数据一致性？","like_count":0},{"had_liked":false,"id":60542,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1547510085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547510085","product_id":100020201,"comment_content":"我倒是觉得DPos，比较实用，符合中国国情。POW POS，太过于理想化","like_count":0},{"had_liked":false,"id":56579,"user_name":"胡增见","can_delete":false,"product_type":"c1","uid":1178004,"ip_address":"","ucode":"BC3C846E47A1BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/94/8d16be76.jpg","comment_is_top":false,"comment_ctime":1546498102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546498102","product_id":100020201,"comment_content":"李老师你好，请教个问题，zookeeper上面存储了hadoop很多组件的信息，相当于一个公共的配置了，别人只要能访问zookeeper就可以获取到所有信息了，那么zookeeper 是怎么保证安全的呢","like_count":0},{"had_liked":false,"id":52355,"user_name":"stone","can_delete":false,"product_type":"c1","uid":1174491,"ip_address":"","ucode":"336DDEC95DF202","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/YlhEhLOxBkVdWfggdGeZmibw3PRXQicuicVsN2nwdrfZhsTLye2MR0nYvmYGO9TjTjEiceIEjIkxZ9bTXdtzNDLa3Q/132","comment_is_top":false,"comment_ctime":1545366574,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545366574","product_id":100020201,"comment_content":"感觉这篇文章有点走过场，估计定位是从 0 开始的原因吧...","like_count":0},{"had_liked":false,"id":47788,"user_name":"暴风雪","can_delete":false,"product_type":"c1","uid":1283139,"ip_address":"","ucode":"BF1523D69866FF","user_header":"https://static001.geekbang.org/account/avatar/00/13/94/43/46a7d0a8.jpg","comment_is_top":false,"comment_ctime":1544197181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544197181","product_id":100020201,"comment_content":"感觉老师对ZAB算法一笔带过就算了，过程也没怎么说过，我们很难跟得上老师的思维啊","like_count":0},{"had_liked":false,"id":46957,"user_name":"家人平安","can_delete":false,"product_type":"c1","uid":1056803,"ip_address":"","ucode":"42A62B6119EAB4","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/23/37a17d78.jpg","comment_is_top":false,"comment_ctime":1544009120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544009120","product_id":100020201,"comment_content":"有个问题比较困惑，搭建一个hdfs+spark+zookeeper集群，每个节点都要安装zookepeer吗，有了什么架构可以参考吗","like_count":0},{"had_liked":false,"id":46438,"user_name":"杰之7","can_delete":false,"product_type":"c1","uid":1297232,"ip_address":"","ucode":"F7DA2E21085332","user_header":"https://static001.geekbang.org/account/avatar/00/13/cb/50/66d0bd7f.jpg","comment_is_top":false,"comment_ctime":1543926168,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543926168","product_id":100020201,"comment_content":"今天这讲学习了在大数据系统中数据一致性的问题。在过去的学习里已经熟悉，在分布式文件系统HDFS和非关系数据库Hbase需要让数据保持一致。但可能存在的问题是主服务器和重服务器都接受信息去提取不同的数据，这样应用程序得到的数据就是不一致的。为了解决这一问题，有了分布式中的CAP原则，在Zookeeper之前的解决方式是满足AP，而放弃一致性，由程序检查一致性的问题，也称为最终一致性。但Zookeeper出现之后，不容许这种情况发生，通过Paxos算法，保证了CA，在Zookeeper的架构中通货一种树状结构记录数据，这样解决的数据一致性的问题。回到老师的问题，如何保证不可信任的机器无法篡改数据，在区块链技术中，通过工作量的时间长短决定，我的思考是如果这台机器和其他机器读取数据长时间是不同的，是不是就是不可信任的机器，这样，主服务器接受信息之后，可以不给这些机器分配获取数据的权限。","like_count":0},{"had_liked":false,"id":46249,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1543888781,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1543888781","product_id":100020201,"comment_content":"老师可否增加一些实操案列讲解呢？对于前面的几个大数据处理框架都是概念原理介绍。","like_count":0}]}