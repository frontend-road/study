{"id":169113,"title":"59 | 少谈点框架，多谈点业务","content":"<p>你好，我是七牛云许式伟。</p><h2>架构是共识确认的过程</h2><p>对于架构这件事情，有不少让人误解的地方。前面在 “<a href=\"https://time.geekbang.org/column/article/166014\">57 | 心性：架构师的修炼之道</a>” 一讲中，我们提到过架构师需要掌握的三大技能：</p><ul>\n<li>理需求的能力；</li>\n<li>读代码的能力；</li>\n<li>抽象系统的能力。</li>\n</ul><p>这里面除了 “读代码” 这件事可能允许没有什么显性的产出外（其实也应该有，去读代码通常意味着缺架构设计文档，所以按理应该去补文档），其他两类事情要做好都不容易。</p><p>就理需求的能力而言，很多架构师一不知道要做需求分析，二不知道需求分析的产出到底应该是什么样的。需求分析可以说是架构师最没有概念的一个环节，尽管它至关重要。这一块领域特征比较明显，课堂上讲师授课的方式，很难有好的成效，更适合以实训的方式来强化。</p><p>就抽象系统的能力而言，很多架构师爱画架构图。画完了架构图，他就认为架构做完了，下一步该去编码。</p><p>这有什么问题？</p><p>首先，架构过程是团队共识形成与确认的过程。共识是需要精确的、无歧义的。而架构图显然并不精确。</p><p>团队没有精确的共识很可怕，它可能导致不同模块的工作牛头不对马嘴，完全无法连接起来，但是这个风险没有被暴露，直到最后一刻里程碑时间要到了，要出版本了，大家才匆匆忙忙联调，临时解决因为架构不到位产生的“锅”。</p><!-- [[[read_end]]] --><p>这时候人们的动作通常会走形。追求的不再是架构设计的好坏，而是打补丁，怎么把里程碑的目标实现了，别影响了团队绩效。</p><p>我们作个工程师的类比，这种不精确的架构，就好比建筑工程中，设计师画了一个效果图，没有任何尺寸和关键细节的确认，然后大家就分头开工了。最后放在一起拼接（联调），发现彼此完全没法对上，只能临时修修改改，拼接得上就谢天谢地了。是不是能够和当初效果图匹配？让老天爷决定吧。</p><p>更精确描述架构的方法是定义每个模块的接口。接口可以用代码表达，这种表达是精确的、无歧义的。架构图则是辅助模块接口，用于说明模块接口之间的关联。</p><p>为了证明接口的有效性，架构师还应该过一遍所有的用户故事，以伪代码或流程图的方式，把所有用户故事过一遍，确认模块之间的接口串起来是可以正常工作的。</p><p>实际上更有效的方法是在概要设计（也叫系统设计）阶段就把框架代码写出来，真真正正用代码，而不是伪代码，把用户故事串一遍。</p><p>代码即文档。代码是理解一致性更强的文档。</p><p>这样做的好处是，我们把联调工作做到了前头，工程的最大风险就得到了管理。剩下来的就是每个模块自身的好坏，这就和组织能力无关，只取决于我们招聘的工程师个体素质了。</p><p>所以模块的接口，是架构设计的核心。</p><h2>别让框架绑架业务</h2><p>接口代表什么？接口代表业务。架构图代表什么？架构图代表框架。</p><p>不要让框架绑架业务。</p><p>在架构的两侧，一边是用户需求，一边是技术。接口代表用户需求，代表业务。框架代表技术，是我们满足需求的方法。</p><p>框架它是重要的。但是不要让框架反客为主，溢出模块边界。在系统迭代的过程中，框架会经受变化，以适应需求的演进过程。</p><p>抓住稳定的东西，比追逐变化更重要。</p><p>框架，体现的是需求泛化的能力。从架构思维角度上来说，它是通过抽象出需求模板，把多个需求场景中变化的部分抽离出来，形成相对稳定的泛化需求。</p><p>框架的抽象能力不是一蹴而就的，它既依赖我们抽象系统的能力，也依赖我们对领域需求的理解程度。所以框架会随着时间而迭代，逐步向最理想的状态逼近。</p><p>如果框架不能满足需求，但我们不迭代框架，而是硬生生去添加这样的功能需求，会发生什么？</p><p>结果是，代码逃逸出框架，把系统搅得支离破碎。这时候你可能能够嗅到一丝危险的气息。但是你可能说没办法，里程碑的截止时间就在那里，没办法。</p><p>这实际上是大框架面临的最大挑战。它最好能够提前预测所有可能的需求，以此抑制潜在代码逃逸的风险。</p><p>但这很难。</p><p>所以我们应该换一个角度看这个问题。在如何持续保证系统洁净的这件事情上，我个人给的建议是：</p><blockquote>\n<p>连接性的代码越少越好。</p>\n</blockquote><p>什么是连接性的代码？就是把两个子的业务系统连接，构成一个大业务场景的代码。如果有大业务场景，应该抽象出新的更大范畴的业务系统。</p><p>这样我们的焦点就始终在业务上。</p><p><strong>每个模块都是一个业务。</strong>这里我们说的模块是一种泛指，它包括：函数、类、接口、包、子系统、网络服务程序、桌面程序等等。</p><p>抽象出符合业务自然语义的接口，远比抽象出泛需求的框架要容易得多。因为，业务语义是稳定的。</p><p>关注业务接口的定义，我们自然就把焦点转向关注业务如何由相互正交的子业务组合而来。</p><p>我们举例来说明关注业务与关注框架这两种思维方式的差异性。</p><p>我们知道，在 IO 系统中，读取磁盘文件中的数据有两种常见的模型：SAX 和 DOM 模型。</p><p>SAX 模型是一种基于事件的读盘机制。在读完一个完整的数据单元时，就发送一个读到某数据单元的事件。比如在 XML 中，它的事件接口看起来是这样的：</p><pre><code>type ContentHandler interface {\n  StartDocument()\n  StartElement(element string, attrs Attributes)\n  Characters(chars []byte)\n  EndElement(element string)\n  EndDocument()\n}\n</code></pre><p>DOM 模型则基于对象的组织模型来提供数据读取的能力。细分来说，它又有两种不同的选择。一种是基于抽象的 DOM 树，它看起来是这样的：</p><pre><code>type Nodes interface {\n  Len() int\n  Elem(i int) Node  \n}\n\ntype Node interface {\n  Childs() Nodes\n  Name() string\n  Type() NodeType\n  Text() []byte\n  Attributes() Attributes\n}\n</code></pre><p>另一种是基于更具体的业务逻辑，与具体的领域相关，比如对于 Word/WPS 这样的字处理软件看起来是这样的：</p><pre><code>type Span interface {\n  Text() []byte\n  Attributes() SpanAttrs\n}\n\ntype Spans interface {\n  Len() int\n  Elem(i int) Span\n}\n\ntype Paragraph interface {\n  Spans() Spans\n  Attributes() ParagraphAttrs\n}\n\ntype Paragraphs interface {\n  Len() int\n  Elem(i int) Paragraph\n}\n\ntype Document interface {\n  Paragraphs() Paragraphs\n  Attributes() DocumentAttrs\n}\n</code></pre><p>基于 SAX 模型是非常典型的框架思维。它的确足够的通用，但它有两个问题。</p><p>一方面，基于事件模型是一个非常简陋的编程框架，与大部分 IO 子系统的需求方的诉求并不那么匹配。关于这一点我们在下一讲 “<a href=\"https://time.geekbang.org/column/article/170912?utm_term=zeusN8V46&amp;utm_source=pcchaping\">60 | 架构分解：边界，不断重新审视边界</a>” 还会详细展开。</p><p>另一方面，它不体现业务，使用方不能在缺乏文档配合的情况下正确地使用这个接口。本来代码应该是精确的，但是这样的接口把精确性这个最佳的优点给放弃了。</p><p>基于 DOM 模型的两种模型中，看起来前者的接口很简洁，但实际上它和上面的 SAX 模型有类似的问题：不体现业务。而后者虽然看起来非常冗长，但是它可以脱离额外的接口说明文档而直接毫无心智负担地使用。毫无疑问，这才是我们该追寻的接口描述方式。</p><h2>别用实现替代业务</h2><p>在接口设计中，我们还看到另一种倾向，可以认为是用框架来替代业务的特例：用实现机制替代业务。</p><p>我个人经常给架构师们说的一句话是：</p><blockquote>\n<p>比框架（架构图）更重要的是数据结构，比数据结构更重要的是接口。</p>\n</blockquote><p>为什么数据结构比框架（架构图）更重要？业务数据结构是架构实现机制的灵魂。从共识确认的角度，数据结构相比框架而言，是更重要的共识。</p><p>一些架构师能够想清楚实现，但是想不清楚业务。他们用实现替代对业务系统的抽象。</p><p>用实现机制替代业务的典型案例是定义了数据结构，但是不抽象数据的业务逻辑，直接让使用方操作成员变量，或者定义一堆成员变量的 get/set 接口。</p><p>另一个例子是当我们用 ORM 框架操作数据库时，工程师非常容易犯的错误是，直接操作数据结构，而忽略定义业务接口的重要性。</p><h2>结语</h2><p>今天谈的内容，核心指向一点：</p><blockquote>\n<p>架构就是业务的正交分解。每个模块都有它自己的业务。</p>\n</blockquote><blockquote>\n<p>这里我们说的模块是一种泛指，它包括：函数、类、接口、包、子系统、网络服务程序、桌面程序等等。</p>\n</blockquote><p>它看似简单，但是它太重要了，重要到需要单独一讲来把它谈清楚。它是一切架构动作的基础。</p><p>架构行为的三步曲：“需求分析”、“概要设计”、模块的 “详细设计”，背后都直指业务的正交分解，只是逐步递进，一步步从模糊到越来越强的确定性，直至最终形成业务设计的完整的、精确无歧义的解决方案。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们的话题是 “架构分解：边界，不断重新审视边界”。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","neighbors":{"left":{"article_title":"58 | 如何判断架构设计的优劣？","id":167844},"right":{"article_title":"60 | 架构分解：边界，不断重新审视边界","id":170912}},"comments":[{"had_liked":false,"id":154376,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1574417773,"is_pvip":false,"replies":[{"id":"59292","content":"赞","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1574434824,"ip_address":"","comment_id":154376,"utype":1}],"discussion_count":2,"race_medal":0,"score":"169078142317","product_id":100025201,"comment_content":"“框架，提现的是需求泛化的能力”。<br><br><br>体现需求泛化的能力，就是架构可以适应需求的变化。需求的变化就是接口的变化，因为本文说了，接口代表需求。<br><br>接口代表了要做什么，需求就是一个要做什么的集合，是目的。接口是需求的流程分解，即可以体现用户地图。<br><br>程序分为算法和数据结构，业务分为接口和业务数据，业务数据是业务的沉淀，是比框架更稳定的东西，而接口是在数据之上的动作，所以位置最高。","like_count":40,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475448,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574434824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1199192,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4c/58/25152fa9.jpg","nickname":"kevin","note":"","ucode":"918EFC033B1630","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128213,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578620551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154776,"user_name":"Fs","can_delete":false,"product_type":"c1","uid":1083184,"ip_address":"","ucode":"0AD0EFB5544B9A","user_header":"https://static001.geekbang.org/account/avatar/00/10/87/30/4626c8c0.jpg","comment_is_top":false,"comment_ctime":1574561431,"is_pvip":false,"replies":[{"id":"59442","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1574569867,"ip_address":"","comment_id":154776,"utype":1}],"discussion_count":2,"race_medal":0,"score":"78883972759","product_id":100025201,"comment_content":"定义了数据结构，但是不抽象数据的业务逻辑，直接让使用方操作成员变量，或者定义一堆成员变量的 get&#47;set 接口。<br><br>这句话含义是DDD中的贫血模型了。比如我需要判断某个实体是否是合格的，需要通过a,b 字段来判断。这个实现没有定义在数据结构里，却把a,b字段通过get暴露出去，让调用方去判断了","like_count":18,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475574,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574569867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543599,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","nickname":"xtepCool","note":"","ucode":"6181687E98524E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369769,"discussion_content":"nice，解决了我的疑惑~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619152176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154237,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1574394789,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35934133157","product_id":100025201,"comment_content":"目前来看，架构设计套路有限，但业务领域无限。如何应用有限的套路做出无限的架构设计，难点应是在业务上。没有足够的业务背景积累和业务需求洞察，架构设计就会出现知易行难的窘境。但是想要架构师一步到位具有健全的业务领域知识也是不现实的。所以，横竖都不好，那么就落地灵活的设计，动态去演变，也就所谓的演进式架构。而代码变动是高成本的，所以要想办法降低成本。首先代码可读要高。接着，单模块内各层，以及模块间的耦合要低。最后，代码的实现要采用合适的设计模式，以便易于扩展。但这三点不取决于架构师，具体业务开发个人素养的影响更大。所以，感觉约往后，业务开发的个人素养要求会越高。至少领域设计（战略规划）和架构分层、设计模式（战术应用）的诉求怕是少不了的。","like_count":8},{"had_liked":false,"id":154205,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1574390649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23049227129","product_id":100025201,"comment_content":"    老师今天课程中提到了一个很关键的现状：框架绑架开发。这其实是许多程序过程中经常碰到的问题：某种框架不错大家去用，可是随着业务的复杂度和需求的复杂度的增加我们会发现被框架绑架了-实现不了，然后就开始调整需求或者实现方式。<br>     这些年更多基于内核或者核心去改&#47;写框架的：稍微有点特色就火了；其实我们去看本质会发现，只是降低了对某些框架的绑定能力而已，当程序中一大堆框架时其实我们就被一大堆事物绑架了。框架使用的度确实是个问题：用的越深绑架越深，故而其实都是在努力的做解绑-最小需求使用。<br>     以上是个人的一点切身体会和薄见：一路听老师的课一路学习修正；期待老师的后续分享。","like_count":6},{"had_liked":false,"id":154110,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1574382411,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164317003","product_id":100025201,"comment_content":"理清楚需求 列出验收标准 让一线开发理解做成啥样OK 有一些感触👍🏻","like_count":2},{"had_liked":false,"id":295134,"user_name":"yz","can_delete":false,"product_type":"c1","uid":2042585,"ip_address":"","ucode":"744950D4FB1121","user_header":"https://static001.geekbang.org/account/avatar/00/1f/2a/d9/d35a4864.jpg","comment_is_top":false,"comment_ctime":1622259666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5917226962","product_id":100025201,"comment_content":"许老师的课很有价值，是那种时时需要拿出来感悟的课程！越读感受越深！例如：1）架构就是业务的正交分解。每个模块都有它自己的业务。2）抽象出符合业务自然语义的接口，远比抽象出泛需求的框架要容易得多。因为，业务语义是稳定的。关注业务接口的定义，我们自然就把焦点转向关注业务如何由相互正交的子业务组合而来。<br><br>","like_count":1},{"had_liked":false,"id":289716,"user_name":"xtepCool","can_delete":false,"product_type":"c1","uid":1543599,"ip_address":"","ucode":"6181687E98524E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","comment_is_top":false,"comment_ctime":1619151815,"is_pvip":false,"replies":[{"id":"105099","content":"就是不考虑模块（业务）边界，为了实现功能而实现功能。这会使得最终这个业务就只有一个大模块，缺乏清晰的分解，所有代码揉在一起。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1619183498,"ip_address":"","comment_id":289716,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5914119111","product_id":100025201,"comment_content":"用实现机制替代业务。这个什么理解呢？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519001,"discussion_content":"就是不考虑模块（业务）边界，为了实现功能而实现功能。这会使得最终这个业务就只有一个大模块，缺乏清晰的分解，所有代码揉在一起。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619183498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246258,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1599229396,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894196692","product_id":100025201,"comment_content":"SAX模式是不是抽象的太过了，以至于丧失了应有的灵活性和业务意义？这里不是很明白","like_count":1},{"had_liked":false,"id":234992,"user_name":"JasonZ","can_delete":false,"product_type":"c1","uid":1104818,"ip_address":"","ucode":"992193AE44C39C","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","comment_is_top":false,"comment_ctime":1594864376,"is_pvip":false,"replies":[{"id":"86801","content":"😓那么你们工程师忙么？","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1594905989,"ip_address":"","comment_id":234992,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5889831672","product_id":100025201,"comment_content":"比框架（架构图）更重要的是数据结构，比数据结构更重要的是接口。这句话不是很认同。一般业务迭代中，接口的变化是很快的。底层数据结构和框架比接口更稳定","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501572,"discussion_content":"😓那么你们工程师忙么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594905989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543599,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","nickname":"xtepCool","note":"","ucode":"6181687E98524E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369774,"discussion_content":"接口是业务的体现，接口变化快岂不是意味着说明你们业务的需求变更频繁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619152997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1552345,"avatar":"https://static001.geekbang.org/account/avatar/00/17/af/d9/b1fc248c.jpg","nickname":"黄平","note":"","ucode":"3AEFF39CCAC5C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348137,"discussion_content":"这里的接口是否需要区分类型？BFF层的接口不是应该会很频繁变动么？特别是业务不稳定的时候","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612437494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211728,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1587999509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882966805","product_id":100025201,"comment_content":"* 模块的接口，是架构设计的核心。在概要设计阶段，用真真正正的代码把用户故事串一遍，降低后期联调的风险。<br>    * 接口确定了，提供哪些功能也就确定了。<br>    * 把业务数据的流转也走一遍，那相当于系统就跑起来，只是很多实现是假的，但也是真实的一种体现。<br>    * 控制住高层的复杂度、风险，开发阶段负担就少了很多。<br>* 连接性的代码越少越好。<br>    * 也就是模块之间的交互越少越好，互相调用的接口越少越好，最好有一个模块统一管理，其它模块都不互相依赖，需要的东西以接口的方式传进来。","like_count":1},{"had_liked":false,"id":191027,"user_name":"gtp","can_delete":false,"product_type":"c1","uid":1372089,"ip_address":"","ucode":"12E21307343B3A","user_header":"https://static001.geekbang.org/account/avatar/00/14/ef/b9/c0c12bea.jpg","comment_is_top":false,"comment_ctime":1584718424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879685720","product_id":100025201,"comment_content":"闻所未闻的观点","like_count":1},{"had_liked":false,"id":181245,"user_name":"Bravery168","can_delete":false,"product_type":"c1","uid":1232973,"ip_address":"","ucode":"DB08AEFBD6DF2B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/4d/2116c1a4.jpg","comment_is_top":false,"comment_ctime":1582526775,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"5877494071","product_id":100025201,"comment_content":"比框架（架构图）更重要的是数据结构，比数据结构更重要的是接口。<br>-----我的理解： 业务对象的定义包含了数据结构和数据行为逻辑，架构设计需要从业务实现的角度完整表达，数据结构表达是其中的一部分，更完整的表达体现在接口层面。","like_count":1},{"had_liked":false,"id":155724,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1574744689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869711985","product_id":100025201,"comment_content":"本身也应该按module 来切分代码模块，最好让模块多具备正交性。","like_count":1},{"had_liked":false,"id":155200,"user_name":"沫沫（美丽人生）","can_delete":false,"product_type":"c1","uid":1051023,"ip_address":"","ucode":"FC73BF0D79E3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/8f/ad6039b6.jpg","comment_is_top":false,"comment_ctime":1574661689,"is_pvip":false,"replies":[{"id":"59605","content":"没本质区别。不过很多saas公司可能刚开始没有考虑接口开放的重要性，所以在这一层会遇到一些坑。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1574685112,"ip_address":"","comment_id":155200,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869628985","product_id":100025201,"comment_content":"许老师好，现在有些SaaS 企业PaaS化，请问从SaaS 向PaaS 过度的关键技术是什么呢？在系统架构上两者有什么本质区别吗？望不吝赐教。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475687,"discussion_content":"没本质区别。不过很多saas公司可能刚开始没有考虑接口开放的重要性，所以在这一层会遇到一些坑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574685112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347764,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1654405177,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654405177","product_id":100025201,"comment_content":"接口对外是稳定的，模型也是稳定的<br>这2者看哪个稳定要看是从哪个角度看，需求变化一般好的设计是模型上的扩展，接口是相对不变的<br>比如交易下单，这个接口在设计的时候考虑充分后就可以在后面迭代中不变，而不同的行业交易需要从模型扩展承接","like_count":0},{"had_liked":false,"id":323220,"user_name":"lufeng","can_delete":false,"product_type":"c1","uid":1086762,"ip_address":"","ucode":"D99F3CEB948D1D","user_header":"https://static001.geekbang.org/account/avatar/00/10/95/2a/572fc97c.jpg","comment_is_top":false,"comment_ctime":1637766330,"is_pvip":false,"replies":[{"id":"117308","content":"接口优先于数据结构 数据结构已经是实现了 只不过是实现的灵魂","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1637839754,"ip_address":"","comment_id":323220,"utype":1}],"discussion_count":0,"race_medal":1,"score":"1637766330","product_id":100025201,"comment_content":"架构到数据结构，再到接口，是一个设计到实现的过程，接口定义了业务的逻辑，数据结构定义了领域实体，对实体的业务的动作是实体对外胡接口，多个内聚的实体构成了模块，相互独立，正交的模块构成系统，类似面向对象的领域设计理念。<br><br>感觉最核心的是实体=数据结构+接口，😄","like_count":0},{"had_liked":false,"id":321376,"user_name":"哲","can_delete":false,"product_type":"c1","uid":2581217,"ip_address":"","ucode":"2616478F11E457","user_header":"https://static001.geekbang.org/account/avatar/00/27/62/e1/764aca72.jpg","comment_is_top":false,"comment_ctime":1636817411,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636817411","product_id":100025201,"comment_content":"架构是对业务的正交分解，很多时候做架构是需求分析，概要设计，缺乏详细设计这个流程。详细设计非常关键，不在于一定要有文档还是什么，而在于梳理详细设计的过程，会进行需求的拆分，定义模块的边界，对每一个子业务具体做什么也会定义清楚，在此基础之下的工作，就是代码实现简单的事情了。","like_count":0},{"had_liked":false,"id":301316,"user_name":"Zoker","can_delete":false,"product_type":"c1","uid":1218810,"ip_address":"","ucode":"CD7F9642C61DD4","user_header":"https://static001.geekbang.org/account/avatar/00/12/98/fa/6b80ed33.jpg","comment_is_top":false,"comment_ctime":1625628166,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625628166","product_id":100025201,"comment_content":"一切都是为业务服务的，如果没法通过业务产生价值，框架的存在也只是一堆代码而已，就像没了软件，电脑就是一堆金属制品一样。","like_count":0},{"had_liked":false,"id":248055,"user_name":"up","can_delete":false,"product_type":"c1","uid":1083720,"ip_address":"","ucode":"C329F259944C5D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ib0X7hRHD3YC1XVoUbW8nak05yJEiaZM4BkABzRnJEhI1IvkFzzGyO1UqJzdkyUVe5SQuH5tPExEMwLB1zqLdryQ/132","comment_is_top":false,"comment_ctime":1599994813,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599994813","product_id":100025201,"comment_content":"1.架构就是业务的正交分解。正交分解这个概念非常棒，比好内聚低耦合的拆分方向深刻很多。<br>2. 还有基础架构和服务治理的重视很有同感，也很受启发，本书干货满满，借此感谢许老师的毫无保留的分享！<br>3. 所以模块的接口，是架构设计的核心。将接口和数据结构的设计也全部划分到架构师的职责上，不是很认同，两者会涉及模块多数细节，这会导致架构师和开发人员过多的沟通，协作效率急降，我的想法是，职责也应该正交分解，核心模块交由能力最强的人来做，接受周边模块可能出现的差一些的设计。回头来看架构师的职责，我的理解是负责全局架构、选型、技术难点、开发组件、开发核心模块，这块理解不够深刻，还在从许老师的书中不断学习思考 ～_～","like_count":0},{"had_liked":false,"id":225893,"user_name":"thinker","can_delete":false,"product_type":"c1","uid":1107762,"ip_address":"","ucode":"1D9ECA03A28931","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/32/82939538.jpg","comment_is_top":false,"comment_ctime":1591884390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591884390","product_id":100025201,"comment_content":"接口&gt;数据结构&gt;框架(架构图)<br>包含业务语义的代码","like_count":0},{"had_liked":false,"id":224543,"user_name":"Han","can_delete":false,"product_type":"c1","uid":1122349,"ip_address":"","ucode":"280808D4F641AA","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/2d/dfa5bec8.jpg","comment_is_top":false,"comment_ctime":1591435681,"is_pvip":false,"replies":[{"id":"82665","content":"包括的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1591446753,"ip_address":"","comment_id":224543,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1591435681","product_id":100025201,"comment_content":"老师，不太明白您对框架的定义，等同于架构图？ 能否解释一下。 您说的框架应该不是指那些三方的开源框架吧。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497517,"discussion_content":"包括的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591446753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543599,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","nickname":"xtepCool","note":"","ucode":"6181687E98524E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369776,"discussion_content":"框架是需求的实现方法，包含架构图（接口说明文档），接口定义，数据结构。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619153251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222587,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1590843828,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1590843828","product_id":100025201,"comment_content":"DDD比较合适","like_count":0},{"had_liked":false,"id":165841,"user_name":"Expif","can_delete":false,"product_type":"c1","uid":1002162,"ip_address":"","ucode":"17D1E78E513C18","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/b2/6b8451c1.jpg","comment_is_top":false,"comment_ctime":1577330667,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577330667","product_id":100025201,"comment_content":"目前我们这的架构师基本不做需求分析，需求分析都是SA-系统分析师在做，当SA对其中有些技术点拿不准的时候才去咨询架构师，而部分架构师就确认下什么功能放在什么系统，什么功能这个系统不应该做==，非常机械。","like_count":0},{"had_liked":false,"id":160059,"user_name":"苟范儿","can_delete":false,"product_type":"c1","uid":1364883,"ip_address":"","ucode":"B06B86765512FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/93/bef5a186.jpg","comment_is_top":false,"comment_ctime":1575862074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575862074","product_id":100025201,"comment_content":"“追求的不再是架构设计的好坏，而是打补丁，怎么把里程碑的目标实现了，别影响了团队绩效“ 。绩效真是把双刃剑，也许在做架构的时候也要充分将这些管理、协作因素考虑进去。  <br><br>“代码即文档。代码是理解一致性更强的文档。“ 现在小孩子都开始抓编程，编程语言也真正变成一种语言，与计算机沟通、与 IT 人员沟通的语言。","like_count":0},{"had_liked":false,"id":156808,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1574961366,"is_pvip":false,"replies":[{"id":"60176","content":"都是","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1574987423,"ip_address":"","comment_id":156808,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574961366","product_id":100025201,"comment_content":"数据结构是指的是表结构或者是实体吗？还是什么链表，栈，树之类的数据结构呢？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476237,"discussion_content":"都是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574987423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154383,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1574419531,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574419531","product_id":100025201,"comment_content":"定好边界，提前抽象出各个子模块对接时的接口与数据，然后是各个子模块的结构。架构师之路，道阻且长","like_count":0}]}