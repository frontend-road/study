{"id":459554,"title":"04｜编码原理：视频究竟是怎么编码压缩的？","content":"<p>你好，我是李江。今天我们一起来聊一聊视频编码。</p><p>说到视频，我们首先想到的可能就是占内存。我们知道一个视频是由一连串图像序列组成的，视频中图像一般是YUV格式。现在，我们假设有一个电影视频，分辨率是1080P，帧率是25fps，并且时长是2小时，如果不做视频压缩的话，它的大小是1920 x 1080 x 1.5 x 25 x 2 x 3600 = 521.4G。而我们的电脑一般是500G的硬盘，那就连2部电影都放不下了。如果是在视频通话场景下的话，按照这个大小去传输视频数据，对流量和带宽资源的消耗也是非常大的，并且如此大的数据发送对网络要求也非常高，很显然我们是接受不了的。因此，做视频编码压缩就非常有必要。</p><p>那么，接下来我就深入讲讲视频编码，带你从预测编码、变换编码、熵编码等方面，系统了解下视频编码的原理。相信这节课过后，你会对视频编码有一个全面的了解。</p><h2>视频编码的原理</h2><p>视频编码是对一帧帧图像来进行的。一般我们所熟知的彩色图像的格式是RGB的，即用红绿蓝三个分量的组合来表示所有颜色。但是，RGB三个颜色是有相关性的，为了去掉这个相关性，减少需要编码的信息量，我们通常会把RGB转换成YUV，也就是 <strong>1个亮度分量和2个色度分量</strong>。</p><!-- [[[read_end]]] --><p>另外，人眼对于亮度信息更加敏感，而对于色度信息稍弱，所以视频编码是将Y分量和UV分量分开来编码的。</p><p>而对于每一帧图像，又是划分成一个个块来进行编码的，<strong>这一个个块在H264中叫做宏块</strong>，而在VP9、AV1中称之为超级块，其实概念是一样的。宏块大小一般是16x16（H264、VP8），32x32（H265、VP9），64x64（H265、VP9、AV1），128x128（AV1）这几种。这里提到的H264、H265、VP8、VP9和AV1都是市面上常见的编码标准，下面我会介绍，这里就不再详细讲述。</p><p><strong>图像一般都是有数据冗余的</strong>，主要包括以下4种：</p><ul>\n<li><strong>空间冗余。</strong>比如说将一帧图像划分成一个个16x16的块之后，相邻的块很多时候都有比较明显的相似性，这种就叫空间冗余。</li>\n<li><strong>时间冗余。</strong>一个帧率为25fps的视频中前后两帧图像相差只有40ms，两张图像的变化是比较小的，相似性很高，这种叫做时间冗余。</li>\n<li><strong>视觉冗余。</strong>我们的眼睛是有视觉灵敏度这个东西的。人的眼睛对于图像中高频信息的敏感度是小于低频信息的。有的时候去除图像中的一些高频信息，人眼看起来跟不去除高频信息差别不大，这种叫做视觉冗余。</li>\n<li><strong>信息熵冗余。</strong>我们一般会使用Zip等压缩工具去压缩文件，将文件大小减小，这个对于图像来说也是可以做的，这种冗余叫做信息熵冗余。<br>\n视频编码就是通过减少上述4种冗余来达到压缩视频的目的。接下来我们就一起来慢慢剥开视频编码这个“洋葱”吧。</li>\n</ul><p>对于一个YUV图像，我们把它划分成一个个16x16的宏块（以H264为例），Y、U、V分量的大小分别是16x16、8x8、8x8。这里我们只对Y分量进行分析（U、V分量同理）。假设Y分量这16x16个像素就是一个个数字，我们从左上角开始之字形扫描每一个像素值，则可以得到一个“像素串”。如下图所示：<br>\n<img src=\"https://static001.geekbang.org/resource/image/6c/16/6c879e4971995d927e9de46616256b16.jpg?wh=1280x720\" alt=\"\"><br>\n如果你是程序员的话，你肯定做过一个压缩字符串的编程题目，就是将 “aaaabbbccccc” 压缩成 “4a3b5c”，字符串由13个字节压缩到7个字节，这个叫做<strong>行程编码</strong>。如果我们对图像宏块扫描出来的这个“像素串”做同样的行程编码操作，是不是也有可能减小图像块呢？</p><p>在对“像素串”行程编码之前，我们先回过头来看看另一个行程编码的例子。如果刚才编程题的字符串是 “abcdabcdabcd” 的话，那么编码之后就会是 “1a1b1c1d1a1b1c1d1a1b1c1d”。字符串的大小从13字节变成了25字节，还变大了。</p><p>我们发现如果想要达到压缩的目的，我们必须要使得编码前的字符串中出现比较多连续相同的字符。这对于图像块也是一样的。我们需要使得扫描出来的“像素串”，也尽量出现连续相同的像素值，最好是一连串数字很小（比如0）的“像素串”，因为0在二进制中只占1个位就可以了。</p><p>这个地方你可能会有疑惑，0也是至少要一个字节存储，需要8个位，怎么会是1个位呢？这个有的编码算法是可以做到的，比如指数哥伦布编码，它就可以做到0只占用一个位。事实上，算术编码可以做到一个符号只占用0点几个位，连一个位都不用，这里不详细展开了，感兴趣的话你可以去查阅下资料。</p><p>那我们<strong>如何做到将这串像素值变成有很多0的“像素串”呢</strong>？</p><p>首先第一步，<strong>我们通过减少图像块的空间冗余和时间冗余来接近这个目标</strong>。刚才我们也说到，图像内部相邻宏块之间有很多相似性，并且两张图像之间也有很多相似性。因此，根据图像的这个特点，我们可以在编码的时候进行<strong>帧内预测和帧间预测</strong>。</p><p>帧内预测就是在当前编码图像内部已经编码完成的块中找到与将要编码的块相邻的块。一般就是即将编码块的左边块、上边块、左上角块和右上角块，通过将这些块与编码块相邻的像素经过多种不同的算法得到多个不同的预测块。</p><p>然后我们再用编码块减去每一个预测块得到一个个残差块。最后，我们取这些算法得到的残差块中像素的绝对值加起来最小的块为预测块。而得到这个预测块的算法为帧内预测模式。</p><p><img src=\"https://static001.geekbang.org/resource/image/69/6a/691de4570939f2a5953c848b697e0c6a.jpg?wh=1326x743\" alt=\"\"></p><p>由于这个残差块中像素的绝对值之和最小，这个残差块的像素值经过扫描之后的“像素串”是不是就比直接扫描编码块的“像素串”中的像素值更接近0了？</p><p>同理，帧间预测也是一样的。我们在前面已经编码完成的图像中，循环遍历每一个块，将它作为预测块，用当前的编码块与这个块做差值，得到残差块，取残差块中像素值的绝对值加起来最小的块为预测块，预测块所在的已经编码的图像称为参考帧。预测块在参考帧中的坐标值 (x0, y0) 与编码块在编码帧中的坐标值 (x1, y1) 的差值 (x0 - x1, y0 - y1) 称之为运动矢量。而在参考帧中去寻找预测块的过程称之为运动搜索。事实上编码过程中真正的运动搜索不是一个个块去遍历寻找的，而是有快速的运动搜索算法的。之后我们在帧间预测的课中会详细介绍。</p><p>总之，通过预测得到的残差块的像素值相比编码块的像素值，去除了大部分空间冗余信息和时间冗余信息，这样得到的像素值更小。如果把这个残差块做扫描得到的像素串送去做行程编码，是不是相比直接拿编码块的像素串去做编码更有可能得到更大的压缩率？</p><p><strong>但是我们的目标不只是将像素值变小，而是希望能出现连续的0像素，那怎么办呢？</strong></p><p>这就需要利用我们人眼的视觉敏感性的特点了。我们刚才说了人眼对高频信息不太敏感。因为人眼看到的效果可能差别不大，所以我们可以去除一些高频信息。这个就是接下来我们要讨论的 <strong>DCT变换和量化</strong>。</p><p>为了分离图像块的高频和低频信息，我们需要将图像块变换到频域。常用的变换是DCT变换。DCT变换又叫离散余弦变换。在H264里面，如果一个块大小是16x16的，我们一般会划分成16个4x4的块（当然也有划分成8x8做变换的，我们这里以4x4为例）。然后对每个4x4的块做DCT变换得到相应的4x4的变换块。</p><p>变换块的每一个“像素值”我们称为系数。变换块左上角的系数值就是图像的低频信息，其余的就是图像的高频信息，并且高频信息占大部分。低频信息表示的是一张图的总体样貌。一般低频系数的值也比较大。而高频信息主要表示的是图像中人物或物体的轮廓边缘等变化剧烈的地方。高频系数的数量多，但高频系数的值一般比较小（注意不是所有的高频系数都一定小于低频，只是大多数高频系数比较小）。如下图所示（黄色为低频，绿色为高频）：</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/ed/b737f23d14a7980d305d16d4136e62ed.jpg?wh=1280x720\" alt=\"\"></p><p>这样做完了DCT变换之后，低频和高频信息就分离开来了。由于低频信息在左上角，其余的都是高频信息。那么如果我们对变换块的像素值进行“之字形”扫描，这样得到的像素串，前面的就是数值比较大的低频系数，后面就是数值比较小的高频部分。</p><p>由于人眼对高频信息不太敏感，如果我们通过一种手段去除掉大部分高频信息，也就是将大部分高频信息置为0，但又不太影响人的观感，是不是就可以达到我们最初的目标，即可以得到有一连串0的像素串？这就涉及到量化操作了。</p><p>我们让变换块的系数都同时除以一个值，这个值我们称之为<strong>量化步长</strong>，也就是QStep（QStep是编码器内部的概念，用户一般使用<strong>量化参数</strong> QP这个值，QP和QStep一一对应，你可以自行去网上查询一下转换表），得到的结果就是量化后的系数。<strong>QStep越大，得到量化后的系数就会越小</strong>。同时，相同的QStep值，高频系数值相比低频系数值更小，量化后就更容易变成0。这样一来，我们就可以将大部分高频系数变成0。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/41/4d/41b9be2b425a8925c32bfe008f382f4d.jpg?wh=1280x720\" alt=\"\"></p><p>解码的时候，我们会将QStep乘以量化后的系数得到变换系数，很明显这个<strong>变换系数和原始没有量化的变换系数是不一样的</strong>，这个就是我们常说的有损编码。而到底损失多少呢？</p><p>这由QStep来控制，QStep越大，损失就越大。QStep跟QP一一对应，也就是说确定了一个QP值，就确定了一个QStep。所以从编码器应用角度来看，<strong>QP值越大，损失就越大，从而画面的清晰度就会越低</strong>。同时，QP值越大系数被量化成0的概率就越大，这样编码之后码流大小就会越小，压缩就会越高。</p><p>以上就是视频编码的推理过程。总结一下就是，为了能够在最后熵编码的时候压缩率更高，我们希望送到熵编码（以行程编码为例）的“像素串”，是一串含有很多0，并且最好连续为0的“像素串”。</p><p>为了达到这个目标，我们先通过帧内预测或者帧间预测去除空间冗余和时间冗余，从而得到一个像素值相比编码块小很多的残差块。之后我们再通过DCT变换将低频和高频信息分离开来得到变换块，然后再对变换块的系数做量化。由于高频系数通常比较小，很容易量化为0，同时人眼对高频信息不太敏感，这样我们就得到了一串含有很多个0，大多数情况下是一串含有连续0的“像素串”，并且人的观感还不会太明显。这样，最后熵编码就能把图像压缩成比较小的数据，以此达到视频压缩的目的。这就是<strong>视频编码的原理</strong>。</p><h2><strong>编码器的对比及选择</strong></h2><p>说完了编码器的原理，那么常用的编码标准有哪些呢？它们的区别又是什么？我们怎么选择合适的编码器？</p><p>现在市面上常见的编码标准有H264、H265、VP8、VP9和AV1。目前H264和VP8是最常用的编码标准，且两者的标准非常相似。H265和VP9分别是他们的下一代编码标准，这两个标准也非常相似。AV1是VP9的下一代编码标准。</p><p>H264和H265是需要专利费的，而VP8和VP9是完全免费的。由于H265需要付高额的版权费，以谷歌为首的互联网和芯片巨头公司组织了AOM联盟，开发了新一代压缩编码算法AV1，并宣布完全免费，以此来对抗高额专利费的H265。</p><p>目前普通产品还是使用H264最多，而H265因为专利费使用得比较少。VP8是WebRTC默认的编码标准，且WebRTC使用VP8最多。同时，WebRTC也支持VP9和AV1。YouTube使用了VP9和AV1。Netflix也使用了AV1。我们下面来比较一下H264、H265、AV1这三代编码算法的区别。现在你不理解没有关系，等你学完后面的课程会很容易明白下面表格中所涉及的知识的。</p><p><img src=\"https://static001.geekbang.org/resource/image/b9/a9/b94991907d00bd54743cef34b70e01a9.jpg?wh=1085x467\" alt=\"\"><br>\n从上面表格中可以看到，标准越新，最大编码块就越大，块划分的方式也越多，编码模式也就越多。因此压缩效率也会越高，但是带来的编码耗时也越大。所以在选择编码器的时候需要根据自己的实际应用场景来选择，同时还需要考虑专利费的问题。还有一个就是考虑有没有硬件支持的问题。目前H264和H265的硬件支持已经很好了，AV1才刚开始，硬件支持较少，之后会有更多硬编硬件支持。</p><p>我做了个简单的编码清晰度和耗时对比，都是在软件编码下进行的。具体如下表所示。我们可以看到相同码率下，AV1清晰度稍好于H265，而H264最差，但是编码耗时则相反，AV1最高，H265次之，H264速度最快。</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/22/c48b488cfbd982114a7742f9618c1322.jpg?wh=853x186\" alt=\"\"></p><p>所以，如果是在性能比较差的机器上编码，最好使用H264和VP8等速度快的编码器。如果是在比较新的机器上，可以考虑H265编码。中等机器如果支持H265硬编也是可以考虑的。但有一个问题就是H265需要考虑专利费的问题，同时浏览器原生不支持H265编码，所以有这方面需求的，最好不要使用H265，可以考虑使用VP9，甚至可以考虑AV1。另外，由于AV1原生标准就支持屏幕编码的优化，所以屏幕编码场景下可以考虑使用AV1编码。</p><h2>小结</h2><p>总结一下，我们今天主要讲了视频编码的必要性，以及视频编码的原理。<strong>视频编码主要分为熵编码、预测、DCT变换和量化这几个步骤。</strong></p><ol>\n<li>熵编码（以行程编码为例）：视频编码中真正实现“压缩”的步骤，主要去除信息熵冗余。在出现连续多个0像素的时候压缩率会更高。</li>\n<li>帧内预测：为了提高熵编码的压缩率，先将当前编码块的相邻块像素经过帧内预测算法得到帧内预测块，再用当前编码块减去帧内预测块得到残差块，从而去掉空间冗余。</li>\n<li>帧间预测：类似于帧内预测，在已经编码完成的帧中，先通过运动搜索得到帧间预测块，再与编码块相减得到残差块，从而去除时间冗余。</li>\n<li>DCT变换和量化：将残差块变换到频域，分离高频和低频信息。由于高频信息数量多但大小相对较小，又人眼对高频信息相对不敏感，我们利用这个特点，使用QStep对DCT系数进行量化，将大部分高频信息量化为0，达到去除视觉冗余的目的。</li>\n</ol><p>这里你需要注意的是，视频编码实际的步骤是预测、DCT变换和量化，最后是熵编码。经过这几步操作之后，视频中的冗余信息大部分被去除，达到了编码压缩的效果。当然，如何做帧内预测和帧间预测？如何找到最优的预测块？DCT变换和量化又是怎么做的呢？敬请期待我们接下来的课程，我会和你细聊。</p><h2>思考题</h2><p>现在请你思考一下，视频编码过程中，一帧图像能同时进行帧内预测和帧间预测吗？</p><p>你可以把你的答案和感受写下来，分享到留言区，与我一起讨论。下节课再见。</p>","comments":[{"had_liked":false,"id":324035,"user_name":"Student","can_delete":false,"product_type":"c1","uid":1075189,"ip_address":"","ucode":"EE470AD45FD0AB","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/f5/3a4021b4.jpg","comment_is_top":false,"comment_ctime":1638265563,"is_pvip":false,"replies":[{"id":"117646","content":"1.5是一般我们图像常用的是YUV420格式的，YUV420格式每一个像素对应了1个字节的Y、0.25个字节的U和0.25个字节的V。所以一个像素占用1.5个字节。你可以学习一下第二节课里面有详细的内容来讲述。","user_name":"作者回复","comment_id":324035,"uid":"2744713","ip_address":"","utype":1,"ctime":1638330538,"user_name_real":"编辑"}],"discussion_count":5,"race_medal":0,"score":"53177873115","product_id":100098901,"comment_content":"1920 x 1080 x 1.5 x 25 x 2 x 3600 = 260.7G。其中的1.5是怎么来的 谢谢","like_count":13,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535009,"discussion_content":"1.5是一般我们图像常用的是YUV420格式的，YUV420格式每一个像素对应了1个字节的Y、0.25个字节的U和0.25个字节的V。所以一个像素占用1.5个字节。你可以学习一下第二节课里面有详细的内容来讲述。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638330538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1666695,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLXQyKrqDG9ATu8ZYDT6iclkAQjcXicSbKEgV3t3c6qOmfO9Hu4vjqWZQyAWenqhVvY153fY4YQA1JQ/132","nickname":"teressa","note":"","ucode":"9AA0C6D45CEC1E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577248,"discussion_content":"8bit 图像，RGB 每一个像素需要 3 个字节。 YUV 4:2:0  1.5 个字节，YUV 是视频图像最常见的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655987810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1563242,"avatar":"","nickname":"Geek_b43d74","note":"","ucode":"F00FB35DB3B482","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1666695,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLXQyKrqDG9ATu8ZYDT6iclkAQjcXicSbKEgV3t3c6qOmfO9Hu4vjqWZQyAWenqhVvY153fY4YQA1JQ/132","nickname":"teressa","note":"","ucode":"9AA0C6D45CEC1E","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":580366,"discussion_content":"我这样算，为什么是521.41G？不明白为什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658128173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":577248,"ip_address":""},"score":580366,"extra":""}]},{"author":{"id":1377376,"avatar":"https://static001.geekbang.org/account/avatar/00/15/04/60/20c6a3f2.jpg","nickname":"expecting","note":"","ucode":"1528740DC34DF4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554291,"discussion_content":"没有认真学习前面的知识","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646302462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2352364,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e4/ec/eb4c0db0.jpg","nickname":"龚鹏鹏","note":"","ucode":"469D762DDBFC66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534894,"discussion_content":"亮度 和色度的格式yuv420 情景下 比例是4:1:1 那么1+1=2 就是0.5 倍的4 那么1+0.5就是1.5 倍亮度\n数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638292291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323865,"user_name":"ForwardsHao","can_delete":false,"product_type":"c1","uid":2328798,"ip_address":"","ucode":"AFB29B5B9F0C22","user_header":"https://static001.geekbang.org/account/avatar/00/23/88/de/04784f86.jpg","comment_is_top":false,"comment_ctime":1638188776,"is_pvip":false,"replies":[{"id":"117595","content":"是的，这个思路很正确。但是I帧是不能进行帧间预测的。因为帧间预测是需要依赖于参考帧的，这样肯定需要一开始有一个帧是可以独立的编解码的。不然大家都相互依赖了。","user_name":"作者回复","comment_id":323865,"uid":"2744713","ip_address":"","utype":1,"ctime":1638270650,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"27407992552","product_id":100098901,"comment_content":"一帧图像即存在空间冗余又存在时间冗余，所以是帧间预测和帧内预测都是可以同时可以在一帧上应用的。这样一个编码的宏块，都会即由本帧内的前面的宏块又由相关帧的预测块影响。","like_count":6,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534753,"discussion_content":"是的，这个思路很正确。但是I帧是不能进行帧间预测的。因为帧间预测是需要依赖于参考帧的，这样肯定需要一开始有一个帧是可以独立的编解码的。不然大家都相互依赖了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638270650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324570,"user_name":"我有一条鱼","can_delete":false,"product_type":"c1","uid":2143357,"ip_address":"","ucode":"9581A06A0EAF3B","user_header":"https://static001.geekbang.org/account/avatar/00/20/b4/7d/9455f31a.jpg","comment_is_top":false,"comment_ctime":1638503421,"is_pvip":true,"replies":[{"id":"117812","content":"这个怪我没有解释清楚。这个对比看相对数据就可以。因为我选用的速度档是很慢速的。编码器是可以选择编码速度的。比如说x264和x265都有一个preset参数可以设置编码速度的。一般实际不会使用这种速度的。真实场景的编码速度需要看编码器设置，编码设备和编码画面的复杂度等多个方面来决定的。","user_name":"作者回复","comment_id":324570,"uid":"2744713","ip_address":"","utype":1,"ctime":1638589323,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"18818372605","product_id":100098901,"comment_content":"上面中写av1和H265的编码速度是3fps和8fps。这样的速度是怎么在直播场景中使用的吗？在页面上展示的时候不是15fps左右吗？","like_count":4,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535879,"discussion_content":"这个怪我没有解释清楚。这个对比看相对数据就可以。因为我选用的速度档是很慢速的。编码器是可以选择编码速度的。比如说x264和x265都有一个preset参数可以设置编码速度的。一般实际不会使用这种速度的。真实场景的编码速度需要看编码器设置，编码设备和编码画面的复杂度等多个方面来决定的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638589323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326599,"user_name":"Geek_495a1c","can_delete":false,"product_type":"c1","uid":2229952,"ip_address":"","ucode":"579E540EF8B044","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/udFtP9pbRmYiawNS9RyCib4WZic95waXdto9IBC0UMCfMxDAcXdTdv58rzGEzyLtSHI38ibOZzDhhdKe5dXEbllB2A/132","comment_is_top":false,"comment_ctime":1639577425,"is_pvip":false,"replies":[{"id":"118782","content":"编码器会选择“最优”的预测方式。或者你可以认为编码器会遍历所有的预测模式，选一种最好的。","user_name":"作者回复","comment_id":326599,"uid":"2744713","ip_address":"","utype":1,"ctime":1639797036,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10229512017","product_id":100098901,"comment_content":"在一帧中既有帧间预测又有帧内预测，最后是怎么确定使用哪种方式？","like_count":2,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539645,"discussion_content":"编码器会选择“最优”的预测方式。或者你可以认为编码器会遍历所有的预测模式，选一种最好的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639797036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324560,"user_name":"我有一条鱼","can_delete":false,"product_type":"c1","uid":2143357,"ip_address":"","ucode":"9581A06A0EAF3B","user_header":"https://static001.geekbang.org/account/avatar/00/20/b4/7d/9455f31a.jpg","comment_is_top":false,"comment_ctime":1638501140,"is_pvip":true,"replies":[{"id":"117918","content":"是的，I帧就只能帧内预测。","user_name":"作者回复","comment_id":324560,"uid":"2744713","ip_address":"","utype":1,"ctime":1638785027,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"10228435732","product_id":100098901,"comment_content":"应该有一些被参考的帧是不可以帧间预测的，其他帧可以吧。要不每个帧都相互参考，没有一帧有完整的信息。在解码时，信息还能被解析出来吗？","like_count":2,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536438,"discussion_content":"是的，I帧就只能帧内预测。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638785027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1037925,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d6/65/e6abeba2.jpg","nickname":"Persistfanāāā","note":"","ucode":"8C4EF892B7ED27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535926,"discussion_content":"是的，I帧是作为参考帧的，而且I帧间隔也是可以去设置的，I帧是原始帧，比较大，所以I帧间隔太小，会导致数据量变大，带宽及存储压力变高。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638610097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337841,"user_name":"Max(Deguang)","can_delete":false,"product_type":"c1","uid":2348999,"ip_address":"","ucode":"17198F2824D2CB","user_header":"https://static001.geekbang.org/account/avatar/00/23/d7/c7/f3e783e8.jpg","comment_is_top":false,"comment_ctime":1647088554,"is_pvip":false,"replies":[{"id":"124420","content":"帧内参考的参考像素就是当前编码块的左边，上边，左上，右上的相邻像素，具体是哪一个由帧内预测的模式来确定，帧内预测的模式在码流里面也会记录","user_name":"作者回复","comment_id":337841,"uid":"2744713","ip_address":"","utype":1,"ctime":1648688089,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5942055850","product_id":100098901,"comment_content":"问一下，文中提到帧间参考的时候，会使用运动矢量记录参考宏块位置。帧内参考的时候，如何记录参考宏块的位置呢？谢谢","like_count":1,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559284,"discussion_content":"帧内参考的参考像素就是当前编码块的左边，上边，左上，右上的相邻像素，具体是哪一个由帧内预测的模式来确定，帧内预测的模式在码流里面也会记录","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648688090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327814,"user_name":"Geek_cbfa0a","can_delete":false,"product_type":"c1","uid":2854642,"ip_address":"","ucode":"60C2417C978437","user_header":"","comment_is_top":false,"comment_ctime":1640314895,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5935282191","product_id":100098901,"comment_content":"1920 x 1080 x 1.5 x 25 x 2 x 3600 =521.4G 一个这样的视频算出来应该是521.4G，怎么语音说的是260.7G呢","like_count":1,"discussions":[{"author":{"id":1563242,"avatar":"","nickname":"Geek_b43d74","note":"","ucode":"F00FB35DB3B482","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580365,"discussion_content":"我算的的也是521.4G,为啥文章中是260.7G，为啥除了一个2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658128047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049208,"avatar":"https://static001.geekbang.org/account/avatar/00/10/02/78/23c56bce.jpg","nickname":"james","note":"","ucode":"5701899403917C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547020,"discussion_content":"1.5不知道哪来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642497262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323795,"user_name":"被讨厌的勇气","can_delete":false,"product_type":"c1","uid":1547913,"ip_address":"","ucode":"AE3B3CA27D91A2","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/89/6e9c05d6.jpg","comment_is_top":false,"comment_ctime":1638164960,"is_pvip":false,"replies":[{"id":"117593","content":"这个“以块为基本单元”的思考这个问题的方式很好，很棒。因为确实是分块来选择模式的。但是I帧不能用帧间预测。P帧和B帧两种预测方式都可以。","user_name":"作者回复","comment_id":323795,"uid":"2744713","ip_address":"","utype":1,"ctime":1638270280,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"5933132256","product_id":100098901,"comment_content":"应该可以。帧内预测和帧间预测都是以块为基本单元的，而一帧包含多个块，所以，可以将帧间预测与帧内预测施加到同一帧的不同块上","like_count":1,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534751,"discussion_content":"这个“以块为基本单元”的思考这个问题的方式很好，很棒。因为确实是分块来选择模式的。但是I帧不能用帧间预测。P帧和B帧两种预测方式都可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638270280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1995351,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLYibV8EBAIuJ2eO8KcElQmIbKWHBL96XodCgoKjmjcE9evmm6TzwvpdT9RLvdkDeea5ZoEPoibydibQ/132","nickname":"Geek_747837","note":"","ucode":"EBCBC558D47EAC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":539136,"discussion_content":"那意思是p帧能同时帧间预测和帧内预测吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639619996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534751,"ip_address":""},"score":539136,"extra":""}]}]},{"had_liked":false,"id":356230,"user_name":"一頭蠻牛","can_delete":false,"product_type":"c1","uid":1209653,"ip_address":"河北","ucode":"887E596A1DBF2D","user_header":"https://static001.geekbang.org/account/avatar/00/12/75/35/a0c15ca8.jpg","comment_is_top":false,"comment_ctime":1662075719,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1662075719","product_id":100098901,"comment_content":"老师请问 宏块转像素串 为什么是之字形扫描？ 搜索无果 请求解答","like_count":1},{"had_liked":false,"id":348910,"user_name":"颜","can_delete":false,"product_type":"c1","uid":3029068,"ip_address":"","ucode":"94AD096D89A8C6","user_header":"https://static001.geekbang.org/account/avatar/00/2e/38/4c/d20f8abf.jpg","comment_is_top":false,"comment_ctime":1655537988,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655537988","product_id":100098901,"comment_content":"建议把思考题的标准答案，放在可以查看的地方，这样我们可以对比自己的答案","like_count":0},{"had_liked":false,"id":347606,"user_name":"龚长华","can_delete":false,"product_type":"c1","uid":2969046,"ip_address":"","ucode":"A710129E480788","user_header":"","comment_is_top":false,"comment_ctime":1654220035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654220035","product_id":100098901,"comment_content":"可以。 两者都可以做， 然后依据残差像素绝对值和最小的预测块。","like_count":0},{"had_liked":false,"id":346388,"user_name":"Geek_1760ca","can_delete":false,"product_type":"c1","uid":1513123,"ip_address":"","ucode":"5D29BAB6ACDDF8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKH4ILYLTcZjkl4lqZL6r4ZqPCic6IgPNByYccszEwhI0CU8SWW8g96gdIWiapw1RI6eYiagP10rXusA/132","comment_is_top":false,"comment_ctime":1653099373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653099373","product_id":100098901,"comment_content":"老师有DCT变换的介绍链接么？","like_count":0},{"had_liked":false,"id":344315,"user_name":"白杨","can_delete":false,"product_type":"c1","uid":1124722,"ip_address":"","ucode":"85E0DA11EBF593","user_header":"https://static001.geekbang.org/account/avatar/00/11/29/72/76838c57.jpg","comment_is_top":false,"comment_ctime":1651465057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651465057","product_id":100098901,"comment_content":"请问521.4G经过视频编码之后，会压缩到大概多少？比如h264，av1等","like_count":0},{"had_liked":false,"id":340803,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1649151431,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649151431","product_id":100098901,"comment_content":"压缩图像的核心技术是利用图像的冗余特性将图像转换成可以通过熵编码将图像编码成传输数据量很小的图像数据，这需要将原始图像块转换成很多连续0的图像块：<br>1，通过帧内预测，将图像块和它周边的图像块做残差计算，选择绝对值和最小的残差块作为预测块。<br>2，用类似的方法，计算出下一帧的预测块，目的是在帧间制作连续0的图像块。<br>3，通过DCT变换将图像中低频和高频像素分离出来，低频和像素绝对值大的高频像素在序列前部，序列后部的数值更接近0。<br>4，所有像素除以一个QP、QSize进行量化，就得到了很多连续为0的图像块。","like_count":0},{"had_liked":false,"id":339145,"user_name":"沉默的范大叔","can_delete":false,"product_type":"c1","uid":1212846,"ip_address":"","ucode":"C408F9BDA6CE84","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/ae/5d19d5dd.jpg","comment_is_top":false,"comment_ctime":1647938992,"is_pvip":true,"replies":[{"id":"124417","content":"字符串的结束符？","user_name":"作者回复","comment_id":339145,"uid":"2744713","ip_address":"","utype":1,"ctime":1648687862,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1647938992","product_id":100098901,"comment_content":"弱弱的问下12个字母怎么是13个字节？","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559278,"discussion_content":"字符串的结束符？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648687862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336221,"user_name":"SJ","can_delete":false,"product_type":"c1","uid":2915210,"ip_address":"","ucode":"4FE1E2F363315C","user_header":"https://static001.geekbang.org/account/avatar/00/2c/7b/8a/6c32d3ab.jpg","comment_is_top":false,"comment_ctime":1646014329,"is_pvip":true,"replies":[{"id":"123460","content":"残差块","user_name":"作者回复","comment_id":336221,"uid":"2744713","ip_address":"","utype":1,"ctime":1647048767,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1646014329","product_id":100098901,"comment_content":"请问做离散余弦变换的时候是对残差块进行变换，还是原图进行变换呢？","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555728,"discussion_content":"残差块","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647048767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336089,"user_name":"EdwdChen","can_delete":false,"product_type":"c1","uid":1331115,"ip_address":"","ucode":"F673E25275D58A","user_header":"https://static001.geekbang.org/account/avatar/00/14/4f/ab/dd9ab224.jpg","comment_is_top":false,"comment_ctime":1645891686,"is_pvip":false,"replies":[{"id":"123461","content":"这是DCT变换的特点，左上角是低频信息。","user_name":"作者回复","comment_id":336089,"uid":"2744713","ip_address":"","utype":1,"ctime":1647048820,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1645891686","product_id":100098901,"comment_content":"你好，不太明白为什么“变换块左上角的系数值就是图像的低频信息，其余的就是图像的高频信息，并且高频信息占大部分。”这和上面的之字遍历有关吗？还是说就是人为地以左上角作为低频的标准？","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555729,"discussion_content":"这是DCT变换的特点，左上角是低频信息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647048820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1960993,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJ4FhVnbLgPWLhpFEs3icl3p3qShEObhtIwviaSqPssHStFhYxADG5ib69Wz0sD7hwwiar52LsWJ9V9g/132","nickname":"吴成凯","note":"","ucode":"0149FD4D16115C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575307,"discussion_content":"麻烦问下，高频低频是什么意思呀，高频是相邻像素值差较大？ 然后低频是相邻像素值差较小，对应画面中比如一大片白墙这种？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654740307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327001,"user_name":"Phantom01","can_delete":false,"product_type":"c1","uid":1140424,"ip_address":"","ucode":"9FA50D3B0A06DB","user_header":"https://static001.geekbang.org/account/avatar/00/11/66/c8/f598a816.jpg","comment_is_top":false,"comment_ctime":1639825752,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1639825752","product_id":100098901,"comment_content":"好奇 h264&#47;265 这种怎么收专利费。像 ffmpeg 这种开源软件也会向版权方支付费用吗","like_count":0,"discussions":[{"author":{"id":1242483,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/73/f7d3a996.jpg","nickname":"！null","note":"","ucode":"4E5B7922980397","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540845,"discussion_content":"这个是法律知识了。\n开源和免费是两回事，开源的代码一般认为可以学习研究，至于使用需要经过作者同意，法律上严谨的是要看权利人意思表示，实践中开源软件通常有lisence。\n专利权是对发明创造的权利，不一定有代码实现。而且专利是必须要公开的。\n代码的保护，不管是否开源，属于著作权。\n至于不公开的不管是发明还是代码，都属于商业秘密权。\n不同形式保护权利人的法律关系不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640182338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326929,"user_name":"J","can_delete":false,"product_type":"c1","uid":1118252,"ip_address":"","ucode":"0CAB1969668F69","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/2c/330651c8.jpg","comment_is_top":false,"comment_ctime":1639760710,"is_pvip":false,"replies":[{"id":"119340","content":"嗯嗯，这个地方一般P帧和B帧都会做一下判断是不是需要做帧内预测的。具体还是有一些快速算法来确定最终模式的，不会全部模式都遍历一遍来做选择。","user_name":"作者回复","comment_id":326929,"uid":"2744713","ip_address":"","utype":1,"ctime":1640311035,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1639760710","product_id":100098901,"comment_content":"编码过程看了很久，末尾才发现，以后的章节会详细介绍😂差点去翻外部资料哈哈<br><br>视频编码过程中，一帧图像能同时进行帧内预测和帧间预测吗？<br>答：流程来说是可以，实际应用的话，考虑到P B帧同时预测的性能耗损，也需要判断I帧。所以似乎需要不少成本","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541241,"discussion_content":"嗯嗯，这个地方一般P帧和B帧都会做一下判断是不是需要做帧内预测的。具体还是有一些快速算法来确定最终模式的，不会全部模式都遍历一遍来做选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640311035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323727,"user_name":"西钾钾","can_delete":false,"product_type":"c1","uid":1097722,"ip_address":"","ucode":"0EE77083636ED9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJV27QOK57cdpdh3E4hbArCOlccdtjCyWooF9fhjeSKAMo9SN1v9RODkrZUZD4RejjbdsqU2FIeMA/132","comment_is_top":false,"comment_ctime":1638144225,"is_pvip":false,"replies":[{"id":"117591","content":"I帧只能进行帧内预测，因为I帧需要能够自己独立编解码，如果使用帧间预测就有依赖了。P帧既可以帧间预测又可以帧内预测。","user_name":"作者回复","comment_id":323727,"uid":"2744713","ip_address":"","utype":1,"ctime":1638269817,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1638144225","product_id":100098901,"comment_content":"应该可以，比如I帧。","like_count":0,"discussions":[{"author":{"id":2744713,"avatar":"https://static001.geekbang.org/account/avatar/00/29/e1/89/2bc80aa1.jpg","nickname":"叫什么好呢","note":"","ucode":"2A4069A23DE3B2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534748,"discussion_content":"I帧只能进行帧内预测，因为I帧需要能够自己独立编解码，如果使用帧间预测就有依赖了。P帧既可以帧间预测又可以帧内预测。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638269817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2328798,"avatar":"https://static001.geekbang.org/account/avatar/00/23/88/de/04784f86.jpg","nickname":"ForwardsHao","note":"","ucode":"AFB29B5B9F0C22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534277,"discussion_content":"I帧是独立编码不依赖其他帧啊，没有帧间编码啊，只有帧内编码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638154195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}