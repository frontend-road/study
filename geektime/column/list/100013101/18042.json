{"id":18042,"title":"15 | 关于指针的有限操作","content":"<p>在前面的文章中，我们已经提到过很多次“指针”了，你应该已经比较熟悉了。不过，我们那时大多指的是指针类型及其对应的指针值，今天我们讲的则是更为深入的内容。</p><hr></hr><p>让我们先来复习一下。</p><pre><code>type Dog struct {\n\tname string\n}\n\nfunc (dog *Dog) SetName(name string) {\n\tdog.name = name\n}\n</code></pre><p>对于基本类型<code>Dog</code>来说，<code>*Dog</code>就是它的指针类型。而对于一个<code>Dog</code>类型，值不为<code>nil</code>的变量<code>dog</code>，取址表达式<code>&amp;dog</code>的结果就是该变量的值（也就是基本值）的指针值。</p><p>如果一个方法的接收者是<code>*Dog</code>类型的，那么该方法就是基本类型<code>Dog</code>的指针方法。</p><hr></hr><p>在这种情况下，这个方法的接收者，实际上就是当前的基本值的指针值。</p><p>我们可以通过指针值无缝地访问到基本值包含的任何字段，以及调用与之关联的任何方法。这应该就是我们在编写Go程序的过程中，用得最频繁的“指针”了。</p><p>从传统意义上说，指针是一个指向某个确切的内存地址的值。这个内存地址可以是任何数据或代码的起始地址，比如，某个变量、某个字段或某个函数。</p><p>我们刚刚只提到了其中的一种情况，在Go语言中还有其他几样东西可以代表“指针”。其中最贴近传统意义的当属<code>uintptr</code>类型了。该类型实际上是一个数值类型，也是Go语言内建的数据类型之一。</p><p>根据当前计算机的计算架构的不同，它可以存储32位或64位的无符号整数，可以代表任何指针的位（bit）模式，也就是原始的内存地址。</p><!-- [[[read_end]]] --><p>再来看Go语言标准库中的<code>unsafe</code>包。<code>unsafe</code>包中有一个类型叫做<code>Pointer</code>，也代表了“指针”。</p><p><code>unsafe.Pointer</code>可以表示任何指向可寻址的值的指针，同时它也是前面提到的指针值和<code>uintptr</code>值之间的桥梁。也就是说，通过它，我们可以在这两种值之上进行双向的转换。这里有一个很关键的词——可寻址的（addressable）。在我们继续说<code>unsafe.Pointer</code>之前，需要先要搞清楚这个词的确切含义。</p><p><strong>今天的问题是：你能列举出Go语言中的哪些值是不可寻址的吗？</strong></p><p><strong>这道题的典型回答是</strong>以下列表中的值都是不可寻址的。</p><ul>\n<li>常量的值。</li>\n<li>基本类型值的字面量。</li>\n<li>算术操作的结果值。</li>\n<li>对各种字面量的索引表达式和切片表达式的结果值。不过有一个例外，对切片字面量的索引结果值却是可寻址的。</li>\n<li>对字符串变量的索引表达式和切片表达式的结果值。</li>\n<li>对字典变量的索引表达式的结果值。</li>\n<li>函数字面量和方法字面量，以及对它们的调用表达式的结果值。</li>\n<li>结构体字面量的字段值，也就是对结构体字面量的选择表达式的结果值。</li>\n<li>类型转换表达式的结果值。</li>\n<li>类型断言表达式的结果值。</li>\n<li>接收表达式的结果值。</li>\n</ul><h2>问题解析</h2><p>初看答案中的这些不可寻址的值好像并没有什么规律。不过别急，我们一起来梳理一下。你可以对照着demo35.go文件中的代码来看，这样应该会让你理解起来更容易一些。</p><p>常量的值总是会被存储到一个确切的内存区域中，并且这种值肯定是<strong>不可变的</strong>。基本类型值的字面量也是一样，其实它们本就可以被视为常量，只不过没有任何标识符可以代表它们罢了。</p><p><strong>第一个关键词：不可变的。</strong>由于Go语言中的字符串值也是不可变的，所以对于一个字符串类型的变量来说，基于它的索引或切片的结果值也都是不可寻址的，因为即使拿到了这种值的内存地址也改变不了什么。</p><p>算术操作的结果值属于一种<strong>临时结果</strong>。在我们把这种结果值赋给任何变量或常量之前，即使能拿到它的内存地址也是没有任何意义的。</p><p><strong>第二个关键词：临时结果。</strong>这个关键词能被用来解释很多现象。我们可以把各种对值字面量施加的表达式的求值结果都看做是临时结果。</p><p>我们都知道，Go语言中的表达式有很多种，其中常用的包括以下几种。</p><ul>\n<li>用于获得某个元素的索引表达式。</li>\n<li>用于获得某个切片（片段）的切片表达式。</li>\n<li>用于访问某个字段的选择表达式。</li>\n<li>用于调用某个函数或方法的调用表达式。</li>\n<li>用于转换值的类型的类型转换表达式。</li>\n<li>用于判断值的类型的类型断言表达式。</li>\n<li>向通道发送元素值或从通道那里接收元素值的接收表达式。</li>\n</ul><p>我们把以上这些表达式施加在某个值字面量上一般都会得到一个临时结果。比如，对数组字面量和字典字面量的索引结果值，又比如，对数组字面量和切片字面量的切片结果值。它们都属于临时结果，都是不可寻址的。</p><p>一个需要特别注意的例外是，对切片字面量的索引结果值是可寻址的。因为不论怎样，每个切片值都会持有一个底层数组，而这个底层数组中的每个元素值都是有一个确切的内存地址的。</p><p>你可能会问，那么对切片字面量的切片结果值为什么却是不可寻址的？这是因为切片表达式总会返回一个新的切片值，而这个新的切片值在被赋给变量之前属于临时结果。</p><p>你可能已经注意到了，我一直在说针对数组值、切片值或字典值的<strong>字面量</strong>的表达式会产生临时结果。如果针对的是数组类型或切片类型的<strong>变量</strong>，那么索引或切片的结果值就都不属于临时结果了，是可寻址的。</p><p>这主要因为变量的值本身就不是“临时的”。对比而言，值字面量在还没有与任何变量（或者说任何标识符）绑定之前是没有落脚点的，我们无法以任何方式引用到它们。这样的值就是“临时的”。</p><p>再说一个例外。我们通过对字典类型的变量施加索引表达式，得到的结果值不属于临时结果，可是，这样的值却是不可寻址的。原因是，字典中的每个键-元素对的存储位置都可能会变化，而且这种变化外界是无法感知的。</p><p>我们都知道，字典中总会有若干个哈希桶用于均匀地储存键-元素对。当满足一定条件时，字典可能会改变哈希桶的数量，并适时地把其中的键-元素对搬运到对应的新的哈希桶中。</p><p>在这种情况下，获取字典中任何元素值的指针都是无意义的，也是<strong>不安全的</strong>。我们不知道什么时候那个元素值会被搬运到何处，也不知道原先的那个内存地址上还会被存放什么别的东西。所以，这样的值就应该是不可寻址的。</p><p><strong>第三个关键词：不安全的。</strong>“不安全的”操作很可能会破坏程序的一致性，引发不可预知的错误，从而严重影响程序的功能和稳定性。</p><p>再来看函数。函数在Go语言中是一等公民，所以我们可以把代表函数或方法的字面量或标识符赋给某个变量、传给某个函数或者从某个函数传出。但是，这样的函数和方法都是不可寻址的。一个原因是函数就是代码，是不可变的。</p><p>另一个原因是，拿到指向一段代码的指针是不安全的。此外，对函数或方法的调用结果值也是不可寻址的，这是因为它们都属于临时结果。</p><p>至于典型回答中最后列出的那几种值，由于都是针对值字面量的某种表达式的结果值，所以都属于临时结果，都不可寻址。</p><p>好了，说了这么多，希望你已经有所领悟了。我来总结一下。</p><ol>\n<li><strong>不可变的</strong>值不可寻址。常量、基本类型的值字面量、字符串变量的值、函数以及方法的字面量都是如此。其实这样规定也有安全性方面的考虑。</li>\n<li>绝大多数被视为<strong>临时结果</strong>的值都是不可寻址的。算术操作的结果值属于临时结果，针对值字面量的表达式结果值也属于临时结果。但有一个例外，对切片字面量的索引结果值虽然也属于临时结果，但却是可寻址的。</li>\n<li>若拿到某值的指针可能会破坏程序的一致性，那么就是<strong>不安全的</strong>，该值就不可寻址。由于字典的内部机制，对字典的索引结果值的取址操作都是不安全的。另外，获取由字面量或标识符代表的函数或方法的地址显然也是不安全的。</li>\n</ol><p>最后说一句，如果我们把临时结果赋给一个变量，那么它就是可寻址的了。如此一来，取得的指针指向的就是这个变量持有的那个值了。</p><h2>知识扩展</h2><p><strong>问题1：不可寻址的值在使用上有哪些限制？</strong></p><p>首当其冲的当然是无法使用取址操作符<code>&amp;</code>获取它们的指针了。不过，对不可寻址的值施加取址操作都会使编译器报错，所以倒是不用太担心，你只要记住我在前面讲述的那几条规律，并在编码的时候提前注意一下就好了。</p><p>我们来看下面这个小问题。我们依然以那个结构体类型<code>Dog</code>为例。</p><pre><code>func New(name string) Dog {\n\treturn Dog{name}\n}\n</code></pre><p>我们再为它编写一个函数<code>New</code>。这个函数会接受一个名为<code>name</code>的<code>string</code>类型的参数，并会用这个参数初始化一个<code>Dog</code>类型的值，最后返回该值。我现在要问的是：如果我调用该函数，并直接以链式的手法调用其结果值的指针方法<code>SetName</code>，那么可以达到预期的效果吗？</p><pre><code>New(&quot;little pig&quot;).SetName(&quot;monster&quot;)\n</code></pre><p>如果你还记得我在前面讲述的内容，那么肯定会知道调用<code>New</code>函数所得到的结果值属于临时结果，是不可寻址的。</p><p>可是，那又怎样呢？别忘了，我在讲结构体类型及其方法的时候还说过，我们可以在一个基本类型的值上调用它的指针方法，这是因为Go语言会自动地帮我们转译。</p><p>更具体地说，对于一个<code>Dog</code>类型的变量<code>dog</code>来说，调用表达式<code>dog.SetName(\"monster\")</code>会被自动地转译为<code>(&amp;dog).SetName(\"monster\")</code>，即：先取<code>dog</code>的指针值，再在该指针值上调用<code>SetName</code>方法。</p><p>发现问题了吗？由于<code>New</code>函数的调用结果值是不可寻址的，所以无法对它进行取址操作。因此，上边这行链式调用会让编译器报告两个错误，一个是果，即：不能在<code>New(\"little pig\")</code>的结果值上调用指针方法。一个是因，即：不能取得<code>New(\"little pig\")</code>的地址。</p><p>除此之外，我们都知道，Go语言中的<code>++</code>和<code>--</code>并不属于操作符，而分别是自增语句和自减语句的重要组成部分。</p><p>虽然Go语言规范中的语法定义是，只要在<code>++</code>或<code>--</code>的左边添加一个表达式，就可以组成一个自增语句或自减语句，但是，它还明确了一个很重要的限制，那就是这个表达式的结果值必须是可寻址的。这就使得针对值字面量的表达式几乎都无法被用在这里。</p><p>不过这有一个例外，虽然对字典字面量和字典变量索引表达式的结果值都是不可寻址的，但是这样的表达式却可以被用在自增语句和自减语句中。</p><p>与之类似的规则还有两个。一个是，在赋值语句中，赋值操作符左边的表达式的结果值必须可寻址的，但是对字典的索引结果值也是可以的。</p><p>另一个是，在带有<code>range</code>子句的<code>for</code>语句中，在<code>range</code>关键字左边的表达式的结果值也都必须是可寻址的，不过对字典的索引结果值同样可以被用在这里。以上这三条规则我们合并起来记忆就可以了。</p><p>与这些定死的规则相比，我刚刚讲到的那个与指针方法有关的问题，你需要好好理解一下，它涉及了两个知识点的联合运用。起码在我面试的时候，它是一个可选择的考点。</p><p><strong>问题 2：怎样通过<code>unsafe.Pointer</code>操纵可寻址的值？</strong></p><p>前边的基础知识很重要。不过现在让我们再次关注指针的用法。我说过，<code>unsafe.Pointer</code>是像<code>*Dog</code>类型的值这样的指针值和<code>uintptr</code>值之间的桥梁，那么我们怎样利用<code>unsafe.Pointer</code>的中转和<code>uintptr</code>的底层操作来操纵像<code>dog</code>这样的值呢？</p><p>首先说明，这是一项黑科技。它可以绕过Go语言的编译器和其他工具的重重检查，并达到潜入内存修改数据的目的。这并不是一种正常的编程手段，使用它会很危险，很有可能造成安全隐患。</p><p>我们总是应该优先使用常规代码包中提供的API去编写程序，当然也可以把像<code>reflect</code>以及<code>go/ast</code>这样的代码包作为备选项。作为上层应用的开发者，请谨慎地使用<code>unsafe</code>包中的任何程序实体。</p><p>不过既然说到这里了，我们还是要来一探究竟的。请看下面的代码：</p><pre><code>dog := Dog{&quot;little pig&quot;}\ndogP := &amp;dog\ndogPtr := uintptr(unsafe.Pointer(dogP))\n</code></pre><p>我先声明了一个<code>Dog</code>类型的变量<code>dog</code>，然后用取址操作符<code>&amp;</code>，取出了它的指针值，并把它赋给了变量<code>dogP</code>。</p><p>最后，我使用了两个类型转换，先把<code>dogP</code>转换成了一个<code>unsafe.Pointer</code>类型的值，然后紧接着又把后者转换成了一个<code>uintptr</code>的值，并把它赋给了变量<code>dogPtr</code>。这背后隐藏着一些转换规则，如下：</p><ol>\n<li>一个指针值（比如<code>*Dog</code>类型的值）可以被转换为一个<code>unsafe.Pointer</code>类型的值，反之亦然。</li>\n<li>一个<code>uintptr</code>类型的值也可以被转换为一个<code>unsafe.Pointer</code>类型的值，反之亦然。</li>\n<li>一个指针值无法被直接转换成一个<code>uintptr</code>类型的值，反过来也是如此。</li>\n</ol><p>所以，对于指针值和<code>uintptr</code>类型值之间的转换，必须使用<code>unsafe.Pointer</code>类型的值作为中转。那么，我们把指针值转换成<code>uintptr</code>类型的值有什么意义吗？</p><pre><code>namePtr := dogPtr + unsafe.Offsetof(dogP.name)\nnameP := (*string)(unsafe.Pointer(namePtr))\n</code></pre><p>这里需要与<code>unsafe.Offsetof</code>函数搭配使用才能看出端倪。<code>unsafe.Offsetof</code>函数用于获取两个值在内存中的起始存储地址之间的偏移量，以字节为单位。</p><p>这两个值一个是某个字段的值，另一个是该字段值所属的那个结构体值。我们在调用这个函数的时候，需要把针对字段的选择表达式传给它，比如<code>dogP.name</code>。</p><p>有了这个偏移量，又有了结构体值在内存中的起始存储地址（这里由<code>dogPtr</code>变量代表），把它们相加我们就可以得到<code>dogP</code>的<code>name</code>字段值的起始存储地址了。这个地址由变量<code>namePtr</code>代表。</p><p>此后，我们可以再通过两次类型转换把<code>namePtr</code>的值转换成一个<code>*string</code>类型的值，这样就得到了指向<code>dogP</code>的<code>name</code>字段值的指针值。</p><p>你可能会问，我直接用取址表达式<code>&amp;(dogP.name)</code>不就能拿到这个指针值了吗？干嘛绕这么大一圈呢？你可以想象一下，如果我们根本就不知道这个结构体类型是什么，也拿不到<code>dogP</code>这个变量，那么还能去访问它的<code>name</code>字段吗？</p><p>答案是，只要有<code>namePtr</code>就可以。它就是一个无符号整数，但同时也是一个指向了程序内部数据的内存地址。它可能会给我们带来一些好处，比如可以直接修改埋藏得很深的内部数据。</p><p>但是，一旦我们有意或无意地把这个内存地址泄露出去，那么其他人就能够肆意地改动<code>dogP.name</code>的值，以及周围的内存地址上存储的任何数据了。</p><p>即使他们不知道这些数据的结构也无所谓啊，改不好还改不坏吗？不正确地改动一定会给程序带来不可预知的问题，甚至造成程序崩溃。这可能还是最好的灾难性后果；所以我才说，使用这种非正常的编程手段会很危险。</p><p>好了，现在你知道了这种手段，也知道了它的危险性，那就谨慎对待，防患于未然吧。</p><h2>总结</h2><p>我们今天集中说了说与指针有关的问题。基于基本类型的指针值应该是我们最常用到的，也是我们最需要关注的，比如<code>*Dog</code>类型的值。怎样得到一个这样的指针值呢？这需要用到取址操作和操作符<code>&amp;</code>。</p><p>不过这里还有个前提，那就是取址操作的操作对象必须是可寻址的。关于这方面你需要记住三个关键词：不可变的、临时结果和不安全的。只要一个值符合了这三个关键词中的任何一个，它就是不可寻址的。</p><p>但有一个例外，对切片字面量的索引结果值是可寻址的。那么不可寻址的值在使用上有哪些限制呢？一个最重要的限制是关于指针方法的，即：无法调用一个不可寻址值的指针方法。这涉及了两个知识点的联合运用。</p><p>相比于刚说到的这些，<code>unsafe.Pointer</code>类型和<code>uintptr</code>类型的重要性好像就没那么高了。它们的值同样可以代表指针，并且比前面说的指针值更贴近于底层和内存。</p><p>虽然我们可以利用它们去访问或修改一些内部数据，而且就灵活性而言，这种要比通用的方式高很多，但是这往往也会带来不容小觑的安全隐患。</p><p>因此，在很多时候，使用它们操纵数据是弊大于利的。不过，对于硬币的背面，我们也总是有必要去了解的。</p><h2>思考题</h2><p>今天的思考题是：引用类型的值的指针值是有意义的吗？如果没有意义，为什么？如果有意义，意义在哪里？</p><p><a href=\"https://github.com/hyper0x/Golang_Puzzlers\">戳此查看Go语言专栏文章配套详细代码。</a></p><p></p>","comments":[{"had_liked":false,"id":100480,"user_name":"郝林","can_delete":false,"product_type":"c1","uid":1026643,"ip_address":"","ucode":"F66BA62BA56FFA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","comment_is_top":true,"comment_ctime":1559563349,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"9.2233720813640008e+18","product_id":100013101,"comment_content":"大家可以具体说说有哪些名词需要用示例解释？","like_count":11,"discussions":[{"author":{"id":1197625,"avatar":"https://static001.geekbang.org/account/avatar/00/12/46/39/e545c885.jpg","nickname":"糊李糊涂","note":"","ucode":"E0F6064CBA32B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392207,"discussion_content":"讲的很通透，有点略微深，但是反复咀嚼几遍，受益匪浅。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630902899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153140,"user_name":"乖，摸摸头","can_delete":false,"product_type":"c1","uid":1611745,"ip_address":"","ucode":"BD92741A11D3CD","user_header":"https://static001.geekbang.org/account/avatar/00/18/97/e1/0f4d90ff.jpg","comment_is_top":false,"comment_ctime":1574166677,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"293631942805","product_id":100013101,"comment_content":"云里雾里，我在这里懵逼等你，我肯定懵逼的不只我一个","like_count":69,"discussions":[{"author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356911,"discussion_content":"难啃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615706281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24570,"user_name":"孙健波","can_delete":false,"product_type":"c1","uid":1024684,"ip_address":"","ucode":"4830CCECBC2394","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo6TmyGF3wMIRLx3lPWOlBWusQCxyianFvZvWeW6hYCABLqEow3p7tGc6XgnqUPVvf6Cbj2KUYQIiag/132","comment_is_top":false,"comment_ctime":1537146986,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"207695577194","product_id":100013101,"comment_content":"在描述不可寻址那部分有很多名词，要是能分别有段示例一下就好了，对照起来会更清晰","like_count":48,"discussions":[{"author":{"id":1740409,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8e/79/f9d5dd3a.jpg","nickname":"吕超","note":"","ucode":"B36883984BE16B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189379,"discussion_content":"demo35.go 有一一对应的代码","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582874765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39579,"user_name":"nuczzz","can_delete":false,"product_type":"c1","uid":1231168,"ip_address":"","ucode":"D85DCC67AFF922","user_header":"https://static001.geekbang.org/account/avatar/00/12/c9/40/b2e33f00.jpg","comment_is_top":false,"comment_ctime":1542326155,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"130391345035","product_id":100013101,"comment_content":"get新技能: unsafe.Pointer+ uintptr突破私有成员访问！","like_count":31,"discussions":[{"author":{"id":2765029,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/30/e5/83e3ee4e.jpg","nickname":"Liam","note":"","ucode":"29B137BCCB63BC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403136,"discussion_content":"这算是一个安全漏洞BUG吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634014078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2532157,"avatar":"https://static001.geekbang.org/account/avatar/00/26/a3/3d/bb7bee95.jpg","nickname":"理盛","note":"","ucode":"15B252C683026E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2765029,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/30/e5/83e3ee4e.jpg","nickname":"Liam","note":"","ucode":"29B137BCCB63BC","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":577379,"discussion_content":"指针运算不算bug吧，感觉类似于Java的反射，间接拿其他类中的私有属性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656058755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":403136,"ip_address":""},"score":577379,"extra":""}]}]},{"had_liked":false,"id":24598,"user_name":"江山如画","can_delete":false,"product_type":"c1","uid":1188280,"ip_address":"","ucode":"BEB6228E6135B5","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/b8/aca814dd.jpg","comment_is_top":false,"comment_ctime":1537159889,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"130386178769","product_id":100013101,"comment_content":"引用类型的指针值有意义。<br><br>以切片为例：fmt.Printf(&quot;%p\\n&quot;, sli) 和 fmt.Printf(&quot;%p\\n&quot;, &amp;sli[0]) 打印的都是底层数组元素的地址。<br>而 fmt.Printf(&quot;%p\\n&quot;, &amp;sli) 打印的是切片结构体的内存地址，验证代码如下：<br><br>arr := [3]int{1, 2, 3}<br>fmt.Printf(&quot;%p\\n&quot;, &amp;arr) &#47;&#47;0xc0000161e0<br><br>sli := arr[:]<br>fmt.Printf(&quot;%p\\n&quot;, sli)     &#47;&#47;0xc0000161e0<br>fmt.Printf(&quot;%p\\n&quot;, &amp;sli[0]) &#47;&#47;0xc0000161e0<br><br>fmt.Printf(&quot;%p\\n&quot;, &amp;sli)          &#47;&#47;0xc00000a080<br>fmt.Println(unsafe.Pointer(&amp;sli)) &#47;&#47;0xc00000a080<br><br>sliHeader := (*reflect.SliceHeader)(unsafe.Pointer(&amp;sli))<br>fmt.Printf(&quot;0x%10x\\n&quot;, sliHeader.Data) &#47;&#47;0xc0000161e0<br><br>可以看到，使用 %p 打印地址的时候：&amp;sli 和 unsafe.Pointer(&amp;sli) 都指向了切片结构体的地址，&amp;arr，sli ，&amp;sli[0]，sliHeader.Data 都指向了底层数组。<br>","like_count":31,"discussions":[{"author":{"id":1071316,"avatar":"https://static001.geekbang.org/account/avatar/00/10/58/d4/c52f9f6d.jpg","nickname":"芝士老爹","note":"","ucode":"5F2935967574D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3740,"discussion_content":"根据你的提示，进一步探寻了下切片类型的值的指针，可以找到底层数组，并且修改了值。\n~~~go\npackage main\n\nimport (\n\t&#34;fmt&#34;\n\t&#34;unsafe&#34;\n)\n\nfunc main() {\n\tslice2 := []int{1, 2, 3}\n\tmap2 := (*[3]int)(unsafe.Pointer(uintptr(unsafe.Pointer(&amp;slice2))))\n\tmap3 := (*[3]int)(unsafe.Pointer((uintptr)(map2[0])))\n\tfmt.Printf(&#34;%v\\n&#34;, slice2)\n\tfmt.Printf(&#34;%v\\n&#34;, *map2)\n\tfmt.Printf(&#34;%v\\n&#34;, *map3)\n\tmap3[0] = 2\n\tfmt.Printf(&#34;%v\\n&#34;, slice2)\n\tfmt.Printf(&#34;%v\\n&#34;, *map2)\n\tfmt.Printf(&#34;%v\\n&#34;, *map3)\n}\n~~~\n输出：\n！！！\n[1 2 3]\n[824633827776 3 3]\n[1 2 3]\n[2 2 3]\n[824633827776 3 3]\n[2 2 3]\n！！！\nmap2并不是底层数组的值所在，而是底层数组的一个引用，是一个结构体，包含3个值，第一个值是个指针，指向底层数组的值所在位置，后面2个分别是len和cap。\nmap3才是真正的底层数组的值。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1564740815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170960,"avatar":"https://static001.geekbang.org/account/avatar/00/11/de/10/fbe48a61.jpg","nickname":"刘梓良","note":"","ucode":"EE8C14FCB02DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297786,"discussion_content":"。，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597055551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170960,"avatar":"https://static001.geekbang.org/account/avatar/00/11/de/10/fbe48a61.jpg","nickname":"刘梓良","note":"","ucode":"EE8C14FCB02DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297785,"discussion_content":"？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597055489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170960,"avatar":"https://static001.geekbang.org/account/avatar/00/11/de/10/fbe48a61.jpg","nickname":"刘梓良","note":"","ucode":"EE8C14FCB02DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297784,"discussion_content":"？%？%，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597055424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170960,"avatar":"https://static001.geekbang.org/account/avatar/00/11/de/10/fbe48a61.jpg","nickname":"刘梓良","note":"","ucode":"EE8C14FCB02DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297783,"discussion_content":"！！。看起来7，，？115","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597055288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":32067,"user_name":"jacke","can_delete":false,"product_type":"c1","uid":1161209,"ip_address":"","ucode":"05F355E1FF88C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/f9/a8f26b10.jpg","comment_is_top":false,"comment_ctime":1539400990,"is_pvip":false,"replies":[{"id":"11822","content":"说白了就是用于表示值或者类型的代码段。比如：1234就是代表整数值的字面量，int64就是代表类型的字面量。很简单，不用想的太复杂。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1539577494,"ip_address":"","comment_id":32067,"utype":1}],"discussion_count":4,"race_medal":0,"score":"126093452574","product_id":100013101,"comment_content":"字面量有人理解吗？求解释","like_count":30,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426624,"discussion_content":"说白了就是用于表示值或者类型的代码段。比如：1234就是代表整数值的字面量，int64就是代表类型的字面量。很简单，不用想的太复杂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539577494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015499,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/cb/2974ecde.jpg","nickname":"Justin Chan","note":"","ucode":"E9136D28B6A1E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362389,"discussion_content":"前面的文章有提到类型字面量，依样画葫芦理解即可","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616935671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1312493,"avatar":"https://static001.geekbang.org/account/avatar/00/14/06/ed/5a167dda.jpg","nickname":"niceshot","note":"","ucode":"2C2BBC07A6E02D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379031,"discussion_content":"literal英文文档中经常看到\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623634154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2384157,"avatar":"https://static001.geekbang.org/account/avatar/00/24/61/1d/07e4d68e.jpg","nickname":"挖土豆","note":"","ucode":"BB1939900AC8A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361074,"discussion_content":"我特意去搜了一下。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616591325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114995,"user_name":"静水流深","can_delete":false,"product_type":"c1","uid":1339724,"ip_address":"","ucode":"644F05EFBD2E7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/4c/2cefec07.jpg","comment_is_top":false,"comment_ctime":1563445646,"is_pvip":false,"replies":[{"id":"42060","content":"你最好不要这么理解，否则会影响其他地方的理解。引用类型的值不是指针那么简单，它本身是有结构的，所以还是要按普通的值来理解，不要理解成指针。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1563505194,"ip_address":"","comment_id":114995,"utype":1}],"discussion_count":1,"race_medal":0,"score":"74577889678","product_id":100013101,"comment_content":"老师您好，引用类型的值的指针值，是否可以理解为指针的指针？","like_count":17,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458919,"discussion_content":"你最好不要这么理解，否则会影响其他地方的理解。引用类型的值不是指针那么简单，它本身是有结构的，所以还是要按普通的值来理解，不要理解成指针。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563505194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30985,"user_name":"猫王者","can_delete":false,"product_type":"c1","uid":1248924,"ip_address":"","ucode":"224826F4BA8443","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/9c/cb9da823.jpg","comment_is_top":false,"comment_ctime":1539057446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"74553501478","product_id":100013101,"comment_content":"go语言的引用类型本质还是结构体，包括切片，字典还有接口，底层都是用结构体来实现，引用类型的地址就是这个底层结构体的地址吧","like_count":17},{"had_liked":false,"id":109511,"user_name":"Geek_a8be59","can_delete":false,"product_type":"c1","uid":1563985,"ip_address":"","ucode":"BEC0F57B51DC44","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdiaUiaCYQe9tibemaNU5ya7RrU3MYcSGEIG7zF27u0ZDnZs5lYxPb7KPrAsj3bibM79QIOnPXAatfIw/132","comment_is_top":false,"comment_ctime":1562047743,"is_pvip":false,"replies":[{"id":"39847","content":"1. Go 语言没有常量区这个概念。<br>2. 你要分清楚变量和值啊。变量本身的存储中包含了值，但不限于值。变量可以拥有或者代表一个值，但是它本身并不是值啊。<br>3. 你无法获取值 &quot;123&quot; 和 &quot;456&quot; 本身的存储地址，因为 Go 语言规范规定这样的值本身是不可取址的。<br><br>你可以参考 Go 运行时系统中对 string 结构的定义：<br><br>type stringStruct struct {<br>\tstr unsafe.Pointer<br>\tlen int<br>}<br><br>这个声明所在文件的路径是：&#47;src&#47;runtime&#47;string.go 。<br><br><br>","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1562155519,"ip_address":"","comment_id":109511,"utype":1}],"discussion_count":3,"race_medal":0,"score":"40216753407","product_id":100013101,"comment_content":"根据您说的   由于 Go 语言中的字符串值也是不可变的<br>\tvar a = &quot;123&quot;<br>         var c = &quot;123&quot;<br>\tfmt.Printf(&quot;a fist is %p\\n&quot;,&amp;a)<br>\ta = &quot;456&quot;<br><br>\tfmt.Printf(&quot;a two is %p \\n&quot;,&amp;a)<br>\tb:=a<br>\tfmt.Printf(&quot;a three is %p \\n&quot;,&amp;a)<br>\tfmt.Printf(&quot;b is %p \\n&quot;,&amp;b)<br>我想问的是<br>①这里的“123”和“456”值不可变，那是不是他们两个都是在常量区呢？我不清楚是不是有go有常量区这②如果字符串的值是不可变的，那么c和a的字符串的值的地址是一样的呢？<br>③那为什么&amp;a != &amp; c呢，这里是取的字面量a的地址么？是不是可以理解成*a才是真正字符串“123”的地址呢","like_count":9,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456444,"discussion_content":"1. Go 语言没有常量区这个概念。\n2. 你要分清楚变量和值啊。变量本身的存储中包含了值，但不限于值。变量可以拥有或者代表一个值，但是它本身并不是值啊。\n3. 你无法获取值 &amp;quot;123&amp;quot; 和 &amp;quot;456&amp;quot; 本身的存储地址，因为 Go 语言规范规定这样的值本身是不可取址的。\n\n你可以参考 Go 运行时系统中对 string 结构的定义：\n\ntype stringStruct struct {\n\tstr unsafe.Pointer\n\tlen int\n}\n\n这个声明所在文件的路径是：/src/runtime/string.go 。\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562155519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1101006,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","nickname":"jxs1211","note":"","ucode":"B7F1F2D84389E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":534298,"discussion_content":"str就是string的内存地址吗，使用时定义字段为pointer或者uintptr类型有什么区别，这种字段实际开发有使用的场景吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638157276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":456444,"ip_address":""},"score":534298,"extra":""}]},{"author":{"id":1101006,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","nickname":"jxs1211","note":"","ucode":"B7F1F2D84389E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534296,"discussion_content":"string的定义中str就是对象string在内存中的地址吗，日常开发中什么时候需要用到定义指针类型的字段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638157136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24337,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1536910470,"is_pvip":false,"replies":[{"id":"8926","content":"没有非得使用的必要。指针类型及其值最常用，因为可以达到传址的效果。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1536974929,"ip_address":"","comment_id":24337,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35896648838","product_id":100013101,"comment_content":"C里的指针是用来直接操作内存的，因为C里有大量的操作是必须靠操作内存完成的。那么go这种带有GC，不需要手动分配内存的语言，指针存在的意义在哪里呢，Go里的指针在何时有“不得不使用”的意义呢？","like_count":8,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423943,"discussion_content":"没有非得使用的必要。指针类型及其值最常用，因为可以达到传址的效果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536974929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1071316,"avatar":"https://static001.geekbang.org/account/avatar/00/10/58/d4/c52f9f6d.jpg","nickname":"芝士老爹","note":"","ucode":"5F2935967574D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3734,"discussion_content":"传址，可以省内存，不用每次copy一个副本，特别是一些很大的结构体。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1564738660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24269,"user_name":"后端进阶","can_delete":false,"product_type":"c1","uid":1125656,"ip_address":"","ucode":"480F48F5378307","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/18/918eaecf.jpg","comment_is_top":false,"comment_ctime":1536887850,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35896626218","product_id":100013101,"comment_content":"既然知道dogPtr，那么必然也知道dogP的值，也就是可以通过dogP去那name的值了，不是很理解","like_count":8,"discussions":[{"author":{"id":1071316,"avatar":"https://static001.geekbang.org/account/avatar/00/10/58/d4/c52f9f6d.jpg","nickname":"芝士老爹","note":"","ucode":"5F2935967574D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3733,"discussion_content":"name是小写开头的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1564738569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":26692,"user_name":"高鸿祥","can_delete":false,"product_type":"c1","uid":1047675,"ip_address":"","ucode":"B18EEC475C131F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/7b/aa9c0afe.jpg","comment_is_top":false,"comment_ctime":1537723968,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27307527744","product_id":100013101,"comment_content":"动态语言过来的人表示看不懂😁","like_count":6,"discussions":[{"author":{"id":2384157,"avatar":"https://static001.geekbang.org/account/avatar/00/24/61/1d/07e4d68e.jpg","nickname":"挖土豆","note":"","ucode":"BB1939900AC8A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361081,"discussion_content":"我python过来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616591515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117763,"user_name":"党","can_delete":false,"product_type":"c1","uid":1071974,"ip_address":"","ucode":"EE531DB3EA124D","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/66/ad35bc68.jpg","comment_is_top":false,"comment_ctime":1564125802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23038962282","product_id":100013101,"comment_content":"引用类型的指针意义非常大，前边说过变量的赋值都是拷贝，是副本，对于结构体类型数据也是如此，你对一个结构体数据进行数据修改也是对副本进行修改，不会真的修改成功，但是要有引用就可以实现修改目的了","like_count":5},{"had_liked":false,"id":124360,"user_name":"浩","can_delete":false,"product_type":"c1","uid":1394346,"ip_address":"","ucode":"BD7FE280C83152","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKoGnC6068nQia1bOiaPxMRmkOQsaDsw5ib2drXic4gKOLzIFyZnnFm4uJ6KniboKG1nQD3J15y4d3QxLA/132","comment_is_top":false,"comment_ctime":1565866153,"is_pvip":false,"replies":[{"id":"45658","content":"字面量，就是用来表示值本身的东西，比如：[]int32{1,2,3} 、&quot;abc&quot;等。索引结果值说全了是索引表达式的结果值，就是与给定的索引号对应的那个元素值。关于这些概念性名词，我记得都在文章里正面或侧面的解释过。如果你还有哪些不太明白，可以发评论问我。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1565878084,"ip_address":"","comment_id":124360,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18745735337","product_id":100013101,"comment_content":"前面分类介绍那里，我感觉很绕，比如说，切片字面量的索引结果值，没看太懂，切片字面量是切片这个变量名称呢还是切片变量指向的值，索引结果值，是切片中索引指向的数据吗？还是这个索引本身的值呢？","like_count":4,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463135,"discussion_content":"字面量，就是用来表示值本身的东西，比如：[]int32{1,2,3} 、&amp;quot;abc&amp;quot;等。索引结果值说全了是索引表达式的结果值，就是与给定的索引号对应的那个元素值。关于这些概念性名词，我记得都在文章里正面或侧面的解释过。如果你还有哪些不太明白，可以发评论问我。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565878084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24854,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1118976,"ip_address":"","ucode":"35F4FFAC4A4B15","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/00/a4a2065f.jpg","comment_is_top":false,"comment_ctime":1537199774,"is_pvip":false,"replies":[{"id":"9372","content":"在Go需要中所谓的指针的指针最好不要用，Go也是想避免这种复杂性才搞出来引用类型的。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1537443351,"ip_address":"","comment_id":24854,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18717068958","product_id":100013101,"comment_content":"“引用类型的值得指针值” 同C语言中 “指针的指针” 应该是一个概念；<br><br>假设，有一个值类型 T，那么类型T的引用类型就是：*T，引用类型值得指针值类型就是：**T。<br><br>var t = T{}       &#47;&#47; T<br>var pt = &amp;T     &#47;&#47; *T<br>var ppt = &amp;pt  &#47;&#47; **T<br><br>但是具体的意义与使用场景还没想到，也没有遇到过，若老师不嫌弃，还请老师指出","like_count":4,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424118,"discussion_content":"在Go需要中所谓的指针的指针最好不要用，Go也是想避免这种复杂性才搞出来引用类型的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537443351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277645,"user_name":"mkii","can_delete":false,"product_type":"c1","uid":1674466,"ip_address":"","ucode":"534914EC7EA304","user_header":"https://static001.geekbang.org/account/avatar/00/19/8c/e2/48f4e4fa.jpg","comment_is_top":false,"comment_ctime":1612504083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14497405971","product_id":100013101,"comment_content":"这节啃了几次了，一直没啃掉。看来还是应用少了","like_count":3},{"had_liked":false,"id":189363,"user_name":"ONLY","can_delete":false,"product_type":"c1","uid":1049147,"ip_address":"","ucode":"180990E586D060","user_header":"https://static001.geekbang.org/account/avatar/00/10/02/3b/b4a47f63.jpg","comment_is_top":false,"comment_ctime":1584505614,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14469407502","product_id":100013101,"comment_content":"我的理解：1. 首先go语言中指针无法进行计算，就没法像c语言一样获取一个首地址就可以获取其他成员地址<br>2. 所以go提供了unsafe.Pointer与uintptr这个口子给大家使用<br>3. 所有的指针都可以转换为unsafe.Pointer<br>4.uintptr可以存储指针，并可以计算，但是指针无法直接转换为uintptr<br>5. 但是uintptr和unsafe.point直接可以相互转换<br>6. 将dog对象的首地址转换成unsafe.Pointer,然后类型转换成*string，再转换成uintptr，这样指针就可以计算了，<br>7.通过unsafe.OffSetof获取偏移量，并加上dog的首地址就获取了name的地址，进而进行赋值操作","like_count":3},{"had_liked":false,"id":189459,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1584518578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10174453170","product_id":100013101,"comment_content":"课程总结<br>本节内容 主要讲了一些更高级的指针知识<br>一般的基本类型变量 都能取址<br>但是针对 临时的 不安全的  不可变的 就不可以取址 因为取址了 也没有多大的意义<br>特例 字典类型的索引表达式 虽然不是临时结果 但是还是不可取址  因为根字典的底层实现相关有可能是多个hash桶 然后扩容或者缩容操作过后搬移到另外一个hash桶 所以取址没有多大意义 还有可能导致程序出错<br>然后 uintptr unsafe.Point 和指针<br>uintptr是一个数值类型也是go语言的内建类型<br>unsafe.Pointer可以表示任何指向可寻址的值的指针，同时它也是前面提到的指针值和uintptr值之间的桥梁<br>uintpter不能直接转换为指针 只能通过unsafe.Pointer中转一下<br>关于思考题<br>引用类型的值的指针值没有多大意义 因为他们都是作用在同一个对象上面","like_count":2},{"had_liked":false,"id":167921,"user_name":"Alan","can_delete":false,"product_type":"c1","uid":1198125,"ip_address":"","ucode":"9C66CBCFB3A109","user_header":"https://static001.geekbang.org/account/avatar/00/12/48/2d/7a3d42fb.jpg","comment_is_top":false,"comment_ctime":1577963568,"is_pvip":false,"replies":[{"id":"65196","content":"这个是基本的规则，哪个版本都是一样的。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1577967549,"ip_address":"","comment_id":167921,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10167898160","product_id":100013101,"comment_content":"<br>New(&quot;little pig&quot;).SetName(&quot;monster&quot;) <br>这个应该看版本的吧，在1.13.5版本中是可以的","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480054,"discussion_content":"这个是基本的规则，哪个版本都是一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577967549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1198125,"avatar":"https://static001.geekbang.org/account/avatar/00/12/48/2d/7a3d42fb.jpg","nickname":"Alan","note":"","ucode":"9C66CBCFB3A109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":126422,"discussion_content":"老师说的是对的,编译虽然通过但是运行时会出异常","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1578500973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1674469,"avatar":"https://static001.geekbang.org/account/avatar/00/19/8c/e5/c8ae177b.jpg","nickname":"科科人神","note":"","ucode":"0B16D854854FAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1198125,"avatar":"https://static001.geekbang.org/account/avatar/00/12/48/2d/7a3d42fb.jpg","nickname":"Alan","note":"","ucode":"9C66CBCFB3A109","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555647,"discussion_content":"这个编译也通过不了啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647001701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":126422,"ip_address":""},"score":555647,"extra":""}]}]},{"had_liked":false,"id":24335,"user_name":"Realm","can_delete":false,"product_type":"c1","uid":1081299,"ip_address":"","ucode":"30CBEBE619D1A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/d3/b5896293.jpg","comment_is_top":false,"comment_ctime":1536907216,"is_pvip":true,"replies":[{"id":"8927","content":"我没说过“值指针”这个词。“引用类型的值的指针值”的含义你不理解还是？","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1536975275,"ip_address":"","comment_id":24335,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10126841808","product_id":100013101,"comment_content":"1 “引用类型的值的指针 ”与 “引用类型的值的值指针”是两个概念？<br><br>2  值的值指针是类似切片、字典、通道内的元素的指针吗？<br><br>如果是，那老师的思考题，引用类型的值的值指针的意义：是不是用此指针来取元素的值？","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423942,"discussion_content":"我没说过“值指针”这个词。“引用类型的值的指针值”的含义你不理解还是？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536975275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24307,"user_name":"undifined","can_delete":false,"product_type":"c1","uid":1068920,"ip_address":"","ucode":"449CB4CD2DC089","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/78/c3d8ecb0.jpg","comment_is_top":false,"comment_ctime":1536895753,"is_pvip":false,"replies":[{"id":"8929","content":"不知道？不知道就没法取了。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1536975454,"ip_address":"","comment_id":24307,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10126830345","product_id":100013101,"comment_content":"老师 有一点没有理解，namePtr := dogPtr + unsafe.Offsetof(dogP.name)这里如果不知道这个属性是什么，怎么才能取到这个字段的便宜量呢","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423928,"discussion_content":"不知道？不知道就没法取了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536975454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303470,"user_name":"sam700000","can_delete":false,"product_type":"c1","uid":1069133,"ip_address":"","ucode":"C2ABDDC56B2D50","user_header":"https://static001.geekbang.org/account/avatar/00/10/50/4d/db91e218.jpg","comment_is_top":false,"comment_ctime":1626813460,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5921780756","product_id":100013101,"comment_content":"结合课程的代码看就没问题了，蛮清楚的，一定要看老师给的课程代码","like_count":1},{"had_liked":false,"id":100395,"user_name":"benying","can_delete":false,"product_type":"c1","uid":1247522,"ip_address":"","ucode":"DEBAB485F381CC","user_header":"https://static001.geekbang.org/account/avatar/00/13/09/22/22c0c4fa.jpg","comment_is_top":false,"comment_ctime":1559545453,"is_pvip":true,"replies":[{"id":"36178","content":"加油！","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1559562895,"ip_address":"","comment_id":100395,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5854512749","product_id":100013101,"comment_content":"目前为止看到最费劲的一章，指针确实费劲，O(∩_∩)O哈哈~","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452527,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559562895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30170,"user_name":"Laughing","can_delete":false,"product_type":"c1","uid":1002134,"ip_address":"","ucode":"F68F1E000CA800","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/96/99466a06.jpg","comment_is_top":false,"comment_ctime":1538712038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5833679334","product_id":100013101,"comment_content":"引用类型的值的指针，还是主要用于指针传递吧，比如做一些引用类型的复制？","like_count":1},{"had_liked":false,"id":349833,"user_name":"抱紧我的小鲤鱼","can_delete":false,"product_type":"c1","uid":1014603,"ip_address":"","ucode":"139780FB860FA3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/4b/95812b15.jpg","comment_is_top":false,"comment_ctime":1656376467,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1656376467","product_id":100013101,"comment_content":"这章收获非常多，以前一直说go没有指针运算，但是这章看到了另一种指针操作方法","like_count":0},{"had_liked":false,"id":349551,"user_name":"理盛","can_delete":false,"product_type":"c1","uid":2532157,"ip_address":"","ucode":"15B252C683026E","user_header":"https://static001.geekbang.org/account/avatar/00/26/a3/3d/bb7bee95.jpg","comment_is_top":false,"comment_ctime":1656058664,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656058664","product_id":100013101,"comment_content":"基本上看了一个下午和反复看实例代码，才大概摸清除了一些","like_count":0},{"had_liked":false,"id":348522,"user_name":"六维","can_delete":false,"product_type":"c1","uid":1022887,"ip_address":"","ucode":"EB1C15AC06A8DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/a7/440aff07.jpg","comment_is_top":false,"comment_ctime":1655170339,"is_pvip":false,"replies":[{"id":"126987","content":"具体觉得哪里不明白？可以进一步留言给我。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1655303772,"ip_address":"","comment_id":348522,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1655170339","product_id":100013101,"comment_content":"看得有点蒙。如果老师在讲一下名词和解释的时候，也加上一些配图，那更好理解一下。 这篇估计得要刷多一两遍才能看明白。","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576153,"discussion_content":"具体觉得哪里不明白？可以进一步留言给我。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655303772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346178,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1217554,"ip_address":"","ucode":"C5A540BC5A60B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/12/15558f28.jpg","comment_is_top":false,"comment_ctime":1652871389,"is_pvip":false,"replies":[{"id":"126633","content":"切片是一种容器啊，而且切片类型是引用类型，它也可以被看作是一种指针（确切的说，是包含指针）。既然是指针，那么它的底层数组在内存的什么位置就是已知的。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1653893466,"ip_address":"","comment_id":346178,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652871389","product_id":100013101,"comment_content":"老师，切片字面量之所以可以被寻址，是因为123这种字面量从只读空间拷贝了一份到切片的数组内存中吗？但是如果只读空间无法寻址又是怎么拷贝的呢？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574190,"discussion_content":"切片是一种容器啊，而且切片类型是引用类型，它也可以被看作是一种指针（确切的说，是包含指针）。既然是指针，那么它的底层数组在内存的什么位置就是已知的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653893466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333167,"user_name":"Geek_f62433","can_delete":false,"product_type":"c1","uid":2897824,"ip_address":"","ucode":"227F8013345AD6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJYJ74BKhY0ibtDEsWs0eBcWERTSOcsibQ6ke5ibhicibWYRmeyuQOoCN0t7mw0pf9o3lWmtU7ZPY2Azg/132","comment_is_top":false,"comment_ctime":1644150002,"is_pvip":true,"replies":[{"id":"121746","content":"本专栏严谨遵循Go官方文档和规范，尽量不增加其他额外的专业术语。你对哪些东西不明白的话可以随时提问。我也会根据你的反馈适时的进行一些改进。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1644215528,"ip_address":"","comment_id":333167,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644150002","product_id":100013101,"comment_content":"本来go发明的目的就是简单化，快速开发，现在被各种专业术语整蒙了。","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549697,"discussion_content":"本专栏严谨遵循Go官方文档和规范，尽量不增加其他额外的专业术语。你对哪些东西不明白的话可以随时提问。我也会根据你的反馈适时的进行一些改进。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644215529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329866,"user_name":"相惜恨离","can_delete":false,"product_type":"c1","uid":1233388,"ip_address":"","ucode":"BDF3E1C507DD35","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/SZIOlRYH4dTJ5lZdm2mReicRmVaiasIuk9dDI8SibVbLMvYnnc8R1SubQp7DibdVBvh3hJsr0107e8ty4R7FU0mfaQ/132","comment_is_top":false,"comment_ctime":1641611047,"is_pvip":false,"replies":[{"id":"120218","content":"就是 <br><br>s := []int{1,2,3} &#47;&#47; 引用类型（这里是切片类型）的值<br>sp := &amp;s &#47;&#47; 引用类型值（这里是切片值）的指针值<br><br>问：sp 是否有存在的意义？","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1641745326,"ip_address":"","comment_id":329866,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641611047","product_id":100013101,"comment_content":"&gt; 引用类型的值的指针值是有意义的吗<br><br>这句话是真没看到是啥意思","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544883,"discussion_content":"就是 \n\ns := []int{1,2,3} // 引用类型（这里是切片类型）的值\nsp := &amp;s // 引用类型值（这里是切片值）的指针值\n\n问：sp 是否有存在的意义？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641745326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323447,"user_name":"工程师kiki c++","can_delete":false,"product_type":"c1","uid":2837359,"ip_address":"","ucode":"EF7D9899BDFDC6","user_header":"https://static001.geekbang.org/account/avatar/00/2b/4b/6f/28cd35f7.jpg","comment_is_top":false,"comment_ctime":1637908282,"is_pvip":false,"replies":[{"id":"117361","content":"你的思考还是比较仔细的。我的本意是，指向引用类型值的指针，而不是指向它某个部分的指针。不过像切片这样的值，其元素值的类型确实是值得斟酌的。但是，提醒一下，结构体不是引用类型，而且若切片的元素类型是引用类型，那么拿到某个元素值的地址意义并不大。另外，赋值也会造成值的拷贝，所以如果不是真有性能问题，没必要进行这么细粒度的控制。不要过早优化。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1637926032,"ip_address":"","comment_id":323447,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1637908282","product_id":100013101,"comment_content":"引用类型的值的指针值是有意义吗<br>a := []string {&quot;33&quot;,&quot;43&quot;}<br>a[0]是否代表引用类型的值<br> c:=&amp;a[0]<br><br>还是a 代表引用类型的值<br> c:=&amp;a<br><br>（1）如果a是引用类型的值，那么他的指针值和值的大小我换算了下<br><br>fmt.Println(unsafe.Sizeof( *c))  ============24<br>fmt.Println(unsafe.Sizeof( c))   ===========8<br>这个好像意义不太大。<br><br>（2）如果a[0]代表引用类型的值<br>那么意义比较大了，因为a[0]里存储的内容就比较复杂和丰富，用指针值更好。","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533653,"discussion_content":"你的思考还是比较仔细的。我的本意是，指向引用类型值的指针，而不是指向它某个部分的指针。不过像切片这样的值，其元素值的类型确实是值得斟酌的。但是，提醒一下，结构体不是引用类型，而且若切片的元素类型是引用类型，那么拿到某个元素值的地址意义并不大。另外，赋值也会造成值的拷贝，所以如果不是真有性能问题，没必要进行这么细粒度的控制。不要过早优化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637926032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2837359,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/4b/6f/28cd35f7.jpg","nickname":"工程师kiki c++","note":"","ucode":"EF7D9899BDFDC6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534056,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638081475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323445,"user_name":"工程师kiki c++","can_delete":false,"product_type":"c1","uid":2837359,"ip_address":"","ucode":"EF7D9899BDFDC6","user_header":"https://static001.geekbang.org/account/avatar/00/2b/4b/6f/28cd35f7.jpg","comment_is_top":false,"comment_ctime":1637907833,"is_pvip":false,"replies":[{"id":"117362","content":"在另一个留言中已经回复你了。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1637926049,"ip_address":"","comment_id":323445,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637907833","product_id":100013101,"comment_content":"a := []string {&quot;33&quot;,&quot;43&quot;}<br>引用类型的值：a[0]   是这个意思吗<br><br>c:=&amp;a[0]   &amp;a[0]  这个代表引用类型某个值的值地址吗？<br>fmt.Println(*c)<br><br>如果是这样，我觉得有意义，因为引用类型的值可能是结构体一个复杂的对象。通过地址取值比较好。<br>","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533654,"discussion_content":"在另一个留言中已经回复你了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637926049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322130,"user_name":"Geek_50e625","can_delete":false,"product_type":"c1","uid":1845724,"ip_address":"","ucode":"10A4BC49100221","user_header":"https://static001.geekbang.org/account/avatar/00/1c/29/dc/625e0220.jpg","comment_is_top":false,"comment_ctime":1637200786,"is_pvip":true,"replies":[{"id":"116971","content":"我在另一个留言里已经回复了。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1637208063,"ip_address":"","comment_id":322130,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1637200786","product_id":100013101,"comment_content":"『你可以想象一下，如果我们根本就不知道这个结构体类型是什么，也拿不到dogP这个变量，那么还能去访问它的name字段吗？答案是，只要有namePtr就可以』<br><br>想问下，拿不到结构体类型和dogP，怎么取到namePtr呢？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531030,"discussion_content":"我在另一个留言里已经回复了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637208063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322129,"user_name":"Geek_50e625","can_delete":false,"product_type":"c1","uid":1845724,"ip_address":"","ucode":"10A4BC49100221","user_header":"https://static001.geekbang.org/account/avatar/00/1c/29/dc/625e0220.jpg","comment_is_top":false,"comment_ctime":1637200689,"is_pvip":true,"replies":[{"id":"116970","content":"这属于基于内存地址的操作，不需要知道具体类型；结构体这种类型是有固定的内存分布的，所以无需显式的提供。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1637208019,"ip_address":"","comment_id":322129,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1637200689","product_id":100013101,"comment_content":"拿不到dogP和结构体类型怎么拿到的namePtr呢？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531029,"discussion_content":"这属于基于内存地址的操作，不需要知道具体类型；结构体这种类型是有固定的内存分布的，所以无需显式的提供。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637208019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320144,"user_name":"grape","can_delete":false,"product_type":"c1","uid":1236268,"ip_address":"","ucode":"20C0ECF442B9BC","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/2c/129ce601.jpg","comment_is_top":false,"comment_ctime":1636098723,"is_pvip":false,"replies":[{"id":"116076","content":"数组字面量是可以被取址的啊","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1636119130,"ip_address":"","comment_id":320144,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636098723","product_id":100013101,"comment_content":"老师你好，为什么对数组字面量的可以寻址呢？按上文所述，也是临时变量，应该不可以寻址","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529893,"discussion_content":"数组字面量是可以被取址的啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636119130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308603,"user_name":"无名无姓","can_delete":false,"product_type":"c1","uid":2621412,"ip_address":"","ucode":"487BD5AA2CD305","user_header":"https://static001.geekbang.org/account/avatar/00/27/ff/e4/927547a9.jpg","comment_is_top":false,"comment_ctime":1629698508,"is_pvip":true,"replies":[{"id":"111767","content":"比如魔改某些数据，或者确实要改变指针指向的内存地址，unsafe不推荐一般用户使用，但需要知道有这么个东西，而且理解它对于理解底层的OS级别的东西很有好处。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1629773734,"ip_address":"","comment_id":308603,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1629698508","product_id":100013101,"comment_content":"对于这些黑科技有哪些使用场景么","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525557,"discussion_content":"比如魔改某些数据，或者确实要改变指针指向的内存地址，unsafe不推荐一般用户使用，但需要知道有这么个东西，而且理解它对于理解底层的OS级别的东西很有好处。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629773734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2621412,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ff/e4/927547a9.jpg","nickname":"无名无姓","note":"","ucode":"487BD5AA2CD305","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390327,"discussion_content":"好的，感谢老师哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629780992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284386,"user_name":"fjpcode","can_delete":false,"product_type":"c1","uid":1306092,"ip_address":"","ucode":"C32C5E3ECB9A90","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ61zTDmLk7IhLJn6seBPOwsVaKIWUWaxk5YmsdYBZUOYMQCsyl9iaQVSg9U5qJVLLOCFUoLUuYnRA/132","comment_is_top":false,"comment_ctime":1616223398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616223398","product_id":100013101,"comment_content":"很赞","like_count":0},{"had_liked":false,"id":282897,"user_name":"Tracy","can_delete":false,"product_type":"c1","uid":1242292,"ip_address":"","ucode":"5DA6F44D096B7E","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/b4/da161b60.jpg","comment_is_top":false,"comment_ctime":1615455146,"is_pvip":false,"replies":[{"id":"102731","content":"都是unsafe操作，都不安全。我拆成多行也只是为了让你们看得清除一些。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1615632406,"ip_address":"","comment_id":282897,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1615455146","product_id":100013101,"comment_content":"namePtr := dogPtr + unsafe.Offsetof(dogP.name)<br>nameP := (*string)(unsafe.Pointer(namePtr))<br>这段代码，看书说写成下面是否会更安全一点<br>nameP := (*string)(unsafe.Pointer(uintptr(unsafe.Pointer(dogP)))+ unsafe.Offsetof(dogP.name))","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516872,"discussion_content":"都是unsafe操作，都不安全。我拆成多行也只是为了让你们看得清除一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615632406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133945,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4d/79/803537db.jpg","nickname":"慢动作","note":"","ucode":"62C944F4A4D8AC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379968,"discussion_content":"文档里说后一种好\n// INVALID: uintptr cannot be stored in variable\n// before conversion back to Pointer.\nu := uintptr(p)\np = unsafe.Pointer(u + offset)\nhttps://stackoverflow.com/questions/42067478/when-is-it-safe-in-go-to-reference-an-object-only-through-a-uintptr  看不懂，好像也没有明确结论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624265109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280475,"user_name":"Geek_6f3934","can_delete":false,"product_type":"c1","uid":2449127,"ip_address":"","ucode":"72FF230B23B020","user_header":"https://static001.geekbang.org/account/avatar/00/25/5e/e7/0103d967.jpg","comment_is_top":false,"comment_ctime":1614228387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614228387","product_id":100013101,"comment_content":"不求甚解就对了","like_count":0},{"had_liked":false,"id":254045,"user_name":"小罗希冀","can_delete":false,"product_type":"c1","uid":1311995,"ip_address":"","ucode":"88416458FF0041","user_header":"https://static001.geekbang.org/account/avatar/00/14/04/fb/40f298bb.jpg","comment_is_top":false,"comment_ctime":1603027818,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603027818","product_id":100013101,"comment_content":"引用类型的值的指针意义在于参数传递<br>一方面是通过指针减少参数传递时候的内存消耗<br>另一方面是通过指针来使函数&#47;方法内部的修改能够作用于原引用类型的值","like_count":0},{"had_liked":false,"id":243924,"user_name":"郭星","can_delete":false,"product_type":"c1","uid":1182219,"ip_address":"","ucode":"8A0F5DF80E0C61","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/0b/985d3800.jpg","comment_is_top":false,"comment_ctime":1598327399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598327399","product_id":100013101,"comment_content":"&quot;切片字面量的索引结果值是可寻址&quot; 从内存角度分析原因在于在切片结构体实例中存在了一个变量指向底层数组,因此对于切片字面量而言底层数组的地址是确定的,因此底层数组中的元素的地址也是确定的,因此是可以寻址的","like_count":0},{"had_liked":false,"id":218767,"user_name":"沐夜星光","can_delete":false,"product_type":"c1","uid":1447220,"ip_address":"","ucode":"22F699E237B179","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia2EwyyEVs3tWRnMlqaAG7R7HvlW4vGvxthKsicgsCEeXO1qL7mMy6GAzgdkSKcH3c70Qa2hY3JLw/132","comment_is_top":false,"comment_ctime":1589872471,"is_pvip":false,"replies":[{"id":"80891","content":"你指的是哪个？","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1589901739,"ip_address":"","comment_id":218767,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589872471","product_id":100013101,"comment_content":"这个不是和“临时结果”规则相违背吗？每个切片值持有的底层数组难道不是临时结果吗？这个和数组字面量的索引结果值有什么区别？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495570,"discussion_content":"你指的是哪个？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589901739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208801,"user_name":"😳","can_delete":false,"product_type":"c1","uid":1452857,"ip_address":"","ucode":"9AFB87EF308539","user_header":"https://static001.geekbang.org/account/avatar/00/16/2b/39/19041d78.jpg","comment_is_top":false,"comment_ctime":1587440383,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587440383","product_id":100013101,"comment_content":"这篇讲的很细致，但是后面听着听着有点懵。","like_count":0},{"had_liked":false,"id":206873,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1217554,"ip_address":"","ucode":"C5A540BC5A60B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/12/15558f28.jpg","comment_is_top":false,"comment_ctime":1586948272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586948272","product_id":100013101,"comment_content":"引用类型的指针因为是指向结构体地址，我目前能想到就就是用来偏移寻址，就像虚函数表指针一样","like_count":0},{"had_liked":false,"id":199630,"user_name":"余向华","can_delete":false,"product_type":"c1","uid":1119778,"ip_address":"","ucode":"263773616D2C83","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/22/2205cf0a.jpg","comment_is_top":false,"comment_ctime":1585492863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585492863","product_id":100013101,"comment_content":"这篇讲得很赞呀","like_count":0},{"had_liked":false,"id":181765,"user_name":"cookieswolf","can_delete":false,"product_type":"c1","uid":1031153,"ip_address":"","ucode":"A2843B4F3D1977","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bb/f1/0e323ea7.jpg","comment_is_top":false,"comment_ctime":1582631216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582631216","product_id":100013101,"comment_content":"老师讲的真够细致的。就差手把手了。","like_count":0},{"had_liked":false,"id":168157,"user_name":"水先生","can_delete":false,"product_type":"c1","uid":1249714,"ip_address":"","ucode":"362A71DF511E3E","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/b2/dd0606b2.jpg","comment_is_top":false,"comment_ctime":1578022235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578022235","product_id":100013101,"comment_content":"结合demo代码一起看，十分利于学习和理解！辛苦老师在里面加了这么多注释。","like_count":0},{"had_liked":false,"id":156712,"user_name":"zerostarfro","can_delete":false,"product_type":"c1","uid":1638739,"ip_address":"","ucode":"1E7AEA8D65F26A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/uPcj4HhpuNbeGuuOLw2dgjjDYlLVKpScctQJt3rLcPOeVTeWuA3aupfkCxMXnbZzujuQtiaWdiaZ8NCFL6ict1JRg/132","comment_is_top":false,"comment_ctime":1574939914,"is_pvip":false,"replies":[{"id":"60203","content":"这里说的指针值是经典的指针，保存的是某个内存地址，指针值变了就相当于指向的内存地址变了。我大概理解你的意思，答案是“不会改”。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1574997076,"ip_address":"","comment_id":156712,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574939914","product_id":100013101,"comment_content":"指针可以理解成内存里的软链接吗~ 如果a和b指向同一个指针，是不是改a同时也改b了","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476211,"discussion_content":"这里说的指针值是经典的指针，保存的是某个内存地址，指针值变了就相当于指向的内存地址变了。我大概理解你的意思，答案是“不会改”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574997076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113236,"user_name":"木凡","can_delete":false,"product_type":"c1","uid":1198931,"ip_address":"","ucode":"88E016DA94B4F7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erAciaibSTF6wtauVUFEK1yq27gEJ46LjumKxhSIs2I3u7JAxgSicrRfvcM4niaemqlbcyOYktWVlKwEg/132","comment_is_top":false,"comment_ctime":1562921717,"is_pvip":false,"replies":[{"id":"41320","content":"&amp;str 取的是变量的存储地址。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1563017749,"ip_address":"","comment_id":113236,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562921717","product_id":100013101,"comment_content":"var str string = &quot;abc&quot;<br>fmt.Printf(&quot;str address %p \\n&quot;, &amp;str)<br>打印出来的结果，是 str address 0xc0420461c0 ，我想问下，这个内存地址是变量str的内存地址么，或者说这个内存地址里面存储的内容是什么，是变量str，还是值abc","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458123,"discussion_content":"&amp;amp;str 取的是变量的存储地址。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563017749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94950,"user_name":"小胡子","can_delete":false,"product_type":"c1","uid":1018182,"ip_address":"","ucode":"79FEC6400D25DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/46/0b7828a1.jpg","comment_is_top":false,"comment_ctime":1557928301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557928301","product_id":100013101,"comment_content":"来碗绿豆汤的方法应该是可行的吧，每次循环最后都必须等到了go程执行完毕才会进去下一次循环了","like_count":0},{"had_liked":false,"id":24492,"user_name":"来碗绿豆汤","can_delete":false,"product_type":"c1","uid":1070051,"ip_address":"","ucode":"B0AB63B8D9729F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","comment_is_top":false,"comment_ctime":1537080225,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537080225","product_id":100013101,"comment_content":"翻译过来，问题就是值的指针的存储地址的指针有没有意义？有意义，有意义，因为它可以改变指针所值的变量","like_count":0}]}