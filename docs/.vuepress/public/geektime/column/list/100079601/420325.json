{"id":420325,"title":"特别放送 | Go Modules实战","content":"<p>你好，我是孔令飞。</p><p>今天我们更新一期特别放送作为加餐。在 <a href=\"https://time.geekbang.org/column/article/416397\">特别放送 | Go Modules依赖包管理全讲</a>中，我介绍了Go Modules的知识，里面内容比较多，你可能还不知道具体怎么使用Go Modules来为你的项目管理Go依赖包。</p><p>这一讲，我就通过一个具体的案例，带你一步步学习Go Modules的常见用法以及操作方法，具体包含以下内容：</p><ol>\n<li>准备一个演示项目。</li>\n<li>配置Go Modules。</li>\n<li>初始化Go包为Go模块。</li>\n<li>Go包依赖管理。</li>\n</ol><h2>准备一个演示项目</h2><p>为了演示Go Modules的用法，我们首先需要一个Demo项目。假设我们有一个hello的项目，里面有两个文件，分别是hello.go和hello_test.go，所在目录为<code>/home/lk/workspace/golang/src/github.com/marmotedu/gopractise-demo/modules/hello</code>。</p><p>hello.go文件内容为：</p><pre><code class=\"language-go\">package hello\n\nfunc Hello() string {\n\treturn \"Hello, world.\"\n}\n</code></pre><p>hello_test.go文件内容为：</p><pre><code class=\"language-go\">package hello\n\nimport \"testing\"\n\nfunc TestHello(t *testing.T) {\n\twant := \"Hello, world.\"\n\tif got := Hello(); got != want {\n\t\tt.Errorf(\"Hello() = %q, want %q\", got, want)\n\t}\n}\n</code></pre><!-- [[[read_end]]] --><p>这时候，该目录包含了一个Go包，但还不是Go模块，因为没有go.mod件。接下来，我就给你演示下，如何将这个包变成一个Go模块，并执行Go依赖包的管理操作。这些操作共有10个步骤，下面我们来一步步看下。</p><h2>配置Go Modules</h2><ol>\n<li>打开Go Modules</li>\n</ol><p>确保Go版本<code>&gt;=go1.11</code>，并开启Go Modules，可以通过设置环境变量<code>export GO111MODULE=on</code>开启。如果你觉得每次都设置比较繁琐，可以将<code>export GO111MODULE=on</code>追加到文件<code>$HOME/.bashrc</code>中，并执行 <code>bash</code> 命令加载到当前shell环境中。</p><ol start=\"2\">\n<li>设置环境变量</li>\n</ol><p>对于国内的开发者来说，需要设置<code>export GOPROXY=https://goproxy.cn,direct</code>，这样一些被墙的包可以通过国内的镜像源安装。如果我们有一些模块存放在私有仓库中，也需要设置GOPRIVATE环境变量。</p><p>因为Go Modules会请求Go Checksum Database，Checksum Database国内也可能会访问失败，可以设置<code>export GOSUMDB=off</code>来关闭Checksum校验。对于一些模块，如果你希望不通过代理服务器，或者不校验<code>checksum</code>，也可以根据需要设置GONOPROXY和GONOSUMDB。</p><h2>初始化Go包为Go模块</h2><ol start=\"3\">\n<li>创建一个新模块</li>\n</ol><p>你可以通过<code>go mod init</code>命令，初始化项目为Go Modules。 <code>init</code> 命令会在当前目录初始化并创建一个新的go.mod文件，也代表着创建了一个以项目根目录为根的Go Modules。如果当前目录已经存在go.mod文件，则会初始化失败。</p><p>在初始化Go Modules时，需要告知<code>go mod init</code>要初始化的模块名，可以指定模块名，例如<code>go mod init github.com/marmotedu/gopractise-demo/modules/hello</code>。也可以不指定模块名，让<code>init</code>自己推导。下面我来介绍下推导规则。</p><ul>\n<li>如果有导入路径注释，则使用注释作为模块名，比如：</li>\n</ul><pre><code class=\"language-bash\">package hello // import \"github.com/marmotedu/gopractise-demo/modules/hello\"\n</code></pre><p>则模块名为<code>github.com/marmotedu/gopractise-demo/modules/hello</code>。</p><ul>\n<li>如果没有导入路径注释，并且项目位于GOPATH路径下，则模块名为绝对路径去掉<code>$GOPATH/src</code>后的路径名，例如<code>GOPATH=/home/lk/workspace/golang</code>，项目绝对路径为<code>/home/colin/workspace/golang/src/github.com/marmotedu/gopractise-demo/modules/hello</code>，则模块名为<code>github.com/marmotedu/gopractise-demo/modules/hello</code>。</li>\n</ul><p>初始化完成之后，会在当前目录生成一个go.mod文件：</p><pre><code class=\"language-bash\">$ cat go.mod\nmodule github.com/marmotedu/gopractise-demo/modules/hello\n\ngo 1.14\n</code></pre><p>文件内容表明，当前模块的导入路径为<code>github.com/marmotedu/gopractise-demo/modules/hello</code>，使用的Go版本是<code>go 1.14</code>。</p><p>如果要新增子目录创建新的package，则package的导入路径自动为 <code>模块名/子目录名</code> ：<code>github.com/marmotedu/gopractise-demo/modules/hello/&lt;sub-package-name&gt;</code>，不需要在子目录中再次执行<code>go mod init</code>。</p><p>比如，我们在hello目录下又创建了一个world包<code>world/world.go</code>，则world包的导入路径为<code>github.com/marmotedu/gopractise-demo/modules/hello/world</code>。</p><h2>Go包依赖管理</h2><ol start=\"4\">\n<li>增加一个依赖</li>\n</ol><p>Go Modules主要是用来对包依赖进行管理的，所以这里我们来给hello包增加一个依赖<code>rsc.io/quote</code>：</p><pre><code class=\"language-go\">package hello\n\nimport \"rsc.io/quote\"\n\nfunc Hello() string {\n\treturn quote.Hello()\n}\n</code></pre><p>运行<code>go test</code>：</p><pre><code class=\"language-bash\">$ go test\ngo: finding module for package rsc.io/quote\ngo: downloading rsc.io/quote v1.5.2\ngo: found rsc.io/quote in rsc.io/quote v1.5.2\ngo: downloading rsc.io/sampler v1.3.0\nPASS\nok  \tgithub.com/google/addlicense/golang/src/github.com/marmotedu/gopractise-demo/modules/hello\t0.003s\n</code></pre><p>当go命令在解析源码时，遇到需要导入一个模块的情况，就会去go.mod文件中查询该模块的版本，如果有指定版本，就导入指定的版本。</p><p>如果没有查询到该模块，go命令会自动根据模块的导入路径安装模块，并将模块和其最新的版本写入go.mod文件中。在我们的示例中，<code>go test</code>将模块<code>rsc.io/quote</code>解析为<code>rsc.io/quote v1.5.2</code>，并且同时还下载了<code>rsc.io/quote</code>模块的两个依赖模块：<code>rsc.io/quote</code>和<code>rsc.io/sampler</code>。只有直接依赖才会被记录到go.mod文件中。</p><p>查看go.mod文件：</p><pre><code class=\"language-bash\">module github.com/marmotedu/gopractise-demo/modules/hello\n\ngo 1.14\n\nrequire rsc.io/quote v1.5.2\n</code></pre><p>再次执行<code>go test</code>：</p><pre><code class=\"language-bash\">$ go test\nPASS\nok  \tgithub.com/marmotedu/gopractise-demo/modules/hello\t0.003s\n</code></pre><p>当我们再次执行<code>go test</code>时，不会再下载并记录需要的模块，因为go.mod目前是最新的，并且需要的模块已经缓存到了本地的<code>$GOPATH/pkg/mod</code>目录下。可以看到，在当前目录还新生成了一个go.sum文件：</p><pre><code class=\"language-bash\">$ cat go.sum\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:qgOY6WgZOaTkIIMiVjBQcw93ERBE4m30iBm00nkL0i8=\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=\nrsc.io/quote v1.5.2 h1:w5fcysjrx7yqtD/aO+QwRjYZOKnaM9Uh2b40tElTs3Y=\nrsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=\nrsc.io/sampler v1.3.0 h1:7uVkIFmeBqHfdjD+gZwtXXI+RODJ2Wc4O7MPEh/QiW4=\nrsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=\n</code></pre><p><code>go test</code>在执行时，还可以添加<code>-mod</code>选项，比如<code>go test -mod=vendor</code>。<code>-mod</code>有3个值，我来分别介绍下。</p><ul>\n<li>readonly：不更新go.mod，任何可能会导致go.mod变更的操作都会失败。通常用来检查go.mod文件是否需要更新，例如用在CI或者测试场景。</li>\n<li>vendor：从项目顶层目录下的vendor中导入包，而不是从模块缓存中导入包，需要确保vendor包完整准确。</li>\n<li>mod：从模块缓存中导入包，即使项目根目录下有vendor目录。</li>\n</ul><p>如果<code>go test</code>执行时没有<code>-mod</code>选项，并且项目根目录存在vendor目录，go.mod中记录的go版本大于等于<code>1.14</code>，此时<code>go test</code>执行效果等效于<code>go test -mod=vendor</code>。<code>-mod</code>标志同样适用于go build、go install、go run、go test、go list、go vet命令。</p><ol start=\"5\">\n<li>查看所有依赖模块</li>\n</ol><p>我们可以通过<code>go list -m all</code>命令查看所有依赖模块：</p><pre><code class=\"language-bash\">$ go list -m all\ngithub.com/marmotedu/gopractise-demo/modules/hello\ngolang.org/x/text v0.0.0-20170915032832-14c0d48ead0c\nrsc.io/quote v1.5.2\nrsc.io/sampler v1.3.0\n</code></pre><p>可以看出，除了<code>rsc.io/quote v1.5.2</code>外，还间接依赖了其他模块。</p><ol start=\"6\">\n<li>更新依赖</li>\n</ol><p>通过<code>go list -m all</code>，我们可以看到模块依赖的<code>golang.org/x/text</code>模块版本是<code>v0.0.0</code>，我们可以通过<code>go get</code>命令，将其更新到最新版本，并观察测试是否通过：</p><pre><code class=\"language-bash\">$ go get golang.org/x/text\ngo: golang.org/x/text upgrade =&gt; v0.3.3\n$ go test\nPASS\nok  \tgithub.com/marmotedu/gopractise-demo/modules/hello\t0.003s\n</code></pre><p><code>go test</code>命令执行后输出PASS说明升级成功，再次看下<code>go list -m all</code>和go.mod文件：</p><pre><code class=\"language-bash\">$ go list -m all\ngithub.com/marmotedu/gopractise-demo/modules/hello\ngolang.org/x/text v0.3.3\ngolang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e\nrsc.io/quote v1.5.2\nrsc.io/sampler v1.3.0\n$ cat go.mod\nmodule github.com/marmotedu/gopractise-demo/modules/hello\n\ngo 1.14\n\nrequire (\n\tgolang.org/x/text v0.3.3 // indirect\n\trsc.io/quote v1.5.2\n)\n</code></pre><p>可以看到，<code>golang.org/x/text</code>包被更新到最新的tag版本(<code>v0.3.3</code>)，并且同时更新了go.mod文件。<code>// indirect</code>说明<code>golang.org/x/text</code>是间接依赖。现在我们再尝试更新<code>rsc.io/sampler</code>并测试：</p><pre><code class=\"language-bash\">$ go get rsc.io/sampler\ngo: rsc.io/sampler upgrade =&gt; v1.99.99\ngo: downloading rsc.io/sampler v1.99.99\n$ go test\n--- FAIL: TestHello (0.00s)\n    hello_test.go:8: Hello() = \"99 bottles of beer on the wall, 99 bottles of beer, ...\", want \"Hello, world.\"\nFAIL\nexit status 1\nFAIL\tgithub.com/marmotedu/gopractise-demo/modules/hello\t0.004s\n</code></pre><p>测试失败，说明最新的版本<code>v1.99.99</code>与我们当前的模块不兼容，我们可以列出<code>rsc.io/sampler</code>所有可用的版本，并尝试更新到其他版本：</p><pre><code class=\"language-bash\">$ go list -m -versions rsc.io/sampler\nrsc.io/sampler v1.0.0 v1.2.0 v1.2.1 v1.3.0 v1.3.1 v1.99.99\n\n# 我们尝试选择一个次新的版本v1.3.1\n$ go get rsc.io/sampler@v1.3.1\ngo: downloading rsc.io/sampler v1.3.1\n$ go test\nPASS\nok  \tgithub.com/marmotedu/gopractise-demo/modules/hello\t0.004s\n</code></pre><p>可以看到，更新到<code>v1.3.1</code>版本，测试是通过的。<code>go get</code>还支持多种参数，如下表所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/2b/f6/2b80e94c1e91bb18dea9c20695b25bf6.jpg?wh=2248x1496\" alt=\"\"></p><ol start=\"7\">\n<li>添加一个新的major版本依赖</li>\n</ol><p>我们尝试添加一个新的函数<code>func Proverb</code>，该函数通过调用<code>rsc.io/quote/v3</code>的<code>quote.Concurrency</code>函数实现。</p><p>首先，我们在hello.go文件中添加新函数：</p><pre><code class=\"language-go\">package hello\n\nimport (\n\t\"rsc.io/quote\"\n\tquoteV3 \"rsc.io/quote/v3\"\n)\n\nfunc Hello() string {\n\treturn quote.Hello()\n}\n\nfunc Proverb() string {\n\treturn quoteV3.Concurrency()\n}\n</code></pre><p>在hello_test.go中添加该函数的测试用例：</p><pre><code class=\"language-go\">func TestProverb(t *testing.T) {\n    want := \"Concurrency is not parallelism.\"\n    if got := Proverb(); got != want {\n        t.Errorf(\"Proverb() = %q, want %q\", got, want)\n    }\n}\n</code></pre><p>然后执行测试：</p><pre><code class=\"language-bash\">$ go test\ngo: finding module for package rsc.io/quote/v3\ngo: found rsc.io/quote/v3 in rsc.io/quote/v3 v3.1.0\nPASS\nok  \tgithub.com/marmotedu/gopractise-demo/modules/hello\t0.003s\n</code></pre><p>测试通过，可以看到当前模块同时依赖了同一个模块的不同版本<code>rsc.io/quote</code>和<code>rsc.io/quote/v3</code>：</p><pre><code class=\"language-bash\">$ go list -m rsc.io/q...\nrsc.io/quote v1.5.2\nrsc.io/quote/v3 v3.1.0\n</code></pre><ol start=\"8\">\n<li>升级到不兼容的版本</li>\n</ol><p>在上一步中，我们使用<code>rsc.io/quote v1</code>版本的<code>Hello()</code>函数。按照语义化版本规则，如果我们想升级<code>major</code>版本，可能面临接口不兼容的问题，需要我们变更代码。我们来看下<code>rsc.io/quote/v3</code>的函数：</p><pre><code class=\"language-bash\">$ go doc rsc.io/quote/v3\npackage quote // import \"github.com/google/addlicense/golang/pkg/mod/rsc.io/quote/v3@v3.1.0\"\n\nPackage quote collects pithy sayings.\n\nfunc Concurrency() string\nfunc GlassV3() string\nfunc GoV3() string\nfunc HelloV3() string\nfunc OptV3() string\n</code></pre><p>可以看到，<code>Hello()</code>函数变成了<code>HelloV3()</code>，这就需要我们变更代码做适配。因为我们都统一模块到一个版本了，这时候就不需要再为了避免重名而重命名模块，所以此时hello.go内容为：</p><pre><code class=\"language-go\">package hello\n\nimport (\n\t\"rsc.io/quote/v3\"\n)\n\nfunc Hello() string {\n\treturn quote.HelloV3()\n}\n\nfunc Proverb() string {\n\treturn quote.Concurrency()\n}\n</code></pre><p>执行<code>go test</code>：</p><pre><code class=\"language-bash\">$ go test\nPASS\nok  \tgithub.com/marmotedu/gopractise-demo/modules/hello\t0.003s\n</code></pre><p>可以看到测试成功。</p><ol start=\"9\">\n<li>删除不使用的依赖</li>\n</ol><p>在上一步中，我们移除了<code>rsc.io/quote</code>包，但是它仍然存在于<code>go list -m all</code>和go.mod中，这时候我们要执行<code>go mod tidy</code>清理不再使用的依赖：</p><pre><code class=\"language-bash\">$ go mod tidy\n[colin@dev hello]$ cat go.mod\nmodule github.com/marmotedu/gopractise-demo/modules/hello\n\ngo 1.14\n\nrequire (\n\tgolang.org/x/text v0.3.3 // indirect\n\trsc.io/quote/v3 v3.1.0\n\trsc.io/sampler v1.3.1 // indirect\n)\n</code></pre><ol start=\"10\">\n<li>使用vendor</li>\n</ol><p>如果我们想把所有依赖都保存起来，在Go命令执行时不再下载，可以执行<code>go mod vendor</code>，该命令会把当前项目的所有依赖都保存在项目根目录的vendor目录下，也会创建<code>vendor/modules.txt</code>文件，来记录包和模块的版本信息：</p><pre><code class=\"language-bash\">$ go mod vendor\n$ ls\ngo.mod  go.sum  hello.go  hello_test.go  vendor  world\n</code></pre><p>到这里，我就讲完了Go依赖包管理常用的10个操作。</p><h2>总结</h2><p>这一讲中，我详细介绍了如何使用Go Modules来管理依赖，它包括以下Go Modules操作：</p><ol>\n<li>打开Go Modules；</li>\n<li>设置环境变量；</li>\n<li>创建一个新模块；</li>\n<li>增加一个依赖；</li>\n<li>查看所有依赖模块；</li>\n<li>更新依赖；</li>\n<li>添加一个新的major版本依赖；</li>\n<li>升级到不兼容的版本；</li>\n<li>删除不使用的依赖。</li>\n<li>使用vendor。</li>\n</ol><h2>课后练习</h2><ol>\n<li>\n<p>思考下，如何更新项目的所有依赖到最新的版本？</p>\n</li>\n<li>\n<p>思考下，如果我们的编译机器访问不了外网，如何通过Go Modules下载Go依赖包？</p>\n</li>\n</ol><p>欢迎你在留言区与我交流讨论，我们下一讲见。</p>","comments":[{"had_liked":false,"id":313165,"user_name":"你赖东东不错嘛","can_delete":false,"product_type":"c1","uid":2426387,"ip_address":"","ucode":"3B11CA3BD80F3E","user_header":"https://static001.geekbang.org/account/avatar/00/25/06/13/e4f9f79b.jpg","comment_is_top":false,"comment_ctime":1632300153,"is_pvip":false,"replies":[{"id":"113670","content":"是一种解决方法。<br><br>第2个问题，还有一种思路：在内网搭建Go Modules代理服务器","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1632758442,"ip_address":"","comment_id":313165,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23107136633","product_id":100079601,"comment_content":"1. 项目根目录下，执行go get -d -u .&#47;...<br>2. 在外网环境把package下载到vendor目录下，在无网环境用go vendor构建应用。","like_count":5,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527255,"discussion_content":"是一种解决方法。\n\n第2个问题，还有一种思路：在内网搭建Go Modules代理服务器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632758442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313055,"user_name":"2035去台湾","can_delete":false,"product_type":"c1","uid":1525182,"ip_address":"","ucode":"E30FD5661A0271","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/fTxV0gKPNpzCCPjscmRuQLgj44Fc8FSPh4kCxDADgUBpuwte6goIMnU5PCWlY3SjhlLwEa4cU1DjXbRhCxX8CQ/132","comment_is_top":false,"comment_ctime":1632234170,"is_pvip":false,"replies":[{"id":"113671","content":"对，可以选择搭建代理","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1632758475,"ip_address":"","comment_id":313055,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5927201466","product_id":100079601,"comment_content":"客户练习2目前我们使用了nexus代理","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527212,"discussion_content":"对，可以选择搭建代理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632758475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342000,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1649946474,"is_pvip":true,"replies":[{"id":"125534","content":"go mod tidy试试","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1651078977,"ip_address":"","comment_id":342000,"utype":1}],"discussion_count":2,"race_medal":1,"score":"1649946474","product_id":100079601,"comment_content":"go test 没有自动下载依赖，是需要配置什么吗？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568225,"discussion_content":"go mod tidy试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651078977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248326,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","nickname":"多选参数","note":"","ucode":"B2294D80AB075F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572785,"discussion_content":"我也是这样 go test 没有自动下载依赖，想知道为什么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652953247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326931,"user_name":"陈东","can_delete":false,"product_type":"c1","uid":2213995,"ip_address":"","ucode":"FCDE6D237CC621","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ge7uhlEVxicQT73YuomDPrVKI8UmhqxKWrhtO5GMNlFjrHWfd3HAjgaSribR4Pzorw8yalYGYqJI4VPvUyPzicSKg/132","comment_is_top":false,"comment_ctime":1639762600,"is_pvip":true,"replies":[{"id":"119697","content":"试试这个？<br><br>把 CGO_ENABLED=1 GOOS=linux<br>","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1640824959,"ip_address":"","comment_id":326931,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1639762600","product_id":100079601,"comment_content":"go构建约束问题，Build constraints exclude all Go files in ？<br>尝试以下办法解决不了<br>1、searcheverything 搜索后删除所有包,<br>$GOPATH目录下，把对应的包删除，重新go get,还是不行.<br>2、go get -u -v github.com&#47;karalabe&#47;xgo<br>3、Right click -&gt; Mark folder as not excluded.<br>4、引用包报错，重启电脑，查看goproxy配置，还不行重装goland<br>怎么解决，寻求老师帮助，谢谢。","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542640,"discussion_content":"试试这个？\n\n把 CGO_ENABLED=1 GOOS=linux\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640824959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319764,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1635933264,"is_pvip":true,"replies":[{"id":"115953","content":"可以搭建本地代理，暂时没有其他办法","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1636003402,"ip_address":"","comment_id":319764,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635933264","product_id":100079601,"comment_content":"有没有办法就是直接导入本地包。而不是设置代理","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529763,"discussion_content":"可以搭建本地代理，暂时没有其他办法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636003402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318668,"user_name":"yss","can_delete":false,"product_type":"c1","uid":1922488,"ip_address":"","ucode":"793E8448355F3F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkOj8VUxLjDKp6jRWJrABnnsg7U1sMSkM8FO6ULPwrqNpicZvTQ7kwctmu38iaJYHybXrmbusd8trg/132","comment_is_top":false,"comment_ctime":1635386037,"is_pvip":false,"replies":[{"id":"115967","content":"现在不建议使用vendor了","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1636004449,"ip_address":"","comment_id":318668,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635386037","product_id":100079601,"comment_content":"2. 我们内网机是与外网物理隔离的机器，使用 vendor在内网机构建是我们的解决方案。","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529336,"discussion_content":"现在不建议使用vendor了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636004449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1922488,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkOj8VUxLjDKp6jRWJrABnnsg7U1sMSkM8FO6ULPwrqNpicZvTQ7kwctmu38iaJYHybXrmbusd8trg/132","nickname":"yss","note":"","ucode":"793E8448355F3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411785,"discussion_content":"不使用vendor，如何获取到库呢？\n我们内网机器只能使用光盘做导入导出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636005211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}