{"id":103232,"title":"16 | 秒杀大多数开发问题的两个利器：文档和测试案例","content":"<p>你好，我是温铭。在学习了 OpenResty 的原理和几个重要概念后，我们终于要开始 API 的学习了。</p><p>从我个人的经验来看，学习 OpenResty 的 API 是相对容易的，所以并没有占用本专栏太多的篇幅。你可以会疑惑：API 不是最常用、最重要的部分吗，为什么花的笔墨不多？</p><p>其实，这主要是出于两个方面的考虑。</p><p>第一，OpenResty 提供了非常详尽的文档。和很多其他的开发语言或者平台相比，OpenResty 除了会提供 API 的参数、返回值定义，还会提供完整的、可运行的代码示例，清楚地告诉你API 是如何处理各种边界条件的。</p><p>这种在 API 定义下面紧跟着示例代码和注意事项的做法，就是 OpenResty 文档的一贯风格。这样一来，在看完 API 描述后，你就可以立即在自己的环境下运行示例代码，并修改参数来和文档互相印证，加深记忆和理解。</p><p>第二，在文档之外，OpenResty还提供了高覆盖度的测试案例集。刚刚我提到过，OpenResty文档中提供了 API 的代码示例，但终究篇幅有限，多个 API 之间如何配合使用、各种异常情况下的报错和处理等，在文档中并没有呈现。</p><p>不过，不用担心，这些内容你大都可以在测试案例集里找到。</p><p>对于 OpenResty 的开发者来说，最好的 API 学习资料就是官方文档和测试案例，它们足够专业和友好。在这个前提下，如果我单纯地把文档翻译成中文再放在专栏中来讲，就没有太大意义了。</p><!-- [[[read_end]]] --><p>授人以鱼不如授之以渔，我更希望教给你的是通用的方法和经验。让我们用一个真实的例子来体验下，在 OpenResty 的开发中，如何让文档和测试案例集发挥更大的威力。</p><h2>shdict get API</h2><p>shared dict（共享字典）是基于 NGINX 共享内存区的 Lua 字典对象，它可以跨多个 worker 来存取数据，一般用来存放限流、限速、缓存等数据。shared dict 相关的 API 有 20 多个，是 OpenResty 中最常用也是最重要的一组 API。</p><p>我们以最简单的 get 操作为例，你可以点开  <a href=\"https://github.com/openresty/lua-nginx-module/#ngxshareddictget\">文档链接</a>  做为对照。下面的最小化的代码示例，正是由官方文档改编而来：</p><pre><code>  http {\n      lua_shared_dict dogs 10m;\n      server {\n          location /demo {\n              content_by_lua_block {\n                  local dogs = ngx.shared.dogs\n         dogs:set(&quot;Jim&quot;, 8)\n         local v = dogs:get(&quot;Jim&quot;)\n                  ngx.say(v)\n              }\n          }\n      }\n  }\n</code></pre><p>简单说明一下，在Lua 代码中使用 shared dict 之前，我们需要在 nginx.conf 中用 <code>lua_shared_dict</code> 指令增加一块内存空间，它的名字是 dogs，大小为 10M。修改完 nginx.conf后，你还需要重启进程，用浏览器或者 curl 访问才能看到结果。</p><p>这步骤看起来是不是有些繁琐呢？让我们用一种更直接的方式改造一下。你可以看到，使用 resty CLI 的这种方式，和在 nginx.conf 中嵌入代码的效果是一致的。</p><pre><code>$ resty --shdict 'dogs 10m' -e 'local dogs = ngx.shared.dogs\n dogs:set(&quot;Jim&quot;, 8)\n local v = dogs:get(&quot;Jim&quot;)\n ngx.say(v)\n '\n</code></pre><p>你现在已经知道 nginx.conf 和 Lua 代码是如何配合的，也成功运行了 shared dict 的 set 和 get 方法。一般来说，大部分开发者也就此止步，不再深究了。</p><p>事实上，这里还是有几个值得注意的地方，比如：</p><ol>\n<li>哪些阶段不能使用共享内存相关的 API 呢？</li>\n<li>我们在示例代码中看到 get 函数只有一个返回值，那什么情况下会有多个返回值呢？</li>\n<li>get 函数的入参是什么类型？是否有长度限制？</li>\n</ol><p>不要小看这几个问题，窥一斑而见全豹，它们可以帮助我们更好的深入 OpenResty。接下来我就带你一一解读。</p><h2>哪些阶段不能使用共享内存相关的 API ？</h2><p>先来看第一个问题，答案很直接，文档中专门有一个 <code>context</code> （即上下文部分），里面列出了在什么环境下可以使用这个 API：</p><pre><code>context: set_by_lua*, rewrite_by_lua*, access_by_lua*, content_by_lua*, header_filter_by_lua*, body_filter_by_lua*, log_by_lua*, ngx.timer.*, balancer_by_lua*, ssl_certificate_by_lua*, ssl_session_fetch_by_lua*, ssl_session_store_by_lua*\n</code></pre><p>可以看出， <code>init</code> 和 <code>init_worker</code> 两个阶段不在其中，也就是说，共享内存的 get API 不能在这两个阶段使用。需要注意的是，每个共享内存的 API 可以使用的阶段并不完全相同，比如 set API 就可以在 <code>init</code> 阶段使用。</p><p>所以，千万不要想当然，还是那句话，使用时多翻阅文档。当然了，尽信书不如无书，OpenResty 的文档有时候也会出现错漏，这时候你就需要用实际的测试来验证了。</p><p>接下来，让我们修改下测试案例集，来确定下 <code>init</code> 阶段是否可以运行 shared dict 的 get API。</p><p>那该如何找到和共享内存相关的测试案例集呢？事实上，OpenResty 的测试案例都放在 <code>/t</code> 目录下，并且命名也是有规律的，即<code>自增数字-功能名.t</code>。搜索<code>shdict</code>，你可以找到 <code>043-shdict.t</code>，而这就是共享内存的测试案例集了，它里面有接近 100 个测试案例，包含各种正常和异常情况的测试。</p><p>我们来试着修改下第一个测试案例。</p><p>你可以把 content 阶段改为 init 阶段，并精简掉无关代码，看看 get 接口能否运行。这里我需要提醒一点，在现阶段，你不用非得搞明白测试案例是如何编写、组织和运行的，你只要知道它是在测试 get 接口就可以了：</p><pre><code>=== TEST 1: string key, int value\n --- http_config\n     lua_shared_dict dogs 1m;\n --- config\n     location = /test {\n         init_by_lua '\n             local dogs = ngx.shared.dogs\n             local val = dogs:get(&quot;foo&quot;)\n             ngx.say(val)\n         ';\n     }\n --- request\n GET /test\n --- response_body\n 32\n --- no_error_log\n [error]\n --- ONLY\n</code></pre><p>你应该注意到了，在测试案例的最后，我加了 <code>--ONLY</code> 标记，这表示忽略其他所有测试案例，只运行这一个测试案例，以提高运行速度。后面在测试部分中，我会专门讲解各种各样的标记，你先记住这里就可以了。</p><p>修改完以后，我们用 prove 命令，就可以运行这个测试案例：</p><pre><code>$ prove t/043-shdict.t\n</code></pre><p>然后，你会得到一个报错，这也就印证了文档中描述的阶段限制。</p><pre><code>nginx: [emerg] &quot;init_by_lua&quot; directive is not allowed here\n</code></pre><h2>get 函数何时会有多个返回值？</h2><p>我们再来看第二个问题，它可以从官方文档中总结出来。文档最开始就是这个接口的<code>syntax</code> 语法描述部分：</p><pre><code>value, flags = ngx.shared.DICT:get(key)\n</code></pre><p>正常情况下，</p><ul>\n<li>第一个参数<code>value</code> 返回的是字典中 key 对应的值；但当 key 不存在或者过期时，<code>value</code> 的值为 nil。</li>\n<li>第二个参数 <code>flags</code> 就稍微复杂一些了，如果 set 接口设置了 flags，就返回，否则不返回。</li>\n</ul><p>一旦 API 调用出错，<code>value</code> 返回 nil，<code>flags</code> 返回具体的错误信息。</p><p>从文档总结的信息我们可以看出，<code>local v = dogs:get(\"Jim\")</code> 这种只有一个接收参数的写法并不完善，因为它只覆盖了普通的使用场景，没有接收第二个参数，也没有做异常处理。我们可以把它修改为下面这样：</p><pre><code>local data, err = dogs:get(&quot;Jim&quot;)\nif data == nil and err then\n    ngx.say(&quot;get not ok: &quot;, err)\n    return\nend\n</code></pre><p>和第一个问题一样，我们可以到测试案例集里搜索一下，印证下我们对文档的理解：</p><pre><code>=== TEST 65: get nil key\n --- http_config\n     lua_shared_dict dogs 1m;\n --- config\n     location = /test {\n         content_by_lua '\n             local dogs = ngx.shared.dogs\n             local ok, err = dogs:get(nil)\n             if not ok then\n                 ngx.say(&quot;not ok: &quot;, err)\n                 return\n             end\n             ngx.say(&quot;ok&quot;)\n         ';\n     }\n --- request\n GET /test\n --- response_body\n not ok: nil key\n --- no_error_log\n [error]\n</code></pre><p>在这个测试案例中，get 接口的入参为 nil，返回的 err 信息是 <code>nil key</code>。这一方面验证了我们对文档的分析是正确的，另一方面，也为第三个问题提供了部分答案——起码，get 的入参不能是 nil。</p><h2>get 函数的入参是什么类型？</h2><p>至于第三个问题， get 的入参可以是什么类型的呢？我们按照老规矩先查看文档，不过很可惜，你会发现，文档里并没有注明 key 的合法类型有哪些。这时该怎么办呢？</p><p>别着急，至少我们知道 key 可以是字符串类型，并且不能为 nil。不知道你还记得 Lua 中的数据类型吗？除了字符串和 nil，还有数字、数组、布尔类型和函数。后面两个显然没有作为 key 的必要性，我们只需要验证前两个。不妨先去测试文件中搜索一下，是否有数字作为 key 的案例：</p><pre><code>=== TEST 4: number keys, string values\n</code></pre><p>通过这个测试案例，你可以清楚看到，数字也可以作为 key ，内部会将数字转为字符串。那么数组呢？很遗憾，测试案例并没有覆盖到，我们需要自己动手试一下：</p><pre><code>$ resty --shdict 'dogs 10m' -e 'local dogs = ngx.shared.dogs\n dogs:get({})\n '\n</code></pre><p>不出意料，果然报错了：</p><pre><code>ERROR: (command line -e):2: bad argument #1 to 'get' (string expected, got table)\n</code></pre><p>综上，我们可以得出结论：get API 接受的 key 类型为字符串和数字。</p><p>那么入参 key 的长度是否有限制呢？这里其实也有一个对应的测试案例，我们一起来看一下：</p><pre><code>=== TEST 67: get a too-long key\n --- http_config\n     lua_shared_dict dogs 1m;\n --- config\n     location = /test {\n         content_by_lua '\n             local dogs = ngx.shared.dogs\n             local ok, err = dogs:get(string.rep(&quot;a&quot;, 65536))\n             if not ok then\n                 ngx.say(&quot;not ok: &quot;, err)\n                 return\n             end\n             ngx.say(&quot;ok&quot;)\n         ';\n     }\n --- request\n GET /test\n --- response_body\n not ok: key too long\n --- no_error_log\n [error]\n</code></pre><p>很显然，字符串长度为 65536 的时候，就会被提示 key 太长了。你可以试下把长度改为 65535，虽然只少了1个字节，却不会再报错了。这就说明，key 的最大长度正是 65535。</p><h2>写在最后</h2><p>OpenResty 现在的官方文档只有英文版本，国内工程师在阅读时，难免会因为语言问题，抓不住重点，甚至误解其中的内容。但越是这样，越没有捷径可走，你更应该仔细地把文档从头到尾读完，并在有疑问时，结合测试案例集和自己的尝试，去确定出答案。这才是辅助我们学习 OpenResty 的正确途径。</p><p>最后，我想提醒一下，在 OpenResty 的 API 中，凡是返回值中带有错误信息的，都必须有变量来接收并做错误处理，否则前方一定会有坑等你跳进去。比如把出错的连接放入了连接池，或者在 API 调用失败的情况下继续后面的逻辑，总之一定让人叫苦不迭。</p><p>那么，你在写 OpenResty 代码的时候，如果遇到问题，一般是通过什么方式来解决的？是文档、邮件列表、QQ 群，还是其他渠道呢？</p><p>欢迎留言一起探讨，也欢迎你把这篇文章分享给你的同事、朋友，我们一起交流，一起进步。</p><p></p>","neighbors":{"left":{"article_title":"15 | OpenResty 和别的开发平台有什么不同？","id":102113},"right":{"article_title":"17 | 为什么能成为更好的Web服务器？动态处理请求和响应是关键","id":103481}},"comments":[{"had_liked":false,"id":109480,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1562039858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78871451186","product_id":100028301,"comment_content":"驱动测试案例：<br>1. 安装相关模块<br>sudo yum install cpan -y<br>sudo cpan YAML<br>sudo cpan Test::Nginx<br><br>2. test 测试案例<br>git clone git@github.com:openresty&#47;lua-nginx-module.git<br>cd lua-nginx-module&#47;<br>prove  t&#47;043-shdict.t <br>","like_count":19},{"had_liked":false,"id":109477,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1562039714,"is_pvip":false,"replies":[{"id":"39719","content":"是的，确实写错了，抱歉，我去修改下。多谢指正。","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1562084115,"ip_address":"","comment_id":109477,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48806679970","product_id":100028301,"comment_content":"老师，指出文章中可能的一处错误：&quot;哪些阶段不能使用共享内存相关的 API？&quot; 这个例子举的貌似不太对。<br>restydoc -s ngx.shared 可知共享内存的相关API是支持init_by_lua和init_worker_by_lua阶段的，你在043-shdict.t的第一个测试案例中将content_by_lua修改为init_by_lua，执行测试报错，说明的是init_by_lua指令不能在location里，而不是说明共享内存API的问题。通过restydoc -s init_by_lua  查看，可知，init_by_lua指令的上下文只能是http。","like_count":12,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456431,"discussion_content":"是的，确实写错了，抱歉，我去修改下。多谢指正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562084115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109443,"user_name":"HelloBug","can_delete":false,"product_type":"c1","uid":1249598,"ip_address":"","ucode":"E61A4AD5C2F724","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/3e/925aa996.jpg","comment_is_top":false,"comment_ctime":1562033287,"is_pvip":true,"replies":[{"id":"39718","content":"这是个好问题，我和你的感觉是一样的。我在自己的项目中都是用 no_shuffle，严格按照顺序来执行。<br>这是因为测试案例可能会依赖外部的持久化存储，比如 redis、memcached、postgres 等，那么这个时候随机运行测试就可能出错。<br>所以，我也不太理解为什么默认要用shuffle的方式运行。<br>我能想到的一个原因，可能是在把 TEST_NGINX_FORCE_RESTART_ON_TEST 设置为 0 的时候，也就是在配置文件不变化的时候不重启 nginx，这个时候随机就有意义了。<br>另外，如果TEST_NGINX_FORCE_RESTART_ON_TEST设置为 0， 并且 TEST_NGINX_BENCHMARK 设置为 1，那么就会在不重启和大压力的情况下去做随机测试。<br>test::nginx 有很多种组合的模式，我觉得有些设计的过于灵活和复杂了，个人见解，欢迎交流。<br>补充一句哈，还有 TEST_NGINX_USE_HUP 这个环境变量，可以保证测试案例间的 shared dict 不被清空。<br>","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1562084021,"ip_address":"","comment_id":109443,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23036869767","product_id":100028301,"comment_content":"温铭老师，你好~<br>看了https:&#47;&#47;openresty.gitbooks.io&#47;programming-openresty&#47;content&#47;testing里面的test-nginx文档。今天看到的部分有一个疑问，在RunningTest一节讲一个test file里的test block默认是shuffle方式随机运行的，以便在不同的执行顺序下可能出现的bug被遗漏。然后在PreparingTest一节里讲到，每个test block都会生成一个nginx.conf，生成nginx进程执行，执行下一个test block时，会关闭之前进程，重新启动新的进程。这样打乱test block和不打乱不就没有什么区别了吗？","like_count":6,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456412,"discussion_content":"这是个好问题，我和你的感觉是一样的。我在自己的项目中都是用 no_shuffle，严格按照顺序来执行。\n这是因为测试案例可能会依赖外部的持久化存储，比如 redis、memcached、postgres 等，那么这个时候随机运行测试就可能出错。\n所以，我也不太理解为什么默认要用shuffle的方式运行。\n我能想到的一个原因，可能是在把 TEST_NGINX_FORCE_RESTART_ON_TEST 设置为 0 的时候，也就是在配置文件不变化的时候不重启 nginx，这个时候随机就有意义了。\n另外，如果TEST_NGINX_FORCE_RESTART_ON_TEST设置为 0， 并且 TEST_NGINX_BENCHMARK 设置为 1，那么就会在不重启和大压力的情况下去做随机测试。\ntest::nginx 有很多种组合的模式，我觉得有些设计的过于灵活和复杂了，个人见解，欢迎交流。\n补充一句哈，还有 TEST_NGINX_USE_HUP 这个环境变量，可以保证测试案例间的 shared dict 不被清空。\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562084021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1249598,"avatar":"https://static001.geekbang.org/account/avatar/00/13/11/3e/925aa996.jpg","nickname":"HelloBug","note":"","ucode":"E61A4AD5C2F724","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1250,"discussion_content":"谢谢老师的回复，受益~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562471516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109012,"user_name":"刘丹","can_delete":false,"product_type":"c1","uid":1081922,"ip_address":"","ucode":"66594D1C957E15","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/42/8b04d489.jpg","comment_is_top":false,"comment_ctime":1561948529,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5856915825","product_id":100028301,"comment_content":"请问OpenResty的测试环境要怎样搭建？运行prove t1.t 命令出错:<br>t1.t .. Can&#39;t locate Test&#47;Nginx&#47;Socket&#47;Lua.pm in @INC (@INC contains: &#47;usr&#47;local&#47;lib64&#47;perl5 &#47;usr&#47;local&#47;share&#47;perl5 &#47;usr&#47;lib64&#47;perl5&#47;vendor_perl &#47;usr&#47;share&#47;perl5&#47;vendor_perl &#47;usr&#47;lib64&#47;perl5 &#47;usr&#47;share&#47;perl5 .) at t1.t line 2.<br>BEGIN failed--compilation aborted at t1.t line 2.<br>t1.t .. Dubious, test returned 2 (wstat 512, 0x200)<br>No subtests run<br><br>Test Summary Report<br>-------------------<br>t1.t (Wstat: 512 Tests: 0 Failed: 0)<br>  Non-zero exit status: 2<br>  Parse errors: No plan found in TAP output<br>Files=1, Tests=0,  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)<br>Result: FAIL","like_count":1,"discussions":[{"author":{"id":1219195,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2xoGmvlQ9qfSibVpPJyyaEriavuWzXnuECrJITmGGHnGVuTibUuBho43Uib3Y5qgORHeSTxnOOSicxs0FV3HGvTpF0A/132","nickname":"psoracle","note":"","ucode":"26F9B166508BBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1034,"discussion_content":"最简单的方式是通过openresty的RPM源来安装\nyum -y install perl-Test-Nginx","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562255889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219195,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2xoGmvlQ9qfSibVpPJyyaEriavuWzXnuECrJITmGGHnGVuTibUuBho43Uib3Y5qgORHeSTxnOOSicxs0FV3HGvTpF0A/132","nickname":"psoracle","note":"","ucode":"26F9B166508BBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1033,"discussion_content":"可以试下cpanm来安装\nyum -y install -y install perl-App-cpanminus.noarch\ncpanm --mirror http://mirrors.163.com/cpan --mirror-only YAML\ncpanm --mirror http://mirrors.163.com/cpan --mirror-only Test::Nginx","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562255145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1013283,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/23/31e5e984.jpg","nickname":"空知","note":"","ucode":"C448E98238DD36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":699,"discussion_content":"得安装 test::nginx \nhttps://github.com/openresty/test-nginx#installation","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1561969396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109005,"user_name":"张仕华","can_delete":false,"product_type":"c1","uid":1054248,"ip_address":"","ucode":"8D41E96A5889FC","user_header":"https://static001.geekbang.org/account/avatar/00/10/16/28/c11e7aae.jpg","comment_is_top":false,"comment_ctime":1561947207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5856914503","product_id":100028301,"comment_content":"赞赞赞","like_count":1},{"had_liked":false,"id":344739,"user_name":"nil","can_delete":false,"product_type":"c1","uid":1198808,"ip_address":"","ucode":"52E48324112210","user_header":"https://static001.geekbang.org/account/avatar/00/12/4a/d8/21cf3642.jpg","comment_is_top":false,"comment_ctime":1651743205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651743205","product_id":100028301,"comment_content":"```shell<br>resty --shdict &#39;dogs 10m&#39; \\<br>-e &#39;local dogs = ngx.shared.dogs<br>local v, err = dogs:get({})<br>  if v == nil and err then<br>    ngx.say(&quot;not ok: &quot;, err)<br>  else<br>    ngx.say(&quot;got: &quot;, v)<br>end&#39;<br><br># got:<br>```<br><br>没有报错，是不是现在 get API 接受 table 类型的入参了","like_count":0},{"had_liked":false,"id":271065,"user_name":"nobia","can_delete":false,"product_type":"c1","uid":2394287,"ip_address":"","ucode":"1D3D0F808765EE","user_header":"https://static001.geekbang.org/account/avatar/00/24/88/af/bea4327e.jpg","comment_is_top":false,"comment_ctime":1609390851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609390851","product_id":100028301,"comment_content":"resty --shdict &#39;dogs 10m&#39; -e &#39;local dogs = ngx.shared.dogs dogs:get({}) &#39;<br>运行这个没有报错<br>resty -V<br>resty 0.27<br>nginx version: openresty&#47;1.19.3.1<br>built by gcc 8.3.1 20191121 (Red Hat 8.3.1-5) (GCC) <br>built with OpenSSL 1.1.1h  22 Sep 2020 (running with OpenSSL 1.1.1i  8 Dec 2020)","like_count":0},{"had_liked":false,"id":255396,"user_name":"纳兰容若","can_delete":false,"product_type":"c1","uid":1605876,"ip_address":"","ucode":"2E1EA2CDFDA1A9","user_header":"https://static001.geekbang.org/account/avatar/00/18/80/f4/564209ea.jpg","comment_is_top":false,"comment_ctime":1603335523,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1603335523","product_id":100028301,"comment_content":"麻烦问一下 安装完Test::Nginx<br>运行时提示：Bailout called.  Further testing stopped:  Failed to get the version of the Nginx in PATH","like_count":0,"discussions":[{"author":{"id":1142524,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/fc/b25150d7.jpg","nickname":"jawe","note":"","ucode":"6DB8BF50767629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352440,"discussion_content":"需要将nginx的可执行路径加入到环境变量中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614738203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157908,"user_name":"scaat","can_delete":false,"product_type":"c1","uid":1112954,"ip_address":"","ucode":"D313F9063B69A4","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/7a/5397e0e7.jpg","comment_is_top":false,"comment_ctime":1575280718,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575280718","product_id":100028301,"comment_content":"resty --shdict &#39;dogs 10m&#39; -e &#39;local dogs = ngx.shared.dogs dogs:get({}) &#39;<br>在我的 nginx version: openresty&#47;1.15.8.1 中，并没有出现报错。<br>请问老师，这是新版本 get 函数支持 key 的类型为数组了？还是我遗漏了什么？还望老师能指点迷津。","like_count":0},{"had_liked":false,"id":110364,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1562242438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562242438","product_id":100028301,"comment_content":"呦呦切克闹","like_count":0},{"had_liked":false,"id":109597,"user_name":"😑","can_delete":false,"product_type":"c1","uid":1595077,"ip_address":"","ucode":"87FAC0D2DE20FD","user_header":"https://static001.geekbang.org/account/avatar/00/18/56/c5/b19b8fec.jpg","comment_is_top":false,"comment_ctime":1562064167,"is_pvip":false,"replies":[{"id":"40896","content":"不用自己加锁哈，shared dict 的操作都是原子性的，这种类似加锁的处理已经帮你考虑到了。","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1562737013,"ip_address":"","comment_id":109597,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1562064167","product_id":100028301,"comment_content":"温老师，如果多个worker并发存数据，是不是需要加锁，例如这样<br>resty --shdict &#39;dogs 10m&#39; -e &#39;local dogs = ngx.shared.dogs<br>local lock= ngx.xxxx.lock<br>lock.lock()<br> dogs:set(&quot;Jim&quot;, 8)<br>lock.unlock()<br> local v = dogs:get(&quot;Jim&quot;)<br> ngx.say(v)<br> &#39;<br>那么以后的课程中会讲解到op的锁吗？出现死锁怎么处理呢？","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456483,"discussion_content":"不用自己加锁哈，shared dict 的操作都是原子性的，这种类似加锁的处理已经帮你考虑到了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562737013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1081922,"avatar":"https://static001.geekbang.org/account/avatar/00/10/82/42/8b04d489.jpg","nickname":"刘丹","note":"","ucode":"66594D1C957E15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":837,"discussion_content":"shdict内部已经加了锁","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562114142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":109465,"user_name":"六维","can_delete":false,"product_type":"c1","uid":1022887,"ip_address":"","ucode":"EB1C15AC06A8DF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/a7/440aff07.jpg","comment_is_top":false,"comment_ctime":1562037561,"is_pvip":false,"replies":[{"id":"40898","content":"lua_shared_dict dogs 10m 放在 nginx.conf 中是对的。你在代码中是如何引用 dogs 这个共享字典的呢？","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1562737164,"ip_address":"","comment_id":109465,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1562037561","product_id":100028301,"comment_content":"lua_shared_dict dogs 10m; 这一句应该放在哪里呢？按文中描述，放在www&#47;conf&#47;nginx.conf,通过http:&#47;&#47;www.chrono.com&#47;demo访问，出现错误提示：2019&#47;07&#47;02 11:16:12 [error] 11184#3284: *3 lua entry thread aborted: runtime error: content_by_lua(http.conf:32):2: attempt to index global &#39;dogs&#39; (a nil value)<br>stack traceback:<br>coroutine 0:<br>\tcontent_by_lua(http.conf:32): in main chunk, client: 127.0.0.1, server: localhost, request: &quot;GET &#47;demo HTTP&#47;1.1&quot;, host: &quot;www.chrono.com&quot;","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456422,"discussion_content":"lua_shared_dict dogs 10m 放在 nginx.conf 中是对的。你在代码中是如何引用 dogs 这个共享字典的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562737164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":754,"discussion_content":"restydoc -s lua_shared_dict 会告诉你该放在那里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562042917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1022452,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/f4/e0484cac.jpg","nickname":"崔伟协","note":"","ucode":"ACDEEDF2A10999","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1408,"discussion_content":"应该是放在http块的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562602328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":754,"ip_address":""},"score":1408,"extra":""}]}]},{"had_liked":false,"id":109440,"user_name":"HelloBug","can_delete":false,"product_type":"c1","uid":1249598,"ip_address":"","ucode":"E61A4AD5C2F724","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/3e/925aa996.jpg","comment_is_top":false,"comment_ctime":1562032902,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1562032902","product_id":100028301,"comment_content":"通常通过本地调试、文档、网上搜索、邮件列表这些方式解决~","like_count":0,"discussions":[{"author":{"id":1950389,"avatar":"","nickname":"无关风月","note":"","ucode":"F5979EB048F7FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559706,"discussion_content":"请问调试用的什么工具","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648890110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228929,"discussion_content":"报错，然后各种蒙b .\nt/043-shdict.t .. Can&#39;t locate Test/Nginx/Socket/Lua.pm in @INC (@INC contains: /usr/local/lib64/perl5 /usr/local/share/perl5 /usr/lib64/perl5/vendor_perl /usr/share/perl5/vendor_perl /usr/lib64/perl5 /usr/share/perl5 .) at t/043-shdict.t line 2.\nBEGIN failed--compilation aborted at t/043-shdict.t line 2.\nt/043-shdict.t .. Dubious, test returned 2 (wstat 512, 0x200)\nNo subtests run \n\nTest Summary Report\n-------------------\nt/043-shdict.t (Wstat: 512 Tests: 0 Failed: 0)\n  Non-zero exit status: 2\n  Parse errors: No plan found in TAP output\nFiles=1, Tests=0,  0 wallclock secs ( 0.02 usr +  0.00 sys =  0.02 CPU)\nResult: FAIL\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586591408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108923,"user_name":"manatee","can_delete":false,"product_type":"c1","uid":1041112,"ip_address":"","ucode":"708D90E7A265BD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e2/d8/f0562ede.jpg","comment_is_top":false,"comment_ctime":1561938560,"is_pvip":false,"replies":[{"id":"39725","content":"是的","user_name":"作者回复","user_name_real":"温铭@OpenResty","uid":"1017955","ctime":1562084671,"ip_address":"","comment_id":108923,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561938560","product_id":100028301,"comment_content":"想请问一下老师讲openresty的官方文档是指哪里的内容呢？是github中每个模块readme的部分吗","like_count":0,"discussions":[{"author":{"id":1017955,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/63/88cf886d.jpg","nickname":"温铭@APISIX","note":"","ucode":"343567571DA16A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456168,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562084671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}