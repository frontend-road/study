{"id":92856,"title":"28 | Immutability模式：如何利用不变性解决并发问题？","content":"<p>我们曾经说过，“多个线程同时读写同一共享变量存在并发问题”，这里的必要条件之一是读写，如果只有读，而没有写，是没有并发问题的。</p><p>解决并发问题，其实最简单的办法就是让共享变量只有读操作，而没有写操作。这个办法如此重要，以至于被上升到了一种解决并发问题的设计模式：<strong>不变性（Immutability）模式</strong>。所谓<strong>不变性，简单来讲，就是对象一旦被创建之后，状态就不再发生变化</strong>。换句话说，就是变量一旦被赋值，就不允许修改了（没有写操作）；没有修改操作，也就是保持了不变性。</p><h2>快速实现具备不可变性的类</h2><p>实现一个具备不可变性的类，还是挺简单的。<strong>将一个类所有的属性都设置成final的，并且只允许存在只读方法，那么这个类基本上就具备不可变性了</strong>。更严格的做法是<strong>这个类本身也是final的</strong>，也就是不允许继承。因为子类可以覆盖父类的方法，有可能改变不可变性，所以推荐你在实际工作中，使用这种更严格的做法。</p><p>Java SDK里很多类都具备不可变性，只是由于它们的使用太简单，最后反而被忽略了。例如经常用到的String和Long、Integer、Double等基础类型的包装类都具备不可变性，这些对象的线程安全性都是靠不可变性来保证的。如果你仔细翻看这些类的声明、属性和方法，你会发现它们都严格遵守不可变类的三点要求：<strong>类和属性都是final的，所有方法均是只读的</strong>。</p><!-- [[[read_end]]] --><p>看到这里你可能会疑惑，Java的String方法也有类似字符替换操作，怎么能说所有方法都是只读的呢？我们结合String的源代码来解释一下这个问题，下面的示例代码源自Java 1.8 SDK，我略做了修改，仅保留了关键属性value[]和replace()方法，你会发现：String这个类以及它的属性value[]都是final的；而replace()方法的实现，就的确没有修改value[]，而是将替换后的字符串作为返回值返回了。</p><pre><code>public final class String {\n  private final char value[];\n  // 字符替换\n  String replace(char oldChar, \n      char newChar) {\n    //无需替换，直接返回this  \n    if (oldChar == newChar){\n      return this;\n    }\n\n    int len = value.length;\n    int i = -1;\n    /* avoid getfield opcode */\n    char[] val = value; \n    //定位到需要替换的字符位置\n    while (++i &lt; len) {\n      if (val[i] == oldChar) {\n        break;\n      }\n    }\n    //未找到oldChar，无需替换\n    if (i &gt;= len) {\n      return this;\n    } \n    //创建一个buf[]，这是关键\n    //用来保存替换后的字符串\n    char buf[] = new char[len];\n    for (int j = 0; j &lt; i; j++) {\n      buf[j] = val[j];\n    }\n    while (i &lt; len) {\n      char c = val[i];\n      buf[i] = (c == oldChar) ? \n        newChar : c;\n      i++;\n    }\n    //创建一个新的字符串返回\n    //原字符串不会发生任何变化\n    return new String(buf, true);\n  }\n}\n</code></pre><p>通过分析String的实现，你可能已经发现了，如果具备不可变性的类，需要提供类似修改的功能，具体该怎么操作呢？做法很简单，那就是<strong>创建一个新的不可变对象</strong>，这是与可变对象的一个重要区别，可变对象往往是修改自己的属性。</p><p>所有的修改操作都创建一个新的不可变对象，你可能会有这种担心：是不是创建的对象太多了，有点太浪费内存呢？是的，这样做的确有些浪费，那如何解决呢？</p><h2>利用享元模式避免创建重复对象</h2><p>如果你熟悉面向对象相关的设计模式，相信你一定能想到<strong>享元模式（Flyweight Pattern）。利用享元模式可以减少创建对象的数量，从而减少内存占用。</strong>Java语言里面Long、Integer、Short、Byte等这些基本数据类型的包装类都用到了享元模式。</p><p>下面我们就以Long这个类作为例子，看看它是如何利用享元模式来优化对象的创建的。</p><p>享元模式本质上其实就是一个<strong>对象池</strong>，利用享元模式创建对象的逻辑也很简单：创建之前，首先去对象池里看看是不是存在；如果已经存在，就利用对象池里的对象；如果不存在，就会新创建一个对象，并且把这个新创建出来的对象放进对象池里。</p><p>Long这个类并没有照搬享元模式，Long内部维护了一个静态的对象池，仅缓存了[-128,127]之间的数字，这个对象池在JVM启动的时候就创建好了，而且这个对象池一直都不会变化，也就是说它是静态的。之所以采用这样的设计，是因为Long这个对象的状态共有 2<sup>64</sup> 种，实在太多，不宜全部缓存，而[-128,127]之间的数字利用率最高。下面的示例代码出自Java 1.8，valueOf()方法就用到了LongCache这个缓存，你可以结合着来加深理解。</p><pre><code>Long valueOf(long l) {\n  final int offset = 128;\n  // [-128,127]直接的数字做了缓存\n  if (l &gt;= -128 &amp;&amp; l &lt;= 127) { \n    return LongCache\n      .cache[(int)l + offset];\n  }\n  return new Long(l);\n}\n//缓存，等价于对象池\n//仅缓存[-128,127]直接的数字\nstatic class LongCache {\n  static final Long cache[] \n    = new Long[-(-128) + 127 + 1];\n\n  static {\n    for(int i=0; i&lt;cache.length; i++)\n      cache[i] = new Long(i-128);\n  }\n}\n</code></pre><p>前面我们在<a href=\"https://time.geekbang.org/column/article/87749\">《13 | 理论基础模块热点问题答疑》</a>中提到“Integer 和 String 类型的对象不适合做锁”，其实基本上所有的基础类型的包装类都不适合做锁，因为它们内部用到了享元模式，这会导致看上去私有的锁，其实是共有的。例如在下面代码中，本意是A用锁al，B用锁bl，各自管理各自的，互不影响。但实际上al和bl是一个对象，结果A和B共用的是一把锁。</p><pre><code>class A {\n  Long al=Long.valueOf(1);\n  public void setAX(){\n    synchronized (al) {\n      //省略代码无数\n    }\n  }\n}\nclass B {\n  Long bl=Long.valueOf(1);\n  public void setBY(){\n    synchronized (bl) {\n      //省略代码无数\n    }\n  }\n}\n</code></pre><h2>使用Immutability模式的注意事项</h2><p>在使用Immutability模式的时候，需要注意以下两点：</p><ol>\n<li>对象的所有属性都是final的，并不能保证不可变性；</li>\n<li>不可变对象也需要正确发布。</li>\n</ol><p>在Java语言中，final修饰的属性一旦被赋值，就不可以再修改，但是如果属性的类型是普通对象，那么这个普通对象的属性是可以被修改的。例如下面的代码中，Bar的属性foo虽然是final的，依然可以通过setAge()方法来设置foo的属性age。所以，<strong>在使用Immutability模式的时候一定要确认保持不变性的边界在哪里，是否要求属性对象也具备不可变性</strong>。</p><pre><code>class Foo{\n  int age=0;\n  int name=&quot;abc&quot;;\n}\nfinal class Bar {\n  final Foo foo;\n  void setAge(int a){\n    foo.age=a;\n  }\n}\n</code></pre><p>下面我们再看看如何正确地发布不可变对象。不可变对象虽然是线程安全的，但是并不意味着引用这些不可变对象的对象就是线程安全的。例如在下面的代码中，Foo具备不可变性，线程安全，但是类Bar并不是线程安全的，类Bar中持有对Foo的引用foo，对foo这个引用的修改在多线程中并不能保证可见性和原子性。</p><pre><code>//Foo线程安全\nfinal class Foo{\n  final int age=0;\n  final int name=&quot;abc&quot;;\n}\n//Bar线程不安全\nclass Bar {\n  Foo foo;\n  void setFoo(Foo f){\n    this.foo=f;\n  }\n}\n</code></pre><p>如果你的程序仅仅需要foo保持可见性，无需保证原子性，那么可以将foo声明为volatile变量，这样就能保证可见性。如果你的程序需要保证原子性，那么可以通过原子类来实现。下面的示例代码是合理库存的原子化实现，你应该很熟悉了，其中就是用原子类解决了不可变对象引用的原子性问题。</p><pre><code>public class SafeWM {\n  class WMRange{\n    final int upper;\n    final int lower;\n    WMRange(int upper,int lower){\n    //省略构造函数实现\n    }\n  }\n  final AtomicReference&lt;WMRange&gt;\n    rf = new AtomicReference&lt;&gt;(\n      new WMRange(0,0)\n    );\n  // 设置库存上限\n  void setUpper(int v){\n    while(true){\n      WMRange or = rf.get();\n      // 检查参数合法性\n      if(v &lt; or.lower){\n        throw new IllegalArgumentException();\n      }\n      WMRange nr = new\n          WMRange(v, or.lower);\n      if(rf.compareAndSet(or, nr)){\n        return;\n      }\n    }\n  }\n}\n</code></pre><h2>总结</h2><p>利用Immutability模式解决并发问题，也许你觉得有点陌生，其实你天天都在享受它的战果。Java语言里面的String和Long、Integer、Double等基础类型的包装类都具备不可变性，这些对象的线程安全性都是靠不可变性来保证的。Immutability模式是最简单的解决并发问题的方法，建议当你试图解决一个并发问题时，可以首先尝试一下Immutability模式，看是否能够快速解决。</p><p>具备不变性的对象，只有一种状态，这个状态由对象内部所有的不变属性共同决定。其实还有一种更简单的不变性对象，那就是<strong>无状态</strong>。无状态对象内部没有属性，只有方法。除了无状态的对象，你可能还听说过无状态的服务、无状态的协议等等。无状态有很多好处，最核心的一点就是性能。在多线程领域，无状态对象没有线程安全问题，无需同步处理，自然性能很好；在分布式领域，无状态意味着可以无限地水平扩展，所以分布式领域里面性能的瓶颈一定不是出在无状态的服务节点上。</p><h2>课后思考</h2><p>下面的示例代码中，Account的属性是final的，并且只有get方法，那这个类是不是具备不可变性呢？</p><pre><code>public final class Account{\n  private final \n    StringBuffer user;\n  public Account(String user){\n    this.user = \n      new StringBuffer(user);\n  }\n  \n  public StringBuffer getUser(){\n    return this.user;\n  }\n  public String toString(){\n    return &quot;user&quot;+user;\n  }\n}\n</code></pre><p>欢迎在留言区与我分享你的想法，也欢迎你在留言区记录你的思考过程。感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给更多的朋友。</p><p></p>","neighbors":{"left":{"article_title":"27 | 并发工具类模块热点问题答疑","id":92849},"right":{"article_title":"29 | Copy-on-Write模式：不是延时策略的COW","id":93154}},"comments":[{"had_liked":false,"id":90996,"user_name":"Jialin","can_delete":false,"product_type":"c1","uid":1112955,"ip_address":"","ucode":"12583269732A75","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","comment_is_top":false,"comment_ctime":1556778641,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"474003181201","product_id":100023901,"comment_content":"根据文章内容,一个类具备不可变属性需要满足&quot;类和属性都必须是 final 的,所有方法均是只读的&quot;,类的属性如果是引用型,该属性对应的类也需要满足不可变类的条件,且不能提供修改该属性的方法,<br>Account类的唯一属性user是final的,提供的方法是可读的,user的类型是StringBuffer,StringBuffer也是final的,这样看来,Account类是不可变性的,但是去看StringBuffer的源码,你会发现StringBuffer类的属性value是可变的&lt;String类中的value定义:private final char value[];StringBuffer类中的value定义:char[] value;&gt;,并且提供了append(Object object)和setCharAt(int index, char ch)修改value.<br>所以,Account类不具备不可变性","like_count":111,"discussions":[{"author":{"id":1156592,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","nickname":"Joker","note":"","ucode":"126AF848001A1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46197,"discussion_content":"老哥，稳","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573130053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2014573,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/bd/6d/7010f98e.jpg","nickname":"SharpBB","note":"","ucode":"D30C5B798B8E8C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576329,"discussion_content":"总结就是 虽然设置了final 但是还得看起内部属性 真要不可变 全设置为final","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655436275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2436755,"avatar":"https://static001.geekbang.org/account/avatar/00/25/2e/93/81e3e4ca.jpg","nickname":"ฅSlekฅ","note":"","ucode":"B732C672B3D301","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549695,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644213862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1812970,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a9/ea/5bfce6c5.jpg","nickname":"mgs2002","note":"","ucode":"F5931108BD509B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311799,"discussion_content":"原来如此","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602491617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111870,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2Az5uTh9ZGVA7yQCj1BXtXuicPRkvJicA97AoN9xX3bnPcUYglTMXJeZeoVbPQeJA7ICvQhR3KQ0w/132","nickname":"日不落帝国","note":"","ucode":"6A11ABBD8AC438","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13612,"discussion_content":"学习了，强👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568690191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91379,"user_name":"木卫六","can_delete":false,"product_type":"c1","uid":1199495,"ip_address":"","ucode":"D113DF578C5BF5","user_header":"https://static001.geekbang.org/account/avatar/00/12/4d/87/57236a2d.jpg","comment_is_top":false,"comment_ctime":1557019646,"is_pvip":true,"replies":[{"id":"34443","content":"👍","user_name":"作者回复","comment_id":91379,"uid":"1269969","ip_address":"","utype":1,"ctime":1558359232,"user_name_real":"王宝令"}],"discussion_count":3,"race_medal":0,"score":"336564468734","product_id":100023901,"comment_content":"这段代码应该是线程安全的，但它不是不可变模式。StringBuffer只是字段引用不可变，值是可以调用StringBuffer的方法改变的，这个需要改成把字段改成String这样的不可变对象来解决。<br>","like_count":79,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448899,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558359232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2827987,"avatar":"","nickname":"Geek_3223a1","note":"","ucode":"02471FF2DAF55A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":563393,"discussion_content":"使用String和这个例子就无关了，因为String没有方法用来改变char数组的值的方法。而基础类型和基础类型对象数组，我都试了，并不能保证不可变性。并且如果使用String 的引用修改，和final的不可变性无关了，这是因为java里面的引用的不可传递性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649988265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":448899,"ip_address":""},"score":563393,"extra":""}]},{"author":{"id":1111870,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK2Az5uTh9ZGVA7yQCj1BXtXuicPRkvJicA97AoN9xX3bnPcUYglTMXJeZeoVbPQeJA7ICvQhR3KQ0w/132","nickname":"日不落帝国","note":"","ucode":"6A11ABBD8AC438","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13613,"discussion_content":"学习了，强悍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568690238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118299,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1564314201,"is_pvip":false,"replies":[{"id":"43316","content":"👍","user_name":"作者回复","comment_id":118299,"uid":"1269969","ip_address":"","utype":1,"ctime":1564318233,"user_name_real":"王宝令"}],"discussion_count":1,"race_medal":0,"score":"169068038745","product_id":100023901,"comment_content":"---总结---<br>1. 不可变类的特点：类、属性都是final的，方法是只读的<br>2. 为了解决有些不可变类每次创建一个新对象导致内存浪费的问题：享元模式&#47;对象池<br>3. 注意事项：区别引用不可变和实际内容不可变<br>4. 更简单的不可变对象：无状态对象","like_count":40,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460349,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564318233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91592,"user_name":"张天屹","can_delete":false,"product_type":"c1","uid":1477612,"ip_address":"","ucode":"8BD6BD6DCF0F4F","user_header":"https://static001.geekbang.org/account/avatar/00/16/8b/ec/dc03f5ad.jpg","comment_is_top":false,"comment_ctime":1557057913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"87456403833","product_id":100023901,"comment_content":"具不具备不可变性看怎么界定边界了，类本身是具备的，StrnigBuffer的引用不可变。但是因为StringBuffer是一个对象，持有非final的char数组，所以底层数组是可变的。但是StringBuffer是并发安全的，因为方法加锁synchronized","like_count":21},{"had_liked":false,"id":97573,"user_name":"炎炎","can_delete":false,"product_type":"c1","uid":1143280,"ip_address":"","ucode":"D7F93624E014FC","user_header":"https://static001.geekbang.org/account/avatar/00/11/71/f0/be872719.jpg","comment_is_top":false,"comment_ctime":1558699298,"is_pvip":false,"replies":[{"id":"34883","content":"感谢一路相伴😄","user_name":"作者回复","comment_id":97573,"uid":"1269969","ip_address":"","utype":1,"ctime":1558701937,"user_name_real":"王宝令"}],"discussion_count":1,"race_medal":0,"score":"65983208738","product_id":100023901,"comment_content":"这个专栏一直看到这儿，真的很棒，课后问题也很好，让我对并发编程有了一个整体的了解，之前看书一直看不懂，老师带着梳理一遍，看书也容易多了，非常感谢老师，希望老师再出专栏","like_count":16,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451329,"discussion_content":"感谢一路相伴😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558701937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93963,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1557677890,"is_pvip":false,"replies":[{"id":"33672","content":"👍","user_name":"作者回复","comment_id":93963,"uid":"1269969","ip_address":"","utype":1,"ctime":1557757779,"user_name_real":"王宝令"}],"discussion_count":1,"race_medal":0,"score":"48802318146","product_id":100023901,"comment_content":"final StringBuffer user;<br><br>StingBuffer 是 引用 类型， 当我们说它final StingBuffer user 不可变时，实际上说的是它user指向堆内存的地址不可变， 但堆内存的user对象，通过sub append 方法实际是可变的……","like_count":12,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449845,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557757779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161263,"user_name":"水滴s","can_delete":false,"product_type":"c1","uid":1264431,"ip_address":"","ucode":"1C684514B54B6F","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/2f/2f73fd52.jpg","comment_is_top":false,"comment_ctime":1576158920,"is_pvip":false,"replies":[{"id":"62466","content":"严格讲你是对的，仅仅是设置属性这个操作不涉及原子性。只有类似foo=new Foo()，这种组合操作时才会有原子性问题，这时候的原子性出在foo的属性上，而不是bar的属性foo上。对象赋值的原子性问题一般都是因为组合操作。","user_name":"作者回复","comment_id":161263,"uid":"1269969","ip_address":"","utype":1,"ctime":1577002979,"user_name_real":"王宝令"}],"discussion_count":2,"race_medal":0,"score":"40230864584","product_id":100023901,"comment_content":"老师，问下 Bar这个类的foo属性的设值在多线程下为什么会有原子性问题，我理解的只会有可见性问题？","like_count":10,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477668,"discussion_content":"严格讲你是对的，仅仅是设置属性这个操作不涉及原子性。只有类似foo=new Foo()，这种组合操作时才会有原子性问题，这时候的原子性出在foo的属性上，而不是bar的属性foo上。对象赋值的原子性问题一般都是因为组合操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577002979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1570872,"avatar":"https://static001.geekbang.org/account/avatar/00/17/f8/38/41bd3639.jpg","nickname":"小马爹","note":"","ucode":"139FCF2C668343","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":571156,"discussion_content":"不太理解，这里new操作的问题不是出在有序性上吗？new的时候cpu的指令集顺序可能有变化，导致字段未赋值成功，但是volatile可以保证有序性的问题。这个原子性还是不太理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652090541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":477668,"ip_address":""},"score":571156,"extra":""}]}]},{"had_liked":false,"id":91421,"user_name":"对象正在输入...","can_delete":false,"product_type":"c1","uid":1446254,"ip_address":"","ucode":"BA370176043636","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/6e/897bd526.jpg","comment_is_top":false,"comment_ctime":1557034317,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31621805389","product_id":100023901,"comment_content":"不可变类的三个要求 : 类和属性都是 final 的，所有方法均是只读的<br>这里的StringBuffer传进来的只是个引用，调用方可以修改，所以这个类不具备不可变性。<br><br>","like_count":8,"discussions":[{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40014,"discussion_content":"简单清晰的回答，直击要害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572060083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227725,"user_name":"汤小高","can_delete":false,"product_type":"c1","uid":1555565,"ip_address":"","ucode":"D4AB7766273D52","user_header":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","comment_is_top":false,"comment_ctime":1592464710,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"23067301190","product_id":100023901,"comment_content":"Immutability模原理弄清楚了，但是对于Immutability模式的应用场景还不是很明白，我的疑惑是既然共享变量是只读的，那就没必要加锁了，各个线程都读就行了，为啥还要用Immutability模式了，因为如果共享变量存在读写情况，就会加锁了，也不会用到Immutability模式，希望老师解惑，谢谢","like_count":6,"discussions":[{"author":{"id":1104818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/b2/29b4f22b.jpg","nickname":"JasonZ","note":"","ucode":"992193AE44C39C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384476,"discussion_content":"不可变类的作用是可以重复使用、节省存储空间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626608480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1881786,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/b6/ba/f76d996b.jpg","nickname":"机车","note":"","ucode":"CD32A645AE310A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383682,"discussion_content":"同问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626188228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1446504,"avatar":"https://static001.geekbang.org/account/avatar/00/16/12/68/3ee88032.jpg","nickname":"Libra丶空白","note":"","ucode":"0A0631146D6D15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295449,"discussion_content":"我也是有同样的疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596197892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99896,"user_name":"Hour","can_delete":false,"product_type":"c1","uid":1448748,"ip_address":"","ucode":"AA1045ACABC0BB","user_header":"https://static001.geekbang.org/account/avatar/00/16/1b/2c/6b3c0911.jpg","comment_is_top":false,"comment_ctime":1559354421,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23034190901","product_id":100023901,"comment_content":"&#47;&#47;Foo 线程安全<br>final class Foo{<br>  final int age=0;<br>  final int name=&quot;abc&quot;;<br>}<br>&#47;&#47;Bar 线程不安全<br>class Bar {<br>  Foo foo;<br>  void setFoo(Foo f){<br>    this.foo=f;<br>  }<br>}<br>老师好，对foo的引用和修改在多线程环境中并不能保证原子性和可见性，这句话怎么理解，能用具体的例子说明一下吗？","like_count":6,"discussions":[{"author":{"id":1268264,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","nickname":"GEEKBANG_6638780","note":"","ucode":"952194E56FD8C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530492,"discussion_content":"我说我的理解，Foo对象的创建是new出来，new操作不是原子的。所以，volatile可以保证内存地址可见，但值不一定正确。所以，如果想保证原子性，那只能通过AtomicReference整个替换","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637077294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":1,"child_discussions":[{"author":{"id":1570872,"avatar":"https://static001.geekbang.org/account/avatar/00/17/f8/38/41bd3639.jpg","nickname":"小马爹","note":"","ucode":"139FCF2C668343","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1268264,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","nickname":"GEEKBANG_6638780","note":"","ucode":"952194E56FD8C8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571155,"discussion_content":"不太理解，这里new操作的问题不是出在有序性上吗？new的时候cpu的指令集顺序可能有变化，导致字段未赋值成功，但是volatile可以保证有序性的问题。这个原子性还是不太理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652090525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530492,"ip_address":""},"score":571155,"extra":""}]}]},{"had_liked":false,"id":91368,"user_name":"Rayjun","can_delete":false,"product_type":"c1","uid":1002514,"ip_address":"","ucode":"61A3D1A3D03569","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/12/f0c145d4.jpg","comment_is_top":false,"comment_ctime":1557017540,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"23031854020","product_id":100023901,"comment_content":"不是不可变的，user 逃逸了","like_count":6,"discussions":[{"author":{"id":2683430,"avatar":"https://static001.geekbang.org/account/avatar/00/28/f2/26/a8ac6b42.jpg","nickname":"听风有信","note":"","ucode":"2CCB467114FF5C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389486,"discussion_content":"看到老哥说的逃逸，立马明白了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629291440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236155,"user_name":"第一装甲集群司令克莱斯特","can_delete":false,"product_type":"c1","uid":1265707,"ip_address":"","ucode":"4E8FBB23AD860B","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/2b/2344cdaa.jpg","comment_is_top":false,"comment_ctime":1595330830,"is_pvip":false,"replies":[{"id":"87237","content":"加油吧！","user_name":"作者回复","comment_id":236155,"uid":"1269969","ip_address":"","utype":1,"ctime":1595341050,"user_name_real":"王宝令"}],"discussion_count":1,"race_medal":0,"score":"14480232718","product_id":100023901,"comment_content":"随着课程的深入，越来越看不懂了。我不嫌丢人，不藏拙，这专栏，我一定会二刷，三刷，直到啃下来这块硬骨头！","like_count":4,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501964,"discussion_content":"加油吧！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595341050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140513,"user_name":"铿然","can_delete":false,"product_type":"c1","uid":1162461,"ip_address":"","ucode":"D529242EC2E2EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/dd/c9413f59.jpg","comment_is_top":false,"comment_ctime":1570973564,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10160908156","product_id":100023901,"comment_content":"关于final的理解<br>1. 域并不是都需要定义为final才能线程安全，只要是私有的并且只读，也能保证线程安全<br>2.类被继承，那么实际上是子类不一定安全，和当前这个类无关，如果当前类是安全的，用不用final修饰都是安全的<br>3.final修饰容器类，对象时，引用不可变，兑现内容可变，也不能保证线程安全。<br><br>Java 并发编程实战中对final的描述个人感觉不是那么准确。","like_count":3},{"had_liked":false,"id":307878,"user_name":"听风有信","can_delete":false,"product_type":"c1","uid":2683430,"ip_address":"","ucode":"2CCB467114FF5C","user_header":"https://static001.geekbang.org/account/avatar/00/28/f2/26/a8ac6b42.jpg","comment_is_top":false,"comment_ctime":1629291461,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5924258757","product_id":100023901,"comment_content":"user逃逸了，应该用保护性拷贝","like_count":2},{"had_liked":false,"id":307861,"user_name":"DoctorDeng","can_delete":false,"product_type":"c1","uid":1122760,"ip_address":"","ucode":"116378F7377768","user_header":"https://static001.geekbang.org/account/avatar/00/11/21/c8/c2343cb6.jpg","comment_is_top":false,"comment_ctime":1629286373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5924253669","product_id":100023901,"comment_content":"实现不可以变类主要有如下几步：<br>1. 类增加 final 修饰符，让类无法被继承<br>2. 类中的所有成员变量必须私有（增加 private 关键字）并增加 final 修饰符，让属性无法被修改（属性内容依然可以被修改，通过 4 解决该问题）<br>3. 不提供修改成员变量的方法包括 setter<br>4. 通过构造器初始化所有成员，进行深拷贝(deep copy)<br>5. 在 getter 方法中，不要直接返回对象本身，而是克隆对象，并返回对象的拷贝","like_count":2},{"had_liked":false,"id":211739,"user_name":"见南山","can_delete":false,"product_type":"c1","uid":1118111,"ip_address":"","ucode":"6A8BB82B7573CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/9f/f4b06bd5.jpg","comment_is_top":false,"comment_ctime":1588000082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882967378","product_id":100023901,"comment_content":"不可变对象需要保证类中属性都是不可变的，且只有可读方法。个人理解只有可读方法的作用就是避免对象存在被修改属性的可能性。文末的问题: Stringbuffer对象的引用是不可变的，但他的值却是可以改变的。get方法得到引用后它的值还可以改变。","like_count":2},{"had_liked":false,"id":91068,"user_name":"松花皮蛋me","can_delete":false,"product_type":"c1","uid":1000054,"ip_address":"","ucode":"B0846CEEF6B0D1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/76/256bbd43.jpg","comment_is_top":false,"comment_ctime":1556846085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5851813381","product_id":100023901,"comment_content":"Stringbuffer虽然逃出来了，但是没有引用其他对象，另外它本身也是线程安全的，所以具有不可变性","like_count":2},{"had_liked":false,"id":91060,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1556842237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5851809533","product_id":100023901,"comment_content":"打卡。","like_count":2},{"had_liked":false,"id":91014,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1556787944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5851755240","product_id":100023901,"comment_content":"不具备不可变性,原因是stringbuffer类存在更改user对象方法","like_count":2},{"had_liked":false,"id":90979,"user_name":"发条橙子 。","can_delete":false,"product_type":"c1","uid":1259218,"ip_address":"","ucode":"ED076F4534FFED","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","comment_is_top":false,"comment_ctime":1556765478,"is_pvip":false,"replies":[{"id":"34450","content":"感谢感谢😂<br>你的问题有点笼统，jdk也不是没有bug,sync的锁是记在对象头里的","user_name":"作者回复","comment_id":90979,"uid":"1269969","ip_address":"","utype":1,"ctime":1558361615,"user_name_real":"王宝令"}],"discussion_count":1,"race_medal":0,"score":"5851732774","product_id":100023901,"comment_content":"老师五一节日快乐。<br><br>思考题 ：<br>不可变类的三要素 ：类、属性、方法都是不可变的。 思考题这个类虽然是final ，属性也是final并且没有修改的方法 ， 但是 stringbuffer这个属性的内容是可变的 ， 所以应该没有满足三要素中的属性不可变 ， 应该不属于不可变类 。<br><br><br>另外老师我有个问题想问下， 我看jdk一些源码里，也用了对象做锁。 例如 我有个变量 final  ConcurrentHashMap cache , 有些方法中会对 cache变量 put新的值 ， 但是还有用这个对象做 synchronized(cache) 对象锁 ， 这种做法对么？ 如果对的话，是因为管程只判断对象的首地址没有改变的原因么 ，希望老师指点一下😁","like_count":2,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448750,"discussion_content":"感谢感谢😂\n你的问题有点笼统，jdk也不是没有bug,sync的锁是记在对象头里的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558361615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345167,"user_name":"小马爹","can_delete":false,"product_type":"c1","uid":1570872,"ip_address":"","ucode":"139FCF2C668343","user_header":"https://static001.geekbang.org/account/avatar/00/17/f8/38/41bd3639.jpg","comment_is_top":false,"comment_ctime":1652086818,"is_pvip":false,"replies":[{"id":"126051","content":"是线程安全的","user_name":"作者回复","user_name_real":"编辑","uid":"1269969","ctime":1652180385,"ip_address":"","comment_id":345167,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652086818","product_id":100023901,"comment_content":"“String 和 Long、Integer、Double 等基础类型的包装类都具备不可变性，这些对象的线程安全性都是靠不可变性来保证的。”<br>这里有点不太理解，既然String 和 Long、Integer、Double具备不可变，不可变意味着线程安全，那不就可以说String 和 Long、Integer、Double 是线程安全的了？","like_count":1,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571356,"discussion_content":"是线程安全的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652180385,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339426,"user_name":"bluea","can_delete":false,"product_type":"c1","uid":1030311,"ip_address":"","ucode":"638BD2C838813C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b8/a7/ac5a0f9d.jpg","comment_is_top":false,"comment_ctime":1648094241,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648094241","product_id":100023901,"comment_content":"老师好，可否给个例子，如何使用无状态的对象。","like_count":1},{"had_liked":false,"id":327094,"user_name":"Jayden Lin","can_delete":false,"product_type":"c1","uid":2849902,"ip_address":"","ucode":"6C86DE76545C64","user_header":"","comment_is_top":false,"comment_ctime":1639912003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639912003","product_id":100023901,"comment_content":"老師好，SafeWM 的例子可以這樣理解嗎？<br><br>SafeWM 引用 WMRange，在執行 WMRange 建構子的時候，設定upper 跟 lower 沒有原子性，因此要把 WMRange 內部值 (upper 跟 lower ) 的設定透過 AtomicReference 來做","like_count":1},{"had_liked":false,"id":327091,"user_name":"Jayden Lin","can_delete":false,"product_type":"c1","uid":2849902,"ip_address":"","ucode":"6C86DE76545C64","user_header":"","comment_is_top":false,"comment_ctime":1639910664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639910664","product_id":100023901,"comment_content":"老師好，想問一下 Foo 被 Bar 引用的例子，我可以這樣理解嗎?<br><br>- 問題 1: 可見性問題<br>    - 線程 A 用 `bar.setFoo(new Foo())`，另一個線程 \bB 可能不知道，可以加上 violate 來解決<br><br>- 問題 2: 原子性問題<br>    - 如果 Foo 的 new 裡面有組合操作，可能會有原子性問題，這時候要用 AtomicReference 替換掉，這個原子性問題跟 Foo 有沒有被 Bar 引用無關<br>","like_count":1},{"had_liked":false,"id":295411,"user_name":"小样","can_delete":false,"product_type":"c1","uid":1047127,"ip_address":"","ucode":"0D670431F19A14","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bOhve1DBV2oShl2JrXDib4J1T7LciagcB8jogD5c7pvt8Zv7Bq23Zfnl70cf2R81r8ia947Hbib9FZia56sdx9wcEibA/132","comment_is_top":false,"comment_ctime":1622422234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622422234","product_id":100023901,"comment_content":"&quot;Java 语言里面的 String 和 Long、Integer、Double 等基础类型的包装类都具备不可变性&quot;，这几个类型这样大写不就是包装类了吗","like_count":1},{"had_liked":false,"id":283155,"user_name":"俺能学个啥","can_delete":false,"product_type":"c1","uid":1026742,"ip_address":"","ucode":"30740C5B58774C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/b6/46a5bbf3.jpg","comment_is_top":false,"comment_ctime":1615599808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615599808","product_id":100023901,"comment_content":"由于account对象持有stringbuffer引用，对外暴露了该引用方法，可以操作修改内容，所以不具备不可变性，应该只是无状态对象吧","like_count":1},{"had_liked":false,"id":275583,"user_name":"喃寻","can_delete":false,"product_type":"c1","uid":1565085,"ip_address":"","ucode":"E31B3660726671","user_header":"https://static001.geekbang.org/account/avatar/00/17/e1/9d/3ec0adec.jpg","comment_is_top":false,"comment_ctime":1611589966,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1611589966","product_id":100023901,"comment_content":"这段代码是引用的是final的StringBuffer对象，文中说了不可变对象虽然是线程安全的，但是并不意味着引用这些不可变对象的对象就是线程安全的。我们发现仍然可以通过调用StringBuffer的append方法来改变它的值，所以整体来说这个类是不是具备不可变性的，建议引用不可变的基本数据类型String作为替换，此类才能真正达到不可变性。","like_count":1},{"had_liked":false,"id":264754,"user_name":"🌾🌾🌾小麦🌾🌾🌾","can_delete":false,"product_type":"c1","uid":2046490,"ip_address":"","ucode":"ECB0CE18D5B49A","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3a/1a/ae3c1492.jpg","comment_is_top":false,"comment_ctime":1606630857,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1606630857","product_id":100023901,"comment_content":"&#47;&#47;Bar线程不安全<br>class Bar { <br>Foo foo; <br>void setFoo(Foo f){<br> this.foo=f;  &#47;&#47;对 foo 这个引用的修改在多线程中并不能保证可见性和原子性. 引用赋值不具有原子性吗？<br>}<br>}<br>https:&#47;&#47;docs.oracle.com&#47;javase&#47;specs&#47;jls&#47;se7&#47;html&#47;jls-17.html#jls-17.7<br>Writes to and reads of references are always atomic, regardless of whether they are implemented as 32-bit or 64-bit values.","like_count":1,"discussions":[{"author":{"id":1100655,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/6f/c78ef1cf.jpg","nickname":"王二北","note":"","ucode":"D9090E28B3E1F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387143,"discussion_content":"我感觉老师应该是写错了，应该是无法保证可见性，而不是不具有原子性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628003475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263305,"user_name":"Geek_89e362","can_delete":false,"product_type":"c1","uid":2308075,"ip_address":"","ucode":"E596C2CFE1CFAF","user_header":"","comment_is_top":false,"comment_ctime":1606096809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606096809","product_id":100023901,"comment_content":"不具备不可变性，因为通过 getUser()方法获取到StringBuffer后可以通过 append()方法追加值。从而导致值的修改。","like_count":1},{"had_liked":false,"id":236727,"user_name":"冰河时代","can_delete":false,"product_type":"c1","uid":1098504,"ip_address":"","ucode":"F4375FB7CE4FD4","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/08/28c327d0.jpg","comment_is_top":false,"comment_ctime":1595512048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595512048","product_id":100023901,"comment_content":"其实除了final关键字定义的不可变性，还有Collections或者Guava提供的Immutability Set,List,Map等，也应该算是比可变性的。","like_count":1},{"had_liked":false,"id":187899,"user_name":"Evan","can_delete":false,"product_type":"c1","uid":1344281,"ip_address":"","ucode":"B877ABD0CF4661","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/19/0a3fe8c1.jpg","comment_is_top":false,"comment_ctime":1584271116,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1584271116","product_id":100023901,"comment_content":"无状态对象，有点难理解，能举一个例子","like_count":1},{"had_liked":false,"id":172712,"user_name":"qgymje","can_delete":false,"product_type":"c1","uid":1309328,"ip_address":"","ucode":"1DFE4B52E8C36A","user_header":"https://static001.geekbang.org/account/avatar/00/13/fa/90/f937f371.jpg","comment_is_top":false,"comment_ctime":1579258767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579258767","product_id":100023901,"comment_content":"这文章应该主要讲讲不可变数据结构","like_count":1},{"had_liked":false,"id":149040,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1573130326,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573130326","product_id":100023901,"comment_content":"不具备不可变性的，嘻嘻。","like_count":1},{"had_liked":false,"id":145296,"user_name":"Neo","can_delete":false,"product_type":"c1","uid":1004003,"ip_address":"","ucode":"DA1C960B5F23DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/e3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1572246953,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1572246953","product_id":100023901,"comment_content":"Integer,Long,Double等数值类型的数据不适合用来做锁，其实是不能用xxx.valueOf方法生成的对象作为锁，因为只有valueOf方法才会返回缓存中的数据，直接new出来的对象是没有这个问题的。","like_count":1,"discussions":[{"author":{"id":1438352,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4akcIyIOXB2OqibTe7FF90hwsBicxkjdicUNTMorGeIictdr3OoMxhc20yznmZWwAvQVThKPFWgOyMw/132","nickname":"Chuan","note":"","ucode":"FACEC5DAC36A7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164090,"discussion_content":"从JDK 9开始new出来的这种方式过时了，官方不提倡，原因也是为了节省空间。\n```\n     * @deprecated\n     * It is rarely appropriate to use this constructor. The static factory\n     * {@link #valueOf(long)} is generally a better choice, as it is\n     * likely to yield significantly better space and time performance.\n     */\n    @Deprecated(since=&#34;9&#34;)\n    public Long(long value) {\n        this.value = value;\n    }\n```","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581148268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141774,"user_name":"黄浩特","can_delete":false,"product_type":"c1","uid":1018240,"ip_address":"","ucode":"C3A4BBF4FB8519","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/80/3666ced3.jpg","comment_is_top":false,"comment_ctime":1571223087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571223087","product_id":100023901,"comment_content":"&quot;下面我们再看看如何正确地发布不可变对象。不可变对象虽然是线程...&quot;<br><br>疑问: 这段后面怎么没有提正确发布的情况呢<br>","like_count":1},{"had_liked":false,"id":136951,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1569565270,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569565270","product_id":100023901,"comment_content":"太棒了, 又学到了<br><br>以前只知道 String 是 final 类型的, 但总是无法很好的解释这个问题, 学习了本篇的课程, 让我了解到了不可变模式的妙用, 原来这样是实现线程安全的手段, 巧妙!","like_count":1},{"had_liked":false,"id":117895,"user_name":"Vincent","can_delete":false,"product_type":"c1","uid":1135159,"ip_address":"","ucode":"CD8B84A57A6A0C","user_header":"https://static001.geekbang.org/account/avatar/00/11/52/37/13b4c8aa.jpg","comment_is_top":false,"comment_ctime":1564185512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564185512","product_id":100023901,"comment_content":"Account类不具有不可变类的特性，通过get方法获取到 StringBuffer 实例可以修改Account 类的属性。","like_count":1},{"had_liked":false,"id":113897,"user_name":"道","can_delete":false,"product_type":"c1","uid":1324160,"ip_address":"","ucode":"851A0AD751D317","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/80/30e9ae41.jpg","comment_is_top":false,"comment_ctime":1563182136,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563182136","product_id":100023901,"comment_content":"什么场景下值需要保证引用可见性不需要原子性。用volatile修饰引用就意味着这个引用在多线程情况下会引用其它对象，但是对这个引用的赋值操作又不是原子性操作。这意味着可能某个线程访问到一个错误的引用？<br>单例模式-双重校验锁，中volatile保证指令不重排序号好理解；如何看待volatile在这里的可见性作用。假如线程1运行到锁外的那个判空条件，线程2在synchronized块中给引用更新，，因为引用更新非原子性操作，那么线程1会在锁外的判空条件那里读取到错误的引用吗？<br>求解","like_count":1},{"had_liked":false,"id":104033,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1560596483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560596483","product_id":100023901,"comment_content":"我们web开发的service层就是一种不可变模式的写法。所以没有并发问题。","like_count":0},{"had_liked":false,"id":103135,"user_name":"嗨喽","can_delete":false,"product_type":"c1","uid":1162527,"ip_address":"","ucode":"E13573559A50D4","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/1f/e9fbc712.jpg","comment_is_top":false,"comment_ctime":1560387089,"is_pvip":false,"replies":[{"id":"37426","content":"版本号会一直增加，所以不会有aba问题","user_name":"作者回复","user_name_real":"王宝令","uid":"1269969","ctime":1560432889,"ip_address":"","comment_id":103135,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1560387089","product_id":100023901,"comment_content":"上面得SafeWM类代码会不会有ABA问题呢，老师","like_count":0,"discussions":[{"author":{"id":1269969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/60/d1/8efa89ab.jpg","nickname":"王宝令","note":"","ucode":"4FE19F5BC32FCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453747,"discussion_content":"版本号会一直增加，所以不会有aba问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560432889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1566274,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e6/42/07f56456.jpg","nickname":"狄克推多","note":"","ucode":"420C27F7734C30","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302235,"discussion_content":"版本号会一直增加? 这个体现在哪？ 老哥知道吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598857529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99778,"user_name":"xuery","can_delete":false,"product_type":"c1","uid":1027584,"ip_address":"","ucode":"F461B61BE06131","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/00/025f37e7.jpg","comment_is_top":false,"comment_ctime":1559297340,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1559297340","product_id":100023901,"comment_content":"不是，通过getUser拿到StringBuffer类型的user后，还是可以通过append改变字符串","like_count":0},{"had_liked":false,"id":97583,"user_name":"炎炎","can_delete":false,"product_type":"c1","uid":1143280,"ip_address":"","ucode":"D7F93624E014FC","user_header":"https://static001.geekbang.org/account/avatar/00/11/71/f0/be872719.jpg","comment_is_top":false,"comment_ctime":1558701629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558701629","product_id":100023901,"comment_content":"想请教老师一个问题，Long里面的内部类为什么不用final修饰，这样这个内部类不就是可以被继承修改了么？怎么保证它的不可变性呢？<br>&#47;&#47; 缓存，等价于对象池<br>&#47;&#47; 仅缓存 [-128,127] 直接的数字<br>static class LongCache {<br>  static final Long cache[] <br>    = new Long[-(-128) + 127 + 1];<br><br>  static {<br>    for(int i=0; i&lt;cache.length; i++)<br>      cache[i] = new Long(i-128);<br>  }<br>}<br>","like_count":0},{"had_liked":false,"id":92333,"user_name":"易儿易","can_delete":false,"product_type":"c1","uid":1242864,"ip_address":"","ucode":"B15D1031CA841E","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqLcWH3mSPmhjrs1aGL4b3TqI7xDqWWibM4nYFrRlp0z7FNSWaJz0mqovrgIA7ibmrPt8zRScSfRaqQ/132","comment_is_top":false,"comment_ctime":1557235291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557235291","product_id":100023901,"comment_content":"思考题：不是不可变类，用下边的代码可以进行验证！（返回的对象自身提供了修改方法）<br>public final class Test {<br>    public static void main(String[] args) {<br>        Account a = new Account(&quot;小A&quot;);<br><br>        System.out.println(a.getUser());<br><br>        a.getUser().append(&quot;小B&quot;);<br><br>        System.out.println(a.getUser());<br>    }<br>}<br><br>","like_count":0},{"had_liked":false,"id":91402,"user_name":"萧一狼","can_delete":false,"product_type":"c1","uid":1266160,"ip_address":"","ucode":"35CC9C8FC8DDD6","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/f0/9b7d40fc.jpg","comment_is_top":false,"comment_ctime":1557025999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557025999","product_id":100023901,"comment_content":"虽然没有对外提供修改user的方法，但是提供了get方法返回user可以修改","like_count":0},{"had_liked":false,"id":91067,"user_name":"老醋","can_delete":false,"product_type":"c1","uid":1308401,"ip_address":"","ucode":"D6DF921AAB9E7A","user_header":"https://static001.geekbang.org/account/avatar/00/13/f6/f1/5ccbe3fe.jpg","comment_is_top":false,"comment_ctime":1556845668,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556845668","product_id":100023901,"comment_content":"我的理解是：<br>不具有不可变性，因为get方法返回的是user对象的引用，不是一个拷贝，所以可以改变Account类的user对象。","like_count":0},{"had_liked":false,"id":90957,"user_name":"MiracleWCG","can_delete":false,"product_type":"c1","uid":1152348,"ip_address":"","ucode":"2333D32404C22A","user_header":"https://static001.geekbang.org/account/avatar/00/11/95/5c/3214fd5d.jpg","comment_is_top":false,"comment_ctime":1556759132,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1556759132","product_id":100023901,"comment_content":"我认为不是线程安全的 因为得到的stringbuffer 提供了方法改变user。请老师指点。","like_count":0,"discussions":[{"author":{"id":1812970,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a9/ea/5bfce6c5.jpg","nickname":"mgs2002","note":"","ucode":"F5931108BD509B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311800,"discussion_content":"方法有加锁的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602491888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90949,"user_name":"罗洲","can_delete":false,"product_type":"c1","uid":1263417,"ip_address":"","ucode":"68133E38A25C17","user_header":"https://static001.geekbang.org/account/avatar/00/13/47/39/0ce1aa62.jpg","comment_is_top":false,"comment_ctime":1556756688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556756688","product_id":100023901,"comment_content":"Account 的属性是 final 的，而且只有get方法，从这里考虑，确实觉得这个类不可变，但是这个类的引用指向user对象，这个对象的结构没有说明，那么就有可能这个对象里面的属性可变，所以就会导致虽然Account 不可变，但是User属性是可变的。所以这个类不具有不可变性。","like_count":0},{"had_liked":false,"id":90948,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1556755993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556755993","product_id":100023901,"comment_content":"我的理解从类到属性都设置了final，并且内部没有其它的普通属性来更改。","like_count":0}]}