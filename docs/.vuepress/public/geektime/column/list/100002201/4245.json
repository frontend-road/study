{"id":4245,"title":"49 | 弹力设计篇之“限流设计”","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>保护系统不会在过载的情况下出现问题，我们就需要限流。</p><p>我们在一些系统中都可以看到这样的设计，比如，我们的数据库访问的连接池，还有我们的线程池，还有Nginx下的用于限制瞬时并发连接数的limit_conn模块，限制每秒平均速率的limit_req模块，还有限制MQ的生产速，等等。</p><h1>限流的策略</h1><p>限流的目的是通过对并发访问进行限速，相关的策略一般是，一旦达到限制的速率，那么就会触发相应的限流行为。一般来说，触发的限流行为如下。</p><ul>\n<li>\n<p><strong>拒绝服务</strong>。把多出来的请求拒绝掉。一般来说，好的限流系统在受到流量暴增时，会统计当前哪个客户端来的请求最多，直接拒掉这个客户端，这种行为可以把一些不正常的或者是带有恶意的高并发访问挡在门外。</p>\n</li>\n<li>\n<p><strong>服务降级</strong>。关闭或是把后端服务做降级处理。这样可以让服务有足够的资源来处理更多的请求。降级有很多方式，一种是把一些不重要的服务给停掉，把CPU、内存或是数据的资源让给更重要的功能；一种是不再返回全量数据，只返回部分数据。</p>\n</li>\n</ul><p>因为全量数据需要做SQL Join操作，部分的数据则不需要，所以可以让SQL执行更快，还有最快的一种是直接返回预设的缓存，以牺牲一致性的方式来获得更大的性能吞吐。</p><!-- [[[read_end]]] --><ul>\n<li>\n<p><strong>特权请求</strong>。所谓特权请求的意思是，资源不够了，我只能把有限的资源分给重要的用户，比如：分给权利更高的VIP用户。在多租户系统下，限流的时候应该保大客户的，所以大客户有特权可以优先处理，而其它的非特权用户就得让路了。</p>\n</li>\n<li>\n<p><strong>延时处理</strong>。在这种情况下，一般会有一个队列来缓冲大量的请求，这个队列如果满了，那么就只能拒绝用户了，如果这个队列中的任务超时了，也要返回系统繁忙的错误了。使用缓冲队列只是为了减缓压力，一般用于应对短暂的峰刺请求。</p>\n</li>\n<li>\n<p><strong>弹性伸缩</strong>。动用自动化运维的方式对相应的服务做自动化的伸缩。这个需要一个应用性能的监控系统，能够感知到目前最繁忙的TOP 5的服务是哪几个。</p>\n<p>然后去伸缩它们，还需要一个自动化的发布、部署和服务注册的运维系统，而且还要快，越快越好。否则，系统会被压死掉了。当然，如果是数据库的压力过大，弹性伸缩应用是没什么用的，这个时候还是应该限流。</p>\n</li>\n</ul><h1>限流的实现方式</h1><h2>计数器方式</h2><p>最简单的限流算法就是维护一个计数器Counter，当一个请求来时，就做加一操作，当一个请求处理完后就做减一操作。如果这个Counter大于某个数了（我们设定的限流阈值），那么就开始拒绝请求以保护系统的负载了。</p><p>这个算法足够得简单粗暴。</p><h2>队列算法</h2><p>在这个算法下，请求的速度可以是波动的，而处理的速度则是非常均速的。这个算法其实有点像一个FIFO的算法。</p><p><img src=\"https://static001.geekbang.org/resource/image/c8/3d/c8f774f88ab8a4b72378971263c0393d.png?wh=860*175\" alt=\"\"></p><p>在上面这个FIFO的队列上，我们可以扩展出一些别的玩法。</p><p>一个是有优先级的队列，处理时先处理高优先级的队列，然后再处理低优先级的队列。 如下图所示，只有高优先级的队列被处理完成后，才会处理低优先级的队列。</p><p><img src=\"https://static001.geekbang.org/resource/image/de/80/de51d6fc68df3d8c808b84e4bc455580.png?wh=858*320\" alt=\"\"></p><p>有优先级的队列可能会导致低优先级队列长时间得不到处理。为了避免低优先级的队列被饿死，一般来说是分配不同比例的处理时间到不同的队列上，于是我们有了带权重的队列。</p><p>如下图所示。有三个队列的权重分布是3:2:1，这意味着我们需要在权重为3的这个队列上处理3个请求后，再去权重为2的队列上处理2个请求，最后再去权重为1的队列上处理1个请求，如此反复。</p><p><img src=\"https://static001.geekbang.org/resource/image/c7/54/c775345e3b8f599e26a4d7f64941cd54.png?wh=858*366\" alt=\"\"></p><p>队列流控是以队列的方式来处理请求。如果处理过慢，那么就会导致队列满，而开始触发限流。</p><p>但是，这样的算法需要用队列长度来控制流量，在配置上比较难操作。如果队列过长，导致后端服务在队列没有满时就挂掉了。一般来说，这样的模型不能做push，而是pull方式会好一些。</p><h2>漏斗算法 Leaky Bucket</h2><p>漏斗算法可以参看Wikipedia的相关词条 <a href=\"https://en.wikipedia.org/wiki/Leaky_bucket\">Leaky Bucket</a>。</p><p>下图是一个<a href=\"https://www.slideshare.net/vimal25792/leaky-bucket-tocken-buckettraffic-shaping\">漏斗算法的示意图</a> 。</p><p><img src=\"https://static001.geekbang.org/resource/image/95/00/95326ea1624d4206a26ff275b39efc00.png?wh=862*587\" alt=\"\"></p><p>我们可以看到，就像一个漏斗一样，进来的水量就好像访问流量一样，而出去的水量就像是我们的系统处理请求一样。当访问流量过大时这个漏斗中就会积水，如果水太多了就会溢出。</p><p>一般来说，这个“漏斗”是用一个队列来实现的，当请求过多时，队列就会开始积压请求，如果队列满了，就会开始拒绝请求。很多系统都有这样的设计，比如TCP。当请求的数量过多时，就会有一个sync backlog的队列来缓冲请求，或是TCP的滑动窗口也是用于流控的队列。</p><p><img src=\"https://static001.geekbang.org/resource/image/d4/a0/d4b8b6ceb8de4400dfc97f3ff0feeaa0.png?wh=858*297\" alt=\"\"></p><p>我们可以看到，漏斗算法其实就是在队列请求中加上一个限流器，来让Processor以一个均匀的速度处理请求。</p><h2>令牌桶算法Token Bucket</h2><p>关于令牌桶算法，主要是有一个中间人。在一个桶内按照一定的速率放入一些token，然后，处理程序要处理请求时，需要拿到token，才能处理；如果拿不到，则不处理。</p><p>下面这个图很清楚地说明了这个算法。</p><p><img src=\"https://static001.geekbang.org/resource/image/99/f0/996b8d60ed90c470ce839f8826e375f0.png?wh=808*481\" alt=\"\"></p><p>从理论上来说，令牌桶的算法和漏斗算法不一样的是，漏斗算法中，处理请求是以一个常量和恒定的速度处理的，而令牌桶算法则是在流量小的时候“攒钱”，流量大的时候，可以快速处理。</p><p>然而，我们可能会问，Processor的处理速度因为有队列的存在，所以其总是能以最大处理能力来处理请求，这也是我们所希望的方式。因此，令牌桶和漏斗都是受制于Processor的最大处理能力。无论令牌桶里有多少令牌，也无论队列中还有多少请求。总之，Processor在大流量来临时总是按照自己最大的处理能力来处理的。</p><p>但是，试想一下，如果我们的Processor只是一个非常简单的任务分配器，比如像Nginx这样的基本没有什么业务逻辑的网关，那么它的处理速度一定很快，不会有什么瓶颈，而其用来把请求转发给后端服务，那么在这种情况下，这两个算法就有不一样的情况了。</p><p>漏斗算法会以一个稳定的速度转发，而令牌桶算法平时流量不大时在“攒钱”，流量大时，可以一次发出队列里有的请求，而后就受到令牌桶的流控限制。</p><p>另外，令牌桶还可能做成第三方的一个服务，这样可以在分布式的系统中对全局进行流控，这也是一个很好的方式。</p><h2>基于响应时间的动态限流</h2><p>上面的算法有个不好的地方，就是需要设置一个确定的限流值。这就要求我们每次发布服务时都做相应的性能测试，找到系统最大的性能值。</p><p>当然，性能测试并不是很容易做的。有关性能测试的方法请参看我在CoolShell上的这篇文章《<a href=\"https://coolshell.cn/articles/17381.html\">性能测试应该怎么做</a>》。虽然性能测试比较不容易，但是还是应该要做的。</p><p>然而，在很多时候，我们却并不知道这个限流值，或是很难给出一个合适的值。其基本会有如下的一些因素：</p><ul>\n<li>\n<p>实际情况下，很多服务会依赖于数据库。所以，不同的用户请求，会对不同的数据集进行操作。就算是相同的请求，可能数据集也不一样，比如，现在很多应用都会有一个时间线Feed流，不同的用户关心的主题人人不一样，数据也不一样。</p>\n<p>而且数据库的数据是在不断变化的，可能前两天性能还行，因为数据量增加导致性能变差。在这种情况下，我们很难给出一个确定的一成不变的值，因为关系型数据库对于同一条SQL语句的执行时间其实是不可预测的（NoSQL的就比RDBMS的可预测性要好）。</p>\n</li>\n<li>\n<p>不同的API有不同的性能。我们要在线上为每一个API配置不同的限流值，这点太难配置，也很难管理。</p>\n</li>\n<li>\n<p>而且，现在的服务都是能自动化伸缩的，不同大小的集群的性能也不一样，所以，在自动化伸缩的情况下，我们要动态地调整限流的阈值，这点太难做到了。</p>\n</li>\n</ul><p>基于上述这些原因，我们限流的值是很难被静态地设置成恒定的一个值。</p><p>我们想使用一种动态限流的方式。这种方式，不再设定一个特定的流控值，而是能够动态地感知系统的压力来自动化地限流。</p><p>这方面设计的典范是TCP协议的拥塞控制的算法。TCP使用RTT - Round Trip Time 来探测网络的延时和性能，从而设定相应的“滑动窗口”的大小，以让发送的速率和网络的性能相匹配。这个算法是非常精妙的，我们完全可以借鉴在我们的流控技术中。</p><p>我们记录下每次调用后端请求的响应时间，然后在一个时间区间内（比如，过去10秒）的请求计算一个响应时间的P90或P99值，也就是把过去10秒内的请求的响应时间排个序，然后看90%或99%的位置是多少。</p><p>这样，我们就知道有多少请求大于某个响应时间。如果这个P90或P99超过我们设定的阈值，那么我们就自动限流。</p><p>这个设计中有几个要点。</p><ul>\n<li>\n<p>你需要计算的一定时间内的P90或P99。在有大量请求的情况下，这个非常地耗内存也非常地耗CPU，因为需要对大量的数据进行排序。</p>\n<p>解决方案有两种，一种是不记录所有的请求，采样就好了，另一种是使用一个叫蓄水池的近似算法。关于这个算法这里我不就多说了，《编程珠玑》里讲过这个算法，你也可以自行Google，英文叫 <a href=\"https://en.wikipedia.org/wiki/Reservoir_sampling\">Reservoir Sampling</a>。</p>\n</li>\n<li>\n<p>这种动态流控需要像TCP那样，你需要记录一个当前的QPS。如果发现后端的P90/P99响应太慢，那么就可以把这个QPS减半，然后像TCP一样走慢启动的方式，直接到又开始变慢，然后减去1/4的QPS，再慢启动，然后再减去1/8的QPS……</p>\n<p>这个过程有点像个阻尼运行的过程，然后整个限流的流量会在一个值上下做小幅振动。这么做的目的是，如果后端扩容伸缩后性能变好，系统会自动适应后端的最大性能。</p>\n</li>\n<li>\n<p>这种动态限流的方式实现起来并不容易。大家可以看一下TCP的算法。TCP相关的一些算法，我写在了CoolShell上的《<a href=\"https://coolshell.cn/articles/11609.html\">TCP的那些事（下）</a>》这篇文章中。你可以用来做参考来实现。</p>\n</li>\n</ul><p>我在现在创业中的Ease Gateway的产品中实现了这个算法。</p><h1>限流的设计要点</h1><p>限流主要是有四个目的。</p><ol>\n<li>\n<p>为了向用户承诺SLA。我们保证我们的系统在某个速度下的响应时间以及可用性。</p>\n</li>\n<li>\n<p>同时，也可以用来阻止在多租户的情况下，某一用户把资源耗尽而让所有的用户都无法访问的问题。</p>\n</li>\n<li>\n<p>为了应对突发的流量。</p>\n</li>\n<li>\n<p>节约成本。我们不会为了一个不常见的尖峰来把我们的系统扩容到最大的尺寸。而是在有限的资源下能够承受比较高的流量。</p>\n</li>\n</ol><p>在设计上，我们还要有以下的考量。</p><ul>\n<li>\n<p>限流应该是在架构的早期考虑。当架构形成后，限流不是很容易加入。</p>\n</li>\n<li>\n<p>限流模块性能必须好，而且对流量的变化也是非常灵敏的，否则太过迟钝的限流，系统早因为过载而挂掉了。</p>\n</li>\n<li>\n<p>限流应该有个手动的开关，这样在应急的时候，可以手动操作。</p>\n</li>\n<li>\n<p>当限流发生时，应该有个监控事件通知。让我们知道有限流事件发生，这样，运维人员可以及时跟进。而且还可以自动化触发扩容或降级，以缓解系统压力。</p>\n</li>\n<li>\n<p>当限流发生时，对于拒掉的请求，我们应该返回一个特定的限流错误码。这样，可以和其它错误区分开来。而客户端看到限流，可以调整发送速度，或是走重试机制。</p>\n</li>\n<li>\n<p>限流应该让后端的服务感知到。限流发生时，我们应该在协议头中塞进一个标识，比如HTTP Header中，放入一个限流的级别，告诉后端服务目前正在限流中。这样，后端服务可以根据这个标识决定是否做降级。</p>\n</li>\n</ul><h1>小结</h1><p>好了，我们来总结一下今天分享的主要内容。</p><p>首先，限流的目的是为了保护系统不在过载的情况下导致问题。接着讲了几种限流的策略。然后讲了，限流的算法，包括计数器、队列、漏斗和令牌桶。然后讨论了如何基于响应时间来限流。最后，我总结了限流设计的要点。下节课，我们讲述降级设计。希望对你有帮助。</p><p>也欢迎你分享一下你实现过怎样的限流机制？</p><p>文末给出了《分布式系统设计模式》系列文章的目录，希望你能在这个列表里找到自己感兴趣的内容。</p><ul>\n<li>弹力设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/3912\">认识故障和弹力设计</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3917\">隔离设计Bulkheads</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3926\">异步通讯设计Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4050\">幂等性设计Idempotency</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4086\">服务的状态State</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4087\">补偿事务Compensating Transaction</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4121\">重试设计Retry</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4241\">熔断设计Circuit Breaker</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4245\">限流设计Throttle</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4252\">降级设计degradation</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4253\">弹力设计总结</a></li>\n</ul>\n</li>\n<li>管理设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/5175\">分布式锁Distributed Lock</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5819\">配置中心Configuration Management</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5909\">边车模式Sidecar</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5920\">服务网格Service Mesh</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6086\">网关模式Gateway</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6283\">部署升级策略</a></li>\n</ul>\n</li>\n<li>性能设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/6282\">缓存Cache</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7036\">异步处理Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7045\">数据库扩展</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7047\">秒杀Flash Sales</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7086\">边缘计算Edge Computing</a></li>\n</ul>\n</li>\n</ul>","neighbors":{"left":{"article_title":"48 | 弹力设计篇之“熔断设计”","id":4241},"right":{"article_title":"50 | 弹力设计篇之“降级设计”","id":4252}},"comments":[{"had_liked":false,"id":207251,"user_name":"理帆","can_delete":false,"product_type":"c1","uid":1098526,"ip_address":"","ucode":"1B32202C229735","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/1e/633a1e87.jpg","comment_is_top":false,"comment_ctime":1587034884,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"160500824836","product_id":100002201,"comment_content":"对于要代码的同学我想说，工作久了你就会发现最重要的是思想、是方向，而不是实现、代码。并不是说代码本身不重要，但如果知道解题思路，那就成功了一半。如果没有思路，或者思路错了，那写代码毫无用处，甚至会起到反作用。思想决定高度，这不是一句空话。","like_count":37,"discussions":[{"author":{"id":2009734,"avatar":"","nickname":"一墨","note":"","ucode":"2EFB72EEC69FE2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280552,"discussion_content":"要代码和谈思想的两种说法我都理解, 因为自己也是由新手过来的. \n\n新手时最讨厌的是别人讲思想,因为看不见摸不着,最希望看到一段实实在在的可执行代码,去研读,然后才能恍然大悟,哦的一声领会奥义. \n\n老鸟看过万千代码,用过形形色色的语言,不再拘泥于某种实现, 更希望有人能从思想上提点一下,然后才能恍然大悟, 哦的一声登堂入室\n\n现在的我, 新手老鸟兼备, 心里有火,眼里有光, 继续奔涌在这一条无尽的编程河流","likes_number":17,"is_delete":false,"is_hidden":false,"ctime":1591558369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2349807,"avatar":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfAZx4rxlV0Pr3xQNNXGltxBq49KKtYGJdIbt3ubwNkI7yCkRteIAFxUbIIuSekPHCFHLIxL99qrSQ/132","nickname":"琥珀川","note":"","ucode":"8DE377A32ABF1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337907,"discussion_content":"我觉得你说的很对，但是我觉得思想是一方面，代码和实现是另一方面，两者同样重要，两者并不冲突，思想是why，代码和实现是how，我觉得对技术好的介绍是介绍思想，加上代码实践才行。可以在文末放代码实践的github链接咱们自己去学习。新手不看what和how，而是直接去看why，难免懵逼。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1609122317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1203558,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5d/66/214d5b94.jpg","nickname":"blue","note":"","ucode":"D73CDD86E79946","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2349807,"avatar":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfAZx4rxlV0Pr3xQNNXGltxBq49KKtYGJdIbt3ubwNkI7yCkRteIAFxUbIIuSekPHCFHLIxL99qrSQ/132","nickname":"琥珀川","note":"","ucode":"8DE377A32ABF1B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379678,"discussion_content":"新手不懂why，直接看what和how才会懵逼吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624070231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337907,"ip_address":""},"score":379678,"extra":""},{"author":{"id":1033748,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/14/3f206319.jpg","nickname":"Finch","note":"","ucode":"627124740E3940","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2349807,"avatar":"http://thirdwx.qlogo.cn/mmopen/2kpMNDYsSfAZx4rxlV0Pr3xQNNXGltxBq49KKtYGJdIbt3ubwNkI7yCkRteIAFxUbIIuSekPHCFHLIxL99qrSQ/132","nickname":"琥珀川","note":"","ucode":"8DE377A32ABF1B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387050,"discussion_content":"这个专栏不适合小白，需要一定工作经验的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627962599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337907,"ip_address":""},"score":387050,"extra":""},{"author":{"id":1052994,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/226NabDEu1IGMN7Om1gQqG22hk2dZKojpB0KDpAK0vtujQLdlgZsVaPbIc4ymcib0NdH3Syh8YibRuL7Lv5kVCkg/132","nickname":"果子","note":"","ucode":"D7B288A3E722F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1033748,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/14/3f206319.jpg","nickname":"Finch","note":"","ucode":"627124740E3940","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408314,"discussion_content":"同意，小白不适合看。得先有感性认识，才能升级理性认识，这个系列就是升级理性认识，省略了太多的细节，一般人不工作个三五年难以消化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635223455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387050,"ip_address":""},"score":408314,"extra":""}]},{"author":{"id":1015938,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/80/82/3c21b30c.jpg","nickname":"梅子黄时雨","note":"","ucode":"9F788D09C2E9E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590827,"discussion_content":"深刻。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666092084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2446418,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zdK3dSkFwicZHtx5CLAKFJRORRibq2YqvHOP0tySLxVx0X1oD9AJanan2wia2hHaswgxdrCzEEGyVgFTVZ8sElTzQ/132","nickname":"Geek_fbfc4f","note":"","ucode":"7010B242A3F474","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373080,"discussion_content":"完全同意，代码实现应该有框架了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620608949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292329,"discussion_content":"完全同意，思路方向对了就基本成功了一半。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595177841,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10070,"user_name":"LI","can_delete":false,"product_type":"c1","uid":1017732,"ip_address":"","ucode":"D33B594D2D3EE4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/84/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1527256019,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"130376274899","product_id":100002201,"comment_content":"文章都很好，就是缺少代码落地，看起来很理论","like_count":30,"discussions":[{"author":{"id":1484174,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/cZN9xAaxlYHXTIGibcxP7HGNLWrorU5hw3ic7b6p2fe0JyE9yynibvWPW1CUJQl3iaMib79HOVjPnOkgW8msbMFImdw/132","nickname":"金石","note":"","ucode":"1A4A246812B60F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336684,"discussion_content":"做过的都知道，这样一个方案的落地需要大量的人力和时间。很多同学都认为分布式中这些概念的落地并不复杂，这是一个很大的误解。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1608653806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2446418,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zdK3dSkFwicZHtx5CLAKFJRORRibq2YqvHOP0tySLxVx0X1oD9AJanan2wia2hHaswgxdrCzEEGyVgFTVZ8sElTzQ/132","nickname":"Geek_fbfc4f","note":"","ucode":"7010B242A3F474","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1484174,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/cZN9xAaxlYHXTIGibcxP7HGNLWrorU5hw3ic7b6p2fe0JyE9yynibvWPW1CUJQl3iaMib79HOVjPnOkgW8msbMFImdw/132","nickname":"金石","note":"","ucode":"1A4A246812B60F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373119,"discussion_content":"开个新专栏就行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620621839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":336684,"ip_address":""},"score":373119,"extra":""}]},{"author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328065,"discussion_content":"已经提供了足够多的信息了，Google","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606047174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1644768,"avatar":"https://static001.geekbang.org/account/avatar/00/19/18/e0/fa5a473b.jpg","nickname":"Geek_dbb622","note":"","ucode":"9A061D09F48208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217574,"discussion_content":"…………自己去找啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585571200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251835,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oiboHpgukqib2ASXeU0H7W1ibgRMqyrNE5KaWicicPEDy0ia8YdoneZAtvW0EFIiaqZJp2OS4dnweOgXaJ5EjJicicEqic5A/132","nickname":"覃钰栋","note":"","ucode":"19080C463658EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":31978,"discussion_content":"确实如果有demo参考就好了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570975260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014873,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7c/59/dc9bbb21.jpg","nickname":"Join","note":"","ucode":"20F51EFFD8FEDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556117,"discussion_content":"说代码的肯定没关系皓子叔产品啊,去easeegress就可以看到ratelimiter的实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647225107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052994,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/226NabDEu1IGMN7Om1gQqG22hk2dZKojpB0KDpAK0vtujQLdlgZsVaPbIc4ymcib0NdH3Syh8YibRuL7Lv5kVCkg/132","nickname":"果子","note":"","ucode":"D7B288A3E722F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408313,"discussion_content":"对呀，不过有个思路总比没有好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635223313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2446418,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zdK3dSkFwicZHtx5CLAKFJRORRibq2YqvHOP0tySLxVx0X1oD9AJanan2wia2hHaswgxdrCzEEGyVgFTVZ8sElTzQ/132","nickname":"Geek_fbfc4f","note":"","ucode":"7010B242A3F474","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373078,"discussion_content":"。。。这个🉐️看专门单独讲解的文章了。\n而且知道方法已经解决需求的一半了。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620608863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163434,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581079234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214,"discussion_content":"同感，理论很棒确实落地场景应用demo会比较难理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561287502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150823,"user_name":"天草二十六","can_delete":false,"product_type":"c1","uid":1360712,"ip_address":"","ucode":"3165EE3007527B","user_header":"https://static001.geekbang.org/account/avatar/00/14/c3/48/3a739da6.jpg","comment_is_top":false,"comment_ctime":1573613697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31638384769","product_id":100002201,"comment_content":"建议留言要代码的同学们，参考阿里Sentinel","like_count":7},{"had_liked":false,"id":5542,"user_name":"张乐乐","can_delete":false,"product_type":"c1","uid":1084567,"ip_address":"","ucode":"1D5102E465F5CE","user_header":"https://static001.geekbang.org/account/avatar/00/10/8c/97/c8f7426e.jpg","comment_is_top":false,"comment_ctime":1523495631,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31588266703","product_id":100002201,"comment_content":"我们动态限流一般是根据资源来进行的，CPU&#47;内存&#47;带宽，存储对于出流部件可以转为带宽。根据响应时间来限流这个想起来比较难实施，后面再研究下。<br>此外，限流也可以考虑做多级，不同阶段不同的阈值限制，分层去限制，比如操作体统OS层，链接处理，业务处理。<br>也需要，考虑针对异常用户的识别限制，很多时候，一个异常用户带来的影响会特别大。","like_count":7,"discussions":[{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215,"discussion_content":"限流也应该分层架： 硬件基础层 应用层 中间件层 这种  k8s在微服务基础层已经可以实现根据 容器 cpu mem等阀值进行动态扩缩容 操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561287623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":4831,"user_name":"权乐观","can_delete":false,"product_type":"c1","uid":1006814,"ip_address":"","ucode":"132784F7CFE7EC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/de/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1522553158,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18702422342","product_id":100002201,"comment_content":"感觉漏斗是最弱鸡的队列啊","like_count":4},{"had_liked":false,"id":225298,"user_name":"秋天","can_delete":false,"product_type":"c1","uid":1057056,"ip_address":"","ucode":"A7E1D953EF7E17","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","comment_is_top":false,"comment_ctime":1591709406,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14476611294","product_id":100002201,"comment_content":"目前在做一个异步压测的东西，对于异步请求可以及时释放线程，导致发送请求的速率过快导致网络缓冲区被打满或者后端业务线程池耗尽，根据异步回调的成功和失败率，做了一个动态限流的算法，用于调节一个趋近于最优并发的一个量，不会导致网络缓冲区打满或者业务线程池耗尽。其实觉得目前市面上动态限流，还没有比较好的开源方案","like_count":3},{"had_liked":false,"id":204765,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1586453761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14471355649","product_id":100002201,"comment_content":"第二遍看，才注意到实现的相关算法。第一次看热闹，感觉会了，面试的时候被问到，居然一脸懵！","like_count":3},{"had_liked":false,"id":33862,"user_name":"Star","can_delete":false,"product_type":"c1","uid":1022649,"ip_address":"","ucode":"50BA827F8A017C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9a/b9/3c67fc24.jpg","comment_is_top":false,"comment_ctime":1539912100,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"14424813988","product_id":100002201,"comment_content":"熔断是限流的一种怎么理解？能不能描述一下熔断和限流的关键区别？","like_count":3,"discussions":[{"author":{"id":2097065,"avatar":"","nickname":"张维鹏","note":"","ucode":"FB02BCC39FC48F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539494,"discussion_content":"最直观的作用就是，限流是防止自己被其他服务打垮，熔断是防止自己其他服务拖垮","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1639729241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049643,"avatar":"https://static001.geekbang.org/account/avatar/00/10/04/2b/68d6ac0d.jpg","nickname":"whiledoing","note":"","ucode":"1BEB769E13F47C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":183313,"discussion_content":"个人理解：熔断针对服务的质量，限流针对服务的容量。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1582471532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2009734,"avatar":"","nickname":"一墨","note":"","ucode":"2EFB72EEC69FE2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280551,"discussion_content":"我的理解: 消息队列开始有数据积压时限流开始, 消息继续增多导致队列满了之后前端请求超时, 然后可能会出发熔","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591557996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":4134,"user_name":"华烬","can_delete":false,"product_type":"c1","uid":1008444,"ip_address":"","ucode":"D36AE0FBEF665A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/3c/b4cfbce9.jpg","comment_is_top":false,"comment_ctime":1521602610,"is_pvip":false,"replies":[{"id":"941","content":"是的，中间还会有区块链加塞","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1521702693,"ip_address":"","comment_id":4134,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14406504498","product_id":100002201,"comment_content":"期待秒杀的文章，不过好像要等挺久的","like_count":3,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":416218,"discussion_content":"是的，中间还会有区块链加塞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1521702693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":4081,"user_name":"shufang","can_delete":false,"product_type":"c1","uid":1055576,"ip_address":"","ucode":"1F16B2D15E0151","user_header":"","comment_is_top":false,"comment_ctime":1521522004,"is_pvip":false,"replies":[{"id":"1006","content":"我反而觉得熔断是限流的一种😏","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1521906383,"ip_address":"","comment_id":4081,"utype":1}],"discussion_count":9,"race_medal":0,"score":"14406423892","product_id":100002201,"comment_content":"限流看着怎么有点像熔断？","like_count":3,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":416205,"discussion_content":"我反而觉得熔断是限流的一种😏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1521906383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2097065,"avatar":"","nickname":"张维鹏","note":"","ucode":"FB02BCC39FC48F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":539511,"discussion_content":"从概念来理解的话：（1）限流是在服务端实现的，是服务端防止自己被上游服务（也就是客户端）击垮的一种策略。（2）熔断是在客户端实现的，是客户端防止自己被下游服务（也就是服务提供方）拖垮的一种策略。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639733469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":416205,"ip_address":""},"score":539511,"extra":""}]},{"author":{"id":1033748,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/14/3f206319.jpg","nickname":"Finch","note":"","ucode":"627124740E3940","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387054,"discussion_content":"限流相当于调节水龙头的水流大小，那么熔断就是关闭水龙头了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627963697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1114772,"avatar":"https://static001.geekbang.org/account/avatar/00/11/02/94/2bf394f3.jpg","nickname":"Numbpad1","note":"","ucode":"2F075AC7E3847D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1033748,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/14/3f206319.jpg","nickname":"Finch","note":"","ucode":"627124740E3940","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531165,"discussion_content":"很形象的比喻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637243651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387054,"ip_address":""},"score":531165,"extra":"{\"user_type\":1}"},{"author":{"id":1114772,"avatar":"https://static001.geekbang.org/account/avatar/00/11/02/94/2bf394f3.jpg","nickname":"Numbpad1","note":"","ucode":"2F075AC7E3847D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1033748,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/14/3f206319.jpg","nickname":"Finch","note":"","ucode":"627124740E3940","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531167,"discussion_content":"熔断准确的说应该是间歇性关闭水龙头","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637243678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387054,"ip_address":""},"score":531167,"extra":"{\"user_type\":1}"}]},{"author":{"id":1153606,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eonqA0Q15ASerTNtTZSaQmCAtibj6zM2fL8ahAyVTIRPYM2Hm01SQF3icortgDiaDQGRicEb3h5GvHicoA/132","nickname":"jerry","note":"","ucode":"7B10F2103AA15A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300369,"discussion_content":"熔断是有条件的限流，比如基于单位时间失败率等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598065904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216,"discussion_content":"我觉得熔断 限流 并发度控制 都是降级策略的一种 哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561287694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1143767,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqz1bZVBb2NOibN2bbRZhv8alB38W8d7ujib9oPyVBvoQiahtN2OEUicCWFiadtdjCUs8Gkp0IG7KURZzA/132","nickname":"guhowo","note":"","ucode":"5B7FB80766C07E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228270,"discussion_content":"我的理解和皓哥类似，不过我觉得限流是比熔断更激进的一种做法。熔断还有半开状态，限流直接没有请求了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1586529911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":216,"ip_address":""},"score":228270,"extra":""},{"author":{"id":2009734,"avatar":"","nickname":"一墨","note":"","ucode":"2EFB72EEC69FE2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1143767,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqz1bZVBb2NOibN2bbRZhv8alB38W8d7ujib9oPyVBvoQiahtN2OEUicCWFiadtdjCUs8Gkp0IG7KURZzA/132","nickname":"guhowo","note":"","ucode":"5B7FB80766C07E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280553,"discussion_content":"我的理解刚好相反, 觉得熔断之前是限流, 熔断之后变相完成限流","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591558726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":228270,"ip_address":""},"score":280553,"extra":""}]}]},{"had_liked":false,"id":337990,"user_name":"Join","can_delete":false,"product_type":"c1","uid":1014873,"ip_address":"","ucode":"20F51EFFD8FEDE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/59/dc9bbb21.jpg","comment_is_top":false,"comment_ctime":1647224846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10237159438","product_id":100002201,"comment_content":"如果关心代码实现的话,可以去easeegress看ratelimiter的代码。","like_count":2},{"had_liked":false,"id":10792,"user_name":"A圆规","can_delete":false,"product_type":"c1","uid":1145315,"ip_address":"","ucode":"EBDDB592EA1BE4","user_header":"https://static001.geekbang.org/account/avatar/00/11/79/e3/9c84f86e.jpg","comment_is_top":false,"comment_ctime":1527722171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10117656763","product_id":100002201,"comment_content":"最好有代码落地，有点书本。","like_count":2},{"had_liked":false,"id":4105,"user_name":"松花皮蛋me","can_delete":false,"product_type":"c1","uid":1000054,"ip_address":"","ucode":"B0846CEEF6B0D1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/76/256bbd43.jpg","comment_is_top":false,"comment_ctime":1521560769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10111495361","product_id":100002201,"comment_content":"老师好，请问下微信红包退还是怎么设计的，如果使用redis过期通知，订阅者下线再连接期间过期的信息不过再通知","like_count":2},{"had_liked":false,"id":175976,"user_name":"slark","can_delete":false,"product_type":"c1","uid":1143574,"ip_address":"","ucode":"7E8DE962AA23A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/16/595b0342.jpg","comment_is_top":false,"comment_ctime":1580897143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875864439","product_id":100002201,"comment_content":"很好理解<br>首先，限流的目的是为了保护系统不在过载的情况下导致问题。接着讲了几种限流的策略。然后讲了，限流的算法，包括计数器、队列、漏斗和令牌桶。然后讨论了如何基于响应时间来限流。最后，我总结了限流设计的要点。下篇文章中，我们讲述降级设计。希望对你有帮助。","like_count":1},{"had_liked":false,"id":138330,"user_name":"星空下","can_delete":false,"product_type":"c1","uid":1395901,"ip_address":"","ucode":"A15E396D01CB9B","user_header":"https://static001.geekbang.org/account/avatar/00/15/4c/bd/489ee7c1.jpg","comment_is_top":false,"comment_ctime":1570166312,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5865133608","product_id":100002201,"comment_content":"tcp维加斯算法就可以做限流","like_count":1,"discussions":[{"author":{"id":2009734,"avatar":"","nickname":"一墨","note":"","ucode":"2EFB72EEC69FE2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280554,"discussion_content":"TCP Vegas","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591558890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129702,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1567222758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5862190054","product_id":100002201,"comment_content":"限流机制：使用Hystrix的相关配置，只对部分接口进行了限流，没有对所有的接口。比如在一些点赞上加一些限流。直接使用hystrix的相关注解实现。","like_count":1},{"had_liked":false,"id":54906,"user_name":"力挽狂澜爆炸输出的臭臭宁","can_delete":false,"product_type":"c1","uid":1155904,"ip_address":"","ucode":"E8D26181129BCA","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/40/e0df3b84.jpg","comment_is_top":false,"comment_ctime":1545980281,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5840947577","product_id":100002201,"comment_content":"看完后有两个问题：<br>1.漏桶是不是就是一个一级队列？<br><br>2.令牌桶和漏桶有什么实质性的区别？<br>假设处理器的处理速度是100个请求&#47;每秒，所以令牌桶中令牌的投放速度是100个令牌&#47;每秒，假设令牌桶的大小为50，也就是说最多积压50个令牌；<br>假设现在突然流量变大，以300个请求&#47;每秒的速度产生请求；<br>对于漏桶算法，因为出口速度是不变的，所以不论请求速度是多少，处理速度都是100&#47;s；<br>对于令牌桶算法，由于令牌桶中可以积压一定的令牌，所以在流量涌入的第一秒，令牌桶的请求处理速度可以达到150&#47;s，之后都是100&#47;s；<br>这样分析对吗？如果按这样分析的话，令牌桶和漏桶的区别就在于请求涌入的第一秒的处理速度，这个不同有什么意义呢？只在流量涌入的第一秒多处理50个请求能有什么收益呢？","like_count":1,"discussions":[{"author":{"id":1260026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","nickname":"安排","note":"","ucode":"F78CFA9624CAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":98304,"discussion_content":"令牌桶能更好的处理尖峰请求，比如令牌桶最大能积压5000个令牌，处理器每秒最大可以处理500个请求，令牌的放入速度是每秒200个，假设没有尖峰时平均每秒来100个请求，处理器每秒也会处理100个请求，这时的令牌会不停的积累，可能会积累到5000。 这时如果突然来一个10秒的尖峰，每秒来500个请求。这样的话共5000个请求都会被正常处理，不会拒绝。 因为处理器的最大处理能力是每秒500个，而桶中的令牌的个数也足够。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577153656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1154281,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9c/e9/5ba8b1a3.jpg","nickname":"郭新鹏","note":"","ucode":"F9D76691B335FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1260026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","nickname":"安排","note":"","ucode":"F78CFA9624CAEF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":136514,"discussion_content":"那既然知道处理器每秒最大可以处理500个请求，那么直接用Leaky Bucket也可以的呀，也能处理这些请求。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579145160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":98304,"ip_address":""},"score":136514,"extra":""},{"author":{"id":2047980,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/3f/ec/00904faa.jpg","nickname":"连长","note":"","ucode":"555BD3DE57887F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1260026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","nickname":"安排","note":"","ucode":"F78CFA9624CAEF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351532,"discussion_content":"这时如果突然来一个10秒的尖峰，每秒来5000个请求。那岂不是直接挂掉了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614319220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":98304,"ip_address":""},"score":351532,"extra":""}]}]},{"had_liked":false,"id":10763,"user_name":"kuzan","can_delete":false,"product_type":"c1","uid":1006773,"ip_address":"","ucode":"4A6CCE0629D4AE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/b5/0737c1f2.jpg","comment_is_top":false,"comment_ctime":1527690249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5822657545","product_id":100002201,"comment_content":"读两遍，感觉自己之前还是肤浅了","like_count":1},{"had_liked":false,"id":5538,"user_name":"李志博","can_delete":false,"product_type":"c1","uid":1009109,"ip_address":"","ucode":"F3C72573B3C112","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/d5/88beb15a.jpg","comment_is_top":false,"comment_ctime":1523492253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5818459549","product_id":100002201,"comment_content":"期待加防刷设计","like_count":1},{"had_liked":false,"id":5398,"user_name":"昵称","can_delete":false,"product_type":"c1","uid":1025680,"ip_address":"","ucode":"FD6A58AB271E5D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/90/5295fce8.jpg","comment_is_top":false,"comment_ctime":1523277165,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5818244461","product_id":100002201,"comment_content":"文章中一开始提到的limit-req指？","like_count":1,"discussions":[{"author":{"id":1009422,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","nickname":"eason2017","note":"","ucode":"E070BA624FA490","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":114441,"discussion_content":"这是一个模块。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577972155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359964,"user_name":"梅子黄时雨","can_delete":false,"product_type":"c1","uid":1015938,"ip_address":"上海","ucode":"9F788D09C2E9E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/82/3c21b30c.jpg","comment_is_top":false,"comment_ctime":1666092111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666092111","product_id":100002201,"comment_content":"学习了。","like_count":0},{"had_liked":false,"id":319646,"user_name":"方勇(gopher)","can_delete":false,"product_type":"c1","uid":1290625,"ip_address":"","ucode":"D199911C4CFEF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/b1/81/13f23d1e.jpg","comment_is_top":false,"comment_ctime":1635901274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635901274","product_id":100002201,"comment_content":"目前在网关侧设计限流，Kong","like_count":0},{"had_liked":false,"id":235769,"user_name":"罗杰.菲の樂","can_delete":false,"product_type":"c1","uid":2016408,"ip_address":"","ucode":"63590706846EEA","user_header":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","comment_is_top":false,"comment_ctime":1595180380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595180380","product_id":100002201,"comment_content":"我在这里想问一下多租户环境的限流和resource governance的关系？欢迎知道的同学参与讨论。","like_count":0},{"had_liked":false,"id":214407,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1588741815,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1588741815","product_id":100002201,"comment_content":"既然有了传送层 TCP 协议相关的拥塞控制的算法，为啥还要针对基于TCP之上的HTTP做限流？","like_count":0,"discussions":[{"author":{"id":1053503,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/3f/817f380e.jpg","nickname":"June Yuan","note":"","ucode":"2FA00E0A59C659","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310267,"discussion_content":"TCP的拥塞控制是根据网络带宽来调整数据传输速率，应用层的限流是为了保护服务端不被请求打挂掉。因为传输层畅通无阻不代表应用层也能处理得过来。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1601727823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181582,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1582568877,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582568877","product_id":100002201,"comment_content":"耗子叔讲的通俗易懂，还给出了相关算法和扩展资料！非常好，十分感谢！","like_count":0},{"had_liked":false,"id":172285,"user_name":"郭新鹏","can_delete":false,"product_type":"c1","uid":1154281,"ip_address":"","ucode":"F9D76691B335FC","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/e9/5ba8b1a3.jpg","comment_is_top":false,"comment_ctime":1579144488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579144488","product_id":100002201,"comment_content":"自己实现过的限流方式就是用redis进行实现的。<br>$strKey = “limit:qps:” . time();<br>$intQps = $redis-&gt;incr($strKey);<br>判断intQps该值是否大于某个值<br> ","like_count":0},{"had_liked":false,"id":167984,"user_name":"eason2017","can_delete":false,"product_type":"c1","uid":1009422,"ip_address":"","ucode":"E070BA624FA490","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","comment_is_top":false,"comment_ctime":1577972169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577972169","product_id":100002201,"comment_content":"大家好，请教一个关于今天流控，通过队列实现的几个问题：<br>1）如何区分请求是应该放入到哪个队列（高低权重不同的队列）呢？<br>2）队列的消费者是后端服务还是当前这个服务呢？<br>谢谢~~","like_count":0},{"had_liked":false,"id":165260,"user_name":"文刂 氵共 超","can_delete":false,"product_type":"c1","uid":1282813,"ip_address":"","ucode":"C2CE1512D23012","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","comment_is_top":false,"comment_ctime":1577190344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577190344","product_id":100002201,"comment_content":"坚持学习，笔记 https:&#47;&#47;mubu.com&#47;colla&#47;6a5boAX4mdM","like_count":0},{"had_liked":false,"id":159784,"user_name":"junshuaizhang","can_delete":false,"product_type":"c1","uid":1101502,"ip_address":"","ucode":"5734A9BEA03149","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/be/5cf3f1a0.jpg","comment_is_top":false,"comment_ctime":1575788070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575788070","product_id":100002201,"comment_content":"mark","like_count":0},{"had_liked":false,"id":122590,"user_name":"张稀虹","can_delete":false,"product_type":"c1","uid":1000690,"ip_address":"","ucode":"7AD988FE8450E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/f2/e7158fa0.jpg","comment_is_top":false,"comment_ctime":1565429731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565429731","product_id":100002201,"comment_content":"“我们就知道有多少请求大于某个响应时间。如果这个 P90 或 P99 超过我们设定的阈值，那么我们就自动限流。” 这句话中还是提到了一个“阈值”，这个值很难去评估。如果是类似TCP Vegas算法那样，那这个阈值是过去的最小rt，但是实际使用中容易出现误限，在服务无法恢复到之前的最小rt水平时还会导致流量跌零。 老师能否给出一些更具体的实现讲解？","like_count":0},{"had_liked":false,"id":112672,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1562805220,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562805220","product_id":100002201,"comment_content":"限流算法的设计应该在系统设计的早期就引入，它让我们的系统可以以相对较低的成本来应对突发的情况，保证大流量下用户的可用性。<br>限流的策略包括拒绝服务，服务降级，特权服务，服务队列缓存等，这好比我们人对事物的处理，当我们发现自己活太多，活太重时，就只好挑重要的优先的来干，干不过来的就排期留着以后做，实在扛不住就拒绝服务休息一下也是保证不被压垮也是对的。<br>限流的算法包括计数器算法，队列算法，漏斗算法以及限制token算法等<br>","like_count":0,"discussions":[{"author":{"id":1154281,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9c/e9/5ba8b1a3.jpg","nickname":"郭新鹏","note":"","ucode":"F9D76691B335FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":136521,"discussion_content":"限流算法还包括作者按照响应时间的动态限流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579145626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106638,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1561361819,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1561361819","product_id":100002201,"comment_content":"限流应该让后端的服务感知到。限流发生时，我们应该在协议头中塞进一个标识，比如 HTTP Header 中，放入一个限流的级别，告诉后端服务目前正在限流中。这样，后端服务可以根据这个标识决定是否做降级。 -&gt; 难道不是后端服务做限流处理，后端服务先感知到限流操作，可以打标记返回到前端，但是不清楚前端再将标记传回后端有何意义？ ","like_count":0,"discussions":[{"author":{"id":1282813,"avatar":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","nickname":"文刂 氵共 超","note":"","ucode":"C2CE1512D23012","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":98914,"discussion_content":"限流感知应该在中间层吧，做成服务，在后端前","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1577190801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1154281,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9c/e9/5ba8b1a3.jpg","nickname":"郭新鹏","note":"","ucode":"F9D76691B335FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":136535,"discussion_content":"这个有意义，一是知道这个请求是限流的，若A用户频繁刷新，完全可以拒绝掉A用户的请求。二是没有带标记的请求放出。\n\n触发服务限流，可能是用户A、用户B、用户C等等频繁刷新，若向服务端传递标识的话，可以根据这些标识拒绝这些请求，只允许第一次请求过来，就可能会降级总请求量的门槛，从而低于限流的门槛。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579146354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":103427,"user_name":"Brave Shine","can_delete":false,"product_type":"c1","uid":1222003,"ip_address":"","ucode":"CBB1BAF89DB936","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/73/3ddc7c77.jpg","comment_is_top":false,"comment_ctime":1560433214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560433214","product_id":100002201,"comment_content":"令牌桶令我想起了istio限流的quota","like_count":0},{"had_liked":false,"id":101547,"user_name":"golangboy","can_delete":false,"product_type":"c1","uid":1241559,"ip_address":"","ucode":"7632634FB022F5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/OgopVGSkwlFuyHV0hWtzxjEAQ8qhwQuTeY9BdvXDDTj2JH5d9ZI1hJBnlgaoUcKtrceWVlUejJEUdjCjoKSUAQ/132","comment_is_top":false,"comment_ctime":1559867746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559867746","product_id":100002201,"comment_content":"老师，可以说一下dlm锁吗？","like_count":0},{"had_liked":false,"id":98573,"user_name":".","can_delete":false,"product_type":"c1","uid":1004198,"ip_address":"","ucode":"8D9349B9B4C8C4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erxNzrydoXDhk6lx9uYeyEaZAia2vICUdhdP5GNHvtH2DbthnvW7y5UUNP2OtZKK15163xmtQOJ2pg/132","comment_is_top":false,"comment_ctime":1559032879,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559032879","product_id":100002201,"comment_content":"前辈你好：<br>“队列算法<br>在这个算法下，请求的速度可以是波动的，而处理的速度则是非常均速的。这个算法其实有点像一个 FIFO 的算法。”，这段中的“均速”，是不是“匀速”？“均速”也意味着某段时间内的速度是变化的。","like_count":0},{"had_liked":false,"id":89681,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1556243566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556243566","product_id":100002201,"comment_content":"分布式限流可以使用redis-replica, 在请求到来时如果decrease(limit, 1) if limit&gt;0 , 在请求处理完成时increase(limit,1)，这样可以限制任意时间内的并发请求数；","like_count":0},{"had_liked":false,"id":81914,"user_name":"灯火可亲","can_delete":false,"product_type":"c1","uid":1241170,"ip_address":"","ucode":"BBC0FBD8BD4FA4","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/52/2afffb1f.jpg","comment_is_top":false,"comment_ctime":1554082291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554082291","product_id":100002201,"comment_content":"感觉每篇文章更加注重理论 ","like_count":0},{"had_liked":false,"id":65668,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1549550423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549550423","product_id":100002201,"comment_content":"限流-们使用了最简单粗暴的做法-直接拒绝多余的流量。<br>我认为MQ的方式，类似一种带队列的限流方案。","like_count":0},{"had_liked":false,"id":50965,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212634,"ip_address":"","ucode":"7C4DB6D81A48EB","user_header":"https://static001.geekbang.org/account/avatar/00/12/80/da/9c0c458c.jpg","comment_is_top":false,"comment_ctime":1545094090,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545094090","product_id":100002201,"comment_content":"理论，落地还需以后自己去实践。","like_count":0},{"had_liked":false,"id":48345,"user_name":"🔅小风果果","can_delete":false,"product_type":"c1","uid":1027989,"ip_address":"","ucode":"72266A26A7C1A4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/95/211f04ab.jpg","comment_is_top":false,"comment_ctime":1544425806,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544425806","product_id":100002201,"comment_content":"这种算法有现成的可以参考吗？","like_count":0},{"had_liked":false,"id":31673,"user_name":"MatrixCat","can_delete":false,"product_type":"c1","uid":1161982,"ip_address":"","ucode":"E1B324D2956018","user_header":"https://static001.geekbang.org/account/avatar/00/11/ba/fe/7d1366c7.jpg","comment_is_top":false,"comment_ctime":1539260759,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1539260759","product_id":100002201,"comment_content":"有开源限流框架推荐么？","like_count":0,"discussions":[{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217,"discussion_content":"guava RateLimiter","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561287844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292327,"discussion_content":"那个只有令牌桶算法吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595177781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":217,"ip_address":""},"score":292327,"extra":""}]}]},{"had_liked":false,"id":17156,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1532477220,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1532477220","product_id":100002201,"comment_content":"请问漏斗算法是在队列上加一个限流器请问这个限流器是用什么实现的","like_count":0},{"had_liked":false,"id":12885,"user_name":"jackwoo","can_delete":false,"product_type":"c1","uid":1158114,"ip_address":"","ucode":"24B793B4CE6F57","user_header":"https://static001.geekbang.org/account/avatar/00/11/ab/e2/9301850e.jpg","comment_is_top":false,"comment_ctime":1529113384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1529113384","product_id":100002201,"comment_content":"计数器公司有用过，实现起来比较简单","like_count":0}]}