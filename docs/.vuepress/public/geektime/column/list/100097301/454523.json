{"id":454523,"title":"06 | switch表达式：怎么简化多情景操作？","content":"<p>你好，我是范学雷。今天，我们聊一聊Switch表达式。</p><p>switch表达式这个特性，首先在JDK 12中以预览版的形式发布。在JDK 13中，改进的switch表达式再次以预览版的形式发布。最后，switch表达式在JDK 14正式发布。</p><p>不论你学习什么样的编程语言，合理地分析、判断、处理不同的情况都是必备的基本功。比如我们使用的if-else语句，还有switch语句，都是用来处理种种不同的情况的。 我们都知道switch语句，那么switch表达式又是什么呢？switch语句和switch表达式又有什么不同呢？</p><p>如果你了解了Java的语句和表达式这两个基本概念，你的困扰也许会少一点。Java规范里，表达式完成对数据的操作。一个表达式的结果可以是一个数值（i * 4）；或者是一个变量（i = 4）；或者什么都不是（void类型）。</p><p>Java语句是Java最基本的可执行单位，它本身不是一个数值，也不是一个变量。Java语句的标志性符号是分号（代码）和双引号（代码块），比如if-else语句，赋值语句等。这样再来看，就很简单了：switch表达式就是一个表达式，而switch语句就是一个语句。</p><p>switch表达式是什么样子的？为什么需要switch表达式？我们还是通过案例和代码，一点一点地来学习switch表达式吧。</p><!-- [[[read_end]]] --><h2>阅读案例</h2><p>在讲解或者学习switch语句时，每年的十二个月或者每周的七天，是我们经常使用的演示数据。在这个案例里，我们也使用这样的数据，来看看传统的switch语句有哪些需要改进的地方。</p><p>下面，我们要讨论的，也是一个传统的问题:  该怎么用代码计算一个月有多少天？生活中，我们熟悉这样的顺口溜，“一三五七八十腊，三十一天永不差，四六九冬三十整，平年二月二十八，闰年二月把一加”。</p><p>下面的这段代码，就是按照这个顺口溜的逻辑来计算了一下，今天所在的这个月，一共有多少天。</p><pre><code class=\"language-java\">package co.ivi.jus.swexpr.former;\n\nimport java.util.Calendar;\n\nclass DaysInMonth {\n    public static void main(String[] args) {\n        Calendar today = Calendar.getInstance();\n        int month = today.get(Calendar.MONTH);\n        int year = today.get(Calendar.YEAR);\n\n        int daysInMonth;\n        switch (month) {\n            case Calendar.JANUARY:\n            case Calendar.MARCH:\n            case Calendar.MAY:\n            case Calendar.JULY:\n            case Calendar.AUGUST:\n            case Calendar.OCTOBER:\n            case Calendar.DECEMBER:\n                daysInMonth = 31;\n                break;\n            case Calendar.APRIL:\n            case Calendar.JUNE:\n            case Calendar.SEPTEMBER:\n            case Calendar.NOVEMBER:\n                daysInMonth = 30;\n                break;\n            case Calendar.FEBRUARY:\n                if (((year % 4 == 0) &amp;&amp; !(year % 100 == 0))\n                        || (year % 400 == 0)) {\n                    daysInMonth = 29;\n                } else {\n                    daysInMonth = 28;\n                }\n                break;\n            default:\n                throw new RuntimeException(\n                    \"Calendar in JDK does not work\");\n        }\n\n        System.out.println(\n            \"There are \" + daysInMonth + \" days in this month.\");\n    }\n}\n</code></pre><p>这段代码里，我们使用了switch语句。代码本身并没有什么错误，但是，至少有两个容易犯错误的地方。</p><p>第一个容易犯错的地方，就是在break关键字的使用上。上面的代码里，如果多使用一个break关键字，代码的逻辑就会发生变化；同样的，少使用一个break关键字也会出现问题。</p><pre><code class=\"language-java\">int daysInMonth;\nswitch (month) {\n    case Calendar.JANUARY:\n    case Calendar.MARCH:\n    case Calendar.MAY:\n        break;    // WRONG BREAK!!!\n    case Calendar.JULY:\n    case Calendar.AUGUST:\n    case Calendar.OCTOBER:\n    case Calendar.DECEMBER:\n        daysInMonth = 31;\n        break;\n    // snipped\n}\n</code></pre><pre><code class=\"language-java\">int daysInMonth;\nswitch (month) {\n    // snipped\n    case Calendar.APRIL:\n    case Calendar.JUNE:\n    case Calendar.SEPTEMBER:\n    case Calendar.NOVEMBER:\n        daysInMonth = 30;\n                         // WRONG, NO BREAK!!!\n    case Calendar.FEBRUARY:\n        if (((year % 4 == 0) &amp;&amp; !(year % 100 == 0))\n                || (year % 400 == 0)) {\n            daysInMonth = 29;\n        } else {\n            daysInMonth = 28;\n        }\n        break;\n    // snipped\n}\n</code></pre><p>break语句的遗漏或者冗余，这样的错误如此得常见，甚至于被单列成了一个<a href=\"https://cwe.mitre.org/data/definitions/484.html\">常见软件安全漏洞</a>。凡是使用switch语句的代码，都有可能成为黑客们重点关注的对象。由于逻辑的错误和黑客的特殊关照，我们在编写代码的时候，需要十二分的小心；阅读代码的时候，也需要反复地查验break语句的前后语境。毫无疑问，这增加了代码维护的成本，降低了生产效率。</p><p>为什么switch语句里需要使用break呢？最主要的原因，就是希望能够在不同的情况下，共享部分或者全部的代码片段。比如上面的例子中，四月、六月、九月、十一月这四种情景，可以共享每个月都是30天这样的代码片段。这个代码片段只需要写在十一月情景的后面，前面的四月、六月和九月这三个情景都会顺次执行下面的操作（fall-through），直到遇到下一个break语句或者switch语句终结。</p><p>现在我们都知道了，这样是一个弊大于利的设计。但很遗憾，Java初始的设计就是采用了这样的设计思想。如果要新设计一门现代的语言，我们需要更多地使用switch语句，但是就不要再使用break语句了。不过，不同的情景共享代码片段，仍然是一个真实的需求。在废弃掉break语句之前，我们要找到在不同的情景间共享代码片段的新规则。</p><p>第二个容易犯错的地方，是反复出现的赋值语句。 在上面的代码中，<strong>daysInMonth</strong>这个本地变量的变量声明和实际赋值是分开的。赋值语句需要反复出现，以适应不同的情景。如果在switch语句里，<strong>daysInMonth</strong>变量没有被赋值，编译器也不会报错，缺省的或者初始的变量值就会被使用。</p><pre><code class=\"language-java\">int daysInMonth = 0;\nswitch (month) {\n    // snipped\n    case Calendar.APRIL:\n    case Calendar.JUNE:\n    case Calendar.SEPTEMBER:\n    case Calendar.NOVEMBER:\n        break;   // WRONG, INITIAL daysInMonth value IS USED!!!\n    case Calendar.FEBRUARY:\n    // snipped\n}\n</code></pre><p>在上面的例子里，初始的变量值不是一个合适的数据；当然，在另外一个例子里，缺省的或者初始的变量值也可能就是一个合适的数据了。为了判断这个本地变量有没有合适的值，我们需要通览整个switch语句块，确保赋值没有遗漏，也没有多余。这增加了编码出错的几率，也增加了阅读代码的成本。</p><p>那么，能不能让多情景处理的代码块拥有一个数值呢？ 或者换个说法，多情景处理的代码块能不能变成一个表达式？这个想法，就催生了Java语言的新特性：“switch表达式”。</p><h2>switch表达式</h2><p>switch表达式是什么样子的呢？下面的这段代码，使用的就是switch表达式，它改进了上面阅读案例里的代码。你可以带着上面遇到的问题，来阅读这段代码。这些问题包括：</p><ul>\n<li>switch表达式是怎么表示一个数值，从而可以给变量赋值的？</li>\n<li>在不同的情景间，switch表达式是怎么共享代码片段的？</li>\n<li>使用switch表达式的代码，有没有变得更简单、更皮实、更容易理解？</li>\n</ul><pre><code class=\"language-java\">package co.ivi.jus.swexpr.modern;\n\nimport java.util.Calendar;\n\nclass DaysInMonth {\n    public static void main(String[] args) {\n        Calendar today = Calendar.getInstance();\n        int month = today.get(Calendar.MONTH);\n        int year = today.get(Calendar.YEAR);\n\n        int daysInMonth = switch (month) {\n            case Calendar.JANUARY,\n                 Calendar.MARCH,\n                 Calendar.MAY,\n                 Calendar.JULY,\n                 Calendar.AUGUST,\n                 Calendar.OCTOBER,\n                 Calendar.DECEMBER -&gt; 31;\n            case Calendar.APRIL,\n                 Calendar.JUNE,\n                 Calendar.SEPTEMBER,\n                 Calendar.NOVEMBER -&gt; 30;\n            case Calendar.FEBRUARY -&gt; {\n                if (((year % 4 == 0) &amp;&amp; !(year % 100 == 0))\n                        || (year % 400 == 0)) {\n                    yield 29;\n                } else {\n                    yield 28;\n                }\n            }\n            default -&gt; throw new RuntimeException(\n                    \"Calendar in JDK does not work\");\n        };\n\n        System.out.println(\n                \"There are \" + daysInMonth + \" days in this month.\");\n    }\n}\n</code></pre><p><strong>我们最先看到的变化，就是switch代码块出现在了赋值运算符的右侧。</strong>这也就意味着，这个switch代码块表示的是一个数值，或者是一个变量。换句话说，这个switch代码块是一个表达式。</p><pre><code class=\"language-java\">int daysInMonth = switch (month) {\n    // snipped\n}\n</code></pre><p><strong>我们看到的第二个变化，是多情景的合并。也就是说，一个case语句，可以处理多个情景。</strong>这些情景，使用逗号分隔开来，共享一个代码块。而传统的switch代码，一个case语句只能处理一种情景。</p><pre><code class=\"language-java\">case Calendar.JANUARY,\n     Calendar.MARCH,\n     // snipped\n</code></pre><p>多情景的合并的设计，满足了共享代码片段的需求。而且，由于只使用一个case语句，也就不再需要使用break语句来满足这个需求了。所以，break语句从switch表达式里消失了。</p><p>不同之处在于，传统的switch代码，不同的case语句之间可以共享部分的代码片段；而switch表达式里，需要共享全部的代码片段。这看似是一个损失，但其实，共享部分代码片段的能力给代码的编写者带来的困惑远远多于它带来的好处。如果需要共享部分的代码片段，我们总是可以找到替换的办法，比如把需要共享的代码封装成更小的方法。所以，我们没有必要担心switch表达式不支持共享部分代码片段。</p><p><strong>下一个变化，是一个新的情景操作符，“-&gt;”，<strong><strong>它是一个</strong></strong>箭头标识符。这个符号使用在case语句里，一般化的形式是“case L -&gt;”</strong>。这里的L，就是要匹配的一个或者多个情景。如果目标变量和情景匹配，那么就执行操作符右边的表达式或者代码块。如果要匹配的情景有两个或者两个以上，就要使用逗号“,”用分隔符把它们分割开来。</p><pre><code class=\"language-java\">case Calendar.JANUARY,\n     // snipped\n     Calendar.DECEMBER -&gt; 31;\n</code></pre><p>传统的switch代码，这个一般化的形式是“case L ：”，也就是使用冒号标识符。为什么不延续使用传统的情景操作符呢？这主要是出于简化代码的考虑。我们依然可以在switch表达式里使用冒号标识符，使用冒号标识符的一个case语句只能匹配一个情景，这种情况我们稍后再讨论。</p><p><strong>下一个我们看到的变化，是箭头标识符右侧的数值。这个数值，代表的就是该匹配情景下，switch表达式的数值。</strong>需要注意的是，<strong>箭头标识符右侧可以是表达式、代码块或者异常抛出语句，而不能是其他的形式。</strong>如果只需要一个语句，这个语句也要以代码块的形式呈现出来。</p><pre><code class=\"language-java\">case Calendar.JANUARY,\n     // snipped\n     Calendar.DECEMBER -&gt; {  // CORRECT, enclosed with braces.\n    yield 31;\n}\n</code></pre><p>没有以代码块形式呈现的代码，编译的时候，就会报错。这是一个很棒的约束。代码块的形式，增强了视觉效果，减少了编码的失误。在<a href=\"https://time.geekbang.org/column/intro/100019601\">《代码精进之路》</a>这个专栏里，我们反复强调过这种形式的好处。</p><pre><code class=\"language-java\">case Calendar.JANUARY,\n     // snipped\n     Calendar.DECEMBER -&gt;   // WRONG, not a block.\n    yield 31;\n</code></pre><p>另外，箭头标识符右侧需要一个表达switch表达式的数值，这是一个很强的约束。如果一个语句破坏了这个需要，它就不能出现在switch表达式里。比如，下面的代码里的return语句，意图退出该方法，而没有表达这个switch表达式的数值。这段代码就不能通过编译器的审查。</p><pre><code class=\"language-java\">int daysInMonth = switch (month) {\n    // snipped\n    case Calendar.APRIL,\n         // snipped\n         Calendar.NOVEMBER -&gt; {\n        // yield 30;\n        return; // WRONG, return outside of enclosing switch expression.\n    }\n    // snipped\n}\n</code></pre><p><strong>最后一个我们能够看到的变化，是出现了一个新的关键字“yield”</strong>。大多数情况下，switch 表达式箭头标识符的右侧是一个数值或者是一个表达式。 如果需要一个或者多个语句，我们就要使用代码块的形式。这时候，我们就需要引入一个新的 yield 语句来产生一个值，这个值就成为这个封闭代码块代表的数值。</p><p>为了便于理解，我们可以把yield语句产生的值看成是switch表达式的返回值。所以，yield只能用在switch 表达式里，而不能用在switch语句里。</p><pre><code class=\"language-java\">case Calendar.FEBRUARY -&gt; {\n    if (((year % 4 == 0) &amp;&amp; !(year % 100 == 0))\n            || (year % 400 == 0)) {\n        yield 29;\n    } else {\n        yield 28;\n    }\n}\n</code></pre><p><strong>其实，这里还有一个我们从上述的代码里看不到的变化。在switch表达式里，所有的情景都要列举出来，不能多、也不能少（这也就是我们常说的穷举）。</strong></p><p>比如说，在上面的例子里，如果没有最后的default情景分支，编译器就会报错。这是一个影响深远的改进，它会使得switch表达式的代码更加健壮，大幅度降低维护成本，如果未来需要增加一个情景分支的话，就更是如此了。</p><pre><code class=\"language-java\">int daysInMonth = switch (month) {\n    case Calendar.JANUARY,\n         // snipped\n         Calendar.DECEMBER -&gt; 31;\n    case Calendar.APRIL,\n         // snipped\n         Calendar.NOVEMBER -&gt; 30;\n    case Calendar.FEBRUARY -&gt; {\n             // snipped\n    }\n    // WRONG to comment out the default branch, 'switch' expression\n    // MUST cover all possible input values.\n    //\n    // default -&gt; throw new RuntimeException(\n    //        \"Calendar in JDK does not work\");\n};\n</code></pre><h2>改进的switch语句</h2><p>通过上面的解读，我们知道了switch表达式里有很多积极的变化。那这些变化有没有影响switch语句呢？比如说，我们能够在switch语句里使用箭头标识符吗？我们前面说过，yield语句是来产生一个switch表达式代表的数值的，因此yield语句只能用在switch表达式里，不能用在switch语句。</p><p>其他的变化呢？我们还是先来看下面一段代码。</p><pre><code class=\"language-java\">private static int daysInMonth(int year, int month) {\n    int daysInMonth = 0;\n    switch (month) {\n        case Calendar.JANUARY,\n             Calendar.MARCH,\n             Calendar.MAY,\n             Calendar.JULY,\n             Calendar.AUGUST,\n             Calendar.OCTOBER,\n             Calendar.DECEMBER -&gt;\n            daysInMonth = 31;\n        case Calendar.APRIL,\n             Calendar.JUNE,\n             Calendar.SEPTEMBER,\n             Calendar.NOVEMBER -&gt;\n            daysInMonth = 30;\n        case Calendar.FEBRUARY -&gt; {\n            if (((year % 4 == 0) &amp;&amp; !(year % 100 == 0))\n                    || (year % 400 == 0)) {\n                daysInMonth = 29;\n                break;\n            }\n\n            daysInMonth = 28;\n        }\n        // default -&gt; throw new RuntimeException(\n        //        \"Calendar in JDK does not work\");\n    }\n\n    return daysInMonth;\n}\n</code></pre><p>在这段代码里，我们看到了箭头标识符，看到了break语句，看到了注释掉的default语句。这是一段合法的、能够工作的代码。换个说法，switch语句可以使用箭头标识符，也可以使用break语句，也不需要列出所有的情景。表面上看起来，switch语句的改进不是那么显而易见。其实，switch语句的改进主要体现在break语句的使用上。</p><p>我们应该也看到了，break语句没有出现在下一个case语句之前。这也就意味着，使用箭头标识符的switch语句不再需要break语句来实现情景间的代码共享了。虽然我们还可以这样使用break语句，但是已经不再必要了。</p><pre><code class=\"language-java\">switch (month) {\n    // snipped\n    case Calendar.APRIL,\n             // snipped\n         Calendar.NOVEMBER -&gt; {\n            daysInMonth = 30;\n            break;  // UNNECESSARY, could be removed safely.\n        }\n    // snipped\n}\n</code></pre><p>有没有break语句，使用箭头标识符的switch语句都不会顺次执行下面的操作（fall-through）。这样，我们前面谈到的break语句带来的烦恼也就消失不见了。</p><p>不过，使用箭头标识符的switch语句并没有禁止break语句，而是恢复了它本来的意义：从代码片段里抽身，就像它在循环语句里扮演的角色一样。</p><pre><code class=\"language-java\">switch (month) {\n   // snipped\n   case Calendar.FEBRUARY -&gt; {\n        if (((year % 4 == 0) &amp;&amp; !(year % 100 == 0))\n                || (year % 400 == 0)) {\n            daysInMonth = 29;\n            break;     // BREAK the switch statement\n        }\n    \n        daysInMonth = 28;\n    }\n   // snipped\n}\n</code></pre><h2>怪味的switch表达式</h2><p>我们前面说过，switch表达式也可以使用冒号标识符。使用冒号标识符的一个case语句只能匹配一个情景，而且支持fall-through。和箭头标识符的switch表达式一样，使用冒号标识符switch表达式也不支持break语句，取而代之的是yield语句。</p><p>这是一个充满了怪味道的编码形式，我并不推荐使用这种形式，但我可以带你略作了解。下面的这段代码，就是我们试着把箭头标识符替换成冒号标识符的一个例子。你可以比较一下使用冒号标识符和箭头标识符的两段代码，想一想两种不同形式的优劣。毫无疑问，使用箭头标识符的代码更加简洁。</p><pre><code class=\"language-java\">package co.ivi.jus.swexpr.legacy;\n\nimport java.util.Calendar;\n\nclass DaysInMonth {\n    public static void main(String[] args) {\n        Calendar today = Calendar.getInstance();\n        int month = today.get(Calendar.MONTH);\n        int year = today.get(Calendar.YEAR);\n\n    int daysInMonth = switch (month) {\n        case Calendar.JANUARY:\n        case Calendar.MARCH:\n        case Calendar.MAY:\n        case Calendar.JULY:\n        case Calendar.AUGUST:\n        case Calendar.OCTOBER:\n        case Calendar.DECEMBER:\n            yield 31;\n        case Calendar.APRIL:\n        case Calendar.JUNE:\n        case Calendar.SEPTEMBER:\n        case Calendar.NOVEMBER:\n            yield 30;\n        case Calendar.FEBRUARY:\n            if (((year % 4 == 0) &amp;&amp; !(year % 100 == 0))\n                    || (year % 400 == 0)) {\n                yield 29;\n            } else {\n                yield 28;\n            }\n        default:\n            throw new RuntimeException(\n                    \"Calendar in JDK does not work\");\n        };\n\n        System.out.println(\n            \"There are \" + daysInMonth + \" days in this month.\");\n    }\n}\n</code></pre><p>有了使用箭头标识符的switch语句和switch表达式之后，我们不再推荐使用冒号标识符的switch语句和switch表达式。学习并使用箭头标识符的switch语句和switch表达式，会使代码更简洁、更健壮。</p><h2>总结</h2><p>好，到这里，我来做个小结。从前面的讨论中，我们重点了解了switch表达式和改进的switch语句。我们还讨论了switch表达式带来的新概念和新的关键字，了解了这些基本概念以及它们的适用范围。</p><p>新的switch形式、语句和表达式，不同的使用范围，这些概念交织在一起，让switch的学习和使用都变成了一件有点挑战性的事情。箭头标识符的引入，简化了代码，提高了编码效率。可是，学习这么多种switch的表现形式，也增加了我们的学习负担。为了帮助你快速掌握这些形式，我把不同的switch表达形式，以及它们支持的特征，放在了下面这张表格里。</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/09/8ea744fd05104e66703f4c24a72ddd09.jpg?wh=1920x991\" alt=\"图片\"></p><p>或者，你也可以记住下面的总结：</p><ul>\n<li>break语句只能出现在switch语句里，不能出现在switch表达式里；</li>\n<li>yield语句只能出现在switch表达式里，不能出现在switch语句里；</li>\n<li>switch表达式需要穷举出所有的情景，而switch语句不需要情景穷举；</li>\n<li>使用冒号标识符的swtich形式，支持情景间的fall-through；而使用箭头标识符的swtich形式不支持fall-through；</li>\n<li>使用箭头标识符的swtich形式，一个case语句支持多个情景；而使用冒号标识符的swtich形式不支持多情景的case语句。</li>\n</ul><p>使用箭头标识符的swtich形式，废止了容易出问题的fall-through这个特征。因此，我们推荐使用箭头标识符的swtich形式，逐步废止使用冒号标识符的swtich形式。在switch表达式和switch语句之间，我们应该优先使用switch表达式。这些选择，都可以帮助我们简化代码逻辑，减少代码错误，提高生产效率。</p><p>如果你要丰富你的代码评审清单，学习完这一节内容后，你可以加入下面这一条：</p><blockquote>\n<p>使用冒号标识符的swtich形式，是不是可以更改为使用箭头标识符？<br>\n使用switch语句赋值的操作，是不是可以更改为使用switch表达式？</p>\n</blockquote><p>另外，我还拎出了几个今天讨论过的技术要点，这些都可能在你们面试中出现哦。通过这一次学习，你应该能够：</p><ul>\n<li>知道switch表达式，并且能够使用switch表达式；\n<ul>\n<li>面试问题：你知道switch表达式吗？该怎么处理switch表达式里的语句？</li>\n</ul>\n</li>\n<li>了解switch表达式要解决的问题，并且知道解决掉这些问题的办法；\n<ul>\n<li>面试问题：使用switch表达式有哪些好处？</li>\n</ul>\n</li>\n<li>了解不同的switch的表现形式，能够看得懂不同的表现形式，并且给出改进意见。\n<ul>\n<li>面试问题：你更喜欢使用箭头标识符还是冒号标识符？</li>\n</ul>\n</li>\n</ul><p>如果你能够有意识地使用箭头标识符的switch表达式，应该可以大幅度提高编码的效率和质量；如果你能够了解不同的switch表现形式，并且对每种形式都有自己的见解，你就能帮助你的同事提高编码的效率和质量。毫无疑问，在面试的时候，有意识地在代码里使用switch表达式，是一个能够展现你的学习能力、理解能力和对新知识的接受能力的一个好机会。</p><h2>思考题</h2><p>在前面的讨论里，我们说过情景穷举是一个影响深远的改进方向，它会使得switch表达式的代码更加健壮，大幅度降低维护成本，特别是在未来需要增加一个情景分支的情形下。但是，限于篇幅，我们并没有详细地展开讨论其中的细节。现在，我们把这个讨论当作一个稍微有点挑战的思考题。</p><p>假设有一天，地球和太阳的关系发生了变化，这种变化还没有大到毁灭人类的程度，但是也足以改变年月的关系了。于是，天文学家重新修订了日历，增加了一个新的月份，第十三个月。为了对应这种变化，JDK的设计者们也给Calendar类增加了第十三个月：Calendar.AFTERDEC。那么，我们的问题就来了。</p><p>第一个问题是，我们现在的代码能够检测到这个变化吗？如果不能，是不是只有系统崩溃的时候，我们才能够意识到问题的存在？</p><p>第二个问题是，有没有更健壮的设计，能够帮助我们在系统崩溃之前就能够检测到这个意想不到的变化？从而给我们留出时间更改我们的代码和系统？</p><p>稍微提示一个，解决这个问题的其中一个思路，就是要使用有穷举能力的表达式，然后设计出可以表达穷举情景的新形式，而不是使用泛泛的整数来表达十二个月。</p><p>我在下面的例子中写了一个代码小样。这个代码小样，实现的还是一年只有十二个月的逻辑。现在我们假设，一年还是十二个月，但是我们想让这段代码健壮到能够检测到未来一年变成十一个月或者十三个月的情景。</p><p>在这个代码小样里，我也试着加入了一些提示。当然，你也可以试着找找其他的解决方案。请试着将这段代码修改成你喜欢的样子，让我们一起看看怎么解决掉这个问题。</p><pre><code class=\"language-java\">package co.ivi.jus.swexpr.review.xuelei;\n\nimport java.util.Calendar;\n\nclass DaysInMonth {\n    public static void main(String[] args) {\n        Calendar today = Calendar.getInstance();\n        int month = today.get(Calendar.MONTH);\n        int year = today.get(Calendar.YEAR);\n\n    // Hints: could we replace the integer month\n    // with an exhaustive enumeration?\n    int daysInMonth = switch (month) {\n            case Calendar.JANUARY,\n                 Calendar.MARCH,\n                 Calendar.MAY,\n                 Calendar.JULY,\n                 Calendar.AUGUST,\n                 Calendar.OCTOBER,\n                 Calendar.DECEMBER -&gt; 31;\n            case Calendar.APRIL,\n                 Calendar.JUNE,\n                 Calendar.SEPTEMBER,\n                 Calendar.NOVEMBER -&gt; 30;\n            case Calendar.FEBRUARY -&gt; {\n                if (((year % 4 == 0) &amp;&amp; !(year % 100 == 0))\n                        || (year % 400 == 0)) {\n                    yield 29;\n                } else {\n                    yield 28;\n                }\n            }\n            // Hints: Are we able to replace the default case by\n            // enumerating all cases with case clause above?\n            default -&gt; throw new RuntimeException(\n                    \"Calendar in JDK does not work\");\n        };\n\n        System.out.println(\n            \"There are \" + daysInMonth + \" days in this month.\");\n    }\n}\n</code></pre><p>欢迎你在留言区留言、讨论，分享你的阅读体验以及你对这个思考题的想法。</p><p>注：本文使用的完整的代码可以从<a href=\"https://github.com/XueleiFan/java-up/tree/main/src/main/java/co/ivi/jus/swexpr\">GitHub</a>下载，你可以通过修改<a href=\"https://github.com/XueleiFan/java-up/tree/main/src/main/java/co/ivi/jus/instance\">GitHub</a>上<a href=\"https://github.com/XueleiFan/java-up/blob/main/src/main/java/co/ivi/jus/swexpr/review/xuelei/DaysInMonth.java\">review template</a>代码，完成这次的思考题。如果你想要分享你的修改或者想听听评审的意见，请提交一个 GitHub的拉取请求（Pull Request），并把拉取请求的地址贴到留言里。这一小节的拉取请求代码，请在<a href=\"https://github.com/XueleiFan/java-up/blob/main/src/main/java/co/ivi/jus/swexpr/review\">实例匹配专用的代码评审目录</a>下，建一个以你的名字命名的子目录，代码放到你专有的子目录里。比如，我的代码，就放在swexpr/review/xuelei的目录下面。</p>","neighbors":{"left":{"article_title":"05 | 类型匹配：怎么切除臃肿的强制转换？","id":449798},"right":{"article_title":"07 | switch匹配：能不能适配不同的类型？","id":460478}},"comments":[{"had_liked":false,"id":324342,"user_name":"fatme","can_delete":false,"product_type":"c1","uid":1034451,"ip_address":"","ucode":"75A805D2BB2AD1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c8/d3/3020ae46.jpg","comment_is_top":false,"comment_ctime":1638375961,"is_pvip":false,"replies":[{"id":"117714","content":"不谢。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1638416933,"ip_address":"","comment_id":324342,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10228310553","product_id":100097301,"comment_content":"终于明白思考题的思路，原来是要在编译期暴露出问题。这种思路，即使是对 jdk 8 以下也是有用的，只不过是不像 switch 表达式一样有语言本身的帮助。又学了一招，谢谢老师！","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535354,"discussion_content":"不谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638416933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323514,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1637942018,"is_pvip":false,"replies":[{"id":"117419","content":"“就三行代码，提pr有点太寒酸了”，多小的改动都不会显得寒酸。任何一个开源社区，都需要很多小的改动。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1637988150,"ip_address":"","comment_id":323514,"utype":1}],"discussion_count":5,"race_medal":0,"score":"10227876610","product_id":100097301,"comment_content":"第一个问题是: 我们现在的代码能够检测到这个变化吗？如果不能，是不是只有系统崩溃的时候，我们才能够意识到问题的存在？<br><br>答: 如果是新增的月份现在的设计只能抛出异常,提醒我们修改代码.如果是减少了月份,在未更新JDK的情况下,代码正常运行.另外: JDK并非强更新,有些用户并不会频繁更新JDK,在我接触的一些项目,甚至还在使用JDK1.6,因此对于新特性和漏洞的修复,反应很迟缓.<br><br>第二个问题是，有没有更健壮的设计，能够帮助我们在系统崩溃之前就能够检测到这个意想不到的变化？从而给我们留出时间更改我们的代码和系统？<br><br>答: 持续关注JDK漏洞修复和版本发布,及时升级.这样所遇到的错误会第一时间反馈给我们,以留给我们修复问题的时间.<br><br><br>题外话,本来准备用java.time.LocalDate重写一下获取月份天数,想提交一个pr.发现用LocalDate来写,就三行代码.提pr有点太寒酸了,就发在这把(笑~)<br><br>import java.time.LocalDate;<br><br>var localDate=LocalDate.now();<br>&#47;&#47; 判断是否为闰年.<br>var isleapYear=localDate.isLeapYear();<br>System.out.println(localDate.getMonth().length(isleapYear));<br><br>下面这段代码来自java.time.Month.class,这样判断感觉:<br><br> public int length(boolean leapYear) {<br>        switch (this) {<br>            case FEBRUARY:<br>                return (leapYear ? 29 : 28);<br>            case APRIL:<br>            case JUNE:<br>            case SEPTEMBER:<br>            case NOVEMBER:<br>                return 30;<br>            default:<br>                return 31;<br>        }<br>    }<br><br>可以改写为:<br><br>public int length(boolean leapYear) {<br>        return switch (this) {<br>            case FEBRUARY -&gt; (leapYear ? 29 : 28);<br>            case APRIL,<br>                 JUNE,<br>                 SEPTEMBER,<br>                 NOVEMBER -&gt; 30;<br>            default -&gt; 31;<br>        };<br>    }","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533836,"discussion_content":"“就三行代码，提pr有点太寒酸了”，多小的改动都不会显得寒酸。任何一个开源社区，都需要很多小的改动。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637988150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1054958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","nickname":"ABC","note":"","ucode":"7501AD9C0C4A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":533855,"discussion_content":"好的老师,晚点提交一个pr.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637994227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":533836,"ip_address":""},"score":533855,"extra":""},{"author":{"id":1054958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","nickname":"ABC","note":"","ucode":"7501AD9C0C4A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":533886,"discussion_content":"https://github.com/XueleiFan/java-up/pull/13","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638007325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":533836,"ip_address":""},"score":533886,"extra":""}]},{"author":{"id":1784474,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3a/9a/8b6aaa39.jpg","nickname":"黑","note":"","ucode":"96D0F91F8A6FCA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535589,"discussion_content":"这种修改有个bug。如果加入了13月。默认了13月有了31天😂。不合理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638492703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534044,"discussion_content":"嗯，我还以为你要给OpenJDK提交一个PR呢。咱们自己的类库也欢迎啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638077000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323432,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1637901434,"is_pvip":false,"replies":[{"id":"117337","content":"好看就是生产力！","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1637905630,"ip_address":"","comment_id":323432,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10227836026","product_id":100097301,"comment_content":"-&gt;好用很多，switch 变好看了","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533559,"discussion_content":"好看就是生产力！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637905630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323421,"user_name":"猿人谷","can_delete":false,"product_type":"c1","uid":1100149,"ip_address":"","ucode":"85106C7FB14C43","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/75/62ce2d69.jpg","comment_is_top":false,"comment_ctime":1637896139,"is_pvip":true,"replies":[{"id":"117338","content":"它应该是我们以后使用switch的标准。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1637905740,"ip_address":"","comment_id":323421,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10227830731","product_id":100097301,"comment_content":"这个新特性看着很不错！","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533560,"discussion_content":"它应该是我们以后使用switch的标准。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637905740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359147,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1665289655,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665289655","product_id":100097301,"comment_content":"学习打卡","like_count":0},{"had_liked":false,"id":345239,"user_name":"自然","can_delete":false,"product_type":"c1","uid":1181887,"ip_address":"","ucode":"EDFC3EFAB0B88E","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/bf/cd6bfc22.jpg","comment_is_top":false,"comment_ctime":1652152330,"is_pvip":false,"replies":[{"id":"126239","content":"可以使用return的类比来理解。只是，返回的是表达式的值，而不是退出一个方法。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1652714440,"ip_address":"","comment_id":345239,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652152330","product_id":100097301,"comment_content":"这里的 yield  ，仅是 类似return的功能么？还是有多线程里的 yield 含义和用处？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572346,"discussion_content":"可以使用return的类比来理解。只是，返回的是表达式的值，而不是退出一个方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652714440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327995,"user_name":"第二少","can_delete":false,"product_type":"c1","uid":1004264,"ip_address":"","ucode":"4A09D1E7589F67","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/e8/92a2e66d.jpg","comment_is_top":false,"comment_ctime":1640441520,"is_pvip":true,"replies":[{"id":"119423","content":"idea是个很好的工具。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1640480021,"ip_address":"","comment_id":327995,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640441520","product_id":100097301,"comment_content":"关于本讲思考题，如果要在编译期间检测出Calendar类增加了第十三个月，关键就是要有一种机制能穷举Calendar类里面定义的所有月份，比如可以用枚举来实现预定义的月份，就可以穷举了；然后对于 switch(x),只要 x 对应的值是可穷举的，那么jdk 17的编译器已经支持检查 x 对应的值在case里有没有全部被覆盖了，如果没有全部覆盖，就会报编译错误：<br><br>java: switch 表达式不包含所有可能的输入值<br><br>如果是在ide里，不需要手动执行编译，就会有错误提示；如果编译器本身不支持做这种检查，那也可以充分利用ide来检查错误，比如IntellJ IDEA,可以自定义对应的inspections来做到这一点","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541594,"discussion_content":"idea是个很好的工具。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640480022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325674,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1639096323,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1639096323","product_id":100097301,"comment_content":"<br>文末的表格和总结太棒了！<br>另：我在 Java 8 中几乎不再使用 Calendar 类了。","like_count":0},{"had_liked":false,"id":323540,"user_name":"xiaobang","can_delete":false,"product_type":"c1","uid":1157508,"ip_address":"","ucode":"1735BDCFD61655","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg","comment_is_top":false,"comment_ctime":1637980342,"is_pvip":false,"replies":[{"id":"117430","content":"是的，如果月份的API重新设计的话，一定是使用枚举而不是整数来表达。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1638053386,"ip_address":"","comment_id":323540,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637980342","product_id":100097301,"comment_content":"第二个问题，感觉可以用枚举类型来表示月份，这样switch表达式检查到没有穷举到全部值<br>","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533980,"discussion_content":"是的，如果月份的API重新设计的话，一定是使用枚举而不是整数来表达。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638053386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323495,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1637932676,"is_pvip":false,"replies":[{"id":"117418","content":"“综合能力 Go 的更灵活”，该怎么理解？从你给出的例子没有看出来。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1637987974,"ip_address":"","comment_id":323495,"utype":1}],"discussion_count":7,"race_medal":0,"score":"1637932676","product_id":100097301,"comment_content":"今天《极客时间》两个专栏同时更新，主题都是 switch<br><br>- 《深入剖析 Java 新特性》06 | Switch表达式：怎么简化多情景操作？<br>- 《Tony Bai · Go 语言第一课》20｜控制结构：Go中的switch语句有哪些变化？<br><br>对比结果<br><br>- Java17 居然可以比 Go 简洁！<br>- 但然综合能力 Go 的更灵活<br><br><br>Java17 switch<br><br>```java<br>String checkWorkday(int day) {<br>\treturn switch (day) {<br>\t\tcase 1, 2, 3, 4, 5 -&gt; &quot;it is a work day&quot;;<br>\t\tcase 6, 7 -&gt; &quot;it is a weekend day&quot;;<br>\t\tdefault -&gt; &quot;are you live on earth&quot;;<br>\t};<br>}<br>```<br><br>Go switch<br><br>```go<br>func checkWorkday(day int) string {<br>\tswitch day {<br>\tcase 1, 2, 3, 4, 5:<br>\t\treturn &quot;it is a work day&quot;<br>\tcase 6, 7:<br>\t\treturn &quot;it is a weekend day&quot;<br>\tdefault:<br>\t\treturn &quot;are you live on earth&quot;<br>\t}<br>}<br>```","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533834,"discussion_content":"“综合能力 Go 的更灵活”，该怎么理解？从你给出的例子没有看出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637987974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":4,"child_discussions":[{"author":{"id":1054958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","nickname":"ABC","note":"","ucode":"7501AD9C0C4A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":533854,"discussion_content":"我的理解:他的意思是换成数字更灵活一些?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637994194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":533834,"ip_address":""},"score":533854,"extra":""},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":534211,"discussion_content":"1：支持复杂的结构体\n2：支持不同的类型\n原文：https://time.geekbang.org/column/article/455912\n详见代码：\n\n例1\ntype person struct {\n    name string\n    age  int\n}\n\nfunc main() {\n    p := person{&#34;tom&#34;, 13}\n    switch p {\n    case person{&#34;tony&#34;, 33}:\n        println(&#34;match tony&#34;)\n    case person{&#34;tom&#34;, 13}:\n        println(&#34;match tom&#34;)\n    case person{&#34;lucy&#34;, 23}:\n        println(&#34;match lucy&#34;)\n    default:\n        println(&#34;no match&#34;)\n    }\n}\n\n例2\nfunc main() {\n    var x interface{} = 13\n    switch v := x.(type) {\n    case nil:\n        println(&#34;v is nil&#34;)\n    case int:\n        println(&#34;the type of v is int, v =&#34;, v)\n    case string:\n        println(&#34;the type of v is string, v =&#34;, v)\n    case bool:\n        println(&#34;the type of v is bool, v =&#34;, v)\n    default:\n        println(&#34;don&#39;t support the type&#34;)\n    }\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638124015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":533834,"ip_address":""},"score":534211,"extra":""},{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534214,"discussion_content":"明白了，我们还有第七讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638140729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534211,"ip_address":""},"score":534214,"extra":""}]},{"author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/e24e181e.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533934,"discussion_content":"我也同时在学这两门课，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638025614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1603004,"avatar":"https://static001.geekbang.org/account/avatar/00/18/75/bc/e24e181e.jpg","nickname":"Calvin","note":"","ucode":"0EEF5B207623B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534293,"discussion_content":"真巧！我猜你也主要写Java","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638156446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":533934,"ip_address":""},"score":534293,"extra":""}]}]},{"had_liked":false,"id":323483,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1637923372,"is_pvip":false,"replies":[{"id":"117395","content":"1. 如果反对的声音再多一点， 这个冒号的表达式形式可能就没了。<br><br>2. 需要和冒号的形式区别开来。<br><br>3. 能够支持有限的表达式啊。 再看看下一讲吧， 里边有相关的话题。","user_name":"作者回复","user_name_real":"作者","uid":"1111315","ctime":1637942415,"ip_address":"","comment_id":323483,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637923372","product_id":100097301,"comment_content":"1.既然知道是一个弊大于利的方案，为何 switch表达式 还要使用 冒号标识符 来保留fall-through的模式？ switch表达式 区别于  switch语句，可没有兼容问题。<br>2.猜测使用 -&gt; 而不是 : 。应该是为了区别 switch语句 : 的语义，同时对称 Lambda 风格的表达方式。<br>3. switch语句 本身好像直接被归为坏味道，不建议使用（eff里看到的还是哪，忘了）。建议直接用 if卫语句&#47;map策略模式 来替换。 switch表达式 从使用上来看，个人觉得语义上比 if卫语句&#47;map策略模式都要清晰，使用这个写法可以提高阅读效率。唯一可惜的是case后面无法支持表达式，所以实际使用场景就会很受限（这个适用范围也跟编码设计能力有关，要用还是可以用的，只是没有支持表达式来的简单易用）。<br><br>课后题：<br>1.不能，第十三个月会获取不到天数，这好像不算是系统崩溃，只能说出bug才知道。<br>2.在 DaysInMonth 追加一个 一个 static 代码块(方法有很多)，校验日期枚举实例是否超过12，超过告警。 这样至少在项目启动能感知到。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533759,"discussion_content":"1. 如果反对的声音再多一点， 这个冒号的表达式形式可能就没了。\n\n2. 需要和冒号的形式区别开来。\n\n3. 能够支持有限的表达式啊。 再看看下一讲吧， 里边有相关的话题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637942415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323424,"user_name":"大胖子呀、","can_delete":false,"product_type":"c1","uid":1258251,"ip_address":"","ucode":"4BADF8096254BE","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/0b/fd18c8ab.jpg","comment_is_top":false,"comment_ctime":1637896390,"is_pvip":false,"replies":[{"id":"117336","content":"1. 多一个月检测到的方式是运行时抛出异常，这需要测试代码的配合，不能等到实际运行阶段。少一个月份，通常这个月份，比如FEBRUARY，就会从API里删除掉，这样编译时就可以检测出来了。<br><br>2. 你的疑问可以通过自己进一步的假设解决，你可以使用30&amp;#47;31&amp;#47;28，或者另外的一个你喜欢的数。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1637905607,"ip_address":"","comment_id":323424,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637896390","product_id":100097301,"comment_content":"第一个问题，目前的程序可以检测到多了一个月份，会通过最后的default语句抛出异常，但是检测不到少了一个月份；<br>第二个问题，我想着是否可以在default表达式里，通过遍历Calendar枚举的元素，去匹配出Calendar.AFTERDEC，但是我有疑问的是：月份多出了一个月，它的出现是否会导致已有月份的计算方式的改变？它的计算方式是按照31、30天，还是按照2月份，又或者是一个崭新的计算方式？这一块我确实不知道该如何在代码中实现，求老师指点。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533558,"discussion_content":"1. 多一个月检测到的方式是运行时抛出异常，这需要测试代码的配合，不能等到实际运行阶段。少一个月份，通常这个月份，比如FEBRUARY，就会从API里删除掉，这样编译时就可以检测出来了。\n\n2. 你的疑问可以通过自己进一步的假设解决，你可以使用30&amp;#47;31&amp;#47;28，或者另外的一个你喜欢的数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637905607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}