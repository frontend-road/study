{"id":240749,"title":"02 | 分离关注点：软件设计至关重要的第一步","content":"<p>你好！我是郑晔。</p><p>上一讲我们讲了软件开发就是在解决问题。那问题一般是如何解决的呢？最常见的解决问题思路是<strong>分而治之</strong>，也就是说，我们要先把问题拆分开。在每个问题都得到解决之后，再把这些解决好的子问题以恰当的方式组装起来。如何分解与组合，就是我们要在软件设计中考虑的问题。</p><p>然而，在软件设计这个环节中，大部分人都把焦点放在了如何组合上，却忽略了至关重要的第一步：分解。你可能会觉得：“分解？我会啊，不就是把一个大系统拆成若干个子系统，再把子系统再拆成若干个模块，一层一层拆下去嘛。”</p><p>然而，在我看来，这种程度的分解远远不够，因为分解出来的粒度太大了。<strong>粒度太大会造成什么影响呢？<strong><strong>这会导致我们</strong></strong>把不同的东西混淆在一起</strong>，为日后埋下许多隐患。</p><p>为什么这么说呢？我来给你举个例子。</p><h2>一个失败的分解案例</h2><p>我曾经见过一个故障频出的清结算系统，它的主要职责是执行清结算。一开始我觉得，清结算系统是一个业务规则比较多的系统，偶尔出点故障，也是情有可原。</p><p>但是在分析了这个系统的故障报告后，我们发现这个系统设计得极其复杂。其中有一处是这样的：上游系统以推送的方式向这个系统发消息。在原本的实现中，开发人员发现这个过程可能会丢消息，于是，他们设计了一个补偿机制。</p><!-- [[[read_end]]] --><p>因为推送过来的数据是之前由这个系统发出去的，它本身有这些数据的初始信息，于是，开发人员就在数据库里增加了一个状态，记录消息返回的情况。一旦发现丢消息了，这个系统就会访问上游系统的接口，将丢失的数据请求回来。</p><p>正是这个补偿机制的设计，带来了一系列的后续问题。比如，当系统业务量增加的时候，数据库访问的压力本身就很大，但在这种场景下，丢数据的概率也增加了，用于补偿的线程也会频繁访问数据库，因为它要找出丢失的数据，还要把请求回来的数据写回到数据库里。</p><p>也就是说，一旦业务量上升，本来就已经很吃力的系统，它的负担就更重了，系统出现卡顿也就在所难免了。</p><p>这个补偿机制的设计是有问题的，问题的点在于，上游系统向下游推送消息，这应该是一个通信层面的问题。而在原有的设计中，因为那个状态的添加，这个问题被带到了业务层面。</p><p>这就是一个典型的分解没有做好的例子，是分解粒度太大造成的。开发人员只考虑了业务功能，忽视其他维度。<strong>技术和业务被混在了一起，随之而来的就是无尽的后患。</strong></p><p>一旦理解了这一点，我们就可以想办法解决了。既然是否丢消息是通信层面的事，我们就争取在通信层面解决它。我们当时的解决方案是，选择了一个吞吐量更大的消息队列。在未来可见的业务量下，消息都不会丢。<strong>通信层面的问题在通信层面解决了，业务层面也就不会受到影响了</strong>。果不其然，这样改造之后，系统的稳定性得到了大幅度的提升。</p><p>上面我只讲了这个故事的主线，其实，相关的事情还有一些。比如，上游系统专门为补偿而开发的接口，现在也不需要了，于是上游系统得到了简化；这个系统里那个表示状态的字段，其实还被用在了业务处理中，也引发过其他问题，现在它只用在业务处理中，角色单一了，与此相关的问题也少了。</p><h2>分离关注点</h2><p>至此，我们已经对分解粒度太大所造成的影响，有了一个初步的了解。那在做设计时，该如何考虑分解呢？传统上，我们习惯的分解问题的方式是树型的。比如，按功能分解，可分为：功能1、功能2、功能3，等等，然后，每个功能再分成功能1.1、功能1.2、功能2.1、功能3.1等等，以此类推。</p><p><img src=\"https://static001.geekbang.org/resource/image/d4/9b/d439cc19ef775ea53b7809737609f59b.jpg?wh=2248*1232\" alt=\"\"></p><p>如果只从业务上看，这似乎没什么问题。但我们要实现一个真实的系统，就不仅仅要考虑功能性的需求，还要考虑非功能性的需求。比如，前面提到的数据不能丢失、有的系统还要求处理速度要快，等等。</p><p>这与业务并不是一个维度的事情，我们在做设计时，要能够发现这些非功能性的需求。也就是说，我们在分解问题的时候，会有很多维度，每一个维度都代表着一个关注点，这就是设计中一个常见的说法，“<strong>分离关注点（Separation of concerns）</strong>”。</p><p>可以分离的关注点有非常多，你只要稍微注意一下，就能识别出来。但还有一些你可能注意不到，结果导致了混淆。最常见的一类问题就是<strong>把业务处理和技术实现两个关注点混在了一起</strong>，前面举的那个例子就是一个典型。</p><p>对于“把业务处理和技术实现混在一起”的问题，我再给你举个例子。如果现在业务的处理性能跟不上，你有什么办法解决吗？大多数程序员的第一反应是，多线程啊！</p><p>没错，多线程的确是一种解决办法。但如果不加限制地让人去把这段代码改成多线程的，一些多线程相关的问题也会随之而来。比如，让人头疼的资源竞争、数据同步等等。</p><p>写好业务规则和正确地处理多线程，这是两个不同的关注点。如果我们把二者放到同一段代码里去写，彼此影响也就在所难免了。问题说明白了，解决方案才能清楚，那就是把业务处理和多线程处理的代码分开。</p><p>按照我的理解，<strong>大部分程序员都不应该编写多线程程序</strong>。由专门的程序员把并发处理的部分封装成框架，大家在里面写业务代码就好了。</p><p>把业务处理和技术实现混在一起，类似问题还有很多。比如我们经常问怎么处理分布式事务，怎么做分库分表等。其实，你更应该问的是，我的业务需要分布式事务吗？我是不是业务划分没有做清楚，才造成了数据库的压力？</p><p>在真实项目中，程序员最常犯的错误就是认为所有问题都是技术问题，总是试图用技术解决所有问题。<strong>任何试图用技术去解决其<strong><strong>他</strong></strong>关注点的问题，只能是陷入焦油坑之中，越挣扎，陷得越深。</strong></p><p>另外一个常见的容易产生混淆的关注点是<strong>不同的数据变动方向</strong>。</p><p>有人问过我这样一个问题：在Java应用里，做数据库访问用Spring Data JPA好，还是MyBatis好。Spring Data JPA简化了数据库访问，自动生成对应的SQL语句，而MyBatis则要自己手写SQL。</p><p>普通的增删改查用Spring Data JPA非常省事，但对于一些复杂场景，他会担心自动生成SQL的性能有问题，还是手写SQL优化来得直接。是不是挺纠结的？</p><p>随即我又问了他一个问题，为什么需要复杂查询呢？他告诉我，有一些统计报表需要。</p><p>不知道你是否发现了其中混淆关注点的地方？普通的增删改查需要经常改动数据库，而复杂查询的使用频率其实是很低的。</p><p>从本质上说，之所以出现工具选择的困难，是因为他把两种数据使用频率不同的场景混在一起所造成的。如果将前台访问（处理增删改查）和后台访问（统计报表）分开，纠结也就不复存在了。</p><p>不同的数据变动方向还有很多，比如：</p><ul>\n<li>动静分离，就是把变和不变的内容分开；</li>\n<li>读写分离，就是把读和写分开；</li>\n<li>前面提到的高频和低频，也可以分解开；</li>\n<li>……</li>\n</ul><p><strong>不同的数据变动方向，就是一个潜在的、可以分离的关注点。</strong></p><p>在实际的项目中，可以分离的关注点远不止这些。做设计时，你需要一直有一根弦去发现不同的关注点。分离关注点，不只适用于宏观的层面。</p><p>在微观的代码层面，你用同样的思维方式，也可以帮助你识别出一些混在一起的代码。比如，很多程序员很喜欢写setter，但你真的有那么多要改变的东西吗？实际上可能就是封装没做好而已。</p><p>分离关注点之所以重要，有两方面原因。一方面，不同的关注点混在一起会带来一系列的问题，正如前面提到的各种问题；另一方面，当分解得足够细小，你就会发现不同模块的共性，才有机会把同样的信息聚合在一起。这会为软件设计的后续过程，也就是组合，做好准备。</p><h2>总结时刻</h2><p>今天，我们学习了软件设计中至关重要的第一步：分解。</p><p>大多数系统的设计做得不够好，问题常常出现在分解这步就没做好。常见的分解问题就是分解的粒度太大，把各种维度混淆在一起。在设计中，将一个模块的不同维度分开，有一个专门的说法，叫分离关注点。</p><p>分离关注点很重要，一方面，不同的关注点混在一起会带来许多问题；另一方面，分离关注点有助于我们发现不同模块的共性，更好地进行设计。分离关注点，是我们在做设计的时候，需要时时绷起的一根弦。</p><p>今天，我还给你举了两种常见的关注点混淆的情况。一种是技术和业务的混淆，另一种是不同数据变动方向的混淆。希望你在日常开发中，引以为戒。</p><p>好，我们已经迈出了软件设计的第一步。接下来，就该考虑如何组合了。在组合的过程中，会有很多因素影响到组合的方式。下一讲我们就来看一个非常重要却不受重视的因素：可测试性。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>分离关注点，发现的关注点越多越好，粒度越小越好</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/46/c5/46fb9a7cd6daac77dde4ffb6d28b7bc5.jpg?wh=2248*777\" alt=\"\"></p><h2>思考题</h2><p>最后我想请你去了解一下CQRS（Command Query Responsibility Segregation），看看它分离了哪些关注点，以及在什么样的场景下使用这种架构是合理的。欢迎在留言区写下你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","neighbors":{"left":{"article_title":"01 | 软件设计到底是什么？","id":240177},"right":{"article_title":"03 | 可测试性： 一个影响软件设计的重要因素","id":241094}},"comments":[{"had_liked":false,"id":221603,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1590547972,"is_pvip":false,"replies":[{"id":"81756","content":"非常棒的分享！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590585457,"ip_address":"","comment_id":221603,"utype":1}],"discussion_count":2,"race_medal":0,"score":"246403683844","product_id":100052601,"comment_content":"1.cqrs，命令与查询分离，最早是在ddd实战里面看到。其分离啦增删改与查询这两个关注点。<br><br>2.静态上，拆分了这两块的代码。使各自可以采用不同的技术栈，做针对性的调优。动态上，切分了流量，能够更灵活的做资源分配。<br><br>3.查询服务的实现。可以走从库，这有利于降低主库压力，也可以做到水平扩展。但需要注意数据延迟的问题。在异步同步和同步多写上要做好权衡。<br>也可以都走主库，这时候查询服务最好能增加缓存层，以降低主库压力，而增删改服务要做好缓存的级联操作，以保证缓存的时效性。<br>当然也可以走非关系型数据库，搜索引擎类的es,solr，分布式存储的tidb等等，按需选择。","like_count":58,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496511,"discussion_content":"非常棒的分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590585457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1783942,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/38/86/903c79b8.jpg","nickname":"gengeng","note":"","ucode":"F5866324EBA03B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275077,"discussion_content":"受益匪浅吖 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590659283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221800,"user_name":"西西弗与卡夫卡","can_delete":false,"product_type":"c1","uid":1001710,"ip_address":"","ucode":"B4C27B8335B76A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/ee/872ad07e.jpg","comment_is_top":false,"comment_ctime":1590593294,"is_pvip":true,"replies":[{"id":"81782","content":"刚好最近万维钢老师讲了这本书中的内容，但你从软件设计的角度去理解这个问题，确实让人有一种耳目一新的感觉。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590621475,"ip_address":"","comment_id":221800,"utype":1}],"discussion_count":2,"race_medal":0,"score":"186274187022","product_id":100052601,"comment_content":"近期有一本书《被统治的艺术》，正好和软件设计中的职责分离策略异曲同工。<br><br>我们知道明朝自朱元璋开始有一个顶层设计，就是每家每户做什么，一开始就规定好了。军队也是一个固定职业，即军户制。比如说国家需要100万个士兵，那就要有100万个军户，每户出一个兵，世世代代都是这样。如果这个兵逃了或者死了怎么办？家族里就再出一个来补充。<br><br>这会带来什么后果呢？你可以想象一下，如果儿童节的时候你正坐在家里跟妻子儿女享天伦之乐，忽然有人闯进来，把你抓走了去当兵，只是因为你家族里面的另外一个人当了逃兵或者死掉了。<br><br>可见，这样的顶层设计会给自己的家族带来各种不确定性甚至家庭悲剧。人民群众想出了很多的策略来对付这样的制度。<br><br>有种设计是这样的，就是每个家族中选出一个分支代表整个家族去当兵，与之相对的是家族的其他分支需要共同出一笔钱，世世代代赡养这个当兵的分支。此外还有其他一些「福利」，比如说，如果原本他在家族中的排位比较低，那他的后代就可以在家族的各项活动中提升座次。<br><br>这个世世代代当兵的分支会比较惨，但带来的好处是这个家族中的其他分支就会少受骚扰，得以繁衍。<br><br>事实上这样的策略运行得不错，有些家族好几代人一直都执行这样的策略，甚至贯穿了几乎整个明代。<br><br>某种角度说，这就是一种职责分离，将国家统治的要求和家族稳定繁衍的需要分开。","like_count":44,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496576,"discussion_content":"刚好最近万维钢老师讲了这本书中的内容，但你从软件设计的角度去理解这个问题，确实让人有一种耳目一新的感觉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590621475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1783942,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/38/86/903c79b8.jpg","nickname":"gengeng","note":"","ucode":"F5866324EBA03B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275079,"discussion_content":"牛啊 这抽象和联想能力。看日期是六一前调侃还应景。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590659696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221842,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1068571,"ip_address":"","ucode":"65AF6AF292DAD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/1b/f4b786b9.jpg","comment_is_top":false,"comment_ctime":1590621690,"is_pvip":true,"replies":[{"id":"81802","content":"我们来分析一下这个需求，下单入库和发消息给下游，这确实是两个动作，但这两个动作的顺序一定是这样吗？它们一定要在一个线程里完成吗？<br><br>我们可不可以先发消息呢？比如，我们把消息发给下游之后，有一个下游接收到消息之后，再把消息入库。如果这样做的话，发消息，由消息队列保证消息不丢，下游入库，又可以保证订单持久化。你看，在这个设计中，其实，并不需要事务，所以，我们也不必为事务纠结了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590635566,"ip_address":"","comment_id":221842,"utype":1}],"discussion_count":9,"race_medal":0,"score":"121849705978","product_id":100052601,"comment_content":"老师 比如说订单系统  先下单写到数据库 然后发送消息给消息队列 这两部 没法放到一个事务中去。 如果用本地消息表， order 写数据库 然后 在写本地消息表 这样这两步就放到一个事务中去了 保证肯定成功， 然后在有线程 读取本地消息表 发送队列 如果成功更改本地消息表状态 。 从设计角度讲这就没分离关注点， 这个应该怎么分呀？ ","like_count":28,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496588,"discussion_content":"我们来分析一下这个需求，下单入库和发消息给下游，这确实是两个动作，但这两个动作的顺序一定是这样吗？它们一定要在一个线程里完成吗？\n\n我们可不可以先发消息呢？比如，我们把消息发给下游之后，有一个下游接收到消息之后，再把消息入库。如果这样做的话，发消息，由消息队列保证消息不丢，下游入库，又可以保证订单持久化。你看，在这个设计中，其实，并不需要事务，所以，我们也不必为事务纠结了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590635566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2363368,"avatar":"","nickname":"walnut","note":"","ucode":"AF379E153E7499","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349270,"discussion_content":"通过消息只是把入库和消息处理推迟到了下游，下游也要做这2个动作。\n如果消息处理成功，入库失败呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1613033522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1863175,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zCexibcuyicZrtbXYzxyoldvytmSAUO2FG8hZptW5FibxxXSQOvZJGNYxVUYCDMOJHbjFBtt8G44xyoMsvOAxIWKA/132","nickname":"黄少聪","note":"","ucode":"05492CA3D28642","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379078,"discussion_content":"老师的方法中，如果发送消息成功，再入库成功还好。若发送消息成功，入库失败，则导致数据不一致了。或者发送成功，但网络闪断或者读超时，均会造成数据不一致的现象。这个不是分离关注点可以解决的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623666362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103516,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d6/9c/c48fd38a.jpg","nickname":"陈皮","note":"","ucode":"42088EF5264280","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356965,"discussion_content":"订单系统不需要持久化订单吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615715492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042793,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e9/69/779b48c2.jpg","nickname":"苏忆","note":"","ucode":"B8BE78280CCB99","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331533,"discussion_content":"下游入库的话,可能已经跟我这里不是同一个系统了,可能已经是不同团队在做这件事情了,所以我感觉不能这么弄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606894785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1021530,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/5a/846a09f7.jpg","nickname":"pony","note":"","ucode":"B72FA864CDD286","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319124,"discussion_content":"我也碰到过，使用的是老师介绍的方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603949201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1106201,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e1/19/c756aaed.jpg","nickname":"鸠摩智","note":"","ucode":"853E584FC4CD64","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1021530,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/5a/846a09f7.jpg","nickname":"pony","note":"","ucode":"B72FA864CDD286","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373872,"discussion_content":"万一消息中间件不可用，会阻塞下单流程吧，如果先保存到本地消息表，再有单独的定时任务去发消息，就不会阻塞下单流程。 请教一下，你们具体是咋做的啊？会有我说的问题吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620900135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":319124,"ip_address":""},"score":373872,"extra":""}]},{"author":{"id":1088710,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","nickname":"苗","note":"","ucode":"5ECCC6C855E541","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299920,"discussion_content":"感觉不够清楚。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597859888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068571,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4e/1b/f4b786b9.jpg","nickname":"飞翔","note":"","ucode":"65AF6AF292DAD6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274980,"discussion_content":"谢谢老师。 也就是说 我们要尽量避免 事务双写 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590640861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221644,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":1521358,"ip_address":"","ucode":"1397377B31751E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rAqwExT20D9WdnlEmZpzXp9HrorvyeGOdpicPCwfAREPJuM1F5I3A8cTbCg2LwggfxdEP0qPwCuAWjrIRiaNj4MQ/132","comment_is_top":false,"comment_ctime":1590556887,"is_pvip":false,"replies":[{"id":"81752","content":"有一种从小事练起的方法，就是写代码时，把自己写的函数行数限定在一定的规模之下，比如，10行。超过10行的代码，你就要去仔细想想是否是有东西混在了一起。<br><br>这种方法锻炼的就是找出不同关注点的思维习惯，一旦你具备了这种思维习惯，再去看大的设计，自然也会发现不同的关注点。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590582901,"ip_address":"","comment_id":221644,"utype":1}],"discussion_count":1,"race_medal":0,"score":"121849641175","product_id":100052601,"comment_content":"我发现大家在工作中往往不做分离，分析需求的时候把方案揉在一起。<br>可以怎样去练习做分离呢？","like_count":29,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496520,"discussion_content":"有一种从小事练起的方法，就是写代码时，把自己写的函数行数限定在一定的规模之下，比如，10行。超过10行的代码，你就要去仔细想想是否是有东西混在了一起。\n\n这种方法锻炼的就是找出不同关注点的思维习惯，一旦你具备了这种思维习惯，再去看大的设计，自然也会发现不同的关注点。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590582901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221527,"user_name":"北天魔狼","can_delete":false,"product_type":"c1","uid":1188144,"ip_address":"","ucode":"C22623ECEB8DBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/30/8ecce1e1.jpg","comment_is_top":false,"comment_ctime":1590535246,"is_pvip":true,"replies":[{"id":"81744","content":"没错，就是这样。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590577306,"ip_address":"","comment_id":221527,"utype":1}],"discussion_count":1,"race_medal":0,"score":"117554652238","product_id":100052601,"comment_content":"想起Kent Beck 说的一句话，大致意思是：我不准备在这本书里讲高并发问题，我的做法是把高并发问题从我的程序里移出去","like_count":27,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496480,"discussion_content":"没错，就是这样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590577306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225886,"user_name":"小学一年级","can_delete":false,"product_type":"c1","uid":1217230,"ip_address":"","ucode":"59B9805D7C2D92","user_header":"https://static001.geekbang.org/account/avatar/00/12/92/ce/9d24cb2c.jpg","comment_is_top":false,"comment_ctime":1591882868,"is_pvip":false,"replies":[{"id":"83804","content":"首先，你的描述没有把业务和实现分清楚。<br><br>你的业务是实现一个会员系统，具体到这里，是判断用户当前是否是会员。更具体一点的话，会涉及会员购买，主要是会员时间要延长，还会涉及到会员资格的判断，也就是当前用户是否是会员。<br><br>基于这些内容的判断，可以有不同的实现。根据你当前的实现，可以这样做：<br>* 购买会员，如果会员信息不存在，则添加会员信息，如果会员信息存在，则修改会员结束时间。<br>* 会员资格判别，根据用户 ID 和当前时间是否在时间范围内查询查询，如果记录存在，则是会员，否则不是。<br><br>结合你提供的信息，可以考虑的点是：<br>* 购买会员时，可以产生会员购买记录，此记录仅供后续查询使用；<br>* 只有当会员信息表过大时，才考虑是否需要删除。<br><br>在这个实现中，把购买和会员信息分开，把会员信息是否生效与记录是否删除分开了。<br><br>以上仅仅是根据你提供的信息进行的分析，如有不当之处，欢迎继续讨论。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1592365425,"ip_address":"","comment_id":225886,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53131490420","product_id":100052601,"comment_content":"郑老师  我有个需求描述下（类比）： 用户购买网站会员  <br>我目前的设计用了两张表 <br>一张表存储用户购买会员的所有记录， <br>另一张表 存当前的会员信息 (主要是  开始，结束时间，没有会员等级之类)  单独设计这张表的目的是为了sql关联查询方便，不用再判断是否过期。<br>但有个问题：我要用定时器一直扫这表，等会员过期了要删除记录。<br>请问郑老师 我这么做的问题在哪？ 更好的解决方式应该是什么？如果做到更细维度的拆分？<br><br><br><br>","like_count":11,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498027,"discussion_content":"首先，你的描述没有把业务和实现分清楚。\n\n你的业务是实现一个会员系统，具体到这里，是判断用户当前是否是会员。更具体一点的话，会涉及会员购买，主要是会员时间要延长，还会涉及到会员资格的判断，也就是当前用户是否是会员。\n\n基于这些内容的判断，可以有不同的实现。根据你当前的实现，可以这样做：\n* 购买会员，如果会员信息不存在，则添加会员信息，如果会员信息存在，则修改会员结束时间。\n* 会员资格判别，根据用户 ID 和当前时间是否在时间范围内查询查询，如果记录存在，则是会员，否则不是。\n\n结合你提供的信息，可以考虑的点是：\n* 购买会员时，可以产生会员购买记录，此记录仅供后续查询使用；\n* 只有当会员信息表过大时，才考虑是否需要删除。\n\n在这个实现中，把购买和会员信息分开，把会员信息是否生效与记录是否删除分开了。\n\n以上仅仅是根据你提供的信息进行的分析，如有不当之处，欢迎继续讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592365425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222145,"user_name":"Rovebiy","can_delete":false,"product_type":"c1","uid":1518152,"ip_address":"","ucode":"E45B02264F180E","user_header":"https://wx.qlogo.cn/mmopen/vi_32/nUUviatibFtUzic3XibFPWFbV0k9rX0ZLb1QibY0pmeUO4yGK3wMKFsZtDwZbs1rRSRXwOFOFMj7SZdgofdggQTGF3Q/132","comment_is_top":false,"comment_ctime":1590700120,"is_pvip":false,"replies":[{"id":"81929","content":"如果我们分析是不是丢消息，就要看它在什么情况下丢消息。在之前的业务场景中，丢消息就是因为消息队列处理不过来，而我们换了吞吐更好的队列就不存在这个问题了。<br><br>其实，我们真正需要的是可靠的信息传送通道，至于是不是消息队列不重要。如果怕丢消息，可以在生产者端重试，可以在消费者端做幂等。补偿是一个能把场景弄复杂的做法，不鼓励。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590724480,"ip_address":"","comment_id":222145,"utype":1}],"discussion_count":4,"race_medal":0,"score":"53130307672","product_id":100052601,"comment_content":"老师，我觉得补偿机制还是要的吧，就算换吞吐量大的消息队列，丢失消息还是有可能出现的，只是几率小很多。只是他补偿机制设计得不合理？","like_count":12,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496687,"discussion_content":"如果我们分析是不是丢消息，就要看它在什么情况下丢消息。在之前的业务场景中，丢消息就是因为消息队列处理不过来，而我们换了吞吐更好的队列就不存在这个问题了。\n\n其实，我们真正需要的是可靠的信息传送通道，至于是不是消息队列不重要。如果怕丢消息，可以在生产者端重试，可以在消费者端做幂等。补偿是一个能把场景弄复杂的做法，不鼓励。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590724480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1349024,"avatar":"https://static001.geekbang.org/account/avatar/00/14/95/a0/7e1ac954.jpg","nickname":"叻叻","note":"","ucode":"D124C311BC6938","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585610,"discussion_content":"把精力放在确保事前不是问题，在好过关注事后出问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661708247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053292,"avatar":"https://static001.geekbang.org/account/avatar/00/10/12/6c/0f0cf9eb.jpg","nickname":"树懒先生","note":"","ucode":"7749020DFA1127","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391677,"discussion_content":"是的。从RokcetMQ的Wiki介绍来看，保证消息不丢，不过要客户端来实现消息幂等性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630573138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1355554,"avatar":"","nickname":"Joewing","note":"","ucode":"1417543A3B53D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277662,"discussion_content":"老师，有什么好的消息处理队列框架介绍，rocketmq?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591087934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221591,"user_name":"桃源小盼","can_delete":false,"product_type":"c1","uid":1039664,"ip_address":"","ucode":"3FA0819FD69FF8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/30/9d36ccaf.jpg","comment_is_top":false,"comment_ctime":1590545369,"is_pvip":true,"replies":[{"id":"81785","content":"专栏后面还会多次提到分离关注点的，敬请期待！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590622639,"ip_address":"","comment_id":221591,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48835185625","product_id":100052601,"comment_content":"能提供关于分离关注点更多的例子或者相关资料吗？","like_count":11,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496506,"discussion_content":"专栏后面还会多次提到分离关注点的，敬请期待！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590622639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221501,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1590510161,"is_pvip":false,"replies":[{"id":"81746","content":"这是一个很好的例子，确实要做区分。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590577379,"ip_address":"","comment_id":221501,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44540183121","product_id":100052601,"comment_content":"技术和业务混杂的情况，让我想起来一篇文章，大意是说要区分技术异常和业务异常的。也就是说，技术层面的异常信息不应该暴露给上层的业务人员。典型的例子就是大型网站的错误页面，而不是直接把后台的npe堆栈信息抛给用户。","like_count":10,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496472,"discussion_content":"这是一个很好的例子，确实要做区分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590577379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274161,"discussion_content":"1.我负责的项目就是技术与业务被揉一起的典型。\n2.面阿里时我就起了个话题，从业务异常和技术异常的差异处理切入，去谈谈开发过程中怎么把技术问题和业务问题分割对待。结果，人家认为异常处理只是个人开发习惯，对于区分技术和业务很迷茫，瞬间把天聊死。\n3.综上所述，能把开发过程的个中差异想清楚，不在能力而在追求。我认为这更偏个人追求。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590548816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221597,"user_name":"我是小妖怪🇨🇳","can_delete":false,"product_type":"c1","uid":1758660,"ip_address":"","ucode":"A5381FA2D2C713","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d5/c4/62b2cd5a.jpg","comment_is_top":false,"comment_ctime":1590547029,"is_pvip":false,"replies":[{"id":"81840","content":"你把你困惑的点提出来，我争取进一步讲清楚。<br><br>我在部落里写了一个回答，可以参考一下。<br>http:&#47;&#47;gk.link&#47;a&#47;10iHp","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590661458,"ip_address":"","comment_id":221597,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40245252693","product_id":100052601,"comment_content":"有感觉，但是又不明确，没有get到那个点，应该举一下具体的业务来说明或者证明，感觉是理论上的","like_count":9,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496509,"discussion_content":"你把你困惑的点提出来，我争取进一步讲清楚。\n\n我在部落里写了一个回答，可以参考一下。\nhttp://gk.link/a/10iHp","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590661458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222069,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1079657,"ip_address":"","ucode":"0335277F255F7A","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/69/5960a2af.jpg","comment_is_top":false,"comment_ctime":1590669024,"is_pvip":false,"replies":[{"id":"82536","content":"一个简单的区分：业务人员能理解的就是业务的，比如，订单，业务人员理解不了的就是技术的，比如，多线程。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1591315029,"ip_address":"","comment_id":222069,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31655440096","product_id":100052601,"comment_content":"似懂非懂，技术与业务的分割线太模糊。代码的重构优化会点，但是分离关注点就涉及到具体的业务了，具体业务的划分与分离就又迷茫了。😭😭😭😭😭😭😭","like_count":8,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496656,"discussion_content":"一个简单的区分：业务人员能理解的就是业务的，比如，订单，业务人员理解不了的就是技术的，比如，多线程。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591315029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2363368,"avatar":"","nickname":"walnut","note":"","ucode":"AF379E153E7499","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349278,"discussion_content":"业务可简单理解为人工处理流程。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1613035116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221577,"user_name":"光明","can_delete":false,"product_type":"c1","uid":1002252,"ip_address":"","ucode":"0A5E7CFD91A3CF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/0c/dab49a2b.jpg","comment_is_top":false,"comment_ctime":1590544058,"is_pvip":true,"replies":[{"id":"81757","content":"太过真实了：想好，又不希望自己做得太多。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590585503,"ip_address":"","comment_id":221577,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23065380538","product_id":100052601,"comment_content":"1. 在软件设计中，大家是期望将粒度分解的越小越好，但又往往嫌分解太小过于麻烦。就像，希望别人把文档写好，自己却又不写(￣_,￣ )<br>2. 业务处理和技术实现很容易被混在一起，原因也确实是分离的不够┭┮﹏┭┮<br>","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496503,"discussion_content":"太过真实了：想好，又不希望自己做得太多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590585503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221797,"user_name":"算不出流源","can_delete":false,"product_type":"c1","uid":1178209,"ip_address":"","ucode":"B6CFEF672E3E1C","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/61/691e2936.jpg","comment_is_top":false,"comment_ctime":1590592901,"is_pvip":false,"replies":[{"id":"81781","content":"如果把二者分开，这可以就是两个项目，一个前台项目，一个后台项目。两个独立的项目各自采用一套编程规范，不就很正常了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590618911,"ip_address":"","comment_id":221797,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18770462085","product_id":100052601,"comment_content":"“如果将前台访问（处理增删改查）和后台访问（统计报表）分开，纠结也就不复存在了。”<br>老师请恕我愚钝，所以将高低频分开之后是分别采用Spring  Data JPA和Mybatis来实现进行数据库访问吗？如果是的话，那不是相当于在同一个项目中引入了两套数据库访问规范，会不会造成开发规范上的困惑甚至混乱？如果不是的话，那正确做法又应该是什么？","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496575,"discussion_content":"如果把二者分开，这可以就是两个项目，一个前台项目，一个后台项目。两个独立的项目各自采用一套编程规范，不就很正常了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590618911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2363368,"avatar":"","nickname":"walnut","note":"","ucode":"AF379E153E7499","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349279,"discussion_content":"类似读写分离。看来啥事都不能墨守成规。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613035527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221769,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1068571,"ip_address":"","ucode":"65AF6AF292DAD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/4e/1b/f4b786b9.jpg","comment_is_top":false,"comment_ctime":1590588540,"is_pvip":true,"replies":[{"id":"81779","content":"这里并不是说增加了消息队列解决的问题，原有的解决方案用的也是消息队列。<br><br>这里的重点是，用了一个吞吐能力更强的队列，保证了消息的不丢失，这样我们就不必专门处理消息丢失的问题了。通信的问题在通信的层面得到了解决，就不会影响到其它的代码了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590618707,"ip_address":"","comment_id":221769,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18770457724","product_id":100052601,"comment_content":"老师 能具体说说加了消息队列的数据流成什么样了 为啥能解决对消息问题呀","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496561,"discussion_content":"这里并不是说增加了消息队列解决的问题，原有的解决方案用的也是消息队列。\n\n这里的重点是，用了一个吞吐能力更强的队列，保证了消息的不丢失，这样我们就不必专门处理消息丢失的问题了。通信的问题在通信的层面得到了解决，就不会影响到其它的代码了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590618707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053292,"avatar":"https://static001.geekbang.org/account/avatar/00/10/12/6c/0f0cf9eb.jpg","nickname":"树懒先生","note":"","ucode":"7749020DFA1127","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391678,"discussion_content":"看到此处，貌似变成了设计与实现的纠结了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630573219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221943,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1590637379,"is_pvip":false,"replies":[{"id":"81844","content":"赶紧分解起来。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590662276,"ip_address":"","comment_id":221943,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10180571971","product_id":100052601,"comment_content":"一身冷汗，要从根本上提升分解能力","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496621,"discussion_content":"赶紧分解起来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590662276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315706,"user_name":"王峰","can_delete":false,"product_type":"c1","uid":1216387,"ip_address":"","ucode":"11C31B45C31B0B","user_header":"https://static001.geekbang.org/account/avatar/00/12/8f/83/3f99d078.jpg","comment_is_top":false,"comment_ctime":1633947485,"is_pvip":true,"replies":[{"id":"114634","content":"你说的很符合大多数人的情况，这就是缺少模型思考的结果。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1634436018,"ip_address":"","comment_id":315706,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5928914781","product_id":100052601,"comment_content":"感觉大的方向模块容易做分离，细节不容易做，比如类级别，所以常常导致类设计很别扭，大类，职责太多，职责不清楚等，尤其一旦有个Utility类，啥都往里扔了。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528147,"discussion_content":"你说的很符合大多数人的情况，这就是缺少模型思考的结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634436018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314393,"user_name":"Dream.","can_delete":false,"product_type":"c1","uid":1187286,"ip_address":"","ucode":"49B94CE5BA0D21","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/d6/76fe5259.jpg","comment_is_top":false,"comment_ctime":1632994749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5927962045","product_id":100052601,"comment_content":"文中提到：将前台访问（处理增删改查）和后台访问（统计报表）分开，纠结也就不复存在了。","like_count":1},{"had_liked":false,"id":311021,"user_name":"晴天了","can_delete":false,"product_type":"c1","uid":1359669,"ip_address":"","ucode":"5310E02F8DF1F0","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/35/0e3a92a7.jpg","comment_is_top":false,"comment_ctime":1631019673,"is_pvip":false,"replies":[{"id":"112713","content":"你可以这么理解，但还不够，这是起点，不是终点。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1631058952,"ip_address":"","comment_id":311021,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5925986969","product_id":100052601,"comment_content":"问下老师 关注点是否也可分为 横向关注点 和 竖向关注点，横向关注点即根据业务需求分离的专注点， 竖向关注点是技术分层模型 每一层的关注点","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526437,"discussion_content":"你可以这么理解，但还不够，这是起点，不是终点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631058952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283332,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1615709384,"is_pvip":false,"replies":[{"id":"103578","content":"分离关注点和单一职责是异曲同工","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1616799071,"ip_address":"","comment_id":283332,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5910676680","product_id":100052601,"comment_content":"系统拆分不能单从一个纬度进行，考虑的纬度越多越好。<br><br>不同的人关注点是不同的，分离关注点就是分离职责，这也是单一职责的体现吧。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516999,"discussion_content":"分离关注点和单一职责是异曲同工","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616799071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235372,"user_name":"pei","can_delete":false,"product_type":"c1","uid":1079970,"ip_address":"","ucode":"B6A297BA6C8E97","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/a2/3e826966.jpg","comment_is_top":false,"comment_ctime":1594986094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5889953390","product_id":100052601,"comment_content":"分离查询与增删改，<br>通常增删改会涉及到很多domain knowledge. 平时更多的操作其实是查询，不需要通过从持久化生成domain model到内存中再返回。","like_count":1},{"had_liked":false,"id":227357,"user_name":"迈步","can_delete":false,"product_type":"c1","uid":1747737,"ip_address":"","ucode":"BA9B69CEDA6176","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ab/19/829f321f.jpg","comment_is_top":false,"comment_ctime":1592363354,"is_pvip":false,"replies":[{"id":"83848","content":"技术实现被封装起来是没有问题的，怕的是没有把接口提取出来，就容易产生混乱。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1592436889,"ip_address":"","comment_id":227357,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887330650","product_id":100052601,"comment_content":"对内容的理解确实需要一定的经验，对我来说感受颇丰。特别是技术实现和业务处理分离。工作以来，接手过很多程序员的项目，如果技术实现又被封装成组件，这就会导致一个很苦恼的问题，业务逻辑看到一半，就由技术实现的组件去处理了。然后必须下组件源码才能看完整个业务逻辑。代码层次看起来也会觉得非常混乱，导致维护开发成本升高。真是吃够了苦呀！","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498605,"discussion_content":"技术实现被封装起来是没有问题的，怕的是没有把接口提取出来，就容易产生混乱。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592436889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226926,"user_name":"Y","can_delete":false,"product_type":"c1","uid":1637632,"ip_address":"","ucode":"F57929C11BD34C","user_header":"https://static001.geekbang.org/account/avatar/00/18/fd/00/6cff1d24.jpg","comment_is_top":false,"comment_ctime":1592230095,"is_pvip":false,"replies":[{"id":"83607","content":"这个思路又是把业务和技术混到了一起。我们需要先界定清楚业务上不同的职责。<br><br>从业务上说，你有数据源和数据目的地，中间还有一个数据处理器，那三者的职责分别是什么呢？数据源要保证数据读取一定要成功吗？数据源读出的数据一定要有序吗？数据目的地要保证数据写入的量足够大吗？数据处理器是保证写入成功再去读数据，还是不管不顾，读了数据就往里写。<br><br>等界定清楚不同的职责，再把具体的中间件匹配进去，如果中间缺少能力，自己还要来补充。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1592263985,"ip_address":"","comment_id":226926,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887197391","product_id":100052601,"comment_content":"老师你好， 比如有一个需求， 要从多数据源（mysql.kafka.redis.es）读一些数据， 然后写入一个es中去。 这种设计模型的话， 我只能想到分离出 读层， 队列缓存层， 写入层。 然后这个时候是不是又要考虑重试，读没成功，写没成功， 队列满了。。感觉我把很多关注点混在了一起， 该怎么分离呢， 感谢！！","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498418,"discussion_content":"这个思路又是把业务和技术混到了一起。我们需要先界定清楚业务上不同的职责。\n\n从业务上说，你有数据源和数据目的地，中间还有一个数据处理器，那三者的职责分别是什么呢？数据源要保证数据读取一定要成功吗？数据源读出的数据一定要有序吗？数据目的地要保证数据写入的量足够大吗？数据处理器是保证写入成功再去读数据，还是不管不顾，读了数据就往里写。\n\n等界定清楚不同的职责，再把具体的中间件匹配进去，如果中间缺少能力，自己还要来补充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592263985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223548,"user_name":"蓝士钦","can_delete":false,"product_type":"c1","uid":1229516,"ip_address":"","ucode":"726EB5C8EF1249","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","comment_is_top":false,"comment_ctime":1591112505,"is_pvip":false,"replies":[{"id":"82422","content":"DAO 层设计到数据操作是很正常的，但这里面需要你分清楚的一点是，DAO 层为什么会有很多业务相关的 SQL，是为了性能，还是不假思索写成了这样。<br><br>通常，我建议 DAO 层比较简单，除非是要做特别的优化。真正的业务逻辑最好还是写在 Service 这一层。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1591194121,"ip_address":"","comment_id":223548,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5886079801","product_id":100052601,"comment_content":"常见的设计分层也是关注点分离，service层做业务，dao层涉及具体的数据库操作也就是技术实现，把技术和业务分离。但是我们往往会在dao里面写很多业务相关的sql，有没有什么好的方式去分离呢","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497161,"discussion_content":"DAO 层设计到数据操作是很正常的，但这里面需要你分清楚的一点是，DAO 层为什么会有很多业务相关的 SQL，是为了性能，还是不假思索写成了这样。\n\n通常，我建议 DAO 层比较简单，除非是要做特别的优化。真正的业务逻辑最好还是写在 Service 这一层。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591194121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053292,"avatar":"https://static001.geekbang.org/account/avatar/00/10/12/6c/0f0cf9eb.jpg","nickname":"树懒先生","note":"","ucode":"7749020DFA1127","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391680,"discussion_content":"真正的业务逻辑最好还是写在 Service 这一层。| 这句话的根源，是在于 DDD？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630573298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1088710,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","nickname":"苗","note":"","ucode":"5ECCC6C855E541","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299921,"discussion_content":"这点比较同意；dao层一般只提供根据id增删改查和多条件查询的接口就可以了；其它有较多业务逻辑的在service实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597860217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223350,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1591068451,"is_pvip":false,"replies":[{"id":"84911","content":"嗯，是这个意思。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593262452,"ip_address":"","comment_id":223350,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886035747","product_id":100052601,"comment_content":"类比一下 房子的户型 动静分离 干湿分离 ，为什么大家要改善居住环境，源于这些因素","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497107,"discussion_content":"嗯，是这个意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593262452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222158,"user_name":"西西弗与卡夫卡","can_delete":false,"product_type":"c1","uid":1001710,"ip_address":"","ucode":"B4C27B8335B76A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/ee/872ad07e.jpg","comment_is_top":false,"comment_ctime":1590709699,"is_pvip":true,"replies":[{"id":"81975","content":"把技术和业务分开，至少意识上要先行。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590745753,"ip_address":"","comment_id":222158,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5885676995","product_id":100052601,"comment_content":"最近听到大家的一些技术设计。有些同事在偏业务数据驱动的系统里用了juc里的比如原子操作。虽然对大家提升技术水平有一定益处，但从软件设计角度来说，未必是好事，应该尽力避免。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496694,"discussion_content":"把技术和业务分开，至少意识上要先行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590745753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221916,"user_name":"kimi","can_delete":false,"product_type":"c1","uid":1039218,"ip_address":"","ucode":"5C071D2F866D2C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/72/f7b4e08c.jpg","comment_is_top":false,"comment_ctime":1590633555,"is_pvip":false,"replies":[{"id":"81839","content":"很好的点，确实需要有意识的训练。<br><br>我在部落里写了一个回答，可以参考一下。<br>http:&#47;&#47;gk.link&#47;a&#47;10iHp","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590661348,"ip_address":"","comment_id":221916,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5885600851","product_id":100052601,"comment_content":"其实这里面很多问题是由于无意识造成的，在设计时需要有意识的设计，逐渐把有意识训练成下意识","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496610,"discussion_content":"很好的点，确实需要有意识的训练。\n\n我在部落里写了一个回答，可以参考一下。\nhttp://gk.link/a/10iHp","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590661348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221904,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1590630830,"is_pvip":false,"replies":[{"id":"81838","content":"我在部落里面写了一个回答，可以看一下。<br><br>http:&#47;&#47;gk.link&#47;a&#47;10iHp","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590661284,"ip_address":"","comment_id":221904,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5885598126","product_id":100052601,"comment_content":"注意分解粒度，分离关注点，这些很重要，<br>但问题是如何分解，如何分离关注点，具体有哪些工程实践？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496606,"discussion_content":"我在部落里面写了一个回答，可以看一下。\n\nhttp://gk.link/a/10iHp","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590661284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221899,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1590630091,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5885597387","product_id":100052601,"comment_content":"软件设计第一步是对业务功能进行分解，如何分解是有讲究的，分解子功能的粒度尽量要小。文中提到交易原语的例子，通过子功能来实现大功能的逻辑，其实也就是分层的思想。每一层关注自己的业务逻辑，对外提供接口","like_count":1},{"had_liked":false,"id":221652,"user_name":"gsz","can_delete":false,"product_type":"c1","uid":1147531,"ip_address":"","ucode":"8FD1B41E884B18","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/8b/5340fb27.jpg","comment_is_top":false,"comment_ctime":1590559359,"is_pvip":false,"replies":[{"id":"81755","content":"欢迎把困惑提出来，我争取帮你解惑。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590585410,"ip_address":"","comment_id":221652,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5885526655","product_id":100052601,"comment_content":"看完貌似懂了，细想完全没懂","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496523,"discussion_content":"欢迎把困惑提出来，我争取帮你解惑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590585410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221640,"user_name":"olym","can_delete":false,"product_type":"c1","uid":1479843,"ip_address":"","ucode":"29F19A06BAAB8E","user_header":"https://static001.geekbang.org/account/avatar/00/16/94/a3/7b1ad099.jpg","comment_is_top":false,"comment_ctime":1590555582,"is_pvip":false,"replies":[{"id":"81753","content":"这就是我建议的由来，越小越好。最小的粒度就是函数，函数写得越小越好。怎么写小呢？就是要分解出更小的粒度，这是一种练习的方法。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590582993,"ip_address":"","comment_id":221640,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5885522878","product_id":100052601,"comment_content":"分解的粒度一般到什么样的层级才能更好的分析共通性以及更好的组合呢？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496519,"discussion_content":"这就是我建议的由来，越小越好。最小的粒度就是函数，函数写得越小越好。怎么写小呢？就是要分解出更小的粒度，这是一种练习的方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590582993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2029608,"avatar":"","nickname":"Geek_68dece","note":"","ucode":"AE0275231411B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278786,"discussion_content":"或许可以看看重构改善既有代码设计","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591234193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221588,"user_name":"小豹哥","can_delete":false,"product_type":"c1","uid":1613919,"ip_address":"","ucode":"115FF45CAA6FAD","user_header":"https://static001.geekbang.org/account/avatar/00/18/a0/5f/cf72d453.jpg","comment_is_top":false,"comment_ctime":1590545035,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5885512331","product_id":100052601,"comment_content":"经典","like_count":1},{"had_liked":false,"id":221525,"user_name":"北天魔狼","can_delete":false,"product_type":"c1","uid":1188144,"ip_address":"","ucode":"C22623ECEB8DBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/30/8ecce1e1.jpg","comment_is_top":false,"comment_ctime":1590534980,"is_pvip":true,"replies":[{"id":"81758","content":"这个理解总体上来说，是没错的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590585539,"ip_address":"","comment_id":221525,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5885502276","product_id":100052601,"comment_content":"API功能易变，开发原则易扩展；<br>后台展示管理，基本就是看，用的框架生成的；<br>老师，这个算分离关注点吗？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496479,"discussion_content":"这个理解总体上来说，是没错的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590585539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1188144,"avatar":"https://static001.geekbang.org/account/avatar/00/12/21/30/8ecce1e1.jpg","nickname":"北天魔狼","note":"","ucode":"C22623ECEB8DBA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274586,"discussion_content":"😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590592769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221518,"user_name":"捞鱼的搬砖奇","can_delete":false,"product_type":"c1","uid":1021539,"ip_address":"","ucode":"2FD194C4DA26E5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/63/7eb32c9b.jpg","comment_is_top":false,"comment_ctime":1590516715,"is_pvip":false,"replies":[{"id":"81745","content":"任务分解和分离关注点确实是异曲同工。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1590577340,"ip_address":"","comment_id":221518,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5885484011","product_id":100052601,"comment_content":"想到10x的任务分解","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496476,"discussion_content":"任务分解和分离关注点确实是异曲同工。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590577340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354973,"user_name":"天空提提","can_delete":false,"product_type":"c1","uid":1566421,"ip_address":"山东","ucode":"055EB8E1966E34","user_header":"https://static001.geekbang.org/account/avatar/00/17/e6/d5/20c2fb6b.jpg","comment_is_top":false,"comment_ctime":1660924667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660924667","product_id":100052601,"comment_content":"老师，我有一个问题，我们系统要调用其他系统的接口，需要先获取统一token，统一token如果过期了调用接口就会返回token过期的状态码，但业务希望能自动重试获取token再去调接口，于是这个补偿机制就跟业务代码混在一起了，应该怎么处理呢","like_count":0},{"had_liked":false,"id":346238,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1652936347,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652936347","product_id":100052601,"comment_content":"分离关注点，还是有点难理解。","like_count":0},{"had_liked":false,"id":344966,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1651898933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651898933","product_id":100052601,"comment_content":"CQRS分离了数据库读写，也就是数据变动方向","like_count":0},{"had_liked":false,"id":344961,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1651898439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651898439","product_id":100052601,"comment_content":"分离关注点，发现的关注点越多越好，粒度越小越好--记下来","like_count":0},{"had_liked":false,"id":344615,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1582420,"ip_address":"","ucode":"349FD35822DC8A","user_header":"https://static001.geekbang.org/account/avatar/00/18/25/54/ef2ca14f.jpg","comment_is_top":false,"comment_ctime":1651672766,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651672766","product_id":100052601,"comment_content":"CQRS的核心是可以使用与用于读取信息的模型不同的模型来更新信息.  分离了读和写两种类型的模型. <br>适合场景: <br>- 如读和写负载差异比较大的场景; ","like_count":0},{"had_liked":false,"id":331930,"user_name":"一句话说明白","can_delete":false,"product_type":"c1","uid":1170857,"ip_address":"","ucode":"1284DCB3C6FBE6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erceWvmqarmrcPx527BdNkGMOQUgiaBz21XRySvJqxxN96Wt8CJUpR084LLE82ErX5UtkN9Chwib31A/132","comment_is_top":false,"comment_ctime":1642903734,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642903734","product_id":100052601,"comment_content":"郑老师今天的课有两点体会，一个是关于补偿机制，文中的补偿机制引入了复杂度，但是补偿机制本身也有问题，所以只是复杂度转移，并没有完全解决问题。第二个是功能和非功能的代码的分离，在架构图上习惯把功能点和非功能点罗列到一起，代码上也是混淆在一起，导致测试难 修改难。","like_count":0},{"had_liked":false,"id":316245,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1634218093,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634218093","product_id":100052601,"comment_content":"原来我一直混乱了这么久！","like_count":0},{"had_liked":false,"id":314392,"user_name":"Dream.","can_delete":false,"product_type":"c1","uid":1187286,"ip_address":"","ucode":"49B94CE5BA0D21","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/d6/76fe5259.jpg","comment_is_top":false,"comment_ctime":1632994731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632994731","product_id":100052601,"comment_content":"将前台访问（处理增删改查）和后台访问（统计报表）分开，纠结也就不复存在了。","like_count":0},{"had_liked":false,"id":313706,"user_name":"Bravery168","can_delete":false,"product_type":"c1","uid":1232973,"ip_address":"","ucode":"DB08AEFBD6DF2B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/4d/2116c1a4.jpg","comment_is_top":false,"comment_ctime":1632625465,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1632625465","product_id":100052601,"comment_content":"一点思考：<br>对于关注点而言，是不是也可以引入层次之分。<br>从上到下：<br>1、业务和技术视角的分离（以业务为基本的切入视角做第一次分离）。<br>2、技术层面：<br>1)设计&#47;架构：<br>技术实现方式的视角。<br>数据变化的视角。<br>场景差异的视角。<br>2）接口&#47;类<br>感觉关注点的分离应该在一个基本的框架内，做不同粒度的分离。","like_count":0},{"had_liked":false,"id":272033,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1002095,"ip_address":"","ucode":"1A44368083A19E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","comment_is_top":false,"comment_ctime":1609914977,"is_pvip":false,"replies":[{"id":"98670","content":"分离关注点是更低层的基础。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1609981688,"ip_address":"","comment_id":272033,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1609914977","product_id":100052601,"comment_content":"分离关注点跟单一职责原则有点像","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513128,"discussion_content":"分离关注点是更低层的基础。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609981688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264284,"user_name":"皮特尔","can_delete":false,"product_type":"c1","uid":1017161,"ip_address":"","ucode":"313862C91DD325","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/49/585c69c4.jpg","comment_is_top":false,"comment_ctime":1606404573,"is_pvip":false,"replies":[{"id":"95871","content":"大而化之的理解可以是这样的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1606460782,"ip_address":"","comment_id":264284,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606404573","product_id":100052601,"comment_content":"CRQS 就是通常说的读写分离吧？","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510497,"discussion_content":"大而化之的理解可以是这样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606460782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262621,"user_name":"脚踏实地","can_delete":false,"product_type":"c1","uid":2305847,"ip_address":"","ucode":"B23A087DD69D4D","user_header":"","comment_is_top":false,"comment_ctime":1605782247,"is_pvip":false,"replies":[{"id":"100419","content":"很好的总结","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612099124,"ip_address":"","comment_id":262621,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605782247","product_id":100052601,"comment_content":"软件开发:解决问题-分+合。<br>解决问题:分而治之。分离关注点，多，小。<br>如:动静分:变+不变，读写分","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509901,"discussion_content":"很好的总结","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612099124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260007,"user_name":"JavaGuide","can_delete":false,"product_type":"c1","uid":1184210,"ip_address":"","ucode":"246D2EAEA0ACEC","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/d2/fb38b86f.jpg","comment_is_top":false,"comment_ctime":1604907091,"is_pvip":false,"replies":[{"id":"94750","content":"虽然评论很暴躁，但反映的情感很真实。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1605168014,"ip_address":"","comment_id":260007,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604907091","product_id":100052601,"comment_content":"只想说一句：“老师写的太TM好了”!","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509085,"discussion_content":"虽然评论很暴躁，但反映的情感很真实。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605168014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254221,"user_name":"bidinggong","can_delete":false,"product_type":"c1","uid":1898806,"ip_address":"","ucode":"789A1FBA8408F3","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f9/36/f44b633e.jpg","comment_is_top":false,"comment_ctime":1603084773,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603084773","product_id":100052601,"comment_content":"做软件设计时，要能够发现这些非功能性的需求。也就是说，我们在分解问题的时候，会有很多维度，每一个维度都代表着一个关注点，这就是分离关注点。老师讲得非常好！","like_count":0},{"had_liked":false,"id":242863,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1597861040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597861040","product_id":100052601,"comment_content":"清结算系统的问题，个人感觉是发送端应该保证消息的可靠性投递，而不应该由消费端来负责，消费端应该保证幂等消费消息。这是职责不清晰的问题。","like_count":0},{"had_liked":false,"id":242862,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1597860504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597860504","product_id":100052601,"comment_content":"我个人觉得如果是使用面向对象即ddd开发；业务逻辑和技术层面的实现天然的被隔离起来了。","like_count":0},{"had_liked":false,"id":238482,"user_name":"Keith","can_delete":false,"product_type":"c1","uid":1193337,"ip_address":"","ucode":"B40774090714D1","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/79/21647da2.jpg","comment_is_top":false,"comment_ctime":1596180987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596180987","product_id":100052601,"comment_content":"CQRS分离的关注点: 数据的读和写操作<br>合理的使用场景:<br>- 基于任务的用户界面设计.<br>- 异步任务, 如典型的消息队列的应用.","like_count":0},{"had_liked":false,"id":224707,"user_name":"Elliot","can_delete":false,"product_type":"c1","uid":1030070,"ip_address":"","ucode":"CC58A6FD2F338C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b7/b6/17103195.jpg","comment_is_top":false,"comment_ctime":1591516748,"is_pvip":false,"replies":[{"id":"84788","content":"对于前端，设计的道理是一样的，现在前端也开始有框架了，就是这个原因。<br><br>至于测试，如果你把自动化测试算进来，也许这些道理就是一致的了，测试也有自己的模型，有自己的模式。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1593154818,"ip_address":"","comment_id":224707,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591516748","product_id":100052601,"comment_content":"还是有点抽象，比如对于前端人员，测试人员而言，如何对应具体的工作场景？。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497576,"discussion_content":"对于前端，设计的道理是一样的，现在前端也开始有框架了，就是这个原因。\n\n至于测试，如果你把自动化测试算进来，也许这些道理就是一致的了，测试也有自己的模型，有自己的模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593154818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224285,"user_name":"jokar","can_delete":false,"product_type":"c1","uid":1005214,"ip_address":"","ucode":"4FD20C9D4C71A8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/9e/e15a63bb.jpg","comment_is_top":false,"comment_ctime":1591334595,"is_pvip":false,"replies":[{"id":"82579","content":"如果对你有所助益，就再好不过了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1591337847,"ip_address":"","comment_id":224285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591334595","product_id":100052601,"comment_content":"很棒，解决了很多困惑。接下来工作中很多问题有个大概解决问题的思考方向了。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497430,"discussion_content":"如果对你有所助益，就再好不过了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591337847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}