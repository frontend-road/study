{"id":482459,"title":"05 | 编程接口：eBPF程序是怎么跟内核进行交互的？","content":"<p>你好，我是倪朋飞。</p><p>上一讲，我带你一起梳理了 eBPF 在内核中的实现原理，以及 BPF 指令的具体格式。</p><p>用高级语言开发的 eBPF 程序，需要首先编译为 BPF 字节码，然后借助 bpf 系统调用加载到内核中，最后再通过性能监控等接口与具体的内核事件进行绑定。这样，内核的性能监控模块才会在内核事件发生时，自动执行我们开发的 eBPF 程序。</p><p>那么，eBPF 程序到底是如何跟内核事件进行绑定的？又该如何跟内核中的其他模块进行交互呢？今天，我就带你一起看看 eBPF 程序的编程接口。</p><h2>BPF 系统调用</h2><p>如下图（图片来自<a href=\"https://www.brendangregg.com/ebpf.html\">brendangregg.com</a>）所示，一个完整的 eBPF 程序通常包含用户态和内核态两部分。其中，用户态负责 eBPF 程序的加载、事件绑定以及 eBPF 程序运行结果的汇总输出；内核态运行在 eBPF 虚拟机中，负责定制和控制系统的运行状态。</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/6a/a7165eea1fd9fc24090a3a1e8987986a.png?wh=1500x550\" alt=\"图片\"></p><p>对于用户态程序来说，我想你已经了解，<strong>它们与内核进行交互时必须要通过系统调用来完成</strong>。而对应到 eBPF 程序中，我们最常用到的就是 <a href=\"https://man7.org/linux/man-pages/man2/bpf.2.html\">bpf 系统调用</a>。</p><p>在命令行中输入 <code>man bpf</code>&nbsp;，就可以查询到 BPF 系统调用的调用格式：</p><pre><code class=\"language-plain\">#include &lt;linux/bpf.h&gt;\n\nint bpf(int cmd, union bpf_attr *attr, unsigned int size);\n</code></pre><!-- [[[read_end]]] --><p>BPF 系统调用接受三个参数：</p><ul>\n<li>第一个，cmd ，代表操作命令，比如上一讲中我们看到的 BPF_PROG_LOAD 就是加载 eBPF 程序；</li>\n<li>第二个，attr，代表 bpf_attr 类型的 eBPF 属性指针，不同类型的操作命令需要传入不同的属性参数；</li>\n<li>第三个，size ，代表属性的大小。</li>\n</ul><p>注意，<strong>不同版本的内核所支持的 BPF 命令是不同的</strong>，具体支持的命令列表可以参考内核头文件 include/uapi/linux/bpf.h 中  <code>bpf_cmd</code> 的定义。比如，v5.13 内核已经支持 <a href=\"https://elixir.bootlin.com/linux/v5.13/source/include/uapi/linux/bpf.h#L828\">36 个 BPF 命令</a>：</p><pre><code class=\"language-plain\">enum bpf_cmd {\n&nbsp; BPF_MAP_CREATE,\n&nbsp; BPF_MAP_LOOKUP_ELEM,\n&nbsp; BPF_MAP_UPDATE_ELEM,\n&nbsp; BPF_MAP_DELETE_ELEM,\n&nbsp; BPF_MAP_GET_NEXT_KEY,\n&nbsp; BPF_PROG_LOAD,\n&nbsp; BPF_OBJ_PIN,\n&nbsp; BPF_OBJ_GET,\n&nbsp; BPF_PROG_ATTACH,\n&nbsp; BPF_PROG_DETACH,\n&nbsp; BPF_PROG_TEST_RUN,\n&nbsp; BPF_PROG_GET_NEXT_ID,\n&nbsp; BPF_MAP_GET_NEXT_ID,\n&nbsp; BPF_PROG_GET_FD_BY_ID,\n&nbsp; BPF_MAP_GET_FD_BY_ID,\n&nbsp; BPF_OBJ_GET_INFO_BY_FD,\n&nbsp; BPF_PROG_QUERY,\n&nbsp; BPF_RAW_TRACEPOINT_OPEN,\n&nbsp; BPF_BTF_LOAD,\n&nbsp; BPF_BTF_GET_FD_BY_ID,\n&nbsp; BPF_TASK_FD_QUERY,\n&nbsp; BPF_MAP_LOOKUP_AND_DELETE_ELEM,\n&nbsp; BPF_MAP_FREEZE,\n&nbsp; BPF_BTF_GET_NEXT_ID,\n&nbsp; BPF_MAP_LOOKUP_BATCH,\n&nbsp; BPF_MAP_LOOKUP_AND_DELETE_BATCH,\n&nbsp; BPF_MAP_UPDATE_BATCH,\n&nbsp; BPF_MAP_DELETE_BATCH,\n&nbsp; BPF_LINK_CREATE,\n&nbsp; BPF_LINK_UPDATE,\n&nbsp; BPF_LINK_GET_FD_BY_ID,\n&nbsp; BPF_LINK_GET_NEXT_ID,\n&nbsp; BPF_ENABLE_STATS,\n&nbsp; BPF_ITER_CREATE,\n&nbsp; BPF_LINK_DETACH,\n&nbsp; BPF_PROG_BIND_MAP,\n};\n</code></pre><p>为了方便你掌握，我把用户程序中常用的命令整理成了一个表格，你可以在需要时参考：<br>\n<img src=\"https://static001.geekbang.org/resource/image/7c/88/7cc33d0bdd8a3ba0dda7f533f3375b88.jpg?wh=1920x1080\" alt=\"图片\"></p><h2>BPF 辅助函数</h2><p>说完用户态程序的 bpf 系统调用格式，我们再来看看内核态的 eBPF 程序。</p><p>eBPF 程序并不能随意调用内核函数，因此，内核定义了一系列的辅助函数，用于 eBPF 程序与内核其他模块进行交互。比如，上一讲的 Hello World 示例中使用的 bpf_trace_printk() 就是最常用的一个辅助函数，用于向调试文件系统（/sys/kernel/debug/tracing/trace_pipe）写入调试信息。</p><p>这里补充一个知识点：从内核 5.13 版本开始，部分内核函数（如&nbsp;<code>tcp_slow_start()</code>、<code>tcp_reno_ssthresh()</code>&nbsp;等）也可以被 BPF 程序直接调用了，具体你可以查看<a href=\"https://lwn.net/Articles/856005\">这个链接</a>。 不过，这些函数只能在 TCP 拥塞控制算法的 BPF 程序中调用，所以本课程不会过多展开。</p><p>需要注意的是，并不是所有的辅助函数都可以在 eBPF 程序中随意使用，不同类型的 eBPF 程序所支持的辅助函数是不同的。比如，对于 Hello World 示例这类内核探针（kprobe）类型的 eBPF 程序，你可以在命令行中执行  <code>bpftool feature probe</code>&nbsp;，来查询当前系统支持的辅助函数列表：</p><pre><code class=\"language-plain\">$ bpftool feature probe\n...\neBPF helpers supported for program type kprobe:\n\t- bpf_map_lookup_elem\n\t- bpf_map_update_elem\n\t- bpf_map_delete_elem\n\t- bpf_probe_read\n\t- bpf_ktime_get_ns\n\t- bpf_get_prandom_u32\n\t- bpf_get_smp_processor_id\n\t- bpf_tail_call\n\t- bpf_get_current_pid_tgid\n\t- bpf_get_current_uid_gid\n\t- bpf_get_current_comm\n\t- bpf_perf_event_read\n\t- bpf_perf_event_output\n\t- bpf_get_stackid\n\t- bpf_get_current_task\n\t- bpf_current_task_under_cgroup\n\t- bpf_get_numa_node_id\n\t- bpf_probe_read_str\n\t- bpf_perf_event_read_value\n\t- bpf_override_return\n\t- bpf_get_stack\n\t- bpf_get_current_cgroup_id\n\t- bpf_map_push_elem\n\t- bpf_map_pop_elem\n\t- bpf_map_peek_elem\n\t- bpf_send_signal\n\t- bpf_probe_read_user\n\t- bpf_probe_read_kernel\n\t- bpf_probe_read_user_str\n\t- bpf_probe_read_kernel_str\n...\n</code></pre><p>对于这些辅助函数的详细定义，你可以在命令行中执行  <code>man bpf-helpers</code>&nbsp;，或者参考内核头文件 <a href=\"https://elixir.bootlin.com/linux/v5.13/source/include/uapi/linux/bpf.h#L1463\">include/uapi/linux/bpf.h</a>&nbsp;，来查看它们的详细定义和使用说明。为了方便你掌握，我把常用的辅助函数整理成了一个表格，你可以在需要时参考：<br>\n<img src=\"https://static001.geekbang.org/resource/image/0b/cb/0b3edac18276a1236dde7135b961d8cb.jpg?wh=1920x1080\" alt=\"图片\"></p><p>这其中，需要你特别注意的是以<code>bpf_probe_read</code>  开头的一系列函数。我在上一讲中已经提到，eBPF 内部的内存空间只有寄存器和栈。所以，要访问其他的内核空间或用户空间地址，就需要借助&nbsp;<code>bpf_probe_read</code>  这一系列的辅助函数。这些函数会进行安全性检查，并禁止缺页中断的发生。</p><p>而在 eBPF 程序需要大块存储时，就不能像常规的内核代码那样去直接分配内存了，而是必须通过 BPF 映射（BPF Map）来完成。接下来，我带你看看 BPF 映射的具体原理。</p><h2>BPF 映射</h2><p>BPF 映射用于提供大块的键值存储，这些存储可被用户空间程序访问，进而获取 eBPF 程序的运行状态。eBPF 程序最多可以访问 64 个不同的 BPF 映射，并且不同的 eBPF 程序也可以通过相同的 BPF 映射来共享它们的状态。下图（图片来自<a href=\"https://docs.cilium.io/en/stable/bpf\">docs.cilium.io</a>）展示了&nbsp;BPF 映射的基本使用方法。</p><p><img src=\"https://static001.geekbang.org/resource/image/d8/11/d87b409fa85d3a07973a8689b228cf11.png?wh=576x383\" alt=\"图片\" title=\"BPF 映射\"></p><p>在前面的 BPF 系统调用和辅助函数小节中，你也看到，有很多系统调用命令和辅助函数都是用来访问 BPF 映射的。我相信细心的你已经发现了：BPF 辅助函数中并没有 BPF 映射的创建函数，BPF 映射只能通过用户态程序的系统调用来创建。比如，你可以通过下面的示例代码来创建一个 BPF 映射，并返回映射的文件描述符：</p><pre><code class=\"language-c++\">int bpf_create_map(enum bpf_map_type map_type,\n\t\t&nbsp; &nbsp;unsigned int key_size,\n\t\t&nbsp; &nbsp;unsigned int value_size, unsigned int max_entries)\n{\n&nbsp; union bpf_attr attr = {\n&nbsp; &nbsp; .map_type = map_type,\n&nbsp; &nbsp; .key_size = key_size,\n&nbsp; &nbsp; .value_size = value_size,\n&nbsp; &nbsp; .max_entries = max_entries\n&nbsp; };\n&nbsp; return bpf(BPF_MAP_CREATE, &amp;attr, sizeof(attr));\n}\n</code></pre><p>这其中，最关键的是设置映射的类型。内核头文件<a href=\"https://elixir.bootlin.com/linux/v5.13/source/include/uapi/linux/bpf.h#L867\"> include/uapi/linux/bpf.h </a>中的  <code>bpf_map_type</code> 定义了所有支持的映射类型，你可以使用如下的 bpftool 命令，来查询当前系统支持哪些映射类型：</p><pre><code class=\"language-bash\">$ bpftool feature probe | grep map_type\neBPF map_type hash is available\neBPF map_type array is available\neBPF map_type prog_array is available\neBPF map_type perf_event_array is available\neBPF map_type percpu_hash is available\neBPF map_type percpu_array is available\neBPF map_type stack_trace is available\n...\n</code></pre><p>在下面的表格中，我给你整理了几种最常用的映射类型及其功能和使用场景：<br>\n<img src=\"https://static001.geekbang.org/resource/image/f3/d7/f3210199e6689e7659057a935e7fc5d7.jpg?wh=1920x1080\" alt=\"图片\"><br>\n如果你的 eBPF 程序使用了 BCC 库，你还可以使用预定义的宏来简化 BPF 映射的创建过程。比如，对哈希表映射来说，BCC 定义了  <code>BPF_HASH(name, key_type=u64, leaf_type=u64, size=10240)</code>，因此，你就可以通过下面的几种方法来创建一个哈希表映射：</p><pre><code class=\"language-c++\">// 使用默认参数 key_type=u64, leaf_type=u64, size=10240\nBPF_HASH(stats);\n\n// 使用自定义key类型，保持默认 leaf_type=u64, size=10240\nstruct key_t {\n&nbsp; char c[80];\n};\nBPF_HASH(counts, struct key_t);\n\n// 自定义所有参数\nBPF_HASH(cpu_time, uint64_t, uint64_t, 4096);\n</code></pre><p>除了创建之外，映射的删除也需要你特别注意。BPF 系统调用中并没有删除映射的命令，这是因为 <strong>BPF 映射会在用户态程序关闭文件描述符的时候自动删除</strong>（即<code>close(fd)</code> ）。 如果你想在程序退出后还保留映射，就需要调用  <code>BPF_OBJ_PIN</code> 命令，将映射挂载到 /sys/fs/bpf 中。</p><p>在调试 BPF 映射相关的问题时，你还可以通过 bpftool 来查看或操作映射的具体内容。比如，你可以通过下面这些命令创建、更新、输出以及删除映射：</p><pre><code class=\"language-c++\">//创建一个哈希表映射，并挂载到/sys/fs/bpf/stats_map(Key和Value的大小都是2字节)\nbpftool map create /sys/fs/bpf/stats_map type hash key 2 value 2 entries 8 name stats_map\n\n//查询系统中的所有映射\nbpftool map\n//示例输出\n//340: hash&nbsp; name stats_map&nbsp; flags 0x0\n//&nbsp; &nbsp; &nbsp; &nbsp; key 2B&nbsp; value 2B&nbsp; max_entries 8&nbsp; memlock 4096B\n\n//向哈希表映射中插入数据\nbpftool map update name stats_map key 0xc1 0xc2 value 0xa1 0xa2\n\n//查询哈希表映射中的所有数据\n \nbpftool map dump name stats_map\n//示例输出\n//key: c1 c2&nbsp; value: a1 a2\n//Found 1 element\n\n//删除哈希表映射\nrm /sys/fs/bpf/stats_map\n</code></pre><h2><strong>BPF 类型格式 (BTF)</strong></h2><p>了解过 BPF 辅助函数和映射之后，我们再来看一个开发 eBPF 程序时最常碰到的问题：内核数据结构的定义。</p><p>在安装 BCC 工具的时候，你可能就注意到了，内核头文件 <code>linux-headers-$(uname -r)</code> 也是必须要安装的一个依赖项。这是因为 BCC 在编译 eBPF 程序时，需要从内核头文件中找到相应的内核数据结构定义。这样，你在调用 <code>bpf_probe_read</code> 时，才能从内存地址中提取到正确的数据类型。</p><p>但是，编译时依赖内核头文件也会带来很多问题。主要有这三个方面：</p><ul>\n<li>首先，在开发 eBPF 程序时，为了获得内核数据结构的定义，就需要引入一大堆的内核头文件；</li>\n<li>其次，内核头文件的路径和数据结构定义在不同内核版本中很可能不同。因此，你在升级内核版本时，就会遇到找不到头文件和数据结构定义错误的问题；</li>\n<li>最后，在很多生产环境的机器中，出于安全考虑，并不允许安装内核头文件，这时就无法得到内核数据结构的定义。<strong>在程序中重定义数据结构</strong>虽然可以暂时解决这个问题，但也很容易把使用着错误数据结构的 eBPF 程序带入新版本内核中运行。</li>\n</ul><p>那么，这么多的问题该怎么解决呢？不用担心，BPF 类型格式（BPF Type Format, BTF）的诞生正是为了解决这些问题。从内核 5.2 开始，只要开启了 <code>CONFIG_DEBUG_INFO_BTF</code>，在编译内核时，内核数据结构的定义就会自动内嵌在内核二进制文件 vmlinux 中。并且，你还可以借助下面的命令，把这些数据结构的定义导出到一个头文件中（通常命名为 <code>vmlinux.h</code>）:</p><pre><code class=\"language-plain\">bpftool btf dump file /sys/kernel/btf/vmlinux format c &gt; vmlinux.h\n</code></pre><p>如下图（图片来自<a href=\"https://www.grant.pizza/blog/vmlinux-header\">GRANT SELTZER博客</a>）所示，有了内核数据结构的定义，你在开发 eBPF 程序时只需要引入一个 <code>vmlinux.h</code> 即可，不用再引入一大堆的内核头文件了。</p><p><img src=\"https://static001.geekbang.org/resource/image/45/20/45bbf696e8620d322d857ceab3871720.jpg?wh=1920x1204\" alt=\"\" title=\"vmlinux.h的使用示意图\"></p><p>同时，借助 BTF、bpftool 等工具，我们也可以更好地了解 BPF 程序的内部信息，这也会让调试变得更加方便。比如，在查看 BPF 映射的内容时，你可以直接看到结构化的数据，而不只是十六进制数值：</p><pre><code class=\"language-c++\"># bpftool map dump id 386\n[\n&nbsp; {\n&nbsp; &nbsp; &nbsp; \"key\": 0,\n&nbsp; &nbsp; &nbsp; \"value\": {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"eth0\": {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"value\": 0,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"ifindex\": 0,\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; \"mac\": []\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; }\n&nbsp; }\n]\n</code></pre><p>解决了内核数据结构的定义问题，接下来的问题就是，<strong>如何让 eBPF 程序在内核升级之后，不需要重新编译就可以直接运行</strong>。eBPF 的一次编译到处执行（Compile Once Run Everywhere，简称 CO-RE）项目借助了 BTF 提供的调试信息，再通过下面的两个步骤，使得 eBPF 程序可以适配不同版本的内核：</p><ul>\n<li>第一，通过对 BPF 代码中的访问偏移量进行重写，解决了不同内核版本中数据结构偏移量不同的问题；</li>\n<li>第二，在 libbpf 中预定义不同内核版本中的数据结构的修改，解决了不同内核中数据结构不兼容的问题。</li>\n</ul><p>BTF和一次编译到处执行带来了很多的好处，但你也需要注意这一点：它们都要求比较新的内核版本（&gt;=5.2），并且需要非常新的发行版（如 Ubuntu 20.10+、RHEL 8.2+ 等）才会默认打开内核配置 <code>CONFIG_DEBUG_INFO_BTF</code>。对于旧版本的内核，虽然它们不会再去内置 BTF 的支持，但开源社区正在尝试通过 <a href=\"https://github.com/aquasecurity/btfhub\">BTFHub</a> 等方法，为它们提供 BTF 调试信息。</p><h2>小结</h2><p>今天，我带你一起梳理了 eBPF 程序跟内核交互的基本方法。</p><p>一个完整的 eBPF 程序，通常包含用户态和内核态两部分：用户态程序需要通过 BPF 系统调用跟内核进行交互，进而完成 eBPF 程序加载、事件挂载以及映射创建和更新等任务；而在内核态中，eBPF 程序也不能任意调用内核函数，而是需要通过 BPF 辅助函数完成所需的任务。尤其是在访问内存地址的时候，必须要借助  <code>bpf_probe_read</code> 系列函数读取内存数据，以确保内存的安全和高效访问。</p><p>在 eBPF 程序需要大块存储时，我们还需要根据应用场景，引入特定类型的 BPF 映射，并借助它向用户空间的程序提供运行状态的数据。</p><p>这一讲的最后，我还带你一起了解了 BTF 和 CO-RE 项目，它们在提供轻量级调试信息的同时，还解决了跨内核版本的兼容性问题。很多开源社区的 eBPF 项目（如 BCC 等）也都在向 BTF 进行迁移。</p><h2>思考题</h2><p>最后，我想邀请你来聊一聊：</p><ol>\n<li>你是如何理解 BPF 系统调用和 BPF 辅助函数的？</li>\n<li>除了今天讲到的内容，bpftool 还提供了哪些有趣的功能呢？给你一个小提示：可以使用 man bpftool 查询它的使用文档。</li>\n</ol><p>期待你在留言区和我讨论，也欢迎把这节课分享给你的同事、朋友。让我们一起在实战中演练，在交流中进步。</p>","comments":[{"had_liked":false,"id":332333,"user_name":"莫名","can_delete":false,"product_type":"c1","uid":1007254,"ip_address":"","ucode":"E28F2602BA25DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/96/a03175bc.jpg","comment_is_top":false,"comment_ctime":1643181102,"is_pvip":false,"replies":[{"id":121419,"content":"非常棒的思考思路👍","user_name":"作者回复","user_name_real":"编辑","uid":1001282,"ctime":1643203595,"ip_address":"","comment_id":332333,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100104501,"comment_content":"倪老师留的思考题比较基础，尝试从另一个角度做下觉得有趣的对比：\n\n1、bpf 系统调用一定程度上参考了 perf_event_open 设计，bpf_attr、perf_event_attr 均包含了大量 union，用于适配不同的 cmd 或者性能监控事件类型。因此，bpf、perf_event_open 接口看似简单，其实是大杂烩。\n\nbpf(int cmd, union bpf_attr *attr, ...) \nperf_event_open(struct perf_event_attr *attr, ...)\n\n2、bpftool 命令设计风格重度参考了 iproute2 软件包中的 ip 命令，用法基本上一致。\n\nUsage: bpftool [OPTIONS] OBJECT { COMMAND | help }\nUsage: ip [ OPTIONS ] OBJECT { COMMAND | help }\n\n无论内核开发还是工具开发，都可以看到设计思路借鉴的影子。工作之余不妨多些学习与思考，也许就可以把大师们比较好的设计思路随手用于手头的任务之中。","like_count":34,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548463,"discussion_content":"非常棒的思考思路👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643203595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115379,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqFcfujkkBkic2ARpPOP4XeEhPNJwA51JJibD79pg4UTA9hS2WnmrSZ0qgiaibdM87dugCeYyNicnYiaFgw/132","nickname":"ermazi","note":"","ucode":"D38B0E9BD701A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624548,"discussion_content":"哪都有你, 同学 跳槽吗?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690695591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332352,"user_name":"Geek_e8988c","can_delete":false,"product_type":"c1","uid":2171451,"ip_address":"","ucode":"E5B2F025A108B3","user_header":"","comment_is_top":false,"comment_ctime":1643185087,"is_pvip":false,"replies":[{"id":121420,"content":"非常欣慰你在看到一个入门示例就能思考这么多的问题。基础入门篇的内容主要侧重在 eBPF 本身，而其应用的方法都包含在实战进阶篇（其实看看目录就知道这些问题都包含在实战进阶篇中）。\n\n不过既然问到了，我就提前先给你介绍一个方便的工具 https:&#47;&#47;github.com&#47;iovisor&#47;bpftrace。想你问到的查询跟踪点函数、查询系统调用格式、快速跟踪一个系统调用、网络socket的跟踪等等它都是支持的，并且用起来就像SHELL脚本一样方便。你可以先学习一下，我们后面的案例中还会讲到它的详细使用方法。","user_name":"作者回复","user_name_real":"编辑","uid":1001282,"ctime":1643204030,"ip_address":"","comment_id":332352,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100104501,"comment_content":"飞哥，你好，看完前两章感觉比较迷糊。没能做到学以致用，或者说举一反三。\n例如第一个ebpf程序，通过trace open系统调用来监控应用的open动作。\n那我实际中，有没有什么快速的方案&#47;套路来完成一些其他的trace，例如我想知道监控那些程序使用了socket&#47;bind(尤其适用于有些短暂进程使用udp发送了一些报文就立马退出了）。\n当我想新增一个trace事件，我的.c需要去包含那些头文件，我的.py需要跟踪那个系统调用。\n这些头文件与系统调用在哪可以找到，如果去找？\n\n希望飞哥大佬能给个大体的框架，思路，谢谢","like_count":8,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548464,"discussion_content":"非常欣慰你在看到一个入门示例就能思考这么多的问题。基础入门篇的内容主要侧重在 eBPF 本身，而其应用的方法都包含在实战进阶篇（其实看看目录就知道这些问题都包含在实战进阶篇中）。\n\n不过既然问到了，我就提前先给你介绍一个方便的工具 https://github.com/iovisor/bpftrace。想你问到的查询跟踪点函数、查询系统调用格式、快速跟踪一个系统调用、网络socket的跟踪等等它都是支持的，并且用起来就像SHELL脚本一样方便。你可以先学习一下，我们后面的案例中还会讲到它的详细使用方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643204030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332680,"user_name":"写点啥呢","can_delete":false,"product_type":"c1","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1643463566,"is_pvip":false,"replies":[{"id":121659,"content":"非常好的问题。ctrl-c其实终止的是用户空间的程序，终止后所有的文件描述符都会释放掉，对应的map和ebpf程序引用都会减到0，进而它们也就被自动回收了。这些都是自动的，不需要在程序里面增加额外的处理逻辑。\n\n当然，在需要长久保持eBPF程序的情境中（比如XDP和TC程序），eBPF程序和map的生命周期是可以在程序内控制的，比如通过 tc、ip 以及 bpftool 等工具（当然它们也都有相应的系统调用）。我们课程后面还会讲到相关的案例。","user_name":"作者回复","user_name_real":"编辑","uid":1001282,"ctime":1643811612,"ip_address":"","comment_id":332680,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100104501,"comment_content":"想请教下老师关于bpf内核态程序的成名周期，比如前几节课的例子，如果我通过ctrl-c终端用户态程序的时候在bpf虚拟机会发生什么呢？我理解应该会结束已经加载的bpf指令，清理map之类的资源等等，具体会有哪些，这些操作是如何在我们程序中自动插入和实现，请老师指点下。","like_count":4,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549288,"discussion_content":"非常好的问题。ctrl-c其实终止的是用户空间的程序，终止后所有的文件描述符都会释放掉，对应的map和ebpf程序引用都会减到0，进而它们也就被自动回收了。这些都是自动的，不需要在程序里面增加额外的处理逻辑。\n\n当然，在需要长久保持eBPF程序的情境中（比如XDP和TC程序），eBPF程序和map的生命周期是可以在程序内控制的，比如通过 tc、ip 以及 bpftool 等工具（当然它们也都有相应的系统调用）。我们课程后面还会讲到相关的案例。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1643811612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332561,"user_name":"不了峰","can_delete":false,"product_type":"c1","uid":1013424,"ip_address":"","ucode":"E23B96D6A3D4EC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/b0/14fec62f.jpg","comment_is_top":false,"comment_ctime":1643341986,"is_pvip":false,"replies":[{"id":121564,"content":"不错的总结👍","user_name":"作者回复","user_name_real":"编辑","uid":1001282,"ctime":1643460891,"ip_address":"","comment_id":332561,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100104501,"comment_content":"BPF 系统调用  --&gt; 发生在 用户态\nBPF 辅助函数  --&gt; 内核态\n---\nroot@ubuntu-impish:&#47;proc# bpftool perf\npid 38110  fd 6: prog_id 572  kprobe  func do_sys_openat2  offset 0\n\nroot@ubuntu-impish:&#47;proc# ps -ef|grep 38110\nroot       38110   38109  0 03:41 pts&#47;2    00:00:02 python3 .&#47;trace_open.py","like_count":2,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548961,"discussion_content":"不错的总结👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643460891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338180,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1647336842,"is_pvip":true,"replies":[{"id":123957,"content":"map是自动删除的，跟它关联的文件描述符关闭后就会删除","user_name":"作者回复","user_name_real":"编辑","uid":1001282,"ctime":1647958835,"ip_address":"","comment_id":338180,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100104501,"comment_content":"老师， bpf 的 map 怎么移除啊？ 没看到 bpftools 的命令","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557770,"discussion_content":"map是自动删除的，跟它关联的文件描述符关闭后就会删除","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647958835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1674369,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","nickname":"Geek_68d3d2","note":"","ucode":"EBD6D881AA7A74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627130,"discussion_content":"直接rm /sys/fs/bpf下的文件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1693820860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120024,"avatar":"https://static001.geekbang.org/account/avatar/00/11/17/18/e4382a8e.jpg","nickname":"有识之士","note":"","ucode":"23F5594193D200","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621703,"discussion_content":"bpf map 生命周期可以参考这篇文章 http://arthurchiao.art/blog/lifetime-of-bpf-objects-zh/ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687523909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333008,"user_name":"Geek_59a6f9","can_delete":false,"product_type":"c1","uid":2102108,"ip_address":"","ucode":"6CDDE9A4E57917","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJlaNica7xRH6LlMNJtrbK0toc1od8YdqLZOD2AbnOZ2QyKC13gvrrL9cOx5dyYNcsHnJkR6K4ibxZQ/132","comment_is_top":false,"comment_ctime":1643955026,"is_pvip":false,"replies":[{"id":121729,"content":"从低版本到高版本的兼容性可以用CO-RE解决（CO-RE只在新版本内核才支持），而反过来就需要在eBPF内部加上额外的代码来处理了。比如根据内核版本作条件编译，低版本内核执行不同的逻辑。","user_name":"作者回复","user_name_real":"编辑","uid":1001282,"ctime":1644116556,"ip_address":"","comment_id":333008,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100104501,"comment_content":"在高版本内核编译运行的ebpf程序，移植到低版本也能直接运行吗？低版本的libbpf 如何感知到高版本内核的修改，从而预定义不同内核版本的数据结构吗？","like_count":1,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549586,"discussion_content":"从低版本到高版本的兼容性可以用CO-RE解决（CO-RE只在新版本内核才支持），而反过来就需要在eBPF内部加上额外的代码来处理了。比如根据内核版本作条件编译，低版本内核执行不同的逻辑。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644116557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365428,"user_name":"│．Sk","can_delete":false,"product_type":"c1","uid":2453415,"ip_address":"上海","ucode":"A2EEB2E9585A77","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/a7/565214bc.jpg","comment_is_top":false,"comment_ctime":1672502253,"is_pvip":false,"replies":[{"id":134633,"content":"不行的，它需要运行的内核也支持BTF。\n\n不过现在最新的bpftool已经支持导出BTF，跟eBPF程序一通分发后也可以执行了。具体可以参考这个博客 https:&#47;&#47;www.inspektor-gadget.io&#47;&#47;blog&#47;2022&#47;03&#47;btfgen-one-step-closer-to-truly-portable-ebpf-programs&#47;","user_name":"作者回复","user_name_real":"编辑","uid":1001282,"ctime":1677500164,"ip_address":"上海","comment_id":365428,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100104501,"comment_content":"倪老师好，\n\n想请教一下，在支持 BTF 的内核中，利用 CO-RE 编译出的 ebpf 程序可执行文件，直接 copy 到低版本不支持 BTF 的内核版本的系统上能正常运行吗？ 谢谢！","like_count":0,"discussions":[{"author":{"id":1001282,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/42/5b55bd1a.jpg","nickname":"倪朋飞","note":"","ucode":"F0FAC195CDE7AC","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606944,"discussion_content":"不行的，它需要运行的内核也支持BTF。\n\n不过现在最新的bpftool已经支持导出BTF，跟eBPF程序一通分发后也可以执行了。具体可以参考这个博客 https://www.inspektor-gadget.io//blog/2022/03/btfgen-one-step-closer-to-truly-portable-ebpf-programs/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677500164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":354598,"user_name":"MoGeJiEr🐔","can_delete":false,"product_type":"c1","uid":1882960,"ip_address":"江苏","ucode":"B7F0477730F294","user_header":"https://static001.geekbang.org/account/avatar/00/1c/bb/50/c8ebd5e1.jpg","comment_is_top":false,"comment_ctime":1660575977,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100104501,"comment_content":"BTF那块是不是没说完阿？不是只介绍了可以使用bpftool生成vmlinux.h头文件嘛？ 怎么后面CO-RE就可以借助BTF的调试信息？这个调试信息哪里来？一头雾水。","like_count":1},{"had_liked":false,"id":342948,"user_name":"woJA1wCgAAbjKldokPvO1h9ZEJTUP8ug","can_delete":false,"product_type":"c1","uid":2930048,"ip_address":"","ucode":"F329F4882868C4","user_header":"","comment_is_top":false,"comment_ctime":1650544183,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100104501,"comment_content":"老师，结构化的数据需要怎么看，bpftool map dump id mapid和bpftool map dump name mapname结果都是一样的16进制数","like_count":1},{"had_liked":false,"id":389025,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1397271,"ip_address":"四川","ucode":"B62BEA525A64A1","user_header":"https://static001.geekbang.org/account/avatar/00/15/52/17/e3015ba5.jpg","comment_is_top":false,"comment_ctime":1711417365,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100104501,"comment_content":"老师，请问下ebpf对系统内核的要求，可以通过容器的操作系统来屏蔽掉对吗？ 不要求物理机节点的内核版本吧？ ","like_count":0},{"had_liked":false,"id":385276,"user_name":"Geek_94444c","can_delete":false,"product_type":"c1","uid":2415951,"ip_address":"四川","ucode":"29D599E99D7A02","user_header":"","comment_is_top":false,"comment_ctime":1702372362,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100104501,"comment_content":"&quot;eBPF 程序最多可以访问 64 个不同的 BPF 映射&quot; \n1. 这句话的意思是单个用户态的ebpf程序能创建64个map，还是主机上所有ebpf程序加起来可以创建64个内核态的ebpf程序？\n2. 用户态的ebpf程序怎么绑定这些map的，有实例吗？","like_count":0},{"had_liked":false,"id":372576,"user_name":"朝东","can_delete":false,"product_type":"c1","uid":1192878,"ip_address":"广东","ucode":"6B87460865DDAC","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/ae/5e05b9dc.jpg","comment_is_top":false,"comment_ctime":1681293789,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100104501,"comment_content":"你好，偶尔遇到个问题，在bpf加载成功后，没看到prink 到pipe 调试打印，重启系统就恢复，不知什么原因？","like_count":0,"discussions":[{"author":{"id":1043470,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/0e/d64d4663.jpg","nickname":"k8svip","note":"","ucode":"89F02243735432","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620305,"discussion_content":"echo 1 &gt; /sys/kernel/tracing/tracing_on","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686040383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370122,"user_name":"小印_zoe","can_delete":false,"product_type":"c1","uid":2308893,"ip_address":"浙江","ucode":"28BA9118B60361","user_header":"https://static001.geekbang.org/account/avatar/00/23/3b/1d/cbfbd93e.jpg","comment_is_top":false,"comment_ctime":1678415005,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100104501,"comment_content":"有没有详细的付费学习群？","like_count":0},{"had_liked":false,"id":358156,"user_name":"张Dave","can_delete":false,"product_type":"c1","uid":2440338,"ip_address":"四川","ucode":"0E8B6FDEB7505B","user_header":"https://static001.geekbang.org/account/avatar/00/25/3c/92/81fa306d.jpg","comment_is_top":false,"comment_ctime":1663980818,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100104501,"comment_content":"老师，请问下，一次编译到处执行，哪里还有更详细的解释呢？\n没太明白文中总结的两点具体是怎么做的？","like_count":0},{"had_liked":false,"id":344958,"user_name":"ヾ(◍°∇°◍)ﾉﾞ","can_delete":false,"product_type":"c1","uid":1044175,"ip_address":"","ucode":"89545632BDA56E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZbPA5RQ2mjUjd571jUXUcBCE7lY5vSMibWn8D5S4PzDZMaAhRPdnRBqYbVOBTJibhJg/132","comment_is_top":false,"comment_ctime":1651896034,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100104501,"comment_content":"老师，请教个问题，就是在比如在jdbc连接的时候，有时候一些防火墙或者VPN什么瞬间的原因会导致这个连接要卡住很长时间（通常是2小时15分），有什么办法可以快速探测并结束这种TCP反馈给客户端，ebpf这个手段可以嘛？","like_count":0},{"had_liked":false,"id":343408,"user_name":"reonard","can_delete":false,"product_type":"c1","uid":1029378,"ip_address":"","ucode":"24F7980E11BA56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b5/02/3bf0509e.jpg","comment_is_top":false,"comment_ctime":1650818868,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100104501,"comment_content":"倪老师好，我试了4.18的内核，也可以用bpftool btf dump file &#47;sys&#47;kernel&#47;btf&#47;vmlinux format c 获得vmlinux.h，是不是就不需要5.2的内核了？","like_count":0,"discussions":[{"author":{"id":1115379,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqFcfujkkBkic2ARpPOP4XeEhPNJwA51JJibD79pg4UTA9hS2WnmrSZ0qgiaibdM87dugCeYyNicnYiaFgw/132","nickname":"ermazi","note":"","ucode":"D38B0E9BD701A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":624547,"discussion_content":"这个工具只是能方便的导出 相应内核的 bpf 头, 跟需不需要高版本没啥关系, 版本的差别在这篇文章中主要是 cmd, map, BTF 支持的差异\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690695431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}