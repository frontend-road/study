{"id":390401,"title":"16 | 代码检查：如何进行静态代码检查？","content":"<p>你好，我是孔令飞。上一讲中，我在讲代码开发的具体步骤时，提到了静态代码检查，今天我就来详细讲讲如何执行静态代码检查。</p><p>在做Go项目开发的过程中，我们肯定需要对Go代码做静态代码检查。虽然Go命令提供了go vet和go tool vet，但是它们检查的内容还不够全面，我们需要一种更加强大的静态代码检查工具。</p><p>其实，Go生态中有很多这样的工具，也不乏一些比较优秀的。今天我想给你介绍的golangci-lint，是目前使用最多，也最受欢迎的静态代码检查工具，我们的IAM实战项目也用到了它。</p><p>接下来，我就从golangci-lint的优点、golangci-lint提供的命令和选项、golangci-lint的配置这三个方面来向你介绍下它。在你了解这些基础知识后，我会带着你使用golangci-lint进行静态代码检查，让你熟悉操作，在这个基础上，再把我使用golangci-lint时总结的一些经验技巧分享给你。</p><h2>为什么选择golangci-lint做静态代码检查？</h2><p>选择golangci-lint，是因为它具有其他静态代码检查工具不具备的一些优点。在我看来，它的核心优点至少有这些：</p><ul>\n<li>速度非常快：golangci-lint是基于gometalinter开发的，但是平均速度要比gometalinter快5倍。golangci-lint速度快的原因有三个：可以并行检查代码；可以复用go build缓存；会缓存分析结果。</li>\n<li>可配置：支持YAML格式的配置文件，让检查更灵活，更可控。</li>\n<li>IDE集成：可以集成进多个主流的IDE，例如 VS Code、GNU Emacs、Sublime Text、Goland等。</li>\n<li>linter聚合器：1.41.1版本的golangci-lint集成了76个linter，不需要再单独安装这76个linter。并且golangci-lint还支持自定义linter。</li>\n<li>最小的误报数：golangci-lint调整了所集成linter的默认设置，大幅度减少了误报。</li>\n<li>良好的输出：输出的结果带有颜色、代码行号和linter标识，易于查看和定位。</li>\n</ul><!-- [[[read_end]]] --><p>下图是一个golangci-lint的检查结果：</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/d4/ed9c1d775e31a8a5b60a5a6882d0bed4.png?wh=2527x563\" alt=\"\"></p><p>你可以看到，输出的检查结果中包括如下信息：</p><ul>\n<li>检查出问题的源码文件、行号和错误行内容。</li>\n<li>出问题的原因，也就是打印出不符合检查规则的原因。</li>\n<li>报错的linter。</li>\n</ul><p>通过查看golangci-lint的输出结果，可以准确地定位到报错的位置，快速弄明白报错的原因，方便开发者修复。</p><p>除了上述优点之外，在我看来golangci-lint还有一个非常大的优点：<strong>当前更新迭代速度很快，不断有新的linter被集成到golangci-lint中。</strong>有这么全的linter为你的代码保驾护航，你在交付代码时肯定会更有自信。</p><p>目前，有很多公司/项目使用了golangci-lint工具作为静态代码检查工具，例如 Google、Facebook、Istio、Red Hat OpenShift等。</p><h2>golangci-lint提供了哪些命令和选项？</h2><p>在使用之前，首先需要<strong>安装golangci-lint</strong>。golangci-lint的安装方法也很简单，你只需要执行以下命令，就可以安装了。</p><pre><code>$ go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.41.1\n$ golangci-lint version # 输出 golangci-lint 版本号，说明安装成功\ngolangci-lint has version v1.39.0 built from (unknown, mod sum: &quot;h1:aAUjdBxARwkGLd5PU0vKuym281f2rFOyqh3GB4nXcq8=&quot;) on (unknown)\n</code></pre><p>这里注意，为了避免安装失败，强烈建议你安装golangci-lint releases page中的指定版本，例如 v1.41.1。</p><p>另外，还建议你定期更新 golangci-lint 的版本，因为该项目正在被积极开发并不断改进。</p><p>安装之后，就可以使用了。我们可以通过执行 <code>golangci-lint -h</code> 查看其用法，golangci-lint支持的<strong>子命令</strong>见下表：</p><p><img src=\"https://static001.geekbang.org/resource/image/34/42/34617a68604b7b5613948f89230c7a42.png?wh=1376x1015\" alt=\"\"></p><p>此外，golangci-lint还支持一些<strong>全局选项</strong>。全局选项是指适用于所有子命令的选项，golangci-lint支持的全局选项如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/79/88/79e517e6a7fd3882ce30320f28aa7088.png?wh=1339x1063\" alt=\"\"></p><p>接下来，我就详细介绍下golangci-lint支持的核心子命令：run、cache、completion、config、linters。</p><h3>run命令</h3><p>run命令执行golangci-lint，对代码进行检查，是golangci-lint最为核心的一个命令。run没有子命令，但有很多选项。run命令的具体使用方法，我会在讲解如何执行静态代码检查的时候详细介绍。</p><h3>cache命令</h3><p>cache命令用来进行缓存控制，并打印缓存的信息。它包含两个子命令：</p><ul>\n<li>clean用来清除cache，当我们觉得cache的内容异常，或者cache占用空间过大时，可以通过<code>golangci-lint cache clean</code>清除cache。</li>\n<li>status用来打印cache的状态，比如cache的存放目录和cache的大小，例如：</li>\n</ul><pre><code>$ golangci-lint cache status\nDir: /home/colin/.cache/golangci-lint\nSize: 773.4KiB\n</code></pre><h3>completion命令</h3><p>completion命令包含4个子命令bash、fish、powershell和zsh，分别用来输出bash、fish、powershell和zsh的自动补全脚本。</p><p>下面是一个配置bash自动补全的示例：</p><pre><code>$ golangci-lint completion bash &gt; ~/.golangci-lint.bash\n$ echo &quot;source '$HOME/.golangci-lint.bash'&quot; &gt;&gt; ~/.bashrc\n$ source ~/.bashrc\n</code></pre><p>执行完上面的命令，键入如下命令，即可自动补全子命令：</p><pre><code>$ golangci-lint comp&lt;TAB&gt;\n</code></pre><p>上面的命令行会自动补全为<code>golangci-lint completion</code> 。</p><h3>config命令</h3><p>config命令可以打印golangci-lint当前使用的配置文件路径，例如：</p><pre><code>$ golangci-lint config path\n.golangci.yaml\n</code></pre><h3>linters命令</h3><p>linters命令可以打印出golangci-lint所支持的linter，并将这些linter分成两类，分别是配置为启用的linter和配置为禁用的linter，例如：</p><pre><code>$ golangci-lint linters\nEnabled by your configuration linters:\n...\ndeadcode: Finds unused code [fast: true, auto-fix: false]\n...\nDisabled by your configuration linters:\nexportloopref: checks for pointers to enclosing loop variables [fast: true, auto-fix: false]\n...\n</code></pre><p>上面我介绍了golangci-lint提供的命令，接下来，我们再来看下golangci-lint的配置。</p><h2>golangci-lint配置</h2><p>和其他linter相比，golangci-lint一个非常大的优点是使用起来非常灵活，这要得益于它对自定义配置的支持。</p><p>golangci-lint支持两种配置方式，分别是命令行选项和配置文件。如果bool/string/int的选项同时在命令行选项和配置文件中被指定，命令行的选项就会覆盖配置文件中的选项。如果是slice类型的选项，则命令行和配置中的配置会进行合并。</p><p><code>golangci-lint run</code> 支持很多<strong>命令行选项</strong>，可通过<code>golangci-lint run -h</code>查看，这里选择一些比较重要的选项进行介绍，见下表：</p><p><img src=\"https://static001.geekbang.org/resource/image/ac/fa/ac6098cf64cde7b8326cfd3508b04dfa.jpg?wh=2284x3988\" alt=\"\"></p><p>此外，我们还可以通过golangci-lint<strong>配置文件</strong>进行配置，默认的配置文件名为.golangci.yaml、.golangci.toml、.golangci.json，可以通过<code>-c</code>选项指定配置文件名。通过配置文件，可以实现下面几类功能：</p><ul>\n<li>golangci-lint本身的一些选项，比如超时、并发，是否检查<code>*_test.go</code>文件等。</li>\n<li>配置需要忽略的文件和文件夹。</li>\n<li>配置启用哪些linter，禁用哪些linter。</li>\n<li>配置输出格式。</li>\n<li>golangci-lint支持很多linter，其中有些linter支持一些配置项，这些配置项可以在配置文件中配置。</li>\n<li>配置符合指定正则规则的文件可以忽略的linter。</li>\n<li>设置错误严重级别，像日志一样，检查错误也是有严重级别的。</li>\n</ul><p>更详细的配置内容，你可以参考<a href=\"https://golangci-lint.run/usage/configuration/\">Configuration</a>。另外，你也可以参考IAM项目的golangci-lint配置<a href=\"https://github.com/marmotedu/iam/blob/master/.golangci.yaml\">.golangci.yaml</a>。.golangci.yaml里面的一些配置，我建议你一定要设置，具体如下：</p><pre><code>run:\n  skip-dirs: # 设置要忽略的目录\n    - util\n    - .*~\n    - api/swagger/docs\n  skip-files: # 设置不需要检查的go源码文件，支持正则匹配，这里建议包括：_test.go\n    - &quot;.*\\\\.my\\\\.go$&quot;\n    - _test.go\nlinters-settings:\n  errcheck:\n    check-type-assertions: true # 这里建议设置为true，如果确实不需要检查，可以写成`num, _ := strconv.Atoi(numStr)`\n    check-blank: false\n  gci:\n    # 将以`github.com/marmotedu/iam`开头的包放在第三方包后面\n    local-prefixes: github.com/marmotedu/iam\n  godox:\n    keywords: # 建议设置为BUG、FIXME、OPTIMIZE、HACK\n      - BUG\n      - FIXME\n      - OPTIMIZE\n      - HACK\n  goimports:\n    # 设置哪些包放在第三方包后面，可以设置多个包，逗号隔开\n    local-prefixes: github.com/marmotedu/iam\n  gomoddirectives: # 设置允许在go.mod中replace的包\n    replace-local: true\n    replace-allow-list:\n      - github.com/coreos/etcd\n      - google.golang.org/grpc\n      - github.com/marmotedu/api\n      - github.com/marmotedu/component-base\n      - github.com/marmotedu/marmotedu-sdk-go\n  gomodguard: # 下面是根据需要选择可以使用的包和版本，建议设置\n    allowed:\n      modules:\n        - gorm.io/gorm\n        - gorm.io/driver/mysql\n        - k8s.io/klog\n      domains: # List of allowed module domains\n        - google.golang.org\n        - gopkg.in\n        - golang.org\n        - github.com\n        - go.uber.org\n    blocked:\n      modules:\n        - github.com/pkg/errors:\n            recommendations:\n              - github.com/marmotedu/errors\n            reason: &quot;`github.com/marmotedu/errors` is the log package used by marmotedu projects.&quot;\n      versions:\n        - github.com/MakeNowJust/heredoc:\n            version: &quot;&gt; 2.0.9&quot;\n            reason: &quot;use the latest version&quot;\n      local_replace_directives: false\n  lll:\n    line-length: 240 # 这里可以设置为240，240一般是够用的\n  importas: # 设置包的alias，根据需要设置\n    jwt: github.com/appleboy/gin-jwt/v2         \n    metav1: github.com/marmotedu/component-base/pkg/meta/v1\n</code></pre><p>需要注意的是，golangci-lint不建议使用 <code>enable-all: true</code> 选项，为了尽可能使用最全的linters，我们可以使用以下配置：</p><pre><code>linters: \n  disable-all: true  \n  enable: # enable下列出 &lt;期望的所有linters&gt;\n    - typecheck\n    - ... \n</code></pre><p><code>&lt;期望的所有linters&gt; = &lt;golangci-lint支持的所有linters&gt; - &lt;不期望执行的linters&gt;</code>，我们可以通过执行以下命令来获取：</p><pre><code>$ ./scripts/print_enable_linters.sh\n    - asciicheck\n    - bodyclose\n    - cyclop\n    - deadcode\n    - ...\n</code></pre><p>将以上输出结果替换掉.golangci.yaml配置文件中的 <code>linters.enable</code> 部分即可。</p><p>上面我们介绍了与golangci-lint相关的一些基础知识，接下来我就给你详细展示下，如何使用golangci-lint进行静态代码检查。</p><h2>如何使用golangci-lint进行静态代码检查？</h2><p>要对代码进行静态检查，只需要执行 <code>golangci-lint run</code> 命令即可。接下来，我会先给你介绍5种常见的golangci-lint使用方法。</p><ol>\n<li>对当前目录及子目录下的所有Go文件进行静态代码检查：</li>\n</ol><pre><code>$ golangci-lint run\n</code></pre><p>命令等效于<code>golangci-lint run ./...</code>。</p><ol start=\"2\">\n<li>对指定的Go文件或者指定目录下的Go文件进行静态代码检查：</li>\n</ol><pre><code>$ golangci-lint run dir1 dir2/... dir3/file1.go\n</code></pre><p>这里需要你注意：上述命令不会检查dir1下子目录的Go文件，如果想递归地检查一个目录，需要在目录后面追加<code>/...</code>，例如：<code>dir2/...</code>。</p><ol start=\"3\">\n<li>根据指定配置文件，进行静态代码检查：</li>\n</ol><pre><code>$ golangci-lint run -c .golangci.yaml ./...\n</code></pre><ol start=\"4\">\n<li>运行指定的linter：</li>\n</ol><p>golangci-lint可以在不指定任何配置文件的情况下运行，这会运行默认启用的linter，你可以通过<code>golangci-lint help linters</code>查看它。</p><p>你可以传入参数<code>-E/--enable</code>来使某个linter可用，也可以使用<code>-D/--disable</code>参数来使某个linter不可用。下面的示例仅仅启用了errcheck linter：</p><pre><code>$ golangci-lint run --no-config --disable-all -E errcheck ./...\n</code></pre><p>这里你需要注意，默认情况下，golangci-lint会从当前目录一层层往上寻找配置文件名<code>.golangci.yaml</code>、<code>.golangci.toml</code>、<code>.golangci.json</code>直到根（/）目录。如果找到，就以找到的配置文件作为本次运行的配置文件，所以为了防止读取到未知的配置文件，可以用 <code>--no-config</code> 参数使golangci-lint不读取任何配置文件。</p><ol start=\"5\">\n<li>禁止运行指定的liner：</li>\n</ol><p>如果我们想禁用某些linter，可以使用<code>-D</code>选项。</p><pre><code>$ golangci-lint run --no-config -D godot,errcheck\n</code></pre><p>在使用golangci-lint进行代码检查时，可能会有很多误报。所谓的误报，其实是我们希望golangci-lint的一些linter能够容忍某些issue。那么如何尽可能减少误报呢？golangci-lint也提供了一些途径，我建议你使用下面这三种：</p><ul>\n<li>在命令行中添加<code>-e</code>参数，或者在配置文件的<code>issues.exclude</code>部分设置要排除的检查错误。你也可以使用<code>issues.exclude-rules</code>来配置哪些文件忽略哪些linter。</li>\n<li>通过<code>run.skip-dirs</code>、<code>run.skip-files</code>或者<code>issues.exclude-rules</code>配置项，来忽略指定目录下的所有Go文件，或者指定的Go文件。</li>\n<li>通过在Go源码文件中添加<code>//nolint</code>注释，来忽略指定的代码行。</li>\n</ul><p>因为golangci-lint设置了很多linters，对于一个大型项目，启用所有的linter会检查出很多问题，并且每个项目对linter检查的粒度要求也不一样，所以glangci-lint<strong>使用nolint标记来开关某些检查项</strong>，不同位置的nolint标记效果也会不一样。接下来我想向你介绍nolint的几种用法。</p><ol>\n<li>忽略某一行所有linter的检查</li>\n</ol><pre><code>var bad_name int //nolint\n</code></pre><ol start=\"2\">\n<li>忽略某一行指定linter的检查，可以指定多个linter，用逗号 <code>,</code> 隔开。</li>\n</ol><pre><code>var bad_name int //nolint:golint,unused\n</code></pre><ol start=\"3\">\n<li>忽略某个代码块的检查。</li>\n</ol><pre><code>//nolint\nfunc allIssuesInThisFunctionAreExcluded() *string {\n  // ...\n}\n\n//nolint:govet\nvar (\n  a int\n  b int\n)\n</code></pre><ol start=\"4\">\n<li>忽略某个文件的指定linter检查。</li>\n</ol><p>在package xx 上面一行添加<code>//nolint</code>注释。</p><pre><code>//nolint:unparam\npackage pkg\n...\n</code></pre><p>在使用nolint的过程中，有3个地方需要你注意。</p><p>首先，如果启用了nolintlint，你就需要在<code>//nolint</code>后面添加nolint的原因<code>// xxxx</code>。</p><p>其次，你使用的应该是<code>//nolint</code>而不是<code>// nolint</code>。因为根据Go的规范，需要程序读取的注释//后面不应该有空格。</p><p>最后，如果要忽略所有linter，可以用<code>//nolint</code>；如果要忽略某个指定的linter，可以用<code>//nolint:&lt;linter1&gt;,&lt;linter2&gt;</code>。</p><h2>golangci-lint使用技巧</h2><p>我在使用golangci-lint时，总结了一些经验技巧，放在这里供你参考，希望能够帮助你更好地使用golangci-lint。</p><p><strong>技巧1：第一次修改，可以按目录修改。</strong></p><p>如果你第一次使用golangci-lint检查你的代码，一定会有很多错误。为了减轻修改的压力，可以按目录检查代码并修改。这样可以有效减少失败条数，减轻修改压力。</p><p>当然，如果错误太多，一时半会儿改不完，想以后慢慢修改或者干脆不修复存量的issues，那么你可以使用golangci-lint的 <code>--new-from-rev</code> 选项，只检查新增的code，例如：</p><pre><code>$ golangci-lint run --new-from-rev=HEAD~1\n</code></pre><p><strong>技巧2：按文件修改，减少文件切换次数，提高修改效率。</strong></p><p>如果有很多检查错误，涉及很多文件，建议先修改一个文件，这样就不用来回切换文件。可以通过grep过滤出某个文件的检查失败项，例如：</p><pre><code>$ golangci-lint run ./...|grep pkg/storage/redis_cluster.go\npkg/storage/redis_cluster.go:16:2: &quot;github.com/go-redis/redis/v7&quot; imported but not used (typecheck)\npkg/storage/redis_cluster.go:82:28: undeclared name: `redis` (typecheck)\npkg/storage/redis_cluster.go:86:14: undeclared name: `redis` (typecheck)\n...\n</code></pre><p><strong>技巧3：把linters-setting.lll.line-length设置得大一些。</strong></p><p>在Go项目开发中，为了易于阅读代码，通常会将变量名/函数/常量等命名得有意义，这样很可能导致每行的代码长度过长，很容易超过<code>lll</code> linter设置的默认最大长度80。这里建议将<code>linters-setting.lll.line-length</code>设置为120/240。</p><p><strong>技巧4：尽可能多地使用golangci-lint提供的linter。</strong></p><p>golangci-lint集成了很多linters，可以通过如下命令查看：</p><pre><code>$ golangci-lint linters\nEnabled by your configuration linters:\ndeadcode: Finds unused code [fast: true, auto-fix: false]\n...\nvarcheck: Finds unused global variables and constants [fast: true, auto-fix: false]\n\nDisabled by your configuration linters:\nasciicheck: Simple linter to check that your code does not contain non-ASCII identifiers [fast: true, auto-fix: false]\n...\nwsl: Whitespace Linter - Forces you to use empty lines! [fast: true, auto-fix: false]\n</code></pre><p>这些linter分为两类，一类是默认启用的，另一类是默认禁用的。每个linter都有两个属性：</p><ul>\n<li>fast：true/false，如果为true，说明该linter可以缓存类型信息，支持快速检查。因为第一次缓存了这些信息，所以后续的运行会非常快。</li>\n<li>auto-fix：true/false，如果为true说明该linter支持自动修复发现的错误；如果为false说明不支持自动修复。</li>\n</ul><p>如果配置了golangci-lint配置文件，则可以通过命令<code>golangci-lint help linters</code>查看在当前配置下启用和禁用了哪些linter。golangci-lint也支持自定义linter插件，具体你可以参考：<a href=\"https://golangci-lint.run/contributing/new-linters\">New linters</a>。</p><p>在使用golangci-lint的时候，我们要尽可能多的使用linter。使用的linter越多，说明检查越严格，意味着代码越规范，质量越高。如果时间和精力允许，建议打开golangci-lint提供的所有linter。</p><p><strong>技巧5：每次修改代码后，都要执行golangci-lint。</strong></p><p>每次修改完代码后都要执行golangci-lint，一方面可以及时修改不规范的地方，另一方面可以减少错误堆积，减轻后面的修改压力。</p><p><strong>技巧6：建议在根目录下放一个通用的golangci-lint配置文件。</strong></p><p>在<code>/</code>目录下存放通用的golangci-lint配置文件，可以让你不用为每一个项目都配置golangci-lint。当你需要为某个项目单独配置golangci-lint时，只需在该项目根目录下增加一个项目级别的golangci-lint配置文件即可。</p><h2>总结</h2><p>Go项目开发中，对代码进行静态代码检查是必要的操作。当前有很多优秀的静态代码检查工具，但golangci-lint因为具有检查速度快、可配置、少误报、内置了大量linter等优点，成为了目前最受欢迎的静态代码检查工具。</p><p>golangci-lint功能非常强大，支持诸如run、cache、completion、linters等命令。其中最常用的是run命令，run命令可以通过以下方式来进行静态代码检查：</p><pre><code>$ golangci-lint run #  对当前目录及子目录下的所有Go文件进行静态代码检查\n$ golangci-lint run dir1 dir2/... dir3/file1.go # 对指定的Go文件或者指定目录下的Go文件进行静态代码检查\n$ golangci-lint run -c .golangci.yaml ./... # 根据指定配置文件，进行静态代码检查\n$ golangci-lint run --no-config --disable-all -E errcheck ./... # 运行指定的 errcheck linter\n$ golangci-lint run --no-config -D godot,errcheck # 禁止运行指定的godot,errcheck liner\n</code></pre><p>此外，golangci-lint还支持 <code>//nolint</code> 、<code>//nolint:golint,unused</code> 等方式来减少误报。</p><p>最后，我分享了一些自己使用golangci-lint时总结的经验。例如：第一次修改，可以按目录修改；按文件修改，减少文件切换次数，提高修改效率；尽可能多地使用golangci-lint提供的linter。希望这些建议对你使用golangci-lint有一定帮助。</p><h2>课后练习</h2><ol>\n<li>执行<code>golangci-lint linters</code>命令，查看golangci-lint支持哪些linter，以及这些linter的作用。</li>\n<li>思考下，如何在golangci-lint中集成自定义的linter。</li>\n</ol><p>如果遇到任何疑问，欢迎你在留言区与我交流讨论，我们下一讲见。</p>","neighbors":{"left":{"article_title":"15 | 研发流程实战：IAM项目是如何进行研发流程管理的？","id":389649},"right":{"article_title":"17 | API 文档：如何生成 Swagger API 文档 ？","id":391142}},"comments":[{"had_liked":false,"id":300271,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1625072292,"is_pvip":false,"replies":[{"id":"108923","content":"在ide中集成，每个文件都检查，非常好的思路。但Ci的时间也需要用到golangci-lint。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1625273434,"ip_address":"","comment_id":300271,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48869712548","product_id":100079601,"comment_content":"我使用vim+ale+golangci-lint做Go的静态代码检查，编写代码的过程中保存文件时自动触发检查，第一时间在文件内就给出了错误或警告的提示信息，直接按提示修复即可，基本上用不着在命令行执行golangci-lint命令。而且配置了package级别的检查，不存在因单文件检查出现的误报。","like_count":11,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522696,"discussion_content":"在ide中集成，每个文件都检查，非常好的思路。但Ci的时间也需要用到golangci-lint。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625273434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306547,"user_name":"Sch0ng","can_delete":false,"product_type":"c1","uid":1145554,"ip_address":"","ucode":"73F6113931B1AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","comment_is_top":false,"comment_ctime":1628604423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14513506311","product_id":100079601,"comment_content":"使用golangci-lint做静态代码检查。检查速度快，功能强大，配置灵活，社区活跃，许多大公司在用。<br>静态代码检查可以守住代码质量的底线。","like_count":3},{"had_liked":false,"id":300653,"user_name":"demon","can_delete":false,"product_type":"c1","uid":2646309,"ip_address":"","ucode":"ACD3F3C694E02E","user_header":"https://static001.geekbang.org/account/avatar/00/28/61/25/b646d049.jpg","comment_is_top":false,"comment_ctime":1625289656,"is_pvip":false,"replies":[{"id":"108956","content":"goland也是需要配置的。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1625388960,"ip_address":"","comment_id":300653,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14510191544","product_id":100079601,"comment_content":"如果使用的IDE像goland这种，自身就带静态代码检查吧？","like_count":3,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522787,"discussion_content":"goland也是需要配置的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625388960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314547,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1633194991,"is_pvip":false,"replies":[{"id":"114074","content":"nolintlint：用来检查&#47;&#47;nolint的格式是否是&#47;&#47; nolint: gomnd &#47;&#47; xxx这种格式。xxx是nolint的原因，例如：<br>&#47;&#47; nolint:unused &#47;&#47; may be reused in the feature, or just show a migrate usage.<br><br>nolintlint可以再.golangci.yaml文件中启用和设置：<br>  nolintlint:<br>    # Enable to ensure that nolint directives are all used. Default is true.<br>    allow-unused: true<br>    # Disable to ensure that nolint directives don&#39;t have a leading space. Default is true.<br>    allow-leading-space: true<br>    # Exclude following linters from requiring an explanation.  Default is [].<br>    allow-no-explanation: []<br>    # Enable to require an explanation of nonzero length after each nolint directive. Default is false.<br>    require-explanation: false<br>    # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.<br>    require-specific: true<br>","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1633663067,"ip_address":"","comment_id":314547,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5928162287","product_id":100079601,"comment_content":"孔老板，这句话没太理解：“首先，如果启用了 nolintlint，你就需要在&#47;&#47;nolint后面添加 nolint 的原因&#47;&#47; xxxx。”<br><br>麻烦能再解释一下吗？","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527718,"discussion_content":"nolintlint：用来检查//nolint的格式是否是// nolint: gomnd // xxx这种格式。xxx是nolint的原因，例如：\n// nolint:unused // may be reused in the feature, or just show a migrate usage.\n\nnolintlint可以再.golangci.yaml文件中启用和设置：\n  nolintlint:\n    # Enable to ensure that nolint directives are all used. Default is true.\n    allow-unused: true\n    # Disable to ensure that nolint directives don&amp;#39;t have a leading space. Default is true.\n    allow-leading-space: true\n    # Exclude following linters from requiring an explanation.  Default is [].\n    allow-no-explanation: []\n    # Enable to require an explanation of nonzero length after each nolint directive. Default is false.\n    require-explanation: false\n    # Enable to require nolint directives to mention the specific linter being suppressed. Default is false.\n    require-specific: true\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633663067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248326,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","nickname":"多选参数","note":"","ucode":"B2294D80AB075F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537855,"discussion_content":"你使用的应该是//nolint而不是// nolint，那么格式不应该是 //nolint:unused // may be reused in the feature, or just show a migrate usage.  也就是 // 和 nolint 之间是没有空格的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639225704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312709,"user_name":"yk","can_delete":false,"product_type":"c1","uid":1363131,"ip_address":"","ucode":"5F3F199EB45CE3","user_header":"","comment_is_top":false,"comment_ctime":1631948683,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5926915979","product_id":100079601,"comment_content":"贼有用","like_count":1},{"had_liked":false,"id":350566,"user_name":"Jone_乔泓恺","can_delete":false,"product_type":"c1","uid":1407941,"ip_address":"","ucode":"158154301D5E40","user_header":"https://static001.geekbang.org/account/avatar/00/15/7b/c5/35f92dad.jpg","comment_is_top":false,"comment_ctime":1657006884,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657006884","product_id":100079601,"comment_content":"老师：文中【技巧 4：尽可能多地使用 golangci-lint 提供的 linter】 中的两个查看 linters 的命令是不是放反了？<br>【golangci-lint 集成了很多 linters，可以通过如下命令查看：】`golangci-lint help linters`<br>【如果配置了 golangci-lint 配置文件，则可以通过命令golangci-lint help linters查看在当前配置下启用和禁用了哪些 linter】`golangci-lint linters`<br>","like_count":0},{"had_liked":false,"id":349696,"user_name":"HappyHasson","can_delete":false,"product_type":"c1","uid":2911084,"ip_address":"","ucode":"B84CC43E349CFA","user_header":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","comment_is_top":false,"comment_ctime":1656233501,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656233501","product_id":100079601,"comment_content":"怎么联系老师呢，有项目问题想请教？","like_count":0},{"had_liked":false,"id":349565,"user_name":"HappyHasson","can_delete":false,"product_type":"c1","uid":2911084,"ip_address":"","ucode":"B84CC43E349CFA","user_header":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","comment_is_top":false,"comment_ctime":1656069248,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656069248","product_id":100079601,"comment_content":"如何在 golangci-lint 中集成自定义的 linter？","like_count":0},{"had_liked":false,"id":323521,"user_name":"yandongxiao","can_delete":false,"product_type":"c1","uid":1017700,"ip_address":"","ucode":"D397F4DB0109C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/64/3882d90d.jpg","comment_is_top":false,"comment_ctime":1637944620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637944620","product_id":100079601,"comment_content":"总结：<br>  1. 解释了 golangci-lint 为什么如此受欢迎<br>  2. 介绍了 golangci-lint 工具的各个子命令，以及它们的作用；<br>  3. 介绍了 config 文件的作用作用<br>  4. 介绍了 golangci-lint run 命令的五种执行方式<br>  5. 介绍了 代码中如何忽略 linter 的检查<br>  6. 介绍 linter 的使用技巧：只对新增代码进行检查。","like_count":0},{"had_liked":false,"id":320955,"user_name":"咖梵冰雨","can_delete":false,"product_type":"c1","uid":2226991,"ip_address":"","ucode":"E36B14C08B4AC0","user_header":"https://static001.geekbang.org/account/avatar/00/21/fb/2f/ae053a45.jpg","comment_is_top":false,"comment_ctime":1636596909,"is_pvip":false,"replies":[{"id":"116888","content":"看下是不是go的安装路径有问题，不是标准的二进制存放路径。其实你这个问题，我没有遇到过，但我网上搜到了相似的问题，里面会有你想要的解释：<br>https:&amp;#47;&amp;#47;gocn.vip&amp;#47;topics&amp;#47;11648<br><br>像这种错误，你可以自己尝试先解决，解决的过程也是学习的过程","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1637078280,"ip_address":"","comment_id":320955,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636596909","product_id":100079601,"comment_content":"&quot;D:\\Program Files\\Go\\bin\\golangci-lint.exe&quot; run D:\\www\\golang\\test\\main.go<br>level=error msg=&quot;Running error: context loading failed: failed to load packages: failed to load with go&#47;packages: err: go resolves to executable in current directory (.\\\\go.exe): stderr: &quot;<br><br>window golang 配置external Tools报这个错误，请问是什么原因","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530513,"discussion_content":"看下是不是go的安装路径有问题，不是标准的二进制存放路径。其实你这个问题，我没有遇到过，但我网上搜到了相似的问题，里面会有你想要的解释：\nhttps://gocn.vip/topics/11648\n\n像这种错误，你可以自己尝试先解决，解决的过程也是学习的过程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637078280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}