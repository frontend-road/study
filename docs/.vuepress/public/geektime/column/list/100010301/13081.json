{"id":13081,"title":"10 | Java对象的内存布局","content":"<p>在Java程序中，我们拥有多种新建对象的方式。除了最为常见的new语句之外，我们还可以通过反射机制、Object.clone方法、反序列化以及Unsafe.allocateInstance方法来新建对象。</p>\n<p>其中，Object.clone方法和反序列化通过直接复制已有的数据，来初始化新建对象的实例字段。Unsafe.allocateInstance方法则没有初始化实例字段，而new语句和反射机制，则是通过调用构造器来初始化实例字段。</p>\n<p>以new语句为例，它编译而成的字节码将包含用来请求内存的new指令，以及用来调用构造器的invokespecial指令。</p>\n<pre><code>// Foo foo = new Foo(); 编译而成的字节码\n  0 new Foo\n  3 dup\n  4 invokespecial Foo()\n  7 astore_1\n</code></pre>\n<p>提到构造器，就不得不提到Java对构造器的诸多约束。首先，如果一个类没有定义任何构造器的话， Java编译器会自动添加一个无参数的构造器。</p>\n<pre><code>// Foo类构造器会调用其父类Object的构造器\npublic Foo();\n  0 aload_0 [this]\n  1 invokespecial java.lang.Object() [8]\n  4 return\n</code></pre><!-- [[[read_end]]] -->\n<p>然后，子类的构造器需要调用父类的构造器。如果父类存在无参数构造器的话，该调用可以是隐式的，也就是说Java编译器会自动添加对父类构造器的调用。但是，如果父类没有无参数构造器，那么子类的构造器则需要显式地调用父类带参数的构造器。</p>\n<p>显式调用又可分为两种，一是直接使用“super”关键字调用父类构造器，二是使用“this”关键字调用同一个类中的其他构造器。无论是直接的显式调用，还是间接的显式调用，都需要作为构造器的第一条语句，以便优先初始化继承而来的父类字段。（不过这可以通过调用其他生成参数的方法，或者字节码注入来绕开。）</p>\n<p>总而言之，当我们调用一个构造器时，它将优先调用父类的构造器，直至Object类。这些构造器的调用者皆为同一对象，也就是通过new指令新建而来的对象。</p>\n<p>你应该已经发现了其中的玄机：通过new指令新建出来的对象，它的内存其实涵盖了所有父类中的实例字段。也就是说，虽然子类无法访问父类的私有实例字段，或者子类的实例字段隐藏了父类的同名实例字段，但是子类的实例还是会为这些父类实例字段分配内存的。</p>\n<p>这些字段在内存中的具体分布是怎么样的呢？今天我们就来看看对象的内存布局。</p>\n<h2>压缩指针</h2>\n<p>在Java虚拟机中，每个Java对象都有一个对象头（object header），这个由标记字段和类型指针所构成。其中，标记字段用以存储Java虚拟机有关该对象的运行数据，如哈希码、GC信息以及锁信息，而类型指针则指向该对象的类。</p>\n<p>在64位的Java虚拟机中，对象头的标记字段占64位，而类型指针又占了64位。也就是说，每一个Java对象在内存中的额外开销就是16个字节。以Integer类为例，它仅有一个int类型的私有字段，占4个字节。因此，每一个Integer对象的额外内存开销至少是400%。这也是为什么Java要引入基本类型的原因之一。</p>\n<p>为了尽量较少对象的内存使用量，64位Java虚拟机引入了压缩指针[1]的概念（对应虚拟机选项-XX:+UseCompressedOops，默认开启），将堆中原本64位的Java对象指针压缩成32位的。</p>\n<p>这样一来，对象头中的类型指针也会被压缩成32位，使得对象头的大小从16字节降至12字节。当然，压缩指针不仅可以作用于对象头的类型指针，还可以作用于引用类型的字段，以及引用类型数组。</p>\n<p>那么压缩指针是什么原理呢？</p>\n<p>打个比方，路上停着的全是房车，而且每辆房车恰好占据两个停车位。现在，我们按照顺序给它们编号。也就是说，停在0号和1号停车位上的叫0号车，停在2号和3号停车位上的叫1号车，依次类推。</p>\n<p>原本的内存寻址用的是车位号。比如说我有一个值为6的指针，代表第6个车位，那么沿着这个指针可以找到3号车。现在我们规定指针里存的值是车号，比如3指代3号车。当需要查找3号车时，我便可以将该指针的值乘以2，再沿着6号车位找到3号车。</p>\n<p>这样一来，32位压缩指针最多可以标记2的32次方辆车，对应着2的33次方个车位。当然，房车也有大小之分。大房车占据的车位可能是三个甚至是更多。不过这并不会影响我们的寻址算法：我们只需跳过部分车号，便可以保持原本车号*2的寻址系统。</p>\n<p>上述模型有一个前提，你应该已经想到了，就是每辆车都从偶数号车位停起。这个概念我们称之为内存对齐（对应虚拟机选项-XX:ObjectAlignmentInBytes，默认值为8）。</p>\n<p>默认情况下，Java虚拟机堆中对象的起始地址需要对齐至8的倍数。如果一个对象用不到8N个字节，那么空白的那部分空间就浪费掉了。这些浪费掉的空间我们称之为对象间的填充（padding）。</p>\n<p>在默认情况下，Java虚拟机中的32位压缩指针可以寻址到2的35次方个字节，也就是32GB的地址空间（超过32GB则会关闭压缩指针）。</p>\n<p>在对压缩指针解引用时，我们需要将其左移3位，再加上一个固定偏移量，便可以得到能够寻址32GB地址空间的伪64位指针了。</p>\n<p>此外，我们可以通过配置刚刚提到的内存对齐选项（-XX:ObjectAlignmentInBytes）来进一步提升寻址范围。但是，这同时也可能增加对象间填充，导致压缩指针没有达到原本节省空间的效果。</p>\n<p>举例来说，如果规定每辆车都需要从偶数车位号停起，那么对于占据两个车位的小房车来说刚刚好，而对于需要三个车位的大房车来说，也仅是浪费一个车位。</p>\n<p>但是如果规定需要从4的倍数号车位停起，那么小房车则会浪费两个车位，而大房车至多可能浪费三个车位。</p>\n<p>当然，就算是关闭了压缩指针，Java虚拟机还是会进行内存对齐。此外，内存对齐不仅存在于对象与对象之间，也存在于对象中的字段之间。比如说，Java虚拟机要求long字段、double字段，以及非压缩指针状态下的引用字段地址为8的倍数。</p>\n<p>字段内存对齐的其中一个原因，是让字段只出现在同一CPU的缓存行中。如果字段不是对齐的，那么就有可能出现跨缓存行的字段。也就是说，该字段的读取可能需要替换两个缓存行，而该字段的存储也会同时污染两个缓存行。这两种情况对程序的执行效率而言都是不利的。</p>\n<p>下面我来介绍一下对象内存布局另一个有趣的特性：字段重排列。</p>\n<h2>字段重排列</h2>\n<p>字段重排列，顾名思义，就是Java虚拟机重新分配字段的先后顺序，以达到内存对齐的目的。Java虚拟机中有三种排列方法（对应Java虚拟机选项-XX:FieldsAllocationStyle，默认值为1），但都会遵循如下两个规则。</p>\n<p>其一，如果一个字段占据C个字节，那么该字段的偏移量需要对齐至NC。这里偏移量指的是字段地址与对象的起始地址差值。</p>\n<p>以long类为例，它仅有一个long类型的实例字段。在使用了压缩指针的64位虚拟机中，尽管对象头的大小为12个字节，该long类型字段的偏移量也只能是16，而中间空着的4个字节便会被浪费掉。</p>\n<p>其二，子类所继承字段的偏移量，需要与父类对应字段的偏移量保持一致。</p>\n<p>在具体实现中，Java虚拟机还会对齐子类字段的起始位置。对于使用了压缩指针的64位虚拟机，子类第一个字段需要对齐至4N；而对于关闭了压缩指针的64位虚拟机，子类第一个字段则需要对齐至8N。</p>\n<pre><code>class A {\n  long l;\n  int i；\n}\n\nclass B extends A {\n  long l;\n  int i;\n}\n</code></pre>\n<p>我在文中贴了一段代码，里边定义了两个类A和B，其中B继承A。A和B各自定义了一个long类型的实例字段和一个int类型的实例字段。下面我分别打印了B类在启用压缩指针和未启用压缩指针时，各个字段的偏移量。</p>\n<pre><code># 启用压缩指针时，B类的字段分布\nB object internals:\n OFFSET  SIZE   TYPE DESCRIPTION\n      0     4        (object header)\n      4     4        (object header)\n      8     4        (object header)\n     12     4    int A.i                                       0\n     16     8   long A.l                                       0\n     24     8   long B.l                                       0\n     32     4    int B.i                                       0\n     36     4        (loss due to the next object alignment)\n</code></pre>\n<p>当启用压缩指针时，可以看到Java虚拟机将A类的int字段放置于long字段之前，以填充因为long字段对齐造成的4字节缺口。由于对象整体大小需要对齐至8N，因此对象的最后会有4字节的空白填充。</p>\n<pre><code># 关闭压缩指针时，B类的字段分布\nB object internals:\n OFFSET  SIZE   TYPE DESCRIPTION\n      0     4        (object header)\n      4     4        (object header)\n      8     4        (object header)\n     12     4        (object header)\n     16     8   long A.l\n     24     4    int A.i\n     28     4        (alignment/padding gap)                  \n     32     8   long B.l\n     40     4    int B.i\n     44     4        (loss due to the next object alignment)\n</code></pre>\n<p>当关闭压缩指针时，B类字段的起始位置需对齐至8N。这么一来，B类字段的前后各有4字节的空白。那么我们可不可以将B类的int字段移至前面的空白中，从而节省这8字节呢？</p>\n<p>我认为是可以的，并且我修改过后的Java虚拟机也没有跑崩。由于HotSpot中的这块代码年久失修，公司的同事也已经记不得是什么原因了，那么姑且先认为是一些历史遗留问题吧。</p>\n<p>Java 8还引入了一个新的注释@Contended，用来解决对象字段之间的虚共享（false sharing）问题[2]。这个注释也会影响到字段的排列。</p>\n<p>虚共享是怎么回事呢？假设两个线程分别访问同一对象中不同的volatile字段，逻辑上它们并没有共享内容，因此不需要同步。</p>\n<p>然而，如果这两个字段恰好在同一个缓存行中，那么对这些字段的写操作会导致缓存行的写回，也就造成了实质上的共享。（volatile字段和缓存行的故事我会在之后的篇章中详细介绍。）</p>\n<p>Java虚拟机会让不同的@Contended字段处于独立的缓存行中，因此你会看到大量的空间被浪费掉。具体的分布算法属于实现细节，随着Java版本的变动也比较大，因此这里就不做阐述了。</p>\n<p>如果你感兴趣，可以利用实践环节的工具，来查阅Contended字段的内存布局。注意使用虚拟机选项-XX:-RestrictContended。如果你在Java 9以上版本试验的话，在使用javac编译时需要添加 --add-exports java.base/jdk.internal.vm.annotation=ALL-UNNAME</p>\n<h2>总结和实践</h2>\n<p>今天我介绍了Java虚拟机构造对象的方式，所构造对象的大小，以及对象的内存布局。</p>\n<p>常见的new语句会被编译为new指令，以及对构造器的调用。每个类的构造器皆会直接或者间接调用父类的构造器，并且在同一个实例中初始化相应的字段。</p>\n<p>Java虚拟机引入了压缩指针的概念，将原本的64位指针压缩成32位。压缩指针要求Java虚拟机堆中对象的起始地址要对齐至8的倍数。Java虚拟机还会对每个类的字段进行重排列，使得字段也能够内存对齐。</p>\n<p>今天的实践环节比较简单，你可以使用我在工具篇中介绍过的JOL工具，来打印你工程中的类的字段分布情况。</p>\n<pre><code>curl -L -O http://central.maven.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar\njava -cp jol-cli-0.9-full.jar org.openjdk.jol.Main internals java.lang.String\n</code></pre>\n<p>[1] <a href=\"https://wiki.openjdk.java.net/display/HotSpot/CompressedOops\">https://wiki.openjdk.java.net/display/HotSpot/CompressedOops</a><br />\n[2] <a href=\"http://openjdk.java.net/jeps/142\">http://openjdk.java.net/jeps/142</a></p>\n<p></p>\n","neighbors":{"left":{"article_title":"09 | JVM是怎么实现invokedynamic的？（下）","id":12574},"right":{"article_title":"11 | 垃圾回收（上）","id":13091}},"comments":[{"had_liked":false,"id":31530,"user_name":"life is short, enjoy more.","can_delete":false,"product_type":"c1","uid":1074805,"ip_address":"","ucode":"3B5F37D30790A7","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/75/54bb858e.jpg","comment_is_top":false,"comment_ctime":1539222863,"is_pvip":false,"replies":[{"id":"11577","content":"赞总结！","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1539359532,"ip_address":"","comment_id":31530,"utype":1}],"discussion_count":2,"race_medal":0,"score":"310776868175","product_id":100010301,"comment_content":"对象头<br><br>每个对象都有一个对象头，对象头包括两部分，标记信息和类型指针。<br><br>标记信息包括哈希值，锁信息，GC信息。类型指针指向这个对象的class。<br><br>两个信息分别占用8个字节，所以每个对象的额外内存为16个字节。很消耗内存。<br><br>压缩指针<br><br>为了减少类型指针的内存占用，将64位指针压缩至32位，进而节约内存。之前64位寻址，寻的是字节。现在32位寻址，寻的是变量。再加上内存对齐(补齐为8的倍数)，可以每次寻变量都以一定的规则寻找，并且一定可以找得到。<br><br>内存对齐<br><br>内存对齐的另一个好处是，使得CPU缓存行可以更好的实施。保证每个变量都只出现在一条缓存行中，不会出现跨行缓存。提高程序的执行效率。<br><br>字段重排序<br><br>其实就是更好的执行内存对齐标准，会调整字段在内存中的分布，达到方便寻址和节省空间的目的。<br><br>虚共享<br><br>当两个线程分别访问一个对象中的不同volatile字段，理论上是不涉及变量共享和同步要求的。但是如果两个volatile字段处于同一个CPU缓存行中，对其中一个volatile字段的写操作，会导致整个缓存行的写回和读取操作，进而影响到了另一个volatile变量，也就是实际上的共享问题。<br><br>@Contented注解<br><br>该注解就是用来解决虚共享问题的，被该注解标识的变量，会独占一个CPU缓存行。但也因此浪费了大量的内存空间。<br><br>","like_count":72,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":426387,"discussion_content":"赞总结！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539359532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028945,"avatar":"","nickname":"Geek5198","note":"","ucode":"2BEBE6A39D9A0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298648,"discussion_content":"到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597371042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104045,"user_name":"槑·先生","can_delete":false,"product_type":"c1","uid":1445744,"ip_address":"","ucode":"897F0475592E3A","user_header":"https://static001.geekbang.org/account/avatar/00/16/0f/70/f59db672.jpg","comment_is_top":false,"comment_ctime":1560600323,"is_pvip":true,"discussion_count":22,"race_medal":2,"score":"276438507267","product_id":100010301,"comment_content":"在极客时间买了不少课程了，这个系列算是难读的。","like_count":64,"discussions":[{"author":{"id":2051003,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4b/bb/46c739c4.jpg","nickname":"空壳的豆子","note":"","ucode":"5BE0DB8AB69278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323766,"discussion_content":"同感，我自己属于小白，有些基础知识不懂，所以有的地方看不懂不能怪老师。但文中的确有些地方的行文逻辑不太合适，比如类型指针的压缩那里，一句话就可以说明白的事，用两句来说，关键是第二句还用了一个“也”字，这很容易让读者认为两个8字节的字段都被压缩成了4字节。当然，这只是一个语言表述的问题，我认为还存在的问题有：有时跳跃性过大，行文逻辑不够清晰，即使花了大篇幅来讲得知识点也不一定能讲清楚。这门课应该是不会学下去了，希望老师以后能有更优秀的作品","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1604993827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1400962,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/82/9a43504b.jpg","nickname":"[耶]友超","note":"","ucode":"890572F77C3670","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2051003,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4b/bb/46c739c4.jpg","nickname":"空壳的豆子","note":"","ucode":"5BE0DB8AB69278","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328195,"discussion_content":"你说了我不敢说的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606100743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":323766,"ip_address":""},"score":328195,"extra":""},{"author":{"id":2254987,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLwXovos2EbVAygIE1qD8jVopHDRLpvh68icReYlnj4OposmRqzRVMVEia3xFV9DAGIDjPbxD6kzd6w/132","nickname":"长夜","note":"","ucode":"7878040BC8225D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2051003,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4b/bb/46c739c4.jpg","nickname":"空壳的豆子","note":"","ucode":"5BE0DB8AB69278","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343665,"discussion_content":"没毛病","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611128934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":323766,"ip_address":""},"score":343665,"extra":""},{"author":{"id":1255794,"avatar":"https://static001.geekbang.org/account/avatar/00/13/29/72/515e8867.jpg","nickname":"王厂长","note":"","ucode":"FF41279DA5A860","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2051003,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4b/bb/46c739c4.jpg","nickname":"空壳的豆子","note":"","ucode":"5BE0DB8AB69278","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558799,"discussion_content":"没毛病，可能只有深入，但还没达到别的老师的高度，浅出","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648471949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":323766,"ip_address":""},"score":558799,"extra":""}]},{"author":{"id":1357311,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b5/ff/d1f205b0.jpg","nickname":"L","note":"","ucode":"5B847B2378854E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320817,"discussion_content":"说实话，我现在是二刷！\n真的晦涩难懂....\n这位老师的课程水平 真的不太行！\n\n我二刷了\n王争老师的 数据结构和算法 + 设计模式之美\n王宝令老师的 Java并发编程实战\n丁奇老师的 MySQL\n\n收获很大，看的很通透！\n\n唯独这个JVM课程，真的是看不懂！\n看的人崩溃...\n\n好想极客时间，再重新推出一门JVM课程！！！","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1604483956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1445744,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0f/70/f59db672.jpg","nickname":"槑·先生","note":"","ucode":"897F0475592E3A","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":1357311,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b5/ff/d1f205b0.jpg","nickname":"L","note":"","ucode":"5B847B2378854E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323385,"discussion_content":"这么巧，你上面说的那几门课我也是反复刷了几遍，津津有味，收益颇丰。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604926660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320817,"ip_address":""},"score":323385,"extra":""},{"author":{"id":1085938,"avatar":"https://static001.geekbang.org/account/avatar/00/10/91/f2/21d1247f.jpg","nickname":"wen","note":"","ucode":"4107D5E264963B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1357311,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b5/ff/d1f205b0.jpg","nickname":"L","note":"","ucode":"5B847B2378854E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339586,"discussion_content":"🤝，这个JVM是最早买的了，到现在还没看完，都导致后来很长一段时间没用极客时间。后来又上来刷了Redis、Mysql，太通透了，很多盲区一下都明白了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609741509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320817,"ip_address":""},"score":339586,"extra":""}]},{"author":{"id":2060756,"avatar":"","nickname":"在下蟑螂王","note":"","ucode":"E66A65A327095A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300783,"discussion_content":"同，我也tm在这里翻车了。感觉每个字都认识，但连在一起就不懂。硕博差距竟然这么大。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1598263229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1136480,"avatar":"https://static001.geekbang.org/account/avatar/00/11/57/60/65b006a6.jpg","nickname":"Chief","note":"","ucode":"CAFB24CBA215A8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323748,"discussion_content":"其实应该更多使用图表来直观形象展示有些信息，比如对象头之类的。最近一直在看JVM相关知识，但是这个系列的确不算好的教程。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1604990677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2417723,"avatar":"https://static001.geekbang.org/account/avatar/00/24/e4/3b/f1b9d6bf.jpg","nickname":"蔡俊贤","note":"","ucode":"A856D094E3F4A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390689,"discussion_content":"一刷的时候感觉很困难，后面去看了其他书，再回来二刷就能看懂很多了，这个课程讲了很多其他jvm书上没有的东西，还是挺好的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629973961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020492,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/4c/40783447.jpg","nickname":"何骧","note":"","ucode":"11DCC74CE2F300","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300214,"discussion_content":"晦涩难懂，如同嚼蜡。可能是水平不够吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597989293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1576238,"avatar":"https://static001.geekbang.org/account/avatar/00/18/0d/2e/a6865099.jpg","nickname":"SDZ","note":"","ucode":"3353FCAD5B52C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277751,"discussion_content":"同感。因为没有说明需要具备的知识体系。好像已经默认，有些知识你是知道的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591102882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127223,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/37/c9c544fb.jpg","nickname":"逆流的鱼","note":"","ucode":"2F4813D17082F4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580662,"discussion_content":"后悔了，发现极客时间大多数课程都是难懂的，实操性很差","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658311926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1997159,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/79/67/b4546e48.jpg","nickname":"咕噜咕噜咕","note":"","ucode":"291A60A726AA19","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577405,"discussion_content":"确实难懂，但是书读百遍，其意自现~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656076247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2975769,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/68/19/83e76157.jpg","nickname":"尼一","note":"","ucode":"49E303E214572C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568706,"discussion_content":"有些地方上个图可能会好很多，老师说：哎，我就不，就是玩儿~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651203681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2113978,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLniccwC1Mootc7IQsRGUTX3ZkkCKPc7lYV0g8CAqscWtAjd8xkHYcY3UFbYvicm42FXuAO5bZP6WQ/132","nickname":"Geek_417e74","note":"","ucode":"BEA8915879274D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335948,"discussion_content":"同小白girl，多看多联想挺容易懂的。你们看不懂说老师的，我觉得你们自己的问题吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608412936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1514257,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/11/9d7bcbf7.jpg","nickname":"若罹","note":"","ucode":"E2209CC33F714A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138770,"discussion_content":"jvm是难啃 所以得多啃几遍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579264643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1180745,"avatar":"https://static001.geekbang.org/account/avatar/00/12/04/49/ee47472d.jpg","nickname":"Ion","note":"","ucode":"4D1F8B1EB46F05","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1514257,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/11/9d7bcbf7.jpg","nickname":"若罹","note":"","ucode":"E2209CC33F714A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":176441,"discussion_content":"jvm难啃是一方面，这个老师讲课的课件也需要提高的","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1582035584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":138770,"ip_address":""},"score":176441,"extra":""},{"author":{"id":1083651,"avatar":"https://static001.geekbang.org/account/avatar/00/10/89/03/30f878ca.jpg","nickname":"隐","note":"","ucode":"528AF8BA6278D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180745,"avatar":"https://static001.geekbang.org/account/avatar/00/12/04/49/ee47472d.jpg","nickname":"Ion","note":"","ucode":"4D1F8B1EB46F05","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209804,"discussion_content":"同感","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584674167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":176441,"ip_address":""},"score":209804,"extra":""},{"author":{"id":1447283,"avatar":"https://static001.geekbang.org/account/avatar/00/16/15/73/e5e4b245.jpg","nickname":"Andy","note":"","ucode":"708042A35424DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180745,"avatar":"https://static001.geekbang.org/account/avatar/00/12/04/49/ee47472d.jpg","nickname":"Ion","note":"","ucode":"4D1F8B1EB46F05","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244584,"discussion_content":"同感，感觉这位老师有点太过于按照博士研究的方式来写课程了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1587615220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":176441,"ip_address":""},"score":244584,"extra":""}]}]},{"had_liked":false,"id":19866,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1534126778,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"272117066426","product_id":100010301,"comment_content":"小结<br>1:Java中创建对象的方式<br><br>1-1:new -通过调用构造器来初始化实例字段<br><br>1-2:反射-通过调用构造器来初始化实例字段<br><br>1-3:Object.clone-通过直接复制已有的数据，来初始化新建对象的实例字段<br><br>1-4:反序列化-通过直接复制已有的数据，来初始化新建对象的实例字段<br><br>1-5:Unsafe.allocateInstance-没有初始化对象的实例字段<br><br>2:Java对象的空间占用<br><br>2-1:通过new创建的对象，涵盖了它所有父类中的对象实例的字段<br><br>2-2:对象头，由标记字段和类型指针构成<br><br>2-3:标记字段，用于存储Java虚拟机有关该对象的运行数据，比如：哈希码、GC信息、锁信息等<br><br>2-4:类型指针，用于指向该对象的类<br><br>2-5:此对象的实例字段对应的内存空间<br><br>3:压缩指针<br>JVM的内存空间有限且昂贵，所以，能缩减的就缩减，通过一定的算法改进压缩类型指针的空间后仍可以寻址到对象的实例对应的类，所以，就采用了<br><br>4:字段重排<br>意思是JVM会重新分配字段的位置，和我们Java源码中属性声明的位置存在差异，猜想Java编译器编译后的字节码是没有改变源码中字段声明的位置的，这样做是为了更好的实现内存对齐，内存对齐本质上会浪费一定的内存空间，不过可以减少内存行的读取次数，通过一消一涨的比对发现这样对于JVM的性能有一定的提高，所以，也就使用了这种方式，浪费点空间能提高性能也是值得的<br><br>疑问❓<br>1:为什么一个子类即使无法访问父类的私有实例字段，或者子类实例字段隐藏了父类的同名实例字段，子类的实例还是会为这些父类实例字段分配内存呢？<br>另外，如果采用指针指向的方式定位父类实例的内容是否能更节省内存空间？<br><br>2:五种创建对象的方式，通过new指令新建出来的对象，他的内存其实涵盖了所有父类中的实例字段，其他的方式是怎样的哪？<br><br>","like_count":63,"discussions":[{"author":{"id":1501293,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/6d/69ca208a.jpg","nickname":"李宇嘉(Yujia Li)","note":"","ucode":"EFE328D07D3787","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20398,"discussion_content":"疑问1，子类显然需要为无法访问的父类私有实例字段分配内存，可以想到的一种情况是，子类可以调用父类的非私有方法，而父类的非私有方法显然有可能使用到子类无法访问的父类私有实例字段。","likes_number":22,"is_delete":false,"is_hidden":false,"ctime":1569309870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253529,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/99/8c158560.jpg","nickname":"cxh","note":"","ucode":"912FBA0412E75A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310341,"discussion_content":"压缩指针不是-XX:+UseCompressedOops，而是-XX:+UseCompressedClassPointer，前者是普通对象的压缩指针，后者是类型压缩指针","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601784176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38890,"user_name":"清歌","can_delete":false,"product_type":"c1","uid":1014496,"ip_address":"","ucode":"4545455E12F907","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/e0/3d5b28ef.jpg","comment_is_top":false,"comment_ctime":1542157447,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"169045881991","product_id":100010301,"comment_content":"讲内存布局没有图示。如果能配一些图来说明就更清晰了，纯文字不直观","like_count":39},{"had_liked":false,"id":19845,"user_name":"amourling","can_delete":false,"product_type":"c1","uid":1157578,"ip_address":"","ucode":"8E1A73B717A554","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/ca/2d8c4733.jpg","comment_is_top":false,"comment_ctime":1534122663,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"65958632103","product_id":100010301,"comment_content":"作者大大辛苦了，货很干，搭配《深入理解java虚拟机》会很香","like_count":15,"discussions":[{"author":{"id":1100387,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ca/63/9be9ac89.jpg","nickname":"Allen","note":"","ucode":"5B168A03809557","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408777,"discussion_content":"然而《深入理解Java虚拟机》里面关于对象布局的内容是错的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635322657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":178602,"discussion_content":"有的地方讲的比《深入理解java虚拟机》还深","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582179465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156311,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1574855039,"is_pvip":false,"replies":[{"id":"60616","content":"以8字节为单位，跟ObjectAlignmentInBytes有关","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1575366095,"ip_address":"","comment_id":156311,"utype":1}],"discussion_count":3,"race_medal":0,"score":"31639626111","product_id":100010301,"comment_content":" 在默认情况下，Java 虚拟机中的 32 位压缩指针可以寻址到 2 的 35 次方个字节，也就是 32GB 的地址空间（超过 32GB 则会关闭压缩指针）。<br><br><br>这里为啥是 35 ？？？？","like_count":7,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476065,"discussion_content":"以8字节为单位，跟ObjectAlignmentInBytes有关","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575366095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279470,"discussion_content":"2^ 3= 8  ，32为本来的寻址2的32次方，➕3就变成2的35次方","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591350230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221683,"discussion_content":"我看到了，是字节，患有 3 要加。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586046507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":21557,"user_name":"一个坏人","can_delete":false,"product_type":"c1","uid":1032305,"ip_address":"","ucode":"4AF05BF008095A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/71/c83d8b15.jpg","comment_is_top":false,"comment_ctime":1535167786,"is_pvip":true,"replies":[{"id":"8016","content":"在某些体系架构上，不对齐的话内存读写会报错。<br><br>在X86_64上，一个是为了让字段也能对齐，这样就不会出现字段横跨两个缓存行的情况，另一个原因更像个副作用，就是对象地址最后三位一直是0，JVM利用这个特性来实现压缩指针，也可以用这三位来记录一些额外信息","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1535621117,"ip_address":"","comment_id":21557,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27304971562","product_id":100010301,"comment_content":"老师好，请教一下：“自动内存管理系统为什么要求对象的大小必须是8字节的整数倍？”，即内存对齐的根本原因在于？","like_count":6,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422737,"discussion_content":"在某些体系架构上，不对齐的话内存读写会报错。\n\n在X86_64上，一个是为了让字段也能对齐，这样就不会出现字段横跨两个缓存行的情况，另一个原因更像个副作用，就是对象地址最后三位一直是0，JVM利用这个特性来实现压缩指针，也可以用这三位来记录一些额外信息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535621117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20008,"user_name":"倔强","can_delete":false,"product_type":"c1","uid":1177878,"ip_address":"","ucode":"849B0BA1AC7E29","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/16/99a7045d.jpg","comment_is_top":false,"comment_ctime":1534209935,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27304013711","product_id":100010301,"comment_content":"也就是说默认情况下，小于32G的堆内存中的对象引用为4个字节，一旦堆内存大于32G，对象引用为8个字节","like_count":6,"discussions":[{"author":{"id":1025474,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a5/c2/41fa26df.jpg","nickname":"楊威","note":"","ucode":"8BA77716CE8179","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367745,"discussion_content":"你是兴杰吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618457782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20103,"user_name":"大能猫","can_delete":false,"product_type":"c1","uid":1117216,"ip_address":"","ucode":"BC90965A7E91B9","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/20/ae6979bd.jpg","comment_is_top":false,"comment_ctime":1534259991,"is_pvip":false,"replies":[{"id":"7065","content":"String literal指向的对象存放在JVM的String pool里。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1534325304,"ip_address":"","comment_id":20103,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23009096471","product_id":100010301,"comment_content":"最近研究String时遇到一个跟Java内存相关的问题：常量池里到底有没有存放对象？<br>常量池主要存放两大类常量：字面量（Literal）和符号引用（Symbolic Reference）；<br>如果常量池里有一个“hello”的字面量，这个字面量算是一个对象吗？如果不算对象，那么它所指向的对象又存放在哪里呢","like_count":5,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422110,"discussion_content":"String literal指向的对象存放在JVM的String pool里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534325304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19853,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1534123622,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"23008960102","product_id":100010301,"comment_content":"有一个小白问题，new一个对象(继承一个类)会调用父类构造器，这个可以理解，因为对象可能调用父类方法。那么为什么new对象会调用到object呢？这有什么用意吗？","like_count":5,"discussions":[{"author":{"id":1264180,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/34/1faac99b.jpg","nickname":"夕林语","note":"","ucode":"B57681D0C73E1B","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54,"discussion_content":"应该是因为Object类是所有类的父类","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561023585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132608,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1568172276,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18748041460","product_id":100010301,"comment_content":"对象头：标记字段（哈希码、GC信息、锁信息等）+类型指针<br>压缩指针原理：对象间的填充需求（内存对齐）保证一个对象的起始地址需要对齐到8的倍数，而定址时并非逐字节而是逐8字节，从而保证32位就可定位到2 ^ 32 * 8 = 32GB的地址空间<br>内存对齐目的：对象的访问机制更为简单；避免跨缓存行字段出现<br>字段重排列目的：JVM重新分配字段先后顺序，在满足内存对齐的条件下尽可能提高内存利用率<br>虚共享：多线程访问同一对象的不同字段，却因共享缓存行而导致缓存行产生竞争","like_count":4},{"had_liked":false,"id":21109,"user_name":"everyok22","can_delete":false,"product_type":"c1","uid":1213878,"ip_address":"","ucode":"3A3304CCDC5C5C","user_header":"","comment_is_top":false,"comment_ctime":1534921670,"is_pvip":false,"replies":[{"id":"7423","content":"标记字段没有被压缩。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1534931020,"ip_address":"","comment_id":21109,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18714790854","product_id":100010301,"comment_content":"你文章里说： 64位的JVM中，不采用压缩指针的方式，标记字段与类型指针分别占用8个字节，而采用了压缩指针标记字段与类型指针都会压成32位（8字节）那对象头不是只占用8个字节么，为什么你说是12个字节","like_count":4,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422540,"discussion_content":"标记字段没有被压缩。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534931020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105192,"user_name":"樱小路依然","can_delete":false,"product_type":"c1","uid":1269957,"ip_address":"","ucode":"DBA9FF68015FE5","user_header":"https://static001.geekbang.org/account/avatar/00/13/60/c5/69286d58.jpg","comment_is_top":false,"comment_ctime":1560935359,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14445837247","product_id":100010301,"comment_content":"老师，问个问题，你在用小车举例的时候说，规定从 4 的倍数停起，那么小车可能会浪费2个车位，大车可能会浪费3个车位，那 XX:ObjectAlignmentInBytes 的默认值是 8，岂不是小车可能会浪费6个车位，大车可能会浪费7个车位？为什么这个 XX:ObjectAlignmentInBytes 的默认值不设置成2，而是设置成8了呢？","like_count":3,"discussions":[{"author":{"id":1182802,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0c/52/f25c3636.jpg","nickname":"长脖子树","note":"","ucode":"D9090EF67EEB1B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44673,"discussion_content":"为了让字段只出现在同一 CPU 的缓存行中, 和cpu 的缓存行大小有关, 目前主流的CPU Cache的Cache Line大小都是64Bytes,  可以参考 https://www.cnblogs.com/jokerjason/p/9584402.html\nhttps://zhuanlan.zhihu.com/p/30007037  ","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1572960980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1806720,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/91/80/bc38f890.jpg","nickname":"珍妮•玛仕多","note":"","ucode":"6E1E5564F979B3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1182802,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0c/52/f25c3636.jpg","nickname":"长脖子树","note":"","ucode":"D9090EF67EEB1B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":369193,"discussion_content":"学习了，谢谢解惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618971125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":44673,"ip_address":""},"score":369193,"extra":""}]}]},{"had_liked":false,"id":28966,"user_name":"xlogic","can_delete":false,"product_type":"c1","uid":1177958,"ip_address":"","ucode":"1466EBCC1F5B8E","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/66/e8fb8ca2.jpg","comment_is_top":false,"comment_ctime":1538210200,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14423112088","product_id":100010301,"comment_content":"字段重排列<br><br>其一，如果一个字段占据 C 个字节， 那么该字段的偏移量需要对齐至 NC。这里的偏移量指的是字段地址与对象的起始地址差值<br><br>以 long 类为例，它仅有一个 long 类型的实例字段。在使用了压缩指针的 64 位虚拟机中，尽管对象头的大小为 12 个字节，该 long 类型字段的偏移量也只能是 16，而中间空着的 4 个字节便会被浪费掉。<br><br>个人理解：1. 应该是 Long 类型；2. 因为 long 字段的占 8 个字节，所以偏移量是 N8，比12大的最接近的数就是 16，所以偏移量就是16，也就是说字段与对象的起始位置差是16。","like_count":3},{"had_liked":false,"id":32841,"user_name":"Mr.钧👻","can_delete":false,"product_type":"c1","uid":1249939,"ip_address":"","ucode":"D781E030E79245","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/93/3470fc43.jpg","comment_is_top":false,"comment_ctime":1539701926,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10129636518","product_id":100010301,"comment_content":"想请教老师大大几个问题：<br>1、什么是CUP缓存行？<br>2、如果跨缓存行的字段，为什么会降低执行效率？是因为某些读取程序，一行一行的读效率较高？还是因为以行分割呢？<br>3、明显启用压缩指针，性能更高，但是为什么还会在64位情况下，不启用压缩指针的情况呢？ 是因为CPU运行速度更快，可以护士不压缩指针导致的内存浪费吗？","like_count":2,"discussions":[{"author":{"id":1245468,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/1c/d638d46e.jpg","nickname":"宋世通","note":"","ucode":"C7AA3F0E6930F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390205,"discussion_content":"我记得CPU缓存刷新是基于一行刷新的，跨行字段一次刷新两行，这样就失去缓存的作用，一个字段的更新影响了另一个字段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629711998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20997,"user_name":"周仕林","can_delete":false,"product_type":"c1","uid":1180749,"ip_address":"","ucode":"07C9025699FB5A","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/4d/bd86bdc2.jpg","comment_is_top":false,"comment_ctime":1534858250,"is_pvip":false,"replies":[{"id":"7419","content":"周老师书上的是提炼之后的抽象说法。<br><br>HotSpot的对象头一直是mark word(标记字段)和类型指针。如果对源代码有兴趣可以查看OpenJDK源代码目录下，src&#47;hotspot&#47;share&#47;oops&#47;oop.hpp里的class oopDesc。数组对象头是同目录下的arrayOop.hpp里的class arrayOopDesc","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1534930458,"ip_address":"","comment_id":20997,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10124792842","product_id":100010301,"comment_content":"对象头的组成如果阅读过周志明的JVM虚拟机会发现作者说的有一些有失偏颇，对象头的组成是对象运行信息，类型指针（如果对象访问采用直接指针），数组长度（如果对象是数组）","like_count":2,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422488,"discussion_content":"周老师书上的是提炼之后的抽象说法。\n\nHotSpot的对象头一直是mark word(标记字段)和类型指针。如果对源代码有兴趣可以查看OpenJDK源代码目录下，src/hotspot/share/oops/oop.hpp里的class oopDesc。数组对象头是同目录下的arrayOop.hpp里的class arrayOopDesc","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534930458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20245,"user_name":"贾智文","can_delete":false,"product_type":"c1","uid":1100235,"ip_address":"","ucode":"600CF0AB215D1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/cb/7b6802cc.jpg","comment_is_top":false,"comment_ctime":1534331094,"is_pvip":false,"replies":[{"id":"7102","content":"对的","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1534344169,"ip_address":"","comment_id":20245,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10124265686","product_id":100010301,"comment_content":"默认情况下32位可以寻址2的35次，应该是因为地址是32位乘以2的三次（默认对其为8），那么如果不采用压缩指针，能够寻址的范围应该是2的64次对吧。然后之前模糊的地方就是觉得两个寻址范围并不一致，是不是可以这么理解并没有通过压缩指针让两个寻址范围一致，而是通过压缩指针放大了32位的寻址空间使它够用了","like_count":2,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422171,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534344169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339270,"user_name":"כן אני אמריקאי","can_delete":false,"product_type":"c1","uid":1527429,"ip_address":"","ucode":"56C5C2B369121B","user_header":"https://static001.geekbang.org/account/avatar/00/17/4e/85/ef0108cd.jpg","comment_is_top":false,"comment_ctime":1648018502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5942985798","product_id":100010301,"comment_content":"关于Java创建对象，自己基于本文做了一些内容上的补充，欢迎大家阅读：https:&#47;&#47;juejin.cn&#47;post&#47;7074578371123871781&#47;","like_count":1},{"had_liked":false,"id":292873,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1621046762,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5916014058","product_id":100010301,"comment_content":"字段内存对齐的可以让字段只出现在同一 CPU 的缓存行中","like_count":1},{"had_liked":false,"id":289299,"user_name":"珍妮•玛仕多","can_delete":false,"product_type":"c1","uid":1806720,"ip_address":"","ucode":"6E1E5564F979B3","user_header":"https://static001.geekbang.org/account/avatar/00/1b/91/80/bc38f890.jpg","comment_is_top":false,"comment_ctime":1618973765,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5913941061","product_id":100010301,"comment_content":"老师能解释一下这句话吗，他是怎么实现的，为什么?在对压缩指针解引用时，我们需要将其左移 3 位，再加上一个固定偏移量，便可以得到能够寻址 32GB 地址空间的伪 64 位指针了。","like_count":1},{"had_liked":false,"id":78823,"user_name":"发条橙子 。","can_delete":false,"product_type":"c1","uid":1259218,"ip_address":"","ucode":"ED076F4534FFED","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","comment_is_top":false,"comment_ctime":1553248605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848215901","product_id":100010301,"comment_content":"老师， 对象头中的类型指针只是为了指该对象的类 ， 使用了压缩指针还有32位  。可以有32g的地址空间， 一个类能用到 32 G的地址空间么?????","like_count":1},{"had_liked":false,"id":26471,"user_name":"Geek_987169","can_delete":false,"product_type":"c1","uid":1180853,"ip_address":"","ucode":"4B2955A044805D","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg","comment_is_top":false,"comment_ctime":1537613795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5832581091","product_id":100010301,"comment_content":"老师，请教您几个问题<br>1：每个类都有一个对应的class对象，那么这class对象是什么时候生成的，存储jvm的哪个区域？<br>2：类实例对象object header中的类型指针其实就是指向该类所属class的对象的指针吗？<br>3：class对象的内存结构又是什么样子的呢？类似于普通Java实例对象吗？<br>ps：这个指针压缩的原理有些困扰到我了。。。求解惑！！！","like_count":1},{"had_liked":false,"id":20211,"user_name":"贾智文","can_delete":false,"product_type":"c1","uid":1100235,"ip_address":"","ucode":"600CF0AB215D1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/cb/7b6802cc.jpg","comment_is_top":false,"comment_ctime":1534311021,"is_pvip":false,"replies":[{"id":"7059","content":"不是很理解你的问题。<br><br>对象间需要内存对齐至8字节。64位和32位对应8字节和4字节。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1534322431,"ip_address":"","comment_id":20211,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5829278317","product_id":100010301,"comment_content":"有一点想不明白，既然内存对齐是八位而不是举例的两位为什么空间只是从64位变成32而不是从64变成8","like_count":1,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422151,"discussion_content":"不是很理解你的问题。\n\n对象间需要内存对齐至8字节。64位和32位对应8字节和4字节。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534322431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1574105,"avatar":"https://static001.geekbang.org/account/avatar/00/18/04/d9/47cae6cd.jpg","nickname":"Starry","note":"","ucode":"788395373D7B4C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39977,"discussion_content":"讲内存，配合内存分布图更容易读懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572048469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20096,"user_name":"熊猫酒仙","can_delete":false,"product_type":"c1","uid":1112078,"ip_address":"","ucode":"17002C7A355EC1","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/0e/de697f9b.jpg","comment_is_top":false,"comment_ctime":1534257776,"is_pvip":false,"replies":[{"id":"7063","content":"底层的内存屏障，比如说mfence，lock指令，是用来防止指令重排布的。Java里的内存屏障除了生成上述底层指令外，还会限制即时编译器对内存访问的重排序。之后我会讲Java内存模型。","user_name":"作者回复","user_name_real":"郑雨迪","uid":"1176688","ctime":1534323281,"ip_address":"","comment_id":20096,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5829225072","product_id":100010301,"comment_content":"接触过C&#47;C++的内存字节对齐，就比较好理解本章内容了。希望老师后面讲讲java内存在并发上的相关机制，譬如搞不懂的内存障是怎么实现的！","like_count":1,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422105,"discussion_content":"底层的内存屏障，比如说mfence，lock指令，是用来防止指令重排布的。Java里的内存屏障除了生成上述底层指令外，还会限制即时编译器对内存访问的重排序。之后我会讲Java内存模型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534323281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357912,"user_name":"BewhY","can_delete":false,"product_type":"c1","uid":1079811,"ip_address":"广东","ucode":"4BC26D47A79967","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/03/c9b43b21.jpg","comment_is_top":false,"comment_ctime":1663746209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663746209","product_id":100010301,"comment_content":"18年买的，当时看了几章发现是天书，然后自己慢慢去补充相关知识，19年回来再看下，有点云里雾里还是不懂，继续补充，20年再过来刷，终于可以看懂了，但是连在一起还是不懂，21年来看，基本所有名词都知道是干嘛的了，跟同事解释也能装下B了，但是人家多问两下就无法深入答解下去了，现在22年了，还是无法精通jvm","like_count":0},{"had_liked":false,"id":319030,"user_name":"KW💤","can_delete":false,"product_type":"c1","uid":1109389,"ip_address":"","ucode":"290DD7016F4EE0","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","comment_is_top":false,"comment_ctime":1635518433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635518433","product_id":100010301,"comment_content":"虽然三年了，但是希望迪哥还能看到。我觉得64位转为32位不是指针压缩的实现之处，而是一个“地址”由原来表示1byte转变为现在表示8bytes，也就是原来8个“地址”压缩成了一个“地址”。这样理解正确吧？","like_count":0},{"had_liked":false,"id":305109,"user_name":"zhmacn","can_delete":false,"product_type":"c1","uid":2561868,"ip_address":"","ucode":"91FA8535808CA0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJrZ9ic5vHOVfzqcA3Y454gicI2z7L1Ujp5hzFr9CbfTu6goHE7fUlbl3QjpEvXJj5qlvRAVcGRomw/132","comment_is_top":false,"comment_ctime":1627821264,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627821264","product_id":100010301,"comment_content":"极客上有很多课程，我感觉郑老师的课质量真的很高","like_count":0},{"had_liked":false,"id":294954,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1622165935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622165935","product_id":100010301,"comment_content":"还是这个看懂了一点点，对象头包含标记信息和类型指针，这个指针应该指的对象在堆的一个内存地址吧","like_count":0},{"had_liked":false,"id":281834,"user_name":"shuang","can_delete":false,"product_type":"c1","uid":1120486,"ip_address":"","ucode":"5834C8BCA4E529","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/e6/40c67bcb.jpg","comment_is_top":false,"comment_ctime":1614917920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614917920","product_id":100010301,"comment_content":"压缩指针：老师，这里好像看着有点别扭。对象头中的类型指针也会被压缩成 32 位，使得对象头的大小从 8 字节降至 4 字节。java对象的内存占用大小从 16 字节降至 12 字节，","like_count":0},{"had_liked":false,"id":264526,"user_name":"lornsoul","can_delete":false,"product_type":"c1","uid":1234912,"ip_address":"","ucode":"EF2C7EC9B3F82E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/e0/bc774bfb.jpg","comment_is_top":false,"comment_ctime":1606489666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606489666","product_id":100010301,"comment_content":"关于字段重排列的第二个规则：“子类所继承字段的偏移量，需要与父类对应字段的偏移量保持一致”。在下面的例子里好像没有体现这个规则，还是我理解错误了呢？","like_count":0},{"had_liked":false,"id":255757,"user_name":"Geek_b40a84","can_delete":false,"product_type":"c1","uid":1975350,"ip_address":"","ucode":"B73E7FE5AA8288","user_header":"","comment_is_top":false,"comment_ctime":1603422655,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603422655","product_id":100010301,"comment_content":"不明白字段排序关闭压缩指针的字节码，为啥B类的int的OFFSET不提到28的位置填补空白，这样A类和B类都没有空白区域，这样就节省了内存。28的位置是B类int的偏移量，也满足条件，JVM为啥不这么做呢","like_count":0},{"had_liked":false,"id":253657,"user_name":"笨鸟","can_delete":false,"product_type":"c1","uid":1236320,"ip_address":"","ucode":"68029ADA76AA5A","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","comment_is_top":false,"comment_ctime":1602820001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602820001","product_id":100010301,"comment_content":"水平不够,补补知识再来看","like_count":0},{"had_liked":false,"id":249682,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1600758362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600758362","product_id":100010301,"comment_content":"想问下一字段重排序那里的字段分布是有工具可以生成吗<br><br># 启用压缩指针时，B类的字段分布<br>B object internals:<br> OFFSET  SIZE   TYPE DESCRIPTION<br>      0     4        (object header)<br>      4     4        (object header)<br>      8     4        (object header)<br>     12     4    int A.i                                       0<br>     16     8   long A.l                                       0<br>     24     8   long B.l                                       0<br>     32     4    int B.i                                       0<br>     36     4        (loss due to the next object alignment)<br>","like_count":0},{"had_liked":false,"id":247190,"user_name":"Geek_05df73","can_delete":false,"product_type":"c1","uid":2165087,"ip_address":"","ucode":"6C8027C7DF25B8","user_header":"","comment_is_top":false,"comment_ctime":1599629594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599629594","product_id":100010301,"comment_content":"如果在讲解jvm带上手绘图，效果会好些。","like_count":0},{"had_liked":false,"id":246337,"user_name":"袁帅","can_delete":false,"product_type":"c1","uid":1084993,"ip_address":"","ucode":"A71A89B9F1BD69","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","comment_is_top":false,"comment_ctime":1599285117,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599285117","product_id":100010301,"comment_content":"这样一来，32 位压缩指针最多可以标记 2 的 32 次方辆车。    这句话该怎么理解？","like_count":0},{"had_liked":false,"id":245561,"user_name":"xmeng","can_delete":false,"product_type":"c1","uid":1731543,"ip_address":"","ucode":"C0CA2182BA3B4B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","comment_is_top":false,"comment_ctime":1598977212,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598977212","product_id":100010301,"comment_content":"对象头<br><br>每个对象都有一个对象头，对象头包括两部分，标记信息和类型指针。<br><br>标记信息包括哈希值，锁信息，GC信息。类型指针指向这个对象的class。<br><br>两个信息分别占用8个字节，所以每个对象的额外内存为16个字节。很消耗内存。<br><br>压缩指针<br><br>为了减少类型指针的内存占用，将64位指针压缩至32位，进而节约内存。之前64位寻址，寻的是字节。现在32位寻址，寻的是变量。再加上内存对齐(补齐为8的倍数)，可以每次寻变量都以一定的规则寻找，并且一定可以找得到。<br><br>内存对齐<br><br>内存对齐的另一个好处是，使得CPU缓存行可以更好的实施。保证每个变量都只出现在一条缓存行中，不会出现跨行缓存。提高程序的执行效率。<br><br>字段重排序<br><br>其实就是更好的执行内存对齐标准，会调整字段在内存中的分布，达到方便寻址和节省空间的目的。<br><br>虚共享<br><br>当两个线程分别访问一个对象中的不同volatile字段，理论上是不涉及变量共享和同步要求的。但是如果两个volatile字段处于同一个CPU缓存行中，对其中一个volatile字段的写操作，会导致整个缓存行的写回和读取操作，进而影响到了另一个volatile变量，也就是实际上的共享问题。<br><br>@Contented注解<br><br>该注解就是用来解决虚共享问题的，被该注解标识的变量，会独占一个CPU缓存行。但也因此浪费了大量的内存空间。<br>","like_count":0},{"had_liked":false,"id":224902,"user_name":"配方","can_delete":false,"product_type":"c1","uid":1620239,"ip_address":"","ucode":"C8C7214F0C195E","user_header":"https://static001.geekbang.org/account/avatar/00/18/b9/0f/648a4b3f.jpg","comment_is_top":false,"comment_ctime":1591586529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591586529","product_id":100010301,"comment_content":"关于虚共享问题，如果处于第三级同一个缓存行中，其中一个核的线程进行写操作，该缓存行被独占，则其他核进行缓存行操作就是一个串行的过程，如果contended不进行缓存行独占，该怎么处理伪共享的问题呢？","like_count":0},{"had_liked":false,"id":207054,"user_name":"Dstar ","can_delete":false,"product_type":"c1","uid":1178249,"ip_address":"","ucode":"4C51240A1162FD","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/89/69037f4f.jpg","comment_is_top":false,"comment_ctime":1587000676,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1587000676","product_id":100010301,"comment_content":"为什么压缩后头标记和指针变为32位，字节不是应该变为8个字节吗？为什么是12个字节？","like_count":0},{"had_liked":false,"id":181264,"user_name":"小兵","can_delete":false,"product_type":"c1","uid":1261674,"ip_address":"","ucode":"AA3BA727C25179","user_header":"https://static001.geekbang.org/account/avatar/00/13/40/6a/ab1cf396.jpg","comment_is_top":false,"comment_ctime":1582528834,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582528834","product_id":100010301,"comment_content":"一年半了，不知道能不能得到回复，文章中说的将64位的对象指针压缩至32位，这样一来类型指针也就压缩至了32位，这里类型指针指向的类的地址，对象指针指向的是什么？两者之间有什么关系？","like_count":0,"discussions":[{"author":{"id":1811236,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a3/24/66ea4fc7.jpg","nickname":"DK","note":"","ucode":"8C1F6949ECB534","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332081,"discussion_content":"对象指针指向实例数据，类型指针用来判断是哪个类的实例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607058116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180069,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1582179515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582179515","product_id":100010301,"comment_content":"今天才知道Java有这么创建对象的方法！","like_count":0},{"had_liked":false,"id":163716,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1576772033,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576772033","product_id":100010301,"comment_content":"对齐那块有个图示就更好了。","like_count":0},{"had_liked":false,"id":159528,"user_name":"老白","can_delete":false,"product_type":"c1","uid":1397031,"ip_address":"","ucode":"39881175152D49","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/27/f0dd6f19.jpg","comment_is_top":false,"comment_ctime":1575650199,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1575650199","product_id":100010301,"comment_content":"“但是如果规定需要从 4 的倍数号车位停起，那么小房车则会浪费两个车位，而大房车至多可能浪费三个车位”，大房车占用三个车位，那么为什么会至多浪费三个车位？我理解是一个小房车跟着一个大房车，这样8个车位会浪费三个。但是一个小房车跟着一个小房车还会浪费四个吧？这句话是不通顺，还是说有其他解释？","like_count":0},{"had_liked":false,"id":148250,"user_name":"长脖子树","can_delete":false,"product_type":"c1","uid":1182802,"ip_address":"","ucode":"D9090EF67EEB1B","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/52/f25c3636.jpg","comment_is_top":false,"comment_ctime":1572963843,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572963843","product_id":100010301,"comment_content":"jol 真的是很好用的一个工具","like_count":0},{"had_liked":false,"id":136087,"user_name":"蒋波","can_delete":false,"product_type":"c1","uid":1526325,"ip_address":"","ucode":"611A1F0629F08E","user_header":"https://static001.geekbang.org/account/avatar/00/17/4a/35/16861bf8.jpg","comment_is_top":false,"comment_ctime":1569341560,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569341560","product_id":100010301,"comment_content":"字段内存对齐的其中一个原因，是让字段只出现在同一 CPU 的缓存行中。老师，首先缓存行是个什么概念？能讲解具象一点吗？然后为什么字段不内存对齐就会出现在跨缓存行里面，一个字段还可以拆分存到多个缓存行里吗？","like_count":0},{"had_liked":false,"id":98310,"user_name":"林三杠","can_delete":false,"product_type":"c1","uid":1012832,"ip_address":"","ucode":"E667F986D07DC6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/60/0403b575.jpg","comment_is_top":false,"comment_ctime":1558953810,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1558953810","product_id":100010301,"comment_content":"创建的java对象，包含不包含方法里的那些指令，是每个对象都有一份指令，还是只有一份在方法区内？","like_count":0},{"had_liked":false,"id":96796,"user_name":"马上到","can_delete":false,"product_type":"c1","uid":1147414,"ip_address":"","ucode":"9FAA3E39B653BE","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/16/937c6906.jpg","comment_is_top":false,"comment_ctime":1558509285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558509285","product_id":100010301,"comment_content":"需要多嚼几遍才能消化","like_count":0},{"had_liked":false,"id":79657,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1553517036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553517036","product_id":100010301,"comment_content":"一个JAVA对象可以通过new，反序列化，clone等多种方式创建对象。new的时候，首先会为对象申请内存，然后调用构造器创建对象，初始化字段，会默认调用无参构造器对象，也会先调用父类的构造器，如果父类构造器无参，则隐式调用，如果是有参构造函数，则显式调用。子类的实例会为父类实例字段分配内存。<br>在内存中的布局，创建对象的时候会在为对象分配内存，一个对象有对象头，对象头里面存储的是标记字段和类型指针，对象头里面有哈希码，gc等信息，类型指针存的是指向类的引用，各自占用64位，8个字节，这是每个对象额外存储的，这样所以引入了基础类型。压缩指针可以将类型指针压成32位的，节省4个字节，压缩指针还可以压缩字段以及引用类型数组。压缩指针的原理，java对象默认的起始位置是8的位数，如果一个对象用不到8N，剩下的空间就浪费了，浪费的空间叫对象间的填充。对齐方式叫内存对齐，可以通过内存对齐选项来提升寻址范围，但是也容易导致对象填充。内存对象不仅存在于对象与对象之间，也存在于字段与字段中间，字段对齐的一个原因是，让字段出现在同一CPU的缓存行中，跨缓存行会影响执行效率。字段重排列，会重新分配字段的顺序，以达到内存对齐的目的。有2个选择，一个是字段偏移量是NC，子类字段的偏移量需要与父类对应字段的偏移量保持一致。使用了压缩指针的对象，子类第一个字段需要对齐至4N，没用压缩指针的对齐至8N。","like_count":0},{"had_liked":false,"id":71839,"user_name":"志远","can_delete":false,"product_type":"c1","uid":1108762,"ip_address":"","ucode":"11015D14034130","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/1a/579c941e.jpg","comment_is_top":false,"comment_ctime":1551448998,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1551448998","product_id":100010301,"comment_content":"因此，每一个 Integer 对象的额外内存开销至少是 400%。这句话实在令人费解，400%的单位是什么，4字节？","like_count":0,"discussions":[{"author":{"id":2055017,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5b/69/477a9071.jpg","nickname":"璟","note":"","ucode":"EA244A298C262B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297263,"discussion_content":"百分比哪儿来的单位。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596851825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1031845,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/a5/df917d18.jpg","nickname":"ward-wolf","note":"","ucode":"BC41D01301263A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3978,"discussion_content":"就是对应单位的4倍，4个字节对应就是16个字节了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565017030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69130,"user_name":"suynan","can_delete":false,"product_type":"c1","uid":1023214,"ip_address":"","ucode":"0AAD1BA9D22D2C","user_header":"","comment_is_top":false,"comment_ctime":1550666854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550666854","product_id":100010301,"comment_content":"上班间隙悄悄看了开头的一点点，真的好多干货，准备一周时间啃完一遍","like_count":0},{"had_liked":false,"id":58023,"user_name":"Nevermore","can_delete":false,"product_type":"c1","uid":1228011,"ip_address":"","ucode":"06EBD2E6A9B436","user_header":"https://static001.geekbang.org/account/avatar/00/12/bc/eb/c22ef3a5.jpg","comment_is_top":false,"comment_ctime":1546961838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546961838","product_id":100010301,"comment_content":"以 long 类为例，它仅有一个 long 类型的实例字段。在使用了压缩指针的 64 位虚拟机中，尽管对象头的大小为 12 个字节，该 long 类型字段的偏移量也只能是 16，而中间空着的 4 个字节便会被浪费掉。<br><br><br>long存储的值占用8个字节，默认情况是以8N的位置开始占用的，所以long一共占用20个字节。所以当存储下一个long时，只能从第24个字节的位置开始存，那么20-23的位置就被浪费了。<br><br>老师，我这理解有问题么？","like_count":0},{"had_liked":false,"id":58015,"user_name":"Nevermore","can_delete":false,"product_type":"c1","uid":1228011,"ip_address":"","ucode":"06EBD2E6A9B436","user_header":"https://static001.geekbang.org/account/avatar/00/12/bc/eb/c22ef3a5.jpg","comment_is_top":false,"comment_ctime":1546960897,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1546960897","product_id":100010301,"comment_content":"在对压缩指针解引用时，我们需要将其左移 3 位，再加上一个固定偏移量，便可以得到能够寻址 32GB 地址空间的伪 64 位指针了。<br><br><br>这句话不理解，老师能否具体讲解下。","like_count":0,"discussions":[{"author":{"id":1339022,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","nickname":"拯救地球好累","note":"","ucode":"7643439601EF4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9472,"discussion_content":"32位可按8字节寻址，8字节以内的寻址还需要3位，这三位也就是可以设置的8字节内的偏移量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568171726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55060,"user_name":"橙生北国","can_delete":false,"product_type":"c1","uid":1251905,"ip_address":"","ucode":"13E32479E111B7","user_header":"https://static001.geekbang.org/account/avatar/00/13/1a/41/3d87f7ac.jpg","comment_is_top":false,"comment_ctime":1546012643,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1546012643","product_id":100010301,"comment_content":"这时候写留言不知道能不能跟上，老师，请问如果我new一个对象，它会影响JVM五个区域中的几个？大概是怎么影响的。","like_count":0},{"had_liked":false,"id":26105,"user_name":"Geek_987169","can_delete":false,"product_type":"c1","uid":1180853,"ip_address":"","ucode":"4B2955A044805D","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/b5/8bc4790b.jpg","comment_is_top":false,"comment_ctime":1537499306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537499306","product_id":100010301,"comment_content":"老师，“堆中原本 64 位的 Java 对象指针压缩成 32 位”这几句话中的“64位java对象指针”是个啥？在哪里？为什么会影响想到对象头中类型指针？","like_count":0},{"had_liked":false,"id":23823,"user_name":"下次一定","can_delete":false,"product_type":"c1","uid":1123940,"ip_address":"","ucode":"0D64B815996BC4","user_header":"https://static001.geekbang.org/account/avatar/00/11/26/64/b1329120.jpg","comment_is_top":false,"comment_ctime":1536673153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536673153","product_id":100010301,"comment_content":"老师你好，为了确定数组的对象头的大小，看了网上各种描述很困惑，我去找了openjdk8的源码：<br>在openjdk-8&#47;hotspot&#47;src&#47;share&#47;vm&#47;oops&#47;arrayOop.hpp里面的class arrayOopDesc<br>找到size_t hs = align_size_up(length_offset_in_bytes() + sizeof(int), HeapWordSize);<br>想确认一下64位虚拟机环境下，不开启指针压缩，数组的对象头应该是8+8+4=20字节对吗<br>求回复啊","like_count":0},{"had_liked":false,"id":20251,"user_name":"小白猪","can_delete":false,"product_type":"c1","uid":1180615,"ip_address":"","ucode":"BC7FC0E0585B76","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/c7/bd45f0c9.jpg","comment_is_top":false,"comment_ctime":1534336205,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1534336205","product_id":100010301,"comment_content":"引用类型是4个字节吗，还是压缩开启后是4个字节","like_count":0,"discussions":[{"author":{"id":1811236,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a3/24/66ea4fc7.jpg","nickname":"DK","note":"","ucode":"8C1F6949ECB534","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332083,"discussion_content":"压缩开启后","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607058745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19996,"user_name":"xianhai","can_delete":false,"product_type":"c1","uid":1073505,"ip_address":"","ucode":"906578663CEB3E","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/61/677e8f92.jpg","comment_is_top":false,"comment_ctime":1534207710,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1534207710","product_id":100010301,"comment_content":"压缩指针指向的类对象是存在heap中，还是heap外？","like_count":0,"discussions":[{"author":{"id":1549032,"avatar":"","nickname":"Zzz","note":"","ucode":"9323254354868B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":239287,"discussion_content":"元数据区，堆外","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587291026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1811236,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a3/24/66ea4fc7.jpg","nickname":"DK","note":"","ucode":"8C1F6949ECB534","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1549032,"avatar":"","nickname":"Zzz","note":"","ucode":"9323254354868B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332082,"discussion_content":"对象不是在堆中吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607058706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":239287,"ip_address":""},"score":332082,"extra":""}]}]}]}