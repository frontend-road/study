{"id":11042,"title":"06 | 代码回滚，你真的理解吗？","content":"<h2>什么是代码回滚？</h2>\n<p>在我正式开始今天的分享前，先给你讲两个核心概念：</p>\n<ol>\n<li>\n<p>包回滚是指，线上运行的系统，从现在的版本回滚到以前稳定的老版本。</p>\n</li>\n<li>\n<p>代码回滚是指，Git分支的指针（游标），从指向当前有问题的版本改为指向一个该分支历史树上没问题的版本，而这个版本可以是曾经的commit，也可以是新建的commit。</p>\n</li>\n</ol>\n<h2>你是不是也遇到了问题？</h2>\n<p>在日常的代码管理中，困扰开发工程师最多，也是他们向我咨询得最多的问题就是：代码回滚的问题。这些问题，有的只是影响个人开发，而有的涉及了整个团队。我把这些问题进行了整理汇总，你可以看看是否也遇到过类似的问题？</p>\n<ol>\n<li>\n<p>今天上午我在自己的开发环境上拉了一条新分支，提交了5个commit，最新提交的3个commit 我不想要了，那我该怎么退回到这3个commit之前的那个commit？<br />\n答：参考我在下面即将分享的“个人分支回滚”的内容。</p>\n</li>\n<li>\n<p>我本地的分支通过 reset --hard 的方式做了代码回滚，想通过push的方式让远端的分支也一起回滚，执行push命令时却报错，该怎么办？<br />\n答：如果不加 -f 参数，执行 reset --hard 后，push会被拒绝，因为你当前分支的最新提交落后于其对应的远程分支。push 时加上 -f 参数代表强制覆盖。</p>\n</li>\n<li>\n<p>线上产品包已经回滚到昨天的版本了，我清清楚楚地记得昨天我把发布分支上的代码也reset --hard到对应的commit了，怎么那几个有问题的commit今天又带到发布分支上了？真是要命！<br />\n答：集成分支不能用 reset --hard 做回滚，应该采用集成分支上新增commit的方式达到回滚的目的。</p>\n</li>\n<li>\n<p>我刚刚在GitLab上接纳了一个合并请求（Merge Request），变更已经合入到master上了，但现在我发现这个合并出来的commit有较大的质量问题，我必须把master回滚到合并之前，我该怎么办？<br />\n答：可以在GitLab上找到那<!-- [[[read_end]]] -->个合并请求，点击revert按钮。</p>\n</li>\n<li>\n<p>刚刚线上A产品V6.2的包有问题，我已经把A的产品包回退到V6.1 版本了，请问发布分支上的代码也要回滚到V6.1对应的commit吗？<br />\n答：你可以在下文“哪些情况下需要回滚代码？”和“哪些情况下包的回滚无需回滚代码？”中找到答案。</p>\n</li>\n<li>\n<p>产品包的回滚可以在我们公司持续交付云平台上执行，平台能不能也提供代码一键回滚的功能？这样我们回滚代码能相对轻松一些。<br />\n答：针对已上线发布的版本，我认为持续交付平台提供一键回滚的方式还是有必要的。这么做可以规范集成分支上线后代码回滚的行为，也能减少人为失误。具体做法可以参考我在下面给你分享的“集成分支上线后回滚”的内容。</p>\n</li>\n</ol>\n<p>上面这六个问题，除了前两个问题外，剩下的四个问题都可能影响到整个团队，因此回滚代码时须站在团队的立场，采用合适的方式进行回滚。</p>\n<p>接下来，我就一一为你解答这些问题。</p>\n<h2>哪些情况下需要回滚代码？</h2>\n<p>在代码集成前和集成后，都有可能需要回滚代码。</p>\n<p><strong>第一种情况：开发人员独立使用的分支上，如果最近产生的commit都没有价值，应该废弃掉，此时就需要把代码回滚到以前的版本。</strong> 如图1所示。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/2c/5c/2c8109c6e46be8137cb4bf7fdaacce5c.png?wh=1740*733?wh=1740*733\" alt=\"\" /></p>\n<center>图1 个人分支回滚</center>\n<p><strong>第二种情况：代码集成到团队的集成分支且尚未发布，但在后续测试中发现这部分代码有问题，且一时半会儿解决不掉，为了不把问题传递给下次的集成，此时就需要把有问题的代码从集成分支中回滚掉。</strong> 如图2所示。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/d9/33/d9947d8f6f7f746414a18b81be5f3733.png?wh=1740*733?wh=1740*733\" alt=\"\" /></p>\n<center>图2 集成分支上线前回滚</center>\n<p><strong>第三种情况：代码已经发布到线上，线上包回滚后发现是新上线的代码引起的问题，且需要一段时间修复，此时又有其他功能需要上线，那么主干分支必须把代码回滚到产品包V0529对应的commit。</strong> 如图3所示。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/1d/e5/1db632b6217ed01a9ebb7c640ae09ee5.png?wh=1740*733?wh=1740*733\" alt=\"\" /></p>\n<center>图3 集成分支上线后回滚</center>\n<h2>哪些情况下包的回滚无需回滚代码？</h2>\n<ol>\n<li>\n<p>线上回滚后，查出并不是因为源代码有问题。</p>\n</li>\n<li>\n<p>下次线上发布，就是用来修复刚才线上运行的问题。</p>\n</li>\n</ol>\n<h2>代码回滚必须遵循的原则</h2>\n<p>集成分支上的代码回滚坚决不用 reset --hard 的方式，原因如下：</p>\n<ol>\n<li>\n<p>集成分支上的 commit 都是项目阶段性的成果，即使最近的发布不需要某些 commit 的功能，但仍然需要保留这些 commit ，以备后续之需。</p>\n</li>\n<li>\n<p>开发人员会基于集成分支上的commit 拉取新分支，如果集成分支采用 reset 的方式清除了该 commit ，下次开发人员把新分支合并回集成分支时，又会把被清除的 commit 申请合入，很可能导致不需要的功能再次被引入到集成分支。</p>\n</li>\n</ol>\n<h2>三种典型回滚场景及回滚策略</h2>\n<p>在上面的内容中，我给你提到了个人分支回滚、集成分支上线前的回滚，以及集成分支上线后的回滚，这三种需要代码回滚的场景，它们具有一定的代表性。</p>\n<p>现在，我就先以表1 的形式，针对不同场景为你归纳不同的处理策略。后面的章节中，我再为你具体介绍每种场景的处理步骤。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/26/72/26f06b78c368b7717d06ab03f3bb4872.png?wh=1740*733\" alt=\"\" /></p>\n<center>表1 需要代码回滚的三种场景对应的处理策略</center>\n<p><strong>第一，个人分支回滚</strong></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/2c/5c/2c8109c6e46be8137cb4bf7fdaacce5c.png?wh=1740*733?wh=1740*733\" alt=\"\" /></p>\n<center>同图1 个人分支回滚</center>\n<p>针对图1的情况：</p>\n<ol>\n<li>\n<p>feature-x分支回滚前HEAD指针指向 C6 。</p>\n</li>\n<li>\n<p>在个人工作机上，执行下面的命令：</p>\n</li>\n</ol>\n<pre><code>$ git checkout feature-x   \n$ git reset --hard  C3的HASH值\n</code></pre>\n<p>如果feature-x已经push到远端代码平台了，则远端分支也需要回滚：</p>\n<pre><code>$ git push -f origin  feature-x\n</code></pre>\n<p><strong>第二，集成分支上线前回滚</strong></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/d9/33/d9947d8f6f7f746414a18b81be5f3733.png?wh=1740*733?wh=1740*733\" alt=\"\" /></p>\n<center>同图2 集成分支上线前回滚</center>\n<p>针对图2中集成分支上线前的情况说明：</p>\n<ol>\n<li>\n<p>假定走特性分支开发模式，上面的commit都是特性分支通过merge request合入 master 产生的commit。</p>\n</li>\n<li>\n<p>集成后，测试环境中发现C4和C6的功能有问题，不能上线，需马上回滚代码，以便 C5 的功能上线。</p>\n</li>\n<li>\n<p>团队成员可以在 GitLab 上找到C4和C6合入master的合并请求，然后点击 revert 。如图4所示。</p>\n</li>\n</ol>\n<p><img src=\"https://static001.geekbang.org/resource/image/77/a1/7734d20cb2ddf59f2237584f7c382fa1.png?wh=1740*733\" alt=\"\" /></p>\n<center>图4 用revert方式实现回滚</center>\n<p>回滚后master分支变成如图5所示，C4’是revert C4产生的commit，C6’是revert C6产生的commit。通过revert操作，C4 和 C6 变更的内容在 master 分支上就被清除掉了，而 C5 变更的内容还保留在 master 分支上。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/00/f0/00a1d5aa42c53d4d355e297ca5f221f0.png?wh=1740*733\" alt=\"\" /></p>\n<center>图5 回滚后的示意图</center>\n<p><strong>第三，集成分支上线后回滚</strong></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/1d/e5/1db632b6217ed01a9ebb7c640ae09ee5.png?wh=1740*733?wh=1740*733\" alt=\"\" /></p>\n<center>同图3 集成分支上线后回滚</center>\n<p>我先跟你说明一下图3中的具体情况：</p>\n<ol>\n<li>\n<p>C3打包并上线，生成线上的版本V0529，运行正确。之后C6也打包并上线，生成线上版本V0530，运行一段时间后发现有问题。C4和C5并没有单独打包上线，所以没有对应的线上版本。</p>\n</li>\n<li>\n<p>项目组把产品包从V0530回滚到V0529，经过定位，V0530的代码有问题，但短时间不能修复，于是，项目组决定回滚代码。</p>\n</li>\n<li>\n<p>C4和C5没有单独上过线，因此从线上包的角度看，不能回滚到C4或C5，应该回滚到C3。</p>\n</li>\n<li>\n<p>考虑到线上包可以回滚到曾发布过的任意一个正确的版本。为了适应线上包的这个特点，线上包回滚触发的代码回滚我们决定不用 一个个revert C4、C5和C6的方式，而是直接创建一个新的commit，它的内容等于 C3 的内容。</p>\n</li>\n<li>\n<p>具体回滚步骤：</p>\n</li>\n</ol>\n<pre><code>$ git fetch origin  \n$ git checkout master\n$ git reset --hard  V0529         # 把本地的master 分支的指针回退到 V0529，此时暂存区(index)里就指向 V0529里的内容了。\n$ git reset --soft  origin/master  # --soft使得本地的master 分支的指针重新回到 V05javascript:;30，而暂存区(index)变成 V0529的内容。\n$ git commit -m \"rollback to V0529\"  # 把暂存区里的内容提交，这样一来新生成的commit的内容和 V0529 相同。 \n$ git push origin  master        # 远端的master也被回滚。\n</code></pre>\n<p>回滚后如图6所示。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/1c/46/1c05958045f89f8dae034fd2f5461f46.png?wh=1740*733\" alt=\"\" /></p>\n<center>图6 回滚后的示意图</center>\n<p>C3’的内容等于 C3，master分支已清除C4、C5和C6的变更。</p>\n<p>现在master又回到了正确的状态，其他功能可以继续上线。</p>\n<p>如果要修复C4、C5和C6的问题，可以在开发分支上先revert 掉C3’ ，这样被清除的几个commit的内容又恢复了。</p>\n<h2>总结</h2>\n<p>代码回滚在持续交付中与包回滚一样，也是不可缺少的一项活动。但它并不是简单地去执行Git的reset或revert命令就可以搞定的事情。</p>\n<p>除了开发的个人分支上存在回滚的情况外，我们还会遇到集成分支上需要回滚的情况；对于集成分支的回滚，又可以分为上线前和上线后两种情况；因为紧急程度和上线情况的不同，我们必须采用不同的回滚策略。</p>\n<p>我围绕着开发工程师在代码管理中，最常遇到的6个问题，分别为你介绍了代码回滚的概念，梳理了需要回滚及不需要回滚的情况，分析了回滚的类别及其不同的回滚策略，提炼了回滚原则，希望能对你的实际工作有所帮助，保持正确的回滚姿势。</p>\n<h2>思考题</h2>\n<p>那么，接下来就是留给你的思考题了。</p>\n<ol>\n<li>\n<p>集成分支上线前，如果发现新提交的5个commit有3个需要回滚，请问，除了点击合并请求中的revert按钮这种方法外，还可以怎么做？</p>\n</li>\n<li>\n<p>采用特性分支开发的一个项目，每个特性分支合入到 master 时都会产生一个合并的commit，而且该项目是禁止直接向master做push操作的。可是该项目的master分支却存在多个非合并产生的commit，请问这些commit很可能是怎么产生的？</p>\n</li>\n<li>\n<p>持续交付平台如果要提供一键代码回滚的功能，每次回滚都要生成一个新的commit吗？即使以前已经产生过同内容的commit了，也要重建新的commit么？</p>\n</li>\n</ol>\n<p>欢迎你给我留言。</p>\n<p></p>\n","comments":[{"had_liked":false,"id":16171,"user_name":"大M","can_delete":false,"product_type":"c1","uid":1029057,"ip_address":"","ucode":"4A0EC46D4178E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b3/c1/beca97d7.jpg","comment_is_top":true,"comment_ctime":1531812782,"is_pvip":false,"replies":[{"id":"5662","content":"设计这个问题，一来请大家注意“集成分支的回滚”，不能用reset --hard的方式来清除不要的代码，而该使用revert；二来鼓励大家通过实践与思考，真正地掌握revert命令，以便高效解决各类代码回滚的问题。<br><br>通过gitlab UI界面，我们只能回滚单个commit，而用git revert命令，可以一次性回滚连续的或间隔的几个commit，其次，如果遇到merge产生的合并commit，必须使用 -m 参数才能回滚，因为要确认正确的父节点<br><br>这里还引申出的一个问题是，如果通过UI回滚单个commit不能满足回滚要求的话，建议开发在本地利用revert灵活的方式完成代码回滚，本地测试没问题，再push到远端，然后发回滚的Merge Request。<br>","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531888921,"ip_address":"","comment_id":16171,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720512714998e+18","product_id":100009701,"comment_content":"第一个通过reset-hard和reset -soft 可以实现，下面两个求指教。","like_count":3,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420697,"discussion_content":"设计这个问题，一来请大家注意“集成分支的回滚”，不能用reset --hard的方式来清除不要的代码，而该使用revert；二来鼓励大家通过实践与思考，真正地掌握revert命令，以便高效解决各类代码回滚的问题。\n\n通过gitlab UI界面，我们只能回滚单个commit，而用git revert命令，可以一次性回滚连续的或间隔的几个commit，其次，如果遇到merge产生的合并commit，必须使用 -m 参数才能回滚，因为要确认正确的父节点\n\n这里还引申出的一个问题是，如果通过UI回滚单个commit不能满足回滚要求的话，建议开发在本地利用revert灵活的方式完成代码回滚，本地测试没问题，再push到远端，然后发回滚的Merge Request。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531888921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20878,"user_name":"孙文正","can_delete":false,"product_type":"c1","uid":1026674,"ip_address":"","ucode":"29171BB7988256","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/72/abb7bfe3.jpg","comment_is_top":true,"comment_ctime":1534806811,"is_pvip":false,"replies":[{"id":"7349","content":"这些都会在最后的一节中介绍，但是这些其实gitlab的doc都挺清楚的，我还是力求将一些大家不一定了解但却有用的东西","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1534814091,"ip_address":"","comment_id":20878,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720383896003e+18","product_id":100009701,"comment_content":"希望每篇的下面分享一些具体实施的文章。<br>比如gitlab的ci流程具体的部署等等。<br>","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422434,"discussion_content":"这些都会在最后的一节中介绍，但是这些其实gitlab的doc都挺清楚的，我还是力求将一些大家不一定了解但却有用的东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534814091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17060,"user_name":"zhchnchn","can_delete":false,"product_type":"c1","uid":1110218,"ip_address":"","ucode":"2219E40ED134D4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/ca/4560f06b.jpg","comment_is_top":false,"comment_ctime":1532401697,"is_pvip":false,"replies":[{"id":"5953","content":"我们说上线后不得已才会回滚集成分支的代码（短时间不能修复A功能代码的问题，而B功能又急着要上线）。<br><br>上述操作，我们把集成分支回到正确的地方，并且在集成分支上通过新增一个commit的方式，其意义有4个: 让团队其他成员新拉取的代码都没有问题；让曾经拉取了问题代码的分支merge回集成分支的时候，也不会再次把问题带进来；不会影响其他紧急上线的功能；负责修复问题的开发人员，只需再执行revert就能取到需要修复的代码。<br><br>","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1532428651,"ip_address":"","comment_id":17060,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27302205473","product_id":100009701,"comment_content":"有个问题请教，在集成分支上线后回滚的操作步骤中，$ git reset --soft  origin&#47;master  # --soft 使得本地的 master 分支的指针重新回到 V05javascript:;30，而暂存区 (index) 变成 V0529 的内容。这部操作有什么意义吗？文中后面不是说“如果要修复问题，可以在开发分支中先revert掉 C3&#39;，这样被清除的几个commit的内容又恢复了”吗？","like_count":6,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421026,"discussion_content":"我们说上线后不得已才会回滚集成分支的代码（短时间不能修复A功能代码的问题，而B功能又急着要上线）。\n\n上述操作，我们把集成分支回到正确的地方，并且在集成分支上通过新增一个commit的方式，其意义有4个: 让团队其他成员新拉取的代码都没有问题；让曾经拉取了问题代码的分支merge回集成分支的时候，也不会再次把问题带进来；不会影响其他紧急上线的功能；负责修复问题的开发人员，只需再执行revert就能取到需要修复的代码。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532428651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1220775,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a0/a7/db7a7c50.jpg","nickname":"送普选","note":"","ucode":"AB2C98BB9C3A5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366164,"discussion_content":"负责修复的开发人员需要在自己的开发分支上revert么？不能revert集成分支上已经上线的提交吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617974123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17687,"user_name":"致远","can_delete":false,"product_type":"c1","uid":1064334,"ip_address":"","ucode":"5DFFC1FBAC6D7B","user_header":"https://static001.geekbang.org/account/avatar/00/10/3d/8e/2e8cc27d.jpg","comment_is_top":false,"comment_ctime":1532876172,"is_pvip":false,"replies":[{"id":"6197","content":"上线前可以通过revert直接处理，纬度是commit；但是上线后，部署包已经存在，你必须考虑与它的对应关系。举个例子，有3个commit，1、2、3上线前你可以回滚1、3，保留2；但上线后，3个commit都要回滚，特别是如果做了自动化代码回滚，这条原则就很重要","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1533010828,"ip_address":"","comment_id":17687,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10122810764","product_id":100009701,"comment_content":"老师，在我理解，集成代码上线前和上线后的回滚原理是一样的，为何还要区分出来呢？","like_count":2,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421230,"discussion_content":"上线前可以通过revert直接处理，纬度是commit；但是上线后，部署包已经存在，你必须考虑与它的对应关系。举个例子，有3个commit，1、2、3上线前你可以回滚1、3，保留2；但上线后，3个commit都要回滚，特别是如果做了自动化代码回滚，这条原则就很重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533010828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":203495,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1106954,"ip_address":"","ucode":"A21E45F4AD1F74","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/0a/d3081e3d.jpg","comment_is_top":false,"comment_ctime":1586221793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881189089","product_id":100009701,"comment_content":"对于特定分支代码 commit 回滚使用 git debate -i 这种是不是更好操作一些。","like_count":1},{"had_liked":false,"id":16221,"user_name":"白天不懂爷的黑","can_delete":false,"product_type":"c1","uid":1056169,"ip_address":"","ucode":"A056238FE5890C","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/a9/afeabc52.jpg","comment_is_top":false,"comment_ctime":1531836186,"is_pvip":false,"replies":[{"id":"5660","content":"gitlab高版本对保护分支做了更加精细的权限控制，允许角色或个人（不一定是master）对保护分支做merge和push。这道题主要让大家回顾一下集成分支代码revert的做法，不是删除不要的commit，而是新建一个commit，如果revert的时候不勾选发起merge request，那么这个revert产生的commt就只有一个parent。<br><br>发布包本身也是一条路径线，也需要被记录，建议发布包本身带一个比较容易辨识的版本号，commitid作为属性记录在发布包上，这样整个发布包历史也可以很好管理","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531887350,"ip_address":"","comment_id":16221,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5826803482","product_id":100009701,"comment_content":"第二个问题是不是拥有master权限的小伙伴直接在网页上修改的啊，😄。第三个问题，应该也可以不用提交commit，我们这是每build一次代码就备份一次当前构建的包，回滚的话列出最近10次备份的包，然后回滚对应的备份。<br>老师，我这最近回滚有点问题，比如说，代码发布了三次，然后都上线失败了，备份的三次包也是有问题的，然后测试不知道哪一个版本是最近正确的版本，导致到处问，这个有什么好办法吗？","like_count":1,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420717,"discussion_content":"gitlab高版本对保护分支做了更加精细的权限控制，允许角色或个人（不一定是master）对保护分支做merge和push。这道题主要让大家回顾一下集成分支代码revert的做法，不是删除不要的commit，而是新建一个commit，如果revert的时候不勾选发起merge request，那么这个revert产生的commt就只有一个parent。\n\n发布包本身也是一条路径线，也需要被记录，建议发布包本身带一个比较容易辨识的版本号，commitid作为属性记录在发布包上，这样整个发布包历史也可以很好管理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531887350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1220775,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a0/a7/db7a7c50.jpg","nickname":"送普选","note":"","ucode":"AB2C98BB9C3A5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366168,"discussion_content":"这个问题我们也遇到过，后来的解决方法是版本包有日期标识，发布验证成功后测试会打个验证成功的版本包打个稳定版本标识，多次上线失败后还是能回滚到最近的稳定版本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617975072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345125,"user_name":"自然","can_delete":false,"product_type":"c1","uid":1181887,"ip_address":"","ucode":"EDFC3EFAB0B88E","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/bf/cd6bfc22.jpg","comment_is_top":false,"comment_ctime":1652066558,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652066558","product_id":100009701,"comment_content":"一言难表。。。。。。。<br>commit 回滚，有个隐藏条件：其他的commit不能依赖这个commit（比如 commit 6  是 dao层 加了个字段，commit 7 是  页面 上针对这个字段 增加了 输入项 ，能把 commit 6 回滚掉么。。。。。）","like_count":0},{"had_liked":false,"id":161695,"user_name":"su","can_delete":false,"product_type":"c1","uid":1639302,"ip_address":"","ucode":"483941139A554C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJdjwibHLWribnapce4IoFVNoPRxiaJcxV2xMrf7qwIyutkNyia8Ea2nwaEQ3yw3AQNARGf2ldzvCrZ9A/132","comment_is_top":false,"comment_ctime":1576299439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576299439","product_id":100009701,"comment_content":"不知道我理解的是不是有误<br>1.  除了点击合并请求中的 revert 按钮这种方法外，可以本地revert操作，然后push推送<br>2. 禁止直接向 master 做 push 操作，而产生出commit节点，是不是因为merge方式的变更，还是我理解有误，如：rebase变基操作，cherry-pick方式，而不是merge request方式<br>3. 我觉得需要的，记录变更，即使是相同内容的commit<br>","like_count":0},{"had_liked":false,"id":157614,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1242455,"ip_address":"","ucode":"0CCCA6F4DCC480","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","comment_is_top":false,"comment_ctime":1575212990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575212990","product_id":100009701,"comment_content":"我有个疑问哈，如果在集成分支上对某个特性分支request进行了revert后。那我之后这个特性分支改完后，再向集成分支进行merge，那么之前revert掉的就无法再合并了呀？","like_count":0},{"had_liked":false,"id":126075,"user_name":"Geek_c991f2","can_delete":false,"product_type":"c1","uid":1624538,"ip_address":"","ucode":"0FDE8CE24B8E32","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jAsPmqra89uLYer998tsdAmHIxy9iaVfLIkzkTB3ITfUZg21Yiadf73TqmcFZXTEv2wuQicDA2uvqXvicHJ9HckBWg/132","comment_is_top":false,"comment_ctime":1566306767,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566306767","product_id":100009701,"comment_content":"请问思考题答案在哪里啊?还有如果项目有3个团队开发,dev会合并3个团队的分支,但是master因为每次发版本不会发3个团队的东西,不会合并dev,难道master又要和dev那样子,再一次和3个团队的分支重新合并一次吗?","like_count":0},{"had_liked":false,"id":77117,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1071877,"ip_address":"","ucode":"8ED1AA14E8D1CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/05/863fc875.jpg","comment_is_top":false,"comment_ctime":1552838266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552838266","product_id":100009701,"comment_content":"码云上有这个smart merge么","like_count":0},{"had_liked":false,"id":68753,"user_name":"松花皮蛋me","can_delete":false,"product_type":"c1","uid":1000054,"ip_address":"","ucode":"B0846CEEF6B0D1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/76/256bbd43.jpg","comment_is_top":false,"comment_ctime":1550593107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550593107","product_id":100009701,"comment_content":"回滚建议新增commit的","like_count":0},{"had_liked":false,"id":56578,"user_name":"kevinsu","can_delete":false,"product_type":"c1","uid":1078506,"ip_address":"","ucode":"BAD46B815D6A5C","user_header":"https://static001.geekbang.org/account/avatar/00/10/74/ea/10661bdc.jpg","comment_is_top":false,"comment_ctime":1546497395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546497395","product_id":100009701,"comment_content":"老师 线上java代码回滚，重新指定分支重新发版也算吧","like_count":0},{"had_liked":false,"id":28846,"user_name":"孙磊","can_delete":false,"product_type":"c1","uid":1256741,"ip_address":"","ucode":"F88E2322D51E2F","user_header":"https://static001.geekbang.org/account/avatar/00/13/2d/25/6ac2f111.jpg","comment_is_top":false,"comment_ctime":1538180114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1538180114","product_id":100009701,"comment_content":"统统一键reset路过ヽ( ￣д￣;)ノ，单项目上线频率一周一次","like_count":0},{"had_liked":false,"id":17176,"user_name":"橙子","can_delete":false,"product_type":"c1","uid":1020744,"ip_address":"","ucode":"E833462689CF7A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/48/79518a01.jpg","comment_is_top":false,"comment_ctime":1532481461,"is_pvip":true,"replies":[{"id":"6059","content":"没有特别的控制约束，最终是以merge request为单位，多个commit的集合，一个mr基本上就是一个功能","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1532683668,"ip_address":"","comment_id":17176,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532481461","product_id":100009701,"comment_content":"commit粒度怎么控制才好，开发分支针对一个文件修改就有一个commit吗？还是一个功能点commit会比较好？","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421069,"discussion_content":"没有特别的控制约束，最终是以merge request为单位，多个commit的集合，一个mr基本上就是一个功能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532683668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16283,"user_name":"还在想，还念","can_delete":false,"product_type":"c1","uid":1166506,"ip_address":"","ucode":"41AFA245102F0D","user_header":"https://static001.geekbang.org/account/avatar/00/11/cc/aa/9d4de725.jpg","comment_is_top":false,"comment_ctime":1531874642,"is_pvip":false,"replies":[{"id":"5624","content":"分支策略可以看一下第4讲的内容","user_name":"作者回复","user_name_real":"潇俊","uid":"1004285","ctime":1531878008,"ip_address":"","comment_id":16283,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1531874642","product_id":100009701,"comment_content":"老师可不可以先讲下分支策略流程 实践中基本的分支策略 master feature uat 等而不是一开始直接讲代码回滚 作为一个测试工程师表示很困惑","like_count":0,"discussions":[{"author":{"id":1004285,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/fd/abb7bfe3.jpg","nickname":"潇俊","note":"","ucode":"D5DFD3E2119D95","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420741,"discussion_content":"分支策略可以看一下第4讲的内容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531878008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}