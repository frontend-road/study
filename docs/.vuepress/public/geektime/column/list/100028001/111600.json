{"id":111600,"title":"31 | 装饰器模式：如何优化电商系统中复杂的商品价格策略？","content":"<p>你好，我是刘超。</p><p>开始今天的学习之前，我想先请你思考一个问题。假设现在有这样一个需求，让你设计一个装修功能，用户可以动态选择不同的装修功能来装饰自己的房子。例如，水电装修、天花板以及粉刷墙等属于基本功能，而设计窗帘装饰窗户、设计吊顶装饰房顶等未必是所有用户都需要的，这些功能则需要实现动态添加。还有就是一旦有新的装修功能，我们也可以实现动态添加。如果要你来负责，你会怎么设计呢？</p><p>此时你可能会想了，通常给一个对象添加功能，要么直接修改代码，在对象中添加相应的功能，要么派生对应的子类来扩展。然而，前者每次都需要修改对象的代码，这显然不是理想的面向对象设计，即便后者是通过派生对应的子类来扩展，也很难满足复杂的随意组合功能需求。</p><p>面对这种情况，使用装饰器模式应该再合适不过了。它的优势我想你多少知道一点，我在这里总结一下。</p><p>装饰器模式能够实现为对象动态添加装修功能，它是从一个对象的外部来给对象添加功能，所以有非常灵活的扩展性，我们可以在对原来的代码毫无修改的前提下，为对象添加新功能。除此之外，装饰器模式还能够实现对象的动态组合，借此我们可以很灵活地给动态组合的对象，匹配所需要的功能。</p><p>下面我们就通过实践，具体看看该模式的优势。</p><!-- [[[read_end]]] --><h2>什么是装饰器模式？</h2><p>在这之前，我先简单介绍下什么是装饰器模式。装饰器模式包括了以下几个角色：接口、具体对象、装饰类、具体装饰类。</p><p>接口定义了具体对象的一些实现方法；具体对象定义了一些初始化操作，比如开头设计装修功能的案例中，水电装修、天花板以及粉刷墙等都是初始化操作；装饰类则是一个抽象类，主要用来初始化具体对象的一个类；其它的具体装饰类都继承了该抽象类。</p><p>下面我们就通过装饰器模式来实现下装修功能，代码如下：</p><pre><code>/**\n * 定义一个基本装修接口\n * @author admin\n *\n */\npublic interface IDecorator {\n\t\n\t/**\n\t * 装修方法\n\t */\n\tvoid decorate();\n\n}\n</code></pre><pre><code>/**\n * 装修基本类\n * @author admin\n *\n */\npublic class Decorator implements IDecorator{\n\n\t/**\n\t * 基本实现方法\n\t */\n\tpublic void decorate() {\n\t\tSystem.out.println(&quot;水电装修、天花板以及粉刷墙。。。&quot;);\n\t}\n\n}\n</code></pre><pre><code>/**\n * 基本装饰类\n * @author admin\n *\n */\npublic abstract class BaseDecorator implements IDecorator{\n\n\tprivate IDecorator decorator;\n\t\n\tpublic BaseDecorator(IDecorator decorator) {\n\t\tthis.decorator = decorator;\n\t}\n\t\n\t/**\n\t * 调用装饰方法\n\t */\n\tpublic void decorate() {\n\t\tif(decorator != null) {\n\t\t\tdecorator.decorate();\n\t\t}\n\t}\n}\n</code></pre><pre><code>/**\n * 窗帘装饰类\n * @author admin\n *\n */\npublic class CurtainDecorator extends BaseDecorator{\n\n\tpublic CurtainDecorator(IDecorator decorator) {\n\t\tsuper(decorator);\n\t}\n\t\n\t/**\n\t * 窗帘具体装饰方法\n\t */\n\t@Override\n\tpublic void decorate() {\n\t\tSystem.out.println(&quot;窗帘装饰。。。&quot;);\n\t\tsuper.decorate();\n\t}\n\n}\n</code></pre><pre><code>    public static void main( String[] args )\n    {\n    \tIDecorator decorator = new Decorator();\n    \tIDecorator curtainDecorator = new CurtainDecorator(decorator);\n    \tcurtainDecorator.decorate();\n        \n    }\n</code></pre><p>运行结果：</p><pre><code>窗帘装饰。。。\n水电装修、天花板以及粉刷墙。。。\n</code></pre><p>通过这个案例，我们可以了解到：如果我们想要在基础类上添加新的装修功能，只需要基于抽象类BaseDecorator去实现继承类，通过构造函数调用父类，以及重写装修方法实现装修窗帘的功能即可。在main函数中，我们通过实例化装饰类，调用装修方法，即可在基础装修的前提下，获得窗帘装修功能。</p><p>基于装饰器模式实现的装修功能的代码结构简洁易读，业务逻辑也非常清晰，并且如果我们需要扩展新的装修功能，只需要新增一个继承了抽象装饰类的子类即可。</p><p>在这个案例中，我们仅实现了业务扩展功能，接下来，我将通过装饰器模式优化电商系统中的商品价格策略，实现不同促销活动的灵活组合。</p><h2>优化电商系统中的商品价格策略</h2><p>相信你一定不陌生，购买商品时经常会用到的限时折扣、红包、抵扣券以及特殊抵扣金等，种类很多，如果换到开发视角，实现起来就更复杂了。</p><p>例如，每逢双十一，为了加大商城的优惠力度，开发往往要设计红包+限时折扣或红包+抵扣券等组合来实现多重优惠。而在平时，由于某些特殊原因，商家还会赠送特殊抵扣券给购买用户，而特殊抵扣券+各种优惠又是另一种组合方式。</p><p>要实现以上这类组合优惠的功能，最快、最普遍的实现方式就是通过大量if-else的方式来实现。但这种方式包含了大量的逻辑判断，致使其他开发人员很难读懂业务， 并且一旦有新的优惠策略或者价格组合策略出现，就需要修改代码逻辑。</p><p>这时，刚刚介绍的装饰器模式就很适合用在这里，其相互独立、自由组合以及方便动态扩展功能的特性，可以很好地解决if-else方式的弊端。下面我们就用装饰器模式动手实现一套商品价格策略的优化方案。</p><p>首先，我们先建立订单和商品的属性类，在本次案例中，为了保证简洁性，我只建立了几个关键字段。以下几个重要属性关系为，主订单包含若干详细订单，详细订单中记录了商品信息，商品信息中包含了促销类型信息，一个商品可以包含多个促销类型（本案例只讨论单个促销和组合促销）：</p><pre><code>/**\n * 主订单\n * @author admin\n *\n */\npublic class Order {\n\t\n\tprivate int id; //订单ID\n\tprivate String orderNo; //订单号\n\tprivate BigDecimal totalPayMoney; //总支付金额\n\tprivate List&lt;OrderDetail&gt; list; //详细订单列表\n}\n</code></pre><pre><code>/**\n * 详细订单\n * @author admin\n *\n */\npublic class OrderDetail {\n\tprivate int id; //详细订单ID\n\tprivate int orderId;//主订单ID\n\tprivate Merchandise merchandise; //商品详情\n\tprivate BigDecimal payMoney; //支付单价\n}\n</code></pre><pre><code>/**\n * 商品\n * @author admin\n *\n */\npublic class Merchandise {\n\t\n\tprivate String sku;//商品SKU\n\tprivate String name; //商品名称\n\tprivate BigDecimal price; //商品单价\n\tprivate Map&lt;PromotionType, SupportPromotions&gt; supportPromotions; //支持促销类型\n}\n</code></pre><pre><code>/**\n * 促销类型\n * @author admin\n *\n */\npublic class SupportPromotions implements Cloneable{\n\n\tprivate int id;//该商品促销的ID\n\tprivate PromotionType promotionType;//促销类型 1\\优惠券 2\\红包\n\tprivate int priority; //优先级\n\tprivate UserCoupon userCoupon; //用户领取该商品的优惠券\n\tprivate UserRedPacket userRedPacket; //用户领取该商品的红包\n\t\n\t//重写clone方法\n    public SupportPromotions clone(){\n    \tSupportPromotions supportPromotions = null;\n        try{\n        \tsupportPromotions = (SupportPromotions)super.clone();\n        }catch(CloneNotSupportedException e){\n            e.printStackTrace();\n        }\n        return supportPromotions;\n    }\n}\n</code></pre><pre><code>/**\n * 优惠券\n * @author admin\n *\n */\npublic class UserCoupon {\n\t\n\tprivate int id; //优惠券ID\n\tprivate int userId; //领取优惠券用户ID\n\tprivate String sku; //商品SKU\n\tprivate BigDecimal coupon; //优惠金额\n}\n</code></pre><pre><code>/**\n * 红包\n * @author admin\n *\n */\npublic class UserRedPacket {\n\n\tprivate int id; //红包ID\n\tprivate int userId; //领取用户ID\n\tprivate String sku; //商品SKU\n\tprivate BigDecimal redPacket; //领取红包金额\n}\n</code></pre><p>接下来，我们再建立一个计算支付金额的接口类以及基本类：</p><pre><code>/**\n * 计算支付金额接口类\n * @author admin\n *\n */\npublic interface IBaseCount {\n\t\n\tBigDecimal countPayMoney(OrderDetail orderDetail);\n\n}\n</code></pre><pre><code>/**\n * 支付基本类\n * @author admin\n *\n */\npublic class BaseCount implements IBaseCount{\n\n\tpublic BigDecimal countPayMoney(OrderDetail orderDetail) {\norderDetail.setPayMoney(orderDetail.getMerchandise().getPrice());\n\t\tSystem.out.println(&quot;商品原单价金额为：&quot; +  orderDetail.getPayMoney());\n\t\t\n\t\treturn orderDetail.getPayMoney();\n\t}\n\n}\n</code></pre><p>然后，我们再建立一个计算支付金额的抽象类，由抽象类调用基本类：</p><pre><code>/**\n * 计算支付金额的抽象类\n * @author admin\n *\n */\npublic abstract class BaseCountDecorator implements IBaseCount{\n\t\n\tprivate IBaseCount count;\n\t\n\tpublic BaseCountDecorator(IBaseCount count) {\n\t\tthis.count = count;\n\t}\n\n\tpublic BigDecimal countPayMoney(OrderDetail orderDetail) {\n\t\tBigDecimal payTotalMoney = new BigDecimal(0);\n\t\tif(count!=null) {\n\t\t\tpayTotalMoney = count.countPayMoney(orderDetail);\n\t\t}\n\t\treturn payTotalMoney;\n\t}\n}\n</code></pre><p>然后，我们再通过继承抽象类来实现我们所需要的修饰类（优惠券计算类、红包计算类）：</p><pre><code>/**\n * 计算使用优惠券后的金额\n * @author admin\n *\n */\npublic class CouponDecorator extends BaseCountDecorator{\n\n\tpublic CouponDecorator(IBaseCount count) {\n\t\tsuper(count);\n\t}\n\t\n\tpublic BigDecimal countPayMoney(OrderDetail orderDetail) {\n\t\tBigDecimal payTotalMoney = new BigDecimal(0);\n\t\tpayTotalMoney = super.countPayMoney(orderDetail);\n\t\tpayTotalMoney = countCouponPayMoney(orderDetail);\n\t\treturn payTotalMoney;\n\t}\n\t\n\tprivate BigDecimal countCouponPayMoney(OrderDetail orderDetail) {\n\t\t\n\t\tBigDecimal coupon =  orderDetail.getMerchandise().getSupportPromotions().get(PromotionType.COUPON).getUserCoupon().getCoupon();\n\t\tSystem.out.println(&quot;优惠券金额：&quot; + coupon);\n\t\t\n\t\torderDetail.setPayMoney(orderDetail.getPayMoney().subtract(coupon));\n\t\treturn orderDetail.getPayMoney();\n\t}\n}\n</code></pre><pre><code>/**\n * 计算使用红包后的金额\n * @author admin\n *\n */\npublic class RedPacketDecorator extends BaseCountDecorator{\n\n\tpublic RedPacketDecorator(IBaseCount count) {\n\t\tsuper(count);\n\t}\n\t\n\tpublic BigDecimal countPayMoney(OrderDetail orderDetail) {\n\t\tBigDecimal payTotalMoney = new BigDecimal(0);\n\t\tpayTotalMoney = super.countPayMoney(orderDetail);\n\t\tpayTotalMoney = countCouponPayMoney(orderDetail);\n\t\treturn payTotalMoney;\n\t}\n\t\n\tprivate BigDecimal countCouponPayMoney(OrderDetail orderDetail) {\n\t\t\n\t\tBigDecimal redPacket = orderDetail.getMerchandise().getSupportPromotions().get(PromotionType.REDPACKED).getUserRedPacket().getRedPacket();\n\t\tSystem.out.println(&quot;红包优惠金额：&quot; + redPacket);\n\t\t\n\t\torderDetail.setPayMoney(orderDetail.getPayMoney().subtract(redPacket));\n\t\treturn orderDetail.getPayMoney();\n\t}\n}\n</code></pre><p>最后，我们通过一个工厂类来组合商品的促销类型：</p><pre><code>/**\n * 计算促销后的支付价格\n * @author admin\n *\n */\npublic class PromotionFactory {\n\t\n\tpublic static BigDecimal getPayMoney(OrderDetail orderDetail) {\n\t\t\n\t\t//获取给商品设定的促销类型\n\t\tMap&lt;PromotionType, SupportPromotions&gt; supportPromotionslist = orderDetail.getMerchandise().getSupportPromotions();\n\t\t\n\t\t//初始化计算类\n\t\tIBaseCount baseCount = new BaseCount();\n\t\tif(supportPromotionslist!=null &amp;&amp; supportPromotionslist.size()&gt;0) {\n\t\t\tfor(PromotionType promotionType: supportPromotionslist.keySet()) {//遍历设置的促销类型，通过装饰器组合促销类型\n\t\t\t\tbaseCount = protmotion(supportPromotionslist.get(promotionType), baseCount);\n\t\t\t}\n\t\t}\n\t\treturn baseCount.countPayMoney(orderDetail);\n\t}\n\t\n\t/**\n\t * 组合促销类型\n\t * @param supportPromotions\n\t * @param baseCount\n\t * @return\n\t */\n\tprivate static IBaseCount protmotion(SupportPromotions supportPromotions, IBaseCount baseCount) {\n\t\tif(supportPromotions.getPromotionType()==PromotionType.COUPON) {\n\t\t\tbaseCount = new CouponDecorator(baseCount);\n\t\t}else if(supportPromotions.getPromotionType()==PromotionType.REDPACKED) {\n\t\t\tbaseCount = new RedPacketDecorator(baseCount);\n\t\t}\n\t\treturn baseCount;\n\t}\n\n}\n</code></pre><pre><code>    public static void main( String[] args ) throws InterruptedException, IOException\n    {\n    \tOrder order = new Order();\n    \tinit(order);\n    \t\n    \tfor(OrderDetail orderDetail: order.getList()) {\n    \t\tBigDecimal payMoney = PromotionFactory.getPayMoney(orderDetail);\n    \t\torderDetail.setPayMoney(payMoney);\n    \t\tSystem.out.println(&quot;最终支付金额：&quot; + orderDetail.getPayMoney());\n    \t}\n    }\n</code></pre><p>运行结果：</p><pre><code>商品原单价金额为：20\n优惠券金额：3\n红包优惠金额：10\n最终支付金额：7\n</code></pre><p>以上源码可以通过 <a href=\"https://github.com/nickliuchao/decorator.git\">Github</a> 下载运行。通过以上案例可知：使用装饰器模式设计的价格优惠策略，实现各个促销类型的计算功能都是相互独立的类，并且可以通过工厂类自由组合各种促销类型。</p><h2>总结</h2><p>这讲介绍的装饰器模式主要用来优化业务的复杂度，它不仅简化了我们的业务代码，还优化了业务代码的结构设计，使得整个业务逻辑清晰、易读易懂。</p><p>通常，装饰器模式用于扩展一个类的功能，且支持动态添加和删除类的功能。在装饰器模式中，装饰类和被装饰类都只关心自身的业务，不相互干扰，真正实现了解耦。</p><h2>思考题</h2><p>责任链模式、策略模式与装饰器模式有很多相似之处。平时，这些设计模式除了在业务中被用到以外，在架构设计中也经常被用到，你是否在源码中见过这几种设计模式的使用场景呢？欢迎你与大家分享。</p><p></p>","neighbors":{"left":{"article_title":"30 | 生产者消费者模式：电商库存设计优化","id":111288},"right":{"article_title":"32 | 答疑课堂：模块五思考题集锦","id":112160}},"comments":[{"had_liked":false,"id":119486,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1564618640,"is_pvip":false,"replies":[{"id":"43996","content":"👍🏻","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564712833,"ip_address":"","comment_id":119486,"utype":1}],"discussion_count":1,"race_medal":0,"score":"190543179664","product_id":100028001,"comment_content":"责任链。最常见到的就是接收http请求了。帮我们转码，转化成实体类，等等。策略模式。最常简单和用到的就是集合排序，自定义排序规则。装饰器，最常见到的就是各种流，比如字符流，字节流等","like_count":45,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460922,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564712833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119725,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1564665560,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"108938847960","product_id":100028001,"comment_content":"老师这个案例来的太及时了，正想重构公司订单优惠劵红包扣除这方面的代码，真的是及时雨啊？厉害厉害👍🏻","like_count":26},{"had_liked":false,"id":119452,"user_name":"nightmare","can_delete":false,"product_type":"c1","uid":1056314,"ip_address":"","ucode":"EF2E51C2122A86","user_header":"https://static001.geekbang.org/account/avatar/00/10/1e/3a/5b21c01c.jpg","comment_is_top":false,"comment_ctime":1564592616,"is_pvip":false,"replies":[{"id":"43997","content":"有读源码习惯👍🏻","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564712875,"ip_address":"","comment_id":119452,"utype":1}],"discussion_count":1,"race_medal":0,"score":"87463938536","product_id":100028001,"comment_content":"netty中的pipeline，tomcat中的filter，属于责任链，   springmvc中对参数解析的就是 策略模式，每一个参数类型一个实现类，用for循环解析参数     java. io就是经典的装饰器模式","like_count":21,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460908,"discussion_content":"有读源码习惯👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564712875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175855,"user_name":"李英权","can_delete":false,"product_type":"c1","uid":1076081,"ip_address":"","ucode":"FECAC14A9C414B","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/71/e833b14a.jpg","comment_is_top":false,"comment_ctime":1580870816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53120478368","product_id":100028001,"comment_content":"每次看到有人这样做装饰器或者策略模式的初始化，都觉得很可惜，因为这徒增了很多麻烦，其实完全可以把装饰器或策略实现作为枚举值的成员变量 初始化到枚举类型中。无论是以后扩展还是平时使用 都非常简单自然。","like_count":11},{"had_liked":false,"id":119446,"user_name":"CCC","can_delete":false,"product_type":"c1","uid":1259814,"ip_address":"","ucode":"1608E84D2F0655","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/26/61e46afe.jpg","comment_is_top":false,"comment_ctime":1564589885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31629360957","product_id":100028001,"comment_content":"有几个今年秋招的！举个手！老师的课程真的收获很多！","like_count":8},{"had_liked":false,"id":130010,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1567351077,"is_pvip":false,"replies":[{"id":"48613","content":"我们知道，InputStream是直接读写文件的，除了InputStream，在其上层还有BufferedInputStream、DataInputStream等其他修饰类，增加了缓存读取、类型读取等功能，相当于InputStream之上加了很多修饰功能，在所以它是一个装饰器模式。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567424639,"ip_address":"","comment_id":130010,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23042187557","product_id":100028001,"comment_content":"老师，为什么java io是装饰器模式","like_count":6,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465762,"discussion_content":"我们知道，InputStream是直接读写文件的，除了InputStream，在其上层还有BufferedInputStream、DataInputStream等其他修饰类，增加了缓存读取、类型读取等功能，相当于InputStream之上加了很多修饰功能，在所以它是一个装饰器模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567424639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119517,"user_name":"冯传博","can_delete":false,"product_type":"c1","uid":1177787,"ip_address":"","ucode":"91B9A1EF0FF042","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/bb/8b2ba45d.jpg","comment_is_top":false,"comment_ctime":1564621152,"is_pvip":false,"replies":[{"id":"43994","content":"好的，后续补上","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564712722,"ip_address":"","comment_id":119517,"utype":1}],"discussion_count":4,"race_medal":0,"score":"14449523040","product_id":100028001,"comment_content":"希望能有个类图，这样就能一目了然的看清楚各个类之间的关系了","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460937,"discussion_content":"好的，后续补上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564712722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350475,"discussion_content":"2年了,还没补上.哈哈","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1613890190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1130561,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/41/abb7bfe3.jpg","nickname":"北城.","note":"","ucode":"FF7F69F71FAD02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556499,"discussion_content":"三年了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647402617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":350475,"ip_address":""},"score":556499,"extra":""}]},{"author":{"id":1008582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/c6/d6ea3df3.jpg","nickname":"林肯","note":"","ucode":"D2C97220230DE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531214,"discussion_content":"自己动手画一画，阅读效果更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637248185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131460,"user_name":"飞鸽","can_delete":false,"product_type":"c1","uid":1102172,"ip_address":"","ucode":"D6CB7D762D9E46","user_header":"https://static001.geekbang.org/account/avatar/00/10/d1/5c/ff82e7d2.jpg","comment_is_top":false,"comment_ctime":1567757931,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10157692523","product_id":100028001,"comment_content":"促销、红包这种情况复杂多变。基于规则配置处理更好。","like_count":2},{"had_liked":false,"id":121020,"user_name":"Liam","can_delete":false,"product_type":"c1","uid":1094597,"ip_address":"","ucode":"1D15D3B64F2606","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","comment_is_top":false,"comment_ctime":1565050939,"is_pvip":false,"replies":[{"id":"51663","content":"两者都可以达到对一个对象添加方法，但代理模式偏向于控制外部其他对象对该对象的访问，而装饰器是为了增强一个对象的功能。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568897703,"ip_address":"","comment_id":121020,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10154985531","product_id":100028001,"comment_content":"请问老师，装饰器和代理有什么区别呢，代理也可以实现被代理的接口，并注入被代理对象实现功能扩展，最后可以委托被代理对象完成基础功能","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461578,"discussion_content":"两者都可以达到对一个对象添加方法，但代理模式偏向于控制外部其他对象对该对象的访问，而装饰器是为了增强一个对象的功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568897703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119495,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1564619588,"is_pvip":false,"replies":[{"id":"43995","content":"由于我们这里考虑到灵活的组合模式，所以需要调用父类的countPayMoney()方法。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564712797,"ip_address":"","comment_id":119495,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10154554180","product_id":100028001,"comment_content":"public BigDecimal countPayMoney(OrderDetail orderDetail) {<br>\t\tBigDecimal payTotalMoney = new BigDecimal(0);<br>\t\tpayTotalMoney = super.countPayMoney(orderDetail);<br>\t\tpayTotalMoney = countCouponPayMoney(orderDetail);<br>\t\treturn payTotalMoney;<br>\t}<br>老师好!这里为啥要调用父类的countPayMoney()方法啊?<br>责任链模式:感觉责任连模式比较固定不怎么会变一层往一层调用，解耦，某一层变了不影响别的层。<br>策略模式:策略模式，虽然也是封装了很多不同的策略，但是使用时一般一次只选一个实现类使用，不会有嵌套。<br>装饰者模式:责任链有的优点他都有，装饰者还能动态组合。<br>谢谢老师，希望给出详细答案谢谢","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460930,"discussion_content":"由于我们这里考虑到灵活的组合模式，所以需要调用父类的countPayMoney()方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564712797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190336,"user_name":".","can_delete":false,"product_type":"c1","uid":1083502,"ip_address":"","ucode":"83F583994F4F72","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/6e/3bd860d3.jpg","comment_is_top":false,"comment_ctime":1584630061,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5879597357","product_id":100028001,"comment_content":"装饰模式优化商品价格策略例子举的很实际挺好","like_count":1},{"had_liked":false,"id":158721,"user_name":"奋斗的小白鼠","can_delete":false,"product_type":"c1","uid":1743483,"ip_address":"","ucode":"752BB901FFB7CE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/icHicAP9M4M4DIjAvlj5FDdFxIeA0pR3J15QdvVjXQXbznwunDN8OvrYqnsFchtBTNrZCCfGTE2RpPzIxjkvFAKg/132","comment_is_top":false,"comment_ctime":1575440364,"is_pvip":false,"replies":[{"id":"60853","content":"简单的将SupportPromotions促销类型存储起来就好了","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1575537941,"ip_address":"","comment_id":158721,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5870407660","product_id":100028001,"comment_content":"老师，问一个小白问题，产品Map&lt;PromotionType, SupportPromotions&gt; supportPromotions; &#47;&#47;支持促销类型  怎么存入数据库了？","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476827,"discussion_content":"简单的将SupportPromotions促销类型存储起来就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575537941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154920,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1574596442,"is_pvip":true,"replies":[{"id":"59461","content":"也可以基于该模式实现，我们只需要将叠加逻辑改成选择最优逻辑即可。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1574597346,"ip_address":"","comment_id":154920,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869563738","product_id":100028001,"comment_content":"老师您好，想请教一下，在实际做优惠活动时，很多活动策略之间是相互排斥的，用了优惠1就不能用优惠2，用了优惠2就不能用红包。这种自动选择最优优惠策略，在哪里实现比较合理呢？多谢！","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475613,"discussion_content":"也可以基于该模式实现，我们只需要将叠加逻辑改成选择最优逻辑即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574597346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119798,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1564705010,"is_pvip":true,"replies":[{"id":"43992","content":"对的，主要用来优化业务的复杂度。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1564711473,"ip_address":"","comment_id":119798,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5859672306","product_id":100028001,"comment_content":"感觉老师在红包这个例子里面，其实最重要的解耦是装饰器实现的各种基本的优惠打折手段与工厂的各种优惠规则比如红包抵用券可叠加等等。<br>","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461077,"discussion_content":"对的，主要用来优化业务的复杂度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564711473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294069,"user_name":"知易","can_delete":false,"product_type":"c1","uid":1246882,"ip_address":"","ucode":"BD3E3F0F0A40EF","user_header":"https://static001.geekbang.org/account/avatar/00/13/06/a2/350c4af0.jpg","comment_is_top":false,"comment_ctime":1621744610,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621744610","product_id":100028001,"comment_content":"for(PromotionType promotionType: supportPromotionslist.keySet()) {&#47;&#47;遍历设置的促销类型，通过装饰器组合促销类型<br>\t\t\t\tbaseCount = protmotion(supportPromotionslist.get(promotionType), baseCount);<br>\t\t\t}<br>循环这里，后面的baseCount不是覆盖了前面的baseCount么，，这里咋运作的没搞懂呢","like_count":0},{"had_liked":false,"id":246747,"user_name":"Java垒墙工程师","can_delete":false,"product_type":"c1","uid":1937062,"ip_address":"","ucode":"E76AE44A9C76AE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","comment_is_top":false,"comment_ctime":1599469582,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599469582","product_id":100028001,"comment_content":"CouponDecorator 和RedPacketDecorator一模一样的逻辑代码重复","like_count":0},{"had_liked":false,"id":246746,"user_name":"Java垒墙工程师","can_delete":false,"product_type":"c1","uid":1937062,"ip_address":"","ucode":"E76AE44A9C76AE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","comment_is_top":false,"comment_ctime":1599469441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599469441","product_id":100028001,"comment_content":"这个是个杂糅模式，贴合实际，不是标准的装饰器","like_count":0},{"had_liked":false,"id":231725,"user_name":"wisboy","can_delete":false,"product_type":"c1","uid":1031331,"ip_address":"","ucode":"CEAB14935EED7F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/a3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1593759746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593759746","product_id":100028001,"comment_content":"BigDecimal payTotalMoney = new BigDecimal(0);<br>\t\tpayTotalMoney = super.countPayMoney(orderDetail);<br>\t\tpayTotalMoney = countCouponPayMoney(orderDetail);<br>\t\treturn payTotalMoney;<br>挺困惑的，可读性，也不太好，有没有更好的实现方式。","like_count":0},{"had_liked":false,"id":213974,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1242455,"ip_address":"","ucode":"0CCCA6F4DCC480","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","comment_is_top":false,"comment_ctime":1588604299,"is_pvip":false,"replies":[{"id":"80539","content":"简单的增删改查不用设计模式","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1589618375,"ip_address":"","comment_id":213974,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588604299","product_id":100028001,"comment_content":"有个问题，对于业务系统，都是对数据库的增删改查，这种的，很难用到设计模式吧。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493918,"discussion_content":"简单的增删改查不用设计模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589618375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199379,"user_name":"10年以后","can_delete":false,"product_type":"c1","uid":1297421,"ip_address":"","ucode":"FE58CA7E5C2AF9","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/0d/89435926.jpg","comment_is_top":false,"comment_ctime":1585488034,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585488034","product_id":100028001,"comment_content":"设计模式","like_count":0},{"had_liked":false,"id":158170,"user_name":"wuyin","can_delete":false,"product_type":"c1","uid":1115707,"ip_address":"","ucode":"6D25A939B05952","user_header":"https://static001.geekbang.org/account/avatar/00/11/06/3b/456d0a2a.jpg","comment_is_top":false,"comment_ctime":1575341616,"is_pvip":false,"replies":[{"id":"60855","content":"这里的场景是多个叠加优惠","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1575538263,"ip_address":"","comment_id":158170,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1575341616","product_id":100028001,"comment_content":"public static BigDecimal getPayMoney(OrderDetail orderDetail) { &#47;&#47;获取给商品设定的促销类型 Map supportPromotionslist = orderDetail.getMerchandise().getSupportPromotions(); &#47;&#47;初始化计算类 IBaseCount baseCount = new BaseCount(); if(supportPromotionslist!=null &amp;&amp; supportPromotionslist.size()&gt;0) { for(PromotionType promotionType: supportPromotionslist.keySet()) {&#47;&#47;遍历设置的促销类型，通过装饰器组合促销类型 baseCount = protmotion(supportPromotionslist.get(promotionType), baseCount); } } return baseCount.countPayMoney(orderDetail); } <br>baseCount只会有一种优惠类型吧，怎么进行组合计算呢","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476650,"discussion_content":"这里的场景是多个叠加优惠","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575538263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246882,"avatar":"https://static001.geekbang.org/account/avatar/00/13/06/a2/350c4af0.jpg","nickname":"知易","note":"","ucode":"BD3E3F0F0A40EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375568,"discussion_content":"而且这种装配方式，，可以一致扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621746930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246882,"avatar":"https://static001.geekbang.org/account/avatar/00/13/06/a2/350c4af0.jpg","nickname":"知易","note":"","ucode":"BD3E3F0F0A40EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375567,"discussion_content":"来回看了几次，看明白了，核心点在proymotion方法上。\n第一次循环，protmotion(coupon类型，new BaseCount())。protmotion方法返回couponDecorator对象，其属性count=new BaseCount().\n第二次循环，protmotion(redPacked类型，第一次返回的couponDecorator对象)。protmotion方法返回redPackedDecorator对象，其属性count=第一次返回的couponDecorator对象。\n\n得到装配好的baseCount=redPackedDecorator对象后，调用baseCount.countPayMoney(orderDetail)。。\n此时，先进入RedPacketDecorator类的countPayMoney方法，里面调用super.countPayMoney到BaseCountDecorator的countPayMoney方法内。其中调用count.countPayMoney方法。这里就用到了，刚说的redPackedDecorator中的count属性，其实就是循环体第一次返回的couponDecorator对象，，，，后面的调用过程就很清晰了。。\n以上为个人见解，如有不对的地方，还请指正和补充，感谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621746203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1031331,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/bc/a3/abb7bfe3.jpg","nickname":"wisboy","note":"","ucode":"CEAB14935EED7F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288490,"discussion_content":"能解答的在清楚点嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593759992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135216,"user_name":"依然亦晨","can_delete":false,"product_type":"c1","uid":1244726,"ip_address":"","ucode":"41F288A69AA4B6","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/36/df26de4a.jpg","comment_is_top":false,"comment_ctime":1569065773,"is_pvip":false,"replies":[{"id":"53073","content":"对的，没有使用，可以忽略","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1569981531,"ip_address":"","comment_id":135216,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1569065773","product_id":100028001,"comment_content":"老师，有个疑问，促销类型类里看到用了clone方法，原型模式，为什么后边都没用调用clone方法的地方呢？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468099,"discussion_content":"对的，没有使用，可以忽略","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569981531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134093,"user_name":"行则将至","can_delete":false,"product_type":"c1","uid":1542987,"ip_address":"","ucode":"DB972F2DF059C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","comment_is_top":false,"comment_ctime":1568738272,"is_pvip":false,"replies":[{"id":"51444","content":"super.countPayMoney(orderDetail)主要是计算了orderDetail中的paymoney，这里写的可读性不是很好，可以这样理解：<br><br>BigDecimal payTotalMoney = new BigDecimal(0);<br>super.countPayMoney(orderDetail);&#47;&#47;计算paymoney；<br>payTotalMoney = countCouponPayMoney(orderDetail);&#47;&#47;计算优惠后的价格；","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568772707,"ip_address":"","comment_id":134093,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1568738272","product_id":100028001,"comment_content":"老师，知行合一同学提的问题。<br>BigDecimal payTotalMoney = new BigDecimal(0);<br>payTotalMoney = super.countPayMoney(orderDetail);<br>payTotalMoney = countCouponPayMoney(orderDetail);<br>payTotalMoney不就被覆盖了吗？<br>这里的super.countPayMoney()是不能去掉的。去掉就报空指针<br>RedPacketDecorator中的super代表的是BaseCount，super.countPayMoney()承担着计算总额的任务。<br>CouponDecorator中的super代表的是RedPacketDecorator，这里的super.countPayMoney()承担着计算计算红包优惠额的任务。<br>两个super.countPayMoney都不可以省略的。<br>望老师明示","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467614,"discussion_content":"super.countPayMoney(orderDetail)主要是计算了orderDetail中的paymoney，这里写的可读性不是很好，可以这样理解：\n\nBigDecimal payTotalMoney = new BigDecimal(0);\nsuper.countPayMoney(orderDetail);//计算paymoney；\npayTotalMoney = countCouponPayMoney(orderDetail);//计算优惠后的价格；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568772707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133759,"user_name":"行则将至","can_delete":false,"product_type":"c1","uid":1542987,"ip_address":"","ucode":"DB972F2DF059C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","comment_is_top":false,"comment_ctime":1568647182,"is_pvip":false,"replies":[{"id":"51391","content":"这是一个抽象基类，没有特别的，方便后面扩展","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568720951,"ip_address":"","comment_id":133759,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1568647182","product_id":100028001,"comment_content":"老师，装修功能里面的BaseDecorator为什么要用abstract修饰呢？也没有抽象方法呢","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467497,"discussion_content":"这是一个抽象基类，没有特别的，方便后面扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568720951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133042,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1568334458,"is_pvip":false,"replies":[{"id":"50983","content":"代码易扩展，逻辑清晰","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568422972,"ip_address":"","comment_id":133042,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568334458","product_id":100028001,"comment_content":"😀老师，装饰器模式的性能优化点在哪里？是不是加速了研发调整代码扩展代码的速度!","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467235,"discussion_content":"代码易扩展，逻辑清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568422972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129985,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1567347478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567347478","product_id":100028001,"comment_content":"老师你讲的太好了，要加餐加餐","like_count":0},{"had_liked":false,"id":123610,"user_name":"Gred","can_delete":false,"product_type":"c1","uid":1442929,"ip_address":"","ucode":"F68068880E348B","user_header":"https://static001.geekbang.org/account/avatar/00/16/04/71/853b2292.jpg","comment_is_top":false,"comment_ctime":1565712246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565712246","product_id":100028001,"comment_content":"老师您这段优化的装饰器模式代码里面，就用到装饰器、责任链以及工厂模式。不愧是老师，厉害厉害。","like_count":0},{"had_liked":false,"id":123606,"user_name":"Gred","can_delete":false,"product_type":"c1","uid":1442929,"ip_address":"","ucode":"F68068880E348B","user_header":"https://static001.geekbang.org/account/avatar/00/16/04/71/853b2292.jpg","comment_is_top":false,"comment_ctime":1565711761,"is_pvip":false,"replies":[{"id":"71194","content":"是的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1583159599,"ip_address":"","comment_id":123606,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565711761","product_id":100028001,"comment_content":"老师，您在SupportPromotions重写 clone 方法，只对类进行拷贝，但是成员变量只是浅拷贝，如果要实际应用业务场景，是不是应该改用深拷贝，避免其他订单的优化券等信息影响到了。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462743,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583159599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121979,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1090784,"ip_address":"","ucode":"563C4A71D80DA1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJwQvLGE4dMsF4JU0svW3DtGbodpjskbY65FdwF13JdtBYZfgL2IXHlHrdejWzHdjT0RibEIfib4QYA/132","comment_is_top":false,"comment_ctime":1565261755,"is_pvip":false,"replies":[{"id":"44860","content":"第一个是计算原价，第二个是计算使用优惠券后的价格，我们可以将第一个去掉，这里只是冗余了一个payTotalMoney。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1565313311,"ip_address":"","comment_id":121979,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565261755","product_id":100028001,"comment_content":"BigDecimal payTotalMoney = new BigDecimal(0);<br>payTotalMoney = super.countPayMoney(orderDetail);<br>payTotalMoney = countCouponPayMoney(orderDetail);<br>payTotalMoney不就被覆盖了吗？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462039,"discussion_content":"第一个是计算原价，第二个是计算使用优惠券后的价格，我们可以将第一个去掉，这里只是冗余了一个payTotalMoney。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565313311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}