{"id":3926,"title":"43 | 弹力设计篇之“异步通讯设计”","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>前面所说的隔离设计通常都需要对系统做解耦设计，而把一个单体系统解耦，不单单是把业务功能拆分出来，正如前面所说，拆分完后还会面对很多的问题。其中一个重要的问题就是这些系统间的通讯。</p><p>通讯一般来说分同步和异步两种。同步通讯就像打电话，需要实时响应，而异步通讯就像发邮件，不需要马上回复。各有千秋，我们很难说谁比谁好。但是在面对超高吞吐量的场景下，异步处理就比同步处理有比较大的优势了，这就好像一个人不可能同时接打很多电话，但是他可以同时接收很多的电子邮件一样。</p><p>同步调用虽然让系统间只耦合于接口，而且实时性也会比异步调用要高，但是我们也需要知道同步调用会带来如下几个问题。</p><ul>\n<li>\n<p>同步调用需要被调用方的吞吐不低于调用方的吞吐。否则会导致被调用方因为性能不足而拖死调用方。换句话说，整个同步调用链的性能会由最慢的那个服务所决定。</p>\n</li>\n<li>\n<p>同步调用会导致调用方一直在等待被调用方完成，如果一层接一层地同步调用下去，所有的参与方会有相同的等待时间。这会非常消耗调用方的资源。因为调用方需要保存现场（Context）等待远端返回，所以对于并发比较高的场景来说，这样的等待可能会极度消耗资源。</p>\n</li>\n<li>\n<p>同步调用只能是一对一的，很难做到一对多。</p>\n</li>\n<li>\n<p>同步调用最不好的是，如果被调用方有问题，那么其调用方就会跟着出问题，于是会出现多米诺骨牌效应，故障一下就蔓延开来。</p>\n</li>\n</ul><!-- [[[read_end]]] --><p>所以，异步通讯相对于同步通讯来说，除了可以增加系统的吞吐量之外，最大的一个好处是其可以让服务间的解耦更为彻底，系统的调用方和被调用方可以按照自己的速率而不是步调一致，从而可以更好地保护系统，让系统更有弹力。</p><p>异步通讯通常来说有三种方式。</p><h1>异步通讯的三种方式</h1><h2>请求响应式</h2><p>在这种情况下，发送方（sender）会直接请求接收方（receiver），被请求方接收到请求后，直接返回——收到请求，正在处理。</p><p>对于返回结果，有两种方法，一种是发送方时不时地去轮询一下，问一下干没干完。另一种方式是发送方注册一个回调方法，也就是接收方处理完后回调请求方。这种架构模型在以前的网上支付中比较常见，页面先从商家跳转到支付宝或银行，商家会把回调的URL传给支付页面，支付完后，再跳转回商家的URL。</p><p>很明显，这种情况下还是有一定耦合的。是发送方依赖于接收方，并且要把自己的回调发送给接收方，处理完后回调。</p><h2>通过订阅的方式</h2><p>这种情况下，接收方（receiver）会来订阅发送方（sender）的消息，发送方会把相关的消息或数据放到接收方所订阅的队列中，而接收方会从队列中获取数据。</p><p>这种方式下，发送方并不关心订阅方的处理结果，它只是告诉订阅方有事要干，收完消息后给个ACK就好了，你干成啥样我不关心。这个方式常用于像MVC（Model-View-Control）这样的设计模式下，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/d8/37/d8d96ed4e4616626b9e079dc13637937.png?wh=865*751\" alt=\"\"></p><p>这就好像下订单的时候，一旦用户支付完成了，就需要把这个事件通知给订单处理以及物流，订单处理变更状态，物流服务需要从仓库服务分配相应的库存并准备配送，后续这些处理的结果无需告诉支付服务。</p><p>为什么要做成这样？好了，重点来了！前面那种请求响应的方式就像函数调用一样，这种方式有数据有状态的往来（也就是说需要有请求数据、返回数据，服务里面还可能需要保存调用的状态），所以服务是有状态的。如果我们把服务的状态给去掉（通过第三方的状态服务来保证），那么服务间的依赖就只有事件了。</p><p>你知道，分布式系统的服务设计是需要向无状态服务（Stateless）努力的，这其中有太多的好处，无状态意味着你可以非常方便地运维。所以，事件通讯成为了异步通讯中最重要的一个设计模式。</p><p>就上面支付的那个例子，商家这边只需要订阅一个支付完成的事件，这个事件带一个订单号，而不需要让支付方知道自己的回调URL，这样的异步是不是更干净一些？</p><p>但是，在这种方式下，接收方需要向发送方订阅事件，所以是接收方依赖于发送方。这种方式还是有一定的耦合。</p><h2>通过Broker的方式</h2><p>所谓Broker，就是一个中间人，发送方（sender）和接收方（receiver）都互相看不到对方，它们看得到的是一个Broker，发送方向Broker发送消息，接收方向Broker订阅消息。如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/82/23/82ddd9f2015527b9754e77f332790323.jpg?wh=2052x660\" alt=\"\"><br>\n这是完全的解耦。所有的服务都不需要相互依赖，而是依赖于一个中间件Broker。这个Broker是一个像数据总线一样的东西，所有的服务要接收数据和发送数据都发到这个总线上，这个总线就像协议一样，让服务间的通讯变得标准和可控。</p><p>在Broker这种模式下，发送方的服务和接收方的服务最大程度地解耦。但是所有人都依赖于一个总线，所以这个总线就需要有如下的特性：</p><ul>\n<li>必须是高可用的，因为它成了整个系统的关键；</li>\n<li>必须是高性能而且是可以水平扩展的；</li>\n<li>必须是可以持久化不丢数据的。</li>\n</ul><p>要做到这三条还是比较难的。当然，好在现在开源软件或云平台上Broker的软件是非常成熟的，所以节省了我们很多的精力。</p><h1>事件驱动设计</h1><p>上述的第二种和第三种方式就是比较著名的事件驱动架构（EDA – Event Driven Architecture）。正如前面所说，事件驱动最好是使用Broker方式，服务间通过交换消息来完成交流和整个流程的驱动。</p><p>如下图所示，这是一个订单处理流程。下单服务通知订单服务有订单要处理，而订单服务生成订单后发出通知，库存服务和支付服务得到通知后，一边是占住库存，另一边是让用户支付，等待用户支付完成后通知配送服务进行商品配送。</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/0b/b7d1f3c287de6ef999d1b719ea974c0b.jpg?wh=3522x690\" alt=\"\"><br>\n每个服务都是“自包含”的。所谓“自包含”也就是没有和别人产生依赖。而要把整个流程给串联起来，我们需要一系列的“消息通道（Channel）”。各个服务做完自己的事后，发出相应的事件，而又有一些服务在订阅着某些事件来联动。</p><p>事件驱动方式的好处至少有五个。</p><ul>\n<li>\n<p>服务间的依赖没有了，服务间是平等的，每个服务都是高度可重用并可被替换的。</p>\n</li>\n<li>\n<p>服务的开发、测试、运维，以及故障处理都是高度隔离的。</p>\n</li>\n<li>\n<p>服务间通过事件关联，所以服务间是不会相互block的。</p>\n</li>\n<li>\n<p>在服务间增加一些Adapter（如日志、认证、版本、限流、降级、熔断等）相当容易。</p>\n</li>\n<li>\n<p>服务间的吞吐也被解开了，各个服务可以按照自己的处理速度处理。</p>\n</li>\n</ul><p>我们知道任何设计都有好有不好的方式。事件驱动的架构也会有一些不好的地方。</p><ul>\n<li>\n<p>业务流程不再那么明显和好管理。整个架构变得比较复杂。解决这个问题需要有一些可视化的工具来呈现整体业务流程。</p>\n</li>\n<li>\n<p>事件可能会乱序。这会带来非常Bug的事。解决这个问题需要很好地管理一个状态机的控制。</p>\n</li>\n<li>\n<p>事务处理变得复杂。需要使用两阶段提交来做强一致性，或是退缩到最终一致性。</p>\n</li>\n</ul><h1>异步通讯的设计重点</h1><p>首先，我们需要知道，为什么要异步通讯。</p><ul>\n<li>\n<p>异步通讯最重要的是解耦服务间的依赖。最佳解耦的方式是通过Broker的机制。</p>\n</li>\n<li>\n<p>解耦的目的是让各个服务的隔离性更好，这样不会出现“一倒倒一片”的故障。</p>\n</li>\n<li>\n<p>异步通讯的架构可以获得更大的吞吐量，而且各个服务间的性能不受干扰相对独立。</p>\n</li>\n<li>\n<p>利用Broker或队列的方式还可以达到把抖动的吞吐量变成均匀的吞吐量，这就是所谓的“削峰”，这对后端系统是个不错的保护。</p>\n</li>\n<li>\n<p>服务相对独立，在部署、扩容和运维上都可以做到独立不受其他服务的干扰。</p>\n</li>\n</ul><p>但我们需要知道这样的方式带来的问题，所以在设计成异步通信的时候需要注意如下事宜。</p><ul>\n<li>\n<p>用于异步通讯的中间件Broker成为了关键，需要设计成高可用不丢消息的。另外，因为是分布式的，所以可能很难保证消息的顺序，因此你的设计最好不依赖于消息的顺序。</p>\n</li>\n<li>\n<p>异步通讯会导致业务处理流程不那么直观，因为像接力一样，所以在Broker上需要有相关的服务消息跟踪机制，否则出现问题后不容易调试。</p>\n</li>\n<li>\n<p>因为服务间只通过消息交互，所以业务状态最好由一个总控方来管理，这个总控方维护一个业务流程的状态变迁逻辑，以便系统发生故障后知道业务处理到了哪一步，从而可以在故障清除后继续处理。</p>\n</li>\n</ul><p>这样的设计常见于银行的对账程序，银行系统会有大量的外部系统通讯，比如跨行的交易、跨企业的交易，等等。所以，为了保证整体数据的一致性，或是避免漏处理及处理错的交易，需要有对账系统，这其实就是那个总控，这也是为什么银行有的交易是T+1（隔天结算），就是因为要对个账，确保数据是对的。</p><ul>\n<li>消息传递中，可能有的业务逻辑会有像TCP协议那样的send和ACK机制。比如：A服务发出一个消息之后，开始等待处理方的ACK，如果等不到的话，就需要做重传。此时，需要处理方有幂等的处理，即同一条消息无论收到多少次都只处理一次。</li>\n</ul><h1>小结</h1><p>好了，我们来总结一下今天分享的主要内容。首先，同步调用有四个问题：影响吞吐量、消耗系统资源、只能一对一，以及有多米诺骨牌效应。于是，我们想用异步调用来避免该问题。</p><p>异步调用有三种方式：请求响应、直接订阅和中间人订阅。最后，我介绍了事件驱动设计的特点和异步通讯设计的重点。下节课，我们讲述幂等性设计。希望对你有帮助。</p><p>也欢迎你分享一下你在分布式服务的设计中，哪些情况下使用异步通讯？是怎样设计的？又有哪些情况使用同步通讯？</p><p>文末给出了《分布式系统设计模式》系列文章的目录，希望你能在这个列表里找到自己感兴趣的内容。</p><ul>\n<li>弹力设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/3912\">认识故障和弹力设计</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3917\">隔离设计Bulkheads</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/3926\">异步通讯设计Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4050\">幂等性设计Idempotency</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4086\">服务的状态State</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4087\">补偿事务Compensating Transaction</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4121\">重试设计Retry</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4241\">熔断设计Circuit Breaker</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4245\">限流设计Throttle</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4252\">降级设计degradation</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/4253\">弹力设计总结</a></li>\n</ul>\n</li>\n<li>管理设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/5175\">分布式锁Distributed Lock</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5819\">配置中心Configuration Management</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5909\">边车模式Sidecar</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/5920\">服务网格Service Mesh</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6086\">网关模式Gateway</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/6283\">部署升级策略</a></li>\n</ul>\n</li>\n<li>性能设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/6282\">缓存Cache</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7036\">异步处理Asynchronous</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7045\">数据库扩展</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7047\">秒杀Flash Sales</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/7086\">边缘计算Edge Computing</a></li>\n</ul>\n</li>\n</ul>","comments":[{"had_liked":false,"id":3501,"user_name":"wgy","can_delete":false,"product_type":"c1","uid":1002080,"ip_address":"","ucode":"E90A771B9C774D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/60/e0b4c284.jpg","comment_is_top":false,"comment_ctime":1519778460,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"83124157084","product_id":100002201,"comment_content":"陈老师能不能推荐几个开源的Broker软件？","like_count":20,"discussions":[{"author":{"id":1701266,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f5/92/21cd6c36.jpg","nickname":"diwayou","note":"","ucode":"DADFA13C84FB11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340572,"discussion_content":"Kafka,rabbitmq ,rocketmq","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610065914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1283900,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/wIE1emxIeOrEz8oBKzOja0FOst0lNO0VowX5v0EgNgmiaeUy06noFib9ZU1nafq8VzbxSRAp9HJ3NhiadgzdFMhlg/132","nickname":"JIY","note":"","ucode":"05098DC96AECD4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":28279,"discussion_content":"所有得MQ都可以","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1570689237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33440,"discussion_content":" kafka","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571124406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":107,"discussion_content":"可以了解下 kafka","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561108433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":3473,"user_name":"Sam_Deep_Thinking","can_delete":false,"product_type":"c1","uid":1001152,"ip_address":"","ucode":"8E4EF6F24B821B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/c0/bf880bda.jpg","comment_is_top":false,"comment_ctime":1519704552,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"65944213992","product_id":100002201,"comment_content":"见过的，写异步最好的文章了。总结的太好了。不过有些业务呢，像下完订单并支付后，用消息通知的方式，立刻流单也不是很好。一方面可能要等到某个时机才流单，尤其是大促时，用户取消订单的很多。另外，也想在高峰期优先全部资源搞下单和支付处理，不搞其他，等高峰小一些的时候，才处理售后的一些业务。","like_count":16},{"had_liked":false,"id":8224,"user_name":"Bing","can_delete":false,"product_type":"c1","uid":1105913,"ip_address":"","ucode":"4AB1083903D6A0","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/f9/e41b0289.jpg","comment_is_top":false,"comment_ctime":1525994475,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"57360569323","product_id":100002201,"comment_content":"进程内，使用EventBus，进程外使用MQ。现在业务难点就是在消息的顺序性上😔","like_count":14,"discussions":[{"author":{"id":1268264,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","nickname":"GEEKBANG_6638780","note":"","ucode":"952194E56FD8C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4235,"discussion_content":"RocketMQ支持顺序消息","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565245124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1690242,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","nickname":"番茄炒西红柿","note":"","ucode":"13F47BABAB2110","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":108049,"discussion_content":"要求消息顺序的最好用kafka","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577622586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109,"discussion_content":"EventBus 是 Android优化的发布/订阅事件总线 java有没有开源的jvm进程内处理方案？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561108715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1627513,"avatar":"http://thirdwx.qlogo.cn/mmopen/vngWGjhPQibBXUbHBZ00MHDddJvanjGJDvMy7RjnuPSYNOkXbujmYicz7FPKN9KBqbASh7Tx6Px2aNBGeJN7FyBHwgI4KxNwbu/132","nickname":"InfoQ_6fb64a94dbb7","note":"","ucode":"C217E7F25E396E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371662,"discussion_content":"VertX有eventBus","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619885612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":109,"ip_address":""},"score":371662,"extra":""}]}]},{"had_liked":false,"id":3872,"user_name":"小沫","can_delete":false,"product_type":"c1","uid":1000977,"ip_address":"","ucode":"52341656210E0D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/46/11/1cf8c174.jpg","comment_is_top":false,"comment_ctime":1520901026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27290704802","product_id":100002201,"comment_content":"broker方式 是否可以理解成 消息中间件方式<br>发送方为 消息生产者 将消息发送到 Q 中<br>接收方为 消息消费者 将消息从Q中取出<br><br>","like_count":6},{"had_liked":false,"id":223001,"user_name":"几度嘟嘟","can_delete":false,"product_type":"c1","uid":1524256,"ip_address":"","ucode":"54DEE1C7252D09","user_header":"https://static001.geekbang.org/account/avatar/00/17/42/20/d195a6db.jpg","comment_is_top":false,"comment_ctime":1590979069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23065815549","product_id":100002201,"comment_content":"读陈皓老师文章令我感觉最棒的是知识由浅极深层层灌入的感觉。虽然文章篇幅不长，但是从文章的一开始便破题“为什么分布式架构中要使用异步通讯”，然后介绍了异步通讯的三种方式，这三种方式的介绍过程也是以一种不断补充方式，得出“异步通讯的最佳方式是Broker机制”，而后究其本质引出“事件驱动架构”，言尽于此但远不止于此。最后，结合自身丰富的工作经验，循循善诱的告诉读者，Broker方式虽好但是仍有许多需要注意的地方。<br>（评论虽略显油腻，但是也是出自真心觉得陈皓老师写得好~）","like_count":6},{"had_liked":false,"id":86354,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1555372948,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23030209428","product_id":100002201,"comment_content":"broker可以理解成消息队列吧，用的比较多的是kafka，个人觉得需要注意在消费消息的时候业务失败了要做好相应的处理，要不然会出现数据不一致。","like_count":5},{"had_liked":false,"id":3540,"user_name":"名贤集","can_delete":false,"product_type":"c1","uid":1033131,"ip_address":"","ucode":"220A754095BECE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/ab/c2ca35e6.jpg","comment_is_top":false,"comment_ctime":1519864545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"22994701025","product_id":100002201,"comment_content":"是否能推荐个靠谱的事件框架","like_count":5},{"had_liked":false,"id":3543,"user_name":"Freezer","can_delete":false,"product_type":"c1","uid":1013840,"ip_address":"","ucode":"5592D85A343C3C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/50/1c9a95f8.jpg","comment_is_top":false,"comment_ctime":1519866523,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18699735707","product_id":100002201,"comment_content":"干货","like_count":4},{"had_liked":false,"id":165538,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1577255939,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"14462157827","product_id":100002201,"comment_content":"为什么我不太理解订阅机制和Broker机制，我怎么觉得是一样的？目前主流的发布订阅机制就是MQ，而Broker也是MQ呀？哪位大神能解释下","like_count":3,"discussions":[{"author":{"id":1130590,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","nickname":"Ryoma","note":"","ucode":"7F692369239692","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":101972,"discussion_content":"订阅方式：发布者知道自己要发送消息至哪几个队列，比如上文耗子叔给的案例，支付完成后需要通知给订单和物流；\n而 Broker 方式解耦得更彻底一点，发布者只往一个 MQ 中发，关注我发的消息的自己去订阅 MQ，比如此时有个活动推荐服务也注册这个 MQ，方面后续的推荐","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1577320629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1130590,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","nickname":"Ryoma","note":"","ucode":"7F692369239692","race_medal":2,"user_type":1,"is_pvip":true},"discussion":{"id":102592,"discussion_content":"谢谢回答，大概理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577356057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":101972,"ip_address":""},"score":102592,"extra":""},{"author":{"id":2446418,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zdK3dSkFwicZHtx5CLAKFJRORRibq2YqvHOP0tySLxVx0X1oD9AJanan2wia2hHaswgxdrCzEEGyVgFTVZ8sElTzQ/132","nickname":"Geek_fbfc4f","note":"","ucode":"7010B242A3F474","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1130590,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","nickname":"Ryoma","note":"","ucode":"7F692369239692","race_medal":2,"user_type":1,"is_pvip":true},"discussion":{"id":371624,"discussion_content":"还是觉得一样的。第三种也要发到对应主题中呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619877284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":101972,"ip_address":""},"score":371624,"extra":""}]}]},{"had_liked":false,"id":17599,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1532769136,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14417671024","product_id":100002201,"comment_content":"事件可能会乱序请问这个如何保证需要有序处理业务的场景，状态机主要做什么？","like_count":3,"discussions":[{"author":{"id":1128579,"avatar":"https://static001.geekbang.org/account/avatar/00/11/38/83/cf789e0e.jpg","nickname":"慕华","note":"","ucode":"3026277274798B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276131,"discussion_content":"我觉得加一个时间戳可以解决（学生观点）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590824418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":4115,"user_name":"朱海峰","can_delete":false,"product_type":"c1","uid":1021494,"ip_address":"","ucode":"D96D2CA8975DBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/36/0025b51d.jpg","comment_is_top":false,"comment_ctime":1521591294,"is_pvip":false,"replies":[{"id":"942","content":"是有意的，嘿嘿","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1521702722,"ip_address":"","comment_id":4115,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14406493182","product_id":100002201,"comment_content":"这篇无意中讲了微服务的东西，在go-micro一直猜broker是啥作用","like_count":3,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":416213,"discussion_content":"是有意的，嘿嘿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1521702722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250973,"user_name":"你为啥那么牛","can_delete":false,"product_type":"c1","uid":1503506,"ip_address":"","ucode":"1ABC604A54A8F6","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","comment_is_top":false,"comment_ctime":1601295506,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10191230098","product_id":100002201,"comment_content":"我在想第三方商家调用支付接口，用的是第一种请求响应方式。在支付宝&#47;微信内部的流程内，应该是用的broker机制，在第三方接入的环节，是无法直接参与EDA流程的。","like_count":2},{"had_liked":false,"id":3468,"user_name":"华烬","can_delete":false,"product_type":"c1","uid":1008444,"ip_address":"","ucode":"D36AE0FBEF665A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/3c/b4cfbce9.jpg","comment_is_top":false,"comment_ctime":1519694782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10109629374","product_id":100002201,"comment_content":"我们现在大部的异步都是通过请求响应的方式完成的，在http的接口下感觉耦合还不明显，现在工公司推了rpc，在rpc接口下，耦合很明显的，感觉可能用订阅的方式比较好，但这请求响应的方式应该可靠性更好一些，而且设计简单一些，不涉及到丢消息（中间件自身问题或网络原因等等），因为每一次丢消息都可能带来比较高的运维成本，耗子叔怎么看，至于无状态，在这个场景下的坑能简单说下么，没经历过。所以感觉不到重要性。","like_count":2},{"had_liked":false,"id":223637,"user_name":"秋天","can_delete":false,"product_type":"c1","uid":1057056,"ip_address":"","ucode":"A7E1D953EF7E17","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/20/1299e137.jpg","comment_is_top":false,"comment_ctime":1591146941,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5886114237","product_id":100002201,"comment_content":"统计一批任务下得一批机器得监控指标时，使用了异步调用 具体到本人使用得语言java 使用了java.util.concurrent包下得CompletableFuture","like_count":1},{"had_liked":false,"id":208326,"user_name":"闫冬","can_delete":false,"product_type":"c1","uid":1109691,"ip_address":"","ucode":"1725E869D5A3D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/bb/7afd6824.jpg","comment_is_top":false,"comment_ctime":1587340479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882307775","product_id":100002201,"comment_content":"异步通讯的三种方式<br>回调式响应 通过回调地址解决<br>订阅者与发布者 通过消息推送实现<br>通过中间broker来解藕","like_count":1},{"had_liked":false,"id":117781,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1564129786,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5859097082","product_id":100002201,"comment_content":"才疏学浅，现在用的是MQ的方式，在看今天的课程之前，我都不知道Broker的方式，涨知识了。","like_count":1,"discussions":[{"author":{"id":1016232,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/81/a8/559afe8b.jpg","nickname":"Sruby","note":"","ucode":"A7D1B93F41DA0F","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66519,"discussion_content":"broker的实现不就是mq消息中间件吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575080987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":38067,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1541916226,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5836883522","product_id":100002201,"comment_content":"下单成功，支付成功，库存失败需要回退用户钱<br>这个场景流程扣库存和支付是一个串行流程","like_count":1},{"had_liked":false,"id":9333,"user_name":"来","can_delete":false,"product_type":"c1","uid":1048433,"ip_address":"","ucode":"2612C1D888ED03","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ff/71/c492b7fa.jpg","comment_is_top":false,"comment_ctime":1526793696,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"5821760992","product_id":100002201,"comment_content":"目前系统中的异步通信主要是采用消息中间件，消息中间件采用的异步方式为broker方式。目前系统中异步通信的使用场景如下：<br>1、削峰上游系统调用的压力，借助mq先将订单接下来，然后根据系统自身的处理能力来处理请求<br>2、当某一动作、事件完成后，将消息广播出去，其它业务系统监听此消息，然后做响应业务处理<br><br>我对异步的理解是：对一些对实时性要求不高的服务可以异步处理，这样的好处是可以提高系统响应时间，尽早释放资源，从而提高了系统的性能","like_count":1},{"had_liked":false,"id":4667,"user_name":"昵称","can_delete":false,"product_type":"c1","uid":1025680,"ip_address":"","ucode":"FD6A58AB271E5D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/90/5295fce8.jpg","comment_is_top":false,"comment_ctime":1522322745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5817290041","product_id":100002201,"comment_content":"gokit 或go micro 的rpc机制是否适合大文件的流式上传或下载，目前想把手头的服务rpc话，但是涉及到文件的上传或下载不知道怎么处理","like_count":1},{"had_liked":false,"id":318009,"user_name":"方勇(gopher)","can_delete":false,"product_type":"c1","uid":1290625,"ip_address":"","ucode":"D199911C4CFEF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/b1/81/13f23d1e.jpg","comment_is_top":false,"comment_ctime":1635122419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635122419","product_id":100002201,"comment_content":"消息中间件变成了消息总线，也是我们现在的模式，需要99.99%的高可用。","like_count":0},{"had_liked":false,"id":289346,"user_name":"未见","can_delete":false,"product_type":"c1","uid":1939320,"ip_address":"","ucode":"EC8F9B0E5F3D9A","user_header":"https://static001.geekbang.org/account/avatar/00/1d/97/78/9229749e.jpg","comment_is_top":false,"comment_ctime":1618985712,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1618985712","product_id":100002201,"comment_content":"耗子叔 ，要是用kafka当做broken，要保证消息的顺序性，如何能提高他的消费能力（生产者端固定，只修改消费端）。","like_count":0,"discussions":[{"author":{"id":2446418,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/zdK3dSkFwicZHtx5CLAKFJRORRibq2YqvHOP0tySLxVx0X1oD9AJanan2wia2hHaswgxdrCzEEGyVgFTVZ8sElTzQ/132","nickname":"Geek_fbfc4f","note":"","ucode":"7010B242A3F474","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371625,"discussion_content":"有卡夫卡专门的课程。消费端可以多线程。\n顺序的话好像是自己写代码，分发吧。好像是忘记了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619877419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226388,"user_name":"迷途书童","can_delete":false,"product_type":"c1","uid":1090142,"ip_address":"","ucode":"462BE64D3373DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/5e/3871ff79.jpg","comment_is_top":false,"comment_ctime":1592058946,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592058946","product_id":100002201,"comment_content":"异步是系统隔离之后的一个必然性结果","like_count":0},{"had_liked":false,"id":211763,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1588002000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588002000","product_id":100002201,"comment_content":"看来深入学习 MQ 中间件是分布式系统设计的必修课，不过也挺喜欢回调 URL 这种约定式的异步方式，简单直接","like_count":0},{"had_liked":false,"id":211291,"user_name":"顾海","can_delete":false,"product_type":"c1","uid":1103602,"ip_address":"","ucode":"13F4E0A21975CE","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/f2/0601a60e.jpg","comment_is_top":false,"comment_ctime":1587946433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587946433","product_id":100002201,"comment_content":"使用broker的方式，要重点考虑两个问题<br>1.消息重复消费的问题。这需要消息消费方去重或者实现幂等<br>2.消息乱序的影响。处理方式有两个A.可以通过分票实现消息的局部有序B.消费方通过状态机自己处理消息乱序对业务的影响","like_count":0},{"had_liked":false,"id":200047,"user_name":"dondon","can_delete":false,"product_type":"c1","uid":1732521,"ip_address":"","ucode":"8DD96E32BC02BD","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6f/a9/ce325b9f.jpg","comment_is_top":false,"comment_ctime":1585536813,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585536813","product_id":100002201,"comment_content":"高度确实很高，在高抽象和具象的不同层次之间，比较难切换","like_count":0},{"had_liked":false,"id":173499,"user_name":"slark","can_delete":false,"product_type":"c1","uid":1143574,"ip_address":"","ucode":"7E8DE962AA23A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/16/595b0342.jpg","comment_is_top":false,"comment_ctime":1579577713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579577713","product_id":100002201,"comment_content":"同步通信很明显依赖严重，开发简单，容易卡全局<br>异步可以实现一定程度解耦，提升吞吐量。<br>不同实现方式也有不同特性。<br>常见的有请求后轮询或者回调；直接向消息发送者订阅消息；或者通过中间人订阅。<br>中间人订阅解藕最彻底，但也会存在时间事件无序，状态管理困难，问题定位困难等情况。<br>","like_count":1},{"had_liked":false,"id":168183,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1578029184,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578029184","product_id":100002201,"comment_content":"系统服务之间一般都是用间接broker即消息队列的异步方式，直接broker是什么方式呢？异步回调可能和前台页面交互的时候会用到。","like_count":0},{"had_liked":false,"id":165641,"user_name":"Sdylan","can_delete":false,"product_type":"c1","uid":1008503,"ip_address":"","ucode":"4589D0D0FA9275","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/77/423345ab.jpg","comment_is_top":false,"comment_ctime":1577274942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577274942","product_id":100002201,"comment_content":"# 25&#47;12,2019-Wed<br>#001|提升&#47;分布式&#47;关键技术&#47;弹性设计<br>异步通信设计<br>- 为什么要异步通信设计<br>* 同步通信存在如下问题<br>\t* 对于流量大的服务，同步通信依赖被调用方的处理时间，吞吐量不高<br>\t* 涉及多个部门的接口消耗大量的资源<br>\t* 只能一对一<br>\t* 容易引起多米诺骨牌效应，隔离性差<br>- 异步通信方式<br>* 请求响应+轮询方式：发出请求后，轮询响应方的结果<br>* 发布订阅的方式：通过队列来玩，消费方告诉调用方收到消息即可<br>* 消息中间件（Broker）<br>- 异步通讯方式设计要点<br>* Broker的可靠性、堆积能力<br>* 消息消费无序性<br>* 重传消息，幂等消费<br>* 流程状态监控","like_count":0},{"had_liked":false,"id":164730,"user_name":"文刂 氵共 超","can_delete":false,"product_type":"c1","uid":1282813,"ip_address":"","ucode":"C2CE1512D23012","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","comment_is_top":false,"comment_ctime":1577083255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577083255","product_id":100002201,"comment_content":"学习笔记  https:&#47;&#47;mubu.com&#47;colla&#47;6e4EvnRNSYM","like_count":0},{"had_liked":false,"id":109789,"user_name":"edisonhuang","can_delete":false,"product_type":"c1","uid":1530167,"ip_address":"","ucode":"BB2F639A779F96","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/37/bd2de0a4.jpg","comment_is_top":false,"comment_ctime":1562114799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562114799","product_id":100002201,"comment_content":"通讯设计有同步和异步的方式。同步设立会带来由于一个环节的处理慢卡住整个系统的问题。所以分布式系统中为了提高吞吐量通常是异步通讯的方式。<br>异步通讯有请求响应方式，发布订阅模式和broker模式。使用broker模式解除了请求发送方和接收方的耦合，因此可以极大提高系统的处理能力，易扩展运维。但同时要保证broker是高可用，同时也让业务处理本身看起来不如以前直接了。","like_count":0},{"had_liked":false,"id":105973,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1561117488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561117488","product_id":100002201,"comment_content":"服务间只通过消息交互，所以业务状态最好由一个 总控方 来管理，这个 总控方 维护一个业务流程的状态变迁逻辑 -&gt; 请问这个总控方有什么成熟的解决方案？ 有的话大家帮我科普下","like_count":0},{"had_liked":false,"id":105946,"user_name":"又双叒叕是一年啊","can_delete":false,"product_type":"c1","uid":1000015,"ip_address":"","ucode":"E067320E537DEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","comment_is_top":false,"comment_ctime":1561109338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561109338","product_id":100002201,"comment_content":"读这些文章对我编程 架构 认知 是一次质的洗礼点赞了","like_count":0},{"had_liked":false,"id":93639,"user_name":"sprzhing","can_delete":false,"product_type":"c1","uid":1218617,"ip_address":"","ucode":"5C58ADB2A10CF6","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELheoqTu05oOnCW3FdxiaIzYvmMMMNmKXDtwtdvtNdeuj8mgAWB9zibubHcPE5K8KPGX53GzxlibBRNg/132","comment_is_top":false,"comment_ctime":1557542022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557542022","product_id":100002201,"comment_content":"有哪些broker呢？","like_count":0},{"had_liked":false,"id":63449,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1548376623,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1548376623","product_id":100002201,"comment_content":"消息的接受有序性确实不好控制，不过可以通过发送消息的时间戳来感知一下。我们的订单全程跟踪消息的有序性就是这么弄的。","like_count":0,"discussions":[{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110,"discussion_content":"请问下 分布式多节点环境下 怎么保证多个节点中的 订单 全局顺序性处理？ 依赖redis 这种第三方服务 存储订单时间戳? 还是有啥全局的时间控制状态的方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561108892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24969,"user_name":"阿康","can_delete":false,"product_type":"c1","uid":1146671,"ip_address":"","ucode":"C68B5274D956A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/7f/2f/b4a925bd.jpg","comment_is_top":false,"comment_ctime":1537233861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537233861","product_id":100002201,"comment_content":"事件驱动 发布订阅模型只适用于内部系统，对外的服务还是只能用 请求响应式的异步通信方式，这样理解没问题吧？","like_count":0},{"had_liked":false,"id":17806,"user_name":"403","can_delete":false,"product_type":"c1","uid":1001867,"ip_address":"","ucode":"D9360256DFEF5D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/8b/3596a3e2.jpg","comment_is_top":false,"comment_ctime":1532958782,"is_pvip":false,"replies":[{"id":"6310","content":"分布式环境下，非常之难。","user_name":"作者回复","user_name_real":"左耳朵","uid":"1001269","ctime":1533132627,"ip_address":"","comment_id":17806,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1532958782","product_id":100002201,"comment_content":"我也想知道消息的顺序性怎么保证","like_count":0,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421281,"discussion_content":"分布式环境下，非常之难。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533132627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12134,"user_name":"王磊","can_delete":false,"product_type":"c1","uid":1050085,"ip_address":"","ucode":"A4DE9804642A08","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/e5/aa579968.jpg","comment_is_top":false,"comment_ctime":1528610316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1528610316","product_id":100002201,"comment_content":"不太理解为什么说&#39;请求响应式&#39;是有状态的，我理解请求方可以把请求发送给任意的接收方，任意的接收方都可以独立的完成处理，这种情况下可以方便的scale-up接收方的实例个数。还有说这种状态下是有数据，状态传输的，但即使第二种和第三种的消息里也是有数据的。我理解到请求响应式还只能是1对1，而第二种可以1对多，这是我理解到的区别。请解惑。","like_count":0},{"had_liked":false,"id":4666,"user_name":"昵称","can_delete":false,"product_type":"c1","uid":1025680,"ip_address":"","ucode":"FD6A58AB271E5D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/90/5295fce8.jpg","comment_is_top":false,"comment_ctime":1522322744,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1522322744","product_id":100002201,"comment_content":"gokit 或go micro 的rpc机制是否适合大文件的流式上传或下载，目前想把手头的服务rpc话，但是涉及到文件的上传或下载不知道怎么处理","like_count":0,"discussions":[{"author":{"id":1000015,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/4f/ff1ac464.jpg","nickname":"又双叒叕是一年啊","note":"","ucode":"E067320E537DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112,"discussion_content":"dubbo-go 应该可以支持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561109253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}