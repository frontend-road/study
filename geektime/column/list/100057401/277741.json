{"id":277741,"title":"08 | 基础篇大串讲：重难点回顾+思考题答疑+知识全景图","content":"<p>你好，我是王磊，你也可以叫我Ivan。</p><p>这一讲是我们课程的答疑篇，我会集中讨论前7讲布置的思考题，以及留言区中大家关注的一些内容。</p><h2>第1讲：分布式数据库的定义</h2><p>在<a href=\"https://time.geekbang.org/column/article/271373\">第1讲</a>中，我们通过层层递进式的分析，给这门课程要讨论的“分布式数据库”下了一个定义：分布式数据库是服务于写多读少、低延时、海量并发OLTP场景的，具有海量数据存储能力和高可靠性的关系型数据库。在“内部构成”这一节，我们还着重讨论了几种不属于分布式数据库的解决方案。</p><p>在这一讲的思考题部分，我们聊到了Aurora，我说“Aurora和这里说的分布式数据库还是有明显差别的”，想看看大家的理解。在留言中，我看到有些同学是持不同观点的，理由是Aurora也基于分布式存储的。</p><p>那么，为什么我说它不是分布式数据库呢？主要原因就是Aurora依然是不支持写入能力的水平扩展。</p><p>Aurora是亚马逊推出的云原生数据库，它采用计算与存储分离的思想，计算能力垂直扩展，存储能力水平扩展。究其原因，它的存储系统是直接架设在自家的分布式存储系统（S3）之上的；而计算节点仍然是单节点，所以是垂直扩展。当然Aurora也像MySQL一样是支持一写多读的，根据亚马逊的官方说明，可以配置15个备节点来分流读操作的压力。由于Aurora的元数据会缓存在主节点上的，在发生变更时，主备同步数据有一个小的延迟（小于100毫秒），这就造成备节点不能承接写入功能，读也不能保证严格的数据一致性。</p><!-- [[[read_end]]] --><p>我们在定义中强调了海量并发和写多读少，这其实就是要求分布式数据库的写入能力必须是可水平扩展的。</p><p>“开心哥”的留言中，提到了Aurora是不能支持多写的，准确地抓住了它与NewSQL的重要差别。而“南国”同学的留言中还提到了Aurora的论文。这篇论文是2017年，亚马逊在SIGMOD上发表的，论文题目叫做”<a href=\"https://media.amazonwebservices.com/blog/2017/aurora-design-considerations-paper.pdf\">Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases</a>”，其中披露了系统架构的设计细节，推荐有兴趣的同学阅读。其实阅读顶会论文是非常不错的学习方法，给“南国”同学点赞，希望大家也尝试一下。</p><p>最后，“xy”同学的留言还提到了另外两款同架构的产品，阿里polarDB，腾讯CynosDB，说明“xy”同学很关注对系统的横向比较，这也是非常好的学习习惯。我这里再补充一点，华为的Taurus也采用了类似Aurora的架构。</p><h2>第2讲：数据一致性</h2><p><a href=\"https://time.geekbang.org/column/article/272104\">第2讲</a>中，我们首先明确了强一致性包含数据一致性和事务一致性两个方面，而后展开介绍了数据一致性。我们的讲解方式是先给出一个分析框架，也就是状态和操作双视角，并从状态视角引出了最终一致性这个概念。而后，我们在最终一致性的基础上介绍了5种不同强度的一致性模型，其中线性一致性和因果一致性是分布式数据库中普遍应用的。</p><p>思考题部分则是“你觉得Paxos这个一致性协议和数据一致性又是什么关系呢？”</p><p>这个答案嘛，很显然它们是不同的概念。可为什么不同的概念，都叫做<strong>一致性</strong>呢？就像“峰”同学说的，这个问题其实是翻译造成的。数据一致性对应是Consistency，而一致性协议对应的则是Consensus，这个单词更多时候被翻译成共识，就是我们常说的共识算法。</p><p>我认为，Paxos本质上是一种复制协议，约定了副本之间的同步策略，就像我们谈到的最终一致性，同样也只是描述了副本之间同步情况。再看看我们具体介绍的5个数据一致性模型，它们都在多副本的基础上又约定了读写策略，所以这两点都是一致性模型（Consistency Model）必不可少的内容。</p><p>我在留言中发现有的同学对Paxos这样的共识算法认识很深刻，谈了多副本的一致性，讲得很好，但是会忽略了读写策略的作用。“chenchukun”和“tt”同学的留言则抓住了这两个点，点赞。</p><h2>第3讲：事务一致性</h2><p><a href=\"https://time.geekbang.org/column/article/272999\">第3讲</a>谈的事务一致性也是强一致性的组成部分，它具体又细化为ACID四个特性，其中的一致性比较宽泛，持久性的实现机制比较稳定，而原子性在分布式架构下面临挑战，最后的隔离性则非常复杂。即使在单体数据库下，工业界也没找到公认的处理隔离性问题的完美方法，很难实现最高级别的可串行化。所以，在分布式架构下，多数产品依然需要在性能与正确性之间进行权衡。</p><p>关于原子性和隔离性，我们还有比较多的篇幅展开讨论，所以课程的最后我留了一道关于持久性的思考题，就是预写日志（WAL）写成功，但是数据表写失败，要怎么处理？</p><p>在留言中，我发现很多同学都对WAL有深刻的认识，也都了解基于日志恢复数据的运作原理。其实，我这个问题是想让大家思考，联机写入的那一刻，除了记录WAL，数据库还干了什么。这也是一个与WAL有关的设计，也很有意思。</p><p>事实上，对大多数的数据库来说，实时写入数据时，并不是真的将数据写入数据表在磁盘中的对应文件里，因为数据表的组织形式复杂，不像WAL那样只是在文件尾部追加，所以I/O操作的延迟太长。因此，写入过程往往是这样的，记录WAL日志，同时将数据写入内存，两者都成功就返回客户端了。这些内存中的数据，在Oracle和MySQL中都被称为脏页，达到一定比例时会批量写入磁盘。而NewSQL所采用的LSM-Tree存储模型也是大致的思路，只不过在磁盘的数据组织上不同。</p><p>写入内存和WAL这两个操作构成了一个事务，必须一起成功或失败。</p><h2>第4讲：两种架构风格</h2><p><a href=\"https://time.geekbang.org/column/article/274200\">第4讲</a>我们谈了分布式数据库的两种架构风格NewSQL和PGXC。PGXC是从代理中间件演化而来，以单体数据库作为数据节点，它的优势是工程实现更稳定。NewSQL则是以分布式键值系统为基础，引入了很多新技术，这些技术都会在我们的课程中逐步介绍。NewSQL的代表系统是Google的Spanner，而它的优势就是架构的先进性。</p><p>其实关于架构风格的讨论，往往是百家争鸣，各持观点，所以我们的思考题也是一个开放性话题，请大家聊聊自己熟悉的分布式数据库，或者其他分布式系统的架构。</p><p>在留言区，“xy”和“赵见跃”同学都提到了TDSQL，它是不是也属于PGXC风格呢？我认为目前腾讯输出的TDSQL还不是典型的PGXC，因为它没有全局时钟，也没有等效的设计去解决全局一致性问题。当然，说它不是，我也是有点纠结的，在2019年TDSQL的技术演讲中，腾讯的研发人员深入地分析了缺失全局时钟带来的一致性问题，同时也提及了正在进行的技术尝试。所以，我相信TDSQL很快会在新版本中增加类似的特性。</p><p>“南国”同学还提出了一个新问题：NewSQL与PGXC的界限似乎很模糊，是不是差别就在存储层面，NewSQL只能存储，而PGXC是完整的数据库呢？我认为这只是一个表象，最关键的差异其实是分片设计，或者说是两种架构对数据组织形式上的根本差别。PGXC的数据是相对固定的，而NewSQL的数据是能够更加灵活移动的，移动意味着解锁了数据与节点的关系，有点像灵魂和躯体的关系。如果灵魂不被限制在一个躯体里，那是不是就可以实现永生。解锁了数据与节点的依赖关系，系统也更加鲁棒。总的来说，我认为能够适应变化，在各种意外情况下，都能生存下来，这是设计分布式系统的核心思想。</p><h2>第5讲：全局时钟</h2><p><a href=\"https://time.geekbang.org/column/article/274908\">第5讲</a>，我们介绍了全局时钟的不同实现方式，包括物理时钟和逻辑时钟两种方式，物理时钟的难点首先是要做到足够高的精度，其次是在使用时如何处理时钟误差，学术一点的说法叫做时钟的置信区间。逻辑时钟实际上是混合逻辑时钟，还是会引入物理时钟作为参考，但主要通过逻辑控制来保证时钟的单调递增。有同学问是不是可以不用物理时钟，我要说的是，对于多时间源是不行的，因为这样会造成不相关事件的时钟偏差太大，也就是偏序拼接的全序失真太大。如果是单时间源的混合逻辑时钟，它的好处是不用处理误差，简化了其他模块的设计。而HLC这样多时间源的混合逻辑时钟，则依然有时钟误差的问题。</p><p>这一讲的思考题是让大家思考一下“时间对于分布式数据库的影响是什么？”我发现大家的留言对这个问题的讨论并不多。其实，时间在很多分布式系统都是存在的，比如HBase对于各节点的时钟偏移也是有限制，只不过它的容忍度更高，可以达到几十秒。而在分布式数据库中与时间有关的功能主要体现在事务并发控制，比如MVCC、读写冲突。既然留言讨论不多，我这里就先不做点评，卖个关子，在第11讲、第12讲中我们再来详细聊聊。</p><h2>第6讲：数据分片</h2><p><a href=\"https://time.geekbang.org/column/article/275696\">第6讲</a>，我们介绍了分布式数据库中一个非常重要的概念“分片”。分片机制的两个关键点是分片策略和分片调度机制。分片策略包括Hash和Range，调度机制则包括静态和动态两种。分片机制的实现和架构有很大的关系，PGXC架构基本上都是静态分片，是以Hash分片为主，有的产品也同时支持Range分片。关于NewSQL架构，我们主要介绍了最有代表性的动态Range分片。</p><p>这一讲的思考题，就是在问分片元数据的存储方案。</p><p>分析这个问题，首先要看元数据会不会变更，比如静态分片就不会变更，那么就可以把它复制多份部署在所有工作节点上，如果会变更，那就要考虑变更带来的多副本一致性问题，这里其实是和后面的07讲相呼应的。现在读完07讲，你自然应该知道，如果是少数节点集中存储元数据，那么可以采用Paxos协议保证一致性。如果是P2P架构，因为节点规模太大，那就适合采用Gossip协议。设计的权衡点主要是在于节点规模大小对传播效率的影响。</p><p>“开心哥”和“真名不叫黄金”两位同学都回答其中的一种情况，就是基于etcd或PD（基于etcd）来存储元数据，而etcd是Raft协议的开源实现。</p><h2>第7讲：数据复制</h2><p><a href=\"https://time.geekbang.org/column/article/277028\">第7讲</a>，我们讨论的话题是数据复制，这和分片一样是非常基础和重要的内容。这一讲我们介绍了两个知识点，其中第一个就是分片元数据的存储方案，刚刚我们已经说过了，第二个知识点是数据复制的效率问题。Raft由于顺序投票的限制，在复制效率上比Paxos稍差。但是因为Raft有高质量的开源实现项目etcd，而Paxos因为算法复杂没有稳定的开源能实现，所有TiDB和CockroachDB还是选择了Raft协议。同时，TiDB和CockroachDB采用了Multi Raft的方式，让多分片并行处理提升性能。两者在Raft协议实现上也进行了若干改进。这些改进思路很有普适性，一些独立的Raft项目也同样实现了，比如SOFA-JRaft。</p><p>这一讲的思考题，我们讨论的是分布式数据库的存储上限。你一定有点疑惑，既然分布式数据库是一个水平扩展的系统，可以不断地增加节点。那么为什么还有存储上限呢？事实上，不仅分布式数据库，绝大多数分布式存储系统都是有上限的。因为有了这个限制，可以简化系统架构设计，而这个上限当然也是一个很大的数值，能够满足绝大多数业务场景的需求。</p><p>以CockroachDB为例，它的存储容量大致是4EB，而这个限制是由元数据的存储方式决定的。</p><p>在CockroachDB中存储分片元数据的数据结构叫做Meta ranges，它是一个两层索引结构，第一层Meta1存储了第二层Meta2的地址，第二层Meta2则指向了具体分片。每个节点会保存Meta1的定位，而且Meta1是不会分拆的，这样就更好的稳定性。Meta1和Meta2的长度都是18位，所以CockroachDB中最多只能有2^36个分片。CockroachDB默认分片初始大小是64M，那么可以算出一个总存储量是4EB，2^36*64M。从这个意义上说，CockroachDB的最大存储容量是4EB。当然，如果分片增大整体容量还会增加，但第6讲我们介绍过分片过大是有副作用的，所以不能无限制增加，系统的容量还是有上限的。</p><h2>小结</h2><p>最后，要特别感谢“Monday”同学，他建议我们增加一张分布式数据库的全景图，让知识的组织更加系统。我觉得这是个好主意，和编辑商量了一下，最后决定在每个答疑篇都会增量补充这个全景图，在最后的第30讲大家就能看到完整的全景图了。这样安排还有一个好处，就是帮助大家阶段性地复习前面课程。</p><h2>分布式数据全景图1/4</h2><p><img src=\"https://static001.geekbang.org/resource/image/fb/61/fb98977aea0413fddbe477643f1f3661.jpg?wh=2700*2056\" alt=\"\"></p><p>如果你对今天的内容有任何疑问，欢迎在评论区留言和我一起讨论。要是你身边的朋友也对分布式数据库这个话题感兴趣，你也可以把今天这一讲分享给他，我们一起讨论。</p><h2>学习资料</h2><p>Alexandre Verbitski et al.: <a href=\"https://media.amazonwebservices.com/blog/2017/aurora-design-considerations-paper.pdf\"><em>Amazon Aurora: Design Considerations for High Throughput Cloud-Native Relational Databases</em></a></p>","comments":[{"had_liked":false,"id":263060,"user_name":"evan","can_delete":false,"product_type":"c1","uid":1543040,"ip_address":"","ucode":"491B073D5AFEDE","user_header":"https://static001.geekbang.org/account/avatar/00/17/8b/80/8702bd5f.jpg","comment_is_top":false,"comment_ctime":1605966308,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14490868196","product_id":100057401,"comment_content":"&quot;Raft 由于顺序投票的限制，在复制效率上比 Paxos 稍差&quot; 老师, 这句话能展开讲讲吗? 因为我的理解下: 1. raft虽然是顺序投票, 不能存在日志空洞, 但在任期内只需要一次rpc就可以直接apply状态机(并且可以优化为batch append, 也可以raft group提高性能);  2. paxos虽然可以存在日志空洞, 但是通常一次提交需要两次rpc, prepare+accept, 当然也可以使用multi paxos+group多个实例多组提升性能, 或者使用fast paxos1次rpc直接accept, 但是如果冲突就很麻烦了... 所以我想问题的是..paxos比raft 复制(append log)性能高是基于哪方面? 还有日志空洞带来的缺陷或优势.. 希望老师解答下 感谢!","like_count":4,"discussions":[{"author":{"id":1071172,"avatar":"https://static001.geekbang.org/account/avatar/00/10/58/44/e318a684.jpg","nickname":"Lisanaaa","note":"","ucode":"C907EED05A543D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548921,"discussion_content":"Raft 的顺序投票除了会阻碍当前事务，还会阻碍接下来的事务。总体下来的消耗会大于这种rpc的消耗吧，我理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643445821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244511,"user_name":"托尼斯威特","can_delete":false,"product_type":"c1","uid":1729060,"ip_address":"","ucode":"98A1035527292E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/62/24/07e2507c.jpg","comment_is_top":false,"comment_ctime":1598543891,"is_pvip":false,"replies":[{"id":"89994","content":"你好，首先要说你提的问题很好，我猜这也是很多同学的疑问。事实上，分布式数据库在功能上没有太多神秘的地方，我们在开篇词中提到过，分布式数据库就是分布式架构实现的关系型数据库。所以说这些数据库的典型特性，专栏中介绍的分布式数据库几乎都可以支持。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598579298,"ip_address":"","comment_id":244511,"utype":1}],"discussion_count":4,"race_medal":0,"score":"10188478483","product_id":100057401,"comment_content":"谢谢老师的总结。<br>上手分布式数据库之前，我想请问几个基本的问题，<br><br>需要ORM框架吗？MyBatis Hilbernite 还是别的什么？<br><br>join操作有没有限制？比如能join on非索引列吗？能join on非partition key吗？有没有join次数限制？<br><br>嵌套select还能用吗？<br><br>是否还要遵守范式化要求？<br>","like_count":3,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504611,"discussion_content":"你好，首先要说你提的问题很好，我猜这也是很多同学的疑问。事实上，分布式数据库在功能上没有太多神秘的地方，我们在开篇词中提到过，分布式数据库就是分布式架构实现的关系型数据库。所以说这些数据库的典型特性，专栏中介绍的分布式数据库几乎都可以支持。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598579298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1729060,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/62/24/07e2507c.jpg","nickname":"托尼斯威特","note":"","ucode":"98A1035527292E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301691,"discussion_content":"谢谢老师回复。\n对join还是很困惑。NoSQL一般不支持join。\n关系数据库可以按照任何列join。\n\n分布式数据库支持join，如果join列不是partition key，那么系统必须对join的表全部读到内存，或者对一个表做多次全库扫描。其实OLAP系统/数据仓库是可以(比如hive)，但是OLTP/在线系统这样做会很慢，也支持不了几个并发。感觉不现实。\n\n不知道我的理解对不对。能否请老师详细说说。后边课程会讲到join的架构实现吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598608085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1543040,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/80/8702bd5f.jpg","nickname":"evan","note":"","ucode":"491B073D5AFEDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1729060,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/62/24/07e2507c.jpg","nickname":"托尼斯威特","note":"","ucode":"98A1035527292E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326242,"discussion_content":"分布式数据库对业务层是透明的 dao层代码基本可以无改动，但是有些不能兼容标准mysql的语法还是要做下适配，join性能肯定会比传统mysql低一些，具体要看计算节点优化到什么程度了…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605570872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301691,"ip_address":""},"score":326242,"extra":""}]},{"author":{"id":1004349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/3d/1189e48a.jpg","nickname":"微思","note":"","ucode":"853C48AA183A7B","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302407,"discussion_content":"搬小板凳坐等老师答疑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598920206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251689,"user_name":"| 青 |","can_delete":false,"product_type":"c1","uid":2045005,"ip_address":"","ucode":"96E0E425695DD7","user_header":"https://static001.geekbang.org/account/avatar/00/1f/34/4d/63739f5e.jpg","comment_is_top":false,"comment_ctime":1601799654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5896766950","product_id":100057401,"comment_content":"老师您提到的Aurora和pollardb是不是可以理解为和rac一样的smp架构啊？","like_count":1},{"had_liked":false,"id":249299,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1600577487,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1600577487","product_id":100057401,"comment_content":"老师，我想问个03讲的问题。MySQL的事务隔离级别理论上只有4种。但它的Repeatable Read居然也能解决幻读！那为什么不归类为Snapshot Isolation呢？我看网上都没有提到这个。","like_count":1,"discussions":[{"author":{"id":1543040,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/80/8702bd5f.jpg","nickname":"evan","note":"","ucode":"491B073D5AFEDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328063,"discussion_content":"mysql实现的rr其实就是严格意义上的snapshot, 但还是没能完全解决幻读. 只读:读快照(解决幻读), 只写: next-key lock(解决幻读), 但是如果select和select for update交替使用的时候(也就是快照读和当前度交替)还是会出现幻读..其实我也很纠结这算真正意义上的&#34;幻读&#34;吗.. 但现象上是确实有问题.\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606045901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249188,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1600496607,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1600496607","product_id":100057401,"comment_content":"老师，请问你在第一讲的时候说Aurora不支持多写，这个多写的定义是什么？能否详细说明？因为我看Aurora是支持多主和单主的，只是说Aurora集群的数据库实例数量是有限制的","like_count":0,"discussions":[{"author":{"id":1543040,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/80/8702bd5f.jpg","nickname":"evan","note":"","ucode":"491B073D5AFEDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326244,"discussion_content":"指的是多副本之间的多写，也就是水平扩展写。比如传统mysql主从架构下就不支持主从双写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605570998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249184,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1600495195,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1600495195","product_id":100057401,"comment_content":"为什么分布式数据库的定义要是写多读少呢？那像比较牛逼的OLAP，比如阿里Analytic DB，他们就是针对查询做特别优化，不也是分布式数据库吗？还是说他们放弃了对一致性和事务的完美追求，所以不算？","like_count":0,"discussions":[{"author":{"id":1155654,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a2/46/6721d8bf.jpg","nickname":"iswade","note":"","ucode":"6991C5C147B395","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378277,"discussion_content":"我理解这个课程重点讲的是OLTP数据库，对于OLAP当前大部分分布式数据库其实还是在MPP方向的优化，对一致性和事务其实要求也不是很高，所以不在这个专栏中介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623144240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244829,"user_name":"哈德韦","can_delete":false,"product_type":"c1","uid":1637085,"ip_address":"","ucode":"E7C9B3D087D2D9","user_header":"https://static001.geekbang.org/account/avatar/00/18/fa/dd/f640711f.jpg","comment_is_top":false,"comment_ctime":1598692651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598692651","product_id":100057401,"comment_content":"老师好，看AWS的最新文档，似乎Aurora也支持多写了：https:&#47;&#47;docs.aws.amazon.com&#47;AmazonRDS&#47;latest&#47;AuroraUserGuide&#47;aurora-multi-master.html。是不是说现在的Aurora更加是一个分布式数据库了呢？","like_count":0},{"had_liked":false,"id":244179,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1598419209,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1598419209","product_id":100057401,"comment_content":"问一下，文章中说数据库普遍写入数据都是WAL+内存写。那这种情况下，B-Tree和LSM tree还会有那么大的性能差异吗？B-Tree普遍要经过几次搜索，可能还有回表。而LSM Tree只要往有序的文件中写入数据，保证有序即可？这是两者差异的主要原因吗？","like_count":0,"discussions":[{"author":{"id":1543040,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/80/8702bd5f.jpg","nickname":"evan","note":"","ucode":"491B073D5AFEDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326246,"discussion_content":"b+树的性能下限取决于随机io，且mysql虽然做了很多优化redo log/write buffer等…但高并发下还是无法把cache到所有操作…而且主键索引也无法全加载到内存，就有可能会产生随机磁盘io…\n\nlsm主要是空间放大和读放大，为了平衡读的性能做merge操作，并且写并发上去后如果来不及merge会触发写保护…直接阻塞…","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1605571406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066752,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","nickname":"piboye","note":"","ucode":"7CFD8712857A85","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301527,"discussion_content":"b树全局排序，lsm是文件内或者层内有序，b树要支持就地修改导致会有随机写入。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598544737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244178,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1598418869,"is_pvip":false,"replies":[{"id":"89883","content":"PGXC当然也有演进的机会，增加动态调度，不过那就已经不是我们现在所说的PGXC架构了。<br>SQL无法水平扩展？这个怎么理解呢？","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598421270,"ip_address":"","comment_id":244178,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598418869","product_id":100057401,"comment_content":"PGXC 的数据是相对固定的，而 NewSQL 的数据是能够更加灵活移动的，移动意味着解锁了数据与节点的关系，有点像灵魂和躯体的关系。如果灵魂不被限制在一个躯体里，那是不是就可以实现永生。解锁了数据与节点的依赖关系，系统也更加鲁棒。<br>对文章中说的这一点，PGXC和NewSQL的区别表示疑问。PGXC如果加入动态调度的组件，是否也可以实现Range 动态调度呢？据我的理解普遍PGXC和NewSQL的最大区别是SQL层无法水平扩展吧？当然普遍PGXC因为历史原因无法做到Range的动态调度也是一个原因。","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504508,"discussion_content":"PGXC当然也有演进的机会，增加动态调度，不过那就已经不是我们现在所说的PGXC架构了。\nSQL无法水平扩展？这个怎么理解呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598421270,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}