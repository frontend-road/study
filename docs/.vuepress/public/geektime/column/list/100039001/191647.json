{"id":191647,"title":"37 | 实战二（下）：重构ID生成器项目中各函数的异常处理代码","content":"<p>平时进行软件设计开发的时候，我们除了要保证正常情况下的逻辑运行正确之外，还需要编写大量额外的代码，来处理有可能出现的异常情况，以保证代码在任何情况下，都在我们的掌控之内，不会出现非预期的运行结果。程序的bug往往都出现在一些边界条件和异常情况下，所以说，异常处理得好坏直接影响了代码的健壮性。全面、合理地处理各种异常能有效减少代码bug，也是保证代码质量的一个重要手段。</p><p>在上一节课中，我们讲解了几种异常情况的处理方式，比如返回错误码、NULL值、空对象、异常对象。针对最常用的异常对象，我们还重点讲解了两种异常类型的应用场景，以及针对函数抛出的异常的三种处理方式：直接吞掉、原封不动地抛出和包裹成新的异常抛出。</p><p>除此之外，在上一节课的开头，我们还针对ID生成器的代码，提出了4个有关异常处理的问题。今天，我们就用一节课的时间，结合上一节课讲到的理论知识，来逐一解答一下这几个问题。</p><p>话不多说，让我们正式开始今天的内容吧！</p><h2>重构generate()函数</h2><p>首先，我们来看，对于generate()函数，如果本机名获取失败，函数返回什么？这样的返回值是否合理？</p><pre><code>  public String generate() {\n    String substrOfHostName = getLastFieldOfHostName();\n    long currentTimeMillis = System.currentTimeMillis();\n    String randomString = generateRandomAlphameric(8);\n    String id = String.format(&quot;%s-%d-%s&quot;,\n            substrOfHostName, currentTimeMillis, randomString);\n    return id;\n  }\n</code></pre><p>ID由三部分构成：本机名、时间戳和随机数。时间戳和随机数的生成函数不会出错，唯独主机名有可能获取失败。在目前的代码实现中，如果主机名获取失败，substrOfHostName为NULL，那generate()函数会返回类似“null-16723733647-83Ab3uK6”这样的数据。如果主机名获取失败，substrOfHostName为空字符串，那generate()函数会返回类似“-16723733647-83Ab3uK6”这样的数据。</p><!-- [[[read_end]]] --><p>在异常情况下，返回上面两种特殊的ID数据格式，这样的做法是否合理呢？这个其实很难讲，我们要看具体的业务是怎么设计的。不过，我更倾向于明确地将异常告知调用者。所以，这里最好是抛出受检异常，而非特殊值。</p><p>按照这个设计思路，我们对generate()函数进行重构。重构之后的代码如下所示：</p><pre><code>  public String generate() throws IdGenerationFailureException {\n    String substrOfHostName = getLastFieldOfHostName();\n    if (substrOfHostName == null || substrOfHostName.isEmpty()) {\n      throw new IdGenerationFailureException(&quot;host name is empty.&quot;);\n    }\n    long currentTimeMillis = System.currentTimeMillis();\n    String randomString = generateRandomAlphameric(8);\n    String id = String.format(&quot;%s-%d-%s&quot;,\n            substrOfHostName, currentTimeMillis, randomString);\n    return id;\n  }\n</code></pre><h2>重构getLastFieldOfHostName()函数</h2><p>对于getLastFieldOfHostName()函数，是否应该将UnknownHostException异常在函数内部吞掉（try-catch并打印日志），还是应该将异常继续往上抛出？如果往上抛出的话，是直接把UnknownHostException异常原封不动地抛出，还是封装成新的异常抛出？</p><pre><code>  private String getLastFieldOfHostName() {\n    String substrOfHostName = null;\n    try {\n      String hostName = InetAddress.getLocalHost().getHostName();\n      substrOfHostName = getLastSubstrSplittedByDot(hostName);\n    } catch (UnknownHostException e) {\n      logger.warn(&quot;Failed to get the host name.&quot;, e);\n    }\n    return substrOfHostName;\n }\n</code></pre><p>现在的处理方式是当主机名获取失败的时候，getLastFieldOfHostName()函数返回NULL值。我们前面讲过，是返回NULL值还是异常对象，要看获取不到数据是正常行为，还是异常行为。获取主机名失败会影响后续逻辑的处理，并不是我们期望的，所以，它是一种异常行为。这里最好是抛出异常，而非返回NULL值。</p><p>至于是直接将UnknownHostException抛出，还是重新封装成新的异常抛出，要看函数跟异常是否有业务相关性。getLastFieldOfHostName()函数用来获取主机名的最后一个字段，UnknownHostException异常表示主机名获取失败，两者算是业务相关，所以可以直接将UnknownHostException抛出，不需要重新包裹成新的异常。</p><p>按照上面的设计思路，我们对getLastFieldOfHostName()函数进行重构。重构后的代码如下所示：</p><pre><code> private String getLastFieldOfHostName() throws UnknownHostException{\n    String substrOfHostName = null;\n    String hostName = InetAddress.getLocalHost().getHostName();\n    substrOfHostName = getLastSubstrSplittedByDot(hostName);\n    return substrOfHostName;\n }\n</code></pre><p>getLastFieldOfHostName()函数修改之后，generate()函数也要做相应的修改。我们需要在generate()函数中，捕获getLastFieldOfHostName()抛出的UnknownHostException异常。当我们捕获到这个异常之后，应该怎么处理呢？</p><p>按照之前的分析，ID生成失败的时候，我们需要明确地告知调用者。所以，我们不能在generate()函数中，将UnknownHostException这个异常吞掉。那我们应该原封不动地抛出，还是封装成新的异常抛出呢？</p><p>我们选择后者。在generate()函数中，我们需要捕获UnknownHostException异常，并重新包裹成新的异常IdGenerationFailureException往上抛出。之所以这么做，有下面三个原因。</p><ul>\n<li>调用者在使用generate()函数的时候，只需要知道它生成的是随机唯一ID，并不关心ID是如何生成的。也就说是，这是依赖抽象而非实现编程。如果generate()函数直接抛出UnknownHostException异常，实际上是暴露了实现细节。</li>\n<li>从代码封装的角度来讲，我们不希望将UnknownHostException这个比较底层的异常，暴露给更上层的代码，也就是调用generate()函数的代码。而且，调用者拿到这个异常的时候，并不能理解这个异常到底代表了什么，也不知道该如何处理。</li>\n<li>UnknownHostException异常跟generate()函数，在业务概念上没有相关性。</li>\n</ul><p>按照上面的设计思路，我们对generate()的函数再次进行重构。重构后的代码如下所示：</p><pre><code>  public String generate() throws IdGenerationFailureException {\n    String substrOfHostName = null;\n    try {\n      substrOfHostName = getLastFieldOfHostName();\n    } catch (UnknownHostException e) {\n      throw new IdGenerationFailureException(&quot;host name is empty.&quot;);\n    }\n    long currentTimeMillis = System.currentTimeMillis();\n    String randomString = generateRandomAlphameric(8);\n    String id = String.format(&quot;%s-%d-%s&quot;,\n            substrOfHostName, currentTimeMillis, randomString);\n    return id;\n  }\n</code></pre><h2>重构getLastSubstrSplittedByDot()函数</h2><p>对于getLastSubstrSplittedByDot(String hostName)函数，如果hostName为NULL或者空字符串，这个函数应该返回什么？</p><pre><code>  @VisibleForTesting\n  protected String getLastSubstrSplittedByDot(String hostName) {\n    String[] tokens = hostName.split(&quot;\\\\.&quot;);\n    String substrOfHostName = tokens[tokens.length - 1];\n    return substrOfHostName;\n  }\n</code></pre><p>理论上讲，参数传递的正确性应该有程序员来保证，我们无需做NULL值或者空字符串的判断和特殊处理。调用者本不应该把NULL值或者空字符串传递给getLastSubstrSplittedByDot()函数。如果传递了，那就是code bug，需要修复。但是，话说回来，谁也保证不了程序员就一定不会传递NULL值或者空字符串。那我们到底该不该做NULL值或空字符串的判断呢？</p><p>如果函数是private类私有的，只在类内部被调用，完全在你自己的掌控之下，自己保证在调用这个private函数的时候，不要传递NULL值或空字符串就可以了。所以，我们可以不在private函数中做NULL值或空字符串的判断。如果函数是public的，你无法掌控会被谁调用以及如何调用（有可能某个同事一时疏忽，传递进了NULL值，这种情况也是存在的），为了尽可能提高代码的健壮性，我们最好是在public函数中做NULL值或空字符串的判断。</p><p>那你可能会说，getLastSubstrSplittedByDot()是protected的，既不是private函数，也不是public函数，那要不要做NULL值或空字符串的判断呢？</p><p>之所以将它设置为protected，是为了方便写单元测试。不过，单元测试可能要测试一些corner case，比如输入是NULL值或者空字符串的情况。所以，这里我们最好也加上NULL值或空字符串的判断逻辑。虽然加上有些冗余，但多加些检验总归不会错的。</p><p>按照这个设计思路，我们对getLastSubstrSplittedByDot()函数进行重构。重构之后的代码如下所示：</p><pre><code>  @VisibleForTesting\n  protected String getLastSubstrSplittedByDot(String hostName) {\n    if (hostName == null || hostName.isEmpty()) {\n      throw IllegalArgumentException(&quot;...&quot;); //运行时异常\n    }\n    String[] tokens = hostName.split(&quot;\\\\.&quot;);\n    String substrOfHostName = tokens[tokens.length - 1];\n    return substrOfHostName;\n  }\n</code></pre><p>按照上面讲的，我们在使用这个函数的时候，自己也要保证不传递NULL值或者空字符串进去。所以，getLastFieldOfHostName()函数的代码也要作相应的修改。修改之后的代码如下所示：</p><pre><code> private String getLastFieldOfHostName() throws UnknownHostException{\n    String substrOfHostName = null;\n    String hostName = InetAddress.getLocalHost().getHostName();\n    if (hostName == null || hostName.isEmpty()) { // 此处做判断\n      throw new UnknownHostException(&quot;...&quot;);\n    }\n    substrOfHostName = getLastSubstrSplittedByDot(hostName);\n    return substrOfHostName;\n }\n</code></pre><h2>重构generateRandomAlphameric()函数</h2><p>对于generateRandomAlphameric(int length)函数，如果length &lt; 0或length = 0，这个函数应该返回什么？</p><pre><code>  @VisibleForTesting\n  protected String generateRandomAlphameric(int length) {\n    char[] randomChars = new char[length];\n    int count = 0;\n    Random random = new Random();\n    while (count &lt; length) {\n      int maxAscii = 'z';\n      int randomAscii = random.nextInt(maxAscii);\n      boolean isDigit= randomAscii &gt;= '0' &amp;&amp; randomAscii &lt;= '9';\n      boolean isUppercase= randomAscii &gt;= 'A' &amp;&amp; randomAscii &lt;= 'Z';\n      boolean isLowercase= randomAscii &gt;= 'a' &amp;&amp; randomAscii &lt;= 'z';\n      if (isDigit|| isUppercase || isLowercase) {\n        randomChars[count] = (char) (randomAscii);\n        ++count;\n      }\n    }\n    return new String(randomChars);\n  }\n}\n</code></pre><p>我们先来看length  &lt;  0的情况。生成一个长度为负值的随机字符串是不符合常规逻辑的，是一种异常行为。所以，当传入的参数length  &lt;  0的时候，我们抛出IllegalArgumentException异常。</p><p>我们再来看length = 0的情况。length = 0是否是异常行为呢？这就看你自己怎么定义了。我们既可以把它定义为一种异常行为，抛出IllegalArgumentException异常，也可以把它定义为一种正常行为，让函数在入参length = 0的情况下，直接返回空字符串。不管选择哪种处理方式，最关键的一点是，要在函数注释中，明确告知length = 0的情况下，会返回什么样的数据。</p><h2>重构之后的RandomIdGenerator代码</h2><p>对RandomIdGenerator类中各个函数异常情况处理代码的重构，到此就结束了。为了方便查看，我把重构之后的代码，重新整理之后贴在这里了。你可以对比着看一下，跟你的重构思路是否一致。</p><pre><code>public class RandomIdGenerator implements IdGenerator {\n  private static final Logger logger = LoggerFactory.getLogger(RandomIdGenerator.class);\n\n  @Override\n  public String generate() throws IdGenerationFailureException {\n    String substrOfHostName = null;\n    try {\n      substrOfHostName = getLastFieldOfHostName();\n    } catch (UnknownHostException e) {\n      throw new IdGenerationFailureException(&quot;...&quot;, e);\n    }\n    long currentTimeMillis = System.currentTimeMillis();\n    String randomString = generateRandomAlphameric(8);\n    String id = String.format(&quot;%s-%d-%s&quot;,\n            substrOfHostName, currentTimeMillis, randomString);\n    return id;\n  }\n\n  private String getLastFieldOfHostName() throws UnknownHostException{\n    String substrOfHostName = null;\n    String hostName = InetAddress.getLocalHost().getHostName();\n    if (hostName == null || hostName.isEmpty()) {\n      throw new UnknownHostException(&quot;...&quot;);\n    }\n    substrOfHostName = getLastSubstrSplittedByDot(hostName);\n    return substrOfHostName;\n  }\n\n  @VisibleForTesting\n  protected String getLastSubstrSplittedByDot(String hostName) {\n    if (hostName == null || hostName.isEmpty()) {\n      throw new IllegalArgumentException(&quot;...&quot;);\n    }\n\n    String[] tokens = hostName.split(&quot;\\\\.&quot;);\n    String substrOfHostName = tokens[tokens.length - 1];\n    return substrOfHostName;\n  }\n\n  @VisibleForTesting\n  protected String generateRandomAlphameric(int length) {\n    if (length &lt;= 0) {\n      throw new IllegalArgumentException(&quot;...&quot;);\n    }\n\n    char[] randomChars = new char[length];\n    int count = 0;\n    Random random = new Random();\n    while (count &lt; length) {\n      int maxAscii = 'z';\n      int randomAscii = random.nextInt(maxAscii);\n      boolean isDigit= randomAscii &gt;= '0' &amp;&amp; randomAscii &lt;= '9';\n      boolean isUppercase= randomAscii &gt;= 'A' &amp;&amp; randomAscii &lt;= 'Z';\n      boolean isLowercase= randomAscii &gt;= 'a' &amp;&amp; randomAscii &lt;= 'z';\n      if (isDigit|| isUppercase || isLowercase) {\n        randomChars[count] = (char) (randomAscii);\n        ++count;\n      }\n    }\n    return new String(randomChars);\n  }\n}\n</code></pre><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们一块来总结回顾一下，你需要重点掌握的内容。</p><p>今天的内容比较偏实战，是对上节课学到的理论知识的一个应用。从今天的实战中，你学到了哪些更高层的软件设计和开发思想呢？我这里抛砖引玉，总结了下面3点。</p><ul>\n<li>再简单的代码，看上去再完美的代码，只要我们下功夫去推敲，总有可以优化的空间，就看你愿不愿把事情做到极致。</li>\n<li>如果你内功不够深厚，理论知识不够扎实，那你就很难参透开源项目的代码到底优秀在哪里。就像如果我们没有之前的理论学习，没有今天我给你一点一点重构、讲解、分析，只是给你最后重构好的RandomIdGenerator的代码，你真的能学到它的设计精髓吗？</li>\n<li>对比<a href=\"https://time.geekbang.org/column/article/190979\">第34节课</a>最初小王的IdGenerator代码和最终的RandomIdGenerator代码，它们一个是“能用”，一个是“好用”，天壤之别。作为一名程序员，起码对代码要有追求啊，不然跟咸鱼有啥区别！</li>\n</ul><h2>课堂讨论</h2><p>我们花了4节课的时间，对一个非常简单的、不到40行的ID生成器代码，做了多次迭代重构。除了刚刚我在“重点回顾”中讲到的那几点之外，从这个迭代重构的过程中，你还学到哪些更有价值的东西？</p><p>欢迎在留言区写下你的思考和想法，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"36 | 实战二（上）：程序出错该返回啥？NULL、异常、错误码、空对象？","id":191642},"right":{"article_title":"38 | 总结回顾面向对象、设计原则、编程规范、重构技巧等知识点","id":193093}},"comments":[{"had_liked":false,"id":174258,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1580110721,"is_pvip":false,"replies":[{"id":"67720","content":"我觉得你懂我~","user_name":"作者回复","comment_id":174258,"uid":"1190123","ip_address":"","utype":1,"ctime":1580113492,"user_name_real":"王争"}],"discussion_count":12,"race_medal":0,"score":"839098733441","product_id":100039001,"comment_content":"还学到什么：<br>1.一下子想搞个例子讲这些真的太难了，拍着脑子想demo。栏主这个demo背景简单，也将要讲的内容串起来了，实属不易，幸苦栏主了。<br><br>个人见解：<br>1.按我的习惯，我会尽量把入参和中间不可靠变量的异常校验都放在public方法，所有私有方法都以契约的方式不再做参数校验。也就是说 public方法干 1.参数校验 2. 系统一级流程编排 3.统一异常处理 这三件事。所以对private方法的提炼会和栏主有点出入。<br><br>2.如果这个id生成器还要带有业务key，比如分表路由key之类的东西。那么这个实现就还得大动干戈。但凡这种涉及持久数据的玩意，很可能需要考虑新老版本兼容的问题，也就是如何平滑过度老数据。所以需要在id生成算法上引入版本或者类型的标记，把标记打在持久化的数据上，以备平滑过度老数据。","like_count":196,"discussions":[{"author":{"id":1629256,"avatar":"https://static001.geekbang.org/account/avatar/00/18/dc/48/9796286e.jpg","nickname":"林子er","note":"","ucode":"85637288F22CF0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243897,"discussion_content":"“按我的习惯，我会尽量把入参和中间不可靠变量的异常校验都放在public方法”,我是相反，我一般倾向于在私有的小方法里面检测输入的合法性，因为一来这样能让上层public方法更简洁（稍复杂的public方法我一般都拆分成多个小方法），二来符合分治思想，谁负责处理谁就全权负责，包括参数校验，再者就算是private方法也保不准未来会被类里面多个方法调用，因而理论上也是需要校验一次。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1587564363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1107666,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/d2/638ca831.jpg","nickname":"z","note":"","ucode":"CDB0BE8562ECB6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1629256,"avatar":"https://static001.geekbang.org/account/avatar/00/18/dc/48/9796286e.jpg","nickname":"林子er","note":"","ucode":"85637288F22CF0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373921,"discussion_content":"入口处统一check，内部的private只做do，出了问题就抛异常。个人还是感觉public统一做更好。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1620915636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":243897,"ip_address":""},"score":373921,"extra":""},{"author":{"id":2172520,"avatar":"https://static001.geekbang.org/account/avatar/00/21/26/68/b86dc4df.jpg","nickname":"R","note":"","ucode":"3721FC8C8DE174","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1629256,"avatar":"https://static001.geekbang.org/account/avatar/00/18/dc/48/9796286e.jpg","nickname":"林子er","note":"","ucode":"85637288F22CF0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577775,"discussion_content":"我认为谁负责处理谁就负责校验参数，我同意你的看法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656327279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":243897,"ip_address":""},"score":577775,"extra":""}]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482348,"discussion_content":"我觉得你懂我~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580113492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1180978,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/32/7440d47d.jpg","nickname":"王位庆","note":"","ucode":"D480AEA92894FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":530694,"discussion_content":"没想到王争大佬也会回去看写的专栏。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637126383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":482348,"ip_address":""},"score":530694,"extra":"{\"user_type\":1}"}]},{"author":{"id":1322714,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2e/da/15f95b7b.jpg","nickname":"jiangchuan","note":"","ucode":"1A4CA8A73B7F88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":252071,"discussion_content":"需求决定复杂度","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588139297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121975,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/b7/b20ab184.jpg","nickname":"麋鹿在泛舟","note":"","ucode":"1379CADA08688E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180108,"discussion_content":"&#34;按我的习惯，我会尽量把入参和中间不可靠变量的异常校验都放在public方法&#34; 虽然这样自己比较好区分，不过既然设置成public, 那么外部就可见了，实际上这个暴露出来的方法也不是给外部用的，可能会有歧义。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582277468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121975,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/b7/b20ab184.jpg","nickname":"麋鹿在泛舟","note":"","ucode":"1379CADA08688E","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":181117,"discussion_content":"不给外部用为什么要public？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582339610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":180108,"ip_address":""},"score":181117,"extra":""}]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589662,"discussion_content":"这种方式不错啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665224309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1832266,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIIP4P45S9HTzVH2SAH7u9UoKcjibh3smlme8Ieh4921diaaRJYcRcBWwq7XiaCySXO9lopRpDtzp7yA/132","nickname":"yezj","note":"","ucode":"38BD97834AC8F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334923,"discussion_content":"参数校验按照一定规则加就好了，否则每个方法都加也不合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608028133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1832266,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIIP4P45S9HTzVH2SAH7u9UoKcjibh3smlme8Ieh4921diaaRJYcRcBWwq7XiaCySXO9lopRpDtzp7yA/132","nickname":"yezj","note":"","ucode":"38BD97834AC8F8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334972,"discussion_content":"业务无关的检验剥离在业务之外就好。其他随意啦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608038696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334923,"ip_address":""},"score":334972,"extra":""}]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166571,"discussion_content":"硬核","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581413112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187360,"user_name":"空白昵称","can_delete":false,"product_type":"c1","uid":1433815,"ip_address":"","ucode":"91F50CA25102AB","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d7/744bd8c3.jpg","comment_is_top":false,"comment_ctime":1584091039,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"650124152735","product_id":100039001,"comment_content":"我觉得抛异常这件事，有点像开发经理的职责。下级有问题（异常）要反馈，然后自己能处理则处理（吞掉异常）。如果自己不能处理的，要向上级汇报，那么汇报的时候就要考虑，如果上级不关心底层研发问题，则上报自己汇总的问题（re-throw新的异常）。如果上级领导也是技术控，对底层很了解，那么可适当直接上报（直接re-throw下级反馈的异常）。","like_count":152,"discussions":[{"author":{"id":1330632,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTItudDLPfbZabQLjk1NE8NSibQocdRy88rerQdxHFKx4KzUyaEnSLPbszcKAaPX8NgG3sHbZXib41aQ/132","nickname":"Mirss.zhao","note":"","ucode":"4A8F20B1A9D142","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345601,"discussion_content":"我觉得不是自己能不能处理的问题，是上级需不需要知道这个问题","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1611752398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1872697,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/93/39/f642023f.jpg","nickname":"Hplus","note":"","ucode":"DC32CBC3E9C11D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340420,"discussion_content":"形象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609998555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1652492,"avatar":"https://static001.geekbang.org/account/avatar/00/19/37/0c/91860cc9.jpg","nickname":"Bone","note":"","ucode":"F18A2B9916B6F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319571,"discussion_content":"牛皮","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604053500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1812807,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","nickname":"御风","note":"","ucode":"51C8212BE06364","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293931,"discussion_content":"精妙！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595731301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1002201,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/d9/75dd7cf9.jpg","nickname":"Mew151","note":"","ucode":"D4793F5874F345","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288409,"discussion_content":"精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593744639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019302,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/a6/22c37c91.jpg","nickname":"楊_宵夜","note":"","ucode":"7BA0CADC5F23BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284175,"discussion_content":"生动有趣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592463285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175035,"user_name":"undefined","can_delete":false,"product_type":"c1","uid":1587803,"ip_address":"","ucode":"867405CA5A9FB7","user_header":"https://static001.geekbang.org/account/avatar/00/18/3a/5b/ce1724ca.jpg","comment_is_top":false,"comment_ctime":1580533933,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"237803735213","product_id":100039001,"comment_content":"个人见解：如果 id 生成器需要应用到生产环境，类似 hostname 获取失败的问题，需要由生成器本身给出降级方案。一来为了 id 格式统一，二来假若抛给业务，业务对于这种系统底层的失败，也没有什么好的解决方法。","like_count":56,"discussions":[{"author":{"id":1608383,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8a/bf/3f7c45c9.jpg","nickname":"X_L～","note":"","ucode":"6BD8C24750F86B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382970,"discussion_content":"哈哈 我觉得你懂我","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1625813491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1796995,"avatar":"","nickname":"？？","note":"","ucode":"B4860F9C48565C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551789,"discussion_content":"+1 也是这么想的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645112148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2062203,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/77/7b/338c4617.jpg","nickname":"瀚海","note":"","ucode":"E64C22F3F6D285","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374342,"discussion_content":"同意。 日志不是业务核心，ID生成失败不应该向上抛出异常，感觉host name返回null就可以，能区分日志就好","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621143830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1050018,"avatar":"https://static001.geekbang.org/account/avatar/00/10/05/a2/721ae4c6.jpg","nickname":"Jervis","note":"","ucode":"86C02C483449CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360107,"discussion_content":"复议","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616374231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1613159,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9d/67/556c73a2.jpg","nickname":"young","note":"","ucode":"1DF149FB0BF34B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333989,"discussion_content":"对的，对于这种非正常的ID生成，业务系统观察到以后解决这个问题就可以了，不能强制不生成ID","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607685560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580305,"discussion_content":"可以用ip代替啊 ，这种没必要上抛，不能因为这个影响主流程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658070920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330632,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTItudDLPfbZabQLjk1NE8NSibQocdRy88rerQdxHFKx4KzUyaEnSLPbszcKAaPX8NgG3sHbZXib41aQ/132","nickname":"Mirss.zhao","note":"","ucode":"4A8F20B1A9D142","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345602,"discussion_content":"同意～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611752454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1596047,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIlZ9AObDSXrfSEibY94uyQvMQ4tOvbb7iaQH9H7QQ6ibNaqFKUGq1TboaFpBSLuP0MCcSXvmqHNg0IA/132","nickname":"Geek_8c5f9c","note":"","ucode":"70CD441EAF490F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286823,"discussion_content":"同意，业务也无法生成一个更好的ID。 而且null本身也是一种区分（和其他非null的host）。id生产器的用途也是一种判断依据。在这里只是用于区分 request log，重复也不会有严重的后果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593305672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174204,"user_name":"Harvey","can_delete":false,"product_type":"c1","uid":1254112,"ip_address":"","ucode":"164D1178DA091A","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/e0/6295a753.jpg","comment_is_top":false,"comment_ctime":1580084413,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"104659299517","product_id":100039001,"comment_content":"设计之所以难是因为没有标准答案，很多权衡是依赖于具体业务的。这就是DDD的思想所在，要先想清楚问题域是什么在思考解决方案。很多开发讨论问题的时候没有层次，上来就陷入技术细节，这就叫缺乏抽象。下游系统要想清楚哪些是上游系统给你提供的服务？哪些是人家的内部技术实现？比如ID生成，作为上游系统，ID生成服务提供的是有小概率重复的随机ID服务，至于随机算法，下游系统不必关心，这是上游系统的内部实现，这样上游系统才有空间更换算法而不影响下游系统。","like_count":24,"discussions":[{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287134,"discussion_content":"下游上游的概念反了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593388157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254112,"avatar":"https://static001.geekbang.org/account/avatar/00/13/22/e0/6295a753.jpg","nickname":"Harvey","note":"","ucode":"164D1178DA091A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":287514,"discussion_content":"没反，上下游是按影响定义的，不是按依赖定义的，上游影响下游，与河流是一个道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593473373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":287134,"ip_address":""},"score":287514,"extra":""}]},{"author":{"id":1161044,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcUUoxHNRJLZ9TzY2flSkjiboM4urZYLuApeAw0HTdMXzG40ZDsTcbDFWPfscD6ic6Uj1xkXmQicScA/132","nickname":"时光","note":"","ucode":"E9EDB0C3CA5254","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380545,"discussion_content":"陷入技术细节这个真的坑，直接就让自己&#34;无形&#34;中陷入了思考的被动，不能站在外面，站在高处，从更高的角度做出全局的、更全面的考虑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624549437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174194,"user_name":"Geek_kobe","can_delete":false,"product_type":"c1","uid":1735014,"ip_address":"","ucode":"ADC259585ADE56","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/78Mz6ibW43mh9rsgsII7aVYLHV9Uicn9qicce0czgFlLDkusW3oyR9ePaSJ6l80ibbDSJbkKeZqafLnW2dlVAyfAicQ/132","comment_is_top":false,"comment_ctime":1580056520,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"100364304328","product_id":100039001,"comment_content":"果然还是看技术文章能让恐慌的心静下来","like_count":24,"discussions":[{"author":{"id":1619347,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b5/93/cf0fc8af.jpg","nickname":"五年老萌新","note":"","ucode":"86BB8554D6785A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585001,"discussion_content":"没错  每当自己对职业前景担忧时  看看专栏也是解忧的方式   但更多还是靠平时的积累 不能只在忧心的时候来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661264890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":188605,"user_name":"xk_","can_delete":false,"product_type":"c1","uid":1514305,"ip_address":"","ucode":"DFE1AC38EA78A7","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","comment_is_top":false,"comment_ctime":1584374134,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"57418948982","product_id":100039001,"comment_content":"很多小伙伴说，generate方法不需要抛出异常。<br><br>对，如果这个业务是仅仅只是作为唯一id，那么不管怎么样一定要生成一个随机数的。<br><br>那么，放开来想这个业务并非是一个id生成器，而是生成一个id业务码，这个id后面会用个主机名，对流量进行识别。争哥这么抛出异常，我觉得是可行的。还是要看具体的业务<br><br>再说一句，主机名还是一个很重要的东西，hadoop集群获取不到主机名，是一个很严重的问题。","like_count":13,"discussions":[{"author":{"id":1242573,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/cd/3890be04.jpg","nickname":"小川","note":"","ucode":"D462222DDBB978","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381754,"discussion_content":"抛异常的目的，就是要上游知道id生成会有异常的情况。\n\n需要上游特殊处理这种情况。\n\n如果不抛异常也有一种解决办法，就是上游与generate之间增加一层，专门处理异常情况，然后自动降级补全。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1625200989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174422,"user_name":"皮卡皮卡","can_delete":false,"product_type":"c1","uid":1216284,"ip_address":"","ucode":"D440EEC7301C76","user_header":"https://static001.geekbang.org/account/avatar/00/12/8f/1c/1c728388.jpg","comment_is_top":false,"comment_ctime":1580203756,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"53119811308","product_id":100039001,"comment_content":"争哥这种设计思路考虑了一下，但是在业务中往往获取唯一ID的地方，不关心ID内部生成错误，需要的只是能够返回出来ID即可。目前我们的处理是异常在generate内部自己解决，同时返回ID","like_count":12,"discussions":[{"author":{"id":1608383,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8a/bf/3f7c45c9.jpg","nickname":"X_L～","note":"","ucode":"6BD8C24750F86B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382971,"discussion_content":"我想我可能理解争哥，以开专栏的程度来进行这种异常处理的讲解，其答案必须得是在广泛意义上不会引起争论的，所以他选择了这种最严谨的处理态度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625813661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253530,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/9a/3b1c65fd.jpg","nickname":"八百","note":"","ucode":"79F1F79ADF5A00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276497,"discussion_content":"对于这个日志id，支持异常自己处理，返回一个id即可，因为除了hostname为空，还有其它部分可以有唯一性区分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590890812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121975,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/b7/b20ab184.jpg","nickname":"麋鹿在泛舟","note":"","ucode":"1379CADA08688E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180110,"discussion_content":"是不关心咋产生的，但是要关系是否成功产生ID","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582277517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024341,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a1/55/cff2322c.jpg","nickname":"雪中亮","note":"","ucode":"B294FDFF9F13E8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":155858,"discussion_content":"我觉得争哥的思路是：在方法无法返回ID的时候，如何处理。所以我觉得没有办法在方法内部处理错误，然后返回正确的ID的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580300874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174207,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1580086725,"is_pvip":false,"replies":[{"id":"67712","content":"好的，等我俩月，我整理好，一块放到github上：<br>https:&#47;&#47;github.com&#47;wangzheng0822","user_name":"作者回复","comment_id":174207,"uid":"1190123","ip_address":"","utype":1,"ctime":1580106482,"user_name_real":"王争"}],"discussion_count":4,"race_medal":0,"score":"44529759685","product_id":100039001,"comment_content":"希望老师每节课举的代码有下载的地方，自己下载下来结合老师讲解的，自己理解体会其中的解决问题","like_count":10,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482335,"discussion_content":"好的，等我俩月，我整理好，一块放到github上：\nhttps://github.com/wangzheng0822","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580106482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2850663,"avatar":"","nickname":"Geek_5e6ecf","note":"","ucode":"A1222F7D5C4D99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556212,"discussion_content":"两年过去了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647247447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2645013,"avatar":"https://static001.geekbang.org/account/avatar/00/28/5c/15/95d8cfd2.jpg","nickname":"喻大可","note":"","ucode":"46CAC2538B6DDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381813,"discussion_content":"转眼一年半过去了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625222774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1750549,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b6/15/e2cfd10d.jpg","nickname":"ImYours°","note":"","ucode":"51F653129034C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360709,"discussion_content":"一年过去了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616508123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175503,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1580735690,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"31645506762","product_id":100039001,"comment_content":"从来没有否认过争哥这个专栏的认真程度，但是对于generate方法是否抛出异常有点异议 我的想法跟下面的人是一样的 本质上这是个id生成器 是为了追踪请求错误时候用的 在这个条件下id能不能生成并不应该阻止请求的流程 假如抛出异常给调用者那调用者继续走下去 那这个抛出来的异常的价值在哪？就只是为了知道一下hostname获取不到？如果抛出异常后终止了请求 那会不会有点”小题大作“了？当然demo怎么样举都可能有不完美的地方 评论里说出来也是给其他读者一个思路而不是一味的“照搬” 而且我觉得这个专栏争哥举了那么多的demo的牛逼之处在于不仅把要讲的知识点抛砖引玉出来而且还是贴近我们的日常开发 确实是实实在在很有可能在企业里用到的案例 就比如今天这个demo 后面我就考虑在我新开发的接口添加id生成器 来追踪请求出现的问题 说实话 我并没有看过争哥的算法课程 但是看到争哥这个专栏的前言后毫不犹豫地订了 追求代码极致这一态度是争哥给我的共鸣","like_count":7,"discussions":[{"author":{"id":1179028,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","nickname":"咸鱼","note":"","ucode":"5E79636DE48155","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221175,"discussion_content":"这一点看容忍度吧，如果hostname获取不到，继续没有抛出异常返回一个没有hostname的ID，那么业务本身能容忍这种问题的发生，也就是后续不会影响到问题排查，那就没必要抛出异常。如果接口部署到多台机器上，请求量很大，那么没了hostname，日志聚合到一起后，肯定是不利于问题排查的，反而不如让调用方来处理这个问题。个人理解","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1585985526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1139384,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/b8/bb9657c6.jpg","nickname":"Promise°","note":"","ucode":"0BFDBDAD852D6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1179028,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","nickname":"咸鱼","note":"","ucode":"5E79636DE48155","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297854,"discussion_content":"个人见解:原则上日志追踪的话是每个请求都要加的。那么对于获取不到hostname的应用来说抛出异常就意味着这台机器的所有请求都不可用。这种情况对于线上的影响过大 建议catch","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597072371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":221175,"ip_address":""},"score":297854,"extra":""}]},{"author":{"id":1619347,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b5/93/cf0fc8af.jpg","nickname":"五年老萌新","note":"","ucode":"86BB8554D6785A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585004,"discussion_content":"如果以日志追踪id来说的话，肯定是无论如何要生成一个id的，且不能影响主业务流程，这个东西的作用本身就是为了方便日志排查，没有这个id日志也能看，但是难度会增加，如果是作为业务id生成器的话，不能正常返回那么业务就不能正常进行，就要抛出","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661265241,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1832266,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIIP4P45S9HTzVH2SAH7u9UoKcjibh3smlme8Ieh4921diaaRJYcRcBWwq7XiaCySXO9lopRpDtzp7yA/132","nickname":"yezj","note":"","ucode":"38BD97834AC8F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334922,"discussion_content":"是的，这个抛异常得看具体情况，这里我也觉得没必要抛异常，返回字符串unknow也可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608027940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176459,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1581064294,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23055900774","product_id":100039001,"comment_content":"设计模式_37:<br>刚刚看了一下，这4篇文章，我做了14条笔记，这些东西都是我认为非常好的细节。<br>随便举一个例子:<br>\t```<br>\t使用注解 @VisibleForTesting 来表示某private方法改为protected只是为了便于单元测试。<br>\t```<br>很喜欢这样的细节，当时的感受是，这种规范的做法是非常好的习惯，读起来非常友好。<br>剩下的也都差不多，我自己的开发中是注意不到的，缺乏这样的智慧。<br><br>另外，我也非常同意 @Jxin 同学的说法，找到一个Demo，能够涵盖绝大多数的要点，同时例子不能很生僻，并且让别人容易看懂。我也经常写文章，我知道这里的困哪和工作量。<br>佩服争哥！","like_count":5},{"had_liked":false,"id":174380,"user_name":"liu_liu","can_delete":false,"product_type":"c1","uid":1019138,"ip_address":"","ucode":"24283806A07759","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","comment_is_top":false,"comment_ctime":1580184764,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23055021244","product_id":100039001,"comment_content":"写代码不是糊弄，写出好的有水平的代码需要下一番功夫。对代码保持敬畏之心，有追求极致的思想，才会越来越好。","like_count":5,"discussions":[{"author":{"id":2592272,"avatar":"https://static001.geekbang.org/account/avatar/00/27/8e/10/750e9378.jpg","nickname":"Geek_40c051","note":"","ucode":"838A536635C6D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373954,"discussion_content":"道理其实大家都懂，但是工期紧张的情况下，各种压力下，还能下功夫的人，需要大毅力的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620952053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240819,"user_name":"Promise°","can_delete":false,"product_type":"c1","uid":1139384,"ip_address":"","ucode":"0BFDBDAD852D6D","user_header":"https://static001.geekbang.org/account/avatar/00/11/62/b8/bb9657c6.jpg","comment_is_top":false,"comment_ctime":1597073704,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"18776942888","product_id":100039001,"comment_content":"学到了什么:<br><br>    脑袋大,看了评论感觉：公说公有理婆说婆有理。同意@Jxin的说法 私有方法以契约的形式保证参数不会出错。<br><br>    如果该生成器仅为此项目内部使用或者以工具类的形式存在不建议generate方法抛出异常。<br>    比如所有的请求都需要增加logId,那么如果获取不到hostName就抛出异常且调用方不捕获异常的场景下,所有的请求都会失败。<br>\t如果是5台机器的集群组那么就相当于挂掉了1台。个人认为影响还是很大的。<br><br>\t但是反过来说对于这种场景 也并非无解决方案,比如项目启动时必须先调用id生成器一次,保证id必定能生成，否则抛出异常终止启动。<br>\t(仅指集群应用):<br>\t\t1.项目部署就能发现问题,避免上线后再产生问题,把问题扼杀在启动时。<br>\t\t2.集群应用下一般来说都不会一次性部署所有机器。原则上每次并行部署的项目数量要小于机器数&#47;2。<br>\t\t  比如十台机器可能先部署2台 启动无误后在按照2台的数量依次部署。这样即使是由于环境产生了问题 也就只有两台机器出现问题,不会导致全部不可用 <br><br>\t以上纯属个人见解,欢迎大家留言讨论。如有错误之处 也请王争老师和大家多多指点。\t  <br>","like_count":4,"discussions":[{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304033,"discussion_content":"运行过程中，如果获取不到hostName怎么办？不过启动时检测一下，确实时一个好思路","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599456675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1139384,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/b8/bb9657c6.jpg","nickname":"Promise°","note":"","ucode":"0BFDBDAD852D6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304147,"discussion_content":"可以考虑启动的时候就把hostName缓存起来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599480133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304033,"ip_address":""},"score":304147,"extra":""}]},{"author":{"id":2219666,"avatar":"https://static001.geekbang.org/account/avatar/00/21/de/92/659322ad.jpg","nickname":"37.2","note":"","ucode":"3B20A30414BD6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588894,"discussion_content":"缓存起来这个建议我觉得可行，但是和机器启动耦合不是很建议\n即使ID生成器是基础设施服务，逻辑也不建议和机器启动耦合在一起\n但是机器启动后的后置检查可以加上hostName的检查","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664194721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174211,"user_name":"your problem？","can_delete":false,"product_type":"c1","uid":1457464,"ip_address":"","ucode":"6E096E7958CFD7","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/38/6f02a4b9.jpg","comment_is_top":false,"comment_ctime":1580089530,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18759958714","product_id":100039001,"comment_content":"打卡，也祝大家新年快乐，身体健康，另外我始终觉得generateRandomAlphameric这个函数里，随机获取这个写法很不利于性能测试，假如这个函数会被百万，甚至千万次的调用，不可控性也太强了，我觉得可以改成随机生成0-26的数字，对应去加到字母的位置，不知道老师和大家有什么想法吗","like_count":4,"discussions":[{"author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229659,"discussion_content":"搞一个ALPHAMERIC_SET里面，然后随机数生成器生成0-61的数字，按位置取值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586678985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184384,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1583304583,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14468206471","product_id":100039001,"comment_content":"是的,这个代码写的足够健壮性,而且相当完美了,但是我接触的实际开发过程中,其实很多时候,上层系统并不关系ID内部生成是否错误,也不希望因为ID生成错误而导致系统崩溃,于是,一般情况下,我们还是将ID生成器的异常不向外抛出,只是再返回的时候加上错误码,回来查看日志的时候,根据日志时间找到对应异常,再进行分析原因","like_count":3,"discussions":[{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574663,"discussion_content":"是啊   36节就有说过  如果上游不需要知道的异常就自己吞掉就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654237583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177654,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1581465167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14466367055","product_id":100039001,"comment_content":"很多实战的理念我都没有在书上看过，但是想法出奇一致。越来越感觉能和您一起工作，真是不要太幸福","like_count":3},{"had_liked":false,"id":174407,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1580195275,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10170129867","product_id":100039001,"comment_content":"还学到了：<br>1.函数出错时是返回NULL还是异常对象？<br>要看获取不到数据是正常行为，还是异常行为，如果业务上来说是异常行为就抛出异常，反之返回NULL。<br><br>2.是直接返回出错的异常还是重新封装成新的异常？<br>要看函数跟异常是否有业务相关性。相关的话就直接抛出。不相关就包装成与函数相关的异常类型，而且这样也能隐藏实现细节。<br><br>3.NULL值或空字符串在什么时候需要判断？<br>a.如果函数是 private 类私有的，只在类内部被调用，完全在你自己的掌控之下，自己保证在调用这个 private 函数的时候，不要传递 NULL 值或空字符串就可以了。<br>b.如果函数是 public 的，你无法掌控会被谁调用以及如何调用（有可能某个同事一时疏忽，传递进了 NULL 值，这种情况也是存在的），为了尽可能提高代码的健壮性，我们最好是在 public 函数中做 NULL 值或空字符串的判断。<br>c.但是单元测试会测试一些corner case，所以，最好也加上判断。<br><br>4.个人的一点思考<br>如果代码中报的错是受检异常就可以针对具体情况来处理是throws出去、吞掉还是包装新的异常。如果报的错是非受检异常我还是习惯内部自己处理，因为非受检异常throws出去的话，调用方不处理，编译器也不会报错，所以，为了防止调用方未处理的情况，还是自己内部处理吧。","like_count":2},{"had_liked":false,"id":174307,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1580132392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170066984","product_id":100039001,"comment_content":"今天学习了异常代码处理思路。在处理到异常时，通常会将上层关心的异常直接包装成RuntimeException往上抛，没有根据业务域定义相关的自定义异常。通过今天的学习，了解到处理异常的基本思路：是往上抛还是吞掉，主要看调用者是够关心该异常。是否要包装成新的异常主要看调用者是否理解该异常，该异常是否业务相关。如果能理解、业务相关可以直接抛，否则重新包装。<br>在这4节课的持续迭代过程中，除了文章中提到的开发思想，自己总结了如下一些个人想法：<br>1. 科比说过“我现在所做的一切，都是为了追求更加完美” - 缅怀逝去的伟大的科比。我们对生活，工作都要尽量追求完美。<br>2. 人生是个不断重构自己的过程，自己写的代码也要不断持续重构，优化。这样自己才能不断进步。<br>3. 参考优秀的开发思想，方法论，不断地将之实践，总结，改进，逐渐形成合适自己的方法论。","like_count":2},{"had_liked":false,"id":318409,"user_name":"Lingo","can_delete":false,"product_type":"c1","uid":1075334,"ip_address":"","ucode":"82ECA2E0533B78","user_header":"https://static001.geekbang.org/account/avatar/00/10/68/86/348be7f8.jpg","comment_is_top":false,"comment_ctime":1635294896,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5930262192","product_id":100039001,"comment_content":"一个程序员的良好修养<br>1: &quot;总有刁民想害朕&quot;的心态，public方法传参要检验。<br>2: 人格分裂，既要站在上层的方法想是否关心此异常，又要站在下层的方法想是否要抛出此异常。<br>3:高水平甩锅技巧，参数的问题，直接甩给上层让app崩溃，fail first。底层技术问题，要包装一下甩给上层，这个活我干不了。力所能及的问题，自己干了算了，打个warn log，发个免责声明。","like_count":1},{"had_liked":false,"id":305411,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1627962353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5922929649","product_id":100039001,"comment_content":"太受震撼了，原来这么简单的代码都有如此深度的优化空间！","like_count":1},{"had_liked":false,"id":286424,"user_name":"Jerry","can_delete":false,"product_type":"c1","uid":1621616,"ip_address":"","ucode":"9CDB5CFF39E219","user_header":"https://static001.geekbang.org/account/avatar/00/18/be/70/70c71ec6.jpg","comment_is_top":false,"comment_ctime":1617291113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5912258409","product_id":100039001,"comment_content":"自从看了老师的专栏，自己都快走火入魔了，居然不会写代码了。Soga。。。","like_count":1,"discussions":[{"author":{"id":1122533,"avatar":"https://static001.geekbang.org/account/avatar/00/11/20/e5/f66d6144.jpg","nickname":"九先生","note":"","ucode":"A63A333299D485","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386119,"discussion_content":"前半部分是名词，后半部分是动词","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1627432964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2088626,"avatar":"","nickname":"志江","note":"","ucode":"8A07D53769B3C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376555,"discussion_content":"懂的都懂, 不懂的讲了也不懂, 真是功夫到家了, 飞花摘叶皆可伤人,草木竹石均可为剑.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622189798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475423,"avatar":"https://static001.geekbang.org/account/avatar/00/16/83/5f/50f2fdf2.jpg","nickname":"『至爱闫』","note":"","ucode":"2A4F0E0DE6C196","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278717,"discussion_content":"听着有些啰嗦，容易忽略重点。😅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591230508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1500550,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e5/86/932a65e6.jpg","nickname":"兰传富","note":"","ucode":"E15E4B467FDE9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130664,"discussion_content":"老师，得课程会按时更新么，想听听设计模式那块内容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578764699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1735673,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/7b/f9/fdaa8532.jpg","nickname":"渔人码头คิดถึง","note":"","ucode":"036CBA34FED4BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48711,"discussion_content":"这个怎么学，没有视频案例，代码讲解吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573520935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1735673,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/7b/f9/fdaa8532.jpg","nickname":"渔人码头คิดถึง","note":"","ucode":"036CBA34FED4BD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48958,"discussion_content":"有代码的 没视频的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573540005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":48711,"ip_address":""},"score":48958,"extra":""}]},{"author":{"id":1078589,"avatar":"https://static001.geekbang.org/account/avatar/00/10/75/3d/0d6cf519.jpg","nickname":"Holmes","note":"","ucode":"28DD6247AC3908","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47880,"discussion_content":"建议可以补充到文章中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573434461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260990,"user_name":"Henry","can_delete":false,"product_type":"c1","uid":1929375,"ip_address":"","ucode":"7C554C97935443","user_header":"https://static001.geekbang.org/account/avatar/00/1d/70/9f/741cd6a4.jpg","comment_is_top":false,"comment_ctime":1605167770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5900135066","product_id":100039001,"comment_content":"个人认为如果业务层可以接受，获取不到hostname 时用 “UNKNOWHOST” 代替会让代码看起来更简洁些。 ","like_count":1},{"had_liked":false,"id":257243,"user_name":"天马行空","can_delete":false,"product_type":"c1","uid":1740810,"ip_address":"","ucode":"5B019ABAFD1716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/90/0a/4d161db0.jpg","comment_is_top":false,"comment_ctime":1603893107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898860403","product_id":100039001,"comment_content":"非常经典的一个重构实例，一步步演化出优雅的异常处理代码，可以作为培养新人的案例，收藏，受教了。","like_count":1},{"had_liked":false,"id":240828,"user_name":"小川","can_delete":false,"product_type":"c1","uid":1242573,"ip_address":"","ucode":"D462222DDBB978","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/cd/3890be04.jpg","comment_is_top":false,"comment_ctime":1597077846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892045142","product_id":100039001,"comment_content":"针对抛异常这个问题，我举个例子，希望能帮助到大家。<br><br>1. 你是组内的一名开发，你现在做的这个需求，遇到了技术问题，需求需要延期。<br><br>2. 针对你的项目经理而言，因为项目需要延期，他需要针对延期的问题，跟需求方沟通下一步安排。所以他需要知道，这个时候，你就应该把问题抛出去（而不是内部吸收）。<br><br>3. 有的时候可能项目经理不需要知道你的技术等太多细节问题在哪里，所以你就需要把你的技术问题异常，转化为延期异常，抛给你的项目经理。让他自己捕获进行下一步处理。<br><br>总结：<br><br>1. 调用方需要知道异常是，选择抛出异常。<br>2. 不要暴露内部异常细节，对外抛出调用方关心的异常。","like_count":1},{"had_liked":false,"id":235713,"user_name":"可爱的饲养员","can_delete":false,"product_type":"c1","uid":1160213,"ip_address":"","ucode":"A5B6A4A4110E0C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b4/15/2e6716d7.jpg","comment_is_top":false,"comment_ctime":1595158976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890126272","product_id":100039001,"comment_content":"异常处理部分受益良多，一直对如何做好异常处理不解，搜了很多文章感觉都没有讲清楚，这下解惑了，感谢争哥！","like_count":1},{"had_liked":false,"id":229247,"user_name":"田园牧歌","can_delete":false,"product_type":"c1","uid":1737289,"ip_address":"","ucode":"E25C9957D20F8B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/82/49/fd0e68a3.jpg","comment_is_top":false,"comment_ctime":1592929828,"is_pvip":false,"replies":[{"id":"84970","content":"划分模块跟划分类的方法一样，做到高内聚低耦合，职责单一。你可以参考面向对象设计的4个步骤来做模块的定义和划分。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1593309846,"ip_address":"","comment_id":229247,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887897124","product_id":100039001,"comment_content":"看了争哥专栏，受益匪浅，了解了如何评判一个项目、一段代码的好烂，如何写出高质量代码。但我有一个疑问，就是像这种基于接口而非实现的编程方式，在实际的业务项目中如何分包和模块呢？如果是静态方法的小算法我可以放到util包中，比如命名为IdGeneratorUtil.java","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499397,"discussion_content":"划分模块跟划分类的方法一样，做到高内聚低耦合，职责单一。你可以参考面向对象设计的4个步骤来做模块的定义和划分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593309846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225263,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1591698741,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5886666037","product_id":100039001,"comment_content":"【设计模式笔记37】20200609<br>今天主要讲的是如何进行异常处理，给我的启发是不要觉得代码简单扫一眼就觉得没必要重构，或者没问题。应该想的是“好”代码到底是什么样的，多学习好代码就会形成自己的判断，那么首先应该想的是有异常怎么处理，如何处理异常，一般套路就是自己catch异常返回null或者其他对象（总管式），还有一种就是向上抛出，抛出就要考虑抛什么异常了，上层是否应该关心，如果关心就要抛合理的异常，否则抛参数校验的异常，参数合法性检查是为了不合理的参数让上层感知到参数是非法的。特别对于空指针一定要控制好，当你不确定是否为空的时候就加个判空吧。多一层校验稳一点","like_count":1},{"had_liked":false,"id":205587,"user_name":"肖臧","can_delete":false,"product_type":"c1","uid":1047733,"ip_address":"","ucode":"4FAC9FF54DD6A0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","comment_is_top":false,"comment_ctime":1586679468,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881646764","product_id":100039001,"comment_content":"从业务角度上，一个日志ID生成器生成日志失败不应该报告给上级系统吧，上级系统拿着这个异常要怎么处理，总不能中断业务吧。我觉得合理的处理方式：<br>1.吞掉这个异常，记录日志<br>2.使用默认的last_field_of_hostname<br>3.利用日志监控系统，设定监控规则，如果短时间内频繁出错，发送短信&#47;邮件&#47;内部即时通讯工具(slack)给运维人员，人工干预。<br><br>不过如果是其他业务相关的ID，比如：order_id，我觉得抛异常是合理的","like_count":1},{"had_liked":false,"id":174305,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1580130541,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5875097837","product_id":100039001,"comment_content":"我再提一点自己的改进想法：修改后的代码里，generate方法还应该处理掉8这个魔法数字，如果需要让用户定制长度，则需要提供另一个不带默认值的方法，并在generate方法里处理随机方法抛出的参数非法异常","like_count":1},{"had_liked":false,"id":358324,"user_name":"37.2","can_delete":false,"product_type":"c1","uid":2219666,"ip_address":"广东","ucode":"3B20A30414BD6E","user_header":"https://static001.geekbang.org/account/avatar/00/21/de/92/659322ad.jpg","comment_is_top":false,"comment_ctime":1664195121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664195121","product_id":100039001,"comment_content":"关于hostName的获取的建议，是否需要抛异常<br>可以缓存hostName，通过静态代码块在第一次调用该方法时执行获取HostName的值，如果获取不到抛异常，获取到之后可以缓存HostName<br>","like_count":0},{"had_liked":false,"id":354158,"user_name":"钟增","can_delete":false,"product_type":"c1","uid":3049844,"ip_address":"湖南","ucode":"DEB7183422713A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM4rwiaVhPzRLvk7rjFGtk0IrFCsNJiaXaoesB509UzBTyWibazicS7CwpMzvCjj9XGRnjOAic9b4nJDBGg/132","comment_is_top":false,"comment_ctime":1660132323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660132323","product_id":100039001,"comment_content":"getLastFieldOfHostName()方法和getLastSubstrSplittedByDot()方法都有判断hostname是否为空，按照调用关系这样不符合DRY原则哦！","like_count":0},{"had_liked":false,"id":348304,"user_name":"范特西","can_delete":false,"product_type":"c1","uid":1359210,"ip_address":"","ucode":"6F57092D832D7F","user_header":"https://static001.geekbang.org/account/avatar/00/14/bd/6a/abe84a16.jpg","comment_is_top":false,"comment_ctime":1654948526,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654948526","product_id":100039001,"comment_content":"在函数最前面对参数进行判断属于「防御式编程」，可以利用Guava包的Precondition工具","like_count":0},{"had_liked":false,"id":324569,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638502966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638502966","product_id":100039001,"comment_content":"总结一下 这个异常怎么处理看怎么使用这个，如果上层需要感知异常，则需要一路抛上去 从generate开始抛出那么意味着所以generate依赖的函数都得做到相应的更改 <br> <br>看了下评论，我个人觉得即使是private也要做好基础的校验. <br>由于主要是用go 所以err都会往上抛","like_count":0},{"had_liked":false,"id":319111,"user_name":"Java知其所以然","can_delete":false,"product_type":"c1","uid":1085200,"ip_address":"","ucode":"DC17FC7A7E42D1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/10/f9151d58.jpg","comment_is_top":false,"comment_ctime":1635590736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635590736","product_id":100039001,"comment_content":"多积累一些平时在业务系统中看到的 &quot;坏&quot; 代码，然后利用这个课程学到的理论去反复思考、分析，这样才能把这些理论真正的用好，而不是会用。","like_count":0},{"had_liked":false,"id":315700,"user_name":"慕言","can_delete":false,"product_type":"c1","uid":2731028,"ip_address":"","ucode":"4918FA682F3895","user_header":"https://static001.geekbang.org/account/avatar/00/29/ac/14/a8ff8fec.jpg","comment_is_top":false,"comment_ctime":1633946300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633946300","product_id":100039001,"comment_content":"我觉得RandomIdGenerator类唯一对外提供的generate方法是生成一个随机ID，外部调用方并不清楚生成ID的过程会获取机器的hostname，所以这种情况下，generate函数的实现上可以考虑加入容错处理，即在hostname获取不到的情况下，使用其他字符替代，比如随机字符等，这种情况下，generate函数就可以把UnknownHostException内部吞掉了。","like_count":0},{"had_liked":false,"id":310405,"user_name":"EveryDayIsNew","can_delete":false,"product_type":"c1","uid":1316926,"ip_address":"","ucode":"776B81EF6830FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/18/3e/f8632713.jpg","comment_is_top":false,"comment_ctime":1630642536,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630642536","product_id":100039001,"comment_content":"这个入参校验正常不应该越放外层越好吗，要是类似底层反腐层都需要做入参校验就会很冗余繁琐。","like_count":0},{"had_liked":false,"id":307439,"user_name":"Geek_b7eb88","can_delete":false,"product_type":"c1","uid":1573715,"ip_address":"","ucode":"0EB46381D9B1CB","user_header":"","comment_is_top":false,"comment_ctime":1629102412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629102412","product_id":100039001,"comment_content":"getLastSubstrSplittedByDot 函数中抛出的运行时异常，由于是非必要受检的，所以上层代码中没有体现出来捕获到的处理。这么理解没错吧？","like_count":0},{"had_liked":false,"id":300875,"user_name":"Molyt","can_delete":false,"product_type":"c1","uid":2283490,"ip_address":"","ucode":"9CCF7A18B2C547","user_header":"https://static001.geekbang.org/account/avatar/00/22/d7/e2/5e5cc8f3.jpg","comment_is_top":false,"comment_ctime":1625412540,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625412540","product_id":100039001,"comment_content":"重构后的getLastFieldOfHostName()的hostName ，有捕获异常后，且getLastSubstrSplittedByDot()有做空判断，这里还需要再做判断吗？刚入门，有点疑惑：<br><br> 我们在使用这个函数的时候，自己也要保证不传递 NULL 值或者空字符串进去。所以，getLastFieldOfHostName() 函数的代码也要作相应的修改。修改之后的代码如下所示：<br>private String getLastFieldOfHostName() throws UnknownHostException{<br>    String substrOfHostName = null;<br>    String hostName = InetAddress.getLocalHost().getHostName();<br>    if (hostName == null || hostName.isEmpty()) { &#47;&#47; 此处做判断<br>      throw new UnknownHostException(&quot;...&quot;);<br>    }<br>    substrOfHostName = getLastSubstrSplittedByDot(hostName);<br>    return substrOfHostName;<br> } <br>","like_count":0},{"had_liked":false,"id":289961,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1134539,"ip_address":"","ucode":"11C598D0723D08","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/cb/ede92cd5.jpg","comment_is_top":false,"comment_ctime":1619278547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619278547","product_id":100039001,"comment_content":"错误处理值得借鉴","like_count":0},{"had_liked":false,"id":286064,"user_name":"Geek_86eac6","can_delete":false,"product_type":"c1","uid":1787022,"ip_address":"","ucode":"8C02E398CC6A35","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4CBQHuLDWOdicOl1elTdSicqMyY1s5JDWXiaHsSk0VSWaVe0U6CTo701ZGz9h6MvibsAGKnvVq7xxFw/132","comment_is_top":false,"comment_ctime":1617148627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617148627","product_id":100039001,"comment_content":"面对复杂的需求，先做最小化实现，写出满足功能的代码。  然后再逐步重构。","like_count":0},{"had_liked":false,"id":280490,"user_name":"倡印","can_delete":false,"product_type":"c1","uid":1455958,"ip_address":"","ucode":"4F53AA5D017D89","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","comment_is_top":false,"comment_ctime":1614234047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614234047","product_id":100039001,"comment_content":"让我重新了解了 写好代码 是需要有完整的理论基础 和实践的。并且思考框架要全面完整，操作执行要有序执行 有理论依据也要有实践意义","like_count":0},{"had_liked":false,"id":275738,"user_name":"Geek_cca021","can_delete":false,"product_type":"c1","uid":2209611,"ip_address":"","ucode":"09675F01BB895E","user_header":"","comment_is_top":false,"comment_ctime":1611655284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611655284","product_id":100039001,"comment_content":"获取hostname 可能在类初始化的时候获取更有优势。","like_count":0},{"had_liked":false,"id":269606,"user_name":"吴月月鸟","can_delete":false,"product_type":"c1","uid":1115064,"ip_address":"","ucode":"2F068EDD166B49","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/b8/961a5342.jpg","comment_is_top":false,"comment_ctime":1608713993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608713993","product_id":100039001,"comment_content":"不是我吹，这个专栏文章反复看，时看时新。","like_count":0},{"had_liked":false,"id":265716,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1606990866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606990866","product_id":100039001,"comment_content":"打卡：用Java在之前的案例基础上做了进一步优化练习。","like_count":0},{"had_liked":false,"id":264245,"user_name":"Kelly.W","can_delete":false,"product_type":"c1","uid":1518308,"ip_address":"","ucode":"6EFB58A24355C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/2a/e4/714ffd01.jpg","comment_is_top":false,"comment_ctime":1606389750,"is_pvip":false,"replies":[{"id":"96077","content":"嗯嗯 ","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700629,"ip_address":"","comment_id":264245,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1606389750","product_id":100039001,"comment_content":"开发能用的代码可能会很快也比较简单。但想要开发出优秀的代码，就需要投入比较多的精力，一轮轮来优化。<br>能用的代码和优质代码之间最大的区别就在于细节，像这节课中讲到的异常抛出，特殊值处理等等都是细节。<br>这就是60分和100分的差别。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510478,"discussion_content":"嗯嗯 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259717,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1604818540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604818540","product_id":100039001,"comment_content":"收获很大！","like_count":0},{"had_liked":false,"id":258898,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1604577899,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604577899","product_id":100039001,"comment_content":"看着优秀代码长出来的过程，比单纯看优秀代码更能学到东西。<br>边界条件的处理依赖定义，如果是定义外的异常情况，则抛出异常，否则返回Null或约定的默认值。<br>如果是上层不关注的异常，则直接“吞掉”，返回默认结果。<br>如果是上层关注和理解的异常，重新抛出去，如果不理解的话，按照上层能理解的描述重新包装一下再抛出去。<br>“作为一名程序员，起码对代码要有追求啊，不然跟咸鱼有啥区别！” 共勉！","like_count":0},{"had_liked":false,"id":247850,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1599892284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599892284","product_id":100039001,"comment_content":"酒肉（知识）穿肠过，佛祖（一丢丢）心中留","like_count":0},{"had_liked":false,"id":237185,"user_name":"御风","can_delete":false,"product_type":"c1","uid":1812807,"ip_address":"","ucode":"51C8212BE06364","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","comment_is_top":false,"comment_ctime":1595731698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595731698","product_id":100039001,"comment_content":"学到了异常处理方式，该吞掉还是抛出，该抛出还是re–throw。<br>目前公司项目中随处可见使用Assert断言检验参数和抛出异常，看上去很简洁，但有些地方考虑地不够细","like_count":0},{"had_liked":false,"id":235462,"user_name":"大方方","can_delete":false,"product_type":"c1","uid":1354013,"ip_address":"","ucode":"621AD8F1485753","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6cyOoRd2dROgiblAJkW6RLhUyH1wwU0NNibIIuV930eQ9TiaNT41K61kBSVkvYoDYg7mJtuEoCQY1awBmV0WW6BFg/132","comment_is_top":false,"comment_ctime":1595045369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595045369","product_id":100039001,"comment_content":"写异常处理写的不多 大多都偷懒做个Null 判断然后  debug.loogErro()  ;return; 了事， 通过这两节学到了很多正规严谨的做法。","like_count":0},{"had_liked":false,"id":234056,"user_name":"心动","can_delete":false,"product_type":"c1","uid":1239268,"ip_address":"","ucode":"4024B7EC525BC1","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/e4/ea6b9015.jpg","comment_is_top":false,"comment_ctime":1594567007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594567007","product_id":100039001,"comment_content":"写的很好，回想项目中的一些情况确实这种处理比较好，优秀的开源框架也是这样设计的","like_count":0},{"had_liked":false,"id":228844,"user_name":"考拉出山","can_delete":false,"product_type":"c1","uid":1303954,"ip_address":"","ucode":"917E35FD7B2D06","user_header":"https://wx.qlogo.cn/mmopen/vi_32/1mOvT5fApeicXppMP3zADG6XIPicNt5D9dL6y46SF5UUcH0hicG21LM6xSgHJj5oAdzCyeGtLZYHYmlvaFwecrGOA/132","comment_is_top":false,"comment_ctime":1592823016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592823016","product_id":100039001,"comment_content":"IdGenerationFailureException这个异常可以扩大到整个generate  try catch。  这样使用应该也可以。底层往上抛，出口转换封装","like_count":0},{"had_liked":false,"id":228565,"user_name":"Clear","can_delete":false,"product_type":"c1","uid":1110680,"ip_address":"","ucode":"AD768DB7654F7B","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/98/e2c92588.jpg","comment_is_top":false,"comment_ctime":1592736837,"is_pvip":false,"replies":[{"id":"84387","content":"会，但为了清晰、易于理解，多几个异常也未尝不可啊<br>","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1592831657,"ip_address":"","comment_id":228565,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592736837","product_id":100039001,"comment_content":"王老师好，我有一个问题： 根据函数是否关心异常类型，来判断异常是否需要转换抛出，会不会导致需要新增很多异常的类呢。<br>","like_count":0,"discussions":[{"author":{"id":1205294,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/2e/e70a317a.jpg","nickname":"学好习，做好人","note":"","ucode":"C991643DB458E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48135,"discussion_content":"用Java语言来举例，泛化属于类的继承关系，即关键字extends,实现是实现接口  ，即关键字implements ，依赖，关联，聚合，组合可以认为是一样的东西，只不过对象之间的关系程度不一样。依赖的关系最弱，比如某个对象作为另一个对象方法的一个参数存在。关联是一种强依赖关系，比如一个对象作为另一个对象的全局变量，聚合是比关联关系更强的一种依赖，强调的是部分与整体的关系，组合是最强的依赖关系，强调的也是部分与整体，但是整体的生命周期结束了，部分也不存在了，举个工作的例子：我中午去吃了一碗面，那我我与面馆服务员可以理解为一个简单的依赖关系；我与一个部分的同事算是关联关系；部门与员工之间是聚合关系，部门不在了，员工作为一个实体依然存在。我的脑子与我本人是组合关系。不知道这样理解对不对？","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1573452015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49127,"discussion_content":"下班后发现争哥让我出代码示例和说明区别，赶紧做。\n写点简单粗暴的个人理解。\n一 show me the code ..\n泛化（Generalization）class BaseComponent { ... } class Dingdding extend BaseComponent { .. }\n实现(Realization) 类实现接口 虚线加三角interface crud { func create(); func update();func get(); func() del{ } }\nclass DingdingModel implements crud {\nfunc create(){ ...}\nfunc update(){ ...}\nfunc get(){ ...}\nfunc del(){ ...}\n}\n关键是后面四个 （关联，聚合，组合，依赖）先说关联关系。 （A has B）\nclass DingdingUser {\nprivte $account; //有一个账号对象，\n}\n再说聚合，是一种特殊的关联。\n聚合，组合， 一对多的关联\n聚合关系是“has-a”关系，组合关系是“contains-a”关系，少一个宿主对象死掉没。\numl2.x 已合并这种无聊的区分\n聚合示例class birdsGroup(){\nprivate $birds;\n//聚合往往可以干增减相关的操作\npublic func addBird( $bird) { ... }\npublic func removeBird( $bird) { ... }\n}\n组合示例。class bird (){public $wing; //鸟由翅膀 组成.\n}\n最后说关联合依赖。\n泛化 = 实现 > 组合 > 聚合 > 关联 > 依赖\n2 然后说些个人理解：我回顾了一下，oop 的过程。\n在框架的辅助下，数据库建模一作，其实文件放哪，啥关系就出来了，画uml 图反而了一个体力活。\n往往是去实现一个需求，将一个业务流走通，写了一段代码后，发现这里写死了，于是做点配置管理（中心控制原则） ，一个类权责过多，于是将其支解。（类的单一职责原则），重复的代码出现了不符dry 了，赶紧抽离出来，先简单粗爆的用一个类的静态方法抽（很多大神不建议这样做，我不明其理，慢慢研究）， 某个操作，有几种不同的类可以去做实施。例如日志。（redis 写日志，文本日志，数据库日志，控制台输出） 于是搞个工厂模式，遵守下dip原则，让Log::log($log_msg, $type,$tags) 成为一种面向抽象开始，而不是面向具体实现。老板看到gmail 的undo 很酷闲着蛋疼的让你对所有操作 ，都要求在半分钟类允许undo ，上个command 应付下，不出意外 没多久，老板的redo 需求来了，就顺着扩展 ，进一步的有时候，一个主体业务完成后，要做一堆关联的杂七杂八的事，于是搞个观察者模式，这样将主体业务和后序操作业务解耦了。 既然扯到解藕(decouple)了, 我粗浅的来看，折腾设计模式，本质是解藕，找到合适的方法，在合适的场景下做对应的解藕操作。\n这么一折腾下来，类和类啥关系，好像压根没太在意到。。。。 但类之前又确实有关系 。 挺想想知道其它伙伴们是如何做oop 的。\n自我总结，套路包确实掌握了几个，但总感觉是在很浅的层面上折腾，上述错的乱七八糟的，烦请指正，个人平时就这么想的，这八个月就跟着争哥好好学习了。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1573558535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2084201,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/cd/69/f2c9cdbe.jpg","nickname":"null","note":"","ucode":"78879DEE2B92DE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294040,"discussion_content":"评论很精彩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595768234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":49127,"ip_address":""},"score":294040,"extra":""},{"author":{"id":2479257,"avatar":"https://static001.geekbang.org/account/avatar/00/25/d4/99/2f842710.jpg","nickname":"dr4Utopia","note":"","ucode":"F6FC0FCD85A142","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355423,"discussion_content":"解藕可还行，不服dry我是真不懂啥意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615430096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":49127,"ip_address":""},"score":355423,"extra":""}]},{"author":{"id":2766883,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/38/23/4556004f.jpg","nickname":"包包","note":"","ucode":"C840BB4E46C6FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394112,"discussion_content":"很赞同作者对UML的观点，任何东西都是有成本的，当成本大于效益的时候，你就得作取舍，这也是我很欣赏作者的地方，只有融汇消化过知识的人才敢作取舍，试想一个只会照本搬书的人，你让他说一句UML不那么必须，他敢吗？肯定不敢，因为他都没有真正明白UML是什么，可以用来解决什么，怎么用，无非是学了UML几个专有名词罢了。\nUML只是一个拿来沟通的工具，目的是用它来承载面向对象、设计模式等思想的表达沟通，以此达到互相交流的目的。打个比方，有一些事情，你可以通过打手势就可以互相沟通，但是你说你得创造一门语言，然后学会这门语言，并且把这个语言用在任务中，同时还要让身处这个任务中的其他同伴也学会这门语言，好不好？当然好！优点无穷多，但代价是什么，成本！如果我用打手势就能沟通交流完成任务，即使它没有语言的保存、继承性等众多优点，但核心点它完成了任务，且成本几乎为0。\n一句话，时间多，精力足，掌握UML是锦上添花，但它不是必要，什么是必要，就是没它你就不行！","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1631737698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2088250,"avatar":"","nickname":"Geek_190be9","note":"","ucode":"41F416C8CFAB5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294846,"discussion_content":"泛化：中文意思就是由具体的到一般的，也就是实现类指向抽象类或类，比如我是一个人，我到人就是具体到一般的一个过程。\n实现：这个很好理解啊，我经过锻炼实现了空翻的技能，也就是空翻就是一个接口，我锻炼后就实现了空翻技能，同样我也可以有舞蹈的技能等等。\n组合：这个更好理解，我是由心肝脾胃肾组合在一起形成的。\n聚合：关键在聚这个字上，就是聚在一起呗，一群人去参加party，个人与party就是聚合关系对吧，现在疫情期间尽量不要聚集。\n关联和依赖我想放在一起说，他俩才是真正难区分的，依赖就是你和你老婆好的时候你可以依赖她，分了就不依赖了呗，关联就是你和你的选课表的关系","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1596014958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2088250,"avatar":"","nickname":"Geek_190be9","note":"","ucode":"41F416C8CFAB5F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391280,"discussion_content":"我自己的体会是，说起来简单，设计类、画图的时候挺痛苦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630387251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":294846,"ip_address":""},"score":391280,"extra":""}]},{"author":{"id":1600615,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6c/67/07bcc58f.jpg","nickname":"虹炎","note":"","ucode":"9E28ACEBFB26D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":235744,"discussion_content":"现在搞得清，继承，接口，关联关系，依赖关系，继承关系，聚合关系，组合关系。《大话设计模式》讲得很好。如果搞不清楚，自己画一遍就好了。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1587048028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1454570,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/w5NYxo0AINI1oDHswCXfUmXpwENbiaKibFiaF8x1CMf0QH5HNqAQj9icIkCkzkoN3xWS1ibAg6ILTFGrPSsCicicmWD9A/132","nickname":"薛锦辉","note":"","ucode":"5535B75604813F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292657,"discussion_content":"现在公司都要求文档化，程序员的离职率是很高的，有一个统一标准的UML对于软件开发的持久性是很有好处的，防止因人员流失而导致后人看不懂前人的代码和设计。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1595297670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1737845,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/84/75/e3e5072d.jpg","nickname":"JM","note":"","ucode":"5CCCD7D0811A54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48161,"discussion_content":"非常赞同，真的没有必要，我之前有想把那些箭头关系背下来，几天之后又忘了，还不如直接写 implement extend  has a is a之类的表示关系。\n","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1573455135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1428828,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","nickname":"岁月如歌","note":"","ucode":"1AEBD6F79941B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48016,"discussion_content":"UML图虽非重点 但学习还是有必要  希望争哥能在文末给出一些学习参考资料 或者 做一篇加餐😊","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1573441779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330781,"discussion_content":"原来学过UML，工作几年全忘了，重来没用用到过。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1606707047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1081310,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7f/de/7d17e15b.jpg","nickname":"冰封无名","note":"","ucode":"EB212C047FD415","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":131994,"discussion_content":"这几个关系搞懂还是很容易，只是要花点时间，虽然不是经常用，但开发核心功能肯定会用，这个图都画不出来或者理解不了，别人怎么确定你的理解没问题，双方理解是一致的？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578877598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024294,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","nickname":"null","note":"","ucode":"F9039EFED6B55D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":84668,"discussion_content":"搞不定，看到实线、虚线、空心箭头、实心箭头，一个头八个大！","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576504017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1270666,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLibEOeFibyr9xHD7yicAxw8OH5PKB1VUkc54xJB7iczHT0hv82X7E9pCBylxRIT733YyHUXLicr0Yvdgw/132","nickname":"xaresx","note":"","ucode":"7A16B87D42CB27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47990,"discussion_content":"我为了记住这些 花了好些时间！","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573440439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1315934,"avatar":"https://static001.geekbang.org/account/avatar/00/14/14/5e/25f5f8a8.jpg","nickname":"啸风","note":"","ucode":"6DBCA0EC5D4085","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48995,"discussion_content":"https://mp.weixin.qq.com/s/7ZlZKWr-98fIXfPEZOGaMA   来自潘加宇老师的不同观点 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573545414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1315934,"avatar":"https://static001.geekbang.org/account/avatar/00/14/14/5e/25f5f8a8.jpg","nickname":"啸风","note":"","ucode":"6DBCA0EC5D4085","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49093,"discussion_content":"我都懒的看他写的 ","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1573553739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":48995,"ip_address":""},"score":49093,"extra":""},{"author":{"id":1201998,"avatar":"https://static001.geekbang.org/account/avatar/00/12/57/4e/302bfe22.jpg","nickname":"啊波次的额佛哥～","note":"","ucode":"6F31255207CB17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1315934,"avatar":"https://static001.geekbang.org/account/avatar/00/14/14/5e/25f5f8a8.jpg","nickname":"啸风","note":"","ucode":"6DBCA0EC5D4085","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49782,"discussion_content":"我觉得这篇文章有点断章取义，我觉得老师表达的意思是UML对于专栏不需要，学员不一定会懂，毕竟专栏侧重点不是建模，而且这个不是讲给CTO的。而文章说的是业务建模在工作中是否重要。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1573635992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":48995,"ip_address":""},"score":49782,"extra":""},{"author":{"id":1069206,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/96/18612c89.jpg","nickname":"克","note":"","ucode":"6DDFBB05E0F4E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":74874,"discussion_content":"是为什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575699882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":49093,"ip_address":""},"score":74874,"extra":""}]},{"author":{"id":1019848,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/c8/57ab59e3.jpg","nickname":"Min","note":"","ucode":"3047A2287F1466","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401319,"discussion_content":"实际上在大部分场景下你理解泛化、关联、依赖就可以了，其他几种如果能搞定最好，实在搞不定用以上三种大部分场景也不会对实际的问题产生很大影响。但有了这个工具就有了沟通的基础，很多情况你说半天不如一个简单的图来的快，但图要说清楚必须要有标准，与其费大力气发明一个逻辑自洽的系统，不如用现成的。\n泛化表示的是细分，在很多领域都有相关的说法，细分则意味着职责变明确了，继承、实现都是泛化的泛化。\n关联表达两个实体之间的关系，应该无需赘述了吧。\n依赖、聚合、组合实际是关联的一种泛化，职责更明确了，而依赖所表达的意图在实际应用场景中更多且有比较大的价值。\n希望能对你有帮助","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633622765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2756459,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/0f/6b/18b7d714.jpg","nickname":"Yearn","note":"","ucode":"40CEF1BEE35DDB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392006,"discussion_content":"上课的时候老师需要考UML的知识，东西确实挺多。同学们之间大家都懂UML，用UML讨论起来感觉也不错。看了这个简化的UML，对以前UML的认知更加加深，挺好的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630762944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1069206,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/96/18612c89.jpg","nickname":"克","note":"","ucode":"6DDFBB05E0F4E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74686,"discussion_content":"不然用什么表现关系？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575660041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1069206,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/96/18612c89.jpg","nickname":"克","note":"","ucode":"6DDFBB05E0F4E9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391281,"discussion_content":"作者说了，“不按标准来”“简化”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630387294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":74686,"ip_address":""},"score":391281,"extra":""}]},{"author":{"id":1342184,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7a/e8/0930b207.jpg","nickname":"文文小杰","note":"","ucode":"1D38ED443007AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72654,"discussion_content":"我们大学里专门开了这门课(⊙o⊙)…但是现在工作了，确实按里面的画的少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575511950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625618,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ce/12/1488e361.jpg","nickname":"小明","note":"","ucode":"5A0357E9849226","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50585,"discussion_content":"我司组织上过潘老师的UML的课程，个人感觉确实不好掌握，学习成本较高，但觉着在分析阶段合理的使用uml的时序图、类图等还是有助于来理解需求 做出最好的设计","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573736910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48943,"discussion_content":"主要是觉得类之间的聚合，组合，依赖，关联这几种关系的概念太微妙了，感觉是一个意思，太难区分了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573539005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":48955,"discussion_content":"说的没错哦 即便区分得清也没啥实践意义 对编程开发帮助不大 后面会讲到的","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1573539957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":48943,"ip_address":""},"score":48955,"extra":""}]},{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48663,"discussion_content":"用啥箭头我不清楚，但这几个关系，写代码时必须搞的明明白白。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573519184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48689,"discussion_content":"讲一讲他们的区别和在代码上如何体现的呗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573520360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":48663,"ip_address":""},"score":48689,"extra":""}]},{"author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48217,"discussion_content":"争哥，如果有时间的话，能否写一篇你在工作中是如何使用的，相当于是一种经验的交流吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573465112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1193874,"avatar":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","nickname":"授人以🐟，不如授人以渔","note":"","ucode":"BD53829E924B66","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":48309,"discussion_content":"专栏实战篇会讲到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573472589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":48217,"ip_address":""},"score":48309,"extra":""}]}]},{"had_liked":false,"id":225406,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1591751632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591751632","product_id":100039001,"comment_content":"为何要抛出受检查异常呢    上节说可恢复的异常尽量抛受检查      不太理解","like_count":0},{"had_liked":false,"id":218386,"user_name":"炫炫","can_delete":false,"product_type":"c1","uid":1358609,"ip_address":"","ucode":"FDC7A0C6E08B02","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/11/7069b8eb.jpg","comment_is_top":false,"comment_ctime":1589793407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589793407","product_id":100039001,"comment_content":"1.处理异常 2.边界值检查 3.防御性代码","like_count":0},{"had_liked":false,"id":215364,"user_name":"金胖子","can_delete":false,"product_type":"c1","uid":1045261,"ip_address":"","ucode":"132386ECB4D407","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/0d/6caad172.jpg","comment_is_top":false,"comment_ctime":1588982312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588982312","product_id":100039001,"comment_content":"终于对异常体系的编排和处理有了深刻理解，知其然更知其所以然，感谢争哥","like_count":0},{"had_liked":false,"id":207956,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1587222490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587222490","product_id":100039001,"comment_content":"关于异常，怎么处理，我觉得见仁见智把，其实关于整体业务考虑还会有第三方调用，这个时候，第三方调用的错误，就是优先返回空数组，对象则返回空对象，但是就不适合抛出异常，因为这段是公用代码，要看业务如何处理了","like_count":0},{"had_liked":false,"id":206836,"user_name":"这得从我捡到一个鼠标垫开始说起","can_delete":false,"product_type":"c1","uid":1272321,"ip_address":"","ucode":"2FF4347B4E7A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/01/d9cb531d.jpg","comment_is_top":false,"comment_ctime":1586943232,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586943232","product_id":100039001,"comment_content":"IllegalArgumentException 这个运行时异常为什么不和可检测异常一起处理，而是抛到了更上层","like_count":0},{"had_liked":false,"id":196665,"user_name":"成活","can_delete":false,"product_type":"c1","uid":1734795,"ip_address":"","ucode":"F8840EE4DC3969","user_header":"https://static001.geekbang.org/account/avatar/00/1a/78/8b/421cb2c4.jpg","comment_is_top":false,"comment_ctime":1585301229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585301229","product_id":100039001,"comment_content":"专栏受益匪浅，手动点赞","like_count":0},{"had_liked":false,"id":195889,"user_name":"song","can_delete":false,"product_type":"c1","uid":1125245,"ip_address":"","ucode":"4A8FECAD2BE795","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/7d/6febeabe.jpg","comment_is_top":false,"comment_ctime":1585221563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585221563","product_id":100039001,"comment_content":"hostName == null || hostName.isEmpty()   判断 是否需要 改用 org.apache.commons.lang3.StringUtils 工具类  来判断","like_count":0},{"had_liked":false,"id":190503,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1584665519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584665519","product_id":100039001,"comment_content":"真的是内功不够，理论知识不扎实","like_count":0,"discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51482,"discussion_content":"可能有些同学觉得上面给的cheatsheet太简单了，希望更深入的学习一下，我又添加了3篇关于UML的介绍，一口气学个够！Enjoy!\nhttps://github.com/gdhucoder/Algorithms4/tree/master/designpattern/pic\n下面是短链接，和上面的一样，可能需要翻墙才能访问。\nhttps://tinyurl.com/rae8t9l","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1573882055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1488601,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","nickname":"红豆成香","note":"","ucode":"FB8FBB639B4BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352027,"discussion_content":"可惜英文看不懂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614579118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330784,"discussion_content":"cheatsheet图挂了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606707179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1281834,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/yjPribEvEjfucxIXMz37icztGulgcuBAEQllOWKypiamntLLxkRIb20L7CQ2MVJxSt2KpyXW4dLpgL9YjbkDe9pAQ/132","nickname":"sanyu.h","note":"","ucode":"E4851BF6E2FB17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537861,"discussion_content":"🐎🐎🐴","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639229345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334512,"discussion_content":"enjoy ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607869788,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","nickname":"o0oi1i","note":"","ucode":"D1F6AD4AAEAFBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215657,"discussion_content":"感谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585367536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189408,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1584512982,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584512982","product_id":100039001,"comment_content":"知易行难，需要大量的经验积累。","like_count":0},{"had_liked":false,"id":189278,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1584495143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584495143","product_id":100039001,"comment_content":"代码设计，不仅仅是实现功能，更要考虑复用，和容错。<br>还需要考虑调用方的感受。要让调用方无感知地调用方法。<br>还要考虑到各种各样的意外情况。<br>甚至还需要考虑可测试性。<br>设计一套完美的代码还真是不简单。","like_count":0},{"had_liked":false,"id":185425,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1583581518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583581518","product_id":100039001,"comment_content":"我觉得对于写的每个方法都要做下参数判断。因为只有做了参数校验，最终顺利通过的参数能才能生成我们想要的目标值。如果方法内做一些降级服务策略，我觉得会导致方法的会偏离设计的目标值。","like_count":0},{"had_liked":false,"id":185373,"user_name":"我的黄金时代","can_delete":false,"product_type":"c1","uid":1062070,"ip_address":"","ucode":"D7825B45B372F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/34/b6/0feb574b.jpg","comment_is_top":false,"comment_ctime":1583569301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583569301","product_id":100039001,"comment_content":"我觉得完全没有必要去把这个异常抛给上层，因为你的方法提供的是ID的生成，就算把这个异常抛出去，调用方也不会进行处理，而且还有可能还需要自己去生成一个新的ID。","like_count":0},{"had_liked":false,"id":185077,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583479216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583479216","product_id":100039001,"comment_content":"老师，有个疑问，<br>generate()方法中已经抓取IdGenerationFailureException异常了，为什么再方法上，还要再抛出去呢？<br>我一般写MVC 三层架构，一般是在service,repository中向上抛异常，在controller中抓取异常处理返回，我这种风格是不正确的么？<br>","like_count":0},{"had_liked":false,"id":185018,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583466174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583466174","product_id":100039001,"comment_content":"打算把这四节课代码重新敲一遍，重新思考一遍","like_count":0},{"had_liked":false,"id":184676,"user_name":"我已经设置了昵称","can_delete":false,"product_type":"c1","uid":1364034,"ip_address":"","ucode":"ED672C5EBDBDC4","user_header":"https://static001.geekbang.org/account/avatar/00/14/d0/42/6fd01fb9.jpg","comment_is_top":false,"comment_ctime":1583380802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583380802","product_id":100039001,"comment_content":"个人认为，host拿到为空，并不需要抛异常，因为即使为空，也不会影响到主要业务，我们的需求只是为了查日志调用链。应该让他继续跑下去，哪怕是null-xxxx-xxx这样的traceId，能用来查询日志即可。","like_count":0},{"had_liked":false,"id":183515,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1583056685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583056685","product_id":100039001,"comment_content":"最近四篇的文章非常有意义，一口气读下来，醍醐灌顶。<br><br>最大的感悟是，编程语言的语法是非常灵活的，像异常处理那样，谁都可以用，但要用好还需要很多的约定，能用好的话对程序的各方面都是非常好的。<br><br>明显感觉到：初级程序员和高级程序员在对编程理解上的差异。希望自己可以努力向高阶进化，编写出一段段优质的代码，供别人使用。","like_count":0},{"had_liked":false,"id":182757,"user_name":"请叫我和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1582860622,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1582860622","product_id":100039001,"comment_content":"但是现在还是有一个疑问，关于在throw异常之前，是不是需要打一个log，这个log的级别又应该是error还是info、warn、debug？","like_count":0},{"had_liked":false,"id":182245,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1582733309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582733309","product_id":100039001,"comment_content":"很赞。唯一有不同意见的点是generate方法中生成失败的时候会抛异常。<br>按照这样设计我有两点疑问：<br>1. throw new IdGenerationFailureException(&quot;...&quot;, e);  这一句中的异常信息应该写什么呢？貌似只能写“Id generation failed.”，因为“HostName获取失败”这个原因太过底层，是上层不关心的；<br>2. 上层调用方遇到IdGenerationFailureException的时候又应该如何处理呢？又得调用另一个IdGenerator吗？","like_count":0},{"had_liked":false,"id":179101,"user_name":"岁月","can_delete":false,"product_type":"c1","uid":1337598,"ip_address":"","ucode":"29A2A2BC3C4FE4","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","comment_is_top":false,"comment_ctime":1581915018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581915018","product_id":100039001,"comment_content":"generateRandomAlphameric 这个方法重构之后户抛出异常, 但是函数签名没有写抛出异常, 是不是写错了呢?","like_count":0},{"had_liked":false,"id":177299,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1581344037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581344037","product_id":100039001,"comment_content":"让自己独立去思考。还真想不到这么细。<br>1. 这里毕竟深刻的一点是getLastSubstrSplittedByDot做了null的判断之后，上层调用getLastFiledOfHostName里面的hostname,一般情况我就不判断了。因为我不管你来什么。我都可以处理。但是这样对业务的异常就不明确。更明确的做法就是外面再判断确保不传进来。但是我在想如果外层不判断，是不是更利于代码的可读性。否则感觉有点重复。","like_count":0},{"had_liked":false,"id":176543,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1581083469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581083469","product_id":100039001,"comment_content":"从这个迭代重构的过程中，你还学到哪些更有价值的东西？<br>学会了分析过程和思想道理,咸鱼与高手的本质区别,<br>学到了学习的目的是为了代码写得更好;<br>还学习到了争哥的思维分析过程,先分析出存在的各类情况,哪些不会出问题,哪些会出问题,会出问题的再根据实际需求怎样处理会更好,以及这样处理好在哪里,又有什么弊端,辩证深入领悟问题,并寻找更优解;<br>还学会了怎样将编程思想理论落实的实践,更深入理解编程思想精髓;<br>还懂得了人生的哲理,有些道理早领悟,有些技能早掌握就可以享受更长时间的复利价值.<br>编程一代宗师,唯我王争哥!!!","like_count":0},{"had_liked":false,"id":176536,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1581082807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581082807","product_id":100039001,"comment_content":"问题<br>重构之后的 RandomIdGenerator 代码的generate()代码中,对于generateRandomAlphameric(8)该把IllegalArgumentException封装成抽象的业务异常IdGenerationFailureException,不要将底层实现暴露给上层代码,不然这里就违背了面向抽象而非实现编程的原则.","like_count":0},{"had_liked":false,"id":176008,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1580910195,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580910195","product_id":100039001,"comment_content":"争哥你好，有两个问题想请教：<br>1、类中的私有成员变量在重构后，貌似没被用到了，那是否意味着可以干掉？<br>2、generate方法抛出的是编译时异常，那为了不影响正常的业务逻辑执行，调用它的方法都应该捕获它吧？这样就会有比较多处理异常上的冗余代码，有什么方法可以减少这类代码呢？","like_count":0},{"had_liked":false,"id":175398,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1580705510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580705510","product_id":100039001,"comment_content":"太棒了，打卡！","like_count":0},{"had_liked":false,"id":175268,"user_name":"Epimoni","can_delete":false,"product_type":"c1","uid":1067388,"ip_address":"","ucode":"F0107A267A6605","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/7c/9fa4f466.jpg","comment_is_top":false,"comment_ctime":1580636274,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1580636274","product_id":100039001,"comment_content":"争哥说：我有个朋友叫小王，哈哈","like_count":0,"discussions":[{"author":{"id":1108132,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e8/a4/0be8a8ca.jpg","nickname":"CAFEBABE","note":"","ucode":"01F6BC01A4EFE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":160344,"discussion_content":"我认为一个任务的完成也大概符合二八定律，如果设计思考花80%的时间，那写代码也只需要20%的时间和代码量；否则思路不到位，写出一大堆低质量的代码，而且后续要花更多无法预估的时间去修改。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1580791378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1128953,"avatar":"https://static001.geekbang.org/account/avatar/00/11/39/f9/acfb9a48.jpg","nickname":"无言的约定","note":"","ucode":"5E8046EB6B7956","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48675,"discussion_content":"你的设计应该做的很完美，要不然编码时候的突发情况你不一定在设计时能考虑到","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1573519820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330786,"discussion_content":"确实在分析设计时应该花时间，不过有时候编码时还是会遇到意外情况","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606707249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284377,"avatar":"https://static001.geekbang.org/account/avatar/00/13/99/19/9d813020.jpg","nickname":"xwb","note":"","ucode":"181CB78DFA8802","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51690,"discussion_content":"很赞同，看上去越复杂的逻辑越需要好好想想怎么设计，曾经有过想了一下午的方案，最后几十行写出来了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573915397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2715102,"avatar":"","nickname":"Geek_19aca2","note":"","ucode":"E4EC919596F850","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386131,"discussion_content":"。。。。有这么多时间么\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627436922,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175218,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1580618217,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1580618217","product_id":100039001,"comment_content":"小伙伴们，针对函数入参的值，里面可能含有前后空格，你们会检验么，好纠结😳","like_count":0},{"had_liked":false,"id":175130,"user_name":"batman","can_delete":false,"product_type":"c1","uid":1266482,"ip_address":"","ucode":"73C30ACFC0D612","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IIkdC2gohpcibib0AJvSdnJQefAuQYGlLySQOticThpF7Ck9WuDUQLJlgZ7ic13LIFnGBXXbMsSP3nZsbibBN98ZjGA/132","comment_is_top":false,"comment_ctime":1580566798,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1580566798","product_id":100039001,"comment_content":"以前不管啥情况就抛出个Exception搞得很懵逼！<br><br>函数和异常的业务相关性分析得很透彻，赞！","like_count":0},{"had_liked":false,"id":174759,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1580373000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580373000","product_id":100039001,"comment_content":"很喜欢作者对于&quot;正常情况&quot;和&quot;异常情况&quot;判定的讲解, 还有依赖抽象而不是具体的思想在以上直接上抛还是包装后上抛的分别. ","like_count":0,"discussions":[{"author":{"id":1276613,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/gmP4Yh00MZPwNvr4UQdLeXaX3TVyZEEp195S3vD3Sfl1xz5jBr1474Mt6w5OPr0KsrnQObfLRy5PkKNFjSBiasA/132","nickname":"大头爸爸","note":"","ucode":"131E25DB04D222","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309043,"discussion_content":"has a 和 contains a到底是什么区别?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601180162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179565,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","nickname":"Farewell丶","note":"","ucode":"A0D69893C5375C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56256,"discussion_content":"你最初的目的很多时候不是因为他们在一起你觉得不舒服所以要分开他们，而是你预见到有一部分可能会有复杂的变化，为了让变化不影响或少影响不变的部分，所以你把他隔离掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574464290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1179565,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","nickname":"Farewell丶","note":"","ucode":"A0D69893C5375C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56273,"discussion_content":"这个封装建立在假设你可以确定变化的前提下，而做这样的封装很容易陷入另一个陷阱，过度设计。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574467405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":56256,"ip_address":""},"score":56273,"extra":""}]},{"author":{"id":1179565,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","nickname":"Farewell丶","note":"","ucode":"A0D69893C5375C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55818,"discussion_content":"我认为解藕只是最后的表象或者效果，隔离变化点才是目的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574402691,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1179565,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","nickname":"Farewell丶","note":"","ucode":"A0D69893C5375C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56098,"discussion_content":"这个观点可以讨论一下。什么是你说的隔离变化呢？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574431893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":55818,"ip_address":""},"score":56098,"extra":""},{"author":{"id":1179565,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","nickname":"Farewell丶","note":"","ucode":"A0D69893C5375C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56254,"discussion_content":"当比如你用工厂模式时，你其实是为了向客户端隔离这个对象的创建这样一个变化点。这样就可以在变化到来时让客户端不做功或少做工。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574464069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":56098,"ip_address":""},"score":56254,"extra":""},{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1179565,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/ad/5020a8c5.jpg","nickname":"Farewell丶","note":"","ucode":"A0D69893C5375C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56270,"discussion_content":"封装变化，在变化时好维护的方向肯定是对的， 这个是指引的方向。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574466759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":56254,"ip_address":""},"score":56270,"extra":""}]},{"author":{"id":1113737,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","nickname":"xuanyuan","note":"","ucode":"1EC79B9372868F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49930,"discussion_content":"都是干货，懂的自然懂。话说那个抽静态的我也不理解为什么不可以，不过好像也要看场景，哪种场景下不行？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573650880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174394,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1580190647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580190647","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":174293,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1580124605,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580124605","product_id":100039001,"comment_content":"学到什么：<br>1、动手实践。争哥的这4节看着简单，实际信息量很大，动手实践一下能有更深的体会。<br>2、跑去研究了Java Random的源码的构造函数如何实现的。<br>搞清random做为变量可以放在哪里使用，以及random.rndInt()的取值范围。<br>3、异常如何处理：什么时候吞掉、抛出去，或者包装后抛出去。<br>4、学了理论还是要多在实际中尝试应用。<br>5、重构时先写好测试。每次baby step的重构，refactor build commit。 从《重构2》里学的。","like_count":0},{"had_liked":false,"id":174287,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1580121230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580121230","product_id":100039001,"comment_content":"滴滴打卡","like_count":0},{"had_liked":false,"id":174263,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1580112192,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1580112192","product_id":100039001,"comment_content":"感觉generate函数失败后报错信息是host name empty会有点奇怪，意味着用户还要去设置服务器的hostname，程序和服务器设置有了依赖性了，如果用户不会设置或者是基于容器的，那还要用户花费时间去设置主机名，感觉不好。","like_count":0},{"had_liked":false,"id":174195,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1580057036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580057036","product_id":100039001,"comment_content":"大年初三，抢占沙发！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474132,"discussion_content":"好像没有多少人画uml，文档主要还是聚焦于业务和更上层的架构设计、技术难点说明，实现直接看代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573789942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174258,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1580110721,"is_pvip":false,"replies":[{"id":"67720","content":"我觉得你懂我~","user_name":"作者回复","comment_id":174258,"uid":"1190123","ip_address":"","utype":1,"ctime":1580113492,"user_name_real":"王争"}],"discussion_count":12,"race_medal":0,"score":"839098733441","product_id":100039001,"comment_content":"还学到什么：<br>1.一下子想搞个例子讲这些真的太难了，拍着脑子想demo。栏主这个demo背景简单，也将要讲的内容串起来了，实属不易，幸苦栏主了。<br><br>个人见解：<br>1.按我的习惯，我会尽量把入参和中间不可靠变量的异常校验都放在public方法，所有私有方法都以契约的方式不再做参数校验。也就是说 public方法干 1.参数校验 2. 系统一级流程编排 3.统一异常处理 这三件事。所以对private方法的提炼会和栏主有点出入。<br><br>2.如果这个id生成器还要带有业务key，比如分表路由key之类的东西。那么这个实现就还得大动干戈。但凡这种涉及持久数据的玩意，很可能需要考虑新老版本兼容的问题，也就是如何平滑过度老数据。所以需要在id生成算法上引入版本或者类型的标记，把标记打在持久化的数据上，以备平滑过度老数据。","like_count":196,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499411,"discussion_content":"说的太对了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593309540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1354850,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ac/62/37912d51.jpg","nickname":"东方奇骥","note":"","ucode":"DEE7085F7E55A4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285793,"discussion_content":"对，特别在国企，有的领导的代码就是垃圾，但是你不可能拿出来说","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1592954910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1391463,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3b/67/c188d3bc.jpg","nickname":"tingye","note":"","ucode":"54F7A44066DF5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1354850,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ac/62/37912d51.jpg","nickname":"东方奇骥","note":"","ucode":"DEE7085F7E55A4","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":285956,"discussion_content":"领导能写代码就不错了，哈哈","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1592995445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":285793,"ip_address":""},"score":285956,"extra":""},{"author":{"id":1030657,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ba/01/5ce8ce0b.jpg","nickname":"Leoorz","note":"","ucode":"8912628AD6ADE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1391463,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3b/67/c188d3bc.jpg","nickname":"tingye","note":"","ucode":"54F7A44066DF5D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392950,"discussion_content":"哈哈，真相了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631187576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":285956,"ip_address":""},"score":392950,"extra":""}]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304984,"discussion_content":"其实本质是利益问题，cr和kpi、绩效无关，谁还去做codeReview","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1599732093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1524803,"avatar":"https://static001.geekbang.org/account/avatar/00/17/44/43/35ea4823.jpg","nickname":"RLH","note":"","ucode":"44FE2D50EC7581","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297038,"discussion_content":"特别赞同，包括我自己，在CodeReview别人的代码时，提问题也非常担心别人会反驳或者会争论，影响关系，哎~","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1596754762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153978,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","nickname":"Linuxer","note":"","ucode":"272D9D8089C3D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285835,"discussion_content":"是啊，大环境都做不到就事论事，review 很难做","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1592966156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1129309,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3b/5d/15c4817a.jpg","nickname":"xxxxL","note":"","ucode":"F84BB5ACD1241E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389622,"discussion_content":"最大的问题肯定是时间，国内排期都是按小时排的，还哪有时间搞CR","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629360862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341439,"discussion_content":"很多人一般是碍于面子， 一些人是能力问题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610420514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1148115,"avatar":"https://static001.geekbang.org/account/avatar/00/11/84/d3/ccaea6aa.jpg","nickname":"夜影如歌","note":"","ucode":"22D6B4BD4521C4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337255,"discussion_content":"一针见血","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608856686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187360,"user_name":"空白昵称","can_delete":false,"product_type":"c1","uid":1433815,"ip_address":"","ucode":"91F50CA25102AB","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d7/744bd8c3.jpg","comment_is_top":false,"comment_ctime":1584091039,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"650124152735","product_id":100039001,"comment_content":"我觉得抛异常这件事，有点像开发经理的职责。下级有问题（异常）要反馈，然后自己能处理则处理（吞掉异常）。如果自己不能处理的，要向上级汇报，那么汇报的时候就要考虑，如果上级不关心底层研发问题，则上报自己汇总的问题（re-throw新的异常）。如果上级领导也是技术控，对底层很了解，那么可适当直接上报（直接re-throw下级反馈的异常）。","like_count":152,"discussions":[{"author":{"id":1330632,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTItudDLPfbZabQLjk1NE8NSibQocdRy88rerQdxHFKx4KzUyaEnSLPbszcKAaPX8NgG3sHbZXib41aQ/132","nickname":"Mirss.zhao","note":"","ucode":"4A8F20B1A9D142","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345601,"discussion_content":"我觉得不是自己能不能处理的问题，是上级需不需要知道这个问题","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1611752398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1872697,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/93/39/f642023f.jpg","nickname":"Hplus","note":"","ucode":"DC32CBC3E9C11D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340420,"discussion_content":"形象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609998555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1652492,"avatar":"https://static001.geekbang.org/account/avatar/00/19/37/0c/91860cc9.jpg","nickname":"Bone","note":"","ucode":"F18A2B9916B6F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319571,"discussion_content":"牛皮","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604053500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1812807,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","nickname":"御风","note":"","ucode":"51C8212BE06364","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293931,"discussion_content":"精妙！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595731301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1002201,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/d9/75dd7cf9.jpg","nickname":"Mew151","note":"","ucode":"D4793F5874F345","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288409,"discussion_content":"精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593744639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019302,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/a6/22c37c91.jpg","nickname":"楊_宵夜","note":"","ucode":"7BA0CADC5F23BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284175,"discussion_content":"生动有趣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592463285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175035,"user_name":"undefined","can_delete":false,"product_type":"c1","uid":1587803,"ip_address":"","ucode":"867405CA5A9FB7","user_header":"https://static001.geekbang.org/account/avatar/00/18/3a/5b/ce1724ca.jpg","comment_is_top":false,"comment_ctime":1580533933,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"237803735213","product_id":100039001,"comment_content":"个人见解：如果 id 生成器需要应用到生产环境，类似 hostname 获取失败的问题，需要由生成器本身给出降级方案。一来为了 id 格式统一，二来假若抛给业务，业务对于这种系统底层的失败，也没有什么好的解决方法。","like_count":56,"discussions":[{"author":{"id":1049741,"avatar":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","nickname":"weineel","note":"","ucode":"6DC6EF4F256A53","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285930,"discussion_content":"> 只写代码不重构代码，在编码能力的提升上是很缓慢的。\n\n非常赞同","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1592991058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016299,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/81/eb/04c16c3e.jpg","nickname":"silence_wh","note":"","ucode":"95FB5D6C02EC89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293683,"discussion_content":"“恶性循环”说的太对了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595642565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131297,"avatar":"https://static001.geekbang.org/account/avatar/00/11/43/21/95418d51.jpg","nickname":"ltree98","note":"","ucode":"63EA2E061BEC75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291313,"discussion_content":"先run退化成能run，先run的后续不顾，还以先run理论自居。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594776420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019588,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","nickname":"Richie","note":"","ucode":"12314EF0347693","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287993,"discussion_content":"说得太好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593609886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174204,"user_name":"Harvey","can_delete":false,"product_type":"c1","uid":1254112,"ip_address":"","ucode":"164D1178DA091A","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/e0/6295a753.jpg","comment_is_top":false,"comment_ctime":1580084413,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"104659299517","product_id":100039001,"comment_content":"设计之所以难是因为没有标准答案，很多权衡是依赖于具体业务的。这就是DDD的思想所在，要先想清楚问题域是什么在思考解决方案。很多开发讨论问题的时候没有层次，上来就陷入技术细节，这就叫缺乏抽象。下游系统要想清楚哪些是上游系统给你提供的服务？哪些是人家的内部技术实现？比如ID生成，作为上游系统，ID生成服务提供的是有小概率重复的随机ID服务，至于随机算法，下游系统不必关心，这是上游系统的内部实现，这样上游系统才有空间更换算法而不影响下游系统。","like_count":24,"discussions":[{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287134,"discussion_content":"下游上游的概念反了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593388157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254112,"avatar":"https://static001.geekbang.org/account/avatar/00/13/22/e0/6295a753.jpg","nickname":"Harvey","note":"","ucode":"164D1178DA091A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":287514,"discussion_content":"没反，上下游是按影响定义的，不是按依赖定义的，上游影响下游，与河流是一个道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593473373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":287134,"ip_address":""},"score":287514,"extra":""}]},{"author":{"id":1161044,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcUUoxHNRJLZ9TzY2flSkjiboM4urZYLuApeAw0HTdMXzG40ZDsTcbDFWPfscD6ic6Uj1xkXmQicScA/132","nickname":"时光","note":"","ucode":"E9EDB0C3CA5254","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380545,"discussion_content":"陷入技术细节这个真的坑，直接就让自己&#34;无形&#34;中陷入了思考的被动，不能站在外面，站在高处，从更高的角度做出全局的、更全面的考虑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624549437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174194,"user_name":"Geek_kobe","can_delete":false,"product_type":"c1","uid":1735014,"ip_address":"","ucode":"ADC259585ADE56","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/78Mz6ibW43mh9rsgsII7aVYLHV9Uicn9qicce0czgFlLDkusW3oyR9ePaSJ6l80ibbDSJbkKeZqafLnW2dlVAyfAicQ/132","comment_is_top":false,"comment_ctime":1580056520,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"100364304328","product_id":100039001,"comment_content":"果然还是看技术文章能让恐慌的心静下来","like_count":24,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499610,"discussion_content":"有很多团队说有，实际上算不上有。。走个过场而已。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593249499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290990,"discussion_content":"极客时间代码不是外包的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594655087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1017161,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/85/49/585c69c4.jpg","nickname":"皮特尔","note":"","ucode":"313862C91DD325","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291081,"discussion_content":"不是的，他们现在有完整的开发团队","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594702771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":290990,"ip_address":""},"score":291081,"extra":""}]}]},{"had_liked":false,"id":188605,"user_name":"xk_","can_delete":false,"product_type":"c1","uid":1514305,"ip_address":"","ucode":"DFE1AC38EA78A7","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","comment_is_top":false,"comment_ctime":1584374134,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"57418948982","product_id":100039001,"comment_content":"很多小伙伴说，generate方法不需要抛出异常。<br><br>对，如果这个业务是仅仅只是作为唯一id，那么不管怎么样一定要生成一个随机数的。<br><br>那么，放开来想这个业务并非是一个id生成器，而是生成一个id业务码，这个id后面会用个主机名，对流量进行识别。争哥这么抛出异常，我觉得是可行的。还是要看具体的业务<br><br>再说一句，主机名还是一个很重要的东西，hadoop集群获取不到主机名，是一个很严重的问题。","like_count":13,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499880,"discussion_content":"不错，可以先把你列举的这些执行到位再说~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593994446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1013506,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/77/02/5b501b89.jpg","nickname":"TONNY","note":"","ucode":"E62D883A12D937","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403633,"discussion_content":"规范流程可以分享下么～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634121410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174422,"user_name":"皮卡皮卡","can_delete":false,"product_type":"c1","uid":1216284,"ip_address":"","ucode":"D440EEC7301C76","user_header":"https://static001.geekbang.org/account/avatar/00/12/8f/1c/1c728388.jpg","comment_is_top":false,"comment_ctime":1580203756,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"53119811308","product_id":100039001,"comment_content":"争哥这种设计思路考虑了一下，但是在业务中往往获取唯一ID的地方，不关心ID内部生成错误，需要的只是能够返回出来ID即可。目前我们的处理是异常在generate内部自己解决，同时返回ID","like_count":12,"discussions":[{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315367,"discussion_content":"最近接手了一个外包拿回来的项目，数据库字段用拼音首字母的，看到的时候，我差不点半条命没了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603266701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174207,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1580086725,"is_pvip":false,"replies":[{"id":"67712","content":"好的，等我俩月，我整理好，一块放到github上：<br>https:&#47;&#47;github.com&#47;wangzheng0822","user_name":"作者回复","comment_id":174207,"uid":"1190123","ip_address":"","utype":1,"ctime":1580106482,"user_name_real":"王争"}],"discussion_count":4,"race_medal":0,"score":"44529759685","product_id":100039001,"comment_content":"希望老师每节课举的代码有下载的地方，自己下载下来结合老师讲解的，自己理解体会其中的解决问题","like_count":10,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499627,"discussion_content":"反馈给领导层，让领导层推编程规范~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593249528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175503,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1580735690,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"31645506762","product_id":100039001,"comment_content":"从来没有否认过争哥这个专栏的认真程度，但是对于generate方法是否抛出异常有点异议 我的想法跟下面的人是一样的 本质上这是个id生成器 是为了追踪请求错误时候用的 在这个条件下id能不能生成并不应该阻止请求的流程 假如抛出异常给调用者那调用者继续走下去 那这个抛出来的异常的价值在哪？就只是为了知道一下hostname获取不到？如果抛出异常后终止了请求 那会不会有点”小题大作“了？当然demo怎么样举都可能有不完美的地方 评论里说出来也是给其他读者一个思路而不是一味的“照搬” 而且我觉得这个专栏争哥举了那么多的demo的牛逼之处在于不仅把要讲的知识点抛砖引玉出来而且还是贴近我们的日常开发 确实是实实在在很有可能在企业里用到的案例 就比如今天这个demo 后面我就考虑在我新开发的接口添加id生成器 来追踪请求出现的问题 说实话 我并没有看过争哥的算法课程 但是看到争哥这个专栏的前言后毫不犹豫地订了 追求代码极致这一态度是争哥给我的共鸣","like_count":7,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499430,"discussion_content":"杨哥，我带你！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593309507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290992,"discussion_content":"羊哥带带我","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594655304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290999,"discussion_content":"自己都不行哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594657137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":290992,"ip_address":""},"score":290999,"extra":""}]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291005,"discussion_content":"小争哥不是带你吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594659558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291019,"discussion_content":"不要听他乱说","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594682921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":291005,"ip_address":""},"score":291019,"extra":""},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291338,"discussion_content":"好吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594784430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":291019,"ip_address":""},"score":291338,"extra":""}]}]},{"had_liked":false,"id":176459,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1581064294,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23055900774","product_id":100039001,"comment_content":"设计模式_37:<br>刚刚看了一下，这4篇文章，我做了14条笔记，这些东西都是我认为非常好的细节。<br>随便举一个例子:<br>\t```<br>\t使用注解 @VisibleForTesting 来表示某private方法改为protected只是为了便于单元测试。<br>\t```<br>很喜欢这样的细节，当时的感受是，这种规范的做法是非常好的习惯，读起来非常友好。<br>剩下的也都差不多，我自己的开发中是注意不到的，缺乏这样的智慧。<br><br>另外，我也非常同意 @Jxin 同学的说法，找到一个Demo，能够涵盖绝大多数的要点，同时例子不能很生僻，并且让别人容易看懂。我也经常写文章，我知道这里的困哪和工作量。<br>佩服争哥！","like_count":5},{"had_liked":false,"id":174380,"user_name":"liu_liu","can_delete":false,"product_type":"c1","uid":1019138,"ip_address":"","ucode":"24283806A07759","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","comment_is_top":false,"comment_ctime":1580184764,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23055021244","product_id":100039001,"comment_content":"写代码不是糊弄，写出好的有水平的代码需要下一番功夫。对代码保持敬畏之心，有追求极致的思想，才会越来越好。","like_count":5,"discussions":[{"author":{"id":2592272,"avatar":"https://static001.geekbang.org/account/avatar/00/27/8e/10/750e9378.jpg","nickname":"Geek_40c051","note":"","ucode":"838A536635C6D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373954,"discussion_content":"道理其实大家都懂，但是工期紧张的情况下，各种压力下，还能下功夫的人，需要大毅力的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620952053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240819,"user_name":"Promise°","can_delete":false,"product_type":"c1","uid":1139384,"ip_address":"","ucode":"0BFDBDAD852D6D","user_header":"https://static001.geekbang.org/account/avatar/00/11/62/b8/bb9657c6.jpg","comment_is_top":false,"comment_ctime":1597073704,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"18776942888","product_id":100039001,"comment_content":"学到了什么:<br><br>    脑袋大,看了评论感觉：公说公有理婆说婆有理。同意@Jxin的说法 私有方法以契约的形式保证参数不会出错。<br><br>    如果该生成器仅为此项目内部使用或者以工具类的形式存在不建议generate方法抛出异常。<br>    比如所有的请求都需要增加logId,那么如果获取不到hostName就抛出异常且调用方不捕获异常的场景下,所有的请求都会失败。<br>\t如果是5台机器的集群组那么就相当于挂掉了1台。个人认为影响还是很大的。<br><br>\t但是反过来说对于这种场景 也并非无解决方案,比如项目启动时必须先调用id生成器一次,保证id必定能生成，否则抛出异常终止启动。<br>\t(仅指集群应用):<br>\t\t1.项目部署就能发现问题,避免上线后再产生问题,把问题扼杀在启动时。<br>\t\t2.集群应用下一般来说都不会一次性部署所有机器。原则上每次并行部署的项目数量要小于机器数&#47;2。<br>\t\t  比如十台机器可能先部署2台 启动无误后在按照2台的数量依次部署。这样即使是由于环境产生了问题 也就只有两台机器出现问题,不会导致全部不可用 <br><br>\t以上纯属个人见解,欢迎大家留言讨论。如有错误之处 也请王争老师和大家多多指点。\t  <br>","like_count":4,"discussions":[{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304033,"discussion_content":"运行过程中，如果获取不到hostName怎么办？不过启动时检测一下，确实时一个好思路","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599456675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1139384,"avatar":"https://static001.geekbang.org/account/avatar/00/11/62/b8/bb9657c6.jpg","nickname":"Promise°","note":"","ucode":"0BFDBDAD852D6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304147,"discussion_content":"可以考虑启动的时候就把hostName缓存起来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599480133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304033,"ip_address":""},"score":304147,"extra":""}]},{"author":{"id":2219666,"avatar":"https://static001.geekbang.org/account/avatar/00/21/de/92/659322ad.jpg","nickname":"37.2","note":"","ucode":"3B20A30414BD6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588894,"discussion_content":"缓存起来这个建议我觉得可行，但是和机器启动耦合不是很建议\n即使ID生成器是基础设施服务，逻辑也不建议和机器启动耦合在一起\n但是机器启动后的后置检查可以加上hostName的检查","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664194721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174211,"user_name":"your problem？","can_delete":false,"product_type":"c1","uid":1457464,"ip_address":"","ucode":"6E096E7958CFD7","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/38/6f02a4b9.jpg","comment_is_top":false,"comment_ctime":1580089530,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18759958714","product_id":100039001,"comment_content":"打卡，也祝大家新年快乐，身体健康，另外我始终觉得generateRandomAlphameric这个函数里，随机获取这个写法很不利于性能测试，假如这个函数会被百万，甚至千万次的调用，不可控性也太强了，我觉得可以改成随机生成0-26的数字，对应去加到字母的位置，不知道老师和大家有什么想法吗","like_count":4,"discussions":[{"author":{"id":1047733,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","nickname":"肖臧","note":"","ucode":"4FAC9FF54DD6A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229659,"discussion_content":"搞一个ALPHAMERIC_SET里面，然后随机数生成器生成0-61的数字，按位置取值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586678985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184384,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1583304583,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14468206471","product_id":100039001,"comment_content":"是的,这个代码写的足够健壮性,而且相当完美了,但是我接触的实际开发过程中,其实很多时候,上层系统并不关系ID内部生成是否错误,也不希望因为ID生成错误而导致系统崩溃,于是,一般情况下,我们还是将ID生成器的异常不向外抛出,只是再返回的时候加上错误码,回来查看日志的时候,根据日志时间找到对应异常,再进行分析原因","like_count":3,"discussions":[{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574663,"discussion_content":"是啊   36节就有说过  如果上游不需要知道的异常就自己吞掉就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654237583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177654,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1581465167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14466367055","product_id":100039001,"comment_content":"很多实战的理念我都没有在书上看过，但是想法出奇一致。越来越感觉能和您一起工作，真是不要太幸福","like_count":3},{"had_liked":false,"id":174407,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1580195275,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10170129867","product_id":100039001,"comment_content":"还学到了：<br>1.函数出错时是返回NULL还是异常对象？<br>要看获取不到数据是正常行为，还是异常行为，如果业务上来说是异常行为就抛出异常，反之返回NULL。<br><br>2.是直接返回出错的异常还是重新封装成新的异常？<br>要看函数跟异常是否有业务相关性。相关的话就直接抛出。不相关就包装成与函数相关的异常类型，而且这样也能隐藏实现细节。<br><br>3.NULL值或空字符串在什么时候需要判断？<br>a.如果函数是 private 类私有的，只在类内部被调用，完全在你自己的掌控之下，自己保证在调用这个 private 函数的时候，不要传递 NULL 值或空字符串就可以了。<br>b.如果函数是 public 的，你无法掌控会被谁调用以及如何调用（有可能某个同事一时疏忽，传递进了 NULL 值，这种情况也是存在的），为了尽可能提高代码的健壮性，我们最好是在 public 函数中做 NULL 值或空字符串的判断。<br>c.但是单元测试会测试一些corner case，所以，最好也加上判断。<br><br>4.个人的一点思考<br>如果代码中报的错是受检异常就可以针对具体情况来处理是throws出去、吞掉还是包装新的异常。如果报的错是非受检异常我还是习惯内部自己处理，因为非受检异常throws出去的话，调用方不处理，编译器也不会报错，所以，为了防止调用方未处理的情况，还是自己内部处理吧。","like_count":2},{"had_liked":false,"id":174307,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1580132392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10170066984","product_id":100039001,"comment_content":"今天学习了异常代码处理思路。在处理到异常时，通常会将上层关心的异常直接包装成RuntimeException往上抛，没有根据业务域定义相关的自定义异常。通过今天的学习，了解到处理异常的基本思路：是往上抛还是吞掉，主要看调用者是够关心该异常。是否要包装成新的异常主要看调用者是否理解该异常，该异常是否业务相关。如果能理解、业务相关可以直接抛，否则重新包装。<br>在这4节课的持续迭代过程中，除了文章中提到的开发思想，自己总结了如下一些个人想法：<br>1. 科比说过“我现在所做的一切，都是为了追求更加完美” - 缅怀逝去的伟大的科比。我们对生活，工作都要尽量追求完美。<br>2. 人生是个不断重构自己的过程，自己写的代码也要不断持续重构，优化。这样自己才能不断进步。<br>3. 参考优秀的开发思想，方法论，不断地将之实践，总结，改进，逐渐形成合适自己的方法论。","like_count":2},{"had_liked":false,"id":318409,"user_name":"Lingo","can_delete":false,"product_type":"c1","uid":1075334,"ip_address":"","ucode":"82ECA2E0533B78","user_header":"https://static001.geekbang.org/account/avatar/00/10/68/86/348be7f8.jpg","comment_is_top":false,"comment_ctime":1635294896,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5930262192","product_id":100039001,"comment_content":"一个程序员的良好修养<br>1: &quot;总有刁民想害朕&quot;的心态，public方法传参要检验。<br>2: 人格分裂，既要站在上层的方法想是否关心此异常，又要站在下层的方法想是否要抛出此异常。<br>3:高水平甩锅技巧，参数的问题，直接甩给上层让app崩溃，fail first。底层技术问题，要包装一下甩给上层，这个活我干不了。力所能及的问题，自己干了算了，打个warn log，发个免责声明。","like_count":1},{"had_liked":false,"id":305411,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1627962353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5922929649","product_id":100039001,"comment_content":"太受震撼了，原来这么简单的代码都有如此深度的优化空间！","like_count":1},{"had_liked":false,"id":286424,"user_name":"Jerry","can_delete":false,"product_type":"c1","uid":1621616,"ip_address":"","ucode":"9CDB5CFF39E219","user_header":"https://static001.geekbang.org/account/avatar/00/18/be/70/70c71ec6.jpg","comment_is_top":false,"comment_ctime":1617291113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5912258409","product_id":100039001,"comment_content":"自从看了老师的专栏，自己都快走火入魔了，居然不会写代码了。Soga。。。","like_count":1},{"had_liked":false,"id":260990,"user_name":"Henry","can_delete":false,"product_type":"c1","uid":1929375,"ip_address":"","ucode":"7C554C97935443","user_header":"https://static001.geekbang.org/account/avatar/00/1d/70/9f/741cd6a4.jpg","comment_is_top":false,"comment_ctime":1605167770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5900135066","product_id":100039001,"comment_content":"个人认为如果业务层可以接受，获取不到hostname 时用 “UNKNOWHOST” 代替会让代码看起来更简洁些。 ","like_count":1},{"had_liked":false,"id":257243,"user_name":"天马行空","can_delete":false,"product_type":"c1","uid":1740810,"ip_address":"","ucode":"5B019ABAFD1716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/90/0a/4d161db0.jpg","comment_is_top":false,"comment_ctime":1603893107,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5898860403","product_id":100039001,"comment_content":"非常经典的一个重构实例，一步步演化出优雅的异常处理代码，可以作为培养新人的案例，收藏，受教了。","like_count":1},{"had_liked":false,"id":240828,"user_name":"小川","can_delete":false,"product_type":"c1","uid":1242573,"ip_address":"","ucode":"D462222DDBB978","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/cd/3890be04.jpg","comment_is_top":false,"comment_ctime":1597077846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892045142","product_id":100039001,"comment_content":"针对抛异常这个问题，我举个例子，希望能帮助到大家。<br><br>1. 你是组内的一名开发，你现在做的这个需求，遇到了技术问题，需求需要延期。<br><br>2. 针对你的项目经理而言，因为项目需要延期，他需要针对延期的问题，跟需求方沟通下一步安排。所以他需要知道，这个时候，你就应该把问题抛出去（而不是内部吸收）。<br><br>3. 有的时候可能项目经理不需要知道你的技术等太多细节问题在哪里，所以你就需要把你的技术问题异常，转化为延期异常，抛给你的项目经理。让他自己捕获进行下一步处理。<br><br>总结：<br><br>1. 调用方需要知道异常是，选择抛出异常。<br>2. 不要暴露内部异常细节，对外抛出调用方关心的异常。","like_count":1},{"had_liked":false,"id":235713,"user_name":"可爱的饲养员","can_delete":false,"product_type":"c1","uid":1160213,"ip_address":"","ucode":"A5B6A4A4110E0C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b4/15/2e6716d7.jpg","comment_is_top":false,"comment_ctime":1595158976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890126272","product_id":100039001,"comment_content":"异常处理部分受益良多，一直对如何做好异常处理不解，搜了很多文章感觉都没有讲清楚，这下解惑了，感谢争哥！","like_count":1},{"had_liked":false,"id":229247,"user_name":"田园牧歌","can_delete":false,"product_type":"c1","uid":1737289,"ip_address":"","ucode":"E25C9957D20F8B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/82/49/fd0e68a3.jpg","comment_is_top":false,"comment_ctime":1592929828,"is_pvip":false,"replies":[{"id":"84970","content":"划分模块跟划分类的方法一样，做到高内聚低耦合，职责单一。你可以参考面向对象设计的4个步骤来做模块的定义和划分。","user_name":"作者回复","comment_id":229247,"uid":"1190123","ip_address":"","utype":1,"ctime":1593309846,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5887897124","product_id":100039001,"comment_content":"看了争哥专栏，受益匪浅，了解了如何评判一个项目、一段代码的好烂，如何写出高质量代码。但我有一个疑问，就是像这种基于接口而非实现的编程方式，在实际的业务项目中如何分包和模块呢？如果是静态方法的小算法我可以放到util包中，比如命名为IdGeneratorUtil.java","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499397,"discussion_content":"划分模块跟划分类的方法一样，做到高内聚低耦合，职责单一。你可以参考面向对象设计的4个步骤来做模块的定义和划分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593309846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225263,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1591698741,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5886666037","product_id":100039001,"comment_content":"【设计模式笔记37】20200609<br>今天主要讲的是如何进行异常处理，给我的启发是不要觉得代码简单扫一眼就觉得没必要重构，或者没问题。应该想的是“好”代码到底是什么样的，多学习好代码就会形成自己的判断，那么首先应该想的是有异常怎么处理，如何处理异常，一般套路就是自己catch异常返回null或者其他对象（总管式），还有一种就是向上抛出，抛出就要考虑抛什么异常了，上层是否应该关心，如果关心就要抛合理的异常，否则抛参数校验的异常，参数合法性检查是为了不合理的参数让上层感知到参数是非法的。特别对于空指针一定要控制好，当你不确定是否为空的时候就加个判空吧。多一层校验稳一点","like_count":1},{"had_liked":false,"id":205587,"user_name":"肖臧","can_delete":false,"product_type":"c1","uid":1047733,"ip_address":"","ucode":"4FAC9FF54DD6A0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fc/b5/ac717737.jpg","comment_is_top":false,"comment_ctime":1586679468,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881646764","product_id":100039001,"comment_content":"从业务角度上，一个日志ID生成器生成日志失败不应该报告给上级系统吧，上级系统拿着这个异常要怎么处理，总不能中断业务吧。我觉得合理的处理方式：<br>1.吞掉这个异常，记录日志<br>2.使用默认的last_field_of_hostname<br>3.利用日志监控系统，设定监控规则，如果短时间内频繁出错，发送短信&#47;邮件&#47;内部即时通讯工具(slack)给运维人员，人工干预。<br><br>不过如果是其他业务相关的ID，比如：order_id，我觉得抛异常是合理的","like_count":1},{"had_liked":false,"id":174305,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1580130541,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5875097837","product_id":100039001,"comment_content":"我再提一点自己的改进想法：修改后的代码里，generate方法还应该处理掉8这个魔法数字，如果需要让用户定制长度，则需要提供另一个不带默认值的方法，并在generate方法里处理随机方法抛出的参数非法异常","like_count":1},{"had_liked":false,"id":358324,"user_name":"37.2","can_delete":false,"product_type":"c1","uid":2219666,"ip_address":"广东","ucode":"3B20A30414BD6E","user_header":"https://static001.geekbang.org/account/avatar/00/21/de/92/659322ad.jpg","comment_is_top":false,"comment_ctime":1664195121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664195121","product_id":100039001,"comment_content":"关于hostName的获取的建议，是否需要抛异常<br>可以缓存hostName，通过静态代码块在第一次调用该方法时执行获取HostName的值，如果获取不到抛异常，获取到之后可以缓存HostName<br>","like_count":0},{"had_liked":false,"id":354158,"user_name":"钟增","can_delete":false,"product_type":"c1","uid":3049844,"ip_address":"湖南","ucode":"DEB7183422713A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM4rwiaVhPzRLvk7rjFGtk0IrFCsNJiaXaoesB509UzBTyWibazicS7CwpMzvCjj9XGRnjOAic9b4nJDBGg/132","comment_is_top":false,"comment_ctime":1660132323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660132323","product_id":100039001,"comment_content":"getLastFieldOfHostName()方法和getLastSubstrSplittedByDot()方法都有判断hostname是否为空，按照调用关系这样不符合DRY原则哦！","like_count":0},{"had_liked":false,"id":348304,"user_name":"范特西","can_delete":false,"product_type":"c1","uid":1359210,"ip_address":"","ucode":"6F57092D832D7F","user_header":"https://static001.geekbang.org/account/avatar/00/14/bd/6a/abe84a16.jpg","comment_is_top":false,"comment_ctime":1654948526,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654948526","product_id":100039001,"comment_content":"在函数最前面对参数进行判断属于「防御式编程」，可以利用Guava包的Precondition工具","like_count":0},{"had_liked":false,"id":324569,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638502966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638502966","product_id":100039001,"comment_content":"总结一下 这个异常怎么处理看怎么使用这个，如果上层需要感知异常，则需要一路抛上去 从generate开始抛出那么意味着所以generate依赖的函数都得做到相应的更改 <br> <br>看了下评论，我个人觉得即使是private也要做好基础的校验. <br>由于主要是用go 所以err都会往上抛","like_count":0},{"had_liked":false,"id":319111,"user_name":"Java知其所以然","can_delete":false,"product_type":"c1","uid":1085200,"ip_address":"","ucode":"DC17FC7A7E42D1","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/10/f9151d58.jpg","comment_is_top":false,"comment_ctime":1635590736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635590736","product_id":100039001,"comment_content":"多积累一些平时在业务系统中看到的 &quot;坏&quot; 代码，然后利用这个课程学到的理论去反复思考、分析，这样才能把这些理论真正的用好，而不是会用。","like_count":0},{"had_liked":false,"id":315700,"user_name":"慕言","can_delete":false,"product_type":"c1","uid":2731028,"ip_address":"","ucode":"4918FA682F3895","user_header":"https://static001.geekbang.org/account/avatar/00/29/ac/14/a8ff8fec.jpg","comment_is_top":false,"comment_ctime":1633946300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633946300","product_id":100039001,"comment_content":"我觉得RandomIdGenerator类唯一对外提供的generate方法是生成一个随机ID，外部调用方并不清楚生成ID的过程会获取机器的hostname，所以这种情况下，generate函数的实现上可以考虑加入容错处理，即在hostname获取不到的情况下，使用其他字符替代，比如随机字符等，这种情况下，generate函数就可以把UnknownHostException内部吞掉了。","like_count":0},{"had_liked":false,"id":310405,"user_name":"EveryDayIsNew","can_delete":false,"product_type":"c1","uid":1316926,"ip_address":"","ucode":"776B81EF6830FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/18/3e/f8632713.jpg","comment_is_top":false,"comment_ctime":1630642536,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630642536","product_id":100039001,"comment_content":"这个入参校验正常不应该越放外层越好吗，要是类似底层反腐层都需要做入参校验就会很冗余繁琐。","like_count":0},{"had_liked":false,"id":307439,"user_name":"Geek_b7eb88","can_delete":false,"product_type":"c1","uid":1573715,"ip_address":"","ucode":"0EB46381D9B1CB","user_header":"","comment_is_top":false,"comment_ctime":1629102412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629102412","product_id":100039001,"comment_content":"getLastSubstrSplittedByDot 函数中抛出的运行时异常，由于是非必要受检的，所以上层代码中没有体现出来捕获到的处理。这么理解没错吧？","like_count":0},{"had_liked":false,"id":300875,"user_name":"Molyt","can_delete":false,"product_type":"c1","uid":2283490,"ip_address":"","ucode":"9CCF7A18B2C547","user_header":"https://static001.geekbang.org/account/avatar/00/22/d7/e2/5e5cc8f3.jpg","comment_is_top":false,"comment_ctime":1625412540,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625412540","product_id":100039001,"comment_content":"重构后的getLastFieldOfHostName()的hostName ，有捕获异常后，且getLastSubstrSplittedByDot()有做空判断，这里还需要再做判断吗？刚入门，有点疑惑：<br><br> 我们在使用这个函数的时候，自己也要保证不传递 NULL 值或者空字符串进去。所以，getLastFieldOfHostName() 函数的代码也要作相应的修改。修改之后的代码如下所示：<br>private String getLastFieldOfHostName() throws UnknownHostException{<br>    String substrOfHostName = null;<br>    String hostName = InetAddress.getLocalHost().getHostName();<br>    if (hostName == null || hostName.isEmpty()) { &#47;&#47; 此处做判断<br>      throw new UnknownHostException(&quot;...&quot;);<br>    }<br>    substrOfHostName = getLastSubstrSplittedByDot(hostName);<br>    return substrOfHostName;<br> } <br>","like_count":0},{"had_liked":false,"id":289961,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1134539,"ip_address":"","ucode":"11C598D0723D08","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/cb/ede92cd5.jpg","comment_is_top":false,"comment_ctime":1619278547,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619278547","product_id":100039001,"comment_content":"错误处理值得借鉴","like_count":0},{"had_liked":false,"id":286064,"user_name":"Geek_86eac6","can_delete":false,"product_type":"c1","uid":1787022,"ip_address":"","ucode":"8C02E398CC6A35","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI4CBQHuLDWOdicOl1elTdSicqMyY1s5JDWXiaHsSk0VSWaVe0U6CTo701ZGz9h6MvibsAGKnvVq7xxFw/132","comment_is_top":false,"comment_ctime":1617148627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617148627","product_id":100039001,"comment_content":"面对复杂的需求，先做最小化实现，写出满足功能的代码。  然后再逐步重构。","like_count":0},{"had_liked":false,"id":280490,"user_name":"倡印","can_delete":false,"product_type":"c1","uid":1455958,"ip_address":"","ucode":"4F53AA5D017D89","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","comment_is_top":false,"comment_ctime":1614234047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614234047","product_id":100039001,"comment_content":"让我重新了解了 写好代码 是需要有完整的理论基础 和实践的。并且思考框架要全面完整，操作执行要有序执行 有理论依据也要有实践意义","like_count":0},{"had_liked":false,"id":275738,"user_name":"Geek_cca021","can_delete":false,"product_type":"c1","uid":2209611,"ip_address":"","ucode":"09675F01BB895E","user_header":"","comment_is_top":false,"comment_ctime":1611655284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611655284","product_id":100039001,"comment_content":"获取hostname 可能在类初始化的时候获取更有优势。","like_count":0},{"had_liked":false,"id":269606,"user_name":"吴月月鸟","can_delete":false,"product_type":"c1","uid":1115064,"ip_address":"","ucode":"2F068EDD166B49","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/b8/961a5342.jpg","comment_is_top":false,"comment_ctime":1608713993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608713993","product_id":100039001,"comment_content":"不是我吹，这个专栏文章反复看，时看时新。","like_count":0},{"had_liked":false,"id":265716,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1606990866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606990866","product_id":100039001,"comment_content":"打卡：用Java在之前的案例基础上做了进一步优化练习。","like_count":0},{"had_liked":false,"id":264245,"user_name":"Kelly.W","can_delete":false,"product_type":"c1","uid":1518308,"ip_address":"","ucode":"6EFB58A24355C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/2a/e4/714ffd01.jpg","comment_is_top":false,"comment_ctime":1606389750,"is_pvip":false,"replies":[{"id":"96077","content":"嗯嗯 ","user_name":"作者回复","comment_id":264245,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700629,"user_name_real":"王争"}],"discussion_count":1,"race_medal":1,"score":"1606389750","product_id":100039001,"comment_content":"开发能用的代码可能会很快也比较简单。但想要开发出优秀的代码，就需要投入比较多的精力，一轮轮来优化。<br>能用的代码和优质代码之间最大的区别就在于细节，像这节课中讲到的异常抛出，特殊值处理等等都是细节。<br>这就是60分和100分的差别。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510478,"discussion_content":"嗯嗯 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259717,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1604818540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604818540","product_id":100039001,"comment_content":"收获很大！","like_count":0},{"had_liked":false,"id":258898,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1604577899,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604577899","product_id":100039001,"comment_content":"看着优秀代码长出来的过程，比单纯看优秀代码更能学到东西。<br>边界条件的处理依赖定义，如果是定义外的异常情况，则抛出异常，否则返回Null或约定的默认值。<br>如果是上层不关注的异常，则直接“吞掉”，返回默认结果。<br>如果是上层关注和理解的异常，重新抛出去，如果不理解的话，按照上层能理解的描述重新包装一下再抛出去。<br>“作为一名程序员，起码对代码要有追求啊，不然跟咸鱼有啥区别！” 共勉！","like_count":0},{"had_liked":false,"id":247850,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1599892284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599892284","product_id":100039001,"comment_content":"酒肉（知识）穿肠过，佛祖（一丢丢）心中留","like_count":0},{"had_liked":false,"id":237185,"user_name":"御风","can_delete":false,"product_type":"c1","uid":1812807,"ip_address":"","ucode":"51C8212BE06364","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/47/ded5da90.jpg","comment_is_top":false,"comment_ctime":1595731698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595731698","product_id":100039001,"comment_content":"学到了异常处理方式，该吞掉还是抛出，该抛出还是re–throw。<br>目前公司项目中随处可见使用Assert断言检验参数和抛出异常，看上去很简洁，但有些地方考虑地不够细","like_count":0},{"had_liked":false,"id":235462,"user_name":"大方方","can_delete":false,"product_type":"c1","uid":1354013,"ip_address":"","ucode":"621AD8F1485753","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6cyOoRd2dROgiblAJkW6RLhUyH1wwU0NNibIIuV930eQ9TiaNT41K61kBSVkvYoDYg7mJtuEoCQY1awBmV0WW6BFg/132","comment_is_top":false,"comment_ctime":1595045369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595045369","product_id":100039001,"comment_content":"写异常处理写的不多 大多都偷懒做个Null 判断然后  debug.loogErro()  ;return; 了事， 通过这两节学到了很多正规严谨的做法。","like_count":0},{"had_liked":false,"id":234056,"user_name":"心动","can_delete":false,"product_type":"c1","uid":1239268,"ip_address":"","ucode":"4024B7EC525BC1","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/e4/ea6b9015.jpg","comment_is_top":false,"comment_ctime":1594567007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594567007","product_id":100039001,"comment_content":"写的很好，回想项目中的一些情况确实这种处理比较好，优秀的开源框架也是这样设计的","like_count":0},{"had_liked":false,"id":228844,"user_name":"考拉出山","can_delete":false,"product_type":"c1","uid":1303954,"ip_address":"","ucode":"917E35FD7B2D06","user_header":"https://wx.qlogo.cn/mmopen/vi_32/1mOvT5fApeicXppMP3zADG6XIPicNt5D9dL6y46SF5UUcH0hicG21LM6xSgHJj5oAdzCyeGtLZYHYmlvaFwecrGOA/132","comment_is_top":false,"comment_ctime":1592823016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592823016","product_id":100039001,"comment_content":"IdGenerationFailureException这个异常可以扩大到整个generate  try catch。  这样使用应该也可以。底层往上抛，出口转换封装","like_count":0},{"had_liked":false,"id":228565,"user_name":"Clear","can_delete":false,"product_type":"c1","uid":1110680,"ip_address":"","ucode":"AD768DB7654F7B","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/98/e2c92588.jpg","comment_is_top":false,"comment_ctime":1592736837,"is_pvip":false,"replies":[{"id":"84387","content":"会，但为了清晰、易于理解，多几个异常也未尝不可啊<br>","user_name":"作者回复","comment_id":228565,"uid":"1190123","ip_address":"","utype":1,"ctime":1592831657,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1592736837","product_id":100039001,"comment_content":"王老师好，我有一个问题： 根据函数是否关心异常类型，来判断异常是否需要转换抛出，会不会导致需要新增很多异常的类呢。<br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499079,"discussion_content":"会，但为了清晰、易于理解，多几个异常也未尝不可啊\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592831657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225406,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1591751632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591751632","product_id":100039001,"comment_content":"为何要抛出受检查异常呢    上节说可恢复的异常尽量抛受检查      不太理解","like_count":0},{"had_liked":false,"id":218386,"user_name":"炫炫","can_delete":false,"product_type":"c1","uid":1358609,"ip_address":"","ucode":"FDC7A0C6E08B02","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/11/7069b8eb.jpg","comment_is_top":false,"comment_ctime":1589793407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589793407","product_id":100039001,"comment_content":"1.处理异常 2.边界值检查 3.防御性代码","like_count":0},{"had_liked":false,"id":215364,"user_name":"金胖子","can_delete":false,"product_type":"c1","uid":1045261,"ip_address":"","ucode":"132386ECB4D407","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/0d/6caad172.jpg","comment_is_top":false,"comment_ctime":1588982312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588982312","product_id":100039001,"comment_content":"终于对异常体系的编排和处理有了深刻理解，知其然更知其所以然，感谢争哥","like_count":0},{"had_liked":false,"id":207956,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1587222490,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587222490","product_id":100039001,"comment_content":"关于异常，怎么处理，我觉得见仁见智把，其实关于整体业务考虑还会有第三方调用，这个时候，第三方调用的错误，就是优先返回空数组，对象则返回空对象，但是就不适合抛出异常，因为这段是公用代码，要看业务如何处理了","like_count":0},{"had_liked":false,"id":206836,"user_name":"这得从我捡到一个鼠标垫开始说起","can_delete":false,"product_type":"c1","uid":1272321,"ip_address":"","ucode":"2FF4347B4E7A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/01/d9cb531d.jpg","comment_is_top":false,"comment_ctime":1586943232,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586943232","product_id":100039001,"comment_content":"IllegalArgumentException 这个运行时异常为什么不和可检测异常一起处理，而是抛到了更上层","like_count":0},{"had_liked":false,"id":196665,"user_name":"成活","can_delete":false,"product_type":"c1","uid":1734795,"ip_address":"","ucode":"F8840EE4DC3969","user_header":"https://static001.geekbang.org/account/avatar/00/1a/78/8b/421cb2c4.jpg","comment_is_top":false,"comment_ctime":1585301229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585301229","product_id":100039001,"comment_content":"专栏受益匪浅，手动点赞","like_count":0},{"had_liked":false,"id":195889,"user_name":"song","can_delete":false,"product_type":"c1","uid":1125245,"ip_address":"","ucode":"4A8FECAD2BE795","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/7d/6febeabe.jpg","comment_is_top":false,"comment_ctime":1585221563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585221563","product_id":100039001,"comment_content":"hostName == null || hostName.isEmpty()   判断 是否需要 改用 org.apache.commons.lang3.StringUtils 工具类  来判断","like_count":0},{"had_liked":false,"id":190503,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1584665519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584665519","product_id":100039001,"comment_content":"真的是内功不够，理论知识不扎实","like_count":0},{"had_liked":false,"id":189408,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1584512982,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584512982","product_id":100039001,"comment_content":"知易行难，需要大量的经验积累。","like_count":0},{"had_liked":false,"id":189278,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1584495143,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584495143","product_id":100039001,"comment_content":"代码设计，不仅仅是实现功能，更要考虑复用，和容错。<br>还需要考虑调用方的感受。要让调用方无感知地调用方法。<br>还要考虑到各种各样的意外情况。<br>甚至还需要考虑可测试性。<br>设计一套完美的代码还真是不简单。","like_count":0},{"had_liked":false,"id":185425,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1583581518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583581518","product_id":100039001,"comment_content":"我觉得对于写的每个方法都要做下参数判断。因为只有做了参数校验，最终顺利通过的参数能才能生成我们想要的目标值。如果方法内做一些降级服务策略，我觉得会导致方法的会偏离设计的目标值。","like_count":0},{"had_liked":false,"id":185373,"user_name":"我的黄金时代","can_delete":false,"product_type":"c1","uid":1062070,"ip_address":"","ucode":"D7825B45B372F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/34/b6/0feb574b.jpg","comment_is_top":false,"comment_ctime":1583569301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583569301","product_id":100039001,"comment_content":"我觉得完全没有必要去把这个异常抛给上层，因为你的方法提供的是ID的生成，就算把这个异常抛出去，调用方也不会进行处理，而且还有可能还需要自己去生成一个新的ID。","like_count":0},{"had_liked":false,"id":185077,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583479216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583479216","product_id":100039001,"comment_content":"老师，有个疑问，<br>generate()方法中已经抓取IdGenerationFailureException异常了，为什么再方法上，还要再抛出去呢？<br>我一般写MVC 三层架构，一般是在service,repository中向上抛异常，在controller中抓取异常处理返回，我这种风格是不正确的么？<br>","like_count":0},{"had_liked":false,"id":185018,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1583466174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583466174","product_id":100039001,"comment_content":"打算把这四节课代码重新敲一遍，重新思考一遍","like_count":0},{"had_liked":false,"id":184676,"user_name":"我已经设置了昵称","can_delete":false,"product_type":"c1","uid":1364034,"ip_address":"","ucode":"ED672C5EBDBDC4","user_header":"https://static001.geekbang.org/account/avatar/00/14/d0/42/6fd01fb9.jpg","comment_is_top":false,"comment_ctime":1583380802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583380802","product_id":100039001,"comment_content":"个人认为，host拿到为空，并不需要抛异常，因为即使为空，也不会影响到主要业务，我们的需求只是为了查日志调用链。应该让他继续跑下去，哪怕是null-xxxx-xxx这样的traceId，能用来查询日志即可。","like_count":0},{"had_liked":false,"id":183515,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1583056685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583056685","product_id":100039001,"comment_content":"最近四篇的文章非常有意义，一口气读下来，醍醐灌顶。<br><br>最大的感悟是，编程语言的语法是非常灵活的，像异常处理那样，谁都可以用，但要用好还需要很多的约定，能用好的话对程序的各方面都是非常好的。<br><br>明显感觉到：初级程序员和高级程序员在对编程理解上的差异。希望自己可以努力向高阶进化，编写出一段段优质的代码，供别人使用。","like_count":0},{"had_liked":false,"id":182757,"user_name":"请叫我和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1582860622,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1582860622","product_id":100039001,"comment_content":"但是现在还是有一个疑问，关于在throw异常之前，是不是需要打一个log，这个log的级别又应该是error还是info、warn、debug？","like_count":0},{"had_liked":false,"id":182245,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1582733309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582733309","product_id":100039001,"comment_content":"很赞。唯一有不同意见的点是generate方法中生成失败的时候会抛异常。<br>按照这样设计我有两点疑问：<br>1. throw new IdGenerationFailureException(&quot;...&quot;, e);  这一句中的异常信息应该写什么呢？貌似只能写“Id generation failed.”，因为“HostName获取失败”这个原因太过底层，是上层不关心的；<br>2. 上层调用方遇到IdGenerationFailureException的时候又应该如何处理呢？又得调用另一个IdGenerator吗？","like_count":0},{"had_liked":false,"id":179101,"user_name":"岁月","can_delete":false,"product_type":"c1","uid":1337598,"ip_address":"","ucode":"29A2A2BC3C4FE4","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","comment_is_top":false,"comment_ctime":1581915018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581915018","product_id":100039001,"comment_content":"generateRandomAlphameric 这个方法重构之后户抛出异常, 但是函数签名没有写抛出异常, 是不是写错了呢?","like_count":0},{"had_liked":false,"id":177299,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1581344037,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581344037","product_id":100039001,"comment_content":"让自己独立去思考。还真想不到这么细。<br>1. 这里毕竟深刻的一点是getLastSubstrSplittedByDot做了null的判断之后，上层调用getLastFiledOfHostName里面的hostname,一般情况我就不判断了。因为我不管你来什么。我都可以处理。但是这样对业务的异常就不明确。更明确的做法就是外面再判断确保不传进来。但是我在想如果外层不判断，是不是更利于代码的可读性。否则感觉有点重复。","like_count":0},{"had_liked":false,"id":176543,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1581083469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581083469","product_id":100039001,"comment_content":"从这个迭代重构的过程中，你还学到哪些更有价值的东西？<br>学会了分析过程和思想道理,咸鱼与高手的本质区别,<br>学到了学习的目的是为了代码写得更好;<br>还学习到了争哥的思维分析过程,先分析出存在的各类情况,哪些不会出问题,哪些会出问题,会出问题的再根据实际需求怎样处理会更好,以及这样处理好在哪里,又有什么弊端,辩证深入领悟问题,并寻找更优解;<br>还学会了怎样将编程思想理论落实的实践,更深入理解编程思想精髓;<br>还懂得了人生的哲理,有些道理早领悟,有些技能早掌握就可以享受更长时间的复利价值.<br>编程一代宗师,唯我王争哥!!!","like_count":0},{"had_liked":false,"id":176536,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1581082807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581082807","product_id":100039001,"comment_content":"问题<br>重构之后的 RandomIdGenerator 代码的generate()代码中,对于generateRandomAlphameric(8)该把IllegalArgumentException封装成抽象的业务异常IdGenerationFailureException,不要将底层实现暴露给上层代码,不然这里就违背了面向抽象而非实现编程的原则.","like_count":0},{"had_liked":false,"id":176008,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1580910195,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580910195","product_id":100039001,"comment_content":"争哥你好，有两个问题想请教：<br>1、类中的私有成员变量在重构后，貌似没被用到了，那是否意味着可以干掉？<br>2、generate方法抛出的是编译时异常，那为了不影响正常的业务逻辑执行，调用它的方法都应该捕获它吧？这样就会有比较多处理异常上的冗余代码，有什么方法可以减少这类代码呢？","like_count":0},{"had_liked":false,"id":175398,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1580705510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580705510","product_id":100039001,"comment_content":"太棒了，打卡！","like_count":0},{"had_liked":false,"id":175268,"user_name":"Epimoni","can_delete":false,"product_type":"c1","uid":1067388,"ip_address":"","ucode":"F0107A267A6605","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/7c/9fa4f466.jpg","comment_is_top":false,"comment_ctime":1580636274,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1580636274","product_id":100039001,"comment_content":"争哥说：我有个朋友叫小王，哈哈","like_count":0,"discussions":[{"author":{"id":1257410,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/c2/09c939ad.jpg","nickname":"Origin","note":"","ucode":"9B204EF360DD32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":162866,"discussion_content":"你说的这个朋友到底是不是你自己？哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581025599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1067388,"avatar":"https://static001.geekbang.org/account/avatar/00/10/49/7c/9fa4f466.jpg","nickname":"Epimoni","note":"","ucode":"F0107A267A6605","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1257410,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/c2/09c939ad.jpg","nickname":"Origin","note":"","ucode":"9B204EF360DD32","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":163254,"discussion_content":"🤔🤔🤔","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581064912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":162866,"ip_address":""},"score":163254,"extra":""}]}]},{"had_liked":false,"id":175218,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1580618217,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1580618217","product_id":100039001,"comment_content":"小伙伴们，针对函数入参的值，里面可能含有前后空格，你们会检验么，好纠结😳","like_count":0},{"had_liked":false,"id":175130,"user_name":"batman","can_delete":false,"product_type":"c1","uid":1266482,"ip_address":"","ucode":"73C30ACFC0D612","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IIkdC2gohpcibib0AJvSdnJQefAuQYGlLySQOticThpF7Ck9WuDUQLJlgZ7ic13LIFnGBXXbMsSP3nZsbibBN98ZjGA/132","comment_is_top":false,"comment_ctime":1580566798,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1580566798","product_id":100039001,"comment_content":"以前不管啥情况就抛出个Exception搞得很懵逼！<br><br>函数和异常的业务相关性分析得很透彻，赞！","like_count":0},{"had_liked":false,"id":174759,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1580373000,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580373000","product_id":100039001,"comment_content":"很喜欢作者对于&quot;正常情况&quot;和&quot;异常情况&quot;判定的讲解, 还有依赖抽象而不是具体的思想在以上直接上抛还是包装后上抛的分别. ","like_count":0},{"had_liked":false,"id":174394,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1580190647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580190647","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":174293,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1580124605,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580124605","product_id":100039001,"comment_content":"学到什么：<br>1、动手实践。争哥的这4节看着简单，实际信息量很大，动手实践一下能有更深的体会。<br>2、跑去研究了Java Random的源码的构造函数如何实现的。<br>搞清random做为变量可以放在哪里使用，以及random.rndInt()的取值范围。<br>3、异常如何处理：什么时候吞掉、抛出去，或者包装后抛出去。<br>4、学了理论还是要多在实际中尝试应用。<br>5、重构时先写好测试。每次baby step的重构，refactor build commit。 从《重构2》里学的。","like_count":0},{"had_liked":false,"id":174287,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1580121230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580121230","product_id":100039001,"comment_content":"滴滴打卡","like_count":0},{"had_liked":false,"id":174263,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1580112192,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1580112192","product_id":100039001,"comment_content":"感觉generate函数失败后报错信息是host name empty会有点奇怪，意味着用户还要去设置服务器的hostname，程序和服务器设置有了依赖性了，如果用户不会设置或者是基于容器的，那还要用户花费时间去设置主机名，感觉不好。","like_count":0},{"had_liked":false,"id":174195,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1580057036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580057036","product_id":100039001,"comment_content":"大年初三，抢占沙发！","like_count":0}]}