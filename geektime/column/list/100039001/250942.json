{"id":250942,"title":"99 | 总结回顾：在实际软件开发中常用的设计思想、原则和模式","content":"<p>到今天为止，理论部分和实战部分都已经讲完了，整个专栏也接近尾声了。我这里用两节课的时间，带你一块复习一下前面学到的知识点。跟前面的讲解相对应，这两节课分别是针对理论部分和实战部分进行回顾总结。</p><p>今天，我先来带你回顾一下整个专栏的知识体系。我们整个专栏围绕着编写高质量代码展开，涵盖了代码设计的方方面面，主要包括面向对象、设计原则、编码规范、重构技巧、设计模式这五个部分。我们就从这五个方面，带你一块把之前学过的知识点串一遍。</p><p><img src=\"https://static001.geekbang.org/resource/image/f3/d3/f3262ef8152517d3b11bfc3f2d2b12d3.png?wh=5013*3903\" alt=\"\"></p><p>话不多说，让我们正式开始今天的学习吧！</p><h2>面向对象</h2><p>相对于面向过程、函数式编程，面向对象是现在最主流的编程范式。纯面向过程的编程方法，现在已经不多见了，而新的函数式编程，因为它的应用场景比较局限，所以大多作为面向对象编程的一种补充，用在科学计算、大数据处理等特殊领域。</p><p>它提供了丰富的特性，比如封装、抽象、继承、多态，有助于实现复杂的设计思路，是很多设计原则、设计模式等编程实现的基础。</p><p>在面向对象这一部分，我们要重点掌握面向对象的四大特性：封装、抽象、继承、多态，以及面向对象编程与面向过程编程的区别。需要特别注意的是，在平时的面向对象编程开发中，我们要避免编写出面向过程风格的代码。</p><p>除此之外，我们还重点学习了面向对象分析（OOA）、设计（OOD）、编程（OOP）。其中，面向对象分析就是需求分析，面向对象设计是代码层面的设计，输出的设计结果是类。面向对象编程就是将设计的结果翻译成代码的过程。</p><!-- [[[read_end]]] --><p>在专栏中，我们重点讲解了面向对象设计这一部分。我们可以把面向对象设计分为四个环节：划分职责并识别出有哪些类、定义类及其属性和方法、定义类之间的交互关系、组装类并提供执行入口。我们通过几个项目案例，带你实战了一下设计过程，希望你能面对开发需求的时候，不会无从下手，做到有章可循，按照我们的给出的步骤，有条不紊地完成设计。</p><p>在面向对象这一部分，我们还额外讲到了两个设计思想：基于接口而非实现的设计思想、多用组合少用继承的设计思想。这两个设计思想虽然简单，但非常实用，应用它们能让代码更加灵活，更加容易扩展，所以，这两个设计思想几乎贯穿在我们整个专栏的代码实现中。</p><h2>设计原则</h2><p>在专栏的最开始，我们总结了一套评判代码质量的标准，比如可读性、可维护性、可扩展性、复用性等，这是从代码整体质量的角度来评判的。但是，落实到具体的细节，我们往往从是否符合设计原则，来对代码设计进行评判。比如，我们说这段代码的可扩展性比较差，主要原因是违背了开闭原则。这也就是说，相对于可读性、可维护性、可扩展性等代码整体质量的评判标准，设计原则更加具体，能够更加明确地指出代码存在的问题。</p><p>在专栏中，我们重点讲解了一些经典的设计原则，大部分都耳熟能详。它们分别是SOLID原则、DRY原则、KISS原则、YAGNI原则、LOD原则。这些原则的定义描述都很简单，看似都很好理解，但也都比较抽象，比较难落地指导具体的编程。所以，学习的重点是透彻理解它们的设计初衷，掌握它们能解决哪些编程问题，有哪些常用的应用场景。</p><p>SOLID原则并非一个原则。它包含：单一职责原则（SRP）、开闭原则（OCP）、里氏替换原则（LSP）、接口隔离原则（ISP）、依赖倒置原则（DIP）。其中，里氏替换和接口隔离这两个设计原则并不那么常用，稍微了解就可以了。我们重点学习了单一职责、开闭、依赖倒置这三个原则。</p><p>单一职责原则是类职责划分的重要参考依据，是保证代码”高内聚“的有效手段，是面向对象设计前两步（划分职责并识别出有哪些类、定义类及其属性和方法）的主要指导原则。单一职责原则的难点在于，对代码职责是否足够单一的判定。这要根据具体的场景来具体分析。同一个类的设计，在不同的场景下，对职责是否单一的判定，可能是不同的。</p><p>开闭原则是保证代码可扩展性的重要指导原则，是对代码扩展性的具体解读。很多设计模式诞生的初衷都是为了提高代码的扩展性，都是以满足开闭原则为设计目的的。实际上，尽管开闭原则描述为对扩展开放、对修改关闭，但也并不是说杜绝一切代码修改，正确的理解是以最小化修改代价来完成新功能的添加。实际上，在平时的开发中，我们要时刻思考，目前的设计在以后应对新功能扩展的时候，是否能做到不需要大的代码修改（比如调整代码结构）就能完成。</p><p>依赖倒置原则主要用来指导框架层面的设计。高层模块不依赖低层模块，它们共同依赖同一个抽象。深挖一下的话，我们要把它跟控制反转、依赖注入、依赖注入框架做区分。实际上，比依赖倒置原则更加常用的是依赖注入。它用来指导如何编写可测试性代码，换句话说，编写可测试代码的诀窍就是应用依赖注入。</p><p>KISS、YAGNI可以说是两个万金油原则，小到代码、大到架构、产品，很多场景都能套用这两条原则。其中，YAGNI原则表示暂时不需要的就不要做，KISS原则表示要做就要尽量保持简单。跟单一职责原则类似，掌握这两个原则的难点也是在于，对代码是否符合KISS、YAGNI原则的判定。这也需要根据具体的场景来具体分析，在某个时间点、某个场景下，某段代码符合KISS、YAGNI原则，换个时间点、换个场景，可能就不符合了。</p><p>DRY原则主要是提醒你不要写重复的代码，这个倒是不难掌握。LOD原则又叫最小知道原则，不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。如果说单一职责原则是为了实现“高内聚”， 那这个原则就是为了实现“松耦合”。</p><h2>编码规范</h2><p>编码规范很重要，特别是对于初入职、开发经验不多的程序员，遵从好的编码规范，能让你写出来的代码至少不会太烂。而且，编码规范都比较具体，不像设计原则、模式、思想那样，比较抽象，需要融入很多个人的理解和思考，需要根据具体的场景具体分析，所以，它落地执行起来更加容易。</p><p>虽然我们讲了很多设计思想、原则、模式，但是，大部分代码都不需要用到这么复杂的设计，即便用到，可能也就只是用到极个别的知识点，而且用的也不会很频繁。但是，编码规范就不一样了。编码规范影响到你写的每个类、函数、变量。你编写每行代码的时候都要思考是否符合编码规范。</p><p>除此之外，编程规范主要解决代码的可读性问题。我个人觉得，在编写代码的时候，我们要把可读性放到首位。只有在代码可读性比较好的情况下，我们再去考虑代码的扩展性、灵活性等。一般来说，一个可读性比较好的代码，对它修改、扩展、重构都不是难事，因为这些工作的前提都是先读懂代码。</p><p>不过，专栏中只是总结了一些最常用的、最能明显改善代码质量的编码规范，更进一步的学习你可以参考《重构》《代码大全》《代码整洁之道》等书籍，或者参看你公司内部的编码规范。</p><h2>重构技巧</h2><p>重构作为保持代码质量不腐化的有效手段，利用的就是面向对象、设计原则、设计模式、编码规范这些理论。在重构的过程中，我们用代码质量评判标准来评判代码的整体质量，然后对照设计原则来发现代码存在的具体问题，最后用设计模式或者编码规范对存在的问题进行改善。</p><p>持续重构除了能保证代码质量不腐化之外，还能有效避免过度设计。有了持续重构意识，我们就不会因为担心设计不足而过度设计。我们先按照最简单的思路来设计，然后在后续的开发过程中逐步迭代重构。</p><p>在专栏中，我们还对重构进行了粗略的分类，分为大规模高层次的重构和小规模低层次的重构。不管哪种重构，保证重构不出错，除了熟悉代码之外，还有就是完善的单元测试。</p><h2>设计模式</h2><p>如果说设计原则相当于编程心法，那设计模式相当于具体的招式。设计模式是针对软件开发中经常遇到的一些设计问题，总结出来的一套解决方案或者设计思路。我们用设计原则来评判代码设计哪里有问题，然后再通过具体的设计模式来改善。相对于其他部分来讲，设计模式是最容易学习的，但也是最容易被滥用的，所以，我们在第75讲中还专门讲了如何避免过度设计。</p><p>经典的设计模式有23种，分三种类型：创建型、结构型和行为型。其中，创建型设计模式主要解决“对象的创建”问题，结构型设计模式主要解决“类或对象的组合”问题，行为型设计模式主要解决“类或对象之间的交互”问题。</p><p>虽然专栏中讲到的设计模式有很多种，但常用的并不多，主要有：单例、工厂、建造者、代理、装饰器、适配器、观察者、模板、策略、职责链、迭代器这11种，所以，你只要集中精力，把这11种搞明白就可以了，剩下的那12种稍微了解，混个眼熟，等到真正用到的时候，再深入地去研究学习就可以了。</p><h2>课堂讨论</h2><p>很多人反映学了就忘，对于上面的这些知识点，你记住了百分之多少呢？你是怎么克服学了就忘的问题的呢？</p><p>欢迎留言和我分享你的想法，如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","comments":[{"had_liked":false,"id":227878,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1592503434,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"254995573898","product_id":100039001,"comment_content":"记住大半。比较蠢，我是靠持续重构，眼里不容刺的把自己碰到的每行代码捋顺眼入的门。另外整理知识分享，教会别人，在准备的时候有时能理解得更透测。在解答别人问题时，有时能有眼前一亮新的理解。<br><br>总结，较真死磕，用心分享。","like_count":59,"discussions":[{"author":{"id":2397784,"avatar":"https://static001.geekbang.org/account/avatar/00/24/96/58/07babd63.jpg","nickname":"何威","note":"","ucode":"8B245E39F42869","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371160,"discussion_content":"能理解是一个层次，能教会别人那是真的厉害😄","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1619670282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2756739,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/10/83/0facd0eb.jpg","nickname":"利威尔兵长","note":"","ucode":"FDE0BD5BFB1B4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400538,"discussion_content":"“较真死磕，用心分享”，哈哈哈，总结的很到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633314460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228000,"user_name":"，","can_delete":false,"product_type":"c1","uid":1701867,"ip_address":"","ucode":"A5543C8DFEB198","user_header":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","comment_is_top":false,"comment_ctime":1592535251,"is_pvip":true,"replies":[{"id":"84973","content":"可以看看我写的这篇文章：<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;uKkQMIWTtAmvsEYZCxvZeg","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1593310469,"ip_address":"","comment_id":228000,"utype":1}],"discussion_count":8,"race_medal":0,"score":"134736521427","product_id":100039001,"comment_content":"     重复了多遍,不停地学不停地忘,这一年看了两本代码整洁之道,大部分都忘了,看了一本架构整洁之道,抽象的概念,原则,计算架构混乱度的公式,也都忘了,只记住了架构师的职责,架构师该做什么,看了一本深入理解java虚拟机三遍,还总结了脑图,就这样也还是忘得差不多了,c++因为工作中用到,看了一半c++primer,现在也都忘完了,effective java看了一遍,做了总结,还是忘完了,算法,撸了两遍数据结构与算法之美,刷了100多道题,现在也记不住多少了,mysql 45讲刷了一半多,也都忘得差不多了,许式伟的架构课刷了一遍,也就记住一些架构师做事的方式......<br>    大部分知识,只要&quot;知道&quot;就够了,关键时刻能想起他来,再去研究适不适合当前场景.想把细节都捯饬清楚不现实,而且容易忘<br>   所以我的做法是忘就忘了,忘了说明他不重要,毕竟很多内容,平时工作都是凭直觉去思考就能想到,譬如重构一段老代码,或者起一个新模块,跟同事了解完前因后果,需求分析,自然而然就有了解决方案,设计原则,模式也就在不经意之中应用上了,根本不会在一开始就想&quot;我要用某个设计模式&quot;这种问题<br>    然后,知识学到和会用,真的是两码事,前一阵做过一个udp客户端,向服务器发包和收包,我的做法就是发一次再收一次,然后这个模块就经常出现卡死,问题产生的原因很简单,就是udp丢包了,我一直就知道这件事情,选tcp和udp的时候还想过两者各自的优点和缺点,tcp信息传输稳定,但是需要考虑断点重连,udp不需要管理连接,但是需要防止丢包,即便想到这一点,代码依旧没有考虑到这个问题,把发包和收包给串行了,导致请求阻塞,然后给好几个同事看,大家也愣是没找到问题.这件事情让我感触很深,这个知识,你知道他,和你做事情的时候能用上他,真的就是两码事,所以我在总结出一个成长路线,一个对编程不了解的人新入行时,多搬砖成长的快,搬砖熟练到一定程度,补习基础成长的快,补到一定程度,知识开始盈余,实战不足,这时应该多搬砖,所以一个快速提升的途径应该是搬砖-&gt;学习-&gt;搬砖-&gt;学习.无限循环,搬砖的时候不要怕出错,搬砖是对学习成果的检验,学习时不要钻牛角尖,学习是为了学以致用,而不是&quot;秀&quot;给别人看,一定要钻研细节的话就等搬砖用到了,或者面试时再去钻研,忘掉的知识,感觉重要就复习,感觉不重要就忘掉好了","like_count":31,"discussions":[{"author":{"id":1982711,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/40/f7/e62bbc62.jpg","nickname":"zh","note":"","ucode":"98772B1B6C6E06","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341012,"discussion_content":"lambda表达式简洁是简洁，但很多时候并不明了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610261938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1768828,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/fd/7c/6ba1a1fd.jpg","nickname":"低调","note":"","ucode":"2C24C4A8B232E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321369,"discussion_content":"lambda用起来坑也多哦，考虑性能和逃逸分析，用好的不多，门槛也有，函数式编程会长时间争论下去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604570932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","nickname":"笨鸟","note":"","ucode":"68029ADA76AA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309083,"discussion_content":"使用lambda表达式增加了老程序员对代码理解的成本","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601187274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1438102,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f1/96/9571fa3d.jpg","nickname":"青青子衿","note":"","ucode":"4A388A3BA70C29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1236320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","nickname":"笨鸟","note":"","ucode":"68029ADA76AA5A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309266,"discussion_content":"这不是理由，程序员就要不断学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601248373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309083,"ip_address":""},"score":309266,"extra":""},{"author":{"id":1236320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","nickname":"笨鸟","note":"","ucode":"68029ADA76AA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1438102,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f1/96/9571fa3d.jpg","nickname":"青青子衿","note":"","ucode":"4A388A3BA70C29","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309278,"discussion_content":"并不是每个程序员都认同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601252244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309266,"ip_address":""},"score":309278,"extra":""},{"author":{"id":1438102,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f1/96/9571fa3d.jpg","nickname":"青青子衿","note":"","ucode":"4A388A3BA70C29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1236320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","nickname":"笨鸟","note":"","ucode":"68029ADA76AA5A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309351,"discussion_content":"是吗？哈哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601263907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":309278,"ip_address":""},"score":309351,"extra":""}]},{"author":{"id":1360093,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","nickname":"cv0cv0","note":"","ucode":"93FF9277F03FD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220591,"discussion_content":"推荐使用 kotlin。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585902915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1077127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6f/87/669263b4.jpg","nickname":"陈金鑫","note":"","ucode":"609A24832CA80C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1360093,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","nickname":"cv0cv0","note":"","ucode":"93FF9277F03FD0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325276,"discussion_content":"为啥不推Scala?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605261858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":220591,"ip_address":""},"score":325276,"extra":""},{"author":{"id":1360093,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","nickname":"cv0cv0","note":"","ucode":"93FF9277F03FD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1077127,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6f/87/669263b4.jpg","nickname":"陈金鑫","note":"","ucode":"609A24832CA80C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358825,"discussion_content":"scale用来写啥？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616056364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325276,"ip_address":""},"score":358825,"extra":""}]},{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138417,"discussion_content":"lambda表达式用顺手之后真的是神器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579240629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1161044,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcUUoxHNRJLZ9TzY2flSkjiboM4urZYLuApeAw0HTdMXzG40ZDsTcbDFWPfscD6ic6Uj1xkXmQicScA/132","nickname":"时光","note":"","ucode":"E9EDB0C3CA5254","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378861,"discussion_content":"同意，很优雅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623470011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":138417,"ip_address":""},"score":378861,"extra":""}]}]},{"had_liked":false,"id":228080,"user_name":"岁月神偷","can_delete":false,"product_type":"c1","uid":1484111,"ip_address":"","ucode":"BA851259EA1F71","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/4f/592d00f2.jpg","comment_is_top":false,"comment_ctime":1592550194,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"78901961522","product_id":100039001,"comment_content":"对于一个重复的知识点，学了就忘的根本原因还是没有彻底弄明白，遇到这类情况，我想提出两个观点，一家之言，仅供参照。第一，对于难啃的知识，要学会迂回作战，在遇到非常大的困难时往往我们会陷入一种死磕到底的状态，问题当然是要解决的，但面对强敌，学会迂回也不失为一种战术，一个知识点非常难懂，很可能是这个知识点涵盖的其他知识点你没有掌握，由于对其他知识点的掌握不足，影响了自己的理解。所以，平稳心态继续学习，在某个时间点回过头来看的时候，有的难题真的会茅塞顿开。第二，实践是检验真理的唯一标准，如果学来的知识点一直无法实际运用，你很难说自己完全弄明白了，很多坑是要在实战过程中踩出来的，纸上谈兵的书生和经历过战场的老兵哪个更靠谱一些呢，所以不能一直浮在理论层面，一定要想法设法在工作实践中加以运用，以此来加深自己对知识的理解。当一个人真正搞明白一个知识点的时候，不存在记不记得住之说，同一句话可以有很多种说法，换一种说法他一样能够把这个知识点说明白。","like_count":18,"discussions":[{"author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":170067,"discussion_content":"没有规范无所谓，只要保持好底线。代码就不至于烂到无可救药~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581667646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1236320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","nickname":"笨鸟","note":"","ucode":"68029ADA76AA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"discussion":{"id":309085,"discussion_content":"改离职人员的代码可就由不得你了,增加一个功能,想顺便优化一下,一看得重写所有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601187343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":170067,"ip_address":""},"score":309085,"extra":""}]}]},{"had_liked":false,"id":227935,"user_name":"悟光","can_delete":false,"product_type":"c1","uid":1439777,"ip_address":"","ucode":"E81339EBC4F492","user_header":"https://static001.geekbang.org/account/avatar/00/15/f8/21/3fa228e6.jpg","comment_is_top":false,"comment_ctime":1592528571,"is_pvip":false,"replies":[{"id":"84974","content":"👍","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1593310633,"ip_address":"","comment_id":227935,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57427103419","product_id":100039001,"comment_content":"记住了一半吧，但是和原来写的代码做对比发现代码质量真的有非常大的进步。我从争哥专栏一开始就学习了，这期间犯过这么几点错误。<br>1、看完面向对象的时候设计的时候感觉醍醐灌顶，看完文章两遍之后就觉得掌握了，但是在遇到新的需求做需求分析，设计类的时候还是感觉脑容量不够，有点不知所措，无从下手的感觉。后面反思发现是想一开始就做比较完美的设计和类划分，想到的每个方案其实都有很明显的缺陷，这种矛盾的感觉导致烦躁和自我怀疑。<br>2、看完编码规范和重构之后，给变量起名的时候也过分纠结了，某种程度上降低效率。后面反思觉得完全可以用注释来提升可读性，没必要在细节上耗费太多精力。<br>3、看设计模式的时候，某这些瞬间感觉看到新世界，再联想到看过的一些优秀的源码激动的开始鼓掌🤣🤣，心里就起了强烈的实践一下的渴望于是在很小的功能里也用上设计模式😂😂，，导致有同事看我代码的时候有点费劲，尽管也激发了同事学习的兴趣，但是实际上也是一种孤独设计。<br>对第一种采取：先摈弃空想，有思路就动手画线框图，用大白话写文档，有个初出版，然后在反复揣摩争哥的例子，然后再去改，如此三四遍，开始写代码先完成需求。过一周再回头看看专栏，在做设计，在修改代码。在这个过程中很明显感受到自己对设计原则为什么那么定义有更真切直观的感受，并且感受到对业务的熟悉程度也影响设计的好坏，是循序渐进的过程。<br>2、编码规范和设计模式的学习，更多的看优秀框架，对框架的一部分觉得很感兴趣就在草稿纸上抄写主要的逻辑（个人觉得手写更慢，能留给大脑更多删减思考优秀优秀代码的精妙）,并且对同一部分强迫自己看两三遍，因为一遍有一遍的发现新想法和对优秀代码钦佩的体验。这种感觉加深了记忆。<br>总结：1、找到自己想详细了解的部分反复看，并且隔段时间在作总结。2、通过手写加深细节记忆，提升理解，找到学习的动力。3、还是反复看和做总结。","like_count":13,"discussions":[{"author":{"id":1115041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/03/a1/e6a0f60b.jpg","nickname":"Sid","note":"","ucode":"0461B574B2736B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338089,"discussion_content":"对，这个我也很困惑，一般入参加了boolean类型，都是有很多公用逻辑，用到boolean标志的特殊逻辑插在中间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609168820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2200205,"avatar":"https://static001.geekbang.org/account/avatar/00/21/92/8d/a849daae.jpg","nickname":"山猫大战响尾蛇","note":"","ucode":"FE8CEE50873120","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1115041,"avatar":"https://static001.geekbang.org/account/avatar/00/11/03/a1/e6a0f60b.jpg","nickname":"Sid","note":"","ucode":"0461B574B2736B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372150,"discussion_content":"就我个人经验而言，一般来说，如果有一个地方需要用flag去切换逻辑分支，那么大概率到后期分支不会只局限于true或者false两条，最好还是尽早把分支控制部分独立成一个函数比较好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620211561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":338089,"ip_address":""},"score":372150,"extra":""}]}]},{"had_liked":false,"id":228584,"user_name":"强哥","can_delete":false,"product_type":"c1","uid":1206726,"ip_address":"","ucode":"3B8DC780FE4EF9","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/c6/513df085.jpg","comment_is_top":false,"comment_ctime":1592744644,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23067581124","product_id":100039001,"comment_content":"“教”是最好的“学”，总结、实践并传授其他人。","like_count":5},{"had_liked":false,"id":228044,"user_name":"buggetout","can_delete":false,"product_type":"c1","uid":1880582,"ip_address":"","ucode":"63A948EF415FDD","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b2/06/2086d76d.jpg","comment_is_top":false,"comment_ctime":1592543552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18772412736","product_id":100039001,"comment_content":"1个月把课看到这儿了，编码能力和设计能力大有提高。","like_count":4},{"had_liked":false,"id":230254,"user_name":"俊辉","can_delete":false,"product_type":"c1","uid":1026995,"ip_address":"","ucode":"3CAD068124810C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/b3/430fb812.jpg","comment_is_top":false,"comment_ctime":1593328210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14478230098","product_id":100039001,"comment_content":"边看边在 ProcessOn 写脑图，减少脑袋即时记忆负担，而且知识架构一目了然。学习、复习效率高了很多。","like_count":4},{"had_liked":false,"id":228137,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1592565082,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14477466970","product_id":100039001,"comment_content":"看完脑海里过一遍，后面小争哥有些课后题是与前面的内容有关的又过一遍，最重要是学以致用，在工作中用上，哪里看不顺眼改哪里。","like_count":3},{"had_liked":false,"id":227966,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1592530717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14477432605","product_id":100039001,"comment_content":"重复，重复，再重复！<br><br>每篇重点回顾基本靠背的，这个是底线了，要能说出来！背的过程中如果不会，或者有些关键概念和场景不理解，就再看对应文章，加深印象。<br><br>工作中遇到相关设计模式场景忘了的，也是找对应文章看一遍！","like_count":3},{"had_liked":false,"id":241712,"user_name":"zj","can_delete":false,"product_type":"c1","uid":1100064,"ip_address":"","ucode":"E3329CCF694AC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","comment_is_top":false,"comment_ctime":1597398164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10187332756","product_id":100039001,"comment_content":"先掌握设计原则心法，再掌握设计模式招式，有个大概的印象。在项目中不断反思，代码是否具有可扩展性，复用性，是否满足单一职责，高内聚，低耦合等，然后就是对代码进行重构，从而更深入的理解各种设计原则和设计模式。","like_count":2},{"had_liked":false,"id":234879,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1594817208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10184751800","product_id":100039001,"comment_content":"设计模式之美专栏绝对值得反复阅读, 特别是一些重点章节.<br><br>对于学了就忘的问题, 个人经验是对经典书籍, 文章隔一段时间拿出来重读. <br><br>像&lt;Effective Java&gt; &lt;Thinking in Java&gt; &lt;计算机网络:自顶向下方法&gt; &lt;聪明的投资者&gt;, 还有设计模式之美专栏的文章都有过多次阅读的经验, 常看常新.<br>","like_count":2},{"had_liked":false,"id":233135,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1594236436,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10184171028","product_id":100039001,"comment_content":"单一职责目的高内聚<br>开放封闭原则用于实现扩展性<br>LOC迪米特原则用于实现低耦合<br>DRY不要写重复代码，重复代码一多，影响内骤性，要修改某个能力要改多处代码<br>KISS原则就是将设计及代码实现保持简单","like_count":2},{"had_liked":false,"id":228223,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1592618553,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10182553145","product_id":100039001,"comment_content":"争哥专栏写得好，是我看完之后印象最深的设计模式内容，其他书籍因为讲得不太清楚，很快就忘了，当然，把自己理解的内容尽快记下来，放在容易检索的地方，才能持久。","like_count":2},{"had_liked":false,"id":228215,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1592615662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10182550254","product_id":100039001,"comment_content":"唯有实践才能不忘，才能更深入","like_count":2},{"had_liked":false,"id":227952,"user_name":"成楠Peter","can_delete":false,"product_type":"c1","uid":1252977,"ip_address":"","ucode":"4D13E7368D8CF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/1e/71/9dcbe6c4.jpg","comment_is_top":false,"comment_ctime":1592529707,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10182464299","product_id":100039001,"comment_content":"思考题<br>对于学了就忘，这才是符合人的记忆曲线。有两种方式，一种多复习，参考艾宾浩斯遗忘曲线。另一种，将每一种设计模式用自己熟悉的编程语言实现一遍，通过实践加深记忆。这是我写的一篇文章，https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;111553641。","like_count":2},{"had_liked":false,"id":227895,"user_name":"张细敏","can_delete":false,"product_type":"c1","uid":1198505,"ip_address":"","ucode":"764F7CF54E44D5","user_header":"https://static001.geekbang.org/account/avatar/00/12/49/a9/eede1288.jpg","comment_is_top":false,"comment_ctime":1592523873,"is_pvip":false,"replies":[{"id":"83989","content":"你去我公众号里找找😂 “小争哥”","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1592525089,"ip_address":"","comment_id":227895,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10182458465","product_id":100039001,"comment_content":"老师，后续有课程讲解aop吗？","like_count":2,"discussions":[{"author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141558,"discussion_content":"哈哈。19项确实没有。争哥也没有写。是的，先做好自己。一起加油。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579430759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141478,"discussion_content":"19项漏啦。我得到启发：改善代码从我做起，才能去要求别人。所以，先把自己的做好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579423366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227885,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1592517760,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10182452352","product_id":100039001,"comment_content":"我觉得能记忆深刻还是动手学习，知识量很多的不可能记住，还是希望老师整理讲过的代码对照讲过的课程加深印象学习了","like_count":2},{"had_liked":false,"id":264819,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1606660909,"is_pvip":false,"replies":[{"id":"96058","content":"嗯嗯 ������","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700507,"ip_address":"","comment_id":264819,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5901628205","product_id":100039001,"comment_content":"我是用的主动回想 我在网上看 主动回想的学习方式 优于重复阅读和复习","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510693,"discussion_content":"嗯嗯 ������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247974,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1599962482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894929778","product_id":100039001,"comment_content":"1. 过目不忘计算机可以做到，看一遍就能理解计算机也做不到。<br>2. 学习的同时可以根据自己的爱好编写一个自己主导的项目，通过持续重构将设计原则、设计模式应用到实际项目中。<br>3. 一定要有适量的单元测试对重构后的代码进行质量保证，不然重构后心里没底，越来越不敢重构了。<br>4. 立竿见影的设计模式”策略模式“，用它来消除很长很长的if else、switch case代码瞬间实现开闭原则。<br>5. 找一个自己感兴趣的优秀项目阅读源码学习。<br>6. 多和大家交流。","like_count":1},{"had_liked":false,"id":232141,"user_name":"Winon","can_delete":false,"product_type":"c1","uid":1080055,"ip_address":"","ucode":"17F4108B2F5D00","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/f7/24df0ff9.jpg","comment_is_top":false,"comment_ctime":1593870456,"is_pvip":false,"replies":[{"id":"85667","content":"好像也没有，不用太纠结于这个。。。😂","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1593909571,"ip_address":"","comment_id":232141,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5888837752","product_id":100039001,"comment_content":"想请教老师关于模板方法模式的疑问，用这种设计模式是否也是一种面向过程做法？是否对于充血模型实适用性情况相对少一点呢？对面向过程的交易流程、步骤适用性情况比较多一点呢？","like_count":1,"discussions":[{"author":{"id":1526729,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4b/c9/2daae009.jpg","nickname":"南田稗草💯","note":"","ucode":"105285DCF44991","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573692,"discussion_content":"我用map传惨代码扩展性极好🥹","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653612083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/0a/65976e95.jpg","nickname":"kougazhang","note":"","ucode":"E9AD678FCEC75D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539170,"discussion_content":"把参数裹在数组里，牛🐮！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639630416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","nickname":"笨鸟","note":"","ucode":"68029ADA76AA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309086,"discussion_content":"php的数组?干什么用的?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601187411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1813775,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/JicGWj4ujfKW2BibbV2BIdiaRVv1SLMCjnriaHjhiaP9Ey751wBp8rwUxJI4Y7eZZb3eHTHbyLXUa8m3a4Dy0QIANTA/132","nickname":"rxliuli","note":"","ucode":"557481BFA3F7B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197318,"discussion_content":"+1: 对于 ts 而言，没有什么参数是一个对象（可以通过解构取值）或元组（应该类似 PHP 中的数组吧）解决不了的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583417354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1608798,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8c/5e/8cb6fad1.jpg","nickname":"cbping","note":"","ucode":"16D891E80A352B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":154747,"discussion_content":"调用者会一脸懵逼的！到底是接受多少个参数？那些必须？key写错了？…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580179550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141476,"discussion_content":"秀，我把后端程序用php换成Java的时候，就被array搞的团团转","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579423203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1228471,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/b7/638b5d30.jpg","nickname":"白泗小林","note":"","ucode":"CEF6A23B70947D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":141509,"discussion_content":"作为java程序员 我在改PHP 代码的时候 也被array 搞的团团转","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579426867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":141476,"ip_address":""},"score":141509,"extra":""}]},{"author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141234,"discussion_content":"php看Java的代码能领略到要领么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579404115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1391748,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","nickname":"连边","note":"","ucode":"54B5DA38449728","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141258,"discussion_content":"还好，我原来是做java的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579405777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":141234,"ip_address":""},"score":141258,"extra":""}]},{"author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141233,"discussion_content":"不愧是最好的语言","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579404089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1094597,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","nickname":"Liam","note":"","ucode":"1D15D3B64F2606","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":138065,"discussion_content":"不愧是php","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579223244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228411,"user_name":"一壶浊酒","can_delete":false,"product_type":"c1","uid":1145530,"ip_address":"","ucode":"5D90F8F8121BBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/ba/8545f2d7.jpg","comment_is_top":false,"comment_ctime":1592661195,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5887628491","product_id":100039001,"comment_content":"看了就忘，所以还是要多看几遍，同时每过一段时间思考一下之前看的内容，看记住了多少，温故而知新嘛，同时在日长的编码中，也要不断的思考这边是否需要使用设计模式，是否符合一些设计原则。多复习,多练才能是自己不断巩固。","like_count":1},{"had_liked":false,"id":228253,"user_name":"君哥聊技术","can_delete":false,"product_type":"c1","uid":1325816,"ip_address":"","ucode":"2C9A22BCE4C79E","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/f8/c1a939e7.jpg","comment_is_top":false,"comment_ctime":1592624183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887591479","product_id":100039001,"comment_content":"设计阶段不断的思考，开发完之后不断的重构，总结思考，多想想设计是否合理，先说服自己，再分享给别人","like_count":1},{"had_liked":false,"id":228208,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1592613924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887581220","product_id":100039001,"comment_content":"一直跟着更新的节奏学习，收获还是颇多，但大多还是在理论的层面，没有真正的吸收内化，也有很多没有真正理解的，可能需要在项目实践中才能真正内化吧。下一步，准备找点优秀的框架源码看看，以设计模式的核心思路去学习，以此加深印象和理解，中途遇到疑惑在回顾此专栏的内容，相信会有更深的理解。","like_count":1},{"had_liked":false,"id":227997,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1592534254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887501550","product_id":100039001,"comment_content":"知识都是厚积薄发,先读,多读,最后自然能够融会贯通,就好比突然醍醐灌顶一样,一瞬间突然就发现自己能读懂源码了,再次之前,要有着大量知识积累","like_count":1},{"had_liked":false,"id":227971,"user_name":"努力学习呀","can_delete":false,"product_type":"c1","uid":1245154,"ip_address":"","ucode":"BE7A7A3C3BA893","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/e2/24a4dbdb.jpg","comment_is_top":false,"comment_ctime":1592531022,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5887498318","product_id":100039001,"comment_content":"第一遍全部只是看了一遍，马上开始第二遍将所有自己动手实现一遍画脑图，然后再看第三遍重新理解，再隔一段时间看一遍巩固知识点。老师讲的这些东西不看5遍我觉得我消化不透彻，老师讲的真好，赞！","like_count":1},{"had_liked":false,"id":227956,"user_name":"秦歌","can_delete":false,"product_type":"c1","uid":1461320,"ip_address":"","ucode":"0C6A3861BF6AFE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/vE94VZiawHoIxqWbPZOGDnl34vXEhhYTRWxiaUaRB1GbaOOQ6tjWib3icYQf9iaQvVJswUkY2wg2PR4FmrzIzmqTibHA/132","comment_is_top":false,"comment_ctime":1592529960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887497256","product_id":100039001,"comment_content":"感觉挺有收获的，至少写代码的时候先会想想，感觉前面的好多又忘了，还是要复习复习","like_count":1},{"had_liked":false,"id":227917,"user_name":"海平","can_delete":false,"product_type":"c1","uid":1011074,"ip_address":"","ucode":"E9AD91966B1D01","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6d/82/e059e75c.jpg","comment_is_top":false,"comment_ctime":1592526696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887493992","product_id":100039001,"comment_content":"专栏一路跟下来，很多设计模式理念对我已经产生潜移默化的影响，感谢老师的辛勤付出！日后自己也还会不断参悟精进，不忘初心：更优雅的解决设计问题","like_count":1},{"had_liked":false,"id":227916,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1592526693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887493989","product_id":100039001,"comment_content":"经验就是每当阅读源码或者看到有地方用到的时候，就立马记录下来，然后自己理解加翻看争哥的对应章节，自己写demo.做笔记。","like_count":1},{"had_liked":false,"id":227890,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1592522391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887489687","product_id":100039001,"comment_content":"专栏领进门，在实践中验证后才能转化成自己的知识和能力。<br>首先，专栏内容看了有个印象，建立索引，可以当工具书来查。有空时多翻翻，比如我看过最多遍的是重构那部分。<br>其次，工作中遇到新项目多去想想怎么架构和设计，遇到遗留系统就去想想怎么优化重构代码，减轻代码的坏味道。<br>最后，设计和重构都要把握个度，不要为了设计而设计，为了重构而重构，在保证交付的基础上提升代码质量。<br><br>PS：结合极客时间其他专栏，把知识体系化，交叉印证和强化。比如争哥的算法之美，欧老师的DDD，耗子叔的左耳听风等。","like_count":1},{"had_liked":false,"id":344597,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1651663242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651663242","product_id":100039001,"comment_content":"编码规范，单元测试，code review，文档，持续重构，拆分项目。","like_count":0},{"had_liked":false,"id":344474,"user_name":"恬毅","can_delete":false,"product_type":"c1","uid":1015240,"ip_address":"","ucode":"914ED16F3BE714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","comment_is_top":false,"comment_ctime":1651575435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651575435","product_id":100039001,"comment_content":"感恩王争老师，让我对设计模式的理解又加深了一些。<br>这是我根据课程画的一张结构图，以图的方式去记设计模式更清晰一些，有需要的伙伴可以参考：https:&#47;&#47;www.processon.com&#47;view&#47;link&#47;627107f2e401fd1b2468e8b3","like_count":0},{"had_liked":false,"id":343963,"user_name":"恬毅","can_delete":false,"product_type":"c1","uid":1015240,"ip_address":"","ucode":"914ED16F3BE714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","comment_is_top":false,"comment_ctime":1651144397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651144397","product_id":100039001,"comment_content":"通读一遍，下一步要画图把这几大模块在闹钟连接起来，然后实战中不断的复习才能逐渐掌握，感谢争佬","like_count":0},{"had_liked":false,"id":328729,"user_name":"idiot","can_delete":false,"product_type":"c1","uid":2526391,"ip_address":"","ucode":"D7A6E980B530B4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/fcftgBsticCicEEkuzB0GTkHIocX62YVTSvnhR1c94sccj42lVaYXrmcZyhzUI3l9NcvuN1rXLhXt2eBrZZ0Tw7A/132","comment_is_top":false,"comment_ctime":1640853889,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640853889","product_id":100039001,"comment_content":"一路看下来，印象最深的是可读性，解耦，复用，隔离。","like_count":0},{"had_liked":false,"id":313978,"user_name":"rocinn","can_delete":false,"product_type":"c1","uid":1015149,"ip_address":"","ucode":"12C7BCC4FA838C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/6d/81ed57c3.jpg","comment_is_top":false,"comment_ctime":1632789356,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632789356","product_id":100039001,"comment_content":"忘记了正常，要留有印象，实际开发能一下子想到有这么回事，具体再回来看","like_count":0},{"had_liked":false,"id":300348,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1625124817,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1625124817","product_id":100039001,"comment_content":"看一遍，能记住30%我就高兴了😂","like_count":0},{"had_liked":false,"id":290962,"user_name":"Yeyw","can_delete":false,"product_type":"c1","uid":1463740,"ip_address":"","ucode":"C9D20DB91C3BE5","user_header":"https://static001.geekbang.org/account/avatar/00/16/55/bc/fad0090b.jpg","comment_is_top":false,"comment_ctime":1619880376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619880376","product_id":100039001,"comment_content":"画思维导图，然后卡片式记忆，时不时回想。代码设计的时候应用并自己解读分析一遍","like_count":0},{"had_liked":false,"id":287784,"user_name":"涛","can_delete":false,"product_type":"c1","uid":2127651,"ip_address":"","ucode":"DF7EADC7606033","user_header":"https://static001.geekbang.org/account/avatar/00/20/77/23/05086907.jpg","comment_is_top":false,"comment_ctime":1618149164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618149164","product_id":100039001,"comment_content":"我感觉学了70%多 ，一是每节课做笔记，然后在工作开发过程，反复回想那个项目可以使用这个设计模式，不记得 就回头看老师讲的内容，反复复习~ ","like_count":0},{"had_liked":false,"id":283820,"user_name":"庄周梦蝶","can_delete":false,"product_type":"c1","uid":1693576,"ip_address":"","ucode":"7878ED3EB11E97","user_header":"https://static001.geekbang.org/account/avatar/00/19/d7/88/7dcde249.jpg","comment_is_top":false,"comment_ctime":1615947361,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615947361","product_id":100039001,"comment_content":"请问下老师，能否结合DDD领域驱动做些扩展？<br>想了解DDD领域驱动的原先如下：<br>对于一个架构师来说，在软件开发中如何降低系统复杂度是一个永恒的挑战，无论是 94 年 GoF 的 Design Patterns ， 99 年的 Martin Fowler 的 Refactoring ， 02 年的 P of EAA ，还是 03 年的 Enterprise Integration Patterns ，都是通过一系列的设计模式或范例来降低一些常见的复杂度。但是问题在于，这些书的理念是通过技术手段解决技术问题，但并没有从根本上解决业务的问题。所以 03 年 Eric Evans 的 Domain Driven Design 一书，以及后续 Vaughn Vernon 的 Implementing DDD ， Uncle Bob 的 Clean Architecture 等书，真正的从业务的角度出发，为全世界绝大部分做纯业务的开发提供了一整套的架构思路。","like_count":0},{"had_liked":false,"id":278318,"user_name":"zh","can_delete":false,"product_type":"c1","uid":1982711,"ip_address":"","ucode":"98772B1B6C6E06","user_header":"https://static001.geekbang.org/account/avatar/00/1e/40/f7/e62bbc62.jpg","comment_is_top":false,"comment_ctime":1612875613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612875613","product_id":100039001,"comment_content":"关于学了就忘的问题，首先要发自内心的认可、认真学（比如做思维导图，把自己的理解记录成笔记）。其次要用一些方法，比如隔一段时间再来看一遍（因为不是第一次，而且做了笔记、有过思考，所以花不了很多时间），或者碰到相关知识的时候再来过一遍，并把新的理解、感悟记到笔记中。","like_count":0},{"had_liked":false,"id":276560,"user_name":"Airsaid","can_delete":false,"product_type":"c1","uid":1115302,"ip_address":"","ucode":"5B90BC0044F376","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/a6/18c4f73c.jpg","comment_is_top":false,"comment_ctime":1612005102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612005102","product_id":100039001,"comment_content":"关于学了就忘的问题，我的个人经验就是：还是实践、独立思考的不够多。","like_count":0},{"had_liked":false,"id":266593,"user_name":"archerwong","can_delete":false,"product_type":"c1","uid":2223755,"ip_address":"","ucode":"B603E194520386","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKv92yhBU4EpUIeo4UgAQvsMGnu2S1XNxq2TyVWgw8n2ByDSm7JcqiaVibOTyr9sq2awZHq1dSYb2Vg/132","comment_is_top":false,"comment_ctime":1607407992,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607407992","product_id":100039001,"comment_content":"感谢老师，讲解到位，利于理解，不过记住了招式才是第一步，更重要的还是要灵活运用，多实践才能真正理解","like_count":0},{"had_liked":false,"id":254788,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1603187356,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603187356","product_id":100039001,"comment_content":"评论区的很多同学描绘的现象，在他们的身上我放佛也看到了自己的影子，所以，对于编程这件事来说，真的出了搬砖 -&gt; 学习循环往复之外，没有捷径可走，要是有捷径，那就是人工智能写代码的时代了吧，即使到了那时候，也得有人去研发人工智能相关的东西，所以还是得归结回来。<br><br>很多知识点，看了只是看了，如果不是自己手动去实践过根本不会有刻骨铭心的印象；但是如果自己动手过了，烙在印记里的东西会很多，难题自然就迎刃而解，这也是熟能生巧吧。<br><br>搬砖、学习，循环往复的实践，在一遍又一遍的实践中来加深印象，提升自己。","like_count":0},{"had_liked":false,"id":252012,"user_name":"桀","can_delete":false,"product_type":"c1","uid":1204584,"ip_address":"","ucode":"939C1EEFCFC08E","user_header":"https://static001.geekbang.org/account/avatar/00/12/61/68/e5f0ba39.jpg","comment_is_top":false,"comment_ctime":1602056397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602056397","product_id":100039001,"comment_content":"只大概记得一半了，不对，已经全忘了。","like_count":0}]}