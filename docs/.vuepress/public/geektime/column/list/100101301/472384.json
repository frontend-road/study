{"id":472384,"title":"07 | Nacos体系架构：什么是服务治理？","content":"<p>你好，我是姚秋辰。</p><p>从今天开始，我们的课程就正式进入Spring Cloud环节了。我先带你学习微服务架构中一个最重要的原理概念：<strong>服务治理</strong>。在概念讲解之后，我还会向你介绍<strong>Nacos服务注册中心的体系结构</strong>。通过这节课的学习，你可以了解微服务的完整生命周期，知晓服务注册中心在微服务架构中发挥了什么作用，这些内容能让你对Nacos的体系架构有一个比较全面的认识。</p><p>首先，让我通过一个例子告诉你服务治理解决了什么问题。</p><p>我的系统包含两个微服务（服务A和服务B），每一个微服务有10个虚拟节点，两个服务组成了一个20台虚拟机的微服务集群。如果此时微服务A想要调用微服务B，我们怎么来发起这个调用呢？</p><p>一种通用做法是：在服务A的配置文件中添加一个指向服务B的地址，但这个地址并不直接指向任何一台服务B集群中的节点，而是指向一个VIP（虚拟IP地址）或者是一个网关。这个VIP或网关背后维护了B集群的服务节点列表，VIP层通过负载均衡策略再将请求转到后面配置的某一台服务器。我画了一幅图来描述这个服务调用过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/0d/fcd15ed204d43fe615cb50acbe58010d.jpg?wh=2000x984\" alt=\"\"></p><p>从上面的图中我们可以看出，服务A与服务B之间互相不直接通信，服务调用完全依靠VIP作为中间人来完成。我们如果想要为服务集群扩容或缩容，必须将服务器配置到对应的VIP地址上。如果你的应用是一个由数百个微服务组成的大型应用，光是管理这些VIP Pool的人力成本就够网络运维团队喝上一壶了。</p><!-- [[[read_end]]] --><p>那在微服务架构中，怎么才能实现一种简单可靠的远程服务调用，不让VIP中间商赚差价呢？这就要说到我们的服务治理理论了。</p><h2>服务治理初探</h2><p>如果我们要解决中间商赚差价的问题，那么最好的办法就是让双方直连。因此，服务治理要解决的首要任务就是<strong>服务注册</strong>与<strong>服务发现</strong>，通过这两项技术，我们就能让微服务之间发起面对面的直接调用。</p><p>那么服务A怎么知道服务B中每台机器的地址呢？为了让服务A拿到服务B的机器清单，我们需要搭建一个<strong>中心化的服务注册中心</strong>，服务B只要将自己的信息添加到注册中心里，服务A就能够从注册中心获取到服务B的所有节点列表。我画了一张图来帮助你更好地理解这个过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/81/e2/81bd88faec1dd053104c3be5b6792de2.jpg?wh=2000x984\" alt=\"\"></p><p>从上图中的步骤中我们可以看出，首先，服务B集群向注册中心发起了注册，将自己的地址信息上报到注册中心，这个过程就是<strong>服务注册</strong>。接下来，每隔一段时间，服务A就会从服务中心获取服务B集群的服务列表，或者由服务中心将服务列表的变动推送给服务A，这个过程叫做<strong>服务发现</strong>；最后，服务A根据本地负载均衡策略，从服务列表中选取某一个服务B的节点，发起服务调用。</p><p>在这个过程中，<strong>注册中心的角色是一个中心化的信息管理者</strong>，所有的微服务节点在启动后都会将自己的地址信息添加到注册中心。在服务注册的过程中，有两个关键信息是最为重要的，我把它们列在了这里。</p><ol>\n<li><strong>服务名称</strong>：服务名称通常默认是spring.application.name属性，在服务注册过程中我们必须将应用服务名上报到注册中心，这样其他服务才能根据服务名称找到对应的服务节点列表；</li>\n<li><strong>地址信息</strong>：包括服务节点的IP地址和端口。</li>\n</ol><p>通过上面这两个信息，调用方就能精准定位到目标微服务。除此之外，服务注册请求中还包含一些额外的注册信息，我将在Nacos的实战环节为你详细讲解这些注册参数。</p><p>通过服务注册和服务发现，我们已经能够实现端到端的服务调用链路，但这个方案似乎还并不完善，因为它缺少了<strong>异常容错</strong>的机制。</p><p>如果服务B集群因为未知的网络故障导致无法响应服务，这时候服务A向服务B发起了服务调用，就会发生超时或者服务无响应的异常情况。那我们如何在服务治理方案中规避这类问题呢？</p><p>业界通用的解决方案是“heathcheck”或者“heartbeat”，又叫“服务探活”或“心跳检查”。注册中心可以通过这种机制来标记异常服务，这样一来，Client端在发送服务请求的时候就能避开异常节点。</p><p>我将这些异常处理的步骤添加到了服务注册流程中，并画了一个完整的微服务生命周期的图，你可以参考一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/f1/e7/f1ca43ff75242242a8b97b3df63a0ae7.jpg?wh=2000x984\" alt=\"\"></p><p>看了图片，你可能会问，怎么还有一个“服务剔除”呢？它是怎么实现的？</p><p>先说一个大前提。所有的服务都要在注册中心进行注册，而且每个节点都需要每隔一段时间向注册中心同步自己当前的状态，我们很形象地称这个过程为heartbeat（心跳）。</p><p>如果节点持续发送心跳信息，则一切正常，服务可以被发现；如果注册中心在一段时间内没有收到Client的心跳包，注册中心就会将这个节点标记为下线状态，进而将该服务从服务列表中剔除。</p><p>这里我再补充一句，我们上面说的“服务剔除”是由注册中心主导的“被动下线”场景。除此之外还有一类服务“主动下线”的场景，也就是当服务节点关闭或者重启的时候，通过发送一条“服务下线”指令给到注册中心，将当前节点标记为下线状态。</p><p>到这里，相信你已经完全理解了微服务生命周期各个状态间的流转，也知道了服务注册中心在微服务生命周期中扮演了什么角色。</p><p>接下来，我们来了解Spring Cloud中的服务注册中心Nacos。</p><h2>Nacos体系架构</h2><p>Nacos有三个核心知识点：领域模型、数据模型和基本架构，这是我们整体把握Nacos架构的关键。下面我们来依次看看。</p><h3>领域模型</h3><p>Nacos领域模型描述了服务与实例之间的边界和层级关系。Nacos的服务领域模型是以“服务”为维度构建起来的，这个服务并不是指集群中的单个服务器，而是指微服务的服务名。</p><p>“服务”是Nacos中位于最上层的概念，在服务之下，还有集群和实例的概念。为了方便你理解这三者的层级关系，我画了一张图，你可以参考一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/21/48/21d3938ce122a48652397c329b361948.jpg?wh=2000x984\" alt=\"\"></p><p>从上面的图中你可以看出，Nacos的服务领域模型从上到下分为了服务、集群和实例三层，我分别介绍一下这三个层次所包含的重要数据内容。</p><ol>\n<li><strong>服务</strong></li>\n</ol><p>在服务这个层级上我们可以配置元数据和服务保护阈值等信息。服务阈值是一个0~1之间的数字，当服务的健康实例数与总实例的比例小于这个阈值的时候，说明能提供服务的机器已经没多少了。这时候Nacos会开启服务保护模式，不再主动剔除服务实例，同时还会将不健康的实例也返回给消费者。尽管这样做可能造成请求失败，但间接保证了最低限度的服务可用性。</p><ol start=\"2\">\n<li><strong>集群</strong></li>\n</ol><p>一个服务由很多服务实例组成，在每个服务实例启动的时候，我们可以设置它所属的集群，在集群这个层级上，我们也可以配置元数据。除此之外，我们还可以为持久化节点设置健康检查模式。</p><p>所谓持久化节点，是一种会保存到Nacos服务端的实例，即便该实例的客户端进程没有在运行，实例也不会被服务端删除，只不过Nacos会将这个持久化节点状态标记为不健康，Nacos可以采用一种“主动探活”的方式来对持久化节点做健康检查。</p><p>除了持久化节点以外，大部分服务节点在Nacos中以“临时节点”的方式存在，它是默认的服务注册方式，从名字中我们就可以看出，这种节点不会被持久化保存在Nacos服务器，临时节点通过主动发送heartbeat请求向服务器报送自己的状态。</p><ol start=\"3\">\n<li><strong>实例</strong></li>\n</ol><p>这里所说的实例就是指服务节点，我们可以在Nacos控制台查看每个实例的IP地址和端口、编辑实例的元数据信息、修改它的上线/下线状态或者配置路由权重等等。</p><p>你会发现，在这三个层级上都有“元数据”这一数据结构，你可以把它理解为一组包含了服务描述信息（如服务版本等）和自定义标签的数据集合。Client端通过服务发现技术可以获取到每个服务实例的元数据，你可以将自定义的属性加入到元数据并在Client端实现某些定制化的业务场景。</p><p>了解了领域模型之后，你知道服务调用的发起方是如何定位到领域模型中的服务实例的吗？这就要说起Nacos的数据模型了。</p><h3>数据模型</h3><p>Nacos的数据模型有三个层次结构，分别是Namespace、Group和Service/DataId，我画了一幅图，帮你理解这三个层次之间的包含关系：</p><p><img src=\"https://static001.geekbang.org/resource/image/e8/ee/e89a90d5cdb2d4929a8e44cf5c747fee.jpg?wh=2000x984\" alt=\"\"></p><p>从上图中你可以看出，Namespace、Group和Service/DataId是一个依次包含的结构，我分别对每一层做一个简单介绍。</p><ul>\n<li><strong>Namespace</strong>：即命名空间，它是最顶层的数据结构，我们可以用它来区分开发环境、生产环境等不同环境。默认情况下，所有服务都部署到一个叫做“public”的公共命名空间；</li>\n<li><strong>Group</strong>：在命名空间之下有一个分组结构，默认情况下所有微服务都属于“DEFAULT_GROUP”这个分组，不同分组间的微服务是相互隔离的；</li>\n<li><strong>Service/DataID</strong>：在Group分组之下，就是具体的微服务了，比如订单服务、商品服务等等。</li>\n</ul><p>通过<strong>Namespace + Group + Service/DataID</strong>，我们就可以精准定位到一个具体的微服务。比如，我想调用生产环境下A分组的订单服务，那么对应的服务寻址的Key就是类似Production.A.orderService的组合。</p><p>了解了Nacos的数据模型之后，我再来带你看一下Nacos的基本架构，这样你就对Nacos的功能模块有一个更全面的认识。</p><h3>Nacos基本架构</h3><p>Nacos的核心功能有两个，一个是 <strong>Naming Service</strong>，也就我们用来做服务发现的模块；另一个是 <strong>Config Service</strong>，用来提供配置项管理、动态更新配置和元数据的功能，关于配置管理的内容我会放到课程中的配置管理阶段为你详细讲解。</p><p>我这里用一张Nacos社区的基本架构图来作为示例，带你看一下Nacos在功能模块层面的基本架构。</p><p><img src=\"https://static001.geekbang.org/resource/image/d3/59/d3a2227dcdab8b7ddc786c9653c6bc59.jpg?wh=2000x984\" alt=\"\"></p><p>从上面的图中你可以看出，Provider APP和Consumer APP通过Open API和Nacos服务器的核心模块进行通信。这里的Open API是一组对外暴露的RESTful风格的HTTP接口。如果你对Open API里具体的接口感兴趣，可以从<a href=\"https://nacos.io/zh-cn/docs/open-api.html\">Nacos官方网站</a>获取更多的关于Open API的详细信息。</p><p>在Nacos和核心模块里，Naming Service提供了将对象和实体的“名字”映射到元数据的功能，这是服务发现的基础功能之一。例如，我想要调用OrderService，我手里有这个服务的Namespace和Group信息，那么我就可以通过Naming Service定位到这个服务对应的实例列表。同理，如果我有一个DNS名称，同样可以借助Naming Service获取DNS背后配置的IP列表。以上两个场景就分别对应了服务发现和DNS功能，这两个场景都是Naming Service的核心场景。</p><p>Nacos还有一个相当重要的模块：<strong>Nacos Core</strong> 模块。它可以提供一系列的平台基础功能，是支撑Nacos上层业务场景的基石。我挑选了几个Nacos Core中包含的重要功能，你可以看一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/12/d0c78d0c0f2bb72c45788a5c2d423512.jpg?wh=2000x984\" alt=\"\"></p><p>除了Nacos Core提供的这些功能以外，Nacos还有一个“一致性协议”，用来确保Nacos集群中各个节点之间的数据一致性。Nacos内部支持两种一致性协议，一种是侧重一致性的Raft协议，基于集群中选举出来的Leader节点进行数据写入；另一种是针对临时节点的Distro协议，它是一个侧重可用性（或最终一致性）的分布式一致性协议。</p><p>到这里，我们就完成了Nacos的基本架构部分的学习。</p><h2>总结</h2><p>现在，我们来回顾一下这节课的重点内容。今天我带你了解了服务治理所解决的问题。在这个问题解决的过程中，你自然建立起了对微服务生命周期各个状态的了解，你也能清楚地感受到服务注册中心Nacos的重要程度。为了让你更全面地认识 <strong>Nacos的功能体系</strong>，我为你讲解了领域模型、数据模型和基础架构。</p><p>此外，我要给你一个小提示，虽然这节课我并没有深入介绍Nacos底层一致性协议的原理，但<strong>一致性协议是近年来面试中常问到的热点问题</strong>，我建议你借这个机会，去主动了解一些常见的经典协议。</p><p>在后面的课程中，我将带你搭建一个Nacos服务器集群，通过对Spring Boot项目的Nacos服务化改造，将实战项目里的本地方法调用改为微服务架构下的远程调用。通过实战环节的动手练习，你将对本节课的理论内容有更深的理解。</p><h2>思考题</h2><p>如果你正在开发的业务系统采用的是微服务架构，那么你如何实现远程服务调用呢？欢迎在留言区写下你的技术方案和技术选型，最好能再描述下背后的原理。</p><p>好啦，这节课就结束啦。欢迎你把这节课分享给更多对Spring Cloud感兴趣的朋友。我是姚秋辰，我们下节课再见！</p>","comments":[{"had_liked":false,"id":328346,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1640679152,"is_pvip":false,"replies":[{"id":"119587","content":"比如说，一个妹子被劈腿了，她要跟渣男分手，分手这个事儿分两步，1）扇渣男一巴掌 2）吼一句：给老娘滚！<br><br>这两步一气呵成缺一不可，如果你只删了一巴掌，渣男还一脸懵逼都不知道这是为啥。所以两件事儿都做完了，才达成目的，要做都做，要么都不做。这就是事务的一致性<br><br>事务不一致的情况很常见，比如巴掌扇了，“滚”始终没有勇气喊出来，这种情况怎么办？这就是我在后面课程将要讲到的，如何用seata组件保证事务的一致性，同学敬请期待。<br>","user_name":"作者回复","comment_id":328346,"uid":"2819998","ip_address":"","utype":1,"ctime":1640689669,"user_name_real":"编辑"}],"discussion_count":6,"race_medal":0,"score":"53180286704","product_id":100101301,"comment_content":"想请教老师为啥要保持一致性？","like_count":13,"discussions":[{"author":{"id":1447739,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eou1BMETumU21ZI4yiaLenOMSibzkAgkw944npIpsJRicmdicxlVQcgibyoQ00rdGk9Htp1j0dM5CP2Fibw/132","nickname":"寥若晨星","note":"","ucode":"2E87E43687DE72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552810,"discussion_content":"我觉得老师这个例子更像是原子性，两件事要么不做，要么全做；一致性应该是渣女跟一个备胎说没有前男友，跟另一个备胎说有一个前男友，数据不一致最后出问题了","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1645600370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2725667,"avatar":"https://static001.geekbang.org/account/avatar/00/29/97/23/9c9bd0d4.jpg","nickname":"苜蓿°","note":"","ucode":"BEEDCB2B88363A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1447739,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eou1BMETumU21ZI4yiaLenOMSibzkAgkw944npIpsJRicmdicxlVQcgibyoQ00rdGk9Htp1j0dM5CP2Fibw/132","nickname":"寥若晨星","note":"","ucode":"2E87E43687DE72","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554259,"discussion_content":"从最终目的来说，老师这个例子好像没问题吧。\n男的觉得没分手，女的觉得已经分手了，两边不一致。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646290646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552810,"ip_address":""},"score":554259,"extra":""},{"author":{"id":3182044,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIMZwQMLtbqbjd4rpZJRX3JrTLbSgEeqo46oPE0mr2o0rSrfbpk9ZnSuTaicrQlor8tj0ibVibFibPhQQ/132","nickname":"Geek_f23ad6","note":"","ucode":"811D450DD909B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1447739,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eou1BMETumU21ZI4yiaLenOMSibzkAgkw944npIpsJRicmdicxlVQcgibyoQ00rdGk9Htp1j0dM5CP2Fibw/132","nickname":"寥若晨星","note":"","ucode":"2E87E43687DE72","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588058,"discussion_content":"原子性、隔离性、持久性是手段，一致性是目的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1663509617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552810,"ip_address":"陕西"},"score":588058,"extra":""}]},{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542242,"discussion_content":"比如说，一个妹子被劈腿了，她要跟渣男分手，分手这个事儿分两步，1）扇渣男一巴掌 2）吼一句：给老娘滚！\n\n这两步一气呵成缺一不可，如果你只删了一巴掌，渣男还一脸懵逼都不知道这是为啥。所以两件事儿都做完了，才达成目的，要做都做，要么都不做。这就是事务的一致性\n\n事务不一致的情况很常见，比如巴掌扇了，“滚”始终没有勇气喊出来，这种情况怎么办？这就是我在后面课程将要讲到的，如何用seata组件保证事务的一致性，同学敬请期待。\n","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1640689669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1434423,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e3/37/c132802f.jpg","nickname":"WESTWALL","note":"","ucode":"295A030F9D3BF4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542716,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640829754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1401266,"avatar":"https://static001.geekbang.org/account/avatar/00/15/61/b2/f36c1d40.jpg","nickname":"破发者","note":"","ucode":"3B3091527479F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542314,"discussion_content":"很形象🤙🤙🤙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640706642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328150,"user_name":"gevin","can_delete":false,"product_type":"c1","uid":1005862,"ip_address":"","ucode":"B5AD68F1884A1F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/26/1015d573.jpg","comment_is_top":false,"comment_ctime":1640575081,"is_pvip":true,"replies":[{"id":"119502","content":"spring.cloud.nacos.discovery或者spring.cloud.inetutils下可以指定宿主机IP，我一般本地测试就用这个方法，再设置docker网络用host模式，这样就可以共用同一个物理机","user_name":"作者回复","comment_id":328150,"uid":"2819998","ip_address":"","utype":1,"ctime":1640613554,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"36000313449","product_id":100101301,"comment_content":"老师，请教个问题。用nacos做服务注册时，如果有些服务时本地起的，有些是docker起的，那么默认情况下，docker起的服务，nacos中的注册地址是docker内部IP，本地起的服务，nacos中注册地址是本地服务器的IP，这就导致了本地服务访问不到docker服务的问题。<br>对于这个问题，现在用的比较多的解决方案有哪些？","like_count":9,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541954,"discussion_content":"spring.cloud.nacos.discovery或者spring.cloud.inetutils下可以指定宿主机IP，我一般本地测试就用这个方法，再设置docker网络用host模式，这样就可以共用同一个物理机","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640613554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1005862,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/26/1015d573.jpg","nickname":"gevin","note":"","ucode":"B5AD68F1884A1F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":542364,"discussion_content":"如果是开发环境的服务，本地开发需要用到开发环境线上的其他服务，是不是只能要求整个开发环境按老师这个方案来部署了？ 还有其他备选方案么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640741228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":541954,"ip_address":""},"score":542364,"extra":""}]}]},{"had_liked":false,"id":345425,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1155437,"ip_address":"","ucode":"0FF1C4EAF7F98A","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/6d/a4ff33bb.jpg","comment_is_top":false,"comment_ctime":1652262089,"is_pvip":true,"replies":[{"id":"126161","content":"既然是AP倾向的系统（可用性优先+最终一致性），不可能保证100%的调用成功率，作为调用方要做好一致性保障。比如说两个强绑定的先后调用，如果一致性要求非常高，可以改成分布式事务，或者事务型消息，也可以在上游做重试+记录日志表+补偿job等方式容错","user_name":"作者回复","comment_id":345425,"uid":"2819998","ip_address":"","utype":1,"ctime":1652583662,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"23127098569","product_id":100101301,"comment_content":"请教老师一下，如果在a服务调用b服务的时候，b服务挂了，好像探活是有时间间隔的，万一刚好在这种时间间隔中，怎么处理","like_count":6,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572044,"discussion_content":"既然是AP倾向的系统（可用性优先+最终一致性），不可能保证100%的调用成功率，作为调用方要做好一致性保障。比如说两个强绑定的先后调用，如果一致性要求非常高，可以改成分布式事务，或者事务型消息，也可以在上游做重试+记录日志表+补偿job等方式容错","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1652583663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330681,"user_name":"梁😜","can_delete":false,"product_type":"c1","uid":1034977,"ip_address":"","ucode":"078473C50B802B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ca/e1/d8537537.jpg","comment_is_top":false,"comment_ctime":1642119737,"is_pvip":false,"replies":[{"id":"120827","content":"同学说的没错，像共识算法也是面试里经常被问到的问题","user_name":"作者回复","comment_id":330681,"uid":"2819998","ip_address":"","utype":1,"ctime":1642314157,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"23116956217","product_id":100101301,"comment_content":"为啥要保持一致性？因为Nacos 是一个需要存储数据的中间件，因此就需要在 Nacos 内部实现数据存储。单机下其实问题不大，简单的内嵌关系型数据库即可；但是集群模式下，就需要考虑如何保障各个节点之间的数据一致性以及数据同步，而要解决这个问题，就不得不引入共识算法，通过算法来保障各个节点之间的数据的一致性。","like_count":6,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546475,"discussion_content":"同学说的没错，像共识算法也是面试里经常被问到的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642314158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328319,"user_name":"起开我要掉渣了","can_delete":false,"product_type":"c1","uid":1652339,"ip_address":"","ucode":"08380BFB612005","user_header":"https://static001.geekbang.org/account/avatar/00/19/36/73/7fb4d31f.jpg","comment_is_top":false,"comment_ctime":1640665042,"is_pvip":false,"replies":[{"id":"119579","content":"这位同学你先坐稳扶好，别急，男人嘛还是要慢~慢~来~ 太快不好<br><br>车门已焊死，不学完你不能下车！","user_name":"作者回复","comment_id":328319,"uid":"2819998","ip_address":"","utype":1,"ctime":1640674320,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"18820534226","product_id":100101301,"comment_content":"速更速更+++","like_count":4,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542171,"discussion_content":"这位同学你先坐稳扶好，别急，男人嘛还是要慢~慢~来~ 太快不好\n\n车门已焊死，不学完你不能下车！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640674320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142335,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/3f/49e5079f.jpg","nickname":"楞伽山人","note":"","ucode":"5859C06DAC790D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542934,"discussion_content":"速更速更+++","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640909324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328230,"user_name":"暮雨yl晨曦","can_delete":false,"product_type":"c1","uid":1052785,"ip_address":"","ucode":"18E5D3A93E67FF","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/71/d6c2e3a0.jpg","comment_is_top":false,"comment_ctime":1640615311,"is_pvip":false,"replies":[{"id":"119575","content":"gRPC太难用了，protobuf坑很多，而且有时候自定义新属性的时候，新手很可能不知道要“追加”新属性，而是删除之前老的上线属性加塞一个新属性，造成各种线上问题。横向比较淘系的hsf还有阿里开源的dubbo，确实开发维护成本上来讲grpc有点坑","user_name":"作者回复","comment_id":328230,"uid":"2819998","ip_address":"","utype":1,"ctime":1640673662,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"14525517199","product_id":100101301,"comment_content":"我们部门原先用的是gRpc，不好用。无论是调试还是写proto文件都很麻烦，我记得我第一次用这玩意，搞了好几天才跑通。现在使用的用dubbo居多。我们正在考虑要用SpringCloud Alibaba，我想要深入了解一下这块。正好看到现在的课程，就买来顺手学一下。","like_count":4,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542163,"discussion_content":"gRPC太难用了，protobuf坑很多，而且有时候自定义新属性的时候，新手很可能不知道要“追加”新属性，而是删除之前老的上线属性加塞一个新属性，造成各种线上问题。横向比较淘系的hsf还有阿里开源的dubbo，确实开发维护成本上来讲grpc有点坑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640673662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339416,"user_name":"Geek9382","can_delete":false,"product_type":"c1","uid":2927904,"ip_address":"","ucode":"638288F553332F","user_header":"","comment_is_top":false,"comment_ctime":1648089631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10238024223","product_id":100101301,"comment_content":"主动探活很重要。。尤其是 心跳绝大部分都是与tomcat这种容器的线程池分开来的。。一旦tomcat挂了或者响应缓慢，心跳依旧维持没有任何问题，只能通过其他手段区别服务健康度了，比如响应时间 错误码频次等","like_count":3},{"had_liked":false,"id":330017,"user_name":"~","can_delete":false,"product_type":"c1","uid":2495621,"ip_address":"","ucode":"BE5E3BD6EE3665","user_header":"https://static001.geekbang.org/account/avatar/00/26/14/85/73e55be5.jpg","comment_is_top":false,"comment_ctime":1641733122,"is_pvip":false,"replies":[{"id":"120279","content":"1. 同学理解的不错，通常情况下namespace用作租户隔离的情况比较多，因为大厂里经常会在不同环境下配置单独的nacos集群。比如测试环境和生产环境，这两个nacos一般不会混用。<br>2. 领域模型DDD其实是领域建模，并不是物理集群的意思，而是微服务拆分的范畴。说如何把一个庞大的业务，根据各自的业务属性和边界，分拆为一个个独立的领域，构建领域模型。比如我们经常听到的支付域、订单域其实就是顶层域，然后再逐渐向下分拆。","user_name":"作者回复","comment_id":330017,"uid":"2819998","ip_address":"","utype":1,"ctime":1641820521,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"10231667714","product_id":100101301,"comment_content":"nacos 的领域模型和数据模型感觉我搞得不是很清晰，讲一下自己的想法，老师麻烦纠正一下。<br>1. 数据模型我还明白点，从 namespace 到 group 再到 service ID，就是颗粒度不断减小的趋势。从开发环境或者租户隔离，到每个环境下不同分组（这里的分组看了9节的内容，感觉就是用来在 namespace 的隔离基础上自定义的隔离，比如namespace 作为租户的隔离，那么 group 就可以作为每个租户的环境隔离），再到 group 中的每个微服务（例如项目的 template 服务，calculation 服务，customer 服务，这种具体的服务）。<br>2. 领域模型就有些搞不懂了，实例就是每台机器提供单独的服务，集合起来就是一个集群，但是之后的服务我就有些不理解，是一个「服务」包含那张图以下的集群吗？那么服务这个「定义」是向其他的服务提供服务吗？还是我理解的：一个集群通过「服务」向其他集群请求、响应，这里的「服务」就是一个中转站。<br>写的有些乱，我自己也有点捉摸不透，还麻烦老师回答一下，谢谢！","like_count":3,"discussions":[{"author":{"id":1109390,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/8e/dc7e2ca6.jpg","nickname":"kernel","note":"","ucode":"511BBA152F64CB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546473,"discussion_content":"其实老师关于那个【服务】的图。顶层服务，指的一个具体的微服务名（例如，订单服务，或者课程中的优惠券模板服务），然后服务是可以部署在不同的实例上，这样多个实例就组成了集群，所以顶层那个【服务】确实是可以理解成包含集群的，这是我的理解，奴知道正确不","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1642313666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545077,"discussion_content":"1. 同学理解的不错，通常情况下namespace用作租户隔离的情况比较多，因为大厂里经常会在不同环境下配置单独的nacos集群。比如测试环境和生产环境，这两个nacos一般不会混用。\n2. 领域模型DDD其实是领域建模，并不是物理集群的意思，而是微服务拆分的范畴。说如何把一个庞大的业务，根据各自的业务属性和边界，分拆为一个个独立的领域，构建领域模型。比如我们经常听到的支付域、订单域其实就是顶层域，然后再逐渐向下分拆。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641820521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328149,"user_name":"gevin","can_delete":false,"product_type":"c1","uid":1005862,"ip_address":"","ucode":"B5AD68F1884A1F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/26/1015d573.jpg","comment_is_top":false,"comment_ctime":1640574801,"is_pvip":true,"replies":[{"id":"119501","content":"我也比较喜欢http rest调用，国外公司用的会比较多。相比hsf, dubbo这类在国内比较流行的框架来说，另一个在国外流行的grpc真的是太难用了，定义protobuf就够喝上一壶。不过dubbo集成成本更低，丢一个api就能给上下游依赖方做远程调用","user_name":"作者回复","comment_id":328149,"uid":"2819998","ip_address":"","utype":1,"ctime":1640612825,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"10230509393","product_id":100101301,"comment_content":"远程服务调用，本质上都是RPC；但是，RESTful这种架构风格，统一了双方的通信契约，如，统一用http作为通信协议，URL均面向资源，用http方法映射为资源的CRUD，http code 反应API的语意，用json或xml做完数据的载体等，这让RESTful对开发人员更友好，也方便了异构系统等集成，所以，微服务架构，用RESTful架构风格设计API最合适","like_count":3,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541950,"discussion_content":"我也比较喜欢http rest调用，国外公司用的会比较多。相比hsf, dubbo这类在国内比较流行的框架来说，另一个在国外流行的grpc真的是太难用了，定义protobuf就够喝上一壶。不过dubbo集成成本更低，丢一个api就能给上下游依赖方做远程调用","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640612825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331817,"user_name":"西门吹牛","can_delete":false,"product_type":"c1","uid":1508990,"ip_address":"","ucode":"E5D3624DDE1E83","user_header":"https://static001.geekbang.org/account/avatar/00/17/06/7e/735968e2.jpg","comment_is_top":false,"comment_ctime":1642783581,"is_pvip":false,"replies":[{"id":"121282","content":"我还是比较喜欢dubbo和hsf的风格，互联网公司搞的框架对开发人员比较友好","user_name":"作者回复","comment_id":331817,"uid":"2819998","ip_address":"","utype":1,"ctime":1642920974,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5937750877","product_id":100101301,"comment_content":"远程调用，直接 http 请求调用，rpc调用，网关调用<br>http 请求：太麻烦，需要些一堆代码，或者封装工具类，每次调用也需要引入工具类<br>rpc：更灵活，更方便，就像调用本地方法一样，了解过 dubbo 和 Feign，二者本质区别就是协议的区别， Feign 基于HTTP，dubbo 支持多种协议，感觉dubbo 更加轻量化<br>网关调用：可以在网关做统一的控制，比如限流，鉴权等","like_count":2,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547882,"discussion_content":"我还是比较喜欢dubbo和hsf的风格，互联网公司搞的框架对开发人员比较友好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642920975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328677,"user_name":"Mars","can_delete":false,"product_type":"c1","uid":1300378,"ip_address":"","ucode":"84E7821DF19382","user_header":"https://static001.geekbang.org/account/avatar/00/13/d7/9a/38d14e5f.jpg","comment_is_top":false,"comment_ctime":1640833517,"is_pvip":false,"replies":[{"id":"119771","content":"apollo也很稳，国内用的挺广泛的，我自己感觉比spring cloud config好用","user_name":"作者回复","comment_id":328677,"uid":"2819998","ip_address":"","utype":1,"ctime":1640860440,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5935800813","product_id":100101301,"comment_content":"我们现在用的是eureka+apollo做的企业级的注册中心和配置中心。","like_count":2,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542846,"discussion_content":"apollo也很稳，国内用的挺广泛的，我自己感觉比spring cloud config好用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640860440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328171,"user_name":"李峰","can_delete":false,"product_type":"c1","uid":1107209,"ip_address":"","ucode":"3DA3574DB432A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/09/ddabec76.jpg","comment_is_top":false,"comment_ctime":1640587607,"is_pvip":false,"replies":[{"id":"119500","content":"同学是启动的“1-服务治理和负载均衡Nacos+Loadbalancer”这个folder下的项目并且未做任何修改吗？还是自己本地做了一些修改的项目呢？可以把完整的报错栈打印出来看一下，我感觉是没有加Loadbalanced注解或者依赖项导致的问题","user_name":"作者回复","comment_id":328171,"uid":"2819998","ip_address":"","utype":1,"ctime":1640612617,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"5935554903","product_id":100101301,"comment_content":"java.net.UnknownHostException: failed to resolve &#39;coupon-template-serv&#39; after 2 queries <br>\tat io.netty.resolver.dns.DnsResolveContext.finishResolve(DnsResolveContext.java:1013) ~[netty-resolver-dns-4.1.58.Final.jar:4.1.58.Final]<br>我的三个服务都是起到windos的环境里面，老师保证错，这个coupon-template-serv域名他是在哪里解析成我的ip的？是需要配置什么吗？","like_count":2,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541949,"discussion_content":"同学是启动的“1-服务治理和负载均衡Nacos+Loadbalancer”这个folder下的项目并且未做任何修改吗？还是自己本地做了一些修改的项目呢？可以把完整的报错栈打印出来看一下，我感觉是没有加Loadbalanced注解或者依赖项导致的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640612617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329407,"user_name":"Geek_e93c48","can_delete":false,"product_type":"c1","uid":2878664,"ip_address":"","ucode":"4418236B0BF4DE","user_header":"","comment_is_top":false,"comment_ctime":1641342212,"is_pvip":false,"replies":[{"id":"120016","content":"如果B有一些节点挂掉了，会通过心跳的方式做服务剔除并通知A，这就不会调用了。但是这中间肯定还是有一定的延迟，也就是说A是有可能调用到挂掉的B的","user_name":"作者回复","comment_id":329407,"uid":"2819998","ip_address":"","utype":1,"ctime":1641398895,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1641342212","product_id":100101301,"comment_content":"老师，假如有A服务拉取完B服务列表，但是B服务有一些节点立即挂掉了，A服务还会调用这些节点吗，如果调用，那我的上流业务是不是一直会请求超时，直到A服务重新拉取B的服务列表","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544121,"discussion_content":"如果B有一些节点挂掉了，会通过心跳的方式做服务剔除并通知A，这就不会调用了。但是这中间肯定还是有一定的延迟，也就是说A是有可能调用到挂掉的B的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641398896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328232,"user_name":"暮雨yl晨曦","can_delete":false,"product_type":"c1","uid":1052785,"ip_address":"","ucode":"18E5D3A93E67FF","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/71/d6c2e3a0.jpg","comment_is_top":false,"comment_ctime":1640615604,"is_pvip":false,"replies":[{"id":"119567","content":"我刚想案例黄老师的算法课来着哈哈，里面会有distro协议的讲解。我让编辑大大记一个，后面整体出完课程之后看怎么安排加餐","user_name":"作者回复","comment_id":328232,"uid":"2819998","ip_address":"","utype":1,"ctime":1640673022,"user_name_real":"编辑"}],"discussion_count":6,"race_medal":0,"score":"1640615604","product_id":100101301,"comment_content":"老师这节课中提到了一致性协议，没有深入刨析，希望后续能有加餐，结合nacos深入讲解一下。","like_count":1,"discussions":[{"author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542151,"discussion_content":"我刚想案例黄老师的算法课来着哈哈，里面会有distro协议的讲解。我让编辑大大记一个，后面整体出完课程之后看怎么安排加餐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640673022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":5,"child_discussions":[{"author":{"id":1052785,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/71/d6c2e3a0.jpg","nickname":"暮雨yl晨曦","note":"","ucode":"18E5D3A93E67FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":542158,"discussion_content":"是极客时间的算法训练营吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640673473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":542151,"ip_address":""},"score":542158,"extra":""},{"author":{"id":2843182,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/62/2e/6cd7e076.jpg","nickname":"Angela","note":"","ucode":"0C144DE7ECB865","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":1052785,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/71/d6c2e3a0.jpg","nickname":"暮雨yl晨曦","note":"","ucode":"18E5D3A93E67FF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542212,"discussion_content":"是黄清昊老师的专栏《算法实战高手课》哦~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640683852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":542158,"ip_address":""},"score":542212,"extra":""},{"author":{"id":2843182,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/62/2e/6cd7e076.jpg","nickname":"Angela","note":"","ucode":"0C144DE7ECB865","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":2819998,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/07/9e/d2de2832.jpg","nickname":"姚半仙","note":"","ucode":"4C86AA5D6D8C39","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":542213,"discussion_content":"编辑：你这里欠我的（加餐），用什么还？！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640683990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":542151,"ip_address":""},"score":542213,"extra":""}]}]}]}