{"id":215116,"title":"18 | Hashicorp Raft（二）：如何以“集群节点”为中心使用API？","content":"<p>你好，我是韩健。</p><p>上一讲结束后，相信有的同学已经跃跃欲试，想把Hashicorp Raft使用起来了。不过，也有一些同学跟我反馈，说自己看到Hashicorp Raft的<a href=\"https://godoc.org/github.com/hashicorp/raft\">Godoc</a>，阅读完接口文档后，感觉有些不知所措，无从下手，Hashicorp Raft支持了那么多的函数，自己却不知道如何将这些函数使用起来。</p><p>这似乎是一个共性的问题，在我看来，之所以出现这个问题，是因为文档里虽然提到了API的功能，但并没有提如何在实际场景中使用这些API，每个API都是孤立的点，缺乏一些场景化的线将它们串联起来。</p><p>所以，为了帮你更好地理解Hashicorp Raft的API接口，在实践中将它们用起来，我以“集群节点”为核心，通过创建、增加、移除集群节点，查看集群节点状态这4个典型的场景，具体聊一聊在Hashicorp Raft中，通过哪些API接口能创建、增加、移除集群节点，查看集群节点状态。这样一来，我们会一步一步，循序渐进地彻底吃透Hashicorp Raft的API接口用法。</p><p>我们知道，开发实现一个Raft集群的时候，首先要做的第一个事情就是创建Raft节点，那么在Hashicorp Raft中如何创建节点呢？</p><h2>如何创建Raft节点</h2><!-- [[[read_end]]] --><p>在Hashicorp Raft中，你可以通过NewRaft()函数，来创建Raft节点。我强调一下，NewRaft()是非常核心的函数，是Raft节点的抽象实现，NewRaft()函数的原型是这样的：</p><pre><code>func NewRaft(\n        conf *Config, \n        fsm FSM, \n        logs LogStore, \n        stable StableStore, \n        snaps SnapshotStore, \n        trans Transport) (*Raft, error)\n</code></pre><p>你可以从这段代码中看到，NewRaft()函数有这么几种类型的参数，它们分别是：</p><ul>\n<li>Config（节点的配置信息）；</li>\n<li>FSM（有限状态机）；</li>\n<li>LogStore（用来存储Raft的日志）；</li>\n<li>StableStore（稳定存储，用来存储Raft集群的节点信息等）；</li>\n<li>SnapshotStore（快照存储，用来存储节点的快照信息）；</li>\n<li>Transport（Raft节点间的通信通道）。</li>\n</ul><p>这6种类型的参数决定了Raft节点的配置、通讯、存储、状态机操作等核心信息，所以我带你详细了解一下，在这个过程中，你要注意是如何创建这些参数信息的。</p><p>Config是节点的配置信息，可通过函数DefaultConfig()来创建默认配置信息，然后按需修改对应的配置项。一般情况下，使用默认配置项就可以了。不过，有时你可能还是需要根据实际场景，来调整配置项的，比如：</p><ul>\n<li>如果在生产环境中部署的时候，你可以将LogLevel从DEBUG调整为WARM或ERROR；</li>\n<li>如果部署环境中网络拥堵，你可以适当地调大HeartbeatTimeout的值，比如，从1s调整为1.5s，避免频繁的领导者选举；</li>\n</ul><p>那么FSM又是什么呢？它是一个interface类型的数据结构，借助Golang Interface的泛型编程能力，应用程序可以实现自己的Apply(*Log)、Snapshot()、Restore(io.ReadCloser) 3个函数，分别实现将日志应用到本地状态机、生成快照和根据快照恢复数据的功能。FSM是日志处理的核心实现，原理比较复杂，不过不是咱们本节课的重点，现在你只需要知道这3个函数就可以了。在20讲，我会结合实际代码具体讲解的。</p><p>第三个参数LogStore存储的是Raft日志，你可以用<a href=\"https://github.com/hashicorp/raft-boltdb\">raft-boltdb</a>来实现底层存储，持久化存储数据。在这里我想说的是，raft-boltdb是Hashicorp团队专门为Hashicorp Raft持久化存储而开发设计的，使用广泛，打磨充分。具体用法是这样的：</p><pre><code>logStore, err := raftboltdb.NewBoltStore(filepath.Join(raftDir, &quot;raft-log.db&quot;))\n</code></pre><p>NewBoltStore()函数只支持一个参数，也就是文件路径。</p><p>第四个参数StableStore存储的是节点的关键状态信息，比如，当前任期编号、最新投票时的任期编号等，同样，你也可以采用raft-boltdb来实现底层存储，持久化存储数据。</p><pre><code>stableStore, err := raftboltdb.NewBoltStore(filepath.Join(raftDir, &quot;raft-stable.db&quot;))\n</code></pre><p>第五个参数SnapshotStore存储的是快照信息，也就是压缩后的日志数据。在Hashicorp Raft中提供了3种快照存储方式，它们分别是：</p><ul>\n<li>DiscardSnapshotStore（不存储，忽略快照，相当于/dev/null，一般来说用于测试）；</li>\n<li>FileSnapshotStore（文件持久化存储）；</li>\n<li>InmemSnapshotStore（内存存储，不持久化，重启程序后，数据会丢失）。</li>\n</ul><p><strong>这3种方式，在生产环境中，建议你采用FileSnapshotStore实现快照， 使用文件持久化存储，避免因程序重启，导致快照数据丢失。</strong>具体代码实现如下：</p><pre><code>snapshots, err := raft.NewFileSnapshotStore(raftDir, retainSnapshotCount, os.Stderr)\n</code></pre><p>NewFileSnapshotStore()函数支持3个参数。也就是说，除了指定存储路径（raftDir），还要指定需要保留的快照副本的数量(retainSnapshotCount)，以及日志输出的方式。<strong>一般而言，将日志输出到标准错误IO就可以了。</strong></p><p>最后一个Transport指的是Raft集群内部节点之间的通信机制，节点之间需要通过这个通道来进行日志同步、领导者选举等等。Hashicorp Raft支持两种方式：</p><ul>\n<li>一种是基于TCP协议的TCPTransport，可以跨机器跨网络通信的；</li>\n<li>另一种是基于内存的InmemTransport，不走网络，在内存里面通过Channel来通信。</li>\n</ul><p><strong>在生产环境中，我建议你使用TCPTransport，</strong>使用TCP进行网络通讯，突破单机限制，提升集群的健壮性和容灾能力。具体代码实现如下：</p><pre><code>addr, err := net.ResolveTCPAddr(&quot;tcp&quot;, raftBind)\ntransport, err := raft.NewTCPTransport(raftBind, addr, maxPool, timeout, os.Stderr)\n</code></pre><p>NewTCPTransport()函数支持5个参数，也就是，指定创建连接需要的信息。比如，要绑定的地址信息（raftBind、addr）、连接池的大小（maxPool）、超时时间（timeout），以及日志输出的方式，一般而言，将日志输出到标准错误IO就可以了。</p><p>以上就是这6个参数的详细内容了，既然我们已经了解了这些基础信息，那么如何使用NewRaft()函数呢？其实，你可以在代码中直接调用NewRaft()函数，创建Raft节点对象，就像下面的样子：</p><pre><code>raft, err := raft.NewRaft(config, (*storeFSM)(s), logStore, stableStore, snapshots, transport)\n</code></pre><p>接口清晰，使用方便，你可以亲手试一试。</p><p>现在，我们已经创建了Raft节点，打好了基础，但是我们要实现的是一个多节点的集群，所以，创建一个节点是不够的，另外，创建了节点后，你还需要让节点启动，当一个节点启动后，你还需要创建新的节点，并将它加入到集群中，那么具体怎么操作呢？</p><h2>如何增加集群节点</h2><p>集群最开始的时候，只有一个节点，我们让第一个节点通过bootstrap的方式启动，它启动后成为领导者：</p><pre><code>raftNode.BootstrapCluster(configuration)\n</code></pre><p>BootstrapCluster()函数只支持一个参数，也就是Raft集群的配置信息，因为此时只有一个节点，所以配置信息为这个节点的地址信息。</p><p>后续的节点在启动的时候，可以通过向第一个节点\b发送加入集群的请求，然后加入到集群中。具体来说，先启动的节点（也就是第一个节点）收到请求后，获取对方的地址（指Raft集群内部通信的TCP地址），然后调用AddVoter()把新节点加入到集群就可以了。具体代码如下：</p><pre><code>raftNode.AddVoter(id,  \n            addr, prevIndex, timeout)\n</code></pre><p>AddVoter()函数支持4个参数，使用时，一般只需要设置服务器ID信息和地址信息 ，其他参数使用默认值0，就可以了：</p><ul>\n<li>id（服务器ID信息）；</li>\n<li>addr（地址信息）；</li>\n<li>prevIndex（前一个集群配置的索引值，一般设置为0，使用默认值）；</li>\n<li>timeout（在完成集群配置的日志项添加前，最长等待多久，一般设置为0，使用默认值）。</li>\n</ul><p>当然了，也可以通过AddNonvoter()，将一个节点加入到集群中，但不赋予它投票权，让它只接收日志记录，这个函数平时用不到，你只需知道有这么函数，就可以了。</p><p>在这里，我想补充下，早期版本中的用于增加集群节点的函数，AddPeer()函数，已废弃，不再推荐使用。</p><p>你看，在创建集群或者扩容时，我们尝试着增加了集群节点，但一旦出现不可恢复性的机器故障或机器裁撤时，我们就需要移除节点，进行节点替换，那么具体怎么做呢？</p><h2>如何移除集群节点</h2><p>我们可以通过RemoveServer()函数来移除节点，具体代码如下：</p><pre><code>raftNode.RemoveServer(id, prevIndex, timeout)\n</code></pre><p>RemoveServer()函数支持3个参数，使用时，一般只需要设置服务器ID信息 ，其他参数使用默认值0，就可以了：</p><ul>\n<li>id（服务器ID信息）；</li>\n<li>prevIndex（前一个集群配置的索引值，一般设置为0，使用默认值）；</li>\n<li>timeout（在完成集群配置的日志项添加前，最长等待多久，一般设置为0，使用默认值）。</li>\n</ul><p>我要强调一下，RemoveServer()函数必须在领导者节点上运行，否则就会报错。这一点，很多同学在实现移除节点功能时会遇到，所以需要注意一下。</p><p>最后，我想补充下，早期版本中的用于移除集群节点的函数，RemovePeer()函数也已经废弃了，不再推荐使用。</p><p>关于如何移除集群节点的代码实现，也比较简单易用，通过服务器ID信息，就可以将对应的节点移除了。除了增加和移除集群节点，在实际场景中，我们在运营分布式系统时，有时需要查看节点的状态。那么该如何查看节点状态呢？</p><h2>如何查看集群节点状态</h2><p>在分布式系统中，日常调试的时候，节点的状态信息是很重要的，比如在Raft分布式系统中，如果我们想抓包分析写请求，那么必须知道哪个节点是领导者节点，它的地址信息是多少，因为在Raft集群中，只有领导者能处理写请求。</p><p>那么在Hashicorp Raft中，如何查看节点状态信息呢？</p><p>我们可以通过Raft.Leader()函数，查看当前领导者的地址信息，也可以通过Raft.State()函数，查看当前节点的状态，是跟随者、候选人，还是领导者。不过你要注意，Raft.State()函数返回的是RaftState格式的信息，也就是32位无符号整数，适合在代码中使用。<strong>如果想在日志或命令行接口中查看节点状态信息，我建议你使用RaftState.String()函数，</strong>通过它，你可以查看字符串格式的当前节点状态。</p><p>为了便于你理解，我举个例子。比如，你可以通过下面的代码，判断当前节点是否是领导者节点：</p><pre><code>func isLeader() bool {\n       return raft.State() == raft.Leader\n}\n</code></pre><p>了解了节点状态，你就知道了当前集群节点之间的关系，以及功能和节点的对应关系，这样一来，你在遇到问题，需要调试跟踪时，就知道应该登录到哪台机器去调试分析了。</p><h2>内容小结</h2><p>本节课我主要以“集群节点”为核心，带你了解了Hashicorp Raft的常用API接口，我希望你明确的重点如下：</p><ol>\n<li>\n<p>除了提到的raft-boltdb做作为LogStore和StableStore，也可以调用NewInmemStore()创建内存型存储，在测试时比较方便，重新执行程序进行测试时，不需要手动清理数据存储。</p>\n</li>\n<li>\n<p>你还可以通过NewInmemTransport()函数，实现内存型通讯接口，在测试时比较方便，将集群通过内存进行通讯，运行在一台机器上。</p>\n</li>\n<li>\n<p>你可以通过Raft.Stats()函数，查看集群的内部统计信息，比如节点状态、任期编号、节点数等，这在调试或确认节点运行状况的时候很有用。</p>\n</li>\n</ol><p>我以集群节点为核心，讲解了Hashicorp Raft常用的API接口，相信现在你已经掌握这些接口的用法了，对如何开发一个分布式系统，也有了一定的感觉。既然学习是为了使用，那么我们学完这些内容，也应该用起来才是，所以，为了帮你更好地掌握Raft分布式系统的开发实战技巧，我会用接下来两节课的时间，以分布式KV系统开发实战为例，带你了解Raft的开发实战技巧。</p><h2>课堂思考</h2><p>我提到了一些常用的API接口，比如创建Raft节点、增加集群节点、移除集群节点、查看集群节点状态等，你不妨思考一下，如何创建一个支持InmemTransport的Raft节点呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","comments":[{"had_liked":false,"id":229310,"user_name":"Ethan Liu","can_delete":false,"product_type":"c1","uid":1070043,"ip_address":"","ucode":"231F944F7CD56A","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/db/858337e3.jpg","comment_is_top":true,"comment_ctime":1592963289,"is_pvip":true,"replies":[{"id":"87384","content":"加一颗星:)。本质上来说，状态机指的是有限状态机，它是一个数学模型。你可以这么理解：状态机是一个功能模块，用来处理一系列请求，最大的特点就是确定性，也就是说，对于相同的输入，不管重复运行多少次，最终的内部状态和输出都是相同的。<br> <br>就像你敲击键盘，在Word文档上打字一样，你敲击键盘的顺序决定了Word文档上的文字，你按照相同的顺序敲击键盘，一定能敲出相同的文字，这就是一个现实版的状态机。<br> <br>那么为什么在Multi-Paxos、Raft中需要状态机呢？<br> <br>你想一下，Multi-Paxos、Raft都是共识算法，而共识算法是就一系列值达成共识的，达成共识后，这个值就不能改了。但有时候我们是需要更改数据的值的，比如KV存储，我们肯定需要更改指定key（比如X）对应的值，这时我们就可以通过状态机来解决这个问题。<br> <br>比如，如果你想把X的值改为7，那你可以提议一个新的指令“SET X = 7”，当这个指令被达成共识并提交到状态机后，你查询到的值就是7了，也就成功修改了X的值。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595438714,"ip_address":"","comment_id":229310,"utype":1}],"discussion_count":2,"race_medal":0,"score":"9.2233720728074998e+18","product_id":100046101,"comment_content":"老师 状态机的作用是什么，为什么一定要有这个呢","like_count":9,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499435,"discussion_content":"加一颗星:)。本质上来说，状态机指的是有限状态机，它是一个数学模型。你可以这么理解：状态机是一个功能模块，用来处理一系列请求，最大的特点就是确定性，也就是说，对于相同的输入，不管重复运行多少次，最终的内部状态和输出都是相同的。\n \n就像你敲击键盘，在Word文档上打字一样，你敲击键盘的顺序决定了Word文档上的文字，你按照相同的顺序敲击键盘，一定能敲出相同的文字，这就是一个现实版的状态机。\n \n那么为什么在Multi-Paxos、Raft中需要状态机呢？\n \n你想一下，Multi-Paxos、Raft都是共识算法，而共识算法是就一系列值达成共识的，达成共识后，这个值就不能改了。但有时候我们是需要更改数据的值的，比如KV存储，我们肯定需要更改指定key（比如X）对应的值，这时我们就可以通过状态机来解决这个问题。\n \n比如，如果你想把X的值改为7，那你可以提议一个新的指令“SET X = 7”，当这个指令被达成共识并提交到状态机后，你查询到的值就是7了，也就成功修改了X的值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595438714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1385204,"avatar":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","nickname":"核桃","note":"","ucode":"7AB05270CBCCCB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544771,"discussion_content":"状态机也可以从另外一个角度理解,对于集群的节点会有多个不同的状态,例如选举,同步数据等不同状态,这些之前都提到了,那么这里每个状态之间怎么切换的,在一些什么场景下切换的.在项目设计的时候,先要把这个过程勾画出来,否则实现代码过程中,不知道每个场景就不知道是什么节点状态了. 说白了,可以简单理解为一些状态之间的切换流程 (个人理解).","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641704314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193487,"user_name":"Stony.修行僧","can_delete":false,"product_type":"c1","uid":1061277,"ip_address":"","ucode":"0F2368F7D93E4A","user_header":"https://static001.geekbang.org/account/avatar/00/10/31/9d/daad92d2.jpg","comment_is_top":false,"comment_ctime":1584918561,"is_pvip":false,"replies":[{"id":"76010","content":"我是这么想的，“再多的鱼”也不如“渔”，是不是可以这样，结合17、18讲的内容，自己阅读源码探索真相呢，学习中遇到问题时，咱们一起讨论，或者我以加餐的形式作补充。这样就不仅能学到知识，还能掌握了独立学习的方法了:)。你觉得呢。<br>","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586201233,"ip_address":"","comment_id":193487,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27354722337","product_id":100046101,"comment_content":"讲讲增删改查背后的真相","like_count":7,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488568,"discussion_content":"我是这么想的，“再多的鱼”也不如“渔”，是不是可以这样，结合17、18讲的内容，自己阅读源码探索真相呢，学习中遇到问题时，咱们一起讨论，或者我以加餐的形式作补充。这样就不仅能学到知识，还能掌握了独立学习的方法了:)。你觉得呢。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586201233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061277,"avatar":"https://static001.geekbang.org/account/avatar/00/10/31/9d/daad92d2.jpg","nickname":"Stony.修行僧","note":"","ucode":"0F2368F7D93E4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228721,"discussion_content":"挺好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586571704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197824,"user_name":"盘胧","can_delete":false,"product_type":"c1","uid":1650748,"ip_address":"","ucode":"5386CC4C92ECC2","user_header":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","comment_is_top":false,"comment_ctime":1585399849,"is_pvip":false,"replies":[{"id":"75553","content":"加油！可以在使用中学习，比如，先了解个大概，在需要使用时再去查找和研究相关函数的用法。有疑问，欢迎留言，咱们一起讨论:)。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585934188,"ip_address":"","comment_id":197824,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10175334441","product_id":100046101,"comment_content":"这就很爽了，搭配一下文档看还是很吃力。加油","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489603,"discussion_content":"加油！可以在使用中学习，比如，先了解个大概，在需要使用时再去查找和研究相关函数的用法。有疑问，欢迎留言，咱们一起讨论:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585934188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243955,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1598339844,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598339844","product_id":100046101,"comment_content":"1.在启动节点的函数中,使用pid作为唯一区分,在内存中,进行内存地址的交流<br>2.利用端口号加localhost作为本地的不同标识,进行相关的启动","like_count":0},{"had_liked":false,"id":212856,"user_name":"周龙亭","can_delete":false,"product_type":"c1","uid":1004577,"ip_address":"","ucode":"21BD0DD15CFCA3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/21/8c13a2b4.jpg","comment_is_top":false,"comment_ctime":1588226535,"is_pvip":false,"replies":[{"id":"80033","content":"加一颗星:)，将节点加入到集群时，需要在调用raft.NewRaft()启动后，需要将自己的节点信息同步给领导者，由领导者调用AddVoter()函数，将这个节点加入到集群中。之后调用raft.NewRaft()启动节点，就可以了，节点会先作为跟随者启动，如果此时没有领导者，将会发生心跳超时，和选举出新的领导者。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1589234842,"ip_address":"","comment_id":212856,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588226535","product_id":100046101,"comment_content":"非leader节点怎么启动呢？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493630,"discussion_content":"加一颗星:)，将节点加入到集群时，需要在调用raft.NewRaft()启动后，需要将自己的节点信息同步给领导者，由领导者调用AddVoter()函数，将这个节点加入到集群中。之后调用raft.NewRaft()启动节点，就可以了，节点会先作为跟随者启动，如果此时没有领导者，将会发生心跳超时，和选举出新的领导者。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589234842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195335,"user_name":"东尘西土","can_delete":false,"product_type":"c1","uid":1014174,"ip_address":"","ucode":"D8960CE8A5A210","user_header":"https://static001.geekbang.org/account/avatar/00/0f/79/9e/12a23f16.jpg","comment_is_top":false,"comment_ctime":1585181501,"is_pvip":false,"replies":[{"id":"75561","content":"加一颗星:)，测试方便。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585935552,"ip_address":"","comment_id":195335,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585181501","product_id":100046101,"comment_content":"ip+端口号代表一个节点，构造单机集群","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489032,"discussion_content":"加一颗星:)，测试方便。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585935552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194598,"user_name":"坤","can_delete":false,"product_type":"c1","uid":1010922,"ip_address":"","ucode":"74E6838226A405","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","comment_is_top":false,"comment_ctime":1585089675,"is_pvip":false,"replies":[{"id":"75562","content":"将新节点的配置信息发送给领导者，然后领导者调用AddVoter()这个API，将新节点加入到集群中。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585935769,"ip_address":"","comment_id":194598,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585089675","product_id":100046101,"comment_content":"请问加入集群的请求时Raft的哪个API或者RPC？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488854,"discussion_content":"将新节点的配置信息发送给领导者，然后领导者调用AddVoter()这个API，将新节点加入到集群中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585935769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193553,"user_name":"HuaMax","can_delete":false,"product_type":"c1","uid":1118488,"ip_address":"","ucode":"2E78DE1AF098AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/11/18/8cee35f9.jpg","comment_is_top":false,"comment_ctime":1584926357,"is_pvip":false,"replies":[{"id":"77286","content":"加一颗星:)，这是工程实现，目标是为了便于管理节点，添加、移除。可以这么理解，一种特殊情况，创建了一个只包含一个节点的集群，这个节点是领导者。第一次创建集群时，使用。集群创建完后，节点正常启动就可以，默认都是跟随者，然后会因为等待领导者心跳超时，而选举出新的领导者。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586978898,"ip_address":"","comment_id":193553,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1584926357","product_id":100046101,"comment_content":"集群最开始的时候，只有一个节点，我们让第一个节点通过 bootstrap 的方式启动，它启动后成为领导者<br>——————————————<br>请问老师，节点不是通过投票成为领导者吗？是不是所有节点都是bootstrap方式启动，然后再竞争成为领导者？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488585,"discussion_content":"加一颗星:)，这是工程实现，目标是为了便于管理节点，添加、移除。可以这么理解，一种特殊情况，创建了一个只包含一个节点的集群，这个节点是领导者。第一次创建集群时，使用。集群创建完后，节点正常启动就可以，默认都是跟随者，然后会因为等待领导者心跳超时，而选举出新的领导者。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586972419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155961,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a3/79/ef7e9920.jpg","nickname":"小强","note":"","ucode":"AFA06753068BD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403831,"discussion_content":"还是没懂，比如一个服务代码部署需要部署三份，代码都是一样的，那都要以Bootstrap启动，岂不是三个leader？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634172651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193465,"user_name":"艾瑞克小霸王","can_delete":false,"product_type":"c1","uid":1674555,"ip_address":"","ucode":"58FCCAC0F675E1","user_header":"https://static001.geekbang.org/account/avatar/00/19/8d/3b/42d9c669.jpg","comment_is_top":false,"comment_ctime":1584896114,"is_pvip":false,"replies":[{"id":"76008","content":"自己指定的，具体实现，可以参考20讲的程序。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586200549,"ip_address":"","comment_id":193465,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584896114","product_id":100046101,"comment_content":"服务器ID是在什么地方设置的呢？node的config吗？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488563,"discussion_content":"自己指定的，具体实现，可以参考20讲的程序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586200549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}