{"id":208182,"title":"11 | Gossip协议：流言蜚语，原来也可以实现一致性","content":"<p>你好，我是韩健。</p><p>有一部分同学的业务在可用性上比较敏感，比如监控主机和业务运行的告警系统。这个时候，相信你希望自己的系统能在极端情况下（比如集群中只有一个节点在运行）也能运行。回忆了二阶段提交协议和Raft算法之后，你发现它们都需要全部节点或者大多数节点正常运行，才能稳定运行，那么它们就不适合了。而根据Base理论，你需要实现最终一致性，怎么样才能实现最终一致性呢？</p><p>在我看来，你可以通过Gossip协议实现这个目标。</p><p>Gossip协议，顾名思义，就像流言蜚语一样，利用一种随机、带有传染性的方式，将信息传播到整个网络中，并在一定时间内，使得系统内的所有节点数据一致。对你来说，掌握这个协议不仅能很好地理解这种最常用的，实现最终一致性的算法，也能在后续工作中得心应手地实现数据的最终一致性。</p><p>为了帮你彻底吃透Gossip协议，掌握实现最终一致性的实战能力，我会先带你了解Gossip三板斧，因为这是Gossip协议的核心内容，也是实现最终一致性的常用三种方法。然后以实际系统为例，带你了解在实际系统中是如何实现反熵的。接下来，就让我们开始今天的内容吧。</p><h2>Gossip的三板斧</h2><p>Gossip的三板斧分别是：直接邮寄（Direct Mail）、反熵（Anti-entropy）和谣言传播（Rumor mongering）。</p><!-- [[[read_end]]] --><p>直接邮寄：就是直接发送更新数据，当数据发送失败时，将数据缓存下来，然后重传。从图中你可以看到，节点A直接将更新数据发送给了节点B、D。</p><p><img src=\"https://static001.geekbang.org/resource/image/40/6e/40890515407ae099b317ebb52342e56e.jpg?wh=1142*719\" alt=\"\" title=\"图1\"></p><p>在这里我想补充一点，直接邮寄虽然实现起来比较容易，数据同步也很及时，但可能会因为缓存队列满了而丢数据。也就是说，只采用直接邮寄是无法实现最终一致性的，这一点我希望你能注意到。</p><p>那如何实现最终一致性呢？答案就是反熵。本质上，反熵是一种通过异步修复实现最终一致性的方法（关于异步修复，你可以回顾一下<a href=\"https://time.geekbang.org/column/article/200717\">04讲</a>）。常见的最终一致性系统（比如Cassandra），都实现了反熵功能。</p><p>反熵指的是集群中的节点，每隔段时间就随机选择某个其他节点，然后通过互相交换自己的所有数据来消除两者之间的差异，实现数据的最终一致性：</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/e8/d97c70ab65d83cc3de7e1be009d225e8.jpg?wh=1142*397\" alt=\"\" title=\"图2\"></p><p>从图2中你可以看到，节点A通过反熵的方式，修复了节点D中缺失的数据。那具体怎么实现的呢？</p><p><strong>其实，在实现反熵的时候，主要有推、拉和推拉三种方式。</strong>我将以修复下图中，2个数据副本的不一致为例，具体带你了解一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/89/c2/894f2b082cda09dc1dc555a67f4accc2.jpg?wh=1142*350\" alt=\"\" title=\"图3\"></p><p>推方式，就是将自己的所有副本数据，推给对方，修复对方副本中的熵：</p><p><img src=\"https://static001.geekbang.org/resource/image/49/a1/499f02776c205428849d362f5f6d52a1.jpg?wh=2993*856\" alt=\"\" title=\"图4\"></p><p>拉方式，就是拉取对方的所有副本数据，修复自己副本中的熵：</p><p><img src=\"https://static001.geekbang.org/resource/image/9a/cd/9a9e4fee6ba67e3455e38774022645cd.jpg?wh=1142*339\" alt=\"\" title=\"图5\"></p><p>理解了推和拉之后，推拉这个方式就很好理解了，这个方式就是同时修复自己副本和对方副本中的熵：</p><p><img src=\"https://static001.geekbang.org/resource/image/74/aa/745431244e0ca531b32d0b9821d1a8aa.jpg?wh=1142*288\" alt=\"\" title=\"图6\"></p><p>也许有很多同学，会觉得反熵是一个很奇怪的名词。其实，你可以这么来理解，反熵中的熵是指混乱程度，反熵就是指消除不同节点中数据的差异，提升节点间数据的相似度，降低熵值。</p><p>另外需要你注意的是，因为反熵需要节点两两交换和比对自己所有的数据，执行反熵时通讯成本会很高，所以我不建议你在实际场景中频繁执行反熵，并且可以通过引入校验和（Checksum）等机制，降低需要对比的数据量和通讯消息等。</p><p>虽然反熵很实用，但是执行反熵时，相关的节点都是已知的，而且节点数量不能太多，如果是一个动态变化或节点数比较多的分布式环境（比如在DevOps环境中检测节点故障，并动态维护集群节点状态），这时反熵就不适用了。<strong>那么当你面临这个情况要怎样实现最终一致性呢？答案就是谣言传播。</strong></p><p>谣言传播，广泛地散播谣言，它指的是当一个节点有了新数据后，这个节点变成活跃状态，并周期性地联系其他节点向其发送新数据，直到所有的节点都存储了该新数据：</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/63/ea8e882c825d8c45832300358f8eb863.jpg?wh=1142*731\" alt=\"\" title=\"图7\"></p><p>从图中你可以看到，节点A向节点B、D发送新数据，节点B收到新数据后，变成活跃节点，然后节点B向节点C、D发送新数据。其实，谣言传播非常具有传染性，它适合动态变化的分布式系统。</p><h2>如何使用Anti-entropy实现最终一致</h2><p>在分布式存储系统中，实现数据副本最终一致性，最常用的方法就是反熵了。为了帮你彻底理解和掌握在实际环境中实现反熵的方法，我想以自研InfluxDB的反熵实现为例，具体带你了解一下。</p><p>在自研InfluxDB中，一份数据副本是由多个分片组成的，也就是实现了数据分片，三节点三副本的集群，就像下图的样子：</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/27/8bdbde17ab2b252ea50d9851dcafa127.jpg?wh=1142*658\" alt=\"\" title=\"图8\"></p><p>反熵的目标是确保每个DATA节点拥有元信息指定的分片，而且不同节点上，同一分片组中的分片都没有差异。比如说，节点A要拥有分片Shard1和Shard2，而且，节点A的Shard1和Shard2，与节点B、C中的Shard1和Shard2，是一样的。</p><p>那么，在DATA节点上，存在哪些数据缺失的情况呢？也就说，我们需要解决哪些问题呢？</p><p>我们将数据缺失，分为这样2种情况。</p><ul>\n<li>缺失分片：也就是说，在某个节点上整个分片都丢失了。</li>\n<li>节点之间的分片不一致：也就是说，节点上分片都存在，但里面的数据不一样，有数据丢失的情况发生。<br>\n第一种情况修复起来不复杂，我们只需要将分片数据，通过RPC通讯，从其他节点上拷贝过来就可以了：</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/50/50/50401f9ce72cd56a86a84cf259330d50.jpg?wh=1142*395\" alt=\"\" title=\"图9\"></p><p>你需要注意的是第二种情况，因为第二种情况修复起来要复杂一些。我们需要设计一个闭环的流程，按照一个顺序修复，执行完流程后，也就是实现了一致性了。具体是怎么设计的呢？</p><p>它是按照一定顺序来修复节点的数据差异，先随机选择一个节点，然后循环修复，每个节点生成自己节点有、下一个节点没有的差异数据，发送给下一个节点，进行修复（为了方便演示，假设Shard1、Shard2在各节点上是不一致的）：</p><p><img src=\"https://static001.geekbang.org/resource/image/39/7a/39f87f2298d8b0a303dda3b0d15c677a.jpg?wh=1142*707\" alt=\"\" title=\"图10\"></p><p>从图中你可以看到，数据修复的起始节点为节点A，数据修复是按照顺时针顺序，循环修复的。需要你注意的是，最后节点A又对节点B的数据执行了一次数据修复操作，因为只有这样，节点C有、节点B缺失的差异数据，才会同步到节点B上。</p><p>学到这里你可以看到，在实现反熵时，实现细节和最初算法的约定有些不同。比如，不是一个节点不断随机选择另一个节点，来修复副本上的熵，而是设计了一个闭环的流程，一次修复所有节点的副本数据不一致。</p><p>为什么这么设计呢？因为我们希望能在一个确定的时间范围内实现数据副本的最终一致性，而不是基于随机性的概率，在一个不确定的时间范围内实现数据副本的最终一致性。</p><p>这样做能减少数据不一致对监控视图影响的时长。而我希望你能注意到，技术是要活学活用的，要能根据场景特点权衡妥协，设计出最适合这个场景的系统功能。<strong>最后需要你注意的是，因为反熵需要做一致性对比，很消耗系统性能，所以建议你将是否启用反熵功能、执行一致性检测的时间间隔等，做成可配置的，能在不同场景中按需使用。</strong></p><h2>内容小结</h2><p>以上就是本节课的全部内容了，本节课我主要带你了解了Gossip协议、如何在实际系统中实现反熵等。我希望你明确这样几个重点：</p><ol>\n<li>\n<p>作为一种异步修复、实现最终一致性的协议，反熵在存储组件中应用广泛，比如Dynamo、InfluxDB、Cassandra，我希望你能彻底掌握反熵的实现方法，在后续工作中，需要实现最终一致性时，优先考虑反熵。</p>\n</li>\n<li>\n<p>因为谣言传播具有传染性，一个节点传给了另一个节点，另一个节点又将充当传播者，传染给其他节点，所以非常适合动态变化的分布式系统，比如Cassandra采用这种方式动态管理集群节点状态。</p>\n</li>\n</ol><p>在实际场景中，实现数据副本的最终一致性时，一般而言，直接邮寄的方式是一定要实现的，因为不需要做一致性对比，只是通过发送更新数据或缓存重传，来修复数据的不一致，性能损耗低。在存储组件中，节点都是已知的，一般采用反熵修复数据副本的一致性。当集群节点是变化的，或者集群节点数比较多时，这时要采用谣言传播的方式，同步更新数据，实现最终一致。</p><h2>课堂思考</h2><p>既然使用反熵实现最终一致性时，需要通过一致性检测发现数据副本的差异，如果每次做一致性检测时都做数据对比的话，肯定是比较消耗性能的，那有什么办法降低一致性检测时的性能消耗呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","comments":[{"had_liked":false,"id":185009,"user_name":"Jialin","can_delete":false,"product_type":"c1","uid":1112955,"ip_address":"","ucode":"12583269732A75","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","comment_is_top":false,"comment_ctime":1583465413,"is_pvip":false,"replies":[{"id":"76187","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586285564,"ip_address":"","comment_id":185009,"utype":1}],"discussion_count":7,"race_medal":0,"score":"186267059141","product_id":100046101,"comment_content":"课堂笔记（综合第四讲和第十一讲内容）<br>1.Gossip 协议存在的原因？<br>为了实现 BASE 理论中的“最终一致性原则”。两阶段提交协议和 Raft 算法需要满足“大多数服务节点正常运行”原则，如果希望系统在少数服务节点正常运行的情况下，仍能对外提供稳定服务，这时就需要实现最终一致性。<br>最终一致性是指系统中所有的数据副本在经过一段时间的同步后，最终能够达到一个一致的状态。<br>2.最终一致性原则中的一致性标准（实际工程实践）<br>• 以最新写入的数据为准，比如 AP 模型的 KV 存储采用的就是这种方式<br>• 以第一次写入的数据为准，如果不希望存储的数据被更改，可以以它为准<br>3.实现最终一致性的具体方式<br>• 读时修复：在读取数据时，检测数据的不一致，进行修复。比如 Cassandra 的 Read Repair 实现，具体来说，在向 Cassandra 系统查询数据的时候，如果检测到不同节点的副本数据不一致，系统就自动修复数据<br>• 写时修复：在写入数据，检测数据的不一致时，进行修复。比如 Cassandra 的 Hinted Handoff 实现。具体来说，Cassandra 集群的节点之间远程写数据的时候，如果写失败就将数据缓存下来，然后定时重传，修复数据的不一致性<br>• 异步修复：这个是最常用的方式，通过定时对账检测副本数据的一致性，并修复<br>4.Gossip 协议实现最终一致性<br>• 直接邮寄，即写时修复，直接发送更新数据，当数据发送失败时，将数据缓存在失败重试队列，然后重传。这种方式虽然存在丢数据问题，但是实现简单、数据同步及时，不需要校验数据一致性对比，性能消耗低<br>• 反熵，即异步修复，集群中的节点，每隔段时间就随机选择某个其他节点，然后通过互相交换自己的所有数据来消除两者之间的差异，实现数据的最终一致性。主要有推、拉、推拉三种实现方式。适合集群节点数已知、少量、稳定的场景，主要由于反熵需要节点两两交换和比对自己所有的数据，执行反熵时通讯成本会很高，性能消耗高。需要注意的是实现反熵时一般设计一个闭环的流程，一次修复所有节点的副本数据不一致，因为我们希望能在一个确定的时间范围内实现数据副本的最终一致性，而不是基于随机性的概率，在一个不确定的时间范围内实现数据副本的最终一致性<br>• 谣言传播，指的是当一个节点有了新数据后，这个节点变成活跃状态，并周期性地联系其他节点向其发送新数据，直到所有的节点都存储了该新数据。由于谣言传播非常具有传染性，它适合动态变化的分布式系统<br>5.思考题：既然使用反熵实现最终一致性时，需要通过一致性检测发现数据副本的差异，如果每次做一致性检测时都做数据对比的话，肯定是比较消耗性能的，那有什么办法降低一致性检测时的性能消耗呢？<br>除了老师在文章中提到的通过校验和进行数据一致性检测，可以借鉴通信原理中数据校验方法，如奇偶校验、CRC校验和格雷码校验等方式，但是这些方式只能检测出错误，但是无法纠错，可以通过重传的方式进行纠错。","like_count":44,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486211,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586285564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251721,"avatar":"https://static001.geekbang.org/account/avatar/00/13/19/89/20488013.jpg","nickname":"hanazawakana","note":"","ucode":"E0F6FACBFE7D15","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":237781,"discussion_content":"闭环应该是谣言传播里用的吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587184247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2916279,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/7f/b7/4c0dc783.jpg","nickname":"77","note":"","ucode":"5A36566BCCD56B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565020,"discussion_content":"这种类似于计算哈希的方式只能用来判断是否不一致，无法得出差异数据有哪些，只能解决一小部分问题。\n\n可能还需从数据存储层面上出发，根据具体业务将数据分堆分块存储，在比较时尽量避免不必要的数据扫描，比如 节点A 有 A块，B块，节点B只有B块，那么直接复制A块就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650373546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2733281,"avatar":"","nickname":"Geek_f4512f","note":"","ucode":"3CB387D2943590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388586,"discussion_content":"奇偶校验、CRC校验和格雷码校验 666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628841765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307644,"discussion_content":"总结很赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600702165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1671689,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/fibfCoOJ9A4yLMfnnaibXhUAoUwXzY6Nh5cxqsoKu0vHPCk1fibE1ZXkDaDub35TkQIyScqxzMsiawgNuSm5qfufYw/132","nickname":"Geek_63ea80","note":"","ucode":"EEEDB4ED9EE0D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307156,"discussion_content":"反熵为何不适合动态变化或节点数比较多的分布式环境","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600519655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2706935,"avatar":"https://static001.geekbang.org/account/avatar/00/29/4d/f7/0a4e21b1.jpg","nickname":"北松山","note":"","ucode":"35C19D270E989D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1671689,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/fibfCoOJ9A4yLMfnnaibXhUAoUwXzY6Nh5cxqsoKu0vHPCk1fibE1ZXkDaDub35TkQIyScqxzMsiawgNuSm5qfufYw/132","nickname":"Geek_63ea80","note":"","ucode":"EEEDB4ED9EE0D0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542829,"discussion_content":"节点很多随机起来很慢啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640856137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":307156,"ip_address":""},"score":542829,"extra":""}]}]},{"had_liked":false,"id":185165,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1583502113,"is_pvip":false,"replies":[{"id":"71606","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583591913,"ip_address":"","comment_id":185165,"utype":1}],"discussion_count":1,"race_medal":1,"score":"87482848033","product_id":100046101,"comment_content":"一致性检测是对比两个节点上的数据是否一致，如果每次都是全量比对，那么肯定性能不是很高，那为了提升性能，那么最好是不比对或增量数据比对，这里抛个砖，<br>1. 假设从某一时刻开始，所有节点数据都是一致的，每个节点都记录从这个时刻开始的数据变化，<br>2. 当反墒放生时，先看相关的两个节点上数据变化是否为空，如果为空就证明两个节点此时数据一致，不需要数据同步。<br>3. 如果相关的两个节点上数据有变化，则只比较变化的数据，然后只同步变化的差集，同时也要更新数据变化状态记录，<br>4. 在某个时间段内数据的变化只增不减，某个时刻所有节点做全量比对，然后重置数据变化记录。<br>5. 为了快速比较，可以同时计算数据变化记录的hash值用于比较，hash值一样就说明数据变化是相同的，两节点数据一致，否则就需要一致性查询并同步。","like_count":20,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486275,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583591913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184907,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1583448357,"is_pvip":false,"replies":[{"id":"76196","content":"加一颗星:)，是的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586286921,"ip_address":"","comment_id":184907,"utype":1}],"discussion_count":4,"race_medal":0,"score":"78892859685","product_id":100046101,"comment_content":"老师，有个疑惑。文章中说直接邮寄肯定要实现的，在固定节点的系统中可以实现反墒修复一致性。那么两者如何兼容呢？是不是每次有新数据写入，先执行直接邮寄。然后周期性的执行反墒修复数据一致性呢？","like_count":19,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486168,"discussion_content":"加一颗星:)，是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586286921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","nickname":"Jialin","note":"","ucode":"12583269732A75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198027,"discussion_content":"直接邮寄和反熵修复是实现最终一致性的不同方式，直接邮寄属于“写时修复”，即在写入数据，检测数据的不一致时，进行修复；反熵修复属于“异步修复”，即定时对账检测副本数据的一致性，进行修复。实际工程中两者是配合使用的","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1583463366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f9/6d/b623562a.jpg","nickname":"霹雳大仙pp","note":"","ucode":"F654FD9AEC1D56","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201679,"discussion_content":"直接邮递，队列满会丢数据，但是直接投递是必须的，因为对数据有时效性要求。反熵是对直接投递对补充，可以理解为数据巡检，是最终一致的保障。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1583823930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":197957,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583457991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184940,"user_name":"myrfy","can_delete":false,"product_type":"c1","uid":1169401,"ip_address":"","ucode":"2814BAE5D70098","user_header":"","comment_is_top":false,"comment_ctime":1583456178,"is_pvip":false,"replies":[{"id":"76193","content":"加一颗星:)，取决于场景，比如KV数据，以新数据为准。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586286623,"ip_address":"","comment_id":184940,"utype":1}],"discussion_count":4,"race_medal":0,"score":"53123063730","product_id":100046101,"comment_content":"老师，gossip中，遇到数据冲突，以谁为准呢？","like_count":12,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486179,"discussion_content":"加一颗星:)，取决于场景，比如KV数据，以新数据为准。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586286623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1342430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/HADZgeqSxRPnv7HMHu61QsyeEFUDPoVQx0ZEmAI3zwv8OT5NbfSB6ImcM2cXybPgIStqK96Yn7P6tdAmciaVKUg/132","nickname":"Geek_c8eabe","note":"","ucode":"D3100A2DD591E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204508,"discussion_content":"如何判断最新写入？每个key都维护一个版本号？那删除key呢？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584184962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1197455,"avatar":"https://static001.geekbang.org/account/avatar/00/12/45/8f/a56b2214.jpg","nickname":"innocent","note":"","ucode":"368659A0DDE7E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1342430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/HADZgeqSxRPnv7HMHu61QsyeEFUDPoVQx0ZEmAI3zwv8OT5NbfSB6ImcM2cXybPgIStqK96Yn7P6tdAmciaVKUg/132","nickname":"Geek_c8eabe","note":"","ucode":"D3100A2DD591E0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339610,"discussion_content":"应该会带一个时间戳吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609746497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":204508,"ip_address":""},"score":339610,"extra":""}]},{"author":{"id":1112955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fb/7b/2d4b38fb.jpg","nickname":"Jialin","note":"","ucode":"12583269732A75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":198023,"discussion_content":"第四讲中提到过最终一致性的一致性标准（工程实践）：1.以最新写入的数据为准，比如 AP 模型的 KV 存储采用的就是这种方式；2.以第一次写入的数据为准，如果你不希望存储的数据被更改，可以以它为准","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583463071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189017,"user_name":"老辉","can_delete":false,"product_type":"c1","uid":1173090,"ip_address":"","ucode":"B49D6EA1112B25","user_header":"https://static001.geekbang.org/account/avatar/00/11/e6/62/ee1c96e8.jpg","comment_is_top":false,"comment_ctime":1584446867,"is_pvip":false,"replies":[{"id":"76172","content":"加一颗星:)，绝大部分时候，系统是稳定运行的，如果出现了节点故障这种异常情况，一般而言，咱们需要先处理节点故障，然后再执行反熵，实现副本数据的最终一致。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586280033,"ip_address":"","comment_id":189017,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44534119827","product_id":100046101,"comment_content":"老师，如果反熵过程中，组成的环上的一个节点挂了，怎么同步数据一致。","like_count":10,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487590,"discussion_content":"加一颗星:)，绝大部分时候，系统是稳定运行的，如果出现了节点故障这种异常情况，一般而言，咱们需要先处理节点故障，然后再执行反熵，实现副本数据的最终一致。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586280033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185693,"user_name":"Scott","can_delete":false,"product_type":"c1","uid":1014800,"ip_address":"","ucode":"7E57FDCB5E5D49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg","comment_is_top":false,"comment_ctime":1583664989,"is_pvip":false,"replies":[{"id":"76361","content":"加一颗星:)，是个办法:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586374432,"ip_address":"","comment_id":185693,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40238370653","product_id":100046101,"comment_content":"merkle tree可以用来减少比较差异负担的开销吗","like_count":9,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486467,"discussion_content":"加一颗星:)，是个办法:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586374432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254062,"user_name":"leitiannet","can_delete":false,"product_type":"c1","uid":1205197,"ip_address":"","ucode":"18BDC6A6406C59","user_header":"https://static001.geekbang.org/account/avatar/00/12/63/cd/fd2778c0.jpg","comment_is_top":false,"comment_ctime":1603033991,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"31667805063","product_id":100046101,"comment_content":"Redis Cluster中用来维护节点集群状态信息的Gossip协议和本文的Gossip协议是一样的吗？<br>Redis Cluster使用反熵方法？","like_count":7,"discussions":[{"author":{"id":1008348,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/dc/8876c73b.jpg","nickname":"moooofly","note":"","ucode":"4A20795C281B6F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331800,"discussion_content":"关注","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606982118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211175,"user_name":"kylexy_0817","can_delete":false,"product_type":"c1","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1587909643,"is_pvip":false,"replies":[{"id":"79079","content":"加一颗星:)，可以这么类比理解:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588278836,"ip_address":"","comment_id":211175,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27357713419","product_id":100046101,"comment_content":"韩老师好，我觉得其实就目的而言，Gossip的三板斧都是为了反熵，即都是为了降低系统因为数据不一致引起的混乱程度，只是实现方法不一样，第一种用到消息队列，就是消息订阅发布模式；第二种不经消息队列，直接推拉消息到随机节点；第三种就是散播谣言，这里方法是推，还应该会涉及一个散播算法，避免消息重复下发，避免消息风暴。不知我的理解到不到位？","like_count":6,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493212,"discussion_content":"加一颗星:)，可以这么类比理解:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588278836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186708,"user_name":"翠羽香凝","can_delete":false,"product_type":"c1","uid":1119933,"ip_address":"","ucode":"54F3762F0E545F","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/bd/e14ba493.jpg","comment_is_top":false,"comment_ctime":1583908287,"is_pvip":false,"replies":[{"id":"77783","content":"加一颗星:)，问题1：这个问题比较共性，我后面做个补充吧。问题2：会的，尽管谣言传播能以去中心化的方式，在动态变化的集群中，实现数据副本的最终一致性，但通讯成本较高。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587330871,"ip_address":"","comment_id":186708,"utype":1}],"discussion_count":3,"race_medal":0,"score":"27353712063","product_id":100046101,"comment_content":"老师，感觉谣言传播有很多细节值得讨论，比如：谣言何时停止？什么时候算是网络里都达到了一致性？而不是无止境的传下去？又比如：谣言传播可能会有很多消息被反复重传，会不会造成网络性能的下降？","like_count":6,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486850,"discussion_content":"加一颗星:)，问题1：这个问题比较共性，我后面做个补充吧。问题2：会的，尽管谣言传播能以去中心化的方式，在动态变化的集群中，实现数据副本的最终一致性，但通讯成本较高。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587330871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476665,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/39/d420a588.jpg","nickname":"小马过河","note":"","ucode":"89451C0545EA11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372360,"discussion_content":"关于“谣言何时停止”的问题老师是否可以讲一下？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620296441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1796527,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/69/af/ceb4450c.jpg","nickname":"Asha","note":"","ucode":"69F227707A9EDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204154,"discussion_content":"有同样的疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584115137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186117,"user_name":"崔伟协","can_delete":false,"product_type":"c1","uid":1022452,"ip_address":"","ucode":"ACDEEDF2A10999","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/f4/e0484cac.jpg","comment_is_top":false,"comment_ctime":1583761167,"is_pvip":true,"replies":[{"id":"77782","content":"加一颗星:)，功能和适用场景不同，直接邮寄：直接发送更新数据，若失败，缓存、重传；反熵：修复数据副本差异，实现最终一致；谣言传播：去中心化的、节点相互传播新数据，适用动态变化的分布式场景。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587330420,"ip_address":"","comment_id":186117,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23058597647","product_id":100046101,"comment_content":"直接邮寄，反熵，谣言传播三者的区别是什么","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486631,"discussion_content":"加一颗星:)，功能和适用场景不同，直接邮寄：直接发送更新数据，若失败，缓存、重传；反熵：修复数据副本差异，实现最终一致；谣言传播：去中心化的、节点相互传播新数据，适用动态变化的分布式场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587330420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223801,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1591183514,"is_pvip":false,"replies":[{"id":"87817","content":"加一颗星:)，这是其中一个区别，但三个协议最最主要的区别，是功能和适用场景不同，直接邮寄：直接发送更新数据，若失败，缓存、重传；反熵：修复数据副本差异，实现最终一致；谣言传播：去中心化的、节点相互传播新数据，适用动态变化的分布式场景。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595935955,"ip_address":"","comment_id":223801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14476085402","product_id":100046101,"comment_content":"这三种方式，是不是主要的区别就是在过程中充当发起者的是单一个节点、轮询节点、多个节点？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497244,"discussion_content":"加一颗星:)，这是其中一个区别，但三个协议最最主要的区别，是功能和适用场景不同，直接邮寄：直接发送更新数据，若失败，缓存、重传；反熵：修复数据副本差异，实现最终一致；谣言传播：去中心化的、节点相互传播新数据，适用动态变化的分布式场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595935955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184910,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1583450466,"is_pvip":false,"replies":[{"id":"77615","content":"加一颗星:)，可以这么理解，先比较checksum，当checksum不一致时，再交换数据做数据差异性检查。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587228520,"ip_address":"","comment_id":184910,"utype":1}],"discussion_count":2,"race_medal":1,"score":"14468352354","product_id":100046101,"comment_content":"今日得到<br>出于可用性考虑(即使一个节点也照常运行)，而二阶段提交和 raft 协议都是需要保证大多数几点正常运行才能保证稳定运行。根据 base 理论要实现最终一致性，所以 gossip 协议就出来了。<br><br>gossip 协议是一种利用随机，带有传染性的方式，将数据传播到整个网络中，在一定时间内，使网络内的所有节点达到最终一致性<br><br>gossip 协议有三种方法<br>1.直接邮寄【必须要实现的】<br>直接发送更新数据给其他节点，如果失败缓存起来，然后后续进行重传。这种方式相对比较简单，但有个缺点是如果缓存满了会存在丢数据的风险<br><br>2.反熵<br>反熵是指消除节点之间的数据差异，它是一种异步修复数据从而达到最终一致性的方案<br>主要是指集群中的节点每隔断时间就随机选择集群中其他节点进行数据交换，达到数据同步的目的，这里有推、拉、推拉三种模式。<br>因为反熵需要对比数据，所以挺耗性能的，老师提到可以通过校验和的方式解决，这块我下去需要在查查相关资料<br>反熵有个局限性就是要求几点已经，且节点数量不能太多<br><br>3.谣言传播<br>当一个节点有了新数据后，这个节点变成活跃状态，并周期性的向其他节点发送数据，直到所有节点都存储了这个新数据<br>这种方式适合动态变化的分布式系统<br><br>思考题<br>反熵在做数据差异检查时是通过对比数据来进行的，比较耗性能，有啥好方式解决？<br>老师在专栏中提到了使用校验和的方式，但还不太懂这种方式，老师可以简单介绍下吗？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486169,"discussion_content":"加一颗星:)，可以这么理解，先比较checksum，当checksum不一致时，再交换数据做数据差异性检查。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587228520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f9/6d/b623562a.jpg","nickname":"霹雳大仙pp","note":"","ucode":"F654FD9AEC1D56","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201688,"discussion_content":"老师的意思应该是对数据进行checksum，即K，V数据，之前是相互传递K,V做比较，现在是传递K,checksum(V)做比较，减少传递的数据量，节省带宽","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583825095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282239,"user_name":"oops","can_delete":false,"product_type":"c1","uid":1102831,"ip_address":"","ucode":"1DEC23A503F8A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/ef/9c5e695b.jpg","comment_is_top":false,"comment_ctime":1615171837,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10205106429","product_id":100046101,"comment_content":"反熵数据不一的案例，节点 按一定顺序消除差异性，怎么确定不一致的数据副本在哪个节点是对的。感觉例子是保障最后一致即可，并没有确定哪个节点的副本对的。","like_count":2,"discussions":[{"author":{"id":1682027,"avatar":"https://static001.geekbang.org/account/avatar/00/19/aa/6b/ab9a072a.jpg","nickname":"对与错","note":"","ucode":"EF55733E3BD78B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533395,"discussion_content":"数据项带时间戳，根据你的具体使用场景来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637851387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201476,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1585793180,"is_pvip":false,"replies":[{"id":"75422","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585838176,"ip_address":"","comment_id":201476,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10175727772","product_id":100046101,"comment_content":"直接对比内容签名","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490345,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585838176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185203,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1583513400,"is_pvip":false,"replies":[{"id":"71605","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583591867,"ip_address":"","comment_id":185203,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10173447992","product_id":100046101,"comment_content":"Fabric目前1.4.1版本以上实现了raft共识，不过用的是etcd的组件；Hyperledger Fabric 中组织内部的peer节点之间为了同步账本数据使用了gossip协议。","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486287,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583591867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322369,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1637322174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5932289470","product_id":100046101,"comment_content":"如何设计反熵闭环呢","like_count":1},{"had_liked":false,"id":228351,"user_name":"ppyh","can_delete":false,"product_type":"c1","uid":1351148,"ip_address":"","ucode":"14022ADEC9B53F","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/ec/235b74c0.jpg","comment_is_top":false,"comment_ctime":1592646916,"is_pvip":false,"replies":[{"id":"87378","content":"加一颗星:)，如果实现的是最终一致性的系统，那么，这个集群是没有主备之分的，也允许读到旧数据。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595437596,"ip_address":"","comment_id":228351,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887614212","product_id":100046101,"comment_content":"shard的各个节点有主副之分吗，读取的时候是不是允许读到的数据不是最新的？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499005,"discussion_content":"加一颗星:)，如果实现的是最终一致性的系统，那么，这个集群是没有主备之分的，也允许读到旧数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595437596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226694,"user_name":"evil","can_delete":false,"product_type":"c1","uid":1320143,"ip_address":"","ucode":"F05DB49B479EAE","user_header":"https://static001.geekbang.org/account/avatar/00/14/24/cf/064ce4ac.jpg","comment_is_top":false,"comment_ctime":1592186500,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5887153796","product_id":100046101,"comment_content":"3节点循环修复能兼顾到每个 ,更多节点的时候循环修复就存在问题 而且感觉最后a和b 再同步是否有必要性 如果我们通过时钟的方式去比较的话 就是等于在我 做数据同步的时候 系统等于做了一次快照","like_count":1},{"had_liked":false,"id":209854,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1587626066,"is_pvip":false,"replies":[{"id":"78891","content":"加一颗星:)，加油，多交流:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588105790,"ip_address":"","comment_id":209854,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5882593362","product_id":100046101,"comment_content":"2020年4月23日，这是第二遍阅读。感觉基本上能理解了，比之前的理解要深一些。加油！","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492882,"discussion_content":"加一颗星:)，加油，多交流:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588105790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205653,"user_name":"colin","can_delete":false,"product_type":"c1","uid":1292206,"ip_address":"","ucode":"7A8849B8AE33E0","user_header":"https://static001.geekbang.org/account/avatar/00/13/b7/ae/a25fcb73.jpg","comment_is_top":false,"comment_ctime":1586696333,"is_pvip":false,"replies":[{"id":"77073","content":"实现和解决的问题是不同的:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586851881,"ip_address":"","comment_id":205653,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5881663629","product_id":100046101,"comment_content":"反熵有点像路由算法啊","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491544,"discussion_content":"实现和解决的问题是不同的:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586851881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200896,"user_name":"tim","can_delete":false,"product_type":"c1","uid":1065570,"ip_address":"","ucode":"50F90216B4640B","user_header":"https://static001.geekbang.org/account/avatar/00/10/42/62/536aef06.jpg","comment_is_top":false,"comment_ctime":1585669499,"is_pvip":false,"replies":[{"id":"75546","content":"在InfluxDB中，时序数据记录没有ID的概念，“时间戳（纳秒级）+ 表名 + 标签值”唯一标识一条时序数据记录，相当于ID。效率高低是相对的，不过整体而言，反熵是非常耗资源的，在优化的同时，也可通过合理配置hinted-handoff来减少分片的数据不一致的情况。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585932857,"ip_address":"","comment_id":200896,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880636795","product_id":100046101,"comment_content":"时序数据库存储的数据都是压缩的，而且一般都是分block的，如果反熵发现其中一个时间段的数据丢了，是整个block copy吗？这样会不会效率低？<br>数据写入会记录唯一ID吗？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490169,"discussion_content":"在InfluxDB中，时序数据记录没有ID的概念，“时间戳（纳秒级）+ 表名 + 标签值”唯一标识一条时序数据记录，相当于ID。效率高低是相对的，不过整体而言，反熵是非常耗资源的，在优化的同时，也可通过合理配置hinted-handoff来减少分片的数据不一致的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585932857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186185,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1583774436,"is_pvip":false,"replies":[{"id":"76176","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586280966,"ip_address":"","comment_id":186185,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878741732","product_id":100046101,"comment_content":"把数据生成一个hash值 每次比较这个hash值  我之前看过微服务中拉取注册中心的配置时,不是拉取所有的配置和本地比较 而是通过生成的hash值比较的 和这个应该是一个道理","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486664,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586280966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":186028,"user_name":"InfoQ_b4b7ff0241e5","can_delete":false,"product_type":"c1","uid":1464328,"ip_address":"","ucode":"B9EF8D2AED8B71","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKfNticCvATj7dqwXfABo03DicMvEXmgwuPgff6KcLyU3wdxedJVDPWsqPIERmosAau7ClIlsibhRTpA/132","comment_is_top":false,"comment_ctime":1583744125,"is_pvip":false,"replies":[{"id":"76179","content":"加一颗星:)，是存在这种现象，包容着理解吧，技术是动态发展的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586283667,"ip_address":"","comment_id":186028,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878711421","product_id":100046101,"comment_content":"从网上搜了搜相关资料，发现大部分资料将谣言传播等同于gossip协议，也有把反熵等同于gossip协议的，感到很迷惑。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486591,"discussion_content":"加一颗星:)，是存在这种现象，包容着理解吧，技术是动态发展的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586283667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185178,"user_name":"唐明","can_delete":false,"product_type":"c1","uid":1052038,"ip_address":"","ucode":"D6848B63EE2764","user_header":"https://static001.geekbang.org/account/avatar/00/10/0d/86/84984798.jpg","comment_is_top":false,"comment_ctime":1583505046,"is_pvip":false,"replies":[{"id":"71539","content":"可以的，这也是为什么需要实现anti-entropy，实现最终一致性。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583543489,"ip_address":"","comment_id":185178,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878472342","product_id":100046101,"comment_content":"请问老师，数据可以从任意一个副本节点写入吗？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486277,"discussion_content":"可以的，这也是为什么需要实现anti-entropy，实现最终一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583543489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184997,"user_name":"朱东旭","can_delete":false,"product_type":"c1","uid":1242338,"ip_address":"","ucode":"C48DD620A63868","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/e2/dbc4a5f2.jpg","comment_is_top":false,"comment_ctime":1583464533,"is_pvip":false,"replies":[{"id":"76188","content":"加一颗星:)，一般不需要区分的，是平行的，这样做的好处是，并发更高，能实现水平扩展。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586285721,"ip_address":"","comment_id":184997,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878431829","product_id":100046101,"comment_content":"分片应该区分主分片和副本分片吧，只有主分片能更新。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486208,"discussion_content":"加一颗星:)，一般不需要区分的，是平行的，这样做的好处是，并发更高，能实现水平扩展。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586285721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184985,"user_name":"vi","can_delete":false,"product_type":"c1","uid":1504664,"ip_address":"","ucode":"943CADFE6C1A6A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIBabuBHlohpGYRDt4mwWghVDztHyRnC9SfyYnENUZNbCe8m05qQn0cHdiazU4eKmMtSQ0bHicwLLQ/132","comment_is_top":false,"comment_ctime":1583462691,"is_pvip":false,"replies":[{"id":"76189","content":"加一颗星:)，有的，需要引入版本号或时间戳，来标记数据的新旧。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586285917,"ip_address":"","comment_id":184985,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878429987","product_id":100046101,"comment_content":"老师，对于数据复制，只有新增或减少的两处情况，有没有相同的数据不同版本的情况出现，比如数据库中相同ID的数据，某个字段不一致，要不要利用记录的时间擢来制定一个规则，以最后更新的数据为准确数据来做更新复制","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486201,"discussion_content":"加一颗星:)，有的，需要引入版本号或时间戳，来标记数据的新旧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586285917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184965,"user_name":"Geek_8af153","can_delete":false,"product_type":"c1","uid":1119105,"ip_address":"","ucode":"5DEFA54ECF1ECB","user_header":"https://static001.geekbang.org/account/avatar/00/11/13/81/4dcb0f55.jpg","comment_is_top":false,"comment_ctime":1583459285,"is_pvip":false,"replies":[{"id":"76190","content":"加一颗星:)，取决于场景，不同场景的数据，处理方式不同，比如，KV数据，以新数据为准。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586286132,"ip_address":"","comment_id":184965,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878426581","product_id":100046101,"comment_content":"同问因为分区错误导致数据不一致时，合并冲突怎么解决？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486193,"discussion_content":"加一颗星:)，取决于场景，不同场景的数据，处理方式不同，比如，KV数据，以新数据为准。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586286132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184955,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1583458020,"is_pvip":false,"replies":[{"id":"77769","content":"加一颗星:)，问题1：是的。问题2：可以引入消息队列，但没必要，成本高。问题3：数据量猛增场景，我研究下，后面做个补充。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587308455,"ip_address":"","comment_id":184955,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5878425316","product_id":100046101,"comment_content":"内容挺重要但疑问挺多，求翻牌：<br>Influxdb的例子讲解了修复数据，但没讲数据一开始是怎样产生的。结合最后总结中提到“直接邮寄必须实现”，能不能这样猜测：<br>一个请求到达某实例，实例写入本机shard，然后通过类似“直接邮寄”，发送给其他shard副本。修复工作是在在后台异步进行的。<br>另一个问题，即使以上猜测不是您的实现的方式，如果我做一个分布式中间件，采用这种方式冗余数据是否可行？<br>第三个问题，有哪个gossip实现的源码可以看一看，希望是用于大量用户数据交换的，我了解到有一些实现比如HashiCorp的，是用来维护集群成员管理的，我不知道这种在数据量猛增的场景下是否还适用<br><br>思考题，也许可以基于时间戳或者版本号机制来减小传输和比对的数据量。主分片同一时刻只有一个，所以版本号由主分片负责的节点来递增就好。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486187,"discussion_content":"加一颗星:)，问题1：是的。问题2：可以引入消息队列，但没必要，成本高。问题3：数据量猛增场景，我研究下，后面做个补充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587308455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344575,"user_name":"码小呆","can_delete":false,"product_type":"c1","uid":2055809,"ip_address":"","ucode":"44532D6ABF9340","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5e/81/82709d6e.jpg","comment_is_top":false,"comment_ctime":1651653789,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651653789","product_id":100046101,"comment_content":"反熵 有点像事务补偿机制,通过异步补偿来实现最终一致性,不知道理解对不对","like_count":0},{"had_liked":false,"id":343665,"user_name":"nullptr","can_delete":false,"product_type":"c1","uid":1283847,"ip_address":"","ucode":"D309EABB70F0BF","user_header":"https://static001.geekbang.org/account/avatar/00/13/97/07/7406fe30.jpg","comment_is_top":false,"comment_ctime":1650974912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650974912","product_id":100046101,"comment_content":"给数据加上版本号，直接比较版号就好了，就不用再比较消息本身了。","like_count":0},{"had_liked":false,"id":335529,"user_name":"冬风向左吹","can_delete":false,"product_type":"c1","uid":1066928,"ip_address":"","ucode":"376C45C5134F93","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/b0/a9b77a1e.jpg","comment_is_top":false,"comment_ctime":1645576717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645576717","product_id":100046101,"comment_content":"数据缺失这种情况修复数据，一次遍历好像不行。如果一个环有４个节点，每个节点有不同的数据，如A节点是１，B节点是2，Ｃ节点是３，Ｄ节点是４，一次遍历A-&gt;B-&gt;C-&gt;D-&gt;A下来，最终只有Ｄ节点和Ａ节点数据是完整的，Ｂ和Ｃ的数据并不完整。","like_count":0},{"had_liked":false,"id":330377,"user_name":"Z宇锤锤","can_delete":false,"product_type":"c1","uid":2188142,"ip_address":"","ucode":"7DB36E986A7A51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","comment_is_top":false,"comment_ctime":1641957917,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641957917","product_id":100046101,"comment_content":"使用hash算法生成信息摘要，如果信息摘要一致则认为是一致的","like_count":0},{"had_liked":false,"id":326756,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1639661414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639661414","product_id":100046101,"comment_content":"减少数据比对的性能损坏，有两种方式，一种参考glusterfs的实现，每次对文件做操作时，都在隐藏目录做一个文件硬链接，同时通过扩展属性标记情况，等操作完成就取消。<br>第二种是参加文件系统zfs那样的实现，使用journal来追加操作日志，每次请求提交都会放到一个事务里面，事务轮转进行落盘过程中如果出现问题，那么就重做最新的journal日志，这样也可以知道哪些文件损坏了。","like_count":0},{"had_liked":false,"id":325128,"user_name":"宇飞","can_delete":false,"product_type":"c1","uid":1105513,"ip_address":"","ucode":"D64C53CD189164","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/69/113da382.jpg","comment_is_top":false,"comment_ctime":1638838945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638838945","product_id":100046101,"comment_content":"Gossip是一系列算法的统称，有新数据进入时先执行直接邮寄，数据没有传成功时缓存数据再重传，然后用异步修复反熵的方式，形成一个闭环来确保数据一致，谣言传播针对动态变化的集群节点使用。为了减少数据大量传播，可以用校验和checksum，md5 等方式先确定数据是否一致，再进行同步","like_count":0},{"had_liked":false,"id":314562,"user_name":"达子不一般","can_delete":false,"product_type":"c1","uid":1315527,"ip_address":"","ucode":"A91C8DB45184F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/c7/a7a5df8b.jpg","comment_is_top":false,"comment_ctime":1633228690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633228690","product_id":100046101,"comment_content":"节点 A 、B、C都要拥有分片 Shard1 和 Shard2，这个在实践中没有这个必要吧？A(shard1,shard2)、<br>B(shard1,shard3)、C(shard2,shard3)这种更常规的数据分布修改一些反熵流程应该也能反熵吧？","like_count":0},{"had_liked":false,"id":313674,"user_name":"Geek_2a0deb","can_delete":false,"product_type":"c1","uid":1315176,"ip_address":"","ucode":"DBF960FDFB77C0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKIkpsQkTyLtfxgib35o0ho9nWmCHwJL8BYibJPPT22fkT1aTwHhwQc0krINWjTVRjibF1bMTgia5mflg/132","comment_is_top":false,"comment_ctime":1632614096,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632614096","product_id":100046101,"comment_content":"做循环反熵时 怎么知道哪个节点才是最新的数据？防止旧数据修复新数据？","like_count":0},{"had_liked":false,"id":288476,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1618486900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618486900","product_id":100046101,"comment_content":"想问一下，修复闭环如何实现呢","like_count":0},{"had_liked":false,"id":288471,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1618484513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618484513","product_id":100046101,"comment_content":"想问一下老师，在使用传播的方式中，活跃节点怎么知道其他节点都存储了该数据呢","like_count":0},{"had_liked":false,"id":284764,"user_name":"Geek_8e2759","can_delete":false,"product_type":"c1","uid":2100644,"ip_address":"","ucode":"EBDBA4D92B5C50","user_header":"","comment_is_top":false,"comment_ctime":1616463866,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1616463866","product_id":100046101,"comment_content":"anti-entropy 的思想和实现都比较好理解，比较好奇 Raft 中如何实现数据修复（一个节点磁盘挂了之后，怎么恢复回去）","like_count":0,"discussions":[{"author":{"id":2012886,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/b6/d6/3b1fbf9b.jpg","nickname":"2018","note":"","ucode":"436D1F4CA63CB9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548305,"discussion_content":"leader 直接将快照发送到 follower","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643121726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284246,"user_name":"Geek_672f79","can_delete":false,"product_type":"c1","uid":2325033,"ip_address":"","ucode":"F4BEFC33AEC33B","user_header":"","comment_is_top":false,"comment_ctime":1616136617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616136617","product_id":100046101,"comment_content":"韩老师， 直接邮寄虽然实现起来比较容易，数据同步也很及时，但可能会因为缓存队列满了而丢数据。也就是说，只采用直接邮寄是无法实现最终一致性的。  如果我的队列例如采用磁盘存储，不存在丢数据的情况，是否采用直接邮寄也能实现最终一致性的","like_count":0},{"had_liked":false,"id":281110,"user_name":"庆","can_delete":false,"product_type":"c1","uid":2456229,"ip_address":"","ucode":"6E163B114E2012","user_header":"https://static001.geekbang.org/account/avatar/00/25/7a/a5/8f8ca5d3.jpg","comment_is_top":false,"comment_ctime":1614585487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614585487","product_id":100046101,"comment_content":"第三种方式为什么不采用组播，简化后面的散播","like_count":0},{"had_liked":false,"id":252965,"user_name":"蚂蚁","can_delete":false,"product_type":"c1","uid":1211429,"ip_address":"","ucode":"B3FEFB399536DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/7c/25/7d9a2538.jpg","comment_is_top":false,"comment_ctime":1602549779,"is_pvip":false,"replies":[{"id":"92463","content":"加一颗星:)，这时可以引入“版本号”或时间戳，以最新的数据为准。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1602596880,"ip_address":"","comment_id":252965,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602549779","product_id":100046101,"comment_content":"老师好 有一个疑问 课程中以数据丢失为例 如果两个节点所有数据的key一致 仅仅是value不同 那怎么确定谁的数据是对的呢？按照课程里的理论会不会导致新数据更新成功了但是集群最终的数据又变成旧数据了","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506930,"discussion_content":"加一颗星:)，这时可以引入“版本号”或时间戳，以最新的数据为准。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602596880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252460,"user_name":"AnonymousUser","can_delete":false,"product_type":"c1","uid":1243930,"ip_address":"","ucode":"E03CB1EDD9775B","user_header":"https://static001.geekbang.org/account/avatar/00/12/fb/1a/57480c9c.jpg","comment_is_top":false,"comment_ctime":1602310497,"is_pvip":false,"replies":[{"id":"96022","content":"加一颗星:)，宕机属于小概率发生、短暂存在的异常情况，是需要及时监控告警和快速修复的，所以，在程序中考虑重试，就可以了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606647461,"ip_address":"","comment_id":252460,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602310497","product_id":100046101,"comment_content":"图10中ABC节点循环时要是B宕机了，整个过程就进行不下去了？是不是应该有个协商机制来做配置的更新啊？如何维护节点之间的前后关系啊？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506784,"discussion_content":"加一颗星:)，宕机属于小概率发生、短暂存在的异常情况，是需要及时监控告警和快速修复的，所以，在程序中考虑重试，就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606647461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243147,"user_name":"仲夏夜空星星多","can_delete":false,"product_type":"c1","uid":1744596,"ip_address":"","ucode":"DB512D7722E551","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9e/d4/95f6fb65.jpg","comment_is_top":false,"comment_ctime":1597976281,"is_pvip":false,"replies":[{"id":"96357","content":"加一颗星:)，这篇文章主要聚焦在算法层面；1. 与实现有关，比如KV存储系统，一个节点可以将自己的副本数据，推给对方，对两个数据块的数据比较版本号（或时间戳），以版本号（或时间戳）大的数据为准；2. 传数据，一般TCP，需要考虑“失败、缓存、重试”。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606826022,"ip_address":"","comment_id":243147,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597976281","product_id":100046101,"comment_content":"感觉实现细节是不是没有提到，比如两个节点怎么做diff,怎么有效把diff 数据传过去","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504197,"discussion_content":"加一颗星:)，这篇文章主要聚焦在算法层面；1. 与实现有关，比如KV存储系统，一个节点可以将自己的副本数据，推给对方，对两个数据块的数据比较版本号（或时间戳），以版本号（或时间戳）大的数据为准；2. 传数据，一般TCP，需要考虑“失败、缓存、重试”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606826022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241723,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1597401515,"is_pvip":false,"replies":[{"id":"95918","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606556977,"ip_address":"","comment_id":241723,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597401515","product_id":100046101,"comment_content":"看了大佬们的留言后,我这里提议中,就是先利用序号或者哈希等方式,计算一个总体的值,利用这个值来判断反熵的是否启动.","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503825,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606556977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234836,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1594807250,"is_pvip":false,"replies":[{"id":"87389","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595439987,"ip_address":"","comment_id":234836,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594807250","product_id":100046101,"comment_content":"思考题：<br><br>本来想说用一个单调递增的消息id ，节点之间通过最大的消息id对比进行校验，但是好像在动态的节点中做不到单调递增。<br>只能想到通过摘要来校验了","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501524,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595439987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226262,"user_name":"superfq","can_delete":false,"product_type":"c1","uid":1033472,"ip_address":"","ucode":"37B45E9018F14F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/00/37ef050e.jpg","comment_is_top":false,"comment_ctime":1592018834,"is_pvip":true,"replies":[{"id":"87375","content":"加一颗星:)，这时需要比较删除操作流水日志。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595437016,"ip_address":"","comment_id":226262,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592018834","product_id":100046101,"comment_content":"有个问题请老师解惑下：<br>对于集群中删除数据的不一致如何处理？不如A节点删除了一个key，B节点没有删除，在进行反熵对比的时候，A发送给B的差异数据中没有这个key，B如何达到有一致？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498170,"discussion_content":"加一颗星:)，这时需要比较删除操作流水日志。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595437016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223894,"user_name":"Trident","can_delete":false,"product_type":"c1","uid":1609530,"ip_address":"","ucode":"53E6788CF33398","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/l4nngwyggBGqeMXC0micwO8bM1hSttgQXa1Y5frJSqWa8NibDhia5icwPcHM5wOpV3hfsf0UicDY0ypFqnQ3iarG0T1w/132","comment_is_top":false,"comment_ctime":1591227441,"is_pvip":false,"replies":[{"id":"87000","content":"加一颗星:)，在实际系统中，需要这么做的，来减少数据交换。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595093277,"ip_address":"","comment_id":223894,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591227441","product_id":100046101,"comment_content":"每个数据副本维护一个md5的签名信息，每次反熵对比这个签名是不是更快","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497289,"discussion_content":"加一颗星:)，在实际系统中，需要这么做的，来减少数据交换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595093277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184962,"user_name":"bc","can_delete":false,"product_type":"c1","uid":1009801,"ip_address":"","ucode":"3899698EA715EC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/68/89/173601c5.jpg","comment_is_top":false,"comment_ctime":1583458613,"is_pvip":false,"replies":[{"id":"76191","content":"加一颗星:），不同场景的数据，实现不同。另外，上文中提到的“日志编号”用来表明什么呢？","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586286251,"ip_address":"","comment_id":184962,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583458613","product_id":100046101,"comment_content":"反熵要有一个以谁为准的定义，应该有个日志编号之类的来表明吧？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486192,"discussion_content":"加一颗星:），不同场景的数据，实现不同。另外，上文中提到的“日志编号”用来表明什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586286251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184937,"user_name":"myrfy","can_delete":false,"product_type":"c1","uid":1169401,"ip_address":"","ucode":"2814BAE5D70098","user_header":"","comment_is_top":false,"comment_ctime":1583455984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583455984","product_id":100046101,"comment_content":"参考区块链思想，系统内维护一个当前版本号，也就是区块链中的当前高度。因为是内部系统，可以暂时不考虑安全问题，认为大家都是诚实的，这样就可以去掉区块链中的POW 任意节点只要发现自己当前高度和网络中接受到的高度不一致，就更新自己的状态","like_count":0}]}