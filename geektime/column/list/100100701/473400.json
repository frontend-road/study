{"id":473400,"title":"10｜标准库：字符、字符串处理与数学计算","content":"<p>你好，我是于航。从这一讲开始，我们将进入到 C 工程实战篇的学习。</p><p>在上一个模块中，我主要围绕着 C 语言的七大关键语法，介绍了它们在机器指令层面的实现细节。而接下来，走出语法，从微观到宏观，我们将开始进一步探索 C 语法之外，那些可以用来支撑大型 C 项目构建的特性和技术。</p><p>因此，在这一模块中，我会介绍和 C 语言标准库、工程化，以及性能优化等相关的内容。C 标准库是除 C 基本核心语法外，C 语言的另一个重要组成部分。C 标准库中提供了众多的类型、函数和宏，可供我们直接在程序中使用。这些“构建单元”的功能涵盖了多个方面，从简单的文本字符处理，到复杂的线程操作、内存管理等。在继续后面的内容之前，你可以先粗略浏览下图，以对 C 标准库提供的基本功能有个大致的印象。</p><p><img src=\"https://static001.geekbang.org/resource/image/6d/54/6dda718fc700a7c8f503e59daf442554.jpg?wh=1920x1732\" alt=\"图片\"></p><p>今天，我们就先来看看 C 标准库中与字符、字符串处理，以及数学运算相关的内容。</p><h2>C 语言中的字符和字符串</h2><p>在 C 语言中，字符用单引号表示，字符串用双引号表示。比如在下面这段代码中便定义有两个变量，它们分别存放了一个字符类型和一个字符串类型的值。</p><pre><code class=\"language-c++\">char c = 'a';\nconst char* str = \"Hello, geek!\";\n</code></pre><p>下面，我们就来分别看看与这两种类型有关的重要特性。</p><h3>字符</h3><p>在 C 语言标准中，不同于其他整数类型（比如 <code>int</code>），字符类型 <code>char</code> 并没有被规定默认的符号性，而其具体符号性则是由编译器和所在平台决定的。虽然在大多数情况下，编译器会选择将默认情况下的 <code>char</code> 类型视为有符号整数类型，但考虑到程序的可用性与可移植性，在实际编码中还是建议<strong>显式指定出所定义字符变量的符号性</strong>。</p><!-- [[[read_end]]] --><p>C 标准中之所以这样规定，主要源于其历史原因。比较有代表性的一种说法是：C 语言在设计之初参考了它的“前辈” B 语言。B 语言于 1969 年由 Ken Thompson 在贝尔实验室开发。作为一种无类型语言，它的字符类型仅用于存放字符，而不作数学运算之用。因此，并不需要特别区分符号性。所以在 C 语言中，作者也没有为字符类型规定默认的符号性。</p><p>另外，有关字符类型的另一个重要特征是，C 语言保证 <code>char</code> 类型只占用一个字节大小，因此在使用 <code>sizeof</code> 运算符计算该类型大小时，将永远得到结果 1。但事实上，并不是所有计算机体系都使用 8 位的字节大小。对于某些较为古老的计算机体系，一个字节可能对应大于或小于 8 位。</p><p>对于某些特殊的业务需求和功能场景，你可以通过访问标准库中定义的常量 CHAR_BIT ，来检查当前体系下一个字符类型所占用的位数，该常量的使用方式如下所示：</p><pre><code class=\"language-c++\">#include &lt;limits.h&gt;\n#include &lt;stdio.h&gt;\nint main(void) {\n&nbsp; printf(\"char type has %lu byte.\\n\", sizeof(char));&nbsp; // ...1.\n&nbsp; printf(\"char type has %d bits.\", CHAR_BIT);&nbsp; // ...8.\n}\n</code></pre><p>不过需要注意的是，自 C89 以来的标准中规定，CHAR_BIT 的值不能小于 8，因此对于单个字节数小于 8 位的体系架构，该常量并不能反映真实情况。</p><p>最后介绍一个编码方面的特性。C 语言中的 <code>char</code> 字符类型变量在按照字符类型打印时（比如使用 printf 函数，配合 “%c” 占位符），会使用 ASCII 编码来对数字值进行字符映射。这意味着，一个存储有整数 65 的字符类型变量，在将其打印输出时，会在命令行中直接得到字符 “A”。当然，你也需要确保命令行客户端的编码设置为 UTF-8，以与 ASCII 编码相兼容。</p><p>除了 <code>char</code> 类型以外，C 语言还在 C90 和 C11 标准中新增了可用于宽字符的类型，诸如 <code>wchar_t</code>、<code>char16_t</code>、<code>char32_t</code> 等。其中，<code>wchar_t</code> 类型的大小由具体的编译器实现决定。而 <code>char16_t</code> 和 <code>char32_t</code> 类型，其值则固定占用对应的 16 和 32 位。</p><h3>字符串</h3><p>在 C 语言中，我们可以通过下面这两种方式来定义字符串类型的变量，一种是指针形式，另一种是数组形式。当然，这里示例代码中我们定义的是只读字符串：</p><pre><code class=\"language-c++\">// read-only string.\nconst char strA[] = \"Hello, geek!\";&nbsp; \nconst char* strB = \"Hello\" \", geek!\";\n</code></pre><p>其中，由双引号括起来的部分一般称为“字符串字面量”。C 标准中规定，连续出现的字符串字面量之间如果仅由空格分隔，则会将它们视为一个整体。所以 <code>strA</code> 与 <code>strB</code> 这两个字符串的内容是完全一样的。本质上，这两种方式都展示出了字符串在 C 语言中的具体表现形式，即“带有终止符的字符数组”。</p><p>关于上述字符串在内存中的布局形式，我们可以用下面这张图来直观地理解一下。可以看到的是，字符串数据被存放在连续的内存段上，且每个字符串数据的最后都以空字符（<strong>\\0</strong>）作为表示结束的终止符。所以我们说，字符串并不是单纯的字符数组，而是带有隐式（定义时会被自动加上）终止符的字符数组。</p><p><img src=\"https://static001.geekbang.org/resource/image/39/3d/3944500a60ac5cdc067816b65f7c3e3d.jpg?wh=1920x638\" alt=\"图片\"></p><p>虽然通过上面这两种方式都可以定义字符串，但实际上，<strong>不同的定义方式在不同情况下可能会对程序运行产生不同的影响。</strong>这里你可以先思考下：假设我们有如下这段代码，它在运行时会有什么问题吗？如果有，那应该怎样改正？</p><pre><code class=\"language-c++\">#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\nint main (void) {&nbsp; &nbsp;\n&nbsp; /* get the first token */\n&nbsp; const char* token = strtok(\"Hello, geek!\", \"geek\");\n&nbsp; printf(\"%s\", token);\n&nbsp; return 0;\n}\n</code></pre><p>上面这段代码在不同平台上运行可能会得到不同的结果。比如在 Linux 上，你可能会得到名为 “Segmentation fault” 的系统错误。如果进一步用 LLDB 进行调试，你会发现错误原因是：“signal SIGSEGV: address access protected”，翻译过来就是访问了受保护的地址。那接下来我们一起看看为什么会这样。</p><p>我们在之前的内容中曾提到过，字符串常量一般会被存放在进程 VAS 的 .rodata Section（下文简称 .rodata）中，位于此处的数据一般可以在程序中被多次引用。而当数据需要被修改，或以较短生命周期的形式（如局部变量）存在时，其引用的相关数据可能需要从 .rodata 中被复制到其他位置。而上述这两种字符串定义方式便对应于这两种情况。</p><p>以本小节开头的代码为例，使用指针形式定义的字符串 strB ，实际上直接引用了 .rodata 中该字符串的所在位置，即字符指针 strB 的值为该位置对应的内存地址。而使用数组形式定义的字符串 strA ，则是将该字符串的数据从 .rodata 中复制到了其他地方，strA 的值为复制后该字符串第一个字符的所在地址。</p><p>我们可以通过下面这段代码来验证这个结论。</p><pre><code class=\"language-c++\">// string.c\n#include &lt;stdio.h&gt;\nint main(void) {\n&nbsp; const char strA[] = \"Hello, geek!\";\n&nbsp; const char* strB = \"Hello, geek!\";\n&nbsp; printf(\"%p\\n%p\", strA, strB);  \n  /**\n    Output:\n    0x7ffee84d3d0b\n    0x4006c8\n  */\n}\n</code></pre><p>上面的代码中，我们使用 “%p” 格式符来打印变量 strA 与 strB 这两个指针的值。可以看到，当在 Linux 下执行这段代码时，变量 strA 与 strB 分别对应两个完全不同长度的地址（参考代码后的注释）。此时，我们可以通过如下命令来查看当前进程的 VAS 分布情况。</p><pre><code class=\"language-shell\">pgrep string | xargs -I {} cat /proc/{}/maps\n</code></pre><p>命令执行后，会得到如下图所示结果：</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/c3/eae6c0f6290b309fecbd90cdcc46a8c3.png?wh=1560x688\" alt=\"图片\"></p><p>可以看到，以字符数组形式定义的字符串，其对应变量 strA 的数据实际上会从 .rodata 中被复制到当前进程 VAS 的栈内存中。而当程序运行脱离 strA 所在的作用域时，该数组对应的值将会被释放。反观以指针形式定义的字符串 strB，通过执行以下命令，我们也可以证实其指针所指向的位置为 .rodata。</p><pre><code class=\"language-shell\">objdump -s string | grep .rodata -A 10\n</code></pre><p>该命令会直接打印出当前程序 .rodata 的相关情况。可以看到，最右侧解码后的 ASCII 字符串 “Hello, geek!” 正对应着值为 0x4006c8 的起始地址。</p><p><img src=\"https://static001.geekbang.org/resource/image/cc/05/cc8f619b54f1a4e38595342dd1908e05.png?wh=1136x194\" alt=\"图片\"></p><p>最后我们总结一下。使用数组和指针形式定义的字符串，其底层的数据引用方式会有所区别。其中数组方式会将字符串数据从 .rodata 中拷贝到其他位置（比如栈内存），因此修改这些数据不会改变存在于原始 .rodata 中的副本。而使用常量指针形式定义的数组，该指针会直接引用位于 .rodata 中的字符串数据。</p><p>因此，我们需要注意的一个问题是：当使用非 const 指针引用字符串时，通过该指针修改字符串的值，可能会影响到其他使用指针形式引用相同字符串的代码位置上的实际字符串值。当然在 C 标准中，这种修改方式本身是一种未定义行为，其产生的具体影响将由编译器和操作系统决定。但大多数情况下，该行为都会产生诸如 “Segmentation fault” 以及 “Bus error” 之类的系统错误。</p><h2>C 标准库中的字符、字符串处理</h2><p>C 标准库中提供了众多的函数，可供我们直接对字符和字符串数据进行处理，这里我选择性地介绍其中的一些常见用例。对于这些 C 标准库函数的更详细的使用方法，你可以在<a href=\"https://www.cplusplus.com/reference/\">这里</a>查阅相关文档。</p><h3>统计字符串长度</h3><pre><code class=\"language-c++\">#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\nint main(void) {\n&nbsp; const char str[10] = \"Hi\";\n&nbsp; printf(\"%zu\\n\", strlen(str));&nbsp; // 2.\n}\n</code></pre><p>这里我们直接使用标准库提供的 <code>strlen</code> 函数，<strong>该函数不会计入字符串中多余的终止符</strong>。</p><h3>拼接字符串</h3><pre><code class=\"language-c++\">#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n#define STRLEN 14\nint main(void) {\n&nbsp; char strA[STRLEN] = \"Hello,\";\n&nbsp; char strB[] = \" world!\";\n&nbsp; strncat(strA, strB, STRLEN - strlen(strA) - 1);\n&nbsp; printf(\"%s\\n\", strA);&nbsp;\n}\n</code></pre><p>在这个例子中，我们选择使用 <code>strncat</code> 函数来进行字符串拼接。该函数相较于 <code>strcat</code> 函数，可以更好地控制被拼接字符串的长度，以防被拼接字符串过长导致的拼接字符串数组溢出。这里需要注意，在计算 <code>strncat</code> 函数的第三个参数，也就是被拼接字符串长度这个参数时，需要为字符串最后的终止符预留出 1 个字节的空间。</p><h3>拷贝字符串</h3><pre><code class=\"language-c++\">#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\nint main(void) {\n&nbsp; char strA[] = \"aaaaaa\";\n&nbsp; char strB[] = \"bbbbbbb\";\n&nbsp; printf(\"%s\\n\", strncpy(strA, strB, strlen(strA)));&nbsp; // \"bbbbbb\".\n}\n</code></pre><p>拷贝字符串函数 <code>strncpy</code> 的用法与 <code>strncat</code> 基本相同，我们可以控制其第三个参数，来决定将多少字符拷贝到目的字符串的数组中。这里我给你留下一个小问题：如果把 <code>strncpy</code> 函数中第三个参数使用的 <code>strlen</code> 函数更换成 <code>sizeof</code>，那么程序运行会得到什么结果？为什么？你可以在评论区和我交流讨论。</p><h3>格式化字符串</h3><pre><code class=\"language-c++\">#include &lt;stdio.h&gt;\n#define LEN 128\nint main(void) {\n&nbsp; char dest[LEN];\n&nbsp; const char strA[] = \"Hello, \";\n&nbsp; sprintf(dest, \"%sworld!\", strA);\n&nbsp; printf(\"%s\\n\", dest);\n}\n</code></pre><p>函数 <code>sprintf</code> 可用于格式化字符串，其第二个参数的形式与 <code>printf</code> 函数的第一个参数一致，只是后者会将内容输出到命令行中，而 <code>sprintf</code> 会将格式化后的字符串保存到通过其第一个参数传入的数组中。</p><h3>字符的判断与转换</h3><p>在 C 标准库头文件 ctype.h 中包含有众多可用于字符判断和转换的函数，这些函数自身的名称直接说明了它们的具体功能，使用方式十分简单。具体你可以参考下面这个实例。</p><pre><code class=\"language-c++\">#include &lt;ctype.h&gt;\n#include &lt;stdio.h&gt;\nint main(void) {\n&nbsp; char c = 'a';\n&nbsp; printf(\"%d\\n\", isalnum(c));&nbsp; // 1.\n&nbsp; printf(\"%d\\n\", isalpha(c));&nbsp; // 1.\n&nbsp; printf(\"%d\\n\", isblank(c));&nbsp; // 0.\n&nbsp; printf(\"%d\\n\", isdigit(c));&nbsp; // 0.\n&nbsp; printf(\"%c\\n\", toupper(c));&nbsp; // 'A'.\n}\n</code></pre><h2>C 标准库中的数学运算</h2><p>上面我介绍了 C 标准库中与字符和字符串处理相关函数的使用方式，除此之外，C 标准库中还提供了与数学运算有关的工具函数，基本上你都可以通过引入 math.h 和 stdlib.h 这两个头文件来使用。这些函数的使用方式都十分简单，你可以在<a href=\"https://en.cppreference.com/w/c/numeric/math\">这里</a>找到对它们用法的详细说明。不过有一点要注意：在编译时，你可能需要为链接器指定 “-lm” 参数以链接所需的数学库。</p><p>在下面这个简单的例子中，我们使用了标准库中的求绝对值函数。</p><pre><code class=\"language-c++\">#include &lt;math.h&gt;\n#include &lt;stdio.h&gt;\nint main(void) {\n  long double num = -10.1;\n  printf(\"%.1Lf\\n\", fabsl(num));\n}\n</code></pre><p>为了减少编码的工作量，我们也可以使用这些函数对应的泛型版本，这样就不需要根据传入的参数来手动选择合适的版本（比如这里的 <code>fabsl</code> 函数，它的后缀 “l” 表示 “long”）。比如，对于所有浮点类型的数字值，我们可以直接使用名为 <code>fabs</code> 的宏函数。该宏在展开时，会自动为你匹配对应的类型精确版本。不过，为了使用这些泛型宏，我们需要将原来的头文件 math.h 替换为 tgmath.h，如下代码所示：</p><pre><code class=\"language-c++\">#include &lt;tgmath.h&gt;\n#include &lt;stdio.h&gt;\nint main(void) {\n&nbsp; long double num = -10.1;\n&nbsp; printf(\"%.1Lf\\n\", fabs(num));\n}\n</code></pre><p>关于这些标准库函数的实现方式，如果我们进一步来看，会发现并非所有函数都是按照相应的数学算法来实现计算过程的。</p><p>这里用一个常见的数学运算“求平方根”举例子：通常来说，我们可以使用牛顿迭代法，以软件算法的形式计算一个数的平方根值。但实际上，当我们以 musl 这个 C 标准库为例，进一步查看其某版本的实现时，可以看到它在 i386 架构下直接使用了 FPU（浮点运算单元）提供的机器指令 <code>fsqrt</code> 来计算平方根的值，而并没有使用软件算法。在某种程度上，这可以极大提升计算性能。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/c9/7d/c9ba68891c4ae6a3818ab8afcba72f7d.png?wh=1290x456\" alt=\"图片\"></p><p>因此，为了最大程度地利用硬件带来的计算性能优势，在准备自行编写相应算法时，可以先看看能否直接利用标准库提供的函数来完成你的工作。</p><h2>总结</h2><p>好了，讲到这里，今天的内容也就基本结束了。最后我来给你总结一下。</p><p>今天我主要介绍了 C 语言标准库中与字符、字符串处理，以及数学运算有关的内容。</p><p>首先，我介绍了 C 语言中字符和字符串类型变量的定义方式。字符以单引号形式定义，而字符串以双引号形式定义。字符串的不同定义方式还可能对程序的运行细节带来影响。其中，以字符数组形式定义的字符串包含有原始字符串在 .rodata 中的拷贝；而以指针形式定义的字符串变量则直接引用了 .rodata 中的字符串数据，且其值通常无法在程序运行时被动态修改。</p><p>接下来，我快速介绍了 C 标准库中与字符、字符串处理相关的一些函数的使用方式。最后，我介绍了 C 标准库中与数学运算相关的函数，math.h 头文件中包含有这些函数的精确类型版本，而 tgmath.h 头文件中则提供了对应的泛型宏函数版本。这些函数的一个重要特征是：某些常用的数学运算会被直接映射到对应的机器指令，和使用纯软件算法的实现相比，这通常可以获得更高的性能。</p><h2>思考题</h2><p>请了解一下 C 标准库中 <code>strtok</code> 函数的实现，并思考是哪一步引起了文中实例的 “Segmentation fault” 错误。然后，如果时间充足，可以尝试实现一个自己的版本，拥有与 <code>strtok</code> 函数一样的功能，但是不修改传入的源字符串。</p><p>今天的课程到这里就结束了，希望可以帮助到你，也希望你在下方的留言区和我一起讨论。同时，欢迎你把这节课分享给你的朋友或同事，我们一起交流。</p>","comments":[{"had_liked":false,"id":337951,"user_name":"ppd0705","can_delete":false,"product_type":"c1","uid":1155646,"ip_address":"","ucode":"EB63D4E3FD1E9A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKotsBr2icbYNYlRSlicGUD1H7lulSTQUAiclsEz9gnG5kCW9qeDwdYtlRMXic3V6sj9UrfKLPJnQojag/132","comment_is_top":true,"comment_ctime":1647177442,"is_pvip":false,"replies":[{"id":"123708","content":"可以尝试看看 musl 中的实现：http:&#47;&#47;git.musl-libc.org&#47;cgit&#47;musl&#47;tree&#47;include&#47;tgmath.h","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1647522546,"ip_address":"","comment_id":337951,"utype":1}],"discussion_count":2,"race_medal":0,"score":"9.2233720385020006e+18","product_id":100100701,"comment_content":"看了半天也没看懂 tgmath.h 怎么实现泛型的，有大佬帮忙指点一二吗？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556816,"discussion_content":"可以尝试看看 musl 中的实现：http://git.musl-libc.org/cgit/musl/tree/include/tgmath.h","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647522546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155646,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKotsBr2icbYNYlRSlicGUD1H7lulSTQUAiclsEz9gnG5kCW9qeDwdYtlRMXic3V6sj9UrfKLPJnQojag/132","nickname":"ppd0705","note":"","ucode":"EB63D4E3FD1E9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557135,"discussion_content":"谢谢老师， 我想其实还是通过三元运算判断参数类型来转换到对应的函数上去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647670866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328829,"user_name":"liu_liu","can_delete":false,"product_type":"c1","uid":1019138,"ip_address":"","ucode":"24283806A07759","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","comment_is_top":false,"comment_ctime":1640915220,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31705686292","product_id":100100701,"comment_content":"<br><br>strtok 的原型如下：<br><br>char *strtok(char *src, char *delim)；<br><br>第一个参数是源字符串，第二个参数是分隔符。<br><br><br>最主要的原因在于，strtok 会将修改源字符串，将源字符串中出现的 delim 替换为 &#39;\\0&#39;。而例子中传入的源字符串是个常量，其地址是 .rodata 段里面的地址，不可修改的，因此运行会报错。","like_count":7},{"had_liked":false,"id":332811,"user_name":"zxk","can_delete":false,"product_type":"c1","uid":1221195,"ip_address":"","ucode":"4BB2BD9D2BCD04","user_header":"https://static001.geekbang.org/account/avatar/00/12/a2/4b/b72f724f.jpg","comment_is_top":false,"comment_ctime":1643679650,"is_pvip":false,"replies":[{"id":"122216","content":"回答正确！","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1645018998,"ip_address":"","comment_id":332811,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23118516130","product_id":100100701,"comment_content":"如果把 strncpy 函数中第三个参数使用的 strlen 函数更换成 sizeof，那么程序运行会得到什么结果？为什么？<br>会得到 14 个连续的 b。这是由于 sizeof 得到的长度为 7，会导致 strA 的终止符被替换成 b，后面再次读取 strA 的时候由于无法识别到终止符，会继续读取，直到读取到 strB 的终止符才结束。两个字符串加起来就是 14 个 b。","like_count":5,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551456,"discussion_content":"回答正确！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645018999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1000076,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/8c/373d4027.jpg","nickname":"龍蝦","note":"","ucode":"BE1D500833F070","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":554107,"discussion_content":"strA 是 6 个 a，strB 是 7 个 b，一开始没注意到这差异。以为长度一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646216094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":551456,"ip_address":""},"score":554107,"extra":""}]},{"author":{"id":1613105,"avatar":"","nickname":"何林","note":"","ucode":"34362DFA77E7AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588150,"discussion_content":"确定？换成sizeof,怎么执行结果为结果是7个b","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663575406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328492,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1640753423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14525655311","product_id":100100701,"comment_content":"不错，就喜欢这种讲细节的课程。","like_count":4},{"had_liked":false,"id":328443,"user_name":"白花风信子","can_delete":false,"product_type":"c1","uid":2850941,"ip_address":"","ucode":"89CA70180EA326","user_header":"https://static001.geekbang.org/account/avatar/00/2b/80/7d/51914d34.jpg","comment_is_top":false,"comment_ctime":1640741749,"is_pvip":false,"replies":[{"id":"119638","content":"会的哈，我们会在下一个模块中介绍的。","user_name":"作者回复","user_name_real":"作者","uid":"1005890","ctime":1640747103,"ip_address":"","comment_id":328443,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14525643637","product_id":100100701,"comment_content":"学到好多细节！不过老师会在后面再深入提提elf文件是怎么加载的嘛qwq。","like_count":3,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542425,"discussion_content":"会的哈，我们会在下一个模块中介绍的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640747103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328484,"user_name":"Ping","can_delete":false,"product_type":"c1","uid":1812754,"ip_address":"","ucode":"FC4743D8FEF61C","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/12/e041e7b2.jpg","comment_is_top":false,"comment_ctime":1640750288,"is_pvip":false,"replies":[{"id":"119759","content":"musl 其实跟我们常用的 glibc（GNU C Library）类似，两者同属于 C 标准库（libc）的一种实现。只是相对来说，glibc 实现较为臃肿，健壮性稍差，存在的潜在漏洞也多。但是实现的功能众多（有很多 C 标准以外的），且使用也很广泛。而 musl 则旨在提供一个轻量级的、ABI 稳定的、且适用于移动设备和嵌入式系统的 libc 实现。它支持的功能上则对标 C 标准。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1640834014,"ip_address":"","comment_id":328484,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10230684880","product_id":100100701,"comment_content":"老师能不能介绍一下musl这个库的特点和用途？","like_count":2,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542752,"discussion_content":"musl 其实跟我们常用的 glibc（GNU C Library）类似，两者同属于 C 标准库（libc）的一种实现。只是相对来说，glibc 实现较为臃肿，健壮性稍差，存在的潜在漏洞也多。但是实现的功能众多（有很多 C 标准以外的），且使用也很广泛。而 musl 则旨在提供一个轻量级的、ABI 稳定的、且适用于移动设备和嵌入式系统的 libc 实现。它支持的功能上则对标 C 标准。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640834014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328671,"user_name":"赵岩松","can_delete":false,"product_type":"c1","uid":2032451,"ip_address":"","ucode":"596694E4360482","user_header":"https://static001.geekbang.org/account/avatar/00/1f/03/43/ed0dcb27.jpg","comment_is_top":false,"comment_ctime":1640832094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5935799390","product_id":100100701,"comment_content":"终于到了我期待的讲标准库的环节","like_count":1},{"had_liked":false,"id":357408,"user_name":"范文龙","can_delete":false,"product_type":"c1","uid":1027214,"ip_address":"北京","ucode":"E77A5AF5BDBE6C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/8e/cb4cf9cb.jpg","comment_is_top":false,"comment_ctime":1663231078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663231078","product_id":100100701,"comment_content":"如果把 strncpy 函数中第三个参数使用的 strlen 函数更换成 sizeof，那么程序运行会得到什么结果？为什么？<br>在X64 GCC8.1 测试输出7个b，原因是strA的地址大于strB的地址，复制后不会和strB的内容连起来。<br>如果按照如下修改，输出14个b：<br>#include &lt;string.h&gt;<br>#include &lt;stdio.h&gt;<br>int main(void) {<br>  char strB[] = &quot;bbbbbbb&quot;;<br>  char strA[] = &quot;aaaaaa&quot;;<br>  printf(&quot;%s\\n&quot;, strncpy(strA, strB, sizeof(strA)));  &#47;&#47; &quot;bbbbbb&quot;.<br>}","like_count":0},{"had_liked":false,"id":353737,"user_name":"fei","can_delete":false,"product_type":"c1","uid":2126331,"ip_address":"浙江","ucode":"36D802EB42FEF3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOUjOGRlYNY1TDZpso7LQEhMyqmgUqEW3sm5xWTHqhU5rUol8NeEOxLMQA5ib09Y8Yg97ziaqsKduA/132","comment_is_top":false,"comment_ctime":1659710746,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1659710746","product_id":100100701,"comment_content":"pgrep string | xargs -I {} cat &#47;proc&#47;{}&#47;maps<br>这条命令执行时，string进程老早退出了。这个实验要怎么来做呢？","like_count":0},{"had_liked":false,"id":348335,"user_name":"徐雅清","can_delete":false,"product_type":"c1","uid":1925507,"ip_address":"","ucode":"323818E7A11847","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIvc0wApgEPKYdf4T8eh0MpFxE3edvlKM9ibOPS09x9Wiavcj76ic3XpXQEpibmehC9srh7TKq2EgeK8Q/132","comment_is_top":false,"comment_ctime":1655003907,"is_pvip":false,"replies":[{"id":"127248","content":"很好的问题！需要注意的是，实际上包括 isalpha 在内的一系列字符判断函数，它们的行为是在满足函数格式要求的情况下返回“非零值”，否则返回 0。而这里的非零值具体是多少则视不同的编译器而定。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1656224305,"ip_address":"","comment_id":348335,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1655003907","product_id":100100701,"comment_content":"为什么我在线编译，isalpha(c)的结果是1024呢，复制的老师的代码","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577600,"discussion_content":"很好的问题！需要注意的是，实际上包括 isalpha 在内的一系列字符判断函数，它们的行为是在满足函数格式要求的情况下返回“非零值”，否则返回 0。而这里的非零值具体是多少则视不同的编译器而定。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656224305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336558,"user_name":"龍蝦","can_delete":false,"product_type":"c1","uid":1000076,"ip_address":"","ucode":"BE1D500833F070","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/8c/373d4027.jpg","comment_is_top":false,"comment_ctime":1646213218,"is_pvip":true,"replies":[{"id":"123038","content":"“数组形式定义，应该是在栈上直接定义局部变量吧？”是的哈。我们这里文中提到的“复制”是指对同样的这段数据，编译器会通过其他的方式使用，并不是说在机器指令层面有复制的过程。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1646309530,"ip_address":"","comment_id":336558,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646213218","product_id":100100701,"comment_content":"而使用数组形式定义的字符串 strA ，则是将该字符串的数据从 .rodata 中复制到了其他地方，strA 的值为复制后该字符串第一个字符的所在地址。<br><br>老师，数组形式定义，应该是在栈上直接定义局部变量吧？<br><br>#include &lt;stdio.h&gt;<br>int main(void) {<br>  const char strA[] = &quot;a&quot;;<br>  const char* strB = &quot;a&quot;;<br>  return 0;<br>}<br><br>.LC0:<br>        .string &quot;a&quot;<br>main:<br>        push    rbp<br>        mov     rbp, rsp<br>        mov     WORD PTR [rbp-10], 97<br>        mov     QWORD PTR [rbp-8], OFFSET FLAT:.LC0<br>        mov     eax, 0<br>        pop     rbp<br>        ret<br>","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554306,"discussion_content":"“数组形式定义，应该是在栈上直接定义局部变量吧？”是的哈。我们这里文中提到的“复制”是指对同样的这段数据，编译器会通过其他的方式使用，并不是说在机器指令层面有复制的过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646309530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336019,"user_name":"shk1230","can_delete":false,"product_type":"c1","uid":1701572,"ip_address":"","ucode":"9E39279C23FF8F","user_header":"https://static001.geekbang.org/account/avatar/00/19/f6/c4/e14686d4.jpg","comment_is_top":false,"comment_ctime":1645849652,"is_pvip":true,"replies":[{"id":"122793","content":"这里实际上就是对 tgmath.h 中的这些支持泛型参数的宏函数简称哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1645875174,"ip_address":"","comment_id":336019,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645849652","product_id":100100701,"comment_content":"什么叫泛型宏？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553395,"discussion_content":"这里实际上就是对 tgmath.h 中的这些支持泛型参数的宏函数简称哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645875174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330989,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1642343360,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642343360","product_id":100100701,"comment_content":"拷贝字符串： strlen 不包含终止符， sizeof 会包含终止符，所以会多拷贝一个字符","like_count":0},{"had_liked":false,"id":329915,"user_name":"=","can_delete":false,"product_type":"c1","uid":2600127,"ip_address":"","ucode":"104232A8292220","user_header":"https://static001.geekbang.org/account/avatar/00/27/ac/bf/f549183e.jpg","comment_is_top":false,"comment_ctime":1641641564,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641641564","product_id":100100701,"comment_content":"字符串常量会被保存在.rodata段中，且其值不可改变。<br>文中在strtok函数的第一参数上，即源字符串处传入的是字符串常量，然而strtok函数会改变源字符串的值，因此会报错。","like_count":0},{"had_liked":false,"id":328569,"user_name":"ppm","can_delete":false,"product_type":"c1","uid":2550034,"ip_address":"","ucode":"A52733E4654270","user_header":"https://static001.geekbang.org/account/avatar/00/26/e9/12/a1d173fe.jpg","comment_is_top":false,"comment_ctime":1640774378,"is_pvip":false,"replies":[{"id":"120863","content":"👍🏻","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1642340713,"ip_address":"","comment_id":328569,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640774378","product_id":100100701,"comment_content":"写了一个strtok https:&#47;&#47;gist.github.com&#47;goog&#47;f41b7b7fcdb7e9de93606c370c9d22b5","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546569,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642340713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328519,"user_name":"blentle","can_delete":false,"product_type":"c1","uid":1064679,"ip_address":"","ucode":"AC092609A4942A","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e7/261711a5.jpg","comment_is_top":false,"comment_ctime":1640761258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640761258","product_id":100100701,"comment_content":"学到了.","like_count":0},{"had_liked":false,"id":328414,"user_name":"ppm","can_delete":false,"product_type":"c1","uid":2550034,"ip_address":"","ucode":"A52733E4654270","user_header":"https://static001.geekbang.org/account/avatar/00/26/e9/12/a1d173fe.jpg","comment_is_top":false,"comment_ctime":1640708506,"is_pvip":false,"replies":[{"id":"119646","content":"嗯，查了一下才发现 snprintf 比 sprintf 函数更安全一些。新知识很到位！","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1640750808,"ip_address":"","comment_id":328414,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640708506","product_id":100100701,"comment_content":"怎么没有snprintf的例子","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542448,"discussion_content":"嗯，查了一下才发现 snprintf 比 sprintf 函数更安全一些。新知识很到位！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640750808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}