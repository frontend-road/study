{"id":76677,"title":"12 | 存储优化（上）：常见的数据存储方法有哪些？","content":"<p>通过专栏前面我讲的I/O优化基础知识，相信你肯定了解了文件系统和磁盘的一些机制，以及不同I/O方式的使用场景以及优缺点，并且可以掌握如何在线上监控I/O操作。</p><p>万丈高楼平地起，在理解并掌握这些基础知识的同时，你肯定还想知道如何利用这些知识指导我们写出更好的代码。</p><p>今天我来结合Android系统的一些特性，讲讲开发过程中常见存储方法的优缺点，希望可以帮你在日常工作中如何做出更好的选择。</p><h2>Android的存储基础</h2><p>在讲具体的存储方法之前，我们应该对Android系统存储相关的一些基础知识有所了解。</p><p><strong>1. Android分区</strong></p><p>I/O优化中讲到的大部分知识更侧重Linux系统，对于Android来说，我们首先应该对Android分区的架构和作用有所了解。在我们熟悉的Windows世界中，我们一般都把系统安装在C盘，然后还会有几个用来存放应用程序和数据的分区。</p><p>Android系统可以通过/proc/partitions或者df命令来查看的各个分区情况，下图是Nexus 6中df命令的运行结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/a1/1c/a1036cee7c76e900b146e0875587601c.png?wh=1518*282\" alt=\"\"></p><p>什么是分区呢？分区简单来说就是将设备中的存储划分为一些互不重叠的部分，每个部分都可以单独格式化，用作不同的目的。这样系统就可以灵活的针对单独分区做不同的操作，例如在系统还原（recovery）过程，我们不希望会影响到用户存储的数据。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/e7/31/e7440b651fec65f40ac324065b3ed331.png?wh=1276*428\" alt=\"\"></p><p>从上面的表中你可以看到，每个分区非常独立，<strong>不同的分区可以使用的不同的文件系统</strong>。其中比较重要的有：</p><ul>\n<li>\n<p>/system分区：它是存放所有Google提供的Android组件的地方。这个分区只能以只读方式mount。这样主要基于稳定性和安全性考虑，即使发生用户突然断电的情况，也依然需要保证/system分区的内容不会受到破坏和篡改。</p>\n</li>\n<li>\n<p>/data分区：它是所有用户数据存放的地方。主要为了实现数据隔离，即系统升级和恢复的时候会擦除整个/system分区，但是却不会影响/data的用户数据。而恢复出厂设置，只会擦除/data的数据。</p>\n</li>\n<li>\n<p>/vendor分区：它是存放厂商特殊系统修改的地方。特别是在Android 8.0以后，隆重推出了<a href=\"https://source.android.com/devices/architecture\">“Treble”项目</a>。厂商OTA时可以只更新自己的/vendor分区即可，让厂商能够以更低的成本，更轻松、更快速地将设备更新到新版Android系统。</p>\n</li>\n</ul><p><strong>2. Android存储安全</strong></p><p>除了数据的分区隔离，存储安全也是Android系统非常重要的一部分<strong>，</strong>存储安全首先考虑的是权限控制。</p><p><strong>第一，权限控制</strong></p><p>Android的每个应用都在自己的<a href=\"https://source.android.google.cn/security/app-sandbox\">应用沙盒</a>内运行，在 Android 4.3之前的版本中，这些沙盒使用了标准Linux的保护机制，通过为每个应用创建独一无二的Linux UID来定义。简单来说，我们需要保证微信不能访问淘宝的数据，并且在没有权限的情况下也不能访问系统的一些保护文件。</p><p>在Android 4.3引入了<a href=\"https://source.android.google.cn/security/selinux\">SELinux</a>（Security Enhanced Linux）机制进一步定义Android应用沙盒的边界。那它有什么特别的呢？它的作用是即使我们进程有root权限也不能为所欲为，如果想在SELinux系统中干任何事情，都必须先在专门的安全策略配置文件中赋予权限。</p><p><strong>第二，数据加密</strong></p><p>除了权限的控制，用户还会担心在手机丢失或者被盗导致个人隐私数据泄露。加密或许是一个不错的选择，它可以保护丢失或被盗设备上的数据。</p><p>Android有两种<a href=\"https://source.android.google.cn/security/encryption\">设备加密方法</a>：全盘加密和文件级加密。<a href=\"https://source.android.google.cn/security/encryption/full-disk\">全盘加密</a>是在Android 4.4中引入的，并在Android 5.0中默认打开。它会将/data分区的用户数据操作加密/解密，对性能会有一定的影响，但是新版本的芯片都会在硬件中提供直接支持。</p><p>我们知道，基于文件系统的加密，如果设备被解锁了，加密也就没有用了。所以Android 7.0增加了<a href=\"https://source.android.google.cn/security/encryption/file-based\">基于文件的加密</a>。在这种加密模式下，将会给每个文件都分配一个必须用用户的passcode推导出来的密钥。特定的文件被屏幕锁屏之后，直到用户下一次解锁屏幕期间都不能访问。</p><p>可能有些同学会问了，Android的这两种设备加密方法跟应用的加密有什么不同，我们在应用存储还需要单独的给敏感文件加密吗？</p><p>我想说的是，设备加密方法对应用程序来说是透明的，它保证我们读取到的是解密后的数据。对于应用程序特别敏感的数据，我们也需要采用RSA、AES、chacha20等常用方式做进一步的存储加密。</p><h2>常见的数据存储方法</h2><p>Android为我们提供了很多种持久化存储的方案，在具体介绍它们之前，你需要先问一下自己，什么是存储？</p><p>每个人可能都会有自己的答案，在我看来，存储就是把特定的数据结构转化成可以被记录和还原的格式，这个数据格式可以是二进制的，也可以是XML、JSON、Protocol Buffer这些格式。</p><p>对于闪存来说，一切归根到底还是二进制的，XML、JSON它们只是提供了一套通用的二进制编解码格式规范。既然有那么多存储的方案，那我们在选择数据存储方法时，一般需要考虑哪些关键要素呢？</p><p><strong>1. 关键要素</strong></p><p>在选择数据存储方法时，我一般会想到下面这几点，我把它们总结给你。</p><p><img src=\"https://static001.geekbang.org/resource/image/63/c3/63ef4665d77714c0704f11d82a5f0ac3.png?wh=1292*1062\" alt=\"\"></p><p>那上面这些要素哪个最重要呢？数据存储方法不能脱离场景来考虑，我们不可能把这六个要素都做成最完美。</p><p>我来解释一下这句话。如果首要考虑的是正确性，那我们可能需要采用冗余、双写等方案，那就要容忍对时间开销产生的额外影响。同样如果非常在意安全，加解密环节的开销也必不可小。如果想针对启动场景，我们希望选择在初始化时间和读取时间更有优势的方案。</p><p><strong>2. 存储选项</strong></p><p>总的来说，我们需要结合应用场景选择合适的数据存储方法。那Android为应用开发者提供了哪些存储数据的方法呢？你可以参考<a href=\"https://developer.android.com/guide/topics/data/data-storage\">存储选项</a>，综合来看，有下面几种方法。</p><ul>\n<li>\n<p>SharedPreferences</p>\n</li>\n<li>\n<p>ContentProvider</p>\n</li>\n<li>\n<p>文件</p>\n</li>\n<li>\n<p>数据库</p>\n</li>\n</ul><p>今天我先来讲SharedPreferences和ContentProvider这两个存储方法，文件和数据库将放到“存储优化”后面两期来讲。</p><p><strong>第一，SharedPreferences的使用。</strong></p><p><a href=\"http://androidxref.com/9.0.0_r3/xref/frameworks/base/core/java/android/content/SharedPreferences.java\">SharedPreferences</a>是Android中比较常用的存储方法，它可以用来存储一些比较小的键值对集合。</p><p>虽然SharedPreferences使用非常简便，但也是我们诟病比较多的存储方法。它的性能问题比较多，我可以轻松地说出它的“七宗罪”。</p><ul>\n<li>\n<p>跨进程不安全。由于没有使用跨进程的锁，就算使用<a href=\"https://developer.android.com/reference/android/content/Context\">MODE_MULTI_PROCESS</a>，SharedPreferences在跨进程频繁读写有可能导致数据全部丢失。根据线上统计，SP大约会有万分之一的损坏率。</p>\n</li>\n<li>\n<p>加载缓慢。SharedPreferences文件的加载使用了异步线程，而且加载线程并没有设置线程优先级，如果这个时候主线程读取数据就需要等待文件加载线程的结束。<strong>这就导致出现主线程等待低优先级线程锁的问题，比如一个100KB的SP文件读取等待时间大约需要50~100ms，我建议提前用异步线程预加载启动过程用到的SP文件。</strong></p>\n</li>\n<li>\n<p>全量写入。无论是调用commit()还是apply()，即使我们只改动其中的一个条目，都会把整个内容全部写到文件。而且即使我们多次写入同一个文件，SP也没有将多次修改合并为一次，这也是性能差的重要原因之一。</p>\n</li>\n<li>\n<p>卡顿。由于提供了异步落盘的apply机制，在崩溃或者其他一些异常情况可能会导致数据丢失。所以当应用收到系统广播，或者被调用onPause等一些时机，系统会强制把所有的SharedPreferences对象数据落地到磁盘。如果没有落地完成，这时候主线程会被一直阻塞。<strong>这样非常容易造成卡顿，甚至是ANR，从线上数据来看SP卡顿占比一般会超过5%。</strong></p>\n</li>\n</ul><p>讲到这里，如果你对SharedPreferences机制还不熟悉的话，可以参考<a href=\"https://juejin.im/entry/597446ed6fb9a06bac5bc630\">《彻底搞懂SharedPreferences》</a>。</p><p>坦白来讲，<strong>系统提供的SharedPreferences的应用场景是用来存储一些非常简单、轻量的数据</strong>。我们不要使用它来存储过于复杂的数据，例如HTML、JSON等。而且SharedPreference的文件存储性能与文件大小相关，每个SP文件不能过大，我们不要将毫无关联的配置项保存在同一个文件中，同时考虑将频繁修改的条目单独隔离出来。</p><p>我们也可以替换通过复写Application的getSharedPreferences方法替换系统默认实现，比如优化卡顿、合并多次apply操作、支持跨进程操作等。具体如何替换呢？在今天的Sample中我也提供了一个简单替换实现。</p><pre><code>public class MyApplication extends Application {\n  @Override\n  public SharedPreferences getSharedPreferences(String name, int mode)        \n  {\n     return SharedPreferencesImpl.getSharedPreferences(name, mode);\n  }\n}\n</code></pre><p>对系统提供的SharedPreferences的小修小补虽然性能有所提升，但是依然不能彻底解决问题。基本每个大公司都会自研一套替代的存储方案，比如微信最近就开源了<a href=\"https://github.com/Tencent/MMKV\">MMKV</a>。</p><p>下面是MMKV对于SharedPreferences的“六要素”对比。</p><p><img src=\"https://static001.geekbang.org/resource/image/f1/ea/f1aadf32f59291e428be7591a38668ea.png?wh=1280*1050\" alt=\"\"></p><p>你可以参考MMKV的<a href=\"https://github.com/Tencent/MMKV/wiki/design\">实现原理</a>和<a href=\"https://github.com/Tencent/MMKV/wiki/android_benchmark_cn\">性能测试报告</a>，里面有一些非常不错的思路。例如<a href=\"https://github.com/Tencent/MMKV/wiki/android_ipc\">利用文件锁保证跨进程的安全</a>、使用mmap保证数据不会丢失、选用性能和存储空间更好的Protocol Buffer代替XML、支持增量更新等。</p><p>根据I/O优化的分析，对于频繁修改的配置使用mmap的确非常合适，使用者不用去理解apply()和commit()的差别，也不用担心数据的丢失。同时，我们也不需要每次都提交整个文件，整体性能会有很大提升。</p><p><strong>第二，ContentProvider的使用。</strong></p><p>为什么Android系统不把SharedPreferences设计成跨进程安全的呢？那是因为Android系统更希望我们在这个场景选择使用ContentProvider作为存储方式。ContentProvider作为Android四大组件中的一种，为我们提供了不同进程甚至是不同应用程序之间共享数据的机制。</p><p>Android系统中比如相册、日历、音频、视频、通讯录等模块都提供了ContentProvider的访问支持。它的使用十分简单，你可以参考<a href=\"https://developer.android.com/guide/topics/providers/content-providers\">官方文档</a>。</p><p>当然，在使用过程也有下面几点需要注意。</p><ul>\n<li>启动性能</li>\n</ul><p>ContentProvider的生命周期默认在Application onCreate()之前，而且都是在主线程创建的。我们自定义的ContentProvider类的构造函数、静态代码块、onCreate函数都尽量不要做耗时的操作，会拖慢启动速度。</p><p><img src=\"https://static001.geekbang.org/resource/image/b2/40/b2dcd6744561a4e219235c874491fa40.png?wh=1260*330\" alt=\"\"></p><p>可能很多同学都不知道ContentProvider还有一个多进程模式，它可以和AndroidManifest中的multiprocess属性结合使用。这样调用进程会直接在自己进程里创建一个push进程的Provider实例，就不需要跨进程调用了。需要注意的是，这样也会带来Provider的多实例问题。</p><ul>\n<li>稳定性</li>\n</ul><p>ContentProvider在进行跨进程数据传递时，利用了Android的Binder和匿名共享内存机制。简单来说，就是通过Binder传递CursorWindow对象内部的匿名共享内存的文件描述符。这样在跨进程传输中，结果数据并不需要跨进程传输，而是在不同进程中通过传输的匿名共享内存文件描述符来操作同一块匿名内存，这样来实现不同进程访问相同数据的目的。</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/b4/1d516441b44e3a7fbd33aca6a96a64b4.png?wh=986*724\" alt=\"\"></p><p>正如我前面I/O优化所讲的，基于mmap的匿名共享内存机制也是有代价的。当传输的数据量非常小的时候，可能不一定划算。所以ContentProvider提供了一种call函数，它会直接通过Binder来传输数据。</p><p>Android的Binder传输是有大小限制的，一般来说限制是1~2MB。ContentProvider的接口调用参数和call函数调用并没有使用匿名共享机制，比如要批量插入很多数据，那么就会出现一个插入数据的数组，如果这个数组太大了，那么这个操作就可能会出现数据超大异常。</p><ul>\n<li>安全性</li>\n</ul><p>虽然ContentProvider为应用程序之间的数据共享提供了很好的安全机制，但是如果ContentProvider是exported，当支持执行SQL语句时就需要注意SQL注入的问题。另外如果我们传入的参数是一个文件路径，然后返回文件的内容，这个时候也要校验合法性，不然整个应用的私有数据都有可能被别人拿到，在intent传递参数的时候可能经常会犯这个错误。</p><p>最后我给你总结一下ContentProvider的“六要素”优缺点。</p><p><img src=\"https://static001.geekbang.org/resource/image/67/26/677a736dfdcb8cc4e3d7157a58fe7726.png?wh=906*840\" alt=\"\"></p><p>总的来说，ContentProvider这套方案实现相对比较笨重，适合传输大的数据。</p><h2>总结</h2><p>虽然SharedPreferences和ContentProvider都是我们日常经常使用的存储方法，但是里面的确会有大大小小的暗坑。所以我们需要充分了解它们的优缺点，这样在工作中可以更好地使用和优化。</p><p>如何在合适的场景选择合适的存储方法是存储优化的必修课，你应该学会通过正确性、时间开销、空间开销、安全、开发成本以及兼容性这六大关键要素来分解某个存储方法。</p><p>在设计某个存储方案的时候也是同样的道理，我们无法同时把所有的要素都做得最好，因此要学会取舍和选择，在存储的世界里不存在全局最优解，我们要找的是局部的最优解。这个时候更应明确自己的诉求，大胆牺牲部分关键点的指标，将自己场景最关心的要素点做到最好。</p><h2>课后作业</h2><p>下面是MMKV给出的性能测试报告，你可以看到跟系统的SharedPreferences相比，主要差距在于写的速度。</p><p><img src=\"https://static001.geekbang.org/resource/image/5d/bd/5df2fdd4c21452641afacb0dfd02cabd.png?wh=1412*924\" alt=\"\"></p><p>没有实践就没有发言权，今天我们一起来尝试测试对比MMKV与系统SharedPreferences的性能差异。请将你的测试结果和分析体会，写在留言区跟同学们分享交流吧。</p><p>今天的练习<a href=\"https://github.com/AndroidAdvanceWithGeektime/Chapter12\">Sample</a>是通过复写Application的getSharedPreferences方法替换系统默认实现，这种方式虽然不是最好的方法，不过它主要的优点在于代码的侵入性比较低，无需修改太多的代码。</p><p>欢迎你点击“请朋友读”，把今天的内容分享给好友，邀请他一起学习。最后别忘了在评论区提交今天的作业，我也为认真完成作业的同学准备了丰厚的“学习加油礼包”，期待与你一起切磋进步哦。</p><p></p>","neighbors":{"left":{"article_title":"11 | I/O优化（下）：如何监控线上I/O操作？","id":75914},"right":{"article_title":"13 | 存储优化（中）：如何优化数据存储？","id":76985}},"comments":[{"had_liked":false,"id":57823,"user_name":"李杰","can_delete":false,"product_type":"c1","uid":1330272,"ip_address":"","ucode":"855D75D4ABC026","user_header":"https://static001.geekbang.org/account/avatar/00/14/4c/60/524a18e9.jpg","comment_is_top":false,"comment_ctime":1546918169,"is_pvip":false,"replies":[{"id":"20849","content":"赞，研究的挺细的，大部分都对。不过mmkv有考虑这点做了crc检验，文件损坏之后支持recover模式，从文件中尽力而为的修复数据","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1546922623,"ip_address":"","comment_id":57823,"utype":1}],"discussion_count":1,"race_medal":0,"score":"173345610009","product_id":100021101,"comment_content":"老师您好!<br>最近正打算利用MMKV替换SharedPreferences，研读了一下MMKV的源代码，发现他们在内存重组的时候是直接在原始文件中写重组过后的数据，并且重组完成之后没有sync, 感觉这样会有很大的风险。虽说mmap利用操作系统的机制来保证即使进程被杀，也能写数据, 但首先得保证把所有要写的数据写进mmap映射的内存中，如果在写完成之前进程就已经被杀了，那就有可能出现mmap中的数据是错误的，即使完成了写mmap内存，如果在操作系统将数据写入硬盘前突然关机，那也有可能丢失数据，造成最终的数据损坏。<br>而SharedPreferences的写操作，首先是将原始文件备份，再写入所有数据，只有写入成功了，并且通过sync完成落盘后，才会将Backup文件删除。如果在写入过程中进程被杀，或者关机，进程再次起来的时候发现存在Backup文件，就将Backup文件重命名为原始文件，原本未完成写入的文件就直接丢弃来，这样最多也就是未完成写入的数据丢失，文件是不会损坏的，所以可以认为SharedPreferences的写入在单进程中是安全的，也正是因为back的机制，导致多进程可能会丢失新写入的数据。<br>从MMKV的github上看到数据有效性的说明，在ios每天存在超过70万次的数据校验失败，是不是就是写数据实际是不安全的导致的呢？对MMKV和SharedPreferences的理解可能不对，请老师帮忙解答一下，谢谢！","like_count":41,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435776,"discussion_content":"赞，研究的挺细的，大部分都对。不过mmkv有考虑这点做了crc检验，文件损坏之后支持recover模式，从文件中尽力而为的修复数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546922623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57843,"user_name":"李杰","can_delete":false,"product_type":"c1","uid":1330272,"ip_address":"","ucode":"855D75D4ABC026","user_header":"https://static001.geekbang.org/account/avatar/00/14/4c/60/524a18e9.jpg","comment_is_top":false,"comment_ctime":1546925857,"is_pvip":false,"replies":[{"id":"20911","content":"因为用了pb的结构已经二进制了，如果某一行写出问题，应该是decode失败的。<br><br>不过这里可能的确有优化的空间，可能文件头上面可以记住上一次检验成功的行数。","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1546996123,"ip_address":"","comment_id":57843,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27316729633","product_id":100021101,"comment_content":"老师您好!<br>针对mmkv的recover模式，也正是我们担心的一个点。从mmkv源码来看，在crc校验失败后默认选择丢弃数据。recover模式作为一个可选模式，也没有看到有什么恢复数据的措施，只是仍然强行decode数据，这样的话理论上decode出来的数据就可能是错误的，不知道是不是哪里疏漏了或是理解有问题。","like_count":7,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435786,"discussion_content":"因为用了pb的结构已经二进制了，如果某一行写出问题，应该是decode失败的。\n\n不过这里可能的确有优化的空间，可能文件头上面可以记住上一次检验成功的行数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546996123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138459,"user_name":"薯条","can_delete":false,"product_type":"c1","uid":1334064,"ip_address":"","ucode":"08E591FC62563A","user_header":"https://static001.geekbang.org/account/avatar/00/14/5b/30/83104f0f.jpg","comment_is_top":false,"comment_ctime":1570258801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23045095281","product_id":100021101,"comment_content":"打卡，一直以来，想用probuff作为数据传输，可是原生的操作有点麻烦，有幸得知mmkv库，收获","like_count":5},{"had_liked":false,"id":70843,"user_name":"书虫","can_delete":false,"product_type":"c1","uid":1083490,"ip_address":"","ucode":"28341D162D10D2","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/62/34fd1293.jpg","comment_is_top":false,"comment_ctime":1551193020,"is_pvip":false,"replies":[{"id":"31071","content":"可以看看源码，ActivityThread","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1555395524,"ip_address":"","comment_id":70843,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14436094908","product_id":100021101,"comment_content":"老师，当应用收到系统广播，或者被调用 onPause 等一些时机，系统会强制把所有的 SharedPreferences 对象数据落地到磁盘，这说法依据的在哪里？","like_count":4,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440858,"discussion_content":"可以看看源码，ActivityThread","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555395524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1763575,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DHYYPfME53m9Ftib0PcmM6IGX7huJX7s1rlAlEz6xoWgo15C5kSqXFxsZjs73TbGXk3EVswAeiazDxHVNsJCzajw/132","nickname":"InfoQ_79090f4c32ea","note":"","ucode":"1CE42ABD931537","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350718,"discussion_content":"这个好像只对低于4.0版本的机器生效","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613986636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":225454,"discussion_content":"android.app.QueuedWork#waitToFinish()","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586359100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58596,"user_name":"东方","can_delete":false,"product_type":"c1","uid":1329945,"ip_address":"","ucode":"50FDAA2D95170C","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/19/6f037647.jpg","comment_is_top":false,"comment_ctime":1547131149,"is_pvip":false,"replies":[{"id":"22037","content":"在达到一定大小的时候会做自动合并，这块可以看看源码的介绍","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1548041634,"ip_address":"","comment_id":58596,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10137065741","product_id":100021101,"comment_content":"张老师，今天跑了mmkv的demo，发现文件内容是append形式，不会覆盖前面的key，导致文件内容越来越大。","like_count":3,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436130,"discussion_content":"在达到一定大小的时候会做自动合并，这块可以看看源码的介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548041634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1335259,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5f/db/bd0f7d6b.jpg","nickname":"cupcake","note":"","ucode":"8B4070FFB181C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":74000,"discussion_content":"自动合并这一步，会移除重复的key吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575621530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138457,"user_name":"薯条","can_delete":false,"product_type":"c1","uid":1334064,"ip_address":"","ucode":"08E591FC62563A","user_header":"https://static001.geekbang.org/account/avatar/00/14/5b/30/83104f0f.jpg","comment_is_top":false,"comment_ctime":1570258223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5865225519","product_id":100021101,"comment_content":"打卡，在职业生涯中，的确遇到Sh 保存数据 卡顿的问题。以后尽量使用MMKV框架","like_count":1},{"had_liked":false,"id":91297,"user_name":"大土豆","can_delete":false,"product_type":"c1","uid":1121636,"ip_address":"","ucode":"67445DC3EC9DB0","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/64/52a5863b.jpg","comment_is_top":false,"comment_ctime":1556967708,"is_pvip":true,"replies":[{"id":"62007","content":"SP使用不当的确是比较多团队遇到的问题，很多人无论大小的数据都使用sp","user_name":"作者回复","user_name_real":"张绍文","uid":"1009577","ctime":1576675794,"ip_address":"","comment_id":91297,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5851935004","product_id":100021101,"comment_content":"之前看专栏的时候，这个部分跳过了，结果我负责的App出现了严重的卡顿卡顿，BlockCanery查了半天，发现是sp的锅，性能差倒是其次，关键是Activity的生命周期中需要处理sp的任务，造成了很严重的卡顿，我的思路是一部分不需要持久化的数据改成内存缓存，还有一部分需要持久化的数据改成mmkv","like_count":2,"discussions":[{"author":{"id":1009577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/a9/e251ace7.jpg","nickname":"张绍文","note":"","ucode":"94B49E5F80BFDE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448873,"discussion_content":"SP使用不当的确是比较多团队遇到的问题，很多人无论大小的数据都使用sp","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576675794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1334064,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5b/30/83104f0f.jpg","nickname":"薯条","note":"","ucode":"08E591FC62563A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24771,"discussion_content":"BlockCanery 好久没有维护了吧，兼容8.0，9.0 存在问题。大佬提的这个案例，值得注意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570258178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":60420,"user_name":"HI","can_delete":false,"product_type":"c1","uid":1238921,"ip_address":"","ucode":"C65218113883E6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/89/207cc841.jpg","comment_is_top":false,"comment_ctime":1547470583,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5842437879","product_id":100021101,"comment_content":"谢谢，长见识了","like_count":1},{"had_liked":false,"id":353751,"user_name":"微尘","can_delete":false,"product_type":"c1","uid":1667439,"ip_address":"北京","ucode":"F9CB2CEE9F19B9","user_header":"https://static001.geekbang.org/account/avatar/00/19/71/6f/07e1452a.jpg","comment_is_top":false,"comment_ctime":1659751005,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1659751005","product_id":100021101,"comment_content":"时至今日，再看也收货满满，遇到sp问题，较多。解惑了","like_count":0},{"had_liked":false,"id":313149,"user_name":"文培定","can_delete":false,"product_type":"c1","uid":2382667,"ip_address":"","ucode":"A13E83C4FFDEBC","user_header":"","comment_is_top":false,"comment_ctime":1632297308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632297308","product_id":100021101,"comment_content":"普通人如我，看到新东西就只去用用，高手们则会仔细研究，然后提出各种问题！","like_count":0},{"had_liked":false,"id":296372,"user_name":"在你身边","can_delete":false,"product_type":"c1","uid":1625987,"ip_address":"","ucode":"8E38EC104CAD33","user_header":"https://static001.geekbang.org/account/avatar/00/18/cf/83/99b0ec6f.jpg","comment_is_top":false,"comment_ctime":1622944470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622944470","product_id":100021101,"comment_content":"懂了已经懂，不懂的完全听不懂，各种中文加上英文和简化，我觉得对于听课的非常不友好","like_count":0},{"had_liked":false,"id":201252,"user_name":"不知","can_delete":false,"product_type":"c1","uid":1803488,"ip_address":"","ucode":"A2ECBFE43ACDAB","user_header":"https://static001.geekbang.org/account/avatar/00/1b/84/e0/cdb6de57.jpg","comment_is_top":false,"comment_ctime":1585740282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585740282","product_id":100021101,"comment_content":"专栏评论都这么久的吗","like_count":0}]}