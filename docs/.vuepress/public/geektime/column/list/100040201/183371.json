{"id":183371,"title":"17 | 设计模式应用：编程框架中的设计模式","content":"<p>在绝大多数情况下，我们开发应用程序的时候，并不是从头开发的。比如，我们用Java开发一个Web应用，并不需要自己写代码监听HTTP 80端口；不需要处理网络传输的二进制HTTP数据包（参考<a href=\"https://time.geekbang.org/column/article/169545\">第4篇网络编程原理</a>）；不需要亲自为每个用户请求分配一个处理线程（参考<a href=\"https://time.geekbang.org/column/article/166581\">01篇</a><a href=\"https://time.geekbang.org/column/article/166581\">操作系统原理</a>），而是直接编写一个Servlet，得到一个HttpRequest对象进行处理就可以了。我们甚至不需要从这个HttpRequest对象中获取请求参数，通过Controller就可以直接得到一个由请求参数构造的对象。</p><p>我们写代码的时候，只需要关注自己的业务逻辑就可以了。那些通用的功能，比如监听HTTP端口，从HTTP请求中构造参数对象，是由一些通用的框架来完成的，比如Tomcat或者Spring这些。</p><h2>什么是框架</h2><p><strong>框架是对某一类架构方案可复用的设计与实现</strong>。所有的Web应用都需要监听HTTP端口，也需要处理请求参数，这些功能不应该在每个Web应用中都被重复开发，而是应该以通用组件的形式被复用。</p><p>但并不是所有可被复用的组件都被称作框架，框架通常规定了一个软件的主体结构，可以支撑起软件的整体或者局部的架构形式。比如说，Tomcat完成了Web应用请求响应的主体流程，我们只需要开发Servlet，完成请求处理逻辑，构造响应对象就可以了，所以Tomcat是一个框架。</p><!-- [[[read_end]]] --><p>还有一类可复用的组件不控制软件的主体流程，也不支撑软件的整体架构，比如Log4J提供了一个可复用的日志输出功能，但是，日志输出功能不是软件的主体结构，所以我们通常不称Log4J为框架，而称其为工具。</p><p>一般说来，我们使用框架编程的时候，需要遵循框架的规范编写代码。比如Tomcat、Spring、Mybatis、Junit等，这些<strong>框架会调用我们编写的代码，而我们编写的代码则会调用工具</strong>完成某些特定的功能，比如输出日志，进行正则表达式匹配等。</p><p>我在这里强调框架与工具的不同，并不是在咬文嚼字。我见过一些有进取心的工程师宣称自己设计开发了一个新框架，但是这个框架并没有提供一些架构性的规范，也没有支撑软件的主体结构，仅仅只是提供了一些功能接口供开发者调用，实际上，这跟我们对框架的期待相去甚远。</p><p>根据我们上面对框架的描述，当你设计一个框架的时候，你实际上是在设计一类软件的通用架构，并通过代码的方式实现出来。如果仅仅是提供功能接口供程序调用，是无法支撑起软件的架构的，也无法规范软件的结构。</p><p>那么如何设计、开发一个编程框架？</p><p>我在前面讲过开闭原则。框架应该满足<strong>开闭原则</strong>，即面对不同应用场景，框架本身是不需要修改的，需要对修改关闭。但是各种应用功能却是可以扩展的，即对扩展开放，应用程序可以在框架的基础上扩展出各种业务功能。</p><p>同时框架还应该满足<strong>依赖倒置原则</strong>，即框架不应该依赖应用程序，因为开发框架的时候，应用程序还没有呢。应用程序也不应该依赖框架，这样应用程序可以灵活更换框架。框架和应用程序应该都依赖抽象，比如Tomcat提供的编程接口就是Servlet，应用程序只需要实现Servlet接口，就可以在Tomcat框架下运行，不需要依赖Tomcat，可以随时切换到Jetty等其他Web容器。</p><p>要知道，虽然设计原则可以指导框架开发，但是并没有给出具体的设计方法。事实上，框架正是利用各种设计模式开发出来的。编程框架与应用程序、设计模式、设计原则之间的关系如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/96/b5/96e96e791bce902d6e398e0809eee5b5.png?wh=308*408\" alt=\"\"></p><p>面向对象的设计目标是低耦合、高内聚。为了实现这个目标，人们提出了一些设计原则，主要有开闭原则、依赖倒置原则、里氏替换原则、单一职责原则、接口隔离原则。在这些原则之上，人们总结了若干设计模式，最著名的就是GoF23种设计模式，还有Web开发同学非常熟悉的MVC模式等等。依照这些设计模式，人们开发了各种编程框架。使用这些编程框架，开发者可以简单、快速地开发各种应用程序。</p><h2>Web容器中的设计模式</h2><p>前面我们一再提到Tomcat是一个框架，那么Tomcat与其他同类的Web容器是用什么设计模式实现的？代码如何被Web容器执行？程序中的请求对象HttpServletRequest是从哪里来的？</p><p>Web容器主要使用了<strong>策略模式</strong>，多个策略实现同一个策略接口。编程的时候Tomcat依赖策略接口，而在运行期根据不同上下文，Tomcat装载不同的策略实现。</p><p>这里的策略接口就是Servlet接口，而我们开发的代码就是实现这个Servlet接口，处理HTTP请求。J2EE规范定义了Servlet接口，接口中主要有三个方法：</p><pre><code>public interface Servlet {\n    public void init(ServletConfig config) throws ServletException;\n    public void service(ServletRequest req, ServletResponse res)\n            throws ServletException, IOException;\n    public void destroy();\n}\n\n</code></pre><p>Web容器Container在装载我们开发的Servlet具体类的时候，会调用这个类的init方法进行初始化。当有HTTP请求到达容器的时候，容器会对HTTP请求中的二进制编码进行反序列化，封装成ServletRequest对象，然后调用Servlet的service方法进行处理。当容器关闭的时候，会调用destroy方法做善后处理。</p><p>当我们开发Web应用的时候，只需要实现这个Servlet接口，开发自己的Servlet就可以了，容器会监听HTTP端口，并将收到的HTTP数据包封装成ServletRequest对象，调用我们的Servlet代码。代码只需要从ServletRequest中获取请求数据进行处理计算就可以了，处理结果可以通过ServletResponse返回给客户端。</p><p>这里Tomcat就是策略模式中的Client程序，Servlet接口是策略接口。我们自己开发的具体Servlet类就是策略的实现。通过使用策略模式，Tomcat这样的Web容器可以调用各种Servlet应用程序代码，而各种Servlet应用程序代码也可以运行在Jetty等其他的Web容器里，只要这些Web容器都支持Servlet接口就可以了。</p><p>Web容器完成了HTTP请求处理的主要流程，指定了Servlet接口规范，实现了Web开发的主要架构，开发者只要在这个架构下开发具体Servlet就可以了。因此我们可以称Tomcat、Jetty这类Web容器为框架。</p><p>事实上，我们开发具体的Servlet应用程序的时候，并不会直接实现Servlet接口，而是继承HttpServlet类，HttpServlet类实现了Servlet接口。HttpServlet还用到了<strong>模板方法模式</strong>，所谓模板方法模式，就是在父类中用抽象方法定义计算的骨架和过程，而抽象方法的实现则留在子类中。</p><p>这里，父类是HttpServlet，HttpServlet通过继承GenericServlet实现了Servlet接口，并在自己的service方法中，针对不同的HTTP请求类型调用相应的方法，HttpServlet的service方法就是一个模板方法。</p><pre><code>    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n    {\n        String method = req.getMethod();\n        if (method.equals(METHOD_GET)) {\n                doGet(req, resp);\n        } else if (method.equals(METHOD_HEAD)) {\n            long lastModified = getLastModified(req);\n            maybeSetLastModified(resp, lastModified);\n            doHead(req, resp);\n        } else if ...\n</code></pre><p>由于HTTP请求有get、post等7种请求类型，为了便于编程，HttpServlet提供了这7种HTTP请求类型对应的执行方法doGet、doPost等等。service模板方法会判断HTTP请求类型，根据不同请求类型，执行不同方法。开发者只需要继承HttpServlet，重写doGet、doPost等对应的HTTP请求类型方法就可以了，不需要自己判断HTTP请求类型。Servlet相关的类关系如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/39/18/39dcdacf774021ef38bd33f06f21a018.jpg?wh=402*394\" alt=\"\"></p><h2>JUnit中的设计模式</h2><p>JUnit是一个Java单元测试框架，开发者只需要继承JUnit的TestCase，开发自己的测试用例类，通过JUnit框架执行测试，就得到测试结果。</p><p>开发测试用例如下：</p><pre><code>public class MyTest extends TestCase {\n   protected void setUp(){\n     ...\n   }\n   public void testSome(){\n     ...\n   }\n   protected void tearDown(){\n     ...\n   }\n}\n</code></pre><p>每个测试用例继承TestCase，在setUp方法里做一些测试初始化的工作，比如装载测试数据什么的；然后编写多个以test为前缀的方法，这些方法就是测试用例方法；还有一个tearDown方法，在测试结束后，进行一些收尾的工作，比如删除数据库中的测试数据等。</p><p>那么，我们写的这些测试用例如何被JUnit执行呢？如何保证测试用例中这几个方法的执行顺序呢？JUnit在这里也使用了<strong>模板方法模式</strong>，测试用例的方法执行顺序被固定在JUnit框架的模板方法里。如下：</p><pre><code>public void runBare() throws Throwable {\n        setUp();\n        try{\n                runTest();\n        }\n        finally {\n                tearDown();\n        }\n}\n</code></pre><p>runBare是TestCase基类里的方法，测试用例执行时实际上只执行runBare模板方法，这个方法里，先执行setUp方法，然后执行各种test前缀的方法，最后执行tearDown方法。保证每个测试用例都进行初始化及必要的收尾。而我们的测试类只需要继承TestCase基类，实现setUp、tearDown以及其他测试方法就可以了。</p><p>此外，一个软件的测试用例会有很多，你可能希望执行全部这些用例，也可能希望执行一部分用例，JUnit提供了一个测试套件TestSuit管理、组织测试用例。</p><pre><code>public static Test suite() {\n  TestSuite suite = new TestSuite(&quot;all&quot;);\n  suite.addTest(MyTest.class);//加入一个TestCase\n  suite.addTest(otherTestSuite);//加入一个TestSuite\n  return suite;\n}\n</code></pre><p>TestSuite可以通过addTest方法将多个TestCase类加入一个测试套件suite，还可以将另一个TestSuite加入这个测试套件。当执行这个TestSuite的时候，加入的测试类TestCase会被执行，加入的其他测试套件TestSuite里面的测试类也会被执行，如果其他的测试套件里包含了另外一些测试套件，也都会被执行。</p><p>这也就意味着TestSuite是可以递归的，事实上，TestSuite是一个树状的结构，如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/51/8ef639e90053669e2a72a7319ce71a51.png?wh=898*574\" alt=\"\"></p><p>当我们从树的根节点遍历树，就可以执行所有这些测试用例。传统上进行树的遍历需要递归编程的，而使用<strong>组合模式</strong>，无需递归也可以遍历树。</p><p>首先，TestSuite和TestCase都实现了接口Test：</p><pre><code>public interface Test {\n\tpublic abstract void run(TestResult result);\n}\n</code></pre><p>当我们调用TestSuite的addTest方法时，TestSuite会将输入的对象放入一个数组：</p><pre><code>private Vector&lt;Test&gt; fTests= new Vector&lt;Test&gt;(10); \n\n\npublic void addTest(Test test) {\n\tfTests.add(test);\n}\n</code></pre><p>由于TestCase和TestSuite都实现了Test接口，所以addTest的时候，既可以传入TestCase，也可以传入TestSuite。执行TestSuite的run方法时，会取出这个数组的每个对象，分别执行他们的run方法：</p><pre><code>public void run(TestResult result) {\n\tfor (Test each : fTests) {\n\t\ttest.run(result);\n\t}\n}\n</code></pre><p>如果这个test对象是TestCase，就执行测试；如果这个test对象是一个TestSuite，那么就会继续调用这个TestSuite对象的run方法，遍历执行数组的每个Test的run方法，从而实现了树的递归遍历。</p><h2>小结</h2><p>人们对架构师的工作有一种常见的误解，认为架构师做架构设计就可以了，架构师不需要写代码。事实上，架构师如果只是画画架构图，写写设计文档，那么如何保证自己的架构设计能被整个开发团队遵守、落到实处？</p><p>架构师应该通过代码落实自己的架构设计，也就是通过开发编程框架，约定软件开发的规范。开发团队依照框架的接口开发程序，最终被框架调用执行。架构师不需要拿着架构图一遍一遍讲软件架构是什么，只需要基于框架写个Demo，大家就都清楚架构是什么了，自己应该如何做了。</p><p>所以每个想成为架构师的程序员都应该学习如何开发框架。</p><h2>思考题</h2><p>在Tomcat和JUnit中，还使用了其他一些设计模式，在哪些地方使用什么设计模式，解决什么问题？你了解吗？</p><p>欢迎你在评论区写下你的思考，我会和你一起交流，也欢迎你把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","comments":[{"had_liked":false,"id":168299,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1578043533,"is_pvip":false,"replies":[{"id":"65457","content":"好问题，显然是违反开闭原则的。但是这里如果用策略模式消除这些if else，可能会导致开发者需要继承不同的类处理不同的HTTP请求，提高开发者的学习和使用成本。<br><br>是否要遵循原则，要看具体场景进行权衡。HTTP协议中的请求方法诞生以来都没有被修改过，所以写死也是一个办法。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1578199198,"ip_address":"","comment_id":168299,"utype":1}],"discussion_count":6,"race_medal":0,"score":"143311964301","product_id":100040201,"comment_content":"service里方法不停的if&#47;else 不违反 开闭原则?","like_count":34,"discussions":[{"author":{"id":1019069,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8c/bd/4895b166.jpg","nickname":"Chelizi","note":"","ucode":"B90CFDB5F7B900","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236479,"discussion_content":"对于稳定不变的东西用 if/else 反而更清晰易懂","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1587097596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1168540,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d4/9c/030e80d3.jpg","nickname":"java小霸王","note":"","ucode":"7094BCD9F25E1E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578124,"discussion_content":"我的理解设计模式是为了可维护 可扩展 可读性 可重用，当没有以上问题的时候，就没有使用的必要。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1656523268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":154976,"discussion_content":"我也是这样认为的，http方法也就那几种，可以直接写出来，基本上不会再修改的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1580205538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480185,"discussion_content":"好问题，显然是违反开闭原则的。但是这里如果用策略模式消除这些if else，可能会导致开发者需要继承不同的类处理不同的HTTP请求，提高开发者的学习和使用成本。\n\n是否要遵循原则，要看具体场景进行权衡。HTTP协议中的请求方法诞生以来都没有被修改过，所以写死也是一个办法。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578199198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063114,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7b/0a/b65e1fae.jpg","nickname":"不要挑战自己的智商","note":"","ucode":"4910FF07C35DC5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540662,"discussion_content":"既然不变，就大胆写死。以后改的风险小。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640127666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1142025,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6d/09/ffeabc27.jpg","nickname":"任鑫","note":"","ucode":"9803EB15B634C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378612,"discussion_content":"JDK 和 一些著名的框架中 if-else 还不少呢，这种分寸就看个人的把握了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623304229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167122,"user_name":"Zend","can_delete":false,"product_type":"c1","uid":1053921,"ip_address":"","ucode":"80EBB0B6772E27","user_header":"https://static001.geekbang.org/account/avatar/00/10/14/e1/ee5705a2.jpg","comment_is_top":false,"comment_ctime":1577695885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35937434253","product_id":100040201,"comment_content":"什么是框架<br>框架式对某一类架构方案可复用设计与实现<br>Tomcat是框架，它完成了Web应用请求响应的主体流程。<br>框架应用满足依赖倒置原则<br><br>Web容器中的设计模式<br>1.策略模式<br>策略接口：J2EE规范定义的Servlet接口<br>策略实现：我们看开发的Servlet具体类<br>Client程序：Tomcat<br>2.模板方法模式<br>2.1 父类中抽象方法定义计算的骨架和过程，抽象方法的实现留在子类。<br>2.2 HttpServlet extends GenericServlet implements Servlert<br>2.3 HttpServlet中的service方法 针对不同的HTTP请求类型调用相应的方法，<br>service方法就是一个模板方法。<br><br>JUnit中的设计模式<br>1.模板方法模式 测试用例的方法执行顺序固定在模板方法TestCase.runBare<br>2.测试套件TestSuite 采用组合模式<br>2.1 TestSuite.addTest(TestCase test)<br>2.1 TestSuite.addTest(TestSuite test)","like_count":8},{"had_liked":false,"id":167020,"user_name":"唐二毛","can_delete":false,"product_type":"c1","uid":1597884,"ip_address":"","ucode":"7C16F45165F4BA","user_header":"https://static001.geekbang.org/account/avatar/00/18/61/bc/a656bee7.jpg","comment_is_top":false,"comment_ctime":1577670908,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"31642441980","product_id":100040201,"comment_content":"我有个疑惑，面试给出这样简单的答案，恐怕是过不了关吧？ 希望老师爆点真正的干货出来!","like_count":7,"discussions":[{"author":{"id":1069307,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/fb/872e2cf1.jpg","nickname":"秦凯","note":"","ucode":"523228E55CE480","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":109415,"discussion_content":"我觉得老师能把框架和模式这样抽象、难懂的概念用简单的语言描述出来就很值得我们学习了，老师应该更多的想传达一种框架是如何巧妙利用设计原则和模式解决问题的思想，如果能够理解这种思想，那么就能够通过自己阅读源码或者将设计原则和模式应用到自己项目中提升对设计原则和模式的理解。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1577692599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1069307,"avatar":"https://static001.geekbang.org/account/avatar/00/10/50/fb/872e2cf1.jpg","nickname":"秦凯","note":"","ucode":"523228E55CE480","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112671,"discussion_content":"智慧老师的写作风格就是不够干，太干的感觉搞不出来，毕竟是跨专业的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577878031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":109415,"ip_address":""},"score":112671,"extra":""},{"author":{"id":1019069,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8c/bd/4895b166.jpg","nickname":"Chelizi","note":"","ucode":"B90CFDB5F7B900","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236484,"discussion_content":"不要随便打标签","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587097738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":112671,"ip_address":""},"score":236484,"extra":""},{"author":{"id":1016905,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","nickname":"观弈道人","note":"","ucode":"F3BB619A33C605","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1019069,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8c/bd/4895b166.jpg","nickname":"Chelizi","note":"","ucode":"B90CFDB5F7B900","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":236535,"discussion_content":"哦哦，原来是智慧的“死忠粉”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587100880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":236484,"ip_address":""},"score":236535,"extra":""}]},{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308709,"discussion_content":"其实我觉的面试的时候如果能说出这些内容，应该已经足够用了，我感觉这个专栏面向的应该是 5 年左右经验的技术人员。\n\n如果一定要干货，我觉的只能撸代码了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601040164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1597884,"avatar":"https://static001.geekbang.org/account/avatar/00/18/61/bc/a656bee7.jpg","nickname":"唐二毛","note":"","ucode":"7C16F45165F4BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110777,"discussion_content":"理解了，谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577756357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169142,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1578279971,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23053116451","product_id":100040201,"comment_content":"框架和工具：应用框架是在做完形填空，应用工具是在做选择填空题。框架把问题已经简化了，把大部分都填上了，只留有一些无法预填写的的地方以接口或者类的形式暴露出来，让开发者填上。工具提供了具体函数，让开发者调用，工具的自由度体现在函数参数上。C语言写的hello world程序，使用main函数是应用框架，这个由系统调用，打印hello world，则是应用工具，具体就是输出函数和参数。<br>框架和工具主要是应用场景不同，一般而言，工具相对点，能解决问题，调用方便的工具就是好工具。框架要考虑方方面面，一方面要有足够的自由度，这样的框架功能才强大，框架还要简单易用，这样才体现框架的价值，这两项推到极致一定会矛盾，到时候如何取舍确是一个难题。","like_count":5},{"had_liked":false,"id":250374,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1601041123,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"18780910307","product_id":100040201,"comment_content":"以前没有从编程框架的角度琢磨过设计模式，所以看了一下感觉还是挺有启发的。<br><br>对于文末的思考题，我有点怀疑 Tomcat 和 JUnit 这样成熟的框架，会不会把 23 中设计模式都用过一遍？而且那些大师也不过是心中无剑、顺手为之。<br><br>可能反过来，考虑一下有哪些模式没有使用在 Tomcat 和 JUnit 中会容易一些。<br><br>在网络上搜了一下，有许令波 2010 年写的《Tomcat 设计模式分析》和圣骑士wind 写的《JUnit中的设计模式》。<br><br>留言里面有人说专栏的内容不够“干货”，其实我觉的与专栏的定位有关，给我的感觉，专栏面向的应该是 5 年左右经验的技术人员。<br><br>的确很多内容是点到为止的，但是我觉的，如果想要干货，按图索骥，在网络上应该可以找到不少。对我来说，李智慧老师给出的一些例子还是挺有启发的。","like_count":4},{"had_liked":false,"id":167038,"user_name":"Keep-Moving","can_delete":false,"product_type":"c1","uid":1182631,"ip_address":"","ucode":"76F33C06E07A27","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/a7/6ef32187.jpg","comment_is_top":false,"comment_ctime":1577676109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14462577997","product_id":100040201,"comment_content":"不写代码的架构师不是好司机","like_count":3},{"had_liked":false,"id":210166,"user_name":"hz","can_delete":false,"product_type":"c1","uid":1944260,"ip_address":"","ucode":"51708FA35B3F49","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/05nEWFAM4iaVR6Vk9R7lJyT2RLeXuE2mBPBjpn0uXxmwL9C8DnN8lITsmfbBAVvPicp2zvtnhQn5XiaGmSbKdA5Nw/132","comment_is_top":false,"comment_ctime":1587693459,"is_pvip":false,"replies":[{"id":"78346","content":"心塞。。。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1587699115,"ip_address":"","comment_id":210166,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10177628051","product_id":100040201,"comment_content":"我都没见过要写代码的架构师~","like_count":2,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492960,"discussion_content":"心塞。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587699115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205853,"user_name":"cola","can_delete":false,"product_type":"c1","uid":1592162,"ip_address":"","ucode":"82447678A484E1","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/62/3c83b4c1.jpg","comment_is_top":false,"comment_ctime":1586747192,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881714488","product_id":100040201,"comment_content":"写的很不错","like_count":1},{"had_liked":false,"id":350049,"user_name":"java小霸王","can_delete":false,"product_type":"c1","uid":1168540,"ip_address":"","ucode":"7094BCD9F25E1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/9c/030e80d3.jpg","comment_is_top":false,"comment_ctime":1656523362,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656523362","product_id":100040201,"comment_content":"需要再翻翻spring的设计模式了😽","like_count":0},{"had_liked":false,"id":290252,"user_name":"gesanri","can_delete":false,"product_type":"c1","uid":1121174,"ip_address":"","ucode":"AE3B97DC3ED668","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELtOO0HKrj5SI5JSlmwiaCvaF6GLiaTmf5NX88OZaO3HymTAGTeIoicBUjqzmMF6sF5raPFjuqLFibrrw/132","comment_is_top":false,"comment_ctime":1619449073,"is_pvip":false,"replies":[{"id":"105226","content":"一般递归是指函数调用自身，组合模式的调用并不是函数自身：虽然都是run，但是由于多态的实现不同，run的函数不是同一个函数。<br>还有，递归函数有个明显的特征，就是一定需要一个退出条件；而组合模式不需要。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1619493697,"ip_address":"","comment_id":290252,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1619449073","product_id":100040201,"comment_content":"使用组合模式，无需递归也能遍历树这句话该怎么理解？就这个举的junit例子，我理解组合模式依然是用的递归，递归调用run方法","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519148,"discussion_content":"一般递归是指函数调用自身，组合模式的调用并不是函数自身：虽然都是run，但是由于多态的实现不同，run的函数不是同一个函数。\n还有，递归函数有个明显的特征，就是一定需要一个退出条件；而组合模式不需要。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619493697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1518310,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2a/e6/c788257f.jpg","nickname":"geek_arong2048","note":"","ucode":"AB575BE100E4A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385273,"discussion_content":"相当于用的迭代的方式进行遍历","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626962245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}