{"id":155338,"title":"27 | 代码优化：为什么你的代码比他的更高效？","content":"<p>在使用LLVM的过程中，你应该觉察到了，优化之后和优化之前的代码相差很大。代码优化之后，数量变少了，性能也更高了。而针对这个看起来很神秘的代码优化，我想问你一些问题：</p><ul>\n<li>代码优化的目标是什么？除了性能上的优化，还有什么优化？</li>\n<li>代码优化可以在多大的范围内执行？是在一个函数内，还是可以针对整个应用程序？</li>\n<li>常见的代码优化场景有哪些？</li>\n</ul><p>这些问题是代码优化的基本问题，很重要，我会用两节课的时间带你了解和掌握。</p><p>当然了，代码优化是编译器后端的两大工作之一（另一个是代码生成），弄懂它，你就掌握了一大块后端技术。而学习代码优化的原理，然后通过LLVM实践一下，这样原理与实践相结合，会帮你早日弄懂代码优化。</p><p>接下来，我带你概要地了解一下代码优化的目标、对象、范围和策略等内容。</p><h2>了解代码优化的目标、对象、范围和策略</h2><ul>\n<li>代码优化的目标</li>\n</ul><p>代码优化的目标，是优化程序对计算机资源的使用。我们平常最关心的就是CPU资源，最大效率地利用CPU资源可以提高程序的性能。代码优化有时候还会有其他目标，比如代码大小、内存占用大小、磁盘访问次数、网络通讯次数等等。</p><ul>\n<li>代码优化的对象</li>\n</ul><p>从代码优化的对象看，大多数的代码优化都是在IR上做的，而不是在前一阶段的AST和后一阶段汇编代码上进行的，为什么呢？</p><!-- [[[read_end]]] --><p><strong>其实，在AST上也能做一些优化，</strong>比如在讲前端内容的时候，我们曾经会把一些不必要的AST层次削减掉（例如add-&gt;mul-&gt;pri-&gt;Int，每个父节点只有一个子节点，可以直接简化为一个Int节点），但它抽象层次太高，含有的硬件架构信息太少，难以执行很多优化算法。 <strong>在汇编代码上进行优化</strong>会让算法跟机器相关，当换一个目标机器的时候，还要重新编写优化代码。<strong>所以，在IR上是最合适的，</strong>它能尽量做到机器独立，同时又暴露出很多的优化机会。</p><ul>\n<li>代码优化的范围</li>\n</ul><p>从优化的范围看，分为本地优化、全局优化和过程间优化。</p><p>优化通常针对一组指令，最常用也是最重要的指令组，就是基本块。基本块的特点是：每个基本块只能从入口进入，从最后一条指令退出，每条指令都会被顺序执行。因着这个特点，我们在做某些优化时会比较方便。比如，针对下面的基本块，我们可以很安全地把第3行的“y:=t+x”改成“y:= 3 * x”，因为t的赋值一定是在y的前面：</p><pre><code>BB1:\n  t:=2 * x\n  y:=t + x\n  Goto BB2 \n</code></pre><p>这种针对基本块的优化，我们叫做<strong>本地优化（Local Optimization）。</strong></p><p><strong>那么另一个问题来了：</strong>我们能否把第二行的“t:=2 * x”也优化删掉呢？这取决于是否有别的代码会引用t。所以，我们需要进行更大范围的分析，才能决定是否把第二行优化掉。</p><p>超越基本块的范围进行分析，我们需要用到<strong>控制流图（Control Flow Graph，CFG）。</strong>CFG是一种有向图，它体现了基本块之前的指令流转关系。如果从BB1的最后一条指令是跳转到BB2，那么从BB1到BB2就有一条边。一个函数（或过程）里如果包含多个基本块，可以表达为一个CFG。</p><p><img src=\"https://static001.geekbang.org/resource/image/32/9e/327a0631236e89016d9bf56feed3309e.jpg?wh=1142*734\" alt=\"\"></p><p>如果通过分析CFG，我们发现t在其他地方没有被使用，就可以把第二行删掉。这种针对一个函数、基于CFG的优化，叫做<strong>全局优化（Global Optimization）。</strong></p><p>比全局优化更大范围的优化，叫做<strong>过程间优化（Inter-procedural Optimization），</strong>它能跨越函数的边界，对多个函数之间的关系进行优化，而不是仅针对一个函数做优化。</p><ul>\n<li>代码优化的策略</li>\n</ul><p>最后，你不需要每次都把代码优化做彻底，因为做代码优化本身也需要消耗计算机的资源。所以，你需要权衡代码优化带来的好处和优化本身的开支这两个方面，然后确定做多少优化。比如，在浏览器里加载JavaScript的时候，JavaScript引擎一定会对JavaScript做优化，但如果优化消耗的时间太长，界面的响应会变慢，反倒影响用户使用页面的体验，所以JavaScript引擎做优化时要掌握合适的度或调整优化时机。</p><p>接下来，我带你认识一些常见的代码优化的场景，这样可以让你对代码优化的认识更加直观，然后我们也可以将这部分知识作为后面讨论算法的基础。</p><h2>一些优化的场景</h2><ul>\n<li>代数优化（Algebraic Optimazation）</li>\n</ul><p>代数优化是最简单的一种优化，当操作符是代数运算的时候，你可以根据学过的数学知识进行优化。</p><p>比如“x:=x+0 ”这行代码，操作前后x没有任何变化，所以这样的代码可以删掉；又比如“x:=x*0” 可以简化成“x:=0”；对某些机器来说，移位运算的速度比乘法的快，那么“x:=x*8”可以优化成“x:=x&lt;&lt;3”。</p><ul>\n<li>常数折叠（Constant Folding）</li>\n</ul><p>它是指，对常数的运算可以在编译时计算，比如 “x:= 20 * 3 ”可以优化成“x:=60”。另外，在if条件中，如果条件是一个常量，那就可以确定地取某个分支。比如：“If 2&gt;0 Goto BB2” 可以简化成“Goto BB2”就好了。</p><ul>\n<li>删除不可达的基本块</li>\n</ul><p>有些代码永远不可能被激活。比如在条件编译的场景中，我们会写这样的程序：“if(DEBUG) {...}”。如果编译时，DEBUG是一个常量false，那这个代码块就没必要编译了。</p><ul>\n<li>删除公共子表达式（Common Subexpression Elimination）</li>\n</ul><p>下面这两行代码，x和y右边的形式是一样的，如果这两行代码之间，a和b的值没有发生变化（比如采用SSA形式），那么x和y的值一定是一样的。</p><pre><code>x := a + b\ny := a + b\n</code></pre><p>那我们就可以让y等于x，从而减少了一次“a+b”的计算，这种优化叫做删除公共子表达式。</p><pre><code>x := a + b\ny := x\n</code></pre><ul>\n<li>拷贝传播（Copy Propagation）和常数传播（Constant Propagation）</li>\n</ul><p>下面的示例代码中，第三行可以被替换成“z:= 2 * x”， 因为y的值就等于x，这叫做拷贝传播。</p><pre><code>x := a + b\ny := x\nz := 2 * y\n</code></pre><p>如果y := 10，常数10也可以传播下去，把最后一行替换成 z:= 2 * 10，这叫做常数传播。再做一次常数折叠，就变成 z:=20了。</p><ul>\n<li>死代码删除（Ded code elimination）</li>\n</ul><p>在上面的拷贝传播中，如果没有其他地方使用y变量了，那么第二行就是死代码，就可以删除掉，这种优化叫做死代码删除。</p><p><strong>最后我强调一下，</strong>一个优化可能导致另一个优化，比如，拷贝传播导致y不再被使用，我们又可以进行死代码删除的优化。所以，一般进行多次优化、多次扫描。</p><p>了解了优化的场景之后，你能直观地知道代码优化到底做了什么事情，不过知其然还要知其所以然，你还需要了解这些优化都是怎么实现的。</p><h2>如何做本地优化</h2><p>上面这些优化场景，可以用于本地优化、全局优化和过程间优化。这节课我们先看看如何做本地优化，因为它相对简单，学习难度较低，下节课再接着讨论全局优化。</p><p>假设下面的代码是一个基本块（省略最后的终结指令）：</p><pre><code>a := b\nc := a + b\nc := b\nd := a + b\ne := a + b\n</code></pre><p>为了优化它们，我们的方法是计算一个“可用表达式（available expression）”的集合。可用表达式，是指存在一个变量，保存着某个表达式的值。</p><p><strong>我们从上到下顺序计算这个集合：</strong></p><p>1.一开始是空集。<br>\n2.经过第一行代码后，集合里增加了“a:=b”；<br>\n3.经过第二行代码后，增加了“c:=a+b”。<br>\n<strong>4.注意，</strong>在经过第三行代码以后，由于变量c的定义变了，所以“c:=a+b”不再可用，而是换成了“c:=b”。</p><p><img src=\"https://static001.geekbang.org/resource/image/ee/70/eeeff152fea3ede1b9bae3892bdc4070.jpg?wh=1142*570\" alt=\"\"></p><p>你能看到，代码“e:=a+b”，和集合中的“d:=a+b”等号右边部分是相同的，所以我们首先可以<strong>删除公共子表达式，</strong>优化成“e:=d”。变成下面这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/2f/94/2f3d1f14385efd1e6d336e962ddf5494.jpg?wh=1142*572\" alt=\"\"></p><p>然后，我们可以做一下<strong>拷贝传播，</strong>利用“a:=b”，把表达式中的多个a都替换成b。</p><p><img src=\"https://static001.geekbang.org/resource/image/2b/08/2b3e1177ce5d7f3e5f003df7c8980508.jpg?wh=1142*640\" alt=\"\"></p><p>到目前为止，a都被替换成了b，对e的计算也简化了，优化后的代码变成了下面这样：</p><pre><code>a := b\nc := b + b\nc := b\nd := b + b\ne := d\n</code></pre><p>观察一下这段代码，它似乎还存在可优化的空间，比如，会存在死代码，而我们可以将其删除。</p><p>假设，在后序的基本块中，b和c仍然会被使用，但其他变量就不会再被用到了。那么，上面这5行代码哪行能被删除呢？这时，我们要做另一个分析：活跃性分析（Liveness Analysis）。</p><p>我们说一个变量是活的，意思是它的值在改变前，会被其他代码读取。（对于SSA格式的IR，变量定义出来之后就不会再改变，所以你只要看后面的代码有没有使用这个变量的就可以了）我们会分析每个变量的活跃性，把死的变量删掉。</p><p><strong>怎么做呢？</strong>我们这次还是要借助一个集合，不过这个集合是从后向前，倒序计算的。</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/84/1d37597496a58e0e59e9748f13b6e884.jpg?wh=1142*618\" alt=\"\"></p><p>一开始集合里的元素是{b, c}，这是初始值，表示b和c会被后面的代码使用，所以它们是活的。</p><ul>\n<li>扫描过“e := d”后，因为用到了d，所以d是活的，结果是{b, c, d}。</li>\n<li>再扫描“d := b + b”，用到了b，但集合里已经有b了；这里给d赋值了，已经满足了后面代码对d的要求，所以可以从集合里去掉d了，结果是{b，c}。</li>\n<li>再扫描“c := b”，从集合里去掉c，结果是{b}。</li>\n<li>继续扫描，一直到第一行，最后的集合仍然是{b}。</li>\n</ul><p>现在，基于这个集合，我们就可以做死代码删除了。<strong>当给一个变量赋值时，它后面跟着的集合没有这个变量，说明它不被需要，就可以删掉了。</strong>图中标橙色的三行，都是死代码，都可以删掉。</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/42/d9161dc7dc88123948dace3e2d199042.jpg?wh=1142*692\" alt=\"\"></p><p>删掉以后，只剩下了两行代码。<strong>注意，</strong>由于“ e := d”被删掉了，导致d也不再被需要，变成了死变量。</p><p><img src=\"https://static001.geekbang.org/resource/image/ca/65/caf9537c22f8c8d969746f1061ddbc65.jpg?wh=1142*412\" alt=\"\"></p><p>把变量d删掉以后，就剩下了一行代码“c := b”了。</p><p><img src=\"https://static001.geekbang.org/resource/image/89/c2/899dbdf21a4aa1661ef4cb46de1d3cc2.jpg?wh=1142*390\" alt=\"\"></p><p>到此为止，我们完成了整个的优化过程，5行代码优化成了1行代码，成果是很显著的！</p><p><strong>我来带你总结一下这个优化过程：</strong></p><ul>\n<li>\n<p>我们首先做一个正向扫描，进行可用表达式分析，建立可用表达式的集合，然后参照这个集合替换公共子表达式，以及做拷贝传播。</p>\n</li>\n<li>\n<p>接着，我们做一个反向扫描，进行活跃性分析，建立活变量的集合，识别出死变量，并依据它删除给死变量赋值的代码。</p>\n</li>\n<li>\n<p>上述优化可能需要做不止一遍，才能得到最后的结果。</p>\n</li>\n</ul><p>这样看来，优化并不难吧？当然了，目前我们做的优化是基于一段顺序执行的代码，没有跳转，都是属于一个基本块的，属于本地优化。</p><p>直观地理解了本地优化之后，我们可以把这种理解用<strong>更加形式化的方式表达出来，</strong>这样，你可以理解得更加透彻。本地优化中，可用表达式分析和活跃性分析，都可以看做是由下面4个元素构成的：</p><ul>\n<li>\n<p>D（方向）。是朝前还是朝后遍历。</p>\n</li>\n<li>\n<p>V（值）。代码的每一个地方都要计算出一个值。可用表达式分析和活跃性分析的值是一个集合，也有些分析的值并不是集合，在下一讲你会看到这样的例子。</p>\n</li>\n<li>\n<p>F（转换函数，对V进行转换）。比如，在做可用表达式分析的时候，遇到了“c := b”时，可用表达式的集合从{a := b, c := a + b}转换成了{a := b,  c := b}。<strong>这里遵守的转换规则是：</strong>因为变量c被重新赋值了，那么就从集合里，把变量c原来的定义去掉，并把带有c的表达式都去掉，因为过去的c已经失效了，然后，把变量c新的定义加进去。</p>\n</li>\n<li>\n<p>I（初始值，是算法开始时V的取值）。做可用表达式分析的时候，初始值是空集。在做活跃性分析的时候，初始值是后面代码中还会访问的变量，也就是活变量。</p>\n</li>\n</ul><p>这样形式化以后，我们就可以按照这个模型来统一理解各种本地优化算法。接下来，我们来体验和熟悉一下LLVM的优化功能。</p><h2>用LLVM来演示优化功能</h2><p>在<a href=\"https://time.geekbang.org/column/article/153192\">25讲</a>中，我们曾经用Clang命令带上O2参数来生成优化的IR：</p><pre><code>clang -emit-llvm -S -O2 fun1.c -o fun1-O2.ll\n</code></pre><p>实际上，LLVM还有一个单独的命令opt，来做代码优化。缺省情况下，它的输入和输出都是.bc文件，所以我们还要在.bc和.ll两种格式之间做转换。</p><pre><code>clang -emit-llvm -S fun1.c -o fun1.ll  //生成LLVM IR\nllc fun1.ll -o fun1.bc                 //编译成字节码\nopt -O2 fun1.bc -o fun1-O2.bc          //做O2级的优化\nllvm-dis fun1-O2.bc -o fun1-O2.ll      //将字节码反编译成文本格式\n</code></pre><p><strong>其中要注意的一点，</strong>是要把第一行命令生成的fun1.ll文件中的“optnone”这个属性去掉，因为这个它的意思是不要代码优化。</p><p>我们还可以简化上述操作，给opt命令带上-S参数，直接对.ll文件进行优化：</p><pre><code>opt -S -O2 fun1.ll -o fun1-O2.ll\n</code></pre><p><strong>另外，我解释一下-O2参数：</strong>-O2代表的是二级优化，LLVM中定义了多个优化级别，基本上数字越大，所做的优化就越多。</p><p>我们可以不使用笼统的优化级别，而是指定采用某个特别的优化算法，比如mem2reg算法，会把对内存的访问优化成尽量访问寄存器。</p><pre><code>opt -S -mem2reg fun1.ll -o fun1-O2.ll\n</code></pre><p>用opt --help命令，可以查看opt命令所支持的所有优化算法。</p><p>对于常数折叠，在调用API生成IR的时候，LLVM缺省就会去做这个优化。比如下面这段代码，是返回2+3的值，但生成IR的时候直接变成了5，因为这种优化比较简单，不需要做复杂的分析：</p><pre><code>Function * codegen_const_folding(){\n    //创建函数\n    FunctionType *funType = FunctionType::get(Type::getInt32Ty(TheContext), false);\n    Function *fun = Function::Create(funType, Function::ExternalLinkage, &quot;const_folding&quot;, TheModule.get());\n\n    //创建一个基本块\n    BasicBlock *BB = BasicBlock::Create(TheContext, &quot;&quot;, fun);\n    Builder.SetInsertPoint(BB);\n\n    Value * tmp1 = ConstantInt::get(TheContext, APInt(32, 2, true));\n    Value * tmp2 = ConstantInt::get(TheContext, APInt(32, 3, true));\n    Value * tmp3 =  Builder.CreateAdd(tmp1, tmp2);\n\n    Builder.CreateRet(tmp3);\n    return fun;\n}\n</code></pre><p>生成的IR如下：</p><pre><code>define i32 @const_folding() {\n  ret i32 5\n}\n</code></pre><p><strong>你需要注意，</strong>很多优化算法，都是要基于寄存器变量来做，所以，我们通常都会先做一下-mem2reg优化。</p><p>在LLVM中，做优化算法很方便，因为它采用的是SSA格式。具体来说，LLVM中定义了Value和User两个接口，它们体现了LLVM IR最强大的特性，即静态单赋值中的定义-使用链，这种定义-使用关系会被用到优化算法中。</p><p>在<a href=\"https://time.geekbang.org/column/article/154438\">26讲</a>中，我们已经讲过了Value类。</p><p>如果一个类是从Value继承的，意味着它定义了一个值。另一个类是User类，函数和指令也是User类的子类，也就是说，在函数和指令中，可以使用别的地方定义的值。</p><p><img src=\"https://static001.geekbang.org/resource/image/43/40/43261470d69b33bb36930dfa698c4b40.jpg?wh=1142*534\" alt=\"\"></p><p><strong>这两个类是怎么帮助到优化算法中的呢？</strong></p><p>在User中，可以访问所有它用到的Value，比如一个加法指令（%c = add nsw i32 %a, %b）用到了a和b这两个变量。</p><p>而在Value中，可以访问所有使用这个值的User，比如给c赋值的这条指令。</p><p>所以，你可以遍历一个Value的所有User，把它替换成另一个Value，这就是拷贝传播。</p><p><strong>接下来，我们看看如何用程序实现IR的优化。</strong></p><p>在LLVM内部，优化工作是通过一个个的Pass（遍）来实现的，它支持三种类型的Pass：</p><ul>\n<li>\n<p>一种是分析型的Pass（Analysis Passes），只是做分析，产生一些分析结果用于后序操作。</p>\n</li>\n<li>\n<p>一些是做代码转换的（Transform Passes），比如做公共子表达式删除。</p>\n</li>\n<li>\n<p>还有一类pass是工具型的，比如对模块做正确性验证。你可以查阅LLVM所支持的<a href=\"https://llvm.org/docs/Passes.html\">各种Pass。</a></p>\n</li>\n</ul><p>下面的代码创建了一个PassManager，并添加了两个优化Pass：</p><pre><code>// 创建一个PassManager\nTheFPM = std::make_unique&lt;legacy::FunctionPassManager&gt;(TheModule.get());\n\n// 窥孔优化和一些位计算优化\nTheFPM-&gt;add(createInstructionCombiningPass());\n\n// 表达式重关联\nTheFPM-&gt;add(createReassociatePass());\n\nTheFPM-&gt;doInitialization();\n</code></pre><p>之后，再简单地调用PassManager的run()方法，就可以对代码进行优化：</p><pre><code>TheFPM-&gt;run(*fun);\n</code></pre><p>你可以查看本讲附带的代码，尝试自己编写一些示例程序，查看优化前和优化后的效果。</p><h2>课程小结</h2><p>本节课，我带你学习了代码优化的原理，然后通过LLVM实践了一下，演示了优化功能，我希望你能记住几个关键点：</p><p>1.代码优化分为本地优化、全局优化和过程间优化三个范围。有些优化对于这三个范围都是适用的，但也有一些优化算法是全局优化和过程间优化专有的。</p><p>2.可用表达式分析和活跃性分析是本地优化时的两个关键算法。这些算法都是由扫描方向、值、转换函数和初始值这四个要素构成的。</p><p>3.LLVM用pass来做优化，你可以通过命令行或程序来使用这些Pass。你也可以编写自己的Pass。</p><p>最后，我建议你多编写一些测试代码，并用opt命令去查看它的优化效果，在这个过程中增加对代码优化的感性认识。</p><h2>一课一思</h2><p>针对不同的领域（商业、科学计算、游戏等），代码优化的重点可能是不同的。针对你所熟悉的计算机语言和领域，你知道有哪些优化的需求？是采用什么技术实现的？欢迎在留言区分享你的观点。</p><p>最后，感谢你的阅读，如果这篇文章有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"26 | 生成IR：实现静态编译的语言","id":154438},"right":{"article_title":"28 | 数据流分析：你写的程序，它更懂","id":156878}},"comments":[{"had_liked":false,"id":148958,"user_name":"渔子长","can_delete":false,"product_type":"c1","uid":1492982,"ip_address":"","ucode":"A78B822885327D","user_header":"https://static001.geekbang.org/account/avatar/00/16/c7/f6/3d43b198.jpg","comment_is_top":false,"comment_ctime":1573118142,"is_pvip":false,"replies":[{"id":"57508","content":"谢谢肯定！<br><br>我们计划下一步就出成书:)<br><br>另外，限于专栏的篇幅，很多知识点还都没讲到、讲透，甚至后端部分还可以进一步通俗化。这个遗憾准备在出书的时候补上。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573291214,"ip_address":"","comment_id":148958,"utype":1}],"discussion_count":2,"race_medal":0,"score":"61702660286","product_id":100034101,"comment_content":"讲得太好了，市面上的书上确实看不到这些东西。","like_count":14,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473686,"discussion_content":"谢谢肯定！\n\n我们计划下一步就出成书:)\n\n另外，限于专栏的篇幅，很多知识点还都没讲到、讲透，甚至后端部分还可以进一步通俗化。这个遗憾准备在出书的时候补上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573291214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2784827,"avatar":"","nickname":"Geek_815559","note":"","ucode":"E7423FCFFC7DE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397634,"discussion_content":"老师，什么时候可以上市？日常催更！！！\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632655871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219931,"user_name":"westfall","can_delete":false,"product_type":"c1","uid":1632773,"ip_address":"","ucode":"F3F5CB7DF695FC","user_header":"https://static001.geekbang.org/account/avatar/00/18/ea/05/b164dc15.jpg","comment_is_top":false,"comment_ctime":1590119867,"is_pvip":false,"replies":[{"id":"82311","content":"这是个好问题。语言的设计者经常会被问到这个问题。<br>这个问题的标准答案是：在大部分情况下，用比较正常的方式写程序即可。<br>这句话是什么意思呢？因为优化算法是能够识别那些常用的编程模式，从而做优化。比如，你正常的写一个循环操作，编译器就可能给你做循环展开、循环向量化等优化。如果你写得太特别，它可能就难以识别了，也就没办法帮你优化了。<br>但是，如果你的程序对性能特别敏感，那就需要了解编译器做优化的原理，主动向它靠拢。比如说，对于Java和JavaScript，两个重要的优化是内联优化和逃逸分析，但你的程序要符合一定的条件才会被内联。你写程序的时候，最好保证对象别逃逸，这样会大大降低内存管理的负担，并且会导致其他优化的可能。有个开源软件，Skia，是二维渲染引擎，Chrome、Android和Flutter都是用它。在其官网上，对于在windows上编译，它“强烈建议”用clang来编译，而不是用微软的工具链，因为Skia是针对clang的优化算法（在llvm中实现）做调优了的，所以性能相差很大。<br><br>另外，我在第二季《编译原理实战课》里讲优化更多，并且结合实际编译器来介绍。如果你希望对优化有更多了解，可以去那里看看。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1591081090,"ip_address":"","comment_id":219931,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31654890939","product_id":100034101,"comment_content":"既然有工具可以帮我们做优化，开发的时候是不是就不用考虑性能的问题了","like_count":7,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495998,"discussion_content":"这是个好问题。语言的设计者经常会被问到这个问题。\n这个问题的标准答案是：在大部分情况下，用比较正常的方式写程序即可。\n这句话是什么意思呢？因为优化算法是能够识别那些常用的编程模式，从而做优化。比如，你正常的写一个循环操作，编译器就可能给你做循环展开、循环向量化等优化。如果你写得太特别，它可能就难以识别了，也就没办法帮你优化了。\n但是，如果你的程序对性能特别敏感，那就需要了解编译器做优化的原理，主动向它靠拢。比如说，对于Java和JavaScript，两个重要的优化是内联优化和逃逸分析，但你的程序要符合一定的条件才会被内联。你写程序的时候，最好保证对象别逃逸，这样会大大降低内存管理的负担，并且会导致其他优化的可能。有个开源软件，Skia，是二维渲染引擎，Chrome、Android和Flutter都是用它。在其官网上，对于在windows上编译，它“强烈建议”用clang来编译，而不是用微软的工具链，因为Skia是针对clang的优化算法（在llvm中实现）做调优了的，所以性能相差很大。\n\n另外，我在第二季《编译原理实战课》里讲优化更多，并且结合实际编译器来介绍。如果你希望对优化有更多了解，可以去那里看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591081090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155801,"user_name":"honnkyou","can_delete":false,"product_type":"c1","uid":1026608,"ip_address":"","ucode":"FD5EC4120EE803","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/30/acc91f01.jpg","comment_is_top":false,"comment_ctime":1574758878,"is_pvip":false,"replies":[{"id":"77080","content":"在做拷贝传播的优化时，要知道一个变量在哪里被使用。比如下面的例子中，y在第二个语句被使用。这样就可以在第二句中，把y替换成x。<br>y := x<br>z := 2 * y<br>Value和User的结构，保存了Value和User之间的引用关系，从而有利于去执行各种优化算法。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586853566,"ip_address":"","comment_id":155801,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18754628062","product_id":100034101,"comment_content":"“所以，你可以遍历一个 Value 的所有 User，把它替换成另一个 Value，这就是拷贝传播”老师这句话不是很理解。","like_count":4,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475878,"discussion_content":"在做拷贝传播的优化时，要知道一个变量在哪里被使用。比如下面的例子中，y在第二个语句被使用。这样就可以在第二句中，把y替换成x。\ny := x\nz := 2 * y\nValue和User的结构，保存了Value和User之间的引用关系，从而有利于去执行各种优化算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586853566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148008,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1140494,"ip_address":"","ucode":"8FFC6764ED327B","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/0e/2a51a2df.jpg","comment_is_top":false,"comment_ctime":1572927665,"is_pvip":true,"replies":[{"id":"57519","content":"从前向后。前面用某个表达式定义的变量，后面可能被重新定义掉。这时，可用表达式的集合就要修改。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573298421,"ip_address":"","comment_id":148008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10162862257","product_id":100034101,"comment_content":"老师，我想我问一下公共子表达式消除和拷贝传播是从前往后进行还是反向进行?看这个例子好像哪个方向都可以..","like_count":2,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473370,"discussion_content":"从前向后。前面用某个表达式定义的变量，后面可能被重新定义掉。这时，可用表达式的集合就要修改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573298421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248595,"user_name":"一张钞票","can_delete":false,"product_type":"c1","uid":1349171,"ip_address":"","ucode":"A142D249516A9C","user_header":"https://static001.geekbang.org/account/avatar/00/14/96/33/214269f6.jpg","comment_is_top":false,"comment_ctime":1600235220,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"5895202516","product_id":100034101,"comment_content":"a := b<br>c := b + b<br>c := b<br>d := b + b<br>e := d<br><br>这个反向扫描，第一遍扫e := d和第二遍的扫d := b + b能再详细讲讲嘛，这块没看懂，为什么要把d加入到集合？，后面为什么又要删？","like_count":1,"discussions":[{"author":{"id":2531396,"avatar":"","nickname":"紫灵斗圣","note":"","ucode":"4B14F3C714C72F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367746,"discussion_content":"第一遍的时候，因为对d赋值（d:=b+b）后又有对d的使用（e:=d）所以暂时不能删除\n第二遍因为第一遍中e:=d已经删除了，所以对d赋值后没有对d的使用就可以删除d:=b+b了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618457809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3017215,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/09/ff/cedb2a8d.jpg","nickname":"南方。","note":"","ucode":"DE799EC5D5F891","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579076,"discussion_content":"a （被赋值的变量）：=  b(用于赋值的变量)\n按我的理解  实际上就是从后往前遍历，将用于赋值的变量，但是在集合中不存在的变量记录到集合中（实际上就是记录了哪些变量在其赋值后被使用了），然后碰到被赋值的变量存在在集合中，则将变量从集合中移除，（移除的作用是为了说明后面用于赋值的变量，已经被赋值了，那么如果前面仍有该变量被赋值出现，该被赋值无效，则说明该语句可被优化），这就是为什么会将d放入集合中以及为什么会移除d。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657165940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1119907,"avatar":"https://static001.geekbang.org/account/avatar/00/11/16/a3/03ac92d0.jpg","nickname":"Geek_0dc445","note":"","ucode":"FE747E43F0098F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549789,"discussion_content":"本例删除的逻辑是基于b、c是活跃变量，所以e，d没有用到，所以最终只保留了c=b","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644241016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1052863,"avatar":"https://static001.geekbang.org/account/avatar/00/10/10/bf/a3a3c6d0.jpg","nickname":"胜杰","note":"","ucode":"401806B1660784","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374012,"discussion_content":"首先，明确下活变量的定义：一个变量是活的，意思是它的值在改变前，会被其他代码读取。\n第一遍的时候，将d赋值给e，d被e读取，所以d是活变量加入到集合；\n第二遍的时候，将b+b赋值给d，b+b被d读取，b是活变量，因为b已经在集合里了，所以无需再次加入集合。d在这里是被改变后的值，所以属于死变量。可以从集合里删除d。\n第三遍的时候，将b赋值给c，b被c读取，所以b是活变量，无需重复加入集合。c是死变量，集合中删除。\n第四遍的时候，将b+b赋值给c，b+b被c读取，所以b是活变量，无需重复加入集合。c是死变量。\n第五遍的时候，将b赋值给a，b被a读取，所以b是活变量，无需重复加入集合。a是死变量。\n\n个人理解，不一定对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620969505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1929712,"avatar":"","nickname":"Geek_aa296b","note":"","ucode":"056E035092C3E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341120,"discussion_content":"我也没看懂，是啥意思啊？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610294743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321921,"user_name":"Join","can_delete":false,"product_type":"c1","uid":1014873,"ip_address":"","ucode":"20F51EFFD8FEDE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/59/dc9bbb21.jpg","comment_is_top":false,"comment_ctime":1637111023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637111023","product_id":100034101,"comment_content":"看到这里，再次感受到原理的重要性，LLVM和Go Compiler的实现好像，特别是优化这边","like_count":0},{"had_liked":false,"id":302531,"user_name":"潜龙勿用","can_delete":false,"product_type":"c1","uid":2159460,"ip_address":"","ucode":"EEB8A6F3E4A1B8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/dsZ5CFV7mCIKEn7YcVFJXksO201eeqsJXoT4EYNvcibAKNSWSQVZPbbRgPKraWqg6YnaaRlVoywic9MEsflicRDibQ/132","comment_is_top":false,"comment_ctime":1626252270,"is_pvip":true,"replies":[{"id":"111038","content":"优化技术可以按多种角度分类，本地优化、全局优化和过程间优化只是一种分类角度。<br>栈上分配按这个分类方法不好归类。本地优化也可以产生栈上分配的效果，比如在C++或Java里声明一个本地对象，退出这个方法就不再用了，那么就可以栈上分配。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1628653211,"ip_address":"","comment_id":302531,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626252270","product_id":100034101,"comment_content":"宫老师，请问栈上分配属于什么优化？过程间优化吗？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523341,"discussion_content":"优化技术可以按多种角度分类，本地优化、全局优化和过程间优化只是一种分类角度。\n栈上分配按这个分类方法不好归类。本地优化也可以产生栈上分配的效果，比如在C++或Java里声明一个本地对象，退出这个方法就不再用了，那么就可以栈上分配。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628653211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271995,"user_name":"coconut","can_delete":false,"product_type":"c1","uid":2344081,"ip_address":"","ucode":"07B95C7A6AC2F7","user_header":"https://static001.geekbang.org/account/avatar/00/23/c4/91/a017bf72.jpg","comment_is_top":false,"comment_ctime":1609904448,"is_pvip":true,"replies":[{"id":"98640","content":"你很细心，确实应该是optnone!<br>多谢指出！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1609939259,"ip_address":"","comment_id":271995,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1609904448","product_id":100034101,"comment_content":"其中要注意的一点，是要把第一行命令生成的 fun1.ll 文件中的“optone”这个属性去掉，因为这个它的意思是不要代码优化。<br><br>optone 单词应该是 optnone吧？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513113,"discussion_content":"你很细心，确实应该是optnone!\n多谢指出！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609939259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214219,"user_name":"Geek_89bbab","can_delete":false,"product_type":"c1","uid":1156607,"ip_address":"","ucode":"B3110D5B3C9500","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/ff/6201122c.jpg","comment_is_top":false,"comment_ctime":1588679191,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1588679191","product_id":100034101,"comment_content":"llvm的JIT可以对程序的代码进行优化，那么可不可以在程序JIT运行期间对llvm的jit代码自身进行jit优化。","like_count":0,"discussions":[{"author":{"id":1026818,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ab/02/8688abed.jpg","nickname":"nightn","note":"","ucode":"39FC4FF0281637","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302412,"discussion_content":"即时编译器在它运行之时本身已经是二进制格式了，它在被编译的时候就已经被优化过了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598920967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145093,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1572187173,"is_pvip":false,"replies":[{"id":"57596","content":"编译器会尽量友好地支持调试，llvm也提供了这方面的帮助。<br>但是，你说的对。优化有的代码，跟源代码的对应肯定是有问题的。开启优化后调试，有时会遇到一些状况，比如断点加不上，等等。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573371870,"ip_address":"","comment_id":145093,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1572187173","product_id":100034101,"comment_content":"代码优化之后大变样，单步调试的时候是不是很困难？","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472242,"discussion_content":"编译器会尽量友好地支持调试，llvm也提供了这方面的帮助。\n但是，你说的对。优化有的代码，跟源代码的对应肯定是有问题的。开启优化后调试，有时会遇到一些状况，比如断点加不上，等等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573371870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177315,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","nickname":"沉淀的梦想","note":"","ucode":"BCB7C26F9D214B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40628,"discussion_content":"单步调试一般都用不优化的版本来进行吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572246009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}