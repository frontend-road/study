{"id":113607,"title":"03丨套接字和地址：像电话和电话号码一样理解它们","content":"<p>在网络编程中，我们经常会提到socket这个词，它的中文翻译为套接字，有的时候也叫做套接口。</p><p>socket这个英文单词的原意是“插口”“插槽”， 在网络编程中，它的寓意是可以通过插口接入的方式，快速完成网络连接和数据收发。你可以把它想象成现实世界的电源插口，或者是早期上网需要的网络插槽，所以socket也可以看做是对物理世界的直接映射。</p><p>其实计算机程序设计是一门和英文有着紧密联系的学科，很多专有名词使用英文原词比翻译成中文更容易让大家接受。为了方便，在专栏里我们一般会直接使用英文，如果需要翻译就一律用“套接字”这个翻译。</p><h2>socket到底是什么？</h2><p>在网络编程中，到底应该怎么理解socket呢？我在这里先呈上这么一张图，你可以先看看。</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/64/0ba3f3d04b1466262c02d6f24ee76a64.jpg?wh=4819*3256\" alt=\"\"><br>\n这张图表达的其实是网络编程中，客户端和服务器工作的核心逻辑。</p><p>我们先从右侧的服务器端开始看，因为在客户端发起连接请求之前，服务器端必须初始化好。右侧的图显示的是服务器端初始化的过程，首先初始化socket，之后服务器端需要执行bind函数，将自己的服务能力绑定在一个众所周知的地址和端口上，紧接着，服务器端执行listen操作，将原先的socket转化为服务端的socket，服务端最后阻塞在accept上等待客户端请求的到来。</p><!-- [[[read_end]]] --><p>此时，服务器端已经准备就绪。客户端需要先初始化socket，再执行connect向服务器端的地址和端口发起连接请求，这里的地址和端口必须是客户端预先知晓的。这个过程，就是著名的<strong>TCP三次握手</strong>（Three-way Handshake）。下一篇文章，我会详细讲到TCP三次握手的原理。</p><p>一旦三次握手完成，客户端和服务器端建立连接，就进入了数据传输过程。</p><p>具体来说，客户端进程向操作系统内核发起write字节流写操作，内核协议栈将字节流通过网络设备传输到服务器端，服务器端从内核得到信息，将字节流从内核读入到进程中，并开始业务逻辑的处理，完成之后，服务器端再将得到的结果以同样的方式写给客户端。可以看到，<strong>一旦连接建立，数据的传输就不再是单向的，而是双向的，这也是TCP的一个显著特性</strong>。</p><p>当客户端完成和服务器端的交互后，比如执行一次Telnet操作，或者一次HTTP请求，需要和服务器端断开连接时，就会执行close函数，操作系统内核此时会通过原先的连接链路向服务器端发送一个FIN包，服务器收到之后执行被动关闭，这时候整个链路处于半关闭状态，此后，服务器端也会执行close函数，整个链路才会真正关闭。半关闭的状态下，发起close请求的一方在没有收到对方FIN包之前都认为连接是正常的；而在全关闭的状态下，双方都感知连接已经关闭。</p><p>请你牢牢记住文章开头的那幅图，它是贯穿整个专栏的核心图之一。</p><p>讲这幅图的真正用意在于引入socket的概念，请注意，以上所有的操作，都是通过socket来完成的。无论是客户端的connect，还是服务端的accept，或者read/write操作等，<strong>socket是我们用来建立连接，传输数据的唯一途径</strong>。</p><h3>更好地理解socket：一个更直观的解释</h3><p>你可以把整个TCP的网络交互和数据传输想象成打电话，顺着这个思路想象，socket就好像是我们手里的电话机，connect就好比拿着电话机拨号，而服务器端的bind就好比是去电信公司开户，将电话号码和我们家里的电话机绑定，这样别人就可以用这个号码找到你，listen就好似人们在家里听到了响铃，accept就好比是被叫的一方拿起电话开始应答。至此，三次握手就完成了，连接建立完毕。</p><p>接下来，拨打电话的人开始说话：“你好。”这时就进入了write，接收电话的人听到的过程可以想象成read（听到并读出数据），并且开始应答，双方就进入了read/write的数据传输过程。</p><p>最后，拨打电话的人完成了此次交流，挂上电话，对应的操作可以理解为close，接听电话的人知道对方已挂机，也挂上电话，也是一次close。</p><p>在整个电话交流过程中，电话是我们可以和外面通信的设备，对应到网络编程的世界里，socket也是我们可以和外界进行网络通信的途径。</p><h3>socket的发展历史</h3><p>通过上面的讲解和这个打电话的类比，你现在清楚socket到底是什么了吧？那socket最开始是怎么被提出来的呢？接下来就很有必要一起来简单追溯一下它的历史了。</p><p>socket是加州大学伯克利分校的研究人员在20世纪80年代早期提出的，所以也被叫做伯克利套接字。伯克利的研究者们设想用socket的概念，屏蔽掉底层协议栈的差别。第一版实现socket的就是TCP/IP协议，最早是在BSD 4.2 Unix内核上实现了socket。很快大家就发现这么一个概念带来了网络编程的便利，于是有更多人也接触到了socket的概念。Linux作为Unix系统的一个开源实现，很早就从头开发实现了TCP/IP协议，伴随着socket的成功，Windows也引入了socket的概念。于是在今天的世界里，socket成为网络互联互通的标准。</p><h2>套接字地址格式</h2><p>在使用套接字时，首先要解决通信双方寻址的问题。我们需要套接字的地址建立连接，就像打电话时首先需要查找电话簿，找到你想要联系的那个人，你才可以建立连接，开始交流。接下来，我们重点讨论套接字的地址格式。</p><h3>通用套接字地址格式</h3><p>下面先看一下套接字的<strong>通用</strong>地址结构：</p><pre><code>/* POSIX.1g 规范规定了地址族为2字节的值.  */\ntypedef unsigned short int sa_family_t;\n/* 描述通用套接字地址  */\nstruct sockaddr{\n    sa_family_t sa_family;  /* 地址族.  16-bit*/\n    char sa_data[14];   /* 具体的地址值 112-bit */\n  }; \n</code></pre><p>在这个结构体里，第一个字段是地址族，它表示使用什么样的方式对地址进行解释和保存，好比电话簿里的手机格式，或者是固话格式，这两种格式的长度和含义都是不同的。地址族在glibc里的定义非常多，常用的有以下几种：</p><ul>\n<li>AF_LOCAL：表示的是本地地址，对应的是Unix套接字，这种情况一般用于本地socket通信，很多情况下也可以写成AF_UNIX、AF_FILE；</li>\n<li>AF_INET：因特网使用的IPv4地址；</li>\n<li>AF_INET6：因特网使用的IPv6地址。</li>\n</ul><p>这里的AF_表示的含义是Address Family，但是很多情况下，我们也会看到以PF_表示的宏，比如PF_INET、PF_INET6等，实际上PF_的意思是Protocol Family，也就是协议族的意思。我们用AF_xxx这样的值来初始化socket地址，用PF_xxx这样的值来初始化socket。我们在&lt;sys/socket.h&gt;头文件中可以清晰地看到，这两个值本身就是一一对应的。</p><pre><code>/* 各种地址族的宏定义  */\n#define AF_UNSPEC PF_UNSPEC\n#define AF_LOCAL  PF_LOCAL\n#define AF_UNIX   PF_UNIX\n#define AF_FILE   PF_FILE\n#define AF_INET   PF_INET\n#define AF_AX25   PF_AX25\n#define AF_IPX    PF_IPX\n#define AF_APPLETALK  PF_APPLETALK\n#define AF_NETROM PF_NETROM\n#define AF_BRIDGE PF_BRIDGE\n#define AF_ATMPVC PF_ATMPVC\n#define AF_X25    PF_X25\n#define AF_INET6  PF_INET6\n</code></pre><p>sockaddr是一个通用的地址结构，通用的意思是适用于多种地址族。为什么定义这么一个通用地址结构呢，这个放在后面讲。</p><h3>IPv4套接字格式地址</h3><p>接下来，看一下常用的IPv4地址族的结构：</p><pre><code>/* IPV4套接字地址，32bit值.  */\ntypedef uint32_t in_addr_t;\nstruct in_addr\n  {\n    in_addr_t s_addr;\n  };\n  \n/* 描述IPV4的套接字地址格式  */\nstruct sockaddr_in\n  {\n    sa_family_t sin_family; /* 16-bit */\n    in_port_t sin_port;     /* 端口号  16-bit*/\n    struct in_addr sin_addr;    /* Internet address. 32-bit */\n\n\n    /* 这里仅仅用作占位符，不做实际用处  */\n    unsigned char sin_zero[8];\n  };\n</code></pre><p>我们对这个结构体稍作解读，首先可以发现和sockaddr一样，都有一个16-bit的sin_family字段，对于IPv4来说这个值就是AF_INET。</p><p>接下来是端口号，我们可以看到端口号最多是16-bit，也就是说最大支持2的16次方，这个数字是65536，所以我们应该知道支持寻址的端口号最多就是65535。关于端口，我在前面的章节也提到过，这里重点阐述一下保留端口。所谓保留端口就是大家约定俗成的，已经被对应服务广为使用的端口，比如ftp的21端口，ssh的22端口，http的80端口等。一般而言，大于5000的端口可以作为我们自己应用程序的端口使用。</p><p>下面是glibc定义的保留端口。</p><pre><code>/* Standard well-known ports.  */\nenum\n  {\n    IPPORT_ECHO = 7,    /* Echo service.  */\n    IPPORT_DISCARD = 9,   /* Discard transmissions service.  */\n    IPPORT_SYSTAT = 11,   /* System status service.  */\n    IPPORT_DAYTIME = 13,  /* Time of day service.  */\n    IPPORT_NETSTAT = 15,  /* Network status service.  */\n    IPPORT_FTP = 21,    /* File Transfer Protocol.  */\n    IPPORT_TELNET = 23,   /* Telnet protocol.  */\n    IPPORT_SMTP = 25,   /* Simple Mail Transfer Protocol.  */\n    IPPORT_TIMESERVER = 37, /* Timeserver service.  */\n    IPPORT_NAMESERVER = 42, /* Domain Name Service.  */\n    IPPORT_WHOIS = 43,    /* Internet Whois service.  */\n    IPPORT_MTP = 57,\n\n\n\n\n    IPPORT_TFTP = 69,   /* Trivial File Transfer Protocol.  */\n    IPPORT_RJE = 77,\n    IPPORT_FINGER = 79,   /* Finger service.  */\n    IPPORT_TTYLINK = 87,\n    IPPORT_SUPDUP = 95,   /* SUPDUP protocol.  */\n\n\n    IPPORT_EXECSERVER = 512,  /* execd service.  */\n    IPPORT_LOGINSERVER = 513, /* rlogind service.  */\n    IPPORT_CMDSERVER = 514,\n    IPPORT_EFSSERVER = 520,\n\n\n    /* UDP ports.  */\n    IPPORT_BIFFUDP = 512,\n    IPPORT_WHOSERVER = 513,\n    IPPORT_ROUTESERVER = 520,\n\n\n    /* Ports less than this value are reserved for privileged processes.  */\n    IPPORT_RESERVED = 1024,\n\n\n    /* Ports greater this value are reserved for (non-privileged) servers.  */\n    IPPORT_USERRESERVED = 5000\n</code></pre><p>实际的IPv4地址是一个32-bit的字段，可以想象最多支持的地址数就是2的32次方，大约是42亿，应该说这个数字在设计之初还是非常巨大的，无奈互联网蓬勃发展，全球接入的设备越来越多，这个数字渐渐显得不太够用了，于是大家所熟知的IPv6就隆重登场了。</p><h3>IPv6套接字地址格式</h3><p>我们再看看IPv6的地址结构：</p><pre><code>struct sockaddr_in6\n  {\n    sa_family_t sin6_family; /* 16-bit */\n    in_port_t sin6_port;  /* 传输端口号 # 16-bit */\n    uint32_t sin6_flowinfo; /* IPv6流控信息 32-bit*/\n    struct in6_addr sin6_addr;  /* IPv6地址128-bit */\n    uint32_t sin6_scope_id; /* IPv6域ID 32-bit */\n  };\n</code></pre><p>整个结构体长度是28个字节，其中流控信息和域ID先不用管，这两个字段，一个在glibc的官网上根本没出现，另一个是当前未使用的字段。这里的地址族显然应该是AF_INET6，端口同IPv4地址一样，关键的地址从32位升级到128位，这个数字就大到恐怖了，完全解决了寻址数字不够的问题。</p><p>请注意，以上无论IPv4还是IPv6的地址格式都是因特网套接字的格式，还有一种本地套接字格式，用来作为本地进程间的通信， 也就是前面提到的AF_LOCAL。</p><pre><code>struct sockaddr_un {\n    unsigned short sun_family; /* 固定为 AF_LOCAL */\n    char sun_path[108];   /* 路径名 */\n};\n</code></pre><h3>几种套接字地址格式比较</h3><p>这几种地址的比较见下图，IPv4和IPv6套接字地址结构的长度是固定的，而本地地址结构的长度是可变的。</p><p><img src=\"https://static001.geekbang.org/resource/image/ed/58/ed49b0f1b658e82cb07a6e1e81f36b58.png?wh=3979*3770\" alt=\"\"></p><h2>总结</h2><p>这一讲我们重点讲述了什么是套接字，以及对应的套接字地址格式。套接字作为网络编程的基础，概念异常重要。套接字的设计为我们打开了网络编程的大门，实际上，正是因为BSD套接字如此成功，各大Unix厂商（包括开源的Linux）以及Windows平台才会很快照搬了过来。在下一讲中，我们将开始创建并使用套接字，建立连接，进一步开始我们的网络编程之旅。</p><h2>思考题</h2><p>最后给你留两道思考题吧，你可以想一想IPv4、IPv6、本地套接字格式以及通用地址套接字，它们有什么共性呢？如果你是BSD套接字的设计者，你为什么要这样设计呢？</p><p>第二道题是，为什么本地套接字格式不需要端口号，而IPv4和IPv6套接字格式却需要端口号呢？</p><p>我在评论区期待你的思考与见解，如果你觉得这篇文章对你有所帮助，欢迎点击“请朋友读”，把这篇文章分享给你朋友或同事。</p>","neighbors":{"left":{"article_title":"02 | 网络编程模型：认识客户端-服务器网络模型的基本概念","id":112307},"right":{"article_title":"04 | TCP三次握手：怎么使用套接字格式建立连接？","id":116042}},"comments":[{"had_liked":false,"id":121404,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":true,"comment_ctime":1565136156,"is_pvip":false,"replies":[{"id":"44612","content":"回答的很好，给你点赞","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565138362,"ip_address":"","comment_id":121404,"utype":1}],"discussion_count":8,"race_medal":0,"score":"9.2233729360681001e+18","product_id":100032701,"comment_content":"unix系统有一种一统天下的简洁之美:一切皆文件，socket也是文件。<br><br>1.像sock_addr的结构体里描述的那样，几种套接字都要有地址族和地址两个字段。这容易理解，你要与外部通信，肯定要至少告诉计算机对方的地址和使用的是哪一种地址。与远程计算机的通信还需要一个端口号。而本地socket的不同之处在于不需要端口号，那么就有了问题2;<br><br>2.本地socket本质上是在访问本地的文件系统，所以自然不需要端口。远程socket是直接将一段字节流发送到远程计算机的一个进程，而远程计算机可能同时有多个进程在监听，所以用端口号标定要发给哪一个进程。<br>","like_count":210,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461777,"discussion_content":"回答的很好，给你点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565138362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132661,"avatar":"https://static001.geekbang.org/account/avatar/00/11/48/75/02b4366a.jpg","nickname":"乘坐Tornado的线程魔法师","note":"","ucode":"C4C9915866E769","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":86982,"discussion_content":"同问","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576635472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1589008,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3f/10/f3fc081b.jpg","nickname":"剑山烽火","note":"","ucode":"8E1FD839324050","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":84747,"discussion_content":"其实我还是很疑惑，端口号是用来标志一个进程的，那同一台主机2个不同进程进行通信如果不用端口号标志，一个进程怎么找到与他通信的那个进程啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576505753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1482915,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","nickname":"业余爱好者","note":"","ucode":"A890935A982988","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1589008,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3f/10/f3fc081b.jpg","nickname":"剑山烽火","note":"","ucode":"8E1FD839324050","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87094,"discussion_content":"只有进程通信时走了操作系统网络协议栈处理，也就是网络通信，端口号才有出现的必要。本地套接字不经过网络协议栈，根本不需要端口号。\n\n其实就相当于本地进程间通信。像共享内存，消息队列，信号量的使用，是没有端口的概念的。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1576643090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":84747,"ip_address":""},"score":87094,"extra":""},{"author":{"id":2131215,"avatar":"https://static001.geekbang.org/account/avatar/00/20/85/0f/5cb822d6.jpg","nickname":"shadow","note":"","ucode":"64DCFAEC37EFBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1589008,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3f/10/f3fc081b.jpg","nickname":"剑山烽火","note":"","ucode":"8E1FD839324050","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325575,"discussion_content":"感觉把端口理解成进程对应的文件路径就好了 本地进程通信自然是直接可以用文件路径进行定位的  ","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1605354371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":84747,"ip_address":""},"score":325575,"extra":""}]},{"author":{"id":1252169,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1b/49/ddefc656.jpg","nickname":"MrVito","note":"","ucode":"716FF6F8871706","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318675,"discussion_content":"biang","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603804474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1656956,"avatar":"https://static001.geekbang.org/account/avatar/00/19/48/7c/2aaf50e5.jpg","nickname":"coder","note":"","ucode":"3A0940EBF94577","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314073,"discussion_content":"受教了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603115671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1905171,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","nickname":"扩散性百万咸面包","note":"","ucode":"6D703D51553B42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234727,"discussion_content":"通用socket地址有什么存在的必要吗？有点继承和通用接口的意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586997183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122526,"user_name":"奔跑的码仔","can_delete":false,"product_type":"c1","uid":1609871,"ip_address":"","ucode":"AB3B02B07B8B8C","user_header":"https://static001.geekbang.org/account/avatar/00/18/90/8f/9c691a5f.jpg","comment_is_top":false,"comment_ctime":1565415975,"is_pvip":false,"replies":[{"id":"45172","content":"这个理解我给满分。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565579005,"ip_address":"","comment_id":122526,"utype":1}],"discussion_count":7,"race_medal":0,"score":"207723846183","product_id":100032701,"comment_content":"个人感觉“Pv4、IPv6、本地套接字格式以及通用地址套接字”的思想类似于OOP中的继承和多态。通用套接子为抽象类，其他套接字实现该抽象类。这样，可以定义基于通用套接字这个抽象类各种通用接口，其他套接字，也就是具体类，可以完全复用这套接口，即，实现了socket编程的多态！","like_count":49,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462291,"discussion_content":"这个理解我给满分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565579005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1674369,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","nickname":"Geek_68d3d2","note":"","ucode":"EBD6D881AA7A74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70999,"discussion_content":"这个必须要赞一波","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575384833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609871,"avatar":"https://static001.geekbang.org/account/avatar/00/18/90/8f/9c691a5f.jpg","nickname":"奔跑的码仔","note":"","ucode":"AB3B02B07B8B8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4586,"discussion_content":"多谢🙏鼓励","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565579169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2967576,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/48/18/e524f344.jpg","nickname":"Soyoger","note":"","ucode":"D4D7BD0ABC4491","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586024,"discussion_content":"C本身就是面向过程的语言，OOP的思想在C++和JAVA才会有体现。我反而觉得，因为缺少面向对象的编程思想，为了提供一个统一的编程接口，通过增加函数参数来控制代码流程分支，这样会导致代码有大量的if...else...判断分支。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661938077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1609871,"avatar":"https://static001.geekbang.org/account/avatar/00/18/90/8f/9c691a5f.jpg","nickname":"奔跑的码仔","note":"","ucode":"AB3B02B07B8B8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2967576,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/48/18/e524f344.jpg","nickname":"Soyoger","note":"","ucode":"D4D7BD0ABC4491","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":586209,"discussion_content":"个人感觉面向对象和面向过程都是编程思想，和具体的语言其实没有太大的联系，就像Linux驱动系统到处可以看到抽象，接口，多态的影子，还有KVM虚拟机，也是到处都体现着面向对象的思想。面向对象的思想，远早于面向对象语言就设计出来了，所以，我觉得编程思想是底层的，与语言无关的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1662036664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":586024,"ip_address":"河北"},"score":586209,"extra":""},{"author":{"id":2948566,"avatar":"","nickname":"Geek_1696dd","note":"","ucode":"DEC1F02116F5F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2967576,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/48/18/e524f344.jpg","nickname":"Soyoger","note":"","ucode":"D4D7BD0ABC4491","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":589903,"discussion_content":"理论来讲可以用C实现OOP的所有东西 linux内核就是个典型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665390009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":586024,"ip_address":"江苏"},"score":589903,"extra":""}]},{"author":{"id":1512599,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/88nXicqmkJWm3IXVfPfGQSk8SKIBVKjuC4qhzaCkf5Ud88uvKgS4Vf5AzCJ1uaFO0gpPnxdh4CowfhpxV1kSbXw/132","nickname":"lixin","note":"","ucode":"94D99DAFB6C929","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584314,"discussion_content":"设计这套的时候还没有面向对象这么深。抽象不知道有没有想过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660734980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121630,"user_name":"conanforever22","can_delete":false,"product_type":"c1","uid":1285725,"ip_address":"","ucode":"CB283E020DA51A","user_header":"https://static001.geekbang.org/account/avatar/00/13/9e/5d/b02bce4c.jpg","comment_is_top":false,"comment_ctime":1565171105,"is_pvip":false,"replies":[{"id":"44803","content":"你的理解很到位，工厂模式我倒是没有仔细想过，有点独辟蹊径","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565275566,"ip_address":"","comment_id":121630,"utype":1}],"discussion_count":2,"race_medal":0,"score":"173363862945","product_id":100032701,"comment_content":"1. 我觉得这样设计的目的是为了给用户提供一个统一的接口, 不用每个地址族成员都增加个函数原型; 只用通过sockaddr.sa_family来确定具体是什么类型的地址, 有点工厂模式的意思; 如果是C++的话就可以用函数重载来实现了<br>2. socket主要还是为了进程间通信, 本地套接字主要用于本地IPC, 网络套接字用于跨机器通信; 如果把socket抽象成文件的话, 通信进程双方需要能够根据一个唯一的fd来找到彼此, 跨机器的话可以用端口, 本地的话直接用文件inode就可以了","like_count":40,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461884,"discussion_content":"你的理解很到位，工厂模式我倒是没有仔细想过，有点独辟蹊径","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565275566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135701,"avatar":"https://static001.geekbang.org/account/avatar/00/11/54/55/613ddc42.jpg","nickname":"Edison","note":"","ucode":"734A561F363720","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5704,"discussion_content":"您好！根据您的思路，假如在系统上访问指定路径的文件（比如：/usr/dev/temps），操作系统应该是先确定&#34;/&#34;路径对应的INode Num，再根据INode Num去Inode Table中寻找该Num对应的数据块指针，进而转向Data Block中寻找“usr”的记录项。逐步递归下去，直至在数据块中找到log的记录项，进而能访问到log文件。还望不吝赐教!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566442503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121685,"user_name":"nil","can_delete":false,"product_type":"c1","uid":1507193,"ip_address":"","ucode":"0F5D298C1CBB74","user_header":"https://static001.geekbang.org/account/avatar/00/16/ff/79/3b38c9e1.jpg","comment_is_top":false,"comment_ctime":1565182452,"is_pvip":false,"replies":[{"id":"44813","content":"正解","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565276339,"ip_address":"","comment_id":121685,"utype":1}],"discussion_count":3,"race_medal":0,"score":"113234332148","product_id":100032701,"comment_content":"第一问，通用网络地址结构是所有具体地址结构的抽象，有了统一可以操作的地址结构，那么就可以涉及一套统一的接口，简化了接口设计。通用地址结构中第一个字段表明了地址的类型，后面的数据可以通过具体类型解析出来，一般只有将具体地址类型的指针强制转化成通用类型，这样操作才不会造成内存越界。<br>第二问，本地socket基于文件操作的，因此只需要根据文件路径便可区分，不需要使用端口的概念。","like_count":27,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461904,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565276339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130666,"avatar":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","nickname":"нáпの゛","note":"","ucode":"834FA877EFBAF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298714,"discussion_content":"转化的是指针","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597386356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073845,"avatar":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","nickname":"zhanyd","note":"","ucode":"4C994EE512A3C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72801,"discussion_content":"你好，请教下通用地址结构才16字节，ipv6和本地地址结构都是大于16字节的，如何转化成通用地址结构呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575529454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121465,"user_name":"xcoder","can_delete":false,"product_type":"c1","uid":1207135,"ip_address":"","ucode":"2C70ED36B4AC8E","user_header":"https://static001.geekbang.org/account/avatar/00/12/6b/5f/cec1e980.jpg","comment_is_top":false,"comment_ctime":1565143150,"is_pvip":false,"replies":[{"id":"44646","content":"Http是应用层协议，是基于Tcp socket的实现，websocket是http的增强，利用了Tcp双向的特性，增强了服务器端到客户端的传输能力<br><br><br>以前客户端是需要不断通过轮询来从服务端得到信息，使用websocket以后就可以服务端直接推送信息到客户端","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565153642,"ip_address":"","comment_id":121465,"utype":1}],"discussion_count":4,"race_medal":0,"score":"113234292846","product_id":100032701,"comment_content":"老师能讲下关于WebSocket、Http和socket之间的联系吗?","like_count":26,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461802,"discussion_content":"Http是应用层协议，是基于Tcp socket的实现，websocket是http的增强，利用了Tcp双向的特性，增强了服务器端到客户端的传输能力\n\n\n以前客户端是需要不断通过轮询来从服务端得到信息，使用websocket以后就可以服务端直接推送信息到客户端","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565153642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1656956,"avatar":"https://static001.geekbang.org/account/avatar/00/19/48/7c/2aaf50e5.jpg","nickname":"coder","note":"","ucode":"3A0940EBF94577","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314075,"discussion_content":"以前以前客户端是需要不断轮询从服务端中获取信息，这句话没看懂😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603115877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2622364,"avatar":"https://static001.geekbang.org/account/avatar/00/28/03/9c/5a0b8825.jpg","nickname":"Bin Watson","note":"","ucode":"33E3487896E859","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1656956,"avatar":"https://static001.geekbang.org/account/avatar/00/19/48/7c/2aaf50e5.jpg","nickname":"coder","note":"","ucode":"3A0940EBF94577","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543228,"discussion_content":"你可以这么理解，打开一个网页，我们就需要请求服务器发数据过来。如果你现在的网页是动态的，比如有一个实时的人数显示，那么你就必须每隔一段时间请求一次人数的数据。如果服务器每次数据变动就主动发给你，那么这样你就不需要轮询去问服务器，数据更新了吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641010657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":314075,"ip_address":""},"score":543228,"extra":""}]},{"author":{"id":1723983,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/4e/4f/b0b24789.jpg","nickname":"学怪","note":"","ucode":"FE40B40460B0C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78156,"discussion_content":"那websocket是不是有点像微信公众号的意思？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575980893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132857,"user_name":"Mark","can_delete":false,"product_type":"c1","uid":1350902,"ip_address":"","ucode":"D60E5269080BA9","user_header":"https://static001.geekbang.org/account/avatar/00/14/9c/f6/30dfdc9f.jpg","comment_is_top":false,"comment_ctime":1568253744,"is_pvip":false,"replies":[{"id":"51628","content":"&#47;&#47;socket地址初始化 <br>servaddr.sin_family = AF_INET;<br><br>&#47;&#47;socket初始化<br>listenfd = socket(PF_INET, SOCK_STREAM, 0);<br>","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568887711,"ip_address":"","comment_id":132857,"utype":1}],"discussion_count":4,"race_medal":0,"score":"100352501552","product_id":100032701,"comment_content":"AF_xxx 这样的值来初始化 socket 地址，用 PF_xxx 这样的值来初始化 socket。<br>请教老师，这一句具体怎么理解？","like_count":23,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467147,"discussion_content":"//socket地址初始化 \nservaddr.sin_family = AF_INET;\n\n//socket初始化\nlistenfd = socket(PF_INET, SOCK_STREAM, 0);\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568887711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1350902,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9c/f6/30dfdc9f.jpg","nickname":"Mark","note":"","ucode":"D60E5269080BA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":16775,"discussion_content":"有什么区别吗，为什么会有这两种形式？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1568906400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2351949,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e3/4d/8a26dbb2.jpg","nickname":"枫中浪子","note":"","ucode":"860BEA32059B37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1350902,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9c/f6/30dfdc9f.jpg","nickname":"Mark","note":"","ucode":"D60E5269080BA9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362418,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616939774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":16775,"ip_address":""},"score":362418,"extra":""},{"author":{"id":2622364,"avatar":"https://static001.geekbang.org/account/avatar/00/28/03/9c/5a0b8825.jpg","nickname":"Bin Watson","note":"","ucode":"33E3487896E859","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2351949,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e3/4d/8a26dbb2.jpg","nickname":"枫中浪子","note":"","ucode":"860BEA32059B37","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543226,"discussion_content":"约定输出的吧。AF，address family 地址族，那么就是在初始化地址时指定。PF protocol family 协议族，在socket中指定通宵协议，那么使用protocol可能更合适。而前面是初始化地址，所以使用address可能更合适。。个人见解","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641010058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":362418,"ip_address":""},"score":543226,"extra":""}]}]},{"had_liked":false,"id":121713,"user_name":"Sweety","can_delete":false,"product_type":"c1","uid":1228667,"ip_address":"","ucode":"DC90C959AE147F","user_header":"https://static001.geekbang.org/account/avatar/00/12/bf/7b/e9592637.jpg","comment_is_top":false,"comment_ctime":1565189378,"is_pvip":false,"replies":[{"id":"45112","content":"我也觉得","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575081,"ip_address":"","comment_id":121713,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48809829634","product_id":100032701,"comment_content":"打卡。感觉评论区的人都好厉害。","like_count":12,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461917,"discussion_content":"我也觉得","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137805,"user_name":"衬衫的价格是19美元","can_delete":false,"product_type":"c1","uid":1397631,"ip_address":"","ucode":"655F925451F772","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","comment_is_top":false,"comment_ctime":1569857669,"is_pvip":false,"replies":[{"id":"54283","content":"实际上这个通用地址格式，你可以理解为void *，我在文章里也指出了，设计套接字的时候，还没有提供void *类型的指针，所以用通用地址格式来表示。<br><br>在IPV6地址时，实际上传入的还是28个字节的数据，通用地址只是一个&quot;参数类型&quot;，在函数处理时，实际上可以根据AF_xxx的类型来判断，真正的地址是IPV6，那么是28个字节的数据需要被使用，而不是16个字节。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1570966501,"ip_address":"","comment_id":137805,"utype":1}],"discussion_count":6,"race_medal":0,"score":"40224563333","product_id":100032701,"comment_content":"通用地址格式sockaddr长度只有16字节，实际存放ip地址的只有14字节，怎么存的下ip6的地址的？这里还是不太明白","like_count":10,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469272,"discussion_content":"实际上这个通用地址格式，你可以理解为void *，我在文章里也指出了，设计套接字的时候，还没有提供void *类型的指针，所以用通用地址格式来表示。\n\n在IPV6地址时，实际上传入的还是28个字节的数据，通用地址只是一个&amp;quot;参数类型&amp;quot;，在函数处理时，实际上可以根据AF_xxx的类型来判断，真正的地址是IPV6，那么是28个字节的数据需要被使用，而不是16个字节。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1570966501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073845,"avatar":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","nickname":"zhanyd","note":"","ucode":"4C994EE512A3C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72811,"discussion_content":"也就是说通用地址格式里的数据存的是指针？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575530526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1054598,"avatar":"https://static001.geekbang.org/account/avatar/00/10/17/86/416f772e.jpg","nickname":"shelldon","note":"","ucode":"BF8FE102D6DD1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1073845,"avatar":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","nickname":"zhanyd","note":"","ucode":"4C994EE512A3C4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":161280,"discussion_content":"我猜使用方式是定义具体地址类型变量，将变量地址转换为通用地址类型指针，调用 bind 或 connect 函数，而 bind 或 connect 函数的实现里面是根据 AF_XXX 将通用地址类型指针转换回对应的具体地址指针后进行访问。我猜的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580883612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72811,"ip_address":""},"score":161280,"extra":""}]},{"author":{"id":2916751,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/U5vvFI4v3jibf6uHbOFtkm1sBaXeLZnJicCOia0KW5KNb2KK06we5gkzJE7RiawfDzMAicHIpINUrTYfjrdZweQsuUA/132","nickname":"Geek_1cd0c8","note":"","ucode":"1F0C3F5E03C420","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575980,"discussion_content":"28是不是写错了 ipv6里面是128个字节吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655219014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373567,"discussion_content":"有点 泛型 <? extend AF_XXX>的感觉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620786643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1054598,"avatar":"https://static001.geekbang.org/account/avatar/00/10/17/86/416f772e.jpg","nickname":"shelldon","note":"","ucode":"BF8FE102D6DD1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":161277,"discussion_content":"用通用地址类型可以为 bind 和 connect 写出一个统一的接口说明，而不用每种具体地址类型都提供一个版本。有点C++多态的感觉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580883364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121428,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1565138862,"is_pvip":false,"replies":[{"id":"44633","content":"回答的也很高明","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565139122,"ip_address":"","comment_id":121428,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35924877230","product_id":100032701,"comment_content":"2字节表示地址族很富裕，知道地址族，基本确定地址结构，通用地址结构，能够很好区分这两部分，一个字符数组就能知道每一种地址结构的起始地址，高明","like_count":8,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461786,"discussion_content":"回答的也很高明","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565139122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107484,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/1c/9d3744ee.jpg","nickname":"小李讲源码","note":"","ucode":"2573037D7C82C8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544416,"discussion_content":"看到这个回答，其实前面的一些问题也得到了答案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641518682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152944,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1574128123,"is_pvip":false,"replies":[{"id":"59330","content":"长链接并不是一直占用的一条物理链路哦，它实际上只是分配了固定的资源，可以维护通信双方在一定时间内的&quot;逻辑&quot;链路。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1574498407,"ip_address":"","comment_id":152944,"utype":1}],"discussion_count":5,"race_medal":0,"score":"23048964603","product_id":100032701,"comment_content":"评论区都是高手，不过只输入不输出，脑袋是容不下的。所以，先不管对错，也记一下自己的思考。<br>感觉电脑一多，脑袋就乱，我来简化一下<br>如果世界上只有一台，那网络通信也就不需要了，不过单独的这台电脑上的文件，只要知道路径应该是能访问的，所以，不需要什么IP和端口<br>如果世界上只有两台电脑，并且每台电脑上可以运行多个进程，如果这两台电脑上的两个进程间想通信，那就需要端口号了，否则定位不了唯一的进程<br>如果世界上只有三台电脑，并且每台电脑上可以运行多个进程，其中有两台电脑上的进程之间想通信，那么就需要有IP和端口号了，IP用于定位电脑，端口号用于定位进程<br>世界上只有三台电脑，其实可以扯三根网线，此时长链接也是很容易理解的，实际上现在世界上有上亿级的电脑都在互联网上，如果两两互联都通过专有的网线，那这网线的数量就是个天文数字，也不现实。此时，这个长链接是怎么维护的，有些线路必然会公用的，我有些想不明白，分时公用？还是有个特殊标志？或者线路本身就是无时无刻都在公用的？","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474997,"discussion_content":"长链接并不是一直占用的一条物理链路哦，它实际上只是分配了固定的资源，可以维护通信双方在一定时间内的&amp;quot;逻辑&amp;quot;链路。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574498407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2967576,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/48/18/e524f344.jpg","nickname":"Soyoger","note":"","ucode":"D4D7BD0ABC4491","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":586047,"discussion_content":"是的，要设置超时时间，如果超时时间给的足够大，那也会一直占用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661946351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":474997,"ip_address":"北京"},"score":586047,"extra":""}]},{"author":{"id":1619597,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U9LYlZEx2HrpsELeh3KMlqFiaKpSAaaZeBttXRAVvDXUgcufpqJ60bJWGYGNpT7752w/132","nickname":"dog_brother","note":"","ucode":"9F64D3C6D815FB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372723,"discussion_content":"所谓的tcp的面向连接，本质是内核在内存中维护的状态，是逻辑上的连接，不是物理上的连接。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620443009,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1138821,"avatar":"https://static001.geekbang.org/account/avatar/00/11/60/85/f72f1d94.jpg","nickname":"与路同飞","note":"","ucode":"2985F1440A1962","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306316,"discussion_content":"这个连接是客户端和服务端在内存中维护tcp的状态完成的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600245336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009652,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","nickname":"钱","note":"","ucode":"2C92A243A463D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56599,"discussion_content":"嗯，老师说的这个大概意思，我能理解，我不明白这个逻辑链路是怎么实现，只是分配了固定的资源，可以维护通信双方在一定时间内的&#34;逻辑&#34;链路的。\n岂不是每次通信都需要从一端重新找另一端，通过网络设备发送网络信号，每次网络信号走什么网络设备都是未知的，他这个“逻辑链路”怎么维护的，还是说本来就是这么实现的，那分配的固定资源具体又是指什么资源？想了想，除了程序本身运行的服务器是固定的，其他网络通信设备只是在网络信号传输的过程中会使用，而且具体使用那些完全未知不确定，另外，怎么定位对应的机器和端口，应该也是每次通信都必须重新去做吧😊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574501522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121400,"user_name":"(☆_☆)","can_delete":false,"product_type":"c1","uid":1170983,"ip_address":"","ucode":"1D21F9E12EE3A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/27/699c274c.jpg","comment_is_top":false,"comment_ctime":1565134638,"is_pvip":false,"replies":[{"id":"44610","content":"渐渐进入状态了","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565138313,"ip_address":"","comment_id":121400,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18745003822","product_id":100032701,"comment_content":"讲的太好了，越来越懂网络编程了","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461776,"discussion_content":"渐渐进入状态了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565138313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140277,"user_name":"Kean","can_delete":false,"product_type":"c1","uid":1126381,"ip_address":"","ucode":"D7FE9B709655E2","user_header":"https://static001.geekbang.org/account/avatar/00/11/2f/ed/7d7825c4.jpg","comment_is_top":false,"comment_ctime":1570869250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14455771138","product_id":100032701,"comment_content":"第一个问题，各个地址的模式一致，都是标志加数据的组织形式，这种模式有三个好处：一是方便，我们可以用头两个字节知道采用的地址族，进而进行对应的解析；其次是节省空间，不用按照最大长度来使用统一的长度；最后是灵活，各个地址可以自由定义数据部分。这种模式在很多框架里都有运用，比如redis源码里面就大量的用到了这个模式。第二个问题是文件没有端口可言，因为文件路径可以唯一标识文件资源","like_count":3},{"had_liked":false,"id":121611,"user_name":"zhchnchn","can_delete":false,"product_type":"c1","uid":1110218,"ip_address":"","ucode":"2219E40ED134D4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/ca/4560f06b.jpg","comment_is_top":false,"comment_ctime":1565166872,"is_pvip":false,"replies":[{"id":"44805","content":"通用套接字就是所有函数的入口参数，用通用套接字就不需要为Tcp udp等各定义一组socket函数了，前面一位同学总结它为工厂模式，我认为挺到位的","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565275720,"ip_address":"","comment_id":121611,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14450068760","product_id":100032701,"comment_content":"请问老师，实际编程中一般使用sockaddr_in，sockaddr_in6，sockaddr_un结构，那么通用套接字地址结构sockaddr的作用是什么？一般在什么场景下使用？","like_count":3,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461878,"discussion_content":"通用套接字就是所有函数的入口参数，用通用套接字就不需要为Tcp udp等各定义一组socket函数了，前面一位同学总结它为工厂模式，我认为挺到位的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565275720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134669,"user_name":"youngitachi","can_delete":false,"product_type":"c1","uid":1214582,"ip_address":"","ucode":"88717CA8B8ED64","user_header":"https://static001.geekbang.org/account/avatar/00/12/88/76/c69b7fe5.jpg","comment_is_top":false,"comment_ctime":1568889160,"is_pvip":true,"replies":[{"id":"51677","content":"如果你说你自己想设计一个跨主机，通过路径方式的通信机制呢，我觉得理论是可行的。当我们这里还是讨论现有的TCP&#47;IP实现。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568907634,"ip_address":"","comment_id":134669,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10158823752","product_id":100032701,"comment_content":"这个是上次的问题：<br>老师好，对于第二个问题我有个疑问。<br>假如知道远程服务器socket的路径，从理论上来讲，是否可以不需要端口号了呢？<br><br>接下来是第二次提问：<br>可能我没描述清楚，其实我的意思是这样的：我理解的是，指定了端口，就知道了和那个进程通信嘛，那么如果假设知道了远程主机的socket的路径了，是否可以不需要端口就能通信？<br>就假设我们要自己设计并实现个传输层协议，这个协议里我不指定端口，而是指定双方通信进程在主机上的路径，这样的协议是否可以满足通信呢？","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467855,"discussion_content":"如果你说你自己想设计一个跨主机，通过路径方式的通信机制呢，我觉得理论是可行的。当我们这里还是讨论现有的TCP/IP实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568907634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128736,"user_name":"吴文敏","can_delete":false,"product_type":"c1","uid":1003150,"ip_address":"","ucode":"A4303003E547D1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/8e/f4297447.jpg","comment_is_top":false,"comment_ctime":1566955488,"is_pvip":false,"replies":[{"id":"47916","content":"grpc是一个基于tcp的协议，定义了序列化和反序列化的格式，而rest是基于http协议的，可能传递同样的信息，grpc的报文比http更优化，另外就是常用的rest都不是一个长连接，每次都有建连的成本， grpc可以做到长连。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567004736,"ip_address":"","comment_id":128736,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10156890080","product_id":100032701,"comment_content":"老师可以讲一下grpc和rest的区别有哪些吗？为什么都说grpc比rest好、性能更高？","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465081,"discussion_content":"grpc是一个基于tcp的协议，定义了序列化和反序列化的格式，而rest是基于http协议的，可能传递同样的信息，grpc的报文比http更优化，另外就是常用的rest都不是一个长连接，每次都有建连的成本， grpc可以做到长连。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567004736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122099,"user_name":"pyhhou","can_delete":false,"product_type":"c1","uid":1256496,"ip_address":"","ucode":"31EF8D50CF91A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibZVAmmdAibBeVpUjzwId8ibgRzNk7fkuR5pgVicB5mFSjjmt2eNadlykVLKCyGA0GxGffbhqLsHnhDRgyzxcKUhjg/132","comment_is_top":false,"comment_ctime":1565290968,"is_pvip":false,"replies":[{"id":"45130","content":"socket是一个抽象概念，你写代码的时候需要和socket打交道，后面代码片段看到就会明白的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575598,"ip_address":"","comment_id":122099,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10155225560","product_id":100032701,"comment_content":"请教老师一下，看完文章，了解了 socket 在 “客户端-浏览器” 这样一个架构中扮演的角色，但是我对 socket 的概念还不是特别理解，不太明白的是，socket 的定义到底是什么？它是和 HTTP、TCP 类似的约定俗成的协议吗？还是说是一个文件，亦或是一段程序代码，里面记录了一些当前网络通信中涉及到的协议、地址、端口号以及其他的一些必要参数？","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462100,"discussion_content":"socket是一个抽象概念，你写代码的时候需要和socket打交道，后面代码片段看到就会明白的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083774,"avatar":"https://static001.geekbang.org/account/avatar/00/10/89/7e/f41ca6b5.jpg","nickname":"Stenvien","note":"","ucode":"8B8E33D517D1AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4559,"discussion_content":"socket是操作系统提供给开发者，针对tcp、udp等传输层协议的编程接口","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565547283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291985,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1620637004,"is_pvip":false,"replies":[{"id":"106722","content":"同意","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1621779038,"ip_address":"","comment_id":291985,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5915604300","product_id":100032701,"comment_content":"从文章来理解 且不去看资料。<br>1.既然是解决进程间的通信问题。就可以想到很多问题，不同机器，可以通过字节流在网络上传输数据 并通过协定好的格式进行序列化反序列化。<br>2.本机则可以通过内存字节流(只要约定好内存地址就好，内存实现)。<br>本地还可以通过文件来存储，双方通过已知的路径名 来读写文件实现进程的数据交换(我认为这个是硬盘实现)<br>所谓套接字原理本身并不复杂，复杂的它的规范和实现原理","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519616,"discussion_content":"同意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621779038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241681,"user_name":"нáпの゛","can_delete":false,"product_type":"c1","uid":1130666,"ip_address":"","ucode":"834FA877EFBAF7","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","comment_is_top":false,"comment_ctime":1597389609,"is_pvip":false,"replies":[{"id":"89402","content":"赞","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1597641148,"ip_address":"","comment_id":241681,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5892356905","product_id":100032701,"comment_content":"1 通用地址的作用主要是为了充当通用的指针，使接口参数传入统一，具体使用时强制转换为实际地址类型来解析。<br>2 感觉端口就是文件路径索引的意思，设计者为了方便使用搞了端口的概念。我的理解是走文件系统(本地套接字)就不需要端口，如果走协议栈就需要端口，远端通信只能走协议栈，所以必须要端口号。","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503812,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597641148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226111,"user_name":"郑祖煌","can_delete":false,"product_type":"c1","uid":1469608,"ip_address":"","ucode":"49A0D2E3279826","user_header":"https://static001.geekbang.org/account/avatar/00/16/6c/a8/1922a0f5.jpg","comment_is_top":false,"comment_ctime":1591953258,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5886920554","product_id":100032701,"comment_content":"1. IPv4、IPv6、本地套接字格式 他们都要监听对应的端口，并且绑定对应的地址<br>2.本地套接字格式是通过读写本机的文件来进行相互通信的。","like_count":1},{"had_liked":false,"id":199267,"user_name":"gtp","can_delete":false,"product_type":"c1","uid":1372089,"ip_address":"","ucode":"12E21307343B3A","user_header":"https://static001.geekbang.org/account/avatar/00/14/ef/b9/c0c12bea.jpg","comment_is_top":false,"comment_ctime":1585485230,"is_pvip":false,"replies":[{"id":"75790","content":"我觉得大家的回答很涨知识。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1586076849,"ip_address":"","comment_id":199267,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880452526","product_id":100032701,"comment_content":"思考题很长见识！！！","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489813,"discussion_content":"我觉得大家的回答很涨知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586076849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171501,"user_name":"莫珣","can_delete":false,"product_type":"c1","uid":1117933,"ip_address":"","ucode":"CAFE6F2AC5C177","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/ed/1c662e93.jpg","comment_is_top":false,"comment_ctime":1578933485,"is_pvip":false,"replies":[{"id":"68053","content":"通用套集字地址其实可以简单理解成为void *，之所以14个字节的char，是为了和IPV4地址保持对齐。所以在实际编程中，经常使用强制转换来完成IPV4地址和通用套接字地址的转换。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1580627959,"ip_address":"","comment_id":171501,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5873900781","product_id":100032701,"comment_content":"1.共性就是都有一个标识地址类型的字段，而且长度一致，在结构体中的位置也是一模一样的，这样只需要在内存中拿到前两个字节，就可以知道这是哪一种地址，然后可以根据地址的不同做不同的处理，这便于设计统一的接口。而且4种地址格式的内存安排的都非常紧凑，不知道这样设计是为了解析方便还是为了节省内存。IPv4和IPv6的目的是为了进行端到端的通信，而确定端到端的四元组是包含IP地址和端口，所以它们都包含了端口号和IP地址。<br><br>2.本地套接字不需要端口，因为IPv4和IPv6是进行端到端的通信，它需要有一种手段来确定机器上运行的众多进程里哪一个才是目标进程，所以需要端口。但是对本地套接字而言，你可以认为这个套接字就是本机上两个进程沟通的桥梁，你知道我也知道，大家就用这个本地套接字沟通就可以。<br><br>3.我没想明白为什么通用地址要这样设计。那14个字节的char数组是用来做什么的呢。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481383,"discussion_content":"通用套集字地址其实可以简单理解成为void *，之所以14个字节的char，是为了和IPV4地址保持对齐。所以在实际编程中，经常使用强制转换来完成IPV4地址和通用套接字地址的转换。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1580627959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1117933,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/ed/1c662e93.jpg","nickname":"莫珣","note":"","ucode":"CAFE6F2AC5C177","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":133494,"discussion_content":"第三个提的问题我知道答案了。评论区看到了，还是得多翻一翻评论区。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578967100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123940,"user_name":"leesper","can_delete":false,"product_type":"c1","uid":1351104,"ip_address":"","ucode":"CC76320571BECA","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/c0/cb5341ec.jpg","comment_is_top":false,"comment_ctime":1565782933,"is_pvip":false,"replies":[{"id":"45952","content":"这里要理解，就需要理解C里面的指针概念，C的指针是非常灵活的，这里用通用地址格式的方式来表示一个地址，实际上就是为了实现void *的功能。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1566130437,"ip_address":"","comment_id":123940,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860750229","product_id":100032701,"comment_content":"老师，通用地址大小和ipv4以及ipv6大小都不一样，最后怎么能转换成通用地址呢？这个地方不太明白。我觉得socket的设计者这么设计是为了让一个通用格式来兼容各种特殊格式。本地套接字就是本机所以不需要端口，但远程计算机上有很多服务器，你要发给谁就要用端口号来区别","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462906,"discussion_content":"这里要理解，就需要理解C里面的指针概念，C的指针是非常灵活的，这里用通用地址格式的方式来表示一个地址，实际上就是为了实现void *的功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566130437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123842,"user_name":"神经蛙","can_delete":false,"product_type":"c1","uid":1604240,"ip_address":"","ucode":"0511F6E6B30440","user_header":"https://static001.geekbang.org/account/avatar/00/18/7a/90/dc3537e7.jpg","comment_is_top":false,"comment_ctime":1565769714,"is_pvip":false,"replies":[{"id":"45954","content":"没有这样画的意思是read&#47;write是没有直接的对应关系的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1566130489,"ip_address":"","comment_id":123842,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860737010","product_id":100032701,"comment_content":"开头那张图，在数据传输过程中，“服务端将得到的结果以相同的方式写给客户端”，那么是否在服务端的write操作应该有个虚线箭头指向客户端的read，就像客户端的write指向服务端read一样？（因为数据传输是双向的）","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462838,"discussion_content":"没有这样画的意思是read/write是没有直接的对应关系的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566130489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123160,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1565618209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5860585505","product_id":100032701,"comment_content":"这篇是讲socket最牛逼的一篇，学到了","like_count":1},{"had_liked":false,"id":122339,"user_name":"Sunney","can_delete":false,"product_type":"c1","uid":1380199,"ip_address":"","ucode":"DC7A18F4D5313E","user_header":"https://static001.geekbang.org/account/avatar/00/15/0f/67/1cfb574e.jpg","comment_is_top":false,"comment_ctime":1565343356,"is_pvip":false,"replies":[{"id":"45153","content":"1.可以收到<br>2.会重传，FIN包也需要ACK<br>3.会的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576923,"ip_address":"","comment_id":122339,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860310652","product_id":100032701,"comment_content":"老师您好，我有些问题想咨询一下：<br>1.TCP断开的时候，发送的FIN包能通过程序接收到么？<br>2.如果FIN包丢失怎么办？<br>3.服务端也会发FIN包么？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462213,"discussion_content":"1.可以收到\n2.会重传，FIN包也需要ACK\n3.会的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122239,"user_name":"tdytaylor","can_delete":false,"product_type":"c1","uid":1181214,"ip_address":"","ucode":"5B4919FDFE91A6","user_header":"https://static001.geekbang.org/account/avatar/00/12/06/1e/51ad425f.jpg","comment_is_top":false,"comment_ctime":1565321105,"is_pvip":false,"replies":[{"id":"45145","content":"好的，我会留意。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565576557,"ip_address":"","comment_id":122239,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860288401","product_id":100032701,"comment_content":"老师，看了专栏之后，思考后面的问题，发现根本答不上来，看了评论区的一些大牛的解答之后，感觉需要回答这些问题需要很多相关知识（如计算机操作系统），他们的答案感觉是从不同方面回答的，看着都不知道哪个说的更准确。突然觉得之前学的东西太片面了，不能把这些知识串联起，借此希望老师在讲知识点的时候，能稍微提一下，看到不懂的还能把相关知识复习一下，谢谢老师","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462167,"discussion_content":"好的，我会留意。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565576557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121692,"user_name":"星亦辰","can_delete":false,"product_type":"c1","uid":1284592,"ip_address":"","ucode":"B0388FBFFDEE7E","user_header":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","comment_is_top":false,"comment_ctime":1565184320,"is_pvip":true,"replies":[{"id":"44814","content":"其实后面这块设计也被人不断挑战，现实就是有两个操作，其实真的可以搞成一个","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565276409,"ip_address":"","comment_id":121692,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5860151616","product_id":100032701,"comment_content":"Listen 和 accept 什么区别 总感觉是一种操作","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461905,"discussion_content":"其实后面这块设计也被人不断挑战，现实就是有两个操作，其实真的可以搞成一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565276409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1284592,"avatar":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","nickname":"星亦辰","note":"","ucode":"B0388FBFFDEE7E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4297,"discussion_content":"恩 很像 不过同学的解释也很好 。\nListen 是摆摊，accept 是接客。\n\n所以，服务端是这样的：\n\n初始化，选址，购置基本物品\n绑定，登记，告诉大家我们这里有服务\nListen 摆摊\nAccept 接客 \n\n😄\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565304550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1477855,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8c/df/77acb793.jpg","nickname":"禾桃","note":"","ucode":"9FE85C34A9E9E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1284592,"avatar":"https://static001.geekbang.org/account/avatar/00/13/99/f0/d9343049.jpg","nickname":"星亦辰","note":"","ucode":"B0388FBFFDEE7E","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":4381,"discussion_content":"重点是那10把椅子😄，有一个queue","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565342370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4297,"ip_address":""},"score":4381,"extra":""}]},{"author":{"id":1477855,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8c/df/77acb793.jpg","nickname":"禾桃","note":"","ucode":"9FE85C34A9E9E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4192,"discussion_content":"以饭店吃饭打个比方，\n\nlisten就当与你是饭店老板，你在门口设置了10把椅子(和backlog这个参数有关），供来的客人等待时可以坐着等待的。\n\n椅子设置好了，下一步就是要开始等待客人来了，这个时候运行accept。\n\n客人来了，如果饭店内有空座，直接进去接待，如果没有就要看看10把椅子是不是有空的，让客人做下等待，如果没有，只有暂时不接待了。\n\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565221571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121604,"user_name":"萌妻的路飞","can_delete":false,"product_type":"c1","uid":1347387,"ip_address":"","ucode":"266E4286614CDF","user_header":"https://static001.geekbang.org/account/avatar/00/14/8f/3b/234ce259.jpg","comment_is_top":false,"comment_ctime":1565165495,"is_pvip":false,"replies":[{"id":"44806","content":"基本的函数，指针就可以了","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565275741,"ip_address":"","comment_id":121604,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860132791","product_id":100032701,"comment_content":"c语言还是有点生疏，搜索一下才明白了文中的代码。所以想问下老师，需不需要去补一些c语言，补的话重点看哪些就够了","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461874,"discussion_content":"基本的函数，指针就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565275741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121561,"user_name":"小崔","can_delete":false,"product_type":"c1","uid":1104958,"ip_address":"","ucode":"4E537416787752","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/3e/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1565159041,"is_pvip":false,"replies":[{"id":"44807","content":"实践出真知，期待你跑一下真实的程序<br><br>第一，是的，路径是有限制的<br><br>第二，我认为会<br><br>第三，我认为不会","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565275881,"ip_address":"","comment_id":121561,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860126337","product_id":100032701,"comment_content":"第一：本地地址可变长度有限是否意味着socket路径不能太长<br>第二：本地地址通信时，如果两对不同的C&#47;S指定了同一个路径怎么办？后启动的server会报错么？<br>第三：本地socket如果是作为文件形式通讯的话，是否会遇到文件权限问题？如果client没有权限访问那个路径也会报错吧","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461853,"discussion_content":"实践出真知，期待你跑一下真实的程序\n\n第一，是的，路径是有限制的\n\n第二，我认为会\n\n第三，我认为不会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565275881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121553,"user_name":"Coding小先","can_delete":false,"product_type":"c1","uid":1051563,"ip_address":"","ucode":"965B1CC757E026","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/ab/0e2857e5.jpg","comment_is_top":false,"comment_ctime":1565158201,"is_pvip":false,"replies":[{"id":"44808","content":"期待你下节课的总结","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565275934,"ip_address":"","comment_id":121553,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860125497","product_id":100032701,"comment_content":"1 共性是固定长度，有IP地址和端口号，m这么设计的原因是为了让网络的各个设备通信更加便利，如果没有统一规范，你的是这个格式，他的是那个格式，通信就GG了。<br><br>2 把主机想象成一栋大楼，一个进程就是一户人家，网络通信就是和外面的人互相寄快递，本地的话就邻居之间的交流，外面的人要给你就需要你的地址（IP地址）和户号（端口号）不然快递员不知道送给那家那户。而邻居家之间的，只需要你住在那户（因为有共同地址）就行了。<br><br>期待ing","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461846,"discussion_content":"期待你下节课的总结","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565275934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121498,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1565148873,"is_pvip":false,"replies":[{"id":"45109","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575031,"ip_address":"","comment_id":121498,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860116169","product_id":100032701,"comment_content":"IPv4、IPv6、本地套接字格式以及通用地址套接字，它们有什么共性呢？如果你是 BSD 套接字的设计者，你为什么要这样设计呢？<br>它们的对外接口都是相同的，有bind listen accept connect write send等通用方法，把底层细节屏蔽，为上层使用提供更友好的方式。<br><br>为什么本地套接字格式不需要端口号，而 IPv4 和 IPv6 套接字格式却需要端口号呢？<br>本地套接字可以通过套接字文件唯一定位到，而IPv4 和 IPv6要想定位到，就需要使用IP+端口+对方IP+对方端口，四元组来唯一定位到。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461820,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121496,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1565148654,"is_pvip":false,"replies":[{"id":"44649","content":"谢谢，一起走起","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565153724,"ip_address":"","comment_id":121496,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860115950","product_id":100032701,"comment_content":"老师讲得好，跟着老师一起精进。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461819,"discussion_content":"谢谢，一起走起","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565153724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121432,"user_name":"刘明","can_delete":false,"product_type":"c1","uid":1109382,"ip_address":"","ucode":"5871C54AAE1A81","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/86/5855aaa4.jpg","comment_is_top":false,"comment_ctime":1565139289,"is_pvip":false,"replies":[{"id":"45101","content":"这个通用地址格式的一个主要目的就是强制将IPV4、IPV6地址转换为统一格式，实现程序可以根据Family字段读取后面的值，所以它不需要设计那么长，只需要和最短的IPV4保持一致即可。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565574739,"ip_address":"","comment_id":121432,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5860106585","product_id":100032701,"comment_content":"通用地址格式sockaddr为什么设计成16字节这么长，而不是与最长的sockaddr_un一样长呢？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461788,"discussion_content":"这个通用地址格式的一个主要目的就是强制将IPV4、IPV6地址转换为统一格式，实现程序可以根据Family字段读取后面的值，所以它不需要设计那么长，只需要和最短的IPV4保持一致即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565574739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073845,"avatar":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","nickname":"zhanyd","note":"","ucode":"4C994EE512A3C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72808,"discussion_content":"IPV6地址比它大，怎么转呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575530212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121423,"user_name":"(￣_￣ )","can_delete":false,"product_type":"c1","uid":1133366,"ip_address":"","ucode":"8B6E2EF240D4AD","user_header":"https://static001.geekbang.org/account/avatar/00/11/4b/36/ed40fb3a.jpg","comment_is_top":false,"comment_ctime":1565138617,"is_pvip":false,"replies":[{"id":"44643","content":"完美","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565153215,"ip_address":"","comment_id":121423,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860105913","product_id":100032701,"comment_content":"ip加端口号区分唯一进程，而本地套接字可以通过路径来区分","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461783,"discussion_content":"完美","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565153215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121410,"user_name":"二星球","can_delete":false,"product_type":"c1","uid":1111552,"ip_address":"","ucode":"89EC5FEB98E7CE","user_header":"https://static001.geekbang.org/account/avatar/00/10/f6/00/2a248fd8.jpg","comment_is_top":false,"comment_ctime":1565137537,"is_pvip":false,"replies":[{"id":"44626","content":"这涉及到Tcp的报文格式，Tcp给每个分节都安排了一个唯一的序列化sequence number，靠这个可以唯一标识一个Tcp分节；另外，Tcp是一种流式传输，它的传输过程要保证有序的，你说的先发后到这种情况只在udp才会存在，这个时候你需要给udp建立类型序列号机制，保证重发，有序等语意<br><br>这部分在接下来的课程中都会涉及，敬请期待","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565138775,"ip_address":"","comment_id":121410,"utype":1}],"discussion_count":4,"race_medal":0,"score":"5860104833","product_id":100032701,"comment_content":"老师好，请教个问题：同一个进程向同一台主机连续发送2个请求（相同的socket连接请求），第二个请求比第一个请求的结果先返回，那么进程能够区分 返回的结果是那个请求发送的吗？如果能是靠什么区分的呢？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461779,"discussion_content":"这涉及到Tcp的报文格式，Tcp给每个分节都安排了一个唯一的序列化sequence number，靠这个可以唯一标识一个Tcp分节；另外，Tcp是一种流式传输，它的传输过程要保证有序的，你说的先发后到这种情况只在udp才会存在，这个时候你需要给udp建立类型序列号机制，保证重发，有序等语意\n\n这部分在接下来的课程中都会涉及，敬请期待","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565138775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1162862,"avatar":"https://static001.geekbang.org/account/avatar/00/11/be/6e/46a5da10.jpg","nickname":"Hong","note":"","ucode":"2E7FB03BFEC8F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6509,"discussion_content":"TCP数据流必须是按序的，所以HTTP2在TCP层面还是存在head of line blocking的问题，google的QUIC协议或HTTP3要解决的一点","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566951970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083774,"avatar":"https://static001.geekbang.org/account/avatar/00/10/89/7e/f41ca6b5.jpg","nickname":"Stenvien","note":"","ucode":"8B8E33D517D1AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4561,"discussion_content":"要看应用层协议本身支不支持响应的非按序返回\n\n大部分协议都不支持，如redis、mysql、http1.x，所以服务端必须保证请求按序处理，响应按序返回\n\n有部分协议支持，如http2、thrift，这种情况下，请求和响应中都会带有id，通过id来定位某响应是属于哪个请求的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565547633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103533,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d6/ad/52df3832.jpg","nickname":"逍遥法外","note":"","ucode":"75458730192696","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4134,"discussion_content":"老师描述的是一个连接的不同数据包的处理吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565159404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353099,"user_name":"天琊","can_delete":false,"product_type":"c1","uid":1285621,"ip_address":"陕西","ucode":"E3EAA4E6C4237B","user_header":"https://static001.geekbang.org/account/avatar/00/13/9d/f5/c74224dc.jpg","comment_is_top":false,"comment_ctime":1659165348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659165348","product_id":100032701,"comment_content":"sockaddr_in 和sockaddr_un其中的in和un是啥的缩写","like_count":0},{"had_liked":false,"id":319621,"user_name":"琥 珀","can_delete":false,"product_type":"c1","uid":2412628,"ip_address":"","ucode":"B06A9CFA0A0269","user_header":"https://static001.geekbang.org/account/avatar/00/24/d0/54/9230c283.jpg","comment_is_top":false,"comment_ctime":1635867620,"is_pvip":false,"replies":[{"id":"116134","content":"不太明白你的问题，127.0.0.1本身就是IPV4啊。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1636272331,"ip_address":"","comment_id":319621,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635867620","product_id":100032701,"comment_content":"如果是本地127.0.0.1通讯，使用本地套接字相比IPv4开销上有什么差别？哪种是更优选项？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529690,"discussion_content":"不太明白你的问题，127.0.0.1本身就是IPV4啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636272331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2412628,"avatar":"https://static001.geekbang.org/account/avatar/00/24/d0/54/9230c283.jpg","nickname":"琥 珀","note":"","ucode":"B06A9CFA0A0269","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413041,"discussion_content":"我好像在后面的课程得到了这个答案，我的意思是，本地环路通讯，使用IPC和TCP/IP哪个是更优解，答案应该是IPC吧，IPC的开销更低","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636370043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312173,"user_name":"Issac慜","can_delete":false,"product_type":"c1","uid":1793361,"ip_address":"","ucode":"690B69FC1C0BB2","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5d/51/87fc7ef9.jpg","comment_is_top":false,"comment_ctime":1631671822,"is_pvip":false,"replies":[{"id":"114037","content":"是的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1633576042,"ip_address":"","comment_id":312173,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631671822","product_id":100032701,"comment_content":"本地套接字不需要端口号，我认为文件路径已经能够唯一标识这个套接字了。<br>但是其他套接字中，不同的端口号对应着不同的服务，需要使用者通过端口号，确定需要使用的服务","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526887,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633576042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296616,"user_name":"vv_test","can_delete":false,"product_type":"c1","uid":1685884,"ip_address":"","ucode":"1D164B2F034E2B","user_header":"https://static001.geekbang.org/account/avatar/00/19/b9/7c/afe6f1eb.jpg","comment_is_top":false,"comment_ctime":1623065651,"is_pvip":false,"replies":[{"id":"108675","content":"味道是那个味道，不过本地套接字和TCP套接字还是不太一样的哦。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1624805260,"ip_address":"","comment_id":296616,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623065651","product_id":100032701,"comment_content":"第二道题，字面上来分析。以ip:port可以确定在服务器端是哪个程序。<br>那么本地套接字。 已经有个本地了(ip)，那么这个file是不是就有点端口的那个味道了。<br>总得来说，就是确定对应的资源。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521521,"discussion_content":"味道是那个味道，不过本地套接字和TCP套接字还是不太一样的哦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624805260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295847,"user_name":"芋头","can_delete":false,"product_type":"c1","uid":1227492,"ip_address":"","ucode":"A9C875548E4EE5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ba/e4/6df89add.jpg","comment_is_top":false,"comment_ctime":1622618743,"is_pvip":false,"replies":[{"id":"107567","content":"👍","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1622983567,"ip_address":"","comment_id":295847,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622618743","product_id":100032701,"comment_content":"总结：1.什么是套接字？操作系统针对tcp&#47;udp的编程接口<br>2.本地套接字和通用套接字有什么共同特性？相同的抽象概念<br>3.本地套接字访问的是本地文件系统，IPv4 和 IPv6 套接字需要和远程服务器某一进程对接。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521236,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622983567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229179,"user_name":"你好旅行者","can_delete":false,"product_type":"c1","uid":1154101,"ip_address":"","ucode":"5C72A428DC28F3","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/35/9dc79371.jpg","comment_is_top":false,"comment_ctime":1592917718,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592917718","product_id":100032701,"comment_content":"从IPV4的结构体中不难看出，所谓套接字，就是地址族的描述字段+端口号+IP地址","like_count":0},{"had_liked":false,"id":198836,"user_name":"徐衡","can_delete":false,"product_type":"c1","uid":1881664,"ip_address":"","ucode":"06EBCB2F507603","user_header":"https://static001.geekbang.org/account/avatar/00/1c/b6/40/6060d233.jpg","comment_is_top":false,"comment_ctime":1585470042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585470042","product_id":100032701,"comment_content":"以上所有的操作，都是通过 socket 来完成的。无论是客户端的 connect，还是服务端的 accept，或者 read&#47;write 操作等，socket 是我们用来建立连接，传输数据的唯一途径。","like_count":0},{"had_liked":false,"id":198825,"user_name":"与路同飞","can_delete":false,"product_type":"c1","uid":1138821,"ip_address":"","ucode":"2985F1440A1962","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/85/f72f1d94.jpg","comment_is_top":false,"comment_ctime":1585469726,"is_pvip":true,"replies":[{"id":"74760","content":"所以说看回复也是很好的学习哦。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1585484918,"ip_address":"","comment_id":198825,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585469726","product_id":100032701,"comment_content":"都用了一个字段来标记地址类型，和jvm中class文件类似。第二个问题，是真的不知道，看了评论区的大牛才知道，本地socket本质上是访问本地的文件系统，是不需要端口好的","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489754,"discussion_content":"所以说看回复也是很好的学习哦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585484918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192229,"user_name":"webs507wh","can_delete":false,"product_type":"c1","uid":1625555,"ip_address":"","ucode":"F93B8906D164F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/JF5ZUbI5KMFsTASqrVTUhpxyrOqGtBR4iaobxaASEjyZ7rPic50kzqQvNhFOw04MkyzUN0sc3pu7QsJwD57moibtw/132","comment_is_top":false,"comment_ctime":1584843713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584843713","product_id":100032701,"comment_content":"不错，多说说网络底层","like_count":0},{"had_liked":false,"id":188590,"user_name":"Geek_wannaBgeek","can_delete":false,"product_type":"c1","uid":1643435,"ip_address":"","ucode":"6F42F4181981C3","user_header":"https://static001.geekbang.org/account/avatar/00/19/13/ab/d73e25de.jpg","comment_is_top":false,"comment_ctime":1584372586,"is_pvip":false,"replies":[{"id":"73538","content":"评论比专栏本身更精彩，哈哈。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1584863686,"ip_address":"","comment_id":188590,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584372586","product_id":100032701,"comment_content":"看完专栏看评论，全是等着我吸收的知识啊","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487459,"discussion_content":"评论比专栏本身更精彩，哈哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584863686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173567,"user_name":"吃饭睡觉打酱油","can_delete":false,"product_type":"c1","uid":1071668,"ip_address":"","ucode":"95EC98C2B5045B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5a/34/4cbadca6.jpg","comment_is_top":false,"comment_ctime":1579598558,"is_pvip":false,"replies":[{"id":"68041","content":"本地套接字是本地两个进程之间通信的标识，这个一般是通过文件路径的方式描述的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1580624311,"ip_address":"","comment_id":173567,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579598558","product_id":100032701,"comment_content":"老师，为什么需要本地套接字地址格式？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482118,"discussion_content":"本地套接字是本地两个进程之间通信的标识，这个一般是通过文件路径的方式描述的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580624311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167505,"user_name":"Varphp","can_delete":false,"product_type":"c1","uid":1590892,"ip_address":"","ucode":"889550391E3F75","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTImmLJCKerl9CI4sTpPDNCUgswp04ybsJ4J6mpJmMlHh43Iibp1RPOLam5PpOv2ZDGcjvGrY94lNRw/132","comment_is_top":false,"comment_ctime":1577845967,"is_pvip":false,"replies":[{"id":"65477","content":"你指的窜是啥意思？如果是指多个客户端的话，我是这么理解的，每个TCP&#47;IP报文都有源地址-源端口-目的地址-目的端口这些数据，通过这个四元组，可以匹配每个报文，你可以想象内核会按照这个四元组把网卡上的数据分门别类的放好，就好像我们寄送快递有地址一样，这样大家的数据就都不会窜了。再加上报文本身的sequece序列号，就可以按照前后顺序，吧客户端发送的报文原封不动的拼凑出来了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1578213467,"ip_address":"","comment_id":167505,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577845967","product_id":100032701,"comment_content":"网卡会有大量的数据，回来的数据写到内核，那socket怎么保证写入内核的数据不会窜。很好奇网卡和内核这块 ，希望老师有空讲解下","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479886,"discussion_content":"你指的窜是啥意思？如果是指多个客户端的话，我是这么理解的，每个TCP/IP报文都有源地址-源端口-目的地址-目的端口这些数据，通过这个四元组，可以匹配每个报文，你可以想象内核会按照这个四元组把网卡上的数据分门别类的放好，就好像我们寄送快递有地址一样，这样大家的数据就都不会窜了。再加上报文本身的sequece序列号，就可以按照前后顺序，吧客户端发送的报文原封不动的拼凑出来了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578213467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162370,"user_name":"剑山烽火","can_delete":false,"product_type":"c1","uid":1589008,"ip_address":"","ucode":"8E1FD839324050","user_header":"https://static001.geekbang.org/account/avatar/00/18/3f/10/f3fc081b.jpg","comment_is_top":false,"comment_ctime":1576505479,"is_pvip":false,"replies":[{"id":"63914","content":"具体一点是指什么？28个字节应该也是字节对齐的结果吧。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1577604710,"ip_address":"","comment_id":162370,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576505479","product_id":100032701,"comment_content":"IPv6 整个结构体长度是 28 个字节，这个是不是应该考虑下字节对齐呀？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478030,"discussion_content":"具体一点是指什么？28个字节应该也是字节对齐的结果吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577604710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159965,"user_name":"云师兄","can_delete":false,"product_type":"c1","uid":1010459,"ip_address":"","ucode":"4475AF1598FBFD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/1b/4b397b80.jpg","comment_is_top":false,"comment_ctime":1575852456,"is_pvip":false,"replies":[{"id":"63945","content":"IPV4。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1577605630,"ip_address":"","comment_id":159965,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575852456","product_id":100032701,"comment_content":"实际应用开发中的127.0.0.1：8080属于ipv4还是本地套接字呢？这个确实要指定到本地某个进程去","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477221,"discussion_content":"IPV4。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577605630,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159063,"user_name":"zhanyd","can_delete":false,"product_type":"c1","uid":1073845,"ip_address":"","ucode":"4C994EE512A3C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","comment_is_top":false,"comment_ctime":1575529157,"is_pvip":false,"replies":[{"id":"61029","content":"有同学已经回复了：<br><br>通用网络地址结构是所有具体地址结构的抽象，有了统一可以操作的地址结构，那么就可以涉及一套统一的接口，简化了接口设计。通用地址结构中第一个字段表明了地址的类型，后面的数据可以通过具体类型解析出来，一般只有将具体地址类型的指针强制转化成通用类型，这样操作才不会造成内存越界。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575799315,"ip_address":"","comment_id":159063,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1575529157","product_id":100032701,"comment_content":"通用套接字地址格式有什么用呢？貌似它只能适配IPv4 套接字格式地址啊？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476934,"discussion_content":"有同学已经回复了：\n\n通用网络地址结构是所有具体地址结构的抽象，有了统一可以操作的地址结构，那么就可以涉及一套统一的接口，简化了接口设计。通用地址结构中第一个字段表明了地址的类型，后面的数据可以通过具体类型解析出来，一般只有将具体地址类型的指针强制转化成通用类型，这样操作才不会造成内存越界。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575799315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073845,"avatar":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","nickname":"zhanyd","note":"","ucode":"4C994EE512A3C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":76897,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575865826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149206,"user_name":"lyt","can_delete":false,"product_type":"c1","uid":1526706,"ip_address":"","ucode":"8C179F339C2A27","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/OwolYO3ppfrxTcX81cswxNkD4tIlHM7vrnfroMzoTx878mDCnfJ3esicvbhm7ricUAbR7T9DjEDstVklh9z6uzjQ/132","comment_is_top":false,"comment_ctime":1573175317,"is_pvip":false,"replies":[{"id":"57494","content":"真的么？😢","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1573283342,"ip_address":"","comment_id":149206,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573175317","product_id":100032701,"comment_content":"一个初学者感觉您讲socket做的比喻更难理解了，不清楚","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473774,"discussion_content":"真的么？😢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573283342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143433,"user_name":"极客雷","can_delete":false,"product_type":"c1","uid":1041465,"ip_address":"","ucode":"0DBAC4CB9C7BCD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e4/39/a06ade33.jpg","comment_is_top":false,"comment_ctime":1571708260,"is_pvip":true,"replies":[{"id":"55832","content":"其实就是本地套接字拉，不过你说的也是对的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572058714,"ip_address":"","comment_id":143433,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571708260","product_id":100032701,"comment_content":"AF_LOCAL：表示的是本地地址，对应的是 Unix 套接字，不太准确，对应的应该是UNIX Domain Socket，UNIX域套接字","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471535,"discussion_content":"其实就是本地套接字拉，不过你说的也是对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572058714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142971,"user_name":"........","can_delete":false,"product_type":"c1","uid":1236198,"ip_address":"","ucode":"D54E7F428E7F49","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/e6/ea4b2c10.jpg","comment_is_top":false,"comment_ctime":1571615727,"is_pvip":false,"replies":[{"id":"55598","content":"纠正一下，如果想保持另一个方向的连接正常，应该使用shutdown方法，这样的话，另一方视连接的另一个方向是正常的，可以继续发送数据。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571846347,"ip_address":"","comment_id":142971,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571615727","product_id":100032701,"comment_content":"向各位请教一下，当客户端与服务器断开连接时，会执行close函数，操作系统通过原先的链路，发送一个FIN包，服务器收到后执行被动关闭；这时候，整个链路处于半关闭状态，此时，服务器也会执行一个close函数，发送一个FIN包。在一方收到FIN包之前都认为连接是正常的。这么理解，对吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471342,"discussion_content":"纠正一下，如果想保持另一个方向的连接正常，应该使用shutdown方法，这样的话，另一方视连接的另一个方向是正常的，可以继续发送数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571846347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142334,"user_name":"冀云","can_delete":false,"product_type":"c1","uid":1175189,"ip_address":"","ucode":"01E3B55795E90A","user_header":"https://static001.geekbang.org/account/avatar/00/11/ee/95/6fe64a45.jpg","comment_is_top":false,"comment_ctime":1571356502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571356502","product_id":100032701,"comment_content":"1 AF_类似一个版本号，很多数据结构的第一个字段是版本号，或者用结构体的长度当做版本号，这样可以区分版本后，直接从内存进行拷贝后续相应个字节数就可以了，可以保证后续设计的扩展，也可能设计之初就并不是在设计一个种地址格式。<br>2 本地间的进程通信的话，方式应该也是比较多的，而设计Socket时可能为了提供一种标准化的方式，所以本地通信也以AF_这样的结构体进行了设计，从而可以使用相同接口即可以完成网络之间的通信和也可以本地之间的通信，从而在开发时代码显得更加规范。","like_count":0},{"had_liked":false,"id":138230,"user_name":"盘尼西林","can_delete":false,"product_type":"c1","uid":1197347,"ip_address":"","ucode":"B59569FC25144F","user_header":"https://static001.geekbang.org/account/avatar/00/12/45/23/28311447.jpg","comment_is_top":false,"comment_ctime":1570108520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570108520","product_id":100032701,"comment_content":"socket 我的理解为：网络中两个进程间通信的 抽象，进程要先绑定一个socket 才能与外部的网络通信。","like_count":0},{"had_liked":false,"id":134243,"user_name":"youngitachi","can_delete":false,"product_type":"c1","uid":1214582,"ip_address":"","ucode":"88717CA8B8ED64","user_header":"https://static001.geekbang.org/account/avatar/00/12/88/76/c69b7fe5.jpg","comment_is_top":false,"comment_ctime":1568781613,"is_pvip":true,"replies":[{"id":"51606","content":"你把本地套接字和跨主机的套接字混淆了，本地套接字可以理解成本地进程间通信的方式，是需要知道本地套接字的路径的；而跨主机的套接字，是一定需要知道对方的IP地址和端口的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1568884953,"ip_address":"","comment_id":134243,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568781613","product_id":100032701,"comment_content":"老师好，对于第二个问题我有个疑问。<br>假如知道远程服务器socket的路径，从理论上来讲，是否可以不需要端口号了呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467669,"discussion_content":"你把本地套接字和跨主机的套接字混淆了，本地套接字可以理解成本地进程间通信的方式，是需要知道本地套接字的路径的；而跨主机的套接字，是一定需要知道对方的IP地址和端口的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568884953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130544,"user_name":"卫江","can_delete":false,"product_type":"c1","uid":1101226,"ip_address":"","ucode":"DE2F7A6916F1A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","comment_is_top":false,"comment_ctime":1567481188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567481188","product_id":100032701,"comment_content":"第一个问题，为什么分别定义不同类型的地址结构体，我认为主要是为了节省空间，同时最开始的位置可以获取地址类型，也就可以进行类型转化，转化成实际的地址类型，而不用所有的地址都用一个，会造成内存浪费。<br>第二个问题，为什么本地socket不需要端口，本地socket是依赖于文件系统，我们可以从地址结构体中看到文件路径，内核可以很容易的通过打开的文件找到是哪个进程创建的，而端口的作用就是为了找到进程，所以，本地socket也就不需要了。","like_count":0},{"had_liked":false,"id":130250,"user_name":"奶油机器人","can_delete":false,"product_type":"c1","uid":1646995,"ip_address":"","ucode":"A293FA3E6B2AFA","user_header":"https://static001.geekbang.org/account/avatar/00/19/21/93/57928298.jpg","comment_is_top":false,"comment_ctime":1567413077,"is_pvip":false,"replies":[{"id":"52206","content":"通用的意思是用它定义了所有socket相关函数，例如:<br>nt bind(int, struct sockaddr *, socklen_t); <br><br>它唯一存在的价值，就是提供了强制类型转换的功能，实际上函数的实现者都需要通过读取family字段，判断真实的数据类型为IPV4、IPV6还是本地地址。<br><br>例如:<br>struct sockaddr_in client_addr;<br>socklen_t client_len = sizeof(client_addr);<br>connfd = accept(listenfd, (struct sockaddr *) &amp;client_addr, &amp;client_len)","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1569407855,"ip_address":"","comment_id":130250,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567413077","product_id":100032701,"comment_content":"为啥是通用的呢，ipv6的长度和通用套接字长度差很多呀","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465875,"discussion_content":"通用的意思是用它定义了所有socket相关函数，例如:\nnt bind(int, struct sockaddr *, socklen_t); \n\n它唯一存在的价值，就是提供了强制类型转换的功能，实际上函数的实现者都需要通过读取family字段，判断真实的数据类型为IPV4、IPV6还是本地地址。\n\n例如:\nstruct sockaddr_in client_addr;\nsocklen_t client_len = sizeof(client_addr);\nconnfd = accept(listenfd, (struct sockaddr *) &amp;amp;client_addr, &amp;amp;client_len)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569407855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":129290,"user_name":"吾皇万岁万岁万万岁","can_delete":false,"product_type":"c1","uid":1135155,"ip_address":"","ucode":"8FDD608729A002","user_header":"https://static001.geekbang.org/account/avatar/00/11/52/33/abf321b7.jpg","comment_is_top":false,"comment_ctime":1567080745,"is_pvip":false,"replies":[{"id":"48195","content":"如果异常断开又不检测，这个连接的数据在系统层都会完完整整的占据一定的内存，确实是毫无所知。<br><br>如果不调用close，内核是没有办法彻底释放套接字相关的资源的；<br><br>close掉以后，这个套接字就没有办法再收发数据了，内核直接mark这个套接字回收就可以了，剩下的交给内核操心好了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567130863,"ip_address":"","comment_id":129290,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567080745","product_id":100032701,"comment_content":"老师，我是学渣，我想问问，连接建立后，如果不存在心跳，某一端异常断开，另一端是否依然在内存中保持socket结构？ 是不是毫无所知？ 如果不掉用close，会天长地久的在内存中吗？ 如果调用close，tcp的关闭协议不能正常进行，那么linux内核又是怎么处理呢？<br><br>祝老师身体健康！","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465385,"discussion_content":"如果异常断开又不检测，这个连接的数据在系统层都会完完整整的占据一定的内存，确实是毫无所知。\n\n如果不调用close，内核是没有办法彻底释放套接字相关的资源的；\n\nclose掉以后，这个套接字就没有办法再收发数据了，内核直接mark这个套接字回收就可以了，剩下的交给内核操心好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567130863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128077,"user_name":"Knight²º¹⁸","can_delete":false,"product_type":"c1","uid":1089754,"ip_address":"","ucode":"BDCB830B6A730F","user_header":"https://static001.geekbang.org/account/avatar/00/10/a0/da/4f50f1b2.jpg","comment_is_top":false,"comment_ctime":1566828373,"is_pvip":false,"replies":[{"id":"47929","content":"就是ip和地址啊，socket只是一个编程实现的入口模型。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1567005359,"ip_address":"","comment_id":128077,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566828373","product_id":100032701,"comment_content":"老师，我有个疑问，客户端进程和服务端进程之间可以建立多个socket链接，那么那么客户端的socket和服务端的socket是如何找到彼此的，他们之间用什么关联在一起的，就像主机主机之间有ip地址，主机可以通过端口号来识别进程，那么socket之间依靠的是什么？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464782,"discussion_content":"就是ip和地址啊，socket只是一个编程实现的入口模型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567005359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125273,"user_name":"另一半棉花糖","can_delete":false,"product_type":"c1","uid":1593363,"ip_address":"","ucode":"C11266794FBA5B","user_header":"https://static001.geekbang.org/account/avatar/00/18/50/13/104d9501.jpg","comment_is_top":false,"comment_ctime":1566135978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566135978","product_id":100032701,"comment_content":"对于第二个问题，需要深入思考一下。参照ip+端口号的模型来看，ip地址确定了一个唯一的机器，端口号确定了一个唯一的进程，而ip地址内部又是通过网络地址+主机地址的方式来确定唯一主机的。<br><br>这个就是分级确定的策略，我们使用的N进制计数法也是分级确定的策略，拿10进制来说就是，每10个数字分为一组，标记为0-9。我们在表示一个数的时候，百位就表示这个数字的十位数在哪一组，十位数则表示个位数在哪一组，个位数则表示这个数在百+十位数所确定的组内的第几个数。<br><br>再说回网络编程。网络地址表示ip地址在哪个组中，如果掩码是255.255.255.0，那么这个组中就一共有255个地址可用；主机地址则表示是这255个地址中的具体哪个地址；而在一台具体的主机上又有65535个端口号可用。通过这个网络地址+主机地址+端口号的3级定位可以索引到某一确定数量的进程个数。<br><br>那AF_UNIX为什么没有搞一个端口号呢？从分级索引的角度来看，可以说AF_UNIX其实已经搞了，只不过不叫“端口号”而已，我们可以认为路径名的最后一部分（最后一个&#47;之后的部分）就是所谓的“端口号”。对应于进程的实际意义上的端口号总共有65535个，而AF_UNIX中的端口号可以有无数多个（不知道linux对一个目录下的文件数量有没有限制），至于这些端口号怎么用，怎么分配，完全看我们程序的设计了。并且使用路径名可以有无数多个分级（不知道linux对路径长度有没有限制，即&#47;的个数是否可以无数多个）。假设我们只使用0-9这10个数字中的某一个（即只有一位数）来命名目录或文件，那么路径名每多一个&#47;，那么我们的索引空间就增加了10的一个指数次方的容量。在我看来，使用路径名来索引进程，要比使用网络地址+主机地址+端口号要更有潜力，容量更大。","like_count":0},{"had_liked":false,"id":123856,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1565772613,"is_pvip":false,"replies":[{"id":"45953","content":"也可以这么理解","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1566130447,"ip_address":"","comment_id":123856,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565772613","product_id":100032701,"comment_content":"个人感觉listen更像是电话开机了，等待别人拨打过来，accept是别人打过来之后按了接通按钮。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462848,"discussion_content":"也可以这么理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566130447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122683,"user_name":"编程指北","can_delete":false,"product_type":"c1","uid":1235967,"ip_address":"","ucode":"FDBAEE3500D689","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/ff/7043a067.jpg","comment_is_top":false,"comment_ctime":1565490234,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1565490234","product_id":100032701,"comment_content":"第一个问题： 我理解的就是通用地址就是基类，定义函数时，使用基类可以接受任意派生类（IPv4、IPv6等）但是由于C语言没有继承这种东西，所以以通用类型代替，那么一个函数接受了通用类型在函数内部它又如何判断是那种具体类型呢？在Java、C++中有RTTI，但是C没有，所以只能规定前两个字节表示具体类型，这样在内部就可以强制转型回来。","like_count":0},{"had_liked":false,"id":122657,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1565454488,"is_pvip":true,"replies":[{"id":"45158","content":"无论是长连接还是短连接，都有连接断开的过程。正因为建连和端连的成本太高，所以才有了长连接一说。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565577189,"ip_address":"","comment_id":122657,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565454488","product_id":100032701,"comment_content":"执行断开连接时，通过原先的链路向服务器发送一个FIN请求。原先的链路是指之前已建立连接的套接字吧，这应该是属于长连接的情况吧。如果是短连接是一次HTTP请求后自动断开连接也是这样的吗?这里不太理解，老师有空看看","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462348,"discussion_content":"无论是长连接还是短连接，都有连接断开的过程。正因为建连和端连的成本太高，所以才有了长连接一说。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565577189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122548,"user_name":"sumi","can_delete":false,"product_type":"c1","uid":1253691,"ip_address":"","ucode":"753E0F46956E90","user_header":"https://static001.geekbang.org/account/avatar/00/13/21/3b/904ec8ab.jpg","comment_is_top":false,"comment_ctime":1565421440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565421440","product_id":100032701,"comment_content":"1. IPv4、IPv6、本地套接字格式以及通用地址套接字都有表示地址簇的字段，通过该字段就能清楚的了解到该socket所对应的网络协议了<br>2. IPv4和IPv6的的套接字包含ip地址和端口号，ip地址用来识别主机，端口号对应的就是主机运行的程序。如果一个程序想将自身的服务暴露到网络上就必须使用端口号，而本地套接字的目的是用于主机进程间通信的，故而不需要使用到端口，简单地使用本地文件就可以进行数据的传递，这样也更有效率，所以本地套接字不需要端口号这样的机制","like_count":0},{"had_liked":false,"id":122514,"user_name":"衬衫的价格是19美元","can_delete":false,"product_type":"c1","uid":1397631,"ip_address":"","ucode":"655F925451F772","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","comment_is_top":false,"comment_ctime":1565412720,"is_pvip":false,"replies":[{"id":"45166","content":"那还是走的网络通信协议栈，只不过是通过本地localhost(127.0.0.1)来进行通信。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565578031,"ip_address":"","comment_id":122514,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565412720","product_id":100032701,"comment_content":"关于本地通信不需要端口号还是不太明白。如果同一台机器上运行了两个程序，比如redis服务端和redis客户端，我们在建立客户端到服务端的时候也是要指定端口号的。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462284,"discussion_content":"那还是走的网络通信协议栈，只不过是通过本地localhost(127.0.0.1)来进行通信。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565578031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122118,"user_name":"Z12","can_delete":false,"product_type":"c1","uid":1118159,"ip_address":"","ucode":"59F5E62F67FFDC","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/cf/bfa0dc80.jpg","comment_is_top":false,"comment_ctime":1565307161,"is_pvip":false,"replies":[{"id":"45134","content":"这是从编程角度来理解，不是从数据收-发角度来理解的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575732,"ip_address":"","comment_id":122118,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565307161","product_id":100032701,"comment_content":"老师，那张核心的图不是很理解？就是客户端和服务器从从自身的读和写都有画线连过去，我的理解是客户端的读应该和服务器的写连接，客户端的写应该和客户端的读连接，但是这个图中，自身的写和读又连在一起，感觉有点奇怪","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462107,"discussion_content":"这是从编程角度来理解，不是从数据收-发角度来理解的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121996,"user_name":"高超","can_delete":false,"product_type":"c1","uid":1590108,"ip_address":"","ucode":"FAC33284D2A9BB","user_header":"https://static001.geekbang.org/account/avatar/00/18/43/5c/b9eafca8.jpg","comment_is_top":false,"comment_ctime":1565266555,"is_pvip":false,"replies":[{"id":"45126","content":"可以从网上下载 https:&#47;&#47;www.gnu.org&#47;software&#47;libc&#47;，目录还是比较容易识别的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575501,"ip_address":"","comment_id":121996,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565266555","product_id":100032701,"comment_content":"老师能不能给下 glibc 中对应代码所在的文件路径啊？找的有点费劲","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462049,"discussion_content":"可以从网上下载 https://www.gnu.org/software/libc/，目录还是比较容易识别的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121947,"user_name":"彩色的沙漠","can_delete":false,"product_type":"c1","uid":1116183,"ip_address":"","ucode":"19A0975A5E69EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","comment_is_top":false,"comment_ctime":1565254845,"is_pvip":true,"replies":[{"id":"44770","content":"感谢纠正","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565259436,"ip_address":"","comment_id":121947,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565254845","product_id":100032701,"comment_content":"文中“实际上 PF_ 的意思是 Protocal Family”,Protocal-&gt;Protocol","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462018,"discussion_content":"感谢纠正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565259436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121945,"user_name":"啦啦的小猪","can_delete":false,"product_type":"c1","uid":1134766,"ip_address":"","ucode":"13352B41450925","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/ae/11dad6f3.jpg","comment_is_top":false,"comment_ctime":1565253642,"is_pvip":false,"replies":[{"id":"45119","content":"多思考，多实践，别听过就算了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575317,"ip_address":"","comment_id":121945,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565253642","product_id":100032701,"comment_content":"留言只是表明自己看了这节的内容，但是问题确实回答不上来。老师讲的很好，我下去再找找资料多思考","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462017,"discussion_content":"多思考，多实践，别听过就算了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121901,"user_name":"sucy","can_delete":false,"product_type":"c1","uid":1619773,"ip_address":"","ucode":"62B102A83EDC32","user_header":"https://static001.geekbang.org/account/avatar/00/18/b7/3d/7ca5cb63.jpg","comment_is_top":false,"comment_ctime":1565246460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565246460","product_id":100032701,"comment_content":"声音好听， 有电台主持人的赶脚","like_count":0},{"had_liked":false,"id":121898,"user_name":"满怀","can_delete":false,"product_type":"c1","uid":1483113,"ip_address":"","ucode":"EFAC662A37D684","user_header":"https://static001.geekbang.org/account/avatar/00/16/a1/69/0ddda908.jpg","comment_is_top":false,"comment_ctime":1565246360,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565246360","product_id":100032701,"comment_content":"打卡！加油！","like_count":0},{"had_liked":false,"id":121892,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1565245125,"is_pvip":false,"replies":[{"id":"45118","content":"本地套接字其实很多场合很有用的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575285,"ip_address":"","comment_id":121892,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565245125","product_id":100032701,"comment_content":"第一问:都有地址簇和ip地址，大概是为了兼容把！<br>第二问:本来进行猜想因为是本机并且保留端口,但是一想又不对最后百度出和自己的总结得出以下答案<br>本地套接字主要是为了不同进程间的通信他和网络socket不同，不需要经过网络协议栈,他被绑定在一个系统文件上,不需要打包拆包、计算校验和、维护序号和应答等，只是将应用层数据从一个进程拷贝到另一个进程，有点像文件的读写和pipe管道的读写,但是他是本地的进行读写所以不会存在网络上的延迟,丢包等问题也很可靠,并且该socket文件由bind函数创建，如果bind时文件已经存在则会出错<br>本章提到了地址簇然后也简单的提了一下协议簇但是对协议簇的了解，仅仅停留在有这个东西上,然后收获最大的是本地套接字相关知识<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461992,"discussion_content":"本地套接字其实很多场合很有用的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121694,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1565184726,"is_pvip":false,"replies":[{"id":"45111","content":"可以稍微看下C语言的指针和结构体，其实不难的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575071,"ip_address":"","comment_id":121694,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565184726","product_id":100032701,"comment_content":"不怕人笑话 我从来没系统地上过网络编程课 希望能借老师的这个专栏让自己认识一下网络编程 能学好网络编程最好<br><br>啊  老师像我们从来没用c语言写过代码的人 后续的实战章节怎么办啊 ","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461906,"discussion_content":"可以稍微看下C语言的指针和结构体，其实不难的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121527,"user_name":"_你说了不算","can_delete":false,"product_type":"c1","uid":1185159,"ip_address":"","ucode":"212F890565FE5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/87/d22d8c3e.jpg","comment_is_top":false,"comment_ctime":1565153140,"is_pvip":false,"replies":[{"id":"44809","content":"Close或者shutdown或者exit,完成套接字资源的关闭和清理","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565275996,"ip_address":"","comment_id":121527,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565153140","product_id":100032701,"comment_content":"老师好，文中提到“操作系统内核此时会通过原先的连接链路向服务器端发送一个 FIN 包，服务器收到之后执行被动关闭”。这里服务器执行被动关闭指对是什么呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461838,"discussion_content":"Close或者shutdown或者exit,完成套接字资源的关闭和清理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565275996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121512,"user_name":"莫珣","can_delete":false,"product_type":"c1","uid":1117933,"ip_address":"","ucode":"CAFE6F2AC5C177","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/ed/1c662e93.jpg","comment_is_top":false,"comment_ctime":1565149695,"is_pvip":false,"replies":[{"id":"44811","content":"看你是数据流还是数据报，如果是数据流，我不认为第二个服务器绑定到相同的文件路径会成功，第二个客户端向同一个服务器端connect也会失败的，而对于数据报，确实可能两个客户端往同一个文件路径发送数据，这其实和udp的语意是一致的<br><br>后面我会讲到本地套机字的细节，欢迎再交流","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565276264,"ip_address":"","comment_id":121512,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1565149695","product_id":100032701,"comment_content":"第一个问题，三种套接字都有两个必要的要素，地址族和地址，它们提供了确定一个地址的必要信息。比如我要知道某个人的家庭地址，首先我要知道他是哪个省的，然后知道她的具体地址才能确定他正确的地理位置。如果不知道他是哪个省而只知道小的地址，那么恰好和其它地方重复了怎么办？所以地址族，解决的是这个地址的适用范围问题。<br><br>第二个问题，评论里有人说了Linux的设计哲学是一切皆文件，但我认为此答案不够完整。地址初始化传入的应该是一个socket文件的路径。这样两个进程之间就可以通过这个文件进行数据交换了，你可以把它想象为一个命名管道，或者干脆就是交换数据的普通文件，A进城往里面写数据，B进程从里面读数据。<br><br>针对问题2，有几个疑惑，第一个：一个程序A可以有多个进程（A1，A2,A3），程序B也能有多个进程（B1,B2,B3），但进程之间通过文件进行数据交换，可是文件只有一个实体。那么我原本希望的是A1和B1互换数据，A2和B2互换数据，但是当这4个进程同时存在的时候，A1的数据岂不是B1和B2都能收到了？除非说为每一对进程单独创建一份socket文件。第二个问题，当进程A和进程B需要双向通信时该怎么办。<br><br>本地socket的理解以及基于此理解产生的疑问，不知道对不对，敬请指正，谢谢～","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461829,"discussion_content":"看你是数据流还是数据报，如果是数据流，我不认为第二个服务器绑定到相同的文件路径会成功，第二个客户端向同一个服务器端connect也会失败的，而对于数据报，确实可能两个客户端往同一个文件路径发送数据，这其实和udp的语意是一致的\n\n后面我会讲到本地套机字的细节，欢迎再交流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565276264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1593363,"avatar":"https://static001.geekbang.org/account/avatar/00/18/50/13/104d9501.jpg","nickname":"另一半棉花糖","note":"","ucode":"C11266794FBA5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5288,"discussion_content":"A1与B1通信的时候可以指定一个路径名，A1与B2通信的时候可以指定另一个路径名，A2与B1通信则使用第三个路径。这是建立在，你完全知道总共有多少个进程，每个进程都要与哪些进程相互通信的基础上的。\n\n如果你只想让A1在同一个路径上与B1和B2通信，那么就需要设计写时互斥，让B1和B2写入的东西不能混杂；并且还要设计一个数据格式，至少能区分该条消息是由哪个客户端写入的，比如规定消息的前4个字节必须是写入该消息的进程号，消息的负载则从第五个字节开始。也就是需要你设计一个通信协议了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566136529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121500,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1565148991,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1565148991","product_id":100032701,"comment_content":"渐入佳境","like_count":0},{"had_liked":false,"id":121499,"user_name":"ly","can_delete":false,"product_type":"c1","uid":1221628,"ip_address":"","ucode":"5E2B85252DABF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/fc/379387a4.jpg","comment_is_top":false,"comment_ctime":1565148891,"is_pvip":false,"replies":[{"id":"45110","content":"赞","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575048,"ip_address":"","comment_id":121499,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565148891","product_id":100032701,"comment_content":"关于第2道题：<br>根据文章得出，本地套接字是操作系统内部的通信，据我所知，socket其实就是对应系统的一个文件（文件描述符），系统内部通信可能就只需要一个文件路径就能知道对方在哪里，IP和端口就不是那么必要；IPv4和ipv6套接字之所以需要IP和端口，因为对方机器可能就是本机、也可能是其他网络的机器，另外tcp&#47;ip协议又是以IP地址来作为寻址的，以端口来找应用程序。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461821,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121492,"user_name":"ly","can_delete":false,"product_type":"c1","uid":1221628,"ip_address":"","ucode":"5E2B85252DABF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/fc/379387a4.jpg","comment_is_top":false,"comment_ctime":1565147800,"is_pvip":false,"replies":[{"id":"45108","content":"这是因为客户端程序A已经断开，而服务器端此时仍然不知道，继续发送数据给A，A的协议栈一看没有对应数据的TCP连接，发送一个RST包，告诉服务器端连接已经重置了，此时内核协议栈向read调用返回一个RST异常。<br><br>在后面的章节我会详细讲到这部分内容。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565575013,"ip_address":"","comment_id":121492,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565147800","product_id":100032701,"comment_content":"通过java程序看到的现象：<br>1. 初始化1个ServerSocket(8888端口)，java底层会执行 bind0() 和 listen0()。<br>2. 初始化完以后，就能够接收客户端A的请求(三次握手),也可以接收数据(PSH+ACK)，服务端也可以返回ACK确认消息给客户端。(通过WireShark观察到的)<br>3-1. 情况1：接着客户端A不断开，服务端调用accept()方法，就可以拿到客户端A的socket，然后调用read()就可以马上读取刚刚发送过的所有数据,当然后面就正常通信。<br>3-2. 情况2：接着客户端A程序退出，服务端调用accept()方法，依然可以拿到客户端A的socket，然后调用read()，但是此时会报错(Connection reset)。<br>个人对上面的情况的理解，请老师点评：<br>当第1步执行了初始化ServerSocket()的时候，就能正常三次握手、接收客户端的消息了，因为服务端已经打开了服务端的socket以供连接；<br>接着客户端请求过来的socket和其发送的data应该是在操作系统的缓冲区中，只是服务端还没有accept()去取socket;<br>接着3-1的情况（客户端不断开），服务端用accept()的时候，发现操作系统缓冲区中存在一个socket，就直接返回这个socket，读取数据也是直接读取此socket在缓冲区中的数据。<br>对于3-2的情况（客户端退出），服务端用accept()的时候，发现操作系统缓冲区中存在一个socket，就直接返回这个socket，读取数据发现此socket已经关闭，read()方法就报错。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461815,"discussion_content":"这是因为客户端程序A已经断开，而服务器端此时仍然不知道，继续发送数据给A，A的协议栈一看没有对应数据的TCP连接，发送一个RST包，告诉服务器端连接已经重置了，此时内核协议栈向read调用返回一个RST异常。\n\n在后面的章节我会详细讲到这部分内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565575013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121434,"user_name":"枕畔雪","can_delete":false,"product_type":"c1","uid":1258675,"ip_address":"","ucode":"F2932722CB7CC4","user_header":"https://static001.geekbang.org/account/avatar/00/13/34/b3/66a09d7e.jpg","comment_is_top":false,"comment_ctime":1565139765,"is_pvip":false,"replies":[{"id":"44644","content":"完美+1","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1565153254,"ip_address":"","comment_id":121434,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565139765","product_id":100032701,"comment_content":"远程访问需要IP和端口是为了确定服务端提供服务的进程。本地访问不需要那么繁琐直接使用文件系统访问资源","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461789,"discussion_content":"完美+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565153254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}