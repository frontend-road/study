{"id":73511,"title":"05 | 递归（上）：泛化数学归纳，如何将复杂问题简单化？","content":"<p>你好，我是黄申。上一节的结尾，我们用递归模拟了数学归纳法的证明。同时，我也留下了一个问题：<strong>既然递归的函数值返回过程和基于循环的迭代法一致，我们直接用迭代法不就好了，为什么还要用递归的数学思想和编程方法呢</strong>？这是因为，在某些场景下，递归的解法比基于循环的迭代法更容易实现。这是为什么呢？我们继续来看舍罕王赏麦的故事。</p><h2>如何在限定总和的情况下，求所有可能的加和方式？</h2><p>舍罕王和他的宰相西萨·班·达依尔现在来到了当代。这次国王学乖了，他对宰相说：“这次我不用麦子奖赏你了，我直接给你货币。另外，我也不用棋盘了，我直接给你一个固定数额的奖赏。”</p><p>宰相思考了一下，回答道：“没问题，陛下，就按照您的意愿。不过，我有个小小的要求。那就是您能否列出所有可能的奖赏方式，让我自己来选呢？假设有四种面额的钱币，1元、2元、5元和10元，而您一共给我10元，那您可以奖赏我1张10元，或者10张1元，或者5张1元外加1张5元等等。如果考虑每次奖赏的金额和先后顺序，那么最终一共有多少种不同的奖赏方式呢？”</p><p>让我们再次帮国王想想，如何解决这个难题吧。这个问题和之前的棋盘上放麦粒有所不同，它并不是要求你给出最终的总数，而是<strong>在限定总和的情况下，求所有可能的加和方式。</strong>你可能会想，虽然问题不一样，但是求和的重复性操作仍然是一样的，因此是否可以使用迭代法？好，让我们用迭代法来试一下。</p><!-- [[[read_end]]] --><p>我还是使用迭代法中的术语，考虑k=1,2,3,…,n的情况。在第一步，也就是当n=1的时候，我们可以取四种面额中的任何一种，那么当前的奖赏就是1元、2元、5元和10元。当n=2的时候，奖赏的总和就有很多可能性了。如果第一次奖赏了1元，那么第二次有可能取1、2、5元三种面额（如果取10，总数超过了10元，因此不可能）。</p><p>所以，在第一次奖赏1元，第二次奖赏1元后，总和为2元；第一次奖赏1元，第二次奖赏2元后，总和为3元；第一次奖赏1元，第二次奖赏5元后，总和为6元。好吧，这还没有考虑第一次奖赏2元和5元的情况。我来画个图，从图中你就能发现这种可能的情况在快速地“膨胀”。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/61/761c7053947cc4340950200f8626e661.jpg?wh=1382*746\" alt=\"\"></p><p>你应该能看到，虽然迭代法的思想是可行的，但是如果用循环来实现，恐怕要保存好多中间状态及其对应的变量。说到这里，你是不是很容易就想到计算编程常用的<strong>函数递归</strong>？</p><p>在递归中，每次嵌套调用都会让函数体生成自己的局部变量，正好可以用来保存不同状态下的数值，为我们省去了大量中间变量的操作，极大地方便了设计和编程。</p><p>不过，这里又有新的问题了。之前用递归模拟数学归纳法还是非常直观的。可是，这里不是要计算一个最终的数值，而是要列举出所有的可能性。那应该如何使用递归来解决呢？上一节，我只是用递归编程体现了数学归纳法的思想，但是如果我们把这个思想泛化一下，那么递归就会有更多、更广阔的应用场景。</p><h2>如何把复杂的问题简单化？</h2><p>首先，我们来看，<strong>如何将数学归纳法的思想泛化成更一般的情况</strong>？数学归纳法考虑了两种情况：</p><ol>\n<li>\n<p>初始状态，也就是n=1的时候，命题是否成立；</p>\n</li>\n<li>\n<p>如果n=k-1的时候，命题成立。那么只要证明n=k的时候，命题也成立。其中k为大于1的自然数。</p>\n</li>\n</ol><p>将上述两点顺序更换一下，再抽象化一下，我写出了这样的递推关系：</p><ol>\n<li>\n<p>假设n=k-1的时候，问题已经解决（或者已经找到解）。那么只要求解n=k的时候，问题如何解决（或者解是多少）；</p>\n</li>\n<li>\n<p>初始状态，就是n=1的时候，问题如何解决（或者解是多少）。</p>\n</li>\n</ol><p>我认为这种思想就是将<strong>复杂的问题，每次都解决一点点，并将剩下的任务转化成为更简单的问题等待下次求解，如此反复，直到最简单的形式</strong>。回到开头的例子，我们再将这种思想具体化。</p><ol>\n<li>\n<p>假设n=k-1的时候，我们已经知道如何去求所有奖赏的组合。那么只要求解n=k的时候，会有哪些金额的选择，以及每种选择后还剩下多少奖金需要支付就可以了。</p>\n</li>\n<li>\n<p>初始状态，就是n=1的时候，会有多少种奖赏。</p>\n</li>\n</ol><p>有了这个思路，就不难写出这个问题的递归实现。我这里列一个基本的实现。</p><pre><code>import java.util.ArrayList;\n\npublic class Lesson5_1 {\n\t\n\tpublic static long[] rewards = {1, 2, 5, 10};\t// 四种面额的纸币\n\t\n\t/**\n    * @Description:\t使用函数的递归（嵌套）调用，找出所有可能的奖赏组合\n    * @param totalReward-奖赏总金额，result-保存当前的解\n    * @return void\n    */\n\t\n    public static void get(long totalReward, ArrayList&lt;Long&gt; result) {\n    \t\n    \t// 当totalReward = 0时，证明它是满足条件的解，结束嵌套调用，输出解\n    \tif (totalReward == 0) {\n    \t\tSystem.out.println(result);\n    \t return;\n     }\n    \t// 当totalReward &lt; 0时，证明它不是满足条件的解，不输出\n    \telse if (totalReward &lt; 0) {\n    \t\treturn;\n    \t} else {\n    \t\tfor (int i = 0; i &lt; rewards.length; i++) {\n    \t\t\tArrayList&lt;Long&gt; newResult = (ArrayList&lt;Long&gt;)(result.clone());\t// 由于有4种情况，需要clone当前的解并传入被调用的函数\n    \t\t\tnewResult.add(rewards[i]);\t\t\t\t\t\t// 记录当前的选择，解决一点问题\n    \t\t\tget(totalReward - rewards[i], newResult);\t\t// 剩下的问题，留给嵌套调用去解决\n    \t\t}\n    \t}\n    \t\n    }\n\n}\n</code></pre><p>我们测试一下总金额为10元的时候，有多少种解。</p><pre><code> public static void main(String[] args) {\n  \n  int totalReward = 10;\n  Lesson5_1.get(totalReward, new ArrayList&lt;Long&gt;());\n  \n }\n</code></pre><p>最终，程序运行后大致是这种结果：</p><pre><code>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n[1, 1, 1, 1, 1, 1, 1, 1, 2]\n[1, 1, 1, 1, 1, 1, 1, 2, 1]\n[1, 1, 1, 1, 1, 1, 2, 1, 1]\n[1, 1, 1, 1, 1, 1, 2, 2]\n...\n[5, 5]\n[10]\n</code></pre><p>这里面每一行都是一种可能。例如第一行表示分10次奖赏，每次1元；第二行表示分9次奖赏，最后一次是2元；以此类推。最终结果的数量还是挺多的，一共有129种可能。试想一下，如果总金额为100万的话，会有多少种可能啊！</p><p>这个代码还有几点需要留意的地方，我再来解释一下：</p><p>1.由于一共只有4种金额的纸币，所以无论是n=1的时候还是n=k的时候，我们只需要关心这4种金额对组合产生的影响，而中间状态和变量的记录和跟踪这些繁琐的事情都由函数的递归调用负责。</p><p>2.这个案例的限制条件不再是64个棋格，而是奖赏的总金额，因此判断嵌套调用是否结束的条件其实不是次数k，而是总金额。这个金额确保了递归不会陷入死循环。</p><p>3.我这里从奖赏的总金额开始，每次嵌套调用的时候减去一张纸币的金额，直到所剩的金额为0或者少于0，然后结束嵌套调用，开始返回结果值。当然，你也可以反向操作，从金额0开始，每次嵌套调用的时候增加一张纸币的金额，直到累计的金额达到或超过总金额。</p><h2>小结</h2><p><strong>递归和循环其实都是迭代法的实现，而且在某些场合下，它们的实现是可以相互转化的。</strong>但是，对于某些应用场景，递归确实很难被循环取代。我觉得主要有两点原因：</p><p>第一，递归的核心思想和数学归纳法类似，并更具有广泛性。这两者的类似之处体现在：<strong>将当前的问题化解为两部分：一个当前所采取的步骤和另一个更简单的问题。</strong></p><p><strong>1.一个当前所采取的步骤</strong>。这种步骤可能是进行一次运算（例如每个棋格里的麦粒数是前一格的两倍），或者做一个选择（例如选择不同面额的纸币），或者是不同类型操作的结合（例如今天讲的赏金的案例）等等。</p><p><strong>2.另一个更简单的问题</strong>。经过上述步骤之后，问题就会变得更加简单一点。这里“简单一点”，指运算的结果离目标值更近（例如赏金的总额），或者是完成了更多的选择（例如纸币的选择）。而“更简单的问题”，又可以通过嵌套调用，进一步简化和求解，直至达到结束条件。</p><p>我们只需要保证递归编程能够体现这种将复杂问题逐步简化的思想，那么它就能帮助我们解决很多类似的问题。</p><p>第二，递归会使用计算机的函数嵌套调用。而函数的调用本身，就可以保存很多中间状态和变量值，因此极大的方便了编程的处理。</p><p>正是如此，递归在计算机编程领域中有着广泛的应用，而不仅仅局限在求和等运算操作上。在下一节中，我将介绍如何使用递归的思想，进行“分而治之”的处理。</p><p><img src=\"https://static001.geekbang.org/resource/image/c5/63/c5dfb38f4310af08eb6b3d05006dbf63.jpg?wh=1242*1397\" alt=\"\"></p><h2>思考题</h2><p>一个整数可以被分解为多个整数的乘积，例如，6可以分解为2x3。请使用递归编程的方法，为给定的整数n，找到所有可能的分解（1在解中最多只能出现1次）。例如，输入8，输出是可以是1x8, 8x1, 2x4, 4x2, 1x2x2x2, 1x2x4, ……</p><p><span class=\"orange\">欢迎在留言区交作业，并写下你今天的学习笔记。你可以点击“请朋友读”，把今天的内容分享给你的好友，和他一起精进。</span></p>","comments":[{"had_liked":false,"id":51787,"user_name":"黄申","can_delete":false,"product_type":"c1","uid":1275061,"ip_address":"","ucode":"EE9AC074A322FF","user_header":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","comment_is_top":true,"comment_ctime":1545250182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"9.223372115709399e+18","product_id":100021201,"comment_content":"由于暂时无法追加回复，我这里再回复一下网友debugtalk<br><br>我看了Python的实现，果然很简介👍<br>奖金的题目没问题。整数的因子分解有点小瑕疵，少了一些可能。比如，输入8，少了<br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[2, 1, 2, 2]<br>","like_count":18},{"had_liked":false,"id":51463,"user_name":"杨景胜","can_delete":false,"product_type":"c1","uid":1005023,"ip_address":"","ucode":"1B4FB1326032B6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/df/6dfd3cde.jpg","comment_is_top":false,"comment_ctime":1545185764,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"108919368164","product_id":100021201,"comment_content":"从递归的两个原则到代码实现有点跳跃， 想了半天还是没想明白这个代码的逻辑啊~","like_count":26,"discussions":[{"author":{"id":1072298,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5c/aa/667177be.jpg","nickname":"彭领","note":"","ucode":"32D90DF9FFCB12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394,"discussion_content":"#!/usr/bin/env python3\n\n&#34;&#34;&#34;\n没有完全按题目实现 去除了重复的、带1无意义的组合\n求解过程  12/2 = 6 , => 6/2=3 , 3 = 3 => [2,2,3]\n&#34;&#34;&#34;\ndef factorize(number,l=[]):\n    start = 2\n    if l :\n        start = max(l)  # 例如 12的分解 上次迭代的结果为 l = [3] 则本地寻找的范围 从3~12即可\n    for n in range(start,number+1):\n        tmpList = list(l)  # 每一个tmpList 代表了一种尝试你的路径\n        if number == n:  # 如果遍历的数n正好等于剩余的数值 则找到了解 说明这条路径是可行的 打印完成本分支的迭代\n            if len(tmpList) == 0:\n                tmpList.append(1)\n            tmpList.append(n)\n            print(&#34;x&#34;.join(map(str,tmpList)))\n        elif number % n == 0:  # 如果 剩余数字 能被n整除 说明 n是 该数字的一个因子\n            new_number = int(number/n)  # 把除剩下的数 继续迭代\n            tmpList.append(n)\n\n            factorize(new_number,tmpList)\n        else:  # 如果不能整除 说明这条路走错了 继续尝试其他路径\n            continue\n\n\nfactorize(12)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561530355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1072298,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5c/aa/667177be.jpg","nickname":"彭领","note":"","ucode":"32D90DF9FFCB12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380,"discussion_content":"#!/usr/bin/env python3\nmoneys = (1, 2, 5, 10)\ncount = 0\n\n\n\ndef find(target, res=[]):\n    global count\n    for money in moneys:  # 循环面值 进行尝试\n        tmpres = list(res)  # 每次构造一个新的list防止对后续的面值形成干扰\n        if money > target:  # 如果面值大于要凑的目标 说明这个面值无效 继续尝试下一个\n            continue\n        elif money == target:  # 如果面值恰好等于目标，说明凑数打成，没必要再迭代，打印出结果\n            count += 1;\n            tmpres.append(money)\n            print(&#34;[{}] {}&#34;.format(count, tmpres))\n            break\n        else:  # 面值不足 说明还有后续尝试的可能 将此面值加入列表 进入迭代尝试\n            newtarget = target - money\n            tmpres.append(money)\n            find(newtarget, tmpres)\n\n\nfind(10)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561516908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51638,"user_name":"李尧","can_delete":false,"product_type":"c1","uid":1119539,"ip_address":"","ucode":"4E85C9F4947B2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/33/5be2710e.jpg","comment_is_top":false,"comment_ctime":1545213356,"is_pvip":false,"replies":[{"id":"18756","content":"循环的时候不能少了1，可以在结果中判断是否已经涵盖1，我稍微修改了一下<br>public static void recursion(long total, ArrayList&lt;Long&gt; result) {<br><br>\t\tif (total == 1) {<br>\t\t\tif (!result.contains(1L)) result.add(1L);<br>\t\t\tSystem.out.println(result);<br>\t\t\treturn;<br>\t\t} else {<br>\t\t\tfor (long i = 1; i &lt;= total; i++) {<br>\t\t\t\tif ((i == 1) &amp;&amp; result.contains(1L)) continue;<br>\t\t\t\tArrayList&lt;Long&gt; newList = (ArrayList&lt;Long&gt;) (result.clone());<br>\t\t\t\tnewList.add(Long.valueOf(i));<br>\t\t\t\tif (total % i != 0) {<br>\t\t\t\t\tcontinue;<br>\t\t\t\t}<br>\t\t\t\trecursion(total &#47; i, newList);<br>\t\t\t}<br>\t\t}<br>\t}","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545249350,"ip_address":"","comment_id":51638,"utype":1}],"discussion_count":6,"race_medal":0,"score":"57379788204","product_id":100021201,"comment_content":" 思考题：请大神帮忙看下，输出少了个  [1,8]<br>输出：[2, 2, 2, 1] [2, 4, 1][4, 2, 1][8, 1]<br><br>import java.util.ArrayList;<br><br>&#47;**<br> * @Auther: yli<br> * @Date: 2018&#47;12&#47;19 17:19<br> * @Description:<br> *&#47;<br>public class Iteration {<br><br>    public static void recursion(long total, ArrayList&lt;Long&gt; result){<br><br>        if (total == 1){<br>            result.add(1L);<br>            System.out.println(result);<br>            return;<br>        }else {<br>            for(long i = 2; i &lt;= total; i ++){<br>                ArrayList&lt;Long&gt; newList = (ArrayList&lt;Long&gt;)(result.clone());<br>                newList.add(Long.valueOf(i));<br>                if(total%i !=0){<br>                   continue;<br>                }<br>                recursion(total&#47;i, newList);<br>            }<br>        }<br>    }<br><br>    public static void main(String[] args){<br>        long total = 8;<br>        recursion(total, new ArrayList&lt;Long&gt;());<br>    }<br>}","like_count":13,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433546,"discussion_content":"循环的时候不能少了1，可以在结果中判断是否已经涵盖1，我稍微修改了一下\npublic static void recursion(long total, ArrayList&amp;lt;Long&amp;gt; result) {\n\n\t\tif (total == 1) {\n\t\t\tif (!result.contains(1L)) result.add(1L);\n\t\t\tSystem.out.println(result);\n\t\t\treturn;\n\t\t} else {\n\t\t\tfor (long i = 1; i &amp;lt;= total; i++) {\n\t\t\t\tif ((i == 1) &amp;amp;&amp;amp; result.contains(1L)) continue;\n\t\t\t\tArrayList&amp;lt;Long&amp;gt; newList = (ArrayList&amp;lt;Long&amp;gt;) (result.clone());\n\t\t\t\tnewList.add(Long.valueOf(i));\n\t\t\t\tif (total % i != 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\trecursion(total / i, newList);\n\t\t\t}\n\t\t}\n\t}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545249350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359881,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqqcz9HKr8r3kibiaxve9icIuz1qKv2PAhCr7tO6tjMVtsDa2VBIZZicfRxzXf1DDeEQTaM45JSLnGibdQ/132","nickname":"小海","note":"","ucode":"22148B7E971ACB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2827,"discussion_content":"作者的修改，少了[2,4] 等这种不包含1的情况，可以在total ==1 ，并且result不包含1时，输出result和add 1后的result。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1563959303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1353491,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a7/13/0d33054e.jpg","nickname":"拿什么拯救TG","note":"","ucode":"1DD7202CED944F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359881,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqqcz9HKr8r3kibiaxve9icIuz1qKv2PAhCr7tO6tjMVtsDa2VBIZZicfRxzXf1DDeEQTaM45JSLnGibdQ/132","nickname":"小海","note":"","ucode":"22148B7E971ACB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333503,"discussion_content":"确实，运行一遍后有这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607531069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2827,"ip_address":""},"score":333503,"extra":""}]},{"author":{"id":1116196,"avatar":"https://static001.geekbang.org/account/avatar/00/11/08/24/1d3bafaf.jpg","nickname":"Spring coming","note":"","ucode":"9E01F2D987D08B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576630,"discussion_content":"if (total == 1 &amp;&amp; result.size()&gt;1)  不然会输出 [8]单个的这种情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655712491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004264,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/e8/92a2e66d.jpg","nickname":"第二少","note":"","ucode":"4A09D1E7589F67","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401240,"discussion_content":"其实1这个因数可以排除掉，放在里面意义不大，每一组因数都可以加一个1进去，结果不变","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633610602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1268738,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","nickname":"teddytyy","note":"","ucode":"E1569D81A4154E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69332,"discussion_content":"if (total % i != 0) 的判断往前放一点比较好吧，否则有些情况newlist的创建操作是多余的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575281364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51550,"user_name":"debugtalk","can_delete":false,"product_type":"c1","uid":1005452,"ip_address":"","ucode":"D6F0E57E79808C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/8c/8fba0bdd.jpg","comment_is_top":false,"comment_ctime":1545198025,"is_pvip":false,"replies":[{"id":"18753","content":"很棒 我稍后sync下来看","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545240485,"ip_address":"","comment_id":51550,"utype":1}],"discussion_count":2,"race_medal":0,"score":"53084805577","product_id":100021201,"comment_content":"Python 实现赏金问题：https:&#47;&#47;github.com&#47;debugtalk&#47;geektime-notes&#47;blob&#47;master&#47;programmers-mathematics&#47;chapter5.md<br>Python 实现思考题：https:&#47;&#47;github.com&#47;debugtalk&#47;geektime-notes&#47;blob&#47;master&#47;programmers-mathematics&#47;chapter5.py","like_count":12,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433509,"discussion_content":"很棒 我稍后sync下来看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545240485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1338064,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6a/d0/af2e16f1.jpg","nickname":"約禮","note":"","ucode":"98C315C59EAEC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14509,"discussion_content":"404？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568768455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51520,"user_name":"文刂 氵共 超","can_delete":false,"product_type":"c1","uid":1282813,"ip_address":"","ucode":"C2CE1512D23012","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","comment_is_top":false,"comment_ctime":1545193134,"is_pvip":false,"replies":[{"id":"18757","content":"回答很棒，下次可以将运行结果也贴出来👍","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545251987,"ip_address":"","comment_id":51520,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40199898798","product_id":100021201,"comment_content":"整数分解 - C++代码<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>#include &lt;algorithm&gt;<br><br>using namespace std;<br><br>&#47;&#47; 输出函数<br>void PrintResult(vector&lt;int&gt; &amp;Result)<br>{<br>  for (size_t i = 0; i &lt; Result.size(); ++i)<br>  {<br>    cout &lt;&lt; Result[i] &lt;&lt; &quot;  &quot;;<br>  }<br>  cout &lt;&lt; endl;<br>}<br><br>&#47;&#47;数组中是否存在某值<br>bool IsExit(vector&lt;int&gt; &amp;Result, int value)<br>{<br>  vector&lt;int&gt;::iterator result = std::find(Result.begin(), Result.end(), value);<br>  if (result == Result.end())<br>  {<br>    return false;<br>  } <br>  else <br>  {<br>    return true;<br>  }<br>}<br><br>&#47;&#47;整数分解<br>void RecursionAlgo(int Num, vector&lt;int&gt; &amp;Result)<br>{<br>  if (Num == 1)<br>  {<br>    PrintResult(Result);<br>    return;<br>  }<br>  for (int i = 1; i &lt;= Num; ++i)<br>  {<br>    &#47;&#47;判断1是否在解中<br>    if (IsExit(Result, 1))<br>    {<br>      if (i == 1)<br>      {<br>        continue;<br>      }<br>    }<br>    if (Num%i == 0)<br>    {<br>      vector&lt;int&gt; newResult = Result;<br>      newResult.push_back(i);<br><br>      RecursionAlgo(Num&#47;i, newResult);<br>    }<br>  }<br>}<br><br>int _tmain(int argc, _TCHAR* argv[])<br>{<br>  int Totalmoney = 10;<br>  vector&lt;int&gt; Result;<br>\t<br>  RecursionAlgo(Totalmoney, Result);<br>  return 0;<br>}","like_count":9,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433495,"discussion_content":"回答很棒，下次可以将运行结果也贴出来👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545251987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197569,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1585385780,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"35945124148","product_id":100021201,"comment_content":"茶艺师学编程<br><br><br>一般人说到泡茶，大多数会条件反射般的<br><br>1、拿出茶叶<br><br>2、放进杯子<br><br>3、加入开水<br><br>4、等一下，喝<br><br>这样从前往后按步骤来的思维方法，正是人类“无师自通”的递推思维。<br><br><br>而经过训练的茶艺师会这么做<br><br>1、先看要泡什么茶<br><br>2、根据要什么茶来选定用什么器皿，假如要泡龙井绿茶，那就拿出直身玻璃杯<br><br>3、这时怎么泡也决定了，就是先把玻璃杯温起来，然后放入龙井，先加一点水润一润，再把水加满，其中水温不能太烫。<br><br>4、等一下，喝<br><br>想这样根据结果倒逼步骤，从上往下的顶层设计，很明显以上面的方法顺序相反。同学们看到这肯定会得意的说，“你们（茶艺师）在不经意间就使用了递归思想。”<br><br><br><br>","like_count":8},{"had_liked":false,"id":55079,"user_name":"方得始终","can_delete":false,"product_type":"c1","uid":1229356,"ip_address":"","ucode":"6FBEDDACC32EA1","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/2c/900cb4f0.jpg","comment_is_top":false,"comment_ctime":1546038648,"is_pvip":false,"replies":[{"id":"20066","content":"同时考虑了1出现和不出现的情况 👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546211034,"ip_address":"","comment_id":55079,"utype":1}],"discussion_count":6,"race_medal":0,"score":"31610809720","product_id":100021201,"comment_content":"参考老师和其他同学的留言, 下面是Pythoni实现的思考题, 应该是个较为简洁的版本.<br>import copy<br><br>def prod_factors(num, result=[]):<br>    if num == 1:<br>        print(&#39;x&#39;.join([str(_) for _ in result]))<br>        if 1 not in result:<br>            result.append(1)<br>            print(&#39;x&#39;.join([str(_) for _ in result]))<br>    elif num &lt; 0:<br>        return<br>    else:<br>        for i in range(1, num+1):<br>            if (i == 1 and i not in result) or (i !=1 and num % i == 0):<br>                newresult = copy.copy(result)<br>                newresult.append(i)<br>                prod_factors(num&#47;i, newresult)<br><br><br>prod_factors(8)<br>1x2x2x2<br>1x2x4<br>1x4x2<br>1x8<br>2x1x2x2<br>2x1x4<br>2x2x1x2<br>2x2x2<br>2x2x2x1<br>2x4<br>2x4x1<br>4x1x2<br>4x2<br>4x2x1<br>8<br>8x1<br>","like_count":7,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434667,"discussion_content":"同时考虑了1出现和不出现的情况 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546211034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2631573,"avatar":"https://static001.geekbang.org/account/avatar/00/28/27/95/095ad3c3.jpg","nickname":"溜溜球","note":"","ucode":"BBA5E4405D9902","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":563818,"discussion_content":"ef prod_factors(num, result=[]):\n    if num == 1:\n        if 1 not in result:\n            result = [*result ,1]\n        print(&#39;x&#39;.join([str(_) for _ in result]))\n    else:\n        for i in range(1, num+1):\n            if (i == 1 and i not in result) or (i !=1 and num % i == 0):\n                prod_factors(num//i, [*result,i])","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650084315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1267661,"avatar":"https://static001.geekbang.org/account/avatar/00/13/57/cd/9235341a.jpg","nickname":"庄风","note":"","ucode":"21FC66BA9E7EBB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385363,"discussion_content":"输出时，需要判断一下长度至少是2，这样就能排除单个8。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627014382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2624993,"avatar":"","nickname":"Geek_524097","note":"","ucode":"B3363D25D04AB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375493,"discussion_content":"多了个8","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621688831,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2353640,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e9/e8/de194220.jpg","nickname":"从容","note":"","ucode":"A20F2A2BB2DA54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334344,"discussion_content":"num %i==0\n\n为什么要num取余i为零呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607827794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1177167,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f6/4f/f8464167.jpg","nickname":"阿琐","note":"","ucode":"5537036AA263FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2353640,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e9/e8/de194220.jpg","nickname":"从容","note":"","ucode":"A20F2A2BB2DA54","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":401991,"discussion_content":"除得尽才往下走","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633779047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":334344,"ip_address":""},"score":401991,"extra":""}]}]},{"had_liked":false,"id":51685,"user_name":"松原","can_delete":false,"product_type":"c1","uid":1342471,"ip_address":"","ucode":"6BEC86963D1870","user_header":"https://static001.geekbang.org/account/avatar/00/14/7c/07/e176e375.jpg","comment_is_top":false,"comment_ctime":1545223925,"is_pvip":false,"replies":[{"id":"18728","content":"确实两者的递推方向是不一样的，不过递归在计算机的实现中，是使用的函数调用，在满足条件后，函数开始逐级返回，这时候又是正向递推了，所以我觉得这也是从1到n","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545230845,"ip_address":"","comment_id":51685,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27315027701","product_id":100021201,"comment_content":"黄老师，这句“递归和循环其实都是迭代法的实现”我不太理解。<br>如果递归和循环都属于迭代法，那么就是说递归是从属于迭代法的。而我所理解的迭代法的核心是从1到n的递推，而递归是从n到1的逐步求解的过程，两者应该是并列的关系。希望老师能解答我的这个困惑。","like_count":6,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433571,"discussion_content":"确实两者的递推方向是不一样的，不过递归在计算机的实现中，是使用的函数调用，在满足条件后，函数开始逐级返回，这时候又是正向递推了，所以我觉得这也是从1到n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545230845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52405,"user_name":"hallon","can_delete":false,"product_type":"c1","uid":1038981,"ip_address":"","ucode":"BB7CC8095B9CAE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/da/85/01dafc9d.jpg","comment_is_top":false,"comment_ctime":1545376474,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23020212954","product_id":100021201,"comment_content":"思考题，用js实现如下：<br>function mul(totalReward, result) {<br>    &#47;&#47;i从自身开始循环到1，每次递减1<br>    for(var i=totalReward; i&gt;0; i--) {<br>        if(totalReward % i == 0) {&#47;&#47;能整除i<br>            var newResult = result.concat();<br>            newResult.push(i);             <br>            if(i == totalReward) {&#47;&#47;i为自身的情况，结果就是[totalReward，1]<br>                newResult.push(1);<br>                console.log(newResult);<br>            } else if(i == 1) {&#47;&#47;i为1的情况，结果就是[1，totalReward]<br>                newResult.push(totalReward);<br>                console.log(newResult);<br>            }else {&#47;&#47;除以i之后，继续分解<br>                 mul(totalReward&#47;i, newResult);<br>            }<br>        }           <br>    }<br>}<br>测试：数字6和8<br>var b = [];<br>mul(6, b);<br>mul(8, b);<br>结果如下：<br>[ 6, 1 ]<br>[ 3, 2, 1 ]<br>[ 3, 1, 2 ]<br>[ 2, 3, 1 ]<br>[ 2, 1, 3 ]<br>[ 1, 6 ]<br><br>[ 8, 1 ]<br>[ 4, 2, 1 ]<br>[ 4, 1, 2 ]<br>[ 2, 4, 1 ]<br>[ 2, 2, 2, 1 ]<br>[ 2, 2, 1, 2 ]<br>[ 2, 1, 4 ]<br>[ 1, 8 ]","like_count":5},{"had_liked":false,"id":75196,"user_name":"Sawyer","can_delete":false,"product_type":"c1","uid":1011280,"ip_address":"","ucode":"34DC7FBB01FE6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6e/50/c85284da.jpg","comment_is_top":false,"comment_ctime":1552362203,"is_pvip":false,"replies":[{"id":"27550","content":"这里作为教学案例，可以遍历所有情况，包括4x2和2x4。至于1，需要特殊处理一下，你可以思考看看，或者看看之前读者的留言","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1552408465,"ip_address":"","comment_id":75196,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14437264091","product_id":100021201,"comment_content":"老师好，我实现了一个算法，但是没有打印出来1的情况。<br>还有个问题就是，如果使用老师的示例输入8，结果既有 2x4，又有 4x2 这不是重复了吗？<br>static void getFactorization(long product, ArrayList&lt;Long&gt; result) {<br>    for (int i = 2; i &lt;= product &#47; 2; i++) {<br>        if (0 == product % i) {<br>            ArrayList&lt;Long&gt; newResult = (ArrayList&lt;Long&gt;) result.clone();<br>            newResult.add((long) i);<br>            getFactorization(product &#47; i, newResult);<br>            newResult.add(product &#47; i);<br>            System.out.println(newResult);<br>        }<br>    }<br>}","like_count":3,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442818,"discussion_content":"这里作为教学案例，可以遍历所有情况，包括4x2和2x4。至于1，需要特殊处理一下，你可以思考看看，或者看看之前读者的留言","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552408465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51959,"user_name":"debugtalk","can_delete":false,"product_type":"c1","uid":1005452,"ip_address":"","ucode":"D6F0E57E79808C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/8c/8fba0bdd.jpg","comment_is_top":false,"comment_ctime":1545281966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14430183854","product_id":100021201,"comment_content":"感谢 Sean 的指正，之前整数因子分解的解答的确存在问题，没有完整考虑整数 1 在各种位置的情况。<br>现已更正：https:&#47;&#47;github.com&#47;debugtalk&#47;geektime-notes&#47;blob&#47;master&#47;programmers-mathematics&#47;chapter5.py","like_count":3},{"had_liked":false,"id":51494,"user_name":"杨景胜","can_delete":false,"product_type":"c1","uid":1005023,"ip_address":"","ucode":"1B4FB1326032B6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/df/6dfd3cde.jpg","comment_is_top":false,"comment_ctime":1545189677,"is_pvip":false,"replies":[{"id":"18758","content":"如果循环从2开始，可能会漏掉一些情况，请参考为我给另一位网友李尧的回复","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545252186,"ip_address":"","comment_id":51494,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14430091565","product_id":100021201,"comment_content":"&#47;&#47;因数分解<br>public static void getMultiFactors(long multi,ArrayList&lt;Long&gt; result){<br>        if (multi == 1){<br>            result.add(multi);<br>            System.out.println(result);<br>        }else{<br>            for (long i = 2; i &lt;= multi; i++) {<br>                if(multi % i == 0){<br>                    ArrayList&lt;Long&gt; newResult = (ArrayList&lt;Long&gt;) result.clone();<br>                    newResult.add(i);<br>                    getMultiFactors(multi &#47; i,newResult);<br>                }<br>            }<br>        }<br>    }","like_count":3,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433481,"discussion_content":"如果循环从2开始，可能会漏掉一些情况，请参考为我给另一位网友李尧的回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545252186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64062,"user_name":"悬炫","can_delete":false,"product_type":"c1","uid":1159974,"ip_address":"","ucode":"28BA6B2169256B","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/26/cc28a05a.jpg","comment_is_top":false,"comment_ctime":1548654074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10138588666","product_id":100021201,"comment_content":"JavaScript的实现：<br>赏金问题：<br>&#47;**<br> *<br> * @description  赏金问题<br> * @param {number} totalReward 奖赏总金额<br> * @param {array} result 保存当前的解<br> * @param {array} rewards 可供选择的面额<br> * @returns void<br> *&#47;<br>function get(totalReward, result=[],rewards = [1, 2, 5, 10]) {<br>    &#47;&#47; 当 totalReward = 0 时，证明它是满足条件的解，结束嵌套调用，输出解<br>    if (totalReward === 0) {<br>        console.log(result.toString());<br>        &#47;&#47; 当 totalReward &lt; 0 时，证明它不是满足条件的解，不输出<br>    } else if(totalReward&lt;0) {<br>        return;<br>    } else {<br>        for (let index = 0; index &lt; rewards.length; index++) {<br>            let newResult =[...result];&#47;&#47; 由于有 4 种情况，需要 clone 当前的解并传入被调用的函数<br>            newResult.push(rewards[index]);&#47;&#47; 记录当前的选择，解决一点问题<br>            get(totalReward - rewards[index], newResult);&#47;&#47; 剩下的问题，留给嵌套调用去解决<br>        }<br>    }<br>}<br><br><br><br><br>","like_count":2},{"had_liked":false,"id":53786,"user_name":"Youngggg","can_delete":false,"product_type":"c1","uid":1203378,"ip_address":"","ucode":"DA1F55A2CB5868","user_header":"https://static001.geekbang.org/account/avatar/00/12/5c/b2/dca010e5.jpg","comment_is_top":false,"comment_ctime":1545725011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135659603","product_id":100021201,"comment_content":"import copy<br>def get(num, result=[]):<br>    sum = 1<br>    for index in result:<br>        sum = sum * index<br>    if sum == num:<br>        print(result)<br>        if 1 not in result:<br>            result.append(1)<br>            print(result)<br>        return<br>    elif sum &gt; num:<br>        return<br>    else:<br>        i=1<br>        while i&lt;=num:<br>            if num%i != 0:<br>                i = i+1<br>                continue<br>            if i == 1 &amp; 1 in result:<br>                i = i+1<br>                continue<br>            new_result = copy.copy(result)<br>            new_result.append(i)<br>            i = i+1<br>            get(num, new_result)<br><br>get(8, [])<br><br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[1, 8]<br>[2, 1, 2, 2]<br>[2, 1, 4]<br>[2, 2, 1, 2]<br>[2, 2, 2]<br>[2, 2, 2, 1]<br>[2, 4]<br>[2, 4, 1]<br>[4, 1, 2]<br>[4, 2]<br>[4, 2, 1]<br>[8]<br>[8, 1]","like_count":2},{"had_liked":false,"id":53377,"user_name":"icy","can_delete":false,"product_type":"c1","uid":1339486,"ip_address":"","ucode":"F165A326C7CE35","user_header":"https://static001.geekbang.org/account/avatar/00/14/70/5e/b4f57c39.jpg","comment_is_top":false,"comment_ctime":1545635202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135569794","product_id":100021201,"comment_content":"# -*- coding: utf-8 -*-<br>&quot;&quot;&quot;<br>Created on Mon Dec 24 14:30:38 2018<br>@author: icytanz<br>&quot;&quot;&quot;<br><br>import copy<br><br>def get_mul_factor(num,result=[]):<br>    if(num==1):<br>        total=copy.copy(result)<br>        if 1 not in total:<br>            total.append(1)<br>        print(total)<br>        return<br>    elif(num&lt;1):<br>        return<br>    else:<br>        n=list(range(num+1))<br>        n.reverse()<br>        if 1 in result:<br>            m=range(len(n)-2)<br>        else:<br>            m=range(len(n)-1)<br>        for i in m:<br>            new_result=copy.copy(result)<br>            if num%n[i]==0:<br>                new_result.append(n[i])<br>                get_mul_factor(num&#47;&#47;n[i],new_result)<br>                <br>if __name__==&#39;__main__&#39;:<br>    get_mul_factor(2)<br>    #[2, 1]<br>    #[1, 2]<br>    <br>    get_mul_factor(1)<br>    #[1]<br>    <br>    get_mul_factor(4)<br>    #[4, 1]<br>    #[2, 2, 1]<br>    #[2, 1, 2]<br>    #[1, 4]<br>    #[1, 2, 2]<br>    <br>    get_mul_factor(6)<br>    #[6, 1]<br>    #[3, 2, 1]<br>    #[3, 1, 2]<br>    #[2, 3, 1]<br>    #[2, 1, 3]<br>    #[1, 6]<br>    #[1, 3, 2]<br>    #[1, 2, 3]<br>    <br>    get_mul_factor(8)<br>    #[8, 1]<br>    #[4, 2, 1]<br>    #[4, 1, 2]<br>    #[2, 4, 1]<br>    #[2, 2, 2, 1]<br>    #[2, 2, 1, 2]<br>    #[2, 1, 4]<br>    #[2, 1, 2, 2]<br>    #[1, 8]<br>    #[1, 4, 2]<br>    #[1, 2, 4]<br>    #[1, 2, 2, 2]","like_count":2},{"had_liked":false,"id":51975,"user_name":"郑晨Cc","can_delete":false,"product_type":"c1","uid":1324942,"ip_address":"","ucode":"57146E444D6329","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/8e/cf0b4575.jpg","comment_is_top":false,"comment_ctime":1545286249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135220841","product_id":100021201,"comment_content":"package 二进制;<br><br>import java.util.ArrayList;<br><br>public class Lesson5Test {<br>\t<br>\tpublic int counter = 0;<br>\t<br>\t<br>\t<br>\tpublic void chosen(int num,ArrayList list){<br>\t\t<br>\t\t\tif(null==list){<br>\t\t\t\tlist = new ArrayList();<br>\t\t\t\tlist.add(1);<br>\t\t\t\tlist.add(num);<br>\t\t\t}<br>\t\t\t<br>\t\t\tif(num==1){ &#47;&#47;递归终止<br>\t\t\t\treturn;<br>\t\t\t}<br>\t\t\t<br>\t\t\tfor(int i=1;i&lt;=num;i++ ){<br>\t\t\t\tif(i==1){<br>\t\t\t\t\tSystem.out.println(list);<br>\t\t\t\t\tcounter++;<br>\t\t\t\t\tcontinue;<br>\t\t\t\t\t<br>\t\t\t\t}<br>\t\t\t\tif(i==num){<br>\t\t\t\t\tlist.add(1);<br>\t\t\t\t\tlist.remove(0);<br>\t\t\t\t\tSystem.out.println(list);<br>\t\t\t\t\tcounter++;<br>\t\t\t\t\tcontinue;<br>\t\t\t\t\t<br>\t\t\t\t}<br>\t\t\t\t<br>\t\t\t\tif(num%i==0){<br>\t\t\t\t\tint a = num&#47;i;<br>\t\t\t\t\tArrayList list2 = new ArrayList(list);<br>\t\t\t\t\tlist2.remove(list.size()-1);\t\t\t\t\t<br>\t\t\t\t\tlist2.add(i);<br>\t\t\t\t\tlist2.add(a);<br>\t\t\t\t\tchosen(num&#47;i,list2);<br>\t\t\t\t}<br>\t\t\t}<br>\t\t<br>\t}<br>\t<br>\tpublic static void main(String[] args){<br><br>\t\tLesson5Test too = new Lesson5Test();<br>\t\t<br>\t\ttoo.chosen(8, null);<br>\t\tSystem.out.println(&quot;总数：&quot;+too.counter);<br>\t\t<br>\t}<br><br>}<br><br><br>控制台输出：<br>[1, 8]<br>[1, 2, 4]<br>[1, 2, 2, 2]<br>[2, 2, 2, 1]<br>[2, 4, 1]<br>[1, 4, 2]<br>[4, 2, 1]<br>[8, 1]<br>总数：8","like_count":2},{"had_liked":false,"id":51407,"user_name":"miracle","can_delete":false,"product_type":"c1","uid":1276137,"ip_address":"","ucode":"FD7074F1062AE9","user_header":"https://static001.geekbang.org/account/avatar/00/13/78/e9/9d807269.jpg","comment_is_top":false,"comment_ctime":1545180990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10135115582","product_id":100021201,"comment_content":"我来答下吧，案例中的n代表已经迭代的次数，在这个案例中，限制了每轮迭代只有四种选择","like_count":2},{"had_liked":false,"id":51339,"user_name":"cocu","can_delete":false,"product_type":"c1","uid":1350624,"ip_address":"","ucode":"D974A4D9514BDD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/NsLpCXO1mDdJh7xnXJ6PPGsdvqxAJuC16b8QKb40R739JSeZvU1njk3nXLKPgBW1U6CAWHIibYL8lMYEUDfAejw/132","comment_is_top":false,"comment_ctime":1545175345,"is_pvip":false,"replies":[{"id":"18536","content":"这里我统一回答一下，是当前迭代的次数，也就是取的纸币数量","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545182265,"ip_address":"","comment_id":51339,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10135109937","product_id":100021201,"comment_content":"这个案例中的n到底是什么，是奖励总金额，还是取的纸币数？","like_count":2,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433415,"discussion_content":"这里我统一回答一下，是当前迭代的次数，也就是取的纸币数量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545182265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208107,"user_name":"Jtay-dlz","can_delete":false,"product_type":"c1","uid":1074516,"ip_address":"","ucode":"3AFAA8A4F951D2","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/54/9cc1a2cf.jpg","comment_is_top":false,"comment_ctime":1587278875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882246171","product_id":100021201,"comment_content":"def get(t, result):<br>    r = [5,2,1]<br>    if t==0:<br>        print(result)<br>        return<br>    elif t&lt;0:<br>        return<br>    for i in r:<br>        get(t-i, result+str(i)+&#39; &#39;)<br>get(5, &#39;&#39;)<br><br>----------------5 <br>2 2 1 <br>2 1 2 <br>2 1 1 1 <br>1 2 2 <br>1 2 1 1 <br>1 1 2 1 <br>1 1 1 2 <br>1 1 1 1 1 <br>","like_count":1},{"had_liked":false,"id":164376,"user_name":"OUO","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/acc47ee1.jpg","comment_is_top":false,"comment_ctime":1576963950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871931246","product_id":100021201,"comment_content":"#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>const int N = 4;<br>int coins[N] = {1, 2, 5, 10};<br>int n;<br>vector&lt;int&gt; closen;<br>int count;<br><br>void dfs(int u)<br>{<br>    if(u &gt; n) return;<br>    if(u == n)<br>    {<br>        for(int i = 0; i &lt; closen.size(); i++)<br>        {<br>            if(i &gt; 0) printf(&quot; &quot;);<br>            printf(&quot;%d&quot;, closen[i]);<br>        }<br>        puts(&quot;&quot;);<br>        count++;<br>        return;<br>    }<br>    for(int i = 0; i &lt; N; i++)<br>    {<br>        closen.push_back(coins[i]);<br>        u += coins[i];<br>        dfs(u);<br>        closen.pop_back();<br>        u -= coins[i];<br>    }<br>    return;<br>}<br><br>int main(void)<br>{<br>    scanf(&quot;%d&quot;, &amp;n);<br>    dfs(0);<br>    printf(&quot;一共有: %d 种方案\\n&quot;,count);<br>    return 0;<br>}<br>","like_count":1},{"had_liked":false,"id":164375,"user_name":"OUO","can_delete":false,"product_type":"c1","uid":1519230,"ip_address":"","ucode":"52EEB72E80BAF8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/acc47ee1.jpg","comment_is_top":false,"comment_ctime":1576963381,"is_pvip":false,"replies":[{"id":"62459","content":"这个是C版本吗？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1576993398,"ip_address":"","comment_id":164375,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5871930677","product_id":100021201,"comment_content":"#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>const int N = 4;<br>int coins[N] = {1, 2, 5, 10};<br>vector&lt;int&gt; closen;<br><br>void dfs(int u)<br>{<br>    if(u &gt; 10) return;<br>    if(u == 10)<br>    {<br>        for(int i = 0; i &lt; closen.size(); i++)<br>        {<br>            if(i &gt; 0) printf(&quot; &quot;);<br>            printf(&quot;%d&quot;, closen[i]);<br>        }<br>        puts(&quot;&quot;);<br>        return;<br>    }<br>    for(int i = 0; i &lt; N; i++)<br>    {<br>        closen.push_back(coins[i]);<br>        u += coins[i];<br>        dfs(u);<br>        closen.pop_back();<br>        u -= coins[i];<br>    }<br>    return;<br>}<br><br>int main(void)<br>{<br>    dfs(0);<br>    return 0;<br>}<br>&#47;&#47; 老师 这样写对吗","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478738,"discussion_content":"这个是C版本吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576993398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1519230,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2e/7e/acc47ee1.jpg","nickname":"OUO","note":"","ucode":"52EEB72E80BAF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":100882,"discussion_content":"c++","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577280293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90163,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1556437058,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5851404354","product_id":100021201,"comment_content":"public class RecusionTwo {<br>    public RecusionTwo(int n){<br>        this.n =n;<br>    }<br>    private static int n;<br><br>    public static void get(ArrayList&lt;Integer&gt; result){<br>        int product =1;<br>        for(int j=0;j&lt;result.size();j++){<br>            product*=result.get(j);<br>        }<br>        if(product == n){<br>            System.out.println(result);<br>            return;<br>        }else if(product&gt;n){<br>            return;<br>        }else {<br>            for (int i=1; i &lt;= n; i++) {<br>                int count = 1;<br>                if(i==1){<br>                 for(int j=0;j&lt;result.size();j++){<br>                     if(result.get(j)==1){<br>                         count++;<br>                     }<br>                 }<br>                }<br>                if(count&gt;1){<br>                    continue;<br>                }<br>                 ArrayList&lt;Integer&gt; newResult = (ArrayList&lt;Integer&gt;) result.clone();<br>                 newResult.add(i);<br>                 get( newResult);<br><br>            }<br>        }<br>    }<br><br>    public static void main(String[] args) {<br><br>        RecusionTwo recusionTwo = new RecusionTwo(8);<br>        get(new ArrayList&lt;&gt;());<br>    }<br>}","like_count":1},{"had_liked":false,"id":51826,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1545267724,"is_pvip":false,"replies":[{"id":"18799","content":"少了一些可能。比如，输入8，少了<br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[2, 1, 2, 2]","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545276443,"ip_address":"","comment_id":51826,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5840235020","product_id":100021201,"comment_content":"这里贴代码对Python这种缩进语言来讲很不友好啊，建议可以提交图片或者支持md格式。说下自己的思路：一个整数num  对 num 到 1 之间的整数 i 分别求余，如果余数为0，说明这是一个因子，将 i 添加到结果列表里，然后再让num 对 i 取整，得到 k ，对整数 K 再次递归求解。退出条件，如果 num == 1，那么将 1 添加到结果列表里，并打印结果列表。这里要注意下，如果 i == 1 ,也是退出条件，此时将 num 加入结果列表并打印。因为，一个大于1的数据除以1，永远得不到1 ，也就达不到前面的退出条件。源代码见 https:&#47;&#47;github.com&#47;somenzz&#47;geekbang&#47;blob&#47;master&#47;mathOfProgramer&#47;chapter05_recursion_1.py<br>","like_count":1,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433635,"discussion_content":"少了一些可能。比如，输入8，少了\n[1, 2, 2, 2]\n[1, 2, 4]\n[1, 4, 2]\n[2, 1, 2, 2]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545276443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51502,"user_name":"文刂 氵共 超","can_delete":false,"product_type":"c1","uid":1282813,"ip_address":"","ucode":"C2CE1512D23012","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","comment_is_top":false,"comment_ctime":1545190494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840157790","product_id":100021201,"comment_content":"使用C++实现赏金问题<br>#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br><br>using namespace std;<br><br>&#47;&#47; totalmoney : 总金额<br>&#47;&#47; select : 钱币面额的选择列表<br>&#47;&#47; Result : 结果列表<br>void RecursionAlgo(int Totalmoney, vector&lt;int&gt; &amp;Select, vector&lt;int&gt; &amp;Result)<br>{<br>\t&#47;&#47;每次递归需要用总金额减去使用的面额，直到Totalmoney=0，表示找到解<br>\tif (Totalmoney == 0)<br>\t{<br>\t\tfor (size_t i = 0; i &lt; Result.size(); ++i)<br>\t\t{<br>\t\t\tcout &lt;&lt; Result[i] &lt;&lt; &quot;  &quot;;<br>\t\t}<br>\t\tcout &lt;&lt; endl;<br>\t\treturn;<br>\t}<br>\t&#47;&#47;Totalmoney &lt; 0, 不符合标准 返回<br>\telse if (Totalmoney &lt; 0)<br>\t{<br>\t\treturn;<br>\t}<br>\telse<br>\t{<br>\t\tfor (size_t i = 0; i &lt; Select.size(); ++i)<br>\t\t{<br>\t\t\tvector&lt;int&gt; newResult = Result;<br>\t\t\tnewResult.push_back(Select[i]);<br>\t\t\tRecursionAlgo(Totalmoney-Select[i], Select, newResult);<br>\t\t}<br>\t}<br>}<br>int _tmain(int argc, _TCHAR* argv[])<br>{<br>\tint Totalmoney = 10;<br><br>\tint ia[] = {1, 2, 5, 10};<br>\tvector&lt;int&gt; Select(ia, ia+4);<br>\tvector&lt;int&gt; Result;<br>\t<br>\tRecursionAlgo(Totalmoney, Select, Result);<br>\treturn 0;<br>}","like_count":1},{"had_liked":false,"id":359465,"user_name":"哆啦A靖","can_delete":false,"product_type":"c1","uid":2575637,"ip_address":"云南","ucode":"DFDB8FFC374949","user_header":"https://static001.geekbang.org/account/avatar/00/27/4d/15/4d13caf5.jpg","comment_is_top":false,"comment_ctime":1665560930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665560930","product_id":100021201,"comment_content":"class Scratch {<br>    public static Set&lt;String&gt; results = new HashSet&lt;&gt;();<br><br>    public static void recursion(long total, ArrayList&lt;Long&gt; result) {<br>        if (total == 1) {<br>            if (result.size() == 1) {<br>                result.add(1L);<br>            }<br>            if (result.size() &gt; 2) {<br>                result.remove(Long.valueOf(1));<br>            }<br>            String x = result.stream().map(Object::toString).collect(Collectors.joining(&quot;x&quot;));<br>            results.add(x);<br>        } else {<br>            for (int i = 1; i &lt;= total; i++) {<br>                if (i == 1 &amp;&amp; result.contains(1L)) {<br>                    continue;<br>                }<br>                if (total % i != 0) {<br>                    continue;<br>                }<br>                ArrayList&lt;Long&gt; newResult = ((ArrayList) result.clone());<br>                newResult.add((long) i);<br>                recursion(total &#47; i, newResult);<br>            }<br>        }<br>    }<br><br>    public static void main(String[] args) {<br>        recursion(8, new ArrayList&lt;&gt;());<br>        results.forEach(System.out::println);<br>    }<br>}<br><br>2x2x2<br>1x8<br>8x1<br>2x4<br>4x2","like_count":0},{"had_liked":false,"id":356558,"user_name":"张小蹭","can_delete":false,"product_type":"c1","uid":3164674,"ip_address":"美国","ucode":"8655885ED5CDC0","user_header":"https://static001.geekbang.org/account/avatar/00/30/4a/02/63dea05c.jpg","comment_is_top":false,"comment_ctime":1662411081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662411081","product_id":100021201,"comment_content":"#to get the factor of an integer, we can search recursively, consider with 1 and without 1 in the result<br>def getFactors(self, n: int) -&gt; List[List[int]]:<br>        #considering using backtrack recursively find the possible combinations<br>        #always consider edge case<br>        #below is the code to consider 1 in the result and consider 1x8 and 8x1 as two answers<br>        <br>        ans = []<br>        <br>        def backtrack(path, target):<br>            #ending condition<br>            if target == 1 and 1 in path:<br>                ans.append(path.copy())<br>            elif target == 1 and 1 not in path:<br>                ans.append(path.copy() + [1])<br>            elif target &lt; 0:<br>                return<br>            else:<br>                <br>                #start backtrack<br>                for i in range(1, target + 1):<br>                    if (i == 1 and i not in path) or (i != 1 and target % i == 0):<br>                        path.append(i)<br>                        backtrack(path, target &#47;&#47; i)<br>                        path.pop()<br>        <br>        backtrack([], n)<br>        return ans","like_count":0},{"had_liked":false,"id":350848,"user_name":"046789","can_delete":false,"product_type":"c1","uid":3031923,"ip_address":"","ucode":"46273CD5D2D8A1","user_header":"","comment_is_top":false,"comment_ctime":1657259054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657259054","product_id":100021201,"comment_content":"递归","like_count":0},{"had_liked":false,"id":350135,"user_name":"shibo","can_delete":false,"product_type":"c1","uid":1363215,"ip_address":"","ucode":"003A5780BB0AFE","user_header":"","comment_is_top":false,"comment_ctime":1656591663,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656591663","product_id":100021201,"comment_content":"https:&#47;&#47;leetcode.cn&#47;problems&#47;combination-sum&#47;<br>组合总和，运用了回溯算法（本质是递归）","like_count":0},{"had_liked":false,"id":342452,"user_name":"窦国海","can_delete":false,"product_type":"c1","uid":2365959,"ip_address":"","ucode":"314384F28A5534","user_header":"https://static001.geekbang.org/account/avatar/00/24/1a/07/fe50c809.jpg","comment_is_top":false,"comment_ctime":1650272556,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650272556","product_id":100021201,"comment_content":"func test4(num int, divisors []int) {<br>\tfor i := 1; i &lt;= num; i++ {<br>\t\tif i == 1 {<br>\t\t\tvar flag = false<br>\t\t\tfor _, divisor := range divisors {<br>\t\t\t\tif 1 == divisor {<br>\t\t\t\t\tflag = true<br>\t\t\t\t}<br>\t\t\t}<br>\t\t\tif !flag &amp;&amp; num != 1 {<br>\t\t\t\tdivisors := append(divisors, 1, num)<br>\t\t\t\tfmt.Println(divisors)<br>\t\t\t}<br>\t\t} else {<br>\t\t\tif num%i == 0 {<br>\t\t\t\tdivisors := append(divisors, i, num&#47;i)<br>\t\t\t\tfmt.Println(divisors)<br>\t\t\t\ttest4(divisors[len(divisors)-1], divisors[0:len(divisors)-1])<br>\t\t\t}<br>\t\t}<br><br>\t}<br>}","like_count":0},{"had_liked":false,"id":333690,"user_name":"韩风枫","can_delete":false,"product_type":"c1","uid":1153890,"ip_address":"","ucode":"960408FE5A6710","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/62/28cf26d4.jpg","comment_is_top":false,"comment_ctime":1644475020,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644475020","product_id":100021201,"comment_content":"&#47;&#47; js<br>const ii = (num, result = []) =&gt; {<br>  if (num === 1) {<br>    if (result.indexOf(1) === -1) {<br>      result.push(1)<br>    }<br>    console.log(result)<br>    return<br>  }<br>  if (num &lt; 1) {<br>    return<br>  } else {<br>    for (let i = 1; i &lt; num + 1; i++) {<br>      if (num % i !== 0 || (i === 1 &amp;&amp; result.indexOf(1) !== -1)) {<br>        continue;<br>      } else {<br>        let nr = result.slice();<br>        nr.push(i)<br>        ii(num &#47; i, nr)<br>      }<br>    }<br>  }<br>}<br>ii(8);<br>&#47;&#47; 结果<br>[ 1, 2, 2, 2 ]<br>[ 1, 2, 4 ]<br>[ 1, 4, 2 ]<br>[ 1, 8 ]<br>[ 2, 1, 2, 2 ]<br>[ 2, 1, 4 ]<br>[ 2, 2, 1, 2 ]<br>[ 2, 2, 2, 1 ]<br>[ 2, 4, 1 ]<br>[ 4, 1, 2 ]<br>[ 4, 2, 1 ]<br>[ 8, 1 ]","like_count":0},{"had_liked":false,"id":326536,"user_name":"周剑辉~","can_delete":false,"product_type":"c1","uid":1562980,"ip_address":"","ucode":"93E2EB4C32C560","user_header":"","comment_is_top":false,"comment_ctime":1639555577,"is_pvip":false,"replies":[{"id":"120177","content":"不完全一样，循环其实每个步骤所处理的任务量是相同的。","user_name":"作者回复","user_name_real":"编辑","uid":"1275061","ctime":1641688289,"ip_address":"","comment_id":326536,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639555577","product_id":100021201,"comment_content":"老师，我感觉循环好像也有 “将当前的问题化解为两部分：一个当前所采取的步骤和另一个更简单的问题”<br>这个特点啊","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544742,"discussion_content":"不完全一样，循环其实每个步骤所处理的任务量是相同的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641688289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322586,"user_name":"林暗草惊风","can_delete":false,"product_type":"c1","uid":2170636,"ip_address":"","ucode":"7573BB8A6808EB","user_header":"https://static001.geekbang.org/account/avatar/00/21/1f/0c/3ce4c230.jpg","comment_is_top":false,"comment_ctime":1637489274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637489274","product_id":100021201,"comment_content":"js版本<br>function get(value, result, once) {<br>    let start = once ? 1 : 2<br>    if(value == 1) {<br>      return console.log(result);<br>    }<br>    for (<br>      let index = start;<br>      index &lt;= value;<br>      index++<br>    ) {<br>      const newResult = [].concat(<br>        result<br>      )<br>      <br>      if (value % index === 0) {<br>        newResult.push(index)<br>        if(once &amp;&amp; value == index) {<br>          newResult.push(1)<br>        }<br>        const newValue = value &#47; index<br>        get(<br>          newValue, newResult, false<br>        )<br>      }<br>    }<br>}<br><br>const value = 8<br>get(value, [], true)<br>console.log(&#39;over&#39;)<br><br>","like_count":0},{"had_liked":false,"id":312383,"user_name":"Geek_181977","can_delete":false,"product_type":"c1","uid":2764236,"ip_address":"","ucode":"5B5FA224D77046","user_header":"","comment_is_top":false,"comment_ctime":1631781589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631781589","product_id":100021201,"comment_content":"go 版本，来自leetcode<br>package main<br><br>import (<br>\t&quot;fmt&quot;<br>)<br><br>type slice struct {<br>\tdata []int<br>}<br>type list struct {<br>\tdata [][]int<br>}<br><br><br><br>func main() {<br>\tr := combinationSum([]int{1, 2, 5, 10}, 10)<br>\tfmt.Println(r)<br>}<br><br>func combinationSum(candidates []int, target int) [][]int {<br>\tif len(candidates) == 0 {<br>\t\treturn [][]int{}<br>\t}<br>\tpath := &amp;slice{data: make([]int, 0)}<br>\tret := &amp;list{data: make([][]int, 0)}<br>\tdef(candidates, target, path, ret, 0, len(candidates))<br>\treturn ret.data<br><br>}<br>func def(candidates []int, target int, path *slice, ret *list, index int, length int) {<br>\tif target &lt; 0 {<br>\t\treturn<br>\t}<br>\tif target == 0 {<br>\t\tls := make([]int, len(path.data))<br>\t\tcopy(ls, path.data)<br>\t\tret.data = append(ret.data, ls)<br>\t\t&#47;&#47;fmt.Println(path.data,&quot;-------------&quot;)<br>\t\treturn<br>\t}<br>\tfor i := index; i &lt; length; i++ {<br>\t\tpath.data = append(path.data, candidates[i])<br><br>\t\tdef(candidates, target-candidates[i], path, ret, i, length)<br>\t\tpath.data = path.data[:len(path.data)-1]<br>\t}<br><br>}<br>","like_count":0},{"had_liked":false,"id":304092,"user_name":"Benjamin","can_delete":false,"product_type":"c1","uid":1940162,"ip_address":"","ucode":"C661E5358FE764","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/c2/8fcd5a2d.jpg","comment_is_top":false,"comment_ctime":1627231336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627231336","product_id":100021201,"comment_content":"#include &lt;vector&gt;<br>#include &lt;iostream&gt;<br>using namespace std;<br><br>class Solution {<br>    vector&lt;vector&lt;int&gt;&gt; printArr;<br>    int originVal;<br>public:<br>    void solution(int num) {<br>        vector&lt;int&gt; initval;<br>        originVal = num;<br>        recursive(false, num, initval);<br>        this-&gt;pint();<br>    }<br><br>private:<br>    void recursive(bool hasOne, int num, vector&lt;int&gt;&amp; arr) {<br>        if (num == 1) {<br>            &#47;&#47; 放进打印队列<br>            if (arr.size() == 1 || !hasOne) {<br>                arr.push_back(1);<br>            }<br>            printArr.push_back(arr);<br>            return;<br>        }<br>        int i = 2;<br>        for(; i &lt;= num; i++) {<br>            vector&lt;int&gt; unknownIfExistingOne = arr;<br>            if (num % i == 0) {<br>                if (!hasOne) {<br>                    vector&lt;int&gt; addOne = arr;<br>                    addOne.push_back(1);<br>                    addOne.push_back(i);<br>                    recursive(true, num &#47; i, addOne);<br>                }<br>                unknownIfExistingOne.push_back(i);<br>                recursive(hasOne, num &#47; i, unknownIfExistingOne);     &#47;&#47; 保持原来的特定特性不丢<br>            }<br>            else<br>                continue;<br>        }<br>    }<br><br>    void pint() {<br>        for(auto arr: printArr) {<br>            int len = arr.size() - 1;<br>            for(int i = 0; i &lt; len; ++i) {<br>                cout &lt;&lt; arr[i] &lt;&lt; &quot; x &quot;;<br>            }<br>            cout &lt;&lt; arr[len] &lt;&lt; endl;<br>        }<br>        cout &lt;&lt; &quot;共计 &quot; &lt;&lt; printArr.size() &lt;&lt; &quot; 种分解方式.&quot; &lt;&lt; endl;<br>    }<br><br>};<br><br>int main (int argc, char* argv[]) {<br>    Solution sol;<br>    sol.solution(8);<br>    return 0;<br>}<br><br>=======输出结果：<br>1 x 2 x 2 x 2<br>1 x 2 x 4<br>2 x 1 x 2 x 2<br>2 x 2 x 1 x 2<br>2 x 2 x 2 x 1<br>2 x 1 x 4<br>2 x 4 x 1<br>1 x 4 x 2<br>4 x 1 x 2<br>4 x 2 x 1<br>1 x 8<br>8 x 1<br>共计 12 种分解方式.","like_count":0},{"had_liked":false,"id":294750,"user_name":"夏风","can_delete":false,"product_type":"c1","uid":1496195,"ip_address":"","ucode":"EEF37E75FBBA8A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrgpv3Kia5Iw2kmg2rV4PSReiaic8d0Dj93XPlJaNpPRPC2xAIS22PQerSxb0cgjChSGAEOyX4tJBCQ/132","comment_is_top":false,"comment_ctime":1622080725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622080725","product_id":100021201,"comment_content":"理解那个递归的扩展，只从文字上来理解确实跳跃性比较大，从图上理解就很清晰了","like_count":0},{"had_liked":false,"id":292595,"user_name":"Bindy🌲","can_delete":false,"product_type":"c1","uid":1161925,"ip_address":"","ucode":"A43CE99E49E457","user_header":"https://static001.geekbang.org/account/avatar/00/11/ba/c5/bf9b71a9.jpg","comment_is_top":false,"comment_ctime":1620888977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620888977","product_id":100021201,"comment_content":"JS版本的求某个数所有因子的排列组合<br>function getMultiFactors(n,result=[]){<br>    if(n === 1){<br>        if(!result.includes(1)) <br>            result.push(1)<br>        console.log(result.join(&#39;x&#39;))<br>        return<br>    }else{<br>        for(let i = n;i&gt;=1;i--){<br>            if(i == 1 &amp;&amp; result.includes(1)) continue<br>            if(n % i ===0){<br>                let newResult = result.slice()<br>                newResult.push(i)<br>                <br>                getMultiFactors(n&#47;i,newResult)<br>            }<br>        }<br>    }<br>}<br><br>getMultiFactors(8)","like_count":0},{"had_liked":false,"id":288080,"user_name":"THE ROCK","can_delete":false,"product_type":"c1","uid":2558410,"ip_address":"","ucode":"96561C9EA49BC6","user_header":"https://static001.geekbang.org/account/avatar/00/27/09/ca/2d5d97d2.jpg","comment_is_top":false,"comment_ctime":1618291382,"is_pvip":false,"replies":[{"id":"104811","content":"结果是对的，代码实现有吗？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1618683113,"ip_address":"","comment_id":288080,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618291382","product_id":100021201,"comment_content":"18   81  24  42  124   142  222   241  214   1222   2122   2212   2221   老师，这些结果对吗？ ","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518510,"discussion_content":"结果是对的，代码实现有吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618683113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283700,"user_name":"haleli","can_delete":false,"product_type":"c1","uid":1329407,"ip_address":"","ucode":"A07143F6E2125B","user_header":"https://static001.geekbang.org/account/avatar/00/14/48/ff/17e4c732.jpg","comment_is_top":false,"comment_ctime":1615888632,"is_pvip":false,"replies":[{"id":"103572","content":"很好的分析，这就是动态规划的思想","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1616791735,"ip_address":"","comment_id":283700,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1615888632","product_id":100021201,"comment_content":"先说递归结论：<br>f(n) = f(n-1)+f(n-2)+f(n-5)+f(n-10)  n&gt;10 ,<br>f(n) = f(n-1)+f(n-2)  2&lt;n&lt;5 ,<br>f(n) = f(n-1)+f(n-2)+f(n-5)  5&lt;n&lt;10 ,<br>n=1  1，<br>n=2 2，<br>n=5 9,<br>n=10 129,<br>假设宰相最终要n元，最终我们要在[1，2，5，10] 中，拼凑出n元。<br>反过来思考，假设n无限大，大于10元 ，如果知道最后一次取多少钱，那么倒数第二次取钱的组合数就确定了，而最后一步取钱有四种可能，分别是取1元，2元，5元，10元。<br>最后如果取1元，倒数第二步组合为f(n-1)<br>最后如果取2元，倒数第二步组合为f(n-2)<br>最后如果取5元，倒数第二步就组合为f(n-5)<br>最后如果取10元，倒数第二步就组合为f(n-10)，<br>如果n无限大，那么每次都是在这四种情况里面取，情况都一致<br>所以有递归公式：f(n) = f(n-1)+f(n-2)+f(n-5)+f(n-10)  n&gt;10 ,<br>n等于其他值同理","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517120,"discussion_content":"很好的分析，这就是动态规划的思想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616791735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281325,"user_name":"白白","can_delete":false,"product_type":"c1","uid":1735850,"ip_address":"","ucode":"18C19F4F090890","user_header":"https://static001.geekbang.org/account/avatar/00/1a/7c/aa/cbb4a52e.jpg","comment_is_top":false,"comment_ctime":1614691736,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614691736","product_id":100021201,"comment_content":"public static void main(String[] args) {<br>        recursion(8,new ArrayList&lt;&gt;());<br>    }<br><br>    public static void recursion(long total, ArrayList&lt;Long&gt; result) {<br>        if (total &lt; 0) {<br>            throw new IllegalArgumentException();<br>        } else if (total == 1) {<br>            if (!result.contains(1L)) {<br>                result.add(1L);<br>            }<br>            System.out.println(result);<br>        } else {<br>            for (int i = 1; i &lt;= total; i++) {<br>                if (total % i == 0) {<br>                    if (i == 1 &amp;&amp; result.contains(1L)) {<br>                        continue;<br>                    }<br>                    ArrayList&lt;Long&gt; temp = (ArrayList&lt;Long&gt;) result.clone();<br>                    temp.add((long) i);<br>                    recursion(total &#47; i, temp);<br>                }<br>            }<br>        }<br>    }","like_count":0},{"had_liked":false,"id":280753,"user_name":"快乐","can_delete":false,"product_type":"c1","uid":1045565,"ip_address":"","ucode":"B5A0FD8D5723CF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/3d/e3406ac4.jpg","comment_is_top":false,"comment_ctime":1614347709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614347709","product_id":100021201,"comment_content":"```<br>from functools import reduce<br><br>def f(x, r=list(), y=None):<br>    if r and len(r) &gt; 1:<br>        t = reduce(lambda x,y: x*y, r)<br>        if t == x:<br>            print(r)<br><br>    if y is None:<br>        y = x<br><br>    for i in range(1, y + 1):<br>        if y % i == 0:<br>            if i == 1 and i in r:<br>                continue<br><br>            n = y &#47;&#47; i<br>            f(x, r + [i], n)<br><br>f(8)<br>```<br><br><br>python 版本","like_count":0},{"had_liked":false,"id":271992,"user_name":"（ . ）","can_delete":false,"product_type":"c1","uid":2321902,"ip_address":"","ucode":"DF767A19084E4A","user_header":"https://static001.geekbang.org/account/avatar/00/23/6d/ee/68d1faf3.jpg","comment_is_top":false,"comment_ctime":1609903592,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609903592","product_id":100021201,"comment_content":"func getFactorization(number: Int, result: [Int] = []) {<br>    if number == 1 {<br>        var newResult = result<br>        if !newResult.contains(1) {<br>            print(newResult.map { &quot;\\($0)&quot; }.joined(separator: &quot;x&quot;))<br>            newResult.append(1)<br>        }<br>        print(newResult.map { &quot;\\($0)&quot; }.joined(separator: &quot;x&quot;))<br>    } else if number &lt;= 1 {<br>        return<br>    } else {<br>        for i in 1...number {<br>            if i == 1 &amp;&amp; result.contains(1) {<br>                continue<br>            }<br>            if number % i == 0 {<br>                var newResult = result<br>                newResult.append(i)<br>                getFactorization(number: number &#47; i, result: newResult)<br>            }<br>        }<br>    }<br>}<br><br><br>1x2x2x2<br>1x2x4<br>1x4x2<br>1x8<br>2x1x2x2<br>2x1x4<br>2x2x1x2<br>2x2x2<br>2x2x2x1<br>2x4<br>2x4x1<br>4x1x2<br>4x2<br>4x2x1<br>8<br>8x1","like_count":0},{"had_liked":false,"id":271073,"user_name":"Geek_c23a4c","can_delete":false,"product_type":"c1","uid":2310989,"ip_address":"","ucode":"A74EACB790590D","user_header":"","comment_is_top":false,"comment_ctime":1609395361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609395361","product_id":100021201,"comment_content":"把数学归纳法和递归硬关联起来还是太牵强了。数学归纳法是严格论证所有数据的。而递归一次只能递归出来一个数据的结论","like_count":0},{"had_liked":false,"id":270761,"user_name":"大坏猪","can_delete":false,"product_type":"c1","uid":1662955,"ip_address":"","ucode":"326EC6BEEAE4FF","user_header":"https://static001.geekbang.org/account/avatar/00/19/5f/eb/b07245b7.jpg","comment_is_top":false,"comment_ctime":1609242815,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609242815","product_id":100021201,"comment_content":"var arr = [1,2,5,10]<br>    var num = 0<br>    function get(total, result) {<br>        if (total == 0) {<br>            num++ <br>            console.log(result, num) <br>        } &#47;&#47; 当totalReward &lt; 0时，证明它不是满足条件的解，不输出 <br>        else if (total &lt; 0) { <br>            return; <br>        } else { <br>            for (var i = 0; i &lt; arr.length; i++) { <br>                var newResult = JSON.parse(JSON.stringify(result)); &#47;&#47; 由于有4种情况，需要clone当前的解并传入被调用的函数 <br>                newResult.push(arr[i]); &#47;&#47; 记录当前的选择，解决一点问题 <br>                get(total - arr[i], newResult); &#47;&#47; 剩下的问题，留给嵌套调用去解决 <br>            } <br>        }<br>    }<br>    &#47;&#47; get(10, [])<br>    function test(num, result) {<br>        if (num == 1) {<br>            if (!result.includes(1)) {<br>                result.push(1)<br>            }<br>            console.log(result);<br>        } else if (num &lt; 0) {<br>        } else {<br>            if (num )<br>            for(var i = 1; i &lt;= num; i++) {<br>                if (i == 1 &amp;&amp; !result.includes(1) || num % i == 0 &amp;&amp; i != 1) {<br>                    let newResult = JSON.parse(JSON.stringify(result))<br>                    newResult.push(i)<br>                    test(num &#47; i, newResult)<br>                }<br>            }<br>        }<br>    }<br>    test(8, [])<br>js实现得还得参考别人的实现，还得练练啊","like_count":0},{"had_liked":false,"id":265068,"user_name":"凹凸鸿","can_delete":false,"product_type":"c1","uid":1915334,"ip_address":"","ucode":"A458BAEBF314B2","user_header":"https://static001.geekbang.org/account/avatar/00/1d/39/c6/1e12f271.jpg","comment_is_top":false,"comment_ctime":1606750148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606750148","product_id":100021201,"comment_content":"function get($totalReward, &amp;$num=0, $result=[], $arr=[1,2,5,10]){<br>    if($totalReward == 0){<br>        $num += 1;<br>        echo &quot;第&quot;.$num.&#39;可能===&gt;【&#39;;<br>        echo implode(&#39;,&#39;, $result).&quot;】\\r\\n&quot;;<br>        return;<br>    }<br>    elseif ($totalReward &lt; 0){<br>        return;<br>    }else{<br>        foreach ($arr as $item) {<br>            $newArr = [];<br>            array_push($newArr,$item);<br>            get($totalReward - $item, $num, array_merge($newArr,$result));<br>        }<br>    }<br>}<br><br>get(10);","like_count":0},{"had_liked":false,"id":254002,"user_name":"祥","can_delete":false,"product_type":"c1","uid":2232082,"ip_address":"","ucode":"D50195C7122355","user_header":"https://static001.geekbang.org/account/avatar/00/22/0f/12/bf0bddeb.jpg","comment_is_top":false,"comment_ctime":1603011817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603011817","product_id":100021201,"comment_content":"def rewardQuestion(money, list=[1, 2, 5, 10], result=[], count=0):<br>    if money == 0:<br>        count += 1<br>        print result, count<br>    elif money &lt; 0:<br>        return count<br>    else:<br>        for i in list:<br>            if len(result) != 0:<br>                newR = result[0:len(result)]<br>            else:<br>                newR = result<br>            newR.append(i)<br>            count = rewardQuestion(money - i, list, newR, count)<br>    return count","like_count":0},{"had_liked":false,"id":253874,"user_name":"祥","can_delete":false,"product_type":"c1","uid":2232082,"ip_address":"","ucode":"D50195C7122355","user_header":"https://static001.geekbang.org/account/avatar/00/22/0f/12/bf0bddeb.jpg","comment_is_top":false,"comment_ctime":1602926509,"is_pvip":false,"replies":[{"id":"92846","content":"确实可以不必关联，只要能理解归纳（包括之后的动态规划）的核心思想就好了。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1603127178,"ip_address":"","comment_id":253874,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602926509","product_id":100021201,"comment_content":"n表示选择的次数，作者应该在文稿里标出来。不懂n是啥，逻辑都捋不下来������。还有作者讲故事太水了，这个赏金问题没必要关联前面的棋盘故事，很容易受棋盘故事的影响。。。。愣是想了一个多小时，在留言中看到n的意思，才整明白。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507211,"discussion_content":"确实可以不必关联，只要能理解归纳（包括之后的动态规划）的核心思想就好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603127178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253411,"user_name":"Dylan","can_delete":false,"product_type":"c1","uid":1156724,"ip_address":"","ucode":"C0B627721FABF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a6/74/1c86b1f8.jpg","comment_is_top":false,"comment_ctime":1602731253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602731253","product_id":100021201,"comment_content":"javascript <br>function calc(n,result=[]){<br>            if(n==1){<br>                if(result.length===1&amp;&amp;!result.includes(1)){<br>                    result.push(1)<br>                }<br>                if(result.length===0){<br>                    result=[1]<br>                }<br>                console.log(result);<br>                return;<br>            }else if(n%1!==0){<br>                return;<br>            }else{<br>                let start =1;<br>                if(result.length&gt;=1)start=2;<br>                for(let i=start; i&lt;=n;i++){<br>                    let curRes = [].concat(result);<br>                    if(n%i==0){<br>                        curRes.push(i);<br>                        calc(n&#47;i,curRes)<br>                    }<br>                }<br>            }<br>        }<br>        calc(8,[]);<br>        &#47;* output<br>        一个整数分解为多个整数的乘积.html:18 (4) [1, 2, 2, 2]<br>一个整数分解为多个整数的乘积.html:18 (3) [1, 2, 4]<br>一个整数分解为多个整数的乘积.html:18 (3) [1, 4, 2]<br>一个整数分解为多个整数的乘积.html:18 (2) [1, 8]<br>一个整数分解为多个整数的乘积.html:18 (3) [2, 2, 2]<br>一个整数分解为多个整数的乘积.html:18 (2) [2, 4]<br>一个整数分解为多个整数的乘积.html:18 (2) [4, 2]<br>一个整数分解为多个整数的乘积.html:18 (2) [8, 1]<br>       *&#47;<br>","like_count":0},{"had_liked":false,"id":252154,"user_name":"吃饺子不吐饺子皮","can_delete":false,"product_type":"c1","uid":1075552,"ip_address":"","ucode":"CC2F3393FEFAE8","user_header":"https://static001.geekbang.org/account/avatar/00/10/69/60/b9ac6d5e.jpg","comment_is_top":false,"comment_ctime":1602149698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602149698","product_id":100021201,"comment_content":" public static void fix(int sum, int current, ArrayList&lt;String&gt; result) {<br>        if (current == sum) {<br>            System.out.println(result);<br>            return;<br>        }<br>        if(sum % current == 0)<br>        result.add(current+&quot;*&quot;+ sum &#47; current);<br><br>        fix(sum,++current,result);<br><br>    }","like_count":0},{"had_liked":false,"id":252148,"user_name":"zhaoey","can_delete":false,"product_type":"c1","uid":2168796,"ip_address":"","ucode":"CD70AA3ED52B5B","user_header":"https://static001.geekbang.org/account/avatar/00/21/17/dc/8edbd93e.jpg","comment_is_top":false,"comment_ctime":1602146102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602146102","product_id":100021201,"comment_content":"思考题：<br>public static void decomposition(long n, ArrayList&lt;Long&gt; result){<br>        if (n == 1){<br>            if (!result.contains(n)){<br>                result.add(n);<br>            }<br>            System.out.println(result);<br>            return;<br>        }else{<br>            for (long i = 1; i &lt;= n; i++) {<br>                if (i == 1 &amp;&amp; result.contains(1L)){<br>                    continue;<br>                }<br>                if (n % i != 0){<br>                    continue;<br>                }<br>                ArrayList&lt;Long&gt; newResult = (ArrayList) result.clone();<br>                newResult.add(i);<br>                decomposition(n &#47; i,newResult);<br>            }<br>        }<br>    }<br><br>    public static void main(String[] args) {<br>        decomposition(8,new ArrayList&lt;&gt;());<br>    }<br>运行结果：<br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[1, 8]<br>[2, 1, 2, 2]<br>[2, 1, 4]<br>[2, 2, 1, 2]<br>[2, 2, 2, 1]<br>[2, 4, 1]<br>[4, 1, 2]<br>[4, 2, 1]<br>[8, 1]","like_count":0},{"had_liked":false,"id":249668,"user_name":"nate_luo","can_delete":false,"product_type":"c1","uid":1980442,"ip_address":"","ucode":"2A2E880126E9E1","user_header":"","comment_is_top":false,"comment_ctime":1600750585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600750585","product_id":100021201,"comment_content":"我也来发一个<br>--------------------------<br>import getopt<br>import sys<br><br><br>def print_factors(l, num):<br>    if num == 1:<br>        if len(l) &gt; 1:<br>            print (&#39;*&#39;.join(map(str, l)))<br>        else:<br>            print (&#39;*&#39;.join(map(str, l)) + &#39;*&#39; + str(num))<br><br>    for i in range(2,num + 1):<br>        if num % i == 0:<br>            print_factors(l + [i], num &#47; i)<br><br>def print_factors_all(num):<br>    for i in range(1, num+1) :<br>        if num % i == 0:<br>            print_factors([i], num &#47; i)<br><br><br>def main():<br><br>    num = 4<br>    try:<br>        opts, args = getopt.getopt(sys.argv[1:], &quot;hn:&quot;, [&quot;help&quot;, &quot;num=&quot;])<br>    except getopt.GetoptError:<br>        print(&quot;usage: &quot; + sys.argv[0] + &quot; -n number&quot;)<br>        sys.exit(2)<br><br>    for opt, arg in opts:<br>        if opt in (&quot;-h&quot;, &quot;--help&quot;):<br>            print(&quot;usage: &quot; + sys.argv[0] + &quot; -n number&quot;)<br>            sys.exit()<br>        elif opt in (&quot;-n&quot;, &quot;--num&quot;):<br>            num = int(arg)<br><br>    print_factors_all(num)<br><br><br>if __name__ == &quot;__main__&quot;:<br>    main()<br>------------------------------------------<br><br>python pyFactor.py -n 30<br>1*2*3*5<br>1*2*5*3<br>1*2*15<br>1*3*2*5<br>1*3*5*2<br>1*3*10<br>1*5*2*3<br>1*5*3*2<br>1*5*6<br>1*6*5<br>1*10*3<br>1*15*2<br>1*30<br>2*3*5<br>2*5*3<br>2*15<br>3*2*5<br>3*5*2<br>3*10<br>5*2*3<br>5*3*2<br>5*6<br>6*5<br>10*3<br>15*2<br>30*1","like_count":0},{"had_liked":false,"id":248786,"user_name":"冉冉","can_delete":false,"product_type":"c1","uid":1441033,"ip_address":"","ucode":"51FCB3ED5A85D7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/SBoicEsX0vbhwwDas5LbRGSy5Miba37hBXYYd9TJyHepUfIpr105WFPlCFkxlvKWfTgpLODkb6sswkTEpALANlPw/132","comment_is_top":false,"comment_ctime":1600309851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600309851","product_id":100021201,"comment_content":"JS实现：<br>&#47;**<br> * @params &lt;Number&gt; total 乘积<br> * @params &lt;Array&gt; multipliers 已乘数 <br> *&#47;<br><br>function split(total, multipliers) {<br>    if (total === 1) {<br>        let result = &#39;&#39;<br>        multipliers.forEach((item) =&gt; {<br>            result += item + &#39;×&#39;<br>        })<br>        console.log(multipliers.includes(1) ? result.substring(0, result.length - 1) : result + &#39;1&#39;)<br>        return<br>    }<br>    if (!Number.isInteger(total) || total &lt; 1) {<br>        return<br>    }<br>    for (let i = 1; i &lt;= total; i++){<br>        if (i === 1 &amp;&amp; multipliers.includes(1)) {<br>            continue<br>        }<br>        split(total&#47;i, [...multipliers, i])<br>    }<br>}<br>split(8, [])<br><br>输出：<br>1×2×2×2<br>1×2×4<br>1×4×2<br>1×8<br>2×1×2×2<br>2×1×4<br>2×2×1×2<br>2×2×2×1<br>2×4×1<br>4×1×2<br>4×2×1<br>8×1","like_count":0},{"had_liked":false,"id":248628,"user_name":"Geek_7ce528","can_delete":false,"product_type":"c1","uid":2184931,"ip_address":"","ucode":"C172C5C5B569E5","user_header":"","comment_is_top":false,"comment_ctime":1600246373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600246373","product_id":100021201,"comment_content":"大部分迭代算法有两个优化的手段：<br>1. 通过缓存已经计算过的结果，避免重复计算；<br>2. 通过复用存储结果的数据结构，避免创建数据结构的内存开销；<br><br>1 应该还比较好理解，主要是绝大部分人的算法没有考虑 2，比如对于 javascript 解法来说，当提供的参数较大的时候，算法可能会产生巨大的性能下降。","like_count":0},{"had_liked":false,"id":246209,"user_name":"hsq","can_delete":false,"product_type":"c1","uid":2057863,"ip_address":"","ucode":"AE1BBA2A26B0A7","user_header":"https://static001.geekbang.org/account/avatar/00/1f/66/87/30198e42.jpg","comment_is_top":false,"comment_ctime":1599209072,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599209072","product_id":100021201,"comment_content":"import copy<br><br>def lesson5_2_decomposition(value, rst=[]):<br>    if value == 1:<br>        if 1 in rst:<br>            print(rst)<br>        else:<br>            rst.append(1)<br>            print(rst)<br>        return<br>    else:<br>        for i in range(1, value+1):<br>            if value % i == 0:<br>                new_rst = copy.deepcopy(rst)<br>                if i == 1 and 1 in rst:<br>                    continue                    <br>                new_rst.append(i)            <br>                new_value = int(copy.deepcopy(value&#47;i))<br>                lesson5_2_decomposition(new_value, new_rst)<br><br>lesson5_2_decomposition(8)<br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[1, 8]<br>[2, 1, 2, 2]<br>[2, 1, 4]<br>[2, 2, 1, 2]<br>[2, 2, 2, 1]<br>[2, 4, 1]<br>[4, 1, 2]<br>[4, 2, 1]<br>[8, 1]<br>","like_count":0},{"had_liked":false,"id":238232,"user_name":"chrischen","can_delete":false,"product_type":"c1","uid":1175641,"ip_address":"","ucode":"ACD53B51B9590B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f0/59/40cf5493.jpg","comment_is_top":false,"comment_ctime":1596098746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596098746","product_id":100021201,"comment_content":"python版<br><br>def fn(n):<br>    if n == 1:<br>        return [(1,)]<br>    results = []<br>    for i in range(1, n &#47;&#47; 2 + 1):<br>        if n % i == 0:<br>            div = n &#47;&#47; i<br>            all_combinations = fn(i)<br>            for comb in all_combinations:<br>                results.append((div,) + comb)<br>                results.append(comb + (div,))<br>    results.append((n,))<br>    return set(results)<br><br><br>if __name__ == &quot;__main__&quot;:<br>    results = fn(8)<br>    for res in results:<br>        print(&quot;x&quot;.join(str(i) for i in res))<br><br>output:<br>2x2x2<br>8x1<br>2x1x4<br>2x1x2x2<br>2x2x1x2<br>2x2x2x1<br>8<br>4x2x1<br>1x8<br>1x2x4<br>1x2x2x2<br>1x4x2<br>4x2<br>2x4x1<br>4x1x2<br>2x4","like_count":0},{"had_liked":false,"id":230362,"user_name":"Mr.J","can_delete":false,"product_type":"c1","uid":1267172,"ip_address":"","ucode":"372D8C614F6C3D","user_header":"https://static001.geekbang.org/account/avatar/00/13/55/e4/7061abd5.jpg","comment_is_top":false,"comment_ctime":1593354979,"is_pvip":false,"replies":[{"id":"85056","content":"是的，如果只是要最优解，可以考虑动态规划，这个后面也有介绍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1593403847,"ip_address":"","comment_id":230362,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593354979","product_id":100021201,"comment_content":"老师，当总和比较大的时候，这个递归的时间复杂度很大吧，类似问题，比如猴子跳台阶，试过这个方法，很耗时","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499851,"discussion_content":"是的，如果只是要最优解，可以考虑动态规划，这个后面也有介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593403847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229418,"user_name":"木叶","can_delete":false,"product_type":"c1","uid":2035530,"ip_address":"","ucode":"D4330399444F72","user_header":"https://static001.geekbang.org/account/avatar/00/1f/0f/4a/b74386b2.jpg","comment_is_top":false,"comment_ctime":1592989497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592989497","product_id":100021201,"comment_content":"def _mian(_amount, _list):<br>    _sorts = [1, 2, 5, 10]<br>    _res = 0<br>    if _amount == 0: <br>        print _list    ## print all_array <br>        return 1<br><br>    for i in _sorts:<br>        if _amount &gt;= i:<br>            _list.append(i)<br>            _array = _mian(_amount - i, _list)<br>            _list.remove(i)<br>            _res = _res + _array  ## sum <br>    return _res<br><br><br><br>## 钱币分类<br>aa = []<br>print _mian(10, aa)","like_count":0},{"had_liked":false,"id":228153,"user_name":"浩然","can_delete":false,"product_type":"c1","uid":1378201,"ip_address":"","ucode":"FC771E92869796","user_header":"https://static001.geekbang.org/account/avatar/00/15/07/99/2c12c56c.jpg","comment_is_top":false,"comment_ctime":1592567770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592567770","product_id":100021201,"comment_content":"JavaScript:   <br><br>let arr = [];<br>let rewards = [1, 2, 5, 10];<br>let total = 3;<br><br>&#47;**<br> * @description 使用函数的递归（嵌套）调用，找出所有可能的组合<br> * @param {*} totalReward - 总金额<br> * @param {*} res - 保存当前的解<br> *&#47;<br>function get(totalReward, res) {<br>  if (totalReward === 0) { &#47;&#47; 如果结果等于0 表示可以<br>    arr.push(res);<br>    console.log(&#39;------&#39;);<br>    return false;<br>  }<br><br>  if (totalReward &lt; 0) {<br>    return false;<br>  } else {<br>    for (let i = 0; i &lt; rewards.length; i += 1) {<br>      console.log(&#39;totalReward::::&#39;, totalReward);<br>      console.log(&#39;rewards[i]::::&#39;, rewards[i]);<br>      if (totalReward === total) { &#47;&#47; 如果totalReward回到总数 重置一下res<br>        res = [];<br>      } else {<br>        res = [...res];<br>      }<br>      res.push(rewards[i]);<br>      get(totalReward - rewards[i], res);<br>    }<br>  }<br>}<br><br>get(total, []);<br><br>console.log(arr);<br>","like_count":0},{"had_liked":false,"id":226030,"user_name":"大豆","can_delete":false,"product_type":"c1","uid":1350130,"ip_address":"","ucode":"BC78EF2336DBD0","user_header":"https://static001.geekbang.org/account/avatar/00/14/99/f2/c74d24d7.jpg","comment_is_top":false,"comment_ctime":1591932064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591932064","product_id":100021201,"comment_content":"    public static void get_(long currValue, int totalValue, ArrayList&lt;Integer&gt; result) {<br>        if (currValue == totalValue) {<br>            if (!result.contains(1)) result.add(1);<br>            System.out.println(result);<br>        } else if (currValue &lt; totalValue) {<br>            for (int i = 0; i &lt; totalValue; i++) {<br>                &#47;&#47;1需要做特殊处理<br>                if (result.contains(i + 1)) continue;<br>                ArrayList&lt;Integer&gt; newResult = (ArrayList&lt;Integer&gt;) result.clone();<br>                newResult.add((i + 1));<br>                get_(currValue * (i + 1), totalValue, newResult);<br>            }<br>        }<br>    }<br><br>    public static void get__(int totalValue, ArrayList&lt;Integer&gt; result) {<br>        if (totalValue == 1) {<br>            if (!result.contains(1)) result.add(1);<br>            System.out.println(result);<br>        } else {<br>            for (int i = totalValue; i &gt; 0; i--) {<br>                if (totalValue % i &gt; 0) continue;<br>                if (result.contains(i)) continue;<br>                ArrayList&lt;Integer&gt; newResult = (ArrayList&lt;Integer&gt;) result.clone();<br>                newResult.add(i);<br>                get__(totalValue &#47; i, newResult);<br>            }<br>        }<br>    }<br><br>结果：<br>[1, 2, 4]<br>[1, 4, 2]<br>[1, 8]<br>[2, 1, 4]<br>[2, 4, 1]<br>[4, 1, 2]<br>[4, 2, 1]<br>[8, 1]<br>--------------------------------------<br>[8, 1]<br>[4, 2, 1]<br>[4, 1, 2]<br>[2, 4, 1]<br>[2, 1, 4]<br>[1, 8]<br>[1, 4, 2]<br>[1, 2, 4]","like_count":0},{"had_liked":false,"id":223286,"user_name":"lcqbug","can_delete":false,"product_type":"c1","uid":1268609,"ip_address":"","ucode":"08FA17F21BCEC5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbyHPGNLu9sDQOs1V6brMcDwia55pyIlP9n62oO6IYS6kIFDnOSON4ugSeBSy6WhDUnYyJC6vtnHQ/132","comment_is_top":false,"comment_ctime":1591056140,"is_pvip":false,"replies":[{"id":"82608","content":"一种简单的优化是后处理，进行去重。也可以是每一步都将目前的结果进行排序，如果发现到第n-1步重复了，就取消","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1591411688,"ip_address":"","comment_id":223286,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591056140","product_id":100021201,"comment_content":"<br>[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]<br>[1, 1, 1, 1, 1, 1, 1, 1, 2]<br>[1, 1, 1, 1, 1, 1, 1, 2, 1]<br>[1, 1, 1, 1, 1, 1, 2, 1, 1]<br>[1, 1, 1, 1, 1, 1, 2, 2]<br>...<br>[5, 5]<br>纸币面额的问题<br>[1, 1, 1, 1, 1, 1, 1, 1, 2]<br>[1, 1, 1, 1, 1, 1, 1, 2, 1]<br>这两种情况如果看成是一种情况，那么该怎么思考🤔，该如何编程呢？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497087,"discussion_content":"一种简单的优化是后处理，进行去重。也可以是每一步都将目前的结果进行排序，如果发现到第n-1步重复了，就取消","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591411688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220519,"user_name":"轻风悠扬","can_delete":false,"product_type":"c1","uid":1319215,"ip_address":"","ucode":"F2276CE113BED1","user_header":"https://static001.geekbang.org/account/avatar/00/14/21/2f/b29e8af8.jpg","comment_is_top":false,"comment_ctime":1590276276,"is_pvip":true,"replies":[{"id":"81362","content":"很好的实践","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1590279943,"ip_address":"","comment_id":220519,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590276276","product_id":100021201,"comment_content":"我试着按照老师的课上代码的思路用java写了一下。 <br>import java.util.ArrayList;<br>import java.util.Scanner;<br><br>public class Lesson5_sikao {<br>    &#47;**<br>     * 一个整数可以被分解为多个整数的乘积，例如，6 可以分解为 2x3。请使用递归编程的方法，<br>     * 为给定的整数 n，找到所有可能的分解（1 在解中最多只能出现 1 次）。例如，输入 8，<br>     * 输出是可以是 1x8, 8x1, 2x4, 4x2, 1x2x2x2, 1x2x4, ……<br>     *&#47;<br><br>    private static void print_results(int user_input_number, ArrayList&lt;Integer&gt; results){<br><br>        &#47;&#47; Define the ending condition<br>        if(user_input_number == 1 ){<br>            System.out.println(results);<br>            return;<br>        } else {<br>            for (Integer i=1; i&lt;=user_input_number;i++) {<br>                if (results.contains(1) &amp;&amp; i==1){<br>                    continue;<br>                }<br>                ArrayList&lt;Integer&gt; new_results = (ArrayList&lt;Integer&gt;) results.clone();<br>                if (user_input_number % i == 0) {<br>                    new_results.add(i);<br>                    print_results(user_input_number&#47;i,new_results);<br>                }<br>                else continue;<br>            }<br>        }<br>    }<br><br>    public static void main(String[] args) {<br>        System.out.println(&quot;Please type in a number: &quot;);<br>        Scanner user_input = new Scanner(System.in);<br>        int user_input_number = 0;<br>        try {<br>            user_input_number = Integer.valueOf(user_input.nextLine());<br>        } catch(NumberFormatException exc){<br>            System.out.println(&quot;Please input a valid number&quot;);<br>            System.exit(1);<br>        }<br>        print_results(user_input_number, new ArrayList&lt;Integer&gt;());<br>    }<br>}<br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496163,"discussion_content":"很好的实践","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590279943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220136,"user_name":"Mr.J","can_delete":false,"product_type":"c1","uid":1267172,"ip_address":"","ucode":"372D8C614F6C3D","user_header":"https://static001.geekbang.org/account/avatar/00/13/55/e4/7061abd5.jpg","comment_is_top":false,"comment_ctime":1590167779,"is_pvip":false,"replies":[{"id":"81364","content":"能将猴子跳台阶的问题具体描述一下吗？我们来看看如何优化","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1590280037,"ip_address":"","comment_id":220136,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590167779","product_id":100021201,"comment_content":"老师，这种题类似于猴子跳台阶问题，求几种方式，之前面试遇到过一次，但是用本课中讲解的方法，不适合统计一共有几种解法，采用了一个外部变量来统计，在之前打印的地方做了累加，还有别的方式嘛？<br>而且还有个问题是，这个解法时间复杂度特别高，当总是变大时，消耗的时间呈指数增长","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496054,"discussion_content":"能将猴子跳台阶的问题具体描述一下吗？我们来看看如何优化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590280037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217369,"user_name":"蓝色时分","can_delete":false,"product_type":"c1","uid":1145440,"ip_address":"","ucode":"CF38C9B8DCC128","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/60/f6ebb9d3.jpg","comment_is_top":false,"comment_ctime":1589471001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589471001","product_id":100021201,"comment_content":"```<br>from typing import *<br><br>def decompose(num, result: List):<br>    if num == 1:<br>        return<br><br>    i = 1<br>    while i &lt;= num:<br>        if i==1 and 1 in result:<br>            i = i +1<br>            continue<br><br>        if num %i ==0:<br>            if 1 in result and (i==1 or num&#47;&#47;i==1):<br>                pass<br>            else:<br>                print([i,num&#47;&#47;i] + result)<br>            decompose(num&#47;&#47;i, [i] + result)<br>        i = i+1<br><br><br><br>result = []<br>decompose(8, result)<br>```","like_count":0},{"had_liked":false,"id":217246,"user_name":"夢梦","can_delete":false,"product_type":"c1","uid":1104830,"ip_address":"","ucode":"39894E1C572718","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/be/fbec5322.jpg","comment_is_top":false,"comment_ctime":1589447883,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589447883","product_id":100021201,"comment_content":"let getResults = (n, result) =&gt; {<br>    debugger<br>    &#47;&#47; 满足条件，输出结果<br>    if (n === 1) {<br>        console.log(result);<br>        return<br>    }<br>    &#47;&#47; 不是满足条件的解<br>    if (n % 1 !== 0) {<br>        return<br>    }<br>    for(let i = 1; i &lt;= n; i ++) {<br>        if (i === 1 &amp;&amp; result.includes(1)) continue<br>        let _result = [...result]<br>        _result.push(i)<br>        getResults(n &#47; i, _result)<br>    }<br>}","like_count":0},{"had_liked":false,"id":215519,"user_name":"翡冷翠","can_delete":false,"product_type":"c1","uid":1326971,"ip_address":"","ucode":"42FFE0F7501D56","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcmZIPiaKWfMosmDmkejiac8TDhJKz3cygJ2pRJIBHmoeUCNUssSmjETAV9dyozW6c0y8TibNCXqd8Q/132","comment_is_top":false,"comment_ctime":1589010097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589010097","product_id":100021201,"comment_content":"public class DivisorResolve {<br><br>\tprivate void resolve(Integer num, List&lt;Integer&gt; combination, boolean hasOne) {<br><br>\t\tif (num == 1 &amp;&amp; hasOne) {<br>\t\t\tSystem.out.println(combination);<br>\t\t\treturn;<br>\t\t}<br><br>\t\tint start = hasOne ? 2 : 1;<br>\t\tfor (int i = start; i &lt;= num; i++) {<br>\t\t\tList&lt;Integer&gt; temp = new ArrayList&lt;&gt;(combination);<br>\t\t\tif (num % i == 0) {<br>\t\t\t\ttemp.add(i);<br>\t\t\t\tresolve(num &#47; i, temp, i == 1 ? true : hasOne);<br>\t\t\t}<br>\t\t}<br>\t}<br><br>\tpublic static void main(String[] args) {<br>\t\tDivisorResolve res = new DivisorResolve();<br>\t\tList&lt;Integer&gt; combination = new ArrayList&lt;&gt;();<br>\t\tres.resolve(12, combination, false);<br>\t}<br>}<br>","like_count":0},{"had_liked":false,"id":214626,"user_name":"Mr.L","can_delete":false,"product_type":"c1","uid":1861785,"ip_address":"","ucode":"ABE2D44AA9B8E5","user_header":"","comment_is_top":false,"comment_ctime":1588774577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588774577","product_id":100021201,"comment_content":"class combination:<br>    def combination(self, remainder_num, new_combine):<br>        if remainder_num == 1:<br>            print(new_combine)<br>            return<br>        nums = range(2, remainder_num+1)<br>        for i in nums:<br>            if remainder_num % i == 0:<br>                new_combine_n = new_combine.copy()<br>                new_combine_n.append(i)<br>                self.combination(int(remainder_num&#47;i), new_combine_n)<br>#test<br>result = [1]<br>combination().combination(8,result)","like_count":0},{"had_liked":false,"id":210661,"user_name":"易","can_delete":false,"product_type":"c1","uid":1103838,"ip_address":"","ucode":"17B55269FDAD89","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/de/bb7e0bb3.jpg","comment_is_top":false,"comment_ctime":1587804529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587804529","product_id":100021201,"comment_content":"思考题：<br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[1, 8]<br>[2, 1, 2, 2]<br>[2, 1, 4]<br>[2, 2, 1, 2]<br>[2, 2, 2, 1]<br>[2, 4, 1]<br>[4, 1, 2]<br>[4, 2, 1]<br>[8, 1]<br>public void getSolutions(int n){<br>        solution(n, new ArrayList&lt;Integer&gt;());<br>    }<br><br>    public void solution(int n, ArrayList&lt;Integer&gt; result){<br>        if( n == 1){<br>            if( !result.contains(1)){<br>                result.add(1);<br>            }<br>            System.out.println(result);<br>        }else {<br>            for(int i=1; i&lt;=n; i++ ){<br>                ArrayList solutions = (ArrayList&lt;Integer&gt;)result.clone();<br>                if(i == 1 &amp;&amp; solutions.contains(1)){<br>                    continue;<br>                }<br>                if( n&#47;i &gt;=1 &amp;&amp; n%i == 0){<br>                    solutions.add(i);<br>                    solution(n&#47;i, solutions);<br>                }<br><br>            }<br>        }<br>    }","like_count":0},{"had_liked":false,"id":207865,"user_name":"Albatross-G","can_delete":false,"product_type":"c1","uid":1936808,"ip_address":"","ucode":"094D197327468D","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8d/a8/957e57ae.jpg","comment_is_top":false,"comment_ctime":1587200020,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587200020","product_id":100021201,"comment_content":"大一c语言小白的一些拙见：（关于硬币凑钱问题）<br><br><br>#include &quot;stdio.h&quot;\r\rint distri(int title,int *p,int result[10],int n)\r{\r\tint i;\r\tint coin[4]={1,2,5,10};\r\t\r\tif(title==0)\r\t{\r\t\tfor(i=0;result[i]!=&#39;\\0&#39;;i++)\r\t\t{\r\t\t\tprintf(&quot;%d,&quot;,result[i]);\r\t\t}\r\t\tprintf(&quot;\\n&quot;);\r\t\tn++;\r\t\treturn n;\r\t\t&#47;&#47;p--;\r\t}\r\t\r\tif(title&lt;0)\r\t{\r              &#47;&#47;p - -；\r\t\treturn n;\r\t}\r\r\t\r\tif(title&gt;0)\r\t{\r\t\tfor(i=0;i&lt;4;i++,p--)&#47;&#47;p--必须在此处，不能在上述注释的位置，因为那是另一个函数，返回后对现在这个函数没有影响 \r\t\t{\r\t\t\t*p=coin[i];\r\t\t\t*(p+1)=&#39;\\0&#39;;\r\t\t\tp++;\r\t\t\tn=distri(title-coin[i],p,result,n);\r\t\t\r\t\t}\r\t}\r}\r\r\rvoid main()\r{\r\tint result[10];\r\tint *p;\r\tint title=10;\r\tint n;\r\tp = result;\r\tn=distri(title,p,result,n);\r\tprintf(&quot;\\nWe have %d ways to distribute.\\n&quot;,n); \r}","like_count":0},{"had_liked":false,"id":201112,"user_name":"云淡风轻","can_delete":false,"product_type":"c1","uid":1121817,"ip_address":"","ucode":"D6903A0FCEBC58","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/19/a235f31d.jpg","comment_is_top":false,"comment_ctime":1585717972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585717972","product_id":100021201,"comment_content":"来一个不重复版本。<br><br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>vector&lt;int&gt; org_rewards{10, 5, 2, 1};<br>int num = 0;<br>void show_vector(vector&lt;int&gt; &amp;result) {<br>  cout &lt;&lt; ++num &lt;&lt; &quot; : &quot;;<br>  for (int &amp;v : result) {<br>    cout &lt;&lt; v &lt;&lt; &quot; , &quot;;<br>  }<br>  cout &lt;&lt; endl;<br>}<br><br>void get_groups(int total_reward, vector&lt;int&gt; result,<br>                const vector&lt;int&gt; &amp;rewards) {<br>  if (total_reward == 0) {<br>    show_vector(result);<br>  } else if (total_reward &gt; 0) {<br>    for (int i = 0; i &lt; rewards.size(); i++) {<br>      vector&lt;int&gt; new_result = result;<br>      new_result.push_back(rewards[i]);<br>      get_groups(total_reward - rewards[i], new_result,<br>                 vector&lt;int&gt;(rewards.begin() + i, rewards.end()));<br>    }<br>  }<br>}<br><br>int main() {<br>  get_groups(8, vector&lt;int&gt;(), org_rewards);<br><br>  cout &lt;&lt; &quot;count groups : &quot; &lt;&lt; num &lt;&lt; endl;<br>}","like_count":0},{"had_liked":false,"id":199323,"user_name":"海晏","can_delete":false,"product_type":"c1","uid":1915554,"ip_address":"","ucode":"38E998D2036115","user_header":"https://static001.geekbang.org/account/avatar/00/1d/3a/a2/d9f736c6.jpg","comment_is_top":false,"comment_ctime":1585486755,"is_pvip":false,"replies":[{"id":"75042","content":"组合会在后面的章节有介绍。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1585629208,"ip_address":"","comment_id":199323,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585486755","product_id":100021201,"comment_content":"今天写了第一个递归的python函数，初步理解了一点点迭代与递归的区别，比如在数列求和中，迭代是从前向后累加，递归从后向前把后一步的结果作为前一步的参数，一步一步回归起点。<br>在写代码的过程中新学了new的用法，由此知道了以前看到的“没有女朋友就new一个”是啥意思了。<br>另外，还存有两个疑惑：一是为什么大家这里都在用copy浅拷贝？<br>二是我程序输出的结果是排列，如果想要输出组合应该怎么办？<br>import copy<br>rewards=[1,2,5,10]<br><br><br>def solutions (total_reward,result=[]):<br>    if total_reward == 0:<br>        print(result)<br>        return <br>    elif total_reward&lt;0:<br>        return<br>    else:<br>        for i in range(len(rewards)):<br>            newresult=copy.copy(result)<br>            newresult.append(rewards[i])<br>            solutions(total_reward-rewards[i],newresult)<br><br>solutions(10)","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489819,"discussion_content":"组合会在后面的章节有介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585629208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":198297,"user_name":"刘桢","can_delete":false,"product_type":"c1","uid":1482815,"ip_address":"","ucode":"3BFAB1C9772EB4","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/3f/06b690ba.jpg","comment_is_top":false,"comment_ctime":1585442684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585442684","product_id":100021201,"comment_content":"打开打卡","like_count":0},{"had_liked":false,"id":195147,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1585140912,"is_pvip":false,"replies":[{"id":"74506","content":"是的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1585351023,"ip_address":"","comment_id":195147,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585140912","product_id":100021201,"comment_content":"用归纳法时，初始值不能设置为1，否则就漏掉很多没有1的选项啊，比如5个2。每一步中，都应该考虑初始值分别为小于当前n的所有可选币值。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488988,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585351023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191307,"user_name":"Geek_bb2310","can_delete":false,"product_type":"c1","uid":1926508,"ip_address":"","ucode":"022885B257DEB3","user_header":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","comment_is_top":false,"comment_ctime":1584762009,"is_pvip":false,"replies":[{"id":"75073","content":"这个主要是为了便于读者理解，将结果克隆复制，有些更巧妙的设计可以避免这步","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1585632336,"ip_address":"","comment_id":191307,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584762009","product_id":100021201,"comment_content":"ArrayList&lt;Long&gt; newResult = (ArrayList&lt;Long&gt;)(result.clone()); 可以解释下这句话什么意思吗？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488149,"discussion_content":"这个主要是为了便于读者理解，将结果克隆复制，有些更巧妙的设计可以避免这步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585632336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189018,"user_name":"渣渣辉","can_delete":false,"product_type":"c1","uid":1911235,"ip_address":"","ucode":"730838D9161579","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKIRSxInCiclMszZ21FptlHSHBB2icQSdIbRX2BYdiaEfdicsWxLzqB7h01jhibpLOAu9Hd8SfbZxHBaQg/132","comment_is_top":false,"comment_ctime":1584446956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584446956","product_id":100021201,"comment_content":"这个算是dfs嘛哈哈哈<br>public static void get(long totalReward, ArrayList&lt;Integer&gt; result) {<br>        if (totalReward==1)<br>        {<br>            System.out.println(result);<br>        }<br>        for (int i = 1; i &lt;= totalReward; i++) {<br>            if(i==1&amp;&amp;result.contains(1))<br>                continue;<br>            if(totalReward%i==0)<br>            {<br>                result.add(i);<br>                get(totalReward&#47;i,result);<br>                result.remove(result.size()-1);<br>            }<br>        }<br>    }","like_count":0},{"had_liked":false,"id":187214,"user_name":"喻茂","can_delete":false,"product_type":"c1","uid":1318661,"ip_address":"","ucode":"C8BD8086A17365","user_header":"https://static001.geekbang.org/account/avatar/00/14/1f/05/8a06692e.jpg","comment_is_top":false,"comment_ctime":1584062119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584062119","product_id":100021201,"comment_content":"php示例<br>&lt;?php<br>function decompose($decomposeNum,&amp;$result) {<br>\tif ($decomposeNum == 1) { &#47;&#47; 说明分解完毕<br>\t\tprint_R($result); &#47;&#47; 打印出无一的情况<br>\t\techo &quot;&lt;br&gt;&quot;;<br>\t\t$result[] = 1; &#47;&#47; 加上一的情况<br>\t\tprint_R($result); <br>\t\techo &quot;&lt;br&gt;&quot;;<br>\t} else {<br>\t\t$tempResult = $result; &#47;&#47; 把当前层result的数据记录下来<br>\t\tfor($i=2;$i&lt;=$decomposeNum;$i++) { &#47;&#47; 先不考虑1的情况<br>\t\t\tif ($decomposeNum % $i == 0) {  &#47;&#47; 可以整除，说明是$decomposeNum的质因数<br>\t\t\t\t$result = $tempResult; &#47;&#47; 每次细分之前先初始化为当前层的result数据<br>\t\t\t\t$result[] = $i;<br>\t\t\t\tdecompose($decomposeNum &#47; $i,$result); &#47;&#47; 细分商<br>\t\t\t}<br>\t\t}<br>\t}<br>}<br>$decomposeNum = 20;<br>$result = [];<br>decompose($decomposeNum,$result);<br>","like_count":0},{"had_liked":false,"id":187152,"user_name":"喻茂","can_delete":false,"product_type":"c1","uid":1318661,"ip_address":"","ucode":"C8BD8086A17365","user_header":"https://static001.geekbang.org/account/avatar/00/14/1f/05/8a06692e.jpg","comment_is_top":false,"comment_ctime":1584027174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584027174","product_id":100021201,"comment_content":"php示例<br>&lt;?php<br>function get($totalReward,$reward,&amp;$result) {<br>\tif ($totalReward == 0) { &#47;&#47; 说明刚好<br>\t\tprint_R($result);<br>\t\techo &#39;&lt;br&gt;&#39;;<br>\t} elseif ($totalReward &lt; 0 ) { &#47;&#47; 方案有问题<br>\t\treturn;<br>\t} else { &#47;&#47; 继续细化<br>\t\t$tempResult = $result; &#47;&#47; 把当前层result的数据记录下来<br>\t\tforeach ($reward as $rewardVal) {<br>\t\t\t$result = $tempResult; &#47;&#47; 每次细分之前先初始化为当前层的result数据<br>\t\t\t$result[] = $rewardVal;<br>\t\t\tget($totalReward-$rewardVal,$reward,$result);<br>\t\t}<br>\t}<br>}<br>$totalReward = 10;<br>$reward = [1,2,5,10];<br>$result = [];<br>get($totalReward,$reward,$result);<br>","like_count":0},{"had_liked":false,"id":174074,"user_name":"Me.Gao","can_delete":false,"product_type":"c1","uid":1815189,"ip_address":"","ucode":"CA7696DAB95212","user_header":"https://static001.geekbang.org/account/avatar/00/1b/b2/95/349aef32.jpg","comment_is_top":false,"comment_ctime":1579948237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579948237","product_id":100021201,"comment_content":"python的实现<br><br>def getFactor(num, result = &#39;1&#39;):<br>    &quot;&quot;&quot;find all the factor combination for given integer with recursion<br>    <br>    num: given input integer<br>    result: out that satisfy the requirement<br>    &quot;&quot;&quot;<br>    if (num == 1):<br>        print(result)<br>        return<br>    elif (num &lt; 1):<br>        return<br>    else:<br>        for i in range(num):<br>            quat,rem = divmod(num, i+2)<br>            if rem == 0:<br>                newResult = result + &#39;x&#39; + str(i+2)<br>                getFactor(quat, newResult)<br>","like_count":0},{"had_liked":false,"id":166619,"user_name":"Geek_ad24c4","can_delete":false,"product_type":"c1","uid":1673139,"ip_address":"","ucode":"8F04276CC6F048","user_header":"","comment_is_top":false,"comment_ctime":1577521770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577521770","product_id":100021201,"comment_content":"go版<br>func recursion(n int, result []int) {<br>\tif n == 1 {<br>\t\tif !contain(result, 1) {<br>\t\t\tresult = append(result, 1)<br>\t\t}<br>\t\tfmt.Println(result)<br>\t\treturn<br>\t} else {<br>\t\tfor i := 1; i &lt;= n; i++ {<br>\t\t\tif i == 1 &amp;&amp; contain(result, 1) {<br>\t\t\t\tcontinue<br>\t\t\t}<br>\t\t\tnew_result := make([]int, len(result))<br>\t\t\tcopy(new_result, result)<br>\t\t\tif n%i != 0 {<br>\t\t\t\tcontinue<br>\t\t\t}<br>\t\t\tnew_result = append(new_result, i)<br>\t\t\trecursion(n&#47;i, new_result)<br>\t\t}<br>\t}<br>}","like_count":0},{"had_liked":false,"id":164890,"user_name":"cwtxz","can_delete":false,"product_type":"c1","uid":1778151,"ip_address":"","ucode":"4F35AEDB8F5D5D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BAuQlia9Dc07m3icOkibIqu2lhbnLD6cjgCNE8FSzG5Aj4cd26eRgspicTsWvA7WK1ftlQBD34PYRucZRXML5FA27A/132","comment_is_top":false,"comment_ctime":1577107227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577107227","product_id":100021201,"comment_content":"现在是互联网的时代，很多看起来很智能的技术，其实是统计学的应用。例如搜索引擎、语音识别、OCR、输入法中的智能联想、自然语言处理中的词性标注等等。数学并不只是枯燥的考试题，而是人类理解世界最重要的工具，它既是对自然界事实的总结和归纳，又是抽象思考的结果。如果说科技改变了世界，那数学就是改变了科技。所以 努力吧，钻研数学，一定物超所值。","like_count":0},{"had_liked":false,"id":160387,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1575943625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575943625","product_id":100021201,"comment_content":"1.如何将列出所有可能性的问题（做选择问题）用递归的思路解决。<br>2. 将当前的问题化解为两部分：一个当前所采取的步骤和另一个更简单的问题。<br>3. 递归会使用计算机的函数嵌套调用。而函数的调用本身，就可以保存很多中间状态和变量值，因此极大的方便了编程的处理。","like_count":0},{"had_liked":false,"id":159011,"user_name":"lzm","can_delete":false,"product_type":"c1","uid":1090630,"ip_address":"","ucode":"82B3D16CB65E01","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/46/4c3c5eff.jpg","comment_is_top":false,"comment_ctime":1575515073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575515073","product_id":100021201,"comment_content":"# 思考题<br>import math<br>import copy<br><br>def is_int(n):<br>    return math.modf(n)[0] == 0<br><br>def integerFactorization(n, result):<br>    if n == 1:<br>        if 1 not in result:<br>            result.append(1)<br>        print(result)<br>        return<br>    if not is_int(n):<br>        return<br>    for i in range(1, num+1):<br>        if i == 1 and 1 in result:<br>            continue<br>        newResult = copy.copy(result)<br>        newResult.append(i)<br>        integerFactorization(n&#47;i, newResult)<br><br>result = []<br>num = 8<br>integerFactorization(num, result)<br><br>#####<br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[1, 8]<br>[2, 1, 2, 2]<br>[2, 1, 4]<br>[2, 2, 1, 2]<br>[2, 2, 2, 1]<br>[2, 4, 1]<br>[4, 1, 2]<br>[4, 2, 1]<br>[8, 1]","like_count":0},{"had_liked":false,"id":154888,"user_name":"favorlm","can_delete":false,"product_type":"c1","uid":1120997,"ip_address":"","ucode":"CFD52127AA6E1D","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/e5/6899701e.jpg","comment_is_top":false,"comment_ctime":1574590665,"is_pvip":false,"replies":[{"id":"60342","content":"是的👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1575131296,"ip_address":"","comment_id":154888,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574590665","product_id":100021201,"comment_content":"递归会出现爆栈的问题，这一块可用尾递归来优化。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475606,"discussion_content":"是的👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575131296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150635,"user_name":"Vincent🌫","can_delete":false,"product_type":"c1","uid":1150764,"ip_address":"","ucode":"F7DAF7942417A7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/2c/5c267d3e.jpg","comment_is_top":false,"comment_ctime":1573571734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573571734","product_id":100021201,"comment_content":"package cn.algorithm;<br><br>import java.util.ArrayList;<br><br>public class Recursion02 {<br><br>    public static int[] rewards;<br><br>    static int count = 0;<br><br>    public static void get(int total, ArrayList&lt;Integer&gt; result) {<br>        if (total == 1) {<br>            if(result.size() == 1){<br>                result.add(1);<br>            }<br>            System.out.println(result);<br>            System.out.println();<br>            count++;<br>            return;<br>        } else {<br>            for (int i = 0; i &lt; rewards.length; i++) {<br>                    &#47;&#47;System.err.println(total+&quot;,&quot;+rewards[i]+&quot;,&quot;+i+&quot;,&quot;+rewards.length);<br>                    if (rewards[i] == 1) {<br>                        ArrayList&lt;Integer&gt; newResult = (ArrayList&lt;Integer&gt;) result.clone();<br>                        newResult.add(rewards[i]);<br>                        newResult.add(total);<br>                        get(1, newResult);<br>                    } else if (rewards[i] &gt; 0 &amp;&amp; total % rewards[i] == 0) {<br>                        int newTotal = total &#47; rewards[i];<br>                        ArrayList&lt;Integer&gt; newResult = (ArrayList&lt;Integer&gt;) result.clone();<br>                        newResult.add(rewards[i]);<br>                        get(newTotal, newResult);<br><br>                    }<br>            }<br>        }<br>    }<br><br>    public static void main(String[] args) {<br>        int total = 100;<br>        rewards = new int[total];<br>        for (int i = 1; i &lt;= total; i++) {<br>            rewards[i - 1] = i;<br>        }<br>        System.out.println();<br>        ArrayList&lt;Integer&gt; result = new ArrayList&lt;&gt;();<br>        get(total, result);<br>        System.out.println(count);<br>    }<br>}<br>不知道这样算不算对？","like_count":0},{"had_liked":false,"id":150280,"user_name":"so敏仪","can_delete":false,"product_type":"c1","uid":1545669,"ip_address":"","ucode":"51FE61DB350D03","user_header":"https://static001.geekbang.org/account/avatar/00/17/95/c5/397b3d01.jpg","comment_is_top":false,"comment_ctime":1573491022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573491022","product_id":100021201,"comment_content":"import copy<br>import numpy as np<br><br>class MultiplyCombination():<br>    <br>    def get(self,production,result=[1]):<br>        if production == 1:<br>            print (result)<br>            if len(result) &gt; 2:<br>                result.remove(1)<br>                print (result)<br>            return<br>        elif production &lt; 1:<br>            return<br>        else:<br>            if result[-1] &lt;= production:<br>                for i in np.arange(result[-1],production+1):<br>                    if i!=1 and production % i == 0:<br>                        new_result=copy.copy(result)<br>                        new_result.append(i)<br>                        self.get(production&#47;i,new_result)<br>                <br>test3=MultiplyCombination()<br>test3.get(production=20)<br><br>###output<br>[1, 2, 2.0, 5.0]<br>[2, 2.0, 5.0]<br>[1, 2, 10.0]<br>[2, 10.0]<br>[1, 4, 5.0]<br>[4, 5.0]<br>[1, 20]","like_count":0},{"had_liked":false,"id":140029,"user_name":"G","can_delete":false,"product_type":"c1","uid":1547293,"ip_address":"","ucode":"50D8E1ADAE0330","user_header":"https://static001.geekbang.org/account/avatar/00/17/9c/1d/34c96367.jpg","comment_is_top":false,"comment_ctime":1570790994,"is_pvip":false,"replies":[{"id":"54509","content":"感谢支持，有空我也看看这本屠龙宝刀👍 ","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1571073709,"ip_address":"","comment_id":140029,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570790994","product_id":100021201,"comment_content":"老师，看了你这几篇的解说，好像有我以前读的一本书的感觉，它叫微积分之屠龙宝刀。都讲的深入浅出","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470216,"discussion_content":"感谢支持，有空我也看看这本屠龙宝刀👍 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571073709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139234,"user_name":"鲁小鲁","can_delete":false,"product_type":"c1","uid":1258332,"ip_address":"","ucode":"02683A34EA151E","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/5c/8ea5d4aa.jpg","comment_is_top":false,"comment_ctime":1570590089,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1570590089","product_id":100021201,"comment_content":"golang的实现<br><br>func decompose(n int, result []int) {<br>\t&#47;&#47; 第一步，最终的步骤<br>\tif n == 1 {<br>\t\tresult := append(result, 1)<br>\t\tlog.Println(result)<br>\t\treturn<br>\t}<br><br>\t&#47;&#47; 第二步，递归的逻辑。自顶向下，逐层分解<br>\tfor i := 2; i &lt;= n; i++ {<br>\t\tif n%i == 0 {<br>\t\t\tresultBuf := append(result, i) &#47;&#47;  由于有 4 种情况，需要 clone 当前的解并传入被调用的函数<br>\t\t\tremain := n &#47; i<br>\t\t\tdecompose(remain, resultBuf)<br>\t\t}<br><br>\t}<br><br>}<br><br>func TestDecompose(t *testing.T) {<br>\tvar result []int<br>\tdecompose(12, result)<br>}","like_count":0},{"had_liked":false,"id":139059,"user_name":"鲁小鲁","can_delete":false,"product_type":"c1","uid":1258332,"ip_address":"","ucode":"02683A34EA151E","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/5c/8ea5d4aa.jpg","comment_is_top":false,"comment_ctime":1570537666,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1570537666","product_id":100021201,"comment_content":"golang的实现<br>package recursion<br><br>import (<br>\t&quot;log&quot;<br>\t&quot;testing&quot;<br>)<br><br>var rewards [4]int64<br><br>func get(total int64, result []int64) {<br>\tif total == 0 {<br>\t\tlog.Println(result)<br>\t\treturn<br>\t}<br><br>\tif total &lt; 0 {<br>\t\treturn<br>\t}<br><br>\tfor i := 0; i &lt; len(rewards); i++ {<br>\t\tresultBuf := append(result, rewards[i])<br>\t\tremain := total - rewards[i]<br>\t\tif remain &lt; 0 {<br>\t\t\tgoto Loop<br>\t\t}<br><br>\t\tget(remain, resultBuf)<br>\t}<br>Loop:<br>}<br><br>func TestGet(t *testing.T) {<br>\trewards[0] = 1<br>\trewards[1] = 2<br>\trewards[2] = 5<br>\trewards[3] = 10<br>\tvar result []int64<br><br>\tget(10, result)<br>}","like_count":0},{"had_liked":false,"id":137437,"user_name":"MC","can_delete":false,"product_type":"c1","uid":1004183,"ip_address":"","ucode":"AA0035C9C43516","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/97/4593cda8.jpg","comment_is_top":false,"comment_ctime":1569740443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569740443","product_id":100021201,"comment_content":"Golang 版，只支持非负数。<br><br>package main<br><br>import (<br>\t&quot;fmt&quot;<br>\t&quot;math&quot;<br>\t&quot;strconv&quot;<br>\t&quot;strings&quot;<br>)<br><br>func main() {<br>\tvar num int64 = 8<br>\tfor _, divisors := range factoring(num, 1) {<br>\t\tfmt.Println(num, &quot;=&quot;, stringify(divisors))<br>\t}<br>}<br><br>func stringify(divisors []int64) string {<br>\ts := make([]string, len(divisors))<br>\tfor i, v := range divisors {<br>\t\ts[i] = strconv.FormatInt(v, 10)<br>\t}<br><br>\treturn strings.Join(s, &quot;x&quot;)<br>}<br><br>func factoring(n int64, min int64) [][]int64 {<br>\tif n &lt;= 1 {<br>\t\treturn [][]int64{[]int64{n}}<br>\t}<br><br>\tvar result [][]int64<br>\tvar max = int64(math.Sqrt(float64(n)))<br><br>\tfor d := min; d &lt;= max; d++ {<br>\t\tif n%d == 0 {<br>\t\t\tfor _, divisors := range factoring(n&#47;d, 2) {<br>\t\t\t\tdivisors = append([]int64{d}, divisors...)<br>\t\t\t\tresult = append(result, divisors)<br>\t\t\t}<br>\t\t}<br>\t}<br><br>\treturn append(result, []int64{n})<br>}<br>","like_count":0},{"had_liked":false,"id":137251,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1569667375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569667375","product_id":100021201,"comment_content":"我用Python写了一个程序，可能写得不是很好，请老师指正<br>#乘法因子分解<br>def deFactor(N, Result):<br>#BEGIN<br><br>    global ExpressSet<br>    <br>    for i in range(N):<br>        F = i + 1<br>        if N%F == 0:<br>            F1 = F<br>            F2 = N &#47;&#47; F1<br>            #输出结果<br>            express = &#39;{}*{}&#39;.format(F1, F2)<br>            if Result != []:<br>                express +=  &#39;*&#39;+ &#39;*&#39;.join([str(x) for x in Result])<br><br>            if express not in ExpressSet:<br>                print(express)<br>                ExpressSet.add(express)<br><br>            #如果F1不是质数，且之前未被分解过，则继续递归分解因子F1<br>            if F1 not in [1,2,N]:<br>                newResult = Result.copy()<br>                newResult.append(F2)<br>                deFactor(F1, newResult)<br>            <br>            #如果F2不是质数，则继续递归分解因子F2<br>            if F2 not in [1,2,N]:<br>                newResult = Result.copy()<br>                newResult.append(F1)<br>                deFactor(F2, newResult)<br>#END<br><br>N = input(&quot;输入要分解的数字：&quot;)<br>ExpressSet = set()  #已输出过的结果放入该集合中，防止重复输出<br>deFactor(int(N),[])","like_count":0},{"had_liked":false,"id":126838,"user_name":"[小狗]","can_delete":false,"product_type":"c1","uid":1237070,"ip_address":"","ucode":"090AEAC8A86134","user_header":"https://static001.geekbang.org/account/avatar/00/12/e0/4e/c266bdb4.jpg","comment_is_top":false,"comment_ctime":1566487719,"is_pvip":false,"replies":[{"id":"47041","content":"能再解释一下这个问题吗？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1566571857,"ip_address":"","comment_id":126838,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566487719","product_id":100021201,"comment_content":"问下 老师 i是如何取0除外的数呢 我就觉得i不会循环啊。烧脑","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464193,"discussion_content":"能再解释一下这个问题吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566571857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125118,"user_name":"N0mansky","can_delete":false,"product_type":"c1","uid":1265940,"ip_address":"","ucode":"86DC16096C4F5F","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/14/c800c859.jpg","comment_is_top":false,"comment_ctime":1566093401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566093401","product_id":100021201,"comment_content":"package main<br><br>import (<br>\t&quot;fmt&quot;<br>)<br><br>func intInSlice(t int, s []int) bool {<br>\tfor _, b := range s {<br>\t\tif t == b {<br>\t\t\treturn true<br>\t\t}<br>\t}<br>\treturn false<br>}<br><br>func factor(num int, rst []int) {<br>\tif num == 1 {<br>\t\tfmt.Println(rst)<br>\t\tif !intInSlice(1, rst) {<br>\t\t\trst := append(rst, 1)<br>\t\t\tfmt.Println(rst)<br>\t\t}<br>\t} else if num &lt; 0 {<br>\t\treturn<br><br>\t} else {<br>\t\tfor i := 1; i &lt;= num; i++ {<br>\t\t\tif (i == 1 &amp;&amp; ! intInSlice(i, rst)) || (i != 1 &amp;&amp; num%i == 0) {<br>\t\t\t\tnewRst := make([]int, len(rst))<br>\t\t\t\tcopy(newRst, rst)<br>\t\t\t\tnewRst = append(newRst, i)<br>\t\t\t\tfactor(num&#47;i, newRst)<br><br>\t\t\t}<br><br>\t\t}<br>\t}<br><br>}<br>func main() {<br>\trst := make([]int, 0)<br>\tfactor(8, rst)<br>}<br>&#47;*根据其他同学，重写了 go 版*&#47;","like_count":0},{"had_liked":false,"id":124231,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1565838520,"is_pvip":false,"replies":[{"id":"45670","content":"对，这是个很好的方向👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1565886460,"ip_address":"","comment_id":124231,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565838520","product_id":100021201,"comment_content":"数学归纳法一般返回一个值，也就是标量，也可以推而广之返回一个矢量或者矩阵，这个推广之后数学归纳法的应用场景就更广泛了。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463073,"discussion_content":"对，这是个很好的方向👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565886460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123619,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1565714179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565714179","product_id":100021201,"comment_content":"--- java版本--<br><br><br>    static boolean use1 = false;<br>    static void work(int n, ArrayList&lt;Integer&gt; list) {<br><br>        if (n == 0)<br>            return;<br><br>        if (n == 1) {<br>            if (use1 == false) {<br>                list.add(1);<br>            }<br><br>            StringBuilder ans = new StringBuilder();<br>            for (int i = 0; i &lt; list.size() - 1; i++) {<br>                ans.append(list.get(i)).append(&quot;*&quot;);<br>            }<br>            ans.append(list.get(list.size()-1));<br>            System.out.println(ans.toString());<br>            return;<br>        }<br><br>        for (int i = 1; i &lt;= n; i++) {<br><br>            if (i == 1 &amp;&amp; use1 == false) {<br>                use1 = true;<br>                ArrayList&lt;Integer&gt; newlist = (ArrayList&lt;Integer&gt;)list.clone();<br>                newlist.add(i);<br>                work(n , newlist);<br>                use1 = false;<br>                continue;<br>            }<br><br>            if (i == 1)<br>                continue;<br><br>            if (n % i == 0) {<br>                ArrayList&lt;Integer&gt; newlist = (ArrayList&lt;Integer&gt;)list.clone();<br>                newlist.add(i);<br>                work(n &#47; i, newlist);<br>            }<br>        }<br>    }<br>","like_count":0},{"had_liked":false,"id":117152,"user_name":"依韵","can_delete":false,"product_type":"c1","uid":1153762,"ip_address":"","ucode":"02F5BED8BE0F6E","user_header":"https://static001.geekbang.org/account/avatar/00/11/9a/e2/271e0caf.jpg","comment_is_top":false,"comment_ctime":1563977309,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1563977309","product_id":100021201,"comment_content":"我的JavaScript实现如下：<br><br>```js<br>&#47;**<br> * 赏金问题<br> * 给的钱的种类 [1, 2, 5, 10] 和一个目标 求解所有的排列（未去重 不算组合）<br> *<br> * @param {number} aim 目标金额<br> * @returns<br> *&#47;<br>function getAllPlan(aim) {<br>  const moneyArr = [1, 2, 5, 10];<br>  const allPlan = [];<br>  _getPlan(aim);<br>  console.log(`共计 ${allPlan.length} 种排列方案。`);<br>  return allPlan;<br><br>  &#47;**<br>   * 获取一种方案<br>   * @param {number} aim 当前还差多少钱<br>   * @param {number []} [planArr=[]] 当前已经选择的方案<br>   *&#47;<br>  function _getPlan(aim, planArr = []) {<br>    if (aim === 0) {<br>      &#47;&#47; 已经达到目标 则表示当前的方案就是符合的一种<br>      &#47;&#47;   console.log(planArr);<br>      allPlan.push(planArr.join(&#39;,&#39;));<br>      planArr = null;<br>      return;<br>    }<br>    &#47;&#47; 不对的方案<br>    if (aim &lt; 0) {<br>      planArr = null;<br>      return;<br>    }<br><br>    &#47;&#47; 还不确定的方案<br>    &#47;&#47; 逐个尝试每一种钱<br>    moneyArr.forEach(m =&gt; {<br>      &#47;&#47; 这里做个优化 避免一些不必要的尝试 比如还差一块钱 2块的肯定就不用试了<br>      if (m &lt;= aim) {<br>        _getPlan(aim - m, [...planArr, m]);<br>      }<br>    });<br>  }<br>}<br><br>getAllPlan(10);<br><br>```<br><br>如同老师的例子一样，没有考虑去重的问题，这种可以理解为排列组合中的排列。更真实的方案应该是指组合。<br><br>像解求解这种方案，随着输入的增加，方案数目的增长速度非常快。<br><br>以我上面的代码在浏览器中，输入为40的时候就内存溢出了。 这种类似的问题应该如何使用数学方法就进行优化？","like_count":0},{"had_liked":false,"id":110473,"user_name":"雁影松","can_delete":false,"product_type":"c1","uid":1441020,"ip_address":"","ucode":"CC826F8B56E273","user_header":"https://static001.geekbang.org/account/avatar/00/15/fc/fc/5a50af20.jpg","comment_is_top":false,"comment_ctime":1562286011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562286011","product_id":100021201,"comment_content":"子父结构的数据，组建树形结构","like_count":0},{"had_liked":false,"id":108822,"user_name":"少盐","can_delete":false,"product_type":"c1","uid":1305743,"ip_address":"","ucode":"BCC7E264B75702","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/8f/8299495a.jpg","comment_is_top":false,"comment_ctime":1561889831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561889831","product_id":100021201,"comment_content":"竟然没看懂，今天在极客时间已经看了七八篇文章了，估计累了，明天再看一遍，换换脑子，去看看文学书","like_count":0},{"had_liked":false,"id":108273,"user_name":"🐻🔫🐸","can_delete":false,"product_type":"c1","uid":1308880,"ip_address":"","ucode":"40BABFD9D358BF","user_header":"https://static001.geekbang.org/account/avatar/00/13/f8/d0/ecc68a4f.jpg","comment_is_top":false,"comment_ctime":1561709732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561709732","product_id":100021201,"comment_content":"哈哈 我也来参与下 https:&#47;&#47;gist.github.com&#47;zhangzhengyi12&#47;6996e95b2ecbf4494d6958f0ae8d64dd","like_count":0},{"had_liked":false,"id":105773,"user_name":"刘明","can_delete":false,"product_type":"c1","uid":1113614,"ip_address":"","ucode":"95BE75871C675F","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/0e/e40ce6ea.jpg","comment_is_top":false,"comment_ctime":1561082945,"is_pvip":false,"replies":[{"id":"38397","content":"确实是更高效的实现","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1561247092,"ip_address":"","comment_id":105773,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561082945","product_id":100021201,"comment_content":"每次clone一个数组不是必要的吧？全局使用一个数组，递归结束的时候清空上一次push的值就ok了<br><br>var values = [1, 2, 5, 10];<br>var result = [];<br>var count = 0;<br>function calc(total) {<br>    if(total === 0){<br>        count++;<br>        console.log(result);<br>    }<br>    if(total &gt; 0) {<br>        for(var i =0 ;i&lt; values.length; i++){<br>            var value = values[i]<br>            result.push(value);<br>            calc(total-value);<br>            result.splice(result.length-1, 1);<br>        }<br>    }<br>}<br><br>calc(10);<br>console.log(count);","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454804,"discussion_content":"确实是更高效的实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561247092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104751,"user_name":"风","can_delete":false,"product_type":"c1","uid":1444483,"ip_address":"","ucode":"E1CE0825AAF805","user_header":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","comment_is_top":false,"comment_ctime":1560826703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560826703","product_id":100021201,"comment_content":"用C语言实现赏金问题，用循环+栈，来取代递归：<br><br>#include &lt;stdio.h&gt;<br><br><br>struct type {<br>\tint data;<br>};<br>typedef struct type Type;<br><br>#define  TYPE_NUM  4<br>Type TypeData[TYPE_NUM] = { {1}, {2}, {5}, {10} };  &#47;&#47;in ascending order<br><br>&#47;&#47;static int cnt = 0;<br>void record(int *s, int num)<br>{<br>\tint i;<br><br>\t&#47;&#47;cnt++;<br><br>\tfor (i = 0; i &lt; num - 1; i++)<br>\t\tprintf(&quot;%d, &quot;, TypeData[s[i]].data);<br>\tprintf(&quot;%d\\n&quot;, TypeData[s[num - 1]].data);<br>}<br><br><br>#define STACK_SIZE 100<br><br>void traversal(int total)<br>{<br>\tint s[STACK_SIZE];<br>\tint top;<br>\tint idx;<br>\tint sum, i;<br><br>\ttop = -1;<br>\twhile (1)<br>\t{<br>\t\tsum = 0;<br>\t\tfor (i = 0; i &lt;= top; i++)<br>\t\t\tsum += TypeData[s[i]].data;<br><br>\t\tif (sum &lt; total)<br>\t\t{<br>\t\t\ts[++top] = 0;<br>\t\t}<br>\t\telse if (sum == total)<br>\t\t{<br>\t\t\trecord(s, top + 1);<br><br>\t\t\twhile (top &gt;= 0)<br>\t\t\t{<br>\t\t\t\tidx = s[top--];<br>\t\t\t\tidx++;<br>\t\t\t\tif (idx &lt;= TYPE_NUM - 1)<br>\t\t\t\t{<br>\t\t\t\t\ts[++top] = idx;<br>\t\t\t\t\tbreak;<br>\t\t\t\t}<br>\t\t\t}<br>\t\t\tif (top == -1)<br>\t\t\t\tbreak;<br>\t\t}<br>\t\telse<br>\t\t{<br>\t\t\twhile (top &gt;= 0)<br>\t\t\t{<br>\t\t\t\tidx = s[top--];<br>\t\t\t\tidx++;<br>\t\t\t\tif (idx &lt;= TYPE_NUM - 1)<br>\t\t\t\t{<br>\t\t\t\t\ts[++top] = idx;<br>\t\t\t\t\tbreak;<br>\t\t\t\t}<br>\t\t\t}<br>\t\t\tif (top == -1)<br>\t\t\t\tbreak;<br>\t\t}<br>\t}<br>}<br><br><br>int main(void)<br>{<br>\ttraversal(10);<br><br>\t&#47;&#47;printf(&quot;\\ncnt: %d\\n\\n&quot;, cnt);<br>}","like_count":0},{"had_liked":false,"id":104341,"user_name":"Boolain","can_delete":false,"product_type":"c1","uid":1474364,"ip_address":"","ucode":"E1F240EE48991F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erGh2JQt8g9L5ibE3HQp7fOWHrVYMCkTqZib4d3wn8BGvZnpQy30fYZXoXYE04Xjibp3icJ4DOibA7m1gQ/132","comment_is_top":false,"comment_ctime":1560734297,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560734297","product_id":100021201,"comment_content":"    function test($num, $array){<br>        if ($num == 1){<br>            var_dump( $array);<br>            echo &#39;&lt;hr&#47;&gt;&#39;;<br>        }else{<br>            for ($i=1; $i&lt;=$num; $i++){<br>                if ($num % $i == 0 ){<br>                    if ($i==1 &amp;&amp; in_array(1, $array)){<br>                        continue ;<br>                    }<br>                    $array[]=$i;<br>                    test($num&#47;$i, $array);<br>                }else{<br>                    continue ;<br>                }<br>            }<br>        }<br>        return $array;<br>    }<br><br>    $arr = test(8,[]);<br><br><br><br>运行结果很错...可是我不知道怎么改进   谁能指导一下PHP的","like_count":0},{"had_liked":false,"id":102883,"user_name":"飞哥2018","can_delete":false,"product_type":"c1","uid":1162224,"ip_address":"","ucode":"0F3A50D70C5ED0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eobiaqJWodU1XmBNeL9YiaTRfY5aicekPRXlMDNiaicibbFnWOJSLEsH5vzExiaPtbRI1VfFC96icIT1e4JHg/132","comment_is_top":false,"comment_ctime":1560320595,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560320595","product_id":100021201,"comment_content":"先递：层层递进 缩小范围 ；再归：逐层返回，得到结果","like_count":0},{"had_liked":false,"id":101036,"user_name":"touch四叶草","can_delete":false,"product_type":"c1","uid":1045723,"ip_address":"","ucode":"EEC2351C5EEBA6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/db/8cad9fb0.jpg","comment_is_top":false,"comment_ctime":1559703826,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559703826","product_id":100021201,"comment_content":"public class Test {<br>    static long total = -1;<br><br>    public static void get(long toward,List&lt;Long&gt; result){<br>        if(toward&lt;=0){<br>            throw new IllegalArgumentException(&quot;toward参数必须大于0&quot;);<br>        }<br><br>        if(result==null){<br>            throw new IllegalArgumentException(&quot;result不能为空&quot;);<br>        }<br><br>        if(total == -1){<br>            total = toward;<br>        }<br>        int start = 2;<br>        if(!result.contains(1L)){<br>            start = 1;<br>        }<br><br>        if(toward == 1 &amp;&amp; result.size()&gt;1){<br>            System.out.println(result);<br>        }<br><br>        for(int i=start;i&lt;=total;i++){<br>            if(toward%i==0){<br><br>                List&lt;Long&gt; tmp = new ArrayList&lt;&gt;(result);<br>                tmp.add(new Long(i));<br>                get(toward&#47;i,tmp);<br>            }<br>        }<br>    }<br><br>    public static void main(String[] args) throws Exception{<br>        get(10,new ArrayList&lt;&gt;());<br>    }<br><br>}<br><br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[1, 8]<br>[2, 1, 2, 2]<br>[2, 1, 4]<br>[2, 2, 1, 2]<br>[2, 2, 2]<br>[2, 2, 2, 1]<br>[2, 4]<br>[2, 4, 1]<br>[4, 1, 2]<br>[4, 2]<br>[4, 2, 1]<br>[8, 1]","like_count":0},{"had_liked":false,"id":96144,"user_name":"羊毛犬 ส็็็็็็","can_delete":false,"product_type":"c1","uid":1350950,"ip_address":"","ucode":"7CE6FA100F0407","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/26/1abdf552.jpg","comment_is_top":false,"comment_ctime":1558343201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558343201","product_id":100021201,"comment_content":"https:&#47;&#47;gist.github.com&#47;onionc&#47;4a16dae4f93748e7060d590bc49d5e4f<br>参照老师的思路写的。8输出：<br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[1, 8]<br>[2, 1, 2, 2]<br>[2, 1, 4]<br>[2, 2, 1, 2]<br>[2, 2, 2, 1]<br>[2, 4, 1]<br>[4, 1, 2]<br>[4, 2, 1]<br>[8, 1]","like_count":0},{"had_liked":false,"id":93459,"user_name":"Gavin黄炯鹏","can_delete":false,"product_type":"c1","uid":1347154,"ip_address":"","ucode":"853CDA740D5ABD","user_header":"https://static001.geekbang.org/account/avatar/00/14/8e/52/677d9d1a.jpg","comment_is_top":false,"comment_ctime":1557474985,"is_pvip":false,"replies":[{"id":"33473","content":"具体你是指哪个先后顺序？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1557589597,"ip_address":"","comment_id":93459,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557474985","product_id":100021201,"comment_content":"老师，假如不考虑先后顺序要怎么做？可以给点思路吗","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449642,"discussion_content":"具体你是指哪个先后顺序？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557589597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90157,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1556434381,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1556434381","product_id":100021201,"comment_content":"public class RecusionTwo {<br><br>    private static HashMap&lt;Integer,Integer&gt; ha =new HashMap&lt;&gt;();<br><br>    public static void get(int n,ArrayList&lt;Integer&gt; result){<br>        int product =1;<br>        for(int j=0;j&lt;result.size();j++){<br>            product*=result.get(j);<br>        }<br>        if(product == n){<br>            System.out.println(result);<br>            return;<br>        }else if(product&gt;n){<br>            return;<br>        }else {<br>            int i;<br>            if(ha.get(1)==null){<br>                i =1;<br>                ha.put(1,1);<br>            }else {<br>                i=2;<br>            }<br>            for (; i &lt;= n; i++) {<br>                ArrayList&lt;Integer&gt; newResult = (ArrayList&lt;Integer&gt;) result.clone();<br>                newResult.add(i);<br>                get(n,newResult);<br>            }<br>        }<br>    }<br><br>    public static void main(String[] args) {<br>        get(8,new ArrayList&lt;&gt;());<br>    }<br>}","like_count":0},{"had_liked":false,"id":87446,"user_name":"傲娇的小宝","can_delete":false,"product_type":"c1","uid":1493922,"ip_address":"","ucode":"C079B19BCC1B7C","user_header":"https://static001.geekbang.org/account/avatar/00/16/cb/a2/5e7c557e.jpg","comment_is_top":false,"comment_ctime":1555597249,"is_pvip":false,"replies":[{"id":"31450","content":"加油！慢慢来","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1555606029,"ip_address":"","comment_id":87446,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555597249","product_id":100021201,"comment_content":"我太笨嘞，写的费劲，要多学习了<br>public static void Test(int number, ArrayList&lt;Integer&gt; result){<br>        if(number&lt;=0){<br>            return;<br>        }else if (number==1){<br>            if (!result.contains(1))<br>                result.add(1);<br>            System.out.println(result);<br>            return;<br>        }else {<br>            for (int i = 2; i &lt;= number; i++) {<br>                if(number%i==0){<br>                    ArrayList&lt;Integer&gt; newResult=(ArrayList&lt;Integer&gt;)result.clone();<br>                    newResult.add(i);<br>                    Test(number&#47;i,newResult);<br>                }<br>            }<br>        }<br>    }","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447455,"discussion_content":"加油！慢慢来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555606029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82118,"user_name":"机智的捞球布","can_delete":false,"product_type":"c1","uid":1017262,"ip_address":"","ucode":"92BE60A4A30854","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/ae/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1554124459,"is_pvip":false,"replies":[{"id":"29868","content":"不完全一样，动态规划需要计算到当前状态为止最优的解，而递归未完成时可能无法知道最优解","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1554225425,"ip_address":"","comment_id":82118,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554124459","product_id":100021201,"comment_content":"感觉这一讲讲的是动态规划的思想，递归算是动态规划的一种表现方法？<br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445473,"discussion_content":"不完全一样，动态规划需要计算到当前状态为止最优的解，而递归未完成时可能无法知道最优解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554225425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81357,"user_name":"Jing","can_delete":false,"product_type":"c1","uid":1474491,"ip_address":"","ucode":"690067C1ACA141","user_header":"https://static001.geekbang.org/account/avatar/00/16/7f/bb/794dd610.jpg","comment_is_top":false,"comment_ctime":1553870425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553870425","product_id":100021201,"comment_content":"&#47;&#47;我这是C#版本的 uitls都是些简单的工具就不贴了 PS：吐槽一下手机编辑代码有点蛋疼<br>public static void GetFactors(int num, List&lt;int&gt; result)\r<br>{\r<br>    if (num == 1)\r<br>    {\r<br>        Uitls.LogList(result);\r<br>        return;\r<br>    }\r<br>    else\r<br>    {        <br>        for (int i = 1; i &lt;= num; i++)\r<br>        {\r<br>            List&lt;int&gt; tempList = Uitls.CloneList(result);\r<br>            if (i == 1 &amp;&amp; tempList.Contains(1))\r<br>                continue;\r<br>            if (num % i == 0)\r<br>            {\r<br>                tempList.Add(i);\r<br>                &#47;&#47;补充 N X 1 这组因子\r<br>                if (i == num &amp;&amp; !tempList.Contains(1))\r<br>                    tempList.Add(1);\r<br>                GetFactors(num &#47; i, tempList);\r<br>            }\r<br>        }\r<br>    }\r<br>}","like_count":0},{"had_liked":false,"id":79956,"user_name":"行走的小白鼠","can_delete":false,"product_type":"c1","uid":1475630,"ip_address":"","ucode":"79FB9988D3E504","user_header":"https://static001.geekbang.org/account/avatar/00/16/84/2e/16f5c342.jpg","comment_is_top":false,"comment_ctime":1553582863,"is_pvip":false,"replies":[{"id":"29206","content":"考虑了各种情况，赞","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1553611307,"ip_address":"","comment_id":79956,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553582863","product_id":100021201,"comment_content":"private static void splitByMultiply(long totalNum, ArrayList&lt;Long&gt; result) {<br>    &#47;&#47; 1. 输出分解结果<br>    if (totalNum == 1) {<br>      &#47;&#47; 1.1 追加解，如果结果不包含1，则添加一个解，后追1因子<br>      if (!result.contains(1L)) {<br>        ArrayList&lt;Long&gt; clone = (ArrayList&lt;Long&gt;) result.clone();<br>        clone.add(1L);<br>        System.out.println(clone);<br>      }<br>      &#47;&#47; 1.2 输出当前解，如果size少于2，不算乘法啊<br>      if (result.size() &gt; 1) {<br>        System.out.println(result);<br>      }<br>    } else if (totalNum &gt; 1) {<br>      &#47;&#47; 2. 循环计算当前的乘法因子，从1到totalNum<br>      for (long i = 1; i &lt;= totalNum; i++) {<br>        &#47;&#47; 2.0 判断，不能出现多个1或者不能出现不整除情况<br>        if (i == 1 &amp;&amp; result.contains(1L)) continue;<br>        if (totalNum % i != 0) continue;<br>        &#47;&#47; 2.1 计算因子，除法并保存因子<br>        long l = totalNum &#47; i;<br>        ArrayList&lt;Long&gt; clone = (ArrayList&lt;Long&gt;) result.clone();<br>        clone.add(i);<br>        &#47;&#47; 2.2. 递归算l的因子<br>        splitByMultiply(l, clone);<br>      }<br>    }<br>  }<br><br>运行结果：<br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[1, 8]<br>[2, 1, 2, 2]<br>[2, 1, 4]<br>[2, 2, 1, 2]<br>[2, 2, 2, 1]<br>[2, 2, 2]<br>[2, 4, 1]<br>[2, 4]<br>[4, 1, 2]<br>[4, 2, 1]<br>[4, 2]<br>[8, 1]","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444702,"discussion_content":"考虑了各种情况，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553611307,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79435,"user_name":"Ian","can_delete":false,"product_type":"c1","uid":1239054,"ip_address":"","ucode":"E025D2686E673F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/0e/8caa9608.jpg","comment_is_top":false,"comment_ctime":1553483832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553483832","product_id":100021201,"comment_content":"没看懂java","like_count":0},{"had_liked":false,"id":79092,"user_name":"林绍灏","can_delete":false,"product_type":"c1","uid":1242340,"ip_address":"","ucode":"AA2CB00DB0C97C","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/e4/e7f7ca92.jpg","comment_is_top":false,"comment_ctime":1553350114,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553350114","product_id":100021201,"comment_content":"课后习题答案：<br>public class Session5_2 {<br><br>    private static long targetNum = 8;<br>    public static void main(String[] args) {<br>        get(targetNum, new ArrayList&lt;&gt;());<br>    }<br><br>    &#47;**<br>     * 因数分解，并打印所有可能的分解结果<br>     *<br>     * @param num     待分解的因数<br>     * @param factors 分解的因子集合<br>     *&#47;<br>    private static void get(long num, ArrayList&lt;Long&gt; factors) {<br>        &#47;&#47; 判断当前因数是否可再分，不可再分则遍历因子集选择符合的输出，否则继续因数分解<br>        if (num == 1) {<br>            if (factors.size() == 0) {<br>                System.out.println(&quot;1&quot;);<br>                return;<br>            }<br>            &#47;&#47; 当前因数已经不可再分，遍历分解的因子集合，输出符合结果因子<br>            StringBuffer strBuffer = new StringBuffer(&quot;&quot;);<br>            long result = 1;<br>            for (int ix = 0; ix &lt; factors.size(); ix++) {<br>                long factor = factors.get(ix);<br>                result *= factor;<br>                strBuffer.append(factor);<br>                if (ix &lt; factors.size() - 1) {<br>                    strBuffer.append(&quot; X &quot;);<br>                }<br>            }<br>            if (result == targetNum) {<br>                System.out.println(strBuffer.toString());<br>            }<br>        } else {<br>            &#47;&#47; 遍历所有可能的情况，进行分解<br>            for (int factor = 1; factor &lt;= num; factor++) {<br>                &#47;&#47; 归纳法中n&gt;=2之后的情形，因数分解时从2开始<br>                if ((factors.size() &gt; 0) &amp;&amp; (factor == 1)) {<br>                    continue;<br>                }<br>                &#47;&#47; 向分解的因子集合中添加当前所选择的因子<br>                ArrayList&lt;Long&gt; newFactors = (ArrayList&lt;Long&gt;) factors.clone();<br>                newFactors.add((long) factor);<br>                &#47;&#47; 使用当前所选择的因子分解当前因数<br>                get(num &#47; factor, newFactors);<br>            }<br>        }<br>    }<br>}<br>输出结果：<br>1 X 2 X 2 X 2<br>1 X 2 X 4<br>1 X 4 X 2<br>1 X 8<br>2 X 2 X 2<br>2 X 4<br>4 X 2<br>8","like_count":0},{"had_liked":false,"id":78369,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1553133833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553133833","product_id":100021201,"comment_content":"去重后重新修正版：<br>package com.renrenche.jike.mathematical.basic.course.programmers;<br><br>import java.util.*;<br><br>&#47;**<br> * @author jiangqiaonan<br> * @date 2019&#47;3&#47;17<br> *&#47;<br><br>public class Factorization {<br><br>    private Set&lt;Integer&gt; makeUpList;<br><br>    private List&lt;ArrayList&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();<br><br>    &#47;**<br>     * 获取所有的因子<br>     *&#47;<br>    private void decompose(int number) {<br>        if (number &lt;= 1) {<br>            throw new RuntimeException(&quot;number 至少大于1&quot;);<br>        }<br>        makeUpList = new HashSet&lt;&gt;();<br>        int i = 2;<br>        int product = number;<br>        while (i &lt;= product) {<br>            makeUpList.add(product);<br>            if (product % i == 0) {<br>                product = product &#47; i;<br>                makeUpList.add(i);<br>                continue;<br>            }<br>            i++;<br>        }<br>        makeUpList.add(1);<br>    }<br><br>    &#47;**<br>     * 数据处理过程<br>     *&#47;<br>    private void getAllMakeUp(int number, ArrayList&lt;Integer&gt; result) {<br>        if (number &lt;= 1) {<br>            if (result.size() &gt; 1) {<br>                this.result.add(result);<br>            }<br>        }<br>        for (int a : makeUpList) {<br>            if (a == 1 &amp;&amp; result.contains(1)) {<br>                continue;<br>            }<br>            if (number % a == 0) {<br>                ArrayList&lt;Integer&gt; arrayList = (ArrayList&lt;Integer&gt;) result.clone();<br>                arrayList.add(a);<br>                getAllMakeUp(number &#47; a, arrayList);<br>            }<br>        }<br>    }<br><br>    public List&lt;ArrayList&lt;Integer&gt;&gt; factorize(int number) {<br>        this.decompose(number);<br>        this.getAllMakeUp(number, new ArrayList&lt;&gt;());<br>        return this.result;<br>    }<br><br><br>    public static void main(String[] args) {<br>        Factorization factorization = new Factorization();<br>        factorization.factorize(12).forEach(System.out::println);<br>    }<br>}","like_count":0},{"had_liked":false,"id":78344,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1553132195,"is_pvip":false,"replies":[{"id":"28607","content":"👍 运行的结果也可以贴一下","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1553190641,"ip_address":"","comment_id":78344,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553132195","product_id":100021201,"comment_content":"修改了一版<br>import java.util.*;<br>public class Factorization {<br>    private Set&lt;Integer&gt; makeUpList;<br>    private List&lt;ArrayList&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();<br><br>    &#47;**<br>     * 因式分解<br>     *&#47;<br>    private void decompose(int number) {<br>        if (number &lt;= 1) {<br>            throw new RuntimeException(&quot;number 至少大于1&quot;);<br>        }<br>        makeUpList = new HashSet&lt;&gt;();<br>        int i = 2;<br>        int product = number;<br>        while (i &lt;= product) {<br>            if (product % i == 0) {<br>                product = product &#47; i;<br>                makeUpList.add(i);<br>                continue;<br>            }<br>            i++;<br>        }<br>        makeUpList.add(1);<br>    }<br><br>    &#47;**<br>     * 数据处理过程<br>     *&#47;<br>    private void getAllMakeUp(int number, ArrayList&lt;Integer&gt; result) {<br>        if (number &lt;= 1) {<br>            return;<br>        }<br>        for (int a : makeUpList) {<br>            if (a == 1 &amp;&amp; result.contains(1)) {<br>                continue;<br>            }<br>            if (number % a == 0) {<br>                ArrayList&lt;Integer&gt; arrayList = (ArrayList&lt;Integer&gt;) result.clone();<br>                arrayList.add(a);<br>                getAllMakeUp(number &#47; a, arrayList);<br>            }<br>        }<br><br>        if (!result.isEmpty()) {<br>            &#47;&#47; when result.contains(number),就会出现重复<br>            for (int index = 0; index &lt;= result.size(); index++) {<br>                if (index &lt; result.size() &amp;&amp; result.get(index) == number) {<br>                    continue;<br>                }<br>                ArrayList&lt;Integer&gt; arrayList = (ArrayList&lt;Integer&gt;) result.clone();<br>                arrayList.add(index, number);<br>                this.result.add(arrayList);<br>            }<br>        }<br>    }<br><br>    public List&lt;ArrayList&lt;Integer&gt;&gt; factorize(int number) {<br>        this.decompose(number);<br>        this.getAllMakeUp(number, new ArrayList&lt;&gt;());<br>        return this.result;<br>    }<br><br><br>    public static void main(String[] args) {<br>        Factorization factorization = new Factorization();<br>        System.out.println( factorization.factorize(8));<br>    }<br>}","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444057,"discussion_content":"👍 运行的结果也可以贴一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553190641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78023,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1553056137,"is_pvip":false,"replies":[{"id":"28508","content":"这里面有一些重复的","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1553100594,"ip_address":"","comment_id":78023,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553056137","product_id":100021201,"comment_content":"结果：<br>factorization = [[2, 1, 2, 2], [1, 2, 2, 2], [1, 2, 2, 2], [1, 2, 2, 2], [4, 1, 2], [1, 4, 2], [1, 2, 4], [8, 1], [1, 8], [2, 2, 1, 2], [2, 2, 1, 2], [2, 1, 2, 2], [2, 1, 2, 2], [4, 2, 1], [2, 4, 1], [2, 1, 4], [2, 2, 2, 1], [2, 2, 2, 1], [2, 2, 2, 1], [2, 2, 1, 2], [2, 2, 2], [2, 2, 2], [2, 2, 2], [4, 2], [2, 4]]","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443937,"discussion_content":"这里面有一些重复的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553100594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78022,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1553056125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553056125","product_id":100021201,"comment_content":"import java.util.*;<br><br>&#47;**<br> * @date 2019&#47;3&#47;17<br> *&#47;<br><br>public class Factorization {<br><br>    private Set&lt;Integer&gt; makeUpList;<br><br>    private List&lt;ArrayList&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();<br><br>    &#47;**<br>     * 因式分解<br>     *&#47;<br>    private void decompose(int number) {<br>        if (number &lt;= 1) {<br>            throw new RuntimeException(&quot;number 至少大于1&quot;);<br>        }<br>        makeUpList = new HashSet&lt;&gt;();<br>        int i = 2;<br>        int product = number;<br>        while (i &lt;= product) {<br>            if (product % i == 0) {<br>                product = product &#47; i;<br>                makeUpList.add(i);<br>                continue;<br>            }<br>            i++;<br>        }<br>        makeUpList.add(1);<br>    }<br><br>    &#47;**<br>     * 数据处理过程<br>     *&#47;<br>    private void getAllMakeUp(int number, ArrayList&lt;Integer&gt; result) {<br>        if (number &lt;= 1) {<br>            return;<br>        }<br>        for (int a : makeUpList) {<br>            if (a == 1 &amp;&amp; result.contains(1)) {<br>                continue;<br>            }<br>            if (number % a == 0) {<br>                ArrayList&lt;Integer&gt; arrayList = (ArrayList&lt;Integer&gt;) result.clone();<br>                arrayList.add(a);<br>                getAllMakeUp(number &#47; a, arrayList);<br>            }<br>        }<br><br>        if (!result.isEmpty()) {<br>            for (int index = 0; index &lt;= result.size(); index++) {<br>                ArrayList&lt;Integer&gt; arrayList = (ArrayList&lt;Integer&gt;) result.clone();<br>                arrayList.add(index,number);<br>                this.result.add(arrayList);<br>            }<br>        }<br>    }<br><br>    public List&lt;ArrayList&lt;Integer&gt;&gt; factorize(int number) {<br>        this.decompose(number);<br>        this.getAllMakeUp(number, new ArrayList&lt;&gt;());<br>        return this.result;<br>    }<br><br><br>    public static void main(String[] args) {<br>        Factorization factorization = new Factorization();<br>        System.out.println(&quot;factorization = &quot; + factorization.factorize(8));<br>    }<br>}<br>","like_count":0},{"had_liked":false,"id":77177,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1552877159,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1552877159","product_id":100021201,"comment_content":"public class Lesson5_1 {<br>    public static void main(String[] args) {<br>        Bonus bonus = new Bonus();<br>        Award award = bonus.compute(10, 10);<br>        System.out.println(&quot;赏金的种类 = &quot; + award.getDone().size());<br>        award.getDone().forEach(System.out::println);<br>    }<br>}<br><br>@Data<br>class Award {<br>    &#47;&#47; 已经达到max的list<br>    List&lt;List&lt;Integer&gt;&gt; done;<br><br>    &#47;&#47; 还可以继续加持的list，index=0是总和<br>    List&lt;ArrayList&lt;Integer&gt;&gt; doing;<br>}<br><br>@Data<br>class Bonus {<br><br>    List&lt;Integer&gt; enums = Arrays.asList(1, 2, 5, 10);<br><br>    public Award compute(int k, int max) {<br>        List&lt;ArrayList&lt;Integer&gt;&gt; doing = new ArrayList&lt;&gt;();<br>        List&lt;List&lt;Integer&gt;&gt; done = new ArrayList&lt;&gt;();<br>        if (k == 1) {<br>            Award award = new Award();<br>            for (int prize : enums) {<br>                if (prize &lt; max) {<br>                    ArrayList&lt;Integer&gt; temp = new ArrayList&lt;&gt;();<br>                    temp.add(prize);<br>                    temp.add(prize);<br>                    doing.add(temp);<br>                } else if (prize == max) {<br>                    done.add(Collections.singletonList(prize));<br>                }<br>            }<br>            award.setDoing(doing);<br>            award.setDone(done);<br>            return award;<br>        }<br><br>        &#47;&#47; 获取上一轮的信息<br>        Award award = compute(k - 1, max);<br><br>        &#47;&#47; 上一轮信息+本轮信息<br>        for (int prize : enums) {<br>            award.getDoing().forEach(temp -&gt; {<br>                int sum = temp.get(0) + prize;<br>                if (sum &gt; max) {<br>                    return;<br>                }<br><br>                ArrayList&lt;Integer&gt; tempAward = (ArrayList&lt;Integer&gt;) temp.clone();<br>                tempAward.set(0, sum);<br>                tempAward.add(prize);<br>                if (sum == max) {<br>                    tempAward.remove(0);<br>                    done.add(tempAward);<br>                    return;<br>                }<br>                doing.add(tempAward);<br>            });<br>        }<br>        award.getDone().addAll(done);<br>        award.setDoing(doing);<br>        return award;<br>    }<br>}<br><br><br>结果：赏金的种类 = 129","like_count":0},{"had_liked":false,"id":73320,"user_name":"牧羊人","can_delete":false,"product_type":"c1","uid":1446935,"ip_address":"","ucode":"80D41C94F787CA","user_header":"https://static001.geekbang.org/account/avatar/00/16/14/17/5dfadf0c.jpg","comment_is_top":false,"comment_ctime":1551858612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551858612","product_id":100021201,"comment_content":"    public static int[] rewards2;<br>    public static void get2(int totalReward, ArrayList&lt;Integer&gt; result) {<br>        if (rewards2 == null) {<br>            rewards2 = new int[totalReward];\t&#47;&#47; 四种面额的纸币<br>            for (int i = 0; i &lt;= totalReward - 1; i++) {<br>                rewards2[i] = i + 1;<br>            }<br>&#47;&#47;            System.out.println(Arrays.toString(rewards2));<br>        }<br><br>        for (int i = 0; i &lt; rewards2.length; i++) {<br>            ArrayList&lt;Integer&gt; newResult = (ArrayList&lt;Integer&gt;)(result.clone());<br>            if (rewards2[i] == 1 &amp;&amp; newResult.contains(1))<br>                continue;<br><br>            int rs = get2_1(newResult);<br>            if (rs != 0 &amp;&amp; totalReward % rs != 0)<br>                continue;<br><br>            newResult.add(rewards2[i]);<br>            rs = get2_1(newResult);<br><br>            if (rs == totalReward &amp;&amp; newResult.contains(1))<br>                System.out.println(newResult);<br>            else<br>                get2(totalReward, newResult);<br>        }<br><br>    }<br><br>    public static int get2_1(ArrayList&lt;Integer&gt; result) {<br>        int rs = 0;<br>        if (result.size() &gt; 0) {<br>            rs = result.get(0);<br>            for (int j = 1; j &lt;= result.size() - 1; j++) {<br>                rs *=  result.get(j);<br>            }<br>        }<br>        return rs;<br>    }<br><br>MAIN：<br>        int totalReward = 8;<br>&#47;&#47;        get(totalReward, new ArrayList&lt;Long&gt;());<br><br>        get2(totalReward, new ArrayList&lt;&gt;());","like_count":0},{"had_liked":false,"id":72459,"user_name":"CHON","can_delete":false,"product_type":"c1","uid":1439409,"ip_address":"","ucode":"9349119267172E","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/b1/a073d108.jpg","comment_is_top":false,"comment_ctime":1551631633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551631633","product_id":100021201,"comment_content":"#!&#47;usr&#47;bin&#47;env python3<br># -*- coding: utf-8 -*-<br>import copy<br><br><br>def getPerson(totalProduct, aResult, useOne):<br><br>\t#当totalProduct=1时，证明它是满足条件的解，结束嵌套调用，输出解<br>\tif (totalProduct == 1) &amp; ((useOne==True &amp; (1 in aResult)) | (useOne==False)):<br>\t\tif len(aResult) &gt; 1 :<br>\t\t\tprint(aResult)<br>\t\treturn<br><br>\telse :<br>\t\tfor x in range(1, (totalProduct+1)):<br>\t\t\t#从1开始<br>\t\t\t#x +=1<br><br>\t\t\tif (x==1) &amp; (useOne==False) :<br>\t\t\t\tcontinue<br><br>\t\t\t# 判断是否能整除,不能就跳过<br>\t\t\tif (totalProduct &#47; x).is_integer()==False:<br>\t\t\t\tcontinue<br><br>\t\t\t# 如果使用了1，改变状态<br>\t\t\tif (x==1) &amp; (1 in aResult):<br>\t\t\t\tcontinue<br><br>\t\t    # 克隆乘数组,不影响原本的值<br>\t\t\tnewResult\t= copy.copy(aResult)<br>\t\t\tnewResult.append(x)<br><br>\t\t\tgetPerson(totalProduct &#47;&#47; x, newResult, useOne)<br><br>#没有1的情况<br>getPerson(8, [], False)<br><br>#有1的情况<br>getPerson(8, [], True)","like_count":0},{"had_liked":false,"id":66090,"user_name":"杰之7","can_delete":false,"product_type":"c1","uid":1297232,"ip_address":"","ucode":"F7DA2E21085332","user_header":"https://static001.geekbang.org/account/avatar/00/13/cb/50/66d0bd7f.jpg","comment_is_top":false,"comment_ctime":1549875888,"is_pvip":false,"replies":[{"id":"23458","content":"没关系，多多上手写几遍，尝试不同的写法，慢慢就会熟悉。","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1549906047,"ip_address":"","comment_id":66090,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549875888","product_id":100021201,"comment_content":"通过这一节的阅读和听音频学习，对递归有了一个理解。其中的思想就是解决当前的一个问题，并把问题进行转化下去，使其更容易解决。<br><br>递归和循环都是不断进行迭代，直到最终能得到我们需要的结果。其中的不同是递归需要保留中间处理的数值。<br><br>老师，现在我编程基础相对较弱，这篇Java实现的递归中间我还是有些地方没有完全理解。当然老师已经写了注解。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438699,"discussion_content":"没关系，多多上手写几遍，尝试不同的写法，慢慢就会熟悉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549906047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65084,"user_name":"崇宗","can_delete":false,"product_type":"c1","uid":1339568,"ip_address":"","ucode":"694A0A7B5EA741","user_header":"https://static001.geekbang.org/account/avatar/00/14/70/b0/2a8b63cc.jpg","comment_is_top":false,"comment_ctime":1549031616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549031616","product_id":100021201,"comment_content":"参考了大家的实现后再修改的版本（之前的实现忘记列举出所有的可能性）<br>def factorization(num):<br>    if(num &lt;= 0):<br>        return []<br>    elif(num == 1):<br>        return [[1]]<br>    else:<br>        res = []<br>        res.append([1, num])<br>        for i in range(2, num + 1):<br>            if((num % i) == 0):<br>                temp_res = factorization(num &#47;&#47; i)<br>                for j in range(len(temp_res)):<br>                    temp_res[j].append(i)<br>                res = res + temp_res<br>        return deEquivalentLists(res)<br><br><br><br>def factorization_print(num):<br>    res = factorization(num)<br>    char = &#39;x&#39;<br>    res_str = [char.join([str(num) for num in ls]) for ls in res]<br>    for string in res_str:<br>        print(string)<br><br><br>def arrange(ls):<br>    if len(ls) == 0:<br>        return [[]]<br>    elif len(ls) == 1:<br>        return [ls]<br>    else:<br>        res = []<br>        for i in range(len(ls)):<br>            for arr_res in arrange(ls[:i] + ls[i + 1:]):<br>                res.append([ls[i]] + arr_res)<br>        return res<br><br><br>def deEquivalentLists(lists):<br>    res = []<br>    for ls in lists:<br>        ls.sort()<br>        if ls not in res:<br>            res.append(ls)<br>    return res<br><br><br>def deDuplicatedLists(lists):<br>    res = []<br>    for ls in lists:<br>        if ls not in res:<br>            res.append(ls)<br>    return res<br><br>if __name__ == &#39;__main__&#39;:<br>    number = 8<br>    res = factorization(number)<br>    arrange_res = []<br>    for ls in res:<br>        arrange_res = arrange_res + arrange(ls)<br>    final_res = deDuplicatedLists(arrange_res)<br>    print(final_res)<br>    print(len(final_res))<br>    <br>    Result:<br>    [[1, 8], [8, 1], [1, 2, 4], [1, 4, 2], [2, 1, 4], [2, 4, 1], [4, 1, 2], [4, 2, 1], [1, 2, 2, 2], [2, 1, 2, 2], [2, 2, 1, 2], [2, 2, 2, 1]]<br>    12","like_count":0},{"had_liked":false,"id":64063,"user_name":"悬炫","can_delete":false,"product_type":"c1","uid":1159974,"ip_address":"","ucode":"28BA6B2169256B","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/26/cc28a05a.jpg","comment_is_top":false,"comment_ctime":1548654178,"is_pvip":false,"replies":[{"id":"22721","content":"结果和思路都是正确的👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1548697904,"ip_address":"","comment_id":64063,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548654178","product_id":100021201,"comment_content":"JavaScript实现：<br>思考题：<br>&#47;**<br> *<br> * @description 求某个整数的公约数，不包括1,因为1会导致死循环<br> * @param {*} n<br> * @returns<br> *&#47;<br>function commonDivisor(n) {<br>\tif (!Number.isInteger(n) || n &lt;= 0) {<br>\t\tthrow new Error(&quot;请输入正自然数&quot;);<br>\t}<br>\tlet list = [];<br>\tfor (let i = 2; i &lt;= n; i++) {<br>\t\tlet value = n &#47; i;<br>\t\tif (Math.trunc(value) === value) {<br>\t\t\tlist.push(i);<br>\t\t}<br>\t}<br>\treturn list;<br>}<br><br>&#47;**<br> *<br> * @description 循环递归求解不包含约数1的可能拆分方式<br> * @param {number} inputNumber &#47;&#47;目标整数<br> * @param {array} commonDivisorList &#47;&#47;公约数列表<br> * @param {array} resuleList &#47;&#47;可能拆分方式的集合<br> * @param {array} [result=[]] &#47;&#47;保存当前的拆分方式<br> *&#47;<br>function get(inputNumber,  commonDivisorList,resuleList,result=[]) {<br>\t&#47;&#47; 当 inputNumber = 0 时，证明它是满足条件的解，结束嵌套调用，输出解<br>\tif (inputNumber === 1) {<br>        &#47;&#47; console.log(result);<br>        resuleList.push(result)<br>\t\t&#47;&#47; 当 inputNumber &lt; 0 时，证明它不是满足条件的解，不输出<br>\t} else if (inputNumber &lt; 1) {<br>        return<br>\t} else {<br>\t\tfor (let index = 0; index &lt; commonDivisorList.length; index++) {<br>\t\t\tlet newResult = [...result]; &#47;&#47; 由于有 4 种情况，需要 clone 当前的解并传入被调用的...<br>\t\t\tnewResult.push(commonDivisorList[index]); &#47;&#47; 记录当前的选择，解决一点问题<br>\t\t\tget(<br>\t\t\t\tinputNumber &#47; commonDivisorList[index],<br>                commonDivisorList,<br>                resuleList,<br>                newResult<br>\t\t\t); &#47;&#47; 剩下的问题，留给嵌套调用去解决<br>\t\t}<br>\t}<br>}<br><br>&#47;**<br> *<br> * @description 输出所有可能拆分方式，包括约数1<br> * @param {*} n &#47;&#47;目标整数<br> * @param {array} [resuleList=[]] &#47;&#47;保存当前的拆分方式<br> *&#47;<br>function division(n, resuleList = []) {<br>    &#47;&#47;求得公约数列表<br>    let commonDivisorList = commonDivisor(n);<br>    &#47;&#47;求得不包含约数1的可能拆分方式<br>    get(n, commonDivisorList, resuleList)<br>    let list = [...resuleList]<br>    let listLength = list.length;<br>    list.forEach((element) =&gt; {<br>        let length = element.length;<br>        for (let index = 0; index &lt; length; index++) {<br>            let list=element.slice()<br>            list.splice(index, 0, 1)<br>            resuleList.push(list)<br>        }<br>        resuleList.push(element.concat(1))<br>    })<br>    resuleList=resuleList.slice(listLength)<br>    console.log(resuleList);<br><br>}<br>&#47;&#47;结果有12种 ，篇幅原因，无法一一列出，大家可以直接在控制台跑一下<br>division(8); <br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437837,"discussion_content":"结果和思路都是正确的👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548697904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61164,"user_name":"金博","can_delete":false,"product_type":"c1","uid":1365594,"ip_address":"","ucode":"A84021C5EAEAD8","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/5a/84259fee.jpg","comment_is_top":false,"comment_ctime":1547629810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547629810","product_id":100021201,"comment_content":"JavaScript的实现方式：<br>function recursion(n, result) {<br>    if (Number.isInteger(n) &amp;&amp; n &gt; 1) {<br>        for (var i = n; i &gt; 1; i--) {<br>            var newResult = result.concat();<br>            newResult.push(i);<br>            recursion(n &#47; i, newResult);<br>        }<br>    }<br>    else if (n === 1) {<br>        console.log(result);<br>    }<br>    else {<br>        return;<br>    }<br>}","like_count":0},{"had_liked":false,"id":60744,"user_name":"云梦泽","can_delete":false,"product_type":"c1","uid":1006644,"ip_address":"","ucode":"53BEE57E8D8DBE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/34/1298df2d.jpg","comment_is_top":false,"comment_ctime":1547541708,"is_pvip":true,"replies":[{"id":"21685","content":"所有结果都输出了，赞","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547567344,"ip_address":"","comment_id":60744,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1547541708","product_id":100021201,"comment_content":"package com.emodor.thridpart.api;<br><br>import java.util.ArrayList;<br>import java.util.List;<br><br>public class NumberTest {<br><br>\tpublic static void main(String[] args) {<br>\t\trecursive(8,new ArrayList&lt;Integer&gt;());<br>\t}<br>\t<br>\tprivate static void recursive(int numbers, List&lt;Integer&gt; array) {<br>\t\tif (numbers == 1) {<br>\t\t\tif (!array.contains(numbers)) {<br>\t\t\t\tarray.add(numbers);<br>\t\t\t}<br>\t\t\tSystem.out.println(array);<br>\t\t\treturn;<br>\t\t}<br>\t\tfor (int i = numbers; i &gt; 0; i --) {<br>\t\t\tif (numbers % i == 0) {<br>\t\t\t\tif (i == 1 &amp;&amp; array.contains(i)) {<br>\t\t\t\t\tcontinue;<br>\t\t\t\t}<br>\t\t\t\tList&lt;Integer&gt; newArray = new ArrayList&lt;&gt;();<br>\t\t\t\tnewArray.addAll(array);<br>\t\t\t\tnewArray.add(i);<br>\t\t\t\trecursive(numbers&#47;i,newArray);<br>\t\t\t\t<br>\t\t\t}<br>\t\t}<br>\t}<br>\t<br>}<br>输出结果：<br>[8, 1]<br>[4, 2, 1]<br>[4, 1, 2]<br>[2, 4, 1]<br>[2, 2, 2, 1]<br>[2, 2, 1, 2]<br>[2, 1, 4]<br>[2, 1, 2, 2]<br>[1, 8]<br>[1, 4, 2]<br>[1, 2, 4]<br>[1, 2, 2, 2]<br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436605,"discussion_content":"所有结果都输出了，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547567344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1390365,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/1d/374f80a4.jpg","nickname":"MonkeyZz","note":"","ucode":"8D2855FB446D70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368090,"discussion_content":"这样不是每项都包括1了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618564302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":59112,"user_name":"刘文韬","can_delete":false,"product_type":"c1","uid":1312479,"ip_address":"","ucode":"41395E6036D516","user_header":"https://static001.geekbang.org/account/avatar/00/14/06/df/d0fe2300.jpg","comment_is_top":false,"comment_ctime":1547301538,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547301538","product_id":100021201,"comment_content":"package main<br><br>import &quot;fmt&quot;<br><br>func main() {<br> var result []int<br> printResult(10, result)<br> fmt.Println(countResult(10))<br>}<br><br>var cash = []int{1,2,5,10}<br>func printResult(total int, result []int) {<br> if total &lt; 0 {<br>  return<br> }<br> if total == 0 {<br>  fmt.Println(result)<br>  return<br> }<br> <br> for i := 0; i &lt; len(cash); i++ {<br>  newResult := append(result, cash[i])<br>  printResult(total - cash[i], newResult)<br> }<br>}<br><br>func countResult(total int) int {<br> if total &lt; 0 {<br>  return 0<br> }<br> if total == 0 {<br>  return 1<br> }<br><br> result := 0<br> for i := 0; i &lt; len(cash); i++ {<br>  result += countResult(total - cash[i])<br> }<br> return result<br>}","like_count":0},{"had_liked":false,"id":58301,"user_name":"Ricky","can_delete":false,"product_type":"c1","uid":1238256,"ip_address":"","ucode":"0B29C730CAD29C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/f0/82281239.jpg","comment_is_top":false,"comment_ctime":1547029449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547029449","product_id":100021201,"comment_content":"bool isExisted(vector&lt;int&gt; &amp;array, int target) {<br><br>    for (auto iter = array.begin(); iter != array.end(); ++iter) {<br>        if (*iter == target) return true;<br>    }<br>    return false;<br>}<br><br>void decomposeInteger(int target, vector&lt;int&gt; &amp;result) {<br>    if (target == 1) {<br>        cout &lt;&lt; &quot; product = &quot;;<br>        for (unsigned int i = 0; i &lt; result.size()-1; ++i) {<br>            cout &lt;&lt; result.at(i) &lt;&lt; &quot; x &quot;;<br>        }<br>        cout &lt;&lt; result.back() &lt;&lt; endl;<br>        return;<br>    } else {<br>        for (int i = 1; i &lt;= target; ++i) {<br>            if (target % i &gt; 0 || (isExisted(result, 1) &amp;&amp; i == 1)) continue;<br>            vector&lt;int&gt; rs = result;<br>            rs.push_back(i);<br>            decomposeInteger(target&#47;i, rs);<br>        }<br>    }<br>}<br>int main() {<br>    vector&lt;int&gt; x;<br>    decomposeInteger(10, x);<br><br>    return 0;<br>}<br>&#47;*<br> product = 1 x 2 x 5<br> product = 1 x 5 x 2<br> product = 1 x 10<br> product = 2 x 1 x 5<br> product = 2 x 5<br> product = 5 x 1 x 2<br> product = 5 x 2<br> product = 10<br>*&#47;","like_count":0},{"had_liked":false,"id":57762,"user_name":"睡着的海豚","can_delete":false,"product_type":"c1","uid":1338125,"ip_address":"","ucode":"E5F069F7C9E1BC","user_header":"https://static001.geekbang.org/account/avatar/00/14/6b/0d/74aeb985.jpg","comment_is_top":false,"comment_ctime":1546906042,"is_pvip":false,"replies":[{"id":"20810","content":"这就是组合和排列的区别","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546913113,"ip_address":"","comment_id":57762,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546906042","product_id":100021201,"comment_content":"实际应用中［1，2，2，2，1，2］和［1，1，2，2，2，2］是一样的！类似这种次序的不同是不是能归纳为一种？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435746,"discussion_content":"这就是组合和排列的区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546913113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57715,"user_name":"Joe","can_delete":false,"product_type":"c1","uid":1337998,"ip_address":"","ucode":"EC76699640B7BF","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/8e/7b6ea886.jpg","comment_is_top":false,"comment_ctime":1546874212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546874212","product_id":100021201,"comment_content":"#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br><br>using namespace std;<br><br>&#47;**一个整数可以被分解为多个整数的乘积，<br> * 例如，6 可以分解为 2x3。求给定整数的所有解。<br> *&#47;<br>&#47;&#47; 递归法<br>class Recursion_Integer {<br>  private:<br>  &#47;&#47;vector&lt;int&gt; integerCandidate = {2, 3, 4, 5, 6, 7, 8, 9};<br>  int totalSolutionNum = 1;<br><br>  public:<br>  &#47;**<br>   * @description: 求给定整数的所有解。<br>   * @param {type} num- 指定数， result- 奖赏方式结果。 <br>   * @return: null<br>   *&#47;<br>  void getIntegerSolution(int num, vector&lt;int&gt; result) {<br>    &#47;&#47; 1xnum<br>    if (result.empty()) {<br>      cout &lt;&lt; &quot;1x&quot; &lt;&lt; num &lt;&lt; endl;<br>    }<br>    if (num == 1) {<br>      &#47;&#47; 输出解答方式<br>      outputResult(result);<br>    } else {<br>      for (int i = 2; i &lt;= num; i++) {<br>        int mod = num % i;<br>        if (0 == mod) {<br>          int q = num &#47; i;<br>          vector&lt;int&gt; resultTemp = result;<br>          resultTemp.push_back(i);<br>          getIntegerSolution(q, resultTemp);<br>        }<br>      }<br>    }<br>  }<br>  &#47;**<br>   * Desciption: 获得解答总数<br>   *&#47;<br>  int getTotalSolution(void) {<br>    return totalSolutionNum;<br>  }<br><br>  &#47;&#47; 输出结果<br>  void outputResult(vector&lt;int&gt; res) {<br>    for (unsigned int i = 0; i &lt; res.size(); i++) {<br>      cout &lt;&lt; res[i] &lt;&lt; &#39;x&#39;;<br>    }<br>    cout &lt;&lt; &#39;1&#39; &lt;&lt; endl;<br>    totalSolutionNum += 1;<br>  }<br>};<br><br>&#47;&#47; test<br>int main(void) {<br>  Recursion_Integer test;<br>  vector&lt;int&gt; res;<br>  test.getIntegerSolution(20, res);<br>  &#47;&#47; 输出解答方式<br>  cout &lt;&lt; &quot;总的解答方式有：&quot;;<br>  cout &lt;&lt; test.getTotalSolution() &lt;&lt; &quot;种&quot; &lt;&lt; endl;<br>}<br><br>输出结果为：<br>1x20<br>2x2x5x1<br>2x5x2x1<br>2x10x1<br>4x5x1<br>5x2x2x1<br>5x4x1<br>10x2x1<br>20x1<br>总的解答方式有：9种","like_count":0},{"had_liked":false,"id":57711,"user_name":"趙 文瑞（みつお）","can_delete":false,"product_type":"c1","uid":1099690,"ip_address":"","ucode":"D54117CC83CF62","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/aa/ebd5680c.jpg","comment_is_top":false,"comment_ctime":1546873424,"is_pvip":false,"replies":[{"id":"21433","content":"PHP语言我不熟，看思路应该没问题","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547402932,"ip_address":"","comment_id":57711,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546873424","product_id":100021201,"comment_content":"PHP版实现：<br>function product($product, array $params)<br>{<br> if ($product == 1) {<br>  if (! in_array(1, $params)) {<br>   $params[] = 1;<br>  }<br>  print_r($params);<br> } else {<br>  for ($i = 1; $i &lt;= $product; $i++) {<br>   if ($i == 1 &amp;&amp; in_array(1, $params)) {<br>    continue;<br>   }<br>   if ($product % $i != 0) {<br>    continue;<br>   }<br>   $nextParams = $params;<br>   $nextParams[] = $i;<br>   product($product &#47; $i, $nextParams);<br>  }<br> }<br>}<br><br>product($argv[1], []);","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435715,"discussion_content":"PHP语言我不熟，看思路应该没问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547402932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57682,"user_name":"Joe","can_delete":false,"product_type":"c1","uid":1337998,"ip_address":"","ucode":"EC76699640B7BF","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/8e/7b6ea886.jpg","comment_is_top":false,"comment_ctime":1546868456,"is_pvip":false,"replies":[{"id":"21432","content":"代码写得很清晰","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1547402895,"ip_address":"","comment_id":57682,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546868456","product_id":100021201,"comment_content":"赏金问题用C++求解，请指点，谢谢。<br>#include &lt;cmath&gt;<br>#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>using namespace std;<br><br>&#47;&#47; 递归法<br>&#47;&#47; 思想：数学归纳法的逆运算。将n=k的情况，逐渐缩小用n=1求解。<br>class Recursion {<br>  private:<br>  &#47;&#47; 纸币形式<br>  vector&lt;int&gt; money = {1, 2, 5, 10};<br>  int totalRewardWay = 0;<br><br>  public:<br>  &#47;**<br>   * @description: 给定奖赏金额，用递归法求奖赏方式，有1,2,5,10四种纸币。<br>   * @param {type} rewardNum- 指定赏金数， result- 奖赏方式结果。<br>   * @return: null<br>   *&#47;<br>  void rewardMethods(int rewardNum, vector&lt;int&gt; result) {<br>    if (rewardNum == 0) {<br>      &#47;&#47; 输出奖励方式<br>      outputResult(result);<br><br>    } else if (rewardNum &lt; 0) {<br>      return;<br>    } else {<br>      for (unsigned int i = 0; i &lt; money.size(); i++) {<br>        int temp = rewardNum - money[i];<br>        vector&lt;int&gt; resultTemp = result;<br>        resultTemp.push_back(money[i]);<br>        rewardMethods(temp, resultTemp);<br>      }<br>    }<br>  }<br>  &#47;**<br>   * Desciption: 奖励方式总数<br>   *&#47;<br>  int getRewardWays(void) {<br>    return totalRewardWay;<br>  }<br><br>  &#47;&#47; 输出结果<br>  void outputResult(vector&lt;int&gt; res) {<br>    for (unsigned int i = 0; i &lt; res.size(); i++) {<br>      cout &lt;&lt; res[i] &lt;&lt; &#39; &#39;;<br>    }<br>    cout &lt;&lt; endl;<br>    totalRewardWay += 1;<br>  }<br>};<br>&#47;&#47; test<br>int main(void) {<br>  Recursion test;<br>  vector&lt;int&gt; res;<br>  test.rewardMethods(10, res);<br>  &#47;&#47; 输出奖励方式总数<br>  cout &lt;&lt; &quot;总的奖励方式有：&quot;;<br>  cout &lt;&lt; test.getRewardWays() &lt;&lt; &quot;种&quot; &lt;&lt; endl;<br>}<br>输出：<br>总的奖励方式有：129种","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435698,"discussion_content":"代码写得很清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1547402895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57133,"user_name":"zart","can_delete":false,"product_type":"c1","uid":1148637,"ip_address":"","ucode":"E32677C0FD4421","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eomCrCRrLAWib0gMI2L2NbicMummlxOY6nVmphsDO0J3xx7OygNd8wJicc88RbNoHrcuXBsKLtCMvgFQ/132","comment_is_top":false,"comment_ctime":1546656831,"is_pvip":true,"replies":[{"id":"20648","content":"这里就是考虑1的情况，如果题目不要求输出1，可以忽略","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546716574,"ip_address":"","comment_id":57133,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546656831","product_id":100021201,"comment_content":"老师好，<br>看了您贴出来您自己写的代码，其他的流程都想到了，就是下面这个判断没想到，看到了您的代码后也没有想明白添加这个判断的思路是什么，请老师指教。<br>if ((i == 1) &amp;&amp; result.contains(1L)) {<br>      continue;<br>}","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435420,"discussion_content":"这里就是考虑1的情况，如果题目不要求输出1，可以忽略","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546716574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56397,"user_name":"宋冉","can_delete":false,"product_type":"c1","uid":1349054,"ip_address":"","ucode":"2A9A5BCB5BB9AD","user_header":"https://static001.geekbang.org/account/avatar/00/14/95/be/044241c6.jpg","comment_is_top":false,"comment_ctime":1546436250,"is_pvip":false,"replies":[{"id":"20326","content":"也是可以的，另一种实现方式","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546442366,"ip_address":"","comment_id":56397,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546436250","product_id":100021201,"comment_content":"在十级台阶一次上一阶或两阶的问题中，我们可以将用递归写成f(1)return1;f(2)return2&#47;*如果到最后一级就一种方法，到最后两级就两种方法*&#47;else return f(n-1)+f(n-2)&#47;*要么是从n-1级上到第n级要么是从n-2级上到第n级，在奖赏问题里可不可以用类似的方法呢先算出5元拆成1，2，5的组合和10元拆成1，2，5，10的组合设置出口再写成else return f(n-1)+f(n-2)+f(n-5)+f(n-10)的形式","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435019,"discussion_content":"也是可以的，另一种实现方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546442366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55936,"user_name":"芒果","can_delete":false,"product_type":"c1","uid":1154458,"ip_address":"","ucode":"08E6D77030CEE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/9a/4cf0e500.jpg","comment_is_top":false,"comment_ctime":1546350686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546350686","product_id":100021201,"comment_content":"打卡，今天看了迭代，归纳和递归！","like_count":0},{"had_liked":false,"id":55545,"user_name":"那又如何。","can_delete":false,"product_type":"c1","uid":1234404,"ip_address":"","ucode":"0966EE518AB2A3","user_header":"https://static001.geekbang.org/account/avatar/00/12/d5/e4/b8eaff27.jpg","comment_is_top":false,"comment_ctime":1546227889,"is_pvip":false,"replies":[{"id":"20103","content":"是哪一段代码？","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546313074,"ip_address":"","comment_id":55545,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546227889","product_id":100021201,"comment_content":"Debug代码都没看明白٩😩ི۶","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434795,"discussion_content":"是哪一段代码？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546313074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55373,"user_name":"李耀","can_delete":false,"product_type":"c1","uid":1340442,"ip_address":"","ucode":"AE819969A48947","user_header":"https://static001.geekbang.org/account/avatar/00/14/74/1a/72ac052a.jpg","comment_is_top":false,"comment_ctime":1546151907,"is_pvip":false,"replies":[{"id":"20059","content":"你可以尝试用python交作业，如果有问题我一起回复","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546203751,"ip_address":"","comment_id":55373,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546151907","product_id":100021201,"comment_content":"老师，JAVA案例看起来吃力，求PYTHON代码案例","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434754,"discussion_content":"你可以尝试用python交作业，如果有问题我一起回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546203751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":55216,"user_name":"Sentox","can_delete":false,"product_type":"c1","uid":1338416,"ip_address":"","ucode":"D00F78B4DC2A20","user_header":"https://static001.geekbang.org/account/avatar/00/14/6c/30/1b2f5344.jpg","comment_is_top":false,"comment_ctime":1546067637,"is_pvip":false,"replies":[{"id":"20062","content":"思路是可以的 如果能考虑1的情况就更好了","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1546209728,"ip_address":"","comment_id":55216,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1546067637","product_id":100021201,"comment_content":"private int[] mults;<br>&#47;**<br>     * 获取以某个数为乘积的所有可能组合（不包括1）<br>     * **&#47;<br>    private void getCombinationOfNumberTimes(int number, ArrayList&lt;Integer&gt; result) {<br><br>        if (number == 1) {<br>            Loger.i(TAG, &quot;&quot; + result);<br>            return;<br>        }else {<br>            for(int i = 0;i&lt;mults.length;i++){<br>                ArrayList&lt;Integer&gt; newResult = (ArrayList&lt;Integer&gt;)(result.clone());<br>                if(number%mults[i] == 0) {<br>                    int newNumber = number &#47; mults[i];<br>                    if(newNumber&gt;0) {<br>                        newResult.add(mults[i]);<br>                        getCombinationOfNumberTimes(newNumber, newResult);<br>                    }<br>                }<br>            }<br>        }<br>    }<br><br>测试代码==================================================：<br><br>int testNumber = 20;<br>        mults = new int[testNumber-2];<br>        for(int i = 0;i&lt;testNumber-2;i++){<br>            mults[i]=i+2;<br>        }<br>        getCombinationOfNumberTimes(testNumber,new ArrayList&lt;Integer&gt;());","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434702,"discussion_content":"思路是可以的 如果能考虑1的情况就更好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546209728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":54539,"user_name":"雍鹏亮","can_delete":false,"product_type":"c1","uid":1179992,"ip_address":"","ucode":"A7E394043295B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/01/58/98719136.jpg","comment_is_top":false,"comment_ctime":1545894739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545894739","product_id":100021201,"comment_content":"不考虑1和本身<br><br>func r2(currentValue:Int = 1, destValue:Int,result:NSMutableArray = NSMutableArray.init()){<br>    if currentValue == destValue {<br>        print(result)<br>    }else if(currentValue &lt; destValue){<br>        for i in 2...destValue&#47;2 {<br>            result.add(i)<br>            r2(currentValue: i * currentValue, destValue: destValue, result: result)<br>        }<br>    }<br>    result.removeLastObject();<br>}<br>r2(destValue: 9996)","like_count":0},{"had_liked":false,"id":54355,"user_name":"Oli张帆","can_delete":false,"product_type":"c1","uid":1338098,"ip_address":"","ucode":"6E60A370C3C14A","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/f2/db90fa96.jpg","comment_is_top":false,"comment_ctime":1545834332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545834332","product_id":100021201,"comment_content":"思考题提供一个SWIFT版本：<br>func getCombinations(_ number: Int, usedNumbers: [Int]) {<br>    guard number &gt; 1 else {return}<br>    for i in (1...number) {<br>        &#47;&#47; MARK: - number必须能被i整除<br>        guard number % i == 0,<br>            &#47;&#47; MARK: - 1最多只能用一次<br>            i &gt; 1 || usedNumbers.contains(1) == false else {continue}<br>        var newExistingProducts = usedNumbers<br>        newExistingProducts.append(i)<br>        let newNumber = number&#47;i<br>        &#47;&#47; MARK: - 1最多只能用一次<br>        guard newNumber &gt; 1 || newExistingProducts.contains(1) == false else {continue}<br>        var combination = newExistingProducts<br>        combination.append(newNumber)<br>        print(combination)<br>        getCombinations(newNumber, usedNumbers: newExistingProducts)<br>    }<br>}<br>getCombinations(8, usedNumbers: [])<br><br>运行结果：<br>[1, 8]<br>[1, 2, 4]<br>[1, 2, 2, 2]<br>[1, 4, 2]<br>[2, 4]<br>[2, 1, 4]<br>[2, 1, 2, 2]<br>[2, 2, 2]<br>[2, 2, 1, 2]<br>[2, 2, 2, 1]<br>[2, 4, 1]<br>[4, 2]<br>[4, 1, 2]<br>[4, 2, 1]<br>[8, 1]","like_count":0},{"had_liked":false,"id":53400,"user_name":"樊少皇","can_delete":false,"product_type":"c1","uid":1243453,"ip_address":"","ucode":"17D7928D8FFFDB","user_header":"https://static001.geekbang.org/account/avatar/00/12/f9/3d/3e20a86a.jpg","comment_is_top":false,"comment_ctime":1545638911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545638911","product_id":100021201,"comment_content":"public static void getFactor(int curNum,int targetNum, ArrayList&lt;Integer&gt; result){<br>\t\tif(curNum == targetNum){<br>\t\t\tSystem.out.println(result);<br>\t\t\tif(!result.contains(1)){<br>\t\t\t\tresult.add(1);<br>\t\t\t\tSystem.out.println(result);<br>\t\t\t}<br>\t\t\treturn;<br>\t\t} else if(targetNum &lt; curNum){<br>\t\t\treturn;<br>\t\t} else {<br>\t\t\tfor(int i = 1; i &lt;= targetNum &#47; 2; i++){<br>\t\t\t\tArrayList&lt;Integer&gt; newResult = (ArrayList&lt;Integer&gt;) result.clone();<br>\t\t\t\tif(i == 1 &amp;&amp; newResult.contains(1)){<br>\t\t\t\t\tcontinue;<br>\t\t\t\t}<br>\t\t\t\tnewResult.add(i);<br>\t\t\t\tgetFactor(curNum * i,targetNum, newResult);<br>\t\t\t}<br>\t\t}<br>\t}<br><br><br>8的输出：<br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[2, 1, 2, 2]<br>[2, 1, 4]<br>[2, 2, 1, 2]<br>[2, 2, 2]<br>[2, 2, 2, 1]<br>[2, 4]<br>[2, 4, 1]<br>[4, 1, 2]<br>[4, 2]<br>[4, 2, 1]","like_count":0},{"had_liked":false,"id":52954,"user_name":"何文策","can_delete":false,"product_type":"c1","uid":1356325,"ip_address":"","ucode":"AF71102062E6B6","user_header":"https://static001.geekbang.org/account/avatar/00/14/b2/25/73511ba9.jpg","comment_is_top":false,"comment_ctime":1545557469,"is_pvip":false,"replies":[{"id":"19228","content":"可能的情况都考虑到了👍","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545579418,"ip_address":"","comment_id":52954,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545557469","product_id":100021201,"comment_content":"输出：[1, 8]<br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[8, 1]<br>[2, 1, 2, 2]<br>[2, 1, 4]<br>[2, 2, 1, 2]<br>[2, 2, 2, 1]<br>[2, 4, 1]<br>[4, 1, 2]<br>[4, 2, 1]<br><br>private static void foo(int n, List&lt;Integer&gt; list) {<br>\t\tfor (int i : PRIMES) {<br>\t\t\tif (i == 1 &amp;&amp; list.contains(1)) {<br>\t\t\t\tcontinue;<br>\t\t\t}<br>\t\t\tif (n % i == 0) {<br>\t\t\t\tif (n &#47; i == 1) {<br>\t\t\t\t\tArrayList&lt;Integer&gt; temp = new ArrayList&lt;&gt;(list);<br>\t\t\t\t\ttemp.add(i);<br>\t\t\t\t\t<br>\t\t\t\t\tif (!temp.contains(1)) {<br>\t\t\t\t\t\ttemp.add(1);<br>\t\t\t\t\t}<br>\t\t\t\t\tprint(temp);<br>\t\t\t\t} else if (n &#47; i &gt; 1) {<br>\t\t\t\t\tArrayList&lt;Integer&gt; temp = new ArrayList&lt;&gt;(list);<br>\t\t\t\t\ttemp.add(i);<br>\t\t\t\t\tfoo(n &#47; i, temp);<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t}<br>\t<br>\t&#47;**<br>\t * 求一个数的所有的因子<br>\t * @param n<br>\t *&#47;<br>\tprivate static void getPrime(int n) {<br>\t\tint size = (int) Math.sqrt(n);<br>\t\tfor (int i = 1; i &lt;= size; i++) {<br>\t\t\tif (n % i == 0) {<br>\t\t\t\tPRIMES.add(i);<br>\t\t\t\t<br>\t\t\t\tif (i * i != n) { &#47;&#47; 完全平方数 只加入一个因子即可<br>\t\t\t\t\tPRIMES.add(n &#47; i);<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t}<br>public static void main(String[] args) {<br>\t\tint n = 8;<br>\t\tgetPrime(n);<br>\t\tfoo(n,  new ArrayList&lt;Integer&gt;());<br>\t}","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434005,"discussion_content":"可能的情况都考虑到了👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545579418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52721,"user_name":"梅坊帝卿","can_delete":false,"product_type":"c1","uid":1240270,"ip_address":"","ucode":"702F019BA3356C","user_header":"","comment_is_top":false,"comment_ctime":1545487530,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545487530","product_id":100021201,"comment_content":"去重后的结果<br>sort and unique results:16<br>1x2x2x2<br>1x2x4<br>1x4x2<br>1x8<br>2x1x2x2<br>2x1x4<br>2x2x1x2<br>2x2x2<br>2x2x2x1<br>2x4<br>2x4x1<br>4x1x2<br>4x2<br>4x2x1<br>8<br>8x1","like_count":0},{"had_liked":false,"id":52656,"user_name":"毕明亮","can_delete":false,"product_type":"c1","uid":1341227,"ip_address":"","ucode":"1A72F759A97CD4","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/2b/788c15f7.jpg","comment_is_top":false,"comment_ctime":1545468090,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545468090","product_id":100021201,"comment_content":"问题已解决，自己重新编了一下，加了个测试，就想看看计算机计算的计算过程，感谢🙏","like_count":0},{"had_liked":false,"id":52514,"user_name":"道爷","can_delete":false,"product_type":"c1","uid":1059753,"ip_address":"","ucode":"809DD149710C72","user_header":"https://static001.geekbang.org/account/avatar/00/10/2b/a9/b6ee624d.jpg","comment_is_top":false,"comment_ctime":1545403171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545403171","product_id":100021201,"comment_content":"# 给定一个整数，分解出所有乘积为该数的乘法组合<br><br>def analysis(num, answers):<br>    v = 1<br>    for x in answers:<br>        v *= x<br>    if v == num and len(answers) &gt; 1:<br>        print(answers)<br>        return<br>    elif v &gt; num:<br>        return<br><br>    arr = range(1, num + 1)<br>    for x in arr:<br>        if x == 1 and x in answers:<br>            continue<br>        newanswer = answers[:]<br>        newanswer.append(x)<br>        analysis(num, newanswer)<br>        <br><br><br>analysis(8, [])<br><br># [1, 2, 2, 2]<br># [1, 2, 4]<br># [1, 4, 2]<br># [1, 8]<br># [2, 1, 2, 2]<br># [2, 1, 4]<br># [2, 2, 1, 2]<br># [2, 2, 2]<br># [2, 4]<br># [4, 1, 2]<br># [4, 2]<br># [8, 1]","like_count":0},{"had_liked":false,"id":52507,"user_name":"Rainbow","can_delete":false,"product_type":"c1","uid":1214835,"ip_address":"","ucode":"0651CFFE920BE7","user_header":"https://static001.geekbang.org/account/avatar/00/12/89/73/e1e01096.jpg","comment_is_top":false,"comment_ctime":1545400443,"is_pvip":false,"replies":[{"id":"19155","content":"你这里的rewards[]数组是整型吧？list是ArrayList&lt;Integer&gt;吧？Java中ArrayList的remove函数，如果你放入一个int整数x，那么它实际上删除的是index=x的元素，而不是值为x的元素。所以需要写成list.remove(new Integer(rewards[i])); 这样你传入的是Integer Object，ArrayList会去找值为rewards[i]的元素。不过，即便如此，ArrayList可能也是删除第一个值为rewards[i]的元素，但是这里我们应该是删除最后一个加入的rewards[i]。我建议你可以试试list.remove(list.size() - 1);。总体来说，这个思路很好，利用了栈的思想，避免了数据的复制，如果再优化一下还可以免去递归调用","user_name":"作者回复","user_name_real":"黄申","uid":"1275061","ctime":1545442286,"ip_address":"","comment_id":52507,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545400443","product_id":100021201,"comment_content":"看完之后有一个问题，不知道大家有没有想法跟我一样的。如果把<br>```<br>    \t\tfor (int i = 0; i &lt; rewards.length; i++) {<br>    \t\t\tArrayList&lt;Long&gt; newResult = (ArrayList&lt;Long&gt;)(result.clone());\t&#47;&#47; 由于有 4 种情况，需要 clone 当前的解并传入被调用的函数<br>    \t\t\tnewResult.add(rewards[i]);\t\t\t\t\t\t&#47;&#47; 记录当前的选择，解决一点问题<br>    \t\t\tget(totalReward - rewards[i], newResult);\t\t&#47;&#47; 剩下的问题，留给嵌套调用去解决<br>    \t\t}<br>```<br>这段代码改成：<br>```<br>            for(int i = 0; i &lt; 4; i++){<br>                list.add(rewards[i]);<br>                get(list, total - rewards[i]);<br>                list.remove(rewards[i]);<br>&#47;&#47;                ArrayList&lt;Integer&gt; newlist = (ArrayList&lt;Integer&gt;)list.clone();<br>&#47;&#47;                newlist.add(rewards[i]);<br>&#47;&#47;                get(newlist, total - rewards[i]);<br>            }<br>```<br>自己也试了一下，发现并不可以。但我在逻辑推理上感觉没问题，还请大家帮忙看一下。<br><br>希望版主能解惑~<br>","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433897,"discussion_content":"你这里的rewards[]数组是整型吧？list是ArrayList&amp;lt;Integer&amp;gt;吧？Java中ArrayList的remove函数，如果你放入一个int整数x，那么它实际上删除的是index=x的元素，而不是值为x的元素。所以需要写成list.remove(new Integer(rewards[i])); 这样你传入的是Integer Object，ArrayList会去找值为rewards[i]的元素。不过，即便如此，ArrayList可能也是删除第一个值为rewards[i]的元素，但是这里我们应该是删除最后一个加入的rewards[i]。我建议你可以试试list.remove(list.size() - 1);。总体来说，这个思路很好，利用了栈的思想，避免了数据的复制，如果再优化一下还可以免去递归调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545442286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52498,"user_name":"毕明亮","can_delete":false,"product_type":"c1","uid":1341227,"ip_address":"","ucode":"1A72F759A97CD4","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/2b/788c15f7.jpg","comment_is_top":false,"comment_ctime":1545395862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545395862","product_id":100021201,"comment_content":"我输入的数字是4","like_count":0},{"had_liked":false,"id":52497,"user_name":"毕明亮","can_delete":false,"product_type":"c1","uid":1341227,"ip_address":"","ucode":"1A72F759A97CD4","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/2b/788c15f7.jpg","comment_is_top":false,"comment_ctime":1545395726,"is_pvip":false,"replies":[{"id":"19145","content":"能否把完整的代码在这里贴一下？","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545409644,"ip_address":"","comment_id":52497,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545395726","product_id":100021201,"comment_content":"老师，我有个疑问，我用的python，就是我在newResult.append(rewards[i])的下一行新加了print（“*”），用来记录递归时的运算次数，发现打印结果［2,1,1］的前面有8个*，和我理解的由底往上返回时候的计算顺序好像不一样，这是因为什么呢","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433894,"discussion_content":"能否把完整的代码在这里贴一下？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545409644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52438,"user_name":"lianlian","can_delete":false,"product_type":"c1","uid":1298468,"ip_address":"","ucode":"79B48B38259097","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOc0n02eNKflX5ey4TYl1NBfb0kicc20AgayEAGDYylalqHnLTeqMnaJ2iaZsLVmqEo0T0YViadU9Ig/132","comment_is_top":false,"comment_ctime":1545382556,"is_pvip":false,"replies":[{"id":"19149","content":"用栈来实现递归，很棒","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545410169,"ip_address":"","comment_id":52438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545382556","product_id":100021201,"comment_content":"方法1是用bool值判断是否已经存在因子1，但是写起来要麻烦一些；方法2和3都是用函数判断是否存在因子1，这就多了个调用，方法2和方法3差别在于，方法2始终用一个vector容器，方法3每到达一个状态就新增一个新的vector，但是调用返回之后，会自动释放相应的内存。这是根据老师的写法写的方法3，以前我没想过可以这样写哈哈，感觉老师好厉害，知识面即广又深，这个专栏的每一篇文章都让我开阔视野，谢谢老师！<br>&#47;***************************method1*******************&#47;<br>#include&lt;iostream&gt;<br>#include&lt;vector&gt;<br>#include&lt;assert.h&gt;<br><br>using namespace std;<br><br>void printRes(vector&lt;int&gt; result)<br>{<br>\tint size = result.size();<br><br>\tif(size == 0)<br>\t\tcout &lt;&lt; 1 &lt;&lt; &quot; &quot; &lt;&lt; 1;<br>\telse<br>\t{<br>\t\tfor(int i = 0; i &lt; size; i++)<br>\t\t\tcout &lt;&lt; result[i] &lt;&lt; &quot; &quot;;<br>\t\t<br>\t\tif(size == 1)<br>\t\t\tcout &lt;&lt; 1;<br>\t}<br>\tcout &lt;&lt; endl;<br>}<br><br>void solve(int n, vector&lt;int&gt; res, bool haveOne, int &amp;total)<br>{<br>\tif(n == 1)<br>\t{<br>\t\tprintRes(res);<br>\t\ttotal++;<br>\t\treturn;<br>\t}<br><br>\tfor(int i = 1; i &lt;= n; i++)   &#47;&#47;method 1<br>\t{<br>\t\tif(haveOne &amp;&amp; i == 1)<br>\t\t\tcontinue;<br><br>\t\tif(n % i == 0)<br>\t\t{<br>\t\t\tif(i == 1)<br>\t\t\t\thaveOne = true;<br><br>\t\t\tres.push_back(i);<br>\t\t\tn = n &#47; i;<br>\t\t\tsolve(n, res, haveOne, total);<br>\t\t\tn = n * i;<br>\t\t\t<br>\t\t\tif(res[res.size() - 1] == 1)<br>\t\t\t\thaveOne = false;<br><br>\t\t\tres.pop_back();<br>\t\t}<br>\t}<br>}<br><br>int main()<br>{<br>\tint a;<br>\twhile(cin &gt;&gt; a)<br>\t{<br>\t\tassert(a &gt; 0);<br>\t\tvector&lt;int&gt; result;<br>\t\tint count = 0;<br><br>\t\tcout &lt;&lt; &quot;All cases of decomposition of integer &quot; &lt;&lt; a &lt;&lt; &quot; are :&quot; &lt;&lt; endl;<br>\t\tsolve(a, result, false, count);<br><br>\t\tcout &lt;&lt; &quot;All methods for decomposition of integer &quot; &lt;&lt; a &lt;&lt; &quot; is &quot; &lt;&lt; count &lt;&lt; endl;<br>\t\tcout &lt;&lt; endl;<br>\t}<br>\treturn 0;<br>}<br><br>&#47;********************method2 and method 3************************&#47;<br>&#47;&#47;这里只写关键函数，其他同上<br>bool isExist1(vector&lt;int&gt; cur)<br>{<br>\tvector&lt;int&gt; :: iterator it = find(cur.begin(), cur.end(), 1);<br>\tif(it != cur.end())<br>\t\treturn true;<br>\telse<br>\t\treturn false;<br>}<br><br>void solve(int n, vector&lt;int&gt; &amp;res)<br>{<br>\tif(n == 1)<br>\t{<br>\t\tprintRes(res);<br>\t\treturn;<br>\t}<br><br>\tfor(int i = 1; i &lt;= n; i++)<br>\t{<br>\t\tif(isExist1(res) &amp;&amp; i == 1)<br>\t\t\tcontinue;<br><br>\t\tif(n % i == 0)<br>\t\t{<br>\t\t\t&#47;&#47;method 2<br>\t\t\t&#47;&#47;res.push_back(i);  <br>\t\t\t&#47;&#47;n = n &#47; i;<br>\t\t\t&#47;&#47;solve(n, res);<br>\t\t\t&#47;&#47;n = n * i;<br>\t\t\t&#47;&#47;res.pop_back();<br><br>\t\t\t&#47;&#47;method 3<br>\t\t\tvector&lt;int&gt; newRes = res;  <br>\t\t\tnewRes.push_back(i);<br>\t\t\tn = n &#47; i;<br>\t\t\tsolve(n, newRes);<br>\t\t\tn = n * i;<br>\t\t}<br>\t}<br>}<br>无法传图，三种方法输出一致。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433874,"discussion_content":"用栈来实现递归，很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545410169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52434,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1545381893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545381893","product_id":100021201,"comment_content":"经过老师提醒，部分结果缺失的 bug 已修复。分享下思路：<br>对 num 分解，如果 num =1  ，（如果结果列表中如果不含1，则插入1 ）就打印出结果列表，否则<br>对 1 到 num 进行遍历，先判断下如果结果表中包含 1，并且 i == 1，则直接 continue，执行下一次循环（否则会进入死循环，因为一个数除以 1 永远不等于 1 ）<br>当时 num % i  == 0 ,将 i 放入结果列表中，并对 num 对 i 的商递归调用分解函数；<br><br>代码及结果<br>https:&#47;&#47;github.com&#47;somenzz&#47;geekbang&#47;blob&#47;master&#47;mathOfProgramer&#47;chapter05_recursion_1.py","like_count":0},{"had_liked":false,"id":52377,"user_name":"曹宇","can_delete":false,"product_type":"c1","uid":1354271,"ip_address":"","ucode":"0CDF9B3806FB32","user_header":"https://static001.geekbang.org/account/avatar/00/14/aa/1f/38b1bb9e.jpg","comment_is_top":false,"comment_ctime":1545371984,"is_pvip":true,"replies":[{"id":"19140","content":"没错 后面也会介绍树结构中深度优先的搜索。其实递归的路径，树结构很多都是想通的","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545408183,"ip_address":"","comment_id":52377,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545371984","product_id":100021201,"comment_content":"树结构，本身也是递归表达。可以表示为树根-&gt;子树（每个子树也是独立的树）。<br>通过递归调用的过程，也可以理解为不断生成子树的过程，而终结条件可以理解为确定叶子结果的条件，同时标记叶子结点是否满足解。<br>课程中问题可以理解为通过递归的方式不断的生成子树，最终确定所有满足条件的叶子结点，而根节点到叶子结点的路径即为问题的解。","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433852,"discussion_content":"没错 后面也会介绍树结构中深度优先的搜索。其实递归的路径，树结构很多都是想通的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545408183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52360,"user_name":"鹏飞天下","can_delete":false,"product_type":"c1","uid":1101792,"ip_address":"","ucode":"EB9FFD9FE64A4C","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/e0/f6819d03.jpg","comment_is_top":false,"comment_ctime":1545367615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545367615","product_id":100021201,"comment_content":"递归去重后应该是11种<br>[[10,], [1,1,1,1,2,2,2,], [1,1,1,2,5,], [1,1,1,1,1,1,1,1,2,], [1,1,1,1,1,1,1,1,1,1,], [1,1,1,1,1,5,], [1,1,1,1,1,1,2,2,], [5,5,], [2,2,2,2,2,], [1,1,2,2,2,2,], [1,2,2,5,]]","like_count":0},{"had_liked":false,"id":52348,"user_name":"oddrock","can_delete":false,"product_type":"c1","uid":1037506,"ip_address":"","ucode":"55BADA192250B0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d4/c2/910d231e.jpg","comment_is_top":false,"comment_ctime":1545364982,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545364982","product_id":100021201,"comment_content":"public class Lesson5_2 {<br>\tpublic static long combinationCount = 0;\t\t&#47;&#47; 组合的数量<br>\t<br>\t&#47;*<br>\t * 按照x*x*x的形式打印数字组合<br>\t *&#47;<br>\tprivate static void printCombination(ArrayList&lt;Long&gt; combination) {<br>\t\tboolean first = true;<br>\t\tStringBuffer sb = new StringBuffer();<br>\t\tfor(int i=combination.size()-1; i&gt;=0; i--) {<br>\t\t\tif(first) {<br>\t\t\t\tfirst = false;<br>\t\t\t}else {<br>\t\t\t\tsb.append(&quot;*&quot;);<br>\t\t\t}<br>\t\t\tsb.append(combination.get(i));<br>\t\t}<br>\t\tSystem.out.println(sb.toString());<br>\t}<br>\t<br>\t&#47;**<br>\t * <br>\t * @param decomposedObject\t待分解的数字<br>\t * @param combination\t\t分解数字的组合<br>\t * @param containOne\t\t组合中是否已经包含1<br>\t *&#47;<br>\t@SuppressWarnings(&quot;unchecked&quot;)<br>\tpublic static void computeCombination(long decomposedObject, ArrayList&lt;Long&gt; combination, boolean containOne) {<br>\t\tif(combination==null) {<br>\t\t\tcombination = new ArrayList&lt;Long&gt;();<br>\t\t}<br>\t\tif(decomposedObject==1) {\t&#47;&#47; 等于1说明组合满足需求<br>\t\t\tif(containOne) {\t\t&#47;&#47; 已经包含1，且待分解数也为1，则直接打印<br>\t\t\t\tprintCombination(combination);<br>\t\t\t\tcombinationCount++;<br>\t\t\t}else {<br>\t\t\t\tif(combination.size()&gt;1) {\t\t&#47;&#47; 待分解数为1，且组合数字个数&gt;1，则打印<br>\t\t\t\t\tprintCombination(combination);<br>\t\t\t\t\tcombinationCount++;<br>\t\t\t\t}<br>\t\t\t\tif(!containOne) {\t\t\t\t&#47;&#47; 待分解数为1，且组合中没有1，则加上1形成新组合<br>\t\t\t\t\tcombination.add(1L);<br>\t\t\t\t\tprintCombination(combination);<br>\t\t\t\t\tcombinationCount++;<br>\t\t\t\t}\t<br>\t\t\t}<br>\t\t\treturn;<br>\t\t}else if(decomposedObject&lt;1){\t\t\t&#47;&#47; 小于1说明不满足<br>\t\t\treturn;<br>\t\t}else {<br>\t\t\tfor (long i=1; i&lt;=decomposedObject; i++) {\t\t&#47;&#47;TODO: 此处有优化空间，不必要全部循环<br>\t\t\t\tArrayList&lt;Long&gt; nextCombination = (ArrayList&lt;Long&gt;)combination.clone();\t<br>\t\t\t\tif(decomposedObject%i==0) {<br>\t\t\t\t\tlong nextDecomposedObject = decomposedObject&#47;i;\t\t<br>\t\t\t\t\tnextCombination.add(i);<br>\t\t\t\t\tif(i==1) {<br>\t\t\t\t\t\tif(containOne) {\t&#47;&#47; 因子为1，组合中已有1，跳过<br>\t\t\t\t\t\t\tcontinue;<br>\t\t\t\t\t\t}else {\t\t\t\t&#47;&#47; 因子为1，组合中没有1，将1加入组合<br>\t\t\t\t\t\t\tcomputeCombination(nextDecomposedObject, nextCombination, true);<br>\t\t\t\t\t\t}<br>\t\t\t\t\t}else {<br>\t\t\t\t\t\tcomputeCombination(nextDecomposedObject, nextCombination, containOne);<br>\t\t\t\t\t}<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t}<br>\t<br>\tpublic static void main(String[] args) {<br>\t\tcomputeCombination(8, null, false);<br>\t\tSystem.out.println(&quot;共有&quot;+combinationCount+&quot;种分解方式&quot;);<br>\t}<br>}","like_count":0},{"had_liked":false,"id":52317,"user_name":"鹏飞天下","can_delete":false,"product_type":"c1","uid":1101792,"ip_address":"","ucode":"EB9FFD9FE64A4C","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/e0/f6819d03.jpg","comment_is_top":false,"comment_ctime":1545361900,"is_pvip":false,"replies":[{"id":"19041","content":"这里考虑先后的顺序不同，也是不同的解","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545374133,"ip_address":"","comment_id":52317,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545361900","product_id":100021201,"comment_content":" 代码运行后会有许多重复例如[1, 2, 1, 1, 1, 1, 1, 1, 1]  ，[2, 1, 1, 1, 1, 1, 1, 1, 1] 其实就是重复的数据","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433832,"discussion_content":"这里考虑先后的顺序不同，也是不同的解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545374133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52167,"user_name":"NullPointer","can_delete":false,"product_type":"c1","uid":1179184,"ip_address":"","ucode":"83B7DA926A0411","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/30/c9b568c3.jpg","comment_is_top":false,"comment_ctime":1545322755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545322755","product_id":100021201,"comment_content":"public static void main(String[] args) {<br>\t\tArrayList&lt;Integer&gt; ret=new ArrayList&lt;&gt;();<br>\t\tgetReward(8,ret);<br>\t}<br>\tpublic static void getReward(Integer n,ArrayList&lt;Integer&gt; ls) {<br>\t\tif(n==1) {<br>\t\t\tSystem.out.println(ls);<br>\t\t}else if(n&lt;0) {<br>\t\t\treturn ;<br>\t\t}else {<br>\t\t\tfor(int i=1;i&lt;=n;i++) {<br>\t\t\t\tArrayList&lt;Integer&gt; newResult=(ArrayList&lt;Integer&gt;)(ls.clone());<br>\t\t\t\tif(ls.size()&gt;0&amp;&amp;i==1) {<br>\t\t\t\t\tcontinue;<br>\t\t\t\t}<br>\t\t\t\tif(n%i==0) {<br>\t\t\t\t\tnewResult.add(i);<br>\t\t\t\t\tgetReward( n&#47;i, newResult) ;<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t\t<br>\t <br>\t}<br><br>====结果====<br>[1, 2, 2, 2]<br>[1, 2, 4]<br>[1, 4, 2]<br>[1, 8]<br>[2, 2, 2]<br>[2, 4]<br>[4, 2]<br>[8]<br>","like_count":0},{"had_liked":false,"id":52111,"user_name":"风轨","can_delete":false,"product_type":"c1","uid":1185844,"ip_address":"","ucode":"7B8A5233B61EB0","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/34/c082419c.jpg","comment_is_top":false,"comment_ctime":1545311119,"is_pvip":false,"replies":[{"id":"19146","content":"如果不考虑1的情况，这是可以的","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545409798,"ip_address":"","comment_id":52111,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545311119","product_id":100021201,"comment_content":"package org.fggv.arithmetic;<br>import java.util.ArrayList;<br>import java.util.Arrays;<br>import java.util.HashSet;<br>import java.util.List;<br>import java.util.Set;<br>public class Factorization {<br>\t&#47;**<br>\t * 计算num所有分解的可能，不包含1的情况；<br>\t * @param num<br>\t * @return<br>\t *&#47;<br>\tstatic Set&lt;List&lt;Integer&gt;&gt; factorization(int num) {<br>\t\tSet&lt;List&lt;Integer&gt;&gt; result = new HashSet&lt;&gt;();<br>\t\tresult.add(Arrays.asList(num));<br>\t\tfor (int i = 2; i &lt;= num&#47;2; i++) {<br>\t\t\tif (num % i == 0) {<br>\t\t\t\tint divisor1 = i, divisor2 = num &#47; i;<br>\t\t\t\tSet&lt;List&lt;Integer&gt;&gt; divisor1divisors = factorization(divisor1);<br>\t\t\t\tSet&lt;List&lt;Integer&gt;&gt; divisor2divisors = factorization(divisor2);<br>\t\t\t\tfor (List&lt;Integer&gt; d1 : divisor1divisors) {<br>\t\t\t\t\tfor (List&lt;Integer&gt; d2 : divisor2divisors) {<br>\t\t\t\t\t\tList&lt;Integer&gt; r = new ArrayList&lt;&gt;(d1);<br>\t\t\t\t\t\tr.addAll(d2);<br>\t\t\t\t\t\tresult.add(r);<br>\t\t\t\t\t}<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t\treturn result;<br>\t}<br>\tpublic static void main(String[] args) {<br>\t\tSystem.out.println(factorization(1));<br>\t\t&#47;&#47; [[1]]<br>\t\tSystem.out.println(factorization(2));<br>\t\t&#47;&#47; [[2]]<br>\t\tSystem.out.println(factorization(3));<br>\t\t&#47;&#47; [[3]]<br>\t\tSystem.out.println(factorization(4));<br>\t\t&#47;&#47; [[2, 2], [4]]<br>\t\tSystem.out.println(factorization(5));<br>\t\t&#47;&#47; [[5]]<br>\t\tSystem.out.println(factorization(6));<br>\t\t&#47;&#47; [[3, 2], [2, 3], [6]]<br>\t\tSystem.out.println(factorization(7));<br>\t\t&#47;&#47; [[7]]<br>\t\tSystem.out.println(factorization(8));<br>\t\t&#47;&#47; [[2, 2, 2], [2, 4], [8], [4, 2]]<br>\t\tSystem.out.println(factorization(9));<br>\t\t&#47;&#47; [[3, 3], [9]]<br>\t\tSystem.out.println(factorization(10));<br>\t\t&#47;&#47; [[2, 5], [10], [5, 2]]<br>\t\tSystem.out.println(factorization(11));<br>\t\t&#47;&#47; [[11]]<br>\t\tSystem.out.println(factorization(12));<br>\t\t&#47;&#47; [[2, 3, 2], [4, 3], [2, 2, 3], [3, 2, 2], [3, 4], [2, 6], [12], [6, 2]]<br>\t\tSystem.out.println(factorization(13));<br>\t\t&#47;&#47; [[13]]<br>\t\tSystem.out.println(factorization(14));<br>\t\t&#47;&#47; [[2, 7], [7, 2], [14]]<br>\t\tSystem.out.println(factorization(15));<br>\t\t&#47;&#47; [[3, 5], [15], [5, 3]]<br>\t\tSystem.out.println(factorization(16));<br>\t\t&#47;&#47; [[4, 4], [2, 2, 4], [4, 2, 2], [2, 8], [8, 2], [2, 2, 2, 2], [16], [2, 4, 2]]<br>\t}<br>}","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433747,"discussion_content":"如果不考虑1的情况，这是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545409798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51862,"user_name":"晓嘿","can_delete":false,"product_type":"c1","uid":1341930,"ip_address":"","ucode":"4B52EF7B9A1394","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/ea/8fe22e74.jpg","comment_is_top":false,"comment_ctime":1545271716,"is_pvip":false,"replies":[{"id":"18798","content":"嗯 可以的","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545275996,"ip_address":"","comment_id":51862,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545271716","product_id":100021201,"comment_content":"老师，我上次的思考题答案，确实少了结尾是1的多组可能。我看您给 <br>“思考题：请大神帮忙看下，输出少了个 [1,8]<br>输出：[2, 2, 2, 1] [2, 4, 1][4, 2, 1][8, 1]”<br>这个问题修改之后的代码，虽然有了这一组，8X1,2X4X1...这几组但是少了2X4,4x2,2x2x2。您看如果把代码改成这样会不会可以<br><br><br>public static void recursion(long total, ArrayList&lt;Long&gt; result) {<br><br>        if (total == 1) {<br>            if (!result.contains(1L)){<br>                ArrayList&lt;Long&gt; lastIsOneResult = (ArrayList&lt;Long&gt;) (result.clone());<br>                lastIsOneResult.add(1L);<br>                System.out.println(lastIsOneResult);<br>            }<br>            if(result.size()&gt;1){<br>                System.out.println(result);<br>            }<br><br>            return;<br>        } else {<br>            for (long i = 1; i &lt;= total; i++) {<br>                if ((i == 1) &amp;&amp; result.contains(1L)) continue;<br>                ArrayList&lt;Long&gt; newList = (ArrayList&lt;Long&gt;) (result.clone());<br>                newList.add(Long.valueOf(i));<br>                if (total % i != 0) {<br>                    continue;<br>                }<br>                recursion(total &#47; i, newList);<br>            }<br>        }<br>    }","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433655,"discussion_content":"嗯 可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545275996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51818,"user_name":"溯雪","can_delete":false,"product_type":"c1","uid":1174371,"ip_address":"","ucode":"E819E5454BF216","user_header":"https://static001.geekbang.org/account/avatar/00/11/eb/63/09e7f442.jpg","comment_is_top":false,"comment_ctime":1545267020,"is_pvip":false,"replies":[{"id":"18797","content":"可以观察嵌套函数返回的情况，如果是单线返回，是很容易改成循环","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545275953,"ip_address":"","comment_id":51818,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545267020","product_id":100021201,"comment_content":"老师，这类问题，有没有比较通用的办法把递归改循环？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433632,"discussion_content":"可以观察嵌套函数返回的情况，如果是单线返回，是很容易改成循环","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545275953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51767,"user_name":"微凉","can_delete":false,"product_type":"c1","uid":1178156,"ip_address":"","ucode":"F6BD0AE11AE224","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/2c/9a0c45e6.jpg","comment_is_top":false,"comment_ctime":1545234287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545234287","product_id":100021201,"comment_content":"n就是步长，也就是一条解中加起来为10的所有数据的个数","like_count":0},{"had_liked":false,"id":51693,"user_name":"徐凯","can_delete":false,"product_type":"c1","uid":1244991,"ip_address":"","ucode":"12F82BA3649CD5","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/3f/bbb8a88c.jpg","comment_is_top":false,"comment_ctime":1545224566,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545224566","product_id":100021201,"comment_content":"void ret_reward(int arr[],vector&lt;int&gt; vec,int total_reward)<br>{<br>\tif (total_reward == 0)<br>\t{<br>\t\tfor (auto val : vec)<br>\t\t\tcout &lt;&lt; val &lt;&lt; &quot; &quot;;<br>\t\tcout &lt;&lt; endl;<br>\t\treturn;<br>\t}<br>\tif (total_reward&lt;0)<br>\t\treturn;<br>\tfor (int i = 0; i &lt; 4; i++)<br>\t{<br>\t\tvec.push_back(arr[i]);<br>\t\tret_reward(arr, vec, total_reward - arr[i]);<br>\t\tvec.pop_back();<br>\t}<br>}<br>void fenjie(vector&lt;int&gt; vec,int val,int des_num)<br>{<br>\tif (val == des_num)<br>\t{<br>\t\tfor (auto v : vec)<br>\t\t\tcout &lt;&lt; v &lt;&lt; &quot;*&quot;;<br>\t\tcout &lt;&lt; endl;<br>\t}<br>\tif (val &gt; des_num)<br>\t\treturn;<br>\tfor (int i = 1; i &lt;= des_num; i++)<br>\t{<br>\t\tif (find(vec.begin(),vec.end(),1)==vec.end())<br>\t\t{<br>\t\t\t\tvec.push_back(i);<br>\t\t\t\tfenjie(vec, val*i, des_num);<br>\t\t\t\tvec.pop_back();<br>\t\t}<br>\t\telse if (vec.front() == 1&amp;&amp;i!=1)<br>\t\t{<br>\t\t\tvec.push_back(i);<br>\t\t\tfenjie(vec, val*i, des_num);<br>\t\t\tvec.pop_back();<br>\t\t}<br>\t}<br>}","like_count":0},{"had_liked":false,"id":51584,"user_name":"来碗绿豆汤","can_delete":false,"product_type":"c1","uid":1070051,"ip_address":"","ucode":"B0AB63B8D9729F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","comment_is_top":false,"comment_ctime":1545203698,"is_pvip":false,"replies":[{"id":"18759","content":"如果循环从2开始，可能会遗漏一些情况，请参考我给网友李尧的回复","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545252420,"ip_address":"","comment_id":51584,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545203698","product_id":100021201,"comment_content":"思考题：<br>public static void divide(int target, ArrayList&lt;Integer&gt; result){<br>        if(target &lt;= 2){<br>            result.add(target);<br>            System.out.println(result);<br>            return;<br>        }<br>        for(int i = 2; i &lt;= target; i++){<br>            if(target % i == 0){<br>                ArrayList&lt;Integer&gt; newResult = (ArrayList&lt;Integer&gt;) result.clone();<br>                newResult.add(i);<br>                divide(target&#47;i, newResult);<br>            }<br>        }<br>    }","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433523,"discussion_content":"如果循环从2开始，可能会遗漏一些情况，请参考我给网友李尧的回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545252420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51571,"user_name":"文刂 氵共 超","can_delete":false,"product_type":"c1","uid":1282813,"ip_address":"","ucode":"C2CE1512D23012","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","comment_is_top":false,"comment_ctime":1545201389,"is_pvip":false,"replies":[{"id":"18730","content":"这可能和你编程的IDE有关，你用的什么语言和IDE？","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545230981,"ip_address":"","comment_id":51571,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545201389","product_id":100021201,"comment_content":"请教个问题，如何对代码进行排版，我提交了两次，一次用tab表示空格，另一次在txt里手动用空格转的，但最后代码显示的都没有空格","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433517,"discussion_content":"这可能和你编程的IDE有关，你用的什么语言和IDE？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545230981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51498,"user_name":"陈诚","can_delete":false,"product_type":"c1","uid":1338751,"ip_address":"","ucode":"138DD00D245FEE","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/7f/e1c189c7.jpg","comment_is_top":false,"comment_ctime":1545189909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545189909","product_id":100021201,"comment_content":"把奖赏的递归算法用C语言实现了一下，我用到是tab键，最终显示时可能有些问题，望各位见谅<br>#include &lt;stdio.h&gt;<br>#include &lt;stdlib.h&gt;<br>#include &lt;string.h&gt;<br><br>int reward_list[4] = {1, 2, 5, 10};<br><br>struct result {<br>\tint array[10];<br>\tint index;<br>};<br><br>int total_kind = 0;<br>void reward(int rest_reward, struct result rst)<br>{<br>\tint i = 0;<br><br>\tif (rest_reward &lt; 0)<br>\t\treturn;<br>\tif (rest_reward == 0) {<br>\t\tprintf(&quot;result %4d: &quot;, ++total_kind);<br>\t\tfor (i = 0; i &lt; rst.index; ++i)<br>\t\t\tprintf(&quot;%d\t&quot;, rst.array[i]);<br>\t\tprintf(&quot;\\n&quot;);<br>\t} else {<br>\t\tfor (i = 0; i &lt; 4; ++i) {<br>\t\t\tstruct result cur_result = rst;<br>\t\t\tcur_result.array[cur_result.index] = reward_list[i];<br>\t\t\t++cur_result.index;<br>\t\t\treward(rest_reward - reward_list[i], cur_result);<br>\t\t}<br>\t}<br>}<br><br>int main(int argc, char *argv[])<br>{<br>\tint total_reward = 0;<br>\tstruct result rst;<br>\t<br>\tif (argc != 2) {<br>\t\tprintf(&quot;Usage: %s total_reward\\n&quot;, argv[0]);<br>\t\treturn -1;<br>\t}<br>\ttotal_reward = atoi(argv[1]);<br>\tmemset(&amp;rst, 0, sizeof(rst));<br>\treward(total_reward, rst);<br><br>\treturn 0;<br>}<br>","like_count":0},{"had_liked":false,"id":51490,"user_name":"晓嘿","can_delete":false,"product_type":"c1","uid":1341930,"ip_address":"","ucode":"4B52EF7B9A1394","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/ea/8fe22e74.jpg","comment_is_top":false,"comment_ctime":1545189292,"is_pvip":false,"replies":[{"id":"18760","content":"如果不考虑8,1中的1，这样写是可以的","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545252966,"ip_address":"","comment_id":51490,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545189292","product_id":100021201,"comment_content":"老师，迭代次数在代码中来说，就是递归的方法被调用的次数吗。<br>我理解的这种泛化之后的思路就是，看n=1，也就是迭代一次的时候，应该怎么解决问题，比如在示例中就是四种数值每种各取一次。n=2的时候，每种再取一次。这么理解可以吗。<br>老师你看这个结果对吗<br>    public long total=8;<br>    public void getResult(long multiplyValue,ArrayList&lt;Long&gt; result){<br>        if(multiplyValue==total){<br>            Log.e(TAG,&quot;--result:&quot;+result);<br>            return;<br>        }else if(multiplyValue&gt;total){<br>            Log.e(TAG,&quot;--badresult:&quot;+result);<br>            return;<br>        }<br>        else {<br>            &#47;&#47;我觉得这块可以将1Xtotal和totalX1直接排除，改为i&lt;=total&#47;2 减少递归的次数。不过仍然可能溢出。<br>            for(long i=1;i&lt;=total;i++){<br>                ArrayList&lt;Long&gt; newResult= (ArrayList&lt;Long&gt;) result.clone();<br>                if(i!=1||!newResult.contains(new Long(1))){<br><br>                    newResult.add(i);<br>                    getResult(multiplyValue*i,newResult);<br>                }<br><br>            }<br>        }<br>    }","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433480,"discussion_content":"如果不考虑8,1中的1，这样写是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545252966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51485,"user_name":"大次狼","can_delete":false,"product_type":"c1","uid":1154660,"ip_address":"","ucode":"CE9EC8FCF47A7E","user_header":"https://static001.geekbang.org/account/avatar/00/11/9e/64/dd9328c5.jpg","comment_is_top":false,"comment_ctime":1545188502,"is_pvip":true,"replies":[{"id":"18761","content":"个别情况漏了1，不影响整体的正确性","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545253326,"ip_address":"","comment_id":51485,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545188502","product_id":100021201,"comment_content":"    public static Integer hope = 8;<br>    public static void divide(Integer calculate, ArrayList&lt;Integer&gt; factor) {<br>        if (calculate &gt; hope) {<br>            return;<br>        } else if (calculate.compareTo(hope) == 0) {<br>            StringBuilder stringBuilder0 = new StringBuilder(hope + &quot;=1*&quot;); &#47;&#47;前缀加上1*<br>            StringBuilder stringBuilder1 = new StringBuilder(hope + &quot;=&quot;);   &#47;&#47;原本形式<br>            StringBuilder stringBuilder2 = new StringBuilder(hope + &quot;=&quot;);   &#47;&#47;后缀加上*1<br>            for (Integer fact : factor) {<br>                stringBuilder0.append(fact + &quot;*&quot;);<br>                stringBuilder1.append(fact + &quot;*&quot;);<br>                stringBuilder2.append(fact + &quot;*&quot;);<br>            }<br>            stringBuilder0.deleteCharAt(stringBuilder0.length() - 1);<br>            stringBuilder1.deleteCharAt(stringBuilder1.length() - 1);<br>            stringBuilder2.append(&quot;1&quot;);<br>            stringBuilder0.append(&quot;;&quot;);<br>            stringBuilder1.append(&quot;;&quot;);<br>            stringBuilder2.append(&quot;;&quot;);<br>            System.out.println(stringBuilder0.toString());<br>            System.out.println(stringBuilder1.toString());<br>            System.out.println(stringBuilder2.toString());<br>        }<br>        for (Integer i = 2; i &lt; hope; ++i) {<br>            ArrayList&lt;Integer&gt; newFactor = (ArrayList&lt;Integer&gt;) (factor.clone());<br>            newFactor.add(i);<br>            divide(i * calculate, newFactor);<br>        }<br>    }<br>    public static void main(String[] args) throws Exception {<br>        hope = 8;       &#47;&#47;修改要因式分解的整数值<br>        &#47;&#47;打印 1* 自身的形式<br>        System.out.println(hope + &quot;=1*&quot; + hope + &quot;;&quot;);<br>        divide(1, new ArrayList&lt;Integer&gt;());<br>        &#47;&#47;打印自身*1的形式<br>        System.out.println(hope + &quot;=&quot; + hope + &quot;*1;&quot;);<br>    }","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433477,"discussion_content":"个别情况漏了1，不影响整体的正确性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545253326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51451,"user_name":"于曦程","can_delete":false,"product_type":"c1","uid":1042977,"ip_address":"","ucode":"90BB07CCE7EBCF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/21/13f7071a.jpg","comment_is_top":false,"comment_ctime":1545184384,"is_pvip":false,"replies":[{"id":"18673","content":"从代码本身看不太明显，主要是体现在每次嵌套调用的时候，生成新的变量result保存了当前的结果","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545201189,"ip_address":"","comment_id":51451,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545184384","product_id":100021201,"comment_content":"黄老师，这句话[递归会使用计算机的函数嵌套调用。而函数的调用本身，就可以保存很多中间状态和变量值，因此极大的方便了编程的处理。]在上面的代码实例中提现在哪里？","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433457,"discussion_content":"从代码本身看不太明显，主要是体现在每次嵌套调用的时候，生成新的变量result保存了当前的结果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545201189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51425,"user_name":"指间砂的宿命","can_delete":false,"product_type":"c1","uid":1338245,"ip_address":"","ucode":"DFAE22BF3BD415","user_header":"https://static001.geekbang.org/account/avatar/00/14/6b/85/be43d09f.jpg","comment_is_top":false,"comment_ctime":1545182247,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545182247","product_id":100021201,"comment_content":"n是解析的步长数啊，只有第一步是确认的四种选择之一，往后都是根据前一次选择和总金额共同作用的。整数乘积拆分的话，用递归每次除以从2到自身的值，然后其余比较是否除尽，对于除尽的值再继续递归直到只有1和自身作为因子，结束递归","like_count":0},{"had_liked":false,"id":51415,"user_name":"NullPointer","can_delete":false,"product_type":"c1","uid":1179184,"ip_address":"","ucode":"83B7DA926A0411","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/30/c9b568c3.jpg","comment_is_top":false,"comment_ctime":1545181310,"is_pvip":false,"replies":[{"id":"18535","content":"是的 n是迭代次数","user_name":"作者回复","user_name_real":"Sean","uid":"1275061","ctime":1545182175,"ip_address":"","comment_id":51415,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545181310","product_id":100021201,"comment_content":"n就是每种可能性尝试的次数，十个一n最大值就是1；练习题在我看主要是改动这个for (int i = 0; i &lt; rewards.length; i++) { 这个rewards除于当前积，另外还要考虑排除1*1*1这种场景；比起这个课后题我更关系这种题目从概率上怎么计算他的可能次数","like_count":0,"discussions":[{"author":{"id":1275061,"avatar":"https://static001.geekbang.org/account/avatar/00/13/74/b5/b68e3740.jpg","nickname":"黄申","note":"","ucode":"EE9AC074A322FF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433448,"discussion_content":"是的 n是迭代次数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545182175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":51399,"user_name":"1891","can_delete":false,"product_type":"c1","uid":1338140,"ip_address":"","ucode":"232337245EA523","user_header":"https://static001.geekbang.org/account/avatar/00/14/6b/1c/1a66cf09.jpg","comment_is_top":false,"comment_ctime":1545180486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545180486","product_id":100021201,"comment_content":"n应该是指每种满足奖赏金额的奖赏次数","like_count":0},{"had_liked":false,"id":51395,"user_name":"upup","can_delete":false,"product_type":"c1","uid":1299000,"ip_address":"","ucode":"79DEE1EDD96A3A","user_header":"","comment_is_top":false,"comment_ctime":1545180306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545180306","product_id":100021201,"comment_content":"没太看懂n的涵义，又看不懂java代码，挠头","like_count":0},{"had_liked":false,"id":51393,"user_name":"1891","can_delete":false,"product_type":"c1","uid":1338140,"ip_address":"","ucode":"232337245EA523","user_header":"https://static001.geekbang.org/account/avatar/00/14/6b/1c/1a66cf09.jpg","comment_is_top":false,"comment_ctime":1545180227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545180227","product_id":100021201,"comment_content":"n应该是指每次满足奖赏金额的奖赏次数","like_count":0},{"had_liked":false,"id":51365,"user_name":"力主道","can_delete":false,"product_type":"c1","uid":1178870,"ip_address":"","ucode":"8C2BE1B9B10A28","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/f6/d50bfaf4.jpg","comment_is_top":false,"comment_ctime":1545178962,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545178962","product_id":100021201,"comment_content":"这个n是指的步长嘛？","like_count":0},{"had_liked":false,"id":51356,"user_name":"seleven","can_delete":false,"product_type":"c1","uid":1338701,"ip_address":"","ucode":"B4D84E6B930448","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/SsJajvXghPMDicSuOcx54mV6L9zv4KSKM2bKY0gsUdAH3oGCWzfRv9Q9HRljic2IvHzYFpRECp8SXGWhiaqGWFTKg/132","comment_is_top":false,"comment_ctime":1545177875,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545177875","product_id":100021201,"comment_content":"学递归的时候是从汉诺塔问题开始的，后续陆续接触了斐波那契数列，因式分解，整数划分，阶乘，倒序输出（字符串反转），本题的排列组合，树（图）的遍历等等。递归解决了计算机中很多复杂的问题，也是计算机中用空间换时间的经典算法。","like_count":0},{"had_liked":false,"id":51344,"user_name":"Gene","can_delete":false,"product_type":"c1","uid":1337984,"ip_address":"","ucode":"6384B87F5F9F49","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/80/ee61510e.jpg","comment_is_top":false,"comment_ctime":1545176334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545176334","product_id":100021201,"comment_content":"我还是使用迭代法中的术语，这一段有些费解，是不是可以补充说明一下n的含义，反复看了几次，没get到","like_count":0}]}