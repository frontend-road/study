{"id":154438,"title":"26 | 生成IR：实现静态编译的语言","content":"<p>目前来讲，你已经初步了解了LLVM和它的IR，也能够使用它的命令行工具。<strong>不过，我们还是要通过程序生成LLVM的IR，</strong>这样才能复用LLVM的功能，从而实现一门完整的语言。</p><p>不过，如果我们要像前面生成汇编语言那样，通过字符串拼接来生成LLVM的IR，除了要了解LLVM IR的很多细节之外，代码一定比较啰嗦和复杂，因为字符串拼接不是结构化的方法，所以，最好用一个定义良好的数据结构来表示IR。</p><p>好在LLVM项目已经帮我们考虑到了这一点，它提供了代表LLVM IR的一组对象模型，我们只要生成这些对象，就相当于生成了IR，这个难度就低多了。而且，LLVM还提供了一个工具类，IRBuilder，我们可以利用它，进一步提升创建LLVM IR的对象模型的效率，让生成IR的过程变得更加简单！</p><p>接下来，就让我们先来了解LLVM IR的对象模型。</p><h2>LLVM IR的对象模型</h2><p>LLVM在内部有用C++实现的对象模型，能够完整表示LLVM IR，当我们把字节码读入内存时，LLVM就会在内存中构建出这个模型。只有基于这个对象模型，我们才可以做进一步的工作，包括代码优化，实现即时编译和运行，以及静态编译生成目标文件。<strong>所以说，这个对象模型是LLVM运行时的核心。</strong></p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/ce/9f/ced8f09e66d4bbd60eb524456d165e9f.jpg?wh=1142*465\" alt=\"\"></p><p>IR对象模型的头文件在<a href=\"https://github.com/llvm/llvm-project/tree/master/llvm/include/llvm/IR\">include/llvm/IR</a>目录下，其中最重要的类包括：</p><ul>\n<li>Module（模块）</li>\n</ul><p>Module类聚合了一个模块中的所有数据，它可以包含多个函数。你可以通过Model::iterator来遍历模块中所有的函数。它也包含了一个模块的全局变量。</p><ul>\n<li>Function（函数）</li>\n</ul><p>Function包含了与函数定义（definition）或声明（declaration）有关的所有对象。函数定义包含了函数体，而函数声明，则仅仅包含了函数的原型，它是在其他模块中定义的，在本模块中使用。</p><p>你可以通过getArgumentList()方法来获得函数参数的列表，也可以遍历函数体中的所有基本块，这些基本块会形成一个CFG（控制流图）。</p><pre><code>//函数声明，没有函数体。这个函数是在其他模块中定义的，在本模块中使用\ndeclare void @foo(i32)\n\n//函数定义，包含函数体\ndefine i32 @fun3(i32 %a) {\n  %calltmp1 = call void @foo(i32 %a)  //调用外部函数\n  ret i32 10\n}\n</code></pre><ul>\n<li>BasicBlock（基本块）</li>\n</ul><p>BasicBlock封装了一系列的LLVM指令，你可以借助bigin()/end()模式遍历这些指令，还可以通过getTerminator()方法获得最后一条指令（也就是终结指令）。你还可以用到几个辅助方法在CFG中导航，比如获得某个基本块的前序基本块。</p><ul>\n<li>Instruction（指令）</li>\n</ul><p>Instruction类代表了LLVM IR的原子操作（也就是一条指令），你可以通过getOpcode()来获得它代表的操作码，它是一个llvm::Instruction枚举值，你可以通过op_begin()和op_end()方法对获得这个指令的操作数。</p><ul>\n<li>Value（值）</li>\n</ul><p>Value类代表一个值。在LLVM的内存IR中，如果一个类是从Value继承的，意味着它定义了一个值，其他方可以去使用。函数、基本块和指令都继承了Value。</p><ul>\n<li>LLVMContext（上下文）</li>\n</ul><p>这个类代表了LLVM做编译工作时的一个上下文，包含了编译工作中的一些全局数据，比如各个模块用到的常量和类型。</p><p>这些内容是LLVM IR对象模型的主要部分，我们生成IR的过程，就是跟这些类打交道，其他一些次要的类，你可以在阅读和编写代码的过程中逐渐熟悉起来。</p><p>接下来，就让我们用程序来生成LLVM的IR。</p><h2>尝试生成LLVM IR</h2><p>我刚刚提到的每个LLVM IR类，都可以通过程序来构建。那么，为下面这个fun1()函数生成IR，应该怎么办呢？</p><pre><code>int fun1(int a, int b){\n    return a+b;\n}\n</code></pre><p><strong>第一步，</strong>我们可以来生成一个LLVM模块，也就是顶层的IR对象。</p><pre><code>Module *mod = new Module(&quot;fun1.ll&quot;, TheModule);\n</code></pre><p><strong>第二步，</strong>我们继续在模块中定义函数fun1，因为模块最主要的构成要素就是各个函数。</p><p>不过在定义函数之前，要先定义函数的原型（或者叫函数的类型）。函数的类型，我们在前端讲过：如果两个函数的返回值相同，并且参数也相同，这两个函数的类型是相同的，这样就可以做函数指针或函数型变量的赋值。示例代码的函数原型是：返回值是32位整数，参数是两个32位整数。</p><p>有了函数原型以后，就可以使用这个函数原型定义一个函数。我们还可以为每个参数设置一个名称，便于后面引用这个参数。</p><pre><code>//函数原型\nvector&lt;Type *&gt; argTypes(2, Type::getInt32Ty(TheContext));\nFunctionType *fun1Type = FunctionType::get(Type::getInt32Ty(TheContext), //返回值是整数\n      argTypes, //两个整型参数\n      false);   //不是变长参数\n\n//函数对象\nFunction *fun = Function::Create(fun1Type, \n      Function::ExternalLinkage,   //链接类型\n      &quot;fun2&quot;,                      //函数名称\n      TheModule.get());            //所在模块\n      \n//设置参数名称\nstring argNames[2] = {&quot;a&quot;, &quot;b&quot;};\nunsigned i = 0;\nfor (auto &amp;arg : fun-&gt;args()){\n    arg.setName(argNames[i++]);\n}\n</code></pre><p><strong>这里你需要注意，代码中是如何使用变量类型的。</strong>所有的基础类型都是提前定义好的，可以通过Type类的getXXXTy()方法获得（我们使用的是Int32类型，你还可以获得其他类型）。</p><p><strong>第三步，</strong>创建一个基本块。</p><p>这个函数只有一个基本块，你可以把它命名为“entry”，也可以不给它命名。在创建了基本块之后，我们用了一个辅助类IRBuilder，设置了一个插入点，后序生成的指令会插入到这个基本块中（IRBuilder是LLVM为了简化IR生成过程所提供的一个辅助类）。</p><pre><code>//创建一个基本块\nBasicBlock *BB = BasicBlock::Create(TheContext,//上下文\n               &quot;&quot;,     //基本块名称\n               fun);  //所在函数\nBuilder.SetInsertPoint(BB);   //设置指令的插入点\n</code></pre><p><strong>第四步，</strong>生成\"a+b\"表达式所对应的IR，插入到基本块中。</p><p>a和b都是函数fun的参数，我们把它取出来，分别赋值给L和R（L和R是Value）。然后用IRBuilder的CreateAdd()方法，生成一条add指令。这个指令的计算结果存放在addtemp中。</p><pre><code>//把参数变量存到NamedValues里面备用\nNamedValues.clear();\nfor (auto &amp;Arg : fun-&gt;args())\n    NamedValues[Arg.getName()] = &amp;Arg;\n\n//做加法\nValue *L = NamedValues[&quot;a&quot;];\nValue *R = NamedValues[&quot;b&quot;];\nValue *addtmp = Builder.CreateAdd(L, R);\n</code></pre><p><strong>第五步，</strong>利用刚才获得的addtmp创建一个返回值。</p><pre><code>//返回值\nBuilder.CreateRet(addtmp);\n</code></pre><p><strong>最后一步，</strong>检查这个函数的正确性。这相当于是做语义检查，比如，基本块的最后一个语句就必须是一个正确的返回指令。</p><pre><code>//验证函数的正确性\nverifyFunction(*fun);\n</code></pre><p>完整的代码我也提供给你，放在<a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/lab/26-llvmdemo/main.cpp#L49\">codegen_fun1()</a>里了，你可以看一下。我们可以调用这个方法，然后打印输出生成的IR：</p><pre><code>Function *fun1 = codegen_fun1();     //在模块中生成Function对象\nTheModule-&gt;print(errs(), nullptr);   //在终端输出IR\n</code></pre><p>生成的IR如下：</p><pre><code>; ModuleID = 'llvmdemo'\nsource_filename = &quot;llvmdemo&quot;\ndefine i32 @fun1(i32 %a, i32 %b) {\n  %1 = add i32 %a, %b\n  ret i32 %1\n}\n</code></pre><p>这个例子简单，过程直观，只有一个加法运算，而我建议你在这个过程中注意每个IR对象都是怎样被创建的，在大脑中想象出整个对象结构。</p><p>为了熟悉更多的API，接下来，我再带你生成一个稍微复杂一点儿的，带有if语句的IR。然后来看一看，函数中包含多个基本块的情况。</p><h2>支持if语句</h2><p>具体说，我们要为下面的一个函数生成IR（函数有一个参数a，当a大于2的时候，返回2；否则返回3）。</p><pre><code>int fun_ifstmt(int a)\n  if (a &gt; 2)\n    return 2;\n  else\n    return 3；\n}\n</code></pre><p>这样的一个函数，需要包含4个基本块：<strong>入口基本块、Then基本块、Else基本块和Merge基本块。</strong>控制流图（CFG）是先分开，再合并，像下面这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/2a/ce96ecd42b4b4e095d4671e1b658582a.jpg?wh=1142*521\" alt=\"\"></p><p><strong>在入口基本块中，</strong>我们要计算“a&gt;2”的值，并根据这个值，分别跳转到ThenBB和ElseBB。这里，我们用到了IRBuilder的CreateICmpUGE()方法（UGE的意思，是”不大于等于“，也就是小于）。这个指令的返回值是一个1位的整型，也就是int1。</p><pre><code>//计算a&gt;2\nValue * L = NamedValues[&quot;a&quot;];\nValue * R = ConstantInt::get(TheContext, APInt(32, 2, true));\nValue * cond = Builder.CreateICmpUGE(L, R, &quot;cmptmp&quot;);\n</code></pre><p>接下来，我们创建另外3个基本块，并用IRBuilder的CreateCondBr()方法创建条件跳转指令：当cond是1的时候，跳转到ThenBB，0的时候跳转到ElseBB。</p><pre><code>BasicBlock *ThenBB =BasicBlock::Create(TheContext, &quot;then&quot;, fun);\nBasicBlock *ElseBB = BasicBlock::Create(TheContext, &quot;else&quot;);\nBasicBlock *MergeBB = BasicBlock::Create(TheContext, &quot;ifcont&quot;);\nBuilder.CreateCondBr(cond, ThenBB, ElseBB);\n</code></pre><p><strong>如果你细心的话，</strong>可能会发现，在创建ThenBB的时候，指定了其所在函数是fun，而其他两个基本块没有指定。这是因为，我们接下来就要为ThenBB生成指令，所以先加到fun中。之后，再顺序添加ElseBB和MergeBB到fun中。</p><pre><code>//ThenBB\nBuilder.SetInsertPoint(ThenBB);\nValue *ThenV = ConstantInt::get(TheContext, APInt(32, 2, true));\nBuilder.CreateBr(MergeBB);\n\n//ElseBB\nfun-&gt;getBasicBlockList().push_back(ElseBB);  //把基本块加入到函数中\nBuilder.SetInsertPoint(ElseBB);\nValue *ElseV = ConstantInt::get(TheContext, APInt(32, 3, true));\nBuilder.CreateBr(MergeBB);\n</code></pre><p><strong>在ThenBB和ElseBB</strong>这两个基本块的代码中，我们分别计算出了两个值：ThenV和ElseV。它们都可能是最后的返回值，但具体采用哪个，还要看实际运行时，控制流走的是ThenBB还是ElseBB。这就需要用到phi指令，它完成了根据控制流来选择合适的值的任务。</p><pre><code>//MergeBB\nfun-&gt;getBasicBlockList().push_back(MergeBB);\nBuilder.SetInsertPoint(MergeBB);\n//PHI节点：整型，两个候选值\nPHINode *PN = Builder.CreatePHI(Type::getInt32Ty(TheContext), 2); \nPN-&gt;addIncoming(ThenV, ThenBB);  //前序基本块是ThenBB时，采用ThenV\nPN-&gt;addIncoming(ElseV, ElseBB);  //前序基本块是ElseBB时，采用ElseV\n\n//返回值\nBuilder.CreateRet(PN);\n</code></pre><p>从上面这段代码中你能看出，<strong>在if语句中，phi指令是关键。</strong>因为当程序的控制流经过多个基本块，每个基本块都可能改变某个值的时候，通过phi指令可以知道运行时实际走的是哪条路径，从而获得正确的值。</p><p>最后生成的IR如下，其中的phi指令指出，如果前序基本块是then，取值为2，是else的时候取值为3。</p><pre><code>define i32 @fun_ifstmt(i32 %a) {\n  %cmptmp = icmp uge i32 %a, 2\n  br i1 %cmptmp, label %then, label %else\n\nthen:                                             ; preds = %0\n  br label %ifcont\n\nelse:                                             ; preds = %0\n  br label %ifcont\n\nifcont:                                           ; preds = %else, %then\n  %1 = phi i32 [ 2, %then ], [ 3, %else ]\n  ret i32 %1\n}\n</code></pre><p>其实循环语句也跟if语句差不多，因为它们都是要涉及到多个基本块，要用到phi指令，<strong>所以一旦你会写if语句，肯定就会写循环语句的。</strong></p><h2>支持本地变量</h2><p>在写程序的时候，本地变量是必不可少的一个元素，所以，我们趁热打铁，把刚才的示例程序变化一下，用本地变量b保存ThenBB和ElseBB中计算的值，借此学习一下LLVM IR是如何支持本地变量的。</p><p>改变后的示例程序如下：</p><pre><code>int fun_localvar(int a)\n  int b = 0;\n  if (a &gt; 2)\n     b = 2;\n  else\n     b = 3;\n  return b;\n}\n</code></pre><p>其中，函数有一个参数a，一个本地变量b：如果a大于2，那么给b赋值2；否则，给b赋值3。最后的返回值是b。</p><p><strong>现在挑战来了，</strong>在这段代码中，b被声明了一次，赋值了3次。我们知道，LLVM IR采用的是SSA形式，也就是每个变量只允许被赋值一次，那么对于多次赋值的情况，我们该如何生成IR呢？</p><p>其实，LLVM规定了对寄存器只能做单次赋值，而对内存中的变量，是可以多次赋值的。对于“int b = 0;”，我们用下面几条语句生成IR：</p><pre><code>//本地变量b\nAllocaInst *b = Builder.CreateAlloca(Type::getInt32Ty(TheContext), nullptr, &quot;b&quot;);\nValue* initValue = ConstantInt::get(TheContext, APInt(32, 0, true));\n\nBuilder.CreateStore(initValue, b);\n</code></pre><p>上面这段代码的含义是：首先用CreateAlloca()方法，在栈中申请一块内存，用于保存一个32位的整型，接着，用CreateStore()方法生成一条store指令，给b赋予初始值。</p><p>上面几句生成的IR如下：</p><pre><code>%b = alloca i32\n store i32 0, i32* %b\n</code></pre><p>接着，我们可以在ThenBB和ElseBB中，分别对内存中的b赋值：</p><pre><code>//ThenBB\nBuilder.SetInsertPoint(ThenBB);\nValue *ThenV = ConstantInt::get(TheContext, APInt(32, 2, true));\nBuilder.CreateStore(ThenV, b);\nBuilder.CreateBr(MergeBB);\n\n//ElseBB\nfun-&gt;getBasicBlockList().push_back(ElseBB);\nBuilder.SetInsertPoint(ElseBB);\nValue *ElseV = ConstantInt::get(TheContext, APInt(32, 3, true));\nBuilder.CreateStore(ElseV, b);\nBuilder.CreateBr(MergeBB);\n</code></pre><p>最后，在MergeBB中，我们只需要返回b就可以了：</p><pre><code>//MergeBB\nfun-&gt;getBasicBlockList().push_back(MergeBB);\nBuilder.SetInsertPoint(MergeBB);\n\n//返回值\nBuilder.CreateRet(b);\n</code></pre><p>最后生成的IR如下：</p><pre><code>define i32 @fun_ifstmt.1(i32 %a) {\n  %b = alloca i32\n  store i32 0, i32* %b\n  %cmptmp = icmp uge i32 %a, 2\n  br i1 %cmptmp, label %then, label %else\n\nthen:                                             ; preds = %0\n  store i32 2, i32* %b\n  br label %ifcont\n\nelse:                                             ; preds = %0\n  store i32 3, i32* %b\n  br label %ifcont\n\nifcont:                                           ; preds = %else, %then\n  ret i32* %b\n}\n</code></pre><p>当然，使用内存保存临时变量的性能比较低，但我们可以很容易通过优化算法，把上述代码从使用内存的版本，优化成使用寄存器的版本。</p><p>通过上面几个示例，现在你已经学会了生成基本的IR，包括能够支持本地变量、加法运算、if语句。那么这样生成的IR能否正常工作呢？我们需要把这些IR编译和运行一下才知道。</p><h2>编译并运行程序</h2><p>现在已经能够在内存中建立LLVM的IR对象了，包括模块、函数、基本块和各种指令。LLVM可以即时编译并执行这个IR模型。</p><p>我们先创建一个不带参数的__main()函数作为入口。同时，我会借这个例子延伸讲一下函数的调用。我们在前面声明了函数fun1，现在在__main()函数中演示如何调用它。</p><pre><code>Function * codegen_main(){\n    //创建main函数\n    FunctionType *mainType = FunctionType::get(Type::getInt32Ty(TheContext), false);\n    Function *main = Function::Create(mainType, Function::ExternalLinkage, &quot;__main&quot;, TheModule.get());\n\n    //创建一个基本块\n    BasicBlock *BB = BasicBlock::Create(TheContext, &quot;&quot;, main);\n    Builder.SetInsertPoint(BB);\n\n    //设置参数的值\n    int argValues[2] = {2, 3};\n    std::vector&lt;Value *&gt; ArgsV;\n    for (unsigned i = 0; i&lt;2; ++i) {\n        Value * value = ConstantInt::get(TheContext, APInt(32,argValues[i],true));\n        ArgsV.push_back(value);\n        if (!ArgsV.back())\n            return nullptr;\n    }\n\n    //调用函数fun1\n    Function *callee = TheModule-&gt;getFunction(&quot;fun1&quot;);\n    Value * rtn = Builder.CreateCall(callee, ArgsV, &quot;calltmp&quot;);\n    \n    //返回值\n    Builder.CreateRet(rtn);\n    return main;\n}\n</code></pre><p>调用函数时，我们首先从模块中查找出名称为fun1的函数，准备好参数值，然后通过IRBuilder的CreateCall()方法来生成函数调用指令。最后生成的IR如下：</p><pre><code>define i32 @__main() {\n  %calltmp = call i32 @fun1(i32 2, i32 3)\n  ret i32 %calltmp3\n}\n</code></pre><p>接下来，我们调用即时编译的引擎来运行__main函数（与JIT引擎有关的代码，放到了DemoJIT.h中，你现在可以暂时不关心它的细节，留到以后再去了解）。使用这个JIT引擎，我们需要做几件事情：</p><p>1.初始化与目标硬件平台有关的设置。</p><pre><code>InitializeNativeTarget();\nInitializeNativeTargetAsmPrinter();\nInitializeNativeTargetAsmParser();\n</code></pre><p>2.把创建的模型加入到JIT引擎中，找到__main()函数的地址（整个过程跟C语言中使用函数指针来执行一个函数没有太大区别）。</p><pre><code>auto H = TheJIT-&gt;addModule(std::move(TheModule));\n\n//查找__main函数\nauto main = TheJIT-&gt;findSymbol(&quot;__main&quot;);\n\n//获得函数指针   \nint32_t (*FP)() = (int32_t (*)())(intptr_t)cantFail(main.getAddress());\n\n//执行函数\nint rtn = FP();\n\n//打印执行结果\nfprintf(stderr, &quot;__main: %d\\n&quot;, rtn);\n</code></pre><p>3.程序可以成功执行，并打印__main函数的返回值。</p><p><strong>既然已经演示了如何调用函数，在这里，我给你揭示LLVM的一个惊人的特性：</strong>我们可以在LLVM IR里，调用本地编写的函数，比如编写一个foo()函数，用来打印输出一些信息：</p><pre><code>void foo(int a){\n    printf(&quot;in foo: %d\\n&quot;,a);\n}\n</code></pre><p>然后我们就可以在__main里直接调用这个foo函数，就像调用fun1函数一样：</p><pre><code>//调用一个外部函数foo\nvector&lt;Type *&gt; argTypes(1, Type::getInt32Ty(TheContext));\nFunctionType *fooType = FunctionType::get(Type::getVoidTy(TheContext), argTypes, false);\n\nFunction *foo = Function::Create(fooType, Function::ExternalLinkage, &quot;foo&quot;, TheModule.get());\n\nstd::vector&lt;Value *&gt; ArgsV2;\nArgsV2.push_back(rtn);\nif (!ArgsV2.back())\n    return nullptr;\n\nBuilder.CreateCall(foo, ArgsV2, &quot;calltmp2&quot;);\n</code></pre><p>注意，我们在这里只对foo函数做了声明，并没有定义它的函数体，这时LLVM会在外部寻找foo的定义，它会找到用C++编写的foo函数，然后调用并执行；如果foo函数在另一个目标文件中，它也可以找到。</p><p>刚才讲的是即时编译和运行，你也可以生成目标文件，然后再去链接和执行。生成目标文件的代码参见<a href=\"https://github.com/RichardGong/PlayWithCompiler/blob/master/lab/26-llvmdemo/main.cpp#L298\">emitObject()</a>方法，基本上就是打开一个文件，然后写入生成的二进制目标代码。针对目标机器生成目标代码的大量工作，就用这么简单的几行代码就实现了，是不是帮了你的大忙了？</p><h2>课程小结</h2><p>本节课，我们我们完成了从生成IR到编译执行的完整过程，同时，也初步熟悉了LLVM的接口。当然了，完全熟悉LLVM的接口还需要多做练习，掌握更多的细节。就本节课而言，我希望你掌握的重点如下：</p><ul>\n<li>\n<p>LLVM用一套对象模型在内存中表示IR，包括模块、函数、基本块和指令，你可以通过API来生成这些对象。这些对象一旦生成，就可以编译和执行。</p>\n</li>\n<li>\n<p>对于if语句和循环语句，需要生成多个基本块，并通过跳转指令形成正确的控制流图（CFG）。当存在多个前序节点可能改变某个变量的值的时候，使用phi指令来确定正确的值。</p>\n</li>\n<li>\n<p>存储在内存中的本地变量，可以多次赋值。</p>\n</li>\n<li>\n<p>LLVM能够把外部函数和IR模型中的函数等价对待。</p>\n</li>\n</ul><p>另外，为了降低学习难度，本节课，我没有做从AST翻译成IR的工作，而是针对一个目标功能（比如一个C语言的函数），硬编码调用API来生成IR。你理解各种功能是如何生成IR以后，再从AST来翻译，就更加容易了。</p><h2>一课一思</h2><p>既然我带你演示了if语句如何生成IR，那么你能思考一下，对于for循环和while循环语句，它对应的CFG应该是什么样的？应该如何生成IR？欢迎你在留言区分享你的看法。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p><p></p>","neighbors":{"left":{"article_title":"25 | 后端技术的重用：LLVM不仅仅让你高效","id":153192},"right":{"article_title":"27 | 代码优化：为什么你的代码比他的更高效？","id":155338}},"comments":[{"had_liked":false,"id":174465,"user_name":"ZYS","can_delete":false,"product_type":"c1","uid":1632751,"ip_address":"","ucode":"B91657BD8D8E60","user_header":"https://static001.geekbang.org/account/avatar/00/18/e9/ef/d4587970.jpg","comment_is_top":false,"comment_ctime":1580221250,"is_pvip":false,"replies":[{"id":"74215","content":"嗯，已经在准备中~~~<br>我们的教程，限于篇幅，很多细节还是不会延伸太多。写成书的话，就可以讲得更充分。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1585147303,"ip_address":"","comment_id":174465,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18760090434","product_id":100034101,"comment_content":"宫老师考虑把课程整理成一本书出版那，很好的内容","like_count":5,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482411,"discussion_content":"嗯，已经在准备中~~~\n我们的教程，限于篇幅，很多细节还是不会延伸太多。写成书的话，就可以讲得更充分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585147303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160881,"user_name":"渔子长","can_delete":false,"product_type":"c1","uid":1492982,"ip_address":"","ucode":"A78B822885327D","user_header":"https://static001.geekbang.org/account/avatar/00/16/c7/f6/3d43b198.jpg","comment_is_top":false,"comment_ctime":1576053289,"is_pvip":false,"replies":[{"id":"63389","content":"如果对应于C或C++语言，一个Module就相当于一个目标文件，里面有一些函数式对外公开的，另一些是私有的，然后多个Module可以链接到一起。<br>所以，基本上是一个文件对应一个Module。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1577437933,"ip_address":"","comment_id":160881,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14460955177","product_id":100034101,"comment_content":"请教一个问题宫老师，LLVM的Module，设计是什么粒度的？比如一堆脚本可能拆分了几百个文件，把这些文件编译成IR，是每个文件对应一个Module？还是整体只构建一个Module？","like_count":4,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477517,"discussion_content":"如果对应于C或C++语言，一个Module就相当于一个目标文件，里面有一些函数式对外公开的，另一些是私有的，然后多个Module可以链接到一起。\n所以，基本上是一个文件对应一个Module。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577437933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1492982,"avatar":"https://static001.geekbang.org/account/avatar/00/16/c7/f6/3d43b198.jpg","nickname":"渔子长","note":"","ucode":"A78B822885327D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104491,"discussion_content":"嗯嗯，感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577437987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150633,"user_name":"xiaobang","can_delete":false,"product_type":"c1","uid":1157508,"ip_address":"","ucode":"1735BDCFD61655","user_header":"https://static001.geekbang.org/account/avatar/00/11/a9/84/c87b51ce.jpg","comment_is_top":false,"comment_ctime":1573571257,"is_pvip":false,"replies":[{"id":"77189","content":"不是的，可以有多个return。<br><br>不过，一般CFG会要求有两个特殊的块：入口块（Entry Block）和退出块（Exit Block）。这样的话，CFG就是一个有根的图（Rooted Directed Graph），便于执行某些分析和优化算法。如果要深入研究，可以去看看图的算法。<br><br>在LLVM中，有一个优化算法可以把多个return语句合并，这样就只有一个Exit Block了。<br>","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1586910656,"ip_address":"","comment_id":150633,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14458473145","product_id":100034101,"comment_content":"请教一下老师，为什么if语句要生成merge块，明明then和else里已经return了？难道llvm只允许一个函数一个return","like_count":4,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474227,"discussion_content":"不是的，可以有多个return。\n\n不过，一般CFG会要求有两个特殊的块：入口块（Entry Block）和退出块（Exit Block）。这样的话，CFG就是一个有根的图（Rooted Directed Graph），便于执行某些分析和优化算法。如果要深入研究，可以去看看图的算法。\n\n在LLVM中，有一个优化算法可以把多个return语句合并，这样就只有一个Exit Block了。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586910656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143961,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1571815648,"is_pvip":false,"replies":[{"id":"57534","content":"用llvm 9.0吧。<br>并且最好下载源代码，自己编译。这样会按照debug模式编译，用opt等工具的时候，可以输出更多信息，有利于你做实验。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1573302823,"ip_address":"","comment_id":143961,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10161750240","product_id":100034101,"comment_content":"老师用的什么版本的llvm，我使用llvm 7.0编译老师lab-26的代码，发现LegacyRTDyldObjectLinkingLayer和AcknowledgeORCv1Deprecation都已经不存在了，但是网上搜了一下，也没找到什么可以替代的东西","like_count":3,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471762,"discussion_content":"用llvm 9.0吧。\n并且最好下载源代码，自己编译。这样会按照debug模式编译，用opt等工具的时候，可以输出更多信息，有利于你做实验。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573302823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1492982,"avatar":"https://static001.geekbang.org/account/avatar/00/16/c7/f6/3d43b198.jpg","nickname":"渔子长","note":"","ucode":"A78B822885327D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44592,"discussion_content":"因为LLVM版本更新太快了，1年2个大版本，跟不上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572958153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273929,"user_name":"Geek_6c84aa","can_delete":false,"product_type":"c1","uid":1994605,"ip_address":"","ucode":"C172F8B060FF5A","user_header":"","comment_is_top":false,"comment_ctime":1610727102,"is_pvip":false,"replies":[{"id":"99204","content":"感谢分享经验:-)","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1610762839,"ip_address":"","comment_id":273929,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610727102","product_id":100034101,"comment_content":"使用默认选项编译安装llvm9时默认是没有开启rtti的。在编译本节代码时遇到undefined reference &#39;typeinfo&#39;问题，需要在cmakelist中添加add_compile_options(-fno-rtti) 或者重新编译llvm(-DLLVM-ENABLE-RTTI)。希望对大家有帮助。","like_count":1,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513864,"discussion_content":"感谢分享经验:-)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610762839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271641,"user_name":"coconut","can_delete":false,"product_type":"c1","uid":2344081,"ip_address":"","ucode":"07B95C7A6AC2F7","user_header":"https://static001.geekbang.org/account/avatar/00/23/c4/91/a017bf72.jpg","comment_is_top":false,"comment_ctime":1609745306,"is_pvip":true,"replies":[{"id":"98574","content":"Great！<br>python + llvm。<br>感谢你分享了更丰富使用编译技术的场景！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1609818067,"ip_address":"","comment_id":271641,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1609745306","product_id":100034101,"comment_content":"Python版本基于llvmlite库的实现。<br><br>https:&#47;&#47;github.com&#47;leveryd&#47;PlayWithCompiler&#47;blob&#47;master&#47;llvm&#47;1.%E5%88%9D%E8%AF%86llvm&#47;test.py","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512984,"discussion_content":"Great！\npython + llvm。\n感谢你分享了更丰富使用编译技术的场景！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609818067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269377,"user_name":"lion_fly","can_delete":false,"product_type":"c1","uid":1060242,"ip_address":"","ucode":"FCFD6B66C01B83","user_header":"https://static001.geekbang.org/account/avatar/00/10/2d/92/287f99db.jpg","comment_is_top":false,"comment_ctime":1608628310,"is_pvip":false,"replies":[{"id":"98461","content":"感谢分享！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1609730448,"ip_address":"","comment_id":269377,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1608628310","product_id":100034101,"comment_content":"如果是在linux下使用LLVM的JIT，在编译的时候需要注意如下问题：<br>If you are compiling this on Linux, make sure to add the “-rdynamic” option as well. This makes sure that the external functions are resolved properly at runtime.","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512253,"discussion_content":"感谢分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609730448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268192,"user_name":"lion_fly","can_delete":false,"product_type":"c1","uid":1060242,"ip_address":"","ucode":"FCFD6B66C01B83","user_header":"https://static001.geekbang.org/account/avatar/00/10/2d/92/287f99db.jpg","comment_is_top":false,"comment_ctime":1608098421,"is_pvip":false,"replies":[{"id":"98482","content":"llvm工具要用熟练，会遇到很多小坑。不过代价是值得的。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1609736495,"ip_address":"","comment_id":268192,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1608098421","product_id":100034101,"comment_content":"declare void @foo(i32)<br>Failure value returned from cantFail wrapped call<br>Symbols not found: [ foo ]<br>UNREACHABLE executed at &#47;usr&#47;lib&#47;llvm-11&#47;include&#47;llvm&#47;Support&#47;Error.h:749!","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511873,"discussion_content":"llvm工具要用熟练，会遇到很多小坑。不过代价是值得的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609736495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267811,"user_name":"lion_fly","can_delete":false,"product_type":"c1","uid":1060242,"ip_address":"","ucode":"FCFD6B66C01B83","user_header":"https://static001.geekbang.org/account/avatar/00/10/2d/92/287f99db.jpg","comment_is_top":false,"comment_ctime":1607939651,"is_pvip":false,"replies":[{"id":"98483","content":"感谢分享！","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1609736511,"ip_address":"","comment_id":267811,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607939651","product_id":100034101,"comment_content":"在新版中llvm_map_components_to_libnames(llvm_libs all)已经过时，新版需要写成：set(llvm_libs LLVM-11)","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511752,"discussion_content":"感谢分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609736511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215102,"user_name":"overmind","can_delete":false,"product_type":"c1","uid":1659287,"ip_address":"","ucode":"0C7C93B4C6F011","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/o7M9drMKflfW78mJrM9NXydZKwBj0S8AVjrnvBuuAsubkEnzHL2Cv4rvJyDHqxBPPKUDjGtneQHNP5pmAeFb3w/132","comment_is_top":false,"comment_ctime":1588905168,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588905168","product_id":100034101,"comment_content":"请教一个问题，如何调用一个类中的方法，并生产ir","like_count":0},{"had_liked":false,"id":164232,"user_name":"overmind","can_delete":false,"product_type":"c1","uid":1659287,"ip_address":"","ucode":"0C7C93B4C6F011","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/o7M9drMKflfW78mJrM9NXydZKwBj0S8AVjrnvBuuAsubkEnzHL2Cv4rvJyDHqxBPPKUDjGtneQHNP5pmAeFb3w/132","comment_is_top":false,"comment_ctime":1576911315,"is_pvip":false,"replies":[{"id":"63368","content":"第29讲有介绍分配寄存器的算法。尽量多使用寄存器，实在寄存器放不下的，才“溢出”到内存。","user_name":"作者回复","user_name_real":"宫文学Richard","uid":"1543380","ctime":1577431960,"ip_address":"","comment_id":164232,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576911315","product_id":100034101,"comment_content":"如何通过优化算法，把上述代码从使用内存的版本，优化成使用寄存器的版本。谢谢","like_count":0,"discussions":[{"author":{"id":1543380,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8c/d4/5972b7cc.jpg","nickname":"宫文学Richard","note":"","ucode":"09EADF0CB62C91","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478689,"discussion_content":"第29讲有介绍分配寄存器的算法。尽量多使用寄存器，实在寄存器放不下的，才“溢出”到内存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577431960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152397,"user_name":"夜行观星","can_delete":false,"product_type":"c1","uid":1010389,"ip_address":"","ucode":"C880CB39033929","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6a/d5/73c75eb3.jpg","comment_is_top":false,"comment_ctime":1573991570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573991570","product_id":100034101,"comment_content":"老师，我把生成二进制为文件链接成可执行文件出现了错误，运行JIT可以正常执行。<br>错误日志打印在下面，老师有空看下<br>➜  cmake-build-debug git:(master) ✗ clang -v bin&#47;output.o -o a.out<br>clang version 9.0.0 (tags&#47;RELEASE_900&#47;final)<br>Target: x86_64-apple-darwin18.6.0<br>Thread model: posix<br>InstalledDir: &#47;usr&#47;local&#47;opt&#47;llvm&#47;bin<br> &quot;&#47;usr&#47;bin&#47;ld&quot; -demangle -lto_library &#47;usr&#47;local&#47;Cellar&#47;llvm&#47;9.0.0&#47;lib&#47;libLTO.dylib -dynamic -arch x86_64 -macosx_version_min 10.14.0 -o a.out bin&#47;output.o -lSystem &#47;usr&#47;local&#47;Cellar&#47;llvm&#47;9.0.0&#47;lib&#47;clang&#47;9.0.0&#47;lib&#47;darwin&#47;libclang_rt.osx.a<br>Undefined symbols for architecture x86_64:<br>  &quot;_main&quot;, referenced from:<br>     implicit entry&#47;start for main executable<br>     (maybe you meant: ___main)<br>ld: symbol(s) not found for architecture x86_64<br>clang-9: error: linker command failed with exit code 1 (use -v to see invocation)","like_count":0}]}