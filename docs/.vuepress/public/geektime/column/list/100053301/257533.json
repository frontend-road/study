{"id":257533,"title":"10 | 应用3：如何在语言中用正则让文本处理能力上一个台阶？","content":"<p>你好，我是伟忠。今天要和你分享的内容是如何在编程语言中使用正则，让文本处理能力上一个台阶。</p><p>现代主流的编程语言几乎都内置了正则模块，很少能见到不支持正则的编程语言。学会在编程语言中使用正则，可以极大地提高文本的处理能力。</p><p>在进行文本处理时，正则解决的问题大概可以分成四类，分别是校验文本内容、提取文本内容、替换文本内容、切割文本内容。在这一节里，我会从功能分类出发，给你讲解在一些常见的编程语言中，如何正确地实现这些功能。</p><h2>1.校验文本内容</h2><p>我们先来看一下数据验证，通常我们在网页上输入的手机号、邮箱、日期等，都需要校验。校验的特点在于，整个文本的内容要符合正则，比如要求输入6位数字的时候，输入123456abc 就是不符合要求的。</p><p>下面我们以验证日期格式年月日为例子来讲解，比如2020-01-01，我们使用正则\\d{4}-\\d{2}-\\d{2} 来验证。</p><h3>Python</h3><p>在 Python 中，正则的包名是 re，验证文本可以使用 re.match 或 re.search 的方法，这两个方法的区别在于，re.match 是从开头匹配的，re.search是从文本中找子串。下面是详细的解释：</p><pre><code># 测试环境 Python3\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; re.match(r'\\d{4}-\\d{2}-\\d{2}', '2020-06-01')\n&lt;re.Match object; span=(0, 10), match='2020-06-01'&gt;\n# 这个输出是匹配到了，范围是从下标0到下标10，匹配结果是2020-06-01\n# re.search 输出结果也是类似的\n</code></pre><p><strong>在Python中，校验文本是否匹配的正确方式<strong><strong>如下所示</strong></strong>：</strong></p><!-- [[[read_end]]] --><pre><code># 测试环境 Python3\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; reg = re.compile(r'\\A\\d{4}-\\d{2}-\\d{2}\\Z')  # 建议先编译，提高效率\n&gt;&gt;&gt; reg.search('2020-06-01') is not None\nTrue\n&gt;&gt;&gt; reg.match('2020-06-01') is not None  # 使用match时\\A可省略\nTrue\n</code></pre><p>如果不添加 \\A 和 \\Z 的话，我们就可能得到错误的结果。而造成这个错误的主要原因就是，没有完全匹配，而是部分匹配。至于为什么不推荐用<code>^</code>和<code>$</code>，因为在多行模式下，它们的匹配行为会发现变化，相关内容在前面匹配模式中讲解过，要是忘记了你可以返回去回顾一下。</p><pre><code># 错误示范\n&gt;&gt;&gt; re.match(r'\\d{4}-\\d{2}-\\d{2}', '2020-06-01abc') is not None\nTrue\n&gt;&gt;&gt; re.search(r'\\d{4}-\\d{2}-\\d{2}', 'abc2020-06-01') is not None\nTrue\n</code></pre><h3>Go</h3><p>Go语言（又称Golang）是Google开发的一种静态强类型、编译型、并发型，并具有垃圾回收功能的编程语言。在Go语言中，正则相关的包是 regexp，下面是一个完整可运行的示例。</p><pre><code>package main\n\nimport (\n   &quot;fmt&quot;\n   &quot;regexp&quot;\n)\n\nfunc main() {\n   re := regexp.MustCompile(`\\A\\d{4}-\\d{2}-\\d{2}\\z`)\n   // 输出 true\n   fmt.Println(re.MatchString(&quot;2020-06-01&quot;))\n}\n</code></pre><p>保存成 main.go ，在配置好go环境的前提下，直接使用命令 go run main.go 运行。不方便本地搭建Go环境的同学，可以点击 <a href=\"https://play.golang.org/p/bTQJe0mT839\">这里</a> 或 <a href=\"https://repl.it/@twz915/learn-regex#%E6%A0%A1%E9%AA%8C/date.go\">这里</a> 进行在线运行测试。</p><p>另外，需要注意的是，和 Python 语言不同，在 Go 语言中，正则尾部断言使用的是 \\z，而不是 \\Z。</p><h3>JavaScript</h3><p>在JavaScript中没有 \\A 和 \\z，我们可以使用<code>^</code>和<code>$</code>来表示每行的开头和结尾，默认情况下它们是匹配整个文本的开头或结尾（默认不是多行匹配模式）。在 JavaScript 中校验文本的时候，不要使用多行匹配模式，因为使用多行模式会改变<code>^</code>和<code>$</code>的匹配行为。</p><p>JavaScript代码可以直接在浏览器的Console中很方便地测试。（进入方式：任意网页上点击鼠标右键，检查，Console）</p><pre><code>// 方法1\n/^\\d{4}-\\d{2}-\\d{2}$/.test(&quot;2020-06-01&quot;)  // true\n\n// 方法2\nvar regex = /^\\d{4}-\\d{2}-\\d{2}$/\n&quot;2020-06-01&quot;.search(regex) == 0  // true\n\n// 方法3\nvar regex = new RegExp(/^\\d{4}-\\d{2}-\\d{2}$/)\nregex.test(&quot;2020-01-01&quot;) // tru\n</code></pre><p>方法3本质上和方法1是一样的，方法1写起来更简洁。需要注意的是，在使用 RegExp 对象时，如果使用 g 模式，可能会有意想不到的结果，连续调用会出现第二次返回 false 的情况，就像下面这样：</p><pre><code>var r = new RegExp(/^\\d{4}-\\d{2}-\\d{2}$/, &quot;g&quot;)\nr.test(&quot;2020-01-01&quot;) // true\nr.test(&quot;2020-01-01&quot;) // false\n</code></pre><p>这是因为 RegExp 在全局模式下，正则会找出文本中的所有可能的匹配，找到一个匹配时会记下 lastIndex，在下次再查找时找不到，lastIndex变为0，所以才有上面现象。</p><pre><code>var regex = new RegExp(/^\\d{4}-\\d{2}-\\d{2}$/, &quot;g&quot;)\nregex.test(&quot;2020-01-01&quot;) // true\nregex.lastIndex // 10\nregex.test(&quot;2020-01-01&quot;) // false\nregex.lastIndex // 0\n\n// 为了加深理解，你可以看下面这个例子\nvar regex = new RegExp(/\\d{4}-\\d{2}-\\d{2}/, &quot;g&quot;)\nregex.test(&quot;2020-01-01 2020-02-02&quot;) // true\nregex.lastIndex // 10\nregex.test(&quot;2020-01-01 2020-02-02&quot;) // true\nregex.lastIndex // 21\nregex.test(&quot;2020-01-01 2020-02-02&quot;) // false\n</code></pre><p>由于我们这里是文本校验，并不需要找出所有的。所以要记住，JavaScript中文本校验在使用 RegExp 时不要设置 g 模式。</p><p>另外在ES6中添加了匹配模式 u，如果要在 JavaScript 中匹配中文等多字节的 Unicode 字符，可以指定匹配模式 u，比如测试是否为一个字符，可以是任意Unicode字符，详情可以参考下面的示例：</p><pre><code>/^\\u{1D306}$/u.test(&quot;𝌆&quot;) // true\n/^\\u{1D306}$/.test(&quot;𝌆&quot;) // false\n/^.$/u.test(&quot;好&quot;) // true\n/^.$/u.test(&quot;好人&quot;) // false\n/^.$/u.test(&quot;a&quot;) // true\n/^.$/u.test(&quot;ab&quot;) // false\n</code></pre><h3>Java</h3><p>在 Java 中，正则相关的类在 java.util.regex 中，其中最常用的是 Pattern 和 Matcher， Pattern 是正则表达式对象，Matcher是匹配到的结果对象，Pattern 和 字符串对象关联，可以得到一个 Matcher。下面是 Java 中匹配的示例：</p><pre><code>import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass Main {\n  public static void main(String[] args) {\n    //方法1，可以不加 \\A 和 \\z\n    System.out.println(Pattern.matches(&quot;\\\\d{4}-\\\\d{2}-\\\\d{2}&quot;, &quot;2020-06-01&quot;)); // true\n\n    //方法2，可以不加 \\A 和 \\z\n    System.out.println(&quot;2020-06-01&quot;.matches(&quot;\\\\d{4}-\\\\d{2}-\\\\d{2}&quot;)); // true\n    \n    //方法3，必须加上 \\A 和 \\z\n    Pattern pattern = Pattern.compile(&quot;\\\\A\\\\d{4}-\\\\d{2}-\\\\d{2}\\\\z&quot;);\n    System.out.println(pattern.matcher(&quot;2020-06-01&quot;).find()); // true\n  }\n}\n</code></pre><p>Java 中目前还没有原生字符串，在之前转义一节讲过，正则需要经过字符串转义和正则转义两个步骤，因此在用到反斜扛的地方，比如表示数字的<code>\\d</code>，就得在字符串中表示成<code>\\\\d</code>，转义会让书写正则变得稍微麻烦一些，在使用的时候需要留意一下。</p><p>部分常见编程语言校验文本方式，你可以参考下面的表。</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/13/e97814862f1943b59cf341728f789813.jpg?wh=1356*663\" alt=\"\"></p><h2>2.提取文本内容</h2><p>我们再来看一下文本内容提取，所谓内容提取，就是从大段的文本中抽取出我们关心的内容。比较常见的例子是网页爬虫，或者说从页面上提取邮箱、抓取需要的内容等。如果要抓取的是某一个网站，页面样式是一样的，要提取的内容都在同一个位置，可以使用 <a href=\"https://lxml.de/xpathxslt.html\">xpath</a> 或 <a href=\"https://pypi.org/project/pyquery/\">jquery选择器</a> 等方式，否则就只能使用正则来做了。</p><p>下面我们来讲解一下具体的例子，让你了解一下正则提取文本在一些常见的编程语言中的使用。</p><h3>Python</h3><p>在 Python 中提取内容最简单的就是使用 re.findall 方法了，当有子组的时候，会返回子组的内容，没有子组时，返回整个正则匹配到的内容。下面我以查找日志的年月为例进行讲解，年月可以用正则 \\d{4}-\\d{2} 来表示：</p><pre><code># 没有子组时\n&gt;&gt;&gt; import re\n&gt;&gt;&gt; reg = re.compile(r'\\d{4}-\\d{2}')\n&gt;&gt;&gt; reg.findall('2020-05 2020-06')\n['2020-05', '2020-06']\n\n# 有子组时\n&gt;&gt;&gt; reg = re.compile(r'(\\d{4})-(\\d{2})')\n&gt;&gt;&gt; reg.findall('2020-05 2020-06')\n[('2020', '05'), ('2020', '06')]\n</code></pre><p>通过上面的示例你可以看到，直接使用 findall 方法时，它会把结果存储到一个列表（数组）中，一下返回所有匹配到的结果。如果想节约内存，可以采用迭代器的方式来处理，就像下面这样：</p><pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; reg = re.compile(r'(\\d{4})-(\\d{2})')\n&gt;&gt;&gt; for match in reg.finditer('2020-05 2020-06'):\n...     print('date: ', match[0])  # 整个正则匹配到的内容\n...     print('year: ', match[1])  # 第一个子组\n...     print('month:', match[2])  # 第二个子组\n...\ndate:  2020-05\nyear:  2020\nmonth: 05\ndate:  2020-06\nyear:  2020\nmonth: 06\n</code></pre><p>这样我们就可以实现正则找到一个，在程序中处理一个，不需要将找到的所有结果构造成一个数组（Python中的列表）。</p><h3>Go</h3><p>在 Go语言里面，查找也非常简洁，可以直接使用 FindAllString 方法。如果我们想捕获子组，可以使用 FindAllStringSubmatch 方法。</p><pre><code>package main\n\nimport (\n  &quot;fmt&quot;\n  &quot;regexp&quot;\n)\n\nfunc main() {\n  re := regexp.MustCompile(`\\d{4}-\\d{2}`)\n  \n  // 返回一个切片(可动态扩容的数组) [2020-06 2020-07]\n  fmt.Println(re.FindAllString(&quot;2020-06 2020-07&quot;, -1)) \n  \n  // 捕获子组的查找示例\n  re2 := regexp.MustCompile(`(\\d{4})-(\\d{2})`)\n  // 返回结果和上面 Python 类似\n  for _, match := range re2.FindAllStringSubmatch(&quot;2020-06 2020-07&quot;, -1) {\n     fmt.Println(&quot;date: &quot;, match[0])\n     fmt.Println(&quot;year: &quot;, match[1])\n     fmt.Println(&quot;month:&quot;, match[2])\n  }\n}\n</code></pre><h3>JavaScript</h3><p>在 JavaScript 中，想要提取文本中所有符合要求的内容，正则必须使用 g 模式，否则找到第一个结果后，正则就不会继续向后查找了。</p><pre><code>// 使用g模式，查找所有符合要求的内容\n&quot;2020-06 2020-07&quot;.match(/\\d{4}-\\d{2}/g)\n// 输出：[&quot;2020-06&quot;, &quot;2020-07&quot;]\n\n// 不使用g模式，找到第一个就会停下来\n&quot;2020-06 2020-07&quot;.match(/\\d{4}-\\d{2}/)\n// 输出：[&quot;2020-06&quot;, index: 0, input: &quot;2020-06 2020-07&quot;, groups: undefined]\n</code></pre><p>如果要查找中文等Unicode字符，可以使用 u 匹配模式，下面是具体的示例。</p><pre><code>'𝌆'.match(/\\u{1D306}/ug) // 使用匹配模式u\n[&quot;𝌆&quot;]\n\n'𝌆'.match(/\\u{1D306}/g) // 不使用匹配模式u\nnull\n\n// 如果你对这个符号感兴趣，可以参考 https://unicode-table.com/cn/1D306\n</code></pre><h3>Java</h3><p>在 Java 中，可以使用 Matcher 的 find 方法来获取查找到的内容，就像下面这样：</p><pre><code>import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass Main {\n  public static void main(String[] args) {    \n    Pattern pattern = Pattern.compile(&quot;\\\\d{4}-\\\\d{2}&quot;);\n    Matcher match = pattern.matcher(&quot;2020-06 2020-07&quot;);\n    while (match.find()) {\n      System.out.println(match.group());      \n    }\n  }\n}\n</code></pre><p>部分常见编程语言提取文本方式，你可以参考下面的表。</p><p><img src=\"https://static001.geekbang.org/resource/image/b1/c9/b14435e91df9454f6fa361b1510ff2c9.jpg?wh=1184*773\" alt=\"\"></p><h2>3.替换文本内容</h2><p>我们接着来看一下文本内容替换，替换通常用于对原来的文本内容进行一些调整。之前我们也讲解过一些使用正则进行替换的例子，今天我们再来了解一下在部分常见的编程语言中，使用正则进行文本替换的方法。</p><h3>Python</h3><p>在 Python 中替换相关的方法有 re.sub 和 re.subn，后者会返回替换的次数。下面我以替换年月的格式为例进行讲解，假设原始的日期格式是月日年，我们要将其处理成 xxxx年xx月xx日的格式。你可以看到，在Python中正则替换操作相关的方法，使用起来非常地简单。</p><pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; reg = re.compile(r'(\\d{2})-(\\d{2})-(\\d{4})')\n\n&gt;&gt;&gt; reg.sub(r'\\3年\\1月\\2日', '02-20-2020 05-21-2020')\n'2020年02月20日 2020年05月21日'\n\n# 可以在替换中使用 \\g&lt;数字&gt;，如果分组多于10个时避免歧义\n&gt;&gt;&gt; reg.sub(r'\\g&lt;3&gt;年\\g&lt;1&gt;月\\g&lt;2&gt;日', '02-20-2020 05-21-2020')\n'2020年02月20日 2020年05月21日'\n\n# 返回替换次数\n&gt;&gt;&gt; reg.subn(r'\\3年\\1月\\2日', '02-20-2020 05-21-2020')\n('2020年02月20日 2020年05月21日', 2)\n</code></pre><h3>Go</h3><p>在 Go语言里面，替换和Python也非常类似，只不过子组是使用 ${num} 的方式来表示的。</p><pre><code>package main\n\nimport (\n  &quot;fmt&quot;\n  &quot;regexp&quot;\n)\n\nfunc main() {\n  re := regexp.MustCompile(`(\\d{2})-(\\d{2})-(\\d{4})`)\n\n  // 示例一，返回 2020年02月20日 2020年05月21日\n  fmt.Println(re.ReplaceAllString(&quot;02-20-2020 05-21-2020&quot;, &quot;${3}年${1}月${2}日&quot;))\n\n  // 示例二，返回空字符串，因为&quot;3年&quot;，&quot;1月&quot;，&quot;2日&quot; 这样的子组不存在\n  fmt.Println(re.ReplaceAllString(&quot;02-20-2020 05-21-2020&quot;, &quot;$3年$1月$2日&quot;))\n  \n  // 示例三，返回 2020-02-20 2020-05-21\n  fmt.Println(re.ReplaceAllString(&quot;02-20-2020 05-21-2020&quot;, &quot;$3-$1-$2&quot;))\n}\n</code></pre><p>需要你注意的是，不建议把 <code>$</code>{num} 写成不带花括号的 <code>$</code>num，比如示例二中的错误，会让人很困惑，Go认为子组是<code>“3年”，“1月”，“2日”</code>。 由于这样的子组不存在，最终替换成了空字符串，所以使用的时候要注意这一点。</p><h3>JavaScript</h3><p>在 JavaScript 中替换和查找类似，需要指定 g 模式，否则只会替换第一个，就像下面这样。</p><pre><code>// 使用g模式，替换所有的\n&quot;02-20-2020 05-21-2020&quot;.replace(/(\\d{2})-(\\d{2})-(\\d{4})/g, &quot;$3年$1月$2日&quot;)\n// 输出 &quot;2020年02月20日 2020年05月21日&quot;\n\n// 不使用 g 模式时，只替换一次\n&quot;02-20-2020 05-21-2020&quot;.replace(/(\\d{2})-(\\d{2})-(\\d{4})/, &quot;$3年$1月$2日&quot;)\n// 输出 &quot;2020年02月20日 05-21-2020&quot;\n</code></pre><h3>Java</h3><p>在 Java 中，一般是使用 replaceAll 方法进行替换，一次性替换所有的匹配到的文本。</p><pre><code>import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass Main {\n  public static void main(String[] args) {\n    //方法1，输出 2020年02月20日 2020年05月21日\n    System.out.println(&quot;02-20-2020 05-21-2020&quot;.replaceAll(&quot;(\\\\d{2})-(\\\\d{2})-(\\\\d{4})&quot;, &quot;$3年$1月$2日&quot;));\n    \n    //方法2，输出 2020年02月20日 2020年05月21日\n    final Pattern pattern = Pattern.compile(&quot;(\\\\d{2})-(\\\\d{2})-(\\\\d{4})&quot;);\n    Matcher match = pattern.matcher(&quot;02-20-2020 05-21-2020&quot;);\n    System.out.println(match.replaceAll(&quot;$3年$1月$2日&quot;));\n  }\n}\n</code></pre><p>部分常见编程语言替换文本方式，你可以参考下面的表。</p><p><img src=\"https://static001.geekbang.org/resource/image/98/yy/98603bb41c59dac186bab6dc12a494yy.jpg?wh=1406*739\" alt=\"\"></p><h2>4.切割文本内容</h2><p>我们最后再来看一下文本内容切割，通常切割用于变长的空白符号，多变的标点符号等。</p><p>下面我们来讲解一下具体的例子，让你了解一下正则切割文本在部分常见编程语言中的使用。</p><h3>Python</h3><p>在 Python 中切割相关的方法是 re.split。如果我们有按照任意空白符切割的需求，可以直接使用字符串的 split 方法，不传任何参数时就是按任意连续一到多个空白符切割。</p><pre><code># 使用字符串的切割方法\n&gt;&gt;&gt; &quot;a b  c\\n\\nd\\t\\n \\te&quot;.split()\n['a', 'b', 'c', 'd', 'e']\n</code></pre><p>使用正则进行切割，比如我们要通过标点符号切割，得到所有的单词（这里简单使用非单词组成字符来表示）。</p><pre><code>&gt;&gt;&gt; import re\n&gt;&gt;&gt; reg = re.compile(r'\\W+')\n&gt;&gt;&gt; reg.split(&quot;apple, pear! orange; tea&quot;)\n['apple', 'pear', 'orange', 'tea']\n\n# 限制切割次数，比如切一刀，变成两部分\n&gt;&gt;&gt; reg.split(&quot;apple, pear! orange; tea&quot;, 1)\n['apple', 'pear! orange; tea']\n</code></pre><h3>Go</h3><p>在 Go语言里面，切割是 Split 方法，和 Python 非常地类似，只不过Go语言中这个方法的第二个参数是必传的，如果不限制次数，我们传入 -1 即可。</p><pre><code>package main\n\nimport (\n  &quot;fmt&quot;\n  &quot;regexp&quot;\n)\n\nfunc main() {\n  re := regexp.MustCompile(`\\W+`)\n  \n  // 返回 []string{&quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;, &quot;tea&quot;}\n  fmt.Printf(&quot;%#v&quot;, re.Split(&quot;apple, pear! orange; tea&quot;, -1)\n}\n</code></pre><p>但在Go语言中，有个地方和 Python 不太一样，就是传入的第二个参数代表切割成几个部分，而不是切割几刀。</p><pre><code>// 返回 []string{&quot;apple&quot;, &quot;pear! orange; tea&quot;}\nfmt.Printf(&quot;%#v\\n&quot;, re.Split(&quot;apple, pear! orange; tea&quot;, 2))\n\n\n// 返回 []string{&quot;apple&quot;}\nfmt.Printf(&quot;%#v\\n&quot;, re.Split(&quot;apple&quot;, 2))\n</code></pre><p>这里有一个<a href=\"https://play.golang.org/p/4VsBKxxXzYp\">在线测试链接</a>，你可以尝试一下。</p><h3>JavaScript</h3><p>在 JavaScript 中，正则的切割和刚刚讲过的 Python 和 Go 有些类似，但又有区别。当第二个参数是2的时候，表示切割成2个部分，而不是切2刀（Go和Java也是类似的），但数组的内容不是 apple 后面的剩余部分，而是全部切割之后的 pear，你可以注意比较一下。</p><pre><code>&quot;apple, pear! orange; tea&quot;.split(/\\W+/)\n// 输出：[&quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;, &quot;tea&quot;]\n\n// 传入第二个参数的情况\n&quot;apple, pear! orange; tea&quot;.split(/\\W+/, 1)\n// 输出 [&quot;apple&quot;]\n&quot;apple, pear! orange; tea&quot;.split(/\\W+/, 2)\n// 输出 [&quot;apple&quot;, &quot;pear&quot;]\n&quot;apple, pear! orange; tea&quot;.split(/\\W+/, 10)\n// 输出 [&quot;apple&quot;, &quot;pear&quot;, &quot;orange&quot;, &quot;tea&quot;]\n</code></pre><h3>Java</h3><p>Java中切割也是类似的，由于没有原生字符串，转义稍微麻烦点。</p><pre><code>import java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nclass Main {\n  public static void main(String[] args) {\n    Pattern pattern = Pattern.compile(&quot;\\\\W+&quot;);\n    for(String s : pattern.split(&quot;apple, pear! orange; tea&quot;)) {\n      System.out.println(s);\n    }\n  }\n}\n</code></pre><p>在 Java 中，也可以传入第二个参数，类似于 Go 的结果。</p><pre><code>pattern.split(&quot;apple, pear! orange; tea&quot;, 2)\n// 返回 &quot;apple&quot; 和 &quot;pear! orange; tea&quot;\n</code></pre><p>部分常见编程语言切割文本方式，你可以参考下面的表。</p><p><img src=\"https://static001.geekbang.org/resource/image/67/56/6708a65e269e645abb9c6ca85b5a4b56.jpg?wh=1383*560\" alt=\"\"></p><h2>总结</h2><p>好了，今天的内容讲完了，我来带你总结回顾一下。</p><p>今天我们学习了正则解决的问题大概可以分成四类，分别是校验文本内容、提取文本内容、替换文本内容、切割文本内容。从这四个功能出发，我们学习了在一些常见的编程语言中，如何正确地使用相应的方法来实现这些功能。这些方法都比较详细，希望你能够认真练习，掌握好这些方法。</p><p>我给你总结了一个今天所讲内容的详细脑图，你可以长按保存下来，经常回顾一下：</p><p><img src=\"https://static001.geekbang.org/resource/image/f1/25/f1d925e4795e1310886aaf82caf42325.png?wh=1446*1596\" alt=\"\"></p><h2>课后思考</h2><p>最后，我们来做一个小练习吧。很多网页为了防止爬虫，喜欢把邮箱里面的 @ 符号替换成 # 符号，你可以写一个正则，兼容一下这种情况么？</p><pre><code>例如网页的底部可能是这样的：\n联系邮箱：xxx#163.com (请把#换成@)\n</code></pre><p>你可以试试自己动手，使用你熟悉的编程语言，测试一下你写的正则能不能提取出这种“防爬”的邮箱。</p><p>好，今天的课程就结束了，希望可以帮助到你，也希望你在下方的留言区和我参与讨论，并把文章分享给你的朋友或者同事，一起交流一下。</p>","comments":[{"had_liked":false,"id":232362,"user_name":"134","can_delete":false,"product_type":"c1","uid":1785968,"ip_address":"","ucode":"869C2482D194F6","user_header":"https://static001.geekbang.org/account/avatar/00/1b/40/70/d14f653e.jpg","comment_is_top":false,"comment_ctime":1593966869,"is_pvip":false,"replies":[{"id":"85765","content":"赞，这真的是一个特别好的方法。<br>遇到本文思考题目类似的问题，很多同学可能一上来就想，我要一展身手，想出一个正则，兼容 @ 和 # 两种情况，当然肯定能写出来，也不难。<br>但提前对文本进行预处理，把杂乱的文本清洗干净，然后再使用正则来提取是一种非常好的思路，通常也是这么做的，比费尽心思想着怎么用正则来兼容各种情况的办法要更好，也更推荐这么做。","user_name":"作者回复","comment_id":232362,"uid":"1112089","ip_address":"","utype":1,"ctime":1593998441,"user_name_real":"伟忠"}],"discussion_count":2,"race_medal":0,"score":"78903378197","product_id":100053301,"comment_content":"&quot;xxx#163.com&quot;.replace(&#47;#&#47;,&#39;@&#39;)","like_count":18,"discussions":[{"author":{"id":1112089,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","nickname":"伟忠","note":"","ucode":"FE77CF20ED6065","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500612,"discussion_content":"赞，这真的是一个特别好的方法。\n遇到本文思考题目类似的问题，很多同学可能一上来就想，我要一展身手，想出一个正则，兼容 @ 和 # 两种情况，当然肯定能写出来，也不难。\n但提前对文本进行预处理，把杂乱的文本清洗干净，然后再使用正则来提取是一种非常好的思路，通常也是这么做的，比费尽心思想着怎么用正则来兼容各种情况的办法要更好，也更推荐这么做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593998441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289257,"discussion_content":"数据清洗之后，然后在处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594041989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347832,"user_name":"徐能","can_delete":false,"product_type":"c1","uid":1667232,"ip_address":"","ucode":"916CBDCBDCB05D","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/a0/e2e7c486.jpg","comment_is_top":false,"comment_ctime":1654497832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654497832","product_id":100053301,"comment_content":" @Test<br>    void replace_email_pound_key_with_at_symbol() {<br>        final Pattern pattern = Pattern.compile(&quot;(\\\\W+)(\\\\w+)(@|#)(\\\\d+.[a-z]+)(\\\\W+)&quot;);    <br>        Matcher match = pattern.matcher(&quot;例如网页的底部可能是这样的：联系邮箱：xxx#163.com (请把#换成@)&quot;);    <br>        assertEquals(&quot;例如网页的底部可能是这样的：联系邮箱：xxx@163.com (请把#换成@)&quot;, match.replaceAll(&quot;$1$2@$4$5&quot;));  <br>    }","like_count":0},{"had_liked":false,"id":334144,"user_name":"Geek_039a5c","can_delete":false,"product_type":"c1","uid":1651848,"ip_address":"","ucode":"08F4FA864D4B65","user_header":"","comment_is_top":false,"comment_ctime":1644763612,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644763612","product_id":100053301,"comment_content":"    public static void main(String[] args) {<br><br>        String mail = &quot;xxx#163.com&quot;;<br><br>        final Pattern pattern1 = Pattern.compile(&quot;\\\\b([\\\\w.%+-]+)[#@]([\\\\w.-]+\\\\.[a-zA-Z]{2,6})\\\\b&quot;);<br>        Matcher match1 = pattern1.matcher(mail);<br>        System.out.println(match1.replaceAll(&quot;$1@$2&quot;));<br><br>    }","like_count":0},{"had_liked":false,"id":271236,"user_name":"取悦","can_delete":false,"product_type":"c1","uid":1327864,"ip_address":"","ucode":"53BA6AB79C3CED","user_header":"https://static001.geekbang.org/account/avatar/00/14/42/f8/9a22b3aa.jpg","comment_is_top":false,"comment_ctime":1609485144,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1609485144","product_id":100053301,"comment_content":"\\w+[@#]\\w+[.]com<br>这个对吗","like_count":0,"discussions":[{"author":{"id":1701572,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f6/c4/e14686d4.jpg","nickname":"shk1230","note":"","ucode":"9E39279C23FF8F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559043,"discussion_content":"\\w+[@#]{1}\\w+[.]{1}\\w+","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648596099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244458,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1598522205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598522205","product_id":100053301,"comment_content":"pattern = re.compile(r&#39;(\\w+)#(\\w+)&#39;)<br><br>email_str = &#39;xxx#163.com&#39;<br>print(pattern.sub(r&#39;\\1@\\2&#39;, email_str))","like_count":0},{"had_liked":false,"id":240141,"user_name":"Juntíng","can_delete":false,"product_type":"c1","uid":1039290,"ip_address":"","ucode":"F6A3B528D6F3FD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/ba/304a9a4a.jpg","comment_is_top":false,"comment_ctime":1596770428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596770428","product_id":100053301,"comment_content":"JavaScriipt: <br>let str = &#39;xxx#163.com&#39;;<br>方式1: str.replace(&#47;#&#47;, &#39;@&#39;);<br>方式2: str.replace(&#47;(\\w+)[#@](.\\w+)&#47;g, &#39;$1@$2&#39;);<br>&#39;xxx&amp;163.com,xxx#qq.com&#39;.replace(&#47;(\\w+)[#@&amp;](.\\w+)&#47;g, &#39;$1@$2&#39;);","like_count":0},{"had_liked":false,"id":236200,"user_name":"吕伟","can_delete":false,"product_type":"c1","uid":1110096,"ip_address":"","ucode":"A443C94A717AD0","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/50/c348c2ea.jpg","comment_is_top":false,"comment_ctime":1595343224,"is_pvip":false,"replies":[{"id":"87497","content":"可以的，中括号里面多个范围不用逗号哈。<br>也可以考虑看看能不能让 \\w 不匹配汉字，比如试试 ASCII模式(如果有的话)","user_name":"作者回复","comment_id":236200,"uid":"1112089","ip_address":"","utype":1,"ctime":1595549784,"user_name_real":"伟忠"}],"discussion_count":2,"race_medal":0,"score":"1595343224","product_id":100053301,"comment_content":"[a-z,1-9,A-Z]+[#|@][a-z,1-9,A-Z]+.com<br>一开始是写这样的“\\b(\\w+)(#|@)(\\d+.com)\\b”<br>但是“联系邮箱xxx#163.com”，这样的话就会将中文也混在一起，所以迫于无奈才这样写“[a-z,1-9,A-Z]”","like_count":0,"discussions":[{"author":{"id":1112089,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","nickname":"伟忠","note":"","ucode":"FE77CF20ED6065","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501981,"discussion_content":"可以的，中括号里面多个范围不用逗号哈。\n也可以考虑看看能不能让 \\w 不匹配汉字，比如试试 ASCII模式(如果有的话)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595549784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293550,"discussion_content":"xxx@a.b.c.com 这种邮箱怎么办？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595577609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232511,"user_name":"Robot","can_delete":false,"product_type":"c1","uid":1181473,"ip_address":"","ucode":"7215462D5AC0FA","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/21/b3394aa2.jpg","comment_is_top":false,"comment_ctime":1594024136,"is_pvip":false,"replies":[{"id":"85846","content":"可以的，其实题目的本意是兼容文本中有 # 和 @ 两种情况","user_name":"作者回复","comment_id":232511,"uid":"1112089","ip_address":"","utype":1,"ctime":1594046149,"user_name_real":"伟忠"}],"discussion_count":1,"race_medal":0,"score":"1594024136","product_id":100053301,"comment_content":"public static void main(String[] args) {<br>\t\tPattern pattern = Pattern.compile(&quot;[a-zA-Z0-9]+(?:[.-][a-zA-Z0-9]+)*#[a-zA-Z0-9]+(?:[.-][a-zA-Z0-9]+)*\\\\&quot; +<br>\t\t\t\t&quot;.[a-zA-Z]+&quot;);<br><br>\t\tString str = &quot;A spirited debate ensued. sd.xxx#gmail.com You may find it entertaining and educational to &quot; +<br>\t\t\t\t&quot;follow all the various threads. However, I want to focus on one of Mark’s replies. He tweeted about a&quot; +<br>\t\t\t\t&quot; blog he had yanleichang-3#vip.163.com written back in 2018. I encourage you to read it. You’ll learn&quot; +<br>\t\t\t\t&quot; something about testing, static typing, and Haskell. You’ll also learn something about how to debate&quot; +<br>\t\t\t\t&quot; with good-job#qq.com someone in the future by posting your refutation in the think#163.com&quot;;<br><br>\t\tMatcher matcher = pattern.matcher(str);<br><br>\t\twhile (matcher.find()) {<br>\t\t\tSystem.out.println(matcher.group().replace(&#39;#&#39;,&#39;@&#39;));<br>\t\t}","like_count":0,"discussions":[{"author":{"id":1112089,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f8/19/05a2695f.jpg","nickname":"伟忠","note":"","ucode":"FE77CF20ED6065","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500672,"discussion_content":"可以的，其实题目的本意是兼容文本中有 # 和 @ 两种情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594046149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}