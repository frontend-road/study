{"id":85958,"title":"29 | Context与任务取消","content":"<h1>课件及源代码地址</h1><p><a href=\"https://gitee.com/geektime-geekbang/go_learning\">https://gitee.com/geektime-geekbang/go_learning</a></p><h2>书目推荐</h2><p><a href=\"time://mall?url=https%3A%2F%2Fh5.youzan.com%2Fv2%2Fgoods%2F1ycmk3uob0ryw\">《计算机程序的构造和解释》</a></p>","comments":[{"had_liked":false,"id":132144,"user_name":"Geek_338030","can_delete":false,"product_type":"c3","uid":1614014,"ip_address":"","ucode":"6F2ACB3C528BAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1ZcgbSZ1Q0eARic4sFq9PRO0rT55MAYUAcBVNK3dE6ficOQViblBlzUTnMJyK2bZbU3IsewnDxKD5Wtrq01DeHnWQ/132","comment_is_top":false,"comment_ctime":1568031657,"is_pvip":false,"replies":[{"id":50526,"content":"context就是用于管理相关任务的上下文，包含了共享值的传递，超时，取消通知\ntype Context interface {\n    Deadline() (deadline time.Time, ok bool)\n    Done() &lt;-chan struct{}\n    Err() error\n    Value(key interface{}) interface{}\n}\nDeadline会返回一个超时时间，Goroutine获得了超时时间后，例如可以对某些io操作设定超时时间。\n\nDone方法返回一个信道（channel），当Context被撤销或过期时，该信道是关闭的，即它是一个表示Context是否已关闭的信号。\n\n当Done信道关闭后，Err方法表明Context被撤的原因。\n\nValue可以让Goroutine共享一些数据，当然获得数据是协程安全的。但使用这些数据的时候要注意同步，比如返回了一个map，而这个map的读写则要加","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1568044205,"ip_address":"","comment_id":132144,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"没讲context是干嘛的，直接就讲用来取消关联任务，感觉云里雾里的。","like_count":25,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466787,"discussion_content":"context就是用于管理相关任务的上下文，包含了共享值的传递，超时，取消通知\ntype Context interface {\n    Deadline() (deadline time.Time, ok bool)\n    Done() &amp;lt;-chan struct{}\n    Err() error\n    Value(key interface{}) interface{}\n}\nDeadline会返回一个超时时间，Goroutine获得了超时时间后，例如可以对某些io操作设定超时时间。\n\nDone方法返回一个信道（channel），当Context被撤销或过期时，该信道是关闭的，即它是一个表示Context是否已关闭的信号。\n\n当Done信道关闭后，Err方法表明Context被撤的原因。\n\nValue可以让Goroutine共享一些数据，当然获得数据是协程安全的。但使用这些数据的时候要注意同步，比如返回了一个map，而这个map的读写则要加","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568044205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90201,"user_name":"南宫云遥子","can_delete":false,"product_type":"c3","uid":1350610,"ip_address":"","ucode":"356C45EFF11756","user_header":"https://static001.geekbang.org/account/avatar/00/14/9b/d2/08d1dbc8.jpg","comment_is_top":false,"comment_ctime":1556446691,"is_pvip":false,"replies":[{"id":37619,"content":"这个cancel就是由相关的context生成的。参考下面的实例代码：\npackage cancel_with_ctx\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;testing&quot;\n)\n\nfunc WithContext(ctx int) (Cancel func()) {\n\treturn func() {\n\t\tfmt.Println(&quot;The value of ctx is &quot;, ctx)\n\t}\n}\n\nfunc TestWithContext(t *testing.T) {\n\tcancel := WithContext(10)\n\tcancel() \n\t&#47;&#47;output: The value of ctx is  10\n}","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1560592103,"ip_address":"","comment_id":90201,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"`cancel()`这里为啥不用向cancel传入ctx，像这样`cancel(ctx)`，我知道`ctx, cancel := context.WithCancel(context.Background())`这里返回的就是不用传参，不明白为啥不用传参，请老师解答一下，谢谢！\n```\nfunc TestCancelRelative(t *testing.T){\n    &#47;&#47; use context.WithCancel() to create cancel context signal, use context.Background() to get context\n    ctx, cancel := context.WithCancel(context.Background())\n    for i := 0; i &lt; 10; i++ {\n        &#47;&#47; use context.Context definded a context\n        go func(i int, ctx context.Context){\n            for {\n                &#47;&#47; cancel single task\n                &#47;&#47;if isCancel(cancelChan){\n\n                &#47;&#47; cancel relative task\n                if isCancelRelative(ctx){\n                    break\n                }\n                time.Sleep(1 * time.Second)\n            }\n            fmt.Println(i, &quot;done!&quot;)\n        }(i, ctx)\n    }\n    cancel()\n\n    &#47;&#47; cancel(ctx)\n    &#47;&#47;raise error: too many arguments in call to cancel, have (context.Context), want()\n\n    time.Sleep(1 * time.Second)\n}\n```","like_count":3,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448421,"discussion_content":"这个cancel就是由相关的context生成的。参考下面的实例代码：\npackage cancel_with_ctx\n\nimport (\n\t&amp;quot;fmt&amp;quot;\n\t&amp;quot;testing&amp;quot;\n)\n\nfunc WithContext(ctx int) (Cancel func()) {\n\treturn func() {\n\t\tfmt.Println(&amp;quot;The value of ctx is &amp;quot;, ctx)\n\t}\n}\n\nfunc TestWithContext(t *testing.T) {\n\tcancel := WithContext(10)\n\tcancel() \n\t//output: The value of ctx is  10\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560592103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1056807,"avatar":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","nickname":"虢國技醬","note":"","ucode":"5A192262AA037E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4524,"discussion_content":"源码包中的WithCancel函数定义：\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc) {\n\tc := newCancelCtx(parent)\n\tpropagateCancel(parent, &amp;c)\n\treturn &amp;c, func() { c.cancel(true, Canceled) }\n}\n在传入的父ctx：parent基础上new了一个cancelCtx结构体实例c\n返回了c的地址和一个CancelFunc函数类型的函数；这个函数内部调用了c实例的cancel方法。\n而函数是引用类型，所以WithCancel得到的cancel函数保存的是内存地址。\nc实例的cancel方式接受者是指针：return &amp;c, func() { c.cancel(true, Canceled) }这里的c.cancel(true, Canceled)其实应该是(&amp;c).cancel(true, Canceled)。go做了隐式转换，所以这个return的函数保存了c实例的地址。\n综上，WithCancel返回的函数是不用传参直接调用即可","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565518680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1433247,"avatar":"https://static001.geekbang.org/account/avatar/00/15/de/9f/b6c59a75.jpg","nickname":"dust！","note":"","ucode":"7ADCCC7985B381","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1056807,"avatar":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","nickname":"虢國技醬","note":"","ucode":"5A192262AA037E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":181386,"discussion_content":"golang中没有隐式转换，返回的第二个是个无参数的函数体，想得到函数结果，那肯定得是函数体+(),所以是cancel()，类似闭包。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582366962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4524,"ip_address":"","group_id":0},"score":181386,"extra":""}]}]},{"had_liked":false,"id":79178,"user_name":"Geek_fa647d","can_delete":false,"product_type":"c3","uid":1354306,"ip_address":"","ucode":"D699A1AEF7E655","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoVt7mDvmE6DwuY0wm9KoMQwBsKuictrSxwibvzibzSR10jiaFtGgrmeqnhSC0Xtw1xUOH4sC1pjicO3EA/132","comment_is_top":false,"comment_ctime":1553396070,"is_pvip":false,"replies":[{"id":29453,"content":"推荐你一个，简单的\nhttps:&#47;&#47;github.com&#47;easierway&#47;service_decorators&#47;blob&#47;master&#47;README.md","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1553831615,"ip_address":"","comment_id":79178,"utype":1}],"discussion_count":1,"race_medal":1,"score":2,"product_id":100024001,"comment_content":"老师，go有类似java中spring clound这种微服务框架吗？","like_count":2,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444384,"discussion_content":"推荐你一个，简单的\nhttps://github.com/easierway/service_decorators/blob/master/README.md","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553831615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385718,"user_name":"悠悠","can_delete":false,"product_type":"c3","uid":1116307,"ip_address":"湖北","ucode":"DEA5CDB0B50422","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/93/0b4bb9e9.jpg","comment_is_top":false,"comment_ctime":1703155765,"is_pvip":false,"replies":[{"id":140712,"content":"你的“fmt.Println(&quot; ctx4 canceled&quot;)” 位置不对\npackage hh\n\nimport (\n\t&quot;context&quot;\n\t&quot;fmt&quot;\n\t&quot;testing&quot;\n\t&quot;time&quot;\n)\n\nfunc isCancel(ctx context.Context) bool {\n\tselect {\n\tcase &lt;-ctx.Done():\n\t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}\n\nfunc TestContextCancelling(t *testing.T) {\n\tctx := context.Background()\n\t&#47;&#47; ctx2 是子context ,cancel 是取消函数\n\tctx2, cancel := context.WithCancel(ctx)\n\tfor i := 0; i &lt; 5; i++ {\n\t\tgo func(i int, ctx3 context.Context) {\n\t\t\tfor {\n\t\t\t\tif isCancel(ctx3) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\ttime.Sleep(time.Millisecond * 10)\n\t\t\t}\n\t\t\tfmt.Println(i, &quot;canceled&quot;)\n\t\t}(i, ctx2) &#47;&#47; 传递子context\n\t}\n\t&#47;&#47; 然后再通过子context创建孙context\n\tctx4, _ := context.WithCancel(ctx2)\n\tgo func(ctx4 context.Context) {\n\t\tfmt.Println(&quot;ctx4 started&quot;)\n\t\tfor {\n\t\t\tif isCancel(ctx4) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t&#47;&#47;time.Sleep(time.Millisecond * 10)\n\t\t}\n\t\tfmt.Println(&quot; ctx4 canceled&quot;)\n\n\t}(ctx4)\n\tcancel()\n\ttime.Sleep(time.Second * 10)\n}\n","user_name":"作者回复","user_name_real":"编辑","uid":1008262,"ctime":1704072383,"ip_address":"新加坡","comment_id":385718,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"老师您好，请问一下，ctx 是创建出来的子context ,调用也是子context的cancel函数，感觉并没有体现出，取消父context 之后，子context被取消的效果啊。\n然后我尝试使用子context 创建孙context ，并没与打印出孙context的canceled.\n\tctx := context.Background()\n\t&#47;&#47; ctx2 是子context ,cancel 是取消函数\n\tctx2, cancel := context.WithCancel(ctx)\n\tfor i := 0; i &lt; 5; i++ {\n\t\tgo func(i int, ctx3 context.Context) {\n\t\t\tfor {\n\t\t\t\tif isCancel(ctx3) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\ttime.Sleep(time.Millisecond * 10)\n\t\t\t}\n\t\t\tfmt.Println(i, &quot;canceled&quot;)\n\t\t}(i, ctx2) &#47;&#47; 传递子context\n\t}\n\t&#47;&#47; 然后再通过子context创建孙context\n\tctx4, _ := context.WithCancel(ctx2)\n\tgo func(ctx4 context.Context) {\n\t\tfor {\n\t\t\tif isCancel(ctx4) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfmt.Println(&quot; ctx4 canceled&quot;)\n\t\t}\n\n\t}(ctx4)\n\tcancel()\n\ttime.Sleep(time.Second * 1)","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634838,"discussion_content":"你的“fmt.Println(&#34; ctx4 canceled&#34;)” 位置不对\npackage hh\n\nimport (\n\t&#34;context&#34;\n\t&#34;fmt&#34;\n\t&#34;testing&#34;\n\t&#34;time&#34;\n)\n\nfunc isCancel(ctx context.Context) bool {\n\tselect {\n\tcase &lt;-ctx.Done():\n\t\treturn true\n\tdefault:\n\t\treturn false\n\t}\n}\n\nfunc TestContextCancelling(t *testing.T) {\n\tctx := context.Background()\n\t// ctx2 是子context ,cancel 是取消函数\n\tctx2, cancel := context.WithCancel(ctx)\n\tfor i := 0; i &lt; 5; i++ {\n\t\tgo func(i int, ctx3 context.Context) {\n\t\t\tfor {\n\t\t\t\tif isCancel(ctx3) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\ttime.Sleep(time.Millisecond * 10)\n\t\t\t}\n\t\t\tfmt.Println(i, &#34;canceled&#34;)\n\t\t}(i, ctx2) // 传递子context\n\t}\n\t// 然后再通过子context创建孙context\n\tctx4, _ := context.WithCancel(ctx2)\n\tgo func(ctx4 context.Context) {\n\t\tfmt.Println(&#34;ctx4 started&#34;)\n\t\tfor {\n\t\t\tif isCancel(ctx4) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t//time.Sleep(time.Millisecond * 10)\n\t\t}\n\t\tfmt.Println(&#34; ctx4 canceled&#34;)\n\n\t}(ctx4)\n\tcancel()\n\ttime.Sleep(time.Second * 10)\n}\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704072383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273523,"user_name":"Geek_马官人","can_delete":false,"product_type":"c3","uid":1565219,"ip_address":"","ucode":"A5D8EA65195413","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJSlGOyeng3NGwI3fff0PEicP83RL3rGnhghKRU3Md4WXCG6gxjXsicRtcfbQwnKUBJ68I8ibRVpq6Lw/132","comment_is_top":false,"comment_ctime":1610622787,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"上一讲是channel取消，这讲是context取消，都是取消任务，什么情况要用什么方式都没说，各种优缺点也没说，都是讲一点最基础的概念，然后一点最基础的代码，都不明白为什么要敲这种代码，听的很难受，每个东西都完全串不起来，讲的很差","like_count":14},{"had_liked":false,"id":122777,"user_name":"虢國技醬","can_delete":false,"product_type":"c3","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1565519564,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"ctx, cancel := context.WithCancel(context.Background())\n\n\tfor i := 0; i &lt; 30; i++ {\n\t\tgo func(i int) {\n\t\t\tfor {\n\t\t\t\tif isCancelled(ctx) {\n\t\t\t\t\tbreak\n\t\t\t\t} else {\n\t\t\t\t\t&#47;&#47; fmt.Println(i, &quot;Not Yet&quot;)\n\t\t\t\t}\n\t\t\t\ttime.Sleep(time.Millisecond * 5)\n\t\t\t}\n\t\t\tfmt.Println(i, &quot;Canceled&quot;)\n\t\t}(i)\n\t}\n\ngo func(i int) 也可以直接利用闭包特性直接使用ctx，因为for启动多个goroutine时ctx是公用的、不变的。go func(i int) 函数启动时内部的ctx用的是外部ctx，此时内部的ctx由不确定变为确定(由开放到闭合)","like_count":4},{"had_liked":false,"id":385719,"user_name":"悠悠","can_delete":false,"product_type":"c3","uid":1116307,"ip_address":"湖北","ucode":"DEA5CDB0B50422","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/93/0b4bb9e9.jpg","comment_is_top":false,"comment_ctime":1703155902,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"ctx := context.Background()\n\t&#47;&#47; ctx2 是子context ,cancel 是取消函数\n\tctx2, cancel := context.WithCancel(ctx)\n\tfor i := 0; i &lt; 5; i++ {\n\t\tgo func(i int, ctx3 context.Context) {\n\t\t\tfor {\n\t\t\t\tif isCancel(ctx3) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\ttime.Sleep(time.Millisecond * 10)\n\t\t\t}\n\t\t\tfmt.Println(i, &quot;canceled&quot;)\n\t\t}(i, ctx2) &#47;&#47; 传递子context\n\t}\n\t&#47;&#47; 然后再通过子context创建孙context\n\tctx4, _ := context.WithCancel(ctx2)\n\tgo func(ctx4 context.Context) {\n\t\tfor {\n\t\t\tif isCancel(ctx4) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tfmt.Println(&quot; ctx4 canceled&quot;)\n\t\t}\n\n\t}(ctx4)\n\tcancel()\n\ttime.Sleep(time.Second * 1)","like_count":1},{"had_liked":false,"id":287553,"user_name":"escray","can_delete":false,"product_type":"c3","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1618026123,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"Context 确实在视频中没有讲，好在老师在回复留言的时候简单的介绍了一下。我抄一段官网的文字：\n\nhttps:&#47;&#47;golang.org&#47;pkg&#47;context&#47;\n\nPackage context defines the Context type, which carries deadlines, cancellation signals, and other request-scoped values across API boundaries and between processes.\n\nIncoming requests to a server should create a Context, and outgoing calls to servers should accept a Context.\n\n另外有同学留言说，没有讲到什么时候使用 close 取消任务什么时候使用 context。其实在课程的开篇，老师就提到了，使用 context 为了解决层级取消的问题，就是取消一个协程的子协程（树）甚至孙子协程（树）的问题。\n\n稍微有点可惜的是，在课程的代码中并没有演示这一部分。\n\nhttps:&#47;&#47;blog.golang.org&#47;context\nhttps:&#47;&#47;blog.golang.org&#47;context-and-structs\n\n以上两个链接，我也没看，不明觉厉。","like_count":1},{"had_liked":false,"id":271967,"user_name":"小寞子。(≥3≤)","can_delete":false,"product_type":"c3","uid":1206545,"ip_address":"","ucode":"6D978BDCBB2862","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/11/831cec7d.jpg","comment_is_top":false,"comment_ctime":1609897703,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"cancel后面如果没有代码 或者waitGroup, 那么在调用后所有goroutinue也会被强制退出  并不会执行判断. 我调了半天代码才发现的。。毕竟主进程结束了 那些routine也不能独活","like_count":1,"discussions":[{"author":{"id":1208981,"avatar":"https://static001.geekbang.org/account/avatar/00/12/72/95/5f83598c.jpg","nickname":"Hello World","note":"","ucode":"368D87D53DC58F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354609,"discussion_content":"所以测试中是使用的sleep，而不是wg.wait()死等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615304035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385723,"user_name":"悠悠","can_delete":false,"product_type":"c3","uid":1116307,"ip_address":"湖北","ucode":"DEA5CDB0B50422","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/93/0b4bb9e9.jpg","comment_is_top":false,"comment_ctime":1703157791,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"go func() {\n\t\tctx, cancel := context.WithCancel(context.Background())\n\t\tdefer cancel()\n\n\t\tgo func(ctx context.Context) {\n\t\t\ti := 0\n\t\t\tfor {\n\t\t\t\tselect {\n\t\t\t\tcase &lt;-ctx.Done():\n\t\t\t\t\tfmt.Printf(&quot;goroutine 2 exit&quot;)\n\t\t\t\t\treturn\n\t\t\t\tdefault:\n\t\t\t\t\tfmt.Printf(&quot;goroutine 2: i = %d\\n&quot;, i)\n\t\t\t\t\ttime.Sleep(time.Second)\n\t\t\t\t\ti++\n\t\t\t\t}\n\n\t\t\t}\n\t\t}(ctx)\n\n\t\tfor j := 0; j &lt;= 3; j++ {\n\t\t\tfmt.Printf(&quot;goroutine 1: i = %d\\n&quot;, j)\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t}\n\n\t\tfmt.Println(&quot;goroutine 1 exit&quot;)\n\t}()\n\n\t&#47;&#47; 永远堵塞main\n\tselect {}\n\tfmt.Println(&quot;Main exit&quot;)","like_count":0},{"had_liked":false,"id":86697,"user_name":"喂喂喂","can_delete":false,"product_type":"c3","uid":1483573,"ip_address":"","ucode":"FC45954F49532A","user_header":"https://static001.geekbang.org/account/avatar/00/16/a3/35/62597560.jpg","comment_is_top":false,"comment_ctime":1555427535,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"蔡超老师你好，在本节的例子中，您是不是没有通过子 context 来创建任务？","like_count":0},{"had_liked":false,"id":81371,"user_name":"云学","can_delete":false,"product_type":"c3","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1553875416,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"项目中在用go语言，老师点拨的很好","like_count":0}]}