{"id":176900,"title":"21 |  事务开发：读操作事务之二","content":"<p><strong>课件和Demo地址</strong><br>\n<a href=\"https://gitee.com/geektime-geekbang/geektime-mongodb-course\">https://gitee.com/geektime-geekbang/geektime-mongodb-course</a></p>","comments":[{"had_liked":false,"id":179593,"user_name":"kylexy_0817","can_delete":false,"product_type":"c3","uid":1068372,"ip_address":"","ucode":"392DD9DD5E4B6E","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/54/9c214885.jpg","comment_is_top":false,"comment_ctime":1582036158,"is_pvip":false,"replies":[{"id":70079,"content":"很有洞察力的一个问题。\n\n一个读线程，使用 readConcern:majority，在t1 的时候读S1节点，S1是否要返回最新的一个写入 x=1 还是要等到t5？\n\n首先理解，这个读线程只能读 一个被大多数节点确认的写入(满足write majority)，这才可以满足readConcern: majority的条件。\n\n在t1的时候，x=1实际上已经到达两个节点（majority），但是判断这个事实的是主节点。在主节点没有知道并确认x=1这个操作已经被多数节点写入的时候，这条数据是不够资格被发给 readConcern: majority 读线程的。 \n\n这个是3个节点，想象一下5个节点 - 那S1是肯定不知道数据已经写入到多数节点，只能等primary 告诉他。\n \n这里是官方的文档：\nhttps:&#47;&#47;docs.mongodb.com&#47;manual&#47;reference&#47;read-concern-majority&#47;","user_name":"作者回复","user_name_real":"远航的TJ 唐建法","uid":1260017,"ctime":1582347281,"ip_address":"","comment_id":179593,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100040001,"comment_content":"老师，有个问题想请教，本节中的{readConcern:&quot;majority&quot;}的例子，所有节点的数据达到共识的时间，与复制集的应该不一样吧？复制集的情况应该会简单点，就是当primary节点把数据复制给secondary时，顺便把x=1写入P成功的信息告诉S1和S2，这样S1和S2只需要告诉P他们也写入成功就完事了，没必要到t5、t6吧？只有在writeConcern时才像例子中说的？","like_count":6,"discussions":[{"author":{"id":1260017,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/f1/6d18a4d1.jpg","nickname":"远航的TJ 唐建法","note":"","ucode":"0719807390250A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484319,"discussion_content":"很有洞察力的一个问题。\n\n一个读线程，使用 readConcern:majority，在t1 的时候读S1节点，S1是否要返回最新的一个写入 x=1 还是要等到t5？\n\n首先理解，这个读线程只能读 一个被大多数节点确认的写入(满足write majority)，这才可以满足readConcern: majority的条件。\n\n在t1的时候，x=1实际上已经到达两个节点（majority），但是判断这个事实的是主节点。在主节点没有知道并确认x=1这个操作已经被多数节点写入的时候，这条数据是不够资格被发给 readConcern: majority 读线程的。 \n\n这个是3个节点，想象一下5个节点 - 那S1是肯定不知道数据已经写入到多数节点，只能等primary 告诉他。\n \n这里是官方的文档：\nhttps://docs.mongodb.com/manual/reference/read-concern-majority/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582347281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1165671,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/67/7d446501.jpg","nickname":"大展宏兔","note":"","ucode":"21E6001F29951B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576553,"discussion_content":"二阶段提交：prepare and commit","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655647617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2074870,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/a8/f6/5f5efd88.jpg","nickname":"Geek_4c9d75","note":"","ucode":"96B73112AB93BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332977,"discussion_content":"另外：t6时间之后，是否还会有P告知S1：S2已经同步了数据？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607406203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2074870,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/a8/f6/5f5efd88.jpg","nickname":"Geek_4c9d75","note":"","ucode":"96B73112AB93BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332976,"discussion_content":"同样解答了我的问题，感谢。觉得主要是“判断这个事实的是主节点”。\n不过又引发一个疑问：从S1节点读数据，同样需要P节点的参与吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607405925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244611,"user_name":"川川","can_delete":false,"product_type":"c3","uid":1382517,"ip_address":"","ucode":"DA092CAC7F294D","user_header":"https://static001.geekbang.org/account/avatar/00/15/18/75/68487e89.jpg","comment_is_top":false,"comment_ctime":1598595112,"is_pvip":false,"replies":[{"id":90300,"content":"如果你的writeConcern是默认，比如说你写 x:1 到主节点, ,它会立即返回。如果你马上再去用majority readConcern去读这条数据，这条数据有可能没被复制到多数节点，你就读不到它。如果在同一个线程内，一般这个是不可以接受的。\n\n正解是，在读写操作是同一个应用发起时，你要配合使用 writeConcern:majority 来保证你的写已经被提交到大多数节点，这样你马上再用readConcern: majority 就可以读到你刚才的写入了。","user_name":"作者回复","user_name_real":"远航的TJ 唐建法","uid":1260017,"ctime":1598999958,"ip_address":"","comment_id":244611,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100040001,"comment_content":"老师你好， 我用readConcern和writeConcern就是想基于Quorum原理来解决一致性问题的， 但是我看官网说“readConcern设置为majority时，能保证读到的数据『不会发生回滚』，但并不能保证读到的数据是最新的“。这句话指的是我刚才写的数据提交后，在发起读操作并没法马上读到刚才提交的数据吗。  请问老师怎么理解","like_count":3,"discussions":[{"author":{"id":1260017,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/f1/6d18a4d1.jpg","nickname":"远航的TJ 唐建法","note":"","ucode":"0719807390250A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504636,"discussion_content":"如果你的writeConcern是默认，比如说你写 x:1 到主节点, ,它会立即返回。如果你马上再去用majority readConcern去读这条数据，这条数据有可能没被复制到多数节点，你就读不到它。如果在同一个线程内，一般这个是不可以接受的。\n\n正解是，在读写操作是同一个应用发起时，你要配合使用 writeConcern:majority 来保证你的写已经被提交到大多数节点，这样你马上再用readConcern: majority 就可以读到你刚才的写入了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598999958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1519881,"avatar":"https://static001.geekbang.org/account/avatar/00/17/31/09/f5d68957.jpg","nickname":"礼拜三","note":"","ucode":"C36A84E76E163D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310990,"discussion_content":"目前 MongoDB 4.4.0 已经设置了默认开启 MajorityReadConcern 功能，可以在 MongoDB Shell 中查看（倒数第 4 个键值对）：\n\nrs0:PRIMARY> db.serverStatus().storageEngine\n{\n        &#34;name&#34; : &#34;wiredTiger&#34;,\n        &#34;supportsCommittedReads&#34; : true,\n        &#34;oldestRequiredTimestampForCrashRecovery&#34; : Timestamp(1602156917, 1),\n        &#34;supportsPendingDrops&#34; : true,\n        &#34;dropPendingIdents&#34; : NumberLong(0),\n        &#34;supportsTwoPhaseIndexBuild&#34; : true,\n        &#34;supportsSnapshotReadConcern&#34; : true,\n        &#34;readOnly&#34; : false,\n        &#34;persistent&#34; : true,\n        &#34;backupCursorOpen&#34; : false\n}\n\nreadPref = &#39;primary&#39; 时读取不到 P 节点已存在但 S 节点不存在的数据，就是因为 readConcern = &#39;majority&#39; 啦。\n\n我的理解，所谓“读取的数据可能不是最新的”，要看和谁比，如果和 P 节点比，是可能的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602166709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1382517,"avatar":"https://static001.geekbang.org/account/avatar/00/15/18/75/68487e89.jpg","nickname":"川川","note":"","ucode":"DA092CAC7F294D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303496,"discussion_content":"谢谢老师 不过我看readConcern开启majority需要同时replication.enableMajorityReadConcern才能生效。加上这个参数后mongo会开启一个单独的snapshot线程对数据集进行周期性的snapshot 这个机制，用户读数据设计从最新的committed的snapshot读取数据，这种机制也导致了读取倒的数据不是脏数据但是也不是最新commit的数据。 比如原来x=1，A在T1提交了数据x=1， 在T2时刻不一定能够立刻读取到x=1。 我不知道我的理解对不对， 这个也是疑惑的点， 这个好像和writeConcern majority无关吧 。 下面这个链接是mongodb中文社区讲解readConcern原理的文章 \n\nhttp://mongoing.com/archives/3403","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599283846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202645,"user_name":"炎炎","can_delete":false,"product_type":"c3","uid":1525840,"ip_address":"","ucode":"386E790507C66D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIUlVIL2Y7gVjfuubGmkKVXUv9LUlZURwK0fwnHz4xrzaqf2BjwwSXXNwLrTcxdRnnwhTlwnV1Xcg/132","comment_is_top":false,"comment_ctime":1586041656,"is_pvip":false,"replies":[{"id":75797,"content":"完整的事务包括ACID。你的理解和大部分程序员一样，更加关注的是里面的A: Atomicty。 就是几个操作要group为一个原子操作，要么全部成功，要么回滚所有操作。\n\n","user_name":"作者回复","user_name_real":"远航的TJ 唐建法","uid":1260017,"ctime":1586079428,"ip_address":"","comment_id":202645,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040001,"comment_content":"mysql单节点时仍然是事务型的。我觉得事务最核心的标志是 begin; xxx; commit|rollback;  当xxx中出问题或者业务程序里出问题可以rollback，保证整个过程是完整的原子的。","like_count":1,"discussions":[{"author":{"id":1260017,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/f1/6d18a4d1.jpg","nickname":"远航的TJ 唐建法","note":"","ucode":"0719807390250A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490643,"discussion_content":"完整的事务包括ACID。你的理解和大部分程序员一样，更加关注的是里面的A: Atomicty。 就是几个操作要group为一个原子操作，要么全部成功，要么回滚所有操作。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586079428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165336,"user_name":"👻 小二","can_delete":false,"product_type":"c3","uid":1625463,"ip_address":"","ucode":"9EEA8553163270","user_header":"https://static001.geekbang.org/account/avatar/00/18/cd/77/b2ab5d44.jpg","comment_is_top":false,"comment_ctime":1577202427,"is_pvip":false,"replies":[{"id":65229,"content":"如果用majority 读，肯定返回是2","user_name":"作者回复","user_name_real":"远航的TJ 唐建法","uid":1260017,"ctime":1577974175,"ip_address":"","comment_id":165336,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100040001,"comment_content":"老师， 请问下, majority 读时， 我有3个节点，刚开始三个节点， x值都是1， 后面更新了x=2时，  a节点跟b节点都更新了， c还没来得及更新， 然后我去读， 刚好落在c节点上， 那此时 会返回1？  ","like_count":0,"discussions":[{"author":{"id":1260017,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/f1/6d18a4d1.jpg","nickname":"远航的TJ 唐建法","note":"","ucode":"0719807390250A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479126,"discussion_content":"如果用majority 读，肯定返回是2","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577974175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625463,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cd/77/b2ab5d44.jpg","nickname":"👻 小二","note":"","ucode":"9EEA8553163270","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":116244,"discussion_content":"你好，mongo是怎么判断现在是2的，难道他会同时请求多个点？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578058324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1076081,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6b/71/e833b14a.jpg","nickname":"李英权","note":"","ucode":"FECAC14A9C414B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1625463,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cd/77/b2ab5d44.jpg","nickname":"👻 小二","note":"","ucode":"9EEA8553163270","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220439,"discussion_content":"majority读 肯定是开销大一些的，我猜测开销大就大在了去多个节点确认版本","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585877275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":116244,"ip_address":"","group_id":0},"score":220439,"extra":""},{"author":{"id":1306315,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ee/cb/4bd24e0f.jpg","nickname":"官人","note":"","ucode":"ECEF55B08E252B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1076081,"avatar":"https://static001.geekbang.org/account/avatar/00/10/6b/71/e833b14a.jpg","nickname":"李英权","note":"","ucode":"FECAC14A9C414B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390057,"discussion_content":"按照多版本控制来分析这个问题的话 我猜测应该是会确认一下大多数节点的 水位在什么位置 水位高就返回高水位的数值 猜测是这样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629625799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":220439,"ip_address":"","group_id":0},"score":390057,"extra":""}]},{"author":{"id":1241430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/f4lPZg0qXT2FJvgmfiapD2R97e5TERdkibUBPpSM2dLoRY1xg2hCcE8rULmutkzFcWH5kibmRFicrZvzq1pp2lO7oQ/132","nickname":"周幕辰","note":"","ucode":"904D82C48C970F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629025,"discussion_content":"这不就是t5时刻,secondary读的结果，应该返回1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696523411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1363017,"avatar":"https://static001.geekbang.org/account/avatar/00/14/cc/49/d527d9df.jpg","nickname":"Gunners","note":"","ucode":"B7CDAC2B3C6BCF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205265,"discussion_content":"同不解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584283065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202646,"user_name":"炎炎","can_delete":false,"product_type":"c3","uid":1525840,"ip_address":"","ucode":"386E790507C66D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIUlVIL2Y7gVjfuubGmkKVXUv9LUlZURwK0fwnHz4xrzaqf2BjwwSXXNwLrTcxdRnnwhTlwnV1Xcg/132","comment_is_top":false,"comment_ctime":1586041709,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100040001,"comment_content":"老师讲的“事务”，应该是“复制集”模式下的安全读写！","like_count":3},{"had_liked":false,"id":163281,"user_name":"长期规划","can_delete":false,"product_type":"c3","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1576679596,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100040001,"comment_content":"老师，您给的示例中，在两个从节点设置fsyncLock，在主上用readconcern=majority读时，主会block，block是基于什么考虑呢？为何要等待呢，直接忽略未同步到majority的数据，立即返回已经majority的不行吗？对比MySQL，设置提交读时，直接忽略未提交的数据，而不是等待他们提交。","like_count":2},{"had_liked":false,"id":163866,"user_name":"长期规划","can_delete":false,"product_type":"c3","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1576813876,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100040001,"comment_content":"老师，我在MongoDB3.6下测试您的示例，发现在两个从节点都设置db.fsyncLock()的情况下，在主上执行readConcern(&quot;majority&quot;)，并不会阻塞等待，会立即返回，返回结果中不包含x=1（该记录写入主节点，未同步到从节点）。你用的是4.2版本吗？这个版本是增加了什么设置才会导致读时阻塞吧","like_count":1,"discussions":[{"author":{"id":2281842,"avatar":"","nickname":"你好，Java","note":"","ucode":"4FA103B707B78D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343688,"discussion_content":"我用4.4一樣不會阻塞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611136040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224771,"user_name":"田翌辰","can_delete":false,"product_type":"c3","uid":1430069,"ip_address":"","ucode":"4AF661C4C61C68","user_header":"https://static001.geekbang.org/account/avatar/00/15/d2/35/b25875e4.jpg","comment_is_top":false,"comment_ctime":1591536205,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100040001,"comment_content":"mysql的默认隔离级别不是RR嘛？","like_count":0},{"had_liked":false,"id":176968,"user_name":"淞淞同学","can_delete":false,"product_type":"c3","uid":1179533,"ip_address":"","ucode":"529A326B898008","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/8d/8601f035.jpg","comment_is_top":false,"comment_ctime":1581238512,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100040001,"comment_content":"那mongo是怎么解决幻读问题的呢？mysql是可重复读解决的记得。","like_count":0}]}