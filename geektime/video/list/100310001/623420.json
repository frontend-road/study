{"id":623420,"title":"89｜理论盘点：任务的并行执行原理","content":"<p><strong>课后习题</strong><br>\n在演示将单进程下载图片应用改为多进程下载图片应用时，我将多进程模型应用到了下载和保存文件两个函数中。请你根据今天所学的内容判断，如果将下载和文件保存两个函数分别放在两个进程池中，能否提高下载效率？请你通过代码实现并观察执行时间是否有变化。</p><p><strong>课程代码、课件及其他相关资料地址</strong><br>\n<a href=\"https://gitee.com/wilsonyin/zero-basics-python\">https://gitee.com/wilsonyin/zero-basics-python</a></p>","comments":[{"had_liked":false,"id":378475,"user_name":"Greenery","can_delete":false,"product_type":"c3","uid":3566765,"ip_address":"新加坡","ucode":"16111129C9EBA2","user_header":"https://static001.geekbang.org/account/avatar/00/36/6c/ad/0a694b50.jpg","comment_is_top":false,"comment_ctime":1690299413,"is_pvip":false,"replies":[{"id":138170,"content":"多线程并不总是能提高性能，使用异步编程模型（例如使用 asyncio）可能是一个更好的选择。我简单列举几种多线程比单线程慢的原因给你做参考：\nGIL（全局解释器锁）：CPython（Python的标准实现）有一个称为全局解释器锁（GIL）的机制，限制了多线程在CPU密集型任务中的并发执行。虽然I&#47;O密集型任务（如文件下载）通常不受GIL的影响，但在某些情况下，GIL可能仍会产生影响。\n\n线程管理开销：创建和管理多个线程会带来一定的开销。如果线程数量太多，这些开销可能会超过并发执行带来的性能提升。\n\n网络带宽限制：如果你的网络带宽已经被单线程下载充分利用，那么增加更多的线程可能不会带来任何提速效果。反而，多线程之间的竞争可能会导致整体速度下降。\n\n服务器限制：有些服务器可能对来自同一客户端的并发连接数量有限制。过多的线程可能会触发这些限制，导致连接被拒绝或速度下降。\n\n磁盘I&#47;O限制：如果下载的文件直接写入磁盘，磁盘的I&#47;O速度可能会成为瓶颈。多线程同时写入可能会增加I&#47;O等待时间。\n\n错误的线程数量选择：选择合适的线程数量是一个复杂的问题，太少或太多的线程都可能不是最优选择。一个通常的做法是基于系统的核心数量和任务类型来选择线程数量。\n\n代码实现问题：如果多线程的实现有同步问题、死锁、资源竞争等，这也可能导致性能下降。","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1691593647,"ip_address":"甘肃","comment_id":378475,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"应该不会快吧，同一张图片的拉取和保存只能是串行的，除非是流水线","like_count":0,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625344,"discussion_content":"多线程并不总是能提高性能，使用异步编程模型（例如使用 asyncio）可能是一个更好的选择。我简单列举几种多线程比单线程慢的原因给你做参考：\nGIL（全局解释器锁）：CPython（Python的标准实现）有一个称为全局解释器锁（GIL）的机制，限制了多线程在CPU密集型任务中的并发执行。虽然I/O密集型任务（如文件下载）通常不受GIL的影响，但在某些情况下，GIL可能仍会产生影响。\n\n线程管理开销：创建和管理多个线程会带来一定的开销。如果线程数量太多，这些开销可能会超过并发执行带来的性能提升。\n\n网络带宽限制：如果你的网络带宽已经被单线程下载充分利用，那么增加更多的线程可能不会带来任何提速效果。反而，多线程之间的竞争可能会导致整体速度下降。\n\n服务器限制：有些服务器可能对来自同一客户端的并发连接数量有限制。过多的线程可能会触发这些限制，导致连接被拒绝或速度下降。\n\n磁盘I/O限制：如果下载的文件直接写入磁盘，磁盘的I/O速度可能会成为瓶颈。多线程同时写入可能会增加I/O等待时间。\n\n错误的线程数量选择：选择合适的线程数量是一个复杂的问题，太少或太多的线程都可能不是最优选择。一个通常的做法是基于系统的核心数量和任务类型来选择线程数量。\n\n代码实现问题：如果多线程的实现有同步问题、死锁、资源竞争等，这也可能导致性能下降。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691593647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"甘肃","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367314,"user_name":"Cy23","can_delete":false,"product_type":"c3","uid":1591293,"ip_address":"辽宁","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1675132928,"is_pvip":false,"replies":[{"id":133875,"content":"单进程池比双进程池运行时间快，这种情况是有可能出现的，首先进程并不像看上去那样，从进程开始到执行结束，一直占用CPU，一旦出现资源不足，操作系统会自动将当前进程的“作案现场”保留下来，切换到其他进程，而当前进程资源满足以后，又要切换回来，因此会出现多进程比单进程慢的情况，甚至有可能出现进程开启的数量越多越慢的场景。我只是列举了一个比较容易出现的情况，这也是程序员比较考验对系统的理解和编程能力的地方","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1675400107,"ip_address":"广东","comment_id":367314,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"通过我编写的程序测试，单进程池比双进程池运行时间快，但是不排除我程序写的有问题，\n1.单进程池，一个图片下载完后，通过result获取返回后才能执行保存，\n2.双进程池，需要下载进程池所有图片都下载返回后，再执行保存，\n3.在我看来双进程池如果下载量过大，会不会造成内存吃紧的情况呢？单进程池就不需要等待所有。\n4.但是我很迷惑，就算是单进程池还是双进程池，都需要等待返回下载后的数据才能继续进行，下一次下载是需要等待前一次下载完成后执行，也就是不管设置多少个工作进程，也就一个能起作用","like_count":0,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601745,"discussion_content":"单进程池比双进程池运行时间快，这种情况是有可能出现的，首先进程并不像看上去那样，从进程开始到执行结束，一直占用CPU，一旦出现资源不足，操作系统会自动将当前进程的“作案现场”保留下来，切换到其他进程，而当前进程资源满足以后，又要切换回来，因此会出现多进程比单进程慢的情况，甚至有可能出现进程开启的数量越多越慢的场景。我只是列举了一个比较容易出现的情况，这也是程序员比较考验对系统的理解和编程能力的地方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675400108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367297,"user_name":"Cy23","can_delete":false,"product_type":"c3","uid":1591293,"ip_address":"辽宁","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1675126159,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"import requests\nfrom concurrent.futures import ProcessPoolExecutor\nimport time\n\ndef download(url):\n    headers = {&quot;User-Agent&quot;: &quot;Mozilla&#47;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#47;537.36 (KHTML, like Gecko) Chrome&#47;54.0.2840.99 Safari&#47;537.36&quot;,&quot;Referer&quot;: &quot;https:&#47;&#47;time.geekbang.org&quot;}\n    response = requests.get(url, headers=headers)\n    return response\n\ndef save(url, response):\n    with open(f&#39;imgs&#47;{url.split(&quot;&#47;&quot;)[-1]}&#39;,&#39;wb&#39;) as f:\n        f.write(response.content) \n\nif __name__ == &#39;__main__&#39;:\n    headers = {&quot;User-Agent&quot;: &quot;Mozilla&#47;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#47;537.36 (KHTML, like Gecko) Chrome&#47;54.0.2840.99 Safari&#47;537.36&quot;,&quot;Referer&quot;: &quot;https:&#47;&#47;time.geekbang.org&quot;}\n    data = {&quot;ids&quot;:[100085301,100063601,100023001,100026901,100008801,100002201,100061901,100053201],&quot;with_first_articles&quot;:False}\n\n    r = requests.post(&#39;https:&#47;&#47;time.geekbang.org&#47;serv&#47;v3&#47;product&#47;infos&#39;,headers=headers, json=data)\n    datas = r.json()\n\n    images = []\n    # 取得头像\n    for d in datas[&quot;data&quot;][&quot;infos&quot;]:\n        images.append(d[&quot;author&quot;][&quot;avatar&quot;])\n\n    # 单进程池\n    start = time.perf_counter()\n    with ProcessPoolExecutor(max_workers=4) as processpool:\n        for i in images:\n            future_download = processpool.submit(download, i)\n            res = future_download.result()\n            future_save = processpool.submit(save, i, res)\n\n    end = time.perf_counter()\n    print(&#39;单进程池程序运行时间为: %s Seconds&#39;%(end-start))\n    \n    # 双进程池\n    start = time.perf_counter()\n    response_dict = {}\n    with ProcessPoolExecutor(max_workers=4) as processpool_download:\n        for i in images:\n            future_download = processpool_download.submit(download, i)\n            response_dict[i] = future_download.result()\n\n    with ProcessPoolExecutor(max_workers=4) as processpool_save:\n        for i, j in response_dict.items():\n            future_save = processpool_save.submit(save, i, j)\n    \n    end = time.perf_counter()\n    print(&#39;双进程池程序运行时间为: %s Seconds&#39;%(end-start))","like_count":2,"discussions":[{"author":{"id":2383299,"avatar":"https://static001.geekbang.org/account/avatar/00/24/5d/c3/b8bb888c.jpg","nickname":"依托答辩","note":"","ucode":"4BE79E8A030813","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633022,"discussion_content":"好厉害哦，大佬能不能分享下你是咋学的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701760990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1591293,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","nickname":"Cy23","note":"","ucode":"8DC561C5151758","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2383299,"avatar":"https://static001.geekbang.org/account/avatar/00/24/5d/c3/b8bb888c.jpg","nickname":"依托答辩","note":"","ucode":"4BE79E8A030813","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633066,"discussion_content":"照猫画虎","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701781951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":633022,"ip_address":"辽宁","group_id":0},"score":633066,"extra":""}]}]},{"had_liked":false,"id":378477,"user_name":"Greenery","can_delete":false,"product_type":"c3","uid":3566765,"ip_address":"新加坡","ucode":"16111129C9EBA2","user_header":"https://static001.geekbang.org/account/avatar/00/36/6c/ad/0a694b50.jpg","comment_is_top":false,"comment_ctime":1690300748,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"我尝试了双线程池是要比单线程池快的：\n# %% 单线程池 导入&amp;定义\ndef fetch_save(url):\n    headers = {\n        &quot;User-Agent&quot;: &quot;Mozilla&#47;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#47;537.36 (KHTML, like Gecko) Chrome&#47;54.0.2840.99 Safari&#47;537.36&quot;,\n        &quot;Referer&quot;: &quot;https:&#47;&#47;time.geekbang.org&quot;}\n    r = requests.get(url, headers=headers)\n    with open(f&#39;img&#47;s_{url.split(&quot;&#47;&quot;)[-1].split(&quot;.&quot;)[0]}.jpg&#39;, &#39;wb&#39;) as f:\n        f.write(r.content)\n\n\n# %% 单线程池 执行\nstart = perf_counter()\nwith ThreadPoolExecutor(max_workers=4) as e:\n    for i in images:\n        e.submit(fetch_save, i)\nprint(f&#39;time latency: {perf_counter() - start}&#39;)  # time latency: 0.36856459999398794\n\n# %% 多线程池 导入&amp;定义\n\nurl2r = {}\n\n\ndef fetch(url):\n    headers = {\n        &quot;User-Agent&quot;: &quot;Mozilla&#47;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#47;537.36 (KHTML, like Gecko) Chrome&#47;54.0.2840.99 Safari&#47;537.36&quot;,\n        &quot;Referer&quot;: &quot;https:&#47;&#47;time.geekbang.org&quot;}\n    url2r[url] = requests.get(url, headers=headers)\n\n\ndef save(url):\n    r = url2r[url]\n    with open(f&#39;img&#47;d_{url.split(&quot;&#47;&quot;)[-1].split(&quot;.&quot;)[0]}.jpg&#39;, &#39;wb&#39;) as f:\n        f.write(r.content)\n\n\n# %% 多线程池 执行\nstart = perf_counter()\nwith ThreadPoolExecutor(max_workers=4) as e:\n    for i in images:\n        e.submit(fetch, i)\nwith ThreadPoolExecutor(max_workers=4) as e:\n    for i in images:\n        e.submit(save, i)\nprint(f&#39;time latency: {perf_counter() - start}&#39;)  # time latency: 0.29097709999768995","like_count":0},{"had_liked":false,"id":378476,"user_name":"Greenery","can_delete":false,"product_type":"c3","uid":3566765,"ip_address":"新加坡","ucode":"16111129C9EBA2","user_header":"https://static001.geekbang.org/account/avatar/00/36/6c/ad/0a694b50.jpg","comment_is_top":false,"comment_ctime":1690300717,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"我尝试了双线程池是要比单线程池快的：\n# %% 单线程池 导入&amp;定义\ndef fetch_save(url):\n    headers = {\n        &quot;User-Agent&quot;: &quot;Mozilla&#47;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#47;537.36 (KHTML, like Gecko) Chrome&#47;54.0.2840.99 Safari&#47;537.36&quot;,\n        &quot;Referer&quot;: &quot;https:&#47;&#47;time.geekbang.org&quot;}\n    r = requests.get(url, headers=headers)\n    with open(f&#39;img&#47;s_{url.split(&quot;&#47;&quot;)[-1].split(&quot;.&quot;)[0]}.jpg&#39;, &#39;wb&#39;) as f:\n        f.write(r.content)\n\n\n# %% 单线程池 执行\nstart = perf_counter()\nwith ThreadPoolExecutor(max_workers=4) as e:\n    for i in images:\n        e.submit(fetch_save, i)\nprint(f&#39;time latency: {perf_counter() - start}&#39;)  # time latency: 0.36856459999398794\n\n# %% 多线程池 导入&amp;定义\n\nurl2r = {}\n\n\ndef fetch(url):\n    headers = {\n        &quot;User-Agent&quot;: &quot;Mozilla&#47;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#47;537.36 (KHTML, like Gecko) Chrome&#47;54.0.2840.99 Safari&#47;537.36&quot;,\n        &quot;Referer&quot;: &quot;https:&#47;&#47;time.geekbang.org&quot;}\n    url2r[url] = requests.get(url, headers=headers)\n\n\ndef save(url):\n    r = url2r[url]\n    with open(f&#39;img&#47;d_{url.split(&quot;&#47;&quot;)[-1].split(&quot;.&quot;)[0]}.jpg&#39;, &#39;wb&#39;) as f:\n        f.write(r.content)\n\n\n# %% 多线程池 执行\nstart = perf_counter()\nwith ThreadPoolExecutor(max_workers=4) as e:\n    for i in images:\n        e.submit(fetch, i)\nwith ThreadPoolExecutor(max_workers=4) as e:\n    for i in images:\n        e.submit(save, i)\nprint(f&#39;time latency: {perf_counter() - start}&#39;)  # time latency: 0.29097709999768995","like_count":0},{"had_liked":false,"id":367843,"user_name":"Francis","can_delete":false,"product_type":"c3","uid":1145834,"ip_address":"上海","ucode":"DC3F69EED29A5D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7b/ea/70bf7e98.jpg","comment_is_top":false,"comment_ctime":1675672390,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"from concurrent.futures import ProcessPoolExecutor\nimport requests\nimport time\ndef download(url):\n    headers = {&quot;User-Agent&quot;: &quot;Mozilla&#47;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#47;537.36 (KHTML, like Gecko) Chrome&#47;54.0.2840.99 Safari&#47;537.36&quot;,&quot;Referer&quot;: &quot;https:&#47;&#47;time.geekbang.org&quot;}\n    response = requests.get(url, headers=headers)\n    return response\ndef save(url, response):\n    with open(f&#39;.&#47;imgs&#47;{url.split(&quot;&#47;&quot;)[-1]}&#39;, &#39;wb&#39;) as f:\n        f.write(response.content)\nif __name__ == &quot;__main__&quot;:\n    headers = {&quot;User-Agent&quot;: &quot;Mozilla&#47;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#47;537.36 (KHTML, like Gecko) Chrome&#47;54.0.2840.99 Safari&#47;537.36&quot;,&quot;Referer&quot;: &quot;https:&#47;&#47;time.geekbang.org&quot;}\n    data = {&quot;ids&quot;:[100085301,100063601,100023001,100026901,100008801,100002201,100061901,100053201],&quot;with_first_articles&quot;:False}\n    r = requests.post(&#39;https:&#47;&#47;time.geekbang.org&#47;serv&#47;v3&#47;product&#47;infos&#39;, headers=headers, json=data)\n    datas = r.json()\n    images = []\n    for d in datas[&quot;data&quot;][&quot;infos&quot;]:\n        print(d[&quot;author&quot;][&quot;avatar&quot;])\n        images.append(d[&quot;author&quot;][&quot;avatar&quot;])\n    \n    # 单进程池\n    start = time.perf_counter()\n    with ProcessPoolExecutor(max_workers=4) as pp:\n        for url in images:\n            image_download = pp.submit(download, url)\n            res = image_download.result\n            image_save = pp.submit(save, url, res)\n    end = time.perf_counter()\n    print(f&#39;单进程池程序运行时间为: {end-start} Seconds&#39;)\n\n    # 双进程池\n    start = time.perf_counter()\n    response_dict = {}\n    with ProcessPoolExecutor(max_workers=4) as pp_double_d:\n        for url in images:\n            image_download = pp_double_d.submit(download, url)\n            response_dict[url] = image_download.result\n    with ProcessPoolExecutor(max_workers=4) as pp_double_s:\n        for url,res in response_dict.items():\n            image_save = pp_double_s.submit(save, url, res)\n    \n    end = time.perf_counter()\n    print(f&#39;双进程池程序运行时间为: {end-start} Seconds&#39;)","like_count":0},{"had_liked":false,"id":366790,"user_name":"Matthew","can_delete":false,"product_type":"c3","uid":2843865,"ip_address":"江苏","ucode":"96093089773740","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKSVuNarJuDhBSvHY0giaq6yriceEBKiaKuc04wCYWOuso50noqDexaPJJibJN7PHwvcQppnzsDia1icZkw/132","comment_is_top":false,"comment_ctime":1674216923,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"如果将下载和文件保存两个函数分别放在两个进程池中，并不能提高效率。","like_count":0},{"had_liked":false,"id":366789,"user_name":"Matthew","can_delete":false,"product_type":"c3","uid":2843865,"ip_address":"江苏","ucode":"96093089773740","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKSVuNarJuDhBSvHY0giaq6yriceEBKiaKuc04wCYWOuso50noqDexaPJJibJN7PHwvcQppnzsDia1icZkw/132","comment_is_top":false,"comment_ctime":1674216890,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"import requests\n# import json\nfrom concurrent.futures import ThreadPoolExecutor\n\n# 下载图片\ndef download(url):\n    headers = {&quot;User-Agent&quot;: &quot;Mozilla&#47;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#47;537.36 (KHTML, like Gecko) Chrome&#47;54.0.2840.99 Safari&#47;537.36&quot;,&quot;Referer&quot;: &quot;https:&#47;&#47;time.geekbang.org&quot;}\n    response = requests.get(url, headers=headers)\n    return response\n\n# 保存图片\ndef save(url, response):\n    with open(f&#39;imgs&#47;{url.split(&quot;&#47;&quot;)[-1]}.jpg&#39;,&#39;wb&#39;) as f:\n        f.write(response.content) \n\n## 测试\nif __name__ == &#39;__main__&#39;:\n    headers = {&quot;User-Agent&quot;: &quot;Mozilla&#47;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#47;537.36 (KHTML, like Gecko) Chrome&#47;54.0.2840.99 Safari&#47;537.36&quot;,&quot;Referer&quot;: &quot;https:&#47;&#47;time.geekbang.org&quot;}\n    data = {&quot;ids&quot;:[100085301,100063601,100023001,100026901,100008801,100002201,100061901,100053201],&quot;with_first_articles&quot;:False}\n\n    r = requests.post(&#39;https:&#47;&#47;time.geekbang.org&#47;serv&#47;v3&#47;product&#47;infos&#39;,headers=headers, json=data)\n    datas = r.json()\n\n    # count = datas[&quot;data&quot;][&quot;infos&quot;][0][&quot;extra&quot;][&quot;sub&quot;][&quot;count&quot;]\n    # print(f&quot;订阅数 {count}&quot;)\n\n    images = []\n    # 取得头像\n    for d in datas[&quot;data&quot;][&quot;infos&quot;]:\n        images.append(d[&quot;author&quot;][&quot;avatar&quot;])\n        print(d[&quot;author&quot;][&quot;avatar&quot;])\n\n    # 创建线程池，下载图片\n    threadPool_download = ThreadPoolExecutor(max_workers=4, thread_name_prefix=&quot;down_&quot;)\n    response_dict = {}\n    for i in images:\n        future_download = threadPool_download.submit(download, i)\n        response_dict[i] = future_download.result()\n        # print(future_download.result().content)\n         \n    threadPool_download.shutdown(wait=True)\n\n\n    # 创建线程池，保存图片\n    threadPool_save = ThreadPoolExecutor(max_workers=4, thread_name_prefix=&quot;save_&quot;)\n    for i, j in response_dict.items():\n        future_save = threadPool_save.submit(save, i, j)\n         \n    threadPool_save.shutdown(wait=True)","like_count":0}]}