{"id":541082,"title":"57｜RESTful Web Services（21）：按照三角法，该如何增加新的测试案例？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><h2>回顾架构愿景与任务列表</h2><p>目前我们已经实现了ResourceRouter，和UriTemplate整体的架构愿景如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/65/bfec2474efc36df7230f839c2bce1f65.jpg?wh=1920x1080\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/a5/d2/a5e7fyy80e85b80a482a8768281df6d2.jpg?wh=8000x4500\" alt=\"\"></p><p>目前的任务列表：</p><ul>\n<li>Resource/RootResource/ResourceMethod\n<ul>\n<li><s>从Path标注中获取UriTemplate</s>\n<ul>\n<li>如不存在Path标注，则抛出异常</li>\n</ul>\n</li>\n<li>在处理请求派分时，可以根据客户端提供的Http方法，选择对应的资源方法\n<ul>\n<li>当请求与资源方法的Uri模版一致，且Http方法一致时，派分到该方法</li>\n<li>没有资源方法于请求的Uri和Http方法一致时，返回404</li>\n</ul>\n</li>\n<li>在处理请求派分时，可以支持多级子资源\n<ul>\n<li>当没有资源方法可以匹配请求时，选择最优匹配SubResourceLocater，通过它继续进行派分</li>\n<li>如果SubResourceLocator也无法找到满足的请求时，返回404</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul><p>代码为：</p><pre><code>class RootResourceClass implements ResourceRouter.RootResource {\n    private PathTemplate uriTemplate;\n    private Class&lt;?&gt; resourceClass;\n    private List&lt;ResourceRouter.ResourceMethod&gt; resourceMethods;\n    public RootResourceClass(Class&lt;?&gt; resourceClass) {\n        this.resourceClass = resourceClass;\n        this.uriTemplate = new PathTemplate(resourceClass.getAnnotation(Path.class).value());\n        this.resourceMethods = Arrays.stream(resourceClass.getMethods()).filter(m -&gt; Arrays.stream(m.getAnnotations())\n                        .anyMatch(a -&gt; a.annotationType().isAnnotationPresent(HttpMethod.class)))\n                .map(m -&gt; (ResourceRouter.ResourceMethod) new DefaultResourceMethod(m)).toList();\n    }\n    @Override\n    public Optional&lt;ResourceRouter.ResourceMethod&gt; match(String path, String method, String[] mediaTypes, UriInfoBuilder builder) {\n        UriTemplate.MatchResult result = uriTemplate.match(path).get();\n        String remaining = result.getRemaining();\n        return resourceMethods.stream().filter(m -&gt; m.getUriTemplate().match(remaining).map(r -&gt; r.getRemaining() == null)\n                .orElse(false)).findFirst();\n    }\n    @Override\n    public UriTemplate getUriTemplate() {\n        return uriTemplate;\n    }\n    static class DefaultResourceMethod implements ResourceRouter.ResourceMethod {\n        private UriTemplate uriTemplate;\n        private Method method;\n        public DefaultResourceMethod(Method method) {\n            this.method = method;\n            this.uriTemplate = new PathTemplate(method.getAnnotation(Path.class).value());\n        }\n        @Override\n        public UriTemplate getUriTemplate() {\n            return uriTemplate;\n        }\n        @Override\n        public GenericEntity&lt;?&gt; call(ResourceContext resourceContext, UriInfoBuilder builder) {\n            return null;\n        }\n        @Override\n        public String toString() {\n            return method.getDeclaringClass().getSimpleName() + &quot;.&quot; + method.getName();\n        }\n    }\n}\n</code></pre><h2>视频演示</h2><p>进入今天的环节：</p><p><video poster=\"https://media001.geekbang.org/5105170389bc43ba8b8688a9ad4c34b3/snapshots/edfd2ffa4b5f4811b78070f5bba21647-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/23b6f621-1820ffe776f-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/ecb39c7a599c4d50a597e1ab6f7f2750/0f474162a98f40ce914502b07ee58abf-6d3d198e06f9b77a3cd699d6e3ff5dc9-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>接下来要重构还是继续完成功能，让坏味道再多一点？</p><!-- [[[read_end]]] -->","neighbors":{"left":{"article_title":"56｜RESTful Web Services（20）：为什么要通过测试的方法来驱动出代码结构？","id":541080},"right":{"article_title":"58｜RESTful Web Services（22）：重构还是继续完成功能？","id":541083}},"comments":[{"had_liked":false,"id":352555,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1658759800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658759800","product_id":100109401,"comment_content":"三角法补充<br>1、使用数据驱动进行测试<br>2、两个测试不可能使用伪实现同时通过","like_count":0}]}