{"id":120160,"title":"39 | 数据库参数设置优化，失之毫厘差之千里","content":"<p>你好，我是刘超。</p><p>MySQL是一个灵活性比较强的数据库系统，提供了很多可配置参数，便于我们根据应用和服务器硬件来做定制化数据库服务。如果现在让你回想，你可能觉得在开发的过程中很少去调整MySQL的配置参数，但我今天想说的是我们很有必要去深入了解它们。</p><p>我们知道，数据库主要是用来存取数据的，而存取数据涉及到了磁盘I/O的读写操作，所以数据库系统主要的性能瓶颈就是I/O读写的瓶颈了。<span class=\"orange\">MySQL数据库为了减少磁盘I/O的读写操作，应用了大量内存管理来优化数据库操作，包括内存优化查询、排序以及写入操作。</span></p><p>也许你会想，我们把内存设置得越大越好，数据刷新到磁盘越快越好，不就对了吗？其实不然，内存设置过大，同样会带来新的问题。例如，InnoDB中的数据和索引缓存，如果设置过大，就会引发SWAP页交换。还有数据写入到磁盘也不是越快越好，我们期望的是在高并发时，数据能均匀地写入到磁盘中，从而避免I/O性能瓶颈。</p><blockquote>\n<p>SWAP页交换：SWAP分区在系统的物理内存不够用的时候，就会把物理内存中的一部分空间释放出来，以供当前运行的程序使用。被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间的数据被临时保存到SWAP分区中，等到那些程序要运行时，再从SWAP分区中恢复保存的数据到内存中。</p>\n</blockquote><!-- [[[read_end]]] --><p>所以，这些参数的设置跟我们的应用服务特性以及服务器硬件有很大的关系。MySQL是一个高定制化的数据库，我们可以根据需求来调整参数，定制性能最优的数据库。</p><p>不过想要了解这些参数的具体作用，我们先得了解数据库的结构以及不同存储引擎的工作原理。</p><h2>MySQL体系结构</h2><p>我们一般可以将MySQL的结构分为四层，最上层为客户端连接器，主要包括了数据库连接、授权认证、安全管理等，该层引用了线程池，为接入的连接请求提高线程处理效率。</p><p>第二层是Server层，主要实现SQL的一些基础功能，包括SQL解析、优化、执行以及缓存等，其中与我们这一讲主要相关的就是缓存。</p><p>第三层包括了各种存储引擎，主要负责数据的存取，这一层涉及到的Buffer缓存，也和这一讲密切相关。</p><p>最下面一层是数据存储层，主要负责将数据存储在文件系统中，并完成与存储引擎的交互。</p><p><img src=\"https://static001.geekbang.org/resource/image/52/a5/5297b9556d527dec788b5298d4810fa5.jpg?wh=1408*1120\" alt=\"\"></p><p>接下来我们再来了解下，当数据接收到一个SQL语句时，是如何处理的。</p><h3>1. 查询语句</h3><p>一个应用服务需要通过第一层的连接和授权认证，再将SQL请求发送至SQL接口。SQL接口接收到请求之后，会先检查查询SQL是否命中Cache缓存中的数据，如果命中，则直接返回缓存中的结果；否则，需要进入解析器。</p><p>解析器主要对SQL进行语法以及词法分析，之后，便会进入到优化器中，优化器会生成多种执行计划方案，并选择最优方案执行。</p><p>确定了最优执行计划方案之后，执行器会检查连接用户是否有该表的执行权限，有则查看Buffer中是否存在该缓存，存在则获取锁，查询表数据；否则重新打开表文件，通过接口调用相应的存储引擎处理，这时存储引擎就会进入到存储文件系统中获取相应的数据，并返回结果集。</p><h3>2. 更新语句</h3><p>数据库更新SQL的执行流程其实跟查询SQL差不多，只不过执行更新操作的时候多了记录日志的步骤。在执行更新操作时MySQL会将操作的日志记录到 binlog（归档日志）中，这个步骤所有的存储引擎都有。而InnoDB除了要记录 binlog 之外，还需要多记录一个  redo log（重做日志）。</p><p>redo log  主要是为了解决  crash-safe  问题而引入的。我们知道，当数据库在存储数据时发生异常重启，我们需要保证存储的数据要么存储成功，要么存储失败，也就是不会出现数据丢失的情况，这就是crash-safe了。</p><p>我们在执行更新操作时，首先会查询相关的数据，之后通过执行器执行更新操作，并将执行结果写入到内存中，同时记录更新操作到redo log的缓存中，此时redo log中的记录状态为prepare，并通知执行器更新完成，随时可以提交事务。执行器收到通知后会执行binlog的写入操作，此时的binlog是记录在缓存中的，写入成功后会调用引擎的提交事务接口，更新记录状态为commit。之后，内存中的redo log以及binlog都会刷新到磁盘文件中。</p><h2>内存调优</h2><p>基于以上两个SQL执行过程，我们可以发现，在执行查询SQL语句时，会涉及到两个缓存。第一个缓存是刚进来时的Query Cache，它缓存的是SQL语句和对应的结果集。这里的缓存是以查询SQL的Hash值为key，返回结果集为value的键值对，判断一条SQL是否命中缓存，是通过匹配查询SQL的Hash值来实现的。</p><p>很明显，Query Cache可以优化查询SQL语句，减少大量工作，特别是减少了I/O读取操作。我们可以通过以下几个主要的设置参数来优化查询操作：</p><p><img src=\"https://static001.geekbang.org/resource/image/db/dd/db97c34b74f0903673badc256ba46cdd.jpg?wh=1240*512\" alt=\"\"></p><p>我们可以通过设置合适的 query_cache_min_res_unit 来减少碎片，这个参数最合适的大小和应用程序查询结果的平均大小直接相关，可以通过以下公式计算所得：</p><p>（query_cache_size - Qcache_free_memory）/  Qcache_queries_in_cache</p><p>Qcache_free_memory  和  Qcache_queries_in_cache  的值可以通过以下命令查询：</p><pre><code>show status like 'Qcache%'\n</code></pre><p>Query Cache虽然可以优化查询操作，但也仅限于不常修改的数据，如果一张表数据经常进行新增、更新和删除操作，则会造成Query Cache的失效率非常高，从而导致频繁地清除Cache中的数据，给系统增加额外的性能开销。</p><p>这也会导致缓存命中率非常低，我们可以通过以上查询状态的命令查看 Qcache_hits，该值表示缓存命中率。如果缓存命中率特别低的话，我们还可以通过query_cache_size = 0或者query_cache_type来关闭查询缓存。</p><p>经过了Query Cache缓存之后，还会使用到存储引擎中的Buffer缓存。不同的存储引擎，使用的Buffer也是不一样的。这里我们主要讲解两种常用的存储引擎。</p><h3>1. MyISAM存储引擎参数设置调优</h3><p>MyISAM存储引擎使用key buffer缓存索引块，MyISAM表的数据块则没有缓存，它是直接存储在磁盘文件中的。</p><p>我们可以通过key_buffer_size设置key buffer缓存的大小，而它的大小并不是越大越好。正如我前面所讲的，key buffer缓存设置过大，实际应用却不大的话，就容易造成内存浪费，而且系统也容易发生SWAP页交换，一般我是建议将服务器内存中可用内存的1/4分配给key buffer。</p><p>如果要更准确地评估key buffer的设置是否合理，我们还可以通过缓存使用率公式来计算：</p><p>1-((key_blocks_unused*key_cache_block_size)/key_buffer_size)</p><blockquote>\n<p>key_blocks_unused表示未使用的缓存簇（blocks）数<br>\nkey_cache_block_size表示key_buffer_size被分割的区域大小key_blocks_unused*key_cache_block_size则表示剩余的可用缓存空间（一般来说，缓存使用率在80%作用比较合适）。</p>\n</blockquote><h3>2. InnoDB存储引擎参数设置调优</h3><p>InnoDB Buffer Pool（简称IBP）是InnoDB存储引擎的一个缓冲池，与MyISAM存储引擎使用key buffer缓存不同，它不仅存储了表索引块，还存储了表数据。查询数据时，IBP允许快速返回频繁访问的数据，而无需访问磁盘文件。InnoDB表空间缓存越多，MySQL访问物理磁盘的频率就越低，这表示查询响应时间更快，系统的整体性能也有所提高。</p><p>我们一般可以通过多个设置参数来调整IBP，优化InnoDB表性能。</p><ul>\n<li><strong>innodb_buffer_pool_size</strong></li>\n</ul><p>IBP默认的内存大小是128M，我们可以通过参数innodb_buffer_pool_size来设置IBP的大小，IBP设置得越大，InnoDB表性能就越好。但是，将IBP大小设置得过大也不好，可能会导致系统发生SWAP页交换。所以我们需要在IBP大小和其它系统服务所需内存大小之间取得平衡。MySQL推荐配置IBP的大小为服务器物理内存的80%。</p><p>我们也可以通过计算InnoDB缓冲池的命中率来调整IBP大小：</p><p>(1-innodb_buffer_pool_reads/innodb_buffer_pool_read_request)*100</p><p>但如果我们将IBP的大小设置为物理内存的80%以后，发现命中率还是很低，此时我们就应该考虑扩充内存来增加IBP的大小。</p><ul>\n<li><strong>innodb_buffer_pool_instances</strong></li>\n</ul><p>InnoDB中的IBP缓冲池被划分为了多个实例，对于具有数千兆字节的缓冲池的系统来说，将缓冲池划分为单独的实例可以减少不同线程读取和写入缓存页面时的争用，从而提高系统的并发性。该参数项仅在将innodb_buffer_pool_size设置为1GB或更大时才会生效。</p><p>在windows 32位操作系统中，如果innodb_buffer_pool_size的大小超过1.3GB，innodb_buffer_pool_instances默认大小就为innodb_buffer_pool_size/128MB；否则，默认为1。</p><p>而在其它操作系统中，如果innodb_buffer_pool_size大小超过1GB，innodb_buffer_pool_instances值就默认为8；否则，默认为1。</p><p>为了获取最佳效率，建议指定innodb_buffer_pool_instances的大小，并保证每个缓冲池实例至少有1GB内存。通常，建议innodb_buffer_pool_instances的大小不超过innodb_read_io_threads + innodb_write_io_threads之和，建议实例和线程数量比例为1:1。</p><ul>\n<li><strong>innodb_read_io_threads</strong> / <strong>innodb_write_io_threads</strong></li>\n</ul><p>在默认情况下，MySQL后台线程包括了主线程、IO线程、锁线程以及监控线程等，其中读写线程属于IO线程，主要负责数据库的读取和写入操作，这些线程分别读取和写入innodb_buffer_pool_instances创建的各个内存页面。MySQL支持配置多个读写线程，即通过innodb_read_io_threads和innodb_write_io_threads设置读写线程数量。</p><p>读写线程数量值默认为4，也就是总共有8个线程同时在后台运行。innodb_read_io_threads和innodb_write_io_threads设置的读写线程数量，与innodb_buffer_pool_instances的大小有关，两者的协同优化是提高系统性能的一个关键因素。</p><p>在一些内存以及CPU内核超大型的数据库服务器上，我们可以在保证足够大的IBP内存的前提下，通过以下公式，协同增加缓存实例数量以及读写线程。</p><p>( innodb_read_io_threads + innodb_write_io_threads ) = innodb_buffe_pool_instances</p><p>如果我们仅仅是将读写线程根据缓存实例数量对半来分，即读线程和写线程各为实例大小的一半，肯定是不合理的。例如我们的应用服务读取数据库的数据多于写入数据库的数据，那么增加写入线程反而没有优化效果。我们一般可以通过MySQL服务器保存的全局统计信息，来确定系统的读取和写入比率。</p><p>我们可以通过以下查询来确定读写比率：</p><pre><code>SHOW GLOBAL STATUS LIKE 'Com_select';//读取数量\n\nSHOW GLOBAL STATUS WHERE Variable_name IN ('Com_insert', 'Com_update', 'Com_replace', 'Com_delete');//写入数量\n</code></pre><p>如果读大于写，我们应该考虑将读线程的数量设置得大一些，写线程数量小一些；否则，反之。</p><ul>\n<li><strong>innodb_log_file_size</strong></li>\n</ul><p>除了以上InnoDB缓存等因素之外，InnoDB的日志缓存大小、日志文件大小以及日志文件持久化到磁盘的策略都影响着InnnoDB的性能。 InnoDB中有一个redo log文件，InnoDB用它来存储服务器处理的每个写请求的重做活动。执行的每个写入查询都会在日志文件中获得重做条目，以便在发生崩溃时可以恢复更改。</p><p>当日志文件大小已经超过我们参数设置的日志文件大小时，InnoDB会自动切换到另外一个日志文件，由于重做日志是一个循环使用的环，在切换时，就需要将新的日志文件脏页的缓存数据刷新到磁盘中（触发检查点）。</p><p>理论上来说，innodb_log_file_size设置得越大，缓冲池中需要的检查点刷新活动就越少，从而节省磁盘I/O。那是不是将这个日志文件设置得越大越好呢？如果日志文件设置得太大，恢复时间就会变长，这样不便于DBA管理。在大多数情况下，我们将日志文件大小设置为1GB就足够了。</p><ul>\n<li><strong>innodb_log_buffer_size</strong></li>\n</ul><p>这个参数决定了InnoDB重做日志缓冲池的大小，默认值为8MB。如果高并发中存在大量的事务，该值设置得太小，就会增加写入磁盘的I/O操作。我们可以通过增大该参数来减少写入磁盘操作，从而提高并发时的事务性能。</p><ul>\n<li><strong>innodb_flush_log_at_trx_commit</strong></li>\n</ul><p>这个参数可以控制重做日志从缓存写入文件刷新到磁盘中的策略，默认值为1。</p><p>当设置该参数为0时，InnoDB每秒种就会触发一次缓存日志写入到文件中并刷新到磁盘的操作，这有可能在数据库崩溃后，丢失1s的数据。</p><p>当设置该参数为 1 时，则表示每次事务的 redo log 都会直接持久化到磁盘中，这样可以保证 MySQL 异常重启之后数据不会丢失。</p><p>当设置该参数为  2  时，每次事务的 redo log 都会直接写入到文件中，再将文件刷新到磁盘。</p><p>在一些对数据安全性要求比较高的场景中，显然该值需要设置为1；而在一些可以容忍数据库崩溃时丢失1s数据的场景中，我们可以将该值设置为0或2，这样可以明显地减少日志同步到磁盘的I/O操作。</p><h2>总结</h2><p>MySQL数据库的参数设置非常多，今天我们仅仅是了解了与内存优化相关的参数设置。除了这些参数设置，我们还有一些常用的提高MySQL并发的相关参数设置，总结如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/be/4c/be83083a261bf1302aca81c122b0ac4c.jpg?wh=1164*634\" alt=\"\"></p><h2>思考题</h2><p>我们知道，InnoDB的IBP的内存大小是有限的，<span class=\"orange\">你知道InnoDB是如何将热点数据留在内存中，淘汰非热点数据的吗？</span></p><p>期待在留言区看到你的答案。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起讨论。</p><p></p>","neighbors":{"left":{"article_title":"38 | 电商系统表设计优化案例分析","id":119070},"right":{"article_title":"40 | 答疑课堂：MySQL中InnoDB的知识点串讲","id":121710}},"comments":[{"had_liked":false,"id":125721,"user_name":"张学磊","can_delete":false,"product_type":"c1","uid":1250029,"ip_address":"","ucode":"F545F384A6F1E1","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotSSnZic41tGkbflx0ogIg3ia6g2muFY1hCgosL2t3icZm7I8Ax1hcv1jNgr6vrZ53dpBuGhaoc6DKg/132","comment_is_top":false,"comment_ctime":1566233013,"is_pvip":false,"replies":[{"id":"46234","content":"对的，MySQL基于LRU算法来实现淘汰非热点数据，但与我们熟悉的LRU算法不同的是，MySQL新增了一个midpoint insertion startegy策略，就是默认情况下，读取到的新页并不是直接放入的LRU列表的首部，而是LRU列表长度的5&#47;8处，目的是为了避免由于一些不常查询SQL偶尔一次查询就把之前热点数据淘汰的情况。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566265855,"ip_address":"","comment_id":125721,"utype":1}],"discussion_count":4,"race_medal":0,"score":"160480022965","product_id":100028001,"comment_content":"通过在内存中维护一个链表，并使用LRU(最近最少使用)算法淘汰非热点数据","like_count":38,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463672,"discussion_content":"对的，MySQL基于LRU算法来实现淘汰非热点数据，但与我们熟悉的LRU算法不同的是，MySQL新增了一个midpoint insertion startegy策略，就是默认情况下，读取到的新页并不是直接放入的LRU列表的首部，而是LRU列表长度的5/8处，目的是为了避免由于一些不常查询SQL偶尔一次查询就把之前热点数据淘汰的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566265855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1320592,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/90/f68608f3.jpg","nickname":"gwl","note":"","ucode":"24F334E9AC0313","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291585,"discussion_content":"哈哈，mysql手册上有说明","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594879130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210699,"avatar":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","nickname":"-W.LI-","note":"","ucode":"3556786538664F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5424,"discussion_content":"链表里面存的是sql的hash么?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566261330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1250029,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotSSnZic41tGkbflx0ogIg3ia6g2muFY1hCgosL2t3icZm7I8Ax1hcv1jNgr6vrZ53dpBuGhaoc6DKg/132","nickname":"张学磊","note":"","ucode":"F545F384A6F1E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1210699,"avatar":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","nickname":"-W.LI-","note":"","ucode":"3556786538664F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5428,"discussion_content":"链表里面存储的是以页(16K)为单位的数据","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566262857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5424,"ip_address":""},"score":5428,"extra":""}]}]},{"had_liked":false,"id":126183,"user_name":"lik","can_delete":false,"product_type":"c1","uid":1103027,"ip_address":"","ucode":"9565C94A9B773A","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/b3/96847546.jpg","comment_is_top":false,"comment_ctime":1566346596,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"134710332772","product_id":100028001,"comment_content":"这个专栏的综合质量真的很高， 不懂为什么订阅量这么少。","like_count":31,"discussions":[{"author":{"id":1132448,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/a0/f12115b7.jpg","nickname":"Sam.张朝","note":"","ucode":"FB20554D94B250","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302861,"discussion_content":"因为看不懂","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1599049890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2388888,"avatar":"https://static001.geekbang.org/account/avatar/00/24/73/98/ec4d22af.jpg","nickname":"阿K","note":"","ucode":"C9E1B6D50135D3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578314,"discussion_content":"都是些概括性的东西，不会的人听不懂，会的不听","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656655465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2532285,"avatar":"","nickname":"Geek_926921","note":"","ucode":"51C3B0178D77E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382603,"discussion_content":"我是看了一眼目录就觉得这个专栏真的不错，然后学习了之后发现确实真的不错，真香","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625644160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350774,"discussion_content":"没优惠券吧..","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614003426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50428,"discussion_content":"从一些示例上来看，老师懂得很多，更重要的是每项技能都很优秀，向老师学习！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573719757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126344,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1566369021,"is_pvip":false,"replies":[{"id":"47075","content":"解释的比我全面，赞","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566614487,"ip_address":"","comment_id":126344,"utype":1}],"discussion_count":1,"race_medal":0,"score":"83170747645","product_id":100028001,"comment_content":"mysql的缓冲池（buffer_pool）使用改进版的lru算法来缓存数据，如果使用传统的lru算法，会存在预读失效和缓冲池污染的问题，为了解决预读失效问题，mysql将lru分为新生代和老生代，为了解决缓冲池污染的问题，引入老生代停留时间窗口，只有大于设置的值，才能加入新生代头部","like_count":19,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463948,"discussion_content":"解释的比我全面，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566614487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187137,"user_name":"Mr.wang","can_delete":false,"product_type":"c1","uid":1224805,"ip_address":"","ucode":"86F341A5316BBC","user_header":"https://static001.geekbang.org/account/avatar/00/12/b0/65/90387745.jpg","comment_is_top":false,"comment_ctime":1584024275,"is_pvip":false,"replies":[{"id":"73035","content":"redo log 是 InnoDB 存储引擎层的日志，主要记录的是该引擎的数据变更记录，有了redo log，当数据库发生宕机重启后，可通过redo log将未落盘的数据恢复，即保证已经提交的事务记录不会丢失。<br><br>而binlog 属于逻辑日志，属于server层的日志，可以记录各个存储引擎的数据变更记录，是事务提交之后的数据变更日志。<br>redo log可以作为异常down机或者介质故障后的数据恢复使用，而binlog可以作为误删数据恢复数据使用， binlog日志还用于主从数据库的数据同步。<br>","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1584534588,"ip_address":"","comment_id":187137,"utype":1}],"discussion_count":1,"race_medal":1,"score":"61713566419","product_id":100028001,"comment_content":"刘老师，您可以详细讲一下redolog和binlog吗，以后他们的使用场景吗？","like_count":14,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487005,"discussion_content":"redo log 是 InnoDB 存储引擎层的日志，主要记录的是该引擎的数据变更记录，有了redo log，当数据库发生宕机重启后，可通过redo log将未落盘的数据恢复，即保证已经提交的事务记录不会丢失。\n\n而binlog 属于逻辑日志，属于server层的日志，可以记录各个存储引擎的数据变更记录，是事务提交之后的数据变更日志。\nredo log可以作为异常down机或者介质故障后的数据恢复使用，而binlog可以作为误删数据恢复数据使用， binlog日志还用于主从数据库的数据同步。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584534588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125960,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566283322,"is_pvip":false,"replies":[{"id":"50392","content":"👍","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567947251,"ip_address":"","comment_id":125960,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53105890874","product_id":100028001,"comment_content":"我来回答一下思考题：<br>InnoDB 的缓存淘汰策略是分代的，分为老年代和新生代，大致是7：3，新数据总是先加入到新生代，如果在一定时间内有被再次查询，才会进入到老年代。老年代和新生代内部都是LRU算法来淘汰缓存页的。","like_count":13,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463767,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567947251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126285,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1566357050,"is_pvip":false,"replies":[{"id":"46833","content":"是的，MySQL8.0版本已经不支持查询缓存，我们文中也提到了其中的弊端。MySQL官方建议使用服务器端使用缓存或ProxySQL作为中间缓存。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566439727,"ip_address":"","comment_id":126285,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23041193530","product_id":100028001,"comment_content":"mysql8.0已经没有用查询缓存了","like_count":5,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463924,"discussion_content":"是的，MySQL8.0版本已经不支持查询缓存，我们文中也提到了其中的弊端。MySQL官方建议使用服务器端使用缓存或ProxySQL作为中间缓存。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566439727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1307497,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f3/69/7039d03f.jpg","nickname":"书策稠浊","note":"","ucode":"A29875CE15FDA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390815,"discussion_content":"文中好像也没说到有啥弊端","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630056330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125888,"user_name":"LW","can_delete":false,"product_type":"c1","uid":1325297,"ip_address":"","ucode":"89820332658E98","user_header":"https://static001.geekbang.org/account/avatar/00/14/38/f1/996a070d.jpg","comment_is_top":false,"comment_ctime":1566268556,"is_pvip":false,"replies":[{"id":"50393","content":"👍","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567947278,"ip_address":"","comment_id":125888,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23041105036","product_id":100028001,"comment_content":"IBP通过LRU链表管理热点数据和淘汰非热点数据，LRU本身分为两大区域，young区域和old区域，热点数据在young区，非热点数据在old区。其实LRU的划分还更细致，young区还划分成几个不同的区域。","like_count":5,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463736,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567947278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125771,"user_name":"超威丶","can_delete":false,"product_type":"c1","uid":1180753,"ip_address":"","ucode":"1A18DE885D3C44","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/51/da465a93.jpg","comment_is_top":false,"comment_ctime":1566259855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23041096335","product_id":100028001,"comment_content":"其实内存分配也是分了新老区，防止大量的历史数据数据的查询占用整个内存，热点数据缓存命中率降低，不止是LRU淘汰这么简单","like_count":5},{"had_liked":false,"id":125813,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1566262042,"is_pvip":false,"replies":[{"id":"50395","content":"有不同的策略，可以实现同步和异步","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567947654,"ip_address":"","comment_id":125813,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14451163930","product_id":100028001,"comment_content":"老师好!问个问题，这些IO操作，是同步阻塞，还是同步非阻塞啊?","like_count":3,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463702,"discussion_content":"有不同的策略，可以实现同步和异步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567947654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211223,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","nickname":"QQ怪","note":"","ucode":"1A39B8433D9208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5485,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566296661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352384,"user_name":"冉","can_delete":false,"product_type":"c1","uid":1136462,"ip_address":"","ucode":"72E88C227C02CD","user_header":"https://static001.geekbang.org/account/avatar/00/11/57/4e/dd45e359.jpg","comment_is_top":false,"comment_ctime":1658630587,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658630587","product_id":100028001,"comment_content":"说实话老师这个专栏的质量确实很高，干货满满，这是我看第二遍，每次看都有收获","like_count":0},{"had_liked":false,"id":270886,"user_name":"惘 闻","can_delete":false,"product_type":"c1","uid":1181650,"ip_address":"","ucode":"C5909F034BF072","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","comment_is_top":false,"comment_ctime":1609312411,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1609312411","product_id":100028001,"comment_content":"innodb_flush_log_at_trx_commit<br>当设置该参数为  2  时，每次事务的 redo log 都会直接写入到文件中，再将文件刷新到磁盘。<br>而在一些可以容忍数据库崩溃时丢失 1s 数据的场景中，我们可以将该值设置为 0 或 2，这样可以明显地减少日志同步到磁盘的 I&#47;O 操作。<br>老师这里设置为二是先写入缓存文件中,然后过段时间再刷入磁盘吗?<br><br><br>","like_count":0,"discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574742,"discussion_content":"2是指写入操作系统Page Cache后直接返回，速度很快。操作系统会定期调用fsync将Page Cache中的内容刷新到磁盘。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654311596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264764,"user_name":"水浴清风","can_delete":false,"product_type":"c1","uid":1133926,"ip_address":"","ucode":"36EF5179E6F952","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/66/28742ad4.jpg","comment_is_top":false,"comment_ctime":1606637266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606637266","product_id":100028001,"comment_content":"在更新操作时，既然已经记录了binlog，为什么还需要redo日志，binlog为什么不能保证crash-safe","like_count":0},{"had_liked":false,"id":229209,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1592923754,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1592923754","product_id":100028001,"comment_content":"老师我想问下当innodb_flush_log_at_trx_commit=2，MySQL异常宕机是会发生丢数据的情况吗","like_count":0,"discussions":[{"author":{"id":1189225,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIlRVTQ1mpTLY34BAje4xRY0PFSJk6J1su2jicrtEQASP3DakQ7lQkWZNADoh8mLibwATLJB9EMrIVQ/132","nickname":"Z","note":"","ucode":"C199B14177A951","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298144,"discussion_content":"数据库宕机不会丢，操作系统宕机会丢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597203204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226296,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1111985,"ip_address":"","ucode":"9DADD72C193296","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","comment_is_top":false,"comment_ctime":1592027892,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592027892","product_id":100028001,"comment_content":"老师，通常，建议 innodb_buffer_pool_instances 的大小不超过 innodb_read_io_threads + innodb_write_io_threads 之和，建议实例和线程数量比例为 1:1。  <br><br>这个建议具体是根据什么来做的判断呢？","like_count":0},{"had_liked":false,"id":226295,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1111985,"ip_address":"","ucode":"9DADD72C193296","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","comment_is_top":false,"comment_ctime":1592027778,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592027778","product_id":100028001,"comment_content":"老师innodb_buffer_pool_instances 的值是指 缓冲池划分后的区域实例的数量吧。而单个区域实例的大小怎么确定哦？ 是innodb_buffer_pool_size &#47; innodb_buffer_pool_instances  的值吗？","like_count":0},{"had_liked":false,"id":226286,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1111985,"ip_address":"","ucode":"9DADD72C193296","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","comment_is_top":false,"comment_ctime":1592022363,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592022363","product_id":100028001,"comment_content":"老师，当Linux系统没有配置SWAP 分区的情况下，mysql应该不会产生SWAP 页交换吧。","like_count":0},{"had_liked":false,"id":206959,"user_name":"达达队长","can_delete":false,"product_type":"c1","uid":1117597,"ip_address":"","ucode":"1C3F2E4F6B7637","user_header":"https://static001.geekbang.org/account/avatar/00/11/0d/9d/58d09086.jpg","comment_is_top":false,"comment_ctime":1586963760,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1586963760","product_id":100028001,"comment_content":"老师：日志文件脏页的缓存数据刷新到磁盘中，脏页数据指的是什么呀？","like_count":0,"discussions":[{"author":{"id":1622022,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJia6zEsh2u119zJicmq7wApvnricZEKiawaZicice1cOzujWdFicFwPtavlHiaVpCNgCpxBtdl7ynd3y0wkQ/132","nickname":"james_xu","note":"","ucode":"12E50291F5BA89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370030,"discussion_content":"当内存数据页跟磁盘数据页内容不一致的时候，我们称这个内存页为“脏页”。内存数据写入到磁盘后，内存和磁盘上的数据页的内容就一致了，称为“干净页”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619257452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133334,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1568519462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568519462","product_id":100028001,"comment_content":"尴尬 MySQL 一直用不过自己到没怎么调整过他的配置参数，本地库没什么问题就是开发使用，生产库基本属于看不见摸不着的状态有专门的DBA来维护，OK，打卡，自己在本地也可以玩一把!","like_count":0},{"had_liked":false,"id":132756,"user_name":"DY","can_delete":false,"product_type":"c1","uid":1459006,"ip_address":"","ucode":"55536A524A99B4","user_header":"https://static001.geekbang.org/account/avatar/00/16/43/3e/960d12cb.jpg","comment_is_top":false,"comment_ctime":1568214113,"is_pvip":false,"replies":[{"id":"51122","content":"这个操作不会引起回表","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568536971,"ip_address":"","comment_id":132756,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1568214113","product_id":100028001,"comment_content":"老师，你好。有个问题请教下。select id from order_detail where order_id between 5000 and 10000；这种sql根据索引查询，为什么当条件是=时不回表，是区间段时就回表。非聚簇索引的叶子结点存放的不是主键吗？怎么索引查询区间段时就回表了","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467108,"discussion_content":"这个操作不会引起回表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568536971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20415,"discussion_content":"你查的就是主键，叶子节点存放的正好就是你的主键，不需要回表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569312476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1459006,"avatar":"https://static001.geekbang.org/account/avatar/00/16/43/3e/960d12cb.jpg","nickname":"DY","note":"","ucode":"55536A524A99B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12751,"discussion_content":"但是执行计划显示的是Using Where","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568568452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130697,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1567513103,"is_pvip":false,"replies":[{"id":"49139","content":"对的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567596391,"ip_address":"","comment_id":130697,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567513103","product_id":100028001,"comment_content":"记得好像是lru算法  新旧比例好像是5比3","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466074,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567596391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126297,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1566358171,"is_pvip":false,"replies":[{"id":"46834","content":"redo log是根据innodb_flush_log_at_trx_commit参数来设置刷新到磁盘的策略。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566440141,"ip_address":"","comment_id":126297,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566358171","product_id":100028001,"comment_content":"老师，redo log和bin log好像不是在更新语句提交事务成功就刷新到磁盘的。","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463930,"discussion_content":"redo log是根据innodb_flush_log_at_trx_commit参数来设置刷新到磁盘的策略。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566440141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}