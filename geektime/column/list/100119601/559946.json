{"id":559946,"title":"04｜JSX：如何理解这种声明式语法糖？","content":"<p>你好，我是宋一玮。上节课我们利用Create React App（CRA）脚手架工具创建了一个React项目，并在项目中部分实现了一个简单的看板应用。在接下来的课程里，我们会把看板应用抽丝剥茧，逐一认识学习项目里涉及到的React概念和API。很自然地，我们这节课会讲到JSX语法和React组件。</p><p>有不少初学者对React的第一印象就是JSX语法，以至于会有这样的误解：</p><ul>\n<li>JSX就是React？</li>\n<li>JSX就是React组件？</li>\n<li>JSX就是另一种HTML？</li>\n<li>JSX既能声明视图，又能混入JS表达式，那是不是可以把所有逻辑都写在JSX里？</li>\n</ul><p>这些误解常会导致开发时遇到各种问题：</p><ul>\n<li>写出连续超百行、甚至近千行的JSX代码，既冗长又难维护；</li>\n<li>在JSX的标签上添加了HTML属性却不生效；</li>\n<li>JSX混入JS表达式后，页面一直报错。</li>\n</ul><p>其实只要<strong>理清了JSX和React组件的关系</strong>，这些问题自然不在话下。</p><p>总的来说，React是一套声明式的、组件化的前端框架。顾名思义，<strong>声明（动词）组件</strong>是React前端开发工作最重要的组成部分。在声明组件的代码中使用了JSX语法，JSX不是HTML，也不是组件的全部。</p><p>接下来，我们就详细展开介绍JSX和React组件。</p><!-- [[[read_end]]] --><h2>JSX是语法糖</h2><p>Web应用日益复杂，其视图中往往包含很多的控制逻辑，比如条件、循环等。以声明式开发视图，就需要把控制逻辑代码也加入到声明语句中去。而这样的代码，就对可读性、可维护性提出了挑战。</p><p>在JSX之前，前端领域有各种视图模版技术，JSP、Struts、Handlebars、Pug等，都在用各自的方法满足这些需求。那么JSX语法与其他声明式模版语法有什么异同？不用JSX可以写React吗？</p><p>我们在这节课开始时提到了React组件，组件是React开发的基本单位。在组件中，需要被渲染的内容是用 <code>React.createElement(component, props, ...children)</code> 声明的，而JSX正是<code>createElement</code>函数的语法糖。浏览器本身不支持JSX，所以在应用发布上线前，<strong>JSX源码需要工具编译成由若干</strong><code>createElement</code><strong>函数组成的JS代码，然后才能在浏览器中正常执行</strong>。至于编译工具，我们在后面的课程会有所涉及。</p><p>例如，上节课看板组件的部分JSX：</p><pre><code>&lt;header className=&quot;App-header&quot;&gt;\n  &lt;h1&gt;我的看板&lt;/h1&gt;\n&lt;/header&gt;\n</code></pre><p>编译成JS就会变成：</p><pre><code>React.createElement(&quot;header&quot;, {className: &quot;App-header&quot;},\n  React.createElement(&quot;h1&quot;, null, &quot;我的看板&quot;)\n);\n</code></pre><p>当然你也可以选择不用JSX，而是自己手写这些JS代码。这样做最显著的好处就是，这部分代码不需要针对JSX做编译，直接可以作用于浏览器。但当元素或者元素的嵌套层级比较多时，JS代码的右括号会越来越多。当你看到成篇的 <code>))))))));</code> 时，你的代码和内心会有一个先崩溃。就算IDE帮忙自动格式化，对应层级缩进，也没法减少括号嵌套的数量。</p><p>也许是因为先入为主，在Web领域，类HTML语法天生就更受欢迎。<strong>JSX提供的类HTML/XML的语法会让声明代码更加直观</strong>，在IDE的支持下，语法高亮更醒目，<strong>比起纯JS也更容易维护</strong>。相比JSX带来的开发效率的提升，编译JSX的成本基本可以忽略不计。</p><p>如果光看JSX中“X”的部分，还不足以让它和其他HTML/XML模版技术区别开来，这里还要强调一下JSX中“JS”的部分。请你回忆一下我们在上节课写的JSX代码，以里面的条件渲染为例：</p><pre><code>  { showAdd &amp;&amp; &lt;KanbanNewCard onSubmit={handleSubmit} /&gt; }\n</code></pre><p>我们来对比一下Java SSH（Spring+Struts2+Hibernate）技术栈里Struts2模版的写法：</p><pre><code>  &lt;s:if test=&quot;showAdd&quot;&gt;\n        &lt;div&gt;KanbanNewCard ...&lt;/div&gt;\n    &lt;/s:if&gt;\n\n</code></pre><p>可以发现两者判断条件的语义是相同的，区别是Struts2用XML定义了一套名为标签库的DSL（Domain-Specific Language，领域特定语言），由标签库提供的 <code>&lt;s:if&gt;&lt;/s:if&gt;</code>做条件渲染；而<strong>JSX则直接利用了JS语句。很明显，JS表达式能做的，JSX都能做，不需要开发者再去学习一套新的DSL</strong>。</p><p>也正是因为JSX作为语法糖足够“甜”，我们才能得到这样的结论：JSX是前端视图领域“最JS”的声明式语法，它为React的推广和流行起了至关重要的作用。</p><h2>前端开发中的声明式与命令式</h2><p>既然刚才提到了声明式（Declarative），就一定要提一下命令式（Imperative）。这两种编程范式的PK存在于软件开发的各个领域。下面的表格呢，从（非）现实世界用例、各领域代表性技术、具体JS语句三个方面，将声明式和命令式做了一个对比。</p><p><img src=\"https://static001.geekbang.org/resource/image/25/2f/250e1722bde8db58da7b49c38b4e902f.jpg?wh=4000x2250\" alt=\"\"></p><p>React是声明式的前端技术，这一点首先就体现在创建组件的视图上，无论是使用JSX语法还是直接利用<code>React.createElement()</code> 函数，都是在<strong>描述开发者期待的视图状态</strong>。开发者只需关心渲染结果，而React框架内部会实现具体的渲染过程，最终调用浏览器DOM API。</p><p>你可能会感兴趣：“除了jQuery，还有其他的前端框架是命令式的吗？”肯定是有的，但很明显，声明式才是主流。目前的三大主流前端框架，React、Vue、Angular都是声明式的。包括Flutter这样的新兴跨端框架也类似，都采用了典型的声明式API，以下是Flutter的官方例子：</p><pre><code>Widget titleSection = Container(\n  padding: const EdgeInsets.all(32),\n  child: Row(\n    children: [\n      Expanded(\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Container(\n              padding: const EdgeInsets.only(bottom: 8),\n              child: const Text('Oeschinen Lake Campground'),\n            ),\n            Text('Kandersteg, Switzerland'),\n          ],\n        ),\n      ),\n      Icon(\n        Icons.star,\n        color: Colors.red[500],\n      ),\n      const Text('41'),\n    ],\n  ),\n);\n</code></pre><p>多少有点眼熟吧。很有意思的是，从2017年开始，每年都有Flutter用户在社区中呼吁引入JSX语法（<a href=\"https://github.com/flutter/flutter/issues/11609\">#11609</a>、<a href=\"https://github.com/flutter/flutter/issues/15922\">#15922</a>、<a href=\"https://github.com/flutter/flutter/issues/70928\">#70928</a>），但这一愿望都没有实现。这又一次彰显了JSX这种语法糖的吸引力。</p><p>理解了JSX是语法糖，其真实身份是声明式的<code>React.createElement()</code> 函数，接下来我们来看看它的具体写法。</p><h2>JSX的写法和常见坑</h2><p>先回到一个简单的问题上，JSX是哪几个单词的缩写？是的，<strong>J</strong>ava<strong>S</strong>cript <strong>X</strong>ML，即在JS语言里加入类XML的语法扩展。这样我们就可以把JSX一分为二：先介绍<strong>X</strong>的部分，即标签的命名规则，支持的元素类型、子元素类型；然后是<strong>JS</strong>的部分，即JSX中都有哪里可以加入JS表达式、规则是什么，进一步回顾上节课的条件渲染和循环渲染表达式。</p><h3>JSX的基本写法</h3><p>请你回顾一下上节课 <code>src/App.js</code>的内容，我们将以<code>App</code> 组件为例，串讲一下JSX的常规写法和写JSX时常踩的坑。为了方便参考，我会在这里贴一部分<code>App</code> 组件的源码。</p><pre><code>function App() {\n  const [showAdd, setShowAdd] = useState(false);\n  const [todoList, setTodoList] = useState([]);\n  const handleAdd = (evt) =&gt; {\n    setShowAdd(true);\n  };\n  const handleSubmit = (title) =&gt; {\n    setTodoList(currentTodoList =&gt; [\n      { title, status: new Date().toDateString() },\n      ...currentTodoList\n    ]);\n    setShowAdd(false);\n  };\n\n return (\n    &lt;div className=&quot;App&quot;&gt;\n      &lt;header className=&quot;App-header&quot;&gt;\n        &lt;h1&gt;我的看板&lt;/h1&gt;\n        &lt;img src={logo} className=&quot;App-logo&quot; alt=&quot;logo&quot; /&gt;\n      &lt;/header&gt;\n      &lt;main className=&quot;kanban-board&quot;&gt;\n        &lt;section className=&quot;kanban-column column-todo&quot;&gt;\n          &lt;h2&gt;待处理&lt;button onClick={handleAdd}\n            disabled={showAdd}&gt;&amp;#8853; 添加新卡片&lt;/button&gt;&lt;/h2&gt;\n          &lt;ul&gt;\n            { showAdd &amp;&amp; &lt;KanbanNewCard onSubmit={handleSubmit} /&gt; }\n            { todoList.map(props =&gt; &lt;KanbanCard {...props} /&gt;) }\n          &lt;/ul&gt;\n        &lt;/section&gt;\n        {/* ...省略 */}\n      &lt;/main&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre><p>虽然在写JSX时并不需要时时惦记着编译出来的<code>React.createElement()</code> 语句，但在学习时还是很有帮助的。我们来看一下JSX各个组成部分与<code>React.createElement()</code> 函数各参数的对应关系，代码如下：</p><pre><code>React.createElement(type)\nReact.createElement(type, props)\nReact.createElement(type, props, ...children)\n</code></pre><p>其中 <code>type</code> 参数是必须的，props可选，当参数数量大于等于3时，可以有一个或多个children。</p><p>以下是一个具体例子：</p><pre><code>   &lt;li className=&quot;kanban-card&quot;&gt;\n&lt;!-- ^^ ^^^^^^^^^ ^^^^^^^^^^^^^\n  type  props-key  props-value                                  --&gt;\n      &lt;div className=&quot;card-title&quot;&gt;{title}&lt;/div&gt;   &lt;!-- children --&gt;\n      &lt;div className=&quot;card-status&quot;&gt;{status}&lt;/div&gt; &lt;!-- ____|    --&gt;\n    &lt;/li&gt;\n</code></pre><p>把children中的一个成员单独来看，也是对应一条<code>createElement()</code> 语句的：</p><pre><code>   &lt;div className=&quot;card-title&quot;&gt;{title}&lt;/div&gt;\n&lt;!-- ^^^ ^^^^^^^^^ ^^^^^^^^^^^^ ^^^^^^^\n   type  props-key props-value   children --&gt;\n</code></pre><p>你可以在这个<a href=\"https://babeljs.io/repl/#?browsers=defaults%2C%20not%20ie%2011%2C%20not%20ie_mob%2011&build=&builtIns=false&corejs=3.21&spec=false&loose=false&code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&timeTravel=false&sourceType=module&lineWrap=true&presets=react&prettier=false&targets=&version=7.18.4&externalPlugins=&assumptions=%7B%7D\">在线Babel编译器</a>中做各种实验。</p><p>这里额外说一个大坑。当<code>App</code> 代码 <code>return</code> 语句返回JSX时，将JSX包在了一对括号 <code>( )</code> 里，这是为了避免踏入JS自动加分号的陷阱。例如：</p><pre><code>function Component() {\n  return \n    &lt;div&gt;{/*假设这行JSX语句很长，为了提升一些代码可读性才特地换行*/}&lt;/div&gt;;\n}\n</code></pre><p>放到编译器里会生成：</p><pre><code>function Component() {\n  return;\n  React.createElement(&quot;div&quot;, null);\n}\n</code></pre><p>整个函数短路了！根本不会执行到<code>React.createElement()</code> 语句。为了修正这个问题，我们需要为JSX加上括号：</p><pre><code>function Component() {\n  return (\n    &lt;div&gt;{/*假设这行JSX语句很长，为了提升一些代码可读性，特地换行*/}&lt;/div&gt;\n  );\n}\n</code></pre><p>再次编译：</p><pre><code>function Component() {\n  return React.createElement(&quot;div&quot;, null);\n}\n</code></pre><p>终于对了。</p><p>你能想象当年我和同事找Bug找了一整天，最后发现只是 <code>(</code> <code>)</code> 两个字符的问题吗？ “一朝被蛇咬，十年怕井绳。”自此，我养成了为JSX最外层加括号的习惯，甚至连单行return都会加上括号。毕竟在改老代码时，单行return有可能会改成多行，留下忘加括号的隐患。</p><h3>命名规则</h3><p>俗话说“无规矩不以成方圆”，学习JSX，就让我们从命名规则开始。</p><p>自定义React组件时，组件本身采用的变量名或者函数名，需要以大写字母开头。</p><pre><code>function MyApp() {\n//_______^\n  return (&lt;div&gt;&lt;/div&gt;);\n}\nconst KanbanCard = () =&gt; (\n//____^\n  &lt;div&gt;&lt;/div&gt;\n);\n</code></pre><p>在JSX中编写标签时，HTML元素名称均为小写字母，自定义组件首字母务必大写。</p><pre><code>   &lt;h1&gt;我的看板&lt;/h1&gt;\n&lt;!-- ^________全小写 --&gt;\n    &lt;img src={logo} className=&quot;App-logo&quot; alt=&quot;logo&quot; /&gt;\n&lt;!-- ^^^______全小写 --&gt;\n    &lt;button onClick={handleAdd} disabled={showAdd}&gt;添加新卡片&lt;/button&gt;\n&lt;!-- ^^^^^^___全小写 --&gt;\n\n\n    &lt;KanbanCard /&gt;\n&lt;!-- ^_____首字母大写 --&gt;\n</code></pre><p>如果你很坚持自定义组件也要全小写，那我鼓励你亲手试一下，比如 <code>&lt;camelCaseComponent /&gt;</code>。在浏览器开发者工具中定位到这个元素，你会发现React把它当成了一个不规范的HTML标签直接丢给了浏览器，而浏览器也不认识它，直接解析成 <code>&lt;camelcasecomponent&gt;&lt;/camelcasecomponent&gt;</code>。这也算是React的一种约定大于配置（Convention Over Configuration）了。</p><p>至于 <code>props</code> 属性名称，在React中使用驼峰命名（camelCase），且区分大小写，比如在 <code>&lt;FileCard filename=\"文件名\" fileName=\"另一个文件名\" /&gt;</code> 中，你可以同时传两个字母相同但大小写不同的属性 ，这与传统的HTML属性不同。</p><h3>JSX元素类型</h3><p>从前面的源码来看，我们在代表组件的函数里，返回了一整段JSX。JSX产生的每个节点都称作React元素，它是React应用的最小单元。React元素有三种基本类型：</p><ol>\n<li>React封装的DOM元素，如 <code>&lt;div&gt;&lt;/div&gt;</code>、 <code>&lt;img /&gt;</code> ，这部分元素会最终被渲染为真实的DOM；</li>\n<li>React组件渲染的元素，如<code>&lt;KanbanCard /&gt;</code> ，这部分元素会调用对应组件的渲染方法；</li>\n<li>React Fragment元素，<code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code> 或者简写成 <code>&lt;&gt;&lt;/&gt;</code>，这一元素没有业务意义，也不会产生额外的DOM，主要用来将多个子元素分组。</li>\n</ol><p>其他还有Portal、Suspense等类型，这节课我们先不展开。</p><p>我们会为JSX元素加入props，不同类型元素的props有所区别。</p><p>React封装的DOM元素将浏览器DOM整体做了一次面向React的标准化，比如在HTML中很容易引起混淆的<code>readonly=\"true\"</code> ，它的W3C标准应该是 <code>readonly=\"readonly\"</code> ，而常被误用的<code>readonly=\"false\"</code> 其实是无用的（谐音梗），在React JSX中就统一为 <code>readOnly={true}</code> 或 <code>readOnly={false}</code> ，更贴近JS的开发习惯。</p><p>至于前面反复出现的 <code>className=\"kanban-card\"</code> ，更多是因为 HTML标签里的<code>class</code> 是JS里的保留字，需要避开。</p><p>React组件渲染的元素，JSX中的props应该与自定义组件定义中的props对应起来；如果没有特别处理，没有对应的props会被忽略掉。这也是开发JSX时偶尔会犯的错误，在组件定义中改了props的属性名，但忘了改对应的JSX元素中的props，导致子组件拿不到属性值。</p><p>至于Fragment元素，没有props。</p><h3>JSX子元素类型</h3><p>JSX元素可以指定子元素。在之后的课程里你会看到很多子组件的概念，这里先留一个印象：<strong>子元素不一定是子组件，子组件一定是子元素</strong>。</p><p>子元素的类型包括：</p><ol>\n<li>字符串，最终会被渲染成HTML标签里的字符串；</li>\n<li>另一段JSX，会嵌套渲染；</li>\n<li>JS表达式，会在渲染过程中执行，并让返回值参与到渲染过程中；</li>\n<li>布尔值、null值、undefined值，不会被渲染出来；</li>\n<li>以上各种类型组成的数组。</li>\n</ol><h3>JSX中的JS表达式</h3><p>在JSX中可以插入JS表达式，特征是用大括号 <code>{ }</code> 包起来，主要有两个地方：</p><ol>\n<li>作为props值，如 <code>&lt;button disabled={showAdd}&gt;添加新卡片&lt;/button&gt;</code>；</li>\n<li>作为JSX元素的子元素，如 <code>&lt;div className=\"card-title\"&gt;{title}&lt;/div&gt;</code>。</li>\n</ol><p>这些表达式可以简单到原始数据类型 <code>{true}</code> 、<code>{123}</code> ，也可以复杂到一大串Lambda组成的函数表达式 <code>{ todoList.filter(card =&gt; card.title.startsWith('TODO:')).map(props =&gt; &lt;KanbanCard {...props} /&gt;) }</code> ，只要确保最终的返回值符合props值或者JSX子元素的要求，就是有效的表达式。</p><p>前面也讲到，<strong>JSX是声明式的，所以它的内部不应该出现命令式的语句</strong>，如 <code>if ... else ...</code>。当你拿不准自己写到JSX <code>{ }</code> 里的代码到底是不是表达式，可以试着把这部分代码直接赋值给一个JS变量。如果这个赋值能成功，说明它确实是表达式；如果赋值不成功，可以从如下四个方面进行检查：</p><ul>\n<li>是否有语法错误；</li>\n<li>是否使用了<code>for...of</code>的声明式变体<code>array.forEach</code> ，这个中招几率比较高；</li>\n<li>是否没有返回值；</li>\n<li>是否有返回值，但不符合props或者子元素的要求。</li>\n</ul><p>另外有个props表达式的特殊用法：属性展开， <code>&lt;KanbanCard {...props} /&gt;</code> 利用JS <code>...</code> 语法把 <code>props</code> 这个对象中的所有属性都传给 <code>KanbanCard</code> 组件。</p><p>对了，如果你想在JSX里加注释，会发现HTML注释 <code>&lt;!-- --&gt;</code>根本没法通过编译，这时需要改用 <code>{/* */}</code> 来加注释，编译时它会被识别成JS注释然后抛弃掉。</p><h3>回顾条件渲染和循环渲染</h3><p>有了上面的知识，我请你再回顾一下上节课中的条件渲染和循环渲染：</p><pre><code>{ showAdd &amp;&amp; &lt;KanbanNewCard onSubmit={handleSubmit} /&gt; }\n\n</code></pre><p>上面是一个典型的条件表达式，如果<code>showAdd</code> 为 <code>true</code> 时，会返回后面的JSX，渲染《新建看板卡片》组件；否则会返回 <code>showAdd</code> 的值，即 <code>false</code> 。根据子元素类型中描述的，<code>false</code> 值并不会被渲染出来，《新建看板卡片》组件就不会被渲染了。</p><pre><code>{ todoList.map(props =&gt; &lt;KanbanCard {...props} /&gt;) }\n</code></pre><p>上面是一个典型的数组转换表达式。当 <code>todoList</code> 为空数组时，表达式返回一个新的空数组，不会渲染出来；而当<code>todoList</code> 包含1个或更多个项目时，会返回一个JSX的数组，相当于：</p><pre><code>{[\n  &lt;KanbanCard title=&quot;开发任务-1&quot; status=&quot;22-05-22 18:15&quot; /&gt;,\n  &lt;KanbanCard title=&quot;开发任务-2&quot; status=&quot;22-05-22 18:15&quot; /&gt;\n]}\n</code></pre><h2>JSX与React组件的关系</h2><p>你终于忍不住问出这个问题：“前面课里反复提到React组件，为啥一个普普通通的<code>function App() {}</code> 函数就成组件了？”</p><p>这是个好问题！</p><p>鲁迅笔下的名人孔乙己曾说过“回字有四样写法”，巧了，React组件也是。React组件最初不是这么精简的。目前React的版本是v18，7年前的2015年React发布了两个大版本v0.13和v0.14（你可以理解成v13和v14），当时React组件的主流写法是：</p><pre><code>const KanbanCard = React.createClass({\n  render: function() {\n    return (&lt;div&gt;KanbanCard ...&lt;/div&gt;);\n  }\n});\n</code></pre><p>FB官方在v0.13中开始推广<a href=\"https://zh-hans.reactjs.org/blog/2015/01/27/react-v0.13.0-beta-1.html#plain-javascript-classes\">ES6 class</a>的写法：</p><pre><code>class KanbanCard extends React.Component {\n  render() {\n    return (&lt;div&gt;KanbanCard {this.props.title}&lt;/div&gt;);\n  }\n}\n</code></pre><p>用这两种方式<strong>定义组件时，最核心的就是实现</strong> <code>render()</code> <strong>方法。</strong><code>render()</code> 方法的<strong>返回值可以是一段JSX（或对应的React元素）、原始数据类型</strong>（注：该方法在React v18以前的版本不可以返回<code>undefined</code>，否则会报错） 、<strong>其他React数据类型或者是这几种类型的数组</strong>。</p><p>除了<code>render()</code> 方法，这两种写法还能加入其他属性和方法，完整实现React组件具有的状态管理、生命周期、事件处理等功能，这些功能我们放在后续的课程里，在这里暂时不展开。所以说JSX只是React组件的一部分，这就澄清了“JSX就是React组件”这个误解。</p><p>除了前面两种写法，在v0.14，React新加入了一种更为简化的<strong>无状态函数组件</strong>（<a href=\"https://zh-hans.reactjs.org/blog/2015/10/07/react-v0.14.html#stateless-function-components\">Stateless Function Component</a>）：</p><pre><code>// ES6箭头函数\nconst KanbanCard = (props) =&gt; {\n  var title = props.title;\n  return (&lt;div&gt;KanbanCard {title}&lt;/div&gt;);\n};\n  \n// 更简单的箭头函数+参数解构\nconst KanbanCard = ({title}) =&gt; (\n  &lt;div&gt;KanbanCard {title}&lt;/div&gt;\n);\n</code></pre><p>函数的参数就是props，<strong>函数的返回值与前面两种写法中</strong><code>render()</code><strong>方法的返回值相同</strong>。这种函数组件在React Hooks尚未发布时，还不能自己处理state状态，需要在它的父组件提供状态，并通过props传递给它。虽然函数组件功能受限，但它贵在简单，受到了开发者的广泛欢迎。以至于开源社区开发了各种支持库，用诸如高阶组件的方式补足函数组件缺失的功能。</p><p>当时最出名的库莫过于<a href=\"https://github.com/acdlite/recompose\">recompose</a>，举个简单的例子：</p><pre><code>import { withState } from 'recompose';\n\nconst enhance = withState('showAdd', 'setShowAdd', false);\nconst KanbanColumn = enhance(({ showAdd, setShowAdd }) =&gt; (\n  &lt;section className=&quot;kanban-column column-todo&quot;&gt;\n    &lt;h2&gt;\n      待处理\n      &lt;button onClick={() =&gt; setShowAdd(true)}&gt;添加新卡片&lt;/button&gt;\n    &lt;/h2&gt;\n    &lt;ul&gt;\n      { showAdd &amp;&amp; &lt;KanbanNewCard /&gt; }\n    &lt;/ul&gt;\n  &lt;/section&gt;\n));\n</code></pre><p>其中可以看到 <code>KanbanColumn</code> 组件的主体是 <code>enhance</code> 参数的箭头函数组件。前面 <code>recompose</code> 的<code>withState(stateName, stateUpdaterName, initialState)</code> 函数会创建一个单一功能的高阶组件（高阶组件后面课程会讲到），它会创建名为 <code>showAdd</code> 的state，并通过props传递给作为子组件的函数组件，父子组件结合在一起，形成一个功能完整的React组件。顺便一提，后来recompose的作者还加入了React官方开发组。</p><p>到了React v16.8，Hooks正式发布，函数组件取代类组件成为了React组件的C位。题外话，对于React函数组件的流行，我在当年是有点意外的。我本人是ES6 class的死忠粉，但后来先后上手了recompose和官方的Hooks，真香。</p><p>当然，介绍这段历史并不是为了吃瓜，最重要的还是回答你刚才的问题“为啥一个普普通通的函数就成组件了” 。</p><p>简单总结一下，函数组件上位的原因包括：</p><ul>\n<li>React的哲学 <code>UI=f(state)</code> ；</li>\n<li>更彻底的关注点分离（Separation Of Concerns）；</li>\n<li>函数式编程的影响；</li>\n<li>React内部实现的不断优化；</li>\n<li>开源社区的反哺。</li>\n</ul><h2>小结</h2><p>这节课我们学习了JSX的概念和写法，同时也引出了React声明式的特性，也初步聊了一下React组件。</p><p>这时我相信你已经不会再有这节课开头的误解了：</p><ul>\n<li>\n<p>JSX就是React？</p>\n<ul>\n<li>不是。JSX只是React其中一个API，<code>createElement</code> 函数的语法糖。</li>\n</ul>\n</li>\n<li>\n<p>JSX就是React组件？</p>\n<ul>\n<li>不是。JSX是React组件渲染方法返回值的一部分，React组件还有其他的功能。</li>\n</ul>\n</li>\n<li>\n<p>JSX就是另一种HTML？</p>\n<ul>\n<li>不是。JSX本质还是JS，只是在最终渲染时才创建修改DOM。</li>\n</ul>\n</li>\n<li>\n<p>JSX既能声明视图，又能混入JS表达式，那是不是可以把所有逻辑都写在JSX里？</p>\n<ul>\n<li>可以是可以，但毕竟不能在JSX里使用命令式语句，能做的事情很有限。</li>\n</ul>\n</li>\n</ul><p>运用好JSX，可以很大程度提高你的React开发效率和效果。</p><p>下一讲，我们将趁热打铁，继续探讨React组件，从比React元素颗粒度更大的层面，认识React渲染的机制。同时也学习如何从业务和技术两方面入手，将一份原始的需求拆解为若干React组件。</p><h2>思考题</h2><p>这一讲中间举过一个Flutter的例子，提到用户希望将JSX语法引入Flutter。想请你按这个思路思考如下两个问题：</p><ol>\n<li>JSX一定得是React吗？React以外的技术能不能使用JSX？</li>\n<li>JSX一定得生成HTML吗？可以用JSX生成其他模版吗？</li>\n</ol><p>欢迎把你的想法分享在留言区，我会和你交流。相信经过你的深度思考，学习效果会更好！我们下节课再见！</p>","comments":[{"had_liked":false,"id":356350,"user_name":"Geek_fcdf7b","can_delete":false,"product_type":"c1","uid":2115742,"ip_address":"北京","ucode":"55A2DBA5C6DF79","user_header":"https://static001.geekbang.org/account/avatar/00/20/48/9e/9bbaa97d.jpg","comment_is_top":false,"comment_ctime":1662187620,"is_pvip":false,"replies":[{"id":129835,"content":"你好，Geek_fcdf7b，感谢你的指正。你说得对，React从17开始已经启用全新的JSX运行时来替代React.createElement。对这个变化，我的印象还停留在当时一个预发布版本的可选功能，就疏忽了。\n\n在React 17版本，新JSX运行时的具体更新日志可参考：  https:&#47;&#47;zh-hans.reactjs.org&#47;blog&#47;2020&#47;09&#47;22&#47;introducing-the-new-jsx-transform.html ；\n\n引入新JSX运行时的动机主要是因为原有的React.createElement是为了类组件设计的，而目前函数组件已然成为主流，老接口限制了进一步的优化，具体可以参考官方的征求意见贴： https:&#47;&#47;github.com&#47;reactjs&#47;rfcs&#47;pull&#47;107\n\n我在oh-my-kanban项目里验证了一下，确实在开发模式下JSX被编译成了react&#47;jsx-dev-runtime下的jsxDEV，在生产模式下则被编译成了react&#47;jsx-runtime下的jsx或jsxs（目前同jsx）。\n\nvar KanbanCard = function KanbanCard(_ref) {\n  var title = _ref.title,\n    status = _ref.status;\n  return &#47;*#__PURE__*&#47; (0, jsx_runtime.jsxs)(&quot;li&quot;, {\n    className: &quot;kanban-card&quot;,\n    children: [\n      &#47;*#__PURE__*&#47; (0, jsx_runtime.jsx)(&quot;div&quot;, {\n        className: &quot;card-title&quot;,\n        children: title,\n      }),\n      &#47;*#__PURE__*&#47; (0, jsx_runtime.jsx)(&quot;div&quot;, {\n        className: &quot;card-status&quot;,\n        children: status,\n      }),\n    ],\n  });\n};\n\n从编译结果看，与React.createElement在children的处理上是不同，jsx的children直接就是props的一部分。\n\nJSX的语法没有改变，返回值也都是React元素，代码编译器对开发者隐藏了新旧API的差异。从学习理解JSX的角度，影响不大。大家可以先按照目前的文稿来学习，我后续写完新稿后会回来更新文稿。\n\n再次感谢Geek_fcdf7b！","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662538767,"ip_address":"北京","comment_id":356350,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"首先，感谢老师对于评论区的每个问题几乎都在回复，从评论中也学到了很多东西。然后，请教一下，V17之后，JSX好像不一定是编译成React.createElement了吧，好像有个react&#47;jsx-runtime","like_count":16,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586848,"discussion_content":"你好，Geek_fcdf7b，感谢你的指正。你说得对，React从17开始已经启用全新的JSX运行时来替代React.createElement。对这个变化，我的印象还停留在当时一个预发布版本的可选功能，就疏忽了。\n\n在React 17版本，新JSX运行时的具体更新日志可参考：  https://zh-hans.reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html ；\n\n引入新JSX运行时的动机主要是因为原有的React.createElement是为了类组件设计的，而目前函数组件已然成为主流，老接口限制了进一步的优化，具体可以参考官方的征求意见贴： https://github.com/reactjs/rfcs/pull/107\n\n我在oh-my-kanban项目里验证了一下，确实在开发模式下JSX被编译成了react/jsx-dev-runtime下的jsxDEV，在生产模式下则被编译成了react/jsx-runtime下的jsx或jsxs（目前同jsx）。\n\nvar KanbanCard = function KanbanCard(_ref) {\n  var title = _ref.title,\n    status = _ref.status;\n  return /*#__PURE__*/ (0, jsx_runtime.jsxs)(&#34;li&#34;, {\n    className: &#34;kanban-card&#34;,\n    children: [\n      /*#__PURE__*/ (0, jsx_runtime.jsx)(&#34;div&#34;, {\n        className: &#34;card-title&#34;,\n        children: title,\n      }),\n      /*#__PURE__*/ (0, jsx_runtime.jsx)(&#34;div&#34;, {\n        className: &#34;card-status&#34;,\n        children: status,\n      }),\n    ],\n  });\n};\n\n从编译结果看，与React.createElement在children的处理上是不同，jsx的children直接就是props的一部分。\n\nJSX的语法没有改变，返回值也都是React元素，代码编译器对开发者隐藏了新旧API的差异。从学习理解JSX的角度，影响不大。大家可以先按照目前的文稿来学习，我后续写完新稿后会回来更新文稿。\n\n再次感谢Geek_fcdf7b！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662538768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356062,"user_name":"ZENG","can_delete":false,"product_type":"c1","uid":1136797,"ip_address":"北京","ucode":"4F9A006DA78074","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/9d/91d795cf.jpg","comment_is_top":false,"comment_ctime":1661941357,"is_pvip":false,"replies":[{"id":129651,"content":"你好，coder，很棒的答案！正如你提到的，诸如Vue和Solid.js这些JS框架也都加入了JSX特性。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662046947,"ip_address":"北京","comment_id":356062,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"1. JSX 是函数的语法糖，那 JS 相关框架函数都能实现 JSX\n2. 函数的原理就是输入什么会得到一个确定的结果返回，理论上就可以输出成其他需要的结果\n","like_count":8,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586228,"discussion_content":"你好，coder，很棒的答案！正如你提到的，诸如Vue和Solid.js这些JS框架也都加入了JSX特性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662046947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355904,"user_name":"null","can_delete":false,"product_type":"c1","uid":1707648,"ip_address":"北京","ucode":"349D599741AB88","user_header":"https://static001.geekbang.org/account/avatar/00/1a/0e/80/f8f91bae.jpg","comment_is_top":false,"comment_ctime":1661844710,"is_pvip":false,"replies":[{"id":129568,"content":"你好，万千观众之一，多谢你的评论，希望你有所收获。当然，如果发现后面课程内容过于干以至于不好消化的话，请务必告诉我，我会尽量调整。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1661919230,"ip_address":"北京","comment_id":355904,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"这一节课下来干货好多哇","like_count":4,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585957,"discussion_content":"你好，万千观众之一，多谢你的评论，希望你有所收获。当然，如果发现后面课程内容过于干以至于不好消化的话，请务必告诉我，我会尽量调整。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661919230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355998,"user_name":"东方奇骥","can_delete":false,"product_type":"c1","uid":1354850,"ip_address":"北京","ucode":"DEE7085F7E55A4","user_header":"https://static001.geekbang.org/account/avatar/00/14/ac/62/37912d51.jpg","comment_is_top":false,"comment_ctime":1661911458,"is_pvip":false,"replies":[{"id":129650,"content":"你好，东方奇骥，很棒的答案！你说得对，createElement也可以生成别的，比如React Native中的移动端原生组件。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662046767,"ip_address":"北京","comment_id":355998,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"1. JSX 一定得是 React 吗？React 以外的技术能不能使用 JSX？\n答：不一定。JSX 并不是一个新的模板语言，可以认为是一个语法糖。比如Vue也有JSX。\n\n2. JSX 一定得生成 HTML 吗？可以用 JSX 生成其他模版吗？\n答：课程中讲到，本质上来说，JSX可以认为是一个语法糖，最终还是调用React.createElement. 所以理解重写一个createElement也可能生成别的，不一定是HTML。","like_count":3,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586227,"discussion_content":"你好，东方奇骥，很棒的答案！你说得对，createElement也可以生成别的，比如React Native中的移动端原生组件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662046767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355993,"user_name":"心叶","can_delete":false,"product_type":"c1","uid":2011352,"ip_address":"北京","ucode":"D4D38D48D34F01","user_header":"https://static001.geekbang.org/account/avatar/00/1e/b0/d8/1425514b.jpg","comment_is_top":false,"comment_ctime":1661910847,"is_pvip":false,"replies":[{"id":129569,"content":"你好，心叶，你提到的JSX的官方文档 https:&#47;&#47;facebook.github.io&#47;jsx&#47; 确实是最权威的也是最精炼的，不过它是以web规范的格式写作的，初学时读起来可能会有些费力。其他同学在基本掌握JSX后，感兴趣的话也可以回来读一下这篇文档，一定会发现它的妙处。\n\n另外你提到了ES4，真是闻者伤心听者流泪，业界最贴近ES4规范的实现是Adobe Flash中的ActionScript 3语言，随着Flash技术的覆灭，ECMA毅然抛弃了ES4，转而发布了ES5，之后也成为了各浏览器JS标准化的基石。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1661920185,"ip_address":"北京","comment_id":355993,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"讲到jsx，为什么不直接拿出官方文档呢？\n\nhttps:&#47;&#47;facebook.github.io&#47;jsx&#47;\n\n从文档你可以知道：\njsx不是react的api，虽然是react团队搞出来的\n他的灵感是es4里面的e4x，但原本的e4x因为涉及到语法和语义的定义，实现过于复杂所以被弃用。\njsx的目标是供预处理器使用，将其转换成es","like_count":3,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585961,"discussion_content":"你好，心叶，你提到的JSX的官方文档 https://facebook.github.io/jsx/ 确实是最权威的也是最精炼的，不过它是以web规范的格式写作的，初学时读起来可能会有些费力。其他同学在基本掌握JSX后，感兴趣的话也可以回来读一下这篇文档，一定会发现它的妙处。\n\n另外你提到了ES4，真是闻者伤心听者流泪，业界最贴近ES4规范的实现是Adobe Flash中的ActionScript 3语言，随着Flash技术的覆灭，ECMA毅然抛弃了ES4，转而发布了ES5，之后也成为了各浏览器JS标准化的基石。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661920185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356184,"user_name":"学习前端-react","can_delete":false,"product_type":"c1","uid":1331001,"ip_address":"北京","ucode":"6C873AF98F3498","user_header":"https://static001.geekbang.org/account/avatar/00/14/4f/39/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1662028483,"is_pvip":false,"replies":[{"id":129658,"content":"你好，Geek_8aba0d，函数式编程是声明式的一种，但声明式还有其他编程范式；JSX是一种声明式，但声明式还有其他模版技术。在前端领域，我们提到声明式时，对应的另一边主要还是命令式。在我看来Vue的v-if、v-for，与Angular里*ngIf、*ngFor，都不能算作是命令式，所以它们也是声明式的。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662050156,"ip_address":"北京","comment_id":356184,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"请问：如上我们理解的声明式在编程上便是函数式编程，在jsx上便是 三目运算符 和 Function map，所有在vue的模板里，v-if v-for 是不是不太声明式？","like_count":2,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586235,"discussion_content":"你好，Geek_8aba0d，函数式编程是声明式的一种，但声明式还有其他编程范式；JSX是一种声明式，但声明式还有其他模版技术。在前端领域，我们提到声明式时，对应的另一边主要还是命令式。在我看来Vue的v-if、v-for，与Angular里*ngIf、*ngFor，都不能算作是命令式，所以它们也是声明式的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662050156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356183,"user_name":"学习前端-react","can_delete":false,"product_type":"c1","uid":1331001,"ip_address":"北京","ucode":"6C873AF98F3498","user_header":"https://static001.geekbang.org/account/avatar/00/14/4f/39/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1662028302,"is_pvip":false,"replies":[{"id":129659,"content":"你好，Geek_8aba0d，很好的答案。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662050252,"ip_address":"北京","comment_id":356183,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"JSX 一定得是 React 吗？React 以外的技术能不能使用 JSX？\n 不是 这是一个dsl ，其他语言只要实现其底层，便可使用其上层的jsx\nJSX 一定得生成 HTML 吗？可以用 JSX 生成其他模版吗？\n如上。","like_count":1,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586236,"discussion_content":"你好，Geek_8aba0d，很好的答案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662050252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356135,"user_name":"阿阳","can_delete":false,"product_type":"c1","uid":1165817,"ip_address":"北京","ucode":"20A35FB86B1C5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/c9/f9/39492855.jpg","comment_is_top":false,"comment_ctime":1662002608,"is_pvip":false,"replies":[{"id":129656,"content":"我印象中Vue是从2版本加入了JSX特性，与它原有的template有一定替代关系，需要开发者做一些思路上的转换。不过在底层，正如你提到的，两者都会编译成Vue的渲染函数。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662048082,"ip_address":"北京","comment_id":356135,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"最近在vue项目中引入了jsx，在自定义组件的时候，恰好踩到了这节课说的几个坑。帮助很大。\njsx应该不是react独有的，它只是个语法糖，它可以被编译为任意的其他渲染函数。","like_count":1,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586233,"discussion_content":"我印象中Vue是从2版本加入了JSX特性，与它原有的template有一定替代关系，需要开发者做一些思路上的转换。不过在底层，正如你提到的，两者都会编译成Vue的渲染函数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662048082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355971,"user_name":"杨永安","can_delete":false,"product_type":"c1","uid":1218183,"ip_address":"北京","ucode":"D23013C30D435B","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/87/bbdeb4ee.jpg","comment_is_top":false,"comment_ctime":1661879983,"is_pvip":false,"replies":[{"id":129552,"content":"每周二四六更新哈，还在更新中","user_name":"编辑回复","user_name_real":"编辑","uid":2189689,"ctime":1661909941,"ip_address":"北京","comment_id":355971,"utype":2}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"jsx本质是一个返回格式为json的node节点描述信息。可以用在跨端跨平台的用途，比如拿到json作为render蓝本的时候，最后的render会根据宿主环境对应调用相应API。\n\n\n话说这课没有了吗？","like_count":1,"discussions":[{"author":{"id":2189689,"avatar":"https://static001.geekbang.org/account/avatar/00/21/69/79/b4132042.jpg","nickname":"🐑","note":"","ucode":"DE34B3B14287D1","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585920,"discussion_content":"每周二四六更新哈，还在更新中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661909941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":2,"child_discussions":[{"author":{"id":1218183,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/87/bbdeb4ee.jpg","nickname":"杨永安","note":"","ucode":"D23013C30D435B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2189689,"avatar":"https://static001.geekbang.org/account/avatar/00/21/69/79/b4132042.jpg","nickname":"🐑","note":"","ucode":"DE34B3B14287D1","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":585922,"discussion_content":"看到了~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1661909973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":585920,"ip_address":"北京","group_id":0},"score":585922,"extra":""},{"author":{"id":1218183,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/87/bbdeb4ee.jpg","nickname":"杨永安","note":"","ucode":"D23013C30D435B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2189689,"avatar":"https://static001.geekbang.org/account/avatar/00/21/69/79/b4132042.jpg","nickname":"🐑","note":"","ucode":"DE34B3B14287D1","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":626429,"discussion_content":"一年前了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692897859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":585920,"ip_address":"北京","group_id":0},"score":626429,"extra":""}]},{"author":{"id":1218183,"avatar":"https://static001.geekbang.org/account/avatar/00/12/96/87/bbdeb4ee.jpg","nickname":"杨永安","note":"","ucode":"D23013C30D435B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626430,"discussion_content":"没想到 一年前我在看这个课","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692897882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355951,"user_name":"Hello,Tomrrow","can_delete":false,"product_type":"c1","uid":1351769,"ip_address":"北京","ucode":"F9407C1C91B157","user_header":"https://static001.geekbang.org/account/avatar/00/14/a0/59/86073794.jpg","comment_is_top":false,"comment_ctime":1661866400,"is_pvip":false,"replies":[{"id":129562,"content":"你好，Hello, Tomrrow，很高兴看到你坚持打卡。你说得对，二者互相成就。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1661915209,"ip_address":"北京","comment_id":355951,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100119601,"comment_content":"JSX 不是在 React 中发明的，二者的关系更像是相互成就。\n\n","like_count":1,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585942,"discussion_content":"你好，Hello, Tomrrow，很高兴看到你坚持打卡。你说得对，二者互相成就。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661915209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355884,"user_name":"即将暴富的木杉","can_delete":false,"product_type":"c1","uid":2818551,"ip_address":"北京","ucode":"EC23AB5FFCD5F7","user_header":"https://static001.geekbang.org/account/avatar/00/2b/01/f7/75eb754f.jpg","comment_is_top":false,"comment_ctime":1661828808,"is_pvip":false,"replies":[{"id":129649,"content":"你好，即将暴富的木杉，Vue的template严格来说不是JSX，它虽然也是被编译成渲染函数，但编译过程，尤其是v-if、v-for这样的指令，与JSX语句是不同的；JSX是Vue的可选特性，它离渲染函数更近，也更“JS”。据我所知，Vue的同一个组件中不能混用&lt;template&gt;和JSX。\n\n以下是摘自Vue的官方文档：\n\n&lt;ul&gt;\n  &lt;li v-for=&quot;{ id, text } in items&quot; :key=&quot;id&quot;&gt;\n    {{ text }}\n  &lt;&#47;li&gt;\n&lt;&#47;ul&gt;\n等价于使用如下渲染函数 &#47; JSX 语法：\n\n&lt;ul&gt;\n  {this.items.map(({ id, text }) =&gt; {\n    return &lt;li key={id}&gt;{text}&lt;&#47;li&gt;\n  })}\n&lt;&#47;ul&gt;\n","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1662046594,"ip_address":"北京","comment_id":355884,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"vue  的  template 的实现就是基于jsx的吧","like_count":1,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586225,"discussion_content":"你好，即将暴富的木杉，Vue的template严格来说不是JSX，它虽然也是被编译成渲染函数，但编译过程，尤其是v-if、v-for这样的指令，与JSX语句是不同的；JSX是Vue的可选特性，它离渲染函数更近，也更“JS”。据我所知，Vue的同一个组件中不能混用&lt;template&gt;和JSX。\n\n以下是摘自Vue的官方文档：\n\n&lt;ul&gt;\n  &lt;li v-for=&#34;{ id, text } in items&#34; :key=&#34;id&#34;&gt;\n    {{ text }}\n  &lt;/li&gt;\n&lt;/ul&gt;\n等价于使用如下渲染函数 / JSX 语法：\n\n&lt;ul&gt;\n  {this.items.map(({ id, text }) =&gt; {\n    return &lt;li key={id}&gt;{text}&lt;/li&gt;\n  })}\n&lt;/ul&gt;\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662046595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362139,"user_name":"癡癡的等你歸","can_delete":false,"product_type":"c1","uid":1334321,"ip_address":"北京","ucode":"AF950FDE0C736C","user_header":"https://static001.geekbang.org/account/avatar/00/14/5c/31/d7b92b6b.jpg","comment_is_top":false,"comment_ctime":1668210977,"is_pvip":false,"replies":[{"id":131791,"content":"你好，癡癡的等你歸，React.createElement方法的签名是：\n\n    createElement(type, config, children)\n\n但实际上，它也支持这样的参数形式：\n\n    createElement(type, config, child1, child2, child3, childN)\n\n这等价于 children = [child1, child2, child3, childN]。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1668407294,"ip_address":"北京","comment_id":362139,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"老师，这段话是否有问题？\n\n其中 type 参数是必须的，props 可选，当参数数量大于等于 3 时，可以有一个或多个 children。\n\n参数数量和children有什么必然联系吗？🤔️","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593641,"discussion_content":"你好，癡癡的等你歸，React.createElement方法的签名是：\n\n    createElement(type, config, children)\n\n但实际上，它也支持这样的参数形式：\n\n    createElement(type, config, child1, child2, child3, childN)\n\n这等价于 children = [child1, child2, child3, childN]。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668407294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1042208,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e7/20/70a95f94.jpg","nickname":"潮汐","note":"","ucode":"F5E4F6DF9CEA9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":594938,"discussion_content":"老师，这里的函数签名中的children，应该是要…children","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669593963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":593641,"ip_address":"广东","group_id":0},"score":594938,"extra":""}]}]},{"had_liked":false,"id":361674,"user_name":"灵感_idea","can_delete":false,"product_type":"c1","uid":1231317,"ip_address":"北京","ucode":"E0DBDDFA6040F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/c9/d5/b08a27ed.jpg","comment_is_top":false,"comment_ctime":1667749881,"is_pvip":false,"replies":[{"id":131783,"content":"你好，灵感_idea，感谢你的认可，希望这个专栏能让你有所收获。有任何意见建议也请让我们知道。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1668398709,"ip_address":"北京","comment_id":361674,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"讲解确实系统又全面，也可以看出作者的经历和经验都比较丰富，只是暂时还未进入比较深入的部分，希望加油做成一个精品课！","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593627,"discussion_content":"你好，灵感_idea，感谢你的认可，希望这个专栏能让你有所收获。有任何意见建议也请让我们知道。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668398709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360123,"user_name":"狗蛋。","can_delete":false,"product_type":"c1","uid":2676779,"ip_address":"美国","ucode":"CBC2B073634E72","user_header":"https://static001.geekbang.org/account/avatar/00/28/d8/2b/21bbdcc4.jpg","comment_is_top":false,"comment_ctime":1666190203,"is_pvip":false,"replies":[{"id":131088,"content":"你好，狗蛋（句号），正如文中提到的，JSX只是JS的语法糖。如果没有额外加入加过滤空对象的逻辑（如Array.filter），那么在遍历todoList数组时就会用把这个空对象作为props传递给对应的KanbanCard元素。正好KanbanCard对象也没有特别处理 title, status为空的情况，所以确实会渲染一个没有内容的卡片出来：\n\n    &lt;li class=&quot;kanban-card&quot;&gt;&lt;div class=&quot;card-title&quot;&gt;&lt;&#47;div&gt;&lt;div class=&quot;card-status&quot;&gt;&lt;&#47;div&gt;&lt;&#47;li&gt;\n\n也欢迎你用课程配套的代码做做实验。可以用第3节课的代码实现你提出的问题： https:&#47;&#47;gitee.com&#47;evisong&#47;geektime-column-oh-my-kanban&#47;releases&#47;tag&#47;v0.3.0\n\n  const [todoList, setTodoList] = useState([\n    { title: &#39;开发任务-1&#39;, status: &#39;22-05-22 18:15&#39; },\n    {},\n    { title: &#39;开发任务-3&#39;, status: &#39;22-05-22 18:15&#39; },\n    { title: &#39;开发任务-5&#39;, status: &#39;22-05-22 18:15&#39; },\n    { title: &#39;测试任务-3&#39;, status: &#39;22-05-22 18:15&#39; }\n  ]);","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1666539566,"ip_address":"美国","comment_id":360123,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"如果todoList中有一个空对象，还会遍历出KanbanCard吗？如果遍历出来只是title和status没有值 是一个空的dom？","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591369,"discussion_content":"你好，狗蛋（句号），正如文中提到的，JSX只是JS的语法糖。如果没有额外加入加过滤空对象的逻辑（如Array.filter），那么在遍历todoList数组时就会用把这个空对象作为props传递给对应的KanbanCard元素。正好KanbanCard对象也没有特别处理 title, status为空的情况，所以确实会渲染一个没有内容的卡片出来：\n\n    &lt;li class=&#34;kanban-card&#34;&gt;&lt;div class=&#34;card-title&#34;&gt;&lt;/div&gt;&lt;div class=&#34;card-status&#34;&gt;&lt;/div&gt;&lt;/li&gt;\n\n也欢迎你用课程配套的代码做做实验。可以用第3节课的代码实现你提出的问题： https://gitee.com/evisong/geektime-column-oh-my-kanban/releases/tag/v0.3.0\n\n  const [todoList, setTodoList] = useState([\n    { title: &#39;开发任务-1&#39;, status: &#39;22-05-22 18:15&#39; },\n    {},\n    { title: &#39;开发任务-3&#39;, status: &#39;22-05-22 18:15&#39; },\n    { title: &#39;开发任务-5&#39;, status: &#39;22-05-22 18:15&#39; },\n    { title: &#39;测试任务-3&#39;, status: &#39;22-05-22 18:15&#39; }\n  ]);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666539567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359620,"user_name":"永不放弃","can_delete":false,"product_type":"c1","uid":2132129,"ip_address":"北京","ucode":"2BCCADF1E20E57","user_header":"https://static001.geekbang.org/account/avatar/00/20/88/a1/a78990c4.jpg","comment_is_top":false,"comment_ctime":1665710955,"is_pvip":false,"replies":[{"id":130886,"content":"你好，永不放弃，这个专栏适合具有HTML、CSS和JS基础的同学。既然你在这些基础上还了解Flutter，我相信你对声明式前端开发一定不陌生；Flutter在一些设计理念上与React有相似之处，有助于你更深入理解这个专栏的内容。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1665911921,"ip_address":"北京","comment_id":359620,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"老师 这篇适合0基础开发吗？ 了解html css  flutter，js部分","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590600,"discussion_content":"你好，永不放弃，这个专栏适合具有HTML、CSS和JS基础的同学。既然你在这些基础上还了解Flutter，我相信你对声明式前端开发一定不陌生；Flutter在一些设计理念上与React有相似之处，有助于你更深入理解这个专栏的内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665911921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357439,"user_name":"01","can_delete":false,"product_type":"c1","uid":1120612,"ip_address":"北京","ucode":"3229D8F060AFEC","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/64/6f2b7b86.jpg","comment_is_top":false,"comment_ctime":1663251599,"is_pvip":false,"replies":[{"id":130295,"content":"你好，01，是正确的。jsx先生成React元素，经过协调过程才最终更新真实DOM。","user_name":"作者回复","user_name_real":"编辑","uid":1033973,"ctime":1663819706,"ip_address":"北京","comment_id":357439,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"jsx 并不直接生成html。 ","like_count":0,"discussions":[{"author":{"id":1033973,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c6/f5/dae613e0.jpg","nickname":"宋一玮","note":"","ucode":"55E5B710556C1E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588537,"discussion_content":"你好，01，是正确的。jsx先生成React元素，经过协调过程才最终更新真实DOM。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663819706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356274,"user_name":"雨猫","can_delete":false,"product_type":"c1","uid":3169783,"ip_address":"四川","ucode":"3CDBCB9D6D0081","user_header":"https://static001.geekbang.org/account/avatar/00/30/5d/f7/936e32e3.jpg","comment_is_top":false,"comment_ctime":1662101138,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"怎么大家收货这么多呀","like_count":1},{"had_liked":false,"id":377327,"user_name":"莫比斯","can_delete":false,"product_type":"c1","uid":1039549,"ip_address":"北京","ucode":"FC467871C8CA7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dc/bd/ea9c16b8.jpg","comment_is_top":false,"comment_ctime":1688351807,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"1. JSX 一定得是 React 吗？React 以外的技术能不能使用 JSX？\njsx=js+xml，用模板语句的地方都用它。所以vue中可以用\n\n2. JSX 一定得生成 HTML 吗？可以用 JSX 生成其他模版吗？\n可以的，比如说xml。只要是标记语言，jsx都可以拿生成模板","like_count":0},{"had_liked":false,"id":363224,"user_name":"潮汐","can_delete":false,"product_type":"c1","uid":1042208,"ip_address":"广东","ucode":"F5E4F6DF9CEA9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/20/70a95f94.jpg","comment_is_top":false,"comment_ctime":1669375100,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100119601,"comment_content":"将Ract很重要的基础知识讲的很详细，好多点都是需要大脉络层面熟记反复思考的","like_count":0}]}