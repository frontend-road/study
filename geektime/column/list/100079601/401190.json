{"id":401190,"title":"28 | 控制流（上）：通过iam-apiserver设计，看Web服务的构建","content":"<p>你好，我是孔令飞。</p><p>前面我们讲了很多关于应用构建的内容，你一定迫不及待地想看下IAM项目的应用是如何构建的。那么接下来，我就讲解下IAM应用的源码。</p><p>在讲解过程中，我不会去讲解具体如何Code，但会讲解一些构建过程中的重点、难点，以及Code背后的设计思路、想法。我相信这是对你更有帮助的。</p><p>IAM项目有很多组件，这一讲，我先来介绍下IAM项目的门面服务：iam-apiserver（管理流服务）。我会先给你介绍下iam-apiserver的功能和使用方法，再介绍下iam-apiserver的代码实现。</p><h2>iam-apiserver服务介绍</h2><p>iam-apiserver是一个Web服务，通过一个名为iam-apiserver的进程，对外提供RESTful API接口，完成用户、密钥、策略三种REST资源的增删改查。接下来，我从功能和使用方法两个方面来具体介绍下。</p><h3>iam-apiserver功能介绍</h3><p>这里，我们可以通过iam-apiserver提供的RESTful API接口，来看下iam-apiserver具体提供的功能。iam-apiserver提供的RESTful API接口可以分为四类，具体如下：</p><p><strong>认证相关接口</strong></p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/43/6d/43ec9261ccdb165c56e9c25b45e6af6d.jpg?wh=1920x1062\" alt=\"图片\"></p><p><strong>用户相关接口</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/60/24/60f8a05f4cb43cbac84c0fb12c40c824.jpg?wh=1920x1314\" alt=\"图片\"></p><p><strong>密钥相关接口</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/e8/95/e8f6aee66a29ff2a5aefeb00c5045c95.jpg?wh=1920x1326\" alt=\"图片\"></p><p><strong>策略相关接口</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/0f/9e/0f3fcaa80020c3f72229fbab2f014a9e.jpg?wh=1920x1275\" alt=\"图片\"></p><h3>iam-apiserver使用方法介绍</h3><p>上面我介绍了iam-apiserver的功能，接下来就介绍下如何使用这些功能。</p><p>我们可以通过不同的客户端来访问iam-apiserver，例如前端、API调用、SDK、iamctl等。这些客户端最终都会执行HTTP请求，调用iam-apiserver提供的RESTful API接口。所以，我们首先需要有一个顺手的REST API客户端工具来执行HTTP请求，完成开发测试。</p><p>因为不同的开发者执行HTTP请求的方式、习惯不同，为了方便讲解，这里我统一通过cURL工具来执行HTTP请求。接下来先介绍下cURL工具。</p><p>标准的Linux发行版都安装了cURL工具。cURL可以很方便地完成RESTful API的调用场景，比如设置Header、指定HTTP请求方法、指定HTTP消息体、指定权限认证信息等。通过<code>-v</code>选项，也能输出REST请求的所有返回信息。cURL功能很强大，有很多参数，这里列出cURL工具常用的参数：</p><pre><code>-X/--request [GET|POST|PUT|DELETE|…]  指定请求的 HTTP 方法\n-H/--header                           指定请求的 HTTP Header\n-d/--data                             指定请求的 HTTP 消息体（Body）\n-v/--verbose                          输出详细的返回信息\n-u/--user                             指定账号、密码\n-b/--cookie                           读取 cookie\n</code></pre><p>此外，如果你想使用带UI界面的工具，这里我推荐你使用 Insomnia 。</p><p>Insomnia是一个跨平台的REST API客户端，与Postman、Apifox是一类工具，用于接口管理、测试。Insomnia功能强大，支持以下功能：</p><ul>\n<li>发送HTTP请求；</li>\n<li>创建工作区或文件夹；</li>\n<li>导入和导出数据；</li>\n<li>导出cURL格式的HTTP请求命令；</li>\n<li>支持编写swagger文档；</li>\n<li>快速切换请求；</li>\n<li>URL编码和解码。</li>\n<li>…</li>\n</ul><p>Insomnia界面如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/63/e0/635aa6f3374af05ec2bff7e193314ae0.png?wh=1920x749\" alt=\"图片\"></p><p>当然了，也有很多其他优秀的带UI界面的REST API客户端，例如 Postman、Apifox等，你可以根据需要自行选择。</p><p>接下来，我用对secret资源的CURD操作，来给你演示下<strong>如何使用iam-apiserver的功能</strong>。你需要执行6步操作。</p><ol>\n<li>登录iam-apiserver，获取token。</li>\n<li>创建一个名为secret0的secret。</li>\n<li>获取secret0的详细信息。</li>\n<li>更新secret0的描述。</li>\n<li>获取secret列表。</li>\n<li>删除secret0。</li>\n</ol><p>具体操作如下：</p><ol>\n<li>登录iam-apiserver，获取token：</li>\n</ol><pre><code>$ curl -s -XPOST -H&quot;Authorization: Basic `echo -n 'admin:Admin@2021'|base64`&quot; http://127.0.0.1:8080/login | jq -r .token\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MzUwNTk4NDIsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MjcyODM4NDIsInN1YiI6ImFkbWluIn0.gTS0n-7njLtpCJ7mvSnct2p3TxNTUQaduNXxqqLwGfI\n</code></pre><p>这里，为了便于使用，我们将token设置为环境变量：</p><pre><code>TOKEN=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MzUwNTk4NDIsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MjcyODM4NDIsInN1YiI6ImFkbWluIn0.gTS0n-7njLtpCJ7mvSnct2p3TxNTUQaduNXxqqLwGfI\n</code></pre><ol start=\"2\">\n<li>创建一个名为secret0的secret：</li>\n</ol><pre><code>$ curl -v -XPOST -H &quot;Content-Type: application/json&quot; -H&quot;Authorization: Bearer ${TOKEN}&quot; -d'{&quot;metadata&quot;:{&quot;name&quot;:&quot;secret0&quot;},&quot;expires&quot;:0,&quot;description&quot;:&quot;admin secret&quot;}' http://iam.api.marmotedu.com:8080/v1/secrets\n* About to connect() to iam.api.marmotedu.com port 8080 (#0)\n*   Trying 127.0.0.1...\n* Connected to iam.api.marmotedu.com (127.0.0.1) port 8080 (#0)\n&gt; POST /v1/secrets HTTP/1.1\n&gt; User-Agent: curl/7.29.0\n&gt; Host: iam.api.marmotedu.com:8080\n&gt; Accept: */*\n&gt; Content-Type: application/json\n&gt; Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJpYW0uYXBpLm1hcm1vdGVkdS5jb20iLCJleHAiOjE2MzUwNTk4NDIsImlkZW50aXR5IjoiYWRtaW4iLCJpc3MiOiJpYW0tYXBpc2VydmVyIiwib3JpZ19pYXQiOjE2MjcyODM4NDIsInN1YiI6ImFkbWluIn0.gTS0n-7njLtpCJ7mvSnct2p3TxNTUQaduNXxqqLwGfI\n&gt; Content-Length: 72\n&gt; \n* upload completely sent off: 72 out of 72 bytes\n&lt; HTTP/1.1 200 OK\n&lt; Content-Type: application/json; charset=utf-8\n&lt; X-Request-Id: ff825bea-53de-4020-8e68-4e87574bd1ba\n&lt; Date: Mon, 26 Jul 2021 07:20:26 GMT\n&lt; Content-Length: 313\n&lt; \n* Connection #0 to host iam.api.marmotedu.com left intact\n{&quot;metadata&quot;:{&quot;id&quot;:60,&quot;instanceID&quot;:&quot;secret-jedr3e&quot;,&quot;name&quot;:&quot;secret0&quot;,&quot;createdAt&quot;:&quot;2021-07-26T15:20:26.885+08:00&quot;,&quot;updatedAt&quot;:&quot;2021-07-26T15:20:26.907+08:00&quot;},&quot;username&quot;:&quot;admin&quot;,&quot;secretID&quot;:&quot;U6CxKs0YVWyOp5GrluychYIRxDmMDFd1mOOD&quot;,&quot;secretKey&quot;:&quot;fubNIn8jLA55ktuuTpXM8Iw5ogdR2mlf&quot;,&quot;expires&quot;:0,&quot;description&quot;:&quot;admin secret&quot;}\n</code></pre><p>可以看到，请求返回头中返回了<code>X-Request-Id</code> Header，<code>X-Request-Id</code>唯一标识这次请求。如果这次请求失败，就可以将<code>X-Request-Id</code>提供给运维或者开发，通过<code>X-Request-Id</code>定位出失败的请求，进行排障。另外<code>X-Request-Id</code>在微服务场景中，也可以透传给其他服务，从而实现请求调用链。</p><ol start=\"3\">\n<li>获取secret0的详细信息：</li>\n</ol><pre><code>$ curl -XGET -H&quot;Authorization: Bearer ${TOKEN}&quot; http://iam.api.marmotedu.com:8080/v1/secrets/secret0\n{&quot;metadata&quot;:{&quot;id&quot;:60,&quot;instanceID&quot;:&quot;secret-jedr3e&quot;,&quot;name&quot;:&quot;secret0&quot;,&quot;createdAt&quot;:&quot;2021-07-26T15:20:26+08:00&quot;,&quot;updatedAt&quot;:&quot;2021-07-26T15:20:26+08:00&quot;},&quot;username&quot;:&quot;admin&quot;,&quot;secretID&quot;:&quot;U6CxKs0YVWyOp5GrluychYIRxDmMDFd1mOOD&quot;,&quot;secretKey&quot;:&quot;fubNIn8jLA55ktuuTpXM8Iw5ogdR2mlf&quot;,&quot;expires&quot;:0,&quot;description&quot;:&quot;admin secret&quot;}\n</code></pre><ol start=\"4\">\n<li>更新secret0的描述：</li>\n</ol><pre><code>$ curl -XPUT -H&quot;Authorization: Bearer ${TOKEN}&quot; -d'{&quot;metadata&quot;:{&quot;name&quot;:&quot;secret&quot;},&quot;expires&quot;:0,&quot;description&quot;:&quot;admin secret(modify)&quot;}' http://iam.api.marmotedu.com:8080/v1/secrets/secret0\n{&quot;metadata&quot;:{&quot;id&quot;:60,&quot;instanceID&quot;:&quot;secret-jedr3e&quot;,&quot;name&quot;:&quot;secret0&quot;,&quot;createdAt&quot;:&quot;2021-07-26T15:20:26+08:00&quot;,&quot;updatedAt&quot;:&quot;2021-07-26T15:23:35.878+08:00&quot;},&quot;username&quot;:&quot;admin&quot;,&quot;secretID&quot;:&quot;U6CxKs0YVWyOp5GrluychYIRxDmMDFd1mOOD&quot;,&quot;secretKey&quot;:&quot;fubNIn8jLA55ktuuTpXM8Iw5ogdR2mlf&quot;,&quot;expires&quot;:0,&quot;description&quot;:&quot;admin secret(modify)&quot;}\n</code></pre><ol start=\"5\">\n<li>获取secret列表：</li>\n</ol><pre><code>$ curl -XGET -H&quot;Authorization: Bearer ${TOKEN}&quot; http://iam.api.marmotedu.com:8080/v1/secrets\n{&quot;totalCount&quot;:1,&quot;items&quot;:[{&quot;metadata&quot;:{&quot;id&quot;:60,&quot;instanceID&quot;:&quot;secret-jedr3e&quot;,&quot;name&quot;:&quot;secret0&quot;,&quot;createdAt&quot;:&quot;2021-07-26T15:20:26+08:00&quot;,&quot;updatedAt&quot;:&quot;2021-07-26T15:23:35+08:00&quot;},&quot;username&quot;:&quot;admin&quot;,&quot;secretID&quot;:&quot;U6CxKs0YVWyOp5GrluychYIRxDmMDFd1mOOD&quot;,&quot;secretKey&quot;:&quot;fubNIn8jLA55ktuuTpXM8Iw5ogdR2mlf&quot;,&quot;expires&quot;:0,&quot;description&quot;:&quot;admin secret(modify)&quot;}]}\n</code></pre><ol start=\"6\">\n<li>删除secret0：</li>\n</ol><pre><code>$ curl -XDELETE -H&quot;Authorization: Bearer ${TOKEN}&quot; http://iam.api.marmotedu.com:8080/v1/secrets/secret0\nnull\n</code></pre><p>上面，我给你演示了密钥的使用方法。用户和策略资源类型的使用方法跟密钥类似。详细的使用方法你可以参考 <a href=\"https://github.com/marmotedu/iam/blob/v1.0.6/scripts/install/test.sh\">test.sh</a> 脚本，该脚本是用来测试IAM应用的，里面包含了各个接口的请求方法。</p><p>这里，我还想顺便介绍下<strong>如何测试IAM应用中的各个部分</strong>。确保iam-apiserver、iam-authz-server、iam-pump等服务正常运行后，进入到IAM项目的根目录，执行以下命令：</p><pre><code>$ ./scripts/install/test.sh iam::test::test # 测试整个IAM应用是否正常运行\n$ ./scripts/install/test.sh iam::test::login # 测试登陆接口是否可以正常访问\n$ ./scripts/install/test.sh iam::test::user # 测试用户接口是否可以正常访问\n$ ./scripts/install/test.sh iam::test::secret # 测试密钥接口是否可以正常访问\n$ ./scripts/install/test.sh iam::test::policy # 测试策略接口是否可以正常访问\n$ ./scripts/install/test.sh iam::test::apiserver # 测试iam-apiserver服务是否正常运行\n$ ./scripts/install/test.sh iam::test::authz # 测试authz接口是否可以正常访问\n$ ./scripts/install/test.sh iam::test::authzserver # 测试iam-authz-server服务是否正常运行\n$ ./scripts/install/test.sh iam::test::pump # 测试iam-pump是否正常运行\n$ ./scripts/install/test.sh iam::test::iamctl # 测试iamctl工具是否可以正常使用\n$ ./scripts/install/test.sh iam::test::man # 测试man文件是否正确安装\n</code></pre><p>所以，每次发布完iam-apiserver后，你可以执行以下命令来完成iam-apiserver的冒烟测试：</p><pre><code>$ export IAM_APISERVER_HOST=127.0.0.1 # iam-apiserver部署服务器的IP地址\n$ export IAM_APISERVER_INSECURE_BIND_PORT=8080 # iam-apiserver HTTP服务的监听端口\n$ ./scripts/install/test.sh iam::test::apiserver\n</code></pre><h2>iam-apiserver代码实现</h2><p>上面，我介绍了iam-apiserver的功能和使用方法，这里我们再来看下iam-apiserver具体的代码实现。我会从配置处理、启动流程、请求处理流程、代码架构4个方面来讲解。</p><h3>iam-apiserver配置处理</h3><p>iam-apiserver服务的main函数位于<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/cmd/iam-apiserver/apiserver.go#L18\">apiserver.go</a>文件中，你可以跟读代码，了解iam-apiserver的代码实现。这里，我来介绍下iam-apiserver服务的一些设计思想。</p><p>首先，来看下iam-apiserver中的3种配置：Options配置、应用配置和 HTTP/GRPC服务配置。</p><ul>\n<li><strong>Options配置：</strong>用来构建命令行参数，它的值来自于命令行选项或者配置文件（也可能是二者Merge后的配置）。Options可以用来构建应用框架，Options配置也是应用配置的输入。</li>\n<li><strong>应用</strong><strong>配置：</strong>iam-apiserver组件中需要的一切配置。有很多地方需要配置，例如，启动HTTP/GRPC需要配置监听地址和端口，初始化数据库需要配置数据库地址、用户名、密码等。</li>\n<li><strong>HTTP/GRPC服务配置：</strong>启动HTTP服务或者GRPC服务需要的配置。</li>\n</ul><p>这三种配置的关系如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/b5/8ca8d9fa1efaab21e012471874e89cb5.jpg?wh=1346x727\" alt=\"\"></p><p>Options配置接管命令行选项，应用配置接管整个应用的配置，HTTP/GRPC服务配置接管跟HTTP/GRPC服务相关的配置。这3种配置独立开来，可以解耦命令行选项、应用和应用内的服务，使得这3个部分可以独立扩展，又不相互影响。</p><p>iam-apiserver根据Options配置来构建命令行参数和应用配置。</p><p>我们通过<code>github.com/marmotedu/iam/pkg/app</code>包的<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/pkg/app/app.go#L199\">buildCommand</a>方法来构建命令行参数。这里的核心是，通过<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/pkg/app/app.go#L157\">NewApp</a>函数构建Application实例时，传入的<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/options/options.go#L19\">Options</a>实现了<code>Flags() (fss cliflag.NamedFlagSets)</code>方法，通过buildCommand方法中的以下代码，将option的Flag添加到cobra实例的FlagSet中：</p><pre><code>\tif a.options != nil {\n\t\t\tnamedFlagSets = a.options.Flags()\n\t\t\tfs := cmd.Flags()\n\t\t\tfor _, f := range namedFlagSets.FlagSets {\n\t\t\t\tfs.AddFlagSet(f)\n\t\t\t}\n\t\n            ...\n\t\t}\n</code></pre><p>通过<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/config/config.go#L16\">CreateConfigFromOptions</a>函数来构建应用配置：</p><pre><code>        cfg, err := config.CreateConfigFromOptions(opts)                      \n        if err != nil {                                               \n            return err                                                \n        }  \n</code></pre><p>根据应用配置来构建HTTP/GRPC服务配置。例如，以下代码根据应用配置，构建了HTTP服务器的Address参数：</p><pre><code>func (s *InsecureServingOptions) ApplyTo(c *server.Config) error {\n    c.InsecureServing = &amp;server.InsecureServingInfo{\n        Address: net.JoinHostPort(s.BindAddress, strconv.Itoa(s.BindPort)),\n    }\n\n    return nil\n}\n</code></pre><p>其中，<code>c *server.Config</code>是HTTP服务器的配置，<code>s *InsecureServingOptions</code>是应用配置。</p><h3>iam-apiserver启动流程设计</h3><p>接下来，我们来详细看下iam-apiserver的启动流程设计。启动流程如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/8a/c7/8a94938bc087ed96d0ec87261db292c7.jpg?wh=4770x1487\" alt=\"\"></p><p><strong>首先，</strong>通过<code>opts := options.NewOptions()</code>创建带有默认值的Options类型变量opts。opts变量作为<code>github.com/marmotedu/iam/pkg/app</code>包的<code>NewApp</code>函数的输入参数，最终在App框架中，被来自于命令行参数或配置文件的配置（也可能是二者Merge后的配置）所填充，opts变量中各个字段的值会用来创建应用配置。</p><p><strong>接着，</strong>会注册<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/apiserver.go#L36\">run</a>函数到App框架中。run函数是iam-apiserver的启动函数，里面封装了我们自定义的启动逻辑。run函数中，首先会初始化日志包，这样我们就可以根据需要，在后面的代码中随时记录日志了。</p><p><strong>然后，</strong>会创建应用配置。应用配置和Options配置其实是完全独立的，二者可能完全不同，但在iam-apiserver中，二者配置项是相同的。</p><p><strong>之后，</strong>根据应用配置，创建HTTP/GRPC服务器所使用的配置。在创建配置后，会先分别进行配置补全，再使用补全后的配置创建Web服务实例，例如：</p><pre><code>genericServer, err := genericConfig.Complete().New()\nif err != nil {\n    return nil, err\n}\nextraServer, err := extraConfig.complete().New()\nif err != nil {\n    return nil, err\n}\n...\nfunc (c *ExtraConfig) complete() *completedExtraConfig {\n    if c.Addr == &quot;&quot; {\n        c.Addr = &quot;127.0.0.1:8081&quot;\n    }\n\n    return &amp;completedExtraConfig{c}\n}\n</code></pre><p>上面的代码中，首先调用<code>Complete</code>/<code>complete</code>函数补全配置，再基于补全后的配置，New一个HTTP/GRPC服务实例。</p><p>这里有个设计技巧：<code>complete</code>函数返回的是一个<code>*completedExtraConfig</code>类型的实例，在创建GRPC实例时，是调用<code>completedExtraConfig</code>结构体提供的<code>New</code>方法，这种设计方法可以确保我们创建的GRPC实例一定是基于complete之后的配置（completed）。</p><p>在实际的Go项目开发中，我们需要提供一种机制来处理或补全配置，这在Go项目开发中是一个非常有用的步骤。</p><p><strong>最后，</strong>调用<code>PrepareRun</code>方法，进行HTTP/GRPC服务器启动前的准备。在准备函数中，我们可以做各种初始化操作，例如初始化数据库，安装业务相关的Gin中间件、RESTful API路由等。</p><p>完成HTTP/GRPC服务器启动前的准备之后，调用<code>Run</code>方法启动HTTP/GRPC服务。在<code>Run</code>方法中，分别启动了GRPC和HTTP服务。</p><p>可以看到，整个iam-apiserver的软件框架是比较清晰的。</p><p>服务启动后，就可以处理请求了。所以接下来，我们再来看下iam-apiserver的RESTAPI请求处理流程。</p><h3>iam-apiserver 的REST API请求处理流程</h3><p>iam-apiserver的请求处理流程也是清晰、规范的，具体流程如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/94/76/9400e9855b10yyac47871a7af87e9776.jpg?wh=5771x1691\" alt=\"\"></p><p>结合上面这张图，我们来看下iam-apiserver 的REST API请求处理流程，来帮你更好地理解iam-apiserver是如何处理HTTP请求的。</p><p><strong>首先，</strong>我们通过API调用（<code>&lt;HTTP Method&gt; + &lt;HTTP Request Path&gt;</code>）请求iam-apiserver提供的RESTful API接口。</p><p><strong>接着，</strong>Gin Web框架接收到HTTP请求之后，会通过认证中间件完成请求的认证，iam-apiserver提供了Basic认证和Bearer认证两种认证方式。</p><p><strong>认证</strong><strong>通过后，</strong>请求会被我们加载的一系列中间件所处理，例如跨域、RequestID、Dump等中间件。</p><p><strong>最后，</strong>根据<code>&lt;HTTP Method&gt; + &lt;HTTP Request Path&gt;</code>进行路由匹配。</p><p>举个例子，假设我们请求的RESTful API是<code>POST + /v1/secrets</code>，Gin Web框架会根据HTTP Method和HTTP Request Path，查找注册的Controllers，最终匹配到<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/controller/v1/secret/create.go\">secretController.Create</a>Controller。在Create Controller中，我们会依次执行请求参数解析、请求参数校验、调用业务层的方法创建Secret、处理业务层的返回结果，最后返回最终的HTTP请求结果。</p><h3>iam-apiserver代码架构</h3><p>iam-apiserver代码设计遵循简洁架构设计，一个简洁架构具有以下5个特性：</p><ul>\n<li><strong>独立于框架：</strong>该架构不会依赖于某些功能强大的软件库存在。这可以让你使用这样的框架作为工具，而不是让你的系统陷入到框架的约束中。</li>\n<li><strong>可测试性：</strong>业务规则可以在没有UI、数据库、Web服务或其他外部元素的情况下进行测试，在实际的开发中，我们通过Mock来解耦这些依赖。</li>\n<li><strong>独立于UI ：</strong>在无需改变系统其他部分的情况下，UI可以轻松地改变。例如，在没有改变业务规则的情况下，Web UI可以替换为控制台UI。</li>\n<li><strong>独立于数据库：</strong>你可以用Mongo、Oracle、Etcd或者其他数据库来替换MariaDB，你的业务规则不要绑定到数据库。</li>\n<li><strong>独立于外部媒介：</strong>实际上，你的业务规则可以简单到根本不去了解外部世界。</li>\n</ul><p>所以，基于这些约束，每一层都必须是独立的和可测试的。iam-apiserver代码架构分为4层：模型层（Models）、控制层（Controller）、业务层 （Service）、仓库层（Repository）。从控制层、业务层到仓库层，从左到右层级依次加深。模型层独立于其他层，可供其他层引用。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/f0/f2fffd84dfbc1a6643887db3d5d541f0.jpg?wh=2498x747\" alt=\"\"></p><p>层与层之间导入包时，都有严格的导入关系，这可以防止包的循环导入问题。导入关系如下：</p><ul>\n<li>模型层的包可以被仓库层、业务层和控制层导入；</li>\n<li>控制层能够导入业务层和仓库层的包。这里需要注意，如果没有特殊需求，控制层要避免导入仓库层的包，控制层需要完成的业务功能都通过业务层来完成。这样可以使代码逻辑更加清晰、规范。</li>\n<li>业务层能够导入仓库层的包。</li>\n</ul><p>接下来，我们就来详细看下每一层所完成的功能，以及其中的一些注意点。</p><ol>\n<li>模型层（Models）</li>\n</ol><p>模型层在有些软件架构中也叫做实体层（Entities），模型会在每一层中使用，在这一层中存储对象的结构和它的方法。IAM项目模型层中的模型存放在<a href=\"https://github.com/marmotedu/api/tree/master/apiserver/v1\">github.com/marmotedu/api/apiserver/v1</a>目录下，定义了<code>User</code>、<code>UserList</code>、<code>Secret</code>、<code>SecretList</code>、<code>Policy</code>、<code>PolicyList</code>、<code>AuthzPolicy</code>模型及其方法。例如：</p><pre><code>type Secret struct {\n\t// May add TypeMeta in the future.\n\t// metav1.TypeMeta `json:&quot;,inline&quot;`\n\n\t// Standard object's metadata.\n\tmetav1.ObjectMeta `       json:&quot;metadata,omitempty&quot;`\n\tUsername          string `json:&quot;username&quot;           gorm:&quot;column:username&quot;  validate:&quot;omitempty&quot;`\n\tSecretID          string `json:&quot;secretID&quot;           gorm:&quot;column:secretID&quot;  validate:&quot;omitempty&quot;`\n\tSecretKey         string `json:&quot;secretKey&quot;          gorm:&quot;column:secretKey&quot; validate:&quot;omitempty&quot;`\n\n\t// Required: true\n\tExpires     int64  `json:&quot;expires&quot;     gorm:&quot;column:expires&quot;     validate:&quot;omitempty&quot;`\n\tDescription string `json:&quot;description&quot; gorm:&quot;column:description&quot; validate:&quot;description&quot;`\n}\n</code></pre><p>之所以将模型层的模型存放在<code>github.com/marmotedu/api</code>项目中，而不是<code>github.com/marmotedu/iam</code>项目中，是为了让这些模型能够被其他项目使用。例如，iam的模型可以被<code>github.com/marmotedu/shippy</code>应用导入。同样，shippy应用的模型也可以被iam项目导入，导入关系如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/13/c9/1307e374f4193ecc3d5b73a987cdd0c9.jpg?wh=3896x1433\" alt=\"\"></p><p>上面的依赖关系都是单向的，依赖关系清晰，不存在循环依赖的情况。</p><p>要增加shippy的模型定义，只需要在api目录下创建新的目录即可。例如，shippy应用中有一个vessel服务，其模型所在的包可以为<code>github.com/marmotedu/api/vessel</code>。</p><p>另外，这里的模型既可以作为数据库模型，又可以作为API接口的请求模型（入参、出参）。如果我们能够确保<strong>创建资源时的属性</strong>、<strong>资源保存在数据库中的属性</strong>、<strong>返回资源的属性</strong>三者一致，就可以使用同一个模型。通过使用同一个模型，可以使我们的代码更加简洁、易维护，并能提高开发效率。如果这三个属性有差异，你可以另外新建模型来适配。</p><ol start=\"2\">\n<li>仓库层（Repository)</li>\n</ol><p>仓库层用来跟数据库/第三方服务进行CURD交互，作为应用程序的数据引擎进行应用数据的输入和输出。这里需要注意，仓库层仅对数据库/第三方服务执行CRUD操作，不封装任何业务逻辑。</p><p>仓库层也负责选择应用中将要使用什么样的数据库，可以是MySQL、MongoDB、MariaDB、Etcd等。无论使用哪种数据库，都要在这层决定。仓库层依赖于连接数据库或其他第三方服务（如果存在的话）。</p><p>这一层也会起到数据转换的作用：将从数据库/微服务中获取的数据转换为控制层、业务层能识别的数据结构，将控制层、业务层的数据格式转换为数据库或微服务能识别的数据格式。</p><p>iam-apiserver的仓库层位于<a href=\"https://github.com/marmotedu/iam/tree/v1.0.3/internal/apiserver/store/mysql\">internal/apiserver/store/mysql</a>目录下，里面的方法用来跟MariaDB进行交互，完成CURD操作，例如，从数据库中获取密钥：</p><pre><code>func (s *secrets) Get(ctx context.Context, username, name string, opts metav1.GetOptions) (*v1.Secret, error) {\n    secret := &amp;v1.Secret{}\n    err := s.db.Where(&quot;username = ? and name= ?&quot;, username, name).First(&amp;secret).Error\n    if err != nil {\n        if errors.Is(err, gorm.ErrRecordNotFound) {\n            return nil, errors.WithCode(code.ErrSecretNotFound, err.Error())\n        }\n\n        return nil, errors.WithCode(code.ErrDatabase, err.Error())\n    }\n\n    return secret, nil\n}\n</code></pre><ol start=\"3\">\n<li>业务层 (Service)</li>\n</ol><p>业务层主要用来完成业务逻辑处理，我们可以把所有的业务逻辑处理代码放在业务层。业务层会处理来自控制层的请求，并根据需要请求仓库层完成数据的CURD操作。业务层功能如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/61/b6/6103c58d837fd81769977bc3c947ffb6.jpg?wh=1796x1236\" alt=\"\"></p><p>iam-apiserver的业务层位于<a href=\"https://github.com/marmotedu/iam/tree/v1.0.3/internal/apiserver/service\">internal/apiserver/service</a>目录下。下面是iam-apiserver业务层中，用来创建密钥的函数：</p><pre><code>func (s *secretService) Create(ctx context.Context, secret *v1.Secret, opts metav1.CreateOptions) error {\n    if err := s.store.Secrets().Create(ctx, secret, opts); err != nil {\n        return errors.WithCode(code.ErrDatabase, err.Error())\n    }\n\n    return nil\n}\n</code></pre><p>可以看到，业务层最终请求仓库层的<code>s.store</code>的<code>Create</code>方法，将密钥信息保存在MariaDB数据库中。</p><ol start=\"4\">\n<li>控制层（Controller）</li>\n</ol><p>控制层接收HTTP请求，并进行参数解析、参数校验、逻辑分发处理、请求返回这些操作。控制层会将逻辑分发给业务层，业务层处理后返回，返回数据在控制层中被整合再加工，最终返回给请求方。控制层相当于实现了业务路由的功能。具体流程如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/12/08/120137fc2749aa12a013099ec11e1b08.jpg?wh=960x1029\" alt=\"\"></p><p>这里我有个建议，不要在控制层写复杂的代码，如果需要，请将这些代码分发到业务层或其他包中。</p><p>iam-apiserver的控制层位于<a href=\"https://github.com/marmotedu/iam/tree/v1.0.3/internal/apiserver/controller\">internal/apiserver/controller</a>目录下。下面是iam-apiserver控制层中创建密钥的代码：</p><pre><code>func (s *SecretHandler) Create(c *gin.Context) {\n\tlog.L(c).Info(&quot;create secret function called.&quot;)\n\n\tvar r v1.Secret\n\n\tif err := c.ShouldBindJSON(&amp;r); err != nil {\n\t\tcore.WriteResponse(c, errors.WithCode(code.ErrBind, err.Error()), nil)\n\n\t\treturn\n\t}\n\n\tif errs := r.Validate(); len(errs) != 0 {\n\t\tcore.WriteResponse(c, errors.WithCode(code.ErrValidation, errs.ToAggregate().Error()), nil)\n\n\t\treturn\n\t}\n\n\tusername := c.GetString(middleware.UsernameKey)\n\n\tsecrets, err := s.srv.Secrets().List(c, username, metav1.ListOptions{\n\t\tOffset: pointer.ToInt64(0),\n\t\tLimit:  pointer.ToInt64(-1),\n\t})\n\tif err != nil {\n\t\tcore.WriteResponse(c, errors.WithCode(code.ErrDatabase, err.Error()), nil)\n\n\t\treturn\n\t}\n\n\tif secrets.TotalCount &gt;= maxSecretCount {\n\t\tcore.WriteResponse(c, errors.WithCode(code.ErrReachMaxCount, &quot;secret count: %d&quot;, secrets.TotalCount), nil)\n\n\t\treturn\n\t}\n\n\t// must reassign username\n\tr.Username = username\n\n\tif err := s.srv.Secrets().Create(c, &amp;r, metav1.CreateOptions{}); err != nil {\n\t\tcore.WriteResponse(c, err, nil)\n\n\t\treturn\n\t}\n\n\tcore.WriteResponse(c, nil, r)\n}\n</code></pre><p>上面的代码完成了以下操作：</p><ol>\n<li>解析HTTP请求参数。</li>\n<li>进行参数验证，这里可以添加一些业务性质的参数校验，例如：<code>secrets.TotalCount &gt;= maxSecretCount</code>。</li>\n<li>调用业务层<code>s.srv</code>的<code>Create</code>方法，完成密钥的创建。</li>\n<li>返回HTTP请求参数。</li>\n</ol><p>上面，我们介绍了iam-apiserver采用的4层结构，接下来我们再看看<strong>每一层之间是如何通信的</strong>。</p><p>除了模型层，控制层、业务层、仓库层之间都是通过接口进行通信的。通过接口通信，一方面可以使相同的功能支持不同的实现（也就是说具有插件化能力），另一方面也使得每一层的代码变得可测试。</p><p>这里，我用创建密钥API请求的例子，来给你讲解下层与层之间是如何进行通信的。</p><p><strong>首先，来看下控制层如何跟业务层进行通信。</strong></p><p>对密钥的请求处理都是通过SecretController提供的方法来处理的，创建密钥调用的是它的<code>Create</code>方法：</p><pre><code>func (s *SecretController) Create(c *gin.Context) {\n    ...\n\tif err := s.srv.Secrets().Create(c, &amp;r, metav1.CreateOptions{}); err != nil {\n\t\tcore.WriteResponse(c, err, nil)\n\n\t\treturn\n\t}\n\t...\n}\n</code></pre><p>在<code>Create</code>方法中，调用了<code>s.srv.Secrets().Create()</code>来创建密钥，<code>s.srv</code>是一个接口类型，定义如下：</p><pre><code>type Service interface {\n    Users() UserSrv\n    Secrets() SecretSrv\n    Policies() PolicySrv\n}\n\ntype SecretSrv interface {                                                             \n    Create(ctx context.Context, secret *v1.Secret, opts metav1.CreateOptions) error    \n    Update(ctx context.Context, secret *v1.Secret, opts metav1.UpdateOptions) error            \n    Delete(ctx context.Context, username, secretID string, opts metav1.DeleteOptions) error                        \n    DeleteCollection(ctx context.Context, username string, secretIDs []string, opts metav1.DeleteOptions) error    \n    Get(ctx context.Context, username, secretID string, opts metav1.GetOptions) (*v1.Secret, error)    \n    List(ctx context.Context, username string, opts metav1.ListOptions) (*v1.SecretList, error)    \n} \n</code></pre><p>可以看到，控制层通过业务层提供的<code>Service</code>接口类型，剥离了业务层的具体实现。业务层的Service接口类型提供了<code>Secrets()</code>方法，该方法返回了一个实现了<code>SecretSrv</code>接口的实例。在控制层中，通过调用该实例的<code>Create(ctx context.Context, secret *v1.Secret, opts metav1.CreateOptions) error</code>方法来完成密钥的创建。至于业务层是如何创建密钥的，控制层不需要知道，也就是说创建密钥可以有多种实现。</p><p>这里使用到了设计模式中的<strong>工厂方法模式</strong>。<code>Service</code>是工厂接口，里面包含了一系列创建具体业务层对象的工厂函数：<code>Users()</code>、<code>Secrets()</code>、<code>Policies()</code>。通过工厂方法模式，不仅隐藏了业务层对象的创建细节，而且还可以很方便地在<code>Service</code>工厂接口实现方法中添加新的业务层对象。</p><p>例如，我们想新增一个<code>Template</code>业务层对象，用来在iam-apiserver中预置一些策略模板，可以这么来加：</p><pre><code>type Service interface {\n    Users() UserSrv\n    Secrets() SecretSrv\n    Policies() PolicySrv\n    Templates() TemplateSrv\n}\n\nfunc (s *service) Templates() TemplateSrv {\n    return newTemplates(s)\n}\n</code></pre><p>接下来，新建一个<code>template.go</code>文件：</p><pre><code>type TemplateSrv interface {\n    Create(ctx context.Context, template *v1.Template, opts metav1.CreateOptions) error\n    // Other methods\n}\n\ntype templateService struct {\n    store store.Factory\n}\n\nvar _ TemplateSrv = (*templateService)(nil)\n\nfunc newTemplates(srv *service) *TemplateService {\n    // more create logic\n    return &amp;templateService{store: srv.store}\n}\n\nfunc (u *templateService) Create(ctx context.Context, template *v1.Template, opts metav1.CreateOptions) error {\n    // normal code\n\n    return nil\n}\n</code></pre><p>可以看到，我们通过以下三步新增了一个业务层对象：</p><ol>\n<li>在<code>Service</code>接口定义中，新增了一个入口：<code>Templates() TemplateSrv</code>。</li>\n<li>在<code>service.go</code>文件中，新增了一个函数：<code>Templates()</code>。</li>\n<li>新建了<code>template.go</code>文件，在<code>template.go</code>中定义了templateService结构体，并为它实现了<code>TemplateSrv</code>接口。</li>\n</ol><p>可以看到，我们新增的Template业务对象的代码几乎都闭环在<code>template.go</code>文件中。对已有的<code>Service</code>工厂接口的创建方法，除了新增一个工厂方法<code>Templates() TemplateSrv</code>外，没有其他任何入侵。这样做可以避免影响已有业务。</p><p>在实际项目开发中，你也有可能会想到下面这种错误的创建方式：</p><pre><code>// 错误方法一\ntype Service interface {\n    UserSrv\n    SecretSrv\n    PolicySrv\n    TemplateSrv\n}\n</code></pre><p>上面的创建方式中，我们如果想创建User和Secret，那只能定义两个不同的方法：CreateUser和 CreateSecret，远没有在User和Secret各自的域中提供同名的Create方法来得优雅。</p><p>IAM项目中还有其他地方也使用了工厂方法模式，例如<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/store/store.go#L12\">Factory</a>工厂接口。</p><p><strong>再来看下业务层和仓库层是如何通信的。</strong></p><p>业务层和仓库层也是通过接口来通信的。例如，在业务层中创建密钥的代码如下：</p><pre><code>func (s *secretService) Create(ctx context.Context, secret *v1.Secret, opts metav1.CreateOptions) error {\n    if err := s.store.Secrets().Create(ctx, secret, opts); err != nil {\n        return errors.WithCode(code.ErrDatabase, err.Error())\n    }\n\n    return nil\n}\n</code></pre><p><code>Create</code>方法中调用了<code>s.store.Secrets().Create()</code>方法来将密钥保存到数据库中。<code>s.store</code>是一个接口类型，定义如下：</p><pre><code>type Factory interface {\n    Users() UserStore\n    Secrets() SecretStore\n    Policies() PolicyStore\n    Close() error\n}\n</code></pre><p>业务层与仓库层的通信实现，和控制层与业务层的通信实现类似，所以这里不再详细介绍。</p><p>到这里我们知道了，控制层、业务层和仓库层之间是通过接口来通信的。通过接口通信有一个好处，就是可以让各层变得可测。那接下来，我们就来看下<strong>如何测试各层的代码</strong>。因为<strong>第38讲</strong>和<strong>第39讲</strong>会详细介绍如何测试Go代码，所以这里只介绍下测试思路。</p><ol>\n<li>模型层</li>\n</ol><p>因为模型层不依赖其他任何层，我们只需要测试其中定义的结构及其函数和方法即可。</p><ol start=\"2\">\n<li>控制层</li>\n</ol><p>控制层依赖于业务层，意味着该层需要业务层来支持测试。你可以通过<a href=\"https://github.com/golang/mock\">golang/mock</a>来mock业务层，测试用例可参考<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/controller/v1/user/create_test.go#L19\">TestUserController_Create</a>。</p><ol start=\"3\">\n<li>业务层</li>\n</ol><p>因为该层依赖于仓库层，意味着该层需要仓库层来支持测试。我们有两种方法来模拟仓库层：</p><ul>\n<li>通过<code>golang/mock</code>来mock仓库层。</li>\n<li>自己开发一个fake仓库层。</li>\n</ul><p>使用<code>golang/mock</code>的测试用例，你可以参考<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/service/v1/secret_test.go#L19\">Test_secretService_Create</a>。</p><p>fake的仓库层可以参考<a href=\"https://github.com/marmotedu/iam/tree/v1.0.4/internal/apiserver/store/fake\">fake</a>，使用该fake仓库层进行测试的测试用例为<a href=\"https://github.com/marmotedu/iam/blob/v1.0.4/internal/apiserver/service/v1/user_test.go#L76\"> Test_userService_List</a>。</p><ol start=\"4\">\n<li>仓库层</li>\n</ol><p>仓库层依赖于数据库，如果调用了其他微服务，那还会依赖第三方服务。我们可以通过<a href=\"https://github.com/DATA-DOG/go-sqlmock\">sqlmock</a>来模拟数据库连接，通过<a href=\"https://github.com/jarcoal/httpmock\">httpmock</a>来模拟HTTP请求。</p><h2>总结</h2><p>这一讲，我主要介绍了iam-apiserver的功能和使用方法，以及它的代码实现。iam-apiserver是一个Web服务，提供了REST API来完成用户、密钥、策略三种REST资源的增删改查。我们可以通过cURL、Insomnia等工具，来完成REST API请求。</p><p>iam-apiserver包含了3种配置：Options配置、应用配置、HTTP/GRPC服务配置。这三种配置分别用来构建命令行参数、应用和HTTP/GRPC服务。</p><p>iam-apiserver在启动时，会先构建应用框架，接着会设置应用选项，然后对应用进行初始化，最后创建HTTP/GRPC服务的配置和实例，最终启动HTTP/GRPC服务。</p><p>服务启动之后，就可以接收HTTP请求了。一个HTTP请求会先进行认证，接着会被注册的中间件处理，然后，会根据<code>(HTTP Method, HTTP Request Path)</code>匹配到处理函数。在处理函数中，会解析请求参数、校验参数、调用业务逻辑处理函数，最终返回请求结果。</p><p>iam-apiserver采用了简洁架构，整个应用分为4层：模型层、控制层、业务层和仓库层。模型层存储对象的结构和它的方法；仓库层用来跟数据库/第三方服务进行CURD交互；业务层主要用来完成业务逻辑处理；控制层接收HTTP请求，并进行参数解析、参数校验、逻辑分发处理、请求返回操作。控制层、业务层、仓库层之间通过接口通信，通过接口通信可以使相同的功能支持不同的实现，并使每一层的代码变得可测试。</p><h2>课后练习</h2><ol>\n<li>\n<p>iam-apiserver和iam-authz-server都提供了REST API服务，阅读它们的源码，看看iam-apiserver和iam-authz-server是如何共享REST API相关代码的。</p>\n</li>\n<li>\n<p>思考一下，iam-apiserver的服务构建方式，能够再次抽象成一个模板（Go包）吗？如果能，该如何抽象？</p>\n</li>\n</ol><p>欢迎你在留言区与我交流讨论，我们下一讲见。</p>","comments":[{"had_liked":false,"id":324412,"user_name":"yandongxiao","can_delete":false,"product_type":"c1","uid":1017700,"ip_address":"","ucode":"D397F4DB0109C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/64/3882d90d.jpg","comment_is_top":false,"comment_ctime":1638419308,"is_pvip":false,"replies":[{"id":"118460","content":"强！","user_name":"作者回复","comment_id":324412,"uid":"1167883","ip_address":"","utype":1,"ctime":1639453455,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"40293124972","product_id":100079601,"comment_content":"总结：<br>介绍了 internal&#47;pkg&#47;apiserver 内部的组织结构<br>1. 最外层的Go文件主要完成：<br>   1. 构建应用框架（app.go）<br>   2. 提供应用框架执行时，需要的Run函数（run.go）<br>   3. 创建 apiServer 服务实例（server.go 和 grpc.go）<br>   4. 创建路由规则，安装中间件等（auth.go, router.go）<br>2. config 对应**应用配置**<br>3. options 对应命令行参数和配置文件。<br>4. controller、service、store 三个层次，controller 负责参数解析、校验；service 层负责业务逻辑；store负责数据库操作。<br><br>4层模型，模型层、控制层、业务层、存储层。层级之间如何解耦？<br>1. 通过 interface 实现解耦；<br>2. service层和store层的实例，是在请求执行过程中动态创建，它们都依赖一个工厂对象，作为实例化的输入。<br>3. 工厂对象 store store.Factory 不与具体的表、具体的操作绑定，通过store对象，你可以执行数据库的任何操作。类似的，srv srvv1.Service 工厂也不与具体的业务绑定，通过srv对象，你可以执行任何业务逻辑。<br><br>服务启动流程分为三个阶段：配置阶段、PreRun阶段、Run阶段。配置相关的对象有：Options、Config、HTTP&#47;GRPC 相关的配置对象。","like_count":10,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538597,"discussion_content":"强！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639453456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308593,"user_name":"Jasper","can_delete":false,"product_type":"c1","uid":1316025,"ip_address":"","ucode":"06640157207187","user_header":"https://static001.geekbang.org/account/avatar/00/14/14/b9/47377590.jpg","comment_is_top":false,"comment_ctime":1629694771,"is_pvip":false,"replies":[{"id":"112023","content":"这段代码的意思是：强制确保userService实现了UserSrv接口。","user_name":"作者回复","comment_id":308593,"uid":"1167883","ip_address":"","utype":1,"ctime":1630113202,"user_name_real":"CK1.0"}],"discussion_count":3,"race_medal":0,"score":"23104531251","product_id":100079601,"comment_content":"var _ UserSrv = (*userService)(nil)  我是go初学者，这种语法表示没看明白","like_count":6,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525555,"discussion_content":"这段代码的意思是：强制确保userService实现了UserSrv接口。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630113202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1513497,"avatar":"https://static001.geekbang.org/account/avatar/00/17/18/19/11780879.jpg","nickname":"云边红日","note":"","ucode":"E9F368F160CCCF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536727,"discussion_content":"这个里边有说明，为后来人解惑：https://blog.csdn.net/sinat_40292249/article/details/103308477","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1638856955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1566294,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e6/56/020f2209.jpg","nickname":"Dpp的小跟班儿","note":"","ucode":"4AF5F9892C575E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390173,"discussion_content":"用来判断*userService是否实现了UserSrv接口，若未实现，则编译不通过；等号右边是类型转换","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629702294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307352,"user_name":"Sch0ng","can_delete":false,"product_type":"c1","uid":1145554,"ip_address":"","ucode":"73F6113931B1AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","comment_is_top":false,"comment_ctime":1629040401,"is_pvip":false,"replies":[{"id":"111384","content":"是的，项目源码结合背后的设计思路，学习效果会翻倍的。学习一次，职业生涯中会一直受益","user_name":"作者回复","comment_id":307352,"uid":"1167883","ip_address":"","utype":1,"ctime":1629242766,"user_name_real":"CK1.0"}],"discussion_count":1,"race_medal":0,"score":"23103876881","product_id":100079601,"comment_content":"结合前面章节的铺垫，介绍iam-apiserver的使用方法、架构和代码实现，前后连贯，逻辑清晰，简洁易懂。<br>顺便一提，跟郑晔老师的《软件设计之美》中讲到的：快速了解一个项目时，要了解项目的模型、接口、实现，核心思想如出一辙。软件设计的路上，殊途同归。","like_count":5,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525123,"discussion_content":"是的，项目源码结合背后的设计思路，学习效果会翻倍的。学习一次，职业生涯中会一直受益","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629242766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309349,"user_name":"徐海浪","can_delete":false,"product_type":"c1","uid":1078528,"ip_address":"","ucode":"21801C420D0610","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/00/618b20da.jpg","comment_is_top":false,"comment_ctime":1630058154,"is_pvip":false,"replies":[{"id":"112009","content":"对的","user_name":"作者回复","comment_id":309349,"uid":"1167883","ip_address":"","utype":1,"ctime":1630112460,"user_name_real":"CK1.0"}],"discussion_count":1,"race_medal":1,"score":"18809927338","product_id":100079601,"comment_content":"练习1：通过component-base共享 REST API 相关代码","like_count":4,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525835,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630112460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308206,"user_name":"陈麒文","can_delete":false,"product_type":"c1","uid":2187256,"ip_address":"","ucode":"41475885FA5AD5","user_header":"https://static001.geekbang.org/account/avatar/00/21/5f/f8/1d16434b.jpg","comment_is_top":false,"comment_ctime":1629450643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10219385235","product_id":100079601,"comment_content":"似懂非懂，还得多看几遍😭","like_count":2},{"had_liked":false,"id":328922,"user_name":"果粒橙","can_delete":false,"product_type":"c1","uid":1272730,"ip_address":"","ucode":"000B15E28C68B6","user_header":"https://static001.geekbang.org/account/avatar/00/13/6b/9a/786b1ed8.jpg","comment_is_top":false,"comment_ctime":1640937625,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"5935904921","product_id":100079601,"comment_content":"学习学习MVC模式，第一次接触","like_count":1},{"had_liked":false,"id":316712,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1634522735,"is_pvip":true,"replies":[{"id":"114918","content":"这里是：控制层能够导入业务层和仓库层的包<br><br>上面有提到：模型层的包可以被仓库层、业务层和控制层导入；","user_name":"作者回复","comment_id":316712,"uid":"1167883","ip_address":"","utype":1,"ctime":1634737364,"user_name_real":"孔令飞"}],"discussion_count":1,"race_medal":0,"score":"5929490031","product_id":100079601,"comment_content":"iam-apiserver 代码架构中「控制层能够导入业务层和仓库层的包」，是不是应该修改为：控制层能够导入业务层和模型层的包。","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528466,"discussion_content":"这里是：控制层能够导入业务层和仓库层的包\n\n上面有提到：模型层的包可以被仓库层、业务层和控制层导入；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634737364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314331,"user_name":"gecko","can_delete":false,"product_type":"c1","uid":1198048,"ip_address":"","ucode":"2B7122536F1A0E","user_header":"https://static001.geekbang.org/account/avatar/00/12/47/e0/1ff26e99.jpg","comment_is_top":false,"comment_ctime":1632972329,"is_pvip":false,"replies":[{"id":"114086","content":"是的","user_name":"作者回复","comment_id":314331,"uid":"1167883","ip_address":"","utype":1,"ctime":1633665100,"user_name_real":"CK1.0"}],"discussion_count":1,"race_medal":0,"score":"5927939625","product_id":100079601,"comment_content":"app包中的 如下类型 <br>type Command struct {<br>\tusage    string<br>\tdesc     string<br>\toptions  CliOptions<br>\tcommands []*Command<br>\trunFunc  RunCommandFunc<br>}<br><br><br>如果 commands 字段 有很多层的话  那么如下实现中<br><br>func (c *Command) cobraCommand() *cobra.Command {<br>\tcmd := &amp;cobra.Command{<br>\t\tUse:   c.usage,<br>\t\tShort: c.desc,<br>\t}<br>\tcmd.SetOutput(os.Stdout)<br>\tcmd.Flags().SortFlags = false<br>\tif len(c.commands) &gt; 0 { &#47;&#47; c 的类型为 *Command，为c的commands 字段赋值  通过 ddCommand 方法装填<br>\t\tfor _, command := range c.commands {<br>\t\t\tcmd.AddCommand(command.cobraCommand()) &#47;&#47; 迭代 直到 commands 切片的 长度为0 <br>\t\t}<br>\t}<br>\tif c.runFunc != nil {<br>\t\tcmd.Run = c.runCommand<br>\t}<br>\tif c.options != nil {<br>\t\tfor _, f := range c.options.Flags().FlagSets {<br>\t\t\tcmd.Flags().AddFlagSet(f)<br>\t\t}<br>\t\t&#47;&#47; c.options.AddFlags(cmd.Flags())<br>\t}<br>\taddHelpCommandFlag(c.usage, cmd.Flags())<br><br>\treturn cmd<br>}<br><br>func (c *Command) AddCommand(cmd *Command) {<br>\tc.commands = append(c.commands, cmd)<br>}<br><br><br>每层的 *cobra.Command  在调用方那里  cobra.Command.AddCommand 是被绑定到同一个层级的 cobra.Command 吗","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527646,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633665100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312656,"user_name":"梓荣","can_delete":false,"product_type":"c1","uid":1596112,"ip_address":"","ucode":"275809CCBF0807","user_header":"https://static001.geekbang.org/account/avatar/00/18/5a/d0/7e58f993.jpg","comment_is_top":false,"comment_ctime":1631930034,"is_pvip":false,"replies":[{"id":"113697","content":"可以试试拆包，将依赖的代码独立一个包，另外2个包import这个包。<br>这种情况很可能说明包设计不合理，需要根据实际情况重新设计包。<br><br>会有的。这部分代码仍然可以放在service目录下<br>","user_name":"作者回复","comment_id":312656,"uid":"1167883","ip_address":"","utype":1,"ctime":1632760793,"user_name_real":"CK1.0"}],"discussion_count":2,"race_medal":0,"score":"5926897330","product_id":100079601,"comment_content":"老师你好。如果出现业务逻辑相互调用，这种情况如何处理较妥？是否有一些业务逻辑的上层不是controller？这部分代码应该放在哪个目录。谢谢。","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527068,"discussion_content":"可以试试拆包，将依赖的代码独立一个包，另外2个包import这个包。\n这种情况很可能说明包设计不合理，需要根据实际情况重新设计包。\n\n会有的。这部分代码仍然可以放在service目录下\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632760793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2328988,"avatar":"","nickname":"Geek1742","note":"","ucode":"2DD20921B865FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396741,"discussion_content":"互相调用有点过了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632487041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310208,"user_name":"Summer  空城","can_delete":false,"product_type":"c1","uid":1337146,"ip_address":"","ucode":"6BDBB70FB6F709","user_header":"https://static001.geekbang.org/account/avatar/00/14/67/3a/0dd9ea02.jpg","comment_is_top":false,"comment_ctime":1630549042,"is_pvip":true,"replies":[{"id":"112571","content":"这里使用的是选项模式，好处是，新加参数选项时，不用修改NewApp代码","user_name":"作者回复","comment_id":310208,"uid":"1167883","ip_address":"","utype":1,"ctime":1630864591,"user_name_real":"CK1.0"}],"discussion_count":1,"race_medal":0,"score":"5925516338","product_id":100079601,"comment_content":"老师，您好，在app&#47;app.go 中 func NewApp(name string, basename string, opts ...Option) *App内部执行Option的方法，其实就是给App设置参数。为什么不来个set方法直接设置，现在这种设置方法感觉绕了一圈。。。。。","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526159,"discussion_content":"这里使用的是选项模式，好处是，新加参数选项时，不用修改NewApp代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630864591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306518,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1628591537,"is_pvip":false,"replies":[{"id":"111437","content":"UI内容不一样，可能表述有点问题","user_name":"作者回复","comment_id":306518,"uid":"1167883","ip_address":"","utype":1,"ctime":1629251660,"user_name_real":"CK1.0"}],"discussion_count":1,"race_medal":0,"score":"5923558833","product_id":100079601,"comment_content":"“独立于 UI ：在无需改变系统其他部分的情况下，UI 可以轻松地改变。例如，在没有改变业务规则的情况下，Web UI 可以替换为控制台 UI。”, 这里的 Web UI和控制台 UI有什么区别啊, 这俩不是一回事吗","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524798,"discussion_content":"UI内容不一样，可能表述有点问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629251660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305517,"user_name":"Geek_b797c1","can_delete":false,"product_type":"c1","uid":2652269,"ip_address":"","ucode":"A70678DCF7EA72","user_header":"","comment_is_top":false,"comment_ctime":1628006336,"is_pvip":false,"replies":[{"id":"110635","content":"老哥可以改下，等着你的PR，哈哈","user_name":"作者回复","comment_id":305517,"uid":"1167883","ip_address":"","utype":1,"ctime":1628165556,"user_name_real":"CK1.0"}],"discussion_count":1,"race_medal":0,"score":"5922973632","product_id":100079601,"comment_content":"大佬，router.go 里面：<br>storeIns, _ := mysql.GetMySQLFactoryOr(nil)<br>userController := user.NewUserController(storeIns)<br>这个写法感觉好怪呀。感觉没必要，在这边初始化一个nil 的store.Factory。是否可以优化一下<br><br>但，我也还没想好如何修改😂","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524413,"discussion_content":"老哥可以改下，等着你的PR，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628165556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358958,"user_name":"3608375821","can_delete":false,"product_type":"c1","uid":3167253,"ip_address":"广东","ucode":"73B86EA22ACDC4","user_header":"","comment_is_top":false,"comment_ctime":1665067379,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665067379","product_id":100079601,"comment_content":"api接口是在哪里注册到router上面的啊，没找到，比如&#47;v1&#47;secrets&#47;","like_count":0},{"had_liked":false,"id":355873,"user_name":"hiDaLao","can_delete":false,"product_type":"c1","uid":2917100,"ip_address":"广东","ucode":"3C2DC2A3A377E4","user_header":"https://static001.geekbang.org/account/avatar/00/2c/82/ec/99b480e8.jpg","comment_is_top":false,"comment_ctime":1661823039,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1661823039","product_id":100079601,"comment_content":"老师，请问下context作为参数一直传下去的目的是什么呢","like_count":0},{"had_liked":false,"id":355780,"user_name":"呆呆","can_delete":false,"product_type":"c1","uid":1324041,"ip_address":"北京","ucode":"04AAAFE302D031","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/09/898d084e.jpg","comment_is_top":false,"comment_ctime":1661745140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661745140","product_id":100079601,"comment_content":"func initRouter(g *gin.Engine) {<br>\tinstallMiddleware(g)<br>\tinstallController(g)<br>}<br>如上apiserver&#47;router.go的函数参数都为gin.Engine，是不是不太对？apiserver应该只与genericapiserver有关系，genericapiserver中集成了gin.Engine， genericapiserver中提供路由注册接口会不会更好些。<br>","like_count":0},{"had_liked":false,"id":354116,"user_name":"Jone_乔泓恺","can_delete":false,"product_type":"c1","uid":1407941,"ip_address":"北京","ucode":"158154301D5E40","user_header":"https://static001.geekbang.org/account/avatar/00/15/7b/c5/35f92dad.jpg","comment_is_top":false,"comment_ctime":1660104644,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660104644","product_id":100079601,"comment_content":"请教：在仓库层如果不在想使用 mysql ，而是换成 etcd ，应该如何修改代码呢？","like_count":0},{"had_liked":false,"id":340841,"user_name":"船长","can_delete":false,"product_type":"c1","uid":1860466,"ip_address":"","ucode":"7CFEAA6C3189F0","user_header":"https://static001.geekbang.org/account/avatar/00/1c/63/72/a85661ee.jpg","comment_is_top":false,"comment_ctime":1649172987,"is_pvip":false,"replies":[{"id":"125545","content":"对，这里可以优化。<br><br>当时这么设计，是为了便捷吧，不用再另外搞一套model定义","user_name":"作者回复","comment_id":340841,"uid":"1167883","ip_address":"","utype":1,"ctime":1651079415,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1649172987","product_id":100079601,"comment_content":"大佬，在模型层中依赖gorm，这种设计好吗？个人感觉模型层中是尽量不要依赖第三方跟某种实现强相关的东西，不知道大佬这么设计是出于什么样的考虑。<br>func (u *User) AfterCreate(tx *gorm.DB) error {<br>\tu.InstanceID = idutil.GetInstanceID(u.ID, &quot;user-&quot;)<br><br>\treturn tx.Save(u).Error<br>}","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568241,"discussion_content":"对，这里可以优化。\n\n当时这么设计，是为了便捷吧，不用再另外搞一套model定义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651079415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338676,"user_name":"逆行*乱世","can_delete":false,"product_type":"c1","uid":1308534,"ip_address":"","ucode":"01BC2EB0F4F1AB","user_header":"https://static001.geekbang.org/account/avatar/00/13/f7/76/16c52796.jpg","comment_is_top":false,"comment_ctime":1647656233,"is_pvip":false,"replies":[{"id":"125561","content":"可能是网络不稳定吧","user_name":"作者回复","comment_id":338676,"uid":"1167883","ip_address":"","utype":1,"ctime":1651080309,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1647656233","product_id":100079601,"comment_content":"➜  iam git:(f9fd52f) go mod vendor<br>go: github.com&#47;marmotedu&#47;errors@v1.0.2: stream error: stream ID 1; INTERNAL_ERROR 请问一下这个啥情况？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568258,"discussion_content":"可能是网络不稳定吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651080309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337264,"user_name":"左耳朵东","can_delete":false,"product_type":"c1","uid":1160678,"ip_address":"","ucode":"60134ACF12BB52","user_header":"https://static001.geekbang.org/account/avatar/00/11/b5/e6/c67f12bd.jpg","comment_is_top":false,"comment_ctime":1646725758,"is_pvip":false,"replies":[{"id":"123428","content":"这样写是不行的吧，dbIns作为参数传入Secrets没啥意义。因为仓库层的db都是固定的，所以如果这么搞整个仓库调用都要加入固定的dbIns。<br><br>store.Secrets(username).List 这种到是可以，Secrets传入的username类似于k8s的namespace","user_name":"作者回复","comment_id":337264,"uid":"1167883","ip_address":"","utype":1,"ctime":1647038228,"user_name_real":"编辑"}],"discussion_count":2,"race_medal":0,"score":"1646725758","product_id":100079601,"comment_content":"业务层和仓库层那里都做了两层抽象，比如仓库层有 Factory 和 SecretStore 两类接口，业务层调用的时候要这样写 s.store.Secrets().Create()。我的疑问是 Factory 这层抽象是不是可以省掉，业务层调用直接这样写 store.Secrets(dbIns).Create() 貌似也可以，这样有什么缺点吗？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555688,"discussion_content":"这样写是不行的吧，dbIns作为参数传入Secrets没啥意义。因为仓库层的db都是固定的，所以如果这么搞整个仓库调用都要加入固定的dbIns。\n\nstore.Secrets(username).List 这种到是可以，Secrets传入的username类似于k8s的namespace","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647038228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1160678,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b5/e6/c67f12bd.jpg","nickname":"左耳朵东","note":"","ucode":"60134ACF12BB52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":555776,"discussion_content":"感谢老师解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647072551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":555688,"ip_address":""},"score":555776,"extra":""}]}]},{"had_liked":false,"id":332752,"user_name":"Dragon Frog","can_delete":false,"product_type":"c1","uid":1510621,"ip_address":"","ucode":"6B4A2ECFA818E2","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/dd/1b12d77d.jpg","comment_is_top":false,"comment_ctime":1643547683,"is_pvip":true,"replies":[{"id":"123453","content":"iam就是按功能划分的。<br><br>比如：如果你要新加一个功能，你首先想到的是在pkg目录创建一个Go包。而不是思考下在那一层来创建Go包。<br><br>其实你说的也多，在代码分层上确实有MVC的设计思路，但是在代码在组织上不是的。","user_name":"作者回复","comment_id":332752,"uid":"1167883","ip_address":"","utype":1,"ctime":1647040156,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1643547683","product_id":100079601,"comment_content":"老师好，有个问题，想麻烦老师解惑一下。<br><br>在前面的课程谈到 “go 的设计哲学是模块划分而不鼓励 mvc 分层结构”，但是实际上我们这个项目的模型仍然是 MVC 划分的，想问问老师为什么最后决定这么设计。<br><br>另外我也大概搜索了一些 Go 的 web 项目，发现大家其实受 MVC 风格影响还是很深的，基本都采用这种设计风格去设计自己的代码架构而不是按功能划分。我目前没有找到一些按功能划分的 Go web 项目，想问问老师有没有知道类似的项目并能推荐一二供大家学习","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555713,"discussion_content":"iam就是按功能划分的。\n\n比如：如果你要新加一个功能，你首先想到的是在pkg目录创建一个Go包。而不是思考下在那一层来创建Go包。\n\n其实你说的也多，在代码分层上确实有MVC的设计思路，但是在代码在组织上不是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647040156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330437,"user_name":"Geek_63505f","can_delete":false,"product_type":"c1","uid":2879366,"ip_address":"","ucode":"E6CA4A7A9057B4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKXjfJWVQGDHmDEI73VQO4dgTzaK5LLz2ax9XUF4FCPy1Oib8aQLibFzpcsiavVVbAQlG4pbrfibdwaYA/132","comment_is_top":false,"comment_ctime":1641977260,"is_pvip":false,"replies":[{"id":"120940","content":"name是平台的登录账号，是需要唯一的","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1642433851,"ip_address":"","comment_id":330437,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1641977260","product_id":100079601,"comment_content":"老师你好！ 我看很多接口都是 &#47;v1&#47;users&#47;:name 这样的用name去定位话会不会不太好，name如果相同的话是不是就有问题了？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546840,"discussion_content":"name是平台的登录账号，是需要唯一的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642433851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1588873,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3e/89/ccc2ebd9.jpg","nickname":"陈晓涛","note":"","ucode":"E80D318348CA47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546835,"discussion_content":"做为参数，那么就得是唯一的，才能获取单独的值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642433722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328082,"user_name":"白羽幽人","can_delete":false,"product_type":"c1","uid":1033688,"ip_address":"","ucode":"EA4852C40A3C94","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/d8/afd6143f.jpg","comment_is_top":false,"comment_ctime":1640520878,"is_pvip":false,"replies":[{"id":"119708","content":"是的","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1640825770,"ip_address":"","comment_id":328082,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640520878","product_id":100079601,"comment_content":"app.WithRunFunc(run(opts)),<br><br>for _, o := range opts {<br>\to(a)<br>}<br><br>a.buildCommand()<br><br>老师这个 run 注册方法，是不是在 buildCommand 之前运行呢。","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542653,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640825770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325218,"user_name":"Gary爱学习","can_delete":false,"product_type":"c1","uid":1084975,"ip_address":"","ucode":"394FAD3E29E903","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/2f/26e97ba5.jpg","comment_is_top":false,"comment_ctime":1638867601,"is_pvip":false,"replies":[{"id":"118342","content":"加油！","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1639399365,"ip_address":"","comment_id":325218,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638867601","product_id":100079601,"comment_content":"设计思想很懂，就是不太熟练go，看的吃力，得多摸一摸代码。","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538337,"discussion_content":"加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639399365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322802,"user_name":"印记碾碎回忆！","can_delete":false,"product_type":"c1","uid":1544599,"ip_address":"","ucode":"B58B74F40C0D69","user_header":"https://static001.geekbang.org/account/avatar/00/17/91/97/a3c8f2e6.jpg","comment_is_top":false,"comment_ctime":1637594115,"is_pvip":false,"replies":[{"id":"117696","content":"对，有意设置成这样的。目的是通过newSecrets传入不同的参数，可以创建不同的实例。<br><br>你可以参考工厂模式的介绍。","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1638363296,"ip_address":"","comment_id":322802,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637594115","product_id":100079601,"comment_content":"~~~<br>func (s *SecretController) Create(c *gin.Context) {<br>    ...<br>  if err := s.srv.Secrets().Create(c, &amp;r, metav1.CreateOptions{}); err != nil {<br>    core.WriteResponse(c, err, nil)<br><br>    return<br>  }<br>  ...<br>}<br>~~~<br><br>看了下这里是每次都调用`newSecrets`构造一个`secretService`的对象，请问这个是有意设计成的这样吗？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535180,"discussion_content":"对，有意设置成这样的。目的是通过newSecrets传入不同的参数，可以创建不同的实例。\n\n你可以参考工厂模式的介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638363296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321382,"user_name":"Geek_a15aca","can_delete":false,"product_type":"c1","uid":2435485,"ip_address":"","ucode":"A7FEDA27B029BA","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLJ86tichGXtZMLLhicb8V0wJE92xdpQmVW1u06ZkT7BkvxyZMfWcVluyUdMrz0cBIkuX9MhXm2PZOQ/132","comment_is_top":false,"comment_ctime":1636818597,"is_pvip":false,"replies":[{"id":"116850","content":"对， 不鼓励MVC分层结构","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1637061452,"ip_address":"","comment_id":321382,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636818597","product_id":100079601,"comment_content":"不是之前的课程谈到go的设计哲学是模块划分而不鼓励mvc分层结构吗？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530365,"discussion_content":"对， 不鼓励MVC分层结构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637061452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320398,"user_name":"白羽幽人","can_delete":false,"product_type":"c1","uid":1033688,"ip_address":"","ucode":"EA4852C40A3C94","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/d8/afd6143f.jpg","comment_is_top":false,"comment_ctime":1636293100,"is_pvip":false,"replies":[{"id":"116857","content":"仓库只建议存放模板，不建议存放具体的配置。每个环境具体的配置，应该由专门的配置管理系统来管理维护。","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1637062028,"ip_address":"","comment_id":320398,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636293100","product_id":100079601,"comment_content":"老师： 这个config 下怎么区分不同环境的配置文件呢","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530374,"discussion_content":"仓库只建议存放模板，不建议存放具体的配置。每个环境具体的配置，应该由专门的配置管理系统来管理维护。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637062028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318384,"user_name":"drawping","can_delete":false,"product_type":"c1","uid":1007204,"ip_address":"","ucode":"A5F0E179CBA217","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/64/1becc599.jpg","comment_is_top":false,"comment_ctime":1635264136,"is_pvip":false,"replies":[{"id":"115978","content":"是","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1636005029,"ip_address":"","comment_id":318384,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635264136","product_id":100079601,"comment_content":"这样的模型，是不是贫血模型？ ","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529216,"discussion_content":"是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636005029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316714,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1634523583,"is_pvip":true,"replies":[{"id":"114917","content":"感谢老哥反馈，我优化下","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1634737284,"ip_address":"","comment_id":316714,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634523583","product_id":100079601,"comment_content":"在描述「控制层如何跟业务层进行通信」时，下面的代码贴上 SecretSrv 接口的定义，可能会更好。","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528468,"discussion_content":"感谢老哥反馈，我优化下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634737284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315062,"user_name":"gecko","can_delete":false,"product_type":"c1","uid":1198048,"ip_address":"","ucode":"2B7122536F1A0E","user_header":"https://static001.geekbang.org/account/avatar/00/12/47/e0/1ff26e99.jpg","comment_is_top":false,"comment_ctime":1633677090,"is_pvip":false,"replies":[{"id":"114945","content":"返回一个Option，这个Option可以设置：当命令行非选项参数个数 &gt; 0时，cobra框架包fmt.Errorf指定的错误。可以在WithOption(option)函数中使用这个Option","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1634743499,"ip_address":"","comment_id":315062,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633677090","product_id":100079601,"comment_content":"请教老师问题<br>func WithDefaultValidArgs() Option {<br>\treturn func(a *App) {<br>\t\ta.args = func(cmd *cobra.Command, args []string) error {<br>\t\t\tfor _, arg := range args {<br>\t\t\t\tif len(arg) &gt; 0 {<br>\t\t\t\t\treturn fmt.Errorf(&quot;%q does not take any arguments, got %q&quot;, cmd.CommandPath(), args)<br>\t\t\t\t}<br>\t\t\t}<br><br>\t\t\treturn nil<br>\t\t}<br>\t}<br>}<br><br><br>上面代码中对App.args 进行赋值，它是一个函数类型  函数签名如下<br>type PositionalArgs func(cmd *Command, args []string) error<br><br>赋值时 其中自定义了其内部实现，其中对于入参的处理 仅用到了 args<br><br>没太明白 这个自定义的实现是干啥的 以及什么时候会触发这个return fmt.Errorf(）<br>请老师指教","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527864,"discussion_content":"返回一个Option，这个Option可以设置：当命令行非选项参数个数 &amp;gt; 0时，cobra框架包fmt.Errorf指定的错误。可以在WithOption(option)函数中使用这个Option","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634743499,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}