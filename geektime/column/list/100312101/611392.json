{"id":611392,"title":"02｜异步化实践：莫名其妙出现线程池耗尽怎么办？","content":"<p>你好，我是何辉。今天我们来探索Dubbo框架的第一道特色风味，异步化实践。</p><p>Dubbo以前作为一个高性能的RPC框架，现在已然上升成为了一个微服务框架，但本质还是用来提供RPC服务的，这就势必存在同步调用和异步调用的方式。</p><p>同步调用方式比较简单直接，但我们也常常遇到因为调用量增加，原本不出幺蛾子的功能突然爆发问题的情况。比如：</p><ul>\n<li>关于 Socket 的 BIO 程序，随着调用量的增加，为什么用着用着就出现了一些性能问题呢？</li>\n<li>某部分非常复杂又有点耗时的功能，测试环境验证得好好的，一放到有着高流量的产线运行，为什么莫名其妙就出现线程池耗尽问题呢？</li>\n</ul><p>这么说有点抽象，我们结合具体代码来看看。相信你肯定写过这样的代码：</p><pre><code class=\"language-java\">@DubboService\n@Component\npublic class AsyncOrderFacadeImpl implements AsyncOrderFacade {\n    @Override\n    public OrderInfo queryOrderById(String id) {\n        // 这里模拟执行一段耗时的业务逻辑\n        sleepInner(5000);\n        OrderInfo resultInfo = new OrderInfo(\n                \"GeekDubbo\",\n                \"服务方异步方式之RpcContext.startAsync#\" + id,\n                new BigDecimal(129));\n        return resultInfo;\n    }\n}\n</code></pre><!-- [[[read_end]]] --><p>这就是Dubbo服务提供方的一个普通的耗时功能服务，在 queryOrderById 中执行一段耗时的业务逻辑后，拿到 resultInfo 结果并返回。</p><p><strong>但如果queryOrderById这个方法的调用量上来了，很容易导致Dubbo 线程池耗尽。</strong></p><p>因为Dubbo 线程池总数默认是固定的，200个，假设系统在单位时间内可以处理500个请求，一旦queryOrderById 的请求流量上来了，极端情况下，可能会出现200个线程都在处理这个耗时的任务，那么剩下的300个请求，即使是不耗时的功能，也很难有机会拿到线程资源。所以，紧接着就导致Dubbo 线程池耗尽了。</p><p>为了让这种耗时的请求尽量不占用公共的线程池资源，我们就要开始琢磨异步了。</p><p>我们来尝试一下把这段代码优化成异步形式。</p><h2>如何异步处理服务</h2><p>你也许会说，这有什么难的，早在 Java 入门的时候我们就学过，通过 new Thread 并传入 Runnable 实现类可以实现异步处理。所以，这里直接把 queryOrderById 的逻辑全部包在 new Thread 的 run 方法中不就完事了么？</p><p>信心满满的你，可能会写出这样的代码：</p><pre><code class=\"language-java\">@DubboService\n@Component\npublic class AsyncOrderFacadeImpl implements AsyncOrderFacade {\n    @Override\n    public OrderInfo queryOrderById(String id) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                // 这里模拟执行一段耗时的业务逻辑\n                sleepInner(5000);\n\n                OrderInfo resultInfo = new OrderInfo(\n                        \"GeekDubbo\",\n                        \"服务方异步方式之RpcContext.startAsync#\" + id,\n                        new BigDecimal(129));\n\n                return resultInfo;\n            }\n        }).start();\n\n        return ???\n    }\n}\t\n</code></pre><p>修改的重点就是在 queryOrderById 中 new 了一个 Thread 并传入了 Runnable 内部类来处理。</p><p>不过这么修改后，你遇到了两个报红的地方，开始犯难了：</p><ul>\n<li>问题1：Thread 中 Runnable 的 run 方法，怎么把 resultInfo 结果返回给到 queryOrderById 方法的 OrderInfo 返回值呢？</li>\n<li>问题2：new Thread 的 start 方法算是开启了异步，可是 start 方法一旦执行就好比开启了异步分支逻辑，最终的“<strong>return ???</strong>”该返回什么呢？</li>\n</ul><p>问题2暂时还没有想到什么好的方式，但问题1倒是有思路了，我们都知道，创建线程的方式有 new Thread、Runnable、Callable 这么几种，既然 Runnable 无法返回结果对象，而 Callable 是支持有返回值的，那第一想法自然是换成 Callable，这下总可以可以把 resultInfo 返回了吧。</p><p>但你一旦决定要使用 Callable 的时候，按前面代码的写法是<strong>要和 Thread 类结合使用的，所以紧接着我们就得问问 Thread 这个类是否答应</strong>，来看看 Thread 类的一些 API：</p><pre><code class=\"language-java\">java.lang.Thread#Thread()\njava.lang.Thread#Thread(java.lang.Runnable)\njava.lang.Thread#Thread(java.lang.ThreadGroup, java.lang.Runnable)\njava.lang.Thread#Thread(java.lang.String)\njava.lang.Thread#Thread(java.lang.ThreadGroup, java.lang.String)\njava.lang.Thread#Thread(java.lang.Runnable, java.lang.String)\njava.lang.Thread#Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String)\njava.lang.Thread#Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long)\njava.lang.Thread#Thread(java.lang.ThreadGroup, java.lang.Runnable, java.lang.String, long, boolean)\njava.lang.Thread#currentThread\njava.lang.Thread#yield\njava.lang.Thread#sleep(long)\njava.lang.Thread#sleep(long, int)\njava.lang.Thread#onSpinWait\njava.lang.Thread#start\njava.lang.Thread#run\njava.lang.Thread#stop\njava.lang.Thread#interrupt\njava.lang.Thread#interrupted\njava.lang.Thread#suspend\njava.lang.Thread#resume\njava.lang.Thread#activeCount\njava.lang.Thread#enumerate\njava.lang.Thread#countStackFrames\njava.lang.Thread#join(long)\njava.lang.Thread#join(long, int)\njava.lang.Thread#join()\njava.lang.Thread#dumpStack\njava.lang.Thread#checkAccess\njava.lang.Thread#toString\njava.lang.Thread#holdsLock\n</code></pre><p>从 Thread 的 API 列表中，可以发现 Thread 类自始至终都没有接收 Callable 类型的构造方法，那么，使用 Callable 这条路我们要彻底放弃了。</p><p>既然支持有返回值的Callable不可行，也找不到替换，是否可以尝试直接替换掉 new Thread 走异步的新方式呢？</p><p><strong>其实除了显性地通过 new Thread 来处理异步的形式，还可以通过隐性的方式来处理异步形式。</strong>一谈到隐性方式来处理异步，相信你也马上想到了——线程池，线程池就是妥妥的异步方式了，应该可以实现吧。</p><p>我们再来尝试一下改用线程池的实现逻辑方式：</p><pre><code class=\"language-java\">@DubboService\n@Component\npublic class AsyncOrderFacadeImpl implements AsyncOrderFacade {\n    @Override\n    public OrderInfo queryOrderById(String id) {\n        // 创建线程池对象\n        ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n        cachedThreadPool.execute(new Runnable() {\n            @Override\n            public void run() {\n                // 这里模拟执行一段耗时的业务逻辑\n                sleepInner(5000);\n                OrderInfo resultInfo = new OrderInfo(\n                        \"GeekDubbo\",\n                        \"服务方异步方式之RpcContext.startAsync#\" + id,\n                        new BigDecimal(129));\n                System.out.println(resultInfo);\n            }\n        });\n        return ???;\n    }\n}\n</code></pre><p>这段代码在 queryOrderById 中创建了一个线程池，然后将 Runnable 内部类放到线程池中去执行。</p><p>但这么修改后，你发现还是遇到了之前类似的问题：</p><ul>\n<li>问题3：还是 Runnable 老问题，虽然放到了 cachedThreadPool 线程池中去执行了，但是这个 resultInfo 结果还是没有办法返回。</li>\n<li>问题4：再次遇到了 cachedThreadPool.execute 方法一旦执行就好比开启了异步分支逻辑，那么最终的 “<strong>return ???</strong>” 这个地方该返回什么呢？</li>\n</ul><p>我们还得继续想办法。</p><h2>两种思路</h2><p>现在遇到的核心问题是异步化的时候无法返回结果，怎么办？</p><p>之前我们一直沿着返回值这个方向思考，但已经选择了线程池的实现，如果能有一个存储媒介来存储异步化的结果，然后再想办法把存储媒介中的数据取出来返回回去，岂不是更好？</p><p>于是现在的思路就变成了：<strong>在 queryOrderById 方法中开始异步化分支处理，紧接着在异步化分支中得到异步结果，然后把异步结果存储到某个地方，最后再看看谁可以取出这个异步结果并返回。</strong></p><p>可是谁有这个能力可以感知到这个异步结果呢？我们仔细思考提供方接收请求的整个流程。</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/ef/e02319717f4f8a6994fe2d7290d70aef.jpg?wh=1920x630\" alt=\"图片\"></p><p>这里其实有两种方案，一种是看提供方的所有方法，在处理请求时有没有共同的必经之路，或者第二种也可以看在响应数据时有没有共同的API可以直接返回数据。我们就这两种思路仔细分析。</p><h3>1. 处理请求时共同的必经之路</h3><p>探索接收请求的整个流程，想找到必经之路，就相当于寻找一种可以拦截所有方法的流程机制，如果你能想到拦截，问题就好办了，在拦截处想办法拿到异步结果并返回就可以了，大致流程就像这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/92/33/9242b10eb91aafb57ff09a794b439e33.jpg?wh=1920x1131\" alt=\"图片\"></p><p>调用前后的形式有了明显变化，按照正常的调用思维，queryOrderById 的方法一定会被拦截到。但这里有个问题我们需要认真思考，能拦截到什么呢？</p><p>因为 queryOrderById 走了异步分支，可能导致最终什么也没拦截到，所以我们要让拦截处想办法感知到 queryOrderById 内部实现是否走了异步处理，从代码层面上，<strong>就得引入一个变量，让拦截处一旦感知到业务接口</strong>（比如这里的queryOrderById）<strong>开启了异步化模式处理</strong>，就可以理所当然地直接从存储异步结果的地方，把结果取回并返回。</p><p>这个思路看上去可行，我们接着看第二种思路，探索发送响应数据共同经历的API。</p><h3>2. 响应数据时共同的API</h3><p>既然数据要发送回去，就需要经过网络传输，那就一定与网络模块脱不了干系。Dubbo框架中的网络模块，默认是netty网络通信模块，所以只要想办法把数据通过netty发送回去，也是可以做到返回异步结果的。</p><p>兴奋的你构思出了大致流程：</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/c9/a5d281302b13c8f0a370004ffe1881c9.jpg?wh=1920x1036\" alt=\"图片\"></p><p>流程图变化不大，只是在异步化的地方，需要将异步化的结果直接发送返回给到调用方。其实有点像 BIO 程序，在ServerSocket#accept 方法返回值中得到 recvSocket 句柄，然后将该 recvSocket 句柄传入到异步化的逻辑中，待异步化逻辑处理完得到结果后，再调用 recvSocket 将结果写回去。</p><p>但是想拿到Dubbo中接收请求连接的 recvSocket 句柄对象，可不是一件简单的事情。毕竟Dubbo框架的存在就是为了帮你封装了一系列网络通信细节，可我们想拿通信句柄，岂不是和Dubbo框架对着干么？</p><p>其实所有框架都是一样的，<strong>如果没有驾驭底层源码的强悍能力，最好还是不要试图干预框架底层去实现一些业务逻辑的操作</strong>；即使有能力，也得站在上帝视角审视一下，<strong>你的改动是否符合框架的设计理念</strong>，不然很可能改得一团糟，花了大量时间，效果还不咋地。</p><p>所以这里我们直接干预Dubbo底层的通信句柄有点不太合适，第二种思路不可行，还是要转向第一种思路——拦截。</p><h3>如何实现拦截并返回结果</h3><p>对于拦截来说，首先我们要解决感知异步化模式处理的变量问题，而且这个变量还不能引发多线程问题。</p><p>因为这个变量和当前处理业务的线程息息相关，我们要么借助本地线程 ThreadLocal 来存储，要么借助处理业务的上下文对象来存储。</p><p>如果借助本地线程 ThreadLocal 来存储，又会遇到 queryOrderById 所在的线程与 cachedThreadPool 中的线程相互通信的问题。因为 ThreadLocal 存储的内容位于线程私有区域，从代码层面则体现在  java.lang.Thread#threadLocals 这个私有变量上，这也决定了，不同的线程，私有区域是无法相互访问的。</p><p>所以这里<strong>采用上下文对象来存储，那异步化的结果也就毋庸置疑存储在上下文对象中</strong>。</p><p>好，我们再来顺一遍流程，首先拦截识别异步，当拦截处发现有异步化模式的变量，从上下文对象中取出异步化结果并返回。</p><p><img src=\"https://static001.geekbang.org/resource/image/b4/63/b4f759e435e98814f1ed3e0d23c90963.jpg?wh=1920x956\" alt=\"图片\"></p><p>乍一看好像没什么问题，之前的问题1～4也都解决了。</p><p>但注意一点，<strong>凡是异步问题，都需要考虑当前线程如何获取其他线程内数据</strong>，所以这里我们要思考：如果异步化处理有点耗时，拦截处从异步化结果中取不到结果该怎么办呢？不停轮询等待吗？还是要作何处理呢？</p><p>这个问题抽象一下其实就是：A线程执行到某个环节，需要B线程的执行结果，但是B线程还未执行完，A线程是如何应对的？所以，本质回归到了多线程通信上。</p><p>要实现线程间的通信，想必你能说出一堆方案来，但是我们这里关注尽可能用较少的代码使A线程拿到B线程的结果，B线程需要执行的时间可长可短，但有个度。所以问题就变成了：A线程在一定时间内获取B线程的结果，指定时间内拿到结果则万事大吉，否则该抛错还是得抛错。</p><p>那么现在就需要你思考了：<strong>JDK 并发相关的所有类，哪个是可以在多线程中充当存储媒介而且还支持一定时间内返回结果的？</strong></p><p>相信熟悉 JDK 的你已经想到了，非 java.util.concurrent.Future 莫属，这是 Java 1.5 引入的用于异步结果的获取，当异步执行结束之后，结果将会保存在 Future 当中。</p><p>但 java.util.concurrent.Future 是一个接口，我们得找一个它的实现类来用，也就是 java.util.concurrent.CompletableFuture，而且它的 java.util.concurrent.CompletableFuture#get(long timeout, TimeUnit unit) 方法支持传入超时时间，也正好适合我们的场景。</p><p>到这里，我们把遇到的问题都解决了，接下来就一起来看看该如何改造 queryOrderById 这个方法：</p><pre><code class=\"language-java\">@DubboService\n@Component\npublic class AsyncOrderFacadeImpl implements AsyncOrderFacade {\n    @Override\n    public OrderInfo queryOrderById(String id) {\n        // 创建线程池对象\n        ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n        \n        // 开启异步化操作模式，标识异步化模式开始\n        AsyncContext asyncContext = RpcContext.startAsync();\n        \n        // 利用线程池来处理 queryOrderById 的核心业务逻辑\n        cachedThreadPool.execute(new Runnable() {\n            @Override\n            public void run() {\n                // 将 queryOrderById 所在线程的上下文信息同步到该子线程中\n                asyncContext.signalContextSwitch();\n                \n                // 这里模拟执行一段耗时的业务逻辑\n                sleepInner(5000);\n                OrderInfo resultInfo = new OrderInfo(\n                        \"GeekDubbo\",\n                        \"服务方异步方式之RpcContext.startAsync#\" + id,\n                        new BigDecimal(129));\n                System.out.println(resultInfo);\n                \n                // 利用 asyncContext 将 resultInfo 返回回去\n                asyncContext.write(resultInfo);\n            }\n        });\n        return null;\n    }\n}\n</code></pre><p>我们在 queryOrderById 中创建了一个线程池，然后把 Runnable 内部类放到线程池中去执行，并且存在一个上下文信息的传递动作，最后在 Runnable 实现类中，将异步结果写入到上下文对象。</p><p>核心实现就3点：</p><ol>\n<li>定义线程池对象，通过 RpcContext.startAsync 方法开启异步模式；</li>\n<li>在异步线程中通过 asyncContext.signalContextSwitch 同步父线程的上下文信息；</li>\n<li>在异步线程中将异步结果通过 asyncContext.write 写入到异步线程的上下文信息中。</li>\n</ol><p>我们最终实现的代码看似简单，如果研究其中的技术实现细节，现在你一定能发现别有一番风味。</p><p><strong>这就是设计方式的问题，有的框架在设计功能时，呈现的形式是那么地讨人喜欢。</strong>就像平时我们调用别人优秀开源框架的一个方法，你发现这个方法有个可选参数支持你传入一个 Executor 或 ExecutorService 对象，恰好能满足需求，你是不是会疑惑为什么别人要这么设计。</p><p>接下来就让我们来看看，Dubbo这个优秀框架，在源码层面是怎么实现异步的，和我们的思路异同点在哪里。</p><h2>Dubbo异步实现原理</h2><p>首先，还是定义线程池对象，在Dubbo中 RpcContext.startAsync 方法意味着异步模式的开启：</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/bb/c2455029d054a6d694019191827d97bb.jpg?wh=1920x1058\" alt=\"图片\"></p><p>我们追踪源码的调用流程，可以发现最终是通过 CAS 原子性的方式创建了一个 java.util.concurrent.CompletableFuture 对象，这个对象就存储在当前的上下文 org.apache.dubbo.rpc.RpcContextAttachment 对象中。</p><p>然后，需要在异步线程中同步父线程的上下文信息：</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/c9/1ea249f6cd8023b98d8963aff451c7c9.jpg?wh=1920x1719\" alt=\"图片\"></p><p>可以看到，Dubbo 框架，也是用的 asyncContext.signalContextSwitch 同步不同线程间的信息，也就是信息的拷贝，只不过这个拷贝需要利用到异步模式开启之后的返回对象 asyncContext。</p><p>因为 asyncContext 富含上下文信息，<strong>只需要把这个所谓的 asyncContext 对象传入到子线程中，然后将 asyncContext 中的上下文信息充分拷贝到子线程中</strong>，这样，子线程处理所需要的任何信息就不会因为开启了异步化处理而缺失。</p><p>最后的第三步就是在异步线程中，将异步结果写入到异步线程的上下文信息中：</p><pre><code class=\"language-java\">// org.apache.dubbo.rpc.AsyncContextImpl#write\npublic void write(Object value) {\n    if (isAsyncStarted() &amp;&amp; stop()) {\n        if (value instanceof Throwable) {\n            Throwable bizExe = (Throwable) value;\n            future.completeExceptionally(bizExe);\n        } else {\n            future.complete(value);\n        }\n    } else {\n        throw new IllegalStateException(\"The async response has probably been wrote back by another thread, or the asyncContext has been closed.\");\n    }\n}\n</code></pre><p>Dubbo 用 asyncContext.write 写入异步结果，通过 write 方法的查看，最终我们的异步化结果是存入了 java.util.concurrent.CompletableFuture 对象中，这样拦截处只需要调用 java.util.concurrent.CompletableFuture#get(long timeout, TimeUnit unit) 方法就可以很轻松地拿到异步化结果了。</p><h2>异步应用场景</h2><p>Dubbo 的异步实现原理，相信你已经非常清楚了，那哪些应用场景可以考虑异步呢？我们还是结合源码思考。</p><p>第一，我们定义了线程池，你可能会认为定义线程池的目的就是为了异步化操作，其实不是，因为异步化的操作会使 queryOrderById 方法立马返回，也就是说，异步化耗时的操作并没有在 queryOrderById 方法所在线程中继续占用资源，而是在新开辟的线程池中占用资源。</p><p>所以<strong>对于一些IO耗时的操作，比较影响客户体验和使用性能的一些地方</strong>，我们是可以采用异步处理的。</p><p>其次，因为 queryOrderById 开启异步操作后就立马返回了，queryOrderById 所在的线程和异步线程没有太多瓜葛，异步线程的完成与否，不太影响 queryOrderById 的返回操作。</p><p>所以，<strong>若某段业务逻辑开启异步执行后不太影响主线程的原有业务逻辑</strong>，也是可以考虑采取异步处理的。</p><p>最后，在 queryOrderById 这段简单的逻辑中，只开启了一个异步化的操作，站在时序的角度上看，queryOrderById 方法返回了，但是异步化的逻辑还在慢慢执行着，完全对时序的先后顺序没有严格要求。所以，<strong>时序上没有严格要求的业务逻辑</strong>，也是可以采用异步处理的。</p><h2>总结</h2><p>今天，我们从一段普通的提供方代码开始，分析遇到调用量暴涨后，如何进行异步化改造，以避免Dubbo线程池耗尽。改造核心有三要素：开启异步模式、衔接上下文信息、将结果写入到上下文中。</p><p>Dubbo的实现思路是，首先通过 RpcContext.startAsync 方法定义线程池对象开启异步模式；然后在异步线程中，通过 asyncContext.signalContextSwitch 同步父线程的上下文信息；最后将异步结果通过 asyncContext.write 写入到异步线程的上下文信息中，而存储异步结果的核心关键类是CompletableFuture。</p><p>异步的应用场景主要有3类：IO耗时、无业务牵连、无时序要求。</p><h3>思考题</h3><p>你已经学会了如何进行异步化改造，也了解了异步改造的核心重要类 CompletableFuture， 在这个核心类中还有很多好用的异步调用方法，为了帮助你深入理解，我设计了一道有趣的多任务场景题：</p><p><img src=\"https://static001.geekbang.org/resource/image/af/07/af2f2ca0a5117f56bdc5e9f744462707.jpg?wh=1920x1255\" alt=\"图片\"></p><ul>\n<li>任务一：执行任务 TASK-A1，然后并发执行任务 TASK-B1、TASK-C1，再异步执行 TASK-D1；</li>\n<li>任务二：执行任务 TASK-A2，然后并发执行任务 TASK-B2、TASK-C2，但是 TASK-B2、TASK-C2 中任意一个完成后，再异步执行 TASK-D2；</li>\n</ul><p>当两个任务完成之后，再执行 Result 得到最终结果，任务总超时时间设置为5s，超时则返回0。图中每个任务中的红色数字代表着每个任务的数值，请你针对图中的多任务复杂场景，充分利用 CompletableFuture 中的一些 API 编写出代码，并打印出最终的累加和。</p><p>期待看到你的思考，如果你对dubbo的异步化实践还有什么困惑，欢迎在留言区提问，我会第一时间回复。</p><p>如果觉得今天的内容对你有帮助，也欢迎分享给身边的朋友一起讨论。我们下一讲见。</p><h3>01思考题参考</h3><p>上一期的问题是从一段调用超时的异常日志中，能收集出哪些有用的信息？异常日志为：</p><pre><code class=\"language-java\">Exception in thread \"main\" org.apache.dubbo.rpc.RpcException: Failed to invoke the method sayHello in the service com.hmilyylimh.cloud.facade.demo.DemoFacade. Tried 3 times of the providers [192.168.100.183:28040] (1/1) from the registry 127.0.0.1:2181 on the consumer 192.168.100.183 using the dubbo version 3.0.7. Last error is: Invoke remote method timeout. method: sayHello, provider: DefaultServiceInstance{serviceName='dubbo-04-xml-boot-provider', host='192.168.100.183', port=28040, enabled=true, healthy=true, metadata={dubbo.endpoints=[{\"port\":28040,\"protocol\":\"dubbo\"}], dubbo.metadata-service.url-params={\"connections\":\"1\",\"version\":\"1.0.0\",\"dubbo\":\"2.0.2\",\"release\":\"3.0.7\",\"side\":\"provider\",\"port\":\"28040\",\"protocol\":\"dubbo\"}, dubbo.metadata.revision=7c65b86f6f680876cbb333cb7c92c6f6, dubbo.metadata.storage-type=local}}, service{name='com.hmilyylimh.cloud.facade.demo.DemoFacade',group='null',version='null',protocol='dubbo',params={side=provider, application=dubbo-04-xml-boot-provider, release=3.0.7, methods=sayHello,say, background=false, deprecated=false, dubbo=2.0.2, dynamic=true, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, service-name-mapping=true, generic=false, anyhost=true},}, cause: org.apache.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2022-11-12 13:50:44.215, end time: 2022-11-12 13:50:45.229, client elapsed: 1 ms, server elapsed: 1013 ms, timeout: 1000 ms, request: Request [id=3, version=2.0.2, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=sayHello, parameterTypes=[class java.lang.String], arguments=[Geek], attachments={path=com.hmilyylimh.cloud.facade.demo.DemoFacade, remote.application=dubbo-04-xml-boot-consumer, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, version=0.0.0, timeout=1000}]], channel: /192.168.100.183:57977 -&gt; /192.168.100.183:28040\n\tat org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:114)\n\tat org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker.invoke(AbstractClusterInvoker.java:340)\n\t... 36 more\nCaused by: java.util.concurrent.ExecutionException: org.apache.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2022-11-12 13:50:44.215, end time: 2022-11-12 13:50:45.229, client elapsed: 1 ms, server elapsed: 1013 ms, timeout: 1000 ms, request: Request [id=3, version=2.0.2, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=sayHello, parameterTypes=[class java.lang.String], arguments=[Geek], attachments={path=com.hmilyylimh.cloud.facade.demo.DemoFacade, remote.application=dubbo-04-xml-boot-consumer, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, version=0.0.0, timeout=1000}]], channel: /192.168.100.183:57977 -&gt; /192.168.100.183:28040\n\tat java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:395)\n\tat java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2093)\n\t... 24 more\nCaused by: org.apache.dubbo.remoting.TimeoutException: Waiting server-side response timeout by scan timer. start time: 2022-11-12 13:50:44.215, end time: 2022-11-12 13:50:45.229, client elapsed: 1 ms, server elapsed: 1013 ms, timeout: 1000 ms, request: Request [id=3, version=2.0.2, twoway=true, event=false, broken=false, data=RpcInvocation [methodName=sayHello, parameterTypes=[class java.lang.String], arguments=[Geek], attachments={path=com.hmilyylimh.cloud.facade.demo.DemoFacade, remote.application=dubbo-04-xml-boot-consumer, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, version=0.0.0, timeout=1000}]], channel: /192.168.100.183:57977 -&gt; /192.168.100.183:28040\n\tat org.apache.dubbo.remoting.exchange.support.DefaultFuture.doReceived(DefaultFuture.java:212)\n\tat org.apache.dubbo.remoting.exchange.support.DefaultFuture.received(DefaultFuture.java:176)\n\t... 29 more\n</code></pre><p>解答这道题需要我们有点耐心，仔细观察异常日志中的一些信息，当你有过仔细分析的经验后，未来再碰到类似的异常，就能轻而易举抓出一些关键信息分析出问题。</p><p>正好异常信息有三段，我们就分段讲解吧。</p><p>第一段：org.apache.dubbo.rpc.RpcException 异常</p><pre><code class=\"language-plain\">Failed to invoke the method sayHello in the service com.hmilyylimh.cloud.facade.demo.DemoFacade\n</code></pre><p>说明是在调用 DemoFacade 中的 sayHello 方法出现了异常。</p><p><code>Tried 3 times</code> 说明尝试了 3 次远程调用。 <code>of the providers [192.168.100.183:28040]</code> 罗列出来地址和端口，都是调用失败的服务提供者的信息。</p><p><code>from the registry 127.0.0.1:2181</code> 说明应用连接的是 127.0.0.1:2181 这个注册中心地址。 <code>dubbo version 3.0.7</code> 应用中使用的是 Dubbo 的 3.0.7 版本。</p><p><code>Last error is: Invoke remote method timeout.</code> 上一次错误是调用远端的方法超时，即调用 DemoFacade 中的 sayHello 方法出现了超时。<code>dubbo.endpoints=[{\"port\":28040,\"protocol\":\"dubbo\"}]</code> 说明使用的是dubbo协议，协议在提供方的 28040 端口上提供服务。</p><pre><code class=\"language-plain\">service{name='com.hmilyylimh.cloud.facade.demo.DemoFacade',group='null',version='null',protocol='dubbo',params={side=provider, application=dubbo-04-xml-boot-provider, release=3.0.7, methods=sayHello,say, background=false, deprecated=false, dubbo=2.0.2, dynamic=true, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, service-name-mapping=true, generic=false, anyhost=true},}\n</code></pre><p>重点说下，DemoFacade 类中有 sayHello、say 两个方法暴露了服务，generic 为 false 说明不是泛化调用形式。</p><pre><code class=\"language-plain\"> client elapsed: 1 ms, server elapsed: 1013 ms, timeout: 1000 ms \n</code></pre><p>说明客户端很快将信息发送出去了，超时时间为 1000ms，而服务端从超时到被检测到耗费了 13ms，可谓是检测超时的机制之迅速。</p><pre><code class=\"language-plain\"> FailoverClusterInvoker.doInvoke(FailoverClusterInvoker.java:114) \n</code></pre><p>目前使用的是故障转移策略。</p><p>第二段：java.util.concurrent.ExecutionException 异常</p><pre><code class=\"language-plain\">RpcInvocation [methodName=sayHello, parameterTypes=[class java.lang.String], arguments=[Geek], attachments={path=com.hmilyylimh.cloud.facade.demo.DemoFacade, remote.application=dubbo-04-xml-boot-consumer, interface=com.hmilyylimh.cloud.facade.demo.DemoFacade, version=0.0.0, timeout=1000}]\n</code></pre><p>调用的是 DemoFacade 类中的 sayHello 方法，该方法的方法入参类型为 java.lang.String 类型，调用时传的参数为 Geek。</p><pre><code class=\"language-plain\">channel: /192.168.100.183:57977 -&gt; /192.168.100.183:28040\n</code></pre><p>通信的两端，分别为客户端和服务端的IP和PORT。</p><p>第三段：org.apache.dubbo.remoting.TimeoutException 异常</p><pre><code class=\"language-plain\">Waiting server-side response timeout by scan timer\n</code></pre><p>说明被 org.apache.dubbo.rpc.protocol.tri.DeadlineFuture.TimeoutCheckTask 超时扫描定时器扫描到被处理的超时原因。</p>","comments":[{"had_liked":false,"id":367255,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"北京","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1675073564,"is_pvip":false,"replies":[{"id":133811,"content":"你好，张申傲：非常 nice，你总结的非常到位，很有自己独到的见解，点赞～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1675150402,"ip_address":"广东","comment_id":367255,"utype":1}],"discussion_count":3,"race_medal":2,"score":2,"product_id":100312101,"comment_content":"个人认为，理解异步化有个前提，就是要区分两个线程：请求处理主线程&amp;业务异步子线程：\n- 请求处理主线程：由 Dubbo 框架提供，主要用于接收 RPC 请求。线程池大小默认为200。\n- 业务异步子线程：由业务自定义，可设置线程池大小、队列长度、拒绝策略等，用于异步执行业务逻辑。\n异步化的核心思想在于，将本来需要由主线程来执行的耗时操作，交给异步子线程来执行，使得主线程可以快速执行完成，避免 Dubbo 线程池被耗尽导致服务不可用。站在调用方的角度来看，实际请求的执行时间并没有缩短，但是服务整体的吞吐量是有很大的提升的。","like_count":18,"discussions":[{"author":{"id":1792698,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5a/ba/596d6ae3.jpg","nickname":"MENGXIANGING","note":"","ucode":"B51414E230D6A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609696,"discussion_content":"没搞懂的的，看了这个回复明白了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1679124518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601224,"discussion_content":"你好，张申傲：非常 nice，你总结的非常到位，很有自己独到的见解，点赞～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1675150402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1002095,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","nickname":"xzy","note":"","ucode":"1A44368083A19E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628675,"discussion_content":"这个主线程不是Dubbo提供的把，这个线程池可能是业务自己创建维护，大多数的可能是系统框架自身管理的（比如web型的业务系统跑在Tomcat容器下，就是Tomcat维护）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695717693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365528,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"广东","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1672734136,"is_pvip":false,"replies":[{"id":133159,"content":"你好，张洋：你理解的没错，dubbo 在衔接上下文的时候，本质还是进行了 ThreadLocal 传递。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672805608,"ip_address":"广东","comment_id":365528,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，看了下这块的源码，其实dubbo还是通过ThreadLocal（InternalThreadLocal可以在父子线程中共享数据）来存储context，ATTACHMENT 这些属性，感觉还是通过ThreadLocal的方案，不过是dubbo自己做了一层封装吧，不知道这样理解对不","like_count":3,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598390,"discussion_content":"你好，张洋：你理解的没错，dubbo 在衔接上下文的时候，本质还是进行了 ThreadLocal 传递。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672805608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365125,"user_name":"java小霸王","can_delete":false,"product_type":"c1","uid":1168540,"ip_address":"广东","ucode":"7094BCD9F25E1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/9c/030e80d3.jpg","comment_is_top":false,"comment_ctime":1672131634,"is_pvip":false,"replies":[{"id":132960,"content":"你好，java小霸王：这里为了简单理解，我抽象为了拦截处。等你学到后面的“发布、订阅、调用”章节的时候，掌握的知识点更多的时候，你通过断点的时候，你会发现 org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler#handleRequest 方法的 Future 对象在 whenComplete 方法中持有了 channel（即最终是 NettyClient）的引用。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672191596,"ip_address":"广东","comment_id":365125,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"拦截处只需要调用 java.util.concurrent.CompletableFuture#get(long timeout, TimeUnit unit) 方法就可以很轻松地拿到异步化结果了。 这里拦截处是谁去调用呀，另外的线程轮训吗，还是一开始请求的线程阻塞。","like_count":3,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597707,"discussion_content":"你好，java小霸王：这里为了简单理解，我抽象为了拦截处。等你学到后面的“发布、订阅、调用”章节的时候，掌握的知识点更多的时候，你通过断点的时候，你会发现 org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler#handleRequest 方法的 Future 对象在 whenComplete 方法中持有了 channel（即最终是 NettyClient）的引用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672191596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3231352,"avatar":"https://static001.geekbang.org/account/avatar/00/31/4e/78/ee4e12cc.jpg","nickname":"Lum","note":"","ucode":"7EF828425E685A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606766,"discussion_content":"这里我也不太懂，先插眼一个，以后深入整理一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677385550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1504167,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f3/a7/15ee1f00.jpg","nickname":"憨憨","note":"","ucode":"B0174DE63247ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597687,"discussion_content":"AbstractProxyInvoker.invoke()","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672145433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370575,"user_name":"Six Days","can_delete":false,"product_type":"c1","uid":1322463,"ip_address":"广东","ucode":"8587F2EEFFFD11","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/df/4949b250.jpg","comment_is_top":false,"comment_ctime":1678971409,"is_pvip":false,"replies":[{"id":135242,"content":"你好，Six Days：【asyncContext.write(resultInfo); 】执行之后是将结果写入到了 Future 当中，但是还有另外一个底层在调用这个 Future#get 的结果，这个调用的地方就是在【org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler#handleRequest】方法中的【handler.reply(channel, msg);】代码处，【handler.reply(channel, msg);】返回的对象就是 Future 对象，然后调用 Future 对象的 whenComplete 方法，调用完后若没有结果就会等待，有结果的话就会立马进入 whenComplete 方法的回调逻辑中。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1679058790,"ip_address":"广东","comment_id":370575,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"请问一下asyncContext.write(resultInfo); \n这里将resultInfo 写入Future 之后，Dubbo框架什么时候调用Future.get 获取计算结果？","like_count":2,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609625,"discussion_content":"你好，Six Days：【asyncContext.write(resultInfo); 】执行之后是将结果写入到了 Future 当中，但是还有另外一个底层在调用这个 Future#get 的结果，这个调用的地方就是在【org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler#handleRequest】方法中的【handler.reply(channel, msg);】代码处，【handler.reply(channel, msg);】返回的对象就是 Future 对象，然后调用 Future 对象的 whenComplete 方法，调用完后若没有结果就会等待，有结果的话就会立马进入 whenComplete 方法的回调逻辑中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679058790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370151,"user_name":"凝成","can_delete":false,"product_type":"c1","uid":1188220,"ip_address":"江西","ucode":"C4A0B725C8A009","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/7c/17f0189c.jpg","comment_is_top":false,"comment_ctime":1678432760,"is_pvip":false,"replies":[{"id":134986,"content":"你好，在雨中：【async=&quot;true&quot; sent=&quot;false&quot;】结合起来就是异步形式，发送请求时并不会等待消息发送出去，而是将消费放入到队列中就完事了。至于后续要在消费方拿到结果的话，可以想办法从 RpcContext 中拿到 Future 对象并调用 Future#get 方法拿到返回值。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1678619257,"ip_address":"广东","comment_id":370151,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"之前只用过在reference标签上设置async=&quot;true&quot; sent=&quot;false&quot;的方式来实现无返回值的异步，这种应该是属于消费端的异步吧？\n没想到还支持将provider的dubbo线程和业务处理线程分开，释放dubbo线程，还可以返回结果，开了眼了。","like_count":2,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608710,"discussion_content":"你好，在雨中：【async=&#34;true&#34; sent=&#34;false&#34;】结合起来就是异步形式，发送请求时并不会等待消息发送出去，而是将消费放入到队列中就完事了。至于后续要在消费方拿到结果的话，可以想办法从 RpcContext 中拿到 Future 对象并调用 Future#get 方法拿到返回值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678619257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365356,"user_name":"SunshineBoy","can_delete":false,"product_type":"c1","uid":1160644,"ip_address":"广东","ucode":"FC54CD1815CCBA","user_header":"https://static001.geekbang.org/account/avatar/00/11/b5/c4/9148b40d.jpg","comment_is_top":false,"comment_ctime":1672382468,"is_pvip":false,"replies":[{"id":133076,"content":"你好，SunshineBoy：不好意思，主要是每篇篇幅有限，我给你找了一篇写的有点生活形象点的例子，附上链接如下：\nhttps:&#47;&#47;blog.csdn.net&#47;lqy971966&#47;article&#47;details&#47;118157808?spm=1001.2101.3001.6650.9&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-9-118157808-blog-100849453.pc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-9-118157808-blog-100849453.pc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index=10","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672396796,"ip_address":"广东","comment_id":365356,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，举例时可以把各种IO模型处理方式的弊端加上吗？毕竟内存是有限的","like_count":2,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597994,"discussion_content":"你好，SunshineBoy：不好意思，主要是每篇篇幅有限，我给你找了一篇写的有点生活形象点的例子，附上链接如下：\nhttps://blog.csdn.net/lqy971966/article/details/118157808?spm=1001.2101.3001.6650.9&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-9-118157808-blog-100849453.pc_relevant_3mothn_strategy_and_data_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromBaidu%7ERate-9-118157808-blog-100849453.pc_relevant_3mothn_strategy_and_data_recovery&amp;utm_relevant_index=10","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1672396796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378884,"user_name":"驽马一二三四五六七八九十驾","can_delete":false,"product_type":"c1","uid":1252531,"ip_address":"福建","ucode":"990B888AF0B5EB","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/b3/5fc27472.jpg","comment_is_top":false,"comment_ctime":1690940529,"is_pvip":false,"replies":[{"id":138653,"content":"你好，驽马一二三四五六七：感知到消息进来的是 netty 线程池，处理业务逻辑的，可以是 dubbo 业务线程池，也可以是 netty 自带的线程池。至于你说的问题，需要考虑使用的是什么Dispatcher类型。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1694236828,"ip_address":"湖南","comment_id":378884,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"老师，请问一下，在HeaderExchangeHandler#handleRequest中为future设置了一个异步回调方法，当线程异步执行完成后，是Dubbo的内部线程去执行这个异步回调方法么？与Dubbo处理请求的线程是属于同一个线程池的么？","like_count":1,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627526,"discussion_content":"你好，驽马一二三四五六七：感知到消息进来的是 netty 线程池，处理业务逻辑的，可以是 dubbo 业务线程池，也可以是 netty 自带的线程池。至于你说的问题，需要考虑使用的是什么Dispatcher类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694236828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365305,"user_name":"Geek_1cc6d1","can_delete":false,"product_type":"c1","uid":1850248,"ip_address":"广东","ucode":"3E083616DD0742","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erZCyXaP2gbxwFHxvtnyaaF2Pyy5KkSMsk9kh7SJl8icp1CD6wicb6VJibiblGibbpDo6IuHrdST6AnWQg/132","comment_is_top":false,"comment_ctime":1672360549,"is_pvip":false,"replies":[{"id":133075,"content":"你好，Geek_1cc6d1：这个问题在前面的问题回答过，我直接将内容引用过来了：\n\n其次可以这么理解，提供方的异步化旨在提高吞吐量，说白了就是用自己的线程池去承处理业务，以此来释放Dubbo框架本身的线程去处理其他耗时比较短的请求，就有点类似于脏活累活交给一个特定的线程池让它自己扛，能扛多少是多少，既轻松又快的活Dubbo自己干，见缝插针似的尽可能提升提供方的整个吞吐。\n\n最后如果是这种慢请求打到单机瓶颈了那还真得好好看看优化，如果是那种耗时非常短的请求打到单机瓶颈了，那你得后续考虑加大Dubbo本身线程核心数据或扩容或者有损限流降级等等之类的了。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672395635,"ip_address":"广东","comment_id":365305,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"provider异步的意义是啥？避免dubbo线程耗尽么，直接把dubbo线程数量搞大点不就行了？","like_count":1,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597992,"discussion_content":"你好，Geek_1cc6d1：这个问题在前面的问题回答过，我直接将内容引用过来了：\n\n其次可以这么理解，提供方的异步化旨在提高吞吐量，说白了就是用自己的线程池去承处理业务，以此来释放Dubbo框架本身的线程去处理其他耗时比较短的请求，就有点类似于脏活累活交给一个特定的线程池让它自己扛，能扛多少是多少，既轻松又快的活Dubbo自己干，见缝插针似的尽可能提升提供方的整个吞吐。\n\n最后如果是这种慢请求打到单机瓶颈了那还真得好好看看优化，如果是那种耗时非常短的请求打到单机瓶颈了，那你得后续考虑加大Dubbo本身线程核心数据或扩容或者有损限流降级等等之类的了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672395635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364885,"user_name":"胡月🌈","can_delete":false,"product_type":"c1","uid":1255734,"ip_address":"湖南","ucode":"D50890B8FF24A9","user_header":"https://static001.geekbang.org/account/avatar/00/13/29/36/c6bb0893.jpg","comment_is_top":false,"comment_ctime":1671649362,"is_pvip":false,"replies":[{"id":132871,"content":"你好，胡月：得先感谢你的认真思考，提出了个比较好的问题。\n其次可以这么理解，提供方的异步化旨在提高吞吐量，说白了就是用自己的线程池去承处理业务，以此来释放Dubbo框架本身的线程去处理其他耗时比较短的请求，就有点类似于脏活累活交给一个特定的线程池让它自己扛，能扛多少是多少，既轻松又快的活Dubbo自己干，见缝插针似的尽可能提升提供方的整个吞吐。\n最后如果是这种慢请求打到单机瓶颈了那还真得好好看看优化，如果是那种耗时非常短的请求打到单机瓶颈了，那你得后续考虑加大Dubbo本身线程核心数据或扩容或者有损限流降级等等之类的了。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1671673888,"ip_address":"湖南","comment_id":364885,"utype":1}],"discussion_count":7,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"改造后，拦截地方feature.get也会阻塞住，消耗线程资源吧。这样岂不是每个拦截的地方消耗的线程资源并没有减少。大量请求过来的时候，线程还是不够用。","like_count":1,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597314,"discussion_content":"你好，胡月：得先感谢你的认真思考，提出了个比较好的问题。\n其次可以这么理解，提供方的异步化旨在提高吞吐量，说白了就是用自己的线程池去承处理业务，以此来释放Dubbo框架本身的线程去处理其他耗时比较短的请求，就有点类似于脏活累活交给一个特定的线程池让它自己扛，能扛多少是多少，既轻松又快的活Dubbo自己干，见缝插针似的尽可能提升提供方的整个吞吐。\n最后如果是这种慢请求打到单机瓶颈了那还真得好好看看优化，如果是那种耗时非常短的请求打到单机瓶颈了，那你得后续考虑加大Dubbo本身线程核心数据或扩容或者有损限流降级等等之类的了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1671673888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":5,"child_discussions":[{"author":{"id":3020386,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/16/62/c33cd616.jpg","nickname":"张雪芬","note":"","ucode":"7EF66EFE1B0B0D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":597573,"discussion_content":"同问，提供方异步后，业务提交到自己的线程池上了，dubbo的线程在future.get上等待，也并未释放啊，dubbo的这个线程还是不能去干别的，也得等到自己的线程处理完业务设置完结果，dubbo的这个线程拿到结果后最终释放，那和dubbo的线程自己处理业务然后释放有什么区别？所以这里的提高吞吐不是特别明白，如果dubbo的线程并未阻塞在future上，而是释放了可以去处理别的请求，那的确是提高了吞吐，所以这里怎么理解？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1672039814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":597314,"ip_address":"北京","group_id":0},"score":597573,"extra":""},{"author":{"id":1006681,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/59/4401c327.jpg","nickname":"JerryLuo","note":"","ucode":"7C549DA1F328B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":599422,"discussion_content":"同问，dubbo的线程阻塞在future.get上，没有释放线程资源，提高吞吐量是如何做到的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673512492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":597314,"ip_address":"浙江","group_id":0},"score":599422,"extra":""},{"author":{"id":1734888,"avatar":"","nickname":"杨老师","note":"","ucode":"669564E5A757E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1006681,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/59/4401c327.jpg","nickname":"JerryLuo","note":"","ucode":"7C549DA1F328B6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606054,"discussion_content":"站在提供方的角度来说，吞吐量确实提高了。至于future.get阻塞，那是消费者的事情","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676891693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":599422,"ip_address":"北京","group_id":0},"score":606054,"extra":""}]},{"author":{"id":1845939,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/2a/b3/81b09345.jpg","nickname":"李蕾","note":"","ucode":"D91BF87565D518","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607363,"discussion_content":"对于Dubbo接口来说，开启异步后，接口的主要作用就是将请求任务分发给业务线程池来处理了，比如常用的ForkJoinPool，之后接口的线程就已经释放出来，可以继续处理后续的请求。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677810852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":380279,"user_name":"就是那个刘涛","can_delete":false,"product_type":"c1","uid":2421461,"ip_address":"河南","ucode":"7114B2E4AA904C","user_header":"https://static001.geekbang.org/account/avatar/00/24/f2/d5/d5417f4e.jpg","comment_is_top":false,"comment_ctime":1693303171,"is_pvip":false,"replies":[{"id":138652,"content":"你好，举个简单的例子：你通过 nio 写一个主线程接收，子线程处理并 write 响应，你可以看看，主线程是不是在等待子线程。\n\n你把通信收发想象为400米接力赛，接力棒比喻为通信句柄，只要拿着接力棒就能说话，就能写数据，写完扔了释放就完事了。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1694236415,"ip_address":"湖南","comment_id":380279,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100312101,"comment_content":"请教老师一个问题：\n异步操作的时候，业务子线程没有执行完毕之前，dubbo主线程是不是暂停等待子线程的结果呢？如果实在这样的话，主线程不还是被占用着吗？","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627525,"discussion_content":"你好，举个简单的例子：你通过 nio 写一个主线程接收，子线程处理并 write 响应，你可以看看，主线程是不是在等待子线程。\n\n你把通信收发想象为400米接力赛，接力棒比喻为通信句柄，只要拿着接力棒就能说话，就能写数据，写完扔了释放就完事了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694236415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":378272,"user_name":"Z_Z","can_delete":false,"product_type":"c1","uid":2058852,"ip_address":"广东","ucode":"654BE3F3C7DBA4","user_header":"https://static001.geekbang.org/account/avatar/00/1f/6a/64/3d4fccf8.jpg","comment_is_top":false,"comment_ctime":1689996080,"is_pvip":false,"replies":[{"id":138222,"content":"你好，Z_Z：关键点在于上下文信息如何传递。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1691889308,"ip_address":"广东","comment_id":378272,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"老师我有个疑问，为何不直接用CompletableFuture加线程池，最后把多个异步任务join一下，返回给主线程，不是很明白dubbo提供的这套异步方法有何区别？","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":625558,"discussion_content":"你好，Z_Z：关键点在于上下文信息如何传递。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1691889308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370826,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"北京","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1679306411,"is_pvip":false,"replies":[{"id":135818,"content":"你好，张三丰：\n\n    private String getTimeoutMessage(boolean scan) {\n        long nowTimestamp = System.currentTimeMillis();\n        return (sent &gt; 0 ? &quot;Waiting server-side response timeout&quot; : &quot;Sending request timeout in client-side&quot;)\n                + (scan ? &quot; by scan timer&quot; : &quot;&quot;) + &quot;. start time: &quot;\n                + (new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;).format(new Date(start))) + &quot;, end time: &quot;\n                + (new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;).format(new Date())) + &quot;,&quot;\n                + (sent &gt; 0 ? &quot; client elapsed: &quot; + (sent - start)\n                + &quot; ms, server elapsed: &quot; + (nowTimestamp - sent)\n                : &quot; elapsed: &quot; + (nowTimestamp - start)) + &quot; ms, timeout: &quot;\n                + timeout + &quot; ms, request: &quot; + request + &quot;, channel: &quot; + channel.getLocalAddress()\n                + &quot; -&gt; &quot; + channel.getRemoteAddress();\n    }\n\n当你看完这段代码后，也许你就秒懂了，【nowTimestamp - sent】说明什么，说明都是在客户端这边计算出来的时间，客户端发生异常时的时间，减去当初 sent 赋值的时间，从而得出来的 1013 毫秒。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1680791730,"ip_address":"广东","comment_id":370826,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"“说明客户端很快将信息发送出去了，超时时间为 1000ms，而服务端从超时到被检测到耗费了 13ms，可谓是检测超时的机制之迅速。”\n老师，这句话怎么理解呢？ 是说服务端一共花了1013毫秒才响应给客户端吗？这个时间包括了13ms对故障转移时间？","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":612586,"discussion_content":"你好，张三丰：\n\n    private String getTimeoutMessage(boolean scan) {\n        long nowTimestamp = System.currentTimeMillis();\n        return (sent &gt; 0 ? &#34;Waiting server-side response timeout&#34; : &#34;Sending request timeout in client-side&#34;)\n                + (scan ? &#34; by scan timer&#34; : &#34;&#34;) + &#34;. start time: &#34;\n                + (new SimpleDateFormat(&#34;yyyy-MM-dd HH:mm:ss.SSS&#34;).format(new Date(start))) + &#34;, end time: &#34;\n                + (new SimpleDateFormat(&#34;yyyy-MM-dd HH:mm:ss.SSS&#34;).format(new Date())) + &#34;,&#34;\n                + (sent &gt; 0 ? &#34; client elapsed: &#34; + (sent - start)\n                + &#34; ms, server elapsed: &#34; + (nowTimestamp - sent)\n                : &#34; elapsed: &#34; + (nowTimestamp - start)) + &#34; ms, timeout: &#34;\n                + timeout + &#34; ms, request: &#34; + request + &#34;, channel: &#34; + channel.getLocalAddress()\n                + &#34; -&gt; &#34; + channel.getRemoteAddress();\n    }\n\n当你看完这段代码后，也许你就秒懂了，【nowTimestamp - sent】说明什么，说明都是在客户端这边计算出来的时间，客户端发生异常时的时间，减去当初 sent 赋值的时间，从而得出来的 1013 毫秒。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680791730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370158,"user_name":"凝成","can_delete":false,"product_type":"c1","uid":1188220,"ip_address":"江西","ucode":"C4A0B725C8A009","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/7c/17f0189c.jpg","comment_is_top":false,"comment_ctime":1678437518,"is_pvip":false,"replies":[{"id":134985,"content":"你好，在雨中：赞~","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1678618775,"ip_address":"广东","comment_id":370158,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"消费端异步调用：https:&#47;&#47;cn.dubbo.apache.org&#47;zh-cn&#47;docs&#47;advanced&#47;async-call&#47;\n生产端异步执行：https:&#47;&#47;cn.dubbo.apache.org&#47;zh-cn&#47;docs&#47;advanced&#47;async-execute-on-provider&#47;","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608706,"discussion_content":"你好，在雨中：赞~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678618775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369279,"user_name":"public","can_delete":false,"product_type":"c1","uid":2768731,"ip_address":"广东","ucode":"EF597BADCC526B","user_header":"","comment_is_top":false,"comment_ctime":1677319711,"is_pvip":true,"replies":[{"id":134584,"content":"你好，王应发：①代码拦截处，②queryOrderById，这两个代码片段的实现逻辑，正常理解应该就是代码两个不相干的地方，但是他们要么处于同一个线程中执行，要么处于不同线程中执行。\n\n而既然AsyncContext已经在命名上表明了是异步形式的上下文对象，那么就说明了存在线程之间的信息交换，只不过这些交换是在框架中完成的，完成了不同线程之间信息的交换，从而也就在一定程度上要求AsyncContext具有同线程一样粒度的生命周期，跟随线程的朝生夕死，这个机制就是ThreadLocal本地线程。\n\n因此，这样应该可以解答你的疑惑，拦截出直接从本地线程中拿结果，不就可以拿到AsyncContext的结果了么～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1677421439,"ip_address":"广东","comment_id":369279,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"老师您好，我入行时间不长，想请教下上面 queryOrderById 的例子，我如何才能 像您说的通过拦截方式 获取倒 AsyncContext 对象里的值呢","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606823,"discussion_content":"你好，王应发：①代码拦截处，②queryOrderById，这两个代码片段的实现逻辑，正常理解应该就是代码两个不相干的地方，但是他们要么处于同一个线程中执行，要么处于不同线程中执行。\n\n而既然AsyncContext已经在命名上表明了是异步形式的上下文对象，那么就说明了存在线程之间的信息交换，只不过这些交换是在框架中完成的，完成了不同线程之间信息的交换，从而也就在一定程度上要求AsyncContext具有同线程一样粒度的生命周期，跟随线程的朝生夕死，这个机制就是ThreadLocal本地线程。\n\n因此，这样应该可以解答你的疑惑，拦截出直接从本地线程中拿结果，不就可以拿到AsyncContext的结果了么～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677421439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367431,"user_name":"大俊stan","can_delete":false,"product_type":"c1","uid":1125370,"ip_address":"上海","ucode":"BD0CB5FC790DDB","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/fa/1cde88d4.jpg","comment_is_top":false,"comment_ctime":1675232120,"is_pvip":false,"replies":[{"id":133843,"content":"你好，大俊stan：这种比喻就好比，上小学还有语文课本，在学了懂了课本内容后，再去学习其他就有借鉴性，就有可比性，知晓以往是怎样的，类比学新的，就会更容易接受，至于深挖新内容，少不了自身的潜心修炼的～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1675305247,"ip_address":"广东","comment_id":367431,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"一直感觉，中国技术人员在讲一个技术时喜欢用类似事务比较。看了前面的几个例子事实上和后面完全没啥关系。看完还是要查其他资料","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601573,"discussion_content":"你好，大俊stan：这种比喻就好比，上小学还有语文课本，在学了懂了课本内容后，再去学习其他就有借鉴性，就有可比性，知晓以往是怎样的，类比学新的，就会更容易接受，至于深挖新内容，少不了自身的潜心修炼的～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675305248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366426,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"浙江","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1673768280,"is_pvip":false,"replies":[{"id":133524,"content":"你好，阿昕：你用自己精简的话语总结出来，非常精辟，知识理解了那就是刻在你骨髓的东西，很棒～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1673831747,"ip_address":"湖南","comment_id":366426,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"总结：为了避免dubbo线程池被某个应用大量占用，可以对其耗时较长、时序上没有严格要求、或者不关心处理结果的调用使用异步化处理，开启单独的业务线程，处理完成后返回结果；","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599816,"discussion_content":"你好，阿昕：你用自己精简的话语总结出来，非常精辟，知识理解了那就是刻在你骨髓的东西，很棒～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673831747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365721,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"广东","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1672924586,"is_pvip":false,"replies":[{"id":133215,"content":"你好，aoe：very nice，将知识现学现用了，这种 dump 线程堆栈的方式，可以做到当发生问题时立马依靠程序准实时得出一些有效的信息。非常棒，点赞～","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672978063,"ip_address":"广东","comment_id":365721,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"我来回答一下问题：线程池耗尽怎么办？\n详见：特别放送中最后一个视频“导出线程堆栈”\n\n# dubbo.properties 导出开关控制\ndubbo.application.dump.enable=true\n\n# dubbo.properties 指定导出路径\ndubbo.application.dump.directory=&#47;tmp","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598659,"discussion_content":"你好，aoe：very nice，将知识现学现用了，这种 dump 线程堆栈的方式，可以做到当发生问题时立马依靠程序准实时得出一些有效的信息。非常棒，点赞～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1672978063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365565,"user_name":"贤蛋蛋","can_delete":false,"product_type":"c1","uid":1046118,"ip_address":"广东","ucode":"0FCBCB15E94770","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f6/66/991b7e3a.jpg","comment_is_top":false,"comment_ctime":1672772586,"is_pvip":false,"replies":[{"id":133165,"content":"你好，贤蛋蛋：优雅这个问题嘛，是个漫长迭代的过程。论优雅，Spring 的 @Async 这个注解异步化操作就非常优雅，不过只要你懂其中的深厚底层逻辑，相信你自己一样是可以把异步封装的很好的。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672808127,"ip_address":"广东","comment_id":365565,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"感觉 dubbo 对异步的处理还是不太优雅的，provider的这种异步让用户过多的感知到异步上下文相关的东西。是不是设计成reactor或者vertx那种 api表现形式会更好一些呢？","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598399,"discussion_content":"你好，贤蛋蛋：优雅这个问题嘛，是个漫长迭代的过程。论优雅，Spring 的 @Async 这个注解异步化操作就非常优雅，不过只要你懂其中的深厚底层逻辑，相信你自己一样是可以把异步封装的很好的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672808127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365548,"user_name":"浩仔是程序员","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"广东","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1672752953,"is_pvip":false,"replies":[{"id":133161,"content":"你好，曾泽浩：你的理解很有自己的看法，挺不错的，认真分析了异步的本质问题。\n\n这个阻塞转移，提升吞吐，站在服务提供方而言目的就已经达到了。Reactive 和 WebFlux 并不能压缩接口的响应时间，本质上却能够很大程度提升系统的吞吐量和伸缩性。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672807031,"ip_address":"广东","comment_id":365548,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"这个异步化看着还没有真正的异步，只是把阻塞的地方转移到了线程池，不会阻塞处理请求的线程，真正的异步还需要网络层，数据库层支持异步才可以，像reactor和webflux等系列","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598393,"discussion_content":"你好，曾泽浩：你的理解很有自己的看法，挺不错的，认真分析了异步的本质问题。\n\n这个阻塞转移，提升吞吐，站在服务提供方而言目的就已经达到了。Reactive 和 WebFlux 并不能压缩接口的响应时间，本质上却能够很大程度提升系统的吞吐量和伸缩性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672807031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365544,"user_name":"Six Days","can_delete":false,"product_type":"c1","uid":1322463,"ip_address":"广东","ucode":"8587F2EEFFFD11","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/df/4949b250.jpg","comment_is_top":false,"comment_ctime":1672749870,"is_pvip":false,"replies":[{"id":133164,"content":"你好，Six Days：问的挺好的，用心在思考数据在收发的关键节点，非常漂亮。\n\n在 AbstractProxyInvoker#wrapWithFuture 这里会对结果进行异步包装。\n\n至于异步后数据是怎么返回给到客户端的，等你学到后面的“发布、订阅、调用”章节的时候，掌握的知识点更多的时候，你通过断点的时候，你会发现 org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler#handleRequest 方法的 Future 对象在 whenComplete 方法中持有了 channel（即最终是 NettyClient）的引用。","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672807986,"ip_address":"广东","comment_id":365544,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100312101,"comment_content":"作者分析了如何通过CompletableFuture 将异步化结果返回到主线程，想请教下Dubbo框架是在什么时候通过CompletableFuture 获取异步化结果，将获取的异步化结果封装返回给调用方的，希望能够解答下疑惑","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598398,"discussion_content":"你好，Six Days：问的挺好的，用心在思考数据在收发的关键节点，非常漂亮。\n\n在 AbstractProxyInvoker#wrapWithFuture 这里会对结果进行异步包装。\n\n至于异步后数据是怎么返回给到客户端的，等你学到后面的“发布、订阅、调用”章节的时候，掌握的知识点更多的时候，你通过断点的时候，你会发现 org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler#handleRequest 方法的 Future 对象在 whenComplete 方法中持有了 channel（即最终是 NettyClient）的引用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672807986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365122,"user_name":"java小霸王","can_delete":false,"product_type":"c1","uid":1168540,"ip_address":"广东","ucode":"7094BCD9F25E1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/9c/030e80d3.jpg","comment_is_top":false,"comment_ctime":1672131035,"is_pvip":false,"replies":[{"id":132963,"content":"你好，java小霸王：\n①一个是应用定义的线程池里面的真正执行任务的线程；\n②一个是dubbo封装的线程；\n①和②不是同一个线程池的，所以你说的【这个线程也是那200个线程的一个吗】这句话自定义的线程池处理任务的线程不是200个线程中的。\n","user_name":"作者回复","user_name_real":"编辑","uid":1364525,"ctime":1672191779,"ip_address":"广东","comment_id":365122,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100312101,"comment_content":"老师你好，异步这里意思是每次开启都需要两个线程吗？一个是应用定义的线程池里面的真正执行任务的线程，一个是dubbo封装的线程，这个线程也是那200个线程的一个吗","like_count":0,"discussions":[{"author":{"id":1364525,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d2/2d/d303cfe0.jpg","nickname":"HMILYYLIMH","note":"","ucode":"9355AB4A1A1B97","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597710,"discussion_content":"你好，java小霸王：\n①一个是应用定义的线程池里面的真正执行任务的线程；\n②一个是dubbo封装的线程；\n①和②不是同一个线程池的，所以你说的【这个线程也是那200个线程的一个吗】这句话自定义的线程池处理任务的线程不是200个线程中的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672191779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381710,"user_name":"xzy","can_delete":false,"product_type":"c1","uid":1002095,"ip_address":"河北","ucode":"1A44368083A19E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/6f/e36b3908.jpg","comment_is_top":false,"comment_ctime":1695717052,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100312101,"comment_content":"dubbo的异步化分为客户端（consumer）的异步化和服务端（Provider）的异步化，这篇文章讲的是客户端的异步化。\n\n客户端的异步化设计的出发点并不是为了解决性能问题，而是跟据dubbo的业务模型的一个设计：\n请求发出和响应处理本身为两个不同的独立事件，响应如何被处理和在哪个线程中处理等都是不需要和请求发出事件的业务逻辑线程做耦合绑定。\n\n详细的可以查看dubbo的官方文档：https:&#47;&#47;cn.dubbo.apache.org&#47;zh-cn&#47;blog&#47;2019&#47;11&#47;01&#47;dubbo%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%82%E6%AD%A5%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%9E%E7%8E%B0%E8%83%8C%E6%99%AF%E5%92%8C%E5%AE%9E%E8%B7%B5&#47;","like_count":1},{"had_liked":false,"id":391138,"user_name":"redis","can_delete":false,"product_type":"c1","uid":2747347,"ip_address":"浙江","ucode":"0B61FE373EA719","user_header":"https://static001.geekbang.org/account/avatar/00/29/eb/d3/33b4c447.jpg","comment_is_top":false,"comment_ctime":1717408523,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100312101,"comment_content":"我debug源码到AbstractProxyInvoker#invoke这里执行完业务逻辑后，后续调用了future.handle等待获取结果，但是我看这执行一步的线程和业务线程是同一个呀，还是要等待，这个dubbo线程并没有释放，这样做有什么意义呢","like_count":0},{"had_liked":false,"id":385972,"user_name":"muscle","can_delete":false,"product_type":"c1","uid":1891373,"ip_address":"上海","ucode":"B5EC7DA8D570D0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/WZAp2Y8MSRibN9QN88XT6a58Qq42APErAo3t7XwFztOOcxIqf311NXVic7XjxwfIJj7mdOdnicibBu4egNIysFD4vg/132","comment_is_top":false,"comment_ctime":1703748775,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100312101,"comment_content":"asyncContext.signalContextSwitch()不同步上下文也能拿到结果","like_count":0}]}