{"id":163069,"title":"13 | 自动化测试：DevOps的阿克琉斯之踵","content":"<p>你好，我是石雪峰。</p><p>在古希腊神话中，战神阿克琉斯英勇无比，浑身刀枪不入，唯独脚后跟是他的致命弱点。在特洛伊战争中，他的脚后跟被一箭射中，倒地身亡，从此，阿克琉斯之踵就被用来形容致命的缺陷。我今天要跟你聊的自动化测试，就是DevOps的阿克琉斯之踵。</p><p>我之前走访过很多公司，我发现，在工程实践领域，比如配置管理、持续集成等，他们实践得还不错，但是却有两大通病，一个是研发度量，另一个就是<span class=\"orange\">自动化测试</span>。</p><p>没有人会否认自动化测试的价值，而且很多公司也都或多或少地在实践自动化测试。但从整体来看，自动化测试的实施普遍不成体系，大多都在关注单点工具。另外，团队对自动化测试的真实效果也存在疑惑。如果不能解决这些问题，就很难突破实践DevOps的天花板。</p><p>那么，自动化测试究竟要解决什么问题，又适合哪些业务形态和测试场景呢？我们该如何循序渐进地推进建设，并且正确地度量效果以免踩坑呢？这些问题，就是我要在这一讲中跟你分享的重点内容。</p><h2>自动化测试要解决什么问题？</h2><p>产品交付速度的提升，给测试工作带来了很大的挑战。一方面，测试时间被不断压缩，以前三天的测试工作要在一天内完成。另一方面，需求的变化也给测试工作的开展带来了很大的不确定性。这背后核心的问题是，<strong>业务功能的累加导致测试范围不断扩大，但这跟测试时长的压缩是矛盾的</strong>。说白了，就是要测试的内容越来越多，但是测试的时间却越来越短。</p><!-- [[[read_end]]] --><p>全面测试会带来相对更好的质量水平，但是投入的时间和人力成本也是巨大的，而快速迭代交付就意味着要承担一定的风险。那么，究竟是要速度，还是要质量，这是一个很难回答的问题。</p><p>所以，要想提升测试效率，自然就会联想到自动化手段。实际上，自动化测试适用于以下几种典型场景：</p><ol>\n<li>有大量机械的重复操作，并且会反复执行的场景，比如批量的回归测试；</li>\n<li>有明确的设计规范且相对稳定的场景，比如接口测试；</li>\n<li>大批量、跨平台的兼容性测试，比如覆盖多种版本和多种机型的测试，几十个机型还可以接受，如果覆盖成百上千个机型，就只能依靠自动化了；</li>\n<li>长时间不间断执行的测试，比如压力测试、可用性测试等。</li>\n</ol><p>这些典型场景往往都具备几个特征：设计明确、功能稳定、可多次重复、长期大批量执行等，核心就是通过自动化手段来解决测试成本的问题，也就是人的问题。但这并不意味着手工测试就没有价值了。相反，当人从重复性劳动中解放出来后，就可以投入到更有价值的测试活动中，比如探索性测试、易用性测试、用户验收测试等，这些都属于手工测试的范畴。</p><p>这听上去还挺合理的，可是，为什么很多公司还是倾向于采用手工测试的方式呢？实际上，并非所有的测试活动都适合自动化，而且，自动化测试建设也面临着一些问题。</p><ol>\n<li><strong>投入产出比</strong>：很多需求基本上只会上线一次（比如促销活动类需求），那么，实现自动化测试的成本要比手动测试高得多，而且以后也不会再用了，这显然有点得不偿失。</li>\n<li><strong>上手门槛</strong>：自动化测试依赖代码方式实现，要开发一套配置化的测试框架和平台，对架构设计和编码能力都有很大的要求。但是，测试人员的编码能力一般相对较弱。</li>\n<li><strong>维护成本高</strong>：无论是测试环境、测试用例还是测试数据，都需要随着需求的变化不断进行调整，否则就很容易因为自动化测试过时，导致执行失败。</li>\n<li><strong>测试设备投入高</strong>：比如，移动App的测试需要有大量的手机资源，想要覆盖所有的手机型号、操作系统版本，本身就不太现实。更何况，有限的机器还经常被测试人员拿去做本地调试，这就进一步加剧了线上测试没有可用资源的情况。</li>\n</ol><h2>自动化测试的设计</h2><p>这么看来，自动化测试并不是一把万能钥匙，我们也不能指望一切测试都实现自动化。只有在合适的领域，自动化测试才能发挥出最大价值。那么，你可能就要问了，面对这么多种测试类型，到底要从哪里启动自动化测试的建设呢？</p><p>首先，我来给你介绍一下经典的测试三角形。这个模型描述了从单元测试、集成测试到UI测试的渐进式测试过程。越是靠近底层，用例的执行速度就越快，维护成本也越低。而在最上层的UI层，执行速度要比单元测试和接口测试要慢，比手工测试要快，相应的维护成本要远高于单元测试和接口测试。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/6f/28d6b53907036a38d5649a673664006f.png?wh=501*475\" alt=\"\"></p><blockquote>\n<p>图片来源：“DevOps Handbook\"</p>\n</blockquote><p>这样看来，从靠近底层的单元测试入手是一个投入产出相对比较高的选择。但实际上，单元测试的执行情况因公司而异，有的公司能做到80%的覆盖率，但有的公司却寸步难行。毕竟，单元测试更多是由开发主导的，开发领导的态度就决定了运行的效果。但不可否认的是，单元测试还是非常必要的，尤其是针对核心服务，比如核心交易模块的覆盖率。当然，好的单元测试需要研发投入大量的精力。</p><p>对于UI层来说，执行速度和维护成本走向了另外一个极端，这也并不意味着就没有必要投入UI自动化建设。<strong>UI层是唯一能够模拟用户真实操作场景的端到端测试</strong>，页面上的一个按钮可能触发内部几十个函数调用，和单元测试每次只检查一个函数的逻辑不同，UI测试更加关注模块集成后的联动逻辑，<strong>是集成测试最有效的手段</strong>。</p><p>另外，很多测试人员都是从UI开始接触自动化的，再加上相对成熟的测试工具和框架，实施不依赖于源码，也是一种比较容易上手的自动化手段。在实际应用中，UI自动化可以帮助我们节省人工测试成本，提高功能测试的测试效率。不过，它的缺点也是比较明显的：<strong>随着敏捷迭代的速度越来越快，UI控件的频繁变更会导致控件定位不稳定，提高了用例脚本的维护成本</strong>。</p><p>综合考虑投入产出比和上手难度的话，位于中间层的接口测试就成了一种很好的选择。一方面，现代软件架构无论是分层还是服务调用模式，对接口的依赖程度都大大增加。比如典型的前后端分离的开发模式，前后端基本都是在围绕着接口进行开发联调。另一方面，与单元测试相比，接口测试调用的业务逻辑更加完整，并且具备清晰的接口定义，适合采用自动化的方式执行。</p><p>正因为如此，对于基于Web的应用来说，我更推荐椭圆形模型，也就是以中间层的API接口测试为主，以单元测试和UI测试为辅。你可以参考一下分层自动化测试模型图。</p><p><img src=\"https://static001.geekbang.org/resource/image/14/9b/140a33713f7332277c8d2114d050d39b.png?wh=410*540\" alt=\"\"></p><h2>自动化测试的开发</h2><p><strong>有效的自动化测试离不开工具和平台的支持</strong>。以接口测试为例，最早都是通过cURL、Postman、JMeter等工具单机执行的。但是，一次成功的接口测试，除了能够发起服务请求之外，还需要前置的测试数据准备和后置的测试结果校验。对于企业的实际业务来说，不仅需要单接口的执行，还需要相对复杂的多接口，而且带有逻辑的执行，这就依赖于调用接口的编排能力，甚至是内建的Mock服务。</p><p>不仅如此，测试数据、用例、脚本的管理，测试过程中数据的收集、度量、分析和展示，以及测试报告的发送等，都是一个成熟的自动化测试框架应该具备的功能。</p><p>比如，对于UI自动化测试来说，最让人头疼的就是UI控件变化后的用例维护成本问题。<strong>解决方法就是操作层获取控件和控件本身的定位方法，进行解耦，这依赖于框架的设计与实现</strong>。在实际操作控件时，你可以通过自定义名称的方式来调用控件，自定义名称在控件相关配置文件中进行定义。在具体操作时，可以通过操作层之下的代理层来处理。示例代码如下：</p><pre><code>public void searchItem(String id) {\n  getTextBox(&quot;SearchBar&quot;).clearText();\n  getTextBox(&quot;SearchBar&quot;).setText(id);\n  getButton(&quot;Search&quot;).click();\n}\n</code></pre><p>在代码中，搜索条控件被定义为SearchBar，通过调用代理层的getTextBox方法，得到一个文本输入框类型对象，并调用该对象的清除方法。然后，在对应的控件配置文件中添加对应的自定义名称和控件的定位方法。</p><p>这样一来，即便控件发生改变，对于实际操作层的代码来说，由于采用的是自定义名称，所以你不需要修改逻辑，只要在对应的控件配置文件中，替换控件的定位方法就行了。关于具体的控件配置文件，示例代码如下：</p><pre><code>&lt;TextBox comment=&quot;首页搜索框&quot; id=&quot;SearchBar&quot;&gt;\n\t&lt;iOS&gt;\n    &lt;appium&gt;\n      &lt;dependMethod methodName=&quot;findElementByXPath&quot;&gt;\n      \t&lt;xpath&gt;\n          //XCUIElementTypeNavigatorBar[@name=&quot;MainPageView&quot;]/XCUIElementTypeOther/...\n        &lt;/xpath&gt;\n      &lt;/dependMethod&gt;\n    &lt;/appium&gt;\n  &lt;/iOS&gt;\n&lt;/TextBox&gt;\n</code></pre><p>当然，为了简化测试人员的编写用例成本，你可以在操作层使用Page-Object模式，针对页面或模块封装操作方式，通过一种符合认知的方式，来实现具体的功能操作。这样一来，在实际编写用例的时候，你就可以非常简单地调用操作层的接口定义。示例代码如下：</p><pre><code>@TestDriver(driverClass = AppiumDriver.class)\npublic void TC001() {\n\tString id='10000'\n  page.main.switchView(3);\n  page.cart.clearShoppingCart();\n  page.main.switchView(0);\n  page.search.searchProduct(id);\n  page.infolist.selectlist(0);\n  page.infodetail.clickAddCart();\n  Assert.assertTrue(page.cart.isProductCartExist(), &quot;商品添加成功&quot;)\n}\n</code></pre><p>从这些示例中，我们可以看出，一个良好的自动化测试框架，可以显著降低测试人员编写测试用例的门槛，以及测试用例的维护成本。对于一个成熟的平台来说，平台易用性是非常重要的能力，通过DSL方式来声明测试过程，可以让测试人员聚焦在测试业务逻辑的设计和构建上，大大提升自动化测试的实现效率。</p><p>关于自动化测试框架的能力模型，我给你分享你一份资料，你可以点击<a href=\"https://pan.baidu.com/s/1E3xAHgcehW9NyWKVgTXxFQ\">网盘</a>获取，提取码是gk9w。这个能力模型从测试脚本封装、测试数据解耦、测试流程编排、报告生成等多个方面，展示了框架建设的各个阶段应该具备的能力。</p><h2>自动化测试结果分析</h2><p>那么，我们该如何衡量自动化测试的结果呢？当前比较常用的方式是<strong>覆盖率</strong>，不过问题是，测试覆盖率提升就能发现更多的缺陷吗？</p><p>一家大型金融公司的单元测试覆盖率达到了80%，接口覆盖率更是达到了100%，从这个角度来看，他们的自动化测试做得相当不错。但是，当我问到自动化测试发现的问题数量占到整体问题的比例时，他们的回答有点出人意料。在这么高的覆盖率基础上，自动化测试发现的问题占比仅仅在5%左右。那么，花了这么大力气建设的自动化测试，最后仅仅发现了5%的有效问题，这是不是说明自动化测试的投入产出比不高呢？</p><p>实际上，说自动化测试是为了发现更多的缺陷，这是一个典型的认知误区。在实际项目中，手工测试发现的缺陷数量要比自动化测试发现的缺陷数量多得多。自动化测试更多是在帮助守住软件质量的底线，尤其是应用在回归测试中，自动化测试可以确保工作正常的已有功能不会因为新功能的引入而带来质量回退。可以这么说，<strong>如果自动化测试覆盖率足够高，那么软件质量一定不会差到哪儿去</strong>。</p><p>在自动化测试领域，除了追求覆盖率一个指标以外，自动化测试的结果分析也值得重点关注一下。如果自动化测试的结果并不准确，甚至带来大量误报的话，这对团队来说反而是一种干扰。关于测试误报，是指由于非开发代码变更导致的自动化测试用例执行失败的情况。业界对于误报率的普遍定义是：</p><blockquote>\n<p>自动化测试误报率=非开发变更引入的问题用例数量/测试失败的用例数量</p>\n</blockquote><blockquote>\n<p>比如，单次自动化测试执行了100个用例，其中有20个用例失败，这20个失败用例有5个是由于本次功能或代码变更引入的，也就是真实的缺陷，那么误报率就等于：（20 - 5）/20 = 75%</p>\n</blockquote><p><strong>测试误报率是体现自动化测试稳定性的一个核心指标</strong>。对于不同测试类型和产品形态，误报的的原因有很多。比如测试环境的网络不稳定导致的连接超时、测试脚本和测试工具本身的固有缺陷导致的执行失败、测试数据不齐备、测试资源不可用等等。</p><p>由于测试误报的客观存在，即便执行了自动化测试并给出了测试结果，但还是需要人工审查判断之后，才能将真正的问题上报缺陷系统。这样一来，在自动化执行末端加入了人工处理，就导致自动化测试难以大规模推行，这也是自动化测试略显“鸡肋”的原因之一。</p><p>那么，要如何解决这个问题呢？这就要依赖于自动化测试结果的分析啦。</p><ol>\n<li>对自动化测试的问题进行分类。你要弄清楚一次失败是环境问题、网络问题、功能变更，还是系统缺陷？你需要将失败的用例归纳到这些分类之中。当一个类别的问题非常多的时候，你可以考虑进行拆分，比如网络问题，你可以拆分为网络不可达、延迟超时、域名解析错误等等。</li>\n<li>增加已有分类的自动识别能力。比如，对于捕获到的常见异常，可以根据异常信息自动上报到对应的错误分类，从而简化人工识别和归类错误的工作量。</li>\n<li>提升自动化测试工具和环境的健壮性，对已知问题增加一定的重试机制。</li>\n<li>持续积累和丰富错误分类，有针对性地开展改进工作，从而不断提升自动化测试的稳定性。</li>\n</ol><p>我跟你分享一幅某公司的自动化测试结果分析示意图。通过统计错误的分类，可以看出错误的占比情况，并且针对常见的误报类型进行有针对性的优化，并建立度量指标来跟踪长期结果，从而保证自动化测试结果的整体可信度。这些工作都需要长期的投入才能看出成效，这也是让自动化测试价值最大化和团队能力提升的必经之路。</p><p><img src=\"https://static001.geekbang.org/resource/image/70/07/70445e2161b3c447c7d21384da947e07.png?wh=1016*808\" alt=\"\"></p><h2>总结</h2><p>总结一下，这一讲我给你介绍了有关自动化测试的四个方面，包括自动化测试要解决的问题和适用场景、实施的路径、框架工具开发的典型思路以及结果分析的要点。希望能够帮你建立起对自动化测试这个“老大难”问题的全面认知，让你在推进自动化测试能力建设的时候有迹可循。</p><h2>思考题</h2><p>你所在的企业在进行自动化建设时，有哪些困境和问题，你们是如何解决的呢？</p><p>欢迎在留言区写下你的思考和答案，我们一起讨论，共同学习进步。如果你觉得这篇文章对你有所帮助，欢迎你把文章分享给你的朋友。</p><p></p>","comments":[{"had_liked":false,"id":149491,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1573253849,"is_pvip":true,"replies":[{"id":"57551","content":"其实说到底开发也好，测试也好都是为业务服务的，比如我之前内部创业的时候做了一个游戏平台，业务的目标非常激进，可以说在原型产品化的过程中，是没有测试环节的，基本就是产品经理在试用，研发自测的模式，因为业务的快速拓展和迭代是最重要的。<br>回到你说的这个问题，如果想要跟上快速研发的节奏，在投入产出比能够接受的前提下，只有单测能在迭代周期里面同步实现，原因就是单测覆盖率是纳入到质量门禁指标里面的。对于接口测试来说，挑战不在于接口自身，而在于测试数据的准备和环境的准备方面，另外如何研发测试可以基于同一个接口管理平台来进行接口的定义，开发，调试，这对于实现你所说的拥抱变化会更有帮助，工具层面类似swagger这种框架使用到的还是蛮多的。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573313646,"ip_address":"","comment_id":149491,"utype":1}],"discussion_count":2,"race_medal":0,"score":"40227959513","product_id":100036601,"comment_content":"设计明确、功能稳定，在快速开发的过程中，特别新产品的研发，有点过于理想。这个是自动化测试投入产出比不高的原因吧。有更快拥抱变化一点的自动化测试理论和实践么？","like_count":9,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473879,"discussion_content":"其实说到底开发也好，测试也好都是为业务服务的，比如我之前内部创业的时候做了一个游戏平台，业务的目标非常激进，可以说在原型产品化的过程中，是没有测试环节的，基本就是产品经理在试用，研发自测的模式，因为业务的快速拓展和迭代是最重要的。\n回到你说的这个问题，如果想要跟上快速研发的节奏，在投入产出比能够接受的前提下，只有单测能在迭代周期里面同步实现，原因就是单测覆盖率是纳入到质量门禁指标里面的。对于接口测试来说，挑战不在于接口自身，而在于测试数据的准备和环境的准备方面，另外如何研发测试可以基于同一个接口管理平台来进行接口的定义，开发，调试，这对于实现你所说的拥抱变化会更有帮助，工具层面类似swagger这种框架使用到的还是蛮多的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573313646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1158436,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","nickname":"桃子-夏勇杰","note":"","ucode":"5D5F38AABA980F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47567,"discussion_content":"谢谢老师精彩的回答，分享了很多你的实战经验。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573367979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155188,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1574658349,"is_pvip":false,"replies":[{"id":"59607","content":"是的哈，这也是为什么自动化在回归领域比较推荐的原因，通过固化一定的测试用例集合，配合自动化的方式，来让繁琐的操作简单化，人力投入到更有价值的测试类型中。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1574685433,"ip_address":"","comment_id":155188,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18754527533","product_id":100036601,"comment_content":"自动化是守住软件质量的底线，点睛之笔，谢谢老师","like_count":4,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475682,"discussion_content":"是的哈，这也是为什么自动化在回归领域比较推荐的原因，通过固化一定的测试用例集合，配合自动化的方式，来让繁琐的操作简单化，人力投入到更有价值的测试类型中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574685433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150025,"user_name":"克利斯","can_delete":false,"product_type":"c1","uid":1692882,"ip_address":"","ucode":"E1274F6FB4FB18","user_header":"https://static001.geekbang.org/account/avatar/00/19/d4/d2/1a8f3169.jpg","comment_is_top":false,"comment_ctime":1573448770,"is_pvip":false,"replies":[{"id":"58785","content":"这个问题特别好！其实我发现，很多公司对于单元测试的态度都是覆盖率驱动的，也就是先定义覆盖率，再后补单元测试用例，写单测的目的就是为了通过覆盖率检查，这样做虽然结果覆盖率上去了，但实际就会出现你所说的问题，花了大力气却没啥提升，核心原因是从一开始的目标就错了。<br>我们这边也在推单元测试，但做与不做，覆盖率要求多少，由团队自己决定，平台团队只提供工具和数据量化的支持，先解决为了做而做的问题。在保证核心逻辑被覆盖之后，比较好的做法是通过发生的缺陷和问题适当的补充单元测试case，保证这类问题不再发生，并且重新审视测试的逻辑是否覆盖了多种场景。考查的指标在于有多少缺陷可以被单元测试覆盖，当然不建议把这个指标跟KPI挂钩，而只是为了团队内部学习，甚至适当的奖励识别出最多可以被覆盖问题的成员。<br>另外，在团队内部是否可以沉淀一个持续更新的单元测试手册也是很好的习惯，在手册中可以积累如何写一个好的单元测试，命名规范是怎样的，哪些场景需要优先覆盖，常见的错误是怎样的，这会帮助团队成员不断学习。<br>至于你的问题本身，说的其实还是如何度量生产力的事情，我推荐一篇文件给你： [https:&#47;&#47;www.martinfowler.com&#47;bliki&#47;CannotMeasureProductivity.html](https:&#47;&#47;www.martinfowler.com&#47;bliki&#47;CannotMeasureProductivity.html) ","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1574140396,"ip_address":"","comment_id":150025,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18753317954","product_id":100036601,"comment_content":"目前公司的自动化测试体系已经建立，也有单测覆盖率门禁的指标要求，但是总觉得单测的投入产出比不高，没有看到实际的收效。关于实际提升收效这方面，需要关注哪些指标进行分析和提升吗？","like_count":5,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474040,"discussion_content":"这个问题特别好！其实我发现，很多公司对于单元测试的态度都是覆盖率驱动的，也就是先定义覆盖率，再后补单元测试用例，写单测的目的就是为了通过覆盖率检查，这样做虽然结果覆盖率上去了，但实际就会出现你所说的问题，花了大力气却没啥提升，核心原因是从一开始的目标就错了。\n我们这边也在推单元测试，但做与不做，覆盖率要求多少，由团队自己决定，平台团队只提供工具和数据量化的支持，先解决为了做而做的问题。在保证核心逻辑被覆盖之后，比较好的做法是通过发生的缺陷和问题适当的补充单元测试case，保证这类问题不再发生，并且重新审视测试的逻辑是否覆盖了多种场景。考查的指标在于有多少缺陷可以被单元测试覆盖，当然不建议把这个指标跟KPI挂钩，而只是为了团队内部学习，甚至适当的奖励识别出最多可以被覆盖问题的成员。\n另外，在团队内部是否可以沉淀一个持续更新的单元测试手册也是很好的习惯，在手册中可以积累如何写一个好的单元测试，命名规范是怎样的，哪些场景需要优先覆盖，常见的错误是怎样的，这会帮助团队成员不断学习。\n至于你的问题本身，说的其实还是如何度量生产力的事情，我推荐一篇文件给你： [https://www.martinfowler.com/bliki/CannotMeasureProductivity.html](https://www.martinfowler.com/bliki/CannotMeasureProductivity.html) ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574140396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149495,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1573256542,"is_pvip":false,"replies":[{"id":"57550","content":"哈哈，感同身受，IT的进步就是历经磨难的过程，以我自己做开发的经验来说，完全封闭即便在公司内部也很难实现，即便一家公司的业务流程是E2DD模式的（Excel&amp;Email驱动开发），在搬到线上化的过程也很难采用封闭革命的方式来颠覆现有流程，对自动化来说适当的灵活性和扩展性非常必要，一方面可以同已有的工具快速打通，不用什么都重新实现一边，另外一方面给有能力做一些扩展的团队留出余地，这一点蓝鲸的产品就比较值得借鉴，也是自动化成熟后的必经之路吧。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1573313065,"ip_address":"","comment_id":149495,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10163191134","product_id":100036601,"comment_content":"      自动化其实在OPS这块其实很多年了-10年左右了。自动化运维大规模使用国内其实主要还是互联网行业与金融行业：硬件设备过多、系统过多、人力随着环境的复杂而忙不过来；之前一个OPS需要维护的数目中小号2位数，不到10年这个基本上翻了近百倍，纯人力部署完全来不及，docker之类的产生背景不就是这个么。坑没跳过多少却见过不少，故而谈谈个人见解和感受吧。<br>       公司内部做互联网的普遍都是电商和网游：其它大多都是外包。其实python的使用和自动化有关系的：国内不少企业的自动化都离不开python，这是为何自己开始去学习它的原因。从两个方面去简述吧；<br>       一方面：从用户的角度说；其实就是如同老师所说的，大多数用户没有代码调教的能力且很多软件开发商不愿适当放开这块，这就导致了有些软件的使用度不太好。因为我们不可能比用户自己还了解系统，不适当放开自然用户就难以处理日常的小问题-得失直接的度其实非常不好，这个在国内普遍存在；<br>       另一方面：开发者&#47;软件供应商；其实自动化只是减轻压力而不是有了自动化就可以不用管了，用户那边对于软件基本上要求彻底解决问题，可是就如同软件做不到完美一样；自动化运行中难免会有许多不合理或者说一些现实原因造成的坑，例如：环境的复杂性；我们认为我们都测试了；客户那边就实际环境中来个小众的东西-客户体验度又下来了，自动化又改人力了。<br>       这是以上个人切身经历过的和感受到的现状：其实一套成功的自动化同样是经历了九九八十一难才能基本顺利的部署成功。<br>      ","like_count":3,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473882,"discussion_content":"哈哈，感同身受，IT的进步就是历经磨难的过程，以我自己做开发的经验来说，完全封闭即便在公司内部也很难实现，即便一家公司的业务流程是E2DD模式的（Excel&amp;amp;Email驱动开发），在搬到线上化的过程也很难采用封闭革命的方式来颠覆现有流程，对自动化来说适当的灵活性和扩展性非常必要，一方面可以同已有的工具快速打通，不用什么都重新实现一边，另外一方面给有能力做一些扩展的团队留出余地，这一点蓝鲸的产品就比较值得借鉴，也是自动化成熟后的必经之路吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573313065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333429,"user_name":"Geek_6bb688","can_delete":false,"product_type":"c1","uid":1468464,"ip_address":"","ucode":"5B36B8DC5F524B","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJeUmrVJiaiasCMpK7poias9eicibhXoSWf3jibCC3ECcsk6koLkyV0XqHh1CJibbC5cvbqriaTJHWxDfsicOA/132","comment_is_top":false,"comment_ctime":1644363145,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644363145","product_id":100036601,"comment_content":"&quot;API 接口测试为主，以单元测试和 UI 测试为辅&quot;，有哪些比较推荐的对应的测试框架","like_count":0},{"had_liked":false,"id":293521,"user_name":"BertGeek","can_delete":false,"product_type":"c1","uid":1452799,"ip_address":"","ucode":"8E1D72C9F9778C","user_header":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","comment_is_top":false,"comment_ctime":1621416446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621416446","product_id":100036601,"comment_content":"自动化测试不是很明确其他公司如何规划和项目落实<br>目前所在公司，每个私有环境，运维人员部署自动化测试<br>","like_count":0},{"had_liked":false,"id":217041,"user_name":"兮锅锅","can_delete":false,"product_type":"c1","uid":1977475,"ip_address":"","ucode":"85B3EBBFE6D5AD","user_header":"https://static001.geekbang.org/account/avatar/00/1e/2c/83/3c01a968.jpg","comment_is_top":false,"comment_ctime":1589408601,"is_pvip":false,"replies":[{"id":"80749","content":"我们使用的不是什么高深的技术，TestNG就可以实现了，主要是框架的能力要支持，当控件定位发生改变时，不会影响我们在操作层的方法封装代码，把一处控件改动对应多处引用修改的一对多关系变为一对一关系，即无论引用了多少处此控件，只需要修改一处代码。<br>解决办法：为了使操作层在获取控件时与控件的定位方式解耦，在操作层通过获取自定义ID的方式来得到控件对象。此ID需要在控件的配置文件中定义好，再通过操作层之下的代理层来统一处理。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1589793231,"ip_address":"","comment_id":217041,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589408601","product_id":100036601,"comment_content":"“解决方法就是操作层获取控件和控件本身的定位方法”，老师，感觉这种方法不错，可以告知一下有什么比较好的技术手段做到这一点么？","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495019,"discussion_content":"我们使用的不是什么高深的技术，TestNG就可以实现了，主要是框架的能力要支持，当控件定位发生改变时，不会影响我们在操作层的方法封装代码，把一处控件改动对应多处引用修改的一对多关系变为一对一关系，即无论引用了多少处此控件，只需要修改一处代码。\n解决办法：为了使操作层在获取控件时与控件的定位方式解耦，在操作层通过获取自定义ID的方式来得到控件对象。此ID需要在控件的配置文件中定义好，再通过操作层之下的代理层来统一处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589793231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}