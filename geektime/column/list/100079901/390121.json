{"id":390121,"title":"16 | 按需加载：如何提升应用打开速度？","content":"<p>你好，我是王沛。今天我们来聊聊如何提升 React 应用的打开速度。</p><p>随着前端技术的不断演进，以及浏览器性能的不断提高，前端应用的开发也变得越来越复杂，因为更多的功能被放到了前端去实现。</p><p>这也让我们面临这样一个挑战：<strong>如何控制好整个应用的大小，以及如何提升加载性能，才能确保应用的打开速度够快。</strong></p><p>我们来分析一下，看怎么解决这个问题。在应用加载的性能指标中，其中一个很重要的指标就是<strong>首屏打开速度</strong>。也就是说，当用户打开你的应用之后，他要花多久才能看到首页面。根据统计显示，如果首页打开时间超过3秒，那么就会流失掉40%的用户。所以这项指标的重要性不言而喻，也让我们在完成需求开发的同时，要时刻有意识地去控制包的大小。要知道，包越小，首屏打开速度就越快。</p><p>照此来看，为了提高首屏加载速度，我们就需要<strong>对应用进行分包</strong>。</p><ol>\n<li>首先，在打开某个页面时，只加载这个页面相关的内容，也就是<strong>按需加载</strong>。</li>\n<li>同时，为了提升后续应用的打开速度，就需要采用高效的缓存策略，避免前端资源的重复下载。</li>\n</ol><p>所以这节课，我们首先来看看在 React 应用中如何实现按需加载。然后呢，我会和你介绍下 Service Worker 技术，看看怎么利用Service Worker 来缓存前端资源。虽然它和 React 没有必然的联系，但是作为目前最为有效的提升加载性能的手段，你也需要进行了解并能正确使用。</p><!-- [[[read_end]]] --><h2>如何实现按需加载？</h2><h3>使用 import 语句，定义按需加载的起始模块</h3><p>所谓<strong>按需加载</strong>，就是指在某个组件需要被渲染到页面时，才会去实际地下载这个页面，以及这个页面依赖的所有代码。</p><p>比如当用户打开 /users/profile 这个页面时，才会真正加载对应组件的代码。如下图所示，就展示了这样一个结构，其中 Profile Page 就是需要动态加载的组件。</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/fc/4a598368ee8dcf95ed5968536105cffc.png?wh=1002x544\" alt=\"\"></p><p>这样的话，就不需要在一开始时就载入所有代码，影响首屏打开速度。而是通过按需加载，只下载与页面相关的部分。</p><p>要实现这个功能，本质上在于，<strong>我们需要有动态加载模块的能力。</strong>也就是在运行时去加载模块，而不是静态地去 import 一个模块。</p><p>对于这个需求，<strong>ECMA Script 标准有一个提案</strong>，专门用于动态加载模块，<strong>语法是 import(someModule)</strong>。</p><p>注意，这里的 import 和我们一般用于引入模块的静态声明方式不同，比如 import something from 'somemodule' 。但这里的import是作为一个函数动态运行的，这个 import() 函数会返回一个 Promise。这样，在模块加载成功后，我们就可以在 Promise 的 then 回调函数中去使用这个模块了。</p><p>虽然这只是一个提案，并没有成为标准，但是 Webpack 等打包工具利用了这样的语法去定义代码的分包。也就是说，Webpack 实现了这样的语法。</p><p>下面的代码演示了如何使用 import 语句来定义一个分包的拆分点：</p><pre><code>function ProfilePage() {\n  // 定义一个 state 用于存放需要加载的组件\n  const [RealPage, setRealPage] = useState(null);\n  \n  // 根据路径动态加载真正的组件实现\n  import('./RealProfilePage').then((comp) =&gt; {\n    setRealPage(Comp);\n  });\n  // 如果组件未加载则显示 Loading 状态\n  if (!RealPage) return 'Loading....';\n  \n  // 组件加载成功后则将其渲染到界面\n  return &lt;RealPage /&gt;\n}\n</code></pre><p>在这段代码中，我们定义了 ProfilePage 这样一个实现按需加载功能的组件。这个组件只有被执行时，也就是渲染到界面上时，才会真正加载具体的实现代码。</p><p>这里要理解的关键点就在于，<strong>import() 这个语句完全是由 Webpack 进行处理的。</strong>Webpack 会将以“./RealProfilePage”模块为起点的所有依赖模块，单独打成一个包。并且，Webpack 还会生成代码，用于按需加载这个模块。</p><p>理解了这一点，我们也就知道了<strong>按需加载的实现原理：</strong>Webpack 利用了动态 import 语句，自动实现了整个应用的拆包。而我们在实际开发中，其实并不需要关心 Webpack 是如何做到的，而只需要考虑：<strong>该在哪个位置使用 import 语句去定义动态加载的拆分点</strong>。</p><p>很显然，我们不可能对任何模块都用动态 import 去加载，因为这会损害用户体验，导致每个功能都得等模块加载。总体需要采用的策略是：<strong>按业务模块为目标去做隔离，尽量在每个模块的起始页面去定义这个拆分点。</strong></p><h3>使用 react-lodable，实现组件的异步加载</h3><p>上面的例子你已经看到了如何去实现一个 React 组件的动态加载，它的总体思路其实主要就是三个部分：</p><ol>\n<li>定义一个加载器组件，在使用的地方依赖于这个加载器组件而不是原组件；</li>\n<li>在加载器组件的执行过程中，使用 import 去动态加载真实的实现代码；</li>\n<li>处理加载过程，和加载出错的场景，确保用户体验。</li>\n</ol><p>显然，这样的逻辑是可以提取出来重用的。而<strong>react-loadable，正是这样一个开源的 npm 模块，专门用于 React 组件的按需加载</strong>。</p><p>因此，在实际的项目开发中，我们一般都会直接使用 react-loadable 来完成按需加载，而不用自己去实现。</p><p>我们先看一下它的示例用法。</p><pre><code>import Loadable from &quot;react-loadable&quot;;\n\n\n// 创建一个显示加载状态的组件\nfunction Loading({ error }) {\n  return error ? 'Failed' : 'Loading';\n}\n// 创建加载器组件\nconst HelloLazyLoad = Loadable({\n  loader: () =&gt; import(&quot;./RealHelloLazyLoad&quot;),\n  loading: Loading,\n});\n</code></pre><p>react-lodable 本身是<strong>通过高阶组件来实现</strong>的，这个高阶组件实现了模块加载、loading 状态以及错误处理的功能。你只要通过它提供的简单 API，就可以很容易实现组件的动态加载。</p><p>在代码中，我们可以看到 Loadable 这个高阶组件主要就是两个 API。</p><ol>\n<li><strong>loader：用于传入一个加载器回调，在组件渲染到页面时被执行</strong>。在这个回调函数中，我们只需要直接使用 import 语句去加载需要的模块就可以了。</li>\n<li><strong>loading：表示用于显示加载状态的组件</strong>。在模块加载完成之前，加载器就会渲染这个组件。如果模块加载失败，那么 react-loadable 会将 errors 属性传递给 Loading 组件，方便你根据错误状态来显示不同的信息给用户。</li>\n</ol><p>可以说，有了 react-loadable，我们就不需要实现完整的模块加载器逻辑了，只需要告诉 Loadable 这个高阶组件应该加载哪个模块，加载过程如何显示，就可以将一个组件封装成能够自动按需加载的组件。</p><p>按需加载可以说是减少首屏加载时间最为有效的手段，它可以让用户在打开应用时，无需加载所有代码就能开始使用，从而提升用户体验。</p><p>但是对于加载性能的优化，除了按需加载之外，还有一块就是前端资源的缓存。合理的缓存策略，可以保证同样的前端资源永远只下载一次，从而让用户在使用过一次你的应用之后，就永远不用重新下载同样的资源，从而极大提高随后 App 的打开速度。</p><p>所以下面就跟大家介绍下如何用 Service Worker 来优化加载性能。</p><h2>使用 service worker 缓存前端资源</h2><p>Service Worker 其实是很容易被大家忽视的一种缓存机制，因为它通常是和 PWA （Progressive Web Application）联系在一起的，用于开发<strong>离线的 Web 应用</strong>。</p><p>这个时候，很多人会觉得如果我不开发离线应用，那是不是就不需要Service Worker了？</p><p>其实不然。Service Worker 还提供了<strong>拦截前端请求</strong>的能力，使得它能够<strong>结合 Local Storage</strong>，<strong>成为一个独立的缓存方案。</strong>所以它不仅可以用于实现前端静态资源的缓存，还能用来开发离线的Web应用。</p><p>这样的话，我们可以把Service Worker 看作<strong>一种前端的资源请求代理</strong>。每一个前端页面发出的请求都会先由这个代理进行处理，然后你再决定请求是直接发送到服务器端，还是从本地的 Local Storage 读取内容返回。</p><p>如下图所示，展示了请求的流程：</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/f1/d7b22ce8e29eb1a8bee2e2c44a4b82f1.png?wh=1036x480\" alt=\"\"></p><p>可以看到，Service Worker 会拦截所有浏览器发送出来的请求，你可以通过代码去控制 Rest API 这些请求发送到服务器；而 JS、CSS 等静态资源，则通过 Cache Storage 存储在浏览器端。</p><p>和浏览器自动的资源缓存机制相比，Service Worker 加上 Cache Storage 这个缓存机制，具有更高的准确性和可靠性。因为它可以确保两点：</p><ol>\n<li><strong>缓存永远不过期。你</strong>只要下载过一次，就永远不需要再重新下载，除非主动删除。</li>\n<li><strong>永远不会访问过期的资源。</strong>换句话说，如果发布了一个新版本，那么你可以通过版本化的一些机制，来确保用户访问到的一定是最新的资源。</li>\n</ol><p>这样，你的前端应用就像一个只需要安装一次的 App，安装过之后，就不需要再重新下载了，这样使用起来加载速度会更快。</p><p>下面就给你介绍下<strong>如何使用 Service Worker 以及 Cache Storage</strong>。</p><p>Service Worker 是一段独立于页面之外的 JavaScript 脚本，它并不在Web页面中运行，但是会在 Web 页面加载时，由一段代码去触发注册、下载和激活。一旦安装完成之后，Service Worker 就会拦截所有当前域名下的所有请求，由代码逻辑决定应该如何处理。</p><p>要使用 Service Worker，基本上分为注册、初始化、拦截请求等步骤，下面我们就看一下各个部分应该如何用代码实现。</p><h3>注册 Service Worker</h3><p>使用 Service Worker 的第一步，就是告诉浏览器当前域名下我需要使用 Service Worker。</p><p>我们可以使用下面的代码来实现：</p><pre><code>if ('serviceWorker' in navigator) {\n  navigator.serviceWorker\n    .register('/sw.js')\n    .then(() =&gt; {\n      // 注册成功\n      console.log('Service worker registered.');\n    }, (err) =&gt; {\n      // 注册失败\n      console.log('ServiceWorker registration failed: ', err);\n    });\n  });\n}\n</code></pre><p>从代码中可以看到，首先我们需要判断当前浏览器是否支持 Service Worker。如果支持，那么就用 register 方法注册一个 Service Worker，它的参数是 Service Worker 脚本的代码路径，例子中的代码路径就是根路径下的 sw.js 这个文件。如果浏览器不支持，则什么都不做。</p><h3>在 Service Worker 安装之后初始化缓存机制</h3><p>在 Service Worker 的实现代码被下载和执行后，会触发安装完成的事件，这个时候，你就可以在 sw.js 里监听这个事件，从而初始化自己的缓存机制。</p><p>比如下面的代码，就演示了如何在安装事件中配置 Cache Storage：</p><pre><code>const cacheName = 'my_app_cache';\n// 在 sw.js 中监听安装完成事件\nself.addEventListener('install', function(e) {\n  console.log('Service worker installed.');\n  // 初始化 Cache Storage\n  const cacheOpenPromise = caches.open(cacheName);\n  // 安装过程中，等待 Cache Storage 配置完成\n  e.waitUntil(cacheOpenPromise);\n});\n</code></pre><p>如果你之前没有了解过 Cache Storage，也不要紧，我简单说明下你就能明白。</p><p><strong>Cache Storage</strong> 也是<strong>浏览器提供的一种缓存机制</strong>，专门用于缓存一个请求的 request 和 response 的配对关系。此外，它还提供了 API，用来判断某个 request 是不是有对应的 response 已经缓存。所以 Cache Storage 也可以认为是专门为 Service Worker 提供的缓存机制。</p><p>有了这样一段代码，我们就完成了 Service Worker 的安装。需要特别注意的是，每次打开 Web 页面时，页面其实都会调用 Service Worker 的 register 方法去注册。但是浏览器会判断脚本内容是否有变化，只有发生了变化才会重新安装。</p><h3>拦截请求</h3><p>当Service Worker 安装完成后，接下来就是处于运行状态，能够拦截前端的请求了。你可以通过监听 fetch 事件来处理所有的请求，然后根据请求内容等条件来决定如何处理请求。</p><p>比如使用本地缓存或者发送到服务器端，实现的方式就是在 sw.js 文件中加入下面的代码：</p><pre><code>// 监听所有的请求\nself.addEventListener('fetch', function(e) {\n  // 如果请求的路径不是 js 结尾，就通过 return false 来告诉 \n  // service worker 这个请求应该发送到服务器端\n  if (!request.url.endsWith('.js')) return false;\n  \n  // 否则检查 cache 中是否有对应的 response\n  const promise = caches.open(cacheName).then(cache =&gt; {\n    // 使用 cache.match \n    return cache.match(e.request).then(res =&gt; {\n      if (res) {\n        // 如果缓存存在则直接返回结果\n        return Promise.resolve(res);\n      } else {\n        // 否则发出请求，并存到 cache\n        const req = new Request(e.request.url);\n        return fetch(corsRequest).then(res =&gt; {\n          // 更新 cache\n          cache.put(request, res.clone());\n          return res;\n        })\n      }\n    });\n  });\n  // 使用 e.respondWith 方法给请求返回内容\n  e.respondWith(promise);\n});\n</code></pre><p>在这段代码中，采用的是一种缓存优先的策略。如果发现缓存存在，就使用缓存。否则发送请求到服务器端，然后把响应存放到缓存，并同时返回给调用者。</p><p>这是一种最为高效的静态资源缓存策略，因为只会下载一次，但同时也对静态资源的打包有一定要求，那就是任何一次代码更新，都需要有唯一的路径。在实际的项目中，一般会通过加入时间戳，或者版本化的命名静态资源文件来实现。</p><p>当然，在实际的项目中，使用 Service Worker 其实还有更多的考虑因素，比如何时删掉旧版本缓存，如何处理请求失败等等。但是核心机制基本就是示例代码中的内容，相信你在真正使用时，能够完善地加入对应的细节处理。</p><h2>小结</h2><p>在这一讲，我们主要学习了如何提升 React 应用的加载性能。主要分为两个部分来讲。</p><p>第一部分是资源的分包，用于实现按需加载的功能。在这里，我们主要利用了 import 语句和 Webpack 对分包的支持，这样就能够实现按需加载，从而提高首屏页面的打开速度。</p><p>第二个是 Service Worker 的概念和用法。不同于 PWA，这里的 Service Worker 仅仅用作前端静态资源的缓存。这是一个非常高效的缓存机制，可以保证静态资源仅被加载一次，从而极大地提高第二次以及后续打开 App 的速度。</p><p>因为 Service Worker 通常和 PWA 联系在一起，所以这也是一个很容易被忽视的技术。但通过今天这一课的学习，你应该能够体会到它作为缓存机制的应用场景，只要用很少的成本就带来很不错的用户体验，所以你一定要在实际项目中加以利用。</p><h2>思考题</h2><p>除了按需加载和 Service Worker，你还能想到哪些可以提升应用加载性能的方法？</p><p>欢迎把你的思考和想法分享在留言区，我会和你交流讨论。也欢迎把课程分享给你的同事或朋友，共同进步。我们下节课再见！</p>","comments":[{"had_liked":false,"id":304524,"user_name":"别拦我让我学","can_delete":false,"product_type":"c1","uid":2613324,"ip_address":"","ucode":"7FBDEB867A68AE","user_header":"https://static001.geekbang.org/account/avatar/00/27/e0/4c/e6042c6c.jpg","comment_is_top":false,"comment_ctime":1627465249,"is_pvip":false,"replies":[{"id":"110286","content":"可以认为没有区别，因为核心机制都是 import。只是 react-lodable 提供的 API 和选项比 React.lazy 丰富。","user_name":"作者回复","user_name_real":"Nate","uid":"1018676","ctime":1627698822,"ip_address":"","comment_id":304524,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23102301729","product_id":100079901,"comment_content":"老师，react-loadable与react自身提供的懒加载的api，React.lazy(() =&gt; import())的区别是什么？","like_count":6,"discussions":[{"author":{"id":1018676,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8b/34/61035278.jpg","nickname":"Nate","note":"","ucode":"844B4C20BB3D6E","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524072,"discussion_content":"可以认为没有区别，因为核心机制都是 import。只是 react-lodable 提供的 API 和选项比 React.lazy 丰富。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627698822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300498,"user_name":"珍惜眼前人","can_delete":false,"product_type":"c1","uid":1387988,"ip_address":"","ucode":"7443DA4F24E35B","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/d4/76ffbdfc.jpg","comment_is_top":false,"comment_ctime":1625196871,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10215131463","product_id":100079901,"comment_content":"老师好，serviceWorker的代码，可以加到 https:&#47;&#47;codesandbox.io&#47;s&#47;react-hooks-course-20vzg<br>吗，想跟着实现一下","like_count":2},{"had_liked":false,"id":309037,"user_name":"Brave","can_delete":false,"product_type":"c1","uid":1378339,"ip_address":"","ucode":"4F66150D471D3B","user_header":"https://static001.geekbang.org/account/avatar/00/15/08/23/1cc7d190.jpg","comment_is_top":false,"comment_ctime":1629900962,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5924868258","product_id":100079901,"comment_content":"1. 合并请求接口<br>2. 使用OSS服务加载图片资源<br>3. 制定编码规范、提取公共组件、减少重复代码","like_count":2,"discussions":[{"author":{"id":1167767,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d1/97/3abdd9cd.jpg","nickname":"stanny","note":"","ucode":"DD2BB91548A881","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414686,"discussion_content":"2. 这里的OSS服务和cdn 是一个意思吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636858468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1033110,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/96/9098f003.jpg","nickname":"菩提树下叶撕阳","note":"","ucode":"3CBB21863E478B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1167767,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d1/97/3abdd9cd.jpg","nickname":"stanny","note":"","ucode":"DD2BB91548A881","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576199,"discussion_content":"应该不是哈 ，OSS 只是阿里云的一个静态资源存储，需要cdn ，还需要另行开通","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655348969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":414686,"ip_address":""},"score":576199,"extra":""}]}]},{"had_liked":false,"id":300574,"user_name":"大神博士","can_delete":false,"product_type":"c1","uid":1195144,"ip_address":"","ucode":"8C4318095949F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/88/6bef27d6.jpg","comment_is_top":false,"comment_ctime":1625221756,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5920189052","product_id":100079901,"comment_content":"```javascript<br>import React, { Suspense } from &#39;react&#39;;<br>import Header from &#39;.&#47;Header&#39;;<br>import SideBar from &#39;.&#47;SideBar&#39;;<br>&#47;&#47; content 和 footer 部分延迟加载<br>const Content = React.lazy(() =&gt; import(&#39;.&#47;Content&#39;));<br>const Footer = React.lazy(() =&gt; import(&#39;.&#47;Footer&#39;));<br><br>function App() {<br>    return (<br>        &lt;div className=&quot;page&quot;&gt;<br>            &lt;Header &#47;&gt;<br>            &lt;SideBar &#47;&gt;<br>            &lt;Suspense fallback={&lt;div&gt;Loading...&lt;&#47;div&gt;}&gt;<br>                &lt;Content &#47;&gt;<br>            &lt;&#47;Suspense&gt;<br>            &lt;Suspense fallback={&lt;div&gt;Loading...&lt;&#47;div&gt;}&gt;<br>                &lt;Footer &#47;&gt;<br>            &lt;&#47;Suspense&gt;<br>        &lt;&#47;div&gt;<br>    );<br>}<br>export default App;<br>```","like_count":1},{"had_liked":false,"id":300276,"user_name":"Geeker","can_delete":false,"product_type":"c1","uid":1032345,"ip_address":"","ucode":"9937127DE96D78","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/99/259a412f.jpg","comment_is_top":false,"comment_ctime":1625077704,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"5920045000","product_id":100079901,"comment_content":"之前项目中有一个需求是，合并多个指定 url 的请求（高频请求，请求地址相同，请求参数不同），想合并请求参数并只请求一次。不知道这样的需求用 service worker 是不是可以实现，求思路，谢谢。","like_count":2,"discussions":[{"author":{"id":2841733,"avatar":"","nickname":"范超","note":"","ucode":"1B5BF13B1BC86E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530843,"discussion_content":"参考防抖，将每次函数调用的参数存起来，在最后真实调用的时候改写参数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637158194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1573766,"avatar":"https://static001.geekbang.org/account/avatar/00/18/03/86/c9051c6a.jpg","nickname":"Bug般的存在","note":"","ucode":"7A61F7AA3B49A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381972,"discussion_content":"参数不一样，返回的结果也不一样吧，合并成一个请求会不会有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625326126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334717,"user_name":"大神博士","can_delete":false,"product_type":"c1","uid":1195144,"ip_address":"","ucode":"8C4318095949F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/88/6bef27d6.jpg","comment_is_top":false,"comment_ctime":1645088950,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645088950","product_id":100079901,"comment_content":"这里的service worker 缓存 和 设置强缓存有什么区别？","like_count":0},{"had_liked":false,"id":318240,"user_name":"七秒","can_delete":false,"product_type":"c1","uid":1696138,"ip_address":"","ucode":"0BCBBC874868B4","user_header":"https://static001.geekbang.org/account/avatar/00/19/e1/8a/df410c85.jpg","comment_is_top":false,"comment_ctime":1635213454,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635213454","product_id":100079901,"comment_content":"想请教下王老师，这个service worker的代码、注册service worker的代码以及应用的代码 在服务器中说什么样的位置关系，希望得到解答，感激不尽！","like_count":0},{"had_liked":false,"id":310494,"user_name":"知故","can_delete":false,"product_type":"c1","uid":1898098,"ip_address":"","ucode":"8A05FC14443637","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJlZSBIXmp6PVpCXnicMR1dD4K4u2FWt4LQhicf9mJiaFOHUntft5nTzAptb8gzF4M8Yvs6gocykf22w/132","comment_is_top":false,"comment_ctime":1630680145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630680145","product_id":100079901,"comment_content":"1. 使用http 2.0<br>2. cdn","like_count":0},{"had_liked":false,"id":301251,"user_name":"君","can_delete":false,"product_type":"c1","uid":2688367,"ip_address":"","ucode":"D15FAFAA80A8FF","user_header":"https://static001.geekbang.org/account/avatar/00/29/05/6f/6a47d5b7.jpg","comment_is_top":false,"comment_ctime":1625589266,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625589266","product_id":100079901,"comment_content":"const AsyncLoadable = (dir: string, loading = Loading) =&gt;<br>  Loadable({<br>    loader: () =&gt; import(`@&#47;components&#47;${dir}`),<br>    loading<br>  })<br><br>const LazyComp1 = AsyncLoadable(&#39;lazyComp1&#39;)<br>const LazyComp2 = AsyncLoadable(&#39;lazyComp2&#39;)<br><br>这样的写法貌似不生效 组件无法渲染","like_count":0},{"had_liked":false,"id":301195,"user_name":"L","can_delete":false,"product_type":"c1","uid":1228268,"ip_address":"","ucode":"26BB686671F7D4","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/ec/cc7abf0b.jpg","comment_is_top":false,"comment_ctime":1625571144,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1625571144","product_id":100079901,"comment_content":"直接利用浏览器本身的缓存机制也可以吧","like_count":0,"discussions":[{"author":{"id":1167767,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d1/97/3abdd9cd.jpg","nickname":"stanny","note":"","ucode":"DD2BB91548A881","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414687,"discussion_content":"对哦，浏览器缓存机制不就这个意思吗，这里的service worker 和浏览器缓存有什么不一样呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636858627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301133,"user_name":"林大熊","can_delete":false,"product_type":"c1","uid":1932574,"ip_address":"","ucode":"31AC830DE050BD","user_header":"","comment_is_top":false,"comment_ctime":1625548121,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1625548121","product_id":100079901,"comment_content":"老师，你好，对于 react-loadable 和 Service Worker 有两点比较疑惑的地方。<br>1.react-loadable 和 React.lazy() 的使用场景是否不一样？还是使用 react-loadable 的地方都可以使用React.lazy()代替？<br>2.Service Worker 中使用 Cache Storage 缓存静态资源，是否有容量大小的限制？在缓存 svg、png等其他格式的静态资源的时候是否有什么限制？","like_count":0,"discussions":[{"author":{"id":1033110,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c3/96/9098f003.jpg","nickname":"菩提树下叶撕阳","note":"","ucode":"3CBB21863E478B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576201,"discussion_content":"react-loadable 和 React.lazy()  是相同的，只是使用方法不同而已，个人觉得还是使用 React.lazy()  + Suspense 的方式比较好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655349123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1757412,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d0/e4/75c63e0e.jpg","nickname":"我怎么又饿了","note":"","ucode":"0D5902C16A7AB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384526,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626630855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}