{"id":72638,"title":"20 | Spark的性能优化案例分析（下）","content":"<p>上一期，我讲了软件性能优化必须经过进行性能测试，并在了解软件架构和技术的基础上进行。今天，<span class=\"orange\">我们通过几个Spark性能优化的案例，看一看所讲的性能优化原则如何落地</span>。如果你忘记了性能优化的原则，可以返回上一期复习一下。</p><p>基于软件性能优化原则和Spark的特点，Spark性能优化可以分解为下面几步。</p><p>1.性能测试，观察Spark性能特性和资源（CPU、Memory、Disk、Net）利用情况。</p><p>2.分析、寻找资源瓶颈。</p><p>3.分析系统架构、代码，发现资源利用关键所在，思考优化策略。</p><p>4.代码、架构、基础设施调优，优化、平衡资源利用。</p><p>5.性能测试，观察系统性能特性，是否达到优化目的，以及寻找下一个瓶颈点。</p><p>下面我们一起进入详细的案例分析，希望通过这几个案例，可以帮助你更好地理解Spark的原理，以及性能优化如何实践落地，希望能对你有所启发。</p><h2>案例1：Spark任务文件初始化调优</h2><p>首先进行性能测试，发现这个视频图谱N度级联关系应用分为5个job，最后一个job为保存结果到HDFS，其余job为同样计算过程的反复迭代。但是发现第一个job比其他job又多了个计算阶段stage，如图中红圈所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/6f/88/6fd436e3c6c11106cd7754792e78ee88.png?wh=670*206\" alt=\"\"></p><p>通过阅读程序代码，发现第一个job需要初始化一个空数组，从而产生了一个stage，但是这个stage在性能测试结果上显示，花费了14秒的时间，远远超出合理的预期范围。同时，发现这段时间网络通信也有一定开销，事实上只是内存数据初始化，代码上看不出需要进行网络通信的地方。下图是其中一台计算节点的通信开销，发现在第一个stage，写通信操作几乎没有，读通信操作大约每秒几十MB的传输速率。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/05/58/054abfc46ca040d3db8c441822a86558.png?wh=696*196\" alt=\"\"></p><p>分析Spark运行日志，发现这个stage主要花费时间并不是处理应用的计算逻辑，而是在从Driver进程下载应用执行代码。前面说过，Spark和MapReduce都是通过移动计算程序到数据所在的服务器节点，从而节省数据传输的网络通信开销，并进行分布式计算，即移动计算比移动数据更划算，而移动计算程序就是在这个阶段进行。</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/18/f8828271641cb854a0e1e79b75ab8218.png?wh=1178*544\" alt=\"\"></p><p>这个视频关系图谱计算程序因为依赖一个第三方的程序包，整个计算程序打包后大小超过17MB，这个17MB的JAR包需要部署到所有计算服务器上，即Worker节点上。但是只传输17MB的数据不可能花费这么多时间啊？</p><p>进一步分析Spark日志和代码后发现，每个计算节点上会启动多个Executor进程进行计算，而Spark的策略是每个Executor进程自己去下载应用程序JAR包，当时每台机器启动了30个Executor进程，这样就是4×30=120个进程下载，而Driver进程所在机器是一块千兆网卡，导致将这些数据传输完成花费了14秒的时间。</p><p>发现问题以后，解决办法就显而易见了。同一台服务器上的多个Executor进程不必每个都通过网络下载应用程序，只需要一个进程下载到本地后，其他进程将这个文件copy到自己的工作路径就可以了。</p><p><img src=\"https://static001.geekbang.org/resource/image/82/f0/823fb2e270b7031542edeafd088d06f0.jpg?wh=1864*760\" alt=\"\"></p><p>这段代码有个技术实现细节需要关注，就是多个进程同时去下载程序包的时候，如何保证只有一个进程去下载，而其他进程阻塞等待，也就是进程间的同步问题。</p><p>解决办法是使用了一个本地文件作为进程间同步的锁，只有获得文件锁的进程才去下载，其他进程得不到文件锁，就阻塞等待，阻塞结束后，检查本地程序文件是否已经生成。</p><p>这个优化实测效果良好，第一个stage从14秒下降到不足1秒，效果显著。</p><p><img src=\"https://static001.geekbang.org/resource/image/ea/32/ea59ae5b5e70304ac6f1fcf1bacd3332.png?wh=614*218\" alt=\"\"></p><p>这个案例的具体代码你可以参考：<br>\n<a href=\"https://github.com/apache/spark/pull/1616\">https://github.com/apache/spark/pull/1616</a></p><h2>案例2：Spark任务调度优化</h2><p>继续前面的性能测试，看看有没有新的性能瓶颈以及性能指标不合理的地方。我们将4台Worker机器的CPU使用率进行对比分析，发现CPU使用率有些蹊跷的地方。</p><p><img src=\"https://static001.geekbang.org/resource/image/49/38/498e4d3d7aa0c23b6fc5807eb87b7638.png?wh=466*154\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/6e/64/6eb9b6f7ff05a9d521035898f830d964.png?wh=452*148\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/b6/00/b6e5868d6af8ffbd3ddc99a0ad9e4b00.png?wh=466*152\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/f8/5b/f82efd934ed0e1992cb7bb9460b9175b.png?wh=458*150\" alt=\"\"></p><p>从图中看到，在第一个job的第二个阶段，第三台机器的CPU使用率和其他机器明显不同，也就是说计算资源利用不均衡，<strong>这种有忙有闲的资源分配方式通常会引起性能问题</strong>。</p><p>分析Spark运行日志和Spark源代码，发现当有空闲计算资源的Worker节点向Driver注册的时候，就会触发Spark的任务分配，分配的时候使用轮询方式，每个Worker都会轮流分配任务，保证任务分配均衡，每个服务器都能领到一部分任务。但是为什么实测的结果却是在第二个stage，只有一个Worker服务器领了任务，而其他服务器没有任何任务可以执行？</p><p><img src=\"https://static001.geekbang.org/resource/image/4c/63/4c69cb903334886ec12dc98b4af8b563.png?wh=1186*566\" alt=\"\"></p><p>进一步分析日志，发现Worker节点向Driver注册有先有后，先注册的Worker开始领取任务，如果需要执行的任务数小于Worker提供的计算单元数，就会出现一个Worker领走所有任务的情况。</p><p>而第一个job的第二个stage刚好是这样的情况，demo数据量不大，按照HDFS默认的Block大小，只有17个Block，第二个stage就是加载这17个Block进行初始迭代计算，只需要17个计算任务就能完成，所以当第三台服务器先于其他三台服务器向Driver注册的时候，触发Driver的任务分配，领走了所有17个任务。</p><p>同时，为了避免这种一个Worker先注册先领走全部任务的情况，我们考虑的一个优化策略是增加一个配置项，只有注册的计算资源数达到一定比例才开始分配任务，默认值是0.8。</p><pre><code>spark.scheduler.minRegisteredResourcesRatio = 0.8\n</code></pre><p>为了避免注册计算资源达不到期望资源比例而无法开始分配任务，在启动任务执行时，又增加了一个配置项，也就是最小等待时间，超过最小等待时间（秒），不管是否达到注册比例，都开始分配任务。</p><pre><code>spark.scheduler.maxRegisteredResourcesWaitingTime = 3\n</code></pre><p>启用这两个配置项后，第二个stage的任务被均匀分配到4个Worker服务器上，执行时间缩短了1.32倍。而4台Worker服务器的CPU利用率也变得很均衡了。</p><p><img src=\"https://static001.geekbang.org/resource/image/80/c5/804e83b440d287343c49febe58b8c5c5.png?wh=552*156\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/2a/c1/2a005427e41e5e78bb15d08c39f057c1.png?wh=568*160\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/0c/4a/0ce1eab6a0d7800c80d8312b23cb854a.png?wh=568*160\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/b5/70/b5557db2bcfad01dc9d6e5506d77ea70.png?wh=568*160?wh=568*160\" alt=\"\"></p><p>这个案例的具体代码你可以参考：<a href=\"https://github.com/apache/spark/pull/900\">https://github.com/apache/spark/pull/900</a><br>\n<a href=\"https://github.com/apache/spark/pull/1525\">https://github.com/apache/spark/pull/1525</a></p><h2>案例3：Spark应用配置优化</h2><p>看案例2的几张CPU利用率的图，我们还发现所有4个Worker服务器的CPU利用率最大只能达到60%多一点。例如下图，绿色部分就是CPU空闲。</p><p><img src=\"https://static001.geekbang.org/resource/image/b5/70/b5557db2bcfad01dc9d6e5506d77ea70.png?wh=568*160?wh=568*160\" alt=\"\"></p><p>这种资源利用瓶颈的分析无需分析Spark日志和源代码，根据Spark的工作原理，稍加思考就可以发现，当时使用的这些服务器的CPU的核心数是48核，而应用配置的最大Executor数目是120，每台服务器30个任务，虽然30个任务在每个CPU核上都100%运行，但是总的CPU使用率仍只有60%多。</p><p>具体优化也很简单，设置应用启动参数的Executor数为48×4=192即可。</p><h2>案例4：操作系统配置优化</h2><p>在性能测试过程中发现，当使用不同服务器的时候，CPU资源利用情况也不同，某些服务器的CPU处于sys态，即系统态运行的占比非常高，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/2e/c7/2e95c4c900c6afb7918e9efa6341bac7.png?wh=646*212\" alt=\"\"></p><p>图中紫色为CPU处于sys态，某些时候sys态占了CPU总使用率的近80%，这个比例显然是不合理的，表示虽然CPU很忙，但是没有执行用户计算，而是在执行操作系统的计算。</p><p>那么，操作系统究竟在忙什么，占用了这么多CPU时间？通过跟踪Linux内核执行指令，发现这些sys态的执行指令和Linux的配置参数transparent huge pages有关。</p><p>当transparent huge pages打开的时候，sys态CPU消耗就会增加，而不同Linux版本的transparent huge pages默认是否打开是不同的，对于默认打开transparent huge pages的Linux执行下面的指令，关闭transparent huge pages。</p><pre><code>echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled\necho never &gt; /sys/kernel/mm/ transparent_hugepage/defrag\n</code></pre><p>关闭以后，对比前面的CPU消耗，sys占比明显下降，总的应用耗时也有明显下降。</p><p><img src=\"https://static001.geekbang.org/resource/image/24/94/24b6e43e406ac4eae3f44a94ddd2fb94.png?wh=652*214\" alt=\"\"></p><h2>案例5：硬件优化</h2><p>分析网卡的资源消耗，发现网络通信是性能的瓶颈，对整个应用的影响非常明显。比如在第二个、第三个job，网络通信消耗长达50秒的时间，网络读写通信都达到了网卡的最大吞吐能力，整个集群都在等待网络传输。</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/84/7ddc70b5388ebc8a0b05959cbbf6f384.png?wh=690*226\" alt=\"\"></p><p>我们知道千兆网卡的最大传输速率是每秒125MB，这样的速率和CPU内存固然没法比，而虽然比单个磁盘快一些，但是服务器磁盘是8块磁盘组成的阵列，总的磁盘吞吐量依然碾压千兆网卡，因此网卡传输速率的瓶颈就成为整个系统的性能瓶颈。</p><p>而优化手段其实很简单粗暴，就是升级网卡使用万兆网卡。</p><p><img src=\"https://static001.geekbang.org/resource/image/44/0e/4495bc09fde62c856c2ff4316092c20e.png?wh=694*228\" alt=\"\"></p><p>硬件优化的效果非常明显，以前需要50多秒的网络通信时间，缩短为10秒左右。从性能曲线上看，网络通信在刚刚触及网卡最大传输速率的时候，就完成了传输，总的计算时间缩短了近100秒。</p><h2>小结</h2><p>一般说来，大数据软件性能优化会涉及硬件、操作系统、大数据产品及其配置、应用程序开发和部署几个方面。当性能不能满足需求的时候，先看看各项性能指标是否合理，如果资源没有全面利用，那么可能是配置不合理或者大数据应用程序（包括SQL语句）需要优化；如果某项资源利用已经达到极限，那么就要具体来分析，是集群资源不足，需要增加新的硬件服务器，还是需要对某项硬件、操作系统或是JVM，甚至是对大数据产品源代码进行调优。</p><h2>思考题</h2><p>关于目前的主要大数据产品，你在学习、使用过程中，从SQL写法、应用编程、参数配置，到大数据产品自身的架构原理与源码实现，你有没有发现有哪些可以进行性能优化的地方？</p><p>欢迎你点击“请朋友读”，把今天的文章分享给好友。也欢迎你写下自己的思考或疑问，与我和其他同学一起讨论。</p>","neighbors":{"left":{"article_title":"19 | Spark的性能优化案例分析（上）","id":72056},"right":{"article_title":"21 | 从阿里内部产品看海量数据处理系统的设计（上）：Doris的立项","id":73047}},"comments":[{"had_liked":false,"id":49272,"user_name":"sunlight001","can_delete":false,"product_type":"c1","uid":1126975,"ip_address":"","ucode":"A72C4274D5DE8A","user_header":"https://static001.geekbang.org/account/avatar/00/11/32/3f/fa4ac035.jpg","comment_is_top":false,"comment_ctime":1544658976,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"87444004896","product_id":100020201,"comment_content":"在公司里没有接触大数据的机会，要想深入学习的话，需要怎么办呢，现在不管是看书，看demo，等总是感觉不深入，有什么好的办法吗","like_count":21,"discussions":[{"author":{"id":1339820,"avatar":"https://static001.geekbang.org/account/avatar/00/14/71/ac/8295e3e7.jpg","nickname":"书忆江南","note":"","ucode":"90776A7CE06D66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265122,"discussion_content":"除了看《Hadoop权威指南》（第四版）、《大数据技术体系详解：原理、架构与实践》和《Spark权威指南》等之外，就只能看英文官网和对应组件的源码了，大数据平台开发这个岗位也很适合深入原理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589375583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49296,"user_name":"吴科🍀","can_delete":false,"product_type":"c1","uid":1112547,"ip_address":"","ucode":"8F2C317887A323","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/e3/2529c7dd.jpg","comment_is_top":false,"comment_ctime":1544662062,"is_pvip":false,"replies":[{"id":"17776","content":"👍🏻","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1544680884,"ip_address":"","comment_id":49296,"utype":1}],"discussion_count":2,"race_medal":0,"score":"61674204206","product_id":100020201,"comment_content":"我们公司集群作业最多的就是SQL作业约占80%，不管是hive SQL还是spark SQL，presto的SQL引擎都不是完美的，执行任务都有可能卡住99%就不动了。优化业务逻辑，SQL的写法是关键，减少重复计算，共用中间结果，还要有分区表的感念。","like_count":15,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432562,"discussion_content":"👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544680884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1150270,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8d/3e/239df6b2.jpg","nickname":"胡小发","note":"","ucode":"CB893FCC99AA1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40924,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572306114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49528,"user_name":"bill","can_delete":false,"product_type":"c1","uid":1276071,"ip_address":"","ucode":"F71C4812EDEF4A","user_header":"https://static001.geekbang.org/account/avatar/00/13/78/a7/5b730eac.jpg","comment_is_top":false,"comment_ctime":1544706161,"is_pvip":false,"replies":[{"id":"18184","content":"自己开发，后面会讲到。","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1545025590,"ip_address":"","comment_id":49528,"utype":1}],"discussion_count":3,"race_medal":0,"score":"48789346417","product_id":100020201,"comment_content":"老师，文中的图是用什么软件得出的？","like_count":12,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432649,"discussion_content":"自己开发，后面会讲到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545025590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1241185,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f0/61/fedca2e9.jpg","nickname":"(Kelen)","note":"","ucode":"C8578DB62E3B2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":181593,"discussion_content":"哪一节有这个监控的开发啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582376394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1339820,"avatar":"https://static001.geekbang.org/account/avatar/00/14/71/ac/8295e3e7.jpg","nickname":"书忆江南","note":"","ucode":"90776A7CE06D66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265124,"discussion_content":"zabbix也可以实现常见的监控功能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589375616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49558,"user_name":"杰之7","can_delete":false,"product_type":"c1","uid":1297232,"ip_address":"","ucode":"F7DA2E21085332","user_header":"https://static001.geekbang.org/account/avatar/00/13/cb/50/66d0bd7f.jpg","comment_is_top":false,"comment_ctime":1544713599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27314517375","product_id":100020201,"comment_content":"通过这节的阅读学习，通过第一个大数据实战产品，了解了性能调优的一般流程，通过性能测试，分析资源瓶颈，分析系统架构及代码，通过架构，代码及基础设施来进行调优，最后在进行测试。<br><br>老师通过5个方面进行的分析说明，1，Spark任务文件初始化调优，2，Spark任务调度优化，3，Spark应用配置优化，4，操作系统优化，5，硬件优化。通过这些维度的分析，我进一步的知道，做大数据开发，一样需要有好的计算机基本功，这是每一个技术人员的底层能力。<br><br>所以大数据开发中都会涉及到硬件，系统，大数据产品及其配置，应用程序开发和部署等实际经验，学习到这里，我需要真正做一判断，是真正决定走技术路，在接下来至少10年的时间去做技术呢？还是为了仅仅熟悉大数据方面的知识，适可而止呢？<br><br>我作为一名平凡而不想平庸的人，过程中再难我也会一路前行。","like_count":7},{"had_liked":false,"id":183354,"user_name":"Knuth","can_delete":false,"product_type":"c1","uid":1083616,"ip_address":"","ucode":"21298EF9BBB91A","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/e0/292508a4.jpg","comment_is_top":false,"comment_ctime":1583028599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18762897783","product_id":100020201,"comment_content":"操作系统究竟在忙什么，占用了这么多 CPU 时间？通过跟踪 Linux 内核执行指令。。。。。。。。。<br>具体是怎么发现的呢，可以列一下详细的步骤么？","like_count":5},{"had_liked":false,"id":49960,"user_name":"暴风雪","can_delete":false,"product_type":"c1","uid":1283139,"ip_address":"","ucode":"BF1523D69866FF","user_header":"https://static001.geekbang.org/account/avatar/00/13/94/43/46a7d0a8.jpg","comment_is_top":false,"comment_ctime":1544798384,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14429700272","product_id":100020201,"comment_content":"1.第一个案例的代码，关于文件锁的范围，我有强迫症，就是把锁的范围再缩小一点，仅仅锁住判断下载的那段代码就好啦。<br>2.关于案例5，我有点看不懂网络使用率的图，为什么是50多秒的延迟，能不能用红圈圈一下。","like_count":3,"discussions":[{"author":{"id":1587803,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3a/5b/ce1724ca.jpg","nickname":"undefined","note":"","ucode":"867405CA5A9FB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215820,"discussion_content":"X 是持续时间，Y 是当前吞吐量，X 轴上能看到一段 50s 的高峰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585386586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":49350,"user_name":"桃园悠然在","can_delete":false,"product_type":"c1","uid":1017637,"ip_address":"","ucode":"704460D9CAD1CB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/25/898dea4e.jpg","comment_is_top":false,"comment_ctime":1544669561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10134604153","product_id":100020201,"comment_content":"第三步【分析系统架构、代码，发现资源利用关键所在，思考优化策略】思考过程中可以拿阿姆达尔法则做指引，选出优化收益最大的模块<br>","like_count":2},{"had_liked":false,"id":49300,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1544662777,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10134597369","product_id":100020201,"comment_content":"怎么实现操作的，讲解安利有什么具体指标？超过多少算不合理","like_count":3},{"had_liked":false,"id":57896,"user_name":"木白","can_delete":false,"product_type":"c1","uid":1194009,"ip_address":"","ucode":"BEC459430B293C","user_header":"https://static001.geekbang.org/account/avatar/00/12/38/19/c8d72c61.jpg","comment_is_top":false,"comment_ctime":1546937009,"is_pvip":false,"replies":[{"id":"20869","content":"是的，数据会有更多移动","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1546938928,"ip_address":"","comment_id":57896,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5841904305","product_id":100020201,"comment_content":"在第二个案例中说到，先注册的Executor可能会认领全部的任务，也就是说其所在的物理机会把那个stage的全部工作都做了吗？但是本着“移动计算比移动数据更划算的理论”，如果所有的任务都在一台机器上做岂不是会导致数据的移动？不知道我的理解有没有错哈","like_count":2,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":435815,"discussion_content":"是的，数据会有更多移动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1546938928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228236,"user_name":"郭兰杰","can_delete":false,"product_type":"c1","uid":2025014,"ip_address":"","ucode":"B6CB65C83D7744","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLVxdKpjGwBPCyWkyoSib5YzHelnLPVhSEmDiaNEZy8OYOfBgRictaHXNqHJuOrMBff33orIHLINTc2Q/132","comment_is_top":false,"comment_ctime":1592621493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592621493","product_id":100020201,"comment_content":"有啥比较推荐的开源性能监测工具吗？","like_count":1},{"had_liked":false,"id":137248,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1569666587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569666587","product_id":100020201,"comment_content":"😜还没实际用大数据的东西，先自己开阔视野学习学习。","like_count":0},{"had_liked":false,"id":132875,"user_name":"aof","can_delete":false,"product_type":"c1","uid":1062864,"ip_address":"","ucode":"5815D63C4926BC","user_header":"https://static001.geekbang.org/account/avatar/00/10/37/d0/26975fba.jpg","comment_is_top":false,"comment_ctime":1568257089,"is_pvip":false,"replies":[{"id":"50905","content":"^_^","user_name":"作者回复","user_name_real":"李智慧","uid":"1007349","ctime":1568271125,"ip_address":"","comment_id":132875,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568257089","product_id":100020201,"comment_content":"又看了一遍，觉得老师在代码方面功底很强！","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467156,"discussion_content":"^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568271125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61514,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1547711351,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547711351","product_id":100020201,"comment_content":"1、你们用的是什么性能测试工具？<br>2、hadoop、spark是用java语言开发的吗？若是现在支持JDK9吗？","like_count":0},{"had_liked":false,"id":49733,"user_name":"追梦小乐","can_delete":false,"product_type":"c1","uid":1035507,"ip_address":"","ucode":"82AB8A7F98389D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/f3/5e4b0315.jpg","comment_is_top":false,"comment_ctime":1544758540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544758540","product_id":100020201,"comment_content":"李老师，案例2中说的 Worker 提供的计算单元数   默认是有几十个的吗？同时是不是可以根据spark.default.parallelism这个来指定的吗？","like_count":0},{"had_liked":false,"id":49344,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1544668421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544668421","product_id":100020201,"comment_content":"代码直接提交到apache?为什么不能直接下找","like_count":0}]}