{"id":119148,"title":"22 | 如何构造炫酷的动画效果？","content":"<p>你好，我是陈航。</p><p>在上一篇文章中，我带你一起学习了Flutter中实现页面路由的两种方式：基本路由与命名路由，即手动创建页面进行切换，和通过前置路由注册后提供标识符进行跳转。除此之外，Flutter还在这两种路由方式的基础上，支持页面打开和页面关闭传递参数，可以更精确地控制路由切换。</p><p>通过前面第<a href=\"https://time.geekbang.org/column/article/110292\">12</a>、<a href=\"https://time.geekbang.org/column/article/110859\">13</a>、<a href=\"https://time.geekbang.org/column/article/110848\">14</a>和<a href=\"https://time.geekbang.org/column/article/111673\">15</a>篇文章的学习，我们已经掌握了开发一款样式精美的小型App的基本技能。但当下，用户对于终端页面的要求已经不再满足于只能实现产品功能，除了样式美观之外，还希望交互良好、有趣、自然。</p><p>动画就是提升用户体验的一个重要方式，一个恰当的组件动画或者页面切换动画，不仅能够缓解用户因为等待而带来的情绪问题，还会增加好感。Flutter既然完全接管了渲染层，除了静态的页面布局之外，对组件动画的支持自然也不在话下。</p><p>因此在今天的这篇文章中，我会向你介绍Flutter中动画的实现方法，看看如何让我们的页面动起来。</p><h2>Animation、AnimationController与Listener</h2><p>动画就是动起来的画面，是静态的画面根据事先定义好的规律，在一定时间内不断微调，产生变化效果。而动画实现由静止到动态，主要是靠人眼的视觉残留效应。所以，对动画系统而言，为了实现动画，它需要做三件事儿：</p><!-- [[[read_end]]] --><ol>\n<li>确定画面变化的规律；</li>\n<li>根据这个规律，设定动画周期，启动动画；</li>\n<li>定期获取当前动画的值，不断地微调、重绘画面。</li>\n</ol><p>这三件事情对应到Flutter中，就是Animation、AnimationController与Listener：</p><ol>\n<li>Animation是Flutter动画库中的核心类，会根据预定规则，在单位时间内持续输出动画的当前状态。Animation知道当前动画的状态（比如，动画是否开始、停止、前进或者后退，以及动画的当前值），但却不知道这些状态究竟应用在哪个组件对象上。换句话说，Animation仅仅是用来提供动画数据，而不负责动画的渲染。</li>\n<li>AnimationController用于管理Animation，可以用来设置动画的时长、启动动画、暂停动画、反转动画等。</li>\n<li>Listener是Animation的回调函数，用来监听动画的进度变化，我们需要在这个回调函数中，根据动画的当前值重新渲染组件，实现动画的渲染。</li>\n</ol><p>接下来，我们看一个具体的案例：让大屏幕中间的Flutter Logo由小变大。</p><p>首先，我们初始化了一个动画周期为1秒的、用于管理动画的AnimationController对象，并用线性变化的Tween创建了一个变化范围从50到200的Animaiton对象。</p><p>然后，我们给这个Animaiton对象设置了一个进度监听器，并在进度监听器中强制界面重绘，刷新动画状态。</p><p>接下来，我们调用AnimationController对象的forward方法，启动动画：</p><pre><code>class _AnimateAppState extends State&lt;AnimateApp&gt; with SingleTickerProviderStateMixin {\n  AnimationController controller;\n  Animation&lt;double&gt; animation;\n  @override\n  void initState() {\n    super.initState();\n    //创建动画周期为1秒的AnimationController对象\n    controller = AnimationController(\n        vsync: this, duration: const Duration(milliseconds: 1000));\n    // 创建从50到200线性变化的Animation对象\n    animation = Tween(begin: 50.0, end: 200.0).animate(controller)\n      ..addListener(() {\n        setState(() {}); //刷新界面\n      });\n    controller.forward(); //启动动画\n  }\n...\n}\n</code></pre><p>需要注意的是，我们在创建AnimationController的时候，设置了一个vsync属性。这个属性是用来防止出现不可见动画的。vsync对象会把动画绑定到一个Widget，当Widget不显示时，动画将会暂停，当Widget再次显示时，动画会重新恢复执行，这样就可以避免动画的组件不在当前屏幕时白白消耗资源。</p><p>我们在一开始提到，Animation只是用于提供动画数据，并不负责动画渲染，所以我们还需要在Widget的build方法中，把当前动画状态的值读出来，用于设置Flutter Logo容器的宽和高，才能最终实现动画效果：</p><pre><code>@override\n@override\nWidget build(BuildContext context) {\n  return MaterialApp(\n    home: Center(\n      child: Container(\n      width: animation.value, // 将动画的值赋给widget的宽高\n      height: animation.value,\n      child: FlutterLogo()\n    )));\n}\n</code></pre><p>最后，别忘了在页面销毁时，要释放动画资源：</p><pre><code>@override\nvoid dispose() {\n  controller.dispose(); // 释放资源\n  super.dispose();\n}\n</code></pre><p>我们试着运行一下，可以看到，Flutter Logo动起来了：</p><p><img src=\"https://static001.geekbang.org/resource/image/c7/db/c73f5a245ecea87be428a83634ec12db.gif?wh=636*1132\" alt=\"\"></p><center><span class=\"reference\">图1 动画示例</span></center><p>我们在上面用到的Tween默认是线性变化的，但可以创建CurvedAnimation来实现非线性曲线动画。CurvedAnimation提供了很多常用的曲线，比如震荡曲线elasticOut：</p><pre><code>//创建动画周期为1秒的AnimationController对象\ncontroller = AnimationController(\n    vsync: this, duration: const Duration(milliseconds: 1000));\n\n//创建一条震荡曲线\nfinal CurvedAnimation curve = CurvedAnimation(\n    parent: controller, curve: Curves.elasticOut);\n// 创建从50到200跟随振荡曲线变化的Animation对象\nanimation = Tween(begin: 50.0, end: 200.0).animate(curve)\n</code></pre><p>运行一下，可以看到Flutter Logo有了一个弹性动画：</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/05/ce0f1ce6380329e3d9194518e2be2d05.gif?wh=640*1132\" alt=\"\"></p><center><span class=\"reference\">图2 CurvedAnimation 示例</span></center><p>现在的问题是，这些动画只能执行一次。如果想让它像心跳一样执行，有两个办法：</p><ol>\n<li>在启动动画时，使用repeat(reverse: true)，让动画来回重复执行。</li>\n<li>监听动画状态。在动画结束时，反向执行；在动画反向执行完毕时，重新启动执行。</li>\n</ol><p>具体的实现代码，如下所示：</p><pre><code>//以下两段语句等价\n//第一段\ncontroller.repeat(reverse: true);//让动画重复执行\n\n//第二段\nanimation.addStatusListener((status) {\n    if (status == AnimationStatus.completed) {\n      controller.reverse();//动画结束时反向执行\n    } else if (status == AnimationStatus.dismissed) {\n      controller.forward();//动画反向执行完毕时，重新执行\n    }\n});\ncontroller.forward();//启动动画\n</code></pre><p>运行一下，可以看到，我们实现了Flutter Logo的心跳效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/48/a7e5b1fd635a557cb4289273bd299e48.gif?wh=636*1132\" alt=\"\"></p><center><span class=\"reference\">图3 Flutter Logo心跳</span></center><h2>AnimatedWidget与AnimatedBuilder</h2><p>在为Widget添加动画效果的过程中我们不难发现，Animation仅提供动画的数据，因此我们还需要监听动画执行进度，并在回调中使用setState强制刷新界面才能看到动画效果。考虑到这些步骤都是固定的，Flutter提供了两个类来帮我们简化这一步骤，即AnimatedWidget与AnimatedBuilder。</p><p>接下来，我们分别看看这两个类如何使用。</p><p>在构建Widget时，AnimatedWidget会将Animation的状态与其子Widget的视觉样式绑定。要使用AnimatedWidget，我们需要一个继承自它的新类，并接收Animation对象作为其初始化参数。然后，在build方法中，读取出Animation对象的当前值，用作初始化Widget的样式。</p><p>下面的案例演示了Flutter Logo的AnimatedWidget版本：用AnimatedLogo继承了AnimatedWidget，并在build方法中，把动画的值与容器的宽高做了绑定：</p><pre><code>class AnimatedLogo extends AnimatedWidget {\n  //AnimatedWidget需要在初始化时传入animation对象\n  AnimatedLogo({Key key, Animation&lt;double&gt; animation})\n      : super(key: key, listenable: animation);\n\n  Widget build(BuildContext context) {\n    //取出动画对象\n    final Animation&lt;double&gt; animation = listenable;\n    return Center(\n      child: Container(\n        height: animation.value,//根据动画对象的当前状态更新宽高\n        width: animation.value,\n        child: FlutterLogo(),\n    ));\n  }\n}\n</code></pre><p>在使用时，我们只需把Animation对象传入AnimatedLogo即可，再也不用监听动画的执行进度刷新UI了：</p><pre><code>MaterialApp(\n  home: Scaffold(\n    body: AnimatedLogo(animation: animation)//初始化AnimatedWidget时传入animation对象\n));\n</code></pre><p>在上面的例子中，在AnimatedLogo的build方法中，我们使用Animation的value作为logo的宽和高。这样做对于简单组件的动画没有任何问题，但如果动画的组件比较复杂，一个更好的解决方案是，<strong>将动画和渲染职责分离</strong>：logo作为外部参数传入，只做显示；而尺寸的变化动画则由另一个类去管理。</p><p>这个分离工作，我们可以借助AnimatedBuilder来完成。</p><p>与AnimatedWidget类似，AnimatedBuilder也会自动监听Animation对象的变化，并根据需要将该控件树标记为dirty以自动刷新UI。事实上，如果你翻看<a href=\"https://github.com/flutter/flutter/blob/ca5411e3aa99d571ddd80b75b814718c4a94c839/packages/flutter/lib/src/widgets/transitions.dart#L920\">源码</a>，就会发现AnimatedBuilder其实也是继承自AnimatedWidget。</p><p>我们以一个例子来演示如何使用AnimatedBuilder。在这个例子中，AnimatedBuilder的尺寸变化动画由builder函数管理，渲染则由外部传入child参数负责：</p><pre><code>MaterialApp(\n  home: Scaffold(\n    body: Center(\n      child: AnimatedBuilder(\n        animation: animation,//传入动画对象\n        child:FlutterLogo(),\n        //动画构建回调\n        builder: (context, child) =&gt; Container(\n          width: animation.value,//使用动画的当前状态更新UI\n          height: animation.value,\n          child: child, //child参数即FlutterLogo()\n        )\n      )\n    )\n));\n</code></pre><p>可以看到，通过使用AnimatedWidget和AnimatedBuilder，动画的生成和最终的渲染被分离开了，构建动画的工作也被大大简化了。</p><h2>hero动画</h2><p>现在我们已经知道了如何在一个页面上实现动画效果，那么如何实现在两个页面之间切换的过渡动画呢？比如在社交类App，在Feed流中点击小图进入查看大图页面的场景中，我们希望能够实现小图到大图页面逐步放大的动画切换效果，而当用户关闭大图时，也实现原路返回的动画。</p><p>这样的跨页面共享的控件动画效果有一个专门的名词，即“共享元素变换”（Shared Element Transition）。</p><p>对于Android开发者来说，这个概念并不陌生。Android原生提供了对这种动画效果的支持，通过几行代码，就可以实现在两个Activity共享的组件之间做出流畅的转场动画。</p><p>又比如，Keynote提供了的“神奇移动”（Magic Move）功能，可以实现两个Keynote页面之间的流畅过渡。</p><p>Flutter也有类似的概念，即Hero控件。<strong>通过Hero，我们可以在两个页面的共享元素之间，做出流畅的页面切换效果。</strong></p><p>接下来，我们通过一个案例来看看Hero组件具体如何使用。</p><p>在下面的例子中，我定义了两个页面，其中page1有一个位于底部的小Flutter Logo，page2有一个位于中部的大Flutter Logo。在点击了page1的小logo后，会使用hero效果过渡到page2。</p><p>为了实现共享元素变换，我们需要将这两个组件分别用Hero包裹，并同时为它们设置相同的tag “hero”。然后，为page1添加点击手势响应，在用户点击logo时，跳转到page2：</p><pre><code>class Page1 extends StatelessWidget {\n  Widget build(BuildContext context) {\n    return  Scaffold(\n      body: GestureDetector(//手势监听点击\n        child: Hero(\n          tag: 'hero',//设置共享tag\n          child: Container(\n            width: 100, height: 100,\n            child: FlutterLogo())),\n        onTap: () {\n          Navigator.of(context).push(MaterialPageRoute(builder: (_)=&gt;Page2()));//点击后打开第二个页面\n        },\n      )\n    );\n  }\n}\n\nclass Page2 extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return  Scaffold(\n      body: Hero(\n        tag: 'hero',//设置共享tag\n        child: Container(\n          width: 300, height: 300,\n          child: FlutterLogo()\n        ))\n    );\n  }\n}\n</code></pre><p>运行一下，可以看到，我们通过简单的两步，就可以实现元素跨页面飞行的复杂动画效果了！</p><p><img src=\"https://static001.geekbang.org/resource/image/c5/d6/c5fe68b6e627d8285ed6aadf932abcd6.gif?wh=636*1132\" alt=\"\"></p><center><span class=\"reference\">图4 Hero动画</span></center><h2>总结</h2><p>好了，今天的分享就到这里。我们简单回顾一下今天的主要内容吧。</p><p>在Flutter中，动画的状态与渲染是分离的。我们通过Animation生成动画曲线，使用AnimationController控制动画时间、启动动画。而动画的渲染，则需要设置监听器获取动画进度后，重新触发组件用新的动画状态刷新后才能实现动画的更新。</p><p>为了简化这一步骤，Flutter提供了AnimatedWidget和AnimatedBuilder这两个组件，省去了状态监听和UI刷新的工作。而对于跨页面动画，Flutter提供了Hero组件，只要两个相同（相似）的组件有同样的tag，就能实现元素跨页面过渡的转场效果。</p><p>可以看到，Flutter对于动画的分层设计还是非常简单清晰的，但造成的副作用就是使用起来稍微麻烦一些。对于实际应用而言，由于动画过程涉及到页面的频繁刷新，因此我强烈建议你尽量使用AnimatedWidget或AnimatedBuilder来缩小受动画影响的组件范围，只重绘需要做动画的组件即可，要避免使用进度监听器直接刷新整个页面，让不需要做动画的组件也跟着一起销毁重建。</p><p>我把今天分享中所涉及的针对控件的普通动画，AnimatedBuilder和AnimatedWidget，以及针对页面的过渡动画Hero打包到了<a href=\"https://github.com/cyndibaby905/22_app_animation\">GitHub</a>上，你可以把工程下载下来，多运行几次，体会这几种动画的具体使用方法。</p><h2>思考题</h2><p>最后，我给你留下两个小作业吧。</p><pre><code>AnimatedBuilder(\n  animation: animation,\n  child:FlutterLogo(),\n  builder: (context, child) =&gt; Container(\n    width: animation.value,\n    height: animation.value,\n    child: child\n  )\n)\n</code></pre><ol>\n<li>在AnimatedBuilder的例子中，child似乎被指定了两遍（第3行的child与第7行的child），你可以解释下这么做的原因吗？</li>\n<li>如果我把第3行的child删掉，把Flutter Logo放到第7行，动画是否能正常执行？这会有什么问题吗？</li>\n</ol><p>欢迎你在评论区给我留言分享你的观点，我会在下一篇文章中等待你！感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><p></p>","neighbors":{"left":{"article_title":"21 | 路由与导航，Flutter是这样实现页面切换的","id":118421},"right":{"article_title":"23 | 单线程模型怎么保证UI运行流畅？","id":120014}},"comments":[{"had_liked":false,"id":124933,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566019894,"is_pvip":false,"replies":[{"id":"45842","content":"赞","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566040581,"ip_address":"","comment_id":124933,"utype":1}],"discussion_count":5,"race_medal":0,"score":"35925758262","product_id":100031001,"comment_content":"1.第一个child会被用于参数传入builder函数，可以将动画与组件渲染代码解耦。<br>2.可以正常执行，问题就是初始状态就要跟随动画。","like_count":9,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463365,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566040581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1256263,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2b/47/0f998c46.jpg","nickname":"Yannis","note":"","ucode":"FC62D676566EEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274941,"discussion_content":"问题2：其实还有一个性能问题，如果把FlutterLogo放到builder里面，会导致多次创建FlutterLogo，因为builder会随着动画多次调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590635681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1348475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/93/7b/97d45363.jpg","nickname":"狗子不要喝奶茶","note":"","ucode":"CFA6E96B5F9D0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":160471,"discussion_content":"初始状态跟随动画是什么意思呢\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580806916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194659,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/a3/47a0c3c6.jpg","nickname":"zhangls","note":"","ucode":"E3E2840EA4BDB1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5258,"discussion_content":"老哥你很活跃啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566119163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1603017,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBsNaictOELd8V5cwPd0IKXiaJe7nzgmq9Ighibkku58rdwT5V1qUSuaULh8SAUou3aXEE3o8MNpeEhQ/132","nickname":"努力为明天","note":"","ucode":"39785D1D09AE37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5201,"discussion_content":"初始状态跟随动画是什么意思？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566044115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136318,"user_name":"和小胖","can_delete":false,"product_type":"c1","uid":1180727,"ip_address":"","ucode":"406BD7AB987EBF","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/37/aa04f997.jpg","comment_is_top":false,"comment_ctime":1569408030,"is_pvip":false,"replies":[{"id":"52563","content":"赞","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1569582646,"ip_address":"","comment_id":136318,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18749277214","product_id":100031001,"comment_content":"关于作业题，找到了源代码注释，哈哈哈。<br><br>&#47;&#47;&#47; If the pre-built subtree is passed as the [child] parameter, the<br>&#47;&#47;&#47; [AnimatedBuilder] will pass it back to the [builder] function so that it<br>&#47;&#47;&#47; can be incorporated into the build.<br>&#47;&#47;&#47;<br>&#47;&#47;&#47; Using this pre-built child is entirely optional, but can improve<br>&#47;&#47;&#47; performance significantly in some cases and is therefore a good practice.<br>&#47;&#47;&#47; can be incorporated into the build.<br>&#47;&#47;&#47;<br>&#47;&#47;&#47; Using this pre-built child is entirely optional, but can improve<br>&#47;&#47;&#47; performance significantly in some cases and is therefore a good practice.","like_count":5,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468567,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569582646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125554,"user_name":"亡命之徒","can_delete":false,"product_type":"c1","uid":1096669,"ip_address":"","ucode":"5B0ADD558F9712","user_header":"https://static001.geekbang.org/account/avatar/00/10/bb/dd/5d473145.jpg","comment_is_top":false,"comment_ctime":1566202882,"is_pvip":false,"replies":[{"id":"46312","content":"1.文本输入需要用StatefulWidget<br>2.文本输入控制使用TextEditingController","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566285631,"ip_address":"","comment_id":125554,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10156137474","product_id":100031001,"comment_content":"老师有没有遇到这个问题，Widget myFormWidget(BuildContext context){在这里吗创建一个form组件}<br>，class BodyWidget extends StatelessWidget {<br>  @override<br>  Widget build(BuildContext context) {<br>    &#47;&#47; TODO: implement build<br>    return Column(<br>      mainAxisAlignment: MainAxisAlignment.start,<br>      children: &lt;Widget&gt;[<br>        &#47;&#47; textFieldWidget(context),<br>        myFormWidget(context),<br>      ],<br>    );<br>  }<br>然后通过这种方式调用，键盘刚获取焦点立马就是去焦点了，无法输入，这是什么原因","like_count":2,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463605,"discussion_content":"1.文本输入需要用StatefulWidget\n2.文本输入控制使用TextEditingController","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566285631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130940,"user_name":"高超","can_delete":false,"product_type":"c1","uid":1645617,"ip_address":"","ucode":"755F8D526B18DD","user_header":"https://static001.geekbang.org/account/avatar/00/19/1c/31/8b5b8fbb.jpg","comment_is_top":false,"comment_ctime":1567580893,"is_pvip":false,"replies":[{"id":"49189","content":"赞","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1567599930,"ip_address":"","comment_id":130940,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5862548189","product_id":100031001,"comment_content":"AnimatedBulder 其实就是封装了下 AnimatedWdiget，在 AnimatedBulder 内部调用了 builder 函数，构建 widget 样式<br><br>这样的好处就是给真实要渲染的widget上加了一层 Container，所有的动画都是在那个 Container 上完成。<br><br>回答问题：<br>1. 为了渲染和动画分离<br>2. 可以的就是渲染和动画又揉一起了","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466204,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567599930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130861,"user_name":"宋世通","can_delete":false,"product_type":"c1","uid":1245468,"ip_address":"","ucode":"C7AA3F0E6930F3","user_header":"https://static001.geekbang.org/account/avatar/00/13/01/1c/d638d46e.jpg","comment_is_top":false,"comment_ctime":1567561046,"is_pvip":false,"replies":[{"id":"49515","content":"赞","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1567677793,"ip_address":"","comment_id":130861,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5862528342","product_id":100031001,"comment_content":"看了下关于child的注释，感觉1，2是一个问题<br>1  child是可选的，作为builder的参数给开发者使用，在某些情况下可以提高性能，因此最好要传入child<br>2  通过child和builder的方式，动画时不必每次重新构建 child，这样限定了重建rebuild的范围，在builder中的widget才会重建，这可能是提高性能的一部分原因<br>3  如果builder返回的子树不依赖动画，更好的方式是build构建一次，也就是将子树作为child传入","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466160,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567677793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245468,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/1c/d638d46e.jpg","nickname":"宋世通","note":"","ucode":"C7AA3F0E6930F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7547,"discussion_content":"4   关于动画与组件分离的观点\n     在builder中通过对child包裹 transition， transform，container等组件的方式来进行动画，实现动画和child的分离而不是将动画和child糅合在一起","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567561897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128948,"user_name":"ptlCoder","can_delete":false,"product_type":"c1","uid":1029656,"ip_address":"","ucode":"B7CF1C4A5970B9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b6/18/ede273fe.jpg","comment_is_top":false,"comment_ctime":1566991258,"is_pvip":false,"replies":[{"id":"49190","content":"赞","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1567600305,"ip_address":"","comment_id":128948,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5861958554","product_id":100031001,"comment_content":"删除了就跟AnimatedWidget没有什么区别了 达不到渲染和动画隔离","like_count":1,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465189,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567600305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345466,"user_name":"故事与酒","can_delete":false,"product_type":"c1","uid":2788244,"ip_address":"","ucode":"1A0CCAA2C31D3C","user_header":"https://static001.geekbang.org/account/avatar/00/2a/8b/94/09dca97d.jpg","comment_is_top":false,"comment_ctime":1652308593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652308593","product_id":100031001,"comment_content":"老师，能问一下吗，我没学过动画，那个动画的监听监听的是什么事件，是只要动画数据一变，他就会监听到吗","like_count":0},{"had_liked":false,"id":224174,"user_name":"小菜鸟学php","can_delete":false,"product_type":"c1","uid":1683755,"ip_address":"","ucode":"C417C76E18B062","user_header":"https://static001.geekbang.org/account/avatar/00/19/b1/2b/9406d19a.jpg","comment_is_top":false,"comment_ctime":1591311451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591311451","product_id":100031001,"comment_content":"老师，AnimatedBuild比AnimatedWidget的优势，我还是没理解，看下面的回复也没明白。","like_count":0},{"had_liked":false,"id":164264,"user_name":"cv0cv0","can_delete":false,"product_type":"c1","uid":1360093,"ip_address":"","ucode":"93FF9277F03FD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","comment_is_top":false,"comment_ctime":1576919378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576919378","product_id":100031001,"comment_content":"Hero 动画不够完美。","like_count":0},{"had_liked":false,"id":140735,"user_name":"黄明星","can_delete":false,"product_type":"c1","uid":1200119,"ip_address":"","ucode":"E031900C8A281E","user_header":"https://static001.geekbang.org/account/avatar/00/12/4f/f7/0c4c107b.jpg","comment_is_top":false,"comment_ctime":1571039493,"is_pvip":false,"replies":[{"id":"56186","content":"如果Animation是相同的，再包一层就可以了呀；如果Animation不同，那就分别做好了，跟普通widget没啥区别","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1572320963,"ip_address":"","comment_id":140735,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571039493","product_id":100031001,"comment_content":"用AnimatedWidget的方式，如果要传入多个Animation对象，listenable应该如何取呢？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470533,"discussion_content":"如果Animation是相同的，再包一层就可以了呀；如果Animation不同，那就分别做好了，跟普通widget没啥区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572320963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136319,"user_name":"和小胖","can_delete":false,"product_type":"c1","uid":1180727,"ip_address":"","ucode":"406BD7AB987EBF","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/37/aa04f997.jpg","comment_is_top":false,"comment_ctime":1569408155,"is_pvip":false,"replies":[{"id":"52562","content":"repeat和forward只需要一个就可以了，不用两个都写","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1569582631,"ip_address":"","comment_id":136319,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569408155","product_id":100031001,"comment_content":"在写代码时候需要注意得地方，controller.repeat(reverse: true) 让动画重复执行的一定要写在动画开始 controller.forward() 之后，否则应该会不生效，这是我遇到的情况。","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468568,"discussion_content":"repeat和forward只需要一个就可以了，不用两个都写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569582631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}