{"id":68638,"title":"25 | 红黑树（上）：为什么工程中都用红黑树这种二叉树？","content":"<p>上两节，我们依次讲了树、二叉树、二叉查找树。二叉查找树是最常用的一种二叉树，它支持快速插入、删除、查找操作，各个操作的时间复杂度跟树的高度成正比，理想情况下，时间复杂度是O(logn)。</p><p>不过，二叉查找树在频繁的动态更新过程中，可能会出现树的高度远大于log<sub>2</sub>n的情况，从而导致各个操作的效率下降。极端情况下，二叉树会退化为链表，时间复杂度会退化到O(n)。我上一节说了，要解决这个复杂度退化的问题，我们需要设计一种平衡二叉查找树，也就是今天要讲的这种数据结构。</p><p>很多书籍里，但凡讲到平衡二叉查找树，就会拿红黑树作为例子。不仅如此，如果你有一定的开发经验，你会发现，在工程中，很多用到平衡二叉查找树的地方都会用红黑树。你有没有想过，<strong><span class=\"orange\">为什么工程中都喜欢用红黑树，而不是其他平衡二叉查找树呢？</span></strong></p><p>带着这个问题，让我们一起来学习今天的内容吧！</p><h2>什么是“平衡二叉查找树”？</h2><p>平衡二叉树的严格定义是这样的：二叉树中任意一个节点的左右子树的高度相差不能大于1。从这个定义来看，上一节我们讲的完全二叉树、满二叉树其实都是平衡二叉树，但是非完全二叉树也有可能是平衡二叉树。</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/9b/dd9f5a4525f5029a8339c89ad1c8159b.jpg?wh=1142*605\" alt=\"\"></p><p>平衡二叉查找树不仅满足上面平衡二叉树的定义，还满足二叉查找树的特点。最先被发明的平衡二叉查找树是<a href=\"https://zh.wikipedia.org/wiki/AVL%E6%A0%91\">AVL树</a>，它严格符合我刚讲到的平衡二叉查找树的定义，即任何节点的左右子树高度相差不超过1，是一种高度平衡的二叉查找树。</p><!-- [[[read_end]]] --><p>但是很多平衡二叉查找树其实并没有严格符合上面的定义（树中任意一个节点的左右子树的高度相差不能大于1），比如我们下面要讲的红黑树，它从根节点到各个叶子节点的最长路径，有可能会比最短路径大一倍。</p><p>我们学习数据结构和算法是为了应用到实际的开发中的，所以，我觉得没必去死抠定义。对于平衡二叉查找树这个概念，我觉得我们要从这个数据结构的由来，去理解“平衡”的意思。</p><p>发明平衡二叉查找树这类数据结构的初衷是，解决普通二叉查找树在频繁的插入、删除等动态更新的情况下，出现时间复杂度退化的问题。</p><p>所以，<strong>平衡二叉查找树中“平衡”的意思，其实就是让整棵树左右看起来比较“对称”、比较“平衡”，不要出现左子树很高、右子树很矮的情况。这样就能让整棵树的高度相对来说低一些，相应的插入、删除、查找等操作的效率高一些。</strong></p><p>所以，如果我们现在设计一个新的平衡二叉查找树，只要树的高度不比log<sub>2</sub>n大很多（比如树的高度仍然是对数量级的），尽管它不符合我们前面讲的严格的平衡二叉查找树的定义，但我们仍然可以说，这是一个合格的平衡二叉查找树。</p><h2>如何定义一棵“红黑树”？</h2><p>平衡二叉查找树其实有很多，比如，Splay Tree（伸展树）、Treap（树堆）等，但是我们提到平衡二叉查找树，听到的基本都是红黑树。它的出镜率甚至要高于“平衡二叉查找树”这几个字，有时候，我们甚至默认平衡二叉查找树就是红黑树，那我们现在就来看看这个“明星树”。</p><p>红黑树的英文是“Red-Black Tree”，简称R-B Tree。它是一种不严格的平衡二叉查找树，我前面说了，它的定义是不严格符合平衡二叉查找树的定义的。那红黑树究竟是怎么定义的呢？</p><p>顾名思义，红黑树中的节点，一类被标记为黑色，一类被标记为红色。除此之外，一棵红黑树还需要满足这样几个要求：</p><ul>\n<li>\n<p>根节点是黑色的；</p>\n</li>\n<li>\n<p>每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；</p>\n</li>\n<li>\n<p>任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；</p>\n</li>\n<li>\n<p>每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；</p>\n</li>\n</ul><p>这里的第二点要求“叶子节点都是黑色的空节点”，稍微有些奇怪，它主要是为了简化红黑树的代码实现而设置的，下一节我们讲红黑树的实现的时候会讲到。<strong>这节我们暂时不考虑这一点，所以，在画图和讲解的时候，我将黑色的、空的叶子节点都省略掉了。</strong></p><p>为了让你更好地理解上面的定义，我画了两个红黑树的图例，你可以对照着看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/90/9a/903ee0dcb62bce2f5b47819541f9069a.jpg?wh=1142*473\" alt=\"\"></p><h2>为什么说红黑树是“近似平衡”的？</h2><p>我们前面也讲到，平衡二叉查找树的初衷，是为了解决二叉查找树因为动态更新导致的性能退化问题。所以，<strong>“平衡”的意思可以等价为性能不退化。“近似平衡”就等价为性能不会退化得太严重</strong>。</p><p>我们在上一节讲过，二叉查找树很多操作的性能都跟树的高度成正比。一棵极其平衡的二叉树（满二叉树或完全二叉树）的高度大约是log<sub>2</sub>n，所以如果要证明红黑树是近似平衡的，我们只需要分析，红黑树的高度是否比较稳定地趋近log<sub>2</sub>n就好了。</p><p>红黑树的高度不是很好分析，我带你一步一步来推导。</p><p><strong>首先，我们来看，如果我们将红色节点从红黑树中去掉，那单纯包含黑色节点的红黑树的高度是多少呢？</strong></p><p>红色节点删除之后，有些节点就没有父节点了，它们会直接拿这些节点的祖父节点（父节点的父节点）作为父节点。所以，之前的二叉树就变成了四叉树。</p><p><img src=\"https://static001.geekbang.org/resource/image/7e/ed/7e6ecc308fe44120f30de809822215ed.jpg?wh=1142*803\" alt=\"\"></p><p>前面红黑树的定义里有这么一条：从任意节点到可达的叶子节点的每个路径包含相同数目的黑色节点。我们从四叉树中取出某些节点，放到叶节点位置，四叉树就变成了完全二叉树。所以，仅包含黑色节点的四叉树的高度，比包含相同节点个数的完全二叉树的高度还要小。</p><p>上一节我们说，完全二叉树的高度近似log<sub>2</sub>n，这里的四叉“黑树”的高度要低于完全二叉树，所以去掉红色节点的“黑树”的高度也不会超过log<sub>2</sub>n。</p><p><strong>我们现在知道只包含黑色节点的“黑树”的高度，那我们现在把红色节点加回去，高度会变成多少呢？</strong></p><p>从上面我画的红黑树的例子和定义看，在红黑树中，红色节点不能相邻，也就是说，有一个红色节点就要至少有一个黑色节点，将它跟其他红色节点隔开。红黑树中包含最多黑色节点的路径不会超过log<sub>2</sub>n，所以加入红色节点之后，最长路径不会超过2log<sub>2</sub>n，也就是说，红黑树的高度近似2log<sub>2</sub>n。</p><p>所以，红黑树的高度只比高度平衡的AVL树的高度（log<sub>2</sub>n）仅仅大了一倍，在性能上，下降得并不多。这样推导出来的结果不够精确，实际上红黑树的性能更好。</p><h2>解答开篇</h2><p>我们刚刚提到了很多平衡二叉查找树，现在我们就来看下，为什么在工程中大家都喜欢用红黑树这种平衡二叉查找树？</p><p>我们前面提到Treap、Splay Tree，绝大部分情况下，它们操作的效率都很高，但是也无法避免极端情况下时间复杂度的退化。尽管这种情况出现的概率不大，但是对于单次操作时间非常敏感的场景来说，它们并不适用。</p><p>AVL树是一种高度平衡的二叉树，所以查找的效率非常高，但是，有利就有弊，AVL树为了维持这种高度的平衡，就要付出更多的代价。每次插入、删除都要做调整，就比较复杂、耗时。所以，对于有频繁的插入、删除操作的数据集合，使用AVL树的代价就有点高了。</p><p>红黑树只是做到了近似平衡，并不是严格的平衡，所以在维护平衡的成本上，要比AVL树要低。</p><p>所以，红黑树的插入、删除、查找各种操作性能都比较稳定。对于工程应用来说，要面对各种异常情况，为了支撑这种工业级的应用，我们更倾向于这种性能稳定的平衡二叉查找树。</p><h2>内容小结</h2><p>很多同学都觉得红黑树很难，的确，它算是最难掌握的一种数据结构。其实红黑树最难的地方是它的实现，我们今天还没有涉及，下一节我会专门来讲。</p><p>不过呢，我认为，我们其实不应该把学习的侧重点，放到它的实现上。那你可能要问了，关于红黑树，我们究竟需要掌握哪些东西呢？</p><p>还记得我多次说过的观点吗？<strong>我们学习数据结构和算法，要学习它的由来、特性、适用的场景以及它能解决的问题。对于红黑树，也不例外。你如果能搞懂这几个问题，其实就已经足够了。</strong></p><p>红黑树是一种平衡二叉查找树。它是为了解决普通二叉查找树在数据更新的过程中，复杂度退化的问题而产生的。红黑树的高度近似log<sub>2</sub>n，所以它是近似平衡，插入、删除、查找操作的时间复杂度都是O(logn)。</p><p>因为红黑树是一种性能非常稳定的二叉查找树，所以，在工程中，但凡是用到动态插入、删除、查找数据的场景，都可以用到它。不过，它实现起来比较复杂，如果自己写代码实现，难度会有些高，这个时候，我们其实更倾向用跳表来替代它。</p><h2>课后思考</h2><p>动态数据结构支持动态的数据插入、删除、查找操作，除了红黑树，我们前面还学习过哪些呢？能对比一下各自的优势、劣势，以及应用场景吗？</p><p>欢迎留言和我分享，我会第一时间给你反馈。</p>","neighbors":{"left":{"article_title":"24 | 二叉树基础（下）：有了如此高效的散列表，为什么还需要二叉树？","id":68334},"right":{"article_title":"26 | 红黑树（下）：掌握这些技巧，你也可以实现一个红黑树","id":68976}},"comments":[{"had_liked":true,"id":45636,"user_name":"kakasi","can_delete":false,"product_type":"c1","uid":1237297,"ip_address":"","ucode":"64F357E6A08CA5","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/31/eb103bdc.jpg","comment_is_top":false,"comment_ctime":1543732510,"is_pvip":false,"discussion_count":36,"race_medal":0,"score":"2114667642142","product_id":100017301,"comment_content":"散列表：插入删除查找都是O(1), 是最常用的，但其缺点是不能顺序遍历以及扩容缩容的性能损耗。适用于那些不需要顺序遍历，数据更新不那么频繁的。<br><br>跳表：插入删除查找都是O(logn), 并且能顺序遍历。缺点是空间复杂度O(n)。适用于不那么在意内存空间的，其顺序遍历和区间查找非常方便。<br><br>红黑树：插入删除查找都是O(logn), 中序遍历即是顺序遍历，稳定。缺点是难以实现，去查找不方便。其实跳表更佳，但红黑树已经用于很多地方了。","like_count":493,"discussions":[{"author":{"id":1085207,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8f/17/aa66313a.jpg","nickname":"Shaw","note":"","ucode":"CE382F300EFF19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294758,"discussion_content":"了解了，卡卡西老师","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1595989601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1652836,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epKJlW7sqts2ZbPuhMbseTAdvHWnrc4ficAeSZyKibkvn6qyxflPrkKKU3mH6XCNmYvDg11tB6y0pxg/132","nickname":"pc","note":"","ucode":"1AD538B9A900B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":253354,"discussion_content":"没有人指出跳跃表浪费空间这个点么？理论上跳跃表比二叉树用的指针还少","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588229437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":2083270,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/c9/c6/cf8e9852.jpg","nickname":"dhlpj","note":"","ucode":"250ADDFEBC969D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1652836,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epKJlW7sqts2ZbPuhMbseTAdvHWnrc4ficAeSZyKibkvn6qyxflPrkKKU3mH6XCNmYvDg11tB6y0pxg/132","nickname":"pc","note":"","ucode":"1AD538B9A900B6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377042,"discussion_content":"红黑树和跳表空间复杂度应该都是O(n)吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622471303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":253354,"ip_address":""},"score":377042,"extra":""},{"author":{"id":2223995,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOrAsTjYmJxSiarVfCV8UKkFA3XtIkctRic9U2zCKcibOQANQerPVav6l3JaNInhAVeOQI1iayegS1cQ/132","nickname":"wubc","note":"","ucode":"AB1AF7417FE6FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2083270,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/c9/c6/cf8e9852.jpg","nickname":"dhlpj","note":"","ucode":"250ADDFEBC969D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378740,"discussion_content":"我感觉，这个空间复杂度的计算应该跟原地排序那个空间复杂度计算一样。空间复杂度不算数据本身所占的空间。红黑树应该是O(1)，调表因为需要额外添加n/2+n/4+n/8...差不多等于n，所以空间复杂度为O(n)","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1623382805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":377042,"ip_address":""},"score":378740,"extra":""},{"author":{"id":2459923,"avatar":"https://static001.geekbang.org/account/avatar/00/25/89/13/0d3c5008.jpg","nickname":"最好不过","note":"","ucode":"C7DBCD08402DF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2223995,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOrAsTjYmJxSiarVfCV8UKkFA3XtIkctRic9U2zCKcibOQANQerPVav6l3JaNInhAVeOQI1iayegS1cQ/132","nickname":"wubc","note":"","ucode":"AB1AF7417FE6FF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378982,"discussion_content":"的确是的，这里的空间复杂度指的是除了保存原始数据之外的额外空间，跳表需要额外的O(n)空间保存索引","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1623573750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":378740,"ip_address":""},"score":378982,"extra":""}]},{"author":{"id":1236079,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","nickname":"短迪大魔王","note":"","ucode":"37E8117E0495B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":156274,"discussion_content":"散列表也不一定无序，前面学到可以在散列表基础上加入双向链表，构成有序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580347683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1798068,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/6f/b4/d465acef.jpg","nickname":"啊噗！","note":"","ucode":"C911E772E1E800","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1236079,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","nickname":"短迪大魔王","note":"","ucode":"37E8117E0495B8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165090,"discussion_content":"但是这个有序也不是数据上的有序 而是时间上的有序","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1581254308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":156274,"ip_address":""},"score":165090,"extra":""},{"author":{"id":1108832,"avatar":"https://static001.geekbang.org/account/avatar/00/10/eb/60/17f279cc.jpg","nickname":"筑梦","note":"","ucode":"702137FB9EF79B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1798068,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/6f/b4/d465acef.jpg","nickname":"啊噗！","note":"","ucode":"C911E772E1E800","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229545,"discussion_content":"加双向链表其实就是为了保证按某一条件有序，这个条件可以是插入时间也可以是数据大小","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586664008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":165090,"ip_address":""},"score":229545,"extra":""},{"author":{"id":1320730,"avatar":"https://static001.geekbang.org/account/avatar/00/14/27/1a/77fb1e4e.jpg","nickname":"Lingjun","note":"","ucode":"5CE38C19231D3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1236079,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","nickname":"短迪大魔王","note":"","ucode":"37E8117E0495B8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":250614,"discussion_content":"维护一个有序的链表本身就需要额外的开销了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588032348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":156274,"ip_address":""},"score":250614,"extra":""}]},{"author":{"id":2133309,"avatar":"https://static001.geekbang.org/account/avatar/00/20/8d/3d/91b1afd3.jpg","nickname":"小北","note":"","ucode":"8FE84905F0E073","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304703,"discussion_content":"禁止套哇哦\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599644632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016134,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/81/46/7d39bbf6.jpg","nickname":"晨雨零稀","note":"","ucode":"CD95487482F634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213383,"discussion_content":"这就是起步早的优势！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585066015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":151948,"discussion_content":"红黑树还有其他两个没有的优点吧：输出排序的数据，其他两个的顺序只是插入的顺序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579922302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1798068,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/6f/b4/d465acef.jpg","nickname":"啊噗！","note":"","ucode":"C911E772E1E800","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165130,"discussion_content":"跳表就是排序的顺序数据啊","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1581255942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":151948,"ip_address":""},"score":165130,"extra":""},{"author":{"id":2318781,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/fKD3fHiaJajYHkBNnLBYb40ggEqA5lykW4jrqHvXtiap2rPmq8Cj7pj4nTU7BdqHTIzIRKRt5mylnucgwibOZ2Z9g/132","nickname":"cyan-mountain","note":"","ucode":"2797C0D846130C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1798068,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/6f/b4/d465acef.jpg","nickname":"啊噗！","note":"","ucode":"C911E772E1E800","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339221,"discussion_content":"课代表，你学得最扎实。棒哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609568729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":165130,"ip_address":""},"score":339221,"extra":""}]},{"author":{"id":1729853,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/65/3d/afc2e163.jpg","nickname":"西谷","note":"","ucode":"0378211B2359E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80957,"discussion_content":"哈哈哈哈哈，看到那么多评论点进来，没想到是这个，学习之余的解乏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576207159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1607851,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Qee1icxwia8lHL9q0399SG69z25f9oodibeF6gu6V1yukYNiatwcbpCBVNTfePw0CYpQO8uqVlWeHXsMlrohIlvDOA/132","nickname":"figa","note":"","ucode":"E471DE901F5337","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3782,"discussion_content":"头像好可爱。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564806908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":16,"child_discussions":[{"author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1607851,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Qee1icxwia8lHL9q0399SG69z25f9oodibeF6gu6V1yukYNiatwcbpCBVNTfePw0CYpQO8uqVlWeHXsMlrohIlvDOA/132","nickname":"figa","note":"","ucode":"E471DE901F5337","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7554,"discussion_content":"你更可爱","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567564158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3782,"ip_address":""},"score":7554,"extra":""},{"author":{"id":1179298,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/a2/5252a278.jpg","nickname":"对方正在输入。。。","note":"","ucode":"7B0DEB4D9B43D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8307,"discussion_content":"你最可爱","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567910045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":7554,"ip_address":""},"score":8307,"extra":""},{"author":{"id":1514305,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","nickname":"xk_","note":"","ucode":"DFE1AC38EA78A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1179298,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/a2/5252a278.jpg","nickname":"对方正在输入。。。","note":"","ucode":"7B0DEB4D9B43D2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9026,"discussion_content":"你最最最可爱","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568124159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8307,"ip_address":""},"score":9026,"extra":""}]}]},{"had_liked":false,"id":39708,"user_name":"🐱您的好友William🐱","can_delete":false,"product_type":"c1","uid":1215456,"ip_address":"","ucode":"427786DB178965","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/e0/9a79ddac.jpg","comment_is_top":false,"comment_ctime":1542338098,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"1006564685362","product_id":100017301,"comment_content":"老师做图的软件用的是什么啊？我看了不少的极客时间的blog，感觉老师这个是最好看的哈哈。","like_count":234,"discussions":[{"author":{"id":1314537,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0e/e9/929c5c73.jpg","nickname":"ruleGreen","note":"","ucode":"FA4D36B97212A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":17040,"discussion_content":"apple store里面的paper\n","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1568943736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2204462,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/IY4fLqdVwCPlW7xJicz3nZm4OePT0o20tDZj1Hiauk2b0iaHMQcSOGpamLt9b72hYVG72sgRWic1BHY3uCvibWcfickw/132","nickname":"Grocker","note":"","ucode":"DF2E19A65DEAD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312614,"discussion_content":"有点贵，https://www.papersapp.com/pricing/","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602748282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302360,"discussion_content":"首先你的换台mac 然后再装个paper....  成本有点高啊 弟弟哈哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598886060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1926508,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","nickname":"Geek_bb2310","note":"","ucode":"022885B257DEB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303823,"discussion_content":"滚","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1599390351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":302360,"ip_address":""},"score":303823,"extra":""},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1926508,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/65/6c/be97a3ae.jpg","nickname":"Geek_bb2310","note":"","ucode":"022885B257DEB3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412990,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636353727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303823,"ip_address":""},"score":412990,"extra":""}]},{"author":{"id":1326309,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3c/e5/f550ed85.jpg","nickname":"旺→_→","note":"","ucode":"04C1306ADD8CE6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":155659,"discussion_content":"paper","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580272642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53259,"discussion_content":"搜索了下没有找到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574151255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39758,"user_name":"王争","can_delete":false,"product_type":"c1","uid":1190123,"ip_address":"","ucode":"2B611BE0E0EDD4","user_header":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","comment_is_top":false,"comment_ctime":1542348416,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"937845218944","product_id":100017301,"comment_content":"我看smallfly大牛好像对动态数据结构有些误解，可能其他同学也会有。所以，我解释一下：动态数据结构是支持动态的更新操作，里面存储的数据是时刻在变化的，通俗一点讲，它不仅仅支持查询，还支持删除、插入数据。而且，这些操作都非常高效。如果不高效，也就算不上是有效的动态数据结构了。所以，这里的红黑树算一个，支持动态的插入、删除、查找，而且效率都很高。链表、队列、栈实际上算不上，因为操作非常有限，查询效率不高。那现在你再想一下还有哪些支持动态插入、删除、查找数据并且效率都很高的的数据结构呢？？","like_count":218,"discussions":[{"author":{"id":1179742,"avatar":"https://static001.geekbang.org/account/avatar/00/12/00/5e/39db0db9.jpg","nickname":"cys😁","note":"","ucode":"01A0097B8C4876","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350159,"discussion_content":"所谓动态数据结构，是指在运行时刻才能确定所需内存空间大小的数据结构，动态数据结构所使用的的内存称为动态内存","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1613728784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":151950,"discussion_content":"散列表、跳表","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1579922444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1148845,"avatar":"https://static001.geekbang.org/account/avatar/00/11/87/ad/50a85a04.jpg","nickname":"hao","note":"","ucode":"997F2B57E2F556","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324009,"discussion_content":"堆算不算","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605023553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2094925,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/f7/4d/09554c96.jpg","nickname":"iron bo","note":"","ucode":"4BFB1331637AA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1148845,"avatar":"https://static001.geekbang.org/account/avatar/00/11/87/ad/50a85a04.jpg","nickname":"hao","note":"","ucode":"997F2B57E2F556","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583494,"discussion_content":"我觉得算！PriorityQueue 优先队列也就是堆，查找、删除、插入也特别的快O(logN)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660143211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":324009,"ip_address":"四川"},"score":583494,"extra":""}]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534873,"discussion_content":"散列表可能算不上，更新数据这块并不能算高效。\n跳表应该是～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638286707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":64756,"user_name":"蜗牛行天下","can_delete":false,"product_type":"c1","uid":1266383,"ip_address":"","ucode":"7CF723B20A93C9","user_header":"https://static001.geekbang.org/account/avatar/00/13/52/cf/e4a40c33.jpg","comment_is_top":false,"comment_ctime":1548900719,"is_pvip":false,"discussion_count":20,"race_medal":0,"score":"778937981295","product_id":100017301,"comment_content":"我觉得红黑树对于我们初学者来说最大的疑惑是，红黑节点有什么区别，是怎么演化来的？老师讲的很好，但是这个问题并没有在文中解决，所以不能深刻地理解红黑树的存在价值。我找到一篇文章，在这方面讲的很清楚，可以作为这篇讲义的补充：https:&#47;&#47;www.cnblogs.com&#47;tiancai&#47;p&#47;9072813.html","like_count":181,"discussions":[{"author":{"id":1135707,"avatar":"https://static001.geekbang.org/account/avatar/00/11/54/5b/1a14d829.jpg","nickname":"WhatAKitty","note":"","ucode":"911C089450926B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211557,"discussion_content":"红黑树作者讲述的原版：https://algs4.cs.princeton.edu/33balanced/","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1584864865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095110,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b5/c6/d39d31b0.jpg","nickname":"zjhuang","note":"","ucode":"A20B57E4F5F6F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4119,"discussion_content":"https://blog.csdn.net/chen_zhang_yu/article/details/52415077","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1565144563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1812840,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a9/68/ec442a70.jpg","nickname":"王jojo","note":"","ucode":"1ABE7FA2614F86","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":234945,"discussion_content":"这个其实就是算法4里的知识,可以结合看下,算法4这本书讲的已经很好了, 虽然我不知道怎么写红黑树,但是原理是明白的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1587007445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53244,"discussion_content":"好文，虽然看过后，在实际的应用中什么的数据放到红黑树中的红色节点，什么样的数据放到黑色节点呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574149726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2299599,"avatar":"","nickname":"Geek_150e29","note":"","ucode":"474A435867AEF0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336425,"discussion_content":"从零开始构建2-3树的例子就是错的，最后插入结点12并不会导致失衡，这不是误导人嘛","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608579136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2827473,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/24/d1/af7e736f.jpg","nickname":"AC","note":"","ucode":"877B4E95189E39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412117,"discussion_content":"太强了，瞬间悟了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636080004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1640978,"avatar":"https://static001.geekbang.org/account/avatar/00/19/0a/12/f8b988b8.jpg","nickname":"Kyle(","note":"","ucode":"0C14C4C086CAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370620,"discussion_content":"有啥好谢的？难不成还有水军？晦涩难懂，还有错别字，&#34;小于节点值往右继续与左子节点比&#34;，这么久了你就不能改改吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619485854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319266,"discussion_content":"厉害了老铁了。学到了。赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603976263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1092041,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a9/c9/8c62fca3.jpg","nickname":"翰墨飘香","note":"","ucode":"1F0CE18E050FCF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263616,"discussion_content":"我也是看了很多文章，都是操作，规则什么的，没有解释为什么选择红黑两种颜色节点，为什么旋转。发现很多都是不解释为什么，只是操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589213440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236079,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","nickname":"短迪大魔王","note":"","ucode":"37E8117E0495B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":156301,"discussion_content":"真的很好，这样就清楚了为啥要变色，为啥能插入了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580350342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368713,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/89/7632aad8.jpg","nickname":"治愈。","note":"","ucode":"76F1C20C40452A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":148375,"discussion_content":"红链接都必须是左边的吗？为什么老师对红黑树定义讲解中没有对比做规定呢？出现了黑节点同时连接两个红节点的时候就对照不起来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579699231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1243722,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fa/4a/a31fd498.jpg","nickname":"旅人阿杰鲁","note":"","ucode":"1483D608AEDC2E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1368713,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/89/7632aad8.jpg","nickname":"治愈。","note":"","ucode":"76F1C20C40452A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259054,"discussion_content":"3节点中有ab两个元素，a是小于b的，所以是左链接","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588756143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":148375,"ip_address":""},"score":259054,"extra":""},{"author":{"id":1053154,"avatar":"https://static001.geekbang.org/account/avatar/00/10/11/e2/38feb457.jpg","nickname":"人們說這都是浮雲可是浮雲真美麗。","note":"","ucode":"FA3493020FDB8E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1368713,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/89/7632aad8.jpg","nickname":"治愈。","note":"","ucode":"76F1C20C40452A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329486,"discussion_content":"只有左边红节点的叫左偏红黑树，有两个红节点的是2-3-4树演变的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606390728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":148375,"ip_address":""},"score":329486,"extra":""}]},{"author":{"id":1098221,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIY8df9yV6vQjOMxv5xym070hFT2GWYELpqBhxSicQoq5IqBx6teS1xJaomkOBeuzv4vkXRJfibqcMw/132","nickname":"永不止步","note":"","ucode":"B5228B7EDF5921","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96094,"discussion_content":"知其然，知其所以然，彻底弄清楚了红黑树的由来和演化过程，才会更加理解其定义和各种操作，以及适用场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577029681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1522386,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/VarHGCe9OqeIexfD3cFPeMeicm1WwyDicSwfIUzhOPeQ9AcfFIzVec7TPNGREmjxGDLSH6oC8nz1k9AkvzClfOvQ/132","nickname":"Lengend","note":"","ucode":"0BD86B750E1CF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":90866,"discussion_content":"赞，这个要顶！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576800935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1454814,"avatar":"https://static001.geekbang.org/account/avatar/00/16/32/de/88451e1d.jpg","nickname":"Caspar","note":"","ucode":"9D4BB1D4EA9F03","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":83957,"discussion_content":"赞 这个很棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576475968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":69964,"discussion_content":"厉害了老铁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575301614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000004,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/44/d3d67640.jpg","nickname":"Hills录","note":"","ucode":"779020947ACABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33158,"discussion_content":"感谢，很不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571103489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1298190,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK0G3cibDykvgGt6XrDzlXEqctkWFbvHg1V0WFicb7BjvnyOJlQKzOskKhE6qib0L0PK9iabrSwNotvEg/132","nickname":"六芸子轩","note":"","ucode":"DF56C53CCEDC55","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20781,"discussion_content":"谢了老铁\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569374949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1504864,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/iaI2sroLJh4pxdUs2GbK78mPXAxAvvq8oQWrrDd5KXJu5iaXAw3dpMkrtbwwOEiciaPUVdQvWRLXbMfKcH12tjgKwA/132","nickname":"Geek_46885c","note":"","ucode":"955EDF1DC0AFE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2077,"discussion_content":"没有图，理解起来比较抽象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563247021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":true,"id":39684,"user_name":"Smallfly","can_delete":false,"product_type":"c1","uid":1013841,"ip_address":"","ucode":"D388D5E0249A69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/51/4790e13e.jpg","comment_is_top":false,"comment_ctime":1542335648,"is_pvip":false,"replies":[{"id":"14269","content":"我看smallfly大牛好像对动态数据结构有些误解，可能其他同学也会有。所以，我解释一下：动态数据结构是支持动态的更新操作，里面存储的数据是时刻在变化的，通俗一点讲，它不仅仅支持查询，还支持删除、插入数据。而且，这些操作都非常高效。如果不高效，也就算不上是有效的动态数据结构了。所以，这里的红黑树算一个，支持动态的插入、删除、查找，而且效率都很高。链表、队列、栈实际上算不上，因为操作非常有限，查询效率不高。那现在你再想一下还有哪些支持动态插入、删除、查找数据并且效率都很高的的数据结构呢？？","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542348461,"ip_address":"","comment_id":39684,"utype":1}],"discussion_count":6,"race_medal":0,"score":"577067953312","product_id":100017301,"comment_content":"动态数据结构的动态是什么意思？<br><br>动态是指在运行时该数据结构所占的内存会扩大或缩小。<br><br>数组是一种静态的数据结构，在创建时内存大小已经确定，不管有没有插入数据。而链表是动态的数据结构，插入数据 alloc 内存，删除数据 release 内存。<br><br>栈、队列、散列表、跳表、树都是抽象的数据结构，它们在内存中存在的形式都要依赖于数组或者链表。<br><br>如果用链表实现，很明显它们是动态的数据结构；如果用数组实现，那么在扩容的时候会创建更大内存的数组，原数组被废弃，从抽象角度看，它们仍旧是动态的。<br>","like_count":134,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429178,"discussion_content":"我看smallfly大牛好像对动态数据结构有些误解，可能其他同学也会有。所以，我解释一下：动态数据结构是支持动态的更新操作，里面存储的数据是时刻在变化的，通俗一点讲，它不仅仅支持查询，还支持删除、插入数据。而且，这些操作都非常高效。如果不高效，也就算不上是有效的动态数据结构了。所以，这里的红黑树算一个，支持动态的插入、删除、查找，而且效率都很高。链表、队列、栈实际上算不上，因为操作非常有限，查询效率不高。那现在你再想一下还有哪些支持动态插入、删除、查找数据并且效率都很高的的数据结构呢？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542348461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014550,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/16/ca250e8c.jpg","nickname":"王木公","note":"","ucode":"F049AEBFA0338D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50483,"discussion_content":"对动态数据结构有同样误解","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573726346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1542987,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/4b/fa52d222.jpg","nickname":"行则将至","note":"","ucode":"DB972F2DF059C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575721,"discussion_content":"那应该是散列表、跳表、红黑树了。支持动态的增加、删除。查询操作的性能起伏不大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655052021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042685,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","nickname":"Langzi233","note":"","ucode":"5A21AC08FC089B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202963,"discussion_content":"这里的动态数据结构应该理解为对数据结构表的操作时支持动态特性（增删操作）的，还是仅支持静态特性的，并非其存储的特性吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583977710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1425849,"avatar":"https://static001.geekbang.org/account/avatar/00/15/c1/b9/4bba336f.jpg","nickname":"贝克水母","note":"","ucode":"8D431C5FC07521","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53224,"discussion_content":"散列表喽","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574146658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1189638,"avatar":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","nickname":"色即是空","note":"","ucode":"46B8975ED087B8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":12071,"discussion_content":"组合拳，如Linkedhashmap","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568464203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45658,"user_name":"allan","can_delete":false,"product_type":"c1","uid":1142819,"ip_address":"","ucode":"CA0BE868AA9FF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/70/23/972dcd30.jpg","comment_is_top":false,"comment_ctime":1543739477,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"327961253973","product_id":100017301,"comment_content":"看了这篇文章还是有很多疑惑，主要是 不理解红黑树满足的几个性质，为什么要那样要求？","like_count":76,"discussions":[{"author":{"id":1101556,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/f4/5bfc786a.jpg","nickname":"Vilochen.","note":"","ucode":"19D9BF8534B480","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64815,"discussion_content":"建议看一下2-3树，实际上红黑树是由2-3树演进而来的，如果理解了2-3树，那么红黑树这几个特性的由来也就清楚了","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1574954647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1101556,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/f4/5bfc786a.jpg","nickname":"Vilochen.","note":"","ucode":"19D9BF8534B480","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319265,"discussion_content":"学到了。赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603976236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":64815,"ip_address":""},"score":319265,"extra":""}]},{"author":{"id":1577286,"avatar":"https://static001.geekbang.org/account/avatar/00/18/11/46/63bd0740.jpg","nickname":"Baymax","note":"","ucode":"DAE81AB14F9B63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201158,"discussion_content":"原来叫23树，后来为了工程化方便，发明了红黑树","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1583763472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1307719,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f4/47/cdea9def.jpg","nickname":"叫不醒装睡的人","note":"","ucode":"19A427BBBA98FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":82997,"discussion_content":"叶子节点都是黑色的空节点，这个要求主要是为了简化红黑树的代码实现而设置的。红黑树中包含最多黑色节点的路径不会超过log2n，加入红色节点后，最长路径不会超过2log2n，所以，红黑树的高度近似log2n，而二叉查找树中很多操作的性能都跟树的高度成正比，整棵树的高度相对来说低一些，相应的操作效率就高一些。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576409912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1577286,"avatar":"https://static001.geekbang.org/account/avatar/00/18/11/46/63bd0740.jpg","nickname":"Baymax","note":"","ucode":"DAE81AB14F9B63","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":201162,"discussion_content":"一红连一黑可以看成23树种有三个子树的那个节点\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583763563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1991279,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/62/6f/06d476f7.jpg","nickname":"Geek_Akara","note":"","ucode":"E86A5A9EEC8BFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1577286,"avatar":"https://static001.geekbang.org/account/avatar/00/18/11/46/63bd0740.jpg","nickname":"Baymax","note":"","ucode":"DAE81AB14F9B63","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":271389,"discussion_content":"问一下，算法第四版里规定，2-3树变体的红结点一定是左链接，这里的右链接红结点该怎么理解？4-结点？ 2-3-4树？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590126925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":201162,"ip_address":""},"score":271389,"extra":""},{"author":{"id":1242173,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f4/3d/ec3d6348.jpg","nickname":"好吃二师兄","note":"","ucode":"A367B52BC79199","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1991279,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/62/6f/06d476f7.jpg","nickname":"Geek_Akara","note":"","ucode":"E86A5A9EEC8BFF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549953,"discussion_content":"由2-3树演进过来的是左倾红黑树吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644309803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":271389,"ip_address":""},"score":549953,"extra":""}]}]},{"had_liked":false,"id":40138,"user_name":"fy","can_delete":false,"product_type":"c1","uid":1152186,"ip_address":"","ucode":"EDB661C3A05910","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jsMMDDzhbsTzhicsGZiaeV0PWSnAS0fBlb1r6CsuB32vr3hRwV9UubmfHQx45v7jtaXajPlQ8kQ17b3zpQzHmqVw/132","comment_is_top":false,"comment_ctime":1542521199,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"315075133807","product_id":100017301,"comment_content":"老师，可以教我们刷下leetcode上的算法，毕竟讲了这么多，还是练习的。这样的提升才有巨大的帮助<br>","like_count":73,"discussions":[{"author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576175,"discussion_content":"隔壁课有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655342283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":582039,"discussion_content":"兄弟，你是来推广课的嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659154466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":576175,"ip_address":"陕西"},"score":582039,"extra":""},{"author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582115,"discussion_content":"术业有专攻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659242251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":582039,"ip_address":"广东"},"score":582115,"extra":""}]}]},{"had_liked":false,"id":78681,"user_name":"S.S Mr Lin","can_delete":false,"product_type":"c1","uid":1258558,"ip_address":"","ucode":"1DDD5132B0DA64","user_header":"https://static001.geekbang.org/account/avatar/00/13/34/3e/0b1c2b7f.jpg","comment_is_top":false,"comment_ctime":1553216926,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"207711647134","product_id":100017301,"comment_content":"很多讲红黑树的地方都没讲2-3-4树，其实如果看懂了2-3-4树，再来看红黑树就特别好理解了。我一般会问别人，红黑树的黑节点代表了什么？如果理解了，就会知道黑节点代表了近似平衡高度，所有黑节点的定义都是为了保证这一点。","like_count":49,"discussions":[{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319270,"discussion_content":"回头看看去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603976710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1346215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","nickname":"William","note":"","ucode":"55F5D9DEE485B1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":107760,"discussion_content":"可以理解为, 黑色节点, 就是为了凑数(保持近似平衡的作用)是吧?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577604748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39566,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1542323800,"is_pvip":false,"replies":[{"id":"14182","content":"👍 刚看错了。写的不错","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542334031,"ip_address":"","comment_id":39566,"utype":1}],"discussion_count":1,"race_medal":0,"score":"173341015640","product_id":100017301,"comment_content":"动态数据结构有链表，栈，队列，哈希表等等。链表适合遍历的场景，插入和删除操作方便，栈和队列可以算一种特殊的链表，分别适用先进后出和先进先出的场景。哈希表适合插入和删除比较少（尽量少的扩容和缩容），查找比较多的时候。红黑树对数据要求有序，对数据增删查都有一定要求的时候。（个人看法，欢迎老师指正）","like_count":40,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429117,"discussion_content":"👍 刚看错了。写的不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542334031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150385,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1573525324,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"143307446092","product_id":100017301,"comment_content":"**基本数据结构：**<br><br>1.数组：连续的内存空间，支持按下标随机访问O(1)，删除和查找设计数据搬移效率是O(n)  试用场景：数据规模较小，不经常变动。<br><br>缺点：对于内存连续性要求高。插入删除操作效率低。<br><br>2.链表：查询效率不高O(n)，插入和删除效率高O(1)，并且内存申请可以不连续，适用场景是插入和删除多于查询操作。<br><br>缺点：查找效率低，实际上删除之前先要查找，所以实际删除效率也不高。<br><br>**动态数据结构：**<br><br>1.散列表：可以说是利用数组和链表两个基本数据结构设计了一个高效的动态数据结构。利用了数组的随机访问特性，用于满足根据某个属性来随机访问元素。基于key查找效率很高O(1).同时借助链表进行散列冲突解决方案，删除和插入操作效率也可以接近O(1).试用场景：海量数据随机访问、防止重复、缓存等。<br><br>缺点：需要设计合理的散列函数，并且要考虑散列冲突和动态扩容。<br><br>2.跳表：尽管散列表效率很高，但是散列表是无序的，跳表效率和散列表类似，并且支持区间序列的输出（因为基于链表）。使用场景：对有序元素的快速查找、插入和删除。<br><br>缺点：比较占用内存。<br><br>3.红黑树：红黑树是平衡二叉查找树的一种近似实现。红黑树和跳表类似，但是实现方式有所差异。红黑树存在的价值是，它可以实现比较高效的查找，删除和插入。虽然相比高度平衡的AVL树效率有所下降，但是红黑树不用耗费太多精力维护平衡。相比跳表，红黑树除了内存占用较小，其他性能并不比跳表更优。但由于历史原因，红黑树使用的更广泛。<br><br>缺点：实现比较复杂。","like_count":33,"discussions":[{"author":{"id":2318781,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/fKD3fHiaJajYHkBNnLBYb40ggEqA5lykW4jrqHvXtiap2rPmq8Cj7pj4nTU7BdqHTIzIRKRt5mylnucgwibOZ2Z9g/132","nickname":"cyan-mountain","note":"","ucode":"2797C0D846130C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339223,"discussion_content":"回答的最好的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609569175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164882,"user_name":"洲","can_delete":false,"product_type":"c1","uid":1712154,"ip_address":"","ucode":"64D9334933C987","user_header":"https://static001.geekbang.org/account/avatar/00/1a/20/1a/9aaf5638.jpg","comment_is_top":false,"comment_ctime":1577105018,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"134721091194","product_id":100017301,"comment_content":"感觉红黑树老师讲的很急，对于没有基础的同学有点跳跃，我看了这个链接的文章搞明白了。https:&#47;&#47;blog.csdn.net&#47;fei33423&#47;article&#47;details&#47;79132930","like_count":31,"discussions":[{"author":{"id":1241800,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/c8/565f2fa0.jpg","nickname":"氢气","note":"","ucode":"4EBAB1731F5F9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559782,"discussion_content":"秒懂，谢大佬分享~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648956782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109640,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/88/a890b41e.jpg","nickname":"chris","note":"","ucode":"6663E3E09457E3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":199745,"discussion_content":"收藏一下！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583602780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1850499,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/3c/83/93e7af9e.jpg","nickname":"兰柯","note":"","ucode":"6D7230B3CE8722","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174529,"discussion_content":"神文啊，秒懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581924846,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39596,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1542327139,"is_pvip":false,"replies":[{"id":"14180","content":"新插入的节点都是红色的。全黑不可能的。红黑区分的意义你等下一节课看看能懂不","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542333905,"ip_address":"","comment_id":39596,"utype":1}],"discussion_count":3,"race_medal":0,"score":"65966836579","product_id":100017301,"comment_content":"红黑树的节点颜色，是如何确定的，如何知道在新增一个节点时，该节点是什么颜色？<br><br>从红黑树需要满足的四个要求来看：<br>1. 根节点为黑色<br>2. 所有叶子节点为黑色，且不存储数据<br>3. 相邻两个节点不能都为红色<br>4. 从某节点到其所有叶子节点的路径中，黑色节点数相同<br><br>从这四点要求，好像我一根树全是黑色，也是满足其定义的。这里用红黑两色区分各节点，意义是啥？<br><br>谢谢老师","like_count":15,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429132,"discussion_content":"新插入的节点都是红色的。全黑不可能的。红黑区分的意义你等下一节课看看能懂不","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542333905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1244560,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fd/90/ae39017f.jpg","nickname":"爱吃锅巴的沐泡","note":"","ucode":"27451E4F1A22D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339932,"discussion_content":"还有一条性质没说，就是一个节点要么是黑色，要么是红色。红黑树有5条性质！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609844981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1591223,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","nickname":"JerryZhu","note":"","ucode":"76850CD45786C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302314,"discussion_content":"全黑是个静态树 不增不减吧。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598877200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":56604,"user_name":"不似旧日","can_delete":false,"product_type":"c1","uid":1161271,"ip_address":"","ucode":"DF4C5E3AB9570C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","comment_is_top":false,"comment_ctime":1546504534,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"53086112086","product_id":100017301,"comment_content":"没明白红节点与黑节点的存在意义","like_count":12,"discussions":[{"author":{"id":1179028,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fd/94/0247f945.jpg","nickname":"咸鱼","note":"","ucode":"5E79636DE48155","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80686,"discussion_content":"可以搜下二三树，我觉得从二三树去理解红黑树比较好，是一个很好的过渡","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1576166512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2087319,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLF5ibPQLyWUeHibYUfPFCI60EOyiaekOoibVkQQXIAexzWT2buvMMT5dzu6sa1OHn8ZKOAUdlMW1TKsw/132","nickname":"梁先生说。","note":"","ucode":"C2D74BB6F6460A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298656,"discussion_content":"红色链接画平，红黑树就变成一个2-3树","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597372277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2409475,"avatar":"https://static001.geekbang.org/account/avatar/00/24/c4/03/b5ff525d.jpg","nickname":"素质青年","note":"","ucode":"8E4C81A8648B66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2087319,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLF5ibPQLyWUeHibYUfPFCI60EOyiaekOoibVkQQXIAexzWT2buvMMT5dzu6sa1OHn8ZKOAUdlMW1TKsw/132","nickname":"梁先生说。","note":"","ucode":"C2D74BB6F6460A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344090,"discussion_content":"准确地说 红黑树会变成2-3-4树 2-3树是左倾红黑树","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611287240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298656,"ip_address":""},"score":344090,"extra":""}]}]},{"had_liked":false,"id":39774,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1542354619,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"53081962171","product_id":100017301,"comment_content":"我除了看懂红黑树是一种“性能上比较均衡”的二叉树这个结论外，完全没搞懂它为啥能获得这个“比较平衡”的结果","like_count":12,"discussions":[{"author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582040,"discussion_content":"新增或者删除节点，会经过左旋/右旋的操作，来保证二叉树平衡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659154861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1242736,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f6/70/fb54fe20.jpg","nickname":"神话","note":"","ucode":"CFC55CEBB69AB2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279855,"discussion_content":"高度啊大哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591435696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1914201,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/35/59/3a7219de.jpg","nickname":"叮叮叮","note":"","ucode":"956C42489F25DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215677,"discussion_content":"可能是前辈们的大量工程实践的结论吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585370780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69281,"user_name":"increasingly","can_delete":false,"product_type":"c1","uid":1261809,"ip_address":"","ucode":"B12C734C736F79","user_header":"","comment_is_top":false,"comment_ctime":1550711274,"is_pvip":false,"replies":[{"id":"24603","content":"比如有些系统只关注操作的平均执行时间，大部分操作都很快，比如1s，极个别操作可能花费很多时间10s，但平均下来，整体上都很快，所以也能接受。<br><br>但是有的系统不仅仅关注平均执行时间，对单次操作的时间非常敏感，极个别的10s操作也是无法接受的。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1550716188,"ip_address":"","comment_id":69281,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40205416938","product_id":100017301,"comment_content":"请问什么是单次操作时间非常敏感的场景呢","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440039,"discussion_content":"比如有些系统只关注操作的平均执行时间，大部分操作都很快，比如1s，极个别操作可能花费很多时间10s，但平均下来，整体上都很快，所以也能接受。\n\n但是有的系统不仅仅关注平均执行时间，对单次操作的时间非常敏感，极个别的10s操作也是无法接受的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1550716188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39961,"user_name":"朱月俊","can_delete":false,"product_type":"c1","uid":1017707,"ip_address":"","ucode":"4DA0728B862FBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","comment_is_top":false,"comment_ctime":1542421628,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35902159996","product_id":100017301,"comment_content":"动态数据结构比如本篇的平衡二叉查找树，还有就是跳表，跳表也支持动态插入，删除，查询，也很快，不同点是跳表还能支持快速的范围查询。比如leveldb中的memtable，redis都是使用跳表实现的，而也有用红黑树实现的memtable。<br>除此之外，跳表还支持多写多读，而红黑树不可以，这些场景下显然用跳表合适。","like_count":8,"discussions":[{"author":{"id":1204353,"avatar":"https://static001.geekbang.org/account/avatar/00/12/60/81/eaf6d0ac.jpg","nickname":"拉布拉多","note":"","ucode":"637A88D9F29F57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319275,"discussion_content":"mark。不懂：跳表还支持多写多读，而红黑树不可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603976863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39721,"user_name":"wean","can_delete":false,"product_type":"c1","uid":1239735,"ip_address":"","ucode":"3E069F95C25EAD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/b7/1f7316e6.jpg","comment_is_top":false,"comment_ctime":1542341599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35902079967","product_id":100017301,"comment_content":"“我们从四叉树中取出某些节点，放到叶节点位置，四叉树就变成了完全二叉树”<br><br>老师，这里的某些节点应该怎么取，才能让四叉树变成二叉树，不是很明白，希望老师讲解一下，谢谢","like_count":8},{"had_liked":false,"id":166599,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1577513991,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"31642285063","product_id":100017301,"comment_content":"二叉查找树是常用的一种二叉树，他支持快速插入，删除，查找操作，各个操作的时间复杂度跟树的高度成正比，理想情况下，时间复杂度是O(logn)<br><br>在很多书籍中，但凡讲到平衡二叉查找树，就会那红黑树做为例子。在工程中，很多用到平衡二叉查找树的地方都会用红黑树。<br><br>一，什么是“平衡二叉查找树”<br>\t1，定义：二叉树中任意一个节点的左右子树的高度相差不能大于1。<br>\t\t所以：完全二叉树，满二叉树都是平衡二叉树，非完全二叉树也有可能是平衡二叉树。<br>\t2，平衡二叉查找树不仅满足上面平衡二叉树的定义，还满足二叉查找树的特点。<br><br>\t3，发明平衡二叉查找树这类数据结构的初衷是解决普通二叉查找树在频繁的插入，删除等动态更新的情况下，出现时间复杂度退化的问题。<br>\t\t所以，平衡二叉查找树中“平衡”的意思，其实就是让整棵树左右看起来比较“对称”，比较“平衡”，不要出现左子树很高，右子树很矮的情况。这样就能让整颗树的高度相对低一些，相应的插入，删除，查找等操作的效率高一些。<br><br>\t4，若设计一个新的平衡二叉查找树，只要树的高度不比log2n大很多（如树的高度仍然是对数量级的），尽管它不符合严格的平衡二叉查找树的定义，但它仍然可以被认为是一个合格的平衡二叉查找树。<br>\t<br>二，如何定义一棵“红黑树”<br>\t1，平衡二叉查找树有很多，如：Splay Tree(伸展树)，Treap（树堆）等，但是我们提到平衡二叉查找树，听到的基本都是红黑树。他的出境率甚至要高于“平衡二叉查找树”这几个字，甚至在有些时刻，默认平衡二叉查找树就是红黑树<br>\t2，红黑树：英文“Red-Black-Tree”，简称R-B Tree，有如下特性：<br>它是一种不严格的平衡二叉查找树。<br>红黑树中的节点，一类别标记为黑色，一类被标记为红色。<br>根节点是黑色的；<br>每个叶子节点都是黑色的空节点（NIL）,也就是说，叶子节点不存储数据；<br>任何相邻的节点都不能同时为红色，即红色节点都是被黑色节点隔开的；<br>每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；<br>3，二叉查找树很多操作的性能都跟树的高度成正比，一课极其平衡的二叉树（满二叉树或完全二叉树）的高度大约是log2n,所以要证明红黑树是近似平衡的，我们只需要分析，红黑树的高度是否比较稳定地趋近log2n就好<br>。<br>\t4，红黑树的高度分析<br>\t\t①：首先，若将红色节点从红黑树中去除，那单纯包含黑色节点的红黑树的高度比包含相同节点个数的完全二叉树的高度要小。所以去掉红色节点的“黑树”的高度也不会超过log2n。<br>\t\t②：在红黑树中，红色节点不能相邻，即有一个红色节点就要至少有一个黑色节点，将它更其他红色节点隔开。<br>\t\t红黑树中包含最多黑色节点的路径不会超过log2n,所以加入红色节点之后，最长路径不会超过2log2n，即，红黑树的高度近似2log2n<br>\t\t③：红黑树的高度只比高度平衡的AVL树的高度（log2n）仅仅大了一倍，在性能上下降的并不多。<br><br>三：工程中大家都喜欢用红黑树这种平衡二叉查找树的原因：<br>\t①：Treap，Splay Tree，绝大部分情况下，它们操作的效率都很高，但是也无法避免极端情况下时间复杂度的退化。尽管这种情况出现概率不大，但是对于单次操作时间非常敏感的场景来讲，它们不适用。<br>\t②：AVL树是一种高度平衡的二叉树，所以查找的效率非常高，但是，有利有弊，AVL树为了维持这种高度平衡，要付出更多代价，每次插入，删除都要做调整，就比较复杂，耗时。所以有频繁的插入，删除操作的数据集合，使用AVL树的代价就有点高了。<br>\t③：红黑树只是做到了近似平衡，并不是严格的平衡，所以维护平衡的成本上，要比AVL树低。<br>\t所以，红黑树的插入，删除，查找各种操作性能都比较稳定。对于工程应用来说，结果状态可控可预期。<br>","like_count":7},{"had_liked":false,"id":122612,"user_name":"Langzi233","can_delete":false,"product_type":"c1","uid":1042685,"ip_address":"","ucode":"5A21AC08FC089B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/fd/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1565438975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27335242751","product_id":100017301,"comment_content":"学习红黑树强烈推荐《算法》，这本书对红黑树的讲解非常精彩，各种数据结构和算法的书各有侧重点，可以选择着看。","like_count":6},{"had_liked":false,"id":41292,"user_name":"！null","can_delete":false,"product_type":"c1","uid":1242483,"ip_address":"","ucode":"4E5B7922980397","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/73/f7d3a996.jpg","comment_is_top":false,"comment_ctime":1542764578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27312568354","product_id":100017301,"comment_content":"没太看懂去掉红色节点生成全黑四叉树，又把红色节点加进去的目的是什么？感觉不懂这个整个红黑树就没学懂。","like_count":6},{"had_liked":false,"id":111125,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1562483962,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18742353146","product_id":100017301,"comment_content":"动态数据结构还包括以下几种：<br>1.链表：<br>优势：高效地数据插入、删除。<br>缺点：随机查找元素效率较低。<br>适用场景：适用于顺序访问数据，数据维护较频繁的场合。<br><br>2.哈希链表<br>优势：高效地数据插入、删除、随机查找元素。<br>缺点：需要设计一个好的散列函数，把元素均匀分散到散列表中。<br>适用场景：适用于在海量数据中随机访问数据的场合。<br><br>3.跳表<br>优势：高效地查找、插入、删除数据。<br>缺点：需要额外的空间来构建索引链表<br>适用场景：适用于需要高效查找数据的场合。<br><br>4.二叉查找树<br>优势：高效地查找、插入、删除数据，实现简单。<br>缺点：需要动态地维护左右子树的高度平衡，否则数据查找会退化成链表的顺序查找。<br>适用场景：适用于需要高效查找数据的场合。","like_count":4,"discussions":[{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":254501,"discussion_content":"是池建强大佬？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588330624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39948,"user_name":"城","can_delete":false,"product_type":"c1","uid":1035315,"ip_address":"","ucode":"32C4FCE1944000","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/33/19f150d9.jpg","comment_is_top":false,"comment_ctime":1542418224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18722287408","product_id":100017301,"comment_content":"任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；这个是指父子之间的相邻吧，很容易误会成兄弟间的关系","like_count":4},{"had_liked":false,"id":171712,"user_name":"Geek_wuming","can_delete":false,"product_type":"c1","uid":1388314,"ip_address":"","ucode":"AE749892284E3B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/4RdOss6AW97KUaufOFIhQGMWJoRJvSZiayJBa36ic0A3M27hUFSBZhy4ZoXOp6gj1apln2N86icZEg1Z1f5PLEp8A/132","comment_is_top":false,"comment_ctime":1578995358,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10168929950","product_id":100017301,"comment_content":"非常详细由2-3树一步步演化而来的红黑树：https:&#47;&#47;blog.csdn.net&#47;fei33423&#47;article&#47;details&#47;79132930  理解了2-3树再看红黑树就不再是雾里看花了","like_count":2,"discussions":[{"author":{"id":1043295,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLz2Db6H0jT6EWuqnWlGt7UiaFViaScE6ADdXpU1I5Joh4ea4htIjTR04XoNxj8GA92L13iaSQl1JqHQ/132","nickname":"Eric","note":"","ucode":"3F0E90E53C914B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349513,"discussion_content":"非常感谢，文章质量很高。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613281564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45744,"user_name":"Laughing_Lz","can_delete":false,"product_type":"c1","uid":1251342,"ip_address":"","ucode":"7A7445E96F2978","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/0e/39307052.jpg","comment_is_top":false,"comment_ctime":1543765172,"is_pvip":false,"replies":[{"id":"16356","content":"是的 都会有nil的黑色叶子节点的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543801665,"ip_address":"","comment_id":45744,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10133699764","product_id":100017301,"comment_content":"老师，你这里提到：我画了两个红黑树的图例，你可以对照着看下。<br>这下面的两张图，左边第一个，四个叶子节点都是红色呀？我有点看不懂。。<br>规则不是说叶子节点都是不存储数据的黑色空节点吗？这里是不是画错了？<br>如果你是说省略了黑色叶子节点，那就是说这四个红色节点下其实还有叶子节点？但是这样又不能满足规则四：每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点...除非第三层的第三个黑色子节点下也有叶子节点？<br>","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431187,"discussion_content":"是的 都会有nil的黑色叶子节点的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543801665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44390,"user_name":"丁卯兔","can_delete":false,"product_type":"c1","uid":1104264,"ip_address":"","ucode":"E3C80B6D0DDED1","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/88/ffb13047.jpg","comment_is_top":false,"comment_ctime":1543418412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10133353004","product_id":100017301,"comment_content":"动态的数据结构可能跳跃链表算一个，实现比红黑树简单，查询，删除，插入都可以；大顶堆，小顶堆应该也还行。","like_count":2},{"had_liked":false,"id":39562,"user_name":"farFlight","can_delete":false,"product_type":"c1","uid":1245211,"ip_address":"","ucode":"B0872D3ECBEC38","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83epbRibsic15KXfGEN3SSjnLhXGyhK2Uyrj5ibBJsKAjicNqtafDaQOLH4xpSJRZD1vmibFPJER1ySmwP9A/132","comment_is_top":false,"comment_ctime":1542317488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10132252080","product_id":100017301,"comment_content":"老师好，请问之后讲到heap sort这些的时候会提到斐波那契堆吗？最近在看相关但是觉得网上的资料讲得都不太清楚。","like_count":2},{"had_liked":false,"id":284488,"user_name":"Geek_d586af","can_delete":false,"product_type":"c1","uid":2161180,"ip_address":"","ucode":"2966DBC6BD9B20","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jtNYcW0hUoI1RzVic1tpJ7mkh4nccicC3aaC4aicYQCy9R1RZBMSWn8qDxjvVKqca9LnWxCfsicEqeW0bUkX6Bogyg/132","comment_is_top":false,"comment_ctime":1616299589,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5911266885","product_id":100017301,"comment_content":"红黑数为什么是平衡二叉树？首先要了解23树，23数永远是平衡的，也就是任何一个节点到叶子节点的所有高度是相同的，这个也是是奠定红黑树平衡的原理，其次是红黑数中只有2节点，没有3节点，所以红黑数中将3节点中较小节点向左拆分，并定义该节点为红节点，其他节点都为黑节点，这也是红黑数中红黑节点的来由，也就解释了红黑数任何节点到叶子节点中路径中的黑节点数是一样的。","like_count":1,"discussions":[{"author":{"id":2762634,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoBvqEtL5jPfibavnGmvicCVndB1VabyrlZjls3KdYaN4FuaViaFDVRgVoWPmczXlfTvz83WGLPyicXgw/132","nickname":"Geek_cddbfa","note":"","ucode":"09A04136394E24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412800,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636293281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234883,"user_name":"极客学子","can_delete":false,"product_type":"c1","uid":1149510,"ip_address":"","ucode":"40051597564EB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/8a/46/71747b18.jpg","comment_is_top":false,"comment_ctime":1594818264,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5889785560","product_id":100017301,"comment_content":"1.散列表<br>缺点：需要考虑的地方比较多，如散列函数、装载因子、扩容、散列冲突解决等，同时因为装载因子的存在导致部分内存空间的浪费，而且无法按区间查找数据，同时扩容缩容会造成性能损耗<br>优点：增删查改的时间复杂度是 O(1)，链表法+红黑树解决散列冲突后性能相对稳定<br>2.跳表<br>缺点：没有工业级的具体实现，需要依赖自己编码实现，无法保证代码准确性，而且空间复杂度是O(n)，对内存要求相对较高<br>优点：性能相对稳定，增删查改的时间复杂度近似 O(log^n)，实现相对简单，而且数据是有序排列的，能够支持按区间查找数据，<br>3.红黑树（平衡二叉查找树）<br>缺点：无法按区间查找数据，实现相对复杂<br>优点：性能相对稳定，增删查改的时间复杂度近似 O(log^n)，支持查找最大值、最小值，中序遍历能够按顺序打印数据","like_count":1},{"had_liked":false,"id":216069,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1589181271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884148567","product_id":100017301,"comment_content":"学习笔记:<br>1. 二叉查找树--防止退化&gt;&gt;平衡二叉树 树高近似为logn<br>2. 常见：AVL树、伸展树、树堆、红黑树<br>3. 红黑树最常用，因为性能稳定。<br>    AVL树最接近定义，但是每次插入删除都要调整，性能差一些。<br>    伸展树、树堆仍然会出现极端情况。<br>4. 红黑树:两种节点，黑红<br>    1. 定义: + 根节点为黑<br>                + 红节点不连续<br>                + 任意节点到其可达的叶子结点经过相同的黑节点<br>                + 叶子结点为空的黑色节点(此条为了代码实现容易)<br>    2. 树高近似推断：去掉红节点，四叉树。形成完全二叉树，树高为logn，四叉树高&lt;logn。加上红节点，红黑树高&lt;2logn。<br>    3. 性能十分稳定，但是代码实现略复杂。此时可以用跳表来替代。<br>评论区转一篇文章，解决红黑树由来问题https:&#47;&#47;www.cnblogs.com&#47;tiancai&#47;p&#47;9072813.html<br>思考题:<br>动态插入、删除、查找：<br>数组、链表、栈、队列不是操作有限，就是查询、插入不够高效，所以排除<br>剩下来就是:<br>跳表：插入查找删除都是O(logn)，空间复杂度是O(n)，但是数据对象本身大时，建立索引的空间可忽略<br>哈希表：插入、查找、删除，都是O(1)，但要解决冲突、装载因子、扩容缩容等问题。无法顺序遍历<br>红黑树：插入、查找、删除都是O(logn)。中序遍历即使顺序遍历。代码实现复杂。","like_count":1},{"had_liked":false,"id":212579,"user_name":"默默","can_delete":false,"product_type":"c1","uid":1006635,"ip_address":"","ucode":"AF798B9D327F24","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/2b/8b771383.jpg","comment_is_top":false,"comment_ctime":1588155497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883122793","product_id":100017301,"comment_content":"数组<br>查找：随机查找O(1)，有序的情况下，二分查找O(logn)；无序的情况下，遍历查找O(n)<br>插入：有序插入O(logn)，无序插入(即插入尾部)O(1)<br>删除：O(n)<br>链表<br>查找：O(n)<br>插入+删除：O(1)<br>哈希表<br>查找+插入+删除：O(1)<br>二叉树<br>查找+插入+删除：O(logn)<br>哈希表查找、删除、插入性能最好，但随着数据量增大，冲突变多，性能下降，稳定性不是很好。对于小规模数据，查询、插入、删除要求特别高的场景比较适用。<br>二叉树：查找、插入、删除性能O(logn)，性能较高，稳定性较强。是多数场景下的选择。另外，二叉树可以顺序存储数据，对排序支持友好。对存储数据有排序要求的场景适用。<br>数组、链表：对查找、插入、删除性能不是特别关注，数据量不大场景下可以选择。实现简单。","like_count":1},{"had_liked":false,"id":189308,"user_name":"獨自去遠方","can_delete":false,"product_type":"c1","uid":1503941,"ip_address":"","ucode":"E246B33F397441","user_header":"https://static001.geekbang.org/account/avatar/00/16/f2/c5/2a441c27.jpg","comment_is_top":false,"comment_ctime":1584498445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879465741","product_id":100017301,"comment_content":"红黑树<br>\t不符合平衡二叉树<br>\t子节点高度最多相差两倍<br><br>\t平衡：看起来比较对称<br><br>\t要求：<br>\t\t1. 根节点是黑色<br>\t\t2. 所有叶子节点是黑色的空节点<br>\t\t3. 红色节点被黑色节点隔开<br>\t\t4. 每个节点到其叶子节点的路径包含相同数目的黑色节点<br><br>\t预估高度<br>\t\t去掉所有红色节点<br>\t\t剩下的节点变成二叉树，满足完全二叉树<br>\t\t红色节点不能相邻，所以红色节点数量不会超过log2n<br>\t\t将红色节点加入二叉树，这个二叉树的高度不会超过2log2n<br><br>\tAVL 树是一种高度平衡的二叉树，所以查找的效率非常高<br>\t\t每次插入、删除都要做调整，就比较复杂、耗时。<br>\t\t不适用于有频繁的插入、删除操作的数据集合<br>\t\t<br>\t红黑树只是做到了近似平衡，并不是严格的平衡，所以在维护平衡的成本上，要比 AVL 树要低<br>\t红黑树的高度近似log2n，所以它是近似平衡，插入、删除、查找操作的时间复杂度都是 O(logn)。","like_count":1},{"had_liked":false,"id":174687,"user_name":"短迪大魔王","can_delete":false,"product_type":"c1","uid":1236079,"ip_address":"","ucode":"37E8117E0495B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/6f/5d86dbe9.jpg","comment_is_top":false,"comment_ctime":1580351274,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875318570","product_id":100017301,"comment_content":"老师的课把难度降阶，同学们的链接评论对学习更是极大的补充","like_count":1},{"had_liked":false,"id":169529,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1578372206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873339502","product_id":100017301,"comment_content":"看到评论区里很多同学都在问，“红节点与黑节点存在的意义是什么？为什么要定义这些规则？”<br>个人理解这些红色、黑色以及规则就是使树达到自平衡的条件，只要你的二叉树保证在动态更新过程中始终符合这几点规则要求，那么就能从理论上约束了这个树是近似平衡的。","like_count":1},{"had_liked":false,"id":165465,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1577240822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872208118","product_id":100017301,"comment_content":"红黑树，黑色节点保证了效率，保证树不会退化为线性结构，红色节点提供了灵活性，在不退化的前提下，可以简单插入红色节点。当红色节点过多时，旋转算法可以在对数的复杂度将树调整到位。红黑树兼顾了效率和灵活，是工程领域的创新。","like_count":1},{"had_liked":false,"id":146797,"user_name":"Sid","can_delete":false,"product_type":"c1","uid":1115041,"ip_address":"","ucode":"0461B574B2736B","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/a1/e6a0f60b.jpg","comment_is_top":false,"comment_ctime":1572661570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867628866","product_id":100017301,"comment_content":"评论区里有很多说红黑树从2-3-4树演变来的，我就顺着这个问了度娘，有了如些的一些理解和困惑，请小争哥或者评论区大牛解惑。<br>1.2-3-4树从二叉查找树中演变过来，在一个节点存放多个键值，避免了二叉树的不平衡，解决了二叉树复杂度退化的问题。<br>2. 但是2-3-4树也有一些问题，在一个节点里可以存1-3个键，因为有不同类型的节点，实现起来太麻烦，所以想办法让2-3-4树再变成一个二叉树，于是就有了红黑树，2-3-4树种3节点、4节点的分裂对应于红黑树的变色和翻转。<br>基于以上的理解有个问题：<br>2-3-4树已经是平衡的了，查找的时间复杂度是O(logn)，为什么还要红黑树呢，变色和旋转并不比2-3-4树的分裂实现起来简单呀。","like_count":1},{"had_liked":false,"id":137525,"user_name":"复兴","can_delete":false,"product_type":"c1","uid":1363230,"ip_address":"","ucode":"C172A87873001A","user_header":"https://static001.geekbang.org/account/avatar/00/14/cd/1e/692c3313.jpg","comment_is_top":false,"comment_ctime":1569764280,"is_pvip":false,"replies":[{"id":"53604","content":"都不是啊，是树","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1570580444,"ip_address":"","comment_id":137525,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5864731576","product_id":100017301,"comment_content":"红黑树是链表还是数组存储的呢","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469136,"discussion_content":"都不是啊，是树","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570580444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77176,"user_name":"张珂","can_delete":false,"product_type":"c1","uid":1451555,"ip_address":"","ucode":"63D5760B253A59","user_header":"https://static001.geekbang.org/account/avatar/00/16/26/23/e99ff49f.jpg","comment_is_top":false,"comment_ctime":1552877028,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5847844324","product_id":100017301,"comment_content":"这节课除了要知道红黑树的定义外，还知道了它的应用场景和各操作的时间复杂度，应用场景就是需要很多动态更新的情况。<br>在分析下它的优势。首先二叉查找树相比于散列表的优势在于“查找”二字，就是支持快速查找，因为左右子树的值是有序的。其次，平衡二叉树的优势在于“平衡”，即不会出现普通二叉查找树退化到左右子树相差极大的情况。最后，平衡二叉查找树则综合了上述两者的有点，在工业项目中广泛应用。","like_count":1,"discussions":[{"author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7565,"discussion_content":"二叉查找树相比于散列表的优势在于“查找”二字?  二叉查找树的时间复杂度是log n，散列表的时间复杂度是 O(1),你说的优势我看不明白","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567566486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72526,"user_name":"鹏飞天下","can_delete":false,"product_type":"c1","uid":1101792,"ip_address":"","ucode":"EB9FFD9FE64A4C","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/e0/f6819d03.jpg","comment_is_top":false,"comment_ctime":1551664663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5846631959","product_id":100017301,"comment_content":"我觉得哈希表是适用于key  value","like_count":1},{"had_liked":false,"id":62753,"user_name":"桂华","can_delete":false,"product_type":"c1","uid":1355106,"ip_address":"","ucode":"A5F173E2C74BB1","user_header":"https://static001.geekbang.org/account/avatar/00/14/ad/62/9c433c63.jpg","comment_is_top":false,"comment_ctime":1548148730,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5843116026","product_id":100017301,"comment_content":"红黑树对应不对<br>性质1. 节点是红色或黑色。<br>性质2. 根节点是黑色。<br>性质3 每个叶节点（NIL节点，空节点）是黑色的。<br>性质4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)<br>性质5. 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点","like_count":1},{"had_liked":false,"id":49369,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1544672434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839639730","product_id":100017301,"comment_content":"为了平衡，为了不退化，引起的一个链式反应<br><br>平衡二叉查找树（AVL树）------任意节点的左右子树的高度相差不能大于1<br>平衡相对的是不平衡，左右基本一致可以认为是广义的平衡，而严格的平衡就是高度差不出现大于1 的情况<br><br>平衡二叉查找树 VS 红黑树<br>红黑树是非严格的平衡二叉树，避开了维持严格平衡带来的复杂的调整平衡的操作 --- 红黑是一种非常稳定的二叉查找树<br>红黑树的性质：<br>1、根结点是黑的，叶子节点也是黑的，任意节点到叶子节点的黑色节点个数相同，红点会被黑点隔开<br><br>问答（动态数据结构切要求是高效的）：<br>散列表，数组，跳表，红黑树","like_count":1},{"had_liked":false,"id":41458,"user_name":"TryTs","can_delete":false,"product_type":"c1","uid":1036276,"ip_address":"","ucode":"1DD1E974D461A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f4/26b95f0b.jpg","comment_is_top":false,"comment_ctime":1542785986,"is_pvip":false,"replies":[{"id":"14972","content":"区块链？人工智能？","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542852401,"ip_address":"","comment_id":41458,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5837753282","product_id":100017301,"comment_content":"老师你之前说过的成就感固然是吧！但是我觉得我的挫败感更大.....可能是我想一蹴而就了吧……还有我想请问一下老师你觉得比较有创意的计算机领域有哪些？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429810,"discussion_content":"区块链？人工智能？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542852401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40134,"user_name":"insist","can_delete":false,"product_type":"c1","uid":1054536,"ip_address":"","ucode":"1EE2800A900BA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/48/3ab39c86.jpg","comment_is_top":false,"comment_ctime":1542516963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5837484259","product_id":100017301,"comment_content":"支持高效的查找、插入、删除操作的动态数据结构有跳表、散列表、平衡二叉查找树","like_count":1},{"had_liked":false,"id":40021,"user_name":"阿K","can_delete":false,"product_type":"c1","uid":1183729,"ip_address":"","ucode":"A1D9AED07B5EA9","user_header":"https://static001.geekbang.org/account/avatar/00/12/0f/f1/68012b2f.jpg","comment_is_top":false,"comment_ctime":1542443618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5837410914","product_id":100017301,"comment_content":"以前只知道概念和实现，不知道为什么这么实现。<br>要是早几年看到这篇文章， 我也不至于这样了","like_count":1},{"had_liked":false,"id":358964,"user_name":"111","can_delete":false,"product_type":"c1","uid":3109487,"ip_address":"北京","ucode":"D6E8E83A118A3E","user_header":"https://static001.geekbang.org/account/avatar/00/2f/72/6f/44c10658.jpg","comment_is_top":false,"comment_ctime":1665103280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665103280","product_id":100017301,"comment_content":"总结：<br>1. 红黑树是一种近似平衡的二叉查找树<br><br>1. 跳表 时间复杂度O(logn), 空间复杂度O(n)<br>2. 散列表 要注意hash碰撞","like_count":0},{"had_liked":false,"id":356422,"user_name":"蒋慕平","can_delete":false,"product_type":"c1","uid":2302901,"ip_address":"重庆","ucode":"57B8FF7F00C042","user_header":"https://static001.geekbang.org/account/avatar/00/23/23/b5/639a12ec.jpg","comment_is_top":false,"comment_ctime":1662290834,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662290834","product_id":100017301,"comment_content":"散列表,插入删除查找都是O(1)，不能顺序遍历，数据更新不那么频繁。<br>跳表，插入删除查找都是O(logN), 能顺序遍历，缺点是空间复杂度O(n),适于不那么在意内容空间，其顺序遍历和区间查找非常方便。<br>红黑树，插入删除查找都是O(logN),中序遍历是顺序遍历，稳定，难以实现。插入、删除要保持树的玩平衡有点费性能。","like_count":0},{"had_liked":false,"id":356279,"user_name":"云水禅心🌓","can_delete":false,"product_type":"c1","uid":2915218,"ip_address":"上海","ucode":"1B0782009BC5B1","user_header":"https://static001.geekbang.org/account/avatar/00/2c/7b/92/ce884691.jpg","comment_is_top":false,"comment_ctime":1662103889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662103889","product_id":100017301,"comment_content":"\t\t比较下 散列表    AVL树  红黑树 跳表  B树&#47;B+树 等数据结构的应用场景以及分析<br>\t\t\t0、散列表：<br>\t\t\t\t插入删除查找都是O(1), 是最常用的，但其缺点 不适用于范围查找，在扩容缩容的存在性能损耗。适用于那些不需要顺序遍历，数据更新不那么频繁的。<br>\t\t\t1、AVL树：<br>\t\t\t\t 严格定义的一种平衡二叉树，所以查找效率很高，但是，有利就有弊，AVL 树为了维持这种高度的平衡，就要付出更多的代价。每次插入、删除都要做调整，就比较复杂、耗时；对于有频繁的插入、删除操作的数据集合，不适合使用；<br>\t\t\t2、红黑树：<br>\t\t\t\t并不是严格满足平衡二插树的定义，由于牺牲以一些查找性能，但是稳定了删除和插入性能，并非每一次删除和插入都需要对树进行调整，因此兼容 查找 删除 插入 等操作的性能；但是代码实现难度较大<br>\t\t\t3、跳表:<br>\t\t\t\t插入删除查找都是O(logn), 并且能顺序遍历。缺点是需要额外的空间存储 索引，因此空间复杂度O(n),适用于不那么在意内存空间的场景，比如Redis 中的Zset，使用跳表实现；<br>\t\t\t4、B树&#47;B+树<br>\t\t\t\t一种平衡的多路查找树。B树的阶是所有结点的孩子结点树的最大值。 主要用在文件系统以及数据库中做索引等，比如Mysql：B-Tree Index in MySql","like_count":0},{"had_liked":false,"id":343595,"user_name":"Geek_012cbf","can_delete":false,"product_type":"c1","uid":2944945,"ip_address":"","ucode":"641F0A3802BD48","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/RWib8FCKWu7d78sU05kCKATbmVzR8RDSzWLzOVvOzDaz9G88ZnpPcWIva82vur0dILQAVHFsticSzkDa4zBZqnZA/132","comment_is_top":false,"comment_ctime":1650944704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650944704","product_id":100017301,"comment_content":"老师，可不可以理解为红黑树的23树或者是234树的一种实现呢","like_count":0},{"had_liked":false,"id":337545,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1646884026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646884026","product_id":100017301,"comment_content":"思考题：<br>1. 散列表：动态的插入，删除，查询，效率很高 O(1)； 但是要解决散列冲突，不稳定,  对排序支持不友好<br>2. 跳表： 动态的插入，删除，查询，效率很高 O(logm);  支持数据排序， 支持区间查询，配合散列表能提高查询效率 O(1)<br>3. 二叉搜索树： 动态的插入，删除，查询，效率很高 O(logn) ~ O(n);  由于高度不平衡，容易退化查询时间复杂度 ","like_count":0},{"had_liked":false,"id":337072,"user_name":"侯恩训","can_delete":false,"product_type":"c1","uid":1162376,"ip_address":"","ucode":"F4DC47EECA0F00","user_header":"https://static001.geekbang.org/account/avatar/00/11/bc/88/fbb6022e.jpg","comment_is_top":false,"comment_ctime":1646588281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646588281","product_id":100017301,"comment_content":"平衡二叉查找树：每一个子树的高度相差不超过1。平衡二叉查找树最重要的思想是平衡，通过平衡，到达查找的时间复杂度是O(log2n),不劣化。红黑树一种不严格的平衡二叉查找树。<br>红黑树：<br>1. 根节点是黑节点<br>2. 叶子节点是黑节点<br>3. 相邻的节点不能都是红节点<br>4. 从根节点到每一个叶子节点，黑节点数量都相同","like_count":0},{"had_liked":false,"id":333359,"user_name":"好吃二师兄","can_delete":false,"product_type":"c1","uid":1242173,"ip_address":"","ucode":"A367B52BC79199","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/3d/ec3d6348.jpg","comment_is_top":false,"comment_ctime":1644309726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644309726","product_id":100017301,"comment_content":"算法（第四版）中讲平衡二叉树讲的很好，从2-3树演进到左倾红黑树，再从2-3-4树到演进到普通红黑树，就是其中对删除结点和删除最大结点的讲解没看懂，代码实现很复杂","like_count":0},{"had_liked":false,"id":324615,"user_name":"Reven","can_delete":false,"product_type":"c1","uid":1161105,"ip_address":"","ucode":"487E00D144701B","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/91/257b895a.jpg","comment_is_top":false,"comment_ctime":1638519085,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638519085","product_id":100017301,"comment_content":"任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；但红黑树的图例左侧第2 第4层，右侧第3层 相邻的节点不是红色的吗？","like_count":0},{"had_liked":false,"id":320825,"user_name":"Lin","can_delete":false,"product_type":"c1","uid":2834580,"ip_address":"","ucode":"4EF35D384BF566","user_header":"https://static001.geekbang.org/account/avatar/00/2b/40/94/323d276b.jpg","comment_is_top":false,"comment_ctime":1636524124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636524124","product_id":100017301,"comment_content":"平衡二叉树和非平衡二叉树这图我怎么感觉不太对啊第一个感觉是非平衡，第二个感觉是平衡，有人知道为什么吗，看了很多资料没太理解","like_count":0},{"had_liked":false,"id":307788,"user_name":"佳成_Cahen","can_delete":false,"product_type":"c1","uid":2324353,"ip_address":"","ucode":"88091603E3AD9B","user_header":"https://static001.geekbang.org/account/avatar/00/23/77/81/9bc87164.jpg","comment_is_top":false,"comment_ctime":1629256261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629256261","product_id":100017301,"comment_content":"第一个图左边的红黑树的叶子节点是全红而不是全黑色啊，这不与红黑树定义矛盾了吗","like_count":0},{"had_liked":false,"id":301045,"user_name":"白冥","can_delete":false,"product_type":"c1","uid":2351551,"ip_address":"","ucode":"F84B17F95FFE88","user_header":"","comment_is_top":false,"comment_ctime":1625494247,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625494247","product_id":100017301,"comment_content":"那个红黑树的图例，右边那颗不是红黑树，作者能修改一下吗","like_count":0},{"had_liked":false,"id":297869,"user_name":"海崖","can_delete":false,"product_type":"c1","uid":2552745,"ip_address":"","ucode":"9D42E0B0D30A56","user_header":"https://static001.geekbang.org/account/avatar/00/26/f3/a9/bb9d8450.jpg","comment_is_top":false,"comment_ctime":1623826277,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623826277","product_id":100017301,"comment_content":"叮~打卡","like_count":0},{"had_liked":false,"id":295117,"user_name":"Geek_9258fc","can_delete":false,"product_type":"c1","uid":2142284,"ip_address":"","ucode":"BE1C46704B2481","user_header":"","comment_is_top":false,"comment_ctime":1622254473,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622254473","product_id":100017301,"comment_content":"很疑惑红黑二叉树区分红黑节点的目的是什么，红黑节点各自又有什么作用和区别呢？","like_count":0},{"had_liked":false,"id":291214,"user_name":"双木公子","can_delete":false,"product_type":"c1","uid":1116567,"ip_address":"","ucode":"751885864D3AB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/97/4314e2d8.jpg","comment_is_top":false,"comment_ctime":1620120606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620120606","product_id":100017301,"comment_content":"散列表：插入，删除的效率极高，为o(1),是非常常用的，缺点是不能顺序遍历表中的元素，并且在需要扩容时成本也比较高。适用于那些读操作很多，且不需要顺序遍历的场景。<br><br>跳表：插入删除的效率为o(logn),可以顺序遍历。缺点是空间复杂度为o(n)。适用于不那么在意内存空间的，其顺序遍历和区间查找很方便。<br>红黑树：插入、删除的效率为o(logn),可以顺序遍历，相比于二叉查找树，更加稳定。相比于跳变其缺点是实现比较复杂","like_count":0},{"had_liked":false,"id":280793,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614393856,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614393856","product_id":100017301,"comment_content":"茶艺师学编程<br><br>思考题<br>可扩容数组  基于下标随机访问快，只是插入删除会有点麻烦，数据规模下可以用<br>双向链表  插入删除快，但访问得按顺序来，不过在两端可以快速添加或删除<br>跳表  在有序链表上能加速访问，在添加新节点后得花点时间维护（重新排序、建索引），但在这里可用于数据规模较大的场合下了<br>散列表 能存大量的无序数据，读取也快，只是时间复杂度有可能从O(1)退化为O(n)<br>","like_count":0},{"had_liked":false,"id":278011,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1356978,"ip_address":"","ucode":"E78B1F15BC10F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcLjatV3GHdibZXCTIgL1X2A7jpByIeLH3Zyia8KXdT4JRcicmVSgq5ekRHCFCFenMqicsAwaWYibHkTw/132","comment_is_top":false,"comment_ctime":1612701467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612701467","product_id":100017301,"comment_content":"学习一种数据结构，不要死记它的实现，要从它的由来、特性和使用场景以及它能解决的问题来学习。","like_count":0},{"had_liked":false,"id":278009,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1356978,"ip_address":"","ucode":"E78B1F15BC10F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIcLjatV3GHdibZXCTIgL1X2A7jpByIeLH3Zyia8KXdT4JRcicmVSgq5ekRHCFCFenMqicsAwaWYibHkTw/132","comment_is_top":false,"comment_ctime":1612701169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612701169","product_id":100017301,"comment_content":"不知道红黑树的这几个要求为什么这么规定，看评论说红黑树由2-3树而来，而我也没听过2-3树，先继续往后听。","like_count":0},{"had_liked":false,"id":275331,"user_name":"Geek1560","can_delete":false,"product_type":"c1","uid":2028949,"ip_address":"","ucode":"5F27A28B8002E6","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/95/a362f01b.jpg","comment_is_top":false,"comment_ctime":1611475657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611475657","product_id":100017301,"comment_content":"红黑树博文推荐一篇：https:&#47;&#47;www.cnblogs.com&#47;skywang12345&#47;p&#47;3245399.html。 图文 + 代码","like_count":0},{"had_liked":false,"id":268229,"user_name":"Rookie-Red","can_delete":false,"product_type":"c1","uid":1627358,"ip_address":"","ucode":"A2CC287D3442D7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJia5Ax51D8Nyap5xcPkaveicguf5Nm4715fXKT4TfccvBYKiabWVJTeHtrejmDNtdmM12JYLzxiaUVEQ/132","comment_is_top":false,"comment_ctime":1608107589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608107589","product_id":100017301,"comment_content":"散列表：插入删除查找都是O(1), 是最常用的，缺点是不能顺序遍历以及扩容缩容的性能损耗。适用于不需要顺序遍历，数据更新不那么频繁的。<br><br>跳表：插入删除查找都是O(logn), 是顺序遍历。缺点是空间复杂度O(n)。适用于不那么在意内存空间的，其顺序遍历和区间查找非常方便。<br><br>红黑树：插入删除查找都是O(logn),  中序遍历即是顺序遍历，稳定。 缺点是难以实现，去查找不方便。其实跳表更佳，但红黑树已经用于很多地方了。","like_count":0},{"had_liked":false,"id":263951,"user_name":"技术人生","can_delete":false,"product_type":"c1","uid":1033977,"ip_address":"","ucode":"6610644BC0A660","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJZBOcesNKYJRJKR6noK2VClOS8iaeEsibpXSLlFT87mARozsicHSAo8VibSEOZSRVw2XWK4UyqjQDYJQ/132","comment_is_top":false,"comment_ctime":1606302500,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1606302500","product_id":100017301,"comment_content":"对于例子的图二不太能理解：<br>1 每个叶子节点都是黑色的空节点 图二中的最后一层的节点是黑色的  那他们下面的null 也是黑色的<br>2 任何相邻的节点都不能同时为红色 是不是 相邻的两层可以都为黑色呢<br>","like_count":0},{"had_liked":false,"id":252053,"user_name":"恶魔果实","can_delete":false,"product_type":"c1","uid":1962297,"ip_address":"","ucode":"691CD833C984AC","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f1/39/b0960780.jpg","comment_is_top":false,"comment_ctime":1602079550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602079550","product_id":100017301,"comment_content":"为什么第一个红黑树的图，叶子节点是红色的，不是说叶子节点只能是黑色的吗？","like_count":0},{"had_liked":false,"id":248696,"user_name":"bigzuo","can_delete":false,"product_type":"c1","uid":1224554,"ip_address":"","ucode":"448C258D31A8A6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/RQdib68D7dsoFlYXOweiaPqLrcyn2jD6DCGnz8nc2VFmhmX0bpGTeSrVM5M9Qs7ibIInAmt5MeLcpcNja5YjyZCIg/132","comment_is_top":false,"comment_ctime":1600265399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600265399","product_id":100017301,"comment_content":"学习数据结构不是为了去实现，而是为了了解特饮，要它解决的问题，然后在需要的时候，能按需饮用即可。","like_count":0},{"had_liked":false,"id":248111,"user_name":"王世林","can_delete":false,"product_type":"c1","uid":1076155,"ip_address":"","ucode":"2BB56D0FD71417","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/bb/10aaf123.jpg","comment_is_top":false,"comment_ctime":1600012187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600012187","product_id":100017301,"comment_content":"红黑树要求的第二点，每个叶子都是黑色的空节点，但是叶子节点也可以是红色的啊，麻烦老师解疑","like_count":0},{"had_liked":false,"id":245254,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1598877012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598877012","product_id":100017301,"comment_content":"链表 哈希表？ 这些算吗","like_count":0},{"had_liked":false,"id":240557,"user_name":"陈先生","can_delete":false,"product_type":"c1","uid":1043706,"ip_address":"","ucode":"B3D4AD3D52F896","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/fa/dceae1c9.jpg","comment_is_top":false,"comment_ctime":1596975755,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596975755","product_id":100017301,"comment_content":"红黑树是不是不适合用来做范围查询呢？是不是跳表更为合适？","like_count":0},{"had_liked":false,"id":239161,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1596449787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596449787","product_id":100017301,"comment_content":"想到跳表这个数据结构","like_count":0},{"had_liked":false,"id":228758,"user_name":"Gin","can_delete":false,"product_type":"c1","uid":1474539,"ip_address":"","ucode":"7BB3FEDAD5E6B5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/7XmLAKHC4MDUf096RNq2g5rMibf9iaiaHYzXTtH45yabSawLzeW92EaEdORNXggUTOPia4ia6g4L3faucQibibx5zxsLw/132","comment_is_top":false,"comment_ctime":1592801237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592801237","product_id":100017301,"comment_content":"从四叉树中取出某些节点，放到叶节点位置，四叉树就变成了完全二叉树。这句不是很理解！麻烦老师或者已经懂了的同学帮忙解答下，谢谢！","like_count":0},{"had_liked":false,"id":219968,"user_name":"Geek_Akara","can_delete":false,"product_type":"c1","uid":1991279,"ip_address":"","ucode":"E86A5A9EEC8BFF","user_header":"https://static001.geekbang.org/account/avatar/00/1e/62/6f/06d476f7.jpg","comment_is_top":false,"comment_ctime":1590127178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590127178","product_id":100017301,"comment_content":"看不懂的同学可以去翻翻算法第四版，250页，2-3树开始，到最后红黑树代码的实现。不着急细细的看的话大概需要四个半小时，讲的很详细，红黑树的前世今生。","like_count":0},{"had_liked":false,"id":217025,"user_name":"你在不远的未来","can_delete":false,"product_type":"c1","uid":1318404,"ip_address":"","ucode":"5B34C8BD03B71A","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/04/f902047e.jpg","comment_is_top":false,"comment_ctime":1589387966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589387966","product_id":100017301,"comment_content":"平衡二叉树<br>--------------------------------------------------------------------------------<br>定义：<br>二叉树中，任意节点的左右子节点高度差不能超过1，满二叉树、完全二叉树都可以算是平衡二叉树。<br><br>红黑树（平衡二叉树基础上升级）<br>--------------------------------------------------------------------------------<br>定义：<br>二叉树中，所有节点被标记为两类，红色节点和黑色节点。红色存储数据、黑色隔离数据。并且满足一下要求：<br>根节点是黑色。<br>每个叶子节点都是黑色的空节点（NIL），也就是说叶子节点不存储数据。<br>任何相邻的节点不能同时为红色，也就说红色节点需要被黑色节点隔开。<br>每个节点，到达其叶子节点的所有路径，都包含相同数目的黑色节点。<br>特点：<br>针对AVL树这种高度平衡的二叉树，为了追求查找效率，从而每次插入、删除之后都要做调整，复杂且耗时。如果二叉树有频繁的插入、删除操作，使用AVL代价有点高。<br>红黑树在使用上只是做到了近似平衡，所以在维护平衡的成本上，要比AVL树要低。<br>红黑树高度近似Log2 n，插入、查找、删除时间复杂度为O(Log2 n)<br>","like_count":0},{"had_liked":false,"id":215621,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1589034310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589034310","product_id":100017301,"comment_content":"近似平衡，等价为性能不会退化得太严重。<br>数据结构的设计，是各种指标权衡的艺术，要考虑各种情况的较优解。","like_count":0},{"had_liked":false,"id":213832,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1588573333,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588573333","product_id":100017301,"comment_content":"60天攻克算法打卡行动第22天<br><br>什么是“平衡二叉查找树”？<br>二叉树中任何一个节点的左右子树的高度相差不能超过1.<br>红黑树的定义：一类节点被标示黑色，一类节点被标示红色。根节点是黑色，每个叶子节点都是黑色的空节点，也就是不存储数据。相邻的节点不能同时为红色，也就是红色节点是被黑色隔开的。每个节点，从该节点到可达到的叶子节点的所有路径，都包含相同数目的黑色节点。<br>为什么说红黑树是“近似平衡”的？<br>实验：我们把红色节点去掉我们得出来的高度类似于完全二叉树的高度，完全二叉树的高度是log2n,那么只有黑色节点的红黑树是小于log2n，加上红色节点后也就是要小于2log2n，其实这样并不精确，红黑树性能完全要高于这个值，所以是近似平衡。<br><br>解答：<br>AVL树是高度的平衡二叉树，所以查找很方便，但是为了维护这种高度平衡，在插入、删除时候就需要经常调整平衡。而红黑树则不需要，因为它近似于平衡二叉树，对于这些维护就要降低一些，所以工业上更加倾向于红黑树。\t<br><br>我们学习数据结构和算法，要学习它的由来、特性、适用的场景以及它能解决的问题。对于红黑树，也不例外。你如果能搞懂这几个问题，其实就已经足够了。<br>为了解决二叉查找树在数据更新过程的复杂问题，红黑树的高度近似于log2n，所以它的动态插入，删除，查找操作复杂度都是O(logn).<br>链表也是动态插入，查找，删除；插入，删除都是O（1）而查找需要O（n）。","like_count":0},{"had_liked":false,"id":213428,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1588411353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588411353","product_id":100017301,"comment_content":"有序数组，散列表，跳表，红黑树都可以实现动态数据增删改查。<br>数组的优势是配合二分查找，可以实现很多个性化的查找操作，比如课件里那些例子。缺点是需要连续内存。<br>散列表支持O(1)快速增删改查，但存储效率有牺牲，不支持区间查找。<br>跳表的优势是可以用链表实现有序数组快速查找，但对数据增删改的支持差一些。<br>红黑树的性能稳定，各种操作时间复杂度都是O(nlogn)，缺点是实现难度较大。","like_count":0},{"had_liked":false,"id":187386,"user_name":"Teresa","can_delete":false,"product_type":"c1","uid":1698219,"ip_address":"","ucode":"6106B84BDC30AF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKkDB6420zwODZTJL6icKKTpyFKuVF9GRjj1V5ziaibADbrpDMmicF8Ad5fmBjycibEg3yhpwlVOLzzxRQ/132","comment_is_top":false,"comment_ctime":1584097262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584097262","product_id":100017301,"comment_content":"课后习题：动态数据结构支持动态地数据插入、删除、查找操作，前面章节讲了跳表、散列表。 跳表 的存储是有序的，且能顺序遍历，插入&#47;删除&#47;查找的时间复杂度是o(logn)，但是空间复杂度比较高，适用于单个元素占用内存比较大且按顺序存储的序列。散列表查找&#47;删除&#47;插入的时间复杂度是o(1), 但存储序列不是有序的，散列表的键扩容&#47;缩容需要额外的时间，而且冲突处理也需要耗费额外的时间。  <br>—— 给自己的学习留下记录。","like_count":0},{"had_liked":false,"id":186133,"user_name":"Baymax","can_delete":false,"product_type":"c1","uid":1577286,"ip_address":"","ucode":"DAE81AB14F9B63","user_header":"https://static001.geekbang.org/account/avatar/00/18/11/46/63bd0740.jpg","comment_is_top":false,"comment_ctime":1583763693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583763693","product_id":100017301,"comment_content":"原来叫23树，后来为了工程化方便，发明了红黑树，<br>一红连一黑可以看成23树种有三个子树的那个节点。","like_count":0},{"had_liked":false,"id":185096,"user_name":"yuan","can_delete":false,"product_type":"c1","uid":1207302,"ip_address":"","ucode":"EA3D0573478EC7","user_header":"https://static001.geekbang.org/account/avatar/00/12/6c/06/2ac17d5a.jpg","comment_is_top":false,"comment_ctime":1583481233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583481233","product_id":100017301,"comment_content":"红黑树 为什么从每个叶子到根的所有路径上不能有两个连续的红色节点？","like_count":0},{"had_liked":false,"id":184709,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1583389203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583389203","product_id":100017301,"comment_content":"下面有评论说下面两个图中的左边的那个图叶子节点为什么是红色的？其实上面老师已经说了『先不考虑红黑树定义中的第2条』。但是如果这样考虑的话，那右边的图最底层的节点的颜色还是黑色的，这不就违背了刚说的第2条了吗？<br><br>那是不是可以这么理解：第2条中所说的『黑色的空节点（NIL）』为第三种类型的节点，此时红黑树中就存在三中节点了，即：红色的节点，黑色的节点和『黑色的空节点（NIL）』？？？<br><br>请问下老师，是我理解错误了吗？","like_count":0},{"had_liked":false,"id":175173,"user_name":"一路向北","can_delete":false,"product_type":"c1","uid":1050287,"ip_address":"","ucode":"19322F21C0235B","user_header":"https://static001.geekbang.org/account/avatar/00/10/06/af/f7e562fb.jpg","comment_is_top":false,"comment_ctime":1580601380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580601380","product_id":100017301,"comment_content":"队列，链表，数组 都是动态数据结构，队列适合做数据缓冲，数据生产，消费需要保持一定的顺序；链表适合做删除，插入大于查询的场景；数组是一种需要连续空间内存的数据结构，存储的数据效率高，适合对数据按下标随机查找，读多点场景使用。","like_count":0},{"had_liked":false,"id":174333,"user_name":"pikachu122","can_delete":false,"product_type":"c1","uid":1689365,"ip_address":"","ucode":"43FE4DBC872FFA","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/15/24bf166a.jpg","comment_is_top":false,"comment_ctime":1580147408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580147408","product_id":100017301,"comment_content":"1、二叉查找树的性能不稳定。在频繁的动态更新后树的高度可能远远大于log2n，极端情况下甚至会倒退回O(n)。为了解决这种问题，人们发明了平衡二叉查找树。<br>2、平衡二叉查找树的定义：二叉树中任意一个节点的左右子树的高度不能大于1。<br>3、红黑树是一种近似平衡的的二叉查找树，并不完全满足上面的定义。红黑树有两类节点，一类被标记为黑色，一类被标记为红色。红黑树还需满足：（1）根节点是黑色的（2）每个叶子节点都是黑色的空节点（3）红色节点不能相邻，必须被黑色节点隔开（4）每个节点到达可达叶子结点的所有路径都包含相同数目的黑色节点。<br>4、红黑树的高度不会超过2log2n，只比高度平衡的AVL树的高度大了一倍，性能相似，实际上红黑树性能更好。相比于AVL树，红黑树的插入、删除、查找性能比较稳定，而AVL树为了高度平衡，插入删除时需要做很多调整，反而更加复杂耗时。<br>5、红黑树的实现是一个难点，需要自己写代码实现时更倾向用跳表替代。<br><br>支持动态插入&#47;删除&#47;查找的数据结构：<br>1、数组：优点是支持随机访问，缺点是需要申请指定大小的连续内存空间，数据过多时需要扩容。<br>2、散列表：优点是可以高效查找，缺点是不能顺序遍历，以及由于需要保持装载因子比较耗费内存空间。<br>3、跳表：优点是可以快速查找链表（O(logn)复杂度），缺点是需要大量额外内存空间。<br>4、红黑树：优点是可以O(logn)复杂度插入删除查找且不需要太多额外内存空间，缺点是难以实现。","like_count":0},{"had_liked":false,"id":170448,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1578616708,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1578616708","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":166075,"user_name":"小文","can_delete":false,"product_type":"c1","uid":1177540,"ip_address":"","ucode":"974071FAA5F173","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/c4/bd7dd30a.jpg","comment_is_top":false,"comment_ctime":1577374947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577374947","product_id":100017301,"comment_content":"老师，红黑树是不是也是维持有序的，那C++中的map是红黑树实现的，如果key是一个数据结构，这根据什么排序呢？","like_count":0},{"had_liked":false,"id":163594,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1576752341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576752341","product_id":100017301,"comment_content":"动态数据结构还有散列表：插入删除查找都是O（1），但是不能顺序遍历；填表：插入删除查找都是O(logn），可以顺序遍历和区间查找，但是空间消耗大。","like_count":0},{"had_liked":false,"id":159319,"user_name":"百里","can_delete":false,"product_type":"c1","uid":1212873,"ip_address":"","ucode":"2CE96129AA7F78","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/c9/9194612b.jpg","comment_is_top":false,"comment_ctime":1575598617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575598617","product_id":100017301,"comment_content":"准确的定义二叉平衡树的概念应该是:二叉树中任意一个节点的左右子树的高度相差的绝对值不能大于1，＂绝对值＂这个是关键．","like_count":0},{"had_liked":false,"id":159064,"user_name":"百里","can_delete":false,"product_type":"c1","uid":1212873,"ip_address":"","ucode":"2CE96129AA7F78","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/c9/9194612b.jpg","comment_is_top":false,"comment_ctime":1575529299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575529299","product_id":100017301,"comment_content":"&quot; 任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；&quot;这句话理解起来有点问题吧.相邻是指兄弟节点的相邻吧.应该是任何相连的节点不能同时为红色才对吧.","like_count":0},{"had_liked":false,"id":157533,"user_name":"姜川","can_delete":false,"product_type":"c1","uid":1684311,"ip_address":"","ucode":"0F8A349623EAB5","user_header":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","comment_is_top":false,"comment_ctime":1575188260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575188260","product_id":100017301,"comment_content":"还是建议学习2-3树再看红黑树，红黑树光看定义，没一点意义，因为没有2-3树就没有红黑树","like_count":0},{"had_liked":false,"id":157160,"user_name":"lizi","can_delete":false,"product_type":"c1","uid":1617799,"ip_address":"","ucode":"18FA399A9C5CB4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIAicKBNWU0IoqHEyWSI8OOtTLJhQ1K0dXbOmYEvmgNGdRplheIqibTDjUy3yNPO5PvELiazMTmmibNSw/132","comment_is_top":false,"comment_ctime":1575048809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575048809","product_id":100017301,"comment_content":"画的两个图的右边图，把所以nil节点加上，左边两个红节点，红色结点第一个右边挂上nil，是不是黑高就不相等了，还是我理解错了。","like_count":0},{"had_liked":false,"id":156745,"user_name":"Geek_949cc1","can_delete":false,"product_type":"c1","uid":1690476,"ip_address":"","ucode":"F8ACDBF2FA8CC2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKFRiaFrpOTVBuKicMficasBFuF2VY7EnUnLeFcvIn0R5OiaQsOcpJHNM5TusoPHMjIvSfia46c0EWH9mQ/132","comment_is_top":false,"comment_ctime":1574946532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574946532","product_id":100017301,"comment_content":"看完下面一位大牛分享的链接，好像有了一点朦胧的感觉，但是好像又不懂。但是还是算是直到了2-3树这个东西，这种树就刚好满足红黑树的概念，即使针对在最差的情况下，根节点到叶子节点的最短路径和最长路径也就差1。<br>通过了解2-3树，我的理解大致是，红黑树其实主要是在模仿2-3树，但是2-3树的实现没有具体的标识，实现起来比较抽象，所以通过2-3树这种模型，引入红黑节点这个概念，可以使实现相对具体一点。红色节点主要是代表2-3树中的3节点类型，在维护平衡过程中，可能会和2-3树一样，需要不断变换红节点的位置。大致猜想，下节课求证一下","like_count":0},{"had_liked":false,"id":156645,"user_name":"JAMES","can_delete":false,"product_type":"c1","uid":1170796,"ip_address":"","ucode":"63015120144DDB","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/6c/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1574929415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574929415","product_id":100017301,"comment_content":"老师给的两个红黑树的示例，其中第一个示例中，最后一行为红色的叶子节点，不满足第二条定义呀？求解","like_count":0},{"had_liked":false,"id":156549,"user_name":"走过你的风～","can_delete":false,"product_type":"c1","uid":1120992,"ip_address":"","ucode":"FBCBC612A93034","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/e0/12d3deeb.jpg","comment_is_top":false,"comment_ctime":1574909973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574909973","product_id":100017301,"comment_content":"这一章看的有点蒙圈","like_count":0},{"had_liked":false,"id":154039,"user_name":"常文龙","can_delete":false,"product_type":"c1","uid":1204525,"ip_address":"","ucode":"4A126159D24766","user_header":"https://static001.geekbang.org/account/avatar/00/12/61/2d/5ca0a3da.jpg","comment_is_top":false,"comment_ctime":1574352581,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574352581","product_id":100017301,"comment_content":"我们学习数据结构和算法，要学习它的由来、特性、适用的场景以及它能解决的问题。对于红黑树，也不例外。你如果能搞懂这几个问题，其实就已经足够了。","like_count":0},{"had_liked":false,"id":153056,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1574149628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574149628","product_id":100017301,"comment_content":"那么在实际的应用中什么的数据放到红黑树中的红色节点，什么样的数据放到黑色节点呢？","like_count":0},{"had_liked":false,"id":149876,"user_name":"姜川","can_delete":false,"product_type":"c1","uid":1684311,"ip_address":"","ucode":"0F8A349623EAB5","user_header":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","comment_is_top":false,"comment_ctime":1573427820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573427820","product_id":100017301,"comment_content":"建议先看2-3树，在了解红黑树，单纯的红黑树的概念只会让你更加困惑","like_count":0},{"had_liked":false,"id":149484,"user_name":"多襄丸","can_delete":false,"product_type":"c1","uid":1074310,"ip_address":"","ucode":"1AA1497C5A293C","user_header":"https://static001.geekbang.org/account/avatar/00/10/64/86/f5a9403a.jpg","comment_is_top":false,"comment_ctime":1573230897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573230897","product_id":100017301,"comment_content":"binary heap 算吧","like_count":0},{"had_liked":false,"id":144699,"user_name":"小光光","can_delete":false,"product_type":"c1","uid":1450291,"ip_address":"","ucode":"34F6AF83910441","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/33/bb18d6f0.jpg","comment_is_top":false,"comment_ctime":1572000323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572000323","product_id":100017301,"comment_content":"其实说白了就是二叉查找树不稳定, 红黑树就是为了解决这个问题,每次二叉查找树有更新时,需要维护这棵二叉查找树,不要让其性能退化到O(n)","like_count":0},{"had_liked":false,"id":139917,"user_name":"Joiner","can_delete":false,"product_type":"c1","uid":1071941,"ip_address":"","ucode":"7F67D4C325E71F","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/45/5dc5437e.jpg","comment_is_top":false,"comment_ctime":1570765807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570765807","product_id":100017301,"comment_content":"老师，对于非平衡二叉树那个示意图，应该是第一层的左右两个子节点（这两个子节点的子树高度不一样）导致的，但是根据之前课程，叶子节点的高度为0，如果按这个基数来计算，那，比如，没有左子节点但是有右子节点，这个时候，左节点的高度是不是应该记为-1，不然，左右子树的高度相差仍然没有大于1，按定义，那还是平衡二叉树啊，但是如果叶子节点的高度从0开始算，那就很明显的知道是非平衡二叉树","like_count":0},{"had_liked":false,"id":116611,"user_name":"徐丶昌隆","can_delete":false,"product_type":"c1","uid":1604438,"ip_address":"","ucode":"9EE3F971F90C4F","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/56/80a75331.jpg","comment_is_top":false,"comment_ctime":1563880787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563880787","product_id":100017301,"comment_content":"要不是之前恶补过红黑树，不然我也会跟底下网友一样，不明白“比较平衡”和红黑树存在的意义这两个问题。。😂","like_count":0},{"had_liked":false,"id":114609,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1563348994,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563348994","product_id":100017301,"comment_content":"链表，跳表，散列表都是动态扩容的数据结构。<br>链表比较简单，对遍历和增删的操作比较高效，查找就比较费劲。<br>跳表弥补了链表在按值查询的不足，通过建索引节点，用空间换时间。<br>散列表查询最为高效，并在空间和时间上取得平衡。空间无要求，散列函数也就不需要了。时间无要求，链表就够了。","like_count":0},{"had_liked":false,"id":109039,"user_name":"拯救地球好累","can_delete":false,"product_type":"c1","uid":1339022,"ip_address":"","ucode":"7643439601EF4C","user_header":"https://static001.geekbang.org/account/avatar/00/14/6e/8e/5d309a85.jpg","comment_is_top":false,"comment_ctime":1561951771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561951771","product_id":100017301,"comment_content":"红黑树定义：<br><br>1. 根节点是黑色的； <br>2. 每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；<br>3. 任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；<br>4. 每个节点，从该节点到达其可达叶子节点的所有路径都包含相同数量的黑色节点；<br><br>为何选用红黑树？<br>红黑树是近似平衡的，其插入、删除比较复杂，也比较耗时，但相对于AVL树来说维护成本要低很多<br>学习数据结构：由来 &amp; 特性 &amp; 适用场景 &amp; 解决的问题","like_count":0},{"had_liked":false,"id":107173,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1561473181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561473181","product_id":100017301,"comment_content":"图一右边的图为什么会有一条路径是4个黑点。。是不是倒数第二层的黑点换成红点？","like_count":0},{"had_liked":false,"id":89069,"user_name":"chang.xu","can_delete":false,"product_type":"c1","uid":1244613,"ip_address":"","ucode":"51C230B833A214","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/c5/1f13bed2.jpg","comment_is_top":false,"comment_ctime":1556071428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556071428","product_id":100017301,"comment_content":"按照红黑树的定义，叶子节点应该均为黑色的空节点，出现在文中的图例(1)图的叶子节点多个为红色节点，这没有违反定义吗？","like_count":0},{"had_liked":false,"id":85141,"user_name":"Lucus","can_delete":false,"product_type":"c1","uid":1198800,"ip_address":"","ucode":"CE8EB70CB9D9F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/4a/d0/d319c44a.jpg","comment_is_top":false,"comment_ctime":1554988152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554988152","product_id":100017301,"comment_content":"普通链表查找插入删除复杂度高，散列表有装载因子占内存还有hash冲突，数组要求连续内存，普通二叉树高度不确定复杂度高，跳表需要维护多一些指针费内存，B+树非叶子结点不存数据只是索引也费内存","like_count":0},{"had_liked":false,"id":83167,"user_name":"三木禾","can_delete":false,"product_type":"c1","uid":1109458,"ip_address":"","ucode":"39C37228236860","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/d2/e3ae7ddd.jpg","comment_is_top":false,"comment_ctime":1554447720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554447720","product_id":100017301,"comment_content":"老师，您好，这里有一个推论，从任意节点到可达叶子节点的每个路径，包含数目相同的黑色节点，从四叉树中取出这些节点，放到叶子节点，四叉树变成完全二叉树，为什么啊？<br>","like_count":0},{"had_liked":false,"id":79248,"user_name":"康斯坦丁","can_delete":false,"product_type":"c1","uid":1368096,"ip_address":"","ucode":"C130E800E8D5C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/20/003190c1.jpg","comment_is_top":false,"comment_ctime":1553415390,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553415390","product_id":100017301,"comment_content":"       优点                 缺点<br>哈希表\tO(1) 时间复杂度.\t    扩容&#47;缩容性能不稳定。hash函数耗性能.  <br>红黑树   O(logN) 时间复杂度    实现复杂.<br>\t\t性能稳定<br>跳表\t\t实现简单<br>\t\tO(logN) 时间复杂度\t有退化问题.","like_count":0},{"had_liked":false,"id":78046,"user_name":"Peng","can_delete":false,"product_type":"c1","uid":1108103,"ip_address":"","ucode":"D15A78DD1AC18C","user_header":"https://static001.geekbang.org/account/avatar/00/10/e8/87/89561ed0.jpg","comment_is_top":false,"comment_ctime":1553061805,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553061805","product_id":100017301,"comment_content":"“任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节”，这里的相邻节点，指的是父子相邻对吧？不是指兄弟相邻，刚看的时候很疑惑。","like_count":0},{"had_liked":false,"id":72629,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1551682432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551682432","product_id":100017301,"comment_content":"红黑树其实就是在各个方面都比较均衡的数据结构，相比较avl树的高度平衡牺牲了些许平衡树，但是提高了插入删除修改的性能，对实际用处的确是有好处！","like_count":0},{"had_liked":false,"id":71016,"user_name":"懒猫","can_delete":false,"product_type":"c1","uid":1206544,"ip_address":"","ucode":"B4B567A11B491D","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/10/275ae749.jpg","comment_is_top":false,"comment_ctime":1551245280,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551245280","product_id":100017301,"comment_content":"跳表，散列表","like_count":0},{"had_liked":false,"id":68545,"user_name":"aguan(^･ｪ･^)","can_delete":false,"product_type":"c1","uid":1107177,"ip_address":"","ucode":"04833EF2D18E1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/e9/0dd3829f.jpg","comment_is_top":false,"comment_ctime":1550541694,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550541694","product_id":100017301,"comment_content":"跟红黑树功能比较相近的就是跳表<br>相同之处：<br>查询，删除，插入的时间复杂度都是O(logn)，所以基本操作的效率都是差不多的<br>不同之处：<br>1.跳表需要维护索引，所以空间复杂度是O(n)，而红黑树的空间复杂度为O(1)<br>2.跳表能查找一段区间的效率很高，接近O(logn)，而红黑树就比较复杂，我这里计算出的时间复杂度为k*O(logn)，k相当于区间节点的个数","like_count":0},{"had_liked":false,"id":67858,"user_name":"某构称","can_delete":false,"product_type":"c1","uid":1351190,"ip_address":"","ucode":"D2CE99C2CEE380","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epib8yjEIes0JqPoyIvzxEpud79AvsiaXTPPkhYGOsV2VLQycmSJCUl4lss4biaiacmwx4Sicur3nC1Q5w/132","comment_is_top":false,"comment_ctime":1550301495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550301495","product_id":100017301,"comment_content":"王老师，红黑树两个图例中的右边一个图中，是不是左下角的两个红色节点都缺少了一个黑色数据节点啊？由于省略的是黑色且空的叶子节点nil，如果将红黑树补全，在红色节点下补上nil的黑色空叶子节点a，最左下角的黑色数据节点补上nil的黑色空叶子节点b与c，则根结点到a、根结点到b的路径上黑色节点数就不相同了？我查了下百度百科，有结论是说所有叶子必有两个节点，尽管其中一个可能是空节点。但是是否红色节点必有两个非空的黑色数据节点？或者说是我对这里的叶节点理解有误，任意节点到叶节点的路径，其中叶节点只包括有数据的节点，并不包括省略的黑色空节点？望老师解惑","like_count":0},{"had_liked":false,"id":64700,"user_name":"achilles","can_delete":false,"product_type":"c1","uid":1360969,"ip_address":"","ucode":"201962E5295090","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLed0nTfZARpl7zeJ4KjDYibUNRsPvqW3lxTT2hkwPBaDicSuVXiasNcEezYxCmzq4xBCu9uGIicHjnpw/132","comment_is_top":false,"comment_ctime":1548861418,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548861418","product_id":100017301,"comment_content":"根据第四条性质，老师您画的红黑树示意图第二个不是红黑树，因为它从跟结点到叶子结点(空结点)的黑色借点数量依次为4  4，3，3，4  4，4  4，4  4，4  4","like_count":0},{"had_liked":false,"id":61975,"user_name":"睡痴儿😑","can_delete":false,"product_type":"c1","uid":1187204,"ip_address":"","ucode":"750EF858EF2042","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/84/d0ec0064.jpg","comment_is_top":false,"comment_ctime":1547869336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547869336","product_id":100017301,"comment_content":"散列表，跳表，","like_count":0},{"had_liked":false,"id":61217,"user_name":"有朋自远方来","can_delete":false,"product_type":"c1","uid":1083600,"ip_address":"","ucode":"23A12829DEB119","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/d0/6e75f766.jpg","comment_is_top":false,"comment_ctime":1547639540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547639540","product_id":100017301,"comment_content":"这个实现平衡，有好多种方法。红黑树，我只记得 实践性能优。大神发明的算法。一个比一个厉害！","like_count":0},{"had_liked":false,"id":60710,"user_name":"被吹落的风","can_delete":false,"product_type":"c1","uid":1242309,"ip_address":"","ucode":"AF62645E386A7B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/c5/39f2acfd.jpg","comment_is_top":false,"comment_ctime":1547534940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547534940","product_id":100017301,"comment_content":"很多人不容易理解红黑树的定义，我觉得改成下面的还容易理解些：<br>1. 节点是红色或黑色。<br>2. 根节点是黑色。<br>3 每个叶节点（NIL节点，空节点）是黑色的。<br>4 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)<br>5. 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。","like_count":0},{"had_liked":false,"id":52020,"user_name":"luo","can_delete":false,"product_type":"c1","uid":1148742,"ip_address":"","ucode":"00FBDC12101419","user_header":"https://static001.geekbang.org/account/avatar/00/11/87/46/2850b4a9.jpg","comment_is_top":false,"comment_ctime":1545295545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545295545","product_id":100017301,"comment_content":"有跳表，hash表，还有红黑树  执行效率：跳表与红黑树的时间复杂度为O(logn)，而hash表的性能为O(1)，所以在查找方面只要数据分布比较均匀 hash表的性能优势体现的比较明显。<br>空间复杂度：而言  跳表是比较高需要额外的O(n)的复杂度。<br>稳定性：红黑树的稳定性高于跳表跟hash表，但是不好实现<br>有序方面：红黑树和跳表都属于有序的，而hash表则是无序的，所以适合的场景也得做下区分。<br>","like_count":0},{"had_liked":false,"id":50578,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1545011786,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545011786","product_id":100017301,"comment_content":"可不可以这样理解   <br>动态：就是数据经常变化的一个结构<br>相反的静态：就是数据趋于稳定，基本上不会做什么变化","like_count":0},{"had_liked":false,"id":49092,"user_name":"来碗绿豆汤","can_delete":false,"product_type":"c1","uid":1070051,"ip_address":"","ucode":"B0AB63B8D9729F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","comment_is_top":false,"comment_ctime":1544602873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1544602873","product_id":100017301,"comment_content":"老师你给的那两颗红黑树图例，右边那颗是红黑色吗？左下角红色下面一个黑色的话，红色到左子树叶子节点的黑色节点数，就会比右边多一个黑色","like_count":0},{"had_liked":false,"id":48356,"user_name":"Northern","can_delete":false,"product_type":"c1","uid":1060908,"ip_address":"","ucode":"6B8DB4CF385029","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/2c/333d7080.jpg","comment_is_top":false,"comment_ctime":1544427478,"is_pvip":false,"replies":[{"id":"17384","content":"麻烦仔细读读文章 我前面有讲的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1544493513,"ip_address":"","comment_id":48356,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544427478","product_id":100017301,"comment_content":"红黑树的两个图例中，第一张图看不太懂，为什么叶子节点都是红色？这不符合红黑树的定义","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432147,"discussion_content":"麻烦仔细读读文章 我前面有讲的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544493513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":45725,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1543760533,"is_pvip":false,"replies":[{"id":"16357","content":"第一个问题 是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1543801698,"ip_address":"","comment_id":45725,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543760533","product_id":100017301,"comment_content":"红黑树的第三点要求：「任何相邻的节点都不能同时为红色」，这里是否可以理解为子节点和它的父节点不能同时为空色？<br>本节第三幅图例的第二个红黑树，一开始对着平衡二叉树查找树的严格定义，发现左右子树的高度相差并不小于等于 1，但是又想到「近似」的含义，一下就释怀了。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":431175,"discussion_content":"第一个问题 是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543801698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":43000,"user_name":"luffy","can_delete":false,"product_type":"c1","uid":1244950,"ip_address":"","ucode":"702034E116A99F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/16/b0ab9a73.jpg","comment_is_top":false,"comment_ctime":1543133305,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543133305","product_id":100017301,"comment_content":"要学习它的由来、特性、适用的场景以及它能解决的问题。对于红黑树，也不例外。你如果能搞懂这几个问题，其实就已经足够了。","like_count":0},{"had_liked":false,"id":42839,"user_name":"杉枫","can_delete":false,"product_type":"c1","uid":1020401,"ip_address":"","ucode":"E2B21115353B33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/91/f1/16ada768.jpg","comment_is_top":false,"comment_ctime":1543054808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543054808","product_id":100017301,"comment_content":"红黑树之外hash是一个读写很高效的数据结构","like_count":0},{"had_liked":false,"id":42687,"user_name":"谭鹏","can_delete":false,"product_type":"c1","uid":1142009,"ip_address":"","ucode":"4A8120C4AA6F2F","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/f9/af80b4da.jpg","comment_is_top":false,"comment_ctime":1543020649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543020649","product_id":100017301,"comment_content":"之前学习 自己都是一头扎到具体实现的细枝末节里面去, 就像背书一样 ,要不了几天就忘了,现在 可以从场景,空间复杂度时间复杂度这些更高的角度去分析 和学习. 学习 真的是方法最重要","like_count":0},{"had_liked":false,"id":41525,"user_name":"ZX","can_delete":false,"product_type":"c1","uid":1235583,"ip_address":"","ucode":"0D2622FE6D1774","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/7f/8069035d.jpg","comment_is_top":false,"comment_ctime":1542801293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542801293","product_id":100017301,"comment_content":"老师对数据结构与算法的理解肯定很深入啊，讲的由浅入深，用最通俗易懂的说法给我们讲<br>动态的有： 跳表，散列表，平衡二叉查找树","like_count":0},{"had_liked":false,"id":40697,"user_name":"babysbreath","can_delete":false,"product_type":"c1","uid":1035684,"ip_address":"","ucode":"A99A2C0E5D605D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/a4/da5b5240.jpg","comment_is_top":false,"comment_ctime":1542643573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542643573","product_id":100017301,"comment_content":"堆，优先队列，跳表 是动态的。<br>堆，队列适合动态的排序<br>跳表适合查询一个范围内的数据","like_count":0},{"had_liked":false,"id":40343,"user_name":"鹏程万里","can_delete":false,"product_type":"c1","uid":1114675,"ip_address":"","ucode":"5E23BBEC9E8209","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/33/57678ea3.jpg","comment_is_top":false,"comment_ctime":1542596360,"is_pvip":false,"replies":[{"id":"14676","content":"第一个问题答案是yes    另外两个问的太笼统 没看懂","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542679152,"ip_address":"","comment_id":40343,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542596360","product_id":100017301,"comment_content":"请问文中的这段话：“前面红黑树的定义里有这么一条：从任意节点到可达的叶子节点的每个路径包含相同数目的黑色节点。我们从四叉树中取出某些节点，放到叶节点位置，四叉树就变成了完全二叉树。所以，仅包含黑色节点的四叉树的高度，比包含相同节点个数的完全二叉树的高度还要小”-----这段话想表达的意思是仅包含黑色结点的四叉树的高度比相同结点个数的完全二叉树的高度小吗？那么这句话“从任意节点到可达的叶子节点的每个路径包含相同数目的黑色节点”想表达什么意思呢？是要把四叉树转换为满二叉树再去比较吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429483,"discussion_content":"第一个问题答案是yes    另外两个问的太笼统 没看懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542679152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40335,"user_name":"刘远通","can_delete":false,"product_type":"c1","uid":1253307,"ip_address":"","ucode":"4D3EE819E4B235","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/bb/c488d5db.jpg","comment_is_top":false,"comment_ctime":1542595127,"is_pvip":false,"replies":[{"id":"14678","content":"是的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542679227,"ip_address":"","comment_id":40335,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542595127","product_id":100017301,"comment_content":"每个节点到可达叶子节点的路径包含相同黑色节点  大概是为了保证四叉树是完全二叉<br>总之是比较整齐地往下生长","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429480,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542679227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":40333,"user_name":"刘远通","can_delete":false,"product_type":"c1","uid":1253307,"ip_address":"","ucode":"4D3EE819E4B235","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/bb/c488d5db.jpg","comment_is_top":false,"comment_ctime":1542594886,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542594886","product_id":100017301,"comment_content":"可以看一下红黑树的第四条规则<br><br>在给定的一个红黑树上增加新的节点 <br>就只能再加上一个红色和一个黑色 <br>而且要继续保持这个规则","like_count":0},{"had_liked":false,"id":40247,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1542585956,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1542585956","product_id":100017301,"comment_content":"链表、跳表、散列表、二叉查找树、AVL、红黑树","like_count":0},{"had_liked":false,"id":39981,"user_name":"牵手约定","can_delete":false,"product_type":"c1","uid":1249461,"ip_address":"","ucode":"01AF328FDDD38C","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/b5/0813608c.jpg","comment_is_top":false,"comment_ctime":1542427134,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542427134","product_id":100017301,"comment_content":"虽然不能理解其中的精华，可能是编程的时间很短，平时也没有考虑数据结构，但是，每一节都认真看。","like_count":0},{"had_liked":false,"id":39873,"user_name":"sketch2018","can_delete":false,"product_type":"c1","uid":1139528,"ip_address":"","ucode":"1022FB3C2670FF","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/48/4eafb603.jpg","comment_is_top":false,"comment_ctime":1542372908,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542372908","product_id":100017301,"comment_content":"讲到的动态数据结构除了红黑树外还有HashMap和跳表;<br>其中HashMap查找时间复杂度为O(1),但是其扩容耗时且负载因子较大时哈希冲突概率很高会导致时间复杂度退化;<br>跳表是在链表的基础上建立索引提高效率(时间复杂度logn)，需要消耗多余的空间存储索引","like_count":0},{"had_liked":false,"id":39854,"user_name":"绪扬IS未知数","can_delete":false,"product_type":"c1","uid":1111493,"ip_address":"","ucode":"D808563CC6DB07","user_header":"https://static001.geekbang.org/account/avatar/00/10/f5/c5/f963d791.jpg","comment_is_top":false,"comment_ctime":1542368766,"is_pvip":false,"replies":[{"id":"14494","content":"首先它得是二叉查找树 这个是前提。你拿一个无序的二叉树涂上颜色没什么意义啊。红黑树是动态数据结构。不停的有数据插入 删除。动态变化中保持平衡这是最核心的。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542589632,"ip_address":"","comment_id":39854,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542368766","product_id":100017301,"comment_content":"讲红黑树入门不说到二三四树都是耍流氓。<br>什么节点是黑，什么节点是红？<br>我弄一个无序的二叉树，不管里面的数字是什么，然后给它们涂上颜色，照样可以符合规定。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429259,"discussion_content":"首先它得是二叉查找树 这个是前提。你拿一个无序的二叉树涂上颜色没什么意义啊。红黑树是动态数据结构。不停的有数据插入 删除。动态变化中保持平衡这是最核心的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542589632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39783,"user_name":"Ricky","can_delete":false,"product_type":"c1","uid":1238256,"ip_address":"","ucode":"0B29C730CAD29C","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/f0/82281239.jpg","comment_is_top":false,"comment_ctime":1542356532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542356532","product_id":100017301,"comment_content":"散列表和跳表应该属于动态数据结构吧，它们都支持动态更新，插入和删除操作，跳表应该跟平衡二叉查找树差不多，只是实现比较简单，比较适合大规模数据，排序的场景，散列表应该更多适于数据查询场景，如果涉及到排序，可能需要借助跳表实现","like_count":0},{"had_liked":false,"id":39686,"user_name":"ALAN","can_delete":false,"product_type":"c1","uid":1240164,"ip_address":"","ucode":"70E3B1C730E63F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/64/7403c694.jpg","comment_is_top":false,"comment_ctime":1542335789,"is_pvip":false,"replies":[{"id":"14270","content":"下一节课会讲","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542348628,"ip_address":"","comment_id":39686,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542335789","product_id":100017301,"comment_content":"老师，红黑树删除两个红节点之间的黑节点后，应该如何处理？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429180,"discussion_content":"下一节课会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542348628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39646,"user_name":"跬行","can_delete":false,"product_type":"c1","uid":1238874,"ip_address":"","ucode":"0BB846566571A6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/5a/24ad29c8.jpg","comment_is_top":false,"comment_ctime":1542330846,"is_pvip":false,"replies":[{"id":"14178","content":"是的 多谢指出 马上改正","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542333663,"ip_address":"","comment_id":39646,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542330846","product_id":100017301,"comment_content":"红色节点删除下面的图片(上下两部分，下部分)是不是有一个错误，有四个连续的黑结点","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429157,"discussion_content":"是的 多谢指出 马上改正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542333663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":39615,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1542328749,"is_pvip":false,"replies":[{"id":"14179","content":"可达就是字面意思 可以到达。因为并不是所有的叶子节点它都能到达。所以这里加了可达两个字","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1542333789,"ip_address":"","comment_id":39615,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1542328749","product_id":100017301,"comment_content":"这里面的从该节点到可达的叶子节点，可达指的是可以回溯？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":429141,"discussion_content":"可达就是字面意思 可以到达。因为并不是所有的叶子节点它都能到达。所以这里加了可达两个字","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542333789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}