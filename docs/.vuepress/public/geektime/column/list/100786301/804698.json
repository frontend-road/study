{"id":804698,"title":"11｜Agent底层：带你拆解、实现一套Agent底层框架","content":"<p>你好，我是金伟。</p><p>经过上节课，我想你已经对Agent智能体的应用开发有了一定的了解。你有没有想过Coze这样的平台底层是如何实现的呢？</p><p>我把上节课的话茬留在了我们选择自研了一套营销Agent平台底层，那这节课，我就带你完全实现一遍Agent平台底层框架，对你了解完整的Agent平台架构非常有帮助。</p><p>我们先说最核心的第一部分，底层开发。</p><h2>底层开发</h2><p>先回顾一下我们上节课说的Agent和大型模型之间的代理关系。这个代理层构成了系统的核心部分。我们应该将这一万个Agent视为一个统一的Agent实体。这个统一的Agent可以通过提示词进行重新定义。本质上，它就是一个基于大型模型的聊天应用程序。</p><p>关键在于，我们需要一种机制，将我们的业务执行逻辑嵌入到聊天的过程中。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/b9/28417228f762c8c0652a105f70b9d9b9.png?wh=1920x1047\" alt=\"图片\"></p><p>有的人可能会想，让大模型直接调用我们的业务逻辑不就行了吗？从广义上来说，这样实现也没问题，只不过我们这里说的大模型指的是只有文本聊天能力的大模型。所以还需要一个“助理”角色代理执行。</p><h3>意图识别</h3><p>那怎么才能实现这个核心的代理层呢？我们先从一个简单的例子开始说。用过GPT的朋友可能都有下面的体验，当我们要求GPT基于互联网已有知识回答问题，它会怎么做呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/74/23/74bd708924b3dfc3535325db11e23723.jpg?wh=3536x2212\" alt=\"\"></p><p>你看，我问了一个问题，GPT搜索了7个网站，然后根据这些网站的内容做出了回答。但是显然大模型是不具备网络搜索能力的。那它是怎么做的呢？答案是我们提问里的 <code>请你先查询网络资料再回答我</code> 这个意图必须被识别出来，并改变原有流程，它才能做到执行搜索操作。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/db/b7/dbcf7e8d7b569f8e43ee1fbd3d31e3b7.png?wh=1920x1047\" alt=\"图片\"></p><p>当然，<code>请你先查询网络资料再回答我</code> 这句话还有别的表述方式，比如下面的这些。</p><pre><code class=\"language-plain\">请先通过网络搜索相关资料，然后再回答我的问题。\n先查阅一些网络资源，再给我详细解答。\n请先在网上找一些资料，然后再为我解答。\n先在互联网搜集相关信息，然后再回答我。\n请先查找网络上的相关内容，再来回答我的问题。\n请先从网上获取相关信息，然后再给出答案。\n先通过网络查询一下，再给我提供答案。\n请先在网上找到一些相关资料，再来回答我的问题。\n请先通过网络查询相关内容，然后再回答我。\n请先利用网络搜索相关资料，然后再给出解答。\n</code></pre><p>这也就引申出一个问题，就是<strong>意图识别</strong><strong>模块必须识别出所有的表述方式。</strong>还有一点需要注意，意图识别还需要具备上下文的识别能力。因为一个意图很可能隐藏在多次的上下文交互中。</p><p>当用户的搜索意图被识别之后，代理可以调起插件或工作流。你可以这么理解，大模型的插件能力和Agent平台的插件能力以及工作流没有本质区别，都是让大模型具备额外程序执行能力的一种方法。</p><p>比意图识别更重要的还有<strong>参数问题</strong>。比如上节课的营销AI，在助理聊天交互中，代理层需要根据聊天上下文识别出对应工作流的参数，就是公司名称。</p><p>那上面例子里的网络读取插件，输入参数是什么呢？你可以想想。</p><p><img src=\"https://static001.geekbang.org/resource/image/34/cc/34aa93a09c1d4249a17ece37cb35d0cc.png?wh=1920x1047\" alt=\"图片\"></p><p>我想你也注意到了，要实现这个Agent的底层，最核心的就是<strong>意图识别</strong>和<strong>参数识别</strong>。需要注意，这两个能力都是大模型具备的，我们实现的Agent底层也是用大模型来做<strong>意图识别</strong>和<strong>参数识别</strong>。</p><h3>Agent逆向分析</h3><p>为了更好地设计这个底层的架构，我在斑头雁平台上写了几个测试用的Agent，专门用于意图识别和参数识别的逆向分析实验。这对理解这两个模块至关重要，你一定要跟着我一步步来做。</p><p>下面是我基于Agent平台做的一个<strong>读取变量的工作流</strong>，看看它的具体工作流代码。</p><ul>\n<li><strong>工作流1：程序员测试（基于LLM实现）。</strong></li>\n</ul><pre><code class=\"language-plain\">提示词：把 {{message}} 里的变量名取出，没有就直接输出 \"123\" 字符串\n</code></pre><p>我们可以设计一些case，并测试这个Agent，理解Agent平台的代理模块是如何工作的。</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/57/b800e605029f0ab196476755b84f5757.png?wh=1920x1210\" alt=\"图片\"></p><p>第一个case里，工作流的输入是 <code>取变量名 a=1</code> 这句话，经过LLM的分析，输出的变量名是 <code>a</code>，最后助理给的回复是 <code>成功提取到的变量名为:a</code>。在第二个case里，我们没有输入变量名，但是工作流仍然可以根据上下文提取出刚才的变量名来。</p><p>OK，我们可以得出两个结论。一是工作流输出的 <code>a</code>  被返回给大模型重新组织语言，最后才返回给助理。二是代理模块将上下文一起交给了工作流，这样它才能准确识别之前的变量名。</p><p>下面通过另外一个工作流的测试，也可以印证这几个结论。</p><ul>\n<li><strong>工作流2：退款审批（基于Python实现）。</strong></li>\n</ul><pre><code class=\"language-plain\">if orderId == \"1\": \n  return '您的退换货申请已通过，钱款已按原路径退还'\nelse:\n  return '没有查询到'\n</code></pre><p>对于的case测试如下，你也可以好好分析一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/1b/87/1b388037f50d87c9119d9bd6ae29c587.png?wh=1920x1263\" alt=\"图片\"></p><p>注意看，case 2中助理的最终回复和我Python程序的输出 <code>您的退换货申请已通过，钱款已按原路径退还</code> 是不同的。因此我们可以得出结论，<strong>代理层只是参考工作流的输出，具体如何回复客户都是大模型决定的。</strong></p><p>这也正符合之前提到的：Agent只是一个公司的客服角色，它的职责是满足客户的需求，并负责沟通，工作流则像公司内部的部门，他们并不直接对外。</p><p>最后，我们回想一下上节课的Agent助理，可以配置的部分是不是只有助理提示词和工作流节点的输入输出参数呢？我想告诉你的是，<strong>这些配置就是用于让大模型做意图识别和参数识别的。</strong></p><p>下面是我做的Agent底层的架构流程图。</p><p><img src=\"https://static001.geekbang.org/resource/image/c7/3b/c7877834bd2de530befe4ea2e4bc2e3b.png?wh=1920x866\" alt=\"图片\"></p><p>我想这个流程图已经把整个Agent代理层的程序流程做得非常清楚了，你可以代入一次用户的提问好好看一下。</p><h3>技术实现</h3><p>最后，我们说技术实现。意图识别和参数识别的具体实现方法有两种，可以通过微调大模型实现，也可以通过提示词实现，思想都是想通的。</p><p>下面是一个Demo级别的核心架构代码演示，这个代码就是上述Agent底层架构的核心逻辑实现例子。这个Demo以一个用餐业务为例，分为提示词和核心代码两个部分。理解了这个例子，剩下的一万个Agent也就理解了。</p><p>首先是核心提示词。</p><pre><code class=\"language-plain\">现在有3个角色，sys 代表应用程序系统，user 代表用户，你的角色是一名餐厅服务员，你的目的是服务用户，请你根据上下文决定是否调用 sys应用程序系统。\n调用系统则输出 to_sys: 应用程序参数\n回复用户则输出 to_user: 回复的消息\n\n\n规则：\n1，要一句一句的和我沟通，每次只能选择和to_sys或to_user其中之一，我会代为转达和处理消息，并且用sys 或 user开头的消息回复你\n2，调用程序的具体参数要在上下文中确定，比如我们应用程序有个参数a，上下文里用户或系统没有提供，你就不能擅自决定a的具体数值，调用程序用json格式\n3，当我用sys：开头给你回复的时候，表示本次应用程序返回，你要结合这个返回信息继续和用户沟通，你直接用to_user和用户沟通，要注意影藏程序系统这个信息，让用户感知不到\n\n\n反例：\n1，类似下面的回复是错误的，错误原因是在消息里同时出现to_sys 和 to_user\n\"\"\"\nto_sys: {\n‘app’ : '点餐应用',\n'usernum' : 1,\n'caiming' : '包子',\n'cainum' : 3\n}\n\n\nto_user: 好的，三个包子已经为您下单了，稍等片刻就会上菜。是否还需要点其他菜品或者饮料呢？\n\"\"\"\n\n\n[应用程序列表如下]\n1，点餐应用，当用户点餐时调用，\n请你和用户沟通确定这些参数：用户人数，菜名（必填），数量（必填)\n输出json格式例子：{\n    ‘app’ : '点餐应用', #应用名字（必填）\n    'usernum' : 1,  #用户人数\n    'caiming' : '包子', #菜名\n    'cainum' : 5 #数量\n}\n2，菜单应用，在点餐之前调用，\n参数：无\n输出json格式例子：{\n    ‘app’ : '菜单应用', #应用名字（必填）\n}\n3，结账应用，当用户用完餐需要结账时调用，\n参数：无\n输出json格式例子：{\n    ‘app’ : '结账应用', #应用名字（必填）\n}\n\n\n接下来用to_user给用户开始第一条消息\n你的餐厅名字是: 成都小吃\n</code></pre><p>我们可分析一下这个核心提示词，有三个层次。</p><p>其一是定义角色，提示词里表明了代理、系统、用户三者的关系，让大模型根据上下文来决定具体的回复，这也就解决了意图识别的问题。其二是对 <code>sys</code> 类参数的限定提示词，让大模型按插件和工作流的参数格式来回答。其三是将应用的工作流和具体参数注入提示词，让大模型理解应用。</p><p>这段提示词的作用就是告诉大模型我们的具体场景以及助理的具体能力，将上下文交给它处理。需要注意的是，各个插件和工作流的参数都是大模型来组织的，我们给于引导即可。</p><p>和提示词对应的Demo程序代码如下。</p><pre><code class=\"language-plain\">import json\ndef deal_app(app, params):\n    print(\"&gt;&gt;&gt; \" + app)\n\n\n    if app == \"菜单应用\":\n        return '菜单 1包子 2饺子 3 可乐或雪碧'\n\n\n    if app == \"结账应用\":\n        return '一共消费100元'\n\n\n    if app == \"点餐应用\":\n        if 'caiming' not in params or  params['caiming'] == None:\n            return \"请先选择菜品和数量\"\n        if params['caiming'] == '面包':\n            return '面包卖完了'\n\n\n        return \"已下单\"\n\n\n    return \"没有这个应用\"\n\n\ndef deal_answer(answer):\n\n\n    if answer.find(\"to_user:\") &gt;= 0 and answer.find(\"to_sys:\") &gt;= 0:\n        print(answer)\n        return xf_ai('user', \"请不要同时回复to_user 和 to_sys, 两者只能选一个，也不要[等待系统回复]这样的说明\", \"sys:\")\n\n\n    if answer.find(\"to_sys:\") &gt;= 0 and answer.find(\"\\nsys:\") &gt;= 0:\n        print(answer)\n        return xf_ai('user', \"请不要同时回复to_sys 和 sys, 只回复to_sys的数据\", \"sys:\")\n\n\n    if answer.find(\"to_user:\") == 0:\n        return answer.replace(\"to_user:\", \"\")\n\n\n    if answer.find(\"to_sys:\") == 0:\n        # print(answer)\n        j = answer.replace(\"to_sys:\", \"\")\n        j = j.strip()\n        end = j.find(\"}\")\n        j = j[0:end+1]\n        print(j)\n        jj = json.loads(j)\n        app = jj['app']\n        s = deal_app(app, jj)\n        o = xf_ai('user', s, \"sys:请告诉用户：\")\n        return o\n    # print(answer)\n    return \"\"\ndef get_input_from_command_line():\n    \"\"\"\n    Get input string from command line using input function.\n    \"\"\"\n    input_string = input(\"用户: \")\n    return input_string\n\n\ndef out_user_message(s):\n    if s == False:\n        return\n\n\n    print('服务员：'  + s)\n    \n\n\nif __name__ == '__main__':\n\n\n    o = xf_ai('user', prompt)\n    out_user_message(o)\n\n\n    while True:\n        s = get_input_from_command_line()\n        if s  == 'quit':\n            exit()\n        o = xf_ai('user', s, \"user:\")\n        out_user_message(o)\n</code></pre><p>这个程序就是代理层的核心逻辑代码了。整体的思想就是围绕核心提示词构建处理流程，在一般情况下直接回答用户的问题，在工作流状态下调用工作流逻辑，根据返回信息再让模型组织语言回复用户，完成整个交互。</p><p>下面是它核心程序流程图。</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/2a/3cdac3cb473cf36d69c34dd5bba4432a.png?wh=1920x569\" alt=\"图片\"></p><p>千万不要小看这个提示词和底层Demo，实际上麻雀虽小，五脏俱全。我们整个系统都是在这个基础代码上构建的，你可以把这部分的实现单独作为一个实验来做，一定会对大模型开发有更深入的体会。</p><p>如果要更好地理解整套Agent系统，我想可以从我们最终的助理创建界面继续给你分析。</p><p><img src=\"https://static001.geekbang.org/resource/image/a9/61/a9f69141cf5d7dc70654fbac19901d61.png?wh=1627x1377\" alt=\"图片\"></p><p>我们的创建助理功能实际分为5步，每一步都必须完成，这是和Coze这类平台不同的，其中最重要的一步就是给每个助理配一个知识库。</p><h2>应用开发</h2><p>这里我还是会举一个具体的应用例子，因为我们的底层demo是以餐馆菜单为基础实现的，所以这里我们就继续扩展这个案例，开发一个黄焖鸡点餐大师。</p><h3>知识库插件</h3><p>那么显然，菜单数据是它的核心。实际上大部分应用都会用到数据库，这也是我们为什么给每个助理都配置知识库的原因。</p><p><img src=\"https://static001.geekbang.org/resource/image/71/ff/71efb752b804c9329974a454de621bff.png?wh=1581x1125\" alt=\"图片\"></p><p>要实现这套客户自助配置，如何跟现有系统对接呢？需要分为两部分。其一是数据层面的自助训练，其二是业务逻辑层面的工作流移植。</p><p>在数据层面，我们提供了知识库自助训练，这样每个客户都可以拥有一个自己定制化的小模型，保证数据的私有属性。</p><p><strong>以一个黄焖鸡餐馆菜单的数据为例，<strong><strong>我们</strong></strong>看一下私有知识库的搭建流程。</strong></p><p>第一步，将菜单数据整理成固定的输入格式，这一步比较简单。</p><pre><code class=\"language-plain\">{\n    \"1\": {\"name\": \"经典黄焖鸡\", \"description\": \"鸡肉鲜嫩，配以浓郁酱汁和土豆\", \"price\": \"12元\", \"category\": \"主菜\"},\n    \"2\": {\"name\": \"辣味黄焖鸡\", \"description\": \"经典黄焖鸡基础上加入辣椒调味\", \"price\": \"13元\", \"category\": \"主菜\"},\n    \"3\": {\"name\": \"香菇黄焖鸡\", \"description\": \"黄焖鸡加入香菇，风味独特\", \"price\": \"14元\", \"category\": \"主菜\"}\n}\n</code></pre><p>第二步，将菜单向量化，将类似 <code>item[\"description\"]</code> 这样的本字段转化为向量表示，具体伪代码如下。</p><pre><code class=\"language-plain\">from transformers import BertModel, BertTokenizer\nimport torch\n\n\n# 使用BERT模型\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\nmodel = BertModel.from_pretrained('bert-base-uncased')\n\n\ndef get_embedding(texts):\n    embeddings = []\n    for text in texts:\n        inputs = tokenizer(text, return_tensors='pt')\n        outputs = model(**inputs)\n        vector = outputs.last_hidden_state.mean(dim=1).detach().numpy()\n        embeddings.append(vector)\n    return embeddings\n\n\n# 读取数据并向量化\nwith open('huangmenji_menu.json', 'r') as f:\n    menu_data = json.loads(f.read())\n\n\nmenu_descriptions = [item[\"description\"] for item in menu_data.values()]\nmenu_embeddings = get_embedding(menu_descriptions)\n</code></pre><p>这一步核心是 <code>get_embedding(menu_descriptions)</code> 这个逻辑。它实现的是文本向量的转化，只有转化为向量数据格式才能在向量数据库做后续操作。</p><p>第三步，存储和读取向量数据库，这里以 <code>Milvus向量数据库</code> 为例，注意要将菜单信息和向量信息一起存储，具体伪代码如下。</p><pre><code class=\"language-plain\">from pymilvus import MilvusClient, FieldSchema, CollectionSchema, DataType, Collection\nimport numpy as np\n\n\n# 连接到Milvus\nclient = MilvusClient(uri=\"http://localhost:19530\", db_name=\"default\")\n\n\n# 定义集合schema\nfields = [\n    FieldSchema(name=\"id\", dtype=DataType.INT64, is_primary=True, auto_id=False),\n    FieldSchema(name=\"name\", dtype=DataType.VARCHAR, max_length=100),\n    FieldSchema(name=\"description\", dtype=DataType.VARCHAR, max_length=1000),\n    FieldSchema(name=\"embedding\", dtype=DataType.FLOAT_VECTOR, dim=768)\n]\nschema = CollectionSchema(fields, \"黄焖鸡餐馆菜单\")\nindex_params = client.prepare_index_params()\nindex_params.add_index(\n    field_name=\"embedding\",\n    index_type=\"IVF_FLAT\",\n    metric_type=\"IP\",\n    params={\"nlist\": 128}\n)\n\n\n# 创建集合\ncollection_name = \"huangmenji_menu\"\nclient.create_collection(\n    collection_name=collection_name,\n    schema=schema,\n    index_params=index_params\n)\n\n\n# 插入数据\nentities = [\n    {\"id\": int(item_id),\n     \"name\": menu_data[item_id][\"name\"],\n     \"description\": menu_data[item_id][\"description\"],\n     \"embedding\": menu_embeddings[int(item_id)-1].tolist()}\n    for item_id in menu_data\n]\nclient.insert(collection_name=collection_name, data=entities)\n</code></pre><p>整个模块最核心的一行代码其实就是这句 <code>FieldSchema(name=\"embedding\", dtype=DataType.FLOAT_VECTOR, dim=768)</code>。你可以把它理解为传统数据库里的索引。加上这个字段后，后续工作流中需要用到菜单时都可以用向量查询，具体查询类似下面的伪代码。</p><pre><code class=\"language-plain\"># 查询向量化输入\nquery = \"我喜欢吃辣，有什么菜品推荐\"\nquery_embedding = get_embedding([query])\n\n\n# 搜索相似的菜单项\nres = client.search(\n    collection_name=collection_name,\n    data=query_embedding,\n    limit=3,\n    search_params={\"metric_type\": \"IP\", \"params\": {}},\n    output_fields=['name', 'description']\n)\n\n\n# 显示结果\nfor result in res:\n    print(f\"Found menu item: {result['name']} - {result['description']}\")\n</code></pre><p>注意，用户的输入例如 <code>“喜欢辣味的菜品”</code> 可能每个人表述不一样。但是同样需求下，通过向量查询就可以找到相似的菜品信息，这正是向量数据库的核心作用。</p><p>如果单独针对一个应用开发这样一个知识库是没问题的，但是我们要做的是让所有助理可以复用一套知识库逻辑，因此在实战中，我们会针对这类逻辑开发一个统一的插件。</p><p>下面是这个知识库插件的伪代码表示。</p><pre><code class=\"language-plain\"># AI知识库插件\ndef plugin_ai_knowledge_base_query(query: str, knowledge_base_name: str, field: str) -&gt; str:\n    \"\"\"\n    输入：\n        query (str) - 用户查询的问题或主题\n        knowledge_base_name (str) - 知识库的名称\n        field (str) - 需要获取的具体字段名称\n    输出：str - 从知识库中获取的相关信息\n    \"\"\"\n    # 调用原系统函数获取知识库信息\n    return original_system_get_knowledge_base_info(query, knowledge_base_name, field)\n\n\n</code></pre><p>要注意，这里的伪代码已经提供了核心的逻辑，如果你想做这部分实验，完整的代码可以在课后交流群资料中领取。</p><p>类似上节课提到的公司信息功能、邮件发送功能、文章生成功能，在营销场景下场景的功能有几十个，我们将原有功能全部转换为了内部Agent插件。</p><h3>黄焖鸡点餐大师</h3><p>其实，点餐大师的应用逻辑就是工作流的编排逻辑，只不过在我们的营销Agent项目里，没有实现拖拽开发，而是通过一个简单的yaml配置文件来编排工作流。</p><p>先回顾上一节课的工作流编排逻辑的例子。</p><p><img src=\"https://static001.geekbang.org/resource/image/50/4b/50a6f2341a1a6af80b6871ec883e544b.png?wh=1920x354\" alt=\"图片\"></p><p>以黄焖鸡餐馆的菜单推荐需求为例，我们开发一个菜单推荐工作流，用来给门店点餐助理扩展能力。你只需要在yaml配置文件里将工作的前后关系和输入输出配置即可，下面是对应的伪代码。</p><pre><code class=\"language-plain\">version: '1.0'\nname: '菜单推荐工作流'\ndescription: '一个基于用户喜好使用AI知识库和自定义逻辑推荐菜品的工作流。'\nsteps:\n  - id: 'input_step'\n    type: 'input'\n    description: '获取用户对菜品的喜好'\n    input:\n      description: '用户输入的菜品喜好'\n      example: '我喜欢吃辣，有什么菜品推荐'\n    output:\n      name: 'user_preference'\n      type: 'str'\n\n\n  - id: 'query_knowledge_base'\n    type: 'plugin'\n    plugin: 'plugin_ai_knowledge_base_query'\n    description: '根据用户喜好查询AI知识库中的菜品推荐'\n    inputs:\n      query: '{user_preference}'\n      knowledge_base_name: 'huangmenji_menu'\n      # 在这里具体化字段的选择\n      field: 'embedding'  # 使用向量数据库的嵌入向量字段进行查询\n    outputs:\n      name: 'dish_recommendations'\n      type: 'str'\n\n\n  - id: 'custom_logic_filter_spicy'\n    type: 'custom'\n    function: 'filter_spicy_dishes'\n    description: '过滤推荐的菜品，仅保留辣味菜品'\n    inputs:\n      recommendations: '{dish_recommendations}'\n    outputs:\n      name: 'spicy_dish_recommendations'\n      type: 'list'\n\n\n  - id: 'output_step'\n    type: 'output'\n    description: '向用户提供最终的辣味菜品推荐列表'\n    inputs:\n      spicy_dishes: '{spicy_dish_recommendations}'\n    output:\n      description: '菜品推荐列表'\n      example: ['麻婆豆腐', '辣子鸡', '四川火锅']\n</code></pre><p>在这个工作流配置中，<code>query_knowledge_base</code> 是刚才说的插件能力，在用户上传自己的菜单之后可以直接使用，<code>filter_spicy_dishes</code> 则是我们内部针对菜单这个行业场景开发的菜品推荐逻辑，它可以是基于LLM开发的。</p><p>看到这个编排工作流的yaml配置，你可能意识到它没办法和我们的Agent底层Demo直接对接到一起。实际上我们还需要一个统一的、基于yaml配置调度具体工作流逻辑的框架。你也可以自己想一想这部分的逻辑。如果理解了Agent底层的逻辑，这部分相对比较简单，具体代码可以在课后交流群领取。</p><p>这里只是借助应用的配置更好地说明Agent底层是怎么工作的。</p><p>好，我再来说一个更进一步的配置例子，黄焖鸡营销大师应用。它能根据客户输入的用户标签，自动筛选和发送营销短信。实际上，这个工作流的开发更加简单，只需要通过配置组合现有的插件能力就可以完成，不需要编写代码。其配置文件的伪代码如下。</p><pre><code class=\"language-plain\">version: '1.0'\nname: '客户营销工作流'\ndescription: '根据用户标签和营销需求进行个性化营销的工作流。'\nsteps:\n  - id: 'input_step'\n    type: 'input'\n    description: '获取用户标签和营销需求'\n    input:\n      description: '用户输入的标签和营销需求'\n      example: \n        tag: '潜在客户'\n        marketing_need: '推广新产品'\n    output:\n      name: 'user_tag'\n      type: 'str'\n      name: 'marketing_need'\n      type: 'str'\n\n\n  - id: 'get_user_info'\n    type: 'plugin'\n    plugin: 'plugin_user_info_by_tag_get'\n    description: '根据用户标签获取用户详细信息'\n    inputs:\n      tag: '{user_tag}'\n    outputs:\n      name: 'user_info'\n      type: 'dict'\n\n\n  - id: 'generate_marketing_article'\n    type: 'plugin'\n    plugin: 'plugin_marketing_article_generate'\n    description: '生成适合目标用户的营销文章'\n    inputs:\n      topic: '{marketing_need}'\n      audience: '{user_info[preferences]}'\n    outputs:\n      name: 'marketing_article'\n      type: 'str'\n\n\n  - id: 'send_sms'\n    type: 'plugin'\n    plugin: 'plugin_sms_send'\n    description: '发送营销短信给用户'\n    inputs:\n      mobile: '{user_info[mobile]}'\n      subject: '最新产品推荐'\n      body: '{marketing_article}'\n    outputs:\n      name: 'sms_status'\n      type: 'bool'\n\n\n  - id: 'output_step'\n    type: 'output'\n    description: '输出短信发送状态'\n    inputs:\n      sms_status: '{sms_status}'\n    output:\n      description: '短信发送是否成功'\n      example: true\n</code></pre><p>需要注意，这里的 <code>plugin_sms_send</code> 也是原营销平台的短信功能直接移植的。插件能力足够多的情况下，我们开发工作流的效率会很高。</p><h2>小结</h2><p>这节课，我们分析了Agent平台的操作逻辑，设计并实现了一套自有的Agent代理层核心。基于这套核心，我们把原有营销平台的功能全部转化开发了Agent平台的插件能力。</p><p>实现营销Agent平台的核心是实现Agent代理层的逻辑，而Agent代理层的核心有两点，一是基于上下文的用户意图识别，二是调用自定义的工作流完成业务逻辑。而最好的上下文意图识别的方案就是大模型。</p><h2>思考题</h2><p>如何通过大模型微调让大模型识别到插件能力？相比于提示词的方案，这种方案有什么优势和劣势？</p><p>欢迎你在留言区和我交流。如果觉得有所收获，也可以把课程分享给更多的朋友一起学习。我们下节课见！</p><p><a href=\"https://jsj.top/f/hm26hN\">&gt;&gt;戳此加入课程交流群</a></p>","comments":[{"had_liked":false,"id":394714,"user_name":"连瑞龙","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"河北","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1727852142,"is_pvip":false,"replies":[{"id":143425,"content":"👍👍👍","user_name":"作者回复","user_name_real":"编辑","uid":1763517,"ctime":1729077086,"ip_address":"北京","comment_id":394714,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100786301,"comment_content":"Agent 代理层的核心有两点，一是基于上下文的用户意图识别，二是调用自定义的工作流完成业务逻辑。而最好的上下文意图识别的方案就是大模型。","like_count":1,"discussions":[{"author":{"id":1763517,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e8/bd/62169942.jpg","nickname":"金伟","note":"","ucode":"C0393789836F21","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652504,"discussion_content":"👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1729077086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394071,"user_name":"研发账号","can_delete":false,"product_type":"c1","uid":3933917,"ip_address":"浙江","ucode":"A18FD0975E3E0C","user_header":"","comment_is_top":false,"comment_ctime":1725709555,"is_pvip":false,"replies":[{"id":143432,"content":"coze好一些","user_name":"作者回复","user_name_real":"编辑","uid":1763517,"ctime":1729077277,"ip_address":"北京","comment_id":394071,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100786301,"comment_content":"老师，跟Coze雷同的fastgpt，熟悉吗，哪个更好用","like_count":1,"discussions":[{"author":{"id":1763517,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e8/bd/62169942.jpg","nickname":"金伟","note":"","ucode":"C0393789836F21","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652511,"discussion_content":"coze好一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1729077277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004480,"avatar":"","nickname":"Jason Zhang","note":"","ucode":"81DA53D1F0CE5F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650907,"discussion_content":"Coze更简单，插件更丰富，fastgpt可以私有化部署。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1725859186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394293,"user_name":"梁少杰","can_delete":false,"product_type":"c1","uid":1384542,"ip_address":"上海","ucode":"458D88E3720419","user_header":"https://static001.geekbang.org/account/avatar/00/15/20/5e/c9981e3b.jpg","comment_is_top":false,"comment_ctime":1726371531,"is_pvip":false,"replies":[{"id":143438,"content":"我给你找一下","user_name":"作者回复","user_name_real":"编辑","uid":1763517,"ctime":1729077627,"ip_address":"北京","comment_id":394293,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100786301,"comment_content":"黄焖鸡点餐大师  这部分的代码，在资料中没有找到","like_count":0,"discussions":[{"author":{"id":1763517,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/e8/bd/62169942.jpg","nickname":"金伟","note":"","ucode":"C0393789836F21","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652517,"discussion_content":"我给你找一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1729077627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394472,"user_name":"石云升","can_delete":false,"product_type":"c1","uid":1024195,"ip_address":"广东","ucode":"78F1DD33EFD000","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/c3/c5db35df.jpg","comment_is_top":false,"comment_ctime":1726901099,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":1,"score":2,"product_id":100786301,"comment_content":"微调的优势:\n\n更好的整合性: 微调后的模型可以更自然地将插件能力融入到自身的知识和推理过程中,而不是单纯依赖提示词触发。\n性能提升: 经过微调,模型可以更准确地判断何时使用插件,减少不必要的调用,提高效率。\n上下文理解: 微调模型可以基于更广泛的上下文来决定是否使用插件,而不仅仅依赖特定的触发词。\n灵活性: 可以根据具体应用场景定制模型的插件使用行为。\n\n微调的劣势:\n\n成本高: 微调过程需要大量的计算资源和时间,相比简单的提示词方案成本更高。\n复杂性: 需要设计合适的微调数据集和训练策略,这个过程比编写提示词更为复杂。\n可能的过拟合: 如果微调不当,模型可能过度依赖特定插件或在不恰当的场景使用插件。\n更新困难: 当需要添加或修改插件时,可能需要重新进行微调,而提示词方案则更容易更新。\n\n相比之下,提示词方案的主要优势在于实施简单、成本低、易于更新。但它可能缺乏灵活性,且在复杂场景下的表现可能不如经过微调的模型。","like_count":3}]}