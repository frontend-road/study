{"id":14117,"title":"08 | container包中的那些容器","content":"<p>我们在上次讨论了数组和切片，当我们提到数组的时候，往往会想起链表。那么Go语言的链表是什么样的呢？</p><p>Go语言的链表实现在标准库的<code>container/list</code>代码包中。这个代码包中有两个公开的程序实体——<code>List</code>和<code>Element</code>，List实现了一个双向链表（以下简称链表），而Element则代表了链表中元素的结构。</p><p><strong>那么，我今天的问题是：可以把自己生成的<code>Element</code>类型值传给链表吗？</strong></p><p>我们在这里用到了<code>List</code>的四种方法。</p><p><code>MoveBefore</code>方法和<code>MoveAfter</code>方法，它们分别用于把给定的元素移动到另一个元素的前面和后面。</p><p><code>MoveToFront</code>方法和<code>MoveToBack</code>方法，分别用于把给定的元素移动到链表的最前端和最后端。</p><p>在这些方法中，“给定的元素”都是<code>*Element</code>类型的，<code>*Element</code>类型是<code>Element</code>类型的指针类型，<code>*Element</code>的值就是元素的指针。</p><pre><code>func (l *List) MoveBefore(e, mark *Element)\nfunc (l *List) MoveAfter(e, mark *Element)\n\nfunc (l *List) MoveToFront(e *Element)\nfunc (l *List) MoveToBack(e *Element)\n</code></pre><p>具体问题是，如果我们自己生成这样的值，然后把它作为“给定的元素”传给链表的方法，那么会发生什么？链表会接受它吗？</p><p>这里，给出一个<strong>典型回答</strong>：不会接受，这些方法将不会对链表做出任何改动。因为我们自己生成的<code>Element</code>值并不在链表中，所以也就谈不上“在链表中移动元素”。更何况链表不允许我们把自己生成的<code>Element</code>值插入其中。</p><!-- [[[read_end]]] --><h2>问题解析</h2><p>在<code>List</code>包含的方法中，用于插入新元素的那些方法都只接受<code>interface{}</code>类型的值。这些方法在内部会使用<code>Element</code>值，包装接收到的新元素。</p><p>这样做正是为了避免直接使用我们自己生成的元素，主要原因是避免链表的内部关联，遭到外界破坏，这对于链表本身以及我们这些使用者来说都是有益的。</p><p><code>List</code>的方法还有下面这几种：</p><p><code>Front</code>和<code>Back</code>方法分别用于获取链表中最前端和最后端的元素，<br>\n<code>InsertBefore</code>和<code>InsertAfter</code>方法分别用于在指定的元素之前和之后插入新元素，<code>PushFront</code>和<code>PushBack</code>方法则分别用于在链表的最前端和最后端插入新元素。</p><pre><code>func (l *List) Front() *Element\nfunc (l *List) Back() *Element\n\nfunc (l *List) InsertBefore(v interface{}, mark *Element) *Element\nfunc (l *List) InsertAfter(v interface{}, mark *Element) *Element\n\nfunc (l *List) PushFront(v interface{}) *Element\nfunc (l *List) PushBack(v interface{}) *Element\n</code></pre><p>这些方法都会把一个<code>Element</code>值的指针作为结果返回，它们就是链表留给我们的安全“接口”。拿到这些内部元素的指针，我们就可以去调用前面提到的用于移动元素的方法了。</p><p><strong>知识扩展</strong></p><p><strong>1. 问题：为什么链表可以做到开箱即用？</strong></p><p><code>List</code>和<code>Element</code>都是结构体类型。结构体类型有一个特点，那就是它们的零值都会是拥有特定结构，但是没有任何定制化内容的值，相当于一个空壳。值中的字段也都会被分别赋予各自类型的零值。</p><blockquote>\n<p><span class=\"reference\">广义来讲，所谓的零值就是只做了声明，但还未做初始化的变量被给予的缺省值。每个类型的零值都会依据该类型的特性而被设定。</span></p>\n<p><span class=\"reference\">比如，经过语句<code>var a [2]int</code>声明的变量<code>a</code>的值，将会是一个包含了两个<code>0</code>的整数数组。又比如，经过语句<code>var s []int</code>声明的变量<code>s</code>的值将会是一个<code>[]int</code>类型的、值为<code>nil</code>的切片。</span></p>\n</blockquote><p>那么经过语句<code>var l list.List</code>声明的变量<code>l</code>的值将会是什么呢？[1] 这个零值将会是一个长度为<code>0</code>的链表。这个链表持有的根元素也将会是一个空壳，其中只会包含缺省的内容。那这样的链表我们可以直接拿来使用吗？</p><p>答案是，可以的。这被称为“开箱即用”。Go语言标准库中很多结构体类型的程序实体都做到了开箱即用。这也是在编写可供别人使用的代码包（或者说程序库）时，我们推荐遵循的最佳实践之一。那么，语句<code>var l list.List</code>声明的链表<code>l</code>可以直接使用，这是怎么做到的呢？</p><p>关键在于它的“延迟初始化”机制。</p><p>所谓的<strong>延迟初始化</strong>，你可以理解为把初始化操作延后，仅在实际需要的时候才进行。延迟初始化的优点在于“延后”，它可以分散初始化操作带来的计算量和存储空间消耗。</p><p>例如，如果我们需要集中声明非常多的大容量切片的话，那么那时的CPU和内存空间的使用量肯定都会一个激增，并且只有设法让其中的切片及其底层数组被回收，内存使用量才会有所降低。</p><p>如果数组是可以被延迟初始化的，那么计算量和存储空间的压力就可以被分散到实际使用它们的时候。这些数组被实际使用的时间越分散，延迟初始化带来的优势就会越明显。</p><blockquote>\n<p><span class=\"reference\">实际上，Go语言的切片就起到了延迟初始化其底层数组的作用，你可以想一想为什么会这么说的理由。</span></p>\n<p><span class=\"reference\">延迟初始化的缺点恰恰也在于“延后”。你可以想象一下，如果我在调用链表的每个方法的时候，它们都需要先去判断链表是否已经被初始化，那这也会是一个计算量上的浪费。在这些方法被非常频繁地调用的情况下，这种浪费的影响就开始显现了，程序的性能将会降低。</span></p>\n</blockquote><p>在这里的链表实现中，一些方法是无需对是否初始化做判断的。比如<code>Front</code>方法和<code>Back</code>方法，一旦发现链表的长度为<code>0</code>,直接返回<code>nil</code>就好了。</p><p>又比如，在用于删除元素、移动元素，以及一些用于插入元素的方法中，只要判断一下传入的元素中指向所属链表的指针，是否与当前链表的指针相等就可以了。</p><p>如果不相等，就一定说明传入的元素不是这个链表中的，后续的操作就不用做了。反之，就一定说明这个链表已经被初始化了。</p><p>原因在于，链表的<code>PushFront</code>方法、<code>PushBack</code>方法、<code>PushBackList</code>方法以及<code>PushFrontList</code>方法总会先判断链表的状态，并在必要时进行初始化，这就是延迟初始化。</p><p>而且，我们在向一个空的链表中添加新元素的时候，肯定会调用这四个方法中的一个，这时新元素中指向所属链表的指针，一定会被设定为当前链表的指针。所以，指针相等是链表已经初始化的充分必要条件。</p><p>明白了吗？<code>List</code>利用了自身以及<code>Element</code>在结构上的特点，巧妙地平衡了延迟初始化的优缺点，使得链表可以开箱即用，并且在性能上可以达到最优。</p><p><strong>问题 2：<code>Ring</code>与<code>List</code>的区别在哪儿？</strong></p><p><code>container/ring</code>包中的<code>Ring</code>类型实现的是一个循环链表，也就是我们俗称的环。其实<code>List</code>在内部就是一个循环链表。它的根元素永远不会持有任何实际的元素值，而该元素的存在就是为了连接这个循环链表的首尾两端。</p><p>所以也可以说，<code>List</code>的零值是一个只包含了根元素，但不包含任何实际元素值的空链表。那么，既然<code>Ring</code>和<code>List</code>在本质上都是循环链表，那它们到底有什么不同呢？</p><p>最主要的不同有下面几种。</p><ol>\n<li><code>Ring</code>类型的数据结构仅由它自身即可代表，而<code>List</code>类型则需要由它以及<code>Element</code>类型联合表示。这是表示方式上的不同，也是结构复杂度上的不同。</li>\n<li>一个<code>Ring</code>类型的值严格来讲，只代表了其所属的循环链表中的一个元素，而一个<code>List</code>类型的值则代表了一个完整的链表。这是表示维度上的不同。</li>\n<li>在创建并初始化一个<code>Ring</code>值的时候，我们可以指定它包含的元素的数量，但是对于一个<code>List</code>值来说却不能这样做（也没有必要这样做）。循环链表一旦被创建，其长度是不可变的。这是两个代码包中的<code>New</code>函数在功能上的不同，也是两个类型在初始化值方面的第一个不同。</li>\n<li>仅通过<code>var r ring.Ring</code>语句声明的<code>r</code>将会是一个长度为<code>1</code>的循环链表，而<code>List</code>类型的零值则是一个长度为<code>0</code>的链表。别忘了<code>List</code>中的根元素不会持有实际元素值，因此计算长度时不会包含它。这是两个类型在初始化值方面的第二个不同。</li>\n<li><code>Ring</code>值的<code>Len</code>方法的算法复杂度是O(N)的，而<code>List</code>值的<code>Len</code>方法的算法复杂度则是O(1)的。这是两者在性能方面最显而易见的差别。</li>\n</ol><p>其他的不同基本上都是方法方面的了。比如，循环链表也有用于插入、移动或删除元素的方法，不过用起来都显得更抽象一些，等等。</p><p><strong>总结</strong></p><p>我们今天主要讨论了<code>container/list</code>包中的链表实现。我们详细讲解了链表的一些主要的使用技巧和实现特点。由于此链表实现在内部就是一个循环链表，所以我们还把它与<code>container/ring</code>包中的循环链表实现做了一番比较，包括结构、初始化以及性能方面。</p><p><strong>思考题</strong></p><ol>\n<li><code>container/ring</code>包中的循环链表的适用场景都有哪些？</li>\n<li>你使用过<code>container/heap</code>包中的堆吗？它的适用场景又有哪些呢？</li>\n</ol><p>在这里，我们先不求对它们的实现了如指掌，能用对、用好才是我们进阶之前的第一步。好了，感谢你的收听，我们下次再见。</p><hr></hr><p>[1]：<code>List</code>这个结构体类型有两个字段，一个是<code>Element</code>类型的字段<code>root</code>，另一个是<code>int</code>类型的字段<code>len</code>。顾名思义，前者代表的就是那个根元素，而后者用于存储链表的长度。注意，它们都是包级私有的，也就是说使用者无法查看和修改它们。</p><p>像前面那样声明的<code>l</code>，其字段<code>root</code>和<code>len</code>都会被赋予相应的零值。<code>len</code>的零值是<code>0</code>，正好可以表明该链表还未包含任何元素。由于<code>root</code>是<code>Element</code>类型的，所以它的零值就是该类型的空壳，用字面量表示的话就是<code>Element{}</code>。</p><p><code>Element</code>类型包含了几个包级私有的字段，分别用于存储前一个元素、后一个元素以及所属链表的指针值。另外还有一个名叫<code>Value</code>的公开的字段，该字段的作用就是持有元素的实际值，它是<code>interface{}</code>类型的。在<code>Element</code>类型的零值中，这些字段的值都会是<code>nil</code>。</p><h2>参考阅读</h2><h3>切片与数组的比较</h3><p>切片本身有着占用内存少和创建便捷等特点，但它的本质上还是数组。切片的一大好处是可以让我们通过窗口快速地定位并获取，或者修改底层数组中的元素。</p><p>不过，当我们想删除切片中的元素的时候就没那么简单了。元素复制一般是免不了的，就算只删除一个元素，有时也会造成大量元素的移动。这时还要注意空出的元素槽位的“清空”，否则很可能会造成内存泄漏。</p><p>另一方面，在切片被频繁“扩容”的情况下，新的底层数组会不断产生，这时内存分配的量以及元素复制的次数可能就很可观了，这肯定会对程序的性能产生负面的影响。</p><p>尤其是当我们没有一个合理、有效的”缩容“策略的时候，旧的底层数组无法被回收，新的底层数组中也会有大量无用的元素槽位。过度的内存浪费不但会降低程序的性能，还可能会使内存溢出并导致程序崩溃。</p><p>由此可见，正确地使用切片是多么的重要。不过，一个更重要的事实是，任何数据结构都不是银弹。不是吗？数组的自身特点和适用场景都非常鲜明，切片也是一样。它们都是Go语言原生的数据结构，使用起来也都很方便.不过，你的集合类工具箱中不应该只有它们。这就是我们使用链表的原因。</p><p>不过，对比来看，一个链表所占用的内存空间，往往要比包含相同元素的数组所占内存大得多。这是由于链表的元素并不是连续存储的，所以相邻的元素之间需要互相保存对方的指针。不但如此，每个元素还要存有它所属链表的指针。</p><p>有了这些关联，链表的结构反倒更简单了。它只持有头部元素（或称为根元素）基本上就可以了。当然了，为了防止不必要的遍历和计算，链表的长度记录在内也是必须的。</p><p><a href=\"https://github.com/hyper0x/Golang_Puzzlers\">戳此查看Go语言专栏文章配套详细代码。</a></p><p></p>","neighbors":{"left":{"article_title":"07 | 数组和切片","id":14106},"right":{"article_title":"09 | 字典的操作和约束","id":14123}},"comments":[{"had_liked":false,"id":22192,"user_name":"李皮皮皮皮皮","can_delete":false,"product_type":"c1","uid":1200281,"ip_address":"","ucode":"3BF1DEE4A12359","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/99/44378317.jpg","comment_is_top":false,"comment_ctime":1535543734,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"521226586550","product_id":100013101,"comment_content":"1.list可以作为queue和<br>stack的基础数据结构<br>2.ring可以用来保存固定数量的元素，例如保存最近100条日志，用户最近10次操作<br>3.heap可以用来排序。游戏编程中是一种高效的定时器实现方案","like_count":122,"discussions":[{"author":{"id":2875604,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/e0/d4/63647ae9.jpg","nickname":"符佳成fjc","note":"","ucode":"DAC86F7BBF8085","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541718,"discussion_content":"还可以用来做LeetCode","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1640529456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1075617,"avatar":"https://static001.geekbang.org/account/avatar/00/10/69/a1/aacc7d6e.jpg","nickname":"xuehp","note":"","ucode":"E81ACD1516044D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548885,"discussion_content":"冲着heap来的，结果竞没讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643434551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1199004,"avatar":"https://static001.geekbang.org/account/avatar/00/12/4b/9c/882d6452.jpg","nickname":"梦里追逐","note":"","ucode":"719C41D9331439","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341423,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610418058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44129,"user_name":"陌上人 .","can_delete":false,"product_type":"c1","uid":1207075,"ip_address":"","ucode":"02D0044843172B","user_header":"https://static001.geekbang.org/account/avatar/00/12/6b/23/73f18275.jpg","comment_is_top":false,"comment_ctime":1543371781,"is_pvip":false,"discussion_count":9,"race_medal":0,"score":"439630035973","product_id":100013101,"comment_content":"老师,之后的课可不可以多加一些图形解释,原理性的知识只用文字确实有些晦涩难懂","like_count":103,"discussions":[{"author":{"id":2247619,"avatar":"","nickname":"Geek_75b890","note":"","ucode":"640BC2FB0749D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326062,"discussion_content":"这个老师完全不会讲课.可能自己确实懂,不会教...我买的最差的课程  完全没有图,就他自己听得懂,垃圾课","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1605510219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1728183,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Iofqk26ibmjFxAZKRibgUmwf6OGGA3IujQ9lnbXrApCiaYmR48GrdkljG0t9XdKnO64rb3LBcSWJIZsEokbxiauSOQ/132","nickname":"kylin","note":"","ucode":"42003EDE4EC9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294480,"discussion_content":"极客时间到目前为止看的文字最差的课。。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1595901326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1142265,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6d/f9/7431e82e.jpg","nickname":"24小菜鸟","note":"","ucode":"02D6127A2DE3C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1728183,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Iofqk26ibmjFxAZKRibgUmwf6OGGA3IujQ9lnbXrApCiaYmR48GrdkljG0t9XdKnO64rb3LBcSWJIZsEokbxiauSOQ/132","nickname":"kylin","note":"","ucode":"42003EDE4EC9AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369048,"discussion_content":"赞同\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618912267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":294480,"ip_address":""},"score":369048,"extra":""},{"author":{"id":1339168,"avatar":"https://static001.geekbang.org/account/avatar/00/14/6f/20/53cb569d.jpg","nickname":"daydreamer","note":"","ucode":"375D9D4F9A7AF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1728183,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Iofqk26ibmjFxAZKRibgUmwf6OGGA3IujQ9lnbXrApCiaYmR48GrdkljG0t9XdKnO64rb3LBcSWJIZsEokbxiauSOQ/132","nickname":"kylin","note":"","ucode":"42003EDE4EC9AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383067,"discussion_content":"是，明明不难的概念硬生生绕得不知所云，不如直接看书","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625876609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":294480,"ip_address":""},"score":383067,"extra":""}]},{"author":{"id":2440650,"avatar":"","nickname":"Geek_aa8f8d","note":"","ucode":"82731D59638C0A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349160,"discussion_content":"确实不能这样讲课，讲课的目的是让深入的知识有种豁然开朗的感觉，看这个课越看越迷糊。只是知识点的堆砌，像解决问题的手册，而不是教程。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1612941219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1726839,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/59/77/33b0b990.jpg","nickname":"jeremie.liu","note":"","ucode":"6A277B7DA20295","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378415,"discussion_content":"看不懂的话...就去学基础课把,,,核心内容对你们要求太高了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623214832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1078160,"avatar":"https://static001.geekbang.org/account/avatar/00/10/73/90/9118f46d.jpg","nickname":"chenhz","note":"","ucode":"485420EA3282D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34760,"discussion_content":"可以自己读源码、画图。$GOROOT/src/container/list/list.go","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571219833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2273620,"avatar":"https://static001.geekbang.org/account/avatar/00/22/b1/54/6d663b95.jpg","nickname":"瓜牛","note":"","ucode":"5EB7D2F4400A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1078160,"avatar":"https://static001.geekbang.org/account/avatar/00/10/73/90/9118f46d.jpg","nickname":"chenhz","note":"","ucode":"485420EA3282D4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319838,"discussion_content":"那我花钱干嘛？来听这一堆啰嗦的废话的？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1604136393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":34760,"ip_address":""},"score":319838,"extra":""}]},{"author":{"id":1158564,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ad/a4/8c5a8df4.jpg","nickname":"steven_Xu","note":"","ucode":"7411D2BE21C2B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358286,"discussion_content":"哈哈哈哈，楼上无能狂怒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615960563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184409,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1583309263,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"190561870287","product_id":100013101,"comment_content":"关于 container包中的链表list 和环ring的知识总结<br>按我的思考<br>1. 为什么go语言会出现list这个包<br>    首先一个语言或者新技术的出现肯定是为了解决一些疑难杂症 在go语言中数组的特点非常鲜明 固定不可变 访问方便,但是如果不适合动态增长，所以出现了slice切片 切片是对数组的一层封装为了解决数组动态扩容问题， 但是实际上底层依赖的还是数组，但是问题来了 如果slice切片 在添加或者删除元素的时候如果没一个好的策略 扩容或者缩容过后旧的切片没有释放 则会造成内存泄漏 就是c语言的malloc 久而久之 内存越来越少 程序就会崩溃, 而List的出现就是为了解决动态扩容或者缩容的后遗症 因为依赖指针这个东西 所以删除和增加都非常方便<br>2. 延迟初始化机制<br>   延迟初始化机制 主要是为了解决像数组这种 声明的时候就分配了内存空间的问题，有的时候我们只需要声明，但还不需要使用它，这个时候没有必要分配内存空间，再如文中提到的 在同一时刻声明大量的内存空间的话 那么cpu的使用和内存空间的使用将会激增<br>   所以我们需要延迟初始化机制(设计模式中的单例模式也提到了延迟初始化问题,避免声明出来没人使用的尴尬局面)<br>3. list关于延迟初始化机制的一些处理<br>   延迟初始化机制的缺点就在于在使用的时候需要判断是否已经初始化了,如果使用比较频繁的话，就会造成大量的计算浪费(cpu浪费)<br>   所以list当中关于延迟初始化机制的处理方案如下<br>   3.1 在插入新元素时 需要检查是否已经初始化好了<br>   3.2 在移动 或者将已有元素再修改位置插入时 需要判断元素身上的链表是否和要操作的链表的指针相同 如果不相同说明元素不存在该链表中 如果相同则说明这个链表肯定已经初始化好了<br>4. ring包和list包的区别<br>    首先从源码来看<br>   type Ring struct {<br>       next, prev *Ring<br>       Value<br>   }<br><br>  type Element struct {<br>       next, prev *Element<br>       list *List &#47;&#47;它所属的链表的指针<br>       Value interface{} <br>  }<br><br>   type List struct {<br>       root element<br>       len int<br>   }<br>   从源码的定义分析得出 ring 的元素就是ring结构体(只代表了一个元素)  而list的元素 是list+element(代表了一个链表)<br>  list在创建的时候不需要指定元素也没有必要,因为它会不停的增长 而ring的创建需要指定元素个数 且不再增长<br>  并且list的还存在一个没有实际意义的根元素  该根元素还可以用来连接首位两端 使其成为一个循环链表<br>关于文中 两个结论的思考<br>结论1 go语言中切片实现了数组的延迟初始化机制<br>       我的思考是 因为切片延迟初始化了， 所以他的底层数组在切片声明时也没有被初始化出来<br>结论2 ring 使用len方法是o(n) 而list使用len方法是o(1)<br>       还没看讲解我就去翻看了源码(我比较喜欢的一句话是源码之下无秘密),从上面两个结构体的声明和list的insert方法可以看出 因为list的根元素这个根元素也代表了链表(突然想明白ring和list的第二点区别) 在这个根元素上存放了一个len数据表示链表的长度 insert时这个长度会执行+1,所以执行len方法时只需要取出这个长度即可从而达到了o(1)的时间复杂度 而ring结构体中却不存在这样的len所以需要遍历完整个环,所以时间复杂度为o(n)<br>关于思考题<br>1. ring包从实现来分析得出 适合用来执行长度固定的循环事件<br>2. heap包 则适合用来做堆排序 求第k大 第k小等问题 还有就是前面某些同学提到的优先调度问题<br>关于优先调度问题我觉得思路大概如下<br>首先维护一个堆 然后针对每个要调度的事件 分配一个优先级 然后从下到上执行堆化过程 让优先级(最低或者最高的放到堆的顶部) 当处理完成之后 再把堆尾部的事件放到堆顶部 然后执行从上往下进行堆化维护好堆的顺序 再执行逻辑","like_count":45,"discussions":[{"author":{"id":2113830,"avatar":"https://static001.geekbang.org/account/avatar/00/20/41/26/ea92e350.jpg","nickname":"Corleone","note":"","ucode":"8BF7F61F8EA15A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394854,"discussion_content":"有个问题不是很明白啊 既然ring的长度都是固定了 为何获取len时还需要遍历呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632102856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2536553,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/LvrILicoibOUNTcVQFHSHtia0D8LZ8iaWMibtGYTZiaI9Xr8Oqsl2YfGmjKzKqOXy3Yb1fbkEFNe4g7CoPxvc7mZxjyw/132","nickname":"LouisYuan","note":"","ucode":"8D16568EC5A7DB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373548,"discussion_content":"老侯捷了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620782631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1397149,"avatar":"https://static001.geekbang.org/account/avatar/00/15/51/9d/e6947e9b.jpg","nickname":"遇事不决，量子力学","note":"","ucode":"6E5B015F4E427B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348899,"discussion_content":"看完你的讲解清楚多了，这个文章写的太难懂了，作者的水平还是欠佳啊，感觉他老是特意讲的很复杂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612771568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1167175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/cf/47/ddb83b35.jpg","nickname":"Tideorz","note":"","ucode":"90BA1BA610CED4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333546,"discussion_content":"讲的挺清楚的，就是喜欢这种，don&#39;t talk, show me the code, 其实就是几行简单的code，有点基础的人一看就明白了，而不是纯粹的一大段文字。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607561582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88850,"user_name":"louis","can_delete":false,"product_type":"c1","uid":1066576,"ip_address":"","ucode":"3292516C8A9786","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/50/511205c3.jpg","comment_is_top":false,"comment_ctime":1556012276,"is_pvip":false,"replies":[{"id":"31885","content":"比如你用 list.New 函数创建了一个 List 类型的双向链表，然后通过它的一些方法往里面塞了一些元素。可以往里面塞的元素的方法有 PushFront、PushBack、InsertAfter、InsertBefore 等。<br><br>但是你发现没有，这些方法接受的新元素的类型都是 interface{} 的。也就是说，这个 List 类型的链表只接受 interface{} 类型的新元素值。<br><br>而当新元素值进入链表之后，链表会把它们再包装成 list.Element 类型的值。你看，那些往里塞元素值的方法返回的都是被包装后的 *list.Element 类型的元素值。<br><br>当你像我这样浏览了 container&#47;list.List 类型的相关 API 之后，就应该可以明白我问这个问题的背景了。<br><br>这个 List 类型只会接受 interface{} 类型的新元素值，并且只会吐出 *list.Element 类型的已有元素值。显然，任何移动已有元素值或者删除已有元素值的方法，都只会接受该链表自己吐出来的“Element 值”。因此，对于我们自己生成的“Element 值”，这个链表的任何方法都是不会接受的。<br><br>当然了，如果你之前完全没用过 List 类型，可能会觉得这个问题有些突兀。但是当你看完下面的详细解释之后，我相信你就会有所了解了。<br><br>我们这个专栏的一个风格就是：“先抛出问题，然后再解释前因后果”。目的就是，逼迫大家在碰到问题之后自己先去了解背景并试着找找答案，然后再回来看我的答案。这样的话，你对这些知识点的记忆会更牢固，不容易忘。<br><br>我非常希望这个专栏能成为大家的“枕边书”，而不是听听音频就放在一边的那种。所以才有了这样的结构设计。如果你们能在今后碰到问题时想起这个专栏，到这里翻一翻并能找到答案的线索，那我就太高兴了。<br><br>","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1556075135,"ip_address":"","comment_id":88850,"utype":1}],"discussion_count":5,"race_medal":0,"score":"173354704116","product_id":100013101,"comment_content":"郝老师，这里不太理解什么叫“自己生成的Element类型值”？把自己生成的Element类型值传给链表——这个能不能再通俗点描述？","like_count":40,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447922,"discussion_content":"比如你用 list.New 函数创建了一个 List 类型的双向链表，然后通过它的一些方法往里面塞了一些元素。可以往里面塞的元素的方法有 PushFront、PushBack、InsertAfter、InsertBefore 等。\n\n但是你发现没有，这些方法接受的新元素的类型都是 interface{} 的。也就是说，这个 List 类型的链表只接受 interface{} 类型的新元素值。\n\n而当新元素值进入链表之后，链表会把它们再包装成 list.Element 类型的值。你看，那些往里塞元素值的方法返回的都是被包装后的 *list.Element 类型的元素值。\n\n当你像我这样浏览了 container/list.List 类型的相关 API 之后，就应该可以明白我问这个问题的背景了。\n\n这个 List 类型只会接受 interface{} 类型的新元素值，并且只会吐出 *list.Element 类型的已有元素值。显然，任何移动已有元素值或者删除已有元素值的方法，都只会接受该链表自己吐出来的“Element 值”。因此，对于我们自己生成的“Element 值”，这个链表的任何方法都是不会接受的。\n\n当然了，如果你之前完全没用过 List 类型，可能会觉得这个问题有些突兀。但是当你看完下面的详细解释之后，我相信你就会有所了解了。\n\n我们这个专栏的一个风格就是：“先抛出问题，然后再解释前因后果”。目的就是，逼迫大家在碰到问题之后自己先去了解背景并试着找找答案，然后再回来看我的答案。这样的话，你对这些知识点的记忆会更牢固，不容易忘。\n\n我非常希望这个专栏能成为大家的“枕边书”，而不是听听音频就放在一边的那种。所以才有了这样的结构设计。如果你们能在今后碰到问题时想起这个专栏，到这里翻一翻并能找到答案的线索，那我就太高兴了。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556075135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1079562,"avatar":"https://static001.geekbang.org/account/avatar/00/10/79/0a/a417ec1c.jpg","nickname":"南瓜","note":"","ucode":"53561F551857A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403198,"discussion_content":"老师描述，偏向学术性，用词学术，然而学术描述 往往有一定的理解成本，更适合了解这个东西的人。 建议还是深入浅出一点。本质就是一个 interface，内部包装为Element，接口都是基于这个element的，主要是为了接口抽象通用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634030743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362190,"discussion_content":"我感觉意思是，list1生成的元素，不能给list2使用。不知道理的解对不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616865927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337773,"discussion_content":"还是没说清楚啥叫自己生成的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609072963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1046833,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f9/31/5028e119.jpg","nickname":"Awesome","note":"","ucode":"4D386DC5A2152C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1613760,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9f/c0/86febfff.jpg","nickname":"Master","note":"","ucode":"79D0145B853C9E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339908,"discussion_content":"看看源码就明白了， PushFront、PushBack、InsertAfter、InsertBefore这些方法接收的参数都是interface{}，最后调用内部方法的时候，都会包装成&amp;Element{Value: v} 这样去调用","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1609836320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337773,"ip_address":""},"score":339908,"extra":""}]}]},{"had_liked":false,"id":34658,"user_name":"Err","can_delete":false,"product_type":"c1","uid":1210276,"ip_address":"","ucode":"BA952C73EE6753","user_header":"https://static001.geekbang.org/account/avatar/00/12/77/a4/e57f2014.jpg","comment_is_top":false,"comment_ctime":1540255306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"164749012554","product_id":100013101,"comment_content":"我觉得写一个实际的例子能帮助更好理解","like_count":39},{"had_liked":false,"id":22178,"user_name":"melon","can_delete":false,"product_type":"c1","uid":1023773,"ip_address":"","ucode":"7A80C20EBCAAA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/1d/ec173090.jpg","comment_is_top":false,"comment_ctime":1535530009,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"96024810521","product_id":100013101,"comment_content":"list的一个典型应用场景是构造FIFO队列；ring的一个典型应用场景是构造定长环回队列，比如网页上的轮播；heap的一个典型应用场景是构造优先级队列。","like_count":22,"discussions":[{"author":{"id":1330141,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4b/dd/41614582.jpg","nickname":"HomeyLiu","note":"","ucode":"EF4CCB92C369B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559786,"discussion_content":"list 还可以做 栈，后进先出","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648958626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22085,"user_name":"fliter","can_delete":false,"product_type":"c1","uid":1161141,"ip_address":"","ucode":"950730D31BD6F4","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/b5/07fc5f58.jpg","comment_is_top":false,"comment_ctime":1535476008,"is_pvip":false,"replies":[{"id":"7954","content":"这需要一个过程，之前list也不是标准库中的一员。况且也没必要把太多的东西多做到语言里，这样反倒不利于后面的扩展。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1535514434,"ip_address":"","comment_id":22085,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44485148968","product_id":100013101,"comment_content":"为什么不把list像slice，map一样作为一种不需要import其他包就能使用的数据类型？是因为使用场景较后两者比较少吗","like_count":10,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422995,"discussion_content":"这需要一个过程，之前list也不是标准库中的一员。况且也没必要把太多的东西多做到语言里，这样反倒不利于后面的扩展。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1535514434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1732394,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLruKArGrtM9NQYUrQib3dicKHFoia1TnSyxfjv5eFPXVHc5SU6mnibPFk3IyLPj9xia40nKUaNEzIYIicQ/132","nickname":"gogolk","note":"","ucode":"94FF5F698F55BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557309,"discussion_content":"java list stack也要import的 为的就是用它就只要import ，不用的项目也不用带这些代码 轻量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647760882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22443,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1535678459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35895416827","product_id":100013101,"comment_content":"在内存上，和ring的区别是list多了一个特殊表头节点，充当哨兵","like_count":8},{"had_liked":false,"id":22233,"user_name":"会网络的老鼠","can_delete":false,"product_type":"c1","uid":1128708,"ip_address":"","ucode":"CFECDE8B67FE3C","user_header":"https://static001.geekbang.org/account/avatar/00/11/39/04/a8817ecf.jpg","comment_is_top":false,"comment_ctime":1535584918,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"35895323286","product_id":100013101,"comment_content":"现在大家写golang程序，一般用什么IDE？","like_count":8,"discussions":[{"author":{"id":1197488,"avatar":"https://static001.geekbang.org/account/avatar/00/12/45/b0/69401d00.jpg","nickname":"Always","note":"","ucode":"36C489CF30C550","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50306,"discussion_content":"Goland更加友善一点，其他的有vscode,liteide,sublime","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573702289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019568,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","nickname":"CcczzZ","note":"","ucode":"5F46DA5053D2BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44476,"discussion_content":"GoLand，VSCode 都可以","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1572952851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23184,"user_name":"后端进阶","can_delete":false,"product_type":"c1","uid":1125656,"ip_address":"","ucode":"480F48F5378307","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/18/918eaecf.jpg","comment_is_top":false,"comment_ctime":1536196268,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31600967340","product_id":100013101,"comment_content":"前面的网友，goland了解一下，超赞的ide","like_count":7,"discussions":[{"author":{"id":1834181,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/fc/c5/ff8b770e.jpg","nickname":"BugBean","note":"","ucode":"B51232281AD9BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343618,"discussion_content":"张师傅又是你啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611111972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107352,"user_name":"Geek_a8be59","can_delete":false,"product_type":"c1","uid":1563985,"ip_address":"","ucode":"BEC0F57B51DC44","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdiaUiaCYQe9tibemaNU5ya7RrU3MYcSGEIG7zF27u0ZDnZs5lYxPb7KPrAsj3bibM79QIOnPXAatfIw/132","comment_is_top":false,"comment_ctime":1561517863,"is_pvip":false,"replies":[{"id":"38881","content":"按照你这三行代码，应该是 789 -&gt; 456 -&gt; 123 啊，你那个“789-》456-》ni”是怎么出来的？<br><br>这个链表里所谓的 root 就是用来表示链表两端的尽头的。所以，这个链表的末端实际上并不是 nil ，而是 root。只是在 Element 的 Next 方法中，如果发现它的 next 字段的值等于 root，就会返回 nil 而已。<br><br>明白了吗？","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1561543842,"ip_address":"","comment_id":107352,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27331321639","product_id":100013101,"comment_content":"您好 能否出一个list 链表生成的一个图解，现在我看源码用图去模拟生成 一直搞混掉，特别是在初始化的时候prev和next都指向自身的root 这个很迷糊<br>比如:<br>\tc.PushBack(&quot;123&quot;)<br>\tc.PushFront(&quot;456&quot;)<br>\tc.PushFront(&quot;789&quot;)<br>根据个人图解应该是789-》456-》nil，为什么能遍历出来很不清楚。能否有一个从初始化到最后生成的样例看一下 万分感谢","like_count":6,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455481,"discussion_content":"按照你这三行代码，应该是 789 -&amp;gt; 456 -&amp;gt; 123 啊，你那个“789-》456-》ni”是怎么出来的？\n\n这个链表里所谓的 root 就是用来表示链表两端的尽头的。所以，这个链表的末端实际上并不是 nil ，而是 root。只是在 Element 的 Next 方法中，如果发现它的 next 字段的值等于 root，就会返回 nil 而已。\n\n明白了吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1561543842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1563985,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdiaUiaCYQe9tibemaNU5ya7RrU3MYcSGEIG7zF27u0ZDnZs5lYxPb7KPrAsj3bibM79QIOnPXAatfIw/132","nickname":"Geek_a8be59","note":"","ucode":"BEC0F57B51DC44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479,"discussion_content":"似懂非懂得感觉。我不懂得是初始化哪块代码，理解不了 把next和prev指向了自己\nfunc (l *List) Init() *List {\n\tl.root.next = &amp;l.root\n\tl.root.prev = &amp;l.root\n\tl.len = 0\n\treturn l\n}\n\n难不成每次插入的时候不能判断len是否>0,如果等于0\nl.root.next = e\nl.root.prev = e\ne.next = l.root\ne.prev  = l.root\nl.len++\nreturn e\n大于0的时候再按下面的逻辑走\n// insert inserts e after at, increments l.len, and returns e.\nfunc (l *List) insert(e, at *Element) *Element {\n\tn := at.next\n\tat.next = e\n\te.prev = at\n\te.next = n\n\tn.prev = e\n\te.list = l\n\tl.len++\n\treturn e\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561609646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":36064,"user_name":"李斌","can_delete":false,"product_type":"c1","uid":1007369,"ip_address":"","ucode":"73D1A97F746F69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5f/09/80484e2e.jpg","comment_is_top":false,"comment_ctime":1540910576,"is_pvip":false,"replies":[{"id":"13304","content":"嗯，也算是与时俱进吧，未来有脑机接口了，也就用不着这些了。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1541481444,"ip_address":"","comment_id":36064,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23015747056","product_id":100013101,"comment_content":"用 vscode 就蛮好的，我之前是八年 vim 党，写 golang 时硬生生地被掰成 vscode","like_count":5,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427743,"discussion_content":"嗯，也算是与时俱进吧，未来有脑机接口了，也就用不着这些了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541481444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1241402,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f1/3a/ce2cc8ea.jpg","nickname":"美味的河豚","note":"","ucode":"61ECEBDCB9C4CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":58221,"discussion_content":"vim不也有插件吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574659245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121076,"user_name":"Zer0","can_delete":false,"product_type":"c1","uid":1042801,"ip_address":"","ucode":"CC754786CFEB4C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e9/71/40b04914.jpg","comment_is_top":false,"comment_ctime":1565054810,"is_pvip":true,"replies":[{"id":"44494","content":"✅","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1565058424,"ip_address":"","comment_id":121076,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18744923994","product_id":100013101,"comment_content":"不能把自己生成的Element传给List主要是因为Element的list成员是不开放的，我们不能操作，而在List上操作Element的时候是会判断Element的list成员是否是自己。是这样吗？","like_count":4,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461609,"discussion_content":"✅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565058424,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286438,"user_name":"雷朝建","can_delete":false,"product_type":"c1","uid":1154468,"ip_address":"","ucode":"AEBEAC86E2A198","user_header":"https://static001.geekbang.org/account/avatar/00/11/9d/a4/5d2b5aed.jpg","comment_is_top":false,"comment_ctime":1617319120,"is_pvip":false,"replies":[{"id":"104058","content":"List 是一个 struct 啊，有了 lazyInit 你就可以直接 var myList list.List 了啊。这不是就做到开箱即用了吗？","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1617343661,"ip_address":"","comment_id":286438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14502221008","product_id":100013101,"comment_content":"老师， 我看了一下list.go的源码，发现一个疑问是：延迟初始化的含义就是调用lazyInit，它的一个判断条件是：l.root.next==nil； 但是我们在使用list时候，不是先调用New函数吗？那么不应该会出现l.root.next为nil的情况的。<br>什么时候回出现l.root.next==nil, 从而导致源码中每次的PushFront等操作调用lazyInit呢？","like_count":3,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517990,"discussion_content":"List 是一个 struct 啊，有了 lazyInit 你就可以直接 var myList list.List 了啊。这不是就做到开箱即用了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617343661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111971,"user_name":"jackstraw","can_delete":false,"product_type":"c1","uid":1137207,"ip_address":"","ucode":"C967D2D6158F99","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/37/8775d714.jpg","comment_is_top":false,"comment_ctime":1562645152,"is_pvip":false,"replies":[{"id":"40994","content":"当然不一样，list.New 返回的是指针值。另外你可以再看看讲结构体和方法那篇文章。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1562820652,"ip_address":"","comment_id":111971,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14447547040","product_id":100013101,"comment_content":"我尝试打印了 “var l = list.New()” 与 “var l list.List”两种方式的l类型，发现是不一样的，但是下面的操作却都是可以的<br>func main() {<br>    &#47;&#47;l := list.New()<br>    var l list.List<br>    e4 := l.PushBack(4)<br>    e1 := l.PushFront(1)<br>    l.InsertBefore(3, e4)<br>    l.InsertAfter(2, e1)<br>    &#47;&#47;travel(l)<br>    travel(&amp;l)<br>}","like_count":3,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457525,"discussion_content":"当然不一样，list.New 返回的是指针值。另外你可以再看看讲结构体和方法那篇文章。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562820652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243914,"user_name":"杨震","can_delete":false,"product_type":"c1","uid":1119786,"ip_address":"","ucode":"AD6E5E7A5F0329","user_header":"https://static001.geekbang.org/account/avatar/00/11/16/2a/68913d36.jpg","comment_is_top":false,"comment_ctime":1598325700,"is_pvip":false,"replies":[{"id":"89848","content":"OK。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1598335138,"ip_address":"","comment_id":243914,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10188260292","product_id":100013101,"comment_content":"以后再有课的话  希望老师多加点图   虽然费点事  但应该更多为学员着想吧。文字阐述一点也不直观。","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504430,"discussion_content":"OK。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598335138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102942,"user_name":"Sky","can_delete":false,"product_type":"c1","uid":1392585,"ip_address":"","ucode":"4C5A5AB73E8B90","user_header":"https://static001.geekbang.org/account/avatar/00/15/3f/c9/1ccefb9a.jpg","comment_is_top":false,"comment_ctime":1560332726,"is_pvip":false,"replies":[{"id":"37228","content":"建议大家在阅读这一篇文章时对照着 container 包的文档看。对这几个类型的 API 有一定了解之后，使用就是水到渠成的事情了。<br><br>自己先试一试，如果有具体的问题，可以来这里问。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1560341892,"ip_address":"","comment_id":102942,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10150267318","product_id":100013101,"comment_content":"这一讲没有实例代码","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453658,"discussion_content":"建议大家在阅读这一篇文章时对照着 container 包的文档看。对这几个类型的 API 有一定了解之后，使用就是水到渠成的事情了。\n\n自己先试一试，如果有具体的问题，可以来这里问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560341892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235678,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1595147442,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5890114738","product_id":100013101,"comment_content":"关于list的结构，画个图会更加直观","like_count":1},{"had_liked":false,"id":164072,"user_name":"lixiaofeng","can_delete":false,"product_type":"c1","uid":1100200,"ip_address":"","ucode":"0D6710D95B6FFB","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/a8/98507423.jpg","comment_is_top":false,"comment_ctime":1576854398,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871821694","product_id":100013101,"comment_content":"func flist(){<br>    link := list.New()<br>    for i:=1; i&lt; 11; i++  {<br>        link.PushBack(i)<br>    }<br>    for p:= link.Front(); p!=link.Back(); p=p.Next(){<br>        fmt.Println(&quot;Number&quot;, p.Value)<br>    }<br>}<br>#链表的常用方法<br>func (e *Element) Next() *Element<br>func (e *Element) Prev() *Element<br>func (l *List) Init() *List<br> New() *List { return new(List).Init() }<br> func (l *List) Len() int { return l.len }<br> func (l *List) Front() *Element<br> func (l *List) Back() *Element<br> func (l *List) Remove(e *Element) interface{}<br> func (l *List) PushFront(v interface{}) *Element<br> func (l *List) PushBack(v interface{}) *Element<br> func (l *List) InsertBefore(v interface{}, mark *Element) *Element <br> func (l *List) InsertAfter(v interface{}, mark *Element) *Element<br> func (l *List) MoveToFront(e *Element)<br> func (l *List) MoveToBack(e *Element) <br> func (l *List) MoveBefore(e, mark *Element)<br> func (l *List) MoveAfter(e, mark *Element)<br> func (l *List) PushBackList(other *List)<br> func (l *List) PushFrontList(other *List)","like_count":1},{"had_liked":false,"id":34284,"user_name":"缘木求鱼","can_delete":false,"product_type":"c1","uid":1200198,"ip_address":"","ucode":"A9E047ECF9CB9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/50/46/3573d1d0.jpg","comment_is_top":false,"comment_ctime":1540087068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835054364","product_id":100013101,"comment_content":"又比如，在用于删除元素、移动元素，以及一些用于插入元素的方法中，只要判断一下传入的元素中指向所属链表的指针，是否与当前链表的指针相等就可以了。   这里传入的元素的所属链表指针是如何赋值的","like_count":1},{"had_liked":false,"id":342159,"user_name":"Python&#47;Go","can_delete":false,"product_type":"c1","uid":1935410,"ip_address":"","ucode":"4E8E6570C4982D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM5lic8rDTibyiau9NvP7meuDWwGxlycGk9wkktFVDsvfQjhaSTO3pmpUVhTpttfWRNWCbMuwnTtMYhdQ/132","comment_is_top":false,"comment_ctime":1650075165,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650075165","product_id":100013101,"comment_content":"为什么不能配点源码描述","like_count":0},{"had_liked":false,"id":337083,"user_name":"Geek_d094ea","can_delete":false,"product_type":"c1","uid":2818527,"ip_address":"","ucode":"C137051985EF34","user_header":"","comment_is_top":false,"comment_ctime":1646614457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646614457","product_id":100013101,"comment_content":"听着这个程序实体，咋这么别扭","like_count":0},{"had_liked":false,"id":306886,"user_name":"白有才","can_delete":false,"product_type":"c1","uid":1210652,"ip_address":"","ucode":"F81C6DE95427B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/1c/c0d14793.jpg","comment_is_top":false,"comment_ctime":1628762431,"is_pvip":false,"replies":[{"id":"111170","content":"人生的终极意义不就是练成绝世武功嘛！;-)","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1628830464,"ip_address":"","comment_id":306886,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628762431","product_id":100013101,"comment_content":"这课程就像小说里的武功秘籍, 看了你不一定会练, 所以练成绝世武功的人就少之又少","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524961,"discussion_content":"人生的终极意义不就是练成绝世武功嘛！;-)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628830464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304335,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1627356672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627356672","product_id":100013101,"comment_content":"对于这一讲的内容，确实要用IDE（例如Goland）打开源码文件一边阅读一边对着课中的文字，一边推敲、实验。<br><br>几个源码文件都是一两百来行，读起来不吃力。（前提是已经有了Go的基础）","like_count":1},{"had_liked":false,"id":295352,"user_name":"niceshot","can_delete":false,"product_type":"c1","uid":1312493,"ip_address":"","ucode":"2C2BBC07A6E02D","user_header":"https://static001.geekbang.org/account/avatar/00/14/06/ed/5a167dda.jpg","comment_is_top":false,"comment_ctime":1622380089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622380089","product_id":100013101,"comment_content":"链表的延迟初始化只存在于PushFront方法、PushBack方法、PushBackList方法以及PushFrontList方法中。而插入第一个元素必然会用到这几个方法之一。为什么是这四个方法中有延迟初始化，还有一点就是这几个方法使用到了list.root 所以如果没有加延迟初始化的话list.root就是nil 程序将会panic。所以要使用一个不确定的指针则一定要去判断它是否为nil<br><br>","like_count":0},{"had_liked":false,"id":291441,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1620288871,"is_pvip":true,"replies":[{"id":"105655","content":"这一课的内容是一个在数组和切片之上的拓展，目的正是促使大家去看源码，体会这几种类型的不同，以及container包的妙处。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1620458842,"ip_address":"","comment_id":291441,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1620288871","product_id":100013101,"comment_content":"这一课没有示例代码，确实不太习惯，去看了一下 list.go 的源码，才平复了一下心情。<br><br>List 实现了一个双向链表，Ring 实现一个循环链表。<br><br>对于思考题，container&#47;ring 包中的循环链表可能的适用场景可能有类似于滑动窗口协议的缓存实现，可以实现 FIFO 的队列；<br><br>container&#47;heap 没有用过，看了一下 heap.go 的源码，以及附带的 example_intheap_test.go 和 example_pq_test.go，感觉设计还是很巧妙的，可以用于堆排序和优先队列。","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519471,"discussion_content":"这一课的内容是一个在数组和切片之上的拓展，目的正是促使大家去看源码，体会这几种类型的不同，以及container包的妙处。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620458842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268864,"user_name":"好久不见","can_delete":false,"product_type":"c1","uid":1391249,"ip_address":"","ucode":"283FDB7580D398","user_header":"https://static001.geekbang.org/account/avatar/00/15/3a/91/d894a61f.jpg","comment_is_top":false,"comment_ctime":1608379399,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1608379399","product_id":100013101,"comment_content":"既然ring的长度建立后不能变，那len为啥还是o(n)呢，不就是初始值嘛","like_count":0,"discussions":[{"author":{"id":1312493,"avatar":"https://static001.geekbang.org/account/avatar/00/14/06/ed/5a167dda.jpg","nickname":"niceshot","note":"","ucode":"2C2BBC07A6E02D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376855,"discussion_content":"因为它要不停的next来计算整个环是多大。而list在插入的时候就已经对len做了计算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622382222,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":258866,"user_name":"出卖灵魂的教练Kerry","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1604570324,"is_pvip":true,"replies":[{"id":"94242","content":"我觉得不多也不少，刚刚好。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1604627825,"ip_address":"","comment_id":258866,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1604570324","product_id":100013101,"comment_content":"老师你好，go内置的数据结构是不是挺少的？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508771,"discussion_content":"我觉得不多也不少，刚刚好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604627825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257287,"user_name":"旭塬","can_delete":false,"product_type":"c1","uid":1812849,"ip_address":"","ucode":"EF058DA2927A36","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/71/4f911305.jpg","comment_is_top":false,"comment_ctime":1603926776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603926776","product_id":100013101,"comment_content":"这章建议对基础数据结构有点了解后，去看源码会比较清楚","like_count":0},{"had_liked":false,"id":251987,"user_name":"疯琴","can_delete":false,"product_type":"c1","uid":1099379,"ip_address":"","ucode":"82ACAA4A27753D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/73/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1602042919,"is_pvip":false,"replies":[{"id":"92158","content":"你好，我的意思是说：<br><br>如果一个底层数组中有许多空闲不用的槽位，那么将是一种浪费。因为有切片在使用这个底层数组，所以GC也没发回收它。所以，总是应该认真考虑切片的缩容策略。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1602213642,"ip_address":"","comment_id":251987,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602042919","product_id":100013101,"comment_content":"请问老师，为什么切片扩容以后”旧的底层数组无法被回收“？是指扩容太频繁GC没来得及清理么？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506680,"discussion_content":"你好，我的意思是说：\n\n如果一个底层数组中有许多空闲不用的槽位，那么将是一种浪费。因为有切片在使用这个底层数组，所以GC也没发回收它。所以，总是应该认真考虑切片的缩容策略。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602213642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221693,"user_name":"漫步跑小鸡","can_delete":false,"product_type":"c1","uid":1313551,"ip_address":"","ucode":"061DD6C4E2E962","user_header":"https://static001.geekbang.org/account/avatar/00/14/0b/0f/8a524cab.jpg","comment_is_top":false,"comment_ctime":1590567196,"is_pvip":false,"replies":[{"id":"81803","content":"这叫双向绑定啊，要不列表怎么知道从外面进来的元素值是不是自己的？","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1590636193,"ip_address":"","comment_id":221693,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590567196","product_id":100013101,"comment_content":"container&#47;list 的元素Element为啥还要设置自己所属的列表，这样设计解决的是什么问题？<br>&#47;&#47; The list to which this element belongs.<br>\tlist *List","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496538,"discussion_content":"这叫双向绑定啊，要不列表怎么知道从外面进来的元素值是不是自己的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590636193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":194779,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1217554,"ip_address":"","ucode":"C5A540BC5A60B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/12/15558f28.jpg","comment_is_top":false,"comment_ctime":1585105618,"is_pvip":false,"replies":[{"id":"74143","content":"1. 插入新值肯定是可以的，如果你要移动链表中已有的元素就会有这项检查啊。新值肯定是自定义的。这是两回事。<br><br>2. Remove 这个你看一下链表长度就可以知道了。MoveToFront 的话你也可以调用一下 Front 方法查看。另外，如果一个 element 不在任何链表中，那么它的 Prev 和 Next 肯定都会返回nil。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1585129476,"ip_address":"","comment_id":194779,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585105618","product_id":100013101,"comment_content":"老师，读了list.go源码后有点理解您说的自定义的elem不被List接受的含义了，因为自定义的elem里的list成员为nil,在List的成员函数中和自身的指针不同。但是我还有两个疑问，希望老师能解答：<br>1）使用显示的elem构造，可以被list接受，是否和您说的自定义elem含义不同呢？<br>fmt.Println(&quot;***********custom pushback*************&quot;)<br>\tem := list.Element{}<br>\tli.PushBack(&amp;em)<br>\tfmt.Println(li.Len())<br><br>2）如果elem不是list的元素，像Remove或moveToFront都是不影响源list,那开发者该如何知道成功还是失败呢？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488895,"discussion_content":"1. 插入新值肯定是可以的，如果你要移动链表中已有的元素就会有这项检查啊。新值肯定是自定义的。这是两回事。\n\n2. Remove 这个你看一下链表长度就可以知道了。MoveToFront 的话你也可以调用一下 Front 方法查看。另外，如果一个 element 不在任何链表中，那么它的 Prev 和 Next 肯定都会返回nil。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585129476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165922,"user_name":"jc9090kkk","can_delete":false,"product_type":"c1","uid":1338831,"ip_address":"","ucode":"6C992D07A2E78F","user_header":"https://static001.geekbang.org/account/avatar/00/14/6d/cf/ec335526.jpg","comment_is_top":false,"comment_ctime":1577345510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577345510","product_id":100013101,"comment_content":"从这一章开始听的有点云里雾里的，我之前看过go的一些基础教程，并没有看到有书中笼统地介绍container包的概念和使用场景，有哪本书中是提到了container包的使用的吗？","like_count":0},{"had_liked":false,"id":91445,"user_name":"窝窝头","can_delete":false,"product_type":"c1","uid":1063866,"ip_address":"","ucode":"5C2635ED6484F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/ba/3b30dcde.jpg","comment_is_top":false,"comment_ctime":1557039986,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1557039986","product_id":100013101,"comment_content":"1.list作为队列，先进后出，ring可以应用于循环选择场景，对一些长时间占用资源的程序或者请求等对象进行处理<br>2.heap还可以做排序，或者字符编码之类的","like_count":0},{"had_liked":false,"id":23037,"user_name":"兔子高","can_delete":false,"product_type":"c1","uid":1213534,"ip_address":"","ucode":"4F710AD87D3B21","user_header":"https://static001.geekbang.org/account/avatar/00/12/84/5e/79568644.jpg","comment_is_top":false,"comment_ctime":1536116517,"is_pvip":false,"replies":[{"id":"8404","content":"我这些是对照list源码说的，你可以去看一看list的源码，这些问题就都迎刃而解了。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1536216898,"ip_address":"","comment_id":23037,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1536116517","product_id":100013101,"comment_content":"你好，有个问题想问一下，你在文中有说每次判断链表是否初始化很浪费性能，但是你后面又说每次判断链表的长度或者它是否为空，问题如下<br>1.如何判断是否初始化<br>2.判断初始化和判断为空的区别<br>3.判断链表长度和是否为空比判断是否初始化更节约性能是吗？性能大概会节约多少倍呢？<br>麻烦解答一下，谢谢","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423382,"discussion_content":"我这些是对照list源码说的，你可以去看一看list的源码，这些问题就都迎刃而解了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536216898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1217554,"avatar":"https://static001.geekbang.org/account/avatar/00/12/94/12/15558f28.jpg","nickname":"Jason","note":"","ucode":"C5A540BC5A60B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213759,"discussion_content":"判空看len是否为0，判nil则看root.next是否为nil","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585119325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":22177,"user_name":"xlh","can_delete":false,"product_type":"c1","uid":1203940,"ip_address":"","ucode":"A7D86084999D41","user_header":"","comment_is_top":false,"comment_ctime":1535529980,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1535529980","product_id":100013101,"comment_content":"Slice 缩容策略是什么","like_count":0,"discussions":[{"author":{"id":1961314,"avatar":"","nickname":"0770","note":"","ucode":"CC55AB48F23C3E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390182,"discussion_content":"可以使用新建一个数组然后copy的方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629706887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}