{"id":741038,"title":"第 14 章 LNMP环境配置(1)","content":"<h1 id=\"nav_point_287\">第 14 章 LNMP环境配置</h1>\n<p>如果你想成为一名合格的系统管理员，仅掌握Linux的基础知识是远远不够的，你还需要长时间积累一定的工作经验。所谓的工作经验就是对一些运行在Linux系统上的软件的配置和应用，以及解决在工作中遇到的问题。这就好比Windows上的Office软件，大部分人都会安装，但是真正会用的人却不多。究其原因，不是因为Office软件太难，而是因为很少有人花费很长的时间去使用和研究。</p>\n<p>LNMP中的L指的是Linux，N指的是Nginx（一种Web服务软件），M指的是MySQL，P指的是PHP，目前对这种环境的应用非常多。Nginx的设计初衷是提供一种快速、高效、多并发的Web服务软件。MySQL是最为流行的一款关系型数据库，几乎所有的互联网或者技术型公司都会用到。PHP是一种脚本语言，与C语言类似，是常用的网站编程语言。本章将带着大家搭建一个Linux+Nginx+\nMySQL+PHP的环境，用来运行PHP语言编写的网站程序。</p>\n<h2 id=\"nav_point_288\">14.1 安装MySQL</h2>\n<p>我们平时是通过源码包安装MySQL的，但是由于它的编译时间比较长，因此阿铭建议你安装二进制免编译包，前文也介绍过源码包，所以相信你应该不会太陌生。源码包都是可以更改的由C或者C++语言编写的源码文件，而免编译的二进制包就是把已经编译过的文件再打包后提供给我们。其实Windows上的安装程序（比如QQ、360安全卫士等）就是类似的安装包。你可以到MySQL的官方网站下载，具体下载哪个版本根据你的平台和需求而定。目前MySQL主流版本为5.7和8.0，但使用8.0版本的应用占比还是比较少的，所以本章阿铭以5.7版本作为演示。</p><!-- [[[read_end]]] -->\n<h3 id=\"nav_point_289\">14.1.1 下载软件包</h3>\n<p>你可以到MySQL官方网站去下载MySQL的包，也可以到阿铭指定的网站下载，这个地址里面会提供本书中用到的所有软件包的下载地址，而且是在不断更新的。随着时间的推移，有的软件包更新了，下载地址也会变更。</p>\n<p>在本节，阿铭使用的是免编译二进制包。需要注意，这个软件包是区分平台的。CentOS 7之前的版本都有区分32位和64位，但如果你使用的是CentOS 7或者CentOS 8，那么直接选择64的包下载。在阿铭提供的下载地址中，带有x86_64字样的就是64位的包，带有i686字样的就是32位的包。要想查看你的Linux是多少位的，方法如下：</p>\n<pre class=\"code-rows\"><code># uname -i\nx86_64</code></pre>\n<p>然后下载源码包，如下所示：</p>\n<pre class=\"code-rows\"><code># cd /usr/local/src/ // 建议你以后把所有软件包都放到这个目录下面\n# wget http://mirrors.163.com/mysql/Downloads/MySQL-5.7/mysql-5.7.29-linux-glibc2.12-x86_64.tar.gz //注意，这里是一整条命令，并没有换行，若该地址失效，请到阿铭提供的地址找最新下载地址</code></pre>\n<h3 id=\"nav_point_290\">14.1.2 初始化</h3>\n<p>初始化过程如下：</p>\n<pre class=\"code-rows\"><code># tar zxf mysql-5.7.29-linux-glibc2.12-x86_64.tar.gz // 解压\n# [ -d /usr/local/mysql ] &amp;&amp; mv /usr/local/mysql /usr/local/mysql_old\n# mv mysql-5.7.29-linux-glibc2.12-x86_64 /usr/local/mysql // 挪动位置\n# useradd -s /sbin/nologin mysql // 建立MySQL用户，因为启动MySQL需要该用户\n# cd /usr/local/mysql\n# mkdir -p /data/mysql // 创建datadir，数据库文件会放到这里面\n# chown -R mysql:mysql /data/mysql // 更改权限，不更改后续操作就会出问题\n# vim /etc/my.cnf //写入如下内容\n[mysqld]\n\ninnodb_buffer_pool_size = 128M\nlog_bin = aminglinux\nbasedir = /usr/local/mysql\ndatadir = /data/mysql\nport = 3306\nserver_id = 128\nsocket = /tmp/mysql.sock\njoin_buffer_size = 128M\nsort_buffer_size = 2M\nread_rnd_buffer_size = 2M\nsql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES\n# /usr/local/mysql/bin/mysqld --initialize --user=mysql //初始化，如果有libaio.so.1: cannot open shared object file: No such file or directory这样的错误提示，请安装libaio包，命令如下\n# yum install –y libaio</code></pre>\n<p>在上例的第二条命令中，阿铭用到了一个特殊符号<code>&amp;&amp;</code>，它在这里的意思是当前面的命令执行成功时，才会执行后面，类似于一条<code>if</code>判断。意思是，如果/usr/local/mysql目录已经存在，就要改一下它的名字，以免影响后面的操作，因为如果/usr/local/mysql目录存在，那么后面的步骤就会失败。<code>Mysqld --initialize</code>命令是用来初始化数据的，会在/data/mysql下面生成一堆目录和文件。在该命令执行时会输出一些信息，其中有一行一定要记下来：</p>\n<pre class=\"code-rows\"><code>A temporary password is generated for root@localhost: y,aK3!ouXm6t</code></pre>\n<p>这是在告诉我们，它生成了一个临时的密码，等会我们需要使用该密码登录MySQL。</p>\n<h3 id=\"nav_point_291\">14.1.3 MySQL配置文件</h3>\n<p>在上一节初始化时提供了一个配置文件my.cnf，下面阿铭简单解释一下其含义。其中，<code>basedir</code>是MySQL包所在的路径；<code>datadir</code>是定义的存放数据的地方，在默认情况下，错误日志也会记录在这个目录下面；<code>port</code>定义MySQL服务监听的端口，如果不定义就是默认的3306；<code>server_id</code>定义该MySQL服务的ID号，这个参数在做主从配置的时候会用到，后续会介绍；<code>socket</code>定义MySQL服务监听的套接字地址，在Linux系统下面，很多服务除了可以监听一个端口（通过TCP/IP的方式通信），还可以监听套接字，两个进程就可以通过这个套接字文件通信。</p>\n<p>复制启动脚本文件并修改其属性，如下所示：</p>\n<pre class=\"code-rows\"><code># cp support-files/mysql.server /etc/init.d/mysqld\n# chmod 755 /etc/init.d/mysqld</code></pre>\n<p>然后修改启动脚本，如下所示：</p>\n<pre class=\"code-rows\"><code># vim /etc/init.d/mysqld</code></pre>\n<p>需要修改的地方有<code>datadir=/data/mysql</code>（前面初始化数据库时定义的目录）。把启动脚本加入系统服务项，设定开机启动并启动MySQL，如下所示：</p>\n<pre class=\"code-rows\"><code># chkconfig --add mysqld // 把mysqld服务加入到系统服务列表中，第13章已经介绍过\n# chkconfig mysqld on // 使其开机就启动\n# service mysqld start // 启动服务\nStarting MySQL.Logging to '/data/mysql/aminglinux-123.err'.\n SUCCESS!</code></pre>\n<p>如果启动不了，请到 /data/mysql/ 目录下查看错误日志，这个日志名通常是“主机名.err”，比如阿铭演示的这个错误日志名为 /data/mysql/aminglinux-123.err。检查MySQL是否启动的命令为：</p>\n<pre class=\"code-rows\"><code># ps aux |grep mysqld // 结果应该大于2行\n# netstat –lnp|grep 3306 // 看看有没有监听3306端口</code></pre>\n<p>此时的MySQL还不能用，还需要设置一个新的root密码，如下所示：</p>\n<pre class=\"code-rows\"><code># /usr/local/mysql/bin/mysqladmin -uroot -p'y,aK3!ouXm6t' password 'aminglinux.com'\nmysqladmin: [Warning] Using a password on the command line interface can be insecure.\nWarning: Since password will be sent to server in plain text, use ssl connection to ensure password safety. SUCCESS!</code></pre>\n<p>它的输出为一个警告，不用在意。<code>-p</code>后面为临时密码，<code>password</code>后面为新密码。</p>\n<h2 id=\"nav_point_292\">14.2 安装PHP</h2>\n<p>早些年的PHP 5.<em>x</em> 版本至少流行了有十年之久，但该版本已经于2019年1月停止更新，所以不再建议使用，除非网站程序必须要求5.<em>x</em>。阿铭编写此书时主流版本为7.2、7.3和7.4，所以将以7.4版本作为演示对象，其安装过程如下所示。</p>\n<p>(1) 下载PHP源码包，命令如下：</p>\n<pre class=\"code-rows\"><code># cd /usr/local/src\n# wget http://cn2.php.net/distributions/php-7.4.7.tar.gz</code></pre>\n<p>(2) 解压源码包，创建账号，命令如下：</p>\n<pre class=\"code-rows\"><code># tar zxf php-7.4.7.tar.gz\n# useradd -s /sbin/nologin php-fpm</code></pre>\n<p>该账号用来运行<code>php-fpm</code>服务。在LNMP环境中，PHP以<code>php-fpm</code>服务的形式出现，独立存在于Linux系统中，方便管理。</p>\n<p>(3) 配置编译选项，命令如下：</p>\n<pre class=\"code-rows\"><code># cd php-7.4.7\n# ./configure --prefix=/usr/local/php-fpm --with-config-file-path=/usr/local/php-fpm/etc --enable-fpm --with-fpm-user=php-fpm --with-fpm-group=php-fpm --with-mysqli=/usr/local/mysql/bin/mysql_config --with-mysql-sock=/tmp/mysql.sock --with-iconv-dir --with-zlib-dir --enable-soap --enable-ftp --enable-mbstring --enable-exif --disable-ipv6 --with-pear --with-curl --with-openssl</code></pre>\n<p>由于PHP的编译参数比较多，阿铭觉得暂时也不需要解释太多，大体意思就是：编译PHP可以指定我们需要的功能模块，跟前面的httpd类似，至于需要哪些，这取决于你所在的公司需要什么功能。阿铭提供的这些功能模块比较常用，如果没有特殊要求，直接使用这些参数即可。执行这一步时阿铭遇到了几个错误，如下所示。</p>\n<ul>\n<li><p><strong>错误1</strong></p>\n<pre class=\"code-rows\"><code>configure: error: Package requirements (libxml-2.0 &gt;= 2.7.6) were not met</code></pre>\n<p>其解决办法如下：</p>\n<pre class=\"code-rows\"><code># yum install -y libxml2-devel</code></pre>\n<p>&nbsp;</p>\n</li>\n<li><p><strong>错误2</strong></p>\n<pre class=\"code-rows\"><code>error: Package requirements (openssl &gt;= 1.0.1) were not met</code></pre>\n<p>其解决办法如下：</p>\n<pre class=\"code-rows\"><code># yum install -y openssl openssl-devel</code></pre>\n<p>&nbsp;</p>\n</li>\n<li><p><strong>错误3</strong></p>\n<pre class=\"code-rows\"><code>error: Package requirements (sqlite3 &gt; 3.7.4) were not met</code></pre>\n<p>其解决办法如下：</p>\n<pre class=\"code-rows\"><code># yum install -y sqlite-devel</code></pre>\n<p>&nbsp;</p>\n</li>\n<li><p><strong>错误4</strong></p>\n<pre class=\"code-rows\"><code>error: Package requirements (libcurl &gt;= 7.15.5) were not met</code></pre>\n<p>其解决办法如下：</p>\n<pre class=\"code-rows\"><code># yum install -y libcurl-devel</code></pre>\n<p>&nbsp;</p>\n</li>\n<li><p><strong>错误5</strong></p>\n<pre class=\"code-rows\"><code>error: Package requirements (oniguruma) were not met</code></pre>\n<p>其解决办法如下：</p>\n<pre class=\"code-rows\"><code># cd /usr/local/src/\n# wget https://github.com/kkos/oniguruma/archive/v6.9.4.tar.gz -O oniguruma-6.9.4.tar.gz\n# yum install -y autoconf automake libtool libtool-ltdl-devel\n# tar -zxf oniguruma-6.9.4.tar.gz\n# cd oniguruma-6.9.4\n# ./autogen.sh\n# ./autogen.sh\n# ./configure --prefix=/usr\n# make &amp;&amp; make install</code></pre>\n</li>\n</ul>\n<p>解决以上所有错误后，最终<code>./configure</code>运行结束，出现如下提示：</p>\n<pre class=\"code-rows\"><code>+--------------------------------------------------------------------+\n| License: |\n| This software is subject to the PHP License, available in this |\n| distribution in the file LICENSE. By continuing this installation |\n| process, you are bound by the terms of this license agreement. |\n| If you do not agree with the terms of this license, you must abort |\n| the installation process at this point. |\n+--------------------------------------------------------------------+\n\nThank you for using PHP.</code></pre>\n<p>然后编译和安装，如下所示：</p>\n<pre class=\"code-rows\"><code># make\n# make install</code></pre>\n<p>执行<code>make</code>命令的时间会在5分钟以上，请耐心等待。对于以上的每一个步骤，如果没有完全执行正确，那么其下一步是无法进行的。判断执行是否正确的方法为：使用命令<code>echo $?</code>查看结果是否为<code>0</code>，如果不是则表示没有正确执行。</p>\n<p>(4) 修改配置文件，命令如下：</p>\n<pre class=\"code-rows\"><code># cp php.ini-production /usr/local/php-fpm/etc/php.ini\n# vim /usr/local/php-fpm/etc/php-fpm.conf</code></pre>\n<p>把如下内容写入该文件：</p>\n<pre class=\"code-rows\"><code>[global]\npid = /usr/local/php-fpm/var/run/php-fpm.pid\nerror_log = /usr/local/php-fpm/var/log/php-fpm.log\n[www]\nlisten = /tmp/php-fcgi.sock\nlisten.mode = 666\nuser = php-fpm\ngroup = php-fpm\npm = dynamic\npm.max_children = 50\npm.start_servers = 20\npm.min_spare_servers = 5\npm.max_spare_servers = 35\npm.max_requests = 500\nrlimit_files = 1024</code></pre>\n<p>保存配置文件后，检验配置是否正确的方法如下：</p>\n<pre class=\"code-rows\"><code># /usr/local/php-fpm/sbin/php-fpm -t</code></pre>\n<p>如果显示<code>test is successful</code>，则说明配置没有问题，否则就要根据提示检查配置文件。</p>\n<p>(5) 启动<code>php-fpm</code>，命令如下：</p>\n<pre class=\"code-rows\"><code># cp ./sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm\n# chmod 755 /etc/init.d/php-fpm\n# service php-fpm start</code></pre>\n<p>设置<code>php-fpm</code>开机启动的命令如下：</p>\n<pre class=\"code-rows\"><code># chkconfig php-fpm on</code></pre>\n<p>检测<code>php-fpm</code>是否启动的命令如下：</p>\n<pre class=\"code-rows\"><code># ps aux |grep php-fpm</code></pre>\n<p>执行这条命令后，可以看到启动了很多个进程（大概二十多个）。</p>\n<h2 id=\"nav_point_293\">14.3 安装Nginx</h2>\n<p>从官方网站可以看到Nginx更新速度很快，这说明目前使用Nginx的用户越来越多了。但阿铭不建议你安装最新版本的Nginx，因为新版本难免会有一些Bug或者漏洞。阿铭建议你安装最近发布的stable版本，阿铭写作本书时，最近的stable版本为1.18。具体的下载安装步骤如下所示。</p>\n<p>(1) 下载和解压Nginx，命令如下：</p>\n<pre class=\"code-rows\"><code># cd /usr/local/src/\n# wget http://nginx.org/download/nginx-1.18.0.tar.gz\n# tar zxvf nginx-1.18.0.tar.gz</code></pre>\n<p>(2) 配置编译选项，命令如下：</p>\n<pre class=\"code-rows\"><code># cd nginx-1.18.0\n# ./configure --prefix=/usr/local/nginx</code></pre>\n<p>(3) 编译和安装Nginx，命令如下：</p>\n<pre class=\"code-rows\"><code># make\n# make install</code></pre>\n<p>因为Nginx的安装文件比较小，所以可以很快安装完，而且也不会出什么错误。</p>\n<p>(4) 编写Nginx启动脚本，并加入系统服务，命令如下：</p>\n<pre class=\"code-rows\"><code># vim /usr/lib/systemd/system/nginx.service // 写入如下内容\n\n[Unit]\nDescription=nginx - high performance web server\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nExecStart=/usr/local/nginx/sbin/nginx\nExecReload=/usr/local/nginx/sbin/nginx -s reload\nExecStop=/usr/local/nginx/sbin/nginx -s stop\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n<p>载入系统服务列表：</p>\n<pre class=\"code-rows\"><code># systemctl daemon-reload</code></pre>\n<p>使Nginx开机启动，请执行如下命令：</p>\n<pre class=\"code-rows\"><code># systemctl enable nginx.service</code></pre>\n<p>(5) 更改Nginx的配置文件。</p>\n<p>首先把原来的配置文件清空，操作方法如下：</p>\n<pre class=\"code-rows\"><code># &gt; /usr/local/nginx/conf/nginx.conf</code></pre>\n<p>重定向符号<code>&gt;</code>之前就介绍过，单独使用该符号时，可以把一个文本文档快速清空。然后编辑配置文件：</p>\n<pre class=\"code-rows\"><code># vim /usr/local/nginx/conf/nginx.conf // 写入如下内容\n\nuser nobody nobody;\nworker_processes 2;\nerror_log /usr/local/nginx/logs/nginx_error.log crit;\npid /usr/local/nginx/logs/nginx.pid;\nworker_rlimit_nofile 51200;\n\nevents\n{\n use epoll;\n worker_connections 6000;\n}\n\nhttp\n{\n include mime.types;\n default_type application/octet-stream;\n server_names_hash_bucket_size 3526;\n server_names_hash_max_size 4096;\n log_format combined_realip '$remote_addr $http_x_forwarded_for [$time_local]'\n ' $host \"$request_uri\" $status'\n ' \"$http_referer\" \"$http_user_agent\"';\n sendfile on;\n tcp_nopush on;\n keepalive_timeout 30;\n client_header_timeout 3m;\n client_body_timeout 3m;\n send_timeout 3m;\n connection_pool_size 256;\n client_header_buffer_size 1k;\n large_client_header_buffers 8 4k;\n request_pool_size 4k;\n output_buffers 4 32k;\n postpone_output 1460;\n client_max_body_size 10m;\n client_body_buffer_size 256k;\n client_body_temp_path /usr/local/nginx/client_body_temp;\n proxy_temp_path /usr/local/nginx/proxy_temp;\n fastcgi_temp_path /usr/local/nginx/fastcgi_temp;\n fastcgi_intercept_errors on;\n tcp_nodelay on;\n gzip on;\n gzip_min_length 1k;\n gzip_buffers 4 8k;\n gzip_comp_level 5;\n gzip_http_version 1.1;\n gzip_types text/plain application/x-javascript text/css text/htm\n application/xml;\n\n server\n {\n listen 80;\n server_name localhost;\n index index.html index.htm index.php;\n root /usr/local/nginx/html;\n\n location ~ \\.php$\n {\n include fastcgi_params;\n fastcgi_pass unix:/tmp/php-fcgi.sock;\n fastcgi_index index.php;\n fastcgi_param SCRIPT_FILENAME /usr/local/nginx/html$fastcgi_script_name;\n }\n }\n}</code></pre>\n<p>关于配置文件各个参数的含义，阿铭就不再多解释了，很多配置可以根据字面意思猜到含义。保存配置文件后，需要先检验一下其是否有错误，命令如下：</p>\n<pre class=\"code-rows\"><code># /usr/local/nginx/sbin/nginx -t</code></pre>\n<p>如果显示如下内容，则说明配置正确：</p>\n<pre class=\"code-rows\"><code>nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok\nnginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</code></pre>\n<p>否则，需要根据错误提示修改配置文件。</p>\n<p>(6) 启动Nginx，命令如下：</p>\n<pre class=\"code-rows\"><code># systemctl start nginx.service</code></pre>\n<p>如果不能启动，请查看/usr/local/nginx/logs/error.log文件，检查Nginx是否已启动，命令如下：</p>\n<pre class=\"code-rows\"><code># ps aux |grep nginx</code></pre>\n<p>(7) 测试是否正确解析PHP。</p>\n<p>首先创建测试文件，操作方法如下：</p>\n<pre class=\"code-rows\"><code># vim /usr/local/nginx/html/2.php</code></pre>\n<p>其内容如下：</p>\n<pre class=\"code-rows\"><code>&lt;?php\n echo \"test php scripts.\";\n?&gt;</code></pre>\n<p>执行如下命令测试文件：</p>\n<pre class=\"code-rows\"><code># curl localhost/2.php\ntest php scripts.</code></pre>\n<p>这说明PHP解析正常。</p>\n","neighbors":{"left":{"article_title":"第 13 章 Linux系统管理技巧(3)","id":741037},"right":{"article_title":"第 14 章 LNMP环境配置(2)","id":741039}},"comments":[]}