{"id":109572,"title":"01 | 为什么需要消息队列？","content":"<p>你好，我是李玥。今天我们来讲讲为什么需要消息队列，消息队列主要解决的是什么问题。</p><p>消息队列是最古老的中间件之一，从系统之间有通信需求开始，就自然产生了消息队列。但是给消息队列下一个准确的定义却不太容易。我们知道，消息队列的主要功能就是收发消息，但是它的作用不仅仅只是解决应用之间的通信问题这么简单。</p><p>我们举个例子说明一下消息队列的作用。话说小袁是一家巧克力作坊的老板，生产出美味的巧克力需要三道工序：首先将可可豆磨成可可粉，然后将可可粉加热并加入糖变成巧克力浆，最后将巧克力浆灌入模具，撒上坚果碎，冷却后就是成品巧克力了。</p><p>最开始的时候，每次研磨出一桶可可粉后，工人就会把这桶可可粉送到加工巧克力浆的工人手上，然后再回来加工下一桶可可粉。小袁很快就发现，其实工人可以不用自己运送半成品，于是他在每道工序之间都增加了一组传送带，研磨工人只要把研磨好的可可粉放到传送带上，就可以去加工下一桶可可粉了。 传送带解决了上下游工序之间的“通信”问题。</p><p>传送带上线后确实提高了生产效率，但也带来了新的问题：每道工序的生产速度并不相同。在巧克力浆车间，一桶可可粉传送过来时，工人可能正在加工上一批可可粉，没有时间接收。不同工序的工人们必须协调好什么时间往传送带上放置半成品，如果出现上下游工序加工速度不一致的情况，上下游工人之间必须互相等待，确保不会出现传送带上的半成品无人接收的情况。</p><!-- [[[read_end]]] --><p>为了解决这个问题，小袁在每组传送的下游带配备了一个暂存半成品的仓库，这样上游工人就不用等待下游工人有空，任何时间都可以把加工完成的半成品丢到传送带上，无法接收的货物被暂存在仓库中，下游工人可以随时来取。传送带配备的仓库实际上起到了“通信”过程中“缓存”的作用。</p><p><img src=\"https://static001.geekbang.org/resource/image/84/ec/8476bca6176a7a11de452afca940feec.jpg?wh=4266*1225\" alt=\"\"><br>\n传送带解决了半成品运输问题，仓库可以暂存一些半成品，解决了上下游生产速度不一致的问题，小袁在不知不觉中实现了一个巧克力工厂版的消息队列。</p><h2>哪些问题适合使用消息队列来解决？</h2><p>接下来我们说一下日常开发中，哪些问题适合使用消息队列解决。</p><h4>1. 异步处理</h4><p>大多数程序员在面试中，应该都问过或被问过一个经典却没有标准答案的问题：如何设计一个秒杀系统？这个问题可以有一百个版本的合理答案，但大多数答案中都离不开消息队列。</p><p>秒杀系统需要解决的核心问题是，如何利用有限的服务器资源，尽可能多地处理短时间内的海量请求。我们知道，处理一个秒杀请求包含了很多步骤，例如：</p><ul>\n<li>风险控制；</li>\n<li>库存锁定；</li>\n<li>生成订单；</li>\n<li>短信通知；</li>\n<li>更新统计数据。</li>\n</ul><p>如果没有任何优化，正常的处理流程是：App将请求发送给网关，依次调用上述5个流程，然后将结果返回给APP。</p><p>对于这5个步骤来说，能否决定秒杀成功，实际上只有风险控制和库存锁定这2个步骤。只要用户的秒杀请求通过风险控制，并在服务端完成库存锁定，就可以给用户返回秒杀结果了，对于后续的生成订单、短信通知和更新统计数据等步骤，并不一定要在秒杀请求中处理完成。</p><p>所以当服务端完成前面2个步骤，确定本次请求的秒杀结果后，就可以马上给用户返回响应，然后把请求的数据放入消息队列中，由消息队列异步地进行后续的操作。</p><p><img src=\"https://static001.geekbang.org/resource/image/d2/be/d2c1ee3d4478580c0d2a8d80d0e833be.jpg?wh=4266*1160\" alt=\"\"></p><p>处理一个秒杀请求，从5个步骤减少为2个步骤，这样不仅响应速度更快，并且在秒杀期间，我们可以把大量的服务器资源用来处理秒杀请求。秒杀结束后再把资源用于处理后面的步骤，充分利用有限的服务器资源处理更多的秒杀请求。</p><p><strong>可以看到，在这个场景中，消息队列被用于实现服务的异步处理。</strong>这样做的好处是：</p><ul>\n<li>可以更快地返回结果；</li>\n<li>减少等待，自然实现了步骤之间的并发，提升系统总体的性能。</li>\n</ul><h4>2. 流量控制</h4><p>继续说我们的秒杀系统，我们已经使用消息队列实现了部分工作的异步处理，但我们还面临一个问题：如何避免过多的请求压垮我们的秒杀系统？</p><p>一个设计健壮的程序有自我保护的能力，也就是说，它应该可以在海量的请求下，还能在自身能力范围内尽可能多地处理请求，拒绝处理不了的请求并且保证自身运行正常。不幸的是，现实中很多程序并没有那么“健壮”，而直接拒绝请求返回错误对于用户来说也是不怎么好的体验。</p><p>因此，我们需要设计一套足够健壮的架构来将后端的服务保护起来。<strong>我们的设计思路是，使用消息队列隔离网关和后端服务，以达到流量控制和保护后端服务的目的。</strong></p><p>加入消息队列后，整个秒杀流程变为：</p><ol>\n<li>网关在收到请求后，将请求放入请求消息队列；</li>\n<li>后端服务从请求消息队列中获取APP请求，完成后续秒杀处理过程，然后返回结果。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/79/4a/7909fb792a059e22a0a269c1f2cde64a.jpg?wh=3843*680\" alt=\"\"></p><p>秒杀开始后，当短时间内大量的秒杀请求到达网关时，不会直接冲击到后端的秒杀服务，而是先堆积在消息队列中，后端服务按照自己的最大处理能力，从消息队列中消费请求进行处理。</p><p>对于超时的请求可以直接丢弃，APP将超时无响应的请求处理为秒杀失败即可。运维人员还可以随时增加秒杀服务的实例数量进行水平扩容，而不用对系统的其他部分做任何更改。</p><p>这种设计的优点是：能根据下游的处理能力自动调节流量，达到“削峰填谷”的作用。但这样做同样是有代价的：</p><ul>\n<li>增加了系统调用链环节，导致总体的响应时延变长。</li>\n<li>上下游系统都要将同步调用改为异步消息，增加了系统的复杂度。</li>\n</ul><p>那还有没有更简单一点儿的流量控制方法呢？如果我们能预估出秒杀服务的处理能力，就可以用消息队列实现一个令牌桶，更简单地进行流量控制。</p><p>令牌桶控制流量的原理是：单位时间内只发放固定数量的令牌到令牌桶中，规定服务在处理请求之前必须先从令牌桶中拿出一个令牌，如果令牌桶中没有令牌，则拒绝请求。这样就保证单位时间内，能处理的请求不超过发放令牌的数量，起到了流量控制的作用。</p><p><img src=\"https://static001.geekbang.org/resource/image/2c/89/2c4e42056b78fff7746de28245910f89.jpg?wh=3599*1063\" alt=\"\"></p><p>实现的方式也很简单，不需要破坏原有的调用链，只要网关在处理APP请求时增加一个获取令牌的逻辑。</p><p>令牌桶可以简单地用一个有固定容量的消息队列加一个“令牌发生器”来实现：令牌发生器按照预估的处理能力，匀速生产令牌并放入令牌队列（如果队列满了则丢弃令牌），网关在收到请求时去令牌队列消费一个令牌，获取到令牌则继续调用后端秒杀服务，如果获取不到令牌则直接返回秒杀失败。</p><p>以上是常用的使用消息队列两种进行流量控制的设计方法，你可以根据各自的优缺点和不同的适用场景进行合理选择。</p><h4>3. 服务解耦</h4><p>消息队列的另外一个作用，就是实现系统应用之间的解耦。再举一个电商的例子来说明解耦的作用和必要性。</p><p>我们知道订单是电商系统中比较核心的数据，当一个新订单创建时：</p><ol>\n<li>支付系统需要发起支付流程；</li>\n<li>风控系统需要审核订单的合法性；</li>\n<li>客服系统需要给用户发短信告知用户；</li>\n<li>经营分析系统需要更新统计数据；</li>\n<li>……</li>\n</ol><p>这些订单下游的系统都需要实时获得订单数据。随着业务不断发展，这些订单下游系统不断的增加，不断变化，并且每个系统可能只需要订单数据的一个子集，负责订单服务的开发团队不得不花费很大的精力，应对不断增加变化的下游系统，不停地修改调试订单系统与这些下游系统的接口。任何一个下游系统接口变更，都需要订单模块重新进行一次上线，对于一个电商的核心服务来说，这几乎是不可接受的。</p><p>所有的电商都选择用消息队列来解决类似的系统耦合过于紧密的问题。引入消息队列后，订单服务在订单变化时发送一条消息到消息队列的一个主题Order中，所有下游系统都订阅主题Order，这样每个下游系统都可以获得一份实时完整的订单数据。</p><p>无论增加、减少下游系统或是下游系统需求如何变化，订单服务都无需做任何更改，实现了订单服务与下游服务的解耦。</p><h2>小结</h2><p>以上就是消息队列最常被使用的三种场景：异步处理、流量控制和服务解耦。当然，消息队列的适用范围不仅仅局限于这些场景，还有包括：</p><ul>\n<li>作为发布/订阅系统实现一个微服务级系统间的观察者模式；</li>\n<li>连接流计算任务和数据；</li>\n<li>用于将消息广播给大量接收者。</li>\n</ul><p>简单的说，我们在单体应用里面需要用队列解决的问题，在分布式系统中大多都可以用消息队列来解决。</p><p>同时我们也要认识到，消息队列也有它自身的一些问题和局限性，包括：</p><ul>\n<li>引入消息队列带来的延迟问题；</li>\n<li>增加了系统的复杂度；</li>\n<li>可能产生数据不一致的问题。</li>\n</ul><p>所以我们说没有最好的架构，只有最适合的架构，根据目标业务的特点和自身条件选择合适的架构，才是体现一个架构师功力的地方。</p><h2>思考题</h2><p>在你工作或学习涉及到的系统中，哪些问题可以通过引入消息队列来解决？对于系统中已经使用消息队列，可以对应到这一讲中提到的哪个场景？如果没有可以对应的场景，那这个消息队列在系统中起到的是什么作用？解决了什么问题？是否又带来了什么新的问题？欢迎在留言区写下你的想法。</p><p>感谢阅读，如果你觉得这篇文章对你有帮助的话，也欢迎把它分享给你的朋友。</p>","neighbors":{"left":{"article_title":"预习 | 怎样更好地学习这门课？","id":109457},"right":{"article_title":"02 | 该如何选择消息队列？","id":109750}},"comments":[{"had_liked":false,"id":116990,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1563952086,"is_pvip":false,"replies":[{"id":42923,"content":"总结到位，赞👍。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564018320,"ip_address":"","comment_id":116990,"utype":1}],"discussion_count":19,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"个人的体会，消息队列的本质是将同步处理转成异步处理，异步会带来相应的好处，但也有弊端。\nPros: \n1.可在模块、服务、接口等不同粒度上实现解耦\n2.订阅&#47;消费模式也可在数据粒度上解耦\n3.可提高系统的并发能力，集中力量办大事(同步部分)，碎片时间做小事(异步部分)\n4.可提高系统可用性，因为缓冲了系统负载\n\nCons:\n1.降低了数据一致性，如要保持强一致性，需要高代价的补偿(如分布式事务、对账)\n2.有数据丢失风险，如宕机重启，如要保证队列数据可用，需要额外机制保证(如双活容灾)\n\n总体来说，消息队列的适用场景还是很多的，如秒杀、发邮件、发短信、高并发订单等，不适合的场景如银行转账、电信开户、第三方支付等。关键还是要意识到消息队列的优劣点，然后分析场景是否适用则会水到渠成。","like_count":211},{"had_liked":false,"id":117283,"user_name":"beiler","can_delete":false,"product_type":"c1","uid":1192989,"ip_address":"","ucode":"0A62FE86617486","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/1d/169cd800.jpg","comment_is_top":false,"comment_ctime":1564018436,"is_pvip":false,"replies":[{"id":42955,"content":"首先redis肯定是不适合存消息的，虽然redis性能很好，但那是和主流的数据库比，一般大概能到几万tps左右；而现代的消息队列都能很轻松的做到几十万tps级别的性能。\n\n消息量特别大的时候，需要考虑使用有消息堆积能力的MQ，因为一旦消费慢，大量消息就会堆积到MQ中，这种情况不太适合用RabbitMQ，可以考虑RocketMQ、Kafka和Pulsar。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564020193,"ip_address":"","comment_id":117283,"utype":1}],"discussion_count":8,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"还有个问题，如果消息量特别大的时候，消息是适合存在到redis中还是适合存到rabbitmq中？必定您在文中提到一个词，小仓库，如果货量大了怎么办？","like_count":91,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459768,"discussion_content":"总结到位，赞👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564018320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":536095,"discussion_content":"没想到老师今年还在回复 太猛了 准备看完这个再看存储","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638685720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":459768,"ip_address":"","group_id":0},"score":536095,"extra":""}]},{"author":{"id":1642581,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/55/a854dc46.jpg","nickname":"刘知昊","note":"","ucode":"F493ADA56ECD3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383298,"discussion_content":"What is [Cons]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626050631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1642581,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/55/a854dc46.jpg","nickname":"刘知昊","note":"","ucode":"F493ADA56ECD3F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545405,"discussion_content":"优缺点 cons pros","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641951619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":383298,"ip_address":"","group_id":0},"score":545405,"extra":""}]},{"author":{"id":1448505,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1a/39/b7b0bc89.jpg","nickname":"Qubit","note":"","ucode":"21731004A5EA0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353248,"discussion_content":"请教一下为何宕机重启后数据丢失？比如像Kafka这种存磁盘上了，是不是也是可以恢复的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615094631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1448505,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1a/39/b7b0bc89.jpg","nickname":"Qubit","note":"","ucode":"21731004A5EA0E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545408,"discussion_content":"我理解是说的 文件存储的实际，为了极高的性能 会放弃确认数据落盘后才返回，而是进入写文件缓存就返回。\n\n\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641951709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":353248,"ip_address":"","group_id":0},"score":545408,"extra":""}]},{"author":{"id":1609530,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/l4nngwyggBGqeMXC0micwO8bM1hSttgQXa1Y5frJSqWa8NibDhia5icwPcHM5wOpV3hfsf0UicDY0ypFqnQ3iarG0T1w/132","nickname":"Trident","note":"","ucode":"53E6788CF33398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171852,"discussion_content":"总结的很精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581752855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1482915,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","nickname":"业余爱好者","note":"","ucode":"A890935A982988","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":57067,"discussion_content":"同步转异步精辟，说出我我想表达的意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574564378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8407,"discussion_content":"兄台所言极是啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567998071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070683,"avatar":"","nickname":"兢","note":"","ucode":"878EAA03E02C1C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4206,"discussion_content":"请问一下为什么银行转账，电信开户，第三方支付的场景不适合消息队列","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565227515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":8,"child_discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1070683,"avatar":"","nickname":"兢","note":"","ucode":"878EAA03E02C1C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4229,"discussion_content":"因为这些场景的数据一致性要求很高，而消息队列的缺点是不能很好的保证数据强一致性，要保证的话需要牺牲性能，那么消息队列的优势就没了，所以强数据一致性的场景优先用同步，如数据库事务。","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1565243252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4206,"ip_address":"","group_id":0},"score":4229,"extra":""},{"author":{"id":1219623,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9c/27/5e8d8e25.jpg","nickname":"念，，","note":"","ucode":"09C3B142CB3104","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1070683,"avatar":"","nickname":"兢","note":"","ucode":"878EAA03E02C1C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5588,"discussion_content":"数据一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566364977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4206,"ip_address":"","group_id":0},"score":5588,"extra":""},{"author":{"id":1315147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","nickname":"xfan","note":"","ucode":"48ED8D498D7F56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37794,"discussion_content":"不完全正确，也可以采用分布式事务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571667812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4229,"ip_address":"","group_id":0},"score":37794,"extra":""}]},{"author":{"id":1351816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a0/88/a4ffd85e.jpg","nickname":"樊不烦","note":"","ucode":"07182A8CCFA169","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3400,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564457745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116750,"user_name":"游弋云端","can_delete":false,"product_type":"c1","uid":1208637,"ip_address":"","ucode":"A960E8F5AA25B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/71/3d/da8dc880.jpg","comment_is_top":false,"comment_ctime":1563901221,"is_pvip":false,"replies":[{"id":42743,"content":"如果你说的共享内存指的是PageCache，很多消息队列都会用到，RDMA据我所知常见的几种消息队列应该都还没有使用，像Kafka它在消费的时候，直接使用Zero Copy，数据直接从PageCache写到NIC的缓冲区中，都不需要进入应用内存空间。\n\n另外，现代的消息队列瓶颈并不在本机内存数据交换这块，主要还是受限于网卡带宽或者磁盘的IO，像JMQ、Kafka这些消息队列，都可以打满万兆网卡或者把磁盘的读写速度拉满。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563935411,"ip_address":"","comment_id":116750,"utype":1}],"discussion_count":8,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"是否可以利用共享内存、RDMA加速消息队列的性能，老师在这块有没有实践经验？","like_count":60,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459672,"discussion_content":"如果你说的共享内存指的是PageCache，很多消息队列都会用到，RDMA据我所知常见的几种消息队列应该都还没有使用，像Kafka它在消费的时候，直接使用Zero Copy，数据直接从PageCache写到NIC的缓冲区中，都不需要进入应用内存空间。\n\n另外，现代的消息队列瓶颈并不在本机内存数据交换这块，主要还是受限于网卡带宽或者磁盘的IO，像JMQ、Kafka这些消息队列，都可以打满万兆网卡或者把磁盘的读写速度拉满。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563935411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2993642,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTItn9PP2H5Ric22icbwf38RSrGFGCo8dotWcdreHVU0oE31gZqJSeMN19bQUhHAt2dZG25biaU0zUrsg/132","nickname":"Geek_972ce9","note":"","ucode":"643D18ED65BEDB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":609783,"discussion_content":"kafka的零拷贝就是借助的dma吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679210603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":459672,"ip_address":"广东","group_id":0},"score":609783,"extra":""}]},{"author":{"id":1186190,"avatar":"","nickname":"Kolter","note":"","ucode":"35FB790C614A1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383844,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626252048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1802337,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/80/61/ae3bb67c.jpg","nickname":"毛毛虫大帝","note":"","ucode":"1EBB026121C060","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":155207,"discussion_content":"内核优化的api函数sendfile","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580220884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111088,"discussion_content":"RDMA和消息队列没关系吧，是硬件要支持的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577779306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1124083,"avatar":"https://static001.geekbang.org/account/avatar/00/11/26/f3/cd8eea0b.jpg","nickname":"Muscleape","note":"","ucode":"FCD7641E1DD709","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2926,"discussion_content":"画个重点：现代的消息队列瓶颈并不在本机内存数据交换这块，主要还是受限于网卡带宽或者磁盘的IO，像JMQ、Kafka这些消息队列，都可以打满万兆网卡或者把磁盘的读写速度拉满。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564041317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1315147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","nickname":"xfan","note":"","ucode":"48ED8D498D7F56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1124083,"avatar":"https://static001.geekbang.org/account/avatar/00/11/26/f3/cd8eea0b.jpg","nickname":"Muscleape","note":"","ucode":"FCD7641E1DD709","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37795,"discussion_content":"重点没画对，kafka使用zero copy 将数据从pagecache直接写道nic","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571668021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2926,"ip_address":"","group_id":0},"score":37795,"extra":""},{"author":{"id":2015438,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c0/ce/eb1b4ae1.jpg","nickname":"可圈可丶","note":"","ucode":"EB527E176EDE91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1315147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","nickname":"xfan","note":"","ucode":"48ED8D498D7F56","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304670,"discussion_content":"你才是对的，kafka就强在零拷贝和磁盘顺序读写","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599638339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37795,"ip_address":"","group_id":0},"score":304670,"extra":""}]}]},{"had_liked":false,"id":117281,"user_name":"beiler","can_delete":false,"product_type":"c1","uid":1192989,"ip_address":"","ucode":"0A62FE86617486","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/1d/169cd800.jpg","comment_is_top":false,"comment_ctime":1564018272,"is_pvip":false,"replies":[{"id":42956,"content":"如果计数只是为了控制流量，没必要那么精确。\n\n如果计数是业务需求必须要求准确，简单一点的话，可以使用Redis的INCR命令来计数，这个是可以保证原子性的。Redis性能要是不能满足要求，也可以用Kafka+flink集群来解决。这两种方案都是可以保证完全准确计数的。\n\n另外，计数不准的问题，并不一定是计数模块本身的问题，还要查一下是不是系统的其它部分有bug，导致重复计数或者漏计。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564020613,"ip_address":"","comment_id":117281,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"令牌桶给了我很大的启发，我们可以在策略中心设置令牌桶，然后通过令牌桶控制整个job的产出和数量。这样就不会经常有几百万个job了，缓存的压力也会大幅度减小。但是有一个很诡异的问题，就以秒杀系统为例（我们的系统要比秒杀复杂点），我发现这种异步系统如果需要统计任务数量的时候经常会计数不准，尽管在计数的时候我选择了原子操作，但是计数还是会出现不准的现象。这个让我很苦恼，而且往往是运行很久的任务会出现不准，往往只有在任务结束的时候发现任务不准，这个问题很难查，请问老师有什么好建议吗","like_count":52,"discussions":[{"author":{"id":1124083,"avatar":"https://static001.geekbang.org/account/avatar/00/11/26/f3/cd8eea0b.jpg","nickname":"Muscleape","note":"","ucode":"FCD7641E1DD709","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2925,"discussion_content":"画个重点：可以使用Redis的INCR命令来计数，这个是可以保证原子性的。Redis性能要是不能满足要求，也可以用Kafka+flink集群来解决。","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1564041086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459896,"discussion_content":"如果计数只是为了控制流量，没必要那么精确。\n\n如果计数是业务需求必须要求准确，简单一点的话，可以使用Redis的INCR命令来计数，这个是可以保证原子性的。Redis性能要是不能满足要求，也可以用Kafka+flink集群来解决。这两种方案都是可以保证完全准确计数的。\n\n另外，计数不准的问题，并不一定是计数模块本身的问题，还要查一下是不是系统的其它部分有bug，导致重复计数或者漏计。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564020613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1192989,"avatar":"https://static001.geekbang.org/account/avatar/00/12/34/1d/169cd800.jpg","nickname":"beiler","note":"","ucode":"0A62FE86617486","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2947,"discussion_content":"我们确实是用的redis incr，但是由于我们是迭代式的，很难判断出哪不准，这个就不难为老师了，必定场景复杂 ฅ( ̳• ◡ • ̳)ฅ，多谢老师","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564057042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545944,"discussion_content":"画个重点：可以使用Redis的INCR命令来计数，这个是可以保证原子性的。Redis性能要是不能满足要求，也可以用Kafka+flink集群来解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642088229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119245,"user_name":"撒旦的堕落","can_delete":false,"product_type":"c1","uid":1116864,"ip_address":"","ucode":"15F6AA41EE556F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0a/c0/401c240e.jpg","comment_is_top":false,"comment_ctime":1564542824,"is_pvip":false,"replies":[{"id":43834,"content":"对于网关某一个处理前端请求线程来说，大致的流程是：\n\n0.收到Request\n1.发消息\n2.阻塞等待，直到超时或者收到后端的秒杀结果；\n3.返回Response\n\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564626089,"ip_address":"","comment_id":119245,"utype":1}],"discussion_count":16,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"我懵的地方就是用队列 将同步改成了异步  那么原来同步的request 和response是一对 那么改成异步后  怎么通知用户 难道还用原来的那个response ？ 还是当秒杀成功后  根据用户的id 查询到信息 比如手机号码 然后发短信给他  或者是向用户推消息什么的  ","like_count":39,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460804,"discussion_content":"对于网关某一个处理前端请求线程来说，大致的流程是：\n\n0.收到Request\n1.发消息\n2.阻塞等待，直到超时或者收到后端的秒杀结果；\n3.返回Response\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564626089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548224,"discussion_content":"个人没理解老师的回复，而且觉得老师的回复有些答非所问。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1643092055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1522220,"avatar":"https://static001.geekbang.org/account/avatar/00/17/3a/2c/683ae4af.jpg","nickname":"豆花羹","note":"","ucode":"57D8F64988C305","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531707,"discussion_content":"请教下网关要如何收到后端服务的消息呢，通过轮询或者回调的方式么？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637393645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1203293,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5c/5d/974b033f.jpg","nickname":"陆老师","note":"","ucode":"0EA27C4755FF4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359194,"discussion_content":"这样子的话，就是同步阻塞方式了，主动等待结果就是同步。在高并发情况下，都这么同步阻塞等待，大量线程被占用，马上你的服务就不可用了。虽然你的请求数据给其他下游异步低消费处理了，但本质上还是同步啊，有问题的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616135198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1190963,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKtxPelZRoA8WOx5ESmW4CIj9icf1XHNsDqyCaBudmVzSX2pSiacEn7IlLRic8ePegiaRwBet7nwKQkicg/132","nickname":"超级小帅兔","note":"","ucode":"3D9FAC98D82637","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1203293,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5c/5d/974b033f.jpg","nickname":"陆老师","note":"","ucode":"0EA27C4755FF4A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387694,"discussion_content":"作者的回复是前端处理逻辑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628348705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":359194,"ip_address":"","group_id":0},"score":387694,"extra":""},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190963,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKtxPelZRoA8WOx5ESmW4CIj9icf1XHNsDqyCaBudmVzSX2pSiacEn7IlLRic8ePegiaRwBet7nwKQkicg/132","nickname":"超级小帅兔","note":"","ucode":"3D9FAC98D82637","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548223,"discussion_content":"没明白？老师的原话，网关某一个处理前端请求线程，这明显不是网关层的处理前端请求的逻辑？！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643091979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387694,"ip_address":"","group_id":0},"score":548223,"extra":""}]},{"author":{"id":1542778,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8a/7a/54003392.jpg","nickname":"Geek_27a248","note":"","ucode":"6AC3AC42E6EEC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633304,"discussion_content":"前端发送秒杀请求到网关、网关同步阻塞等待后端服务响应（这一步可以理解为给mq排队、后端依次响应），响应结束返回给网关结果、网关返回结果给用户。不知道这样理解对不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701992662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2106016,"avatar":"https://static001.geekbang.org/account/avatar/00/20/22/a0/d8631910.jpg","nickname":"Y a n g","note":"","ucode":"A59C5958750550","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582662,"discussion_content":"webflux加future模式，不需要阻塞网关的工作线程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659582452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"云南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1147418,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","nickname":"陈靖","note":"","ucode":"8C9596A54DB5C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291481,"discussion_content":"如果放队列了，还需要阻塞等待吗？消息来了再处理不是更好吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594831911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250587,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/1b/448b2775.jpg","nickname":"二货","note":"","ucode":"CF80FB9F35FC3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":253522,"discussion_content":"个人觉得如果是非强依赖的服务，只是单纯的消费者，是不需要在response中放值的，直接消费就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588240486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095857,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","nickname":"梦倚栏杆","note":"","ucode":"BDEB97F2822445","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208680,"discussion_content":"我也有疑问：阻塞等待从redis，mysql等存储性中交互获取返回结果我可以理解，但是下游既然是异步，用消息返回，是消息接收到还要弄到一个存储系统里吗？这是不是就是线程间的通信呀，理解这个了是不是就知道怎么做了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584575855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1147418,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","nickname":"陈靖","note":"","ucode":"8C9596A54DB5C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207710,"discussion_content":"没看懂这个阻塞等待怎么做的?消息异步处理了?咋等待呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584509701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1494020,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cc/04/f96e3d2a.jpg","nickname":"盛贤","note":"","ucode":"CBFEE10504B070","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1147418,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","nickname":"陈靖","note":"","ucode":"8C9596A54DB5C8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212132,"discussion_content":"需要异步转同步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584938435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":207710,"ip_address":"","group_id":0},"score":212132,"extra":""},{"author":{"id":1147418,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","nickname":"陈靖","note":"","ucode":"8C9596A54DB5C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1494020,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cc/04/f96e3d2a.jpg","nickname":"盛贤","note":"","ucode":"CBFEE10504B070","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213645,"discussion_content":"异步转同步和直接同步有啥区别，为啥不直接同步?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585111408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":212132,"ip_address":"","group_id":0},"score":213645,"extra":""},{"author":{"id":1793425,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5d/91/9b6fb4ad.jpg","nickname":"daiwf","note":"","ucode":"2C78451F5488BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1147418,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","nickname":"陈靖","note":"","ucode":"8C9596A54DB5C8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291456,"discussion_content":"直接同步太快了 后台遭不住可能会被打崩了。但是放到队列里就排队来。不会崩溃。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594823024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":213645,"ip_address":"","group_id":0},"score":291456,"extra":""}]}]},{"had_liked":false,"id":118848,"user_name":"linqw","can_delete":false,"product_type":"c1","uid":1134138,"ip_address":"","ucode":"09DCFE98C54DD8","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/3a/86196508.jpg","comment_is_top":false,"comment_ctime":1564452387,"is_pvip":false,"replies":[{"id":43681,"content":"A1：实际上，只要有足够的磁盘容量，消息队列确实可以存放无限的消息。像秒杀请求这种数据，峰值并发高，但总数据量并不是很大，所以，堆积在消息队列中完全没问题。\n\nA2：都按照秒杀失败处理即可。\n\nA3：响应一般采用RPC来实现。超时或者返回秒杀结果之前，网关和APP确实要保持连接，这是HTTP协议决定的。至于网关能不能承受海量的APP连接，这个应该不用担心，网关的作用就是用来抗海量连接的，它也会有各种方法来解决这个问题。\n\n4、是的，大部分生产系统中的消息队列要配置成集群，确保可用性和数据可靠性，这个后面的课程我们会讲。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564534929,"ip_address":"","comment_id":118848,"utype":1}],"discussion_count":14,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"APP⇆网关--生产--&gt;消息队列--消费--&gt;秒杀服务，有几点疑惑，老师有空帮忙解答下哦\n1、海量的请求都放在消息队列中，消息队列的整体容量如何衡量了？消息队列不可能能存放无限的消息，消息队列满应该也会有拒绝策略，比如线程池的任务队列，任务队列满，并且超过最大的线程池数，四种的拒绝策略。\n2、APP响应超时，即网关超过一定的时间没有返回，消息还在任务队列中，还是会被秒杀服务处理，这样的话，返回给APP秒杀失败，但是秒杀服务已经消费了消息？难道是在网关做补偿么？如果连接已经断开，将秒杀服务对此消息的处理做回滚操作么？\n3、网关和秒杀服务是通过消息队列进行通信，那响应消息也通过队列进行返回么？队列中会有APP对应的地址比如IP之类的？那这样的话，APP的海量连接都同时连接着网关，不是会有问题么？\n4、消息队列应该也会做多备的策略？比如队列消息的服务挂了，那些消息全部不见，这样不是也会存在问题么？","like_count":31,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460613,"discussion_content":"A1：实际上，只要有足够的磁盘容量，消息队列确实可以存放无限的消息。像秒杀请求这种数据，峰值并发高，但总数据量并不是很大，所以，堆积在消息队列中完全没问题。\n\nA2：都按照秒杀失败处理即可。\n\nA3：响应一般采用RPC来实现。超时或者返回秒杀结果之前，网关和APP确实要保持连接，这是HTTP协议决定的。至于网关能不能承受海量的APP连接，这个应该不用担心，网关的作用就是用来抗海量连接的，它也会有各种方法来解决这个问题。\n\n4、是的，大部分生产系统中的消息队列要配置成集群，确保可用性和数据可靠性，这个后面的课程我们会讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564534929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548228,"discussion_content":"老师对问题2和3的回答依然有些没答完整。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1643093263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3050745,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8c/f9/e1dab0ca.jpg","nickname":"怎么睡才能做这种梦","note":"","ucode":"81A7B6EF124E90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603756,"discussion_content":"我觉得老师讲的令牌桶可以解决这个问题，没得令牌时直接抛失败，也不给发消息给队列。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676272356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":548228,"ip_address":"湖北","group_id":0},"score":603756,"extra":""}]},{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545945,"discussion_content":"好问题，Mark一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642088909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1315147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","nickname":"xfan","note":"","ucode":"48ED8D498D7F56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37801,"discussion_content":"A2应该是网关后超时","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571668765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1277081,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","nickname":"lakeslove","note":"","ucode":"65E14D29D3C981","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1315147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","nickname":"xfan","note":"","ucode":"48ED8D498D7F56","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165753,"discussion_content":"这个能详细说一下吗？因为不是原子操作，像“返回给APP秒杀失败，但是秒杀服务已经消费了消息“这个问题，如果不引入分布式锁，感觉很难解决啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581322631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37801,"ip_address":"","group_id":0},"score":165753,"extra":""},{"author":{"id":1277081,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","nickname":"lakeslove","note":"","ucode":"65E14D29D3C981","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1315147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","nickname":"xfan","note":"","ucode":"48ED8D498D7F56","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165760,"discussion_content":"翻看了下后面的评论，评论给出了一个解决方案，没用分布式锁：这个就是比较细节的问题了，实现的方式也可以有多种，比如：在消息中带一个请求时间戳，后续服务在处理前先检查一下是否已经超时，超时就直接丢掉不处理。","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1581323224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37801,"ip_address":"","group_id":0},"score":165760,"extra":""},{"author":{"id":1931524,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/79/04/748ee8c9.jpg","nickname":"想出家的小和尚","note":"","ucode":"7C079ADC43577F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1277081,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","nickname":"lakeslove","note":"","ucode":"65E14D29D3C981","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243646,"discussion_content":"消息中带一个超时时间，消费者判断是否超时，如果超时直接丢弃！","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1587555036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":165753,"ip_address":"","group_id":0},"score":243646,"extra":""}]},{"author":{"id":1036566,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d1/16/6347bbc0.jpg","nickname":"顶新","note":"","ucode":"241D3CCCAE536B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8659,"discussion_content":"李老师，A3问题的回答能详细一点吗？响应一般采用RPC来实现，能否举个场景说明一下呢？感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568033610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1238619,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e6/5b/07e1a8e3.jpg","nickname":"Tsundere","note":"","ucode":"3A8CED0747BF32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1036566,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d1/16/6347bbc0.jpg","nickname":"顶新","note":"","ucode":"241D3CCCAE536B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291912,"discussion_content":"rpc怎么返回呢？不太理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594997032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8659,"ip_address":"","group_id":0},"score":291912,"extra":""},{"author":{"id":1806768,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLQZzmZq5MInIt27FZVGGq8MmayX9cGGnzxI7d5Ealibmxh0je1ZYyg5r3dByX6WtG2huXsQoJHXg/132","nickname":"Alan.Liu","note":"","ucode":"78269B636DABE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1238619,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e6/5b/07e1a8e3.jpg","nickname":"Tsundere","note":"","ucode":"3A8CED0747BF32","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305029,"discussion_content":"此处mark 一下。需要从本质上理解RPC.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599745916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":291912,"ip_address":"","group_id":0},"score":305029,"extra":""}]}]},{"had_liked":false,"id":116311,"user_name":"白小白","can_delete":false,"product_type":"c1","uid":1400416,"ip_address":"","ucode":"143F1C8294818A","user_header":"https://static001.geekbang.org/account/avatar/00/15/5e/60/1c13626b.jpg","comment_is_top":false,"comment_ctime":1563840043,"is_pvip":false,"replies":[{"id":42558,"content":"是的，令牌桶可以用消息队列实现，也可以用Redis实现，你也可以写一个简单的令牌桶服务，原理是一样的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846529,"ip_address":"","comment_id":116311,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"现在用的消息队列主要是做数据异步传输用的，之前也做过多个系统之间的解耦。看到用消息队列做秒杀系统，忽然想到之前只想过用redis去做，利用redis去做了流量的把控。不过细想想，这种情况下的redis和文章中的令牌桶很像……","like_count":30,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459480,"discussion_content":"是的，令牌桶可以用消息队列实现，也可以用Redis实现，你也可以写一个简单的令牌桶服务，原理是一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008312,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/b8/0e1b655e.jpg","nickname":"fireshort","note":"","ucode":"10550CA9C6C730","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593375,"discussion_content":"Spring Cloud Gateway里面的RedisRateLimiter就是用了redis实现的令牌桶算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668135001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111090,"discussion_content":"原生的信号量貌似就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577779468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116296,"user_name":"小趴菜～","can_delete":false,"product_type":"c1","uid":1178011,"ip_address":"","ucode":"7E82F2B5930CD5","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/9b/dc074a7e.jpg","comment_is_top":false,"comment_ctime":1563837007,"is_pvip":false,"replies":[{"id":42554,"content":"总结的很赞！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846276,"ip_address":"","comment_id":116296,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"生产项目中用到了kafka，\n1 异部的处理交易：提高用户请求的响应速度，同时也提升了用户的体验感。\n2 削峰 ：保护服务器的一种方式，用户的请求放到kafka中，交易服务根据自己服务器的消费能力来消费交易数据。\n3 项目的解耦：交易服务和后续的服务之间是通过Kafka进行交付，当一个服务为多个服务提供数据的时候，可以通过MQ进行交换来解耦服务间的耦合。","like_count":25,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459480,"discussion_content":"是的，令牌桶可以用消息队列实现，也可以用Redis实现，你也可以写一个简单的令牌桶服务，原理是一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008312,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/b8/0e1b655e.jpg","nickname":"fireshort","note":"","ucode":"10550CA9C6C730","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593375,"discussion_content":"Spring Cloud Gateway里面的RedisRateLimiter就是用了redis实现的令牌桶算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668135001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111090,"discussion_content":"原生的信号量貌似就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577779468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118936,"user_name":"落尘kira","can_delete":false,"product_type":"c1","uid":1092169,"ip_address":"","ucode":"D203B519E43F85","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","comment_is_top":false,"comment_ctime":1564472057,"is_pvip":false,"replies":[{"id":43691,"content":"总结的非常到位！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564536126,"ip_address":"","comment_id":118936,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"看了下评论，我就简单补充一下实际用过的场景：\n1.数据同步：包括业务服务之间的业务数据同步（主要是状态）、DB间的数据同步等等\n2.异步通知：包括发送IM消息、异步日志、异步短信&#47;邮件（尤其是批量数据）或注册&#47;开启任务等等\n3.信息收集：主要用于数据统计、监控、搜索引擎等等\n4.服务解耦：主要用于重构和新设计时，对频繁变动的接口服务进行解耦（通常是被需求给逼的）\n5.分布式事务消息：尤其是对数据一致性有要求的异步处理场景\n6.主动性防御：秒杀、限流","like_count":23,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460674,"discussion_content":"总结的非常到位！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564536126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548230,"discussion_content":"还是没有理解服务解耦的含义？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643093698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1195017,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","nickname":"谁都会变","note":"","ucode":"9965748F7EBB57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587837,"discussion_content":"比如A和B俩个服务系统通信，以前是通过http请求B的服务。现在是A直接把请求参数丢到MQ的队列里，B从队列中读请求参数然后处理。A和B俩个服务是解耦的，没有强依赖。你甚至可以弄一个C服务系统去处理消息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663315026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":548230,"ip_address":"上海","group_id":0},"score":587837,"extra":""}]},{"author":{"id":1476323,"avatar":"https://static001.geekbang.org/account/avatar/00/16/86/e3/a31f6869.jpg","nickname":" 尿布","note":"","ucode":"D1C8BDA7540962","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245569,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587686574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117481,"user_name":"ly","can_delete":false,"product_type":"c1","uid":1221628,"ip_address":"","ucode":"5E2B85252DABF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/fc/379387a4.jpg","comment_is_top":false,"comment_ctime":1564057646,"is_pvip":false,"replies":[{"id":43094,"content":"这个取决于网关是如何实现的。大致的思路是，网关会把用户的request缓存起来，然后发消息，至于发的消息内容不一定就是这个原封不动的request对象，只要把Request中必要的信息发给后端就可以了。\n\n后端服务可以用RPC通知网关秒杀结果，网关收到结果后找到对应的Request来构建Response返回即可。\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564107148,"ip_address":"","comment_id":117481,"utype":1}],"discussion_count":9,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"老师，关于第二点的流控有点疑问：网关将request信息放入mq中，然后后端服务去mq中消费这个请求，我通常晓得的mq储存文本消息，那这样的场景下，后端处理完秒杀以后，是如何得到response响应客户端的请求呢？","like_count":22,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459992,"discussion_content":"这个取决于网关是如何实现的。大致的思路是，网关会把用户的request缓存起来，然后发消息，至于发的消息内容不一定就是这个原封不动的request对象，只要把Request中必要的信息发给后端就可以了。\n\n后端服务可以用RPC通知网关秒杀结果，网关收到结果后找到对应的Request来构建Response返回即可。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564107148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1348830,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/SM4fwn9uFicXU8cQ1rNF2LQdKNbZI1FX1jmdwaE2MTrBawbugj4TQKjMKWG0sGbmqQickyARXZFS8NZtobvoWTHA/132","nickname":"td901105","note":"","ucode":"32D42A4F36FA02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":619822,"discussion_content":"老师，我想问一下如何保证后端服务在集群情况下将response返回给发起request的实例？因为只有这个实例才有request和客户端socket的映射关系。难道在将request的时候附带IP，然后RPC的时候通过ip去找对应的网关实例发起RPC调用？？？？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1685516364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":459992,"ip_address":"北京","group_id":0},"score":619822,"extra":""}]},{"author":{"id":1221628,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a3/fc/379387a4.jpg","nickname":"ly","note":"","ucode":"5E2B85252DABF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3184,"discussion_content":"根据老师的思路，我这边实现了一个简单的场景（java版）：\n网关就是简单的ServerSocket来接受socket，解析秒杀http请求，socket请求到达后生成一个唯一reqId，然后将reqId和客户端的socket存入并发map，随后MQ将reqId推给后端秒杀服务，此时处理socket的Thread就结束；\n秒杀服务收到MQ，随机sleep若干毫秒模拟秒杀行为，然后将reqId作为参数http通知网关秒杀结果；\n网关收到秒杀反馈，根据reqId从并发map中取出对应socket，按照http响应格式进行输出。\n程序能够正常跑通，后端的秒杀服务可以随意新增实例、减少实例；\n\n之前我用spirngmvc来实现此场景遇到的疑惑：\n网关中的controller收到秒杀request，这个request的当前线程是tomcat线程池中的一个Thread，原本以为将HttpservletResponse响应对象存起来就完事大吉，但是一旦controller的方法结束（也就是业务代码运行完），tomcat会自动将response输出流关闭掉去响应用户，这样我就算将response存起来也没意义，除非在controller里面将当前request的Thread阻塞，等待秒杀服务RPC给网关秒杀结果后，将此Thread释放继续往下走，但是感觉这样实现不太好，不知道我哪里做的不对或者说网关根本不应该这样实现。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1564281473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1221628,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a3/fc/379387a4.jpg","nickname":"ly","note":"","ucode":"5E2B85252DABF3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305412,"discussion_content":"楼主的问题也是我想问的，你这个解决思路我认为应该是没啥问题的；关于你的疑惑我认为可以在网关的controller返回一个Callable或者DefferedResult，并使用另外的线程1来执行；tomcat收到controller的返回后，可以使用另外的线程2来阻塞获取线程1的执行结果后相应给客户端，同时结束当前的请求线程，这样就可以趁早结束tomcat的请求处理线程去接收新的请求了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1599916906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3184,"ip_address":"","group_id":0},"score":305412,"extra":""}]},{"author":{"id":1184561,"avatar":"https://static001.geekbang.org/account/avatar/00/12/13/31/2a44f119.jpg","nickname":"志学","note":"","ucode":"1D03847EC66A83","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541641,"discussion_content":"是否可以由客户端主动轮训秒杀结果，这样就不用服务端主动通知客户端，实现起来比较简单。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1640497469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1571460,"avatar":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","nickname":"Simple life","note":"","ucode":"1902D7F72FB43F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311147,"discussion_content":"我认为只要风控和库存过了，就代表成功了，直接返回，MQ延后处理，如果不过或者消息 发送失败，则认为抢购失败，如果要做异步推送会增加复杂度，碰上集群更麻烦","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602237143,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1232973,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d0/4d/2116c1a4.jpg","nickname":"Bravery168","note":"","ucode":"DB08AEFBD6DF2B","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548426,"discussion_content":"网关要介入到秒杀活动的设计实现方案，是不是与具体业务耦合了，这样会不会影响到网关的稳定性，毕竟网关肯定承载不止一个业务？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643189403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068432,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/90/25b6f544.jpg","nickname":"马文龙","note":"","ucode":"679B0F0AB402C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350514,"discussion_content":"这时APP和网关是还连接着呢吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613900432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042780,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e9/5c/0ce4d7d3.jpg","nickname":"郑勰","note":"","ucode":"57810E8A67FCB6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159724,"discussion_content":"现在有主流框架这么实现吗？没见过这样做的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580728642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116990,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1563952086,"is_pvip":false,"replies":[{"id":42923,"content":"总结到位，赞👍。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564018320,"ip_address":"","comment_id":116990,"utype":1}],"discussion_count":19,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"个人的体会，消息队列的本质是将同步处理转成异步处理，异步会带来相应的好处，但也有弊端。\nPros: \n1.可在模块、服务、接口等不同粒度上实现解耦\n2.订阅&#47;消费模式也可在数据粒度上解耦\n3.可提高系统的并发能力，集中力量办大事(同步部分)，碎片时间做小事(异步部分)\n4.可提高系统可用性，因为缓冲了系统负载\n\nCons:\n1.降低了数据一致性，如要保持强一致性，需要高代价的补偿(如分布式事务、对账)\n2.有数据丢失风险，如宕机重启，如要保证队列数据可用，需要额外机制保证(如双活容灾)\n\n总体来说，消息队列的适用场景还是很多的，如秒杀、发邮件、发短信、高并发订单等，不适合的场景如银行转账、电信开户、第三方支付等。关键还是要意识到消息队列的优劣点，然后分析场景是否适用则会水到渠成。","like_count":211,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459768,"discussion_content":"总结到位，赞👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564018320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":536095,"discussion_content":"没想到老师今年还在回复 太猛了 准备看完这个再看存储","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638685720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":459768,"ip_address":"","group_id":0},"score":536095,"extra":""}]},{"author":{"id":1642581,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/55/a854dc46.jpg","nickname":"刘知昊","note":"","ucode":"F493ADA56ECD3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383298,"discussion_content":"What is [Cons]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626050631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1642581,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/55/a854dc46.jpg","nickname":"刘知昊","note":"","ucode":"F493ADA56ECD3F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545405,"discussion_content":"优缺点 cons pros","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641951619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":383298,"ip_address":"","group_id":0},"score":545405,"extra":""}]},{"author":{"id":1448505,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1a/39/b7b0bc89.jpg","nickname":"Qubit","note":"","ucode":"21731004A5EA0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353248,"discussion_content":"请教一下为何宕机重启后数据丢失？比如像Kafka这种存磁盘上了，是不是也是可以恢复的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615094631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1448505,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1a/39/b7b0bc89.jpg","nickname":"Qubit","note":"","ucode":"21731004A5EA0E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545408,"discussion_content":"我理解是说的 文件存储的实际，为了极高的性能 会放弃确认数据落盘后才返回，而是进入写文件缓存就返回。\n\n\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641951709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":353248,"ip_address":"","group_id":0},"score":545408,"extra":""}]},{"author":{"id":1609530,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/l4nngwyggBGqeMXC0micwO8bM1hSttgQXa1Y5frJSqWa8NibDhia5icwPcHM5wOpV3hfsf0UicDY0ypFqnQ3iarG0T1w/132","nickname":"Trident","note":"","ucode":"53E6788CF33398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171852,"discussion_content":"总结的很精辟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581752855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1482915,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","nickname":"业余爱好者","note":"","ucode":"A890935A982988","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":57067,"discussion_content":"同步转异步精辟，说出我我想表达的意思。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574564378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8407,"discussion_content":"兄台所言极是啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567998071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1070683,"avatar":"","nickname":"兢","note":"","ucode":"878EAA03E02C1C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4206,"discussion_content":"请问一下为什么银行转账，电信开户，第三方支付的场景不适合消息队列","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565227515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":8,"child_discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1070683,"avatar":"","nickname":"兢","note":"","ucode":"878EAA03E02C1C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4229,"discussion_content":"因为这些场景的数据一致性要求很高，而消息队列的缺点是不能很好的保证数据强一致性，要保证的话需要牺牲性能，那么消息队列的优势就没了，所以强数据一致性的场景优先用同步，如数据库事务。","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1565243252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4206,"ip_address":"","group_id":0},"score":4229,"extra":""},{"author":{"id":1219623,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9c/27/5e8d8e25.jpg","nickname":"念，，","note":"","ucode":"09C3B142CB3104","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1070683,"avatar":"","nickname":"兢","note":"","ucode":"878EAA03E02C1C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5588,"discussion_content":"数据一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566364977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4206,"ip_address":"","group_id":0},"score":5588,"extra":""},{"author":{"id":1315147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","nickname":"xfan","note":"","ucode":"48ED8D498D7F56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37794,"discussion_content":"不完全正确，也可以采用分布式事务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571667812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4229,"ip_address":"","group_id":0},"score":37794,"extra":""}]},{"author":{"id":1351816,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a0/88/a4ffd85e.jpg","nickname":"樊不烦","note":"","ucode":"07182A8CCFA169","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3400,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564457745,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117283,"user_name":"beiler","can_delete":false,"product_type":"c1","uid":1192989,"ip_address":"","ucode":"0A62FE86617486","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/1d/169cd800.jpg","comment_is_top":false,"comment_ctime":1564018436,"is_pvip":false,"replies":[{"id":42955,"content":"首先redis肯定是不适合存消息的，虽然redis性能很好，但那是和主流的数据库比，一般大概能到几万tps左右；而现代的消息队列都能很轻松的做到几十万tps级别的性能。\n\n消息量特别大的时候，需要考虑使用有消息堆积能力的MQ，因为一旦消费慢，大量消息就会堆积到MQ中，这种情况不太适合用RabbitMQ，可以考虑RocketMQ、Kafka和Pulsar。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564020193,"ip_address":"","comment_id":117283,"utype":1}],"discussion_count":8,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"还有个问题，如果消息量特别大的时候，消息是适合存在到redis中还是适合存到rabbitmq中？必定您在文中提到一个词，小仓库，如果货量大了怎么办？","like_count":91,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459897,"discussion_content":"首先redis肯定是不适合存消息的，虽然redis性能很好，但那是和主流的数据库比，一般大概能到几万tps左右；而现代的消息队列都能很轻松的做到几十万tps级别的性能。\n\n消息量特别大的时候，需要考虑使用有消息堆积能力的MQ，因为一旦消费慢，大量消息就会堆积到MQ中，这种情况不太适合用RabbitMQ，可以考虑RocketMQ、Kafka和Pulsar。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564020193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2967892,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/49/54/5adc7688.jpg","nickname":"周勇_勤勉自信","note":"","ucode":"4AC5893D7BF52B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":560431,"discussion_content":"不要把 Redis神话!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649326866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":459897,"ip_address":"","group_id":0},"score":560431,"extra":""}]},{"author":{"id":1124083,"avatar":"https://static001.geekbang.org/account/avatar/00/11/26/f3/cd8eea0b.jpg","nickname":"Muscleape","note":"","ucode":"FCD7641E1DD709","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2924,"discussion_content":"画个重点：大量消息就会堆积到MQ中，这种情况不太适合用RabbitMQ，可以考虑RocketMQ、Kafka和Pulsar","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1564040974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2055554,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","nickname":"keep_it_real","note":"","ucode":"F5057CAF752FF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335693,"discussion_content":"redis不适合存储数据吧，它的设计目的是缓存热点数据，内存的成本肯定要比硬盘高的多，为什么不考虑kafka，低成本达到高性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608275034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40882,"discussion_content":"同不理解为什么堆积消息不宜用 rabbitmq ？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572279275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111081,"discussion_content":"后面的课里有讲解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577778977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":40882,"ip_address":"","group_id":0},"score":111081,"extra":""},{"author":{"id":1105387,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/eb/80f9d212.jpg","nickname":"lttzzlll","note":"","ucode":"FA160F7C02ABAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340033,"discussion_content":"是因为rabbitmq不支持分区吗?\n无法将海量堆积的消息均衡分配到不同的分区上,是的消息的消费能力也无法横向扩展，所以延迟很高。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609866230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":40882,"ip_address":"","group_id":0},"score":340033,"extra":""}]},{"author":{"id":1043738,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/269eb3d6.jpg","nickname":"cfanbo","note":"","ucode":"39D8D71453E575","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5305,"discussion_content":"不理解为什么不适合用rabbitmq，好像都有堆压消息的，就看消费者的扩展能力了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566145225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116750,"user_name":"游弋云端","can_delete":false,"product_type":"c1","uid":1208637,"ip_address":"","ucode":"A960E8F5AA25B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/71/3d/da8dc880.jpg","comment_is_top":false,"comment_ctime":1563901221,"is_pvip":false,"replies":[{"id":42743,"content":"如果你说的共享内存指的是PageCache，很多消息队列都会用到，RDMA据我所知常见的几种消息队列应该都还没有使用，像Kafka它在消费的时候，直接使用Zero Copy，数据直接从PageCache写到NIC的缓冲区中，都不需要进入应用内存空间。\n\n另外，现代的消息队列瓶颈并不在本机内存数据交换这块，主要还是受限于网卡带宽或者磁盘的IO，像JMQ、Kafka这些消息队列，都可以打满万兆网卡或者把磁盘的读写速度拉满。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563935411,"ip_address":"","comment_id":116750,"utype":1}],"discussion_count":8,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"是否可以利用共享内存、RDMA加速消息队列的性能，老师在这块有没有实践经验？","like_count":60,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459897,"discussion_content":"首先redis肯定是不适合存消息的，虽然redis性能很好，但那是和主流的数据库比，一般大概能到几万tps左右；而现代的消息队列都能很轻松的做到几十万tps级别的性能。\n\n消息量特别大的时候，需要考虑使用有消息堆积能力的MQ，因为一旦消费慢，大量消息就会堆积到MQ中，这种情况不太适合用RabbitMQ，可以考虑RocketMQ、Kafka和Pulsar。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564020193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2967892,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/49/54/5adc7688.jpg","nickname":"周勇_勤勉自信","note":"","ucode":"4AC5893D7BF52B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":560431,"discussion_content":"不要把 Redis神话!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649326866,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":459897,"ip_address":"","group_id":0},"score":560431,"extra":""}]},{"author":{"id":1124083,"avatar":"https://static001.geekbang.org/account/avatar/00/11/26/f3/cd8eea0b.jpg","nickname":"Muscleape","note":"","ucode":"FCD7641E1DD709","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2924,"discussion_content":"画个重点：大量消息就会堆积到MQ中，这种情况不太适合用RabbitMQ，可以考虑RocketMQ、Kafka和Pulsar","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1564040974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2055554,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","nickname":"keep_it_real","note":"","ucode":"F5057CAF752FF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335693,"discussion_content":"redis不适合存储数据吧，它的设计目的是缓存热点数据，内存的成本肯定要比硬盘高的多，为什么不考虑kafka，低成本达到高性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608275034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":40882,"discussion_content":"同不理解为什么堆积消息不宜用 rabbitmq ？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572279275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111081,"discussion_content":"后面的课里有讲解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577778977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":40882,"ip_address":"","group_id":0},"score":111081,"extra":""},{"author":{"id":1105387,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/eb/80f9d212.jpg","nickname":"lttzzlll","note":"","ucode":"FA160F7C02ABAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340033,"discussion_content":"是因为rabbitmq不支持分区吗?\n无法将海量堆积的消息均衡分配到不同的分区上,是的消息的消费能力也无法横向扩展，所以延迟很高。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609866230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":40882,"ip_address":"","group_id":0},"score":340033,"extra":""}]},{"author":{"id":1043738,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/269eb3d6.jpg","nickname":"cfanbo","note":"","ucode":"39D8D71453E575","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5305,"discussion_content":"不理解为什么不适合用rabbitmq，好像都有堆压消息的，就看消费者的扩展能力了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566145225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117281,"user_name":"beiler","can_delete":false,"product_type":"c1","uid":1192989,"ip_address":"","ucode":"0A62FE86617486","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/1d/169cd800.jpg","comment_is_top":false,"comment_ctime":1564018272,"is_pvip":false,"replies":[{"id":42956,"content":"如果计数只是为了控制流量，没必要那么精确。\n\n如果计数是业务需求必须要求准确，简单一点的话，可以使用Redis的INCR命令来计数，这个是可以保证原子性的。Redis性能要是不能满足要求，也可以用Kafka+flink集群来解决。这两种方案都是可以保证完全准确计数的。\n\n另外，计数不准的问题，并不一定是计数模块本身的问题，还要查一下是不是系统的其它部分有bug，导致重复计数或者漏计。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564020613,"ip_address":"","comment_id":117281,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"令牌桶给了我很大的启发，我们可以在策略中心设置令牌桶，然后通过令牌桶控制整个job的产出和数量。这样就不会经常有几百万个job了，缓存的压力也会大幅度减小。但是有一个很诡异的问题，就以秒杀系统为例（我们的系统要比秒杀复杂点），我发现这种异步系统如果需要统计任务数量的时候经常会计数不准，尽管在计数的时候我选择了原子操作，但是计数还是会出现不准的现象。这个让我很苦恼，而且往往是运行很久的任务会出现不准，往往只有在任务结束的时候发现任务不准，这个问题很难查，请问老师有什么好建议吗","like_count":52,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459672,"discussion_content":"如果你说的共享内存指的是PageCache，很多消息队列都会用到，RDMA据我所知常见的几种消息队列应该都还没有使用，像Kafka它在消费的时候，直接使用Zero Copy，数据直接从PageCache写到NIC的缓冲区中，都不需要进入应用内存空间。\n\n另外，现代的消息队列瓶颈并不在本机内存数据交换这块，主要还是受限于网卡带宽或者磁盘的IO，像JMQ、Kafka这些消息队列，都可以打满万兆网卡或者把磁盘的读写速度拉满。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563935411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2993642,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTItn9PP2H5Ric22icbwf38RSrGFGCo8dotWcdreHVU0oE31gZqJSeMN19bQUhHAt2dZG25biaU0zUrsg/132","nickname":"Geek_972ce9","note":"","ucode":"643D18ED65BEDB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":609783,"discussion_content":"kafka的零拷贝就是借助的dma吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679210603,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":459672,"ip_address":"广东","group_id":0},"score":609783,"extra":""}]},{"author":{"id":1186190,"avatar":"","nickname":"Kolter","note":"","ucode":"35FB790C614A1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383844,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626252048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1802337,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/80/61/ae3bb67c.jpg","nickname":"毛毛虫大帝","note":"","ucode":"1EBB026121C060","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":155207,"discussion_content":"内核优化的api函数sendfile","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580220884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111088,"discussion_content":"RDMA和消息队列没关系吧，是硬件要支持的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577779306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1124083,"avatar":"https://static001.geekbang.org/account/avatar/00/11/26/f3/cd8eea0b.jpg","nickname":"Muscleape","note":"","ucode":"FCD7641E1DD709","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2926,"discussion_content":"画个重点：现代的消息队列瓶颈并不在本机内存数据交换这块，主要还是受限于网卡带宽或者磁盘的IO，像JMQ、Kafka这些消息队列，都可以打满万兆网卡或者把磁盘的读写速度拉满。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564041317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1315147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","nickname":"xfan","note":"","ucode":"48ED8D498D7F56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1124083,"avatar":"https://static001.geekbang.org/account/avatar/00/11/26/f3/cd8eea0b.jpg","nickname":"Muscleape","note":"","ucode":"FCD7641E1DD709","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37795,"discussion_content":"重点没画对，kafka使用zero copy 将数据从pagecache直接写道nic","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571668021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2926,"ip_address":"","group_id":0},"score":37795,"extra":""},{"author":{"id":2015438,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c0/ce/eb1b4ae1.jpg","nickname":"可圈可丶","note":"","ucode":"EB527E176EDE91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1315147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","nickname":"xfan","note":"","ucode":"48ED8D498D7F56","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304670,"discussion_content":"你才是对的，kafka就强在零拷贝和磁盘顺序读写","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599638339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37795,"ip_address":"","group_id":0},"score":304670,"extra":""}]}]},{"had_liked":false,"id":119245,"user_name":"撒旦的堕落","can_delete":false,"product_type":"c1","uid":1116864,"ip_address":"","ucode":"15F6AA41EE556F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0a/c0/401c240e.jpg","comment_is_top":false,"comment_ctime":1564542824,"is_pvip":false,"replies":[{"id":43834,"content":"对于网关某一个处理前端请求线程来说，大致的流程是：\n\n0.收到Request\n1.发消息\n2.阻塞等待，直到超时或者收到后端的秒杀结果；\n3.返回Response\n\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564626089,"ip_address":"","comment_id":119245,"utype":1}],"discussion_count":16,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"我懵的地方就是用队列 将同步改成了异步  那么原来同步的request 和response是一对 那么改成异步后  怎么通知用户 难道还用原来的那个response ？ 还是当秒杀成功后  根据用户的id 查询到信息 比如手机号码 然后发短信给他  或者是向用户推消息什么的  ","like_count":39,"discussions":[{"author":{"id":1124083,"avatar":"https://static001.geekbang.org/account/avatar/00/11/26/f3/cd8eea0b.jpg","nickname":"Muscleape","note":"","ucode":"FCD7641E1DD709","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2925,"discussion_content":"画个重点：可以使用Redis的INCR命令来计数，这个是可以保证原子性的。Redis性能要是不能满足要求，也可以用Kafka+flink集群来解决。","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1564041086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459896,"discussion_content":"如果计数只是为了控制流量，没必要那么精确。\n\n如果计数是业务需求必须要求准确，简单一点的话，可以使用Redis的INCR命令来计数，这个是可以保证原子性的。Redis性能要是不能满足要求，也可以用Kafka+flink集群来解决。这两种方案都是可以保证完全准确计数的。\n\n另外，计数不准的问题，并不一定是计数模块本身的问题，还要查一下是不是系统的其它部分有bug，导致重复计数或者漏计。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564020613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1192989,"avatar":"https://static001.geekbang.org/account/avatar/00/12/34/1d/169cd800.jpg","nickname":"beiler","note":"","ucode":"0A62FE86617486","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2947,"discussion_content":"我们确实是用的redis incr，但是由于我们是迭代式的，很难判断出哪不准，这个就不难为老师了，必定场景复杂 ฅ( ̳• ◡ • ̳)ฅ，多谢老师","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564057042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545944,"discussion_content":"画个重点：可以使用Redis的INCR命令来计数，这个是可以保证原子性的。Redis性能要是不能满足要求，也可以用Kafka+flink集群来解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642088229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118848,"user_name":"linqw","can_delete":false,"product_type":"c1","uid":1134138,"ip_address":"","ucode":"09DCFE98C54DD8","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/3a/86196508.jpg","comment_is_top":false,"comment_ctime":1564452387,"is_pvip":false,"replies":[{"id":43681,"content":"A1：实际上，只要有足够的磁盘容量，消息队列确实可以存放无限的消息。像秒杀请求这种数据，峰值并发高，但总数据量并不是很大，所以，堆积在消息队列中完全没问题。\n\nA2：都按照秒杀失败处理即可。\n\nA3：响应一般采用RPC来实现。超时或者返回秒杀结果之前，网关和APP确实要保持连接，这是HTTP协议决定的。至于网关能不能承受海量的APP连接，这个应该不用担心，网关的作用就是用来抗海量连接的，它也会有各种方法来解决这个问题。\n\n4、是的，大部分生产系统中的消息队列要配置成集群，确保可用性和数据可靠性，这个后面的课程我们会讲。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564534929,"ip_address":"","comment_id":118848,"utype":1}],"discussion_count":14,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"APP⇆网关--生产--&gt;消息队列--消费--&gt;秒杀服务，有几点疑惑，老师有空帮忙解答下哦\n1、海量的请求都放在消息队列中，消息队列的整体容量如何衡量了？消息队列不可能能存放无限的消息，消息队列满应该也会有拒绝策略，比如线程池的任务队列，任务队列满，并且超过最大的线程池数，四种的拒绝策略。\n2、APP响应超时，即网关超过一定的时间没有返回，消息还在任务队列中，还是会被秒杀服务处理，这样的话，返回给APP秒杀失败，但是秒杀服务已经消费了消息？难道是在网关做补偿么？如果连接已经断开，将秒杀服务对此消息的处理做回滚操作么？\n3、网关和秒杀服务是通过消息队列进行通信，那响应消息也通过队列进行返回么？队列中会有APP对应的地址比如IP之类的？那这样的话，APP的海量连接都同时连接着网关，不是会有问题么？\n4、消息队列应该也会做多备的策略？比如队列消息的服务挂了，那些消息全部不见，这样不是也会存在问题么？","like_count":31,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460804,"discussion_content":"对于网关某一个处理前端请求线程来说，大致的流程是：\n\n0.收到Request\n1.发消息\n2.阻塞等待，直到超时或者收到后端的秒杀结果；\n3.返回Response\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564626089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548224,"discussion_content":"个人没理解老师的回复，而且觉得老师的回复有些答非所问。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1643092055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1522220,"avatar":"https://static001.geekbang.org/account/avatar/00/17/3a/2c/683ae4af.jpg","nickname":"豆花羹","note":"","ucode":"57D8F64988C305","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531707,"discussion_content":"请教下网关要如何收到后端服务的消息呢，通过轮询或者回调的方式么？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1637393645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1203293,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5c/5d/974b033f.jpg","nickname":"陆老师","note":"","ucode":"0EA27C4755FF4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359194,"discussion_content":"这样子的话，就是同步阻塞方式了，主动等待结果就是同步。在高并发情况下，都这么同步阻塞等待，大量线程被占用，马上你的服务就不可用了。虽然你的请求数据给其他下游异步低消费处理了，但本质上还是同步啊，有问题的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616135198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1190963,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKtxPelZRoA8WOx5ESmW4CIj9icf1XHNsDqyCaBudmVzSX2pSiacEn7IlLRic8ePegiaRwBet7nwKQkicg/132","nickname":"超级小帅兔","note":"","ucode":"3D9FAC98D82637","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1203293,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5c/5d/974b033f.jpg","nickname":"陆老师","note":"","ucode":"0EA27C4755FF4A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387694,"discussion_content":"作者的回复是前端处理逻辑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628348705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":359194,"ip_address":"","group_id":0},"score":387694,"extra":""},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190963,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKtxPelZRoA8WOx5ESmW4CIj9icf1XHNsDqyCaBudmVzSX2pSiacEn7IlLRic8ePegiaRwBet7nwKQkicg/132","nickname":"超级小帅兔","note":"","ucode":"3D9FAC98D82637","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548223,"discussion_content":"没明白？老师的原话，网关某一个处理前端请求线程，这明显不是网关层的处理前端请求的逻辑？！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643091979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":387694,"ip_address":"","group_id":0},"score":548223,"extra":""}]},{"author":{"id":1542778,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8a/7a/54003392.jpg","nickname":"Geek_27a248","note":"","ucode":"6AC3AC42E6EEC9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633304,"discussion_content":"前端发送秒杀请求到网关、网关同步阻塞等待后端服务响应（这一步可以理解为给mq排队、后端依次响应），响应结束返回给网关结果、网关返回结果给用户。不知道这样理解对不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701992662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2106016,"avatar":"https://static001.geekbang.org/account/avatar/00/20/22/a0/d8631910.jpg","nickname":"Y a n g","note":"","ucode":"A59C5958750550","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582662,"discussion_content":"webflux加future模式，不需要阻塞网关的工作线程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659582452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"云南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1147418,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","nickname":"陈靖","note":"","ucode":"8C9596A54DB5C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291481,"discussion_content":"如果放队列了，还需要阻塞等待吗？消息来了再处理不是更好吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594831911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1250587,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/1b/448b2775.jpg","nickname":"二货","note":"","ucode":"CF80FB9F35FC3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":253522,"discussion_content":"个人觉得如果是非强依赖的服务，只是单纯的消费者，是不需要在response中放值的，直接消费就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588240486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095857,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","nickname":"梦倚栏杆","note":"","ucode":"BDEB97F2822445","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208680,"discussion_content":"我也有疑问：阻塞等待从redis，mysql等存储性中交互获取返回结果我可以理解，但是下游既然是异步，用消息返回，是消息接收到还要弄到一个存储系统里吗？这是不是就是线程间的通信呀，理解这个了是不是就知道怎么做了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584575855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1147418,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","nickname":"陈靖","note":"","ucode":"8C9596A54DB5C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207710,"discussion_content":"没看懂这个阻塞等待怎么做的?消息异步处理了?咋等待呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584509701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1494020,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cc/04/f96e3d2a.jpg","nickname":"盛贤","note":"","ucode":"CBFEE10504B070","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1147418,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","nickname":"陈靖","note":"","ucode":"8C9596A54DB5C8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212132,"discussion_content":"需要异步转同步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584938435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":207710,"ip_address":"","group_id":0},"score":212132,"extra":""},{"author":{"id":1147418,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","nickname":"陈靖","note":"","ucode":"8C9596A54DB5C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1494020,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cc/04/f96e3d2a.jpg","nickname":"盛贤","note":"","ucode":"CBFEE10504B070","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":213645,"discussion_content":"异步转同步和直接同步有啥区别，为啥不直接同步?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585111408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":212132,"ip_address":"","group_id":0},"score":213645,"extra":""},{"author":{"id":1793425,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5d/91/9b6fb4ad.jpg","nickname":"daiwf","note":"","ucode":"2C78451F5488BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1147418,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","nickname":"陈靖","note":"","ucode":"8C9596A54DB5C8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291456,"discussion_content":"直接同步太快了 后台遭不住可能会被打崩了。但是放到队列里就排队来。不会崩溃。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594823024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":213645,"ip_address":"","group_id":0},"score":291456,"extra":""}]}]},{"had_liked":false,"id":116311,"user_name":"白小白","can_delete":false,"product_type":"c1","uid":1400416,"ip_address":"","ucode":"143F1C8294818A","user_header":"https://static001.geekbang.org/account/avatar/00/15/5e/60/1c13626b.jpg","comment_is_top":false,"comment_ctime":1563840043,"is_pvip":false,"replies":[{"id":42558,"content":"是的，令牌桶可以用消息队列实现，也可以用Redis实现，你也可以写一个简单的令牌桶服务，原理是一样的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846529,"ip_address":"","comment_id":116311,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"现在用的消息队列主要是做数据异步传输用的，之前也做过多个系统之间的解耦。看到用消息队列做秒杀系统，忽然想到之前只想过用redis去做，利用redis去做了流量的把控。不过细想想，这种情况下的redis和文章中的令牌桶很像……","like_count":30,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460613,"discussion_content":"A1：实际上，只要有足够的磁盘容量，消息队列确实可以存放无限的消息。像秒杀请求这种数据，峰值并发高，但总数据量并不是很大，所以，堆积在消息队列中完全没问题。\n\nA2：都按照秒杀失败处理即可。\n\nA3：响应一般采用RPC来实现。超时或者返回秒杀结果之前，网关和APP确实要保持连接，这是HTTP协议决定的。至于网关能不能承受海量的APP连接，这个应该不用担心，网关的作用就是用来抗海量连接的，它也会有各种方法来解决这个问题。\n\n4、是的，大部分生产系统中的消息队列要配置成集群，确保可用性和数据可靠性，这个后面的课程我们会讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564534929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548228,"discussion_content":"老师对问题2和3的回答依然有些没答完整。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1643093263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3050745,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8c/f9/e1dab0ca.jpg","nickname":"怎么睡才能做这种梦","note":"","ucode":"81A7B6EF124E90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603756,"discussion_content":"我觉得老师讲的令牌桶可以解决这个问题，没得令牌时直接抛失败，也不给发消息给队列。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676272356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":548228,"ip_address":"湖北","group_id":0},"score":603756,"extra":""}]},{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545945,"discussion_content":"好问题，Mark一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642088909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1315147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","nickname":"xfan","note":"","ucode":"48ED8D498D7F56","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37801,"discussion_content":"A2应该是网关后超时","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571668765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1277081,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","nickname":"lakeslove","note":"","ucode":"65E14D29D3C981","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1315147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","nickname":"xfan","note":"","ucode":"48ED8D498D7F56","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165753,"discussion_content":"这个能详细说一下吗？因为不是原子操作，像“返回给APP秒杀失败，但是秒杀服务已经消费了消息“这个问题，如果不引入分布式锁，感觉很难解决啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581322631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37801,"ip_address":"","group_id":0},"score":165753,"extra":""},{"author":{"id":1277081,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","nickname":"lakeslove","note":"","ucode":"65E14D29D3C981","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1315147,"avatar":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","nickname":"xfan","note":"","ucode":"48ED8D498D7F56","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165760,"discussion_content":"翻看了下后面的评论，评论给出了一个解决方案，没用分布式锁：这个就是比较细节的问题了，实现的方式也可以有多种，比如：在消息中带一个请求时间戳，后续服务在处理前先检查一下是否已经超时，超时就直接丢掉不处理。","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1581323224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":37801,"ip_address":"","group_id":0},"score":165760,"extra":""},{"author":{"id":1931524,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/79/04/748ee8c9.jpg","nickname":"想出家的小和尚","note":"","ucode":"7C079ADC43577F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1277081,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","nickname":"lakeslove","note":"","ucode":"65E14D29D3C981","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243646,"discussion_content":"消息中带一个超时时间，消费者判断是否超时，如果超时直接丢弃！","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1587555036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":165753,"ip_address":"","group_id":0},"score":243646,"extra":""}]},{"author":{"id":1036566,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d1/16/6347bbc0.jpg","nickname":"顶新","note":"","ucode":"241D3CCCAE536B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8659,"discussion_content":"李老师，A3问题的回答能详细一点吗？响应一般采用RPC来实现，能否举个场景说明一下呢？感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568033610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1238619,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e6/5b/07e1a8e3.jpg","nickname":"Tsundere","note":"","ucode":"3A8CED0747BF32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1036566,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d1/16/6347bbc0.jpg","nickname":"顶新","note":"","ucode":"241D3CCCAE536B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291912,"discussion_content":"rpc怎么返回呢？不太理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594997032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8659,"ip_address":"","group_id":0},"score":291912,"extra":""},{"author":{"id":1806768,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLQZzmZq5MInIt27FZVGGq8MmayX9cGGnzxI7d5Ealibmxh0je1ZYyg5r3dByX6WtG2huXsQoJHXg/132","nickname":"Alan.Liu","note":"","ucode":"78269B636DABE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1238619,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e6/5b/07e1a8e3.jpg","nickname":"Tsundere","note":"","ucode":"3A8CED0747BF32","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305029,"discussion_content":"此处mark 一下。需要从本质上理解RPC.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599745916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":291912,"ip_address":"","group_id":0},"score":305029,"extra":""}]}]},{"had_liked":false,"id":116296,"user_name":"小趴菜～","can_delete":false,"product_type":"c1","uid":1178011,"ip_address":"","ucode":"7E82F2B5930CD5","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/9b/dc074a7e.jpg","comment_is_top":false,"comment_ctime":1563837007,"is_pvip":false,"replies":[{"id":42554,"content":"总结的很赞！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846276,"ip_address":"","comment_id":116296,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"生产项目中用到了kafka，\n1 异部的处理交易：提高用户请求的响应速度，同时也提升了用户的体验感。\n2 削峰 ：保护服务器的一种方式，用户的请求放到kafka中，交易服务根据自己服务器的消费能力来消费交易数据。\n3 项目的解耦：交易服务和后续的服务之间是通过Kafka进行交付，当一个服务为多个服务提供数据的时候，可以通过MQ进行交换来解耦服务间的耦合。","like_count":25,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459471,"discussion_content":"总结的很赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118936,"user_name":"落尘kira","can_delete":false,"product_type":"c1","uid":1092169,"ip_address":"","ucode":"D203B519E43F85","user_header":"https://static001.geekbang.org/account/avatar/00/10/aa/49/51790edb.jpg","comment_is_top":false,"comment_ctime":1564472057,"is_pvip":false,"replies":[{"id":43691,"content":"总结的非常到位！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564536126,"ip_address":"","comment_id":118936,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"看了下评论，我就简单补充一下实际用过的场景：\n1.数据同步：包括业务服务之间的业务数据同步（主要是状态）、DB间的数据同步等等\n2.异步通知：包括发送IM消息、异步日志、异步短信&#47;邮件（尤其是批量数据）或注册&#47;开启任务等等\n3.信息收集：主要用于数据统计、监控、搜索引擎等等\n4.服务解耦：主要用于重构和新设计时，对频繁变动的接口服务进行解耦（通常是被需求给逼的）\n5.分布式事务消息：尤其是对数据一致性有要求的异步处理场景\n6.主动性防御：秒杀、限流","like_count":23,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459471,"discussion_content":"总结的很赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117481,"user_name":"ly","can_delete":false,"product_type":"c1","uid":1221628,"ip_address":"","ucode":"5E2B85252DABF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/fc/379387a4.jpg","comment_is_top":false,"comment_ctime":1564057646,"is_pvip":false,"replies":[{"id":43094,"content":"这个取决于网关是如何实现的。大致的思路是，网关会把用户的request缓存起来，然后发消息，至于发的消息内容不一定就是这个原封不动的request对象，只要把Request中必要的信息发给后端就可以了。\n\n后端服务可以用RPC通知网关秒杀结果，网关收到结果后找到对应的Request来构建Response返回即可。\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564107148,"ip_address":"","comment_id":117481,"utype":1}],"discussion_count":9,"race_medal":0,"score":2,"product_id":100032301,"comment_content":"老师，关于第二点的流控有点疑问：网关将request信息放入mq中，然后后端服务去mq中消费这个请求，我通常晓得的mq储存文本消息，那这样的场景下，后端处理完秒杀以后，是如何得到response响应客户端的请求呢？","like_count":22,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460674,"discussion_content":"总结的非常到位！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564536126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548230,"discussion_content":"还是没有理解服务解耦的含义？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643093698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1195017,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","nickname":"谁都会变","note":"","ucode":"9965748F7EBB57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587837,"discussion_content":"比如A和B俩个服务系统通信，以前是通过http请求B的服务。现在是A直接把请求参数丢到MQ的队列里，B从队列中读请求参数然后处理。A和B俩个服务是解耦的，没有强依赖。你甚至可以弄一个C服务系统去处理消息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663315026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":548230,"ip_address":"上海","group_id":0},"score":587837,"extra":""}]},{"author":{"id":1476323,"avatar":"https://static001.geekbang.org/account/avatar/00/16/86/e3/a31f6869.jpg","nickname":" 尿布","note":"","ucode":"D1C8BDA7540962","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245569,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587686574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116597,"user_name":"风中花","can_delete":false,"product_type":"c1","uid":1085237,"ip_address":"","ucode":"067E0A1E116844","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/35/f1839bb2.jpg","comment_is_top":false,"comment_ctime":1563877200,"is_pvip":false,"replies":[{"id":42735,"content":"你买不了吃亏，买不了上当，买到的只有知识。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563934497,"ip_address":"","comment_id":116597,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"要不要继续买，继续买要不要！老师讲得这么好！纠结","like_count":18},{"had_liked":false,"id":119034,"user_name":"大白先生","can_delete":false,"product_type":"c1","uid":1615335,"ip_address":"","ucode":"7EF709EF8FFE6B","user_header":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","comment_is_top":false,"comment_ctime":1564491439,"is_pvip":false,"replies":[{"id":43725,"content":"这个就是比较细节的问题了，实现的方式也可以有多种，比如：在消息中带一个请求时间戳，后续服务在处理前先检查一下是否已经超时，超时就直接丢掉不处理。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564539524,"ip_address":"","comment_id":119034,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"那秒杀时后端请求没处理完，app返回超时后，后续服务处理之前请求时会不会进行库存扣减，还是说，后端能识别出哪些请求超时，不进行处理","like_count":15,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459606,"discussion_content":"你买不了吃亏，买不了上当，买到的只有知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1085237,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8f/35/f1839bb2.jpg","nickname":"风中花","note":"","ucode":"067E0A1E116844","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2786,"discussion_content":"好！果断入手","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1806768,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLQZzmZq5MInIt27FZVGGq8MmayX9cGGnzxI7d5Ealibmxh0je1ZYyg5r3dByX6WtG2huXsQoJHXg/132","nickname":"Alan.Liu","note":"","ucode":"78269B636DABE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1085237,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8f/35/f1839bb2.jpg","nickname":"风中花","note":"","ucode":"067E0A1E116844","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305027,"discussion_content":"😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599745036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2786,"ip_address":"","group_id":0},"score":305027,"extra":""}]}]},{"had_liked":false,"id":116468,"user_name":"微微一笑","can_delete":false,"product_type":"c1","uid":1250327,"ip_address":"","ucode":"CFA7ABE81D0B99","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/17/8763dced.jpg","comment_is_top":false,"comment_ctime":1563853422,"is_pvip":false,"replies":[{"id":42722,"content":"涉及到钱的系统，数据可靠性是最先需要考虑的问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563933526,"ip_address":"","comment_id":116468,"utype":1}],"discussion_count":6,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"看到消息队列的专栏很兴奋，能学到底层源码、设计思想一直是我的梦，哈哈哈。目前在一家互金公司负责一个资金平台的项目，负责对接车贷、消费金融两个系统，同时与第三方资金渠道进行对接。在于车贷、消费金融这俩系统对接中，使用了rocketMQ进行系统间的解耦，系统间升级优化上线互不影响。由于对接的第三方渠道越来越多渠道间耦合较严重，下一步准备进行系统拆分，系统与系统间经过消息队列进行解耦。","like_count":13,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459556,"discussion_content":"涉及到钱的系统，数据可靠性是最先需要考虑的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563933526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2811,"discussion_content":"涉及到钱的场景，最好还是使用同步服务。最可靠的就是数据库事务，其次是逻辑层事务。如果一定要异步，最好有对账过程。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1563950883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1164531,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","nickname":"Bug? Feature!","note":"","ucode":"F8FA8A0094FBA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33442,"discussion_content":"不在同一个数据库呢？分布式事务？？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571124524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2811,"ip_address":"","group_id":0},"score":33442,"extra":""}]},{"author":{"id":1543599,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","nickname":"xtepCool","note":"","ucode":"6181687E98524E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547685,"discussion_content":"强一致性改成最终一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642825077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023437,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9d/cd/93864919.jpg","nickname":"空白宇宙","note":"","ucode":"9031293BDAAB0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4043,"discussion_content":"哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565076965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1075035,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/5b/d797784e.jpg","nickname":"a萱萱爸","note":"","ucode":"09064113C020A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2698,"discussion_content":"虽然知道一些场景，但对于优化，比如过期消息，消息堵塞具体处理不太了解。。期待。。我们主要用在订阅，发布。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563868574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135176,"user_name":"x.l","can_delete":false,"product_type":"c1","uid":1162019,"ip_address":"","ucode":"8BEB1B49D1D323","user_header":"https://static001.geekbang.org/account/avatar/00/11/bb/23/64fc8f96.jpg","comment_is_top":false,"comment_ctime":1569052463,"is_pvip":false,"replies":[{"id":51960,"content":"一个主题设置多个分区，每个分区代表一个优先级。\n发送的时候，根据优先级指定分区发送到对应的分区上。\n消费的时候，按照优先级从高到低，指定分区消费。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1569202231,"ip_address":"","comment_id":135176,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"老师，你好！工作中有按业务优先处理的需求，想实现个优先队列，问下老师有没有常规的解决方案?","like_count":11,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459556,"discussion_content":"涉及到钱的系统，数据可靠性是最先需要考虑的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563933526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2811,"discussion_content":"涉及到钱的场景，最好还是使用同步服务。最可靠的就是数据库事务，其次是逻辑层事务。如果一定要异步，最好有对账过程。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1563950883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1164531,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","nickname":"Bug? Feature!","note":"","ucode":"F8FA8A0094FBA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33442,"discussion_content":"不在同一个数据库呢？分布式事务？？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571124524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2811,"ip_address":"","group_id":0},"score":33442,"extra":""}]},{"author":{"id":1543599,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","nickname":"xtepCool","note":"","ucode":"6181687E98524E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547685,"discussion_content":"强一致性改成最终一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642825077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023437,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9d/cd/93864919.jpg","nickname":"空白宇宙","note":"","ucode":"9031293BDAAB0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4043,"discussion_content":"哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565076965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1075035,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/5b/d797784e.jpg","nickname":"a萱萱爸","note":"","ucode":"09064113C020A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2698,"discussion_content":"虽然知道一些场景，但对于优化，比如过期消息，消息堵塞具体处理不太了解。。期待。。我们主要用在订阅，发布。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563868574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116395,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1563846627,"is_pvip":false,"replies":[{"id":42710,"content":"限流的方法有很多，当然不止令牌桶。令牌桶的优势是实现简单，易于控制。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563932610,"ip_address":"","comment_id":116395,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"1.拆单失败的延时重拆，死信告警。2.消峰和解耦也用到。\n\n问题：控制topic消费线程也能限流，不一定要引入令牌桶，要弄令牌桶，其实走redis更好一点。","like_count":11,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468083,"discussion_content":"一个主题设置多个分区，每个分区代表一个优先级。\n发送的时候，根据优先级指定分区发送到对应的分区上。\n消费的时候，按照优先级从高到低，指定分区消费。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569202231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543599,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","nickname":"xtepCool","note":"","ucode":"6181687E98524E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547598,"discussion_content":"就近消费？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642759108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116292,"user_name":"Geek_bbe9ea","can_delete":false,"product_type":"c1","uid":1336413,"ip_address":"","ucode":"4A0DA7C81D233C","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/5d/c8e2663b.jpg","comment_is_top":false,"comment_ctime":1563834632,"is_pvip":false,"replies":[{"id":42552,"content":"是的，很多公司会用消息队列来做异构数据库之间的数据同步，但是一定要注意顺序问题。像MySQL Binlog这种，是要求严格有序的，否则会出现问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846174,"ip_address":"","comment_id":116292,"utype":1}],"discussion_count":6,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"修改数据库做数据同步也可以用","like_count":9,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459519,"discussion_content":"限流的方法有很多，当然不止令牌桶。令牌桶的优势是实现简单，易于控制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563932610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118068,"user_name":"Geek_e7834d","can_delete":false,"product_type":"c1","uid":1530493,"ip_address":"","ucode":"ABAF1B1B7E6490","user_header":"","comment_is_top":false,"comment_ctime":1564227431,"is_pvip":false,"replies":[{"id":43269,"content":"异地容灾是个比较难解决的问题。\n\n我的经验是：绝大部分主题是不需要异地容灾的，因为消息队列不会直接堆外提供服务，它直接服务都是机房内部的应用，当出现整个机房大面积断电或者机房外网中断的时候，消息的生产者本身已经不能提供服务了，这时候消息队列的容灾是没有意义的。如果生产者它本身支持异地容灾能自动把服务迁移到其它机房，那这个应用在其它机房的实例使用本机房内的消息队列就行了，也不需要消息队列做异地复制和容灾。\n\n但是，确实有极少数应用比较特殊，它是有异地容灾的需求的，我们目前的方案是多副本分布在多个机房中，配合就近消费来实现。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564238785,"ip_address":"","comment_id":118068,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"使用消息队列怎么保证实现节点时效时候能够切换到异地节点 然后还要保证不丢失消息呢或者尽量少丢失消息？异地冗余都有什么好方案呢？","like_count":8,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459468,"discussion_content":"是的，很多公司会用消息队列来做异构数据库之间的数据同步，但是一定要注意顺序问题。像MySQL Binlog这种，是要求严格有序的，否则会出现问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2252648,"avatar":"https://static001.geekbang.org/account/avatar/00/22/5f/68/8e4407c7.jpg","nickname":"💡","note":"","ucode":"8AB762A8CDFEF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577873,"discussion_content":"Canal","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656400987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1477359,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8a/ef/ac2937ac.jpg","nickname":"Geek_342489","note":"","ucode":"40610664021607","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219163,"discussion_content":"想请教一下李玥老师，用消息队列来做异构数据库之间的数据同步的时候如何保证“严格有序”呀？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585740873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1162714,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bd/da/3d76ea74.jpg","nickname":"看不到de颜色","note":"","ucode":"88348CCAE81931","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3147,"discussion_content":"监听binlog更新做数据异构很常见。回滚是不存在的，因为binlog只有在commit后才会写。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564220647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1014373,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7a/65/9baae043.jpg","nickname":"毛露","note":"","ucode":"3FCA43A6C06A40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1162714,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bd/da/3d76ea74.jpg","nickname":"看不到de颜色","note":"","ucode":"88348CCAE81931","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3888,"discussion_content":"监听binlog是没问题。不过我遇到过是在业务代码里绑定sql语句，再用做同步的...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564926386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3147,"ip_address":"","group_id":0},"score":3888,"extra":""}]},{"author":{"id":1014373,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7a/65/9baae043.jpg","nickname":"毛露","note":"","ucode":"3FCA43A6C06A40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2750,"discussion_content":"做数据库的数据同步？那主数据库回滚了怎么办？全量同步吗？（那全量同步的时候，新增的操作怎么办？）。消息队列这么用是偏门吧，个人理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563895655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116701,"user_name":"一记妙蛙直拳","can_delete":false,"product_type":"c1","uid":1375256,"ip_address":"","ucode":"BC3556131D4D61","user_header":"https://static001.geekbang.org/account/avatar/00/14/fc/18/8e69f7cf.jpg","comment_is_top":false,"comment_ctime":1563892157,"is_pvip":false,"replies":[{"id":42739,"content":"总结的很到位，加油！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563934719,"ip_address":"","comment_id":116701,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"收获总结：\n1. 消息队列可以理解为一个暂存消息（可以是一条数据或者一个请求等等）的地方，有生产者有消费者\n2.消息队列的主要三个用处：\na. 实现异步处理，利用消息队列可以将串行化的功能，在非必要串行的地方实现并行化，从而提升系统性能，缩短响应时间\nb. 实现流量控制  在高并发的情况下，为了避免大量的请求冲击后台服务，可以使用消息队列暂存请求，后台服务以最大处理能力消费请求，保证后台的安全性，其缺点拉长系统调用链，响应时间变长，增加系统复杂度；另外一种不改变系统调用链的实现方式，引入令牌桶的概念，单位时间内生成一定量的令牌放到令牌桶（即消息队列）中，令牌的数量要依据后台系统的处理能力，网关接受到请求后取到令牌才能调用后台服务，取不到则请求失败\nc. 系统间解耦  多个下游系统会频繁调用上游系统的接口获取数据的情况下，若上游系统将消息放到指定queue中，多个下游系统订阅消息，就可以避免上游为对接多个下游时频繁地修改接口，降低系统间的耦合度\n思考题：\n目前erp项目中，订单数据需要同时发给工程去评估以及企划去进行物料核算，现在的实现方式则是系统之间通过接口进行拉去或者推送，这就可以使用消息队列，将订单放到消息队列中，供下游订阅使用，降低系统间解耦\n","like_count":8,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460249,"discussion_content":"异地容灾是个比较难解决的问题。\n\n我的经验是：绝大部分主题是不需要异地容灾的，因为消息队列不会直接堆外提供服务，它直接服务都是机房内部的应用，当出现整个机房大面积断电或者机房外网中断的时候，消息的生产者本身已经不能提供服务了，这时候消息队列的容灾是没有意义的。如果生产者它本身支持异地容灾能自动把服务迁移到其它机房，那这个应用在其它机房的实例使用本机房内的消息队列就行了，也不需要消息队列做异地复制和容灾。\n\n但是，确实有极少数应用比较特殊，它是有异地容灾的需求的，我们目前的方案是多副本分布在多个机房中，配合就近消费来实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564238785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125424,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1566182769,"is_pvip":false,"replies":[{"id":46211,"content":"A1：我们会在几节课里面分阶段讲解；\nA2：一般都是采用长连接机制，收到请求后响应；\nA3：首先需要检查一下本机的是不是负载太高，是不是有fullGC，这些都会拖慢程序整体运行。如果是发消息超时，需要联系运维人员，如果是收消息超时，优先看一下消费的业务逻辑是不是执行的太慢了。\nA4：一般如果一直能拉到消息，就会一直不停的拉取，如果没有消息，会定时拉取，直到拉到新的消息。\nA5：关于“broker怎么实现高性能的消息落盘的”这个问题，我在进阶篇中会讲到，请关注。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566264078,"ip_address":"","comment_id":125424,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"老师的比喻很棒，通俗易懂。\n\n1：消息队列的核心作用？\n1-1：服务解藕\n1-2：削峰填谷\n1-3：异步处理\n\n2：消息队列带来的问题？\n2-1：增加系统的复杂度\n2-2：延迟了请求的响应时间\n2-3：可能会丢消息、可能会重复消费消息、可能导致数据不一致、消息可能是无序的\n\n3：消息队列的适用场景？\n3-1：秒杀\n3-2：发送邮件\n3-3：日志收集\n3-4：离线数据持久化\n3-5：其他不担心数据不是强一致性的大流量高并发场景\n\n4：消息队列不适合的场景？\n4-1：要求实时响应\n4-2：要求数据强一致性\n4-3：不能容忍消息丢失\n4-5：直接和钱相关的系统，比如：支付系统\n\nMQ能干啥？啥时候适合使用？这些还是比较容易理解的，痛点在于自己设计并实现一个MQ能否扛住亿级流量，并且具有各种其他优良特性。\n\n李老师，请教几个：\n1：消息的全生命轨迹，会描述嘛？\n2：producer发送消息是通过TCP连接的，broker什么时候响应客户端？\n3：使用JMQ几乎天天报超时异常？这个超时异常有哪些场景会发生？为什么总也解决不了？\n4：consumer拉取消息的时机是什么时候？\n5：broker怎么实现高性能的消息落盘的？\n","like_count":7,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459644,"discussion_content":"总结的很到位，加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548239,"discussion_content":"关于“c. 系统间解耦 多个下游系统会频繁调用上游系统的接口获取数据的情况下，若上游系统将消息放到指定queue中，多个下游系统订阅消息，就可以避免上游为对接多个下游时频繁地修改接口，降低系统间的耦合度” 还是没看明白，为什么就可以避免上游为对接多个下游时频繁地修改接口， 需求在变，接口不用修改？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643096019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111125,"discussion_content":"如果评估和物料核算不是一过性的任务，那么现在的接口push&amp;pull就是合理的，因为消息消费掉就没了，除非评估和物料核算端在消费消息后持久了自己清洗过的订单数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577782249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2879,"discussion_content":"有点不明白，如果你系统的服务接口是拉去，那就没必要上消息队列了，如果用消息队列，那服务接口的意义是什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564018227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133892,"user_name":"poettian","can_delete":false,"product_type":"c1","uid":1144021,"ip_address":"","ucode":"26EE408F908D12","user_header":"https://static001.geekbang.org/account/avatar/00/11/74/d5/56b3a879.jpg","comment_is_top":false,"comment_ctime":1568691233,"is_pvip":false,"replies":[{"id":51432,"content":"这个方式最大的问题是性能达不到要求，一开始秒杀所有人点击秒杀之后都在转圈圈。\n\n另外，单台Redis Server如果宕机了怎么办呢？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568769278,"ip_address":"","comment_id":133892,"utype":1}],"discussion_count":13,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"老师您好，请教一个问题。关于秒杀这种场景我想的是用redis的list不就完全可以实现吗。活动开始前，先把要抢的N个商品push到list中。活动开始后，每来一个请求就从list中pop一个商品出去，当list为空后直接返回“已抢光”的响应，由于可秒杀的商品数量并不多，能通过的请求也可以采用同步的方式进行，这样不是既简单又快速。可是我搜了一下网上的方案，都特别的复杂，请问这种方式有什么问题吗？","like_count":6,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463568,"discussion_content":"A1：我们会在几节课里面分阶段讲解；\nA2：一般都是采用长连接机制，收到请求后响应；\nA3：首先需要检查一下本机的是不是负载太高，是不是有fullGC，这些都会拖慢程序整体运行。如果是发消息超时，需要联系运维人员，如果是收消息超时，优先看一下消费的业务逻辑是不是执行的太慢了。\nA4：一般如果一直能拉到消息，就会一直不停的拉取，如果没有消息，会定时拉取，直到拉到新的消息。\nA5：关于“broker怎么实现高性能的消息落盘的”这个问题，我在进阶篇中会讲到，请关注。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566264078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009652,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","nickname":"钱","note":"","ucode":"2C92A243A463D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5463,"discussion_content":"今天又出现批量发送超时，JMQ支持的同学咚咚根本不回，电话也只说在处理线上业务问题，我这个要等，我问等多久，他说一两个小时吧!\n自己排查了一下\n1：producer客户端的机器没有 FULL GC\n2：系统负载正常\n3：网络没看到大的波动\n4：TCP重传也没有\n再往下就不知道怎么排查了\n下面只能等运维啦😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566286459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009652,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","nickname":"钱","note":"","ucode":"2C92A243A463D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5445,"discussion_content":"多谢答复\n其实我是想深入详细的了解，比如问题2，感觉不是这么简单，我看kafka接到消息后会有落盘，同步数据给副本等，最后才会响应producer","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566272581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116597,"user_name":"风中花","can_delete":false,"product_type":"c1","uid":1085237,"ip_address":"","ucode":"067E0A1E116844","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/35/f1839bb2.jpg","comment_is_top":false,"comment_ctime":1563877200,"is_pvip":false,"replies":[{"id":42735,"content":"你买不了吃亏，买不了上当，买到的只有知识。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563934497,"ip_address":"","comment_id":116597,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"要不要继续买，继续买要不要！老师讲得这么好！纠结","like_count":18,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459606,"discussion_content":"你买不了吃亏，买不了上当，买到的只有知识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1085237,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8f/35/f1839bb2.jpg","nickname":"风中花","note":"","ucode":"067E0A1E116844","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2786,"discussion_content":"好！果断入手","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1806768,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLQZzmZq5MInIt27FZVGGq8MmayX9cGGnzxI7d5Ealibmxh0je1ZYyg5r3dByX6WtG2huXsQoJHXg/132","nickname":"Alan.Liu","note":"","ucode":"78269B636DABE8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1085237,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8f/35/f1839bb2.jpg","nickname":"风中花","note":"","ucode":"067E0A1E116844","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305027,"discussion_content":"😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599745036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2786,"ip_address":"","group_id":0},"score":305027,"extra":""}]}]},{"had_liked":false,"id":119034,"user_name":"大白先生","can_delete":false,"product_type":"c1","uid":1615335,"ip_address":"","ucode":"7EF709EF8FFE6B","user_header":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","comment_is_top":false,"comment_ctime":1564491439,"is_pvip":false,"replies":[{"id":43725,"content":"这个就是比较细节的问题了，实现的方式也可以有多种，比如：在消息中带一个请求时间戳，后续服务在处理前先检查一下是否已经超时，超时就直接丢掉不处理。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564539524,"ip_address":"","comment_id":119034,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"那秒杀时后端请求没处理完，app返回超时后，后续服务处理之前请求时会不会进行库存扣减，还是说，后端能识别出哪些请求超时，不进行处理","like_count":15,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460719,"discussion_content":"这个就是比较细节的问题了，实现的方式也可以有多种，比如：在消息中带一个请求时间戳，后续服务在处理前先检查一下是否已经超时，超时就直接丢掉不处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564539524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399466,"discussion_content":"其实这种方式不太碰到 因为秒杀首要做的是过滤+扛量。而这之后剩下的请求都应该是立即响应 即使做一个中间页面 也不应该停顿太久。\n试想哪个秒杀前端流程成功的请求不是立即跳支付的？ 所以等mq超时 用户体验就太差了\n老师说的是一种思维方式 但我觉得秒杀里实现就不合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632971581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116468,"user_name":"微微一笑","can_delete":false,"product_type":"c1","uid":1250327,"ip_address":"","ucode":"CFA7ABE81D0B99","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/17/8763dced.jpg","comment_is_top":false,"comment_ctime":1563853422,"is_pvip":false,"replies":[{"id":42722,"content":"涉及到钱的系统，数据可靠性是最先需要考虑的问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563933526,"ip_address":"","comment_id":116468,"utype":1}],"discussion_count":6,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"看到消息队列的专栏很兴奋，能学到底层源码、设计思想一直是我的梦，哈哈哈。目前在一家互金公司负责一个资金平台的项目，负责对接车贷、消费金融两个系统，同时与第三方资金渠道进行对接。在于车贷、消费金融这俩系统对接中，使用了rocketMQ进行系统间的解耦，系统间升级优化上线互不影响。由于对接的第三方渠道越来越多渠道间耦合较严重，下一步准备进行系统拆分，系统与系统间经过消息队列进行解耦。","like_count":13,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460719,"discussion_content":"这个就是比较细节的问题了，实现的方式也可以有多种，比如：在消息中带一个请求时间戳，后续服务在处理前先检查一下是否已经超时，超时就直接丢掉不处理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564539524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399466,"discussion_content":"其实这种方式不太碰到 因为秒杀首要做的是过滤+扛量。而这之后剩下的请求都应该是立即响应 即使做一个中间页面 也不应该停顿太久。\n试想哪个秒杀前端流程成功的请求不是立即跳支付的？ 所以等mq超时 用户体验就太差了\n老师说的是一种思维方式 但我觉得秒杀里实现就不合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632971581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135176,"user_name":"x.l","can_delete":false,"product_type":"c1","uid":1162019,"ip_address":"","ucode":"8BEB1B49D1D323","user_header":"https://static001.geekbang.org/account/avatar/00/11/bb/23/64fc8f96.jpg","comment_is_top":false,"comment_ctime":1569052463,"is_pvip":false,"replies":[{"id":51960,"content":"一个主题设置多个分区，每个分区代表一个优先级。\n发送的时候，根据优先级指定分区发送到对应的分区上。\n消费的时候，按照优先级从高到低，指定分区消费。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1569202231,"ip_address":"","comment_id":135176,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"老师，你好！工作中有按业务优先处理的需求，想实现个优先队列，问下老师有没有常规的解决方案?","like_count":11,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468083,"discussion_content":"一个主题设置多个分区，每个分区代表一个优先级。\n发送的时候，根据优先级指定分区发送到对应的分区上。\n消费的时候，按照优先级从高到低，指定分区消费。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1569202231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543599,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","nickname":"xtepCool","note":"","ucode":"6181687E98524E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547598,"discussion_content":"就近消费？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642759108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116395,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1563846627,"is_pvip":false,"replies":[{"id":42710,"content":"限流的方法有很多，当然不止令牌桶。令牌桶的优势是实现简单，易于控制。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563932610,"ip_address":"","comment_id":116395,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"1.拆单失败的延时重拆，死信告警。2.消峰和解耦也用到。\n\n问题：控制topic消费线程也能限流，不一定要引入令牌桶，要弄令牌桶，其实走redis更好一点。","like_count":11,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459519,"discussion_content":"限流的方法有很多，当然不止令牌桶。令牌桶的优势是实现简单，易于控制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563932610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116292,"user_name":"Geek_bbe9ea","can_delete":false,"product_type":"c1","uid":1336413,"ip_address":"","ucode":"4A0DA7C81D233C","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/5d/c8e2663b.jpg","comment_is_top":false,"comment_ctime":1563834632,"is_pvip":false,"replies":[{"id":42552,"content":"是的，很多公司会用消息队列来做异构数据库之间的数据同步，但是一定要注意顺序问题。像MySQL Binlog这种，是要求严格有序的，否则会出现问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846174,"ip_address":"","comment_id":116292,"utype":1}],"discussion_count":6,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"修改数据库做数据同步也可以用","like_count":9,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459468,"discussion_content":"是的，很多公司会用消息队列来做异构数据库之间的数据同步，但是一定要注意顺序问题。像MySQL Binlog这种，是要求严格有序的，否则会出现问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2252648,"avatar":"https://static001.geekbang.org/account/avatar/00/22/5f/68/8e4407c7.jpg","nickname":"💡","note":"","ucode":"8AB762A8CDFEF7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577873,"discussion_content":"Canal","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656400987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1477359,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8a/ef/ac2937ac.jpg","nickname":"Geek_342489","note":"","ucode":"40610664021607","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219163,"discussion_content":"想请教一下李玥老师，用消息队列来做异构数据库之间的数据同步的时候如何保证“严格有序”呀？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585740873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1162714,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bd/da/3d76ea74.jpg","nickname":"看不到de颜色","note":"","ucode":"88348CCAE81931","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3147,"discussion_content":"监听binlog更新做数据异构很常见。回滚是不存在的，因为binlog只有在commit后才会写。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564220647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1014373,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7a/65/9baae043.jpg","nickname":"毛露","note":"","ucode":"3FCA43A6C06A40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1162714,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bd/da/3d76ea74.jpg","nickname":"看不到de颜色","note":"","ucode":"88348CCAE81931","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3888,"discussion_content":"监听binlog是没问题。不过我遇到过是在业务代码里绑定sql语句，再用做同步的...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564926386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3147,"ip_address":"","group_id":0},"score":3888,"extra":""}]},{"author":{"id":1014373,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7a/65/9baae043.jpg","nickname":"毛露","note":"","ucode":"3FCA43A6C06A40","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2750,"discussion_content":"做数据库的数据同步？那主数据库回滚了怎么办？全量同步吗？（那全量同步的时候，新增的操作怎么办？）。消息队列这么用是偏门吧，个人理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563895655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118068,"user_name":"Geek_e7834d","can_delete":false,"product_type":"c1","uid":1530493,"ip_address":"","ucode":"ABAF1B1B7E6490","user_header":"","comment_is_top":false,"comment_ctime":1564227431,"is_pvip":false,"replies":[{"id":43269,"content":"异地容灾是个比较难解决的问题。\n\n我的经验是：绝大部分主题是不需要异地容灾的，因为消息队列不会直接堆外提供服务，它直接服务都是机房内部的应用，当出现整个机房大面积断电或者机房外网中断的时候，消息的生产者本身已经不能提供服务了，这时候消息队列的容灾是没有意义的。如果生产者它本身支持异地容灾能自动把服务迁移到其它机房，那这个应用在其它机房的实例使用本机房内的消息队列就行了，也不需要消息队列做异地复制和容灾。\n\n但是，确实有极少数应用比较特殊，它是有异地容灾的需求的，我们目前的方案是多副本分布在多个机房中，配合就近消费来实现。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564238785,"ip_address":"","comment_id":118068,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"使用消息队列怎么保证实现节点时效时候能够切换到异地节点 然后还要保证不丢失消息呢或者尽量少丢失消息？异地冗余都有什么好方案呢？","like_count":8,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460249,"discussion_content":"异地容灾是个比较难解决的问题。\n\n我的经验是：绝大部分主题是不需要异地容灾的，因为消息队列不会直接堆外提供服务，它直接服务都是机房内部的应用，当出现整个机房大面积断电或者机房外网中断的时候，消息的生产者本身已经不能提供服务了，这时候消息队列的容灾是没有意义的。如果生产者它本身支持异地容灾能自动把服务迁移到其它机房，那这个应用在其它机房的实例使用本机房内的消息队列就行了，也不需要消息队列做异地复制和容灾。\n\n但是，确实有极少数应用比较特殊，它是有异地容灾的需求的，我们目前的方案是多副本分布在多个机房中，配合就近消费来实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564238785,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116701,"user_name":"一记妙蛙直拳","can_delete":false,"product_type":"c1","uid":1375256,"ip_address":"","ucode":"BC3556131D4D61","user_header":"https://static001.geekbang.org/account/avatar/00/14/fc/18/8e69f7cf.jpg","comment_is_top":false,"comment_ctime":1563892157,"is_pvip":false,"replies":[{"id":42739,"content":"总结的很到位，加油！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563934719,"ip_address":"","comment_id":116701,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"收获总结：\n1. 消息队列可以理解为一个暂存消息（可以是一条数据或者一个请求等等）的地方，有生产者有消费者\n2.消息队列的主要三个用处：\na. 实现异步处理，利用消息队列可以将串行化的功能，在非必要串行的地方实现并行化，从而提升系统性能，缩短响应时间\nb. 实现流量控制  在高并发的情况下，为了避免大量的请求冲击后台服务，可以使用消息队列暂存请求，后台服务以最大处理能力消费请求，保证后台的安全性，其缺点拉长系统调用链，响应时间变长，增加系统复杂度；另外一种不改变系统调用链的实现方式，引入令牌桶的概念，单位时间内生成一定量的令牌放到令牌桶（即消息队列）中，令牌的数量要依据后台系统的处理能力，网关接受到请求后取到令牌才能调用后台服务，取不到则请求失败\nc. 系统间解耦  多个下游系统会频繁调用上游系统的接口获取数据的情况下，若上游系统将消息放到指定queue中，多个下游系统订阅消息，就可以避免上游为对接多个下游时频繁地修改接口，降低系统间的耦合度\n思考题：\n目前erp项目中，订单数据需要同时发给工程去评估以及企划去进行物料核算，现在的实现方式则是系统之间通过接口进行拉去或者推送，这就可以使用消息队列，将订单放到消息队列中，供下游订阅使用，降低系统间解耦\n","like_count":8,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459644,"discussion_content":"总结的很到位，加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548239,"discussion_content":"关于“c. 系统间解耦 多个下游系统会频繁调用上游系统的接口获取数据的情况下，若上游系统将消息放到指定queue中，多个下游系统订阅消息，就可以避免上游为对接多个下游时频繁地修改接口，降低系统间的耦合度” 还是没看明白，为什么就可以避免上游为对接多个下游时频繁地修改接口， 需求在变，接口不用修改？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643096019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111125,"discussion_content":"如果评估和物料核算不是一过性的任务，那么现在的接口push&amp;pull就是合理的，因为消息消费掉就没了，除非评估和物料核算端在消费消息后持久了自己清洗过的订单数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577782249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2879,"discussion_content":"有点不明白，如果你系统的服务接口是拉去，那就没必要上消息队列了，如果用消息队列，那服务接口的意义是什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564018227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":125424,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1566182769,"is_pvip":false,"replies":[{"id":46211,"content":"A1：我们会在几节课里面分阶段讲解；\nA2：一般都是采用长连接机制，收到请求后响应；\nA3：首先需要检查一下本机的是不是负载太高，是不是有fullGC，这些都会拖慢程序整体运行。如果是发消息超时，需要联系运维人员，如果是收消息超时，优先看一下消费的业务逻辑是不是执行的太慢了。\nA4：一般如果一直能拉到消息，就会一直不停的拉取，如果没有消息，会定时拉取，直到拉到新的消息。\nA5：关于“broker怎么实现高性能的消息落盘的”这个问题，我在进阶篇中会讲到，请关注。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566264078,"ip_address":"","comment_id":125424,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"老师的比喻很棒，通俗易懂。\n\n1：消息队列的核心作用？\n1-1：服务解藕\n1-2：削峰填谷\n1-3：异步处理\n\n2：消息队列带来的问题？\n2-1：增加系统的复杂度\n2-2：延迟了请求的响应时间\n2-3：可能会丢消息、可能会重复消费消息、可能导致数据不一致、消息可能是无序的\n\n3：消息队列的适用场景？\n3-1：秒杀\n3-2：发送邮件\n3-3：日志收集\n3-4：离线数据持久化\n3-5：其他不担心数据不是强一致性的大流量高并发场景\n\n4：消息队列不适合的场景？\n4-1：要求实时响应\n4-2：要求数据强一致性\n4-3：不能容忍消息丢失\n4-5：直接和钱相关的系统，比如：支付系统\n\nMQ能干啥？啥时候适合使用？这些还是比较容易理解的，痛点在于自己设计并实现一个MQ能否扛住亿级流量，并且具有各种其他优良特性。\n\n李老师，请教几个：\n1：消息的全生命轨迹，会描述嘛？\n2：producer发送消息是通过TCP连接的，broker什么时候响应客户端？\n3：使用JMQ几乎天天报超时异常？这个超时异常有哪些场景会发生？为什么总也解决不了？\n4：consumer拉取消息的时机是什么时候？\n5：broker怎么实现高性能的消息落盘的？\n","like_count":7,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463568,"discussion_content":"A1：我们会在几节课里面分阶段讲解；\nA2：一般都是采用长连接机制，收到请求后响应；\nA3：首先需要检查一下本机的是不是负载太高，是不是有fullGC，这些都会拖慢程序整体运行。如果是发消息超时，需要联系运维人员，如果是收消息超时，优先看一下消费的业务逻辑是不是执行的太慢了。\nA4：一般如果一直能拉到消息，就会一直不停的拉取，如果没有消息，会定时拉取，直到拉到新的消息。\nA5：关于“broker怎么实现高性能的消息落盘的”这个问题，我在进阶篇中会讲到，请关注。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566264078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009652,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","nickname":"钱","note":"","ucode":"2C92A243A463D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5463,"discussion_content":"今天又出现批量发送超时，JMQ支持的同学咚咚根本不回，电话也只说在处理线上业务问题，我这个要等，我问等多久，他说一两个小时吧!\n自己排查了一下\n1：producer客户端的机器没有 FULL GC\n2：系统负载正常\n3：网络没看到大的波动\n4：TCP重传也没有\n再往下就不知道怎么排查了\n下面只能等运维啦😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566286459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009652,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","nickname":"钱","note":"","ucode":"2C92A243A463D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5445,"discussion_content":"多谢答复\n其实我是想深入详细的了解，比如问题2，感觉不是这么简单，我看kafka接到消息后会有落盘，同步数据给副本等，最后才会响应producer","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566272581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133892,"user_name":"poettian","can_delete":false,"product_type":"c1","uid":1144021,"ip_address":"","ucode":"26EE408F908D12","user_header":"https://static001.geekbang.org/account/avatar/00/11/74/d5/56b3a879.jpg","comment_is_top":false,"comment_ctime":1568691233,"is_pvip":false,"replies":[{"id":51432,"content":"这个方式最大的问题是性能达不到要求，一开始秒杀所有人点击秒杀之后都在转圈圈。\n\n另外，单台Redis Server如果宕机了怎么办呢？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568769278,"ip_address":"","comment_id":133892,"utype":1}],"discussion_count":13,"race_medal":0,"score":3,"product_id":100032301,"comment_content":"老师您好，请教一个问题。关于秒杀这种场景我想的是用redis的list不就完全可以实现吗。活动开始前，先把要抢的N个商品push到list中。活动开始后，每来一个请求就从list中pop一个商品出去，当list为空后直接返回“已抢光”的响应，由于可秒杀的商品数量并不多，能通过的请求也可以采用同步的方式进行，这样不是既简单又快速。可是我搜了一下网上的方案，都特别的复杂，请问这种方式有什么问题吗？","like_count":6,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467547,"discussion_content":"这个方式最大的问题是性能达不到要求，一开始秒杀所有人点击秒杀之后都在转圈圈。\n\n另外，单台Redis Server如果宕机了怎么办呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568769278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1195017,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3c/09/b7f0eac6.jpg","nickname":"谁都会变","note":"","ucode":"9965748F7EBB57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":587838,"discussion_content":"为啥会转圈啊，拿到了商品的才处理，没拿到的不是返回“抢光了”吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663316636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":467547,"ip_address":"上海","group_id":0},"score":587838,"extra":""}]},{"author":{"id":1127809,"avatar":"https://static001.geekbang.org/account/avatar/00/11/35/81/cdfd5a32.jpg","nickname":"破晓以前","note":"","ucode":"9B63A83DAC703D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340790,"discussion_content":"我觉得你说的没问题，因为你是基于商品数量很少的条件之上而言的。如果库存是只有10个商品，并且抢单之后的流程非常简单，可能就加一条订单信息就结束了，那问题不大，但是老师说的redis宕机的问题要考虑做灾备。 \n但是实际情况是你需要在下单之后做很多事情，发短信，通知下游系统等，这些操作如果按照你说的同步进行，那一段时间内，这10个请求肯定是占用着线程的，所以当库存越来越多的情况下，你想一想。没有最好的架构，只有最合适的架构。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610159819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1348830,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/SM4fwn9uFicXU8cQ1rNF2LQdKNbZI1FX1jmdwaE2MTrBawbugj4TQKjMKWG0sGbmqQickyARXZFS8NZtobvoWTHA/132","nickname":"td901105","note":"","ucode":"32D42A4F36FA02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299605,"discussion_content":"redis没有性能问题，是后端的数据库会同步，当请求并发高的时候等待严重","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597748221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2055554,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","nickname":"keep_it_real","note":"","ucode":"F5057CAF752FF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335699,"discussion_content":"redis作者都不同意你这么干的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608277369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1144021,"avatar":"https://static001.geekbang.org/account/avatar/00/11/74/d5/56b3a879.jpg","nickname":"poettian","note":"","ucode":"26EE408F908D12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2055554,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","nickname":"keep_it_real","note":"","ucode":"F5057CAF752FF3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339743,"discussion_content":"那redis作者会怎么告诉我是哪有问题呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609767027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335699,"ip_address":"","group_id":0},"score":339743,"extra":""}]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111148,"discussion_content":"如有100件商品，商品出库操作需要0.5秒，而出库是要同步的，那么第100个请求至少需要100*0.5秒=50秒，就是说至少转50秒的圈，如果没超时的话。阻塞点在同步出库。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577782556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1144021,"avatar":"https://static001.geekbang.org/account/avatar/00/11/74/d5/56b3a879.jpg","nickname":"poettian","note":"","ucode":"26EE408F908D12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":112218,"discussion_content":"这么解释不对吧，请求处理是同步的，但是请求可以并发啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577844898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":111148,"ip_address":"","group_id":0},"score":112218,"extra":""},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1144021,"avatar":"https://static001.geekbang.org/account/avatar/00/11/74/d5/56b3a879.jpg","nickname":"poettian","note":"","ucode":"26EE408F908D12","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113707,"discussion_content":"出库也并发吗？库存是临界资源，修改不做同步可以吗？如果你觉得可以的话，请教我下怎么做。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577928824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":112218,"ip_address":"","group_id":0},"score":113707,"extra":""}]},{"author":{"id":1144021,"avatar":"https://static001.geekbang.org/account/avatar/00/11/74/d5/56b3a879.jpg","nickname":"poettian","note":"","ucode":"26EE408F908D12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14589,"discussion_content":"是redis的性能达不到要求吗？这么一说我又有些糊涂了。另外，消息队列服务器如果宕机了不是也一样吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568772348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1164531,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","nickname":"Bug? Feature!","note":"","ucode":"F8FA8A0094FBA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1144021,"avatar":"https://static001.geekbang.org/account/avatar/00/11/74/d5/56b3a879.jpg","nickname":"poettian","note":"","ucode":"26EE408F908D12","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33445,"discussion_content":"互相阻塞等待啊，性能就低呗，server都宕机了，还秒杀个锤子哦。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571125062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":14589,"ip_address":"","group_id":0},"score":33445,"extra":""},{"author":{"id":1144021,"avatar":"https://static001.geekbang.org/account/avatar/00/11/74/d5/56b3a879.jpg","nickname":"poettian","note":"","ucode":"26EE408F908D12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1164531,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","nickname":"Bug? Feature!","note":"","ucode":"F8FA8A0094FBA0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33469,"discussion_content":"互相阻塞等待指的是redis还是后面的服务器？没太理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571127638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":33445,"ip_address":"","group_id":0},"score":33469,"extra":""},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1144021,"avatar":"https://static001.geekbang.org/account/avatar/00/11/74/d5/56b3a879.jpg","nickname":"poettian","note":"","ucode":"26EE408F908D12","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389056,"discussion_content":"还有redis的数据同步问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629105187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":14589,"ip_address":"","group_id":0},"score":389056,"extra":""}]}]},{"had_liked":false,"id":118354,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/d9330d2b.jpg","comment_is_top":false,"comment_ctime":1564328640,"is_pvip":false,"replies":[{"id":43380,"content":"NSQ","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564364756,"ip_address":"","comment_id":118354,"utype":1}],"discussion_count":3,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"好像还有个用go语言写的开源的消息队列","like_count":5},{"had_liked":false,"id":143533,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1571726683,"is_pvip":false,"replies":[{"id":55429,"content":"比如：这里的风险控制主要是要识别出请求是否来自真实合法的用户，而不是地下灰产的机器人程序。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1571739816,"ip_address":"","comment_id":143533,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"老师 这里的风险控制是指的什么啊","like_count":4,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460370,"discussion_content":"NSQ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564364756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043480,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/18/bf7254d3.jpg","nickname":"肥low","note":"","ucode":"A158AFAAB8C742","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13960,"discussion_content":"这个队列用的多么?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568717961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1318540,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/d9330d2b.jpg","nickname":"花儿少年","note":"","ucode":"CFE4F64243673B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1043480,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/18/bf7254d3.jpg","nickname":"肥low","note":"","ucode":"A158AFAAB8C742","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":17961,"discussion_content":"我们公司在用，多不多不是很清楚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568991593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":13960,"ip_address":"","group_id":0},"score":17961,"extra":""}]}]},{"had_liked":false,"id":116526,"user_name":"Mark Yao","can_delete":false,"product_type":"c1","uid":1091768,"ip_address":"","ucode":"0535CEB691F618","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/b8/73ef30ed.jpg","comment_is_top":false,"comment_ctime":1563863651,"is_pvip":false,"replies":[{"id":42728,"content":"接下来会有一节课专门讲消息积压的问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563934252,"ip_address":"","comment_id":116526,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"打卡，打卡，我们系统目前使用rabbitmq，有些业务实时数据对接第三方厂家，有些数据是TCP接入，有些HTTP过来，为解决和我们业务耦合。在使用遇到因特殊情况出现异常，消息大量堆积，最后导致爆掉。","like_count":4,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459575,"discussion_content":"接下来会有一节课专门讲消息积压的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116319,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1563840694,"is_pvip":false,"replies":[{"id":42561,"content":"架构可以随着业务的发展持续的演进，相信问题都可以解决。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846791,"ip_address":"","comment_id":116319,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"      服务解耦：其实就是后续将要面对的问题。\n      数据库压力偏大：虽然性能已经通过之前的丁奇的课获得了不少思路和处理方式，确实让数据库的查询时间提升到之前的20-30%。\n        数据量进一步再次增长后期压力太大了：redis已经用了，可是还是不够，希望能够通过消息队列预先为6-12个月后的大数据量做些准备，以应当后期。","like_count":4,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459484,"discussion_content":"架构可以随着业务的发展持续的演进，相信问题都可以解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116318,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1563840333,"is_pvip":false,"replies":[{"id":42560,"content":"打卡已收到，记得每节课都来打卡。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846588,"ip_address":"","comment_id":116318,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"滴滴滴，打卡","like_count":4,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459483,"discussion_content":"打卡已收到，记得每节课都来打卡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119608,"user_name":"神经蛙","can_delete":false,"product_type":"c1","uid":1604240,"ip_address":"","ucode":"0511F6E6B30440","user_header":"https://static001.geekbang.org/account/avatar/00/18/7a/90/dc3537e7.jpg","comment_is_top":false,"comment_ctime":1564635966,"is_pvip":false,"replies":[{"id":43962,"content":"如果不能要求匀速，虽然限制住了平均速度，但某个瞬时的速度有可能还是很快，可能会把后面的服务给压垮。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564707910,"ip_address":"","comment_id":119608,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"有一个小问题：为什么令牌发生器要“匀速”产生令牌，一次性产出足够的令牌到放入到令牌队列会有什么问题呢？","like_count":3,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460976,"discussion_content":"如果不能要求匀速，虽然限制住了平均速度，但某个瞬时的速度有可能还是很快，可能会把后面的服务给压垮。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564707910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116293,"user_name":"我知道了嗯","can_delete":false,"product_type":"c1","uid":1138471,"ip_address":"","ucode":"9186EC1F32C490","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/27/a6873bc9.jpg","comment_is_top":false,"comment_ctime":1563834704,"is_pvip":false,"replies":[{"id":42553,"content":"记得每节课来打卡。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846189,"ip_address":"","comment_id":116293,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"打卡，滴滴滴","like_count":3,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459469,"discussion_content":"记得每节课来打卡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147627,"user_name":"Tulane","can_delete":false,"product_type":"c1","uid":1242467,"ip_address":"","ucode":"E1F5108B9E738F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/63/53639bb7.jpg","comment_is_top":false,"comment_ctime":1572874404,"is_pvip":false,"replies":[{"id":57123,"content":"\n\n后续我会持续输出一些技术类的分享，形式可能是多种多样的，感谢关注！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1573006505,"ip_address":"","comment_id":147627,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"买了20多门课, 老师这门课是我最喜欢的, 真的是带着我一步步真正弄懂消息队列的原理, 老师有开下一门课的打算吗","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473276,"discussion_content":"\n\n后续我会持续输出一些技术类的分享，形式可能是多种多样的，感谢关注！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573006505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142400,"user_name":"军交博文兄","can_delete":false,"product_type":"c1","uid":1338064,"ip_address":"","ucode":"98C315C59EAEC3","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/d0/af2e16f1.jpg","comment_is_top":false,"comment_ctime":1571363395,"is_pvip":false,"replies":[{"id":54934,"content":"不同的产品可以使用不同的分区","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1571369382,"ip_address":"","comment_id":142400,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"老师，第二种方式有个疑问，在网关后加入消息队列，如果买不同种类的产品，前面队列都被A产品占用光了，那B产品岂不是在秒杀时刻，一件也卖不出去","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471106,"discussion_content":"不同的产品可以使用不同的分区","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571369382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122954,"user_name":"Geek_q29f6t","can_delete":false,"product_type":"c1","uid":1299521,"ip_address":"","ucode":"1FDEC87C133E28","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJbh5FQajwKhNlMrkoSklPpOXBtEYXCLvuWibhfWIS9QxHWDqzhEHJzEdmtUiaiaqFjfpsr2LwgNGpbQ/132","comment_is_top":false,"comment_ctime":1565579568,"is_pvip":false,"replies":[{"id":45260,"content":"👍👍👍","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1565655697,"ip_address":"","comment_id":122954,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"问题：哪些问题可以通过引入消息队列来解决？\n我们系统中存在着大量的报表计算，虽然做了负载均衡，但是数据库的计算压力还是比较大。后来就用了消息队列来控制“同时进行计算的最大数量”，效果还可以。 不过长远来看，还得要解决数据库压力大的问题。","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471106,"discussion_content":"不同的产品可以使用不同的分区","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571369382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118354,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/d9330d2b.jpg","comment_is_top":false,"comment_ctime":1564328640,"is_pvip":false,"replies":[{"id":43380,"content":"NSQ","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564364756,"ip_address":"","comment_id":118354,"utype":1}],"discussion_count":3,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"好像还有个用go语言写的开源的消息队列","like_count":5,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460370,"discussion_content":"NSQ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564364756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043480,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/18/bf7254d3.jpg","nickname":"肥low","note":"","ucode":"A158AFAAB8C742","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":13960,"discussion_content":"这个队列用的多么?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568717961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1318540,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/d9330d2b.jpg","nickname":"花儿少年","note":"","ucode":"CFE4F64243673B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1043480,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/18/bf7254d3.jpg","nickname":"肥low","note":"","ucode":"A158AFAAB8C742","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":17961,"discussion_content":"我们公司在用，多不多不是很清楚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568991593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":13960,"ip_address":"","group_id":0},"score":17961,"extra":""}]}]},{"had_liked":false,"id":143533,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1571726683,"is_pvip":false,"replies":[{"id":55429,"content":"比如：这里的风险控制主要是要识别出请求是否来自真实合法的用户，而不是地下灰产的机器人程序。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1571739816,"ip_address":"","comment_id":143533,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"老师 这里的风险控制是指的什么啊","like_count":4,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471581,"discussion_content":"比如：这里的风险控制主要是要识别出请求是否来自真实合法的用户，而不是地下灰产的机器人程序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571739816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116526,"user_name":"Mark Yao","can_delete":false,"product_type":"c1","uid":1091768,"ip_address":"","ucode":"0535CEB691F618","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/b8/73ef30ed.jpg","comment_is_top":false,"comment_ctime":1563863651,"is_pvip":false,"replies":[{"id":42728,"content":"接下来会有一节课专门讲消息积压的问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563934252,"ip_address":"","comment_id":116526,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"打卡，打卡，我们系统目前使用rabbitmq，有些业务实时数据对接第三方厂家，有些数据是TCP接入，有些HTTP过来，为解决和我们业务耦合。在使用遇到因特殊情况出现异常，消息大量堆积，最后导致爆掉。","like_count":4,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471581,"discussion_content":"比如：这里的风险控制主要是要识别出请求是否来自真实合法的用户，而不是地下灰产的机器人程序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571739816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116319,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1563840694,"is_pvip":false,"replies":[{"id":42561,"content":"架构可以随着业务的发展持续的演进，相信问题都可以解决。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846791,"ip_address":"","comment_id":116319,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"      服务解耦：其实就是后续将要面对的问题。\n      数据库压力偏大：虽然性能已经通过之前的丁奇的课获得了不少思路和处理方式，确实让数据库的查询时间提升到之前的20-30%。\n        数据量进一步再次增长后期压力太大了：redis已经用了，可是还是不够，希望能够通过消息队列预先为6-12个月后的大数据量做些准备，以应当后期。","like_count":4,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459575,"discussion_content":"接下来会有一节课专门讲消息积压的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116318,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1563840333,"is_pvip":false,"replies":[{"id":42560,"content":"打卡已收到，记得每节课都来打卡。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846588,"ip_address":"","comment_id":116318,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"滴滴滴，打卡","like_count":4,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459484,"discussion_content":"架构可以随着业务的发展持续的演进，相信问题都可以解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846791,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119608,"user_name":"神经蛙","can_delete":false,"product_type":"c1","uid":1604240,"ip_address":"","ucode":"0511F6E6B30440","user_header":"https://static001.geekbang.org/account/avatar/00/18/7a/90/dc3537e7.jpg","comment_is_top":false,"comment_ctime":1564635966,"is_pvip":false,"replies":[{"id":43962,"content":"如果不能要求匀速，虽然限制住了平均速度，但某个瞬时的速度有可能还是很快，可能会把后面的服务给压垮。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564707910,"ip_address":"","comment_id":119608,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"有一个小问题：为什么令牌发生器要“匀速”产生令牌，一次性产出足够的令牌到放入到令牌队列会有什么问题呢？","like_count":3,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459483,"discussion_content":"打卡已收到，记得每节课都来打卡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116293,"user_name":"我知道了嗯","can_delete":false,"product_type":"c1","uid":1138471,"ip_address":"","ucode":"9186EC1F32C490","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/27/a6873bc9.jpg","comment_is_top":false,"comment_ctime":1563834704,"is_pvip":false,"replies":[{"id":42553,"content":"记得每节课来打卡。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846189,"ip_address":"","comment_id":116293,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"打卡，滴滴滴","like_count":3,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460976,"discussion_content":"如果不能要求匀速，虽然限制住了平均速度，但某个瞬时的速度有可能还是很快，可能会把后面的服务给压垮。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564707910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147627,"user_name":"Tulane","can_delete":false,"product_type":"c1","uid":1242467,"ip_address":"","ucode":"E1F5108B9E738F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/63/53639bb7.jpg","comment_is_top":false,"comment_ctime":1572874404,"is_pvip":false,"replies":[{"id":57123,"content":"\n\n后续我会持续输出一些技术类的分享，形式可能是多种多样的，感谢关注！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1573006505,"ip_address":"","comment_id":147627,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"买了20多门课, 老师这门课是我最喜欢的, 真的是带着我一步步真正弄懂消息队列的原理, 老师有开下一门课的打算吗","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459469,"discussion_content":"记得每节课来打卡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142400,"user_name":"军交博文兄","can_delete":false,"product_type":"c1","uid":1338064,"ip_address":"","ucode":"98C315C59EAEC3","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/d0/af2e16f1.jpg","comment_is_top":false,"comment_ctime":1571363395,"is_pvip":false,"replies":[{"id":54934,"content":"不同的产品可以使用不同的分区","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1571369382,"ip_address":"","comment_id":142400,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"老师，第二种方式有个疑问，在网关后加入消息队列，如果买不同种类的产品，前面队列都被A产品占用光了，那B产品岂不是在秒杀时刻，一件也卖不出去","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473276,"discussion_content":"\n\n后续我会持续输出一些技术类的分享，形式可能是多种多样的，感谢关注！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573006505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122954,"user_name":"Geek_q29f6t","can_delete":false,"product_type":"c1","uid":1299521,"ip_address":"","ucode":"1FDEC87C133E28","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJbh5FQajwKhNlMrkoSklPpOXBtEYXCLvuWibhfWIS9QxHWDqzhEHJzEdmtUiaiaqFjfpsr2LwgNGpbQ/132","comment_is_top":false,"comment_ctime":1565579568,"is_pvip":false,"replies":[{"id":45260,"content":"👍👍👍","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1565655697,"ip_address":"","comment_id":122954,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100032301,"comment_content":"问题：哪些问题可以通过引入消息队列来解决？\n我们系统中存在着大量的报表计算，虽然做了负载均衡，但是数据库的计算压力还是比较大。后来就用了消息队列来控制“同时进行计算的最大数量”，效果还可以。 不过长远来看，还得要解决数据库压力大的问题。","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462474,"discussion_content":"👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565655697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548244,"discussion_content":"认为本质类似于控制并发量，控制单位时间内的硬件资源相对富余。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643097563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118008,"user_name":"DeathKnightH","can_delete":false,"product_type":"c1","uid":1058526,"ip_address":"","ucode":"632E00A01247A3","user_header":"","comment_is_top":false,"comment_ctime":1564211604,"is_pvip":false,"replies":[{"id":43257,"content":"数据库的实现确实更简单，也更容易做稳定。如果说，时间紧任务重，数据量不大，未来二三年内也不会有很大的增长，团队小人力有限，这其实是一个可行的方案。当同时你也需要付出一些代价，比如延时较高，难于扩展等等。\n\n所以，设计架构需要根据实际情况灵活考虑，没有什么方案就一定是好的。\n\n通常情况下，这种场景还是是用消息队列更合适一些。\n\n\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564236650,"ip_address":"","comment_id":118008,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"目前还没有使用，但是准备使用。\n应用场景：系统多个模块的告警消息通知。\n设计组给出的设计：使用数据库作为了消息的堆积队列，然后定时任务去轮询数据库发消息。\n我的思考：我认为这样只能实现基本的功能，无法做到实时告警，也无法在一次轮询查出大量数据时控制一次定时任务的执行效率，同时还会给数据库增加不必要的压力，于是想使用消息队列来实现，但是领导和设计组都认为消息队列太复杂，没必要，想拿出有力的证据证明用消息队列实现更好，所以才来学习这个专栏。\n目前看来消息队列可以解决告警系统的以下问题：\n1.同步处理变为异步处理，减少发一次消息需要的时间。\n2.流量控制，不会把大量请求一次性全塞给邮件服务和短信服务。\n3.服务解耦，把邮件服务、短信服务和主应用解耦，可以方便以后应用和服务的水平扩展。","like_count":2},{"had_liked":false,"id":117131,"user_name":"sun留白","can_delete":false,"product_type":"c1","uid":1531348,"ip_address":"","ucode":"53FEEA5E244C9A","user_header":"https://static001.geekbang.org/account/avatar/00/17/5d/d4/e5ea1c25.jpg","comment_is_top":false,"comment_ctime":1563973831,"is_pvip":false,"replies":[{"id":42938,"content":"这两个问题应该都是可以解决的，主流的消息队列，端到端的时延（从生产者发出消息直到消费者收到消息）一般可以做到5ms以内，加上业务代码的处理逻辑，做到1s以内的时延不是太难。另外，丢消息的问题大多是因为配置不当导致的，后面我们会专门去讲。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564019061,"ip_address":"","comment_id":117131,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"在一个账户系统和客户系统之间，开户成功后，会用消息对队列，通知客户系统客户开户成功的消息。账户系统通知客户系统不是强关联，所以通过消息队列，让客户系统去做后续处理登记即可。但是，由于延迟的效果，客户系统不能及时拿到消息，或者消息不一致，导致对于客户开户成与否，判断不一致；或者数据中中间丢失了，需要重发mq消息。","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460221,"discussion_content":"数据库的实现确实更简单，也更容易做稳定。如果说，时间紧任务重，数据量不大，未来二三年内也不会有很大的增长，团队小人力有限，这其实是一个可行的方案。当同时你也需要付出一些代价，比如延时较高，难于扩展等等。\n\n所以，设计架构需要根据实际情况灵活考虑，没有什么方案就一定是好的。\n\n通常情况下，这种场景还是是用消息队列更合适一些。\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564236650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1477359,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8a/ef/ac2937ac.jpg","nickname":"Geek_342489","note":"","ucode":"40610664021607","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219172,"discussion_content":"感觉告警消息的话，时效性应该要求很高，我们在用cmq，用起来很简单☺️","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585741634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141798,"user_name":"沙可","can_delete":false,"product_type":"c1","uid":1284820,"ip_address":"","ucode":"1498D221133DD8","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/d4/8632497b.jpg","comment_is_top":false,"comment_ctime":1571226388,"is_pvip":false,"replies":[{"id":54790,"content":"希望你能完整的把整个课程跟下来，一定会有收获的！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1571272480,"ip_address":"","comment_id":141798,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"开篇我就觉得钱没白花","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459833,"discussion_content":"这两个问题应该都是可以解决的，主流的消息队列，端到端的时延（从生产者发出消息直到消费者收到消息）一般可以做到5ms以内，加上业务代码的处理逻辑，做到1s以内的时延不是太难。另外，丢消息的问题大多是因为配置不当导致的，后面我们会专门去讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564019061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138178,"user_name":"Angus Wang","can_delete":false,"product_type":"c1","uid":1211596,"ip_address":"","ucode":"CFAABDAEE954DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/7c/cc/6ce2355a.jpg","comment_is_top":false,"comment_ctime":1570083393,"is_pvip":false,"replies":[{"id":53190,"content":"请看一下：08 | 答疑解惑（一） : 网关如何接收服务端的秒杀结果？这节课。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1570156331,"ip_address":"","comment_id":138178,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"流量控制的时候，数据放入到消息队列好理解，请问http请求如何放入到消息队列的呢？","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469424,"discussion_content":"请看一下：08 | 答疑解惑（一） : 网关如何接收服务端的秒杀结果？这节课。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570156331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119046,"user_name":"撒旦的堕落","can_delete":false,"product_type":"c1","uid":1116864,"ip_address":"","ucode":"15F6AA41EE556F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0a/c0/401c240e.jpg","comment_is_top":false,"comment_ctime":1564493097,"is_pvip":false,"replies":[{"id":43724,"content":"同学你哪里懵呢？可以说一下具体的问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564539414,"ip_address":"","comment_id":119046,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"有次面试就被问道 如何设计一个秒杀系统  因为一直想不通 用队列 同步转成了异步  秒杀结果如何通知客户  就没有说到队列 结果就gg了      后来想到将结果保存到缓存  然后前端去轮询 感觉在秒杀的时候服务器压力已经很大了 再这样更加消耗服务器性能 感觉有点不妥 老师说通过rpc通知网关 个人还是有点懵  老师能否具体说说呢","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460725,"discussion_content":"同学你哪里懵呢？可以说一下具体的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564539414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118058,"user_name":"看不到de颜色","can_delete":false,"product_type":"c1","uid":1162714,"ip_address":"","ucode":"88348CCAE81931","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/da/3d76ea74.jpg","comment_is_top":false,"comment_ctime":1564220190,"is_pvip":false,"replies":[{"id":43259,"content":"需要特别注意严格顺序的问题","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564237537,"ip_address":"","comment_id":118058,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"目前工作中主要用到消息中间件地方：消息系统各节点间消息流转、应用间信息变更通知、监听binlog从而实现数据异构。","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460243,"discussion_content":"需要特别注意严格顺序的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564237537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117731,"user_name":"Geek_zbvt62","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/d28174a9.jpg","comment_is_top":false,"comment_ctime":1564120663,"is_pvip":false,"replies":[{"id":43133,"content":"感谢指出的错误，我联系编辑小姐姐修改","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564131080,"ip_address":"","comment_id":117731,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"1. “增加了系统调用链环节，导致总体的响应增加了系统调用链环节，导...” 这一段应该是笔误。\n2. 我们使用消息队列，除了削峰，流控，解耦外，还有两个目的一是分布式事务的最终一致性（事务消息），二是延时功能, 简单的一次性延时处理没必要引入复杂的定时任务框架。\n3. 感觉基于某种队列的令牌桶, 有两个问题不好解决呀，1是令牌桶溢出不好控制（要是redis还好写）2是不好保证令牌生产者的HA。\n4. 最后，李老师考虑建个学习群么？","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460099,"discussion_content":"感谢指出的错误，我联系编辑小姐姐修改","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564131080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117606,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1564102230,"is_pvip":false,"replies":[{"id":43104,"content":"语言不是问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564108911,"ip_address":"","comment_id":117606,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"老师。用go语言 重新写消息队列 合适吗","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460047,"discussion_content":"语言不是问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564108911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117419,"user_name":"一朝一夕","can_delete":false,"product_type":"c1","uid":1615636,"ip_address":"","ucode":"DD3A61DA308A8E","user_header":"https://static001.geekbang.org/account/avatar/00/18/a7/14/8490439f.jpg","comment_is_top":false,"comment_ctime":1564043464,"is_pvip":false,"replies":[{"id":43081,"content":"不知道你说的是“限制访问频率失败”指的是高频访问没有限制住，还是错误的限制了正常的访问？\n\n但针对这种场景，建议采用的原则是“宁可暂时放过几个坏人，也不要错杀一个好人”，因为精确的做访问限制需要付出的性能代价是比较大的，一般可以采用不那么精确的方法。比如，你可以异步在Redis里面给每个session访问次数计数，每隔一段时间统计一下哪些session超频，定时（比如每分钟）更新这个超频session的黑名单，来请求的时候直接查黑名单来决定是否放行。这样可能没有实时统计，实时计算来得精确，但性能损失比较小，也可以达到限制超频访问的目的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564105883,"ip_address":"","comment_id":117419,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"针对令牌桶原理，结合目前的项目，引发一个问题点：\n服务端限流 ：限制接口的访问流量\n访问端限流：根据接口的访问流量限制访问频率\n目前处于访问段限流的场景，通过redis进行限流，但是存存在限制访问频率失败的情况，报出接口超频的异常错误，是否也可参考服务端限流令牌桶原理？","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459957,"discussion_content":"不知道你说的是“限制访问频率失败”指的是高频访问没有限制住，还是错误的限制了正常的访问？\n\n但针对这种场景，建议采用的原则是“宁可暂时放过几个坏人，也不要错杀一个好人”，因为精确的做访问限制需要付出的性能代价是比较大的，一般可以采用不那么精确的方法。比如，你可以异步在Redis里面给每个session访问次数计数，每隔一段时间统计一下哪些session超频，定时（比如每分钟）更新这个超频session的黑名单，来请求的时候直接查黑名单来决定是否放行。这样可能没有实时统计，实时计算来得精确，但性能损失比较小，也可以达到限制超频访问的目的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564105883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117271,"user_name":"SuperSnow","can_delete":false,"product_type":"c1","uid":1065351,"ip_address":"","ucode":"84C89AA8083E6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","comment_is_top":false,"comment_ctime":1564017602,"is_pvip":false,"replies":[{"id":42958,"content":"是的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564020735,"ip_address":"","comment_id":117271,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"根据老师给我的回复: 一般来说，一条订单信息的数据量不大，也就几个KB，用消息队列来传递完全不是问题。所以，一条消息能解决的问题，为什么还需要增加一次RPC呢？\n像这种利用消息队列的方式那基本就是推的模式，而采用访问就是拉的方式，是这个意思么？","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459957,"discussion_content":"不知道你说的是“限制访问频率失败”指的是高频访问没有限制住，还是错误的限制了正常的访问？\n\n但针对这种场景，建议采用的原则是“宁可暂时放过几个坏人，也不要错杀一个好人”，因为精确的做访问限制需要付出的性能代价是比较大的，一般可以采用不那么精确的方法。比如，你可以异步在Redis里面给每个session访问次数计数，每隔一段时间统计一下哪些session超频，定时（比如每分钟）更新这个超频session的黑名单，来请求的时候直接查黑名单来决定是否放行。这样可能没有实时统计，实时计算来得精确，但性能损失比较小，也可以达到限制超频访问的目的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564105883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118008,"user_name":"DeathKnightH","can_delete":false,"product_type":"c1","uid":1058526,"ip_address":"","ucode":"632E00A01247A3","user_header":"","comment_is_top":false,"comment_ctime":1564211604,"is_pvip":false,"replies":[{"id":43257,"content":"数据库的实现确实更简单，也更容易做稳定。如果说，时间紧任务重，数据量不大，未来二三年内也不会有很大的增长，团队小人力有限，这其实是一个可行的方案。当同时你也需要付出一些代价，比如延时较高，难于扩展等等。\n\n所以，设计架构需要根据实际情况灵活考虑，没有什么方案就一定是好的。\n\n通常情况下，这种场景还是是用消息队列更合适一些。\n\n\n","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564236650,"ip_address":"","comment_id":118008,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"目前还没有使用，但是准备使用。\n应用场景：系统多个模块的告警消息通知。\n设计组给出的设计：使用数据库作为了消息的堆积队列，然后定时任务去轮询数据库发消息。\n我的思考：我认为这样只能实现基本的功能，无法做到实时告警，也无法在一次轮询查出大量数据时控制一次定时任务的执行效率，同时还会给数据库增加不必要的压力，于是想使用消息队列来实现，但是领导和设计组都认为消息队列太复杂，没必要，想拿出有力的证据证明用消息队列实现更好，所以才来学习这个专栏。\n目前看来消息队列可以解决告警系统的以下问题：\n1.同步处理变为异步处理，减少发一次消息需要的时间。\n2.流量控制，不会把大量请求一次性全塞给邮件服务和短信服务。\n3.服务解耦，把邮件服务、短信服务和主应用解耦，可以方便以后应用和服务的水平扩展。","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460221,"discussion_content":"数据库的实现确实更简单，也更容易做稳定。如果说，时间紧任务重，数据量不大，未来二三年内也不会有很大的增长，团队小人力有限，这其实是一个可行的方案。当同时你也需要付出一些代价，比如延时较高，难于扩展等等。\n\n所以，设计架构需要根据实际情况灵活考虑，没有什么方案就一定是好的。\n\n通常情况下，这种场景还是是用消息队列更合适一些。\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564236650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1477359,"avatar":"https://static001.geekbang.org/account/avatar/00/16/8a/ef/ac2937ac.jpg","nickname":"Geek_342489","note":"","ucode":"40610664021607","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219172,"discussion_content":"感觉告警消息的话，时效性应该要求很高，我们在用cmq，用起来很简单☺️","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585741634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117131,"user_name":"sun留白","can_delete":false,"product_type":"c1","uid":1531348,"ip_address":"","ucode":"53FEEA5E244C9A","user_header":"https://static001.geekbang.org/account/avatar/00/17/5d/d4/e5ea1c25.jpg","comment_is_top":false,"comment_ctime":1563973831,"is_pvip":false,"replies":[{"id":42938,"content":"这两个问题应该都是可以解决的，主流的消息队列，端到端的时延（从生产者发出消息直到消费者收到消息）一般可以做到5ms以内，加上业务代码的处理逻辑，做到1s以内的时延不是太难。另外，丢消息的问题大多是因为配置不当导致的，后面我们会专门去讲。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564019061,"ip_address":"","comment_id":117131,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"在一个账户系统和客户系统之间，开户成功后，会用消息对队列，通知客户系统客户开户成功的消息。账户系统通知客户系统不是强关联，所以通过消息队列，让客户系统去做后续处理登记即可。但是，由于延迟的效果，客户系统不能及时拿到消息，或者消息不一致，导致对于客户开户成与否，判断不一致；或者数据中中间丢失了，需要重发mq消息。","like_count":2,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459833,"discussion_content":"这两个问题应该都是可以解决的，主流的消息队列，端到端的时延（从生产者发出消息直到消费者收到消息）一般可以做到5ms以内，加上业务代码的处理逻辑，做到1s以内的时延不是太难。另外，丢消息的问题大多是因为配置不当导致的，后面我们会专门去讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564019061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141798,"user_name":"沙可","can_delete":false,"product_type":"c1","uid":1284820,"ip_address":"","ucode":"1498D221133DD8","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/d4/8632497b.jpg","comment_is_top":false,"comment_ctime":1571226388,"is_pvip":false,"replies":[{"id":54790,"content":"希望你能完整的把整个课程跟下来，一定会有收获的！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1571272480,"ip_address":"","comment_id":141798,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"开篇我就觉得钱没白花","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470893,"discussion_content":"希望你能完整的把整个课程跟下来，一定会有收获的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571272480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138178,"user_name":"Angus Wang","can_delete":false,"product_type":"c1","uid":1211596,"ip_address":"","ucode":"CFAABDAEE954DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/7c/cc/6ce2355a.jpg","comment_is_top":false,"comment_ctime":1570083393,"is_pvip":false,"replies":[{"id":53190,"content":"请看一下：08 | 答疑解惑（一） : 网关如何接收服务端的秒杀结果？这节课。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1570156331,"ip_address":"","comment_id":138178,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"流量控制的时候，数据放入到消息队列好理解，请问http请求如何放入到消息队列的呢？","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470893,"discussion_content":"希望你能完整的把整个课程跟下来，一定会有收获的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571272480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119046,"user_name":"撒旦的堕落","can_delete":false,"product_type":"c1","uid":1116864,"ip_address":"","ucode":"15F6AA41EE556F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0a/c0/401c240e.jpg","comment_is_top":false,"comment_ctime":1564493097,"is_pvip":false,"replies":[{"id":43724,"content":"同学你哪里懵呢？可以说一下具体的问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564539414,"ip_address":"","comment_id":119046,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"有次面试就被问道 如何设计一个秒杀系统  因为一直想不通 用队列 同步转成了异步  秒杀结果如何通知客户  就没有说到队列 结果就gg了      后来想到将结果保存到缓存  然后前端去轮询 感觉在秒杀的时候服务器压力已经很大了 再这样更加消耗服务器性能 感觉有点不妥 老师说通过rpc通知网关 个人还是有点懵  老师能否具体说说呢","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469424,"discussion_content":"请看一下：08 | 答疑解惑（一） : 网关如何接收服务端的秒杀结果？这节课。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570156331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118058,"user_name":"看不到de颜色","can_delete":false,"product_type":"c1","uid":1162714,"ip_address":"","ucode":"88348CCAE81931","user_header":"https://static001.geekbang.org/account/avatar/00/11/bd/da/3d76ea74.jpg","comment_is_top":false,"comment_ctime":1564220190,"is_pvip":false,"replies":[{"id":43259,"content":"需要特别注意严格顺序的问题","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564237537,"ip_address":"","comment_id":118058,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"目前工作中主要用到消息中间件地方：消息系统各节点间消息流转、应用间信息变更通知、监听binlog从而实现数据异构。","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460725,"discussion_content":"同学你哪里懵呢？可以说一下具体的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564539414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117731,"user_name":"Geek_zbvt62","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/d28174a9.jpg","comment_is_top":false,"comment_ctime":1564120663,"is_pvip":false,"replies":[{"id":43133,"content":"感谢指出的错误，我联系编辑小姐姐修改","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564131080,"ip_address":"","comment_id":117731,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"1. “增加了系统调用链环节，导致总体的响应增加了系统调用链环节，导...” 这一段应该是笔误。\n2. 我们使用消息队列，除了削峰，流控，解耦外，还有两个目的一是分布式事务的最终一致性（事务消息），二是延时功能, 简单的一次性延时处理没必要引入复杂的定时任务框架。\n3. 感觉基于某种队列的令牌桶, 有两个问题不好解决呀，1是令牌桶溢出不好控制（要是redis还好写）2是不好保证令牌生产者的HA。\n4. 最后，李老师考虑建个学习群么？","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460243,"discussion_content":"需要特别注意严格顺序的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564237537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117606,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1564102230,"is_pvip":false,"replies":[{"id":43104,"content":"语言不是问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564108911,"ip_address":"","comment_id":117606,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"老师。用go语言 重新写消息队列 合适吗","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460099,"discussion_content":"感谢指出的错误，我联系编辑小姐姐修改","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564131080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117419,"user_name":"一朝一夕","can_delete":false,"product_type":"c1","uid":1615636,"ip_address":"","ucode":"DD3A61DA308A8E","user_header":"https://static001.geekbang.org/account/avatar/00/18/a7/14/8490439f.jpg","comment_is_top":false,"comment_ctime":1564043464,"is_pvip":false,"replies":[{"id":43081,"content":"不知道你说的是“限制访问频率失败”指的是高频访问没有限制住，还是错误的限制了正常的访问？\n\n但针对这种场景，建议采用的原则是“宁可暂时放过几个坏人，也不要错杀一个好人”，因为精确的做访问限制需要付出的性能代价是比较大的，一般可以采用不那么精确的方法。比如，你可以异步在Redis里面给每个session访问次数计数，每隔一段时间统计一下哪些session超频，定时（比如每分钟）更新这个超频session的黑名单，来请求的时候直接查黑名单来决定是否放行。这样可能没有实时统计，实时计算来得精确，但性能损失比较小，也可以达到限制超频访问的目的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564105883,"ip_address":"","comment_id":117419,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"针对令牌桶原理，结合目前的项目，引发一个问题点：\n服务端限流 ：限制接口的访问流量\n访问端限流：根据接口的访问流量限制访问频率\n目前处于访问段限流的场景，通过redis进行限流，但是存存在限制访问频率失败的情况，报出接口超频的异常错误，是否也可参考服务端限流令牌桶原理？","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460047,"discussion_content":"语言不是问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564108911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117271,"user_name":"SuperSnow","can_delete":false,"product_type":"c1","uid":1065351,"ip_address":"","ucode":"84C89AA8083E6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","comment_is_top":false,"comment_ctime":1564017602,"is_pvip":false,"replies":[{"id":42958,"content":"是的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564020735,"ip_address":"","comment_id":117271,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100032301,"comment_content":"根据老师给我的回复: 一般来说，一条订单信息的数据量不大，也就几个KB，用消息队列来传递完全不是问题。所以，一条消息能解决的问题，为什么还需要增加一次RPC呢？\n像这种利用消息队列的方式那基本就是推的模式，而采用访问就是拉的方式，是这个意思么？","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459892,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564020735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116592,"user_name":"发条橙子 。","can_delete":false,"product_type":"c1","uid":1259218,"ip_address":"","ucode":"ED076F4534FFED","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","comment_is_top":false,"comment_ctime":1563876389,"is_pvip":false,"replies":[{"id":42734,"content":"是的，没有最好的架构，只有最适合的架构。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563934455,"ip_address":"","comment_id":116592,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"果然，当有了一个解决思路，实际上实现的方法有很多。刚看评论有说令牌桶也可以用redis实现 。 像mq的异步处理实际上也可以更简单的用多线程来实现异步，只不过一种是单台机子来处理，另一种可以打到不同的机子。具体哪种更适合自己还是按照自己实际场景来判断","like_count":1},{"had_liked":false,"id":116484,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1563856431,"is_pvip":false,"replies":[{"id":42724,"content":"如果Kafka的Partition数量扩容了，会怎样？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563933707,"ip_address":"","comment_id":116484,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"被开篇吸引了，自己技能图有消息队列，有编程思想，会认真跟下去。很喜欢每篇的标题是提问方式，结尾也是提问方式。后续学习会先思考标题，再看文章，再总结，再思考课后问题，再总结~\n使用kafka将业务数据异步刷到es中，实现中使用业务主键对partition取模的方式保证相同业务主键消息的有序性。","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459562,"discussion_content":"如果Kafka的Partition数量扩容了，会怎样？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563933707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116414,"user_name":"川杰","can_delete":false,"product_type":"c1","uid":1099750,"ip_address":"","ucode":"815211E1D698E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/e6/11f21cb4.jpg","comment_is_top":false,"comment_ctime":1563847815,"is_pvip":false,"replies":[{"id":42719,"content":"PUSH和PULL两种模式无所谓优劣，主要看适合的场景。\n如果采用push模式，我觉得首先需要考虑高可用的问题，无论是服务端还是客户端，如果发生故障，如何切换到其它节点上？在这个切换后，如何保证服务端还能找到正确的客户端，在正确的位置继续推送消息（否则就会丢消息）。\n\n这部分的设计和PULL模式会有些不一样的地方，因为PUSH模式下，是服务端去找客户端。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563933353,"ip_address":"","comment_id":116414,"utype":1}],"discussion_count":3,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"老师您好，我公司的消息中间件是自研的，因为业务场景不复杂，所以本身也没有太大难度。\n我们业务的特点是，只有一个服务端，没有过多的并发，客户端也不超过十个；\n我们处理消息的方式是，服务端生成消息放到队列，客户端轮询去取；\n因为我们服务端实际生成的消息并不多，并且大多集中在某个时间段，所以我认为不断轮询有点浪费资源；\n我看业界普遍的做法好像也是通过轮询的方式取数据，请问有没有除了轮询以外的方式？\n结合我公司场景，我自己思考的方案是：服务端记录对消息感兴趣的客户端IP（客户端不多），当有消息产生时，通过socket直接推给客户端消费（消息本身不多，并发场景较少）；\n请问我的方案是否合理，是否还有更好的方案？谢谢！","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459529,"discussion_content":"PUSH和PULL两种模式无所谓优劣，主要看适合的场景。\n如果采用push模式，我觉得首先需要考虑高可用的问题，无论是服务端还是客户端，如果发生故障，如何切换到其它节点上？在这个切换后，如何保证服务端还能找到正确的客户端，在正确的位置继续推送消息（否则就会丢消息）。\n\n这部分的设计和PULL模式会有些不一样的地方，因为PUSH模式下，是服务端去找客户端。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563933353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1613022,"avatar":"","nickname":"Johnwoo","note":"","ucode":"19B1ED328A96A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2668,"discussion_content":"可以了解一下基于select的io复用实现模式，不阻塞，比轮询更好，而不增加多线程开销","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563850888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1208637,"avatar":"https://static001.geekbang.org/account/avatar/00/12/71/3d/da8dc880.jpg","nickname":"游弋云端","note":"","ucode":"A960E8F5AA25B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2758,"discussion_content":"推和拉的区别，推要确保消息送达，不乱序，消息因果关系、幂等等问题，拉由客户端自己保障。推更实时，但技术上更难。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563900903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116381,"user_name":"木小柒","can_delete":false,"product_type":"c1","uid":1000802,"ip_address":"","ucode":"947439CDD0B5B1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/45/62/3c6041e7.jpg","comment_is_top":false,"comment_ctime":1563845465,"is_pvip":false,"replies":[{"id":42702,"content":"这种是不是可以考虑用消息过滤的方式来解决一部分问题，很多消息队列支持在发送时给每条消息打一个分类标签，然后消费者可以按照标签来过滤，接收部分消息。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563932193,"ip_address":"","comment_id":116381,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"服务解耦用的最多。尤其是订单状态变化，需要通知各种下游系统和重新推送最新动态给外部商家。不过消息队列也没那么容易使用，特别是topic的设计，如果前期设计缺陷不及时补救，后期只能无限制的增加topic，直到成为灾难。我现在的项目就是如此，后继者只能增加新的topic来适应新业务，有的地方甚至保留各种双写，不丢弃旧业务，也解决新业务。所以说架构选型和设计，即使是糟粕，也会延续很长一段时间，给所有后继者都带来更大的工作量和维护成本。","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459513,"discussion_content":"这种是不是可以考虑用消息过滤的方式来解决一部分问题，很多消息队列支持在发送时给每条消息打一个分类标签，然后消费者可以按照标签来过滤，接收部分消息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563932193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116337,"user_name":"Jaising","can_delete":false,"product_type":"c1","uid":1037630,"ip_address":"","ucode":"F68830B7B90F96","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d5/3e/7f3a9c2b.jpg","comment_is_top":false,"comment_ctime":1563842308,"is_pvip":false,"replies":[{"id":42566,"content":"记得坚持学习","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846932,"ip_address":"","comment_id":116337,"utype":1}],"discussion_count":2,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"所在教育项目没有高实时性要求，有两个地方用到了消息队列：\n1.大量数据定时入库（从数仓到mongo）\n2.较大文件的下载\n按照李老师总结的，是异步处理和服务解耦\n知其然，更要知其所以然，期待后续课程😄","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459492,"discussion_content":"记得坚持学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1407983,"avatar":"https://static001.geekbang.org/account/avatar/00/15/7b/ef/ae5458c7.jpg","nickname":"王骞","note":"","ucode":"E5A88F3BA2634E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343996,"discussion_content":"大文件的下载怎么用消息队列呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611227440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215900,"user_name":"foo","can_delete":false,"product_type":"c1","uid":1354029,"ip_address":"","ucode":"119D948DE2179A","user_header":"https://static001.geekbang.org/account/avatar/00/14/a9/2d/f35acbe6.jpg","comment_is_top":false,"comment_ctime":1589127869,"is_pvip":false,"replies":[{"id":79950,"content":"统计数据指的是，当前下单数量、下单人数，下单金额等等这些数据。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1589172279,"ip_address":"","comment_id":215900,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"老师，问一些问题秒杀步骤里面的更新统计数据指的什么？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494601,"discussion_content":"统计数据指的是，当前下单数量、下单人数，下单金额等等这些数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589172279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211653,"user_name":"Hana","can_delete":false,"product_type":"c1","uid":1233257,"ip_address":"","ucode":"F434131F5A0EFC","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/69/07239d3c.jpg","comment_is_top":false,"comment_ctime":1587992656,"is_pvip":false,"replies":[{"id":78791,"content":"可以的。但有些消息队列会有单条数据大小的限制。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1588050022,"ip_address":"","comment_id":211653,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"我有一个两个网段之间传数据文件，文件到了之后扫文件，解析文件再进行调接口或jdbc 入库的逻辑，我能否单个线程循环读文件，然后数据直接进队列，再其他线程按序读取解析的操作？能这样做吗？队列存放数据大小有没有限制","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493323,"discussion_content":"可以的。但有些消息队列会有单条数据大小的限制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588050022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189862,"user_name":"凌空飞起的剪刀腿","can_delete":false,"product_type":"c1","uid":1243680,"ip_address":"","ucode":"16FBBF4A3B54C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/20/0f06b080.jpg","comment_is_top":false,"comment_ctime":1584578237,"is_pvip":false,"replies":[{"id":73119,"content":"我在《08 | 答疑解惑（一） : 网关如何接收服务端的秒杀结果？》有关于这部分的详细讲解，你可以看一下。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1584593335,"ip_address":"","comment_id":189862,"utype":1}],"discussion_count":2,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"李老师，在秒杀系统中谁是生产者(发布者)，谁是消费者(订阅者)?谢谢老师回复，刚刚接触这个东西，疑问很多","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487816,"discussion_content":"我在《08 | 答疑解惑（一） : 网关如何接收服务端的秒杀结果？》有关于这部分的详细讲解，你可以看一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584593335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1243680,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fa/20/0f06b080.jpg","nickname":"凌空飞起的剪刀腿","note":"","ucode":"16FBBF4A3B54C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208946,"discussion_content":"好的，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584594069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179073,"user_name":"Hank","can_delete":false,"product_type":"c1","uid":1258591,"ip_address":"","ucode":"8039C0C8BD1D35","user_header":"https://static001.geekbang.org/account/avatar/00/13/34/5f/92c52c61.jpg","comment_is_top":false,"comment_ctime":1581909255,"is_pvip":false,"replies":[{"id":69505,"content":"一般来说，为了实现简单，不会退还令牌的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1581918797,"ip_address":"","comment_id":179073,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"如果在规定时间内，有人退了订单那么还需要再向令牌桶里发放令牌允许后面的请求获取令牌吗？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484078,"discussion_content":"一般来说，为了实现简单，不会退还令牌的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581918797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169678,"user_name":"HugasChan","can_delete":false,"product_type":"c1","uid":1597153,"ip_address":"","ucode":"10AEBC72784970","user_header":"https://static001.geekbang.org/account/avatar/00/18/5e/e1/da3adbb0.jpg","comment_is_top":false,"comment_ctime":1578403939,"is_pvip":false,"replies":[{"id":67103,"content":"大多数消息队列的客户端API都支持拉取模式。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1579411171,"ip_address":"","comment_id":169678,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"老师我有个疑问，一般消费消息不都是主动监听去消费的么，那么我们如何在收到请求时才去消费令牌","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484078,"discussion_content":"一般来说，为了实现简单，不会退还令牌的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581918797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116592,"user_name":"发条橙子 。","can_delete":false,"product_type":"c1","uid":1259218,"ip_address":"","ucode":"ED076F4534FFED","user_header":"https://static001.geekbang.org/account/avatar/00/13/36/d2/c7357723.jpg","comment_is_top":false,"comment_ctime":1563876389,"is_pvip":false,"replies":[{"id":42734,"content":"是的，没有最好的架构，只有最适合的架构。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563934455,"ip_address":"","comment_id":116592,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"果然，当有了一个解决思路，实际上实现的方法有很多。刚看评论有说令牌桶也可以用redis实现 。 像mq的异步处理实际上也可以更简单的用多线程来实现异步，只不过一种是单台机子来处理，另一种可以打到不同的机子。具体哪种更适合自己还是按照自己实际场景来判断","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459604,"discussion_content":"是的，没有最好的架构，只有最适合的架构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116484,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1563856431,"is_pvip":false,"replies":[{"id":42724,"content":"如果Kafka的Partition数量扩容了，会怎样？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563933707,"ip_address":"","comment_id":116484,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"被开篇吸引了，自己技能图有消息队列，有编程思想，会认真跟下去。很喜欢每篇的标题是提问方式，结尾也是提问方式。后续学习会先思考标题，再看文章，再总结，再思考课后问题，再总结~\n使用kafka将业务数据异步刷到es中，实现中使用业务主键对partition取模的方式保证相同业务主键消息的有序性。","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459604,"discussion_content":"是的，没有最好的架构，只有最适合的架构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116414,"user_name":"川杰","can_delete":false,"product_type":"c1","uid":1099750,"ip_address":"","ucode":"815211E1D698E6","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/e6/11f21cb4.jpg","comment_is_top":false,"comment_ctime":1563847815,"is_pvip":false,"replies":[{"id":42719,"content":"PUSH和PULL两种模式无所谓优劣，主要看适合的场景。\n如果采用push模式，我觉得首先需要考虑高可用的问题，无论是服务端还是客户端，如果发生故障，如何切换到其它节点上？在这个切换后，如何保证服务端还能找到正确的客户端，在正确的位置继续推送消息（否则就会丢消息）。\n\n这部分的设计和PULL模式会有些不一样的地方，因为PUSH模式下，是服务端去找客户端。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563933353,"ip_address":"","comment_id":116414,"utype":1}],"discussion_count":3,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"老师您好，我公司的消息中间件是自研的，因为业务场景不复杂，所以本身也没有太大难度。\n我们业务的特点是，只有一个服务端，没有过多的并发，客户端也不超过十个；\n我们处理消息的方式是，服务端生成消息放到队列，客户端轮询去取；\n因为我们服务端实际生成的消息并不多，并且大多集中在某个时间段，所以我认为不断轮询有点浪费资源；\n我看业界普遍的做法好像也是通过轮询的方式取数据，请问有没有除了轮询以外的方式？\n结合我公司场景，我自己思考的方案是：服务端记录对消息感兴趣的客户端IP（客户端不多），当有消息产生时，通过socket直接推给客户端消费（消息本身不多，并发场景较少）；\n请问我的方案是否合理，是否还有更好的方案？谢谢！","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459562,"discussion_content":"如果Kafka的Partition数量扩容了，会怎样？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563933707,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116381,"user_name":"木小柒","can_delete":false,"product_type":"c1","uid":1000802,"ip_address":"","ucode":"947439CDD0B5B1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/45/62/3c6041e7.jpg","comment_is_top":false,"comment_ctime":1563845465,"is_pvip":false,"replies":[{"id":42702,"content":"这种是不是可以考虑用消息过滤的方式来解决一部分问题，很多消息队列支持在发送时给每条消息打一个分类标签，然后消费者可以按照标签来过滤，接收部分消息。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563932193,"ip_address":"","comment_id":116381,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"服务解耦用的最多。尤其是订单状态变化，需要通知各种下游系统和重新推送最新动态给外部商家。不过消息队列也没那么容易使用，特别是topic的设计，如果前期设计缺陷不及时补救，后期只能无限制的增加topic，直到成为灾难。我现在的项目就是如此，后继者只能增加新的topic来适应新业务，有的地方甚至保留各种双写，不丢弃旧业务，也解决新业务。所以说架构选型和设计，即使是糟粕，也会延续很长一段时间，给所有后继者都带来更大的工作量和维护成本。","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459529,"discussion_content":"PUSH和PULL两种模式无所谓优劣，主要看适合的场景。\n如果采用push模式，我觉得首先需要考虑高可用的问题，无论是服务端还是客户端，如果发生故障，如何切换到其它节点上？在这个切换后，如何保证服务端还能找到正确的客户端，在正确的位置继续推送消息（否则就会丢消息）。\n\n这部分的设计和PULL模式会有些不一样的地方，因为PUSH模式下，是服务端去找客户端。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563933353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1613022,"avatar":"","nickname":"Johnwoo","note":"","ucode":"19B1ED328A96A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2668,"discussion_content":"可以了解一下基于select的io复用实现模式，不阻塞，比轮询更好，而不增加多线程开销","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563850888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1208637,"avatar":"https://static001.geekbang.org/account/avatar/00/12/71/3d/da8dc880.jpg","nickname":"游弋云端","note":"","ucode":"A960E8F5AA25B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2758,"discussion_content":"推和拉的区别，推要确保消息送达，不乱序，消息因果关系、幂等等问题，拉由客户端自己保障。推更实时，但技术上更难。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563900903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116337,"user_name":"Jaising","can_delete":false,"product_type":"c1","uid":1037630,"ip_address":"","ucode":"F68830B7B90F96","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d5/3e/7f3a9c2b.jpg","comment_is_top":false,"comment_ctime":1563842308,"is_pvip":false,"replies":[{"id":42566,"content":"记得坚持学习","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846932,"ip_address":"","comment_id":116337,"utype":1}],"discussion_count":2,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"所在教育项目没有高实时性要求，有两个地方用到了消息队列：\n1.大量数据定时入库（从数仓到mongo）\n2.较大文件的下载\n按照李老师总结的，是异步处理和服务解耦\n知其然，更要知其所以然，期待后续课程😄","like_count":1,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459513,"discussion_content":"这种是不是可以考虑用消息过滤的方式来解决一部分问题，很多消息队列支持在发送时给每条消息打一个分类标签，然后消费者可以按照标签来过滤，接收部分消息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563932193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215900,"user_name":"foo","can_delete":false,"product_type":"c1","uid":1354029,"ip_address":"","ucode":"119D948DE2179A","user_header":"https://static001.geekbang.org/account/avatar/00/14/a9/2d/f35acbe6.jpg","comment_is_top":false,"comment_ctime":1589127869,"is_pvip":false,"replies":[{"id":79950,"content":"统计数据指的是，当前下单数量、下单人数，下单金额等等这些数据。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1589172279,"ip_address":"","comment_id":215900,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"老师，问一些问题秒杀步骤里面的更新统计数据指的什么？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459492,"discussion_content":"记得坚持学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1407983,"avatar":"https://static001.geekbang.org/account/avatar/00/15/7b/ef/ae5458c7.jpg","nickname":"王骞","note":"","ucode":"E5A88F3BA2634E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343996,"discussion_content":"大文件的下载怎么用消息队列呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611227440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211653,"user_name":"Hana","can_delete":false,"product_type":"c1","uid":1233257,"ip_address":"","ucode":"F434131F5A0EFC","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/69/07239d3c.jpg","comment_is_top":false,"comment_ctime":1587992656,"is_pvip":false,"replies":[{"id":78791,"content":"可以的。但有些消息队列会有单条数据大小的限制。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1588050022,"ip_address":"","comment_id":211653,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"我有一个两个网段之间传数据文件，文件到了之后扫文件，解析文件再进行调接口或jdbc 入库的逻辑，我能否单个线程循环读文件，然后数据直接进队列，再其他线程按序读取解析的操作？能这样做吗？队列存放数据大小有没有限制","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494601,"discussion_content":"统计数据指的是，当前下单数量、下单人数，下单金额等等这些数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589172279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189862,"user_name":"凌空飞起的剪刀腿","can_delete":false,"product_type":"c1","uid":1243680,"ip_address":"","ucode":"16FBBF4A3B54C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/20/0f06b080.jpg","comment_is_top":false,"comment_ctime":1584578237,"is_pvip":false,"replies":[{"id":73119,"content":"我在《08 | 答疑解惑（一） : 网关如何接收服务端的秒杀结果？》有关于这部分的详细讲解，你可以看一下。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1584593335,"ip_address":"","comment_id":189862,"utype":1}],"discussion_count":2,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"李老师，在秒杀系统中谁是生产者(发布者)，谁是消费者(订阅者)?谢谢老师回复，刚刚接触这个东西，疑问很多","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493323,"discussion_content":"可以的。但有些消息队列会有单条数据大小的限制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588050022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179073,"user_name":"Hank","can_delete":false,"product_type":"c1","uid":1258591,"ip_address":"","ucode":"8039C0C8BD1D35","user_header":"https://static001.geekbang.org/account/avatar/00/13/34/5f/92c52c61.jpg","comment_is_top":false,"comment_ctime":1581909255,"is_pvip":false,"replies":[{"id":69505,"content":"一般来说，为了实现简单，不会退还令牌的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1581918797,"ip_address":"","comment_id":179073,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"如果在规定时间内，有人退了订单那么还需要再向令牌桶里发放令牌允许后面的请求获取令牌吗？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487816,"discussion_content":"我在《08 | 答疑解惑（一） : 网关如何接收服务端的秒杀结果？》有关于这部分的详细讲解，你可以看一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584593335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1243680,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fa/20/0f06b080.jpg","nickname":"凌空飞起的剪刀腿","note":"","ucode":"16FBBF4A3B54C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208946,"discussion_content":"好的，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584594069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169678,"user_name":"HugasChan","can_delete":false,"product_type":"c1","uid":1597153,"ip_address":"","ucode":"10AEBC72784970","user_header":"https://static001.geekbang.org/account/avatar/00/18/5e/e1/da3adbb0.jpg","comment_is_top":false,"comment_ctime":1578403939,"is_pvip":false,"replies":[{"id":67103,"content":"大多数消息队列的客户端API都支持拉取模式。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1579411171,"ip_address":"","comment_id":169678,"utype":1}],"discussion_count":1,"race_medal":0,"score":6,"product_id":100032301,"comment_content":"老师我有个疑问，一般消费消息不都是主动监听去消费的么，那么我们如何在收到请求时才去消费令牌","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480670,"discussion_content":"大多数消息队列的客户端API都支持拉取模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579411171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160060,"user_name":"supers","can_delete":false,"product_type":"c1","uid":1024886,"ip_address":"","ucode":"14A9460AC1D7D5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/76/36748276.jpg","comment_is_top":false,"comment_ctime":1575862095,"is_pvip":false,"replies":[{"id":61572,"content":"这样是可行的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1576298977,"ip_address":"","comment_id":160060,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"思考题：之前做过一个数据回滚的功能。用户可以回滚到上一个版本的数据。\n当时实现的过程：\n1. 把用户操作的数据存入到MySQL中。\n2. 定时任务扫描是否有需要回滚的任务。\n3. 根据用户操作类型调用反向操作函数回滚数据。\n\n现在想想，可以不用定时任务实现转用MQ实现：\n1. 用户发起请求回滚数据，生成消息。\n2. 回滚服务监听用户发送的请求，执行回滚操作。","like_count":0},{"had_liked":false,"id":159828,"user_name":"刘志兵","can_delete":false,"product_type":"c1","uid":1441734,"ip_address":"","ucode":"A90C2FA49EDC23","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/c6/8b5cbe97.jpg","comment_is_top":false,"comment_ctime":1575805454,"is_pvip":false,"replies":[{"id":61056,"content":"我在：08 | 答疑解惑（一） : 网关如何接收服务端的秒杀结果？中有详细说明，你可以看一下。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1575852528,"ip_address":"","comment_id":159828,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"老师，网关收到请求后发消息同步改为异步，response回来之后还有用一个唯一的标识去和request对应吗，这个跟收到请求同步阻塞等待有什么优势吗，同步等待用guava的limiter实现也不会对下游服务造成很大的压力","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477187,"discussion_content":"我在：08 | 答疑解惑（一） : 网关如何接收服务端的秒杀结果？中有详细说明，你可以看一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575852528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151095,"user_name":"lencho.","can_delete":false,"product_type":"c1","uid":1499510,"ip_address":"","ucode":"3E35532AAD44C9","user_header":"https://static001.geekbang.org/account/avatar/00/16/e1/76/b7a1e2b0.jpg","comment_is_top":false,"comment_ctime":1573652956,"is_pvip":false,"replies":[{"id":58192,"content":"大部分流程图原图是用markdown + mermaid绘制的，你看到图都是经过极客时间编辑小姐姐用绘图工具重新画过的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1573692120,"ip_address":"","comment_id":151095,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"老师你的流程图是用什么工具画的？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474363,"discussion_content":"大部分流程图原图是用markdown + mermaid绘制的，你看到图都是经过极客时间编辑小姐姐用绘图工具重新画过的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573692120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149748,"user_name":"whhbbq","can_delete":false,"product_type":"c1","uid":1018494,"ip_address":"","ucode":"4A93F3E375CB44","user_header":"","comment_is_top":false,"comment_ctime":1573365522,"is_pvip":false,"replies":[{"id":57818,"content":"自己根据业务来选择key，比如你发送的是订单消息，那订单号就是个很好的key。\n\n把key 哈希到队列（分区）上，然后指定队列发送就可以了。\n\n有些消息队列直接提供的哈希部分的逻辑，只要在发送的时候提供key就可以了。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1573522501,"ip_address":"","comment_id":149748,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"老师,我们用的是阿里云的消息队列，用的是分区顺序消息，文档说明以Sharding Key 分为分片，发送消息的时候 ，具体在哪里指定设置Sharding Key 呢？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474363,"discussion_content":"大部分流程图原图是用markdown + mermaid绘制的，你看到图都是经过极客时间编辑小姐姐用绘图工具重新画过的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573692120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139778,"user_name":"Tesla","can_delete":false,"product_type":"c1","uid":1500742,"ip_address":"","ucode":"98629AFD9861EE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUcSLVV6ia3dibe7qvTu8Vic1PVs2EibxoUdx930MC7j2Q9A6s4eibMDZlcicMFY0D0icd3RrDorMChu0zw/132","comment_is_top":false,"comment_ctime":1570721771,"is_pvip":false,"replies":[{"id":54008,"content":"可以先看一下08 热点问题答疑这节课，里面有详细的说明。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1570756970,"ip_address":"","comment_id":139778,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"老师。请问一下，所说的网关将请求放入请求消息队列 服务再从消息队列获取，这一流程中 网关是如何将请求放如消息队列的呢？服务从消息队列获取请求是要注册成后台服务一直拉取吗？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470109,"discussion_content":"可以先看一下08 热点问题答疑这节课，里面有详细的说明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570756970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139550,"user_name":"兵临城下","can_delete":false,"product_type":"c1","uid":1316592,"ip_address":"","ucode":"88294A59484F17","user_header":"https://static001.geekbang.org/account/avatar/00/14/16/f0/3051cc84.jpg","comment_is_top":false,"comment_ctime":1570677504,"is_pvip":false,"replies":[{"id":53843,"content":"你可以先看一下08 热点问题解答。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1570690268,"ip_address":"","comment_id":139550,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"在你工作或学习涉及到的系统中，哪些问题可以通过引入消息队列来解决？\n\n一个是秒杀将库存写到了队列当中，一个是异步处理一些订单的数据。但这些都异步处理。\n刚看了老师的课程，有一个问题我不太理解，在流量控制当中，提到了，\n使用消息队列隔离网关和后端服务，以达到流量控制和保护后端的服务的目的。\n\n想问一下，一个请求到&lt;-&gt;网关-&gt;消息队列-&gt;秒杀服务\n\n消息队列为异步处理，如果将秒杀服务处理的结果返回给，网关进行响应呢？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469995,"discussion_content":"你可以先看一下08 热点问题解答。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570690268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135844,"user_name":"Htian","can_delete":false,"product_type":"c1","uid":1660823,"ip_address":"","ucode":"945E858AFE7FBA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJjcGW3N8Zh6fapKCpLnlykWtrLCOMwbPuiaCTEXx0d2mtP6vu5kP2x0cpaiaTGianHKsI1VO6gXpEZA/132","comment_is_top":false,"comment_ctime":1569288116,"is_pvip":false,"replies":[{"id":52066,"content":"还是得根据具体的场景做取舍，不可能“我全都要”。可以说一下你遇到的场景是什么样的，我们一起来讨论下该如何取舍。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1569292019,"ip_address":"","comment_id":135844,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"秒杀、令牌桶算法都是将多余的请求丢弃。那如果请求很重要，每个请求都不能被丢弃？怎么设计？还是得将用户请求放到消息队列慢慢处理吧。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468356,"discussion_content":"还是得根据具体的场景做取舍，不可能“我全都要”。可以说一下你遇到的场景是什么样的，我们一起来讨论下该如何取舍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569292019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134403,"user_name":"Lugyedo","can_delete":false,"product_type":"c1","uid":1011793,"ip_address":"","ucode":"EB5E456B638E70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/70/51/f1825adb.jpg","comment_is_top":false,"comment_ctime":1568819573,"is_pvip":true,"replies":[{"id":51549,"content":"你可以看一下08这节课，专门讲了这个问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568856247,"ip_address":"","comment_id":134403,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"端上的请求后压入消息队列，后端系统消费消息处理业务逻辑后怎么把结果告知端上","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467730,"discussion_content":"你可以看一下08这节课，专门讲了这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568856247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127308,"user_name":"舀点米 | Titus Mi","can_delete":false,"product_type":"c1","uid":1105289,"ip_address":"","ucode":"43F5460C4501D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/89/4fda09bd.jpg","comment_is_top":false,"comment_ctime":1566643443,"is_pvip":false,"replies":[{"id":47165,"content":"这个地方还是要考虑一下，大部分下游系统它们是如何来使用对账数据的。比如，你的系统每天产生1万条左右对账数据，每个下游系统都要把这些对账数据中的大部分数据再读一遍，处理它自己的业务逻辑，这种情况下用MQ就比好合适。\n\n但如果，下游系统可能只是需要其中的几条数据，那还是保存到一个支持按条件查询的存储中更合理。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566709303,"ip_address":"","comment_id":127308,"utype":1}],"discussion_count":2,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"想请教老师下：\n我原来负责过一个账务系统，主要工作就是用支付渠道的数据与我们自己的交易数据进行对账。大概有以下主要逻辑：\n1）每天定时去各支付渠道FTP上下载数据\n2）将这些下载的数据与我们自己的交易数据对比\n3）对比出来的结果数据入库，供各部门使用\n\n请问老师，上面这三个逻辑，哪个适合使用消息队列？我学习这课后，目前觉得，3）适合，可以让各部门订阅对账后的数据，有变化后，他们就可以得到。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464431,"discussion_content":"这个地方还是要考虑一下，大部分下游系统它们是如何来使用对账数据的。比如，你的系统每天产生1万条左右对账数据，每个下游系统都要把这些对账数据中的大部分数据再读一遍，处理它自己的业务逻辑，这种情况下用MQ就比好合适。\n\n但如果，下游系统可能只是需要其中的几条数据，那还是保存到一个支持按条件查询的存储中更合理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566709303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113738,"discussion_content":"如果下游系统需要反复多次的用到上游数据，那么持久化的数据库就是唯一选择了吧，毕竟消息消费掉就没了。个人观点，业务数据本身不适合作为消息传递，处理业务数据的请求更适合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577929890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126803,"user_name":"刘常青","can_delete":false,"product_type":"c1","uid":1333608,"ip_address":"","ucode":"6F15CBEF9AB8D1","user_header":"https://static001.geekbang.org/account/avatar/00/14/59/68/b1b5e8bb.jpg","comment_is_top":false,"comment_ctime":1566480759,"is_pvip":false,"replies":[{"id":46934,"content":"这种情况建议给数据库加一个缓存，比如用Redis。\n另外，考虑多个判断逻辑能否组织成一次数据库查询？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566522887,"ip_address":"","comment_id":126803,"utype":1}],"discussion_count":3,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"在入队列之前做了许多查询数据库的判断，这些判断是必须有的，要不然不能及时返回错误信息，导致请求量大了，还是有问题，有什么好的解决办法吗？如请求一个短信接口，会判断验证账户信息、模板、签名、手机号等。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464176,"discussion_content":"这种情况建议给数据库加一个缓存，比如用Redis。\n另外，考虑多个判断逻辑能否组织成一次数据库查询？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566522887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113745,"discussion_content":"也可以考虑batch或者并行做判断，并行的时候只要并行的数据不重复即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577930076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1333608,"avatar":"https://static001.geekbang.org/account/avatar/00/14/59/68/b1b5e8bb.jpg","nickname":"刘常青","note":"","ucode":"6F15CBEF9AB8D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6090,"discussion_content":"现在就是用的redis，数据库查询一次关联的表就多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566662619,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160060,"user_name":"supers","can_delete":false,"product_type":"c1","uid":1024886,"ip_address":"","ucode":"14A9460AC1D7D5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/76/36748276.jpg","comment_is_top":false,"comment_ctime":1575862095,"is_pvip":false,"replies":[{"id":61572,"content":"这样是可行的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1576298977,"ip_address":"","comment_id":160060,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"思考题：之前做过一个数据回滚的功能。用户可以回滚到上一个版本的数据。\n当时实现的过程：\n1. 把用户操作的数据存入到MySQL中。\n2. 定时任务扫描是否有需要回滚的任务。\n3. 根据用户操作类型调用反向操作函数回滚数据。\n\n现在想想，可以不用定时任务实现转用MQ实现：\n1. 用户发起请求回滚数据，生成消息。\n2. 回滚服务监听用户发送的请求，执行回滚操作。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477246,"discussion_content":"这样是可行的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576298977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159828,"user_name":"刘志兵","can_delete":false,"product_type":"c1","uid":1441734,"ip_address":"","ucode":"A90C2FA49EDC23","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/c6/8b5cbe97.jpg","comment_is_top":false,"comment_ctime":1575805454,"is_pvip":false,"replies":[{"id":61056,"content":"我在：08 | 答疑解惑（一） : 网关如何接收服务端的秒杀结果？中有详细说明，你可以看一下。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1575852528,"ip_address":"","comment_id":159828,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"老师，网关收到请求后发消息同步改为异步，response回来之后还有用一个唯一的标识去和request对应吗，这个跟收到请求同步阻塞等待有什么优势吗，同步等待用guava的limiter实现也不会对下游服务造成很大的压力","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477246,"discussion_content":"这样是可行的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576298977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151095,"user_name":"lencho.","can_delete":false,"product_type":"c1","uid":1499510,"ip_address":"","ucode":"3E35532AAD44C9","user_header":"https://static001.geekbang.org/account/avatar/00/16/e1/76/b7a1e2b0.jpg","comment_is_top":false,"comment_ctime":1573652956,"is_pvip":false,"replies":[{"id":58192,"content":"大部分流程图原图是用markdown + mermaid绘制的，你看到图都是经过极客时间编辑小姐姐用绘图工具重新画过的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1573692120,"ip_address":"","comment_id":151095,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"老师你的流程图是用什么工具画的？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477187,"discussion_content":"我在：08 | 答疑解惑（一） : 网关如何接收服务端的秒杀结果？中有详细说明，你可以看一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575852528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149748,"user_name":"whhbbq","can_delete":false,"product_type":"c1","uid":1018494,"ip_address":"","ucode":"4A93F3E375CB44","user_header":"","comment_is_top":false,"comment_ctime":1573365522,"is_pvip":false,"replies":[{"id":57818,"content":"自己根据业务来选择key，比如你发送的是订单消息，那订单号就是个很好的key。\n\n把key 哈希到队列（分区）上，然后指定队列发送就可以了。\n\n有些消息队列直接提供的哈希部分的逻辑，只要在发送的时候提供key就可以了。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1573522501,"ip_address":"","comment_id":149748,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"老师,我们用的是阿里云的消息队列，用的是分区顺序消息，文档说明以Sharding Key 分为分片，发送消息的时候 ，具体在哪里指定设置Sharding Key 呢？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473963,"discussion_content":"自己根据业务来选择key，比如你发送的是订单消息，那订单号就是个很好的key。\n\n把key 哈希到队列（分区）上，然后指定队列发送就可以了。\n\n有些消息队列直接提供的哈希部分的逻辑，只要在发送的时候提供key就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573522501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139778,"user_name":"Tesla","can_delete":false,"product_type":"c1","uid":1500742,"ip_address":"","ucode":"98629AFD9861EE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUcSLVV6ia3dibe7qvTu8Vic1PVs2EibxoUdx930MC7j2Q9A6s4eibMDZlcicMFY0D0icd3RrDorMChu0zw/132","comment_is_top":false,"comment_ctime":1570721771,"is_pvip":false,"replies":[{"id":54008,"content":"可以先看一下08 热点问题答疑这节课，里面有详细的说明。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1570756970,"ip_address":"","comment_id":139778,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"老师。请问一下，所说的网关将请求放入请求消息队列 服务再从消息队列获取，这一流程中 网关是如何将请求放如消息队列的呢？服务从消息队列获取请求是要注册成后台服务一直拉取吗？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473963,"discussion_content":"自己根据业务来选择key，比如你发送的是订单消息，那订单号就是个很好的key。\n\n把key 哈希到队列（分区）上，然后指定队列发送就可以了。\n\n有些消息队列直接提供的哈希部分的逻辑，只要在发送的时候提供key就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573522501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139550,"user_name":"兵临城下","can_delete":false,"product_type":"c1","uid":1316592,"ip_address":"","ucode":"88294A59484F17","user_header":"https://static001.geekbang.org/account/avatar/00/14/16/f0/3051cc84.jpg","comment_is_top":false,"comment_ctime":1570677504,"is_pvip":false,"replies":[{"id":53843,"content":"你可以先看一下08 热点问题解答。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1570690268,"ip_address":"","comment_id":139550,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"在你工作或学习涉及到的系统中，哪些问题可以通过引入消息队列来解决？\n\n一个是秒杀将库存写到了队列当中，一个是异步处理一些订单的数据。但这些都异步处理。\n刚看了老师的课程，有一个问题我不太理解，在流量控制当中，提到了，\n使用消息队列隔离网关和后端服务，以达到流量控制和保护后端的服务的目的。\n\n想问一下，一个请求到&lt;-&gt;网关-&gt;消息队列-&gt;秒杀服务\n\n消息队列为异步处理，如果将秒杀服务处理的结果返回给，网关进行响应呢？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470109,"discussion_content":"可以先看一下08 热点问题答疑这节课，里面有详细的说明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570756970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135844,"user_name":"Htian","can_delete":false,"product_type":"c1","uid":1660823,"ip_address":"","ucode":"945E858AFE7FBA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJjcGW3N8Zh6fapKCpLnlykWtrLCOMwbPuiaCTEXx0d2mtP6vu5kP2x0cpaiaTGianHKsI1VO6gXpEZA/132","comment_is_top":false,"comment_ctime":1569288116,"is_pvip":false,"replies":[{"id":52066,"content":"还是得根据具体的场景做取舍，不可能“我全都要”。可以说一下你遇到的场景是什么样的，我们一起来讨论下该如何取舍。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1569292019,"ip_address":"","comment_id":135844,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"秒杀、令牌桶算法都是将多余的请求丢弃。那如果请求很重要，每个请求都不能被丢弃？怎么设计？还是得将用户请求放到消息队列慢慢处理吧。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469995,"discussion_content":"你可以先看一下08 热点问题解答。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570690268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134403,"user_name":"Lugyedo","can_delete":false,"product_type":"c1","uid":1011793,"ip_address":"","ucode":"EB5E456B638E70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/70/51/f1825adb.jpg","comment_is_top":false,"comment_ctime":1568819573,"is_pvip":true,"replies":[{"id":51549,"content":"你可以看一下08这节课，专门讲了这个问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1568856247,"ip_address":"","comment_id":134403,"utype":1}],"discussion_count":1,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"端上的请求后压入消息队列，后端系统消费消息处理业务逻辑后怎么把结果告知端上","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468356,"discussion_content":"还是得根据具体的场景做取舍，不可能“我全都要”。可以说一下你遇到的场景是什么样的，我们一起来讨论下该如何取舍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569292019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127308,"user_name":"舀点米 | Titus Mi","can_delete":false,"product_type":"c1","uid":1105289,"ip_address":"","ucode":"43F5460C4501D0","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/89/4fda09bd.jpg","comment_is_top":false,"comment_ctime":1566643443,"is_pvip":false,"replies":[{"id":47165,"content":"这个地方还是要考虑一下，大部分下游系统它们是如何来使用对账数据的。比如，你的系统每天产生1万条左右对账数据，每个下游系统都要把这些对账数据中的大部分数据再读一遍，处理它自己的业务逻辑，这种情况下用MQ就比好合适。\n\n但如果，下游系统可能只是需要其中的几条数据，那还是保存到一个支持按条件查询的存储中更合理。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566709303,"ip_address":"","comment_id":127308,"utype":1}],"discussion_count":2,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"想请教老师下：\n我原来负责过一个账务系统，主要工作就是用支付渠道的数据与我们自己的交易数据进行对账。大概有以下主要逻辑：\n1）每天定时去各支付渠道FTP上下载数据\n2）将这些下载的数据与我们自己的交易数据对比\n3）对比出来的结果数据入库，供各部门使用\n\n请问老师，上面这三个逻辑，哪个适合使用消息队列？我学习这课后，目前觉得，3）适合，可以让各部门订阅对账后的数据，有变化后，他们就可以得到。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467730,"discussion_content":"你可以看一下08这节课，专门讲了这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568856247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126803,"user_name":"刘常青","can_delete":false,"product_type":"c1","uid":1333608,"ip_address":"","ucode":"6F15CBEF9AB8D1","user_header":"https://static001.geekbang.org/account/avatar/00/14/59/68/b1b5e8bb.jpg","comment_is_top":false,"comment_ctime":1566480759,"is_pvip":false,"replies":[{"id":46934,"content":"这种情况建议给数据库加一个缓存，比如用Redis。\n另外，考虑多个判断逻辑能否组织成一次数据库查询？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1566522887,"ip_address":"","comment_id":126803,"utype":1}],"discussion_count":3,"race_medal":0,"score":7,"product_id":100032301,"comment_content":"在入队列之前做了许多查询数据库的判断，这些判断是必须有的，要不然不能及时返回错误信息，导致请求量大了，还是有问题，有什么好的解决办法吗？如请求一个短信接口，会判断验证账户信息、模板、签名、手机号等。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464431,"discussion_content":"这个地方还是要考虑一下，大部分下游系统它们是如何来使用对账数据的。比如，你的系统每天产生1万条左右对账数据，每个下游系统都要把这些对账数据中的大部分数据再读一遍，处理它自己的业务逻辑，这种情况下用MQ就比好合适。\n\n但如果，下游系统可能只是需要其中的几条数据，那还是保存到一个支持按条件查询的存储中更合理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566709303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113738,"discussion_content":"如果下游系统需要反复多次的用到上游数据，那么持久化的数据库就是唯一选择了吧，毕竟消息消费掉就没了。个人观点，业务数据本身不适合作为消息传递，处理业务数据的请求更适合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577929890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120892,"user_name":"亚洲舞王.尼古拉斯赵四","can_delete":false,"product_type":"c1","uid":1443078,"ip_address":"","ucode":"7159F5D7232696","user_header":"https://static001.geekbang.org/account/avatar/00/16/05/06/f5979d65.jpg","comment_is_top":false,"comment_ctime":1565010187,"is_pvip":false,"replies":[{"id":44471,"content":"我会在第8节课中统一解答这个问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1565054651,"ip_address":"","comment_id":120892,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"老师，我们的秒杀现在的实现方式是对于每个用户的请求生成唯一对应id存在mq中，立即返回前端，告知正在处理，然后后台真正的服务去消费处理，当处理结束后，会针对这个用户设置处理结果，前端再这段时间内会持续轮询，但是这种方式目前会造成轮询时空转的问题，请问有什么处理方式呢？除了空转的弊端，我的这种设计还有什么问题呢？希望得到您的解答","like_count":0},{"had_liked":false,"id":119854,"user_name":"又忘记吃早饭","can_delete":false,"product_type":"c1","uid":1222264,"ip_address":"","ucode":"D2B65411238B4C","user_header":"https://static001.geekbang.org/account/avatar/00/12/a6/78/7dea2ec7.jpg","comment_is_top":false,"comment_ctime":1564713330,"is_pvip":false,"replies":[{"id":44096,"content":"很多同学都提出这个问题，我会在08 疑难问题解答中统一来说一下。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564798073,"ip_address":"","comment_id":119854,"utype":1}],"discussion_count":2,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"请问消息队列用于流量削峰的时候，请求到达消息队列之后是马上返回到客户端吗？，之后处理完请求再推送到客户端结果还是客户端轮询？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461517,"discussion_content":"我会在第8节课中统一解答这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565054651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118823,"user_name":"撒旦的堕落","can_delete":false,"product_type":"c1","uid":1116864,"ip_address":"","ucode":"15F6AA41EE556F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0a/c0/401c240e.jpg","comment_is_top":false,"comment_ctime":1564449903,"is_pvip":false,"replies":[{"id":43563,"content":"实现的方法有很多，秒杀服务可以用RPC来通知网关秒杀结果。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564452293,"ip_address":"","comment_id":118823,"utype":1}],"discussion_count":2,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"老师 请问一下  网关与秒杀服务之间增加mq  同步变成异步  那么如何将处理结果反馈给用户呢","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461099,"discussion_content":"很多同学都提出这个问题，我会在08 疑难问题解答中统一来说一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564798073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1443078,"avatar":"https://static001.geekbang.org/account/avatar/00/16/05/06/f5979d65.jpg","nickname":"亚洲舞王.尼古拉斯赵四","note":"","ucode":"7159F5D7232696","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3964,"discussion_content":"马住，我们现在的处理方式是立刻返回客户端然后客户端间隔0.1s轮询，等待老师的解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565009061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118165,"user_name":"大白先生","can_delete":false,"product_type":"c1","uid":1615335,"ip_address":"","ucode":"7EF709EF8FFE6B","user_header":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","comment_is_top":false,"comment_ctime":1564281719,"is_pvip":false,"replies":[{"id":43390,"content":"是的，虽然这个处理已经是无用功了。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564365319,"ip_address":"","comment_id":118165,"utype":1}],"discussion_count":6,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"李玥老师，您好，我这边工作不久啊，看了您这篇文章之后有两个小问题啊，想请教一下\n第一个是您在文中讲解秒杀请求解决方案的其中一句话 ——“对于超时的请求可以直接丢弃，APP 将超时无响应的请求处理为秒杀失败即可。”app的请求已经放到消息队列了，当app认为请求超时提示秒杀失败时，服务后续是不是还会继续处理之前的请求？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460598,"discussion_content":"实现的方法有很多，秒杀服务可以用RPC来通知网关秒杀结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564452293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1424631,"avatar":"https://static001.geekbang.org/account/avatar/00/15/bc/f7/3ed0d1b7.jpg","nickname":"CZcz","note":"","ucode":"36C243050AF403","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360987,"discussion_content":"网关将消放进消息队列后不是直接返回了么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616574593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117846,"user_name":"曾经。","can_delete":false,"product_type":"c1","uid":1129772,"ip_address":"","ucode":"CBD81EF5C1218D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/2c/02eae3e1.jpg","comment_is_top":false,"comment_ctime":1564147462,"is_pvip":false,"replies":[{"id":43194,"content":"国产的软件确实用户体验要更好一些。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564207655,"ip_address":"","comment_id":117846,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"项目中用到\nrabbitmq 服务间异步通信, 实时性要求较低的业务解耦\n以及使用 kafka收集日志\n rabbitmq的后台做的相对友好一些, 管理方便","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460285,"discussion_content":"是的，虽然这个处理已经是无用功了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564365319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112815,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ef/9d3fcb40.jpg","nickname":"lq","note":"","ucode":"1C9D741B906403","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4462,"discussion_content":"这样岂不是造成了数据不一致了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565440439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1615335,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","nickname":"大白先生","note":"","ucode":"7EF709EF8FFE6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1112815,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ef/9d3fcb40.jpg","nickname":"lq","note":"","ucode":"1C9D741B906403","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5648,"discussion_content":"这个问题我有在后面一篇文章再次问到过，老师给的解答是：“消息已经扔到消息队列了，假如继续消费消息秒杀成功的话，只是库存占用上了，后面还会有支付和发货流程，用户超时不支付，订单会被废弃掉”。我个人理解，如果在客户端和服务端之间增加消息队列的话，我觉得客户端不用判断是否超时，作为用户来讲，只要提交秒杀请求就可以，只要最后能得到秒杀是否成功的结果就可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566401973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4462,"ip_address":"","group_id":0},"score":5648,"extra":""},{"author":{"id":1615335,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","nickname":"大白先生","note":"","ucode":"7EF709EF8FFE6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1112815,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ef/9d3fcb40.jpg","nickname":"lq","note":"","ucode":"1C9D741B906403","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5649,"discussion_content":"这个问题我有在后面一篇文章再次问到过，老师给的解答是：“消息已经扔到消息队列了，假如继续消费消息秒杀成功的话，只是库存占用上了，后面还会有支付和发货流程，用户超时不支付，订单会被废弃掉”。我个人理解，如果在客户端和服务端之间增加消息队列的话，我觉得客户端不用判断是否超时，作为用户来讲，只要提交秒杀请求就可以，只要最后能得到秒杀是否成功的结果就可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566401978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4462,"ip_address":"","group_id":0},"score":5649,"extra":""},{"author":{"id":1615335,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","nickname":"大白先生","note":"","ucode":"7EF709EF8FFE6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1112815,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ef/9d3fcb40.jpg","nickname":"lq","note":"","ucode":"1C9D741B906403","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5650,"discussion_content":"这个问题我有在后面一篇文章再次问到过，老师给的解答是：“消息已经扔到消息队列了，假如继续消费消息秒杀成功的话，只是库存占用上了，后面还会有支付和发货流程，用户超时不支付，订单会被废弃掉”。我个人理解，如果在客户端和服务端之间增加消息队列的话，我觉得客户端不用判断是否超时，作为用户来讲，只要提交秒杀请求就可以，只要最后能得到秒杀是否成功的结果就可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566401978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4462,"ip_address":"","group_id":0},"score":5650,"extra":""}]},{"author":{"id":1615335,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","nickname":"大白先生","note":"","ucode":"7EF709EF8FFE6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3187,"discussion_content":"第二个是关于令牌桶的用法问题，我们现在业务上使用rabbitmq，目的是为了做服务间解耦，我们的用法是程序启动时创建一个queue和exchange的binding，有消息程序就会去消费，令牌桶队列的用法的话，网关接受到前段的请求要去令牌队列里获取令牌这个操作是能够怎么实现呢？这时是不是每次接受到请求后都要在程序中手动指定queue名获取消息，而不是使用spring boot的@RabbitListener注解获取消息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564282588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117285,"user_name":"SuperSnow","can_delete":false,"product_type":"c1","uid":1065351,"ip_address":"","ucode":"84C89AA8083E6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","comment_is_top":false,"comment_ctime":1564018675,"is_pvip":false,"replies":[{"id":42953,"content":"简单的说，消费者一端，它采用轮询的方式从队列中拉取消息。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564019895,"ip_address":"","comment_id":117285,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"总的来说消息队列除了流控那部分，基本上就是上游将消息放到队列中，那队列中的消息怎么被下游接口调用呢？实现方式是怎么样的，不是很理解。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459898,"discussion_content":"简单的说，消费者一端，它采用轮询的方式从队列中拉取消息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564019895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117220,"user_name":"a、","can_delete":false,"product_type":"c1","uid":1532404,"ip_address":"","ucode":"590FE8DB111492","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIvUlicgrWtibbDzwhLw5cQrDSy2JuE1mVvmXq11KQIwpLicgDuWfpp9asE0VCN6HhibPDWn7wBc2lfmA/132","comment_is_top":false,"comment_ctime":1564012018,"is_pvip":false,"replies":[{"id":42946,"content":"MQ不太适合用在实时请求的调用链路中，因为它的设计就不是时延优先的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564019438,"ip_address":"","comment_id":117220,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"生产系统用到mq:\n1.异步处理，付款成功，发送mq消息给通知平台，由通知平台统一消费mq消息，然后通知用户付款成功\n2.系统解耦，下游系统调用上游系统统一通过dubbo，上游系统回调下游系统，统一通过mq。\n引入mq，增加了系统的复杂性和不稳定性，公司出现过由于发送mq消息过慢，导致系统响应大批量超时","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459867,"discussion_content":"MQ不太适合用在实时请求的调用链路中，因为它的设计就不是时延优先的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564019438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117138,"user_name":"绅士","can_delete":false,"product_type":"c1","uid":1583859,"ip_address":"","ucode":"5B58E5A958F489","user_header":"https://static001.geekbang.org/account/avatar/00/18/2a/f3/b9607a15.jpg","comment_is_top":false,"comment_ctime":1563975748,"is_pvip":false,"replies":[{"id":42939,"content":"第三个模块全是实践内容。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564019135,"ip_address":"","comment_id":117138,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"啊啊啊啊，好激动，终于有消息队列的讲解了，讲的通俗易懂，希望老师后期能多加一些项目实践中的课","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459836,"discussion_content":"第三个模块全是实践内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564019135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117095,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1563967003,"is_pvip":false,"replies":[{"id":42935,"content":"消息队列主要是解决进程间的异步通信，如果是进程内的异步化，后面我们会有专门的一节课来讲“异步”。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564018790,"ip_address":"","comment_id":117095,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"请问一下老师如果通过消息实现异步那么如何传递线程的上下文信息, 比如权限相关的?","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459819,"discussion_content":"消息队列主要是解决进程间的异步通信，如果是进程内的异步化，后面我们会有专门的一节课来讲“异步”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564018790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117093,"user_name":"charles","can_delete":false,"product_type":"c1","uid":1103421,"ip_address":"","ucode":"E5C2DECE4A6976","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/3d/695ed8f2.jpg","comment_is_top":false,"comment_ctime":1563966536,"is_pvip":false,"replies":[{"id":42932,"content":"可以逐步的改造，先从新接入的或者需要变更的下游系统开始。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564018645,"ip_address":"","comment_id":117093,"utype":1}],"discussion_count":2,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"现在在实现一个简单的风控额度审批系统，额度审批结果数据需要通知贷后，营销等其它子系统，当前是采用的方式是在审批逻辑中同步调用各个子系统提供的通知接口，导致需要通知的下有系统接口变化或者新增一个子系统通知，都需要修改代码，维护较痛苦，想采用消息对接方式","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459817,"discussion_content":"可以逐步的改造，先从新接入的或者需要变更的下游系统开始。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564018645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":113755,"discussion_content":"改成消息队列还得下游系统修改代码支持吧，这种往往得从上至下的推动。如果暂时推不动，可以考虑用工厂或模板模式把每个子系统的处理都隔离到自己的类里，再有变化只修改自己的类即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577930522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120892,"user_name":"亚洲舞王.尼古拉斯赵四","can_delete":false,"product_type":"c1","uid":1443078,"ip_address":"","ucode":"7159F5D7232696","user_header":"https://static001.geekbang.org/account/avatar/00/16/05/06/f5979d65.jpg","comment_is_top":false,"comment_ctime":1565010187,"is_pvip":false,"replies":[{"id":44471,"content":"我会在第8节课中统一解答这个问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1565054651,"ip_address":"","comment_id":120892,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"老师，我们的秒杀现在的实现方式是对于每个用户的请求生成唯一对应id存在mq中，立即返回前端，告知正在处理，然后后台真正的服务去消费处理，当处理结束后，会针对这个用户设置处理结果，前端再这段时间内会持续轮询，但是这种方式目前会造成轮询时空转的问题，请问有什么处理方式呢？除了空转的弊端，我的这种设计还有什么问题呢？希望得到您的解答","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461517,"discussion_content":"我会在第8节课中统一解答这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565054651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119854,"user_name":"又忘记吃早饭","can_delete":false,"product_type":"c1","uid":1222264,"ip_address":"","ucode":"D2B65411238B4C","user_header":"https://static001.geekbang.org/account/avatar/00/12/a6/78/7dea2ec7.jpg","comment_is_top":false,"comment_ctime":1564713330,"is_pvip":false,"replies":[{"id":44096,"content":"很多同学都提出这个问题，我会在08 疑难问题解答中统一来说一下。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564798073,"ip_address":"","comment_id":119854,"utype":1}],"discussion_count":2,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"请问消息队列用于流量削峰的时候，请求到达消息队列之后是马上返回到客户端吗？，之后处理完请求再推送到客户端结果还是客户端轮询？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461099,"discussion_content":"很多同学都提出这个问题，我会在08 疑难问题解答中统一来说一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564798073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1443078,"avatar":"https://static001.geekbang.org/account/avatar/00/16/05/06/f5979d65.jpg","nickname":"亚洲舞王.尼古拉斯赵四","note":"","ucode":"7159F5D7232696","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3964,"discussion_content":"马住，我们现在的处理方式是立刻返回客户端然后客户端间隔0.1s轮询，等待老师的解答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565009061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118823,"user_name":"撒旦的堕落","can_delete":false,"product_type":"c1","uid":1116864,"ip_address":"","ucode":"15F6AA41EE556F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0a/c0/401c240e.jpg","comment_is_top":false,"comment_ctime":1564449903,"is_pvip":false,"replies":[{"id":43563,"content":"实现的方法有很多，秒杀服务可以用RPC来通知网关秒杀结果。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564452293,"ip_address":"","comment_id":118823,"utype":1}],"discussion_count":2,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"老师 请问一下  网关与秒杀服务之间增加mq  同步变成异步  那么如何将处理结果反馈给用户呢","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460598,"discussion_content":"实现的方法有很多，秒杀服务可以用RPC来通知网关秒杀结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564452293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1424631,"avatar":"https://static001.geekbang.org/account/avatar/00/15/bc/f7/3ed0d1b7.jpg","nickname":"CZcz","note":"","ucode":"36C243050AF403","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360987,"discussion_content":"网关将消放进消息队列后不是直接返回了么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616574593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118165,"user_name":"大白先生","can_delete":false,"product_type":"c1","uid":1615335,"ip_address":"","ucode":"7EF709EF8FFE6B","user_header":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","comment_is_top":false,"comment_ctime":1564281719,"is_pvip":false,"replies":[{"id":43390,"content":"是的，虽然这个处理已经是无用功了。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564365319,"ip_address":"","comment_id":118165,"utype":1}],"discussion_count":6,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"李玥老师，您好，我这边工作不久啊，看了您这篇文章之后有两个小问题啊，想请教一下\n第一个是您在文中讲解秒杀请求解决方案的其中一句话 ——“对于超时的请求可以直接丢弃，APP 将超时无响应的请求处理为秒杀失败即可。”app的请求已经放到消息队列了，当app认为请求超时提示秒杀失败时，服务后续是不是还会继续处理之前的请求？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460285,"discussion_content":"是的，虽然这个处理已经是无用功了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564365319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112815,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ef/9d3fcb40.jpg","nickname":"lq","note":"","ucode":"1C9D741B906403","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4462,"discussion_content":"这样岂不是造成了数据不一致了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565440439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1615335,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","nickname":"大白先生","note":"","ucode":"7EF709EF8FFE6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1112815,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ef/9d3fcb40.jpg","nickname":"lq","note":"","ucode":"1C9D741B906403","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5648,"discussion_content":"这个问题我有在后面一篇文章再次问到过，老师给的解答是：“消息已经扔到消息队列了，假如继续消费消息秒杀成功的话，只是库存占用上了，后面还会有支付和发货流程，用户超时不支付，订单会被废弃掉”。我个人理解，如果在客户端和服务端之间增加消息队列的话，我觉得客户端不用判断是否超时，作为用户来讲，只要提交秒杀请求就可以，只要最后能得到秒杀是否成功的结果就可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566401973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4462,"ip_address":"","group_id":0},"score":5648,"extra":""},{"author":{"id":1615335,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","nickname":"大白先生","note":"","ucode":"7EF709EF8FFE6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1112815,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ef/9d3fcb40.jpg","nickname":"lq","note":"","ucode":"1C9D741B906403","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5649,"discussion_content":"这个问题我有在后面一篇文章再次问到过，老师给的解答是：“消息已经扔到消息队列了，假如继续消费消息秒杀成功的话，只是库存占用上了，后面还会有支付和发货流程，用户超时不支付，订单会被废弃掉”。我个人理解，如果在客户端和服务端之间增加消息队列的话，我觉得客户端不用判断是否超时，作为用户来讲，只要提交秒杀请求就可以，只要最后能得到秒杀是否成功的结果就可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566401978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4462,"ip_address":"","group_id":0},"score":5649,"extra":""},{"author":{"id":1615335,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","nickname":"大白先生","note":"","ucode":"7EF709EF8FFE6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1112815,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ef/9d3fcb40.jpg","nickname":"lq","note":"","ucode":"1C9D741B906403","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5650,"discussion_content":"这个问题我有在后面一篇文章再次问到过，老师给的解答是：“消息已经扔到消息队列了，假如继续消费消息秒杀成功的话，只是库存占用上了，后面还会有支付和发货流程，用户超时不支付，订单会被废弃掉”。我个人理解，如果在客户端和服务端之间增加消息队列的话，我觉得客户端不用判断是否超时，作为用户来讲，只要提交秒杀请求就可以，只要最后能得到秒杀是否成功的结果就可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566401978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4462,"ip_address":"","group_id":0},"score":5650,"extra":""}]},{"author":{"id":1615335,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a5/e7/ed0a0131.jpg","nickname":"大白先生","note":"","ucode":"7EF709EF8FFE6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3187,"discussion_content":"第二个是关于令牌桶的用法问题，我们现在业务上使用rabbitmq，目的是为了做服务间解耦，我们的用法是程序启动时创建一个queue和exchange的binding，有消息程序就会去消费，令牌桶队列的用法的话，网关接受到前段的请求要去令牌队列里获取令牌这个操作是能够怎么实现呢？这时是不是每次接受到请求后都要在程序中手动指定queue名获取消息，而不是使用spring boot的@RabbitListener注解获取消息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564282588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117846,"user_name":"曾经。","can_delete":false,"product_type":"c1","uid":1129772,"ip_address":"","ucode":"CBD81EF5C1218D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/2c/02eae3e1.jpg","comment_is_top":false,"comment_ctime":1564147462,"is_pvip":false,"replies":[{"id":43194,"content":"国产的软件确实用户体验要更好一些。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564207655,"ip_address":"","comment_id":117846,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"项目中用到\nrabbitmq 服务间异步通信, 实时性要求较低的业务解耦\n以及使用 kafka收集日志\n rabbitmq的后台做的相对友好一些, 管理方便","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460138,"discussion_content":"国产的软件确实用户体验要更好一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564207655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117285,"user_name":"SuperSnow","can_delete":false,"product_type":"c1","uid":1065351,"ip_address":"","ucode":"84C89AA8083E6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","comment_is_top":false,"comment_ctime":1564018675,"is_pvip":false,"replies":[{"id":42953,"content":"简单的说，消费者一端，它采用轮询的方式从队列中拉取消息。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564019895,"ip_address":"","comment_id":117285,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"总的来说消息队列除了流控那部分，基本上就是上游将消息放到队列中，那队列中的消息怎么被下游接口调用呢？实现方式是怎么样的，不是很理解。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460138,"discussion_content":"国产的软件确实用户体验要更好一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564207655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117220,"user_name":"a、","can_delete":false,"product_type":"c1","uid":1532404,"ip_address":"","ucode":"590FE8DB111492","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIvUlicgrWtibbDzwhLw5cQrDSy2JuE1mVvmXq11KQIwpLicgDuWfpp9asE0VCN6HhibPDWn7wBc2lfmA/132","comment_is_top":false,"comment_ctime":1564012018,"is_pvip":false,"replies":[{"id":42946,"content":"MQ不太适合用在实时请求的调用链路中，因为它的设计就不是时延优先的。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564019438,"ip_address":"","comment_id":117220,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"生产系统用到mq:\n1.异步处理，付款成功，发送mq消息给通知平台，由通知平台统一消费mq消息，然后通知用户付款成功\n2.系统解耦，下游系统调用上游系统统一通过dubbo，上游系统回调下游系统，统一通过mq。\n引入mq，增加了系统的复杂性和不稳定性，公司出现过由于发送mq消息过慢，导致系统响应大批量超时","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459898,"discussion_content":"简单的说，消费者一端，它采用轮询的方式从队列中拉取消息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564019895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117138,"user_name":"绅士","can_delete":false,"product_type":"c1","uid":1583859,"ip_address":"","ucode":"5B58E5A958F489","user_header":"https://static001.geekbang.org/account/avatar/00/18/2a/f3/b9607a15.jpg","comment_is_top":false,"comment_ctime":1563975748,"is_pvip":false,"replies":[{"id":42939,"content":"第三个模块全是实践内容。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564019135,"ip_address":"","comment_id":117138,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"啊啊啊啊，好激动，终于有消息队列的讲解了，讲的通俗易懂，希望老师后期能多加一些项目实践中的课","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459867,"discussion_content":"MQ不太适合用在实时请求的调用链路中，因为它的设计就不是时延优先的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564019438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117095,"user_name":"WL","can_delete":false,"product_type":"c1","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1563967003,"is_pvip":false,"replies":[{"id":42935,"content":"消息队列主要是解决进程间的异步通信，如果是进程内的异步化，后面我们会有专门的一节课来讲“异步”。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564018790,"ip_address":"","comment_id":117095,"utype":1}],"discussion_count":1,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"请问一下老师如果通过消息实现异步那么如何传递线程的上下文信息, 比如权限相关的?","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459836,"discussion_content":"第三个模块全是实践内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564019135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117093,"user_name":"charles","can_delete":false,"product_type":"c1","uid":1103421,"ip_address":"","ucode":"E5C2DECE4A6976","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/3d/695ed8f2.jpg","comment_is_top":false,"comment_ctime":1563966536,"is_pvip":false,"replies":[{"id":42932,"content":"可以逐步的改造，先从新接入的或者需要变更的下游系统开始。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1564018645,"ip_address":"","comment_id":117093,"utype":1}],"discussion_count":2,"race_medal":0,"score":8,"product_id":100032301,"comment_content":"现在在实现一个简单的风控额度审批系统，额度审批结果数据需要通知贷后，营销等其它子系统，当前是采用的方式是在审批逻辑中同步调用各个子系统提供的通知接口，导致需要通知的下有系统接口变化或者新增一个子系统通知，都需要修改代码，维护较痛苦，想采用消息对接方式","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459819,"discussion_content":"消息队列主要是解决进程间的异步通信，如果是进程内的异步化，后面我们会有专门的一节课来讲“异步”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564018790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116695,"user_name":"taotaowang","can_delete":false,"product_type":"c1","uid":1365177,"ip_address":"","ucode":"108489DD55723A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIvMlvSXsYgJibgutQdyFT6LsrXuvbjWVh0UpcF4esLzlWzBRlsFHA9MyBY38ibngKAN8mDn6DdHnMQ/132","comment_is_top":false,"comment_ctime":1563891500,"is_pvip":false,"replies":[{"id":42738,"content":"每周会定期更新3篇。剩下的时间给大家消化理解和动手Coding。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563934612,"ip_address":"","comment_id":116695,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"辛苦老师 很期待老师尽快更新 如饥似渴的想学习mq知识","like_count":0},{"had_liked":false,"id":116504,"user_name":"SuperSnow","can_delete":false,"product_type":"c1","uid":1065351,"ip_address":"","ucode":"84C89AA8083E6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","comment_is_top":false,"comment_ctime":1563859446,"is_pvip":false,"replies":[{"id":42727,"content":"一般来说，一条订单信息的数据量不大，也就几个KB，用消息队列来传递完全不是问题。所以，一条消息能解决的问题，为什么还需要增加一次RPC呢？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563934202,"ip_address":"","comment_id":116504,"utype":1}],"discussion_count":3,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"当一个服务为多个服务提供数据的时候，可以通过MQ进行交换来解耦服务间的耦合。这里的订单提供的是一个完整的订单信息，不用消息队列不也是挺好的吗？如果用了MQ，那起到的作用也就是减少接口压力了。是这么理解吗？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459568,"discussion_content":"一般来说，一条订单信息的数据量不大，也就几个KB，用消息队列来传递完全不是问题。所以，一条消息能解决的问题，为什么还需要增加一次RPC呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1075035,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/5b/d797784e.jpg","nickname":"a萱萱爸","note":"","ucode":"09064113C020A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2697,"discussion_content":"解耦的目的是提高各模块或接口响应速度，同时不影响后续业务处理。这样各模块业务处理独立。互不影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563868309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1075035,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/5b/d797784e.jpg","nickname":"a萱萱爸","note":"","ucode":"09064113C020A3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2880,"discussion_content":"那把消息推到队列中，怎么通知其他接口去调用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564018488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2697,"ip_address":"","group_id":0},"score":2880,"extra":""}]}]},{"had_liked":false,"id":116413,"user_name":"不能扮演天使","can_delete":false,"product_type":"c1","uid":1046172,"ip_address":"","ucode":"9922330BFF7FFB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f6/9c/b457a937.jpg","comment_is_top":false,"comment_ctime":1563847769,"is_pvip":false,"replies":[{"id":42714,"content":"是使用MySQL来存储消息吗？还是只存储元数据呢？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563932877,"ip_address":"","comment_id":116413,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"公司现在用MQ大多数还是做异步请求处理和项目解耦，微服务太多用MQ来实现通信还是比较高效的，比如业务端的数据上报可以用MQ方便后期做数据分析，我们公司MQ基于MySQL，不知道京东是怎么实现的，期待...","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459568,"discussion_content":"一般来说，一条订单信息的数据量不大，也就几个KB，用消息队列来传递完全不是问题。所以，一条消息能解决的问题，为什么还需要增加一次RPC呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1075035,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/5b/d797784e.jpg","nickname":"a萱萱爸","note":"","ucode":"09064113C020A3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2697,"discussion_content":"解耦的目的是提高各模块或接口响应速度，同时不影响后续业务处理。这样各模块业务处理独立。互不影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563868309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1075035,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/5b/d797784e.jpg","nickname":"a萱萱爸","note":"","ucode":"09064113C020A3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2880,"discussion_content":"那把消息推到队列中，怎么通知其他接口去调用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564018488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2697,"ip_address":"","group_id":0},"score":2880,"extra":""}]}]},{"had_liked":false,"id":116410,"user_name":"江南皮革厂研发中心保安队长","can_delete":false,"product_type":"c1","uid":1099584,"ip_address":"","ucode":"231419643A5CC5","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/40/66a203cd.jpg","comment_is_top":false,"comment_ctime":1563847503,"is_pvip":false,"replies":[{"id":42712,"content":"不丢消息，严格有序和Exactly Once应该是这个场景中需要优先考虑的问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563932826,"ip_address":"","comment_id":116410,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"工作中用过的应该是在云平台上的rabbitmq，对虚拟机生命周期管理的调度和对接云管平台的工单（创建、迁移、扩容等）服务动作，这个不像电商系统，对请求处理和实时响应的要求没有那么高，主要是在数据一致性和通信性能上有一定要求。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459528,"discussion_content":"是使用MySQL来存储消息吗？还是只存储元数据呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563932877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116352,"user_name":"吕","can_delete":false,"product_type":"c1","uid":1210890,"ip_address":"","ucode":"8F08E2CB81C4C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/0a/0ce5c232.jpg","comment_is_top":false,"comment_ctime":1563843465,"is_pvip":false,"replies":[{"id":42571,"content":"有没有想过要统一成一种消息队列呢？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563847117,"ip_address":"","comment_id":116352,"utype":1}],"discussion_count":2,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"目前项目用到了rabbitmq和kafka，rabbitmq用于用户系统通知和相关用户画像模型的处理，进行个性化推荐，同时利用redis和mq，进行文章简单信息的缓存，减少后台数据库的压力，kafka主要是负责爬虫的文章存储，然后各个微服务进行文章内容的订阅","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459527,"discussion_content":"不丢消息，严格有序和Exactly Once应该是这个场景中需要优先考虑的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563932826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116334,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1563842221,"is_pvip":false,"replies":[{"id":42565,"content":"小袁：“我不是，我没有，你们别乱说！”","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846889,"ip_address":"","comment_id":116334,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"小袁是个有故事的朋友","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459499,"discussion_content":"有没有想过要统一成一种消息队列呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563847117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210890,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7a/0a/0ce5c232.jpg","nickname":"吕","note":"","ucode":"8F08E2CB81C4C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2677,"discussion_content":"最初是为了做模型相关，没有想存储大量文本内容，由于rabbitmq的路由比较好用，后期就没有换，目前已经采用了这样的架构方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563854990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116324,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":1381472,"ip_address":"","ucode":"85B1767EC17CB9","user_header":"https://static001.geekbang.org/account/avatar/00/15/14/60/c0fd84d6.jpg","comment_is_top":false,"comment_ctime":1563841334,"is_pvip":false,"replies":[{"id":42563,"content":"坚持，加油。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846809,"ip_address":"","comment_id":116324,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"第一天打卡","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459491,"discussion_content":"小袁：“我不是，我没有，你们别乱说！”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116306,"user_name":"张学磊","can_delete":false,"product_type":"c1","uid":1250029,"ip_address":"","ucode":"F545F384A6F1E1","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotSSnZic41tGkbflx0ogIg3ia6g2muFY1hCgosL2t3icZm7I8Ax1hcv1jNgr6vrZ53dpBuGhaoc6DKg/132","comment_is_top":false,"comment_ctime":1563839524,"is_pvip":false,"replies":[{"id":42556,"content":"赞总结！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846400,"ip_address":"","comment_id":116306,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"目前在工作中使用的场景是工作流向业务系统发审批结果消息，业务系统接入工作流进行流程审批，工作流中任何一个节点的推动都向业务系统所订阅的主题发审批结果消息，业务系统收到消息后进行状态更新及后续操作。比场景使用消息队列的目的是进行系统解耦和异步调用。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459487,"discussion_content":"坚持，加油。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116286,"user_name":"Tx爱上360","can_delete":false,"product_type":"c1","uid":1363968,"ip_address":"","ucode":"FE0577CBB623E4","user_header":"https://static001.geekbang.org/account/avatar/00/14/d0/00/b037b74f.jpg","comment_is_top":false,"comment_ctime":1563819072,"is_pvip":false,"replies":[{"id":42551,"content":"记得每节课都来打卡。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846090,"ip_address":"","comment_id":116286,"utype":1}],"discussion_count":3,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"打卡，滴","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459478,"discussion_content":"赞总结！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116554,"user_name":"Fortune","can_delete":false,"product_type":"c1","uid":1508654,"ip_address":"","ucode":"6B9465AC996523","user_header":"https://static001.geekbang.org/account/avatar/00/17/05/2e/5a6b6b6e.jpg","comment_is_top":false,"comment_ctime":1563868410,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"看完了，也看完了评论，可能只有我一个没有实际项目中接触消息队列了，慢慢学吧，加油！\n目前做的是支付系统，只知道用redis用来存储用户token和进行验证这样子，当然中间用户请求过来的过程中，是可以加队列来进行削峰的，应该是系统的并发并不高哈，就做了个集群这样子，谢谢老师分享！","like_count":8,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459464,"discussion_content":"记得每节课都来打卡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1614708,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a3/74/74b405e8.jpg","nickname":"佐","note":"","ucode":"A0A15058056B9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2796,"discussion_content":"老师有没有遇到过rabbitmq 3.6.1版本，内存某一段时间内突然飙升导致rabbitmq性能急剧下降的问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563940565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1318474,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epO1jsCG9OFSp5llyc0icUZKic85KYulN3DsEPmP0JY2hknr8cBJXsJoaO1aIqNp5Br0pRovGaE0NWw/132","nickname":"zenfery","note":"","ucode":"5ABB9DEE9F7712","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1614708,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a3/74/74b405e8.jpg","nickname":"佐","note":"","ucode":"A0A15058056B9D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553425,"discussion_content":"用了镜像了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645883166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2796,"ip_address":"","group_id":0},"score":553425,"extra":""}]}]},{"had_liked":false,"id":116695,"user_name":"taotaowang","can_delete":false,"product_type":"c1","uid":1365177,"ip_address":"","ucode":"108489DD55723A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIvMlvSXsYgJibgutQdyFT6LsrXuvbjWVh0UpcF4esLzlWzBRlsFHA9MyBY38ibngKAN8mDn6DdHnMQ/132","comment_is_top":false,"comment_ctime":1563891500,"is_pvip":false,"replies":[{"id":42738,"content":"每周会定期更新3篇。剩下的时间给大家消化理解和动手Coding。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563934612,"ip_address":"","comment_id":116695,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"辛苦老师 很期待老师尽快更新 如饥似渴的想学习mq知识","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459641,"discussion_content":"每周会定期更新3篇。剩下的时间给大家消化理解和动手Coding。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116504,"user_name":"SuperSnow","can_delete":false,"product_type":"c1","uid":1065351,"ip_address":"","ucode":"84C89AA8083E6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","comment_is_top":false,"comment_ctime":1563859446,"is_pvip":false,"replies":[{"id":42727,"content":"一般来说，一条订单信息的数据量不大，也就几个KB，用消息队列来传递完全不是问题。所以，一条消息能解决的问题，为什么还需要增加一次RPC呢？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563934202,"ip_address":"","comment_id":116504,"utype":1}],"discussion_count":3,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"当一个服务为多个服务提供数据的时候，可以通过MQ进行交换来解耦服务间的耦合。这里的订单提供的是一个完整的订单信息，不用消息队列不也是挺好的吗？如果用了MQ，那起到的作用也就是减少接口压力了。是这么理解吗？","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459641,"discussion_content":"每周会定期更新3篇。剩下的时间给大家消化理解和动手Coding。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563934612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116413,"user_name":"不能扮演天使","can_delete":false,"product_type":"c1","uid":1046172,"ip_address":"","ucode":"9922330BFF7FFB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f6/9c/b457a937.jpg","comment_is_top":false,"comment_ctime":1563847769,"is_pvip":false,"replies":[{"id":42714,"content":"是使用MySQL来存储消息吗？还是只存储元数据呢？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563932877,"ip_address":"","comment_id":116413,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"公司现在用MQ大多数还是做异步请求处理和项目解耦，微服务太多用MQ来实现通信还是比较高效的，比如业务端的数据上报可以用MQ方便后期做数据分析，我们公司MQ基于MySQL，不知道京东是怎么实现的，期待...","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459528,"discussion_content":"是使用MySQL来存储消息吗？还是只存储元数据呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563932877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116410,"user_name":"江南皮革厂研发中心保安队长","can_delete":false,"product_type":"c1","uid":1099584,"ip_address":"","ucode":"231419643A5CC5","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/40/66a203cd.jpg","comment_is_top":false,"comment_ctime":1563847503,"is_pvip":false,"replies":[{"id":42712,"content":"不丢消息，严格有序和Exactly Once应该是这个场景中需要优先考虑的问题。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563932826,"ip_address":"","comment_id":116410,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"工作中用过的应该是在云平台上的rabbitmq，对虚拟机生命周期管理的调度和对接云管平台的工单（创建、迁移、扩容等）服务动作，这个不像电商系统，对请求处理和实时响应的要求没有那么高，主要是在数据一致性和通信性能上有一定要求。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459527,"discussion_content":"不丢消息，严格有序和Exactly Once应该是这个场景中需要优先考虑的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563932826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116352,"user_name":"吕","can_delete":false,"product_type":"c1","uid":1210890,"ip_address":"","ucode":"8F08E2CB81C4C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/0a/0ce5c232.jpg","comment_is_top":false,"comment_ctime":1563843465,"is_pvip":false,"replies":[{"id":42571,"content":"有没有想过要统一成一种消息队列呢？","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563847117,"ip_address":"","comment_id":116352,"utype":1}],"discussion_count":2,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"目前项目用到了rabbitmq和kafka，rabbitmq用于用户系统通知和相关用户画像模型的处理，进行个性化推荐，同时利用redis和mq，进行文章简单信息的缓存，减少后台数据库的压力，kafka主要是负责爬虫的文章存储，然后各个微服务进行文章内容的订阅","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459499,"discussion_content":"有没有想过要统一成一种消息队列呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563847117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210890,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7a/0a/0ce5c232.jpg","nickname":"吕","note":"","ucode":"8F08E2CB81C4C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2677,"discussion_content":"最初是为了做模型相关，没有想存储大量文本内容，由于rabbitmq的路由比较好用，后期就没有换，目前已经采用了这样的架构方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563854990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116334,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1563842221,"is_pvip":false,"replies":[{"id":42565,"content":"小袁：“我不是，我没有，你们别乱说！”","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846889,"ip_address":"","comment_id":116334,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"小袁是个有故事的朋友","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459491,"discussion_content":"小袁：“我不是，我没有，你们别乱说！”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116324,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":1381472,"ip_address":"","ucode":"85B1767EC17CB9","user_header":"https://static001.geekbang.org/account/avatar/00/15/14/60/c0fd84d6.jpg","comment_is_top":false,"comment_ctime":1563841334,"is_pvip":false,"replies":[{"id":42563,"content":"坚持，加油。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846809,"ip_address":"","comment_id":116324,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"第一天打卡","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459487,"discussion_content":"坚持，加油。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116306,"user_name":"张学磊","can_delete":false,"product_type":"c1","uid":1250029,"ip_address":"","ucode":"F545F384A6F1E1","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotSSnZic41tGkbflx0ogIg3ia6g2muFY1hCgosL2t3icZm7I8Ax1hcv1jNgr6vrZ53dpBuGhaoc6DKg/132","comment_is_top":false,"comment_ctime":1563839524,"is_pvip":false,"replies":[{"id":42556,"content":"赞总结！","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846400,"ip_address":"","comment_id":116306,"utype":1}],"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"目前在工作中使用的场景是工作流向业务系统发审批结果消息，业务系统接入工作流进行流程审批，工作流中任何一个节点的推动都向业务系统所订阅的主题发审批结果消息，业务系统收到消息后进行状态更新及后续操作。比场景使用消息队列的目的是进行系统解耦和异步调用。","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459478,"discussion_content":"赞总结！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116286,"user_name":"Tx爱上360","can_delete":false,"product_type":"c1","uid":1363968,"ip_address":"","ucode":"FE0577CBB623E4","user_header":"https://static001.geekbang.org/account/avatar/00/14/d0/00/b037b74f.jpg","comment_is_top":false,"comment_ctime":1563819072,"is_pvip":false,"replies":[{"id":42551,"content":"记得每节课都来打卡。","user_name":"作者回复","user_name_real":"李玥","uid":1501046,"ctime":1563846090,"ip_address":"","comment_id":116286,"utype":1}],"discussion_count":3,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"打卡，滴","like_count":0,"discussions":[{"author":{"id":1501046,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e7/76/79c1f23a.jpg","nickname":"李玥","note":"","ucode":"B19E91EE248591","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459464,"discussion_content":"记得每节课都来打卡。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563846090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1614708,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a3/74/74b405e8.jpg","nickname":"佐","note":"","ucode":"A0A15058056B9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2796,"discussion_content":"老师有没有遇到过rabbitmq 3.6.1版本，内存某一段时间内突然飙升导致rabbitmq性能急剧下降的问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563940565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1318474,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epO1jsCG9OFSp5llyc0icUZKic85KYulN3DsEPmP0JY2hknr8cBJXsJoaO1aIqNp5Br0pRovGaE0NWw/132","nickname":"zenfery","note":"","ucode":"5ABB9DEE9F7712","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1614708,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a3/74/74b405e8.jpg","nickname":"佐","note":"","ucode":"A0A15058056B9D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553425,"discussion_content":"用了镜像了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645883166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2796,"ip_address":"","group_id":0},"score":553425,"extra":""}]}]},{"had_liked":false,"id":116554,"user_name":"Fortune","can_delete":false,"product_type":"c1","uid":1508654,"ip_address":"","ucode":"6B9465AC996523","user_header":"https://static001.geekbang.org/account/avatar/00/17/05/2e/5a6b6b6e.jpg","comment_is_top":false,"comment_ctime":1563868410,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":9,"product_id":100032301,"comment_content":"看完了，也看完了评论，可能只有我一个没有实际项目中接触消息队列了，慢慢学吧，加油！\n目前做的是支付系统，只知道用redis用来存储用户token和进行验证这样子，当然中间用户请求过来的过程中，是可以加队列来进行削峰的，应该是系统的并发并不高哈，就做了个集群这样子，谢谢老师分享！","like_count":8,"discussions":[{"author":{"id":1793096,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5c/48/3f7d9ff6.jpg","nickname":"浮生","note":"","ucode":"377A6D7B73A83A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349954,"discussion_content":"You aren&#39;t along.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613640836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116429,"user_name":"豆沙包","can_delete":false,"product_type":"c1","uid":1223954,"ip_address":"","ucode":"7C62E546E6786A","user_header":"https://static001.geekbang.org/account/avatar/00/12/ad/12/d4d54dd2.jpg","comment_is_top":false,"comment_ctime":1563849346,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"我在公司负责审核系统，审核系统要求稳定性和可靠性比较高。消息队列很好的保证了系统的稳定性。与此同时，除了实时mq，还用了许多延迟mq来进行任务的检查和异常重试。\n","like_count":6},{"had_liked":false,"id":302792,"user_name":"MichaelGu","can_delete":false,"product_type":"c1","uid":1072629,"ip_address":"","ucode":"B0226958BC0147","user_header":"https://static001.geekbang.org/account/avatar/00/10/5d/f5/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1626365175,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"老师，除了削峰填谷，异步，解耦外，我们用kafka进行并行计算，不知道算不算一种特性。\n场景是，相对于单线程循环，多线程并行而言，如果用kafka多分区多消费者，可以利用集群资源进行并行计算，用于大批量计算或者消息推送","like_count":3},{"had_liked":false,"id":117505,"user_name":"明不二","can_delete":false,"product_type":"c1","uid":1106160,"ip_address":"","ucode":"621B6A8B932095","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/f0/5a29e705.jpg","comment_is_top":false,"comment_ctime":1564063710,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"消息队列主要用于异步，流控，解耦。\n除此之外，还有观察者，流计算，广播中也会用到。\n我补充一个最近在广播消息中用到消息队列的例子。\n我们广播消息微服务主要是接收其他微服务推送的消息，并且通过 websocket 推送到前端页面。\n在分布式场景下，每个websocket session由每个节点自己维护。所以当消息推送到某个节点以后，不能直接往websocket推送，不然有些节点会收不到。\n我的解决方案是消息先推kafka，然后每个节点又订阅kafka消息。此时，就能做到消息到达某个节点后，会推向每个节点维护长连接的前端页面了。","like_count":3},{"had_liked":false,"id":321756,"user_name":"wuhang202","can_delete":false,"product_type":"c1","uid":2638583,"ip_address":"","ucode":"2A81B4FE4F22DA","user_header":"https://static001.geekbang.org/account/avatar/00/28/42/f7/8b57263a.jpg","comment_is_top":false,"comment_ctime":1637031507,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"异步：可延迟处理的业务，对外包装为http调用，接收请求后放到消息队列里并立即返回结果\n解耦：多服务实例的配置同步时，都订阅消息并属于不同的消费组，实现广播配置状态的效果\n平滑流量：用户感知强烈的操作实时调用，用户若感知的流程通过消息平滑流量并可延迟处理\n异常重试：对于易失败或一致性高的业务，外部调用通过消息队列存储，若处理失败或异常宕机可重新消费数据处理。","like_count":2},{"had_liked":false,"id":229679,"user_name":"斜杠青年","can_delete":false,"product_type":"c1","uid":1177739,"ip_address":"","ucode":"D7AF02B8588549","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/8b/74d2ab6b.jpg","comment_is_top":false,"comment_ctime":1593096881,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"消息队列-&gt;网关-&gt;根据request构建response返回-&gt;Tomcat的web请求流程-&gt;Nginx的Http处理流程-&gt;Tomcat原来就是一个Java项目可以查看源码研究一下Socket如何转换成简单的Servlet如何变成简单的request和response？有时候很多东西真的是需要一个时间的累积。","like_count":2,"discussions":[{"author":{"id":1103421,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d6/3d/695ed8f2.jpg","nickname":"charles","note":"","ucode":"E5C2DECE4A6976","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2846,"discussion_content":"请问是做方面的审核系统，我也在做一个审批系统，有机会可以交流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563966962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120161,"user_name":"梦典","can_delete":false,"product_type":"c1","uid":1203920,"ip_address":"","ucode":"0A6F91068A13E8","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/d0/e676ac19.jpg","comment_is_top":false,"comment_ctime":1564801498,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"1.日批处理将短信等通知信息生产到消息队列里，让处理流程更快。2.用户发送短信验证码使用异步线程实现的，没有使用MQ。3.网关限流是基于Redis实现的，感觉更简单，队列的方式还需要依赖令牌生成器的服务稳定性和可用性，什么场景下，需要讲Redis方案换成MQ方案呢","like_count":2},{"had_liked":false,"id":119716,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1564662765,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"订阅和消费可以有效的实现了系统之间的解耦。通过canal监控数据库的变化，然后不同的系统去订阅该数据变化。比如我现在所在跑步公司，跑步数据就是通过mq传输的。一方面保证了跑步数据的保存逻辑尽可能的简单，不需要频繁上线。另一方面","like_count":2},{"had_liked":false,"id":118045,"user_name":"Panda","can_delete":false,"product_type":"c1","uid":1095740,"ip_address":"","ucode":"911A200C7B18BE","user_header":"https://static001.geekbang.org/account/avatar/00/10/b8/3c/1a294619.jpg","comment_is_top":false,"comment_ctime":1564217868,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"也可以用 MQ 来解决 分布式一致性问题 简单场景","like_count":2,"discussions":[{"author":{"id":1443078,"avatar":"https://static001.geekbang.org/account/avatar/00/16/05/06/f5979d65.jpg","nickname":"亚洲舞王.尼古拉斯赵四","note":"","ucode":"7159F5D7232696","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3967,"discussion_content":"如何解决，能简述一下吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565009857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117865,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1564154125,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"在学习中使用过RabbitMQ做一个简单的日志异步记录，以及使用过Kafka去存储通过脚本收集到服务器上的硬件信息和相应中间件的指标信息，处理不及时可能会出现消息大量堆积的情况","like_count":2},{"had_liked":false,"id":345694,"user_name":"算法成瘾者","can_delete":false,"product_type":"c1","uid":1531879,"ip_address":"","ucode":"6E7A8E8844F9C3","user_header":"https://static001.geekbang.org/account/avatar/00/17/5f/e7/318ce10e.jpg","comment_is_top":false,"comment_ctime":1652514497,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"消息队列的作用：\n①异步解耦\n②提高并发性\n③削峰","like_count":1},{"had_liked":false,"id":116429,"user_name":"豆沙包","can_delete":false,"product_type":"c1","uid":1223954,"ip_address":"","ucode":"7C62E546E6786A","user_header":"https://static001.geekbang.org/account/avatar/00/12/ad/12/d4d54dd2.jpg","comment_is_top":false,"comment_ctime":1563849346,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"我在公司负责审核系统，审核系统要求稳定性和可靠性比较高。消息队列很好的保证了系统的稳定性。与此同时，除了实时mq，还用了许多延迟mq来进行任务的检查和异常重试。\n","like_count":6,"discussions":[{"author":{"id":1103421,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d6/3d/695ed8f2.jpg","nickname":"charles","note":"","ucode":"E5C2DECE4A6976","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2846,"discussion_content":"请问是做方面的审核系统，我也在做一个审批系统，有机会可以交流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563966962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302792,"user_name":"MichaelGu","can_delete":false,"product_type":"c1","uid":1072629,"ip_address":"","ucode":"B0226958BC0147","user_header":"https://static001.geekbang.org/account/avatar/00/10/5d/f5/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1626365175,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"老师，除了削峰填谷，异步，解耦外，我们用kafka进行并行计算，不知道算不算一种特性。\n场景是，相对于单线程循环，多线程并行而言，如果用kafka多分区多消费者，可以利用集群资源进行并行计算，用于大批量计算或者消息推送","like_count":3},{"had_liked":false,"id":117505,"user_name":"明不二","can_delete":false,"product_type":"c1","uid":1106160,"ip_address":"","ucode":"621B6A8B932095","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/f0/5a29e705.jpg","comment_is_top":false,"comment_ctime":1564063710,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"消息队列主要用于异步，流控，解耦。\n除此之外，还有观察者，流计算，广播中也会用到。\n我补充一个最近在广播消息中用到消息队列的例子。\n我们广播消息微服务主要是接收其他微服务推送的消息，并且通过 websocket 推送到前端页面。\n在分布式场景下，每个websocket session由每个节点自己维护。所以当消息推送到某个节点以后，不能直接往websocket推送，不然有些节点会收不到。\n我的解决方案是消息先推kafka，然后每个节点又订阅kafka消息。此时，就能做到消息到达某个节点后，会推向每个节点维护长连接的前端页面了。","like_count":3},{"had_liked":false,"id":321756,"user_name":"wuhang202","can_delete":false,"product_type":"c1","uid":2638583,"ip_address":"","ucode":"2A81B4FE4F22DA","user_header":"https://static001.geekbang.org/account/avatar/00/28/42/f7/8b57263a.jpg","comment_is_top":false,"comment_ctime":1637031507,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"异步：可延迟处理的业务，对外包装为http调用，接收请求后放到消息队列里并立即返回结果\n解耦：多服务实例的配置同步时，都订阅消息并属于不同的消费组，实现广播配置状态的效果\n平滑流量：用户感知强烈的操作实时调用，用户若感知的流程通过消息平滑流量并可延迟处理\n异常重试：对于易失败或一致性高的业务，外部调用通过消息队列存储，若处理失败或异常宕机可重新消费数据处理。","like_count":2},{"had_liked":false,"id":229679,"user_name":"斜杠青年","can_delete":false,"product_type":"c1","uid":1177739,"ip_address":"","ucode":"D7AF02B8588549","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/8b/74d2ab6b.jpg","comment_is_top":false,"comment_ctime":1593096881,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"消息队列-&gt;网关-&gt;根据request构建response返回-&gt;Tomcat的web请求流程-&gt;Nginx的Http处理流程-&gt;Tomcat原来就是一个Java项目可以查看源码研究一下Socket如何转换成简单的Servlet如何变成简单的request和response？有时候很多东西真的是需要一个时间的累积。","like_count":2,"discussions":[{"author":{"id":1543599,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","nickname":"xtepCool","note":"","ucode":"6181687E98524E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547690,"discussion_content":"大佬！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642827332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120161,"user_name":"梦典","can_delete":false,"product_type":"c1","uid":1203920,"ip_address":"","ucode":"0A6F91068A13E8","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/d0/e676ac19.jpg","comment_is_top":false,"comment_ctime":1564801498,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"1.日批处理将短信等通知信息生产到消息队列里，让处理流程更快。2.用户发送短信验证码使用异步线程实现的，没有使用MQ。3.网关限流是基于Redis实现的，感觉更简单，队列的方式还需要依赖令牌生成器的服务稳定性和可用性，什么场景下，需要讲Redis方案换成MQ方案呢","like_count":2},{"had_liked":false,"id":119716,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1564662765,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"订阅和消费可以有效的实现了系统之间的解耦。通过canal监控数据库的变化，然后不同的系统去订阅该数据变化。比如我现在所在跑步公司，跑步数据就是通过mq传输的。一方面保证了跑步数据的保存逻辑尽可能的简单，不需要频繁上线。另一方面","like_count":2},{"had_liked":false,"id":118045,"user_name":"Panda","can_delete":false,"product_type":"c1","uid":1095740,"ip_address":"","ucode":"911A200C7B18BE","user_header":"https://static001.geekbang.org/account/avatar/00/10/b8/3c/1a294619.jpg","comment_is_top":false,"comment_ctime":1564217868,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"也可以用 MQ 来解决 分布式一致性问题 简单场景","like_count":2,"discussions":[{"author":{"id":1543599,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","nickname":"xtepCool","note":"","ucode":"6181687E98524E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547690,"discussion_content":"大佬！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642827332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117865,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1564154125,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"在学习中使用过RabbitMQ做一个简单的日志异步记录，以及使用过Kafka去存储通过脚本收集到服务器上的硬件信息和相应中间件的指标信息，处理不及时可能会出现消息大量堆积的情况","like_count":2},{"had_liked":false,"id":345694,"user_name":"算法成瘾者","can_delete":false,"product_type":"c1","uid":1531879,"ip_address":"","ucode":"6E7A8E8844F9C3","user_header":"https://static001.geekbang.org/account/avatar/00/17/5f/e7/318ce10e.jpg","comment_is_top":false,"comment_ctime":1652514497,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":10,"product_id":100032301,"comment_content":"消息队列的作用：\n①异步解耦\n②提高并发性\n③削峰","like_count":1,"discussions":[{"author":{"id":1443078,"avatar":"https://static001.geekbang.org/account/avatar/00/16/05/06/f5979d65.jpg","nickname":"亚洲舞王.尼古拉斯赵四","note":"","ucode":"7159F5D7232696","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3967,"discussion_content":"如何解决，能简述一下吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565009857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323087,"user_name":"加油！","can_delete":false,"product_type":"c1","uid":1749015,"ip_address":"","ucode":"947E97762DB6EF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b0/17/451cb87c.jpg","comment_is_top":false,"comment_ctime":1637724433,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"讲得很好啊，我们后端系统中用kafka来做数据解耦；端上写库后，使用maxwell订阅mysql binlog日志，然后生产消息到kafka中，消费者会消费这些消息再写到redis中，做成缓存。","like_count":1},{"had_liked":false,"id":319983,"user_name":"俊伟","can_delete":false,"product_type":"c1","uid":1111175,"ip_address":"","ucode":"7905B4F25637F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/87/644c0c5d.jpg","comment_is_top":false,"comment_ctime":1636027594,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"我们的系统里面使用了消息队列，主要是用来把耗时的操作进行异步处理。","like_count":1},{"had_liked":false,"id":275904,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1611715219,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"1.关于文中提到的限流作用,可以使用谷歌的guava ratelimiter,已经算是相当不错的现有框架了\n2.消息队列是一种生产者消费者模式的体现,之前项目中,利用kafka收集了全国多地的客户端日志信息,交由内部消费系统进行转换,拆分为不同的数据处理之后,再次放入RocketMQ,进行批量的录入InfluxDB","like_count":1},{"had_liked":false,"id":245107,"user_name":"超超不会飞","can_delete":false,"product_type":"c1","uid":1025894,"ip_address":"","ucode":"F30D3E62442954","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/66/d3e151c7.jpg","comment_is_top":false,"comment_ctime":1598837734,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"上游提供的电话通知服务没有做限流处理，我们的服务刚好用到延时MQ在两个系统间调用，顺便利用延时MQ的特点做了限流处理，避免集中的请求对上游服务造成冲击。","like_count":1},{"had_liked":false,"id":149750,"user_name":"whhbbq","can_delete":false,"product_type":"c1","uid":1018494,"ip_address":"","ucode":"4A93F3E375CB44","user_header":"","comment_is_top":false,"comment_ctime":1573366145,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"生产项目中使用了阿里云的apache rocket mq，比如库存中心订阅了仓库系统的出入库消息，做库存的变更。\n好处是系统之间解耦了，互不依赖。\n缺点是数据不一致问题，仓库已经出库了，但是没有发出库消息的话，与库存中心库存就对不上了。所以，需要有对账机制，保证数据的最终一致性。","like_count":1},{"had_liked":false,"id":128288,"user_name":"知行","can_delete":false,"product_type":"c1","uid":1155345,"ip_address":"","ucode":"36FC90DB13F6C9","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/11/ae159a89.jpg","comment_is_top":false,"comment_ctime":1566868838,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"我参与的项目中使用到队列的场景包含用户下单完成后，上游异步回调我们，我们会异步回调用户。如果用户未返回正确响应，则放到队列中定时调用数次。对于项目中已存在的业务，我想到若是使用到队列解耦方面的优点，将原先大杂烩模块进行拆分，或许可以提升速度，哈哈。","like_count":1},{"had_liked":false,"id":117074,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1563963029,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"一步一个脚印，根上大部队的节奏！","like_count":1},{"had_liked":false,"id":116594,"user_name":"不懂","can_delete":false,"product_type":"c1","uid":1541612,"ip_address":"","ucode":"CA512A7EC3A27F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epQoq244hPvZBpvAd1q6uFQgVgVtgoJe90CaoNkrhjicJtibpBQCfujvgGEJ17nrC2sNNYqtqaKwBuA/132","comment_is_top":false,"comment_ctime":1563876777,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"目前所在项目，对接了较多上游业务，所对接的业务方大多会提供一个MQ给我们使用，他们利用MQ做了多系统的解耦，另外实时性也较高。\n在项目内部使用的MQ，主要是做异步处理。","like_count":1,"discussions":[{"author":{"id":1434527,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e3/9f/6b832641.jpg","nickname":"追の","note":"","ucode":"AAC018095016BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311898,"discussion_content":"厉害哟🙃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602515439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":388698,"user_name":"文敦复","can_delete":false,"product_type":"c1","uid":1195258,"ip_address":"四川","ucode":"B8F4A6BD5D7805","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/fa/e2990931.jpg","comment_is_top":false,"comment_ctime":1710732038,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"MQ的核心功能是削峰填谷，带来的提现就是：异步和解耦。","like_count":0},{"had_liked":false,"id":375725,"user_name":"geektime_zpf","can_delete":false,"product_type":"c1","uid":1041743,"ip_address":"广东","ucode":"FD61BCAD02CA54","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/4f/731ef2c1.jpg","comment_is_top":false,"comment_ctime":1685927189,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"两个系统传递消息，有时候用消息队列，替代新开发接口","like_count":0,"discussions":[{"author":{"id":1000060,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/7c/8ef14715.jpg","nickname":"NIXUS","note":"","ucode":"853763C229A5AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301250,"discussion_content":"老哥，可以分享一下多系统之间的mq对实时性的实现或思路吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598451413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323087,"user_name":"加油！","can_delete":false,"product_type":"c1","uid":1749015,"ip_address":"","ucode":"947E97762DB6EF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b0/17/451cb87c.jpg","comment_is_top":false,"comment_ctime":1637724433,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"讲得很好啊，我们后端系统中用kafka来做数据解耦；端上写库后，使用maxwell订阅mysql binlog日志，然后生产消息到kafka中，消费者会消费这些消息再写到redis中，做成缓存。","like_count":1},{"had_liked":false,"id":319983,"user_name":"俊伟","can_delete":false,"product_type":"c1","uid":1111175,"ip_address":"","ucode":"7905B4F25637F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/87/644c0c5d.jpg","comment_is_top":false,"comment_ctime":1636027594,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"我们的系统里面使用了消息队列，主要是用来把耗时的操作进行异步处理。","like_count":1},{"had_liked":false,"id":275904,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1611715219,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"1.关于文中提到的限流作用,可以使用谷歌的guava ratelimiter,已经算是相当不错的现有框架了\n2.消息队列是一种生产者消费者模式的体现,之前项目中,利用kafka收集了全国多地的客户端日志信息,交由内部消费系统进行转换,拆分为不同的数据处理之后,再次放入RocketMQ,进行批量的录入InfluxDB","like_count":1},{"had_liked":false,"id":245107,"user_name":"超超不会飞","can_delete":false,"product_type":"c1","uid":1025894,"ip_address":"","ucode":"F30D3E62442954","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/66/d3e151c7.jpg","comment_is_top":false,"comment_ctime":1598837734,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"上游提供的电话通知服务没有做限流处理，我们的服务刚好用到延时MQ在两个系统间调用，顺便利用延时MQ的特点做了限流处理，避免集中的请求对上游服务造成冲击。","like_count":1,"discussions":[{"author":{"id":1434527,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e3/9f/6b832641.jpg","nickname":"追の","note":"","ucode":"AAC018095016BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311898,"discussion_content":"厉害哟🙃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602515439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149750,"user_name":"whhbbq","can_delete":false,"product_type":"c1","uid":1018494,"ip_address":"","ucode":"4A93F3E375CB44","user_header":"","comment_is_top":false,"comment_ctime":1573366145,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"生产项目中使用了阿里云的apache rocket mq，比如库存中心订阅了仓库系统的出入库消息，做库存的变更。\n好处是系统之间解耦了，互不依赖。\n缺点是数据不一致问题，仓库已经出库了，但是没有发出库消息的话，与库存中心库存就对不上了。所以，需要有对账机制，保证数据的最终一致性。","like_count":1},{"had_liked":false,"id":128288,"user_name":"知行","can_delete":false,"product_type":"c1","uid":1155345,"ip_address":"","ucode":"36FC90DB13F6C9","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/11/ae159a89.jpg","comment_is_top":false,"comment_ctime":1566868838,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"我参与的项目中使用到队列的场景包含用户下单完成后，上游异步回调我们，我们会异步回调用户。如果用户未返回正确响应，则放到队列中定时调用数次。对于项目中已存在的业务，我想到若是使用到队列解耦方面的优点，将原先大杂烩模块进行拆分，或许可以提升速度，哈哈。","like_count":1},{"had_liked":false,"id":117074,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1563963029,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"一步一个脚印，根上大部队的节奏！","like_count":1},{"had_liked":false,"id":116594,"user_name":"不懂","can_delete":false,"product_type":"c1","uid":1541612,"ip_address":"","ucode":"CA512A7EC3A27F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epQoq244hPvZBpvAd1q6uFQgVgVtgoJe90CaoNkrhjicJtibpBQCfujvgGEJ17nrC2sNNYqtqaKwBuA/132","comment_is_top":false,"comment_ctime":1563876777,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"目前所在项目，对接了较多上游业务，所对接的业务方大多会提供一个MQ给我们使用，他们利用MQ做了多系统的解耦，另外实时性也较高。\n在项目内部使用的MQ，主要是做异步处理。","like_count":1,"discussions":[{"author":{"id":1000060,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/7c/8ef14715.jpg","nickname":"NIXUS","note":"","ucode":"853763C229A5AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301250,"discussion_content":"老哥，可以分享一下多系统之间的mq对实时性的实现或思路吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598451413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":388698,"user_name":"文敦复","can_delete":false,"product_type":"c1","uid":1195258,"ip_address":"四川","ucode":"B8F4A6BD5D7805","user_header":"https://static001.geekbang.org/account/avatar/00/12/3c/fa/e2990931.jpg","comment_is_top":false,"comment_ctime":1710732038,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"MQ的核心功能是削峰填谷，带来的提现就是：异步和解耦。","like_count":0},{"had_liked":false,"id":375725,"user_name":"geektime_zpf","can_delete":false,"product_type":"c1","uid":1041743,"ip_address":"广东","ucode":"FD61BCAD02CA54","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/4f/731ef2c1.jpg","comment_is_top":false,"comment_ctime":1685927189,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":11,"product_id":100032301,"comment_content":"两个系统传递消息，有时候用消息队列，替代新开发接口","like_count":0},{"had_liked":false,"id":374416,"user_name":"kai","can_delete":false,"product_type":"c1","uid":1018452,"ip_address":"上海","ucode":"443ED92B59AB8C","user_header":"","comment_is_top":false,"comment_ctime":1684120540,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"目前，我们的系统中，使用最多的场景是：服务解耦、异步处理以及流计算，由于业务量不是太大，流量控制目前使用的并不是很多。","like_count":0},{"had_liked":false,"id":370848,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"广东","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/d1ab239e.jpg","comment_is_top":false,"comment_ctime":1679315567,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"服务之间的解耦，尤其是像交易这种系统，依赖大量下游，如果每个都是同步依赖，当某几个下游服务出现网络抖动或者服务响应变慢时，交易系统就瞬间被拖垮，通过MQ来解耦这种弱依赖，以最终一致性满足业务需要，可以让系统变得更加奶草。","like_count":0},{"had_liked":false,"id":369115,"user_name":"小红帽","can_delete":false,"product_type":"c1","uid":1135290,"ip_address":"广东","ucode":"876000FB67C980","user_header":"https://static001.geekbang.org/account/avatar/00/11/52/ba/440c0157.jpg","comment_is_top":false,"comment_ctime":1677122971,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"以前总会提到消息队列的优势，他的服务接口解耦，削峰流量控制，同步接口异步化提高接口吞吐量。\n但是事物都是两面性的，他提供这种优势的同时也带来了它特有的问题，我们不能忽略。\n1、引入消息队列首先带来的就是系统复杂性提高了。\n2、然后因为事务问题，可能会带来数据的不一致（比如订单接口数据库提交时突然崩了，消息却发出去了）\n3、最后，消息队列会带来全局业务的延时问题。\n一定要先站在业务的角度分析业务关键路径和用户体量，以及通过压测得出我们系统处理极限，根据这些数据来决定是否要引入消息队列。比如金融行业肯定不能接受数据不一致的场景，如果要引入消息队列就必须要妥善处理好这些异常情况。","like_count":0},{"had_liked":false,"id":362862,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"北京","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1668996811,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"应用场景：\n异步处理：用户注册、签到送积分，可以把送积分 发送到mq，积分服务订阅 进行消费送积分\n结偶：不依赖其他服务的交互，发完mq 该业务流程就结束了。\n消峰：瞬时的大并发处理，会对服务器、数据库造成很大的压力，如果把处理发到送mq，消费者可以慢慢消费mq的消息，对服务器和数据库的压力，不会由于并发瞬时暴增压垮服务器，做到了流量消峰\n\n","like_count":0},{"had_liked":false,"id":357193,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1274787,"ip_address":"上海","ucode":"C233DF1D224EC1","user_header":"https://static001.geekbang.org/account/avatar/00/13/73/a3/2b077607.jpg","comment_is_top":false,"comment_ctime":1663056871,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"代码仓库pr触发ci,就使用到了消息队列rabbitmq,解耦了后端代码仓库相关服务和ci服务\n系统每个模块间的操作日志，都通过写入到mq中，供专门的日志服务去消费-异步处理和解耦\n","like_count":0},{"had_liked":false,"id":348072,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1654702405,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"老师，打扰了，减少等待，自然实现了步骤之间的并发，提升系统总体的性能 这句话没有理解，步骤之间仍然是串行的，怎么并发了呢；","like_count":0},{"had_liked":false,"id":348033,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1654678466,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"自然实现了步骤之间的并发 老师，请问下这句话怎么理解呢？","like_count":0},{"had_liked":false,"id":345163,"user_name":"不学不行啊","can_delete":false,"product_type":"c1","uid":1335474,"ip_address":"","ucode":"69368165141C2D","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/b2/ccebcb71.jpg","comment_is_top":false,"comment_ctime":1652083673,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"老师好，实际场景会在网关生产消息么？那不是增加了网关的逻辑，可以把这块逻辑放在业务方么，自己生产消息并消费？","like_count":0},{"had_liked":false,"id":340963,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1649247712,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"我们现在遇到的消息队列：\n1.主要是服务端需要触发一些通知的时候，发送给web页面展示，就是服务端是生产者，页面是消费者。相当于是发布，订阅。只是我们使用的是rabbitmq，不能群发，这个问题还没有解决，一个页面展示了，其他页面就展示不了；\n2.日志，解耦，就是业务系统操作日志\n3.触发事件有消息推送时，采用解耦的方式，异步进行消息推送。账单生成，同步到总表，异步的方式同步\n4.关于流量，削峰填谷，面前还没有用到，主要是异步和解耦。后续在和物联网设备交互中，都可以用这个思想，就是比如电表用电数据上报时，上报后就往消息队列里面放，然后消费者消费时候再入库进行处理；在停车识别记录上报的时候，也可以立马先返回，然后放到消息队列，之后在消费者消费异步下发数据处理。","like_count":0},{"had_liked":false,"id":340733,"user_name":"再见理想","can_delete":false,"product_type":"c1","uid":1245999,"ip_address":"","ucode":"FAC88B3F6F6DFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/2f/0a5e0751.jpg","comment_is_top":false,"comment_ctime":1649085599,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"消息队列的用途：\n1，异步处理，提升服务的响应速度，系统的吞吐量。\n2，削峰填谷，短时间内大量请求时，暂存请求，让后端服务从容地处理请求。\n3，服务解耦，其他服务可以通过订阅指定的主题，实现与主服务的通信，而不需要将所有逻辑都耦合在一个服务中。\n缺点：\n1，增加了系统的复杂度。\n2，需要保证消息队列的可用性，否则可能导致整个系统的瘫痪或数据不一致的问题。\n3，增加了一定的数据延迟性，只能保证数据的最终一致性。\n","like_count":0},{"had_liked":false,"id":374416,"user_name":"kai","can_delete":false,"product_type":"c1","uid":1018452,"ip_address":"上海","ucode":"443ED92B59AB8C","user_header":"","comment_is_top":false,"comment_ctime":1684120540,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"目前，我们的系统中，使用最多的场景是：服务解耦、异步处理以及流计算，由于业务量不是太大，流量控制目前使用的并不是很多。","like_count":0},{"had_liked":false,"id":370848,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"广东","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/d1ab239e.jpg","comment_is_top":false,"comment_ctime":1679315567,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"服务之间的解耦，尤其是像交易这种系统，依赖大量下游，如果每个都是同步依赖，当某几个下游服务出现网络抖动或者服务响应变慢时，交易系统就瞬间被拖垮，通过MQ来解耦这种弱依赖，以最终一致性满足业务需要，可以让系统变得更加奶草。","like_count":0},{"had_liked":false,"id":369115,"user_name":"小红帽","can_delete":false,"product_type":"c1","uid":1135290,"ip_address":"广东","ucode":"876000FB67C980","user_header":"https://static001.geekbang.org/account/avatar/00/11/52/ba/440c0157.jpg","comment_is_top":false,"comment_ctime":1677122971,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"以前总会提到消息队列的优势，他的服务接口解耦，削峰流量控制，同步接口异步化提高接口吞吐量。\n但是事物都是两面性的，他提供这种优势的同时也带来了它特有的问题，我们不能忽略。\n1、引入消息队列首先带来的就是系统复杂性提高了。\n2、然后因为事务问题，可能会带来数据的不一致（比如订单接口数据库提交时突然崩了，消息却发出去了）\n3、最后，消息队列会带来全局业务的延时问题。\n一定要先站在业务的角度分析业务关键路径和用户体量，以及通过压测得出我们系统处理极限，根据这些数据来决定是否要引入消息队列。比如金融行业肯定不能接受数据不一致的场景，如果要引入消息队列就必须要妥善处理好这些异常情况。","like_count":0},{"had_liked":false,"id":362862,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"北京","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1668996811,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"应用场景：\n异步处理：用户注册、签到送积分，可以把送积分 发送到mq，积分服务订阅 进行消费送积分\n结偶：不依赖其他服务的交互，发完mq 该业务流程就结束了。\n消峰：瞬时的大并发处理，会对服务器、数据库造成很大的压力，如果把处理发到送mq，消费者可以慢慢消费mq的消息，对服务器和数据库的压力，不会由于并发瞬时暴增压垮服务器，做到了流量消峰\n\n","like_count":0},{"had_liked":false,"id":357193,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1274787,"ip_address":"上海","ucode":"C233DF1D224EC1","user_header":"https://static001.geekbang.org/account/avatar/00/13/73/a3/2b077607.jpg","comment_is_top":false,"comment_ctime":1663056871,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"代码仓库pr触发ci,就使用到了消息队列rabbitmq,解耦了后端代码仓库相关服务和ci服务\n系统每个模块间的操作日志，都通过写入到mq中，供专门的日志服务去消费-异步处理和解耦\n","like_count":0},{"had_liked":false,"id":348072,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1654702405,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"老师，打扰了，减少等待，自然实现了步骤之间的并发，提升系统总体的性能 这句话没有理解，步骤之间仍然是串行的，怎么并发了呢；","like_count":0},{"had_liked":false,"id":348033,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1654678466,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"自然实现了步骤之间的并发 老师，请问下这句话怎么理解呢？","like_count":0},{"had_liked":false,"id":345163,"user_name":"不学不行啊","can_delete":false,"product_type":"c1","uid":1335474,"ip_address":"","ucode":"69368165141C2D","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/b2/ccebcb71.jpg","comment_is_top":false,"comment_ctime":1652083673,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"老师好，实际场景会在网关生产消息么？那不是增加了网关的逻辑，可以把这块逻辑放在业务方么，自己生产消息并消费？","like_count":0},{"had_liked":false,"id":340963,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1649247712,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"我们现在遇到的消息队列：\n1.主要是服务端需要触发一些通知的时候，发送给web页面展示，就是服务端是生产者，页面是消费者。相当于是发布，订阅。只是我们使用的是rabbitmq，不能群发，这个问题还没有解决，一个页面展示了，其他页面就展示不了；\n2.日志，解耦，就是业务系统操作日志\n3.触发事件有消息推送时，采用解耦的方式，异步进行消息推送。账单生成，同步到总表，异步的方式同步\n4.关于流量，削峰填谷，面前还没有用到，主要是异步和解耦。后续在和物联网设备交互中，都可以用这个思想，就是比如电表用电数据上报时，上报后就往消息队列里面放，然后消费者消费时候再入库进行处理；在停车识别记录上报的时候，也可以立马先返回，然后放到消息队列，之后在消费者消费异步下发数据处理。","like_count":0},{"had_liked":false,"id":340733,"user_name":"再见理想","can_delete":false,"product_type":"c1","uid":1245999,"ip_address":"","ucode":"FAC88B3F6F6DFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/2f/0a5e0751.jpg","comment_is_top":false,"comment_ctime":1649085599,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":12,"product_id":100032301,"comment_content":"消息队列的用途：\n1，异步处理，提升服务的响应速度，系统的吞吐量。\n2，削峰填谷，短时间内大量请求时，暂存请求，让后端服务从容地处理请求。\n3，服务解耦，其他服务可以通过订阅指定的主题，实现与主服务的通信，而不需要将所有逻辑都耦合在一个服务中。\n缺点：\n1，增加了系统的复杂度。\n2，需要保证消息队列的可用性，否则可能导致整个系统的瘫痪或数据不一致的问题。\n3，增加了一定的数据延迟性，只能保证数据的最终一致性。\n","like_count":0},{"had_liked":false,"id":340204,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1648651983,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":1,"score":13,"product_id":100032301,"comment_content":"学习笔记\n一、消息队列的使用场景\n1. 服务解耦合：具体来说就是复杂系统里，有些核心操作之后的旁路操作，是可以异步操作的，这个可以提升核心链路的稳定性\n2. 流量控制（削峰填谷）：在高并发系统中利用消息队列实现蓄洪和泄洪\n3. 延迟业务：利用消息队列的延迟消息，实现订单不支付自动超时\n\n二、消息队列的引入，有好处也有弊端\n1. 容易出现数据不一致的问题，需要用对账检查\n2. 引入了延迟性，无法保障数据的强一致性","like_count":0},{"had_liked":false,"id":339646,"user_name":"Geek_35b029","can_delete":false,"product_type":"c1","uid":2898194,"ip_address":"","ucode":"731E04AC894197","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM46a0hVtqrnF2SysCnqZEKV2VQia8SLcAVYjb5ibwogoXXoTicjMqKOtzdJib9fq2PAOIfjticqVVibCpR2JvUfKM9pAL/132","comment_is_top":false,"comment_ctime":1648268074,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"想问下，那消息队列 可以应用于高并发的读请求嘛？ 比如说 我有个服务 需要不停的从数据库或者缓存 拿最新的数据， 而并发量过于庞大， 可能数据库或缓存 Hold 不住， 我可以把读请求 放到消息队列里面，然后让数据库或缓存 根据自己的能力去consume message嘛？","like_count":0},{"had_liked":false,"id":336324,"user_name":"未设置","can_delete":false,"product_type":"c1","uid":1201873,"ip_address":"","ucode":"6626A986242126","user_header":"https://static001.geekbang.org/account/avatar/00/12/56/d1/d330c9ac.jpg","comment_is_top":false,"comment_ctime":1646096281,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"提升系统总体的性能这一点深有体会，曾经解决过公司的一个数据堆积问题，之前的交互方式是直接通过接口拉取数据，然后执行业务逻辑，在堆积的数据量特别大的情况下，一直没有解决，后来通过rabbitmq 的方式，拉取数据之后，发送到消息队列中，异步处理，极大提升了性能，比之前的能力提升了几十倍。","like_count":0},{"had_liked":false,"id":335324,"user_name":"程序员俊达","can_delete":false,"product_type":"c1","uid":1107484,"ip_address":"","ucode":"2573037D7C82C8","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/1c/9d3744ee.jpg","comment_is_top":false,"comment_ctime":1645451453,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"我们公司的push系统基于消息队列进行服务的解耦，并且通过消息队列可以达到削峰的作用，因为查用户快，生成文案快，所以可以通过消息队列削峰。还有数据的处理会采用Kafka，进行订阅然后取出消息进行数据的采集整理。还通过消息队列的延迟队列功能，实现相关的功能。但也会遇到一些问题，比如消息的积压，消息发送速率太快服务器承受不住导致消息丢弃，是采用ack方式消费还是异步消费等。","like_count":0},{"had_liked":false,"id":331770,"user_name":"xtepCool","can_delete":false,"product_type":"c1","uid":1543599,"ip_address":"","ucode":"6181687E98524E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","comment_is_top":false,"comment_ctime":1642754971,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"学以致用，MQ在业务中使用：\n1.异步处理。业务场景：\n·接全量MQ异步处理，在消费时根据条件进行过滤；\n·代码优化。在大事务里面存在的几个更新操作，因为数据库事务存在超时的情况，将一些切面的功能，比如生成日志等操作异步处理。将事务强一致性转成最终一致性；\n·将异常单据转入新建的异常MQ主题异步处理，不影响主业务MQ主题的处理。在高并发的情况下，存在消息处理失败而不停的重试，如果失败数据量很大的情况下，很容易将队列数占满使得消息积压导致下游的其他业务MQ处理顺序出现错乱。当然，也可以把所有主业务的异常标记区分好后写入同一个异常MQ里面，异常MQ里面如果重试超时，需要结合ES或clickhouse进行存储记录，防止数据丢失；\n2.流量控制   ","like_count":0},{"had_liked":false,"id":331766,"user_name":"xtepCool","can_delete":false,"product_type":"c1","uid":1543599,"ip_address":"","ucode":"6181687E98524E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","comment_is_top":false,"comment_ctime":1642753790,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"学以致用，MQ在当前业务的使用：","like_count":0},{"had_liked":false,"id":331765,"user_name":"xtepCool","can_delete":false,"product_type":"c1","uid":1543599,"ip_address":"","ucode":"6181687E98524E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","comment_is_top":false,"comment_ctime":1642753764,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"学以致用，消息队列在当前业务的使用：","like_count":0},{"had_liked":false,"id":331282,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1642515899,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"异步处理，流量控制，服务解藕","like_count":0},{"had_liked":false,"id":326404,"user_name":"lany66","can_delete":false,"product_type":"c1","uid":1446987,"ip_address":"","ucode":"EEF95BA9076AB4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdzXiawss5gGq1iaXGEECyKUFthSIOKA0cLtuYDUlvjTjkJgtjODJVOvleEENnmms98qAPNUpic3UicA/132","comment_is_top":false,"comment_ctime":1639497615,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"Ci构建引用的mq,但是如果mq不能够高可用，会导致它所依赖的服务出现好多问题 不可用，请教老师怎样才能保证mq得高可用，谢谢","like_count":0},{"had_liked":false,"id":302602,"user_name":"Geek_926921","can_delete":false,"product_type":"c1","uid":2532285,"ip_address":"","ucode":"51C3B0178D77E1","user_header":"","comment_is_top":false,"comment_ctime":1626277053,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"自己的项目中消息队列没有用在令牌桶，并发并不高主要，用在了当会员成功注册时，会用MQ通知其他服务，例如通知服务会进行短信发送提醒，推送服务会把会员推送给集团内的其他部门，还有一个地方就是服务数据的状态变更通知，然后这里由于消费方进行了加锁，因此当时是有的消息不能消费成功，这个时候就再次封装了一次，虽然有点坑，但是最终保证了消费成功，但是没有保证事务一致性。","like_count":0},{"had_liked":false,"id":340204,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1648651983,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":1,"score":13,"product_id":100032301,"comment_content":"学习笔记\n一、消息队列的使用场景\n1. 服务解耦合：具体来说就是复杂系统里，有些核心操作之后的旁路操作，是可以异步操作的，这个可以提升核心链路的稳定性\n2. 流量控制（削峰填谷）：在高并发系统中利用消息队列实现蓄洪和泄洪\n3. 延迟业务：利用消息队列的延迟消息，实现订单不支付自动超时\n\n二、消息队列的引入，有好处也有弊端\n1. 容易出现数据不一致的问题，需要用对账检查\n2. 引入了延迟性，无法保障数据的强一致性","like_count":0},{"had_liked":false,"id":339646,"user_name":"Geek_35b029","can_delete":false,"product_type":"c1","uid":2898194,"ip_address":"","ucode":"731E04AC894197","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM46a0hVtqrnF2SysCnqZEKV2VQia8SLcAVYjb5ibwogoXXoTicjMqKOtzdJib9fq2PAOIfjticqVVibCpR2JvUfKM9pAL/132","comment_is_top":false,"comment_ctime":1648268074,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"想问下，那消息队列 可以应用于高并发的读请求嘛？ 比如说 我有个服务 需要不停的从数据库或者缓存 拿最新的数据， 而并发量过于庞大， 可能数据库或缓存 Hold 不住， 我可以把读请求 放到消息队列里面，然后让数据库或缓存 根据自己的能力去consume message嘛？","like_count":0},{"had_liked":false,"id":336324,"user_name":"未设置","can_delete":false,"product_type":"c1","uid":1201873,"ip_address":"","ucode":"6626A986242126","user_header":"https://static001.geekbang.org/account/avatar/00/12/56/d1/d330c9ac.jpg","comment_is_top":false,"comment_ctime":1646096281,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"提升系统总体的性能这一点深有体会，曾经解决过公司的一个数据堆积问题，之前的交互方式是直接通过接口拉取数据，然后执行业务逻辑，在堆积的数据量特别大的情况下，一直没有解决，后来通过rabbitmq 的方式，拉取数据之后，发送到消息队列中，异步处理，极大提升了性能，比之前的能力提升了几十倍。","like_count":0},{"had_liked":false,"id":335324,"user_name":"程序员俊达","can_delete":false,"product_type":"c1","uid":1107484,"ip_address":"","ucode":"2573037D7C82C8","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/1c/9d3744ee.jpg","comment_is_top":false,"comment_ctime":1645451453,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"我们公司的push系统基于消息队列进行服务的解耦，并且通过消息队列可以达到削峰的作用，因为查用户快，生成文案快，所以可以通过消息队列削峰。还有数据的处理会采用Kafka，进行订阅然后取出消息进行数据的采集整理。还通过消息队列的延迟队列功能，实现相关的功能。但也会遇到一些问题，比如消息的积压，消息发送速率太快服务器承受不住导致消息丢弃，是采用ack方式消费还是异步消费等。","like_count":0},{"had_liked":false,"id":331770,"user_name":"xtepCool","can_delete":false,"product_type":"c1","uid":1543599,"ip_address":"","ucode":"6181687E98524E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","comment_is_top":false,"comment_ctime":1642754971,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"学以致用，MQ在业务中使用：\n1.异步处理。业务场景：\n·接全量MQ异步处理，在消费时根据条件进行过滤；\n·代码优化。在大事务里面存在的几个更新操作，因为数据库事务存在超时的情况，将一些切面的功能，比如生成日志等操作异步处理。将事务强一致性转成最终一致性；\n·将异常单据转入新建的异常MQ主题异步处理，不影响主业务MQ主题的处理。在高并发的情况下，存在消息处理失败而不停的重试，如果失败数据量很大的情况下，很容易将队列数占满使得消息积压导致下游的其他业务MQ处理顺序出现错乱。当然，也可以把所有主业务的异常标记区分好后写入同一个异常MQ里面，异常MQ里面如果重试超时，需要结合ES或clickhouse进行存储记录，防止数据丢失；\n2.流量控制   ","like_count":0},{"had_liked":false,"id":331766,"user_name":"xtepCool","can_delete":false,"product_type":"c1","uid":1543599,"ip_address":"","ucode":"6181687E98524E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","comment_is_top":false,"comment_ctime":1642753790,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"学以致用，MQ在当前业务的使用：","like_count":0},{"had_liked":false,"id":331765,"user_name":"xtepCool","can_delete":false,"product_type":"c1","uid":1543599,"ip_address":"","ucode":"6181687E98524E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","comment_is_top":false,"comment_ctime":1642753764,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"学以致用，消息队列在当前业务的使用：","like_count":0},{"had_liked":false,"id":331282,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1642515899,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"异步处理，流量控制，服务解藕","like_count":0},{"had_liked":false,"id":326404,"user_name":"lany66","can_delete":false,"product_type":"c1","uid":1446987,"ip_address":"","ucode":"EEF95BA9076AB4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdzXiawss5gGq1iaXGEECyKUFthSIOKA0cLtuYDUlvjTjkJgtjODJVOvleEENnmms98qAPNUpic3UicA/132","comment_is_top":false,"comment_ctime":1639497615,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"Ci构建引用的mq,但是如果mq不能够高可用，会导致它所依赖的服务出现好多问题 不可用，请教老师怎样才能保证mq得高可用，谢谢","like_count":0},{"had_liked":false,"id":302602,"user_name":"Geek_926921","can_delete":false,"product_type":"c1","uid":2532285,"ip_address":"","ucode":"51C3B0178D77E1","user_header":"","comment_is_top":false,"comment_ctime":1626277053,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":13,"product_id":100032301,"comment_content":"自己的项目中消息队列没有用在令牌桶，并发并不高主要，用在了当会员成功注册时，会用MQ通知其他服务，例如通知服务会进行短信发送提醒，推送服务会把会员推送给集团内的其他部门，还有一个地方就是服务数据的状态变更通知，然后这里由于消费方进行了加锁，因此当时是有的消息不能消费成功，这个时候就再次封装了一次，虽然有点坑，但是最终保证了消费成功，但是没有保证事务一致性。","like_count":0},{"had_liked":false,"id":300541,"user_name":"Geek_99ae14","can_delete":false,"product_type":"c1","uid":1909732,"ip_address":"","ucode":"268852986A6B69","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLY0FFoux40Negib6LrE7EwT3T2BUbpYzOzUeiaiaXBmNGDGVgIZr5NeWBTEeCuALOg3ODtWa21bHMgg/132","comment_is_top":false,"comment_ctime":1625212688,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"加解密使用消息队列","like_count":0},{"had_liked":false,"id":296343,"user_name":"Ac、","can_delete":false,"product_type":"c1","uid":1610575,"ip_address":"","ucode":"7E7A8458372F33","user_header":"https://static001.geekbang.org/account/avatar/00/18/93/4f/61edeea6.jpg","comment_is_top":false,"comment_ctime":1622906432,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"老师请教一个实现问题，在下游的消费端获取消息的方式，都是通过定时任务轮询读取的吗？业界的做法是怎么样的，可以介绍下？谢谢","like_count":0},{"had_liked":false,"id":294826,"user_name":"Wheat Liu","can_delete":false,"product_type":"c1","uid":1260141,"ip_address":"","ucode":"7D99EA149B6DE8","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/6d/8b417c84.jpg","comment_is_top":false,"comment_ctime":1622103201,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"其实mq给我的感觉还是“削峰填谷”占主要作用。在服务解耦方面是不是并不突出，上游系统在交付时都会提供一个返回完整数据的接口，下游系统调用之后按需取字段，就算下游系统越来越多，上游系统也用不着为每个系统都暴露一个完全合适的接口吧？如果是考虑到冗余字段占带宽，那mq也不能完全解决吧","like_count":0},{"had_liked":false,"id":290766,"user_name":"jollyja","can_delete":false,"product_type":"c1","uid":1135559,"ip_address":"","ucode":"A043610F72CA41","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/c7/d8d84824.jpg","comment_is_top":false,"comment_ctime":1619746060,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"老师你好，咨询一个场景是否可以使用消息队列实现，如果可以，采用哪个消息队列产品及产品特性来实现比较合适：\n【场景描述】\nServiceSubscribeA订阅Message(ID=1)，线程阻塞（超时则抛异常）直到收到ID=1的Message（只收指定ID的消息）；\nServiceSubscribeB订阅Message(ID=2)，线程阻塞（超时则抛异常）直到收到ID=2的Message（只收指定ID的消息）；\nServicePublisher发布Message，ID=1、ID=2、。。。\nsubscribe和publish，无先后关系；\nsubscribe并发数要求高，可能同时几千个线程（不同jvm实例）做subscribe；\nsubscribe处理时效要求高，不考虑publish耗时的话，从subscribe开始到收到消息的耗时为毫秒级；","like_count":0},{"had_liked":false,"id":289575,"user_name":"Tom","can_delete":false,"product_type":"c1","uid":1908926,"ip_address":"","ucode":"0BA98E780BB34C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/20/be/bf6a570f.jpg","comment_is_top":false,"comment_ctime":1619086357,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"老师您好，想请教您一个rocketMq问题：我们公司rocketMq集群是按照部门划分的，目前有这样一个业务场景，我是唯一的消费者，会消费来自多个部门的消息，这种情况下有两个方案：(1)我申请统一的topic，他们关联不同的producer;(2)每个部门都申请各自的topic，我消费他们的消息。请问这两种方案各有什么优缺点？哪种方案更合适？","like_count":0},{"had_liked":false,"id":289112,"user_name":"Teanmy","can_delete":false,"product_type":"c1","uid":1209599,"ip_address":"","ucode":"89F466CC698583","user_header":"","comment_is_top":false,"comment_ctime":1618880298,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"在令牌桶的令牌生成策略上，会存在如果令牌耗光，在生成新令牌的间隔期进来的request被丢弃，而后进来的反而拿到令牌，这样秒杀就不是公平秒杀类。并且令牌匀速生成，这个生成速度怎么测算？对秒杀系统后端服务进行性能测算得到Full load情况下每个请求的平均响应时间，然后再以这个时间为参考设定令牌的生成间隔？请老师帮忙解答，谢谢！","like_count":0},{"had_liked":false,"id":284592,"user_name":"LQS  KF","can_delete":false,"product_type":"c1","uid":1364737,"ip_address":"","ucode":"3C0A07A8220094","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/01/716d45b6.jpg","comment_is_top":false,"comment_ctime":1616378342,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"遇到过的场景：\n1. 跨主机异步任务(日志，服务调用)，目的为了解耦和提升性能。\n2. 流控，防止大流量对下游服务进行冲击。\n带来的问题：\n1. 编程复杂度上升，不同的消息队列不能很好的对接，spring cloud stream 抽象可以解决这个问题。\n2. 消息队列产生的一致性问题。\n","like_count":0},{"had_liked":false,"id":277616,"user_name":"butterfly","can_delete":false,"product_type":"c1","uid":1392924,"ip_address":"","ucode":"1B724973303FB0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rRCSdTPyqWcW6U8DO9xL55ictNPlbQ38VAcaBNgibqaAhcH7mn1W9ddxIJLlMiaA5sngBicMX02w2HP5pAWpBAJsag/132","comment_is_top":false,"comment_ctime":1612492270,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"秒杀系统的网关和其他系统的网关是要隔离开来的吗？","like_count":0},{"had_liked":false,"id":277472,"user_name":"T","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1612425633,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"引入消息队列后，订单服务在订单变化时发送一条消息到消息队列的一个主题 Order 中，所有下游系统都订阅主题 Order，这样每个下游系统都可以获得一份实时完整的订单数据。\n在定义接口的时候就把整个订单数据放在响应数据里面，这样也不用去修改接口了？","like_count":0},{"had_liked":false,"id":274285,"user_name":"且听风吟","can_delete":false,"product_type":"c1","uid":2291112,"ip_address":"","ucode":"D7E37D0C3CE45D","user_header":"https://static001.geekbang.org/account/avatar/00/22/f5/a8/f10d2446.jpg","comment_is_top":false,"comment_ctime":1610955391,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"消息队列的利弊取决于如何正确使用，我不知道自己能不能正确使用，需要好好学习","like_count":0},{"had_liked":false,"id":300541,"user_name":"Geek_99ae14","can_delete":false,"product_type":"c1","uid":1909732,"ip_address":"","ucode":"268852986A6B69","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLY0FFoux40Negib6LrE7EwT3T2BUbpYzOzUeiaiaXBmNGDGVgIZr5NeWBTEeCuALOg3ODtWa21bHMgg/132","comment_is_top":false,"comment_ctime":1625212688,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"加解密使用消息队列","like_count":0},{"had_liked":false,"id":296343,"user_name":"Ac、","can_delete":false,"product_type":"c1","uid":1610575,"ip_address":"","ucode":"7E7A8458372F33","user_header":"https://static001.geekbang.org/account/avatar/00/18/93/4f/61edeea6.jpg","comment_is_top":false,"comment_ctime":1622906432,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"老师请教一个实现问题，在下游的消费端获取消息的方式，都是通过定时任务轮询读取的吗？业界的做法是怎么样的，可以介绍下？谢谢","like_count":0},{"had_liked":false,"id":294826,"user_name":"Wheat Liu","can_delete":false,"product_type":"c1","uid":1260141,"ip_address":"","ucode":"7D99EA149B6DE8","user_header":"https://static001.geekbang.org/account/avatar/00/13/3a/6d/8b417c84.jpg","comment_is_top":false,"comment_ctime":1622103201,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"其实mq给我的感觉还是“削峰填谷”占主要作用。在服务解耦方面是不是并不突出，上游系统在交付时都会提供一个返回完整数据的接口，下游系统调用之后按需取字段，就算下游系统越来越多，上游系统也用不着为每个系统都暴露一个完全合适的接口吧？如果是考虑到冗余字段占带宽，那mq也不能完全解决吧","like_count":0},{"had_liked":false,"id":290766,"user_name":"jollyja","can_delete":false,"product_type":"c1","uid":1135559,"ip_address":"","ucode":"A043610F72CA41","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/c7/d8d84824.jpg","comment_is_top":false,"comment_ctime":1619746060,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"老师你好，咨询一个场景是否可以使用消息队列实现，如果可以，采用哪个消息队列产品及产品特性来实现比较合适：\n【场景描述】\nServiceSubscribeA订阅Message(ID=1)，线程阻塞（超时则抛异常）直到收到ID=1的Message（只收指定ID的消息）；\nServiceSubscribeB订阅Message(ID=2)，线程阻塞（超时则抛异常）直到收到ID=2的Message（只收指定ID的消息）；\nServicePublisher发布Message，ID=1、ID=2、。。。\nsubscribe和publish，无先后关系；\nsubscribe并发数要求高，可能同时几千个线程（不同jvm实例）做subscribe；\nsubscribe处理时效要求高，不考虑publish耗时的话，从subscribe开始到收到消息的耗时为毫秒级；","like_count":0},{"had_liked":false,"id":289575,"user_name":"Tom","can_delete":false,"product_type":"c1","uid":1908926,"ip_address":"","ucode":"0BA98E780BB34C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/20/be/bf6a570f.jpg","comment_is_top":false,"comment_ctime":1619086357,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"老师您好，想请教您一个rocketMq问题：我们公司rocketMq集群是按照部门划分的，目前有这样一个业务场景，我是唯一的消费者，会消费来自多个部门的消息，这种情况下有两个方案：(1)我申请统一的topic，他们关联不同的producer;(2)每个部门都申请各自的topic，我消费他们的消息。请问这两种方案各有什么优缺点？哪种方案更合适？","like_count":0},{"had_liked":false,"id":289112,"user_name":"Teanmy","can_delete":false,"product_type":"c1","uid":1209599,"ip_address":"","ucode":"89F466CC698583","user_header":"","comment_is_top":false,"comment_ctime":1618880298,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"在令牌桶的令牌生成策略上，会存在如果令牌耗光，在生成新令牌的间隔期进来的request被丢弃，而后进来的反而拿到令牌，这样秒杀就不是公平秒杀类。并且令牌匀速生成，这个生成速度怎么测算？对秒杀系统后端服务进行性能测算得到Full load情况下每个请求的平均响应时间，然后再以这个时间为参考设定令牌的生成间隔？请老师帮忙解答，谢谢！","like_count":0},{"had_liked":false,"id":284592,"user_name":"LQS  KF","can_delete":false,"product_type":"c1","uid":1364737,"ip_address":"","ucode":"3C0A07A8220094","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/01/716d45b6.jpg","comment_is_top":false,"comment_ctime":1616378342,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"遇到过的场景：\n1. 跨主机异步任务(日志，服务调用)，目的为了解耦和提升性能。\n2. 流控，防止大流量对下游服务进行冲击。\n带来的问题：\n1. 编程复杂度上升，不同的消息队列不能很好的对接，spring cloud stream 抽象可以解决这个问题。\n2. 消息队列产生的一致性问题。\n","like_count":0},{"had_liked":false,"id":277616,"user_name":"butterfly","can_delete":false,"product_type":"c1","uid":1392924,"ip_address":"","ucode":"1B724973303FB0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rRCSdTPyqWcW6U8DO9xL55ictNPlbQ38VAcaBNgibqaAhcH7mn1W9ddxIJLlMiaA5sngBicMX02w2HP5pAWpBAJsag/132","comment_is_top":false,"comment_ctime":1612492270,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"秒杀系统的网关和其他系统的网关是要隔离开来的吗？","like_count":0},{"had_liked":false,"id":277472,"user_name":"T","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1612425633,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"引入消息队列后，订单服务在订单变化时发送一条消息到消息队列的一个主题 Order 中，所有下游系统都订阅主题 Order，这样每个下游系统都可以获得一份实时完整的订单数据。\n在定义接口的时候就把整个订单数据放在响应数据里面，这样也不用去修改接口了？","like_count":0},{"had_liked":false,"id":274285,"user_name":"且听风吟","can_delete":false,"product_type":"c1","uid":2291112,"ip_address":"","ucode":"D7E37D0C3CE45D","user_header":"https://static001.geekbang.org/account/avatar/00/22/f5/a8/f10d2446.jpg","comment_is_top":false,"comment_ctime":1610955391,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":14,"product_id":100032301,"comment_content":"消息队列的利弊取决于如何正确使用，我不知道自己能不能正确使用，需要好好学习","like_count":0},{"had_liked":false,"id":268620,"user_name":"keep_it_real","can_delete":false,"product_type":"c1","uid":2055554,"ip_address":"","ucode":"F5057CAF752FF3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","comment_is_top":false,"comment_ctime":1608274893,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"场景不同我平时项目中kafka用的比较多，kafka顺序读写的特性可以保证低成本达到高性能，还有它的负载均衡和故障转移也做得很好。","like_count":0},{"had_liked":false,"id":257415,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1603964025,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"老师读完这篇文章之后，觉得您再说，订单系统那块通过消息队列 和下游系统解耦的时候，消息队列这只是做了一个类似于消息广播和数据分发的功能。并没有完全解耦，比如下游的系统需要订单系统新增一个接口，这样不是还是需要，订单系统修改接口，重新上线吗？","like_count":0},{"had_liked":false,"id":242792,"user_name":"爱学习的小迪","can_delete":false,"product_type":"c1","uid":1448126,"ip_address":"","ucode":"EB1CB5EA4E3A90","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/be/aa622bf8.jpg","comment_is_top":false,"comment_ctime":1597842609,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"最近在做一个功能，是一个消息推送系统，包括业务内站内信的推送，App的推送消息，发送短信等功能都是基于消息队列来处理了。对应到老师的异步处理，并且不需要监听回调。","like_count":0},{"had_liked":false,"id":242722,"user_name":"robin","can_delete":false,"product_type":"c1","uid":2070605,"ip_address":"","ucode":"F6781BD9AE50D7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsOFgxUeol70AodxHp7XuWobWKibpRXf8I3B9GkvfoTmUcdxpH0tpA8hoMCGnb9HxEy11QalviafDg/132","comment_is_top":false,"comment_ctime":1597823865,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"老师好，我之前接触过一个项目，是单体应用。有个场景是：提交一个信息后，需要入库、发送短信、调一个大数据系统的接口发送这个信息。\n这个场景是不是就可以使用 RokcetMQ 呢？新建一个 Topic，然后设置一个提交信息的tag，创建三个消费者监听Topic下的这个tag，提交信息后直接返回成功，然后这三个消费者分别进行后续的操作。\n这样就相当于解耦了吧。","like_count":0},{"had_liked":false,"id":231341,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1593654818,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"我们很典型的服务，账户充值和积分系统，用了rocketmq，带来的问题就是需要考虑消息丢失和重复消费的问题。","like_count":0},{"had_liked":false,"id":215243,"user_name":"oops","can_delete":false,"product_type":"c1","uid":1102831,"ip_address":"","ucode":"1DEC23A503F8A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/ef/9c5e695b.jpg","comment_is_top":false,"comment_ctime":1588939511,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"项目主要作用是业务解耦\n订单支付成功后发送mq消息；积分，授权，交付等业务系统监听处理相应后续业务","like_count":0},{"had_liked":false,"id":210845,"user_name":"迷雾水珠🌸","can_delete":false,"product_type":"c1","uid":1312004,"ip_address":"","ucode":"BF96FD59FB8E2F","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/04/4affb5f4.jpg","comment_is_top":false,"comment_ctime":1587836364,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"李老师好，想跟您请教一个问题：\n      如果接口A被大量调用，且A接口中又需要调用下游的B接口，业务要求是：A接口必须成功处理每一个请求（不能拒绝任何一个），怎样保证每个请求能被成功处理，并且下游的接口也不会崩溃？","like_count":0},{"had_liked":false,"id":196497,"user_name":"你当像鸟飞往你的山","can_delete":false,"product_type":"c1","uid":1116363,"ip_address":"","ucode":"7F63B307D7B92D","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/cb/5a0690cb.jpg","comment_is_top":false,"comment_ctime":1585286476,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"我们系统中mq主要用来做异步处理，增加服务间单程相应效率。服务解偶可以应用在项目中，目前一个topic只有一个消费者，没有把topic做一个比较合适的抽象。","like_count":0},{"had_liked":false,"id":189850,"user_name":"凌空飞起的剪刀腿","can_delete":false,"product_type":"c1","uid":1243680,"ip_address":"","ucode":"16FBBF4A3B54C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/20/0f06b080.jpg","comment_is_top":false,"comment_ctime":1584577244,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"李老师您好，我想知道你这个网关具体指的什么?","like_count":0},{"had_liked":false,"id":188846,"user_name":"💢 星星💢","can_delete":false,"product_type":"c1","uid":1254392,"ip_address":"","ucode":"A402B765222C35","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/f8/24fcccea.jpg","comment_is_top":false,"comment_ctime":1584425524,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"开始学习这门课程，给自己立个flag。\n没进过大厂，但是有颗想进大厂的心。我要认真学完这们课。","like_count":0},{"had_liked":false,"id":268620,"user_name":"keep_it_real","can_delete":false,"product_type":"c1","uid":2055554,"ip_address":"","ucode":"F5057CAF752FF3","user_header":"https://static001.geekbang.org/account/avatar/00/1f/5d/82/81b2ba91.jpg","comment_is_top":false,"comment_ctime":1608274893,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"场景不同我平时项目中kafka用的比较多，kafka顺序读写的特性可以保证低成本达到高性能，还有它的负载均衡和故障转移也做得很好。","like_count":0},{"had_liked":false,"id":257415,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1603964025,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"老师读完这篇文章之后，觉得您再说，订单系统那块通过消息队列 和下游系统解耦的时候，消息队列这只是做了一个类似于消息广播和数据分发的功能。并没有完全解耦，比如下游的系统需要订单系统新增一个接口，这样不是还是需要，订单系统修改接口，重新上线吗？","like_count":0},{"had_liked":false,"id":242792,"user_name":"爱学习的小迪","can_delete":false,"product_type":"c1","uid":1448126,"ip_address":"","ucode":"EB1CB5EA4E3A90","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/be/aa622bf8.jpg","comment_is_top":false,"comment_ctime":1597842609,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"最近在做一个功能，是一个消息推送系统，包括业务内站内信的推送，App的推送消息，发送短信等功能都是基于消息队列来处理了。对应到老师的异步处理，并且不需要监听回调。","like_count":0},{"had_liked":false,"id":242722,"user_name":"robin","can_delete":false,"product_type":"c1","uid":2070605,"ip_address":"","ucode":"F6781BD9AE50D7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsOFgxUeol70AodxHp7XuWobWKibpRXf8I3B9GkvfoTmUcdxpH0tpA8hoMCGnb9HxEy11QalviafDg/132","comment_is_top":false,"comment_ctime":1597823865,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"老师好，我之前接触过一个项目，是单体应用。有个场景是：提交一个信息后，需要入库、发送短信、调一个大数据系统的接口发送这个信息。\n这个场景是不是就可以使用 RokcetMQ 呢？新建一个 Topic，然后设置一个提交信息的tag，创建三个消费者监听Topic下的这个tag，提交信息后直接返回成功，然后这三个消费者分别进行后续的操作。\n这样就相当于解耦了吧。","like_count":0},{"had_liked":false,"id":231341,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1593654818,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"我们很典型的服务，账户充值和积分系统，用了rocketmq，带来的问题就是需要考虑消息丢失和重复消费的问题。","like_count":0},{"had_liked":false,"id":215243,"user_name":"oops","can_delete":false,"product_type":"c1","uid":1102831,"ip_address":"","ucode":"1DEC23A503F8A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/d3/ef/9c5e695b.jpg","comment_is_top":false,"comment_ctime":1588939511,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"项目主要作用是业务解耦\n订单支付成功后发送mq消息；积分，授权，交付等业务系统监听处理相应后续业务","like_count":0},{"had_liked":false,"id":210845,"user_name":"迷雾水珠🌸","can_delete":false,"product_type":"c1","uid":1312004,"ip_address":"","ucode":"BF96FD59FB8E2F","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/04/4affb5f4.jpg","comment_is_top":false,"comment_ctime":1587836364,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"李老师好，想跟您请教一个问题：\n      如果接口A被大量调用，且A接口中又需要调用下游的B接口，业务要求是：A接口必须成功处理每一个请求（不能拒绝任何一个），怎样保证每个请求能被成功处理，并且下游的接口也不会崩溃？","like_count":0},{"had_liked":false,"id":196497,"user_name":"你当像鸟飞往你的山","can_delete":false,"product_type":"c1","uid":1116363,"ip_address":"","ucode":"7F63B307D7B92D","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/cb/5a0690cb.jpg","comment_is_top":false,"comment_ctime":1585286476,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"我们系统中mq主要用来做异步处理，增加服务间单程相应效率。服务解偶可以应用在项目中，目前一个topic只有一个消费者，没有把topic做一个比较合适的抽象。","like_count":0},{"had_liked":false,"id":189850,"user_name":"凌空飞起的剪刀腿","can_delete":false,"product_type":"c1","uid":1243680,"ip_address":"","ucode":"16FBBF4A3B54C6","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/20/0f06b080.jpg","comment_is_top":false,"comment_ctime":1584577244,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"李老师您好，我想知道你这个网关具体指的什么?","like_count":0},{"had_liked":false,"id":188846,"user_name":"💢 星星💢","can_delete":false,"product_type":"c1","uid":1254392,"ip_address":"","ucode":"A402B765222C35","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/f8/24fcccea.jpg","comment_is_top":false,"comment_ctime":1584425524,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":15,"product_id":100032301,"comment_content":"开始学习这门课程，给自己立个flag。\n没进过大厂，但是有颗想进大厂的心。我要认真学完这们课。","like_count":0},{"had_liked":false,"id":186178,"user_name":"嘲风","can_delete":false,"product_type":"c1","uid":1811143,"ip_address":"","ucode":"B70DF17B3A4692","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a2/c7/0b2ed143.jpg","comment_is_top":false,"comment_ctime":1583771641,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"谈一下消息队列和多线程。如果不考虑业务逻辑解耦，且生产者和消费者部署在同一台机器上，用多线程异步。","like_count":0},{"had_liked":false,"id":175155,"user_name":"进击的小明","can_delete":false,"product_type":"c1","uid":1737846,"ip_address":"","ucode":"7C9A774C504177","user_header":"https://static001.geekbang.org/account/avatar/00/1a/84/76/6091523d.jpg","comment_is_top":false,"comment_ctime":1580574101,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"工作中遇到的一个同步的问题用到了本讲中 异步的场景：\n我们的系统中会有一个上架应用的操作，完成后需要让客户端知道有应用更新，进而让客户端主动再做一次拉取最新的应用数据。由于这个过程比较慢，所以用了异步，使用的是kafka。\n这节课学到了挺多 之前对消息队列的理解仅限于使用，后面继续努力学习！","like_count":0},{"had_liked":false,"id":172206,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1579133114,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"服务通信有异步和同步两种。\n异步通信是mq的天下。","like_count":0},{"had_liked":false,"id":172205,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1579132938,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"功能\n\n异步带来解藕，生产者和消费者不需要知道对方的存在。\n流量控制，将请求放入队列。或者使用令牌桶算法，单位时间往队列存放相同数量的令牌，请求求到达时要先获取令牌，获取不到则将请求丢弃。\n\n应用\n\n微服务之间形成观察者模式\n连接流计算和数据\n将消息广播\n\n弊端\n\n增大系统延迟与复杂度\n数据不一致的可能性增大\n","like_count":0},{"had_liked":false,"id":171719,"user_name":"Geek_cjpi71","can_delete":false,"product_type":"c1","uid":1754668,"ip_address":"","ucode":"F2AFB6F6A42FAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLeXjFHy8wGyrDnm6ib7hjZNjocUHarn0XFc8zLc061Ax99bFmrLN9yAxicklpcjKFx2gHqUKWQ3MRw/132","comment_is_top":false,"comment_ctime":1578997182,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"感谢 已经学完第一讲 打算先把基础看完","like_count":0},{"had_liked":false,"id":170790,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1578719668,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"消息队列的作用本质上就是作为系统之间通信的消息暂存地，而具体的作用在于\n1. 异步处理（利用写入吞吐延时低，消息持久化的能力）\n2. 流量控制 （主要靠消息持久化的能力）\n3. 服务解耦 （生产消费的中间层，生产只需管生产消息，消费只需要管消费消息，消息本身的格式是一种统一的约定）\n","like_count":0},{"had_liked":false,"id":154906,"user_name":"大继","can_delete":false,"product_type":"c1","uid":1274500,"ip_address":"","ucode":"9A27E97F134C73","user_header":"https://static001.geekbang.org/account/avatar/00/13/72/84/3f116ac8.jpg","comment_is_top":false,"comment_ctime":1574595379,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"我设计过一个减少，事务的方法， 用批处理，减少事务。没记错可以单机好几万。","like_count":0},{"had_liked":false,"id":143318,"user_name":"xfan","can_delete":false,"product_type":"c1","uid":1315147,"ip_address":"","ucode":"48ED8D498D7F56","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","comment_is_top":false,"comment_ctime":1571667594,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"在工作当中，我实现了一个node 事件处理器，刚开始是调度器直接发消息给 事件处理器，后来更改架构为发送给消息队列，所有的node 监听消息队列，这样带来的好处是解耦了两者之间的必然联系，增加了系统吞吐量，降低了复杂度。带来的坏处，无","like_count":0},{"had_liked":false,"id":132317,"user_name":"Shen","can_delete":false,"product_type":"c1","uid":1182167,"ip_address":"","ucode":"CFF7609A754392","user_header":"https://static001.geekbang.org/account/avatar/00/12/09/d7/ffe7b0bf.jpg","comment_is_top":false,"comment_ctime":1568083148,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"公司内部多条业务线都会对接交易系统的收单、代收、代付等支付功能。\n业务系统调用交易系统之后，不会以同步返回的结果为准吗，而是都需要监听交易系统的异步通知，以前是msp现在是jmq。","like_count":0},{"had_liked":false,"id":127140,"user_name":"演","can_delete":false,"product_type":"c1","uid":1207869,"ip_address":"","ucode":"D2130DF72E2352","user_header":"https://static001.geekbang.org/account/avatar/00/12/6e/3d/f88891e3.jpg","comment_is_top":false,"comment_ctime":1566568439,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"老师，线程池、数据库连接池是不是有没有用到消息队列呢？","like_count":0},{"had_liked":false,"id":186178,"user_name":"嘲风","can_delete":false,"product_type":"c1","uid":1811143,"ip_address":"","ucode":"B70DF17B3A4692","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a2/c7/0b2ed143.jpg","comment_is_top":false,"comment_ctime":1583771641,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"谈一下消息队列和多线程。如果不考虑业务逻辑解耦，且生产者和消费者部署在同一台机器上，用多线程异步。","like_count":0},{"had_liked":false,"id":175155,"user_name":"进击的小明","can_delete":false,"product_type":"c1","uid":1737846,"ip_address":"","ucode":"7C9A774C504177","user_header":"https://static001.geekbang.org/account/avatar/00/1a/84/76/6091523d.jpg","comment_is_top":false,"comment_ctime":1580574101,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"工作中遇到的一个同步的问题用到了本讲中 异步的场景：\n我们的系统中会有一个上架应用的操作，完成后需要让客户端知道有应用更新，进而让客户端主动再做一次拉取最新的应用数据。由于这个过程比较慢，所以用了异步，使用的是kafka。\n这节课学到了挺多 之前对消息队列的理解仅限于使用，后面继续努力学习！","like_count":0},{"had_liked":false,"id":172206,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1579133114,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"服务通信有异步和同步两种。\n异步通信是mq的天下。","like_count":0},{"had_liked":false,"id":172205,"user_name":"业余爱好者","can_delete":false,"product_type":"c1","uid":1482915,"ip_address":"","ucode":"A890935A982988","user_header":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","comment_is_top":false,"comment_ctime":1579132938,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"功能\n\n异步带来解藕，生产者和消费者不需要知道对方的存在。\n流量控制，将请求放入队列。或者使用令牌桶算法，单位时间往队列存放相同数量的令牌，请求求到达时要先获取令牌，获取不到则将请求丢弃。\n\n应用\n\n微服务之间形成观察者模式\n连接流计算和数据\n将消息广播\n\n弊端\n\n增大系统延迟与复杂度\n数据不一致的可能性增大\n","like_count":0},{"had_liked":false,"id":171719,"user_name":"Geek_cjpi71","can_delete":false,"product_type":"c1","uid":1754668,"ip_address":"","ucode":"F2AFB6F6A42FAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLeXjFHy8wGyrDnm6ib7hjZNjocUHarn0XFc8zLc061Ax99bFmrLN9yAxicklpcjKFx2gHqUKWQ3MRw/132","comment_is_top":false,"comment_ctime":1578997182,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"感谢 已经学完第一讲 打算先把基础看完","like_count":0},{"had_liked":false,"id":170790,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1578719668,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"消息队列的作用本质上就是作为系统之间通信的消息暂存地，而具体的作用在于\n1. 异步处理（利用写入吞吐延时低，消息持久化的能力）\n2. 流量控制 （主要靠消息持久化的能力）\n3. 服务解耦 （生产消费的中间层，生产只需管生产消息，消费只需要管消费消息，消息本身的格式是一种统一的约定）\n","like_count":0},{"had_liked":false,"id":154906,"user_name":"大继","can_delete":false,"product_type":"c1","uid":1274500,"ip_address":"","ucode":"9A27E97F134C73","user_header":"https://static001.geekbang.org/account/avatar/00/13/72/84/3f116ac8.jpg","comment_is_top":false,"comment_ctime":1574595379,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"我设计过一个减少，事务的方法， 用批处理，减少事务。没记错可以单机好几万。","like_count":0},{"had_liked":false,"id":143318,"user_name":"xfan","can_delete":false,"product_type":"c1","uid":1315147,"ip_address":"","ucode":"48ED8D498D7F56","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","comment_is_top":false,"comment_ctime":1571667594,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"在工作当中，我实现了一个node 事件处理器，刚开始是调度器直接发消息给 事件处理器，后来更改架构为发送给消息队列，所有的node 监听消息队列，这样带来的好处是解耦了两者之间的必然联系，增加了系统吞吐量，降低了复杂度。带来的坏处，无","like_count":0},{"had_liked":false,"id":132317,"user_name":"Shen","can_delete":false,"product_type":"c1","uid":1182167,"ip_address":"","ucode":"CFF7609A754392","user_header":"https://static001.geekbang.org/account/avatar/00/12/09/d7/ffe7b0bf.jpg","comment_is_top":false,"comment_ctime":1568083148,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"公司内部多条业务线都会对接交易系统的收单、代收、代付等支付功能。\n业务系统调用交易系统之后，不会以同步返回的结果为准吗，而是都需要监听交易系统的异步通知，以前是msp现在是jmq。","like_count":0},{"had_liked":false,"id":127140,"user_name":"演","can_delete":false,"product_type":"c1","uid":1207869,"ip_address":"","ucode":"D2130DF72E2352","user_header":"https://static001.geekbang.org/account/avatar/00/12/6e/3d/f88891e3.jpg","comment_is_top":false,"comment_ctime":1566568439,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":16,"product_id":100032301,"comment_content":"老师，线程池、数据库连接池是不是有没有用到消息队列呢？","like_count":0},{"had_liked":false,"id":122805,"user_name":"freebird","can_delete":false,"product_type":"c1","uid":1626168,"ip_address":"","ucode":"9B1D5A2C2B9D70","user_header":"","comment_is_top":false,"comment_ctime":1565530471,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"打卡，当前的项目使用的是RabbitMQ来做，主要是为了异步快速响应，但是系统中有上游系统和下游系统互相发送消息的情况。这样做是不是不大好啊。","like_count":0},{"had_liked":false,"id":121795,"user_name":"子铭","can_delete":false,"product_type":"c1","uid":1156419,"ip_address":"","ucode":"221383803E5732","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/43/d32dd35a.jpg","comment_is_top":false,"comment_ctime":1565225243,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"打卡打卡，看评论看累了，哈哈😄","like_count":0},{"had_liked":false,"id":121689,"user_name":"Coding小先","can_delete":false,"product_type":"c1","uid":1051563,"ip_address":"","ucode":"965B1CC757E026","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/ab/0e2857e5.jpg","comment_is_top":false,"comment_ctime":1565183261,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"好像有点想明白秒杀为什么那么快被秒了","like_count":0},{"had_liked":false,"id":121202,"user_name":"空白宇宙","can_delete":false,"product_type":"c1","uid":1023437,"ip_address":"","ucode":"9031293BDAAB0B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/cd/93864919.jpg","comment_is_top":false,"comment_ctime":1565076937,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"写的挺好","like_count":0},{"had_liked":false,"id":119965,"user_name":"小夏","can_delete":false,"product_type":"c1","uid":1110755,"ip_address":"","ucode":"D87444ADC28C6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/e3/c1a88a64.jpg","comment_is_top":false,"comment_ctime":1564740142,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"先打卡先打卡，启发很大，谢谢老师，","like_count":0},{"had_liked":false,"id":119643,"user_name":"迁橘","can_delete":false,"product_type":"c1","uid":1492125,"ip_address":"","ucode":"8FE37B7CA6CB74","user_header":"https://static001.geekbang.org/account/avatar/00/16/c4/9d/7c4dbcd9.jpg","comment_is_top":false,"comment_ctime":1564644131,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"第一天打卡, 工作中还没用到过MQ, 希望在用到的时候 手到擒来啦","like_count":0},{"had_liked":false,"id":119559,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1564626163,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"打卡啦，老师的比喻很形象了，就喜欢这样的老师的文章，通俗易懂。","like_count":0},{"had_liked":false,"id":119397,"user_name":"dykw","can_delete":false,"product_type":"c1","uid":1412912,"ip_address":"","ucode":"513D787379E158","user_header":"https://static001.geekbang.org/account/avatar/00/15/8f/30/ae34a463.jpg","comment_is_top":false,"comment_ctime":1564578272,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"一般用于各个服务间的数据通知同步，做一些异步处理；不同的mq用的参数不尽相同，有的消费者多些，有的就一个；","like_count":0},{"had_liked":false,"id":118442,"user_name":"梅云霞","can_delete":false,"product_type":"c1","uid":1400992,"ip_address":"","ucode":"01C8F85B59A202","user_header":"https://static001.geekbang.org/account/avatar/00/15/60/a0/dc0bf77c.jpg","comment_is_top":false,"comment_ctime":1564365843,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"打卡，令牌桶需深入理解，加油💪","like_count":0},{"had_liked":false,"id":118222,"user_name":"纯齐","can_delete":false,"product_type":"c1","uid":1056485,"ip_address":"","ucode":"20306095ABA7CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/1e/e5/140b334e.jpg","comment_is_top":false,"comment_ctime":1564296011,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"生产有项目中用了kafka，作用：\n1. 做流量控制，避免突发流量拖垮下游业务服务\n2. 扩展方便，新业务只需要按规则订阅相应的Topic即可\n3. 异步处理，不影响生产者\n产生的问题：\n1. 消息队列要保证高可用\n2. 同步变异步，处理逻辑变复杂，监控方式有所变化\n3. 整体延时增加","like_count":0},{"had_liked":false,"id":122805,"user_name":"freebird","can_delete":false,"product_type":"c1","uid":1626168,"ip_address":"","ucode":"9B1D5A2C2B9D70","user_header":"","comment_is_top":false,"comment_ctime":1565530471,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"打卡，当前的项目使用的是RabbitMQ来做，主要是为了异步快速响应，但是系统中有上游系统和下游系统互相发送消息的情况。这样做是不是不大好啊。","like_count":0},{"had_liked":false,"id":121795,"user_name":"子铭","can_delete":false,"product_type":"c1","uid":1156419,"ip_address":"","ucode":"221383803E5732","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/43/d32dd35a.jpg","comment_is_top":false,"comment_ctime":1565225243,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"打卡打卡，看评论看累了，哈哈😄","like_count":0},{"had_liked":false,"id":121689,"user_name":"Coding小先","can_delete":false,"product_type":"c1","uid":1051563,"ip_address":"","ucode":"965B1CC757E026","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/ab/0e2857e5.jpg","comment_is_top":false,"comment_ctime":1565183261,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"好像有点想明白秒杀为什么那么快被秒了","like_count":0},{"had_liked":false,"id":121202,"user_name":"空白宇宙","can_delete":false,"product_type":"c1","uid":1023437,"ip_address":"","ucode":"9031293BDAAB0B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/cd/93864919.jpg","comment_is_top":false,"comment_ctime":1565076937,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"写的挺好","like_count":0},{"had_liked":false,"id":119965,"user_name":"小夏","can_delete":false,"product_type":"c1","uid":1110755,"ip_address":"","ucode":"D87444ADC28C6A","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/e3/c1a88a64.jpg","comment_is_top":false,"comment_ctime":1564740142,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"先打卡先打卡，启发很大，谢谢老师，","like_count":0},{"had_liked":false,"id":119643,"user_name":"迁橘","can_delete":false,"product_type":"c1","uid":1492125,"ip_address":"","ucode":"8FE37B7CA6CB74","user_header":"https://static001.geekbang.org/account/avatar/00/16/c4/9d/7c4dbcd9.jpg","comment_is_top":false,"comment_ctime":1564644131,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"第一天打卡, 工作中还没用到过MQ, 希望在用到的时候 手到擒来啦","like_count":0},{"had_liked":false,"id":119559,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1564626163,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"打卡啦，老师的比喻很形象了，就喜欢这样的老师的文章，通俗易懂。","like_count":0},{"had_liked":false,"id":119397,"user_name":"dykw","can_delete":false,"product_type":"c1","uid":1412912,"ip_address":"","ucode":"513D787379E158","user_header":"https://static001.geekbang.org/account/avatar/00/15/8f/30/ae34a463.jpg","comment_is_top":false,"comment_ctime":1564578272,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"一般用于各个服务间的数据通知同步，做一些异步处理；不同的mq用的参数不尽相同，有的消费者多些，有的就一个；","like_count":0},{"had_liked":false,"id":118442,"user_name":"梅云霞","can_delete":false,"product_type":"c1","uid":1400992,"ip_address":"","ucode":"01C8F85B59A202","user_header":"https://static001.geekbang.org/account/avatar/00/15/60/a0/dc0bf77c.jpg","comment_is_top":false,"comment_ctime":1564365843,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"打卡，令牌桶需深入理解，加油💪","like_count":0},{"had_liked":false,"id":118222,"user_name":"纯齐","can_delete":false,"product_type":"c1","uid":1056485,"ip_address":"","ucode":"20306095ABA7CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/1e/e5/140b334e.jpg","comment_is_top":false,"comment_ctime":1564296011,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":17,"product_id":100032301,"comment_content":"生产有项目中用了kafka，作用：\n1. 做流量控制，避免突发流量拖垮下游业务服务\n2. 扩展方便，新业务只需要按规则订阅相应的Topic即可\n3. 异步处理，不影响生产者\n产生的问题：\n1. 消息队列要保证高可用\n2. 同步变异步，处理逻辑变复杂，监控方式有所变化\n3. 整体延时增加","like_count":0},{"had_liked":false,"id":117404,"user_name":"刘文韬","can_delete":false,"product_type":"c1","uid":1312479,"ip_address":"","ucode":"41395E6036D516","user_header":"https://static001.geekbang.org/account/avatar/00/14/06/df/d0fe2300.jpg","comment_is_top":false,"comment_ctime":1564040961,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"异步、削峰、解耦。","like_count":0},{"had_liked":false,"id":117295,"user_name":"一个小西瓜🍉","can_delete":false,"product_type":"c1","uid":1083393,"ip_address":"","ucode":"59D38C97758304","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/01/2bc57cd0.jpg","comment_is_top":false,"comment_ctime":1564019622,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"业务与平台的解耦也会用到消息队列，目前维护的系统里在平台应用里产生了对上游业务系统的调用，后续可以考虑用消息进行业务流程解耦。","like_count":0},{"had_liked":false,"id":117190,"user_name":"松花皮蛋me","can_delete":false,"product_type":"c1","uid":1000054,"ip_address":"","ucode":"B0846CEEF6B0D1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/76/256bbd43.jpg","comment_is_top":false,"comment_ctime":1563984871,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"也可以用于分布式事务","like_count":0},{"had_liked":false,"id":117172,"user_name":"凌霄","can_delete":false,"product_type":"c1","uid":1107786,"ip_address":"","ucode":"19C4BFB0298276","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/4a/4dfb565a.jpg","comment_is_top":false,"comment_ctime":1563981093,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"异步处理，系统解藕，数据库降级处理，如支付成功后核心交易系统异步发送消息，让通知系统通知商户，数据库故障后异步发送消息，再自消费消息更新数据库。","like_count":0},{"had_liked":false,"id":117132,"user_name":"瑶瑶笑哈哈","can_delete":false,"product_type":"c1","uid":1598794,"ip_address":"","ucode":"4D887242C0DF0F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqyOzptz27UiatycBFguBrz0gjLiauywzBNqwuRVuuCyQPn4Th0sDibWpMo0owGHqfFG9vFX0bJVicdsg/132","comment_is_top":false,"comment_ctime":1563974479,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"打卡打卡，下个项目要用了，提前学习一下","like_count":0},{"had_liked":false,"id":117077,"user_name":"一杯敬月光","can_delete":false,"product_type":"c1","uid":1308687,"ip_address":"","ucode":"94C801115C41C8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIPy34APc2QAOxvRWuZWLBrZZ134Qs89K0icGye4HLacic1ekZnu2s80gMRDF5hmmu8LD0mhDsleRVg/132","comment_is_top":false,"comment_ctime":1563963952,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"一边工作一边学习技术，全靠同行大佬提携。","like_count":0},{"had_liked":false,"id":117034,"user_name":"啥也不会","can_delete":false,"product_type":"c1","uid":1040584,"ip_address":"","ucode":"2E0F593B237C59","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e0/c8/4ad13219.jpg","comment_is_top":false,"comment_ctime":1563957830,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"打卡，期待后续的课程","like_count":0},{"had_liked":false,"id":116965,"user_name":"ikel","can_delete":false,"product_type":"c1","uid":1009002,"ip_address":"","ucode":"1D5CE7803C1C2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/6a/be36c108.jpg","comment_is_top":false,"comment_ctime":1563948262,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"再讲讲cache这块","like_count":0},{"had_liked":false,"id":116933,"user_name":"嘉木","can_delete":false,"product_type":"c1","uid":1317999,"ip_address":"","ucode":"AF4877693782C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","comment_is_top":false,"comment_ctime":1563941473,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"打卡☺️","like_count":0},{"had_liked":false,"id":116901,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1563936371,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"打卡3","like_count":0},{"had_liked":false,"id":117404,"user_name":"刘文韬","can_delete":false,"product_type":"c1","uid":1312479,"ip_address":"","ucode":"41395E6036D516","user_header":"https://static001.geekbang.org/account/avatar/00/14/06/df/d0fe2300.jpg","comment_is_top":false,"comment_ctime":1564040961,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"异步、削峰、解耦。","like_count":0},{"had_liked":false,"id":117295,"user_name":"一个小西瓜🍉","can_delete":false,"product_type":"c1","uid":1083393,"ip_address":"","ucode":"59D38C97758304","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/01/2bc57cd0.jpg","comment_is_top":false,"comment_ctime":1564019622,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"业务与平台的解耦也会用到消息队列，目前维护的系统里在平台应用里产生了对上游业务系统的调用，后续可以考虑用消息进行业务流程解耦。","like_count":0},{"had_liked":false,"id":117190,"user_name":"松花皮蛋me","can_delete":false,"product_type":"c1","uid":1000054,"ip_address":"","ucode":"B0846CEEF6B0D1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/42/76/256bbd43.jpg","comment_is_top":false,"comment_ctime":1563984871,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"也可以用于分布式事务","like_count":0},{"had_liked":false,"id":117172,"user_name":"凌霄","can_delete":false,"product_type":"c1","uid":1107786,"ip_address":"","ucode":"19C4BFB0298276","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/4a/4dfb565a.jpg","comment_is_top":false,"comment_ctime":1563981093,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"异步处理，系统解藕，数据库降级处理，如支付成功后核心交易系统异步发送消息，让通知系统通知商户，数据库故障后异步发送消息，再自消费消息更新数据库。","like_count":0},{"had_liked":false,"id":117132,"user_name":"瑶瑶笑哈哈","can_delete":false,"product_type":"c1","uid":1598794,"ip_address":"","ucode":"4D887242C0DF0F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqyOzptz27UiatycBFguBrz0gjLiauywzBNqwuRVuuCyQPn4Th0sDibWpMo0owGHqfFG9vFX0bJVicdsg/132","comment_is_top":false,"comment_ctime":1563974479,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"打卡打卡，下个项目要用了，提前学习一下","like_count":0},{"had_liked":false,"id":117077,"user_name":"一杯敬月光","can_delete":false,"product_type":"c1","uid":1308687,"ip_address":"","ucode":"94C801115C41C8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIPy34APc2QAOxvRWuZWLBrZZ134Qs89K0icGye4HLacic1ekZnu2s80gMRDF5hmmu8LD0mhDsleRVg/132","comment_is_top":false,"comment_ctime":1563963952,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"一边工作一边学习技术，全靠同行大佬提携。","like_count":0},{"had_liked":false,"id":117034,"user_name":"啥也不会","can_delete":false,"product_type":"c1","uid":1040584,"ip_address":"","ucode":"2E0F593B237C59","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e0/c8/4ad13219.jpg","comment_is_top":false,"comment_ctime":1563957830,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"打卡，期待后续的课程","like_count":0},{"had_liked":false,"id":116965,"user_name":"ikel","can_delete":false,"product_type":"c1","uid":1009002,"ip_address":"","ucode":"1D5CE7803C1C2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/6a/be36c108.jpg","comment_is_top":false,"comment_ctime":1563948262,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"再讲讲cache这块","like_count":0},{"had_liked":false,"id":116933,"user_name":"嘉木","can_delete":false,"product_type":"c1","uid":1317999,"ip_address":"","ucode":"AF4877693782C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","comment_is_top":false,"comment_ctime":1563941473,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"打卡☺️","like_count":0},{"had_liked":false,"id":116901,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1563936371,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":18,"product_id":100032301,"comment_content":"打卡3","like_count":0},{"had_liked":false,"id":116892,"user_name":"风中花","can_delete":false,"product_type":"c1","uid":1085237,"ip_address":"","ucode":"067E0A1E116844","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/35/f1839bb2.jpg","comment_is_top":false,"comment_ctime":1563934983,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"今天再老师得鼓励下！我也入手了。再此我也滴滴我也打个卡！ 也立个flag！ 坚持每天打卡，坚持每天学习！ 坚持到最后！！ 给老师一个赞 ！ 给自己一个赞","like_count":0},{"had_liked":false,"id":116789,"user_name":"F","can_delete":false,"product_type":"c1","uid":1274373,"ip_address":"","ucode":"DAF4F46CAFD584","user_header":"https://static001.geekbang.org/account/avatar/00/13/72/05/466d8b77.jpg","comment_is_top":false,"comment_ctime":1563927232,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"希望后期可以拥有更多实际的运用场景和解决方案！","like_count":0},{"had_liked":false,"id":116730,"user_name":"爱科幻爱魔法细节控","can_delete":false,"product_type":"c1","uid":1275753,"ip_address":"","ucode":"BEECFA102FA711","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoAgs66iaTKNaTZtFJibhNWYhudlpv39r6gmy5Joj3DB32VZvrYqcguOYExVjfJ7UQHr5AXvjMceia3g/132","comment_is_top":false,"comment_ctime":1563896460,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":116698,"user_name":"青梅煮酒","can_delete":false,"product_type":"c1","uid":1016591,"ip_address":"","ucode":"40B466AC361609","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/0f/b39a072d.jpg","comment_is_top":false,"comment_ctime":1563891716,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":116598,"user_name":"史双龙","can_delete":false,"product_type":"c1","uid":1176417,"ip_address":"","ucode":"387D01880867AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/f3/61/8f7fca5b.jpg","comment_is_top":false,"comment_ctime":1563877201,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"第一天打卡，主要是用来做多个独立系统消息传输rabbit mq。  ","like_count":0},{"had_liked":false,"id":116557,"user_name":"陈泽坛","can_delete":false,"product_type":"c1","uid":1394861,"ip_address":"","ucode":"C81B402868E9E2","user_header":"https://static001.geekbang.org/account/avatar/00/15/48/ad/8be724da.jpg","comment_is_top":false,"comment_ctime":1563868988,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"开拓思路~~~打卡打卡","like_count":0},{"had_liked":false,"id":116491,"user_name":"知猪瞎","can_delete":false,"product_type":"c1","uid":1080155,"ip_address":"","ucode":"53C2874A376798","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/5b/a91de47b.jpg","comment_is_top":false,"comment_ctime":1563857087,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"讲真，我以为黄渤来抢饭碗了。","like_count":0},{"had_liked":false,"id":116473,"user_name":"Jian","can_delete":false,"product_type":"c1","uid":1023040,"ip_address":"","ucode":"358133EC2AFEB0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/40/6323850e.jpg","comment_is_top":false,"comment_ctime":1563854191,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"消息队列仅仅用在了data pipeline上，连接两个系统。它能做的事情还是很多的，希望后面可以深入消息队列内部实现，学习下源码。一直想深入学习下消息队列，所以看到广告就订阅了这门课程，目前感觉老师讲的很贴近实践，期待越来越多的干活。","like_count":0},{"had_liked":false,"id":116439,"user_name":"Warm","can_delete":false,"product_type":"c1","uid":1308672,"ip_address":"","ucode":"F1B19951B23C65","user_header":"https://static001.geekbang.org/account/avatar/00/13/f8/00/5d0562a1.jpg","comment_is_top":false,"comment_ctime":1563850509,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":116438,"user_name":"victoriest","can_delete":false,"product_type":"c1","uid":1023394,"ip_address":"","ucode":"7B4232B0FB88F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/a2/d8a708cc.jpg","comment_is_top":false,"comment_ctime":1563850343,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"攒一个月再过来看","like_count":0},{"had_liked":false,"id":116892,"user_name":"风中花","can_delete":false,"product_type":"c1","uid":1085237,"ip_address":"","ucode":"067E0A1E116844","user_header":"https://static001.geekbang.org/account/avatar/00/10/8f/35/f1839bb2.jpg","comment_is_top":false,"comment_ctime":1563934983,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"今天再老师得鼓励下！我也入手了。再此我也滴滴我也打个卡！ 也立个flag！ 坚持每天打卡，坚持每天学习！ 坚持到最后！！ 给老师一个赞 ！ 给自己一个赞","like_count":0},{"had_liked":false,"id":116789,"user_name":"F","can_delete":false,"product_type":"c1","uid":1274373,"ip_address":"","ucode":"DAF4F46CAFD584","user_header":"https://static001.geekbang.org/account/avatar/00/13/72/05/466d8b77.jpg","comment_is_top":false,"comment_ctime":1563927232,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"希望后期可以拥有更多实际的运用场景和解决方案！","like_count":0},{"had_liked":false,"id":116730,"user_name":"爱科幻爱魔法细节控","can_delete":false,"product_type":"c1","uid":1275753,"ip_address":"","ucode":"BEECFA102FA711","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoAgs66iaTKNaTZtFJibhNWYhudlpv39r6gmy5Joj3DB32VZvrYqcguOYExVjfJ7UQHr5AXvjMceia3g/132","comment_is_top":false,"comment_ctime":1563896460,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":116698,"user_name":"青梅煮酒","can_delete":false,"product_type":"c1","uid":1016591,"ip_address":"","ucode":"40B466AC361609","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/0f/b39a072d.jpg","comment_is_top":false,"comment_ctime":1563891716,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":116598,"user_name":"史双龙","can_delete":false,"product_type":"c1","uid":1176417,"ip_address":"","ucode":"387D01880867AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/f3/61/8f7fca5b.jpg","comment_is_top":false,"comment_ctime":1563877201,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"第一天打卡，主要是用来做多个独立系统消息传输rabbit mq。  ","like_count":0},{"had_liked":false,"id":116557,"user_name":"陈泽坛","can_delete":false,"product_type":"c1","uid":1394861,"ip_address":"","ucode":"C81B402868E9E2","user_header":"https://static001.geekbang.org/account/avatar/00/15/48/ad/8be724da.jpg","comment_is_top":false,"comment_ctime":1563868988,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"开拓思路~~~打卡打卡","like_count":0},{"had_liked":false,"id":116491,"user_name":"知猪瞎","can_delete":false,"product_type":"c1","uid":1080155,"ip_address":"","ucode":"53C2874A376798","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/5b/a91de47b.jpg","comment_is_top":false,"comment_ctime":1563857087,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"讲真，我以为黄渤来抢饭碗了。","like_count":0},{"had_liked":false,"id":116473,"user_name":"Jian","can_delete":false,"product_type":"c1","uid":1023040,"ip_address":"","ucode":"358133EC2AFEB0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9c/40/6323850e.jpg","comment_is_top":false,"comment_ctime":1563854191,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"消息队列仅仅用在了data pipeline上，连接两个系统。它能做的事情还是很多的，希望后面可以深入消息队列内部实现，学习下源码。一直想深入学习下消息队列，所以看到广告就订阅了这门课程，目前感觉老师讲的很贴近实践，期待越来越多的干活。","like_count":0},{"had_liked":false,"id":116439,"user_name":"Warm","can_delete":false,"product_type":"c1","uid":1308672,"ip_address":"","ucode":"F1B19951B23C65","user_header":"https://static001.geekbang.org/account/avatar/00/13/f8/00/5d0562a1.jpg","comment_is_top":false,"comment_ctime":1563850509,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":116438,"user_name":"victoriest","can_delete":false,"product_type":"c1","uid":1023394,"ip_address":"","ucode":"7B4232B0FB88F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/a2/d8a708cc.jpg","comment_is_top":false,"comment_ctime":1563850343,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":19,"product_id":100032301,"comment_content":"攒一个月再过来看","like_count":0},{"had_liked":false,"id":116339,"user_name":"kk","can_delete":false,"product_type":"c1","uid":1266494,"ip_address":"","ucode":"6C1813BD91004B","user_header":"","comment_is_top":false,"comment_ctime":1563842429,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":20,"product_id":100032301,"comment_content":"打卡，滴滴","like_count":0},{"had_liked":false,"id":116339,"user_name":"kk","can_delete":false,"product_type":"c1","uid":1266494,"ip_address":"","ucode":"6C1813BD91004B","user_header":"","comment_is_top":false,"comment_ctime":1563842429,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":20,"product_id":100032301,"comment_content":"打卡，滴滴","like_count":0}]}