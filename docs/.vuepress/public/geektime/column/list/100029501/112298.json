{"id":112298,"title":"24丨索引的原理：我们为什么用B+树来做索引？","content":"<p>上节课我讲到了索引的作用，是否需要建立索引，以及建立什么样的索引，需要我们根据实际情况进行选择。我之前说过，索引其实就是一种数据结构，那么今天我们就来看下，索引的数据结构究竟是怎样的？对索引底层的数据结构有了更深入的了解后，就会更了解索引的使用原则。</p><p>今天的文章内容主要包括下面几个部分：</p><ol>\n<li>为什么索引要存放到硬盘上？如何评价索引的数据结构设计的好坏？</li>\n<li>使用平衡二叉树作为索引的数据结构有哪些不足？</li>\n<li>B树和B+树的结构是怎样的？为什么我们常用B+树作为索引的数据结构？</li>\n</ol><h2>如何评价索引的数据结构设计好坏</h2><p>数据库服务器有两种存储介质，分别为硬盘和内存。内存属于临时存储，容量有限，而且当发生意外时（比如断电或者发生故障重启）会造成数据丢失；硬盘相当于永久存储介质，这也是为什么我们需要把数据保存到硬盘上。</p><p>虽然内存的读取速度很快，但我们还是需要将索引存放到硬盘上，这样的话，当我们在硬盘上进行查询时，也就产生了硬盘的I/O操作。相比于内存的存取来说，硬盘的I/O存取消耗的时间要高很多。我们通过索引来查找某行数据的时候，需要计算产生的磁盘I/O次数，当磁盘I/O次数越多，所消耗的时间也就越大。如果我们能让索引的数据结构尽量减少硬盘的I/O操作，所消耗的时间也就越小。</p><!-- [[[read_end]]] --><h2>二叉树的局限性</h2><p>二分查找法是一种高效的数据检索方式，时间复杂度为O(log2n)，是不是采用二叉树就适合作为索引的数据结构呢？</p><p>我们先来看下最基础的二叉搜索树（Binary Search Tree），搜索某个节点和插入节点的规则一样，我们假设搜索插入的数值为key：</p><ol>\n<li>如果key大于根节点，则在右子树中进行查找；</li>\n<li>如果key小于根节点，则在左子树中进行查找；</li>\n<li>如果key等于根节点，也就是找到了这个节点，返回根节点即可。</li>\n</ol><p>举个例子，我们对数列（34，22，89，5，23，77，91）创造出来的二分查找树如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/19/69/19dedac56fdba8e7119352e84eb7af69.jpg?wh=598*430\" alt=\"\"><br>\n但是存在特殊的情况，就是有时候二叉树的深度非常大。比如我们给出的数据顺序是(5, 22, 23, 34, 77, 89, 91)，创造出来的二分搜索树如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/ae/33/aedbdcc05f4a05177f1b599a59581133.jpg?wh=654*664\" alt=\"\"><br>\n你能看出来第一个树的深度是3，也就是说最多只需3次比较，就可以找到节点，而第二个树的深度是7，最多需要7次比较才能找到节点。</p><p>第二棵树也属于二分查找树，但是性能上已经退化成了一条链表，查找数据的时间复杂度变成了O(n)。为了解决这个问题，人们提出了平衡二叉搜索树（AVL树），它在二分搜索树的基础上增加了约束，每个节点的左子树和右子树的高度差不能超过1，也就是说节点的左子树和右子树仍然为平衡二叉树。</p><p>这里说一下，常见的平衡二叉树有很多种，包括了平衡二叉搜索树、红黑树、数堆、伸展树。平衡二叉搜索树是最早提出来的自平衡二叉搜索树，当我们提到平衡二叉树时一般指的就是平衡二叉搜索树。事实上，第一棵树就属于平衡二叉搜索树，搜索时间复杂度就是O(log2n)。</p><p>我刚才提到过，数据查询的时间主要依赖于磁盘I/O的次数，如果我们采用二叉树的形式，即使通过平衡二叉搜索树进行了改进，树的深度也是O(log2n)，当n比较大时，深度也是比较高的，比如下图的情况：</p><p><img src=\"https://static001.geekbang.org/resource/image/78/ea/78154f20220d6fedb95ebbac61bd5cea.jpg?wh=1582*683\" alt=\"\"><br>\n每访问一次节点就需要进行一次磁盘I/O操作，对于上面的树来说，我们需要进行5次I/O操作。虽然平衡二叉树比较的效率高，但是树的深度也同样高，这就意味着磁盘I/O操作次数多，会影响整体数据查询的效率。</p><p>针对同样的数据，如果我们把二叉树改成M叉树（M&gt;2）呢？当M=3时，同样的31个节点可以由下面的三叉树来进行存储：</p><p><img src=\"https://static001.geekbang.org/resource/image/64/c4/6458c1f525befd735d3ce420b10729c4.jpg?wh=1825*575\" alt=\"\"><br>\n你能看到此时树的高度降低了，当数据量N大的时候，以及树的分叉数M大的时候，M叉树的高度会远小于二叉树的高度。</p><h2>什么是B树</h2><p>如果用二叉树作为索引的实现结构，会让树变得很高，增加硬盘的I/O次数，影响数据查询的时间。因此一个节点就不能只有2个子节点，而应该允许有M个子节点(M&gt;2)。</p><p>B树的出现就是为了解决这个问题，B树的英文是Balance Tree，也就是平衡的多路搜索树，它的高度远小于平衡二叉树的高度。在文件系统和数据库系统中的索引结构经常采用B树来实现。</p><p>B树的结构如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/18/44/18031c20f9a4be3e858743ed99f3c144.jpg?wh=1176*518\" alt=\"\"><br>\nB树作为平衡的多路搜索树，它的每一个节点最多可以包括M个子节点，M称为B树的阶。同时你能看到，每个磁盘块中包括了关键字和子节点的指针。如果一个磁盘块中包括了x个关键字，那么指针数就是x+1。对于一个100阶的B树来说，如果有3层的话最多可以存储约100万的索引数据。对于大量的索引数据来说，采用B树的结构是非常适合的，因为树的高度要远小于二叉树的高度。</p><p>一个M阶的B树（M&gt;2）有以下的特性：</p><ol>\n<li>根节点的儿子数的范围是[2,M]。</li>\n<li>每个中间节点包含k-1个关键字和k个孩子，孩子的数量=关键字的数量+1，k的取值范围为[ceil(M/2), M]。</li>\n<li>叶子节点包括k-1个关键字（叶子节点没有孩子），k的取值范围为[ceil(M/2), M]。</li>\n<li>假设中间节点节点的关键字为：Key[1], Key[2], …, Key[k-1]，且关键字按照升序排序，即Key[i]&lt;Key[i+1]。此时k-1个关键字相当于划分了k个范围，也就是对应着k个指针，即为：P[1], P[2], …, P[k]，其中P[1]指向关键字小于Key[1]的子树，P[i]指向关键字属于(Key[i-1], Key[i])的子树，P[k]指向关键字大于Key[k-1]的子树。</li>\n<li>所有叶子节点位于同一层。</li>\n</ol><p>上面那张图所表示的B树就是一棵3阶的B树。我们可以看下磁盘块2，里面的关键字为（8，12），它有3个孩子(3，5)，(9，10) 和 (13，15)，你能看到(3，5)小于8，(9，10)在8和12之间，而(13，15)大于12，刚好符合刚才我们给出的特征。</p><p>然后我们来看下如何用B树进行查找。假设我们想要查找的关键字是9，那么步骤可以分为以下几步：</p><ol>\n<li>我们与根节点的关键字(17，35）进行比较，9小于17那么得到指针P1；</li>\n<li>按照指针P1找到磁盘块2，关键字为（8，12），因为9在8和12之间，所以我们得到指针P2；</li>\n<li>按照指针P2找到磁盘块6，关键字为（9，10），然后我们找到了关键字9。</li>\n</ol><p>你能看出来在B树的搜索过程中，我们比较的次数并不少，但如果把数据读取出来然后在内存中进行比较，这个时间就是可以忽略不计的。而读取磁盘块本身需要进行I/O操作，消耗的时间比在内存中进行比较所需要的时间要多，是数据查找用时的重要因素，B树相比于平衡二叉树来说磁盘I/O操作要少，在数据查询中比平衡二叉树效率要高。</p><h3>什么是B+树</h3><p>B+树基于B树做出了改进，主流的DBMS都支持B+树的索引方式，比如MySQL。B+树和B树的差异在于以下几点：</p><ol>\n<li>有 k 个孩子的节点就有k个关键字。也就是孩子数量=关键字数，而B树中，孩子数量=关键字数+1。</li>\n<li>非叶子节点的关键字也会同时存在在子节点中，并且是在子节点中所有关键字的最大（或最小）。</li>\n<li>非叶子节点仅用于索引，不保存数据记录，跟记录有关的信息都放在叶子节点中。而B树中，非叶子节点既保存索引，也保存数据记录。</li>\n<li>所有关键字都在叶子节点出现，叶子节点构成一个有序链表，而且叶子节点本身按照关键字的大小从小到大顺序链接。</li>\n</ol><p>下图就是一棵B+树，阶数为3，根节点中的关键字1、18、35分别是子节点（1，8，14），（18，24，31）和（35，41，53）中的最小值。每一层父节点的关键字都会出现在下一层的子节点的关键字中，因此在叶子节点中包括了所有的关键字信息，并且每一个叶子节点都有一个指向下一个节点的指针，这样就形成了一个链表。</p><p><img src=\"https://static001.geekbang.org/resource/image/55/32/551171d94a69fbbfc00889f8b1f45932.jpg?wh=1002*674\" alt=\"\"><br>\n比如，我们想要查找关键字16，B+树会自顶向下逐层进行查找：</p><ol>\n<li>与根节点的关键字(1，18，35)进行比较，16在1和18之间，得到指针P1（指向磁盘块2）</li>\n<li>找到磁盘块2，关键字为（1，8，14），因为16大于14，所以得到指针P3（指向磁盘块7）</li>\n<li>找到磁盘块7，关键字为（14，16，17），然后我们找到了关键字16，所以可以找到关键字16所对应的数据。</li>\n</ol><p>整个过程一共进行了3次I/O操作，看起来B+树和B树的查询过程差不多，但是B+树和B树有个根本的差异在于，B+树的中间节点并不直接存储数据。这样的好处都有什么呢？</p><p>首先，B+树查询效率更稳定。因为B+树每次只有访问到叶子节点才能找到对应的数据，而在B树中，非叶子节点也会存储数据，这样就会造成查询效率不稳定的情况，有时候访问到了非叶子节点就可以找到关键字，而有时需要访问到叶子节点才能找到关键字。</p><p>其次，B+树的查询效率更高，这是因为通常B+树比B树更矮胖（阶数更大，深度更低），查询所需要的磁盘I/O也会更少。同样的磁盘页大小，B+树可以存储更多的节点关键字。</p><p>不仅是对单个关键字的查询上，在查询范围上，B+树的效率也比B树高。这是因为所有关键字都出现在B+树的叶子节点中，并通过有序链表进行了链接。而在B树中则需要通过中序遍历才能完成查询范围的查找，效率要低很多。</p><h2>总结</h2><p>磁盘的I/O操作次数对索引的使用效率至关重要。虽然传统的二叉树数据结构查找数据的效率高，但很容易增加磁盘I/O操作的次数，影响索引使用的效率。因此在构造索引的时候，我们更倾向于采用“矮胖”的数据结构。</p><p>B树和B+树都可以作为索引的数据结构，在MySQL中采用的是B+树，B+树在查询性能上更稳定，在磁盘页大小相同的情况下，树的构造更加矮胖，所需要进行的磁盘I/O次数更少，更适合进行关键字的范围查询。</p><p><img src=\"https://static001.geekbang.org/resource/image/92/90/922bfe97e007d24f4467f5af4e1a0790.jpg?wh=2766*2313\" alt=\"\"><br>\n今天我们对索引的底层数据结构进行了学习，你能说下为什么数据库索引采用B+树，而不是平衡二叉搜索树吗？另外，B+树和B树在构造和查询性能上有什么差异呢？</p><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起来交流。</p>","neighbors":{"left":{"article_title":"23丨索引的概览：用还是不用索引，这是一个问题","id":112023},"right":{"article_title":"25丨Hash索引的底层原理是什么？","id":113669}},"comments":[{"had_liked":false,"id":120722,"user_name":"Goal","can_delete":false,"product_type":"c1","uid":1307012,"ip_address":"","ucode":"C337CD4C7E07B0","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/84/7d21bd9e.jpg","comment_is_top":false,"comment_ctime":1564982684,"is_pvip":false,"replies":[{"id":"63588","content":"很好的总结，大家都可以看下","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577520019,"ip_address":"","comment_id":120722,"utype":1}],"discussion_count":3,"race_medal":0,"score":"400996941212","product_id":100029501,"comment_content":"一、数据库索引，为什么不适用用二叉树：<br>1. 平衡二叉树必须满足（所有节点的左右子树高度差不超过1）。执行插入还是删除操作，只要不满足上述条件，就要通过旋转来保持平衡，而旋转是非常耗时的，所以AVL树适合用于查找多的情况。<br>2. 二叉树的数据结构，会导致“深度”，比较深，这种“瘦高”的特性，加大了平均查询的磁盘IO次数，随着数据量的增多，查询效率也会受到影响；<br><br>二、B+ 树和 B 树在构造和查询性能上有什么差异呢？<br>B+ 树的中间节点并不直接存储数据。<br>1. B+树的查询效率更加稳定：由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。<br>2.  B+树的磁盘读写代价更低：B+树的内部节点并没有指向关键字具体信息的指针，因此其内部节点相对B树更小，如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多，相对IO读写次数就降低了。<br>3、由于B+树的数据都存储在叶子结点中，分支结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以B+树更加适合在区间查询的情况，所以通常B+树用于数据库索引。","like_count":94,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461449,"discussion_content":"很好的总结，大家都可以看下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577520019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387531,"discussion_content":"&#34;如果把所有同一内部节点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多，一次性读入内存的需要查找的关键字也就越多&#34; 没理解？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628235562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099513,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","nickname":"大王叫我来巡山","note":"","ucode":"1B8D0C701BC95E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6818,"discussion_content":"课代表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567129107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120727,"user_name":"Geek_6cfaa7","can_delete":false,"product_type":"c1","uid":1526320,"ip_address":"","ucode":"FC1A94C1C4B2A5","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epxa4R9wsGic45Tv0P7SB5VwHHDGLAcBxzga7rAnUcyZ9GiaxrQslN47zSZ9Tn3Qd8icIOics6WwibXIXQ/132","comment_is_top":false,"comment_ctime":1564983970,"is_pvip":false,"discussion_count":17,"race_medal":0,"score":"83169362594","product_id":100029501,"comment_content":"有点疑惑，b+虽然每次都查到叶节点，看着很规律，但是b树有可能用更少的io就能访问到，不是按理来说更效率吗？这个有点不明白","like_count":20,"discussions":[{"author":{"id":1196531,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/f3/8bca4aba.jpg","nickname":"普通熊猫 ଘ(੭ˊ꒳​ˋ)੭✧","note":"","ucode":"7FEF9C72B4801B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":183396,"discussion_content":"很不错的问题。\n\nb树也可以做的很胖很矮，因此高度不是关键。b树中间节点也会存数据，因此，有可能更快的速度返回，这么看反而是b树会更快，所以，这肯定也不是关键。\n\n关键点在于：减少io次数。一个数据库快不快，我们得看它的主要用途。\n\n首先，先看单次查询。为了尽可能快的命中数据，我们希望尽可能的将更多的索引数据存储在内存中。b树有一个特点，每一层都会存储真正的数据，这会挤压索引可用的内存空间，从而在整体上增加io次数。另外，如果只看等值查询的话，树型索引是不如hash索引的。\n\n其次，关系数据库中还会大量使用范围查询、有序查询等，比如某时间范围内的用户交易数据。范围查询，这种查询的特点是会大量使用排序，比较，返回结果也往往是多条。\n\n如果使用b树的话，需要使用中序遍历，因为数据节点不在同一层上，会频繁引起io，从而导致整体速度下降。而在b+树中，所有的数据节点都在叶子节点，相近的叶子节点之间也存在着链接，因此会节约io时间。这样，b+树整体上就比b树要快。\n\n其实，b+树主要应用于关系型数据库中。也有使用b树做索引的数据库，比如mangodb，做索引","likes_number":54,"is_delete":false,"is_hidden":false,"ctime":1582472713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2527979,"avatar":"https://static001.geekbang.org/account/avatar/00/26/92/eb/e530c2d0.jpg","nickname":"姬遇","note":"","ucode":"4A1617750FC3A9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1196531,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/f3/8bca4aba.jpg","nickname":"普通熊猫 ଘ(੭ˊ꒳​ˋ)੭✧","note":"","ucode":"7FEF9C72B4801B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":578441,"discussion_content":"谢谢！您的回答对我帮助很大！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656753098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":183396,"ip_address":""},"score":578441,"extra":""}]},{"author":{"id":1527530,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/lfMbV8RibrhFxjILg4550cZiaay64mTh5Zibon64TiaicC8jDMEK7VaXOkllHSpS582Jl1SUHm6Jib2AticVlHibiaBvUOA/132","nickname":"用0和1改变自己","note":"","ucode":"42B8F6ECF6BDD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4255,"discussion_content":"B+也是存在io操作的,只是非子叶节点没有数据，同样的磁盘大小，能够存储更多的节点关键字，所以阶数更少，能够减少io操作；至于B树有可能用更少都io就能访问到，那是随机的，一个是不稳定，最重要的是平均时间大大增加，所以总体效率不高。这是我的理解。","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1565254895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1230077,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c4/fd/2549489e.jpg","nickname":"叶先生","note":"","ucode":"E733A7577D4A66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45475,"discussion_content":"查询性能的稳定性对数据库来说很重要。对于同一条sql语句，b树的查询性能可能有很大的差别，这种查询性能的抖动使得查询计划很难固定，所以需要额外的开销来选择最优的查询计划。b+树就不会有这个问题。  仅个人理解...","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1573041828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1071443,"avatar":"https://static001.geekbang.org/account/avatar/00/10/59/53/d5ce7b47.jpg","nickname":"sunzehua","note":"","ucode":"BC6DC764DDBD6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6200,"discussion_content":"我理解是除了前面同学说的存储节点多之外，b+树在范围查找的时候更有优势，因为叶子结点是个有序链表","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1566782234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1301286,"avatar":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","nickname":"靠人品去赢","note":"","ucode":"7A20F9EBE847E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324128,"discussion_content":"我觉得一是底层B+树叶子节点的双效链表提高查找，第二就是有限的内存空间，B+树内部不存数据，内存一定会比同样条件下的B树加载的更多，也就查询的范围更广，也就更快。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1605060368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1054984,"avatar":"https://static001.geekbang.org/account/avatar/00/10/19/08/88b7c4dd.jpg","nickname":"0x0001","note":"","ucode":"9CED89A9E2A443","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42837,"discussion_content":"我我觉得是内存页缓存的问题吧，因为没有数据所以同样的页大小可以缓存更多的节点","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572788003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1050508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","nickname":"蚂蚁内推+v","note":"","ucode":"24B10AEE54B3FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":114029,"discussion_content":"会导致io查询次数不稳定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577952750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5554,"discussion_content":"“b树有可能用更少的io就能访问到” 这个事情是个概率事件，不是经常发生的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566353425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2037422,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/kjMRia1qRWgOktyWPSJIIqfkkpiakco1nCQnrI2n43Sicn94tJVzgQtzFXCTOTuwYww64Umkn6WSwgBdbJICfPs3Q/132","nickname":"feng*","note":"","ucode":"3080426972F9C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300525,"discussion_content":"这个不是一定比b+少吗，b+永远要到底，而b只有部分要到底，还有一部分都不需要到底","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598157744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5554,"ip_address":""},"score":300525,"extra":""},{"author":{"id":1652895,"avatar":"https://static001.geekbang.org/account/avatar/00/19/38/9f/895353ab.jpg","nickname":"黄卫江","note":"","ucode":"0366942B81E7FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374072,"discussion_content":"wdz?哈哈哈，世界真小","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620986276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":5554,"ip_address":""},"score":374072,"extra":""}]},{"author":{"id":1043738,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","nickname":"asdf100","note":"","ucode":"39D8D71453E575","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4622,"discussion_content":"选择B+是需要综合考虑的，要知道sql中有between操作，而B+中由于每两个临时之间有指针链着，所以查询速度要要比B的要高的多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565605458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100142,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/6e/1ac1c955.jpg","nickname":"niemo","note":"","ucode":"71364762238367","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4121,"discussion_content":"b+中间节点是不存储数据的 所以经过的时候 不存在io操作。我是这样理解的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565146875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1000060,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/7c/8ef14715.jpg","nickname":"🄽🄸🅇🅄🅂","note":"","ucode":"853763C229A5AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1100142,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/6e/1ac1c955.jpg","nickname":"niemo","note":"","ucode":"71364762238367","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4382,"discussion_content":"存在I/O操作的，只是每次I/O操作的时候，读到的节点的关键字更多","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565342973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4121,"ip_address":""},"score":4382,"extra":""},{"author":{"id":1255277,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLDVXsv6JOOficLK07867AkAb21eoG5KBgYFmwhMXKJooU5B6iaIZwyDxExicokVQSiaKEwZ4qPicqVFcg/132","nickname":"拼yin世界","note":"","ucode":"9571428A12B72A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1100142,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/6e/1ac1c955.jpg","nickname":"niemo","note":"","ucode":"71364762238367","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5122,"discussion_content":"你理解得不对，哈哈哈，再理解理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565962276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4121,"ip_address":""},"score":5122,"extra":""},{"author":{"id":1254493,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","nickname":"听雨","note":"","ucode":"252754F9FCFF0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1100142,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/6e/1ac1c955.jpg","nickname":"niemo","note":"","ucode":"71364762238367","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6411,"discussion_content":"存在IO的，必须得读到内存中经过比较才知道数据存在哪个节点，只是说非叶子节点相比B树来说，不会存储数据，所以可以存储更多的关键字，即有更多的叶子节点。相对B树来说，B+树看起来也更矮更胖","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566891758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4121,"ip_address":""},"score":6411,"extra":""}]}]},{"had_liked":false,"id":121812,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1565227308,"is_pvip":false,"replies":[{"id":"44844","content":"对的","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1565311387,"ip_address":"","comment_id":121812,"utype":1}],"discussion_count":3,"race_medal":0,"score":"53104834860","product_id":100029501,"comment_content":"B树和B+树的区别：<br>1、B树非叶子结点存储数据；B+树非叶子结点不存储数据只存索引。<br>2、B树叶子结点没有使用双向链表串连；B+树叶子结点使用双向链表进行串连，为了支持区间查询。","like_count":13,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461957,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565311387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376852,"discussion_content":"我想补充一点，就是因为 树 的结点（索引、关键字等）是存在硬盘的（不是内存里，因为数据量大的时候，内存放不下），而从硬盘上读取数据，也就是磁盘I/O耗时，比起用具体查找算法用时要多很多。\n因此这个时候，主要考虑降低IO次数，这个时候时间复杂度上的那点优劣势反而不重要了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622381941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110662,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f2/86/d689f77e.jpg","nickname":"Hank_Yan","note":"","ucode":"86899B561C502B","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":277469,"discussion_content":"还是这个讲的清楚，文章都是书本概念，看不动了。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591060033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120622,"user_name":"ack","can_delete":false,"product_type":"c1","uid":1440912,"ip_address":"","ucode":"69CA1233EEA8E2","user_header":"https://static001.geekbang.org/account/avatar/00/15/fc/90/c9df0459.jpg","comment_is_top":false,"comment_ctime":1564963224,"is_pvip":false,"replies":[{"id":"63591","content":"整理的很好","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577520138,"ip_address":"","comment_id":120622,"utype":1}],"discussion_count":3,"race_medal":0,"score":"48809603480","product_id":100029501,"comment_content":"1.为什么数据库索引采用 B+ 树，而不是平衡二叉搜索树？<br>数据库索引存储在磁盘上，平衡二叉树虽然查找效率高，但“高瘦”，进行的IO次数比平衡二叉搜索树多。<br>2.B+ 树和 B 树在构造和查询性能上差异？<br>（1）B树的每个节点含有卫星数据，而B+树中间节点含有指向卫星数据的指针，叶子节点才存有卫星数据。这样一来每次进行B+树查询都需要查询到叶子节点，性能更稳定，而且B+树节点只存储指向卫星数据的指针，这样一个磁盘页能存储更多节点。<br>（2）B+树范围查询更有优势，因为叶子节点直接串联成一条链表<br>（3）B+树单一结点比起B树存储更多元素，IO更少","like_count":12,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461407,"discussion_content":"整理的很好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577520138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376853,"discussion_content":"我想补充一点，就是因为 树 的结点（索引、关键字等）是存在硬盘的（不是内存里，因为数据量大的时候，内存放不下），而从硬盘上读取数据，也就是磁盘I/O耗时，比起用具体查找算法用时要多很多。\n因此这个时候，主要考虑降低IO次数，这个时候时间复杂度上的那点优劣势反而不重要了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622381955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1586771,"avatar":"https://static001.geekbang.org/account/avatar/00/18/36/53/1e797289.jpg","nickname":"Crush","note":"","ucode":"5E6D4EE02525D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":120708,"discussion_content":"文章中b树的，第二层的中间节点关键字38是不是有问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578290611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120885,"user_name":"mickey","can_delete":false,"product_type":"c1","uid":1051663,"ip_address":"","ucode":"8B490C2DDE4010","user_header":"https://static001.geekbang.org/account/avatar/00/10/0c/0f/93d1c8eb.jpg","comment_is_top":false,"comment_ctime":1565009390,"is_pvip":false,"replies":[{"id":"63585","content":"赞mickey同学很仔细，我fix下","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577519593,"ip_address":"","comment_id":120885,"utype":1}],"discussion_count":8,"race_medal":0,"score":"35924747758","product_id":100029501,"comment_content":"请问，文中的B树图，元素“68”是在“65”到“85”之间，为什么属于第一棵子树呢？","like_count":9,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461514,"discussion_content":"赞mickey同学很仔细，我fix下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577519593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1119456,"avatar":"https://static001.geekbang.org/account/avatar/00/11/14/e0/87ec0e80.jpg","nickname":"老头爱可乐","note":"","ucode":"938E19A65DA844","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347969,"discussion_content":"还未改正过来，望更新","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1612401261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2419502,"avatar":"https://static001.geekbang.org/account/avatar/00/24/eb/2e/90fea784.jpg","nickname":"柒","note":"","ucode":"D41241629321A1","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583768,"discussion_content":"还有个有错误的。。到现在也没改过来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660362103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1554764,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b9/4c/8c9edc85.jpg","nickname":"小庞","note":"","ucode":"7C8367CDB47163","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382605,"discussion_content":"磁盘块3里面出现了38对么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625644756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1965051,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/fb/fb/6db8d51e.jpg","nickname":"胡皓","note":"","ucode":"ECF5C14420899E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328951,"discussion_content":"我也发现了，现在还没改过来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606282517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1394726,"avatar":"https://static001.geekbang.org/account/avatar/00/15/48/26/93fd21d5.jpg","nickname":"书痕","note":"","ucode":"8367371EF89D61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41813,"discussion_content":"真仔细，应该放“磁盘块10”里","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572510130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234682,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/fa/1f5bf642.jpg","nickname":"未来的胡先森","note":"","ucode":"AFF193AC0E2E6C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4870,"discussion_content":"我觉得可能是画错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565783885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000060,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/7c/8ef14715.jpg","nickname":"🄽🄸🅇🅄🅂","note":"","ucode":"853763C229A5AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4383,"discussion_content":"老哥，你好细心啊！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565343190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120808,"user_name":"吃饭饭","can_delete":false,"product_type":"c1","uid":1231549,"ip_address":"","ucode":"95CFA07CDA2957","user_header":"https://static001.geekbang.org/account/avatar/00/12/ca/bd/a51ae4b2.jpg","comment_is_top":false,"comment_ctime":1564998766,"is_pvip":false,"replies":[{"id":"63586","content":"可以参考下蜗牛的解答：B树中， 100*100*100 + 100*100 +100 近似值 100w， 因为主要的数据还是在叶子节点；","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577519636,"ip_address":"","comment_id":120808,"utype":1}],"discussion_count":5,"race_medal":0,"score":"27334802542","product_id":100029501,"comment_content":"【对于一个 100 阶的 B 树来说，如果有 3 层的话最多可以存储约 100 万的索引数据】是怎么计算出 100 万的，按照前面的描述指数是关键字的个数+1 没弄明白，求解答？<br>","like_count":7,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461490,"discussion_content":"可以参考下蜗牛的解答：B树中， 100*100*100 + 100*100 +100 近似值 100w， 因为主要的数据还是在叶子节点；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577519636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1084993,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","nickname":"袁帅","note":"","ucode":"A71A89B9F1BD69","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306858,"discussion_content":"关键字的个数最多是 M-1, 所以最多应该是 99 + 99*100 + 99*100*100 吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600404829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033956,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/QD6bf8hkS5dHrabdW7M7Oo9An1Oo3QSxqoySJMDh7GTraxFRX77VZ2HZ13x3R4EVYddIGXicRRDAc7V9z5cLDlA/132","nickname":"爬行的蜗牛","note":"","ucode":"6623B62DE63CE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81927,"discussion_content":"个人理解：应该是：B树中，  100*100*100 + 100*100 +100 近似值 100w， 因为主要的数据还是在叶子节点；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576296201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1033956,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/QD6bf8hkS5dHrabdW7M7Oo9An1Oo3QSxqoySJMDh7GTraxFRX77VZ2HZ13x3R4EVYddIGXicRRDAc7V9z5cLDlA/132","nickname":"爬行的蜗牛","note":"","ucode":"6623B62DE63CE9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304030,"discussion_content":"没看明白100*100怎么来的？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599455804,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":81927,"ip_address":""},"score":304030,"extra":""},{"author":{"id":1084993,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","nickname":"袁帅","note":"","ucode":"A71A89B9F1BD69","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":306856,"discussion_content":"100*100  是第二层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600404384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304030,"ip_address":""},"score":306856,"extra":""}]}]},{"had_liked":false,"id":126248,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1566353232,"is_pvip":false,"replies":[{"id":"47669","content":"对的 同样B+树在做数据检索的时候会更稳定","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1566901299,"ip_address":"","comment_id":126248,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23041189712","product_id":100029501,"comment_content":"B+ 树中间节点只保存索引，不保存数据，所以一个节点能放更多的索引，同样的索引树，相比于 B 树，B + 树的深度会更少。","like_count":6,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463904,"discussion_content":"对的 同样B+树在做数据检索的时候会更稳定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566901299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123962,"user_name":"未来的胡先森","can_delete":false,"product_type":"c1","uid":1234682,"ip_address":"","ucode":"AFF193AC0E2E6C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d6/fa/1f5bf642.jpg","comment_is_top":false,"comment_ctime":1565784991,"is_pvip":false,"replies":[{"id":"63791","content":"总结整理的不错 大家都可以看下","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577542014,"ip_address":"","comment_id":123962,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14450686879","product_id":100029501,"comment_content":"为什么选用「 B+ 树」而不是「平衡二叉树」呢？<br><br>老师在文章中已经给出了答案，「平衡二叉树」只有两个分支，而「 B+ 树」的分支大于等于 2，根据等比数列的公式可以得出，「 B+ 树」的层数只会小于「平衡二叉树」，层数越少，在查询时所需要的 I&#47;O 操作（硬盘访问）就少，相对来说查询速度就快了，同时也提高了系统资源的利用率。<br><br>「 B+ 树」和「 B 树」在构造和查询性能上的差别？<br><br>老师在文章中也提到了，构造方面：最明显的莫过于「 B+ 树」非叶子结点并不存储数据，且所有数据节点串联（就是链表了），「 B 树」子结点带数据，且「兄弟结点」之间无串联。查询性能差异：我觉得很直观的体现在范围查询时，「 B+ 树」我们只需要知道范围的边界节点，然后遍历即可，而「 B 树」可能就需要一个个查找了。<br><br>假设查询 [0,n-1] n 个数，「 B+ 树」的时间复杂度可以粗略看做 2logn+n (2logn : 两个范围边界值的查找)，而「 B 树」可能就是 nlogn ，范围越大，查询性能差异越明显。","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462921,"discussion_content":"总结整理的不错 大家都可以看下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577542014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120911,"user_name":"夜路破晓","can_delete":false,"product_type":"c1","uid":1353577,"ip_address":"","ucode":"9B875F94B759B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3hZfficKPGCq2kjFBu9SgaMjibJTEl7iaW1ta6pZNyiaWP8XEsNpunlnsiaOtBpWTXfT5BvRP3qNByml6p9rtBvqewg/132","comment_is_top":false,"comment_ctime":1565012084,"is_pvip":false,"replies":[{"id":"63584","content":"多谢夜路破晓同学分享","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577519090,"ip_address":"","comment_id":120911,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14449913972","product_id":100029501,"comment_content":"记得刚接触编程的时候，很不习惯计数要从0开始，后来用围栏法勉强不会搞错计数顺序了，还是一直不解为什么要这样设计。<br>今天看老师讲解b树和b＋树，有个类似发现，b树就好像很多人习惯了的从1开始计数，或者举例说要把一段绳子截成三段，你只需截2次即可；<br>b ＋树就好比用围栏隔出若干空间，比如隔出两块空间需要三个围栏板，脑海里联想下公测的蹲坑隔间就能理解了。<br>按我的理解b＋树之所以显示优于b树，可能跟前后两端的数据空间有关，这跟将数据序列设计成从0开始计数而非从1开始是出于同样的考量。","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461528,"discussion_content":"多谢夜路破晓同学分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577519090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120696,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1564976935,"is_pvip":false,"replies":[{"id":"44336","content":"谢谢","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1564986388,"ip_address":"","comment_id":120696,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14449878823","product_id":100029501,"comment_content":"老师讲得好，深入浅出。","like_count":4,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461441,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564986388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164464,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1577001407,"is_pvip":false,"replies":[{"id":"62562","content":"很好的总结，数据结构在算法中会经常用到","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577068111,"ip_address":"","comment_id":164464,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10166935999","product_id":100029501,"comment_content":"首先感谢前面认真学习数据结构的自己，这下不就用到了！所以学习这一节的时候就感觉非常爽！<br><br>1、数据库索引为什么采用B+树而不采用平衡二叉搜索树？<br>   数据库的索引是存储在磁盘上的，每次查询都需要涉及I&#47;O操作，I&#47;O操作的次数越多，那么查询所化的时间就越长，性能也就越低，所以引入了平衡二叉搜索树来存储数据，本来平衡二叉搜索树的查询效率是非常高的，但是当数据量很大的时候，平衡二叉搜索树的高度就会很高，每次进行查询的时候也就需要经历很多的节点，自然也就增加了I&#47;O操作的次数，严重的降低了性能，要是你查询的数据刚好在根节点那还好，都是一样的，但是这种情况的概率只有1%，属于极端情况(自己脑补)......所以在此引入了B+树这个数据结构（B树老师已经说得很清楚了，我就不说了），降低了树的高度，减少了I&#47;O操作的次数，提高了查询的效率！<br><br>2、B和B+树在构造上有什么差异吗？<br>   B+树的查询效率更稳定的，因为每次都必须查询到叶子节点才能找到最终的数据，而B树查询的数据也许在叶节点上，也许在叶子节点上，这样就会造成查询的效率不稳定！<br>  B+树的查询效率更高，因为B+树更矮更胖（肉多，哈哈），所以B+树的高度越小，查询时产生的I&#47;O次数也就更少，性能自然就高！<br><br><br>  ","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478776,"discussion_content":"很好的总结，数据结构在算法中会经常用到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577068111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134139,"user_name":"雪飞鸿","can_delete":false,"product_type":"c1","uid":1012325,"ip_address":"","ucode":"65D7B030828809","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","comment_is_top":false,"comment_ctime":1568766458,"is_pvip":true,"replies":[{"id":"53349","content":"是的 都是B树的意思","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1570423923,"ip_address":"","comment_id":134139,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10158701050","product_id":100029501,"comment_content":"网上还看到B-tree是和B tree一个意思吗？","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467627,"discussion_content":"是的 都是B树的意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570423923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1021638,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/96/c6/ac69caa9.jpg","nickname":"今晚吃啥","note":"","ucode":"960608C402BA87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21508,"discussion_content":"B-tree 就是 B Tree，-只是连接符。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1569492254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120740,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1564987531,"is_pvip":false,"replies":[{"id":"47675","content":"感谢，B+树索引对于理解MySQL的索引机制来说确实比较重要","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1566901962,"ip_address":"","comment_id":120740,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10154922123","product_id":100029501,"comment_content":"这节厉害了，得多看几遍，慢慢消化。","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461456,"discussion_content":"感谢，B+树索引对于理解MySQL的索引机制来说确实比较重要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566901962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1400962,"avatar":"https://static001.geekbang.org/account/avatar/00/15/60/82/9a43504b.jpg","nickname":"[耶]友超","note":"","ucode":"890572F77C3670","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4001,"discussion_content":"去看隔壁专栏的《数据结构与算法之美》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565054504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120692,"user_name":"hlz-123","can_delete":false,"product_type":"c1","uid":1433586,"ip_address":"","ucode":"B7E5EF0C260BD2","user_header":"","comment_is_top":false,"comment_ctime":1564976531,"is_pvip":false,"replies":[{"id":"63589","content":"下面asdf100同学的回答可以参考下","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577520090,"ip_address":"","comment_id":120692,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10154911123","product_id":100029501,"comment_content":"老师的这节课，让我知道以前对数据库的索引理解有误，但我还是想问一下老师，以前，我认为数据库的数据是在存储在硬盘一些存储块中，索引是一个单独文件，另外存储，索引文件只包含关键字和指向数据地址的链接，查询时可以一次性或若干次将索引文件全部读入到缓存进行比较，不用在硬盘中去多次读，避免访问硬盘浪费时间，为什么不能这样呢？","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461439,"discussion_content":"下面asdf100同学的回答可以参考下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577520090,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043738,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","nickname":"asdf100","note":"","ucode":"39D8D71453E575","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4624,"discussion_content":"myisam中的b-tree基本是这样存储的，将索引和数据文件分成两个独立的文件存储了。但查询的时候不太可能一次性将索引载入内存，不然索引文件太大时，可能无法载入了，况且一个数据库每个表都有索引，索引太大了，内在太昂贵，个人理解","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565605877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":218008,"user_name":"脱缰的野马__","can_delete":false,"product_type":"c1","uid":1447569,"ip_address":"","ucode":"D5F993E7232C61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/WtHCCMoLJ2DvzqQwPYZyj2RlN7eibTLMHDMTSO4xIKjfKR1Eh9L98AMkkZY7FmegWyGLahRQJ5ibPzeeFtfpeSow/132","comment_is_top":false,"comment_ctime":1589693604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884660900","product_id":100029501,"comment_content":"老师您好，我看老师在讲程序访问平衡二叉树时，就以文中例子来说，严格意义来说不一定每次访问节点都需要进行一次磁盘i&#47;o吧？系统去磁盘或者去内存加载数据的时候都会根据局部性原理的空间局部性加载目标数据以及附近的数据","like_count":1},{"had_liked":false,"id":152980,"user_name":"梁","can_delete":false,"product_type":"c1","uid":1267198,"ip_address":"","ucode":"29A10759821D96","user_header":"https://static001.geekbang.org/account/avatar/00/13/55/fe/e8fb06fb.jpg","comment_is_top":false,"comment_ctime":1574133045,"is_pvip":false,"replies":[{"id":"59726","content":"对的 稳定是其中之一，综合效率也会更高","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1574738171,"ip_address":"","comment_id":152980,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869100341","product_id":100029501,"comment_content":"为什么使用B+而不是B？<br>稳定压倒一切！","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475009,"discussion_content":"对的 稳定是其中之一，综合效率也会更高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574738171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142881,"user_name":"爱思考的仙人球","can_delete":false,"product_type":"c1","uid":1576177,"ip_address":"","ucode":"77E31190A5B5AF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ic8KF0sfxicsx4F25HZrtZwP2fQEibicfibFeYIQBibxnVlHIiaqkfictJuvLCKia0p7liaQvbTzCYWLibjJK6B8kc8e194ng/132","comment_is_top":false,"comment_ctime":1571574501,"is_pvip":false,"replies":[{"id":"59826","content":"对的","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1574757794,"ip_address":"","comment_id":142881,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5866541797","product_id":100029501,"comment_content":"B+树查询效率更稳定，磁盘I&#47;O次数更少","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471308,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574757794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1157343,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI9gJabQFVdNV86V5mWEgibCBEZfT6BPPrBFGS8CqQF6LohvFLHySInhaEEkXDn40xcDVexFXZEE1Q/132","nickname":"Allen","note":"","ucode":"8F1523B41901D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265476,"discussion_content":"B+树能存储更多的数据是不是也是一方面？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589412007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139829,"user_name":"雪飞鸿","can_delete":false,"product_type":"c1","uid":1012325,"ip_address":"","ucode":"65D7B030828809","user_header":"https://static001.geekbang.org/account/avatar/00/0f/72/65/68bd8177.jpg","comment_is_top":false,"comment_ctime":1570753539,"is_pvip":true,"replies":[{"id":"54094","content":"关键字实际上就是我们的索引键值，当我们按照索引进行数据查询的时候，就是对关键字进行的查找","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1570781843,"ip_address":"","comment_id":139829,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5865720835","product_id":100029501,"comment_content":"文中所说的关键字怎么理解？","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470131,"discussion_content":"关键字实际上就是我们的索引键值，当我们按照索引进行数据查询的时候，就是对关键字进行的查找","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570781843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138903,"user_name":"极客时间","can_delete":false,"product_type":"c1","uid":1673666,"ip_address":"","ucode":"1335F4142738F0","user_header":"https://static001.geekbang.org/account/avatar/00/19/89/c2/7d8d4e56.jpg","comment_is_top":false,"comment_ctime":1570502369,"is_pvip":true,"replies":[{"id":"59843","content":"一棵树，叶子节点就是最底层的叶子。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1574760448,"ip_address":"","comment_id":138903,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5865469665","product_id":100029501,"comment_content":"还是没有弄清叶子节点和非叶子节点！？","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469691,"discussion_content":"一棵树，叶子节点就是最底层的叶子。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574760448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53983,"discussion_content":"叶子结点是离散数学中的概念。一棵树当中没有子结点（即度为0）的结点称为叶子结点，简称“叶子”。 叶子是指出度为0的结点，又称为终端结点。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574246558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134493,"user_name":"airmy丶","can_delete":false,"product_type":"c1","uid":1299673,"ip_address":"","ucode":"41959C9F5B4B65","user_header":"https://static001.geekbang.org/account/avatar/00/13/d4/d9/c3296187.jpg","comment_is_top":false,"comment_ctime":1568855608,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5863822904","product_id":100029501,"comment_content":"B+树为什么将叶子节点构成一个链表的形式，应该是方便范围查找，就像老师举的例子，如果不是等值查找16 而是查找大于16小于30的情况，因为叶子节点之间已经构成链表的形式，即使数据不再同一个磁盘块，也可以通过链表偏移指针获取到数据而不用重新遍历B+树增大磁盘IO。","like_count":1},{"had_liked":false,"id":126249,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1566353331,"is_pvip":false,"replies":[{"id":"47668","content":"感谢！B+树索引的原理是理解MySQL索引的核心，后面章节还会有Page页结构的讲解，会对数据查找的整个流程有更清晰的认识。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1566901261,"ip_address":"","comment_id":126249,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5861320627","product_id":100029501,"comment_content":"老师算是把索引讲明白了，谢谢老师。","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463905,"discussion_content":"感谢！B+树索引的原理是理解MySQL索引的核心，后面章节还会有Page页结构的讲解，会对数据查找的整个流程有更清晰的认识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566901261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120921,"user_name":"努力奋斗的Pisces","can_delete":false,"product_type":"c1","uid":1336441,"ip_address":"","ucode":"AD4F8909CF190A","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/79/f1e1ca76.jpg","comment_is_top":false,"comment_ctime":1565013693,"is_pvip":true,"replies":[{"id":"63583","content":"用B+树更稳定，效率高","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577519062,"ip_address":"","comment_id":120921,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5859980989","product_id":100029501,"comment_content":"如果数据都在内存中应该是平衡二叉树搜索速度会快了吗","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461533,"discussion_content":"用B+树更稳定，效率高","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577519062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120628,"user_name":"我知道了嗯","can_delete":false,"product_type":"c1","uid":1138471,"ip_address":"","ucode":"9186EC1F32C490","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/27/a6873bc9.jpg","comment_is_top":false,"comment_ctime":1564963858,"is_pvip":false,"replies":[{"id":"63590","content":"中文也可以比较的","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577520127,"ip_address":"","comment_id":120628,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5859931154","product_id":100029501,"comment_content":"那种时间，中文建了索引，是怎么比较的","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461409,"discussion_content":"中文也可以比较的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577520127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073027,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/83/bb728e53.jpg","nickname":"Douglas","note":"","ucode":"CFDE3D76B9DAE6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5256,"discussion_content":"一样的，都是asc码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566118146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333639,"user_name":"浅qian的痕迹","can_delete":false,"product_type":"c1","uid":1322797,"ip_address":"","ucode":"3DFB5DDA69B023","user_header":"https://static001.geekbang.org/account/avatar/00/14/2f/2d/dce49b2b.jpg","comment_is_top":false,"comment_ctime":1644457383,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644457383","product_id":100029501,"comment_content":"聚合索引的B+实现，假设聚合索引为(a,b, c)<br><br>实现原理： <br>前提：id主键为聚簇索引，聚合索引为(a,b, c) 为非聚簇索引<br>1. 非叶子节点，只存储索引，并且只存储 联合索引的第一列a<br>2. 叶子节点，既存储索引也存储数据，(a,b,c) -&gt; id，a,d,c索引关联主键id，整体呈现为：<br>a<br>b<br>c<br>id<br><br>查询条件  where a = 1 and b = 2 and c = 3，假设B+的高度为2<br><br>    先根据a字段，从根节点筛选出 a = 1的节点，然后从磁盘上把a = 1的所有叶子节点加载到内存，然后在叶子节点上再匹配索引 b,c，最后圈定出主键id，然后用id到聚簇索引上找数据，<br><br>请问：聚合索引在B+树上的实现，上面的描述过程是对的吗？","like_count":0},{"had_liked":false,"id":322175,"user_name":"@mj 🍭","can_delete":false,"product_type":"c1","uid":2048101,"ip_address":"","ucode":"ED1CEE8F2C3A64","user_header":"https://static001.geekbang.org/account/avatar/00/1f/40/65/49b923aa.jpg","comment_is_top":false,"comment_ctime":1637222305,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637222305","product_id":100029501,"comment_content":"作者你好，对于B+树我想了解一下索引树构建好了之后，新增的关键字是如何添加到原有索引树上的呢？比如上述的B+树的图例来说，添加了一个100，是会加到原有索引树上，还是会重构索引树的呢？如果不需要重构的话，关键字不断增加到一定程序，原来的区间设定应该就不适用了吧，特别是根节点，影响了整个树结构的走向，可以说一下这个方面的知识吗？","like_count":0},{"had_liked":false,"id":308815,"user_name":"TheOne","can_delete":false,"product_type":"c1","uid":1582134,"ip_address":"","ucode":"2A359780156A8B","user_header":"https://static001.geekbang.org/account/avatar/00/18/24/36/1c4af368.jpg","comment_is_top":false,"comment_ctime":1629808077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629808077","product_id":100029501,"comment_content":"B树和B+树区别：只有叶子结点存储数据相关的信息，并且叶子节点链接成一个链表；中间节点不存储数据，存储更多的索引，这样在io读取的时候，可以读取更多的索引","like_count":0},{"had_liked":false,"id":295355,"user_name":"完美坚持","can_delete":false,"product_type":"c1","uid":1919541,"ip_address":"","ucode":"AE0261D8DDEF64","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","comment_is_top":false,"comment_ctime":1622380950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622380950","product_id":100029501,"comment_content":"但是叶子节点之间没有连接，不像B+树那样形成一个链表，是这样吗？","like_count":0},{"had_liked":false,"id":295353,"user_name":"完美坚持","can_delete":false,"product_type":"c1","uid":1919541,"ip_address":"","ucode":"AE0261D8DDEF64","user_header":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","comment_is_top":false,"comment_ctime":1622380430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622380430","product_id":100029501,"comment_content":"https:&#47;&#47;time.geekbang.org&#47;column&#47;article&#47;77830","like_count":0},{"had_liked":false,"id":281000,"user_name":"von","can_delete":false,"product_type":"c1","uid":1736813,"ip_address":"","ucode":"403C8CF955AFF3","user_header":"","comment_is_top":false,"comment_ctime":1614519644,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614519644","product_id":100029501,"comment_content":"通常 B+ 树比 B 树更矮胖（阶数更大，深度更低）。。这句有疑问，高度应该是相同的吧？为什么说B+深度更低？","like_count":0},{"had_liked":false,"id":274069,"user_name":"Geek8819","can_delete":false,"product_type":"c1","uid":2028950,"ip_address":"","ucode":"521AEDAB2EED81","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/96/e963b41b.jpg","comment_is_top":false,"comment_ctime":1610809834,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1610809834","product_id":100029501,"comment_content":"关于为什么b+树更适合范围查询，有个疑问，希望老师解答下：个人理解，b+树的链表遍历和b树的中序遍历在时间复杂度上是一致的，中序遍历有空间复杂度的开销。是b+树叶子结点可能连续存储，遍历时io时间更小些么","like_count":0,"discussions":[{"author":{"id":1899599,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","nickname":"大毛","note":"","ucode":"93B18287F06706","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346966,"discussion_content":"1、连续存储的io性能更好，这是一方面的原因\n2、另一方面，时间复杂度是不一样的，你可以对照课程中B树的那个图，看一看查找15、17、26、28需要走多少个节点，再想一想如果是B+树，需要走多少个节点。你会发现，B树中，即使是连续的数据也可能分布在不同的树杈中，这会增加磁盘IO次数，而B+不会，最多也就是一次叶子节点的变化而已","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612107426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260568,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1605062685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605062685","product_id":100029501,"comment_content":"我也来说说我的答案？<br>你能说下为什么数据库索引采用 B+ 树，而不是平衡二叉搜索树吗？<br>B+树m阶，m肯定是大于2的，分支多导致在同样是平衡的树，同样数量的关键字，B+树更矮，导致寻找到关键字的IO更少，更快。<br>另外，B+ 树和 B 树在构造和查询性能上有什么差异呢？<br>B+树和B最大构造上的区别，就是中间节点不存数据只存索引，叶子节点存的关键字也就是数据。而且底部叶子节点是一个链表，顺序从小到大。<br>差异：<br>B+树查询更稳定，中间节点无数据，一直查到叶子节点才完事。B树很可能有的数据在中间就找到了，每次查询的IO次数可能都不一样。<br>B+树总体上更快，中间节点无数据，加载的索引更多，再加上有底层叶子节点的有序链表加持，即使在查询方面超不过，最简单的也最常见全局遍历也要比B树这种树的遍历要快。","like_count":0},{"had_liked":false,"id":234994,"user_name":"NaN","can_delete":false,"product_type":"c1","uid":1788625,"ip_address":"","ucode":"68DE96FBD6D2B9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4a/d1/01137e18.jpg","comment_is_top":false,"comment_ctime":1594864424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594864424","product_id":100029501,"comment_content":"老师，一棵阶数为 M 的 B+ 树，每个非叶子结点最多可以有多少个子结点？每个结点最多可以有多少个关键字？","like_count":0},{"had_liked":false,"id":226457,"user_name":"Jasper","can_delete":false,"product_type":"c1","uid":1202174,"ip_address":"","ucode":"A07ABF45D39089","user_header":"https://static001.geekbang.org/account/avatar/00/12/57/fe/beab006d.jpg","comment_is_top":false,"comment_ctime":1592109028,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592109028","product_id":100029501,"comment_content":"好文","like_count":0},{"had_liked":false,"id":208826,"user_name":"骑行的掌柜J","can_delete":false,"product_type":"c1","uid":1474214,"ip_address":"","ucode":"3163102651C653","user_header":"https://static001.geekbang.org/account/avatar/00/16/7e/a6/4e331ef4.jpg","comment_is_top":false,"comment_ctime":1587444672,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587444672","product_id":100029501,"comment_content":"陈老师 B树磁盘4的65 和磁盘9里面的68 是不是画反了？。。。 磁盘4应该是（68，87），这样磁盘9里面的（36，65）才会小于68；而磁盘10里面的（75，79）才会在68和87之间；最后磁盘11里面的（90，99）才会大于87，这样才符合陈老师上面总结的B树特征。 谢谢","like_count":0},{"had_liked":false,"id":204521,"user_name":"鲁·本","can_delete":false,"product_type":"c1","uid":1209939,"ip_address":"","ucode":"F1DEB30C21B48E","user_header":"https://static001.geekbang.org/account/avatar/00/12/76/53/21d62a23.jpg","comment_is_top":false,"comment_ctime":1586416646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586416646","product_id":100029501,"comment_content":"关系型数据库使用B+树做索引比较合适，非关系型的数据库有使用B树的，我理解关系型数据库经常需要join操作，而这些针对于索引底层应该是范围遍历，因此B+有有优势。而非关系型数据库设计上经常通过字段荣誉的方式来组织数据，所以查询时很少需要做范围遍历，而B树非叶子节点存储数据的特点此时反而加快了检索效率。","like_count":0},{"had_liked":false,"id":195773,"user_name":"luck_tou","can_delete":false,"product_type":"c1","uid":1904497,"ip_address":"","ucode":"E6BACBB08C504E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKkThulMFj6MiaY8qlsmHWrlIzo1SEhwDjwpgLP2bhLYETx1f0DepRDsBdssd5dFKN35zzFUYnia1Q/132","comment_is_top":false,"comment_ctime":1585215110,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585215110","product_id":100029501,"comment_content":"加上对于数据块的理解，看了清晰的mysql B+树的图，理解的更深了","like_count":0},{"had_liked":false,"id":182651,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1582825433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582825433","product_id":100029501,"comment_content":"B树的根节点也存数据么","like_count":0},{"had_liked":false,"id":173501,"user_name":"晚风·和煦","can_delete":false,"product_type":"c1","uid":1236047,"ip_address":"","ucode":"0B1DB8F437A4B2","user_header":"","comment_is_top":false,"comment_ctime":1579579442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579579442","product_id":100029501,"comment_content":"老师，非索引组织表，比如说MyISAM或Memory，是不是不能创建聚集索引😂","like_count":0},{"had_liked":false,"id":164950,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1577115593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577115593","product_id":100029501,"comment_content":"老师 为什么b+树 孩子数量等于关键字数量  而b树的孩子数量等于关键字数量+1，这样设计的目的是什么？","like_count":0},{"had_liked":false,"id":128644,"user_name":"jie","can_delete":false,"product_type":"c1","uid":1320432,"ip_address":"","ucode":"BA4167F8246DE0","user_header":"https://static001.geekbang.org/account/avatar/00/14/25/f0/b712a9b9.jpg","comment_is_top":false,"comment_ctime":1566921198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566921198","product_id":100029501,"comment_content":"B树结构的那个图，磁盘块9里面的68是不是不应该在P1指针下？另外磁盘块3的P1和P3指向的磁盘块没画出来，但实际上是不是一定会存在这两个指针指向的磁盘块？希望老师解答","like_count":0},{"had_liked":false,"id":125408,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1566180618,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1566180618","product_id":100029501,"comment_content":"InnoDB的聚族索引是主键ID在B+树叶子节点，那二级索引是不是就是对于文章图B+树的叶子节点的上一层节点呢。","like_count":0,"discussions":[{"author":{"id":1106202,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e1/1a/20977779.jpg","nickname":"峻铭","note":"","ucode":"63AB23BADACA88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9785,"discussion_content":"二级索引也会单独建一棵树，这颗树是按二级索引字段排序的，每个节点都有一个(key,value)，key就是二级索引字段，value就是聚簇索引字段，通过二级索引字段得到聚簇索引字段，再得到真正的记录","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568214802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124388,"user_name":"脸红因为风太烫","can_delete":false,"product_type":"c1","uid":1439542,"ip_address":"","ucode":"ABF7DA0CE126B0","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/36/7a6a6b6e.jpg","comment_is_top":false,"comment_ctime":1565875109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565875109","product_id":100029501,"comment_content":"老师请问操作系统读取数据块到内存的时候是不是把树同一层的数据块一起读取到内存里的？不然的话为什么树的层数约少IO次数就少","like_count":0},{"had_liked":false,"id":122402,"user_name":"林彦","can_delete":false,"product_type":"c1","uid":1032615,"ip_address":"","ucode":"5094CC6ED7B40C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/a7/5e66d331.jpg","comment_is_top":false,"comment_ctime":1565358651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565358651","product_id":100029501,"comment_content":"一个 M 阶的 B 树（M&gt;2）有的特性是决定这是一个M阶B树的前提条件，而不是由其他定义决定了M阶B树后会自然满足所有的这些特性？因为我脑袋里推导中间节点或叶子节点的k(关键字数量+1或孩子数)的取值范围比ceil(M&#47;2)小也仍然能构成树。","like_count":0}]}