{"id":621948,"title":"86｜再回首：“高级数据类型与算法”单元小结","content":"<p>你好，我是尹会生。</p><p>这一章，我用了大量篇幅为你介绍了Python与其周边程序之间互相访问的基本方法。总体来说分为三个主要策略：利用魔术方法封装有自己特性的对象，利用设计模式扩充对象间的关系，利用数据库持久化数据存储。接下来我们一起来回顾一下它们的主要特点和实现方法。</p><h3>魔术方法</h3><p>对程序员来说，<strong>实现业务需求时，总是缺少一个恰当的数据类型来描述业务数据。</strong>因为无论是基础数据类型还是collections扩展数据类型，都不足以体现业务的复杂程度，因此通常采用JSON、XML等数据交换格式，连接业务和Python数据类型。</p><p>JSON可以很贴切地描述业务数据，而将JSON交给Python处理时，只使用基础数据类型，进行排序、数据筛选、数据修改等操作的时候，就显得力不从心了。这时就需要我们通过魔术方法封装一个特殊的Python对象来描述业务。因为Python语言，还有它的语法本身没有接口，所以这些魔术方法就作为对象的接口被其他对象调用。</p><p>相信这样描述你会觉得很抽象，所以这里我用一个扑克游戏的例子，为你讲解一下魔术方法的作用。</p><p>我想为一个游戏定义两副扑克牌，这时如果采用基本的数据类型无法体现出“红桃、黑桃、方片、梅花”以及“JQKA”。因此，我们可以采用collections来定义一个复合数据类型。</p>","comments":[{"had_liked":false,"id":373365,"user_name":"Zhaohong","can_delete":false,"product_type":"c3","uid":3294277,"ip_address":"北京","ucode":"9F3A64E33AF5A0","user_header":"https://static001.geekbang.org/account/avatar/00/32/44/45/d926f8fb.jpg","comment_is_top":false,"comment_ctime":1682427185,"is_pvip":false,"replies":[{"id":136565,"content":"你的结论是对的，但是不唯一。\n首先大量利用多核处理器，是要用多进程的方式，毕竟多线程没办法跨越物理和逻辑CPU。是否在每个进程里使用多线程，要看每个进程的任务情况，如果需要并行执行程序，那么多线程的确要比单进程单线程快，但是如果是进行连续的计算，多线程就没有自己的优势了，毕竟创建和销毁线程，解决线程冲突和线程间的切换也是需要一定的CPU开销的。\n所以结论是跨越多个CPU必须要多进程，每个进程根据业务场景不同，使用单进程单线程或者创建多线程或者创建协程来充分利用CPU资源","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1683184651,"ip_address":"广东","comment_id":373365,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"请问，如果有一个业务，需要最大化的利用计算机的cpu资源。那应该是要用多进程，这样才能用到多核吧？但是到了每个核里，又需要用多线程才能去最大化的利用这个核吧，是应该这样去实现吗？先多进程，然后在每个进程里再多线程？","like_count":0,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":616900,"discussion_content":"你的结论是对的，但是不唯一。\n首先大量利用多核处理器，是要用多进程的方式，毕竟多线程没办法跨越物理和逻辑CPU。是否在每个进程里使用多线程，要看每个进程的任务情况，如果需要并行执行程序，那么多线程的确要比单进程单线程快，但是如果是进行连续的计算，多线程就没有自己的优势了，毕竟创建和销毁线程，解决线程冲突和线程间的切换也是需要一定的CPU开销的。\n所以结论是跨越多个CPU必须要多进程，每个进程根据业务场景不同，使用单进程单线程或者创建多线程或者创建协程来充分利用CPU资源","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1683184651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367149,"user_name":"Cy23","can_delete":false,"product_type":"c3","uid":1591293,"ip_address":"辽宁","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1674976131,"is_pvip":false,"replies":[{"id":133768,"content":"感谢指正，已更新🌹","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1674977240,"ip_address":"北京","comment_id":367149,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"self.cards = [allcards(r, s) for r in self.allRranks for s in self.colors] + [allcards(&#39;joke&#39;, s) for s in self.jokes]\n \nallRranks多打了个r","like_count":0,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600959,"discussion_content":"感谢指正，已更新🌹","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674977240,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":385186,"user_name":"Geek_631607","can_delete":false,"product_type":"c3","uid":3789991,"ip_address":"广东","ucode":"EAF874838F0BE4","user_header":"","comment_is_top":false,"comment_ctime":1702275108,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"在开发电脑装机模拟器程序时，你可能需要为电脑的各个组件定义相应的对象。例如，你可以定义一个 `Computer` 类，它包含了如 `CPU`、`GPU`、`Memory`、`HardDrive` 等组件的对象。每个组件类可以包含该组件的属性，如品牌、型号、性能参数等。\n\n以下是一个简单的示例：\n\n```python\nclass Computer:\n    def __init__(self, cpu, gpu, memory, hard_drive):\n        self.cpu = cpu\n        self.gpu = gpu\n        self.memory = memory\n        self.hard_drive = hard_drive\n\nclass CPU:\n    def __init__(self, brand, model, speed):\n        self.brand = brand\n        self.model = model\n        self.speed = speed\n\n# 类似地，你可以为 GPU、Memory、HardDrive 等组件定义类\n```\n\n如果需要将这些信息持久化存储到 MySQL 数据库中，你可以为每个组件类创建一个对应的表，表中的字段对应组件的属性。例如，`cpu` 表可以包含 `brand`、`model` 和 `speed` 等字段。你还需要一个 `computer` 表来存储每台电脑的信息，它可以包含指向各个组件的外键。\n\n以下是一个可能的数据库设计：\n\n- `cpu` 表：\n    - `id`（主键）\n    - `brand`\n    - `model`\n    - `speed`\n\n- `computer` 表：\n    - `id`（主键）\n    - `cpu_id`（外键，指向 `cpu` 表）\n    - `gpu_id`（外键，指向 `gpu` 表）\n    - `memory_id`（外键，指向 `memory` 表）\n    - `hard_drive_id`（外键，指向 `hard_drive` 表）\n\n请注意，这只是一个基本的设计，你可能需要根据实际需求进行调整，例如添加更多的组件类和数据库字段，或者处理组件之间的关系（如一台电脑可以有多个硬盘）。                                                                                                   .","like_count":0},{"had_liked":false,"id":384958,"user_name":"760418","can_delete":false,"product_type":"c3","uid":3768167,"ip_address":"上海","ucode":"C160176FE97575","user_header":"","comment_is_top":false,"comment_ctime":1701852979,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"self.cards = [allcards(r, s) for r in self.allRranks for s in self.colors] + [allcards(&#39;joke&#39;, s) for s in self.jokes]","like_count":0},{"had_liked":false,"id":382972,"user_name":"MarkG","can_delete":false,"product_type":"c3","uid":3675806,"ip_address":"山东","ucode":"454082595FE769","user_header":"https://static001.geekbang.org/account/avatar/00/38/16/9e/48621655.jpg","comment_is_top":false,"comment_ctime":1698248163,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"电脑组件包括：主板、cpu、内存、显卡、电源、机箱、显示器、鼠标、键盘\n每个电脑组件包括：品牌、名称、型号、价格、颜色、描述\n\nid：自增整数\n品牌：varchar\n名称：varchar\n型号：varchar\n价格：float\n颜色：varchar\n描述：varchar","like_count":0},{"had_liked":false,"id":380434,"user_name":"Geek_Mike","can_delete":false,"product_type":"c3","uid":3196376,"ip_address":"云南","ucode":"CFA942192C3B74","user_header":"https://static001.geekbang.org/account/avatar/00/30/c5/d8/c5509b9c.jpg","comment_is_top":false,"comment_ctime":1693560570,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"一、电脑组件对象\n1. 包含属性：组件类型id、组件类型名称、品牌、型号、描述、价格\n[{‘001’:’cpu’,  ‘brand’:’intel’, ‘model’:’xxx’, ‘description’:’xxx’, ‘price’:’xxx’}, {}, {}…]\n2. 包含方法：添加组件描述、删除组件描述、增加组件数量、减少组件数量、安装组件、移除组件、完成装机和展示\n\n二、MySQL字段\n电脑组件表，包含：组件类型id、组件类型名称、品牌、型号、描述、价格","like_count":0}]}