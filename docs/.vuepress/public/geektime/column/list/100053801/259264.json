{"id":259264,"title":"09 | 如何用仿射变换对几何图形进行坐标变换？","content":"<p>你好，我是月影。</p><p>前面两节课，我们学习了用向量表示的顶点，来描述曲线和多边形的方法。但是在实际绘制的时候，我们经常需要在画布上绘制许多轮廓相同的图形，难道这也需要我们重复地去计算每个图形的顶点吗？当然不需要。我们只需要创建一个基本的几何轮廓，然后通过<strong>仿射变换</strong>来改变几何图形的位置、形状、大小和角度。</p><p>仿射变换是拓扑学和图形学中一个非常重要的基础概念。利用它，我们才能在可视化应用中快速绘制出形态、位置、大小各异的众多几何图形。所以，这一节课，我们就来说一说仿射变换的数学基础和基本操作，它几乎会被应用到我们后面讲到的所有视觉呈现的案例中，所以你一定要掌握。</p><h2>什么是仿射变换？</h2><p>仿射变换简单来说就是“线性变换+平移”。实际上在平常的Web开发中，我们也经常会用到仿射变换，比如，对元素设置CSS的transform属性就是对元素应用仿射变换。</p><p>再说回到几何图形，针对它的仿射变换具有以下2个性质：</p><ol>\n<li>仿射变换前是直线段的，仿射变换后依然是直线段</li>\n<li>对两条直线段a和b应用同样的仿射变换，变换前后线段长度比例保持不变</li>\n</ol><p>由于仿射变换具有这两个性质，因此对线性空间中的几何图形进行仿射变换，就相当于对它的每个顶点向量进行仿射变换。</p><!-- [[[read_end]]] --><p>那具体怎么操作呢？下面，我们就来详细说说。</p><h2>向量的平移、旋转与缩放</h2><p>常见的仿射变换形式包括<strong>平移、旋转、缩放</strong>以及它们的组合。其中，平移变换是最简单的仿射变换。如果我们想让向量P(x<sub>0</sub>, y<sub>0</sub>)沿着向量Q(x<sub>1</sub>, y<sub>1</sub>)平移，只要将P和Q相加就可以了。</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/b5/3b1afc9f056d4840cb111252bcc179b5.jpeg?wh=1920*320\" alt=\"\" title=\"平移后的向量p的坐标\"></p><p><strong>接着是旋转变换</strong>。实际上，旋转变换我们在第5课接触过，当时我们把向量的旋转定义成了如下的函数：</p><pre><code>class Vector2D {\n  ...  \n  rotate(rad) {\n    const c = Math.cos(rad),\n      s = Math.sin(rad);\n    const [x, y] = this;\n\n    this.x = x * c + y * -s;\n    this.y = x * s + y * c;\n\n    return this;\n  }\n}\n</code></pre><p>但是，我们并没有讨论这个函数是怎么来的，那在这里我们通过三角函数来简单推导一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/91/18/914yy44e969c9f75f5413295eef29718.jpg?wh=1920*797\" alt=\"\"></p><p>假设向量P的长度为r，角度是⍺，现在我们要将它逆时针旋转⍬角，此时新的向量P’的参数方程为：</p><p><img src=\"https://static001.geekbang.org/resource/image/73/1b/7383bf5a2529bc6b1687617769b6da1b.jpeg?wh=1920*373\" alt=\"\"></p><p>然后，因为rcos⍺、rsin⍺是向量P原始的坐标x<sub>0</sub>、y<sub>0</sub>，所以，我们可以把坐标代入到上面的公式中，就会得到如下的公式：</p><p><img src=\"https://static001.geekbang.org/resource/image/88/f4/88aea77872789dfb0322db466315f5f4.jpeg?wh=1920*352\" alt=\"\"></p><p>最后，我们再将它写成矩阵形式，就会得到一个旋转矩阵。至于为什么要写成矩阵形式，我后面会讲，这里你先记住这个旋转矩阵的公式就可以了。</p><p><img src=\"https://static001.geekbang.org/resource/image/e5/a2/e52cae6173e2b4056e9aa752a93076a2.jpeg?wh=1920*302\" alt=\"\"></p><p><strong>然后是缩放变换</strong>。缩放变换也很简单，我们可以直接让向量与标量（标量只有大小、没有方向）相乘。</p><p><img src=\"https://static001.geekbang.org/resource/image/46/72/46d1bb8b507b1f1c9bc14dd6715a4372.jpeg?wh=1920*346\" alt=\"\"></p><p>对于得到的这个公式，我们也可以把它写成矩阵形式。结果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/2b/a4/2b15e082213c56756686771526afbda4.jpg?wh=1920*327\" alt=\"\"></p><p>现在，我们就得到了三个基本的仿射变换公式，其中旋转和缩放都可以写成矩阵与向量相乘的形式。这种能写成矩阵与向量相乘形式的变换，就叫做<strong>线性变换</strong>。线性变换除了可以满足仿射变换的2个性质之外，还有2个额外的性质：</p><ol>\n<li>线性变换不改变坐标原点（因为如果x<sub>0</sub>、y<sub>0</sub>等于零，那么x、y肯定等于0）；</li>\n<li>线性变换可以叠加，多个线性变换的叠加结果就是将线性变换的矩阵依次相乘，再与原始向量相乘。</li>\n</ol><p>那根据线性变换的第2条性质，我们就能总结出一个通用的线性变换公式，即一个原始向量P<sub>0</sub>经过M<sub>1</sub>、M<sub>2</sub>、…M<sub>n </sub>次的线性变换之后得到最终的坐标P。线性变化的叠加是一个非常重要的性质，它是我们对图形进行变换的基础，所以你一定要牢记线性变化的叠加性质。</p><p><img src=\"https://static001.geekbang.org/resource/image/de/c7/deca8b0bce015f249a48a5c6e7dcdfc7.jpeg?wh=1920*347\" alt=\"\"></p><p>好了，常见的仿射变换形式我们说完了。总的来说，向量的基本仿射变换分为平移、旋转与缩放，其中旋转与缩放属于线性变换，而平移不属于线性变换。基于此，我们可以得到仿射变换的一般表达式，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/57/c275c765a311e4faa2845435f9d54e57.jpg?wh=1920*472\" alt=\"\"></p><h2>仿射变换的公式优化</h2><p>上面这个公式我们还可以改写成矩阵的形式，在改写的公式里，我们实际上是给线性空间增加了一个维度。换句话说，我们用高维度的线性变换表示了低维度的仿射变换！</p><p><img src=\"https://static001.geekbang.org/resource/image/53/27/53e134cae1bfced9e5a1bd60df0aed27.jpeg?wh=1920*285\" alt=\"\"></p><p>这样，我们就将原本n维的坐标转换为了n+1维的坐标。这种n+1维坐标被称为<strong>齐次坐标</strong>，对应的矩阵就被称为<strong>齐次矩阵</strong>。</p><p>齐次坐标和齐次矩阵是可视化中非常常用的数学工具，它能让我们用线性变换来表示仿射变换。这样一来，我们就能利用线性变换的叠加性质，来非常方便地进行各种复杂的仿射变换了。落实到共识上，就是把这些变换的矩阵相乘得到一个新的矩阵，再把它乘以原向量。我们在绘制几何图形的时候会经常用到它，所以你要记住这个公式。</p><h2>仿射变换的应用：实现粒子动画</h2><p>好了，现在你已经知道了仿射变换的数学基础。那它该怎么应用呢？一个很常见的应用，就是利用它来实现粒子动画。</p><p>你可能还不熟悉粒子动画，我们先来快速认识一下它。它能在一定时间内生成许多随机运动的小图形，这类动画通常是通过给人以视觉上的震撼，来达到获取用户关注的效果。在可视化中，粒子动画可以用来表达数据信息本身（比如数量、大小等等），也可以用来修饰界面、吸引用户的关注，它是我们在可视化中经常会用到的一种视觉效果。</p><p>在粒子动画的实现过程中，我们通常需要在界面上快速改变一大批图形的大小、形状和位置，所以用图形的仿射变换来实现是一个很好的方法。</p><p>为了方便你理解，我们今天只讲一个简单的粒子动画。这个粒子动画的运行效果，是从一个点开始发射出许多颜色、大小、角度各异的三角形，并且通过不断变化它们的位置，产生一种撒花般的视觉效果。</p><h3>1. 创建三角形</h3><p>因为这个粒子动画中主要用到了三角形，所以我们第一步就要创建三角形。<strong>创建三角形一共可以分为两步，第一步，</strong><strong>我们定义三角形的顶点并将数据送到缓冲区</strong>。这一步，你直接看下面创建WebGLProgram的步骤就能理解。如果你还不是很熟悉，我建议你复习一下第4节课的内容。</p><pre><code>const position = new Float32Array([\n  -1, -1,\n  0, 1,\n  1, -1,\n]);\nconst bufferId = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, bufferId);\ngl.bufferData(gl.ARRAY_BUFFER, position, gl.STATIC_DRAW);\n\nconst vPosition = gl.getAttribLocation(program, 'position');\ngl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);\ngl.enableVertexAttribArray(vPosition);\n</code></pre><p><strong>第二步，我们实现一个创建随机三角形属性的函数</strong>。具体来说就是，利用randomTriangles随机创建一个三角形的信息，其中的参数包括颜色u_color、初始旋转角度u_rotation、初始大小u_scale、初始时间u_time、动画持续时间u_diration、运动方向u_dir和创建时间startTime。除了startTime之外的数据，我们都需要传给shader去处理。</p><pre><code>function randomTriangles() {\n  const u_color = [Math.random(), Math.random(), Math.random(), 1.0]; // 随机颜色\n  const u_rotation = Math.random() * Math.PI; // 初始旋转角度\n  const u_scale = Math.random() * 0.05 + 0.03; // 初始大小\n  const u_time = 0;\n  const u_duration = 3.0; // 持续3秒钟\n\n  const rad = Math.random() * Math.PI * 2;\n  const u_dir = [Math.cos(rad), Math.sin(rad)]; // 运动方向\n  const startTime = performance.now();\n\n  return {u_color, u_rotation, u_scale, u_time, u_duration, u_dir, startTime};\n}\n</code></pre><h3>2.  设置uniform变量</h3><p>通过前面的代码，我们已经将三角形顶点信息传入缓冲区。我们知道，在WebGL的shader中，顶点相关的变量可以用attribute声明。但是，我们现在要把u_color、u_rotation等一系列变量也传到shader中，这些变量与三角形具体顶点无关，它们是一些固定的值。这时候，我们就要用到shader的另一种变量声明，也就是uniform来声明。</p><p>那它们有什么区别呢？首先，attribute变量是对应于顶点的。也就是说，几何图形有几个顶点就要提供几份attribute数据。并且，attribute变量只能在顶点着色器中使用，如果要在片元着色器中使用，需要我们通过varying变量将它传给片元着色器才行。这样一来，片元着色器中获取的实际值，就是经过顶点线性插值的。</p><p>而uniform声明的变量不同，uniform声明的变量和其他语言中的常量一样，我们赋给unform变量的值在shader执行的过程中不可改变。而且一个变量的值是唯一的，不随顶点变化。<strong>uniform变量既可以在顶点着色器中使用，也可以在片元着色器中使用。</strong></p><p>在WebGL中，我们可以通过 gl.uniformXXX(loc, u_color); 的方法将数据传给shader的uniform变量。其中，XXX是我们随着数据类型不同取得不同的名字。我在下面列举了一些比较常用的，你可以看看：</p><ul>\n<li>gl.uniform1f传入一个浮点数，对应的uniform变量的类型为float</li>\n<li>gl.uniform4f传入四个浮点数，对应的uniform变量类型为float[4]</li>\n<li>gl.uniform3fv传入一个三维向量，对应的uniform变量类型为vec3</li>\n<li>gl.uniformMatrix4fv传入一个4x4的矩阵，对应的uniform变量类型为mat4</li>\n</ul><p>今天，关于WebGL的uniform的设置，我们只需要知道这个最常用的方法就可以了，更详细的设置信息，你可以参考<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform\">MDN官方文档</a>。</p><p>接下来，我们实现这个函数，将随机三角形信息传给shader里的uniform变量。代码如下：</p><pre><code>function setUniforms(gl, {u_color, u_rotation, u_scale, u_time, u_duration, u_dir}) {\n  // gl.getUniformLocation 拿到uniform变量的指针\n  let loc = gl.getUniformLocation(program, 'u_color');\n  // 将数据传给 unfirom 变量的地址\n  gl.uniform4fv(loc, u_color);\n\n  loc = gl.getUniformLocation(program, 'u_rotation');\n  gl.uniform1f(loc, u_rotation);\n\n  loc = gl.getUniformLocation(program, 'u_scale');\n  gl.uniform1f(loc, u_scale);\n\n  loc = gl.getUniformLocation(program, 'u_time');\n  gl.uniform1f(loc, u_time);\n\n  loc = gl.getUniformLocation(program, 'u_duration');\n  gl.uniform1f(loc, u_duration);\n\n  loc = gl.getUniformLocation(program, 'u_dir');\n  gl.uniform2fv(loc, u_dir);\n}\n</code></pre><h3>3. 用requestAnimationFrame实现动画</h3><p>然后，我们使用requestAnimationFrame实现动画。具体的方法就是，我们在update方法中每次新建数个随机三角形，然后依次修改所有三角形的u_time属性，通过setUniforms方法将修改的属性更新到shader变量中。这样，我们就可以在shader中读取变量的值进行处理了。代码如下：</p><pre><code>let triangles = [];\n\nfunction update() {\n  for(let i = 0; i &lt; 5 * Math.random(); i++) {\n    triangles.push(randomTriangles());\n  }\n  gl.clear(gl.COLOR_BUFFER_BIT);\n  // 对每个三角形重新设置u_time\n  triangles.forEach((triangle) =&gt; {\n    triangle.u_time = (performance.now() - triangle.startTime) / 1000;\n    setUniforms(gl, triangle);\n    gl.drawArrays(gl.TRIANGLES, 0, position.length / 2);\n  });\n  // 移除已经结束动画的三角形\n  triangles = triangles.filter((triangle) =&gt; {\n    return triangle.u_time &lt;= triangle.u_duration;\n  });\n  requestAnimationFrame(update);\n}\n\nrequestAnimationFrame(update);\n</code></pre><p>我们再回过头来看最终要实现的效果。你会发现，所有的三角形，都是由小变大朝着特定的方向旋转。那想要实现这个效果，我们就需要用到前面讲过的仿射变换，在顶点着色器中进行矩阵运算。</p><p>在这一步中，顶点着色器中的glsl代码最关键，我们先来看一下这个代码是怎么写的。</p><pre><code>attribute vec2 position;\n\nuniform float u_rotation;\nuniform float u_time;\nuniform float u_duration;\nuniform float u_scale;\nuniform vec2 u_dir;\n\nvarying float vP;\n\nvoid main() {\n  float p = min(1.0, u_time / u_duration);\n  float rad = u_rotation + 3.14 * 10.0 * p;\n  float scale = u_scale * p * (2.0 - p);\n  vec2 offset = 2.0 * u_dir * p * p;\n  mat3 translateMatrix = mat3(\n    1.0, 0.0, 0.0,\n    0.0, 1.0, 0.0,\n    offset.x, offset.y, 1.0\n  );\n  mat3 rotateMatrix = mat3(\n    cos(rad), sin(rad), 0.0,\n    -sin(rad), cos(rad), 0.0,\n    0.0, 0.0, 1.0\n  );\n  mat3 scaleMatrix = mat3(\n    scale, 0.0, 0.0,\n    0.0, scale, 0.0,\n    0.0, 0.0, 1.0\n  );\n  gl_PointSize = 1.0;\n  vec3 pos = translateMatrix * rotateMatrix * scaleMatrix * vec3(position, 1.0);\n  gl_Position = vec4(pos, 1.0);\n  vP = p;\n}\n</code></pre><p>其中有几个关键参数，你可能还比较陌生，我来分别介绍一下。</p><p>首先，我们定义的p是当前动画进度，它的值是u_time / u_duration，取值区间从0到1。rad是旋转角度，它的值是初始角度u_rotation加上10π，表示在动画过程中它会绕自身旋转5周。</p><p>其次，scale是缩放比例，它的值是初始缩放比例乘以一个系数，这个系数是p * (2.0 - p)，在我们后面讨论动画的时候你会知道，p * (2.0 - p)是一个缓动函数，在这里我们只需要知道，它的作用是让scale的变化量随着时间推移逐渐减小就可以了。</p><p>最后，offset是一个二维向量，它是初始值u_dir与 2.0 * p * p 的乘积，因为u_dir是个单位向量，这里的2.0表示它的最大移动距离为 2，p * p也是一个缓动函数，作用是让位移的变化量随着时间增加而增大。</p><p>定义完这些参数以后，我们得到三个齐次矩阵：translateMatrix是偏移矩阵，rotateMatrix是旋转矩阵，scaleMatrix是缩放矩阵。我们将pos的值设置为这三个矩阵与position的乘积，这样就完成对顶点的线性变换，呈现出来的效果也就是三角形会向着特定的方向旋转、移动和缩放。</p><h3>4. 在片元着色器中着色</h3><p>最后，我们在片元着色器中对这些三角形着色。我们将p也就是动画进度，从顶点着色器通过变量varying vP传给片元着色器，然后在片元着色器中让alpha值随着vP值变化，这样就能同时实现粒子的淡出效果了。</p><p>片元着色器中的代码如下：</p><pre><code> precision mediump float;\n  uniform vec4 u_color;\n  varying float vP;\n\n  void main()\n  {\n    gl_FragColor.xyz = u_color.xyz;\n    gl_FragColor.a = (1.0 - vP) * u_color.a;\n  }  \n</code></pre><p>到这里，我们就用仿射变换实现了一个有趣的粒子动画。</p><h2>CSS的仿射变换</h2><p>既然我们讲了仿射变换，这里还是要再提一下CSS中我们常用的属性transform。</p><pre><code>div.block {\n  transform: rotate(30deg) translate(100px,50px) scale(1.5);\n}\n</code></pre><p>CSS中的transform是一个很强大的属性，它的作用其实也是对元素进行仿射变换。</p><p>它不仅支持translate、rotate、scale等值，还支持matrix。CSS的matrix是一个简写的齐次矩阵，因为它省略了3阶齐次矩阵第三行的0, 0, 1值，所以它 只有6个值。</p><p>transform在CSS中变换元素的方法，我们作为前端工程师都比较熟悉了。但你知道怎么优化它来提高性能吗？下面，我就重点来说说这一点。</p><p>结合上面介绍的齐次矩阵变换的原理，我们可以对CSS的transform属性进行压缩。举个例子，我们可以这么定义CSS transform，代码如下：</p><pre><code>div.block {\n  transform: rotate(30deg) translate(100px,50px) scale(1.5);\n}\n</code></pre><p>也就是我们先旋转30度，然后平移100px、50px，最后再放大1.5倍。实际上相当于我们做了如下变换：</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/98/5e18daef0ff059498804419b704c6a98.jpeg?wh=1920*389\" alt=\"\"></p><p>这里我就不再自己写矩阵乘法的库了，我们用一个向量矩阵运算的数学库math，它几乎包含了所有图形学需要用到的数学方法，我们在后面课程中也会经常用到它，你可以参考<a href=\"https://github.com/akira-cn/graphics/tree/master/common/lib/math\">GitHub仓库</a>先了解一下它。</p><p>我们简单算一下三个矩阵相乘，代码如下：</p><pre><code>import {multiply} from 'common/lib/math/functions/mat3fun.js';\n\nconst rad = Math.PI / 6;\nconst a = [\n  Math.cos(rad), -Math.sin(rad), 0,\n  Math.sin(rad), Math.cos(rad), 0,\n  0, 0, 1\n];\n\nconst b = [\n  1, 0, 100,\n  0, 1, 50,\n  0, 0, 1\n];\n\nconst c = [\n  1.5, 0, 0,\n  0, 1.5, 0,\n  0, 0, 1\n];\n\nconst res = [a, b, c].reduce((a, b) =&gt; {\n  return multiply([], b, a);\n});\n\nconsole.log(res);\n/*\n[1.299038105676658, -0.7499999999999999, 61.60254037844388, \n  0.7499999999999999, 1.299038105676658, 93.30127018922192,\n  0, 0, 1]\n*/\n</code></pre><p>所以呢，我们最终就可以将上面的transform用一个矩阵表示：</p><pre><code>div.block {\n  transform: matrix(1.3,0.75,-0.75,1.3,61.6,93.3)；\n}\n</code></pre><p>这样的transform效果和之前rotate、translate和scale分开写的效果是一样的，但是字符数更少，所以能减小CSS文件的大小。</p><p>那在我们介绍完仿射变换之后，你是不是对CSS transform的理解也更深了呢？没错，不光是transform，在我们之后的学习中，你也可以多想想，还有哪些内容在CSS中也有相似的作用，是不是也能利用在可视化中学到的知识来优化性能。</p><h2>要点总结</h2><p>这一节课我们介绍了用向量和矩阵运算来改变几何图形的形状、大小和位置。其中，向量的平移、旋转和缩放都属于仿射变换，而仿射变换具有2个性质：</p><ol>\n<li>变换前是直线段的，变换后依然是直线段</li>\n<li>对两条直线段a和b应用同样的仿射变换，变换前后线段长度比例保持不变</li>\n</ol><p>那仿射变换中的旋转和缩放又属于线性变换，而线性变换在仿射变换性质的基础上还有2个额外的性质：</p><ol>\n<li>线性变换不改变坐标原点（因为如果x<sub>0</sub>、y<sub>0</sub>等于零，那么x、y肯定等于0）</li>\n<li>线性变换可以叠加，多个线性变换的叠加结果就是将线性变换的矩阵依次相乘，再与向量相乘</li>\n</ol><p>通过齐次坐标和齐次矩阵，我们可以将平移这样的非线性仿射变换用更高维度的线性变换来表示。这么做的目的是让我们能够将仿射变换的组合简化为矩阵乘法运算。</p><p>到这里，数学基础篇的内容我们就学完了。在这一篇的开头，我们说了要总结出一个通用的基础数学绘图体系，这样才不至于陷入细节里。所以啊，我总结了一个简单的知识脑图，把我们在数学篇里讲过的数学知识汇总到了一起，它肯定不会是一个非常完整的数学绘图体系，但是对我们之后的学习来说，已经足够用了。</p><p><img src=\"https://static001.geekbang.org/resource/image/bf/7c/bfdd8c7f5f15e5b703128cdaf419f07c.jpg?wh=2515*2158\" alt=\"\"></p><p>最后呢，我还想再啰嗦几句。图形学作为可视化的基础，是一门很深的学问。它牵涉的数学内容非常多，包括线性代数、几何、微积分和概率统计等等。那这门课里我们所介绍的数学知识，其实还都只是一些入门知识。</p><p>那如果你对图形学本身很感兴趣，想要深入学习它在其他领域，比如游戏、视频、AR/VR等领域的应用，这里我推荐你一些深入学习的资料。</p><ol>\n<li><a href=\"https://www.youtube.com/watch?v=fNk_zzaMoSs&amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab\">3Blue1Brown的数学和图形学基础课程</a> 讲得深入浅出，是非常棒的入门教程。</li>\n<li><a href=\"https://book.douban.com/subject/26868819/\">《Fundamentals of Computer Graphics》</a>这本书是图形学入门的经典教材。</li>\n</ol><h2>小试牛刀</h2><ol>\n<li>\n<p>在实现粒子动画的时候，我们让translateMatrix * rotateMatrix * scaleMatrix，这三个矩阵按这样的顺序相乘。那如果我们颠倒它们的相乘次序，把roateMatrix放到translateMatrix前面，或者把scaleMatrix放到translateMatrix前面，会产生什么样的结果呢？为什么呢？你可以思考一下，然后从GitHub上fork代码，动手试一试。</p>\n</li>\n<li>\n<p>我们知道，CSS的transform除了translate、rotate和scale变换以外，还有skew变换。skew变换是一种沿着轴向的扭曲变换，它也属于一种线性变换，它的变换矩阵是：<br>\n<img src=\"https://static001.geekbang.org/resource/image/b2/44/b265fbd6719e6785c9d0da9364a91f44.jpeg?wh=1920*460\" alt=\"\"></p>\n</li>\n</ol><p>你可以使用这个矩阵，给我们的粒子动画加上随机的扭曲效果吗？</p><ol start=\"3\">\n<li>因为齐次坐标和齐次矩阵的概念，可以从二维一直推广到N维，而且CSS的transform还支持3D变换。那你可以用齐次矩阵的原理对CSS属性的3D变换应用matrix3d，实现出有趣的3D变换效果吗？（💡小提示：要支持3维的齐次坐标，需要4维齐次矩阵）？</li>\n</ol><p>欢迎在留言区和我讨论，分享你的答案和思考，也欢迎你把这节课分享给你的朋友，我们下节课见！</p><hr><h2><span class=\"reference\">源码</span></h2><p><span class=\"reference\">[1]粒子动画的<a href=\"https://github.com/akira-cn/graphics/tree/master/webgl_particles\">完整代码</a></span></p><p><span class=\"reference\">[2]矩阵运算数学库的<a href=\"https://github.com/akira-cn/graphics/tree/master/common/lib/math\">完整代码</a></span></p><h2><span class=\"reference\">推荐阅读</span></h2><p><span class=\"reference\">[1]WebGL的uniform变量设置<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform\">官方文档</a></span></p><p><span class=\"reference\">[2]<a href=\"https://www.youtube.com/watch?v=fNk_zzaMoSs&amp;list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab\">3Blue1Brown的数学和图形学基础课程</a> </span></p><p><span class=\"reference\">[3]图形学入门经典教材<a href=\"https://book.douban.com/subject/26868819/\">《Fundamentals of Computer Graphics》</a></span></p>","neighbors":{"left":{"article_title":"08 | 如何利用三角剖分和向量操作描述并处理多边形？","id":258101},"right":{"article_title":"10 | 图形系统如何表示颜色？","id":260922}},"comments":[{"had_liked":false,"id":233483,"user_name":"廖熊猫","can_delete":false,"product_type":"c1","uid":1141444,"ip_address":"","ucode":"8E8C475CD11FBC","user_header":"https://static001.geekbang.org/account/avatar/00/11/6a/c4/8679ca8a.jpg","comment_is_top":false,"comment_ctime":1594342539,"is_pvip":false,"replies":[{"id":"86180","content":"👍","user_name":"作者回复","comment_id":233483,"uid":"1159792","ip_address":"","utype":1,"ctime":1594346852,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"83198721163","product_id":100053801,"comment_content":"3Blue1Brown 的数学和图形学基础课程，打不开的同学，在3B1B在B站也有账号，老师发的这个是《线性代数的本质》，搜索一下就能找到了，这个视频看完以后对矩阵的理解就能深入很多了","like_count":20,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501058,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594346852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1620455,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b9/e7/74de54d9.jpg","nickname":"黑暗森林","note":"","ucode":"77CD53149482A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377040,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622471278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234516,"user_name":"Geek_frank","can_delete":false,"product_type":"c1","uid":2049021,"ip_address":"","ucode":"CF973E61ED2E59","user_header":"https://static001.geekbang.org/account/avatar/00/1f/43/fd/cf190699.jpg","comment_is_top":false,"comment_ctime":1594712306,"is_pvip":true,"replies":[{"id":"87187","content":"如果没报错，只是shader写的问题导致结果不对，调试起来是比较麻烦，只能有耐心地修改并测试结果了","user_name":"作者回复","comment_id":234516,"uid":"1159792","ip_address":"","utype":1,"ctime":1595293257,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"10184646898","product_id":100053801,"comment_content":"请问关于 webgl绘图如何代码测试？我照着代码敲一遍，没有变换效果，也不报错。把github的代码复制过来就可以运行了。","like_count":2,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501412,"discussion_content":"如果没报错，只是shader写的问题导致结果不对，调试起来是比较麻烦，只能有耐心地修改并测试结果了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595293257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1620455,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b9/e7/74de54d9.jpg","nickname":"黑暗森林","note":"","ucode":"77CD53149482A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377043,"discussion_content":"gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)可以查看shader是否编译成功 并返回相关的信息 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622471556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246615,"user_name":"Thoughtful valiant.","can_delete":false,"product_type":"c1","uid":1078689,"ip_address":"","ucode":"669EFFC64395B1","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/a1/be1a3bce.jpg","comment_is_top":false,"comment_ctime":1599439215,"is_pvip":false,"replies":[{"id":"94973","content":"棒棒哒","user_name":"作者回复","comment_id":246615,"uid":"1159792","ip_address":"","utype":1,"ctime":1605493470,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"5894406511","product_id":100053801,"comment_content":"小伙伴可以康康我之前写的这两篇文章：<br>仿射变换理论篇：https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;-aZ3tUgMv0uGOmbov-RRhw<br>仿射变换实操篇：<br>https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;LsDRJ6iJ5q1kNJA6xdADGQ<br>","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505193,"discussion_content":"棒棒哒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605493470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235658,"user_name":"阿鑫","can_delete":false,"product_type":"c1","uid":1230313,"ip_address":"","ucode":"97A0BE95FB7383","user_header":"https://static001.geekbang.org/account/avatar/00/12/c5/e9/4013a191.jpg","comment_is_top":false,"comment_ctime":1595139295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890106591","product_id":100053801,"comment_content":"数学知识全还给老师了","like_count":1},{"had_liked":false,"id":325753,"user_name":"Leon two✌🏻","can_delete":false,"product_type":"c1","uid":1962497,"ip_address":"","ucode":"871CDB528384FB","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f2/01/fc1aad31.jpg","comment_is_top":false,"comment_ctime":1639116996,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1639116996","product_id":100053801,"comment_content":"请问老师，如果想要动态的改变顶点的数据，不知道要怎么做呢，比如实现粒子效果跟随鼠标点击&#47;移动的位置","like_count":0,"discussions":[{"author":{"id":1249969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/12/b1/3a112b27.jpg","nickname":"段帅帅","note":"","ucode":"2675BC0BE154E8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581159,"discussion_content":"白学了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658560595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315670,"user_name":"ih gwyc","can_delete":false,"product_type":"c1","uid":1738427,"ip_address":"","ucode":"2CE75B2C96BB67","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/bb/115160a1.jpg","comment_is_top":false,"comment_ctime":1633940957,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1633940957","product_id":100053801,"comment_content":"我想这就是为什么越学到后面人越少的原因了，都卡在数学这块了吧~~~~","like_count":0,"discussions":[{"author":{"id":1249969,"avatar":"https://static001.geekbang.org/account/avatar/00/13/12/b1/3a112b27.jpg","nickname":"段帅帅","note":"","ucode":"2675BC0BE154E8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581160,"discussion_content":"一周了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658560611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297108,"user_name":"MG.Fre","can_delete":false,"product_type":"c1","uid":2438273,"ip_address":"","ucode":"F13921B03CC4D5","user_header":"https://static001.geekbang.org/account/avatar/00/25/34/81/f44f2f11.jpg","comment_is_top":false,"comment_ctime":1623313915,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623313915","product_id":100053801,"comment_content":"月影老师，粒子动画中最后三个矩阵与 position 的乘积，程序是从右向左计算的吗，我的理解是先一定要旋转或者缩放后才能进行平移。","like_count":0},{"had_liked":false,"id":296982,"user_name":"勿更改任何信息","can_delete":false,"product_type":"c1","uid":2028956,"ip_address":"","ucode":"575185C69C05A3","user_header":"","comment_is_top":false,"comment_ctime":1623247913,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1623247913","product_id":100053801,"comment_content":"float rad = u_rotation + 3.14 * 10.0 * p;<br>粒子动画里的顶点着色器代码有这么一行， 不理解为啥这里是乘以 10 ？","like_count":0,"discussions":[{"author":{"id":1962497,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/f2/01/fc1aad31.jpg","nickname":"Leon two✌🏻","note":"","ucode":"871CDB528384FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537376,"discussion_content":"半圈旋转Math.PI = 3.14，* 10 就是旋转五圈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639045151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296896,"user_name":"勿更改任何信息","can_delete":false,"product_type":"c1","uid":2028956,"ip_address":"","ucode":"575185C69C05A3","user_header":"","comment_is_top":false,"comment_ctime":1623217784,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1623217784","product_id":100053801,"comment_content":"顶点着色器中，为何如下实现？ <br>    float p = min(1.0, u_time &#47; u_duration);<br>为什么不能直接     float p = u_time &#47; u_duration; 呢","like_count":0,"discussions":[{"author":{"id":1102126,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d1/2e/ad6315ab.jpg","nickname":"聂士伟","note":"","ucode":"C1624B259BB34E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394738,"discussion_content":"这样可以防止精度误差导致的进度越界，因为按时间计算进度的话，取值范围在[0,1.0]","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1632022421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287737,"user_name":"Gyrate","can_delete":false,"product_type":"c1","uid":2074062,"ip_address":"","ucode":"0F799A139826EB","user_header":"https://static001.geekbang.org/account/avatar/00/1f/a5/ce/e4fae1bb.jpg","comment_is_top":false,"comment_ctime":1618129283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618129283","product_id":100053801,"comment_content":"老师，请问有没有办法对顶点着色器和片元着色器中的GLSL代码进行调试呢","like_count":0},{"had_liked":false,"id":241509,"user_name":"白夜","can_delete":false,"product_type":"c1","uid":1169110,"ip_address":"","ucode":"72FAE44C19F592","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/d6/c757b62c.jpg","comment_is_top":false,"comment_ctime":1597314655,"is_pvip":false,"replies":[{"id":"89828","content":"赞������","user_name":"作者回复","comment_id":241509,"uid":"1159792","ip_address":"","utype":1,"ctime":1598313884,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"1597314655","product_id":100053801,"comment_content":"关于老师例子中vertex矩阵的一些笔记，帮助不太明白的同学：<br><br>首先，glsl中矩阵的定义是先列后行的，也就是我们理解的矩阵的转置矩阵（行列互换）<br><br>旋转：<br><br>|cosA  -sinA  0|     |x|        |xcosA-ysinA|<br>|sinA  cosA   0|  *  |y|   =   |xsinA+ycosA|   =  |x, y| 旋转A度<br>|0     0         1|      |1|        |1               |<br><br><br>位移：<br><br>|1  0   A|     |x|          |x+A|<br>|0  1   B|  *  |y|   =    |y+B|   =  |x, y| 位移 |A, B|<br>|0  0   0|     |1|         |1    |        <br><br><br>缩放：<br><br>|A  0   0|      |x|        |x*A|<br>|0  B   0|  *  |y|   =   |y*B|   =  |x, y| 中x缩放A，y缩放B<br>|0  0   0|      |1|        |1    |   <br><br><br>所以按照定义将矩阵转置一下，就得到代码中定义的三个Matrix","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503758,"discussion_content":"赞������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598313884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1962497,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/f2/01/fc1aad31.jpg","nickname":"Leon two✌🏻","note":"","ucode":"871CDB528384FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537582,"discussion_content":"理解了，感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639107155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238331,"user_name":"kylin","can_delete":false,"product_type":"c1","uid":1351248,"ip_address":"","ucode":"3588B62A4F9534","user_header":"https://static001.geekbang.org/account/avatar/00/14/9e/50/21e0beca.jpg","comment_is_top":false,"comment_ctime":1596123013,"is_pvip":true,"replies":[{"id":"88081","content":"因为矩阵可以以行主序，也可以以列主序，在glsl中默认是以列主序","user_name":"作者回复","comment_id":238331,"uid":"1159792","ip_address":"","utype":1,"ctime":1596167365,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"1596123013","product_id":100053801,"comment_content":"大佬，粒子系统中顶点着色器中的矩阵为啥是你前面讲的矩阵的转置呢？","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502708,"discussion_content":"因为矩阵可以以行主序，也可以以列主序，在glsl中默认是以列主序","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596167365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234202,"user_name":"Geek_frank","can_delete":false,"product_type":"c1","uid":2049021,"ip_address":"","ucode":"CF973E61ED2E59","user_header":"https://static001.geekbang.org/account/avatar/00/1f/43/fd/cf190699.jpg","comment_is_top":false,"comment_ctime":1594618792,"is_pvip":true,"replies":[{"id":"87192","content":"哈哈，我觉得大学课程安排失败，大一大二基础课并不告诉你这些内容的实际用途，所以没动力学。大三大四开始应用的时候才发现基础没学好。","user_name":"作者回复","comment_id":234202,"uid":"1159792","ip_address":"","utype":1,"ctime":1595293470,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"1594618792","product_id":100053801,"comment_content":"。。。学了这么久的线性代数，现在终于知道一点某些概念在现实中的映射了！","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501316,"discussion_content":"哈哈，我觉得大学课程安排失败，大一大二基础课并不告诉你这些内容的实际用途，所以没动力学。大三大四开始应用的时候才发现基础没学好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595293470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}