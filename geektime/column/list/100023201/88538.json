{"id":88538,"title":"JavaScript语法（二）：你知道哪些JavaScript语句？","content":"<p>你好，我是winter。</p><p>我们在上一节课中已经讲过了JavaScript语法的顶层设计，接下来我们进入到更具体的内容。</p><p>JavaScript遵循了一般编程语言的“语句-表达式”结构，多数编程语言都是这样设计的。我们在上节课讲的脚本，或者模块都是由语句列表构成的，这一节课，我们就来一起了解一下语句。</p><p>在JavaScript标准中，把语句分成了两种：声明和语句，不过，这里的区分逻辑比较奇怪，所以，这里我还是按照自己的思路给你整理一下。</p><p>普通语句：</p><p><img src=\"https://static001.geekbang.org/resource/image/81/55/8186219674547691cf59e5c095304d55.png?wh=564*786\" alt=\"\"></p><p>声明型语句：</p><p><img src=\"https://static001.geekbang.org/resource/image/0e/38/0e5327528df12d1eaad52c4005efff38.jpg?wh=1043*625\" alt=\"\"></p><p>我们根据上面的分类，来遍历学习一下这些语句。</p><h2>语句块</h2><p>我们可以这样去简单理解，语句块就是一对大括号。</p><pre><code class=\"language-JavaScript\">{\n    var x, y;\n    x = 10;\n    y = 20;\n}\n</code></pre><p>语句块的意义和好处在于：让我们可以把多行语句视为同一行语句，这样，if、for等语句定义起来就比较简单了。不过，我们需要注意的是，语句块会产生作用域，我们看一个例子：</p><pre><code class=\"language-JavaScript\">{\n    let x = 1;\n}\nconsole.log(x); // 报错\n</code></pre><p>这里我们的let声明，仅仅对语句块作用域生效，于是我们在语句块外试图访问语句块内的变量x就会报错。</p><h2>空语句</h2><p>空语句就是一个独立的分号，实际上没什么大用。我们来看一下：</p><pre><code class=\"language-JavaScript\">;\n</code></pre><p>空语句的存在仅仅是从语言设计完备性的角度考虑，允许插入多个分号而不抛出错误。</p><!-- [[[read_end]]] --><h2>if语句</h2><p>if语句是条件语句。我想，对多数人来说，if语句都是熟悉的老朋友了，也没有什么特别需要注意的用法，但是为了我们课程的完备性，这里还是要讲一下。</p><p>if语句示例如下：</p><pre><code class=\"language-JavaScript\">if(a &lt; b)\n    console.log(a);\n</code></pre><p>if语句的作用是，在满足条件时执行它的内容语句，这个语句可以是一个语句块，这样就可以实现有条件地执行多个语句了。</p><p>if语句还有else结构，用于不满足条件时执行，一种常见的用法是，利用语句的嵌套能力，把if和else连写成多分支条件判断：</p><pre><code class=\"language-JavaScript\">if(a &lt; 10) {\n    //...\n} else if(a &lt; 20) {\n    //...\n} else if(a &lt; 30) {\n    //...\n} else {\n    //...\n}\n</code></pre><p>这段代码表示四个互斥的分支，分别在满足a&lt;10、a&lt;20、a&lt;30和其它情况时执行。</p><h2>switch语句</h2><p>switch语句继承自Java，Java中的switch语句继承自C和C++，原本switch语句是跳转的变形，所以我们如果要用它来实现分支，必须要加上break。</p><p>其实switch原本的设计是类似goto的思维。我们看一个例子：</p><pre><code class=\"language-JavaScript\">switch(num) {\ncase 1:\n    print(1);\ncase 2:\n    print 2;\ncase 3:\n    print 3;\n}\n</code></pre><p>这段代码当num为1时输出1 2 3，当num为2时输出2 3，当num为3时输出3。如果我们要把它变成分支型，则需要在每个case后加上break。</p><pre><code class=\"language-JavaScript\">switch(num) {\ncase 1:\n    print 1;\n    break;\ncase 2:\n    print 2;\n    break;\ncase 3:\n    print 3;\n    break;\n}\n</code></pre><p>在C时代，switch生成的汇编代码性能是略优于if else的，但是对JavaScript来说，则无本质区别。我个人的看法是，现在switch已经完全没有必要使用了，应该用if else结构代替。</p><h2>循环语句</h2><p>循环语句应该也是你所熟悉的语句了，这里我们把重点放在一些新用法上。</p><h3>while循环和do while循环</h3><p>这两个都是历史悠久的JavaScript语法了，示例大概如下：</p><pre><code class=\"language-JavaScript\">let a = 100\nwhile(a--) {\n    console.log(\"*\");\n}\n</code></pre><pre><code class=\"language-JavaScript\">let a = 101;\ndo {\n    console.log(a);\n} while(a &lt; 100)\n</code></pre><p>注意，这里do while循环无论如何至少会执行一次。</p><h3>普通for循环</h3><p>首先我们来看看普通的for循环。</p><pre><code class=\"language-JavaScript\">\nfor(i = 0; i &lt; 100; i++)\n    console.log(i);\n\nfor(var i = 0; i &lt; 100; i++)\n    console.log(i);\n\nfor(let i = 0; i &lt; 100; i++)\n    console.log(i);\n\nvar j = 0;\nfor(const i = 0; j &lt; 100; j++)\n    console.log(i);\n\n</code></pre><p>这里为了配合新语法，加入了允许let和const，实际上，const在这里是非常奇葩的东西，因为这里声明和初始化的变量，按惯例是用于控制循环的，但是它如果是const就没法改了。</p><p>我想，这一点可能是从保持let和const一致性的角度考虑的吧。</p><h3>for in循环</h3><p>for in 循环枚举对象的属性，这里体现了属性的enumerable特征。</p><pre><code class=\"language-JavaScript\">let o = { a: 10, b: 20}\nObject.defineProperty(o, \"c\", {enumerable:false, value:30})\n\nfor(let p in o)\n    console.log(p);\n\n</code></pre><p>这段代码中，我们定义了一个对象o，给它添加了不可枚举的属性c，之后我们用for in循环枚举它的属性，我们会发现，输出时得到的只有a和b。</p><p>如果我们定义c这个属性时，enumerable为true，则for in循环中也能枚举到它。</p><h3>for of循环和for await of循环</h3><p>for of循环是非常棒的语法特性。</p><p>我们先看下基本用法，它可以用于数组：</p><pre><code class=\"language-JavaScript\">for(let e of [1, 2, 3, 4, 5])\n    console.log(e);\n</code></pre><p>但是实际上，它背后的机制是iterator机制。</p><p>我们可以给任何一个对象添加iterator，使它可以用于for of语句，看下示例：</p><pre><code class=\"language-JavaScript\">let o = {  \n    [Symbol.iterator]:() =&gt; ({\n        _value: 0,\n        next(){\n            if(this._value == 10)\n                return {\n                    done: true\n                }\n            else return {\n                value: this._value++,\n                done: false\n            };\n        }\n    })\n}\nfor(let e of o)\n    console.log(e);\n\n</code></pre><p>这段代码展示了如何为一个对象添加iterator。但是，在实际操作中，我们一般不需要这样定义iterator，我们可以使用generator function。</p><pre><code class=\"language-JavaScript\">function* foo(){\n    yield 0;\n    yield 1;\n    yield 2;\n    yield 3;\n}\nfor(let e of foo())\n    console.log(e);\n</code></pre><p>这段代码展示了generator function和foo的配合。</p><p>此外，JavaScript还为异步生成器函数配备了异步的for of，我们来看一个例子：</p><pre><code class=\"language-JavaScript\">function sleep(duration) {\n    return new Promise(function(resolve, reject) {\n        setTimeout(resolve,duration);\n    })\n}\nasync function* foo(){\n    i = 0;\n    while(true) {\n        await sleep(1000);\n        yield i++;\n    }\n        \n}\nfor await(let e of foo())\n    console.log(e);\n</code></pre><p>这段代码定义了一个异步生成器函数，异步生成器函数每隔一秒生成一个数字，这是一个无限的生成器。</p><p>接下来，我们使用for await of来访问这个异步生成器函数的结果，我们可以看到，这形成了一个每隔一秒打印一个数字的无限循环。</p><p>但是因为我们这个循环是异步的，并且有时间延迟，所以，这个无限循环的代码可以用于显示时钟等有意义的操作。</p><h2>return</h2><p>return语句用于函数中，它终止函数的执行，并且指定函数的返回值，这是大家非常熟悉语句了，也没有什么特殊之处。</p><pre><code class=\"language-JavaScript\">function squre(x){\n    return x * x;\n}\n</code></pre><p>这段代码展示了return的基本用法。它后面可以跟一个表达式，计算结果就是函数返回值。</p><h2>break语句和continue语句</h2><p>break语句用于跳出循环语句或者switch语句，continue语句用于结束本次循环并继续循环。</p><p>这两个语句都属于控制型语句，用法也比较相似，所以我们就一起讲了。需要注意的是，它们都有带标签的用法。</p><pre><code class=\"language-JavaScript\">outer:for(let i = 0; i &lt; 100; i++)\n    inner:for(let j = 0; j &lt; 100; j++)\n        if( i == 50 &amp;&amp; j == 50)\n            break outer;\nouter:for(let i = 0; i &lt; 100; i++)\n    inner:for(let j = 0; j &lt; 100; j++)\n        if( i &gt;= 50 &amp;&amp; j == 50)\n            continue outer;\n</code></pre><p>带标签的break和continue可以控制自己被外层的哪个语句结构消费，这可以跳出复杂的语句结构。</p><h2>with语句</h2><p>with语句是个非常巧妙的设计，但它把JavaScript的变量引用关系变得不可分析，所以一般都认为这种语句都属于糟粕。</p><p>但是历史无法改写，现在已经无法去除with了。我们来了解一下它的基本用法即可。</p><pre><code class=\"language-JavaScript\">let o = {a:1, b:2}\nwith(o){\n    console.log(a, b);\n}\n</code></pre><p>with语句把对象的属性在它内部的作用域内变成变量。</p><h2>try语句和throw语句</h2><p>try语句和throw语句用于处理异常。它们是配合使用的，所以我们就放在一起讲了。在大型应用中，异常机制非常重要。</p><pre><code class=\"language-JavaScript\">try {\n    throw new Error(\"error\");\n} catch(e) {\n    console.log(e);\n} finally {\n    console.log(\"finally\");\n}\n\n</code></pre><p>一般来说，throw用于抛出异常，但是单纯从语言的角度，我们可以抛出任何值，也不一定是异常逻辑，但是为了保证语义清晰，不建议用throw表达任何非异常逻辑。</p><p>try语句用于捕获异常，用throw抛出的异常，可以在try语句的结构中被处理掉：try部分用于标识捕获异常的代码段，catch部分则用于捕获异常后做一些处理，而finally则是用于执行后做一些必须执行的清理工作。</p><p>catch结构会创建一个局部的作用域，并且把一个变量写入其中，需要注意，在这个作用域，不能再声明变量e了，否则会出错。</p><p>在catch中重新抛出错误的情况非常常见，在设计比较底层的函数时，常常会这样做，保证抛出的错误能被理解。</p><p>finally语句一般用于释放资源，它一定会被执行，我们在前面的课程中已经讨论过一些finally的特征，即使在try中出现了return，finally中的语句也一定要被执行。</p><h2>debugger语句</h2><p>debugger语句的作用是：通知调试器在此断点。在没有调试器挂载时，它不产生任何效果。</p><p>介绍完普通语句，我们再来看看声明型语句。声明型语句跟普通语句最大区别就是声明型语句响应预处理过程，普通语句只有执行过程。</p><h2>var</h2><p>var声明语句是古典的JavaScript中声明变量的方式。而现在，在绝大多数情况下，let和const都是更好的选择。</p><p>我们在上一节课已经讲解了var声明对全局作用域的影响，它是一种预处理机制。</p><p>如果我们仍然想要使用var，我的个人建议是，把它当做一种“保障变量是局部”的逻辑，遵循以下三条规则：</p><ul>\n<li>声明同时必定初始化；</li>\n<li>尽可能在离使用的位置近处声明；</li>\n<li>不要在意重复声明。</li>\n</ul><p>例如：</p><pre><code class=\"language-JavaScript\">var x = 1, y = 2;\ndoSth(x, y);\n\nfor(var x = 0; x &lt; 10; x++)\n    doSth2(x);\n</code></pre><p>这个例子中，两次声明了变量x，完成了两段逻辑，这两个x意义上可能不一定相关，这样，不论我们把代码复制粘贴在哪里，都不会出错。</p><p>当然，更好的办法是使用let改造，我们看看如何改造：</p><pre><code class=\"language-JavaScript\">{\n    let x = 1, y = 2;\n    doSth(x, y);\n}\n\nfor(let x = 0; x &lt; 10; x++)\n    doSth2(x);\n</code></pre><p>这里我用代码块限制了第一个x的作用域，这样就更难发生变量命名冲突引起的错误了。</p><h2>let和const</h2><p>let和const是都是变量的声明，它们的特性非常相似，所以我们放在一起讲了。let和const是新设计的语法，所以没有什么硬伤，非常地符合直觉。let和const的作用范围是if、for等结构型语句。</p><p>我们看下基本用法：</p><pre><code class=\"language-JavaScript\">const a = 2;\nif(true){\n    const a = 1;\n    console.log(a);\n}\nconsole.log(a);\n</code></pre><p>这里的代码先在全局声明了变量a，接下来又在if内声明了a，if内构成了一个独立的作用域。</p><p>const和let语句在重复声明时会抛错，这能够有效地避免变量名无意中冲突：</p><pre><code class=\"language-JavaScript\">let a = 2\nconst a = 1;\n</code></pre><p>这段代码中，先用let声明了a，接下来又试图使用const声明变量a，这时，就会产生错误。</p><p>let和const声明虽然看上去是执行到了才会生效，但是实际上，它们还是会被预处理。如果当前作用域内有声明，就无法访问到外部的变量。我们来看这段代码：</p><pre><code class=\"language-JavaScript\">const a = 2;\nif(true){\n    console.log(a); //抛错\n    const a = 1;   \n}\n</code></pre><p>这里在if的作用域中，变量a声明执行到之前，我们访问了变量a，这时会抛出一个错误，这说明const声明仍然是有预处理机制的。</p><p>在执行到const语句前，我们的JavaScript引擎就已经知道后面的代码将会声明变量a，从而不允许我们访问外层作用域中的a。</p><h2>class声明</h2><p>我们在之前的课程中，已经了解过class相关的用法。这里我们再从语法的角度来看一遍：</p><pre><code class=\"language-JavaScript\">class a {\n\n}\n</code></pre><p>class最基本的用法只需要class关键字、名称和一对大括号。它的声明特征跟const和let类似，都是作用于块级作用域，预处理阶段则会屏蔽外部变量。</p><pre><code class=\"language-JavaScript\">const a = 2;\nif(true){\n    console.log(a); //抛错\n    class a {\n\n    }\n}\n</code></pre><p>class内部，可以使用constructor关键字来定义构造函数。还能定义getter/setter和方法。</p><pre><code class=\"language-JavaScript\">class Rectangle {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n  // Getter\n  get area() {\n    return this.calcArea();\n  }\n  // Method\n  calcArea() {\n    return this.height * this.width;\n  }\n}\n</code></pre><p>这个例子来自MDN，它展示了构造函数、getter和方法的定义。</p><p>以目前的兼容性，class中的属性只能写在构造函数中，相关标准正在TC39讨论。</p><p>需要注意，class默认内部的函数定义都是strict模式的。</p><h2>函数声明</h2><p>函数声明使用 function 关键字。</p><p>在上一节课中，我们已经讨论过函数声明对全局作用域的影响了。这一节课，我们来看看函数声明具体的内容，我们先看一下函数声明的几种类型。</p><pre><code class=\"language-JavaScript\">\nfunction foo(){\n\n}\n\nfunction* foo(){\n    yield 1;\n    yield 2;\n    yield 3;\n}\n\nasync function foo(){\n    await sleep(3000);\n    \n}\n\nasync function* foo(){\n    await sleep(3000);\n    yield 1;\n}\n\n</code></pre><p>带*的函数是generator，我们在前面的部分已经见过它了。生成器函数可以理解为返回一个序列的函数，它的底层是iterator机制。</p><p>async函数是可以暂停执行，等待异步操作的函数，它的底层是Promise机制。异步生成器函数则是二者的结合。</p><p>函数的参数，可以只写形参名，现在还可以写默认参数和指定多个参数，看下例子：</p><pre><code class=\"language-JavaScript\">\nfunction foo(a = 1, ...other) {\n    console.log(a, other)\n}\n</code></pre><p>这个形式可以代替一些对参数的处理代码，表意会更加清楚。</p><h2>结语</h2><p>今天我们一起学习了语句家族，语句分成了普通语句和声明型语句。</p><p>普通语句部分，建议你把重点放在循环语句上面。声明型语句我觉得都很重要，尤其是它们的行为。熟练掌握了它们，我们就可以在工作中去综合运用它们，从而减少代码中的错误。新特性大多可以帮助我们发现代码中的错误。</p><p>最后留一个小作业，请你找出所有具有Symbol.iterator的原生对象，并且看看它们的for of遍历行为。</p><p></p>","comments":[{"had_liked":false,"id":82811,"user_name":"mfist","can_delete":false,"product_type":"c1","uid":1373624,"ip_address":"","ucode":"4F99F422C23FB4","user_header":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","comment_is_top":false,"comment_ctime":1554333686,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"306497011702","product_id":100023201,"comment_content":"遍历了下window上面的全局对象，上面有Symbol.iterator的原生属性有15个，主要Array Set Map String相关的。当然还有很多宿主环境提供的全局对象有Symbol.iterator属性，他们有个共同的特征：都是些集合性质的数据结构。<br>0: &quot;Array&quot;<br>1: &quot;String&quot;<br>2: &quot;Uint8Array&quot;<br>3: &quot;Int8Array&quot;<br>4: &quot;Uint16Array&quot;<br>5: &quot;Int16Array&quot;<br>6: &quot;Uint32Array&quot;<br>7: &quot;Int32Array&quot;<br>8: &quot;Float32Array&quot;<br>9: &quot;Float64Array&quot;<br>10: &quot;Uint8ClampedArray&quot;<br>11: &quot;BigUint64Array&quot;<br>12: &quot;BigInt64Array&quot;<br>13: &quot;Map&quot;<br>14: &quot;Set&quot;","like_count":71,"discussions":[{"author":{"id":1344670,"avatar":"https://static001.geekbang.org/account/avatar/00/14/84/9e/05ed50dd.jpg","nickname":"2020","note":"","ucode":"0DEA914CDBE5B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300351,"discussion_content":"归类一下：String, Array, TypedArray, Map and Set 这五大类。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1598061157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2033513,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/07/69/43cf2251.jpg","nickname":"Alan He","note":"","ucode":"A0780F4619D388","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363106,"discussion_content":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617112676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102125,"user_name":"Chuck","can_delete":false,"product_type":"c1","uid":1375332,"ip_address":"","ucode":"476CC15D186D6D","user_header":"https://static001.geekbang.org/account/avatar/00/14/fc/64/dafdb4c3.jpg","comment_is_top":false,"comment_ctime":1560142883,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"199128638499","product_id":100023201,"comment_content":"Object.getOwnPropertyNames(window).filter(prop =&gt; {<br>\treturn window[prop] &amp;&amp; window[prop].prototype &amp;&amp; window[prop].prototype[Symbol.iterator]<br>}) <br><br>Array,String,Uint8Array,Int8Array,Uint16Array,Int16Array,Uint32Array,Int32Array,Float32Array,Float64Array,Uint8ClampedArray,BigUint64Array,BigInt64Array,Map,Set,SourceBufferList,RTCStatsReport,Plugin,PluginArray,MimeTypeArray,MIDIOutputMap,MIDIInputMap,AudioParamMap,URLSearchParams,TouchList,TextTrackList,TextTrackCueList,StyleSheetList,StylePropertyMapReadOnly,StylePropertyMap,SVGTransformList,SVGStringList,SVGPointList,SVGNumberList,SVGLengthList,RadioNodeList,NodeList,NamedNodeMap,MediaList,Headers,HTMLSelectElement,HTMLOptionsCollection,HTMLFormElement,HTMLFormControlsCollection,HTMLCollection,HTMLAllCollection,FormData,FileList,DataTransferItemList,DOMTokenList,DOMStringList,DOMRectList,CSSUnparsedValue,CSSTransformValue,CSSStyleDeclaration,CSSRuleList,CSSNumericArray,webkitSpeechGrammarList,KeyboardLayoutMap,MediaKeyStatusMap","like_count":46},{"had_liked":false,"id":92338,"user_name":"timik","can_delete":false,"product_type":"c1","uid":1509899,"ip_address":"","ucode":"8783CCEF173FEF","user_header":"https://static001.geekbang.org/account/avatar/00/17/0a/0b/4e3e70c3.jpg","comment_is_top":false,"comment_ctime":1557235903,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"61686778047","product_id":100023201,"comment_content":"老师，我记得有的书上或者是资料上说超过五次的if else 就最好用 switch case来替换。这样效率更好。您这里为什么说不用这个呢？","like_count":14,"discussions":[{"author":{"id":2048830,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/43/3e/07d372bd.jpg","nickname":"Summer","note":"","ucode":"C305AD8A2AF1C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290144,"discussion_content":"switch 在处理分支上，代码层次显得更清晰。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594357939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1377612,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJVvZjaeA6ZhCE7RdgPoHPtQQwWUgPmQC6ZHH9lwebmEMbQbkQViaKTib82B21j9ZaviaHQeHMHiaXy8w/132","nickname":"Kingsman95","note":"","ucode":"386237DAEB68AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2048830,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/43/3e/07d372bd.jpg","nickname":"Summer","note":"","ucode":"C305AD8A2AF1C3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319425,"discussion_content":"yy","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604027045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":290144,"ip_address":""},"score":319425,"extra":""}]},{"author":{"id":1085068,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8e/8c/4c430896.jpg","nickname":"DreamFox","note":"","ucode":"3D42D66CB4E128","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":100274,"discussion_content":"一秒钟执行上亿次计算，这性能可以忽略吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577246092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2276264,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ZYMI7KBUU2wV5VYwONw7LEhSodBw4eVPcWDaMbAa1mEjTB9jyjv3mTib2JGxXMggcZrFNh2mHu4lh0X4oqyPeag/132","nickname":"Geek_8321d8","note":"","ucode":"A737DB9504F06F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":334971,"discussion_content":"居然是语音，令人发指！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608038531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82220,"user_name":"阿成","can_delete":false,"product_type":"c1","uid":1390032,"ip_address":"","ucode":"CEC3CD65FB9333","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","comment_is_top":false,"comment_ctime":1554165514,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40208871178","product_id":100023201,"comment_content":"大概就这些？<br>Array, Map, Set, String, Float32Array, Float64Array, Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, Uint8ClampedArray","like_count":9},{"had_liked":false,"id":103767,"user_name":"break","can_delete":false,"product_type":"c1","uid":1325688,"ip_address":"","ucode":"674E5D42811E6F","user_header":"https://static001.geekbang.org/account/avatar/00/14/3a/78/85d264c3.jpg","comment_is_top":false,"comment_ctime":1560506051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27330309827","product_id":100023201,"comment_content":"感觉这文章应该从后往前看😆","like_count":7},{"had_liked":false,"id":82985,"user_name":"翰弟","can_delete":false,"product_type":"c1","uid":1144772,"ip_address":"","ucode":"42149ACC75AA08","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/EJZoM46wR6QqTeibhPZsO5wJTeUia4RndGicWfDZLw153WibjsnJXqEtGZICxAa8icb36pDkficTic3FViaySd1z9HmQBw/132","comment_is_top":false,"comment_ctime":1554365771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14439267659","product_id":100023201,"comment_content":"Array、Map、Set、String、TypedArray、函数的arguments、NodeList对象","like_count":3},{"had_liked":false,"id":82336,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1554187111,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14439088999","product_id":100023201,"comment_content":"Some built-in types have a default iteration behavior, while other types (such as Object) do not. The built-in types with a @@iterator method are:<br>Array.prototype[@@iterator]()<br>TypedArray.prototype[@@iterator]()<br>String.prototype[@@iterator]()<br>Map.prototype[@@iterator]()<br>Set.prototype[@@iterator]()","like_count":3},{"had_liked":false,"id":169978,"user_name":"固执的鱼wu","can_delete":false,"product_type":"c1","uid":1797545,"ip_address":"","ucode":"97D7885C0C12BD","user_header":"https://static001.geekbang.org/account/avatar/00/1b/6d/a9/4f461d80.jpg","comment_is_top":false,"comment_ctime":1578486964,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"10168421556","product_id":100023201,"comment_content":"let 和 const 声明虽然看上去是执行到了才会生效，但是实际上，它们还是会被预处理，为什么在const a=1之前console.log(a)是报错，而不是吧报undefinded呢","like_count":2,"discussions":[{"author":{"id":1662815,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJXoPHn2kDxYnt1tBMxtrmlNUwdibQeS6k10KSC9IPoH5GSGbzgeUmu227jYElGKxuIVxuLnYzEAEA/132","nickname":"Geek_b3f657","note":"","ucode":"91B1A0EB3469F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304860,"discussion_content":"let 和 const 声明的变量会被预处理，他们会被存入暂时性死区中，而不是为变量赋值 undefined。访问暂时性死区的变量时，会报错。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1599701515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1530996,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erqTR7j3orj6gaStETzwkAq9o8fOq8QYtzMMbAPCAicCiaCpRibYJjjzsibDbUJZaUjfMZb70hqk3h8Mg/132","nickname":"但求般若","note":"","ucode":"66088968249B9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335246,"discussion_content":"es6的可以去看看阮一峰的es6","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608127260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1530996,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erqTR7j3orj6gaStETzwkAq9o8fOq8QYtzMMbAPCAicCiaCpRibYJjjzsibDbUJZaUjfMZb70hqk3h8Mg/132","nickname":"但求般若","note":"","ucode":"66088968249B9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335245,"discussion_content":"暂时性死区","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608127232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622757,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhicnUUYIcvCVzwOD5IalolwXUVaBANntyy33U24c2W7Wyibk3qVGjEibQNlhBvXWcqYsE74FG6zkgg/132","nickname":"zhangyr","note":"","ucode":"40D2D08ABBFBCF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202443,"discussion_content":"let和const不会变量提升，var会变量提升","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1583918464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1381952,"avatar":"https://static001.geekbang.org/account/avatar/00/15/16/40/7a008cb7.jpg","nickname":"木讷","note":"","ucode":"704DBFB747B597","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311926,"discussion_content":"const 在声明时必须赋值，不会自动赋值undefined, 而是抛错 Uncaught SyntaxError: Missing initializer in const declaration","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602538137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1398031,"avatar":"https://static001.geekbang.org/account/avatar/00/15/55/0f/72d1e265.jpg","nickname":"Andy","note":"","ucode":"A4F9B88752C5BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289971,"discussion_content":"报undefinded的话 就说明没有预处理呀，实际报错是“Cannot access &#39;a&#39; before initialization”说明是有特殊处理即预处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594286573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243327,"user_name":"2020","can_delete":false,"product_type":"c1","uid":1344670,"ip_address":"","ucode":"0DEA914CDBE5B7","user_header":"https://static001.geekbang.org/account/avatar/00/14/84/9e/05ed50dd.jpg","comment_is_top":false,"comment_ctime":1598061087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5893028383","product_id":100023201,"comment_content":"据我能查到的资料，String, Array, TypedArray, Map and Set 是所有内置可迭代对象。","like_count":1},{"had_liked":false,"id":153720,"user_name":"培根熏肉","can_delete":false,"product_type":"c1","uid":1684249,"ip_address":"","ucode":"AADD6D87738432","user_header":"https://static001.geekbang.org/account/avatar/00/19/b3/19/0083394e.jpg","comment_is_top":false,"comment_ctime":1574299247,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5869266543","product_id":100023201,"comment_content":"Switch那么好看难道我要写一堆if else？？不明白原文说没有用switch的意义在哪里","like_count":1,"discussions":[{"author":{"id":1473591,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7c/37/b328b051.jpg","nickname":"jaijia","note":"","ucode":"A94DBCDF612069","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72681,"discussion_content":"能用switch我也喜欢用 主要是代码块收起来的时候看着更方便\n if/else会收成一行 基本不可读","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575515187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1042089,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e6/a9/b459efb7.jpg","nickname":"如故","note":"","ucode":"F6895792309942","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344109,"discussion_content":"switch可以用策略模式替代 更清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611296563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148857,"user_name":"尤璐洁","can_delete":false,"product_type":"c1","uid":1645251,"ip_address":"","ucode":"4ED9B2FEC90744","user_header":"https://static001.geekbang.org/account/avatar/00/19/1a/c3/02bb2ebe.jpg","comment_is_top":false,"comment_ctime":1573095293,"is_pvip":false,"replies":[{"id":"58890","content":"arguments是函数创建的环境记录上的一个变量，这个东西比较特殊的地方是它跟参数的绑定关系，其它没什么。<br><br>看MDN好了<br><br>https:&#47;&#47;developer.mozilla.org&#47;en-US&#47;docs&#47;Web&#47;JavaScript&#47;Reference&#47;Functions&#47;arguments<br><br>","user_name":"作者回复","comment_id":148857,"uid":"1268524","ip_address":"","utype":1,"ctime":1574219095,"user_name_real":"winter"}],"discussion_count":1,"race_medal":0,"score":"5868062589","product_id":100023201,"comment_content":"老师可以讲讲arguments吗，它是挂在哪里的呢，是个可迭代对象，但是不知道它是哪个的属性","like_count":1,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473638,"discussion_content":"arguments是函数创建的环境记录上的一个变量，这个东西比较特殊的地方是它跟参数的绑定关系，其它没什么。\n\n看MDN好了\n\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574219095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132617,"user_name":"洛克不菲勒","can_delete":false,"product_type":"c1","uid":1547101,"ip_address":"","ucode":"94D14CF02C92D9","user_header":"https://static001.geekbang.org/account/avatar/00/17/9b/5d/629fa226.jpg","comment_is_top":false,"comment_ctime":1568173422,"is_pvip":false,"replies":[{"id":"54040","content":"反正JS有这个用法，至于好不好，每个人有不同的审美，不过多数时候，这由你团队的代码规范决定。","user_name":"作者回复","comment_id":132617,"uid":"1268524","ip_address":"","utype":1,"ctime":1570772883,"user_name_real":"winter"}],"discussion_count":2,"race_medal":0,"score":"5863140718","product_id":100023201,"comment_content":"for(let e of [1, 2, 3, 4, 5])<br>    console.log(e);<br>老师你好，注意到文中有这样的写法，for()后面没有大括号这种写法好吗？<br>一直都有这样的疑问，if语句也有这样的问题","like_count":1,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467040,"discussion_content":"反正JS有这个用法，至于好不好，每个人有不同的审美，不过多数时候，这由你团队的代码规范决定。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570772883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1151692,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo62etdyoSUiagbCGxcfhUTqP6hIOje6ibiaFKtnZiaVbJ7zmLsCkYeDBgCGficZEGia6DViay65IyaqbmEA/132","nickname":"王沙沙","note":"","ucode":"288D34F0B40E85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159544,"discussion_content":"不加大括号在chrome70的控制台里运行报错，加了可以正常运行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580704770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108298,"user_name":"润群","can_delete":false,"product_type":"c1","uid":1581525,"ip_address":"","ucode":"5804543E7453B1","user_header":"https://static001.geekbang.org/account/avatar/00/18/21/d5/95304b5b.jpg","comment_is_top":false,"comment_ctime":1561715190,"is_pvip":false,"replies":[{"id":"58932","content":"说了半天这点性能意义不大。","user_name":"作者回复","comment_id":108298,"uid":"1268524","ip_address":"","utype":1,"ctime":1574221656,"user_name_real":"winter"}],"discussion_count":2,"race_medal":0,"score":"5856682486","product_id":100023201,"comment_content":"关于switch和ifelse的效率我有个疑问呢，假设ifelse的判断很多，然后判断到末尾才找到匹配的项，这样的话是不是比switch多了好多判断呢，因为我理解的switch不是只判断一次么？","like_count":1,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455909,"discussion_content":"说了半天这点性能意义不大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574221656,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2289956,"avatar":"https://static001.geekbang.org/account/avatar/00/22/f1/24/8434e2c2.jpg","nickname":"Yan","note":"","ucode":"BAAECF2EC97CB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332392,"discussion_content":"我懂你的意思，你的表达是希望增强可读性","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607178242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82377,"user_name":"K4SHIFZ","can_delete":false,"product_type":"c1","uid":1293057,"ip_address":"","ucode":"BFB49AAC0E4C74","user_header":"https://static001.geekbang.org/account/avatar/00/13/bb/01/568ac2d6.jpg","comment_is_top":false,"comment_ctime":1554195302,"is_pvip":false,"replies":[{"id":"30370","content":"Statement是语句，Declaration是声明，但是我觉得这个分类不好，因为语句里还有var语句也是声明性质的。","user_name":"作者回复","comment_id":82377,"uid":"1268524","ip_address":"","utype":1,"ctime":1554805488,"user_name_real":"winter"}],"discussion_count":1,"race_medal":0,"score":"5849162598","product_id":100023201,"comment_content":"请问老师，规范中的Statement和Declaration到底有什么区别？不都是声明的意思吗？","like_count":1,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445572,"discussion_content":"Statement是语句，Declaration是声明，但是我觉得这个分类不好，因为语句里还有var语句也是声明性质的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554805488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359290,"user_name":"静","can_delete":false,"product_type":"c1","uid":1374928,"ip_address":"河北","ucode":"8C0D23AAEC67C4","user_header":"https://static001.geekbang.org/account/avatar/00/14/fa/d0/17c6ef3b.jpg","comment_is_top":false,"comment_ctime":1665393210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665393210","product_id":100023201,"comment_content":"老师的声音好催眠，听信听着不知不觉睡着了而不自知😂","like_count":0},{"had_liked":false,"id":223829,"user_name":"Thinker","can_delete":false,"product_type":"c1","uid":1465896,"ip_address":"","ucode":"2FC4AB66EFC41D","user_header":"https://static001.geekbang.org/account/avatar/00/16/5e/28/c0a8f859.jpg","comment_is_top":false,"comment_ctime":1591192770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591192770","product_id":100023201,"comment_content":"<br>function sleep(duration) {<br>    return new Promise(function(resolve, reject) {<br>        setTimeout(resolve,duration);<br>    })<br>}<br>async function* foo(){<br>    i = 0;<br>    while(true) {<br>        await sleep(1000);<br>        yield i++;<br>    }<br>        <br>}<br>for await(let e of foo())<br>    console.log(e);","like_count":0},{"had_liked":false,"id":207413,"user_name":"HoSalt","can_delete":false,"product_type":"c1","uid":1156074,"ip_address":"","ucode":"610B03E2A002D1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","comment_is_top":false,"comment_ctime":1587084756,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1587084756","product_id":100023201,"comment_content":"赋值语句这种属于表达式语句?","like_count":0,"discussions":[{"author":{"id":1689268,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c6/b4/e80a4fc8.jpg","nickname":"Wise","note":"","ucode":"A1915E54C26948","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249701,"discussion_content":"应该是对的，我从标准中找出： \n语句包含：\nStatement[Yield, Await, Return]:\n     ExpressionStatement[?Yield, ?Await]\n         [lookahead ∉ { {, function, async [no LineTerminator here] function, class, let \n         [ }]Expression[+In, ?Yield, ?Await];\n               AssignmentExpression[?In, ?Yield, ?Await]\n               Expression[?In, ?Yield, ?Await],AssignmentExpression[?In, ?Yield, ?Await]\n                      LeftHandSideExpression[?Yield, ?Await]=AssignmentExpression[?In, \n                      ?Yield, ?Await]\n从是上面的包含关系来看 赋值属于表达式语句，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587954378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195893,"user_name":"千虑必有一得","can_delete":false,"product_type":"c1","uid":1471516,"ip_address":"","ucode":"3CE5AA01A5C16C","user_header":"https://static001.geekbang.org/account/avatar/00/16/74/1c/2a78a51a.jpg","comment_is_top":false,"comment_ctime":1585221973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585221973","product_id":100023201,"comment_content":"普通语句和声明型语句，简单清晰明了。","like_count":0},{"had_liked":false,"id":182327,"user_name":"-_-|||","can_delete":false,"product_type":"c1","uid":1328142,"ip_address":"","ucode":"94B21594658BF9","user_header":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","comment_is_top":false,"comment_ctime":1582769411,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1582769411","product_id":100023201,"comment_content":"文中“此外，JavaScript 还为异步生成器函数配备了异步的 for of，我们来看一个例子：.........for await(let e of foo()) console.log(e);” for of 循环为什么要加 await 呢，不加按理说也可以。","like_count":0},{"had_liked":false,"id":119599,"user_name":"lsy","can_delete":false,"product_type":"c1","uid":1581063,"ip_address":"","ucode":"A9FA51A302C97E","user_header":"","comment_is_top":false,"comment_ctime":1564633070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564633070","product_id":100023201,"comment_content":"      console.log(&#39;有 iterator：&#39;);<br>      for (let key in window)<br>        window[key] &amp;&amp; window[key][Symbol.iterator] &amp;&amp; console.log(key);<br><br>      console.log(&#39;实例有 iterator：&#39;);<br>      Object.getOwnPropertyNames(window).forEach(<br>        key =&gt;<br>          window[key] &amp;&amp;<br>          window[key][&#39;prototype&#39;] &amp;&amp;<br>          window[key][&#39;prototype&#39;][Symbol.iterator] &amp;&amp;<br>          console.log(key)<br>      );","like_count":0},{"had_liked":false,"id":118507,"user_name":"渴望做梦","can_delete":false,"product_type":"c1","uid":1398219,"ip_address":"","ucode":"9EB47530A69C91","user_header":"https://static001.geekbang.org/account/avatar/00/15/55/cb/1efe460a.jpg","comment_is_top":false,"comment_ctime":1564377754,"is_pvip":false,"replies":[{"id":"54071","content":"搜 async generator function","user_name":"作者回复","user_name_real":"winter","uid":"1268524","ctime":1570775125,"ip_address":"","comment_id":118507,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1564377754","product_id":100023201,"comment_content":"winter老师，这个异步生成器函数是个什么东东啊，从网上搜了一下，也没找到相关介绍。","like_count":0,"discussions":[{"author":{"id":1268524,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5b/2c/12bfd3cd.jpg","nickname":"winter","note":"","ucode":"2B068EDEAFEB56","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460436,"discussion_content":"搜 async generator function","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570775125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1470104,"avatar":"https://static001.geekbang.org/account/avatar/00/16/6e/98/44e278ff.jpg","nickname":"dennisleung","note":"","ucode":"607B8F14A0545D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4551,"discussion_content":"看了下MDN，还在Draft阶段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565536322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85435,"user_name":"让时间说真话","can_delete":false,"product_type":"c1","uid":1387656,"ip_address":"","ucode":"5C86450864189F","user_header":"https://static001.geekbang.org/account/avatar/00/15/2c/88/2a7fe1a9.jpg","comment_is_top":false,"comment_ctime":1555060012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555060012","product_id":100023201,"comment_content":"Map，set，arguments","like_count":0},{"had_liked":false,"id":82605,"user_name":"qqq","can_delete":false,"product_type":"c1","uid":1006786,"ip_address":"","ucode":"91B0ACF8CBE7BD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/c2/8ffd2ad0.jpg","comment_is_top":false,"comment_ctime":1554257751,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1554257751","product_id":100023201,"comment_content":"catch 中可以使用 var 重新声明","like_count":0}]}