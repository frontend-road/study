{"id":740965,"title":"练习：后缀数组","content":"\n<p><strong>6.25</strong>　按照图 6.0.15 的样式给出由以下字符串的后缀、后缀的排序、<code>index()</code> 和 <code>lcp()</code> 方法的返回值组成的表格。</p>\n<p>　a. <code>abacadaba</code></p>\n<p>　b. <code>mississippi</code></p>\n<p>　c. <code>abcdefghij</code></p>\n<p>　d. <code>aaaaaaaaaa</code></p>\n<p><strong>6.26</strong>　下面这段代码用于计算字符串的所有后缀，找出其中的问题。</p>\n<pre class=\"code-rows\"><code>suffix = \"\";\n\nfor (int i = s.length() - 1; i &gt;= 0; i--)\n{\n    suffix = s.charAt(i) + suffix;\n    suffixes[i] = suffix;\n}</code></pre>\n<p>　<strong>答</strong>：它需要平方级别的时间和空间。</p>\n<p><strong>6.27</strong>　有些应用需要对文本进行<strong>回环变位</strong>，这个操作会涉及文本中的所有字符。对于 <code>0</code> 到 <img img src=\"https://static001.geekbang.org/files/resource/ebook/100010/image00799.gif\" alt=\"N-1\" inline-img=\"true\" /> 之间的 <code>i</code>，长度为 <img img src=\"https://static001.geekbang.org/files/resource/ebook/100010/image00798.gif\" alt=\"N\" inline-img=\"true\" /> 的文本的第 <code>i</code> 次回环变位得到的是它的后 <img img src=\"https://static001.geekbang.org/files/resource/ebook/100010/image01833.gif\" alt=\"N-\" inline-img=\"true\" /><code>i</code> 个字符和前 <code>i</code> 个字符相连所得的字符串。下面这段代码用于计算文本的所有回环变位，找出其中的问题。</p>\n<pre class=\"code-rows\"><code>int N = s.length();\nfor (int i = 0; i &lt; N; i++)\n    rotation[i] = s.substring(i, N) + s.substring(0, i);</code></pre>\n<p>　<strong>答</strong>：它需要平方级别的时间和空间。</p>\n<p><strong>6.28</strong>　设计一个线性时间的算法来计算给定文本字符串的所有回环变位。</p>\n<p>　<strong>答</strong>：</p>\n<pre class=\"code-rows\"><code>String t = s + s;\nint N = s.length();\nfor (int i = 0; i &lt; N; i++)\n    rotation[i] = r.substring(i, i + N);</code></pre>\n<p><strong>6.29</strong>　按照 1.4 节中的假设，给出一个长度为 <img img src=\"https://static001.geekbang.org/files/resource/ebook/100010/image00798.gif\" alt=\"N\" inline-img=\"true\" /> 的字符串 <code>SuffixArray</code> 对象对内存的使用情况。</p>\n<p><strong>6.30</strong>　<strong>最长公共子字符串</strong>。编写一个 <code>SuffixArray</code> 的用例 <code>LCS</code>，接受两个文件名作为命令行参数，读取这两个文本文件并在线性时间内找出同时出现在两个文件中的最长子字符串。（在 1970 年，D.Knuth 猜测这是不可能的。）<strong>提示</strong>：为字符串 <code>s#t</code> 创建后缀数组，其中 <code>s</code> 和 <code>t</code> 是文本字符串，而 <code>#</code> 是一个两者都不包含的字符）。</p>\n<p><strong>6.31</strong>　<strong>Burrow-Wheeler 变换</strong>。<strong>Burrow-Wheeler 变换</strong>（BWT）是一种用于数据压缩算法中的变换，包括 <code>bzip2</code> 和高吞吐量的基因组测序等。编写一个 <code>SuffixArray</code> 的用例用以下方法在线性时间内计算 BWT。给定一个长度为 <img img src=\"https://static001.geekbang.org/files/resource/ebook/100010/image00798.gif\" alt=\"N\" inline-img=\"true\" /> 的字符串（以一个文件结束符 <code>$</code> 结尾，它小于其他任意字符）。使用一个 <img img src=\"https://static001.geekbang.org/files/resource/ebook/100010/image00839.gif\" alt=\"N\\times N\" inline-img=\"true\" /> 的矩阵，其中每一行均为原文的一个不同的回环变位。按照字典顺序将所有行排序。<code>Burrow-Wheeler</code> 变换就是排序后的矩阵中最右侧的列。例如，<code>mississippi$</code> 的 BWT 是 <code>ipssm$pissii</code>。<strong>Burrow-Wheeler 逆变换</strong>（BWI）是 BWT 的逆序。例如，<code>ipssm$pissii</code> 的 BWI 是 <code>mississippi$</code>。编写一个用例，在线性时间内，为某个字符串的 BWT 计算它的 BWI。</p><!-- [[[read_end]]] -->\n<p><strong>6.32</strong>　<strong>环形字符串的线性化</strong>。编写一个 <code>SuffixArray</code> 的用例，对于给定的字符串，在线性时间内找出它的字典序列最小的回环变位。这个问题来源于化学数据库中的各种环形分子，每一种分子都表示为一个环形的字符串。人们需要一种标准的表示方法（最小的回环变位）使得用字符串的任意回环变位作为键都能找到该分子。（请见练习 6.27 和练习 6.28。）</p>\n<p><strong>6.33</strong>　<strong>重复 <img img src=\"https://static001.geekbang.org/files/resource/ebook/100010/image00842.gif\" alt=\"k\" inline-img=\"true\" /> 次的最长子字符串</strong>。编写一个 <code>SuffixArray</code> 的用例，对于给定的字符串和一个整数 <code>k</code>，找出其中被至少重复了 <code>k</code> 次的最长子字符串。</p>\n<p><strong>6.34</strong>　<strong>较长的重复字符串</strong>。编写一个 <code>SuffixArray</code> 的用例，对于给定的字符串和一个整数 <code>L</code>，找出长度至少为 <code>L</code> 的重复子字符串。</p>\n<p><strong>6.35</strong>　<strong><img img src=\"https://static001.geekbang.org/files/resource/ebook/100010/image01466.gif\" alt=\"k-{\\rm gram}\" inline-img=\"true\" /> 频率统计</strong>。开发并实现一个抽象数据类型，对字符串进行预处理以支持高效回答如下形式的问题：“<strong>给定的 <img img src=\"https://static001.geekbang.org/files/resource/ebook/100010/image01466.gif\" alt=\"k-{\\rm gram}\" inline-img=\"true\" /> 出现了多少次？</strong>”每次查询在最坏情况下所需的时间应该与 <img img src=\"https://static001.geekbang.org/files/resource/ebook/100010/image01892.gif\" alt=\"k\\log N\" inline-img=\"true\" /> 成正比，其中 <img img src=\"https://static001.geekbang.org/files/resource/ebook/100010/image00798.gif\" alt=\"N\" inline-img=\"true\" /> 为字符串的长度。</p>\n","neighbors":{"left":{"article_title":"练习：B- 树","id":740964},"right":{"article_title":"练习：最大流问题","id":740966}},"comments":[]}