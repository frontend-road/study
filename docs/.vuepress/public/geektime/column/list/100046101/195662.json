{"id":195662,"title":"01 | 拜占庭将军问题：有叛徒的情况下，如何才能达成共识？","content":"<p>你好，我是韩健。</p><p>在日常工作中，我常听到有人吐槽“没看懂拜占庭将军问题”“中文的文章看不懂，英文论文更看不下去”。想必你也跟他们一样，有类似的感受。</p><p>在我看来，拜占庭将军问题（The Byzantine Generals Problem），它其实是借拜占庭将军的故事展现了分布式共识问题，还探讨和论证了解决的办法。而大多数人觉得它难理解，除了因为分布式共识问题比较复杂之外，还与莱斯利·兰伯特（Leslie Lamport）的讲述方式有关，他在一些细节上（比如，口信消息型拜占庭问题之解的算法过程上）没有说清楚。</p><p>实际上，它是分布式领域最复杂的一个容错模型，一旦搞懂它，你就能掌握分布式共识问题的解决思路，还能更深刻地理解常用的共识算法，在设计分布式系统的时候，也能根据场景特点选择适合的算法，或者设计适合的算法了。而我把拜占庭将军的问题放到第一讲，主要是因为它很好地抽象了分布式系统面临的共识问题，理解了这个问题，会为你接下来的学习打下基础。</p><p>那么接下来，我就以战国时期六国抗秦的故事为主线串联起整篇文章，让你读懂、学透。</p><h2>苏秦的困境</h2><p>战国时期，齐、楚、燕、韩、赵、魏、秦七雄并立，后来秦国的势力不断强大起来，成了东方六国的共同威胁。于是，这六个国家决定联合，全力抗秦，免得被秦国各个击破。一天，苏秦作为合纵长，挂六国相印，带着六国的军队叩关函谷，驻军在了秦国边境，为围攻秦国作准备。但是，因为各国军队分别驻扎在秦国边境的不同地方，所以军队之间只能通过信使互相联系，这时，苏秦面临了一个很严峻的问题：如何统一大家的作战计划？</p><!-- [[[read_end]]] --><p>万一一些诸侯国在暗通秦国，发送误导性的作战信息，怎么办？如果信使被敌人截杀，甚至被敌人间谍替换，又该怎么办？这些都会导致自己的作战计划被扰乱，然后出现有的诸侯国在进攻，有的诸侯国在撤退的情况，而这时，秦国一定会趁机出兵，把他们逐一击破的。</p><p><strong>所以，如何达成共识，制定统一的作战计划呢？苏秦他很愁。</strong></p><p>这个故事，是拜占庭将军问题的一个简化表述，苏秦面临的就是典型的共识难题，也就是如何在可能有误导信息的情况下，采用合适的通讯机制，让多个将军达成共识，制定一致性的作战计划？</p><p>你可以先停下来想想，这个问题难在哪儿？我们又是否有办法，帮助诸侯国们达成共识呢？</p><h2>二忠一叛的难题</h2><p>为了便于你理解和层层深入，我先假设只有3个国家要攻打秦国，这三个国家的三位将军，咱们简单点儿，分别叫齐、楚、燕。同时，又因为秦国很强大，所以只有半数以上的将军参与进攻，才能击败敌人（注意，这里是假设哈，你别较真），在这个期间，将军们彼此之间需要通过信使传递消息，然后协商一致之后，才能在同一时间点发动进攻。</p><p>举个例子，有一天，这三位将军各自一脸严肃地讨论明天是进攻还是撤退，并让信使传递信息，按照“少数服从多数”的原则投票表决，两个人意见一致就可以了，比如：</p><ol>\n<li>齐根据侦查情况决定撤退；</li>\n<li>楚和燕根据侦查信息，决定进攻。</li>\n</ol><p>那么按照原则，齐也会进攻。最终，3支军队同时进攻，大败秦军。</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/d2/0bf66342fa03d73cf4b62b7497939bd2.jpg?wh=1142*776\" alt=\"\"></p><p><strong>可是，问题来了：</strong> 一旦有人在暗通秦国，就会出现作战计划不一致的情况。比如齐向楚、燕分别发送了“撤退”的消息，燕向齐和楚发送了“进攻”的消息。<strong>撤退：进攻=1:1，无论楚投进攻还是撤退，都会成为2:1，这个时候还是会形成一个一致性的作战方案。</strong></p><p>但是，楚这个叛徒在暗中配合秦国，让信使向齐发送了“撤退”，向燕发送了“进攻”，那么：</p><ul>\n<li>燕看到的是，撤退：进攻=1:2；</li>\n<li>齐看到的是，撤退：进攻=2:1。</li>\n</ul><p>按照“少数服从多数”的原则，就会出现燕单独进攻秦军，当然，最后肯定是因为寡不敌众，被秦军给灭了。</p><p><img src=\"https://static001.geekbang.org/resource/image/b3/0b/b3f01caa021dae1cdf4051cceb6d3d0b.jpg?wh=1142*712\" alt=\"\"></p><p>在这里，你可以看到，叛将楚通过发送误导信息，非常轻松地干扰了齐和燕的作战计划，导致这两位忠诚将军被秦军逐一击败。<strong>这就是所说的二忠一叛难题。</strong> 那么苏秦应该怎么解决这个问题呢？我们来帮苏秦出出主意。</p><p>如果你觉得上面的逻辑有点绕的话，可以找张白纸，自己比划比划。</p><h2>苏秦该怎么办？</h2><h4>解决办法一：口信消息型拜占庭问题之解</h4><p>先来说说第一个解决办法。首先，三位将军都分拨一部分军队，由苏秦率领，苏秦参与作战计划讨论并执行作战指令。这样，3位将军的作战讨论，就变为了4位将军的作战讨论，这能够增加讨论中忠诚将军的数量。</p><p>然后呢，4位将军还约定了，如果没有收到命令，就执行预设的默认命令，比如“撤退”。除此之外，还约定一些流程来发送作战信息、执行作战指令，比如，进行两轮作战信息协商。为什么要执行两轮呢？先卖个关子，你一会儿就知道了。</p><p><strong>第一轮：</strong></p><ul>\n<li>先发送作战信息的将军作为指挥官，其他的将军作为副官；</li>\n<li>指挥官将他的作战信息发送给每位副官；</li>\n<li>每位副官，将从指挥官处收到的作战信息，作为他的作战指令；如果没有收到作战信息，将把默认的“撤退”作为作战指令。</li>\n</ul><p><strong>第二轮：</strong></p><ul>\n<li>除了第一轮的指挥官外，剩余的3位将军将分别作为指挥官，向另外2位将军发送作战信息；</li>\n<li>然后，这3位将军按照“少数服从多数”，执行收到的作战指令。</li>\n</ul><p>为了帮助你直观地理解苏秦的整个解决方案，我来演示一下作战信息协商过程。<strong>而且，我会分别以忠诚将军和叛将先发送作战信息为例来演示，</strong> 这样可以完整地演示叛将对作战计划干扰破坏的可能性。</p><p>首先是3位忠诚的将军先发送作战信息的情况。</p><p>为了演示方便，假设苏秦先发起作战信息，作战指令是“进攻”。那么在第一轮作战信息协商中，苏秦向齐、楚、燕发送作战指令“进攻”。</p><p><img src=\"https://static001.geekbang.org/resource/image/b6/01/b6143760b8095ba31fcfc97daf619d01.jpg?wh=1142*714\" alt=\"\"></p><p>在第二轮作战信息协商中，齐、楚、燕分别作为指挥官，向另外2位发送作战信息“进攻”，因为楚已经叛变了，所以，为了干扰作战计划，他就对着干，发送“撤退”作战指令。</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/50/9c47038ca1c39422040fa3f4b65a2950.jpg?wh=1142*859\" alt=\"\"></p><p>最终，齐和燕收到的作战信息都是“进攻、进攻、撤退”，按照原则，齐和燕与苏秦一起执行作战指令“进攻”，实现了作战计划的一致性，保证了作战的胜利。</p><p>那么，如果是叛徒楚先发送作战信息，干扰作战计划，结果会有所不同么？我们来具体看一看。在第一轮作战信息协商中，楚向苏秦发送作战指令“进攻”，向齐、燕发送作战指令“撤退”。</p><p><img src=\"https://static001.geekbang.org/resource/image/93/5f/93cda6d0a5646593826e6338d733825f.jpg?wh=1142*691\" alt=\"\"></p><p>然后，在第二轮作战信息协商中，苏秦、齐、燕分别作为指挥官，向另外两位发送作战信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/14/8fdac1df9027711347f178bb9d3ccf14.jpg?wh=1142*588\" alt=\"\"></p><p>最终，苏秦、齐和燕收到的作战信息都是“撤退、撤退、进攻”，按照原则，苏秦、齐和燕一起执行作战指令“撤退”，实现了作战计划的一致性。也就是说，无论叛将楚如何捣乱，苏秦、齐和燕，都执行一致的作战计划，保证作战的胜利。</p><p>这个解决办法，其实是兰伯特在论文《<a href=\"https://www.microsoft.com/en-us/research/publication/byzantine-generals-problem/\">The Byzantine Generals Problem</a>》中提到的口信消息型拜占庭问题之解：<strong>如果叛将人数为m，将军人数不能少于3m + 1 ，那么拜占庭将军问题就能解决了。</strong> 不过，作者在论文中没有讲清楚一些细节，为了帮助你阅读和理解论文，在这里我补充一点：</p><p><strong>这个算法有个前提</strong>，也就是叛将人数m，或者说能容忍的叛将数m，是已知的。在这个算法中，叛将数m决定递归循环的次数（也就是说，叛将数m决定将军们要进行多少轮作战信息协商），即m+1轮（所以，你看，只有楚是叛变的，那么就进行了两轮）。你也可以从另外一个角度理解：n位将军，最多能容忍(n - 1) / 3位叛将。<strong>关于这个公式，你只需要记住就好了，推导过程你可以参考论文。</strong></p><p>不过，这个算法虽然能解决拜占庭将军问题，但它有一个限制：如果叛将人数为m，那么将军总人数必须不小于3m + 1。</p><p>在二忠一叛的问题中，在存在1位叛将的情况下，必须增加1位将军，将3位将军协商共识，转换为4位将军协商共识，这样才能实现忠诚将军的一致性作战计划。那么有没有办法，在不增加将军人数的时候，直接解决二忠一叛的难题呢？</p><h4>解决办法二：签名消息型拜占庭问题之解</h4><p>其实，苏秦还可以通过签名的方式，在不增加将军人数的情况下，解决二忠一叛的难题。首先，苏秦要通过印章、虎符等信物，实现这样几个特性：</p><ul>\n<li>忠诚将军的签名无法伪造，而且对他签名消息的内容进行任何更改都会被发现；</li>\n<li>任何人都能验证将军签名的真伪。</li>\n</ul><p>这时，如果忠诚的将军，比如齐先发起作战信息协商，一旦叛将小楚修改或伪造收到的作战信息，那么燕在接收到楚的作战信息的时候，会发现齐的作战信息被修改，楚已叛变，这时他将忽略来自楚的作战信息，最终执行齐发送的作战信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/05/e9c5ff8d9591f9a00adcfcfd4981cb05.jpg?wh=2284*1713\" alt=\"\"></p><p>如果叛变将军楚先发送误导的作战信息，那么，齐和燕将按照一定规则（比如取中间的指令）在排序后的所有已接收到的指令中（比如撤退、进攻）中选取一个指令，进行执行，最终执行一致的作战计划。</p><p><img src=\"https://static001.geekbang.org/resource/image/3a/2e/3a697c2ed35f4c446b6414770a5d392e.jpg?wh=2284*1713\" alt=\"\"></p><p>这个解决办法，是兰伯特在论文中提到的签名消息型拜占庭问题之解。而通过签名机制约束叛将的叛变行为，任何叛变行为都会被发现，也就会实现无论有多少忠诚的将军和多少叛将，忠诚的将军们总能达成一致的作战计划。</p><p>我想，如果当时苏秦能够具备分布式系统设计的思维，掌握这几种算法，应该就不用担心作战计划被干扰了吧。</p><h2>内容小结</h2><p>本节课，为了帮助你理解拜占庭将军问题，我讲了苏秦协商作战的故事，现在让我们跳回现实世界，回到计算机世界的分布式场景中：</p><ul>\n<li>故事里的各位将军，你可以理解为计算机节点；</li>\n<li>忠诚的将军，你可以理解为正常运行的计算机节点；</li>\n<li>叛变的将军，你可以理解为出现故障并会发送误导信息的计算机节点；</li>\n<li>信使被杀，可以理解为通讯故障、信息丢失；</li>\n<li>信使被间谍替换，可以理解为通讯被中间人攻击，攻击者在恶意伪造信息和劫持通讯。</li>\n</ul><p>这样一来，你是不是就理解了计算机分布式场景中面临的问题，并且知道了解决的办法呢？</p><p>那么我想强调的是，拜占庭将军问题描述的是最困难的，也是最复杂的一种分布式故障场景，除了存在故障行为，还存在恶意行为的一个场景。你要注意，在存在恶意节点行为的场景中（比如在数字货币的区块链技术中），必须使用拜占庭容错算法（Byzantine Fault Tolerance，BFT）。除了故事中提到两种算法，常用的拜占庭容错算法还有：PBFT算法，PoW算法（为了重点突出，这些内容我会在后面讲解）。</p><p>而在计算机分布式系统中，最常用的是非拜占庭容错算法，即故障容错算法（Crash Fault Tolerance，CFT）。<strong>CFT解决的是分布式的系统中存在故障，但不存在恶意节点的场景下的共识问题。</strong> 也就是说，这个场景可能会丢失消息，或者有消息重复，但不存在错误消息，或者伪造消息的情况。常见的算法有Paxos算法、Raft算法、ZAB协议（这些内容我同样会在后面讲解）。</p><p>那么，如何在实际场景选择合适的算法类型呢？答案是：如果能确定该环境中各节点是可信赖的，不存在篡改消息或者伪造消息等恶意行为（例如DevOps环境中的分布式路由寻址系统），推荐使用非拜占庭容错算法；反之，推荐使用拜占庭容错算法，例如在区块链中使用PoW算法。</p><h2>课堂思考</h2><p>文中我提了两类容错算法，分别是拜占庭容错算法和非拜占庭容错算法，那么在常见的分布式软件系统中，哪些场景必须要使用拜占庭容错算法呢？哪些场景使用非拜占庭容错算法就可以了呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"学习路径 | 分布式协议与算法你应该这么学","id":256765},"right":{"article_title":"加餐  | 拜占庭将军问题：如何基于签名消息实现作战计划的一致性？","id":215640}},"comments":[{"had_liked":false,"id":178113,"user_name":"洛奇","can_delete":false,"product_type":"c1","uid":1624355,"ip_address":"","ucode":"662B4005721119","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","comment_is_top":true,"comment_ctime":1581588907,"is_pvip":false,"replies":[{"id":"69705","content":"实战，学习的最终目的，所以，我推荐，学习完后，多实战下，在实战中，加深自己对技术的理解，另外，遇到问题时，欢迎留言，咱们一起讨论。<br>有时间，可以读读自己感兴趣的论文，不过，在这里，我想补充的是，有时读论文是需要方法的，我来举个例子（如果没有学习本课程的话），兰伯特的Multi-Paxos，是出了名的难理解，那么，怎么学习呢？可以先研究Raft的论文，然后再去读Paxos的论文。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582023336,"ip_address":"","comment_id":178113,"utype":1}],"discussion_count":9,"race_medal":0,"score":"9.2233721243357e+18","product_id":100046101,"comment_content":"看了这个专栏还有必要去看兰伯特的论文吗？","like_count":20,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483671,"discussion_content":"实战，学习的最终目的，所以，我推荐，学习完后，多实战下，在实战中，加深自己对技术的理解，另外，遇到问题时，欢迎留言，咱们一起讨论。\n有时间，可以读读自己感兴趣的论文，不过，在这里，我想补充的是，有时读论文是需要方法的，我来举个例子（如果没有学习本课程的话），兰伯特的Multi-Paxos，是出了名的难理解，那么，怎么学习呢？可以先研究Raft的论文，然后再去读Paxos的论文。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582023336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322566,"discussion_content":"Raft 论文写得非常详细，很多细节交代的非常清楚","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604763431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1850369,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/3c/01/29008d6a.jpg","nickname":"千城","note":"","ucode":"346A133059977D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":177186,"discussion_content":"老师在课程中能否加入程序简化的例子，我们课后也跑一下老师的例子先直观理解。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1582084079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051062,"avatar":"","nickname":"xingshouzhyan","note":"","ucode":"BFDD6987C12F68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386411,"discussion_content":"我貌似看懂了，而且我以为我懂了。不过突然想到一个问题，要是有6 忠 1 叛，对于口信型拜占庭问题， 叛徒是 指挥官 的情况，它首先向 其他 6 个将军中 3 个发送 进攻， 3 个发送失败。根据 口信型拜占庭问题 之解， 一个叛徒，需要进行2 轮 协商 ， 在第二轮中，6个将军分别作为指挥官发送消息， 则第一轮中收到 进攻的将军，第二轮中 收到消息为 进攻，进攻，撤退，撤退，撤退。同理 ，在第一轮中收到 撤退的将军 ， 第二轮中 收到消息为 进攻，进攻，进攻，撤退，撤退 ，问题怎么解决，到底是进攻还是撤退？签名一样的情况呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627568693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1983651,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/44/a3/9720b0dd.jpg","nickname":"TaronLedgerS","note":"","ucode":"B2100AF4D91E35","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2051062,"avatar":"","nickname":"xingshouzhyan","note":"","ucode":"BFDD6987C12F68","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406638,"discussion_content":"是不是要考虑“半数以上”这个点","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634811147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386411,"ip_address":""},"score":406638,"extra":""},{"author":{"id":1028768,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b2/a0/15f40838.jpg","nickname":"angelfish","note":"","ucode":"922D6025BD3640","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2051062,"avatar":"","nickname":"xingshouzhyan","note":"","ucode":"BFDD6987C12F68","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577483,"discussion_content":"我理解没过半数，执行默认的行动，也就是撤退？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656141281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386411,"ip_address":""},"score":577483,"extra":""}]},{"author":{"id":1689271,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c6/b7/6c19f05c.jpg","nickname":"vstorm","note":"","ucode":"0584BFCF27E729","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186449,"discussion_content":"很赞同要多实战，只看书不能深入理解到精髓.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582682010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2733281,"avatar":"","nickname":"Geek_f4512f","note":"","ucode":"3CB387D2943590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388474,"discussion_content":"实战的话 需要什么算法功底吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628776929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1099170,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c5/a2/4ece341b.jpg","nickname":"Ivan.Qi","note":"","ucode":"36F46A4D1F0EAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2733281,"avatar":"","nickname":"Geek_f4512f","note":"","ucode":"3CB387D2943590","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406500,"discussion_content":"可以做做 MIT 6.824","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634781440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":388474,"ip_address":""},"score":406500,"extra":""}]}]},{"had_liked":false,"id":177702,"user_name":"汤小高","can_delete":false,"product_type":"c1","uid":1555565,"ip_address":"","ucode":"D4AB7766273D52","user_header":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","comment_is_top":true,"comment_ctime":1581476871,"is_pvip":false,"replies":[{"id":"69123","content":"感谢反馈，签名消息型拜占庭问题之解，在<br>《加餐 | 拜占庭将军问题：如何基于签名消息实现作战计划的一致性》做了补充。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581636455,"ip_address":"","comment_id":177702,"utype":1}],"discussion_count":5,"race_medal":0,"score":"9.2233721243355996e+18","product_id":100046101,"comment_content":"签名那个不是很懂，老师后面答疑课能不能再详细说明下","like_count":21,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483511,"discussion_content":"感谢反馈，签名消息型拜占庭问题之解，在\n《加餐 | 拜占庭将军问题：如何基于签名消息实现作战计划的一致性》做了补充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581636455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2733281,"avatar":"","nickname":"Geek_f4512f","note":"","ucode":"3CB387D2943590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388473,"discussion_content":"nonono 我觉得都没在点上； 这个签名机制 前提是 节点转发消息时需要一起把接受到的消息 一起签名一下 再转发；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628776762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051062,"avatar":"","nickname":"xingshouzhyan","note":"","ucode":"BFDD6987C12F68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386410,"discussion_content":"我貌似看懂了，而且我以为我懂了。不过突然想到一个问题，要是有6 忠 1 叛，对于口信型拜占庭问题， 叛徒是 指挥官 的情况，它首先向 其他 6 个将军中 3 个发送 进攻， 3 个发送失败。根据 口信型拜占庭问题 之解， 一个叛徒，需要进行2 轮 协商 ， 在第二轮中，6个将军分别作为指挥官发送消息， 则第一轮中收到 进攻的将军，第二轮中 收到消息为 进攻，进攻，撤退，撤退，撤退。同理 ，在第一轮中收到 撤退的将军 ， 第二轮中 收到消息为 进攻，进攻，进攻，撤退，撤退 ，问题怎么解决，到底是进攻还是撤退？签名一样的情况呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627568683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2052521,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/51/a9/741b5ad9.jpg","nickname":"FD","note":"","ucode":"ED396BD322489E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318450,"discussion_content":"签名是利用kpi体系的技术，和https类似，可以用公钥加签名（容易被篡改），也可以用证书","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603757863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055049,"avatar":"https://static001.geekbang.org/account/avatar/00/10/19/49/9452b2fd.jpg","nickname":"Theodore","note":"","ucode":"0735C2A64295FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180182,"discussion_content":"签名，可以这么理解。启动服务以后先投票选leader（生成签名），以后发号施令都要带着签名","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582284092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177616,"user_name":"蓝魔丶","can_delete":false,"product_type":"c1","uid":1219438,"ip_address":"","ucode":"2AE4359E263558","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/6e/edd2da0c.jpg","comment_is_top":false,"comment_ctime":1581434493,"is_pvip":false,"replies":[{"id":"68959","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581442900,"ip_address":"","comment_id":177616,"utype":1}],"discussion_count":4,"race_medal":0,"score":"130430453373","product_id":100046101,"comment_content":"首先觉得叛变对于个人来说肯定是有利可图的，没有利益的事情也就不愿意叛变，现在热门的区块链技术的先驱比特币就是采用了拜占庭容错算法POW，对于这种开放式的网络环境必须使用拜占庭容错算法，因为彼此无法建立信任关系。如果是企业内部的分布式中间件，因为只需考虑故障容错，不存在恶意节点，因为企业也不想没事找事是吧","like_count":30,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483485,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581442900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2733281,"avatar":"","nickname":"Geek_f4512f","note":"","ucode":"3CB387D2943590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388476,"discussion_content":"擦 我在另外一个分布式专栏中 看到 POW被称为 PoW（Proof-of-Work，工作量证明） 算法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628776974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051062,"avatar":"","nickname":"xingshouzhyan","note":"","ucode":"BFDD6987C12F68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386413,"discussion_content":"我貌似看懂了，而且我以为我懂了。不过突然想到一个问题，要是有6 忠 1 叛，对于口信型拜占庭问题， 叛徒是 指挥官 的情况，它首先向 其他 6 个将军中 3 个发送 进攻， 3 个发送失败。根据 口信型拜占庭问题 之解， 一个叛徒，需要进行2 轮 协商 ， 在第二轮中，6个将军分别作为指挥官发送消息， 则第一轮中收到 进攻的将军，第二轮中 收到消息为 进攻，进攻，撤退，撤退，撤退。同理 ，在第一轮中收到 撤退的将军 ， 第二轮中 收到消息为 进攻，进攻，进攻，撤退，撤退 ，问题怎么解决，到底是进攻还是撤退？签名一样的情况呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627568710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098504,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c3/08/28c327d0.jpg","nickname":"冰河时代","note":"","ucode":"F4375FB7CE4FD4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341441,"discussion_content":"企业内部一般会使用内网环境搭建，所以信息不会被串改","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610421393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177528,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1581411082,"is_pvip":false,"replies":[{"id":"68960","content":"赞！思考深入，这也是为什么会有种种的拜占庭容错算法，针对不同场景的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581443246,"ip_address":"","comment_id":177528,"utype":1}],"discussion_count":8,"race_medal":0,"score":"113250560778","product_id":100046101,"comment_content":"口信消息型的算法，按照递归一直做下去，需要 m + 1 轮，那么就要有 m! 量级消息要发送，如果 m 比较大的话，这网络通信量岂不是爆炸？","like_count":26,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483455,"discussion_content":"赞！思考深入，这也是为什么会有种种的拜占庭容错算法，针对不同场景的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581443246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1114356,"avatar":"https://static001.geekbang.org/account/avatar/00/11/00/f4/cc5f0896.jpg","nickname":"Jowin","note":"","ucode":"19017F7D06C22A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355557,"discussion_content":"复杂度O(n^m)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615451527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1243901,"avatar":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","nickname":"fcb的鱼","note":"","ucode":"88667EBF09CEC0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":172444,"discussion_content":"同问,m阶乘是怎么来的？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581778170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248553,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0d/29/18272af9.jpg","nickname":"hxy","note":"","ucode":"431327E8CA4364","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167931,"discussion_content":"请教一下，m的阶乘是怎么得出来的？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581523387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1624355,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","nickname":"洛奇","note":"","ucode":"662B4005721119","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1248553,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0d/29/18272af9.jpg","nickname":"hxy","note":"","ucode":"431327E8CA4364","race_medal":4,"user_type":1,"is_pvip":true},"discussion":{"id":168902,"discussion_content":" 对啊，感觉应该比m!还要大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581598250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":167931,"ip_address":""},"score":168902,"extra":""}]},{"author":{"id":2051062,"avatar":"","nickname":"xingshouzhyan","note":"","ucode":"BFDD6987C12F68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386414,"discussion_content":"我貌似看懂了，而且我以为我懂了。不过突然想到一个问题，要是有6 忠 1 叛，对于口信型拜占庭问题， 叛徒是 指挥官 的情况，它首先向 其他 6 个将军中 3 个发送 进攻， 3 个发送失败。根据 口信型拜占庭问题 之解， 一个叛徒，需要进行2 轮 协商 ， 在第二轮中，6个将军分别作为指挥官发送消息， 则第一轮中收到 进攻的将军，第二轮中 收到消息为 进攻，进攻，撤退，撤退，撤退。同理 ，在第一轮中收到 撤退的将军 ， 第二轮中 收到消息为 进攻，进攻，进攻，撤退，撤退 ，问题怎么解决，到底是进攻还是撤退？签名一样的情况呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627568725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2051062,"avatar":"","nickname":"xingshouzhyan","note":"","ucode":"BFDD6987C12F68","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572195,"discussion_content":"这里需要进行3轮协商，因为会按照叛徒的最大可能进行循环。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652636291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386414,"ip_address":""},"score":572195,"extra":""}]},{"author":{"id":1581897,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/aTnlMgdUuSFnBjQD7IlqaPdRJMMjMam2W4aKDhd06zibjrSNzgz9VSwCIMfKmkLuDuict2bugJEqULfBElZ599vw/132","nickname":"Geek_eaa8cc","note":"","ucode":"8FF509D581253E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":169156,"discussion_content":"所以实际应用中是用PBFT","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581603985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177778,"user_name":"cc","can_delete":false,"product_type":"c1","uid":1037891,"ip_address":"","ucode":"68E69205A7D5BC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d6/43/0704d7db.jpg","comment_is_top":false,"comment_ctime":1581498082,"is_pvip":false,"replies":[{"id":"69034","content":"底层的协议和硬件，能保证消息不出错，比如IP checksum、TCP checksum等。在不存在恶意攻击的环境，非拜占庭容错，就可以了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581528357,"ip_address":"","comment_id":177778,"utype":1}],"discussion_count":3,"race_medal":0,"score":"91775811298","product_id":100046101,"comment_content":"正常的网络传输环境中，除了消息丢失和消息重复，消息出错(非恶意攻击的情况)应该也是有可能的吧？如果可能出现传输过程中的消息差错，非拜占庭式的容错是不是就不适合了？","like_count":21,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483538,"discussion_content":"底层的协议和硬件，能保证消息不出错，比如IP checksum、TCP checksum等。在不存在恶意攻击的环境，非拜占庭容错，就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581528357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051062,"avatar":"","nickname":"xingshouzhyan","note":"","ucode":"BFDD6987C12F68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386416,"discussion_content":"我貌似看懂了，而且我以为我懂了。不过突然想到一个问题，要是有6 忠 1 叛，对于口信型拜占庭问题， 叛徒是 指挥官 的情况，它首先向 其他 6 个将军中 3 个发送 进攻， 3 个发送失败。根据 口信型拜占庭问题 之解， 一个叛徒，需要进行2 轮 协商 ， 在第二轮中，6个将军分别作为指挥官发送消息， 则第一轮中收到 进攻的将军，第二轮中 收到消息为 进攻，进攻，撤退，撤退，撤退。同理 ，在第一轮中收到 撤退的将军 ， 第二轮中 收到消息为 进攻，进攻，进攻，撤退，撤退 ，问题怎么解决，到底是进攻还是撤退？签名一样的情况呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627568735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2100644,"avatar":"","nickname":"Geek_8e2759","note":"","ucode":"EBDBA4D92B5C50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300664,"discussion_content":"业务层需要一定的 checksum 校验","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598229533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177762,"user_name":"施耀南","can_delete":false,"product_type":"c1","uid":1634138,"ip_address":"","ucode":"480ECE7BA29606","user_header":"https://static001.geekbang.org/account/avatar/00/18/ef/5a/5d424d50.jpg","comment_is_top":false,"comment_ctime":1581493190,"is_pvip":false,"replies":[{"id":"69228","content":"签名消息型拜占庭问题之解，本质上而言，表达的是，通过签名机制发现恶意行为，来避免“好人”被干扰和伤害。我讲个真实的故事，很多同学都知道，我们可以通过CA证书和SSL协议，实现文中提到的签名消息的2个特性，保证通讯消息不被恶意行为干扰，但是呢，在12年时，一些网络黑客，利用IE浏览器不检测证书签名，通过SSL中间人攻击，来截获SSL消息，获取通过HTTPS传输的金融账号的用户名和密码，但，这些人却无法对使用firefox的用户，发起攻击，为什么呢，就是因为，firefox会检查证书签名，判断消息是否是伪造的，也就是说，firefox通过签名消息，找出了“恶意消息”，避免了被攻击。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581704527,"ip_address":"","comment_id":177762,"utype":1}],"discussion_count":3,"race_medal":0,"score":"48826133446","product_id":100046101,"comment_content":"签名型可能的话可以具体点，不是很明白","like_count":11,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483530,"discussion_content":"签名消息型拜占庭问题之解，本质上而言，表达的是，通过签名机制发现恶意行为，来避免“好人”被干扰和伤害。我讲个真实的故事，很多同学都知道，我们可以通过CA证书和SSL协议，实现文中提到的签名消息的2个特性，保证通讯消息不被恶意行为干扰，但是呢，在12年时，一些网络黑客，利用IE浏览器不检测证书签名，通过SSL中间人攻击，来截获SSL消息，获取通过HTTPS传输的金融账号的用户名和密码，但，这些人却无法对使用firefox的用户，发起攻击，为什么呢，就是因为，firefox会检查证书签名，判断消息是否是伪造的，也就是说，firefox通过签名消息，找出了“恶意消息”，避免了被攻击。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581704527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051062,"avatar":"","nickname":"xingshouzhyan","note":"","ucode":"BFDD6987C12F68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386417,"discussion_content":"我貌似看懂了，而且我以为我懂了。不过突然想到一个问题，要是有6 忠 1 叛，对于口信型拜占庭问题， 叛徒是 指挥官 的情况，它首先向 其他 6 个将军中 3 个发送 进攻， 3 个发送失败。根据 口信型拜占庭问题 之解， 一个叛徒，需要进行2 轮 协商 ， 在第二轮中，6个将军分别作为指挥官发送消息， 则第一轮中收到 进攻的将军，第二轮中 收到消息为 进攻，进攻，撤退，撤退，撤退。同理 ，在第一轮中收到 撤退的将军 ， 第二轮中 收到消息为 进攻，进攻，进攻，撤退，撤退 ，问题怎么解决，到底是进攻还是撤退？签名一样的情况呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627568744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2358331,"avatar":"https://static001.geekbang.org/account/avatar/00/23/fc/3b/9684584c.jpg","nickname":"我","note":"","ucode":"58E3502EEC203A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332849,"discussion_content":"哈哈，IE突然中枪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607354667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178366,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1581669926,"is_pvip":false,"replies":[{"id":"69198","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581685363,"ip_address":"","comment_id":178366,"utype":1}],"discussion_count":2,"race_medal":1,"score":"35941408294","product_id":100046101,"comment_content":"CFT：只容忍节点故障，不容热节点作恶。<br>BFT：容忍节点故障与作恶。<br>像bitcoin系统使用的必须是BFT算法，像现在在各企业微服务中使用的zookeeper等就是使用的CFT算法。<br>","like_count":8,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483776,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581685363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051062,"avatar":"","nickname":"xingshouzhyan","note":"","ucode":"BFDD6987C12F68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386418,"discussion_content":"我貌似看懂了，而且我以为我懂了。不过突然想到一个问题，要是有6 忠 1 叛，对于口信型拜占庭问题， 叛徒是 指挥官 的情况，它首先向 其他 6 个将军中 3 个发送 进攻， 3 个发送失败。根据 口信型拜占庭问题 之解， 一个叛徒，需要进行2 轮 协商 ， 在第二轮中，6个将军分别作为指挥官发送消息， 则第一轮中收到 进攻的将军，第二轮中 收到消息为 进攻，进攻，撤退，撤退，撤退。同理 ，在第一轮中收到 撤退的将军 ， 第二轮中 收到消息为 进攻，进攻，进攻，撤退，撤退 ，问题怎么解决，到底是进攻还是撤退？签名一样的情况呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627568751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178135,"user_name":"洛奇","can_delete":false,"product_type":"c1","uid":1624355,"ip_address":"","ucode":"662B4005721119","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","comment_is_top":false,"comment_ctime":1581596161,"is_pvip":false,"replies":[{"id":"69223","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581701458,"ip_address":"","comment_id":178135,"utype":1}],"discussion_count":6,"race_medal":0,"score":"35941334529","product_id":100046101,"comment_content":"解法二：<br>当齐和楚都是叛将时，只有燕是忠将，有以下两种情形：<br>1、齐先发送作战信息（和楚先发送的情形是一样的）。<br>2、燕先发送作战信息。<br><br>情形 1 中， 如果齐-&gt;燕 为进攻， 则必有 齐-&gt;楚 为撤退，然后因为楚也是叛将，所以有 楚-&gt;燕 为 楚齐:进攻， 然后燕接收到楚的作战信息后发现齐的签名的信息被伪造了，并从接收到的伪造信息退出齐的作战信息原本应是撤退，与从齐直接接收到的作战信息相反，所以燕判断齐和楚都是叛将，然后燕就执行了默认的作战指令撤退。燕从齐直接收到撤退的作战信息后的结果也是一样。<br>情形 2 下，燕为发起作战信息者，所以不受两个叛将的任何影响，所以对于燕自己来说是共识是一致的。<br><br>经过以上分析，得出解法二“任何叛变行为都会被发现，也就会实现无论有多少忠诚的将军和多少叛将，忠诚的将军们总能达成一致的作战计划”，不知道我理解的对不对？<br>","like_count":8,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483679,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581701458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1092218,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/7a/ae8c247d.jpg","nickname":"指尖以东","note":"","ucode":"1DEE134FE92FD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":254140,"discussion_content":"默认作战计划是进攻呢？两个叛将都发撤退，然后忠将发现签名信息伪造，选择进攻不就被消灭了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588297614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2733281,"avatar":"","nickname":"Geek_f4512f","note":"","ucode":"3CB387D2943590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1092218,"avatar":"https://static001.geekbang.org/account/avatar/00/10/aa/7a/ae8c247d.jpg","nickname":"指尖以东","note":"","ucode":"1DEE134FE92FD0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388478,"discussion_content":"俺也一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628777422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":254140,"ip_address":""},"score":388478,"extra":""},{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2733281,"avatar":"","nickname":"Geek_f4512f","note":"","ucode":"3CB387D2943590","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551658,"discussion_content":"俺也一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645077845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":388478,"ip_address":""},"score":551658,"extra":""}]},{"author":{"id":1023101,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9c/7d/774e07f9.jpg","nickname":"study的程序员","note":"","ucode":"E5AE9037D24429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558800,"discussion_content":"只剩一个好的了，执行啥不都是一致的嘛。。。不用这么复杂了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648472461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1233977,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d4/39/a980c04d.jpg","nickname":"Sun","note":"","ucode":"84C079D1F3B5EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":185669,"discussion_content":"请教一下，情形2时，对燕自己来说共识是一致的是什么意思。在这种情况下，燕并不知道叛将是谁，如果他发起进攻也一定会失败的啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582638182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177455,"user_name":"陈","can_delete":false,"product_type":"c1","uid":1006448,"ip_address":"","ucode":"A8E6AFF6E5775D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5b/70/6411282d.jpg","comment_is_top":false,"comment_ctime":1581395656,"is_pvip":false,"replies":[{"id":"68966","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581447439,"ip_address":"","comment_id":177455,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27351199432","product_id":100046101,"comment_content":"在组织内部可信网络，或者组织与组织之间已经通过其他方式建立信任关系，使用非拜占庭容错算法。在未建立信任的组织间使用拜占庭容错算法。","like_count":6,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483433,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581447439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051062,"avatar":"","nickname":"xingshouzhyan","note":"","ucode":"BFDD6987C12F68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386419,"discussion_content":"我貌似看懂了，而且我以为我懂了。不过突然想到一个问题，要是有6 忠 1 叛，对于口信型拜占庭问题， 叛徒是 指挥官 的情况，它首先向 其他 6 个将军中 3 个发送 进攻， 3 个发送失败。根据 口信型拜占庭问题 之解， 一个叛徒，需要进行2 轮 协商 ， 在第二轮中，6个将军分别作为指挥官发送消息， 则第一轮中收到 进攻的将军，第二轮中 收到消息为 进攻，进攻，撤退，撤退，撤退。同理 ，在第一轮中收到 撤退的将军 ， 第二轮中 收到消息为 进攻，进攻，进攻，撤退，撤退 ，问题怎么解决，到底是进攻还是撤退？签名一样的情况呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627568758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177387,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1581385156,"is_pvip":false,"replies":[{"id":"69205","content":"签名保证的是消息和身份的不可伪造，并且可以通过验证签名真伪，发现恶意行为和恶意节点，也就是找出叛徒。<br>比如，例1中，燕对比消息，发现不一致，如果没有签名，它无法确定是齐叛变了，还是楚叛变了。<br>同理，在例2中，齐、燕发现消息不一致时，无法确认谁是叛徒。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581688323,"ip_address":"","comment_id":177387,"utype":1}],"discussion_count":7,"race_medal":0,"score":"27351188932","product_id":100046101,"comment_content":"消息签名的第两个例子有点看不懂:<br>例2，齐和燕国通过对比楚的消息不一致就能发现问题，签名在其中的作用呢？<br>同样，例1中燕能对比自身和楚发来的关于齐的计划，签名的作用呢？<br><br>感觉这两个例子中楚都扮演着恶意i节点的作用，但似乎签名主要是解决中间人的问题(间谍)？","like_count":6,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483411,"discussion_content":"签名保证的是消息和身份的不可伪造，并且可以通过验证签名真伪，发现恶意行为和恶意节点，也就是找出叛徒。\n比如，例1中，燕对比消息，发现不一致，如果没有签名，它无法确定是齐叛变了，还是楚叛变了。\n同理，在例2中，齐、燕发现消息不一致时，无法确认谁是叛徒。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581688323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363737,"discussion_content":"燕和齐验证楚发的消息没有被伪造，但发出的消息矛盾了（楚给燕发“进攻”、但楚给“齐”发送“撤退”），因此可以判定楚是叛军","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1617271359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051062,"avatar":"","nickname":"xingshouzhyan","note":"","ucode":"BFDD6987C12F68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386420,"discussion_content":"我貌似看懂了，而且我以为我懂了。不过突然想到一个问题，要是有6 忠 1 叛，对于口信型拜占庭问题， 叛徒是 指挥官 的情况，它首先向 其他 6 个将军中 3 个发送 进攻， 3 个发送失败。根据 口信型拜占庭问题 之解， 一个叛徒，需要进行2 轮 协商 ， 在第二轮中，6个将军分别作为指挥官发送消息， 则第一轮中收到 进攻的将军，第二轮中 收到消息为 进攻，进攻，撤退，撤退，撤退。同理 ，在第一轮中收到 撤退的将军 ， 第二轮中 收到消息为 进攻，进攻，进攻，撤退，撤退 ，问题怎么解决，到底是进攻还是撤退？签名一样的情况呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627568772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104438,"avatar":"https://static001.geekbang.org/account/avatar/00/10/da/36/ac0ff6a7.jpg","nickname":"wusiration","note":"","ucode":"A9403377054F1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167648,"discussion_content":"如果没有签名，对于燕来说，不了解齐的命令是正确的还是楚的命令是正确的啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581515733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1046714,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","nickname":"约书亚","note":"","ucode":"81EA27ADD9EC1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1104438,"avatar":"https://static001.geekbang.org/account/avatar/00/10/da/36/ac0ff6a7.jpg","nickname":"wusiration","note":"","ucode":"A9403377054F1E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168177,"discussion_content":"我感觉你说的是例1？我复制到这里：\n“这时，如果忠诚的将军，比如齐先发起作战信息协商，一旦叛将小楚修改或伪造收到的作战信息，那么燕在接收到楚的作战信息的时候，会发现齐的作战信息被修改，楚已叛变，这时他执行齐发送的作战信息。”\n对于燕来说，了解二者不一致就可以了。如果齐故意发送两个不同的命令（并且没被传令者篡改)，燕收到了，签名都可以验过，如何判断“齐的命令正确还是楚的命令正确？”你这里的“正确”是指什么?\n不过倒是提醒我，签名的作用是帮燕检查到底是齐叛变还是楚叛变。不知道你是不是这个意思。\n问题是找出反叛在计算机系统里是必要的么？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1581559818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":167648,"ip_address":""},"score":168177,"extra":""}]},{"author":{"id":1017707,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","nickname":"朱月俊","note":"","ucode":"4DA0728B862FBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167222,"discussion_content":"就是所有人都只是转发指挥官的命令，一切都听指挥官的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581470598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1956611,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/db/03/67fbb09d.jpg","nickname":"杨冬","note":"","ucode":"317607AAA75F85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1017707,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","nickname":"朱月俊","note":"","ucode":"4DA0728B862FBD","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281911,"discussion_content":"如何判断谁是指挥官，如果齐发送给燕有延迟，而叛徒楚修改消息后，并先发送到燕，那么燕该如何进行判断呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591840354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":167222,"ip_address":""},"score":281911,"extra":""}]}]},{"had_liked":false,"id":177371,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1581379451,"is_pvip":false,"replies":[{"id":"68943","content":"加油！认识问题才能解决问题，实践需要理论来指导。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581430997,"ip_address":"","comment_id":177371,"utype":1}],"discussion_count":1,"race_medal":1,"score":"23056215931","product_id":100046101,"comment_content":"值得多读几遍","like_count":5,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483403,"discussion_content":"加油！认识问题才能解决问题，实践需要理论来指导。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581430997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212885,"user_name":"竹马彦四郎的好朋友影法師","can_delete":false,"product_type":"c1","uid":1475385,"ip_address":"","ucode":"A9555AEFF90CDF","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","comment_is_top":false,"comment_ctime":1588231590,"is_pvip":false,"replies":[{"id":"79460","content":"加一颗星:)，看了下，内存用的蛮多的，优化思路很棒，节省内存的整体思路，是少分配多复用和及时释放。演示程序，我后面补充个。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588782475,"ip_address":"","comment_id":212885,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18768100774","product_id":100046101,"comment_content":"韩老师，我写了一个递归模拟了 OM 算法，感觉真的好吃内存啊~ m=7区区22个节点的OM(7)算法要吃的内存已经超过1GB了~<br><br>https:&#47;&#47;yfscfs.gitee.io&#47;post&#47;%E6%9E%81%E5%AE%A2%E6%97%B6%E9%97%B4%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE%E4%B8%8E%E7%AE%97%E6%B3%95%E5%AE%9E%E6%88%98-01-%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98%E6%9C%89%E5%8F%9B%E5%BE%92%E7%9A%84%E6%83%85%E5%86%B5%E4%B8%8B%E5%A6%82%E4%BD%95%E6%89%8D%E8%83%BD%E8%BE%BE%E6%88%90%E5%85%B1%E8%AF%86&#47;","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493639,"discussion_content":"加一颗星:)，看了下，内存用的蛮多的，优化思路很棒，节省内存的整体思路，是少分配多复用和及时释放。演示程序，我后面补充个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588782475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322619,"discussion_content":"您的博客写得真好，给您点个赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604769153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178114,"user_name":"洛奇","can_delete":false,"product_type":"c1","uid":1624355,"ip_address":"","ucode":"662B4005721119","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","comment_is_top":false,"comment_ctime":1581589229,"is_pvip":false,"replies":[{"id":"69224","content":"算法的约定，记住就可以了，n为将军，最多能容忍 (n - 1) &#47; 3 位叛将，需要进行 (n - 1) &#47; 3  + 1轮协商。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581701705,"ip_address":"","comment_id":178114,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18761458413","product_id":100046101,"comment_content":"解法一中协商轮数大于2时，是具体什么情形？<br>轮数的公式也是记住就行？","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483672,"discussion_content":"算法的约定，记住就可以了，n为将军，最多能容忍 (n - 1) / 3 位叛将，需要进行 (n - 1) / 3  + 1轮协商。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581701705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177294,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1581343491,"is_pvip":false,"replies":[{"id":"68965","content":"这是兰伯特提出的算法:)。如果每一轮都是每个节点广播自己的选择，后面怎么实现这个算法呢？咱们一起多想想，看看怎么设计，解决拜占庭将军问题。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581447410,"ip_address":"","comment_id":177294,"utype":1}],"discussion_count":9,"race_medal":0,"score":"18761212675","product_id":100046101,"comment_content":"有一个疑问，为什么4个节点的时候第一轮是先选择一个节点（苏秦）向其他三个发送信息。然后第二轮是剩下的3个节点互相发送消息呢？为什么不能每一轮都是每个节点广播自己的选择呢？","like_count":4,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483379,"discussion_content":"这是兰伯特提出的算法:)。如果每一轮都是每个节点广播自己的选择，后面怎么实现这个算法呢？咱们一起多想想，看看怎么设计，解决拜占庭将军问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581447410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166094,"discussion_content":"这个我觉得是比如苏秦已经给出了消息进攻，那么其他节点就不需要再反过来告知苏秦他们要怎么样行动，如果再次告知，我觉得可能出现得不出究竟是进攻还是撤退的结论","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581348232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1254615,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/d7/146f484b.jpg","nickname":"小宇子2B","note":"","ucode":"E360188C65EAEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166129,"discussion_content":"2对2的情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581348986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":166094,"ip_address":""},"score":166129,"extra":""},{"author":{"id":1147453,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","nickname":"忆水寒","note":"","ucode":"E3F86BD8AA8903","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254615,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/d7/146f484b.jpg","nickname":"小宇子2B","note":"","ucode":"E360188C65EAEA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166228,"discussion_content":"有道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581377369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":166129,"ip_address":""},"score":166228,"extra":""},{"author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1254615,"avatar":"https://static001.geekbang.org/account/avatar/00/13/24/d7/146f484b.jpg","nickname":"小宇子2B","note":"","ucode":"E360188C65EAEA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166312,"discussion_content":"是的，但感觉也不完全是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581384445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":166129,"ip_address":""},"score":166312,"extra":""}]},{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331946,"discussion_content":"第2轮的节点们收到第1轮的指令后，直接转发即可，只有不可信节点才会去瞎改自己收到的指令，可信节点都是直接转发的。如果每轮都广播自己的选择而忽略上一轮的指令，那就一锅粥了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607009560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1349171,"avatar":"https://static001.geekbang.org/account/avatar/00/14/96/33/214269f6.jpg","nickname":"一张钞票","note":"","ucode":"A142D249516A9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243382,"discussion_content":"三轮递归是怎么走的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587536888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166233,"discussion_content":"这个老师文中有说，是指挥官发号指令，然后副官再发送自己收到的指令。就好比分布式中的主节点和从节点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581379155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1147453,"avatar":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","nickname":"忆水寒","note":"","ucode":"E3F86BD8AA8903","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":166280,"discussion_content":"我是把这个过程看成选举，每个候选人都是对等的，应该群发给其他节点。这样每个节点都会维护好所有节点的状态。实际上，第一轮是指挥官（苏秦）发送指令，第二轮是其他副官（三个国家）分别发送指令，这样可以减少发送的数量。而实际情况，就算每个节点都是群发，也是没问题的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581383059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":166233,"ip_address":""},"score":166280,"extra":""}]}]},{"had_liked":false,"id":179374,"user_name":"羽翼1982","can_delete":false,"product_type":"c1","uid":1130194,"ip_address":"","ucode":"1C7362888B7E3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/d2/5f9d3fa7.jpg","comment_is_top":false,"comment_ctime":1581992664,"is_pvip":false,"replies":[{"id":"69741","content":"不好意思，这句话，看的不是很明白，我先按照我的理解，来回复下哈，更大规模，一般是个乘积效应，理解了最核心、最精简的这个模型，更大规模的，也就更好理解了，在这里，之所以提“2忠1叛”，而不是“1忠1叛”，或者“4忠2叛”，是为了引出，在增加一名忠将，也就是“3忠1叛”是有解的。<br>不知道这个回答能否解决你的疑问，或者，可否将问题，再具体点。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582041925,"ip_address":"","comment_id":179374,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14466894552","product_id":100046101,"comment_content":"老师是否能将例子从&quot;2忠1叛&quot;3人的例子扩展到更大规模的例子来讲解下多轮协商的过程，这样对于理解一般性的算法会更有帮助","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484230,"discussion_content":"不好意思，这句话，看的不是很明白，我先按照我的理解，来回复下哈，更大规模，一般是个乘积效应，理解了最核心、最精简的这个模型，更大规模的，也就更好理解了，在这里，之所以提“2忠1叛”，而不是“1忠1叛”，或者“4忠2叛”，是为了引出，在增加一名忠将，也就是“3忠1叛”是有解的。\n不知道这个回答能否解决你的疑问，或者，可否将问题，再具体点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582041925,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177469,"user_name":"陈","can_delete":false,"product_type":"c1","uid":1006448,"ip_address":"","ucode":"A8E6AFF6E5775D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5b/70/6411282d.jpg","comment_is_top":false,"comment_ctime":1581400103,"is_pvip":false,"replies":[{"id":"69610","content":"后面以加餐篇的形式，做个算法的对比:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581967398,"ip_address":"","comment_id":177469,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14466301991","product_id":100046101,"comment_content":"老师后面能否对每个提到的算法讲一下算法复杂度分析？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483438,"discussion_content":"后面以加餐篇的形式，做个算法的对比:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581967398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177376,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1581381141,"is_pvip":true,"replies":[{"id":"69204","content":"再加个数字证书，标识将军身份，实现签名无法伪造和可查看。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581687824,"ip_address":"","comment_id":177376,"utype":1}],"discussion_count":2,"race_medal":1,"score":"14466283029","product_id":100046101,"comment_content":"签名解决拜占庭问题是不是利用了非对称加密，私钥加密，公钥解密进行验证？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483407,"discussion_content":"再加个数字证书，标识将军身份，实现签名无法伪造和可查看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581687824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1512442,"avatar":"https://static001.geekbang.org/account/avatar/00/17/13/fa/e0c26373.jpg","nickname":"不穿格子衬衫的程序员","note":"","ucode":"28DA72B8E476A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171862,"discussion_content":"请问, 签名解决拜占庭将军问题是不是就通过非对称加密和数字证书实现了消息无法篡改和伪造？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581753908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177328,"user_name":"ple","can_delete":false,"product_type":"c1","uid":1120057,"ip_address":"","ucode":"E1C4519C325994","user_header":"https://static001.geekbang.org/account/avatar/00/11/17/39/3274257b.jpg","comment_is_top":false,"comment_ctime":1581347835,"is_pvip":false,"replies":[{"id":"69036","content":"正文中提到了“实现这样几个特性”，这是实现的特性。你可以这么理解，这是为了故事讲解方便，回到现实计算机世界中，比如，我们可以通过CA证书和SSL协议实现上述特性。在这里，我分享一个小故事，一些网络黑客，通过SSL中间人攻击，来截获SSL消息，比如，在12年时，很多人利用IE浏览器不检测证书签名，来获取通过HTTPS传输的金融账号的用户名和密码，但，这些人却无法对使用firefox的用户，发起攻击，为什么呢，就是因为，firefox会检查证书签名，判断消息是否是伪造的，也就是说，firefox通过签名型消息，找出了“恶意消息”，避免了被攻击。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581530350,"ip_address":"","comment_id":177328,"utype":1}],"discussion_count":6,"race_medal":0,"score":"14466249723","product_id":100046101,"comment_content":"签名的那个不是很懂，只是签名不能伪造。为什么伪造作战信息也会被发现？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483392,"discussion_content":"正文中提到了“实现这样几个特性”，这是实现的特性。你可以这么理解，这是为了故事讲解方便，回到现实计算机世界中，比如，我们可以通过CA证书和SSL协议实现上述特性。在这里，我分享一个小故事，一些网络黑客，通过SSL中间人攻击，来截获SSL消息，比如，在12年时，很多人利用IE浏览器不检测证书签名，来获取通过HTTPS传输的金融账号的用户名和密码，但，这些人却无法对使用firefox的用户，发起攻击，为什么呢，就是因为，firefox会检查证书签名，判断消息是否是伪造的，也就是说，firefox通过签名型消息，找出了“恶意消息”，避免了被攻击。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581530350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166319,"discussion_content":"其实就是，如果一个人叛变，那么他一定发送不一致的选择，如一个进攻，一个撤退，另外两个人收到这两个选择之后，也会发送同样的选择给对方，如果对方拿到矛盾选择，说明先发者叛变","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1581384602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1119312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/14/50/c23cf47d.jpg","nickname":"李","note":"","ucode":"5C0FAA211F2E26","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166241,"discussion_content":"齐发送进攻给燕，如果楚发送的是，齐撤退、楚撤退。燕一对比就知道楚篡改了。这里注意楚不仅仅是发自己的，还把接收到的齐指令一并发了。个人理解","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581379643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1695207,"avatar":"https://static001.geekbang.org/account/avatar/00/19/dd/e7/0d923009.jpg","nickname":"Geek_Winy","note":"","ucode":"BEE395FC91E131","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1119312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/14/50/c23cf47d.jpg","nickname":"李","note":"","ucode":"5C0FAA211F2E26","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":295199,"discussion_content":"那跟签不签名有啥关系。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596116650,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":166241,"ip_address":""},"score":295199,"extra":""},{"author":{"id":2733281,"avatar":"","nickname":"Geek_f4512f","note":"","ucode":"3CB387D2943590","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1695207,"avatar":"https://static001.geekbang.org/account/avatar/00/19/dd/e7/0d923009.jpg","nickname":"Geek_Winy","note":"","ucode":"BEE395FC91E131","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388479,"discussion_content":"转发消息时需要一起把接受到的消息 一起签名一下 再转发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628778018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":295199,"ip_address":""},"score":388479,"extra":""}]},{"author":{"id":1487584,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","nickname":"鱼","note":"","ucode":"89EC9CE3AD0281","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167903,"discussion_content":"数字签名（基于非对称加密算法）主要用于身份验证，如果想要消息不被发现（作战信息保密）可以配合使用对称加密算法对消息加密后再进行数字签名。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581522736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243476,"user_name":"Wxpwindy","can_delete":false,"product_type":"c1","uid":1006430,"ip_address":"","ucode":"194712BD851900","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLvGib1QwkBHiclOTRMHdNSh0lrEbscqvYfSRPrU4h7Siaob3jcZPp1pXrkK1cKULiblvDjddNicNCfThw/132","comment_is_top":false,"comment_ctime":1598149808,"is_pvip":false,"replies":[{"id":"96361","content":"加一颗星:)，可以这么理解。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606826862,"ip_address":"","comment_id":243476,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10188084400","product_id":100046101,"comment_content":"我的一点理解哈：解法一相当于用时间换空间，通过放大（增加）所有的人的输入来稀释叛将的输入的不利影响，达到一定多数派的共识，来保证共识，所以时间复杂度指数增加，但是不保证最终目标和意图的一致性-所以例子里第二轮之后的结果是共同撤退而不是进攻。<br><br>解法二是用空间换时间，不增加（放大）输入，而是用增加验证和签名的方式剔除不受信的输入。 感觉是时间复杂度会稳定，增加空间开销，但是会结果前后一致—-是这样吗？","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504297,"discussion_content":"加一颗星:)，可以这么理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606826862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":209334,"user_name":"一张钞票","can_delete":false,"product_type":"c1","uid":1349171,"ip_address":"","ucode":"A142D249516A9C","user_header":"https://static001.geekbang.org/account/avatar/00/14/96/33/214269f6.jpg","comment_is_top":false,"comment_ctime":1587537755,"is_pvip":false,"replies":[{"id":"79418","content":"加一颗星:)，三忠一叛，只需要递归2轮。第三轮，是二忠二叛这种情况吗？在二忠二叛下，递归3轮，没意义，因为本身就误解的。也就是3m+1位将军，递归m+1。可以试着推导下5忠2叛的情况，如果有问题，留言，咱们一起讨论。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588765312,"ip_address":"","comment_id":209334,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10177472347","product_id":100046101,"comment_content":"想提个问题，第一种拜占庭算法的第二轮，第三轮递归，老师能讲讲不？第三轮怎么轮？脑子一片空白","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492773,"discussion_content":"加一颗星:)，三忠一叛，只需要递归2轮。第三轮，是二忠二叛这种情况吗？在二忠二叛下，递归3轮，没意义，因为本身就误解的。也就是3m+1位将军，递归m+1。可以试着推导下5忠2叛的情况，如果有问题，留言，咱们一起讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588765312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179004,"user_name":"赖阿甘","can_delete":false,"product_type":"c1","uid":1351988,"ip_address":"","ucode":"77493FE85CBAF8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTICBNZjA9hW65x6g9b2iaicKUJW5gxFxtgPXH9Cqp6eyFfY1sD2hVY4dZrY5pmoK2r1KZEiaaIKocdZQ/132","comment_is_top":false,"comment_ctime":1581870602,"is_pvip":false,"replies":[{"id":"69744","content":"算法能保证苏秦的提议，和其他忠将的协商结果是一致的，所以，不需要确认结果，按计划执行，就可以了。<br><br>关于第二点，论文中，对口信消息的特性是有限定的，“A1. 但凡发送出去的消息都会正确传达给将军。”，在早期的文稿里，也提了这部分内容，后来，为了不啰嗦和可读性，将这块内容去掉了。这篇文章，是为了帮助大家学习和理解拜占庭将军问题，吃透这个最复杂的分布式容错模型。正如文中提到的“推导过程你可以参考论文”，推导证明，要结合论文哈。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582044303,"ip_address":"","comment_id":179004,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10171805194","product_id":100046101,"comment_content":"老师我有个疑惑，就是口信型的第一种情况，忠诚将领先发出作战信息，假设苏秦（忠诚将军）先发出作战信息进攻，那么苏秦是否需要等其他将军协商结果出来后再进攻？因为如果不等的话会有一个问题，就是苏秦自己去进攻了，其他将军选择了撤退。为什么会出现这种情况呢，因为除了有叛将对着干以外，可能苏秦发出的作战命令丢了，其他两个或者其中一个没收到，那么他会以默认的作战命令（撤退）作为他的选择，这是后其他三人最终协商的结果就是撤退。这时候苏秦不就是去送人头了，还是没达到协商一致的情况。","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484058,"discussion_content":"算法能保证苏秦的提议，和其他忠将的协商结果是一致的，所以，不需要确认结果，按计划执行，就可以了。\n\n关于第二点，论文中，对口信消息的特性是有限定的，“A1. 但凡发送出去的消息都会正确传达给将军。”，在早期的文稿里，也提了这部分内容，后来，为了不啰嗦和可读性，将这块内容去掉了。这篇文章，是为了帮助大家学习和理解拜占庭将军问题，吃透这个最复杂的分布式容错模型。正如文中提到的“推导过程你可以参考论文”，推导证明，要结合论文哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582044303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178432,"user_name":"不穿格子衬衫的程序员","can_delete":false,"product_type":"c1","uid":1512442,"ip_address":"","ucode":"28DA72B8E476A4","user_header":"https://static001.geekbang.org/account/avatar/00/17/13/fa/e0c26373.jpg","comment_is_top":false,"comment_ctime":1581688285,"is_pvip":false,"replies":[{"id":"69611","content":"加一颗星:)，补充1点哈，在签名消息场景中，不是预先设定的场景，可以这么理解，如果我们能通过技术手段保证消息不能被篡改或伪造，那么，这时，可以如何解决拜占庭将军问题。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581968284,"ip_address":"","comment_id":178432,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10171622877","product_id":100046101,"comment_content":"在口信消息型拜占庭问题之解中，论文原文中对口信消息做了如下定义：<br>A1.每个发送的消息都会被正确的传输；<br>A2.消息的接收者知道谁发送了消息；<br>A3.消息的缺席可以检测出来.<br>那么，A1是不是就已经设定了消息不能被篡改，但是可能被伪造？<br>在签名消息型拜占庭问题之解中，论文原文对签名消息的定义是在口信消息的基础上增加了两条：<br>A4.忠诚的将军的签名不可以被伪造，他的签名信息的内容的任何改动都可以被检测;<br>A5.任何人可以验证签名的真实性.<br>那么，实际上签名消息是不是就不能被伪造或篡改，或者说即使有伪造或篡改也是由底层硬件或算法来检测，而不需要我们这里的一致性算法来处理.<br>我的理解是：拜占庭将军描述了一种普适的分布式共识问题，即存在消息伪造或篡改，但是论文中提到了两种算法其实预先设定了一个场景，在签名消息场景中实际上消息不能被篡改或伪造.<br>或者，拜占庭算法和非拜占庭算法的区别就在于他们是否直接信任传送的消息，也就是说非拜占庭算法不采用消息验证机制.","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483819,"discussion_content":"加一颗星:)，补充1点哈，在签名消息场景中，不是预先设定的场景，可以这么理解，如果我们能通过技术手段保证消息不能被篡改或伪造，那么，这时，可以如何解决拜占庭将军问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581968284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340516,"user_name":"数学汤家凤","can_delete":false,"product_type":"c1","uid":2029485,"ip_address":"","ucode":"DE84E777C384AD","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f7/ad/4fd4d867.jpg","comment_is_top":false,"comment_ctime":1648874942,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5943842238","product_id":100046101,"comment_content":"第一轮：A 向 B、C、D 说进攻<br>第二轮：B 向 C、D 说进攻，C 向 B、D 说撤退，D 向 C 说进攻、向 C 说撤退、自己实际撤退<br>A 进攻，B 进攻，C 俩攻俩撤不知所措执行默认撤退，D 撤退<br>最后导致结果就是，A、B 进攻被干掉<br>这怎么解？","like_count":1,"discussions":[{"author":{"id":1028768,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b2/a0/15f40838.jpg","nickname":"angelfish","note":"","ucode":"922D6025BD3640","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577486,"discussion_content":"原文是3忠1叛啊，你这是2忠2叛，当然不能解决了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656141677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222982,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1590977242,"is_pvip":false,"replies":[{"id":"87276","content":"好，我在接下来的集中答疑中，推导演示下。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595345946,"ip_address":"","comment_id":222982,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5885944538","product_id":100046101,"comment_content":"理解了文中老师说的内容，但是推导5忠2叛的情况下，还是不清楚第三轮是怎么进行的，第一轮是一个节点发送消息，别的节点收消息。第二轮是除了第一轮的节点外，其余节点向别的节点发送消息。但是第三轮就理解不了。希望老师能补充一下。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496980,"discussion_content":"好，我在接下来的集中答疑中，推导演示下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595345946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063734,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3b/36/2d61e080.jpg","nickname":"行者","note":"","ucode":"EA31201A7C5AE1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336770,"discussion_content":"https://www.cnblogs.com/binyue/p/8647743.html 可以参考下这个~","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608695428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1063734,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3b/36/2d61e080.jpg","nickname":"行者","note":"","ucode":"EA31201A7C5AE1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551824,"discussion_content":"这个好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645148649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":336770,"ip_address":""},"score":551824,"extra":""}]}]},{"had_liked":false,"id":204389,"user_name":"落点","can_delete":false,"product_type":"c1","uid":1180843,"ip_address":"","ucode":"0EDF72DECDDDCE","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/ab/23ae8d4f.jpg","comment_is_top":false,"comment_ctime":1586394943,"is_pvip":false,"replies":[{"id":"76511","content":"从留言看，这个问题比较共性，我后面补充个推导，以及演示程序吧。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586472443,"ip_address":"","comment_id":204389,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5881362239","product_id":100046101,"comment_content":"口信型消息叛将数m增加时（比如7将2叛时），故事应该怎么演讲的呢，规律是什么？迷路了……，忘同学老师帮忙解答一下，谢谢","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491163,"discussion_content":"从留言看，这个问题比较共性，我后面补充个推导，以及演示程序吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586472443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192110,"user_name":"Geek_wannaBgeek","can_delete":false,"product_type":"c1","uid":1643435,"ip_address":"","ucode":"6F42F4181981C3","user_header":"https://static001.geekbang.org/account/avatar/00/19/13/ab/d73e25de.jpg","comment_is_top":false,"comment_ctime":1584838987,"is_pvip":false,"replies":[{"id":"75570","content":"加油！多交流:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585937279,"ip_address":"","comment_id":192110,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879806283","product_id":100046101,"comment_content":"打卡打卡，讲解对刚入门的人非常友好","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488328,"discussion_content":"加油！多交流:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585937279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187529,"user_name":"月迷津渡","can_delete":false,"product_type":"c1","uid":1264111,"ip_address":"","ucode":"2B18B2FE3DAC3B","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/ef/02401473.jpg","comment_is_top":false,"comment_ctime":1584153393,"is_pvip":false,"replies":[{"id":"77542","content":"加一颗星:)，问题1：这个算法的前提是将军数为3m + 1，协商m + 1轮有解，也就是在有解的情况，是能正常推演的，但在无解的情况下，就不一定能推演了，比如，考虑个极端情况，一忠三叛，根本就就无法推演了，另外，如果是二忠二叛，虽是无解的，但仍能推演，最后两两协商。<br>问题2：是的，无论忠将还是叛将作为第一轮协商的指挥官，算法都有解，也就是说，无论叛将如何作恶，只要满足将军数不少于3m + 1，忠将们都能达成一致的作战共识。<br>问题3：是存在这个问题，因为这是个“经典”和“早期”的算法，后面算法做了改进，比如PBFT。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1587131659,"ip_address":"","comment_id":187529,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879120689","product_id":100046101,"comment_content":"韩大师，针对你的描述我做了如下思考求解答<br>叛将数 m 决定将军们要进行多少轮作战信息协商），即 m+1 轮（所以，你看，只有楚是叛变的，那么就进行了两轮。<br>问题1：这里m=1的时候包括苏秦发起的一轮以及剩下将军各自传递信息的一轮，如果是m=2，那就是3轮，这三轮是哪三轮呢，不太容易联想，目测是2个苏秦发起两轮？然后剩下两轮是撇开当轮苏秦两两通<br>信吗？<br>问题2：第一轮苏秦节点的选择应该没特别要求，就是叛将也能当第一轮的指挥官，我画了下图感觉是这样<br>问题3：觉得这些模型只能保证一致，但并不能保证准确，准确就是说本来可以一起打的但是由于叛将的误导最终一起撤退这种情况","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487132,"discussion_content":"加一颗星:)，问题1：这个算法的前提是将军数为3m + 1，协商m + 1轮有解，也就是在有解的情况，是能正常推演的，但在无解的情况下，就不一定能推演了，比如，考虑个极端情况，一忠三叛，根本就就无法推演了，另外，如果是二忠二叛，虽是无解的，但仍能推演，最后两两协商。\n问题2：是的，无论忠将还是叛将作为第一轮协商的指挥官，算法都有解，也就是说，无论叛将如何作恶，只要满足将军数不少于3m + 1，忠将们都能达成一致的作战共识。\n问题3：是存在这个问题，因为这是个“经典”和“早期”的算法，后面算法做了改进，比如PBFT。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587131659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178265,"user_name":"Purson","can_delete":false,"product_type":"c1","uid":1446120,"ip_address":"","ucode":"5F0C1BB3C0C0A2","user_header":"https://static001.geekbang.org/account/avatar/00/16/10/e8/ec11e306.jpg","comment_is_top":false,"comment_ctime":1581647043,"is_pvip":false,"replies":[{"id":"69218","content":"跟钱有关的，如果场景中不存在“恶意”行为，非拜占庭算法也是可以的，比如，支付交易相关的数据，可以存储在事务型系统中。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581699972,"ip_address":"","comment_id":178265,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5876614339","product_id":100046101,"comment_content":"跟钱有关的就用拜占庭","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483734,"discussion_content":"跟钱有关的，如果场景中不存在“恶意”行为，非拜占庭算法也是可以的，比如，支付交易相关的数据，可以存储在事务型系统中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581699972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178142,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1581597003,"is_pvip":false,"replies":[{"id":"69125","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581636797,"ip_address":"","comment_id":178142,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5876564299","product_id":100046101,"comment_content":"联盟之间已经建立了信任，可以使用非拜占庭容错实现共识；而在公链每个节点都是不可信的，需要用到拜占庭容错算法：pow，pos算法。","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483681,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581636797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178067,"user_name":"Neo","can_delete":false,"product_type":"c1","uid":1004003,"ip_address":"","ucode":"DA1C960B5F23DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/e3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1581582009,"is_pvip":false,"replies":[{"id":"69226","content":"关于第一点，故事上下文，咱们也点出了“增加讨论中忠诚将军的数量”，就是说苏秦是忠将，其实，为了故事内容的连续性和趣味性，无法像算法那样把限制和约定，反复突出和强调，咱们顺着思路理解，不较真哈:)。<br><br>关于第二点，你可以这么理解，n个节点，递归协商(n - 1) &#47; 3  + 1次，能容忍(n - 1) &#47; 3 个恶意节点。技术是演化和发展的，“上古”的算法，后面也出现了一些改进版，比如PBFT，主要落地在相对“可信”的场景中，比如联盟链。<br><br>","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581704164,"ip_address":"","comment_id":178067,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5876549305","product_id":100046101,"comment_content":"韩老师写的非常棒，我说一下我的两个问题：<br><br>1. 有一处我感觉可能带来误导，在口信消息这里，您说“首先，三位将军都分拨一部分军队，由苏秦率领，苏秦参与作战计划讨论并执行作战指令。这样，3 位将军的作战讨论，就变为了 4 位将军的作战讨论，这能够增加讨论中忠诚将军的数量。”，我理解3位将军变成4位，只是该算法下叛将和将军总数的关系限制而已（叛将为m情况下，将军总数不小于3m+1），事实上，苏秦完全可以能也是叛将之一。<br><br>2. 解法一中算法的前提是，叛将数量m是已知数，但在实际的分布式系统环境中，故障实例数量、或可能出现不可靠行为的实例数量，是无法预估的，那么这个算法在实际项目中是如何落地的呢？","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483654,"discussion_content":"关于第一点，故事上下文，咱们也点出了“增加讨论中忠诚将军的数量”，就是说苏秦是忠将，其实，为了故事内容的连续性和趣味性，无法像算法那样把限制和约定，反复突出和强调，咱们顺着思路理解，不较真哈:)。\n\n关于第二点，你可以这么理解，n个节点，递归协商(n - 1) / 3  + 1次，能容忍(n - 1) / 3 个恶意节点。技术是演化和发展的，“上古”的算法，后面也出现了一些改进版，比如PBFT，主要落地在相对“可信”的场景中，比如联盟链。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581704164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177379,"user_name":"Chocolate","can_delete":false,"product_type":"c1","uid":1013822,"ip_address":"","ucode":"242CF0E3C10E97","user_header":"https://static001.geekbang.org/account/avatar/00/0f/78/3e/c39d86f1.jpg","comment_is_top":false,"comment_ctime":1581381720,"is_pvip":false,"replies":[{"id":"68963","content":"在拜占庭场景中，信使被杀，是一种会发生的情况，不是问题，你可以这么想象，两军交战，通讯卫星，是可能被敌军击落的哟。需要解决的是，在信使被杀的情况下，如何让忠诚将军们达成共识，执行一致的作战计划。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581446962,"ip_address":"","comment_id":177379,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5876349016","product_id":100046101,"comment_content":"如何解决信使被杀的问题呢","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483408,"discussion_content":"在拜占庭场景中，信使被杀，是一种会发生的情况，不是问题，你可以这么想象，两军交战，通讯卫星，是可能被敌军击落的哟。需要解决的是，在信使被杀的情况下，如何让忠诚将军们达成共识，执行一致的作战计划。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581446962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1235607,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsexaVCEecIhpPsOqHJkZFEnyTfOZ1Ot3lmSMfyIVkR5SerJibatj6mIHackokoIO4ELiaObhQ60rw/132","nickname":"Infinite_gao","note":"","ucode":"9FBFEDED8790A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171731,"discussion_content":"1. 如果规定的时间没有收到信使的信息，那么使用预先商量的默认值\n2. 可以设置回复机制，如果发送方在规定的时间内没有收到接收方的回复，那么重新派出信使传递消息。可以规定重新发送的次数。参考tcp","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1581741606,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350226,"user_name":"纵不朽","can_delete":false,"product_type":"c1","uid":1877862,"ip_address":"","ucode":"DB2CA2C46B2EF1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLu3MgZBAyyiavX2CMF2KRib791j3bBGiaQDzuQwBF2k6AKHANV2uTAAss2vVaeC7xcSYYD8vjmibRpTQ/132","comment_is_top":false,"comment_ctime":1656671536,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656671536","product_id":100046101,"comment_content":"第一种解决方案的，正方将军和判军同时发消息，那收到消息的将军该作何抉择","like_count":0},{"had_liked":false,"id":347004,"user_name":"Geek_46557d","can_delete":false,"product_type":"c1","uid":2868228,"ip_address":"","ucode":"18254B5D517379","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIyOUmQdl0UI7FzKciaI4I6nZejqhFIHh8HxUsCibEvmJYvibV2vNLD8BBoXgQmVA1uX9vCk53pTbYaQ/132","comment_is_top":false,"comment_ctime":1653613798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653613798","product_id":100046101,"comment_content":"有一个问题想问下老师，基于口信的算法中第一轮假定只有一个人在发送消息然后他作为指挥官，这个时候有没有可能叛徒也会同时发消息，所以第一轮有两个人在竞争指挥官的情况","like_count":0},{"had_liked":false,"id":340873,"user_name":"数学汤家凤","can_delete":false,"product_type":"c1","uid":2029485,"ip_address":"","ucode":"DE84E777C384AD","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f7/ad/4fd4d867.jpg","comment_is_top":false,"comment_ctime":1649210137,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649210137","product_id":100046101,"comment_content":"口信型，有一个问题。要提前知道有多少个叛军，才能保证共识。但是问题就是事发之前根本不知道有多少个叛军","like_count":0},{"had_liked":false,"id":329806,"user_name":"Z宇锤锤","can_delete":false,"product_type":"c1","uid":2188142,"ip_address":"","ucode":"7DB36E986A7A51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","comment_is_top":false,"comment_ctime":1641545586,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641545586","product_id":100046101,"comment_content":"有人捣乱就用拜占庭，没有人捣鼓就用非拜占庭。","like_count":0},{"had_liked":false,"id":326362,"user_name":"宇飞","can_delete":false,"product_type":"c1","uid":1105513,"ip_address":"","ucode":"D64C53CD189164","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/69/113da382.jpg","comment_is_top":false,"comment_ctime":1639482946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639482946","product_id":100046101,"comment_content":"叛变对于个人来说肯定是有利可图的，没有利益的事情也就不愿意叛变，现在热门的区块链技术的先驱比特币就是采用了拜占庭容错算法POW，对于这种开放式的网络环境必须使用拜占庭容错算法，因为彼此无法建立信任关系。如果是企业内部的分布式中间件，因为只需考虑故障容错，不存在恶意节点，因为企业也不想没事找事是吧","like_count":0},{"had_liked":false,"id":325315,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1638921033,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638921033","product_id":100046101,"comment_content":"这里隐藏了一个消息的前提条件吧，目前消息是只有 yes和no两种类型的话，类似布尔值，但是在实际情况下，消息数据的类型很多的，因此想解决这个问题的难度又不一样了。","like_count":0},{"had_liked":false,"id":316335,"user_name":"风中追风","can_delete":false,"product_type":"c1","uid":1340290,"ip_address":"","ucode":"B37FE950743773","user_header":"https://static001.geekbang.org/account/avatar/00/14/73/82/b593df59.jpg","comment_is_top":false,"comment_ctime":1634275585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634275585","product_id":100046101,"comment_content":"多个叛徒的情况下怎么推呢","like_count":0},{"had_liked":false,"id":312749,"user_name":"Geek_9627ff","can_delete":false,"product_type":"c1","uid":2734601,"ip_address":"","ucode":"7AD135BAF4B567","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJBb58PJoR1SEBQEaBTUGLbwyPgBZz4hPQGh0nVWO0BA2Y4bznuuiaYvRpZqoLiaDkmicFjmluhvJXAQ/132","comment_is_top":false,"comment_ctime":1631965666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631965666","product_id":100046101,"comment_content":"文化沙漠就是：不是六国围攻秦国吗，怎么苏秦还指挥上六国了？秦国是在江苏那一代吗？","like_count":0},{"had_liked":false,"id":312680,"user_name":"严海波","can_delete":false,"product_type":"c1","uid":1264573,"ip_address":"","ucode":"8D4E230FD95383","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/bd/fe8c68b3.jpg","comment_is_top":false,"comment_ctime":1631938639,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1631938639","product_id":100046101,"comment_content":"拜占庭将军问题解决的前提包括信使不被杀吧，或者最多只有M个信使被敌军捕获，我的理解是这个M是叛变将军总数加上被敌军捕获人数（或者被杀人数）。","like_count":0},{"had_liked":false,"id":309807,"user_name":"NEW666","can_delete":false,"product_type":"c1","uid":1396313,"ip_address":"","ucode":"F41BD45253C50E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLUabUgtOZicYHKJ3Q1C2RUaDRqLY60O6mJH28ibRYnVxhegM0BuvziakOvj11S6FaMcml55XU5OG2ibg/132","comment_is_top":false,"comment_ctime":1630338364,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630338364","product_id":100046101,"comment_content":"签名机制是不是就不用进行大多数这个投票？","like_count":0},{"had_liked":false,"id":306919,"user_name":"Geek_f4512f","can_delete":false,"product_type":"c1","uid":2733281,"ip_address":"","ucode":"3CB387D2943590","user_header":"","comment_is_top":false,"comment_ctime":1628776704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628776704","product_id":100046101,"comment_content":"关于这个 “信息统一性”： 那假如 原本是想大家一起 撤退的 结果让 叛将 搞成 统一 进攻了，  这也能适用？？？ 结果全军覆没。。。。","like_count":0},{"had_liked":false,"id":304577,"user_name":"xingshouzhyan","can_delete":false,"product_type":"c1","uid":2051062,"ip_address":"","ucode":"BFDD6987C12F68","user_header":"","comment_is_top":false,"comment_ctime":1627483359,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1627483359","product_id":100046101,"comment_content":"我貌似看懂了，而且我以为我懂了。不过突然想到一个问题，要是有6 忠 1 叛，对于口信型拜占庭问题， 叛徒是  指挥官 的情况，它首先向 其他 6 个将军中 3 个发送 进攻， 3 个发送失败。根据 口信型拜占庭问题 之解， 一个叛徒，需要进行2 轮 协商 ， 在第二轮中，6个将军分别作为指挥官发送消息， 则第一轮中收到 进攻的将军，第二轮中 收到消息为 进攻，进攻，撤退，撤退，撤退。同理 ，在第一轮中收到 撤退的将军 ， 第二轮中 收到消息为 进攻，进攻，进攻，撤退，撤退 ，问题怎么解决，到底是进攻还是撤退？签名一样的情况呢？","like_count":0,"discussions":[{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551827,"discussion_content":"如果进行2轮，那么各个将军得到的结果都是（1 1 1 0 0 0），这个时候，大家都按照默认的约定执行就可以了，所以仍然是共识了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645149536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293941,"user_name":"Lorry","can_delete":false,"product_type":"c1","uid":1066409,"ip_address":"","ucode":"BD4754D0F1D786","user_header":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","comment_is_top":false,"comment_ctime":1621636958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621636958","product_id":100046101,"comment_content":"m数要怎么计算？4m+1=设备总数，来倒推m吗？","like_count":0},{"had_liked":false,"id":271155,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1609419401,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1609419401","product_id":100046101,"comment_content":"口信消息型的算法，判将人数为m，需要需要 m + 1 轮，协商m轮，每次协商都是3m个将军参与吗？","like_count":0},{"had_liked":false,"id":271154,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1609419216,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1609419216","product_id":100046101,"comment_content":"这里描述的场景，都是信使能够传递消息的场景吧？没有涉及到信使被干掉的情况吧？（如：齐给楚的信息送到了；但齐给燕的信息，丢失了）","like_count":0},{"had_liked":false,"id":266500,"user_name":"我","can_delete":false,"product_type":"c1","uid":2358331,"ip_address":"","ucode":"58E3502EEC203A","user_header":"https://static001.geekbang.org/account/avatar/00/23/fc/3b/9684584c.jpg","comment_is_top":false,"comment_ctime":1607355656,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607355656","product_id":100046101,"comment_content":"我可以不可以这么说，老师看下对不对？<br>口信型能达成共识，但共识可能是恶意节点主导的。<br>签名型也能达成共识，但共识无法由恶意节点主导。<br>","like_count":0},{"had_liked":false,"id":265304,"user_name":"大俊stan","can_delete":false,"product_type":"c1","uid":1125370,"ip_address":"","ucode":"BD0CB5FC790DDB","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/fa/1cde88d4.jpg","comment_is_top":false,"comment_ctime":1606842492,"is_pvip":false,"replies":[{"id":"96436","content":"加一颗星:)，第二次什么呢？","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606881022,"ip_address":"","comment_id":265304,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606842492","product_id":100046101,"comment_content":"对于第一种情况，如果有m个叛徒，那么要进行m加1次消息传递，那么问题来了，如果第一次是首领发送给所有人，第二次","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510869,"discussion_content":"加一颗星:)，第二次什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606881022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253499,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1602754949,"is_pvip":false,"replies":[{"id":"96021","content":"加一颗星:)，是的","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606647225,"ip_address":"","comment_id":253499,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602754949","product_id":100046101,"comment_content":"老师您好，签名消息型拜占庭问题之解中，楚国发送消息给燕的时候是不是把必须把齐国的消息和签名一起作为一个整体，再对整体用自己的私钥签名发送（这样理解对不对），燕再通过相反的顺序，先比较楚的签名是否对，然后比较里面的齐国的签名是否对，就发现楚国伪造的了，就不管这一条消息的内容了，老师这里面是一条消息吧？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507086,"discussion_content":"加一颗星:)，是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606647225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247868,"user_name":"扁舟","can_delete":false,"product_type":"c1","uid":1818287,"ip_address":"","ucode":"486C0D0FAB15C8","user_header":"https://static001.geekbang.org/account/avatar/00/1b/be/af/93e14e9d.jpg","comment_is_top":false,"comment_ctime":1599897983,"is_pvip":false,"replies":[{"id":"91808","content":"加一颗星:）","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1601298797,"ip_address":"","comment_id":247868,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599897983","product_id":100046101,"comment_content":"第一次看的只是惊叹，这样就能解决问题，当把算法协议也看了一遍后，再回刷 果然理解会有所提升，以前被自己忽略的语句，细读一遍基本全是重点，建议和我一样一遍感觉没理解透的，可以把后面的看一看再回过头来，会有新的体验，谢谢老师的详细讲解","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505516,"discussion_content":"加一颗星:）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601298797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241697,"user_name":"李鑫磊","can_delete":false,"product_type":"c1","uid":1101615,"ip_address":"","ucode":"D06517CFCEEE00","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/2f/4f89f22a.jpg","comment_is_top":false,"comment_ctime":1597392739,"is_pvip":false,"replies":[{"id":"95922","content":"感谢小红花:)，针对大家比较共性的问题，内容作了扩充和微调。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606564043,"ip_address":"","comment_id":241697,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597392739","product_id":100046101,"comment_content":"终于看到了一篇把拜占庭将军问题将清楚的文章。现在看到的文章和一开始发布的文章是不是不一样？我记得在签名消息型拜占庭将军问题之解的表述中，专栏刚发布时的文章没有提到排序规则这么个东西，今天再一看，齐和燕发现楚叛变后，用同样的排序算法，得到同样的指令序列，然后取序列中的第一个指令，于是齐和楚就达成了一致。将的不错，奖励一朵小红花，哈哈。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503818,"discussion_content":"感谢小红花:)，针对大家比较共性的问题，内容作了扩充和微调。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606564043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":240745,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1597051652,"is_pvip":false,"replies":[{"id":"92471","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1602600942,"ip_address":"","comment_id":240745,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597051652","product_id":100046101,"comment_content":"对于一些传统的,部署在私有云或者VPC的场景,一般会使用非拜占庭算法<br>对于一些部署在公网的集群,且在集群中可能存在恶意攻击的人,例如涉及金融的类银行网络,使用拜占庭算法比较好","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503548,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602600942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236988,"user_name":"莫汉辉","can_delete":false,"product_type":"c1","uid":1043814,"ip_address":"","ucode":"174A00895ED8DE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/66/f65ed1ea.jpg","comment_is_top":false,"comment_ctime":1595644183,"is_pvip":false,"replies":[{"id":"87648","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595755508,"ip_address":"","comment_id":236988,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595644183","product_id":100046101,"comment_content":"考虑两个解决方案：<br>1、识别出叛军，也就是第二个办法，利用签名过滤假信息；<br>2、允许叛军存在的基础上去达成一致，办法是有足够多的投票令有问题的投票不注意影响最后结果，办法是忠诚的将军比例足够多","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502281,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595755508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236285,"user_name":"KAGEMUSHA","can_delete":false,"product_type":"c1","uid":1144504,"ip_address":"","ucode":"DFC05BE62A9C10","user_header":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","comment_is_top":false,"comment_ctime":1595384609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595384609","product_id":100046101,"comment_content":"一开始看的时候一脸懵逼注意力都集中在人名上面了【捂脸】。李永乐老师也讲过口头协议B站上有可以参考看一下。","like_count":0},{"had_liked":false,"id":234375,"user_name":"Following U","can_delete":false,"product_type":"c1","uid":2063665,"ip_address":"","ucode":"5742875245E11C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/7d/31/b630e3a1.jpg","comment_is_top":false,"comment_ctime":1594658185,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594658185","product_id":100046101,"comment_content":"非常好的讲解","like_count":0},{"had_liked":false,"id":232815,"user_name":"--","can_delete":false,"product_type":"c1","uid":1075167,"ip_address":"","ucode":"A262E3991E69DA","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/df/8b85d0d9.jpg","comment_is_top":false,"comment_ctime":1594123580,"is_pvip":false,"replies":[{"id":"87637","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595751702,"ip_address":"","comment_id":232815,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1594123580","product_id":100046101,"comment_content":"总的来说它能解决共识问题，但是实际上也有缺陷：<br>1. 因为要重复的转发消息，所以网络成本很大<br>2. 虽然能达成共识，但是大家共识的结果不一定是有利的，比如本应该进攻，但是大家都撤退了","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500777,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595751702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231053,"user_name":"zero","can_delete":false,"product_type":"c1","uid":1239697,"ip_address":"","ucode":"AAB23C8C348CC3","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/91/d2e09361.jpg","comment_is_top":false,"comment_ctime":1593572078,"is_pvip":false,"replies":[{"id":"87635","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595751140,"ip_address":"","comment_id":231053,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593572078","product_id":100046101,"comment_content":"对签名消息的定义是在口信消息定义的基础上增加了如下两条：<br>1. 忠诚将军的签名无法伪造，而且对他签名消息的内容进行任何更改都会被发现；<br>2. 任何人都能验证将军签名的真伪。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500137,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595751140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231049,"user_name":"zero","can_delete":false,"product_type":"c1","uid":1239697,"ip_address":"","ucode":"AAB23C8C348CC3","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/91/d2e09361.jpg","comment_is_top":false,"comment_ctime":1593571959,"is_pvip":false,"replies":[{"id":"87634","content":"加一颗星:)，是的，可以采用“指挥官-副官”或“递归”来辅助理解。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595751100,"ip_address":"","comment_id":231049,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593571959","product_id":100046101,"comment_content":"第一轮是指挥官发送作战指令，第二轮是副官之间相互交换第一轮收到的指挥官信息，来达成一致，并非可以随意发送指令。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500135,"discussion_content":"加一颗星:)，是的，可以采用“指挥官-副官”或“递归”来辅助理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595751100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225727,"user_name":"杨冬","can_delete":false,"product_type":"c1","uid":1956611,"ip_address":"","ucode":"317607AAA75F85","user_header":"https://static001.geekbang.org/account/avatar/00/1d/db/03/67fbb09d.jpg","comment_is_top":false,"comment_ctime":1591841554,"is_pvip":false,"replies":[{"id":"88043","content":"加一颗星:），本质区别在于消息类型，一个是普通消息，一个是签名消息；口信，不需要数字签名，但只能容忍（n - 1）&#47; 3个叛将，而签名，能容忍任意数量的叛将，但需要数字签名，会消耗较多的性能。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1596133363,"ip_address":"","comment_id":225727,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591841554","product_id":100046101,"comment_content":"韩老师，可以总结一下口信和签名两者得本质区别，和优缺点吗","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497965,"discussion_content":"加一颗星:），本质区别在于消息类型，一个是普通消息，一个是签名消息；口信，不需要数字签名，但只能容忍（n - 1）/ 3个叛将，而签名，能容忍任意数量的叛将，但需要数字签名，会消耗较多的性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596133363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217700,"user_name":"注意力$","can_delete":false,"product_type":"c1","uid":1142316,"ip_address":"","ucode":"7FB3399A1EAB72","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/2c/e2f3cfc0.jpg","comment_is_top":false,"comment_ctime":1589592147,"is_pvip":false,"replies":[{"id":"80713","content":"加一颗星:)，客户端 &lt;-&gt; 中间人 &lt;-&gt;服务器，你可以将中间人理解为网关、ARP欺骗劫持流量、主机程序劫持流量等，也就是说你拿到客户端和服务器的所有流量，作为中间人（Man In Middle）处于客户端和服务器之间，这样，你就能劫持流量，恶意伪造信息，这是一种常见和有效的攻击方式。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1589769286,"ip_address":"","comment_id":217700,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1589592147","product_id":100046101,"comment_content":"老师，请问 信使被间谍替换，可以理解为通讯被中间人攻击，攻击者在恶意伪造信息和劫持通讯。，中间人是怎么理解，相当于计算机系统中的什么角色","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495224,"discussion_content":"加一颗星:)，客户端 &amp;lt;-&amp;gt; 中间人 &amp;lt;-&amp;gt;服务器，你可以将中间人理解为网关、ARP欺骗劫持流量、主机程序劫持流量等，也就是说你拿到客户端和服务器的所有流量，作为中间人（Man In Middle）处于客户端和服务器之间，这样，你就能劫持流量，恶意伪造信息，这是一种常见和有效的攻击方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589769286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216765,"user_name":"禾田日成","can_delete":false,"product_type":"c1","uid":1450722,"ip_address":"","ucode":"4BBC18778FDF88","user_header":"https://static001.geekbang.org/account/avatar/00/16/22/e2/4ca2d6d1.jpg","comment_is_top":false,"comment_ctime":1589338511,"is_pvip":false,"replies":[{"id":"80779","content":"加一颗星:)，是存在这个影响，这个算法是经典、早期算法，比较理论化，它的探讨的是在拜占庭容错场景下，忠将们如何执行一致的作战计划。后来的pfbt等算法，是能在实际场景中落地的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1589827829,"ip_address":"","comment_id":216765,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589338511","product_id":100046101,"comment_content":"想问一下，叛将的数量在真实的分布式场景中应该是不确定的对吧，那口信消息型解决方式是不是就会收到叛将的数量的影响了呀","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494940,"discussion_content":"加一颗星:)，是存在这个影响，这个算法是经典、早期算法，比较理论化，它的探讨的是在拜占庭容错场景下，忠将们如何执行一致的作战计划。后来的pfbt等算法，是能在实际场景中落地的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589827829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213390,"user_name":"桂冠远航","can_delete":false,"product_type":"c1","uid":1155463,"ip_address":"","ucode":"5959E1A1DAA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/87/259ab5a3.jpg","comment_is_top":false,"comment_ctime":1588400918,"is_pvip":false,"replies":[{"id":"79462","content":"加一颗星:)，感谢反馈，签名消息拜占庭问题之解，有个加餐补充（也就是在18讲后的加餐），我会修正下，把他们合到一起。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588783268,"ip_address":"","comment_id":213390,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588400918","product_id":100046101,"comment_content":"签名消息的通讯方式看的有点懵，老师应该提一句签名消息用的通讯方式也是两轮协商。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493765,"discussion_content":"加一颗星:)，感谢反馈，签名消息拜占庭问题之解，有个加餐补充（也就是在18讲后的加餐），我会修正下，把他们合到一起。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588783268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197329,"user_name":"小麦","can_delete":false,"product_type":"c1","uid":1216881,"ip_address":"","ucode":"55C7199A0D5659","user_header":"https://static001.geekbang.org/account/avatar/00/12/91/71/0b16655d.jpg","comment_is_top":false,"comment_ctime":1585368295,"is_pvip":true,"replies":[{"id":"77180","content":"加一颗星:)，需要的，更确切的说，是m + 1，m为叛将数，“少数服从多数”也是需要的，这个规则能确保忠将执行的那个指令是一致的。指挥官和副官模型，是为了辅助理解，算法解决的是叛徒作恶，忠将们如何就作战计划（可以理解值，value）达成共识，“指挥官”可能是忠将，也可能是叛徒。一致性和共识，在中文中常被混淆，因为很多资料将Consensus和consistency都翻译成了一致性，后面我会补充说说。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586887515,"ip_address":"","comment_id":197329,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585368295","product_id":100046101,"comment_content":"老师，看完文章后有点疑问<br><br>原本的作战计划是所有将军共同协商的，也就是所有忠诚的将军如何执行一致且合理的作战计划，且每个将军都有决策权，如果大部分忠诚的将军发出的决定是撤退，但是最终一致决定是进攻，那么这是不合理的。<br><br>但是现在问题简化成指挥官与副官的问题，那么决策者只有指挥官，虽然最终可以执行一致的作战计划，但是只是一个将军的决策。<br><br>如果要与原问题相符，是否需要执行N次指挥官与副官传达命令的过程，以获取每个将军观察后传达出来的决定，且保证每个将军的作战信息（论文中就是v(1),...,v(n)）是一致的，然后将军们以少数服从多数的原则去执行作战计划。<br><br>回到计算机世界，将军们相互协商出一致的作战计划，达成共识，所以拜占庭问题是讨论如何在有故障或者恶意节点的情况下，所有正常节点能获得合理的共识。而指挥官与副官的模型中，副官并没有决策权，所以倒是类似在解决一致性的问题了。<br><br>本人小白，提的问题或者认知也有点白，请老师点拨一哈！","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489496,"discussion_content":"加一颗星:)，需要的，更确切的说，是m + 1，m为叛将数，“少数服从多数”也是需要的，这个规则能确保忠将执行的那个指令是一致的。指挥官和副官模型，是为了辅助理解，算法解决的是叛徒作恶，忠将们如何就作战计划（可以理解值，value）达成共识，“指挥官”可能是忠将，也可能是叛徒。一致性和共识，在中文中常被混淆，因为很多资料将Consensus和consistency都翻译成了一致性，后面我会补充说说。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586887515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":196161,"user_name":"lupguo","can_delete":false,"product_type":"c1","uid":1009098,"ip_address":"","ucode":"1B55A01DF78647","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/ca/38dcd55a.jpg","comment_is_top":false,"comment_ctime":1585239538,"is_pvip":false,"replies":[{"id":"75558","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585934969,"ip_address":"","comment_id":196161,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585239538","product_id":100046101,"comment_content":"1、拜占庭将军问题解：口信消息&#47;签名校对<br> - 口信消息：叛将m，将军n，则需要满足n&gt;=3m+1可解，需要m+1轮协商<br> - 签名约束了叛将行为（需要信息不被伪造、需要信息可被其他将军校对）<br>2、分布式场景：故障&#47;恶意；<br>可信环境（DevOps）：采用非拜占庭容错算法（故障容错算法CFT），代表Paxos、Raft算法、ZAB协议<br>恶意环境（比特币）：采用拜占庭容错，代表BFT、PBFT、PoW","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489234,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585934969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193019,"user_name":"桂冠远航","can_delete":false,"product_type":"c1","uid":1155463,"ip_address":"","ucode":"5959E1A1DAA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/87/259ab5a3.jpg","comment_is_top":false,"comment_ctime":1584882320,"is_pvip":false,"replies":[{"id":"75705","content":"觉得哪里比较难理解呢？咱们可以讨论交流下:)。拜占庭将军问题，是学习分布式技术时必须要理解的内容哟。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586019278,"ip_address":"","comment_id":193019,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584882320","product_id":100046101,"comment_content":"感觉挺深奥的。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488497,"discussion_content":"觉得哪里比较难理解呢？咱们可以讨论交流下:)。拜占庭将军问题，是学习分布式技术时必须要理解的内容哟。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586019278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189547,"user_name":"星期八","can_delete":false,"product_type":"c1","uid":1185504,"ip_address":"","ucode":"34A37F73A48E7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/16/e0/7abad3cc.jpg","comment_is_top":false,"comment_ctime":1584528194,"is_pvip":false,"replies":[{"id":"76017","content":"加一颗星:)，从接收到的指令集合中，按照规则选取一个指令，作为最终的作战指令。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586203333,"ip_address":"","comment_id":189547,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584528194","product_id":100046101,"comment_content":"签名的方式的前提条件也是将从指挥官处收到的作战信息，作为他的作战指令的吧","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487731,"discussion_content":"加一颗星:)，从接收到的指令集合中，按照规则选取一个指令，作为最终的作战指令。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586203333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185768,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1583677246,"is_pvip":false,"replies":[{"id":"75721","content":"加一颗星:)，技术是需要反复学习的，同样的文字，不同的时候我们能读出的内容也是不同的。多交流:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586021203,"ip_address":"","comment_id":185768,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583677246","product_id":100046101,"comment_content":"2020年3月8日，第三遍看，有了更新的理解。同时，评论区也更丰富了。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486493,"discussion_content":"加一颗星:)，技术是需要反复学习的，同样的文字，不同的时候我们能读出的内容也是不同的。多交流:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586021203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185670,"user_name":"cp★钊","can_delete":false,"product_type":"c1","uid":1275690,"ip_address":"","ucode":"6B86D4D538BDF7","user_header":"https://static001.geekbang.org/account/avatar/00/13/77/2a/244d98aa.jpg","comment_is_top":false,"comment_ctime":1583659671,"is_pvip":false,"replies":[{"id":"76184","content":"加一颗星:)，“6个”是指4忠2叛吗？能发下你的推导过程，咱们一起看看吗？另外，关于5忠2叛、7忠3叛的推导，我后面补充个演示程序吧，可以方便的演示更多的情况。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586284926,"ip_address":"","comment_id":185670,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583659671","product_id":100046101,"comment_content":"5忠2叛”，“7忠3叛”，怎样通过3&#47;4轮的协商达到一致？这个问题也是我想问的，我自己看完论文这块之后不是很懂，所有过来看这个文章，但按照自己的理解，我在推导2个叛徒的情况下，发现好像6个也能满足(不知道是我哪里理解错了。。)麻烦老师再说明一下","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486459,"discussion_content":"加一颗星:)，“6个”是指4忠2叛吗？能发下你的推导过程，咱们一起看看吗？另外，关于5忠2叛、7忠3叛的推导，我后面补充个演示程序吧，可以方便的演示更多的情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586284926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185206,"user_name":"X中倪","can_delete":false,"product_type":"c1","uid":1418862,"ip_address":"","ucode":"F28FAFF2FEDD1A","user_header":"https://static001.geekbang.org/account/avatar/00/15/a6/6e/21907ff9.jpg","comment_is_top":false,"comment_ctime":1583514808,"is_pvip":false,"replies":[{"id":"71540","content":"这个算法探讨是共识，不是原子提交呐，2pc是原子提交。这个程序可以这么理解，n个节点、能容忍(n - 1)&#47;3个节点作恶，实现方式是递归执行(n - 1)&#47;3 + 1。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1583543749,"ip_address":"","comment_id":185206,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583514808","product_id":100046101,"comment_content":" 解法一，口信消息型拜占庭问题之解。最后得出的递推公式是 最多容忍 （n-1)&#47;3=m。然而实际场景中并不知道M的具体值。可能大可能小，感觉不可取。这种解法能联想到分布式事务的2pc 吗？<br>","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486289,"discussion_content":"这个算法探讨是共识，不是原子提交呐，2pc是原子提交。这个程序可以这么理解，n个节点、能容忍(n - 1)/3个节点作恶，实现方式是递归执行(n - 1)/3 + 1。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583543749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183626,"user_name":"朱东旭","can_delete":false,"product_type":"c1","uid":1242338,"ip_address":"","ucode":"C48DD620A63868","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/e2/dbc4a5f2.jpg","comment_is_top":false,"comment_ctime":1583080112,"is_pvip":false,"replies":[{"id":"76370","content":"加一颗星:），首先，指挥官和副官，是辅助咱们理解算法的。其次，最先发起消息的将军（也就是节点）是指挥官，然后，接收到消息的将军，将在下一轮作战信息协商中，作为指挥官。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586376867,"ip_address":"","comment_id":183626,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1583080112","product_id":100046101,"comment_content":"您好，韩老师，我注意到口信型消息每一轮递归都有个&quot;指挥官&quot;，请问这个指挥官使用什么方式确认呢。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485734,"discussion_content":"加一颗星:），首先，指挥官和副官，是辅助咱们理解算法的。其次，最先发起消息的将军（也就是节点）是指挥官，然后，接收到消息的将军，将在下一轮作战信息协商中，作为指挥官。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586376867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1233900,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d3/ec/8635ab38.jpg","nickname":"小龙哥","note":"","ucode":"4A5314AC759D89","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":220997,"discussion_content":"同问，指挥官身份是不是提前商定的？确定指挥官以后，也并不知道他是都叛徒，这样就说得通了。也就是说，这两个解决方案，都有一个前提，就是集群中已经存在一个leader。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585961433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180003,"user_name":"羽翼1982","can_delete":false,"product_type":"c1","uid":1130194,"ip_address":"","ucode":"1C7362888B7E3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/d2/5f9d3fa7.jpg","comment_is_top":false,"comment_ctime":1582163601,"is_pvip":false,"replies":[{"id":"69962","content":"这个提议很好:)，还有个另外的提议，是做个演示程序，也能帮助大家理解。我后续会对内容做个补充:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582203173,"ip_address":"","comment_id":180003,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1582163601","product_id":100046101,"comment_content":"前面的提问我可能没有说清楚，我希望老师能够说一下基于口信型拜占庭将军问题在更大规模下的解法，比如“5忠2叛”，“7忠3叛”，怎样通过3&#47;4轮的协商达到一致；这个可以帮助更好理解“对于一般的问题，通过m+1轮的协商达成一致”这个过程","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484487,"discussion_content":"这个提议很好:)，还有个另外的提议，是做个演示程序，也能帮助大家理解。我后续会对内容做个补充:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582203173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1349171,"avatar":"https://static001.geekbang.org/account/avatar/00/14/96/33/214269f6.jpg","nickname":"一张钞票","note":"","ucode":"A142D249516A9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243396,"discussion_content":"这个演示那里有？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587537715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179725,"user_name":"千城","can_delete":false,"product_type":"c1","uid":1850369,"ip_address":"","ucode":"346A133059977D","user_header":"https://static001.geekbang.org/account/avatar/00/1c/3c/01/29008d6a.jpg","comment_is_top":false,"comment_ctime":1582083955,"is_pvip":false,"replies":[{"id":"69799","content":"探讨的是共识问题，不是一致性（Consistency）哟，也就是说，在有叛徒或者恶意干扰时，忠将们如何达成共识，避免被干扰。你可以这么理解，比特币，面临的就是典型的拜占庭将军问题，涉及到cash，肯定有节点想作弊，那么，如何避免叛徒节点作弊，干扰了正常节点们的共识，把不属于叛徒节点的比特币，变成叛徒的了呢？这是，比特币要解决的拜占庭将军问题，也就是通过PoW。<br><br>另外，我想说的是，在中文语义中，Consensus和Consistency都被翻译成了一致性，误导了大家的理解。我会在后续的加餐篇中，详细说说。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1582101272,"ip_address":"","comment_id":179725,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1582083955","product_id":100046101,"comment_content":"我有一个疑问，拜占庭将军问题是为了解决一致性问题，指令本身真假先不考虑是吗？ <br>比如，当前真实指令应该是进攻，叛楚首先发起指令，那他应该朝其余三方都发送撤退指令，那这样他的目的就达到了。但如果这样了，那大家不就都在执行错误的指令了么？<br>如果我提问的前提是确定的，那我就有另外一个问题了，原始指令的真假怎么判断？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484370,"discussion_content":"探讨的是共识问题，不是一致性（Consistency）哟，也就是说，在有叛徒或者恶意干扰时，忠将们如何达成共识，避免被干扰。你可以这么理解，比特币，面临的就是典型的拜占庭将军问题，涉及到cash，肯定有节点想作弊，那么，如何避免叛徒节点作弊，干扰了正常节点们的共识，把不属于叛徒节点的比特币，变成叛徒的了呢？这是，比特币要解决的拜占庭将军问题，也就是通过PoW。\n\n另外，我想说的是，在中文语义中，Consensus和Consistency都被翻译成了一致性，误导了大家的理解。我会在后续的加餐篇中，详细说说。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582101272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1850369,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/3c/01/29008d6a.jpg","nickname":"千城","note":"","ucode":"346A133059977D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":178461,"discussion_content":"所以我的理解是，拜问题的核心在于将军们如何能达成一致的共识(我查了一下共识和一致性，二者意思，确实有很大区别，谢谢老师提醒！)，采取相同的行动，而行动是什么，先不关注(或者说，会用另外的方法来保证行动的正确性)。请问老师，这样理解是否合适？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582166045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1289781,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLYZTQEafjZjbI6h1KP5iaM6D3QCBLolxCFImIZc7FfWZv7YRGjzGcS1pQslibtQfEIqhoP9XGpNC9Q/132","nickname":"ryanking","note":"","ucode":"4A2AB4524DC121","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":177309,"discussion_content":"我猜在拜占庭问题中，只要军队不被秦灭掉，指令都是&#34;正确&#34;的，不一致的操作才会造成溃败。又或者说，即使这次撤退了失了先机，回头也可以算账。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582093525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179236,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1581941837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581941837","product_id":100046101,"comment_content":"我觉得中本聪就是苏秦😂😂😂","like_count":0},{"had_liked":false,"id":178851,"user_name":"cricket1981","can_delete":false,"product_type":"c1","uid":1001715,"ip_address":"","ucode":"758262F5958DA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/f3/f1034ffd.jpg","comment_is_top":false,"comment_ctime":1581840393,"is_pvip":false,"replies":[{"id":"69466","content":"有说的，在学习中如果有不理解的地方，欢迎留言，咱们一起讨论下:)。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581870213,"ip_address":"","comment_id":178851,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581840393","product_id":100046101,"comment_content":"后面会讲解各种现有分布式系统采用不同分布式算法的原因和考量吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483995,"discussion_content":"有说的，在学习中如果有不理解的地方，欢迎留言，咱们一起讨论下:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581870213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178849,"user_name":"cricket1981","can_delete":false,"product_type":"c1","uid":1001715,"ip_address":"","ucode":"758262F5958DA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/f3/f1034ffd.jpg","comment_is_top":false,"comment_ctime":1581840286,"is_pvip":false,"replies":[{"id":"69467","content":"从消息类型上，是口信消息，也就是普通的网络通讯消息。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581870320,"ip_address":"","comment_id":178849,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581840286","product_id":100046101,"comment_content":"想问一下Gossip协议属于口信消息型吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483994,"discussion_content":"从消息类型上，是口信消息，也就是普通的网络通讯消息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581870320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178625,"user_name":"慢动作","can_delete":false,"product_type":"c1","uid":1133945,"ip_address":"","ucode":"62C944F4A4D8AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/79/803537db.jpg","comment_is_top":false,"comment_ctime":1581761798,"is_pvip":true,"replies":[{"id":"69612","content":"可以这么理解，就计划达成了共识，然后执行计划，实现了一致行动。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581968628,"ip_address":"","comment_id":178625,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581761798","product_id":100046101,"comment_content":"问题是投票得出共识，解决方案是已知共识怎么一致行动，一时转不过弯","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483902,"discussion_content":"可以这么理解，就计划达成了共识，然后执行计划，实现了一致行动。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581968628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178255,"user_name":"怎么这么菜😩","can_delete":false,"product_type":"c1","uid":1400263,"ip_address":"","ucode":"A4890118AC18F9","user_header":"https://static001.geekbang.org/account/avatar/00/15/5d/c7/56183691.jpg","comment_is_top":false,"comment_ctime":1581644144,"is_pvip":false,"replies":[{"id":"69219","content":"可以这么理解:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581700171,"ip_address":"","comment_id":178255,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581644144","product_id":100046101,"comment_content":"我看了老师的IE 与 FIREFOX 的例子，可以理解为在签名消息中，可以通过信物检查判断消息是否被篡改吗","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483729,"discussion_content":"可以这么理解:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581700171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178205,"user_name":"fenix","can_delete":false,"product_type":"c1","uid":1060633,"ip_address":"","ucode":"14C2F95C15FAA4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/STDCk8sEbVdyTACdkPkrW8EGrDPZAFvjCg7gjoIibQlrCW18SxsYoEvyCm0T1tickqZTFOUtWsO67icuHfs7PqxuQ/132","comment_is_top":false,"comment_ctime":1581607704,"is_pvip":true,"replies":[{"id":"69221","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581700229,"ip_address":"","comment_id":178205,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581607704","product_id":100046101,"comment_content":"一般的局域网内部的分布式算法应该会使用非拜占庭容错算法","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483699,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581700229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178178,"user_name":"洛奇","can_delete":false,"product_type":"c1","uid":1624355,"ip_address":"","ucode":"662B4005721119","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","comment_is_top":false,"comment_ctime":1581602816,"is_pvip":false,"replies":[{"id":"69124","content":"先说说什么是时序数据，时序数据（Time Series Data），是指按照时间顺序记录系统、设备状态变化的数据，比如，CPU利用率、某一时间的环境温度等。时序数据以时间作为主要的查询纬度，通常会将连续的多个时序数据绘制成线，制作基于时间的多纬度报表，用于揭示数据背后的趋势、规律、异常，进行实时在线预测和预警，时序数据普遍存在于IT基础设施、运维监控系统和物联网中。<br><br>说完时序数据的特点后，那么，时序数据库，就容易理解了。时序型数据库就是存放时序数据的专用型数据库，并且支持时序数据的快速写入、持久化、多纬度的实时聚合运算等功能。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1581636768,"ip_address":"","comment_id":178178,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1581602816","product_id":100046101,"comment_content":"什么是时序数据库？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483693,"discussion_content":"先说说什么是时序数据，时序数据（Time Series Data），是指按照时间顺序记录系统、设备状态变化的数据，比如，CPU利用率、某一时间的环境温度等。时序数据以时间作为主要的查询纬度，通常会将连续的多个时序数据绘制成线，制作基于时间的多纬度报表，用于揭示数据背后的趋势、规律、异常，进行实时在线预测和预警，时序数据普遍存在于IT基础设施、运维监控系统和物联网中。\n\n说完时序数据的特点后，那么，时序数据库，就容易理解了。时序型数据库就是存放时序数据的专用型数据库，并且支持时序数据的快速写入、持久化、多纬度的实时聚合运算等功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581636768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1624355,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","nickname":"洛奇","note":"","ucode":"662B4005721119","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":169799,"discussion_content":"谢谢韩老师回复。可是这和用关系型数据库存储主键为时间戳的数据有什么不同吗？关于时序数据库的资料很少，我自己再查查看，这不是本专栏的主题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581646551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178143,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1581597024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581597024","product_id":100046101,"comment_content":"老师的课非常形象生动。","like_count":0}]}