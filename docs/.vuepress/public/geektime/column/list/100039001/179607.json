{"id":179607,"title":"21 | 理论七：重复的代码就一定违背DRY吗？如何提高代码的复用性？","content":"<p>在上一节课中，我们讲了KISS原则和YAGNI原则，KISS原则可以说是人尽皆知。今天，我们再学习一个你肯定听过的原则，那就是DRY原则。它的英文描述为：Don’t Repeat Yourself。中文直译为：不要重复自己。将它应用在编程中，可以理解为：不要写重复的代码。</p><p>你可能会觉得，这条原则非常简单、非常容易应用。只要两段代码长得一样，那就是违反DRY原则了。真的是这样吗？答案是否定的。这是很多人对这条原则存在的误解。实际上，重复的代码不一定违反DRY原则，而且有些看似不重复的代码也有可能违反DRY原则。</p><p>听到这里，你可能会有很多疑问。没关系，今天我会结合具体的代码实例，来把这个问题讲清楚，纠正你对这个原则的错误认知。除此之外，DRY原则与代码的复用性也有一些联系，所以，今天，我还会讲一讲，如何写出可复用性好的代码。</p><p>话不多说，让我们正式开始今天的学习吧！</p><h2>DRY原则（Don’t Repeat Yourself）</h2><p>DRY原则的定义非常简单，我就不再过度解读。今天，我们主要讲三种典型的代码重复情况，它们分别是：实现逻辑重复、功能语义重复和代码执行重复。这三种代码重复，有的看似违反DRY，实际上并不违反；有的看似不违反，实际上却违反了。</p><!-- [[[read_end]]] --><h3>实现逻辑重复</h3><p>我们先来看下面这样一段代码是否违反了DRY原则。如果违反了，你觉得应该如何重构，才能让它满足DRY原则？如果没有违反，那又是为什么呢？</p><pre><code>public class UserAuthenticator {\n  public void authenticate(String username, String password) {\n    if (!isValidUsername(username)) {\n      // ...throw InvalidUsernameException...\n    }\n    if (!isValidPassword(password)) {\n      // ...throw InvalidPasswordException...\n    }\n    //...省略其他代码...\n  }\n\n  private boolean isValidUsername(String username) {\n    // check not null, not empty\n    if (StringUtils.isBlank(username)) {\n      return false;\n    }\n    // check length: 4~64\n    int length = username.length();\n    if (length &lt; 4 || length &gt; 64) {\n      return false;\n    }\n    // contains only lowcase characters\n    if (!StringUtils.isAllLowerCase(username)) {\n      return false;\n    }\n    // contains only a~z,0~9,dot\n    for (int i = 0; i &lt; length; ++i) {\n      char c = username.charAt(i);\n      if (!(c &gt;= 'a' &amp;&amp; c &lt;= 'z') || (c &gt;= '0' &amp;&amp; c &lt;= '9') || c == '.') {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  private boolean isValidPassword(String password) {\n    // check not null, not empty\n    if (StringUtils.isBlank(password)) {\n      return false;\n    }\n    // check length: 4~64\n    int length = password.length();\n    if (length &lt; 4 || length &gt; 64) {\n      return false;\n    }\n    // contains only lowcase characters\n    if (!StringUtils.isAllLowerCase(password)) {\n      return false;\n    }\n    // contains only a~z,0~9,dot\n    for (int i = 0; i &lt; length; ++i) {\n      char c = password.charAt(i);\n      if (!(c &gt;= 'a' &amp;&amp; c &lt;= 'z') || (c &gt;= '0' &amp;&amp; c &lt;= '9') || c == '.') {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n</code></pre><p>代码很简单，我就不做过多解释了。在代码中，有两处非常明显的重复的代码片段：isValidUserName()函数和isValidPassword()函数。重复的代码被敲了两遍，或者简单copy-paste了一下，看起来明显违反DRY原则。为了移除重复的代码，我们对上面的代码做下重构，将isValidUserName()函数和isValidPassword()函数，合并为一个更通用的函数isValidUserNameOrPassword()。重构后的代码如下所示：</p><pre><code>public class UserAuthenticatorV2 {\n\n  public void authenticate(String userName, String password) {\n    if (!isValidUsernameOrPassword(userName)) {\n      // ...throw InvalidUsernameException...\n    }\n\n    if (!isValidUsernameOrPassword(password)) {\n      // ...throw InvalidPasswordException...\n    }\n  }\n\n  private boolean isValidUsernameOrPassword(String usernameOrPassword) {\n    //省略实现逻辑\n    //跟原来的isValidUsername()或isValidPassword()的实现逻辑一样...\n    return true;\n  }\n}\n</code></pre><p>经过重构之后，代码行数减少了，也没有重复的代码了，是不是更好了呢？答案是否定的，这可能跟你预期的不一样，我来解释一下为什么。</p><p>单从名字上看，我们就能发现，合并之后的isValidUserNameOrPassword()函数，负责两件事情：验证用户名和验证密码，违反了“单一职责原则”和“接口隔离原则”。实际上，即便将两个函数合并成isValidUserNameOrPassword()，代码仍然存在问题。</p><p>因为isValidUserName()和isValidPassword()两个函数，虽然从代码实现逻辑上看起来是重复的，但是从语义上并不重复。所谓“语义不重复”指的是：从功能上来看，这两个函数干的是完全不重复的两件事情，一个是校验用户名，另一个是校验密码。尽管在目前的设计中，两个校验逻辑是完全一样的，但如果按照第二种写法，将两个函数的合并，那就会存在潜在的问题。在未来的某一天，如果我们修改了密码的校验逻辑，比如，允许密码包含大写字符，允许密码的长度为8到64个字符，那这个时候，isValidUserName()和isValidPassword()的实现逻辑就会不相同。我们就要把合并后的函数，重新拆成合并前的那两个函数。</p><p>尽管代码的实现逻辑是相同的，但语义不同，我们判定它并不违反DRY原则。对于包含重复代码的问题，我们可以通过抽象成更细粒度函数的方式来解决。比如将校验只包含a~z、0~9、dot的逻辑封装成boolean onlyContains(String str, String charlist);函数。</p><h3>功能语义重复</h3><p>现在我们再来看另外一个例子。在同一个项目代码中有下面两个函数：isValidIp()和checkIfIpValid()。尽管两个函数的命名不同，实现逻辑不同，但功能是相同的，都是用来判定IP地址是否合法的。</p><p>之所以在同一个项目中会有两个功能相同的函数，那是因为这两个函数是由两个不同的同事开发的，其中一个同事在不知道已经有了isValidIp()的情况下，自己又定义并实现了同样用来校验IP地址是否合法的checkIfIpValid()函数。</p><p>那在同一项目代码中，存在如下两个函数，是否违反DRY原则呢？</p><pre><code>public boolean isValidIp(String ipAddress) {\n  if (StringUtils.isBlank(ipAddress)) return false;\n  String regex = &quot;^(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|[1-9])\\\\.&quot;\n          + &quot;(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)\\\\.&quot;\n          + &quot;(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)\\\\.&quot;\n          + &quot;(1\\\\d{2}|2[0-4]\\\\d|25[0-5]|[1-9]\\\\d|\\\\d)$&quot;;\n  return ipAddress.matches(regex);\n}\n\npublic boolean checkIfIpValid(String ipAddress) {\n  if (StringUtils.isBlank(ipAddress)) return false;\n  String[] ipUnits = StringUtils.split(ipAddress, '.');\n  if (ipUnits.length != 4) {\n    return false;\n  }\n  for (int i = 0; i &lt; 4; ++i) {\n    int ipUnitIntValue;\n    try {\n      ipUnitIntValue = Integer.parseInt(ipUnits[i]);\n    } catch (NumberFormatException e) {\n      return false;\n    }\n    if (ipUnitIntValue &lt; 0 || ipUnitIntValue &gt; 255) {\n      return false;\n    }\n    if (i == 0 &amp;&amp; ipUnitIntValue == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n</code></pre><p>这个例子跟上个例子正好相反。上一个例子是代码实现逻辑重复，但语义不重复，我们并不认为它违反了DRY原则。而在这个例子中，尽管两段代码的实现逻辑不重复，但语义重复，也就是功能重复，我们认为它违反了DRY原则。我们应该在项目中，统一一种实现思路，所有用到判断IP地址是否合法的地方，都统一调用同一个函数。</p><p>假设我们不统一实现思路，那有些地方调用了isValidIp()函数，有些地方又调用了checkIfIpValid()函数，这就会导致代码看起来很奇怪，相当于给代码“埋坑”，给不熟悉这部分代码的同事增加了阅读的难度。同事有可能研究了半天，觉得功能是一样的，但又有点疑惑，觉得是不是有更高深的考量，才定义了两个功能类似的函数，最终发现居然是代码设计的问题。</p><p>除此之外，如果哪天项目中IP地址是否合法的判定规则改变了，比如：255.255.255.255不再被判定为合法的了，相应地，我们对isValidIp()的实现逻辑做了相应的修改，但却忘记了修改checkIfIpValid()函数。又或者，我们压根就不知道还存在一个功能相同的checkIfIpValid()函数，这样就会导致有些代码仍然使用老的IP地址判断逻辑，导致出现一些莫名其妙的bug。</p><h3>代码执行重复</h3><p>前两个例子一个是实现逻辑重复，一个是语义重复，我们再来看第三个例子。其中，UserService中login()函数用来校验用户登录是否成功。如果失败，就返回异常；如果成功，就返回用户信息。具体代码如下所示：</p><pre><code>public class UserService {\n  private UserRepo userRepo;//通过依赖注入或者IOC框架注入\n\n  public User login(String email, String password) {\n    boolean existed = userRepo.checkIfUserExisted(email, password);\n    if (!existed) {\n      // ... throw AuthenticationFailureException...\n    }\n    User user = userRepo.getUserByEmail(email);\n    return user;\n  }\n}\n\npublic class UserRepo {\n  public boolean checkIfUserExisted(String email, String password) {\n    if (!EmailValidation.validate(email)) {\n      // ... throw InvalidEmailException...\n    }\n\n    if (!PasswordValidation.validate(password)) {\n      // ... throw InvalidPasswordException...\n    }\n\n    //...query db to check if email&amp;password exists...\n  }\n\n  public User getUserByEmail(String email) {\n    if (!EmailValidation.validate(email)) {\n      // ... throw InvalidEmailException...\n    }\n    //...query db to get user by email...\n  }\n}\n</code></pre><p>上面这段代码，既没有逻辑重复，也没有语义重复，但仍然违反了DRY原则。这是因为代码中存在“执行重复”。我们一块儿来看下，到底哪些代码被重复执行了？</p><p>重复执行最明显的一个地方，就是在login()函数中，email的校验逻辑被执行了两次。一次是在调用checkIfUserExisted()函数的时候，另一次是调用getUserByEmail()函数的时候。这个问题解决起来比较简单，我们只需要将校验逻辑从UserRepo中移除，统一放到UserService中就可以了。</p><p>除此之外，代码中还有一处比较隐蔽的执行重复，不知道你发现了没有？实际上，login()函数并不需要调用checkIfUserExisted()函数，只需要调用一次getUserByEmail()函数，从数据库中获取到用户的email、password等信息，然后跟用户输入的email、password信息做对比，依次判断是否登录成功。</p><p>实际上，这样的优化是很有必要的。因为checkIfUserExisted()函数和getUserByEmail()函数都需要查询数据库，而数据库这类的I/O操作是比较耗时的。我们在写代码的时候，应当尽量减少这类I/O操作。</p><p>按照刚刚的修改思路，我们把代码重构一下，移除“重复执行”的代码，只校验一次email和password，并且只查询一次数据库。重构之后的代码如下所示：</p><pre><code>public class UserService {\n  private UserRepo userRepo;//通过依赖注入或者IOC框架注入\n\n  public User login(String email, String password) {\n    if (!EmailValidation.validate(email)) {\n      // ... throw InvalidEmailException...\n    }\n    if (!PasswordValidation.validate(password)) {\n      // ... throw InvalidPasswordException...\n    }\n    User user = userRepo.getUserByEmail(email);\n    if (user == null || !password.equals(user.getPassword()) {\n      // ... throw AuthenticationFailureException...\n    }\n    return user;\n  }\n}\n\npublic class UserRepo {\n  public boolean checkIfUserExisted(String email, String password) {\n    //...query db to check if email&amp;password exists\n  }\n\n  public User getUserByEmail(String email) {\n    //...query db to get user by email...\n  }\n}\n</code></pre><h2>代码复用性（Code Reusability）</h2><p>在专栏的最开始，我们有提到，代码的复用性是评判代码质量的一个非常重要的标准。当时只是点到为止，没有展开讲解，今天，我再带你深入地学习一下这个知识点。</p><h3>什么是代码的复用性？</h3><p>我们首先来区分三个概念：代码复用性（Code Reusability）、代码复用（Code Resue）和DRY原则。</p><p>代码复用表示一种行为：我们在开发新功能的时候，尽量复用已经存在的代码。代码的可复用性表示一段代码可被复用的特性或能力：我们在编写代码的时候，让代码尽量可复用。DRY原则是一条原则：不要写重复的代码。从定义描述上，它们好像有点类似，但深究起来，三者的区别还是蛮大的。</p><p><strong>首先，“不重复”并不代表“可复用”。</strong>在一个项目代码中，可能不存在任何重复的代码，但也并不表示里面有可复用的代码，不重复和可复用完全是两个概念。所以，从这个角度来说，DRY原则跟代码的可复用性讲的是两回事。</p><p><strong>其次，“复用”和“可复用性”关注角度不同。</strong>代码“可复用性”是从代码开发者的角度来讲的，“复用”是从代码使用者的角度来讲的。比如，A同事编写了一个UrlUtils类，代码的“可复用性”很好。B同事在开发新功能的时候，直接“复用”A同事编写的UrlUtils类。</p><p>尽管复用、可复用性、DRY原则这三者从理解上有所区别，但实际上要达到的目的都是类似的，都是为了减少代码量，提高代码的可读性、可维护性。除此之外，复用已经经过测试的老代码，bug会比从零重新开发要少。</p><p>“复用”这个概念不仅可以指导细粒度的模块、类、函数的设计开发，实际上，一些框架、类库、组件等的产生也都是为了达到复用的目的。比如，Spring框架、Google Guava类库、UI组件等等。</p><h3>怎么提高代码复用性？</h3><p>实际上，我们前面已经讲到过很多提高代码可复用性的手段，今天算是集中总结一下，我总结了7条，具体如下。</p><ul>\n<li>减少代码耦合</li>\n</ul><p>对于高度耦合的代码，当我们希望复用其中的一个功能，想把这个功能的代码抽取出来成为一个独立的模块、类或者函数的时候，往往会发现牵一发而动全身。移动一点代码，就要牵连到很多其他相关的代码。所以，高度耦合的代码会影响到代码的复用性，我们要尽量减少代码耦合。</p><ul>\n<li>满足单一职责原则</li>\n</ul><p>我们前面讲过，如果职责不够单一，模块、类设计得大而全，那依赖它的代码或者它依赖的代码就会比较多，进而增加了代码的耦合。根据上一点，也就会影响到代码的复用性。相反，越细粒度的代码，代码的通用性会越好，越容易被复用。</p><ul>\n<li>模块化</li>\n</ul><p>这里的“模块”，不单单指一组类构成的模块，还可以理解为单个类、函数。我们要善于将功能独立的代码，封装成模块。独立的模块就像一块一块的积木，更加容易复用，可以直接拿来搭建更加复杂的系统。</p><ul>\n<li>业务与非业务逻辑分离</li>\n</ul><p>越是跟业务无关的代码越是容易复用，越是针对特定业务的代码越难复用。所以，为了复用跟业务无关的代码，我们将业务和非业务逻辑代码分离，抽取成一些通用的框架、类库、组件等。</p><ul>\n<li>通用代码下沉</li>\n</ul><p>从分层的角度来看，越底层的代码越通用、会被越多的模块调用，越应该设计得足够可复用。一般情况下，在代码分层之后，为了避免交叉调用导致调用关系混乱，我们只允许上层代码调用下层代码及同层代码之间的调用，杜绝下层代码调用上层代码。所以，通用的代码我们尽量下沉到更下层。</p><ul>\n<li>继承、多态、抽象、封装</li>\n</ul><p>在讲面向对象特性的时候，我们讲到，利用继承，可以将公共的代码抽取到父类，子类复用父类的属性和方法。利用多态，我们可以动态地替换一段代码的部分逻辑，让这段代码可复用。除此之外，抽象和封装，从更加广义的层面、而非狭义的面向对象特性的层面来理解的话，越抽象、越不依赖具体的实现，越容易复用。代码封装成模块，隐藏可变的细节、暴露不变的接口，就越容易复用。</p><ul>\n<li>应用模板等设计模式</li>\n</ul><p>一些设计模式，也能提高代码的复用性。比如，模板模式利用了多态来实现，可以灵活地替换其中的部分代码，整个流程模板代码可复用。关于应用设计模式提高代码复用性这一部分，我们留在后面慢慢来讲解。</p><p>除了刚刚我们讲到的几点，还有一些跟编程语言相关的特性，也能提高代码的复用性，比如泛型编程等。实际上，除了上面讲到的这些方法之外，复用意识也非常重要。在写代码的时候，我们要多去思考一下，这个部分代码是否可以抽取出来，作为一个独立的模块、类或者函数供多处使用。在设计每个模块、类、函数的时候，要像设计一个外部API那样，去思考它的复用性。</p><h3>辩证思考和灵活应用</h3><p>实际上，编写可复用的代码并不简单。如果我们在编写代码的时候，已经有复用的需求场景，那根据复用的需求去开发可复用的代码，可能还不算难。但是，如果当下并没有复用的需求，我们只是希望现在编写的代码具有可复用的特点，能在未来某个同事开发某个新功能的时候复用得上。在这种没有具体复用需求的情况下，我们就需要去预测将来代码会如何复用，这就比较有挑战了。</p><p>实际上，除非有非常明确的复用需求，否则，为了暂时用不到的复用需求，花费太多的时间、精力，投入太多的开发成本，并不是一个值得推荐的做法。这也违反我们之前讲到的YAGNI原则。</p><p>除此之外，有一个著名的原则，叫作“Rule of Three”。这条原则可以用在很多行业和场景中，你可以自己去研究一下。如果把这个原则用在这里，那就是说，我们在第一次写代码的时候，如果当下没有复用的需求，而未来的复用需求也不是特别明确，并且开发可复用代码的成本比较高，那我们就不需要考虑代码的复用性。在之后我们开发新的功能的时候，发现可以复用之前写的这段代码，那我们就重构这段代码，让其变得更加可复用。</p><p>也就是说，第一次编写代码的时候，我们不考虑复用性；第二次遇到复用场景的时候，再进行重构使其复用。需要注意的是，“Rule of Three”中的“Three”并不是真的就指确切的“三”，这里就是指“二”。</p><h2>重点回顾</h2><p>今天的内容到此就讲完了。我们一块来回顾一下，你需要重点掌握的内容。</p><p><strong>1.DRY原则</strong></p><p>我们今天讲了三种代码重复的情况：实现逻辑重复、功能语义重复、代码执行重复。实现逻辑重复，但功能语义不重复的代码，并不违反DRY原则。实现逻辑不重复，但功能语义重复的代码，也算是违反DRY原则。除此之外，代码执行重复也算是违反DRY原则。</p><p><strong>2.代码复用性</strong></p><p>今天，我们讲到提高代码可复用性的一些方法，有以下7点。</p><ul>\n<li>减少代码耦合</li>\n<li>满足单一职责原则</li>\n<li>模块化</li>\n<li>业务与非业务逻辑分离</li>\n<li>通用代码下沉</li>\n<li>继承、多态、抽象、封装</li>\n<li>应用模板等设计模式</li>\n</ul><p>实际上，除了上面讲到的这些方法之外，复用意识也非常重要。在设计每个模块、类、函数的时候，要像设计一个外部API一样去思考它的复用性。</p><p>我们在第一次写代码的时候，如果当下没有复用的需求，而未来的复用需求也不是特别明确，并且开发可复用代码的成本比较高，那我们就不需要考虑代码的复用性。在之后开发新的功能的时候，发现可以复用之前写的这段代码，那我们就重构这段代码，让其变得更加可复用。</p><p>相比于代码的可复用性，DRY原则适用性更强一些。我们可以不写可复用的代码，但一定不能写重复的代码。</p><h2>课堂讨论</h2><p>除了实现逻辑重复、功能语义重复、代码执行重复，你还知道有哪些其他类型的代码重复？这些代码重复是否违反DRY原则？</p><p>欢迎在留言区写下你的想法，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"20 | 理论六：我为何说KISS、YAGNI原则看似简单，却经常被用错？","id":177448},"right":{"article_title":"22 | 理论八：如何用迪米特法则（LOD）实现“高内聚、松耦合”？","id":179615}},"comments":[{"had_liked":false,"id":163794,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1576803860,"is_pvip":true,"discussion_count":20,"race_medal":0,"score":"813325622804","product_id":100039001,"comment_content":"1、注释或者文档违反DRY<br>2、数据对象违反DRY<br><br>对于1，例如一个方法。写了好多的注释解释代码的执行逻辑，后续修改的这个方法的时候可能，忘记修改注释，造成对代码理解的困难。实际应用应该使用KISS原则，将方法写的见名知意，尽量容易阅读。注释不必过多。<br><br>对于2、例如类<br>class User<br>  String id<br>  Date registerDate<br>  int age<br>  int registedDays<br>其中 age可以由身份证号码算出来，而且每年都会递增。注册会员多少天了，也可以算出来。所以是不是可以考虑，数据只存储id和注册时间。其余两个字段可以算出来。<br><br>补充：<br>DRY不是只代码重复，而是“知识”的重复，意思是指业务逻辑。例如由于沟通不足，两个程序员用两种不同的方法实现同样功能的校验。<br>DRY is about the duplication of knowledge, of intent. It’s about expressing the same thing in two different places, possibly in two totally different ways.<br><br>当代码的某些地方必须更改时，你是否发现自己在多个位置以多种不同格式进行了更改？ 你是否需要更改代码和文档，或更改包含其的数据库架构和结构，或者…？ 如果是这样，则您的代码不是DRY。<br><br>when some single facet of the code has to change, do you find yourself making that change in multiple places, and in multiple different formats? Do you have to change code and documentation, or a database schema and a structure that holds it, or…? If so, your code isn’t DRY.<br><br>参考：<br>The Pragmatic Programmer: your journey to mastery, 20th Anniversary Edition (2nd Edition)","like_count":190,"discussions":[{"author":{"id":1390561,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/e1/0953c506.jpg","nickname":"授人以摸鱼","note":"","ucode":"69417D324C1473","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337104,"discussion_content":"虽然就从身份证号可以得出生日，但是并不应该通过身份证号字段来获取生日以至于获取年龄。因为身份证号是个偶然的证件类型，这个系统移植到其他国家就会使用不同规则的身份证号，也可能会改成用驾照号，学籍号来验证。应该把身份证明信息拆分到另一个系统中管理，用户信息中可以存取生日，这并不会导致跟身份证号“重复”。身份证号除了作为一个有特定编码规则的id，以及确实要用这一规则进行验证的场合哎，我们不应该把它当作id之外的东西看待。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1608798085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3067009,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/cc/81/adae9194.jpg","nickname":"Sam Jiang","note":"","ucode":"C9B0173A161175","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1390561,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/e1/0953c506.jpg","nickname":"授人以摸鱼","note":"","ucode":"69417D324C1473","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581396,"discussion_content":"可以设置一个date of birth字段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658753660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337104,"ip_address":""},"score":581396,"extra":""}]},{"author":{"id":1246707,"avatar":"https://static001.geekbang.org/account/avatar/00/13/05/f3/5488276f.jpg","nickname":"心雨鑫晴","note":"","ucode":"37A42C19B98F1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307286,"discussion_content":"对于第一点有一些不同的看法。对于有些代码，逻辑本身很复杂，或者较反人类。没有注释的话，真的很难理解。这本身来说是一个维护者偷懒了的问题。并没有跟DRY原则相关。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1600589337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1947264,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/S1c0wWsL7ZHicGK77Jb0ia7Fo9KwT223YxlVIyOLVnG0p4XYdLJdx92c7FDBmZZezguwiamK7sRAUyGDDqTjXYhtg/132","nickname":"王","note":"","ucode":"1281345B90B9C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354097,"discussion_content":"需不需要开age这个字段，也可以考虑业务需求上要如何使用。比如，要和用户信息一起展示，是不是考虑部分用户不愿意显示自己真实年龄，这时候就有必要存储用户填写的年龄信息了。\n个人理解，不喜勿喷~","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1615251648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1681459,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a8/33/b71635c1.jpg","nickname":"锋子","note":"","ucode":"89FFA85BDB1C99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321626,"discussion_content":"不存age不存注册时间，有为了简单而简单的嫌疑。  高频使用，每次计算，算力和存储？ 语义理解。。。而且有些规则并不通用，比如有人说身份证倒数第二位的奇偶区分男女，那么性别是不是也可以不存.....","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1604599774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":92894,"discussion_content":"列出的参考书是《程序员修炼之道》的英文版。2019年后再版 The Pragmatic Programmer: your journey to mastery, 20th Anniversary Edition (2nd Edition)，目前 是美亚最畅销的技术类书籍。来吧，看看英文原版书，等国内有翻译版估计两年以后了。哪里找这本书，百度搜索英文书名即可。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1576892629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1738147,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","nickname":"东流","note":"","ucode":"2715BC6E87BD83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":131004,"discussion_content":"亚马逊提交的时候，提示 Sorry, this item can&#39;t be shipped to your selected address. Learn more. You may either change the shipping address or delete the item from your order.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578818713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":92894,"ip_address":""},"score":131004,"extra":""},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1738147,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","nickname":"东流","note":"","ucode":"2715BC6E87BD83","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":131101,"discussion_content":"是的，这本书美亚不能邮寄到大陆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578826720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":131004,"ip_address":""},"score":131101,"extra":""}]},{"author":{"id":1298279,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cf/67/057e5d93.jpg","nickname":"flying","note":"","ucode":"69AB7872B36B23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276132,"discussion_content":"关于是否保存age字段，我觉得是需要保存的，你可以算出来，但是我需要保存这个字段，这个字段可以通过外界赋值，也可以算出来。如果不保存该字段，就会在每次调用的使用，通过id计算出age，效率 不高。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590824567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1298279,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cf/67/057e5d93.jpg","nickname":"flying","note":"","ucode":"69AB7872B36B23","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289861,"discussion_content":"冗余是好的，但是的确违反原则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594252711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":276132,"ip_address":""},"score":289861,"extra":""}]},{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279372,"discussion_content":"age还是存的好，冗余一下，好处多多\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591334451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484192,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/a0/e0cccf7e.jpg","nickname":"圆圆满满","note":"","ucode":"396E7A822014D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560916,"discussion_content":"优秀，说的都很好，👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649491135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2882086,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/fa/26/a38f4b5d.jpg","nickname":"jl","note":"","ucode":"3EC1591B396600","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545913,"discussion_content":"课代表太秀了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642080931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004953,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","nickname":"Chloe","note":"","ucode":"C4848ED5B35752","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351514,"discussion_content":"赞推荐的这本书，太经典了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614310068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323102,"avatar":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","nickname":"Younger Ku","note":"","ucode":"D157DC38BDB515","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305016,"discussion_content":"我记得你回复别人评论的时候说英文练得不错，我想请教下你练习英语的方式，用了多久呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599740581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1616954,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ODqoBdTKsL1jW4m72BZ0ibECEtWPq0N1tAIlbzjsq6mcJiavT2CKtx0ejpIqQdHbRXdMWH0I1jpI2ZiawFIkF1icsQ/132","nickname":"白中白","note":"","ucode":"95F9DABEBEFAAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292597,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595261572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","nickname":"张三丰","note":"","ucode":"3A6215A40B3B21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209130,"discussion_content":"牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584613075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/b1/86ea2993.jpg","nickname":"静晓晨曦","note":"","ucode":"DC8BB8A85FD937","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":117943,"discussion_content":"这个厉害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578145600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1241107,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f0/13/8e97df97.jpg","nickname":"少","note":"","ucode":"E072773936BD97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":94953,"discussion_content":"多谢推荐，O&#39;Reilly上有!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577002768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91319,"discussion_content":"棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576826645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163991,"user_name":"岁月","can_delete":false,"product_type":"c1","uid":1337598,"ip_address":"","ucode":"29A2A2BC3C4FE4","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","comment_is_top":false,"comment_ctime":1576841436,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"121835925724","product_id":100039001,"comment_content":"加油啊感觉更新太慢了一个下午就看完了..,一个星期至少更新10课吧.","like_count":28,"discussions":[{"author":{"id":1318540,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","nickname":"花儿少年","note":"","ucode":"CFE4F64243673B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93712,"discussion_content":"你是魔鬼吗，照顾一下996的小伙伴啊\n三节课都不一定能准时看完","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1576935490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376378,"discussion_content":"你是看小说吗  ","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1622101929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1809686,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/16/a2fb8136.jpg","nickname":"季某人","note":"","ucode":"1EEF2A58C3BD79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392215,"discussion_content":"哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630909682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376378,"ip_address":""},"score":392215,"extra":""}]},{"author":{"id":1595158,"avatar":"https://static001.geekbang.org/account/avatar/00/18/57/16/b7b4fe79.jpg","nickname":"long","note":"","ucode":"8424683A801718","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339514,"discussion_content":"来 键盘给你 你来写","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1609715371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1263932,"avatar":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","nickname":"静静聆听","note":"","ucode":"0A8600CB928EFE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":181336,"discussion_content":"你是魔鬼吗","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1582362167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1320487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","nickname":"罗杰","note":"","ucode":"96BAFAA147341F","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541666,"discussion_content":"追求速度谁还不会呀，能认识字，一天也能把专栏看个七七八八吧。可是消化了吗？第二天记得多少，停留在底层次的努力毫无意义。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1640510324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245398,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKDY9bVLK3oyLmF6X2OnUZAzwSNVpS7XPxOQg84XJdvhr6SfvPe5uhYvzSf8ycIokfiapAJ8lvPxHA/132","nickname":"goodxwp","note":"","ucode":"B705DAC523B2ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93085,"discussion_content":"同意，更新有点慢","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576905971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1255437,"avatar":"https://static001.geekbang.org/account/avatar/00/13/28/0d/558f6141.jpg","nickname":"你净瞎说～","note":"","ucode":"A4EE0154034D22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1245398,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKDY9bVLK3oyLmF6X2OnUZAzwSNVpS7XPxOQg84XJdvhr6SfvPe5uhYvzSf8ycIokfiapAJ8lvPxHA/132","nickname":"goodxwp","note":"","ucode":"B705DAC523B2ED","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104049,"discussion_content":"几十个专栏，你都看了？我是没时间","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577410343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":93085,"ip_address":""},"score":104049,"extra":""}]},{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":99970,"discussion_content":"更新的速度可以了，一篇不看两遍很难理解","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577231150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201215,"avatar":"https://static001.geekbang.org/account/avatar/00/12/54/3f/8e3b39f7.jpg","nickname":"zhangbing","note":"","ucode":"1B36604F96EF89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96872,"discussion_content":"8个月的周期确实有点久","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577097952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016594,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/83/12/4ba82798.jpg","nickname":"我是智障","note":"","ucode":"ED9D959423E024","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93222,"discussion_content":"你是魔鬼吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576915381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542462,"discussion_content":"哈哈哈， 魔鬼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640757080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2282974,"avatar":"https://static001.geekbang.org/account/avatar/00/22/d5/de/f9a465ab.jpg","nickname":"成长型思维","note":"","ucode":"2FCE2C05FFCC83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324137,"discussion_content":"我一天看二十节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605060637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299242,"discussion_content":"一下午20节。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597626432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158513,"discussion_content":"看一遍真掌握不了，有时间可以多看几遍，我才看到这里……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580578335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163782,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1576802762,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"108950985162","product_id":100039001,"comment_content":"产品经理有时候设计产品功能的时候也会重复","like_count":25,"discussions":[{"author":{"id":1037925,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d6/65/e6abeba2.jpg","nickname":"Persistfanāāā","note":"","ucode":"8C4EF892B7ED27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390740,"discussion_content":"设计产品这块，可以参考华为的货架产品，产品模块化，可以复用，可以提高产品开发效率。（推荐《产品研发管理》周辉）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630018165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251835,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oiboHpgukqib2ASXeU0H7W1ibgRMqyrNE5KaWicicPEDy0ia8YdoneZAtvW0EFIiaqZJp2OS4dnweOgXaJ5EjJicicEqic5A/132","nickname":"覃钰栋","note":"","ucode":"19080C463658EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386830,"discussion_content":"有些产品设计的业务确实有点绕，取名和代码实现都有点绕","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627826964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1148845,"avatar":"https://static001.geekbang.org/account/avatar/00/11/87/ad/50a85a04.jpg","nickname":"hao","note":"","ucode":"997F2B57E2F556","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373717,"discussion_content":"有画面感了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620833088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297671,"discussion_content":"哈哈，这也确实是个角度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597022274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110039,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/17/796a3d20.jpg","nickname":"言十年","note":"","ucode":"67B8B49C3A3B17","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215581,"discussion_content":"一个App，这个模块抄另一个模块。因为都有签到，都有活动。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585358531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163748,"user_name":"magict4","can_delete":false,"product_type":"c1","uid":1043789,"ip_address":"","ucode":"CB6F063D881AAC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/4d/1d1a1a00.jpg","comment_is_top":false,"comment_ctime":1576798619,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"74591242651","product_id":100039001,"comment_content":"&gt; 重复执行最明显的一个地方，就是在 login() 函数中，email 的校验逻辑被执行了两次。一次是在调用 checkIfUserExisted() 函数的时候，另一次是调用 getUserByEmail() 函数的时候。这个问题解决起来比较简单，我们只需要将校验逻辑从 UserRepo 中移除，统一放到 UserService 中就可以了。<br><br>这样处理会有一个问题：如果别的 xxxService 也需要用到 UserRepo，而且没有对 email 跟 password 进行校验，直接调用了 UserRepo.checkIfUserExisted() ，会产生异常。<br><br>一种方法是约定，所有关于 User 的操作都只能通过 UserService 进行，不能直接调用 UserRepo。<br><br>另一种方法是“强制” xxxService 进行校验。我们可以把 UserRepo.checkIfUserExisted 的方法签名改成 <br><br>UserRepo.checkIfUserExisted(Email email, Password password)<br><br>并且把 validation 的逻辑封装在 Email 跟  Password 类的构造函数中。这样 xxxService 必须先把 email 跟 password 从 String 类型转成对应的 Email&#47;Password 类，才能调用 UserRepo，validation 的逻辑会在转换中被强制执行。","like_count":18,"discussions":[{"author":{"id":2662744,"avatar":"https://static001.geekbang.org/account/avatar/00/28/a1/58/3195a8b5.jpg","nickname":"Pz_","note":"","ucode":"A35E576C40FFFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382403,"discussion_content":"我也有这个问题啊，实际工程中因为每个公有方法对调用方都是不信任的，故在多次跨层调用时肯定会产生大量的参数重复校验，怎么解决呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625557100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246707,"avatar":"https://static001.geekbang.org/account/avatar/00/13/05/f3/5488276f.jpg","nickname":"心雨鑫晴","note":"","ucode":"37A42C19B98F1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307289,"discussion_content":"如果将校验放在构造函数中，那只能通过抛异常的方式返回校验失败了。这样主流程的控制是需要根据异常来判断了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600589914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1597071,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe9iavda8ia7vNkbMVEHsCKs43l6U6HGWibiaxxKd9PuiaYu5wRedicC96PLicZ9VIh0ic5Jg8YHPrta3IAQ/132","nickname":"Geek_00e01b","note":"","ucode":"BC76A83B53D0EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391607,"discussion_content":"多一次校验就多一次，这种校验损耗的那点性能算不了啥。因为userrepo.checkUser方法时public的，无法保证外部不会跳过service直接执行该方法，所以我认为必须在其中做校验","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630549805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2733574,"avatar":"https://static001.geekbang.org/account/avatar/00/29/b6/06/cd1eaa49.jpg","nickname":"小王在努力","note":"","ucode":"A324EF87198905","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391051,"discussion_content":"我认为开发中是有个约定的吧，比如说做好分层后，每一层应当只做好本层的东西，比如Repository层就只负责和数据库打交道，那么它就应当只返回数据，针对于对email和password的校验，我认为应当放在它们所归属的类当中，这样也算符合面向对象的思维，对数据的操作行为应当与数据绑定。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630247484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1788647,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/4a/e7/6c16af5d.jpg","nickname":"汉江","note":"","ucode":"01622D984B8F9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295573,"discussion_content":"看的时候 我也感觉有这种问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596252255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165235,"user_name":"AaronChun","can_delete":false,"product_type":"c1","uid":1027352,"ip_address":"","ucode":"0D4A4CBD676A3D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ad/18/41831eae.jpg","comment_is_top":false,"comment_ctime":1577185054,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"57411759902","product_id":100039001,"comment_content":"数据库转换对象beanDb和数据展现beanVo，从属性定义上来看可能存在大量重复，但从业务或系统分层来看，却是职责明确，功能单一的对象，所以这并不违反DRY原则。相反如果将两者共性部分抽离提取，后期倘若业务变更，修改就会牵扯到前台和后台，不符合单一职责和接口隔离原则。","like_count":14,"discussions":[{"author":{"id":1792698,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5a/ba/596d6ae3.jpg","nickname":"MENGXIANGING","note":"","ucode":"B51414E230D6A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581238,"discussion_content":"跟之前的内容结合起来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658656344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167209,"user_name":"花颜","can_delete":false,"product_type":"c1","uid":1096871,"ip_address":"","ucode":"77AAE0CBA75439","user_header":"https://static001.geekbang.org/account/avatar/00/10/bc/a7/d36843c9.jpg","comment_is_top":false,"comment_ctime":1577716841,"is_pvip":false,"replies":[{"id":"65267","content":"好像只能靠人本身 工具很难去断定是否符合某一设计原则","user_name":"作者回复","comment_id":167209,"uid":"1190123","ip_address":"","utype":1,"ctime":1578010458,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"35937455209","product_id":100039001,"comment_content":"老师，我有个问题，在大型多人协作项目当中，类、功能都是分散给不同的人开发的，不同的开发者质量良莠不齐，而实现逻辑重复有代码重复率校验工具可以做检测，而功能语义重复和代码执行重复其实不是那么容易能够发现，即使通过有效的codeReview，有没有什么工具可以辅助我们查找功能语义重复和代码执行重复这两类重复，以及在大型团队项目下，如何应用这些原则呢？毕竟靠自觉总是很难的","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479783,"discussion_content":"好像只能靠人本身 工具很难去断定是否符合某一设计原则","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578010458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1951501,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/c7/0d/0dab398b.jpg","nickname":"好名字","note":"","ucode":"E2BFD96F912A67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307547,"discussion_content":"分工明确，以及代码review可以有效避免","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600681914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163915,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1576826922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31641597994","product_id":100039001,"comment_content":"设计模式_20<br><br># 作业：<br>想到的只有文档和注释的重复了，比如两个不同功能的文档，同时描写一个细节时，可能“负责”的产品经理会各自清清楚楚地写一遍。然后：<br>- 看的人就会懵，(描述相同时)写了两个地方，看一下是不是还有别的地方有描述；(描述不同时)，应该以哪个为准。<br>- 改的人也会懵，很容易忘记修改更新，更何况文档不更新程序又不会报错。。。<br><br><br>#感想：<br>回到“少干活 和 少犯错”的宗旨，重复的代码不仅写的时候会多些一遍，改的时候也要多看很多地方，多想很多差异性，多改很多地方，这样就违背了“少干活”；改的时候，容易忘记一些地方，维护多种逻辑实现的同一个逻辑，也容易疏忽而出错，这样就违背了“少出错”。<br><br>说句题外话，文中提到“Rule of Three”时，原来外国人也用“三”表示多个，而且表示的还是2个。。。","like_count":7},{"had_liked":false,"id":247925,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1533352,"ip_address":"","ucode":"6FD3642D6455AE","user_header":"https://static001.geekbang.org/account/avatar/00/17/65/a8/6431f8b0.jpg","comment_is_top":false,"comment_ctime":1599919522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18779788706","product_id":100039001,"comment_content":"是不是所有包含or and的方法名的函数其实都不满足单一职责？","like_count":5},{"had_liked":false,"id":291476,"user_name":"炫炫","can_delete":false,"product_type":"c1","uid":1358609,"ip_address":"","ucode":"FDC7A0C6E08B02","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/11/7069b8eb.jpg","comment_is_top":false,"comment_ctime":1620300951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14505202839","product_id":100039001,"comment_content":"总结：功能语义重复才是真的重复，实现逻辑重复不一定就是重复，代码执行重复就一定是重复","like_count":3},{"had_liked":false,"id":186774,"user_name":"Wh1","can_delete":false,"product_type":"c1","uid":1282715,"ip_address":"","ucode":"6D28506B99A285","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/9b/65f98192.jpg","comment_is_top":false,"comment_ctime":1583921328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14468823216","product_id":100039001,"comment_content":"二刷时存在一个小问题，&quot;只能允许用户名、密码字符串为小写字符&quot; 与 &quot;字符范围只能是a-z、0-9、.&quot; 这个条件是不是也存在重复？按理说，只需要判断&quot;字符范围只能是 a-z、0-9、.&quot; 这个条件就满足字符全是小写了。","like_count":3},{"had_liked":false,"id":163950,"user_name":"blacknhole","can_delete":false,"product_type":"c1","uid":1098286,"ip_address":"","ucode":"271682FFE28F25","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","comment_is_top":false,"comment_ctime":1576833291,"is_pvip":false,"replies":[{"id":"67750","content":"嗯嗯 确实有点问题 已经安排在改了","user_name":"作者回复","comment_id":163950,"uid":"1190123","ip_address":"","utype":1,"ctime":1580122272,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"14461735179","product_id":100039001,"comment_content":"1，提个小问题：<br><br>“实现逻辑重复”一节的代码是不是有点问题啊？<br><br>if (!(c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;z&#39;) || (c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;) || c == &#39;.&#39;) {}似乎应该改为if (!((c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;z&#39;) || (c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;) || c == &#39;.&#39;)) {}。<br><br>2，说个小体会：<br><br>“可复用性、可扩展性、可维护性……”与“复用性、扩展性、维护性……”，加不加“可”，其实没有本质差别。我以为，在通常的语境中（或者几乎任何情况下），两者都是可以通用的。<br><br>比如，可复用性高，说明能够复用，与当前是否已经复用无关。复用性高，是指当前已经大量复用，说明在这之前可复用性高。已经大量复用时，依然可以更多地复用，也即：复用性高，意味着可复用性依然高。<br><br>通常的语境中，也即通常提到“复用性”时，人们几乎只关注能不能复用，而不是已经复用了多少。所以，可以认为，可复用性高等同于复用性高。","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478593,"discussion_content":"嗯嗯 确实有点问题 已经安排在改了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580122272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96541,"discussion_content":"感觉是差不多. 比如你说, 复用性高, 也可以理解成&#34;可以复用但还没开始复用&#34;.....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577073041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1098286,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","nickname":"blacknhole","note":"","ucode":"271682FFE28F25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96643,"discussion_content":"我的那些话给出了，“为什么从字面上它不是这个意思，但其实也可以这么理解”的道理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577083095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":96541,"ip_address":""},"score":96643,"extra":""}]}]},{"had_liked":false,"id":163944,"user_name":"哈喽沃德","can_delete":false,"product_type":"c1","uid":1749033,"ip_address":"","ucode":"7620366C16826B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b0/29/7ab573f4.jpg","comment_is_top":false,"comment_ctime":1576832344,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14461734232","product_id":100039001,"comment_content":"啥时能出设计模式的教程，我的大刀早已饥渴难耐了","like_count":3,"discussions":[{"author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96544,"discussion_content":"更新太慢了. 我一个早上学习时间就可以学好两个星期的量了.....😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577073263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015189,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/95/dd73022c.jpg","nickname":"我是曾经那个少年","note":"","ucode":"9F02F7FF147D14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396071,"discussion_content":"哥  这能学明白？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632388856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":96544,"ip_address":""},"score":396071,"extra":""}]}]},{"had_liked":false,"id":163856,"user_name":"plain","can_delete":false,"product_type":"c1","uid":1057345,"ip_address":"","ucode":"4BD3BFFAB81DEC","user_header":"https://static001.geekbang.org/account/avatar/00/10/22/41/74c666f3.jpg","comment_is_top":false,"comment_ctime":1576811936,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14461713824","product_id":100039001,"comment_content":"设计每个模块、类、函数，都要像设计外部api一样去思考，隐藏可变的细节、暴露不变的接口。","like_count":3},{"had_liked":false,"id":251445,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1601561384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10191495976","product_id":100039001,"comment_content":"逻辑重复，功能重复，执行重复。其实执行上的重复，有时候我觉得并不能算违反DRY原则，可能是为了代码的可复用性，为了方便其他调用方的调用。","like_count":2},{"had_liked":false,"id":244577,"user_name":"蓝二哥哥我才是无羡啊👻","can_delete":false,"product_type":"c1","uid":1738272,"ip_address":"","ucode":"E70EE4E08F16AF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/20/e71b5585.jpg","comment_is_top":false,"comment_ctime":1598585124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10188519716","product_id":100039001,"comment_content":"模块常量重复定义也算违反DRY原则吧","like_count":2},{"had_liked":false,"id":228807,"user_name":"握了个大蚂蚱","can_delete":false,"product_type":"c1","uid":1488356,"ip_address":"","ucode":"AD34AD4FA37371","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/e4/e6faf686.jpg","comment_is_top":false,"comment_ctime":1592815105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10182749697","product_id":100039001,"comment_content":"DRP：dont repeat yourself。<br>逻辑重复，解决方法是想办法复用并优化方法名或是方法结构；<br>语义重复（比如取request里的ip有两种方法），解决方法是统一成一种，不然维护困难；<br>代码执行重复(比如上层StringUtils.isNotBlank已经校验了，下层又去校验)，主要是性能问题而且代码也很冗余，加重理解负担。解决方法是写代码时脑子放清楚","like_count":2},{"had_liked":false,"id":164688,"user_name":"岁月","can_delete":false,"product_type":"c1","uid":1337598,"ip_address":"","ucode":"29A2A2BC3C4FE4","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","comment_is_top":false,"comment_ctime":1577072363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167006955","product_id":100039001,"comment_content":"看完最后这个Rlue of three , 我感觉把可扩展填进去也是有道理的, 一开始不一定写得出扩展性很好的代码, 所以可以先简单来, 后面需求明确了再慢慢重构把代码变得更加可以扩展?","like_count":2},{"had_liked":false,"id":163763,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1576801217,"is_pvip":false,"replies":[{"id":"62274","content":"😂","user_name":"作者回复","comment_id":163763,"uid":"1190123","ip_address":"","utype":1,"ctime":1576801704,"user_name_real":"王争"}],"discussion_count":8,"race_medal":0,"score":"10166735809","product_id":100039001,"comment_content":"“Rule of Three”中的“Three”并不是真的就指确切的“三”，这里就是指“二”。😂<br>这句话看了好几遍","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478527,"discussion_content":"😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576801704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":90956,"discussion_content":"与之相对的有WET：wirte everything twice 😂，write every time","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576804150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1390561,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/e1/0953c506.jpg","nickname":"授人以摸鱼","note":"","ucode":"69417D324C1473","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337107,"discussion_content":"我估计是因为，第一次先直接实现，第二次重构，第三次复用，所以是Three，关键其实是在第二次🤣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608798411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1312332,"avatar":"https://static001.geekbang.org/account/avatar/00/14/06/4c/89ceb570.jpg","nickname":"火凤凰","note":"","ucode":"DB99D1EA222DC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263045,"discussion_content":"一生二 二生三 三生万物","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589166483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1464013,"avatar":"https://static001.geekbang.org/account/avatar/00/16/56/cd/0add8290.jpg","nickname":"刘学习来学习","note":"","ucode":"5078B1EC8D8A66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130819,"discussion_content":"事不过三","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578796484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91210,"discussion_content":"三思而后行，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576818951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1326662,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3e/46/0b888d5a.jpg","nickname":"mike","note":"","ucode":"AB330E7B88EF1C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91129,"discussion_content":"就像文言文中经常出现的概数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576811646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91065,"discussion_content":"一二不过三","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576807843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283217,"user_name":"江小田","can_delete":false,"product_type":"c1","uid":1003149,"ip_address":"","ucode":"C5197BF856E8D3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/8d/34e0f6f3.jpg","comment_is_top":false,"comment_ctime":1615624752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5910592048","product_id":100039001,"comment_content":"收货最大的就是复用的范围定义：<br>业务语意层面的重复违反DRY原则；<br>代码写法角度的重复不违反DRY原则。","like_count":1},{"had_liked":false,"id":248569,"user_name":"LiYou","can_delete":false,"product_type":"c1","uid":1262680,"ip_address":"","ucode":"F10DD1205CCDD1","user_header":"https://static001.geekbang.org/account/avatar/00/13/44/58/a901cfce.jpg","comment_is_top":false,"comment_ctime":1600225707,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5895193003","product_id":100039001,"comment_content":"把简单的知识点做细节对比和区分，把一些编码方法总结成点，从而形成体系。虽然都是偏理论的知识点，但读完后受益匪浅。","like_count":1},{"had_liked":false,"id":242172,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1597628395,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5892595691","product_id":100039001,"comment_content":"DRY就是修改只修改一处。","like_count":1},{"had_liked":false,"id":163876,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1576816128,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871783424","product_id":100039001,"comment_content":"课堂讨论没有想到其他的了。<br>理解一下DRY，总结就是抽取统一“逻辑”，还有相似逻辑的简化统一，<br>为的就是同一“逻辑”，维护一块地方就行了。","like_count":1},{"had_liked":false,"id":163779,"user_name":"何妨","can_delete":false,"product_type":"c1","uid":1385377,"ip_address":"","ucode":"EC3983BFF7992A","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/a1/b08f3ee7.jpg","comment_is_top":false,"comment_ctime":1576802654,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5871769950","product_id":100039001,"comment_content":"整体来说我们要做的是不写&quot;重复&quot;代码，同时考虑代码的复用性，但要避免过度设计。<br>这几点说起来简单其实做起来还是有些难度的，在平常写代码的时候需要多思考，写完之后要反复审视自己的代码看看有没有可以优化的地方。说起来我感觉我还算是对代码有些追求的……但是真的需求来了为了赶需求基本就一遍过了……😂，对于一些脚本代码更是过程编程，惭愧啊","like_count":1,"discussions":[{"author":{"id":1018370,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","nickname":"Frank","note":"","ucode":"7A488CC6FE15E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91964,"discussion_content":"同感，我也是先完成需求，后面有时间再回顾自己的代码，重新优化。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576851180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","nickname":"enjoylearning","note":"","ucode":"DCAF8538DEA277","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":95375,"discussion_content":"脚本代码如shell本来经常看不下去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577021628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163772,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1576801991,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5871769287","product_id":100039001,"comment_content":"老师概括的很全面了，提一个看看，<br>数据定义重复，比如数据库里定义了两个schema几乎相同的数据表，然后数据表映射到代码里的结构体或xml也几乎相同，没有把公共部分剥离。","like_count":1},{"had_liked":false,"id":359185,"user_name":"Geek_b16406","can_delete":false,"product_type":"c1","uid":2045553,"ip_address":"北京","ucode":"1F8D3882C21C21","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELnkXJAkW4GTMkNRO7zy5AHU7sq0ZV65AG6smFsHlcEAFN3qP3iaeHlCic7l5J7NDf6Q81aqh8ngssg/132","comment_is_top":false,"comment_ctime":1665308773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665308773","product_id":100039001,"comment_content":"Rule of three 称为&quot;三次原则&quot;，指的是当某个功能第三次出现时，才进行&quot;抽象化&quot;。<br><br>这是软件开发大家Martin Fowler在《Refactoring》一书中提出的。<br><br>它的涵义是，第一次用到某个功能时，你写一个特定的解决方法；第二次又用到的时候，你拷贝上一次的代码；第三次出现的时候，你才着手&quot;抽象化&quot;，写出通用的解决方法。<br><br>这样做有几个理由：<br><br>（1）省事。如果一种功能只有一到两个地方会用到，就不需要在&quot;抽象化&quot;上面耗费时间了。<br><br>（2）容易发现模式。&quot;抽象化&quot;需要找到问题的模式，问题出现的场合越多，就越容易看出模式，从而可以更准确地&quot;抽象化&quot;。","like_count":0},{"had_liked":false,"id":359072,"user_name":"Geek_1","can_delete":false,"product_type":"c1","uid":2704407,"ip_address":"陕西","ucode":"59300A73996D20","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/17/e4fdcaad.jpg","comment_is_top":false,"comment_ctime":1665220958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665220958","product_id":100039001,"comment_content":"写代码要注意可复用性，提升代码可复用性的七个方法。rule of three，第一次不一定要考虑可复用性，第二次则需要","like_count":0},{"had_liked":false,"id":343018,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1650596309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650596309","product_id":100039001,"comment_content":"我发现这些设计模式要刻在骨子里。<br>你写每一行代码，有没有停留一下，思考他怎么封装才是最好的方法呢。<br>多态设计的过程中，你有没有想过，这明显是针对不同的类型而做的设计，也就是说，可以用参数来标识也叫多态，而不是同一个方法名。<br>代码复用性，真的，难记住。只能一个一个举例的时候，慢慢想起这些设计原则。<br>为了方便以后面试用到，例如，减少代码耦合，满足单一职责、模块化、业务和非业务逻辑分离、代码下沉、（继承、多态、抽象、封装）、应用模板等设计模式。","like_count":0},{"had_liked":false,"id":323773,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638155996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638155996","product_id":100039001,"comment_content":"通过模块化思想（类，接口，函数）有利于避免实现大而全的类，更好利用好单一职责原则，能更方便的将业务与非业务分离，并且将非业务代码下沉。编码技巧利用好面向对象的四大特性，配合设计模式当武器更方便的实现可复用的代码<br>最后思考下 如果当前写的代码可以很快速的思考到服用场景或者能很方便的抽离出更有复用性的函数就可以先抽离，成本低。相反如果很难抽出复用，那么可以有需求之后再重构<br><br>如上是小弟初学的一些理解 希望大家看到有问题的可以指正<br>希望二刷会有新的理解","like_count":0},{"had_liked":false,"id":322979,"user_name":"Z宇锤锤","can_delete":false,"product_type":"c1","uid":2188142,"ip_address":"","ucode":"7DB36E986A7A51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","comment_is_top":false,"comment_ctime":1637678530,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1637678530","product_id":100039001,"comment_content":"类的重复定义。","like_count":0},{"had_liked":false,"id":322478,"user_name":"米大王","can_delete":false,"product_type":"c1","uid":1097996,"ip_address":"","ucode":"6D6B644A528F9F","user_header":"https://static001.geekbang.org/account/avatar/00/10/c1/0c/8b83e19b.jpg","comment_is_top":false,"comment_ctime":1637407079,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1637407079","product_id":100039001,"comment_content":"DRY原则：<br>判定优先级：功能语义 &gt; 代码执行 &gt;  实现逻辑。<br>实现上的“重复”实际上是优先级最低的。另外也需要关注数据对象，文档或注释的是否满足DRY原则。<br><br>如何提升代码可复用性：<br>1. 减少代码耦合<br>2. 单一职责<br>3. 封装 继承 多态<br>4. 模块化<br>5. 业务与抽象逻辑分离<br>6. 通用代码下沉<br>7. 应用模板等设计模式<br>","like_count":0},{"had_liked":false,"id":313439,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1632444405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632444405","product_id":100039001,"comment_content":"DRY，不要重复自己，不要写重复的代码<br>实现逻辑重复，实现功能重复，执行代码重复，<br>其中实现逻辑重复，实现功能不重复，不属于重复，实现逻辑不重复但功能重复属于重复。<br>写代码要有考量度的复用性","like_count":0},{"had_liked":false,"id":301689,"user_name":"昵称C","can_delete":false,"product_type":"c1","uid":1234963,"ip_address":"","ucode":"1BB2D537942DC2","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/13/082013bc.jpg","comment_is_top":false,"comment_ctime":1625813518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625813518","product_id":100039001,"comment_content":"第三方包功能引入重复，如图片加载；<br>Bean类封装重复；<br>","like_count":0},{"had_liked":false,"id":297496,"user_name":"wsh","can_delete":false,"product_type":"c1","uid":1006628,"ip_address":"","ucode":"C0FE187C6EECED","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/24/d2575310.jpg","comment_is_top":false,"comment_ctime":1623578976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623578976","product_id":100039001,"comment_content":"还有一种，数据重复，多层次的数据，有时候上层数据包含下层多层数据的指针，而不是上层只包含相邻下层的指针，这样的好处是，可以直接访问，减少指针访问层次，坏处是，有太多的冗余指针字段。不知道讲师您，倾向于哪种选择？这算不算违反DRY原则","like_count":0},{"had_liked":false,"id":293791,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1621558354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621558354","product_id":100039001,"comment_content":"还有接口不一样，但是里面实现的逻辑有重复","like_count":0},{"had_liked":false,"id":288404,"user_name":"李奇锋","can_delete":false,"product_type":"c1","uid":1220713,"ip_address":"","ucode":"1A0A359D0530C9","user_header":"https://static001.geekbang.org/account/avatar/00/12/a0/69/e42348a8.jpg","comment_is_top":false,"comment_ctime":1618456615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618456615","product_id":100039001,"comment_content":"编写代码流程上的重复(特别是按照模版写代码的时候)，容易导致忘记了流程上一些细微的但又不直观的点，导致代码出bug #[[failure-mode]]","like_count":0},{"had_liked":false,"id":281912,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1614945002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614945002","product_id":100039001,"comment_content":"再补充一个，还有日志输出重复，这种重复除非特殊应用场景特殊考量，一般都是与DRY原则背道而驰的。","like_count":0},{"had_liked":false,"id":281911,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1614944864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614944864","product_id":100039001,"comment_content":"常量定义（常量值）重复：具体判断常量是否违反了DRY原则，我认为需要看使用者都是如何使用的，比如某项目中两块业务都定义了常量值“-”，但是A业务常量名为减号，用于数学计算表达式的展示，B业务常量名为横线，用于空值数据的默认展示，那么我认为它们是符合DRY原则的。","like_count":0},{"had_liked":false,"id":281568,"user_name":"Emanon","can_delete":false,"product_type":"c1","uid":2430910,"ip_address":"","ucode":"B986F8BB226FB1","user_header":"https://static001.geekbang.org/account/avatar/00/25/17/be/d7d58b48.jpg","comment_is_top":false,"comment_ctime":1614793222,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614793222","product_id":100039001,"comment_content":"我认为“Rule of Three”中的“Three”就是“三”的意思，只有重复达到三次以上再认真考虑复用，如果只出现两次就要设计复用，很容易就出现文中提到的反例：”逻辑相同但语义不同“。","like_count":0},{"had_liked":false,"id":280307,"user_name":"DreamHeng","can_delete":false,"product_type":"c1","uid":1599490,"ip_address":"","ucode":"5562BFD8375138","user_header":"https://static001.geekbang.org/account/avatar/00/18/68/02/2d394d89.jpg","comment_is_top":false,"comment_ctime":1614156632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614156632","product_id":100039001,"comment_content":"\bDRY原则，就是不要写重复的代码，提高代码可复用性。","like_count":0},{"had_liked":false,"id":278077,"user_name":"杰西","can_delete":false,"product_type":"c1","uid":2109939,"ip_address":"","ucode":"542B3A9716AA71","user_header":"https://static001.geekbang.org/account/avatar/00/20/31/f3/22d6ed22.jpg","comment_is_top":false,"comment_ctime":1612751385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612751385","product_id":100039001,"comment_content":"笔记：<br>1、减少I&#47;O交互，争取小段逻辑一次查询搞定；<br>2、争对一个条件判断，不要维护2套校验逻辑；<br>3、不同业务的代码，虽然暂时处理逻辑一致，idea编译器也会提示代码重复，但是尽量分开写，方便后续调整，除非2个业务场景高度一致或者相互有依赖。","like_count":0},{"had_liked":false,"id":273032,"user_name":"Geek_00e01b","can_delete":false,"product_type":"c1","uid":1597071,"ip_address":"","ucode":"BC76A83B53D0EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe9iavda8ia7vNkbMVEHsCKs43l6U6HGWibiaxxKd9PuiaYu5wRedicC96PLicZ9VIh0ic5Jg8YHPrta3IAQ/132","comment_is_top":false,"comment_ctime":1610417319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610417319","product_id":100039001,"comment_content":"关于代码执行重复的问题中，getUserByEmail这个方法是一个public的，照理加入email的检测没啥问题啊，因为该方法有可能被单独执行。感觉平常业务中经常遇到这种情况，即方法A可能被很多地方调用，方法A接收的参数有效性检验到底该写到哪里的问题。","like_count":0},{"had_liked":false,"id":272408,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1610082353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610082353","product_id":100039001,"comment_content":"感觉每一行都是干货","like_count":0},{"had_liked":false,"id":263278,"user_name":"🐝","can_delete":false,"product_type":"c1","uid":1183211,"ip_address":"","ucode":"28B3C527D81DC3","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/eb/c3ff1e85.jpg","comment_is_top":false,"comment_ctime":1606091072,"is_pvip":false,"replies":[{"id":"96104","content":"要权衡，没有最优解","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700810,"ip_address":"","comment_id":263278,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606091072","product_id":100039001,"comment_content":"为了不重复，在合并代码里写if else 是否合适","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510138,"discussion_content":"要权衡，没有最优解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246301,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1599271192,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599271192","product_id":100039001,"comment_content":"Don’t Repeat Yourself，能有效提升代码的可维护性。当你一遍一遍重复的修改代码，最后还没改全，50米的大刀是不是也在隐隐颤抖了！<br>而避免重复代码的最有效方法，就是写复用性高的代码。但是复用性高的代码成本也高，很容易陷入过度设计，最实在的方式是先不复用，遇到需要复用的时候再重构。经验丰富的老码农能看出哪些代码更容易被复用，提前设计，也是我和老码农的差距。","like_count":0},{"had_liked":false,"id":240421,"user_name":"龙猫","can_delete":false,"product_type":"c1","uid":1112490,"ip_address":"","ucode":"FD726CC969EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","comment_is_top":false,"comment_ctime":1596896916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596896916","product_id":100039001,"comment_content":"在for循环中查询db，这个也算重复，因为可以批量一次性查询，没必要分多次","like_count":0},{"had_liked":false,"id":235798,"user_name":"夜空咏叹调","can_delete":false,"product_type":"c1","uid":1189074,"ip_address":"","ucode":"CC9350BCF218CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d2/a5e272ce.jpg","comment_is_top":false,"comment_ctime":1595205976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595205976","product_id":100039001,"comment_content":"不要过度设计这点很重要，特别是在代码是否需要复用没有明确的情况下，花费大量时间去设计一个可复用的代码成本是很高的。","like_count":0},{"had_liked":false,"id":211338,"user_name":"huanyehappy","can_delete":false,"product_type":"c1","uid":1603969,"ip_address":"","ucode":"0A5372104B7EBE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLiaWKn5ibqO92ic7tzWrXEoZUuduaoRIiaf2icT7E1ia9ViaE2U8Tas9IgFhkpFXicKUHTdqVUPmHauS7XRg/132","comment_is_top":false,"comment_ctime":1587950083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587950083","product_id":100039001,"comment_content":"最后的一个代码执行重复；将email的校验从被调用的函数去掉，统一移到调用之前校验。可是，底层的调用函数本身就应该对参数校验呢；如果不校验那如果其他的调用的地方传参不合理呢；","like_count":0},{"had_liked":false,"id":204297,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1586361000,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586361000","product_id":100039001,"comment_content":"【设计模式笔记22】20200408<br>今天最有收获的如何写出可复用的代码，我觉得前提你得有这个意识，思考代码怎么会更好复用，不想写出好代码的程序员不是好程序员。具备意识后我们需要寻找工具和方法，那就是减少代码耦合、单一职责、模块化、业务非业务逻辑分离、通用代码下沉等，剩下的就是运用这些方法了。怎么运用呢？我自己有一个办法就是把自己当作刚接手这些代码，以怀疑的态度甚至面前的代码，说白了就是挑刺，往往能发现有很多值得优化的地方，当然可能不是全部优化都值得去做，但是我们可以进一步筛选找到有价值的优化，比如可以按照风险大小排个序，风险系数高的先优化。欢迎叨扰","like_count":0},{"had_liked":false,"id":200743,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1585645132,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585645132","product_id":100039001,"comment_content":"DRY： 不用重复自己的代码。包括，语义重复，逻辑重复，执行重复等。<br><br>","like_count":0},{"had_liked":false,"id":200687,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585638336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585638336","product_id":100039001,"comment_content":"纸上得来终觉浅，觉知此事要躬行<br>","like_count":0},{"had_liked":false,"id":194710,"user_name":"三年过后","can_delete":false,"product_type":"c1","uid":1283157,"ip_address":"","ucode":"5E9106C5F11BED","user_header":"https://static001.geekbang.org/account/avatar/00/13/94/55/afc64956.jpg","comment_is_top":false,"comment_ctime":1585099299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585099299","product_id":100039001,"comment_content":"继承、多态、抽象、封装、层次清晰，下层不能调上层，通过模板化、模块化，业务职责单一，杜绝牵一发而动全身","like_count":0},{"had_liked":false,"id":190967,"user_name":"索旭东","can_delete":false,"product_type":"c1","uid":1139039,"ip_address":"","ucode":"BFD07BCD8C8CAE","user_header":"https://static001.geekbang.org/account/avatar/00/11/61/5f/b279daaf.jpg","comment_is_top":false,"comment_ctime":1584713941,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584713941","product_id":100039001,"comment_content":"实现逻辑重复、功能语义重复、代码执行重复。实现逻辑重复，但功能语义不重复的代码，并不违反 DRY 原则。实现逻辑不重复，但功能语义重复的代码，也算是违反 DRY 原则。除此之外，代码执行重复也算是违反 DRY 原则。","like_count":0},{"had_liked":false,"id":182736,"user_name":"zmysang","can_delete":false,"product_type":"c1","uid":1642663,"ip_address":"","ucode":"8A98057E7819DD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/tjhOILHBAmlx6YiaTZJzqzxn1uyB6XpdvGDIZhBn127TYEcoLLzxRiaKvtVd3HllQqPx7cqf2YmibyBUgGGGJPDkw/132","comment_is_top":false,"comment_ctime":1582857505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582857505","product_id":100039001,"comment_content":"python框架来编写接口时会存在代码重复的情况，但是应该不属于DRY原则。","like_count":0},{"had_liked":false,"id":182416,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1582783786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582783786","product_id":100039001,"comment_content":"关于实现逻辑重复谈一下我自己的看法。Spring AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor 分别处理 @Autowired 和 @Resource 依赖注入时，实现的逻辑都差不多。它们的逻辑虽然重复，但并不违反 DRY 原则，反而有一种重复之美，正如那句老话，好代码千篇一律，烂代码花样百出。<br><br>```text<br>AutowiredAnnotationBeanPostProcessor#postProcessMergedBeanDefinition<br>    -&gt; findAutowiringMetadata<br>        -&gt; buildAutowiringMetadata<br>    -&gt; InjectionMetadata#checkConfigMembers<br>AutowiredAnnotationBeanPostProcessor#postProcessProperties<br>    -&gt; InjectionMetadata#inject<br>        -&gt; AutowiredFieldElement#inject<br>        -&gt; AutowiredMethodElement#inject<br>    <br>CommonAnnotationBeanPostProcessor#postProcessMergedBeanDefinition<br>    -&gt; findResourceMetadata<br>        -&gt; buildResourceMetadata<br>    -&gt; InjectionMetadata#checkConfigMembers<br>CommonAnnotationBeanPostProcessor#postProcessPropertyValues<br>    -&gt; InjectionMetadata#inject<br>        -&gt; ResourceElement#inject<br>        -&gt; WebServiceRefElement#inject<br>        -&gt; EjbRefElement#inject<br>```","like_count":0},{"had_liked":false,"id":181680,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582615443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582615443","product_id":100039001,"comment_content":"老师已经在上面将DRY原则说的很透彻了,至于还有什么其他类型的代码重复,那我尝试使用单一职责原则来说明,如果一个类的属性和其他类中的属性有所重复,那么建议就是将这两个类中的相同属性进","like_count":0},{"had_liked":false,"id":181239,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1582524071,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582524071","product_id":100039001,"comment_content":"代码可复用性是一种对理论和经验要求都比较高的编程境界<br><br>我的工作反思：<br>1、我目前的项目模块划分还算清楚，但公开的接口是在 Service 层的。应该建立一个新的层次，让业务所在的 Service 类 和 对外公开接口的服务类，区分开来。应该划分 Business 层用于业务，而 Service 层用于公开接口。这是我的错误决定。<br><br>2、通用组件的代码下层或独立，是从编程规范上对代码可复用性提供条件。大家只要按照规范去编写，就会发现代码基本具备可复用的特点了。这是我应该尽快确立的。","like_count":0},{"had_liked":false,"id":176961,"user_name":"三尺寒冰","can_delete":false,"product_type":"c1","uid":1027586,"ip_address":"","ucode":"B10C7C9F955DF5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/02/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1581237237,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1581237237","product_id":100039001,"comment_content":"在开发新项目时，需要建新表，然后每次都需要在工程里，对新加的Repository增加add、select、update方法，逻辑大都差不多，这个感觉也是一个重复，有什么好的方法可以解决这类重复吗？","like_count":0,"discussions":[{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336841,"discussion_content":"可以自动生成这部分代码呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608714166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174517,"user_name":"燃着的半支烟","can_delete":false,"product_type":"c1","uid":1230837,"ip_address":"","ucode":"23C7B588F400A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/f5/4e9a82e9.jpg","comment_is_top":false,"comment_ctime":1580263898,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1580263898","product_id":100039001,"comment_content":"老师，咨询一个场景问题。<br>问题描述：我经常在写代码的时候碰到这样的场景，在service类有多个方法，做同样的状态校验，然后我就把状态校验抽取成了一个公共方法放在本service类里，但是后来发现其他的service类也有这样的校验，我就想把这个校验方法抽出去，但是又觉得这个代码无处安放。。。<br>困惑：1、如果在这些service类之外，独立一个类出来的话，又不知道如何命名这个类，也不知道这个类应该放在哪个包里？<br>2、还是说把这个校验方法放到对应的业务bo或者domain里呢？<br><br>这种场景老师建议如何处理呢？  ","like_count":0,"discussions":[{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336843,"discussion_content":"如果验证不涉及到数据库的话可以新建一个工具类或者domain里面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608714317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171934,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1579055292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579055292","product_id":100039001,"comment_content":"2. 给我印象深刻的一点：『实现逻辑重复，但功能语义不重复的代码，并不违反 DRY 原则』。主要考虑的是如果将这些代码合并后，在将来如果各自的业务逻辑修改时，代码不够灵活<br>3. 在写代码的过程中不要刻意地去做代码的复用性设计，当遇到代码复用的问题时再进行代码复用性的设计","like_count":0},{"had_liked":false,"id":169729,"user_name":"evalcony","can_delete":false,"product_type":"c1","uid":1401098,"ip_address":"","ucode":"D8CE3E832A7A10","user_header":"https://static001.geekbang.org/account/avatar/00/15/61/0a/1e98cc81.jpg","comment_is_top":false,"comment_ctime":1578418638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578418638","product_id":100039001,"comment_content":"DRY，我的理解是，让代码在哪个角度（维度）上进行解耦&#47;独立&#47;正交。<br>使代码“积木化”。","like_count":0},{"had_liked":false,"id":169205,"user_name":"柴柴777","can_delete":false,"product_type":"c1","uid":1032484,"ip_address":"","ucode":"5208B935ECB6F7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/24/0ea08c9e.jpg","comment_is_top":false,"comment_ctime":1578293178,"is_pvip":false,"replies":[{"id":"65742","content":"有点重复是问题不大的，开发软件本身就没有绝对的对与错，也不是非黑即白，怎么合适怎么来，怎么舒服怎么来，不行就再重构。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1578379617,"ip_address":"","comment_id":169205,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578293178","product_id":100039001,"comment_content":"我 之前就有个问题就说 我们如果用了组件化 每个模块算是单独的  尽管可能会写一个单独的util模块但是 还是存在着 重复代码,但是这些重复代码不在一个module里,那这样的到底算不算重复呢,,这些简单的部分的少量的重复不值得去单独加一个module","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480454,"discussion_content":"有点重复是问题不大的，开发软件本身就没有绝对的对与错，也不是非黑即白，怎么合适怎么来，怎么舒服怎么来，不行就再重构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168857,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1578202213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578202213","product_id":100039001,"comment_content":"打卡<br>一般代码重复的几种情况:<br>1、实现逻辑重复，但是语义不重复，这是不违背DRY原则的。可以把单点功能分离为颗粒更小的粒度，进行复用。<br>2、逻辑语义重复，函数命名有一定差异，代码实现逻辑不一样，但是功能一样。要保留一个功能模块，项目中使用同一个功能模块，便于后续修改或维护。<br>3、代码执行重复，重复的有效性检验，数据库访问等，在一个项目中，需要进行整体梳理，去除这种重复。<br><br>复用:开发者或调用者的角度，在写代码时要尽量复用以前的代码。<br>复用性:指在开发中尽可能让代码能够复用。<br>DRY原则:编程指导原则，不写&quot;重复&quot;的代码<br>提高代码复用性的方法:<br>1、减少代码耦合<br>2、满足单一职业原则<br>3、模块化<br>4、业务与非业务代码分离<br>5、通用代码下沉，底层代码更容易复用，另外只允许上层代码调用下层代码以及通层代码之间的调用，禁止下层代码调用上层代码。<br>6、利用继承、多态、抽象、封装<br>7、利用模板等设计原则","like_count":0},{"had_liked":false,"id":168156,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1578022135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578022135","product_id":100039001,"comment_content":"合成复用原则跟Dry原则是什么关系？","like_count":0},{"had_liked":false,"id":168115,"user_name":"Geek_323c91","can_delete":false,"product_type":"c1","uid":1732683,"ip_address":"","ucode":"AE946A94605456","user_header":"","comment_is_top":false,"comment_ctime":1578015434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578015434","product_id":100039001,"comment_content":"我个人理解getUserByEmail checkIfUserExisted 的校验逻辑是应该存在的，因为这2个方法可能不止这一个地方调用，方法保证自身逻辑正常执行的校验是应该的。调用方就不用重复定义这些校验,比如getUserByEmail  调用方传入的email不合法就不查db  因为db的email肯定是合法的","like_count":0},{"had_liked":false,"id":165961,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1577351769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577351769","product_id":100039001,"comment_content":"这一个月一直工作都很忙感觉落下好多课程 还好感觉争哥讲的自己工作经历过 所以能很快理解和赶上","like_count":0},{"had_liked":false,"id":165530,"user_name":"Viola","can_delete":false,"product_type":"c1","uid":1528096,"ip_address":"","ucode":"CF8FF5323AE43A","user_header":"","comment_is_top":false,"comment_ctime":1577254322,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1577254322","product_id":100039001,"comment_content":"正好看到这一节，工作中有个问题想请教一下老师，有两个类X和Y，很多属性都是相同的，例如都有金额a、金额b、金额c等等，有一个函数，需要校验X的几个属性是否正确，即validateX(X x)，用到x.geta,x.getb,x.getc等等，现在Y也有相同需求，把这个函数copy一份，变成validateY(Y y)，用到y.geta,y.getb,y.getc算违反DRY原则吗？个人理解和第一个例子里的校验用户名和密码类似，这是两个逻辑不同的类。还请老师指正，谢谢！<br>另外，有考虑过把每一个属性都传进去，这样入参就变成相同的类型（例如金额）而不是不同的类型（X或Y），调用时传入x.geta或y.geta即可使用一个函数来解决，但由于相同参数非常多，这个函数的入参可能会变成好几十个，现有的调用处也全都要从X改成x.geta,x.getb,x.getc。感觉这种改法得不偿失，增加出bug的概率。","like_count":0,"discussions":[{"author":{"id":1013503,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/ff/d6711136.jpg","nickname":"qinshaoq","note":"","ucode":"94759B235BC51A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":139052,"discussion_content":"X和Y继承自同一个基类，子类中实现validate函数，调用的时候传个基类指针，这样是否可行？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579272049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165367,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1577230619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577230619","product_id":100039001,"comment_content":"代码、语义，执行三者重复，一个比一个更贴近业务；个人觉得不要过小优化。可以通过上线后的调用分析出哪些代码或功能被调用得最多。针对性地进行重复优化","like_count":0},{"had_liked":false,"id":165366,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1577230467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577230467","product_id":100039001,"comment_content":"Rule of Three： 1加2等于三","like_count":0},{"had_liked":false,"id":165009,"user_name":"CDz","can_delete":false,"product_type":"c1","uid":1114779,"ip_address":"","ucode":"A23BEE1C4A5922","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/9b/b1a3c60d.jpg","comment_is_top":false,"comment_ctime":1577147439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577147439","product_id":100039001,"comment_content":"* DRY——don’t repeat yourself(不要重复自己）<br>* 重复有几种<br>    * 逻辑重复（代码逻辑）<br>    * 语义重复（不同的方法名，意思相同，实现上有所不同，但目的相同）<br>    * 执行重复（同一个业务中，重复执行一段代码，一般是校验上的代码）<br>* 以上三种重复，第一种有时候不算违反DRY，但是看起来最像是违反DRY。后面两种需要在代码中尽量避免<br>* DRY与代码的可复用性是两回事<br>* 提高代码复用性（概念，没有深入理解）<br>    * 减少代码耦合<br>    * 满足单一职责原则<br>    * 模块化<br>    * 业务与非业务逻辑分离<br>    * 通用代码下沉（如何下沉，什么东西下沉？）<br>    * 继承、多态、抽象、封装<br>    * 应用模板等设计模式<br>* Rule of three——如果一个需求没有明确需要复用性，并且未来复用性可能性并不高，写出复用性代码成本比较高，就不需要管复用性。等到下次写重复逻辑时，再进行重构。<br>* DRY不是只代码重复，而是“知识”的重复，意思是指业务逻辑。例如由于沟通不足，两个程序员用两种不同的方法实现同样功能的校验。<br>DRY is about the duplication of knowledge, of intent. It’s about expressing the same thing in two different places, possibly in two totally different ways.","like_count":0},{"had_liked":false,"id":164988,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1577138334,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577138334","product_id":100039001,"comment_content":"同一个类型的业务功能（例如部署管理），在同一个系统里有三个版本，而且后面两个都属于建设一半的情况，这属于违背DRY原则。<br><br>如果在做第一个版本的时候尽量做好设计，并在需求不满足的情况下及时重构，应该可以避免这种情况","like_count":0},{"had_liked":false,"id":164538,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1577023188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577023188","product_id":100039001,"comment_content":"关键点在于语义不重复，即使里面的执行逻辑重复，也并不违反DRY原则，而是SRP的体现。单一职责不仅体现在模块级，还体现在类级别，甚至函数级别，而很多人就错误的认为可复用就是没有重复的代码执行逻辑。细粒度的DRY指函数功能不重复，宏观的DRY指层与层之间职责不重复。","like_count":0},{"had_liked":false,"id":164495,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1577011006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577011006","product_id":100039001,"comment_content":"字段冗余设计","like_count":0},{"had_liked":false,"id":164341,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1576939917,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576939917","product_id":100039001,"comment_content":"课堂讨论：<br>除了实现逻辑重复、功能语义重复、代码执行重复，你还知道有哪些其他类型的代码重复？这些代码重复是否违反 DRY 原则？<br><br>Answer：<br>在实际项目开发中，多个模块的多个Constants可能包含相同的字段：例如低层模块定义了按钮点击间隔1000ms， 业务模块也定义了同样的字段。这种情形是违反DRY原则的，虽然对于代码的影响较小，还是应该定期code review时关注下这类问题。<br><br>Answer：<br>","like_count":0},{"had_liked":false,"id":164324,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1576936691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576936691","product_id":100039001,"comment_content":"注释和model 违反了 DRY 原则 注释写重复了, 或者 逻辑改了, 注释没改, model 则是 属性命名多余等等","like_count":0},{"had_liked":false,"id":164318,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1576935393,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576935393","product_id":100039001,"comment_content":"之前只是觉得DRY就仅仅是代码上的重复，现在终于厘清了。还有语义，功能和执行上的重复。<br>我们团队约定在写代码的时候，每层都需要检验参数，为了防止NPE和别人调用时出错，就会造成很多重复的校验，但是由于每层的职责不一样，很多校验也算不上完全重复，不知道这个算不算的上是代码执行重复。<br>","like_count":0,"discussions":[{"author":{"id":1734795,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/78/8b/421cb2c4.jpg","nickname":"成活","note":"","ucode":"F8840EE4DC3969","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212786,"discussion_content":"为了保险两个字有太多的重复校验了/笑哭","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585015485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164307,"user_name":"小建","can_delete":false,"product_type":"c1","uid":1647247,"ip_address":"","ucode":"C9781DF8F79112","user_header":"https://static001.geekbang.org/account/avatar/00/19/22/8f/22e9c74b.jpg","comment_is_top":false,"comment_ctime":1576932876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576932876","product_id":100039001,"comment_content":"dry 、 rule of three. get ","like_count":0},{"had_liked":false,"id":164296,"user_name":"小刀","can_delete":false,"product_type":"c1","uid":1351063,"ip_address":"","ucode":"94DF8C45E09E42","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaByN5IfYbE9jMtWrtTDXtPEIHeV77KW1p7ZkiasiaGgA50VXaibo4fbp5ib2JkFP3iaIe4AUudLibufkEIofu5euCNHg/132","comment_is_top":false,"comment_ctime":1576927408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576927408","product_id":100039001,"comment_content":"复用<br>可复用性<br>易复用性<br>DRY不要去重复","like_count":0},{"had_liked":false,"id":164188,"user_name":"_xcc","can_delete":false,"product_type":"c1","uid":1298398,"ip_address":"","ucode":"8EB4B735D36E81","user_header":"https://static001.geekbang.org/account/avatar/00/13/cf/de/85555a93.jpg","comment_is_top":false,"comment_ctime":1576905496,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576905496","product_id":100039001,"comment_content":"校验IP合法性的代码我收藏了，感谢","like_count":0},{"had_liked":false,"id":164088,"user_name":"小猴子吹泡泡","can_delete":false,"product_type":"c1","uid":1122941,"ip_address":"","ucode":"A5F214E388E41F","user_header":"https://static001.geekbang.org/account/avatar/00/11/22/7d/b093ca1e.jpg","comment_is_top":false,"comment_ctime":1576858552,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1576858552","product_id":100039001,"comment_content":"老师，我有一个关于DAO层代码复用的疑问，例如，在User类里有name、email、code等字段，现在我有两个方法分别会通过code去查询name和email，我是在DAO层写两个方法（getNameByCode()、getEmailByCode()）好呢还是写一个getUserByCode()，然后通过getter方法去获取name和email好？我个人一直觉得是写两个方法好，因为可以减少数据库没必要的查询，节省时间，但是这样可能导致在DAO层写的接口和SQL偏多，望老师指点迷津，谢谢！","like_count":0,"discussions":[{"author":{"id":1401098,"avatar":"https://static001.geekbang.org/account/avatar/00/15/61/0a/1e98cc81.jpg","nickname":"evalcony","note":"","ucode":"D8CE3E832A7A10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":124393,"discussion_content":"写1个好。数据库查询是高消耗操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578418344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016594,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/83/12/4ba82798.jpg","nickname":"我是智障","note":"","ucode":"ED9D959423E024","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93226,"discussion_content":"我觉得一个方法就好了，一行记录的数据量没有多大，都需要经过数据库查询一次，没太大关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576915624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164051,"user_name":"阿冰777","can_delete":false,"product_type":"c1","uid":1373893,"ip_address":"","ucode":"F365EB44F971F3","user_header":"https://static001.geekbang.org/account/avatar/00/14/f6/c5/6329ddcc.jpg","comment_is_top":false,"comment_ctime":1576850738,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576850738","product_id":100039001,"comment_content":"今天学React Hooks ， 发现他解决了一种重复，就是你的代码需要写在多个生命周期的时候，hooks把它提炼了出来。展开来讲，我觉得应该是解决了注册事件的重复，如果我要在框架里加一个新功能，需要在各个地方添加一些重复的代码来注册，那么这也是一种重复，这种重复更抽象，更不易被察觉，但是你一但少加了一个地方，就容易产生bug。","like_count":0},{"had_liked":false,"id":164046,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1576849953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576849953","product_id":100039001,"comment_content":"在类A中定义了一个语义上与类B已存在的常量算不算的上违反DRY原则。我自己理解类A中用的尽量在自己类中定义，不要抽取，除非类A与类B有交集，才抽取。否则不要抽取。","like_count":0},{"had_liked":false,"id":163946,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1576832712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576832712","product_id":100039001,"comment_content":"从服务提供者的角度看，提供者不收敛也违反了DRY。<br>举例，userService和userManager都提供了getUser方法，无论这两个getUser的签名多么不一样，都违反DRY。因为在service层有了两个user服务提供者，这样对于userService的上层调用者来说会困惑，而且调用链路很长且日志相似的话，很难不靠debug来追踪问题","like_count":0},{"had_liked":false,"id":163895,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1576821080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576821080","product_id":100039001,"comment_content":"打卡~<br>Don&#39;t repeat yourself.<br>逻辑重复、功能语义重复、代码执行重复","like_count":0},{"had_liked":false,"id":163892,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1576820227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576820227","product_id":100039001,"comment_content":"对于老师说的&lt;代码执行重复&gt;下面的&lt;查询数据库&gt;重复,我有话要说.<br><br>在大部分的场景下,这种方法确实可以减少数据库的I&#47;O.<br>但是,如果在对安全性要求较高时,可能会选择牺牲一些这方面的性能了.<br><br>避免出现像CPU的旁路攻击,把不该取的信息给取出来了,有泄漏的风险.<br>","like_count":0},{"had_liked":false,"id":163888,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1576819182,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576819182","product_id":100039001,"comment_content":"同一个项目，多个人维护，如果内部没有沟通好，会经常会出现重复性的无用功，就像老师文中说的检测IP地址合法性这个，所以，需要一些好的经验来命名模块、类、函数等，尽量做到知名知意。<br><br>代码经验也是避免重复路径之一，这也是为什么这么多人需要提升模块设计吧。","like_count":0},{"had_liked":false,"id":163881,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1576817937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576817937","product_id":100039001,"comment_content":"关于本章，提个问题：<br><br>1.函数名  检验用户名或密码。这样违反单一职责，因为语义上做了两件事。但如果函数名定义为  检验注册入参，那么对“用户名”和“密码”的检验都属于入参检验，是否就满足单一职责了。我一直认为是满足的，望栏主给个定论或者看法。<br><br>关于本章，给个补充：<br><br>1.除了可复用性，其实还可以加一个易复用性。<br><br>2.可复用性讲究的是抽象接口对多个场景兼容的能力，而易复用性讲究的是对特定一类场景，在使用该接口时的成本要低，意思要明确（可以认为是接口隔离的一种体现）。<br><br>3.可复用性追求的最终目标是平台化。易复用性则是中台化。<br><br><br>以上非官方论述，仅个人的认知定义，望栏主给予一些自己的看法。谢谢。","like_count":0},{"had_liked":false,"id":163868,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1576814963,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576814963","product_id":100039001,"comment_content":"理解思想和原则比直奔模式更重要，知其然，知其所以然！<br>业务上的重复！","like_count":0},{"had_liked":false,"id":163863,"user_name":"台风骆骆","can_delete":false,"product_type":"c1","uid":1170748,"ip_address":"","ucode":"891D3599644ABD","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/3c/a595eb2a.jpg","comment_is_top":false,"comment_ctime":1576812928,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576812928","product_id":100039001,"comment_content":"脱离出代码，从系统设计来看，技术与业务分离也是一种符合DRY原则的做法，即把一些与业务无关的脱离出来形成一个框架，而不是每来一种业务就再写一个相应的逻辑出来，如mapreduce框架&#47;storm框架这些。","like_count":0},{"had_liked":false,"id":163853,"user_name":"mike","can_delete":false,"product_type":"c1","uid":1326662,"ip_address":"","ucode":"AB330E7B88EF1C","user_header":"https://static001.geekbang.org/account/avatar/00/14/3e/46/0b888d5a.jpg","comment_is_top":false,"comment_ctime":1576811876,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1576811876","product_id":100039001,"comment_content":"大佬，感觉更新好慢啊，真正讲到具体的设计模式还得要1个月呢。。。","like_count":0,"discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91398,"discussion_content":"这个时间是用来给你练习的。多写几个例子代码，慢慢感悟，比囫囵吞枣好。其实学到越多模式，越是感觉这些原则更重要，因为这些模式都是原则衍生出来的。透彻理解了原则，可以产生自己的模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576831902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91267,"discussion_content":"每周更新3讲,1个月12讲,100讲,足足9个月时间啊,跨度好大了.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576823433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163848,"user_name":"马哲富","can_delete":false,"product_type":"c1","uid":1107917,"ip_address":"","ucode":"D6BDDFE3CC07ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/cd/08088f14.jpg","comment_is_top":false,"comment_ctime":1576810956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576810956","product_id":100039001,"comment_content":"    重复可以从三个方面去理解：代码逻辑重复，功能语义重复，代码执行重复；其中代码逻辑重复，但是功能语义不重复并不违反DRY原则；代码逻辑不重复，但是功能语义重复，违反了DRY原则；执行代码重复违反DRY原则。<br>    提高代码可复用性的七个方法：<br>    1、减少代码耦合；<br>    2、满足单一职责原则；<br>    3、模块化，从代码层面来讲包括方法、类，其中需要运用抽象思维，和单一职责原则；<br>    4、业务代码和业务代码分离，业务代码一般不通用，非业务代码通用些；<br>    5、通用代码下沉，上层代码可以调用下层代码，下层代码不调用上层代码；<br>    6、合理运用面向对象语言特性：继承、多态、抽象、封装；其中抽象能力很重要;<br>    7、合理运用各种设计模式，例如模板模式","like_count":0},{"had_liked":false,"id":163822,"user_name":"堵车","can_delete":false,"product_type":"c1","uid":1145404,"ip_address":"","ucode":"7BC1E50A4F8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","comment_is_top":false,"comment_ctime":1576807869,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"1576807869","product_id":100039001,"comment_content":"写业务的时候，经常会有get&#47;set的赋值操作。把一个对象的值部分&#47;全部拷贝给另一个对象，对象的字段有些异样，有些不一样。这种代码怎么写比较优雅？如果是A对象值拷贝给B对象，这种get&#47;set操作归属于A域还是B域啊？","like_count":0,"discussions":[{"author":{"id":1000237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","nickname":"enjoylearning","note":"","ucode":"DCAF8538DEA277","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":95434,"discussion_content":"用一些mapping框架吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577022569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91401,"discussion_content":"是指的VO转换吗？aVO.setXX（bVO.getXX），各自管各自的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576832107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1145404,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","nickname":"堵车","note":"","ucode":"7BC1E50A4F8D3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":92999,"discussion_content":"不单单是vo转换。一条交易订单要赋值给账户对象，将账户对象传到dao做账户变动操作。账户的参数再赋值给账单对象，保存账单。这里面有两个赋值操作，这两个赋值操作应该抽出，作为两个赋值方法。订单参数赋值给账户这个赋值方法应该数据订单域还是账户域？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576898613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":91401,"ip_address":""},"score":92999,"extra":""},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1145404,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","nickname":"堵车","note":"","ucode":"7BC1E50A4F8D3D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102436,"discussion_content":"getter，setter在两个域对象上都要有，因为需要双向赋值。赋值的过程可以包装成converter，这个converter不属于任何一个域","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577346184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":92999,"ip_address":""},"score":102436,"extra":""},{"author":{"id":1145404,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","nickname":"堵车","note":"","ucode":"7BC1E50A4F8D3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104429,"discussion_content":"这个cover不属于这两个域属于谁？无家可归忒可怜","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577433540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":102436,"ip_address":""},"score":104429,"extra":""}]}]},{"had_liked":false,"id":163802,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1576804750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576804750","product_id":100039001,"comment_content":"dry相对来讲应该是最简单的一种原则，但是真正做到的却很少。尤其是一开始想着后期重构，结果发现越写越乱，难以维护。","like_count":0},{"had_liked":false,"id":163798,"user_name":"小畅","can_delete":false,"product_type":"c1","uid":1322880,"ip_address":"","ucode":"D031CC07CD564E","user_header":"","comment_is_top":false,"comment_ctime":1576804529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576804529","product_id":100039001,"comment_content":"设计每个模块、类、函数，都要想设计外部api一样去思考。嗯","like_count":0},{"had_liked":false,"id":163793,"user_name":"FIGNT","can_delete":false,"product_type":"c1","uid":1540988,"ip_address":"","ucode":"D9DB185AE9E67C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","comment_is_top":false,"comment_ctime":1576803858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576803858","product_id":100039001,"comment_content":"类似的项目，不同的第三方搞一套系统，大部分业务类似，只是个性化的需求不同。这样看也违背了DRY","like_count":0},{"had_liked":false,"id":163789,"user_name":"欠债太多","can_delete":false,"product_type":"c1","uid":1099238,"ip_address":"","ucode":"B0CC91FA6F3981","user_header":"https://static001.geekbang.org/account/avatar/00/10/c5/e6/50c5b805.jpg","comment_is_top":false,"comment_ctime":1576803371,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576803371","product_id":100039001,"comment_content":"首先，“不重复”并不代表“可复用”。在一个项目代码中，可能不存在任何重复的代码，但也并不表示里面有可复用的代码，不重复和可复用完全是两个概念。所以，从这个角度来说，DRY 原则跟代码的可复用性讲的是两回事。<br>这段里面“单并不表示里面有可复用代码”是不是描述不对，应该是“单并不表示里面没有可复用的代码”","like_count":0},{"had_liked":false,"id":163785,"user_name":"再见孙悟空","can_delete":false,"product_type":"c1","uid":1025518,"ip_address":"","ucode":"57E12A2F9CD915","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","comment_is_top":false,"comment_ctime":1576803163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576803163","product_id":100039001,"comment_content":"之前我们 service 层会调用 dao ，manager 也会调用 dao ，这样的话，就会重复加上很多校验逻辑，比如 list in 查询，service 层和 manager 层去调用需要加上非空校验，逻辑重复了，并且还会因为忘记校验而出异常。后来统一规定 dao 层只暴露给 manager，所有关于数据库的操作都只能 manager 调用，解决了以上问题。这应该也是 DRY 的一种吧","like_count":0},{"had_liked":false,"id":163780,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1576802754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576802754","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":163770,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1576801450,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576801450","product_id":100039001,"comment_content":"往大了说的话，系统的重复建设也违反了DRY,需要抽象出更加通用和底层的系统，供高层的系统使用","like_count":0,"discussions":[{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":90904,"discussion_content":"所以就有了中台，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576802654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163768,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1576801422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576801422","product_id":100039001,"comment_content":"突然想起来前几天，有几个类都调用一个函数，都每个类里扔了一个，我有点惭愧啊。","like_count":0},{"had_liked":false,"id":163761,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1576801017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576801017","product_id":100039001,"comment_content":"除了实现逻辑重复、功能语义重复、代码执行重复，你还知道有哪些其他类型的代码重复？<br>编译后的代码重复.<br>这些代码重复是否违反 DRY 原则？<br>没有违反了DRY原则.<br>先明确个前提王争老师这里讲到的重复的代码是针对人来说的,而编译后的字节码是给机器读的不是给人读的,受众的对象不同.编译后的重复字节码代码是为了支持各种场景语义的执行逻辑.例如java中try-catch-finally中,finally的代码块编译后会被复制多份,使得各种出口的语义场景都可以执行finally的代码块,如果修改成了一份,jvm就可能会不认识,在类加载链接的环节就通不过字节码的校验.","like_count":0},{"had_liked":false,"id":163758,"user_name":"阿玛铭","can_delete":false,"product_type":"c1","uid":1100703,"ip_address":"","ucode":"DBF948D82ACBE3","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/9f/ee68858c.jpg","comment_is_top":false,"comment_ctime":1576800461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576800461","product_id":100039001,"comment_content":"总结：DRY这个原则可以从单元测试的角度看。1.功能编排要求尽量少单元测试用例来覆盖。2. 函数重写保持单元测试不调用相同模块，即完成某一功能，需要同样多单元测试用例时，单元测试客户端尽量调用不同方法。3. DRY原则主要用于软件工件的可复用性，重构时期还要具体分析逻辑重复、语义重复、运行重复 <br>答题：好像老师讲的都覆盖到了，没想到其它代码复用，坐等其它同学上。思路：可以针对软件开发生命周期里边每个阶段，选择最终成本最低的问题解决方案。","like_count":0},{"had_liked":false,"id":163757,"user_name":"progyoung","can_delete":false,"product_type":"c1","uid":1014692,"ip_address":"","ucode":"0B4898AE78F9F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/a4/24955994.jpg","comment_is_top":false,"comment_ctime":1576800426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576800426","product_id":100039001,"comment_content":"逻辑重复，语义不重复，不算违背DRY，get it.","like_count":0},{"had_liked":false,"id":163753,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1576799840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576799840","product_id":100039001,"comment_content":"不知道java中的泛型使用，算不算避免返回重复，比如这个要返回string，另一个要返回integer，实现逻辑一样，返回object又降低可读性，外部调用的人都不知道这个object是什么类型，使用泛型就舒服多了，外部调用的人肯定知道这是什么类型的，可读性也加强了","like_count":0},{"had_liked":false,"id":163794,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1576803860,"is_pvip":true,"discussion_count":20,"race_medal":0,"score":"813325622804","product_id":100039001,"comment_content":"1、注释或者文档违反DRY<br>2、数据对象违反DRY<br><br>对于1，例如一个方法。写了好多的注释解释代码的执行逻辑，后续修改的这个方法的时候可能，忘记修改注释，造成对代码理解的困难。实际应用应该使用KISS原则，将方法写的见名知意，尽量容易阅读。注释不必过多。<br><br>对于2、例如类<br>class User<br>  String id<br>  Date registerDate<br>  int age<br>  int registedDays<br>其中 age可以由身份证号码算出来，而且每年都会递增。注册会员多少天了，也可以算出来。所以是不是可以考虑，数据只存储id和注册时间。其余两个字段可以算出来。<br><br>补充：<br>DRY不是只代码重复，而是“知识”的重复，意思是指业务逻辑。例如由于沟通不足，两个程序员用两种不同的方法实现同样功能的校验。<br>DRY is about the duplication of knowledge, of intent. It’s about expressing the same thing in two different places, possibly in two totally different ways.<br><br>当代码的某些地方必须更改时，你是否发现自己在多个位置以多种不同格式进行了更改？ 你是否需要更改代码和文档，或更改包含其的数据库架构和结构，或者…？ 如果是这样，则您的代码不是DRY。<br><br>when some single facet of the code has to change, do you find yourself making that change in multiple places, and in multiple different formats? Do you have to change code and documentation, or a database schema and a structure that holds it, or…? If so, your code isn’t DRY.<br><br>参考：<br>The Pragmatic Programmer: your journey to mastery, 20th Anniversary Edition (2nd Edition)","like_count":190,"discussions":[{"author":{"id":1390561,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/e1/0953c506.jpg","nickname":"授人以摸鱼","note":"","ucode":"69417D324C1473","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337104,"discussion_content":"虽然就从身份证号可以得出生日，但是并不应该通过身份证号字段来获取生日以至于获取年龄。因为身份证号是个偶然的证件类型，这个系统移植到其他国家就会使用不同规则的身份证号，也可能会改成用驾照号，学籍号来验证。应该把身份证明信息拆分到另一个系统中管理，用户信息中可以存取生日，这并不会导致跟身份证号“重复”。身份证号除了作为一个有特定编码规则的id，以及确实要用这一规则进行验证的场合哎，我们不应该把它当作id之外的东西看待。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1608798085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3067009,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/cc/81/adae9194.jpg","nickname":"Sam Jiang","note":"","ucode":"C9B0173A161175","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1390561,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/e1/0953c506.jpg","nickname":"授人以摸鱼","note":"","ucode":"69417D324C1473","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581396,"discussion_content":"可以设置一个date of birth字段","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658753660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":337104,"ip_address":""},"score":581396,"extra":""}]},{"author":{"id":1246707,"avatar":"https://static001.geekbang.org/account/avatar/00/13/05/f3/5488276f.jpg","nickname":"心雨鑫晴","note":"","ucode":"37A42C19B98F1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307286,"discussion_content":"对于第一点有一些不同的看法。对于有些代码，逻辑本身很复杂，或者较反人类。没有注释的话，真的很难理解。这本身来说是一个维护者偷懒了的问题。并没有跟DRY原则相关。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1600589337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1947264,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/S1c0wWsL7ZHicGK77Jb0ia7Fo9KwT223YxlVIyOLVnG0p4XYdLJdx92c7FDBmZZezguwiamK7sRAUyGDDqTjXYhtg/132","nickname":"王","note":"","ucode":"1281345B90B9C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354097,"discussion_content":"需不需要开age这个字段，也可以考虑业务需求上要如何使用。比如，要和用户信息一起展示，是不是考虑部分用户不愿意显示自己真实年龄，这时候就有必要存储用户填写的年龄信息了。\n个人理解，不喜勿喷~","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1615251648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1681459,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a8/33/b71635c1.jpg","nickname":"锋子","note":"","ucode":"89FFA85BDB1C99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321626,"discussion_content":"不存age不存注册时间，有为了简单而简单的嫌疑。  高频使用，每次计算，算力和存储？ 语义理解。。。而且有些规则并不通用，比如有人说身份证倒数第二位的奇偶区分男女，那么性别是不是也可以不存.....","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1604599774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":92894,"discussion_content":"列出的参考书是《程序员修炼之道》的英文版。2019年后再版 The Pragmatic Programmer: your journey to mastery, 20th Anniversary Edition (2nd Edition)，目前 是美亚最畅销的技术类书籍。来吧，看看英文原版书，等国内有翻译版估计两年以后了。哪里找这本书，百度搜索英文书名即可。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1576892629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1738147,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","nickname":"东流","note":"","ucode":"2715BC6E87BD83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":131004,"discussion_content":"亚马逊提交的时候，提示 Sorry, this item can&#39;t be shipped to your selected address. Learn more. You may either change the shipping address or delete the item from your order.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578818713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":92894,"ip_address":""},"score":131004,"extra":""},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1738147,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","nickname":"东流","note":"","ucode":"2715BC6E87BD83","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":131101,"discussion_content":"是的，这本书美亚不能邮寄到大陆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578826720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":131004,"ip_address":""},"score":131101,"extra":""}]},{"author":{"id":1298279,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cf/67/057e5d93.jpg","nickname":"flying","note":"","ucode":"69AB7872B36B23","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276132,"discussion_content":"关于是否保存age字段，我觉得是需要保存的，你可以算出来，但是我需要保存这个字段，这个字段可以通过外界赋值，也可以算出来。如果不保存该字段，就会在每次调用的使用，通过id计算出age，效率 不高。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1590824567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1298279,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cf/67/057e5d93.jpg","nickname":"flying","note":"","ucode":"69AB7872B36B23","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289861,"discussion_content":"冗余是好的，但是的确违反原则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594252711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":276132,"ip_address":""},"score":289861,"extra":""}]},{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279372,"discussion_content":"age还是存的好，冗余一下，好处多多\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591334451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484192,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/a0/e0cccf7e.jpg","nickname":"圆圆满满","note":"","ucode":"396E7A822014D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560916,"discussion_content":"优秀，说的都很好，👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649491135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2882086,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/fa/26/a38f4b5d.jpg","nickname":"jl","note":"","ucode":"3EC1591B396600","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545913,"discussion_content":"课代表太秀了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642080931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004953,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","nickname":"Chloe","note":"","ucode":"C4848ED5B35752","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351514,"discussion_content":"赞推荐的这本书，太经典了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614310068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323102,"avatar":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","nickname":"Younger Ku","note":"","ucode":"D157DC38BDB515","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305016,"discussion_content":"我记得你回复别人评论的时候说英文练得不错，我想请教下你练习英语的方式，用了多久呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599740581,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1616954,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ODqoBdTKsL1jW4m72BZ0ibECEtWPq0N1tAIlbzjsq6mcJiavT2CKtx0ejpIqQdHbRXdMWH0I1jpI2ZiawFIkF1icsQ/132","nickname":"白中白","note":"","ucode":"95F9DABEBEFAAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292597,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595261572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1155275,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","nickname":"张三丰","note":"","ucode":"3A6215A40B3B21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209130,"discussion_content":"牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584613075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228465,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/b1/86ea2993.jpg","nickname":"静晓晨曦","note":"","ucode":"DC8BB8A85FD937","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":117943,"discussion_content":"这个厉害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578145600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1241107,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f0/13/8e97df97.jpg","nickname":"少","note":"","ucode":"E072773936BD97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":94953,"discussion_content":"多谢推荐，O&#39;Reilly上有!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577002768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112747,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","nickname":"李小四","note":"","ucode":"2A766BE16B276B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91319,"discussion_content":"棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576826645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163991,"user_name":"岁月","can_delete":false,"product_type":"c1","uid":1337598,"ip_address":"","ucode":"29A2A2BC3C4FE4","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","comment_is_top":false,"comment_ctime":1576841436,"is_pvip":false,"discussion_count":15,"race_medal":0,"score":"121835925724","product_id":100039001,"comment_content":"加油啊感觉更新太慢了一个下午就看完了..,一个星期至少更新10课吧.","like_count":28,"discussions":[{"author":{"id":1318540,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","nickname":"花儿少年","note":"","ucode":"CFE4F64243673B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93712,"discussion_content":"你是魔鬼吗，照顾一下996的小伙伴啊\n三节课都不一定能准时看完","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1576935490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376378,"discussion_content":"你是看小说吗  ","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1622101929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1809686,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/16/a2fb8136.jpg","nickname":"季某人","note":"","ucode":"1EEF2A58C3BD79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392215,"discussion_content":"哈哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630909682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":376378,"ip_address":""},"score":392215,"extra":""}]},{"author":{"id":1595158,"avatar":"https://static001.geekbang.org/account/avatar/00/18/57/16/b7b4fe79.jpg","nickname":"long","note":"","ucode":"8424683A801718","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339514,"discussion_content":"来 键盘给你 你来写","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1609715371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1263932,"avatar":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","nickname":"静静聆听","note":"","ucode":"0A8600CB928EFE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":181336,"discussion_content":"你是魔鬼吗","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1582362167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1320487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","nickname":"罗杰","note":"","ucode":"96BAFAA147341F","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541666,"discussion_content":"追求速度谁还不会呀，能认识字，一天也能把专栏看个七七八八吧。可是消化了吗？第二天记得多少，停留在底层次的努力毫无意义。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1640510324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245398,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKDY9bVLK3oyLmF6X2OnUZAzwSNVpS7XPxOQg84XJdvhr6SfvPe5uhYvzSf8ycIokfiapAJ8lvPxHA/132","nickname":"goodxwp","note":"","ucode":"B705DAC523B2ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93085,"discussion_content":"同意，更新有点慢","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576905971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1255437,"avatar":"https://static001.geekbang.org/account/avatar/00/13/28/0d/558f6141.jpg","nickname":"你净瞎说～","note":"","ucode":"A4EE0154034D22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1245398,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKDY9bVLK3oyLmF6X2OnUZAzwSNVpS7XPxOQg84XJdvhr6SfvPe5uhYvzSf8ycIokfiapAJ8lvPxHA/132","nickname":"goodxwp","note":"","ucode":"B705DAC523B2ED","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104049,"discussion_content":"几十个专栏，你都看了？我是没时间","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577410343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":93085,"ip_address":""},"score":104049,"extra":""}]},{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":99970,"discussion_content":"更新的速度可以了，一篇不看两遍很难理解","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577231150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1201215,"avatar":"https://static001.geekbang.org/account/avatar/00/12/54/3f/8e3b39f7.jpg","nickname":"zhangbing","note":"","ucode":"1B36604F96EF89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96872,"discussion_content":"8个月的周期确实有点久","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577097952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016594,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/83/12/4ba82798.jpg","nickname":"我是智障","note":"","ucode":"ED9D959423E024","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93222,"discussion_content":"你是魔鬼吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1576915381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542462,"discussion_content":"哈哈哈， 魔鬼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640757080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2282974,"avatar":"https://static001.geekbang.org/account/avatar/00/22/d5/de/f9a465ab.jpg","nickname":"成长型思维","note":"","ucode":"2FCE2C05FFCC83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324137,"discussion_content":"我一天看二十节","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605060637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299242,"discussion_content":"一下午20节。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597626432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":158513,"discussion_content":"看一遍真掌握不了，有时间可以多看几遍，我才看到这里……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580578335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163782,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1576802762,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"108950985162","product_id":100039001,"comment_content":"产品经理有时候设计产品功能的时候也会重复","like_count":25,"discussions":[{"author":{"id":1037925,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d6/65/e6abeba2.jpg","nickname":"Persistfanāāā","note":"","ucode":"8C4EF892B7ED27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390740,"discussion_content":"设计产品这块，可以参考华为的货架产品，产品模块化，可以复用，可以提高产品开发效率。（推荐《产品研发管理》周辉）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630018165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251835,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oiboHpgukqib2ASXeU0H7W1ibgRMqyrNE5KaWicicPEDy0ia8YdoneZAtvW0EFIiaqZJp2OS4dnweOgXaJ5EjJicicEqic5A/132","nickname":"覃钰栋","note":"","ucode":"19080C463658EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386830,"discussion_content":"有些产品设计的业务确实有点绕，取名和代码实现都有点绕","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627826964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1148845,"avatar":"https://static001.geekbang.org/account/avatar/00/11/87/ad/50a85a04.jpg","nickname":"hao","note":"","ucode":"997F2B57E2F556","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373717,"discussion_content":"有画面感了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620833088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297671,"discussion_content":"哈哈，这也确实是个角度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597022274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1110039,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f0/17/796a3d20.jpg","nickname":"言十年","note":"","ucode":"67B8B49C3A3B17","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":215581,"discussion_content":"一个App，这个模块抄另一个模块。因为都有签到，都有活动。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585358531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163748,"user_name":"magict4","can_delete":false,"product_type":"c1","uid":1043789,"ip_address":"","ucode":"CB6F063D881AAC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/4d/1d1a1a00.jpg","comment_is_top":false,"comment_ctime":1576798619,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"74591242651","product_id":100039001,"comment_content":"&gt; 重复执行最明显的一个地方，就是在 login() 函数中，email 的校验逻辑被执行了两次。一次是在调用 checkIfUserExisted() 函数的时候，另一次是调用 getUserByEmail() 函数的时候。这个问题解决起来比较简单，我们只需要将校验逻辑从 UserRepo 中移除，统一放到 UserService 中就可以了。<br><br>这样处理会有一个问题：如果别的 xxxService 也需要用到 UserRepo，而且没有对 email 跟 password 进行校验，直接调用了 UserRepo.checkIfUserExisted() ，会产生异常。<br><br>一种方法是约定，所有关于 User 的操作都只能通过 UserService 进行，不能直接调用 UserRepo。<br><br>另一种方法是“强制” xxxService 进行校验。我们可以把 UserRepo.checkIfUserExisted 的方法签名改成 <br><br>UserRepo.checkIfUserExisted(Email email, Password password)<br><br>并且把 validation 的逻辑封装在 Email 跟  Password 类的构造函数中。这样 xxxService 必须先把 email 跟 password 从 String 类型转成对应的 Email&#47;Password 类，才能调用 UserRepo，validation 的逻辑会在转换中被强制执行。","like_count":18,"discussions":[{"author":{"id":2662744,"avatar":"https://static001.geekbang.org/account/avatar/00/28/a1/58/3195a8b5.jpg","nickname":"Pz_","note":"","ucode":"A35E576C40FFFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382403,"discussion_content":"我也有这个问题啊，实际工程中因为每个公有方法对调用方都是不信任的，故在多次跨层调用时肯定会产生大量的参数重复校验，怎么解决呢？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625557100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1246707,"avatar":"https://static001.geekbang.org/account/avatar/00/13/05/f3/5488276f.jpg","nickname":"心雨鑫晴","note":"","ucode":"37A42C19B98F1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307289,"discussion_content":"如果将校验放在构造函数中，那只能通过抛异常的方式返回校验失败了。这样主流程的控制是需要根据异常来判断了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600589914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1597071,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe9iavda8ia7vNkbMVEHsCKs43l6U6HGWibiaxxKd9PuiaYu5wRedicC96PLicZ9VIh0ic5Jg8YHPrta3IAQ/132","nickname":"Geek_00e01b","note":"","ucode":"BC76A83B53D0EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391607,"discussion_content":"多一次校验就多一次，这种校验损耗的那点性能算不了啥。因为userrepo.checkUser方法时public的，无法保证外部不会跳过service直接执行该方法，所以我认为必须在其中做校验","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630549805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2733574,"avatar":"https://static001.geekbang.org/account/avatar/00/29/b6/06/cd1eaa49.jpg","nickname":"小王在努力","note":"","ucode":"A324EF87198905","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391051,"discussion_content":"我认为开发中是有个约定的吧，比如说做好分层后，每一层应当只做好本层的东西，比如Repository层就只负责和数据库打交道，那么它就应当只返回数据，针对于对email和password的校验，我认为应当放在它们所归属的类当中，这样也算符合面向对象的思维，对数据的操作行为应当与数据绑定。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630247484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1788647,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/4a/e7/6c16af5d.jpg","nickname":"汉江","note":"","ucode":"01622D984B8F9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295573,"discussion_content":"看的时候 我也感觉有这种问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596252255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165235,"user_name":"AaronChun","can_delete":false,"product_type":"c1","uid":1027352,"ip_address":"","ucode":"0D4A4CBD676A3D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ad/18/41831eae.jpg","comment_is_top":false,"comment_ctime":1577185054,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"57411759902","product_id":100039001,"comment_content":"数据库转换对象beanDb和数据展现beanVo，从属性定义上来看可能存在大量重复，但从业务或系统分层来看，却是职责明确，功能单一的对象，所以这并不违反DRY原则。相反如果将两者共性部分抽离提取，后期倘若业务变更，修改就会牵扯到前台和后台，不符合单一职责和接口隔离原则。","like_count":14,"discussions":[{"author":{"id":1792698,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5a/ba/596d6ae3.jpg","nickname":"MENGXIANGING","note":"","ucode":"B51414E230D6A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581238,"discussion_content":"跟之前的内容结合起来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658656344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167209,"user_name":"花颜","can_delete":false,"product_type":"c1","uid":1096871,"ip_address":"","ucode":"77AAE0CBA75439","user_header":"https://static001.geekbang.org/account/avatar/00/10/bc/a7/d36843c9.jpg","comment_is_top":false,"comment_ctime":1577716841,"is_pvip":false,"replies":[{"id":"65267","content":"好像只能靠人本身 工具很难去断定是否符合某一设计原则","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1578010458,"ip_address":"","comment_id":167209,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35937455209","product_id":100039001,"comment_content":"老师，我有个问题，在大型多人协作项目当中，类、功能都是分散给不同的人开发的，不同的开发者质量良莠不齐，而实现逻辑重复有代码重复率校验工具可以做检测，而功能语义重复和代码执行重复其实不是那么容易能够发现，即使通过有效的codeReview，有没有什么工具可以辅助我们查找功能语义重复和代码执行重复这两类重复，以及在大型团队项目下，如何应用这些原则呢？毕竟靠自觉总是很难的","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479783,"discussion_content":"好像只能靠人本身 工具很难去断定是否符合某一设计原则","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1578010458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1951501,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/c7/0d/0dab398b.jpg","nickname":"好名字","note":"","ucode":"E2BFD96F912A67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307547,"discussion_content":"分工明确，以及代码review可以有效避免","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600681914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163915,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1576826922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31641597994","product_id":100039001,"comment_content":"设计模式_20<br><br># 作业：<br>想到的只有文档和注释的重复了，比如两个不同功能的文档，同时描写一个细节时，可能“负责”的产品经理会各自清清楚楚地写一遍。然后：<br>- 看的人就会懵，(描述相同时)写了两个地方，看一下是不是还有别的地方有描述；(描述不同时)，应该以哪个为准。<br>- 改的人也会懵，很容易忘记修改更新，更何况文档不更新程序又不会报错。。。<br><br><br>#感想：<br>回到“少干活 和 少犯错”的宗旨，重复的代码不仅写的时候会多些一遍，改的时候也要多看很多地方，多想很多差异性，多改很多地方，这样就违背了“少干活”；改的时候，容易忘记一些地方，维护多种逻辑实现的同一个逻辑，也容易疏忽而出错，这样就违背了“少出错”。<br><br>说句题外话，文中提到“Rule of Three”时，原来外国人也用“三”表示多个，而且表示的还是2个。。。","like_count":7},{"had_liked":false,"id":247925,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1533352,"ip_address":"","ucode":"6FD3642D6455AE","user_header":"https://static001.geekbang.org/account/avatar/00/17/65/a8/6431f8b0.jpg","comment_is_top":false,"comment_ctime":1599919522,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18779788706","product_id":100039001,"comment_content":"是不是所有包含or and的方法名的函数其实都不满足单一职责？","like_count":5},{"had_liked":false,"id":291476,"user_name":"炫炫","can_delete":false,"product_type":"c1","uid":1358609,"ip_address":"","ucode":"FDC7A0C6E08B02","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/11/7069b8eb.jpg","comment_is_top":false,"comment_ctime":1620300951,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14505202839","product_id":100039001,"comment_content":"总结：功能语义重复才是真的重复，实现逻辑重复不一定就是重复，代码执行重复就一定是重复","like_count":3},{"had_liked":false,"id":186774,"user_name":"Wh1","can_delete":false,"product_type":"c1","uid":1282715,"ip_address":"","ucode":"6D28506B99A285","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/9b/65f98192.jpg","comment_is_top":false,"comment_ctime":1583921328,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14468823216","product_id":100039001,"comment_content":"二刷时存在一个小问题，&quot;只能允许用户名、密码字符串为小写字符&quot; 与 &quot;字符范围只能是a-z、0-9、.&quot; 这个条件是不是也存在重复？按理说，只需要判断&quot;字符范围只能是 a-z、0-9、.&quot; 这个条件就满足字符全是小写了。","like_count":3},{"had_liked":false,"id":163950,"user_name":"blacknhole","can_delete":false,"product_type":"c1","uid":1098286,"ip_address":"","ucode":"271682FFE28F25","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","comment_is_top":false,"comment_ctime":1576833291,"is_pvip":false,"replies":[{"id":"67750","content":"嗯嗯 确实有点问题 已经安排在改了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1580122272,"ip_address":"","comment_id":163950,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14461735179","product_id":100039001,"comment_content":"1，提个小问题：<br><br>“实现逻辑重复”一节的代码是不是有点问题啊？<br><br>if (!(c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;z&#39;) || (c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;) || c == &#39;.&#39;) {}似乎应该改为if (!((c &gt;= &#39;a&#39; &amp;&amp; c &lt;= &#39;z&#39;) || (c &gt;= &#39;0&#39; &amp;&amp; c &lt;= &#39;9&#39;) || c == &#39;.&#39;)) {}。<br><br>2，说个小体会：<br><br>“可复用性、可扩展性、可维护性……”与“复用性、扩展性、维护性……”，加不加“可”，其实没有本质差别。我以为，在通常的语境中（或者几乎任何情况下），两者都是可以通用的。<br><br>比如，可复用性高，说明能够复用，与当前是否已经复用无关。复用性高，是指当前已经大量复用，说明在这之前可复用性高。已经大量复用时，依然可以更多地复用，也即：复用性高，意味着可复用性依然高。<br><br>通常的语境中，也即通常提到“复用性”时，人们几乎只关注能不能复用，而不是已经复用了多少。所以，可以认为，可复用性高等同于复用性高。","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478593,"discussion_content":"嗯嗯 确实有点问题 已经安排在改了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580122272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96541,"discussion_content":"感觉是差不多. 比如你说, 复用性高, 也可以理解成&#34;可以复用但还没开始复用&#34;.....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577073041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1098286,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","nickname":"blacknhole","note":"","ucode":"271682FFE28F25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96643,"discussion_content":"我的那些话给出了，“为什么从字面上它不是这个意思，但其实也可以这么理解”的道理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577083095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":96541,"ip_address":""},"score":96643,"extra":""}]}]},{"had_liked":false,"id":163944,"user_name":"哈喽沃德","can_delete":false,"product_type":"c1","uid":1749033,"ip_address":"","ucode":"7620366C16826B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b0/29/7ab573f4.jpg","comment_is_top":false,"comment_ctime":1576832344,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14461734232","product_id":100039001,"comment_content":"啥时能出设计模式的教程，我的大刀早已饥渴难耐了","like_count":3,"discussions":[{"author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":96544,"discussion_content":"更新太慢了. 我一个早上学习时间就可以学好两个星期的量了.....😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577073263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015189,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/95/dd73022c.jpg","nickname":"我是曾经那个少年","note":"","ucode":"9F02F7FF147D14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1337598,"avatar":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","nickname":"岁月","note":"","ucode":"29A2A2BC3C4FE4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":396071,"discussion_content":"哥  这能学明白？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632388856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":96544,"ip_address":""},"score":396071,"extra":""}]}]},{"had_liked":false,"id":163856,"user_name":"plain","can_delete":false,"product_type":"c1","uid":1057345,"ip_address":"","ucode":"4BD3BFFAB81DEC","user_header":"https://static001.geekbang.org/account/avatar/00/10/22/41/74c666f3.jpg","comment_is_top":false,"comment_ctime":1576811936,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14461713824","product_id":100039001,"comment_content":"设计每个模块、类、函数，都要像设计外部api一样去思考，隐藏可变的细节、暴露不变的接口。","like_count":3},{"had_liked":false,"id":251445,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1601561384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10191495976","product_id":100039001,"comment_content":"逻辑重复，功能重复，执行重复。其实执行上的重复，有时候我觉得并不能算违反DRY原则，可能是为了代码的可复用性，为了方便其他调用方的调用。","like_count":2},{"had_liked":false,"id":244577,"user_name":"蓝二哥哥我才是无羡啊👻","can_delete":false,"product_type":"c1","uid":1738272,"ip_address":"","ucode":"E70EE4E08F16AF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/20/e71b5585.jpg","comment_is_top":false,"comment_ctime":1598585124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10188519716","product_id":100039001,"comment_content":"模块常量重复定义也算违反DRY原则吧","like_count":2},{"had_liked":false,"id":228807,"user_name":"握了个大蚂蚱","can_delete":false,"product_type":"c1","uid":1488356,"ip_address":"","ucode":"AD34AD4FA37371","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/e4/e6faf686.jpg","comment_is_top":false,"comment_ctime":1592815105,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10182749697","product_id":100039001,"comment_content":"DRP：dont repeat yourself。<br>逻辑重复，解决方法是想办法复用并优化方法名或是方法结构；<br>语义重复（比如取request里的ip有两种方法），解决方法是统一成一种，不然维护困难；<br>代码执行重复(比如上层StringUtils.isNotBlank已经校验了，下层又去校验)，主要是性能问题而且代码也很冗余，加重理解负担。解决方法是写代码时脑子放清楚","like_count":2},{"had_liked":false,"id":164688,"user_name":"岁月","can_delete":false,"product_type":"c1","uid":1337598,"ip_address":"","ucode":"29A2A2BC3C4FE4","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/fe/1353168d.jpg","comment_is_top":false,"comment_ctime":1577072363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167006955","product_id":100039001,"comment_content":"看完最后这个Rlue of three , 我感觉把可扩展填进去也是有道理的, 一开始不一定写得出扩展性很好的代码, 所以可以先简单来, 后面需求明确了再慢慢重构把代码变得更加可以扩展?","like_count":2},{"had_liked":false,"id":163763,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1576801217,"is_pvip":false,"replies":[{"id":"62274","content":"😂","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1576801704,"ip_address":"","comment_id":163763,"utype":1}],"discussion_count":8,"race_medal":0,"score":"10166735809","product_id":100039001,"comment_content":"“Rule of Three”中的“Three”并不是真的就指确切的“三”，这里就是指“二”。😂<br>这句话看了好几遍","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478527,"discussion_content":"😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576801704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":90956,"discussion_content":"与之相对的有WET：wirte everything twice 😂，write every time","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576804150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1390561,"avatar":"https://static001.geekbang.org/account/avatar/00/15/37/e1/0953c506.jpg","nickname":"授人以摸鱼","note":"","ucode":"69417D324C1473","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337107,"discussion_content":"我估计是因为，第一次先直接实现，第二次重构，第三次复用，所以是Three，关键其实是在第二次🤣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608798411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1312332,"avatar":"https://static001.geekbang.org/account/avatar/00/14/06/4c/89ceb570.jpg","nickname":"火凤凰","note":"","ucode":"DB99D1EA222DC5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263045,"discussion_content":"一生二 二生三 三生万物","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589166483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1464013,"avatar":"https://static001.geekbang.org/account/avatar/00/16/56/cd/0add8290.jpg","nickname":"刘学习来学习","note":"","ucode":"5078B1EC8D8A66","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130819,"discussion_content":"事不过三","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578796484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91210,"discussion_content":"三思而后行，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576818951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1326662,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3e/46/0b888d5a.jpg","nickname":"mike","note":"","ucode":"AB330E7B88EF1C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91129,"discussion_content":"就像文言文中经常出现的概数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576811646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368522,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e1/ca/d8b0835f.jpg","nickname":"橘子","note":"","ucode":"EDF6145878F897","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91065,"discussion_content":"一二不过三","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576807843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283217,"user_name":"江小田","can_delete":false,"product_type":"c1","uid":1003149,"ip_address":"","ucode":"C5197BF856E8D3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/8d/34e0f6f3.jpg","comment_is_top":false,"comment_ctime":1615624752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5910592048","product_id":100039001,"comment_content":"收货最大的就是复用的范围定义：<br>业务语意层面的重复违反DRY原则；<br>代码写法角度的重复不违反DRY原则。","like_count":1},{"had_liked":false,"id":248569,"user_name":"LiYou","can_delete":false,"product_type":"c1","uid":1262680,"ip_address":"","ucode":"F10DD1205CCDD1","user_header":"https://static001.geekbang.org/account/avatar/00/13/44/58/a901cfce.jpg","comment_is_top":false,"comment_ctime":1600225707,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5895193003","product_id":100039001,"comment_content":"把简单的知识点做细节对比和区分，把一些编码方法总结成点，从而形成体系。虽然都是偏理论的知识点，但读完后受益匪浅。","like_count":1},{"had_liked":false,"id":242172,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1597628395,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5892595691","product_id":100039001,"comment_content":"DRY就是修改只修改一处。","like_count":1},{"had_liked":false,"id":163876,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1576816128,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871783424","product_id":100039001,"comment_content":"课堂讨论没有想到其他的了。<br>理解一下DRY，总结就是抽取统一“逻辑”，还有相似逻辑的简化统一，<br>为的就是同一“逻辑”，维护一块地方就行了。","like_count":1},{"had_liked":false,"id":163779,"user_name":"何妨","can_delete":false,"product_type":"c1","uid":1385377,"ip_address":"","ucode":"EC3983BFF7992A","user_header":"https://static001.geekbang.org/account/avatar/00/15/23/a1/b08f3ee7.jpg","comment_is_top":false,"comment_ctime":1576802654,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5871769950","product_id":100039001,"comment_content":"整体来说我们要做的是不写&quot;重复&quot;代码，同时考虑代码的复用性，但要避免过度设计。<br>这几点说起来简单其实做起来还是有些难度的，在平常写代码的时候需要多思考，写完之后要反复审视自己的代码看看有没有可以优化的地方。说起来我感觉我还算是对代码有些追求的……但是真的需求来了为了赶需求基本就一遍过了……😂，对于一些脚本代码更是过程编程，惭愧啊","like_count":1,"discussions":[{"author":{"id":1187197,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","nickname":"somenzz","note":"","ucode":"EA59A170DF8910","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380366,"discussion_content":"如果括号内再有括号呢？我感觉需要用到栈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624456594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163772,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1576801991,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5871769287","product_id":100039001,"comment_content":"老师概括的很全面了，提一个看看，<br>数据定义重复，比如数据库里定义了两个schema几乎相同的数据表，然后数据表映射到代码里的结构体或xml也几乎相同，没有把公共部分剥离。","like_count":1},{"had_liked":false,"id":359185,"user_name":"Geek_b16406","can_delete":false,"product_type":"c1","uid":2045553,"ip_address":"北京","ucode":"1F8D3882C21C21","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELnkXJAkW4GTMkNRO7zy5AHU7sq0ZV65AG6smFsHlcEAFN3qP3iaeHlCic7l5J7NDf6Q81aqh8ngssg/132","comment_is_top":false,"comment_ctime":1665308773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665308773","product_id":100039001,"comment_content":"Rule of three 称为&quot;三次原则&quot;，指的是当某个功能第三次出现时，才进行&quot;抽象化&quot;。<br><br>这是软件开发大家Martin Fowler在《Refactoring》一书中提出的。<br><br>它的涵义是，第一次用到某个功能时，你写一个特定的解决方法；第二次又用到的时候，你拷贝上一次的代码；第三次出现的时候，你才着手&quot;抽象化&quot;，写出通用的解决方法。<br><br>这样做有几个理由：<br><br>（1）省事。如果一种功能只有一到两个地方会用到，就不需要在&quot;抽象化&quot;上面耗费时间了。<br><br>（2）容易发现模式。&quot;抽象化&quot;需要找到问题的模式，问题出现的场合越多，就越容易看出模式，从而可以更准确地&quot;抽象化&quot;。","like_count":0},{"had_liked":false,"id":359072,"user_name":"Geek_1","can_delete":false,"product_type":"c1","uid":2704407,"ip_address":"陕西","ucode":"59300A73996D20","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/17/e4fdcaad.jpg","comment_is_top":false,"comment_ctime":1665220958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665220958","product_id":100039001,"comment_content":"写代码要注意可复用性，提升代码可复用性的七个方法。rule of three，第一次不一定要考虑可复用性，第二次则需要","like_count":0},{"had_liked":false,"id":343018,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1650596309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650596309","product_id":100039001,"comment_content":"我发现这些设计模式要刻在骨子里。<br>你写每一行代码，有没有停留一下，思考他怎么封装才是最好的方法呢。<br>多态设计的过程中，你有没有想过，这明显是针对不同的类型而做的设计，也就是说，可以用参数来标识也叫多态，而不是同一个方法名。<br>代码复用性，真的，难记住。只能一个一个举例的时候，慢慢想起这些设计原则。<br>为了方便以后面试用到，例如，减少代码耦合，满足单一职责、模块化、业务和非业务逻辑分离、代码下沉、（继承、多态、抽象、封装）、应用模板等设计模式。","like_count":0},{"had_liked":false,"id":323773,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1638155996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638155996","product_id":100039001,"comment_content":"通过模块化思想（类，接口，函数）有利于避免实现大而全的类，更好利用好单一职责原则，能更方便的将业务与非业务分离，并且将非业务代码下沉。编码技巧利用好面向对象的四大特性，配合设计模式当武器更方便的实现可复用的代码<br>最后思考下 如果当前写的代码可以很快速的思考到服用场景或者能很方便的抽离出更有复用性的函数就可以先抽离，成本低。相反如果很难抽出复用，那么可以有需求之后再重构<br><br>如上是小弟初学的一些理解 希望大家看到有问题的可以指正<br>希望二刷会有新的理解","like_count":0},{"had_liked":false,"id":322979,"user_name":"Z宇锤锤","can_delete":false,"product_type":"c1","uid":2188142,"ip_address":"","ucode":"7DB36E986A7A51","user_header":"https://static001.geekbang.org/account/avatar/00/21/63/6e/6b971571.jpg","comment_is_top":false,"comment_ctime":1637678530,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1637678530","product_id":100039001,"comment_content":"类的重复定义。","like_count":0},{"had_liked":false,"id":322478,"user_name":"米大王","can_delete":false,"product_type":"c1","uid":1097996,"ip_address":"","ucode":"6D6B644A528F9F","user_header":"https://static001.geekbang.org/account/avatar/00/10/c1/0c/8b83e19b.jpg","comment_is_top":false,"comment_ctime":1637407079,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1637407079","product_id":100039001,"comment_content":"DRY原则：<br>判定优先级：功能语义 &gt; 代码执行 &gt;  实现逻辑。<br>实现上的“重复”实际上是优先级最低的。另外也需要关注数据对象，文档或注释的是否满足DRY原则。<br><br>如何提升代码可复用性：<br>1. 减少代码耦合<br>2. 单一职责<br>3. 封装 继承 多态<br>4. 模块化<br>5. 业务与抽象逻辑分离<br>6. 通用代码下沉<br>7. 应用模板等设计模式<br>","like_count":0},{"had_liked":false,"id":313439,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1632444405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632444405","product_id":100039001,"comment_content":"DRY，不要重复自己，不要写重复的代码<br>实现逻辑重复，实现功能重复，执行代码重复，<br>其中实现逻辑重复，实现功能不重复，不属于重复，实现逻辑不重复但功能重复属于重复。<br>写代码要有考量度的复用性","like_count":0},{"had_liked":false,"id":301689,"user_name":"昵称C","can_delete":false,"product_type":"c1","uid":1234963,"ip_address":"","ucode":"1BB2D537942DC2","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/13/082013bc.jpg","comment_is_top":false,"comment_ctime":1625813518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625813518","product_id":100039001,"comment_content":"第三方包功能引入重复，如图片加载；<br>Bean类封装重复；<br>","like_count":0},{"had_liked":false,"id":297496,"user_name":"wsh","can_delete":false,"product_type":"c1","uid":1006628,"ip_address":"","ucode":"C0FE187C6EECED","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/24/d2575310.jpg","comment_is_top":false,"comment_ctime":1623578976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623578976","product_id":100039001,"comment_content":"还有一种，数据重复，多层次的数据，有时候上层数据包含下层多层数据的指针，而不是上层只包含相邻下层的指针，这样的好处是，可以直接访问，减少指针访问层次，坏处是，有太多的冗余指针字段。不知道讲师您，倾向于哪种选择？这算不算违反DRY原则","like_count":0},{"had_liked":false,"id":293791,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1621558354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621558354","product_id":100039001,"comment_content":"还有接口不一样，但是里面实现的逻辑有重复","like_count":0},{"had_liked":false,"id":288404,"user_name":"李奇锋","can_delete":false,"product_type":"c1","uid":1220713,"ip_address":"","ucode":"1A0A359D0530C9","user_header":"https://static001.geekbang.org/account/avatar/00/12/a0/69/e42348a8.jpg","comment_is_top":false,"comment_ctime":1618456615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618456615","product_id":100039001,"comment_content":"编写代码流程上的重复(特别是按照模版写代码的时候)，容易导致忘记了流程上一些细微的但又不直观的点，导致代码出bug #[[failure-mode]]","like_count":0},{"had_liked":false,"id":281912,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1614945002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614945002","product_id":100039001,"comment_content":"再补充一个，还有日志输出重复，这种重复除非特殊应用场景特殊考量，一般都是与DRY原则背道而驰的。","like_count":0},{"had_liked":false,"id":281911,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1614944864,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614944864","product_id":100039001,"comment_content":"常量定义（常量值）重复：具体判断常量是否违反了DRY原则，我认为需要看使用者都是如何使用的，比如某项目中两块业务都定义了常量值“-”，但是A业务常量名为减号，用于数学计算表达式的展示，B业务常量名为横线，用于空值数据的默认展示，那么我认为它们是符合DRY原则的。","like_count":0},{"had_liked":false,"id":281568,"user_name":"Emanon","can_delete":false,"product_type":"c1","uid":2430910,"ip_address":"","ucode":"B986F8BB226FB1","user_header":"https://static001.geekbang.org/account/avatar/00/25/17/be/d7d58b48.jpg","comment_is_top":false,"comment_ctime":1614793222,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614793222","product_id":100039001,"comment_content":"我认为“Rule of Three”中的“Three”就是“三”的意思，只有重复达到三次以上再认真考虑复用，如果只出现两次就要设计复用，很容易就出现文中提到的反例：”逻辑相同但语义不同“。","like_count":0},{"had_liked":false,"id":280307,"user_name":"DreamHeng","can_delete":false,"product_type":"c1","uid":1599490,"ip_address":"","ucode":"5562BFD8375138","user_header":"https://static001.geekbang.org/account/avatar/00/18/68/02/2d394d89.jpg","comment_is_top":false,"comment_ctime":1614156632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614156632","product_id":100039001,"comment_content":"\bDRY原则，就是不要写重复的代码，提高代码可复用性。","like_count":0},{"had_liked":false,"id":278077,"user_name":"杰西","can_delete":false,"product_type":"c1","uid":2109939,"ip_address":"","ucode":"542B3A9716AA71","user_header":"https://static001.geekbang.org/account/avatar/00/20/31/f3/22d6ed22.jpg","comment_is_top":false,"comment_ctime":1612751385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612751385","product_id":100039001,"comment_content":"笔记：<br>1、减少I&#47;O交互，争取小段逻辑一次查询搞定；<br>2、争对一个条件判断，不要维护2套校验逻辑；<br>3、不同业务的代码，虽然暂时处理逻辑一致，idea编译器也会提示代码重复，但是尽量分开写，方便后续调整，除非2个业务场景高度一致或者相互有依赖。","like_count":0,"discussions":[{"author":{"id":1048441,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/79/f400c4d1.jpg","nickname":"douge","note":"","ucode":"A6EB1AA3D53516","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584963,"discussion_content":"key1 &gt; 100 &amp;&amp; key2 &lt; 30 || ((key7 == 8 || key8 ==2) &amp;&amp; key3 &lt; 100 &amp;&amp; (key5 == 8 || key6 &gt; 4)) || key4 == 88 报错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661248228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2831163,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/33/3b/0b25b622.jpg","nickname":"陆一鸣猜不动","note":"","ucode":"68E89A037F9A0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531962,"discussion_content":"太强了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637483120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":273032,"user_name":"Geek_00e01b","can_delete":false,"product_type":"c1","uid":1597071,"ip_address":"","ucode":"BC76A83B53D0EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLe9iavda8ia7vNkbMVEHsCKs43l6U6HGWibiaxxKd9PuiaYu5wRedicC96PLicZ9VIh0ic5Jg8YHPrta3IAQ/132","comment_is_top":false,"comment_ctime":1610417319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610417319","product_id":100039001,"comment_content":"关于代码执行重复的问题中，getUserByEmail这个方法是一个public的，照理加入email的检测没啥问题啊，因为该方法有可能被单独执行。感觉平常业务中经常遇到这种情况，即方法A可能被很多地方调用，方法A接收的参数有效性检验到底该写到哪里的问题。","like_count":0},{"had_liked":false,"id":272408,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1610082353,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610082353","product_id":100039001,"comment_content":"感觉每一行都是干货","like_count":0},{"had_liked":false,"id":263278,"user_name":"🐝","can_delete":false,"product_type":"c1","uid":1183211,"ip_address":"","ucode":"28B3C527D81DC3","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/eb/c3ff1e85.jpg","comment_is_top":false,"comment_ctime":1606091072,"is_pvip":false,"replies":[{"id":"96104","content":"要权衡，没有最优解","user_name":"作者回复","comment_id":263278,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700810,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1606091072","product_id":100039001,"comment_content":"为了不重复，在合并代码里写if else 是否合适","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510138,"discussion_content":"要权衡，没有最优解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246301,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1599271192,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599271192","product_id":100039001,"comment_content":"Don’t Repeat Yourself，能有效提升代码的可维护性。当你一遍一遍重复的修改代码，最后还没改全，50米的大刀是不是也在隐隐颤抖了！<br>而避免重复代码的最有效方法，就是写复用性高的代码。但是复用性高的代码成本也高，很容易陷入过度设计，最实在的方式是先不复用，遇到需要复用的时候再重构。经验丰富的老码农能看出哪些代码更容易被复用，提前设计，也是我和老码农的差距。","like_count":0},{"had_liked":false,"id":240421,"user_name":"龙猫","can_delete":false,"product_type":"c1","uid":1112490,"ip_address":"","ucode":"FD726CC969EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","comment_is_top":false,"comment_ctime":1596896916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596896916","product_id":100039001,"comment_content":"在for循环中查询db，这个也算重复，因为可以批量一次性查询，没必要分多次","like_count":0},{"had_liked":false,"id":235798,"user_name":"夜空咏叹调","can_delete":false,"product_type":"c1","uid":1189074,"ip_address":"","ucode":"CC9350BCF218CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d2/a5e272ce.jpg","comment_is_top":false,"comment_ctime":1595205976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595205976","product_id":100039001,"comment_content":"不要过度设计这点很重要，特别是在代码是否需要复用没有明确的情况下，花费大量时间去设计一个可复用的代码成本是很高的。","like_count":0},{"had_liked":false,"id":211338,"user_name":"huanyehappy","can_delete":false,"product_type":"c1","uid":1603969,"ip_address":"","ucode":"0A5372104B7EBE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLiaWKn5ibqO92ic7tzWrXEoZUuduaoRIiaf2icT7E1ia9ViaE2U8Tas9IgFhkpFXicKUHTdqVUPmHauS7XRg/132","comment_is_top":false,"comment_ctime":1587950083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587950083","product_id":100039001,"comment_content":"最后的一个代码执行重复；将email的校验从被调用的函数去掉，统一移到调用之前校验。可是，底层的调用函数本身就应该对参数校验呢；如果不校验那如果其他的调用的地方传参不合理呢；","like_count":0},{"had_liked":false,"id":204297,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1586361000,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1586361000","product_id":100039001,"comment_content":"【设计模式笔记22】20200408<br>今天最有收获的如何写出可复用的代码，我觉得前提你得有这个意识，思考代码怎么会更好复用，不想写出好代码的程序员不是好程序员。具备意识后我们需要寻找工具和方法，那就是减少代码耦合、单一职责、模块化、业务非业务逻辑分离、通用代码下沉等，剩下的就是运用这些方法了。怎么运用呢？我自己有一个办法就是把自己当作刚接手这些代码，以怀疑的态度甚至面前的代码，说白了就是挑刺，往往能发现有很多值得优化的地方，当然可能不是全部优化都值得去做，但是我们可以进一步筛选找到有价值的优化，比如可以按照风险大小排个序，风险系数高的先优化。欢迎叨扰","like_count":0},{"had_liked":false,"id":200743,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1585645132,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585645132","product_id":100039001,"comment_content":"DRY： 不用重复自己的代码。包括，语义重复，逻辑重复，执行重复等。<br><br>","like_count":0},{"had_liked":false,"id":200687,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585638336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585638336","product_id":100039001,"comment_content":"纸上得来终觉浅，觉知此事要躬行<br>","like_count":0},{"had_liked":false,"id":194710,"user_name":"三年过后","can_delete":false,"product_type":"c1","uid":1283157,"ip_address":"","ucode":"5E9106C5F11BED","user_header":"https://static001.geekbang.org/account/avatar/00/13/94/55/afc64956.jpg","comment_is_top":false,"comment_ctime":1585099299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585099299","product_id":100039001,"comment_content":"继承、多态、抽象、封装、层次清晰，下层不能调上层，通过模板化、模块化，业务职责单一，杜绝牵一发而动全身","like_count":0},{"had_liked":false,"id":190967,"user_name":"索旭东","can_delete":false,"product_type":"c1","uid":1139039,"ip_address":"","ucode":"BFD07BCD8C8CAE","user_header":"https://static001.geekbang.org/account/avatar/00/11/61/5f/b279daaf.jpg","comment_is_top":false,"comment_ctime":1584713941,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584713941","product_id":100039001,"comment_content":"实现逻辑重复、功能语义重复、代码执行重复。实现逻辑重复，但功能语义不重复的代码，并不违反 DRY 原则。实现逻辑不重复，但功能语义重复的代码，也算是违反 DRY 原则。除此之外，代码执行重复也算是违反 DRY 原则。","like_count":0},{"had_liked":false,"id":182736,"user_name":"zmysang","can_delete":false,"product_type":"c1","uid":1642663,"ip_address":"","ucode":"8A98057E7819DD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/tjhOILHBAmlx6YiaTZJzqzxn1uyB6XpdvGDIZhBn127TYEcoLLzxRiaKvtVd3HllQqPx7cqf2YmibyBUgGGGJPDkw/132","comment_is_top":false,"comment_ctime":1582857505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582857505","product_id":100039001,"comment_content":"python框架来编写接口时会存在代码重复的情况，但是应该不属于DRY原则。","like_count":0},{"had_liked":false,"id":182416,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1582783786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582783786","product_id":100039001,"comment_content":"关于实现逻辑重复谈一下我自己的看法。Spring AutowiredAnnotationBeanPostProcessor 和 CommonAnnotationBeanPostProcessor 分别处理 @Autowired 和 @Resource 依赖注入时，实现的逻辑都差不多。它们的逻辑虽然重复，但并不违反 DRY 原则，反而有一种重复之美，正如那句老话，好代码千篇一律，烂代码花样百出。<br><br>```text<br>AutowiredAnnotationBeanPostProcessor#postProcessMergedBeanDefinition<br>    -&gt; findAutowiringMetadata<br>        -&gt; buildAutowiringMetadata<br>    -&gt; InjectionMetadata#checkConfigMembers<br>AutowiredAnnotationBeanPostProcessor#postProcessProperties<br>    -&gt; InjectionMetadata#inject<br>        -&gt; AutowiredFieldElement#inject<br>        -&gt; AutowiredMethodElement#inject<br>    <br>CommonAnnotationBeanPostProcessor#postProcessMergedBeanDefinition<br>    -&gt; findResourceMetadata<br>        -&gt; buildResourceMetadata<br>    -&gt; InjectionMetadata#checkConfigMembers<br>CommonAnnotationBeanPostProcessor#postProcessPropertyValues<br>    -&gt; InjectionMetadata#inject<br>        -&gt; ResourceElement#inject<br>        -&gt; WebServiceRefElement#inject<br>        -&gt; EjbRefElement#inject<br>```","like_count":0},{"had_liked":false,"id":181680,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582615443,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582615443","product_id":100039001,"comment_content":"老师已经在上面将DRY原则说的很透彻了,至于还有什么其他类型的代码重复,那我尝试使用单一职责原则来说明,如果一个类的属性和其他类中的属性有所重复,那么建议就是将这两个类中的相同属性进","like_count":0},{"had_liked":false,"id":181239,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1582524071,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582524071","product_id":100039001,"comment_content":"代码可复用性是一种对理论和经验要求都比较高的编程境界<br><br>我的工作反思：<br>1、我目前的项目模块划分还算清楚，但公开的接口是在 Service 层的。应该建立一个新的层次，让业务所在的 Service 类 和 对外公开接口的服务类，区分开来。应该划分 Business 层用于业务，而 Service 层用于公开接口。这是我的错误决定。<br><br>2、通用组件的代码下层或独立，是从编程规范上对代码可复用性提供条件。大家只要按照规范去编写，就会发现代码基本具备可复用的特点了。这是我应该尽快确立的。","like_count":0},{"had_liked":false,"id":176961,"user_name":"三尺寒冰","can_delete":false,"product_type":"c1","uid":1027586,"ip_address":"","ucode":"B10C7C9F955DF5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/02/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1581237237,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1581237237","product_id":100039001,"comment_content":"在开发新项目时，需要建新表，然后每次都需要在工程里，对新加的Repository增加add、select、update方法，逻辑大都差不多，这个感觉也是一个重复，有什么好的方法可以解决这类重复吗？","like_count":0,"discussions":[{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336841,"discussion_content":"可以自动生成这部分代码呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608714166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174517,"user_name":"燃着的半支烟","can_delete":false,"product_type":"c1","uid":1230837,"ip_address":"","ucode":"23C7B588F400A7","user_header":"https://static001.geekbang.org/account/avatar/00/12/c7/f5/4e9a82e9.jpg","comment_is_top":false,"comment_ctime":1580263898,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1580263898","product_id":100039001,"comment_content":"老师，咨询一个场景问题。<br>问题描述：我经常在写代码的时候碰到这样的场景，在service类有多个方法，做同样的状态校验，然后我就把状态校验抽取成了一个公共方法放在本service类里，但是后来发现其他的service类也有这样的校验，我就想把这个校验方法抽出去，但是又觉得这个代码无处安放。。。<br>困惑：1、如果在这些service类之外，独立一个类出来的话，又不知道如何命名这个类，也不知道这个类应该放在哪个包里？<br>2、还是说把这个校验方法放到对应的业务bo或者domain里呢？<br><br>这种场景老师建议如何处理呢？  ","like_count":0,"discussions":[{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336843,"discussion_content":"如果验证不涉及到数据库的话可以新建一个工具类或者domain里面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608714317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171934,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1579055292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579055292","product_id":100039001,"comment_content":"2. 给我印象深刻的一点：『实现逻辑重复，但功能语义不重复的代码，并不违反 DRY 原则』。主要考虑的是如果将这些代码合并后，在将来如果各自的业务逻辑修改时，代码不够灵活<br>3. 在写代码的过程中不要刻意地去做代码的复用性设计，当遇到代码复用的问题时再进行代码复用性的设计","like_count":0},{"had_liked":false,"id":169729,"user_name":"evalcony","can_delete":false,"product_type":"c1","uid":1401098,"ip_address":"","ucode":"D8CE3E832A7A10","user_header":"https://static001.geekbang.org/account/avatar/00/15/61/0a/1e98cc81.jpg","comment_is_top":false,"comment_ctime":1578418638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578418638","product_id":100039001,"comment_content":"DRY，我的理解是，让代码在哪个角度（维度）上进行解耦&#47;独立&#47;正交。<br>使代码“积木化”。","like_count":0},{"had_liked":false,"id":169205,"user_name":"柴柴777","can_delete":false,"product_type":"c1","uid":1032484,"ip_address":"","ucode":"5208B935ECB6F7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/24/0ea08c9e.jpg","comment_is_top":false,"comment_ctime":1578293178,"is_pvip":false,"replies":[{"id":"65742","content":"有点重复是问题不大的，开发软件本身就没有绝对的对与错，也不是非黑即白，怎么合适怎么来，怎么舒服怎么来，不行就再重构。","user_name":"作者回复","comment_id":169205,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379617,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1578293178","product_id":100039001,"comment_content":"我 之前就有个问题就说 我们如果用了组件化 每个模块算是单独的  尽管可能会写一个单独的util模块但是 还是存在着 重复代码,但是这些重复代码不在一个module里,那这样的到底算不算重复呢,,这些简单的部分的少量的重复不值得去单独加一个module","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480454,"discussion_content":"有点重复是问题不大的，开发软件本身就没有绝对的对与错，也不是非黑即白，怎么合适怎么来，怎么舒服怎么来，不行就再重构。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":168857,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1578202213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578202213","product_id":100039001,"comment_content":"打卡<br>一般代码重复的几种情况:<br>1、实现逻辑重复，但是语义不重复，这是不违背DRY原则的。可以把单点功能分离为颗粒更小的粒度，进行复用。<br>2、逻辑语义重复，函数命名有一定差异，代码实现逻辑不一样，但是功能一样。要保留一个功能模块，项目中使用同一个功能模块，便于后续修改或维护。<br>3、代码执行重复，重复的有效性检验，数据库访问等，在一个项目中，需要进行整体梳理，去除这种重复。<br><br>复用:开发者或调用者的角度，在写代码时要尽量复用以前的代码。<br>复用性:指在开发中尽可能让代码能够复用。<br>DRY原则:编程指导原则，不写&quot;重复&quot;的代码<br>提高代码复用性的方法:<br>1、减少代码耦合<br>2、满足单一职业原则<br>3、模块化<br>4、业务与非业务代码分离<br>5、通用代码下沉，底层代码更容易复用，另外只允许上层代码调用下层代码以及通层代码之间的调用，禁止下层代码调用上层代码。<br>6、利用继承、多态、抽象、封装<br>7、利用模板等设计原则","like_count":0},{"had_liked":false,"id":168156,"user_name":"Miaozhe","can_delete":false,"product_type":"c1","uid":1113660,"ip_address":"","ucode":"62872E8C138B67","user_header":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","comment_is_top":false,"comment_ctime":1578022135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578022135","product_id":100039001,"comment_content":"合成复用原则跟Dry原则是什么关系？","like_count":0},{"had_liked":false,"id":168115,"user_name":"Geek_323c91","can_delete":false,"product_type":"c1","uid":1732683,"ip_address":"","ucode":"AE946A94605456","user_header":"","comment_is_top":false,"comment_ctime":1578015434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578015434","product_id":100039001,"comment_content":"我个人理解getUserByEmail checkIfUserExisted 的校验逻辑是应该存在的，因为这2个方法可能不止这一个地方调用，方法保证自身逻辑正常执行的校验是应该的。调用方就不用重复定义这些校验,比如getUserByEmail  调用方传入的email不合法就不查db  因为db的email肯定是合法的","like_count":0},{"had_liked":false,"id":165961,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1577351769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577351769","product_id":100039001,"comment_content":"这一个月一直工作都很忙感觉落下好多课程 还好感觉争哥讲的自己工作经历过 所以能很快理解和赶上","like_count":0},{"had_liked":false,"id":165530,"user_name":"Viola","can_delete":false,"product_type":"c1","uid":1528096,"ip_address":"","ucode":"CF8FF5323AE43A","user_header":"","comment_is_top":false,"comment_ctime":1577254322,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1577254322","product_id":100039001,"comment_content":"正好看到这一节，工作中有个问题想请教一下老师，有两个类X和Y，很多属性都是相同的，例如都有金额a、金额b、金额c等等，有一个函数，需要校验X的几个属性是否正确，即validateX(X x)，用到x.geta,x.getb,x.getc等等，现在Y也有相同需求，把这个函数copy一份，变成validateY(Y y)，用到y.geta,y.getb,y.getc算违反DRY原则吗？个人理解和第一个例子里的校验用户名和密码类似，这是两个逻辑不同的类。还请老师指正，谢谢！<br>另外，有考虑过把每一个属性都传进去，这样入参就变成相同的类型（例如金额）而不是不同的类型（X或Y），调用时传入x.geta或y.geta即可使用一个函数来解决，但由于相同参数非常多，这个函数的入参可能会变成好几十个，现有的调用处也全都要从X改成x.geta,x.getb,x.getc。感觉这种改法得不偿失，增加出bug的概率。","like_count":0,"discussions":[{"author":{"id":1013503,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/ff/d6711136.jpg","nickname":"qinshaoq","note":"","ucode":"94759B235BC51A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":139052,"discussion_content":"X和Y继承自同一个基类，子类中实现validate函数，调用的时候传个基类指针，这样是否可行？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579272049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165367,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1577230619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577230619","product_id":100039001,"comment_content":"代码、语义，执行三者重复，一个比一个更贴近业务；个人觉得不要过小优化。可以通过上线后的调用分析出哪些代码或功能被调用得最多。针对性地进行重复优化","like_count":0},{"had_liked":false,"id":165366,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1577230467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577230467","product_id":100039001,"comment_content":"Rule of Three： 1加2等于三","like_count":0},{"had_liked":false,"id":165009,"user_name":"CDz","can_delete":false,"product_type":"c1","uid":1114779,"ip_address":"","ucode":"A23BEE1C4A5922","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/9b/b1a3c60d.jpg","comment_is_top":false,"comment_ctime":1577147439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577147439","product_id":100039001,"comment_content":"* DRY——don’t repeat yourself(不要重复自己）<br>* 重复有几种<br>    * 逻辑重复（代码逻辑）<br>    * 语义重复（不同的方法名，意思相同，实现上有所不同，但目的相同）<br>    * 执行重复（同一个业务中，重复执行一段代码，一般是校验上的代码）<br>* 以上三种重复，第一种有时候不算违反DRY，但是看起来最像是违反DRY。后面两种需要在代码中尽量避免<br>* DRY与代码的可复用性是两回事<br>* 提高代码复用性（概念，没有深入理解）<br>    * 减少代码耦合<br>    * 满足单一职责原则<br>    * 模块化<br>    * 业务与非业务逻辑分离<br>    * 通用代码下沉（如何下沉，什么东西下沉？）<br>    * 继承、多态、抽象、封装<br>    * 应用模板等设计模式<br>* Rule of three——如果一个需求没有明确需要复用性，并且未来复用性可能性并不高，写出复用性代码成本比较高，就不需要管复用性。等到下次写重复逻辑时，再进行重构。<br>* DRY不是只代码重复，而是“知识”的重复，意思是指业务逻辑。例如由于沟通不足，两个程序员用两种不同的方法实现同样功能的校验。<br>DRY is about the duplication of knowledge, of intent. It’s about expressing the same thing in two different places, possibly in two totally different ways.","like_count":0},{"had_liked":false,"id":164988,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1577138334,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577138334","product_id":100039001,"comment_content":"同一个类型的业务功能（例如部署管理），在同一个系统里有三个版本，而且后面两个都属于建设一半的情况，这属于违背DRY原则。<br><br>如果在做第一个版本的时候尽量做好设计，并在需求不满足的情况下及时重构，应该可以避免这种情况","like_count":0},{"had_liked":false,"id":164538,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1577023188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577023188","product_id":100039001,"comment_content":"关键点在于语义不重复，即使里面的执行逻辑重复，也并不违反DRY原则，而是SRP的体现。单一职责不仅体现在模块级，还体现在类级别，甚至函数级别，而很多人就错误的认为可复用就是没有重复的代码执行逻辑。细粒度的DRY指函数功能不重复，宏观的DRY指层与层之间职责不重复。","like_count":0},{"had_liked":false,"id":164495,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1577011006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577011006","product_id":100039001,"comment_content":"字段冗余设计","like_count":0},{"had_liked":false,"id":164341,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1576939917,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576939917","product_id":100039001,"comment_content":"课堂讨论：<br>除了实现逻辑重复、功能语义重复、代码执行重复，你还知道有哪些其他类型的代码重复？这些代码重复是否违反 DRY 原则？<br><br>Answer：<br>在实际项目开发中，多个模块的多个Constants可能包含相同的字段：例如低层模块定义了按钮点击间隔1000ms， 业务模块也定义了同样的字段。这种情形是违反DRY原则的，虽然对于代码的影响较小，还是应该定期code review时关注下这类问题。<br><br>Answer：<br>","like_count":0},{"had_liked":false,"id":164324,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1576936691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576936691","product_id":100039001,"comment_content":"注释和model 违反了 DRY 原则 注释写重复了, 或者 逻辑改了, 注释没改, model 则是 属性命名多余等等","like_count":0},{"had_liked":false,"id":164318,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1576935393,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576935393","product_id":100039001,"comment_content":"之前只是觉得DRY就仅仅是代码上的重复，现在终于厘清了。还有语义，功能和执行上的重复。<br>我们团队约定在写代码的时候，每层都需要检验参数，为了防止NPE和别人调用时出错，就会造成很多重复的校验，但是由于每层的职责不一样，很多校验也算不上完全重复，不知道这个算不算的上是代码执行重复。<br>","like_count":0,"discussions":[{"author":{"id":1734795,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/78/8b/421cb2c4.jpg","nickname":"成活","note":"","ucode":"F8840EE4DC3969","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212786,"discussion_content":"为了保险两个字有太多的重复校验了/笑哭","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585015485,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164307,"user_name":"小建","can_delete":false,"product_type":"c1","uid":1647247,"ip_address":"","ucode":"C9781DF8F79112","user_header":"https://static001.geekbang.org/account/avatar/00/19/22/8f/22e9c74b.jpg","comment_is_top":false,"comment_ctime":1576932876,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576932876","product_id":100039001,"comment_content":"dry 、 rule of three. get ","like_count":0},{"had_liked":false,"id":164296,"user_name":"小刀","can_delete":false,"product_type":"c1","uid":1351063,"ip_address":"","ucode":"94DF8C45E09E42","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaByN5IfYbE9jMtWrtTDXtPEIHeV77KW1p7ZkiasiaGgA50VXaibo4fbp5ib2JkFP3iaIe4AUudLibufkEIofu5euCNHg/132","comment_is_top":false,"comment_ctime":1576927408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576927408","product_id":100039001,"comment_content":"复用<br>可复用性<br>易复用性<br>DRY不要去重复","like_count":0},{"had_liked":false,"id":164188,"user_name":"_xcc","can_delete":false,"product_type":"c1","uid":1298398,"ip_address":"","ucode":"8EB4B735D36E81","user_header":"https://static001.geekbang.org/account/avatar/00/13/cf/de/85555a93.jpg","comment_is_top":false,"comment_ctime":1576905496,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576905496","product_id":100039001,"comment_content":"校验IP合法性的代码我收藏了，感谢","like_count":0},{"had_liked":false,"id":164088,"user_name":"小猴子吹泡泡","can_delete":false,"product_type":"c1","uid":1122941,"ip_address":"","ucode":"A5F214E388E41F","user_header":"https://static001.geekbang.org/account/avatar/00/11/22/7d/b093ca1e.jpg","comment_is_top":false,"comment_ctime":1576858552,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1576858552","product_id":100039001,"comment_content":"老师，我有一个关于DAO层代码复用的疑问，例如，在User类里有name、email、code等字段，现在我有两个方法分别会通过code去查询name和email，我是在DAO层写两个方法（getNameByCode()、getEmailByCode()）好呢还是写一个getUserByCode()，然后通过getter方法去获取name和email好？我个人一直觉得是写两个方法好，因为可以减少数据库没必要的查询，节省时间，但是这样可能导致在DAO层写的接口和SQL偏多，望老师指点迷津，谢谢！","like_count":0},{"had_liked":false,"id":164051,"user_name":"阿冰777","can_delete":false,"product_type":"c1","uid":1373893,"ip_address":"","ucode":"F365EB44F971F3","user_header":"https://static001.geekbang.org/account/avatar/00/14/f6/c5/6329ddcc.jpg","comment_is_top":false,"comment_ctime":1576850738,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576850738","product_id":100039001,"comment_content":"今天学React Hooks ， 发现他解决了一种重复，就是你的代码需要写在多个生命周期的时候，hooks把它提炼了出来。展开来讲，我觉得应该是解决了注册事件的重复，如果我要在框架里加一个新功能，需要在各个地方添加一些重复的代码来注册，那么这也是一种重复，这种重复更抽象，更不易被察觉，但是你一但少加了一个地方，就容易产生bug。","like_count":0,"discussions":[{"author":{"id":1113744,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/90/19ef108d.jpg","nickname":"techwro","note":"","ucode":"7AF2B319F0AE1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305558,"discussion_content":"老哥，这是我写的 https://github.com/LeChauvet/bracketAlert ，可以交流下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599999368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1015205,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/a5/930c9103.jpg","nickname":"Feng","note":"","ucode":"42DB60B7BF69D0","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":1113744,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/90/19ef108d.jpg","nickname":"techwro","note":"","ucode":"7AF2B319F0AE1B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324910,"discussion_content":"String rule = &#34;(key1 > 200 || key3 < 130) || key3 < 100 || key4 == 98&#34;;报错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605189406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305558,"ip_address":""},"score":324910,"extra":""}]},{"author":{"id":1114093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/ed/b2fc0e7c.jpg","nickname":"7","note":"","ucode":"10A6E57A027D42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331598,"discussion_content":"public class BracketsRuleInterpreter implements Expression {\n    private String ruleExpression;\n\n    public BracketsRuleInterpreter(String ruleExpression) {\n        // 先把空格去掉\n        this.ruleExpression = ruleExpression.replace(&#34; &#34;, &#34;&#34;);\n    }\n\n    @Override\n    public boolean interpret(Map<String, String> stats) {\n// 我是这样来理解和实现带括号的，当然那个&amp;&amp;的要加入一个新的类型，true或false的处理\n        // k1 > 100 &amp;&amp; ( ( k5 > 50 &amp;&amp; ( k2 < 50 || k3 == 100 ) ) &amp;&amp; k6 == 100 ) &amp;&amp; k4 > 50\n        // k1 > 100 &amp;&amp; ( ( k5 > 50 &amp;&amp; boolean ) &amp;&amp; k6 == 100 ) &amp;&amp; k4 > 50\n        // k1 > 100 &amp;&amp; ( boolean &amp;&amp; k6 == 100 ) &amp;&amp; k4 > 50\n        // k1 > 100 &amp;&amp; boolean &amp;&amp; k4 > 50\n        // boolean\n        Stack<Integer> stack = new Stack<>();\n        int i = 0;\n        for (char c : ruleExpression.toCharArray()) {\n            if (c == &#39;(&#39;) {\n                stack.push(i);\n            } else if (c == &#39;)&#39;) {\n                Integer start = stack.pop();\n                if (start == null) {\n                    // 没有首(\n                    throw new RuntimeException(&#34;表达式不正确&#34;);\n                }\n                boolean interpret = new OrRule(ruleExpression.substring(start + 1, i)).interpret(stats);\n                // 把表达式替换为该括号中的结果\n                ruleExpression = new StringBuilder()\n                        .append(ruleExpression, 0, start)\n                        .append(interpret)\n                        .append(ruleExpression.substring(i + 1)).toString();\n                break;\n            }\n            i++;\n            // 只有首( ,没有尾部 )\n            if (i == ruleExpression.length()) {\n                throw new RuntimeException(&#34;表达式不正确&#34;);\n            }\n        }\n\n        if (ruleExpression.contains(&#34;(&#34;)) {\n            // 递归的拆解括号\n            return interpret(stats);\n        } else {\n            return new OrRule(r","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606910899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164046,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1576849953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576849953","product_id":100039001,"comment_content":"在类A中定义了一个语义上与类B已存在的常量算不算的上违反DRY原则。我自己理解类A中用的尽量在自己类中定义，不要抽取，除非类A与类B有交集，才抽取。否则不要抽取。","like_count":0},{"had_liked":false,"id":163946,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1359701,"ip_address":"","ucode":"124953423491E2","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","comment_is_top":false,"comment_ctime":1576832712,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576832712","product_id":100039001,"comment_content":"从服务提供者的角度看，提供者不收敛也违反了DRY。<br>举例，userService和userManager都提供了getUser方法，无论这两个getUser的签名多么不一样，都违反DRY。因为在service层有了两个user服务提供者，这样对于userService的上层调用者来说会困惑，而且调用链路很长且日志相似的话，很难不靠debug来追踪问题","like_count":0},{"had_liked":false,"id":163895,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1576821080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576821080","product_id":100039001,"comment_content":"打卡~<br>Don&#39;t repeat yourself.<br>逻辑重复、功能语义重复、代码执行重复","like_count":0},{"had_liked":false,"id":163892,"user_name":"我来也","can_delete":false,"product_type":"c1","uid":1205253,"ip_address":"","ucode":"773D6104F56767","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","comment_is_top":false,"comment_ctime":1576820227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576820227","product_id":100039001,"comment_content":"对于老师说的&lt;代码执行重复&gt;下面的&lt;查询数据库&gt;重复,我有话要说.<br><br>在大部分的场景下,这种方法确实可以减少数据库的I&#47;O.<br>但是,如果在对安全性要求较高时,可能会选择牺牲一些这方面的性能了.<br><br>避免出现像CPU的旁路攻击,把不该取的信息给取出来了,有泄漏的风险.<br>","like_count":0},{"had_liked":false,"id":163888,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1576819182,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576819182","product_id":100039001,"comment_content":"同一个项目，多个人维护，如果内部没有沟通好，会经常会出现重复性的无用功，就像老师文中说的检测IP地址合法性这个，所以，需要一些好的经验来命名模块、类、函数等，尽量做到知名知意。<br><br>代码经验也是避免重复路径之一，这也是为什么这么多人需要提升模块设计吧。","like_count":0},{"had_liked":false,"id":163881,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1576817937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576817937","product_id":100039001,"comment_content":"关于本章，提个问题：<br><br>1.函数名  检验用户名或密码。这样违反单一职责，因为语义上做了两件事。但如果函数名定义为  检验注册入参，那么对“用户名”和“密码”的检验都属于入参检验，是否就满足单一职责了。我一直认为是满足的，望栏主给个定论或者看法。<br><br>关于本章，给个补充：<br><br>1.除了可复用性，其实还可以加一个易复用性。<br><br>2.可复用性讲究的是抽象接口对多个场景兼容的能力，而易复用性讲究的是对特定一类场景，在使用该接口时的成本要低，意思要明确（可以认为是接口隔离的一种体现）。<br><br>3.可复用性追求的最终目标是平台化。易复用性则是中台化。<br><br><br>以上非官方论述，仅个人的认知定义，望栏主给予一些自己的看法。谢谢。","like_count":0},{"had_liked":false,"id":163868,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1576814963,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576814963","product_id":100039001,"comment_content":"理解思想和原则比直奔模式更重要，知其然，知其所以然！<br>业务上的重复！","like_count":0},{"had_liked":false,"id":163863,"user_name":"台风骆骆","can_delete":false,"product_type":"c1","uid":1170748,"ip_address":"","ucode":"891D3599644ABD","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/3c/a595eb2a.jpg","comment_is_top":false,"comment_ctime":1576812928,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576812928","product_id":100039001,"comment_content":"脱离出代码，从系统设计来看，技术与业务分离也是一种符合DRY原则的做法，即把一些与业务无关的脱离出来形成一个框架，而不是每来一种业务就再写一个相应的逻辑出来，如mapreduce框架&#47;storm框架这些。","like_count":0},{"had_liked":false,"id":163853,"user_name":"mike","can_delete":false,"product_type":"c1","uid":1326662,"ip_address":"","ucode":"AB330E7B88EF1C","user_header":"https://static001.geekbang.org/account/avatar/00/14/3e/46/0b888d5a.jpg","comment_is_top":false,"comment_ctime":1576811876,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1576811876","product_id":100039001,"comment_content":"大佬，感觉更新好慢啊，真正讲到具体的设计模式还得要1个月呢。。。","like_count":0,"discussions":[{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91398,"discussion_content":"这个时间是用来给你练习的。多写几个例子代码，慢慢感悟，比囫囵吞枣好。其实学到越多模式，越是感觉这些原则更重要，因为这些模式都是原则衍生出来的。透彻理解了原则，可以产生自己的模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576831902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91267,"discussion_content":"每周更新3讲,1个月12讲,100讲,足足9个月时间啊,跨度好大了.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576823433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163848,"user_name":"马哲富","can_delete":false,"product_type":"c1","uid":1107917,"ip_address":"","ucode":"D6BDDFE3CC07ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/cd/08088f14.jpg","comment_is_top":false,"comment_ctime":1576810956,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576810956","product_id":100039001,"comment_content":"    重复可以从三个方面去理解：代码逻辑重复，功能语义重复，代码执行重复；其中代码逻辑重复，但是功能语义不重复并不违反DRY原则；代码逻辑不重复，但是功能语义重复，违反了DRY原则；执行代码重复违反DRY原则。<br>    提高代码可复用性的七个方法：<br>    1、减少代码耦合；<br>    2、满足单一职责原则；<br>    3、模块化，从代码层面来讲包括方法、类，其中需要运用抽象思维，和单一职责原则；<br>    4、业务代码和业务代码分离，业务代码一般不通用，非业务代码通用些；<br>    5、通用代码下沉，上层代码可以调用下层代码，下层代码不调用上层代码；<br>    6、合理运用面向对象语言特性：继承、多态、抽象、封装；其中抽象能力很重要;<br>    7、合理运用各种设计模式，例如模板模式","like_count":0},{"had_liked":false,"id":163822,"user_name":"堵车","can_delete":false,"product_type":"c1","uid":1145404,"ip_address":"","ucode":"7BC1E50A4F8D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","comment_is_top":false,"comment_ctime":1576807869,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"1576807869","product_id":100039001,"comment_content":"写业务的时候，经常会有get&#47;set的赋值操作。把一个对象的值部分&#47;全部拷贝给另一个对象，对象的字段有些异样，有些不一样。这种代码怎么写比较优雅？如果是A对象值拷贝给B对象，这种get&#47;set操作归属于A域还是B域啊？","like_count":0,"discussions":[{"author":{"id":1000237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","nickname":"enjoylearning","note":"","ucode":"DCAF8538DEA277","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":95434,"discussion_content":"用一些mapping框架吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577022569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91401,"discussion_content":"是指的VO转换吗？aVO.setXX（bVO.getXX），各自管各自的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576832107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1145404,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","nickname":"堵车","note":"","ucode":"7BC1E50A4F8D3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":92999,"discussion_content":"不单单是vo转换。一条交易订单要赋值给账户对象，将账户对象传到dao做账户变动操作。账户的参数再赋值给账单对象，保存账单。这里面有两个赋值操作，这两个赋值操作应该抽出，作为两个赋值方法。订单参数赋值给账户这个赋值方法应该数据订单域还是账户域？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576898613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":91401,"ip_address":""},"score":92999,"extra":""},{"author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1145404,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","nickname":"堵车","note":"","ucode":"7BC1E50A4F8D3D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102436,"discussion_content":"getter，setter在两个域对象上都要有，因为需要双向赋值。赋值的过程可以包装成converter，这个converter不属于任何一个域","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577346184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":92999,"ip_address":""},"score":102436,"extra":""},{"author":{"id":1145404,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/3c/87e015f8.jpg","nickname":"堵车","note":"","ucode":"7BC1E50A4F8D3D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1359701,"avatar":"https://static001.geekbang.org/account/avatar/00/14/bf/55/198c6104.jpg","nickname":"小伟","note":"","ucode":"124953423491E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104429,"discussion_content":"这个cover不属于这两个域属于谁？无家可归忒可怜","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577433540,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":102436,"ip_address":""},"score":104429,"extra":""}]}]},{"had_liked":false,"id":163802,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1576804750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576804750","product_id":100039001,"comment_content":"dry相对来讲应该是最简单的一种原则，但是真正做到的却很少。尤其是一开始想着后期重构，结果发现越写越乱，难以维护。","like_count":0},{"had_liked":false,"id":163798,"user_name":"小畅","can_delete":false,"product_type":"c1","uid":1322880,"ip_address":"","ucode":"D031CC07CD564E","user_header":"","comment_is_top":false,"comment_ctime":1576804529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576804529","product_id":100039001,"comment_content":"设计每个模块、类、函数，都要想设计外部api一样去思考。嗯","like_count":0},{"had_liked":false,"id":163793,"user_name":"FIGNT","can_delete":false,"product_type":"c1","uid":1540988,"ip_address":"","ucode":"D9DB185AE9E67C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKZ16iaIia0029oI1Qh5NicibpbTiaBAaCOPYXoLplKHr6uQ2rSVxPZanBvpMcL2NuhwKQYCFnaHP5tedQ/132","comment_is_top":false,"comment_ctime":1576803858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576803858","product_id":100039001,"comment_content":"类似的项目，不同的第三方搞一套系统，大部分业务类似，只是个性化的需求不同。这样看也违背了DRY","like_count":0},{"had_liked":false,"id":163789,"user_name":"欠债太多","can_delete":false,"product_type":"c1","uid":1099238,"ip_address":"","ucode":"B0CC91FA6F3981","user_header":"https://static001.geekbang.org/account/avatar/00/10/c5/e6/50c5b805.jpg","comment_is_top":false,"comment_ctime":1576803371,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576803371","product_id":100039001,"comment_content":"首先，“不重复”并不代表“可复用”。在一个项目代码中，可能不存在任何重复的代码，但也并不表示里面有可复用的代码，不重复和可复用完全是两个概念。所以，从这个角度来说，DRY 原则跟代码的可复用性讲的是两回事。<br>这段里面“单并不表示里面有可复用代码”是不是描述不对，应该是“单并不表示里面没有可复用的代码”","like_count":0},{"had_liked":false,"id":163785,"user_name":"再见孙悟空","can_delete":false,"product_type":"c1","uid":1025518,"ip_address":"","ucode":"57E12A2F9CD915","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","comment_is_top":false,"comment_ctime":1576803163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576803163","product_id":100039001,"comment_content":"之前我们 service 层会调用 dao ，manager 也会调用 dao ，这样的话，就会重复加上很多校验逻辑，比如 list in 查询，service 层和 manager 层去调用需要加上非空校验，逻辑重复了，并且还会因为忘记校验而出异常。后来统一规定 dao 层只暴露给 manager，所有关于数据库的操作都只能 manager 调用，解决了以上问题。这应该也是 DRY 的一种吧","like_count":0},{"had_liked":false,"id":163780,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1576802754,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576802754","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":163770,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1576801450,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576801450","product_id":100039001,"comment_content":"往大了说的话，系统的重复建设也违反了DRY,需要抽象出更加通用和底层的系统，供高层的系统使用","like_count":0,"discussions":[{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":90904,"discussion_content":"所以就有了中台，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576802654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163768,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1576801422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576801422","product_id":100039001,"comment_content":"突然想起来前几天，有几个类都调用一个函数，都每个类里扔了一个，我有点惭愧啊。","like_count":0},{"had_liked":false,"id":163761,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1576801017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576801017","product_id":100039001,"comment_content":"除了实现逻辑重复、功能语义重复、代码执行重复，你还知道有哪些其他类型的代码重复？<br>编译后的代码重复.<br>这些代码重复是否违反 DRY 原则？<br>没有违反了DRY原则.<br>先明确个前提王争老师这里讲到的重复的代码是针对人来说的,而编译后的字节码是给机器读的不是给人读的,受众的对象不同.编译后的重复字节码代码是为了支持各种场景语义的执行逻辑.例如java中try-catch-finally中,finally的代码块编译后会被复制多份,使得各种出口的语义场景都可以执行finally的代码块,如果修改成了一份,jvm就可能会不认识,在类加载链接的环节就通不过字节码的校验.","like_count":0},{"had_liked":false,"id":163758,"user_name":"阿玛铭","can_delete":false,"product_type":"c1","uid":1100703,"ip_address":"","ucode":"DBF948D82ACBE3","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/9f/ee68858c.jpg","comment_is_top":false,"comment_ctime":1576800461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576800461","product_id":100039001,"comment_content":"总结：DRY这个原则可以从单元测试的角度看。1.功能编排要求尽量少单元测试用例来覆盖。2. 函数重写保持单元测试不调用相同模块，即完成某一功能，需要同样多单元测试用例时，单元测试客户端尽量调用不同方法。3. DRY原则主要用于软件工件的可复用性，重构时期还要具体分析逻辑重复、语义重复、运行重复 <br>答题：好像老师讲的都覆盖到了，没想到其它代码复用，坐等其它同学上。思路：可以针对软件开发生命周期里边每个阶段，选择最终成本最低的问题解决方案。","like_count":0},{"had_liked":false,"id":163757,"user_name":"progyoung","can_delete":false,"product_type":"c1","uid":1014692,"ip_address":"","ucode":"0B4898AE78F9F5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/a4/24955994.jpg","comment_is_top":false,"comment_ctime":1576800426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576800426","product_id":100039001,"comment_content":"逻辑重复，语义不重复，不算违背DRY，get it.","like_count":0},{"had_liked":false,"id":163753,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1576799840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576799840","product_id":100039001,"comment_content":"不知道java中的泛型使用，算不算避免返回重复，比如这个要返回string，另一个要返回integer，实现逻辑一样，返回object又降低可读性，外部调用的人都不知道这个object是什么类型，使用泛型就舒服多了，外部调用的人肯定知道这是什么类型的，可读性也加强了","like_count":0}]}