{"id":212394,"title":"16 | InfluxDB企业版一致性实现剖析：他山之石，可以攻玉","content":"<p>你好，我是韩健。</p><p>学习了前面15讲的内容后，我们了解了很多常用的理论和算法（比如CAP定理、Raft算法等）。是不是理解了这些内容，就能够游刃有余地处理实际系统的问题了呢？</p><p>在我看来，还远远不够，因为理论和实践的中间是存在鸿沟的，比如，你可能有这样的感受，提到编程语言的语法或者分布式算法的论文，你说起来头头是道，但遇到实际系统时，还是无法写程序，开发分布式系统。</p><p>而我常说，实战是学习的最终目的。为了帮你更好地掌握前面的理论和算法，接下来，我用5讲的时间，分别以InfluxDB企业版一致性实现、Hashicorp Raft、KV系统开发实战为例，带你了解如何在实战中使用技术，掌握分布式的实战能力。</p><p>今天这一讲，我就以InfluxDB企业版为例，带你看一看系统是如何实现一致性的。有的同学可能会问了：为什么是InfluxDB企业版呢？因为它是排名第一的时序数据库，相比其他分布式系统（比如KV存储），时序数据库更加复杂，因为我们要分别设计2个完全不一样的一致性模型。当你理解了这样一个复杂的系统实现后，就能更加得心应手地处理简单系统的问题了。</p><p>那么为了帮你达到这个目的。我会先介绍一下时序数据库的背景知识，因为技术是用来解决实际场景的问题的，正如我之前常说的“要根据场景特点，权衡折中来设计系统”。所以当你了解了这些背景知识后，就能更好的理解为什么要这么设计了。</p><!-- [[[read_end]]] --><h2>什么是时序数据库？</h2><p>你可以这么理解，时序数据库，就是存储时序数据的数据库，就像MySQL是存储关系型数据的数据库。而时序数据，就是按照时间顺序记录系统、设备状态变化的数据，比如CPU利用率、某一时间的环境温度等，就像下面的样子：</p><pre><code>&gt; insert cpu_usage,host=server01,location=cn-sz user=23.0,system=57.0\n&gt; select * from cpu_usage\nname: cpu_usage\ntime                host     location system user\n----                ----     -------- ------ ----\n1557834774258860710 server01 cn-sz    55     25\n&gt;\n</code></pre><p>在我看来，时序数据最大的特点是数据量很大，可以不夸张地说是海量。时序数据主要来自监控（监控被称为业务之眼），而且在不影响业务运行的前提下，监控埋点是越多越好，这样才能及时发现问题、复盘故障。</p><p><strong>那么作为时序数据库，InfluxDB企业版的架构是什么样子呢？</strong></p><p>你可能已经了解过，它是由META节点和DATA节点2个逻辑单元组成的，而且这两个节点是2个单独的程序。那你也许会问了，为什么不能合成到一个程序呢？答案是场景不同。</p><ul>\n<li>META节点存放的是系统运行的关键元信息，比如数据库（Database）、表（Measurement）、保留策略（Retention policy）等。它的特点是一致性敏感，但读写访问量不高，需要一定的容错能力。</li>\n<li>DATA节点存放的是具体的时序数据。它有这样几个特点：最终一致性、面向业务、性能越高越好，除了容错，还需要实现水平扩展，扩展集群的读写性能。</li>\n</ul><p>我想说的是，对于META节点来说，节点数的多少代表的是容错能力，一般3个节点就可以了，因为从实际系统运行观察看，能容忍一个节点故障就可以了。但对DATA节点而言，节点数的多少则代表了读写性能，一般而言，在一定数量以内（比如10个节点）越多越好，因为节点数越多，读写性能也越高，但节点数量太多也不行，因为查询时就会出现访问节点数过多而延迟大的问题。</p><p>所以，基于不同场景特点的考虑，2个单独程序更合适。如果META节点和DATA节点合并为一个程序，因读写性能需要，设计了一个10节点的DATA节点集群，这就意味着META节点集群（Raft集群）也是10个节点。在学了Raft算法之后，你应该知道，这时就会出现消息数多、日志提交慢的问题，肯定不行了。（对Raft日志复制不了解的同学，可以回顾一下<a href=\"https://time.geekbang.org/column/article/205784\">08讲</a>）</p><p>现在你了解时序数据库，以及InfluxDB企业版的META节点和DATA节点了吧？那么怎么实现META节点和DATA节点的一致性呢？</p><h2>如何实现META节点一致性？</h2><p>你可以这样想象一下，META节点存放的是系统运行的关键元信息，那么当写操作发生后，就要立即读取到最新的数据。比如，创建了数据库“telegraf”，如果有的DATA节点不能读取到这个最新信息，那就会导致相关的时序数据写失败，肯定不行。</p><p>所以，META节点需要强一致性，实现CAP中的CP模型（对CAP理论不熟悉的同学，可以先回顾下<a href=\"https://time.geekbang.org/column/article/195675\">02讲</a>）。</p><p>那么，InfluxDB企业版是如何实现的呢？</p><p>因为InflxuDB企业版是闭源的商业软件，通过<a href=\"https://docs.influxdata.com/enterprise_influxdb/v1.7/concepts/clustering/#architectural-overview\">官方文档</a>，我们可以知道它使用Raft算法实现META节点的一致性（一般推荐3节点的集群配置）。那么说完META节点的一致性实现之后，我接着说一说DATA节点的一致性实现。</p><h2>如何实现DATA节点一致性？</h2><p>我们刚刚提到，DATA节点存放的是具体的时序数据，对一致性要求不高，实现最终一致性就可以了。但是，DATA节点也在同时作为接入层直接面向业务，考虑到时序数据的量很大，要实现水平扩展，所以必须要选用CAP中的AP模型，因为AP模型不像CP模型那样采用一个算法（比如Raft算法）就可以实现了，也就是说，AP模型更复杂，具体有这样几个实现步骤。</p><h3>自定义副本数</h3><p>首先，你需要考虑冗余备份，也就是同一份数据可能需要设置为多个副本，当部分节点出问题时，系统仍然能读写数据，正常运行。</p><p>那么，该如何设置副本呢？答案是实现自定义副本数。</p><p>关于自定义副本数的实现，我们在<a href=\"https://time.geekbang.org/column/article/209130\">12讲</a>介绍了，在这里就不啰嗦了。不过，我想补充一点，相比Raft算法节点和副本必须一一对应，也就是说，集群中有多少个节点就必须有多少个副本，你看，自定义副本数，是不是更灵活呢？</p><p>学到这里，有同学可能已经想到了，当集群支持多副本时，必然会出现一个节点写远程节点时，RPC通讯失败的情况，那么怎么处理这个问题呢？</p><h3>Hinted-handoff</h3><p>我想说的是，一个节点接收到写请求时，需要将写请求中的数据转发一份到其他副本所在的节点，那么在这个过程中，远程RPC通讯是可能会失败的，比如网络不通了，目标节点宕机了，等等，就像下图的样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/85/d1ee3381b7ae527cbc9d607d1a1f8385.jpg?wh=1142*696\" alt=\"\" title=\"图1\"></p><p>那么如何处理这种情况呢？答案是实现Hinted-handoff。在InfluxDB企业版中，Hinted-handoff是这样实现的:</p><ul>\n<li>写失败的请求，会缓存到本地硬盘上;</li>\n<li>周期性地尝试重传;</li>\n<li>相关参数信息，比如缓存空间大小(max-szie)、缓存周期（max-age）、尝试间隔（retry-interval）等，是可配置的。</li>\n</ul><p>在这里我想补充一点，除了网络故障、节点故障外，在实际场景中，临时的突发流量也会导致系统过载，出现RPC通讯失败的情况，这时也需要Hinted-handoff能力。</p><p>虽然Hinted-handoff可以通过重传的方式来处理数据不一致的问题，但当写失败请求的数据大于本地缓存空间时，比如某个节点长期故障，写请求的数据还是会丢失的，最终的节点的数据还是不一致的，那么怎么实现数据的最终一致性呢？答案是反熵。</p><h3>反熵</h3><p>需要你注意的是，时序数据虽然一致性不敏感，能容忍短暂的不一致，但如果查询的数据长期不一致的话，肯定就不行了，因为这样就会出现“Flapping Dashboard”的现象，也就是说向不同节点查询数据，生成的仪表盘视图不一样，就像图2和图3的样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/53/3c/535208a278935bc490e0d4f50f2ca13c.png?wh=1142*477\" alt=\"\" title=\"图2\"></p><p><img src=\"https://static001.geekbang.org/resource/image/7c/21/7cc5f061f62854caa1d31aed586c8321.png?wh=1142*477\" alt=\"\" title=\"图3\"><br>\n从上面的2个监控视图中你可以看到，同一份数据，查询不同的节点，生成的视图是不一样的。那么，如何实现最终一致性呢？</p><p>答案就是咱们刚刚说的反熵，而我在<a href=\"https://time.geekbang.org/column/article/208182\">11讲</a>以自研InfluxDB系统为例介绍过反熵的实现，InfluxDB企业版类似，所以在这里就不啰嗦了。</p><p>不过有的同学可能会存在这样的疑问，实现反熵是以什么为准来修复数据的不一致呢？我想说的是，时序数据像日志数据一样，创建后就不会再修改了，一直存放在那里，直到被删除。</p><p>所以，数据副本之间的数据不一致，是因为数据写失败导致数据丢失了，也就是说，存在的都是合理的，缺失的就是需要修复的。这时我们可以采用两两对比、添加缺失数据的方式，来修复各数据副本的不一致了。</p><h3>Quorum NWR</h3><p>最后，有同学可能会说了，我要在公司官网上展示的监控数据的仪表板（Dashboard），是不能容忍视图不一致的情况的，也就是无法容忍任何“Flapping Dashboard”的现象。那么怎么办呢？这时我们就要实现强一致性（Werner Vogels提到的强一致性），也就是每次读操作都要能读取最新数据，不能读到旧数据。</p><p>那么在一个AP型的分布式系统中，如何实现强一致性呢？</p><p>答案是实现Quorum NWR。同样，关于Quorum NWR的实现，我们在12讲已介绍，在这里也就不啰嗦了。</p><p>最后我想说的是，你可以看到，实现AP型分布式系统，比实现CP型分布式要复杂的。另外，通过上面的内容学习，我希望你能注意到，技术是用来解决场景需求的，没有十全十美的技术，在实际工作中，需要我们深入研究场景特点，提炼场景需求，然后根据场景特点权衡折中，设计出适合该场景特点的分布式系统。</p><h2>内容小结</h2><p>本节课我主要带你了解时序数据库、META节点一致性的实现、DATA节点一致性的实现。以一个复杂的实际系统为例，带你将前面学习到的理论串联起来，让你知道它们如何在实际场景中使用。我希望你明确的重点如下：</p><ol>\n<li>\n<p>CAP理论是一把尺子，能辅助我们分析问题、总结归纳问题，指导我们如何做妥协折中。所以，我建议你在实践中多研究多思考，一定不能认为某某技术“真香”，十全十美了，要根据场景特点活学活用技术。</p>\n</li>\n<li>\n<p>通过Raft算法，我们能实现强一致性的分布式系统，能保证写操作完成后，后续所有的读操作，都能读取到最新的数据。</p>\n</li>\n<li>\n<p>通过自定义副本数、Hinted-handoff、反熵、Quorum NWR等技术，我们能实现AP型分布式系统，还能通过水平扩展，高效扩展集群的读写能力。</p>\n</li>\n</ol><p>最后，我想再强调下，技术是用来解决场景的需求的，只有当你吃透技术，深刻理解场景的需求，才能开发出适合这个场景的分布式系统。另外我还想让你知道的是，InfluxDB企业版一年的License费高达1.5万美刀，为什么它值这个价钱？就是因为技术带来的高性能和成本优势。比如：</p><ul>\n<li>相比OpenTSDB，InfluxDB的写性能是它的9.96倍，存储效率是它的8.69倍，查询效率是它的7.38倍。</li>\n<li>相比Graphite，InfluxDB的写性能是它的12倍，存储效率是6.3倍，查询效率是9倍。</li>\n</ul><p>在这里我想说的是，数倍或者数量级的性能优势其实就是钱，而且业务规模越大，省钱效果越突出。</p><p>另外我想说的是，尽管influxdb-comparisons的测试比较贴近实际场景，比如它的DevOps测试模型，与我们观察到常见的实际场景是一致的。但从实际效果看，InfluxDB的优势更加明显，成本优势更加突出。因为传统的时序数据库不仅仅是性能低，而且在海量数据场景下，接入和查询的痛点突出。为了缓解这些痛点，引入和堆砌了更多的开源软件。比如：</p><ul>\n<li>往往需要引入Kafka来缓解，因突发接入流量导致的丢数据问题；</li>\n<li>需要引入Storm、Flink来缓解，时序数据库计算性能差的问题；</li>\n<li>需要做热数据的内存缓存，来解决查询超时的问题。</li>\n</ul><p>所以在实施中，除了原有的时序数据库会被替换掉，还有大量的开源软件会被省掉，成本优势突出。在这里我想说的是，从实际实施看（自研InfluxDB系统），性能优势和成本优势也是符合这个预期的。</p><p>最后我想说的是，我反对堆砌开源软件，建议谨慎引入Kafka等缓存中间件。老话说，在计算机中，任何问题都可以通过引入一个中间层来解决。这句话是正确的，但背后的成本是不容忽视的，尤其是在海量系统中。<strong>我的建议是直面问题，通过技术手段在代码和架构层面解决它，而不是引入和堆砌更多的开源软件。</strong>其实，InfluxDB团队也是这么做，比如他们两次重构存储引擎。</p><h2>课堂思考</h2><p>我提到没有十全十美的技术，而是需要根据场景特点，权衡折中，设计出适合场景特点的分布式系统。那么你试着思考一下，假设有这样一个场景，一个存储系统，访问它的写请求不多（比如 1K QPS），但访问它的读请求很多（比如1M QPS），而且客户端查询时，对数据的一致性敏感，也就是需要实现强一致性，那么我们该如何设计这个系统呢？为什么呢？欢迎在留言区分享你的看法，与我一同讨论。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","comments":[{"had_liked":false,"id":189432,"user_name":"Geek_3894f9","can_delete":false,"product_type":"c1","uid":1594820,"ip_address":"","ucode":"FD04B8163FC5A8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKrzZT06vXeP6IfR9iasoiaaDeYiaUmmN6pgwvNUpLhrauiasU9acvNcdSuicrhicMmBhvEufcjPTS7ZXRA/132","comment_is_top":false,"comment_ctime":1584515614,"is_pvip":false,"replies":[{"id":"76019","content":"加一颗星:)。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586203510,"ip_address":"","comment_id":189432,"utype":1}],"discussion_count":2,"race_medal":0,"score":"83188894238","product_id":100046101,"comment_content":"课后思考题，答案是QNWR，Wn，R1。wn是因为对写入的时间要求不高，r1是因为可以读取任意一节点，读性能好。","like_count":20,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487697,"discussion_content":"加一颗星:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586203510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":547661,"discussion_content":"这种情况下，写入节点挂掉一个那不是整个系统就不工作了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642787511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":487697,"ip_address":""},"score":547661,"extra":""}]}]},{"had_liked":false,"id":203026,"user_name":"Michael Tesla","can_delete":false,"product_type":"c1","uid":1033053,"ip_address":"","ucode":"C627F090293608","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c3/5d/ced9b5c2.jpg","comment_is_top":false,"comment_ctime":1586103673,"is_pvip":false,"replies":[{"id":"75977","content":"加一颗星:)，这是个解决办法，与这个办法“类似”的二阶段提交协议，也是个办法。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586183798,"ip_address":"","comment_id":203026,"utype":1}],"discussion_count":3,"race_medal":0,"score":"48830743929","product_id":100046101,"comment_content":"我觉得思考题的场景特点是：读多写少，读的性能要求高，数据要保证强一致性。<br><br>如果使用 Raft 算法 保证强一致性，那么读写操作都应该在领导者节点上进行。这样的话，读的性能相当于单机，不是很理想。<br><br>应该采用 Quorum NWR 技术，设置 W = N，R = 1。每次都要写入全部节点，写操作的性能会比较差。但是，因为写操作比较少，所以这个缺点可以忍受。而读操作只需要读任意一个节点就能返回最新的数据，性能非常高。","like_count":12,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490740,"discussion_content":"加一颗星:)，这是个解决办法，与这个办法“类似”的二阶段提交协议，也是个办法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586183798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1109389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","nickname":"KW💤","note":"","ucode":"290DD7016F4EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":548594,"discussion_content":"我怎么觉得不是类似，而是要加上二阶段提交协议才能走的通，因为一阶段复制到follower的日志是uncommitted的，如果客户端读别的节点是读不到最新数据的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643271706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":490740,"ip_address":""},"score":548594,"extra":""}]},{"author":{"id":2016408,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/c4/98/9c7a1a23.jpg","nickname":"罗杰.菲の樂","note":"","ucode":"63590706846EEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547662,"discussion_content":"这种情况下，写入节点挂掉一个那不是整个系统就不工作了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642787518,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195094,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1585136202,"is_pvip":false,"replies":[{"id":"74181","content":"主要感觉哪方面学习起来比较困难呢？能具体说说吗？<br>看到了反馈，我补充下，其实，技术是一点一点学习的，关键要找到一个点，在深度上进行突破，然后再在广度上扩展开来了，比如，可以先聚焦在实战篇的分布式KV系统，将代码玩起了，吃透分布式系统的架构和开发方法，多玩代码，少想理论。代码玩出了感觉后，聚焦和吃透Raft算法。最后，再聚焦和吃透其他理论。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585138472,"ip_address":"","comment_id":195094,"utype":1}],"discussion_count":5,"race_medal":0,"score":"31649907274","product_id":100046101,"comment_content":"这个实战太企业了，新手完全无从下门，有没有些入门的课程","like_count":7,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488974,"discussion_content":"主要感觉哪方面学习起来比较困难呢？能具体说说吗？\n看到了反馈，我补充下，其实，技术是一点一点学习的，关键要找到一个点，在深度上进行突破，然后再在广度上扩展开来了，比如，可以先聚焦在实战篇的分布式KV系统，将代码玩起了，吃透分布式系统的架构和开发方法，多玩代码，少想理论。代码玩出了感觉后，聚焦和吃透Raft算法。最后，再聚焦和吃透其他理论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585138472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","nickname":"竹马彦四郎的好朋友影法師","note":"","ucode":"A9555AEFF90CDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259034,"discussion_content":"不不不，这个案例我觉得举的非常好，将前面所有老师讲的知识串起来了~ 并不在于弄懂InfluxDB的细节，而在于对前面的知识理解的更深了，因为结合了实战","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1588753860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362369,"discussion_content":"我感觉很不错，看不懂可以多看几遍。很多书看起来都是一场场鏖战，比如操作系统，汇编原理，但不能因为这个就不去学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616931340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1890726,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/d9/a6/c97ecf7d.jpg","nickname":"ldeng 7","note":"","ucode":"66B5AA215E57E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328264,"discussion_content":"感觉可以把内容再细化一下，直接出本书","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606114544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022247,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","nickname":"阿卡牛","note":"","ucode":"0BC43A904C3199","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214312,"discussion_content":"觉得更像是企业实战案例分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585179659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200226,"user_name":"Kvicii.Y","can_delete":false,"product_type":"c1","uid":1442588,"ip_address":"","ucode":"446BFA633569EA","user_header":"https://static001.geekbang.org/account/avatar/00/16/03/1c/c9fe6738.jpg","comment_is_top":false,"comment_ctime":1585560968,"is_pvip":false,"replies":[{"id":"75550","content":"1. 不推荐节点数过多，一般推荐3个节点，也就是能容错一个节点故障，就可以了。<br>2. 通过反熵，可以实现最终一致性。通过quorum nwr，可以让业务按需选择一致性级别，比如说，可以是强一致性，也可以是最终一致性。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585933657,"ip_address":"","comment_id":200226,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14470462856","product_id":100046101,"comment_content":"1.META节点是Raft算法实现，那是不是存在这如果节点过多消息同步慢的问题呢？存在的话如何解决呢？(只能减少Raft节点？)<br>2.思考题使用quorum nwr可以达到最终一致性，这里说的强一致是最终一致的意思吗？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489964,"discussion_content":"1. 不推荐节点数过多，一般推荐3个节点，也就是能容错一个节点故障，就可以了。\n2. 通过反熵，可以实现最终一致性。通过quorum nwr，可以让业务按需选择一致性级别，比如说，可以是强一致性，也可以是最终一致性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585933657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189208,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1584488197,"is_pvip":false,"replies":[{"id":"76022","content":"加一颗星:)，如果直接使用Raft集群，读性能满足不了，可以增加几台内存缓存服务器，来提升读性能。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586204063,"ip_address":"","comment_id":189208,"utype":1}],"discussion_count":2,"race_medal":1,"score":"14469390085","product_id":100046101,"comment_content":"感觉自己对这些知识理解的还是不够，更不能进行实战应用，还得好好学学。<br><br>对于思考题，首先要求强一致性，读多写少，那是不是可以像  META 节点一样，采用 Raft 算法实现强一致性。但这样对性能可能就有影响了，不过这个 KV 系统是读多写少，应该也可以<br><br>然后就是从性能考虑，可以在 AP 系统中实现强一致性。根据文中提示，可以采用 Quorun NWR 实现<br>","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487632,"discussion_content":"加一颗星:)，如果直接使用Raft集群，读性能满足不了，可以增加几台内存缓存服务器，来提升读性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586204063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1684311,"avatar":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","nickname":"姜川","note":"","ucode":"0F8A349623EAB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214379,"discussion_content":"我有点乱了，raft如果是收到半数以上从节点的ACK，那会出现有个别节点短暂不一致，这种raft会通过主节点进行恢复，那这个就属于最终一致性了吧，最终一致性是不属于强一致性的定义吧，除非主节点要求收到所有节点的响应","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585186971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234047,"user_name":"Following U","can_delete":false,"product_type":"c1","uid":2063665,"ip_address":"","ucode":"5742875245E11C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/7d/31/b630e3a1.jpg","comment_is_top":false,"comment_ctime":1594563483,"is_pvip":false,"replies":[{"id":"87072","content":"https:&#47;&#47;github.com&#47;freetsdb&#47;freetsdb，现在是Alpha版，还在准备中。项目中一些有意思的技术点和设计，我也会在第一时间和大家分享同步:)。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595210883,"ip_address":"","comment_id":234047,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10184498075","product_id":100046101,"comment_content":"hello，讲师好，influxdb 企业版你这边的分布式版本的github 地址吗？","like_count":3,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501255,"discussion_content":"https://github.com/freetsdb/freetsdb，现在是Alpha版，还在准备中。项目中一些有意思的技术点和设计，我也会在第一时间和大家分享同步:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595210883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189222,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1584490319,"is_pvip":false,"replies":[{"id":"75714","content":"好的，也期待你的更多反馈:)。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586020610,"ip_address":"","comment_id":189222,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10174424911","product_id":100046101,"comment_content":"喜欢案例，让案例来的更猛烈些吧","like_count":2,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487637,"discussion_content":"好的，也期待你的更多反馈:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586020610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243267,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1598006624,"is_pvip":false,"replies":[{"id":"96356","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1606822188,"ip_address":"","comment_id":243267,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5892973920","product_id":100046101,"comment_content":"读多写少啊,只需要保证在每次都必须要写入到每一个节点上就可以了,然后读的时候直接去读,自然是最新的<br>","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504242,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606822188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229750,"user_name":"hanazawakana","can_delete":false,"product_type":"c1","uid":1251721,"ip_address":"","ucode":"E0F6FACBFE7D15","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/89/20488013.jpg","comment_is_top":false,"comment_ctime":1593137194,"is_pvip":false,"replies":[{"id":"87073","content":"加一颗星:)，可以这么理解，只是“直接邮寄”背后的思想普适、常见，所以，“直接邮寄”很少被提及了。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595211107,"ip_address":"","comment_id":229750,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5888104490","product_id":100046101,"comment_content":"hinted-handoff是直接邮寄的一种实现方式吗","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499625,"discussion_content":"加一颗星:)，可以这么理解，只是“直接邮寄”背后的思想普适、常见，所以，“直接邮寄”很少被提及了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595211107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204650,"user_name":"Dylan","can_delete":false,"product_type":"c1","uid":1040236,"ip_address":"","ucode":"58064D0C9F9F5F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/df/6c/5af32271.jpg","comment_is_top":false,"comment_ctime":1586436239,"is_pvip":false,"replies":[{"id":"76509","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586471486,"ip_address":"","comment_id":204650,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5881403535","product_id":100046101,"comment_content":"可以在AP模型中，引入QNWR","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491243,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586471486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201610,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1585811773,"is_pvip":false,"replies":[{"id":"75420","content":"加一颗星:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585838132,"ip_address":"","comment_id":201610,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880779069","product_id":100046101,"comment_content":"1、存储系统，数据肯定要冗余<br>2、可以使用WNR 模型<br>          1、写不多 ，全写<br>          2、读多，一个读","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490377,"discussion_content":"加一颗星:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585838132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":200392,"user_name":"欧阳","can_delete":false,"product_type":"c1","uid":1196886,"ip_address":"","ucode":"2612576E262813","user_header":"https://static001.geekbang.org/account/avatar/00/12/43/56/62c38c36.jpg","comment_is_top":false,"comment_ctime":1585580103,"is_pvip":true,"replies":[{"id":"77178","content":"加一颗星:)，目标不同，quorum NWR实现的是自定义一致性级别，kfk分区是为了实现水平扩展、负载均衡，提升读写性能。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586886496,"ip_address":"","comment_id":200392,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5880547399","product_id":100046101,"comment_content":"除了quorum NWR。kfk的分区是不是也是一种思路","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490014,"discussion_content":"加一颗星:)，目标不同，quorum NWR实现的是自定义一致性级别，kfk分区是为了实现水平扩展、负载均衡，提升读写性能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586886496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1475385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","nickname":"竹马彦四郎的好朋友影法師","note":"","ucode":"A9555AEFF90CDF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259048,"discussion_content":"分片目的主要是提高写的性能，副本的目的主要是为了提高读的性能，目标不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588755455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195415,"user_name":"姜川","can_delete":false,"product_type":"c1","uid":1684311,"ip_address":"","ucode":"0F8A349623EAB5","user_header":"https://static001.geekbang.org/account/avatar/00/19/b3/57/2d92cf9a.jpg","comment_is_top":false,"comment_ctime":1585186759,"is_pvip":false,"replies":[{"id":"75997","content":"加一颗星:)，不需要，在领导者节点上执行读操作，可以实现强一致性:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586195995,"ip_address":"","comment_id":195415,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5880154055","product_id":100046101,"comment_content":"老师，raft要实现强一致是不是就需要收到所有节点的ACK才可以，半数以上那种只能是最终一致性吧，因为会有短暂的不一致发生","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489056,"discussion_content":"加一颗星:)，不需要，在领导者节点上执行读操作，可以实现强一致性:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586195995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189248,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1584492925,"is_pvip":false,"replies":[{"id":"75713","content":"加一颗星:)，理论的实战总结:)。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586020556,"ip_address":"","comment_id":189248,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879460221","product_id":100046101,"comment_content":"前面的十几讲都在为这一讲做铺垫，快更新，看看后面的实战部分😃","like_count":1,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487646,"discussion_content":"加一颗星:)，理论的实战总结:)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586020556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329967,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1641703403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641703403","product_id":100046101,"comment_content":"这里关于InfluxDB的副本机制,因为这里的数据是监控数据的话,其实没必要实现主副本那种,但是在其他场景中,例如分布式文件系统里面,就需要了,因为修复数据的难度更大了.<br>当然这里关于副本数据传输,有一个优化点的,使用两个缓存队列来实现.<br>第一队列就是正常接受到数据的时候正常串行发送.<br>如果节点发送Data数据到其他节点上失败了,那么在简单重试后还是失败,就应该放到第二缓存队列中.<br>在第二队列的任务都是那些有问题的需要不断重试的,这时候可以上报到Meta集群里面了.进行其他的处理.<br><br>总的来说,因为本人是做分布式文件系统的,这里真的有很多很多相似的地方,但是文件系统需要考虑修复和数据重平衡等很多很多问题.","like_count":0},{"had_liked":false,"id":254353,"user_name":"nomoshen","can_delete":false,"product_type":"c1","uid":1043083,"ip_address":"","ucode":"7EA7C4FECFA7C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/8b/613c162e.jpg","comment_is_top":false,"comment_ctime":1603103766,"is_pvip":false,"replies":[{"id":"93002","content":"加一颗星:)，在大数据、海量数据场景，除了设备成本高昂（比如某团队采用类似方案的系统，一年的设备成本，80个Million），效果也不好，多个团队、多个系统，能证明这点，而这个点也是当前的痛点，大家着力解决的。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1603289774,"ip_address":"","comment_id":254353,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603103766","product_id":100046101,"comment_content":"关于最后的堆砌开源软件这个观点我其实有点不能认同；的确在influxdb场景上的存储不断的优化是值得鼓励，并且觉得这就是它的门槛和优势；但是在一些时序场景上加入内存数据库、消息队列、流式引擎来解决时序场景上的一些难点我觉得也是可以的；","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507358,"discussion_content":"加一颗星:)，在大数据、海量数据场景，除了设备成本高昂（比如某团队采用类似方案的系统，一年的设备成本，80个Million），效果也不好，多个团队、多个系统，能证明这点，而这个点也是当前的痛点，大家着力解决的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603289774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247686,"user_name":"要努力的兵长","can_delete":false,"product_type":"c1","uid":1204868,"ip_address":"","ucode":"0144DF1BB82763","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/YicovLZyvibpkfJwuAib1FEyibVDN6Oia1Wsg7jibT0uTj0UDH75KAX6vfSvstjy1IHTW7WpNbMlZZO9SnGoPj3AE2DQ/132","comment_is_top":false,"comment_ctime":1599793712,"is_pvip":false,"replies":[{"id":"91807","content":"加一颗星:)，限制读操作只能在领导者节点上执行，可以实现强一致性。实现的是最终一致性还是强一致性，取决于读操作能否在非领导者节点上执行。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1601298765,"ip_address":"","comment_id":247686,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599793712","product_id":100046101,"comment_content":"它使用 Raft 算法实现 META 节点的一致性（一般推荐 3 节点的集群配置）   ------------ Raft算法  来实现强一致性？？？  Raft算法不是只可 最终一致性吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505470,"discussion_content":"加一颗星:)，限制读操作只能在领导者节点上执行，可以实现强一致性。实现的是最终一致性还是强一致性，取决于读操作能否在非领导者节点上执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601298765,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223171,"user_name":"hanazawakana","can_delete":false,"product_type":"c1","uid":1251721,"ip_address":"","ucode":"E0F6FACBFE7D15","user_header":"https://static001.geekbang.org/account/avatar/00/13/19/89/20488013.jpg","comment_is_top":false,"comment_ctime":1591014989,"is_pvip":false,"replies":[{"id":"86998","content":"加一颗星:)，企业版是分布式系统，支持的。而开源版是单机，不支持的，因为即使实现了，也没有意义。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1595093119,"ip_address":"","comment_id":223171,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591014989","product_id":100046101,"comment_content":"请问这个Quorum NWR是influxdb enterprise才有的吗？influxdb 1.0版本和2.0版本没有吗？","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497037,"discussion_content":"加一颗星:)，企业版是分布式系统，支持的。而开源版是单机，不支持的，因为即使实现了，也没有意义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595093119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214454,"user_name":"竹马彦四郎的好朋友影法師","can_delete":false,"product_type":"c1","uid":1475385,"ip_address":"","ucode":"A9555AEFF90CDF","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","comment_is_top":false,"comment_ctime":1588752290,"is_pvip":false,"replies":[{"id":"79468","content":"加一颗星:)，查询涉及到不同节点的多个分片时，通讯多，延迟大，比如，如果10节点集群，统计一天的时序记录的count，涉及到了20个分片，分别在10个节点上，这时就可能出现因通讯多而延迟大的问题。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588788655,"ip_address":"","comment_id":214454,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588752290","product_id":100046101,"comment_content":"&quot;因为查询时就会出现访问节点数过多而延迟大的问题。&quot; 这句话感觉是不是想表达的是如果AP系统包含节点过多，因为要达到最终一致性，会导致同步时间比较长，所以读到最新数据延迟长~","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494061,"discussion_content":"加一颗星:)，查询涉及到不同节点的多个分片时，通讯多，延迟大，比如，如果10节点集群，统计一天的时序记录的count，涉及到了20个分片，分别在10个节点上，这时就可能出现因通讯多而延迟大的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588788655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214452,"user_name":"竹马彦四郎的好朋友影法師","can_delete":false,"product_type":"c1","uid":1475385,"ip_address":"","ucode":"A9555AEFF90CDF","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/39/f9623363.jpg","comment_is_top":false,"comment_ctime":1588752176,"is_pvip":false,"replies":[{"id":"79469","content":"加一颗星:)，实战总结，技术的最终目的，是实战，在实战中才能更好的理解技术，而不会陷入“白马非马”等形而上的争论和纠结中。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1588788900,"ip_address":"","comment_id":214452,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588752176","product_id":100046101,"comment_content":"我觉得这是老师对前面的知识的一个串讲~ 感觉很好~ 赞！","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494060,"discussion_content":"加一颗星:)，实战总结，技术的最终目的，是实战，在实战中才能更好的理解技术，而不会陷入“白马非马”等形而上的争论和纠结中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588788900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197293,"user_name":"问心","can_delete":false,"product_type":"c1","uid":1250775,"ip_address":"","ucode":"6808568D61CE36","user_header":"https://static001.geekbang.org/account/avatar/00/13/15/d7/96e77edd.jpg","comment_is_top":false,"comment_ctime":1585366966,"is_pvip":true,"replies":[{"id":"75555","content":"加一颗星:)，缓存、冷热分离，是数据层系统的“神器”。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585934456,"ip_address":"","comment_id":197293,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585366966","product_id":100046101,"comment_content":"存储使用Raft，可能的话对数据进行分区分片，或者使用Quorun NWR进行查询，尽可能的将热数据加载到缓存","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489491,"discussion_content":"加一颗星:)，缓存、冷热分离，是数据层系统的“神器”。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585934456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193547,"user_name":"Fs","can_delete":false,"product_type":"c1","uid":1083184,"ip_address":"","ucode":"0AD0EFB5544B9A","user_header":"https://static001.geekbang.org/account/avatar/00/10/87/30/4626c8c0.jpg","comment_is_top":false,"comment_ctime":1584925910,"is_pvip":false,"replies":[{"id":"77182","content":"加一颗星:)，比如，AE通过“存在即合理，缺失都是需要修复”的方式，来实现数据副本的最终一致，因为时序数据，不存在更新操作，一条数据记录创建后，就不会再被修改了，也就是说，不存在数据新旧的问题，只可能出现数据有无的问题。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586890283,"ip_address":"","comment_id":193547,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584925910","product_id":100046101,"comment_content":"AP型的实现大框架是类似的，influxDB的介绍和Cassandra的实现非常相似。那么支持时序这一特点，influxDB有什么不一样的设计呢","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488582,"discussion_content":"加一颗星:)，比如，AE通过“存在即合理，缺失都是需要修复”的方式，来实现数据副本的最终一致，因为时序数据，不存在更新操作，一条数据记录创建后，就不会再被修改了，也就是说，不存在数据新旧的问题，只可能出现数据有无的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586890283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192827,"user_name":"Scream!","can_delete":false,"product_type":"c1","uid":1572593,"ip_address":"","ucode":"A25B9FCB678A40","user_header":"https://static001.geekbang.org/account/avatar/00/17/fe/f1/4f1632f8.jpg","comment_is_top":false,"comment_ctime":1584874371,"is_pvip":false,"replies":[{"id":"75569","content":"感谢反馈:)，后面我会综合大家的共性需求，做补充。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1585937248,"ip_address":"","comment_id":192827,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584874371","product_id":100046101,"comment_content":"多来点实战案例","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488473,"discussion_content":"感谢反馈:)，后面我会综合大家的共性需求，做补充。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585937248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190299,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1584627797,"is_pvip":false,"replies":[{"id":"75709","content":"加油！有问题多交流:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586019965,"ip_address":"","comment_id":190299,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584627797","product_id":100046101,"comment_content":"懵懵懂懂，似懂非懂，还是要多学习。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487942,"discussion_content":"加油！有问题多交流:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586019965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189333,"user_name":"羽翼1982","can_delete":false,"product_type":"c1","uid":1130194,"ip_address":"","ucode":"1C7362888B7E3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/d2/5f9d3fa7.jpg","comment_is_top":false,"comment_ctime":1584500936,"is_pvip":false,"replies":[{"id":"76731","content":"加一颗星:)，VM，我后面研究下，做个补充吧。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586619132,"ip_address":"","comment_id":189333,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584500936","product_id":100046101,"comment_content":"在AP的系统中，使用Quorum NWR理论<br>如果写少读多，假设有3个副本，可以将策略调整为3个副本写成功才返回，读则可以只读取一个副本的内容；如果网络不稳定，3副本写成功到时失败率高，99线的延迟大，可以退一步使用2写2读的策略；不过很少在实际系统上看到类似3副本，允许1副本写不成功时缓存本地等待Hinted-handoff后续同步这样的策略，InfluxDB中不太清楚，至少Cassandra里面没有<br><br>PS: 我们公司今年刚刚把时序数据库从InfluxDB转到VictoriaMetrics上，据说性能更高，与Promeheus的适配也更好，不知道老师对VM是否有研究可以简单分享下<br>","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487672,"discussion_content":"加一颗星:)，VM，我后面研究下，做个补充吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586617262,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189317,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1464199,"ip_address":"","ucode":"854500026E2187","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhuGLVRYZibOTfMumk53Wn8Q0Rkg0o6DzTicbibCq42lWQoZ8lFeQvicaXuZa7dYsr9URMrtpXMVDDww/132","comment_is_top":false,"comment_ctime":1584499741,"is_pvip":false,"replies":[{"id":"75712","content":"感谢！也期待你的更多的反馈:)","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586020312,"ip_address":"","comment_id":189317,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584499741","product_id":100046101,"comment_content":"给老师大大的赞，对实战部分很是期待，我现在就希望快点更新！","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487668,"discussion_content":"感谢！也期待你的更多的反馈:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586020312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189257,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1584493604,"is_pvip":false,"replies":[{"id":"76021","content":"加一颗星:)，这个场景与InfluxDB不同，是同一份数据，无法分成meta和data两部分。这个分析，引出了另外一个思路，就是内存缓存，比如，在Raft集群前面，加几台内存缓存服务器，作为接入层，提升读并发。","user_name":"作者回复","user_name_real":"hanj4096","uid":"1642497","ctime":1586203923,"ip_address":"","comment_id":189257,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1584493604","product_id":100046101,"comment_content":"课后思考：这个里面有几个点是设计这个系统的关键，读请求（百万级）远大于写请求（千级），要求读的强一致性。<br>因为写请求很低，可以仿照influxDB的设计，分成meta节点和data节点，meta节点使用cp模型，使用raft算法，data节点使用ap模型，使用quorum NWR和反墒算法保证强一致性，因为写少，所以只要少量meta节点即可满足要求，比如三个，对于大量读请求，data节点可以保障一致性和百万级请求。","like_count":0,"discussions":[{"author":{"id":1642497,"avatar":"https://static001.geekbang.org/account/avatar/00/19/10/01/750740a8.jpg","nickname":"hanj4096","note":"","ucode":"481047E40315AA","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487653,"discussion_content":"加一颗星:)，这个场景与InfluxDB不同，是同一份数据，无法分成meta和data两部分。这个分析，引出了另外一个思路，就是内存缓存，比如，在Raft集群前面，加几台内存缓存服务器，作为接入层，提升读并发。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586203923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}