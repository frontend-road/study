{"id":187761,"title":"30 | 理论四：如何通过封装、抽象、模块化、中间层等解耦代码？","content":"<p>前面我们讲到，重构可以分为大规模高层重构（简称“大型重构”）和小规模低层次重构（简称“小型重构”）。大型重构是对系统、模块、代码结构、类之间关系等顶层代码设计进行的重构。对于大型重构来说，今天我们重点讲解最有效的一个手段，那就是“解耦”。解耦的目的是实现代码高内聚、松耦合。关于解耦，我准备分下面三个部分来给你讲解。</p><ul>\n<li>“解耦”为何如此重要？</li>\n<li>如何判定代码是否需要“解耦”？</li>\n<li>如何给代码“解耦”？</li>\n</ul><p>话不多说，现在就让我们正式开始今天的学习吧！</p><h2>“解耦”为何如此重要？</h2><p>软件设计与开发最重要的工作之一就是应对复杂性。人处理复杂性的能力是有限的。过于复杂的代码往往在可读性、可维护性上都不友好。那如何来控制代码的复杂性呢？手段有很多，我个人认为，最关键的就是解耦，保证代码松耦合、高内聚。如果说重构是保证代码质量不至于腐化到无可救药地步的有效手段，那么利用解耦的方法对代码重构，就是保证代码不至于复杂到无法控制的有效手段。</p><p>我们在<a href=\"https://time.geekbang.org/column/article/179615\">第22讲</a>有介绍，什么是“高内聚、松耦合”。如果印象不深，你可以再去回顾一下。实际上，“高内聚、松耦合”是一个比较通用的设计思想，不仅可以指导细粒度的类和类之间关系的设计，还能指导粗粒度的系统、架构、模块的设计。相对于编码规范，它能够在更高层次上提高代码的可读性和可维护性。</p><!-- [[[read_end]]] --><p>不管是阅读代码还是修改代码，“高内聚、松耦合”的特性可以让我们聚焦在某一模块或类中，不需要了解太多其他模块或类的代码，让我们的焦点不至于过于发散，降低了阅读和修改代码的难度。而且，因为依赖关系简单，耦合小，修改代码不至于牵一发而动全身，代码改动比较集中，引入bug的风险也就减少了很多。同时，“高内聚、松耦合”的代码可测试性也更加好，容易mock或者很少需要mock外部依赖的模块或者类。</p><p>除此之外，代码“高内聚、松耦合”，也就意味着，代码结构清晰、分层和模块化合理、依赖关系简单、模块或类之间的耦合小，那代码整体的质量就不会差。即便某个具体的类或者模块设计得不怎么合理，代码质量不怎么高，影响的范围是非常有限的。我们可以聚焦于这个模块或者类，做相应的小型重构。而相对于代码结构的调整，这种改动范围比较集中的小型重构的难度就容易多了。</p><h2>代码是否需要“解耦”？</h2><p>那现在问题来了，我们该怎么判断代码的耦合程度呢？或者说，怎么判断代码是否符合“高内聚、松耦合”呢？再或者说，如何判断系统是否需要解耦重构呢？</p><p>间接的衡量标准有很多，前面我们讲到了一些，比如，看修改代码会不会牵一发而动全身。除此之外，还有一个直接的衡量标准，也是我在阅读源码的时候经常会用到的，那就是把模块与模块之间、类与类之间的依赖关系画出来，根据依赖关系图的复杂性来判断是否需要解耦重构。</p><p>如果依赖关系复杂、混乱，那从代码结构上来讲，可读性和可维护性肯定不是太好，那我们就需要考虑是否可以通过解耦的方法，让依赖关系变得清晰、简单。当然，这种判断还是有比较强的主观色彩，但是可以作为一种参考和梳理依赖的手段，配合间接的衡量标准一块来使用。</p><h2>如何给代码“解耦”？</h2><p>前面我们能讲了解耦的重要性，以及如何判断是否需要解耦，接下来，我们再来看一下，如何进行解耦。</p><h3>1.封装与抽象</h3><p>封装和抽象作为两个非常通用的设计思想，可以应用在很多设计场景中，比如系统、模块、lib、组件、接口、类等等的设计。封装和抽象可以有效地隐藏实现的复杂性，隔离实现的易变性，给依赖的模块提供稳定且易用的抽象接口。</p><p>比如，Unix系统提供的open()文件操作函数，我们用起来非常简单，但是底层实现却非常复杂，涉及权限控制、并发控制、物理存储等等。我们通过将其封装成一个抽象的open()函数，能够有效控制代码复杂性的蔓延，将复杂性封装在局部代码中。除此之外，因为open()函数基于抽象而非具体的实现来定义，所以我们在改动open()函数的底层实现的时候，并不需要改动依赖它的上层代码，也符合我们前面提到的“高内聚、松耦合”代码的评判标准。</p><h3>2.中间层</h3><p>引入中间层能简化模块或类之间的依赖关系。下面这张图是引入中间层前后的依赖关系对比图。在引入数据存储中间层之前，A、B、C三个模块都要依赖内存一级缓存、Redis二级缓存、DB持久化存储三个模块。在引入中间层之后，三个模块只需要依赖数据存储一个模块即可。从图上可以看出，中间层的引入明显地简化了依赖关系，让代码结构更加清晰。</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/52/cbcefa78026fd1d0cb9837dde9adae52.jpg?wh=2903*983\" alt=\"\"></p><p>除此之外，我们在进行重构的时候，引入中间层可以起到过渡的作用，能够让开发和重构同步进行，不互相干扰。比如，某个接口设计得有问题，我们需要修改它的定义，同时，所有调用这个接口的代码都要做相应的改动。如果新开发的代码也用到这个接口，那开发就跟重构冲突了。为了让重构能小步快跑，我们可以分下面四个阶段来完成接口的修改。</p><ul>\n<li>第一阶段：引入一个中间层，包裹老的接口，提供新的接口定义。</li>\n<li>第二阶段：新开发的代码依赖中间层提供的新接口。</li>\n<li>第三阶段：将依赖老接口的代码改为调用新接口。</li>\n<li>第四阶段：确保所有的代码都调用新接口之后，删除掉老的接口。</li>\n</ul><p>这样，每个阶段的开发工作量都不会很大，都可以在很短的时间内完成。重构跟开发冲突的概率也变小了。</p><h3>3.模块化</h3><p>模块化是构建复杂系统常用的手段。不仅在软件行业，在建筑、机械制造等行业，这个手段也非常有用。对于一个大型复杂系统来说，没有人能掌控所有的细节。之所以我们能搭建出如此复杂的系统，并且能维护得了，最主要的原因就是将系统划分成各个独立的模块，让不同的人负责不同的模块，这样即便在不了解全部细节的情况下，管理者也能协调各个模块，让整个系统有效运转。</p><p>聚焦到软件开发上面，很多大型软件（比如Windows）之所以能做到几百、上千人有条不紊地协作开发，也归功于模块化做得好。不同的模块之间通过API来进行通信，每个模块之间耦合很小，每个小的团队聚焦于一个独立的高内聚模块来开发，最终像搭积木一样将各个模块组装起来，构建成一个超级复杂的系统。</p><p>我们再聚焦到代码层面。合理地划分模块能有效地解耦代码，提高代码的可读性和可维护性。所以，我们在开发代码的时候，一定要有模块化意识，将每个模块都当作一个独立的lib一样来开发，只提供封装了内部实现细节的接口给其他模块使用，这样可以减少不同模块之间的耦合度。</p><p>实际上，从刚刚的讲解中我们也可以发现，模块化的思想无处不在，像SOA、微服务、lib库、系统内模块划分，甚至是类、函数的设计，都体现了模块化思想。如果追本溯源，模块化思想更加本质的东西就是分而治之。</p><h3>4.其他设计思想和原则</h3><p>“高内聚、松耦合”是一个非常重要的设计思想，能够有效提高代码的可读性和可维护性，缩小功能改动导致的代码改动范围。实际上，在前面的章节中，我们已经多次提到过这个设计思想。很多设计原则都以实现代码的“高内聚、松耦合”为目的。我们来一块总结回顾一下都有哪些原则。</p><ul>\n<li>单一职责原则</li>\n</ul><p>我们前面提到，内聚性和耦合性并非独立的。高内聚会让代码更加松耦合，而实现高内聚的重要指导原则就是单一职责原则。模块或者类的职责设计得单一，而不是大而全，那依赖它的类和它依赖的类就会比较少，代码耦合也就相应的降低了。</p><ul>\n<li>基于接口而非实现编程</li>\n</ul><p>基于接口而非实现编程能通过接口这样一个中间层，隔离变化和具体的实现。这样做的好处是，在有依赖关系的两个模块或类之间，一个模块或者类的改动，不会影响到另一个模块或类。实际上，这就相当于将一种强依赖关系（强耦合）解耦为了弱依赖关系（弱耦合）。</p><ul>\n<li>依赖注入</li>\n</ul><p>跟基于接口而非实现编程思想类似，依赖注入也是将代码之间的强耦合变为弱耦合。尽管依赖注入无法将本应该有依赖关系的两个类，解耦为没有依赖关系，但可以让耦合关系没那么紧密，容易做到插拔替换。</p><ul>\n<li>多用组合少用继承</li>\n</ul><p>我们知道，继承是一种强依赖关系，父类与子类高度耦合，且这种耦合关系非常脆弱，牵一发而动全身，父类的每一次改动都会影响所有的子类。相反，组合关系是一种弱依赖关系，这种关系更加灵活，所以，对于继承结构比较复杂的代码，利用组合来替换继承，也是一种解耦的有效手段。</p><ul>\n<li>迪米特法则</li>\n</ul><p>迪米特法则讲的是，不该有直接依赖关系的类之间，不要有依赖；有依赖关系的类之间，尽量只依赖必要的接口。从定义上，我们明显可以看出，这条原则的目的就是为了实现代码的松耦合。至于如何应用这条原则来解耦代码，你可以回过头去阅读一下第22讲，这里我就不赘述了。</p><p>除了上面讲到的这些设计思想和原则之外，还有一些设计模式也是为了解耦依赖，比如观察者模式，有关这一部分的内容，我们留在设计模式模块中慢慢讲解。</p><h2>重点回顾</h2><p>好了，今天的内容到此就讲完了。我们来一块总结回顾一下，你需要重点掌握的内容。</p><p><strong>1.“解耦”为何如此重要？</strong></p><p>过于复杂的代码往往在可读性、可维护性上都不友好。解耦保证代码松耦合、高内聚，是控制代码复杂度的有效手段。代码高内聚、松耦合，也就是意味着，代码结构清晰、分层模块化合理、依赖关系简单、模块或类之间的耦合小，那代码整体的质量就不会差。</p><p><strong>2.代码是否需要“解耦”？</strong></p><p>间接的衡量标准有很多，比如，看修改代码是否牵一发而动全身。直接的衡量标准是把模块与模块、类与类之间的依赖关系画出来，根据依赖关系图的复杂性来判断是否需要解耦重构。</p><p><strong>3.如何给代码“解耦”？</strong></p><p>给代码解耦的方法有：封装与抽象、中间层、模块化，以及一些其他的设计思想与原则，比如：单一职责原则、基于接口而非实现编程、依赖注入、多用组合少用继承、迪米特法则等。当然，还有一些设计模式，比如观察者模式。</p><h2>课堂讨论</h2><p>实际上，在我们平时的开发中，解耦的思想到处可见，比如，Spring中的AOP能实现业务与非业务代码的解耦，IOC能实现对象的构造和使用的解耦。除此之外，你还能想到哪些解耦的应用场景吗？</p><p>欢迎在留言区写下你的思考和答案，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"29 | 理论三：什么是代码的可测试性？如何写出可测试性好的代码？","id":186691},"right":{"article_title":"31 | 理论五：让你最快速地改善代码质量的20条编程规范（上）","id":188622}},"comments":[{"had_liked":false,"id":170556,"user_name":"lmdcx","can_delete":false,"product_type":"c1","uid":1334409,"ip_address":"","ucode":"F2CDD0091ADFD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","comment_is_top":false,"comment_ctime":1578631989,"is_pvip":false,"discussion_count":20,"race_medal":0,"score":"688773399349","product_id":100039001,"comment_content":"必须留个言，倾诉倾诉。<br>昨天晚上就因为看争哥直播，3岁儿子把 mac 的屏给我弄碎了，这一下子看直播的代价也太惨重了，5千多。<br>重点是我还只看了个开头o(╥﹏╥)o","like_count":161,"discussions":[{"author":{"id":1345064,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ericCme76GR5tsxktQjbJgIurEvjqpsia58HqagibrhaGshiaMvvTMKqBh6XWQdwBoJTV2oB4enYjBsCw/132","nickname":"沧海一声笑哈哈","note":"","ucode":"4086BD04D68673","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275380,"discussion_content":"他是继承你的，可能是你问题，也可能是新特性","likes_number":135,"is_delete":false,"is_hidden":false,"ctime":1590711147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1466335,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5f/df/3c4881f0.jpg","nickname":"Geek","note":"","ucode":"1B8EB2C26DE4EC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1345064,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ericCme76GR5tsxktQjbJgIurEvjqpsia58HqagibrhaGshiaMvvTMKqBh6XWQdwBoJTV2oB4enYjBsCw/132","nickname":"沧海一声笑哈哈","note":"","ucode":"4086BD04D68673","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309458,"discussion_content":"666","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601294033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":275380,"ip_address":""},"score":309458,"extra":""},{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1345064,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ericCme76GR5tsxktQjbJgIurEvjqpsia58HqagibrhaGshiaMvvTMKqBh6XWQdwBoJTV2oB4enYjBsCw/132","nickname":"沧海一声笑哈哈","note":"","ucode":"4086BD04D68673","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537834,"discussion_content":"自古评论出神人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639215224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":275380,"ip_address":""},"score":537834,"extra":""},{"author":{"id":2960877,"avatar":"","nickname":"冯仁彬","note":"","ucode":"6E5CA08BC6366B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1345064,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ericCme76GR5tsxktQjbJgIurEvjqpsia58HqagibrhaGshiaMvvTMKqBh6XWQdwBoJTV2oB4enYjBsCw/132","nickname":"沧海一声笑哈哈","note":"","ucode":"4086BD04D68673","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585233,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661410698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":275380,"ip_address":"四川"},"score":585233,"extra":""}]},{"author":{"id":1591223,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","nickname":"JerryZhu","note":"","ucode":"76850CD45786C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304764,"discussion_content":"我怀疑你在秀有老婆。。","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1599659349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1274117,"avatar":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","nickname":"👽","note":"","ucode":"D313AF941B412D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195816,"discussion_content":"不是说程序员都没有女朋友的么？哪来的孩子？","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1583312190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1334409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","nickname":"lmdcx","note":"","ucode":"F2CDD0091ADFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1274117,"avatar":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","nickname":"👽","note":"","ucode":"D313AF941B412D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195924,"discussion_content":"Java不仅可以new 对象，还可以继承","likes_number":29,"is_delete":false,"is_hidden":false,"ctime":1583322049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":195816,"ip_address":""},"score":195924,"extra":""}]},{"author":{"id":1360999,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c4/67/0a66b797.jpg","nickname":"长路漫","note":"","ucode":"9B4ACCA07D0269","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347950,"discussion_content":"可以适配器模式，叫你儿子翻译给你听","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1612397088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171435,"discussion_content":"我才知道有直播！","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581698263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132463,"discussion_content":"说啥呢! 争哥给你换个16寸的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1578910828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1334409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","nickname":"lmdcx","note":"","ucode":"F2CDD0091ADFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132807,"discussion_content":"@争哥，我就在咱们设计模式讨论群，坐等16寸了（＾ω＾）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578925942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":132463,"ip_address":""},"score":132807,"extra":""},{"author":{"id":1194614,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/76/e9f18792.jpg","nickname":".","note":"","ucode":"2FBBAB303A4D5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1334409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","nickname":"lmdcx","note":"","ucode":"F2CDD0091ADFD7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":133329,"discussion_content":"请问设计模式讨论群怎么加入。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578961676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":132807,"ip_address":""},"score":133329,"extra":""},{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1194614,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/76/e9f18792.jpg","nickname":".","note":"","ucode":"2FBBAB303A4D5A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":134787,"discussion_content":"加小争哥微信：wangzheng0822\n让他拉你进群","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1579050687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":133329,"ip_address":""},"score":134787,"extra":""}]},{"author":{"id":1045577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","nickname":"北极的大企鹅","note":"","ucode":"8935346D08E109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376510,"discussion_content":"前一段时间买的mac 1w多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622169249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228518,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","nickname":"Edward Lee","note":"","ucode":"156223F1D7E94A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167830,"discussion_content":"我居然错过直播了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581521199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1602420,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/74/3bf4b74e.jpg","nickname":"阿德","note":"","ucode":"186D5E19E3CB6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141335,"discussion_content":"争哥之前的数据结构与算法之美吗，不是完结了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579413227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1492125,"avatar":"https://static001.geekbang.org/account/avatar/00/16/c4/9d/7c4dbcd9.jpg","nickname":"迁橘","note":"","ucode":"8FE37B7CA6CB74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128571,"discussion_content":"大佬，啥直播，有回放么，给个链接看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578651552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1334409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","nickname":"lmdcx","note":"","ucode":"F2CDD0091ADFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1492125,"avatar":"https://static001.geekbang.org/account/avatar/00/16/c4/9d/7c4dbcd9.jpg","nickname":"迁橘","note":"","ucode":"8FE37B7CA6CB74","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128974,"discussion_content":"没有回放╮(╯_╰)╭ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578668642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":128571,"ip_address":""},"score":128974,"extra":""},{"author":{"id":1386201,"avatar":"https://static001.geekbang.org/account/avatar/00/15/26/d9/f7e96590.jpg","nickname":"yes","note":"","ucode":"612BF6884ED6CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1492125,"avatar":"https://static001.geekbang.org/account/avatar/00/16/c4/9d/7c4dbcd9.jpg","nickname":"迁橘","note":"","ucode":"8FE37B7CA6CB74","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":129534,"discussion_content":"直播数据结构和算法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578711693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":128571,"ip_address":""},"score":129534,"extra":""}]}]},{"had_liked":false,"id":188721,"user_name":"shniu","can_delete":false,"product_type":"c1","uid":1019555,"ip_address":"","ucode":"E64CD8BED96D8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/a3/d7e5fe8a.jpg","comment_is_top":false,"comment_ctime":1584408160,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"293642184288","product_id":100039001,"comment_content":"1. Spring中的事件监听机制，是解耦的设计，利用观察者模式<br>2. 微服务中服务注册与发现是解耦的设计，引入中间层注册中心来实现<br>3. 调用链路跟踪是解耦的设计，将调用链的收集和业务代码解耦，利用动态代理来实现<br>4. Ribbon的客户端负载均衡也能算是一种解耦的设计，利用策略模式和模版方法，解耦了具体的负载算法的实现，而且还可以自定义<br>5. 最近在了解Service Mesh，sidecar 的 Proxy 也算是解耦的设计，利用边车模式代理了服务间的网络通信、监控等和实际业务无关的通用逻辑<br>6. 。。。","like_count":69,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588438,"discussion_content":"非常喜欢这样的评论，能学习到很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663761282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","nickname":"北极的大企鹅","note":"","ucode":"8935346D08E109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376511,"discussion_content":"666\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622169289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340073,"discussion_content":"不错， 大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609897917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112490,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","nickname":"龙猫","note":"","ucode":"FD726CC969EF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298949,"discussion_content":"牛。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597487428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170437,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1578615654,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"224916915046","product_id":100039001,"comment_content":"消息队列，事件监听实现了被观察者和观察者的解耦！<br>","like_count":53},{"had_liked":false,"id":170520,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1578625067,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"147607513131","product_id":100039001,"comment_content":"docker 通过容器打包应用，解耦应用和运行平台。","like_count":35},{"had_liked":false,"id":170464,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1578617761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83182996385","product_id":100039001,"comment_content":"实际上，在我们平时的开发中，解耦的思想到处可见，比如，Spring 中的 AOP 能实现业务与非业务代码的解耦，IOC 能实现对象的构造和使用的解耦。<br>除此之外，你还能想到哪些解耦的应用场景吗？<br>解耦是人类应对复杂性问题的有效手段,解耦的核心是拆分,横向可以拆分出不同的模块,纵向可以拆分出不同的工序,然后就有了人类的大分工协作,分工协作可以把大规模的人有效组织起来参与社会大生产,最终推动社会生产力的进步.<br>解耦场景如国家机器的运转,国务院有国防部&#47;人民银行&#47;财政部&#47;审计署&#47;农业部&#47;保障部&#47;卫生部&#47;教育部&#47;司法部&#47;交通部&#47;水力部&#47;建设部&#47;信息产业部&#47;计委等不同部门组成,另外各个地方政府又有一套完整的组织体系共同组成中国的政府系统.各部各司其职,如人民银行负责货币政策的调整,财政部负责税收政策的调整等.<br>企业的组织运转也是解耦的,企业内部不同的职能部门,如计财部&#47;人力部&#47;技术部&#47;市场部&#47;运营部.<br>技术部又有不同的岗位,如产品经理&#47;UI&#47;开发&#47;测试&#47;运维.","like_count":20},{"had_liked":false,"id":170460,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1578617578,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"83182996202","product_id":100039001,"comment_content":"设计模式_30<br># 作业<br>消息队列，作为观察者模式的的代表，极大程度地实现了解耦，也在很大程度上解决了资源有限时的高并发崩溃。<br>我认为API的使用也算是一种解耦吧，将客户端与服务端，将不同模块的服务可以高效配合，但不关心对方的实现。现在的web项目普遍使用了前后端分离的方式，其实在这之前还有一种混合(耦合)的方式，前后端的代码在一个仓库中，前端的细微修改要发布整个项目，极容易出错。<br><br># 感受<br>我们现在技术，很大程度上解决了人脑解决不了的速度问题和复杂性问题，速度问题主要取决于硬件(只要代码不是特别糟)，复杂性问题就成了程序员的重大难题，因为它违反直觉，它的设计起来困难且更需要耐心。<br><br>另外，可以开始复习了。。。文中提到的原则有些已经记不清要点了。","like_count":20,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588440,"discussion_content":"判断是否该复习的标准就是当记不起来的时候，稳","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663761455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134288,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","nickname":"Ken张云忠","note":"","ucode":"D0BAC9FC17DE2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128201,"discussion_content":"小四  看好你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578619897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171351,"user_name":"lyshrine","can_delete":false,"product_type":"c1","uid":1058278,"ip_address":"","ucode":"497551F047A5C6","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/e6/a69cff76.jpg","comment_is_top":false,"comment_ctime":1578906824,"is_pvip":false,"replies":[{"id":"67733","content":"是的，从不同的角度来讲的，实际上可以看做一回事","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1580116418,"ip_address":"","comment_id":171351,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44528579784","product_id":100039001,"comment_content":"依赖注入是不是也算是组合？","like_count":10,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481309,"discussion_content":"是的，从不同的角度来讲的，实际上可以看做一回事","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580116418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":134824,"discussion_content":"组合关注的是类与类之间的依赖关系，依赖注入关注的是创建依赖类的方式。\n其实很多设计模式和原则都差不多，只是关注的点不同","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1579051773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220108,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590159099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40244864763","product_id":100039001,"comment_content":"AOP:“业务代码”和“非业务代码”解耦。<br>IOC：对象的“使用者”和“创建者”解耦。<br>总结的精辟！","like_count":10},{"had_liked":false,"id":171207,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1578881714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27348685490","product_id":100039001,"comment_content":"Linux 虚拟文件系统解耦系统调用和具体的文件系统实现；TCP&#47;IP 网络协议分层。","like_count":6},{"had_liked":false,"id":170431,"user_name":"桂城老托尼","can_delete":false,"product_type":"c1","uid":1306032,"ip_address":"","ucode":"139E4B8EE88B79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","comment_is_top":false,"comment_ctime":1578614845,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23053451325","product_id":100039001,"comment_content":"通过消息中间件实现的生产与消费的解耦;<br>通过SPI回调实现的主流程与个性化编排实现的解耦;<br>同步调用改为异步调用理论上也算调用与被调用的解耦;","like_count":5,"discussions":[{"author":{"id":1009422,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","nickname":"eason2017","note":"","ucode":"E070BA624FA490","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159776,"discussion_content":"够详细，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580733369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257131,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1603856147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14488758035","product_id":100039001,"comment_content":"人处理复杂性的能力是有限的，控制复杂性是软件开发最重要的工作之一。<br>代码是有生命的，它随着时间的推移，会根据运行环境的变化、需求的变化不断的生长。当代码长得过于复杂的时候，“分株”(大型重构)就是一个不可或缺的步骤。<br>“分株”的关键是解耦，最容易想到的设计思想是封装，把复杂的逻辑包起来，只提供一个简单的接口供外部使用，封装也是模块化的指导思想。<br>如果依赖关系过于复杂，可以引入中间层，专门处理复杂的依赖关系。","like_count":3},{"had_liked":false,"id":207011,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1586995110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14471896998","product_id":100039001,"comment_content":"微服务拆分也是一种高粒度的解耦","like_count":3},{"had_liked":false,"id":177570,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1581426179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14466328067","product_id":100039001,"comment_content":"mq就是很好的解耦利器，还能有效的削峰填谷","like_count":3},{"had_liked":false,"id":173373,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1579514250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14464416138","product_id":100039001,"comment_content":"打卡<br>1、如何判断代码是否需要解耦<br>直接衡量标准：画出模块与模块、类与类直接的依赖关系，如果依赖关系复杂则需要重构<br>间接标准：牵一发而动全身<br>2、如何进行解耦<br>1、封装和抽象（如linux的open函数）<br>2、增加中间层（可分阶段）<br>第一阶段：引入中间层，封装新接口。<br>第二阶段：新的模块开发基于新接口。<br>第三阶段：调用老接口的代码替换为新接口。<br>第四阶段：删除掉老的接口<br>3、模块化<br>4、利用设计原则和思想<br>1）单一职责原则<br>2）基于接口而非实现编程<br>3）依赖注入<br>4）多用组合少用继承<br>5）迪米特法则","like_count":3},{"had_liked":false,"id":170454,"user_name":"再见孙悟空","can_delete":false,"product_type":"c1","uid":1025518,"ip_address":"","ucode":"57E12A2F9CD915","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","comment_is_top":false,"comment_ctime":1578617142,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14463519030","product_id":100039001,"comment_content":"想起从 php 迁移到 Java 的 wms 项目，之前 php 里是一笼统，出库，入库，调拨，库存占用等各种模型的业务逻辑都耦合在一起，导致一个类，类里的一个方法都超级大，这样的话事物锁住的时间也很长，导致时不时找上会出错，数据库连接数不够。后来迁移到 Java 后，各个模型之间独立出来，使用消息队列将各个业务逻辑串了起来，达到了解耦的目的，维护起来也轻松许多，重要的是有时候即使出了问题，我们也能使用消息及时补偿，并不需要改动手动数据库等，事物占用时间也小了，带来了很多好处。","like_count":3,"discussions":[{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278800,"discussion_content":"跟语言无关","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591235417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281868,"discussion_content":"跟语言无关","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591836542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170443,"user_name":"王涛","can_delete":false,"product_type":"c1","uid":1556838,"ip_address":"","ucode":"0A9ACC370F112D","user_header":"https://static001.geekbang.org/account/avatar/00/17/c1/66/e8dfeef4.jpg","comment_is_top":false,"comment_ctime":1578616285,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14463518173","product_id":100039001,"comment_content":"代码解耦的第二种方式，中间层。<br>上层代码都依赖中间层代码，中间层也是使用基于借口而非实现编程。<br>抽象出中间层肯定是好的，但这样是否也会带来另一个问题: 中间层接口变动必然会影响所有上层代码调用，接口的影响面是否是变大了？如果是的话，下一步有该怎么优化呢？","like_count":3},{"had_liked":false,"id":278120,"user_name":"辉","can_delete":false,"product_type":"c1","uid":1697810,"ip_address":"","ucode":"0D7B2C24BA8BD2","user_header":"https://static001.geekbang.org/account/avatar/00/19/e8/12/74f387c8.jpg","comment_is_top":false,"comment_ctime":1612769346,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10202703938","product_id":100039001,"comment_content":"最近因为一个bug的原因，实在改不动。之前的代码逻辑太混乱，就是耦合严重，根本就不知道修改哪些地方才能解决这个bug。最终的结果就是只能重构代码。重构代码有一些比较痛苦的地方。第一你得先理解之前同事的实现逻辑。第二你需要做更细致的拆分与设计，第三你需要让你的代码能够逻辑清晰，可维护。通过重构这个模块的代码，我也收获不少。我觉得，写代码之前一定要花时间出来设计，写好一份优秀的概要设计，写代码的时间会减半。第二，所有逻辑尽可能是线性关系，不要写太多网状的关系代码，这样非常不利于后面的维护。第三，一定要利用好java语言的优秀特性，比如封装，抽象。这样写出来的代码质量会比较高。","like_count":3,"discussions":[{"author":{"id":1245468,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/1c/d638d46e.jpg","nickname":"宋世通","note":"","ucode":"C7AA3F0E6930F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370578,"discussion_content":"最近复习面向对象的概念，写之前分析好每个类的职责，一下子清晰了好多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619454790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171444,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1578924095,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10168858687","product_id":100039001,"comment_content":"打卡✔<br>在小公司的团队种 如果注释用英文怕是会被喷<br><br>看到有留言说 欠揍太长了 我不太赞同<br>越是想往刚处越要捡起基础<br>就算用了若干设计模式<br>基础的东西都搞不好有什么作用呢<br>","like_count":2,"discussions":[{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301431,"discussion_content":"那文档用什么？中文还是英文。还是没有文档。\n\n我的看法，注释要用英文。又不需要长篇大论，如果需要则说明模块或类设计不合理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598524962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573881,"discussion_content":"有什么意义  你的注释是给谁看的？ 不是给你的开发团队吗？  自以为很牛逼其实在别人看来就是个**","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653708347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301431,"ip_address":""},"score":573881,"extra":""}]},{"author":{"id":1488356,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b5/e4/e6faf686.jpg","nickname":"握了个大蚂蚱","note":"","ucode":"AD34AD4FA37371","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297559,"discussion_content":"注释用英文有点过分，异常信息啥的用用还是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596968621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170481,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1578619523,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10168554115","product_id":100039001,"comment_content":"重构是术与道的结合，道为重构的思路，指南。术是具体的手段！","like_count":2},{"had_liked":false,"id":170425,"user_name":"安静的boy","can_delete":false,"product_type":"c1","uid":1196475,"ip_address":"","ucode":"F5F44B75228A85","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/bb/21ce60d2.jpg","comment_is_top":false,"comment_ctime":1578612930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10168547522","product_id":100039001,"comment_content":"现在想想的确有很多设计原则和思想都是为了实现代码的高内聚低耦合而存在的。因为代码实现了高内聚低耦合，也就意味着代码更加可读，更加易于维护与修改，这也正是大型复杂项目所想要的。","like_count":2},{"had_liked":false,"id":250507,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1601109554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5896076850","product_id":100039001,"comment_content":"网络模型 就是典型的分层接耦","like_count":1},{"had_liked":false,"id":249699,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1600764182,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5895731478","product_id":100039001,"comment_content":"log4j、jdbc分别提供了代码调用到日志及数据库实现的解耦，使我们只需要引入具体的实现即可。是依赖倒置原则的实现。","like_count":1,"discussions":[{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537835,"discussion_content":"在前两天，log4j爆出来漏洞，哈哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639215345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202711,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1586056233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881023529","product_id":100039001,"comment_content":"在Linux系统中的VFS抽象文件系统就是一种解耦。这样扩展不同的系统就完全OK。<br>","like_count":1},{"had_liked":false,"id":188620,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1584374728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879342024","product_id":100039001,"comment_content":"其实前后端分离也是一种解耦www","like_count":1},{"had_liked":false,"id":180682,"user_name":"Li Yao","can_delete":false,"product_type":"c1","uid":1129838,"ip_address":"","ucode":"703E1E5505F70D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/6e/60680aa4.jpg","comment_is_top":false,"comment_ctime":1582363662,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5877330958","product_id":100039001,"comment_content":"“继承是一种强依赖关系，父类与子类高度耦合，且这种耦合关系非常脆弱，牵一发而动全身，父类的每一次改动都会影响所有的子类。”<br>这段话没太理解，继承的强依赖体现在什么地方呢？使用组合时对依赖对象的改动，也会影响所有依赖该对象的类吧，从这个维度看的话，组合比继承的优越之处在什么地方呢？<br>回去又看了下多用组合少用继承的那一节，还是没找到答案，希望老师解答下。","like_count":1},{"had_liked":false,"id":177932,"user_name":"张理查","can_delete":false,"product_type":"c1","uid":1003152,"ip_address":"","ucode":"1F93E631CD4B35","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/90/a8d19e7b.jpg","comment_is_top":false,"comment_ctime":1581552983,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5876520279","product_id":100039001,"comment_content":"项目管理中的项目分解其实也是解耦思想的一种提现。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510682,"discussion_content":"来得及啊 加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170516,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1578624411,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5873591707","product_id":100039001,"comment_content":"之前做过一个电商系统。交易需要记录在区块链上。当时采用的就是解耦的思想。电商系统还是负责原有的业务。通过rpc将交易数据传递到区块链服务进行入链业务。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510592,"discussion_content":"嗯嗯 加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170434,"user_name":"王涛","can_delete":false,"product_type":"c1","uid":1556838,"ip_address":"","ucode":"0A9ACC370F112D","user_header":"https://static001.geekbang.org/account/avatar/00/17/c1/66/e8dfeef4.jpg","comment_is_top":false,"comment_ctime":1578615223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873582519","product_id":100039001,"comment_content":"紧跟课程脚步，提高代码质量","like_count":1},{"had_liked":false,"id":342970,"user_name":"霍霍","can_delete":false,"product_type":"c1","uid":1542586,"ip_address":"","ucode":"A483D42AD7F72D","user_header":"https://static001.geekbang.org/account/avatar/00/17/89/ba/009ee13c.jpg","comment_is_top":false,"comment_ctime":1650554237,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1650554237","product_id":100039001,"comment_content":"解耦，分层，从基础代码设计开始，可以一直运用到高层的架构设计中去。","like_count":0},{"had_liked":false,"id":328866,"user_name":"idiot","can_delete":false,"product_type":"c1","uid":2526391,"ip_address":"","ucode":"D7A6E980B530B4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/fcftgBsticCicEEkuzB0GTkHIocX62YVTSvnhR1c94sccj42lVaYXrmcZyhzUI3l9NcvuN1rXLhXt2eBrZZ0Tw7A/132","comment_is_top":false,"comment_ctime":1640921100,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640921100","product_id":100039001,"comment_content":"中间层这里有没有更具体的例子？假设一级缓存这里有个接口A改了，原来的架构是上层都要改，但是新架构这里，只需要中间层修改吗？那样的话，需要所有涉及A的逻辑都被中间层包裹了，而且中间层的对外接口，在A修改的时候还不用变，感觉有点难啊。","like_count":0},{"had_liked":false,"id":315702,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1633946799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633946799","product_id":100039001,"comment_content":"1、解耦为何重要？<br>\t人处理复杂的能力是有限的<br>\t可测试性增强<br>\t代码质量不会差<br>2、代码是否需要「解耦」<br>\t间接看，代码是否牵一发而动全身<br>\t直接看，画出模块和模块、类与类 关系图，看是否复杂<br>3、如何给代码「解耦」<br>\t封装与抽象<br>\t中间层<br>\t模块化<br>\t其他设计思想：单一职责原则、基于接口而非实现编程、依赖注入、多用组合少用继承、迪米特法则等。当然，还有一些设计模式，比如观察者模式。","like_count":0},{"had_liked":false,"id":308590,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1510495,"ip_address":"","ucode":"C6FC61A90F202B","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/5f/4cbcbfb9.jpg","comment_is_top":false,"comment_ctime":1629693375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629693375","product_id":100039001,"comment_content":"对于系统级编程来说，一般需要在性能满足业务需求的情况下实现解耦，中间层不能加太多。","like_count":0},{"had_liked":false,"id":297012,"user_name":"李金鹏","can_delete":false,"product_type":"c1","uid":1445362,"ip_address":"","ucode":"8FCCA5B8BD8DDD","user_header":"https://static001.geekbang.org/account/avatar/00/16/0d/f2/3865fe28.jpg","comment_is_top":false,"comment_ctime":1623282820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623282820","product_id":100039001,"comment_content":"消息订阅与发布，实现调用接口的解耦","like_count":0},{"had_liked":false,"id":290663,"user_name":"Geek_56a189","can_delete":false,"product_type":"c1","uid":2586543,"ip_address":"","ucode":"F3258B958DF2FB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/KQyib1vpanF1CBYpBFadYdHPYlnv6TNtkqUMW6Xk0HoRNs5CXiaWQFguWGQicU34ykib9qX2yv3SmSHhHqia4SQ5icIg/132","comment_is_top":false,"comment_ctime":1619680440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619680440","product_id":100039001,"comment_content":"计算机底层操作系统算么，我想安装linux我就安装，一个电脑我安装win10也行","like_count":0},{"had_liked":false,"id":289104,"user_name":"小明明","can_delete":false,"product_type":"c1","uid":2055696,"ip_address":"","ucode":"CADE860269BFA4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/USbsicTvESSEM8CKwDoLsIk4IhpKFVqTyhS7zMksu8XgmiayNnlTX2aO62liavApicF5cIKZFexUZVztUvj4SRtEhw/132","comment_is_top":false,"comment_ctime":1618878362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618878362","product_id":100039001,"comment_content":"这节包含了大多工作技巧","like_count":0},{"had_liked":false,"id":288000,"user_name":"北极的大企鹅","can_delete":false,"product_type":"c1","uid":1045577,"ip_address":"","ucode":"8935346D08E109","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","comment_is_top":false,"comment_ctime":1618269623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618269623","product_id":100039001,"comment_content":"现在我参与的项目代码正在重构<br>谢谢老师","like_count":0},{"had_liked":false,"id":283924,"user_name":"前人种树","can_delete":false,"product_type":"c1","uid":1307269,"ip_address":"","ucode":"64D1B7F87B03E2","user_header":"https://static001.geekbang.org/account/avatar/00/13/f2/85/7d3ce959.jpg","comment_is_top":false,"comment_ctime":1615984670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615984670","product_id":100039001,"comment_content":"MVC 分层设计，Model层是中间层<br>微服务RPC是模块化<br>angular，vue等通过各种生命周期的钩子做控制反转来解除业务代码 和 框架代码的耦合<br>go 中的 Reader 和 Writer 基于接口而非实现，减少了底层代码和上层代码的耦合提高了可维护性，各种小接口（只有一个函数）使用了迪米特法则，减少了强耦合","like_count":0},{"had_liked":false,"id":281928,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1614954260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614954260","product_id":100039001,"comment_content":"看起来增加中间层是一个几乎适用于所有解耦的好办法，可以这样说吗？还有什么类似的而且更优雅的解耦方式呢？","like_count":0},{"had_liked":false,"id":272742,"user_name":"zh","can_delete":false,"product_type":"c1","uid":1982711,"ip_address":"","ucode":"98772B1B6C6E06","user_header":"https://static001.geekbang.org/account/avatar/00/1e/40/f7/e62bbc62.jpg","comment_is_top":false,"comment_ctime":1610259024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610259024","product_id":100039001,"comment_content":"C++ STL库容器和算法的解耦设计：每个容器实现标准的迭代器，算法实现中就不需要根据特定数据结构的容器而实现多个版本","like_count":0},{"had_liked":false,"id":259188,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1604648407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604648407","product_id":100039001,"comment_content":"看到留言那么多实践了，我提一个线程池","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510062,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250551,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1601129392,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1601129392","product_id":100039001,"comment_content":"解耦无处不在<br>各种消息队列，微服务基于注册中心rpc解耦两个系统直接调用<br>","like_count":0},{"had_liked":false,"id":246786,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599477507,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599477507","product_id":100039001,"comment_content":"MVC架构设计、前后端分开设计、远程调用","like_count":0},{"had_liked":false,"id":246016,"user_name":"Geek_35cfdd","can_delete":false,"product_type":"c1","uid":1792214,"ip_address":"","ucode":"AD9615ABB4CA25","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoiaP1gptuBzj3AXMpY8yLTIkpuarouOVzLde4636UJ7zAgnOEZibiaAIRVAicFaO64ftH45YOn1pD3VA/132","comment_is_top":false,"comment_ctime":1599133959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599133959","product_id":100039001,"comment_content":"组合是弱依赖关系？","like_count":0},{"had_liked":false,"id":243761,"user_name":"G","can_delete":false,"product_type":"c1","uid":1547293,"ip_address":"","ucode":"50D8E1ADAE0330","user_header":"https://static001.geekbang.org/account/avatar/00/17/9c/1d/34c96367.jpg","comment_is_top":false,"comment_ctime":1598268740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598268740","product_id":100039001,"comment_content":"解耦都是增加系统总体复杂性的，因为引入了第三者，而第三者对本来耦合的两者都有耦合关系。<br>如果编码人员能力不深厚的话并且没有做好测试，反而让系统变得各种bug，在我看来，解耦的目的最根本的是因为系统将要引入第四者，比如单元测试，或者被其它模块复用。所以一般在重新开发新功能时，提前做好准备而重构","like_count":0},{"had_liked":false,"id":240767,"user_name":"时光守护者-基兰","can_delete":false,"product_type":"c1","uid":1554995,"ip_address":"","ucode":"F0B0887B1979D2","user_header":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","comment_is_top":false,"comment_ctime":1597058416,"is_pvip":false,"replies":[{"id":"89224","content":"这个不好定量来区分的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1597411793,"ip_address":"","comment_id":240767,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597058416","product_id":100039001,"comment_content":"解耦合耦合性低怎么区分呢？","like_count":0},{"had_liked":false,"id":236113,"user_name":"Java垒墙工程师","can_delete":false,"product_type":"c1","uid":1937062,"ip_address":"","ucode":"E76AE44A9C76AE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","comment_is_top":false,"comment_ctime":1595319807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595319807","product_id":100039001,"comment_content":"1、java、spring、dubbo的spi机制也是解耦对象的构造和使用<br>2、国际化<br>3、消息中间件解耦生产者和向消费者，当然生产者模式也是解耦<br>4、观察者模式、模板方法模式。。。","like_count":0},{"had_liked":false,"id":220116,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590159882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590159882","product_id":100039001,"comment_content":"人脑处理复杂问题的方法是拆分，把大系统横向拆分成多个模块；纵向拆成三层,不跨层依赖。模块之间依赖要简单清新，每层之间依赖要扁平，最好调用链长度控制在三层。","like_count":0},{"had_liked":false,"id":218426,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1589800928,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589800928","product_id":100039001,"comment_content":"【设计模式笔记30】20200518<br>工作中最常见的解耦是消息队列和RPC。这两者相对都是从大模块来划分的，比如服务A要调用服务B，那么职责上两者就是不相关的。从微观看，大模块的代码由小模块代码组成，小模块代码由具体的类组成，每个类由具体的函数组成。每个函数每个类都要考虑是否满足高内聚低耦合的要求，具体的参考标准是单一职责原则、基于接口而非实现编程、优先使用组合而不是继承、迪米特法则（只依赖必要的接口）","like_count":0},{"had_liked":false,"id":205941,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1586760803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586760803","product_id":100039001,"comment_content":"打卡30","like_count":0},{"had_liked":false,"id":204821,"user_name":"Tp_yang","can_delete":false,"product_type":"c1","uid":1183737,"ip_address":"","ucode":"ED41B81360CF18","user_header":"https://static001.geekbang.org/account/avatar/00/12/0f/f9/eb40d5e7.jpg","comment_is_top":false,"comment_ctime":1586479563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586479563","product_id":100039001,"comment_content":"依赖注入，javassist模版代码生成，字节码增强都属于解偶吧","like_count":0},{"had_liked":false,"id":202712,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1586056291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586056291","product_id":100039001,"comment_content":"<br>在应用系统中，消息队列和RPC也是服务调用关系的解耦。","like_count":0},{"had_liked":false,"id":202607,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1586014872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586014872","product_id":100039001,"comment_content":"解耦代码是为了让代码不过度复杂，实现高内聚，低耦合。<br><br>代码需要结构的条件是，修改一行代码，牵扯很大或者说通过画类和类之间的依赖关系，发现互相依赖太多等。这时候就需要进行解耦。<br><br>解构的方式：<br>1.封装和抽象<br>2.中间层<br>3.模块化<br>4.其它的设计模式","like_count":0},{"had_liked":false,"id":201762,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585834119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585834119","product_id":100039001,"comment_content":"mvc分层思想，jdbc 接口规范  ，jms java消息服务，门面模式","like_count":0},{"had_liked":false,"id":192773,"user_name":"马球先生","can_delete":false,"product_type":"c1","uid":1119609,"ip_address":"","ucode":"858C2CE0E494C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/79/efde2a69.jpg","comment_is_top":false,"comment_ctime":1584872377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584872377","product_id":100039001,"comment_content":"刚开始做Android开发的时候，所有业务逻辑都写在Activity里面。<br>后来有了MVC &#47; MVP &#47; MVVM 这些模式，<br>把本来在Activity里写的逻辑解耦到其他层中","like_count":0},{"had_liked":false,"id":192650,"user_name":"趣稚鬼👻","can_delete":false,"product_type":"c1","uid":1838042,"ip_address":"","ucode":"8AE6776DCA8541","user_header":"https://static001.geekbang.org/account/avatar/00/1c/0b/da/34be57e8.jpg","comment_is_top":false,"comment_ctime":1584866021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584866021","product_id":100039001,"comment_content":"JDBC","like_count":0},{"had_liked":false,"id":184424,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1583312246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583312246","product_id":100039001,"comment_content":"监ting器，算是跟Aop有点类似的方向。<br>","like_count":0},{"had_liked":false,"id":183216,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1582974392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582974392","product_id":100039001,"comment_content":"读了这个专栏这么久，突然想到之前学习的经济学，关于分工以提供效率的理论，不同的工种有不同的职责。虽然代码是我们一个人在写，但是工作是很多的类一起协同。我们总以为一个类就是计算机，所以它不会累，可以懂得一切，但事实上每一个类背后都是程序员，都不应该变得太复杂，尊重分工的经济学理论。<br><br>想想每一个类是一个独立的人，要是承担得太多，就真的很差了，救救class吧。","like_count":0},{"had_liked":false,"id":182866,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582879416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582879416","product_id":100039001,"comment_content":"最常见的,就是消息队列了,生产者并不知道消费者是谁,只需要将消息放入队列中即可,<br>我个人认为,异步调用也是一种解耦思想,单独启用一个线程,那么新启用的线程执行什么,返回什么,在没有明确要求的时候,启用者也可以不关心<br>","like_count":0},{"had_liked":false,"id":182843,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1582873962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582873962","product_id":100039001,"comment_content":"工作中想到的解耦：消息中间件","like_count":0},{"had_liked":false,"id":181512,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1582553435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582553435","product_id":100039001,"comment_content":"消息队列吧，生产者消费者<br>微服务，各个服务之间通过 http接口(feigin)的调用，属于松耦合了","like_count":0},{"had_liked":false,"id":181163,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1582509432,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582509432","product_id":100039001,"comment_content":"高内聚、松耦合：1、依赖注入，单一职责，迪米特法则，组合而非继承，基于接口而非实现；理论在脑子里开始打架了，","like_count":0,"discussions":[{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340079,"discussion_content":"哈哈哈， 多联系实际代码想想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609899478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177882,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1581521340,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581521340","product_id":100039001,"comment_content":"Java 线程池中的 BlockingQueue 解耦 task 和 worker","like_count":0},{"had_liked":false,"id":177537,"user_name":"BitInit","can_delete":false,"product_type":"c1","uid":1007271,"ip_address":"","ucode":"BDDDA0F51B1EFB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/a7/8dc374e2.jpg","comment_is_top":false,"comment_ctime":1581412933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581412933","product_id":100039001,"comment_content":"Java里面SPI机制","like_count":0},{"had_liked":false,"id":175647,"user_name":"Geek_ab3d9a","can_delete":false,"product_type":"c1","uid":1550553,"ip_address":"","ucode":"1AFEE5FA59D470","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eol8MiawYVfCtkaFL9DFGoWpuajsKicwyt7IWm07JfrLMDuksEZJqia4Rbicw0biayokhgvSK0rUXIAngQ/132","comment_is_top":false,"comment_ctime":1580788978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580788978","product_id":100039001,"comment_content":"老师，请问  权限控制怎么做成模块化？现在的流程是：1判断是否是管理员，是哪个部门的   2  从数据库根据条件查询出数据。如果是管理员查询出他们部门所有数据。如果不是，只查询自己修改维护的数据。     感觉查询数据和权限控制有点难分开。","like_count":0},{"had_liked":false,"id":175491,"user_name":"eason2017","can_delete":false,"product_type":"c1","uid":1009422,"ip_address":"","ucode":"E070BA624FA490","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","comment_is_top":false,"comment_ctime":1580733275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580733275","product_id":100039001,"comment_content":"通过消息中间件实现业务复杂逻辑的解耦。","like_count":0},{"had_liked":false,"id":174801,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1580391661,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1580391661","product_id":100039001,"comment_content":"mq实现解耦","like_count":0},{"had_liked":false,"id":173481,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1579572141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579572141","product_id":100039001,"comment_content":"消息中间件就是使用的解耦的思想来设计的","like_count":0},{"had_liked":false,"id":173032,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1579413896,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1579413896","product_id":100039001,"comment_content":"通过各种中间件，让应用模块化，也是解耦的一种方式吧。<br><br>我们项目组现在，逐渐用了消息队列，从我的角度来看，用户体验都有一个提升","like_count":0},{"had_liked":false,"id":173012,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1579407262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579407262","product_id":100039001,"comment_content":"jvm 跨平台，jdk 中的异步线程，现代电脑的高速缓存，前后端分离部署等等，均可视为解偶。","like_count":0},{"had_liked":false,"id":172995,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1579404477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579404477","product_id":100039001,"comment_content":"我还有一个强烈的感受：技术实现时总期望可以能够抽象成简单的模式，但是一单底层向上服务足够简单的时候，就容易吃掉很多信息。尤其在异常的时候，站在产品的角度可以期望可以给用户提示出当时的错误信息指标等。实际场景的负责和技术期望的简单归一化这中间有什么可以判断取舍的标准吗？","like_count":0},{"had_liked":false,"id":172994,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1579404313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579404313","product_id":100039001,"comment_content":"这种解耦会不会有另外一个问题：如何有一个全局视角，串联整体内容。<br>举例：<br>使用消息来隔离时，当生产方发生业务流程变更时，原本废弃的消息都不知道是否可以废弃，是否还有人在使用。谁在使用的排查就比较困难，如果是api，直接通过api的调用看就知道了。","like_count":0},{"had_liked":false,"id":172955,"user_name":"jaryoung","can_delete":false,"product_type":"c1","uid":1077406,"ip_address":"","ucode":"6E72D107DB7E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","comment_is_top":false,"comment_ctime":1579393746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579393746","product_id":100039001,"comment_content":"解耦，解开藕断丝连的东西，常用就有基于事件编程（其实就是观察者模式）；利用中间件，利用消息中间件进行统一转发（其实还是观察者模式的一种运用）；其中观察者模式，其实实现又分为推拉模式，或者混合推拉模式。  ","like_count":0},{"had_liked":false,"id":172054,"user_name":"jxs1211","can_delete":false,"product_type":"c1","uid":1101006,"ip_address":"","ucode":"B7F1F2D84389E7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","comment_is_top":false,"comment_ctime":1579080061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579080061","product_id":100039001,"comment_content":"代码依赖关系可视化的工具可以推荐吗","like_count":0},{"had_liked":false,"id":171154,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1578875118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578875118","product_id":100039001,"comment_content":"rabbitmq等消息队列，采用了观察者模式，一定程度上实现了解耦","like_count":0},{"had_liked":false,"id":171056,"user_name":"番茄炒西红柿","can_delete":false,"product_type":"c1","uid":1690242,"ip_address":"","ucode":"13F47BABAB2110","user_header":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","comment_is_top":false,"comment_ctime":1578834300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578834300","product_id":100039001,"comment_content":"解耦这是我突然想到现在推行的事件驱动编程，本身就是解耦思想的一种体现","like_count":0},{"had_liked":false,"id":170886,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1578750728,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578750728","product_id":100039001,"comment_content":"消息列队，事件驱动，都是典型的解耦。","like_count":0},{"had_liked":false,"id":170776,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1578712713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578712713","product_id":100039001,"comment_content":"目前能想到的解耦手段有以下两个：<br>1. 引入消息中间件实现业务系统之间的解耦；<br>2. 分层思想，如MVC思想，网络的OSI七层参考模型；","like_count":0},{"had_liked":false,"id":170700,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1578668559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578668559","product_id":100039001,"comment_content":"打卡✔<br>","like_count":0},{"had_liked":false,"id":170658,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1578654345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578654345","product_id":100039001,"comment_content":"中间件也可以解耦，MVC架构也是解耦。","like_count":0},{"had_liked":false,"id":170643,"user_name":"此鱼不得水","can_delete":false,"product_type":"c1","uid":1257453,"ip_address":"","ucode":"95268E823FB4D2","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ed/a87bb8fa.jpg","comment_is_top":false,"comment_ctime":1578649861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578649861","product_id":100039001,"comment_content":"大佬多来一些例子哈哈","like_count":0},{"had_liked":false,"id":170558,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1578632681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578632681","product_id":100039001,"comment_content":"1.防腐层，解耦本地服务和远程服务的api依赖。但这不过是中间层的一种落地范式，其核心原则也属于设计原则中的迪米乐和接口隔离（由api客服端实现）。<br><br>2.事件机制，解决跨服务的事务操作依赖。常规范式就是mq了。（进程级的事件机制也有，但分布式场景很少用，毕竟mq能做的进程级事件不一定能做比如消息持久化，进程级事件能做的mq都能做）<br><br>3.镜像，重新定义发布单元。解决可执行代码和运行环境的依赖。容器的事实标准就是docker，而编排主流则是k8s。","like_count":0},{"had_liked":false,"id":170555,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1578631953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578631953","product_id":100039001,"comment_content":"Mq消息通知，数据缓存通过mysql binlog监听更新, 数据的领域层serivce，和业务service之间的调用关系，spring security中authentication实现和Session的解耦","like_count":0},{"had_liked":false,"id":170508,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1578622978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578622978","product_id":100039001,"comment_content":"文中举的那个利用中间层让重构和开发不冲突的例子里：第一阶段：引入一个中间层，包裹老的接口，提供新的接口定义。<br>这里的“提供新的接口定义”，新接口直接就可用了吗？","like_count":0},{"had_liked":false,"id":170498,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1578622012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578622012","product_id":100039001,"comment_content":"解耦的目的是维持系统中组件之间的交互关系清晰.<br><br>封装与抽象,中间层,模块化及各种设计思想是解耦的手段.<br><br>解耦的最终诉求是系统的可维护性.<br><br>课堂讨论:<br>解耦最常见的应用场景是事件总线(EventBus)<br>EventBus通过引入中间件的手段, 使事件(Event)的发布者(Publisher)与事件的订阅者(Subscriber)解耦.<br>如果没有EventBus,就会造成Publisher与Subscriber强耦合.<br><br>除此以外, 依赖注入(Dependency Injection)也是常见的解耦手段.<br><br>","like_count":0},{"had_liked":false,"id":170468,"user_name":"天意林","can_delete":false,"product_type":"c1","uid":1737293,"ip_address":"","ucode":"BADFCA17DFF5B6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GrILCt7gOLpB4ONPUnZ1uR423b2pmmXSwlADfOoYpXnRBcCtsnoe5AhWOqk2aqDnRyhuwv7LGX66ic02Ltze7cg/132","comment_is_top":false,"comment_ctime":1578618460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578618460","product_id":100039001,"comment_content":"设计原则目的为了提高代码质量，设计模式可以理解为是为了达到设计原则要求的一种技术手段，比如观察者模式、命令模式、代理模式等都可以有效的降低代码耦合度。","like_count":0},{"had_liked":false,"id":170462,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1578617685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578617685","product_id":100039001,"comment_content":"laravel的服务提供者","like_count":0},{"had_liked":false,"id":170458,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1578617435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578617435","product_id":100039001,"comment_content":"打卡打卡～～～","like_count":0},{"had_liked":false,"id":170455,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1578617186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578617186","product_id":100039001,"comment_content":"个人理解：策略模式就是行为与对象之间的解耦（不再靠继承重写来修改行为）命令模式就是方法调用与对象之间的解耦（我不用你觉得我要我觉得我应该调用哪个方法）","like_count":0},{"had_liked":false,"id":170451,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1578616986,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1578616986","product_id":100039001,"comment_content":"前后端分离其实也是一种解耦，让不同的工程师关注不同的部分；后端架构的MVC模式也是解耦，细节一点的常用的数据库中间件如mybatis把数据库的操作和应用逻辑隔离开，这都是解耦，所以解耦真是无处不在啊！","like_count":0},{"had_liked":false,"id":170442,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1578616120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578616120","product_id":100039001,"comment_content":"MVC能实现显示与数据之间的解耦，微服务能实现服务与服务之间的解藕","like_count":0},{"had_liked":false,"id":170556,"user_name":"lmdcx","can_delete":false,"product_type":"c1","uid":1334409,"ip_address":"","ucode":"F2CDD0091ADFD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","comment_is_top":false,"comment_ctime":1578631989,"is_pvip":false,"discussion_count":20,"race_medal":0,"score":"688773399349","product_id":100039001,"comment_content":"必须留个言，倾诉倾诉。<br>昨天晚上就因为看争哥直播，3岁儿子把 mac 的屏给我弄碎了，这一下子看直播的代价也太惨重了，5千多。<br>重点是我还只看了个开头o(╥﹏╥)o","like_count":161,"discussions":[{"author":{"id":1345064,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ericCme76GR5tsxktQjbJgIurEvjqpsia58HqagibrhaGshiaMvvTMKqBh6XWQdwBoJTV2oB4enYjBsCw/132","nickname":"沧海一声笑哈哈","note":"","ucode":"4086BD04D68673","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275380,"discussion_content":"他是继承你的，可能是你问题，也可能是新特性","likes_number":135,"is_delete":false,"is_hidden":false,"ctime":1590711147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1466335,"avatar":"https://static001.geekbang.org/account/avatar/00/16/5f/df/3c4881f0.jpg","nickname":"Geek","note":"","ucode":"1B8EB2C26DE4EC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1345064,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ericCme76GR5tsxktQjbJgIurEvjqpsia58HqagibrhaGshiaMvvTMKqBh6XWQdwBoJTV2oB4enYjBsCw/132","nickname":"沧海一声笑哈哈","note":"","ucode":"4086BD04D68673","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309458,"discussion_content":"666","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601294033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":275380,"ip_address":""},"score":309458,"extra":""},{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1345064,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ericCme76GR5tsxktQjbJgIurEvjqpsia58HqagibrhaGshiaMvvTMKqBh6XWQdwBoJTV2oB4enYjBsCw/132","nickname":"沧海一声笑哈哈","note":"","ucode":"4086BD04D68673","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537834,"discussion_content":"自古评论出神人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639215224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":275380,"ip_address":""},"score":537834,"extra":""},{"author":{"id":2960877,"avatar":"","nickname":"冯仁彬","note":"","ucode":"6E5CA08BC6366B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1345064,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ericCme76GR5tsxktQjbJgIurEvjqpsia58HqagibrhaGshiaMvvTMKqBh6XWQdwBoJTV2oB4enYjBsCw/132","nickname":"沧海一声笑哈哈","note":"","ucode":"4086BD04D68673","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585233,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661410698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":275380,"ip_address":"四川"},"score":585233,"extra":""}]},{"author":{"id":1591223,"avatar":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","nickname":"JerryZhu","note":"","ucode":"76850CD45786C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304764,"discussion_content":"我怀疑你在秀有老婆。。","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1599659349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1274117,"avatar":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","nickname":"👽","note":"","ucode":"D313AF941B412D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195816,"discussion_content":"不是说程序员都没有女朋友的么？哪来的孩子？","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1583312190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1334409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","nickname":"lmdcx","note":"","ucode":"F2CDD0091ADFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1274117,"avatar":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","nickname":"👽","note":"","ucode":"D313AF941B412D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":195924,"discussion_content":"Java不仅可以new 对象，还可以继承","likes_number":29,"is_delete":false,"is_hidden":false,"ctime":1583322049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":195816,"ip_address":""},"score":195924,"extra":""}]},{"author":{"id":1360999,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c4/67/0a66b797.jpg","nickname":"长路漫","note":"","ucode":"9B4ACCA07D0269","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347950,"discussion_content":"可以适配器模式，叫你儿子翻译给你听","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1612397088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":171435,"discussion_content":"我才知道有直播！","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581698263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132463,"discussion_content":"说啥呢! 争哥给你换个16寸的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1578910828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1334409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","nickname":"lmdcx","note":"","ucode":"F2CDD0091ADFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1161271,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","nickname":"不似旧日","note":"","ucode":"DF4C5E3AB9570C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132807,"discussion_content":"@争哥，我就在咱们设计模式讨论群，坐等16寸了（＾ω＾）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578925942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":132463,"ip_address":""},"score":132807,"extra":""},{"author":{"id":1194614,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/76/e9f18792.jpg","nickname":".","note":"","ucode":"2FBBAB303A4D5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1334409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","nickname":"lmdcx","note":"","ucode":"F2CDD0091ADFD7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":133329,"discussion_content":"请问设计模式讨论群怎么加入。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578961676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":132807,"ip_address":""},"score":133329,"extra":""},{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1194614,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/76/e9f18792.jpg","nickname":".","note":"","ucode":"2FBBAB303A4D5A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":134787,"discussion_content":"加小争哥微信：wangzheng0822\n让他拉你进群","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1579050687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":133329,"ip_address":""},"score":134787,"extra":""}]},{"author":{"id":1045577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","nickname":"北极的大企鹅","note":"","ucode":"8935346D08E109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376510,"discussion_content":"前一段时间买的mac 1w多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622169249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1228518,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","nickname":"Edward Lee","note":"","ucode":"156223F1D7E94A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":167830,"discussion_content":"我居然错过直播了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581521199,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1602420,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/74/3bf4b74e.jpg","nickname":"阿德","note":"","ucode":"186D5E19E3CB6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141335,"discussion_content":"争哥之前的数据结构与算法之美吗，不是完结了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579413227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1492125,"avatar":"https://static001.geekbang.org/account/avatar/00/16/c4/9d/7c4dbcd9.jpg","nickname":"迁橘","note":"","ucode":"8FE37B7CA6CB74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128571,"discussion_content":"大佬，啥直播，有回放么，给个链接看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578651552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1334409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIjRETqRjvLESLDZkNTjIiaSibtNYBaS1o8WMUicOFn3ycF3Mgh6LRJibqSBjVBjiaO2ibW0gHkafATb21A/132","nickname":"lmdcx","note":"","ucode":"F2CDD0091ADFD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1492125,"avatar":"https://static001.geekbang.org/account/avatar/00/16/c4/9d/7c4dbcd9.jpg","nickname":"迁橘","note":"","ucode":"8FE37B7CA6CB74","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128974,"discussion_content":"没有回放╮(╯_╰)╭ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578668642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":128571,"ip_address":""},"score":128974,"extra":""},{"author":{"id":1386201,"avatar":"https://static001.geekbang.org/account/avatar/00/15/26/d9/f7e96590.jpg","nickname":"yes","note":"","ucode":"612BF6884ED6CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1492125,"avatar":"https://static001.geekbang.org/account/avatar/00/16/c4/9d/7c4dbcd9.jpg","nickname":"迁橘","note":"","ucode":"8FE37B7CA6CB74","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":129534,"discussion_content":"直播数据结构和算法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578711693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":128571,"ip_address":""},"score":129534,"extra":""}]}]},{"had_liked":false,"id":188721,"user_name":"shniu","can_delete":false,"product_type":"c1","uid":1019555,"ip_address":"","ucode":"E64CD8BED96D8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/a3/d7e5fe8a.jpg","comment_is_top":false,"comment_ctime":1584408160,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"293642184288","product_id":100039001,"comment_content":"1. Spring中的事件监听机制，是解耦的设计，利用观察者模式<br>2. 微服务中服务注册与发现是解耦的设计，引入中间层注册中心来实现<br>3. 调用链路跟踪是解耦的设计，将调用链的收集和业务代码解耦，利用动态代理来实现<br>4. Ribbon的客户端负载均衡也能算是一种解耦的设计，利用策略模式和模版方法，解耦了具体的负载算法的实现，而且还可以自定义<br>5. 最近在了解Service Mesh，sidecar 的 Proxy 也算是解耦的设计，利用边车模式代理了服务间的网络通信、监控等和实际业务无关的通用逻辑<br>6. 。。。","like_count":69,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588438,"discussion_content":"非常喜欢这样的评论，能学习到很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663761282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","nickname":"北极的大企鹅","note":"","ucode":"8935346D08E109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376511,"discussion_content":"666\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622169289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340073,"discussion_content":"不错， 大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609897917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112490,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","nickname":"龙猫","note":"","ucode":"FD726CC969EF9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298949,"discussion_content":"牛。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597487428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170437,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1578615654,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"224916915046","product_id":100039001,"comment_content":"消息队列，事件监听实现了被观察者和观察者的解耦！<br>","like_count":53,"discussions":[{"author":{"id":1067450,"avatar":"https://static001.geekbang.org/account/avatar/00/10/49/ba/23c9246a.jpg","nickname":"mαnajay","note":"","ucode":"6DE9FBD1BEC8AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372203,"discussion_content":"中间层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620223620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170520,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1578625067,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"147607513131","product_id":100039001,"comment_content":"docker 通过容器打包应用，解耦应用和运行平台。","like_count":35},{"had_liked":false,"id":170464,"user_name":"Ken张云忠","can_delete":false,"product_type":"c1","uid":1134288,"ip_address":"","ucode":"D0BAC9FC17DE2B","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","comment_is_top":false,"comment_ctime":1578617761,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83182996385","product_id":100039001,"comment_content":"实际上，在我们平时的开发中，解耦的思想到处可见，比如，Spring 中的 AOP 能实现业务与非业务代码的解耦，IOC 能实现对象的构造和使用的解耦。<br>除此之外，你还能想到哪些解耦的应用场景吗？<br>解耦是人类应对复杂性问题的有效手段,解耦的核心是拆分,横向可以拆分出不同的模块,纵向可以拆分出不同的工序,然后就有了人类的大分工协作,分工协作可以把大规模的人有效组织起来参与社会大生产,最终推动社会生产力的进步.<br>解耦场景如国家机器的运转,国务院有国防部&#47;人民银行&#47;财政部&#47;审计署&#47;农业部&#47;保障部&#47;卫生部&#47;教育部&#47;司法部&#47;交通部&#47;水力部&#47;建设部&#47;信息产业部&#47;计委等不同部门组成,另外各个地方政府又有一套完整的组织体系共同组成中国的政府系统.各部各司其职,如人民银行负责货币政策的调整,财政部负责税收政策的调整等.<br>企业的组织运转也是解耦的,企业内部不同的职能部门,如计财部&#47;人力部&#47;技术部&#47;市场部&#47;运营部.<br>技术部又有不同的岗位,如产品经理&#47;UI&#47;开发&#47;测试&#47;运维.","like_count":20},{"had_liked":false,"id":170460,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1578617578,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"83182996202","product_id":100039001,"comment_content":"设计模式_30<br># 作业<br>消息队列，作为观察者模式的的代表，极大程度地实现了解耦，也在很大程度上解决了资源有限时的高并发崩溃。<br>我认为API的使用也算是一种解耦吧，将客户端与服务端，将不同模块的服务可以高效配合，但不关心对方的实现。现在的web项目普遍使用了前后端分离的方式，其实在这之前还有一种混合(耦合)的方式，前后端的代码在一个仓库中，前端的细微修改要发布整个项目，极容易出错。<br><br># 感受<br>我们现在技术，很大程度上解决了人脑解决不了的速度问题和复杂性问题，速度问题主要取决于硬件(只要代码不是特别糟)，复杂性问题就成了程序员的重大难题，因为它违反直觉，它的设计起来困难且更需要耐心。<br><br>另外，可以开始复习了。。。文中提到的原则有些已经记不清要点了。","like_count":20,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588440,"discussion_content":"判断是否该复习的标准就是当记不起来的时候，稳","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663761455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134288,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","nickname":"Ken张云忠","note":"","ucode":"D0BAC9FC17DE2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128201,"discussion_content":"小四  看好你","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578619897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171351,"user_name":"lyshrine","can_delete":false,"product_type":"c1","uid":1058278,"ip_address":"","ucode":"497551F047A5C6","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/e6/a69cff76.jpg","comment_is_top":false,"comment_ctime":1578906824,"is_pvip":false,"replies":[{"id":"67733","content":"是的，从不同的角度来讲的，实际上可以看做一回事","user_name":"作者回复","comment_id":171351,"uid":"1190123","ip_address":"","utype":1,"ctime":1580116418,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"44528579784","product_id":100039001,"comment_content":"依赖注入是不是也算是组合？","like_count":10,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481309,"discussion_content":"是的，从不同的角度来讲的，实际上可以看做一回事","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580116418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":134824,"discussion_content":"组合关注的是类与类之间的依赖关系，依赖注入关注的是创建依赖类的方式。\n其实很多设计模式和原则都差不多，只是关注的点不同","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1579051773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220108,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590159099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40244864763","product_id":100039001,"comment_content":"AOP:“业务代码”和“非业务代码”解耦。<br>IOC：对象的“使用者”和“创建者”解耦。<br>总结的精辟！","like_count":10},{"had_liked":false,"id":171207,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1578881714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27348685490","product_id":100039001,"comment_content":"Linux 虚拟文件系统解耦系统调用和具体的文件系统实现；TCP&#47;IP 网络协议分层。","like_count":6},{"had_liked":false,"id":170431,"user_name":"桂城老托尼","can_delete":false,"product_type":"c1","uid":1306032,"ip_address":"","ucode":"139E4B8EE88B79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","comment_is_top":false,"comment_ctime":1578614845,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23053451325","product_id":100039001,"comment_content":"通过消息中间件实现的生产与消费的解耦;<br>通过SPI回调实现的主流程与个性化编排实现的解耦;<br>同步调用改为异步调用理论上也算调用与被调用的解耦;","like_count":5,"discussions":[{"author":{"id":1009422,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","nickname":"eason2017","note":"","ucode":"E070BA624FA490","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159776,"discussion_content":"够详细，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580733369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257131,"user_name":"郑大钱","can_delete":false,"product_type":"c1","uid":1503067,"ip_address":"","ucode":"114CF48056880E","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","comment_is_top":false,"comment_ctime":1603856147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14488758035","product_id":100039001,"comment_content":"人处理复杂性的能力是有限的，控制复杂性是软件开发最重要的工作之一。<br>代码是有生命的，它随着时间的推移，会根据运行环境的变化、需求的变化不断的生长。当代码长得过于复杂的时候，“分株”(大型重构)就是一个不可或缺的步骤。<br>“分株”的关键是解耦，最容易想到的设计思想是封装，把复杂的逻辑包起来，只提供一个简单的接口供外部使用，封装也是模块化的指导思想。<br>如果依赖关系过于复杂，可以引入中间层，专门处理复杂的依赖关系。","like_count":3},{"had_liked":false,"id":207011,"user_name":"Cutler","can_delete":false,"product_type":"c1","uid":1228136,"ip_address":"","ucode":"2EDECFE039845B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bd/68/3fd6428d.jpg","comment_is_top":false,"comment_ctime":1586995110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14471896998","product_id":100039001,"comment_content":"微服务拆分也是一种高粒度的解耦","like_count":3},{"had_liked":false,"id":177570,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1581426179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14466328067","product_id":100039001,"comment_content":"mq就是很好的解耦利器，还能有效的削峰填谷","like_count":3},{"had_liked":false,"id":173373,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1579514250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14464416138","product_id":100039001,"comment_content":"打卡<br>1、如何判断代码是否需要解耦<br>直接衡量标准：画出模块与模块、类与类直接的依赖关系，如果依赖关系复杂则需要重构<br>间接标准：牵一发而动全身<br>2、如何进行解耦<br>1、封装和抽象（如linux的open函数）<br>2、增加中间层（可分阶段）<br>第一阶段：引入中间层，封装新接口。<br>第二阶段：新的模块开发基于新接口。<br>第三阶段：调用老接口的代码替换为新接口。<br>第四阶段：删除掉老的接口<br>3、模块化<br>4、利用设计原则和思想<br>1）单一职责原则<br>2）基于接口而非实现编程<br>3）依赖注入<br>4）多用组合少用继承<br>5）迪米特法则","like_count":3},{"had_liked":false,"id":170454,"user_name":"再见孙悟空","can_delete":false,"product_type":"c1","uid":1025518,"ip_address":"","ucode":"57E12A2F9CD915","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/ee/6bbac848.jpg","comment_is_top":false,"comment_ctime":1578617142,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14463519030","product_id":100039001,"comment_content":"想起从 php 迁移到 Java 的 wms 项目，之前 php 里是一笼统，出库，入库，调拨，库存占用等各种模型的业务逻辑都耦合在一起，导致一个类，类里的一个方法都超级大，这样的话事物锁住的时间也很长，导致时不时找上会出错，数据库连接数不够。后来迁移到 Java 后，各个模型之间独立出来，使用消息队列将各个业务逻辑串了起来，达到了解耦的目的，维护起来也轻松许多，重要的是有时候即使出了问题，我们也能使用消息及时补偿，并不需要改动手动数据库等，事物占用时间也小了，带来了很多好处。","like_count":3,"discussions":[{"author":{"id":1055334,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","nickname":"苦行僧","note":"","ucode":"726024A9A9CF44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278800,"discussion_content":"跟语言无关","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1591235417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281868,"discussion_content":"跟语言无关","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591836542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170443,"user_name":"王涛","can_delete":false,"product_type":"c1","uid":1556838,"ip_address":"","ucode":"0A9ACC370F112D","user_header":"https://static001.geekbang.org/account/avatar/00/17/c1/66/e8dfeef4.jpg","comment_is_top":false,"comment_ctime":1578616285,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14463518173","product_id":100039001,"comment_content":"代码解耦的第二种方式，中间层。<br>上层代码都依赖中间层代码，中间层也是使用基于借口而非实现编程。<br>抽象出中间层肯定是好的，但这样是否也会带来另一个问题: 中间层接口变动必然会影响所有上层代码调用，接口的影响面是否是变大了？如果是的话，下一步有该怎么优化呢？","like_count":3,"discussions":[{"author":{"id":1178683,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fc/3b/c6b5b64f.jpg","nickname":"bboy孙晨杰","note":"","ucode":"D7389FB3368749","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143036,"discussion_content":"个人理解中间层引入的目的，主要是为了隔离底层服务的变化对调用层的影响，因此中间层的接口状态肯定是最为稳定的，当底层服务出现变化时只需要修改中间层的实现逻辑，调用层是完全无感的；所以如果中间层的接口设计时一定要通用灵活，避免修改的情况出现。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1579488272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":188062,"discussion_content":"中间层更多的作用是统一输入输出，让双方不需要关心信息的变化","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582792123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278120,"user_name":"辉","can_delete":false,"product_type":"c1","uid":1697810,"ip_address":"","ucode":"0D7B2C24BA8BD2","user_header":"https://static001.geekbang.org/account/avatar/00/19/e8/12/74f387c8.jpg","comment_is_top":false,"comment_ctime":1612769346,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10202703938","product_id":100039001,"comment_content":"最近因为一个bug的原因，实在改不动。之前的代码逻辑太混乱，就是耦合严重，根本就不知道修改哪些地方才能解决这个bug。最终的结果就是只能重构代码。重构代码有一些比较痛苦的地方。第一你得先理解之前同事的实现逻辑。第二你需要做更细致的拆分与设计，第三你需要让你的代码能够逻辑清晰，可维护。通过重构这个模块的代码，我也收获不少。我觉得，写代码之前一定要花时间出来设计，写好一份优秀的概要设计，写代码的时间会减半。第二，所有逻辑尽可能是线性关系，不要写太多网状的关系代码，这样非常不利于后面的维护。第三，一定要利用好java语言的优秀特性，比如封装，抽象。这样写出来的代码质量会比较高。","like_count":3,"discussions":[{"author":{"id":1245468,"avatar":"https://static001.geekbang.org/account/avatar/00/13/01/1c/d638d46e.jpg","nickname":"宋世通","note":"","ucode":"C7AA3F0E6930F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370578,"discussion_content":"最近复习面向对象的概念，写之前分析好每个类的职责，一下子清晰了好多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619454790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171444,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1578924095,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"10168858687","product_id":100039001,"comment_content":"打卡✔<br>在小公司的团队种 如果注释用英文怕是会被喷<br><br>看到有留言说 欠揍太长了 我不太赞同<br>越是想往刚处越要捡起基础<br>就算用了若干设计模式<br>基础的东西都搞不好有什么作用呢<br>","like_count":2,"discussions":[{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301431,"discussion_content":"那文档用什么？中文还是英文。还是没有文档。\n\n我的看法，注释要用英文。又不需要长篇大论，如果需要则说明模块或类设计不合理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598524962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2853072,"avatar":"","nickname":"小杰同学","note":"","ucode":"C6FC59D58F772C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573881,"discussion_content":"有什么意义  你的注释是给谁看的？ 不是给你的开发团队吗？  自以为很牛逼其实在别人看来就是个**","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653708347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301431,"ip_address":""},"score":573881,"extra":""}]},{"author":{"id":1488356,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b5/e4/e6faf686.jpg","nickname":"握了个大蚂蚱","note":"","ucode":"AD34AD4FA37371","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297559,"discussion_content":"注释用英文有点过分，异常信息啥的用用还是可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596968621,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170481,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1578619523,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10168554115","product_id":100039001,"comment_content":"重构是术与道的结合，道为重构的思路，指南。术是具体的手段！","like_count":2,"discussions":[{"author":{"id":1134288,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","nickname":"Ken张云忠","note":"","ucode":"D0BAC9FC17DE2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128507,"discussion_content":"道术法器可以有多种不同的理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578645531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170425,"user_name":"安静的boy","can_delete":false,"product_type":"c1","uid":1196475,"ip_address":"","ucode":"F5F44B75228A85","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/bb/21ce60d2.jpg","comment_is_top":false,"comment_ctime":1578612930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10168547522","product_id":100039001,"comment_content":"现在想想的确有很多设计原则和思想都是为了实现代码的高内聚低耦合而存在的。因为代码实现了高内聚低耦合，也就意味着代码更加可读，更加易于维护与修改，这也正是大型复杂项目所想要的。","like_count":2},{"had_liked":false,"id":250507,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1601109554,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5896076850","product_id":100039001,"comment_content":"网络模型 就是典型的分层接耦","like_count":1},{"had_liked":false,"id":249699,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1600764182,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5895731478","product_id":100039001,"comment_content":"log4j、jdbc分别提供了代码调用到日志及数据库实现的解耦，使我们只需要引入具体的实现即可。是依赖倒置原则的实现。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498735,"discussion_content":"是的，跟限流框架对异常的处理不同。后面两篇有解答。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592525492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202711,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1586056233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881023529","product_id":100039001,"comment_content":"在Linux系统中的VFS抽象文件系统就是一种解耦。这样扩展不同的系统就完全OK。<br>","like_count":1},{"had_liked":false,"id":188620,"user_name":"Jie","can_delete":false,"product_type":"c1","uid":1045078,"ip_address":"","ucode":"AB94041E548FEB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/56/c39046c0.jpg","comment_is_top":false,"comment_ctime":1584374728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879342024","product_id":100039001,"comment_content":"其实前后端分离也是一种解耦www","like_count":1},{"had_liked":false,"id":180682,"user_name":"Li Yao","can_delete":false,"product_type":"c1","uid":1129838,"ip_address":"","ucode":"703E1E5505F70D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/6e/60680aa4.jpg","comment_is_top":false,"comment_ctime":1582363662,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5877330958","product_id":100039001,"comment_content":"“继承是一种强依赖关系，父类与子类高度耦合，且这种耦合关系非常脆弱，牵一发而动全身，父类的每一次改动都会影响所有的子类。”<br>这段话没太理解，继承的强依赖体现在什么地方呢？使用组合时对依赖对象的改动，也会影响所有依赖该对象的类吧，从这个维度看的话，组合比继承的优越之处在什么地方呢？<br>回去又看了下多用组合少用继承的那一节，还是没找到答案，希望老师解答下。","like_count":1,"discussions":[{"author":{"id":1009422,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","nickname":"eason2017","note":"","ucode":"E070BA624FA490","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290133,"discussion_content":"应该是支付成功后，一个订单对应的支付结果是能记录下来的。短时间内存储到缓存即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594353234,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177932,"user_name":"张理查","can_delete":false,"product_type":"c1","uid":1003152,"ip_address":"","ucode":"1F93E631CD4B35","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/90/a8d19e7b.jpg","comment_is_top":false,"comment_ctime":1581552983,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5876520279","product_id":100039001,"comment_content":"项目管理中的项目分解其实也是解耦思想的一种提现。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497382,"discussion_content":"哈哈，看后面的两篇文章，有解释的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592527030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170516,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1578624411,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5873591707","product_id":100039001,"comment_content":"之前做过一个电商系统。交易需要记录在区块链上。当时采用的就是解耦的思想。电商系统还是负责原有的业务。通过rpc将交易数据传递到区块链服务进行入链业务。","like_count":1,"discussions":[{"author":{"id":1965699,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","nickname":"慎独明强","note":"","ucode":"DC2F7F2C0C8F60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338424,"discussion_content":"同步rpc还是异步rpc。同步调用还是耦合在一起","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609287807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170434,"user_name":"王涛","can_delete":false,"product_type":"c1","uid":1556838,"ip_address":"","ucode":"0A9ACC370F112D","user_header":"https://static001.geekbang.org/account/avatar/00/17/c1/66/e8dfeef4.jpg","comment_is_top":false,"comment_ctime":1578615223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5873582519","product_id":100039001,"comment_content":"紧跟课程脚步，提高代码质量","like_count":1},{"had_liked":false,"id":342970,"user_name":"霍霍","can_delete":false,"product_type":"c1","uid":1542586,"ip_address":"","ucode":"A483D42AD7F72D","user_header":"https://static001.geekbang.org/account/avatar/00/17/89/ba/009ee13c.jpg","comment_is_top":false,"comment_ctime":1650554237,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1650554237","product_id":100039001,"comment_content":"解耦，分层，从基础代码设计开始，可以一直运用到高层的架构设计中去。","like_count":0},{"had_liked":false,"id":328866,"user_name":"idiot","can_delete":false,"product_type":"c1","uid":2526391,"ip_address":"","ucode":"D7A6E980B530B4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/fcftgBsticCicEEkuzB0GTkHIocX62YVTSvnhR1c94sccj42lVaYXrmcZyhzUI3l9NcvuN1rXLhXt2eBrZZ0Tw7A/132","comment_is_top":false,"comment_ctime":1640921100,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1640921100","product_id":100039001,"comment_content":"中间层这里有没有更具体的例子？假设一级缓存这里有个接口A改了，原来的架构是上层都要改，但是新架构这里，只需要中间层修改吗？那样的话，需要所有涉及A的逻辑都被中间层包裹了，而且中间层的对外接口，在A修改的时候还不用变，感觉有点难啊。","like_count":0},{"had_liked":false,"id":315702,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1633946799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633946799","product_id":100039001,"comment_content":"1、解耦为何重要？<br>\t人处理复杂的能力是有限的<br>\t可测试性增强<br>\t代码质量不会差<br>2、代码是否需要「解耦」<br>\t间接看，代码是否牵一发而动全身<br>\t直接看，画出模块和模块、类与类 关系图，看是否复杂<br>3、如何给代码「解耦」<br>\t封装与抽象<br>\t中间层<br>\t模块化<br>\t其他设计思想：单一职责原则、基于接口而非实现编程、依赖注入、多用组合少用继承、迪米特法则等。当然，还有一些设计模式，比如观察者模式。","like_count":0},{"had_liked":false,"id":308590,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1510495,"ip_address":"","ucode":"C6FC61A90F202B","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/5f/4cbcbfb9.jpg","comment_is_top":false,"comment_ctime":1629693375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629693375","product_id":100039001,"comment_content":"对于系统级编程来说，一般需要在性能满足业务需求的情况下实现解耦，中间层不能加太多。","like_count":0},{"had_liked":false,"id":297012,"user_name":"李金鹏","can_delete":false,"product_type":"c1","uid":1445362,"ip_address":"","ucode":"8FCCA5B8BD8DDD","user_header":"https://static001.geekbang.org/account/avatar/00/16/0d/f2/3865fe28.jpg","comment_is_top":false,"comment_ctime":1623282820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623282820","product_id":100039001,"comment_content":"消息订阅与发布，实现调用接口的解耦","like_count":0},{"had_liked":false,"id":290663,"user_name":"Geek_56a189","can_delete":false,"product_type":"c1","uid":2586543,"ip_address":"","ucode":"F3258B958DF2FB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/KQyib1vpanF1CBYpBFadYdHPYlnv6TNtkqUMW6Xk0HoRNs5CXiaWQFguWGQicU34ykib9qX2yv3SmSHhHqia4SQ5icIg/132","comment_is_top":false,"comment_ctime":1619680440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619680440","product_id":100039001,"comment_content":"计算机底层操作系统算么，我想安装linux我就安装，一个电脑我安装win10也行","like_count":0},{"had_liked":false,"id":289104,"user_name":"小明明","can_delete":false,"product_type":"c1","uid":2055696,"ip_address":"","ucode":"CADE860269BFA4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/USbsicTvESSEM8CKwDoLsIk4IhpKFVqTyhS7zMksu8XgmiayNnlTX2aO62liavApicF5cIKZFexUZVztUvj4SRtEhw/132","comment_is_top":false,"comment_ctime":1618878362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618878362","product_id":100039001,"comment_content":"这节包含了大多工作技巧","like_count":0},{"had_liked":false,"id":288000,"user_name":"北极的大企鹅","can_delete":false,"product_type":"c1","uid":1045577,"ip_address":"","ucode":"8935346D08E109","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","comment_is_top":false,"comment_ctime":1618269623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618269623","product_id":100039001,"comment_content":"现在我参与的项目代码正在重构<br>谢谢老师","like_count":0},{"had_liked":false,"id":283924,"user_name":"前人种树","can_delete":false,"product_type":"c1","uid":1307269,"ip_address":"","ucode":"64D1B7F87B03E2","user_header":"https://static001.geekbang.org/account/avatar/00/13/f2/85/7d3ce959.jpg","comment_is_top":false,"comment_ctime":1615984670,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615984670","product_id":100039001,"comment_content":"MVC 分层设计，Model层是中间层<br>微服务RPC是模块化<br>angular，vue等通过各种生命周期的钩子做控制反转来解除业务代码 和 框架代码的耦合<br>go 中的 Reader 和 Writer 基于接口而非实现，减少了底层代码和上层代码的耦合提高了可维护性，各种小接口（只有一个函数）使用了迪米特法则，减少了强耦合","like_count":0},{"had_liked":false,"id":281928,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1614954260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614954260","product_id":100039001,"comment_content":"看起来增加中间层是一个几乎适用于所有解耦的好办法，可以这样说吗？还有什么类似的而且更优雅的解耦方式呢？","like_count":0},{"had_liked":false,"id":272742,"user_name":"zh","can_delete":false,"product_type":"c1","uid":1982711,"ip_address":"","ucode":"98772B1B6C6E06","user_header":"https://static001.geekbang.org/account/avatar/00/1e/40/f7/e62bbc62.jpg","comment_is_top":false,"comment_ctime":1610259024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610259024","product_id":100039001,"comment_content":"C++ STL库容器和算法的解耦设计：每个容器实现标准的迭代器，算法实现中就不需要根据特定数据结构的容器而实现多个版本","like_count":0},{"had_liked":false,"id":259188,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1604648407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604648407","product_id":100039001,"comment_content":"看到留言那么多实践了，我提一个线程池","like_count":0},{"had_liked":false,"id":250551,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1601129392,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1601129392","product_id":100039001,"comment_content":"解耦无处不在<br>各种消息队列，微服务基于注册中心rpc解耦两个系统直接调用<br>","like_count":0},{"had_liked":false,"id":246786,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599477507,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599477507","product_id":100039001,"comment_content":"MVC架构设计、前后端分开设计、远程调用","like_count":0},{"had_liked":false,"id":246016,"user_name":"Geek_35cfdd","can_delete":false,"product_type":"c1","uid":1792214,"ip_address":"","ucode":"AD9615ABB4CA25","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoiaP1gptuBzj3AXMpY8yLTIkpuarouOVzLde4636UJ7zAgnOEZibiaAIRVAicFaO64ftH45YOn1pD3VA/132","comment_is_top":false,"comment_ctime":1599133959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599133959","product_id":100039001,"comment_content":"组合是弱依赖关系？","like_count":0},{"had_liked":false,"id":243761,"user_name":"G","can_delete":false,"product_type":"c1","uid":1547293,"ip_address":"","ucode":"50D8E1ADAE0330","user_header":"https://static001.geekbang.org/account/avatar/00/17/9c/1d/34c96367.jpg","comment_is_top":false,"comment_ctime":1598268740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598268740","product_id":100039001,"comment_content":"解耦都是增加系统总体复杂性的，因为引入了第三者，而第三者对本来耦合的两者都有耦合关系。<br>如果编码人员能力不深厚的话并且没有做好测试，反而让系统变得各种bug，在我看来，解耦的目的最根本的是因为系统将要引入第四者，比如单元测试，或者被其它模块复用。所以一般在重新开发新功能时，提前做好准备而重构","like_count":0},{"had_liked":false,"id":240767,"user_name":"时光守护者-基兰","can_delete":false,"product_type":"c1","uid":1554995,"ip_address":"","ucode":"F0B0887B1979D2","user_header":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","comment_is_top":false,"comment_ctime":1597058416,"is_pvip":false,"replies":[{"id":"89224","content":"这个不好定量来区分的","user_name":"作者回复","comment_id":240767,"uid":"1190123","ip_address":"","utype":1,"ctime":1597411793,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1597058416","product_id":100039001,"comment_content":"解耦合耦合性低怎么区分呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503553,"discussion_content":"这个不好定量来区分的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597411793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236113,"user_name":"Java垒墙工程师","can_delete":false,"product_type":"c1","uid":1937062,"ip_address":"","ucode":"E76AE44A9C76AE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","comment_is_top":false,"comment_ctime":1595319807,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595319807","product_id":100039001,"comment_content":"1、java、spring、dubbo的spi机制也是解耦对象的构造和使用<br>2、国际化<br>3、消息中间件解耦生产者和向消费者，当然生产者模式也是解耦<br>4、观察者模式、模板方法模式。。。","like_count":0},{"had_liked":false,"id":220116,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1590159882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590159882","product_id":100039001,"comment_content":"人脑处理复杂问题的方法是拆分，把大系统横向拆分成多个模块；纵向拆成三层,不跨层依赖。模块之间依赖要简单清新，每层之间依赖要扁平，最好调用链长度控制在三层。","like_count":0},{"had_liked":false,"id":218426,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1589800928,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589800928","product_id":100039001,"comment_content":"【设计模式笔记30】20200518<br>工作中最常见的解耦是消息队列和RPC。这两者相对都是从大模块来划分的，比如服务A要调用服务B，那么职责上两者就是不相关的。从微观看，大模块的代码由小模块代码组成，小模块代码由具体的类组成，每个类由具体的函数组成。每个函数每个类都要考虑是否满足高内聚低耦合的要求，具体的参考标准是单一职责原则、基于接口而非实现编程、优先使用组合而不是继承、迪米特法则（只依赖必要的接口）","like_count":0},{"had_liked":false,"id":205941,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1586760803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586760803","product_id":100039001,"comment_content":"打卡30","like_count":0},{"had_liked":false,"id":204821,"user_name":"Tp_yang","can_delete":false,"product_type":"c1","uid":1183737,"ip_address":"","ucode":"ED41B81360CF18","user_header":"https://static001.geekbang.org/account/avatar/00/12/0f/f9/eb40d5e7.jpg","comment_is_top":false,"comment_ctime":1586479563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586479563","product_id":100039001,"comment_content":"依赖注入，javassist模版代码生成，字节码增强都属于解偶吧","like_count":0},{"had_liked":false,"id":202712,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1586056291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586056291","product_id":100039001,"comment_content":"<br>在应用系统中，消息队列和RPC也是服务调用关系的解耦。","like_count":0},{"had_liked":false,"id":202607,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1586014872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586014872","product_id":100039001,"comment_content":"解耦代码是为了让代码不过度复杂，实现高内聚，低耦合。<br><br>代码需要结构的条件是，修改一行代码，牵扯很大或者说通过画类和类之间的依赖关系，发现互相依赖太多等。这时候就需要进行解耦。<br><br>解构的方式：<br>1.封装和抽象<br>2.中间层<br>3.模块化<br>4.其它的设计模式","like_count":0},{"had_liked":false,"id":201762,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585834119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585834119","product_id":100039001,"comment_content":"mvc分层思想，jdbc 接口规范  ，jms java消息服务，门面模式","like_count":0},{"had_liked":false,"id":192773,"user_name":"马球先生","can_delete":false,"product_type":"c1","uid":1119609,"ip_address":"","ucode":"858C2CE0E494C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/79/efde2a69.jpg","comment_is_top":false,"comment_ctime":1584872377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584872377","product_id":100039001,"comment_content":"刚开始做Android开发的时候，所有业务逻辑都写在Activity里面。<br>后来有了MVC &#47; MVP &#47; MVVM 这些模式，<br>把本来在Activity里写的逻辑解耦到其他层中","like_count":0},{"had_liked":false,"id":192650,"user_name":"趣稚鬼👻","can_delete":false,"product_type":"c1","uid":1838042,"ip_address":"","ucode":"8AE6776DCA8541","user_header":"https://static001.geekbang.org/account/avatar/00/1c/0b/da/34be57e8.jpg","comment_is_top":false,"comment_ctime":1584866021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584866021","product_id":100039001,"comment_content":"JDBC","like_count":0},{"had_liked":false,"id":184424,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1583312246,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583312246","product_id":100039001,"comment_content":"监ting器，算是跟Aop有点类似的方向。<br>","like_count":0},{"had_liked":false,"id":183216,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1582974392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582974392","product_id":100039001,"comment_content":"读了这个专栏这么久，突然想到之前学习的经济学，关于分工以提供效率的理论，不同的工种有不同的职责。虽然代码是我们一个人在写，但是工作是很多的类一起协同。我们总以为一个类就是计算机，所以它不会累，可以懂得一切，但事实上每一个类背后都是程序员，都不应该变得太复杂，尊重分工的经济学理论。<br><br>想想每一个类是一个独立的人，要是承担得太多，就真的很差了，救救class吧。","like_count":0},{"had_liked":false,"id":182866,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582879416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582879416","product_id":100039001,"comment_content":"最常见的,就是消息队列了,生产者并不知道消费者是谁,只需要将消息放入队列中即可,<br>我个人认为,异步调用也是一种解耦思想,单独启用一个线程,那么新启用的线程执行什么,返回什么,在没有明确要求的时候,启用者也可以不关心<br>","like_count":0},{"had_liked":false,"id":182843,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1582873962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582873962","product_id":100039001,"comment_content":"工作中想到的解耦：消息中间件","like_count":0},{"had_liked":false,"id":181512,"user_name":"否极泰来","can_delete":false,"product_type":"c1","uid":1439355,"ip_address":"","ucode":"C249173266251A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f6/7b/b6abcbbe.jpg","comment_is_top":false,"comment_ctime":1582553435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582553435","product_id":100039001,"comment_content":"消息队列吧，生产者消费者<br>微服务，各个服务之间通过 http接口(feigin)的调用，属于松耦合了","like_count":0},{"had_liked":false,"id":181163,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1582509432,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582509432","product_id":100039001,"comment_content":"高内聚、松耦合：1、依赖注入，单一职责，迪米特法则，组合而非继承，基于接口而非实现；理论在脑子里开始打架了，","like_count":0,"discussions":[{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340079,"discussion_content":"哈哈哈， 多联系实际代码想想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609899478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":177882,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1581521340,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581521340","product_id":100039001,"comment_content":"Java 线程池中的 BlockingQueue 解耦 task 和 worker","like_count":0},{"had_liked":false,"id":177537,"user_name":"BitInit","can_delete":false,"product_type":"c1","uid":1007271,"ip_address":"","ucode":"BDDDA0F51B1EFB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/a7/8dc374e2.jpg","comment_is_top":false,"comment_ctime":1581412933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581412933","product_id":100039001,"comment_content":"Java里面SPI机制","like_count":0},{"had_liked":false,"id":175647,"user_name":"Geek_ab3d9a","can_delete":false,"product_type":"c1","uid":1550553,"ip_address":"","ucode":"1AFEE5FA59D470","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eol8MiawYVfCtkaFL9DFGoWpuajsKicwyt7IWm07JfrLMDuksEZJqia4Rbicw0biayokhgvSK0rUXIAngQ/132","comment_is_top":false,"comment_ctime":1580788978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580788978","product_id":100039001,"comment_content":"老师，请问  权限控制怎么做成模块化？现在的流程是：1判断是否是管理员，是哪个部门的   2  从数据库根据条件查询出数据。如果是管理员查询出他们部门所有数据。如果不是，只查询自己修改维护的数据。     感觉查询数据和权限控制有点难分开。","like_count":0},{"had_liked":false,"id":175491,"user_name":"eason2017","can_delete":false,"product_type":"c1","uid":1009422,"ip_address":"","ucode":"E070BA624FA490","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/0e/c77ad9b1.jpg","comment_is_top":false,"comment_ctime":1580733275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580733275","product_id":100039001,"comment_content":"通过消息中间件实现业务复杂逻辑的解耦。","like_count":0},{"had_liked":false,"id":174801,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1580391661,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1580391661","product_id":100039001,"comment_content":"mq实现解耦","like_count":0},{"had_liked":false,"id":173481,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1579572141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579572141","product_id":100039001,"comment_content":"消息中间件就是使用的解耦的思想来设计的","like_count":0},{"had_liked":false,"id":173032,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1579413896,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1579413896","product_id":100039001,"comment_content":"通过各种中间件，让应用模块化，也是解耦的一种方式吧。<br><br>我们项目组现在，逐渐用了消息队列，从我的角度来看，用户体验都有一个提升","like_count":0},{"had_liked":false,"id":173012,"user_name":"ちよくん","can_delete":false,"product_type":"c1","uid":1398577,"ip_address":"","ucode":"B71E9B16E4408F","user_header":"https://static001.geekbang.org/account/avatar/00/15/57/31/6772744d.jpg","comment_is_top":false,"comment_ctime":1579407262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579407262","product_id":100039001,"comment_content":"jvm 跨平台，jdk 中的异步线程，现代电脑的高速缓存，前后端分离部署等等，均可视为解偶。","like_count":0},{"had_liked":false,"id":172995,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1579404477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579404477","product_id":100039001,"comment_content":"我还有一个强烈的感受：技术实现时总期望可以能够抽象成简单的模式，但是一单底层向上服务足够简单的时候，就容易吃掉很多信息。尤其在异常的时候，站在产品的角度可以期望可以给用户提示出当时的错误信息指标等。实际场景的负责和技术期望的简单归一化这中间有什么可以判断取舍的标准吗？","like_count":0},{"had_liked":false,"id":172994,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1579404313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579404313","product_id":100039001,"comment_content":"这种解耦会不会有另外一个问题：如何有一个全局视角，串联整体内容。<br>举例：<br>使用消息来隔离时，当生产方发生业务流程变更时，原本废弃的消息都不知道是否可以废弃，是否还有人在使用。谁在使用的排查就比较困难，如果是api，直接通过api的调用看就知道了。","like_count":0},{"had_liked":false,"id":172955,"user_name":"jaryoung","can_delete":false,"product_type":"c1","uid":1077406,"ip_address":"","ucode":"6E72D107DB7E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","comment_is_top":false,"comment_ctime":1579393746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579393746","product_id":100039001,"comment_content":"解耦，解开藕断丝连的东西，常用就有基于事件编程（其实就是观察者模式）；利用中间件，利用消息中间件进行统一转发（其实还是观察者模式的一种运用）；其中观察者模式，其实实现又分为推拉模式，或者混合推拉模式。  ","like_count":0},{"had_liked":false,"id":172054,"user_name":"jxs1211","can_delete":false,"product_type":"c1","uid":1101006,"ip_address":"","ucode":"B7F1F2D84389E7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","comment_is_top":false,"comment_ctime":1579080061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579080061","product_id":100039001,"comment_content":"代码依赖关系可视化的工具可以推荐吗","like_count":0},{"had_liked":false,"id":171154,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1578875118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578875118","product_id":100039001,"comment_content":"rabbitmq等消息队列，采用了观察者模式，一定程度上实现了解耦","like_count":0},{"had_liked":false,"id":171056,"user_name":"番茄炒西红柿","can_delete":false,"product_type":"c1","uid":1690242,"ip_address":"","ucode":"13F47BABAB2110","user_header":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","comment_is_top":false,"comment_ctime":1578834300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578834300","product_id":100039001,"comment_content":"解耦这是我突然想到现在推行的事件驱动编程，本身就是解耦思想的一种体现","like_count":0},{"had_liked":false,"id":170886,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1578750728,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1578750728","product_id":100039001,"comment_content":"消息列队，事件驱动，都是典型的解耦。","like_count":0},{"had_liked":false,"id":170776,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1578712713,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578712713","product_id":100039001,"comment_content":"目前能想到的解耦手段有以下两个：<br>1. 引入消息中间件实现业务系统之间的解耦；<br>2. 分层思想，如MVC思想，网络的OSI七层参考模型；","like_count":0},{"had_liked":false,"id":170700,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1578668559,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578668559","product_id":100039001,"comment_content":"打卡✔<br>","like_count":0},{"had_liked":false,"id":170658,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1578654345,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578654345","product_id":100039001,"comment_content":"中间件也可以解耦，MVC架构也是解耦。","like_count":0},{"had_liked":false,"id":170643,"user_name":"此鱼不得水","can_delete":false,"product_type":"c1","uid":1257453,"ip_address":"","ucode":"95268E823FB4D2","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ed/a87bb8fa.jpg","comment_is_top":false,"comment_ctime":1578649861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578649861","product_id":100039001,"comment_content":"大佬多来一些例子哈哈","like_count":0},{"had_liked":false,"id":170558,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1578632681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578632681","product_id":100039001,"comment_content":"1.防腐层，解耦本地服务和远程服务的api依赖。但这不过是中间层的一种落地范式，其核心原则也属于设计原则中的迪米乐和接口隔离（由api客服端实现）。<br><br>2.事件机制，解决跨服务的事务操作依赖。常规范式就是mq了。（进程级的事件机制也有，但分布式场景很少用，毕竟mq能做的进程级事件不一定能做比如消息持久化，进程级事件能做的mq都能做）<br><br>3.镜像，重新定义发布单元。解决可执行代码和运行环境的依赖。容器的事实标准就是docker，而编排主流则是k8s。","like_count":0},{"had_liked":false,"id":170555,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1578631953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578631953","product_id":100039001,"comment_content":"Mq消息通知，数据缓存通过mysql binlog监听更新, 数据的领域层serivce，和业务service之间的调用关系，spring security中authentication实现和Session的解耦","like_count":0},{"had_liked":false,"id":170508,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1578622978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578622978","product_id":100039001,"comment_content":"文中举的那个利用中间层让重构和开发不冲突的例子里：第一阶段：引入一个中间层，包裹老的接口，提供新的接口定义。<br>这里的“提供新的接口定义”，新接口直接就可用了吗？","like_count":0},{"had_liked":false,"id":170498,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1578622012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578622012","product_id":100039001,"comment_content":"解耦的目的是维持系统中组件之间的交互关系清晰.<br><br>封装与抽象,中间层,模块化及各种设计思想是解耦的手段.<br><br>解耦的最终诉求是系统的可维护性.<br><br>课堂讨论:<br>解耦最常见的应用场景是事件总线(EventBus)<br>EventBus通过引入中间件的手段, 使事件(Event)的发布者(Publisher)与事件的订阅者(Subscriber)解耦.<br>如果没有EventBus,就会造成Publisher与Subscriber强耦合.<br><br>除此以外, 依赖注入(Dependency Injection)也是常见的解耦手段.<br><br>","like_count":0},{"had_liked":false,"id":170468,"user_name":"天意林","can_delete":false,"product_type":"c1","uid":1737293,"ip_address":"","ucode":"BADFCA17DFF5B6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/GrILCt7gOLpB4ONPUnZ1uR423b2pmmXSwlADfOoYpXnRBcCtsnoe5AhWOqk2aqDnRyhuwv7LGX66ic02Ltze7cg/132","comment_is_top":false,"comment_ctime":1578618460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578618460","product_id":100039001,"comment_content":"设计原则目的为了提高代码质量，设计模式可以理解为是为了达到设计原则要求的一种技术手段，比如观察者模式、命令模式、代理模式等都可以有效的降低代码耦合度。","like_count":0},{"had_liked":false,"id":170462,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1578617685,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578617685","product_id":100039001,"comment_content":"laravel的服务提供者","like_count":0},{"had_liked":false,"id":170458,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1578617435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578617435","product_id":100039001,"comment_content":"打卡打卡～～～","like_count":0},{"had_liked":false,"id":170455,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1578617186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578617186","product_id":100039001,"comment_content":"个人理解：策略模式就是行为与对象之间的解耦（不再靠继承重写来修改行为）命令模式就是方法调用与对象之间的解耦（我不用你觉得我要我觉得我应该调用哪个方法）","like_count":0},{"had_liked":false,"id":170451,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1578616986,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1578616986","product_id":100039001,"comment_content":"前后端分离其实也是一种解耦，让不同的工程师关注不同的部分；后端架构的MVC模式也是解耦，细节一点的常用的数据库中间件如mybatis把数据库的操作和应用逻辑隔离开，这都是解耦，所以解耦真是无处不在啊！","like_count":0},{"had_liked":false,"id":170442,"user_name":"知行合一","can_delete":false,"product_type":"c1","uid":1521486,"ip_address":"","ucode":"2B8E634FC4CFB7","user_header":"https://static001.geekbang.org/account/avatar/00/17/37/4e/5c3153b2.jpg","comment_is_top":false,"comment_ctime":1578616120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578616120","product_id":100039001,"comment_content":"MVC能实现显示与数据之间的解耦，微服务能实现服务与服务之间的解藕","like_count":0}]}