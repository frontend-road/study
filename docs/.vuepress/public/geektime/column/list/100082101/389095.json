{"id":389095,"title":"06 | 跨越现实的障碍（下）：架构分层就对了吗？","content":"<p>你好，我是徐昊。今天我们来聊聊如何有效地基于领域模型构造合理的架构。</p><p>到目前为止，我们学会了通过关联对象解决聚合/关联关系；利用角色对象分离不同上下文中的交互；并使用上下文对象完成实体对象到角色对象的扮演。这些模式通过结构上的优化，更好地组织了对核心数据的访问逻辑，使得我们可以在兼顾架构约束的同时，将领域概念与逻辑有效地转化为领域模型。</p><p>然而当我们把眼光从构造领域模型，扩展到利用领域模型构建整个应用或系统时，就会遇到新的问题：<strong>如何组织领域逻辑与非领域逻辑，才能避免非领域逻辑对模型的污染</strong>？</p><p>通常我们会使用分层架构（Layered Architecture）区分不同的逻辑以解决这个问题。然而由于领域层被人为赋予了最稳定的特性，破坏了分层架构间的依赖关系。所以我们需要<strong>修正分层，才能有效地围绕领域模型来构造软件架构</strong>。</p><p>那么今天这节课我们就看看分层架构的问题在哪儿，以及如何通过能力供应商（Capability Provider）模式获得一个更好的架构愿景。</p><h2>领域层的“不正当关系”</h2><p><strong>分层架构</strong>是运用最为广泛的架构模式，它<strong>将不同关注点的逻辑封装到不同的层中</strong>，以便扩展维护，同时也能有效地控制变化的传播。</p><p>在使用领域驱动设计时，我们通常会将系统分成四层：</p><!-- [[[read_end]]] --><ol>\n<li><strong>展现层</strong>（Representation Layer）：负责给最终用户展现信息，并接受用户的输入作为功能的触发点。如果不是人机交互系统，用户也可以是其他软件系统。</li>\n<li><strong>应用层</strong>（Application Layer）：负责支撑具体的业务或者交互流程，将业务逻辑组织为软件的功能。</li>\n<li><strong>领域层</strong>（Domain Layer）：核心的领域概念、信息与规则。它不随应用层的流程、展现层的界面以及基础设施层的能力改变而改变。</li>\n<li><strong>基础设施层</strong>（Infrastructure Layer）：通用的技术能力，比如数据库、消息总线等等。</li>\n</ol><p>领域驱动设计使用分层架构，主要是因为<strong>各层的需求变化速率</strong>（Pace of Changing）<strong>不同</strong>。分层架构对变化传播的控制，是通过层与层之间的依赖关系实现的，因为下层的修改会波及到上层。我们希望通过层来控制变化的传播，只要所有层都单向依赖比自己更稳定的层，更易变依赖不易改变的，那么变化就不会扩散了。</p><p>伴随着David Wheeler那广为误解的半句名言：“计算机科学中的所有问题都可以通过引入一个间接层解决”，这就让分层几乎已经成了架构的默认法门。然而，正如不那么广为人知的后半句“除了有太多的层以外”所预言的，<strong>领域驱动设计分层架构的问题</strong>，<strong>恰恰就在于多了一层</strong>。接下来我们就来分析一下这个问题。</p><h3>通用技术能力和领域概念谁稳定？</h3><p>大部分谈论领域驱动设计架构的书或文章，都会拿出这样一张分层依赖图，用来说明应该如何构造合理的层与层之间的依赖关系：</p><p><img src=\"https://static001.geekbang.org/resource/image/21/fa/215591dd1124222301b55ac60c384afa.jpg?wh=7472x4086\" alt=\"\"></p><p>这张图通过依赖关系表示了每一层的变化速率：展示层最易变，其次是应用层，然后是领域层，最后是基础设施层。那实际情况是这样吗？有一部分说对了，而另一部分则值得商榷。</p><p><strong>展现层的逻辑，的确是最容易改变的</strong>：新的交互模式，不同的视觉模版，甚至单纯就是怕用户看烦，想修改一下保持新鲜感，都会带来展现层逻辑的改变。</p><p>而<strong>应用层的逻辑，会随着业务流程以及功能点的变化而改变</strong>。比如流程的重组与优化、新功能点的引入，都会改变应用层的逻辑。</p><p>领域层是核心领域概念的提取。从理论上说，如果通过知识消化完成模型的提取，由模型构成的领域层应该就是稳定态了，不会发生重大改变。因为一旦领域层出现重大改变，就意味着重大业务调整，整个系统都可以推倒重来了。因而<strong>在软件系统有限的生命周期内，我们可以认为领域层应该是不变的</strong>。</p><p><strong>这也是为什么领域驱动设计受到行业热捧的一个原因</strong>，寻找到一个在软件系统生命周期内稳固的不变点，由它构成架构、协同与交流的基础，帮助我们更好地应对软件中的不确定性。当然，这里的“不变”指的是<strong>已经存在的领域概念和核心逻辑不会改变</strong>，但是仍然可以有新的概念和逻辑加入到领域层中。</p><p><strong>基础设施层的逻辑由所选择的技术栈决定</strong>，更改技术组件、替换所使用的框架，都会改变基础设施层的逻辑。因而基础设施层的变化频率跟所用的技术组件有很大关系。越是核心的组件，变化就越缓慢，比如在选定数据库系统后，不太可能频繁地更换它。而如果是一个缓存系统，那么变化的频率就会快很多。</p><p>但是，<strong>基础设施层还可能存在不可预知的突变</strong>。如果我们历数过往的诸多思潮，NoSQL（Not Only SQL）、大数据（Big Data）、云计算（Cloud Computing）等等，都为基础设施层带来过未曾预期的突变。</p><p>此外，周围系统生态的演化与变更，也会给基础设施层带来不可预知的突变的可能。比如，所依赖的消息通知系统从短信变成微信，支付方式从网银支付变成移动支付，等等。</p><p>这里就有问题了。从概念上看，领域层是绝对稳定的。它既不随应用逻辑，也不随技术能力的变化而改变。唯一能够促使它变化的，是真实世界业务中的核心概念与逻辑。换句话说，领域模型不会被赛博世界（Cyber World）内的任何变化影响，它就是赛博世界中的孙悟空，跳出了三界外，不在五行中。</p><p>所以，<strong>跟领域层相比，基础设施层就不够稳定</strong>（其实不光基础设施，所有层跟它相比都不稳定），那么我们怎么能让绝对稳定的领域层，去依赖不够稳定的基础设施层呢？这不是违背了分层架构的依赖原则吗？</p><p><strong>领域模型对基础设施的态度是非常微妙的</strong>：一方面，领域逻辑必须依赖基础设施才能完成相应的功能；另一方面，领域模型必须强调自己稳定性，才能维持它在架构中的核心位置。而作为被人为认定为的绝对稳定，它不能依赖任何非领域逻辑（除了基础库）。任何对其他逻辑的依赖都会带来修改的传递，会使领域层变得不稳定。</p><p>明明有实质性的依赖关系，却碍于“绝对稳定”的身份而不能承认。我想每个人都会想起一些不那么美好的词汇，来形容这种“不正当关系”吧。</p><p>可悲的是，作为架构师，我们还必须得帮助领域层来实现这种“不正当关系”（然后我劝你停止联想，不然人通过劳动改造自然的同时，劳动也会改造人，架构师就没法维持IT一族老实人的美好人设了），这样才能确立领域层的“绝对稳定”和“绝对核心”的位置。</p><p>理解了这点，你可以再看一下我们在关联对象<a href=\"http://https://time.geekbang.org/column/article/389072\">那节课</a>中看到的一段代码。现在，我想你对它的丑陋之处会有更深刻的认识了：它暴露了领域层对基础设施的直接依赖。</p><pre><code>public class User {\n    public List&lt;Subscription&gt; getSubscriptions() {\n      ....\n    }\n    \n    public List&lt;Subscription&gt; getSubscriptions(int from, int size) {\n       return db.executeQuery(....);\n    }\n }\n</code></pre><h3>基础设施不是层</h3><p>产生这种“既要用，又不愿意承认”的依赖关系的根源在于，<strong>基础设施本身就不是层</strong>。或者更严格地说，以变化速率作为分层依据，那么基础设施就是无效的分层。如果你仔细看一下分层架构，可以发现两个相关而又不同的维度：变化上，从易变到稳定；逻辑上，从使用视角到实现视角。</p><p><img src=\"https://static001.geekbang.org/resource/image/e9/23/e97e8a2e073407a10d9f307da38c1123.jpg?wh=8000x4500\" alt=\"\"></p><p>从使用视角到实现视角，是另一个可以理解分层的方式：</p><ol>\n<li>展示层最接近最终用户，完全表示对最终用户的信息展示和输入收集。同时它也使用了应用层、领域层与基础设施层。</li>\n<li>应用层，从业务流程与交互体验上支撑了展示层逻辑的实现。同时它也使用了领域层与基础设施层。</li>\n<li>领域层，从业务概念和核心逻辑上支撑了应用层流程和体验的实现。同时它也使用了基础设施层。</li>\n<li>基础设施层，从技术能力上支撑了领域层概念和逻辑的实现。</li>\n</ol><p>从这个角度看，我们也更能理解为什么展示层比应用层易变，应用层比领域层易变。因为层与层之间是使用与实现的关系，但是这个关系在领域层与基础设施层之间被打破了。</p><p>因为我们人为地规定了领域层最稳定，那么用以实现领域层的基础设施层，就不能比领域层更稳定。因此我们的选择只有两个：要么承认领域层并不是最稳定的（也就是领域层是“在特定技术栈上的领域模型实现”）；要么就别把基础设施当作层来看。</p><p>说句题外话，其实我始终推荐<strong>不要过分强调领域层的绝对独立性</strong>，心里坦然接受领域层并不是无约束的理想化实现，而是受特定技术栈与技术生态环境约束的实现，就没那么多烦恼与纠结了。</p><p>这么做的话，对于领域驱动设计的优点，我们也并没有损失什么。除了需要做点儿心理建设来接纳它之外，唯一真正的不足，是可能要在构造测试上投入更多的成本。比如测试领域层逻辑时，需要构建基础设施的假替身（Test Double，Fake），并且还需要将领域层与基础设施层一起测试。</p><p>第一个迈出这一步且被广泛接受的框架是Ruby On Rails。它对领域驱动设计的颠覆，绝不小于它对Web开发的颠覆。特别是，既然使用了基础设施层，就大大方方地承认，提前准备好相关的测试工具，也没什么不好嘛。</p><p>然而对于大多数实践领域驱动开发的人而言，领域层的“绝对稳定”是如同光速一般的恒常，“孙悟空”是心中的白月光，“又当又立”是圣杯。否定掉领域层的稳定性，心理建设成本过高。</p><p>那么我们<strong>只能承认基础设施不是层</strong>，需要从不同的角度构建一种架构模式，使得领域模型既可以隐含地使用基础设施，又不暴露对它的依赖。</p><h2>能力供应商模式</h2><p>如何才能取消基础设施层，但仍然不影响领域模型的实现呢？我会推荐<strong>使用能力供应商</strong>（Capability Provider）<strong>模式</strong>。能力供应商模式是面向对象基础原则SOLID的综合应用，网上关于SOLID的讨论汗牛充栋，我就不在这里展开了。</p><h3>从基础设施到有业务含义的能力</h3><p>让我们通过一个案例，看一下如何构造能力供应商。还是极客时间的例子，这次我们来看订单部分。假设目前需要通过网银来支付订单，并通过邮件将订单状态更新并发送给客户。模型如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/10/6c/10bbc1676yyd11641fc55c2361f2f96c.jpg?wh=6875x3040\" alt=\"\"><br>\n那么在忽略具体实现细节之后，代码可能是这个样子的：首先调用银行网关，然后根据银行网关返回的结果，生成支付记录并通知客户。</p><pre><code>public class Order {\n\n\n    public void pay() {\n        BankResponse response = bank.pay(....);\n        if （response.isOk()) {\n            payments.add(new Payment(response...));\n            status = ....;\n            email.send(....);\n        } else {\n            email.send(....);\n        }\n    }\n}\n</code></pre><p>如前所述，这样的代码从领域驱动设计角度来看并不算好。因为我们在领域层中，直接依赖了基础设施层中的网银网关客户端和邮件通知客户端。但是想改正这个问题，并没有那么容易。</p><p>因为领域层被认为定义为绝对稳定，它不能依赖任何非领域逻辑（除了基础库）。而我们又要使用网银客户端和邮件通知客户端来完成功能，那该怎么办呢？我们只好<strong>将网银客户端和邮件通知客户端移动到领域层内</strong>。</p><p>但是我们不能直接移动，毕竟领域层中只能是领域概念与逻辑，与具体业务无关的概念是不能进去领域层的。于是我们需要<strong>将对基础设施层的依赖，看作一种未被发现的领域概念进行提取</strong>，这样其实就发挥了我们定义业务的权利，从业务上去思考技术组件的含义。</p><p>一种有效的方法是<strong>将技术组件进行拟人化处理</strong>。比如网银转账这个行为，如果在业务中有一个人去做这个操作，那么会是谁呢？通知用户订单状态发生转变了，这个人又会是谁呢？通过拟人化，我们就能很清楚地看到技术组件到底帮助我们完成了什么业务操作。</p><p>在我们这个例子里，转账的是出纳（Cashier），通知用户的是客服（Customer Service）。于是我们的模型就能转化为：<br>\n<img src=\"https://static001.geekbang.org/resource/image/a8/e1/a8e192ba295786c54103220a998a31e1.jpg?wh=7702x3664\" alt=\"\"><br>\n可以看到，我们将具有业务含义的能力抽象成接口纳入领域层，而使用基础设施层的技术能力去实现领域层的接口。也就是说，<strong>基础设施层成为了能力供应商</strong>。代码如下：</p><pre><code>//领域层内\ninterface Cashier {\n    ...\n}\n\ninterface CustomerService {\n    ...\n}\n\npublic class Order {\n\n    public void pay(Cashier cashier, CustomerService staff) {\n        try {\n            Payment payment = cashier.collect(...);\n            payments.add(payment);\n            staff.tell(owner, ..);\n        } catch(....) {\n            staff.tell(owner, ..);\n        }\n    }\n}\n\n//领域层外\npublic class BankPaymentCahsier extends BankPaymentClient implements Cashier {\n    ...\n}\n\npublic class EmailCustomerService extends EmailNotificationClient implements CustomerService {\n</code></pre><p>你肯定觉得，就这？这不就是抽个接口改个名吗？是的，从实现技法上看，这是简单得不能再简单的面向对象方式了：<strong>从具体实现方法中寻找到一个抽象接口，然后将从对具体实现的依赖，转化为对接口的依赖</strong>（SOLID中的里氏替换原则）。</p><p>但是与之前相比，我们现在的做法有两个不同：</p><ol>\n<li>领域模型与软件实现关联；</li>\n<li>统一语言与模型关联。</li>\n</ol><p>没错儿，就是领域驱动设计的“两关联”。我们再复习一下，通过两关联，任何词汇都可以成为领域概念，而与概念提取的发起方无关。</p><p>也就是说，领域概念可以不是领域方提取的。<strong>只要我们从技术组件中提取的词汇具有业务含义，且被业务方认可，那么它就是领域概念</strong>。因此我们并不是改了个名，而是提取了领域概念。要时刻牢记自己的权利！</p><p>总结来说，通过从技术组件抽象具有业务含义的能力，我们就能将基础设施转变为具有这种能力的供应商。于是，我们就能帮助领域层实现了它希望的那种“不正当关系”，既使用了基础设施，又对它没有依赖：我们依赖的是领域层内的能力接口（SOLID中的接口隔离原则），而不是基础设计的实现（SOLID中的倒置依赖原则）。</p><p>将基础设施转化成为能力供应商后，我们的分层结构中也就不再存在基础设施层了。于是我们的架构愿景，也就发生了改变。那么该怎么使用能力供应商，来形成真正多层架构呢？我们接着往下看。</p><h3>使用能力供应商的多层架构</h3><p>我们可以将基础设施，看作对不同的层的扩展或贡献（SOLID的开闭原则）。它虽被接口隔离，但却是展示层、应用层和领域层的有机组成部分。在每一层中留有能力接口，基础设施则作为这些能力接口的供应商，参与层内、层间的交互。<br>\n<img src=\"https://static001.geekbang.org/resource/image/71/75/713b9bc783e9b31fdd8ebf7a9d50ff75.jpg?wh=7466x3754\" alt=\"\"><br>\n那么这样的架构，无论从变化的频率还是使用实现关系上就形成了统一。除此之外，通过能力供应商，我们还解决了分层架构里的另一个难题：<strong>层与层之间是单向依赖关系，那么如果需要上一层参与下一层的交互与逻辑，层与层之间就会形成双向依赖关系</strong>。</p><p>不过，通过能力与能力供应商，层与层之间出现了另一种交互的可能：上一层作为下一层的能力供应商，参与到下一层的业务与流程中去。而这种参与，并不会带来额外的依赖。示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/71/75/713b9bc783e9b31fdd8ebf7a9d50ff75.jpg?wh=7466x3754\" alt=\"\"></p><p>比如在前面支付的例子里，除了邮件通知以外，我们还希望触发一个流程去为用户做一下支付失败原因的回访。这属于应用层逻辑的一部分。那么我们只需要在应用层中实现对应的逻辑，并成为领域层的能力供应商就可以了。示意代码如下：</p><pre><code>public class FollowUpWorkflow implements CustomerSerivce {\n    private WorkflowEngine engine;\n    \n    public void tell(.....) {\n        this.engine.startFlow(....);\n    }\n}\n</code></pre><p>我不知道你是否觉得能力供应商这个模式有点眼熟？没错儿，它就是关联对象、角色对象和上下文对象的<strong>元模式</strong>（Meta Pattern）。事实上，我们<a href=\"http://https://time.geekbang.org/column/article/389082\">第4讲</a>、<a href=\"http://https://time.geekbang.org/column/article/389089\">第5讲</a>所学的内容，都可以看作是能力供应商模式的一种特殊表现形式。它们所表示的能力，与在特定技术约束下如何组织领域模型的数据相关。比如关联对象，就是如何在数据库不在内存中的情况下读取大量数据，并维持逻辑一致性的能力。</p><p>通过这个元模式，我们还可以衍生出很多有用的模式，比如全局数据对象（Global Data Object）模型，用类似Users这样的领域概念表示系统全局范围内所有的用户对象。</p><p>这里我就不一一展开了，我相信如果你理解了能力供应商，并认真学习了前几节课的例子，你自然可以收发随心地使用恰当的模式来解决遇到的问题。</p><h2>小结</h2><p>我们来简单总结一下。分层模式并不能很好地帮助我们构建以领域模型为核心的系统架构，主要问题就在于如何处理领域层与基础设施层的关系上。而我们对领域模型的执念，使得我们无法承认基础设施层更稳定（本身也有突变风险）。所以我们应该重新思考<strong>分层架构是否正确，以及怎么分才更合理</strong>。</p><p>我个人建议分成三层：展示层、应用层与领域层。不仅要将基础设施作为能力供应商配合其他层来使用，同时通过能力供应商模式，来实现层与层之间的双向交互，这样就不用担心会带来额外的依赖了。</p><p>最后，能力供应商模式是一个元模式，关联对象、角色对象和上下文对象可以看作它的具体应用。熟练掌握这个模式，你就可以根据需要发明自己的领域驱动实现模式了。</p><p>编辑小提示：为了方便读者间的交流学习，我们建立了微信读者群。想要加入的同学，戳此加入<a href=\"https://jinshuju.net/f/wjtvTP\">“如何落地业务建模”交流群</a>&gt;&gt;&gt;</p><h2>思考题</h2><p>能力供应商模式在处理大的架构问题上，唯一的不足就在于将显式的依赖关系，转化为了隐式依赖关系，这就对知识管理有了更高的要求。请你思考一下这种架构模式对项目交付的挑战，以及需要怎样的知识管理手段才能保证知识传递的顺畅？</p><p><img src=\"https://static001.geekbang.org/resource/image/9c/0e/9ca13395971a7b56b9de589ef8de390e.jpg?wh=1500x1798\" alt=\"\"></p><p>如果你在学习过程中有任何问题或者心得，欢迎在留言区和我交流互动。</p>","neighbors":{"left":{"article_title":"05｜跨越现实的障碍（中）：富含知识还是代码坏味道？","id":389089},"right":{"article_title":"07｜统一语言可以是领域模型本身吗？","id":390792}},"comments":[{"had_liked":false,"id":301253,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":true,"comment_ctime":1625590474,"is_pvip":false,"replies":[{"id":"109095","content":"并不是防腐层 不要用解决方案去定义问题。而是问题定义解决方案。同解决方案不同问题 就是不同的模式，比如proxy decoration middleman 解决方案都是一个类代理给另一个类 然而它们并不是一个东西","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1625616556,"ip_address":"","comment_id":301253,"utype":1}],"discussion_count":4,"race_medal":0,"score":"9.2233721157897994e+18","product_id":100082101,"comment_content":"1.能力供应商&#47;防腐层，其实都是一个东西。为逻辑功能的组成部分定义清晰的业务模型 + 领域层只包含自身定义的业务模型（接口&#47;类） + 为这些业务模型定义寻找实现。隔离变化，不管是不同变化频率还是不同变化方向。<br><br>2.双向依赖大部分时候，可能是领域模型有所欠缺。识别定义抽取新的领域模型来公用会比实现双向依赖要好些，哪怕双向是隐式的，如果时间允许的话。<br><br>课后题，太晚了，脑子思绪混乱，等周末再琢磨。","like_count":19,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522944,"discussion_content":"并不是防腐层 不要用解决方案去定义问题。而是问题定义解决方案。同解决方案不同问题 就是不同的模式，比如proxy decoration middleman 解决方案都是一个类代理给另一个类 然而它们并不是一个东西","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1625616556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550643,"discussion_content":"我也认为这种领域层对应用层的依赖不好，为了概念上的自洽越来越复杂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644652853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1082095,"avatar":"https://static001.geekbang.org/account/avatar/00/10/82/ef/0badf9dc.jpg","nickname":"coley wu","note":"","ucode":"B2C0AD8F970981","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391076,"discussion_content":"为什么不能理解为防腐层？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630284131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1518535,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2b/c7/9c8647c8.jpg","nickname":"鐘","note":"","ucode":"0106652D5F7BD9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1082095,"avatar":"https://static001.geekbang.org/account/avatar/00/10/82/ef/0badf9dc.jpg","nickname":"coley wu","note":"","ucode":"B2C0AD8F970981","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":581210,"discussion_content":"如同老師所說, 雖然都是使用同一個模式, 但解決的問題不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658627756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":391076,"ip_address":""},"score":581210,"extra":""}]}]},{"had_liked":false,"id":304136,"user_name":"码农戏码","can_delete":false,"product_type":"c1","uid":1607342,"ip_address":"","ucode":"2472A68B8A851E","user_header":"https://static001.geekbang.org/account/avatar/00/18/86/ae/163ec4e5.jpg","comment_is_top":true,"comment_ctime":1627269336,"is_pvip":false,"replies":[{"id":"110069","content":"namespace并不是跟domain 层一一对应 所以概念上 依赖还是解开","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1627299896,"ip_address":"","comment_id":304136,"utype":1}],"discussion_count":2,"race_medal":0,"score":"9.2233720384819999e+18","product_id":100082101,"comment_content":"理论指导实践，实践反哺理论，有时实践对了但归纳不出理论，有时有了理论却落不了地，统称摸着石头过河，这是低手所为，高手总是深刻理解理论，升华理论，实践手到擒来，行云流水<br><br>使用maven构建项目时，根据DDD拆分成四个module并如此依赖：controller -&gt; application -&gt; domain -&gt; infrastructure<br><br>但存在一个循环依赖问题：ddd中规定repository是domain,所以接口在domain层，但现实在infra层，那infra得依赖domain了，可从maven module依赖讲，domain是依赖infra的，只能先把repository接口放到infra中<br><br>可domain才是核心，最稳定的，不能被技术束缚，倒置一下，但技术并不只有db，还有IO,消息等等总不能像repository一样，把这些接口都放到domain，那domain很不纯粹<br><br>聪明的我又想到用namespace解决，从maven module讲，这些都放在domain层，但不再放在com.zhuxingsheng.domain包下，而放到对应的包下，如message放在com.zhuxingsheng.message，这样保证了domain的稳定，落地也不太别扭<br><br>这样好不好，不知道，至少说服我自己了<br><br>相比老师的能力供应商模式，差了好几个层次，第一只关注技术，没有对接口提取出领域概念，以领域知识为核心，第二虽然觉两层关系有丝丝别扭，但不敢质疑，并大声说出他们关系的不正当<br>","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523945,"discussion_content":"namespace并不是跟domain 层一一对应 所以概念上 依赖还是解开","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627299896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1058767,"avatar":"https://static001.geekbang.org/account/avatar/00/10/27/cf/6c211fd5.jpg","nickname":"奋斗小青年","note":"","ucode":"67D789E72136C7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552302,"discussion_content":"domain 层不应该依赖 infra层 。infra 依赖 domain ；应用同时依赖 infra和domain ，具体的实现是在应用层上进行体现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645406608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302461,"user_name":"阿鸡","can_delete":false,"product_type":"c1","uid":1589246,"ip_address":"","ucode":"F181422D4EB444","user_header":"https://static001.geekbang.org/account/avatar/00/18/3f/fe/35d1afbd.jpg","comment_is_top":false,"comment_ctime":1626231298,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"121885315586","product_id":100082101,"comment_content":"&quot;不要用解决方案去定义问题。而是问题定义解决方案&quot; 这个很有启发！","like_count":29},{"had_liked":false,"id":301076,"user_name":"威","can_delete":false,"product_type":"c1","uid":1068542,"ip_address":"","ucode":"C921CDCB22B9A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/fe/882eaf0f.jpg","comment_is_top":false,"comment_ctime":1625529778,"is_pvip":false,"replies":[{"id":"109053","content":"变化速率","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1625535250,"ip_address":"","comment_id":301076,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31690300850","product_id":100082101,"comment_content":"为什么说支付失败的回访是应用层逻辑，而不是领域层逻辑呢，这里的划分是有什么准则吗","like_count":7,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522890,"discussion_content":"变化速率","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625535250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302845,"user_name":"马若飞","can_delete":false,"product_type":"c1","uid":1046394,"ip_address":"","ucode":"3D0327329A10AE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/7a/55618020.jpg","comment_is_top":false,"comment_ctime":1626405469,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"23101241949","product_id":100082101,"comment_content":"“基础设施本身就不是层。”——八叉兄总是能以语不惊人死不休的方式震撼到我。","like_count":5,"discussions":[{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550644,"discussion_content":"我觉得这就是一种习惯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644653112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1119490,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/02/66f65388.jpg","nickname":"雷霹雳的爸爸","note":"","ucode":"99BBA6D83DD11F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532516,"discussion_content":"主要是他先尝试定义问题，定义什么是层，顺着这个理解…还是挺严肃的一个讨论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637633763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301182,"user_name":"阿鸡","can_delete":false,"product_type":"c1","uid":1589246,"ip_address":"","ucode":"F181422D4EB444","user_header":"https://static001.geekbang.org/account/avatar/00/18/3f/fe/35d1afbd.jpg","comment_is_top":false,"comment_ctime":1625566648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23100403128","product_id":100082101,"comment_content":"领域层定义SPI，基础设施层实现SPI，作为插件和扩充。<br>需要注意的是，领域层定义的这些SPI被吸收进了领域的核心概念里。","like_count":5},{"had_liked":false,"id":301129,"user_name":"冯","can_delete":false,"product_type":"c1","uid":1161601,"ip_address":"","ucode":"7369C8B1A50D29","user_header":"https://static001.geekbang.org/account/avatar/00/11/b9/81/1680ec3f.jpg","comment_is_top":false,"comment_ctime":1625547331,"is_pvip":false,"replies":[{"id":"109065","content":"good","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1625567235,"ip_address":"","comment_id":301129,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14510449219","product_id":100082101,"comment_content":"思考题，根据前面说的两关联一循环。这里把技术概念转换成了领域概念，然后反映到统一语言上。这就需要团队不断的执行循环，才能把知识消掉。业务方和技术方也需要紧密的配合和互相信任。","like_count":3,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522903,"discussion_content":"good","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625567235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1119490,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/02/66f65388.jpg","nickname":"雷霹雳的爸爸","note":"","ucode":"99BBA6D83DD11F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532519,"discussion_content":"我也觉的是，既然在建模和实现模型的方法上技术做了些…可能是别人看起来额外的做了些事情，那么需要在团队行为方式和价值观上再多做些事情，寻求特别是业务方的认同和理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637634325,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161601,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b9/81/1680ec3f.jpg","nickname":"冯","note":"","ucode":"7369C8B1A50D29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382390,"discussion_content":"消化掉。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625554217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304285,"user_name":"shen","can_delete":false,"product_type":"c1","uid":1215066,"ip_address":"","ucode":"AE5737B0C7DC4F","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/5a/b67a82e3.jpg","comment_is_top":false,"comment_ctime":1627314756,"is_pvip":false,"replies":[{"id":"110112","content":"yyds","user_name":"编辑回复","user_name_real":"李辰洋","uid":"2189689","ctime":1627349955,"ip_address":"","comment_id":304285,"utype":2}],"discussion_count":1,"race_medal":0,"score":"10217249348","product_id":100082101,"comment_content":"看到这章对老师膜拜了。看过不少DDD的内容，实际很难落地，老师结合软件设计相关内容从更高的纬度指导落地，这正是我想要的。","like_count":2,"discussions":[{"author":{"id":2189689,"avatar":"https://static001.geekbang.org/account/avatar/00/21/69/79/b4132042.jpg","nickname":"🐑","note":"","ucode":"DE34B3B14287D1","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524001,"discussion_content":"yyds","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627349955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302811,"user_name":"陈凯杰","can_delete":false,"product_type":"c1","uid":2673126,"ip_address":"","ucode":"1DC8A69F4BFEFB","user_header":"https://static001.geekbang.org/account/avatar/00/28/c9/e6/af1a23b4.jpg","comment_is_top":false,"comment_ctime":1626396327,"is_pvip":false,"replies":[{"id":"109571","content":"消息中间件是服务接口的一种实现形式 ","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1626399678,"ip_address":"","comment_id":302811,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10216330919","product_id":100082101,"comment_content":"用拟人化去命名这个很妙！另外文章中的例子，实际设计中应该会丟一个消息中间件作为解耦。例如业务要发消息，发邮件，这样是不是就减少对基础设施的依赖？","like_count":2,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523438,"discussion_content":"消息中间件是服务接口的一种实现形式 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626399678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335323,"user_name":"Geek_8d0790","can_delete":false,"product_type":"c1","uid":2901182,"ip_address":"","ucode":"909142AC1F9C41","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/XPenLgPCKGg3sEaC8fNpwoqX3wPoUSlk8NojV71THG4M3YE9c0L0HD4K5wAXXkeHficy8MHhoEgpYIC6vclEIUw/132","comment_is_top":false,"comment_ctime":1645451337,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5940418633","product_id":100082101,"comment_content":"关于领域层可以举一些例子吗？感觉对这个概念还不是很清楚","like_count":1},{"had_liked":false,"id":335200,"user_name":"Geek_8d0790","can_delete":false,"product_type":"c1","uid":2901182,"ip_address":"","ucode":"909142AC1F9C41","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/XPenLgPCKGg3sEaC8fNpwoqX3wPoUSlk8NojV71THG4M3YE9c0L0HD4K5wAXXkeHficy8MHhoEgpYIC6vclEIUw/132","comment_is_top":false,"comment_ctime":1645404654,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5940371950","product_id":100082101,"comment_content":"可以对领域层举一些例子吗？有点没听懂","like_count":1},{"had_liked":false,"id":315584,"user_name":"黄大仙","can_delete":false,"product_type":"c1","uid":1610676,"ip_address":"","ucode":"6C79E6991EC3B8","user_header":"https://static001.geekbang.org/account/avatar/00/18/93/b4/22f438d0.jpg","comment_is_top":false,"comment_ctime":1633924775,"is_pvip":true,"replies":[{"id":"114226","content":"奇怪在哪","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1633928329,"ip_address":"","comment_id":315584,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5928892071","product_id":100082101,"comment_content":"文中能力供应商的实现方式是方法中传入，想必应该是在能接触到能力供应商的实例的最初始的调用者上传入的，比如领域服务。那么问题来了，在较为复杂的调用链中，这种传来传去很奇怪，该如何优化及避免？","like_count":1,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528103,"discussion_content":"奇怪在哪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633928329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1610676,"avatar":"https://static001.geekbang.org/account/avatar/00/18/93/b4/22f438d0.jpg","nickname":"黄大仙","note":"","ucode":"6C79E6991EC3B8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402768,"discussion_content":"只是从一个类中路过一下，传到下一层里。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633945980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311427,"user_name":"Z.G","can_delete":false,"product_type":"c1","uid":1641331,"ip_address":"","ucode":"AF2D041F9CBDF1","user_header":"https://static001.geekbang.org/account/avatar/00/19/0b/73/a04b5d3f.jpg","comment_is_top":false,"comment_ctime":1631235070,"is_pvip":false,"replies":[{"id":"112902","content":"往后看","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1631326696,"ip_address":"","comment_id":311427,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5926202366","product_id":100082101,"comment_content":"老师你好，为什么失败回访是应用层的逻辑而不是领域层的逻辑呢？如何区别？比如业务需要记录一下回访的次数是不是就变成领域逻辑了？","like_count":1,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526596,"discussion_content":"往后看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631326696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304901,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1096652,"ip_address":"","ucode":"E79CEA70430449","user_header":"https://static001.geekbang.org/account/avatar/00/10/bb/cc/fac12364.jpg","comment_is_top":false,"comment_ctime":1627695862,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5922663158","product_id":100082101,"comment_content":"本章总结：通过提取接口实现依赖反转，四层变三层。","like_count":1},{"had_liked":false,"id":302925,"user_name":"爱睡觉","can_delete":false,"product_type":"c1","uid":2016556,"ip_address":"","ucode":"89D51193806C7D","user_header":"https://static001.geekbang.org/account/avatar/00/1e/c5/2c/184978c8.jpg","comment_is_top":false,"comment_ctime":1626436423,"is_pvip":false,"replies":[{"id":"109607","content":"话糙理不糙","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1626439664,"ip_address":"","comment_id":302925,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5921403719","product_id":100082101,"comment_content":"“不正当关系”😂。写的太好玩了","like_count":1,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523479,"discussion_content":"话糙理不糙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626439664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301156,"user_name":"箭和方糖","can_delete":false,"product_type":"c1","uid":1938767,"ip_address":"","ucode":"818AAAFC0FD681","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIibashTHtGDWH5L0NlbuOrA6ZuI4uc1HkMD0hbIt8iaoH8hFf3jpb8jjhsvrRLTIazZP3YoR5WpMpg/132","comment_is_top":false,"comment_ctime":1625557655,"is_pvip":false,"replies":[{"id":"109068","content":"无意义","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1625567323,"ip_address":"","comment_id":301156,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5920524951","product_id":100082101,"comment_content":"DDD本身有所谓的成熟度模型吗？比如总共有5档，有些项目可以做到5，有些项目受限于某些因素只能做到2或者3。这样的成熟度模型是否有意义","like_count":1,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522913,"discussion_content":"无意义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625567323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358856,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"上海","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1664934013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664934013","product_id":100082101,"comment_content":"拟人化这个提法妙，做架构我最近学到的就是先假设交互中的各个系统都是人，考虑人跟人交互需要考虑的因素，然后在架构设计中必须体现这些因素。","like_count":0},{"had_liked":false,"id":352749,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1658909608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658909608","product_id":100082101,"comment_content":"应用层还能给领域层提供能力，这分层划分的还有什么意义，别分层了，都一层好了","like_count":0},{"had_liked":false,"id":349781,"user_name":"Geek_e24e2a","can_delete":false,"product_type":"c1","uid":1440307,"ip_address":"","ucode":"F3ADF39BE57663","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJjmgqcjJaicAHKSL1fJj6PZibBXqflyZJpaICr4XyiaNh4xGSjPyjcHepf2YiaRdN0WZWroIXsUHfMGg/132","comment_is_top":false,"comment_ctime":1656322034,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656322034","product_id":100082101,"comment_content":"本质上就是依赖抽象，不要依赖实现的设计原则的一种落地方式吧。spi为好，适配器也好，防腐层也好，还有端口模式只是实现的隔离级别不同都有各自的适用场景","like_count":0},{"had_liked":false,"id":345124,"user_name":"quietwater","can_delete":false,"product_type":"c1","uid":1055029,"ip_address":"","ucode":"C25E2CD356D3F9","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/35/be8372be.jpg","comment_is_top":false,"comment_ctime":1652066052,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652066052","product_id":100082101,"comment_content":"看了这节内容的感觉就一个字，“爽”，我情感价值的需求被满足了。因为，困扰我很久的问题终于找到答案了。可能是因为学习过《整洁架构》吧，还有面向对象的设计原则，所以能够很好地理解文中的思想。感谢老师！","like_count":0},{"had_liked":false,"id":340499,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1648864980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648864980","product_id":100082101,"comment_content":"没有点想象力还玩不转 DDD，要把基础组件拟人化，变成领域对象","like_count":0},{"had_liked":false,"id":333200,"user_name":"过year的year","can_delete":false,"product_type":"c1","uid":1249899,"ip_address":"","ucode":"D02971800EEB57","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/6b/c5ca7d9e.jpg","comment_is_top":false,"comment_ctime":1644205282,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644205282","product_id":100082101,"comment_content":"DDD的分层还是以前单体架构中的分层，在微服务架构中总感觉特别别扭","like_count":0},{"had_liked":false,"id":322852,"user_name":"雷霹雳的爸爸","can_delete":false,"product_type":"c1","uid":1119490,"ip_address":"","ucode":"99BBA6D83DD11F","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/02/66f65388.jpg","comment_is_top":false,"comment_ctime":1637632615,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1637632615","product_id":100082101,"comment_content":"如果不是每次还有思考题，我真的会以为学习建模实践就是为了让自己不那么拧巴而求得内心的平静而已，有了思考题才意识到我们追求暂时的平静都是为了追求更大尺度上的拧巴之后的更奇妙的舒爽，上个厕所想想思考题然后继续学习下一课…","like_count":0},{"had_liked":false,"id":322799,"user_name":"无争就是yk","can_delete":false,"product_type":"c1","uid":1019128,"ip_address":"","ucode":"8739E996ACD746","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/f8/d378c121.jpg","comment_is_top":false,"comment_ctime":1637591203,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1637591203","product_id":100082101,"comment_content":"领域层在实际业务系统发展过程中很难保持稳定不变，之前的课不是也说过领域建模是一个不断调整和修正的过程吗？这里为什么说领域层是绝对稳定的。","like_count":0,"discussions":[{"author":{"id":2312639,"avatar":"https://static001.geekbang.org/account/avatar/00/23/49/bf/4936c58b.jpg","nickname":"吴晨辉","note":"","ucode":"757E98E93AF6A3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537046,"discussion_content":"对新增开发，对修改关闭，不断调整大部分是不断新增","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638945255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311148,"user_name":"邵俊达","can_delete":false,"product_type":"c1","uid":1281460,"ip_address":"","ucode":"4B7DACE6DBCF95","user_header":"https://static001.geekbang.org/account/avatar/00/13/8d/b4/ff82483d.jpg","comment_is_top":false,"comment_ctime":1631088486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631088486","product_id":100082101,"comment_content":"老师您好，可以简单说一下 Ruby On Rails 对领域驱动设计的颠覆提现在哪里吗？","like_count":0},{"had_liked":false,"id":308968,"user_name":"Marshall","can_delete":false,"product_type":"c1","uid":1197456,"ip_address":"","ucode":"E10A19386B0A9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/45/90/b2e7437a.jpg","comment_is_top":false,"comment_ctime":1629875251,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629875251","product_id":100082101,"comment_content":"“基础设施不是层”这个确实很颠覆，一般不太能被广泛接受，换成能力供应商模型，引入依赖关系确实和之前很多项目的实际情况能对应上。防腐层这种概念确实更常见，但不能用解决方案定义问题，这个学到了是一个好的idea。所谓大师真的是信手拈来，666.","like_count":0},{"had_liked":false,"id":304775,"user_name":"Learner","can_delete":false,"product_type":"c1","uid":1147456,"ip_address":"","ucode":"289EBF7A445808","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/40/02ae9409.jpg","comment_is_top":false,"comment_ctime":1627609818,"is_pvip":false,"replies":[{"id":"110254","content":"你说呢","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1627613955,"ip_address":"","comment_id":304775,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627609818","product_id":100082101,"comment_content":"和iddd里的六边形架构的区别在哪呢","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524162,"discussion_content":"你说呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627613955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304618,"user_name":"marker","can_delete":false,"product_type":"c1","uid":1094478,"ip_address":"","ucode":"DDBF1CD83665C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/b3/4e/5f22b09d.jpg","comment_is_top":false,"comment_ctime":1627524253,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1627524253","product_id":100082101,"comment_content":"个人理解，主要目的是业务不受技术约束或影响，保证领域内稳定","like_count":0},{"had_liked":false,"id":303886,"user_name":"码农戏码","can_delete":false,"product_type":"c1","uid":1607342,"ip_address":"","ucode":"2472A68B8A851E","user_header":"https://static001.geekbang.org/account/avatar/00/18/86/ae/163ec4e5.jpg","comment_is_top":false,"comment_ctime":1627046109,"is_pvip":false,"replies":[{"id":"109988","content":"纯内存不能scale ","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1627048381,"ip_address":"","comment_id":303886,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627046109","product_id":100082101,"comment_content":"对于分层，Vaughn Vernon 在《实现领域驱动设计》中把基础设施层倒置到最上面，下面依次是表现层，应用层，领域层，符合端口与适配器架构，也满足整洁架构<br><br>把基础设施层不作为层看待的确需要心理建设，相当反传统，认知中还是推荐domain是个纯内存操作，方便UT<br><br>拟人化提出新的领域概念，对产品经理来讲，也是增加了理解成本，这也是知识循环的一个阻力<br><br>","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523864,"discussion_content":"纯内存不能scale ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627048381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301418,"user_name":"Oops!","can_delete":false,"product_type":"c1","uid":1479474,"ip_address":"","ucode":"E2678CC12121A7","user_header":"https://static001.geekbang.org/account/avatar/00/16/93/32/e11fcd33.jpg","comment_is_top":false,"comment_ctime":1625668936,"is_pvip":false,"replies":[{"id":"109310","content":"不存在common模块 除非业务上有common的概念","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1626134907,"ip_address":"","comment_id":301418,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1625668936","product_id":100082101,"comment_content":"想到一个经常问到的问题，DDD需要一个common模块给所有层和域使用吗？比如customer service接口，应用层和领域层都会用到，是不是可以把customer service看作是一个通用的能力接口，(属于一种规范，比如规范了发邮件接口），提取到common中，每一层自己实现这个接口，不存在层和层的依赖问题？","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522994,"discussion_content":"不存在common模块 除非业务上有common的概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626134907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100326,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ca/26/3cc0a03c.jpg","nickname":"jack","note":"","ucode":"48A26A1737DA6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383591,"discussion_content":"关于异常定义，领域层定义会领域自己的异常嘛？如果有全局规范的一些东西，这些会定义在一个地方，但这个地方不叫“层”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626173547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301306,"user_name":"狩月","can_delete":false,"product_type":"c1","uid":1204178,"ip_address":"","ucode":"472CCBFBE77785","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/d2/a39e5cea.jpg","comment_is_top":false,"comment_ctime":1625625323,"is_pvip":false,"replies":[{"id":"109113","content":"并不是","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1625631005,"ip_address":"","comment_id":301306,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1625625323","product_id":100082101,"comment_content":"有点像端口适配器模式？","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522964,"discussion_content":"并不是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625631005,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301155,"user_name":"箭和方糖","can_delete":false,"product_type":"c1","uid":1938767,"ip_address":"","ucode":"818AAAFC0FD681","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIibashTHtGDWH5L0NlbuOrA6ZuI4uc1HkMD0hbIt8iaoH8hFf3jpb8jjhsvrRLTIazZP3YoR5WpMpg/132","comment_is_top":false,"comment_ctime":1625557544,"is_pvip":false,"replies":[{"id":"109067","content":"如果抽取的是业务概念就不会 硬拗的就会","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1625567316,"ip_address":"","comment_id":301155,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1625557544","product_id":100082101,"comment_content":"这种架构可能会带来额外的消耗，在于必须把所有基础设施抽象在领域模型内部，增加讨论成本，实现成本和维护成本，并且增加了通用语言的复杂度","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522912,"discussion_content":"如果抽取的是业务概念就不会 硬拗的就会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625567316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1161601,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b9/81/1680ec3f.jpg","nickname":"冯","note":"","ucode":"7369C8B1A50D29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382470,"discussion_content":"这个想法是从开发人员的角度出发的。从团队角度出发的话，这个架构反而会增加团队的交流意愿。当然，得是团队有这个意愿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625583782,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301142,"user_name":"koofrank","can_delete":false,"product_type":"c1","uid":1006226,"ip_address":"","ucode":"3A1C25859E8507","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/92/33bbbcac.jpg","comment_is_top":false,"comment_ctime":1625551206,"is_pvip":false,"replies":[{"id":"109066","content":"或者一个composite实现也可以","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1625567277,"ip_address":"","comment_id":301142,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1625551206","product_id":100082101,"comment_content":"添加了回访 customer service 的staff 变成了一个数组 依赖了一组客服接口 分别由基础设施层和应用实现, 是这样吗","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522906,"discussion_content":"或者一个composite实现也可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625567277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301096,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1625535540,"is_pvip":false,"replies":[{"id":"109058","content":"可以 不过没什么必要 微服务架构合适些","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1625538172,"ip_address":"","comment_id":301096,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1625535540","product_id":100082101,"comment_content":"邮件通知和回访是不是可以通过领域事件来实现，这样就不需要依赖了呢","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522896,"discussion_content":"可以 不过没什么必要 微服务架构合适些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625538172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2673605,"avatar":"https://static001.geekbang.org/account/avatar/00/28/cb/c5/c1d7ca5e.jpg","nickname":"赵晏龙","note":"","ucode":"F15730BCA97EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382892,"discussion_content":"本来准备尝试微服务架构，研发和运维力量都跟不上，遂放弃，准备SOA+一部分微服务思维和技术。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625757020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2673605,"avatar":"https://static001.geekbang.org/account/avatar/00/28/cb/c5/c1d7ca5e.jpg","nickname":"赵晏龙","note":"","ucode":"F15730BCA97EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382891,"discussion_content":"我目前也是在通过领域事件来试图进行解耦，包括状态的改变、工作流的触发等等。目前看来效果还行，不知道等项目变复杂之后会不会导致很复杂或者难以管理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625756844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1204178,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5f/d2/a39e5cea.jpg","nickname":"狩月","note":"","ucode":"472CCBFBE77785","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382523,"discussion_content":"会讲领域事件吗？相关的模式很感兴趣","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625625432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301089,"user_name":"koofrank","can_delete":false,"product_type":"c1","uid":1006226,"ip_address":"","ucode":"3A1C25859E8507","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/92/33bbbcac.jpg","comment_is_top":false,"comment_ctime":1625534131,"is_pvip":false,"replies":[{"id":"109055","content":"并不是这么分的","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1625535329,"ip_address":"","comment_id":301089,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1625534131","product_id":100082101,"comment_content":"我看8x flow 里面要讲究区分业务逻辑和领域逻辑，如果流程相关是业务做的 领域解决的是单点问题，这里的domain 层里面看上去也包含了业务不只是领域相关，如果是这样应用层里面也是业务，怎么安排哪些放在应用层哪些放在领域层呢","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522892,"discussion_content":"并不是这么分的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625535329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301069,"user_name":"koofrank","can_delete":false,"product_type":"c1","uid":1006226,"ip_address":"","ucode":"3A1C25859E8507","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5a/92/33bbbcac.jpg","comment_is_top":false,"comment_ctime":1625525064,"is_pvip":false,"replies":[{"id":"109054","content":"区分接口依赖 和 实现依赖。接口进入领域层就是领域","user_name":"作者回复","user_name_real":"徐八叉","uid":"2537798","ctime":1625535304,"ip_address":"","comment_id":301069,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1625525064","product_id":100082101,"comment_content":"支付的例子里，邮件通知，本身作为基础设计来实现，然后业务变化还希望触发支付失败回访，这时属于应用层，那现在是不是领域层依赖了两个客服service，还是把之前发邮件也放到了应用层，怎么组合这两个呢","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522889,"discussion_content":"区分接口依赖 和 实现依赖。接口进入领域层就是领域","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625535304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}