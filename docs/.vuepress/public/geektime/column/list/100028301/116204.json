{"id":116204,"title":"34 | 特别放送：OpenResty编码指南","content":"<p>你好，我是温铭。</p><p>很多开发语言都有自己的编码规范，来告诉开发者这个领域内一些约定俗成的东西，让大家写的代码风格保持一致，并且避免一些常见的陷阱。这对于新手来说是非常友好的，可以让初学者快速准确地上手。比如 Python 的 PEP 80，就是其中的典范，几乎所有的 Python 开发者都阅读过这份 Python 作者执笔的编码规范。</p><p><strong>让开发者统一思想，按照规范来写代码，是一件非常重要的事情</strong>。OpenResty 还没有自己的编码规范，有些开发者在提交 PR 后，会在代码风格上被反复 review 和要求修改，消耗了大量本可避免的时间和精力。</p><p>其实，在 OpenResty 中，也有两个可以帮你自动化检测代码风格的工具：luacheck 和 lj-releng。前者是 Lua 和 OpenResty 世界通用的检测工具，后者则是 OpenResty 自己用 perl 写的代码检测工具。</p><p>对我自己来说，我会在 VS Code 编辑器中安装 luacheck 的插件，这样在我写代码的时候就有工具来自动提示；而在项目的 CI 中，则是会把这两个工具都运行一遍，比如：</p><pre><code>luacheck -q lua\n\n./utils/lj-releng lua/*.lua lua/apisix/*.lua \n</code></pre><p>毕竟，多一个工具的检测总不是坏事。</p><p>但是，这两个工具更多的是检测全局变量、每行长度等这些最基础的代码风格，离 Python PEP 80 的详细程度还有遥远的距离，并且也没有文档给你参考。</p><!-- [[[read_end]]] --><p>所以今天，我就根据自己在OpenResty 相关开源项目中的经验，总结了一下 OpenResty 的编码风格文档，这个规范也和一些常见的 API 网关比如 Kong、APISIX 的代码风格是一致的。</p><h2>缩进</h2><p>在 OpenResty 中，我们使用 4 个空格作为缩进的标记，虽然 Lua 并没有这样的语法要求。下面是错误和正确的两段代码示例：</p><pre><code>--No\nif a then\nngx.say(&quot;hello&quot;)\nend\n</code></pre><pre><code>--yes\nif a then\n    ngx.say(&quot;hello&quot;)\nend\n</code></pre><p>为了方便，你可以在使用的编辑器中，把 tab 改为 4 个空格，来简化操作。</p><h2>空格</h2><p>在操作符的两边，都需要用一个空格来做分隔。下面是错误和正确的两段代码示例：</p><pre><code>--No\nlocal i=1\nlocal s    =    &quot;apisix&quot;\n</code></pre><pre><code>--Yes\nlocal i = 1\nlocal s = &quot;apisix&quot;\n</code></pre><h2>空行</h2><p>不少开发者会把其他语言的开发习惯带到 OpenResty 中来，比如在行尾增加一个分号：</p><pre><code>--No\nif a then\n    ngx.say(&quot;hello&quot;);\nend;\n</code></pre><p>但事实上，增加分号会让 Lua 代码显得非常丑陋，也是没有必要的。同时，你也不要为了节省代码的行数，追求所谓的“简洁”，而把多行代码变为一行。这样做会让你在定位错误的时候，不知道到底是哪一段代码出了问题：</p><pre><code>--No\nif a then ngx.say(&quot;hello&quot;) end\n</code></pre><pre><code>--yes\nif a then\n    ngx.say(&quot;hello&quot;)\nend\n</code></pre><p>另外，函数之间需要用两个空行来做分隔：</p><pre><code>--No\nlocal function foo()\nend\n local function bar()\nend\n</code></pre><pre><code>--Yes\nlocal function foo()\nend\n\n\n local function bar()\nend\n</code></pre><p>如果有多个 if elseif 的分支，它们之间也需要一个空行来做分隔：</p><pre><code>--No\nif a == 1 then\n    foo()    \nelseif a== 2 then\n    bar()    \nelseif a == 3 then\n    run()    \nelse\n    error()\nend\n</code></pre><pre><code>--Yes\nif a == 1 then\n    foo()\n\nelseif a== 2 then\n    bar()\n\nelseif a == 3 then\n    run()\n\nelse\n    error()\nend\n</code></pre><h2>每行最大长度</h2><p>每行不能超过 80 个字符，如果超过的话，需要你换行并对齐。并且，在换行对齐的时候，我们要体现出上下两行的对应关系。就下面的示例而言，第二行函数的参数，要在第一行左括号的右边。</p><pre><code>--No \nreturn limit_conn_new(&quot;plugin-limit-conn&quot;, conf.conn, conf.burst, conf.default_conn_delay)\n</code></pre><pre><code>--Yes\nreturn limit_conn_new(&quot;plugin-limit-conn&quot;, conf.conn, conf.burst,\n                    conf.default_conn_delay)\n</code></pre><p>如果是字符串拼接问题的对齐，则需要把 <code>..</code> 放到下一行中：</p><pre><code>--No \nreturn limit_conn_new(&quot;plugin-limit-conn&quot; ..  &quot;plugin-limit-conn&quot; ..\n                    &quot;plugin-limit-conn&quot;)\n</code></pre><pre><code>--Yes\nreturn limit_conn_new(&quot;plugin-limit-conn&quot; .. &quot;plugin-limit-conn&quot;\n                    .. &quot;plugin-limit-conn&quot;)\n</code></pre><h2>变量</h2><p>这一点我前面也多次强调过，我们应该永远使用局部变量，不要使用全局变量：</p><pre><code>--No\ni = 1\ns = &quot;apisix&quot;\n</code></pre><pre><code>--Yes\nlocal i = 1\nlocal s = &quot;apisix&quot;\n</code></pre><p>至于变量的命名，应该使用 <code>snake_case</code> 风格：</p><pre><code>--No\nlocal IndexArr = 1\nlocal str_Name = &quot;apisix&quot;\n</code></pre><pre><code>--Yes\nlocal index_arr = 1\nlocal str_name = &quot;apisix&quot;\n</code></pre><p>而对于常量，则是要使用全部大写的形式：</p><pre><code>--No\nlocal max_int = 65535\nlocal server_name = &quot;apisix&quot;\n</code></pre><pre><code>--Yes\nlocal MAX_INT = 65535\nlocal SERVER_NAME = &quot;apisix&quot;\n</code></pre><h2>数组</h2><p>在OpenResty中，我们使用<code>table.new</code> 来预先分配数组：</p><pre><code>--No\nlocal t = {}\nfor i = 1, 100 do\n   t[i] = i\n end\n</code></pre><pre><code>--Yes \nlocal new_tab = require &quot;table.new&quot;\n local t = new_tab(100, 0)\n for i = 1, 100 do\n   t[i] = i\n end\n</code></pre><p>另外注意，一定不要在数组中使用 nil：</p><pre><code>--No\nlocal t = {1, 2, nil, 3}\n</code></pre><p>如果一定要使用空值，请用 ngx.null 来表示：</p><pre><code>--Yes\nlocal t = {1, 2, ngx.null, 3}\n</code></pre><h2>字符串</h2><p>千万不要在热代码路径上拼接字符串：</p><pre><code>--No\nlocal s = &quot;&quot;\nfor i = 1, 100000 do\n    s = s .. &quot;a&quot;\nend\n</code></pre><pre><code>--Yes\nlocal t = {}\nfor i = 1, 100000 do\n    t[i] = &quot;a&quot;\nend\nlocal s =  table.concat(t, &quot;&quot;)\n</code></pre><h2>函数</h2><p>函数的命名也同样遵循 <code>snake_case</code>：</p><pre><code>--No\nlocal function testNginx()\nend\n</code></pre><pre><code>--Yes\nlocal function test_nginx()\nend\n</code></pre><p>并且，函数应该尽可能早地返回：</p><pre><code>--No\nlocal function check(age, name)\n    local ret = true\n    if age &lt; 20 then\n        ret = false\n    end\n\n    if name == &quot;a&quot; then\n        ret = false\n    end\n    -- do something else \n    return ret \n</code></pre><pre><code>--Yes\nlocal function check(age, name)\n    if age &lt; 20 then\n        return false\n    end\n\n    if name == &quot;a&quot; then\n        return false\n    end\n    -- do something else \n    return true \n</code></pre><h2>模块</h2><p>所有 require 的库都要 local 化：</p><pre><code>--No\nlocal function foo()\n    local ok, err = ngx.timer.at(delay, handler)\nend\n</code></pre><pre><code>--Yes\nlocal timer_at = ngx.timer.at\n\nlocal function foo()\n    local ok, err = timer_at(delay, handler)\nend\n</code></pre><p>为了风格的统一，require 和 ngx 也需要 local 化：</p><pre><code>--No\nlocal core = require(&quot;apisix.core&quot;)\nlocal timer_at = ngx.timer.at\n\nlocal function foo()\n    local ok, err = timer_at(delay, handler)\nend\n</code></pre><pre><code>--Yes\nlocal ngx = ngx\nlocal require = require\nlocal core = require(&quot;apisix.core&quot;)\nlocal timer_at = ngx.timer.at\n\nlocal function foo()\n    local ok, err = timer_at(delay, handler)\nend\n</code></pre><h2>错误处理</h2><p>对于有错误信息返回的函数，我们必须对错误信息进行判断和处理：</p><pre><code>--No\nlocal sock = ngx.socket.tcp()\n local ok = sock:connect(&quot;www.google.com&quot;, 80)\n ngx.say(&quot;successfully connected to google!&quot;)\n</code></pre><pre><code>--Yes\nlocal sock = ngx.socket.tcp()\n local ok, err = sock:connect(&quot;www.google.com&quot;, 80)\n if not ok then\n     ngx.say(&quot;failed to connect to google: &quot;, err)\n     return\n end\n ngx.say(&quot;successfully connected to google!&quot;)\n</code></pre><p>而如果是自己编写的函数，错误信息要作为第二个参数，用字符串的格式返回：</p><pre><code>--No\nlocal function foo()\n    local ok, err = func()\n    if not ok then\n        return false\n    end\n    return true\nend\n</code></pre><pre><code>--No\nlocal function foo()\n    local ok, err = func()\n    if not ok then\n        return false, {msg = err}\n    end\n    return true\nend\n</code></pre><pre><code>--Yes\nlocal function foo()\n    local ok, err = func()\n    if not ok then\n        return false, &quot;failed to call func(): &quot; .. err\n    end\n    return true\nend\n</code></pre><h2>写在最后</h2><p>这个编程规范算是一个最初版本，我会公开到 <a href=\"https://github.com/apache/incubator-apisix/blob/v1.3/CODE_STYLE.md\">GitHub</a> 中来持续更新和维护。如果文中没有包含到你想知道的规范，非常欢迎你留言提问，我来给你解答。也欢迎你把这篇规范分享出去，让更多的OpenResty使用者参与进来。</p>","neighbors":{"left":{"article_title":"33 | 性能提升10倍的秘诀：必须用好 table","id":114613},"right":{"article_title":"35 | [视频]实际项目中的性能优化：ingress-nginx中的几个PR解读","id":105637}},"comments":[]}