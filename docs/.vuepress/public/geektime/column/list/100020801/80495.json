{"id":80495,"title":"38 | 都说InnoDB好，那还要不要使用Memory引擎？","content":"<p>我在上一篇文章末尾留给你的问题是：两个group by 语句都用了order by null，为什么使用内存临时表得到的语句结果里，0这个值在最后一行；而使用磁盘临时表得到的结果里，0这个值在第一行？</p><p>今天我们就来看看，出现这个问题的原因吧。</p><h1>内存表的数据组织结构</h1><p>为了便于分析，我来把这个问题简化一下，假设有以下的两张表t1 和 t2，其中表t1使用Memory 引擎， 表t2使用InnoDB引擎。</p><pre><code>create table t1(id int primary key, c int) engine=Memory;\ncreate table t2(id int primary key, c int) engine=innodb;\ninsert into t1 values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(0,0);\ninsert into t2 values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(0,0);\n</code></pre><p>然后，我分别执行select * from t1和select * from t2。</p><p><img src=\"https://static001.geekbang.org/resource/image/3f/e6/3fb1100b6e3390357d4efff0ba4765e6.png?wh=599*330\" alt=\"\"></p><center><span class=\"reference\">图1 两个查询结果-0的位置</span></center><p>可以看到，内存表t1的返回结果里面0在最后一行，而InnoDB表t2的返回结果里0在第一行。</p><p>出现这个区别的原因，要从这两个引擎的主键索引的组织方式说起。</p><p>表t2用的是InnoDB引擎，它的主键索引id的组织方式，你已经很熟悉了：InnoDB表的数据就放在主键索引树上，主键索引是B+树。所以表t2的数据组织方式如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/4e/8d/4e29e4f9db55ace6ab09161c68ad8c8d.jpg?wh=1142*880\" alt=\"\"></p><center><span class=\"reference\">图2 表t2的数据组织</span></center><p>主键索引上的值是有序存储的。在执行select *的时候，就会按照叶子节点从左到右扫描，所以得到的结果里，0就出现在第一行。</p><p>与InnoDB引擎不同，Memory引擎的数据和索引是分开的。我们来看一下表t1中的数据内容。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/dd/84/dde03e92074cecba4154d30cd16a9684.jpg?wh=1142*880\" alt=\"\"></p><center><span class=\"reference\">图3 表t1 的数据组织</span></center><p>可以看到，内存表的数据部分以数组的方式单独存放，而主键id索引里，存的是每个数据的位置。主键id是hash索引，可以看到索引上的key并不是有序的。</p><p>在内存表t1中，当我执行select *的时候，走的是全表扫描，也就是顺序扫描这个数组。因此，0就是最后一个被读到，并放入结果集的数据。</p><p>可见，InnoDB和Memory引擎的数据组织方式是不同的：</p><ul>\n<li>InnoDB引擎把数据放在主键索引上，其他索引上保存的是主键id。这种方式，我们称之为<strong>索引组织表</strong>（Index Organizied Table）。</li>\n<li>而Memory引擎采用的是把数据单独存放，索引上保存数据位置的数据组织形式，我们称之为<strong>堆组织表</strong>（Heap Organizied Table）。</li>\n</ul><p>从中我们可以看出，这两个引擎的一些典型不同：</p><ol>\n<li>\n<p>InnoDB表的数据总是有序存放的，而内存表的数据就是按照写入顺序存放的；</p>\n</li>\n<li>\n<p>当数据文件有空洞的时候，InnoDB表在插入新数据的时候，为了保证数据有序性，只能在固定的位置写入新值，而内存表找到空位就可以插入新值；</p>\n</li>\n<li>\n<p>数据位置发生变化的时候，InnoDB表只需要修改主键索引，而内存表需要修改所有索引；</p>\n</li>\n<li>\n<p>InnoDB表用主键索引查询时需要走一次索引查找，用普通索引查询的时候，需要走两次索引查找。而内存表没有这个区别，所有索引的“地位”都是相同的。</p>\n</li>\n<li>\n<p>InnoDB支持变长数据类型，不同记录的长度可能不同；内存表不支持Blob 和 Text字段，并且即使定义了varchar(N)，实际也当作char(N)，也就是固定长度字符串来存储，因此内存表的每行数据长度相同。</p>\n</li>\n</ol><p>由于内存表的这些特性，每个数据行被删除以后，空出的这个位置都可以被接下来要插入的数据复用。比如，如果要在表t1中执行：</p><pre><code>delete from t1 where id=5;\ninsert into t1 values(10,10);\nselect * from t1;\n</code></pre><p>就会看到返回结果里，id=10这一行出现在id=4之后，也就是原来id=5这行数据的位置。</p><p>需要指出的是，表t1的这个主键索引是哈希索引，因此如果执行范围查询，比如</p><pre><code>select * from t1 where id&lt;5;\n</code></pre><p>是用不上主键索引的，需要走全表扫描。你可以借此再回顾下<a href=\"https://time.geekbang.org/column/article/69236\">第4篇文章</a>的内容。那如果要让内存表支持范围扫描，应该怎么办呢 ？</p><h1>hash索引和B-Tree索引</h1><p>实际上，内存表也是支持B-Tree索引的。在id列上创建一个B-Tree索引，SQL语句可以这么写：</p><pre><code>alter table t1 add index a_btree_index using btree (id);\n</code></pre><p>这时，表t1的数据组织形式就变成了这样：</p><p><img src=\"https://static001.geekbang.org/resource/image/17/e3/1788deca56cb83c114d8353c92e3bde3.jpg?wh=1142*880\" alt=\"\"></p><center><span class=\"reference\">图4 表t1的数据组织--增加B-Tree索引</span></center><p>新增的这个B-Tree索引你看着就眼熟了，这跟InnoDB的b+树索引组织形式类似。</p><p>作为对比，你可以看一下这下面这两个语句的输出：</p><p><img src=\"https://static001.geekbang.org/resource/image/a8/8a/a85808fcccab24911d257d720550328a.png?wh=641*540\" alt=\"\"></p><center><span class=\"reference\">图5 使用B-Tree和hash索引查询返回结果对比</span></center><p>可以看到，执行select * from t1 where id&lt;5的时候，优化器会选择B-Tree索引，所以返回结果是0到4。 使用force index强行使用主键id这个索引，id=0这一行就在结果集的最末尾了。</p><p>其实，一般在我们的印象中，内存表的优势是速度快，其中的一个原因就是Memory引擎支持hash索引。当然，更重要的原因是，内存表的所有数据都保存在内存，而内存的读写速度总是比磁盘快。</p><p>但是，接下来我要跟你说明，为什么我不建议你在生产环境上使用内存表。这里的原因主要包括两个方面：</p><ol>\n<li>\n<p>锁粒度问题；</p>\n</li>\n<li>\n<p>数据持久化问题。</p>\n</li>\n</ol><h1>内存表的锁</h1><p>我们先来说说内存表的锁粒度问题。</p><p>内存表不支持行锁，只支持表锁。因此，一张表只要有更新，就会堵住其他所有在这个表上的读写操作。</p><p>需要注意的是，这里的表锁跟之前我们介绍过的MDL锁不同，但都是表级的锁。接下来，我通过下面这个场景，跟你模拟一下内存表的表级锁。</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/29/f216e2d707559ed2ca98fbe21e509f29.png?wh=933*221\" alt=\"\"></p><center><span class=\"reference\">图6 内存表的表锁--复现步骤</span></center><p>在这个执行序列里，session A的update语句要执行50秒，在这个语句执行期间session B的查询会进入锁等待状态。session C的show processlist 结果输出如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/14/16/14d88076dad6db573f0b66f2c17df916.png?wh=1273*172\" alt=\"\"></p><center><span class=\"reference\">图7 内存表的表锁--结果</span></center><p>跟行锁比起来，表锁对并发访问的支持不够好。所以，内存表的锁粒度问题，决定了它在处理并发事务的时候，性能也不会太好。</p><h1>数据持久性问题</h1><p>接下来，我们再看看数据持久性的问题。</p><p>数据放在内存中，是内存表的优势，但也是一个劣势。因为，数据库重启的时候，所有的内存表都会被清空。</p><p>你可能会说，如果数据库异常重启，内存表被清空也就清空了，不会有什么问题啊。但是，在高可用架构下，内存表的这个特点简直可以当做bug来看待了。为什么这么说呢？</p><p><strong>我们先看看M-S架构下，使用内存表存在的问题。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/5b/e9/5b910e4c0f1afa219aeecd1f291c95e9.jpg?wh=1142*880\" alt=\"\"></p><center><span class=\"reference\">图8 M-S基本架构</span></center><p>我们来看一下下面这个时序：</p><ol>\n<li>\n<p>业务正常访问主库；</p>\n</li>\n<li>\n<p>备库硬件升级，备库重启，内存表t1内容被清空；</p>\n</li>\n<li>\n<p>备库重启后，客户端发送一条update语句，修改表t1的数据行，这时备库应用线程就会报错“找不到要更新的行”。</p>\n</li>\n</ol><p>这样就会导致主备同步停止。当然，如果这时候发生主备切换的话，客户端会看到，表t1的数据“丢失”了。</p><p>在图8中这种有proxy的架构里，大家默认主备切换的逻辑是由数据库系统自己维护的。这样对客户端来说，就是“网络断开，重连之后，发现内存表数据丢失了”。</p><p>你可能说这还好啊，毕竟主备发生切换，连接会断开，业务端能够感知到异常。</p><p>但是，接下来内存表的这个特性就会让使用现象显得更“诡异”了。由于MySQL知道重启之后，内存表的数据会丢失。所以，担心主库重启之后，出现主备不一致，MySQL在实现上做了这样一件事儿：在数据库重启之后，往binlog里面写入一行DELETE FROM t1。</p><p><strong>如果你使用是如图9所示的双M结构的话：</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/40/57/4089c9c1f92ce61d2ed779fd0932ba57.jpg?wh=1142*880\" alt=\"\"></p><center><span class=\"reference\">图9 双M结构</span></center><p>在备库重启的时候，备库binlog里的delete语句就会传到主库，然后把主库内存表的内容删除。这样你在使用的时候就会发现，主库的内存表数据突然被清空了。</p><p>基于上面的分析，你可以看到，内存表并不适合在生产环境上作为普通数据表使用。</p><p>有同学会说，但是内存表执行速度快呀。这个问题，其实你可以这么分析：</p><ol>\n<li>\n<p>如果你的表更新量大，那么并发度是一个很重要的参考指标，InnoDB支持行锁，并发度比内存表好；</p>\n</li>\n<li>\n<p>能放到内存表的数据量都不大。如果你考虑的是读的性能，一个读QPS很高并且数据量不大的表，即使是使用InnoDB，数据也是都会缓存在InnoDB Buffer Pool里的。因此，使用InnoDB表的读性能也不会差。</p>\n</li>\n</ol><p>所以，<strong>我建议你把普通内存表都用InnoDB表来代替。</strong>但是，有一个场景却是例外的。</p><p>这个场景就是，我们在第35和36篇说到的用户临时表。在数据量可控，不会耗费过多内存的情况下，你可以考虑使用内存表。</p><p>内存临时表刚好可以无视内存表的两个不足，主要是下面的三个原因：</p><ol>\n<li>\n<p>临时表不会被其他线程访问，没有并发性的问题；</p>\n</li>\n<li>\n<p>临时表重启后也是需要删除的，清空数据这个问题不存在；</p>\n</li>\n<li>\n<p>备库的临时表也不会影响主库的用户线程。</p>\n</li>\n</ol><p>现在，我们回过头再看一下第35篇join语句优化的例子，当时我建议的是创建一个InnoDB临时表，使用的语句序列是：</p><pre><code>create temporary table temp_t(id int primary key, a int, b int, index(b))engine=innodb;\ninsert into temp_t select * from t2 where b&gt;=1 and b&lt;=2000;\nselect * from t1 join temp_t on (t1.b=temp_t.b);\n</code></pre><p>了解了内存表的特性，你就知道了， 其实这里使用内存临时表的效果更好，原因有三个：</p><ol>\n<li>\n<p>相比于InnoDB表，使用内存表不需要写磁盘，往表temp_t的写数据的速度更快；</p>\n</li>\n<li>\n<p>索引b使用hash索引，查找的速度比B-Tree索引快；</p>\n</li>\n<li>\n<p>临时表数据只有2000行，占用的内存有限。</p>\n</li>\n</ol><p>因此，你可以对<a href=\"https://time.geekbang.org/column/article/80147\">第35篇文章</a>的语句序列做一个改写，将临时表temp_t改成内存临时表，并且在字段b上创建一个hash索引。</p><pre><code>create temporary table temp_t(id int primary key, a int, b int, index (b))engine=memory;\ninsert into temp_t select * from t2 where b&gt;=1 and b&lt;=2000;\nselect * from t1 join temp_t on (t1.b=temp_t.b);\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/a4/92/a468ba6d14ea225623074b6255b99f92.png?wh=2132*906\" alt=\"\"></p><center><span class=\"reference\">图10 使用内存临时表的执行效果</span></center><p>可以看到，不论是导入数据的时间，还是执行join的时间，使用内存临时表的速度都比使用InnoDB临时表要更快一些。</p><h1>小结</h1><p>今天这篇文章，我从“要不要使用内存表”这个问题展开，和你介绍了Memory引擎的几个特性。</p><p>可以看到，由于重启会丢数据，如果一个备库重启，会导致主备同步线程停止；如果主库跟这个备库是双M架构，还可能导致主库的内存表数据被删掉。</p><p>因此，在生产上，我不建议你使用普通内存表。</p><p>如果你是DBA，可以在建表的审核系统中增加这类规则，要求业务改用InnoDB表。我们在文中也分析了，其实InnoDB表性能还不错，而且数据安全也有保障。而内存表由于不支持行锁，更新语句会阻塞查询，性能也未必就如想象中那么好。</p><p>基于内存表的特性，我们还分析了它的一个适用场景，就是内存临时表。内存表支持hash索引，这个特性利用起来，对复杂查询的加速效果还是很不错的。</p><p>最后，我给你留一个问题吧。</p><p>假设你刚刚接手的一个数据库上，真的发现了一个内存表。备库重启之后肯定是会导致备库的内存表数据被清空，进而导致主备同步停止。这时，最好的做法是将它修改成InnoDB引擎表。</p><p>假设当时的业务场景暂时不允许你修改引擎，你可以加上什么自动化逻辑，来避免主备同步停止呢？</p><p>你可以把你的思考和分析写在评论区，我会在下一篇文章的末尾跟你讨论这个问题。感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><h1>上期问题时间</h1><p>今天文章的正文内容，已经回答了我们上期的问题，这里就不再赘述了。</p><p>评论区留言点赞板：</p><blockquote>\n<p>@老杨同志、@poppy、@长杰 这三位同学给出了正确答案，春节期间还持续保持跟进学习，给你们点赞。</p>\n</blockquote>","neighbors":{"left":{"article_title":"37 | 什么时候会使用内部临时表？","id":80477},"right":{"article_title":"39 | 自增主键为什么不是连续的？","id":80531}},"comments":[{"had_liked":false,"id":65778,"user_name":"放","can_delete":false,"product_type":"c1","uid":1178180,"ip_address":"","ucode":"F637FF0D2F63AB","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/44/aa19d1f6.jpg","comment_is_top":false,"comment_ctime":1549635232,"is_pvip":false,"replies":[{"id":"23257","content":"新年快乐🤝","user_name":"作者回复","comment_id":65778,"uid":"1264162","ip_address":"","utype":1,"ctime":1549637556,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"100333883040","product_id":100020801,"comment_content":"老师新年快乐！过年都不忘给我们传授知识！","like_count":24,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438583,"discussion_content":"新年快乐🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549637556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65713,"user_name":"salt","can_delete":false,"product_type":"c1","uid":1056332,"ip_address":"","ucode":"A7D8D09E12353B","user_header":"https://static001.geekbang.org/account/avatar/00/10/1e/4c/d6416f57.jpg","comment_is_top":false,"comment_ctime":1549598752,"is_pvip":false,"replies":[{"id":"23239","content":"即使是SSD，顺序写也比随机写快些的。 不过确实没有机械盘那么明显。<br>","user_name":"作者回复","comment_id":65713,"uid":"1264162","ip_address":"","utype":1,"ctime":1549604169,"user_name_real":"林晓斌"}],"discussion_count":2,"race_medal":0,"score":"74564042784","product_id":100020801,"comment_content":"新年好！<br>课后作业：在备库配置跳过该内存表的主从同步。<br><br>有一个问题一直困扰着我：SSD以及云主机的广泛运用，像Innodb这种使用WAL技术似乎并不能发挥最大性能（我的理解：基于SSD的WAL更多的只是起到队列一样削峰填谷的作用）。对于一些数据量不是特别大，但读写频繁的应用（比如点赞、积分），有没有更好的引擎推荐。","like_count":18,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438560,"discussion_content":"即使是SSD，顺序写也比随机写快些的。 不过确实没有机械盘那么明显。\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1549604169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1508329,"avatar":"https://static001.geekbang.org/account/avatar/00/17/03/e9/6358059c.jpg","nickname":"GalaxyCreater","note":"","ucode":"C79E8A088D57CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274442,"discussion_content":"为什么使用memory的从库异常重启后，主库的表被清空了，为啥这样会导致主备同步停止？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590583227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65819,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1549684008,"is_pvip":false,"replies":[{"id":"23274","content":"这就是堆组织表的数据存放方式","user_name":"作者回复","comment_id":65819,"uid":"1264162","ip_address":"","utype":1,"ctime":1549698578,"user_name_real":"林晓斌"}],"discussion_count":3,"race_medal":0,"score":"65974193448","product_id":100020801,"comment_content":"为什么memory 引擎中数据按照数组单独存储，0索引对应的数据怎么放到数组的最后","like_count":16,"discussions":[{"author":{"id":1030842,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ba/ba/83de3488.jpg","nickname":"Carter","note":"","ucode":"1FD476D8F2BE27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394111,"discussion_content":"按插入顺序","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1631727395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1144458,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/8a/74cf038a.jpg","nickname":"老K","note":"","ucode":"B9ED8A82942D1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336911,"discussion_content":"看到你这个问题的时候我也持有同样的疑问，想了下，因为插入的顺序就是如此`insert into t1 values(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8),(9,9),(0,0);`，再加堆组织表的存放方式.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608727852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438601,"discussion_content":"这就是堆组织表的数据存放方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549698578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65747,"user_name":"Long","can_delete":false,"product_type":"c1","uid":1318970,"ip_address":"","ucode":"2417242560360A","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/3a/90db6a24.jpg","comment_is_top":false,"comment_ctime":1549616851,"is_pvip":false,"replies":[{"id":"25699","content":"1&amp;2 查询information_schema.tables的时候，会把所有的表都访问到一次，这里不止是4w个表，而是这个实例上所有的表，也就是10万<br><br>3. 因为系统一般设置的table_definition_cache 都不会太大，你要打开10万张表，就只能轮流打开，然后轮流从table_definition_cache里面淘汰。这样就跟其他查询在table_definition_cache这个结构里出现了互相等待资源的情况。<br><br>嗯，这个其实就是我不建议用界面工具的原因之一<br><br>不好意思，你这个问题这么迟才回复你😆","user_name":"作者回复","comment_id":65747,"uid":"1264162","ip_address":"","utype":1,"ctime":1551376062,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"61679158995","product_id":100020801,"comment_content":"老师新年好 :-)<br>刚好遇到一个问题。 <br><br>本来准备更新到，一个查询是怎么运行的里面的，看到这篇更新文章，就写在这吧，希望老师帮忙解答。<br><br>关于这个系统memory引擎表：information_schema.tables<br>相关信息如下<br>（1）Verison: MySQL 5.6.26<br>（2）数据量table_schema = abc的有接近4W的表，整个实例有接近10W的表。（默认innodb引擎）<br>（3）mysql.user和mysql.db的数据量都是100-200的行数，MyISAM引擎。<br>（4）默认事务隔离级别RC<br><br><br>在运行查询语句1的时候：select * from information_schema.tables where table_schema = &#39;abc&#39;;<br>状态一直是check permission，opening tables，其他线程需要打开的表在opend tables里面被刷掉的，会显示在opening tables，可能需要小几秒后基本恢复正常。<br><br>但是如果在运行查询语句2：select count(1) from information_schema.tables where table_schema = &#39;abc&#39;; 这个时候语句2本身在profiling看长期处于check permission状态，其他线程就会出现阻塞现象，大部分卡在了opening tables，小部分closing tables。我测试下了，当个表查询的时候check permission大概也就是0.0005s左右的时间，4W个表理论良好状态应该是几十秒的事情。<br>但是语句1可能需要5-10分钟，语句2需要5分钟。<br><br>3个问题，请老师抽空看下：<br>（1）information_schema.tables的组成方式，是我每次查询的时候从数据字典以及data目录下的文件中实时去读的吗？<br>（2）语句1和语句2在运行的时候的过程分别是怎样的，特别是语句2。<br>（3）语句2为什么会出现大量阻塞其他事务，其他事务都卡在opening tables的状态。<br><br><br>PS: 最后根据audit log分析来看，语句实际上是MySQL的一个客户端Toad发起的，当使用Toad的object explorer的界面来查询表，或者设置connection的时候指定的的default schema是大域的时候就会run这个语句：（table_schema改成了abc，其他都是原样）<br>SELECT COUNT(1) FROM information_schema.tables WHERE table_schema = &#39;abc&#39; AND table_type != &#39;VIEW&#39;;<br><br><br>再次感谢！","like_count":15,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438573,"discussion_content":"1&amp;amp;2 查询information_schema.tables的时候，会把所有的表都访问到一次，这里不止是4w个表，而是这个实例上所有的表，也就是10万\n\n3. 因为系统一般设置的table_definition_cache 都不会太大，你要打开10万张表，就只能轮流打开，然后轮流从table_definition_cache里面淘汰。这样就跟其他查询在table_definition_cache这个结构里出现了互相等待资源的情况。\n\n嗯，这个其实就是我不建议用界面工具的原因之一\n\n不好意思，你这个问题这么迟才回复你😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551376062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66101,"user_name":"skyoo","can_delete":false,"product_type":"c1","uid":1302503,"ip_address":"","ucode":"EBC0528BA02DD7","user_header":"https://static001.geekbang.org/account/avatar/00/13/df/e7/4ce5ed27.jpg","comment_is_top":false,"comment_ctime":1549877317,"is_pvip":false,"replies":[{"id":"23416","content":"嗯，这个也是可以的。不过也会放过其他引擎表的主备不一致的报错哈","user_name":"作者回复","comment_id":66101,"uid":"1264162","ip_address":"","utype":1,"ctime":1549880137,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"57384452165","product_id":100020801,"comment_content":"重启前 my.cnf 添加 skip-slave-errors 忽略 内存表引起的主从异常导致复制失败<br><br>","like_count":14,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438703,"discussion_content":"嗯，这个也是可以的。不过也会放过其他引擎表的主备不一致的报错哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549880137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263817,"user_name":"Geek_da015d","can_delete":false,"product_type":"c1","uid":1982864,"ip_address":"","ucode":"E2F95CC01AE094","user_header":"","comment_is_top":false,"comment_ctime":1606273324,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"53145880876","product_id":100020801,"comment_content":"很重要的一点没说啊，内存表不支持事务。怪不得写demo的时候总锁不住","like_count":13,"discussions":[{"author":{"id":2889981,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/18/fd/ccc7b563.jpg","nickname":"Vegeta","note":"","ucode":"1AE2D9337A728C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550216,"discussion_content":"整个MySQL提供的存储引擎，只有innoDB才支持事务","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1644418298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1745179,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/j0gBKF8EKfRMTnBOqXR3xcqquJdzYUibXOIb32HejppBPo644p6JB3Et08Su4TUaDRWt8DzPxYtm8iabEJN2uJKw/132","nickname":"一个顶三","note":"","ucode":"165596847783D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333283,"discussion_content":"是的，你这么一说我也反应过来了，show engines里面明确提示memory不支持事务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607495463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66032,"user_name":"llx","can_delete":false,"product_type":"c1","uid":1153012,"ip_address":"","ucode":"95741E1BD74B26","user_header":"https://static001.geekbang.org/account/avatar/00/11/97/f4/6709b8cf.jpg","comment_is_top":false,"comment_ctime":1549854329,"is_pvip":false,"replies":[{"id":"23402","content":"1. 取决于对临时表的访问模式哦，如果是需要用到索引查找，还是要创建的。如果创建的临时表只是用于全表扫描，就可以不创建索引；<br>2. 是的，如果明确要用范围查找，就得创建b-tree索引","user_name":"作者回复","comment_id":66032,"uid":"1264162","ip_address":"","utype":1,"ctime":1549873663,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"48794494585","product_id":100020801,"comment_content":"1、如果临时表读数据的次数很少（比如只读一次），是不是建临时表时不创建索引效果很更好？<br>2、engine=memory 如果遇到范围查找，在使用哈希索引时应该不会使用索引吧","like_count":12,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438682,"discussion_content":"1. 取决于对临时表的访问模式哦，如果是需要用到索引查找，还是要创建的。如果创建的临时表只是用于全表扫描，就可以不创建索引；\n2. 是的，如果明确要用范围查找，就得创建b-tree索引","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549873663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65941,"user_name":"杜嘉嘉","can_delete":false,"product_type":"c1","uid":1306430,"ip_address":"","ucode":"C23DE27E7886BD","user_header":"https://static001.geekbang.org/account/avatar/00/13/ef/3e/9c3a8abc.jpg","comment_is_top":false,"comment_ctime":1549788509,"is_pvip":false,"replies":[{"id":"23307","content":"是，如我们文中说的，不建议使用普通内存表了哈","user_name":"作者回复","comment_id":65941,"uid":"1264162","ip_address":"","utype":1,"ctime":1549802988,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"40204494173","product_id":100020801,"comment_content":"我的认识里，有一点不是很清楚。memory这个存储引擎，最大的特性应该是把数据存到内存。但是innodb也可以把数据存到内存，不但可以存到内存(innodb buffer size)，还可以进行持久化。这样一对比，我感觉memory的优势更没有了。不知道我讲的对不对","like_count":10,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438649,"discussion_content":"是，如我们文中说的，不建议使用普通内存表了哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549802988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73258,"user_name":"陈扬鸿","can_delete":false,"product_type":"c1","uid":1284708,"ip_address":"","ucode":"DDDA8493CDC83C","user_header":"https://static001.geekbang.org/account/avatar/00/13/9a/64/eea9aa33.jpg","comment_is_top":false,"comment_ctime":1551845996,"is_pvip":false,"replies":[{"id":"28007","content":"你看看能不能把短连接改成长连接<br><br>还有，这个语句应该是没用的，看看能不能通过配置框架参数，来避免执行这个语句","user_name":"作者回复","comment_id":73258,"uid":"1264162","ip_address":"","utype":1,"ctime":1552723971,"user_name_real":"林晓斌"}],"discussion_count":2,"race_medal":0,"score":"27321649772","product_id":100020801,"comment_content":"老师你好，今天生产上出碰到一个解决不了的问题,php的yii框架，使用show full processlist 查看 全是如下语句有100多条<br>SELECT<br>    kcu.constraint_name,<br>    kcu.column_name,<br>    kcu.referenced_table_name,<br>    kcu.referenced_column_name<br>FROM information_schema.referential_constraints AS rc<br>JOIN information_schema.key_column_usage AS kcu ON<br>    (<br>        kcu.constraint_catalog = rc.constraint_catalog OR<br>        (kcu.constraint_catalog IS NULL AND rc.constraint_catalog IS NULL)<br>    ) AND<br>    kcu.constraint_schema = rc.constraint_schema AND<br>    kcu.constraint_name = rc.constraint_name<br>WHERE rc.constraint_schema = database() AND kcu.table_schema = database()<br>AND rc.table_name = &#39;t1&#39; AND kcu.table_name = &#39;t1&#39; <br>这个可以优化吗 这个库是数据字典的 现在数据库无法对外提供服务  请老师指教！","like_count":6,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441990,"discussion_content":"你看看能不能把短连接改成长连接\n\n还有，这个语句应该是没用的，看看能不能通过配置框架参数，来避免执行这个语句","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552723971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1672786,"avatar":"https://static001.geekbang.org/account/avatar/00/19/86/52/91c7d112.jpg","nickname":"Garen","note":"","ucode":"0608C88F83EF0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41848,"discussion_content":"Yii 表示我不被这个锅","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572522360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172473,"user_name":"晚风·和煦","can_delete":false,"product_type":"c1","uid":1236047,"ip_address":"","ucode":"0B1DB8F437A4B2","user_header":"","comment_is_top":false,"comment_ctime":1579183942,"is_pvip":false,"replies":[{"id":"66901","content":"对","user_name":"作者回复","comment_id":172473,"uid":"1264162","ip_address":"","utype":1,"ctime":1579228367,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"23054020422","product_id":100020801,"comment_content":"老师，内存表就是使用memory引擎创建的表吗？😂","like_count":6,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481750,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579228367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66050,"user_name":"夹心面包","can_delete":false,"product_type":"c1","uid":1301957,"ip_address":"","ucode":"002BBA49D83D17","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJCscgdVibmoPyRLRaicvk6rjTJxePZ6VFHvGjUQvtfhCS6kO4OZ1AVibbhNGKlWZmpEFf2yA6ptsqHw/132","comment_is_top":false,"comment_ctime":1549864041,"is_pvip":false,"replies":[{"id":"23398","content":"嗯嗯，联系开发改造是对的😆","user_name":"作者回复","comment_id":66050,"uid":"1264162","ip_address":"","utype":1,"ctime":1549873353,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"14434765929","product_id":100020801,"comment_content":"我们线上就有一个因为内存表导致的主从同步异常的例子,我的做法是先跳过这个表的同步,然后开发进行改造,取消这张表的作用","like_count":4,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438686,"discussion_content":"嗯嗯，联系开发改造是对的😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549873353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65833,"user_name":"长杰","can_delete":false,"product_type":"c1","uid":1312212,"ip_address":"","ucode":"DD52C9494005F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/d4/e06bf86d.jpg","comment_is_top":false,"comment_ctime":1549692625,"is_pvip":false,"replies":[{"id":"23283","content":"因为重启的时候已经执行了delete语句，所以再写入数据的动作也可以保留binlog哈","user_name":"作者回复","comment_id":65833,"uid":"1264162","ip_address":"","utype":1,"ctime":1549789514,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"10139627217","product_id":100020801,"comment_content":"内存表一般数据量不大，并且更新不频繁，可以写一个定时任务，定期检测内存表的数据，如果数据不空，就将它持久化到一个innodb同结构的表中，如果为空，就反向将数据写到内存表中，这些操作可设置为不写入binlog。","like_count":2,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438605,"discussion_content":"因为重启的时候已经执行了delete语句，所以再写入数据的动作也可以保留binlog哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549789514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298244,"user_name":"antz","can_delete":false,"product_type":"c1","uid":1005589,"ip_address":"","ucode":"BDFDED6D7F0BD2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/58/15/56f4e62a.jpg","comment_is_top":false,"comment_ctime":1623979608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5918946904","product_id":100020801,"comment_content":"问句：在真实业务场景中真的有像文中动态创建临时表这么用的吗？怎么感觉这么反人类啊","like_count":2},{"had_liked":false,"id":71761,"user_name":"Long","can_delete":false,"product_type":"c1","uid":1318970,"ip_address":"","ucode":"2417242560360A","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/3a/90db6a24.jpg","comment_is_top":false,"comment_ctime":1551428045,"is_pvip":false,"replies":[{"id":"26049","content":"这种情况最适合源码入坑😄<br><br>你有两个可以稳定复现的对比场景，而且单线程就能复现。<br><br>这两天我用电脑不方便，下周末来给出答案哈。<br><br>你可否把5.6&#47;5.7这个对照试验组，包括实验过程和结果差异，再单独写一个问题😄","user_name":"作者回复","comment_id":71761,"uid":"1264162","ip_address":"","utype":1,"ctime":1551489810,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"5846395341","product_id":100020801,"comment_content":"追问更新1: 谢谢老师的答复，我看了下innodb_stats_on_metadata就是OFF，今天在5.7环境验证，发现竟然不是几百秒，而且几秒，不知道这个是代码的优化，还是参数不一致的原因，有几十个参数差异需要排查。   所以在不知道是因为参数变化导致，还是内部查询逻辑变化。如果是参数，担心有一天被人设置错，又回滚到不好的情况. 老师，我想入坑源码了… ","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441318,"discussion_content":"这种情况最适合源码入坑😄\n\n你有两个可以稳定复现的对比场景，而且单线程就能复现。\n\n这两天我用电脑不方便，下周末来给出答案哈。\n\n你可否把5.6/5.7这个对照试验组，包括实验过程和结果差异，再单独写一个问题😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551489810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71581,"user_name":"Long","can_delete":false,"product_type":"c1","uid":1318970,"ip_address":"","ucode":"2417242560360A","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/3a/90db6a24.jpg","comment_is_top":false,"comment_ctime":1551387444,"is_pvip":false,"replies":[{"id":"25853","content":"你如果是innodb_stats_on_metadata设置为off的话，第二个语句是不用打开表的。","user_name":"作者回复","comment_id":71581,"uid":"1264162","ip_address":"","utype":1,"ctime":1551427516,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"5846354740","product_id":100020801,"comment_content":"追问：多谢老师回复，在上面回复中，为什么语句2会阻塞其他的线程把其他线程都卡在opening tables 和closing tables，而语句1不会.<br><br>猜测是不是语句2用了lock_open的方法？<br>老师有什么好的建议，我怎么能通过日志或者调试来看？<br>已经看了innodb status, processlist, profiling都看了，没发现异常<br><br>语句1: SELECT table_name, table_schema, data_length, index_length FROM information_schema.TABLES WHERE ENGINE in (&#39;MyISAM&#39;,&#39;InnoDB&#39;) and table_schema &lt;&gt; &#39;information_schema&#39;;<br><br>语句2:select count(1) from information_schema.tables where table_schema = &#39;abc&#39;;","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441219,"discussion_content":"你如果是innodb_stats_on_metadata设置为off的话，第二个语句是不用打开表的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551427516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307094,"user_name":"yangman","can_delete":false,"product_type":"c1","uid":2560936,"ip_address":"","ucode":"6793F5F429F7A2","user_header":"https://static001.geekbang.org/account/avatar/00/27/13/a8/38255467.jpg","comment_is_top":false,"comment_ctime":1628857974,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628857974","product_id":100020801,"comment_content":"老师你好，有个问题：为什么相同的数据，t1和t2的data_length会相差这么大？ <br>Name |Engine|Rows |Data_length|<br>-----+------+-----+-----------+<br>t1   |MEMORY|   10|     126992|<br>t2   |InnoDB|   10|      16384|<br>","like_count":0},{"had_liked":false,"id":295854,"user_name":"bulingbuling","can_delete":false,"product_type":"c1","uid":2370543,"ip_address":"","ucode":"62698131C1E1CE","user_header":"https://static001.geekbang.org/account/avatar/00/24/2b/ef/7d650974.jpg","comment_is_top":false,"comment_ctime":1622620192,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622620192","product_id":100020801,"comment_content":"老师:<br>memory和innodb引擎的区别第3点:数据位置发生变化的时候，InnoDB 表只需要修改主键索引，而内存表需要修改所有索引。这句话没理解，数据位置发生变化的时候，memory修改所有索引的原理是什么","like_count":0},{"had_liked":false,"id":261324,"user_name":"Geek_66dfcd","can_delete":false,"product_type":"c1","uid":1996833,"ip_address":"","ucode":"456EA0A9DBDAD2","user_header":"","comment_is_top":false,"comment_ctime":1605271948,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605271948","product_id":100020801,"comment_content":"临时表是临时表，临时表存在磁盘上，内存表是内存表，内存表存在内存中，为什么这里说用户临时表是普通内存表的一个例外呢？","like_count":0,"discussions":[{"author":{"id":1622022,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJia6zEsh2u119zJicmq7wApvnricZEKiawaZicice1cOzujWdFicFwPtavlHiaVpCNgCpxBtdl7ynd3y0wkQ/132","nickname":"james_xu","note":"","ucode":"12E50291F5BA89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351729,"discussion_content":"临时表可以使用各种存储引擎，并不一定是在磁盘上的哈；内存表指的就是使用了memory引擎的表","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614417658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259154,"user_name":"DavidJiang","can_delete":false,"product_type":"c1","uid":1643779,"ip_address":"","ucode":"92EBF337569A1B","user_header":"https://static001.geekbang.org/account/avatar/00/19/15/03/682bd618.jpg","comment_is_top":false,"comment_ctime":1604641959,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1604641959","product_id":100020801,"comment_content":"按照全表扫描原理，扫描的行数应该是总行数。但是如下实验发现并不相同。—todo list<br>               另外，增加了list，原则上应该扫描前十行就可以了，为啥也是全表扫描<br>mysql&gt; select count(*) from employees;<br>+----------+<br>| count(*) |<br>+----------+<br>|   300024 |<br>+----------+<br>1 row in set (0.09 sec)<br><br><br>mysql&gt; explain select * from employees ;<br>+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------+<br>| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra |<br>+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------+<br>|  1 | SIMPLE      | employees | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 299202 |   100.00 | NULL  |<br>+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------+<br>1 row in set, 1 warning (0.02 sec)<br><br><br>mysql&gt; explain select * from employees limit 10;<br>+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------+<br>| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra |<br>+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------+<br>|  1 | SIMPLE      | employees | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 299202 |   100.00 | NULL  |<br>+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------+<br>1 row in set, 1 warning (0.01 sec)<br>","like_count":0,"discussions":[{"author":{"id":2222614,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/1fXYkS0UlZUQQtzUpG2TZzVhVZHarfpWT5wjO7iajw959zysQks1vLFM2uQsKnYG3uQAhzenH9LP86goiciaCDNibQ/132","nickname":"Xingyi_Xie","note":"","ucode":"D1849DB8BFB1B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404101,"discussion_content":"课程第10章讲了，explain 的 rows 是采样统计得到的一个估算，与真实的总行数有一定偏差。那个 limit 10 为啥要全表扫描，我也不会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634222935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259151,"user_name":"DavidJiang","can_delete":false,"product_type":"c1","uid":1643779,"ip_address":"","ucode":"92EBF337569A1B","user_header":"https://static001.geekbang.org/account/avatar/00/19/15/03/682bd618.jpg","comment_is_top":false,"comment_ctime":1604641629,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1604641629","product_id":100020801,"comment_content":"     博主好，大家好，请教两个问题。<br>1、问题一：不指定顺序是否就是按照主键索引顺序输出结果。下面是验证部分<br>mysql&gt; select * from employees limit 10;<br>mysql&gt; select emp_no from employees limit 10;<br>+--------+<br>| emp_no |<br>+--------+<br>|  10001 |<br>|  10002 |<br>|  10003 |<br>|  10004 |<br>|  10005 |<br>|  10006 |<br>|  10007 |<br>|  10008 |<br>|  10009 |<br>|  10010 |<br><br>mysql&gt; select first_name from employees limit 10;<br>+------------+<br>| first_name |<br>+------------+<br>| Georgi     |<br>| Bezalel    |<br>| Parto      |<br>| Chirstian  |<br>| Kyoichi    |<br>| Anneke     |<br>| Tzvetan    |<br>| Saniya     |<br>| Sumant     |<br>| Duangkaew  |<br><br>问题二、select如果全表扫描，按照文章分析应该扫描行数就是总的rows数，但是验证结果确不是，为啥？另外，加limit为啥还是全表扫描？<br>mysql&gt; select count(*) from employees;<br>+----------+<br>| count(*) |<br>+----------+<br>|   300024 |<br>+----------+<br><br>mysql&gt; explain select * from employees ;<br>+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------+<br>| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra |<br>+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------+<br>|  1 | SIMPLE      | employees | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 299202 |   100.00 | NULL  |<br><br><br>mysql&gt; explain select * from employees limit 10;<br>+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------+<br>| id | select_type | table     | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra |<br>+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------+<br>|  1 | SIMPLE      | employees | NULL       | ALL  | NULL          | NULL | NULL    | NULL | 299202 |   100.00 | NULL  |<br>+----+-------------+-----------+------------+------+---------------+------+---------+------+--------+----------+-------+","like_count":0,"discussions":[{"author":{"id":1134574,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/ee/bd08cfab.jpg","nickname":"一魄","note":"","ucode":"71541125D4AA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409528,"discussion_content":"这里不是博客啊，还博主呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635462116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219167,"user_name":"湮汐","can_delete":false,"product_type":"c1","uid":1106268,"ip_address":"","ucode":"FB6185621891E5","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/5c/86606d9c.jpg","comment_is_top":false,"comment_ctime":1589960029,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589960029","product_id":100020801,"comment_content":"利用临时表去进行关联查询，特别是在写报表的时候去用临时表，那么速度会更快！","like_count":0},{"had_liked":false,"id":174578,"user_name":"Zhaoyang","can_delete":false,"product_type":"c1","uid":1037190,"ip_address":"","ucode":"131D83AC2566D2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d3/86/b5d72c87.jpg","comment_is_top":false,"comment_ctime":1580284312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580284312","product_id":100020801,"comment_content":"内存表：锁粒度比较粗，还有就是放到内存里面重启会丢数据。","like_count":0},{"had_liked":false,"id":121325,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1565100181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565100181","product_id":100020801,"comment_content":"老师 memory 引擎，只有表锁，这个表锁是锁在哪里？<br>“在内存表 t1 中，当我执行 select * 的时候，走的是全表扫描，也就是顺序扫描这个数组。因此，0 就是最后一个被读到，并放入结果集的数据。”<br>这个数组是指存放数据的数组，这次(0,0)是在数据数组的最后，难道每次都会放在最后，没明白为什么会这样？<br>另外，看图3存放数据的数组是有序的，难道是先依次存好数据，然后对主键哈希定位主键应该存放的位置？","like_count":0},{"had_liked":false,"id":111070,"user_name":"Geek_37984c","can_delete":false,"product_type":"c1","uid":1218347,"ip_address":"","ucode":"7A319AE28599B0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLvdWoCic6ItzibF8ia8vrUTRuyj6AT3tg5f4QicIK0jTIFheJ6274ZkibuRLFP1NXG3jibv5TiaSKNoJpLw/132","comment_is_top":false,"comment_ctime":1562464629,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562464629","product_id":100020801,"comment_content":"数据位置发生变化的时候，InnoDB 表只需要修改主键索引，而内存表需要修改所有索引？<br>--老师内存表为什么要修改所有索引，删旧数据，再新增一条是否就可以解决<br><br>","like_count":0,"discussions":[{"author":{"id":2377275,"avatar":"https://static001.geekbang.org/account/avatar/00/24/46/3b/ac4b8ab0.jpg","nickname":"Stream上的帧","note":"","ucode":"325FBEFF80BD91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337555,"discussion_content":"索引上存的是数据的地址，当数据的位置发生变化，需要修改所有的索引上数据的地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608972181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104680,"user_name":"纸片人","can_delete":false,"product_type":"c1","uid":1358508,"ip_address":"","ucode":"84490E7CEF59A4","user_header":"https://static001.geekbang.org/account/avatar/00/14/ba/ac/b44b256a.jpg","comment_is_top":false,"comment_ctime":1560817722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560817722","product_id":100020801,"comment_content":"等等，我好像明白了。结合下文，这里说的“诡异”现象是在双M架构中，用户没有断开连接或收到错误报告的情况下，看到表t1的数据全部消失了！这不符合隔离性。这就相当于，MySQL一边告诉你“一切正常”，一边偷偷删除了你的数据。","like_count":0},{"had_liked":false,"id":66956,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1550047517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550047517","product_id":100020801,"comment_content":"老师，结合课程 和  MySQL8 的新技术 老师有出书的计划吗？","like_count":0},{"had_liked":false,"id":66902,"user_name":"Long","can_delete":false,"product_type":"c1","uid":1318970,"ip_address":"","ucode":"2417242560360A","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/3a/90db6a24.jpg","comment_is_top":false,"comment_ctime":1550039412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550039412","product_id":100020801,"comment_content":"老师可能没看到，再发下。<br><br>老师新年好 :-)<br>刚好遇到一个问题。 <br><br>本来准备更新到，一个查询是怎么运行的里面的，看到这篇更新文章，就写在这吧，希望老师帮忙解答。<br><br>关于这个系统memory引擎表：information_schema.tables<br>相关信息如下<br>（1）Verison: MySQL 5.6.26<br>（2）数据量table_schema = abc的有接近4W的表，整个实例有接近10W的表。（默认innodb引擎）<br>（3）mysql.user和mysql.db的数据量都是100-200的行数，MyISAM引擎。<br>（4）默认事务隔离级别RC<br><br><br>在运行查询语句1的时候：select * from information_schema.tables where table_schema = &#39;abc&#39;;<br>状态一直是check permission，opening tables，其他线程需要打开的表在opend tables里面被刷掉的，会显示在opening tables，可能需要小几秒后其他线程基本恢复正常。<br><br>但是如果在运行查询语句2：select count(1) from information_schema.tables where table_schema = &#39;abc&#39;; 这个时候语句2本身在profiling看长期处于check permission状态，其他线程就会出现被阻塞现象，大部分卡在了opening tables，小部分closing tables。我测试下了，单个表查询的时候check permission大概也就是0.0005s左右的时间，4W个表理论良好状态应该是几十秒的事情。<br>但是语句1可能需要5-10分钟，语句2需要5分钟。<br><br>3个问题，请老师抽空看下：<br>（1）information_schema.tables的组成方式，是我每次查询的时候从数据字典以及data目录下的文件中实时去读的吗？<br>（2）语句1和语句2在运行的时候的过程分别是怎样的，特别是语句2。<br>（3）语句2为什么会出现大量阻塞其他事务，其他事务都卡在opening tables的状态。<br><br><br>PS: 最后根据audit log分析来看，语句实际上是MySQL的一个客户端Toad发起的，当使用Toad的object explorer的界面来查询表，或者设置connection的时候指定的的default schema是大域的时候就会run这个语句：（table_schema改成了abc，其他都是原样）<br>SELECT COUNT(1) FROM information_schema.tables WHERE table_schema = &#39;abc&#39; AND table_type != &#39;VIEW&#39;;<br><br><br>再次感谢！","like_count":0},{"had_liked":false,"id":66550,"user_name":"朱高建","can_delete":false,"product_type":"c1","uid":1198647,"ip_address":"","ucode":"CE0471603B6A58","user_header":"https://static001.geekbang.org/account/avatar/00/12/4a/37/2c45c5f5.jpg","comment_is_top":false,"comment_ctime":1549957647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549957647","product_id":100020801,"comment_content":"备库要重启，那么备库的访问业务流量应该会被摘除，那么在备库摘除访问流量之后，重启之前，将备库的内存表引擎改为innodb，再重启备库。如果业务必须使用memory引擎，可以在重启之后改回memory引擎。","like_count":0},{"had_liked":false,"id":65806,"user_name":"HuaMax","can_delete":false,"product_type":"c1","uid":1118488,"ip_address":"","ucode":"2E78DE1AF098AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/11/18/8cee35f9.jpg","comment_is_top":false,"comment_ctime":1549672814,"is_pvip":false,"replies":[{"id":"23284","content":"嗯，如果可以改引擎，也是极好的😄","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1549789544,"ip_address":"","comment_id":65806,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549672814","product_id":100020801,"comment_content":"课后题。是不是可以加上创建表的操作，并且是innodb 类型的？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438595,"discussion_content":"嗯，如果可以改引擎，也是极好的😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549789544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65783,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1549637919,"is_pvip":false,"replies":[{"id":"23261","content":"题目里说的是 “备库重启”哈","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1549668823,"ip_address":"","comment_id":65783,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1549637919","product_id":100020801,"comment_content":"安装之前学的知识，把主库delete语句的gtid，设置到从库中，就可以跳过这条语句了吧。<br>但是主备不一致是不是要也处理一下，将主库的内存表数据备份一下。然后delete数据，重新插入。<br>等备件执行者两个语句后，主备应该都有数据了","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438586,"discussion_content":"题目里说的是 “备库重启”哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549668823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}