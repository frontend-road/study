{"id":92419,"title":"04 | 编程语言的进化","content":"<p>你好，我是七牛云许式伟。今天我们继续来聊聊编程语言。</p><p>编程语言的出现，诞生了软件工程师（也叫程序员）这样一个职业，而汇编语言则可以看做是软件工程师这个分工出现的标志。</p><p>通过编程语言，软件工程师和计算机可以进行交互，表达自己的思想。但是，如果我们把掌握编程语言看做是软件工程师的专业技能，其实又低估了编程语言带来的革命性变化。</p><p>编程语言在信息科技发展中的位置，如同人类文明中语言所在的位置。而编程语言写出来的软件（及其源代码），如同人类文明中不断被传承下来的图书典籍。</p><h2>软件是活的书籍</h2><p>我个人一直有一个观点：软件是活的书籍，是我们人类知识传承能力的一次伟大进化。书籍能够通过文字来记载事件、传递情感、揭示规律、传承技术。书籍能够让人们进行远程的沟通（飞鸽传书），也能够让我们了解古人的生活习性，与古人沟通（虽然是单向的）。</p><p>这些事情软件都可以做到，而且做得更好。为什么我说软件是活的书籍，有两方面的原因。</p><p><strong>其一，表达方式的多样性。</strong>书籍只能通过文字描述来进行表达，这种表达方式依赖于人们对文字的理解，以及人的想象能力对场景进行还原。软件除了能够通过文字，还能够通过超链接、声音、动画、视频、实时的交互反馈等方式来还原场景。</p><!-- [[[read_end]]] --><p><strong>其二，对技术的现场还原。</strong>书籍只能通过文字来描述技术，但是因为人与人对同样的文字理解不同，领悟能力不同，这些都可能导致技术的传承会出现偏差，如果文字的记载不够详尽，可能就会出现“谁也看不懂，学不会”的情况，从而导致技术的失传。</p><p>但是，软件对技术的还原可以是精确的，甚至软件本身可以是技术的一部分。当软件是技术的一部分的时候，技术传承就是精确的，失传的概率就大大降低（除非技术本身适应不了潮流，退出了历史舞台）。</p><p>信息科技发展到今天，已经影响人类活动的方方面面。无论你从事什么职业，不管你是否会从事软件开发的工作，你都无法和信息科技脱节。如果希望能够站在职业发展的至高点，你就需要理解和计算机沟通的语言，也就需要理解软件工程师们的语言。</p><p>不仅如此，如果你把编程语言升华为人类知识传承能力的进化，你就更能够清晰地预判到这样的未来：每一个小孩的基础教育中一定会有编程教育，就如同每一个小孩都需要学习物理和数学一样。</p><h2>编程范式的进化</h2><p>编程语言从汇编开始，到今天还只有六十多年的历史，但是迭代之迅速，远超自然语言的迭代速度。从思想表达的角度来说，我们通常会听到以下这些编程范式。</p><p><strong>其一是过程式。过程式就是以一条条命令的方式，让计算机按我们的意愿来执行。</strong>今天计算机的机器语言本身就是一条条指令构成，本身也是过程式的。所以过程式最为常见，每个语言都有一定过程式的影子。过程式语言的代表是 Fortran、C/C++、JavaScript、Go 等等。</p><p>过程式编程中最核心的两个概念是结构体（自定义的类型）和过程（也叫函数）。通过结构体对数据进行组合，可以构建出任意复杂的自定义数据结构。通过过程可以抽象出任意复杂的自定义指令，复用以前的成果，简化意图的表达。</p><p><strong>其二是函数式。函数式本质上是过程式编程的一种约束，它最核心的主张就是变量不可变，函数尽可能没有副作用</strong>（对于通用语言来说，所有函数都没副作用是不可能的，内部有 IO 行为的函数就有副作用）。</p><p>既然变量不可变，函数没有副作用，自然人们犯错的机会也就更少，代码质量就会更高。函数式语言的代表是 Haskell、Erlang 等等。大部分语言会比较难以彻底实施函数式的编程思想，但在思想上会有所借鉴。</p><p>函数式编程相对小众。因为这样写代码质量虽然高，但是学习门槛也高。举一个最简单的例子：在过程式编程中，数组是一个最常规的数据结构，但是在函数式中因为变量不可变，对某个下标的数组元素的修改，就需要复制整个数组（因为数组作为一个变量它不可变），非常低效。</p><p>所以，函数式编程里面，需要通过一种复杂的平衡二叉树来实现一个使用界面（接口）上和过程式语言数组一致的“数组”。这个简单的例子表明，如果你想用函数式编程，你需要重修数据结构这门课程，大学里面学的数据结构是不顶用了。</p><p><strong>其三是面向对象。面向对象在过程式的基础上，引入了对象（类）和对象方法（类成员函数），它主张尽可能把方法（其实就是过程）归纳到合适的对象（类）上，不主张全局函数（过程）。面向对象语言的代表是 Java、C#、C++、Go 等等。</strong></p><h2>从“面向对象”到“面向连接”</h2><p>面向对象的核心思想是引入契约，基于对象这样一个概念对代码的使用界面进行抽象和封装。</p><p>它有两个显著的优点。</p><p><strong>其一是清晰的使用界面</strong>，某种类型的对象有哪些方法一目了然，而不像过程式编程，数据结构和过程的关系是非常松散的。</p><p><strong>其二是信息的封装。</strong>面向对象不主张绕过对象的使用接口侵入到对象的内部实现细节。因为这样做破坏了信息的封装，降低了类的可复用性，有一天对象的内部实现方式改变了，依赖该对象的相关代码也需要跟着调整。</p><p>面向对象还有一个至关重要的概念是接口。通过接口，我们可以优雅地实现过程式编程中很费劲才能做到的一个能力：<strong>多态</strong>。</p><p>由于对象和对象方法的强关联，我们可以引入接口来抽象不同对象相同的行为（比如鸟和猪是不同的对象，但是它们有相同的方法，比如移动和吃东西）。这样不同对象就可以用相同的代码来实现类似的复杂行为，这就是多态了。</p><p>多数面向对象语言往往还会引入一个叫<strong>继承</strong>的概念。大家对这个概念褒贬不一。虽然继承带来了编码上的便捷性，但也带来了不必要的心智负担：本来复合对象的唯一构造方法是组合，现在多了一个选择，继承。</p><p>究竟什么时候应该用继承，什么时候应该用组合？这着实会让人纠结。不过，这件事情最完美的答案是 Go 语言给出来的：放弃继承，全面强化组合能力（要了解 Go 语言强大的组合能力，参阅<a href=\"http://open.qiniu.us/go-next-c.pdf\">我的演讲</a>）。</p><p>不同编程范式并不是互斥的。虽然有些编程语言会有明确的编程范式主张，比如 Java 是纯正的面向对象语言，它反对全局过程。但是，也有一些语言明确主张说自己是多范式的，典型代表是 C++。</p><p>当然，可能 C++ 不是一个好例子，因为它太复杂了，让人觉得多范式会大大增加语言的复杂性，虽然其实 C++ 的复杂性和多范式并没有什么关系。</p><p>可能 Go 语言是多范式更好的例子。它没有声称自己是多范式的，但是实际上每一种编程范式它都保留了精华部分。这并没有使得 Go 语言变得很复杂，整个语言的特性极其精简。</p><p>Go 语言之所以没有像 C++ 那样声称是多范式的，是因为 Go 官方认为 Go 是一门面向连接的语言。</p><p><strong>什么是面向连接的语言？</strong>在此之前，你可能并没有听过这样的编程范式，这应该算 Go 自己发明出来的范式名称。在我看来，所谓面向连接就是朴素的组合思想。研究连接，就是研究人与人如何组合，研究代码与代码之间怎么组合。</p><p>面向对象创造性地把契约的重要性提高到了非常重要的高度，但这还远远不够。这是因为，并不是只有对象需要契约，语言设计的方方面面都需要契约。</p><p>比如，代码规范约束了人的行为，是人与人的连接契约。如果面对同一种语言，大家写代码的方式很不一样，语言就可能存在很多种方言，这对达成共识十分不利。所以 Go 语言直接从语言设计上就消灭掉那些最容易发生口水的地方，让大家专注于意图的表达。</p><p>再比如，消息传递约束了进程（这里的进程是抽象意义上的，在 Go 语言中叫 goroutine）的行为，是进程与进程的连接契约。<strong>消息传递是多核背景下流行起来的一种编程思想，其核心主张是：尽可能用消息传递来取代共享内存，从而尽可能避免显式的锁，降低编程负担。</strong></p><p>Go 语言不只是提供了语言内建的消息传递机制（channel），同时它的消息传递是类型安全的。这种类型安全的消息传递契约机制，大大降低了犯错的机会。</p><h2>其他方面的进化</h2><p>除了编程范式，编程语言的进化还体现在工程化能力的完善上。工程化能力主要体现在如下这些方面。</p><ul>\n<li>包（package），即代码的发布单元。</li>\n<li>版本（version），即包的依赖管理。</li>\n<li>文档生成（doc）。</li>\n<li>单元测试（test）。</li>\n</ul><p>从语言的执行器的行为看，出现了这样三种分类的语言。</p><ul>\n<li>编译的目标文件为可执行程序。典型代表是 Fortran、C/C++、Go 等。</li>\n<li>生成跨平台的虚拟机字节码，有独立的执行器（虚拟机）执行字节码 。典型代表为 Java、Erlang 等。</li>\n<li>直接解释执行。典型代表是 JavaScript。当然现在纯解释执行的语言已经不多。大多数语言也只是看起来直接执行，内部还是会有基于字节码的虚拟机以提升性能。</li>\n</ul><h2>语言对架构的影响是什么？</h2><p>我们思考一个问题：从架构设计角度来看，编程语言的选择对架构的影响是什么？</p><p>我们在第一篇“架构设计的宏观视角”中，介绍了服务端程序和客户端程序的整体架构图。细心的读者可能留意到了，在架构图中我用了三种不同的颜色来表示不同层次的依赖。</p><p>无论服务端，还是客户端，我们可以统一将其架构图简化为下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/60/5f/604930da3b45b73189a924f8b172655f.png?wh=1920*1031\" alt=\"\"></p><p>图中淡紫色是硬件层次的依赖，是我们程序工作的物理基础。淡绿色的是软件层次的依赖，是我们程序工作的生态环境。桔色的是库或源代码层次的依赖，是我们程序本身的组成部分。细分的话它又可以分两部分：一部分是业务无关的框架和基础库，还有一部分是业务架构。</p><p>从软件的业务架构来说，本身应该怎么拆分模块，每个模块具体做什么样的事情（业务边界是什么），这是业务需求本身决定的，和编程语言并没有关系。但在我们描述每个模块的规格时，采用的规格描述语言会面临如下两种选择：</p><ul>\n<li>选择某种语言无关的接口表示；</li>\n<li>选择团队开发时采用的语言来描述接口。</li>\n</ul><p>两种选择的差异并不是实质性的。只要团队内有共识，选哪一种都无所谓。本着“如无必要勿增实体”的原则，我个人会倾向于后者，用开发语言来做接口表示。在七牛云的话自然就是选 Go 了。</p><p>站在唯技术论的角度，业务架构与语言无关，影响的只是模块规格的描述语法。但语言的选择在实践中对业务架构决策的影响仍然极其关键。</p><p><strong>原因之一是开发效率。</strong>抛开语言本身的开发效率差异不谈，不同语言会有不同的社区资源。语言长期以来的演进，社区所沉淀下来的框架和基础库，还有你所在的企业长期发展形成的框架和基础库，都会导致巨大的开发效率上的差异。</p><p><strong>原因之二是后期维护。</strong>语言的历史通常都很悠久，很难实质性地消亡。但是语言的确有它的生命周期，语言也会走向衰落。选择公司现在更熟悉的语言，还是选择一个面向未来更优的语言，对架构师来说也是一个两难选择。</p><h2>结语</h2><p>今天我们抛开具体的语言发展史，而从编程范式演进的角度来谈编程语言的进化。过程式、函数式、面向对象，这些都是大家熟悉的编程范式；所以我们把重点放在了介绍由 Go 语言带来的面向连接的编程思想，并将其与面向对象做了详细的对比。</p><p>未来编程语言还将出现什么样的新思想，我们不得而知。但可以预见，出现新的创造性思维的挑战将越来越大。历史的发展是曲折螺旋上升的。</p><p>要想有所突破，需要建立批判性思维。一种新思潮的兴起过程很容易用力过猛。面向对象是一个很好的例子。面向对象是非常重要的进步，但是继承是一个过度设计，不只让软件工程师在组合与继承中纠结，也产生了复杂的对象继承树。我们只有在实践中不断总结与反思，才有可能产生新的突破。</p><p>你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","comments":[{"had_liked":false,"id":90222,"user_name":"jilur","can_delete":false,"product_type":"c1","uid":1345202,"ip_address":"","ucode":"4064011C68A1FB","user_header":"https://static001.geekbang.org/account/avatar/00/14/86/b2/fabb46db.jpg","comment_is_top":true,"comment_ctime":1556451761,"is_pvip":false,"replies":[{"id":"32311","content":"我复制了一份出来，放到了网盘。链接: https:&#47;&#47;pan.baidu.com&#47;s&#47;1mQen5iJw5Ojwt2nEaePn0Q 提取码: swgb","user_name":"编辑回复","user_name_real":"郭蕾","uid":"1000473","ctime":1556452126,"ip_address":"","comment_id":90222,"utype":2}],"discussion_count":2,"race_medal":0,"score":"9.2233721543752991e+18","product_id":100025201,"comment_content":"“我的演讲”，我也打不开。。","like_count":27,"discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448426,"discussion_content":"我复制了一份出来，放到了网盘。链接: https://pan.baidu.com/s/1mQen5iJw5Ojwt2nEaePn0Q 提取码: swgb","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1556452126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1443102,"avatar":"https://static001.geekbang.org/account/avatar/00/16/05/1e/76b681d7.jpg","nickname":"Stay great","note":"","ucode":"7B541A9D8EBA25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404829,"discussion_content":"感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634432602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89708,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1556247413,"is_pvip":false,"replies":[{"id":"32136","content":"赞。很好的学习材料。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556248446,"ip_address":"","comment_id":89708,"utype":1}],"discussion_count":6,"race_medal":0,"score":"1204147090293","product_id":100025201,"comment_content":"对象范式的原始概念其实根本不包括类和继承，只有1，程序由对象组成，2，对象之间互相发送消息，协作完成任务。最初世界上第一个面向对象语言是 Simula-67，第二个面向对象语言是 Smalltalk-71。Smalltalk 受到了 Simula-67 的启发，基本出发点相同,但是最大的不同是Smalltalk是通过发消息来实现对象方法调用，而Simula是直接调用目标对象的方法。Bjarne Stroustrup 在博士期间深入研究过 Simula，非常欣赏其思想，C++的面向对象思路直接受其影响，因为调用目标对象的方法来“传递消息”需要事先知道这个对象有哪些方法，因此，定义对象本身有哪些方法的“类”和“继承”的概念，一下超越了对象本身，而对象只不过是类这个模子里造出来的东西，反而不重要。随着C++的大行其道，继承和封装变成了面向对象世界的核心概念，OOP 至此被扭曲为 COP （ Class Oriented Programming，面向类程序设计）。<br>但是COP这套概念本身是有缺陷的：每个程序员似乎都要先成为领域专家，然后成为领域分类学专家，然后构造一个完整的继承树，然后才能 new 出对象，让程序跑起来。<br>到了 1990 年代中期，问题已经十分明显。UML 中有一个对象活动图，其描述的就是运行时对象之间相互传递消息的模型。1994 年 Robert C. Martin 在《 Object-Oriented C++ Design Using Booch Method 》中，曾建议面向对象设计从对象活动图入手，而不是从类图入手。而 1995 年出版的经典作品《 Design Patterns 》中，建议优先考虑组合而不是继承，这也是尽人皆知的事情。这些迹象表明，在那个时候，面向对象社区里的思想领袖们，已经意识到“面向类的设计”并不好用。只可惜他们的革命精神还不够，delphi 之父在创建.Net Framework 的时候，曾经不想要继承，在微软内部引起了很大的争议，最后是向市场低头，加上了继承。<br>2000 年后，工程界明确的提出：“组合比继承重要，而且更灵活”，Go和Rust也许是第一批明确的对这种思路进行回应的语言，他们的对象根本不需要类本身来参与，也能完成对象范式的多态组合。<br>历史让 C++走上了舞台，历史也终将让 COP 重新回到 OOP 的本来面目","like_count":281,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448230,"discussion_content":"赞。很好的学习材料。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556248446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102062,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","nickname":"LYy","note":"","ucode":"8D5C39B9531E71","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3925,"discussion_content":"学习了……","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564984594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1466447,"avatar":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","nickname":"Daiver","note":"","ucode":"9B1A03AFBC79BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41064,"discussion_content":"现在的Object-C 就是符合原始的对象范式吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572339736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248472,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8o3aJz4NdqOCWvTjIPGmRWHt5xicwKGGGRd5icCoiauvvtnEtST0ljsuM23wiaYbZLknASvXmmqfg1w/132","nickname":"茅延安","note":"","ucode":"317626CFFBC81C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":27915,"discussion_content":"面向对象语言能消除类和接口的概念吗？这样如何实现多态？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570678901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1162210,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bb/e2/fe68798b.jpg","nickname":"大迎","note":"","ucode":"F6F41431A92391","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1248472,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8o3aJz4NdqOCWvTjIPGmRWHt5xicwKGGGRd5icCoiauvvtnEtST0ljsuM23wiaYbZLknASvXmmqfg1w/132","nickname":"茅延安","note":"","ucode":"317626CFFBC81C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358208,"discussion_content":"开始没有多态的概念，只是后来衍生出来的，继承能达到多态的效果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615946780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":27915,"ip_address":""},"score":358208,"extra":""}]},{"author":{"id":1494302,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM5rD1YWBerdiaKVDT2PHCJfx4qCpMqVicuR6Jy8MjFFqGk2n0av56BQiantNACgOZbajpAbxbjIbZ7gQ/132","nickname":"Geek_411285","note":"","ucode":"68D7093AF050B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14483,"discussion_content":"OOP ，继承是过度设计，但封装、领域模型这些还是要求的吧，不然怎么做对象定义呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568765872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89573,"user_name":"郭小菜","can_delete":false,"product_type":"c1","uid":1017297,"ip_address":"","ucode":"C4044C80BB331B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKYfcUOVhf3vhEBUNGHgtIcw8ujMZnkabicLzzjn3xwdeeic2PJSe7ibJgMx2UjF0d7L4B4gsRpaqe2A/132","comment_is_top":false,"comment_ctime":1556210195,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"138995163667","product_id":100025201,"comment_content":"老师的水平和文笔让人佩服得五体投地","like_count":32},{"had_liked":false,"id":90060,"user_name":"Junho","can_delete":false,"product_type":"c1","uid":1001493,"ip_address":"","ucode":"4A9611DB2D2AF8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/48/15/d34c134f.jpg","comment_is_top":false,"comment_ctime":1556382636,"is_pvip":false,"replies":[{"id":"32292","content":"挺形象的比喻","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556410214,"ip_address":"","comment_id":90060,"utype":1}],"discussion_count":1,"race_medal":0,"score":"100340630444","product_id":100025201,"comment_content":"关于许老师说关于继承的看法，我拜读后深有同感。尤其多层的继承，理解成本多项式上升。有点像，你想了解清楚眼前的这位妹子，不但要知道她已有的一切（所有逻辑成员），还要知道她所有祖上（继承链）的一切（包括private），更要知道这位女孩做了什么叛逆行为（override），还不得不知道，这些叛逆行为，会对祖传的既有秘方产生怎样的影响（调用override函数的函数）…<br>回顾一下最近自己工作的代码，的确不少的设计，最后会倾向于组合的方式。原本的想法主要是感觉，用继承的话，更像是可以去为了聊天而去相亲…不好意思说错了，是为了面向对象而去面向对象，一个月后，自己理解这部分设计也有不小的成本。读了许老师的课，才从更深层次的意识到这个特性的确有它天生的缺陷。","like_count":24,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448373,"discussion_content":"挺形象的比喻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556410214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89652,"user_name":"chitanda","can_delete":false,"product_type":"c1","uid":1235077,"ip_address":"","ucode":"B3E28E1C8E410B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/85/21fd42fa.jpg","comment_is_top":false,"comment_ctime":1556240473,"is_pvip":false,"replies":[{"id":"32131","content":"👍","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556244063,"ip_address":"","comment_id":89652,"utype":1}],"discussion_count":3,"race_medal":2,"score":"91750553689","product_id":100025201,"comment_content":"我的工作是Python后台。<br>Python开发效率是相当快的，能想到的功能基本都有比较稳定的库，开发起来贼快。<br>我公司三个后台，每个人写的Python都不一样，一个喜欢面向对象，一个喜欢类似过程式那种，另一个喜欢自创式。<br>自己开发功能虽然相当快，但是一旦涉及到维护其它人的代码，效率就一落千丈，总是看不懂或者想要重构😂😂。<br>最近裸辞了在家里学go，第一眼就爱上了这个语言。","like_count":21,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448215,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556244063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407959,"discussion_content":"现在已经转型为 Go 程序员了么？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635157794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1433707,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","nickname":"prader26","note":"","ucode":"5EFFFC374ADECE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":37307,"discussion_content":"有魄力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571577085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89630,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1556238292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"87455584212","product_id":100025201,"comment_content":"完全可以看出 老师还是最爱go啊 哈哈😄","like_count":20},{"had_liked":false,"id":89796,"user_name":"1900","can_delete":false,"product_type":"c1","uid":1105774,"ip_address":"","ucode":"320D65D14817D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/6e/267bd6ee.jpg","comment_is_top":false,"comment_ctime":1556267078,"is_pvip":true,"replies":[{"id":"32146","content":"最主要的差别是：编程框架通常是领域性的，比如面向消息编程是多核背景下的网络服务器编程框架；编程范式则是普适性的，不管解决什么领域的问题都可以适用。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556273466,"ip_address":"","comment_id":89796,"utype":1}],"discussion_count":1,"race_medal":0,"score":"83160645702","product_id":100025201,"comment_content":"编程框架和编程范式具体有什么区别呢？感觉都具备约束、规范的作用。","like_count":19,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448264,"discussion_content":"最主要的差别是：编程框架通常是领域性的，比如面向消息编程是多核背景下的网络服务器编程框架；编程范式则是普适性的，不管解决什么领域的问题都可以适用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556273466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89728,"user_name":"1900","can_delete":false,"product_type":"c1","uid":1105774,"ip_address":"","ucode":"320D65D14817D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/6e/267bd6ee.jpg","comment_is_top":false,"comment_ctime":1556250887,"is_pvip":true,"replies":[{"id":"32138","content":"没有副作用是指对外界不产生影响，是纯函数。修改全局变量、发生io行为都是对外界的影响。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556252507,"ip_address":"","comment_id":89728,"utype":1}],"discussion_count":2,"race_medal":0,"score":"74570694919","product_id":100025201,"comment_content":"变量不可变我理解的就是一切变量皆常量（或者只能被初始化一次），但是函数没有副作用就不懂了，副作用具体指啥？为什么内部有IO行为的函数就有副作用呢？","like_count":17,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448238,"discussion_content":"没有副作用是指对外界不产生影响，是纯函数。修改全局变量、发生io行为都是对外界的影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556252507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1751214,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b8/ae/085484e7.jpg","nickname":"Insomnia","note":"","ucode":"5986A48988D6E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385049,"discussion_content":"一直在用Scala开发，最近也在想这个问题，所谓没有副作用，因该是尽量将变量约束在方法中！不在方法内去修改外部变量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626861914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92985,"user_name":"东次哒呲","can_delete":false,"product_type":"c1","uid":1500925,"ip_address":"","ucode":"19B6506C9E86AE","user_header":"https://static001.geekbang.org/account/avatar/00/16/e6/fd/8ab5cbeb.jpg","comment_is_top":false,"comment_ctime":1557372483,"is_pvip":false,"replies":[{"id":"33171","content":"这是受继承思维的影响了。其实继承实现了代码复用和多态两个东西，揉在一起。在go里面，组合实现代码复用，接口实现多态，彼此完全独立，非常清晰。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557374056,"ip_address":"","comment_id":92985,"utype":1}],"discussion_count":2,"race_medal":0,"score":"70276849219","product_id":100025201,"comment_content":"使用java四年了，看到封装，继承，多态的描述，特别精准，又有了更深刻的理解。<br><br>不了解go语言，比如有一个表单的基类，里面有基本的处理，子类继承这个基类，有自己特殊的实现。<br><br>这种情况，如何用组合实现呢？","like_count":17,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449453,"discussion_content":"这是受继承思维的影响了。其实继承实现了代码复用和多态两个东西，揉在一起。在go里面，组合实现代码复用，接口实现多态，彼此完全独立，非常清晰。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1557374056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1328215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/57/b0f3eeb5.jpg","nickname":"邹佳敏","note":"","ucode":"377E2194CE6E64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392316,"discussion_content":"这个问题和回复厉害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630943844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90116,"user_name":"虎哥","can_delete":false,"product_type":"c1","uid":1185061,"ip_address":"","ucode":"29D604EC85D3BC","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/25/1d3d616f.jpg","comment_is_top":false,"comment_ctime":1556418252,"is_pvip":false,"replies":[{"id":"32296","content":"资料不多。我当年翻过的资料： Purely Functional Data Structures - https:&#47;&#47;www.cs.cmu.edu&#47;~rwh&#47;theses&#47;okasaki.pdf","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556425198,"ip_address":"","comment_id":90116,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53096025804","product_id":100025201,"comment_content":"如果你想用函数式编程，你需要重修数据结构这门课程，大学里面学的数据结构是不顶用了。那应该学习什么可以给个建议吗？","like_count":12,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448394,"discussion_content":"资料不多。我当年翻过的资料： Purely Functional Data Structures - https://www.cs.cmu.edu/~rwh/theses/okasaki.pdf","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556425198,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89777,"user_name":"觉","can_delete":false,"product_type":"c1","uid":1503600,"ip_address":"","ucode":"95E85D30E92170","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/70/bca09d2d.jpg","comment_is_top":false,"comment_ctime":1556262673,"is_pvip":false,"replies":[{"id":"32142","content":"逻辑上如此，这也是继承被发明的原因。但是软件工程的实践表明，继承带来了收益🈶️，但它带来的伤害更大。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556263349,"ip_address":"","comment_id":89777,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48800902929","product_id":100025201,"comment_content":"感恩大佬分享 随喜大佬 <br>学生是java使用者 个人认为类之间具备‘is-a’的关系这种情况时 还是很有必要的；继承使所有子类公共的部分都放在了父类，使得代码得到共享，避免重复。<br>这是学生一点自己的理解 望老师批评指正，再次感恩老师分享这么好的课程 我当奉持 如法修行","like_count":11,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448258,"discussion_content":"逻辑上如此，这也是继承被发明的原因。但是软件工程的实践表明，继承带来了收益🈶️，但它带来的伤害更大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556263349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89730,"user_name":"A 付李珏","can_delete":false,"product_type":"c1","uid":1030544,"ip_address":"","ucode":"970D6EF916D6B4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b9/90/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1556251008,"is_pvip":false,"replies":[{"id":"32137","content":"我试了一下可以，还有其他人不能打开的么？","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556252427,"ip_address":"","comment_id":89730,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44505923968","product_id":100025201,"comment_content":"我的演讲，链接不过去，是我自己的问题吗？","like_count":10,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448239,"discussion_content":"我试了一下可以，还有其他人不能打开的么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556252427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015240,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","nickname":"恬毅","note":"","ucode":"914ED16F3BE714","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368506,"discussion_content":"可以打开","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618736677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89842,"user_name":"gopherliu","can_delete":false,"product_type":"c1","uid":1202971,"ip_address":"","ucode":"0254E9A95B71C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/5b/1b/78a937d8.jpg","comment_is_top":false,"comment_ctime":1556281024,"is_pvip":true,"replies":[{"id":"32193","content":"这个我认同，我去年ecug大会演讲就是讲这个","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556291673,"ip_address":"","comment_id":89842,"utype":1}],"discussion_count":3,"race_medal":0,"score":"40210986688","product_id":100025201,"comment_content":"后端服务可能趋向于标准化或者固定化，可能前端才是真正的战场。","like_count":9,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448283,"discussion_content":"这个我认同，我去年ecug大会演讲就是讲这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556291673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202971,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/1b/78a937d8.jpg","nickname":"gopherliu","note":"","ucode":"0254E9A95B71C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":127224,"discussion_content":"我认为复杂性很复杂，因为前端更多的是和人打交道，人的行为或者需求就是复杂的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578572974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1494302,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM5rD1YWBerdiaKVDT2PHCJfx4qCpMqVicuR6Jy8MjFFqGk2n0av56BQiantNACgOZbajpAbxbjIbZ7gQ/132","nickname":"Geek_411285","note":"","ucode":"68D7093AF050B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14487,"discussion_content":"前端复杂性相对有限，前端真正战场该怎么理解呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568766174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89581,"user_name":"fy","can_delete":false,"product_type":"c1","uid":1152186,"ip_address":"","ucode":"EDB661C3A05910","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jsMMDDzhbsTzhicsGZiaeV0PWSnAS0fBlb1r6CsuB32vr3hRwV9UubmfHQx45v7jtaXajPlQ8kQ17b3zpQzHmqVw/132","comment_is_top":false,"comment_ctime":1556213708,"is_pvip":false,"replies":[{"id":"32115","content":"就是你不能写 x = x + 1 这样的语句了","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556237613,"ip_address":"","comment_id":89581,"utype":1}],"discussion_count":2,"race_medal":0,"score":"40210919372","product_id":100025201,"comment_content":"老师，你说的函数式编程：最核心的是变量不可变是啥意思？","like_count":9,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448182,"discussion_content":"就是你不能写 x = x + 1 这样的语句了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556237613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330907,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epk6XJfVGqsW1b5oiatsuvSRkCF4yo2KxSUSf5LHRRTbuCPKJrRiblqRbMZBuicQMgDTO1bRp6vXW7Lg/132","nickname":"jayce","note":"","ucode":"70ACD13415EA8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337007,"discussion_content":"理解为常量，不可以写x=x+1 但是可以创建新的y存储值y=x+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608761104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90056,"user_name":"ljf10000","can_delete":false,"product_type":"c1","uid":1494064,"ip_address":"","ucode":"44957329A61EAE","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eop9WylZJicLQ5wib49kcMPqCTRT1aThh6mMAVl6qseLwbVOLhicVLjZCxCoyQd5CrrHHibs2CVPaoK3g/132","comment_is_top":false,"comment_ctime":1556380707,"is_pvip":false,"replies":[{"id":"32274","content":"历史是螺旋上升的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556382003,"ip_address":"","comment_id":90056,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35916119075","product_id":100025201,"comment_content":"我一直认为C++走了邪路，带坏了java，php，python等一众小弟","like_count":8,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448372,"discussion_content":"历史是螺旋上升的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556382003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93163,"user_name":"melon","can_delete":false,"product_type":"c1","uid":1023773,"ip_address":"","ucode":"7A80C20EBCAAA4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/1d/ec173090.jpg","comment_is_top":false,"comment_ctime":1557411111,"is_pvip":false,"replies":[{"id":"33215","content":"👍","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557415066,"ip_address":"","comment_id":93163,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31622182183","product_id":100025201,"comment_content":"看到有人问到「编程范式和编程框架的区别？」，说一下自己的理解: 编程范式就好比是接口，编程框架就好比是实现了接口的抽象类，使用编程框架编写的应用就好是继承了该抽象类的类。","like_count":7,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449508,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557415066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90248,"user_name":"青山","can_delete":false,"product_type":"c1","uid":1344004,"ip_address":"","ucode":"A90A3D0597F879","user_header":"https://static001.geekbang.org/account/avatar/00/14/82/04/2c24b8c0.jpg","comment_is_top":false,"comment_ctime":1556458862,"is_pvip":false,"replies":[{"id":"32343","content":"建议继承只使用接口继承；正常情况下，优先用组合；当然因为大部分语言的组合功能不够强大，有时候从便捷性的角度继承可以适度使用，但是应当意识到如果过度使用继承对工程来说是有害的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556468134,"ip_address":"","comment_id":90248,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31621229934","product_id":100025201,"comment_content":"老师您好，我有一个不太理解的地方，是我不太理解您说的继承是个过度设计的原因，我目前在架构过程中大量的使用了继承，而且我也觉得继承功能将我的代码功能高度抽象化，给我带来了很大的方便。我想咨询下您如果不是用继承的话，用什么方法替代继承的功能呢？","like_count":7,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448439,"discussion_content":"建议继承只使用接口继承；正常情况下，优先用组合；当然因为大部分语言的组合功能不够强大，有时候从便捷性的角度继承可以适度使用，但是应当意识到如果过度使用继承对工程来说是有害的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1556468134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89595,"user_name":"汉锋","can_delete":false,"product_type":"c1","uid":1453617,"ip_address":"","ucode":"49F68EDB34BEF5","user_header":"https://static001.geekbang.org/account/avatar/00/16/2e/31/4e066276.jpg","comment_is_top":false,"comment_ctime":1556233147,"is_pvip":false,"replies":[{"id":"32114","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556237552,"ip_address":"","comment_id":89595,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31621004219","product_id":100025201,"comment_content":"老师说面向对象中的继承是过度设计，应该利用组合，面向协议可以理解就是组合吗？","like_count":7,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448186,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556237552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93901,"user_name":"Akagilnc","can_delete":false,"product_type":"c1","uid":1496897,"ip_address":"","ucode":"B8656DD2239B7F","user_header":"https://static001.geekbang.org/account/avatar/00/16/d7/41/32cea111.jpg","comment_is_top":false,"comment_ctime":1557656990,"is_pvip":false,"replies":[{"id":"33540","content":"我还真不知道，帮你顶一下","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557673482,"ip_address":"","comment_id":93901,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27327460766","product_id":100025201,"comment_content":"精选留言里面那段COP的内容能知道出处么？","like_count":7,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449822,"discussion_content":"我还真不知道，帮你顶一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557673482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89893,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1556321399,"is_pvip":true,"replies":[{"id":"32204","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556339822,"ip_address":"","comment_id":89893,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27326125175","product_id":100025201,"comment_content":"面向对象是一种编程理念，或者更进一步是认知世界的一种方式，和具体的编程语言无关，比如C语言同样也可实现面向对象机制。但是编程语言会关乎开发、部署和维护效率，在一定程度上也会规定软件的生命力。<br>","like_count":6,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448309,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556339822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89765,"user_name":"Enthusiasm","can_delete":false,"product_type":"c1","uid":1504776,"ip_address":"","ucode":"FEAA522C24A6D5","user_header":"https://static001.geekbang.org/account/avatar/00/16/f6/08/ecf5d724.jpg","comment_is_top":false,"comment_ctime":1556258751,"is_pvip":false,"replies":[{"id":"32141","content":"面向连接不等于面向接口。接口只是一种连接方式，但不是唯一的。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556263175,"ip_address":"","comment_id":89765,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27326062527","product_id":100025201,"comment_content":"老师您好，目前我对面向连接不了解，只知道Java中的面向接口，请问面向连接是不是就是Java中的面向接口？只不过Java中保留了继承特性，而go把继承特性彻底抛弃了？如果不是这样，那Java和Go在这方面最大的区别您认为是什么？","like_count":6,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448253,"discussion_content":"面向连接不等于面向接口。接口只是一种连接方式，但不是唯一的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556263175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90160,"user_name":"_Moses","can_delete":false,"product_type":"c1","uid":1018957,"ip_address":"","ucode":"8673440EAEEC40","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/4d/5a8944f9.jpg","comment_is_top":false,"comment_ctime":1556435939,"is_pvip":false,"replies":[{"id":"32309","content":"😄","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556446388,"ip_address":"","comment_id":90160,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23031272419","product_id":100025201,"comment_content":"应该说不愧是go语言布道者吗😂说得我都想学go了…","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448409,"discussion_content":"😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556446388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89692,"user_name":"Horse_Lion","can_delete":false,"product_type":"c1","uid":1284871,"ip_address":"","ucode":"E5D5BBCBDF613F","user_header":"","comment_is_top":false,"comment_ctime":1556244965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23031081445","product_id":100025201,"comment_content":"老师看问题的世界观更宏大些，厉害。","like_count":5},{"had_liked":false,"id":89645,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1556239753,"is_pvip":false,"replies":[{"id":"32121","content":"这篇谈编程范式，不比较语言","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556241288,"ip_address":"","comment_id":89645,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23031076233","product_id":100025201,"comment_content":"go也有go的不足的吧 ","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448209,"discussion_content":"这篇谈编程范式，不比较语言","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556241288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89606,"user_name":"杨洪林","can_delete":false,"product_type":"c1","uid":1078679,"ip_address":"","ucode":"FA48C280791A55","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/97/abcd222a.jpg","comment_is_top":false,"comment_ctime":1556235978,"is_pvip":false,"replies":[{"id":"32113","content":"Go的确是的，面向对象的关键特征它都具备","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556237394,"ip_address":"","comment_id":89606,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23031072458","product_id":100025201,"comment_content":"为什么Go会被归类为面向对象的语言呢？","like_count":5,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448192,"discussion_content":"Go的确是的，面向对象的关键特征它都具备","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556237394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90237,"user_name":"Wei","can_delete":false,"product_type":"c1","uid":1500115,"ip_address":"","ucode":"58D54BD0499169","user_header":"https://static001.geekbang.org/account/avatar/00/16/e3/d3/12dc3438.jpg","comment_is_top":false,"comment_ctime":1556456252,"is_pvip":false,"replies":[{"id":"32318","content":"你可以了解一下 erlang 语言里面的 array（ http:&#47;&#47;erlang.org&#47;doc&#47;man&#47;array.html ），其实它根本不是数组，而是二叉树。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556458755,"ip_address":"","comment_id":90237,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18736325436","product_id":100025201,"comment_content":"（函数式编程）需要通过一种复杂的平衡二叉树来实现一个使用界面（接口）上与过程式一致的数组。。。许老师可以再解释一下吗？<br>这句话没明白。。。最近学习函数式，觉得非常有趣。","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448435,"discussion_content":"你可以了解一下 erlang 语言里面的 array（ http://erlang.org/doc/man/array.html ），其实它根本不是数组，而是二叉树。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556458755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90091,"user_name":"七月有风","can_delete":false,"product_type":"c1","uid":1439990,"ip_address":"","ucode":"B3F82397347C5B","user_header":"https://static001.geekbang.org/account/avatar/00/15/f8/f6/3e2db176.jpg","comment_is_top":false,"comment_ctime":1556412995,"is_pvip":false,"replies":[{"id":"32293","content":"你说的是AOP么？后面我们深入架构思维的讨论会深度涉及这块的话题","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556416138,"ip_address":"","comment_id":90091,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18736282179","product_id":100025201,"comment_content":"老师，您好，面向切片又是什么？和面向对象又有什么不同？","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448386,"discussion_content":"你说的是AOP么？后面我们深入架构思维的讨论会深度涉及这块的话题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556416138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89618,"user_name":"Robin.Ku","can_delete":false,"product_type":"c1","uid":1066180,"ip_address":"","ucode":"78E9211C5D76A6","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/c4/10a95b2d.jpg","comment_is_top":false,"comment_ctime":1556237595,"is_pvip":false,"replies":[{"id":"32123","content":"现在挺多了，七牛云团队近期也会更新一下《Go语言编程》一书","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556242974,"ip_address":"","comment_id":89618,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18736106779","product_id":100025201,"comment_content":"许老师，请提供下GO语言的入门书籍或手册？","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448199,"discussion_content":"现在挺多了，七牛云团队近期也会更新一下《Go语言编程》一书","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556242974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89608,"user_name":"我在你的视线里","can_delete":false,"product_type":"c1","uid":1480312,"ip_address":"","ucode":"5373F30E75C07E","user_header":"https://static001.geekbang.org/account/avatar/00/16/96/78/eb86673c.jpg","comment_is_top":false,"comment_ctime":1556236413,"is_pvip":false,"replies":[{"id":"32112","content":"多态不是过度设计","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556237347,"ip_address":"","comment_id":89608,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18736105597","product_id":100025201,"comment_content":"我还以为面相对象的继承和多态是强大的代表，结果是过度设计。看来我的知识还是不足。","like_count":4,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448193,"discussion_content":"多态不是过度设计","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556237347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90610,"user_name":"邵俊达","can_delete":false,"product_type":"c1","uid":1281460,"ip_address":"","ucode":"4B7DACE6DBCF95","user_header":"https://static001.geekbang.org/account/avatar/00/13/8d/b4/ff82483d.jpg","comment_is_top":false,"comment_ctime":1556587786,"is_pvip":false,"replies":[{"id":"32441","content":"没有用过，应该也不会考虑用。对于不熟悉的东西，我无法给出公允的评价。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556588216,"ip_address":"","comment_id":90610,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14441489674","product_id":100025201,"comment_content":"老师，请问七牛有考虑使用 Rust 吗？您觉得 Rust 怎么样？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448593,"discussion_content":"没有用过，应该也不会考虑用。对于不熟悉的东西，我无法给出公允的评价。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556588216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89911,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1556327824,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14441229712","product_id":100025201,"comment_content":"每次看老师的课程，都是对自我认知的一种极大提升。以前我师傅告诉我，学习Java的精髓就是一切皆对象，今天看了老师的课，我感觉我对这句话又有了新的理解。","like_count":3},{"had_liked":false,"id":89725,"user_name":"1900","can_delete":false,"product_type":"c1","uid":1105774,"ip_address":"","ucode":"320D65D14817D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/6e/267bd6ee.jpg","comment_is_top":false,"comment_ctime":1556250462,"is_pvip":true,"replies":[{"id":"32139","content":"面向消息我觉得是编程框架不是编程范式，所以没有列上。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556252590,"ip_address":"","comment_id":89725,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14441152350","product_id":100025201,"comment_content":"面向消息（比如Actor模型）的算啥呢？过程式？函数式？对象式？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448236,"discussion_content":"面向消息我觉得是编程框架不是编程范式，所以没有列上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556252590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89668,"user_name":"哦啊","can_delete":false,"product_type":"c1","uid":1245286,"ip_address":"","ucode":"65BCF73806796F","user_header":"https://static001.geekbang.org/account/avatar/00/13/00/66/1a114487.jpg","comment_is_top":false,"comment_ctime":1556242066,"is_pvip":false,"replies":[{"id":"32129","content":"组合思想是复杂问题简化的最朴素的法则。架构思维的核心法则也是组合。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556244014,"ip_address":"","comment_id":89668,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14441143954","product_id":100025201,"comment_content":"面向连接就是朴素的组合思想，如何理解？<br>面向连接是在面向对象的基础上添加了代码组合的规范？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448221,"discussion_content":"组合思想是复杂问题简化的最朴素的法则。架构思维的核心法则也是组合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556244014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89659,"user_name":"猿工匠","can_delete":false,"product_type":"c1","uid":1112986,"ip_address":"","ucode":"82FA8DE6C28936","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/9a/72f7b184.jpg","comment_is_top":false,"comment_ctime":1556240938,"is_pvip":false,"replies":[{"id":"32128","content":"现在Go的资料已经很多了","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556243929,"ip_address":"","comment_id":89659,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14441142826","product_id":100025201,"comment_content":"老师，Go 语言怎么入手好点？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448217,"discussion_content":"现在Go的资料已经很多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556243929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89643,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1556239663,"is_pvip":false,"replies":[{"id":"32122","content":"有一些叫IDL的东西专门用于接口表示","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556242088,"ip_address":"","comment_id":89643,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14441141551","product_id":100025201,"comment_content":"请问模块间怎么做到：选择某种语言无关的接口表示","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448207,"discussion_content":"有一些叫IDL的东西专门用于接口表示","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556242088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":188792,"user_name":"半截木头","can_delete":false,"product_type":"c1","uid":1296712,"ip_address":"","ucode":"72456E8E1BD6F3","user_header":"https://static001.geekbang.org/account/avatar/00/13/c9/48/5a2879e3.jpg","comment_is_top":false,"comment_ctime":1584416336,"is_pvip":false,"replies":[{"id":"72827","content":"是的","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1584422510,"ip_address":"","comment_id":188792,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10174350928","product_id":100025201,"comment_content":"站在唯技术论的角度，业务架构和编程语言无关。但是架构关乎人，那么就和编程语言有关。","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487528,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584422510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110094,"user_name":"孙梦华🙄🙄","can_delete":false,"product_type":"c1","uid":1037070,"ip_address":"","ucode":"2017F0E865416C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d3/0e/d2f9dd72.jpg","comment_is_top":false,"comment_ctime":1562171813,"is_pvip":false,"replies":[{"id":"39891","content":"v 的确有点意思，在表达的简洁性上有更高的追求，但是基本上还是学go为主，并不存在真正实质性的突破。可以关注。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1562198934,"ip_address":"","comment_id":110094,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10152106405","product_id":100025201,"comment_content":"09年的go语言，看文中的外链，老师说十年后才会有新兴语言试图突破go的高度。<br>最近确实出来了一个Vlang，貌似还有点火的样子。虽然我只从一个经常追新的朋友这边听说～老师能稍微说说这个语言不？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456720,"discussion_content":"v 的确有点意思，在表达的简洁性上有更高的追求，但是基本上还是学go为主，并不存在真正实质性的突破。可以关注。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562198934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95828,"user_name":"马哲富","can_delete":false,"product_type":"c1","uid":1107917,"ip_address":"","ucode":"D6BDDFE3CC07ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/cd/08088f14.jpg","comment_is_top":false,"comment_ctime":1558193578,"is_pvip":false,"replies":[{"id":"34273","content":"请看Go语言","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558225529,"ip_address":"","comment_id":95828,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10148128170","product_id":100025201,"comment_content":"许老师好，我有一个疑惑，如果继承是过度设计，而多态是一个好的设计，那么如果没有继承的话，多态又怎么来实现呢？或者说多态的功效会不会大减？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450610,"discussion_content":"请看Go语言","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558225529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90704,"user_name":"王棕生","can_delete":false,"product_type":"c1","uid":1337944,"ip_address":"","ucode":"901BD0447A871E","user_header":"https://static001.geekbang.org/account/avatar/00/14/6a/58/f2c6d65b.jpg","comment_is_top":false,"comment_ctime":1556612845,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10146547437","product_id":100025201,"comment_content":"文笔清新，角度新颖，首次读到从编程范式描述编程语言进化的文章.....赞许老师！","like_count":2},{"had_liked":false,"id":90080,"user_name":"garming","can_delete":false,"product_type":"c1","uid":1023526,"ip_address":"","ucode":"529F405DD13F43","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9e/26/7aede07e.jpg","comment_is_top":false,"comment_ctime":1556411783,"is_pvip":false,"replies":[{"id":"32294","content":"编程框架通常是一个或多个包（package），往往规定了某个领域的业务你应该怎么写。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556416273,"ip_address":"","comment_id":90080,"utype":1}],"discussion_count":1,"race_medal":1,"score":"10146346375","product_id":100025201,"comment_content":"老师，怎么理解编程框架这个概念，我看你留意经常提到","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448382,"discussion_content":"编程框架通常是一个或多个包（package），往往规定了某个领域的业务你应该怎么写。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556416273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89848,"user_name":"。罗","can_delete":false,"product_type":"c1","uid":1493864,"ip_address":"","ucode":"2AAF34DF220F27","user_header":"https://static001.geekbang.org/account/avatar/00/16/cb/68/e49bb3e9.jpg","comment_is_top":false,"comment_ctime":1556282384,"is_pvip":false,"replies":[{"id":"32192","content":"Go语言确实早期没有依赖管理的规范，但是现在已经有了，你可以了解一下","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556291624,"ip_address":"","comment_id":89848,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10146216976","product_id":100025201,"comment_content":"老师您好，我目前主要从事java相关工作，对go语言感兴趣，有意向，也去看过很多别人的开源项目，发现go在项目依赖管理这里用起来比较麻烦，如果项目一直在演进，等项目大了，拆分就应该比较麻烦，可能是因为我没有深入了解这门语言的缘故，我知道七牛云在国内是go语言的践行者，想请问在这里七牛云有没有在go语言上的一些实践踩坑的经验分享呢","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448288,"discussion_content":"Go语言确实早期没有依赖管理的规范，但是现在已经有了，你可以了解一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556291624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89617,"user_name":"Barry","can_delete":false,"product_type":"c1","uid":1003308,"ip_address":"","ucode":"79117738B2B26E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/2c/a17b23f7.jpg","comment_is_top":false,"comment_ctime":1556237560,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10146172152","product_id":100025201,"comment_content":"通俗易懂，以前看的很多的关于编程范式讲解的文章多少都有点晦涩难懂。<br><br>并且让我了解了新的编程范式-面向连接。这个思想新奇而且有意思","like_count":2},{"had_liked":false,"id":89614,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1556237362,"is_pvip":false,"replies":[{"id":"32117","content":"你可以学习一下Go","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556238521,"ip_address":"","comment_id":89614,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10146171954","product_id":100025201,"comment_content":"如何用组合达到继承的效果呢？比如 在父类中方法A调用父类的B方法，在子类中重写B方法。 然后使用时调用A方法，让A方法调用子类中重写的B方法。","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448196,"discussion_content":"你可以学习一下Go","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556238521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89596,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1556233299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10146167891","product_id":100025201,"comment_content":"打卡04 全局观","like_count":2},{"had_liked":false,"id":275681,"user_name":"xtepCool","can_delete":false,"product_type":"c1","uid":1543599,"ip_address":"","ucode":"6181687E98524E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/af/01deb987.jpg","comment_is_top":false,"comment_ctime":1611644265,"is_pvip":false,"replies":[{"id":"100089","content":"函数式没有牺牲结构体的可复用性","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1611708679,"ip_address":"","comment_id":275681,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5906611561","product_id":100025201,"comment_content":"看了老师的关于这几门语言的分析，我自己总结了一下。<br>        面向对象的 “对象”是由结构体和函数“组合”的，它“继承”了结构体的可复用性和函数的抽象能力。为了保证结构体数据的可复用性以及可变变量易于修改的要求，引申出来“封装”的要求。同时，对象继承下来的抽象能力实现了“多态”的能力。在更好的解决实际问题的同时降低了学习成本，催生了蓬勃发展社区，社区的发展又不断促进它进步形成良性闭环。如果解决时代特定问题是需求的话，面向对象编程的设计是成功的。组合概念在计算机领域真是无处不在，大到概念和语言方向设计，编程本质:程序=控制+逻辑+DataSource，微服务治理方案功能组件拆分组合，小到代码解耦规范，对象类的局部设计。感觉可以和经济领域的复利概念有的一拼。还有个疑惑地方，函数式编程算不算牺牲了结构体的可复用性？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514437,"discussion_content":"函数式没有牺牲结构体的可复用性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611708679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175990,"user_name":"幻灰龙","can_delete":false,"product_type":"c1","uid":1046202,"ip_address":"","ucode":"AFEDCC997C2FF6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f6/ba/09ab72d2.jpg","comment_is_top":false,"comment_ctime":1580906092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875873388","product_id":100025201,"comment_content":"打卡第五篇。一开始一个完整的逻辑，跑在一个线程内，后面跑在了多个线程内，后面跑在了多个后台，再后面跑在了多个客户端，再后面跑在了多个平台间…编程范式应该在这方面不断提供支持。","like_count":1},{"had_liked":false,"id":110261,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1562216152,"is_pvip":false,"replies":[{"id":"40012","content":"这个，我们不讨论语言好坏","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1562232355,"ip_address":"","comment_id":110261,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857183448","product_id":100025201,"comment_content":"开发效率和后期维护上，我认为Java相对Go语言是更好的，<br>具体表现在：<br>1. Java有很优秀的IDE支持，例如：IDEA<br>2. Java有很强大的社区和框架，而且文档比较完备，例如：Spring全家桶<br><br>此外， 我不理解您说的语言的衰弱在Java这个语言上来说，体现在哪个地方？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456790,"discussion_content":"这个，我们不讨论语言好坏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562232355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110098,"user_name":"孙梦华🙄🙄","can_delete":false,"product_type":"c1","uid":1037070,"ip_address":"","ucode":"2017F0E865416C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d3/0e/d2f9dd72.jpg","comment_is_top":false,"comment_ctime":1562172592,"is_pvip":false,"replies":[{"id":"39892","content":"O（1）是怎么得到的？","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1562199042,"ip_address":"","comment_id":110098,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5857139888","product_id":100025201,"comment_content":"另外，问一个东西。以前用python，现在用go。python有一个数据结构叫元组，也就是集合。在编程的时候我觉得这个东西可好用了，判断元素是否在列表里面，直接将列表转成元组，直接用in，就能知道是否在里面，这个时间复杂度O（1）。<br>go就只能用map收集一遍，感觉又很耗空间，不够酷。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456722,"discussion_content":"O（1）是怎么得到的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562199042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":107709,"user_name":"七月有风","can_delete":false,"product_type":"c1","uid":1439990,"ip_address":"","ucode":"B3F82397347C5B","user_header":"https://static001.geekbang.org/account/avatar/00/15/f8/f6/3e2db176.jpg","comment_is_top":false,"comment_ctime":1561598558,"is_pvip":false,"replies":[{"id":"38992","content":"你可以研究一下jvm","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1561612395,"ip_address":"","comment_id":107709,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5856565854","product_id":100025201,"comment_content":"老师好，想多了解一点语言执行器这块的东西，老师有没有好的资料或书籍推荐。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":455634,"discussion_content":"你可以研究一下jvm","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561612395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102040,"user_name":"Kian.Lee","can_delete":false,"product_type":"c1","uid":1086568,"ip_address":"","ucode":"3FB08A00F2DFD7","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/68/56794ea3.jpg","comment_is_top":false,"comment_ctime":1560125506,"is_pvip":false,"replies":[{"id":"36856","content":"过度设计的确是挺难评判的，没有统一标准。您可以有自己的看法。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560168677,"ip_address":"","comment_id":102040,"utype":1}],"discussion_count":2,"race_medal":5,"score":"5855092802","product_id":100025201,"comment_content":"面向对象是非常重要的进步，但是继承是一个过度设计，不只让软件工程师在组合与继承中纠结，也产生了复杂的对象继承树。“过度设计”这个观点我个人不认同，如把我们设计的系统比作一个人，那么属于先天DNA级别的能力就该是继承，后天学习掌握的能力就是组合。在每个系统中都有一些共用的DNA级别的能力，这些用继承比组合更自然。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453230,"discussion_content":"过度设计的确是挺难评判的，没有统一标准。您可以有自己的看法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560168677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248472,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8o3aJz4NdqOCWvTjIPGmRWHt5xicwKGGGRd5icCoiauvvtnEtST0ljsuM23wiaYbZLknASvXmmqfg1w/132","nickname":"茅延安","note":"","ucode":"317626CFFBC81C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":28176,"discussion_content":"同时包括继承和组合的世界，世界观更完整。只是在继承的实现上各语言缺乏统一的行之有效的规范。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570685523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95977,"user_name":"Young","can_delete":false,"product_type":"c1","uid":1073443,"ip_address":"","ucode":"075C0BBE20FD8C","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/23/30d134cf.jpg","comment_is_top":false,"comment_ctime":1558282226,"is_pvip":false,"replies":[{"id":"34474","content":"接口继承的确只有多态，没有重用。我个人也建议只做接口继承，少产生一个复杂的继承树。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1558377491,"ip_address":"","comment_id":95977,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853249522","product_id":100025201,"comment_content":"可不可以认为java里面，接口的设计提供了除了继承实现多态的另外一种选择，把继承和多态分开了？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":450665,"discussion_content":"接口继承的确只有多态，没有重用。我个人也建议只做接口继承，少产生一个复杂的继承树。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558377491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":95817,"user_name":"Geek_gooy","can_delete":false,"product_type":"c1","uid":1504570,"ip_address":"","ucode":"FC168C31530040","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLluwfFjxlCmg9p2rJVicBdBo6OYpN0EAotUguias8wc78WtAEPHsWic0880CqGwyNypy2KZqVpYhGiag/132","comment_is_top":false,"comment_ctime":1558188987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5853156283","product_id":100025201,"comment_content":"既然只讲编程语言的发展史，说说Java给我的直观感受。<br><br>Java，使用者和函数之间总是隔着一堵墙，使用者面对这堵墙陷入了深深的沉思。<br>上帝说，墙你是推不倒的，我允许你们按照模板再造一堵属于自己墙，就可以调用函数了，，，<br>感情上帝造这堵墙就是为了方便自己管理函数啊，刚好为了多态啊，对使用者一点都不友好。<br>每次给自己的代码照着别人的模板造一堵强加给自己的墙的时候心里就不舒服，那那都是强塞给我的墙，还怎么给别人看我写的代码。","like_count":1},{"had_liked":false,"id":94263,"user_name":"白小狮","can_delete":false,"product_type":"c1","uid":1148049,"ip_address":"","ucode":"222BAC022A630A","user_header":"https://static001.geekbang.org/account/avatar/00/11/84/91/1a7dc912.jpg","comment_is_top":false,"comment_ctime":1557756200,"is_pvip":false,"replies":[{"id":"33679","content":"已经完善过了","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557758812,"ip_address":"","comment_id":94263,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5852723496","product_id":100025201,"comment_content":"希望go的包管理快点完善","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449984,"discussion_content":"已经完善过了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557758812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93515,"user_name":"Cris","can_delete":false,"product_type":"c1","uid":1473520,"ip_address":"","ucode":"F8A287134F1078","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/f0/269139d5.jpg","comment_is_top":false,"comment_ctime":1557484049,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852451345","product_id":100025201,"comment_content":"我一下子对go产生了浓厚的兴趣","like_count":1},{"had_liked":false,"id":93513,"user_name":"Cris","can_delete":false,"product_type":"c1","uid":1473520,"ip_address":"","ucode":"F8A287134F1078","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/f0/269139d5.jpg","comment_is_top":false,"comment_ctime":1557483945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5852451241","product_id":100025201,"comment_content":"老师，我就想知道您到底会多少种语言？膜拜<br>","like_count":1},{"had_liked":false,"id":92893,"user_name":"乘风","can_delete":false,"product_type":"c1","uid":1115724,"ip_address":"","ucode":"0420C5535DACB7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLwSoTjHPX5tm4whBSfoZLX6toZxrZGUaLABQywKNf4MDc9toK3QSV7Z99ATcGicFCysoleQ5ISzmw/132","comment_is_top":false,"comment_ctime":1557362696,"is_pvip":false,"replies":[{"id":"33161","content":"继承+虚函数，把代码复用和多态两个完全不相干的需求揉在一起，不是好设计。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557365305,"ip_address":"","comment_id":92893,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5852329992","product_id":100025201,"comment_content":"继承思考：<br>1.约束性<br>2.复杂性<br>过程的定义：有入参和出参，完成过程定义的规范（作用）。当对过程修改时仍需要按照定义的规范（约束性），当按照规范无法完成修改时则需要重构。<br>而面向对象的设计原则：修改关闭、扩展开放，如果继承是按这样去设计本身是良好的，但因为用户不同所以产生的结果也不一样（复杂性）；<br>在使用继承方法的过程中仍需要考虑继承方法的复杂性，按标准设计是没问题的，按照非标准设计则需要考虑继承树的关系，但在编程过程中本身需要考虑<br>最坏的可能，这个问题根源是由人产生的，但又无法杜绝，那么就只能做限制了。<br>老师，我这样理解对吗？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449414,"discussion_content":"继承+虚函数，把代码复用和多态两个完全不相干的需求揉在一起，不是好设计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557365305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":91908,"user_name":"曾思源","can_delete":false,"product_type":"c1","uid":1494494,"ip_address":"","ucode":"65F876534D7087","user_header":"https://static001.geekbang.org/account/avatar/00/16/cd/de/79e653c0.jpg","comment_is_top":false,"comment_ctime":1557132151,"is_pvip":false,"replies":[{"id":"32846","content":"看是网络协议层的接口，还是跨语言的二进制接口。前者比如protobuf之类就挺好，后者可以了解一下idl之类的东西，不过我觉得都有点重。如果要跨语言，我的建议在网络协议层跨，或者用操作系统的动态库机制（有点原始但很轻）；如果语言内的接口，就别太复杂了，用语言自己的机制挺好的。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1557149721,"ip_address":"","comment_id":91908,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5852099447","product_id":100025201,"comment_content":"许老师：选择某种语言无关的接口表示；能举个例吗？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449074,"discussion_content":"看是网络协议层的接口，还是跨语言的二进制接口。前者比如protobuf之类就挺好，后者可以了解一下idl之类的东西，不过我觉得都有点重。如果要跨语言，我的建议在网络协议层跨，或者用操作系统的动态库机制（有点原始但很轻）；如果语言内的接口，就别太复杂了，用语言自己的机制挺好的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557149721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248472,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK8o3aJz4NdqOCWvTjIPGmRWHt5xicwKGGGRd5icCoiauvvtnEtST0ljsuM23wiaYbZLknASvXmmqfg1w/132","nickname":"茅延安","note":"","ucode":"317626CFFBC81C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":28183,"discussion_content":"protobuf+rpc框架，或者消息队列。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570685828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90914,"user_name":"秦岭","can_delete":false,"product_type":"c1","uid":1103644,"ip_address":"","ucode":"E4C324C08A9DA2","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/1c/f539a8aa.jpg","comment_is_top":false,"comment_ctime":1556721346,"is_pvip":false,"replies":[{"id":"32621","content":"其实我们可以更进一步：不用继承","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556770696,"ip_address":"","comment_id":90914,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5851688642","product_id":100025201,"comment_content":"学策略模式的时候就讲到要多用组合，少用继承。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448718,"discussion_content":"其实我们可以更进一步：不用继承","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556770696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103644,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d7/1c/f539a8aa.jpg","nickname":"秦岭","note":"","ucode":"E4C324C08A9DA2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296914,"discussion_content":"模版方法模式，工厂模式用继承还是需要的吧，有时候需要修改其它框架的一些功能也要继承","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596704685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90477,"user_name":"黑猫大侠","can_delete":false,"product_type":"c1","uid":1145549,"ip_address":"","ucode":"B974494C725B83","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/cd/d26fb49e.jpg","comment_is_top":false,"comment_ctime":1556531709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5851499005","product_id":100025201,"comment_content":"差点儿以为是在介绍go语言。2016年的时候就用go写了一套微信公众号的后台开发，从语言特性上碾压PHP+nginx的并发，确实挺好用的，能唤醒对编程的原始code欲望","like_count":1},{"had_liked":false,"id":90327,"user_name":"a(๑≖ิټ≖ิ)✌","can_delete":false,"product_type":"c1","uid":1392431,"ip_address":"","ucode":"AEF9B5CA1605DF","user_header":"https://static001.geekbang.org/account/avatar/00/15/3f/2f/8513c4d3.jpg","comment_is_top":false,"comment_ctime":1556496383,"is_pvip":false,"replies":[{"id":"32349","content":"挺好的问题，了解一下Go语言，兄弟","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1556497279,"ip_address":"","comment_id":90327,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5851463679","product_id":100025201,"comment_content":"没有继承是不是就没有多态？那样的话不是挺不灵活的，即使是组合也只能组合确定的类型，不能组合一个接口，然后自由定义实现？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448473,"discussion_content":"挺好的问题，了解一下Go语言，兄弟","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556497279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":89583,"user_name":"晓凉","can_delete":false,"product_type":"c1","uid":1220647,"ip_address":"","ucode":"2D1130C3DACE1A","user_header":"https://static001.geekbang.org/account/avatar/00/12/a0/27/bdc6307d.jpg","comment_is_top":false,"comment_ctime":1556214991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5851182287","product_id":100025201,"comment_content":"从面向对象把“继承”作为核心概念，到Go语言放弃“继承”概念，这一发展印证了“实践是检验真理的唯一标准”。“继承”的概念很自然，用在面向对象范式中也是业界大师的设计，但时间和实践才是最终的判决者。时间和实践与我们每个人同在，这可能是平凡人生存的一点自信与价值吧=_=","like_count":1},{"had_liked":false,"id":349157,"user_name":"皓璐","can_delete":false,"product_type":"c1","uid":1097341,"ip_address":"","ucode":"AE362CB123F618","user_header":"https://static001.geekbang.org/account/avatar/00/10/be/7d/03f40825.jpg","comment_is_top":false,"comment_ctime":1655777194,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655777194","product_id":100025201,"comment_content":"公司中遇见在一个偏业务的项目中使用继承的方式来写一次性需求的 每个需求都不一样 但是偏偏硬用继承来做 最后系统一锅粥 所以 在我负责的系统中 我明确要求 只用多态 两个需求间宁可有重复代码 也不要用继承把两个需求硬生生的耦合在一起 而且所有需求代码做到可以插拔 并且定义每个模块的接口标准 最后我的系统实现了业务方完全自主上线 3个人支持50个人的需求 而那个用继承搞需求的项目 已经陷入泥沼中爬不出来了","like_count":0},{"had_liked":false,"id":318243,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1635213842,"is_pvip":true,"replies":[{"id":"115433","content":"可以学一下go+","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1635245574,"ip_address":"","comment_id":318243,"utype":1}],"discussion_count":1,"race_medal":2,"score":"1635213842","product_id":100025201,"comment_content":"软件是活的书籍，那么代码应该就是活的文字，也可能是笔画。<br><br>小孩子是否一定要学习编程？还是只要会用软件就可以，当然如果 Word 用的好，里面也有类似编程的部分。<br><br>编程范式：过程式、函数式、面向对象、面向连接？<br><br>Go 语言面向连接，研究代码和代码之间如何组合，那么是否可以使用 Go 来连接多种语言已有的代码？<br><br>可惜错过了之前深入学习 Go 语言的机会，看上去还是挺有意思的，希望以后有机会。<br><br>后端服务趋同，前端成为战场。这里的前端是指什么呢？是业务还是字面意义的前端。<br><br>在很久很久以前，我上大学的时候，是没有编程范式的课程的，比较遗憾，不知道现在的本科课程有没有。<br><br>虽然本篇主要讲的是编程范式，但是感觉还是有不少留言是冲着语言来的。","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529151,"discussion_content":"可以学一下go+","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635245574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302790,"user_name":"城里的野山参","can_delete":false,"product_type":"c1","uid":1306542,"ip_address":"","ucode":"D90C1B0A5BA48E","user_header":"https://static001.geekbang.org/account/avatar/00/13/ef/ae/813f66c9.jpg","comment_is_top":false,"comment_ctime":1626364135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626364135","product_id":100025201,"comment_content":"不知道老师说的组合优于继承，这里的组合要如何理解，不同的类提供不同的功能，然后用不同的类组成一个新类么","like_count":0},{"had_liked":false,"id":288869,"user_name":"恬毅","can_delete":false,"product_type":"c1","uid":1015240,"ip_address":"","ucode":"914ED16F3BE714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","comment_is_top":false,"comment_ctime":1618739962,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618739962","product_id":100025201,"comment_content":"感恩许老师，看完这篇文章让我产生了很多的思考，编程范式、多态、对go、c++的了解。<br>本人在java开发过程中，实际代码比较少用到继承，之前很多时候纠结是用继承，还是组合，看完这篇文章豁然开朗。多态用接口，复用用组合。","like_count":0},{"had_liked":false,"id":288267,"user_name":"coder甲","can_delete":false,"product_type":"c1","uid":1503417,"ip_address":"","ucode":"B57E6026AF4A70","user_header":"https://static001.geekbang.org/account/avatar/00/16/f0/b9/67167dc2.jpg","comment_is_top":false,"comment_ctime":1618386736,"is_pvip":false,"replies":[{"id":"104647","content":"go有很多经典书籍都不错了，可以搜索一下就能够查到","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1618401340,"ip_address":"","comment_id":288267,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618386736","product_id":100025201,"comment_content":"老师有没有Go语言的书籍或者课程推荐？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518564,"discussion_content":"go有很多经典书籍都不错了，可以搜索一下就能够查到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618401340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288260,"user_name":"coder甲","can_delete":false,"product_type":"c1","uid":1503417,"ip_address":"","ucode":"B57E6026AF4A70","user_header":"https://static001.geekbang.org/account/avatar/00/16/f0/b9/67167dc2.jpg","comment_is_top":false,"comment_ctime":1618383927,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618383927","product_id":100025201,"comment_content":"立马开始部署Go语言的开发环境。10多年的C++开发经验，继承和组合的权衡真的太难了。公司决策决定哪个语言也是很难，老师真的讲的太好了。这么好的课，一定要推给大家。","like_count":0},{"had_liked":false,"id":285074,"user_name":"猪小擎","can_delete":false,"product_type":"c1","uid":1370959,"ip_address":"","ucode":"D9552746AE3327","user_header":"https://static001.geekbang.org/account/avatar/00/14/eb/4f/6a97b1cd.jpg","comment_is_top":false,"comment_ctime":1616599170,"is_pvip":true,"replies":[{"id":"103492","content":"当然","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1616685825,"ip_address":"","comment_id":285074,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1616599170","product_id":100025201,"comment_content":"go是面向对象吗？？？？？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517577,"discussion_content":"当然","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616685825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284518,"user_name":"不温暖啊不纯良","can_delete":false,"product_type":"c1","uid":2079117,"ip_address":"","ucode":"204474A214E00C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b9/8d/00bded19.jpg","comment_is_top":false,"comment_ctime":1616314202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616314202","product_id":100025201,"comment_content":"已经学习了一下Python,但从写代码这个维度来看，的确要比Java简洁很多。语言选择还是看个人习惯，还有对语言的核心思想的掌握程度，再好用的语言也能写出了质量很差的代码，反正再复杂晦涩的语言如果是掌握透彻，也能写出很漂亮的代码，如果从架构师的角度出发，我是会。选择用团队，更熟悉的那个语言开发，首先得保证开发效率和项目质量，要不然钱都挣不到，拿什么做项目。好的代码在扩展维护以及重构时都有很大的便利性，与其把每个语言都会一点，还不如把一个语言做到极致。","like_count":0},{"had_liked":false,"id":284020,"user_name":"light","can_delete":false,"product_type":"c1","uid":1470791,"ip_address":"","ucode":"643A09D418AE45","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/CYqY1PWt6CPMP9N3VfXIEKXHO38WWdXS0ibhicYUGUv56TFvrnMTGjNy4Y3B94Ovicic2dSiauQ3VlxcibNicne6SoPuQ/132","comment_is_top":false,"comment_ctime":1616038563,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1616038563","product_id":100025201,"comment_content":"c#中继承是单继承，配合多态挺好用的啊","like_count":0,"discussions":[{"author":{"id":1015240,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","nickname":"恬毅","note":"","ucode":"914ED16F3BE714","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368517,"discussion_content":"java也是单继承","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618739244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282218,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1615163120,"is_pvip":true,"replies":[{"id":"102489","content":"你想了解什么？","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1615169795,"ip_address":"","comment_id":282218,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1615163120","product_id":100025201,"comment_content":"可以介绍下七牛云创建的过程吗？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516667,"discussion_content":"你想了解什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615169795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282216,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1615163011,"is_pvip":true,"replies":[{"id":"102488","content":"可以这么理解。七牛是全球第一家用Go做云计算服务的公司。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1615169778,"ip_address":"","comment_id":282216,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1615163011","product_id":100025201,"comment_content":"GO语言和七牛云是相互成就吗？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516666,"discussion_content":"可以这么理解。七牛是全球第一家用Go做云计算服务的公司。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615169778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252736,"user_name":"抱小星","can_delete":false,"product_type":"c1","uid":1504652,"ip_address":"","ucode":"BA7B0DAFDA4AF5","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/8c/82fb5890.jpg","comment_is_top":false,"comment_ctime":1602472277,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1602472277","product_id":100025201,"comment_content":"老师，现在刚毕业进入工作，还在入门阶段，这篇的层次太高了，很多东西不是很理解：<br><br>比如“消息传递是多核背景下流行起来的一种编程思想，其核心主张是：尽可能用消息传递来取代共享内存，从而尽可能避免显式的锁，降低编程负担。”<br><br>像这些东西应该怎么学呢？<br>要如何理解类.方法、继承、封装、多态、接口？感觉学得不是很明白，还请老师指教。","like_count":0},{"had_liked":false,"id":235625,"user_name":"marinzheng","can_delete":false,"product_type":"c1","uid":1392524,"ip_address":"","ucode":"08C1C566080EF3","user_header":"https://static001.geekbang.org/account/avatar/00/15/3f/8c/4538ba94.jpg","comment_is_top":false,"comment_ctime":1595131164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595131164","product_id":100025201,"comment_content":"面向对象不是编程范式，是一种工程实践。<br>可以用过程式语言实现面向对象，也可以用函数式语言实现面向对象。java语言内置了class关键字，可以很方便的进行面向对象实践；c等语言没有像java一样有内置语法来支持面向对象，但是也可以用结构体等特性实现；js之前只能以原型链等内置特性实现面向对象","like_count":0},{"had_liked":false,"id":214554,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1588764910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588764910","product_id":100025201,"comment_content":"迭代，编程语言不断迭代，架构设计也要不断迭代，自己对需求的理解也不断迭代，不要停下脚步，越来越好。","like_count":0},{"had_liked":false,"id":200998,"user_name":"oliver","can_delete":false,"product_type":"c1","uid":1505929,"ip_address":"","ucode":"980EBABF71AFBC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLOMFSAg7ZEtwgdqTZMhjvdlOcRbHWTzDCBJMqdzpIqxQIRuE2aHianHHFibv1bGfAjnzmBpSJxx9MA/132","comment_is_top":false,"comment_ctime":1585704541,"is_pvip":false,"replies":[{"id":"75219","content":"继承的问题是复杂的继承树。Go语言的组合非常强大，支持匿名组合，能够部分达到继承的效果，但是又避免了继承的问题。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1585719717,"ip_address":"","comment_id":200998,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585704541","product_id":100025201,"comment_content":"老师，对于继承的看法，我有疑问。首先继承的弊端有哪些，能说详细一些么？其次如果用组合代替，当两个实现类的代码重复部分需要修改的时候带来的隐患，不也是组合的弊端么？","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490205,"discussion_content":"继承的问题是复杂的继承树。Go语言的组合非常强大，支持匿名组合，能够部分达到继承的效果，但是又避免了继承的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585719717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199510,"user_name":"獨自去遠方","can_delete":false,"product_type":"c1","uid":1503941,"ip_address":"","ucode":"E246B33F397441","user_header":"https://static001.geekbang.org/account/avatar/00/16/f2/c5/2a441c27.jpg","comment_is_top":false,"comment_ctime":1585490718,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585490718","product_id":100025201,"comment_content":"软件是活的书籍<br>\t表达方式多样<br>\t对技术的现场还原<br><br>对编程范式的进化<br>\t过程式<br>\t函数式<br>\t面向对象<br><br>面向对象-&gt;面向连接<br>\t面向连接：组合思想，代码和代码如何组合<br><br>\t面向对象 强调了契约<br>\t\t不够，语言的方方面面都需要契约<br>\t\t\t1.代码规范，表达方式<br>\t\t\t2.消息传递约束进程行为<br><br>其他方面的进化<br>\t工程化能力<br>\t\t包，版本，文档生成，单元测试<br>\t语言执行器行为<br>\t\t编译目标文件为可执行程序<br>\t\t生成跨平台虚拟机字节码<br>\t\t直接解释执行<br><br>语言对架构的影响<br>\t软件业务架构，本身怎么拆分模块，业务边界<br>\t采用的规格描述<br>\t\t与语言无关的接口表示<br>\t\t团队开发时采用的语言描述接口<br><br>\t\t考虑的方面<br>\t\t\t开发效率<br>\t\t\t后期维护","like_count":0},{"had_liked":false,"id":158863,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1575466387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575466387","product_id":100025201,"comment_content":"真知灼见","like_count":0},{"had_liked":false,"id":151444,"user_name":"liliumss","can_delete":false,"product_type":"c1","uid":1333094,"ip_address":"","ucode":"A52AC5042F3115","user_header":"https://static001.geekbang.org/account/avatar/00/14/57/66/e57bdb18.jpg","comment_is_top":false,"comment_ctime":1573721583,"is_pvip":false,"replies":[{"id":"58266","content":"go的组合非常强大，比其他语言强大一个数量级，其他语言的组合能力和它不可同日而语。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1573743048,"ip_address":"","comment_id":151444,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573721583","product_id":100025201,"comment_content":"有个疑问 java开发者只要杜绝使用继承 只用租合 那么是不是也可以达到golang的特性","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474477,"discussion_content":"go的组合非常强大，比其他语言强大一个数量级，其他语言的组合能力和它不可同日而语。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573743048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144302,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1571891121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571891121","product_id":100025201,"comment_content":"第一次听到，继承被弃用，时代的变革。。","like_count":0},{"had_liked":false,"id":136245,"user_name":"嚆同学","can_delete":false,"product_type":"c1","uid":1018329,"ip_address":"","ucode":"5F5BFE47B3302C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/d9/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1569395321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569395321","product_id":100025201,"comment_content":"从老师的文章中看到了知识链接的魅力，知识点我都理解，但是都很零散和片面。","like_count":0},{"had_liked":false,"id":126404,"user_name":"renwotao","can_delete":false,"product_type":"c1","uid":1042503,"ip_address":"","ucode":"8054CA7EC0C8AB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/47/3e4a03ac.jpg","comment_is_top":false,"comment_ctime":1566382094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566382094","product_id":100025201,"comment_content":"很受启发","like_count":0},{"had_liked":false,"id":125211,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1200589,"ip_address":"","ucode":"CF98ACFB8BFD6F","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/cd/d6fe851f.jpg","comment_is_top":false,"comment_ctime":1566120056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566120056","product_id":100025201,"comment_content":"很深刻的洞见，大师级的程序员！","like_count":0},{"had_liked":false,"id":115337,"user_name":"VIC","can_delete":false,"product_type":"c1","uid":1114064,"ip_address":"","ucode":"3B3E6D344488B2","user_header":"https://static001.geekbang.org/account/avatar/00/10/ff/d0/402be1e9.jpg","comment_is_top":false,"comment_ctime":1563537115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563537115","product_id":100025201,"comment_content":"继承有啥问题","like_count":0},{"had_liked":false,"id":112040,"user_name":"老男孩","can_delete":false,"product_type":"c1","uid":1134514,"ip_address":"","ucode":"CEC6D47412F620","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/b2/1e8b5616.jpg","comment_is_top":false,"comment_ctime":1562658567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562658567","product_id":100025201,"comment_content":"说实话，我在过往的设计开发过程中很少用到继承的方式来复用代码，更多是组合的方式。为此我一直觉得自己水平太菜了。今天看到继承是过度设计，我的内心一下就释怀了。继承的方式到底是不是过度设计也要分人分情况。老师也说过了，软件其实也是人类文明的遗产。那么，我遇到的很多情况是，在设计的时候是为了技术而技术。过度设计至少让后面的人在理解代码的时候感到茫然。","like_count":0},{"had_liked":false,"id":104873,"user_name":"Geek__2099","can_delete":false,"product_type":"c1","uid":1457784,"ip_address":"","ucode":"01444B60F18A66","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ep8unibCib9rdHib0D6Rf6TjecPQu1yic0G9sjzriczlTcwGHP6DaxtEmHyN7pCrD9zV7OSegyf7EUBvaA/132","comment_is_top":false,"comment_ctime":1560861275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560861275","product_id":100025201,"comment_content":"非常感谢。继承和虚函数，容易乱了辈份。比如桥接模式中的借子还魂。<br>接口的初衷应只是能力的外部扩展，实现应是唯一的手段。继承的初衷是想省力的创造新物，静态的复制增加了层次感，但时间维度的引入同时带来了混乱。纯粹的造新物只有组合才是唯一的选择。组合本质上是高层的框架，组件的动态可同步也反映到组合体中。组合既可是静态的框架，也可认为是动态的组织。此时，时间导致的混合被彻底消除。<br>面向接口理念中蕴含着面向连接的趋势。连接的本意也许是希望消除自我，融入整体。个体通过能力证明自我存在的意义，但价值必须通过连接才能得到体现。从这个意义上说，面向连接是面向组合的必经之路。","like_count":0},{"had_liked":false,"id":103616,"user_name":"虫大侠","can_delete":false,"product_type":"c1","uid":1496150,"ip_address":"","ucode":"C4D52D077A4222","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/THibHz67lwAAo3LPoyVATEFIVaCXzM9EP3PrRNSOlxBGOudQBeaMwBUric4ibAicluxHtpWw7YibFUTyIUuibViaFicluQ/132","comment_is_top":false,"comment_ctime":1560477653,"is_pvip":false,"replies":[{"id":"37495","content":"erlang 组合能力体现在哪几个特性？","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1560480669,"ip_address":"","comment_id":103616,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560477653","product_id":100025201,"comment_content":"敢情是对erlang 有什么误解, 我认为erlang也是一门可以任意组合的语言, 按照这样的分类, 也可以叫做面向连接的语言","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453941,"discussion_content":"erlang 组合能力体现在哪几个特性？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560480669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100236,"user_name":"谭鹏","can_delete":false,"product_type":"c1","uid":1142009,"ip_address":"","ucode":"4A8120C4AA6F2F","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/f9/af80b4da.jpg","comment_is_top":false,"comment_ctime":1559490722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559490722","product_id":100025201,"comment_content":"移动时代 弱化了浏览器的能力","like_count":0},{"had_liked":false,"id":92956,"user_name":"东次哒呲","can_delete":false,"product_type":"c1","uid":1500925,"ip_address":"","ucode":"19B6506C9E86AE","user_header":"https://static001.geekbang.org/account/avatar/00/16/e6/fd/8ab5cbeb.jpg","comment_is_top":false,"comment_ctime":1557368260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557368260","product_id":100025201,"comment_content":"如果我们把掌握编程语言看做是软件工程师的专业技能，其实又低估了编程语言带来的革命性变化。<br><br>我们把一门语言看做技能，那语言的范围就只有翻译工作。<br><br>可是需要语言可以唱歌，可以做文章，有沟通的地方就有语言。<br>","like_count":0},{"had_liked":false,"id":92156,"user_name":"Y","can_delete":false,"product_type":"c1","uid":1216783,"ip_address":"","ucode":"D824304AB65AF9","user_header":"https://static001.geekbang.org/account/avatar/00/12/91/0f/f10408d9.jpg","comment_is_top":false,"comment_ctime":1557193055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557193055","product_id":100025201,"comment_content":"苦逼的弄懂python 后台要怎么写知识架构以后，现在担心技能太单一容易被炒，又在苦逼学go","like_count":0},{"had_liked":false,"id":92155,"user_name":"Y","can_delete":false,"product_type":"c1","uid":1216783,"ip_address":"","ucode":"D824304AB65AF9","user_header":"https://static001.geekbang.org/account/avatar/00/12/91/0f/f10408d9.jpg","comment_is_top":false,"comment_ctime":1557192979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557192979","product_id":100025201,"comment_content":"看完明白我为什么代码要怎样写，而不是因为大家约定的规范，更深入层次暂时还没体会到~<br>","like_count":0},{"had_liked":false,"id":91200,"user_name":"ciciywg","can_delete":false,"product_type":"c1","uid":1028602,"ip_address":"","ucode":"C8177E168B46DB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b1/fa/83034863.jpg","comment_is_top":false,"comment_ctime":1556906750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556906750","product_id":100025201,"comment_content":"一种新思潮的兴起过程很容易用力过猛。面向对象是一个很好的例子。面向对象是非常重要的进步，但是继承是一个过度设计……赞，不能同意更多","like_count":0},{"had_liked":false,"id":90947,"user_name":"黑洞","can_delete":false,"product_type":"c1","uid":1451364,"ip_address":"","ucode":"840A4330B1B2F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/64/d66ea739.jpg","comment_is_top":false,"comment_ctime":1556754673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556754673","product_id":100025201,"comment_content":"模块之间，或者说分系统之间用语言无关的纯接口来描述调用关系，当属IDL，用CORBA或者COM&#47;DCOM做过项目的应该比较了解。","like_count":0},{"had_liked":false,"id":90803,"user_name":"Geek_04e22a","can_delete":false,"product_type":"c1","uid":1184505,"ip_address":"","ucode":"B64FF12EA28BA6","user_header":"https://static001.geekbang.org/account/avatar/00/12/12/f9/7e6e3ac6.jpg","comment_is_top":false,"comment_ctime":1556666145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556666145","product_id":100025201,"comment_content":"文章内容比较深，知识点也比较多，读了几遍才慢慢地理清作者的思路，作者表达了软件编程方式，以及一些编程框架的知识，让人更容易从架构方面去把握一些知识。","like_count":0},{"had_liked":false,"id":90663,"user_name":"辉","can_delete":false,"product_type":"c1","uid":1501682,"ip_address":"","ucode":"704D414FCB3B3F","user_header":"https://static001.geekbang.org/account/avatar/00/16/e9/f2/228b3a6f.jpg","comment_is_top":false,"comment_ctime":1556604002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556604002","product_id":100025201,"comment_content":"个人觉得Java的继承特性让在阅读别人代码带来了很多烦恼。","like_count":0},{"had_liked":false,"id":90432,"user_name":"苟范儿","can_delete":false,"product_type":"c1","uid":1364883,"ip_address":"","ucode":"B06B86765512FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/93/bef5a186.jpg","comment_is_top":false,"comment_ctime":1556519290,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556519290","product_id":100025201,"comment_content":"老师的课程信息量特别足","like_count":0},{"had_liked":false,"id":90156,"user_name":"郭俊杰","can_delete":false,"product_type":"c1","uid":1082785,"ip_address":"","ucode":"D328E5738A4413","user_header":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","comment_is_top":false,"comment_ctime":1556433964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556433964","product_id":100025201,"comment_content":"很受益，3q","like_count":0},{"had_liked":false,"id":90113,"user_name":"猫少","can_delete":false,"product_type":"c1","uid":1504934,"ip_address":"","ucode":"84A96E797EEF7E","user_header":"https://static001.geekbang.org/account/avatar/00/16/f6/a6/19ff9596.jpg","comment_is_top":false,"comment_ctime":1556417332,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556417332","product_id":100025201,"comment_content":"其实事事无绝对，有利必有弊，反之亦然，全看使用者如何用。继承在限制它使用规模的前提下（例如c#的seal关键字），如果只用来隔离业务基类与框架类，形成一道界限，有助于在框架之上规划一套稳定的逻辑体系，对子类方法的增加也能带来便利，就能用来断绝后续类的继承，从而发挥继承的益处，避其短处，有所扬弃","like_count":0},{"had_liked":false,"id":90011,"user_name":"风再起时","can_delete":false,"product_type":"c1","uid":1438993,"ip_address":"","ucode":"047855F78D3206","user_header":"https://static001.geekbang.org/account/avatar/00/15/f5/11/ab9642ab.jpg","comment_is_top":false,"comment_ctime":1556366796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556366796","product_id":100025201,"comment_content":"AOP (Aspect-Oriented Programming) 算不算是一种编程范式？","like_count":0},{"had_liked":false,"id":89979,"user_name":"刘照云|卡哇微社区","can_delete":false,"product_type":"c1","uid":1494683,"ip_address":"","ucode":"9495EA31EE0203","user_header":"https://static001.geekbang.org/account/avatar/00/16/ce/9b/9a83b439.jpg","comment_is_top":false,"comment_ctime":1556355598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556355598","product_id":100025201,"comment_content":"Go语言大发好 o(￣▽￣)d","like_count":0},{"had_liked":false,"id":89899,"user_name":"lckfa李钊","can_delete":false,"product_type":"c1","uid":1356899,"ip_address":"","ucode":"AD13D205104AA6","user_header":"https://static001.geekbang.org/account/avatar/00/14/b4/63/84960032.jpg","comment_is_top":false,"comment_ctime":1556324690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556324690","product_id":100025201,"comment_content":"每一种编程语言代表的其实都是一种思维方式,C++的设计初衷其实也是为了更好的实践面对对象思维,但是在当时的历史背景下,它不得不兼容C,现在演变成了巨无霸也无可厚非.而Go语言的出现是基于互联网和硬件的发展.新的编程语言被设计地越来越简单,这与时代的发展是分不开的.如许老师所言,编程语言是活的书籍,它将记录人类在信息世界的发展.C++自身也是在进步的,但是远远达不到进化的程度. 如文中所说的,每一种语言都有生命周期,编程语言是作为一个整体在进化的,进化的驱动就是人们在生产实践中的反思和总结,进化的影响就是,旧语言在不断消亡,新语言其实也在不断诞生.最后我的结论是,编程语言的进化其实是思维的进化,不能总是跟着语言的花花架子跑.","like_count":0},{"had_liked":false,"id":89716,"user_name":"陈","can_delete":false,"product_type":"c1","uid":1006448,"ip_address":"","ucode":"A8E6AFF6E5775D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5b/70/6411282d.jpg","comment_is_top":false,"comment_ctime":1556248572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556248572","product_id":100025201,"comment_content":"最近在学习规则引擎，如何把业务从技术层面剥离，成为规格描述。","like_count":0},{"had_liked":false,"id":89707,"user_name":"fenghuo","can_delete":false,"product_type":"c1","uid":1107514,"ip_address":"","ucode":"88A9F5BE0BBAA5","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/3a/5e8be862.jpg","comment_is_top":false,"comment_ctime":1556247234,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1556247234","product_id":100025201,"comment_content":"今天又涨知识了","like_count":0},{"had_liked":false,"id":89666,"user_name":"朱成亮","can_delete":false,"product_type":"c1","uid":1008920,"ip_address":"","ucode":"669B049357B3FA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJqWuvuicHD7RVlEDJamWNmwVdkjeH4pLxPXoicwqbnpOibI1MFFz9SIVJmQeKSZQRP9np1NUV3wpmnA/132","comment_is_top":false,"comment_ctime":1556241582,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1556241582","product_id":100025201,"comment_content":"现在的小朋友又多了一门必修语言，母语、英语和编程语言。","like_count":0},{"had_liked":false,"id":89654,"user_name":"Haitao Wang","can_delete":false,"product_type":"c1","uid":1229791,"ip_address":"","ucode":"0DD2AF4A21327B","user_header":"https://static001.geekbang.org/account/avatar/00/12/c3/df/94ebd236.jpg","comment_is_top":false,"comment_ctime":1556240637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556240637","product_id":100025201,"comment_content":"看来有必要学习一下go语言了，感谢老师的启蒙","like_count":0},{"had_liked":false,"id":89641,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1556239528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556239528","product_id":100025201,"comment_content":"从汇编到过程语言再到面向对象，再到老师说的面向连接，语言本身的约束越来越多了，抽象越来越高层了，让大家更容易写出正确的规范的代码，函数式语言让人有点别扭，scala小红书看的云里雾里的还","like_count":0},{"had_liked":false,"id":89631,"user_name":"谭伟","can_delete":false,"product_type":"c1","uid":1311032,"ip_address":"","ucode":"AEC724819A2773","user_header":"https://static001.geekbang.org/account/avatar/00/14/01/38/104b96a3.jpg","comment_is_top":false,"comment_ctime":1556238362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556238362","product_id":100025201,"comment_content":"有种醍醐灌顶的感觉，天天守着老师更新。","like_count":0},{"had_liked":false,"id":89623,"user_name":"糊李糊涂","can_delete":false,"product_type":"c1","uid":1197625,"ip_address":"","ucode":"E0F6064CBA32B1","user_header":"https://static001.geekbang.org/account/avatar/00/12/46/39/e545c885.jpg","comment_is_top":false,"comment_ctime":1556237948,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556237948","product_id":100025201,"comment_content":"跟进，重复，实践！","like_count":0},{"had_liked":false,"id":89600,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1556234056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556234056","product_id":100025201,"comment_content":"通俗易懂","like_count":0}]}