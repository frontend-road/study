{"id":105083,"title":"25 | 答疑（二）：GIL与多线程是什么关系呢？","content":"<p>你好，我是景霄。</p><p>不知不觉中，我们又一起完成了第二大章进阶篇的学习。我非常高兴看到很多同学一直在坚持积极地学习，并且留下了很多高质量的留言，值得我们互相思考交流。也有一些同学反复推敲，指出了文章中一些表达不严谨或是不当的地方，我也表示十分感谢。</p><p>大部分留言，我都在相对应的文章中回复过了。而一些手机上不方便回复，或是很有价值很典型的问题，我专门摘录了出来，作为今天的答疑内容，集中回复。</p><h2>问题一：列表self append无限嵌套的原理</h2><p><img src=\"https://static001.geekbang.org/resource/image/9d/a0/9d6c8c7a5adc13e9119d08dc3f1052a0.png?wh=1534*950\" alt=\"\"></p><p>先来回答第一个问题，两个同学都问到了，下面这段代码中的x，为什么是无限嵌套的列表？</p><pre><code>x = [1]\nx.append(x)\nx\n[1, [...]]\n</code></pre><p>我们可以将上述操作画一个图，便于你更直观地理解：</p><p><img src=\"https://static001.geekbang.org/resource/image/00/5f/001a607f3f29f68975be3e706711325f.png?wh=764*298\" alt=\"\"></p><p>这里，x指向一个列表，列表的第一个元素为1；执行了append操作后，第二个元素又反过来指向x，即指向了x所指向的列表，因此形成了一个无限嵌套的循环：[1, [1, [1, [1, …]]]]。</p><p>不过，虽然x是无限嵌套的列表，但x.append(x)的操作，并不会递归遍历其中的每一个元素。它只是扩充了原列表的第二个元素，并将其指向x，因此不会出现stack overflow的问题，自然不会报错。</p><p>至于第二点，为什么len(x)返回的是2？我们还是来看x，虽然它是无限嵌套的列表，但x的top level只有2个元素组成，第一个元素为1，第二个元素为指向自身的列表，因此len(x)返回2。</p><!-- [[[read_end]]] --><h2>问题二：装饰器的宏观理解</h2><p><img src=\"https://static001.geekbang.org/resource/image/17/6f/17fcf8a9ef8685025fb5f792bc26116f.png?wh=1498*384\" alt=\"\"></p><p>再来看第二个问题，胡峣同学对装饰器的疑问。事实上，装饰器的作用与意义，在于其可以通过自定义的函数或类，在不改变原函数的基础上，改变原函数的一些功能。</p><pre><code>Decorators is to modify the behavior of the function through a wrapper so we don't have to actually modify the function.\n</code></pre><p>装饰器将额外增加的功能，封装在自己的装饰器函数或类中；如果你想要调用它，只需要在原函数的顶部，加上@decorator即可。显然，这样做可以让你的代码得到高度的抽象、分离与简化。</p><p>光说概念可能还是有点抽象，我们可以想象下面这样一个场景，从真实例子来感受装饰器的魅力。在一些社交网站的后台，有无数的操作在调用之前，都需要先检查用户是否登录，比如在一些帖子里发表评论、发表状态等等。</p><p>如果你不知道装饰器，用常规的方法来编程，写出来的代码大概是下面这样的：</p><pre><code># 发表评论\ndef post_comment(request, ...):\n    if not authenticate(request):\n        raise Exception('U must log in first')\n    ...\n    \n# 发表状态\ndef post_moment(request, ...):\n    if not authenticate(request):\n        raise Exception('U must log in first')\n    ...\n</code></pre><p>显然，这样重复调用认证函数authenticate()的步骤，就显得非常冗余了。更好的解决办法，就是将认证函数authenticate()单独分离出来，写成一个装饰器，就像我们下面这样的写法。这样一来，代码便得到了高度的优化：</p><pre><code># 发表评论\n@authenticate\ndef post_comment(request, ...):\n\n# 发表状态\n@authenticate\ndef post_moment(request, ...):\n</code></pre><p>不过也要注意，很多情况下，装饰器并不是唯一的方法。而我这里强调的，主要是使用装饰器带来的好处：</p><ul>\n<li>代码更加简洁；</li>\n<li>逻辑更加清晰；</li>\n<li>程序的层次化、分离化更加明显。</li>\n</ul><p>而这也是我们应该遵循和优先选择的开发模式。</p><h2>问题三：GIL与多线程的关系</h2><p><img src=\"https://static001.geekbang.org/resource/image/34/f1/3492e32a3396872095242be23db19ef1.png?wh=1456*338\" alt=\"\"></p><p>第三个问题，new同学疑惑的是，GIL只支持单线程，而Python支持多线程，这两者之间究竟是什么关系呢？</p><p>其实，GIL的存在与Python支持多线程并不矛盾。前面我们讲过，GIL是指同一时刻，程序只能有一个线程运行；而Python中的多线程，是指多个线程交替执行，造成一个“伪并行”的结果，但是具体到某一时刻，仍然只有1个线程在运行，并不是真正的多线程并行。这个机制，我画了下面这张图来表示：</p><p><img src=\"https://static001.geekbang.org/resource/image/e0/7b/e09b09170e0d2990d2e7f4e6a0292d7b.png?wh=1648*528\" alt=\"\"></p><p>举个例子来理解。比如，我用10个线程来爬取50个网站的内容。线程1在爬取第1个网站时，被I/O block住了，处于等待状态；这时，GIL就会释放，而线程2就会开始执行，去爬取第2个网站，依次类推。等到线程1的I/O操作完成时，主程序便又会切回线程1，让其完成剩下的操作。这样一来，从用户角度看到的，便是我们所说的多线程。</p><h2>问题四：多进程与多线程的应用场景</h2><p><img src=\"https://static001.geekbang.org/resource/image/a8/12/a853c99985472bfabc59d76839df4d12.png?wh=1142*214\" alt=\"\"></p><p>第四个问题，这个在文章中多次提到，不过，我还是想在这里再次强调一下。</p><p>如果你想对CPU密集型任务加速，使用多线程是无效的，请使用多进程。这里所谓的CPU密集型任务，是指会消耗大量CPU资源的任务，比如求1到100000000的乘积，或者是把一段很长的文字编码后又解码等等。</p><p>使用多线程之所以无效，原因正是我们前面刚讲过的，Python多线程的本质是多个线程互相切换，但同一时刻仍然只允许一个线程运行。因此，你使用多线程，和使用一个主线程，本质上来说并没有什么差别；反而在很多情况下，因为线程切换带来额外损耗，还会降低程序的效率。</p><p>而如果使用多进程，就可以允许多个进程之间in parallel地执行任务，所以能够有效提高程序的运行效率。</p><p>至于 I/O密集型任务，如果想要加速，请优先使用多线程或Asyncio。当然，使用多进程也可以达到目的，但是完全没有这个必要。因为对I/O密集型任务来说，大多数时间都浪费在了I/O等待上。因此，在一个线程/任务等待I/O时，我们只需要切换线程/任务去执行其他  I/O操作就可以了。</p><p>不过，如果I/O操作非常多、非常heavy，需要建立的连接也比较多时，我们一般会选择Asyncio。因为Asyncio的任务切换更加轻量化，并且它能启动的任务数也远比多线程启动的线程数要多。当然，如果I/O的操作不是那么的heavy，那么使用多线程也就足够了。</p><p>今天主要回答这几个问题，同时也欢迎你继续在留言区写下疑问和感想，我会持续不断地解答。希望每一次的留言和答疑，都能给你带来新的收获和价值。</p><p></p>","comments":[{"had_liked":false,"id":110508,"user_name":"TKbook","can_delete":false,"product_type":"c1","uid":1073829,"ip_address":"","ucode":"F6E0E99CC79059","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/a5/43aa0c27.jpg","comment_is_top":false,"comment_ctime":1562288706,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"78871700034","product_id":100026901,"comment_content":"看到这，终于搞明白多线程和协程的差异，感谢老师。","like_count":18,"discussions":[{"author":{"id":1717549,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/35/2d/a2bde67e.jpg","nickname":"SapereAude","note":"","ucode":"C5D61C535B7B10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":117483,"discussion_content":"昨夜西风凋碧树，独上高楼，望尽天涯路！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578120082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055819,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1c/4b/2e5df06f.jpg","nickname":"三件事","note":"","ucode":"BCC867C8961A24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341249,"discussion_content":"是啥区别？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610361417,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2456684,"avatar":"https://static001.geekbang.org/account/avatar/00/25/7c/6c/530fb292.jpg","nickname":".","note":"","ucode":"8196CC36F3CE87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1055819,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1c/4b/2e5df06f.jpg","nickname":"三件事","note":"","ucode":"BCC867C8961A24","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358983,"discussion_content":"哈哈，啥区别\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616080394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":341249,"ip_address":""},"score":358983,"extra":""}]}]},{"had_liked":false,"id":154060,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574370702,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"35934109070","product_id":100026901,"comment_content":"我个人认为，线程是CPU调度的最小单元，但是Python，因为GIL的存在让并行无法在线程这个粒度上运行，只好在更大粒度的进程上并行，进程切换的代价比线程大，Python并行的效率低于支持多线程同时在多核上跑的语言。协程是在一个线程内调度资源，无法实现并行，但对IO操作有效，也就是说可以并发利用CPU和IO资源，但是无法并行利用多个CPU资源。我的观点是否正确，请老师指正。","like_count":8,"discussions":[{"author":{"id":1187197,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","nickname":"somenzz","note":"","ucode":"EA59A170DF8910","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352189,"discussion_content":"关于 GIL，https://mp.weixin.qq.com/s/1YajqhcWoGGPQcOQiAATgA","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614644916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111871,"user_name":"new","can_delete":false,"product_type":"c1","uid":1096252,"ip_address":"","ucode":"DFFCDC2123CCAA","user_header":"https://static001.geekbang.org/account/avatar/00/10/ba/3c/2b642c9a.jpg","comment_is_top":false,"comment_ctime":1562633149,"is_pvip":false,"replies":[{"id":"40703","content":"平时多注重实践，积累，这些都是水到渠成","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1562641783,"ip_address":"","comment_id":111871,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23037469629","product_id":100026901,"comment_content":"目前项目不用python看过了似乎是懂了，过一段时间又啥都想不起来了，学习最好的方式是边学边用，可是没机会用。感觉老师确实底蕴深厚呀，好多东西对老师来说似乎很简单，比如图，有向图，有向边，我都不懂呀，感觉差的好多好多","like_count":5,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457479,"discussion_content":"平时多注重实践，积累，这些都是水到渠成","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562641783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156988,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1575009454,"is_pvip":false,"replies":[{"id":"60289","content":"说得很对","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1575062255,"ip_address":"","comment_id":156988,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14459911342","product_id":100026901,"comment_content":"第一次完全明白GIL，照顾方便性的同时在实现上偷了懒，但是本身设计就是解决特定问题，而不是解决所有问题的，但是随着受众的增多，是会发展变化，就行脚本语言中引入类型系统，编译型语言中引入类型推断，都是为了语言更好的发展。","like_count":3,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476294,"discussion_content":"说得很对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575062255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110476,"user_name":"yshan","can_delete":false,"product_type":"c1","uid":1136788,"ip_address":"","ucode":"A2ECDCDA52B8EE","user_header":"https://static001.geekbang.org/account/avatar/00/11/58/94/c8bc2b59.jpg","comment_is_top":false,"comment_ctime":1562286172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10152220764","product_id":100026901,"comment_content":"继续加油，虽然学习了后面，前面有些已经忘记了，还是需要多复习和实践","like_count":2},{"had_liked":false,"id":124383,"user_name":"晓冰","can_delete":false,"product_type":"c1","uid":1139231,"ip_address":"","ucode":"E0117E14E6BB8C","user_header":"https://static001.geekbang.org/account/avatar/00/11/62/1f/cd1cbdb1.jpg","comment_is_top":false,"comment_ctime":1565873223,"is_pvip":false,"replies":[{"id":"48140","content":"实际生产环境都是几万台机子一起运作","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1567123468,"ip_address":"","comment_id":124383,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5860840519","product_id":100026901,"comment_content":"老师你好，python同一时刻只能执行一个线程，那么多核cpu的场景下就没办法充分利用硬件资源，我们在生产环境中是怎么玩的呢？","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463148,"discussion_content":"实际生产环境都是几万台机子一起运作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567123468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087945,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","nickname":"冰激凌的眼泪","note":"","ucode":"5DCB974667E93A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6771,"discussion_content":"还有多进程可用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567091375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121594,"user_name":"杰洛特","can_delete":false,"product_type":"c1","uid":1098146,"ip_address":"","ucode":"46D0574654F8AC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqEacia8yO1dR5Tal9B7w8PzTRrViajlAvDph96OqcuBGe29icbXOibhibGmaBcO7BfpVia0Y8ksZwsuAYQ/132","comment_is_top":false,"comment_ctime":1565164397,"is_pvip":false,"replies":[{"id":"48148","content":"嗯嗯","user_name":"作者回复","user_name_real":"Jingxiao","uid":"1259521","ctime":1567123817,"ip_address":"","comment_id":121594,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860131693","product_id":100026901,"comment_content":"请教老师，对于网络请求等待较多的场景，是不是也参考I&#47;O密集型任务，采用多线程好一些？","like_count":1,"discussions":[{"author":{"id":1259521,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJJOlibibPFEWOib8ib7RtfAtxND5FUqCxxoeTuLAbBI9ic23xuwdXT4IyiaWq3Fic9RgEAYI0lBTbEp2rcg/132","nickname":"Jingxiao","note":"","ucode":"EB966BB87132F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461868,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567123817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110545,"user_name":"min","can_delete":false,"product_type":"c1","uid":1453715,"ip_address":"","ucode":"E15B775C06EFB0","user_header":"","comment_is_top":false,"comment_ctime":1562292014,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5857259310","product_id":100026901,"comment_content":"老师，前次讲的垃圾回收之分代回收，系统默认第二代和第三代阈值为10；对于一个系统来说，这么多全局变量，那么第二代和三代不就在一直很高频的回收？","like_count":1,"discussions":[{"author":{"id":1281550,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8e/0e/3fbc418d.jpg","nickname":"youaresherlock","note":"","ucode":"B4D379C6B50DD4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289523,"discussion_content":"你理解错阈值为10的意思了,\norder to decide when to run, the collector keeps track of the number object allocations and deallocations since the last collection. When the number of allocations minus the number of deallocations exceeds threshold0, collection starts. Initially only generation 0 is examined. If generation 0 has been examined more than threshold1 times since generation 1 has been examined, then generation 1 is examined as well. Similarly, threshold2 controls the number of collections of generation 1 before collecting generation 2.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594129660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350326,"user_name":"慕高迪","can_delete":false,"product_type":"c1","uid":1448126,"ip_address":"","ucode":"EB1CB5EA4E3A90","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/be/ad3127e0.jpg","comment_is_top":false,"comment_ctime":1656816125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1656816125","product_id":100026901,"comment_content":"在多核CPU的场景下，多线程可以充分利用CPU，实现并行；但是Python由于存在GIL，要求同一个时刻只能有一个线程运行，从而导致无法利用多核CPU的优势，也就是造成了“伪并行”；<br>GIL只存在于CPython解释器中。主要出于Python的内存管理和CPython大量使用线程不安全的C库的角度来考虑引入GIL","like_count":0},{"had_liked":false,"id":334713,"user_name":"吴昊","can_delete":false,"product_type":"c1","uid":2875912,"ip_address":"","ucode":"14A227630CD480","user_header":"","comment_is_top":false,"comment_ctime":1645087923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645087923","product_id":100026901,"comment_content":"对问题一中的x,为什么x==x，没有触发异常？或者说，__eq__()函数在遍历列表元素前还做了其他事情吧，这个事情是什么呢？","like_count":0},{"had_liked":false,"id":272611,"user_name":"ZY","can_delete":false,"product_type":"c1","uid":2161248,"ip_address":"","ucode":"18A839AFDA611E","user_header":"https://static001.geekbang.org/account/avatar/00/20/fa/60/a4366b9c.jpg","comment_is_top":false,"comment_ctime":1610173454,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610173454","product_id":100026901,"comment_content":"Python 中进程，线程，协程分别应用于哪些日常开发中的场景呢","like_count":0},{"had_liked":false,"id":237291,"user_name":"晓骏","can_delete":false,"product_type":"c1","uid":2081356,"ip_address":"","ucode":"6B92F08444FA7C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/c2/4c/01a6ef47.jpg","comment_is_top":false,"comment_ctime":1595770355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595770355","product_id":100026901,"comment_content":"老师，学习python量化是要立即订阅吗？我怎么按了立即订阅跳出来是Python核心技术与实战？和量化有关系吗？","like_count":0},{"had_liked":false,"id":135179,"user_name":"isaiahqian","can_delete":false,"product_type":"c1","uid":1192379,"ip_address":"","ucode":"EB52431C30D5FF","user_header":"https://static001.geekbang.org/account/avatar/00/12/31/bb/26fa71ce.jpg","comment_is_top":false,"comment_ctime":1569053746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569053746","product_id":100026901,"comment_content":"老师，想提供GPU预测的异步接口，这个属于IO密集还是CPU密集？主要计算是使用GPU，不在CPU，而且最后返回结果需要从GPU搬回CPU，应该属于IO操作。所以用多线程更合适？","like_count":0},{"had_liked":false,"id":114553,"user_name":"贺宇","can_delete":false,"product_type":"c1","uid":1445040,"ip_address":"","ucode":"55854825CC4AD2","user_header":"https://static001.geekbang.org/account/avatar/00/16/0c/b0/26c0e53f.jpg","comment_is_top":false,"comment_ctime":1563334447,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1563334447","product_id":100026901,"comment_content":"在单核单线程的计算机下，是不是任何语言的多线程都是分时间片来操作，也就是所说的伪并行。但是Python的多线程无论在几核计算机下都是单进程在跑，而别的语言的多线程会调用多进程。","like_count":0},{"had_liked":false,"id":112372,"user_name":"converse✪","can_delete":false,"product_type":"c1","uid":1433812,"ip_address":"","ucode":"0CC4C24A6458B6","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d4/bdd3ed27.jpg","comment_is_top":false,"comment_ctime":1562724707,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562724707","product_id":100026901,"comment_content":"之前不是说io slow的时候用asyncio，heavy的时候用多线程么？为啥这里说heavy用asyncio？","like_count":0},{"had_liked":false,"id":111538,"user_name":"一叶知秋","can_delete":false,"product_type":"c1","uid":1445189,"ip_address":"","ucode":"15A95FA86B7AE4","user_header":"https://static001.geekbang.org/account/avatar/00/16/0d/45/b88a1794.jpg","comment_is_top":false,"comment_ctime":1562565193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562565193","product_id":100026901,"comment_content":"感觉问题三非常类似单核cpu的时间片轮转算法","like_count":0},{"had_liked":false,"id":110606,"user_name":"somenzz","can_delete":false,"product_type":"c1","uid":1187197,"ip_address":"","ucode":"EA59A170DF8910","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/7d/368df396.jpg","comment_is_top":false,"comment_ctime":1562301014,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1562301014","product_id":100026901,"comment_content":"&gt;&gt;&gt; x = [1]<br>&gt;&gt;&gt; y = [1]<br>&gt;&gt;&gt; x.append(x)<br>&gt;&gt;&gt; x == x<br>True<br>&gt;&gt;&gt; x == y<br>False<br>&gt;&gt;&gt; x<br>[1, [...]]<br>&gt;&gt;&gt; y<br>[1]<br><br>第一个同学所说的无限递归问题，我这试了下并未出现，Python 3.7.1","like_count":0,"discussions":[{"author":{"id":1113668,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/44/3e3040ac.jpg","nickname":"程序员人生","note":"","ucode":"C5C5073D89AAA2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1059,"discussion_content":"亲，第一个同学说的无限递归的问题是执行第15章，以下这段代码的结果：\nimport copy\nx = [1]\nx.append(x)\n\ny = copy.deepcopy(x)\n\n# 以下命令的输出是？\nx == y\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562305209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110510,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1562288745,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1562288745","product_id":100026901,"comment_content":"asyncio这是要代替requests的节奏？<br><br>","like_count":0,"discussions":[{"author":{"id":1524086,"avatar":"https://static001.geekbang.org/account/avatar/00/17/41/76/82291df6.jpg","nickname":"行动zhe","note":"","ucode":"47AFD23CFB8CA3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291759,"discussion_content":"这两个不是一个层次的东西,不要搞混","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594947931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1498145,"avatar":"https://static001.geekbang.org/account/avatar/00/16/dc/21/34c72e67.jpg","nickname":"cyz","note":"","ucode":"233B1FC28A45F1","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535885,"discussion_content":"requests不支持异步，可以用aiohttp+asyncio替换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638590670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1803215,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/83/cf/1f3b5b17.jpg","nickname":"Jaden~お張嘉楽","note":"","ucode":"FA2737D6A1D2C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373851,"discussion_content":"asyncio：异步，让线程最大化的使用\nrequests：网络请求．","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620894418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}