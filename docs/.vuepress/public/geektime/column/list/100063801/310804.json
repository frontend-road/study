{"id":310804,"title":"04 | 理解进程（3）：为什么我在容器中的进程被强制杀死了？","content":"<p>你好，我是程远。</p><p>今天我们来讲容器中init进程的最后一讲，为什么容器中的进程被强制杀死了。理解了这个问题，能够帮助你更好地管理进程，让容器中的进程可以graceful shutdown。</p><p>我先给你说说，为什么进程管理中做到这点很重要。在实际生产环境中，我们有不少应用在退出的时候需要做一些清理工作，比如清理一些远端的链接，或者是清除一些本地的临时数据。</p><p>这样的清理工作，可以尽可能避免远端或者本地的错误发生，比如减少丢包等问题的出现。而这些退出清理的工作，通常是在SIGTERM这个信号用户注册的handler里进行的。</p><p>但是，如果我们的进程收到了SIGKILL，那应用程序就没机会执行这些清理工作了。这就意味着，一旦进程不能graceful shutdown，就会增加应用的出错率。</p><p>所以接下来，我们来重现一下，进程在容器退出时都发生了什么。</p><h2>场景再现</h2><p>在容器平台上，你想要停止一个容器，无论是在Kubernetes中去删除一个pod，或者用Docker停止一个容器，最后都会用到Containerd这个服务。</p><p>而Containerd在停止容器的时候，就会向容器的init进程发送一个SIGTERM信号。</p><p>我们会发现，在init进程退出之后，容器内的其他进程也都立刻退出了。不过不同的是，init进程收到的是SIGTERM信号，而其他进程收到的是SIGKILL信号。</p><!-- [[[read_end]]] --><p>在理解进程的<a href=\"https://time.geekbang.org/column/article/309423\">第一讲</a>中，我们提到过SIGKILL信号是不能被捕获的（catch）的，也就是用户不能注册自己的handler，而SIGTERM信号却允许用户注册自己的handler，这样的话差别就很大了。</p><p>那么，我们就一起来看看当容器退出的时候，如何才能让容器中的进程都收到SIGTERM信号，而不是SIGKILL信号。</p><p>延续前面课程中处理问题的思路，我们同样可以运行一个简单的容器，来重现这个问题，用这里的<a href=\"https://github.com/chengyli/training/tree/master/init_proc/fwd_sig\">代码</a>执行一下 <code>make image</code> ，然后用Docker启动这个容器镜像。</p><pre><code class=\"language-shell\">docker run -d --name fwd_sig registry/fwd_sig:v1 /c-init-sig\n</code></pre><p>你会发现，在我们用 <code>docker stop</code> 停止这个容器的时候，如果用strace工具来监控，就能看到容器里的init进程和另外一个进程收到的信号情况。</p><p>在下面的例子里，进程号为15909的就是容器里的init进程，而进程号为15959的是容器里另外一个进程。</p><p>在命令输出中我们可以看到，<strong>init进程（15909）收到的是SIGTERM信号，而另外一个进程（15959）收到的果然是SIGKILL信号。</strong></p><pre><code class=\"language-shell\"># ps -ef | grep c-init-sig\nroot     15857 14391  0 06:23 pts/0    00:00:00 docker run -it registry/fwd_sig:v1 /c-init-sig\nroot     15909 15879  0 06:23 pts/0    00:00:00 /c-init-sig\nroot     15959 15909  0 06:23 pts/0    00:00:00 /c-init-sig\nroot     16046 14607  0 06:23 pts/3    00:00:00 grep --color=auto c-init-sig\n\n# strace -p 15909\nstrace: Process 15909 attached\nrestart_syscall(&lt;... resuming interrupted read ...&gt;) = ? ERESTART_RESTARTBLOCK (Interrupted by signal)\n--- SIGTERM {si_signo=SIGTERM, si_code=SI_USER, si_pid=0, si_uid=0} ---\nwrite(1, \"received SIGTERM\\n\", 17)      = 17\nexit_group(0)                           = ?\n+++ exited with 0 +++\n\n# strace -p 15959\nstrace: Process 15959 attached\nrestart_syscall(&lt;... resuming interrupted read ...&gt;) = ?\n+++ killed by SIGKILL +++\n</code></pre><h2>知识详解：信号的两个系统调用</h2><p>我们想要理解刚才的例子，就需要搞懂信号背后的两个系统调用，它们分别是kill()系统调用和signal()系统调用。</p><p>这里呢，我们可以结合前面讲过的信号来理解这两个系统调用。在容器init进程的第一讲里，我们介绍过信号的基本概念了，<strong>信号就是Linux进程收到的一个通知。</strong></p><p>等你学完如何使用这两个系统调用之后，就会更清楚Linux信号是怎么一回事，遇到容器里信号相关的问题，你就能更好地理清思路了。</p><p>我还会再给你举个使用函数的例子，帮助你进一步理解进程是如何实现graceful shutdown的。</p><p>进程对信号的处理其实就包括两个问题，<strong>一个是进程如何发送信号，另一个是进程收到信号后如何处理。</strong></p><p>我们在Linux中发送信号的系统调用是kill()，之前很多例子里面我们用的命令 <code>kill</code> ，它内部的实现就是调用了kill()这个函数。</p><p>下面是Linux Programmer’s Manual里对kill()函数的定义。</p><p>这个函数有两个参数，一个是 <code>sig</code>，代表需要发送哪个信号，比如sig的值是15的话，就是指发送SIGTERM；另一个参数是 <code>pid</code>，也就是指信号需要发送给哪个进程，比如值是1的话，就是指发送给进程号是1的进程。</p><pre><code>NAME\n       kill - send signal to a process\n\nSYNOPSIS\n       #include &lt;sys/types.h&gt;\n       #include &lt;signal.h&gt;\n\n       int kill(pid_t pid, int sig);\n</code></pre><p>我们知道了发送信号的系统调用之后，再来看另一个系统调用，也就是signal()系统调用这个函数，它可以给信号注册handler。</p><p>下面是signal()在Linux Programmer’s Manual里的定义，参数 <code>signum</code> 也就是信号的编号，例如数值15，就是信号SIGTERM；参数 <code>handler</code> 是一个函数指针参数，用来注册用户的信号handler。</p><pre><code>NAME\n       signal - ANSI C signal handling\n\nSYNOPSIS\n       #include &lt;signal.h&gt;\n       typedef void (*sighandler_t)(int);\n       sighandler_t signal(int signum, sighandler_t handler);\n</code></pre><p>在容器init进程的第一讲里，<strong>我们学过进程对每种信号的处理，包括三个选择：调用系统缺省行为、捕获、忽略。</strong>而这里的选择，其实就是程序中如何去调用signal()这个系统调用。</p><p>第一个选择就是缺省，如果我们在代码中对某个信号，比如SIGTERM信号，不做任何signal()相关的系统调用，那么在进程运行的时候，如果接收到信号SIGTERM，进程就会执行内核中SIGTERM信号的缺省代码。</p><p>对于SIGTERM这个信号来说，它的缺省行为就是进程退出（terminate）。</p><p>内核中对不同的信号有不同的缺省行为，一般会采用退出（terminate），暂停（stop），忽略（ignore）这三种行为中的一种。</p><p>那第二个选择捕获又是什么意思呢?</p><p>捕获指的就是我们在代码中为某个信号，调用signal()注册自己的handler。这样进程在运行的时候，一旦接收到信号，就不会再去执行内核中的缺省代码，而是会执行通过signal()注册的handler。</p><p>比如下面这段代码，我们为SIGTERM这个信号注册了一个handler，在handler里只是做了一个打印操作。</p><p>那么这个程序在运行的时候，如果收到SIGTERM信号，它就不会退出了，而是只在屏幕上显示出\"received SIGTERM\"。</p><pre><code class=\"language-shell\">void sig_handler(int signo)\n{\n  if (signo == SIGTERM) {\n          printf(\"received SIGTERM\\n\");\n  }\n}\n\nint main(int argc, char *argv[])\n\n{\n...\n  signal(SIGTERM, sig_handler);\n...\n}\n</code></pre><p>我们再来看看第三个选择，如果要让进程“忽略”一个信号，我们就要通过signal()这个系统调用，为这个信号注册一个特殊的handler，也就是 <code>SIG_IGN</code> 。</p><p>比如下面的这段代码，就是为SIGTERM这个信号注册<code>SIG_IGN</code>。</p><p>这样操作的效果，就是在程序运行的时候，如果收到SIGTERM信号，程序既不会退出，也不会在屏幕上输出log，而是什么反应也没有，就像完全没有收到这个信号一样。</p><pre><code class=\"language-shell\">int main(int argc, char *argv[])\n{\n...\n  signal(SIGTERM, SIG_IGN);\n...\n}\n</code></pre><p>好了，我们通过讲解signal()这个系统调用，帮助你回顾了信号处理的三个选择：缺省行为、捕获和忽略。</p><p>这里我还想要提醒你一点，<strong> SIGKILL和SIGSTOP信号是两个特权信号，它们不可以被捕获和忽略，这个特点也反映在signal()调用上。</strong></p><p>我们可以运行下面的<a href=\"https://github.com/chengyli/training/blob/main/init_proc/basic_sig/reg-sigkill.c\">这段代码</a>，如果我们用signal()为SIGKILL注册handler，那么它就会返回SIG_ERR，不允许我们做捕获操作。</p><pre><code class=\"language-shell\"># cat reg_sigkill.c\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;errno.h&gt;\n#include &lt;signal.h&gt;\n\ntypedef void (*sighandler_t)(int);\n\nvoid sig_handler(int signo)\n{\n            if (signo == SIGKILL) {\n                        printf(\"received SIGKILL\\n\");\n                        exit(0);\n            }\n}\n \nint main(int argc, char *argv[])\n{\n            sighandler_t h_ret;\n\n            h_ret = signal(SIGKILL, sig_handler);\n            if (h_ret == SIG_ERR) {\n                        perror(\"SIG_ERR\");\n            }\n            return 0;\n}\n\n# ./reg_sigkill\nSIG_ERR: Invalid argument\n</code></pre><p>最后，我用下面<a href=\"https://github.com/chengyli/training/blob/main/init_proc/basic_sig/basic-sig.c\">这段代码</a>来做个小结。</p><p>这段代码里，我们用signal()对SIGTERM这个信号做了忽略，捕获以及恢复它的缺省行为，并且每一次都用kill()系统调用向进程自己发送SIGTERM信号，这样做可以确认进程对SIGTERM信号的选择。</p><pre><code>#include &lt;stdio.h&gt;\n#include &lt;signal.h&gt;\n\ntypedef void (*sighandler_t)(int);\n\nvoid sig_handler(int signo)\n{\n        if (signo == SIGTERM) {\n                printf(&quot;received SIGTERM\\n\\n&quot;);\n                // Set SIGTERM handler to default\n                signal(SIGTERM, SIG_DFL);\n        }\n}\n\nint main(int argc, char *argv[])\n{\n        //Ignore SIGTERM, and send SIGTERM\n        // to process itself.\n\n        signal(SIGTERM, SIG_IGN);\n        printf(&quot;Ignore SIGTERM\\n\\n&quot;);\n        kill(0, SIGTERM);\n\n        //Catch SIGERM, and send SIGTERM\n        // to process itself.\n        signal(SIGTERM, sig_handler);\n        printf(&quot;Catch SIGTERM\\n&quot;);\n        kill(0, SIGTERM);\n\n \n        //Default SIGTERM. In sig_handler, it sets\n        //SIGTERM handler back to default one.\n        printf(&quot;Default SIGTERM\\n&quot;);\n        kill(0, SIGTERM);\n\n        return 0;\n}\n</code></pre><p>我们一起来总结一下刚才讲的两个系统调用：</p><p>先说说kill()这个系统调用，它其实很简单，输入两个参数：进程号和信号，就把特定的信号发送给指定的进程了。</p><p>再说说signal()这个调用，它决定了进程收到特定的信号如何来处理，SIG_DFL参数把对应信号恢复为缺省handler，也可以用自定义的函数作为handler，或者用SIG_IGN参数让进程忽略信号。</p><p>对于SIGKILL信号，如果调用signal()函数，为它注册自定义的handler，系统就会拒绝。</p><h2>解决问题</h2><p>我们在学习了kill()和signal()这个两个信号相关的系统调用之后，再回到这一讲最初的问题上，为什么在停止一个容器的时候，容器init进程收到的SIGTERM信号，而容器中其他进程却会收到SIGKILL信号呢？</p><p>当Linux进程收到SIGTERM信号并且使进程退出，这时Linux内核对处理进程退出的入口点就是do_exit()函数，do_exit()函数中会释放进程的相关资源，比如内存，文件句柄，信号量等等。</p><p>Linux内核对处理进程退出的入口点就是do_exit()函数，do_exit()函数中会释放进程的相关资源，比如内存，文件句柄，信号量等等。</p><p>在做完这些工作之后，它会调用一个exit_notify()函数，用来通知和这个进程相关的父子进程等。</p><p>对于容器来说，还要考虑Pid Namespace里的其他进程。这里调用的就是 zap_pid_ns_processes()这个函数，而在这个函数中，如果是处于退出状态的init进程，它会向Namespace中的其他进程都发送一个SIGKILL信号。</p><p>整个流程如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/c1/a7/c1e81208784d10ef370b9fd753d2c3a7.jpg?wh=3200*1800\" alt=\"\"></p><p>你还可以看一下，内核代码是这样的。</p><pre><code>    /*\n         * The last thread in the cgroup-init thread group is terminating.\n         * Find remaining pid_ts in the namespace, signal and wait for them\n         * to exit.\n         *\n         * Note:  This signals each threads in the namespace - even those that\n         *        belong to the same thread group, To avoid this, we would have\n         *        to walk the entire tasklist looking a processes in this\n         *        namespace, but that could be unnecessarily expensive if the\n         *        pid namespace has just a few processes. Or we need to\n         *        maintain a tasklist for each pid namespace.\n         *\n         */\n\n        rcu_read_lock();\n        read_lock(&amp;tasklist_lock);\n        nr = 2;\n        idr_for_each_entry_continue(&amp;pid_ns-&gt;idr, pid, nr) {\n                task = pid_task(pid, PIDTYPE_PID);\n                if (task &amp;&amp; !__fatal_signal_pending(task))\n                        group_send_sig_info(SIGKILL, SEND_SIG_PRIV, task, PIDTYPE_MAX);\n        }\n</code></pre><p>说到这里，我们也就明白为什么容器init进程收到的SIGTERM信号，而容器中其他进程却会收到SIGKILL信号了。</p><p>前面我讲过，SIGKILL是个特权信号（特权信号是Linux为kernel和超级用户去删除任意进程所保留的，不能被忽略也不能被捕获）。</p><p>所以进程收到这个信号后，就立刻退出了，没有机会调用一些释放资源的handler之后，再做退出动作。</p><p>而SIGTERM是可以被捕获的，用户是可以注册自己的handler的。因此，容器中的程序在stop container的时候，我们更希望进程收到SIGTERM信号而不是SIGKILL信号。</p><p>那在容器被停止的时候，我们该怎么做，才能让容器中的进程收到SIGTERM信号呢？</p><p>你可能已经想到了，就是让容器init进程来转发SIGTERM信号。的确是这样，比如Docker Container里使用的tini作为init进程，tini的代码中就会调用sigtimedwait()这个函数来查看自己收到的信号，然后调用kill() 把信号发给子进程。</p><p>我给你举个具体的例子说明，从下面的这段代码中，我们可以看到除了SIGCHLD这个信号外，tini会把其他所有的信号都转发给它的子进程。</p><pre><code class=\"language-shell\"> int wait_and_forward_signal(sigset_t const* const parent_sigset_ptr, pid_t const child_pid) {\n\n        siginfo_t sig;\n\n        if (sigtimedwait(parent_sigset_ptr, &amp;sig, &amp;ts) == -1) {\n                switch (errno) {\n…\n                }\n        } else {\n                /* There is a signal to handle here */\n                switch (sig.si_signo) {\n                        case SIGCHLD:\n                                /* Special-cased, as we don't forward SIGCHLD. Instead, we'll\n                                 * fallthrough to reaping processes.\n                                 */\n                                PRINT_DEBUG(\"Received SIGCHLD\");\n                                break;\n                        default:\n                                PRINT_DEBUG(\"Passing signal: '%s'\", strsignal(sig.si_signo));\n                                /* Forward anything else */\n                                if (kill(kill_process_group ? -child_pid : child_pid, sig.si_signo)) {\n                                        if (errno == ESRCH) {\n                                                PRINT_WARNING(\"Child was dead when forwarding signal\");\n                                        } else {\n                                                PRINT_FATAL(\"Unexpected error when forwarding signal: '%s'\", strerror(errno));\n\n                                                return 1;\n                                        }\n                                }\n                                break;\n                }\n        }\n        return 0;\n}\n</code></pre><p>那么我们在这里明确一下，怎么解决停止容器的时候，容器内应用程序被强制杀死的问题呢？</p><p><strong>解决的方法就是在容器的init进程中对收到的信号做个转发，发送到容器中的其他子进程，这样容器中的所有进程在停止时，都会收到SIGTERM，而不是SIGKILL信号了。</strong></p><h2>重点小结</h2><p>这一讲我们要解决的问题是让容器中的进程，在容器停止的时候，有机会graceful shutdown，而不是收到SIGKILL信号而被强制杀死。</p><p>首先我们通过对kill()和signal()这个两个系统调用的学习，进一步理解了进程是怎样处理Linux信号的，重点是信号在接收处理的三个选择：<strong>忽略，捕获和缺省行为</strong>。</p><p>通过代码例子，我们知道SIGTERM是可以被忽略和捕获的，但是SIGKILL是不可以被忽略和捕获的。</p><p>了解这一点以后，我们就找到了问题的解决方向，也就是我们需要在停止容器时，让容器中的应用收到SIGTERM，而不是SIGKILL。</p><p>具体怎么操作呢？我们可以在容器的init进程中对收到的信号做个转发，发送到容器中的其他子进程。这样一来，容器中的所有进程在停止容器时，都会收到SIGTERM，而不是SIGKILL信号了。</p><p>我认为，解决init进程信号的这类问题其实并不难。</p><p>我们只需要先梳理一下和这个问题相关的几个知识点，再写个小程序，让它跑在容器里，稍微做几个试验。然后，我们再看一下内核和Docker的源代码，就可以很快得出结论了。</p><h2>思考题</h2><p>请你回顾一下基本概念中最后的这段代码，你可以想一想，在不做编译运行的情况下，它的输出是什么？</p><pre><code>#include &lt;stdio.h&gt;\n#include &lt;signal.h&gt;\n\ntypedef void (*sighandler_t)(int);\n\nvoid sig_handler(int signo)\n{\n        if (signo == SIGTERM) {\n                printf(&quot;received SIGTERM\\n\\n&quot;);\n                // Set SIGTERM handler to default\n                signal(SIGTERM, SIG_DFL);\n        }\n}\n\nint main(int argc, char *argv[])\n{\n        //Ignore SIGTERM, and send SIGTERM\n        // to process itself.\n\n        signal(SIGTERM, SIG_IGN);\n        printf(&quot;Ignore SIGTERM\\n\\n&quot;);\n        kill(0, SIGTERM);\n\n        //Catch SIGERM, and send SIGTERM\n        // to process itself.\n        signal(SIGTERM, sig_handler);\n        printf(&quot;Catch SIGTERM\\n&quot;);\n        kill(0, SIGTERM);\n\n \n        //Default SIGTERM. In sig_handler, it sets\n        //SIGTERM handler back to default one.\n        printf(&quot;Default SIGTERM\\n&quot;);\n        kill(0, SIGTERM);\n\n        return 0;\n}\n</code></pre><p>欢迎留言和我分享你的想法和疑问。如果读完这篇文章有所收获，也欢迎你分享给自己的朋友，共同学习和进步。</p>","neighbors":{"left":{"article_title":"03｜理解进程（2）：为什么我的容器里有这么多僵尸进程？","id":310060},"right":{"article_title":"05｜容器CPU（1）：怎么限制容器的CPU使用？","id":311054}},"comments":[{"had_liked":false,"id":265046,"user_name":"胖胖虎","can_delete":false,"product_type":"c1","uid":1139121,"ip_address":"","ucode":"9CA8F99CC82944","user_header":"https://static001.geekbang.org/account/avatar/00/11/61/b1/1261c177.jpg","comment_is_top":false,"comment_ctime":1606744845,"is_pvip":false,"replies":[{"id":"96383","content":"@胖胖虎， 很好的总结！","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606834957,"ip_address":"","comment_id":265046,"utype":1}],"discussion_count":2,"race_medal":0,"score":"117570861837","product_id":100063801,"comment_content":"简单总结了下，子进程被kill杀死的原因是，父进程在退出时，执行do_exit中，由于是cgroup_init 组的进程，因此向所有的子进程发送了sigkill信号。而导致这个的原因是，一般情况下，容器起来的第一个进程都不是专业的init进程，没有考虑过这些细节问题。由于正常情况下，父进程被终结，信号不会传递到子进程，exit时也不会给子进程发终结命令。这会导致多进程容器在关闭时，无法被终止。为了保证容器能够被正常终结。设计者在do_exit中做文章，使用sigkill这个不可屏蔽信号，而是为了能够在没有任何前提条件的情况下，能够把容器中所有的进程关掉。而一个优雅的解决方法是，使用一个专业的init进程作为容器的第一个进程，来处理相关业务。实现容器的优雅关闭。当然，如果子进程也把SigTerm做了劫持，那也是有可能导致容器无法关闭。","like_count":28,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510779,"discussion_content":"@胖胖虎， 很好的总结！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606834957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2061524,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/74/d4/38d813f0.jpg","nickname":"Kerry","note":"","ucode":"92F809EC998FC6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390435,"discussion_content":"对于恶意劫持SIGTERM的子进程，init进程可以做个兜底机制。例如，转发SIGTERM一段时间后，如果子进程还是没有退出，就发SIGKILL强杀。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1629824197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264644,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1606556864,"is_pvip":false,"replies":[{"id":"96011","content":"@JianXu,<br>你说的情况是这样的，<br>胖容器的init进程其实是一个bash脚本run.sh, 由它来启动jvm的程序。<br>但是run.sh本身没有注册SIGTERM handler, 也不forward SIGTERM给子进程jvm。<br>当stop容器的时候，run.sh先收到一个SIGTERM, run.sh没有注册SIGTERM, 所以呢对SIGTERM没有反应，contaienrd过30秒，会发SIGKILL给run.sh, 这样run.sh退出do_exit()，在退出的时候同样给子进程jvm程序发送了SIGKILL而不是SIGTERM。其实呢，jvm的程序是注册了SIGTERM handler的，但是没有机会调用handler了。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606641369,"ip_address":"","comment_id":264644,"utype":1}],"discussion_count":5,"race_medal":0,"score":"57441131712","product_id":100063801,"comment_content":"CY ,  能帮忙解释一下我们公司生产环境在容器image patching 过程中应用程序受影响的事情吗。 <br><br>1.  我们的胖容器肯定是多进程的，那当容器收到kill 命令的时候，我们现在也是子容器都被SIGKill 吗？还是我们其实都是配置了Init 进程，而init 进程其实都像文中说的转发了 SIGTERM 命令？<br><br>2.  如果应用程序写的不够好，不相应SIGTERM 命令。所以我们才在一段时间容器还没有被杀死的情况下执行 Kill -9 吗？<br><br>3.   我们大部分的应用程序都是web 程序，使用标准JVM , 比如 Tomcat 加 OpenJDK , 不大明白为什么不能正常响应SIGTERM 做graceful shutdown 。 Kubernetes 标准操作，当我们做OS patching的时候都是换image 的，这时候当前POD 会被干掉，我们是那个POD 因为不能响应SIGTERM 而始终处于terminating 吗？","like_count":14,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510636,"discussion_content":"@JianXu,\n你说的情况是这样的，\n胖容器的init进程其实是一个bash脚本run.sh, 由它来启动jvm的程序。\n但是run.sh本身没有注册SIGTERM handler, 也不forward SIGTERM给子进程jvm。\n当stop容器的时候，run.sh先收到一个SIGTERM, run.sh没有注册SIGTERM, 所以呢对SIGTERM没有反应，contaienrd过30秒，会发SIGKILL给run.sh, 这样run.sh退出do_exit()，在退出的时候同样给子进程jvm程序发送了SIGKILL而不是SIGTERM。其实呢，jvm的程序是注册了SIGTERM handler的，但是没有机会调用handler了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606641369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404629,"discussion_content":"run.sh没有注册sigterm，为社么收到sigterm后没有反应？不应该走sig_dft流程吗？为什么啥都没做呢？疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634365069,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2253329,"avatar":"","nickname":"Geek_dc2071","note":"","ucode":"C41438B17E79D7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":552365,"discussion_content":"热门评论第二楼有答案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645432055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":404629,"ip_address":""},"score":552365,"extra":""},{"author":{"id":2659191,"avatar":"","nickname":"Geek_1a3949","note":"","ucode":"98113FDBBAAEBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":587820,"discussion_content":"我理解是这样的，从host向container的run.sh发送SIGTERM，由于run.sh是bash没有注册SIGTERM，导致被忽略，故没有反应","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663305327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":404629,"ip_address":"上海"},"score":587820,"extra":""}]},{"author":{"id":2333241,"avatar":"https://static001.geekbang.org/account/avatar/00/23/9a/39/a762e79d.jpg","nickname":"JZ","note":"","ucode":"406D8A32536044","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338507,"discussion_content":"老师，您好，这边没有看明白，我这边也遇到过pod处于terminating状态，sh启动的jvm子进程，在退出时jvm程序收到的是SIGKILL信号，为什么没有删除成功而会处于terminating状态，还是因为其他原因导致的呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609302218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263804,"user_name":"po","can_delete":false,"product_type":"c1","uid":1023905,"ip_address":"","ucode":"7DB36C278F34D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/a1/d75219ee.jpg","comment_is_top":false,"comment_ctime":1606270839,"is_pvip":true,"replies":[{"id":"95703","content":"@po,<br>对于第二个问题，我假设sleep进程在宿主机上的pid是2207， 你还是可以先查看&quot;cat &#47;proc&#47;2207&#47;status | grep SigCgt&quot;， 我的理解是SIGTERM handler应该还是没有注册，那么即使从宿主机上发送SIGTERM给这个容器里的1号进程，那么也是不能杀死的。<br><br>&quot;docker stop&quot;在停止容器的时候，先给容器里的1号进程发送SIGTERM, 如果不起作用，那么等待30秒后会发送SIGKILL。我想这个是你看到的现象了。<br><br>至于为什么即使在宿主机机上向容器1号进程发送SIGTERM，在1号进程没有注册handler的情况下，不能被杀死的问题 （思考题）， 原因是这样的：<br><br>开始要看内核里的那段代码，“ !(force &amp;&amp; sig_kernel_only(sig))”，<br>虽然由不同的namespace发送信号， 虽然force是1了，但是sig_kernel_only(sig)对于SIGTERM来说还是0， 这里是个&amp;&amp;, 那么 !(1 &amp;&amp; 0) = 1。<br><br>#define sig_kernel_only(sig)            siginmask(sig, SIG_KERNEL_ONLY_MASK)<br>#define SIG_KERNEL_ONLY_MASK (\\<br>        rt_sigmask(SIGKILL)   |  rt_sigmask(SIGSTOP)) <br><br>","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606284449,"ip_address":"","comment_id":263804,"utype":1}],"discussion_count":3,"race_medal":0,"score":"53145878391","product_id":100063801,"comment_content":"老师，我做了个测试，现象有点迷惑，我打开两个终端，用sleep进行测试，方法和现象如下：<br>1. 在第一个终端启动sleep，在另外一个终端通过命令去kill，能通过sigterm正常杀掉进程。<br># strace sleep 30000<br>execve(&quot;&#47;usr&#47;bin&#47;sleep&quot;, [&quot;sleep&quot;, &quot;30000&quot;], [&#47;* 25 vars *&#47;]) = 0<br>................................................................................................<br>--- SIGTERM {si_signo=SIGTERM, si_code=SI_USER, si_pid=1505, si_uid=0} ---<br>+++ killed by SIGTERM +++<br><br>2. 启动一个容器里面的命令是sleep 30000，用strace跟踪进程，我使用kill，杀不掉sleep进程，然后通过docker stop发现，先是发送sigterm信号，没有成功，最后被强制杀掉了：<br># strace -p 2207<br>strace: Process 2207 attached<br>restart_syscall(&lt;... resuming interrupted nanosleep ...&gt;) = ? ERESTART_RESTARTBLOCK (Interrupted by signal)<br>--- SIGTERM {si_signo=SIGTERM, si_code=SI_USER, si_pid=0, si_uid=0} ---<br>restart_syscall(&lt;... resuming interrupted restart_syscall ...&gt;<br>) = ? ERESTART_RESTARTBLOCK (Interrupted by signal)<br>--- SIGWINCH {si_signo=SIGWINCH, si_code=SI_USER, si_pid=0, si_uid=0} ---<br>restart_syscall(&lt;... resuming interrupted restart_syscall ...&gt;<br>) = ? ERESTART_RESTARTBLOCK (Interrupted by signal)<br>+++ killed by SIGKILL +++<br><br>我有点迷惑，老师能解释一下为什么在宿主机或者用docker不能用sigterm来杀死容器的进程吗？","like_count":13,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510313,"discussion_content":"@po,\n对于第二个问题，我假设sleep进程在宿主机上的pid是2207， 你还是可以先查看&amp;quot;cat /proc/2207/status | grep SigCgt&amp;quot;， 我的理解是SIGTERM handler应该还是没有注册，那么即使从宿主机上发送SIGTERM给这个容器里的1号进程，那么也是不能杀死的。\n\n&amp;quot;docker stop&amp;quot;在停止容器的时候，先给容器里的1号进程发送SIGTERM, 如果不起作用，那么等待30秒后会发送SIGKILL。我想这个是你看到的现象了。\n\n至于为什么即使在宿主机机上向容器1号进程发送SIGTERM，在1号进程没有注册handler的情况下，不能被杀死的问题 （思考题）， 原因是这样的：\n\n开始要看内核里的那段代码，“ !(force &amp;amp;&amp;amp; sig_kernel_only(sig))”，\n虽然由不同的namespace发送信号， 虽然force是1了，但是sig_kernel_only(sig)对于SIGTERM来说还是0， 这里是个&amp;amp;&amp;amp;, 那么 !(1 &amp;amp;&amp;amp; 0) = 1。\n\n#define sig_kernel_only(sig)            siginmask(sig, SIG_KERNEL_ONLY_MASK)\n#define SIG_KERNEL_ONLY_MASK (\\\n        rt_sigmask(SIGKILL)   |  rt_sigmask(SIGSTOP)) \n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606284449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2219455,"avatar":"https://static001.geekbang.org/account/avatar/00/21/dd/bf/4bbf490d.jpg","nickname":"Gale","note":"","ucode":"B49C4C29D18BB7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579700,"discussion_content":"老师，在第一讲的时候讲的是 kill -9 1 在容器中是不工作的，内核阻止了 1 号进程对 SIGKILL 特权信号的响应\n在这里 docker stop 30s 之后为什么 发送 SIGKILL 信号可以起作用了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657621378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1281389,"avatar":"https://static001.geekbang.org/account/avatar/00/13/8d/6d/8c0a487b.jpg","nickname":"册书一幕","note":"","ucode":"75FA281B772DF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559929,"discussion_content":"关于第二个问题，兄台理解了吗？希望指教一下，为何停止会出现两次信号发送，难道这是docker stop的实现吗，sigterm无法处理则使用sigkill。另外你的第一种测试和第二种看都是sleep，为何第一种能kill，第二种不行？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649062356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263774,"user_name":"宝仔","can_delete":false,"product_type":"c1","uid":1013493,"ip_address":"","ucode":"A0F17DFF99DB21","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/f5/e3f5bd8d.jpg","comment_is_top":false,"comment_ctime":1606265978,"is_pvip":true,"replies":[{"id":"95726","content":"是的！","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606319807,"ip_address":"","comment_id":263774,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35966004346","product_id":100063801,"comment_content":"老师，容器的最佳实践一般都是一个容器即一个进程，一般如果按照这种做法，就只需要在应用程序进程中对sigterm信号做捕获并处理就行了吧，无需转发吧","like_count":9,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510295,"discussion_content":"是的！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606319807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264640,"user_name":"JianXu","can_delete":false,"product_type":"c1","uid":1033219,"ip_address":"","ucode":"2A61BDBB573BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/03/f753fda7.jpg","comment_is_top":false,"comment_ctime":1606555698,"is_pvip":false,"replies":[{"id":"96010","content":"&gt; 1<br>是的, init进程就是容器里的第一个进程。容器里的第一个进程大部分情况应该是我们自己的进程，除非有容器用户有意识的去使用tini进程作为init进程。<br><br>&gt; 2<br>很好的问题。<br>init 进程自己退出，还是会调用do_exit()的。所以呢，为了保证子进程先收到转发的SIGTERM, 类似tini的做法是，自己在收到SIGTERM的时候不退出，转发SIGTERM给子进程，子进程收到SIGTERM退出之后会给父进程发送SIGCHILD， tini是收到SIGCHILD之后主动整个程序退出。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606640692,"ip_address":"","comment_id":264640,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31671326770","product_id":100063801,"comment_content":"老师，这里的逻辑我还没有理顺。<br><br>1. 你说的容器init 进程，是不是就是容器的第一个进程？还有是不是如果我使用docker , 容器的第一个进程一定不是我自己的进程，而是tini 进程？<br><br>2. 上文所SIGTerm 发送后，触发do exit 函数，SIGkill 其实是在内核往容器内的其他子进程发送的。那当我在init 进程配置了Sig term handler 截取信号转发sigterm 以后，do exit 函数还会被调用吗？如果不被调用，do exit 里其他的退出逻辑怎么被执行呢？如果被调用，怎么就不执行sigkill 了呢？","like_count":8,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510633,"discussion_content":"&amp;gt; 1\n是的, init进程就是容器里的第一个进程。容器里的第一个进程大部分情况应该是我们自己的进程，除非有容器用户有意识的去使用tini进程作为init进程。\n\n&amp;gt; 2\n很好的问题。\ninit 进程自己退出，还是会调用do_exit()的。所以呢，为了保证子进程先收到转发的SIGTERM, 类似tini的做法是，自己在收到SIGTERM的时候不退出，转发SIGTERM给子进程，子进程收到SIGTERM退出之后会给父进程发送SIGCHILD， tini是收到SIGCHILD之后主动整个程序退出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606640692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263812,"user_name":"po","can_delete":false,"product_type":"c1","uid":1023905,"ip_address":"","ucode":"7DB36C278F34D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/a1/d75219ee.jpg","comment_is_top":false,"comment_ctime":1606271833,"is_pvip":true,"replies":[{"id":"95724","content":"@po, <br>谢谢你这几天提的问题，看的出来，你做了很多的测试，也有很多的思考！我们可以一起来，先把你前面的问题逐个理清了。<br><br>你说的画图来捋一遍信号概念的，这个我会考虑的 (目前我需要先完成课程后面章节的内容 :-), 你也可以给我一些更详细的建议，可能可以和你问的具体问题想结合。<br><br>&gt; 之前我们一直都是应用程序作为PID1来运行的，好像也没啥问题<br><br>信号对容器中进程的影响的多少，也有多方面的原因，比如程序本身对错误的容忍度比较高， 容器建立删除的频率不高，那么也就看不出有什么影响。<br><br>如果你的程序的容器化程度较高，几乎是一个容器一个进程的程度，那么不需要考虑用tini来做改动。<br><br>我觉得容器里的init进程，应该是具备这些信号处理的能力：<br>1. 至少转发SIGTERM给容器里其他的关键子进程。<br>2. 能够接受到外部的SIGTERM信号而退出，（这里可以是通过注册SIGTERM handler, 也可以像tini一样先转发SIGTERM 给子进程，然后收到SIGCHILD后自己主动退出）<br>3. 具有回收zombie进程的能力。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606319118,"ip_address":"","comment_id":263812,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27376075609","product_id":100063801,"comment_content":"老师，我能提个建议吗？这几天学习容器进程和信号相关的知识点，有点乱，自己理出来也好像怪怪的，你能不能画个图，把进程的信号相关的给我们捋一遍呢？还有我们程序代码该如何更好的设计能给一点建议吗？感觉用tini这种方式改动有点大，之前我们一直都是应用程序作为PID1来运行的，好像也没啥问题。谢谢","like_count":7,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510316,"discussion_content":"@po, \n谢谢你这几天提的问题，看的出来，你做了很多的测试，也有很多的思考！我们可以一起来，先把你前面的问题逐个理清了。\n\n你说的画图来捋一遍信号概念的，这个我会考虑的 (目前我需要先完成课程后面章节的内容 :-), 你也可以给我一些更详细的建议，可能可以和你问的具体问题想结合。\n\n&amp;gt; 之前我们一直都是应用程序作为PID1来运行的，好像也没啥问题\n\n信号对容器中进程的影响的多少，也有多方面的原因，比如程序本身对错误的容忍度比较高， 容器建立删除的频率不高，那么也就看不出有什么影响。\n\n如果你的程序的容器化程度较高，几乎是一个容器一个进程的程度，那么不需要考虑用tini来做改动。\n\n我觉得容器里的init进程，应该是具备这些信号处理的能力：\n1. 至少转发SIGTERM给容器里其他的关键子进程。\n2. 能够接受到外部的SIGTERM信号而退出，（这里可以是通过注册SIGTERM handler, 也可以像tini一样先转发SIGTERM 给子进程，然后收到SIGCHILD后自己主动退出）\n3. 具有回收zombie进程的能力。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606319118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265229,"user_name":"Alery","can_delete":false,"product_type":"c1","uid":1156557,"ip_address":"","ucode":"08F3F49181E67B","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/cd/3aff5d57.jpg","comment_is_top":false,"comment_ctime":1606818705,"is_pvip":false,"replies":[{"id":"96377","content":"我们可以从tini转发信号的代码看一下。如果 “kill_process_group” 没有设置， 为0时，这也是tini缺省的配置，那么SIGTERM只会转发给子进程，而子子进程就不会收到转发的SIGTERM。当子进程退出的时候，子子进程就会收到SIGKILL。<br><br>而如果kill_process_group &gt; 0的时候，同时子进程与子子进程在同一个process group的时候 (缺省fork出来的子进程会和父进程在同一个process group), 那么子子进程就会收到SIGTERM<br><br><br><br><br>if (kill(kill_process_group ? -child_pid : child_pid, sig.si_signo))","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606831086,"ip_address":"","comment_id":265229,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23081655185","product_id":100063801,"comment_content":"老师，请教一个问题，tini 会把其他所有的信号都转发给它的子进程，假如我的子进程又创建了子进程(也就是tini的孙子进程)，tini会把信号转发给孙子进程吗？","like_count":5,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510844,"discussion_content":"我们可以从tini转发信号的代码看一下。如果 “kill_process_group” 没有设置， 为0时，这也是tini缺省的配置，那么SIGTERM只会转发给子进程，而子子进程就不会收到转发的SIGTERM。当子进程退出的时候，子子进程就会收到SIGKILL。\n\n而如果kill_process_group &amp;gt; 0的时候，同时子进程与子子进程在同一个process group的时候 (缺省fork出来的子进程会和父进程在同一个process group), 那么子子进程就会收到SIGTERM\n\n\n\n\nif (kill(kill_process_group ? -child_pid : child_pid, sig.si_signo))","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606831086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544692,"discussion_content":"当子进程退出的时候，子子进程就会收到SIGKILL。  ------------针对这一段，是linux process管理通用逻辑吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641642470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2608728,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ce/58/71ed845f.jpg","nickname":"Dexter","note":"","ucode":"909CABC4AC4AC9","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":546821,"discussion_content":"用老师的fwg_sig 镜像做了一下tini 启动的实验，确实是子子进程只能收到SIGKILL信号。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642432491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":544692,"ip_address":""},"score":546821,"extra":""}]}]},{"had_liked":false,"id":270278,"user_name":"Tendrun","can_delete":false,"product_type":"c1","uid":1225728,"ip_address":"","ucode":"86AB3C3A7D8381","user_header":"https://static001.geekbang.org/account/avatar/00/12/b4/00/bfc101ee.jpg","comment_is_top":false,"comment_ctime":1609048475,"is_pvip":true,"replies":[{"id":"98238","content":"@Tendrun<br>好问题！<br>不过只有SIGKILL才可以强制杀进程。如果namespace中有进程忽略了SIGTERM，那么就会有进程残留了。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1609253376,"ip_address":"","comment_id":270278,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18788917659","product_id":100063801,"comment_content":"不太明白zap_pid_ns_processes()这个函数为啥是发送SIGKILL信号，不能设计成发送SIGTERM么，如果是term信号，岂不是就没有容器中子进程中收到sigkill信号的问题了么","like_count":4,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512576,"discussion_content":"@Tendrun\n好问题！\n不过只有SIGKILL才可以强制杀进程。如果namespace中有进程忽略了SIGTERM，那么就会有进程残留了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609253376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1129668,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/c4/7c2bf312.jpg","nickname":"草根","note":"","ucode":"7C97CB09A4D8F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545699,"discussion_content":"也就是sigkill更保险一些？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642041728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265232,"user_name":"Alery","can_delete":false,"product_type":"c1","uid":1156557,"ip_address":"","ucode":"08F3F49181E67B","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/cd/3aff5d57.jpg","comment_is_top":false,"comment_ctime":1606819488,"is_pvip":false,"replies":[{"id":"96510","content":"很好的问题！<br>因为在tini里调用的sigtimedwait()系统调用，直接把发送给tini的信号先截了下来，这时候tini有没有SIGTERM的handler就没有关系了。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606920185,"ip_address":"","comment_id":265232,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18786688672","product_id":100063801,"comment_content":"老师，我有个疑问哈，tini没有注册SIGTERM，按照前面将的，内核是不会把这个信号发送给tini进程的，为啥它又能接收所有的信号(除了SIGHILD)并转发给子进程呢？我对这块的理解的不是很清晰，望指教。","like_count":5,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510845,"discussion_content":"很好的问题！\n因为在tini里调用的sigtimedwait()系统调用，直接把发送给tini的信号先截了下来，这时候tini有没有SIGTERM的handler就没有关系了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606920185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263456,"user_name":"上邪忘川","can_delete":false,"product_type":"c1","uid":1276588,"ip_address":"","ucode":"1C4459917B038D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIz9dKN1C8rKQoaVtmEGdzObhlia6zAfTsPYOm4ibz39VjTbu7Aia1LyeedHR26b6nxUtcCufpichcYgw/132","comment_is_top":false,"comment_ctime":1606138361,"is_pvip":false,"replies":[{"id":"95626","content":"@上邪忘川<br>strace 主要用来查看程序调用了哪些系统调用已经收到什么信号。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606190230,"ip_address":"","comment_id":263456,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18786007545","product_id":100063801,"comment_content":"可以用strace跟踪进程的信号，用法参考https:&#47;&#47;www.cnblogs.com&#47;machangwei-8&#47;p&#47;10388883.html<br><br>运维同学表示代码没看懂，哈哈","like_count":4,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510200,"discussion_content":"@上邪忘川\nstrace 主要用来查看程序调用了哪些系统调用已经收到什么信号。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606190230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1276588,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIz9dKN1C8rKQoaVtmEGdzObhlia6zAfTsPYOm4ibz39VjTbu7Aia1LyeedHR26b6nxUtcCufpichcYgw/132","nickname":"上邪忘川","note":"","ucode":"1C4459917B038D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328582,"discussion_content":"查看容器在宿主机中的pid可以参考\nhttps://www.cnblogs.com/xy14/p/12002816.html\n1.docker top依赖docker程序\n2.docker inspect只能查询到docker子进程，不能查询到全部的docker进程\n3.查询cgourp可以查询到全部进程，但是比较麻烦\n/sys/fs/cgroup/memory/docker/<containerId>/cgroup.procs","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606183872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263359,"user_name":"Geek2014","can_delete":false,"product_type":"c1","uid":2028957,"ip_address":"","ucode":"9EB356D8DF287E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/9d/104bb8ea.jpg","comment_is_top":false,"comment_ctime":1606114746,"is_pvip":false,"replies":[{"id":"95632","content":"Yes.","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606194082,"ip_address":"","comment_id":263359,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14491016634","product_id":100063801,"comment_content":"输出：<br>Ignore SIGTERM<br><br>Catch SIGTERM<br>received SIGTERM<br><br>Default SIGTERM","like_count":3,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510161,"discussion_content":"Yes.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606194082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267135,"user_name":"庸俗且无趣","can_delete":false,"product_type":"c1","uid":2061144,"ip_address":"","ucode":"74BC67ADA07325","user_header":"https://static001.geekbang.org/account/avatar/00/1f/73/58/f7634960.jpg","comment_is_top":false,"comment_ctime":1607606214,"is_pvip":false,"replies":[{"id":"97565","content":"k8s在delete pod的时候，通过containerd先向容器发送SIGTERM.<br>这个graceful shutdown是需要容器中的进程自己来处理SIGTERM","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1608477168,"ip_address":"","comment_id":267135,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10197540806","product_id":100063801,"comment_content":"想问下老师，那k8s里的优雅关闭选项是否就是做了这个操作","like_count":2,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511520,"discussion_content":"k8s在delete pod的时候，通过containerd先向容器发送SIGTERM.\n这个graceful shutdown是需要容器中的进程自己来处理SIGTERM","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608477168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263671,"user_name":"po","can_delete":false,"product_type":"c1","uid":1023905,"ip_address":"","ucode":"7DB36C278F34D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/a1/d75219ee.jpg","comment_is_top":false,"comment_ctime":1606214241,"is_pvip":true,"replies":[{"id":"95657","content":"@po 非常好的问题。<br>我们可以从tini转发信号的代码看一下。如果 “kill_process_group” 没有设置， 为0时，这也是tini缺省的配置，那么SIGTERM只会转发给子进程，而子子进程就不会收到转发的SIGTERM。当子进程退出的时候，子子进程就会收到SIGKILL。<br><br>而如果kill_process_group &gt; 0的时候，同时子进程与子子进程在同一个process group的时候 (缺省fork出来的子进程会和父进程在同一个process group), 那么子子进程就会收到SIGTERM<br><br><br><br><br>if (kill(kill_process_group ? -child_pid : child_pid, sig.si_signo))","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606229877,"ip_address":"","comment_id":263671,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10196148833","product_id":100063801,"comment_content":"老师，如果通过tini转发信号给子进程，那么子子进程是收到子进程的信号吧？那么子子进程收到的信号是sigkill还是sigterm呢？","like_count":2,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510264,"discussion_content":"@po 非常好的问题。\n我们可以从tini转发信号的代码看一下。如果 “kill_process_group” 没有设置， 为0时，这也是tini缺省的配置，那么SIGTERM只会转发给子进程，而子子进程就不会收到转发的SIGTERM。当子进程退出的时候，子子进程就会收到SIGKILL。\n\n而如果kill_process_group &amp;gt; 0的时候，同时子进程与子子进程在同一个process group的时候 (缺省fork出来的子进程会和父进程在同一个process group), 那么子子进程就会收到SIGTERM\n\n\n\n\nif (kill(kill_process_group ? -child_pid : child_pid, sig.si_signo))","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606229877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276053,"user_name":"Lemon","can_delete":false,"product_type":"c1","uid":2136414,"ip_address":"","ucode":"E52BB361B69825","user_header":"https://static001.geekbang.org/account/avatar/00/20/99/5e/33481a74.jpg","comment_is_top":false,"comment_ctime":1611758980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5906726276","product_id":100063801,"comment_content":"  老师，我有一个困惑，希望能得到您的解答：<br>  从文中的图上看，Linux 进程在收到 SIGTERM 信号进入 do_exit() 释放相关资源后，调用 exit_notify() 函数通知和这个进程相关的父子进程。这个流程在我看起来已经很完整了。<br>  init 进程就是容器的 1号进程，Kill 它不就可以触发资源回收，通过 exit_notify() 函数通知父子进程了，而对于普通容器进程也可以使用 Kill 命令退出，那为什么容器内的进程需要在  exit_notify() 函数后再调用 zap_pid_ns_processes() 函数呢？<br>  还是说，这里的意思是 Linux 中普通进程 KILL 中调用的是 exit_notify() 函数，而容器内的进程调用的是 zap_pid_ns_processes() 函数呢？","like_count":1},{"had_liked":false,"id":264873,"user_name":"小鱼","can_delete":false,"product_type":"c1","uid":1304489,"ip_address":"","ucode":"C45CA374AC79FB","user_header":"https://static001.geekbang.org/account/avatar/00/13/e7/a9/36c9c009.jpg","comment_is_top":false,"comment_ctime":1606697638,"is_pvip":false,"replies":[{"id":"96350","content":"@小鱼，<br>你这里的“Linux守护进程”指的是mysqld吗？如果是只是想mysqld graceful shutdown, 可以用tini来启动mysqld, 不过还需要看你的bash里有没有做其他的工作。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606810654,"ip_address":"","comment_id":264873,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5901664934","product_id":100063801,"comment_content":"我的容器的init进程是通过bash拉起的Linux守护进程，然后守护进程会创建子进程一个MySQL实例，为了优雅退出，我该如何改写init进程呢？","like_count":1,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510722,"discussion_content":"@小鱼，\n你这里的“Linux守护进程”指的是mysqld吗？如果是只是想mysqld graceful shutdown, 可以用tini来启动mysqld, 不过还需要看你的bash里有没有做其他的工作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606810654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263625,"user_name":"朱雯","can_delete":false,"product_type":"c1","uid":1035744,"ip_address":"","ucode":"064C45FBF6B51F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/e0/c85bb948.jpg","comment_is_top":false,"comment_ctime":1606201028,"is_pvip":true,"replies":[{"id":"95658","content":"你指的是你们的生产环境中，容器的init进程是&#47;bin&#47;bash?","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606229961,"ip_address":"","comment_id":263625,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5901168324","product_id":100063801,"comment_content":"看完这篇课程后，兴冲冲的看生产环境的init进程是什么，有没有机会改成tini，结果一看，&#47;bin&#47;bash，我其实一头问号。","like_count":1,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510252,"discussion_content":"你指的是你们的生产环境中，容器的init进程是/bin/bash?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606229961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1225728,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b4/00/bfc101ee.jpg","nickname":"Tendrun","note":"","ucode":"86AB3C3A7D8381","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337693,"discussion_content":"好奇一下，如果是这样使用，对优雅关机不敏感的话，应该也不会有啥问题吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609047818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035744,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cd/e0/c85bb948.jpg","nickname":"朱雯","note":"","ucode":"064C45FBF6B51F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328859,"discussion_content":"应该是 进程号为1的进程是bash 然后启动的时候最后一个参数也是bin/bash\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606262851,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263447,"user_name":"孟令泽","can_delete":false,"product_type":"c1","uid":1986969,"ip_address":"","ucode":"F324FB4538A6E1","user_header":"","comment_is_top":false,"comment_ctime":1606136116,"is_pvip":false,"replies":[{"id":"95625","content":"@孟令泽<br>可以看一下tini的代码，我在“04 | 理解进程（3）”也有提到。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606190075,"ip_address":"","comment_id":263447,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5901103412","product_id":100063801,"comment_content":"老师，转发sigterm信号的代码有推荐吗？","like_count":1,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510195,"discussion_content":"@孟令泽\n可以看一下tini的代码，我在“04 | 理解进程（3）”也有提到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606190075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330334,"discussion_content":"哈哈，我觉得相比起换tini，还是改下容器编排更实际一点。\n毕竟一个容器中启动多个进程，这个也是不太推荐的搞法了吧。\n\n我觉得这个理解一下原理就行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606571897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263438,"user_name":"谢哈哈","can_delete":false,"product_type":"c1","uid":2326880,"ip_address":"","ucode":"5AADE70B5AFE27","user_header":"https://static001.geekbang.org/account/avatar/00/23/81/60/71ed6ac7.jpg","comment_is_top":false,"comment_ctime":1606133546,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5901100842","product_id":100063801,"comment_content":"如果就对这个启动的程序调用kill命令，那么会输出<br>ignore SIGTERM<br>catch SIGTERM<br>recieved SIGTERM<br>default SIGTERM<br><br>如果发送一个其它的信号（除sigkill 或-9）<br>那么<br>输出<br>defualt SIGTERM","like_count":1},{"had_liked":false,"id":356694,"user_name":"Geek_9b19ad","can_delete":false,"product_type":"c1","uid":1811531,"ip_address":"广东","ucode":"109E631E085B8C","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/O9jhHevKia7Axa7dAiaFCmLIFZT3uaE47R09Mkxk54Fw7dcv7yS4yFFW8JlvxEzLJY3AUcKdsyeViap8xIDJzdj1w/132","comment_is_top":false,"comment_ctime":1662516547,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662516547","product_id":100063801,"comment_content":"老师 前面的课程不是说了sigkill 这个信号不能杀死 1号进程吗？为什么contaienrd过30秒(这个是优雅终止默认时间) sigkill 信号就能杀死  1号进程呢？","like_count":0},{"had_liked":false,"id":352055,"user_name":"李俊-John","can_delete":false,"product_type":"c1","uid":1595855,"ip_address":"","ucode":"AE9056C59D60D6","user_header":"https://static001.geekbang.org/account/avatar/00/18/59/cf/168ac16d.jpg","comment_is_top":false,"comment_ctime":1658368640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658368640","product_id":100063801,"comment_content":"老师，我有一个多容器的Pod, 并且开启了shareprocessnamespace，所以整个Pod内进程结构如下：<br>UID   PID  PPID  C STIME TTY   TIME CMD<br>65535      1     0  0 Jul20 ?      00:00:00 &#47;pause<br>root      13     0  0 Jul20 ?      00:00:00 nginx: master process &#47;usr&#47;sbin&#47;nginx -g daemon off;<br>nginx     31  13  0 Jul20 ?      00:00:00 nginx: worker process<br>root      32     0  0 Jul20 ?       00:00:00 sh -c network run<br>root      38    32  0 Jul20 ?      00:01:22 network run<br>root      47     0  0 Jul20 ?        00:00:00 sh -c consensus run<br>root      53    47  0 Jul20 ?        00:03:20 consensus run<br>root      59     0  0 Jul20 ?        00:00:00 sh -c executor run<br>root      65    59  0 Jul20 ?        00:00:21 executor run<br>root      67     0  0 Jul20 ?        00:00:00 sh -c storage run<br>root      73    67  0 Jul20 ?      00:00:44 storage run<br>root     359     0  0 Jul20 ?      00:00:00 sh -c controller run<br>root     389   359  0 Jul20 ?      00:01:58 controller run<br>root     395     0  0 Jul20 ?      00:00:00 sh -c kms run<br>root     401   395  0 Jul20 ?      00:02:05 kms run<br>当我 delete pod 时，我通过 strace 发现，pause 被 sigkill 杀掉，以 kms 为例，sh -c kms run 被 sigterm 杀掉，kms run 被 sigkill 杀掉。<br>--- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_KILLED, si_pid=65, si_uid=0, si_status=SIGKILL, si_utime=1623, si_stime=412} ---<br>wait4(-1, NULL, WNOHANG, NULL)       = 65<br>wait4(-1, NULL, WNOHANG, NULL)       = 0<br>rt_sigreturn({mask=[]})          = -1 EINTR (被中断的系统调用)<br>pause()                            = ? ERESTARTNOHAND (To be restarted if no handler)<br>--- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_KILLED, si_pid=53, si_uid=0, si_status=SIGKILL, si_utime=10334, si_stime=6834} ---<br>wait4(-1, NULL, WNOHANG, NULL)        = 53<br>wait4(-1, NULL, WNOHANG, NULL)        = -1 ECHILD (没有子进程)<br>rt_sigreturn({mask=[]})            = -1 EINTR (被中断的系统调用)<br>pause()                             = ?<br>+++ killed by SIGKILL +++<br>上面是pause strace部分输出，si_pid为容器内进程的pid，不是很理解为什么收到这样的信号。","like_count":0},{"had_liked":false,"id":344217,"user_name":"Geek_e63d9e","can_delete":false,"product_type":"c1","uid":2982173,"ip_address":"","ucode":"6B148801B2A100","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/nN4uel4ia1n8oQW2LryIKT5B5w2kEBQz818IPsBwRoFfib0f24ks36r4jVBp4sXvoelYPe08MxhicDXeOy1N1EN2w/132","comment_is_top":false,"comment_ctime":1651376260,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651376260","product_id":100063801,"comment_content":"讲的好深啊，感觉看了和没看没啥区别，这种问题面试应该不会问到吧","like_count":0},{"had_liked":false,"id":341851,"user_name":"白小黑","can_delete":false,"product_type":"c1","uid":1257843,"ip_address":"","ucode":"B83D69F765D60A","user_header":"https://static001.geekbang.org/account/avatar/00/13/31/73/4366f97d.jpg","comment_is_top":false,"comment_ctime":1649860168,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649860168","product_id":100063801,"comment_content":"在命令输出中我们可以看到，init 进程（15909）收到的是 SIGTERM 信号，而另外一个进程（15959）收到的果然是 SIGKILL 信号。<br>---<br>这个地方写得不准确，在15909收到SIGTERM之后有默认10秒超时，然后才会发SIGKILL给15959，原文这么写会让人以为是同时收到的","like_count":0},{"had_liked":false,"id":314090,"user_name":"八台上","can_delete":false,"product_type":"c1","uid":1391143,"ip_address":"","ucode":"FB3D74B522C720","user_header":"https://static001.geekbang.org/account/avatar/00/15/3a/27/5d218272.jpg","comment_is_top":false,"comment_ctime":1632832429,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1632832429","product_id":100063801,"comment_content":"容器进程第一节 不是说容器 1号进程 如果没有注册 sigterm handler  是杀不死的吗，  好疑惑","like_count":0,"discussions":[{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546848,"discussion_content":"前提条件是，“在容器中”1号进程不能被kill -9 杀死。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642434154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310782,"user_name":"Geek_0a698d","can_delete":false,"product_type":"c1","uid":2665995,"ip_address":"","ucode":"1C329C7BA39802","user_header":"","comment_is_top":false,"comment_ctime":1630904186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630904186","product_id":100063801,"comment_content":"看了老师的文章，大致能看懂，但是感觉又理解的不深刻，请问老师是否需要补一下Linux的基础，如果需要的话有书籍推荐吗？","like_count":0},{"had_liked":false,"id":275655,"user_name":"任超伟","can_delete":false,"product_type":"c1","uid":1425812,"ip_address":"","ucode":"E35F4AF1B45FA0","user_header":"https://static001.geekbang.org/account/avatar/00/15/c1/94/9d92dd9b.jpg","comment_is_top":false,"comment_ctime":1611635075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611635075","product_id":100063801,"comment_content":"请教下老师，我理解这节课的本质是讲解容器内的进程生命周期，如何优雅的终止容器，如果是单进程的容器不需要关注，如果是多进程容器则需要考虑，在K8S场景下，kubectl explain deployment.spec.template.spec.containers.lifecycle.preStop，我们通过exec构建脚本来发送sigterm到各个进程是否能实现优雅退出呢","like_count":0},{"had_liked":false,"id":266397,"user_name":"feihui","can_delete":false,"product_type":"c1","uid":1007294,"ip_address":"","ucode":"13F1D4A82BC650","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/be/9ea55f46.jpg","comment_is_top":false,"comment_ctime":1607324423,"is_pvip":true,"replies":[{"id":"96763","content":"是的，在exit_notify中会做一次wait()子进程。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1607356309,"ip_address":"","comment_id":266397,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607324423","product_id":100063801,"comment_content":"init进程收到 SIGTERM，是在 exit_notify 中回收子进程的 pid 资源吗？( 应该肯定也是在这儿发送推出信号给父进程的吧！ )","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511246,"discussion_content":"是的，在exit_notify中会做一次wait()子进程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607356309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263970,"user_name":"lihome","can_delete":false,"product_type":"c1","uid":1121913,"ip_address":"","ucode":"205A79DCF662FD","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/79/920445e1.jpg","comment_is_top":false,"comment_ctime":1606305629,"is_pvip":false,"replies":[{"id":"95819","content":"嗯，我可以把我自己编译的binary上传了，make image的时候可以直接打包到镜像。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606395515,"ip_address":"","comment_id":263970,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1606305629","product_id":100063801,"comment_content":"(评论不支持多级，故再次整理发出)<br>老师能否将编译测试源码的过程放置到基于CentOS的容器内部<br>目前使用 make image 构建镜像：<br>编译过程中产生的的可执行文件是基于宿主机的(然后COPY到容器了)<br>运行环境是基于Centos的容器<br>可能由于系统平台架构差异可能会产生错误，比如出现：standard_init_linux.go:211: exec user process caused &quot;exec format error&quot;","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510371,"discussion_content":"嗯，我可以把我自己编译的binary上传了，make image的时候可以直接打包到镜像。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606395515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330332,"discussion_content":"其实评论也是可以回复的。\n\n确实，还是可以提供个默认的docker镜像，不用真的去编译。毕竟编译不是重点，重点是观察现象。\n之前，在macOS上就有这个问题，编译出来的二进制，完全无法在容器中启动。😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606571611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263603,"user_name":"po","can_delete":false,"product_type":"c1","uid":1023905,"ip_address":"","ucode":"7DB36C278F34D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9f/a1/d75219ee.jpg","comment_is_top":false,"comment_ctime":1606195359,"is_pvip":true,"replies":[{"id":"95659","content":"&gt; A,<br>是的，但进程的容器，在容器停止的时候，不会有这个问题。<br><br>&gt; B,<br>如果用python启动，但是没有转发信号，那么容器结束的时候，子进程就会被强制杀死。","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606230174,"ip_address":"","comment_id":263603,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606195359","product_id":100063801,"comment_content":"老师我有几个疑问：<br>A：你说的进程被强制杀死，主要是指这个进程是init的子进程吧？如果我的应用不是多进程的应用，不会产生子进程，那就没有被强制杀死的问题了？<br><br>B：在平常写代码子进程的时候，我没有注意过写sigterm15这个情况的处理，比如Java或者tomcat，Python启动的，如果没写这类的hander，那么收到sigterm信号，是不是也不会处理，最后被强制杀死？","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510248,"discussion_content":"&amp;gt; A,\n是的，但进程的容器，在容器停止的时候，不会有这个问题。\n\n&amp;gt; B,\n如果用python启动，但是没有转发信号，那么容器结束的时候，子进程就会被强制杀死。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606230174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263457,"user_name":"lihome","can_delete":false,"product_type":"c1","uid":1121913,"ip_address":"","ucode":"205A79DCF662FD","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/79/920445e1.jpg","comment_is_top":false,"comment_ctime":1606138455,"is_pvip":false,"replies":[{"id":"95627","content":"@lihome, <br>&gt; 运行&quot;docker run -d --name fwd_sig registry&#47;fwd_sig:v1 &#47;c-init-sig&quot;<br><br>这个命令已经是在启动容器而不是在编译代码了。<br>请问一下，你是在Linux下运行的docker吗？","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606190511,"ip_address":"","comment_id":263457,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1606138455","product_id":100063801,"comment_content":"老师能否将编译测试源码的过程放置到容器内部，避免架构差异产生的错误，比如：<br>运行&quot;docker run -d --name fwd_sig registry&#47;fwd_sig:v1 &#47;c-init-sig&quot;<br>出现standard_init_linux.go:211: exec user process caused &quot;exec format error&quot; 错误<br>原因：This can also happen when your host machine has a different architecture from your guest container image.<br>参考链接：https:&#47;&#47;stackoverflow.com&#47;questions&#47;58298774&#47;standard-init-linux-go211-exec-user-process-caused-exec-format-error&#47;63787574#63787574","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510201,"discussion_content":"@lihome, \n&amp;gt; 运行&amp;quot;docker run -d --name fwd_sig registry/fwd_sig:v1 /c-init-sig&amp;quot;\n\n这个命令已经是在启动容器而不是在编译代码了。\n请问一下，你是在Linux下运行的docker吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606190511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121913,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1e/79/920445e1.jpg","nickname":"lihome","note":"","ucode":"205A79DCF662FD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328668,"discussion_content":"@老师，我的registry/fwd_sig:v1镜像是在docker_for_mac下通过 make image构建出来的，\n而这个编译C源码是在宿主机上进行，然后再复制到registry/fwd_sig:v1镜像的\n当宿主机不是linux平台时，构建产物就没法在基于centos的容器中执行\nps: 通过multipass里面再安装docker后再构建是正常的，所以我才会提出这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606207578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263340,"user_name":"kimoti","can_delete":false,"product_type":"c1","uid":1897671,"ip_address":"","ucode":"0A78077408C2B1","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f4/c7/037235c9.jpg","comment_is_top":false,"comment_ctime":1606107389,"is_pvip":false,"replies":[{"id":"96508","content":"是的","user_name":"作者回复","user_name_real":"CY","uid":"2070138","ctime":1606918586,"ip_address":"","comment_id":263340,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606107389","product_id":100063801,"comment_content":"第一个是注册了Sig Ignore,所以第一个kill会被忽略。第二个是注册了自己的handler,所以会打印出receive SIGTERM,第三个是因为第二个程序里注册了default handler,所以是默认行为。","like_count":0,"discussions":[{"author":{"id":2070138,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/96/7a/8a14d008.jpg","nickname":"CY","note":"","ucode":"4AF98230985918","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510152,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606918586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}