{"id":342891,"title":"11 | 压缩：如何回收旧版本数据？","content":"<p>你好，我是唐聪。</p><p>今天是大年初一，你过年都有什么安排？今年过年对我来说，其实是比较特别的。除了家庭团聚走亲访友外，我多了一份陪伴。感谢你和我在这个专栏里一块精进，我衷心祝你在新的一年里平安喜乐，万事胜意。</p><p>这节课是我们基础篇里的最后一节，正巧这节课的内容也是最轻松的。新年新气象，我们就带着轻松的心情开始吧！</p><p>在<a href=\"https://time.geekbang.org/column/article/340226\">07</a>里，我们知道etcd中的每一次更新、删除key操作，treeIndex的keyIndex索引中都会追加一个版本号，在boltdb中会生成一个新版本boltdb key和value。也就是随着你不停更新、删除，你的etcd进程内存占用和db文件就会越来越大。很显然，这会导致etcd OOM和db大小增长到最大db配额，最终不可写。</p><p>那么etcd是通过什么机制来回收历史版本数据，控制索引内存占用和db大小的呢？</p><p>这就是我今天要和你分享的etcd压缩机制。希望通过今天的这节课，能帮助你理解etcd压缩原理，在使用etcd过程中能根据自己的业务场景，选择适合的压缩策略，避免db大小增长失控而不可写入，帮助你构建稳定的etcd服务。</p><h2>整体架构</h2><p><img src=\"https://static001.geekbang.org/resource/image/7c/21/7c5d5212fa14yy6aaf843ae3dfc5f721.png?wh=1920*918\" alt=\"\"></p><p>在了解etcd压缩模块实现细节前，我先给你画了一幅压缩模块的整体架构图。从图中可知，你可以通过client API发起人工的压缩(Compact)操作，也可以配置自动压缩策略。在自动压缩策略中，你可以根据你的业务场景选择合适的压缩模式。目前etcd支持两种压缩模式，分别是时间周期性压缩和版本号压缩。</p><!-- [[[read_end]]] --><p>当你通过API发起一个Compact请求后，KV Server收到Compact请求提交到Raft模块处理，在Raft模块中提交后，Apply模块就会通过MVCC模块的Compact接口执行此压缩任务。</p><p>Compact接口首先会更新当前server已压缩的版本号，并将耗时昂贵的压缩任务保存到FIFO队列中异步执行。压缩任务执行时，它首先会压缩treeIndex模块中的keyIndex索引，其次会遍历boltdb中的key，删除已废弃的key。</p><p>以上就是压缩模块的一个工作流程。接下来我会首先和你介绍如何人工发起一个Compact操作，然后详细介绍周期性压缩模式、版本号压缩模式的工作原理，最后再给你介绍Compact操作核心的原理。</p><h2>压缩特性初体验</h2><p>在使用etcd过程中，当你遇到\"etcdserver: mvcc: database space exceeded\"错误时，若是你未开启压缩策略导致db大小达到配额，这时你可以使用etcdctl compact命令，主动触发压缩操作，回收历史版本。</p><p>如下所示，你可以先通过endpoint status命令获取etcd当前版本号，然后再通过etcdctl compact命令发起压缩操作即可。</p><pre><code># 获取etcd当前版本号\n$ rev=$(etcdctl endpoint status --write-out=&quot;json&quot; | egrep -o '&quot;revision&quot;:[0-9]*' | egrep -o '[0-9].*')\n$ echo $rev\n9\n# 执行压缩操作，指定压缩的版本号为当前版本号\n$ etcdctl compact $rev\nCompacted revision 9\n# 压缩一个已经压缩的版本号\n$ etcdctl compact $rev\nError: etcdserver: mvcc: required revision has been compacted\n# 压缩一个比当前最大版号大的版本号\n$ etcdctl compact 12\nError: etcdserver: mvcc: required revision is a future revision\n</code></pre><p>请注意，如果你压缩命令传递的版本号小于等于当前etcd server记录的压缩版本号，etcd server会返回已压缩错误(\"mvcc: required revision has been compacted\")给client。如果版本号大于当前etcd server最新的版本号，etcd server则返回一个未来的版本号错误给client(\"mvcc: required revision is a future revision\")。</p><p>执行压缩命令的时候，不少初学者有一个常见的误区，就是担心压缩会不会把我最新版本数据给删除？</p><p>压缩的本质是<strong>回收历史版本</strong>，目标对象仅是<strong>历史版本</strong>，不包括一个key-value数据的最新版本，因此你可以放心执行压缩命令，不会删除你的最新版本数据。不过我在<a href=\"https://time.geekbang.org/column/article/341060\">08</a>介绍Watch机制时提到，Watch特性中的历史版本数据同步，依赖于MVCC中是否还保存了相关数据，因此我建议你不要每次简单粗暴地回收所有历史版本。</p><p>在生产环境中，我建议你精细化的控制历史版本数，那如何实现精细化控制呢？</p><p>主要有两种方案，一种是使用etcd server的自带的自动压缩机制，根据你的业务场景，配置合适的压缩策略即可。</p><p>另外一种方案是如果你觉得etcd server的自带压缩机制无法满足你的诉求，想更精细化的控制etcd保留的历史版本记录，你就可以基于etcd的Compact API，在业务逻辑代码中、或定时任务中主动触发压缩操作。你需要确保发起Compact操作的程序高可用，压缩的频率、保留的历史版本在合理范围内，并最终能使etcd的db 大小保持平稳，否则会导致db大小不断增长，直至db配额满，无法写入。</p><p>在一般情况下，我建议使用etcd自带的压缩机制。它支持两种模式，分别是按时间周期性压缩和保留版本号的压缩，配置相应策略后，etcd节点会自动化的发起Compact操作。</p><p>接下来我就和你详细介绍下etcd的周期性和保留版本号压缩模式。</p><h2>周期性压缩</h2><p>首先是周期性压缩模式，它适用于什么场景呢？</p><p>当你希望etcd只保留最近一段时间写入的历史版本时，你就可以选择配置etcd的压缩模式为periodic，保留时间为你自定义的1h等。</p><p>如何给etcd server配置压缩模式和保留时间呢?</p><p>如下所示，etcd server提供了配置压缩模式和保留时间的参数：</p><pre><code>--auto-compaction-retention '0'\nAuto compaction retention length. 0 means disable auto Compaction.\n--auto-compaction-mode 'periodic'\nInterpret 'auto-Compaction-retention' one of: periodic|revision.\n</code></pre><p>auto-compaction-mode为periodic时，它表示启用时间周期性压缩，auto-compaction-retention为保留的时间的周期，比如1h。</p><p>auto-compaction-mode为revision时，它表示启用版本号压缩模式，auto-compaction-retention为保留的历史版本号数，比如10000。</p><p>注意，etcd server的auto-compaction-retention为'0'时，将关闭自动压缩策略，</p><p>那么周期性压缩模式的原理是怎样的呢？ etcd是如何知道你配置的1h前的etcd server版本号呢？</p><p>其实非常简单，etcd server启动后，根据你的配置的模式periodic，会创建periodic Compactor，它会异步的获取、记录过去一段时间的版本号。periodic Compactor组件获取你设置的压缩间隔参数1h， 并将其划分成10个区间，也就是每个区间6分钟。每隔6分钟，它会通过etcd MVCC模块的接口获取当前的server版本号，追加到rev数组中。</p><p>因为你只需要保留过去1个小时的历史版本，periodic Compactor组件会通过当前时间减去上一次成功执行Compact操作的时间，如果间隔大于一个小时，它会取出rev数组的首元素，通过etcd server的Compact接口，发起压缩操作。</p><p>需要注意的一点是，在etcd v3.3.3版本之前，不同的etcd版本对周期性压缩的行为是有一定差异的，具体的区别你可以参考下<a href=\"https://github.com/etcd-io/etcd/blob/v3.4.9/Documentation/op-guide/maintenance.md\">官方文档</a>。</p><h2>版本号压缩</h2><p>了解完周期性压缩模式，我们再看看版本号压缩模式，它又适用于什么场景呢？</p><p>当你写请求比较多，可能产生比较多的历史版本导致db增长时，或者不确定配置periodic周期为多少才是最佳的时候，你可以通过设置压缩模式为revision，指定保留的历史版本号数。比如你希望etcd尽量只保存1万个历史版本，那么你可以指定compaction-mode为revision，auto-compaction-retention为10000。</p><p>它的实现原理又是怎样的呢?</p><p>也很简单，etcd启动后会根据你的压缩模式revision，创建revision Compactor。revision Compactor会根据你设置的保留版本号数，每隔5分钟定时获取当前server的最大版本号，减去你想保留的历史版本数，然后通过etcd server的Compact接口发起如下的压缩操作即可。</p><pre><code># 获取当前版本号，减去保留的版本号数\nrev := rc.rg.Rev() - rc.retention\n# 调用server的Compact接口压缩\n_，err := rc.c.Compact(rc.ctx，&amp;pb.CompactionRequest{Revision: rev})\n</code></pre><h2>压缩原理</h2><p>介绍完两种自动化的压缩模式原理后，接下来我们就深入分析下压缩的本质。当etcd server收到Compact请求后，它是如何执行的呢？ 核心原理是什么？</p><p>如前面的整体架构图所述，Compact请求经过Raft日志同步给多数节点后，etcd会从Raft日志取出Compact请求，应用此请求到状态机执行。</p><p>执行流程如下图所示，MVCC模块的Compact接口首先会检查Compact请求的版本号rev是否已被压缩过，若是则返回ErrCompacted错误给client。其次会检查rev是否大于当前etcd server的最大版本号，若是则返回ErrFutureRev给client，这就是我们上面执行etcdctl compact命令所看到的那两个错误原理。</p><p>通过检查后，Compact接口会通过boltdb的API在meta bucket中更新当前已调度的压缩版本号(scheduledCompactedRev)号，然后将压缩任务追加到FIFO Scheduled中，异步调度执行。</p><p><img src=\"https://static001.geekbang.org/resource/image/9a/ff/9ac55d639f564b56324b96dc02f0c0ff.png?wh=1920*1332\" alt=\"\"></p><p>为什么Compact接口需要持久化存储当前已调度的压缩版本号到boltdb中呢？</p><p>试想下如果不保存这个版本号，etcd在异步执行的Compact任务过程中crash了，那么异常节点重启后，各个节点数据就会不一致。</p><p>因此etcd通过持久化存储scheduledCompactedRev，节点crash重启后，会重新向FIFO Scheduled中添加压缩任务，已保证各个节点间的数据一致性。</p><p>异步的执行压缩任务会做哪些工作呢？</p><p>首先我们回顾下<a href=\"https://time.geekbang.org/column/article/340226\">07</a>里介绍的treeIndex索引模块，它是etcd支持保存历史版本的核心模块，每个key在treeIndex模块中都有一个keyIndex数据结构，记录其历史版本号信息。</p><p><img src=\"https://static001.geekbang.org/resource/image/4f/dc/4f9cb015a842da0d5bd556d6b45970dc.png?wh=1920*1124\" alt=\"\"></p><p>如上图所示，因此异步压缩任务的第一项工作，就是<strong>压缩treeIndex模块中的各key的历史版本</strong>、已删除的版本。为了避免压缩工作影响读写性能，首先会克隆一个B-tree，然后通过克隆后的B-tree遍历每一个keyIndex对象，压缩历史版本号、清理已删除的版本。</p><p>假设当前压缩的版本号是CompactedRev， 它会保留keyIndex中最大的版本号，移除小于等于CompactedRev的版本号，并通过一个map记录treeIndex中有效的版本号返回给boltdb模块使用。</p><p>为什么要保留最大版本号呢?</p><p>因为最大版本号是这个key的最新版本，移除了会导致key丢失。而Compact的目的是回收旧版本。当然如果keyIndex中的最大版本号被打了删除标记(tombstone)， 就会从treeIndex中删除这个keyIndex，否则会出现内存泄露。</p><p>Compact任务执行完索引压缩后，它通过遍历B-tree、keyIndex中的所有generation获得当前内存索引模块中有效的版本号，这些信息将帮助etcd清理boltdb中的废弃历史版本。</p><p><img src=\"https://static001.geekbang.org/resource/image/d6/70/d625753e5a7f0f7f37987764b9204270.png?wh=1920*1129\" alt=\"\"></p><p>压缩任务的第二项工作就是<strong>删除boltdb中废弃的历史版本数据</strong>。如上图所示，它通过etcd一个名为scheduleCompaction任务来完成。</p><p>scheduleCompaction任务会根据key区间，从0到CompactedRev遍历boltdb中的所有key，通过treeIndex模块返回的有效索引信息，判断这个key是否有效，无效则调用boltdb的delete接口将key-value数据删除。</p><p>在这过程中，scheduleCompaction任务还会更新当前etcd已经完成的压缩版本号(finishedCompactRev)，将其保存到boltdb的meta bucket中。</p><p>scheduleCompaction任务遍历、删除key的过程可能会对boltdb造成压力，为了不影响正常读写请求，它在执行过程中会通过参数控制每次遍历、删除的key数（默认为100，每批间隔10ms），分批完成boltdb key的删除操作。</p><h2>为什么压缩后db大小不减少呢?</h2><p>当你执行完压缩任务后，db大小减少了吗？ 事实是并没有减少。那为什么我们都通过boltdb API删除了key，db大小还不减少呢？</p><p>上节课我们介绍boltdb实现时，提到过boltdb将db文件划分成若干个page页，page页又有四种类型，分别是meta page、branch page、leaf page以及freelist page。branch page保存B+ tree的非叶子节点key数据，leaf page保存bucket和key-value数据，freelist会记录哪些页是空闲的。</p><p>当我们通过boltdb删除大量的key，在事务提交后B+ tree经过分裂、平衡，会释放出若干branch/leaf page页面，然而boltdb并不会将其释放给磁盘，调整db大小操作是昂贵的，会对性能有较大的损害。</p><p>boltdb是通过freelist page记录这些空闲页的分布位置，当收到新的写请求时，优先从空闲页数组中申请若干连续页使用，实现高性能的读写（而不是直接扩大db大小）。当连续空闲页申请无法得到满足的时候，  boltdb才会通过增大db大小来补充空闲页。</p><p>一般情况下，压缩操作释放的空闲页就能满足后续新增写请求的空闲页需求，db大小会趋于整体稳定。</p><h2>小结</h2><p>最后我们来小结下今天的内容。</p><p>etcd压缩操作可通过API人工触发，也可以配置压缩模式由etcd server自动触发。压缩模式支持按周期和版本两种。在周期模式中你可以实现保留最近一段时间的历史版本数，在版本模式中你可以实现保留期望的历史版本数。</p><p>压缩的核心工作原理分为两大任务，第一个任务是压缩treeIndex中的各key历史索引，清理已删除key，并将有效的版本号保存到map数据结构中。</p><p>第二个任务是删除boltdb中的无效key。基本原理是根据版本号遍历boltdb已压缩区间范围的key，通过treeIndex返回的有效索引map数据结构判断key是否有效，无效则通过boltdb API删除它。</p><p>最后在执行压缩的操作中，虽然我们删除了boltdb db的key-value数据，但是db大小并不会减少。db大小不变的原因是存放key-value数据的branch和leaf页，它们释放后变成了空闲页，并不会将空间释放给磁盘。</p><p>boltdb通过freelist page来管理一系列空闲页，后续新增的写请求优先从freelist中申请空闲页使用，以提高性能。在写请求速率稳定、新增key-value较少的情况下，压缩操作释放的空闲页就可以基本满足后续写请求对空闲页的需求，db大小就会处于一个基本稳定、健康的状态。</p><h2>思考题</h2><p>你知道压缩与碎片整理(defrag)有哪些区别吗？为什么碎片整理会影响服务性能呢？ 你能想到哪些优化方案来降低碎片整理对服务性能的影响呢?</p><p>感谢你的阅读，如果你认为这节课的内容有收获，也欢迎把它分享给你的朋友，谢谢。</p>","comments":[{"had_liked":false,"id":278656,"user_name":"云原生工程师","can_delete":false,"product_type":"c1","uid":2243294,"ip_address":"","ucode":"40CB692F21D3BC","user_header":"https://static001.geekbang.org/account/avatar/00/22/3a/de/e5c30589.jpg","comment_is_top":false,"comment_ctime":1613182442,"is_pvip":false,"replies":[{"id":"101354","content":"谢谢，新年快乐，祝牛年升职加薪","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1613435750,"ip_address":"","comment_id":278656,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31677953514","product_id":100069901,"comment_content":"新年与老师一块精进，新年快乐，牛年一起旺旺旺。","like_count":7,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515460,"discussion_content":"谢谢，新年快乐，祝牛年升职加薪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613435750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282378,"user_name":"不二","can_delete":false,"product_type":"c1","uid":1027123,"ip_address":"","ucode":"D0700609740FB5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/33/110437cc.jpg","comment_is_top":false,"comment_ctime":1615209974,"is_pvip":false,"replies":[{"id":"102608","content":"感谢你的提问，平时有使用过etcd吗？<br>比如基本的etcdctl工具，了解下常见的命令，下载etcd二进制文件，本地启动一个etcd集群。<br>基础篇每讲都有不少的案例，建议你实际动手执行下，很多东西你亲自去体验下，就有不一样的收获。<br>专栏面向的对象包括初学者、有一定的基础的、有比较丰富经验的同学，每讲本身已经非常长了，受限于篇幅，因此很多网上一搜索的就能找到的资源，比如etcdctl使用、etcd集群搭建我就没介绍了，不过在后面专栏结束后，我考虑增加个入门篇，更加通俗易懂的，帮助没实际使用etcd的同学们快速上手。<br>对kubernetes比较了解可以看看19和20会不会让你感觉更加亲切点。<br>最后，每讲有什么疑问，可直接留言提问哈，没事的，不用担心问题是否简单，说不定其他入门的同学也能遇到。<br>最近专栏还在定时更新阶段，非常忙，可能评论回复没那么快，定时更新结束后，我会定时抽空回答大家问题哈。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1615370611,"ip_address":"","comment_id":282378,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18795079158","product_id":100069901,"comment_content":"老师好，有一个学习方面的疑问请教一下：我在工作中大量使用到kubernetes，算是比较了解，但是etcd确实没有深入。<br>专栏从第一讲开始，每一讲的内容我都看得极其吃力，甚至完全看不懂，是不是缺少了哪一整块的先验知识？<br>期待得到你的回复！","like_count":4,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516724,"discussion_content":"感谢你的提问，平时有使用过etcd吗？\n比如基本的etcdctl工具，了解下常见的命令，下载etcd二进制文件，本地启动一个etcd集群。\n基础篇每讲都有不少的案例，建议你实际动手执行下，很多东西你亲自去体验下，就有不一样的收获。\n专栏面向的对象包括初学者、有一定的基础的、有比较丰富经验的同学，每讲本身已经非常长了，受限于篇幅，因此很多网上一搜索的就能找到的资源，比如etcdctl使用、etcd集群搭建我就没介绍了，不过在后面专栏结束后，我考虑增加个入门篇，更加通俗易懂的，帮助没实际使用etcd的同学们快速上手。\n对kubernetes比较了解可以看看19和20会不会让你感觉更加亲切点。\n最后，每讲有什么疑问，可直接留言提问哈，没事的，不用担心问题是否简单，说不定其他入门的同学也能遇到。\n最近专栏还在定时更新阶段，非常忙，可能评论回复没那么快，定时更新结束后，我会定时抽空回答大家问题哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615370611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210356,"avatar":"https://static001.geekbang.org/account/avatar/00/12/77/f4/f669fcca.jpg","nickname":"😉","note":"","ucode":"859AAE5AABDF1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365371,"discussion_content":"我也一样，搞K8S运维的，听这个很费劲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617784444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280640,"user_name":"写点啥呢","can_delete":false,"product_type":"c1","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1614302895,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18794172079","product_id":100069901,"comment_content":"请问老师，基于版本号压缩中的版本号是etcd的全局单调递增的revision吧，这种方式下每个key保留的历史版本应该是不同的，比如A是昨天修改过10次，B是最近修改了10次，此时压缩可能B会保留多个历史版本而A可能只保留当前版本，不知道这样理解是否正确？<br><br>那么如果是这样，有没有办法让etcd压缩能对每个key均匀保留历史版本，比如指定每个key最少保留2个版本？<br><br>谢谢老师","like_count":5,"discussions":[{"author":{"id":1391143,"avatar":"https://static001.geekbang.org/account/avatar/00/15/3a/27/5d218272.jpg","nickname":"八台上","note":"","ucode":"FB3D74B522C720","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390249,"discussion_content":"目前看来是不行的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629728338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278649,"user_name":"Geek_cb2b43","can_delete":false,"product_type":"c1","uid":2253932,"ip_address":"","ucode":"BB6C92BDCA0761","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/05Wiazxo0OS5w9KdJ4OQAe7RzgyHLuBCMNrZicDAQ8ZlSMx4NNdAgSLBYPJGn9W1y45ZTtUMlCxsQHqD7ycicQJyg/132","comment_is_top":false,"comment_ctime":1613177143,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18793046327","product_id":100069901,"comment_content":"压缩的第一项任务中克隆B+tree，是如何保两份数据一致的呢？即如果在此期间B+tree出现了分裂，原来的记录可能发生了变化","like_count":4,"discussions":[{"author":{"id":1795511,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/b7/058276dc.jpg","nickname":"i_chase","note":"","ucode":"09C41C863F4EA3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570347,"discussion_content":"func (ti *treeIndex) Compact(rev int64) map[revision]struct{} {\n\tavailable := make(map[revision]struct{})\n\tti.lg.Info(&#34;compact tree index&#34;, zap.Int64(&#34;revision&#34;, rev))\n\tti.Lock()\n\tclone := ti.tree.Clone()\n\tti.Unlock()\n\n\t//复制一份tree index\n\tclone.Ascend(func(item btree.Item) bool {\n\t\tkeyi := item.(*keyIndex)\n\t\t// Lock is needed here to prevent modification to the keyIndex while\n\t\t// compaction is going on or revision added to empty before deletion\n\t\tti.Lock()\n\t\tkeyi.compact(ti.lg, rev, available) //删除tree index上需要compact的keyIndex。available是仍需要保留的revision\n\t\tif keyi.isEmpty() {\n\t\t\titem := ti.tree.Delete(keyi)\n\t\t\tif item == nil {\n\t\t\t\tti.lg.Panic(&#34;failed to delete during compaction&#34;)\n\t\t\t}\n\t\t}\n\t\tti.Unlock()\n\t\treturn true\n\t})\n\treturn available\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651739012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1795511,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/65/b7/058276dc.jpg","nickname":"i_chase","note":"","ucode":"09C41C863F4EA3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570346,"discussion_content":"tree index是b-tree。处理每个keyIndex的时候有加锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651738996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313782,"user_name":"八台上","can_delete":false,"product_type":"c1","uid":1391143,"ip_address":"","ucode":"FB3D74B522C720","user_header":"https://static001.geekbang.org/account/avatar/00/15/3a/27/5d218272.jpg","comment_is_top":false,"comment_ctime":1632664163,"is_pvip":false,"replies":[{"id":"114590","content":"嗯，defrag期间会持有boltdb事务锁导致读写超时，一般情况下不需要defrag的，只有当未配置compact策略或配置的策略非常不合理、以及线上突发大规模写入等场景下导致db文件非常大的时候才需要执行defrag。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1634311965,"ip_address":"","comment_id":313782,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10222598755","product_id":100069901,"comment_content":"还有一个问题就是 defrag 的时候 是不是服务不可用呀？ 如果是 什么时机defrag 呢","like_count":2,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527468,"discussion_content":"嗯，defrag期间会持有boltdb事务锁导致读写超时，一般情况下不需要defrag的，只有当未配置compact策略或配置的策略非常不合理、以及线上突发大规模写入等场景下导致db文件非常大的时候才需要执行defrag。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634311965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313739,"user_name":"八台上","can_delete":false,"product_type":"c1","uid":1391143,"ip_address":"","ucode":"FB3D74B522C720","user_header":"https://static001.geekbang.org/account/avatar/00/15/3a/27/5d218272.jpg","comment_is_top":false,"comment_ctime":1632642131,"is_pvip":false,"replies":[{"id":"114591","content":"有趣的问题，各个节点都会发起compact请求，etcd会记录已压缩的最大版本号，如果其他节点发起的compact版本号小于它，就直接返回ErrCompacted了。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1634312184,"ip_address":"","comment_id":313739,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10222576723","product_id":100069901,"comment_content":"想问一下 如果不同的etcd server配置的auto compact 策略不一样  以谁为准呢","like_count":2,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527455,"discussion_content":"有趣的问题，各个节点都会发起compact请求，etcd会记录已压缩的最大版本号，如果其他节点发起的compact版本号小于它，就直接返回ErrCompacted了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634312184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302747,"user_name":"海阔天空","can_delete":false,"product_type":"c1","uid":1733275,"ip_address":"","ucode":"8658B1610192E7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZzc3keFAJT12Sic3VYWx4PrZbCGDm4kBZD3oqnR4xsibGGtGy4tFO8y05Ims27SiaavA/132","comment_is_top":false,"comment_ctime":1626353259,"is_pvip":false,"replies":[{"id":"110134","content":"感谢支持，最近项目和家庭事情比较多，思考题答案我将尽快在周末抽空补充好（预计9月份）","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1627367680,"ip_address":"","comment_id":302747,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5921320555","product_id":100069901,"comment_content":"思考题的答案什么是可以统一给出呀","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523408,"discussion_content":"感谢支持，最近项目和家庭事情比较多，思考题答案我将尽快在周末抽空补充好（预计9月份）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627367680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356153,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"湖北","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1662015061,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662015061","product_id":100069901,"comment_content":"思考题里面关于压缩和碎片化，我接触过，简单分享一下。在文件系统里面，所谓的碎片化，是文件的其中部分区间数据被删掉了，导致前后不连续，为了让数据读写更快，有时候会重新分配一个连续的区间来加速并且减少碎片化的。 因此碎片化的作用，本质上没有删除数据，更多的是通过申请新的数据空间，来让原来的数据在磁盘的物理空间更加一致，让随机读写变成顺序读写。<br><br>而etcd的压缩则是，其实这里就是会删除数据了。","like_count":0},{"had_liked":false,"id":334415,"user_name":"蓝莓侠","can_delete":false,"product_type":"c1","uid":1620722,"ip_address":"","ucode":"2E02AC43D21103","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLDRPejHodutia9Ud8UZLY8g5lTkKXgf3J104c0jM9aFfAGNoUdxkRLnnWRc5Kd3jIeN3EqXxKFT0g/132","comment_is_top":false,"comment_ctime":1644925275,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1644925275","product_id":100069901,"comment_content":"treeIndex compact的时候，拷贝一个b树处理，处理完后，怎么替换当前内存中使用的那？增量如何处理那？","like_count":0,"discussions":[{"author":{"id":2012886,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/b6/d6/3b1fbf9b.jpg","nickname":"2018","note":"","ucode":"436D1F4CA63CB9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565739,"discussion_content":"\tclone := ti.tree.Clone()\n\tti.Unlock()\n\n\tclone.Ascend(func(item btree.Item) bool {\n\t\tkeyi := item.(*keyIndex)\n\t\t// Lock is needed here to prevent modification to the keyIndex while\n\t\t// compaction is going on or revision added to empty before deletion\n\t\tti.Lock()\n\t\tkeyi.compact(ti.lg, rev, available)\n\t\tif keyi.isEmpty() {\n\t\t\titem := ti.tree.Delete(keyi)\n\t\t\tif item == nil {\n\t\t\t\tti.lg.Panic(&#34;failed to delete during compaction&#34;)\n\t\t\t}\n\t\t}\n\t\tti.Unlock()\n\t\treturn true\n\t})","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650532444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1368768,"avatar":"https://static001.geekbang.org/account/avatar/00/14/e2/c0/e7a59706.jpg","nickname":"chongsheng","note":"","ucode":"859DF328FCA608","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557376,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647782205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320900,"user_name":"愁脾气的愁妖精","can_delete":false,"product_type":"c1","uid":2132933,"ip_address":"","ucode":"81778A821819FA","user_header":"https://static001.geekbang.org/account/avatar/00/20/8b/c5/6e06e49c.jpg","comment_is_top":false,"comment_ctime":1636548160,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1636548160","product_id":100069901,"comment_content":"老师，你好，我想问就是用etcdctl,etcd 3.4版本，我设置周期自动压缩24h,你文章中说是分成十个间隔，但是我看我的日志是1小时为间隔，还要就是比如说我这24小时都没有对etcd产生revision数据的操作，那最终自动压缩之后只会保留最新的revision数据吧，比如说最新的revvision是11，，但是有报warning，就是说最新的11版本已经被压缩，这个问题是因为他会标记最新的revision是11，他不能被压缩是吧，但是这个warning是什么意思呢，望解答，2021-11-10 19:02:59.643037 N | compactor: Starting auto-compaction at revision 11 (retention: 24h0m0s)<br>2021-11-10 19:02:59.643281 W | etcdserver: failed to apply request &quot;header:&lt;ID:5580941819101844742 &gt; compaction:&lt;revision:11 &gt; &quot; with response &quot;&quot; took (10.017?s) to execute, err is mvcc: required revision has been compacted<br>2021-11-10 19:02:59.643309 N | compactor: Finished auto-compaction at revision 11<br>2021-11-10 20:02:59.662628 N | compactor: Starting auto-compaction at revision 11 (retention: 24h0m0s)<br>2021-11-10 20:02:59.662873 W | etcdserver: failed to apply request &quot;header:&lt;ID:5580941819101844743 &gt; compaction:&lt;revision:11 &gt; &quot; with response &quot;&quot; took (9.473?s) to execute, err is mvcc: required revision has been compacted<br>2021-11-10 20:02:59.662907 N | compactor: Finished auto-compaction at revision 11<br>","like_count":0,"discussions":[{"author":{"id":1635542,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PoJwvAqp3658sonACyia1VOicKG4ncRqKbtQiayiaVJp1BbUrBQFfH5eibEoejh9GIToU2SsibsanntZeft9YGhCTfhA/132","nickname":"Geek_2a4ae2","note":"","ucode":"98CB6A81C7FBB6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583425,"discussion_content":"3.3.3版本以后，如果配置压缩周期大于1h，执行间隔是1h，如果小于1h比如30m，执行间隔是30m(即配置时间)，不再是之前的1/10时间； \n如果是按照版本压测，每5分钟执行一次。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660113152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"天津"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1752348,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/jA97yib7VetXc4iclOg2gGfZu1fO7efyib2mKeqvIxDdmgLqukusyFzPrbIQeZYR0WDJUicRakgVGroaYC7aWGFrEw/132","nickname":"Turing","note":"","ucode":"F88679276D4841","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532635,"discussion_content":"是不是多个节点都配置了自动压缩的策略?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637657918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":1,"child_discussions":[{"author":{"id":2132933,"avatar":"https://static001.geekbang.org/account/avatar/00/20/8b/c5/6e06e49c.jpg","nickname":"愁脾气的愁妖精","note":"","ucode":"81778A821819FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1752348,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/jA97yib7VetXc4iclOg2gGfZu1fO7efyib2mKeqvIxDdmgLqukusyFzPrbIQeZYR0WDJUicRakgVGroaYC7aWGFrEw/132","nickname":"Turing","note":"","ucode":"F88679276D4841","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534645,"discussion_content":"只起了单节点的，还要想问对于etcd 3.4 版本，24小时的压缩策略，在第一个24小时之后的每一个小时压缩一次是吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638249247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":532635,"ip_address":""},"score":534645,"extra":""}]}]},{"had_liked":false,"id":315396,"user_name":"types","can_delete":false,"product_type":"c1","uid":2449777,"ip_address":"","ucode":"8B50927EF1804F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLDUJyeq54fiaXAgF62tNeocO3lHsKT4mygEcNoZLnibg6ONKicMgCgUHSfgW8hrMUXlwpNSzR8MHZwg/132","comment_is_top":false,"comment_ctime":1633877532,"is_pvip":false,"replies":[{"id":"114587","content":"嗯，etcd有记录已压缩最大的版本号，不会重复压缩。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1634309611,"ip_address":"","comment_id":315396,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633877532","product_id":100069901,"comment_content":"如果是etcd 集群， 每个节点都配置了自动压缩策略，每个节点都会产生Compact请求吗？","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527950,"discussion_content":"嗯，etcd有记录已压缩最大的版本号，不会重复压缩。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634309611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308673,"user_name":"八台上","can_delete":false,"product_type":"c1","uid":1391143,"ip_address":"","ucode":"FB3D74B522C720","user_header":"https://static001.geekbang.org/account/avatar/00/15/3a/27/5d218272.jpg","comment_is_top":false,"comment_ctime":1629728621,"is_pvip":false,"replies":[{"id":"112699","content":"你好，你应该是指压缩吧，默认没开启历史数据压缩功能，一般情况下只要你不保留太久(比如6h以上)，写入不要太频繁，db大小会保持稳定的。碎片整理是指defrag命令，它的核心原理是遍历老db数据，重新写入到一个新的db文件，使其更紧凑，但这个过程会影响etcd可用性。一般生产环境下不需要执行defrag命令，除非写入大量数据后，又删除了数据，db文件特别大。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1631026772,"ip_address":"","comment_id":308673,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629728621","product_id":100069901,"comment_content":"想问一下   相当于没有自动清理碎片的配置是吗   所以如果自动压缩策略和写入频率  配合不好的话  db文件是会膨胀的？","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525583,"discussion_content":"你好，你应该是指压缩吧，默认没开启历史数据压缩功能，一般情况下只要你不保留太久(比如6h以上)，写入不要太频繁，db大小会保持稳定的。碎片整理是指defrag命令，它的核心原理是遍历老db数据，重新写入到一个新的db文件，使其更紧凑，但这个过程会影响etcd可用性。一般生产环境下不需要执行defrag命令，除非写入大量数据后，又删除了数据，db文件特别大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631026772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295734,"user_name":"Geek_a69552","can_delete":false,"product_type":"c1","uid":2369839,"ip_address":"","ucode":"D5776850E4911E","user_header":"","comment_is_top":false,"comment_ctime":1622564840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622564840","product_id":100069901,"comment_content":"老师好，想问一下。在压缩treeindex时，克隆一个B+树，对该树进行操作。那么删除treeindex的无效数据后，怎么清理后的B+树替换原有的treeindex，以及在这个过程中新写入的数据，怎么同步到这个新treeindex上。还是说克隆的目的只是获取当前有效的key reverion，并不会清理treeindex","like_count":0},{"had_liked":false,"id":294689,"user_name":"哈希碰撞","can_delete":false,"product_type":"c1","uid":1244496,"ip_address":"","ucode":"DF82678E60095D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM49ONuR097wB6LqR8nn5kWiaQiaPic1y8UznibDOScQergTj5qeL6zQ4bIicYEkqlMiash3CUCAYmSt9tQA/132","comment_is_top":false,"comment_ctime":1622042874,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622042874","product_id":100069901,"comment_content":"请问,etcd 碎片整理 安全吗，会不会造成数据损坏或者丢失？<br>etcd 碎片整理和压缩有什么区别？","like_count":0},{"had_liked":false,"id":283883,"user_name":"ly","can_delete":false,"product_type":"c1","uid":1004331,"ip_address":"","ucode":"EA0C159386898E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/53/2b/94b5b872.jpg","comment_is_top":false,"comment_ctime":1615971504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615971504","product_id":100069901,"comment_content":"defrag 会block 写数据，经常会导致一些切主的行为。<br>老师这边有什么好的建议吗","like_count":0},{"had_liked":false,"id":280930,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1614493809,"is_pvip":true,"replies":[{"id":"102014","content":"都可以的哈","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1614521748,"ip_address":"","comment_id":280930,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1614493809","product_id":100069901,"comment_content":"etcd 的配置参数只能在启动的时候写到后面吗？  不能用统一写到配置文件中？","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516248,"discussion_content":"都可以的哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614521748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}