{"id":230018,"title":"14 | 空间检索（下）：“查找最近的加油站”和“查找附近的人”有何不同？","content":"<p>你好，我是陈东。</p><p>上一讲我们讲了，对于查询范围固定的应用需求，比如“查找附近的人”，我们可以根据规划好的查询区域大小，均匀划分所有的空间，然后用GeoHash将坐标转换为区域编码，以该区域编码作为Key开始检索。这样，我们就可以查到并取出该区域中的目标数据，对这些数据进行精准计算然后排序输出了。</p><p>但是，并不是所有应用的查询范围都是不变的。<strong>在一些基于地理位置的服务中，我们并不关心检索结果是否就在我们“附近”，而是必须要找到“最近”的一批满足我们要求的结果</strong>。这怎么理解呢？</p><p>我来举个例子，我们在长途自驾游的时候，突然发现车快没油了。这个时候，我们要在一个导航地图中查找最近的k个加油站给车加油，这些加油站可能并不在我们附近，但地图又必须要返回最近的k个结果。类似的情况还有很多，比如说，我们要查询最近的医院有哪些，查询最近的超市有哪些。那对于这一类的查询，如果当前范围内查不到，系统就需要自动调整查询范围，直到能返回k个结果为止。</p><p>对于这种需要动态调整范围的查询场景，我们有什么高效的检索方案呢？今天，我们就来探讨一下这个问题。</p><h2>直接进行多次查询会有什么问题？</h2><p>我们就以查找最近的加油站为例，一个直观的想法是，我们可以先获得当前位置的GeoHash编码，然后根据需求不停扩大查询范围进行多次查询，最后合并查询结果。这么说比较抽象，我们来分析一个具体的位置编码。</p><!-- [[[read_end]]] --><p>假设我们当前地址的GeoHash编码为wx4g6yc8，那我们可以先用wx4g6yc8去查找当前区域的加油站。如果查询的结果为空，我们就扩大范围。扩大查询范围的思路有两种。</p><p>第一种思路是，一圈一圈扩大范围。具体来说就是，我们第一次查询周边8个邻接区域，如果查询结果依然为空，就再扩大一圈，查询再外圈的16个区域。如果还是不够，下一次我们就查询再外圈的24个区域，依此类推。你会发现，这种方案的查询次数会成倍地增加，它的效率并不高。<br>\n<img src=\"https://static001.geekbang.org/resource/image/b8/ea/b8c83e0e14cde461eec4b0b49f0cbfea.jpg?wh=1920*729\" alt=\"\" title=\"逐步扩大查询周边区域\"></p><p>另一种思路是，我们每次都将查询单位大幅提高。比如说，直接将GeoHash编码去掉最后一位，用wx4g6yc再次去查询。如果有结果返回，但是不满足要返回Top K个的要求，那我们就继续扩大范围，再去掉一个编码，用wx4g6y去查询。就这样不停扩大单位的进行反复查询，直到结果大于k个为止。<br>\n<img src=\"https://static001.geekbang.org/resource/image/a1/fc/a1b1510445a0467d3a995620a80523fc.jpg?wh=1920*744\" alt=\"\" title=\"逐步扩大查询单位（以二进制区域编码为例，每次扩大4倍）\"></p><p>和第一种查询思路相比，在第二种思路中，我们每次查询的区域单位都得到了大范围的提升，因此，查询次数不会太多。比如说，对于一个长度为8的GeoHash编码，我们最多只需要查询8次（如果要求精准检索，那每次查询就扩展到周围8个同样大小的邻接区域即可，后面我就不再解释了）。</p><p>这个检索方案虽然用很少的次数就能“查询最近的k个结果”，但我们还需要保证，每次的查询请求都能快速返回结果。这就要求我们采用合适的索引技术，来处理GeoHash的每个层级。</p><p>比如说，如果使用基于哈希表的倒排检索来实现，我们就需要在GeoHash每个粒度层级上都分别建立一个单独的倒排表。这就意味着，每个层级的倒排表中都会出现全部的加油站，数据会被复制多次，这会带来非常大的存储开销。那我们是否有优化存储的方案呢？</p><p>我们可以利用GeoHash编码一维可排序的特点，使用数组或二叉检索树来存储和检索。由于数组和二叉检索树都可以支持范围查询，因此我们只需要建立一份粒度最细的索引就可以了。这样，当我们要检索更大范围的区域时，可以直接将原来的查询改写为范围查询。具体怎么做呢？</p><p>我来举个例子。在检索完wx4g6yc8这个区域编码以后，如果结果数量不够，还要检索wx4g6yc这个更大范围的区域编码，我们只要将查询改写为“查找区域编码在wx4g6yc0至wx4g6ycz之间的元素”，就可以利用同一个索引，来完成更高一个层级的区域查询了。同理，如果结果数量依然不够，那下一步我们就查询“区域编码在wx4g6y00至wx4g6yzz之间的元素”，依此类推。<br>\n<img src=\"https://static001.geekbang.org/resource/image/e5/c6/e5c2a638c5a081469913e52aa98fe4c6.jpg?wh=1920*902\" alt=\"\" title=\"利用有序数组查询示例\"></p><p>但是，这种方案有一个缺点，那就是在每次调整范围查询时，我们都要从头开始进行二分查找，不能充分利用上一次已经查询到的位置信息，这会带来无谓的重复检索的开销。那该如何优化呢？你可以先想一想，然后我们一起来看解决方案。</p><h2>如何利用四叉树动态调整查询范围？</h2><p>上一讲我们讲过，许多系统对于GeoHash的底层实现，其实都是使用二进制进行存储和计算的。而二进制区域编码的生成过程，就是一个逐渐二分空间的过程，经过二分后的区域之间是有层次关系的。如果我们把这个过程画下来，它就很像我们之前讲过的树形结构。</p><p>因此，我们可以尝试用树形结构来进行索引。这里，我们就要引入一个新的数据结构<strong>四叉树</strong>了。四叉树的树根节点代表了整个空间，每个节点的四个分叉分别表示四个子空间。其中，树根和中间节点不存储数据，只记录分叉指针。而数据只记录在最小的区域，也就是叶子节点上。</p><p>如果我们从根节点开始，不停地四分下去，直到每个分支的叶子节点都是最小粒度区域。那这样构建出来的四叉树，每个节点都有四个子节点，就叫作<strong>满四叉树</strong>。</p><p>对于满四叉树的每个节点，我们都可以编号。换句话说，我们可以按00、01、10、11的编号，来区分满四叉树的四个子节点。这样一来，只要我们从根节点遍历到叶子节点，然后将路径上每个节点的编号连起来，那最后得到的编码就是这个叶子节点所代表的区域编码。<br>\n<img src=\"https://static001.geekbang.org/resource/image/85/f5/85674c6f1d812695e6512ea55cbe4ff5.jpg?wh=1880*758\" alt=\"\" title=\"满四叉树\"></p><p>好了，现在我们知道了四叉树的结构和特点了，那我们怎么利用它完成自动调整范围的Top K检索呢？下面，我们通过一个例子来看看。</p><p>假设一个人所属的最小区域编码是0110，那我们在检索的时候，就以0110为Key，沿着四叉树的对应分支去寻找相应的区域，查询路径为01-10。如果查找到了叶子节点，并且返回的结果大于k个，就可以直接结束检索。如果返回结果不足k个，我们就得递归返回到上一层的父节点，然后以这整个父节点的区域编码为目标进行检索。这样，我们就避免了要再次从树根检索到父节点的开销，从而提升了检索效率。<br>\n<img src=\"https://static001.geekbang.org/resource/image/96/96/9661a343a32946b6bd6d96fd4736f196.jpg?wh=1897*1569\" alt=\"\" title=\"自动调整范围的Top K检索\"></p><h2>如何利用非满四叉树优化存储空间？</h2><p>尽管，我们使用以最小区域单位为叶子节点的满四叉树，能够很好的提升检索效率，但是在数据稀疏的时候，许多叶子节点中的数据可能是空的，这就很有可能造成大量的空间浪费。为了避免出现空间浪费，我们有一种改进方案是，使用动态节点分裂的<strong>非满四叉树</strong>。</p><p>首先，我们可以给每个叶子节点规定一个容纳上限。比如说，我们可以将上限设置为n。那么，一开始的四叉树只有一个根节点，这个根节点同时也是叶子节点，它表明了当前的全部空间范围。当有数据加入的时候，我们直接记录在这个节点中，查询时也只查询这个节点即可。因此，当插入的数据个数小于n时，我们不需要进行任何复杂的查找操作，只需要将根节点的所有数据读出，然后进行距离计算并排序即可。</p><p>随着加入的数据越来越多，如果一个叶子节点的容量超出了容纳上限，我们就将该节点进行分裂。首先，我们将该节点转为中间节点，然后，我们会为这个节点生成1至4个叶子节点（注意：不是一定要生成4个叶子节点），并将原来存在这个节点上的数据都转入到对应的叶子节点中。这样，我们就完成了分裂。</p><p>不过，有一种极端的情况是，这些数据都会转入到同一个下层叶子节点上。这时，我们就需要继续分裂这个叶子节点，直到每个叶子节点的容量在阈值下为止。</p><p>通过这种动态生成叶节点的方案，我们就能得到一棵非满四叉树。和满四叉树相比，它的叶子节点会更少，而且每个叶子节点表示的区域范围也可能是不一样的。这使得非满四叉树具有更好的空间利用率。非满四叉树的查询过程和满四叉树十分相似，也是根据当前的区域编码，找到对应的叶子节点，并根据该叶子节点上存储的数据数量，判断是否要递归扩大范围。这里我就不再详细说了。<br>\n<img src=\"https://static001.geekbang.org/resource/image/ee/c7/ee48d9c5df4625321c8a06db4dde7cc7.jpg?wh=1920*783\" alt=\"\" title=\"非满四叉树-动态分裂叶节点\"></p><h2>如何用前缀树优化GeoHash编码的索引？</h2><p>上面，我们都是用二进制编码来说明的。你可能会问，如果我们使用了GeoHash编码方式，是否也可以用类似的检索技术来索引呢？当然是可以的。实际上，对于字符串的检索，<strong>有一种专门的数据结构，叫作前缀树（Trie树）。</strong></p><p>前缀树的思路和四叉树非常相似，它也是一种逐层划分检索空间的数据结构。它的根节点代表了整个检索空间，然后每个中间节点和叶子节点都只存储一个字符，代表一个分支。这样，从根节点到叶子节点的路径连起来，就是一个完整的字符串。因此，当使用GeoHash编码来表示区域时，我们可以建立一个前缀树来进行索引，前缀树的每个节点最多会有32个子节点。<br>\n<img src=\"https://static001.geekbang.org/resource/image/a4/43/a466fc2217c89d537a587547a0589143.jpeg?wh=1920*1080\" alt=\"\" title=\"前缀树\"></p><p>那如何利用前缀树来检索呢？举个例子，当我们查询wx4g6yc8这个区域时，我们会沿着w-x-4-g-6-y-c-8的路径，检索到对应的叶子节点，然后取出这个叶子节点上存储的数据。如果这个区域的数据不足k个，就返回到父节点上，检索对应的区域，直到返回结果达到k个为止。由于整体思路和四叉树是十分相似的，这里就不展开细说了。</p><p>此外，前缀树除了用在GeoHash编码的检索上，也经常用于字典的检索，因此也叫字典树。字典树适用于匹配字符串的检索场合。</p><p>总结来说，利用树形结构来划分空间提高检索效率的方案，它的应用非常广泛。对于更高维度空间的最近邻检索，我们也可以使用类似的检索方案来划分空间。比如说，在三维空间中，八叉树就是常见的检索方案。那拓展到更高的维度，如k维，我们还可以使用<strong>k-d树</strong>（K-Dimensional Tree）来检索。</p><p>k-d树一种是更通用的，对任意维度都可以使用的检索方案。k-d树和四叉树、八叉树的检索思路并不相同，它在划分子空间的时候，并不是直接将整个空间划分为2^k个子空间，而是会选出最有区分度的一个维度，将该维度的空间进行二分，然后对划分出的子空间再进行同样的二分处理，所以，它实际上是一个二叉树。而且，由于它的分支数和维度k的具体值无关，因此具有更好的通用性。</p><p>事实上，k-d树在维度规模不大的场景下，确实具有不错的检索效率。但是，在成百上千的超高维度的场景中，k-d树的性能会急剧下降。那在高维空间中，我们又该如何快速地查找到最近的k个对象呢？这个问题，也是搜索引擎和推荐引擎在很多应用场景中都要解决问题。在后面两讲中，我们会对它作详细讲解。</p><h2>重点回顾</h2><p>今天，我们重点学习了，在二维空间中利用四叉树，来快速寻找最近的k个元素的方法。</p><p>在需要动态调整查询范围的场景下，对于二进制编码的二维空间的最近邻检索问题，我们可以通过四叉树来完成。四叉树可以很好地快速划分查询空间，并通过递归的方式高效地扩大查询范围。但是满四叉树经常会造成无谓的空间浪费，为了避免这个问题，在实际应用的时候，我们会选择使用非满四叉树来存储和索引编码。对于GeoHash编码的二维空间最近邻检索问题，我们也能通过类似的前缀树来提高检索效率。</p><h2>课堂讨论</h2><p>在非满四叉树的分裂过程中，为什么一个节点不一定会生成4个叶子节点？你能举一个例子吗？</p><p>欢迎在留言区畅所欲言，说出你的思考过程和最终答案。如果有收获，也欢迎把这一讲分享给你的朋友。</p>","comments":[{"had_liked":false,"id":212316,"user_name":"奕","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1588085816,"is_pvip":false,"replies":[{"id":78901,"content":"的确评论是没有提醒的，不过评论有。所以大家可以多提问。关于geohash去掉一个字符时的查询范围变化，我在这里也补充一下。\nGeohash一个字符是5个比特位，由于5是奇数，因此去掉的经纬度的个数是不相等的。比如说去掉了3个经度，2个纬度。因此就会从正方形变成长方形。\n而如果再去掉一个字符，那这一次正好反过来，会去掉2个经度，3个纬度。和上一次去掉的3个经度和2个纬度合起来，就正好一共去掉5个经度，5个纬度。因此又恢复成正方形。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1588120171,"ip_address":"","comment_id":212316,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"当前地址的 GeoHash 编码为 wx4g6yc8，这个根据上节学的编码规范，前4个字母代码纬度，后面四个代表经度，如果去掉最后一个字符 不是代表纬度不变，经度的范围扩大 2 ^ 5 倍，这样的范围不应该是一个长方形吗？ 怎么会是图中的正方形呢？\n----------------\n作者回复: 你看得很仔细。Geohash由于是5个比特位为一个字符，因此的确是去掉一个字符的时候，范围形状是长方形。再去掉一个字符，就又变成正方形。\n不过如果你再仔细看的话，你会发现这个图示是以二进制区域编码为例子的，因为它每次扩大只是四倍，而不是32倍。32倍的图不好画。。\n我看看让编辑在图示里加上说明优化一下吧。\n-----------------------\n老师，这里我在追问一下，在上一条下面评论怕你看不见：\n也就是经度和纬度的字符交替的去掉吗？我看文中是连续去了最后的两个字母，也就是只操作了经度，纬度没变。还有就是下面Trie树是不是也不应该按照字母的顺序形成一个链了？也应该是经度，纬度交替的形成了？","like_count":5},{"had_liked":false,"id":215190,"user_name":"时隐时现","can_delete":false,"product_type":"c1","uid":1111899,"ip_address":"","ucode":"DA4D622FF84920","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/5b/d2e7c2c4.jpg","comment_is_top":false,"comment_ctime":1588924329,"is_pvip":false,"replies":[{"id":79669,"content":"1.叶子节点其实存一个数组，记录所有属于这个区域的点就可以了。当然，如果你对于这个数组中的点还有其他的查询要求的话，也可以根据你的需要选用合适的数据结构，比如说不用数组，改用链表，或者位图。\n2.提升的确是有限的，不是数量级的提升。但是在工程实现上，倍数级的提升其实也值得去优化。一次查询+递归返回，比多次查询会有倍数级的提升。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1588947711,"ip_address":"","comment_id":215190,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"\n老师好，有2个问题\n1、文中所有树叶子节点里存放的是该区域内倒排索引的指针，还是倒排索引的所有key？\n2、四叉树和Tire树省去的只有从根节点到叶子节点的遍历，如果对GeoHash编码采用B+树，整个树高度顶多4层，这种提升是很有限的吧？还是说查询次数很多，每次查询省去1个IO就能累积节省很多？\n","like_count":4,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493475,"discussion_content":"的确评论是没有提醒的，不过评论有。所以大家可以多提问。关于geohash去掉一个字符时的查询范围变化，我在这里也补充一下。\nGeohash一个字符是5个比特位，由于5是奇数，因此去掉的经纬度的个数是不相等的。比如说去掉了3个经度，2个纬度。因此就会从正方形变成长方形。\n而如果再去掉一个字符，那这一次正好反过来，会去掉2个经度，3个纬度。和上一次去掉的3个经度和2个纬度合起来，就正好一共去掉5个经度，5个纬度。因此又恢复成正方形。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588120171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211370,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1587953649,"is_pvip":false,"replies":[{"id":78593,"content":"你这个思考很好。四叉树能否使用b+树类似的双向链表呢？我来说说我的理解。\n如果是满四叉树的话，那么我们可以将所有叶子节点使用双向链表连接起来。当我们查询到一个叶子节点不满足k个结果时，我们需要扩大范围，那么我们可以沿着左右两个方向去扩展。但是，我们是要扩展多少才OK呢？我们并不好判断新节点和当前节点的位置关系。你可以结合我文中的满四叉树的例子看看，如果查询到的节点是0110，其实离它最近的点可能是在1001区域中(见13讲中的区域编码图)，它需要往右边走三个元素才能到达这个节点。因此，遍历并无法判断当前节点和新扩展节点之间的关系。不如递归便捷。\n\n而如果是非满四叉树的话，叶子节点不是一个层级的，并且节点还会分裂。进行链表管理会更加麻烦。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587979585,"ip_address":"","comment_id":211370,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"在四叉树从当前子节点去搜索附近子节点时，需要去到上层父节点。如果子节点以双向链表类似B+树，是否可行呢？\n","like_count":4,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494348,"discussion_content":"1.叶子节点其实存一个数组，记录所有属于这个区域的点就可以了。当然，如果你对于这个数组中的点还有其他的查询要求的话，也可以根据你的需要选用合适的数据结构，比如说不用数组，改用链表，或者位图。\n2.提升的确是有限的，不是数量级的提升。但是在工程实现上，倍数级的提升其实也值得去优化。一次查询+递归返回，比多次查询会有倍数级的提升。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588947711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211312,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1587947908,"is_pvip":false,"replies":[{"id":78573,"content":"你说的对，肯定会有去重处理。不过16个编码块是覆盖4个编码块的，因此我们直接使用16个编码块的检索结果就好了。否则对四个编码块再进行去重比较，其实代价是差不多的。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587952520,"ip_address":"","comment_id":211312,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"在GeoHash通过去掉最后一位编码的方式来扩大搜索范围，比如这次搜索了四个编码块，下次搜索16个编码块。在这16个编码块里有上次已经搜索的四个编码块，请问老师，这里应该有去重处理吧？来避免重复查询。\n想到一个方式就是对于已经搜索过的hash编码标记下，避免重复搜索。\n","like_count":3,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493260,"discussion_content":"你这个思考很好。四叉树能否使用b+树类似的双向链表呢？我来说说我的理解。\n如果是满四叉树的话，那么我们可以将所有叶子节点使用双向链表连接起来。当我们查询到一个叶子节点不满足k个结果时，我们需要扩大范围，那么我们可以沿着左右两个方向去扩展。但是，我们是要扩展多少才OK呢？我们并不好判断新节点和当前节点的位置关系。你可以结合我文中的满四叉树的例子看看，如果查询到的节点是0110，其实离它最近的点可能是在1001区域中(见13讲中的区域编码图)，它需要往右边走三个元素才能到达这个节点。因此，遍历并无法判断当前节点和新扩展节点之间的关系。不如递归便捷。\n\n而如果是非满四叉树的话，叶子节点不是一个层级的，并且节点还会分裂。进行链表管理会更加麻烦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587979585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211285,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1587946075,"is_pvip":false,"replies":[{"id":78570,"content":"是的。极端情况就是所有插入的数据都属于一个小区域，那么根节点就不需要分裂出其他分叉了。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587952149,"ip_address":"","comment_id":211285,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"想到一种情况一个节点不一定生成四个叶子结点，比如某个城市的加油站都集中在某个小范围区域内，在上层节点看分裂子节点数量可能小于四。","like_count":3,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493247,"discussion_content":"你说的对，肯定会有去重处理。不过16个编码块是覆盖4个编码块的，因此我们直接使用16个编码块的检索结果就好了。否则对四个编码块再进行去重比较，其实代价是差不多的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587952520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099484,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/dc/37dac825.jpg","nickname":"阿豪","note":"","ucode":"AF3CB1CE262CEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344893,"discussion_content":"记住之前已经搜索过的区域，后面不再重复遍及","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611622755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1150927,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","nickname":"那时刻","note":"","ucode":"B0D150856C3A4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249689,"discussion_content":"从大区域到小区域搜索","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587952888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1150927,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","nickname":"那时刻","note":"","ucode":"B0D150856C3A4A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251358,"discussion_content":"不能这样，万一小区域已经够了，那么你查到的就不是最近的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588081844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249689,"ip_address":"","group_id":0},"score":251358,"extra":""}]}]},{"had_liked":false,"id":211265,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1587943289,"is_pvip":false,"replies":[{"id":78569,"content":"哈哈，的确四叉树的这个用法和思路其实和前缀树很像。从这个角度来看，空间检索和字符串检索是有相似的地方的。\nk-d树必须有，不过就像你说的，到了高维度以后，会有着无法精准检索的问题，因此许多高维度的相似检索问题都是使用近似最近邻检索方案来完成，而不是使用k-d树。这在后面会有介绍。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587952066,"ip_address":"","comment_id":211265,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"刚看到四叉树那段，就想着这不前缀树嘛，看到前缀树，想空间检索怎么能木有kd-tree，然后r-tree呢，我放心了，没有了哈哈哈。\n\n以我的认知看，到了高维，先不是数据结构高效不高效的问题，先是高维诅咒引发的相似度不再有效问题，大家都很相似肿么搞，于是才有一帮人搞什么流形学习，在高维空间找低维表示，知识的世界就怎么无限延展开，我要老了=_=，哈哈哈，这个落点😜\n\n最后回答下问题，这跟插入数据的分布情况有关，就比如根节点0011 0010  1001 1000，分裂，那根节点就可以多出两个二层节点00 10，然后一个节点指向0011 0010 ，另一个指向1001 1000，这种做法就偏b树的分裂方式，当然也可以优先对前缀最多的子节点集合进行分裂下推，都是动态分裂的策略问题，看你想达到什么效果，比如数据库b+树的分裂不会是两边子节点一样多，而是会让id 大的那边空一点，考虑的是id 经常是自增的，所以一般再有元素插入就在id 大的那边。","like_count":3,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493238,"discussion_content":"是的。极端情况就是所有插入的数据都属于一个小区域，那么根节点就不需要分裂出其他分叉了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587952149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239321,"user_name":"Lukia","can_delete":false,"product_type":"c1","uid":1028698,"ip_address":"","ucode":"C19472337BCCC6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/5a/574f5bb0.jpg","comment_is_top":false,"comment_ctime":1596503913,"is_pvip":false,"replies":[{"id":88530,"content":"是的，如果是精确距离查找的话，需要用九宫格法查询周围八个格子。性能开销会变大。不过这是精准查找和非精准查找的区别，不是四叉树和数组(或二叉树)的区别。同样是精准距离查找，四叉树和数组相比，依然性能会更好一些。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1596639519,"ip_address":"","comment_id":239321,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"老师好，请教一个问题，在使用4叉树做精确查找时感觉依然存在性能问题（需要同时查看周围的八个格子，在四叉树的表现上就是需要先查看当前节点的父节点，再查看父节点的兄弟节点的八个字节点","like_count":1,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493237,"discussion_content":"哈哈，的确四叉树的这个用法和思路其实和前缀树很像。从这个角度来看，空间检索和字符串检索是有相似的地方的。\nk-d树必须有，不过就像你说的，到了高维度以后，会有着无法精准检索的问题，因此许多高维度的相似检索问题都是使用近似最近邻检索方案来完成，而不是使用k-d树。这在后面会有介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587952066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211262,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1587942588,"is_pvip":false,"replies":[{"id":78567,"content":"不会的哦。如果有10这个数据的话，那么它会是和01平行的独立一个分支，并不会合并到01中。\n其实你在前面已经说出了正确答案了，就是“数据分布造成的，假设有00，01和10三类节点”。\n你可以看这么一个例子，根节点阈值是4，目前只存有3个数据，分别属于00，01和10三个区域。如果再加一个00区域的数据，引发了根节点分裂，那么由于数据分布只在00，01和10三个区域上，因此只需要分裂出这三个叶子节点就好，并不需要分裂出11这个没有存任何数据的叶子节点。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587951615,"ip_address":"","comment_id":211262,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"四叉树最终分裂的时候不是4个节点，可能是因为数据分布造成的.假设有00 01 和10三类节点，如果00和01的数据量大，那分裂的时候可能就只有00和01.10被分到了01节点上","like_count":1,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503062,"discussion_content":"是的，如果是精确距离查找的话，需要用九宫格法查询周围八个格子。性能开销会变大。不过这是精准查找和非精准查找的区别，不是四叉树和数组(或二叉树)的区别。同样是精准距离查找，四叉树和数组相比，依然性能会更好一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596639519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282561,"user_name":"愤怒的虾干","can_delete":false,"product_type":"c1","uid":1266043,"ip_address":"","ucode":"CEBD1B2BE7BCEE","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/7b/191a2112.jpg","comment_is_top":false,"comment_ctime":1615301466,"is_pvip":false,"replies":[{"id":102780,"content":"性能会有一些优化。\n往上遍历，那么定位到父节点的时间代价只有o(1)，然后再往父节点的其他子节点查找，数据一定是非空的(如果其他子节点数据都是空的，那么通过父节点的数据总量统计可以快速得知，从而能快速返回更上一层)。\n但如果是向外遍历，每次都要去检查周边一圈最小单位的格子是否有数据，这里面就可能有大量无效操作。\n因此，基于树的查询方案会效率更高，原因是可以快速跳过许多无效检查。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1615714642,"ip_address":"","comment_id":282561,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"老师你好，我有个疑问，如果四叉树中间节点不存数据，那么当往上遍历到父节点时仍然需要递归遍历父节点的其他子节点，这样不就和开始讲的原始流程一层层向外遍历判断一样了吗？感觉并没有减少检索次数，还请帮我解答这个疑问。","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493236,"discussion_content":"不会的哦。如果有10这个数据的话，那么它会是和01平行的独立一个分支，并不会合并到01中。\n其实你在前面已经说出了正确答案了，就是“数据分布造成的，假设有00，01和10三类节点”。\n你可以看这么一个例子，根节点阈值是4，目前只存有3个数据，分别属于00，01和10三个区域。如果再加一个00区域的数据，引发了根节点分裂，那么由于数据分布只在00，01和10三个区域上，因此只需要分裂出这三个叶子节点就好，并不需要分裂出11这个没有存任何数据的叶子节点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587951615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073125,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","nickname":"范闲","note":"","ucode":"F21FD7DF6BA53C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249775,"discussion_content":"明白您的意思。这种GeoHash其实和LSH有异曲同工之妙，都是对空间进行划分，缩小查找范围","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587961923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275293,"user_name":"胡鑫","can_delete":false,"product_type":"c1","uid":1066809,"ip_address":"","ucode":"85A8E2D7C998C8","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/39/8d3ec11b.jpg","comment_is_top":false,"comment_ctime":1611454429,"is_pvip":false,"replies":[{"id":102767,"content":"1.内存数据如何持久化存储，这是另一个话题。其实可以参考Redis的做法，通过将内存数据存入磁盘完成持久化。\n2.索引是可以单独使用，也可以组合使用的。如果单独使用的话，使用了树形索引，就不需要使用倒排索引;不过也可以组合使用:在上面几层使用树形索引，叶子节点使用倒排索引。具体的组合索引的例子，可以参考第二阶段的测试题中的例子。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1615712664,"ip_address":"","comment_id":275293,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"老师你好 这种四叉树或者前缀树一般都是存在内存中吧，怎么才能保证这些内存中的数据不丢失？\n\n是不是如果我们已经构建了四叉树的索引，就不需要倒排索引了，我所说的倒排索引是类似key=0101 value 等于0101上所有的点。谢谢","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516778,"discussion_content":"性能会有一些优化。\n往上遍历，那么定位到父节点的时间代价只有o(1)，然后再往父节点的其他子节点查找，数据一定是非空的(如果其他子节点数据都是空的，那么通过父节点的数据总量统计可以快速得知，从而能快速返回更上一层)。\n但如果是向外遍历，每次都要去检查周边一圈最小单位的格子是否有数据，这里面就可能有大量无效操作。\n因此，基于树的查询方案会效率更高，原因是可以快速跳过许多无效检查。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615714642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212316,"user_name":"奕","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1588085816,"is_pvip":false,"replies":[{"id":78901,"content":"的确评论是没有提醒的，不过评论有。所以大家可以多提问。关于geohash去掉一个字符时的查询范围变化，我在这里也补充一下。\nGeohash一个字符是5个比特位，由于5是奇数，因此去掉的经纬度的个数是不相等的。比如说去掉了3个经度，2个纬度。因此就会从正方形变成长方形。\n而如果再去掉一个字符，那这一次正好反过来，会去掉2个经度，3个纬度。和上一次去掉的3个经度和2个纬度合起来，就正好一共去掉5个经度，5个纬度。因此又恢复成正方形。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1588120171,"ip_address":"","comment_id":212316,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"当前地址的 GeoHash 编码为 wx4g6yc8，这个根据上节学的编码规范，前4个字母代码纬度，后面四个代表经度，如果去掉最后一个字符 不是代表纬度不变，经度的范围扩大 2 ^ 5 倍，这样的范围不应该是一个长方形吗？ 怎么会是图中的正方形呢？\n----------------\n作者回复: 你看得很仔细。Geohash由于是5个比特位为一个字符，因此的确是去掉一个字符的时候，范围形状是长方形。再去掉一个字符，就又变成正方形。\n不过如果你再仔细看的话，你会发现这个图示是以二进制区域编码为例子的，因为它每次扩大只是四倍，而不是32倍。32倍的图不好画。。\n我看看让编辑在图示里加上说明优化一下吧。\n-----------------------\n老师，这里我在追问一下，在上一条下面评论怕你看不见：\n也就是经度和纬度的字符交替的去掉吗？我看文中是连续去了最后的两个字母，也就是只操作了经度，纬度没变。还有就是下面Trie树是不是也不应该按照字母的顺序形成一个链了？也应该是经度，纬度交替的形成了？","like_count":5,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493475,"discussion_content":"的确评论是没有提醒的，不过评论有。所以大家可以多提问。关于geohash去掉一个字符时的查询范围变化，我在这里也补充一下。\nGeohash一个字符是5个比特位，由于5是奇数，因此去掉的经纬度的个数是不相等的。比如说去掉了3个经度，2个纬度。因此就会从正方形变成长方形。\n而如果再去掉一个字符，那这一次正好反过来，会去掉2个经度，3个纬度。和上一次去掉的3个经度和2个纬度合起来，就正好一共去掉5个经度，5个纬度。因此又恢复成正方形。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588120171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215190,"user_name":"时隐时现","can_delete":false,"product_type":"c1","uid":1111899,"ip_address":"","ucode":"DA4D622FF84920","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/5b/d2e7c2c4.jpg","comment_is_top":false,"comment_ctime":1588924329,"is_pvip":false,"replies":[{"id":79669,"content":"1.叶子节点其实存一个数组，记录所有属于这个区域的点就可以了。当然，如果你对于这个数组中的点还有其他的查询要求的话，也可以根据你的需要选用合适的数据结构，比如说不用数组，改用链表，或者位图。\n2.提升的确是有限的，不是数量级的提升。但是在工程实现上，倍数级的提升其实也值得去优化。一次查询+递归返回，比多次查询会有倍数级的提升。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1588947711,"ip_address":"","comment_id":215190,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"\n老师好，有2个问题\n1、文中所有树叶子节点里存放的是该区域内倒排索引的指针，还是倒排索引的所有key？\n2、四叉树和Tire树省去的只有从根节点到叶子节点的遍历，如果对GeoHash编码采用B+树，整个树高度顶多4层，这种提升是很有限的吧？还是说查询次数很多，每次查询省去1个IO就能累积节省很多？\n","like_count":4,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494348,"discussion_content":"1.叶子节点其实存一个数组，记录所有属于这个区域的点就可以了。当然，如果你对于这个数组中的点还有其他的查询要求的话，也可以根据你的需要选用合适的数据结构，比如说不用数组，改用链表，或者位图。\n2.提升的确是有限的，不是数量级的提升。但是在工程实现上，倍数级的提升其实也值得去优化。一次查询+递归返回，比多次查询会有倍数级的提升。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588947711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211370,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1587953649,"is_pvip":false,"replies":[{"id":78593,"content":"你这个思考很好。四叉树能否使用b+树类似的双向链表呢？我来说说我的理解。\n如果是满四叉树的话，那么我们可以将所有叶子节点使用双向链表连接起来。当我们查询到一个叶子节点不满足k个结果时，我们需要扩大范围，那么我们可以沿着左右两个方向去扩展。但是，我们是要扩展多少才OK呢？我们并不好判断新节点和当前节点的位置关系。你可以结合我文中的满四叉树的例子看看，如果查询到的节点是0110，其实离它最近的点可能是在1001区域中(见13讲中的区域编码图)，它需要往右边走三个元素才能到达这个节点。因此，遍历并无法判断当前节点和新扩展节点之间的关系。不如递归便捷。\n\n而如果是非满四叉树的话，叶子节点不是一个层级的，并且节点还会分裂。进行链表管理会更加麻烦。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587979585,"ip_address":"","comment_id":211370,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"在四叉树从当前子节点去搜索附近子节点时，需要去到上层父节点。如果子节点以双向链表类似B+树，是否可行呢？\n","like_count":4,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493260,"discussion_content":"你这个思考很好。四叉树能否使用b+树类似的双向链表呢？我来说说我的理解。\n如果是满四叉树的话，那么我们可以将所有叶子节点使用双向链表连接起来。当我们查询到一个叶子节点不满足k个结果时，我们需要扩大范围，那么我们可以沿着左右两个方向去扩展。但是，我们是要扩展多少才OK呢？我们并不好判断新节点和当前节点的位置关系。你可以结合我文中的满四叉树的例子看看，如果查询到的节点是0110，其实离它最近的点可能是在1001区域中(见13讲中的区域编码图)，它需要往右边走三个元素才能到达这个节点。因此，遍历并无法判断当前节点和新扩展节点之间的关系。不如递归便捷。\n\n而如果是非满四叉树的话，叶子节点不是一个层级的，并且节点还会分裂。进行链表管理会更加麻烦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587979585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211312,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1587947908,"is_pvip":false,"replies":[{"id":78573,"content":"你说的对，肯定会有去重处理。不过16个编码块是覆盖4个编码块的，因此我们直接使用16个编码块的检索结果就好了。否则对四个编码块再进行去重比较，其实代价是差不多的。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587952520,"ip_address":"","comment_id":211312,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"在GeoHash通过去掉最后一位编码的方式来扩大搜索范围，比如这次搜索了四个编码块，下次搜索16个编码块。在这16个编码块里有上次已经搜索的四个编码块，请问老师，这里应该有去重处理吧？来避免重复查询。\n想到一个方式就是对于已经搜索过的hash编码标记下，避免重复搜索。\n","like_count":3,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493247,"discussion_content":"你说的对，肯定会有去重处理。不过16个编码块是覆盖4个编码块的，因此我们直接使用16个编码块的检索结果就好了。否则对四个编码块再进行去重比较，其实代价是差不多的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587952520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1099484,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/dc/37dac825.jpg","nickname":"阿豪","note":"","ucode":"AF3CB1CE262CEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344893,"discussion_content":"记住之前已经搜索过的区域，后面不再重复遍及","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611622755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1150927,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","nickname":"那时刻","note":"","ucode":"B0D150856C3A4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249689,"discussion_content":"从大区域到小区域搜索","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587952888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1150927,"avatar":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","nickname":"那时刻","note":"","ucode":"B0D150856C3A4A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251358,"discussion_content":"不能这样，万一小区域已经够了，那么你查到的就不是最近的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588081844,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249689,"ip_address":"","group_id":0},"score":251358,"extra":""}]}]},{"had_liked":false,"id":211285,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1587946075,"is_pvip":false,"replies":[{"id":78570,"content":"是的。极端情况就是所有插入的数据都属于一个小区域，那么根节点就不需要分裂出其他分叉了。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587952149,"ip_address":"","comment_id":211285,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"想到一种情况一个节点不一定生成四个叶子结点，比如某个城市的加油站都集中在某个小范围区域内，在上层节点看分裂子节点数量可能小于四。","like_count":3,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493238,"discussion_content":"是的。极端情况就是所有插入的数据都属于一个小区域，那么根节点就不需要分裂出其他分叉了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587952149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211265,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1587943289,"is_pvip":false,"replies":[{"id":78569,"content":"哈哈，的确四叉树的这个用法和思路其实和前缀树很像。从这个角度来看，空间检索和字符串检索是有相似的地方的。\nk-d树必须有，不过就像你说的，到了高维度以后，会有着无法精准检索的问题，因此许多高维度的相似检索问题都是使用近似最近邻检索方案来完成，而不是使用k-d树。这在后面会有介绍。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587952066,"ip_address":"","comment_id":211265,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"刚看到四叉树那段，就想着这不前缀树嘛，看到前缀树，想空间检索怎么能木有kd-tree，然后r-tree呢，我放心了，没有了哈哈哈。\n\n以我的认知看，到了高维，先不是数据结构高效不高效的问题，先是高维诅咒引发的相似度不再有效问题，大家都很相似肿么搞，于是才有一帮人搞什么流形学习，在高维空间找低维表示，知识的世界就怎么无限延展开，我要老了=_=，哈哈哈，这个落点😜\n\n最后回答下问题，这跟插入数据的分布情况有关，就比如根节点0011 0010  1001 1000，分裂，那根节点就可以多出两个二层节点00 10，然后一个节点指向0011 0010 ，另一个指向1001 1000，这种做法就偏b树的分裂方式，当然也可以优先对前缀最多的子节点集合进行分裂下推，都是动态分裂的策略问题，看你想达到什么效果，比如数据库b+树的分裂不会是两边子节点一样多，而是会让id 大的那边空一点，考虑的是id 经常是自增的，所以一般再有元素插入就在id 大的那边。","like_count":3,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493237,"discussion_content":"哈哈，的确四叉树的这个用法和思路其实和前缀树很像。从这个角度来看，空间检索和字符串检索是有相似的地方的。\nk-d树必须有，不过就像你说的，到了高维度以后，会有着无法精准检索的问题，因此许多高维度的相似检索问题都是使用近似最近邻检索方案来完成，而不是使用k-d树。这在后面会有介绍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587952066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239321,"user_name":"Lukia","can_delete":false,"product_type":"c1","uid":1028698,"ip_address":"","ucode":"C19472337BCCC6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/5a/574f5bb0.jpg","comment_is_top":false,"comment_ctime":1596503913,"is_pvip":false,"replies":[{"id":88530,"content":"是的，如果是精确距离查找的话，需要用九宫格法查询周围八个格子。性能开销会变大。不过这是精准查找和非精准查找的区别，不是四叉树和数组(或二叉树)的区别。同样是精准距离查找，四叉树和数组相比，依然性能会更好一些。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1596639519,"ip_address":"","comment_id":239321,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"老师好，请教一个问题，在使用4叉树做精确查找时感觉依然存在性能问题（需要同时查看周围的八个格子，在四叉树的表现上就是需要先查看当前节点的父节点，再查看父节点的兄弟节点的八个字节点","like_count":1,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503062,"discussion_content":"是的，如果是精确距离查找的话，需要用九宫格法查询周围八个格子。性能开销会变大。不过这是精准查找和非精准查找的区别，不是四叉树和数组(或二叉树)的区别。同样是精准距离查找，四叉树和数组相比，依然性能会更好一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596639519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211262,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1587942588,"is_pvip":false,"replies":[{"id":78567,"content":"不会的哦。如果有10这个数据的话，那么它会是和01平行的独立一个分支，并不会合并到01中。\n其实你在前面已经说出了正确答案了，就是“数据分布造成的，假设有00，01和10三类节点”。\n你可以看这么一个例子，根节点阈值是4，目前只存有3个数据，分别属于00，01和10三个区域。如果再加一个00区域的数据，引发了根节点分裂，那么由于数据分布只在00，01和10三个区域上，因此只需要分裂出这三个叶子节点就好，并不需要分裂出11这个没有存任何数据的叶子节点。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1587951615,"ip_address":"","comment_id":211262,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"四叉树最终分裂的时候不是4个节点，可能是因为数据分布造成的.假设有00 01 和10三类节点，如果00和01的数据量大，那分裂的时候可能就只有00和01.10被分到了01节点上","like_count":1,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493236,"discussion_content":"不会的哦。如果有10这个数据的话，那么它会是和01平行的独立一个分支，并不会合并到01中。\n其实你在前面已经说出了正确答案了，就是“数据分布造成的，假设有00，01和10三类节点”。\n你可以看这么一个例子，根节点阈值是4，目前只存有3个数据，分别属于00，01和10三个区域。如果再加一个00区域的数据，引发了根节点分裂，那么由于数据分布只在00，01和10三个区域上，因此只需要分裂出这三个叶子节点就好，并不需要分裂出11这个没有存任何数据的叶子节点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587951615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073125,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","nickname":"范闲","note":"","ucode":"F21FD7DF6BA53C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249775,"discussion_content":"明白您的意思。这种GeoHash其实和LSH有异曲同工之妙，都是对空间进行划分，缩小查找范围","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587961923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282561,"user_name":"愤怒的虾干","can_delete":false,"product_type":"c1","uid":1266043,"ip_address":"","ucode":"CEBD1B2BE7BCEE","user_header":"https://static001.geekbang.org/account/avatar/00/13/51/7b/191a2112.jpg","comment_is_top":false,"comment_ctime":1615301466,"is_pvip":false,"replies":[{"id":102780,"content":"性能会有一些优化。\n往上遍历，那么定位到父节点的时间代价只有o(1)，然后再往父节点的其他子节点查找，数据一定是非空的(如果其他子节点数据都是空的，那么通过父节点的数据总量统计可以快速得知，从而能快速返回更上一层)。\n但如果是向外遍历，每次都要去检查周边一圈最小单位的格子是否有数据，这里面就可能有大量无效操作。\n因此，基于树的查询方案会效率更高，原因是可以快速跳过许多无效检查。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1615714642,"ip_address":"","comment_id":282561,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"老师你好，我有个疑问，如果四叉树中间节点不存数据，那么当往上遍历到父节点时仍然需要递归遍历父节点的其他子节点，这样不就和开始讲的原始流程一层层向外遍历判断一样了吗？感觉并没有减少检索次数，还请帮我解答这个疑问。","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516778,"discussion_content":"性能会有一些优化。\n往上遍历，那么定位到父节点的时间代价只有o(1)，然后再往父节点的其他子节点查找，数据一定是非空的(如果其他子节点数据都是空的，那么通过父节点的数据总量统计可以快速得知，从而能快速返回更上一层)。\n但如果是向外遍历，每次都要去检查周边一圈最小单位的格子是否有数据，这里面就可能有大量无效操作。\n因此，基于树的查询方案会效率更高，原因是可以快速跳过许多无效检查。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615714642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275293,"user_name":"胡鑫","can_delete":false,"product_type":"c1","uid":1066809,"ip_address":"","ucode":"85A8E2D7C998C8","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/39/8d3ec11b.jpg","comment_is_top":false,"comment_ctime":1611454429,"is_pvip":false,"replies":[{"id":102767,"content":"1.内存数据如何持久化存储，这是另一个话题。其实可以参考Redis的做法，通过将内存数据存入磁盘完成持久化。\n2.索引是可以单独使用，也可以组合使用的。如果单独使用的话，使用了树形索引，就不需要使用倒排索引;不过也可以组合使用:在上面几层使用树形索引，叶子节点使用倒排索引。具体的组合索引的例子，可以参考第二阶段的测试题中的例子。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1615712664,"ip_address":"","comment_id":275293,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100048401,"comment_content":"老师你好 这种四叉树或者前缀树一般都是存在内存中吧，怎么才能保证这些内存中的数据不丢失？\n\n是不是如果我们已经构建了四叉树的索引，就不需要倒排索引了，我所说的倒排索引是类似key=0101 value 等于0101上所有的点。谢谢","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514297,"discussion_content":"1.内存数据如何持久化存储，这是另一个话题。其实可以参考Redis的做法，通过将内存数据存入磁盘完成持久化。\n2.索引是可以单独使用，也可以组合使用的。如果单独使用的话，使用了树形索引，就不需要使用倒排索引;不过也可以组合使用:在上面几层使用树形索引，叶子节点使用倒排索引。具体的组合索引的例子，可以参考第二阶段的测试题中的例子。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615712664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263589,"user_name":"泽睿","can_delete":false,"product_type":"c1","uid":1038428,"ip_address":"","ucode":"8A35AE88D846EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/5c/918e312b.jpg","comment_is_top":false,"comment_ctime":1606191019,"is_pvip":false,"replies":[{"id":95961,"content":"前缀树的工程实现网上有挺多的。结合geohash就可以实现查询附近k个的功能。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1606623416,"ip_address":"","comment_id":263589,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100048401,"comment_content":"老师，利用前缀树查询附近k个，有相应的工程实现吗？","like_count":0},{"had_liked":false,"id":241817,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1597456522,"is_pvip":false,"replies":[{"id":89326,"content":"一般来说，我们不需要在中间节点记录最底层叶子节点的首尾部，而是通过树的遍历找到所有叶子节点即可。\n而按你的思路，对于满四叉树而言，我们可以为中间节点增加两个指针，记录对应的最底层叶子节点的首尾，并且最底层叶子节点之间像b+树一样前后相接(因为需要将对应范围的叶子节点全部取出)，这样的确可以提高遍历对应叶子节点的性能。我觉得是一个可行的设计。\n当然，这样的设计空间开销会更大，并且只适用于满四叉树，而不适应于非满四叉树。因为非满四叉树会动态分裂，会带来额外的调整首尾指针的开销。\n\n","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1597573826,"ip_address":"","comment_id":241817,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100048401,"comment_content":"老师有个问题四叉树查询的时候，说第一次查到的数据不够，扩大范围如何找到叶子节点那？是不是每个中间节点都有首尾指针指向其对应的最底层的叶子节点的首尾那？谢谢","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510243,"discussion_content":"前缀树的工程实现网上有挺多的。结合geohash就可以实现查询附近k个的功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606623416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212265,"user_name":"奕","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1588081333,"is_pvip":false,"replies":[{"id":78880,"content":"你看得很仔细。Geohash由于是5个比特位为一个字符，因此的确是去掉一个字符的时候，范围形状是长方形。再去掉一个字符，就又变成正方形。\n不过如果你再仔细看的话，你会发现这个图示是以二进制区域编码为例子的，因为它每次扩大只是四倍，而不是32倍。32倍的图不好画。。\n我看看让编辑在图示里加上说明优化一下吧。\n","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1588084608,"ip_address":"","comment_id":212265,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100048401,"comment_content":"当前地址的 GeoHash 编码为 wx4g6yc8，这个根据上节学的编码规范，前4个字母代码纬度，后面四个代表经度，如果去掉最后一个字符 不是代表纬度不变，经度的范围扩大  2 ^ 5 倍，这样的范围不应该是一个长方形吗？ 怎么会是图中的正方形呢？","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503853,"discussion_content":"一般来说，我们不需要在中间节点记录最底层叶子节点的首尾部，而是通过树的遍历找到所有叶子节点即可。\n而按你的思路，对于满四叉树而言，我们可以为中间节点增加两个指针，记录对应的最底层叶子节点的首尾，并且最底层叶子节点之间像b+树一样前后相接(因为需要将对应范围的叶子节点全部取出)，这样的确可以提高遍历对应叶子节点的性能。我觉得是一个可行的设计。\n当然，这样的设计空间开销会更大，并且只适用于满四叉树，而不适应于非满四叉树。因为非满四叉树会动态分裂，会带来额外的调整首尾指针的开销。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597573826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372734,"user_name":"ifelse","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1681527536,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":3,"score":3,"product_id":100048401,"comment_content":"学习打卡","like_count":1},{"had_liked":false,"id":306780,"user_name":"Geek_fe4c21","can_delete":false,"product_type":"c1","uid":2728180,"ip_address":"","ucode":"69CA3037FF67BF","user_header":"","comment_is_top":false,"comment_ctime":1628697840,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100048401,"comment_content":"有个疑问：查找最小精度周围的8个格子 和 GeoHash编码去掉一位 不是等价的呀，有可能会出现跨区的邻近点呀，所以这个还不是查找“附近的加油站“？","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493466,"discussion_content":"你看得很仔细。Geohash由于是5个比特位为一个字符，因此的确是去掉一个字符的时候，范围形状是长方形。再去掉一个字符，就又变成正方形。\n不过如果你再仔细看的话，你会发现这个图示是以二进制区域编码为例子的，因为它每次扩大只是四倍，而不是32倍。32倍的图不好画。。\n我看看让编辑在图示里加上说明优化一下吧。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588084608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251449,"discussion_content":"也就是经度和纬度的字符交替的去掉吗？我看文中是连续去了最后的两个字母，也就是只操作了经度，纬度没变。还有就是下面Trie树是不是也不应该按照字母的顺序形成一个链了？也应该是经度，纬度交替的形成了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588084942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251517,"discussion_content":"我可能没有说清楚。我补充一下。\nGeohash一个字符是5个比特位，由于5是奇数，因此去掉的经纬度的个数是不相等的。比如说去掉了3个经度，2个纬度。因此就会从正方形变成长方形。\n而如果再去掉一个字符，那这一次正好反过来，会去掉2个经度，3个纬度。和上一次去掉的3个经度和2个纬度合起来，就正好一共去掉5个经度，5个纬度。因此又恢复成正方形。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588087083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":251449,"ip_address":"","group_id":0},"score":251517,"extra":""},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":251744,"discussion_content":"哦，明白了，上节课那个二分15次行成的组合编码没有仔细看，刚才又回去看了一遍，原来形成geohash是经纬度交叉形成的。还是得认真看图，每一个细节都不能放过，要不然后面就会弄乱了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588117021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":251517,"ip_address":"","group_id":0},"score":251744,"extra":""}]}]},{"had_liked":false,"id":263589,"user_name":"泽睿","can_delete":false,"product_type":"c1","uid":1038428,"ip_address":"","ucode":"8A35AE88D846EE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/5c/918e312b.jpg","comment_is_top":false,"comment_ctime":1606191019,"is_pvip":false,"replies":[{"id":95961,"content":"前缀树的工程实现网上有挺多的。结合geohash就可以实现查询附近k个的功能。","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1606623416,"ip_address":"","comment_id":263589,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100048401,"comment_content":"老师，利用前缀树查询附近k个，有相应的工程实现吗？","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510243,"discussion_content":"前缀树的工程实现网上有挺多的。结合geohash就可以实现查询附近k个的功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606623416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241817,"user_name":"明翼","can_delete":false,"product_type":"c1","uid":1068361,"ip_address":"","ucode":"E77F86BEB3D5C1","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","comment_is_top":false,"comment_ctime":1597456522,"is_pvip":false,"replies":[{"id":89326,"content":"一般来说，我们不需要在中间节点记录最底层叶子节点的首尾部，而是通过树的遍历找到所有叶子节点即可。\n而按你的思路，对于满四叉树而言，我们可以为中间节点增加两个指针，记录对应的最底层叶子节点的首尾，并且最底层叶子节点之间像b+树一样前后相接(因为需要将对应范围的叶子节点全部取出)，这样的确可以提高遍历对应叶子节点的性能。我觉得是一个可行的设计。\n当然，这样的设计空间开销会更大，并且只适用于满四叉树，而不适应于非满四叉树。因为非满四叉树会动态分裂，会带来额外的调整首尾指针的开销。\n\n","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1597573826,"ip_address":"","comment_id":241817,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100048401,"comment_content":"老师有个问题四叉树查询的时候，说第一次查到的数据不够，扩大范围如何找到叶子节点那？是不是每个中间节点都有首尾指针指向其对应的最底层的叶子节点的首尾那？谢谢","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503853,"discussion_content":"一般来说，我们不需要在中间节点记录最底层叶子节点的首尾部，而是通过树的遍历找到所有叶子节点即可。\n而按你的思路，对于满四叉树而言，我们可以为中间节点增加两个指针，记录对应的最底层叶子节点的首尾，并且最底层叶子节点之间像b+树一样前后相接(因为需要将对应范围的叶子节点全部取出)，这样的确可以提高遍历对应叶子节点的性能。我觉得是一个可行的设计。\n当然，这样的设计空间开销会更大，并且只适用于满四叉树，而不适应于非满四叉树。因为非满四叉树会动态分裂，会带来额外的调整首尾指针的开销。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597573826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212265,"user_name":"奕","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1588081333,"is_pvip":false,"replies":[{"id":78880,"content":"你看得很仔细。Geohash由于是5个比特位为一个字符，因此的确是去掉一个字符的时候，范围形状是长方形。再去掉一个字符，就又变成正方形。\n不过如果你再仔细看的话，你会发现这个图示是以二进制区域编码为例子的，因为它每次扩大只是四倍，而不是32倍。32倍的图不好画。。\n我看看让编辑在图示里加上说明优化一下吧。\n","user_name":"作者回复","user_name_real":"陈东","uid":1165703,"ctime":1588084608,"ip_address":"","comment_id":212265,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100048401,"comment_content":"当前地址的 GeoHash 编码为 wx4g6yc8，这个根据上节学的编码规范，前4个字母代码纬度，后面四个代表经度，如果去掉最后一个字符 不是代表纬度不变，经度的范围扩大  2 ^ 5 倍，这样的范围不应该是一个长方形吗？ 怎么会是图中的正方形呢？","like_count":0,"discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493466,"discussion_content":"你看得很仔细。Geohash由于是5个比特位为一个字符，因此的确是去掉一个字符的时候，范围形状是长方形。再去掉一个字符，就又变成正方形。\n不过如果你再仔细看的话，你会发现这个图示是以二进制区域编码为例子的，因为它每次扩大只是四倍，而不是32倍。32倍的图不好画。。\n我看看让编辑在图示里加上说明优化一下吧。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588084608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251449,"discussion_content":"也就是经度和纬度的字符交替的去掉吗？我看文中是连续去了最后的两个字母，也就是只操作了经度，纬度没变。还有就是下面Trie树是不是也不应该按照字母的顺序形成一个链了？也应该是经度，纬度交替的形成了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588084942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":251517,"discussion_content":"我可能没有说清楚。我补充一下。\nGeohash一个字符是5个比特位，由于5是奇数，因此去掉的经纬度的个数是不相等的。比如说去掉了3个经度，2个纬度。因此就会从正方形变成长方形。\n而如果再去掉一个字符，那这一次正好反过来，会去掉2个经度，3个纬度。和上一次去掉的3个经度和2个纬度合起来，就正好一共去掉5个经度，5个纬度。因此又恢复成正方形。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588087083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":251449,"ip_address":"","group_id":0},"score":251517,"extra":""},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1165703,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/87/7a96366d.jpg","nickname":"陈东","note":"","ucode":"97CF7C67D83851","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":251744,"discussion_content":"哦，明白了，上节课那个二分15次行成的组合编码没有仔细看，刚才又回去看了一遍，原来形成geohash是经纬度交叉形成的。还是得认真看图，每一个细节都不能放过，要不然后面就会弄乱了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588117021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":251517,"ip_address":"","group_id":0},"score":251744,"extra":""}]}]},{"had_liked":false,"id":372734,"user_name":"ifelse","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1681527536,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":3,"score":3,"product_id":100048401,"comment_content":"学习打卡","like_count":1},{"had_liked":false,"id":306780,"user_name":"Geek_fe4c21","can_delete":false,"product_type":"c1","uid":2728180,"ip_address":"","ucode":"69CA3037FF67BF","user_header":"","comment_is_top":false,"comment_ctime":1628697840,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100048401,"comment_content":"有个疑问：查找最小精度周围的8个格子 和 GeoHash编码去掉一位 不是等价的呀，有可能会出现跨区的邻近点呀，所以这个还不是查找“附近的加油站“？","like_count":0}]}