{"id":87844,"title":"08 | 如何利用 Clang 为 App 提质？","content":"<p>你好，我是戴铭。</p><p>以前在工作中，有段时间连续发生了多次线上事故，在复盘时大家都提出是因为代码不规范、代码规范执行不到位，从而导致代码质量过差，无法监管，我们才被动处理线上事故。会上牢骚发完，会后应该怎么执行呢？</p><p>我们都知道，监管手段是需要自己动手建设的，第三方工具无法满足所有的业务技术规范监控。在上篇文章“Clang、Infer 和 OCLint ，我们应该使用谁来做静态分析？”中，我们提到通过 Clang 提供的丰富接口功能就可以开发出静态分析工具，进而管控代码质量。</p><p>除此之外，基于 Clang 还可以开发出用于代码增量分析、代码可视化、代码质量报告来保障 App 质量的系统平台，比如<a href=\"https://github.com/Ericsson/CodeChecker\">CodeChecker</a>。</p><p>比如，当周末发现线上问题时，你会发现很多时候分析问题的人都不在电脑边，无法及时处理问题。这时，我们就需要一款在线网页代码导航工具，比如 Mozilla 开发的 <a href=\"https://github.com/mozilla/dxr#dxr\">DXR</a>，方便在便携设备上去操作、分析问题，这样的工具都是基于 Clang 开发的。</p><p>Clang的功能如此强大，那么它到底是什么呢？Clang 做了哪些事情？Clang 还提供了什么能力可以为 App 提质呢？今天，我们就一起来看看这几个问题吧。</p><h2>什么是 Clang？</h2><p>关于Clang是什么，你可以先看一下如下所示的iOS开发的完整编译流程图。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/65/62/65a97ea469d900a5d17b49e509cd3462.png?wh=1024*768\" alt=\"\"></p><center><span class=\"reference\">图1 iOS开发完整的编译流程图</span></center><p>图中，左侧黑块部分就是Clang。Clang 是 C、C++、Objective-C 的编译前端，而Swift 有自己的编译前端（也就是Swift 前端多出的SIL optimizer）。</p><p>接下来，我们一起看看使用Clang有哪些优势。这，可以帮助我们理解本篇文章的后半部分内容。</p><p>第一，对于使用者来说，Clang 编译的速度非常快，对内存的使用率非常低，并且兼容GCC。</p><p>第二，对于代码诊断来说， Clang 也非常强大，Xcode 也是用的 Clang。使用 Clang 编译前端，可以精确地显示出问题所在的行和具体位置，并且可以确切地说明出现这个问题的原因，并指出错误的类型是什么，使得我们可以快速掌握问题的细节。这样的话，我们不用看源码，仅通过 Clang 突出标注的问题范围也能够了解到问题的情况。</p><p>第三，Clang对 typedef 的保留和展开也处理得非常好。typedef 可以缩写很长的类型，保留 typedef 对于粗粒度诊断分析很有帮助。但有时候，我们还需要了解细节，对 typedef 进行展开即可。</p><p>第四，Fix-it 提示也是 Clang 提供的一种快捷修复源码问题的方式。在宏的处理上，很多宏都是深度嵌套的， Clang 会自动打印实例化信息和嵌套范围信息来帮助你进行宏的诊断和分析。</p><p>第五，Clang 的架构是模块化的。除了代码静态分析外，利用其输出的接口还可以开发用于代码转义、代码生成、代码重构的工具，方便与IDE 进行集成。</p><p>与Clang的强大功能相对立的是，GCC 对于 Objective-C 的支持比较差，效率和性能都没有办法达到苹果公司的要求，而且它还难以推动 GCC 团队。</p><p>于是，苹果公司决定自己来掌握编译相关的工具链，将天才克里斯·拉特纳（Chris Lattner）招入麾下后开发了 LLVM 工具套件，将 GCC 全面替换成了 LLVM。这，也使得 Swift这门集各种高级语言特性的语言，能够在非常高的起点上，出现在开发者面前。</p><p>Clang是基于C++开发的，如果你想要了解 Clang 的话，需要有一定的 C++ 基础。但是，Clang 源码本身质量非常高，有很多值得学习的地方，比如说目录清晰、功能解耦做得很好、分类清晰方便组合和复用、代码风格统一而且规范、注释量大便于阅读等。</p><p>我们阅读Clang的源码，除了可以帮助我们了解Clang以外，还可以给我们提供一个学习优秀代码、提升编程思维能力的机会。特别是在编写自定义插件或者工具时，如果你对用到的接口了解得不是很清楚，或者好奇接口的实现，这时候去看源码，对于你的帮助是非常大的。</p><p>你可以点击<a href=\"https://code.woboq.org/llvm/clang/\">这里的链接</a>，在线查看 Clang 源码。</p><p>查看Clang的源码，你会发现它不光工程代码量巨大，而且工具也非常多，相互间的关系复杂。但是，好在 Clang 提供了一个易用性很高的黑盒 Driver，用于封装前端命令和工具链的命令，使得其易用性得到了很大的提升。</p><h2>Clang 做了哪些事？</h2><p>接下来，我通过前面提到的 Driver 命令来看看 Clang 对源码做了哪些事儿？</p><p>我们先看看下面这段示例代码：</p><pre><code>int main()\n{\n\tint a;\n\tint b = 10;\n\ta = b;\n\treturn a;\n}\n</code></pre><p><strong>首先，Clang 会对代码进行词法分析，将代码切分成 Token</strong>。输入一个命令可以查看上面代码的所有的 Token。命令如下：</p><pre><code>clang -fmodules -E -Xclang -dump-tokens main.m\n</code></pre><p>这个命令的作用是，显示每个 Token 的类型、值，以及位置。你可以在<a href=\"https://opensource.apple.com//source/lldb/lldb-69/llvm/tools/clang/include/clang/Basic/TokenKinds.def\">这个链接</a>中，看到Clang 定义的所有Token 类型。我们可以把这些Token类型，分为下面这4类。</p><ul>\n<li>\n<p>关键字：语法中的关键字，比如 if、else、while、for 等；</p>\n</li>\n<li>\n<p>标识符：变量名；</p>\n</li>\n<li>\n<p>字面量：值、数字、字符串；</p>\n</li>\n<li>\n<p>特殊符号：加减乘除等符号。</p>\n</li>\n</ul><p><strong>接下来，词法分析完后就会进行语法分析</strong>，将输出的 Token 先按照语法组合成语义，生成类似 VarDecl 这样的节点，然后将这些节点按照层级关系构成抽象语法树（AST）。</p><p>在终端输入下面的这条命令，你就可以查看前面源码的语法树：</p><pre><code>clang -fmodules -fsyntax-only -Xclang -ast-dump main.m\n</code></pre><p>打印出来效果如下：</p><pre><code>TranslationUnitDecl 0xc75b450 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt;\n|-TypedefDecl 0xc75b740 &lt;&lt;invalid sloc&gt;&gt; &lt;invalid sloc&gt; implicit __builtin_va_list ‘char *’\n`-FunctionDecl 0xc75b7b0 &lt;test.cpp:1:1, line:7:1&gt; line:1:5 main ‘int (void)’\n  `-CompoundStmt 0xc75b978 &lt;line:2:1, line:7:1&gt;\n    |-DeclStmt 0xc75b870 &lt;line:3:2, col:7&gt;\n    | `-VarDecl 0xc75b840 &lt;col:2, col:6&gt; col:6 used a ‘int’\n    |-DeclStmt 0xc75b8d8 &lt;line:4:2, col:12&gt;\n    | `-VarDecl 0xc75b890 &lt;col:2, col:10&gt; col:6 used b ‘int’ cinit\n    |   `-IntegerLiteral 0xc75b8c0 &lt;col:10&gt; ‘int’ 10\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; a = b &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n    |-BinaryOperator 0xc75b928 &lt;line:5:2, col:6&gt; ‘int’ lvalue ‘=‘\n    | |-DeclRefExpr 0xc75b8e8 &lt;col:2&gt; ‘int’ lvalue Var 0xc75b840 ‘a’ ‘int’\n    | `-ImplicitCastExpr 0xc75b918 &lt;col:6&gt; ‘int’ &lt;LValueToRValue&gt;\n    |   `-DeclRefExpr 0xc75b900 &lt;col:6&gt; ‘int’ lvalue Var 0xc75b890 ‘b’ ‘int’\n&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n    `-ReturnStmt 0xc75b968 &lt;line:6:2, col:9&gt;\n      `-ImplicitCastExpr 0xc75b958 &lt;col:9&gt; ‘int’ &lt;LValueToRValue&gt;\n        `-DeclRefExpr 0xc75b940 &lt;col:9&gt; ‘int’ lvalue Var 0xc75b840 ‘a’ ‘int\n</code></pre><p>其中TranslationUnitDecl 是根节点，表示一个编译单元；Decl 表示一个声明；Expr 表示的是表达式；Literal 表示字面量，是一个特殊的 Expr；Stmt 表示陈述。</p><p>除此之外，Clang 还有众多种类的节点类型。Clang 里，节点主要分成 Type 类型、Decl 声明、Stmt 陈述这三种，其他的都是这三种的派生。通过扩展这三类节点，就能够将无限的代码形态用有限的形式来表现出来了。</p><p>接下来，我们再看看Clang提供了什么能力。</p><h2>Clang 提供了什么能力？</h2><p>Clang 为一些需要分析代码语法、语义信息的工具提供了基础设施。这些基础设施就是 LibClang、Clang Plugin 和 LibTooling。</p><h3>LibClang</h3><p>LibClang 提供了一个稳定的高级 C 接口，Xcode 使用的就是 LibClang。LibClang 可以访问 Clang 的上层高级抽象的能力，比如获取所有 Token、遍历语法树、代码补全等。由于 API 很稳定，Clang 版本更新对其影响不大。但是，LibClang 并不能完全访问到 Clang AST 信息。</p><p>使用 LibClang 可以直接使用它的 C API。官方也提供了 Python binding 脚本供你调用。还有开源的 node-js/ruby binding。你要是不熟悉其他语言，还有个第三方开源的 Objective-C 写的<a href=\"https://github.com/macmade/ClangKit\">ClangKit库</a>可供使用。</p><h3>Clang Plugins</h3><p>Clang Plugins 可以让你在 AST 上做些操作，这些操作能够集成到编译中，成为编译的一部分。插件是在运行时由编译器加载的动态库，方便集成到构建系统中。</p><p>使用 Clang Plugins 一般都是希望能够完全控制 Clang AST，同时能够集成在编译流程中，可以影响编译的过程，进行中断或者提示。关于 Clang Plugins 开发的更多内容，我会在第37篇文章“如何编写 Clang 插件？”中和你详细说明。</p><h3>LibTooling</h3><p>LibTooling 是一个 C++ 接口，通过 LibTooling 能够编写独立运行的语法检查和代码重构工具。LibTooling 的优势如下：</p><ul>\n<li>\n<p>所写的工具不依赖于构建系统，可以作为一个命令单独使用，比如 clang-check、clang-fixit、clang-format；</p>\n</li>\n<li>\n<p>可以完全控制 Clang AST；</p>\n</li>\n<li>\n<p>能够和 Clang Plugins 共用一份代码。</p>\n</li>\n</ul><p>与Clang Plugins 相比，LibTooling 无法影响编译过程；与 LibClang 相比，LibTooling 的接口没有那么稳定，也无法开箱即用，当 AST 的 API 升级后需要更新接口的调用。</p><p>但是，LibTooling 基于能够完全控制 Clang AST 和可独立运行的特点，可以做的事情就非常多了。</p><ul>\n<li>\n<p>改变代码：可以改变 Clang 生成代码的方式。基于现有代码可以做出大量的修改。还可以进行语言的转换，比如把 OC 语言转成 JavaScript 或者 Swift。</p>\n</li>\n<li>\n<p>做检查：检查命名规范，增加更强的类型检查，还可以按照自己的定义进行代码的检查分析。</p>\n</li>\n<li>\n<p>做分析：对源码做任意类型分析，甚至重写程序。给 Clang 添加一些自定义的分析，创建自己的重构器，还可以基于工程生成相关图形或文档进行分析。</p>\n</li>\n</ul><p>在 LibTooling 的基础之上有个开发人员工具合集 Clang tools，Clang tools 作为 Clang 项目的一部分，已经提供了一些工具，主要包括：</p><ul>\n<li>\n<p>语法检查工具 clang-check；</p>\n</li>\n<li>\n<p>自动修复编译错误工具 clang-fixit；</p>\n</li>\n<li>\n<p>自动代码格式工具 clang-format；</p>\n</li>\n<li>\n<p>新语言和新功能的迁移工具；</p>\n</li>\n<li>\n<p>重构工具。</p>\n</li>\n</ul><p>如果你打算基于 LibTooling 来开发工具，Clang tools 将会是很好的范例。</p><p>官方有一个教程叫作 <a href=\"http://clang.llvm.org/docs/LibASTMatchersTutorial.html\">Tutorial for building tools using LibTooling and LibASTMatchers</a>，可以一步步地告诉你怎样使用 LibTooling 来构建一个语言转换的工具。通过这个教程，你可以掌握LibTooling 的基本使用方法。</p><h2>小结</h2><p>在今天这篇文章中，我和你说了 Clang 做了什么，以及提供了什么能力。从中可以看出，Clang 提供的能力都是基于Clang AST 接口的。</p><p>这个接口的功能非常强大，除了能够获取符号在源码中的位置，还可以获取方法的调用关系，类型定义和源码里的所有内容。</p><p>以这个接口为基础，再利用 LibClang、 Clang Plugin 和 LibTooling 这些封装好的工具，就足够我们去开发出满足静态代码分析需求的工具了。比如，我们可以使用 Clang Plugin 自动在构建阶段检查是否满足代码规范，不满足则直接无法构建成功。再比如，我们可以使用 LibTooling 自动完成代码的重构，与手动重构相比会更加高效、精确。</p><p>还记得我们在上一篇文章“Clang、Infer 和 OCLint ，我们应该使用谁来做静态分析？”中，提到的Clang 静态分析器的引擎吗？它使用的就是Clang AST 接口，对于节点 Stmt、Decl、Type 及其派生节点 Clang AST 都有对应的接口，特别是 RecursiveASTVisitor 接口可以完整遍历整个 AST。通过对 AST 的完整遍历以及节点数据获取，就能够对数据流进行分析，比如Iterative Data Flow Analysis、path-sensitive、path-insensitive、flow-sensitive等。</p><p>此外，还能够模拟内存分配进行分析，Clang 静态分析器里对应的模块是 MemRegion，其中内存模型是基于 “<a href=\"http://lcs.ios.ac.cn/~xuzb/canalyze/memmodel.pdf\">A Memory Model for Static Analysis of C Programs</a>”这篇论文而来。在Clang里的具体实现代码，你可以查看 <a href=\"https://code.woboq.org/llvm/clang/include/clang/StaticAnalyzer/Core/PathSensitive/MemRegion.h.html\">MemRegion.h</a> 和 <a href=\"https://code.woboq.org/llvm/clang/lib/StaticAnalyzer/Core/RegionStore.cpp.html\">RegionStore.cpp</a> 这两个文件。对于 Clang 静态分析器的原理描述，你可以参看<a href=\"https://github.com/llvm-mirror/clang/tree/master/lib/StaticAnalyzer\">官方说明</a>。</p><p>手中握有好兵器，你对App 代码质量的掌控也就有了底气。程序员开发软件的目的，就是要提高开发效率，同时也不要忽略检查代码质量时的效率。所以，对于开发者来说，我们要避免人工繁琐的 Review 代码，并减少由人工带来的低效和高差错率。我们的原则就是，能够让程序自动解决的，绝对不要人工手动完成。</p><h2>课后作业</h2><p>请你搭建 Clang 的开发环境，然后基于 LibTooling 编写一个简单语法转换工具，比如把 C 语言的方法调用转 Lisp 方法调用。</p><p>C 的方法调用代码：</p><pre><code>multiply(add(1.4, 3))\n</code></pre><p>Lisp 的方法调用代码：</p><pre><code>(multiply (add 1.4 3))\n</code></pre><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","neighbors":{"left":{"article_title":"07 | Clang、Infer 和 OCLint ，我们应该使用谁来做静态分析？","id":87477},"right":{"article_title":"09 | 无侵入的埋点方案如何实现？","id":87925}},"comments":[{"had_liked":false,"id":80725,"user_name":"Roger","can_delete":false,"product_type":"c1","uid":1398367,"ip_address":"","ucode":"20C05442E0C0DE","user_header":"https://static001.geekbang.org/account/avatar/00/15/56/5f/b3f3d82e.jpg","comment_is_top":false,"comment_ctime":1553703364,"is_pvip":false,"replies":[{"id":"29477","content":"赞","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553856641,"ip_address":"","comment_id":80725,"utype":1}],"discussion_count":1,"race_medal":0,"score":"246366839236","product_id":100024501,"comment_content":"喂完奶来评论下，最近摸索出了学习这套教程的方法：先看文章，配合着音频防止走神。然后在github和google上搜索相关知识进行系统学习，比如之前讲到的启动优化，github上就有非常好的启动优化总结。再比如LLVM相关知识，腾讯课堂里小码哥就讲得非常仔细。所以将文章作为引子，然后系统的学习吧！","like_count":58,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444953,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553856641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80923,"user_name":"里奇","can_delete":false,"product_type":"c1","uid":1194826,"ip_address":"","ucode":"44F066658898F0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLpULTXKVEdpcic3J8yzZRMlAkHzuII8ap6cNqnPuviaxVunhkoOb60KIQSMmFH6Z65s3iaJb6H7Qbng/132","comment_is_top":false,"comment_ctime":1553756618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40208462282","product_id":100024501,"comment_content":"老师可以写一点单元测试和持续集成相关的知识吗？","like_count":9},{"had_liked":false,"id":81599,"user_name":"tomcat","can_delete":false,"product_type":"c1","uid":1133556,"ip_address":"","ucode":"A7CE9FEE5E03CD","user_header":"https://static001.geekbang.org/account/avatar/00/11/4b/f4/de7809c1.jpg","comment_is_top":false,"comment_ctime":1553958202,"is_pvip":false,"replies":[{"id":"29817","content":"赞","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1554199597,"ip_address":"","comment_id":81599,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35913696570","product_id":100024501,"comment_content":"我这里有一个利用clang libtooling进行方法名替换的应用，大家可以看看加深理解，https:&#47;&#47;www.jianshu.com&#47;p&#47;3a8fb6f7c55f","like_count":8,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445264,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554199597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2212214,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BgHpE3jibeSchicoGSyBibtACtdibsXDwC3uBhWw04DHw7ePDliaBhJj2mq0WZCbmf1VctJia1kBGnT0aIzh0M4ibfM4Q/132","nickname":"Geek_8bbcd0","note":"","ucode":"098DD78E13CD27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309719,"discussion_content":"实则该文章介绍的方法名混淆，还不够完善\n1.方法名是属性访问器方法需要处理对应的属性名字，实例变量名字\n2.属性中指定了setter和getter方法\n3.属性的实现，synthesize和dynamic\n4.宏，宏字符串化和串联\n5.加前以及不能二次混淆也不太友好\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601424753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80756,"user_name":"鹏哥","can_delete":false,"product_type":"c1","uid":1459217,"ip_address":"","ucode":"FFF5EBDF4606CA","user_header":"https://static001.geekbang.org/account/avatar/00/16/44/11/37ec1136.jpg","comment_is_top":false,"comment_ctime":1553731127,"is_pvip":false,"replies":[{"id":"29476","content":"根据工作需要来选择吧","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553856633,"ip_address":"","comment_id":80756,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35913469495","product_id":100024501,"comment_content":"老师，前面的课程中你提到对某一领域要做到精而不是都只是了解，那你这里有这么多内容，我应该怎么选择需要去深入研究的内容呢？还是说所有的都需要去深入研究？","like_count":8,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444964,"discussion_content":"根据工作需要来选择吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553856633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80780,"user_name":"孟勃宇","can_delete":false,"product_type":"c1","uid":1456518,"ip_address":"","ucode":"09321FA56E876B","user_header":"https://static001.geekbang.org/account/avatar/00/16/39/86/8828805f.jpg","comment_is_top":false,"comment_ctime":1553733471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31618504543","product_id":100024501,"comment_content":"提个建议， 页面的跳转链接可以选择在新标签页打开。","like_count":7},{"had_liked":false,"id":81924,"user_name":"LaiYoung_","can_delete":false,"product_type":"c1","uid":1144160,"ip_address":"","ucode":"6B86A5ACFB789C","user_header":"https://static001.geekbang.org/account/avatar/00/11/75/60/e0adab56.jpg","comment_is_top":false,"comment_ctime":1554082891,"is_pvip":false,"replies":[{"id":"29687","content":"赞","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1554116863,"ip_address":"","comment_id":81924,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18733952075","product_id":100024501,"comment_content":"我写了两篇入门文章 https:&#47;&#47;github.com&#47;CYBoys&#47;Blogs&#47;blob&#47;master&#47;LLVM_Clang&#47;LLVM%20%26%20Clang%20%E5%85%A5%E9%97%A8.md 和 https:&#47;&#47;github.com&#47;CYBoys&#47;Blogs&#47;blob&#47;master&#47;LLVM_Clang&#47;Clang%20Plugin%20%E4%B9%8B%20Debug.md 还有一个关于代码规范的插件，没有戴老师写得好","like_count":4,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445392,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554116863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2212214,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BgHpE3jibeSchicoGSyBibtACtdibsXDwC3uBhWw04DHw7ePDliaBhJj2mq0WZCbmf1VctJia1kBGnT0aIzh0M4ibfM4Q/132","nickname":"Geek_8bbcd0","note":"","ucode":"098DD78E13CD27","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309721,"discussion_content":"插件在xcode10已经不被支持了吧，替换成extension了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601424966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":251212,"user_name":"Geek_8bbcd0","can_delete":false,"product_type":"c1","uid":2212214,"ip_address":"","ucode":"098DD78E13CD27","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BgHpE3jibeSchicoGSyBibtACtdibsXDwC3uBhWw04DHw7ePDliaBhJj2mq0WZCbmf1VctJia1kBGnT0aIzh0M4ibfM4Q/132","comment_is_top":false,"comment_ctime":1601425289,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10191359881","product_id":100024501,"comment_content":"本人也有写基于llvm clang 的libtooling 模块开发的系列文章《基于llvm clang 的objective-c代码混淆》系列，以及总结了开发中遇到的问题。并实现了一个完整的混淆工具，包括源码读取，编译参数生成，混淆代码等！特来留下痕迹：www.banmalu.top","like_count":3},{"had_liked":false,"id":92973,"user_name":"长方体混凝土移动工程师","can_delete":false,"product_type":"c1","uid":1262728,"ip_address":"","ucode":"00CB4C4AB4D119","user_header":"https://static001.geekbang.org/account/avatar/00/13/44/88/69580101.jpg","comment_is_top":false,"comment_ctime":1557370924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10147305516","product_id":100024501,"comment_content":"学习clang一段时间来整理的资料与详细注释<br>提供了完整的plugin与libtooling 开发的最简单的代码<br>https:&#47;&#47;github.com&#47;czqasngit&#47;iOS_senior<br>- _ -","like_count":2},{"had_liked":false,"id":81174,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":1456901,"ip_address":"","ucode":"8C1AD026C1AC84","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/05/b2776d73.jpg","comment_is_top":false,"comment_ctime":1553825801,"is_pvip":false,"replies":[{"id":"29451","content":"有进步就好，赞","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553830660,"ip_address":"","comment_id":81174,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10143760393","product_id":100024501,"comment_content":"每天学一课都能感觉到自己的进步，课程很好，就靠学习来打发无聊的时间了","like_count":2,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445103,"discussion_content":"有进步就好，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553830660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115410,"user_name":"Guarantee","can_delete":false,"product_type":"c1","uid":1388495,"ip_address":"","ucode":"46380E86F03F26","user_header":"https://static001.geekbang.org/account/avatar/00/15/2f/cf/fb214a2c.jpg","comment_is_top":false,"comment_ctime":1563583585,"is_pvip":false,"replies":[{"id":"42871","content":"不是，是一种平台无关的中间代码","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1563983389,"ip_address":"","comment_id":115410,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858550881","product_id":100024501,"comment_content":"老师，图片上的中间代码 IR，是不是汇编代码？","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459096,"discussion_content":"不是，是一种平台无关的中间代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563983389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81019,"user_name":"cc","can_delete":false,"product_type":"c1","uid":1217018,"ip_address":"","ucode":"EC3F4810293ED8","user_header":"https://static001.geekbang.org/account/avatar/00/12/91/fa/2416b166.jpg","comment_is_top":false,"comment_ctime":1553777239,"is_pvip":false,"replies":[{"id":"29461","content":"找到场景就有学下去的动力了，下一篇会提到 Clang 的一个很实际的用处。加油","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553836394,"ip_address":"","comment_id":81019,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5848744535","product_id":100024501,"comment_content":"都不懂 我该何去何从呢","like_count":2,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445048,"discussion_content":"找到场景就有学下去的动力了，下一篇会提到 Clang 的一个很实际的用处。加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553836394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80804,"user_name":"Crazy_cc","can_delete":false,"product_type":"c1","uid":1457792,"ip_address":"","ucode":"1F826C25B75D88","user_header":"https://static001.geekbang.org/account/avatar/00/16/3e/80/31782d05.jpg","comment_is_top":false,"comment_ctime":1553736414,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848703710","product_id":100024501,"comment_content":"别问，学就是了！","like_count":1},{"had_liked":false,"id":320789,"user_name":"平淡得像一只猫","can_delete":false,"product_type":"c1","uid":2839197,"ip_address":"","ucode":"521845EF3B4B7F","user_header":"https://static001.geekbang.org/account/avatar/00/2b/52/9d/097598cb.jpg","comment_is_top":false,"comment_ctime":1636511837,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1636511837","product_id":100024501,"comment_content":"libtooling目前网上的方案都没有办法很好的落地，大型工程中根本无法应用，会有很多报错，找不到符号定义等等等问题","like_count":0},{"had_liked":false,"id":288948,"user_name":"素问","can_delete":false,"product_type":"c1","uid":2571120,"ip_address":"","ucode":"7B8268DE08FCC8","user_header":"https://static001.geekbang.org/account/avatar/00/27/3b/70/09eb8dba.jpg","comment_is_top":false,"comment_ctime":1618797335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618797335","product_id":100024501,"comment_content":"A Memory Model for Static Analysis of C Programs 这篇文章的链接失效了","like_count":0},{"had_liked":false,"id":287192,"user_name":"涛","can_delete":false,"product_type":"c1","uid":1455718,"ip_address":"","ucode":"A6AC56112A44D4","user_header":"https://static001.geekbang.org/account/avatar/00/16/36/66/8fc1c54b.jpg","comment_is_top":false,"comment_ctime":1617809566,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1617809566","product_id":100024501,"comment_content":"看了文章才知道有这些东西 ，我是不是太菜了，还有救吗","like_count":0},{"had_liked":false,"id":238634,"user_name":"zhonglaoban","can_delete":false,"product_type":"c1","uid":1160792,"ip_address":"","ucode":"F570E9D65EC004","user_header":"https://static001.geekbang.org/account/avatar/00/11/b6/58/f0cb60be.jpg","comment_is_top":false,"comment_ctime":1596245867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596245867","product_id":100024501,"comment_content":"用过clang-format，配合mac的automator，还挺方便的。","like_count":0},{"had_liked":false,"id":98925,"user_name":"GODV","can_delete":false,"product_type":"c1","uid":1454163,"ip_address":"","ucode":"DB311A5D9EE770","user_header":"https://static001.geekbang.org/account/avatar/00/16/30/53/01a6c4da.jpg","comment_is_top":false,"comment_ctime":1559116569,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559116569","product_id":100024501,"comment_content":"老师的课程，看过以后还需要以后复习啊，总有种后知后觉感觉","like_count":0},{"had_liked":false,"id":81655,"user_name":"drunkenMouse","can_delete":false,"product_type":"c1","uid":1454037,"ip_address":"","ucode":"AA8CEA703ECBE8","user_header":"","comment_is_top":false,"comment_ctime":1553999257,"is_pvip":false,"replies":[{"id":"29816","content":"哈哈","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1554199429,"ip_address":"","comment_id":81655,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553999257","product_id":100024501,"comment_content":"当我准备就绪打算开始写的时候，发现自己好像。。都不会Lisp语言 今天的作业够呛了。。","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445286,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554199429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80833,"user_name":"lion","can_delete":false,"product_type":"c1","uid":1119389,"ip_address":"","ucode":"E99F9F9B074834","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/9d/459bdda9.jpg","comment_is_top":false,"comment_ctime":1553740031,"is_pvip":false,"replies":[{"id":"29465","content":"从实践开始，下篇会提到一个具体可以实践的场景","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553836794,"ip_address":"","comment_id":80833,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553740031","product_id":100024501,"comment_content":"对于Clang这一块确实了解和接触的比较少，看了老师的文章，觉得似乎打开了一条新的通道，但是又感觉老师讲的东西有点多，不知道该从哪开始，所以想请教下如果想接触这块知识的话，从哪里着手比较好呢？","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444995,"discussion_content":"从实践开始，下篇会提到一个具体可以实践的场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553836794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80816,"user_name":"SuperChao","can_delete":false,"product_type":"c1","uid":1241955,"ip_address":"","ucode":"065CB4C73CD2E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/f3/63/07f51a40.jpg","comment_is_top":false,"comment_ctime":1553737577,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553737577","product_id":100024501,"comment_content":"质量很高！","like_count":0},{"had_liked":false,"id":80773,"user_name":"梅永盛","can_delete":false,"product_type":"c1","uid":1150837,"ip_address":"","ucode":"A5497D182A574C","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/75/c653d505.jpg","comment_is_top":false,"comment_ctime":1553733208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553733208","product_id":100024501,"comment_content":"非常优秀，打算准备展开这方面的学习，","like_count":0}]}