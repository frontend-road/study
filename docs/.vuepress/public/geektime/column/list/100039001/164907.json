{"id":164907,"title":"07 | 理论四：哪些代码设计看似是面向对象，实际是面向过程的？","content":"<p>上一节课，我们提到，常见的编程范式或者说编程风格有三种，面向过程编程、面向对象编程、函数式编程，而面向对象编程又是这其中最主流的编程范式。现如今，大部分编程语言都是面向对象编程语言，大部分软件都是基于面向对象编程这种编程范式来开发的。</p><p>不过，在实际的开发工作中，很多同学对面向对象编程都有误解，总以为把所有代码都塞到类里，自然就是在进行面向对象编程了。实际上，这样的认识是不正确的。有时候，从表面上看似是面向对象编程风格的代码，从本质上看却是面向过程编程风格的。</p><p>所以，今天，我结合具体的代码实例来讲一讲，有哪些看似是面向对象，实际上是面向过程编程风格的代码，并且分析一下，为什么我们很容易写出这样的代码。最后，我们再一起辩证思考一下，面向过程编程是否就真的无用武之地了呢？是否有必要杜绝在面向对象编程中写面向过程风格的代码呢？</p><p>好了，现在，让我们正式开始今天的学习吧！</p><h2>哪些代码设计看似是面向对象，实际是面向过程的？</h2><p>在用面向对象编程语言进行软件开发的时候，我们有时候会写出面向过程风格的代码。有些是有意为之，并无不妥；而有些是无意为之，会影响到代码的质量。下面我就通过三个典型的代码案例，给你展示一下，什么样的代码看似是面向对象风格，实际上是面向过程风格的。我也希望你通过对这三个典型例子的学习，能够做到举一反三，在平时的开发中，多留心一下自己编写的代码是否满足面向对象风格。</p><!-- [[[read_end]]] --><h3>1.滥用getter、setter方法</h3><p>在之前参与的项目开发中，我经常看到，有同事定义完类的属性之后，就顺手把这些属性的getter、setter方法都定义上。有些同事更加省事，直接用IDE或者Lombok插件（如果是Java项目的话）自动生成所有属性的getter、setter方法。</p><p>当我问起，为什么要给每个属性都定义getter、setter方法的时候，他们的理由一般是，为了以后可能会用到，现在事先定义好，类用起来就更加方便，而且即便用不到这些getter、setter方法，定义上它们也无伤大雅。</p><p>实际上，这样的做法我是非常不推荐的。它违反了面向对象编程的封装特性，相当于将面向对象编程风格退化成了面向过程编程风格。我通过下面这个例子来给你解释一下这句话。</p><pre><code>public class ShoppingCart {\n  private int itemsCount;\n  private double totalPrice;\n  private List&lt;ShoppingCartItem&gt; items = new ArrayList&lt;&gt;();\n  \n  public int getItemsCount() {\n    return this.itemsCount;\n  }\n  \n  public void setItemsCount(int itemsCount) {\n    this.itemsCount = itemsCount;\n  }\n  \n  public double getTotalPrice() {\n    return this.totalPrice;\n  }\n  \n  public void setTotalPrice(double totalPrice) {\n    this.totalPrice = totalPrice;\n  }\n\n  public List&lt;ShoppingCartItem&gt; getItems() {\n    return this.items;\n  }\n  \n  public void addItem(ShoppingCartItem item) {\n    items.add(item);\n    itemsCount++;\n    totalPrice += item.getPrice();\n  }\n  // ...省略其他方法...\n}\n</code></pre><p>在这段代码中，ShoppingCart是一个简化后的购物车类，有三个私有（private）属性：itemsCount、totalPrice、items。对于itemsCount、totalPrice两个属性，我们定义了它们的getter、setter方法。对于items属性，我们定义了它的getter方法和addItem()方法。代码很简单，理解起来不难。那你有没有发现，这段代码有什么问题呢？</p><p>我们先来看前两个属性，itemsCount和totalPrice。虽然我们将它们定义成private私有属性，但是提供了public的getter、setter方法，这就跟将这两个属性定义为public公有属性，没有什么两样了。外部可以通过setter方法随意地修改这两个属性的值。除此之外，任何代码都可以随意调用setter方法，来重新设置itemsCount、totalPrice属性的值，这也会导致其跟items属性的值不一致。</p><p>而面向对象封装的定义是：通过访问权限控制，隐藏内部数据，外部仅能通过类提供的有限的接口访问、修改内部数据。所以，暴露不应该暴露的setter方法，明显违反了面向对象的封装特性。数据没有访问权限控制，任何代码都可以随意修改它，代码就退化成了面向过程编程风格的了。</p><p>看完了前两个属性，我们再来看items这个属性。对于items这个属性，我们定义了它的getter方法和addItem()方法，并没有定义它的setter方法。这样的设计貌似看起来没有什么问题，但实际上并不是。</p><p>对于itemsCount和totalPrice这两个属性来说，定义一个public的getter方法，确实无伤大雅，毕竟getter方法不会修改数据。但是，对于items属性就不一样了，这是因为items属性的getter方法，返回的是一个List<shoppingcartitem>集合容器。外部调用者在拿到这个容器之后，是可以操作容器内部数据的，也就是说，外部代码还是能修改items中的数据。比如像下面这样：</shoppingcartitem></p><pre><code>ShoppingCart cart = new ShoppCart();\n...\ncart.getItems().clear(); // 清空购物车\n</code></pre><p>你可能会说，清空购物车这样的功能需求看起来合情合理啊，上面的代码没有什么不妥啊。你说得没错，需求是合理的，但是这样的代码写法，会导致itemsCount、totalPrice、items三者数据不一致。我们不应该将清空购物车的业务逻辑暴露给上层代码。正确的做法应该是，在ShoppingCart类中定义一个clear()方法，将清空购物车的业务逻辑封装在里面，透明地给调用者使用。ShoppingCart类的clear()方法的具体代码实现如下：</p><pre><code>public class ShoppingCart {\n  // ...省略其他代码...\n  public void clear() {\n    items.clear();\n    itemsCount = 0;\n    totalPrice = 0.0;\n  }\n}\n</code></pre><p>你可能还会说，我有一个需求，需要查看购物车中都买了啥，那这个时候，ShoppingCart类不得不提供items属性的getter方法了，那又该怎么办才好呢？</p><p>如果你熟悉Java语言，那解决这个问题的方法还是挺简单的。我们可以通过Java提供的Collections.unmodifiableList()方法，让getter方法返回一个不可被修改的UnmodifiableList集合容器，而这个容器类重写了List容器中跟修改数据相关的方法，比如add()、clear()等方法。一旦我们调用这些修改数据的方法，代码就会抛出UnsupportedOperationException异常，这样就避免了容器中的数据被修改。具体的代码实现如下所示。</p><pre><code>public class ShoppingCart {\n  // ...省略其他代码...\n  public List&lt;ShoppingCartItem&gt; getItems() {\n    return Collections.unmodifiableList(this.items);\n  }\n}\n\npublic class UnmodifiableList&lt;E&gt; extends UnmodifiableCollection&lt;E&gt;\n                          implements List&lt;E&gt; {\n  public boolean add(E e) {\n    throw new UnsupportedOperationException();\n  }\n  public void clear() {\n    throw new UnsupportedOperationException();\n  }\n  // ...省略其他代码...\n}\n\nShoppingCart cart = new ShoppingCart();\nList&lt;ShoppingCartItem&gt; items = cart.getItems();\nitems.clear();//抛出UnsupportedOperationException异常\n</code></pre><p>不过，这样的实现思路还是有点问题。因为当调用者通过ShoppingCart的getItems()获取到items之后，虽然我们没法修改容器中的数据，但我们仍然可以修改容器中每个对象（ShoppingCartItem）的数据。听起来有点绕，看看下面这几行代码你就明白了。</p><pre><code>ShoppingCart cart = new ShoppingCart();\ncart.add(new ShoppingCartItem(...));\nList&lt;ShoppingCartItem&gt; items = cart.getItems();\nShoppingCartItem item = items.get(0);\nitem.setPrice(19.0); // 这里修改了item的价格属性\n</code></pre><p>这个问题该如何解决呢？我今天就不展开来讲了。在后面讲到设计模式的时候，我还会详细地讲到。当然，你也可以在留言区留言或者把问题分享给你的朋友，和他一起讨论解决方案。</p><p>getter、setter问题我们就讲完了，我稍微总结一下，在设计实现类的时候，除非真的需要，否则，尽量不要给属性定义setter方法。除此之外，尽管getter方法相对setter方法要安全些，但是如果返回的是集合容器（比如例子中的List容器），也要防范集合内部数据被修改的危险。</p><h3>2.滥用全局变量和全局方法</h3><p>我们再来看，另外一个违反面向对象编程风格的例子，那就是滥用全局变量和全局方法。首先，我们先来看，什么是全局变量和全局方法？</p><p>如果你是用类似C语言这样的面向过程的编程语言来做开发，那对全局变量、全局方法肯定不陌生，甚至可以说，在代码中到处可见。但如果你是用类似Java这样的面向对象的编程语言来做开发，全局变量和全局方法就不是很多见了。</p><p>在面向对象编程中，常见的全局变量有单例类对象、静态成员变量、常量等，常见的全局方法有静态方法。单例类对象在全局代码中只有一份，所以，它相当于一个全局变量。静态成员变量归属于类上的数据，被所有的实例化对象所共享，也相当于一定程度上的全局变量。而常量是一种非常常见的全局变量，比如一些代码中的配置参数，一般都设置为常量，放到一个Constants类中。静态方法一般用来操作静态变量或者外部数据。你可以联想一下我们常用的各种Utils类，里面的方法一般都会定义成静态方法，可以在不用创建对象的情况下，直接拿来使用。静态方法将方法与数据分离，破坏了封装特性，是典型的面向过程风格。</p><p>在刚刚介绍的这些全局变量和全局方法中，Constants类和Utils类最常用到。现在，我们就结合这两个几乎在每个软件开发中都会用到的类，来深入探讨一下全局变量和全局方法的利与弊。</p><p><strong>我们先来看一下，在我过去参与的项目中，一种常见的Constants类的定义方法</strong>。</p><pre><code>public class Constants {\n  public static final String MYSQL_ADDR_KEY = &quot;mysql_addr&quot;;\n  public static final String MYSQL_DB_NAME_KEY = &quot;db_name&quot;;\n  public static final String MYSQL_USERNAME_KEY = &quot;mysql_username&quot;;\n  public static final String MYSQL_PASSWORD_KEY = &quot;mysql_password&quot;;\n  \n  public static final String REDIS_DEFAULT_ADDR = &quot;192.168.7.2:7234&quot;;\n  public static final int REDIS_DEFAULT_MAX_TOTAL = 50;\n  public static final int REDIS_DEFAULT_MAX_IDLE = 50;\n  public static final int REDIS_DEFAULT_MIN_IDLE = 20;\n  public static final String REDIS_DEFAULT_KEY_PREFIX = &quot;rt:&quot;;\n  \n  // ...省略更多的常量定义...\n}\n</code></pre><p>在这段代码中，我们把程序中所有用到的常量，都集中地放到这个Constants类中。不过，定义一个如此大而全的Constants类，并不是一种很好的设计思路。为什么这么说呢？原因主要有以下几点。</p><p>首先，这样的设计会影响代码的可维护性。</p><p>如果参与开发同一个项目的工程师有很多，在开发过程中，可能都要涉及修改这个类，比如往这个类里添加常量，那这个类就会变得越来越大，成百上千行都有可能，查找修改某个常量也会变得比较费时，而且还会增加提交代码冲突的概率。</p><p>其次，这样的设计还会增加代码的编译时间。</p><p>当Constants类中包含很多常量定义的时候，依赖这个类的代码就会很多。那每次修改Constants类，都会导致依赖它的类文件重新编译，因此会浪费很多不必要的编译时间。不要小看编译花费的时间，对于一个非常大的工程项目来说，编译一次项目花费的时间可能是几分钟，甚至几十分钟。而我们在开发过程中，每次运行单元测试，都会触发一次编译的过程，这个编译时间就有可能会影响到我们的开发效率。</p><p>最后，这样的设计还会影响代码的复用性。</p><p>如果我们要在另一个项目中，复用本项目开发的某个类，而这个类又依赖Constants类。即便这个类只依赖Constants类中的一小部分常量，我们仍然需要把整个Constants类也一并引入，也就引入了很多无关的常量到新的项目中。</p><p>那如何改进Constants类的设计呢？我这里有两种思路可以借鉴。</p><p>第一种是将Constants类拆解为功能更加单一的多个类，比如跟MySQL配置相关的常量，我们放到MysqlConstants类中；跟Redis配置相关的常量，我们放到RedisConstants类中。当然，还有一种我个人觉得更好的设计思路，那就是并不单独地设计Constants常量类，而是哪个类用到了某个常量，我们就把这个常量定义到这个类中。比如，RedisConfig类用到了Redis配置相关的常量，那我们就直接将这些常量定义在RedisConfig中，这样也提高了类设计的内聚性和代码的复用性。</p><p><strong>讲完了Constants类，我们再来讨论一下Utils类。</strong>首先，我想问你这样一个问题，我们为什么需要Utils类？Utils类存在的意义是什么？希望你先思考一下，然后再来看我下面的讲解。</p><p>实际上，Utils类的出现是基于这样一个问题背景：如果我们有两个类A和B，它们要用到一块相同的功能逻辑，为了避免代码重复，我们不应该在两个类中，将这个相同的功能逻辑，重复地实现两遍。这个时候我们该怎么办呢？</p><p>我们在讲面向对象特性的时候，讲过继承可以实现代码复用。利用继承特性，我们把相同的属性和方法，抽取出来，定义到父类中。子类复用父类中的属性和方法，达到代码复用的目的。但是，有的时候，从业务含义上，A类和B类并不一定具有继承关系，比如Crawler类和PageAnalyzer类，它们都用到了URL拼接和分割的功能，但并不具有继承关系（既不是父子关系，也不是兄弟关系）。仅仅为了代码复用，生硬地抽象出一个父类出来，会影响到代码的可读性。如果不熟悉背后设计思路的同事，发现Crawler类和PageAnalyzer类继承同一个父类，而父类中定义的却是URL相关的操作，会觉得这个代码写得莫名其妙，理解不了。</p><p>既然继承不能解决这个问题，我们可以定义一个新的类，实现URL拼接和分割的方法。而拼接和分割两个方法，不需要共享任何数据，所以新的类不需要定义任何属性，这个时候，我们就可以把它定义为只包含静态方法的Utils类了。</p><p>实际上，只包含静态方法不包含任何属性的Utils类，是彻彻底底的面向过程的编程风格。但这并不是说，我们就要杜绝使用Utils类了。实际上，从刚刚讲的Utils类存在的目的来看，它在软件开发中还是挺有用的，能解决代码复用问题。所以，这里并不是说完全不能用Utils类，而是说，要尽量避免滥用，不要不加思考地随意去定义Utils类。</p><p>在定义Utils类之前，你要问一下自己，你真的需要单独定义这样一个Utils类吗？是否可以把Utils类中的某些方法定义到其他类中呢？如果在回答完这些问题之后，你还是觉得确实有必要去定义这样一个Utils类，那就大胆地去定义它吧。因为即便在面向对象编程中，我们也并不是完全排斥面向过程风格的代码。只要它能为我们写出好的代码贡献力量，我们就可以适度地去使用。</p><p>除此之外，类比Constants类的设计，我们设计Utils类的时候，最好也能细化一下，针对不同的功能，设计不同的Utils类，比如FileUtils、IOUtils、StringUtils、UrlUtils等，不要设计一个过于大而全的Utils类。</p><h3>3.定义数据和方法分离的类</h3><p>我们再来看最后一种面向对象编程过程中，常见的面向过程风格的代码。那就是，数据定义在一个类中，方法定义在另一个类中。你可能会觉得，这么明显的面向过程风格的代码，谁会这么写呢？实际上，如果你是基于MVC三层结构做Web方面的后端开发，这样的代码你可能天天都在写。</p><p>传统的MVC结构分为Model层、Controller层、View层这三层。不过，在做前后端分离之后，三层结构在后端开发中，会稍微有些调整，被分为Controller层、Service层、Repository层。Controller层负责暴露接口给前端调用，Service层负责核心业务逻辑，Repository层负责数据读写。而在每一层中，我们又会定义相应的VO（View Object）、BO（Business Object）、Entity。一般情况下，VO、BO、Entity中只会定义数据，不会定义方法，所有操作这些数据的业务逻辑都定义在对应的Controller类、Service类、Repository类中。这就是典型的面向过程的编程风格。</p><p>实际上，这种开发模式叫作基于贫血模型的开发模式，也是我们现在非常常用的一种Web项目的开发模式。看到这里，你内心里应该有很多疑惑吧？既然这种开发模式明显违背面向对象的编程风格，为什么大部分Web项目都是基于这种开发模式来开发呢？</p><p>关于这个问题，我今天不打算展开讲解。因为它跟我们平时的项目开发结合得非常紧密，所以，更加细致、全面的讲解，我把它安排在面向对象实战环节里了，希望用两节课的时间，把这个问题给你讲透彻。</p><h2>在面向对象编程中，为什么容易写出面向过程风格的代码？</h2><p>我们在进行面向对象编程的时候，很容易不由自主地就写出面向过程风格的代码，或者说感觉面向过程风格的代码更容易写。这是为什么呢？</p><p>你可以联想一下，在生活中，你去完成一个任务，你一般都会思考，应该先做什么、后做什么，如何一步一步地顺序执行一系列操作，最后完成整个任务。面向过程编程风格恰恰符合人的这种流程化思维方式。而面向对象编程风格正好相反。它是一种自底向上的思考方式。它不是先去按照执行流程来分解任务，而是将任务翻译成一个一个的小的模块（也就是类），设计类之间的交互，最后按照流程将类组装起来，完成整个任务。我们在上一节课讲到了，这样的思考路径比较适合复杂程序的开发，但并不是特别符合人类的思考习惯。</p><p>除此之外，面向对象编程要比面向过程编程难一些。在面向对象编程中，类的设计还是挺需要技巧，挺需要一定设计经验的。你要去思考如何封装合适的数据和方法到一个类里，如何设计类之间的关系，如何设计类之间的交互等等诸多设计问题。</p><p>所以，基于这两点原因，很多工程师在开发的过程，更倾向于用不太需要动脑子的方式去实现需求，也就不由自主地就将代码写成面向过程风格的了。</p><h2>面向过程编程及面向过程编程语言就真的无用武之地了吗？</h2><p>前面我们讲了面向对象编程相比面向过程编程的各种优势，又讲了哪些代码看起来像面向对象风格，而实际上是面向过程编程风格的。那是不是面向过程编程风格就过时了被淘汰了呢？是不是在面向对象编程开发中，我们就要杜绝写面向过程风格的代码呢？</p><p>前面我们有讲到，如果我们开发的是微小程序，或者是一个数据处理相关的代码，以算法为主，数据为辅，那脚本式的面向过程的编程风格就更适合一些。当然，面向过程编程的用武之地还不止这些。实际上，面向过程编程是面向对象编程的基础，面向对象编程离不开基础的面向过程编程。为什么这么说？我们仔细想想，类中每个方法的实现逻辑，不就是面向过程风格的代码吗？</p><p>除此之外，面向对象和面向过程两种编程风格，也并不是非黑即白、完全对立的。在用面向对象编程语言开发的软件中，面向过程风格的代码并不少见，甚至在一些标准的开发库（比如JDK、Apache Commons、Google Guava）中，也有很多面向过程风格的代码。</p><p>不管使用面向过程还是面向对象哪种风格来写代码，我们最终的目的还是写出易维护、易读、易复用、易扩展的高质量代码。只要我们能避免面向过程编程风格的一些弊端，控制好它的副作用，在掌控范围内为我们所用，我们就大可不用避讳在面向对象编程中写面向过程风格的代码。</p><h2>重点回顾</h2><p>今天的内容讲完了。让我们一块回顾一下，你应该掌握的重点内容。今天你要掌握的重点内容是三种违反面向对象编程风格的典型代码设计。</p><p><strong>1.滥用getter、setter方法</strong></p><p>在设计实现类的时候，除非真的需要，否则尽量不要给属性定义setter方法。除此之外，尽管getter方法相对setter方法要安全些，但是如果返回的是集合容器，那也要防范集合内部数据被修改的风险。</p><p><strong>2.Constants类、Utils类的设计问题</strong></p><p>对于这两种类的设计，我们尽量能做到职责单一，定义一些细化的小类，比如RedisConstants、FileUtils，而不是定义一个大而全的Constants类、Utils类。除此之外，如果能将这些类中的属性和方法，划分归并到其他业务类中，那是最好不过的了，能极大地提高类的内聚性和代码的可复用性。</p><p><strong>3.基于贫血模型的开发模式</strong></p><p>关于这一部分，我们只讲了为什么这种开发模式是彻彻底底的面向过程编程风格的。这是因为数据和操作是分开定义在VO/BO/Entity和Controler/Service/Repository中的。今天，你只需要掌握这一点就可以了。为什么这种开发模式如此流行？如何规避面向过程编程的弊端？有没有更好的可替代的开发模式？相关的更多问题，我们在面向对象实战篇中会一一讲解。</p><h2>课堂讨论</h2><p>今天课堂讨论的话题有两个，你可以选择一个熟悉的来发表观点。</p><p>1.今天我们讲到，用面向对象编程语言写出来的代码，不一定是面向对象编程风格的，有可能是面向过程编程风格的。相反，用面向过程编程语言照样也可以写出面向对象编程风格的代码。尽管面向过程编程语言可能没有现成的语法来支持面向对象的四大特性，但可以通过其他方式来模拟，比如在C语言中，我们可以利用函数指针来模拟多态。如果你熟悉一门面向过程的编程语言，你能聊一聊如何用它来模拟面向对象的四大特性吗？</p><p>2.看似是面向对象实际上是面向过程编程风格的代码有很多，除了今天我讲到的这三个，在你工作中，你还遇到过哪些其他情况吗？</p><p>欢迎在留言区写下你的答案，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"06 | 理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？","id":161587},"right":{"article_title":"08 | 理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？","id":165103}},"comments":[{"had_liked":false,"id":152494,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1574036412,"is_pvip":true,"discussion_count":23,"race_medal":0,"score":"1603596837820","product_id":100039001,"comment_content":"不想往下看的请看第一句就好：贫血模型流行的原因：实现简单和上手快。<br><br>具体解释慢慢看：<br><br>”贫血模型“的开发模式为什么会流行？<br><br>1、实现简单。Object仅仅作为传递数据的媒介，不用考虑过多的设计方面，将核心业务逻辑放到service层，用Hibernate之类的框架一套，完美解决任务。<br>2、上手快。使用贫血模式开发的web项目，新来的程序员看看代码就能“照猫画虎”干活了，不需要多高的技术水平。所以很多程序员干了几年，仅仅就会写CURD。<br>3、一些技术鼓励使用贫血模型。例如J2EE Entity Beans，Hibernate等。<br><br>总结：各种模型的好坏讨论一直不断，企业需要的是使用合适的技术把任务完成，从这个角度来说当下管用模型就是好模型。当然我们也要持开放的心态接受新的技术和思想，并结合业务的实际需要选择合适的技术。<br><br>概念解释：<br><br>贫血模型（Anemic Domain Model由<br>MatinFowler提出）又称为失血模型，是指domain object仅有属性的getter&#47;setter方法的纯数据类，将所有类的行为放到service层。原文他是这么说的“By pulling all the behavior out into services, however, you essentially end up with Transaction Scripts, and thus lose the advantages that the domain model can bring. ”他的原文我放上来了，英文好的同学可以看看：https:&#47;&#47;martinfowler.com&#47;bliki&#47;AnemicDomainModel.html 。 我觉得他有点学者气太重，这篇博客他都不知道为啥贫血模型会流行（I don&#39;t know why this anti-pattern is so common）。","like_count":374,"discussions":[{"author":{"id":1019588,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","nickname":"Richie","note":"","ucode":"12314EF0347693","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":94216,"discussion_content":"这样有观点有科普还有原文引用的评论真优秀👍","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1576942119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1019588,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","nickname":"Richie","note":"","ucode":"12314EF0347693","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":94409,"discussion_content":"多谢鼓励！我会继续加油的！UncleBob真是提概念的好手！","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1576943509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":94216,"ip_address":""},"score":94409,"extra":""},{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":278155,"discussion_content":"请问UncleBob是什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591155848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":94409,"ip_address":""},"score":278155,"extra":""},{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":335076,"discussion_content":"Uncle Bob是Robert C. Martin的昵称，不是Martin Fowler","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608085905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":94409,"ip_address":""},"score":335076,"extra":""}]},{"author":{"id":1947612,"avatar":"","nickname":"tm1234","note":"","ucode":"4042321C713186","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257495,"discussion_content":"所以很多程序员干了几年，仅仅就会写CURD.. 真相了","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1588577450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1803259,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","nickname":"linker","note":"","ucode":"6C5799F2FC2C82","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":145172,"discussion_content":"本人了解面向过程的c语言。\n1:封装，在一个文件中定义变量为static，而把修改变量的函数对外开放，设为extern\n2:抽象，函数本身就是带走抽象的意思，在c语言头文件中，对外开放的函数头就是抽象。\n3:继承，定义一个结构体带函数指针与数据，然后把这个结构体嵌入到其他结构体中，模仿了组合概念，应该不是抽象。\n4:多态，函数指针实现多态。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1579537526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1904140,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0e/0c/4ec2075f.jpg","nickname":"薛定谔的疯兔子","note":"","ucode":"BEF678D50400F5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394852,"discussion_content":"我觉得还有很大一个原因是，开发节奏太快，需求过来就要马上实现，开发人员都没有时间去沉淀思考，久而久之建立贫血模型就成了大家的习惯了。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1632102764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048681,"avatar":"https://static001.geekbang.org/account/avatar/00/10/00/69/3b1375ca.jpg","nickname":"海拉鲁","note":"","ucode":"6E3493295CED6F","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203777,"discussion_content":"赞同。从实用性的角度看，无论贫血模型还是充血模型，还是要因地制宜，不要太本本主义","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584079872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1503067,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ef/5b/ff28088f.jpg","nickname":"郑大钱","note":"","ucode":"114CF48056880E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299526,"discussion_content":"个人感觉“贫血模型”给我带来的最大的好处是易测试","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597722461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1108505,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ea/19/14018371.jpg","nickname":"瓜瓜","note":"","ucode":"F90A5135A9BB4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245706,"discussion_content":"当下管用模型就是好模型","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587693452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56092,"discussion_content":"优秀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574431700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3017263,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/0a/2f/477f02d1.jpg","nickname":"Playmaker","note":"","ucode":"48652E8135B54B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589110,"discussion_content":"一语惊醒梦中人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664424373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1149402,"avatar":"https://static001.geekbang.org/account/avatar/00/11/89/da/136cdca6.jpg","nickname":"陈斌","note":"","ucode":"AD6933D125C930","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582716,"discussion_content":"我觉得贫血模型就像需要填数据的表格，很多类定义只是为了定义数据传输对象的格式，不一定需要包含行为。所以也不能说贫血模型就不好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659603843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1605058,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7d/c2/e6332a1b.jpg","nickname":"东方拓睿","note":"","ucode":"1FD25D75CAC7C1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575950,"discussion_content":"很认同，现在的框架鼓励程序猿这样做，比如spring体系，大家只要在service.层写好业务逻辑就好了，其他的交给依赖注入吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655205542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1207410,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXSb2jAzlMM0JdTjWrNiaq2uR9eeloBYp906POddb9evmuj5f4CUoO6ge8TibibwtZicnl1sRHic9rW7g/132","nickname":"紫日","note":"","ucode":"73A8DEE323AC19","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316674,"discussion_content":"符合人类直觉思维。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603438703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1322366,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2d/7e/335a9b9d.jpg","nickname":"🐝null","note":"","ucode":"16F5E4965F8D5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":313208,"discussion_content":"习惯成自然","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603000195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1302911,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e1/7f/9e36154f.jpg","nickname":"黄晓辉","note":"","ucode":"7C20BDFC46DE7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":83413,"discussion_content":"谢谢科普","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576423598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1740639,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8f/5f/c6d10aa8.jpg","nickname":"码弓手","note":"","ucode":"B5D1EC8424B5D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":68231,"discussion_content":"如果是业务性不强用贫血确实很好，否则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575206824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1178156,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fa/2c/9a0c45e6.jpg","nickname":"微凉","note":"","ucode":"F6BD0AE11AE224","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54067,"discussion_content":"学习了，谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574256826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53180,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574142168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52378,"discussion_content":"学习了，我好好看看这文章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574045506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":72781,"discussion_content":"先看评论再看文章的吗 😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575526816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":52378,"ip_address":""},"score":72781,"extra":""},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72986,"discussion_content":"看这篇文章的时候，看到一半，刚好来了一个需求，就先看了评论，回头把剩下的看了。哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1575547157,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":72781,"ip_address":""},"score":72986,"extra":""}]}]},{"had_liked":false,"id":152634,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1574054190,"is_pvip":false,"replies":[{"id":"58743","content":"说的非常好👍","user_name":"作者回复","comment_id":152634,"uid":"1190123","ip_address":"","utype":1,"ctime":1574129970,"user_name_real":"王争"}],"discussion_count":21,"race_medal":0,"score":"1509107575086","product_id":100039001,"comment_content":"1.用shell实现自动化脚本做的服务编排，一般都是面向过程，一步一步的。而k8s的编排却是面向对象的，因为它为这个顺序流抽象出了很多角色，将原本一步一步的顺序操作转变成了多个角色间的轮转和交互。<br><br>2.从接触ddd才走出javaer举面向对象旗，干面向过程勾当的局面。所谓为什么“充血模型”不流行，我认为不外呼两个。一，规范的领域模型对于底层基础架构来说并不友好（缺少setget），所以会导致规范的领域模型与现有基础架构不贴合，切很难开发出完全贴合的基础架构，进而引深出，合理的业务封装却阻碍关于复用通用抽象的矛盾。二，合理的业务封装，需要在战略上对业务先做合理的归类分割和抽象。而这个前置条件很少也不好达成。进而缺少前置设计封装出来的“充血模型”会有种四不像的味道，反而加剧了业务的复杂性，还不如“贫血模型”来得实用。事实上快节奏下，前置战略设计往往都是不足的，所以想构建优秀的“充血模型”架构，除了要对业务领域和领域设计有足够的认知，在重构手法和重构意愿上还要有一定讲究和追求，这样才能让项目以“充血模型”持续且良性的迭代。<br><br>3.“充血模型”相对于“贫血模型”有什么好处？从我的经验来看，可读性其实可能“贫血模型”还好一点，这也可能有思维惯性的原因在里面。但从灵活和扩展性来说“充血模型”会优秀很多，因为好的“充血模型”往往意味着边界清晰（耦合低），功能内敛（高内聚）。这一块老师怎么看？","like_count":352,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474880,"discussion_content":"说的非常好👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574129970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033566,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c5/5e/24cc5a72.jpg","nickname":"阿狸爱JAVA","note":"","ucode":"597971781B1500","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55870,"discussion_content":"我感觉我处于 作者说什么都觉得好有道理呀，恨不得里吗操刀子 去修改目前项目里的弊端，可是这位朋友却可以跳出作者是思维，提出自己的看法，佩服，什么时候我也可以这样。。。","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1574407561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2370904,"avatar":"","nickname":"Geek_7c3eea","note":"","ucode":"C0698A30E803B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335287,"discussion_content":"主要是业务学习成本太高，一般公司无法承担成本.ddd固然好，但是谁又给你足够的时间去炮制你的模型呢？贫血虽然有弊端，但确实适合新手入门。我们系统大多都是贫血加架构大泥球，新毕业的，带上一个月就能上手改。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1608135668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2875594,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/e0/ca/adfaa551.jpg","nickname":"孙新","note":"","ucode":"A80038A479B943","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2370904,"avatar":"","nickname":"Geek_7c3eea","note":"","ucode":"C0698A30E803B1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579709,"discussion_content":"我新去一个公司，连旧项目的代码重构他们都没什么意愿。(原代码实在是可读性太差了，基本编码规范都没有，基本没有注释)。别说更高级的架构了。目前自己慢慢梳理重构，相信重构以后会给后续开发和维护效率带来质的提高。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657624948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335287,"ip_address":""},"score":579709,"extra":""}]},{"author":{"id":1192259,"avatar":"https://static001.geekbang.org/account/avatar/00/12/31/43/a1947dcb.jpg","nickname":"Felix Cao","note":"","ucode":"3C4690F1D9D5B8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300483,"discussion_content":"DDD不单是程序上的事，他还需要产品设计层面区分得好，面向对象的才会实现得更好，一定程度还是需要产品设计的合理性的。贫血模型主要的是编写成本低，充血模型运用到团队公司，人力成本是挺高的。关键是很多人都没在乎过程序的合理性，只是完成任务。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1598145256,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1192259,"avatar":"https://static001.geekbang.org/account/avatar/00/12/31/43/a1947dcb.jpg","nickname":"Felix Cao","note":"","ucode":"3C4690F1D9D5B8","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":300499,"discussion_content":"是的，编程在ddd只能占三分之一相关的东西。ddd主要是得建立领域模型，基于模型沟通，基于模型实现，基于模型扩展。好的模型比编码实现重要。然后完全用事件脚本这种结构性的编码方式也没太大问题，比较遗憾的就是模型和事件脚本的编码实现不好映射，而且事件脚本在复杂性隔离上有时会有点束手无策。所以，我的项目里还是有大量用事件脚本的实现，充血模型更多会在重构时去增加行为来提高复用和屏蔽复杂性（做多了就比较习惯写充血模型了，一开始挺别扭）。但完美的充血模型，我觉得反而会是累赘。毕竟事件脚本才是编码主流。大部分人不习惯面相对象的编码方式，追求完美充血模型，往往耗时耗力，碰一鼻子灰后还是四不像，不见得好。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1598150197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300483,"ip_address":""},"score":300499,"extra":""},{"author":{"id":1192259,"avatar":"https://static001.geekbang.org/account/avatar/00/12/31/43/a1947dcb.jpg","nickname":"Felix Cao","note":"","ucode":"3C4690F1D9D5B8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300653,"discussion_content":"DDD应用我觉得代码层面作用不大，但实行敏捷的技术团队中，对团队业务边界的定义，产品界限的定义很有指导作用。对于贫血模式和充血模式的讨论其实只是对面向对象运用的好坏讨论。在代码层面，DDD最多也是一个面向对象引申出来概念。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598225370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300499,"ip_address":""},"score":300653,"extra":""},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1192259,"avatar":"https://static001.geekbang.org/account/avatar/00/12/31/43/a1947dcb.jpg","nickname":"Felix Cao","note":"","ucode":"3C4690F1D9D5B8","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":300685,"discussion_content":"不是的。贫血模型那能叫面相对象吗？可以重新了解下面相对象。在实现模型这块，ddd其实给出了一些要素和分层架构的东西。其目的无非也是提高复用隔离变化，实现软件的高内聚低耦合。一般开发随便就好，但如果你是组长或则部长，我认为你还得代表团队整体的编码水平，这些基本原则和评判标准还是得清晰的，这代表了你的品位。可以不用但不可以不懂。ddd的主流实现确实是面相对象，但不等于函数式编程就不能用ddd，所以也不能说ddd是面相对象的延伸。你可以认为它是一套方法论或则说套路。我认为ddd最大的价值还是在跨领域落地领域模型，进而驱动设计，编码只是其中一部分。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598233316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300653,"ip_address":""},"score":300685,"extra":""}]},{"author":{"id":1687656,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c0/68/314e8306.jpg","nickname":"威先森","note":"","ucode":"5F445C6832274B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54088,"discussion_content":"充血模型过于专业，专业性跟成本方面要求太高，太难实现了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574258329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1687656,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c0/68/314e8306.jpg","nickname":"威先森","note":"","ucode":"5F445C6832274B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72782,"discussion_content":"认同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575526878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":54088,"ip_address":""},"score":72782,"extra":""}]},{"author":{"id":1048681,"avatar":"https://static001.geekbang.org/account/avatar/00/10/00/69/3b1375ca.jpg","nickname":"海拉鲁","note":"","ucode":"6E3493295CED6F","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203778,"discussion_content":"赞同，对于业务初期阶段“贫血模型”更易于理解，快速开发原型上线。在后期业务不断演进后就要开始考虑采用DDD了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584080125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1048681,"avatar":"https://static001.geekbang.org/account/avatar/00/10/00/69/3b1375ca.jpg","nickname":"海拉鲁","note":"","ucode":"6E3493295CED6F","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":204183,"discussion_content":"也不全是，ddd会是复杂项目发展的一个节点，但也不是一个终态。一旦项目很好的做了微服务拆分，那理论上每个微服务应该足够单纯，甚至是业务只读的。其业务的复杂程度本身就可以不引入复杂的分层架构和抽象设计。因为抽象这一层已经在应用架构做了。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1584117472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":203778,"ip_address":""},"score":204183,"extra":""}]},{"author":{"id":1026390,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a9/56/315c5be7.jpg","nickname":"青鸟","note":"","ucode":"A4818C5C0C688D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":404664,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634377167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2404887,"avatar":"https://static001.geekbang.org/account/avatar/00/24/b2/17/3161b49c.jpg","nickname":"达叔灬","note":"","ucode":"5CCBAF13548F02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383851,"discussion_content":"卧槽  太有道理了  收下我得膝盖","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626254285,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377003,"discussion_content":"大神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622458561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1188793,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/b9/8d182f13.jpg","nickname":"起风了","note":"","ucode":"9A8A2E51E198EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306612,"discussion_content":"2 的第一个理由，没看明白。【合理的业务封装却阻碍关于复用通用抽象的矛盾】每一个字都认识，连起来就看不懂 ┭┮﹏┭┮ 不知道迟到了一年的我，还能得到好心人的回复吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600330245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1965699,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","nickname":"慎独明强","note":"","ucode":"DC2F7F2C0C8F60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303728,"discussion_content":"佳新大佬，6666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599362452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1242573,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/cd/3890be04.jpg","nickname":"小川","note":"","ucode":"D462222DDBB978","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279687,"discussion_content":"老哥，加个好友可行 (●&#39;◡&#39;●)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591380003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1306032,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","nickname":"桂城老托尼","note":"","ucode":"139E4B8EE88B79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110001,"discussion_content":"ddd的成本有点高，互联网一般要快，完了再优化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577715906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1306032,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","nickname":"桂城老托尼","note":"","ucode":"139E4B8EE88B79","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110081,"discussion_content":"1.要快没毛病。所以不是一开始就用ddd也不是全部都用ddd。而是在业务价值显著且变化频率较高的模块采用ddd。起步成本虽高，但其易扩易维护的特性，长远上看其实是降低成本的。\n\n2.ddd的领域封装的成本是高，但其分层和事件驱动的架构特性和面向过程+贫血模型的常规开发模式是不冲突的。合理的架构可维持软件长期发展上的开发心智负担的稳定。\n\n3.话不多说，用了再说，不论利弊自己实现一遍再权衡便是。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1577717144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":110001,"ip_address":""},"score":110081,"extra":""}]},{"author":{"id":1165364,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","nickname":"海罗沃德","note":"","ucode":"8704F1D6980FA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":85546,"discussion_content":"感覺有必要把極客時間裡DDD的課程買一下了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576553755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152784,"user_name":"嘉一","can_delete":false,"product_type":"c1","uid":1196864,"ip_address":"","ucode":"8D16BD0B75B019","user_header":"https://static001.geekbang.org/account/avatar/00/12/43/40/e7ef18de.jpg","comment_is_top":false,"comment_ctime":1574080110,"is_pvip":false,"replies":[{"id":"58734","content":"说的没错，MVC跟贫血模型没直接关系。我后面在实战篇会讲到的。你的观点我基本都赞同。","user_name":"作者回复","comment_id":152784,"uid":"1190123","ip_address":"","utype":1,"ctime":1574128937,"user_name_real":"王争"}],"discussion_count":6,"race_medal":0,"score":"396711071342","product_id":100039001,"comment_content":"个人觉得，MVC这种框架模式本质上与面向对象并不冲突。当我们在讨论面向对象的时候，我们究竟应该怎样去定义一个对象，究竟什么才能被我们看成是对象，是不是只有像某种物体，比如说一只鸟或者一只狗我们才能去把他定义为对象？我认为，MVC里面的三个部分Model 、Controller 、View 我们都能把他们单独的看成一个对象，比如说Model，本来它是数据单元，但是如果我们把他看做一个对象的话，里面存储的数据不就是我们对象里的属性么，而对于数据的二次加工处理等等操作不就是对象里的方法么？同理，对于View而言，里面小的view组件或者是其他的view不就是我们对象里面的属性，而对于不同的view组件或其他view的组合或者其他的处理操作不就是对象里面的方法么？所以说，不必死抠定义，数据就一定要和业务逻辑组成一个类云云。。。我们最后写出来的代码的目的就是，1.要解决问题；2.代码有可扩展性，可读性；3，代码解耦；","like_count":92,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474937,"discussion_content":"说的没错，MVC跟贫血模型没直接关系。我后面在实战篇会讲到的。你的观点我基本都赞同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574128937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53057,"discussion_content":"想到一句话，万物皆对象","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574128268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1737503,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/83/1f/07d5562e.jpg","nickname":"Waiting For 🐣🌱🌱","note":"","ucode":"2E36E27A356F83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265587,"discussion_content":"大佬啊，我一直在写面向过程代码啊😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589419020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":53057,"ip_address":""},"score":265587,"extra":""}]},{"author":{"id":2346360,"avatar":"https://static001.geekbang.org/account/avatar/00/23/cd/78/bc81dd93.jpg","nickname":"神经蛙","note":"","ucode":"D856CF7D1EE064","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331022,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606747800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1691500,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cf/6c/87faa554.jpg","nickname":"MoeRookie","note":"","ucode":"E860D73EE91F00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322283,"discussion_content":"牛逼class ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604718273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1715558,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2d/66/f1cdc658.jpg","nickname":"able","note":"","ucode":"BD1545848DDA99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316775,"discussion_content":"对象就是有边界可交互的可以实现一定功能的实体","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603453869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152474,"user_name":"猫切切切切切","can_delete":false,"product_type":"c1","uid":1075033,"ip_address":"","ucode":"F350BA1B7FFDC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","comment_is_top":false,"comment_ctime":1574028427,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"306516706443","product_id":100039001,"comment_content":"总的来说，使用面向对象风格编写的面向过程代码有如下特点：<br><br>1. 使用了类，但是<br>2. 要么完全没有封装（比如数据和操作分离的贫血模式）<br>3. 要么破坏了封装（比如滥用 getter 或 setter）<br>4. 要么完全没有抽象（大而全的 Constants 或 Utils 类）<br>5. 要么封装或抽象不完全（比如类实例化后，或者子类继承后，需要自己管理其内部某些属性或状态）<br><br>平时应该多留心代码是否存在上述特征。<br><br>文中没有举封装或抽象不完全的例子，这里举一个。<br><br>比如一个实现某种业务需求（如与某种类型设备通讯的应用协议）的 tcp 或 udp 服务器；<br><br>实例化后还需要自己管理其协议相关的就绪状态（ready属性）；使你不得不对其再封装一层，并抽象其连接、断开等方法使其自动进行就绪状态的管理；<br><br>每个继承都这么封装一遍，就会有大量重复的代码，而且其实类的实例化者或继承者并不需要也不应该关心就绪状态的管理，所以没有达到就绪状态管理的封装。<br><br>这就是一种不完全的封装。","like_count":71,"discussions":[{"author":{"id":1392083,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Jp7LdHibIC3IxvQGGTiayoqglCL1z4OiaDrG7MFNvITWcxJkFxC9bEpWS2Cr8icNuze3TBPw2EmDiaedIGNDvzAgoMQ/132","nickname":"area","note":"","ucode":"EE833C52925085","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296915,"discussion_content":"厉害厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596705359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152947,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1574128398,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"263567133454","product_id":100039001,"comment_content":"确实是个问题啊，现在流行的贫血模式每个项目都会用。用了贫血模式就会涉及BO和VO的转换，很多工具都需要全部字段的setter方法…感觉是个连环套啊。<br>ps：用了这么久Java原来一直是面向过程编程，怪不得找不到对象","like_count":61,"discussions":[{"author":{"id":1249305,"avatar":"https://static001.geekbang.org/account/avatar/00/13/10/19/68b65d61.jpg","nickname":"Geek_e120ec","note":"","ucode":"9D0159DE171358","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390899,"discussion_content":"怪不得找不到对象😂😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630130015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194060,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","nickname":"CJJ","note":"","ucode":"7E02A6A8547559","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348594,"discussion_content":"俺也一样😂😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612661177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479043,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/83/0fac9e2b.jpg","nickname":"Mateo","note":"","ucode":"9E15121C6521F7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302649,"discussion_content":"哈哈哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598978605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3081038,"avatar":"https://static001.geekbang.org/account/avatar/00/2f/03/4e/ab7b85ba.jpg","nickname":"小小学习家","note":"","ucode":"D6D530C0622DE2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583332,"discussion_content":"对象不是new就有的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660037449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1605058,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7d/c2/e6332a1b.jpg","nickname":"东方拓睿","note":"","ucode":"1FD25D75CAC7C1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575952,"discussion_content":"别把自己找不到对象怪到JAVA上了，是你功力还不够，还要多跟老师学学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655206179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152458,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1574008576,"is_pvip":false,"discussion_count":14,"race_medal":0,"score":"263567013632","product_id":100039001,"comment_content":"打卡<br>看了今天的内容，发现自己三点都占了，😲<br>遇到json数据使用Gsonformat转一下，默认生成所有get set方法，遇到统一使用的就会毫不犹豫定义工具类……，我有点怀疑自己是不是从未写过面相对象风格的代码","like_count":62,"discussions":[{"author":{"id":1715988,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2f/14/840d0925.jpg","nickname":"Varus","note":"","ucode":"B9CB88C248BD93","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":64233,"discussion_content":"感觉自己一直扛着屠龙刀在切菜","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1574942898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62210,"discussion_content":"快糙猛，很正常","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574823571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1245904,"avatar":"https://static001.geekbang.org/account/avatar/00/13/02/d0/8abab63f.jpg","nickname":"治慧","note":"","ucode":"47C331EF63EDC6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207808,"discussion_content":"自己以为自己写的是面向对象结果是面向过程😢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584515487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1811277,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a3/4d/59390ba9.jpg","nickname":"排骨","note":"","ucode":"A413CF46211E1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585740,"discussion_content":"直接上去就是砍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661782502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2449748,"avatar":"https://static001.geekbang.org/account/avatar/00/25/61/54/5bf767e7.jpg","nickname":"没有心的人","note":"","ucode":"F27D5894087B11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350675,"discussion_content":"俺也一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613976358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194060,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","nickname":"CJJ","note":"","ucode":"7E02A6A8547559","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348593,"discussion_content":"一样😂😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612661132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330913,"discussion_content":"一样啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606730032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1747935,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/ab/df/7bf49e31.jpg","nickname":"breeze","note":"","ucode":"143767E9307ED2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285876,"discussion_content":"一样一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592982410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1283461,"avatar":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","nickname":"杨锋","note":"","ucode":"85A7828A538FB0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284955,"discussion_content":"不用怀疑。我们都是这么干的😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592699428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1514495,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/ff/8cb67f1f.jpg","nickname":"明天","note":"","ucode":"27DD39C3CF638B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":84160,"discussion_content":"一直和你在做一样的事","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576492409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623626,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c6/4a/3bd896fc.jpg","nickname":"Heiky","note":"","ucode":"03AA79E1BC4AE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52544,"discussion_content":"哈哈，我和你一样的想法，估计都在写面向过程的代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574065363,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1362631,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","nickname":"黄林晴","note":"","ucode":"B15C38AECDA88F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1623626,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c6/4a/3bd896fc.jpg","nickname":"Heiky","note":"","ucode":"03AA79E1BC4AE4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52637,"discussion_content":"一起努力，跟着专栏进步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574074887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":52544,"ip_address":""},"score":52637,"extra":""}]},{"author":{"id":1237655,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","nickname":"Kang","note":"","ucode":"088A8DA0A16BDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52449,"discussion_content":"估计写的都是面向过程哦，嘿嘿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574052418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1362631,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","nickname":"黄林晴","note":"","ucode":"B15C38AECDA88F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1237655,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","nickname":"Kang","note":"","ucode":"088A8DA0A16BDE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52465,"discussion_content":"doble康厉害👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574053659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":52449,"ip_address":""},"score":52465,"extra":""}]}]},{"had_liked":false,"id":152560,"user_name":"青青子衿","can_delete":false,"product_type":"c1","uid":1438102,"ip_address":"","ucode":"4A388A3BA70C29","user_header":"https://static001.geekbang.org/account/avatar/00/15/f1/96/9571fa3d.jpg","comment_is_top":false,"comment_ctime":1574042777,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"143307963545","product_id":100039001,"comment_content":"有时候写get,set也是无奈之举，比如集成spring的时候，框架要求属性提供get,set","like_count":33,"discussions":[{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335334,"discussion_content":"创建数据记录也是, 比如 DO 本身就得提供所有属性的 setter 方法, create 时候, 通过 setter 方法设置属性.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608169898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298689,"discussion_content":"我也想说这个，不知道怎么解决","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597378893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152678,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1574061892,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"139013015364","product_id":100039001,"comment_content":"先说问题2：看似面向对象实际面向过程的例子真是数不胜数了， 工作语言C&#47;C++，90%是C++,大体上老师在文中已经提到了，其他的我暂时也没想起来，但是滥用面向对象继承特性的代码我真是看到了太多<br>问题1：C中可以用struct 来实现class，只是访问控制权限都是public。类中的成员函数可以通过指向操作结构体的函数指针来实现，实现封装，需要绑定数据、函数、函数指针。可以创建函数指针表，构造函数设置函数指针指向正确的操作函数，函数指针表作为对象访问函数的接口。操作结构体的这些函数（成员函数）不像C++中能直接访问数据成员，需要显示的传递操作对象给成员函数。<br>继承：在派生类中维护一个基类对象的指针。这样派生类可以访问基类对象的数据。<br>多态：在基类中维护一个派生类对象的指针。这样基类可以访问派生类对象的数据。<br>C++中的多态，有一个对象销毁的问题。基类的析构函数必须是虚函数<br>在C中，这可以通过使基类的删除函数指针指向派生类的删除函数，因为派生类的删除函数清楚派生类的数据和基类的数据","like_count":32,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62336,"discussion_content":"大神啊，学习了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574834611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152466,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1574011440,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"100358259248","product_id":100039001,"comment_content":"啊，写了这么久的MVC，竟然是面向过程编程。","like_count":23,"discussions":[{"author":{"id":1022267,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/3b/791d0f5e.jpg","nickname":"王先森","note":"","ucode":"1AF1A395107479","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":57214,"discussion_content":"不要死扣定义","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574582429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2415448,"avatar":"https://static001.geekbang.org/account/avatar/00/24/db/58/a7a0a85b.jpg","nickname":"二饼","note":"","ucode":"48120565D135F7","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579490,"discussion_content":"注意重点：数据和行为分离","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657498779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1715558,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2d/66/f1cdc658.jpg","nickname":"able","note":"","ucode":"BD1545848DDA99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316776,"discussion_content":"并不是mvc就是面向过程呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603453907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152480,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1574032250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"96063312762","product_id":100039001,"comment_content":"我们的项目三点都占，造成这个局面的原因我认为有以下几点：<br>1、习惯用IDE的代码生成插件<br>2、团队整体设计水平有限<br>3、基于mvc模式开发的","like_count":22},{"had_liked":false,"id":152531,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1574039855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"74588483887","product_id":100039001,"comment_content":"有种上帝视角看自己的感觉！","like_count":17},{"had_liked":false,"id":152680,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1574061918,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"70293538654","product_id":100039001,"comment_content":"接上条评论，代码实现如下，欢迎讨论<br>typedef struct _Base Base;<br>typedef void (*fptrDisplay)(Base*);<br>typedef void (*fptrDelete)(Base*);<br>void DisplayBase(Base* );<br>void DeleteBase(Base*);<br>typedef struct _Base<br>{<br>\tvoid* pDeriveObj;<br>\tint a;<br>\tint b;<br>\tfptrDisplay Display;<br>\tfptrDelete Delete;<br>}Base;<br>Base* new_base(int a, int b)<br>{<br>\tBase* pObj = NULL;<br>\tpObj = (Base*)malloc(sizeof(Base));<br>\tif (pObj == NULL)<br>\t{<br>\t\treturn NULL;<br>\t}<br>\t&#47;&#47; 当创建基类对象时指向自己<br>\tpObj-&gt;pDeriveObj = pObj;<br>\tpObj-&gt;a = a;<br>\tpObj-&gt;b = b;<br>\tpObj-&gt;Display = DisplayBase;<br>\tpObj-&gt;Delete = DeleteBase;<br>\treturn pObj;<br>}<br>void DisplayBase(Base* base)<br>{<br>\tprintf(&quot;member: a:%d\\t b:%d\\n&quot;, base-&gt;a, base-&gt;b);<br>}<br>void DeleteBase(Base* base)<br>{<br>\tprintf(&quot;base destructor!\\n&quot;);<br>\tfree(base);<br>}<br>typedef struct _Derive<br>{<br>\tBase* pBaseObj;<br>\tint c;<br>\tint d;<br>}Derive;<br>void DeriveDisplay(Base* base);<br>void DeriveDelete(Base* base);<br>Base* new_Derive(int a, int b, int c, int d)<br>{<br>\tDerive* pObj = NULL;<br>\tBase* pBaseObj = new_base(a, b);<br>\tpObj = malloc(sizeof(Derive));<br>\tif (!pObj)<br>\t{<br>\t\tpBaseObj-&gt;Delete(pBaseObj);<br>\t\treturn NULL;<br>\t}<br>\tpBaseObj-&gt;pDeriveObj = pObj;<br>\tpObj-&gt;pBaseObj = pBaseObj;<br>\tpObj-&gt;c = c;<br>\tpObj-&gt;d = d;<br>\tpBaseObj-&gt;Display = DeriveDisplay;<br>\tpBaseObj-&gt;Delete = DeriveDelete;<br>\treturn pBaseObj;<br>}<br>void DeriveDisplay(Base* base)<br>{<br>\tDerive* pDeriveObj = (Derive*)(base-&gt;pDeriveObj);<br>\tprintf(&quot;member:base:a:%d\\t base:b:%d\\nderive:c:%d\\t derive:d:%d\\n&quot;, base-&gt;a, base-&gt;b, pDeriveObj-&gt;c, pDeriveObj-&gt;d);<br>}<br>void DeriveDelete(Base* base)<br>{<br>\tprintf(&quot;derive destructor!\\n&quot;);<br>\tfree(base-&gt;pDeriveObj);<br>\tfree(base);<br>}<br>int main()<br>{<br>\tBase* pBase = new_base(1, 2);<br>\tBase* pDerive = new_Derive(3, 4, 5, 6);<br>\tpBase-&gt;Display(pBase);<br>\tpDerive-&gt;Display(pDerive);<br>\tpBase-&gt;Delete(pBase);<br>\tpDerive-&gt;Delete(pDerive);<br>}","like_count":16,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62342,"discussion_content":"确实牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574835315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1039204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","nickname":"中年男子","note":"","ucode":"027C86B3370150","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63051,"discussion_content":"跟真正的C++的继承多态差别很大的，只是有那么点感觉😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574865858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":62342,"ip_address":""},"score":63051,"extra":""}]},{"author":{"id":1193468,"avatar":"https://static001.geekbang.org/account/avatar/00/12/35/fc/6d3e0035.jpg","nickname":"saber","note":"","ucode":"D02F8D129DB41C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53398,"discussion_content":"厉害，实现了多态和继承！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574165542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152828,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1574084936,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"61703627080","product_id":100039001,"comment_content":"我去去去，自从知道lombok后，@Data注解每个实体类必用。。。","like_count":14,"discussions":[{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":57744,"discussion_content":"如果你的类需要提供给其他团队使用，加额外的注解，意味着别人也要依赖lombok，这个其实是不友好的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574642100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1412220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","nickname":"火力全开","note":"","ucode":"8CE1733A2F618C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72749,"discussion_content":"那当然是通过maven发布jar包提供给第三方使用了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575523579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":57744,"ip_address":""},"score":72749,"extra":""}]},{"author":{"id":2683294,"avatar":"","nickname":"直走的螃蟹","note":"","ucode":"8116812CF0A1F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382020,"discussion_content":"我也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625371280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152559,"user_name":"DebugDog","can_delete":false,"product_type":"c1","uid":1027798,"ip_address":"","ucode":"1664D37CE03B9D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/d6/fbb8236d.jpg","comment_is_top":false,"comment_ctime":1574042772,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"57408617620","product_id":100039001,"comment_content":"我全占了，今天才知道自己学的Java，天天在写面向过程😰","like_count":13},{"had_liked":false,"id":153909,"user_name":"青阳魂","can_delete":false,"product_type":"c1","uid":1254875,"ip_address":"","ucode":"4F04ADAB6D870A","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/db/7c71ef4b.jpg","comment_is_top":false,"comment_ctime":1574329205,"is_pvip":false,"replies":[{"id":"59155","content":"欢迎加啊 wangzheng0822","user_name":"作者回复","comment_id":153909,"uid":"1190123","ip_address":"","utype":1,"ctime":1574377395,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"48818969461","product_id":100039001,"comment_content":"看完这篇，真的太有感触了，提出的这些问题，都是目前大部分程序员所存在的编码问题。<br><br>实际上面向对象、充血模型，面向过程，都是各有各的使用场景，这点上面的同学都说的很明白了，老师也说的非常明白。<br><br>很想加老师的微信交流沟通，总有那种一见如故的感觉。<br><br>我一直觉得我推崇的编码方式好像在他们眼里是异类，又说不清楚自己推崇的是什么。<br><br>说一个非面向对象语言实现面向对象的方式 lua 可以使用 setmetatable 方式实现 封装 继承","like_count":11,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475318,"discussion_content":"欢迎加啊 wangzheng0822","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574377395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000519,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","nickname":"javaadu","note":"","ucode":"8C0B140F1C8992","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":172822,"discussion_content":"哈哈😄，有意外收获","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581807002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152996,"user_name":"blacknhole","can_delete":false,"product_type":"c1","uid":1098286,"ip_address":"","ucode":"271682FFE28F25","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","comment_is_top":false,"comment_ctime":1574137236,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"48818777492","product_id":100039001,"comment_content":"提个小问题，课程中以下两者在表述上其实是互相矛盾的：<br><br>06课中说，二进制指令、汇编语言、面向过程编程语言是一种计算机思维方式，面向对象编程语言的编程套路、思考问题的方式是一种人类的思维方式。<br><br>到了本课07课却说，面向过程编程风格恰恰符合人的这种流程化思维方式，而面向对象编程风格正好相反，它是一种自底向上的思考方式，我们在上一节课讲到了，这样的思考路径比较适合复杂程序的开发，但并不是特别符合人类的思考习惯。<br><br>我觉得如下表述似乎更恰当：<br><br>计算机只有一种处理方式，就是流程化的方式。人脑在处理简单问题时，也是流程化的方式，这也是符合经验直觉的方式，即有先后顺序地，一步一步把一个任务完成。而在处理复杂问题时，因为不同事物的关系是网状的，对人来说，流程化的线性处理方式就很难应付了。这时，尽管分解任务这种模块化处理方式，因不太符合人的经验直觉，对人会有些难度，但是，相较于流程化方式，它却显得容易多了。<br><br>因而可以说，对于简单程序的开发，面向过程比面向对象容易，而对于复杂程序，尽管面向对象有难度，但也比面向过程容易。","like_count":11,"discussions":[{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383780,"discussion_content":"对对对 我说咋读着有点矛盾呢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626236982,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1888301,"avatar":"","nickname":"Huyunfu","note":"","ucode":"61A3AFC7BD4203","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583074,"discussion_content":"说得好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659915093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1605058,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7d/c2/e6332a1b.jpg","nickname":"东方拓睿","note":"","ucode":"1FD25D75CAC7C1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575953,"discussion_content":"我觉得是两个方面来说，从设计角度上来说面向对象符合人类对于事物的理解，各种事物相互之间的关系，这是一种多维的，网状性的，比如人处在一个社会中有不同的身份，人与人之间有许多不同关系，人和万物之间，人与社会等等，而对于实现角度，相当于做事的时候，我们都是按照程式化的方式按部就班。思维里面多会按照第一部做什么，第二部做什么，实际上就是做事的细化，以及做事的主次顺序，这是两个不同维度的，我们做软件开发就是要恰到好处结合面向对象与面向过程来做，比如老师讲的架构是上是面向对象，但我们每个方法内就要用面向过程来实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655206793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152691,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1574064642,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"44523737602","product_id":100039001,"comment_content":"今日的课堂讨论不会回答,尝试总结一下重点回顾的3个问题:<br><br>1.getter, setter问题的本质类的可变性问题.&lt;Effective Java&gt;中明确提到,除非有必要,否则类应该设计为不可变(Immutable)的.<br><br>2. Constants 和 Util类的问题本质是静态成员和静态方法问题.<br>静态成员和静态方法违背面向对象设计(OOP)原则,但从整体项目角度讲,静态成员和静态方法的好处大于其坏处,所以它们确实有存在的意义.<br><br>3.我对贫血模型的看法: 我是一名Android开发,日常使用的是MVC的变种MVP &amp;&amp; MVVM模型.<br>MVP和MVVM相比MVC要更靠近OOP思想，但面向过程思想的设计仍包含于其中。<br>无论面向对象或面向过程，写出层次清晰，易扩展，易维护的代码才是目的。","like_count":10,"discussions":[{"author":{"id":1364353,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","nickname":"大力","note":"","ucode":"1B2125C519443D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297525,"discussion_content":"赞同这一句：\n“无论面向对象或面向过程，写出层次清晰，易扩展，易维护的代码才是目的。”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596959579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1241567,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","nickname":"Joker","note":"","ucode":"C42E11098E1B38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66704,"discussion_content":"为什么说静态方法将方法与数据分离？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575099729,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1364353,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d1/81/89ba9d81.jpg","nickname":"大力","note":"","ucode":"1B2125C519443D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1241567,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","nickname":"Joker","note":"","ucode":"C42E11098E1B38","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297524,"discussion_content":"静态方法一般是不会对类中的全局属性（数据）进行操作的，属于无状态，无副作用。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596959547,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66704,"ip_address":""},"score":297524,"extra":""}]}]},{"had_liked":false,"id":152478,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1574031675,"is_pvip":false,"replies":[{"id":"58584","content":"😄你说的后面都基本上有讲到","user_name":"作者回复","comment_id":152478,"uid":"1190123","ip_address":"","utype":1,"ctime":1574037065,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"44523704635","product_id":100039001,"comment_content":"1.现在因为使用封装好的框架，没有提供set方法，类的序列化会成为一个问题<br>2.从理论上来说，数据和逻辑应该放在一起，但是数据的赋值往往可能依赖其他的service提供的数据，如果这样的话数据属性和纯粹依赖的service就会导致一个类的成员属性特别的多。 <br>3.对于一个具体现实对象而言，不同场景下可能关心的字段稍微有些不一样，对于此又该怎么处理呢？多个小对象，他们之间有无相关关系，有的话如何阐述，还是全部赋值完毕，都完整返回。当然可能具体场景具体分析，那是否有一个稍微通用的指导纲领<br>期待老师关于面向对象的实战流程","like_count":10,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474825,"discussion_content":"😄你说的后面都基本上有讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574037065,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153977,"user_name":"hong","can_delete":false,"product_type":"c1","uid":1110639,"ip_address":"","ucode":"1A826195907C71","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/6f/5680dc30.jpg","comment_is_top":false,"comment_ctime":1574340386,"is_pvip":false,"replies":[{"id":"59158","content":"给类本身提供一个copy方法呢","user_name":"作者回复","comment_id":153977,"uid":"1190123","ip_address":"","utype":1,"ctime":1574377996,"user_name_real":"王争"}],"discussion_count":5,"race_medal":0,"score":"35934078754","product_id":100039001,"comment_content":"习惯了从前端的参数直接使用  BeanUtils.copyProperties 映射到具体实体类，如果不直接提供set方法，有啥好的方法去组装数据呢","like_count":8,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475342,"discussion_content":"给类本身提供一个copy方法呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574377996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049017,"avatar":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","nickname":"学习学个屁","note":"","ucode":"DF2D61E6FB2FCE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576287,"discussion_content":"map struct ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655394463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330915,"discussion_content":"我是给类提供了一个copy方法，里面用的是 BeanUtils.copyProperties。。不能提供set方法那是不是只能手动调用实体类的set方法了，如果属性多的话手写代码有点累啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606730328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1283461,"avatar":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","nickname":"杨锋","note":"","ucode":"85A7828A538FB0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284956,"discussion_content":"这个问题我刚刚做梦和老师回复的解决思路是一样的。开心。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592699662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1339810,"avatar":"https://static001.geekbang.org/account/avatar/00/14/71/a2/72dfab8a.jpg","nickname":"随便打鹅","note":"","ucode":"F594AB37C5CE19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1283461,"avatar":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","nickname":"杨锋","note":"","ucode":"85A7828A538FB0","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":305316,"discussion_content":"但是这样得手写代码😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599875076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":284956,"ip_address":""},"score":305316,"extra":""}]}]},{"had_liked":false,"id":217057,"user_name":"八百","can_delete":false,"product_type":"c1","uid":1253530,"ip_address":"","ucode":"79F1F79ADF5A00","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/9a/3b1c65fd.jpg","comment_is_top":false,"comment_ctime":1589414373,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27359218149","product_id":100039001,"comment_content":"1.😜ོ接触到的都是贫血模式，别人这么写，我也这么写，直到看到ddd<br>2.排期太紧，还要值班，太累，就简单写就好，简单是美，没有故障是美。<br>3.项目代码已经是贫血模式，保持下风格统一","like_count":6,"discussions":[{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383781,"discussion_content":"写完就下班 能跑就行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626237013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175283,"user_name":"BitInit","can_delete":false,"product_type":"c1","uid":1007271,"ip_address":"","ucode":"BDDDA0F51B1EFB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/a7/8dc374e2.jpg","comment_is_top":false,"comment_ctime":1580642483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27350446259","product_id":100039001,"comment_content":"对于用C来模拟面向对象，曾经看到过一篇非常好的文章：https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;2ivQ9hcRvZnhk89jzAppSg","like_count":6},{"had_liked":false,"id":153025,"user_name":"观弈道人","can_delete":false,"product_type":"c1","uid":1016905,"ip_address":"","ucode":"F3BB619A33C605","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","comment_is_top":false,"comment_ctime":1574142666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23048979146","product_id":100039001,"comment_content":"1.Get到了Collections.unmodifiableList，这个很好。<br>2.Constants分类很好，常量定义要根据复用级别，而放在不同的位置比较好。比如：有的放在当前类、父类、同一个模块中定义的Constants，公共模块中定义的Constants.<br>3.dto&#47;po中的getter&#47;setter只是为了方便框架解析。带有业务方法的对象，需要慎重考虑getter&#47;setter.","like_count":5},{"had_liked":false,"id":152558,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1574042755,"is_pvip":false,"replies":[{"id":"58739","content":"1. 并没有说一定不能定义set方法，文章中说不要滥定义用不上的set方法<br>2. 多个业务接口需要同一份数据？这个怎么理解呢？","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574129416,"ip_address":"","comment_id":152558,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23048879235","product_id":100039001,"comment_content":"1.get set 这个很好理解，但是我有很多疑问，比如有的属性理论上来讲不该添加set方法，那我怎么对他进行属性拷贝？比如两个vo进行拷贝属性值，还有作为接口参数，spring又怎么给他赋值？<br>2.看完贫血模式那个知识点后，我懵了，我甚至不知道怎么才能写出面向对象的代码了，如果数据和业务不分离的话，那比如我多个业务接口需要同一份数据，难道要定义多份吗？我有点懵了😥😥😥","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474857,"discussion_content":"1. 并没有说一定不能定义set方法，文章中说不要滥定义用不上的set方法\n2. 多个业务接口需要同一份数据？这个怎么理解呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574129416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1593289,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","nickname":"编程界的小学生","note":"","ucode":"4A5BE9A5E877FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53121,"discussion_content":"就是比如我两个接口都需要同一份vo","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574135103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100703,"avatar":"https://static001.geekbang.org/account/avatar/00/10/cb/9f/ee68858c.jpg","nickname":"阿玛铭","note":"","ucode":"DBF948D82ACBE3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52467,"discussion_content":"同问2。估计除了设计原则、设计模式这些解决方法之外，还会提到ddd。方法是需要层层封装的，由下往上是实体方法――领域层方法――应用层方法，做完封装（更多是引用底层而非继承，其实本质是api编排，应用层api粒度由页面、定时任务、领域事件等决定）之后，再向外部提供api。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574053773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157695,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1575247979,"is_pvip":false,"replies":[{"id":"60724","content":"前端跟后端交互的那个叫dto 可以定义为之包含数据的类 后面会讲到","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1575432875,"ip_address":"","comment_id":157695,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18755117163","product_id":100039001,"comment_content":"老师这一讲，解我多年困惑。<br>仍有一事困惑：前端传数据到后端，我要是不定义一个开放了所有属性的POJO，那么数据如何反序列化成类呢？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476500,"discussion_content":"前端跟后端交互的那个叫dto 可以定义为之包含数据的类 后面会讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575432875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153236,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1574206953,"is_pvip":false,"replies":[{"id":"58863","content":"接口不能包含属性的 用接口不合适","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574213067,"ip_address":"","comment_id":153236,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18754076137","product_id":100039001,"comment_content":"Constants用接口是不是比用类更好？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475089,"discussion_content":"接口不能包含属性的 用接口不合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574213067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202782,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","nickname":"grey927","note":"","ucode":"833E02ED835B4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53918,"discussion_content":"public interface Constant {\n\tpublic static final String SEC_USER = &#34;user&#34;;\n} \n这是完全没有问题的，其中常量中的：public static final可以省略\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574234693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1909094,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/21/66/85f247e2.jpg","nickname":"谢作作的男人","note":"","ucode":"4F220EA8AEBFB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343469,"discussion_content":"属性指的是成员变量，不是静态变量（类变量）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611054050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152473,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574023994,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18753893178","product_id":100039001,"comment_content":"添加对象公有方法方法要注意两点：<br>1.避免过多的访问内部数据的方法，只有在确定需要的时候再增加。<br>2.避免返回内部引用（数组，对象，方法等），这些引用会无意间暴露修改内部状态的方法，导致数据不一致，也违反封装原则。这种情况如果数据量不大，返回一个拷贝对象即可。如果有效率考量，就要具体问题具体分析。","like_count":4},{"had_liked":false,"id":312982,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1632186369,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14517088257","product_id":100039001,"comment_content":"面向过程的另一个常见场景是超长的方法体，流水账式编程","like_count":3},{"had_liked":false,"id":155434,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1574688982,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14459590870","product_id":100039001,"comment_content":"感觉自己就是一个面向过程BOY！！！！！","like_count":3},{"had_liked":false,"id":152699,"user_name":"吖蒲","can_delete":false,"product_type":"c1","uid":1036972,"ip_address":"","ucode":"397C5DA20D5693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d2/ac/aeb9f156.jpg","comment_is_top":false,"comment_ctime":1574066161,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14458968049","product_id":100039001,"comment_content":"已确认过眼神，自己是面向过程编程风格的人。<br>1.如果Entry不提供get和set方法，如何快捷绑定数据库的值？<br>2.service不提供具体的实现过程，我们如何一 一实现业务功能？<br>3.团队水平有限，感受到很多功能点相似，可抽象一部分功能出来，但碍于公司说，生产上稳定性高于维护性，不给予重构的权限，重构了也不会上线。<br>期待老师后面章节的内容能够解决我的疑惑。","like_count":3,"discussions":[{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330920,"discussion_content":"一样的疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606730520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152687,"user_name":"肖大妞","can_delete":false,"product_type":"c1","uid":1426644,"ip_address":"","ucode":"2AD2F8684FDCF8","user_header":"https://static001.geekbang.org/account/avatar/00/15/c4/d4/5c8fb1cb.jpg","comment_is_top":false,"comment_ctime":1574063607,"is_pvip":false,"replies":[{"id":"58737","content":"后面实战篇会详细的讲解的。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574129075,"ip_address":"","comment_id":152687,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14458965495","product_id":100039001,"comment_content":"是不是对不同的业务场景，应该采用不同的编程范式<br>业务驱动比较强的场景，是不是用采用面向过程编程更容易让人理解，","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474898,"discussion_content":"后面实战篇会详细的讲解的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574129075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152542,"user_name":"月坛小雨","can_delete":false,"product_type":"c1","uid":1209475,"ip_address":"","ucode":"AB7C38A85692E6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJVhMyzoAPOLPI5wxsxSydHZeqNdz1SLRnPPQ0STmWwXIbkhaLHw4t2AXsTJwicgEibcRAMZEgibAKgg/132","comment_is_top":false,"comment_ctime":1574041218,"is_pvip":false,"replies":[{"id":"58620","content":"我python不怎么懂啊 抱歉啊","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574047454,"ip_address":"","comment_id":152542,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14458943106","product_id":100039001,"comment_content":"老师讲课举例的时候，能不能稍微带点python的例子？（另外，老师在加餐里有Java的基础知识，非常贴心了）","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474851,"discussion_content":"我python不怎么懂啊 抱歉啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574047454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005235,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLRXbu511COICQXDgKDXg9Ok0wwPfte5ZibiasCBwuyE9ZzicazoFsbFZWFykQBohiaXPbyw44LjlBIxA/132","nickname":"Richard","note":"","ucode":"165E48039ED8BE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550978,"discussion_content":"那老师可以写点JavaScript相关的吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644832948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152509,"user_name":"傲慢与偏执，","can_delete":false,"product_type":"c1","uid":1236496,"ip_address":"","ucode":"E9F81223DFAD24","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/10/9f15527d.jpg","comment_is_top":false,"comment_ctime":1574037969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14458939857","product_id":100039001,"comment_content":"期待实战讲解","like_count":3},{"had_liked":false,"id":152459,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1574008848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14458910736","product_id":100039001,"comment_content":"封装就是基本的函数<br>继承是一种is-a的关系，属性的继承是父类的属性在子类之前按照顺序排列，接口的话是使用虚函数表，通过查表来确定父类有哪些接口<br>多态的实现是通过函数指针，根据具体的子类找到子类继承的接口的入口地址，然后去执行就好了<br>大致是c&#47;c++的实现<br>工作现在就是在用面对对象语言写着面向过程业务，😂😂","like_count":3},{"had_liked":false,"id":247005,"user_name":"左右","can_delete":false,"product_type":"c1","uid":1410917,"ip_address":"","ucode":"97D38B40C127BB","user_header":"https://static001.geekbang.org/account/avatar/00/15/87/65/0d0622e8.jpg","comment_is_top":false,"comment_ctime":1599555597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189490189","product_id":100039001,"comment_content":"个人觉得，滥用全局变量和全局方法这个举例表达不完整，作者的举例不是侧重于滥用讲解，而是侧重于设计思路讲解。个人更偏向于知道如果在类中滥用全局变量和全局方法的弊端是什么","like_count":2},{"had_liked":false,"id":191578,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1921287,"ip_address":"","ucode":"64BBE005890845","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/07/b5a945b6.jpg","comment_is_top":false,"comment_ctime":1584782973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10174717565","product_id":100039001,"comment_content":"学习总结后，直接发到我们团队讨论群，让大家反思反省下。😄","like_count":2},{"had_liked":false,"id":156390,"user_name":"被讨厌的勇气","can_delete":false,"product_type":"c1","uid":1547913,"ip_address":"","ucode":"AE3B3CA27D91A2","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/89/6e9c05d6.jpg","comment_is_top":false,"comment_ctime":1574865896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164800488","product_id":100039001,"comment_content":"C语言可以通过结构体加函数，函数第一个参数为该结构体指针的方式来实现方法和数据结构结合，但无法实现访问权限控制。<br><br>通过在结构体中包含结构体的方式可以实现继承。<br><br>通过函数指针实现多态。每个类有一个共同的虚函数表，每个对象都有一个指向虚函数表的指针，通过指向不同的虚函数表来实现多态。<br><br>##坚持打卡##<br><br>滥用getter、setter，破坏了对象的封装性，使得对象不像“对象”，还有就是返回容器对象的情况。<br>定义Contants、Utils类，影响可维护性、增加编译时间、影响易用性。解决方法：将其拆解为多个功能单一的类，或定义到相应的业务类中。定义Utils的一个背景是两个独立类共用相同代码，在定义之前确认有必要定义一个单独的类吗。<br>数据与方法相分离。<br><br>面向对象的目标是为了写出高质量的代码，当使用面向过程更能实现这个目标时（微小程序、数据处理相关的代码），不要拘泥。","like_count":2},{"had_liked":false,"id":155874,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1574771232,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"10164705824","product_id":100039001,"comment_content":"Day022 07<br>为免滥用 getter&#47;setter 方法，Jeff Bay 在其《Object Calisthenics》直接建议“No getters&#47;setters&#47;properties”，两害相权取其轻，透露出“论大多数人的设计编码能力，直接不使用 getters&#47;setters，一点也不会错杀”的无奈。<br><br>不用 getters&#47;setters，有时候不是真不能用，而是提醒你 getters&#47;setters 应是轻量级操作，若非如此，需要考虑个合适的命名了。<br><br>http:&#47;&#47;www.bennadel.com&#47;resources&#47;uploads&#47;2012&#47;ObjectCalisthenics.pdf<br>http:&#47;&#47;wiki.c2.com&#47;?TellDontAsk<br>http:&#47;&#47;kaelzhang81.github.io&#47;2018&#47;06&#47;10&#47;%E5%AF%B9%E8%B1%A1%E5%81%A5%E8%BA%AB%E6%93%8D%E8%AF%A6%E8%A7%A3&#47;","like_count":2},{"had_liked":false,"id":154601,"user_name":"zhanyd","can_delete":false,"product_type":"c1","uid":1073845,"ip_address":"","ucode":"4C994EE512A3C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","comment_is_top":false,"comment_ctime":1574489889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164424481","product_id":100039001,"comment_content":"这门课太棒了，我就喜欢从理论开始，娓娓道来，然后联系实践，知其然，知其所以然。","like_count":2},{"had_liked":false,"id":153207,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1574181299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164115891","product_id":100039001,"comment_content":"我想的是,老师说的基本上在中小公司都是这样子的,<br>公司水平不高,上手快,对新手要求不高,可能导致很多人仅仅只会增删改查...","like_count":2},{"had_liked":false,"id":152897,"user_name":"一生一世一双人","can_delete":false,"product_type":"c1","uid":1148589,"ip_address":"","ucode":"563500BA097B45","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/ad/dd7bfa58.jpg","comment_is_top":false,"comment_ctime":1574118628,"is_pvip":false,"replies":[{"id":"58733","content":"😂 信小争哥就对了...","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574128467,"ip_address":"","comment_id":152897,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10164053220","product_id":100039001,"comment_content":"刚开始，觉得老师前面几章说的有点啰嗦。看到这里，突然觉得很有必要再回顾思考一下前面几章的内容。😂😂","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474982,"discussion_content":"😂 信小争哥就对了...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574128467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118102,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/wBibtTTkiaGtcJ3qBeG4BnB4MmaurYf8hZTrXiczmvLHlRrqxJicRaoQPAZ0vw9HHd7yxDH27TLCzBQqqOqyGukw1g/132","nickname":"gen_jin","note":"","ucode":"E282DB98815F13","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292672,"discussion_content":"老师讲的很透彻！实诚人！很幸运！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595303032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1813881,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/ad/79/ed57f69e.jpg","nickname":"蜡笔","note":"","ucode":"C021F334D93DD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286687,"discussion_content":"同感..................一开始上来就想耍屠龙刀了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593261662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152504,"user_name":"醉比","can_delete":false,"product_type":"c1","uid":1248399,"ip_address":"","ucode":"79E65F62BE7809","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/8f/4ebd303a.jpg","comment_is_top":false,"comment_ctime":1574037643,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10163972235","product_id":100039001,"comment_content":"感觉老师说的几个情况已经很全面了，一直在做MVC相关开发，也一直感觉自己写了很多面向过程的代码，但是却不知道哪里出现的问题。感觉现在大家对于新建对象还是过于随意了，其实还是有很多门道在里面。","like_count":2,"discussions":[{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383783,"discussion_content":"工业开发 总得有人 当工人么不是 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626237359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247033,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1533352,"ip_address":"","ucode":"6FD3642D6455AE","user_header":"https://static001.geekbang.org/account/avatar/00/17/65/a8/6431f8b0.jpg","comment_is_top":false,"comment_ctime":1599563251,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894530547","product_id":100039001,"comment_content":"MVC和面相过程的编码风格 其实降低很多软件开发的门槛 换句话来说就是可以更快的去迭代出一个系统 所以他的出现是短时间提高了生产力 ","like_count":1},{"had_liked":false,"id":214002,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588614288,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5883581584","product_id":100039001,"comment_content":"接手一个项目，分享判断全部写的if else ，花了一整天改成策略模式了。","like_count":1},{"had_liked":false,"id":198516,"user_name":"木白","can_delete":false,"product_type":"c1","uid":1194009,"ip_address":"","ucode":"BEC459430B293C","user_header":"https://static001.geekbang.org/account/avatar/00/12/38/19/c8d72c61.jpg","comment_is_top":false,"comment_ctime":1585454705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880422001","product_id":100039001,"comment_content":"数据处理相关的程序，比如数据分析，数据预处理，数据清洗，etl这些，就是拿到一批数据先干什么，然后再干什么，最后输出数据，这是典型的需要流程化思考模式的需求。面向过程编程和函数式编程更加适合这种场景。为什么是函数式呢，因为所谓的“以算法为主”，就可以把一个个算法操作开发成一个个小函数（称为算子），就可以通过函数式编程把这些算子应用在数据上。","like_count":1},{"had_liked":false,"id":166701,"user_name":"fly","can_delete":false,"product_type":"c1","uid":1025992,"ip_address":"","ucode":"D1F6938C9CE15D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/c8/5608cbdb.jpg","comment_is_top":false,"comment_ctime":1577547598,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5872514894","product_id":100039001,"comment_content":"lombok一直在用；数据与操作分开的贫血开发模式，Java开发中挺主流的。这一节听完有点乱，对习惯冲级很大。","like_count":1,"discussions":[{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335339,"discussion_content":"跟lombok 没关系吧, 只是不要滥用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608170220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1697945,"avatar":"","nickname":"Geek_3231cf","note":"","ucode":"922CB5478DB3EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180047,"discussion_content":"lombok没问题 只是用法有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582273323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164778,"user_name":"黄政","can_delete":false,"product_type":"c1","uid":1345630,"ip_address":"","ucode":"9076A1BF7BB051","user_header":"https://static001.geekbang.org/account/avatar/00/14/88/5e/cc916a2b.jpg","comment_is_top":false,"comment_ctime":1577090015,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5872057311","product_id":100039001,"comment_content":"c语言：<br>1.封装：数据和函数指针定义在一个结构体中<br>2.抽象：函数即是抽象<br>3.继承：有点说不清楚<br>4.多态：c语言的函数指针是可以实现的","like_count":1},{"had_liked":false,"id":159331,"user_name":"cv0cv0","can_delete":false,"product_type":"c1","uid":1360093,"ip_address":"","ucode":"93FF9277F03FD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","comment_is_top":false,"comment_ctime":1575600496,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870567792","product_id":100039001,"comment_content":"不是没有定义 setPrice 方法吗？","like_count":1},{"had_liked":false,"id":155077,"user_name":"秋雨飘落","can_delete":false,"product_type":"c1","uid":1124916,"ip_address":"","ucode":"EC795F8DEC00EB","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/34/78656be9.jpg","comment_is_top":false,"comment_ctime":1574643468,"is_pvip":false,"replies":[{"id":"60026","content":"没有太看懂constants类跟spring自动注入的关系😂","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574853215,"ip_address":"","comment_id":155077,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869610764","product_id":100039001,"comment_content":"constants类分类是为了减少单个文件大小 但项目中喜欢用spring自动注入 感觉有点多余 还想请老师给予解惑","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475655,"discussion_content":"没有太看懂constants类跟spring自动注入的关系😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574853215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153932,"user_name":"zaab","can_delete":false,"product_type":"c1","uid":1683063,"ip_address":"","ucode":"EE846895FF0C85","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QYKSUV20DMgBHAPLfgngdw4N8FHRCSBLCJueVRu9Ya1Ba2x4icx70zoVVFOZtG1K6TkHj5CFbuztQhRFyCjWXHQ/132","comment_is_top":false,"comment_ctime":1574333783,"is_pvip":false,"replies":[{"id":"59166","content":"购物车里的item会被修改还是因为暴露了getitems方法 跟set关系不大","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574384375,"ip_address":"","comment_id":153932,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869301079","product_id":100039001,"comment_content":"以上提到的购物车的item，我感觉将set方法屏蔽部分，通过构造器构造，就可以防止以上提到修改---我是菜鸟，不知道行不行。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475327,"discussion_content":"购物车里的item会被修改还是因为暴露了getitems方法 跟set关系不大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574384375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153919,"user_name":"青阳魂","can_delete":false,"product_type":"c1","uid":1254875,"ip_address":"","ucode":"4F04ADAB6D870A","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/db/7c71ef4b.jpg","comment_is_top":false,"comment_ctime":1574330146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869297442","product_id":100039001,"comment_content":"local _class = {}<br><br>function class(super)<br>  local class_type = {}<br>  class_type.ctor = false<br>  class_type.super = super<br>  class_type.new = function(...)<br>    local obj = {}<br>    do<br>      local create<br>      create = function(c, ...)<br>        if c.super then<br>          create(c.super, ...)<br>        end<br>        if c.ctor then<br>          c.ctor(obj, ...)<br>        end<br>      end<br>      create(class_type, ...)<br>    end<br>    setmetatable(obj,{ __index=_class[class_type] })<br>    return obj<br>  end<br>  local vtbl = {}<br>  _class[class_type] = vtbl<br>  setmetatable(class_type, { __newindex = function(t, k, v)<br>      vtbl[k] = v<br>    end<br>  })<br><br>  if super then<br>    setmetatable(vtbl, { __index = function(t, k)<br>      local ret = _class[super][k]<br>      vtbl[k] = ret<br>      return ret<br>    end})<br>  end<br>\treturn class_type<br>end<br><br><br><br><br><br>local a = class()<br>function a:ctor()<br>  self.hello = 1;<br>\treturn self<br>end<br><br>function a:test()<br>    print(self.hello)<br>end<br><br>-- class<br>A = setmetatable({}, { __call = function(me, ...) return a:new( ... ) end, __metatable = true, __newindex = function() end })<br><br>local b = class(a)<br>function b:ctor()<br>  self.hello2 = 2;<br>\treturn self<br>end<br><br>function b:print2()<br>    print(self.hello2)<br>end<br><br>B = setmetatable({}, { __call = function(me, ...) return b:new( ... ) end, __metatable = true, __newindex = function() end })<br><br>local instance = B()<br>for k, v in pairs(instance) do<br>  print(k)<br>end","like_count":1},{"had_liked":false,"id":153199,"user_name":"佳民","can_delete":false,"product_type":"c1","uid":1000433,"ip_address":"","ucode":"A5626BAEC96945","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/f1/3c69eb09.jpg","comment_is_top":false,"comment_ctime":1574179166,"is_pvip":false,"replies":[{"id":"59139","content":"两者没关系的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574332046,"ip_address":"","comment_id":153199,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869146462","product_id":100039001,"comment_content":"贫血模型有益于依赖注入，是不是啊？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475078,"discussion_content":"两者没关系的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574332046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152760,"user_name":"肥而不腻","can_delete":false,"product_type":"c1","uid":1435246,"ip_address":"","ucode":"3E6786A82A6DD6","user_header":"https://static001.geekbang.org/account/avatar/00/15/e6/6e/062da5e4.jpg","comment_is_top":false,"comment_ctime":1574076254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869043550","product_id":100039001,"comment_content":"上班路上看文章，下班路上看评论！😬😬","like_count":1},{"had_liked":false,"id":152698,"user_name":"刘旺旺","can_delete":false,"product_type":"c1","uid":1086132,"ip_address":"","ucode":"A9E89684BAE08D","user_header":"https://static001.geekbang.org/account/avatar/00/10/92/b4/bd466eed.jpg","comment_is_top":false,"comment_ctime":1574065809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869033105","product_id":100039001,"comment_content":"原来一直在写面向过程的代码啊","like_count":1},{"had_liked":false,"id":152676,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1574061071,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869028367","product_id":100039001,"comment_content":"贫血模型是服务类无状态，无状态的类适合水平扩展，并且可以使用单例来应付所有请求。避免重复创建和销毁类","like_count":1},{"had_liked":false,"id":152625,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1574052902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869020198","product_id":100039001,"comment_content":"关于setter和getter, 国内很多培训机构一开始都是教大家这么用,包括阿里云上面的java学习视频, 都是国内前辈的习惯影响的, 还好有幸看到正确的讲解","like_count":1},{"had_liked":false,"id":152592,"user_name":"leslee","can_delete":false,"product_type":"c1","uid":1384326,"ip_address":"","ucode":"DB1CBF9F8D16BF","user_header":"https://static001.geekbang.org/account/avatar/00/15/1f/86/3a7eeac4.jpg","comment_is_top":false,"comment_ctime":1574046875,"is_pvip":false,"replies":[{"id":"58740","content":"😁 在设计模式模块里，会讲一下的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574129442,"ip_address":"","comment_id":152592,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869014171","product_id":100039001,"comment_content":"额... 小争哥 那个面向切面编程会讲一下吗?  看了一些解析好像不怎么懂...","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474867,"discussion_content":"😁 在设计模式模块里，会讲一下的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574129442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152534,"user_name":"逆流的鱼","can_delete":false,"product_type":"c1","uid":1258399,"ip_address":"","ucode":"AA3DDE44A83C40","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/9f/8dbd9558.jpg","comment_is_top":false,"comment_ctime":1574040321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869007617","product_id":100039001,"comment_content":"DTO这个形态的疑惑就没消失过😂","like_count":1},{"had_liked":false,"id":152525,"user_name":"小畅","can_delete":false,"product_type":"c1","uid":1322880,"ip_address":"","ucode":"D031CC07CD564E","user_header":"","comment_is_top":false,"comment_ctime":1574039376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869006672","product_id":100039001,"comment_content":"get、set方法老师以前在讲的时候，也不讲为啥，上来就是直接设置。现在才知道封装的作用。工具类、配置类的细分对后期维护起来方便多了，有时候把控适合细分的度挺重要的，要多些项目经验会把控好这个度","like_count":1},{"had_liked":false,"id":152522,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574039118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869006414","product_id":100039001,"comment_content":"面向对象是把数据和方法打包，隐藏内部状态，暴露外部需要的方法。这种把数据和方法并列处理的方法也有一个弊端，那就是很多情况下，数据和方法的体量并不对等，例如String，数据很少，对应的方法却很多，如果把数据和方法放到一个类里，势必方法数目巨大，数据基本淹没在方法中，而且对这么多方法不分类来处理也带来维护负担，这和全局方法过多是一个道理。Kotlin语言采用的是extension methods来处理这种情况，简而言之就是数据被多个方法群调用，然后调用的时候可以根据import来分类。请问王老师，还有其他更好的方法来处理这种情况吗，多谢！","like_count":1},{"had_liked":false,"id":152513,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1574038497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869005793","product_id":100039001,"comment_content":"面相过程更符合人类思维，和命令式编程差不多","like_count":1},{"had_liked":false,"id":152493,"user_name":"cc","can_delete":false,"product_type":"c1","uid":1592092,"ip_address":"","ucode":"FF41E5D87BAD76","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/1c/5eb03a91.jpg","comment_is_top":false,"comment_ctime":1574036042,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5869003338","product_id":100039001,"comment_content":"搜了一下c如何写出面向对象风格的代码。<br>直观感觉是用c把c++编译器隐式完成的对象模型显式写出来，666😂","like_count":1,"discussions":[{"author":{"id":1796908,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/6b/2c/b27eefc5.jpg","nickname":"Abcd","note":"","ucode":"274C7487FDDC21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284628,"discussion_content":"你说的很对，c++编译器初期就是将c++代码翻译成c语言，然后调用c编译器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592571733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152460,"user_name":"玄兴梦影","can_delete":false,"product_type":"c1","uid":1364855,"ip_address":"","ucode":"D9EDBBC61317E9","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/77/fb38ccf1.jpg","comment_is_top":false,"comment_ctime":1574008888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868976184","product_id":100039001,"comment_content":"我写得最多的就是面向过程，现在在学习JAVA，发现自己写的也是面向过程","like_count":1},{"had_liked":false,"id":359537,"user_name":"Will Zhang","can_delete":false,"product_type":"c1","uid":3197012,"ip_address":"上海","ucode":"294B06E7EFEB18","user_header":"https://static001.geekbang.org/account/avatar/00/30/c8/54/8d27cb56.jpg","comment_is_top":false,"comment_ctime":1665630209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665630209","product_id":100039001,"comment_content":"反面教材：我用Python是如何开发出极难维护的代码的<br>我的工作是利用python计算一些金融指标，搭建简单的金融模型，基本流程就是：取数据处理数据，计算指标，开接口给Java调用。<br>平时写代码就是先想好，第一步干嘛，第二步干嘛，第三步干嘛，然后写一堆函数。<br>然后再想，第一步可以细分为几步，然后再写一堆函数出来，这样以此类推，结果就是一个功能除了接口类之外，全是函数。<br>随着项目的迭代代码开始坏起来了：<br>1.新模块和第一个模块流程差不多，好多相似的功能：取数逻辑，数据处理逻辑，某些相同的业务逻辑等，我又不可能直接cv（太low）然后我就用继承，这样一来公用的方法就可以直接用了，对于那些需要修改的功能就重写父类方法（当时还挺佩服我自己的，哈哈）<br>2.又有新的模块啦，看上去和之前的流程相似，但内部还是有调整，得嘞，继续继承，和哪个模块相似度高就继承哪个。<br>3.又双叒叕有新的模块啦，这时我发现之前的继承太乱了搞来搞去没有太相似的模块了，我妥协了，直接上CV大法，反正大部分功能之前的模块都有，只是各占一部分而已，这时CV反而更方便了。<br>4.项目就这样相安无事的进行了一年多，直到有一天，公用取数的逻辑需要修改，公用业务逻辑需要调整，现在看看我的代码：代码里面有图省事直接继承的，有继承不方便直接cv的，你能想象一个小的改动需要10几个文件跟着一起改动那种酸爽吗？<br>最后弱弱的问一句：我写了那么多函数算函数式编程吗？（狗头保命）","like_count":0},{"had_liked":false,"id":356564,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"浙江","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1662424273,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662424273","product_id":100039001,"comment_content":"面向过程的代码风格，在用java实现的项目中，一个业务方法也是一步一步执行。是面向过程。而面向对象，是需要自底向上去思考这个一步一步的业务，能否拆分成一些细小独立的类，再基于类来进行业务开发。面向对象的风格，抽象，封装，将方法和数据封装在一个类中。如果是数据和方法分离，那就是典型的面向过程风格，但有时在写一些简单逻辑时，这种更易用，更符合简单人脑思维。用类来封装，抽象更需要一定的思考。所以面向过程的风格代码更容易写出来。","like_count":0},{"had_liked":false,"id":356032,"user_name":"Stay_Gold","can_delete":false,"product_type":"c1","uid":1119904,"ip_address":"北京","ucode":"ACB8DCD2EF8F95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2NTTABPFibg2k9tZscOOKx9wu80a85d5HspCorO9Nibj7Z7q9v1icPTVm5ia52r0RCzEaA/132","comment_is_top":false,"comment_ctime":1661929254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661929254","product_id":100039001,"comment_content":"总结今天所学的<br>用面向对象语言写面向过程代码的一些情况：<br>1.滥用setter和getter其本质就是破坏了代码的封装性。全部都用setter和getter就相当于全部都是public，这就失去了封装的意义。另外getter如果返回的是引用对象的话比如List等，获取到引用对象可以直接调用对象的方法来更改数据，导致虽然没用setter但是还是改变了数据的结果。<br>2.全局变量和全局方法的滥用。全局变量和全局方法会存在于软件的整个生命周期和范围，让任何的对象都能够调用，完全破坏了封装性，并且让数据和方法想入隔离其实是典型的面向过程风格。而且这种全局的东西还有重大的问题就是导致软件编译速度慢，因为每次更改了全局变量的东西都需要重新编译代码，对于大型软件来说有时候编译是很耗时的，同时对于做单元测试也不方便。<br>3.定义数据和方法分离的类。数据和方法分离是典型的面向过程风格。<br>为什么会存在那么多的面向过程的代码：<br>1.大部分程序员只想着实现功能，至于代码的可维护性，可读性，可扩展性，健壮性这些都不会考虑。同时面向过程风格更加符合人本身先A然后才能B，最后C的这种自顶向下的思维习惯。而面向对象风格需要人先把模块设计好，然后像拼积木意义的把模块搭建起来，这种一种自低向上的思维。<br>2.面向对象的风格本身是有一定难度的，比如类要怎么样设计，要把什么属性和方法放到类中，这些都是需要深刻考虑的。而大部分人都习惯简单的方式，不动脑筋的直接按照一步一步的方式来实现，最终就形成了面向过程风格的代码。<br>面向对象风格就真的一定比面向过程风格好吗？<br>首先我们的目的永远都是写出高质量的代码---1.可维护2.可读3.可扩展4.灵活5.简练6.可复用7.易测试。所以不管是那种风格的代码只要我们在自己可控的范围内能实现上面的要求我们就可以写出对应风格的代码。大可不必避讳在面向过程语言中写出面向过程的代码。<br><br>JavaScript是如何实现面向对象的四大特性的：<br>封装：通过自己定义get set方法来实现对方法中的数据访问，类似于闭包。<br>抽象：函数对外隐藏了自己的细节，其实其实就相当于抽象<br>继承：通过原型模式设置prototype来实现<br>多态：用instanceof Function语法根据传递进来的不同对象来调用对应对象的方法来实现。<br><br>其他的用面向对象语言写面向过程风格代码：<br>其实我觉得只要是破坏了面向对象四大特性：封装，抽象，继承，多态的写法的代码应该都算是。<br>比如太多的if else或者switch代码，其实就是没有利用到多态特性。","like_count":0},{"had_liked":false,"id":354155,"user_name":"Geek_19d46a","can_delete":false,"product_type":"c1","uid":1593319,"ip_address":"广东","ucode":"6B137E4FC514D1","user_header":"","comment_is_top":false,"comment_ctime":1660129055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660129055","product_id":100039001,"comment_content":"一般来讲在支持多种范式的语言中，主要看哪种方式解决问题更方便。不会只局限于某一种方式。","like_count":0},{"had_liked":false,"id":353611,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1149402,"ip_address":"广东","ucode":"AD6933D125C930","user_header":"https://static001.geekbang.org/account/avatar/00/11/89/da/136cdca6.jpg","comment_is_top":false,"comment_ctime":1659603593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659603593","product_id":100039001,"comment_content":"面向对象和面向过程是编程的两种风格，我觉得也不一定所有设计都遵循面向对象才是好。程序都是由一系列关联数据和逻辑组合而成。面向对象的优势是主要是让职责更加分明，让关系更加结构化。再处理复杂关系的时候能够一目了然。<br>常量类确实都堆在一个类里面不好，而且就常量来说有enum类型更加直观一点。<br>utils类做区分可以更加清晰和顾名思义。<br>至于get和set我觉得主要因为现有很多框架都需要这两个方法进行绑定。<br>贫血模型，感觉有点像填表需要用的表格，只需要装数据，而不包含行为，这个刚好跟数据库的表又是契合的，所以很多也这么用。","like_count":0},{"had_liked":false,"id":350974,"user_name":"SICUN","can_delete":false,"product_type":"c1","uid":1254261,"ip_address":"","ucode":"22A384904EB9E9","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/75/2b599841.jpg","comment_is_top":false,"comment_ctime":1657434379,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657434379","product_id":100039001,"comment_content":"现在才知道一直在用贫血模型的开发模式，以为是面向对象的实际是面向过程的，但我觉得应该是两者在混用，由此想到阅读框架源码也应该面向对象和面向对象结合来看，通过面向对象弄清楚框架源码中每个目录、类的作用，然后通过面向过程的思路使用某个具体的主线比如框架的加载过程来串起来相关类，以便更好的读懂源码。","like_count":0},{"had_liked":false,"id":345832,"user_name":"姚钫","can_delete":false,"product_type":"c1","uid":1498146,"ip_address":"","ucode":"ECB8B0627A4F9B","user_header":"https://static001.geekbang.org/account/avatar/00/16/dc/22/41a390ae.jpg","comment_is_top":false,"comment_ctime":1652621640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652621640","product_id":100039001,"comment_content":"07 | 理论四：哪些代码设计看似是面向对象，实际是面向过程的？<br>220515 day06 三种违反面向对象常见的代码设计<br>1.滥用get set 违反了封装的特性，容器操作也不再安全；常量类和工具类，常量类尽量分细一点或者写在用到的地方，工具类定义前想想是不是用到的地方很多；贫血模型的开发模式，VO，BO，ENTITY，方法都写在了service里<br>2.写代码感觉都是理解业务翻译成代码，基本都是面向过程，要多联系抽象出 各个类以及他们应该有的属性和方法，以及各个类的交互<br>","like_count":0},{"had_liked":false,"id":345688,"user_name":"设计模式之美","can_delete":false,"product_type":"c1","uid":2210135,"ip_address":"","ucode":"67907B55AFDB41","user_header":"https://static001.geekbang.org/account/avatar/00/21/b9/57/4e22ac1f.jpg","comment_is_top":false,"comment_ctime":1652511338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652511338","product_id":100039001,"comment_content":"1. 滥用 getter、setter 方法<br>2.Constants 类、Utils 类的设计问题<br>3. 基于贫血模型的开发模式<br><br>第一点要分情况的，如果是简单场景，使用三层架构写面向过程的代码无可厚非，提供get、set无可厚非。除非是该模型充血有状态。<br>第二点，一般开发都会分清楚吧<br>第三点比较同意，沉淀领域模型，复杂业务不要面向过程<br><br>前面这几张文章都需要提取精华，看后面有没有干货了","like_count":0},{"had_liked":false,"id":342410,"user_name":"Geek_as","can_delete":false,"product_type":"c1","uid":1534500,"ip_address":"","ucode":"AB7B70DBC2B5F8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/qhonwcQle1RBufvLdTm4MgSNl554GBXUZtNNH65oYajbbRLxKsZX4hM9vFtrLLpDM0H93ZNWRFAZSrIZC7yAsQ/132","comment_is_top":false,"comment_ctime":1650251946,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650251946","product_id":100039001,"comment_content":"go语言的结构体struct是可以带有方法的，保证了数据与方法不分离，通过变量名的定义来控制访问权限，实现封装，对于继承来说，go语言是不支持继承，假如两个struct出现逻辑相同的代码块，往往是通过组合的方式来实现代码的复用，而多态的话，go语言也是有函数类型指针，只要是方法签名一样，就可以赋值，同时也存在接口类，通过不同实现接口的类型的赋值，实现接口调用方法的多态","like_count":0},{"had_liked":false,"id":342330,"user_name":"于游","can_delete":false,"product_type":"c1","uid":1232227,"ip_address":"","ucode":"7FA6E0117A3700","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoKEDhibodjlC9dIic9StJDib0YsrSudlGjGpEIpmFbb38otr4Q3wgOI2DOCwVadEOO6KXhM92tXh6gw/132","comment_is_top":false,"comment_ctime":1650197306,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650197306","product_id":100039001,"comment_content":"个人的使用体验刚好相反，在pojo上增加getter和settter这类的个性化实现会显著降低阅读效率和出错几率，别人预期你的getter只是返回一个对象，但没想到你做了一些判断，也就是为啥需要Lombok类破坏封装的原因。但同时，在非pojo类上增加这些破坏封装的注解是反常识的，一般也没有人这么用。<br>Web开发中，常常会用VO或其它的来控制暴露对象的范围，这样符合开闭原则，维护效率会更高。","like_count":0},{"had_liked":false,"id":341868,"user_name":"先听","can_delete":false,"product_type":"c1","uid":1151409,"ip_address":"","ucode":"82D8DA7A2FEB4B","user_header":"https://static001.geekbang.org/account/avatar/00/11/91/b1/fb117c21.jpg","comment_is_top":false,"comment_ctime":1649894006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649894006","product_id":100039001,"comment_content":"太干货，太有实战性了！<br>关于setter等访问控制的问题，像golang这种没有方便的访问控制机制的语言，有没有什么好的实战建议呢？","like_count":0},{"had_liked":false,"id":335247,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1645426432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645426432","product_id":100039001,"comment_content":"1.本人现在用的typescript做的后端，目前也应用封装、继承、多态、抽象模式。<br>2.Utils的设计，的确我们很少封装出来，因为是BFF层的。<br>3.关于贫血模式，就是照葫芦画瓢，疯狂生长时代的必需品。但是要学好编程，就需要弄一些超大的系统，才能明白为什么我们注重这些设计模式了。","like_count":0},{"had_liked":false,"id":317885,"user_name":"陈炆","can_delete":false,"product_type":"c1","uid":2391830,"ip_address":"","ucode":"C4DFDC98195643","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eobdgTHjeugrHFLImiar8zerCq8GSuFBXqzU28chrica0ur4ia3JPOqqaWzI89rce5tLJXicBAVvu9dtg/132","comment_is_top":false,"comment_ctime":1635005549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635005549","product_id":100039001,"comment_content":"有点疑惑，我们平时不用getter和setter的话，那我们获取数据和设置数据应该怎么办呢？","like_count":0},{"had_liked":false,"id":317884,"user_name":"陈炆","can_delete":false,"product_type":"c1","uid":2391830,"ip_address":"","ucode":"C4DFDC98195643","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eobdgTHjeugrHFLImiar8zerCq8GSuFBXqzU28chrica0ur4ia3JPOqqaWzI89rce5tLJXicBAVvu9dtg/132","comment_is_top":false,"comment_ctime":1635005420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635005420","product_id":100039001,"comment_content":"还是没搞懂为什么getter和setter违反面向对象呢","like_count":0},{"had_liked":false,"id":316878,"user_name":"jeffery","can_delete":false,"product_type":"c1","uid":1268106,"ip_address":"","ucode":"597CBF4AED4162","user_header":"https://static001.geekbang.org/account/avatar/00/13/59/8a/2722f79c.jpg","comment_is_top":false,"comment_ctime":1634602202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634602202","product_id":100039001,"comment_content":"关于getter和setter，我们在代码中用到的一般都是实体类，使用场景大部分都是单例的，换句话说如果使用setter也都是自己代码的操作，不会影响别的线程，而如果每个方法严格定义getter和setter，感觉性价比不高。可能有一些我没有想到的能导致严重事故的场景，请老师解惑","like_count":0},{"had_liked":false,"id":311057,"user_name":"刘建军","can_delete":false,"product_type":"c1","uid":2348590,"ip_address":"","ucode":"25210BF7BE6BA8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/We0naYhWttpJPDoO7TCndu5w1r4PSCdo57M61Zia8khXmM8GibicDzYdXiaJXZNok7274mSfB4aEMgxyiaDY1pRba0w/132","comment_is_top":false,"comment_ctime":1631057709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631057709","product_id":100039001,"comment_content":"面向过程，面向对象只是我们看待问题的角度不一样，面向对象是整体看待，面向过程是看细节","like_count":0},{"had_liked":false,"id":310444,"user_name":"渠梁","can_delete":false,"product_type":"c1","uid":1488038,"ip_address":"","ucode":"DC86BDEC63C9BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/a6/b6fa2562.jpg","comment_is_top":false,"comment_ctime":1630657270,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630657270","product_id":100039001,"comment_content":"不提供set方法，那bo vo dto 之间属性怎样传递赋值呢","like_count":0},{"had_liked":false,"id":310384,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1630636401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630636401","product_id":100039001,"comment_content":"面向对象编程注意点<br>1、使用 setter getter 前先考虑清楚是否有必要暴露<br>2、项目中使用 constants 和 utills 注意细化区分<br>3、现今大部分 mvc 模型使用的是贫血模型，基础数据和业务方法确实是分开的，它是面向过程编程，但是想不出面向对象该如何处理，如果增加繁琐和复杂度还会面向对象编程吗","like_count":0},{"had_liked":false,"id":308028,"user_name":"Geek_6865f5","can_delete":false,"product_type":"c1","uid":2741599,"ip_address":"","ucode":"0367AC106E742F","user_header":"","comment_is_top":false,"comment_ctime":1629362397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629362397","product_id":100039001,"comment_content":"在java ，Switch语法中，执行代码块，就好像是面向过程。而kotlin的when语法就可以返回对象。所以kotlin的when语法更面向对象，是吗？","like_count":0},{"had_liked":false,"id":307265,"user_name":"小周","can_delete":false,"product_type":"c1","uid":2453498,"ip_address":"","ucode":"7ED7BC27A46C4C","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/fa/615a0df3.jpg","comment_is_top":false,"comment_ctime":1628995149,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628995149","product_id":100039001,"comment_content":"写了这么久的代码，居然都是面向过程编程风格的代码o(╥﹏╥)o","like_count":0},{"had_liked":false,"id":301114,"user_name":"萧潇","can_delete":false,"product_type":"c1","uid":1475866,"ip_address":"","ucode":"1FA83092845507","user_header":"https://static001.geekbang.org/account/avatar/00/16/85/1a/fc016813.jpg","comment_is_top":false,"comment_ctime":1625541722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625541722","product_id":100039001,"comment_content":"近几年在做游戏项目 为了提高实时性 大多数数据都会拉到缓存中 业务逻辑也使用较多充血模型设计","like_count":0},{"had_liked":false,"id":297243,"user_name":"Rio","can_delete":false,"product_type":"c1","uid":2603771,"ip_address":"","ucode":"679B3CEDF6D196","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/6a8fRQFxX5WjDwkXv49SBXd1vvXozzaCGj2m4FgicB2aykLLFO8pvnXibCbLTMUHsa3AsGH5UGFaSdulLkPP3s7Q/132","comment_is_top":false,"comment_ctime":1623392364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623392364","product_id":100039001,"comment_content":"想问下，那比如我有个逻辑删除或者状态，是应该提供set方法还是不提供呢，不提供那逻辑删除怎么修改，订单状态怎么修改？提供的话，那订单状态任何人不都可以修改了吗","like_count":0},{"had_liked":false,"id":293812,"user_name":"编号","can_delete":false,"product_type":"c1","uid":1037836,"ip_address":"","ucode":"1633A363592A1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d6/0c/df0d5152.jpg","comment_is_top":false,"comment_ctime":1621564013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621564013","product_id":100039001,"comment_content":"实在没弄懂：如果提供了对外部的set方法，会造成对数据的修改。项目都上线了，还能在运行的时候，往代码里面加个set方法来修改数据吗？","like_count":0},{"had_liked":false,"id":288873,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1618742460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618742460","product_id":100039001,"comment_content":"第2个话题，有些程序代码涉及的数据库处理，特别是那些没有应用数据持久化框架的程序代码，所有涉及到数据库处理的代码几乎全部是面向过程的风格，只不过代码用一个控制类来封装一下，因些表面上看好像也是面向对象的。","like_count":0},{"had_liked":false,"id":287529,"user_name":"爱学习的Kirk","can_delete":false,"product_type":"c1","uid":2392633,"ip_address":"","ucode":"CB6607E26037EC","user_header":"https://static001.geekbang.org/account/avatar/00/24/82/39/c3227567.jpg","comment_is_top":false,"comment_ctime":1618016024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618016024","product_id":100039001,"comment_content":"努力学习，发现自己连面相过程代码都写得不是很清晰，努力让自己无论何种语言都能体现面相对象的思想！","like_count":0},{"had_liked":false,"id":284115,"user_name":"。","can_delete":false,"product_type":"c1","uid":2529737,"ip_address":"","ucode":"BA28F53B20B647","user_header":"https://static001.geekbang.org/account/avatar/00/26/99/c9/6b193193.jpg","comment_is_top":false,"comment_ctime":1616069001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616069001","product_id":100039001,"comment_content":"看到一半，这个购物车设计得确实很妥，完美。终于领会到封装得魅力了","like_count":0},{"had_liked":false,"id":281774,"user_name":"椰子","can_delete":false,"product_type":"c1","uid":1537505,"ip_address":"","ucode":"55723E3E193D8F","user_header":"https://static001.geekbang.org/account/avatar/00/17/75/e1/1a5e8eb8.jpg","comment_is_top":false,"comment_ctime":1614878661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614878661","product_id":100039001,"comment_content":"看了才知道，之前代码写的问题太多","like_count":0},{"had_liked":false,"id":280643,"user_name":"Lanyok","can_delete":false,"product_type":"c1","uid":1016669,"ip_address":"","ucode":"FB55036166E4AE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/5d/1129ca22.jpg","comment_is_top":false,"comment_ctime":1614303597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614303597","product_id":100039001,"comment_content":"团队水平和Leader的的水平，一般密集迭代的产品，都很少有思考程序设计的时间。（ps:小公司）","like_count":0},{"had_liked":false,"id":279382,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1613744660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613744660","product_id":100039001,"comment_content":"谢谢老师的讲解，非常解惑。面向对象和面向过程的确有时候在实践中边界不是非常清晰，但是通过老师的讲解，我认为一个基本原则就是代码的复用和结偶，以及代码的优雅。如果是单兵作战作战，能用也许就好，但是团队协作，OOP就体现优势了，避免了很多容易出错的可能。再次感谢！","like_count":0},{"had_liked":false,"id":277834,"user_name":"小太阳","can_delete":false,"product_type":"c1","uid":1072350,"ip_address":"","ucode":"84FF032FE78B11","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/de/16695891.jpg","comment_is_top":false,"comment_ctime":1612612053,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1612612053","product_id":100039001,"comment_content":"这一章老师讲解得很好，同学们解答也很棒，引发了很多思考🤔","like_count":0},{"had_liked":false,"id":274933,"user_name":"Geek_cca021","can_delete":false,"product_type":"c1","uid":2209611,"ip_address":"","ucode":"09675F01BB895E","user_header":"","comment_is_top":false,"comment_ctime":1611220870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611220870","product_id":100039001,"comment_content":"对 getter&#47;setter辩解下：怎么知道不是因为公司基于代码量的KPI考核？ 注解都用上了，getter&#47;setter不是更香吗","like_count":0},{"had_liked":false,"id":274238,"user_name":"刘立嘉","can_delete":false,"product_type":"c1","uid":2414637,"ip_address":"","ucode":"1241140EBE7FE3","user_header":"https://static001.geekbang.org/account/avatar/00/24/d8/2d/6ec3760c.jpg","comment_is_top":false,"comment_ctime":1610936253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610936253","product_id":100039001,"comment_content":"工作中需要测试服务返回的JSON报文，习惯用Const类来定义整个项目用到的常量，最多分两个，一个放所有的key的名称，一个放预期value。名称就叫FieldConsts和ValueConsts，很不好。学习了，将常量声明，放到用到它的类里，分而治之，增强可移植性。","like_count":0},{"had_liked":false,"id":274149,"user_name":"胡了","can_delete":false,"product_type":"c1","uid":1042339,"ip_address":"","ucode":"A36D7870DD0783","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/a3/229d9704.jpg","comment_is_top":false,"comment_ctime":1610873779,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1610873779","product_id":100039001,"comment_content":"python在返回一个list的时候，增加 list.copy() 可以阻止数据被修改，这样的方式是否可行？","like_count":0},{"had_liked":false,"id":268402,"user_name":"子房","can_delete":false,"product_type":"c1","uid":1438860,"ip_address":"","ucode":"CB05938C248BB3","user_header":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","comment_is_top":false,"comment_ctime":1608177667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608177667","product_id":100039001,"comment_content":"oh, Mr zheng, this article deeply influence me. ","like_count":0},{"had_liked":false,"id":260025,"user_name":"边缘","can_delete":false,"product_type":"c1","uid":2037677,"ip_address":"","ucode":"2437864D6E4333","user_header":"https://static001.geekbang.org/account/avatar/00/1f/17/ad/96ff4c27.jpg","comment_is_top":false,"comment_ctime":1604910669,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1604910669","product_id":100039001,"comment_content":"不单独地设计 Constants 常量类，而是哪个类用到了某个常量，我们就把这个常量定义到这个类中。<br><br>如果很多个类都用到了该常量的话，每个类都需要定义一个，那就没有起到复用的效果呢","like_count":0,"discussions":[{"author":{"id":1904717,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/10/4d/3f4ae286.jpg","nickname":"Dimon Ho","note":"","ucode":"5B090E7FF6FC05","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374187,"discussion_content":"老师说的是如果这个常量只有这一个类中有使用，就在这个类中定义就好了，没必要放在Constants类中，如果这个常量在项目中多个地方使用，肯定还是要在Constants中定义的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621055097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256099,"user_name":"庄周梦蝶","can_delete":false,"product_type":"c1","uid":1693576,"ip_address":"","ucode":"7878ED3EB11E97","user_header":"https://static001.geekbang.org/account/avatar/00/19/d7/88/7dcde249.jpg","comment_is_top":false,"comment_ctime":1603527319,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603527319","product_id":100039001,"comment_content":"我觉得mvc会流行很久，因为这样好扩展，阿里的编程规范里也有四层分层。<br>现在web应用都是存储和计算为主，而存储这块东西就太多了，各种相差太大，为了系统性能往往混合应用。如果存储这块有个牛逼的以面向对象思维存储编程，然后性能又好，那么做开发就要简单好多了。","like_count":0},{"had_liked":false,"id":252190,"user_name":"Fupingstar","can_delete":false,"product_type":"c1","uid":1758671,"ip_address":"","ucode":"7C870EEAAD2BB8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/J2H41XDGJSYVZzACFBFqZaozxy2GuCGN5HrPXpb5YlItW0UQabCnWYIfF706SUK7ytHn3k1ibtj6lOytiaiakbs8g/132","comment_is_top":false,"comment_ctime":1602168163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602168163","product_id":100039001,"comment_content":"Java中用枚举代替常量类是一种好的方式吗","like_count":0},{"had_liked":false,"id":247292,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1599651122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599651122","product_id":100039001,"comment_content":"【要点】<br>1、哪些代码设计看似是面向对象，实际是面向过程的？<br>(1)滥用 getter、setter 方法。暴露不应该暴露的getter和setter方法，违反了面向对象编程的封装特性，相当于将面向对象编程风格退化成了面向过程编程风格。在设计实现类的时候，除非真的需要，否则，尽量不要给属性定义 setter 方法。除此之外，尽管 getter 方法相对 setter 方法要安全些，但是如果返回的是集合容器（比如例子中的 List 容器），也要防范集合内部数据被修改的危险。<br>(2)滥用全局变量和全局方法。常见的就是Constants 类和Utils 类的使用。<br>·Constants 类的设计，可借鉴两种思路。第一种是将 Constants 类拆解为功能更加单一的多个类，比如跟 MySQL 配置相关的常量，我们放到 MysqlConstants 类中；跟 Redis 配置相关的常量，我们放到 RedisConstants 类中。还有一种更好的设计思路，那就是并不单独地设计 Constants 常量类，而是哪个类用到了某个常量，我们就把这个常量定义到这个类中。比如，RedisConfig 类用到了 Redis 配置相关的常量，那我们就直接将这些常量定义在 RedisConfig 中，这样也提高了类设计的内聚性和代码的复用性。<br>·如果确实有必要去定义这样一个 Utils 类，那就大胆地去定义它吧，只要它能为我们写出好的代码贡献力量，我们就可以适度地去使用。设计 Utils 类的时候，最好也能细化一下，针对不同的功能，设计不同的 Utils 类，比如 FileUtils、IOUtils、StringUtils、UrlUtils 等，不要设计一个过于大而全的 Utils 类。<br>(3)定义数据和方法分离的类。这种开发模式叫作基于贫血模型的开发模式，也是我们现在非常常用的一种 Web 项目的开发模式。这种开发模式是彻彻底底的面向过程编程风格的，因为数据和操作是分开定义在 VO&#47;BO&#47;Entity 和 Controler&#47;Service&#47;Repository 中的。而在很多公司的实际项目中，贫血模型可以高效的解决问题，对象仅仅作为传递数据的媒介，不用考虑过多的设计方面，将核心业务逻辑放到service层，用ORM框架一套，就可以解决问题了。<br>2、在面向对象编程中，容易写出面向过程风格的代码的原因：在生活中，你去完成一个任务，你一般都会思考，应该先做什么、后做什么，如何一步一步地顺序执行一系列操作，最后完成整个任务。面向过程编程风格恰恰符合人的这种流程化思维方式。而面向对象编程风格正好相反。它是一种自底向上的思考方式。它不是先去按照执行流程来分解任务，而是将任务翻译成一个一个的小的模块（也就是类），设计类之间的交互，最后按照流程将类组装起来，完成整个任务。这样的思考路径比较适合复杂程序的开发，但并不是特别符合人类的思考习惯。<br>3、面向过程编程及面向过程编程语言的使用：不管使用面向过程还是面向对象哪种风格来写代码，我们最终的目的还是写出易维护、易读、易复用、易扩展的高质量代码。只要我们能避免面向过程编程风格的一些弊端，控制好它的副作用，在掌控范围内为我们所用，我们就大可不用避讳在面向对象编程中写面向过程风格的代码。<br>【思考】<br>浏览器内核的代码就非常好的控制了Constants类和Utils类的使用。这两种类的都是根据模块来的，各个模块有各个模块自己的Constants和Utils类。这两种类会很好的限定在模块内部使用。<br>另外一个思路就是，对于引入的工具包，最好根据业务做一层封装，用到该工具包的之后，统一调用自己的封装层，而不是每个地方都去直接调用工具包的API，这样后续方便工具包的升级或者兼容其他的类似工具包。","like_count":0},{"had_liked":false,"id":246492,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1599377744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599377744","product_id":100039001,"comment_content":"突然发现自己对面向对象和面向过程有了更深一层的认识，同时也为自己用面向对象语言写了多年的面向过程代码却不自知感到“羞耻”。不管学什么，只要去学习总能发现自己内心缺失的东西，就像老师的专栏，每篇文章都能有很明显的收获，拜读之后犹如醍醐灌顶，不断提升自我对技术的认知。","like_count":0},{"had_liked":false,"id":245740,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599038038,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599038038","product_id":100039001,"comment_content":"问题1：<br>1、C语言用struct，是否能满足4大特性不清楚<br><br>问题2：<br>1、当再一个类中设计了过多的函数，之后再一个大main中完成工作","like_count":0},{"had_liked":false,"id":242582,"user_name":"飞狼踏月渡惊风","can_delete":false,"product_type":"c1","uid":1531473,"ip_address":"","ucode":"48E64ABDE30464","user_header":"https://static001.geekbang.org/account/avatar/00/17/5e/51/f52b0e17.jpg","comment_is_top":false,"comment_ctime":1597767723,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597767723","product_id":100039001,"comment_content":"关于“Constants 常量类，而是哪个类用到了某个常量，我们就把这个常量定义到这个类中”，那么当其他类也需要这个常量呢","like_count":0,"discussions":[{"author":{"id":1148142,"avatar":"https://static001.geekbang.org/account/avatar/00/11/84/ee/3a364ccd.jpg","nickname":"滇西之王","note":"","ucode":"B1EBFFAE3AECEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553140,"discussion_content":"公用的还是得提出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645752073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241658,"user_name":"阿骨打","can_delete":false,"product_type":"c1","uid":2122539,"ip_address":"","ucode":"35EADA5550162A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","comment_is_top":false,"comment_ctime":1597384232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597384232","product_id":100039001,"comment_content":"太牛了","like_count":0},{"had_liked":false,"id":241467,"user_name":"锋子","can_delete":false,"product_type":"c1","uid":1681459,"ip_address":"","ucode":"89FFA85BDB1C99","user_header":"https://static001.geekbang.org/account/avatar/00/19/a8/33/b71635c1.jpg","comment_is_top":false,"comment_ctime":1597303512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597303512","product_id":100039001,"comment_content":" 看完这篇收获很多，但也产生一个迷惑： 到底是面向对象更符合人的思维习惯，还是面向过程更符合？ <br>- OOP 语言更加人性化、更加高级、更加智能，让人跟机器打交道越来越容易。<br>- 但其实，进行面向对象编程的时候，很容易不由自主地就写出面向过程风格的代码，或者说感觉面向过程风格的代码更容易写。这是为什么呢？面向过程编程风格恰恰符合人的这种流程化思维方式","like_count":0},{"had_liked":false,"id":240362,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1596877138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596877138","product_id":100039001,"comment_content":"1 c语言可以使用struct<br>2 除了文中的三个，想不到其他的了","like_count":0},{"had_liked":false,"id":240194,"user_name":"Carisy","can_delete":false,"product_type":"c1","uid":1657429,"ip_address":"","ucode":"67E887967347BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLwTZdUafC5YM7bCASt8icUnoyYfV4hUHulexibDI7B4eaokTxYXHFtoic97DBlCAU9j5Jw4QUuGhyZQ/132","comment_is_top":false,"comment_ctime":1596784693,"is_pvip":false,"replies":[{"id":"89265","content":"并不是都不能加的，必要的时候也可以加getter、setter的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1597453600,"ip_address":"","comment_id":240194,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596784693","product_id":100039001,"comment_content":"老师我不是很理解不能加getter&#47;setter 这样可能在面向对象角度来看会好些，但是有很多类似于mybatis dubbo 这种很多都依赖getter&#47;setter 如果没有的话数据要从哪来呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503369,"discussion_content":"并不是都不能加的，必要的时候也可以加getter、setter的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597453600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239557,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1596587617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596587617","product_id":100039001,"comment_content":"记住一句不要按顺序思考，而是按模块思考","like_count":0},{"had_liked":false,"id":239436,"user_name":"牛胆大","can_delete":false,"product_type":"c1","uid":1273094,"ip_address":"","ucode":"EF8891FF4FE38A","user_header":"https://static001.geekbang.org/account/avatar/00/13/6d/06/7e0566f9.jpg","comment_is_top":false,"comment_ctime":1596531612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596531612","product_id":100039001,"comment_content":"贫血模型，充血模型，尤记得当年javaeye上的热烈讨论。","like_count":0},{"had_liked":false,"id":238154,"user_name":"owen","can_delete":false,"product_type":"c1","uid":1902116,"ip_address":"","ucode":"0E79DA9080A085","user_header":"https://static001.geekbang.org/account/avatar/00/1d/06/24/c2ee3b16.jpg","comment_is_top":false,"comment_ctime":1596082150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596082150","product_id":100039001,"comment_content":"public List&lt;ShoppingCartItem&gt; getItems() {    return Collections.unmodifiableList(this.items);  }<br>但对这种引用对象要进行逻辑处理，代码逻辑就会复杂起来，而且页面还不提示语法错误在别人调用时修改时容易出现坑","like_count":0},{"had_liked":false,"id":237997,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1596024147,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596024147","product_id":100039001,"comment_content":"面向过程是&quot;单兵作战&quot; 效率高。但是一个人的力量终归是有效的。面向对象这种&quot;团队作战&quot;的形式应运而生","like_count":0},{"had_liked":false,"id":230079,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1593253060,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593253060","product_id":100039001,"comment_content":"java语言编程风格框定了必须要以类的形式进行开发。<br>并且语言层面提供了4大特性用以支撑面向对象开发。<br>","like_count":0},{"had_liked":false,"id":228701,"user_name":"见南山","can_delete":false,"product_type":"c1","uid":1118111,"ip_address":"","ucode":"6A8BB82B7573CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/9f/f4b06bd5.jpg","comment_is_top":false,"comment_ctime":1592789823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592789823","product_id":100039001,"comment_content":"以前每次写的时候，都会搞出来很多Bean对象加上set get，以为面向对象就是构造很多对象出来，原来是还是面向过程啊","like_count":0},{"had_liked":false,"id":228303,"user_name":"大方方","can_delete":false,"product_type":"c1","uid":1354013,"ip_address":"","ucode":"621AD8F1485753","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6cyOoRd2dROgiblAJkW6RLhUyH1wwU0NNibIIuV930eQ9TiaNT41K61kBSVkvYoDYg7mJtuEoCQY1awBmV0WW6BFg/132","comment_is_top":false,"comment_ctime":1592638363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592638363","product_id":100039001,"comment_content":"我是technical animator 转学untiy3D C#编程的，选这门课程作为提高程序设计的能力途径。之前项目里经常用多态做扩展，算是典型面向对象应用。但是采用的MVC构建在数据方面又类似贫血模型的面向过程风格。现在Unity 官方开始革新的DOTS 技术 ，又开始鼓励大家从面向对象改成面向数据编程，某种程度似乎又回到了面向过程的一些精神。","like_count":0},{"had_liked":false,"id":228160,"user_name":"Abcd","can_delete":false,"product_type":"c1","uid":1796908,"ip_address":"","ucode":"274C7487FDDC21","user_header":"https://static001.geekbang.org/account/avatar/00/1b/6b/2c/b27eefc5.jpg","comment_is_top":false,"comment_ctime":1592571292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592571292","product_id":100039001,"comment_content":"C语言完全可以面向对象，私有的属性和方法可以放进.c源文件中的结构体，c源文件中的结构体继承.h中public的基类，多态就更是不在话下了。虽然很绕，但是写个几次就熟练了","like_count":0},{"had_liked":false,"id":224205,"user_name":"『至爱闫』","can_delete":false,"product_type":"c1","uid":1475423,"ip_address":"","ucode":"2A4F0E0DE6C196","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/5f/50f2fdf2.jpg","comment_is_top":false,"comment_ctime":1591317163,"is_pvip":false,"replies":[{"id":"84004","content":"没说一定不用啊，必要的时候就用呢","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1592527002,"ip_address":"","comment_id":224205,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591317163","product_id":100039001,"comment_content":"不用setter如何更好的把数据赋值给实例。？比如数据库mybatis不加setter如何给DO赋值呢。？不加setter如何又把值赋值出去呢。？难道推荐使用构造或者builder么。？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497399,"discussion_content":"没说一定不用啊，必要的时候就用呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592527002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220734,"user_name":"朝小树","can_delete":false,"product_type":"c1","uid":1323875,"ip_address":"","ucode":"18DC282DEF16C8","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/63/2d48822a.jpg","comment_is_top":false,"comment_ctime":1590316306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590316306","product_id":100039001,"comment_content":"lombok插件或者各种生成器会直接生成各种get，set方法，我们要根据情况，开放哪些字段的权限","like_count":0},{"had_liked":false,"id":219267,"user_name":"李达龙","can_delete":false,"product_type":"c1","uid":1450486,"ip_address":"","ucode":"F5702E69D90B7F","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/f6/16bc9c24.jpg","comment_is_top":false,"comment_ctime":1589979977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589979977","product_id":100039001,"comment_content":"最近工作上实现的一个模块分支语句用的太多了，一方面可读性会变差，不易理解，可扩展性，可维护性都不太好，典型的面向过程风格！用的面向对象编程语言却写了面向过程的代码","like_count":0},{"had_liked":false,"id":217589,"user_name":"郭俊杰","can_delete":false,"product_type":"c1","uid":1082785,"ip_address":"","ucode":"D328E5738A4413","user_header":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","comment_is_top":false,"comment_ctime":1589539372,"is_pvip":false,"replies":[{"id":"86259","content":"py？😊","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1594388823,"ip_address":"","comment_id":217589,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589539372","product_id":100039001,"comment_content":"老师，入坑py，一起AI吧。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495189,"discussion_content":"py？😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594388823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216399,"user_name":"Mr.S","can_delete":false,"product_type":"c1","uid":1158946,"ip_address":"","ucode":"96DC8BE01D54C2","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/22/559c2fdb.jpg","comment_is_top":false,"comment_ctime":1589252015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589252015","product_id":100039001,"comment_content":"用了一阵子Go写web程序，基于现有的开发模式和框架很容易写出面向过程的代码<br>如： 使用gin框架写controller接口，全是全局方法，model层的一些查询语句，也是全局方法<br>","like_count":0},{"had_liked":false,"id":216224,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1589207162,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589207162","product_id":100039001,"comment_content":"面向对象编程和面向过程编程是两种编程风格，我们时常会在使用面向对象的编程语言时，写出面向过程的风格的代码。<br><br>出现这种现象的技术原因：<br>1：滥用get,set <br>2，是构建大且杂的contents类，util类<br>3，基本贫血模式的编程模型<br>另外非技术的原因是：<br>1，面向过程编程更简单，易上手，而面向对象则需要首先思考如何规划类对象之间关系，属性的封装<br>2，面向过程是一种从下往上是思考模式，符合人们按部就班的思考习惯","like_count":0},{"had_liked":false,"id":215944,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589157662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589157662","product_id":100039001,"comment_content":"面向对象是自底而上的思考过程，先把任务拆分为类或抽象为接口，再设计类之间的调用关系，根据流程组装类。面向对象OOA OOD OOP<br>不符合人类思考问题的习惯，面向过程更符合人类思考问题的习惯，所以导致很多贫血模型。","like_count":0},{"had_liked":false,"id":215932,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589155027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589155027","product_id":100039001,"comment_content":"贫血模型数据和类分离后，强制要求属性都有public set方法，破坏了数据的封装，原来只能在类内部赋值的属性得不到数据保护。go也有这个问题，为了让包外的序列化方法和使用统一的SQL Driver的scan程序可见(set)，必须首字母大写，也破坏了数据的封装。分层开发也破坏的数据的封装，VO&lt;--&gt;BO&lt;--&gt;Entity都必须要求属性是public。","like_count":0},{"had_liked":false,"id":214001,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588614169,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1588614169","product_id":100039001,"comment_content":"原来我一直在写面向过程编码啊","like_count":0},{"had_liked":false,"id":213999,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588614085,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1588614085","product_id":100039001,"comment_content":"除了java直用过kotlin，看来还得学一下c＋＋","like_count":0},{"had_liked":false,"id":211386,"user_name":"Geek_d5c720","can_delete":false,"product_type":"c1","uid":1960161,"ip_address":"","ucode":"259FA647B32456","user_header":"","comment_is_top":false,"comment_ctime":1587956302,"is_pvip":false,"replies":[{"id":"78754","content":"后面会讲到的 你往后看看","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1588042140,"ip_address":"","comment_id":211386,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587956302","product_id":100039001,"comment_content":"争老师，现在写项目感觉都是把需求分解成了一个一个的步骤，很自然的就想到定义一个一个对象，对象里面有这些步骤对应的方法，然后就拿对象去拼接这些步骤。我想知道有没有一个简单易懂的原则，让我面对这些需求不再是想着一步一步的操作，而是一个一个对象的关系呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493263,"discussion_content":"后面会讲到的 你往后看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588042140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210959,"user_name":"KID","can_delete":false,"product_type":"c1","uid":1867938,"ip_address":"","ucode":"EE80B7CA7CC2A2","user_header":"https://static001.geekbang.org/account/avatar/00/1c/80/a2/96dcd1fa.jpg","comment_is_top":false,"comment_ctime":1587870440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587870440","product_id":100039001,"comment_content":"虽然用着c#，但是也经常会写成面向过程的代码，特别是view的部分","like_count":0},{"had_liked":false,"id":210613,"user_name":"张张先生","can_delete":false,"product_type":"c1","uid":1582951,"ip_address":"","ucode":"91B0E84B47AF05","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqrSGol9ss3nzh6Hqj2BYxBTlYbhSe72Og6Vx5CSb5iboibL9xZdWdYOpZzmN2ibj9EpboNDdRBSXSZw/132","comment_is_top":false,"comment_ctime":1587795840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587795840","product_id":100039001,"comment_content":"对于mvc模型一直隐隐觉得有些问题，但是不知道到底哪里有问题，学习了本节内容后恍然大悟","like_count":0},{"had_liked":false,"id":208260,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1587309636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587309636","product_id":100039001,"comment_content":"贫血模型 我认为主要还是应为开发中 大多是先上线 然后才有业务变更。简约的设计有利于业务开发和更新，活下来才有重构的机会","like_count":0},{"had_liked":false,"id":208144,"user_name":"Geek__93441785f6a2","can_delete":false,"product_type":"c1","uid":1450033,"ip_address":"","ucode":"03F5A9C37FF728","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLOCkhE6EF8dpnug21uHof7bu6YnM2gwEMDtdTtCPmRibKx4CUiass25UfMSwib8zJ7lwv8beYYXjLCA/132","comment_is_top":false,"comment_ctime":1587283689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587283689","product_id":100039001,"comment_content":"之前也订阅了您的数据结构与算法之美，您这两个专栏中的文章真的解答了许多我之前没有搞明白的或者理解不深的问题","like_count":0},{"had_liked":false,"id":205128,"user_name":"travel","can_delete":false,"product_type":"c1","uid":1947327,"ip_address":"","ucode":"4F32EA47884FFD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq3jEX89jTh4BveV7bSgGHkYTt8fmB1L23Zj8LyWSa3fP1B8OvMzXCTaibGfnPXPYDc9U8gxkzlRoA/132","comment_is_top":false,"comment_ctime":1586535382,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586535382","product_id":100039001,"comment_content":"贫血模型的流行跟spring框架的广泛应用分不开","like_count":0},{"had_liked":false,"id":203499,"user_name":"铁血柔情","can_delete":false,"product_type":"c1","uid":1124220,"ip_address":"","ucode":"F09CACF06B8D05","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/7c/463d4342.jpg","comment_is_top":false,"comment_ctime":1586222301,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1586222301","product_id":100039001,"comment_content":"其实vue.js也是一种面向对象编程的语言，先定义对象，还有对象属性实现一系列的功能。在工作中遇到的就是一个service的实现类中写了不是当前业务的功能，这个类有上千行的代码，跟当前业务相关的只有一百行。","like_count":0,"discussions":[{"author":{"id":1283461,"avatar":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","nickname":"杨锋","note":"","ucode":"85A7828A538FB0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284969,"discussion_content":"vue.js不是个框架吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592702542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202874,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1586078487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586078487","product_id":100039001,"comment_content":"只用面向对象编程的函数些业务逻辑，没有去抽象类","like_count":0},{"had_liked":false,"id":201429,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1585788120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585788120","product_id":100039001,"comment_content":"我有种感觉这么多年，一直用面向对象编程语言写面向过程的代码，这么多年都白过了","like_count":0},{"had_liked":false,"id":201422,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1585786911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585786911","product_id":100039001,"comment_content":"因为稍微有点流程搞了不下于三个的if else 的语句，我觉得就是面向过程编程","like_count":0},{"had_liked":false,"id":197876,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585401679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585401679","product_id":100039001,"comment_content":"我之前就是set get方法来一套，还有util工具类，还有 mvc模型，看来我只停留在老师所说的层面上了，我思想有待提高<br>","like_count":0},{"had_liked":false,"id":197203,"user_name":"桂冠远航","can_delete":false,"product_type":"c1","uid":1155463,"ip_address":"","ucode":"5959E1A1DAA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/87/259ab5a3.jpg","comment_is_top":false,"comment_ctime":1585363202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585363202","product_id":100039001,"comment_content":"DDD。","like_count":0},{"had_liked":false,"id":196377,"user_name":"鸡蛋石头","can_delete":false,"product_type":"c1","uid":1229450,"ip_address":"","ucode":"61801769E485C8","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/8a/aed13671.jpg","comment_is_top":false,"comment_ctime":1585277019,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585277019","product_id":100039001,"comment_content":"按模块或类型设计utils类","like_count":0},{"had_liked":false,"id":196284,"user_name":"猎手","can_delete":false,"product_type":"c1","uid":1802509,"ip_address":"","ucode":"438C14B0045387","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJYQ2t5vVmVJxT0icdu7fhWXb9Ln7IM9PgOMnFyzrRZELBk7Cv79kBEqaCJDzg4evEicT7MsLx9BKYg/132","comment_is_top":false,"comment_ctime":1585269726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585269726","product_id":100039001,"comment_content":"不应该局限于面向对象或者面向过程，从实际出发","like_count":0},{"had_liked":false,"id":195584,"user_name":"改名不换人","can_delete":false,"product_type":"c1","uid":1118242,"ip_address":"","ucode":"7E25577829FA0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/22/910f705c.jpg","comment_is_top":false,"comment_ctime":1585199627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585199627","product_id":100039001,"comment_content":"在写MVC后台的时候考虑过这到底是不是面向对象，后来也没有深入研究，这次看来能弄懂了，继续学习！","like_count":0},{"had_liked":false,"id":191409,"user_name":"不学不行啊","can_delete":false,"product_type":"c1","uid":1335474,"ip_address":"","ucode":"69368165141C2D","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/b2/ccebcb71.jpg","comment_is_top":false,"comment_ctime":1584771175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584771175","product_id":100039001,"comment_content":"在设计实现类的时候，除非真的需要，否则尽量不要给属性定义 setter 方法。除此之外，尽管 getter 方法相对 setter 方法要安全些，但是如果返回的是集合容器，那也要防范集合内部数据被修改的风险。","like_count":0},{"had_liked":false,"id":191151,"user_name":"Marvichov","can_delete":false,"product_type":"c1","uid":1111835,"ip_address":"","ucode":"7482099415C41C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","comment_is_top":false,"comment_ctime":1584750488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584750488","product_id":100039001,"comment_content":"https:&#47;&#47;miro.medium.com&#47;max&#47;3000&#47;0*kU-C5Y7F2UGEYGsV.jpg 发这个图片对比了贫血和充血模型rich domain model。原文链接 https:&#47;&#47;blog.pragmatists.com&#47;domain-driven-design-vs-anemic-model-how-do-they-differ-ffdee9371a86","like_count":0},{"had_liked":false,"id":190237,"user_name":"索旭东","can_delete":false,"product_type":"c1","uid":1139039,"ip_address":"","ucode":"BFD07BCD8C8CAE","user_header":"https://static001.geekbang.org/account/avatar/00/11/61/5f/b279daaf.jpg","comment_is_top":false,"comment_ctime":1584620503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584620503","product_id":100039001,"comment_content":"经常以为是面向对象，其实经常是用面向过程","like_count":0},{"had_liked":false,"id":189661,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1584539335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584539335","product_id":100039001,"comment_content":"第一次知道Collections.unmodifiableList()这个方法，受益匪浅。","like_count":0},{"had_liked":false,"id":184554,"user_name":"路人甲","can_delete":false,"product_type":"c1","uid":1480119,"ip_address":"","ucode":"B720984454AFAF","user_header":"https://static001.geekbang.org/account/avatar/00/16/95/b7/15e157ec.jpg","comment_is_top":false,"comment_ctime":1583336209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583336209","product_id":100039001,"comment_content":"原来我一直 写了这么多的面向过程的代码。 ","like_count":0},{"had_liked":false,"id":182008,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1582691341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582691341","product_id":100039001,"comment_content":"关于滥用 getter、setter 方法，这让我想起了 Spring 中 BeanFactory 类的设计。Spring BeanFactory 只允许查找，不允许修改数据，它提供了一个子类 ConfigurableListableBeanFactory 类则提供了大量的配置方法，如果 setBeanExpressionResolver 等。Spring 中一般提供 BeanFactory 给用户使用，ConfigurableListableBeanFactory 则提供给开发者使用，这样设计避免了滥用 getter、setter 方法，同时也符合单一职能原则。","like_count":0},{"had_liked":false,"id":181648,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1582603470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582603470","product_id":100039001,"comment_content":"原来我一直是手握屠龙宝刀砍柴用。","like_count":0},{"had_liked":false,"id":181403,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1582536036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582536036","product_id":100039001,"comment_content":"想起了当年刚从c转java的时候，写的代码被review，leader说一眼看过去就是面向过程的代码...","like_count":0},{"had_liked":false,"id":181043,"user_name":"Scarf","can_delete":false,"product_type":"c1","uid":1021792,"ip_address":"","ucode":"3EDD87BD6354D5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/60/873cd557.jpg","comment_is_top":false,"comment_ctime":1582465559,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582465559","product_id":100039001,"comment_content":"争哥，有个问题，你说‘而是哪个类用到了某个常量，我们就把这个常量定义到这个类中’，那如果某个常量被多个类使用，那在每个使用这个常量的类里都增加一个常量的定义？这样做是不是增加了代码量？？","like_count":0,"discussions":[{"author":{"id":1149022,"avatar":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","nickname":"scmath","note":"","ucode":"641023BB246C29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383570,"discussion_content":"类内部共享常量、包内部共享的常量、项目内部共享的常量，这只是类内部共享常量的做法。包内共享常量和项目共享常量也最好不要都放一起，根据功能拆分到多个类中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626162677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180142,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1582197376,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582197376","product_id":100039001,"comment_content":"<br>其实我觉得之所以用面向对象的编程语言写出面向过程的代码主要是对OOP理解的不到位，正如文章所说面向过程编程如何人脑的思考方式，也就是第一部干什么第二步干什么自然而然就写成了面向过程的代码，前面提到两者的区别组织方式的不同，其实写代码的时候多考虑一点，我可以怎么分“块”，每块的职责是什么，每块有哪些内容构成（属性和方法，只要职责明确了这两点也就清楚了）块之间是怎么交互的，这些问题思考清楚才算得上面向对象编程。你想想啊，小到工具类的命名、类的命名，大到现在的若干个微服务，不都是一个个“块”么，所以啊，还是想想清楚到底什么才是面向对象编程以及面向对象编程的四大特性才能在实际的开发中运用自如。扩展一下，为什么很多公司那么注重编程规范其中一个原因是代码的易读性会更好，易读性怎么体现不就落实到这一个个“块”中么。比如大一统的Constants类为什么不好，最大的问题就是职责不清晰，你让你一个保安去干财务你觉得合适么，你知道他是保安还是财务呢？！","like_count":0},{"had_liked":false,"id":179562,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582031960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582031960","product_id":100039001,"comment_content":"在实际开发过程中,所有的Entity都是使用的@Data注解去生成的getter setter方法,完全没有封装性","like_count":0},{"had_liked":false,"id":172626,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1579238141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579238141","product_id":100039001,"comment_content":"说实话面向对象（以及DDD）的经典书籍看了一堆，但是没写过几行真正面向对象的代码；上面提到的内容有种灵魂拷问的感觉，也隐约找到了自己一直以来的瓶颈所在","like_count":0},{"had_liked":false,"id":172422,"user_name":"Wings","can_delete":false,"product_type":"c1","uid":1215464,"ip_address":"","ucode":"047167807048EC","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/e8/7f09a744.jpg","comment_is_top":false,"comment_ctime":1579174758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579174758","product_id":100039001,"comment_content":"没看懂什么叫贫血和充血模型……","like_count":0},{"had_liked":false,"id":172251,"user_name":"淘海鱼","can_delete":false,"product_type":"c1","uid":1028099,"ip_address":"","ucode":"A43CC4384B70F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b0/03/f381bbfc.jpg","comment_is_top":false,"comment_ctime":1579140063,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579140063","product_id":100039001,"comment_content":"1. 滥用getter&#47;setter方法这一节，本质讲的是对象的自洽性与权限的控制。<br>2. Util类中采用面向过程方法是最简洁的最合理的设计，如无必要，勿增实体。<br>3. 贫血模式。框架的原因所致。而框架为何要如此设计？我理解这是对业务开发友好。","like_count":0},{"had_liked":false,"id":167352,"user_name":"依韵","can_delete":false,"product_type":"c1","uid":1153762,"ip_address":"","ucode":"02F5BED8BE0F6E","user_header":"https://static001.geekbang.org/account/avatar/00/11/9a/e2/271e0caf.jpg","comment_is_top":false,"comment_ctime":1577773953,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1577773953","product_id":100039001,"comment_content":"滥用getter setter的情况确实挺常见，不过这个问题相对来说是比较容易发现和修正的。 购物车那个例子中，数据需要外部访问的情况，作为一个前端工程师，常见的处理思路就是将数据深拷贝，供外部使用，即时恶意修改也不会对原来的逻辑造成影响。不过由于基本没写过服务端的代码，不确定此思路是否适用于服务端，会不会内层占用的问题。<br><br>面向对象的语言及代码组织形式，却完全写的是面向过程的情况，值得反思。","like_count":0},{"had_liked":false,"id":167205,"user_name":"桂城老托尼","can_delete":false,"product_type":"c1","uid":1306032,"ip_address":"","ucode":"139E4B8EE88B79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","comment_is_top":false,"comment_ctime":1577716042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577716042","product_id":100039001,"comment_content":"见了太多facade  bizshare coreservice repository client ,感觉都是在解决过程的问题，真正的ddd实践很少见，大部分领域都和表结构一一对应。 ","like_count":0},{"had_liked":false,"id":166870,"user_name":"公号-彤哥读源码","can_delete":false,"product_type":"c1","uid":1239881,"ip_address":"","ucode":"C0D16E1BA12DA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/49/bd914b5f.jpg","comment_is_top":false,"comment_ctime":1577619386,"is_pvip":false,"replies":[{"id":"64823","content":"后面有讲到的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1577666020,"ip_address":"","comment_id":166870,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577619386","product_id":100039001,"comment_content":"之前一直在想我们每天都在用MVC，几乎所有逻辑都在service里面，面向对象到底去哪了，希望争哥后面能解惑。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479660,"discussion_content":"后面有讲到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577666020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166475,"user_name":"Joewing","can_delete":false,"product_type":"c1","uid":1355554,"ip_address":"","ucode":"1417543A3B53D2","user_header":"","comment_is_top":false,"comment_ctime":1577456430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577456430","product_id":100039001,"comment_content":"这一章节VO BO 让我想到了DDD","like_count":0},{"had_liked":false,"id":166229,"user_name":"chief","can_delete":false,"product_type":"c1","uid":1036072,"ip_address":"","ucode":"DF9EDDDA883A41","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/28/fe15914b.jpg","comment_is_top":false,"comment_ctime":1577418985,"is_pvip":false,"replies":[{"id":"64832","content":"这种情况就要脱邪恶也没办法 后面实战篇会讲到","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1577666588,"ip_address":"","comment_id":166229,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1577418985","product_id":100039001,"comment_content":"好多框架对对象序列化都是使用get set方法实现的。因为使用了这些框架，不得已创建 get set方法，这种情况怎么办？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479450,"discussion_content":"这种情况就要脱邪恶也没办法 后面实战篇会讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577666588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166050,"user_name":"山下小妖","can_delete":false,"product_type":"c1","uid":1270902,"ip_address":"","ucode":"57FEBC09216A36","user_header":"https://static001.geekbang.org/account/avatar/00/13/64/76/05049c2f.jpg","comment_is_top":false,"comment_ctime":1577371468,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577371468","product_id":100039001,"comment_content":"将整体流程切分，然后自行创建多个类来包装这些代码，没有考虑类是什么，类有哪些属性和行为。这真的是很头疼的一件事，看似有了很多起了名字的类，非但没有帮助理解业务，反而造成了理解障碍。","like_count":0},{"had_liked":false,"id":165933,"user_name":"小飞","can_delete":false,"product_type":"c1","uid":1050983,"ip_address":"","ucode":"CFFF2E7768EF9A","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/67/7de7988a.jpg","comment_is_top":false,"comment_ctime":1577346602,"is_pvip":false,"replies":[{"id":"64850","content":"并没有说jdk是面向过程的啊 我是说jdk中也存在面向过程的设计","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1577668528,"ip_address":"","comment_id":165933,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1577346602","product_id":100039001,"comment_content":"想请问老师，为什么说 JDK 的设计是面向过程的呢？为什么我反倒认为 JDK 里面的设计是面向对象的设计呢？JDK 中，通过类来划分，类中提供了各自不同的方法来实现功能，对于调用者来说直接调用方法实现功能，并不需要考虑实现细节。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":479319,"discussion_content":"并没有说jdk是面向过程的啊 我是说jdk中也存在面向过程的设计","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577668528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165426,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1577236916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577236916","product_id":100039001,"comment_content":"一、哪些代码设计看似是面向对象，实际是面向过程的？<br>1.滥用getter、setter方法<br>设计实现类的时候，除非真的需要，否则不要给属性定义setter方法。如果getter方法返回的是集合容器，也要防范集合内部数据被修改的风险<br>2.Constants类、Utils类的设计问题<br>这两种类尽量做到职责单一、定义一些细化的小类，比如RedisConstants、FileUtils，不要定义一个大而全的Constants类、Utils类。将这些类的属性和方法划分归并到其它业务类中是最好不过的了，能提高类的内聚性和代码的可复用性<br>3.基于贫血模型的开发模式<br>因为数据和操作是分开定义在VO&#47;BO&#47;Entity和Controller&#47;Service&#47;Repository中的<br><br>二、在面向对象编程中，为什么容易写出面向过程风格的代码？<br>1.因为面向过程编程风格符合人的流程化思维方式。而面向对象编程风格是一种自底向上的思考方式，线将任务翻译成一个一个的小的模块（也就是类），设计类之间的交互，最后按流程组装，完成整个任务。<br>2.除此之外，面向对象编程比面向过程难一些，类的设计需要技巧和一定设计经验<br><br>三、面向过程编程及面向过程编程语言就真的无用武之地了吗？<br>1.如果开发微小程序或者一个数据处理相关的代码，以算法为主，数据为辅，面向过程编程风格更适合一些。<br>2.面向过程编程是面向对象编程的基础，类中每个方法的实现逻辑就是面向过程风格的代码<br><br>四、结论<br>不管是哪种风格的编程方式，最终的目的还是写出易维护、易读、易复用、易扩展的高质量代码。控制好面向过程编程风格的弊端和副作用，在掌控范围呢为我们所用，就不用避讳在面向对象编程中写面向过程风格的代码。<br>去其糟粕，取其精华。","like_count":0},{"had_liked":false,"id":164710,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1577079456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577079456","product_id":100039001,"comment_content":"平常就没有注意constants类, 全局变量都放到一个类中进行管理了.","like_count":0},{"had_liked":false,"id":164569,"user_name":"看，有只猪","can_delete":false,"product_type":"c1","uid":1137727,"ip_address":"","ucode":"F9BB302BC71CE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/5c/3f/34e5c750.jpg","comment_is_top":false,"comment_ctime":1577028652,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577028652","product_id":100039001,"comment_content":"文章疑问：针对滥用getter和setter方法小节中提出的返回容器类型数据时，如何防止调用者通过修改容器中的数据，影响到内部数据？这个问题可以通过深拷贝解决。","like_count":0},{"had_liked":false,"id":163068,"user_name":"Screenly","can_delete":false,"product_type":"c1","uid":1220387,"ip_address":"","ucode":"AF1FEDD17F5DC9","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/23/1b41af11.jpg","comment_is_top":false,"comment_ctime":1576652077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576652077","product_id":100039001,"comment_content":"所有致命点全中，而且天天在写。。。搬砖的气氛越来越浓了，期待后续的课程","like_count":0},{"had_liked":false,"id":161408,"user_name":"|･ω･｀)","can_delete":false,"product_type":"c1","uid":1636123,"ip_address":"","ucode":"34E1DF62058D80","user_header":"https://static001.geekbang.org/account/avatar/00/18/f7/1b/8036958c.jpg","comment_is_top":false,"comment_ctime":1576202075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576202075","product_id":100039001,"comment_content":"开发过程中，往往会纠结于是不是要给一个属性添加set方法，听了这节课之后明白了，如果给每个属性都添加set方法，会破坏类的数据，外部可以随意更改，很不安全","like_count":0},{"had_liked":false,"id":159800,"user_name":"爱水人家","can_delete":false,"product_type":"c1","uid":1730305,"ip_address":"","ucode":"0C94C6ACBC9CEB","user_header":"https://static001.geekbang.org/account/avatar/00/1a/67/01/44626cb9.jpg","comment_is_top":false,"comment_ctime":1575793677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575793677","product_id":100039001,"comment_content":"3类典型代码中，1类我出现过这个问题，不过后来我在看开源源码过程中改正过来了。2类问题有过类似经历，今天学习后遇到类似问题我有了参考和思路，这是收获啊。3类暂时还没遇到，不过先记下了","like_count":0},{"had_liked":false,"id":159045,"user_name":"火力全开","can_delete":false,"product_type":"c1","uid":1412220,"ip_address":"","ucode":"8CE1733A2F618C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","comment_is_top":false,"comment_ctime":1575523830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575523830","product_id":100039001,"comment_content":"这一篇感觉没学到什么东西，关于常量与工具类的问题是经常碰到感觉解决方案不是很好的地方，结果听完结论跟我正在使用的方式基本一致，只不过常量我是使用接口定义，get set 方法因为基本都是团队内开发，使用其它人的代码都会先交流沟通好，每个属性单独配置开发成本很高。最后贫血模式跟面向对象模式老师最好是分别举两个优秀开源项目的例子来分析。小项目还是面向过程的开发成本更低更有效","like_count":0},{"had_liked":false,"id":157687,"user_name":"hongyu","can_delete":false,"product_type":"c1","uid":1035593,"ip_address":"","ucode":"62CF7E3D433AC1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/49/4f490295.jpg","comment_is_top":false,"comment_ctime":1575247269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575247269","product_id":100039001,"comment_content":"面向对象就是操作对象  如果根据过程修改对象中的数据就是面向过程","like_count":0},{"had_liked":false,"id":157259,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1241567,"ip_address":"","ucode":"C42E11098E1B38","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","comment_is_top":false,"comment_ctime":1575099641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575099641","product_id":100039001,"comment_content":"为什么说静态方法将方法与数据分离？","like_count":0},{"had_liked":false,"id":156743,"user_name":"程浩","can_delete":false,"product_type":"c1","uid":1660225,"ip_address":"","ucode":"B178C4BF5965D3","user_header":"https://static001.geekbang.org/account/avatar/00/19/55/41/f4c22a44.jpg","comment_is_top":false,"comment_ctime":1574946106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574946106","product_id":100039001,"comment_content":"总结：<br>1、类的setter、getter方法之前确实没有太注意，默认全部暴露出去了，这样好像跟配置public属性没什么区别。另外也确实没想到集合类型属性的setter、getter怎么写，通过这篇文章学习了。不过，项目中都使用了Spring MVC，当VO作为Controller参数时好像是必须要有setter、getter的。总之，以后写代码还是注意一下吧。<br>2、Contants类和Utils类之前就有考虑过该怎么写。Utils类确实是不可避免的，很多不耦合数据的方法都放到了Utils类中。但是Contants类确很难确定该怎么写。有时候一个常量整个项目都要使用，有的是整个模块使用，有的只有单个类使用。记得阿里的编程规范里有写，从小范围到大范围以此设置Contants类的作用域。跟文章中的说法是相符的。<br>3、说实话，写了这么多项目代码，用了这么久的JAVA，没想到啊，没想到，一直在写的是面向过程的代码。通过这篇文章我知道了，我可能本来就不会写面向对象代码😭。","like_count":0},{"had_liked":false,"id":156266,"user_name":"CHS","can_delete":false,"product_type":"c1","uid":1240227,"ip_address":"","ucode":"3D8B2DABC0A1D6","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/a3/28763399.jpg","comment_is_top":false,"comment_ctime":1574845719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574845719","product_id":100039001,"comment_content":"向kotlin，groovy着两种语言，写一个实体类之后，自动就会有getter和setter的方法，这种怎么理解呢？","like_count":0},{"had_liked":false,"id":156013,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1428828,"ip_address":"","ucode":"1AEBD6F79941B7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","comment_is_top":false,"comment_ctime":1574812770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574812770","product_id":100039001,"comment_content":"1 思考题第二题: 面向对象封装中将所有属性和方法都用public修饰，对外开放访问，破坏封装特性，转变为面向过程风格形式。<br><br>2 文章中要保证集合中的类不被修改，可将类设计为不可变类，每次修改产生新的对象原对象保持不变。","like_count":0},{"had_liked":false,"id":155821,"user_name":"拒绝","can_delete":false,"product_type":"c1","uid":1335155,"ip_address":"","ucode":"CB0264C4D3FE17","user_header":"https://static001.geekbang.org/account/avatar/00/14/5f/73/bb3dc468.jpg","comment_is_top":false,"comment_ctime":1574761418,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574761418","product_id":100039001,"comment_content":"争哥，看了这边文章有些矛盾，不能滥用getter，setter方法，那当属性要赋值时该怎么做。像类序列化成JSON，不提供get set方法都无法序列化和反序列化。感觉自己用面向对象的编程语言写的最多的反而是面向过程的代码","like_count":0,"discussions":[{"author":{"id":1182937,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0c/d9/74d6b9d6.jpg","nickname":"笑豆","note":"","ucode":"8E96DB94BFDE83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70449,"discussion_content":"不能滥用，并不是不能用，需要赋值当然就可以添加，而且核心思想感觉是可以封装的就不要暴露出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575358087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155773,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1574753854,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574753854","product_id":100039001,"comment_content":"开发中不知道写了多少其他面向过程的代码，虽然最近一直在重构，但是自己的设计出发点还是面向过程的，希望学习完这门课之后能够在未来的重构中设计并写出更还看的代码","like_count":0},{"had_liked":false,"id":155636,"user_name":"greg","can_delete":false,"product_type":"c1","uid":1189197,"ip_address":"","ucode":"BEE952C7ED2C84","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/0o2FEeJiav8lK9Y49JUOBretDypyHic2FL9dSZYnweBPZ5ibm3vgfm3q7kgXmQEOGOLJFgPEcMweVFj5QTrt4Vb4g/132","comment_is_top":false,"comment_ctime":1574731144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574731144","product_id":100039001,"comment_content":"各种业务Manager 都是面向过程的写法吧。","like_count":0},{"had_liked":false,"id":155635,"user_name":"greg","can_delete":false,"product_type":"c1","uid":1189197,"ip_address":"","ucode":"BEE952C7ED2C84","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/0o2FEeJiav8lK9Y49JUOBretDypyHic2FL9dSZYnweBPZ5ibm3vgfm3q7kgXmQEOGOLJFgPEcMweVFj5QTrt4Vb4g/132","comment_is_top":false,"comment_ctime":1574731040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574731040","product_id":100039001,"comment_content":"期待Collections.unmodifiableList()存在的，可以通过修改对象的属性，来打破封装性，这个问题的解决方案。 ","like_count":0},{"had_liked":false,"id":155467,"user_name":"昵称不重要","can_delete":false,"product_type":"c1","uid":1156872,"ip_address":"","ucode":"50F0E9DC56AE3B","user_header":"https://static001.geekbang.org/account/avatar/00/11/a7/08/802cc83f.jpg","comment_is_top":false,"comment_ctime":1574691164,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574691164","product_id":100039001,"comment_content":"貌似目前写的基本都是贫血模型的代码😂","like_count":0},{"had_liked":false,"id":155227,"user_name":"星空123","can_delete":false,"product_type":"c1","uid":1596920,"ip_address":"","ucode":"E998A7C585671B","user_header":"https://static001.geekbang.org/account/avatar/00/18/5d/f8/7de2c1cc.jpg","comment_is_top":false,"comment_ctime":1574668336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574668336","product_id":100039001,"comment_content":"这个课确实买的贼值，半路出家的程序员 。还不想被淘汰，来不断学习提高自己的竞争力","like_count":0},{"had_liked":false,"id":155130,"user_name":"念去去·云","can_delete":false,"product_type":"c1","uid":1419980,"ip_address":"","ucode":"F185F5A4D963C6","user_header":"https://static001.geekbang.org/account/avatar/00/15/aa/cc/7285dd0a.jpg","comment_is_top":false,"comment_ctime":1574649732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574649732","product_id":100039001,"comment_content":"想了一下，自己写业务相关的代码时，object基本都是get、set。功能都是由service bean实现。做比较基础的服务时，会用一些对象承载数据的封装和权限控制。业务服务基本都是按面相过程来做的，通过功能分层，使业务逻辑更清晰，易维护。基础服务呢，用于解决业务服务中的公共能力、业务抽象问题，面相服务提供能力，结构会更灵活，面相对象编写会带来 易维护等好处吧。跟着老师的专栏，补补我的理论知识。","like_count":0},{"had_liked":false,"id":154976,"user_name":"大强","can_delete":false,"product_type":"c1","uid":1737397,"ip_address":"","ucode":"D5C64C5A01B25D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/82/b5/a6049a26.jpg","comment_is_top":false,"comment_ctime":1574608430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574608430","product_id":100039001,"comment_content":"一个函数几百行上千行😂","like_count":0},{"had_liked":false,"id":154972,"user_name":"OlafOO","can_delete":false,"product_type":"c1","uid":1019254,"ip_address":"","ucode":"105F8B194ED37B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/76/994a9929.jpg","comment_is_top":false,"comment_ctime":1574607867,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574607867","product_id":100039001,"comment_content":"每一层都定义Object的话一次请求会产生很多相似对象的吧，要是对内存敏感不适合这么操作","like_count":0},{"had_liked":false,"id":154963,"user_name":"树先生","can_delete":false,"product_type":"c1","uid":1141707,"ip_address":"","ucode":"A2740680E77AEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/6b/cb/5d7fa669.jpg","comment_is_top":false,"comment_ctime":1574605714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574605714","product_id":100039001,"comment_content":"我就是老师说的那种用Lombok的人，有时候就为了完成功能而开发，根本没有去考虑这样写会不会有危险的情况产生","like_count":0},{"had_liked":false,"id":154653,"user_name":"掌勺的小哥哥","can_delete":false,"product_type":"c1","uid":1738458,"ip_address":"","ucode":"7D5595B06A360F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/da/28f915be.jpg","comment_is_top":false,"comment_ctime":1574500897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574500897","product_id":100039001,"comment_content":"我现在写的实体类继承Serializable 直接都是 public 因为开发快（该怎么办...）","like_count":0},{"had_liked":false,"id":154652,"user_name":"PENG","can_delete":false,"product_type":"c1","uid":1239106,"ip_address":"","ucode":"28615BA561202D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/42/6061aefa.jpg","comment_is_top":false,"comment_ctime":1574500842,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574500842","product_id":100039001,"comment_content":"在getter和setter，以及constants和utils类上的使用上，有了更深的理解。在以后写代码的时候，一定要多加考虑了。","like_count":0},{"had_liked":false,"id":154309,"user_name":"阿狸爱JAVA","can_delete":false,"product_type":"c1","uid":1033566,"ip_address":"","ucode":"597971781B1500","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/5e/24cc5a72.jpg","comment_is_top":false,"comment_ctime":1574407253,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574407253","product_id":100039001,"comment_content":"不明白这样有什么问题，虽然把cart.getItems()这个清空了，但是他清空的只是对象里的数据，只要不做数据库的更新，也是影响不到真实的数据的<br>ShoppingCart cart = new ShoppCart();<br>...<br>cart.getItems().clear(); &#47;&#47; 清空购物车","like_count":0,"discussions":[{"author":{"id":2222614,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/1fXYkS0UlZUQQtzUpG2TZzVhVZHarfpWT5wjO7iajw959zysQks1vLFM2uQsKnYG3uQAhzenH9LP86goiciaCDNibQ/132","nickname":"Xingyi_Xie","note":"","ucode":"D1849DB8BFB1B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406832,"discussion_content":"购物车里的商品清空了，但是购物车 ShoppingCart 类的商品数量 itemsCount、商品总金额 totalPrice 属性的值却没有清零，这就BUG了。所以不允许外部代码直接修改某个内部属性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634832450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154307,"user_name":"真是艹0","can_delete":false,"product_type":"c1","uid":1234043,"ip_address":"","ucode":"0A082CE0D79C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/7b/74e59208.jpg","comment_is_top":false,"comment_ctime":1574407186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574407186","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":154204,"user_name":"那就这样吧","can_delete":false,"product_type":"c1","uid":1327343,"ip_address":"","ucode":"A1315C5EAF2917","user_header":"https://static001.geekbang.org/account/avatar/00/14/40/ef/52bbadb9.jpg","comment_is_top":false,"comment_ctime":1574390647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574390647","product_id":100039001,"comment_content":"今天的内容，感觉在项目中还是比较常见的。<br>比如Utils类，我们还是分的比较细的，StringUtil.JsonUtil.PacketUtil.FileUtil，都会区分的<br>get set方法也是，之前我自己也就直接生成，不过现在还是会考虑下，有些属性，不需要暴露的还是会规避这两个方法。<br>对于MVC模式，数据和操作分离的面向过程，在游戏开发中也会有分层操作的，但确实这样对于开发商来说，很容易上手和理解，业务层做相应操作就好，完成后放到数据层去持久化就好。","like_count":0},{"had_liked":false,"id":154105,"user_name":"曹晶","can_delete":false,"product_type":"c1","uid":1003884,"ip_address":"","ucode":"C15CF8030DEED1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/6c/26890599.jpg","comment_is_top":false,"comment_ctime":1574382038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574382038","product_id":100039001,"comment_content":"老师，我有个疑问，对于获取服务器配置的场景，配置项的Key值这种公共常量类，放在项目的什么层次比较好呢？如果放在底层，业务直接引用，每次修改带来的编译时间可能会增加；如果每个配置项单独用接口提供，那这个接口类又会有很多很多类似的接口，您有什么建议呢？","like_count":0},{"had_liked":false,"id":154050,"user_name":"musicq","can_delete":false,"product_type":"c1","uid":1031341,"ip_address":"","ucode":"80D778895F723A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/ad/ab6dedc0.jpg","comment_is_top":false,"comment_ctime":1574356024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574356024","product_id":100039001,"comment_content":"将constants定义在类里面的话、如果被其他类引用就不好了、有可能还会有循环引用的问题。还是分成一个个小类更妥","like_count":0},{"had_liked":false,"id":153973,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1574339510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574339510","product_id":100039001,"comment_content":"问题1，JS支持ES6完美解决，如果没有的话，我想就是创建一个变量，里面有变量也有方法，因为方法也算变量，调用的时候就用到方法也可以用（JS算什么虽然我一直是当作面向过程的使用，看winter大说是基于原型，算不算面向过程，现在TS也流行算不算面向过程）<br>问题2:滥用setser geter，工具方法Util也遇到过（关键有的我直接就当作代码切分，没有用static），贫血模型也同样遇到过，写一些简单的脚本也是面向过程。","like_count":0},{"had_liked":false,"id":153950,"user_name":"来碗绿豆汤","can_delete":false,"product_type":"c1","uid":1070051,"ip_address":"","ucode":"B0AB63B8D9729F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","comment_is_top":false,"comment_ctime":1574335625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574335625","product_id":100039001,"comment_content":"关于贫血模型会常被使用的原因：我的想法时，我们有时候可能需要对一组数据进行多种操作；而基于一个类只做一件事的原则，我们可能会把多种操作分散在多个类中；而这些类又都需要操作相同的对象；这时我们就可能想到把对象单独定义成一个类，然后操作定义成独立的类。","like_count":0},{"had_liked":false,"id":153913,"user_name":"K.Zhou","can_delete":false,"product_type":"c1","uid":1019861,"ip_address":"","ucode":"2D817253F9FDAD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/d5/bab4332a.jpg","comment_is_top":false,"comment_ctime":1574329613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574329613","product_id":100039001,"comment_content":"GetItems()更好的做法其实ImmutableList里应该用复制的items而不是原有的items","like_count":0},{"had_liked":false,"id":153648,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1274787,"ip_address":"","ucode":"C233DF1D224EC1","user_header":"https://static001.geekbang.org/account/avatar/00/13/73/a3/2b077607.jpg","comment_is_top":false,"comment_ctime":1574293624,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574293624","product_id":100039001,"comment_content":"昨天就在干这样的事 写着写着发现就成了面向过程了","like_count":0},{"had_liked":false,"id":153594,"user_name":"Fun","can_delete":false,"product_type":"c1","uid":1145502,"ip_address":"","ucode":"5D89BA4C678785","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJdUGdEj3R25CrYqibPibYibibRicqUfyL4aTTPbMagyywjKMhXGZE37RTe7lEdvC4DibvtYpzg8zXvt9HQ/132","comment_is_top":false,"comment_ctime":1574264240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574264240","product_id":100039001,"comment_content":"# day 9<br>今晚主要学了表面上面相对象的代码设计实际是面向过程风格。这篇文章算是给我长了些见识吧，毕竟从没有用OOPL从设计到开发完整地实现过一个需求。比如贫血模式，充血模式也都需要实时的百度…只能说，抱着小白的心态学习。另外，看完评论，搞嵌入式C的显得有点另类了，囧。","like_count":0},{"had_liked":false,"id":153534,"user_name":"付昱霖","can_delete":false,"product_type":"c1","uid":1488464,"ip_address":"","ucode":"9CB3A8A8504885","user_header":"https://static001.geekbang.org/account/avatar/00/16/b6/50/5d9ef58d.jpg","comment_is_top":false,"comment_ctime":1574254436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574254436","product_id":100039001,"comment_content":"Lua 的 Table就是模拟面向对象 ，lua本身是没有类这个概念的","like_count":0},{"had_liked":false,"id":153528,"user_name":"夏目","can_delete":false,"product_type":"c1","uid":1212750,"ip_address":"","ucode":"67C075A01CF4D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/4e/d71092f4.jpg","comment_is_top":false,"comment_ctime":1574253603,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574253603","product_id":100039001,"comment_content":"这三条毫无意外的全中……在各种VO BO entity的转换和构造我也喜欢写在service中🐶大量if else和switch  case算不算面向过程","like_count":0},{"had_liked":false,"id":153475,"user_name":"秃头才能变强","can_delete":false,"product_type":"c1","uid":1704235,"ip_address":"","ucode":"5D796EFE12E66E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/01/2b/234f6fc4.jpg","comment_is_top":false,"comment_ctime":1574241476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574241476","product_id":100039001,"comment_content":"c语言，可以用static来实现类似封装的效果。static定义的全局变量和全局函数可以限制变量和函数访问范围在这个.c的文件范围内。这算是控制了变量和方法的访问权限了吧。","like_count":0},{"had_liked":false,"id":153431,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1574234924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574234924","product_id":100039001,"comment_content":"1.一个类不要无脑用getter、setter 方法<br>面向对象封装的定义是：通过访问权限控制，隐藏内部数据，外部仅能通过类提供的有限的接口访问、修改内部数据。<br>滥用set 导致什么东西都能去调用修改，这样搞的都不符合封装的特性了<br>在设计实现类的时候，除非真的需要，否则，尽量不要给属性定义 setter 方法。除此之外，尽管 getter 方法相对 setter 方法要安全些，但是如果返回的是集合容器（比如例子中的 List 容器），也要防范集合内部数据被修改的危险。<br>但是我不会用你说的那个Collections.unmodifiableList() 方法，我会直接用final或者immutable根据是否报错来修饰。<br><br>关于这一点，我正在看lombook如何设置构造生成指定的<br>2.分类设计.<br>不同的东西不要放在一个class里面<br>3.强壮一点<br>做个service直接套，这样是不好的<br><br><br>贫血模型:只有get&#47;set和属性 只是作为保存状态或者传递状态使用 只有数据没有行为的对象不是真正的对象，实体类简单，业务层麻烦<br>充血：除了这些还有业务逻辑和持久化   。划分什么在实体类里面，什么在业务层这个任务比较困难<br><br><br>1.说说自己知道其他面向过程语言<br>pb开发工具是面向对象，语言是面向过程，先说说继承，允许一个窗口继承另一个窗口。<br>封装：窗口与窗口直接是间接隔离的，一般开发的时候都是尽量少用全局变量，但并不是不用。<br>2.个人认为其他的关于过程的<br>调用存储过程套入参。","like_count":0},{"had_liked":false,"id":153411,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1574232193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574232193","product_id":100039001,"comment_content":"占全了，而且自己写的时候 也有一种面向过程的感觉","like_count":0},{"had_liked":false,"id":153347,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1574220688,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574220688","product_id":100039001,"comment_content":"不管使用面向过程还是面向对象哪种风格来写代码，我们最终的目的还是写出易维护、易读、易复用、易扩展的高质量代码。只要我们能避免面向过程编程风格的一些弊端，控制好它的副作用，在掌控范围内为我们所用，我们就大可不用避讳在面向对象编程中写面向过程风格的代码。","like_count":0},{"had_liked":false,"id":153209,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1574181881,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574181881","product_id":100039001,"comment_content":"讲的三点也是占全了。前两点虽知道不好，但有时为了方便和进度直接就定义大而全了事了。mvc 模式是面向过程的惊到了。期待后续~","like_count":0},{"had_liked":false,"id":153206,"user_name":"CycleGAN","can_delete":false,"product_type":"c1","uid":1679661,"ip_address":"","ucode":"9FD04813911A02","user_header":"https://static001.geekbang.org/account/avatar/00/19/a1/2d/599e9051.jpg","comment_is_top":false,"comment_ctime":1574180999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574180999","product_id":100039001,"comment_content":"很多时候对于一些流水线的操作，会写类似于shell脚本的方法集合，其实就是面向过程了，完了包在一个类里.run一下，骗自己是面向对象了。。有谁知道这些有依赖的流程该怎么用面向对象设计，谢谢～","like_count":0},{"had_liked":false,"id":153158,"user_name":"废材姑娘","can_delete":false,"product_type":"c1","uid":1047537,"ip_address":"","ucode":"6AFB48B2A4939A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/f1/a2cde35e.jpg","comment_is_top":false,"comment_ctime":1574171002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574171002","product_id":100039001,"comment_content":"刚刚换公司，转到Java技术站，发现项目代码三个全占，今天写代码时有一顿常量定义，还犹豫要不要抽常量类，看完我停住了","like_count":0},{"had_liked":false,"id":153119,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1574162457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574162457","product_id":100039001,"comment_content":"C语言，在A结构体和B结构体里面加一个指针指向结构体C，就可以说A和B继承于C了。","like_count":0},{"had_liked":false,"id":153118,"user_name":"uranusleon","can_delete":false,"product_type":"c1","uid":1186044,"ip_address":"","ucode":"3CD5222E590A92","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/fc/a0f8a88d.jpg","comment_is_top":false,"comment_ctime":1574162363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574162363","product_id":100039001,"comment_content":"Constants 类、Utils 类的设计问题 -- 在实际开发中，有的同事在写一些可以通用的逻辑时，根本不会考虑到放到工具类，提高可复用性，或者用一个非常大的工具类，什么方法都往里面放，用的时候都很难找到需要的方法；并且有的人写工具类，喜欢将和业务强相关的方法放到工具类，这样就丧失了工具类的意义了。而Constants类也会有同样的问题。","like_count":0},{"had_liked":false,"id":153109,"user_name":"卫江","can_delete":false,"product_type":"c1","uid":1101226,"ip_address":"","ucode":"DE2F7A6916F1A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","comment_is_top":false,"comment_ctime":1574159292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574159292","product_id":100039001,"comment_content":"个人认为，MVC模型是典型的分层模型，通过面向过程思想把一个复杂的问题流程化从而使得我们的每个模块复杂度降低，是一种从上到下分治思想。然后在单独的Model,View,Control中，根据需求建立模型，创建对象，描述对象之间的相互关系从而解决问题，是一种从下到上的思想。两者结合起来，通过分层解决整体复杂度的问题减少模块之间的耦合度，在每一个模块中使用面向对象提高模块的扩展性，维护性。","like_count":0},{"had_liked":false,"id":153041,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1574145368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574145368","product_id":100039001,"comment_content":"的确是对于日常开发习惯的一种重新审视，去思考文中三种开发习惯的实际优劣性，是否依然符合我们对于java，对于面向对象性质的维护和推崇。也明白作者所说的，我们不是要对面向对象或者面向过程一刀切，而且清楚的明白两者的优势，可以分别使用在什么地方，这样才能更好的取长补短。","like_count":0},{"had_liked":false,"id":153035,"user_name":"asdf100","can_delete":false,"product_type":"c1","uid":1043738,"ip_address":"","ucode":"39D8D71453E575","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","comment_is_top":false,"comment_ctime":1574144089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574144089","product_id":100039001,"comment_content":"前天第一次用 Lombok 插件，确实也发现这个问题了，什么都生成setter getter, 严重破坏了面向对象的一些基本准则，要是有办法可以限制部分属性不生成seter geter就好了","like_count":0},{"had_liked":false,"id":153030,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1574143259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574143259","product_id":100039001,"comment_content":"本文感想：Java好牛逼，大项目还得靠Java。","like_count":0},{"had_liked":false,"id":153024,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1574142512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574142512","product_id":100039001,"comment_content":"就在用Python写各种数据处理的脚本，一般代码量都不超过250行（包含注释和换行🤣），原来我一直是面向过程，学到了。<br>Python能让我用很少的代码搞定一个数据处理，它的数据处理包应该是面向对象的，感谢Python内核开发团队。","like_count":0},{"had_liked":false,"id":152977,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1574132794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574132794","product_id":100039001,"comment_content":"恍然大悟、豁然开朗，感觉好多成语可以形容看完这篇专栏的自己。<br><br>多少开发人员其实就是用着面向对象的语言从事面向过程的开发，更通俗一点的说法叫做CRUD工程师。<br><br>因为使用MVC框架（spring、mybatis等）开发，大部分时间其实就是在自动生成model，然后编写service、controller层的工作。<br><br>我觉得这也是导致自己项目越来越臃肿的主要原因，根本没有好好利用面向对象的编程思想来设计。","like_count":0},{"had_liked":false,"id":152974,"user_name":"沐夜星光","can_delete":false,"product_type":"c1","uid":1447220,"ip_address":"","ucode":"22F699E237B179","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia2EwyyEVs3tWRnMlqaAG7R7HvlW4vGvxthKsicgsCEeXO1qL7mMy6GAzgdkSKcH3c70Qa2hY3JLw/132","comment_is_top":false,"comment_ctime":1574132391,"is_pvip":false,"replies":[{"id":"60036","content":"并不是深度拷贝数据，你可以搜下深拷贝和浅拷贝","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574855387,"ip_address":"","comment_id":152974,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1574132391","product_id":100039001,"comment_content":"我平时主要用c++开发，不太理解 购物车例子中“items 属性的 getter 方法，返回的是一个 List集合容器。外部调用者在拿到这个容器之后，是可以操作容器内部数据的，也就是说，外部代码还是能修改 items 中的数据。”返回list对象不是ShoppingCart.items的一份拷贝吗，修改拷贝数据，又不会影响到ShoppingCart.items。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475007,"discussion_content":"并不是深度拷贝数据，你可以搜下深拷贝和浅拷贝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574855387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438470,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f3/06/8da1bf0c.jpg","nickname":"Fredo","note":"","ucode":"681D6692617DAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157290,"discussion_content":"JAVA中List是浅拷贝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580464998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152970,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1574131334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574131334","product_id":100039001,"comment_content":"很多时候之所以在项目中出现大量的getter&#47;setter方法，甚至是lombok的盛行，有时候是因为框架的原因，框架上的简单导致了封装上的懒惰。","like_count":0},{"had_liked":false,"id":152960,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1574130014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574130014","product_id":100039001,"comment_content":"视乎有点明白了面向对象编程与面向过程编程的区别了，继续努力","like_count":0},{"had_liked":false,"id":152958,"user_name":"ldd","can_delete":false,"product_type":"c1","uid":1208157,"ip_address":"","ucode":"E8344FAFFE5CF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/6f/5d/f0a19f09.jpg","comment_is_top":false,"comment_ctime":1574129949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574129949","product_id":100039001,"comment_content":"作为前端开发人员，天天在写MVC🤣","like_count":0},{"had_liked":false,"id":152956,"user_name":"Paper","can_delete":false,"product_type":"c1","uid":1305388,"ip_address":"","ucode":"7EE26C2E892899","user_header":"https://static001.geekbang.org/account/avatar/00/13/eb/2c/ab72fda4.jpg","comment_is_top":false,"comment_ctime":1574129705,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574129705","product_id":100039001,"comment_content":"哈哈 原来mvc这种原来叫做贫血模式","like_count":0},{"had_liked":false,"id":152953,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1574129093,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574129093","product_id":100039001,"comment_content":"原来这些年一直用Java写面向过程代码，偶尔写面向对象代码，无知啊，真可怕","like_count":0},{"had_liked":false,"id":152952,"user_name":"不似旧日","can_delete":false,"product_type":"c1","uid":1161271,"ip_address":"","ucode":"DF4C5E3AB9570C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","comment_is_top":false,"comment_ctime":1574129009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574129009","product_id":100039001,"comment_content":"POJO每个属性都有get,set 方法是没毛病的","like_count":0},{"had_liked":false,"id":152928,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1574125084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574125084","product_id":100039001,"comment_content":"按照老师的说法，Java 中的 Utils类和PHP中的 trait 相似","like_count":0},{"had_liked":false,"id":152890,"user_name":"筱乐乐哦","can_delete":false,"product_type":"c1","uid":1307611,"ip_address":"","ucode":"AE92539F0419C3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/db/5b7a8fd8.jpg","comment_is_top":false,"comment_ctime":1574098039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574098039","product_id":100039001,"comment_content":"争哥说的对，我很早就发现自己拿着面向对象的语言写着面向过程的代码了，springboot，就是这种数据和操作分开处理的，mvc，天天写这个，还有那个utils，constants常亮，等等，如何写面向对象的语言真就成了难点，天天这么写，感觉都有点无聊了，希望自己能写出牛逼哄哄的代码就好了","like_count":0},{"had_liked":false,"id":152874,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1574092853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574092853","product_id":100039001,"comment_content":"对于问题2 以前见过一个方法里出现十几个参数 感觉也是面向过程编程","like_count":0},{"had_liked":false,"id":152864,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1574091300,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574091300","product_id":100039001,"comment_content":"BO VO PO各种转换，用BeanCopy，所以就都定义了Setter方法👻","like_count":0},{"had_liked":false,"id":152836,"user_name":"搞怪者😘 😒 😏 👿","can_delete":false,"product_type":"c1","uid":1300678,"ip_address":"","ucode":"40DFF5D3E3B24C","user_header":"https://static001.geekbang.org/account/avatar/00/13/d8/c6/2b2a58cf.jpg","comment_is_top":false,"comment_ctime":1574085942,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1574085942","product_id":100039001,"comment_content":"我不是很明白Controller，Service和Repository区别？","like_count":0,"discussions":[{"author":{"id":1238051,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/23/ac13d916.jpg","nickname":"圆哥哥呐丶","note":"","ucode":"8E56E3E68A3836","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53230,"discussion_content":"Controller  是接收前台请求的，\nService  是拿到前台传递的数据，进行业务处理的\nRepository 是当service需要数据的时候，repository负责把数据从数据库拿出来交给service进行数据处理，","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574147640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1300678,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d8/c6/2b2a58cf.jpg","nickname":"搞怪者😘 😒 😏 👿","note":"","ucode":"40DFF5D3E3B24C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1238051,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/23/ac13d916.jpg","nickname":"圆哥哥呐丶","note":"","ucode":"8E56E3E68A3836","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":54126,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574261050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":53230,"ip_address":""},"score":54126,"extra":""}]}]},{"had_liked":false,"id":152829,"user_name":"摸爬滚打三十年","can_delete":false,"product_type":"c1","uid":1240241,"ip_address":"","ucode":"764A7F920EC304","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/b1/d790b927.jpg","comment_is_top":false,"comment_ctime":1574084950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574084950","product_id":100039001,"comment_content":"学习老师的课程收益匪浅","like_count":0},{"had_liked":false,"id":152812,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1574082958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574082958","product_id":100039001,"comment_content":"基于mvc开发模式的代码竟是面向过程的","like_count":0},{"had_liked":false,"id":152810,"user_name":"Warn","can_delete":false,"product_type":"c1","uid":1465310,"ip_address":"","ucode":"F2F7FCDB0940D0","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/de/152f1c2c.jpg","comment_is_top":false,"comment_ctime":1574082939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574082939","product_id":100039001,"comment_content":"业务代码，一般是面向过程实现，然后有时间了才进行优化😂","like_count":0},{"had_liked":false,"id":152808,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1574082863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574082863","product_id":100039001,"comment_content":"看了今天的课, 我我发现三个都占了, 团队甚至不是前后端分离的.","like_count":0},{"had_liked":false,"id":152796,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1574081389,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1574081389","product_id":100039001,"comment_content":"面向过程编程是面向对象编程的基础，面向对象编程离不开基础的面向过程编程<br><br>感觉面向对象只是一个思想设计方式，实际在写业务逻辑的时候写的还是面向过程的代码","like_count":0},{"had_liked":false,"id":152786,"user_name":"宝宝太喜欢极客时间了","can_delete":false,"product_type":"c1","uid":1215152,"ip_address":"","ucode":"9CDB679C257612","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoOGZ6lbHiboIZMN9USbeutnmCWBahVLtSlKlIENKvrZQCUQzpzeZQOxTntIkBUeDk6qZUPdqmfKrQ/132","comment_is_top":false,"comment_ctime":1574080206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574080206","product_id":100039001,"comment_content":"面向对象很多年，最后发现确实面向过程，这让人情何以堪，哈哈，哈哈，哈哈","like_count":0},{"had_liked":false,"id":152770,"user_name":"柳志焕","can_delete":false,"product_type":"c1","uid":1235940,"ip_address":"","ucode":"42375930DC2AA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/e4/a1b45d79.jpg","comment_is_top":false,"comment_ctime":1574077609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574077609","product_id":100039001,"comment_content":"今天学习了 Collections.unmodifiableList() 这个 method，不了解的同学可以看下这篇文章。<br>https:&#47;&#47;www.geeksforgeeks.org&#47;collections-unmodifiablecollection-method-in-java-with-examples&#47;","like_count":0},{"had_liked":false,"id":152752,"user_name":"Rain","can_delete":false,"product_type":"c1","uid":1238221,"ip_address":"","ucode":"6A270D922A3B9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/cd/5363c8fa.jpg","comment_is_top":false,"comment_ctime":1574075469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574075469","product_id":100039001,"comment_content":"我个人觉得面向对象和面向过程有时候并不是区分的那么明确，当然也就无法明确地说，在面向对象的开发语言环境中写出了面向过程的代码就不好。我举两个例子，一个是老师说的web开发的模式属于典型的面向过程的方式，这个我有不同看法，控制器的职业明确，仓库类的职责明确，bean类的职责明确，基于此，如果程序写得对修改关闭对扩展开放，那我认为是非常好的面向对象的设计模式。另一个是，我认为面向对象编程必定要和面向过程的编程结合使用，大家都知道程序就是数据结构加算法，而这两个因素必定会导致面向过程编码的存在。规则引擎的实现过程我虽然没读过源码，但我直观理解他就特别符合我说的第二点。","like_count":0},{"had_liked":false,"id":152733,"user_name":"学好习，做好人","can_delete":false,"product_type":"c1","uid":1205294,"ip_address":"","ucode":"C991643DB458E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/2e/e70a317a.jpg","comment_is_top":false,"comment_ctime":1574071293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574071293","product_id":100039001,"comment_content":"现在Java的项目都有很成熟的框架，有些代码也是无奈之举，没有不行，老师讲的特别好，受教了，现在在写代码的时候也是很多写的是面向过程编程 ，但是   在目前比较常用的三层模型中，是不是我们就没有改进的地方了，感觉不是，重点是service层，service层是主要业务逻辑的实现层，在这一层我们应该注意什么？在最复杂的业务逻辑层，我们应该注意这个service是干什么的，不是干什么的，就是单一职责的设计原则，在明确这个的基础上面，按照业务涉及模型，哪些代码需要抽象，哪些接口需要复用，单一职责的接口一般都是可以正确的复用的，还有就是何时使用抽象类，何时使用接口，很多人不是特别的清楚甚至一点不清楚，所以最后写的代码基本就是个半成品吧，逻辑比较乱的","like_count":0},{"had_liked":false,"id":152720,"user_name":"許敲敲","can_delete":false,"product_type":"c1","uid":1046681,"ip_address":"","ucode":"6486466820E7BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/99/8e760987.jpg","comment_is_top":false,"comment_ctime":1574069404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574069404","product_id":100039001,"comment_content":"matlab，Fortran 那些做工程计算，模拟各种物理，化学过程的好像都是面向过程的。","like_count":0},{"had_liked":false,"id":152703,"user_name":"学好习，做好人","can_delete":false,"product_type":"c1","uid":1205294,"ip_address":"","ucode":"C991643DB458E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/2e/e70a317a.jpg","comment_is_top":false,"comment_ctime":1574066513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574066513","product_id":100039001,"comment_content":"在现在项目的代码中，三层模型的service层问题是最大的，面向对象编程提供面向接口，所以在项目中，但凡是service的基本都是定义成了接口，而且接口之间的调用很混乱，有的功能就是比较单一的调用，没必要定义成接口，有的功能可以抽离出来抽象类的，用的还是接口，仿佛不定义接口，就不是面向对象编程了，定义接口的目的有两个：第一：解耦，将调用与具体的实现解耦，也就是面向抽象而不是面向具体，这个目的在项目的所有service层基本都用到了，第二：便于代码复用。关键是如此多的service，定义好的时候确实可以复用，但是在不该定义该方法的service中定义，我感觉其实没多大的意义","like_count":0},{"had_liked":false,"id":152686,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1574063154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574063154","product_id":100039001,"comment_content":"三点全占。<br>开发的时候已经形成了一个固定思维模式了。上来就一套Mvc。get  set 也是lombok注解搞定。根本就没有思考过是不是面向对象还是面向过程。惭愧。","like_count":0},{"had_liked":false,"id":152685,"user_name":"Lugyedo","can_delete":false,"product_type":"c1","uid":1011793,"ip_address":"","ucode":"EB5E456B638E70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/70/51/f1825adb.jpg","comment_is_top":false,"comment_ctime":1574062900,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574062900","product_id":100039001,"comment_content":"一直觉得MVC结构的Web开发方式中VO&#47;BO&#47;Entity这些类只定义数据很奇怪，现在才知道这种方式叫基于贫血模型的开发模式，期待争哥实战篇里的解决方案。","like_count":0},{"had_liked":false,"id":152683,"user_name":"sulatwx","can_delete":false,"product_type":"c1","uid":1348141,"ip_address":"","ucode":"366237F13DE8A7","user_header":"","comment_is_top":false,"comment_ctime":1574062440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574062440","product_id":100039001,"comment_content":"我们平常非常熟悉的controller、service、dao的模式其实就是面向过程的。","like_count":0},{"had_liked":false,"id":152665,"user_name":"qqq","can_delete":false,"product_type":"c1","uid":1006786,"ip_address":"","ucode":"91B0ACF8CBE7BD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/c2/8ffd2ad0.jpg","comment_is_top":false,"comment_ctime":1574059107,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574059107","product_id":100039001,"comment_content":"JS 构造函数，添加原型方法","like_count":0},{"had_liked":false,"id":152652,"user_name":"努力努力再努力m","can_delete":false,"product_type":"c1","uid":1644369,"ip_address":"","ucode":"9DD9E9C2988FFC","user_header":"https://static001.geekbang.org/account/avatar/00/19/17/51/3e13dc0c.jpg","comment_is_top":false,"comment_ctime":1574056965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574056965","product_id":100039001,"comment_content":"每个类中的业务逻辑代码，就是面向过程风格的代码，再加上文章中的三点，感觉自己就像是在做面向过程编程啊。","like_count":0},{"had_liked":false,"id":152645,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1574055876,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574055876","product_id":100039001,"comment_content":"上一章说：面向对象是一种人类的思维方式，这一章说：面向过程编程风格恰恰符合人的这种流程化思维方式。而面向对象编程风格正好相反。","like_count":0,"discussions":[{"author":{"id":1206787,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6a/03/cb597311.jpg","nickname":"远心","note":"","ucode":"1157202C315655","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52964,"discussion_content":"哈哈哈，这个我也注意到了，后面我想了下，应该是：人类认知世界的方法是 OO 的，但执行行动的方式却是 PO 的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574114713,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152643,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1574055429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574055429","product_id":100039001,"comment_content":"没想到getter 和 setter还有这么多讲究，学习了","like_count":0},{"had_liked":false,"id":152623,"user_name":"唐龙","can_delete":false,"product_type":"c1","uid":1471657,"ip_address":"","ucode":"87A10AE04F2037","user_header":"https://static001.geekbang.org/account/avatar/00/16/74/a9/5eb3ebc6.jpg","comment_is_top":false,"comment_ctime":1574052124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574052124","product_id":100039001,"comment_content":"三个月前用C++写的一个练手项目(我还是个学生)中有一个类就是滥用setter和getter的，没办法，老师也是这么讲的，说是可以在setter里限定范围，除此之外没感觉到什么好处。<br><br>我当时是感觉这么写有点别扭，主要的想法是为什么不直接把这个变量定义成public。<br><br>现在想了想有些内容确实没必要暴露出来，我也尝试了一下重构那个类，把那些值的修改和判断全部放到了其他方法中，通过返回值来表示越界。<br><br>估计我的烂代码还有不少，其他的自己也注意不到，这门课我跟定了。","like_count":0},{"had_liked":false,"id":152620,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1574051693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574051693","product_id":100039001,"comment_content":"看完感觉在审视自己，回头看。问题1感觉比较严重。确实都直接lombok @Data。然后基于MVC的贫血模型是现阶段最迷惑的，不知道如何做是正确的。<br>其他行为想到一个是: <br>1. if ...else和switch case的滥用，明显可以通过继承或抽象能解决的，习惯按照业务按部就搬。应该和第四点有点重合。","like_count":0},{"had_liked":false,"id":152619,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1574051481,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1574051481","product_id":100039001,"comment_content":"见过使用Lombok做链式编程的。<br>一切都是trade off，没有绝对的好与坏，只有适合与不适合，目的是一致的，扬长避短","like_count":0,"discussions":[{"author":{"id":1435246,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e6/6e/062da5e4.jpg","nickname":"肥而不腻","note":"","ucode":"3E6786A82A6DD6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52647,"discussion_content":"trade off就很洋气了，😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574076106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152608,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1574048966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574048966","product_id":100039001,"comment_content":"遇到的看似是面向对象实际上是面向过程编程风格的情况：单例模式的乱用<br>其具体表现如下：<br>1. 项目存在的Controller的单例，万能类单例，其中糅杂了各种对象和类的逻辑，有数据处理有视图控制，有工具方法，有全局变量，包含各种五花八门功能和实现。<br><br>2. 开发人员根本不需要思考万能类的初始化时机和调用时机，万能类的功能，都可以通过getInstance来操作。<br><br>3.搜索万能类的getInstance，项目中随处可见，这些各种嵌入在其他类中的间接演变成了面向过程编程。<br><br>思考导致单例乱用而间接演变成面向过程编程的原因：<br>1.  首先是开发人员无法正确建立类模型，无法分析类与类之间的关系。<br>2.  缺乏类单一职责的意识<br>3.  想要获得一个对象实例，但是不知道怎么获取","like_count":0},{"had_liked":false,"id":152591,"user_name":"Lifelong Learning","can_delete":false,"product_type":"c1","uid":1173517,"ip_address":"","ucode":"3E39BED3E13FB4","user_header":"https://static001.geekbang.org/account/avatar/00/11/e8/0d/fcd95db8.jpg","comment_is_top":false,"comment_ctime":1574046616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574046616","product_id":100039001,"comment_content":"1.使用了类,但是没有将封装做好<br>2.感觉把一些常量和共用的方法集合在一个类中就省事了,殊不知降低了维护性和可扩展性<br>3.将业务逻辑和领域对象做分离,违背了oop的编程模式,将领域对象沦为简单的存储对象了,每次子类使用父类对象时涉及到相关业务逻辑还要重新在子类中实现一遍<br>我们很多人之所以被认为是码农,本人也是一名码农,很大的原因在于不愿意去审视自己做的东西,看上去天天写程序,修bug其实进步甚微,只是看起来想个程序员罢了,其实是代码的搬运工而已!","like_count":0},{"had_liked":false,"id":152590,"user_name":"董泽","can_delete":false,"product_type":"c1","uid":1640304,"ip_address":"","ucode":"3A9C52A40C05E7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epqhr6k2GrXDicNBGeYjzwrDfuwMaa21HRSdcKBvib1cK4E6CibvrdO1iawdzh330nRMoyobhfe3PxqVQ/132","comment_is_top":false,"comment_ctime":1574046314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574046314","product_id":100039001,"comment_content":"很多时候，定时任务的实现应该就是面向过程的编程风格吧。<br>毕竟实现的时候也就是在想分步骤如何实现这个功能","like_count":0},{"had_liked":false,"id":152578,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1574045386,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574045386","product_id":100039001,"comment_content":"看到老师举的例子，尴尬，我一直根深蒂固以为自己写的是面向对象的编程，其实很多时候都是有意无意地在用面向过程编程，而且还影响了程序的性能。","like_count":0},{"had_liked":false,"id":152575,"user_name":"Joanfen","can_delete":false,"product_type":"c1","uid":1004260,"ip_address":"","ucode":"4CF1B92337B625","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/e4/50600574.jpg","comment_is_top":false,"comment_ctime":1574044950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574044950","product_id":100039001,"comment_content":"以前学java的时候老师上来就是要求把所有对象的 getter 和 setter 方法全部写出来，objective-c 中的是通过 属性关键词 readonly  等这种方式来限制成员变量的读写，oc 里的方法是必须要自己在 .h 中去暴露，IDE 强大了就容易偷懒唉","like_count":0},{"had_liked":false,"id":152573,"user_name":"塔兹米","can_delete":false,"product_type":"c1","uid":1425252,"ip_address":"","ucode":"1A58C81EF9B0A4","user_header":"https://static001.geekbang.org/account/avatar/00/15/bf/64/c9a0e913.jpg","comment_is_top":false,"comment_ctime":1574044321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574044321","product_id":100039001,"comment_content":"打卡，我用的也是MVC，三点全占了，真实！。跟着老师学，慢慢改变。","like_count":0},{"had_liked":false,"id":152562,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1574042854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574042854","product_id":100039001,"comment_content":"1.我理解的文中说的尽量不要给类统一定义getter\\setter方法，这个类应该指的是暴露给外部访问的类，要谨慎设计，但是entity里面的类没有getter\\setter所使用的底层持久化就没用了，无法把数据库的值绑定到实体上了。<br>2.第二点，确实按照文章中所有都是贫血开发，期待老师给出最佳实战方案以供参考","like_count":0},{"had_liked":false,"id":152546,"user_name":"向前走","can_delete":false,"product_type":"c1","uid":1112651,"ip_address":"","ucode":"8956E92DCEFB60","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/4b/c385f755.jpg","comment_is_top":false,"comment_ctime":1574041804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574041804","product_id":100039001,"comment_content":"打卡:<br>违反面向对象的集中编程风格<br>1.滥用getter、setter方法<br>    1.1尽量避免settter方法的暴露,<br>    1.2如果返回集合的话,应该返回<br>Collections.unmodifiableList(this.items);<br>2.Constants类、Utils类的设计问题<br>   2.1constants类应该尽量分的细致一点<br>3.基于贫血模式的开发模式<br>  面向过程的编程方式,数据和操作是分开定义在VO,BO,Entity和Controller,Service,Repository中的 <br>","like_count":0},{"had_liked":false,"id":152536,"user_name":"晨间新闻","can_delete":false,"product_type":"c1","uid":1161406,"ip_address":"","ucode":"6F7A55AAD52F16","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/be/2d77d643.jpg","comment_is_top":false,"comment_ctime":1574040657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574040657","product_id":100039001,"comment_content":"1、对于Constants类，特别通用的，比如左右括号，逗号，我们通常还是会定义在公共类里的；<br>3、我们项目VO&#47;BO&#47;ENTITY都没分，全都用的一个类，属性特别冗余<br>","like_count":0},{"had_liked":false,"id":152494,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1574036412,"is_pvip":true,"discussion_count":23,"race_medal":0,"score":"1603596837820","product_id":100039001,"comment_content":"不想往下看的请看第一句就好：贫血模型流行的原因：实现简单和上手快。<br><br>具体解释慢慢看：<br><br>”贫血模型“的开发模式为什么会流行？<br><br>1、实现简单。Object仅仅作为传递数据的媒介，不用考虑过多的设计方面，将核心业务逻辑放到service层，用Hibernate之类的框架一套，完美解决任务。<br>2、上手快。使用贫血模式开发的web项目，新来的程序员看看代码就能“照猫画虎”干活了，不需要多高的技术水平。所以很多程序员干了几年，仅仅就会写CURD。<br>3、一些技术鼓励使用贫血模型。例如J2EE Entity Beans，Hibernate等。<br><br>总结：各种模型的好坏讨论一直不断，企业需要的是使用合适的技术把任务完成，从这个角度来说当下管用模型就是好模型。当然我们也要持开放的心态接受新的技术和思想，并结合业务的实际需要选择合适的技术。<br><br>概念解释：<br><br>贫血模型（Anemic Domain Model由<br>MatinFowler提出）又称为失血模型，是指domain object仅有属性的getter&#47;setter方法的纯数据类，将所有类的行为放到service层。原文他是这么说的“By pulling all the behavior out into services, however, you essentially end up with Transaction Scripts, and thus lose the advantages that the domain model can bring. ”他的原文我放上来了，英文好的同学可以看看：https:&#47;&#47;martinfowler.com&#47;bliki&#47;AnemicDomainModel.html 。 我觉得他有点学者气太重，这篇博客他都不知道为啥贫血模型会流行（I don&#39;t know why this anti-pattern is so common）。","like_count":374,"discussions":[{"author":{"id":1149022,"avatar":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","nickname":"scmath","note":"","ucode":"641023BB246C29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283719,"discussion_content":"用map的k，v来解决","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592353230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152634,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1574054190,"is_pvip":false,"replies":[{"id":"58743","content":"说的非常好👍","user_name":"作者回复","comment_id":152634,"uid":"1190123","ip_address":"","utype":1,"ctime":1574129970,"user_name_real":"王争"}],"discussion_count":21,"race_medal":0,"score":"1509107575086","product_id":100039001,"comment_content":"1.用shell实现自动化脚本做的服务编排，一般都是面向过程，一步一步的。而k8s的编排却是面向对象的，因为它为这个顺序流抽象出了很多角色，将原本一步一步的顺序操作转变成了多个角色间的轮转和交互。<br><br>2.从接触ddd才走出javaer举面向对象旗，干面向过程勾当的局面。所谓为什么“充血模型”不流行，我认为不外呼两个。一，规范的领域模型对于底层基础架构来说并不友好（缺少setget），所以会导致规范的领域模型与现有基础架构不贴合，切很难开发出完全贴合的基础架构，进而引深出，合理的业务封装却阻碍关于复用通用抽象的矛盾。二，合理的业务封装，需要在战略上对业务先做合理的归类分割和抽象。而这个前置条件很少也不好达成。进而缺少前置设计封装出来的“充血模型”会有种四不像的味道，反而加剧了业务的复杂性，还不如“贫血模型”来得实用。事实上快节奏下，前置战略设计往往都是不足的，所以想构建优秀的“充血模型”架构，除了要对业务领域和领域设计有足够的认知，在重构手法和重构意愿上还要有一定讲究和追求，这样才能让项目以“充血模型”持续且良性的迭代。<br><br>3.“充血模型”相对于“贫血模型”有什么好处？从我的经验来看，可读性其实可能“贫血模型”还好一点，这也可能有思维惯性的原因在里面。但从灵活和扩展性来说“充血模型”会优秀很多，因为好的“充血模型”往往意味着边界清晰（耦合低），功能内敛（高内聚）。这一块老师怎么看？","like_count":352},{"had_liked":false,"id":152784,"user_name":"嘉一","can_delete":false,"product_type":"c1","uid":1196864,"ip_address":"","ucode":"8D16BD0B75B019","user_header":"https://static001.geekbang.org/account/avatar/00/12/43/40/e7ef18de.jpg","comment_is_top":false,"comment_ctime":1574080110,"is_pvip":false,"replies":[{"id":"58734","content":"说的没错，MVC跟贫血模型没直接关系。我后面在实战篇会讲到的。你的观点我基本都赞同。","user_name":"作者回复","comment_id":152784,"uid":"1190123","ip_address":"","utype":1,"ctime":1574128937,"user_name_real":"王争"}],"discussion_count":6,"race_medal":0,"score":"396711071342","product_id":100039001,"comment_content":"个人觉得，MVC这种框架模式本质上与面向对象并不冲突。当我们在讨论面向对象的时候，我们究竟应该怎样去定义一个对象，究竟什么才能被我们看成是对象，是不是只有像某种物体，比如说一只鸟或者一只狗我们才能去把他定义为对象？我认为，MVC里面的三个部分Model 、Controller 、View 我们都能把他们单独的看成一个对象，比如说Model，本来它是数据单元，但是如果我们把他看做一个对象的话，里面存储的数据不就是我们对象里的属性么，而对于数据的二次加工处理等等操作不就是对象里的方法么？同理，对于View而言，里面小的view组件或者是其他的view不就是我们对象里面的属性，而对于不同的view组件或其他view的组合或者其他的处理操作不就是对象里面的方法么？所以说，不必死抠定义，数据就一定要和业务逻辑组成一个类云云。。。我们最后写出来的代码的目的就是，1.要解决问题；2.代码有可扩展性，可读性；3，代码解耦；","like_count":92,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474937,"discussion_content":"说的没错，MVC跟贫血模型没直接关系。我后面在实战篇会讲到的。你的观点我基本都赞同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574128937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53057,"discussion_content":"想到一句话，万物皆对象","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574128268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1737503,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/83/1f/07d5562e.jpg","nickname":"Waiting For 🐣🌱🌱","note":"","ucode":"2E36E27A356F83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265587,"discussion_content":"大佬啊，我一直在写面向过程代码啊😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589419020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":53057,"ip_address":""},"score":265587,"extra":""}]},{"author":{"id":2346360,"avatar":"https://static001.geekbang.org/account/avatar/00/23/cd/78/bc81dd93.jpg","nickname":"神经蛙","note":"","ucode":"D856CF7D1EE064","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331022,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606747800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1691500,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cf/6c/87faa554.jpg","nickname":"MoeRookie","note":"","ucode":"E860D73EE91F00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322283,"discussion_content":"牛逼class ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604718273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1715558,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2d/66/f1cdc658.jpg","nickname":"able","note":"","ucode":"BD1545848DDA99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316775,"discussion_content":"对象就是有边界可交互的可以实现一定功能的实体","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603453869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152474,"user_name":"猫切切切切切","can_delete":false,"product_type":"c1","uid":1075033,"ip_address":"","ucode":"F350BA1B7FFDC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","comment_is_top":false,"comment_ctime":1574028427,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"306516706443","product_id":100039001,"comment_content":"总的来说，使用面向对象风格编写的面向过程代码有如下特点：<br><br>1. 使用了类，但是<br>2. 要么完全没有封装（比如数据和操作分离的贫血模式）<br>3. 要么破坏了封装（比如滥用 getter 或 setter）<br>4. 要么完全没有抽象（大而全的 Constants 或 Utils 类）<br>5. 要么封装或抽象不完全（比如类实例化后，或者子类继承后，需要自己管理其内部某些属性或状态）<br><br>平时应该多留心代码是否存在上述特征。<br><br>文中没有举封装或抽象不完全的例子，这里举一个。<br><br>比如一个实现某种业务需求（如与某种类型设备通讯的应用协议）的 tcp 或 udp 服务器；<br><br>实例化后还需要自己管理其协议相关的就绪状态（ready属性）；使你不得不对其再封装一层，并抽象其连接、断开等方法使其自动进行就绪状态的管理；<br><br>每个继承都这么封装一遍，就会有大量重复的代码，而且其实类的实例化者或继承者并不需要也不应该关心就绪状态的管理，所以没有达到就绪状态管理的封装。<br><br>这就是一种不完全的封装。","like_count":71,"discussions":[{"author":{"id":1392083,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Jp7LdHibIC3IxvQGGTiayoqglCL1z4OiaDrG7MFNvITWcxJkFxC9bEpWS2Cr8icNuze3TBPw2EmDiaedIGNDvzAgoMQ/132","nickname":"area","note":"","ucode":"EE833C52925085","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296915,"discussion_content":"厉害厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596705359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152947,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1574128398,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"263567133454","product_id":100039001,"comment_content":"确实是个问题啊，现在流行的贫血模式每个项目都会用。用了贫血模式就会涉及BO和VO的转换，很多工具都需要全部字段的setter方法…感觉是个连环套啊。<br>ps：用了这么久Java原来一直是面向过程编程，怪不得找不到对象","like_count":61,"discussions":[{"author":{"id":1249305,"avatar":"https://static001.geekbang.org/account/avatar/00/13/10/19/68b65d61.jpg","nickname":"Geek_e120ec","note":"","ucode":"9D0159DE171358","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390899,"discussion_content":"怪不得找不到对象😂😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630130015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194060,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","nickname":"CJJ","note":"","ucode":"7E02A6A8547559","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348594,"discussion_content":"俺也一样😂😂","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612661177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479043,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/83/0fac9e2b.jpg","nickname":"Mateo","note":"","ucode":"9E15121C6521F7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302649,"discussion_content":"哈哈哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598978605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3081038,"avatar":"https://static001.geekbang.org/account/avatar/00/2f/03/4e/ab7b85ba.jpg","nickname":"小小学习家","note":"","ucode":"D6D530C0622DE2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583332,"discussion_content":"对象不是new就有的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660037449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1605058,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7d/c2/e6332a1b.jpg","nickname":"东方拓睿","note":"","ucode":"1FD25D75CAC7C1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575952,"discussion_content":"别把自己找不到对象怪到JAVA上了，是你功力还不够，还要多跟老师学学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655206179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152458,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1574008576,"is_pvip":false,"discussion_count":14,"race_medal":0,"score":"263567013632","product_id":100039001,"comment_content":"打卡<br>看了今天的内容，发现自己三点都占了，😲<br>遇到json数据使用Gsonformat转一下，默认生成所有get set方法，遇到统一使用的就会毫不犹豫定义工具类……，我有点怀疑自己是不是从未写过面相对象风格的代码","like_count":62},{"had_liked":false,"id":152560,"user_name":"青青子衿","can_delete":false,"product_type":"c1","uid":1438102,"ip_address":"","ucode":"4A388A3BA70C29","user_header":"https://static001.geekbang.org/account/avatar/00/15/f1/96/9571fa3d.jpg","comment_is_top":false,"comment_ctime":1574042777,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"143307963545","product_id":100039001,"comment_content":"有时候写get,set也是无奈之举，比如集成spring的时候，框架要求属性提供get,set","like_count":33,"discussions":[{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335334,"discussion_content":"创建数据记录也是, 比如 DO 本身就得提供所有属性的 setter 方法, create 时候, 通过 setter 方法设置属性.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608169898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2122539,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","nickname":"阿骨打","note":"","ucode":"35EADA5550162A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298689,"discussion_content":"我也想说这个，不知道怎么解决","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597378893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152678,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1574061892,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"139013015364","product_id":100039001,"comment_content":"先说问题2：看似面向对象实际面向过程的例子真是数不胜数了， 工作语言C&#47;C++，90%是C++,大体上老师在文中已经提到了，其他的我暂时也没想起来，但是滥用面向对象继承特性的代码我真是看到了太多<br>问题1：C中可以用struct 来实现class，只是访问控制权限都是public。类中的成员函数可以通过指向操作结构体的函数指针来实现，实现封装，需要绑定数据、函数、函数指针。可以创建函数指针表，构造函数设置函数指针指向正确的操作函数，函数指针表作为对象访问函数的接口。操作结构体的这些函数（成员函数）不像C++中能直接访问数据成员，需要显示的传递操作对象给成员函数。<br>继承：在派生类中维护一个基类对象的指针。这样派生类可以访问基类对象的数据。<br>多态：在基类中维护一个派生类对象的指针。这样基类可以访问派生类对象的数据。<br>C++中的多态，有一个对象销毁的问题。基类的析构函数必须是虚函数<br>在C中，这可以通过使基类的删除函数指针指向派生类的删除函数，因为派生类的删除函数清楚派生类的数据和基类的数据","like_count":32,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62336,"discussion_content":"大神啊，学习了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574834611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152466,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1574011440,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"100358259248","product_id":100039001,"comment_content":"啊，写了这么久的MVC，竟然是面向过程编程。","like_count":23,"discussions":[{"author":{"id":1022267,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/3b/791d0f5e.jpg","nickname":"王先森","note":"","ucode":"1AF1A395107479","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":57214,"discussion_content":"不要死扣定义","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574582429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2415448,"avatar":"https://static001.geekbang.org/account/avatar/00/24/db/58/a7a0a85b.jpg","nickname":"二饼","note":"","ucode":"48120565D135F7","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579490,"discussion_content":"注意重点：数据和行为分离","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657498779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1715558,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/2d/66/f1cdc658.jpg","nickname":"able","note":"","ucode":"BD1545848DDA99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316776,"discussion_content":"并不是mvc就是面向过程呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603453907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152480,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1574032250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"96063312762","product_id":100039001,"comment_content":"我们的项目三点都占，造成这个局面的原因我认为有以下几点：<br>1、习惯用IDE的代码生成插件<br>2、团队整体设计水平有限<br>3、基于mvc模式开发的","like_count":22},{"had_liked":false,"id":152531,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1574039855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"74588483887","product_id":100039001,"comment_content":"有种上帝视角看自己的感觉！","like_count":17},{"had_liked":false,"id":152680,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1574061918,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"70293538654","product_id":100039001,"comment_content":"接上条评论，代码实现如下，欢迎讨论<br>typedef struct _Base Base;<br>typedef void (*fptrDisplay)(Base*);<br>typedef void (*fptrDelete)(Base*);<br>void DisplayBase(Base* );<br>void DeleteBase(Base*);<br>typedef struct _Base<br>{<br>\tvoid* pDeriveObj;<br>\tint a;<br>\tint b;<br>\tfptrDisplay Display;<br>\tfptrDelete Delete;<br>}Base;<br>Base* new_base(int a, int b)<br>{<br>\tBase* pObj = NULL;<br>\tpObj = (Base*)malloc(sizeof(Base));<br>\tif (pObj == NULL)<br>\t{<br>\t\treturn NULL;<br>\t}<br>\t&#47;&#47; 当创建基类对象时指向自己<br>\tpObj-&gt;pDeriveObj = pObj;<br>\tpObj-&gt;a = a;<br>\tpObj-&gt;b = b;<br>\tpObj-&gt;Display = DisplayBase;<br>\tpObj-&gt;Delete = DeleteBase;<br>\treturn pObj;<br>}<br>void DisplayBase(Base* base)<br>{<br>\tprintf(&quot;member: a:%d\\t b:%d\\n&quot;, base-&gt;a, base-&gt;b);<br>}<br>void DeleteBase(Base* base)<br>{<br>\tprintf(&quot;base destructor!\\n&quot;);<br>\tfree(base);<br>}<br>typedef struct _Derive<br>{<br>\tBase* pBaseObj;<br>\tint c;<br>\tint d;<br>}Derive;<br>void DeriveDisplay(Base* base);<br>void DeriveDelete(Base* base);<br>Base* new_Derive(int a, int b, int c, int d)<br>{<br>\tDerive* pObj = NULL;<br>\tBase* pBaseObj = new_base(a, b);<br>\tpObj = malloc(sizeof(Derive));<br>\tif (!pObj)<br>\t{<br>\t\tpBaseObj-&gt;Delete(pBaseObj);<br>\t\treturn NULL;<br>\t}<br>\tpBaseObj-&gt;pDeriveObj = pObj;<br>\tpObj-&gt;pBaseObj = pBaseObj;<br>\tpObj-&gt;c = c;<br>\tpObj-&gt;d = d;<br>\tpBaseObj-&gt;Display = DeriveDisplay;<br>\tpBaseObj-&gt;Delete = DeriveDelete;<br>\treturn pBaseObj;<br>}<br>void DeriveDisplay(Base* base)<br>{<br>\tDerive* pDeriveObj = (Derive*)(base-&gt;pDeriveObj);<br>\tprintf(&quot;member:base:a:%d\\t base:b:%d\\nderive:c:%d\\t derive:d:%d\\n&quot;, base-&gt;a, base-&gt;b, pDeriveObj-&gt;c, pDeriveObj-&gt;d);<br>}<br>void DeriveDelete(Base* base)<br>{<br>\tprintf(&quot;derive destructor!\\n&quot;);<br>\tfree(base-&gt;pDeriveObj);<br>\tfree(base);<br>}<br>int main()<br>{<br>\tBase* pBase = new_base(1, 2);<br>\tBase* pDerive = new_Derive(3, 4, 5, 6);<br>\tpBase-&gt;Display(pBase);<br>\tpDerive-&gt;Display(pDerive);<br>\tpBase-&gt;Delete(pBase);<br>\tpDerive-&gt;Delete(pDerive);<br>}","like_count":16,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62342,"discussion_content":"确实牛逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574835315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1039204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","nickname":"中年男子","note":"","ucode":"027C86B3370150","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":63051,"discussion_content":"跟真正的C++的继承多态差别很大的，只是有那么点感觉😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574865858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":62342,"ip_address":""},"score":63051,"extra":""}]},{"author":{"id":1193468,"avatar":"https://static001.geekbang.org/account/avatar/00/12/35/fc/6d3e0035.jpg","nickname":"saber","note":"","ucode":"D02F8D129DB41C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53398,"discussion_content":"厉害，实现了多态和继承！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574165542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152828,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1574084936,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"61703627080","product_id":100039001,"comment_content":"我去去去，自从知道lombok后，@Data注解每个实体类必用。。。","like_count":14,"discussions":[{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":57744,"discussion_content":"如果你的类需要提供给其他团队使用，加额外的注解，意味着别人也要依赖lombok，这个其实是不友好的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574642100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1412220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","nickname":"火力全开","note":"","ucode":"8CE1733A2F618C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":72749,"discussion_content":"那当然是通过maven发布jar包提供给第三方使用了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1575523579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":57744,"ip_address":""},"score":72749,"extra":""}]},{"author":{"id":2683294,"avatar":"","nickname":"直走的螃蟹","note":"","ucode":"8116812CF0A1F2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382020,"discussion_content":"我也是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625371280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152559,"user_name":"DebugDog","can_delete":false,"product_type":"c1","uid":1027798,"ip_address":"","ucode":"1664D37CE03B9D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/d6/fbb8236d.jpg","comment_is_top":false,"comment_ctime":1574042772,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"57408617620","product_id":100039001,"comment_content":"我全占了，今天才知道自己学的Java，天天在写面向过程😰","like_count":13},{"had_liked":false,"id":153909,"user_name":"青阳魂","can_delete":false,"product_type":"c1","uid":1254875,"ip_address":"","ucode":"4F04ADAB6D870A","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/db/7c71ef4b.jpg","comment_is_top":false,"comment_ctime":1574329205,"is_pvip":false,"replies":[{"id":"59155","content":"欢迎加啊 wangzheng0822","user_name":"作者回复","comment_id":153909,"uid":"1190123","ip_address":"","utype":1,"ctime":1574377395,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"48818969461","product_id":100039001,"comment_content":"看完这篇，真的太有感触了，提出的这些问题，都是目前大部分程序员所存在的编码问题。<br><br>实际上面向对象、充血模型，面向过程，都是各有各的使用场景，这点上面的同学都说的很明白了，老师也说的非常明白。<br><br>很想加老师的微信交流沟通，总有那种一见如故的感觉。<br><br>我一直觉得我推崇的编码方式好像在他们眼里是异类，又说不清楚自己推崇的是什么。<br><br>说一个非面向对象语言实现面向对象的方式 lua 可以使用 setmetatable 方式实现 封装 继承","like_count":11,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475318,"discussion_content":"欢迎加啊 wangzheng0822","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574377395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000519,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","nickname":"javaadu","note":"","ucode":"8C0B140F1C8992","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":172822,"discussion_content":"哈哈😄，有意外收获","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581807002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152996,"user_name":"blacknhole","can_delete":false,"product_type":"c1","uid":1098286,"ip_address":"","ucode":"271682FFE28F25","user_header":"https://static001.geekbang.org/account/avatar/00/10/c2/2e/c4a527d9.jpg","comment_is_top":false,"comment_ctime":1574137236,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"48818777492","product_id":100039001,"comment_content":"提个小问题，课程中以下两者在表述上其实是互相矛盾的：<br><br>06课中说，二进制指令、汇编语言、面向过程编程语言是一种计算机思维方式，面向对象编程语言的编程套路、思考问题的方式是一种人类的思维方式。<br><br>到了本课07课却说，面向过程编程风格恰恰符合人的这种流程化思维方式，而面向对象编程风格正好相反，它是一种自底向上的思考方式，我们在上一节课讲到了，这样的思考路径比较适合复杂程序的开发，但并不是特别符合人类的思考习惯。<br><br>我觉得如下表述似乎更恰当：<br><br>计算机只有一种处理方式，就是流程化的方式。人脑在处理简单问题时，也是流程化的方式，这也是符合经验直觉的方式，即有先后顺序地，一步一步把一个任务完成。而在处理复杂问题时，因为不同事物的关系是网状的，对人来说，流程化的线性处理方式就很难应付了。这时，尽管分解任务这种模块化处理方式，因不太符合人的经验直觉，对人会有些难度，但是，相较于流程化方式，它却显得容易多了。<br><br>因而可以说，对于简单程序的开发，面向过程比面向对象容易，而对于复杂程序，尽管面向对象有难度，但也比面向过程容易。","like_count":11},{"had_liked":false,"id":152691,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1574064642,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"44523737602","product_id":100039001,"comment_content":"今日的课堂讨论不会回答,尝试总结一下重点回顾的3个问题:<br><br>1.getter, setter问题的本质类的可变性问题.&lt;Effective Java&gt;中明确提到,除非有必要,否则类应该设计为不可变(Immutable)的.<br><br>2. Constants 和 Util类的问题本质是静态成员和静态方法问题.<br>静态成员和静态方法违背面向对象设计(OOP)原则,但从整体项目角度讲,静态成员和静态方法的好处大于其坏处,所以它们确实有存在的意义.<br><br>3.我对贫血模型的看法: 我是一名Android开发,日常使用的是MVC的变种MVP &amp;&amp; MVVM模型.<br>MVP和MVVM相比MVC要更靠近OOP思想，但面向过程思想的设计仍包含于其中。<br>无论面向对象或面向过程，写出层次清晰，易扩展，易维护的代码才是目的。","like_count":10,"discussions":[{"author":{"id":1324863,"avatar":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","nickname":"KK","note":"","ucode":"FFC31A3FE3A285","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229038,"discussion_content":"作者所说比较接近实战案例，只是没有基础的人，第一次听，真的是一脸懵。作者是通过使用的过程推理出来的模式。但对于听者来说，理解角度与复杂度就上升啦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586604370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1958147,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e1/03/f937e673.jpg","nickname":"🍀","note":"","ucode":"60E0AC2A55B63B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":228857,"discussion_content":"作者已经给你代码了而且讲的很详细,你可以通过变化抓住工厂模式的特性,并分析不同模式的利与弊,你通过找其他相关文章学习工厂模式,无非就是造Pizza的例子,那和这篇文章没有什么不同,作者举的例子更贴近开发,现实中你会在项目里造Pizza么?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586583914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152478,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1574031675,"is_pvip":false,"replies":[{"id":"58584","content":"😄你说的后面都基本上有讲到","user_name":"作者回复","comment_id":152478,"uid":"1190123","ip_address":"","utype":1,"ctime":1574037065,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"44523704635","product_id":100039001,"comment_content":"1.现在因为使用封装好的框架，没有提供set方法，类的序列化会成为一个问题<br>2.从理论上来说，数据和逻辑应该放在一起，但是数据的赋值往往可能依赖其他的service提供的数据，如果这样的话数据属性和纯粹依赖的service就会导致一个类的成员属性特别的多。 <br>3.对于一个具体现实对象而言，不同场景下可能关心的字段稍微有些不一样，对于此又该怎么处理呢？多个小对象，他们之间有无相关关系，有的话如何阐述，还是全部赋值完毕，都完整返回。当然可能具体场景具体分析，那是否有一个稍微通用的指导纲领<br>期待老师关于面向对象的实战流程","like_count":10,"discussions":[{"author":{"id":1100064,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","nickname":"zj","note":"","ucode":"E3329CCF694AC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203239,"discussion_content":"使用简单工厂，调用者不用考虑具体子类的实例化，因为抽象类会提供合适的子类实例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584017368,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153977,"user_name":"hong","can_delete":false,"product_type":"c1","uid":1110639,"ip_address":"","ucode":"1A826195907C71","user_header":"https://static001.geekbang.org/account/avatar/00/10/f2/6f/5680dc30.jpg","comment_is_top":false,"comment_ctime":1574340386,"is_pvip":false,"replies":[{"id":"59158","content":"给类本身提供一个copy方法呢","user_name":"作者回复","comment_id":153977,"uid":"1190123","ip_address":"","utype":1,"ctime":1574377996,"user_name_real":"王争"}],"discussion_count":5,"race_medal":0,"score":"35934078754","product_id":100039001,"comment_content":"习惯了从前端的参数直接使用  BeanUtils.copyProperties 映射到具体实体类，如果不直接提供set方法，有啥好的方法去组装数据呢","like_count":8,"discussions":[{"author":{"id":1242543,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f5/af/a457bdb2.jpg","nickname":"I LOVE JAVASCRIPT","note":"","ucode":"66D9EB7395662B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395758,"discussion_content":"我跟你的想法大致一样，但是看网上好多文章跟这里讲解的不一致，抽象、具体的工厂类和产品类都对不上。我一前端看java是真头痛，关键还不知道谁对。还想着要转成js，结果一搜js版的工厂模式，好家伙，啥版本都有，更懵了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632328848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217057,"user_name":"八百","can_delete":false,"product_type":"c1","uid":1253530,"ip_address":"","ucode":"79F1F79ADF5A00","user_header":"https://static001.geekbang.org/account/avatar/00/13/20/9a/3b1c65fd.jpg","comment_is_top":false,"comment_ctime":1589414373,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27359218149","product_id":100039001,"comment_content":"1.😜ོ接触到的都是贫血模式，别人这么写，我也这么写，直到看到ddd<br>2.排期太紧，还要值班，太累，就简单写就好，简单是美，没有故障是美。<br>3.项目代码已经是贫血模式，保持下风格统一","like_count":6,"discussions":[{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383781,"discussion_content":"写完就下班 能跑就行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626237013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175283,"user_name":"BitInit","can_delete":false,"product_type":"c1","uid":1007271,"ip_address":"","ucode":"BDDDA0F51B1EFB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/a7/8dc374e2.jpg","comment_is_top":false,"comment_ctime":1580642483,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27350446259","product_id":100039001,"comment_content":"对于用C来模拟面向对象，曾经看到过一篇非常好的文章：https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;2ivQ9hcRvZnhk89jzAppSg","like_count":6},{"had_liked":false,"id":153025,"user_name":"观弈道人","can_delete":false,"product_type":"c1","uid":1016905,"ip_address":"","ucode":"F3BB619A33C605","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","comment_is_top":false,"comment_ctime":1574142666,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23048979146","product_id":100039001,"comment_content":"1.Get到了Collections.unmodifiableList，这个很好。<br>2.Constants分类很好，常量定义要根据复用级别，而放在不同的位置比较好。比如：有的放在当前类、父类、同一个模块中定义的Constants，公共模块中定义的Constants.<br>3.dto&#47;po中的getter&#47;setter只是为了方便框架解析。带有业务方法的对象，需要慎重考虑getter&#47;setter.","like_count":5},{"had_liked":false,"id":152558,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1574042755,"is_pvip":false,"replies":[{"id":"58739","content":"1. 并没有说一定不能定义set方法，文章中说不要滥定义用不上的set方法<br>2. 多个业务接口需要同一份数据？这个怎么理解呢？","user_name":"作者回复","comment_id":152558,"uid":"1190123","ip_address":"","utype":1,"ctime":1574129416,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"23048879235","product_id":100039001,"comment_content":"1.get set 这个很好理解，但是我有很多疑问，比如有的属性理论上来讲不该添加set方法，那我怎么对他进行属性拷贝？比如两个vo进行拷贝属性值，还有作为接口参数，spring又怎么给他赋值？<br>2.看完贫血模式那个知识点后，我懵了，我甚至不知道怎么才能写出面向对象的代码了，如果数据和业务不分离的话，那比如我多个业务接口需要同一份数据，难道要定义多份吗？我有点懵了😥😥😥","like_count":5,"discussions":[{"author":{"id":1810576,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","nickname":"M","note":"","ucode":"06F26E1D62E9C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206757,"discussion_content":"AOE伤害爆炸","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584439227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1810576,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","nickname":"M","note":"","ucode":"06F26E1D62E9C9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206848,"discussion_content":"拼音aoe","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584449854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":206757,"ip_address":""},"score":206848,"extra":""}]}]},{"had_liked":false,"id":157695,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1575247979,"is_pvip":false,"replies":[{"id":"60724","content":"前端跟后端交互的那个叫dto 可以定义为之包含数据的类 后面会讲到","user_name":"作者回复","comment_id":157695,"uid":"1190123","ip_address":"","utype":1,"ctime":1575432875,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"18755117163","product_id":100039001,"comment_content":"老师这一讲，解我多年困惑。<br>仍有一事困惑：前端传数据到后端，我要是不定义一个开放了所有属性的POJO，那么数据如何反序列化成类呢？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476500,"discussion_content":"前端跟后端交互的那个叫dto 可以定义为之包含数据的类 后面会讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575432875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153236,"user_name":"grey927","can_delete":false,"product_type":"c1","uid":1202782,"ip_address":"","ucode":"833E02ED835B4A","user_header":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","comment_is_top":false,"comment_ctime":1574206953,"is_pvip":false,"replies":[{"id":"58863","content":"接口不能包含属性的 用接口不合适","user_name":"作者回复","comment_id":153236,"uid":"1190123","ip_address":"","utype":1,"ctime":1574213067,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"18754076137","product_id":100039001,"comment_content":"Constants用接口是不是比用类更好？","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475089,"discussion_content":"接口不能包含属性的 用接口不合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574213067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1202782,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5a/5e/a897cb0d.jpg","nickname":"grey927","note":"","ucode":"833E02ED835B4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53918,"discussion_content":"public interface Constant {\n\tpublic static final String SEC_USER = &#34;user&#34;;\n} \n这是完全没有问题的，其中常量中的：public static final可以省略\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574234693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1909094,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/21/66/85f247e2.jpg","nickname":"谢作作的男人","note":"","ucode":"4F220EA8AEBFB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343469,"discussion_content":"属性指的是成员变量，不是静态变量（类变量）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611054050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152473,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574023994,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18753893178","product_id":100039001,"comment_content":"添加对象公有方法方法要注意两点：<br>1.避免过多的访问内部数据的方法，只有在确定需要的时候再增加。<br>2.避免返回内部引用（数组，对象，方法等），这些引用会无意间暴露修改内部状态的方法，导致数据不一致，也违反封装原则。这种情况如果数据量不大，返回一个拷贝对象即可。如果有效率考量，就要具体问题具体分析。","like_count":4},{"had_liked":false,"id":312982,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1632186369,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14517088257","product_id":100039001,"comment_content":"面向过程的另一个常见场景是超长的方法体，流水账式编程","like_count":3},{"had_liked":false,"id":155434,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1574688982,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14459590870","product_id":100039001,"comment_content":"感觉自己就是一个面向过程BOY！！！！！","like_count":3},{"had_liked":false,"id":152699,"user_name":"吖蒲","can_delete":false,"product_type":"c1","uid":1036972,"ip_address":"","ucode":"397C5DA20D5693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d2/ac/aeb9f156.jpg","comment_is_top":false,"comment_ctime":1574066161,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14458968049","product_id":100039001,"comment_content":"已确认过眼神，自己是面向过程编程风格的人。<br>1.如果Entry不提供get和set方法，如何快捷绑定数据库的值？<br>2.service不提供具体的实现过程，我们如何一 一实现业务功能？<br>3.团队水平有限，感受到很多功能点相似，可抽象一部分功能出来，但碍于公司说，生产上稳定性高于维护性，不给予重构的权限，重构了也不会上线。<br>期待老师后面章节的内容能够解决我的疑惑。","like_count":3,"discussions":[{"author":{"id":2347137,"avatar":"https://static001.geekbang.org/account/avatar/00/23/d0/81/d5c8e46e.jpg","nickname":"snake","note":"","ucode":"47BFFE4D048156","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330920,"discussion_content":"一样的疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606730520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152687,"user_name":"肖大妞","can_delete":false,"product_type":"c1","uid":1426644,"ip_address":"","ucode":"2AD2F8684FDCF8","user_header":"https://static001.geekbang.org/account/avatar/00/15/c4/d4/5c8fb1cb.jpg","comment_is_top":false,"comment_ctime":1574063607,"is_pvip":false,"replies":[{"id":"58737","content":"后面实战篇会详细的讲解的。","user_name":"作者回复","comment_id":152687,"uid":"1190123","ip_address":"","utype":1,"ctime":1574129075,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"14458965495","product_id":100039001,"comment_content":"是不是对不同的业务场景，应该采用不同的编程范式<br>业务驱动比较强的场景，是不是用采用面向过程编程更容易让人理解，","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474898,"discussion_content":"后面实战篇会详细的讲解的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574129075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152542,"user_name":"月坛小雨","can_delete":false,"product_type":"c1","uid":1209475,"ip_address":"","ucode":"AB7C38A85692E6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJVhMyzoAPOLPI5wxsxSydHZeqNdz1SLRnPPQ0STmWwXIbkhaLHw4t2AXsTJwicgEibcRAMZEgibAKgg/132","comment_is_top":false,"comment_ctime":1574041218,"is_pvip":false,"replies":[{"id":"58620","content":"我python不怎么懂啊 抱歉啊","user_name":"作者回复","comment_id":152542,"uid":"1190123","ip_address":"","utype":1,"ctime":1574047454,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"14458943106","product_id":100039001,"comment_content":"老师讲课举例的时候，能不能稍微带点python的例子？（另外，老师在加餐里有Java的基础知识，非常贴心了）","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474851,"discussion_content":"我python不怎么懂啊 抱歉啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574047454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005235,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLRXbu511COICQXDgKDXg9Ok0wwPfte5ZibiasCBwuyE9ZzicazoFsbFZWFykQBohiaXPbyw44LjlBIxA/132","nickname":"Richard","note":"","ucode":"165E48039ED8BE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550978,"discussion_content":"那老师可以写点JavaScript相关的吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644832948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152509,"user_name":"傲慢与偏执，","can_delete":false,"product_type":"c1","uid":1236496,"ip_address":"","ucode":"E9F81223DFAD24","user_header":"https://static001.geekbang.org/account/avatar/00/12/de/10/9f15527d.jpg","comment_is_top":false,"comment_ctime":1574037969,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14458939857","product_id":100039001,"comment_content":"期待实战讲解","like_count":3},{"had_liked":false,"id":152459,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1574008848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14458910736","product_id":100039001,"comment_content":"封装就是基本的函数<br>继承是一种is-a的关系，属性的继承是父类的属性在子类之前按照顺序排列，接口的话是使用虚函数表，通过查表来确定父类有哪些接口<br>多态的实现是通过函数指针，根据具体的子类找到子类继承的接口的入口地址，然后去执行就好了<br>大致是c&#47;c++的实现<br>工作现在就是在用面对对象语言写着面向过程业务，😂😂","like_count":3},{"had_liked":false,"id":247005,"user_name":"左右","can_delete":false,"product_type":"c1","uid":1410917,"ip_address":"","ucode":"97D38B40C127BB","user_header":"https://static001.geekbang.org/account/avatar/00/15/87/65/0d0622e8.jpg","comment_is_top":false,"comment_ctime":1599555597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10189490189","product_id":100039001,"comment_content":"个人觉得，滥用全局变量和全局方法这个举例表达不完整，作者的举例不是侧重于滥用讲解，而是侧重于设计思路讲解。个人更偏向于知道如果在类中滥用全局变量和全局方法的弊端是什么","like_count":2},{"had_liked":false,"id":191578,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1921287,"ip_address":"","ucode":"64BBE005890845","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/07/b5a945b6.jpg","comment_is_top":false,"comment_ctime":1584782973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10174717565","product_id":100039001,"comment_content":"学习总结后，直接发到我们团队讨论群，让大家反思反省下。😄","like_count":2},{"had_liked":false,"id":156390,"user_name":"被讨厌的勇气","can_delete":false,"product_type":"c1","uid":1547913,"ip_address":"","ucode":"AE3B3CA27D91A2","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/89/6e9c05d6.jpg","comment_is_top":false,"comment_ctime":1574865896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164800488","product_id":100039001,"comment_content":"C语言可以通过结构体加函数，函数第一个参数为该结构体指针的方式来实现方法和数据结构结合，但无法实现访问权限控制。<br><br>通过在结构体中包含结构体的方式可以实现继承。<br><br>通过函数指针实现多态。每个类有一个共同的虚函数表，每个对象都有一个指向虚函数表的指针，通过指向不同的虚函数表来实现多态。<br><br>##坚持打卡##<br><br>滥用getter、setter，破坏了对象的封装性，使得对象不像“对象”，还有就是返回容器对象的情况。<br>定义Contants、Utils类，影响可维护性、增加编译时间、影响易用性。解决方法：将其拆解为多个功能单一的类，或定义到相应的业务类中。定义Utils的一个背景是两个独立类共用相同代码，在定义之前确认有必要定义一个单独的类吗。<br>数据与方法相分离。<br><br>面向对象的目标是为了写出高质量的代码，当使用面向过程更能实现这个目标时（微小程序、数据处理相关的代码），不要拘泥。","like_count":2},{"had_liked":false,"id":155874,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1574771232,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"10164705824","product_id":100039001,"comment_content":"Day022 07<br>为免滥用 getter&#47;setter 方法，Jeff Bay 在其《Object Calisthenics》直接建议“No getters&#47;setters&#47;properties”，两害相权取其轻，透露出“论大多数人的设计编码能力，直接不使用 getters&#47;setters，一点也不会错杀”的无奈。<br><br>不用 getters&#47;setters，有时候不是真不能用，而是提醒你 getters&#47;setters 应是轻量级操作，若非如此，需要考虑个合适的命名了。<br><br>http:&#47;&#47;www.bennadel.com&#47;resources&#47;uploads&#47;2012&#47;ObjectCalisthenics.pdf<br>http:&#47;&#47;wiki.c2.com&#47;?TellDontAsk<br>http:&#47;&#47;kaelzhang81.github.io&#47;2018&#47;06&#47;10&#47;%E5%AF%B9%E8%B1%A1%E5%81%A5%E8%BA%AB%E6%93%8D%E8%AF%A6%E8%A7%A3&#47;","like_count":2},{"had_liked":false,"id":154601,"user_name":"zhanyd","can_delete":false,"product_type":"c1","uid":1073845,"ip_address":"","ucode":"4C994EE512A3C4","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/b5/4159fa05.jpg","comment_is_top":false,"comment_ctime":1574489889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164424481","product_id":100039001,"comment_content":"这门课太棒了，我就喜欢从理论开始，娓娓道来，然后联系实践，知其然，知其所以然。","like_count":2},{"had_liked":false,"id":153207,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1574181299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164115891","product_id":100039001,"comment_content":"我想的是,老师说的基本上在中小公司都是这样子的,<br>公司水平不高,上手快,对新手要求不高,可能导致很多人仅仅只会增删改查...","like_count":2},{"had_liked":false,"id":152897,"user_name":"一生一世一双人","can_delete":false,"product_type":"c1","uid":1148589,"ip_address":"","ucode":"563500BA097B45","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/ad/dd7bfa58.jpg","comment_is_top":false,"comment_ctime":1574118628,"is_pvip":false,"replies":[{"id":"58733","content":"😂 信小争哥就对了...","user_name":"作者回复","comment_id":152897,"uid":"1190123","ip_address":"","utype":1,"ctime":1574128467,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"10164053220","product_id":100039001,"comment_content":"刚开始，觉得老师前面几章说的有点啰嗦。看到这里，突然觉得很有必要再回顾思考一下前面几章的内容。😂😂","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474982,"discussion_content":"😂 信小争哥就对了...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574128467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1118102,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/wBibtTTkiaGtcJ3qBeG4BnB4MmaurYf8hZTrXiczmvLHlRrqxJicRaoQPAZ0vw9HHd7yxDH27TLCzBQqqOqyGukw1g/132","nickname":"gen_jin","note":"","ucode":"E282DB98815F13","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292672,"discussion_content":"老师讲的很透彻！实诚人！很幸运！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595303032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1813881,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/ad/79/ed57f69e.jpg","nickname":"蜡笔","note":"","ucode":"C021F334D93DD2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286687,"discussion_content":"同感..................一开始上来就想耍屠龙刀了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593261662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152504,"user_name":"醉比","can_delete":false,"product_type":"c1","uid":1248399,"ip_address":"","ucode":"79E65F62BE7809","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/8f/4ebd303a.jpg","comment_is_top":false,"comment_ctime":1574037643,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10163972235","product_id":100039001,"comment_content":"感觉老师说的几个情况已经很全面了，一直在做MVC相关开发，也一直感觉自己写了很多面向过程的代码，但是却不知道哪里出现的问题。感觉现在大家对于新建对象还是过于随意了，其实还是有很多门道在里面。","like_count":2,"discussions":[{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383783,"discussion_content":"工业开发 总得有人 当工人么不是 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626237359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247033,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1533352,"ip_address":"","ucode":"6FD3642D6455AE","user_header":"https://static001.geekbang.org/account/avatar/00/17/65/a8/6431f8b0.jpg","comment_is_top":false,"comment_ctime":1599563251,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5894530547","product_id":100039001,"comment_content":"MVC和面相过程的编码风格 其实降低很多软件开发的门槛 换句话来说就是可以更快的去迭代出一个系统 所以他的出现是短时间提高了生产力 ","like_count":1},{"had_liked":false,"id":214002,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588614288,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5883581584","product_id":100039001,"comment_content":"接手一个项目，分享判断全部写的if else ，花了一整天改成策略模式了。","like_count":1},{"had_liked":false,"id":198516,"user_name":"木白","can_delete":false,"product_type":"c1","uid":1194009,"ip_address":"","ucode":"BEC459430B293C","user_header":"https://static001.geekbang.org/account/avatar/00/12/38/19/c8d72c61.jpg","comment_is_top":false,"comment_ctime":1585454705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880422001","product_id":100039001,"comment_content":"数据处理相关的程序，比如数据分析，数据预处理，数据清洗，etl这些，就是拿到一批数据先干什么，然后再干什么，最后输出数据，这是典型的需要流程化思考模式的需求。面向过程编程和函数式编程更加适合这种场景。为什么是函数式呢，因为所谓的“以算法为主”，就可以把一个个算法操作开发成一个个小函数（称为算子），就可以通过函数式编程把这些算子应用在数据上。","like_count":1},{"had_liked":false,"id":166701,"user_name":"fly","can_delete":false,"product_type":"c1","uid":1025992,"ip_address":"","ucode":"D1F6938C9CE15D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/c8/5608cbdb.jpg","comment_is_top":false,"comment_ctime":1577547598,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5872514894","product_id":100039001,"comment_content":"lombok一直在用；数据与操作分开的贫血开发模式，Java开发中挺主流的。这一节听完有点乱，对习惯冲级很大。","like_count":1,"discussions":[{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335339,"discussion_content":"跟lombok 没关系吧, 只是不要滥用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608170220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1697945,"avatar":"","nickname":"Geek_3231cf","note":"","ucode":"922CB5478DB3EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":180047,"discussion_content":"lombok没问题 只是用法有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582273323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164778,"user_name":"黄政","can_delete":false,"product_type":"c1","uid":1345630,"ip_address":"","ucode":"9076A1BF7BB051","user_header":"https://static001.geekbang.org/account/avatar/00/14/88/5e/cc916a2b.jpg","comment_is_top":false,"comment_ctime":1577090015,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5872057311","product_id":100039001,"comment_content":"c语言：<br>1.封装：数据和函数指针定义在一个结构体中<br>2.抽象：函数即是抽象<br>3.继承：有点说不清楚<br>4.多态：c语言的函数指针是可以实现的","like_count":1},{"had_liked":false,"id":159331,"user_name":"cv0cv0","can_delete":false,"product_type":"c1","uid":1360093,"ip_address":"","ucode":"93FF9277F03FD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLEIsgI4ub1VOKWtVOfouAzSqx8Yt8ibQEsAnwNJsJHmuJzzpQqG79HullvYwpic8hgiclgON2GwXSjw/132","comment_is_top":false,"comment_ctime":1575600496,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870567792","product_id":100039001,"comment_content":"不是没有定义 setPrice 方法吗？","like_count":1},{"had_liked":false,"id":155077,"user_name":"秋雨飘落","can_delete":false,"product_type":"c1","uid":1124916,"ip_address":"","ucode":"EC795F8DEC00EB","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/34/78656be9.jpg","comment_is_top":false,"comment_ctime":1574643468,"is_pvip":false,"replies":[{"id":"60026","content":"没有太看懂constants类跟spring自动注入的关系😂","user_name":"作者回复","comment_id":155077,"uid":"1190123","ip_address":"","utype":1,"ctime":1574853215,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5869610764","product_id":100039001,"comment_content":"constants类分类是为了减少单个文件大小 但项目中喜欢用spring自动注入 感觉有点多余 还想请老师给予解惑","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475655,"discussion_content":"没有太看懂constants类跟spring自动注入的关系😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574853215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153932,"user_name":"zaab","can_delete":false,"product_type":"c1","uid":1683063,"ip_address":"","ucode":"EE846895FF0C85","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QYKSUV20DMgBHAPLfgngdw4N8FHRCSBLCJueVRu9Ya1Ba2x4icx70zoVVFOZtG1K6TkHj5CFbuztQhRFyCjWXHQ/132","comment_is_top":false,"comment_ctime":1574333783,"is_pvip":false,"replies":[{"id":"59166","content":"购物车里的item会被修改还是因为暴露了getitems方法 跟set关系不大","user_name":"作者回复","comment_id":153932,"uid":"1190123","ip_address":"","utype":1,"ctime":1574384375,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5869301079","product_id":100039001,"comment_content":"以上提到的购物车的item，我感觉将set方法屏蔽部分，通过构造器构造，就可以防止以上提到修改---我是菜鸟，不知道行不行。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475327,"discussion_content":"购物车里的item会被修改还是因为暴露了getitems方法 跟set关系不大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574384375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153919,"user_name":"青阳魂","can_delete":false,"product_type":"c1","uid":1254875,"ip_address":"","ucode":"4F04ADAB6D870A","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/db/7c71ef4b.jpg","comment_is_top":false,"comment_ctime":1574330146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869297442","product_id":100039001,"comment_content":"local _class = {}<br><br>function class(super)<br>  local class_type = {}<br>  class_type.ctor = false<br>  class_type.super = super<br>  class_type.new = function(...)<br>    local obj = {}<br>    do<br>      local create<br>      create = function(c, ...)<br>        if c.super then<br>          create(c.super, ...)<br>        end<br>        if c.ctor then<br>          c.ctor(obj, ...)<br>        end<br>      end<br>      create(class_type, ...)<br>    end<br>    setmetatable(obj,{ __index=_class[class_type] })<br>    return obj<br>  end<br>  local vtbl = {}<br>  _class[class_type] = vtbl<br>  setmetatable(class_type, { __newindex = function(t, k, v)<br>      vtbl[k] = v<br>    end<br>  })<br><br>  if super then<br>    setmetatable(vtbl, { __index = function(t, k)<br>      local ret = _class[super][k]<br>      vtbl[k] = ret<br>      return ret<br>    end})<br>  end<br>\treturn class_type<br>end<br><br><br><br><br><br>local a = class()<br>function a:ctor()<br>  self.hello = 1;<br>\treturn self<br>end<br><br>function a:test()<br>    print(self.hello)<br>end<br><br>-- class<br>A = setmetatable({}, { __call = function(me, ...) return a:new( ... ) end, __metatable = true, __newindex = function() end })<br><br>local b = class(a)<br>function b:ctor()<br>  self.hello2 = 2;<br>\treturn self<br>end<br><br>function b:print2()<br>    print(self.hello2)<br>end<br><br>B = setmetatable({}, { __call = function(me, ...) return b:new( ... ) end, __metatable = true, __newindex = function() end })<br><br>local instance = B()<br>for k, v in pairs(instance) do<br>  print(k)<br>end","like_count":1},{"had_liked":false,"id":153199,"user_name":"佳民","can_delete":false,"product_type":"c1","uid":1000433,"ip_address":"","ucode":"A5626BAEC96945","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/f1/3c69eb09.jpg","comment_is_top":false,"comment_ctime":1574179166,"is_pvip":false,"replies":[{"id":"59139","content":"两者没关系的","user_name":"作者回复","comment_id":153199,"uid":"1190123","ip_address":"","utype":1,"ctime":1574332046,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5869146462","product_id":100039001,"comment_content":"贫血模型有益于依赖注入，是不是啊？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475078,"discussion_content":"两者没关系的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574332046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152760,"user_name":"肥而不腻","can_delete":false,"product_type":"c1","uid":1435246,"ip_address":"","ucode":"3E6786A82A6DD6","user_header":"https://static001.geekbang.org/account/avatar/00/15/e6/6e/062da5e4.jpg","comment_is_top":false,"comment_ctime":1574076254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869043550","product_id":100039001,"comment_content":"上班路上看文章，下班路上看评论！😬😬","like_count":1},{"had_liked":false,"id":152698,"user_name":"刘旺旺","can_delete":false,"product_type":"c1","uid":1086132,"ip_address":"","ucode":"A9E89684BAE08D","user_header":"https://static001.geekbang.org/account/avatar/00/10/92/b4/bd466eed.jpg","comment_is_top":false,"comment_ctime":1574065809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869033105","product_id":100039001,"comment_content":"原来一直在写面向过程的代码啊","like_count":1},{"had_liked":false,"id":152676,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1574061071,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869028367","product_id":100039001,"comment_content":"贫血模型是服务类无状态，无状态的类适合水平扩展，并且可以使用单例来应付所有请求。避免重复创建和销毁类","like_count":1},{"had_liked":false,"id":152625,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1574052902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869020198","product_id":100039001,"comment_content":"关于setter和getter, 国内很多培训机构一开始都是教大家这么用,包括阿里云上面的java学习视频, 都是国内前辈的习惯影响的, 还好有幸看到正确的讲解","like_count":1},{"had_liked":false,"id":152592,"user_name":"leslee","can_delete":false,"product_type":"c1","uid":1384326,"ip_address":"","ucode":"DB1CBF9F8D16BF","user_header":"https://static001.geekbang.org/account/avatar/00/15/1f/86/3a7eeac4.jpg","comment_is_top":false,"comment_ctime":1574046875,"is_pvip":false,"replies":[{"id":"58740","content":"😁 在设计模式模块里，会讲一下的","user_name":"作者回复","comment_id":152592,"uid":"1190123","ip_address":"","utype":1,"ctime":1574129442,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5869014171","product_id":100039001,"comment_content":"额... 小争哥 那个面向切面编程会讲一下吗?  看了一些解析好像不怎么懂...","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474867,"discussion_content":"😁 在设计模式模块里，会讲一下的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574129442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152534,"user_name":"逆流的鱼","can_delete":false,"product_type":"c1","uid":1258399,"ip_address":"","ucode":"AA3DDE44A83C40","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/9f/8dbd9558.jpg","comment_is_top":false,"comment_ctime":1574040321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869007617","product_id":100039001,"comment_content":"DTO这个形态的疑惑就没消失过😂","like_count":1},{"had_liked":false,"id":152525,"user_name":"小畅","can_delete":false,"product_type":"c1","uid":1322880,"ip_address":"","ucode":"D031CC07CD564E","user_header":"","comment_is_top":false,"comment_ctime":1574039376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869006672","product_id":100039001,"comment_content":"get、set方法老师以前在讲的时候，也不讲为啥，上来就是直接设置。现在才知道封装的作用。工具类、配置类的细分对后期维护起来方便多了，有时候把控适合细分的度挺重要的，要多些项目经验会把控好这个度","like_count":1},{"had_liked":false,"id":152522,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1574039118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869006414","product_id":100039001,"comment_content":"面向对象是把数据和方法打包，隐藏内部状态，暴露外部需要的方法。这种把数据和方法并列处理的方法也有一个弊端，那就是很多情况下，数据和方法的体量并不对等，例如String，数据很少，对应的方法却很多，如果把数据和方法放到一个类里，势必方法数目巨大，数据基本淹没在方法中，而且对这么多方法不分类来处理也带来维护负担，这和全局方法过多是一个道理。Kotlin语言采用的是extension methods来处理这种情况，简而言之就是数据被多个方法群调用，然后调用的时候可以根据import来分类。请问王老师，还有其他更好的方法来处理这种情况吗，多谢！","like_count":1},{"had_liked":false,"id":152513,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1574038497,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869005793","product_id":100039001,"comment_content":"面相过程更符合人类思维，和命令式编程差不多","like_count":1},{"had_liked":false,"id":152493,"user_name":"cc","can_delete":false,"product_type":"c1","uid":1592092,"ip_address":"","ucode":"FF41E5D87BAD76","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/1c/5eb03a91.jpg","comment_is_top":false,"comment_ctime":1574036042,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5869003338","product_id":100039001,"comment_content":"搜了一下c如何写出面向对象风格的代码。<br>直观感觉是用c把c++编译器隐式完成的对象模型显式写出来，666😂","like_count":1},{"had_liked":false,"id":152460,"user_name":"玄兴梦影","can_delete":false,"product_type":"c1","uid":1364855,"ip_address":"","ucode":"D9EDBBC61317E9","user_header":"https://static001.geekbang.org/account/avatar/00/14/d3/77/fb38ccf1.jpg","comment_is_top":false,"comment_ctime":1574008888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868976184","product_id":100039001,"comment_content":"我写得最多的就是面向过程，现在在学习JAVA，发现自己写的也是面向过程","like_count":1},{"had_liked":false,"id":359537,"user_name":"Will Zhang","can_delete":false,"product_type":"c1","uid":3197012,"ip_address":"上海","ucode":"294B06E7EFEB18","user_header":"https://static001.geekbang.org/account/avatar/00/30/c8/54/8d27cb56.jpg","comment_is_top":false,"comment_ctime":1665630209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665630209","product_id":100039001,"comment_content":"反面教材：我用Python是如何开发出极难维护的代码的<br>我的工作是利用python计算一些金融指标，搭建简单的金融模型，基本流程就是：取数据处理数据，计算指标，开接口给Java调用。<br>平时写代码就是先想好，第一步干嘛，第二步干嘛，第三步干嘛，然后写一堆函数。<br>然后再想，第一步可以细分为几步，然后再写一堆函数出来，这样以此类推，结果就是一个功能除了接口类之外，全是函数。<br>随着项目的迭代代码开始坏起来了：<br>1.新模块和第一个模块流程差不多，好多相似的功能：取数逻辑，数据处理逻辑，某些相同的业务逻辑等，我又不可能直接cv（太low）然后我就用继承，这样一来公用的方法就可以直接用了，对于那些需要修改的功能就重写父类方法（当时还挺佩服我自己的，哈哈）<br>2.又有新的模块啦，看上去和之前的流程相似，但内部还是有调整，得嘞，继续继承，和哪个模块相似度高就继承哪个。<br>3.又双叒叕有新的模块啦，这时我发现之前的继承太乱了搞来搞去没有太相似的模块了，我妥协了，直接上CV大法，反正大部分功能之前的模块都有，只是各占一部分而已，这时CV反而更方便了。<br>4.项目就这样相安无事的进行了一年多，直到有一天，公用取数的逻辑需要修改，公用业务逻辑需要调整，现在看看我的代码：代码里面有图省事直接继承的，有继承不方便直接cv的，你能想象一个小的改动需要10几个文件跟着一起改动那种酸爽吗？<br>最后弱弱的问一句：我写了那么多函数算函数式编程吗？（狗头保命）","like_count":0},{"had_liked":false,"id":356564,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"浙江","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1662424273,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662424273","product_id":100039001,"comment_content":"面向过程的代码风格，在用java实现的项目中，一个业务方法也是一步一步执行。是面向过程。而面向对象，是需要自底向上去思考这个一步一步的业务，能否拆分成一些细小独立的类，再基于类来进行业务开发。面向对象的风格，抽象，封装，将方法和数据封装在一个类中。如果是数据和方法分离，那就是典型的面向过程风格，但有时在写一些简单逻辑时，这种更易用，更符合简单人脑思维。用类来封装，抽象更需要一定的思考。所以面向过程的风格代码更容易写出来。","like_count":0},{"had_liked":false,"id":356032,"user_name":"Stay_Gold","can_delete":false,"product_type":"c1","uid":1119904,"ip_address":"北京","ucode":"ACB8DCD2EF8F95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2NTTABPFibg2k9tZscOOKx9wu80a85d5HspCorO9Nibj7Z7q9v1icPTVm5ia52r0RCzEaA/132","comment_is_top":false,"comment_ctime":1661929254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661929254","product_id":100039001,"comment_content":"总结今天所学的<br>用面向对象语言写面向过程代码的一些情况：<br>1.滥用setter和getter其本质就是破坏了代码的封装性。全部都用setter和getter就相当于全部都是public，这就失去了封装的意义。另外getter如果返回的是引用对象的话比如List等，获取到引用对象可以直接调用对象的方法来更改数据，导致虽然没用setter但是还是改变了数据的结果。<br>2.全局变量和全局方法的滥用。全局变量和全局方法会存在于软件的整个生命周期和范围，让任何的对象都能够调用，完全破坏了封装性，并且让数据和方法想入隔离其实是典型的面向过程风格。而且这种全局的东西还有重大的问题就是导致软件编译速度慢，因为每次更改了全局变量的东西都需要重新编译代码，对于大型软件来说有时候编译是很耗时的，同时对于做单元测试也不方便。<br>3.定义数据和方法分离的类。数据和方法分离是典型的面向过程风格。<br>为什么会存在那么多的面向过程的代码：<br>1.大部分程序员只想着实现功能，至于代码的可维护性，可读性，可扩展性，健壮性这些都不会考虑。同时面向过程风格更加符合人本身先A然后才能B，最后C的这种自顶向下的思维习惯。而面向对象风格需要人先把模块设计好，然后像拼积木意义的把模块搭建起来，这种一种自低向上的思维。<br>2.面向对象的风格本身是有一定难度的，比如类要怎么样设计，要把什么属性和方法放到类中，这些都是需要深刻考虑的。而大部分人都习惯简单的方式，不动脑筋的直接按照一步一步的方式来实现，最终就形成了面向过程风格的代码。<br>面向对象风格就真的一定比面向过程风格好吗？<br>首先我们的目的永远都是写出高质量的代码---1.可维护2.可读3.可扩展4.灵活5.简练6.可复用7.易测试。所以不管是那种风格的代码只要我们在自己可控的范围内能实现上面的要求我们就可以写出对应风格的代码。大可不必避讳在面向过程语言中写出面向过程的代码。<br><br>JavaScript是如何实现面向对象的四大特性的：<br>封装：通过自己定义get set方法来实现对方法中的数据访问，类似于闭包。<br>抽象：函数对外隐藏了自己的细节，其实其实就相当于抽象<br>继承：通过原型模式设置prototype来实现<br>多态：用instanceof Function语法根据传递进来的不同对象来调用对应对象的方法来实现。<br><br>其他的用面向对象语言写面向过程风格代码：<br>其实我觉得只要是破坏了面向对象四大特性：封装，抽象，继承，多态的写法的代码应该都算是。<br>比如太多的if else或者switch代码，其实就是没有利用到多态特性。","like_count":0},{"had_liked":false,"id":354155,"user_name":"Geek_19d46a","can_delete":false,"product_type":"c1","uid":1593319,"ip_address":"广东","ucode":"6B137E4FC514D1","user_header":"","comment_is_top":false,"comment_ctime":1660129055,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660129055","product_id":100039001,"comment_content":"一般来讲在支持多种范式的语言中，主要看哪种方式解决问题更方便。不会只局限于某一种方式。","like_count":0},{"had_liked":false,"id":353611,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1149402,"ip_address":"广东","ucode":"AD6933D125C930","user_header":"https://static001.geekbang.org/account/avatar/00/11/89/da/136cdca6.jpg","comment_is_top":false,"comment_ctime":1659603593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659603593","product_id":100039001,"comment_content":"面向对象和面向过程是编程的两种风格，我觉得也不一定所有设计都遵循面向对象才是好。程序都是由一系列关联数据和逻辑组合而成。面向对象的优势是主要是让职责更加分明，让关系更加结构化。再处理复杂关系的时候能够一目了然。<br>常量类确实都堆在一个类里面不好，而且就常量来说有enum类型更加直观一点。<br>utils类做区分可以更加清晰和顾名思义。<br>至于get和set我觉得主要因为现有很多框架都需要这两个方法进行绑定。<br>贫血模型，感觉有点像填表需要用的表格，只需要装数据，而不包含行为，这个刚好跟数据库的表又是契合的，所以很多也这么用。","like_count":0},{"had_liked":false,"id":350974,"user_name":"SICUN","can_delete":false,"product_type":"c1","uid":1254261,"ip_address":"","ucode":"22A384904EB9E9","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/75/2b599841.jpg","comment_is_top":false,"comment_ctime":1657434379,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657434379","product_id":100039001,"comment_content":"现在才知道一直在用贫血模型的开发模式，以为是面向对象的实际是面向过程的，但我觉得应该是两者在混用，由此想到阅读框架源码也应该面向对象和面向对象结合来看，通过面向对象弄清楚框架源码中每个目录、类的作用，然后通过面向过程的思路使用某个具体的主线比如框架的加载过程来串起来相关类，以便更好的读懂源码。","like_count":0},{"had_liked":false,"id":345832,"user_name":"姚钫","can_delete":false,"product_type":"c1","uid":1498146,"ip_address":"","ucode":"ECB8B0627A4F9B","user_header":"https://static001.geekbang.org/account/avatar/00/16/dc/22/41a390ae.jpg","comment_is_top":false,"comment_ctime":1652621640,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652621640","product_id":100039001,"comment_content":"07 | 理论四：哪些代码设计看似是面向对象，实际是面向过程的？<br>220515 day06 三种违反面向对象常见的代码设计<br>1.滥用get set 违反了封装的特性，容器操作也不再安全；常量类和工具类，常量类尽量分细一点或者写在用到的地方，工具类定义前想想是不是用到的地方很多；贫血模型的开发模式，VO，BO，ENTITY，方法都写在了service里<br>2.写代码感觉都是理解业务翻译成代码，基本都是面向过程，要多联系抽象出 各个类以及他们应该有的属性和方法，以及各个类的交互<br>","like_count":0},{"had_liked":false,"id":345688,"user_name":"设计模式之美","can_delete":false,"product_type":"c1","uid":2210135,"ip_address":"","ucode":"67907B55AFDB41","user_header":"https://static001.geekbang.org/account/avatar/00/21/b9/57/4e22ac1f.jpg","comment_is_top":false,"comment_ctime":1652511338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652511338","product_id":100039001,"comment_content":"1. 滥用 getter、setter 方法<br>2.Constants 类、Utils 类的设计问题<br>3. 基于贫血模型的开发模式<br><br>第一点要分情况的，如果是简单场景，使用三层架构写面向过程的代码无可厚非，提供get、set无可厚非。除非是该模型充血有状态。<br>第二点，一般开发都会分清楚吧<br>第三点比较同意，沉淀领域模型，复杂业务不要面向过程<br><br>前面这几张文章都需要提取精华，看后面有没有干货了","like_count":0},{"had_liked":false,"id":342410,"user_name":"Geek_as","can_delete":false,"product_type":"c1","uid":1534500,"ip_address":"","ucode":"AB7B70DBC2B5F8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/qhonwcQle1RBufvLdTm4MgSNl554GBXUZtNNH65oYajbbRLxKsZX4hM9vFtrLLpDM0H93ZNWRFAZSrIZC7yAsQ/132","comment_is_top":false,"comment_ctime":1650251946,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650251946","product_id":100039001,"comment_content":"go语言的结构体struct是可以带有方法的，保证了数据与方法不分离，通过变量名的定义来控制访问权限，实现封装，对于继承来说，go语言是不支持继承，假如两个struct出现逻辑相同的代码块，往往是通过组合的方式来实现代码的复用，而多态的话，go语言也是有函数类型指针，只要是方法签名一样，就可以赋值，同时也存在接口类，通过不同实现接口的类型的赋值，实现接口调用方法的多态","like_count":0},{"had_liked":false,"id":342330,"user_name":"于游","can_delete":false,"product_type":"c1","uid":1232227,"ip_address":"","ucode":"7FA6E0117A3700","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoKEDhibodjlC9dIic9StJDib0YsrSudlGjGpEIpmFbb38otr4Q3wgOI2DOCwVadEOO6KXhM92tXh6gw/132","comment_is_top":false,"comment_ctime":1650197306,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650197306","product_id":100039001,"comment_content":"个人的使用体验刚好相反，在pojo上增加getter和settter这类的个性化实现会显著降低阅读效率和出错几率，别人预期你的getter只是返回一个对象，但没想到你做了一些判断，也就是为啥需要Lombok类破坏封装的原因。但同时，在非pojo类上增加这些破坏封装的注解是反常识的，一般也没有人这么用。<br>Web开发中，常常会用VO或其它的来控制暴露对象的范围，这样符合开闭原则，维护效率会更高。","like_count":0},{"had_liked":false,"id":341868,"user_name":"先听","can_delete":false,"product_type":"c1","uid":1151409,"ip_address":"","ucode":"82D8DA7A2FEB4B","user_header":"https://static001.geekbang.org/account/avatar/00/11/91/b1/fb117c21.jpg","comment_is_top":false,"comment_ctime":1649894006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649894006","product_id":100039001,"comment_content":"太干货，太有实战性了！<br>关于setter等访问控制的问题，像golang这种没有方便的访问控制机制的语言，有没有什么好的实战建议呢？","like_count":0},{"had_liked":false,"id":335247,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1645426432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645426432","product_id":100039001,"comment_content":"1.本人现在用的typescript做的后端，目前也应用封装、继承、多态、抽象模式。<br>2.Utils的设计，的确我们很少封装出来，因为是BFF层的。<br>3.关于贫血模式，就是照葫芦画瓢，疯狂生长时代的必需品。但是要学好编程，就需要弄一些超大的系统，才能明白为什么我们注重这些设计模式了。","like_count":0},{"had_liked":false,"id":317885,"user_name":"陈炆","can_delete":false,"product_type":"c1","uid":2391830,"ip_address":"","ucode":"C4DFDC98195643","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eobdgTHjeugrHFLImiar8zerCq8GSuFBXqzU28chrica0ur4ia3JPOqqaWzI89rce5tLJXicBAVvu9dtg/132","comment_is_top":false,"comment_ctime":1635005549,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635005549","product_id":100039001,"comment_content":"有点疑惑，我们平时不用getter和setter的话，那我们获取数据和设置数据应该怎么办呢？","like_count":0},{"had_liked":false,"id":317884,"user_name":"陈炆","can_delete":false,"product_type":"c1","uid":2391830,"ip_address":"","ucode":"C4DFDC98195643","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eobdgTHjeugrHFLImiar8zerCq8GSuFBXqzU28chrica0ur4ia3JPOqqaWzI89rce5tLJXicBAVvu9dtg/132","comment_is_top":false,"comment_ctime":1635005420,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635005420","product_id":100039001,"comment_content":"还是没搞懂为什么getter和setter违反面向对象呢","like_count":0},{"had_liked":false,"id":316878,"user_name":"jeffery","can_delete":false,"product_type":"c1","uid":1268106,"ip_address":"","ucode":"597CBF4AED4162","user_header":"https://static001.geekbang.org/account/avatar/00/13/59/8a/2722f79c.jpg","comment_is_top":false,"comment_ctime":1634602202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634602202","product_id":100039001,"comment_content":"关于getter和setter，我们在代码中用到的一般都是实体类，使用场景大部分都是单例的，换句话说如果使用setter也都是自己代码的操作，不会影响别的线程，而如果每个方法严格定义getter和setter，感觉性价比不高。可能有一些我没有想到的能导致严重事故的场景，请老师解惑","like_count":0},{"had_liked":false,"id":311057,"user_name":"刘建军","can_delete":false,"product_type":"c1","uid":2348590,"ip_address":"","ucode":"25210BF7BE6BA8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/We0naYhWttpJPDoO7TCndu5w1r4PSCdo57M61Zia8khXmM8GibicDzYdXiaJXZNok7274mSfB4aEMgxyiaDY1pRba0w/132","comment_is_top":false,"comment_ctime":1631057709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631057709","product_id":100039001,"comment_content":"面向过程，面向对象只是我们看待问题的角度不一样，面向对象是整体看待，面向过程是看细节","like_count":0},{"had_liked":false,"id":310444,"user_name":"渠梁","can_delete":false,"product_type":"c1","uid":1488038,"ip_address":"","ucode":"DC86BDEC63C9BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/a6/b6fa2562.jpg","comment_is_top":false,"comment_ctime":1630657270,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630657270","product_id":100039001,"comment_content":"不提供set方法，那bo vo dto 之间属性怎样传递赋值呢","like_count":0},{"had_liked":false,"id":310384,"user_name":"charmsongo","can_delete":false,"product_type":"c1","uid":1609051,"ip_address":"","ucode":"4FBEE716E93A1A","user_header":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","comment_is_top":false,"comment_ctime":1630636401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630636401","product_id":100039001,"comment_content":"面向对象编程注意点<br>1、使用 setter getter 前先考虑清楚是否有必要暴露<br>2、项目中使用 constants 和 utills 注意细化区分<br>3、现今大部分 mvc 模型使用的是贫血模型，基础数据和业务方法确实是分开的，它是面向过程编程，但是想不出面向对象该如何处理，如果增加繁琐和复杂度还会面向对象编程吗","like_count":0,"discussions":[{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312262,"discussion_content":"附上循环依赖三种方式的地址：https://www.cnblogs.com/frank223/p/11832079.html","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1602643962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1194858,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3b/6a/80d9c545.jpg","nickname":"RD","note":"","ucode":"E3947B6E1681AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":361732,"discussion_content":"博客园炸了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1616740953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312262,"ip_address":""},"score":361732,"extra":""}]},{"author":{"id":1530295,"avatar":"https://static001.geekbang.org/account/avatar/00/17/59/b7/9db9c657.jpg","nickname":"渊จุ๊บ","note":"","ucode":"E3A2C1E89EB576","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362922,"discussion_content":"还是可以用《数据结构与算法之美》里的拓扑图来解决环依赖的问题","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1617073687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2604218,"avatar":"https://static001.geekbang.org/account/avatar/00/27/bc/ba/f4749115.jpg","nickname":"lethekk","note":"","ucode":"792812670DF626","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565346,"discussion_content":"想请教下循环依赖是被允许的还是不被允许的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650444158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609051,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8d/5b/383a49e4.jpg","nickname":"charmsongo","note":"","ucode":"4FBEE716E93A1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412704,"discussion_content":"构造器注入可以解决加lazy注解解决报错，但是不太合适好像","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636257387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1297630,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","nickname":"剑八","note":"","ucode":"0A09F41DB8A4E7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":400523,"discussion_content":"字段注入也可以循环依赖不报错，用三级缓存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633309573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308028,"user_name":"Geek_6865f5","can_delete":false,"product_type":"c1","uid":2741599,"ip_address":"","ucode":"0367AC106E742F","user_header":"","comment_is_top":false,"comment_ctime":1629362397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629362397","product_id":100039001,"comment_content":"在java ，Switch语法中，执行代码块，就好像是面向过程。而kotlin的when语法就可以返回对象。所以kotlin的when语法更面向对象，是吗？","like_count":0},{"had_liked":false,"id":307265,"user_name":"小周","can_delete":false,"product_type":"c1","uid":2453498,"ip_address":"","ucode":"7ED7BC27A46C4C","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/fa/615a0df3.jpg","comment_is_top":false,"comment_ctime":1628995149,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628995149","product_id":100039001,"comment_content":"写了这么久的代码，居然都是面向过程编程风格的代码o(╥﹏╥)o","like_count":0},{"had_liked":false,"id":301114,"user_name":"萧潇","can_delete":false,"product_type":"c1","uid":1475866,"ip_address":"","ucode":"1FA83092845507","user_header":"https://static001.geekbang.org/account/avatar/00/16/85/1a/fc016813.jpg","comment_is_top":false,"comment_ctime":1625541722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625541722","product_id":100039001,"comment_content":"近几年在做游戏项目 为了提高实时性 大多数数据都会拉到缓存中 业务逻辑也使用较多充血模型设计","like_count":0},{"had_liked":false,"id":297243,"user_name":"Rio","can_delete":false,"product_type":"c1","uid":2603771,"ip_address":"","ucode":"679B3CEDF6D196","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/6a8fRQFxX5WjDwkXv49SBXd1vvXozzaCGj2m4FgicB2aykLLFO8pvnXibCbLTMUHsa3AsGH5UGFaSdulLkPP3s7Q/132","comment_is_top":false,"comment_ctime":1623392364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623392364","product_id":100039001,"comment_content":"想问下，那比如我有个逻辑删除或者状态，是应该提供set方法还是不提供呢，不提供那逻辑删除怎么修改，订单状态怎么修改？提供的话，那订单状态任何人不都可以修改了吗","like_count":0},{"had_liked":false,"id":293812,"user_name":"编号","can_delete":false,"product_type":"c1","uid":1037836,"ip_address":"","ucode":"1633A363592A1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d6/0c/df0d5152.jpg","comment_is_top":false,"comment_ctime":1621564013,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621564013","product_id":100039001,"comment_content":"实在没弄懂：如果提供了对外部的set方法，会造成对数据的修改。项目都上线了，还能在运行的时候，往代码里面加个set方法来修改数据吗？","like_count":0},{"had_liked":false,"id":288873,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1618742460,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618742460","product_id":100039001,"comment_content":"第2个话题，有些程序代码涉及的数据库处理，特别是那些没有应用数据持久化框架的程序代码，所有涉及到数据库处理的代码几乎全部是面向过程的风格，只不过代码用一个控制类来封装一下，因些表面上看好像也是面向对象的。","like_count":0},{"had_liked":false,"id":287529,"user_name":"爱学习的Kirk","can_delete":false,"product_type":"c1","uid":2392633,"ip_address":"","ucode":"CB6607E26037EC","user_header":"https://static001.geekbang.org/account/avatar/00/24/82/39/c3227567.jpg","comment_is_top":false,"comment_ctime":1618016024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618016024","product_id":100039001,"comment_content":"努力学习，发现自己连面相过程代码都写得不是很清晰，努力让自己无论何种语言都能体现面相对象的思想！","like_count":0},{"had_liked":false,"id":284115,"user_name":"。","can_delete":false,"product_type":"c1","uid":2529737,"ip_address":"","ucode":"BA28F53B20B647","user_header":"https://static001.geekbang.org/account/avatar/00/26/99/c9/6b193193.jpg","comment_is_top":false,"comment_ctime":1616069001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616069001","product_id":100039001,"comment_content":"看到一半，这个购物车设计得确实很妥，完美。终于领会到封装得魅力了","like_count":0},{"had_liked":false,"id":281774,"user_name":"椰子","can_delete":false,"product_type":"c1","uid":1537505,"ip_address":"","ucode":"55723E3E193D8F","user_header":"https://static001.geekbang.org/account/avatar/00/17/75/e1/1a5e8eb8.jpg","comment_is_top":false,"comment_ctime":1614878661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614878661","product_id":100039001,"comment_content":"看了才知道，之前代码写的问题太多","like_count":0},{"had_liked":false,"id":280643,"user_name":"Lanyok","can_delete":false,"product_type":"c1","uid":1016669,"ip_address":"","ucode":"FB55036166E4AE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/5d/1129ca22.jpg","comment_is_top":false,"comment_ctime":1614303597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614303597","product_id":100039001,"comment_content":"团队水平和Leader的的水平，一般密集迭代的产品，都很少有思考程序设计的时间。（ps:小公司）","like_count":0},{"had_liked":false,"id":279382,"user_name":"Chloe","can_delete":false,"product_type":"c1","uid":1004953,"ip_address":"","ucode":"C4848ED5B35752","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/99/4bdadfd3.jpg","comment_is_top":false,"comment_ctime":1613744660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613744660","product_id":100039001,"comment_content":"谢谢老师的讲解，非常解惑。面向对象和面向过程的确有时候在实践中边界不是非常清晰，但是通过老师的讲解，我认为一个基本原则就是代码的复用和结偶，以及代码的优雅。如果是单兵作战作战，能用也许就好，但是团队协作，OOP就体现优势了，避免了很多容易出错的可能。再次感谢！","like_count":0},{"had_liked":false,"id":277834,"user_name":"小太阳","can_delete":false,"product_type":"c1","uid":1072350,"ip_address":"","ucode":"84FF032FE78B11","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/de/16695891.jpg","comment_is_top":false,"comment_ctime":1612612053,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1612612053","product_id":100039001,"comment_content":"这一章老师讲解得很好，同学们解答也很棒，引发了很多思考🤔","like_count":0},{"had_liked":false,"id":274933,"user_name":"Geek_cca021","can_delete":false,"product_type":"c1","uid":2209611,"ip_address":"","ucode":"09675F01BB895E","user_header":"","comment_is_top":false,"comment_ctime":1611220870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611220870","product_id":100039001,"comment_content":"对 getter&#47;setter辩解下：怎么知道不是因为公司基于代码量的KPI考核？ 注解都用上了，getter&#47;setter不是更香吗","like_count":0},{"had_liked":false,"id":274238,"user_name":"刘立嘉","can_delete":false,"product_type":"c1","uid":2414637,"ip_address":"","ucode":"1241140EBE7FE3","user_header":"https://static001.geekbang.org/account/avatar/00/24/d8/2d/6ec3760c.jpg","comment_is_top":false,"comment_ctime":1610936253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610936253","product_id":100039001,"comment_content":"工作中需要测试服务返回的JSON报文，习惯用Const类来定义整个项目用到的常量，最多分两个，一个放所有的key的名称，一个放预期value。名称就叫FieldConsts和ValueConsts，很不好。学习了，将常量声明，放到用到它的类里，分而治之，增强可移植性。","like_count":0},{"had_liked":false,"id":274149,"user_name":"胡了","can_delete":false,"product_type":"c1","uid":1042339,"ip_address":"","ucode":"A36D7870DD0783","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/a3/229d9704.jpg","comment_is_top":false,"comment_ctime":1610873779,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1610873779","product_id":100039001,"comment_content":"python在返回一个list的时候，增加 list.copy() 可以阻止数据被修改，这样的方式是否可行？","like_count":0},{"had_liked":false,"id":268402,"user_name":"子房","can_delete":false,"product_type":"c1","uid":1438860,"ip_address":"","ucode":"CB05938C248BB3","user_header":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","comment_is_top":false,"comment_ctime":1608177667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1608177667","product_id":100039001,"comment_content":"oh, Mr zheng, this article deeply influence me. ","like_count":0},{"had_liked":false,"id":260025,"user_name":"边缘","can_delete":false,"product_type":"c1","uid":2037677,"ip_address":"","ucode":"2437864D6E4333","user_header":"https://static001.geekbang.org/account/avatar/00/1f/17/ad/96ff4c27.jpg","comment_is_top":false,"comment_ctime":1604910669,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1604910669","product_id":100039001,"comment_content":"不单独地设计 Constants 常量类，而是哪个类用到了某个常量，我们就把这个常量定义到这个类中。<br><br>如果很多个类都用到了该常量的话，每个类都需要定义一个，那就没有起到复用的效果呢","like_count":0,"discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174362,"discussion_content":"多级缓存，分阶段初始化。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581909802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1784022,"avatar":"","nickname":"pippin","note":"","ucode":"F7619FCE24D481","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":191551,"discussion_content":"我记得Spring是有通过构造器注入依赖的，那spring中是如何解决的呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582995673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1905357,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/12/cd/55e25527.jpg","nickname":"咕咕噜噜","note":"","ucode":"E9045BF11FAB7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1784022,"avatar":"","nickname":"pippin","note":"","ucode":"F7619FCE24D481","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221360,"discussion_content":"通过构造器注入出现循环依赖会报错，自己试下就可以了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586005677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":191551,"ip_address":""},"score":221360,"extra":""}]}]},{"had_liked":false,"id":256099,"user_name":"庄周梦蝶","can_delete":false,"product_type":"c1","uid":1693576,"ip_address":"","ucode":"7878ED3EB11E97","user_header":"https://static001.geekbang.org/account/avatar/00/19/d7/88/7dcde249.jpg","comment_is_top":false,"comment_ctime":1603527319,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603527319","product_id":100039001,"comment_content":"我觉得mvc会流行很久，因为这样好扩展，阿里的编程规范里也有四层分层。<br>现在web应用都是存储和计算为主，而存储这块东西就太多了，各种相差太大，为了系统性能往往混合应用。如果存储这块有个牛逼的以面向对象思维存储编程，然后性能又好，那么做开发就要简单好多了。","like_count":0},{"had_liked":false,"id":252190,"user_name":"Fupingstar","can_delete":false,"product_type":"c1","uid":1758671,"ip_address":"","ucode":"7C870EEAAD2BB8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/J2H41XDGJSYVZzACFBFqZaozxy2GuCGN5HrPXpb5YlItW0UQabCnWYIfF706SUK7ytHn3k1ibtj6lOytiaiakbs8g/132","comment_is_top":false,"comment_ctime":1602168163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602168163","product_id":100039001,"comment_content":"Java中用枚举代替常量类是一种好的方式吗","like_count":0},{"had_liked":false,"id":247292,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1599651122,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599651122","product_id":100039001,"comment_content":"【要点】<br>1、哪些代码设计看似是面向对象，实际是面向过程的？<br>(1)滥用 getter、setter 方法。暴露不应该暴露的getter和setter方法，违反了面向对象编程的封装特性，相当于将面向对象编程风格退化成了面向过程编程风格。在设计实现类的时候，除非真的需要，否则，尽量不要给属性定义 setter 方法。除此之外，尽管 getter 方法相对 setter 方法要安全些，但是如果返回的是集合容器（比如例子中的 List 容器），也要防范集合内部数据被修改的危险。<br>(2)滥用全局变量和全局方法。常见的就是Constants 类和Utils 类的使用。<br>·Constants 类的设计，可借鉴两种思路。第一种是将 Constants 类拆解为功能更加单一的多个类，比如跟 MySQL 配置相关的常量，我们放到 MysqlConstants 类中；跟 Redis 配置相关的常量，我们放到 RedisConstants 类中。还有一种更好的设计思路，那就是并不单独地设计 Constants 常量类，而是哪个类用到了某个常量，我们就把这个常量定义到这个类中。比如，RedisConfig 类用到了 Redis 配置相关的常量，那我们就直接将这些常量定义在 RedisConfig 中，这样也提高了类设计的内聚性和代码的复用性。<br>·如果确实有必要去定义这样一个 Utils 类，那就大胆地去定义它吧，只要它能为我们写出好的代码贡献力量，我们就可以适度地去使用。设计 Utils 类的时候，最好也能细化一下，针对不同的功能，设计不同的 Utils 类，比如 FileUtils、IOUtils、StringUtils、UrlUtils 等，不要设计一个过于大而全的 Utils 类。<br>(3)定义数据和方法分离的类。这种开发模式叫作基于贫血模型的开发模式，也是我们现在非常常用的一种 Web 项目的开发模式。这种开发模式是彻彻底底的面向过程编程风格的，因为数据和操作是分开定义在 VO&#47;BO&#47;Entity 和 Controler&#47;Service&#47;Repository 中的。而在很多公司的实际项目中，贫血模型可以高效的解决问题，对象仅仅作为传递数据的媒介，不用考虑过多的设计方面，将核心业务逻辑放到service层，用ORM框架一套，就可以解决问题了。<br>2、在面向对象编程中，容易写出面向过程风格的代码的原因：在生活中，你去完成一个任务，你一般都会思考，应该先做什么、后做什么，如何一步一步地顺序执行一系列操作，最后完成整个任务。面向过程编程风格恰恰符合人的这种流程化思维方式。而面向对象编程风格正好相反。它是一种自底向上的思考方式。它不是先去按照执行流程来分解任务，而是将任务翻译成一个一个的小的模块（也就是类），设计类之间的交互，最后按照流程将类组装起来，完成整个任务。这样的思考路径比较适合复杂程序的开发，但并不是特别符合人类的思考习惯。<br>3、面向过程编程及面向过程编程语言的使用：不管使用面向过程还是面向对象哪种风格来写代码，我们最终的目的还是写出易维护、易读、易复用、易扩展的高质量代码。只要我们能避免面向过程编程风格的一些弊端，控制好它的副作用，在掌控范围内为我们所用，我们就大可不用避讳在面向对象编程中写面向过程风格的代码。<br>【思考】<br>浏览器内核的代码就非常好的控制了Constants类和Utils类的使用。这两种类的都是根据模块来的，各个模块有各个模块自己的Constants和Utils类。这两种类会很好的限定在模块内部使用。<br>另外一个思路就是，对于引入的工具包，最好根据业务做一层封装，用到该工具包的之后，统一调用自己的封装层，而不是每个地方都去直接调用工具包的API，这样后续方便工具包的升级或者兼容其他的类似工具包。","like_count":0,"discussions":[{"author":{"id":1740368,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhr1LrBZQTnn5PgyuHUtia6j6tiahZyk44BWeB5LQIqMgTDBdibGKVVopbJWbz83ZWvyVPz9fBl69rw/132","nickname":"Geek_b6e449","note":"","ucode":"8296078ED23637","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289528,"discussion_content":"你这算法没白花钱啊 有环先想到拓扑","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594130376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246492,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1599377744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599377744","product_id":100039001,"comment_content":"突然发现自己对面向对象和面向过程有了更深一层的认识，同时也为自己用面向对象语言写了多年的面向过程代码却不自知感到“羞耻”。不管学什么，只要去学习总能发现自己内心缺失的东西，就像老师的专栏，每篇文章都能有很明显的收获，拜读之后犹如醍醐灌顶，不断提升自我对技术的认知。","like_count":0},{"had_liked":false,"id":245740,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599038038,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599038038","product_id":100039001,"comment_content":"问题1：<br>1、C语言用struct，是否能满足4大特性不清楚<br><br>问题2：<br>1、当再一个类中设计了过多的函数，之后再一个大main中完成工作","like_count":0},{"had_liked":false,"id":242582,"user_name":"飞狼踏月渡惊风","can_delete":false,"product_type":"c1","uid":1531473,"ip_address":"","ucode":"48E64ABDE30464","user_header":"https://static001.geekbang.org/account/avatar/00/17/5e/51/f52b0e17.jpg","comment_is_top":false,"comment_ctime":1597767723,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597767723","product_id":100039001,"comment_content":"关于“Constants 常量类，而是哪个类用到了某个常量，我们就把这个常量定义到这个类中”，那么当其他类也需要这个常量呢","like_count":0,"discussions":[{"author":{"id":1439777,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f8/21/3fa228e6.jpg","nickname":"悟光","note":"","ucode":"E81339EBC4F492","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245927,"discussion_content":"构造函数有可能存在循环依赖，假设A构造依赖B，B的构造依赖A，在递归创建的方法中就会形成环。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587713321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1514305,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","nickname":"xk_","note":"","ucode":"DFE1AC38EA78A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1439777,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f8/21/3fa228e6.jpg","nickname":"悟光","note":"","ucode":"E81339EBC4F492","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":246666,"discussion_content":"A创建需要B，B都还没有没有被创建，那你怎么创建A呢。只有spring配置会出现这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587748958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":245927,"ip_address":""},"score":246666,"extra":""},{"author":{"id":1575571,"avatar":"https://static001.geekbang.org/account/avatar/00/18/0a/93/a189ec16.jpg","nickname":"Eric","note":"","ucode":"7EB511C384BD7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1514305,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","nickname":"xk_","note":"","ucode":"DFE1AC38EA78A7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300596,"discussion_content":"依赖注入又不需要传入实例，为什么不可能循环依赖？你说的是逻辑，“A创建需要B，B都还没有没有被创建，那你怎么创建A呢。”，就是因为ioc有环状检测所以才会知道B还没有创建","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598187675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":246666,"ip_address":""},"score":300596,"extra":""},{"author":{"id":1514305,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","nickname":"xk_","note":"","ucode":"DFE1AC38EA78A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1575571,"avatar":"https://static001.geekbang.org/account/avatar/00/18/0a/93/a189ec16.jpg","nickname":"Eric","note":"","ucode":"7EB511C384BD7B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300733,"discussion_content":"那照你这逻辑，不要检查就不会报错，是吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598250378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300596,"ip_address":""},"score":300733,"extra":""}]}]},{"had_liked":false,"id":241658,"user_name":"阿骨打","can_delete":false,"product_type":"c1","uid":2122539,"ip_address":"","ucode":"35EADA5550162A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/BOEEDquKAT3WLFjFlwcyVvKvoW7hgXHtbtBC4YzOtQoAat7eAtnBDjjWsEY5g4JJEj7jvPuboT8LoSGCrAbcgA/132","comment_is_top":false,"comment_ctime":1597384232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597384232","product_id":100039001,"comment_content":"太牛了","like_count":0},{"had_liked":false,"id":241467,"user_name":"锋子","can_delete":false,"product_type":"c1","uid":1681459,"ip_address":"","ucode":"89FFA85BDB1C99","user_header":"https://static001.geekbang.org/account/avatar/00/19/a8/33/b71635c1.jpg","comment_is_top":false,"comment_ctime":1597303512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597303512","product_id":100039001,"comment_content":" 看完这篇收获很多，但也产生一个迷惑： 到底是面向对象更符合人的思维习惯，还是面向过程更符合？ <br>- OOP 语言更加人性化、更加高级、更加智能，让人跟机器打交道越来越容易。<br>- 但其实，进行面向对象编程的时候，很容易不由自主地就写出面向过程风格的代码，或者说感觉面向过程风格的代码更容易写。这是为什么呢？面向过程编程风格恰恰符合人的这种流程化思维方式","like_count":0},{"had_liked":false,"id":240362,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1596877138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596877138","product_id":100039001,"comment_content":"1 c语言可以使用struct<br>2 除了文中的三个，想不到其他的了","like_count":0},{"had_liked":false,"id":240194,"user_name":"Carisy","can_delete":false,"product_type":"c1","uid":1657429,"ip_address":"","ucode":"67E887967347BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLwTZdUafC5YM7bCASt8icUnoyYfV4hUHulexibDI7B4eaokTxYXHFtoic97DBlCAU9j5Jw4QUuGhyZQ/132","comment_is_top":false,"comment_ctime":1596784693,"is_pvip":false,"replies":[{"id":"89265","content":"并不是都不能加的，必要的时候也可以加getter、setter的","user_name":"作者回复","comment_id":240194,"uid":"1190123","ip_address":"","utype":1,"ctime":1597453600,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1596784693","product_id":100039001,"comment_content":"老师我不是很理解不能加getter&#47;setter 这样可能在面向对象角度来看会好些，但是有很多类似于mybatis dubbo 这种很多都依赖getter&#47;setter 如果没有的话数据要从哪来呢","like_count":0,"discussions":[{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278381,"discussion_content":"不错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591179558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239557,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1596587617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596587617","product_id":100039001,"comment_content":"记住一句不要按顺序思考，而是按模块思考","like_count":0},{"had_liked":false,"id":239436,"user_name":"牛胆大","can_delete":false,"product_type":"c1","uid":1273094,"ip_address":"","ucode":"EF8891FF4FE38A","user_header":"https://static001.geekbang.org/account/avatar/00/13/6d/06/7e0566f9.jpg","comment_is_top":false,"comment_ctime":1596531612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596531612","product_id":100039001,"comment_content":"贫血模型，充血模型，尤记得当年javaeye上的热烈讨论。","like_count":0},{"had_liked":false,"id":238154,"user_name":"owen","can_delete":false,"product_type":"c1","uid":1902116,"ip_address":"","ucode":"0E79DA9080A085","user_header":"https://static001.geekbang.org/account/avatar/00/1d/06/24/c2ee3b16.jpg","comment_is_top":false,"comment_ctime":1596082150,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596082150","product_id":100039001,"comment_content":"public List&lt;ShoppingCartItem&gt; getItems() {    return Collections.unmodifiableList(this.items);  }<br>但对这种引用对象要进行逻辑处理，代码逻辑就会复杂起来，而且页面还不提示语法错误在别人调用时修改时容易出现坑","like_count":0},{"had_liked":false,"id":237997,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1596024147,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596024147","product_id":100039001,"comment_content":"面向过程是&quot;单兵作战&quot; 效率高。但是一个人的力量终归是有效的。面向对象这种&quot;团队作战&quot;的形式应运而生","like_count":0},{"had_liked":false,"id":230079,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1593253060,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1593253060","product_id":100039001,"comment_content":"java语言编程风格框定了必须要以类的形式进行开发。<br>并且语言层面提供了4大特性用以支撑面向对象开发。<br>","like_count":0},{"had_liked":false,"id":228701,"user_name":"见南山","can_delete":false,"product_type":"c1","uid":1118111,"ip_address":"","ucode":"6A8BB82B7573CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/0f/9f/f4b06bd5.jpg","comment_is_top":false,"comment_ctime":1592789823,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592789823","product_id":100039001,"comment_content":"以前每次写的时候，都会搞出来很多Bean对象加上set get，以为面向对象就是构造很多对象出来，原来是还是面向过程啊","like_count":0},{"had_liked":false,"id":228303,"user_name":"大方方","can_delete":false,"product_type":"c1","uid":1354013,"ip_address":"","ucode":"621AD8F1485753","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/6cyOoRd2dROgiblAJkW6RLhUyH1wwU0NNibIIuV930eQ9TiaNT41K61kBSVkvYoDYg7mJtuEoCQY1awBmV0WW6BFg/132","comment_is_top":false,"comment_ctime":1592638363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592638363","product_id":100039001,"comment_content":"我是technical animator 转学untiy3D C#编程的，选这门课程作为提高程序设计的能力途径。之前项目里经常用多态做扩展，算是典型面向对象应用。但是采用的MVC构建在数据方面又类似贫血模型的面向过程风格。现在Unity 官方开始革新的DOTS 技术 ，又开始鼓励大家从面向对象改成面向数据编程，某种程度似乎又回到了面向过程的一些精神。","like_count":0},{"had_liked":false,"id":228160,"user_name":"Abcd","can_delete":false,"product_type":"c1","uid":1796908,"ip_address":"","ucode":"274C7487FDDC21","user_header":"https://static001.geekbang.org/account/avatar/00/1b/6b/2c/b27eefc5.jpg","comment_is_top":false,"comment_ctime":1592571292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592571292","product_id":100039001,"comment_content":"C语言完全可以面向对象，私有的属性和方法可以放进.c源文件中的结构体，c源文件中的结构体继承.h中public的基类，多态就更是不在话下了。虽然很绕，但是写个几次就熟练了","like_count":0},{"had_liked":false,"id":224205,"user_name":"『至爱闫』","can_delete":false,"product_type":"c1","uid":1475423,"ip_address":"","ucode":"2A4F0E0DE6C196","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/5f/50f2fdf2.jpg","comment_is_top":false,"comment_ctime":1591317163,"is_pvip":false,"replies":[{"id":"84004","content":"没说一定不用啊，必要的时候就用呢","user_name":"作者回复","comment_id":224205,"uid":"1190123","ip_address":"","utype":1,"ctime":1592527002,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1591317163","product_id":100039001,"comment_content":"不用setter如何更好的把数据赋值给实例。？比如数据库mybatis不加setter如何给DO赋值呢。？不加setter如何又把值赋值出去呢。？难道推荐使用构造或者builder么。？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497399,"discussion_content":"没说一定不用啊，必要的时候就用呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592527002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":220734,"user_name":"朝小树","can_delete":false,"product_type":"c1","uid":1323875,"ip_address":"","ucode":"18DC282DEF16C8","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/63/2d48822a.jpg","comment_is_top":false,"comment_ctime":1590316306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590316306","product_id":100039001,"comment_content":"lombok插件或者各种生成器会直接生成各种get，set方法，我们要根据情况，开放哪些字段的权限","like_count":0},{"had_liked":false,"id":219267,"user_name":"李达龙","can_delete":false,"product_type":"c1","uid":1450486,"ip_address":"","ucode":"F5702E69D90B7F","user_header":"https://static001.geekbang.org/account/avatar/00/16/21/f6/16bc9c24.jpg","comment_is_top":false,"comment_ctime":1589979977,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589979977","product_id":100039001,"comment_content":"最近工作上实现的一个模块分支语句用的太多了，一方面可读性会变差，不易理解，可扩展性，可维护性都不太好，典型的面向过程风格！用的面向对象编程语言却写了面向过程的代码","like_count":0},{"had_liked":false,"id":217589,"user_name":"郭俊杰","can_delete":false,"product_type":"c1","uid":1082785,"ip_address":"","ucode":"D328E5738A4413","user_header":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","comment_is_top":false,"comment_ctime":1589539372,"is_pvip":false,"replies":[{"id":"86259","content":"py？😊","user_name":"作者回复","comment_id":217589,"uid":"1190123","ip_address":"","utype":1,"ctime":1594388823,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1589539372","product_id":100039001,"comment_content":"老师，入坑py，一起AI吧。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495189,"discussion_content":"py？😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594388823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216399,"user_name":"Mr.S","can_delete":false,"product_type":"c1","uid":1158946,"ip_address":"","ucode":"96DC8BE01D54C2","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/22/559c2fdb.jpg","comment_is_top":false,"comment_ctime":1589252015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589252015","product_id":100039001,"comment_content":"用了一阵子Go写web程序，基于现有的开发模式和框架很容易写出面向过程的代码<br>如： 使用gin框架写controller接口，全是全局方法，model层的一些查询语句，也是全局方法<br>","like_count":0},{"had_liked":false,"id":216224,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1589207162,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589207162","product_id":100039001,"comment_content":"面向对象编程和面向过程编程是两种编程风格，我们时常会在使用面向对象的编程语言时，写出面向过程的风格的代码。<br><br>出现这种现象的技术原因：<br>1：滥用get,set <br>2，是构建大且杂的contents类，util类<br>3，基本贫血模式的编程模型<br>另外非技术的原因是：<br>1，面向过程编程更简单，易上手，而面向对象则需要首先思考如何规划类对象之间关系，属性的封装<br>2，面向过程是一种从下往上是思考模式，符合人们按部就班的思考习惯","like_count":0},{"had_liked":false,"id":215944,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589157662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589157662","product_id":100039001,"comment_content":"面向对象是自底而上的思考过程，先把任务拆分为类或抽象为接口，再设计类之间的调用关系，根据流程组装类。面向对象OOA OOD OOP<br>不符合人类思考问题的习惯，面向过程更符合人类思考问题的习惯，所以导致很多贫血模型。","like_count":0},{"had_liked":false,"id":215932,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589155027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589155027","product_id":100039001,"comment_content":"贫血模型数据和类分离后，强制要求属性都有public set方法，破坏了数据的封装，原来只能在类内部赋值的属性得不到数据保护。go也有这个问题，为了让包外的序列化方法和使用统一的SQL Driver的scan程序可见(set)，必须首字母大写，也破坏了数据的封装。分层开发也破坏的数据的封装，VO&lt;--&gt;BO&lt;--&gt;Entity都必须要求属性是public。","like_count":0},{"had_liked":false,"id":214001,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588614169,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1588614169","product_id":100039001,"comment_content":"原来我一直在写面向过程编码啊","like_count":0},{"had_liked":false,"id":213999,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588614085,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1588614085","product_id":100039001,"comment_content":"除了java直用过kotlin，看来还得学一下c＋＋","like_count":0},{"had_liked":false,"id":211386,"user_name":"Geek_d5c720","can_delete":false,"product_type":"c1","uid":1960161,"ip_address":"","ucode":"259FA647B32456","user_header":"","comment_is_top":false,"comment_ctime":1587956302,"is_pvip":false,"replies":[{"id":"78754","content":"后面会讲到的 你往后看看","user_name":"作者回复","comment_id":211386,"uid":"1190123","ip_address":"","utype":1,"ctime":1588042140,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1587956302","product_id":100039001,"comment_content":"争老师，现在写项目感觉都是把需求分解成了一个一个的步骤，很自然的就想到定义一个一个对象，对象里面有这些步骤对应的方法，然后就拿对象去拼接这些步骤。我想知道有没有一个简单易懂的原则，让我面对这些需求不再是想着一步一步的操作，而是一个一个对象的关系呢？","like_count":0,"discussions":[{"author":{"id":1798951,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/73/27/7b93f235.jpg","nickname":"哈哈哈哈","note":"","ucode":"103F14259B4732","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580000,"discussion_content":"swifter是啥？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657795206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210959,"user_name":"KID","can_delete":false,"product_type":"c1","uid":1867938,"ip_address":"","ucode":"EE80B7CA7CC2A2","user_header":"https://static001.geekbang.org/account/avatar/00/1c/80/a2/96dcd1fa.jpg","comment_is_top":false,"comment_ctime":1587870440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587870440","product_id":100039001,"comment_content":"虽然用着c#，但是也经常会写成面向过程的代码，特别是view的部分","like_count":0},{"had_liked":false,"id":210613,"user_name":"张张先生","can_delete":false,"product_type":"c1","uid":1582951,"ip_address":"","ucode":"91B0E84B47AF05","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqrSGol9ss3nzh6Hqj2BYxBTlYbhSe72Og6Vx5CSb5iboibL9xZdWdYOpZzmN2ibj9EpboNDdRBSXSZw/132","comment_is_top":false,"comment_ctime":1587795840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587795840","product_id":100039001,"comment_content":"对于mvc模型一直隐隐觉得有些问题，但是不知道到底哪里有问题，学习了本节内容后恍然大悟","like_count":0},{"had_liked":false,"id":208260,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1587309636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587309636","product_id":100039001,"comment_content":"贫血模型 我认为主要还是应为开发中 大多是先上线 然后才有业务变更。简约的设计有利于业务开发和更新，活下来才有重构的机会","like_count":0},{"had_liked":false,"id":208144,"user_name":"Geek__93441785f6a2","can_delete":false,"product_type":"c1","uid":1450033,"ip_address":"","ucode":"03F5A9C37FF728","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLOCkhE6EF8dpnug21uHof7bu6YnM2gwEMDtdTtCPmRibKx4CUiass25UfMSwib8zJ7lwv8beYYXjLCA/132","comment_is_top":false,"comment_ctime":1587283689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587283689","product_id":100039001,"comment_content":"之前也订阅了您的数据结构与算法之美，您这两个专栏中的文章真的解答了许多我之前没有搞明白的或者理解不深的问题","like_count":0},{"had_liked":false,"id":205128,"user_name":"travel","can_delete":false,"product_type":"c1","uid":1947327,"ip_address":"","ucode":"4F32EA47884FFD","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq3jEX89jTh4BveV7bSgGHkYTt8fmB1L23Zj8LyWSa3fP1B8OvMzXCTaibGfnPXPYDc9U8gxkzlRoA/132","comment_is_top":false,"comment_ctime":1586535382,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586535382","product_id":100039001,"comment_content":"贫血模型的流行跟spring框架的广泛应用分不开","like_count":0},{"had_liked":false,"id":203499,"user_name":"铁血柔情","can_delete":false,"product_type":"c1","uid":1124220,"ip_address":"","ucode":"F09CACF06B8D05","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/7c/463d4342.jpg","comment_is_top":false,"comment_ctime":1586222301,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1586222301","product_id":100039001,"comment_content":"其实vue.js也是一种面向对象编程的语言，先定义对象，还有对象属性实现一系列的功能。在工作中遇到的就是一个service的实现类中写了不是当前业务的功能，这个类有上千行的代码，跟当前业务相关的只有一百行。","like_count":0,"discussions":[{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278377,"discussion_content":"判断栈的深度比较低效吧！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591179145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":202874,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1586078487,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586078487","product_id":100039001,"comment_content":"只用面向对象编程的函数些业务逻辑，没有去抽象类","like_count":0},{"had_liked":false,"id":201429,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1585788120,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585788120","product_id":100039001,"comment_content":"我有种感觉这么多年，一直用面向对象编程语言写面向过程的代码，这么多年都白过了","like_count":0},{"had_liked":false,"id":201422,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1585786911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585786911","product_id":100039001,"comment_content":"因为稍微有点流程搞了不下于三个的if else 的语句，我觉得就是面向过程编程","like_count":0},{"had_liked":false,"id":197876,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585401679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585401679","product_id":100039001,"comment_content":"我之前就是set get方法来一套，还有util工具类，还有 mvc模型，看来我只停留在老师所说的层面上了，我思想有待提高<br>","like_count":0},{"had_liked":false,"id":197203,"user_name":"桂冠远航","can_delete":false,"product_type":"c1","uid":1155463,"ip_address":"","ucode":"5959E1A1DAA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/87/259ab5a3.jpg","comment_is_top":false,"comment_ctime":1585363202,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585363202","product_id":100039001,"comment_content":"DDD。","like_count":0},{"had_liked":false,"id":196377,"user_name":"鸡蛋石头","can_delete":false,"product_type":"c1","uid":1229450,"ip_address":"","ucode":"61801769E485C8","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/8a/aed13671.jpg","comment_is_top":false,"comment_ctime":1585277019,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585277019","product_id":100039001,"comment_content":"按模块或类型设计utils类","like_count":0},{"had_liked":false,"id":196284,"user_name":"猎手","can_delete":false,"product_type":"c1","uid":1802509,"ip_address":"","ucode":"438C14B0045387","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJYQ2t5vVmVJxT0icdu7fhWXb9Ln7IM9PgOMnFyzrRZELBk7Cv79kBEqaCJDzg4evEicT7MsLx9BKYg/132","comment_is_top":false,"comment_ctime":1585269726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585269726","product_id":100039001,"comment_content":"不应该局限于面向对象或者面向过程，从实际出发","like_count":0},{"had_liked":false,"id":195584,"user_name":"改名不换人","can_delete":false,"product_type":"c1","uid":1118242,"ip_address":"","ucode":"7E25577829FA0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/22/910f705c.jpg","comment_is_top":false,"comment_ctime":1585199627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585199627","product_id":100039001,"comment_content":"在写MVC后台的时候考虑过这到底是不是面向对象，后来也没有深入研究，这次看来能弄懂了，继续学习！","like_count":0,"discussions":[{"author":{"id":1134574,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/ee/bd08cfab.jpg","nickname":"一魄","note":"","ucode":"71541125D4AA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412059,"discussion_content":"写了个寂寞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636073039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":191409,"user_name":"不学不行啊","can_delete":false,"product_type":"c1","uid":1335474,"ip_address":"","ucode":"69368165141C2D","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/b2/ccebcb71.jpg","comment_is_top":false,"comment_ctime":1584771175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584771175","product_id":100039001,"comment_content":"在设计实现类的时候，除非真的需要，否则尽量不要给属性定义 setter 方法。除此之外，尽管 getter 方法相对 setter 方法要安全些，但是如果返回的是集合容器，那也要防范集合内部数据被修改的风险。","like_count":0},{"had_liked":false,"id":191151,"user_name":"Marvichov","can_delete":false,"product_type":"c1","uid":1111835,"ip_address":"","ucode":"7482099415C41C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/1b/db7a0edc.jpg","comment_is_top":false,"comment_ctime":1584750488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584750488","product_id":100039001,"comment_content":"https:&#47;&#47;miro.medium.com&#47;max&#47;3000&#47;0*kU-C5Y7F2UGEYGsV.jpg 发这个图片对比了贫血和充血模型rich domain model。原文链接 https:&#47;&#47;blog.pragmatists.com&#47;domain-driven-design-vs-anemic-model-how-do-they-differ-ffdee9371a86","like_count":0},{"had_liked":false,"id":190237,"user_name":"索旭东","can_delete":false,"product_type":"c1","uid":1139039,"ip_address":"","ucode":"BFD07BCD8C8CAE","user_header":"https://static001.geekbang.org/account/avatar/00/11/61/5f/b279daaf.jpg","comment_is_top":false,"comment_ctime":1584620503,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584620503","product_id":100039001,"comment_content":"经常以为是面向对象，其实经常是用面向过程","like_count":0},{"had_liked":false,"id":189661,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1584539335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584539335","product_id":100039001,"comment_content":"第一次知道Collections.unmodifiableList()这个方法，受益匪浅。","like_count":0},{"had_liked":false,"id":184554,"user_name":"路人甲","can_delete":false,"product_type":"c1","uid":1480119,"ip_address":"","ucode":"B720984454AFAF","user_header":"https://static001.geekbang.org/account/avatar/00/16/95/b7/15e157ec.jpg","comment_is_top":false,"comment_ctime":1583336209,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583336209","product_id":100039001,"comment_content":"原来我一直 写了这么多的面向过程的代码。 ","like_count":0},{"had_liked":false,"id":182008,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1582691341,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582691341","product_id":100039001,"comment_content":"关于滥用 getter、setter 方法，这让我想起了 Spring 中 BeanFactory 类的设计。Spring BeanFactory 只允许查找，不允许修改数据，它提供了一个子类 ConfigurableListableBeanFactory 类则提供了大量的配置方法，如果 setBeanExpressionResolver 等。Spring 中一般提供 BeanFactory 给用户使用，ConfigurableListableBeanFactory 则提供给开发者使用，这样设计避免了滥用 getter、setter 方法，同时也符合单一职能原则。","like_count":0},{"had_liked":false,"id":181648,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1582603470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582603470","product_id":100039001,"comment_content":"原来我一直是手握屠龙宝刀砍柴用。","like_count":0},{"had_liked":false,"id":181403,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1582536036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582536036","product_id":100039001,"comment_content":"想起了当年刚从c转java的时候，写的代码被review，leader说一眼看过去就是面向过程的代码...","like_count":0},{"had_liked":false,"id":181043,"user_name":"Scarf","can_delete":false,"product_type":"c1","uid":1021792,"ip_address":"","ucode":"3EDD87BD6354D5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/60/873cd557.jpg","comment_is_top":false,"comment_ctime":1582465559,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1582465559","product_id":100039001,"comment_content":"争哥，有个问题，你说‘而是哪个类用到了某个常量，我们就把这个常量定义到这个类中’，那如果某个常量被多个类使用，那在每个使用这个常量的类里都增加一个常量的定义？这样做是不是增加了代码量？？","like_count":0,"discussions":[{"author":{"id":1149022,"avatar":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","nickname":"scmath","note":"","ucode":"641023BB246C29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383570,"discussion_content":"类内部共享常量、包内部共享的常量、项目内部共享的常量，这只是类内部共享常量的做法。包内共享常量和项目共享常量也最好不要都放一起，根据功能拆分到多个类中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626162677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180142,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1582197376,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582197376","product_id":100039001,"comment_content":"<br>其实我觉得之所以用面向对象的编程语言写出面向过程的代码主要是对OOP理解的不到位，正如文章所说面向过程编程如何人脑的思考方式，也就是第一部干什么第二步干什么自然而然就写成了面向过程的代码，前面提到两者的区别组织方式的不同，其实写代码的时候多考虑一点，我可以怎么分“块”，每块的职责是什么，每块有哪些内容构成（属性和方法，只要职责明确了这两点也就清楚了）块之间是怎么交互的，这些问题思考清楚才算得上面向对象编程。你想想啊，小到工具类的命名、类的命名，大到现在的若干个微服务，不都是一个个“块”么，所以啊，还是想想清楚到底什么才是面向对象编程以及面向对象编程的四大特性才能在实际的开发中运用自如。扩展一下，为什么很多公司那么注重编程规范其中一个原因是代码的易读性会更好，易读性怎么体现不就落实到这一个个“块”中么。比如大一统的Constants类为什么不好，最大的问题就是职责不清晰，你让你一个保安去干财务你觉得合适么，你知道他是保安还是财务呢？！","like_count":0},{"had_liked":false,"id":179562,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582031960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582031960","product_id":100039001,"comment_content":"在实际开发过程中,所有的Entity都是使用的@Data注解去生成的getter setter方法,完全没有封装性","like_count":0},{"had_liked":false,"id":172626,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1579238141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579238141","product_id":100039001,"comment_content":"说实话面向对象（以及DDD）的经典书籍看了一堆，但是没写过几行真正面向对象的代码；上面提到的内容有种灵魂拷问的感觉，也隐约找到了自己一直以来的瓶颈所在","like_count":0},{"had_liked":false,"id":172422,"user_name":"Wings","can_delete":false,"product_type":"c1","uid":1215464,"ip_address":"","ucode":"047167807048EC","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/e8/7f09a744.jpg","comment_is_top":false,"comment_ctime":1579174758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579174758","product_id":100039001,"comment_content":"没看懂什么叫贫血和充血模型……","like_count":0},{"had_liked":false,"id":172251,"user_name":"淘海鱼","can_delete":false,"product_type":"c1","uid":1028099,"ip_address":"","ucode":"A43CC4384B70F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b0/03/f381bbfc.jpg","comment_is_top":false,"comment_ctime":1579140063,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579140063","product_id":100039001,"comment_content":"1. 滥用getter&#47;setter方法这一节，本质讲的是对象的自洽性与权限的控制。<br>2. Util类中采用面向过程方法是最简洁的最合理的设计，如无必要，勿增实体。<br>3. 贫血模式。框架的原因所致。而框架为何要如此设计？我理解这是对业务开发友好。","like_count":0},{"had_liked":false,"id":167352,"user_name":"依韵","can_delete":false,"product_type":"c1","uid":1153762,"ip_address":"","ucode":"02F5BED8BE0F6E","user_header":"https://static001.geekbang.org/account/avatar/00/11/9a/e2/271e0caf.jpg","comment_is_top":false,"comment_ctime":1577773953,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1577773953","product_id":100039001,"comment_content":"滥用getter setter的情况确实挺常见，不过这个问题相对来说是比较容易发现和修正的。 购物车那个例子中，数据需要外部访问的情况，作为一个前端工程师，常见的处理思路就是将数据深拷贝，供外部使用，即时恶意修改也不会对原来的逻辑造成影响。不过由于基本没写过服务端的代码，不确定此思路是否适用于服务端，会不会内层占用的问题。<br><br>面向对象的语言及代码组织形式，却完全写的是面向过程的情况，值得反思。","like_count":0},{"had_liked":false,"id":167205,"user_name":"桂城老托尼","can_delete":false,"product_type":"c1","uid":1306032,"ip_address":"","ucode":"139E4B8EE88B79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","comment_is_top":false,"comment_ctime":1577716042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577716042","product_id":100039001,"comment_content":"见了太多facade  bizshare coreservice repository client ,感觉都是在解决过程的问题，真正的ddd实践很少见，大部分领域都和表结构一一对应。 ","like_count":0},{"had_liked":false,"id":166870,"user_name":"公号-彤哥读源码","can_delete":false,"product_type":"c1","uid":1239881,"ip_address":"","ucode":"C0D16E1BA12DA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/eb/49/bd914b5f.jpg","comment_is_top":false,"comment_ctime":1577619386,"is_pvip":false,"replies":[{"id":"64823","content":"后面有讲到的","user_name":"作者回复","comment_id":166870,"uid":"1190123","ip_address":"","utype":1,"ctime":1577666020,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1577619386","product_id":100039001,"comment_content":"之前一直在想我们每天都在用MVC，几乎所有逻辑都在service里面，面向对象到底去哪了，希望争哥后面能解惑。","like_count":0},{"had_liked":false,"id":166475,"user_name":"Joewing","can_delete":false,"product_type":"c1","uid":1355554,"ip_address":"","ucode":"1417543A3B53D2","user_header":"","comment_is_top":false,"comment_ctime":1577456430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577456430","product_id":100039001,"comment_content":"这一章节VO BO 让我想到了DDD","like_count":0},{"had_liked":false,"id":166229,"user_name":"chief","can_delete":false,"product_type":"c1","uid":1036072,"ip_address":"","ucode":"DF9EDDDA883A41","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/28/fe15914b.jpg","comment_is_top":false,"comment_ctime":1577418985,"is_pvip":false,"replies":[{"id":"64832","content":"这种情况就要脱邪恶也没办法 后面实战篇会讲到","user_name":"作者回复","comment_id":166229,"uid":"1190123","ip_address":"","utype":1,"ctime":1577666588,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1577418985","product_id":100039001,"comment_content":"好多框架对对象序列化都是使用get set方法实现的。因为使用了这些框架，不得已创建 get set方法，这种情况怎么办？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500504,"discussion_content":"也可以~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593909599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166050,"user_name":"山下小妖","can_delete":false,"product_type":"c1","uid":1270902,"ip_address":"","ucode":"57FEBC09216A36","user_header":"https://static001.geekbang.org/account/avatar/00/13/64/76/05049c2f.jpg","comment_is_top":false,"comment_ctime":1577371468,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577371468","product_id":100039001,"comment_content":"将整体流程切分，然后自行创建多个类来包装这些代码，没有考虑类是什么，类有哪些属性和行为。这真的是很头疼的一件事，看似有了很多起了名字的类，非但没有帮助理解业务，反而造成了理解障碍。","like_count":0,"discussions":[{"author":{"id":1063307,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8b/af74591f.jpg","nickname":"chun1123","note":"","ucode":"413C3A8722699F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306883,"discussion_content":"抽象的理论讲多了，肯定会有人说talk is cheap，show me the code","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600410923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278380,"discussion_content":"作者只要是用JAVA的；因为是自己的熟悉的东西去解释别的，比较好吧。\n难道用不懂得去解释别的吗？\n更何况作者专栏的开始也讲了，主要用java语言来实现代码的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591179412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":165933,"user_name":"小飞","can_delete":false,"product_type":"c1","uid":1050983,"ip_address":"","ucode":"CFFF2E7768EF9A","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/67/7de7988a.jpg","comment_is_top":false,"comment_ctime":1577346602,"is_pvip":false,"replies":[{"id":"64850","content":"并没有说jdk是面向过程的啊 我是说jdk中也存在面向过程的设计","user_name":"作者回复","comment_id":165933,"uid":"1190123","ip_address":"","utype":1,"ctime":1577668528,"user_name_real":"王争"}],"discussion_count":1,"race_medal":1,"score":"1577346602","product_id":100039001,"comment_content":"想请问老师，为什么说 JDK 的设计是面向过程的呢？为什么我反倒认为 JDK 里面的设计是面向对象的设计呢？JDK 中，通过类来划分，类中提供了各自不同的方法来实现功能，对于调用者来说直接调用方法实现功能，并不需要考虑实现细节。","like_count":0},{"had_liked":false,"id":165426,"user_name":"迷羊","can_delete":false,"product_type":"c1","uid":1286251,"ip_address":"","ucode":"85AF8CED3436C8","user_header":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","comment_is_top":false,"comment_ctime":1577236916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577236916","product_id":100039001,"comment_content":"一、哪些代码设计看似是面向对象，实际是面向过程的？<br>1.滥用getter、setter方法<br>设计实现类的时候，除非真的需要，否则不要给属性定义setter方法。如果getter方法返回的是集合容器，也要防范集合内部数据被修改的风险<br>2.Constants类、Utils类的设计问题<br>这两种类尽量做到职责单一、定义一些细化的小类，比如RedisConstants、FileUtils，不要定义一个大而全的Constants类、Utils类。将这些类的属性和方法划分归并到其它业务类中是最好不过的了，能提高类的内聚性和代码的可复用性<br>3.基于贫血模型的开发模式<br>因为数据和操作是分开定义在VO&#47;BO&#47;Entity和Controller&#47;Service&#47;Repository中的<br><br>二、在面向对象编程中，为什么容易写出面向过程风格的代码？<br>1.因为面向过程编程风格符合人的流程化思维方式。而面向对象编程风格是一种自底向上的思考方式，线将任务翻译成一个一个的小的模块（也就是类），设计类之间的交互，最后按流程组装，完成整个任务。<br>2.除此之外，面向对象编程比面向过程难一些，类的设计需要技巧和一定设计经验<br><br>三、面向过程编程及面向过程编程语言就真的无用武之地了吗？<br>1.如果开发微小程序或者一个数据处理相关的代码，以算法为主，数据为辅，面向过程编程风格更适合一些。<br>2.面向过程编程是面向对象编程的基础，类中每个方法的实现逻辑就是面向过程风格的代码<br><br>四、结论<br>不管是哪种风格的编程方式，最终的目的还是写出易维护、易读、易复用、易扩展的高质量代码。控制好面向过程编程风格的弊端和副作用，在掌控范围呢为我们所用，就不用避讳在面向对象编程中写面向过程风格的代码。<br>去其糟粕，取其精华。","like_count":0},{"had_liked":false,"id":164710,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1577079456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577079456","product_id":100039001,"comment_content":"平常就没有注意constants类, 全局变量都放到一个类中进行管理了.","like_count":0},{"had_liked":false,"id":164569,"user_name":"看，有只猪","can_delete":false,"product_type":"c1","uid":1137727,"ip_address":"","ucode":"F9BB302BC71CE8","user_header":"https://static001.geekbang.org/account/avatar/00/11/5c/3f/34e5c750.jpg","comment_is_top":false,"comment_ctime":1577028652,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577028652","product_id":100039001,"comment_content":"文章疑问：针对滥用getter和setter方法小节中提出的返回容器类型数据时，如何防止调用者通过修改容器中的数据，影响到内部数据？这个问题可以通过深拷贝解决。","like_count":0},{"had_liked":false,"id":163068,"user_name":"Screenly","can_delete":false,"product_type":"c1","uid":1220387,"ip_address":"","ucode":"AF1FEDD17F5DC9","user_header":"https://static001.geekbang.org/account/avatar/00/12/9f/23/1b41af11.jpg","comment_is_top":false,"comment_ctime":1576652077,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576652077","product_id":100039001,"comment_content":"所有致命点全中，而且天天在写。。。搬砖的气氛越来越浓了，期待后续的课程","like_count":0},{"had_liked":false,"id":161408,"user_name":"|･ω･｀)","can_delete":false,"product_type":"c1","uid":1636123,"ip_address":"","ucode":"34E1DF62058D80","user_header":"https://static001.geekbang.org/account/avatar/00/18/f7/1b/8036958c.jpg","comment_is_top":false,"comment_ctime":1576202075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576202075","product_id":100039001,"comment_content":"开发过程中，往往会纠结于是不是要给一个属性添加set方法，听了这节课之后明白了，如果给每个属性都添加set方法，会破坏类的数据，外部可以随意更改，很不安全","like_count":0},{"had_liked":false,"id":159800,"user_name":"爱水人家","can_delete":false,"product_type":"c1","uid":1730305,"ip_address":"","ucode":"0C94C6ACBC9CEB","user_header":"https://static001.geekbang.org/account/avatar/00/1a/67/01/44626cb9.jpg","comment_is_top":false,"comment_ctime":1575793677,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575793677","product_id":100039001,"comment_content":"3类典型代码中，1类我出现过这个问题，不过后来我在看开源源码过程中改正过来了。2类问题有过类似经历，今天学习后遇到类似问题我有了参考和思路，这是收获啊。3类暂时还没遇到，不过先记下了","like_count":0},{"had_liked":false,"id":159045,"user_name":"火力全开","can_delete":false,"product_type":"c1","uid":1412220,"ip_address":"","ucode":"8CE1733A2F618C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","comment_is_top":false,"comment_ctime":1575523830,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575523830","product_id":100039001,"comment_content":"这一篇感觉没学到什么东西，关于常量与工具类的问题是经常碰到感觉解决方案不是很好的地方，结果听完结论跟我正在使用的方式基本一致，只不过常量我是使用接口定义，get set 方法因为基本都是团队内开发，使用其它人的代码都会先交流沟通好，每个属性单独配置开发成本很高。最后贫血模式跟面向对象模式老师最好是分别举两个优秀开源项目的例子来分析。小项目还是面向过程的开发成本更低更有效","like_count":0},{"had_liked":false,"id":157687,"user_name":"hongyu","can_delete":false,"product_type":"c1","uid":1035593,"ip_address":"","ucode":"62CF7E3D433AC1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/49/4f490295.jpg","comment_is_top":false,"comment_ctime":1575247269,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575247269","product_id":100039001,"comment_content":"面向对象就是操作对象  如果根据过程修改对象中的数据就是面向过程","like_count":0},{"had_liked":false,"id":157259,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1241567,"ip_address":"","ucode":"C42E11098E1B38","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","comment_is_top":false,"comment_ctime":1575099641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575099641","product_id":100039001,"comment_content":"为什么说静态方法将方法与数据分离？","like_count":0},{"had_liked":false,"id":156743,"user_name":"程浩","can_delete":false,"product_type":"c1","uid":1660225,"ip_address":"","ucode":"B178C4BF5965D3","user_header":"https://static001.geekbang.org/account/avatar/00/19/55/41/f4c22a44.jpg","comment_is_top":false,"comment_ctime":1574946106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574946106","product_id":100039001,"comment_content":"总结：<br>1、类的setter、getter方法之前确实没有太注意，默认全部暴露出去了，这样好像跟配置public属性没什么区别。另外也确实没想到集合类型属性的setter、getter怎么写，通过这篇文章学习了。不过，项目中都使用了Spring MVC，当VO作为Controller参数时好像是必须要有setter、getter的。总之，以后写代码还是注意一下吧。<br>2、Contants类和Utils类之前就有考虑过该怎么写。Utils类确实是不可避免的，很多不耦合数据的方法都放到了Utils类中。但是Contants类确很难确定该怎么写。有时候一个常量整个项目都要使用，有的是整个模块使用，有的只有单个类使用。记得阿里的编程规范里有写，从小范围到大范围以此设置Contants类的作用域。跟文章中的说法是相符的。<br>3、说实话，写了这么多项目代码，用了这么久的JAVA，没想到啊，没想到，一直在写的是面向过程的代码。通过这篇文章我知道了，我可能本来就不会写面向对象代码😭。","like_count":0},{"had_liked":false,"id":156266,"user_name":"CHS","can_delete":false,"product_type":"c1","uid":1240227,"ip_address":"","ucode":"3D8B2DABC0A1D6","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/a3/28763399.jpg","comment_is_top":false,"comment_ctime":1574845719,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574845719","product_id":100039001,"comment_content":"向kotlin，groovy着两种语言，写一个实体类之后，自动就会有getter和setter的方法，这种怎么理解呢？","like_count":0},{"had_liked":false,"id":156013,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1428828,"ip_address":"","ucode":"1AEBD6F79941B7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","comment_is_top":false,"comment_ctime":1574812770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574812770","product_id":100039001,"comment_content":"1 思考题第二题: 面向对象封装中将所有属性和方法都用public修饰，对外开放访问，破坏封装特性，转变为面向过程风格形式。<br><br>2 文章中要保证集合中的类不被修改，可将类设计为不可变类，每次修改产生新的对象原对象保持不变。","like_count":0},{"had_liked":false,"id":155821,"user_name":"拒绝","can_delete":false,"product_type":"c1","uid":1335155,"ip_address":"","ucode":"CB0264C4D3FE17","user_header":"https://static001.geekbang.org/account/avatar/00/14/5f/73/bb3dc468.jpg","comment_is_top":false,"comment_ctime":1574761418,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574761418","product_id":100039001,"comment_content":"争哥，看了这边文章有些矛盾，不能滥用getter，setter方法，那当属性要赋值时该怎么做。像类序列化成JSON，不提供get set方法都无法序列化和反序列化。感觉自己用面向对象的编程语言写的最多的反而是面向过程的代码","like_count":0,"discussions":[{"author":{"id":1182937,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0c/d9/74d6b9d6.jpg","nickname":"笑豆","note":"","ucode":"8E96DB94BFDE83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70449,"discussion_content":"不能滥用，并不是不能用，需要赋值当然就可以添加，而且核心思想感觉是可以封装的就不要暴露出来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575358087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155773,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1574753854,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574753854","product_id":100039001,"comment_content":"开发中不知道写了多少其他面向过程的代码，虽然最近一直在重构，但是自己的设计出发点还是面向过程的，希望学习完这门课之后能够在未来的重构中设计并写出更还看的代码","like_count":0},{"had_liked":false,"id":155636,"user_name":"greg","can_delete":false,"product_type":"c1","uid":1189197,"ip_address":"","ucode":"BEE952C7ED2C84","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/0o2FEeJiav8lK9Y49JUOBretDypyHic2FL9dSZYnweBPZ5ibm3vgfm3q7kgXmQEOGOLJFgPEcMweVFj5QTrt4Vb4g/132","comment_is_top":false,"comment_ctime":1574731144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574731144","product_id":100039001,"comment_content":"各种业务Manager 都是面向过程的写法吧。","like_count":0},{"had_liked":false,"id":155635,"user_name":"greg","can_delete":false,"product_type":"c1","uid":1189197,"ip_address":"","ucode":"BEE952C7ED2C84","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/0o2FEeJiav8lK9Y49JUOBretDypyHic2FL9dSZYnweBPZ5ibm3vgfm3q7kgXmQEOGOLJFgPEcMweVFj5QTrt4Vb4g/132","comment_is_top":false,"comment_ctime":1574731040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574731040","product_id":100039001,"comment_content":"期待Collections.unmodifiableList()存在的，可以通过修改对象的属性，来打破封装性，这个问题的解决方案。 ","like_count":0},{"had_liked":false,"id":155467,"user_name":"昵称不重要","can_delete":false,"product_type":"c1","uid":1156872,"ip_address":"","ucode":"50F0E9DC56AE3B","user_header":"https://static001.geekbang.org/account/avatar/00/11/a7/08/802cc83f.jpg","comment_is_top":false,"comment_ctime":1574691164,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574691164","product_id":100039001,"comment_content":"貌似目前写的基本都是贫血模型的代码😂","like_count":0},{"had_liked":false,"id":155227,"user_name":"星空123","can_delete":false,"product_type":"c1","uid":1596920,"ip_address":"","ucode":"E998A7C585671B","user_header":"https://static001.geekbang.org/account/avatar/00/18/5d/f8/7de2c1cc.jpg","comment_is_top":false,"comment_ctime":1574668336,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574668336","product_id":100039001,"comment_content":"这个课确实买的贼值，半路出家的程序员 。还不想被淘汰，来不断学习提高自己的竞争力","like_count":0},{"had_liked":false,"id":155130,"user_name":"念去去·云","can_delete":false,"product_type":"c1","uid":1419980,"ip_address":"","ucode":"F185F5A4D963C6","user_header":"https://static001.geekbang.org/account/avatar/00/15/aa/cc/7285dd0a.jpg","comment_is_top":false,"comment_ctime":1574649732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574649732","product_id":100039001,"comment_content":"想了一下，自己写业务相关的代码时，object基本都是get、set。功能都是由service bean实现。做比较基础的服务时，会用一些对象承载数据的封装和权限控制。业务服务基本都是按面相过程来做的，通过功能分层，使业务逻辑更清晰，易维护。基础服务呢，用于解决业务服务中的公共能力、业务抽象问题，面相服务提供能力，结构会更灵活，面相对象编写会带来 易维护等好处吧。跟着老师的专栏，补补我的理论知识。","like_count":0,"discussions":[{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278384,"discussion_content":"前提是怎么转换一个环。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591179711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154976,"user_name":"大强","can_delete":false,"product_type":"c1","uid":1737397,"ip_address":"","ucode":"D5C64C5A01B25D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/82/b5/a6049a26.jpg","comment_is_top":false,"comment_ctime":1574608430,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574608430","product_id":100039001,"comment_content":"一个函数几百行上千行😂","like_count":0},{"had_liked":false,"id":154972,"user_name":"OlafOO","can_delete":false,"product_type":"c1","uid":1019254,"ip_address":"","ucode":"105F8B194ED37B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/76/994a9929.jpg","comment_is_top":false,"comment_ctime":1574607867,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574607867","product_id":100039001,"comment_content":"每一层都定义Object的话一次请求会产生很多相似对象的吧，要是对内存敏感不适合这么操作","like_count":0},{"had_liked":false,"id":154963,"user_name":"树先生","can_delete":false,"product_type":"c1","uid":1141707,"ip_address":"","ucode":"A2740680E77AEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/6b/cb/5d7fa669.jpg","comment_is_top":false,"comment_ctime":1574605714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574605714","product_id":100039001,"comment_content":"我就是老师说的那种用Lombok的人，有时候就为了完成功能而开发，根本没有去考虑这样写会不会有危险的情况产生","like_count":0},{"had_liked":false,"id":154653,"user_name":"掌勺的小哥哥","can_delete":false,"product_type":"c1","uid":1738458,"ip_address":"","ucode":"7D5595B06A360F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/da/28f915be.jpg","comment_is_top":false,"comment_ctime":1574500897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574500897","product_id":100039001,"comment_content":"我现在写的实体类继承Serializable 直接都是 public 因为开发快（该怎么办...）","like_count":0},{"had_liked":false,"id":154652,"user_name":"PENG","can_delete":false,"product_type":"c1","uid":1239106,"ip_address":"","ucode":"28615BA561202D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/42/6061aefa.jpg","comment_is_top":false,"comment_ctime":1574500842,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574500842","product_id":100039001,"comment_content":"在getter和setter，以及constants和utils类上的使用上，有了更深的理解。在以后写代码的时候，一定要多加考虑了。","like_count":0},{"had_liked":false,"id":154309,"user_name":"阿狸爱JAVA","can_delete":false,"product_type":"c1","uid":1033566,"ip_address":"","ucode":"597971781B1500","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/5e/24cc5a72.jpg","comment_is_top":false,"comment_ctime":1574407253,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574407253","product_id":100039001,"comment_content":"不明白这样有什么问题，虽然把cart.getItems()这个清空了，但是他清空的只是对象里的数据，只要不做数据库的更新，也是影响不到真实的数据的<br>ShoppingCart cart = new ShoppCart();<br>...<br>cart.getItems().clear(); &#47;&#47; 清空购物车","like_count":0,"discussions":[{"author":{"id":2222614,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/1fXYkS0UlZUQQtzUpG2TZzVhVZHarfpWT5wjO7iajw959zysQks1vLFM2uQsKnYG3uQAhzenH9LP86goiciaCDNibQ/132","nickname":"Xingyi_Xie","note":"","ucode":"D1849DB8BFB1B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406832,"discussion_content":"购物车里的商品清空了，但是购物车 ShoppingCart 类的商品数量 itemsCount、商品总金额 totalPrice 属性的值却没有清零，这就BUG了。所以不允许外部代码直接修改某个内部属性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634832450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154307,"user_name":"真是艹0","can_delete":false,"product_type":"c1","uid":1234043,"ip_address":"","ucode":"0A082CE0D79C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/7b/74e59208.jpg","comment_is_top":false,"comment_ctime":1574407186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574407186","product_id":100039001,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":154204,"user_name":"那就这样吧","can_delete":false,"product_type":"c1","uid":1327343,"ip_address":"","ucode":"A1315C5EAF2917","user_header":"https://static001.geekbang.org/account/avatar/00/14/40/ef/52bbadb9.jpg","comment_is_top":false,"comment_ctime":1574390647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574390647","product_id":100039001,"comment_content":"今天的内容，感觉在项目中还是比较常见的。<br>比如Utils类，我们还是分的比较细的，StringUtil.JsonUtil.PacketUtil.FileUtil，都会区分的<br>get set方法也是，之前我自己也就直接生成，不过现在还是会考虑下，有些属性，不需要暴露的还是会规避这两个方法。<br>对于MVC模式，数据和操作分离的面向过程，在游戏开发中也会有分层操作的，但确实这样对于开发商来说，很容易上手和理解，业务层做相应操作就好，完成后放到数据层去持久化就好。","like_count":0},{"had_liked":false,"id":154105,"user_name":"曹晶","can_delete":false,"product_type":"c1","uid":1003884,"ip_address":"","ucode":"C15CF8030DEED1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/6c/26890599.jpg","comment_is_top":false,"comment_ctime":1574382038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574382038","product_id":100039001,"comment_content":"老师，我有个疑问，对于获取服务器配置的场景，配置项的Key值这种公共常量类，放在项目的什么层次比较好呢？如果放在底层，业务直接引用，每次修改带来的编译时间可能会增加；如果每个配置项单独用接口提供，那这个接口类又会有很多很多类似的接口，您有什么建议呢？","like_count":0},{"had_liked":false,"id":154050,"user_name":"musicq","can_delete":false,"product_type":"c1","uid":1031341,"ip_address":"","ucode":"80D778895F723A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bc/ad/ab6dedc0.jpg","comment_is_top":false,"comment_ctime":1574356024,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574356024","product_id":100039001,"comment_content":"将constants定义在类里面的话、如果被其他类引用就不好了、有可能还会有循环引用的问题。还是分成一个个小类更妥","like_count":0},{"had_liked":false,"id":153973,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1574339510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574339510","product_id":100039001,"comment_content":"问题1，JS支持ES6完美解决，如果没有的话，我想就是创建一个变量，里面有变量也有方法，因为方法也算变量，调用的时候就用到方法也可以用（JS算什么虽然我一直是当作面向过程的使用，看winter大说是基于原型，算不算面向过程，现在TS也流行算不算面向过程）<br>问题2:滥用setser geter，工具方法Util也遇到过（关键有的我直接就当作代码切分，没有用static），贫血模型也同样遇到过，写一些简单的脚本也是面向过程。","like_count":0},{"had_liked":false,"id":153950,"user_name":"来碗绿豆汤","can_delete":false,"product_type":"c1","uid":1070051,"ip_address":"","ucode":"B0AB63B8D9729F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","comment_is_top":false,"comment_ctime":1574335625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574335625","product_id":100039001,"comment_content":"关于贫血模型会常被使用的原因：我的想法时，我们有时候可能需要对一组数据进行多种操作；而基于一个类只做一件事的原则，我们可能会把多种操作分散在多个类中；而这些类又都需要操作相同的对象；这时我们就可能想到把对象单独定义成一个类，然后操作定义成独立的类。","like_count":0},{"had_liked":false,"id":153913,"user_name":"K.Zhou","can_delete":false,"product_type":"c1","uid":1019861,"ip_address":"","ucode":"2D817253F9FDAD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/d5/bab4332a.jpg","comment_is_top":false,"comment_ctime":1574329613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574329613","product_id":100039001,"comment_content":"GetItems()更好的做法其实ImmutableList里应该用复制的items而不是原有的items","like_count":0},{"had_liked":false,"id":153648,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1274787,"ip_address":"","ucode":"C233DF1D224EC1","user_header":"https://static001.geekbang.org/account/avatar/00/13/73/a3/2b077607.jpg","comment_is_top":false,"comment_ctime":1574293624,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574293624","product_id":100039001,"comment_content":"昨天就在干这样的事 写着写着发现就成了面向过程了","like_count":0},{"had_liked":false,"id":153594,"user_name":"Fun","can_delete":false,"product_type":"c1","uid":1145502,"ip_address":"","ucode":"5D89BA4C678785","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJdUGdEj3R25CrYqibPibYibibRicqUfyL4aTTPbMagyywjKMhXGZE37RTe7lEdvC4DibvtYpzg8zXvt9HQ/132","comment_is_top":false,"comment_ctime":1574264240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574264240","product_id":100039001,"comment_content":"# day 9<br>今晚主要学了表面上面相对象的代码设计实际是面向过程风格。这篇文章算是给我长了些见识吧，毕竟从没有用OOPL从设计到开发完整地实现过一个需求。比如贫血模式，充血模式也都需要实时的百度…只能说，抱着小白的心态学习。另外，看完评论，搞嵌入式C的显得有点另类了，囧。","like_count":0},{"had_liked":false,"id":153534,"user_name":"付昱霖","can_delete":false,"product_type":"c1","uid":1488464,"ip_address":"","ucode":"9CB3A8A8504885","user_header":"https://static001.geekbang.org/account/avatar/00/16/b6/50/5d9ef58d.jpg","comment_is_top":false,"comment_ctime":1574254436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574254436","product_id":100039001,"comment_content":"Lua 的 Table就是模拟面向对象 ，lua本身是没有类这个概念的","like_count":0},{"had_liked":false,"id":153528,"user_name":"夏目","can_delete":false,"product_type":"c1","uid":1212750,"ip_address":"","ucode":"67C075A01CF4D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/4e/d71092f4.jpg","comment_is_top":false,"comment_ctime":1574253603,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574253603","product_id":100039001,"comment_content":"这三条毫无意外的全中……在各种VO BO entity的转换和构造我也喜欢写在service中🐶大量if else和switch  case算不算面向过程","like_count":0},{"had_liked":false,"id":153475,"user_name":"秃头才能变强","can_delete":false,"product_type":"c1","uid":1704235,"ip_address":"","ucode":"5D796EFE12E66E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/01/2b/234f6fc4.jpg","comment_is_top":false,"comment_ctime":1574241476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574241476","product_id":100039001,"comment_content":"c语言，可以用static来实现类似封装的效果。static定义的全局变量和全局函数可以限制变量和函数访问范围在这个.c的文件范围内。这算是控制了变量和方法的访问权限了吧。","like_count":0},{"had_liked":false,"id":153431,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1574234924,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574234924","product_id":100039001,"comment_content":"1.一个类不要无脑用getter、setter 方法<br>面向对象封装的定义是：通过访问权限控制，隐藏内部数据，外部仅能通过类提供的有限的接口访问、修改内部数据。<br>滥用set 导致什么东西都能去调用修改，这样搞的都不符合封装的特性了<br>在设计实现类的时候，除非真的需要，否则，尽量不要给属性定义 setter 方法。除此之外，尽管 getter 方法相对 setter 方法要安全些，但是如果返回的是集合容器（比如例子中的 List 容器），也要防范集合内部数据被修改的危险。<br>但是我不会用你说的那个Collections.unmodifiableList() 方法，我会直接用final或者immutable根据是否报错来修饰。<br><br>关于这一点，我正在看lombook如何设置构造生成指定的<br>2.分类设计.<br>不同的东西不要放在一个class里面<br>3.强壮一点<br>做个service直接套，这样是不好的<br><br><br>贫血模型:只有get&#47;set和属性 只是作为保存状态或者传递状态使用 只有数据没有行为的对象不是真正的对象，实体类简单，业务层麻烦<br>充血：除了这些还有业务逻辑和持久化   。划分什么在实体类里面，什么在业务层这个任务比较困难<br><br><br>1.说说自己知道其他面向过程语言<br>pb开发工具是面向对象，语言是面向过程，先说说继承，允许一个窗口继承另一个窗口。<br>封装：窗口与窗口直接是间接隔离的，一般开发的时候都是尽量少用全局变量，但并不是不用。<br>2.个人认为其他的关于过程的<br>调用存储过程套入参。","like_count":0},{"had_liked":false,"id":153411,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1574232193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574232193","product_id":100039001,"comment_content":"占全了，而且自己写的时候 也有一种面向过程的感觉","like_count":0},{"had_liked":false,"id":153347,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1574220688,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574220688","product_id":100039001,"comment_content":"不管使用面向过程还是面向对象哪种风格来写代码，我们最终的目的还是写出易维护、易读、易复用、易扩展的高质量代码。只要我们能避免面向过程编程风格的一些弊端，控制好它的副作用，在掌控范围内为我们所用，我们就大可不用避讳在面向对象编程中写面向过程风格的代码。","like_count":0},{"had_liked":false,"id":153209,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1574181881,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574181881","product_id":100039001,"comment_content":"讲的三点也是占全了。前两点虽知道不好，但有时为了方便和进度直接就定义大而全了事了。mvc 模式是面向过程的惊到了。期待后续~","like_count":0},{"had_liked":false,"id":153206,"user_name":"CycleGAN","can_delete":false,"product_type":"c1","uid":1679661,"ip_address":"","ucode":"9FD04813911A02","user_header":"https://static001.geekbang.org/account/avatar/00/19/a1/2d/599e9051.jpg","comment_is_top":false,"comment_ctime":1574180999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574180999","product_id":100039001,"comment_content":"很多时候对于一些流水线的操作，会写类似于shell脚本的方法集合，其实就是面向过程了，完了包在一个类里.run一下，骗自己是面向对象了。。有谁知道这些有依赖的流程该怎么用面向对象设计，谢谢～","like_count":0},{"had_liked":false,"id":153158,"user_name":"废材姑娘","can_delete":false,"product_type":"c1","uid":1047537,"ip_address":"","ucode":"6AFB48B2A4939A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/f1/a2cde35e.jpg","comment_is_top":false,"comment_ctime":1574171002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574171002","product_id":100039001,"comment_content":"刚刚换公司，转到Java技术站，发现项目代码三个全占，今天写代码时有一顿常量定义，还犹豫要不要抽常量类，看完我停住了","like_count":0},{"had_liked":false,"id":153119,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1574162457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574162457","product_id":100039001,"comment_content":"C语言，在A结构体和B结构体里面加一个指针指向结构体C，就可以说A和B继承于C了。","like_count":0},{"had_liked":false,"id":153118,"user_name":"uranusleon","can_delete":false,"product_type":"c1","uid":1186044,"ip_address":"","ucode":"3CD5222E590A92","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/fc/a0f8a88d.jpg","comment_is_top":false,"comment_ctime":1574162363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574162363","product_id":100039001,"comment_content":"Constants 类、Utils 类的设计问题 -- 在实际开发中，有的同事在写一些可以通用的逻辑时，根本不会考虑到放到工具类，提高可复用性，或者用一个非常大的工具类，什么方法都往里面放，用的时候都很难找到需要的方法；并且有的人写工具类，喜欢将和业务强相关的方法放到工具类，这样就丧失了工具类的意义了。而Constants类也会有同样的问题。","like_count":0},{"had_liked":false,"id":153109,"user_name":"卫江","can_delete":false,"product_type":"c1","uid":1101226,"ip_address":"","ucode":"DE2F7A6916F1A9","user_header":"https://static001.geekbang.org/account/avatar/00/10/cd/aa/33d48789.jpg","comment_is_top":false,"comment_ctime":1574159292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574159292","product_id":100039001,"comment_content":"个人认为，MVC模型是典型的分层模型，通过面向过程思想把一个复杂的问题流程化从而使得我们的每个模块复杂度降低，是一种从上到下分治思想。然后在单独的Model,View,Control中，根据需求建立模型，创建对象，描述对象之间的相互关系从而解决问题，是一种从下到上的思想。两者结合起来，通过分层解决整体复杂度的问题减少模块之间的耦合度，在每一个模块中使用面向对象提高模块的扩展性，维护性。","like_count":0},{"had_liked":false,"id":153041,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1574145368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574145368","product_id":100039001,"comment_content":"的确是对于日常开发习惯的一种重新审视，去思考文中三种开发习惯的实际优劣性，是否依然符合我们对于java，对于面向对象性质的维护和推崇。也明白作者所说的，我们不是要对面向对象或者面向过程一刀切，而且清楚的明白两者的优势，可以分别使用在什么地方，这样才能更好的取长补短。","like_count":0},{"had_liked":false,"id":153035,"user_name":"asdf100","can_delete":false,"product_type":"c1","uid":1043738,"ip_address":"","ucode":"39D8D71453E575","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","comment_is_top":false,"comment_ctime":1574144089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574144089","product_id":100039001,"comment_content":"前天第一次用 Lombok 插件，确实也发现这个问题了，什么都生成setter getter, 严重破坏了面向对象的一些基本准则，要是有办法可以限制部分属性不生成seter geter就好了","like_count":0},{"had_liked":false,"id":153030,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1574143259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574143259","product_id":100039001,"comment_content":"本文感想：Java好牛逼，大项目还得靠Java。","like_count":0},{"had_liked":false,"id":153024,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1574142512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574142512","product_id":100039001,"comment_content":"就在用Python写各种数据处理的脚本，一般代码量都不超过250行（包含注释和换行🤣），原来我一直是面向过程，学到了。<br>Python能让我用很少的代码搞定一个数据处理，它的数据处理包应该是面向对象的，感谢Python内核开发团队。","like_count":0},{"had_liked":false,"id":152977,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1574132794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574132794","product_id":100039001,"comment_content":"恍然大悟、豁然开朗，感觉好多成语可以形容看完这篇专栏的自己。<br><br>多少开发人员其实就是用着面向对象的语言从事面向过程的开发，更通俗一点的说法叫做CRUD工程师。<br><br>因为使用MVC框架（spring、mybatis等）开发，大部分时间其实就是在自动生成model，然后编写service、controller层的工作。<br><br>我觉得这也是导致自己项目越来越臃肿的主要原因，根本没有好好利用面向对象的编程思想来设计。","like_count":0},{"had_liked":false,"id":152974,"user_name":"沐夜星光","can_delete":false,"product_type":"c1","uid":1447220,"ip_address":"","ucode":"22F699E237B179","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia2EwyyEVs3tWRnMlqaAG7R7HvlW4vGvxthKsicgsCEeXO1qL7mMy6GAzgdkSKcH3c70Qa2hY3JLw/132","comment_is_top":false,"comment_ctime":1574132391,"is_pvip":false,"replies":[{"id":"60036","content":"并不是深度拷贝数据，你可以搜下深拷贝和浅拷贝","user_name":"作者回复","comment_id":152974,"uid":"1190123","ip_address":"","utype":1,"ctime":1574855387,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1574132391","product_id":100039001,"comment_content":"我平时主要用c++开发，不太理解 购物车例子中“items 属性的 getter 方法，返回的是一个 List集合容器。外部调用者在拿到这个容器之后，是可以操作容器内部数据的，也就是说，外部代码还是能修改 items 中的数据。”返回list对象不是ShoppingCart.items的一份拷贝吗，修改拷贝数据，又不会影响到ShoppingCart.items。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475007,"discussion_content":"并不是深度拷贝数据，你可以搜下深拷贝和浅拷贝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574855387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438470,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f3/06/8da1bf0c.jpg","nickname":"Fredo","note":"","ucode":"681D6692617DAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":157290,"discussion_content":"JAVA中List是浅拷贝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580464998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152970,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1574131334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574131334","product_id":100039001,"comment_content":"很多时候之所以在项目中出现大量的getter&#47;setter方法，甚至是lombok的盛行，有时候是因为框架的原因，框架上的简单导致了封装上的懒惰。","like_count":0},{"had_liked":false,"id":152960,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1574130014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574130014","product_id":100039001,"comment_content":"视乎有点明白了面向对象编程与面向过程编程的区别了，继续努力","like_count":0},{"had_liked":false,"id":152958,"user_name":"ldd","can_delete":false,"product_type":"c1","uid":1208157,"ip_address":"","ucode":"E8344FAFFE5CF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/6f/5d/f0a19f09.jpg","comment_is_top":false,"comment_ctime":1574129949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574129949","product_id":100039001,"comment_content":"作为前端开发人员，天天在写MVC🤣","like_count":0},{"had_liked":false,"id":152956,"user_name":"Paper","can_delete":false,"product_type":"c1","uid":1305388,"ip_address":"","ucode":"7EE26C2E892899","user_header":"https://static001.geekbang.org/account/avatar/00/13/eb/2c/ab72fda4.jpg","comment_is_top":false,"comment_ctime":1574129705,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574129705","product_id":100039001,"comment_content":"哈哈 原来mvc这种原来叫做贫血模式","like_count":0},{"had_liked":false,"id":152953,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1574129093,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574129093","product_id":100039001,"comment_content":"原来这些年一直用Java写面向过程代码，偶尔写面向对象代码，无知啊，真可怕","like_count":0},{"had_liked":false,"id":152952,"user_name":"不似旧日","can_delete":false,"product_type":"c1","uid":1161271,"ip_address":"","ucode":"DF4C5E3AB9570C","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/37/98991aeb.jpg","comment_is_top":false,"comment_ctime":1574129009,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574129009","product_id":100039001,"comment_content":"POJO每个属性都有get,set 方法是没毛病的","like_count":0},{"had_liked":false,"id":152928,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1574125084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574125084","product_id":100039001,"comment_content":"按照老师的说法，Java 中的 Utils类和PHP中的 trait 相似","like_count":0},{"had_liked":false,"id":152890,"user_name":"筱乐乐哦","can_delete":false,"product_type":"c1","uid":1307611,"ip_address":"","ucode":"AE92539F0419C3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/db/5b7a8fd8.jpg","comment_is_top":false,"comment_ctime":1574098039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574098039","product_id":100039001,"comment_content":"争哥说的对，我很早就发现自己拿着面向对象的语言写着面向过程的代码了，springboot，就是这种数据和操作分开处理的，mvc，天天写这个，还有那个utils，constants常亮，等等，如何写面向对象的语言真就成了难点，天天这么写，感觉都有点无聊了，希望自己能写出牛逼哄哄的代码就好了","like_count":0},{"had_liked":false,"id":152874,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1574092853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574092853","product_id":100039001,"comment_content":"对于问题2 以前见过一个方法里出现十几个参数 感觉也是面向过程编程","like_count":0},{"had_liked":false,"id":152864,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1574091300,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574091300","product_id":100039001,"comment_content":"BO VO PO各种转换，用BeanCopy，所以就都定义了Setter方法👻","like_count":0},{"had_liked":false,"id":152836,"user_name":"搞怪者😘 😒 😏 👿","can_delete":false,"product_type":"c1","uid":1300678,"ip_address":"","ucode":"40DFF5D3E3B24C","user_header":"https://static001.geekbang.org/account/avatar/00/13/d8/c6/2b2a58cf.jpg","comment_is_top":false,"comment_ctime":1574085942,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1574085942","product_id":100039001,"comment_content":"我不是很明白Controller，Service和Repository区别？","like_count":0,"discussions":[{"author":{"id":1238051,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/23/ac13d916.jpg","nickname":"圆哥哥呐丶","note":"","ucode":"8E56E3E68A3836","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53230,"discussion_content":"Controller  是接收前台请求的，\nService  是拿到前台传递的数据，进行业务处理的\nRepository 是当service需要数据的时候，repository负责把数据从数据库拿出来交给service进行数据处理，","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574147640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1300678,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d8/c6/2b2a58cf.jpg","nickname":"搞怪者😘 😒 😏 👿","note":"","ucode":"40DFF5D3E3B24C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1238051,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/23/ac13d916.jpg","nickname":"圆哥哥呐丶","note":"","ucode":"8E56E3E68A3836","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":54126,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574261050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":53230,"ip_address":""},"score":54126,"extra":""}]}]},{"had_liked":false,"id":152829,"user_name":"摸爬滚打三十年","can_delete":false,"product_type":"c1","uid":1240241,"ip_address":"","ucode":"764A7F920EC304","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/b1/d790b927.jpg","comment_is_top":false,"comment_ctime":1574084950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574084950","product_id":100039001,"comment_content":"学习老师的课程收益匪浅","like_count":0},{"had_liked":false,"id":152812,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1574082958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574082958","product_id":100039001,"comment_content":"基于mvc开发模式的代码竟是面向过程的","like_count":0},{"had_liked":false,"id":152810,"user_name":"Warn","can_delete":false,"product_type":"c1","uid":1465310,"ip_address":"","ucode":"F2F7FCDB0940D0","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/de/152f1c2c.jpg","comment_is_top":false,"comment_ctime":1574082939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574082939","product_id":100039001,"comment_content":"业务代码，一般是面向过程实现，然后有时间了才进行优化😂","like_count":0},{"had_liked":false,"id":152808,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1574082863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574082863","product_id":100039001,"comment_content":"看了今天的课, 我我发现三个都占了, 团队甚至不是前后端分离的.","like_count":0},{"had_liked":false,"id":152796,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1574081389,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1574081389","product_id":100039001,"comment_content":"面向过程编程是面向对象编程的基础，面向对象编程离不开基础的面向过程编程<br><br>感觉面向对象只是一个思想设计方式，实际在写业务逻辑的时候写的还是面向过程的代码","like_count":0},{"had_liked":false,"id":152786,"user_name":"宝宝太喜欢极客时间了","can_delete":false,"product_type":"c1","uid":1215152,"ip_address":"","ucode":"9CDB679C257612","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoOGZ6lbHiboIZMN9USbeutnmCWBahVLtSlKlIENKvrZQCUQzpzeZQOxTntIkBUeDk6qZUPdqmfKrQ/132","comment_is_top":false,"comment_ctime":1574080206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574080206","product_id":100039001,"comment_content":"面向对象很多年，最后发现确实面向过程，这让人情何以堪，哈哈，哈哈，哈哈","like_count":0},{"had_liked":false,"id":152770,"user_name":"柳志焕","can_delete":false,"product_type":"c1","uid":1235940,"ip_address":"","ucode":"42375930DC2AA0","user_header":"https://static001.geekbang.org/account/avatar/00/12/db/e4/a1b45d79.jpg","comment_is_top":false,"comment_ctime":1574077609,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574077609","product_id":100039001,"comment_content":"今天学习了 Collections.unmodifiableList() 这个 method，不了解的同学可以看下这篇文章。<br>https:&#47;&#47;www.geeksforgeeks.org&#47;collections-unmodifiablecollection-method-in-java-with-examples&#47;","like_count":0},{"had_liked":false,"id":152752,"user_name":"Rain","can_delete":false,"product_type":"c1","uid":1238221,"ip_address":"","ucode":"6A270D922A3B9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e4/cd/5363c8fa.jpg","comment_is_top":false,"comment_ctime":1574075469,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574075469","product_id":100039001,"comment_content":"我个人觉得面向对象和面向过程有时候并不是区分的那么明确，当然也就无法明确地说，在面向对象的开发语言环境中写出了面向过程的代码就不好。我举两个例子，一个是老师说的web开发的模式属于典型的面向过程的方式，这个我有不同看法，控制器的职业明确，仓库类的职责明确，bean类的职责明确，基于此，如果程序写得对修改关闭对扩展开放，那我认为是非常好的面向对象的设计模式。另一个是，我认为面向对象编程必定要和面向过程的编程结合使用，大家都知道程序就是数据结构加算法，而这两个因素必定会导致面向过程编码的存在。规则引擎的实现过程我虽然没读过源码，但我直观理解他就特别符合我说的第二点。","like_count":0},{"had_liked":false,"id":152733,"user_name":"学好习，做好人","can_delete":false,"product_type":"c1","uid":1205294,"ip_address":"","ucode":"C991643DB458E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/2e/e70a317a.jpg","comment_is_top":false,"comment_ctime":1574071293,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574071293","product_id":100039001,"comment_content":"现在Java的项目都有很成熟的框架，有些代码也是无奈之举，没有不行，老师讲的特别好，受教了，现在在写代码的时候也是很多写的是面向过程编程 ，但是   在目前比较常用的三层模型中，是不是我们就没有改进的地方了，感觉不是，重点是service层，service层是主要业务逻辑的实现层，在这一层我们应该注意什么？在最复杂的业务逻辑层，我们应该注意这个service是干什么的，不是干什么的，就是单一职责的设计原则，在明确这个的基础上面，按照业务涉及模型，哪些代码需要抽象，哪些接口需要复用，单一职责的接口一般都是可以正确的复用的，还有就是何时使用抽象类，何时使用接口，很多人不是特别的清楚甚至一点不清楚，所以最后写的代码基本就是个半成品吧，逻辑比较乱的","like_count":0},{"had_liked":false,"id":152720,"user_name":"許敲敲","can_delete":false,"product_type":"c1","uid":1046681,"ip_address":"","ucode":"6486466820E7BF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/99/8e760987.jpg","comment_is_top":false,"comment_ctime":1574069404,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574069404","product_id":100039001,"comment_content":"matlab，Fortran 那些做工程计算，模拟各种物理，化学过程的好像都是面向过程的。","like_count":0},{"had_liked":false,"id":152703,"user_name":"学好习，做好人","can_delete":false,"product_type":"c1","uid":1205294,"ip_address":"","ucode":"C991643DB458E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/2e/e70a317a.jpg","comment_is_top":false,"comment_ctime":1574066513,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574066513","product_id":100039001,"comment_content":"在现在项目的代码中，三层模型的service层问题是最大的，面向对象编程提供面向接口，所以在项目中，但凡是service的基本都是定义成了接口，而且接口之间的调用很混乱，有的功能就是比较单一的调用，没必要定义成接口，有的功能可以抽离出来抽象类的，用的还是接口，仿佛不定义接口，就不是面向对象编程了，定义接口的目的有两个：第一：解耦，将调用与具体的实现解耦，也就是面向抽象而不是面向具体，这个目的在项目的所有service层基本都用到了，第二：便于代码复用。关键是如此多的service，定义好的时候确实可以复用，但是在不该定义该方法的service中定义，我感觉其实没多大的意义","like_count":0},{"had_liked":false,"id":152686,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1574063154,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574063154","product_id":100039001,"comment_content":"三点全占。<br>开发的时候已经形成了一个固定思维模式了。上来就一套Mvc。get  set 也是lombok注解搞定。根本就没有思考过是不是面向对象还是面向过程。惭愧。","like_count":0},{"had_liked":false,"id":152685,"user_name":"Lugyedo","can_delete":false,"product_type":"c1","uid":1011793,"ip_address":"","ucode":"EB5E456B638E70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/70/51/f1825adb.jpg","comment_is_top":false,"comment_ctime":1574062900,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574062900","product_id":100039001,"comment_content":"一直觉得MVC结构的Web开发方式中VO&#47;BO&#47;Entity这些类只定义数据很奇怪，现在才知道这种方式叫基于贫血模型的开发模式，期待争哥实战篇里的解决方案。","like_count":0},{"had_liked":false,"id":152683,"user_name":"sulatwx","can_delete":false,"product_type":"c1","uid":1348141,"ip_address":"","ucode":"366237F13DE8A7","user_header":"","comment_is_top":false,"comment_ctime":1574062440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574062440","product_id":100039001,"comment_content":"我们平常非常熟悉的controller、service、dao的模式其实就是面向过程的。","like_count":0},{"had_liked":false,"id":152665,"user_name":"qqq","can_delete":false,"product_type":"c1","uid":1006786,"ip_address":"","ucode":"91B0ACF8CBE7BD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/c2/8ffd2ad0.jpg","comment_is_top":false,"comment_ctime":1574059107,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574059107","product_id":100039001,"comment_content":"JS 构造函数，添加原型方法","like_count":0},{"had_liked":false,"id":152652,"user_name":"努力努力再努力m","can_delete":false,"product_type":"c1","uid":1644369,"ip_address":"","ucode":"9DD9E9C2988FFC","user_header":"https://static001.geekbang.org/account/avatar/00/19/17/51/3e13dc0c.jpg","comment_is_top":false,"comment_ctime":1574056965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574056965","product_id":100039001,"comment_content":"每个类中的业务逻辑代码，就是面向过程风格的代码，再加上文章中的三点，感觉自己就像是在做面向过程编程啊。","like_count":0},{"had_liked":false,"id":152645,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1574055876,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574055876","product_id":100039001,"comment_content":"上一章说：面向对象是一种人类的思维方式，这一章说：面向过程编程风格恰恰符合人的这种流程化思维方式。而面向对象编程风格正好相反。","like_count":0},{"had_liked":false,"id":152643,"user_name":"一名小学生","can_delete":false,"product_type":"c1","uid":1137292,"ip_address":"","ucode":"5C73082E6B6370","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/8c/1fec5fa2.jpg","comment_is_top":false,"comment_ctime":1574055429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574055429","product_id":100039001,"comment_content":"没想到getter 和 setter还有这么多讲究，学习了","like_count":0},{"had_liked":false,"id":152623,"user_name":"唐龙","can_delete":false,"product_type":"c1","uid":1471657,"ip_address":"","ucode":"87A10AE04F2037","user_header":"https://static001.geekbang.org/account/avatar/00/16/74/a9/5eb3ebc6.jpg","comment_is_top":false,"comment_ctime":1574052124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574052124","product_id":100039001,"comment_content":"三个月前用C++写的一个练手项目(我还是个学生)中有一个类就是滥用setter和getter的，没办法，老师也是这么讲的，说是可以在setter里限定范围，除此之外没感觉到什么好处。<br><br>我当时是感觉这么写有点别扭，主要的想法是为什么不直接把这个变量定义成public。<br><br>现在想了想有些内容确实没必要暴露出来，我也尝试了一下重构那个类，把那些值的修改和判断全部放到了其他方法中，通过返回值来表示越界。<br><br>估计我的烂代码还有不少，其他的自己也注意不到，这门课我跟定了。","like_count":0},{"had_liked":false,"id":152620,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1574051693,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574051693","product_id":100039001,"comment_content":"看完感觉在审视自己，回头看。问题1感觉比较严重。确实都直接lombok @Data。然后基于MVC的贫血模型是现阶段最迷惑的，不知道如何做是正确的。<br>其他行为想到一个是: <br>1. if ...else和switch case的滥用，明显可以通过继承或抽象能解决的，习惯按照业务按部就搬。应该和第四点有点重合。","like_count":0},{"had_liked":false,"id":152619,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1574051481,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1574051481","product_id":100039001,"comment_content":"见过使用Lombok做链式编程的。<br>一切都是trade off，没有绝对的好与坏，只有适合与不适合，目的是一致的，扬长避短","like_count":0,"discussions":[{"author":{"id":1651664,"avatar":"https://static001.geekbang.org/account/avatar/00/19/33/d0/962ebe2e.jpg","nickname":"Buring","note":"","ucode":"0AAEA64C63C2F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308959,"discussion_content":"其实我觉得在build里做全部参数校验就好了。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1601132341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1913366,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ZtPzZANysH9BrOAl7tDMBm5HFT2aqHOJGhuTzJkBW06mn64Ec85oCLgug1HgVCU3mTLBmE0dwkgwKdtMLX1Keg/132","nickname":"陈力扬","note":"","ucode":"459D188BC0A905","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351934,"discussion_content":"你这个也太不可读了吧,校验写到set里面 你还得考虑 使用的时候的set先后顺序 最先得设置setisref,不然你整个逻辑都存在问题,我先setarg 再 settype 再setisref 整个逻辑就说不通了","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1614520889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2063037,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7a/bd/1f461acf.jpg","nickname":"西电","note":"","ucode":"95BD4CE9D93018","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294013,"discussion_content":"这个必须用建造者模式么？\n直接用构造函数(传递三个参数)，在构造函数里面做参数检验，不符合规范的直接扔出异常。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1595760402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1171165,"avatar":"https://static001.geekbang.org/account/avatar/00/11/de/dd/67d4e0d2.jpg","nickname":"小苏","note":"","ucode":"FB36B69864F7C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2063037,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7a/bd/1f461acf.jpg","nickname":"西电","note":"","ucode":"95BD4CE9D93018","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308016,"discussion_content":"参数比较少，且逻辑不复杂，就没必要用建造者模式了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600826607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":294013,"ip_address":""},"score":308016,"extra":""},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2063037,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7a/bd/1f461acf.jpg","nickname":"西电","note":"","ucode":"95BD4CE9D93018","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341942,"discussion_content":"可以考虑用，因为构建的特定对象的逻辑还有点复杂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610545784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":294013,"ip_address":""},"score":341942,"extra":""}]},{"author":{"id":1711450,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/1d/5a/937f0d4c.jpg","nickname":"yin","note":"","ucode":"9F3D55A1D435A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":311242,"discussion_content":"set方法过于复杂，set方法应该只做单个参数的校验，保持简洁性","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1602289158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1071601,"avatar":"https://static001.geekbang.org/account/avatar/00/10/59/f1/8909b9e0.jpg","nickname":"叉歪叉","note":"","ucode":"2C1AFC6335FF0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305012,"discussion_content":"Dont Repeat Yourself","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1599738811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1555804,"avatar":"https://static001.geekbang.org/account/avatar/00/17/bd/5c/acb09bc7.jpg","nickname":"特拉仔","note":"","ucode":"B60AFA3EA26BDD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300093,"discussion_content":"build函数已经参数检验了，没必要还在set里检验了","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1597933906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378952,"discussion_content":"dry,校验逻辑有重复","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1623559948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047014,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","nickname":"webmin","note":"","ucode":"98B0CA882454E8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342711,"discussion_content":"public class TestConstructorArg {\n    @Test\n    public void testBuiler() throws Exception {\n        ConstructorArg constructorArg = ConstructorArg.builder(\n                (ca) -> ca.setArg(&#34;&#34;),\n                (ca) -> ca.setRef(true)\n        );\n\n        Assert.assertTrue(constructorArg.isRef());\n        Assert.assertNull(constructorArg.getType());\n\n        constructorArg = ConstructorArg.builder(\n                (ca) -> ca.setArg(&#34;&#34;),\n                (ca) -> ca.setType(&#34;&#34;.getClass()),\n                (ca) -> ca.setRef(false)\n        );\n    }\n}","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610788186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2085090,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/d0/e2/1d00c079.jpg","nickname":"写代码的","note":"","ucode":"F58186409A3D65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300473,"discussion_content":"感觉在 set 里做检验很难受。build 的时候已经把所有参数锁死了，这个时候判断是最好的，否则一旦某个约束涉及的参数增加了，set 方法里面的校验根本没法写。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598119268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1047014,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","nickname":"webmin","note":"","ucode":"98B0CA882454E8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342710,"discussion_content":"//留言字数受限文中的Exception应该是为IllegalArgumentException\npublic class ConstructorArg {\n    private boolean isRef;\n    private Class type;\n    private Object arg;\n    public boolean isRef() {return isRef; }\n    public Class getType() {return type;}\n    public Object getArg() {return arg;}\n\n    private ConstructorArg() {}\n\n    public static ConstructorArg builder(Function<ConstructorArg, Function<ConstructorArg, Exception>>... options) throws Exception {\n        ConstructorArg cArg = new ConstructorArg();\n\n        for (int i = 0; i < options.length; i++) {\n            Exception err = options[i].apply(cArg).apply(cArg);\n            if (err != null) {\n                throw err;\n            }\n        }\n        return cArg;\n    }\n\n    public Function<ConstructorArg, Exception> setRef(boolean ref) {\n        return (c) -> {\n\n            if (Objects.isNull(c.arg)) {\n                return new Exception(&#34;...&#34;);\n            }\n\n            if (ref &amp;&amp; !Objects.isNull(c.type)) {\n                return new Exception(&#34;...&#34;);\n            }\n\n            if (ref &amp;&amp; arg.getClass() != String.class) {\n                return new Exception(&#34;...&#34;);\n            }\n\n            if (!ref &amp;&amp; Objects.isNull(c.type)) {\n                return new Exception(&#34;...&#34;);\n            }\n\n            c.isRef = ref;\n            return null;\n        };\n    }\n\n    public Function<ConstructorArg, Exception> setType(Class type) {\n        return (c) -> {\n            if (c.isRef || Objects.isNull(type)) {\n                return new Exception(&#34;...&#34;);\n            }\n            c.type = type;\n            return null;\n        };\n    }\n\n    public Function<ConstructorArg, Exception> setArg(Object arg) {\n        return (c) -> {\n            if (Objects.isNull(arg)) {\n                return new Exception(&#34;...&#34;);\n            }\n\n            if (c.isRef &amp;&amp; arg.getClass() != String.class) {\n                return n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610788176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1047014,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","nickname":"webmin","note":"","ucode":"98B0CA882454E8","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":384302,"discussion_content":"这是什么打法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626490470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":342710,"ip_address":""},"score":384302,"extra":""}]}]},{"had_liked":false,"id":152608,"user_name":"下雨天","can_delete":false,"product_type":"c1","uid":1008315,"ip_address":"","ucode":"816B3792ECC50A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","comment_is_top":false,"comment_ctime":1574048966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574048966","product_id":100039001,"comment_content":"遇到的看似是面向对象实际上是面向过程编程风格的情况：单例模式的乱用<br>其具体表现如下：<br>1. 项目存在的Controller的单例，万能类单例，其中糅杂了各种对象和类的逻辑，有数据处理有视图控制，有工具方法，有全局变量，包含各种五花八门功能和实现。<br><br>2. 开发人员根本不需要思考万能类的初始化时机和调用时机，万能类的功能，都可以通过getInstance来操作。<br><br>3.搜索万能类的getInstance，项目中随处可见，这些各种嵌入在其他类中的间接演变成了面向过程编程。<br><br>思考导致单例乱用而间接演变成面向过程编程的原因：<br>1.  首先是开发人员无法正确建立类模型，无法分析类与类之间的关系。<br>2.  缺乏类单一职责的意识<br>3.  想要获得一个对象实例，但是不知道怎么获取","like_count":0},{"had_liked":false,"id":152591,"user_name":"Lifelong Learning","can_delete":false,"product_type":"c1","uid":1173517,"ip_address":"","ucode":"3E39BED3E13FB4","user_header":"https://static001.geekbang.org/account/avatar/00/11/e8/0d/fcd95db8.jpg","comment_is_top":false,"comment_ctime":1574046616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574046616","product_id":100039001,"comment_content":"1.使用了类,但是没有将封装做好<br>2.感觉把一些常量和共用的方法集合在一个类中就省事了,殊不知降低了维护性和可扩展性<br>3.将业务逻辑和领域对象做分离,违背了oop的编程模式,将领域对象沦为简单的存储对象了,每次子类使用父类对象时涉及到相关业务逻辑还要重新在子类中实现一遍<br>我们很多人之所以被认为是码农,本人也是一名码农,很大的原因在于不愿意去审视自己做的东西,看上去天天写程序,修bug其实进步甚微,只是看起来想个程序员罢了,其实是代码的搬运工而已!","like_count":0},{"had_liked":false,"id":152590,"user_name":"董泽","can_delete":false,"product_type":"c1","uid":1640304,"ip_address":"","ucode":"3A9C52A40C05E7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epqhr6k2GrXDicNBGeYjzwrDfuwMaa21HRSdcKBvib1cK4E6CibvrdO1iawdzh330nRMoyobhfe3PxqVQ/132","comment_is_top":false,"comment_ctime":1574046314,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574046314","product_id":100039001,"comment_content":"很多时候，定时任务的实现应该就是面向过程的编程风格吧。<br>毕竟实现的时候也就是在想分步骤如何实现这个功能","like_count":0},{"had_liked":false,"id":152578,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1574045386,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574045386","product_id":100039001,"comment_content":"看到老师举的例子，尴尬，我一直根深蒂固以为自己写的是面向对象的编程，其实很多时候都是有意无意地在用面向过程编程，而且还影响了程序的性能。","like_count":0},{"had_liked":false,"id":152575,"user_name":"Joanfen","can_delete":false,"product_type":"c1","uid":1004260,"ip_address":"","ucode":"4CF1B92337B625","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/e4/50600574.jpg","comment_is_top":false,"comment_ctime":1574044950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574044950","product_id":100039001,"comment_content":"以前学java的时候老师上来就是要求把所有对象的 getter 和 setter 方法全部写出来，objective-c 中的是通过 属性关键词 readonly  等这种方式来限制成员变量的读写，oc 里的方法是必须要自己在 .h 中去暴露，IDE 强大了就容易偷懒唉","like_count":0},{"had_liked":false,"id":152573,"user_name":"塔兹米","can_delete":false,"product_type":"c1","uid":1425252,"ip_address":"","ucode":"1A58C81EF9B0A4","user_header":"https://static001.geekbang.org/account/avatar/00/15/bf/64/c9a0e913.jpg","comment_is_top":false,"comment_ctime":1574044321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574044321","product_id":100039001,"comment_content":"打卡，我用的也是MVC，三点全占了，真实！。跟着老师学，慢慢改变。","like_count":0},{"had_liked":false,"id":152562,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1574042854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574042854","product_id":100039001,"comment_content":"1.我理解的文中说的尽量不要给类统一定义getter\\setter方法，这个类应该指的是暴露给外部访问的类，要谨慎设计，但是entity里面的类没有getter\\setter所使用的底层持久化就没用了，无法把数据库的值绑定到实体上了。<br>2.第二点，确实按照文章中所有都是贫血开发，期待老师给出最佳实战方案以供参考","like_count":0},{"had_liked":false,"id":152546,"user_name":"向前走","can_delete":false,"product_type":"c1","uid":1112651,"ip_address":"","ucode":"8956E92DCEFB60","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/4b/c385f755.jpg","comment_is_top":false,"comment_ctime":1574041804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574041804","product_id":100039001,"comment_content":"打卡:<br>违反面向对象的集中编程风格<br>1.滥用getter、setter方法<br>    1.1尽量避免settter方法的暴露,<br>    1.2如果返回集合的话,应该返回<br>Collections.unmodifiableList(this.items);<br>2.Constants类、Utils类的设计问题<br>   2.1constants类应该尽量分的细致一点<br>3.基于贫血模式的开发模式<br>  面向过程的编程方式,数据和操作是分开定义在VO,BO,Entity和Controller,Service,Repository中的 <br>","like_count":0},{"had_liked":false,"id":152536,"user_name":"晨间新闻","can_delete":false,"product_type":"c1","uid":1161406,"ip_address":"","ucode":"6F7A55AAD52F16","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/be/2d77d643.jpg","comment_is_top":false,"comment_ctime":1574040657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574040657","product_id":100039001,"comment_content":"1、对于Constants类，特别通用的，比如左右括号，逗号，我们通常还是会定义在公共类里的；<br>3、我们项目VO&#47;BO&#47;ENTITY都没分，全都用的一个类，属性特别冗余<br>","like_count":0}]}