{"id":266819,"title":"27 | 领域驱动设计：如何从零开始设计一个软件？","content":"<p>你好！我是郑晔。</p><p>在前面的内容中，我给你讲了软件设计的各种基本工具。我们学习了程序设计语言，知道怎样把设计更好地落地；学会了各种编程范式，知道了可以用什么样的元素去做设计；我们还学习了设计原则与模式，知道了怎样组合分解出来的各个元素。</p><p>工具都有了，理论也武装上了，那么我们该如何实践呢？或者说，我要去分解组合的东西是从哪而来的呢？这就需要你对<strong>设计方法</strong>有一个基本的认知了，也就是说，我们要理解，在真实世界中，解决具体问题是怎样的一个过程。</p><p>那从这一讲开始，我们就来谈谈设计方法的话题，一起了解一下设计的基本过程。</p><p>首先，你知道哪些设计方法呢？</p><p>我知道的一种做法是，有些人一上来会先设计数据库，因为他们觉得，程序就是数据加函数。数据呢，就要存到数据库里，剩下的就是根据需要对数据库表进行增删改查。但是从我们之前的讲解中，你可以看出，这种思路实际上是一种结构化编程的思路。</p><p>后来有人就用面向对象的思路，先来找实体，也就是对象，当然这些实体也要有一些能力。最终，这些对象还是要写到数据库里，同样也是要提供增删改查的能力。</p><p>你看，这两种做法本质上没什么太大的区别，都是<strong>围绕着数据在做文章</strong>。在业务需求不复杂的年代，围绕数据做文章的做法还能满足开发的要求，但随着软件日益深入到人们日常工作和生活中，软件变得越来越复杂，这种做法就越发显得笨拙了。</p><!-- [[[read_end]]] --><p>对，软件会越来越复杂的。当软件变得复杂起来，如果我们靠着程序员们本能的做法，就会遇到各种问题，所以，很多人探索了不同的做法。</p><p>在诸多的探索之中，有一种做法逐渐脱颖而出，它成功地解决业务软件开发中遇到的大部分问题，这就是<strong>领域驱动设计</strong>。虽然它不是万能药，但对大部分人面对的场景而言，它都能够有效地应对。</p><h2>领域驱动设计</h2><p>领域驱动设计（Domain Driven Design，简称 DDD），作为一个新的设计方法正式登上历史舞台，是从 Eric Evans 的著作《领域驱动设计》正式出版开始的。</p><p>这种设计方法通过使用通用语言，让业务人员加入到设计过程中，拉近了业务人员与开发人员之间的距离，打破了组织的藩篱。同时，还提供了一套标准的建模方法，帮助团队识别业务模型，避免程序员犯下一些低级错误。</p><p>按理说，这种设计方法这么好，应该很快流行起来才对。然而真实情况是，很多程序员都不知道 DDD，一个重要的原因就是 Eric 的这本书写得实在不怎么样。要想从中读出味道，你得比较懂DDD，但是，大多数人并不懂，这就是矛盾的地方。所以，DDD在很长一段时间都被埋没了。</p><p>不过，后来，随着<strong>微服务</strong>的兴起，人们越发认识到，微服务的难度并不在于将一个系统拆分成若干的服务，而在于如何有效地划分微服务。这个时候，人们发现，DDD才是最恰当的指引。关于微服务和 DDD 之间的关系，我在<a href=\"https://time.geekbang.org/column/intro/100022301\">《10x 程序员工作法》</a>里已经讲过了，有兴趣的可以去了解一下，这里就不再赘述了。</p><p>现在，你已经知道了DDD的好，准备学习DDD 了。但你只要一打开 DDD 的书，一大堆名词就会扑面而来：限界上下文、聚合根、实体、值对象，等等。我该如何下手学习呢？这是摆在每个DDD学习者面前最严峻的问题。</p><p><strong>学习 DDD，就要从理解 DDD 的根基入手：通用语言（Ubiquitous Language）和模型驱动的设计（Model-Driven Design）</strong>，而领域驱动设计的过程，就是建立起通用语言和识别模型的过程。</p><h2>通用语言</h2><p><strong>通用语言，就是在业务人员和开发人员之间建立起的一套共有的语言</strong>。要知道，在从前的设计方法中，业务人员总是把问题扔过墙头，让开发人员去解决。可是，业务人员说的都是业务名词，比如：产品、订单等等，而开发人员嘴里全是技术，比如：线程、存储等等，二者除了最基础的几个概念之外，其他的内容基本是没法沟通的。所以，一道人为鸿沟就在开发人员和业务人员之间形成了。</p><p>我们在<a href=\"https://time.geekbang.org/column/article/240177\">第1讲</a>说过，<strong>软件设计是要在问题和解决方案架设一座桥梁，好的设计要更接近问题</strong>。开发人员对解决方案一端简直再熟悉不过了，但是对业务一端理解则通常不够充分。而通用语言所做的事情，就是把开发人员的思考起点拉到了业务上，也就是从问题出发，这就在一定程度上填平了那道人为的鸿沟。</p><p>通用语言是什么呢？就是这个业务中有哪些概念以及哪些操作。比如说，我要做一个电商平台，就要有产品、订单的概念。其中，产品就要有上架、下架、修改产品信息等操作，而订单就会有下单、撤单、修改订单等操作。</p><p>在业务人员看来，这里说的都是自己擅长的事情，自己就可以有更多的发言权。在开发人员的视角，概念就是一个一个的类，操作就是一个一个的方法，也很好理解。所以，有一套通用语言，双方皆大欢喜。</p><p>但是，通用语言是从哪来的呢？也就是说，如何设计通用语言呢？最简单的做法就是让业务人员和开发人员一起，找一块白板，把各种概念都写在上面。然后，双方重新进行分类整理。</p><p>这里面的重点是，让业务人员和开发人员在一起。如果只让一方出现，结果又会是原来的样子，因为你没法判断，这里面的语言对方是否听得懂。</p><p>这种做法很简单，但通常都不够系统，会存在各种遗漏。所以，有人探索出一种更正式的实践：<strong>事件风暴</strong>（Event Storming）。</p><p><a href=\"https://www.eventstorming.com/\">事件风暴</a>是一个工作坊，基本做法就是找一面很宽的墙，上面铺上大白纸，然后，用便利贴把识别出来的概念贴在上面。当然，前提依然是让业务人员和技术人员都参与其中。</p><p>这个实践之所以叫作事件风暴，因为它的关注点在于<strong>领域事件</strong>。领域事件是用来记录业务过程中发生过的重要事情，比如，作为电商平台的工作人员，你想知道产品是不是已经上架了，这个领域事件就是产品已上架；作为消费者，你会关心我的订单是不是下成功了，这个领域事件就是订单已下。</p><p>人们做了一个动作，都会关心做过这个动作之后的结果，所以，领域事件用的描述方式都是过去式，比如：OrderPlaced。</p><p>事件风暴这个工作坊主要分成三步：</p><ul>\n<li><strong>第一步就是把领域事件识别出来</strong>，这个系统有哪些是人们关心的结果。有了领域事件，下面一个问题是，这些事件是如何产生的，它必然会是某个动作的结果。</li>\n<li><strong>第二步就是找出这些动作，也就是引发领域事件的命令</strong>。比如：产品已上架是由产品上架这个动作引发的，而订单已下就是由下单这个命令引发的。</li>\n<li><strong>第三步就是找出与事件和命令相关的实体或聚合</strong>，比如，产品上架就需要有个产品（Product），下单就需要有订单（Order）。</li>\n</ul><p>至此，我们已经把最核心的内容找出来了。通常，在工作坊过程中，为了增强趣味性和清晰性，不同的概念会用不同的颜色的便利贴标识出来，比如，领域事件用橙色、命令用蓝色、实体/聚合用黄色等等。</p><p>其实，用不同的颜色建模，事件风暴并不是独一份。Peter Coad也曾提出过一种<a href=\"https://en.wikipedia.org/wiki/Object_Modeling_in_Color\">四色建模</a>的方法：</p><ul>\n<li>粉色表示时标性对象（moment-interval）；</li>\n<li>黄色表示角色（role）；</li>\n<li>蓝色表示描述（description）；</li>\n<li>绿色表示人、地点、物（party/place/thing）。</li>\n</ul><p>他还写了一本<a href=\"https://book.douban.com/subject/3354137/\">《彩色UML建模》</a>（Java Modeling in Color with UML）介绍这种方法。我在ThoughtWorks的前同事徐昊按照自己的理解，对这种方法做了一些更新，有兴趣的话，可以去<a href=\"https://www.infoq.cn/article/xh-four-color-modeling\">了解一下</a>。</p><p>当然，这里的事件风暴，我只是描述了最简单的一个过程。在具体实施的过程中，还会有更多的细节。不过，最重要的还是，让不同角色的参与其中，让知识在所有人的头脑中进行构建，得到一个大家都认同的结果。</p><h2>模型驱动设计</h2><p>有了通用语言，接下来就进入模型设计阶段了。虽然有了通用语言，但是业务人员能够帮到开发人员的还是很少，他们只能告诉开发人员哪些模型是符合业务概念的。</p><p>但这么多的业务模型，该如何组织呢？怎样补全欠缺的模型，使之成为一个可以落地的方案呢？这就是开发人员要想办法解决的事情了。</p><p>也正是因为在通常情况下，业务模型数量众多，所以在 DDD 的过程中，我们将设计分成了两个阶段：<strong>战略设计</strong>（Strategic Design）和<strong>战术设计</strong>（Tactical Design）。</p><p>战略设计是高层设计，是指将系统拆分成不同的领域。而领域驱动设计，核心的概念就是领域，也就是说，它给了我们一个拆分系统的新视角：按业务领域拆分。</p><p>比如，我把一个电商系统拆分成产品域、订单域、支付域、物流域等。拆分成领域之后，我们识别出来的各种业务对象就会归结到各个领域之中。然而，有时候，不同领域的业务对象会进行交互，比如，我要知道自己订单的物流情况。所以，要在不同的领域之间设计一些交互的方式。</p><p>而战术设计是低层设计，也就是如何具体地组织不同的业务模型。在这个层次上，DDD 给我们提供了一些标准的做法供我们参考。比如，哪种模型应该设计成实体，哪些应该设计成值对象。</p><p>我们还要考虑模型之间是什么样的关系，比如，哪些模型要一起使用，可以成为一个聚合。接下来，我们还需要考虑这些模型从哪来、怎样演变，DDD 同样为我们提供了一些标准的设计概念，比如仓库、服务等等。</p><p>通过战略设计和战术设计，我们就可以把发现出来的不同业务概念各归其位了。</p><h2>总结时刻</h2><p>今天，我们讲了领域驱动设计，这是目前在软件行业内最符合软件发展趋势的一种设计方法，因为它把软件设计的起始点从技术拉到了业务。</p><p>学习领域驱动设计，我们要从通用语言和模型驱动设计入手。通用语言是在业务人员和技术人员之间建立一套共有的语言，开发通用语言的一种实践是事件风暴，这是一种工作坊，通过识别领域事件找到引发事件的命令，找出与事件和命令相关的实体或聚合，帮助团队建立通用语言。</p><p>DDD 的模型设计可以分为战略设计和战术设计。战略设计是高层设计，将系统拆分成领域，战术设计是低层设计，考虑如何组织不同的模型。</p><p>好，我们已经对 DDD 有了一个初步的了解。接下来的两讲，我们就分别来看看，如何进行战略设计和战术设计。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>建立一套业务人员和开发人员共享的通用语言</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/88/03/88d3dd98642fd2d2d619a435d0d85903.jpg?wh=2284*1700\" alt=\"\"></p><h2>思考题</h2><p>最后，我想请你分享一下，你们在实际工作中是如何与业务人员沟通的？欢迎在留言区写下你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":241245,"user_name":"沧浪之水","can_delete":false,"product_type":"c1","uid":1126491,"ip_address":"","ucode":"3819CB439BFB4C","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/5b/ed3b2211.jpg","comment_is_top":false,"comment_ctime":1597222581,"is_pvip":false,"replies":[{"id":"89134","content":"这个比喻实在是太有特色了😂","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1597229350,"ip_address":"","comment_id":241245,"utype":1}],"discussion_count":3,"race_medal":0,"score":"70316699317","product_id":100052601,"comment_content":"如果把写代码比作搬砖的话，那么学习代码设计，无疑就是去蓝翔学了个挖掘机，效率大大提升。至于现在很多程序员追求的各种面试造的火箭，更像是一种企业管理知识，对于大部分搬砖的人，提升意义不大。","like_count":16,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503682,"discussion_content":"这个比喻实在是太有特色了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597229350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411292,"discussion_content":"原来极客时间是个技校","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1635897079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1349024,"avatar":"https://static001.geekbang.org/account/avatar/00/14/95/a0/7e1ac954.jpg","nickname":"叻叻","note":"","ucode":"D124C311BC6938","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586386,"discussion_content":"上过北大青鸟、蓝翔和新东方，学会了用计算机控制挖掘机炒螃蟹","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662179012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238363,"user_name":"jg4igianshu","can_delete":false,"product_type":"c1","uid":1059873,"ip_address":"","ucode":"DE1001BF2D383E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLsia5hqVlTLn17lUBwSpSUzraib7MSH3gOUNWOx8qUwpz3Lp6gFtkIibOMUAouyMGj5RIeTcePUfNkw/132","comment_is_top":false,"comment_ctime":1596152219,"is_pvip":false,"replies":[{"id":"88068","content":"学会抢答了😄","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1596159281,"ip_address":"","comment_id":238363,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53135759771","product_id":100052601,"comment_content":"实体：在时间上有连续性，并且有唯一标识可以来区分的对象，具有生命周期和行为。<br>值对象：用来描述事物的，不区分谁是谁的，不可变的对象，不具有生命周期和行为。","like_count":12,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502723,"discussion_content":"学会抢答了😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596159281,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238617,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1596234957,"is_pvip":true,"replies":[{"id":"88141","content":"DDD其实不是难，而是概念多，缺乏一个结构理解它。另外，很多人欠缺的不是DDD，而是设计的基础知识。这就是我在做的尝试，先铺垫设计的基础知识，然后，再讲DDD，用一个结构化的方式帮你把DDD串起来。<br><br>真正的难点是结合实际工作，把DDD完整地走一遍，看到代码就理解了。<br><br>退一步，可以去看《实现领域驱动设计》的源码。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1596242704,"ip_address":"","comment_id":238617,"utype":1}],"discussion_count":3,"race_medal":0,"score":"44545907917","product_id":100052601,"comment_content":"郑老师，说了实话，《领域驱动设计》这本书一般人真是读不下去，应该耽误了不少人学习DDD。但是说实话，DDD真是太难学了，能把DDD在公司里运用起来，特别是战略设计，几乎就是一个组织变革，需要有同时能够影响业务合作又能引导事件风暴这个高难度的工作坊的人才。虽然像TW这样的公司已经在努力推广这种设计方法了，极客时间也开了《DDD实战课》，但是，离很多公司离这个设计方法还是很远的。DDD之后如何发展，郑老师怎么看？","like_count":10,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502803,"discussion_content":"DDD其实不是难，而是概念多，缺乏一个结构理解它。另外，很多人欠缺的不是DDD，而是设计的基础知识。这就是我在做的尝试，先铺垫设计的基础知识，然后，再讲DDD，用一个结构化的方式帮你把DDD串起来。\n\n真正的难点是结合实际工作，把DDD完整地走一遍，看到代码就理解了。\n\n退一步，可以去看《实现领域驱动设计》的源码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596242704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1055624,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1b/88/ac69f57a.jpg","nickname":"磉盘","note":"","ucode":"1C245991F30A73","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375781,"discussion_content":"硬着头皮看了一遍《领域驱动设计》，确实概念太多，还有很多模式。感觉传达的是一种思想，需要结合着一些例子理解。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621847397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1027346,"avatar":"","nickname":"老码不识途","note":"","ucode":"18CC5EE8532153","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387440,"discussion_content":"因为你不知道面向对象分析与设计，所以觉得难。DDD书里贯穿始终说模型驱动设计，但是你不懂面向对象建模，DDD里又没讲OOD，能看懂就怪了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628172038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237815,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1595981445,"is_pvip":false,"replies":[{"id":"87850","content":"总结得好！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595983725,"ip_address":"","comment_id":237815,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31660752517","product_id":100052601,"comment_content":"总结一下<br>理解DDD就要理解通用语言和模型驱动设计。<br>通用语言就是要把业务人员和开发人员对具体业务概念和逻辑的理解达成一致，可使用事件风暴和彩色建模等方法建立通用语言<br>模型驱动设计可以从战略设计和战术设计两方面入手，战略设计属于高层设计，将系统安装领域拆分；战术设计属于低层设计，考虑的是如何组合业务模型","like_count":7,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502552,"discussion_content":"总结得好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595983725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237828,"user_name":"蓝士钦","can_delete":false,"product_type":"c1","uid":1229516,"ip_address":"","ucode":"726EB5C8EF1249","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","comment_is_top":false,"comment_ctime":1595983879,"is_pvip":false,"replies":[{"id":"87862","content":"先按照一个思路走，否则，你会回到老路上去的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595989554,"ip_address":"","comment_id":237828,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27365787655","product_id":100052601,"comment_content":"领域驱动设计可以和传统的面向数据库设计的方式结合吗，比如引入一个model模块用来聚合模型","like_count":6,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502559,"discussion_content":"先按照一个思路走，否则，你会回到老路上去的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595989554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1188090,"avatar":"https://static001.geekbang.org/account/avatar/00/12/20/fa/6ebaacb0.jpg","nickname":"一马行千里","note":"","ucode":"7725D8629B0265","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321393,"discussion_content":"老师的回复有先见之明","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604575255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237893,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1595998376,"is_pvip":false,"replies":[{"id":"88924","content":"总结得好。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1597056715,"ip_address":"","comment_id":237893,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23070834856","product_id":100052601,"comment_content":"1.各自阐述理解。<br>2.消除分歧。<br>3.达成共识。","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502581,"discussion_content":"总结得好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597056715,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1987136,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/52/40/e3dbca26.jpg","nickname":"旭日东升","note":"","ucode":"81B3AD64703B5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298274,"discussion_content":"统一语言 其实从很早就有了，尤其是 一句古话  说客户的语言。 \n至于ddd 战略从业务域来区分 战术上 是否可以从时间线的角度来考虑 去区分 对象 or 值对象。 从发生到使用到成熟再到销毁 都无人关心 则为值对象。比较简单的就是 卖车 和修车的 对轮子的关注点 造成了轮子倒底是 不是值对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597233200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250743,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1601207503,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"14486109391","product_id":100052601,"comment_content":"以前大概也是从“面向数据库编程”到“面向对象”，打引号是说并不是真正的面向对象。<br><br>现在的领域驱动设计可能更像十几年前的面向对象设计，流行，但是大多数用的不对，面向对象现在也还是假装使用或者错误使用的更多一些。<br><br>敏捷编程也提倡业务人员和技术人员坐在一起，有没有通用语言和模型驱动可能并没有那么重要。而领域驱动设计可能是这种方法论的理论拔高，另外似乎是针对更宏观的系统。<br><br>专栏里面说，领域驱动设计是“软件行业内最符合软件发展趋势的一种设计方法”，不是最流行的或者最主流的。<br><br>留言里面有同学说，以前也提倡“说客户的语言”，这个似乎是技术向业务靠拢，而领域驱动设计似乎是更多要求双方相向靠近。<br><br>以前的实际工作中，主要是靠技术人员去观察业务人员的操作，然后猜测业务人员的想法，然后做出来原型看是否满足需要；也有“空中架构师”不顾业务，随手拿来新名词、新技术，反过来要求业务去适应的。成本高是一方面，另外效果也差强人意。","like_count":3},{"had_liked":false,"id":238096,"user_name":"人间四月天","can_delete":false,"product_type":"c1","uid":1048314,"ip_address":"","ucode":"11BE219C23EEBC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/fa/2a046821.jpg","comment_is_top":false,"comment_ctime":1596070713,"is_pvip":false,"replies":[{"id":"88922","content":"这个理解的角度是在新事物和已有知识建立起连接的角度，很有趣。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1597056631,"ip_address":"","comment_id":238096,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14480972601","product_id":100052601,"comment_content":"领域事件风暴，使用的是事件，动作，实体，建立基本业务模型，我认为这是时序图，状态图的另外一种表达，战略设计，很像业务架构设计，按照领域职责去划分。<br>建立一个好的平台，需要做好职责划分，配置团队，要不就是无尽的折磨。<br>","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502643,"discussion_content":"这个理解的角度是在新事物和已有知识建立起连接的角度，很有趣。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597056631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1238010,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRMibegk3cAeBEOHbfUwopkyOxoricQCkTNQI2zSm5q0p5w4chvd1RibE0T3lMuZJibAOPZfR9AsHMww/132","nickname":"MrMoonLight","note":"","ucode":"36DB47AA41CA12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315988,"discussion_content":"我个人理解跟时序图状态图还不一样，事件，动作，实体是从业务出发，是从目标(事件)出发倒推动作，倒推实体。也就是重心在业务，在商业价值分析，是战略层面，而时序图，状态图应该属于战术层面设计了，一点个人浅见","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603343167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241578,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1597363101,"is_pvip":false,"replies":[{"id":"100138","content":"难道已经有了这么多，还不够吗？精通一样工具，就已经很厉害了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611728973,"ip_address":"","comment_id":241578,"utype":1}],"discussion_count":2,"race_medal":1,"score":"10187297693","product_id":100052601,"comment_content":"<br>老师，再推荐一些建立通用语言和设计领域模型的方法和工具吧。<br>","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503780,"discussion_content":"难道已经有了这么多，还不够吗？精通一样工具，就已经很厉害了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611728973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309176,"discussion_content":"极客时间有《DDD 实战课》，再加上《领域驱动设计》和《实现领域驱动设计》两本书，以及相关的源代码，应该足够学习了。\n\n我也是一直想学，但却挤不出时间来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601206399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237887,"user_name":"小学一年级","can_delete":false,"product_type":"c1","uid":1217230,"ip_address":"","ucode":"59B9805D7C2D92","user_header":"https://static001.geekbang.org/account/avatar/00/12/92/ce/9d24cb2c.jpg","comment_is_top":false,"comment_ctime":1595996880,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10185931472","product_id":100052601,"comment_content":"数据加函数用了好多年，现在终于想通了为啥 EF 有种 codefirst编程模式， 因为别人早就想通了 面向对象编程！！！ ","like_count":2},{"had_liked":false,"id":294723,"user_name":"花落菩提","can_delete":false,"product_type":"c1","uid":1019958,"ip_address":"","ucode":"B297448E82DEFC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ9oglNbMCiauibXTw8KbpxhSEboDMdbRyHN1fK3EEj19KbQRlvj8GXqw5g9r2MibPlmlzqqGBXSsteA/132","comment_is_top":false,"comment_ctime":1622073948,"is_pvip":true,"replies":[{"id":"107561","content":"DDD也是有专栏的，可以看看","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1622975735,"ip_address":"","comment_id":294723,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5917041244","product_id":100052601,"comment_content":"领域驱动设计学起来比较难，真正将DDD落地的公司比较少，第一个是相关概念比较多，比较偏理论，可以参考借鉴的真实案例和代码相对较少，很多网上的案例介绍得都不够深入，代码也比较少。第二是需要业务、产品、研发配合去实践。<br>老师有没有推荐的DDD方面的案例，介绍得比较详细深入的，也有对应的代码可以参考学习的DDD的案例呢。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520782,"discussion_content":"DDD也是有专栏的，可以看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622975735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287685,"user_name":"加加林","can_delete":false,"product_type":"c1","uid":1334581,"ip_address":"","ucode":"071014A4857432","user_header":"https://static001.geekbang.org/account/avatar/00/14/5d/35/50c80adf.jpg","comment_is_top":false,"comment_ctime":1618108646,"is_pvip":false,"replies":[{"id":"105003","content":"这实际上需求层面，把需求澄清清楚，还不到软件设计。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1619013781,"ip_address":"","comment_id":287685,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5913075942","product_id":100052601,"comment_content":"想请问一下，与业务人员交流，在互联网行业，传统的方式有文档以及用axure 高保真原型的方式向前后端开发人员甚至设计师展示产品的最终形态，尽量做到无遗漏无重复，怎么看待这种开发方式，或者说，互联网行业，与把传统行业信息化过程中的领域驱动设计的关系，和使用场景？","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518389,"discussion_content":"这实际上需求层面，把需求澄清清楚，还不到软件设计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619013781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":268040,"user_name":"第一装甲集群司令克莱斯特","can_delete":false,"product_type":"c1","uid":1265707,"ip_address":"","ucode":"4E8FBB23AD860B","user_header":"https://static001.geekbang.org/account/avatar/00/13/50/2b/2344cdaa.jpg","comment_is_top":false,"comment_ctime":1608036537,"is_pvip":false,"replies":[{"id":"97475","content":"一个系统值得设计的真正原因。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1608251859,"ip_address":"","comment_id":268040,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5903003833","product_id":100052601,"comment_content":"我认为系统中，代表业务的模型是最有价值的，值得好好设计，方便维护和扩展！","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511824,"discussion_content":"一个系统值得设计的真正原因。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608251859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359367,"user_name":"杜秀清","can_delete":false,"product_type":"c1","uid":2952514,"ip_address":"上海","ucode":"4D33DD69E8D238","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGiahPncXAMXlRibCVapHxib4V90Pxa56QQr6iatHmHn77YibSibWhdBe9YKxrD5ria9ZI4JfFjD1SecAmg/132","comment_is_top":false,"comment_ctime":1665477902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665477902","product_id":100052601,"comment_content":"UML建模：领域模型、分析类，再逐步过渡到设计类。前面偏业务侧，后面偏实现侧","like_count":0},{"had_liked":false,"id":346373,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1653061724,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653061724","product_id":100052601,"comment_content":"建立一套业务人员和开发人员共享的通用语言--记下来","like_count":0},{"had_liked":false,"id":342265,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1650164244,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1650164244","product_id":100052601,"comment_content":"现在公司的开发和业务沟通基本靠产品，所以很难受。","like_count":0},{"had_liked":false,"id":319633,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1635897056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635897056","product_id":100052601,"comment_content":"彩色建模的方法很好，写文档的时候用emoji表情标记也可以快速找到自己关注的地方。","like_count":0},{"had_liked":false,"id":294249,"user_name":"磉盘","can_delete":false,"product_type":"c1","uid":1055624,"ip_address":"","ucode":"1C245991F30A73","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/88/ac69f57a.jpg","comment_is_top":false,"comment_ctime":1621850335,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1621850335","product_id":100052601,"comment_content":"感觉领域驱动设计传递的真正价值是：通过分离关注点解决复杂业务。重视业务，业务反应到软件设计编码，代码的迭代根据业务的变化而变化。","like_count":0},{"had_liked":false,"id":294247,"user_name":"磉盘","can_delete":false,"product_type":"c1","uid":1055624,"ip_address":"","ucode":"1C245991F30A73","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/88/ac69f57a.jpg","comment_is_top":false,"comment_ctime":1621849879,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1621849879","product_id":100052601,"comment_content":"个人理解，领域驱动设计不同于软件开发方式如瀑布模型和敏捷开发，它是一种思想或设计方法，解决的是需求到设计的问题，应对复杂业务的方法。<br><br>最早提出应该是服务于面向对象设计开发，但这种思想更适合现在的微服务模式。<br><br>领域驱动设计= 模型驱动设计，通过建立通用语言，找到模型，确定模型的细节，模型之间的关系。<br><br><br>","like_count":0},{"had_liked":false,"id":256058,"user_name":"Bug? Feature!","can_delete":false,"product_type":"c1","uid":1164531,"ip_address":"","ucode":"F8FA8A0094FBA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","comment_is_top":false,"comment_ctime":1603516335,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603516335","product_id":100052601,"comment_content":"DDD 的模型设计可以分为战略设计和战术设计。战略设计是高层设计，将系统拆分成领域，战术设计是低层设计，考虑如何组织不同的模型。","like_count":0}]}