{"id":258954,"title":"加餐 | 函数式编程拾遗","content":"<p>你好，我是郑晔！</p><p>我们之前用了三讲的篇幅讲了函数式编程，相信函数式编程在你心目中已经没有那么神秘了。我一直很偏执地认为，想要成为一个优秀的程序员，函数式编程是一定要学习的，它简直是一个待人发掘的宝库，因为里面的好东西太多了。</p><p>不过，考虑到整个课程的主线，我主要选择了函数式编程在设计上有较大影响的组合性和不变性来讲。但其实，函数式编程中有一些内容，虽然不一定是在设计上影响那么大，但作为一种编程技巧，也是非常值得我们去了解的。</p><p>所以，我准备了这次加餐，从函数式编程再找出一些内容来，让你来了解一下。相信我，即便你用的不是函数式编程语言，这些内容对你也是很有帮助的。</p><p>好，我们出发！</p><h2>惰性求值</h2><p>还记得我们第17讲的那个学生的例子吗？我们继续使用学生这个类。这次简化一点，我只使用其中的几个字段：</p><pre><code>class Student {\n  // 学生姓名\n  private String name;\n  // 年龄\n  private long age;\n  // 性别\n  private Gender gender;\n  \n  public Student(final String name, \n                 final long age, \n                 final Gender gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n  }\n}\n</code></pre><p>然后，我们来看一段代码，你先猜猜这段代码的执行结果会是什么样子：</p><pre><code>// 数据准备\nStudent jack = new Student(&quot;Jack&quot;, 18, Gender.MALE);\nStudent rose = new Student(&quot;Rose&quot;, 18, Gender.FEMALE); \nList&lt;Person&gt; students = asList(jack, rose);\n\n// 模拟对象\nFunction&lt;Person, String&gt; function = mock(Function.class); \nwhen(function.apply(jack)).thenReturn(&quot;Jack&quot;);\n\n// 映射\nstudents.stream().map(function); \n\n// 验证\nverify(function).apply(jack);\n</code></pre><p>这段代码里，我们用到了一个mock框架mockito，核心就是验证这里的function变量是否得到了正确的调用，这其中就用到了我们在第18讲中提到的map函数。</p><p>也许你已经猜到了，虽然按照普通的Java代码执行逻辑，verify的结果一定是function得到了正常的调用，但实际上，这里的function并没有调用。也就是说，虽然看上去map函数执行了，但并没有调用到function的apply方法。你可以试着执行这段代码去验证一下。</p><!-- [[[read_end]]] --><p>为什么会是这样呢？答案就在于这段代码是惰性求值的。</p><p>什么叫惰性求值呢？<strong>惰性求值（Lazy Evaluation）是一种求值策略，它将求值的过程延迟到真正需要这个值的时候</strong>。惰性求值的好处就在于可以规避一些不必要的计算，尤其是规模比较大，或是运行时间比较长的计算。</p><p>其实，如果你学习过设计模式，惰性求值这个概念你应该并不陌生。有一些设计模式就是典型的惰性求值，比如，Proxy模式，它就是采用了惰性求值的策略，把一些消耗很大的计算延迟到不得不算的时候去做。还有Singleton模式有时也会采用惰性求值的策略，在第一次访问的时候，再去生成对象。</p><p>在函数式编程中，惰性求值是一种很常见的求值策略，也是因为惰性求值的存在，我们可以做出很多有趣的事情。</p><h2>无限流</h2><p>在传统的编程方式中，我们熟悉的集合类都是有限长度的，因为集合中的每个元素都是事先计算好的。但现在有了惰性求值，我们就可以创造出一个无限长的集合。</p><p>你可能会有疑问，怎么可能会有无限长的集合呢？内存也存不下啊？如果你这么想的话，说明你的思路还是传统的方式。无限长集合中的元素并不是预置进去的，而是在需要的时候，才计算出来的。</p><p><strong>无限长集合真正预置进去的是，元素的产生规则</strong>。这样一来，元素就会像流水一样源源不断地产生出来，我们将这种集合称为无限流（Infinite Stream）。</p><p>比如，我们要产生一个自然数的集合，可以这么做：</p><pre><code>Stream.iterate(1, number -&gt; number + 1)\n</code></pre><p>在这里，我们定义了这个集合的第一个元素，然后给出了后续元素的推导规则，一个无限流就产生了。</p><p>当然，因为惰性求值的存在，这么定义的一个无限流并不会做真正的计算，只有在我们需要用到其中的一些元素时，计算才会执行。比如，我们可以按需取出一些元素，在下面这段代码中，我们跳过了无限流的前两个元素，然后，取出三个元素，将结果打印了出来：</p><pre><code>Stream.iterate(0, number -&gt; number + 1)\n  .skip(2)\n  .limit(3)\n  .forEach(System.out::println); \n</code></pre><p>也许你会关心，什么情况下无限流才会真正的求值呢？其实，我们前面讲组合性时提到过，有一些基础的列表操作，列表操作可以分为两类，中间操作（Intermediate Operation）和终结操作（Terminal Operation），像map和filter这一类的就是中间操作，而像reduce一类的就属于终结操作。只有终结操作才需要我们给出一个结果，所以，只有终结操作才会引起真正的计算。</p><p>你可能会好奇，无限流的概念很有意思，但它有什么用呢？如果你对无限流有了认识，很多系统的设计都可以看作成一个无限流。比如，一些大数据平台，它就是有源源不断的数据流入其中，而我们要做的就是给这个无限流提供各种转换，你去看看现在炙手可热的Flink，它使用的就是这种思路。</p><h2>记忆</h2><p>我们再来看另一个关于惰性求值带来的有趣做法：记忆（Memoization）。</p><p>前面说过，Proxy模式之所以要采用惰性求值的策略，一个重要的原因就是真正的计算部分往往是消耗很大的。所以，一旦计算完成，一个好的策略就是将计算的结果缓存起来，这样，再次调用时就不必重新计算了。其实，这种做法就是记忆。</p><p>记忆，在Wikipedia上是这样定义的：</p><blockquote>\n<p>在计算中，记忆是一种优化技术，主要用于加速计算机程序，其做法就是将昂贵函数的结果存储起来，当使用同样的输入再次调用时，返回其缓存的结果。</p>\n</blockquote><p>这里的一个重点是，同样的输入。我们已经知道了，函数式编程中的函数是纯函数，同样的输入必然会给出同样的输出。所以，我们就不难理解，记忆这种技术在函数式编程中的作用了。</p><p>实现记忆这种技术并不难，下面就给出了一个实现，这里用到了Java并发库中的类AtomicReference，从而消除了可能产生的多线程问题：</p><pre><code>public static &lt;T&gt; Supplier&lt;T&gt; memoize(Supplier&lt;T&gt; delegate) {\n  AtomicReference&lt;T&gt; value = new AtomicReference&lt;&gt;();\n  return () -&gt; {\n    T val = value.get();\n    if (val == null) {\n      synchronized(value) {\n        val = value.get();\n        if (val == null) {\n          val = Objects.requireNonNull(delegate.get());\n          value.set(val);\n        }\n      }\n    }\n    return val;\n  };\n}\n</code></pre><p>这个实现用起来也很简单：</p><pre><code>long ultimateAnswer = memoize(() -&gt; {\n    // 这里有一个常常的计算\n    // 返回一个终极答案\n    return 42;\n})\n</code></pre><p>在这里，memoize是一个通用的实现，它的适用范围很广。我们仔细对比就不难发现，这里我们已经实现了Proxy模式的能力，换言之，有了它，我们可以不再需要Proxy模式。后面我们讲到设计模式也会提到，一些设计模式是受限于程序设计语言自身能力不足而出现的，这里也算为这个观点添加了一个注脚。</p><h2>Optional</h2><p>让我们回到学生的例子上，如果想获取一个学生出生的国家，我们该怎么写这段代码呢？直觉上的写法是这样的：</p><pre><code>public Country getBirthCountry() { \n  return this.getBirthPlace() // 获取出生地\n              .getCity()      // 获取城市\n              .getProvince()  // 获取省份\n              .getCountry();  // 获取国家\n}\n</code></pre><p>然而，在真实项目中，代码并不能这么写，因为这样可能会出现空指针，所以，我们不得不把代码写成这样：</p><pre><code>public Country getBirthCountry() {\n  Place place = this.birthPlace;\n  if (place != null) {\n    City city = place.getCity();\n    if (city != null) {\n      Province province = city.getProvince();\n      if (province != null) {\n        return province.getCountry();\n      }\n    }\n  }\n\n  return null; \n}\n</code></pre><p>这是一段令人作呕的代码，但我们不得不这么写，因为空指针总是一个令人头疼的问题。事实上，作为程序员，我们经常会有忘记做空指针检查的时候。这不是一个人的问题，而是整个行业的问题， IT 行业每年都会因此造成巨大的损失。</p><blockquote>\n<p>我将其称为自己犯下的十亿美元错误……<br>\nI call it my billion-dollar mistake…<br>\n——Sir C. A. R. Hoare，空引用的发明者</p>\n</blockquote><p>难道空指针就是一个无解的问题吗？程序员们并不打算束手就擒，于是，一种新的解决方案产生了，就是可选对象。这个解决方案在Java 8中叫Optional，在Scala中叫Option。接下来，我们就以Java 8中的Optional为例进行讲解。</p><p>Optional是一个对象容器，其中可能包含着一个非空的值，也可能不包含。这是什么意思呢？它和直接使用对象的场景是一一对应的，如果包含值，就对应着就是有值的场景；而不包含，则对应着值为空的场景。</p><p>那该如何去创建一个Optional对象呢？</p><ul>\n<li>如果有一个非空对象，可以用 of() 将它包装成一个 Optional 对象；</li>\n<li>如果要表示空，可以返回一个 empty()；</li>\n<li>如果有一个从别处传来的对象，你不知道它是不是空，可以用 ofNullable()。</li>\n</ul><pre><code>Optional.of(&quot;Hello&quot;); // 创建一个Optional对象，其中包含了&quot;Hello&quot;字符串\nOptional.empty(); // 创建了一个表示空对象的Optional对象。\nOptional.ofNullable(instance); // 创建了一个Optional对象，不知instance是否为空。\n</code></pre><p>也许你会好奇，直接使用对象都解决不了问题，把对象放到一个容器里就解决了？还真能。因为你要用这个对象的时候，需要把对象取出来，而要取出对象，你就需要判断一下这个对象是否为空。就像下面这面代码这样：</p><pre><code>if (country.isPresent()) {\n  return country.get();\n} \n</code></pre><p>只有Optional里包含的是一个非空的对象时， get() 方法才能正常执行，否则，就会抛出异常。显然，当你调用 get()的时候，意图是很明显的，我要处理的是一个非空的值，所以，就必须加上一段判断对象是否存在的代码。</p><p>这比直接访问对象多用了一步，但正是这多出的一步让你的大脑必须想一下，自己是否需要加上判空的处理，而不是像普通对象一样，一下子就滑了过去。</p><p>而且因为 get()本身是有意图的，用工具也可以扫描出缺失的判断，比如，如果你用IntelliJ IDEA写程序的话，不加判断，直接get()的话，它就会给你一个警告。</p><p>使用Optional，我们还可以给空对象增加一些额外的处理，比如给个缺省值：</p><pre><code>country.orElse(china);  // 返回一个缺省的对象\n</code></pre><p>也可以生成一个新的对象：</p><pre><code>country.orElseGet(Country::new); // 调用了一个函数生成了一个新对象\n</code></pre><p>或是抛出异常：</p><pre><code>country.orElseThrow(IllegalArgumentException::new); \n</code></pre><p>其实，我们拿到一个值之后，往往要做一些更多的处理。使用了Optional，我们甚至可以不用把其中的值取出来，直接就做一些处理了。比如，它提供map、flatMap、filter等一些方法，就是当Optional包含的对象不为空时，调用对应的方法做处理，为空的时候，直接返回表示空的Optional对象。</p><p>从下面这张图，你就能够理解这些方法的基本逻辑：</p><p><img src=\"https://static001.geekbang.org/resource/image/56/59/563d937c8cf9e3772a10cf3b34fd4b59.jpg?wh=2284*1285\" alt=\"\"></p><p>好，有了对Optional的基本了解，我们在日常工作中怎么用它呢？很简单，<strong>在方法需要返回一个值时，如果返回的对象可能为空，那就返回一个Optional</strong>。这样就给了这个方法使用者一个提示，这个对象可能为空，小心处理。</p><p>比如，获取学生的出生地，方法可以这么写：</p><pre><code>Optional&lt;Place&gt; getBirthPlace() {\n  return Optional.ofNullable(this.birthPlace);\n}\n</code></pre><p>好，回到我们前面的问题上。获取一个学生出生的国家，代码可以怎么写呢？如果相应的方法都改写成Optional，代码写出来会是这个样子：</p><pre><code>public Optional&lt;Country&gt; getBirthCountry() {\n  return Optional.ofNullable(this.birthPlace)\n           .flatMap(Place::getCity)\n           .flatMap(City::getProvince)\n           .flatMap(Province::getCountry);\n}\n</code></pre><p>虽然我们不能说这段代码一定有多优雅，但是至少比层层嵌套的if判断要整洁一些了。</p><p>最后，你可能会问，这个Optional和函数式编程有什么关系呢？其实，Optional将对象封装起来的做法来自于函数式编程中一个叫Monad的概念，你可以简单地把它理解成一个对象容器。Optional就对应着其中的一种：Maybe Monad。</p><p>我们前面也看到了，正是因为这个容器的存在，解决了很多问题。Monad 的概念解释起来还有很多东西要说，篇幅所限，就不过多阐述了，有兴趣不妨自己去了解一下。</p><p>这种对象容器的思想也逐渐在开枝散叶，比如，在Rust的标准库里，有一个<a href=\"http://doc.rust-lang.org/std/result/\">Result</a>，用来定义可恢复的故障。它可以是一个正常值，也可以是一个错误值：</p><pre><code>enum Result&lt;T, E&gt; {\n   Ok(T),\n   Err(E),\n}\n</code></pre><p>下面是一段摘自Rust标准库文档的代码，当我们有了前面对于Optional的讲解，理解起这段代码也就容易多了。</p><pre><code>enum Version { Version1, Version2 }\n\n// 定义一个解析版本的函数\nfn parse_version(header: &amp;[u8]) -&gt; Result&lt;Version, &amp;'static str&gt; {\n    match header.get(0) {\n        None =&gt; Err(&quot;invalid header length&quot;), // 无法解析，返回错误\n        Some(&amp;1) =&gt; Ok(Version::Version1),  // 解析出版本1\n        Some(&amp;2) =&gt; Ok(Version::Version2),  // 解析出版本2\n        Some(_) =&gt; Err(&quot;invalid version&quot;),  // 无效版本，返回错误\n    }\n}\n\nlet version = parse_version(&amp;[1, 2, 3, 4]);\n// 根据返回值进行处理\nmatch version {\n    Ok(v) =&gt; println!(&quot;working with version: {:?}&quot;, v),\n    Err(e) =&gt; println!(&quot;error parsing header: {:?}&quot;, e),\n}\n</code></pre><h2>总结时刻</h2><p>今天，我给你讲了两个比较有用的函数式编程的概念：惰性求值和Optional。</p><p>惰性求值是一种求值策略，它将求值的过程延迟到真正需要这个值的时候，其作用就是规避一些不必要的计算。因为惰性求值的存在，还衍生出一些有趣的做法，比如，无限流和记忆。无限流启发了现在的一些大数据平台的设计，而记忆可以很好地替代Proxy模式。</p><p>Optional是为了解决空对象而产生的，它其实就是一个对象容器。因为这个容器的存在，访问对象时，需要增加一步思考，减少犯错的几率。</p><p>正如我在前面课程中讲到，函数式编程中有很多优秀的内容，值得我们去学习借鉴。我在这几讲中讲到的内容，也只能说是管中窥豹，帮助你见识函数式编程一些优秀的地方。</p><p>如果你想了解更多函数式编程，不妨读读《<a href=\"http://book.douban.com/subject/1148282/\">计算机程序的构造与解释</a>》，体会一层一层构建抽象的美妙。如果还想了解更多，那就找一门函数式编程语言去学习一下。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>花点时间学习函数式编程。</strong></p><h2>思考题</h2><p>现在，你已经对函数式编程不陌生了，我想请你谈谈学习函数式编程的感受，无论你是刚刚跟着我学习的，还是之前已经学习过的，欢迎在留言区分享你的想法。</p><p>感谢阅读，如果你觉得这一讲的内容对你有帮助的话，也欢迎把它分享给你的朋友。</p>","comments":[{"had_liked":false,"id":233469,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1594340256,"is_pvip":true,"replies":[{"id":"86156","content":"多谢提醒纠错！<br><br>非常好的补充，你的补充提升了这篇文章的整体价值。<br><br>你对 Monad 的观点，我非常同意！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594344900,"ip_address":"","comment_id":233469,"utype":1}],"discussion_count":5,"race_medal":0,"score":"87493686176","product_id":100052601,"comment_content":"* 记忆化是Memoization，正文里应该是拼错了，示例代码里是对的；<br>* 个人理解单凭记忆化还无法取代Proxy模式，因为Proxy模式主要是做方法调用的分发(dispatch)，在分发时可以做些额外的事情（比如记忆化）。单是实现动态分发的话Java里可以用反射，Ruby里可以用method_missing等，并不是一种很稀缺的语言特性；<br>* Option的价值在于类型而非对象。是类型的话在编译时编译器就可以进行检查，而不是依赖程序员在运行时进行检查（或是依赖IDE）。能处理Option的函数也是这个思路，程序员在进行中间处理时可以不用自己处理empty值，只需要确保类型正确；<br>* Monad是个被诅咒的名字，日常开发中不应该提到它 ;-)","like_count":21,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501047,"discussion_content":"多谢提醒纠错！\n\n非常好的补充，你的补充提升了这篇文章的整体价值。\n\n你对 Monad 的观点，我非常同意！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594344900,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290146,"discussion_content":"大致了解了下monad。go里面chan <- val 和val ：= <- chan算不算呢。为什么说monad是被诅咒的名字，有缺陷还是有梗？能麻烦解答下吗。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594358320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290158,"discussion_content":"是个梗，下面的同学提到了。原始梗大概是这个：https://youtu.be/dkZFtimgAcM 有些长，周末愉快~ Monad是个（范畴论的）抽象概念，只要符合条件都可以叫Monad。日常开发当中我们只会说这段代码用到了Option，或是那段代码用到了Promise，而不会说这些都是用Monad实现的。那样就好比是说代码是用设计模式实现的一样，正确但无助于理解交流。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1594362177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":290146,"ip_address":""},"score":290158,"extra":""},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1667175,"avatar":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","nickname":"qinsi","note":"","ucode":"090D9C4068FF12","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":290884,"discussion_content":"soga 3Q老哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594633121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":290158,"ip_address":""},"score":290884,"extra":""}]},{"author":{"id":1141444,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6a/c4/8679ca8a.jpg","nickname":"廖熊猫","note":"","ucode":"8E8C475CD11FBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290098,"discussion_content":"当我学会什么是Monad的时候，我就被诅咒了，我再也无法解释什么是Monad了 XD","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594344273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235602,"user_name":"奔奔奔跑","can_delete":false,"product_type":"c1","uid":1210265,"ip_address":"","ucode":"F86EC205DCAACE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Gswh7ibY4tubXhp0BXOmV2pXZ3XsXic1d942ZMAEgWrRSF99bDskOTsG1g172ibORXxSCWTn9HWUX5vSSUVWU5I4A/132","comment_is_top":false,"comment_ctime":1595122958,"is_pvip":false,"replies":[{"id":"87054","content":"知和行的差异，首先，你要知道有哪些知识，其次，是知道怎么在开发中运用这些知识。<br><br>在这个专栏里，我帮助大家解决的是知的问题，因为很多人不知道有哪些软件设计的知识。至于行，就需要在每天的日常开发中，多问问自己这段代码写得是否破坏了某个设计原则。<br><br>软件设计是日常的功夫，需要在每次写代码的时候，都去问问自己。只有通过不断地练习，让这些知识内化为自己的一部分，才算是真正学会了。<br><br>当然，如果有人能够近身指导会好一些，这需要通过训练营的形式进行训练，目前，这种训练营我只做过一些企业内训，还没有成为大规模的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595202369,"ip_address":"","comment_id":235602,"utype":1}],"discussion_count":3,"race_medal":0,"score":"35954861326","product_id":100052601,"comment_content":"老师您好，有幸阅读本专栏，让我见识到了优秀的程序对代码认知应该是怎么样的！但是得到了老师的内功心法，感觉有劲使不出来，总差一层窗户纸。不知道为啥，希望老师能够指点！谢谢","like_count":9,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501784,"discussion_content":"知和行的差异，首先，你要知道有哪些知识，其次，是知道怎么在开发中运用这些知识。\n\n在这个专栏里，我帮助大家解决的是知的问题，因为很多人不知道有哪些软件设计的知识。至于行，就需要在每天的日常开发中，多问问自己这段代码写得是否破坏了某个设计原则。\n\n软件设计是日常的功夫，需要在每次写代码的时候，都去问问自己。只有通过不断地练习，让这些知识内化为自己的一部分，才算是真正学会了。\n\n当然，如果有人能够近身指导会好一些，这需要通过训练营的形式进行训练，目前，这种训练营我只做过一些企业内训，还没有成为大规模的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595202369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210265,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Gswh7ibY4tubXhp0BXOmV2pXZ3XsXic1d942ZMAEgWrRSF99bDskOTsG1g172ibORXxSCWTn9HWUX5vSSUVWU5I4A/132","nickname":"奔奔奔跑","note":"","ucode":"F86EC205DCAACE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292371,"discussion_content":"谢谢老师，期待老师的代码训练营！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595207513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1549364,"avatar":"","nickname":"Geek_3b1096","note":"","ucode":"A6BD92B79B3632","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1210265,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Gswh7ibY4tubXhp0BXOmV2pXZ3XsXic1d942ZMAEgWrRSF99bDskOTsG1g172ibORXxSCWTn9HWUX5vSSUVWU5I4A/132","nickname":"奔奔奔跑","note":"","ucode":"F86EC205DCAACE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295965,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596416835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":292371,"ip_address":""},"score":295965,"extra":""}]}]},{"had_liked":false,"id":234310,"user_name":"饭","can_delete":false,"product_type":"c1","uid":1610573,"ip_address":"","ucode":"B3F1702D4DE604","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKj3GbvevFibxwJibTqm16NaE8MXibwDUlnt5tt73KF9WS2uypha2m1Myxic6Q47Zaj2DZOwia3AgicO7Q/132","comment_is_top":false,"comment_ctime":1594641176,"is_pvip":false,"replies":[{"id":"86476","content":"想更多了解什么，尽管说。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594644338,"ip_address":"","comment_id":234310,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18774510360","product_id":100052601,"comment_content":"很庆幸能订阅这个专栏，希望老师能出第二部软件设计方面的课程，我觉得您的课程才是大宝藏","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501345,"discussion_content":"想更多了解什么，尽管说。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594644338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1610573,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKj3GbvevFibxwJibTqm16NaE8MXibwDUlnt5tt73KF9WS2uypha2m1Myxic6Q47Zaj2DZOwia3AgicO7Q/132","nickname":"饭","note":"","ucode":"B3F1702D4DE604","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290945,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594647358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236879,"user_name":"naijiz","can_delete":false,"product_type":"c1","uid":1108816,"ip_address":"","ucode":"7EA03F41E3DA33","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/50/21cb3c67.jpg","comment_is_top":false,"comment_ctime":1595575289,"is_pvip":false,"replies":[{"id":"87540","content":"你要使用实际的对象时，你必须考虑取出来的问题，就会考虑判断的问题，不像直接使用对象，缺少了一步思考，就容易犯错误。所以，重点在于，减少犯错误的可能性。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595587139,"ip_address":"","comment_id":236879,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14480477177","product_id":100052601,"comment_content":"老师，我有个不懂的地方，在使用Optional的时候，该空的还是会空，该判断的还是要判断，这个容器是只解决嵌套if的问题吗？","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502240,"discussion_content":"你要使用实际的对象时，你必须考虑取出来的问题，就会考虑判断的问题，不像直接使用对象，缺少了一步思考，就容易犯错误。所以，重点在于，减少犯错误的可能性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595587139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320296,"user_name":"Fredo","can_delete":false,"product_type":"c1","uid":1438470,"ip_address":"","ucode":"681D6692617DAB","user_header":"https://static001.geekbang.org/account/avatar/00/15/f3/06/8da1bf0c.jpg","comment_is_top":false,"comment_ctime":1636206619,"is_pvip":false,"replies":[{"id":"116450","content":"Paul Graham 是个优秀的程序员，他对 Lisp 是有偏爱的，而且 Lisp 能够提供的抽象能力很强，它也成为了很多高手的挚爱。抽象这种东西要求很高的，大多数人的水平达不到，我们这个专栏讲的其实就是如何构建抽象。Lisp 也正是因为太强大了，很多人不能很好的理解，所以，它的流行度也很低。Lisp 是一个很好的思维训练工具，但不是大部分人的营生。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1636599829,"ip_address":"","comment_id":320296,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10226141211","product_id":100052601,"comment_content":"最近看黑客与画家这本书，里面一节谈编程语言Lisp，是朝着数学的方法发展。作者说 编程语言现在的发展不过刚刚赶上1958年的Lisp语言的水平，很吃惊 翻了下，书是04年出版的。那现在的编程语言跟Lisp语言比何如呢？","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529945,"discussion_content":"Paul Graham 是个优秀的程序员，他对 Lisp 是有偏爱的，而且 Lisp 能够提供的抽象能力很强，它也成为了很多高手的挚爱。抽象这种东西要求很高的，大多数人的水平达不到，我们这个专栏讲的其实就是如何构建抽象。Lisp 也正是因为太强大了，很多人不能很好的理解，所以，它的流行度也很低。Lisp 是一个很好的思维训练工具，但不是大部分人的营生。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636599829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235369,"user_name":"giteebravo","can_delete":false,"product_type":"c1","uid":1005290,"ip_address":"","ucode":"C087E8D6B5A98B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/56/ea/32608c44.jpg","comment_is_top":false,"comment_ctime":1594985120,"is_pvip":false,"replies":[{"id":"86940","content":"至少知道了那里有花有月。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594991999,"ip_address":"","comment_id":235369,"utype":1}],"discussion_count":2,"race_medal":1,"score":"10184919712","product_id":100052601,"comment_content":"<br>雾里看花，水中望月～<br>","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501698,"discussion_content":"至少知道了那里有花有月。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594991999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1637632,"avatar":"https://static001.geekbang.org/account/avatar/00/18/fd/00/6cff1d24.jpg","nickname":"Y","note":"","ucode":"F57929C11BD34C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293095,"discussion_content":"老师说的对， 知道了那里有花有月， 虽然目前我还没拿到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595430784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233498,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1594344093,"is_pvip":false,"replies":[{"id":"86221","content":"语言上已经开始普及，思想上路还长。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594364551,"ip_address":"","comment_id":233498,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10184278685","product_id":100052601,"comment_content":"函数式编程是应当好好普及，这是一个编程思想的转变<br>","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501068,"discussion_content":"语言上已经开始普及，思想上路还长。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594364551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233492,"user_name":"被雨水过滤的空气","can_delete":false,"product_type":"c1","uid":1080417,"ip_address":"","ucode":"1A6316040EB6A7","user_header":"https://static001.geekbang.org/account/avatar/00/10/7c/61/76b1b888.jpg","comment_is_top":false,"comment_ctime":1594343431,"is_pvip":false,"replies":[{"id":"86157","content":"在实际工作中，努力把外部的部分隔离开来。让自己的代码纯起来。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1594344946,"ip_address":"","comment_id":233492,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10184278023","product_id":100052601,"comment_content":"函数式比较难的是怎么样对外界施加作用，又能保证写的是纯函数。","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501063,"discussion_content":"在实际工作中，努力把外部的部分隔离开来。让自己的代码纯起来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594344946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1681048,"avatar":"https://static001.geekbang.org/account/avatar/00/19/a6/98/7d1a8a2a.jpg","nickname":"卡路士","note":"","ucode":"35D519C90E316F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390158,"discussion_content":"haskell的话，就是IO monad做的事情","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629693390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235476,"user_name":"孜孜","can_delete":false,"product_type":"c1","uid":1018203,"ip_address":"","ucode":"7EF4FB644357CE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg","comment_is_top":false,"comment_ctime":1595054344,"is_pvip":true,"replies":[{"id":"87007","content":"是","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1595116244,"ip_address":"","comment_id":235476,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890021640","product_id":100052601,"comment_content":"有些语言的如JS C#的(?.)和optional是不是异曲同工?","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501738,"discussion_content":"是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595116244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345935,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1652703782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652703782","product_id":100052601,"comment_content":"花点时间学习函数式编程。--记下来","like_count":0},{"had_liked":false,"id":312355,"user_name":"Aprelude","can_delete":false,"product_type":"c1","uid":1658796,"ip_address":"","ucode":"840D3F7A35AEEF","user_header":"https://static001.geekbang.org/account/avatar/00/19/4f/ac/80439ba7.jpg","comment_is_top":false,"comment_ctime":1631767809,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631767809","product_id":100052601,"comment_content":"atuomic Rerenence这个不是每次进方法都会new吗，这个是怎么实现记忆的","like_count":0}]}