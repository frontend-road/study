{"id":90394,"title":"09 | 系统调用：公司成立好了就要开始接项目","content":"<p>上一节，系统终于进入了用户态，公司由一个“皮包公司”进入正轨，可以开始接项目了。</p><p>这一节，我们来解析Linux接项目的办事大厅是如何实现的，这是因为后面介绍的每一个模块，都涉及系统调用。站在系统调用的角度，层层深入下去，就能从某个系统调用的场景出发，了解内核中各个模块的实现机制。</p><p>有的时候，我们的客户觉得，直接去办事大厅还是不够方便。没问题，Linux还提供了glibc这个中介。它更熟悉系统调用的细节，并且可以封装成更加友好的接口。你可以直接用。</p><h2>glibc对系统调用的封装</h2><p>我们以最常用的系统调用open，打开一个文件为线索，看看系统调用是怎么实现的。这一节我们仅仅会解析到从glibc如何调用到内核的open，至于open怎么实现，怎么打开一个文件，留到文件系统那一节讲。</p><p>现在我们就开始在用户态进程里面调用open函数。</p><p>为了方便，大部分用户会选择使用中介，也就是说，调用的是glibc里面的open函数。这个函数是如何定义的呢？</p><pre><code>int open(const char *pathname, int flags, mode_t mode)\n</code></pre><p>在glibc的源代码中，有个文件syscalls.list，里面列着所有glibc的函数对应的系统调用，就像下面这个样子：</p><pre><code># File name Caller  Syscall name    Args    Strong name Weak names\nopen\t\t-\topen\t\tCi:siv\t__libc_open __open open\n</code></pre><p>另外，glibc还有一个脚本make-syscall.sh，可以根据上面的配置文件，对于每一个封装好的系统调用，生成一个文件。这个文件里面定义了一些宏，例如#define SYSCALL_NAME open。</p><!-- [[[read_end]]] --><p>glibc还有一个文件syscall-template.S，使用上面这个宏，定义了这个系统调用的调用方式。</p><pre><code>T_PSEUDO (SYSCALL_SYMBOL, SYSCALL_NAME, SYSCALL_NARGS)\n    ret\nT_PSEUDO_END (SYSCALL_SYMBOL)\n\n#define T_PSEUDO(SYMBOL, NAME, N)\t\tPSEUDO (SYMBOL, NAME, N)\n</code></pre><p>这里的PSEUDO也是一个宏，它的定义如下：</p><pre><code>#define PSEUDO(name, syscall_name, args)                      \\\n  .text;                                      \\\n  ENTRY (name)                                    \\\n    DO_CALL (syscall_name, args);                         \\\n    cmpl $-4095, %eax;                               \\\n    jae SYSCALL_ERROR_LABEL\n</code></pre><p>里面对于任何一个系统调用，会调用DO_CALL。这也是一个宏，这个宏32位和64位的定义是不一样的。</p><h2>32位系统调用过程</h2><p>我们先来看32位的情况（i386目录下的sysdep.h文件）。</p><pre><code>/* Linux takes system call arguments in registers:\n\tsyscall number\t%eax\t     call-clobbered\n\targ 1\t\t%ebx\t     call-saved\n\targ 2\t\t%ecx\t     call-clobbered\n\targ 3\t\t%edx\t     call-clobbered\n\targ 4\t\t%esi\t     call-saved\n\targ 5\t\t%edi\t     call-saved\n\targ 6\t\t%ebp\t     call-saved\n......\n*/\n#define DO_CALL(syscall_name, args)                           \\\n    PUSHARGS_##args                               \\\n    DOARGS_##args                                 \\\n    movl $SYS_ify (syscall_name), %eax;                          \\\n    ENTER_KERNEL                                  \\\n    POPARGS_##args\n</code></pre><p>这里，我们将请求参数放在寄存器里面，根据系统调用的名称，得到系统调用号，放在寄存器eax里面，然后执行ENTER_KERNEL。</p><p>在Linux的源代码注释里面，我们可以清晰地看到，这些寄存器是如何传递系统调用号和参数的。</p><p>这里面的ENTER_KERNEL是什么呢？</p><pre><code># define ENTER_KERNEL int $0x80\n</code></pre><p>int就是interrupt，也就是“中断”的意思。int $0x80就是触发一个软中断，通过它就可以陷入（trap）内核。</p><p>在内核启动的时候，还记得有一个trap_init()，其中有这样的代码：</p><pre><code>set_system_intr_gate(IA32_SYSCALL_VECTOR, entry_INT80_32);\n</code></pre><p>这是一个软中断的陷入门。当接收到一个系统调用的时候，entry_INT80_32就被调用了。</p><pre><code>ENTRY(entry_INT80_32)\n        ASM_CLAC\n        pushl   %eax                    /* pt_regs-&gt;orig_ax */\n        SAVE_ALL pt_regs_ax=$-ENOSYS    /* save rest */\n        movl    %esp, %eax\n        call    do_syscall_32_irqs_on\n.Lsyscall_32_done:\n......\n.Lirq_return:\n\tINTERRUPT_RETURN\n</code></pre><p>通过push和SAVE_ALL将当前用户态的寄存器，保存在pt_regs结构里面。</p><p>进入内核之前，保存所有的寄存器，然后调用do_syscall_32_irqs_on。它的实现如下：</p><pre><code>static __always_inline void do_syscall_32_irqs_on(struct pt_regs *regs)\n{\n\tstruct thread_info *ti = current_thread_info();\n\tunsigned int nr = (unsigned int)regs-&gt;orig_ax;\n......\n\tif (likely(nr &lt; IA32_NR_syscalls)) {\n\t\tregs-&gt;ax = ia32_sys_call_table[nr](\n\t\t\t(unsigned int)regs-&gt;bx, (unsigned int)regs-&gt;cx,\n\t\t\t(unsigned int)regs-&gt;dx, (unsigned int)regs-&gt;si,\n\t\t\t(unsigned int)regs-&gt;di, (unsigned int)regs-&gt;bp);\n\t}\n\tsyscall_return_slowpath(regs);\n}\n</code></pre><p>在这里，我们看到，将系统调用号从eax里面取出来，然后根据系统调用号，在系统调用表中找到相应的函数进行调用，并将寄存器中保存的参数取出来，作为函数参数。如果仔细比对，就能发现，这些参数所对应的寄存器，和Linux的注释是一样的。</p><p>根据宏定义，#define ia32_sys_call_table sys_call_table，系统调用就是放在这个表里面。至于这个表是如何形成的，我们后面讲。</p><p>当系统调用结束之后，在entry_INT80_32之后，紧接着调用的是INTERRUPT_RETURN，我们能够找到它的定义，也就是iret。</p><pre><code>#define INTERRUPT_RETURN                iret\n</code></pre><p>iret指令将原来用户态保存的现场恢复回来，包含代码段、指令指针寄存器等。这时候用户态进程恢复执行。</p><p>这里我总结一下32位的系统调用是如何执行的。</p><p><img src=\"https://static001.geekbang.org/resource/image/56/06/566299fe7411161bae25b62e7fe20506.jpg?wh=1869*2375\" alt=\"\"></p><h2>64位系统调用过程</h2><p>我们再来看64位的情况（x86_64下的sysdep.h文件）。</p><pre><code>/* The Linux/x86-64 kernel expects the system call parameters in\n   registers according to the following table:\n    syscall number\trax\n    arg 1\t\trdi\n    arg 2\t\trsi\n    arg 3\t\trdx\n    arg 4\t\tr10\n    arg 5\t\tr8\n    arg 6\t\tr9\n......\n*/\n#define DO_CALL(syscall_name, args)\t\t\t\t\t      \\\n  lea SYS_ify (syscall_name), %rax;\t\t\t\t\t      \\\n  syscall\n</code></pre><p>和之前一样，还是将系统调用名称转换为系统调用号，放到寄存器rax。这里是真正进行调用，不是用中断了，而是改用syscall指令了。并且，通过注释我们也可以知道，传递参数的寄存器也变了。</p><p>syscall指令还使用了一种特殊的寄存器，我们叫<strong>特殊模块寄存器</strong>（Model Specific Registers，简称MSR）。这种寄存器是CPU为了完成某些特殊控制功能为目的的寄存器，其中就有系统调用。</p><p>在系统初始化的时候，trap_init除了初始化上面的中断模式，这里面还会调用cpu_init-&gt;syscall_init。这里面有这样的代码：</p><pre><code>wrmsrl(MSR_LSTAR, (unsigned long)entry_SYSCALL_64);\n</code></pre><p>rdmsr和wrmsr是用来读写特殊模块寄存器的。MSR_LSTAR就是这样一个特殊的寄存器，当syscall指令调用的时候，会从这个寄存器里面拿出函数地址来调用，也就是调用entry_SYSCALL_64。</p><p>在arch/x86/entry/entry_64.S中定义了entry_SYSCALL_64。</p><pre><code>ENTRY(entry_SYSCALL_64)\n        /* Construct struct pt_regs on stack */\n        pushq   $__USER_DS                      /* pt_regs-&gt;ss */\n        pushq   PER_CPU_VAR(rsp_scratch)        /* pt_regs-&gt;sp */\n        pushq   %r11                            /* pt_regs-&gt;flags */\n        pushq   $__USER_CS                      /* pt_regs-&gt;cs */\n        pushq   %rcx                            /* pt_regs-&gt;ip */\n        pushq   %rax                            /* pt_regs-&gt;orig_ax */\n        pushq   %rdi                            /* pt_regs-&gt;di */\n        pushq   %rsi                            /* pt_regs-&gt;si */\n        pushq   %rdx                            /* pt_regs-&gt;dx */\n        pushq   %rcx                            /* pt_regs-&gt;cx */\n        pushq   $-ENOSYS                        /* pt_regs-&gt;ax */\n        pushq   %r8                             /* pt_regs-&gt;r8 */\n        pushq   %r9                             /* pt_regs-&gt;r9 */\n        pushq   %r10                            /* pt_regs-&gt;r10 */\n        pushq   %r11                            /* pt_regs-&gt;r11 */\n        sub     $(6*8), %rsp                    /* pt_regs-&gt;bp, bx, r12-15 not saved */\n        movq    PER_CPU_VAR(current_task), %r11\n        testl   $_TIF_WORK_SYSCALL_ENTRY|_TIF_ALLWORK_MASK, TASK_TI_flags(%r11)\n        jnz     entry_SYSCALL64_slow_path\n......\nentry_SYSCALL64_slow_path:\n        /* IRQs are off. */\n        SAVE_EXTRA_REGS\n        movq    %rsp, %rdi\n        call    do_syscall_64           /* returns with IRQs disabled */\nreturn_from_SYSCALL_64:\n\tRESTORE_EXTRA_REGS\n\tTRACE_IRQS_IRETQ\n\tmovq\tRCX(%rsp), %rcx\n\tmovq\tRIP(%rsp), %r11\n    movq\tR11(%rsp), %r11\n......\nsyscall_return_via_sysret:\n\t/* rcx and r11 are already restored (see code above) */\n\tRESTORE_C_REGS_EXCEPT_RCX_R11\n\tmovq\tRSP(%rsp), %rsp\n\tUSERGS_SYSRET64\n</code></pre><p>这里先保存了很多寄存器到pt_regs结构里面，例如用户态的代码段、数据段、保存参数的寄存器，然后调用entry_SYSCALL64_slow_pat-&gt;do_syscall_64。</p><pre><code>__visible void do_syscall_64(struct pt_regs *regs)\n{\n        struct thread_info *ti = current_thread_info();\n        unsigned long nr = regs-&gt;orig_ax;\n......\n        if (likely((nr &amp; __SYSCALL_MASK) &lt; NR_syscalls)) {\n                regs-&gt;ax = sys_call_table[nr &amp; __SYSCALL_MASK](\n                        regs-&gt;di, regs-&gt;si, regs-&gt;dx,\n                        regs-&gt;r10, regs-&gt;r8, regs-&gt;r9);\n        }\n        syscall_return_slowpath(regs);\n}\n</code></pre><p>在do_syscall_64里面，从rax里面拿出系统调用号，然后根据系统调用号，在系统调用表sys_call_table中找到相应的函数进行调用，并将寄存器中保存的参数取出来，作为函数参数。如果仔细比对，你就能发现，这些参数所对应的寄存器，和Linux的注释又是一样的。</p><p>所以，无论是32位，还是64位，都会到系统调用表sys_call_table这里来。</p><p>在研究系统调用表之前，我们看64位的系统调用返回的时候，执行的是USERGS_SYSRET64。定义如下：</p><pre><code>#define USERGS_SYSRET64\t\t\t\t\\\n\tswapgs;\t\t\t\t\t\\\n\tsysretq;\n</code></pre><p>这里，返回用户态的指令变成了sysretq。</p><p>我们这里总结一下64位的系统调用是如何执行的。</p><p><img src=\"https://static001.geekbang.org/resource/image/1f/d7/1fc62ab8406c218de6e0b8c7e01fdbd7.jpg?wh=1869*2372\" alt=\"\"></p><h2>系统调用表</h2><p>前面我们重点关注了系统调用的方式，都是最终到了系统调用表，但是到底调用内核的什么函数，还没有解读。</p><p>现在我们再来看，系统调用表sys_call_table是怎么形成的呢？</p><p>32位的系统调用表定义在arch/x86/entry/syscalls/syscall_32.tbl文件里。例如open是这样定义的：</p><pre><code>5\ti386\topen\t\t\tsys_open  compat_sys_open\n</code></pre><p>64位的系统调用定义在另一个文件arch/x86/entry/syscalls/syscall_64.tbl里。例如open是这样定义的：</p><pre><code>2\tcommon\topen\t\t\tsys_open\n</code></pre><p>第一列的数字是系统调用号。可以看出，32位和64位的系统调用号是不一样的。第三列是系统调用的名字，第四列是系统调用在内核的实现函数。不过，它们都是以sys_开头。</p><p>系统调用在内核中的实现函数要有一个声明。声明往往在include/linux/syscalls.h文件中。例如sys_open是这样声明的：</p><pre><code>asmlinkage long sys_open(const char __user *filename,\n                                int flags, umode_t mode);\n</code></pre><p>真正的实现这个系统调用，一般在一个.c文件里面，例如sys_open的实现在fs/open.c里面，但是你会发现样子很奇怪。</p><pre><code>SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t, mode)\n{\n        if (force_o_largefile())\n                flags |= O_LARGEFILE;\n        return do_sys_open(AT_FDCWD, filename, flags, mode);\n}\n</code></pre><p>SYSCALL_DEFINE3是一个宏系统调用最多六个参数，根据参数的数目选择宏。具体是这样定义的：</p><pre><code>#define SYSCALL_DEFINE1(name, ...) SYSCALL_DEFINEx(1, _##name, __VA_ARGS__)\n#define SYSCALL_DEFINE2(name, ...) SYSCALL_DEFINEx(2, _##name, __VA_ARGS__)\n#define SYSCALL_DEFINE3(name, ...) SYSCALL_DEFINEx(3, _##name, __VA_ARGS__)\n#define SYSCALL_DEFINE4(name, ...) SYSCALL_DEFINEx(4, _##name, __VA_ARGS__)\n#define SYSCALL_DEFINE5(name, ...) SYSCALL_DEFINEx(5, _##name, __VA_ARGS__)\n#define SYSCALL_DEFINE6(name, ...) SYSCALL_DEFINEx(6, _##name, __VA_ARGS__)\n\n\n#define SYSCALL_DEFINEx(x, sname, ...)                          \\\n        SYSCALL_METADATA(sname, x, __VA_ARGS__)                 \\\n        __SYSCALL_DEFINEx(x, sname, __VA_ARGS__)\n\n\n#define __PROTECT(...) asmlinkage_protect(__VA_ARGS__)\n#define __SYSCALL_DEFINEx(x, name, ...)                                 \\\n        asmlinkage long sys##name(__MAP(x,__SC_DECL,__VA_ARGS__))       \\\n                __attribute__((alias(__stringify(SyS##name))));         \\\n        static inline long SYSC##name(__MAP(x,__SC_DECL,__VA_ARGS__));  \\\n        asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__));      \\\n        asmlinkage long SyS##name(__MAP(x,__SC_LONG,__VA_ARGS__))       \\\n        {                                                               \\\n                long ret = SYSC##name(__MAP(x,__SC_CAST,__VA_ARGS__));  \\\n                __MAP(x,__SC_TEST,__VA_ARGS__);                         \\\n                __PROTECT(x, ret,__MAP(x,__SC_ARGS,__VA_ARGS__));       \\\n                return ret;                                             \\\n        }                                                               \\\n        static inline long SYSC##name(__MAP(x,__SC_DECL,__VA_ARGS__)\n</code></pre><p>如果我们把宏展开之后，实现如下，和声明的是一样的。</p><pre><code>asmlinkage long sys_open(const char __user * filename, int flags, int mode)\n{\n long ret;\n\n\n if (force_o_largefile())\n  flags |= O_LARGEFILE;\n\n\n ret = do_sys_open(AT_FDCWD, filename, flags, mode);\n asmlinkage_protect(3, ret, filename, flags, mode);\n return ret;\n</code></pre><p>声明和实现都好了。接下来，在编译的过程中，需要根据syscall_32.tbl和syscall_64.tbl生成自己的unistd_32.h和unistd_64.h。生成方式在arch/x86/entry/syscalls/Makefile中。</p><p>这里面会使用两个脚本，其中第一个脚本arch/x86/entry/syscalls/syscallhdr.sh，会在文件中生成#define __NR_open；第二个脚本arch/x86/entry/syscalls/syscalltbl.sh，会在文件中生成__SYSCALL(__NR_open, sys_open)。这样，unistd_32.h和unistd_64.h是对应的系统调用号和系统调用实现函数之间的对应关系。</p><p>在文件arch/x86/entry/syscall_32.c，定义了这样一个表，里面include了这个头文件，从而所有的sys_系统调用都在这个表里面了。</p><pre><code>__visible const sys_call_ptr_t ia32_sys_call_table[__NR_syscall_compat_max+1] = {\n        /*\n         * Smells like a compiler bug -- it doesn't work\n         * when the &amp; below is removed.\n         */\n        [0 ... __NR_syscall_compat_max] = &amp;sys_ni_syscall,\n#include &lt;asm/syscalls_32.h&gt;\n};\n</code></pre><p>同理，在文件arch/x86/entry/syscall_64.c，定义了这样一个表，里面include了这个头文件，这样所有的sys_系统调用就都在这个表里面了。</p><pre><code>/* System call table for x86-64. */\nasmlinkage const sys_call_ptr_t sys_call_table[__NR_syscall_max+1] = {\n\t/*\n\t * Smells like a compiler bug -- it doesn't work\n\t * when the &amp; below is removed.\n\t */\n\t[0 ... __NR_syscall_max] = &amp;sys_ni_syscall,\n#include &lt;asm/syscalls_64.h&gt;\n};\n</code></pre><h2>总结时刻</h2><p>系统调用的过程还是挺复杂的吧？如果加上上一节的内核态和用户态的模式切换，就更复杂了。这里我们重点分析64位的系统调用，我将整个完整的过程画了一张图，帮你总结、梳理一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/86/a5/868db3f559ad08659ddc74db07a9a0a5.jpg?wh=2209*2726\" alt=\"\"></p><h2>课堂练习</h2><p>请你根据这一节的分析，看一下与open这个系统调用相关的文件都有哪些，在每个文件里面都做了什么？如果你要自己实现一个系统调用，能不能照着open来一个呢？</p><p>欢迎留言和我分享你的疑惑和见解，也欢迎你收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习、进步。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg?wh=1110*659\" alt=\"\"></p>","comments":[{"had_liked":false,"id":85906,"user_name":"孟晓冬","can_delete":false,"product_type":"c1","uid":1204266,"ip_address":"","ucode":"DFFE8A3863F881","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/2a/9e0ba423.jpg","comment_is_top":false,"comment_ctime":1555290859,"is_pvip":false,"replies":[{"id":"49675","content":"是的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696678,"ip_address":"","comment_id":85906,"utype":1}],"discussion_count":19,"race_medal":0,"score":"1058117245675","product_id":100024701,"comment_content":"这个专栏要有一定的知识储备才能学习，起码要熟悉c,数据结构，linux系统管理，否则只会一脸懵逼的进来，一脸懵逼的出去","like_count":246,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446862,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2210470,"avatar":"https://static001.geekbang.org/account/avatar/00/21/ba/a6/1aff3213.jpg","nickname":"Karey®","note":"","ucode":"B0FD5BF0D9ADE2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319219,"discussion_content":"遇到代码的位置直接跳过就好，我就是来建立一个最基本的系统印象的，好过只会linux的拼写","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1603964832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1737222,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/cqBEzwNofgXlDuq9tL9OkPAH2T3wZ0ibGicVU7mkHIMxM7g0iaj3GViaibRh2aoFw8frIauLYMDOS2smiaZJsFgwrJKw/132","nickname":"Geek_ee7cee","note":"","ucode":"5ED1823007CAAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286025,"discussion_content":"课程说明里应说明(付费前)","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1593014669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1737222,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/cqBEzwNofgXlDuq9tL9OkPAH2T3wZ0ibGicVU7mkHIMxM7g0iaj3GViaibRh2aoFw8frIauLYMDOS2smiaZJsFgwrJKw/132","nickname":"Geek_ee7cee","note":"","ucode":"5ED1823007CAAF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312549,"discussion_content":"就算说明了，会阻拦优秀的小白购买吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1602731859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":286025,"ip_address":""},"score":312549,"extra":""},{"author":{"id":1675966,"avatar":"https://static001.geekbang.org/account/avatar/00/19/92/be/8de4e1fe.jpg","nickname":"kaizen","note":"","ucode":"313EEA97AEC7C3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318755,"discussion_content":"你这是什么鬼逻辑","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603845595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312549,"ip_address":""},"score":318755,"extra":""},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1675966,"avatar":"https://static001.geekbang.org/account/avatar/00/19/92/be/8de4e1fe.jpg","nickname":"kaizen","note":"","ucode":"313EEA97AEC7C3","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":318804,"discussion_content":"当看完宣传文案，心潮澎湃！沉浸在将要获得的各种成就，已经不会担心有什么是自己搞不定的。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1603853269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":318755,"ip_address":""},"score":318804,"extra":""}]},{"author":{"id":1133945,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4d/79/803537db.jpg","nickname":"慢动作","note":"","ucode":"62C944F4A4D8AC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379270,"discussion_content":"哎，不看代码完全看不明白，代码又看不懂。既不知道和普通函数调用的区别(除了感觉又是查表又是中转，感觉就是多了几次调用)，也不知道64比32快是到底为什么","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1623805449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205341,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/5d/de0536e8.jpg","nickname":"木木","note":"","ucode":"B446FD36734E75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285983,"discussion_content":"一脸懵逼路过","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593005297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285626,"discussion_content":"那怎么办，不熟悉的就不能学啦？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592897504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1010253,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6a/4d/47e984c6.jpg","nickname":"无涯","note":"","ucode":"B9613B29B1677B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":106165,"discussion_content":"得照着代码来不然真懵逼了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577519011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2986343,"avatar":"","nickname":"Geek_68cfaa","note":"","ucode":"6F2AB2A81C790C","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591428,"discussion_content":"受益匪浅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666587577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1811277,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a3/4d/59390ba9.jpg","nickname":"排骨","note":"","ucode":"A413CF46211E1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581195,"discussion_content":"一脸懵逼的来，一脸懵逼的走+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658586600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2597449,"avatar":"https://static001.geekbang.org/account/avatar/00/27/a2/49/7e749be2.jpg","nickname":"Nick","note":"","ucode":"37E60C08183617","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388607,"discussion_content":"这就是硬核！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628846805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1317847,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1b/d7/868d26ce.jpg","nickname":"songhyunmin","note":"","ucode":"D5A98668CD8532","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321374,"discussion_content":"没以上基础的还能看下去吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604572537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1347425,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8f/61/8c28ae2b.jpg","nickname":"D","note":"","ucode":"10A0F1F79156B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1317847,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1b/d7/868d26ce.jpg","nickname":"songhyunmin","note":"","ucode":"D5A98668CD8532","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324619,"discussion_content":"结合评论里面的优秀课代表的总结,读个大概印象就好了，","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1605144444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":321374,"ip_address":""},"score":324619,"extra":""}]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312550,"discussion_content":"蒙出蒙进，速读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602731913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008100,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/61/e4/db3f783b.jpg","nickname":"Karson","note":"","ucode":"E0286BF6CA7281","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306836,"discussion_content":"蒙蔽的来了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600400668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1747065,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/a8/79/863d0c30.jpg","nickname":"zyb","note":"","ucode":"28107BBD12FD42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291170,"discussion_content":"懵逼中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594723023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86207,"user_name":"why","can_delete":false,"product_type":"c1","uid":1012937,"ip_address":"","ucode":"C9E796E53F6F5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/c9/d3439ca4.jpg","comment_is_top":false,"comment_ctime":1555323906,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"624325581826","product_id":100024701,"comment_content":"- glibc 将系统调用封装成更友好的接口<br>- 本节解析 glibc 函数如何调用到内核的 open<br>---<br>- 用户进程调用 open 函数<br>    - glibc 的 syscal.list 列出 glibc 函数对应的系统调用<br>    - glibc 的脚本 make_syscall.sh 根据 syscal.list 生成对应的宏定义(函数映射到系统调用)<br>    - glibc 的 syscal-template.S 使用这些宏, 定义了系统调用的调用方式(也是通过宏)<br>    - 其中会调用 DO_CALL (也是一个宏), 32位与 64位实现不同<br>---<br>- 32位 DO_CALL (位于 i386 目录下 sysdep.h)<br>    - 将调用参数放入寄存器中, 由系统调用名得到系统调用号, 放入 eax<br>    - 执行 ENTER_KERNEL(一个宏), 对应 int $0x80 触发软中断, 进入内核<br>    - 调用软中断处理函数 entry_INT80_32(内核启动时, 由 trap_init() 配置)<br>    - entry_INT80_32 将用户态寄存器存入 pt_regs 中(保存现场以及系统调用参数), 调用 do_syscall_32_iraq_on <br>    - do_syscall_32_iraq_on 从 pt_regs 中取系统调用号(eax), 从系统调用表得到对应实现函数, 取 pt_regs 中存储的参数, 调用系统调用<br>    - entry_INT80_32 调用 INTERRUPT_RUTURN(一个宏)对应 iret 指令, 系统调用结果存在 pt_regs 的 eax 位置, 根据 pt_regs 恢复用户态进程<br>---<br>- 64位 DO_CALL (位于 x86_64 目录下 sysdep.h)<br>    - 通过系统调用名得到系统调用号, 存入 rax; 不同中断, 执行 syscall 指令<br>    - MSR(特殊模块寄存器), 辅助完成某些功能(包括系统调用)<br>    - trap_init() 会调用 cpu_init-&gt;syscall_init 设置该寄存器<br>    - syscall 从 MSR 寄存器中, 拿出函数地址进行调用, 即调用 entry_SYSCALL_64<br>    - entry_SYSCALL_64 先保存用户态寄存器到 pt_regs 中<br>    - 调用 entry_SYSCALL64_slow_pat-&gt;do_syscall_64<br>    - do_syscall_64 从 rax 取系统调用号, 从系统调用表得到对应实现函数, 取 pt_regs 中存储的参数, 调用系统调用<br>    - 返回执行 USERGS_SYSRET64(一个宏), 对应执行 swapgs 和 sysretq 指令; 系统调用结果存在 pt_regs 的 ax 位置, 根据 pt_regs 恢复用户态进程<br>---<br>- 系统调用表 sys_call_table<br>    - 32位 定义在 arch&#47;x86&#47;entry&#47;syscalls&#47;syscall_32.tbl <br>    - 64位 定义在 arch&#47;x86&#47;entry&#47;syscalls&#47;syscall_64.tbl<br>    - syscall_*.tbl 内容包括: 系统调用号, 系统调用名, 内核实现函数名(以 sys 开头)<br>    - 内核实现函数的声明: include&#47;linux&#47;syscall.h<br>    - 内核实现函数的实现: 某个 .c 文件, 例如 sys_open 的实现在 fs&#47;open.c<br>        - .c 文件中, 以宏的方式替代函数名, 用多层宏构建函数头<br>    - 编译过程中, 通过 syscall_*.tbl 生成 unistd_*.h 文件<br>        - unistd_*.h 包含系统调用与实现函数的对应关系<br>    - syscall_*.h include 了 unistd_*.h 头文件, 并定义了系统调用表(数组)","like_count":145,"discussions":[{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292448,"discussion_content":"真正的大牛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595229176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94756,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1557889736,"is_pvip":false,"discussion_count":8,"race_medal":0,"score":"379515011784","product_id":100024701,"comment_content":"什么是系统调用?<br><br>系统调用是操作系统提供给程序设计人员使用系统服务的接口<br><br>系统调用流程<br><br>Linux 提供了 glibc 库, 它封装了系统调用接口, 对上层更友好的提供服务, 系统调用最终都会通过  DO_CALL 发起, 这是一个宏定义, 其 32 位和 64 位的定义是不同的<br>- 32 位系统调用<br>   - 用户态<br>      - 将请求参数保存到寄存器<br>      - 将系统调用名称转为系统调用号保存到寄存器 eax 中<br>      - 通过软中断 ENTER_KERNEL 进入内核态<br>   - 内核态<br>      - 将用户态的寄存器保存到 pt_regs 中<br>      - 在系统调用函数表 sys_call_table 中根据调用号找到对应的函数<br>      - 执行函数实现, 将返回值写入 pt_regs 的 ax 位置<br>      - 通过 INTERRUPT_RETURN 根据 pt_regs 恢复用户态进程<br><br>- 64 位系统调用<br>   - 用户态<br>      - 将请求参数保存到寄存器<br>      - 将系统调用名称转为系统调用号保存到寄存器 rax 中<br>      - **通过 syscall 进入内核态**<br>   - 内核态<br>      - 将用户态的寄存器保存到 pt_regs 中<br>      - 在系统调用函数表 sys_call_table 中根据调用号找到对应的函数<br>      - 执行函数实现, 将返回值写入 pt_regs 的 ax 位置<br>      - **通过 sysretq 返回用户态**<br>","like_count":89,"discussions":[{"author":{"id":2357566,"avatar":"https://static001.geekbang.org/account/avatar/00/23/f9/3e/0d5f27c4.jpg","nickname":"肥猫不开心","note":"","ucode":"FA9204B84913C0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390949,"discussion_content":"可以 我就适合这种没代码的。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630170932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2591666,"avatar":"https://static001.geekbang.org/account/avatar/00/27/8b/b2/d47da491.jpg","nickname":"Odd","note":"","ucode":"C3D26BC8C3F325","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582335,"discussion_content":"很棒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659401964,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e7/a7/9825371e.jpg","nickname":"Penn","note":"","ucode":"2D73D9C2AED26F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533287,"discussion_content":"果然没有代码比较适合我看懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637831806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1658413,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4e/2d/06d3f9f5.jpg","nickname":"静✨","note":"","ucode":"1B33229C206339","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368789,"discussion_content":"感谢您的总结，非常清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618832521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2029333,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erLujLByemCGmjp9rIicdoC59XUh99WiargBmxOMtsLlmntyEklh3LyiahtzAz3fnUu0tWwvibTqOFt5A/132","nickname":"hammer","note":"","ucode":"D98A31ACE2158F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328094,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606053486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1347425,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8f/61/8c28ae2b.jpg","nickname":"D","note":"","ucode":"10A0F1F79156B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324616,"discussion_content":"懂了，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605144264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1500498,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e5/52/35bc9c07.jpg","nickname":"Musisan","note":"","ucode":"A9A9FE56AABEBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305751,"discussion_content":"赞一个，清楚明了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600075321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285628,"discussion_content":"这个总结很明确，谢谢~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592897594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117595,"user_name":"江山未","can_delete":false,"product_type":"c1","uid":1090196,"ip_address":"","ucode":"5293DD9482717F","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/94/ae0a60d8.jpg","comment_is_top":false,"comment_ctime":1564101003,"is_pvip":false,"replies":[{"id":"46412","content":"太好了，谢谢补充","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566299162,"ip_address":"","comment_id":117595,"utype":1}],"discussion_count":2,"race_medal":0,"score":"186247694731","product_id":100024701,"comment_content":"宏是什么？给像我一样不懂C的人:<br>1，使用命令 #define 定义宏。该命令允许把一个名称指定成任何所需的文本，例如一个常量值或者一条语句。在定义了宏之后，无论宏名称出现在源代码的何处，预处理器都会把它用定义时指定的文本替换掉。<br>2，宏的名称一般使用全大写的形式。<br>3，宏可以定义参数，参数列表需要使用圆括号包裹，且必须紧跟名称，中间不能有空格。<br>4，使用#undef NAME取消宏的定义，从而可以重新定义或使用与宏重名的函数或变量。<br>5，出现在字符串中的宏名称不会被预编译器展开。","like_count":43,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460043,"discussion_content":"太好了，谢谢补充","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566299162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1649120,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/e0/35835788.jpg","nickname":"Rs先生","note":"","ucode":"4B09A979E106F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338844,"discussion_content":"宏是不是可以理解为c中的全局变量的引入，只不过他有自己使用规则而已。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609400347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86152,"user_name":"weihebuken","can_delete":false,"product_type":"c1","uid":1133201,"ip_address":"","ucode":"B2205360E422C8","user_header":"https://static001.geekbang.org/account/avatar/00/11/4a/91/9a8a8c4a.jpg","comment_is_top":false,"comment_ctime":1555315895,"is_pvip":false,"replies":[{"id":"49665","content":"主要理解过程，不必纠结代码","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696361,"ip_address":"","comment_id":86152,"utype":1}],"discussion_count":5,"race_medal":0,"score":"143289236663","product_id":100024701,"comment_content":"我想问，想看懂这篇，我先需要看哪些书，或者贮备哪些知识先，真的很懵。。。","like_count":33,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446899,"discussion_content":"主要理解过程，不必纠结代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312553,"discussion_content":"02 | 学习路径：爬过这六个陡坡，你就能对Linux了如指掌 这里有一堆书单啊\n《鸟哥的 Linux 私房菜》想全面学习 Linux 命令\n《Linux 系统管理技术手册》再深入一点\n《UNIX 环境高级编程》进一步学习 Linux 程序设计，这本书有代码，有介绍，有原理，非常实用\n《深入理解 LINUX 内核》。这本书言简意赅地讲述了主要的内核机制。看完这本书，你会对 Linux 内核有总体的了解。不过这本书的内核版本有点老，不过对于了解原理来讲，没有任何问题。\n《LINUX 内核源代码情景分析》。这本书最大的优点是结合场景进行分析，看得见、摸得着，非常直观，唯一的缺点还是内核版本比较老。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602732025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1407983,"avatar":"https://static001.geekbang.org/account/avatar/00/15/7b/ef/ae5458c7.jpg","nickname":"王骞","note":"","ucode":"E5A88F3BA2634E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556838,"discussion_content":"这些书都看完即使掌握一半也不必买这门课了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647530160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312553,"ip_address":""},"score":556838,"extra":""},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1407983,"avatar":"https://static001.geekbang.org/account/avatar/00/15/7b/ef/ae5458c7.jpg","nickname":"王骞","note":"","ucode":"E5A88F3BA2634E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556864,"discussion_content":"《鸟哥的私房菜》还没看完","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647561235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":556838,"ip_address":""},"score":556864,"extra":""}]},{"author":{"id":1234591,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d6/9f/0213e8a0.jpg","nickname":"🤪HappyJoo","note":"","ucode":"96E1858F06BABA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285627,"discussion_content":"那我就不纠结代码了【😂】","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592897532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97145,"user_name":"望天","can_delete":false,"product_type":"c1","uid":1545448,"ip_address":"","ucode":"EA82334BCE7564","user_header":"","comment_is_top":false,"comment_ctime":1558596654,"is_pvip":false,"replies":[{"id":"34857","content":"对的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1558680854,"ip_address":"","comment_id":97145,"utype":1}],"discussion_count":2,"race_medal":0,"score":"130407615534","product_id":100024701,"comment_content":"这些东西我觉得不必要深入每一行代码，大概过一遍，知道整体流程，宏观流程就OK了(比如上面图片的概括)。反正很多细节过一段时间也会忘。","like_count":30,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451153,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558680854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1576512,"avatar":"https://static001.geekbang.org/account/avatar/00/18/0e/40/49a71ed8.jpg","nickname":"八戒","note":"","ucode":"3F262A99492A65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352479,"discussion_content":"那什么时候需要注意这些细节？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614751019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86159,"user_name":"William","can_delete":false,"product_type":"c1","uid":1241365,"ip_address":"","ucode":"4499F99B180102","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/15/8fcf8038.jpg","comment_is_top":false,"comment_ctime":1555317455,"is_pvip":true,"replies":[{"id":"49663","content":"赞","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696225,"ip_address":"","comment_id":86159,"utype":1}],"discussion_count":2,"race_medal":2,"score":"74569761487","product_id":100024701,"comment_content":"大家可以参考glibc的源码理解，https:&#47;&#47;www.gnu.org&#47;software&#47;libc&#47;started.html。 主要过程是CPU上下文切换的过程。","like_count":17,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446901,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1248326,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","nickname":"多选参数","note":"","ucode":"B2294D80AB075F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":272532,"discussion_content":"这种说法不准确吧， CPU 上下文切换过程会更加广。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590321807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85923,"user_name":"春和景明","can_delete":false,"product_type":"c1","uid":1272482,"ip_address":"","ucode":"A27970A276ECD6","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/a2/f9efd9dc.jpg","comment_is_top":false,"comment_ctime":1555293176,"is_pvip":true,"replies":[{"id":"49674","content":"对的，就是这个方法","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696664,"ip_address":"","comment_id":85923,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57389868024","product_id":100024701,"comment_content":"开始吃力了，只能排除细节，先了解几个重要阶段了。","like_count":13,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446866,"discussion_content":"对的，就是这个方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86185,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1555320819,"is_pvip":false,"replies":[{"id":"49662","content":"https:&#47;&#47;elixir.bootlin.com&#47;linux&#47;v4.13.16","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696211,"ip_address":"","comment_id":86185,"utype":1}],"discussion_count":5,"race_medal":0,"score":"53094928371","product_id":100024701,"comment_content":"这个专栏，源码是linux哪个版本的？","like_count":12,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446909,"discussion_content":"https://elixir.bootlin.com/linux/v4.13.16","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2378283,"avatar":"https://static001.geekbang.org/account/avatar/00/24/4a/2b/fb8663d9.jpg","nickname":"我想喝咖啡","note":"","ucode":"A7BE05894DC88E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352913,"discussion_content":"https://elixir.bootlin.com/linux/v4.13.16/source  这个链接可以 访问","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614908858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1452167,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcwXucibksEYRSYg6icjibzGa7efcMrCsGec2UwibjTd57icqDz0zzkEEOM2pXVju60dibzcnQKPfRkN9g/132","nickname":"Geek_93970d","note":"","ucode":"52AC308BEC7737","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575688,"discussion_content":"https://mirror.bjtu.edu.cn/kernel/linux/kernel/v4.x/linux-4.13.16.tar.gz","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655027012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2378283,"avatar":"https://static001.geekbang.org/account/avatar/00/24/4a/2b/fb8663d9.jpg","nickname":"我想喝咖啡","note":"","ucode":"A7BE05894DC88E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352911,"discussion_content":"也是 404 Not Found ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614908596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1304560,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e7/f0/950aa37c.jpg","nickname":"vict besos","note":"","ucode":"7946AB78E79EA8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":20414,"discussion_content":"404 Not Found","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569312427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100254,"user_name":"garlic","can_delete":false,"product_type":"c1","uid":1019579,"ip_address":"","ucode":"FEB147EDB5774E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/bb/c039dc11.jpg","comment_is_top":false,"comment_ctime":1559515176,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"44509188136","product_id":100024701,"comment_content":"1 用户态glibc 32位置<br>  sysdeps\\unix\\syscall.list<br>  sysdeps\\unix\\syscall-tempate.S<br>  sysdeps\\unix\\make-syscalls.sh<br>  sysdeps\\unix\\sysv\\linux\\i386\\sysdep.h （32）<br>  sysdeps\\unix\\sysv\\linux\\x86_64\\sysdep.h （64）<br>  生成用户接口<br><br>2. 内核态： X86_32<br>   &#47;init&#47;main.c   <br>          start_kernel -&gt;trap_init<br>  &#47;arch&#47;x86&#47;kernel&#47;traps.c   <br>           trap_init  -&gt; idt_setup_traps<br>   &#47;arch&#47;x86&#47;kernel&#47;idt.c  <br>           idt_setup_traps-&gt;idt_setup_from_table<br>          idt_setup_from_table-&gt;entry_INT80_32<br>   &#47;arch&#47;x86&#47;entry&#47;entry_32.S <br>           entry_INT80_32-&gt;do_int80_syscall_32<br>   &#47;arch&#47;x86&#47;entry&#47;common.c<br>           do_int80_syscall_32-&gt;do_syscall_32_irqs_on<br>   &#47;arch&#47;x86&#47;entry&#47;syscall_32.c<br>            ia32_sys_call_table[__NR_syscall_compat_max+1] <br>   &#47;arch&#47;x86&#47;entry&#47;entry_32.S<br>            entry_INT80_32-&gt;INTERRUPT_RETURN<br>  &#47;arch&#47;x86&#47;include&#47;asm&#47;irqflags.h<br>           swapgs, sysretl<br><br>  内核态： X86_64<br>   &#47;init&#47;main.c   <br>          start_kernel -&gt;trap_init<br>  &#47;arch&#47;x86&#47;kernel&#47;traps.c   <br>           trap_init  -&gt; idt_setup_traps<br>   &#47;arch&#47;x86&#47;kernel&#47;idt.c  <br>           idt_setup_traps-&gt;idt_setup_from_table<br>          idt_setup_from_table-&gt;entry_INT80_32<br>    &#47;arch&#47;x86&#47;kernel&#47;cpu&#47;common.c<br>          cpu_init-&gt;syscall_init<br>    &#47;arch&#47;x86&#47;entry&#47;entry_64.S<br>           entry_SYSCALL_64-&gt;USERGS_SYSRET64\t\t<br>   &#47;arch&#47;x86&#47;entry&#47;common.c<br>           do_syscall_64-&gt;do_syscall_32_irqs_on<br>   &#47;arch&#47;x86&#47;entry&#47;syscall_64.c<br>          sys_call_table[__NR_syscall_compat_max+1] <br>  arch&#47;x86&#47;entry&#47;entry_64.S<br>           entry_SYSCALL_64-&gt; USERGS_SYSRET64<br>  &#47;arch&#47;x86&#47;include&#47;asm&#47;irqflags.h<br>          swapgs; sysretq;<br><br>3. 增加一个系统调用<br>    linux-5.2-rc2&#47;arch&#47;x86&#47;entry&#47;syscalls&#47;syscall_64.tbl <br>           新增编号<br>    linux-5.2-rc2&#47;include&#47;linux&#47;syscalls.h<br>           增加声明<br>    kernel&#47;linux-5.2-rc2&#47;fs&#47;iadd_test.c <br>           增加定义目录可选<br>     kernel&#47;linux-5.2-rc2&#47;fs&#47;Makefile <br>           修改makefile加入新增源文件。<br>   作业笔记：https:&#47;&#47;garlicspace.com&#47;2019&#47;06&#47;02&#47;linux下实现一个系统调用&#47;<br>     <br>","like_count":10,"discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389326,"discussion_content":"厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629220506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85882,"user_name":"kdb_reboot","can_delete":false,"product_type":"c1","uid":1003594,"ip_address":"","ucode":"4C56FCA563FCA3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/4a/04fef27f.jpg","comment_is_top":false,"comment_ctime":1555287850,"is_pvip":false,"replies":[{"id":"30912","content":"不许超过，系统调用可以查一下，没这么多参数","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1555308242,"ip_address":"","comment_id":85882,"utype":1}],"discussion_count":3,"race_medal":0,"score":"44504960810","product_id":100024701,"comment_content":"参数如果超过6个存在哪里？（32&#47;64两种情况","like_count":10,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446849,"discussion_content":"不许超过，系统调用可以查一下，没这么多参数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555308242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007330,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/e2/1fad3052.jpg","nickname":"Jemmy","note":"","ucode":"A979F4A5210225","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283999,"discussion_content":"普通函数调用时超过六个是保存在栈里，系统调用还不一样？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592410184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1266698,"avatar":"https://static001.geekbang.org/account/avatar/00/13/54/0a/9a002ad5.jpg","nickname":"Adam Lau","note":"","ucode":"7E542D6E789500","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":244165,"discussion_content":"c需要函数参数不能超过6个？高级需要呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587569752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102747,"user_name":"张迪","can_delete":false,"product_type":"c1","uid":1104835,"ip_address":"","ucode":"6A5D44999A0FEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/c3/e11adfe8.jpg","comment_is_top":false,"comment_ctime":1560301303,"is_pvip":false,"replies":[{"id":"49091","content":"前几节讲的呀，保护模式","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567590322,"ip_address":"","comment_id":102747,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27330105079","product_id":100024701,"comment_content":"老师你好，什么是用户态什么是内核态，","like_count":6,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453558,"discussion_content":"前几节讲的呀，保护模式","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1567590322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1488308,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b5/b4/d594975b.jpg","nickname":"麻叶儿老豆腐","note":"","ucode":"7F3E981B94E9D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":961,"discussion_content":"老师已经哭晕在厕所","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562209685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":110824,"user_name":"windcaller","can_delete":false,"product_type":"c1","uid":1514157,"ip_address":"","ucode":"1CA3E849805770","user_header":"https://static001.geekbang.org/account/avatar/00/17/1a/ad/faf1bf19.jpg","comment_is_top":false,"comment_ctime":1562350647,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23037187127","product_id":100024701,"comment_content":"够硬核的课程！","like_count":5,"discussions":[{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292449,"discussion_content":"是啊 一脸懵逼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595229286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":92454,"user_name":"Tianz","can_delete":false,"product_type":"c1","uid":1248212,"ip_address":"","ucode":"4B6542604B8B6F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0b/d4/39763233.jpg","comment_is_top":false,"comment_ctime":1557277065,"is_pvip":false,"replies":[{"id":"49432","content":"赞","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567663845,"ip_address":"","comment_id":92454,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23032113545","product_id":100024701,"comment_content":"系统调用层：<br><br>1 用户在应用空间想要用内核环境的资源，怎么办捏？linux死规定了，就只能通过系统调用层<br>2 用户想要用什么资源就得通过调用对应的系统调用函数并加上参数<br>3 什么时候才真正实现了得到你想要的资源呢？那就是进入到内核空间（在中断处理函数里就可以），并调用了对应的系统调用函数（通过你在应用空间使用的函数（这些是名字固定了的） --&gt; 里面有函数计算出对应的（映射的）真正系统调用号（就是真正系统调用函数地址在系统调用数组里的位置） --&gt; 通过现在得到的系统调用号从系统调用数组中拿出这个真正的系统调用函数并执行，肯定加上一起传下来的参数了 --&gt; 返回","like_count":5,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449266,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567663845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254801,"avatar":"https://static001.geekbang.org/account/avatar/00/13/25/91/46600294.jpg","nickname":"猴哥一一 cium","note":"","ucode":"38EC64F8D1A0B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211038,"discussion_content":"这个可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584801041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86086,"user_name":"时间是最真的答案","can_delete":false,"product_type":"c1","uid":1183601,"ip_address":"","ucode":"B90F3EF769F865","user_header":"https://static001.geekbang.org/account/avatar/00/12/0f/71/9273e8a4.jpg","comment_is_top":false,"comment_ctime":1555309608,"is_pvip":false,"replies":[{"id":"49672","content":"重点理解过程，不要纠结代码，可以跳过这一节看下面的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696555,"ip_address":"","comment_id":86086,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18735178792","product_id":100024701,"comment_content":"想问一下，java开发的，会一些基础的linux命令，怎么学好这个专栏？感觉看的一头雾水，消化不了，有什么建议吗","like_count":4,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446887,"discussion_content":"重点理解过程，不要纠结代码，可以跳过这一节看下面的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245473,"user_name":"Geek_e53af3","can_delete":false,"product_type":"c1","uid":1615257,"ip_address":"","ucode":"49436D26D5379C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/2Vx3Ds3BiblmhgOicuGtJNZmDTF0MfkXIbQAJDV6Dj8KKnfaZDtE0HhZJ80eRVmJUzjDaHbL5ibicMN7OMxKv1pzRg/132","comment_is_top":false,"comment_ctime":1598952996,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"14483854884","product_id":100024701,"comment_content":"老师请问：<br>1. 32位执行int $80是硬件发出中断信号，然后cpu直接处理吗<br>2. 此时是谁在执行代码，此时有进程概念吗，还是说内核这个软件本身在执行，是否属于用户进程的时间，时间片用的是谁的？<br>3. 进入内核态后有什么状态来标志吗，为什么用户态之前不能做的操作，进入内核态就可以做了？<br>4. 64位的内核态切换就很像单纯的函数调用，为什么也可以进入内核态？","like_count":3,"discussions":[{"author":{"id":1066409,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","nickname":"Lorry","note":"","ucode":"BD4754D0F1D786","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383954,"discussion_content":"1. 中断基本都是会被立即执行的；\n2. 内核态执行没有进程概念，只有任务，内核态的任务和用户态的线程角色接近；\n3. 用户态是可以让用户自定义操作；由让操作系统崩溃的嫌疑；所以操作是首先的；内核态的功能实现是封闭的，调用过程崩溃的可能性很小；\n4. 这个问题很好，等待后来人解释一下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626316992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2058258,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/68/12/031a05c3.jpg","nickname":"A免帅叫哥","note":"","ucode":"76D2522E602AEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1066409,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","nickname":"Lorry","note":"","ucode":"BD4754D0F1D786","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393907,"discussion_content":"少了一次中断。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631632792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":383954,"ip_address":""},"score":393907,"extra":""}]}]},{"had_liked":false,"id":225345,"user_name":"蹦哒","can_delete":false,"product_type":"c1","uid":1458931,"ip_address":"","ucode":"56591A657DE7C7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epcs6PibsP9vEXv4EibUw3bhQPUK04zRTOvfrvF08TwM67xPb1LBh2uRENHQwo2VqYfC5GhJmM7icxHA/132","comment_is_top":false,"comment_ctime":1591719985,"is_pvip":false,"replies":[{"id":"82994","content":"从软中断改特殊指令，性能更好","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1591752382,"ip_address":"","comment_id":225345,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14476621873","product_id":100024701,"comment_content":"老师请问：中断和syscall有什么区别呢？看着实际的过程主要都是操作寄存器（虽然32位和64位操作的寄存器不一样）","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497815,"discussion_content":"从软中断改特殊指令，性能更好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591752382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147095,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1572792746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457694634","product_id":100024701,"comment_content":"还好做过内核添加系统调用实验，不然真的是一脸懵逼","like_count":3},{"had_liked":false,"id":131502,"user_name":"ZYecho","can_delete":false,"product_type":"c1","uid":1356589,"ip_address":"","ucode":"9D156DD30C581E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLh73kPzAKhz7YxUribqF6QKFiahhVAbwpgVLSRicA68c6ZFA7vUBJY1ves3LVvibrypROyI7awv47eSA/132","comment_is_top":false,"comment_ctime":1567770165,"is_pvip":false,"replies":[{"id":"50308","content":"栈顶呀","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567840746,"ip_address":"","comment_id":131502,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14452672053","product_id":100024701,"comment_content":"老师你好，这个地方保存的时候是保存在pt-regs结构体中，那么当中断通过iret进行返回的时候，cpu是如何知道我们的现场是存储在pt-regs结构体当中呢？<br>我理解iret指令应该只会操作cpu当中的寄存器才对。<br>","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466489,"discussion_content":"栈顶呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567840746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87093,"user_name":"陈锴","can_delete":false,"product_type":"c1","uid":1480870,"ip_address":"","ucode":"94BCEFCB266BCC","user_header":"https://static001.geekbang.org/account/avatar/00/16/98/a6/45c9a424.jpg","comment_is_top":false,"comment_ctime":1555511026,"is_pvip":false,"replies":[{"id":"31356","content":"分段还是有，只不过是残废的状态，就像你说的一样，到了内存那一节会详细说这个问题","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1555549127,"ip_address":"","comment_id":87093,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14440412914","product_id":100024701,"comment_content":"有个小问题，64位内核是不是已经取消使用cs 代码寄存器 和 ds数据段寄存器了（或者说默认设为0了），也就是只采用分页而不采用分段了","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447308,"discussion_content":"分段还是有，只不过是残废的状态，就像你说的一样，到了内存那一节会详细说这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555549127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86272,"user_name":"魏颖琪","can_delete":false,"product_type":"c1","uid":1184964,"ip_address":"","ucode":"097544C71EBDA7","user_header":"https://static001.geekbang.org/account/avatar/00/12/14/c4/e354d8ba.jpg","comment_is_top":false,"comment_ctime":1555336206,"is_pvip":false,"replies":[{"id":"49652","content":"64位是rax","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567695830,"ip_address":"","comment_id":86272,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14440238094","product_id":100024701,"comment_content":"老师，请教个问题，对于64位，DO_CALL在两个地方有地址，sysdeps&#47;unix&#47;sysv&#47;linux&#47;x86_64&#47;sysdep.h:179和sysdeps&#47;unix&#47;x86_64&#47;sysdep.h:26，我采用的最新的glibc的git下载。看到的和您给的代码不一样，您采用了前者的注释，后者的代码，两者使用的寄存器不一样。如何知道是通过哪个入口。sysdeps&#47;unix&#47;sysv&#47;linux&#47;x86_64&#47;sysdep.h:179中注释写到，将系统调用号放在rax，后面的代码中的是eax，这里没有看懂。","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446951,"discussion_content":"64位是rax","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567695830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215322,"user_name":"Geek_de1f21","can_delete":false,"product_type":"c1","uid":1906178,"ip_address":"","ucode":"F50200D0C45EA9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKK0p7AFxshDZN5Seib92rqybqrH8J3cticTbNFXOUib9bXYu3hWs4ia33sx1Un8IAd0KGcNUGQhz3TEw/132","comment_is_top":false,"comment_ctime":1588952768,"is_pvip":false,"replies":[{"id":"83475","content":"你看切换要干好多事情呀，都是和干用户的活没关系的事情","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1592186727,"ip_address":"","comment_id":215322,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10178887360","product_id":100024701,"comment_content":"请问老师，相比用户态，系统调用耗时的主要环节是什么呢？<br>以内存管理为例，无论是glibc，或是Google的tcmalloc，都在尽力避免系统调用。","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494393,"discussion_content":"你看切换要干好多事情呀，都是和干用户的活没关系的事情","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592186727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1906178,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKK0p7AFxshDZN5Seib92rqybqrH8J3cticTbNFXOUib9bXYu3hWs4ia33sx1Un8IAd0KGcNUGQhz3TEw/132","nickname":"Geek_de1f21","note":"","ucode":"F50200D0C45EA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":261422,"discussion_content":"我感觉，压栈，弹出， 查找调用号实际函数， 这些中间过程， 消耗的运算量最多就是把i++循环100次的运算量了。难道是32位的软中断耗时？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588953259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192384,"user_name":"OOK","can_delete":false,"product_type":"c1","uid":1342712,"ip_address":"","ucode":"BE6220D4E922E9","user_header":"https://static001.geekbang.org/account/avatar/00/14/7c/f8/1183f1ac.jpg","comment_is_top":false,"comment_ctime":1584848300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10174782892","product_id":100024701,"comment_content":"好头大，深入代码，太难了","like_count":2},{"had_liked":false,"id":155244,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1574671236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164605828","product_id":100024701,"comment_content":"了解就行，直接看图吧！代码还是得需要的时候自己慢慢扣","like_count":2},{"had_liked":false,"id":126967,"user_name":"ipofss","can_delete":false,"product_type":"c1","uid":1018620,"ip_address":"","ucode":"DE3061C9259F9E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","comment_is_top":false,"comment_ctime":1566526513,"is_pvip":false,"replies":[{"id":"48786","content":"看时间长了，就不懵了","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567496159,"ip_address":"","comment_id":126967,"utype":1}],"discussion_count":6,"race_medal":0,"score":"10156461105","product_id":100024701,"comment_content":"一脸懵逼的进来，一脸懵逼的出去，我是Java开发，会接触一些Linux命令，看看接下来能坚持多久吧","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464261,"discussion_content":"看时间长了，就不懵了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567496159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292450,"discussion_content":"请问坚持了多久？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595229514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292501,"discussion_content":"10讲。越往下看，看不懂的比重越多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595246109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":292450,"ip_address":""},"score":292501,"extra":""},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292543,"discussion_content":"请问还看吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595252939,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":292501,"ip_address":""},"score":292543,"extra":""},{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292550,"discussion_content":"暂时不看了，日后还会回来看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595253979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":292543,"ip_address":""},"score":292550,"extra":""}]}]},{"had_liked":false,"id":105362,"user_name":"perfect","can_delete":false,"product_type":"c1","uid":1566435,"ip_address":"","ucode":"CA7FB553F5B200","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEI9prFDcw69K04JPLxhVwdoqiaFgfKnhbj2DOB6OK5kSReF7ezz47tDadkP5libttUQibtiaibiaUXuicmNQ/132","comment_is_top":false,"comment_ctime":1560989924,"is_pvip":false,"replies":[{"id":"49006","content":"the c programming language，这本书还是挺薄的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567579461,"ip_address":"","comment_id":105362,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10150924516","product_id":100024701,"comment_content":"麻烦解释一下宏","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454647,"discussion_content":"the c programming language，这本书还是挺薄的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567579461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98629,"user_name":"weiguozhihui","can_delete":false,"product_type":"c1","uid":1052132,"ip_address":"","ucode":"D59087307CFC91","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/CibnyMEyuo4aKCjEzq3t8CRLbiatiaNCmSsTGlhdHaMseBibB2CK2Dyu4TSa7AVREseibicWUnSicp78kWP2gb66u7ajw/132","comment_is_top":false,"comment_ctime":1559044942,"is_pvip":false,"replies":[{"id":"35369","content":"谢谢，是.&#47;sysdeps&#47;unix&#47;make-syscalls.sh。glibc的版本是glibc-2.26","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1559099509,"ip_address":"","comment_id":98629,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10148979534","product_id":100024701,"comment_content":"有个问题：首先没有说在这个文章中自己使用的glibc的版本是哪个版本的。其次：make-syscall.sh是错的，应该是make-syscalls.sh","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451761,"discussion_content":"谢谢，是./sysdeps/unix/make-syscalls.sh。glibc的版本是glibc-2.26","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559099509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88142,"user_name":"逆流的鱼","can_delete":false,"product_type":"c1","uid":1258399,"ip_address":"","ucode":"AA3DDE44A83C40","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/9f/8dbd9558.jpg","comment_is_top":false,"comment_ctime":1555858193,"is_pvip":false,"replies":[{"id":"32057","content":"系统调用都会，纯计算看算什么了，算加法不用进内核","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1556197896,"ip_address":"","comment_id":88142,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10145792785","product_id":100024701,"comment_content":"系统调用都会导致用户态切换内核态？而纯计算的不会？","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447745,"discussion_content":"系统调用都会，纯计算看算什么了，算加法不用进内核","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556197896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86667,"user_name":"青石","can_delete":false,"product_type":"c1","uid":1215531,"ip_address":"","ucode":"B0056AD6453322","user_header":"https://static001.geekbang.org/account/avatar/00/12/8c/2b/3ab96998.jpg","comment_is_top":false,"comment_ctime":1555422096,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10145356688","product_id":100024701,"comment_content":"完全不懂C，内容看起来真的吃力，以下是个人理解，不知道对不对，还请指正。<br><br>文中有一部分代码是在glibc源码中的，git clone git:&#47;&#47;sourceware.org&#47;git&#47;glibc.git<br><br>32位系统调用过程：<br><br>1. 系统调用最多6个参数；<br>2. syscall number 对应的是%eax，所有参数存放在寄存器里；<br>3. 执行系统调用时执行int $0x80触发软中断陷入内核；<br>4. 陷入内核态之前需要保存用户态，这里面有个pushl %eax（和2中寄存器地址相同）,将%eax存入pt_regs结构中，保存完用户态现场应该就进入内核态了；<br>5. 进入内核态后调用do_syscall_32_irqs_on，取出syscall number及参数，do_syscall_32_irqs_on中的ax、bx、cx、dx、si、di、bp对应system call arguments中的%eax、%ebx、%ecx、%edx、%esi、%edi、%ebp，这些值是06节讲到的32位系统通用寄存器的数据单元。在内核态执行系统调用；<br>6. 完成后调用INTERRUPT_RETURN恢复用户态保存的现场。<br><br><br>64位系统调用：<br><br>1. 同样最多6个参数，但是与32位寄存器地址不同，64位系统的寄存器地址有16个，以r开始，32位系统的寄存器地址有8个，以e开始；<br>2. syscall_name转为syscall number存入寄存器%rax；<br>3. 调用syscall执行系统调用，期间的过程同样会陷入内核态；<br>4. 调用MSR_LSTAR -&gt; entry_SYSCALL_64保存用户态现场，具体参数如何传进去的看不懂；<br>5. 调用do_syscall_64，取出系统调用号和参数（和32位没区别），在内核态执行系统调用；<br>6. 完成后调用USERGS_SYSRET64返回，sysretq恢复用户态现场。","like_count":2},{"had_liked":false,"id":86535,"user_name":"小颜","can_delete":false,"product_type":"c1","uid":1078980,"ip_address":"","ucode":"4DAA36C2916E25","user_header":"","comment_is_top":false,"comment_ctime":1555392900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10145327492","product_id":100024701,"comment_content":"此处仅展示32位系统调用：<br><br>glibc大部分使用脚本封装生成代码，用到三种文件：<br>\t1.make-syscall.sh：读取syscalls.list文件的内容，对文件的每一行进行解析。根据每一行的内容生成一个.S汇编文件，汇编文件封装了一个系统调用。文件路径：sysdeps&#47;unix&#47;make-syscall.sh<br>\t2.syscall-template.S：是系统调用封装代码的模板文件。生成的.S汇编文件都调用它。文件路径：sysdeps&#47;unix&#47;syscall-template.S<br>\t3.syscalls.list：是数据文件，定义了全部的系统调用信息。文件路径有多个：sysdeps&#47;unix&#47;syscalls.list，sysdeps&#47;unix&#47;sysv&#47;linux&#47;syscalls.list，sysdeps&#47;unix&#47;sysv&#47;linux&#47;generic&#47;syscalls.list，sysdeps&#47;unix&#47;sysv&#47;linux&#47;i386&#47;syscalls.list<br><br>1.syscall-template.S生成汇编文件<br>\t在syscall-template.S生成汇编文件中在78行有调用T_PSEUDO (SYSCALL_SYMBOL, SYSCALL_NAME, SYSCALL_NARGS)方法，<br>2.T_PSEUDO是一个宏定义，此文件会引用#include &lt;sysdep.h&gt;<br>3.在sysdep.h文件中175行定义了函数PSEUDO：<br>\t&#47;* Linux takes system call arguments in registers:<br><br>\t\tsyscall number\t%eax\t     call-clobbered &#47;* 保存系统调用号 *&#47;<br>\t\targ 1\t\t%ebx\t     call-saved<br>\t\targ 2\t\t%ecx\t     call-clobbered<br>\t\targ 3\t\t%edx\t     call-clobbered<br>\t\targ 4\t\t%esi\t     call-saved<br>\t\targ 5\t\t%edi\t     call-saved<br>\t\targ 6\t\t%ebp\t     call-saved<br><br>\t   The stack layout upon entering the function is:<br><br>\t\t24(%esp)\tArg# 6<br>\t\t20(%esp)\tArg# 5<br>\t\t16(%esp)\tArg# 4<br>\t\t12(%esp)\tArg# 3<br>\t\t 8(%esp)\tArg# 2<br>\t\t 4(%esp)\tArg# 1<br>\t\t  (%esp)\tReturn address *&#47;<br>\t#define DO_CALL(syscall_name, args)\t\t\t      \t\t      \\<br>\t\tPUSHARGS_##args\t\t\t\t\t\t\t      \\<br>\t\tDOARGS_##args\t\t\t\t\t\t\t      \\<br>\t\tmovl $SYS_ify (syscall_name), %eax;\t\t\t\t\t      \\<br>\t\tENTER_KERNEL\t\t\t\t\t\t\t      \\<br>\t\tPOPARGS_##args<br>\t在此函数中调用了DO_CALL：将 系统调用 号保存在eax寄存器，其他参数分别保存至其他寄存器<br>4。然后调用ENTER_KERNEL，该宏定义在在125行：# define ENTER_KERNEL int $0x80，<br>5.int $0x80是一个软中断，将会触发软中断触发函数entry_INT80_32，<br>6.entry_INT80_32将用户态的一些信息保存在pt_regs，最终调用do_syscall_32_irqs_on，<br>7.do_syscall_32_irqs_on函数将从eax寄存器取出系统调用号，然后根据系统调用号从系统调用表中取出索引，最终取出对应函数，参数从pt_regs中，最终调用系统调用<br>8.在函数最后调用INTERRUPT_RETURN iret最终返回数据保存在pt_regs的eax中，并将pt_regs的用户态数据恢复","like_count":2},{"had_liked":false,"id":86222,"user_name":"杜少星","can_delete":false,"product_type":"c1","uid":1387875,"ip_address":"","ucode":"9EB2A705BA9B17","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/63/6513b925.jpg","comment_is_top":false,"comment_ctime":1555327173,"is_pvip":false,"replies":[{"id":"49656","content":"再看一遍","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696054,"ip_address":"","comment_id":86222,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10145261765","product_id":100024701,"comment_content":"这一章，听得真是懵逼…<br>没有编程基础看来不行啊","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446923,"discussion_content":"再看一遍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333350,"user_name":"赵军林","can_delete":false,"product_type":"c1","uid":1098601,"ip_address":"","ucode":"226A9E7582F24E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/69/7353dd4c.jpg","comment_is_top":false,"comment_ctime":1644306903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5939274199","product_id":100024701,"comment_content":"ebp寄存器不是存储栈基指针的吗？如果用来存储系统调用的参数，会不会把栈基指针的地址给覆盖了，iret恢复的时候怎么找回来呢","like_count":1},{"had_liked":false,"id":220811,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1590326379,"is_pvip":false,"replies":[{"id":"83067","content":"厉害","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1591784980,"ip_address":"","comment_id":220811,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5885293675","product_id":100024701,"comment_content":"关于系统调用过程 sys_call_table 的生成更详细的其实可以看这里：<br><br>arch&#47;x86&#47;entry&#47;syscalls&#47;syscallhdr.sh 和 arch&#47;x86&#47;entry&#47;syscalls&#47;syscalltbl.sh 其实会生成这么几个文件：<br><br>- &#47;arch&#47;x86&#47;include&#47;generated&#47;asm&#47;syscalls_32.h<br>- &#47;arch&#47;x86&#47;include&#47;generated&#47;uapi&#47;asm&#47;unistd_32.h<br>- &#47;arch&#47;x86&#47;include&#47;generated&#47;uapi&#47;asm&#47;unistd_64.h<br>- &#47;arch&#47;x86&#47;include&#47;generated&#47;uapi&#47;asm&#47;unistd_x32.h<br><br>也就是说 unistd_32.h 中的内容是 `#define __NR_write 4`，syscalls_32.h 中 的内容是 `__SYSCALL_I386(4, sys_write, )`。最终 syscall_32.c 中也有关于 `__SYSCALL_I386` 的宏定义，分别有两个，第一个如下所示相当于声明函数<br><br>```<br>#define __SYSCALL_I386(nr, sym, qual) extern asmlinkage long sym(unsigned long, unsigned long, unsigned long, unsigned long, unsigned long, unsigned long);<br>```<br><br>另一个是用于建立 sys_call_table 表格，宏定义替换之后就是 [4] = sys_write,。<br><br>```<br>#define __SYSCALL_I386(nr, sym, qual) [nr] = sym,<br>```<br><br>最终引入的 syscalls_32.h 最终用宏定义替换之后就相当于<br><br>```=<br>[0] = sys_restart_syscall,<br>[1] = sys_exit,<br>[2] = sys_fork,<br>...<br>```<br>","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496244,"discussion_content":"厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591784980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207097,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1587006194,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881973490","product_id":100024701,"comment_content":"看完系统调用这一节，想到了《程序员看自我修养》1.3 小节中提到的&quot;计算机科学领域的任何问题都可以通过增加一个中间的中间层来解决&quot;。计算机系统软件体系结构如下：应用层 -&gt; 运行库 -&gt; 操作系统 -&gt; 硬件，相邻层需要定义接口来实现相互通信。glib 系统调用就是为了解决应用层直接调用操作系统而导致的可移植问题，而增加的运行时库。<br>1. 应用层 -&gt; 运行时库：之所以不直接调用操作系统的API，因为不同的操作系统的实现可能不同。所以提出了 POSIX（可移植操作系统接口） 规范，在 Linux 中就是 glib<br>2. 运行库 -&gt; 操作系统：Systm Call<br>3. 操作系统 -&gt; 硬件：对应的硬件规范","like_count":1},{"had_liked":false,"id":174260,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1580111543,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5875078839","product_id":100024701,"comment_content":"能够阅读理解linux源代码一直是我梦想，最好能应用上，老师讲的非常棒的做到通俗易懂，但每个人基础和理解能力不同，希望老师能把每节课知识点再细化了就更好了","like_count":1},{"had_liked":false,"id":174227,"user_name":"高源","can_delete":false,"product_type":"c1","uid":1048887,"ip_address":"","ucode":"751B41FD38EF7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/37/12e4c9c9.jpg","comment_is_top":false,"comment_ctime":1580100030,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5875067326","product_id":100024701,"comment_content":"老师你讲的非常好，能否更细些，对于里面细节不是特别清楚，例如里面寄存器使用，为什么使用或者放到这个寄存器上等，我是特别想知道底的","like_count":1,"discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389327,"discussion_content":"这里面最经常用的就是eax吧，因为是第一个所以经常用哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629220929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172845,"user_name":"_stuView","can_delete":false,"product_type":"c1","uid":1244561,"ip_address":"","ucode":"C2D4AAB08515F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/91/65ff3154.jpg","comment_is_top":false,"comment_ctime":1579333142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5874300438","product_id":100024701,"comment_content":"历史上，x86 的系统调用实现经历了 int &#47; iret 到 sysenter &#47; sysexit 再到 syscall &#47; sysret 的演变，这篇文章讲的还是比较老版本的 syscall 过程，可以参考一下这篇文章https:&#47;&#47;cloud.tencent.com&#47;developer&#47;article&#47;1492374","like_count":1},{"had_liked":false,"id":170178,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1578544292,"is_pvip":false,"replies":[{"id":"66285","content":"谢谢","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1578824112,"ip_address":"","comment_id":170178,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5873511588","product_id":100024701,"comment_content":"讲的是真好","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480873,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578824112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148788,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1573087277,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5868054573","product_id":100024701,"comment_content":"想请教下 64 位的不是通过软中断吗？","like_count":1,"discussions":[{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389328,"discussion_content":"不是，64位通过syscall配合MSR","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629220975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1135912,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","nickname":"黑色毛衣","note":"","ucode":"FF7E235F91BA5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45933,"discussion_content":"老师都不理我…………\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573100332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124403,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1510495,"ip_address":"","ucode":"C6FC61A90F202B","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/5f/4cbcbfb9.jpg","comment_is_top":false,"comment_ctime":1565878629,"is_pvip":false,"replies":[{"id":"46268","content":"4.13","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566280589,"ip_address":"","comment_id":124403,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860845925","product_id":100024701,"comment_content":"请问老师列的代码是哪个版本的内核代码？和我看的2.6.34和5.2.8的不一样让我很慌张啊","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463157,"discussion_content":"4.13","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566280589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124313,"user_name":"nb Ack","can_delete":false,"product_type":"c1","uid":1137171,"ip_address":"","ucode":"2C1B99C85C8CCD","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/13/3160996d.jpg","comment_is_top":false,"comment_ctime":1565859032,"is_pvip":false,"replies":[{"id":"46274","content":"有的的确当时老师不怎么讲","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566280710,"ip_address":"","comment_id":124313,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860826328","product_id":100024701,"comment_content":"我都怀疑我有没上过 linux 的课","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463111,"discussion_content":"有的的确当时老师不怎么讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566280710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98117,"user_name":"light","can_delete":false,"product_type":"c1","uid":1120357,"ip_address":"","ucode":"DC59BB1A8F16A9","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/65/5831e48b.jpg","comment_is_top":false,"comment_ctime":1558917453,"is_pvip":true,"replies":[{"id":"35391","content":"准备方法就是看书，看代码，代码不理解就再找书看。windows没有研究过","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1559100926,"ip_address":"","comment_id":98117,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5853884749","product_id":100024701,"comment_content":"刘超老师好，看了好久了，很有意思，谢谢分享。想咨询下：方便讲讲您准备每节课的方法吗？后续继续深入的话怎么搭建这样研究的框架？如果研究windows，方法上有什么建议？谢谢！","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451563,"discussion_content":"准备方法就是看书，看代码，代码不理解就再找书看。windows没有研究过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1559100926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85871,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1555284136,"is_pvip":false,"replies":[{"id":"30913","content":"是的，中断完了就在内核了","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1555308304,"ip_address":"","comment_id":85871,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5850251432","product_id":100024701,"comment_content":"进入内核之前，保存所有的寄存器，然后调用 do_syscall_32_irqs_on。<br><br>进入entry_INT80_32的时候已经是内核态了吧？怎么这里说进入内核之前？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446845,"discussion_content":"是的，中断完了就在内核了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555308304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360296,"user_name":"Geek3372","can_delete":false,"product_type":"c1","uid":2845475,"ip_address":"四川","ucode":"1CA650BA54D474","user_header":"","comment_is_top":false,"comment_ctime":1666408690,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666408690","product_id":100024701,"comment_content":"请问下，既然咱们把数据放在了寄存器中，但是每个cpu不是才那么几个寄存器吗？每个task发生调用都存在相同寄存器？这个是咋去做切换的呢？","like_count":0},{"had_liked":false,"id":352473,"user_name":"cafe babe","can_delete":false,"product_type":"c1","uid":2346917,"ip_address":"","ucode":"6205DF67AD86F8","user_header":"https://static001.geekbang.org/account/avatar/00/23/cf/a5/5224b297.jpg","comment_is_top":false,"comment_ctime":1658718204,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658718204","product_id":100024701,"comment_content":"精彩啊","like_count":0},{"had_liked":false,"id":351792,"user_name":"油菜花","can_delete":false,"product_type":"c1","uid":1238478,"ip_address":"","ucode":"E9901BBD9952B7","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/ce/2978a69a.jpg","comment_is_top":false,"comment_ctime":1658197716,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658197716","product_id":100024701,"comment_content":"参数4是不是应该是rcx，而不是r10","like_count":0},{"had_liked":false,"id":348747,"user_name":"caozg","can_delete":false,"product_type":"c1","uid":2686996,"ip_address":"","ucode":"03C5A4B2DCA4C4","user_header":"https://static001.geekbang.org/account/avatar/00/29/00/14/9f55adf1.jpg","comment_is_top":false,"comment_ctime":1655366580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655366580","product_id":100024701,"comment_content":"内核pt_regs中保存的寄存器内容是系统调用函数本身的参数，还是用户态切换到内核时保存的用户态环境？","like_count":0},{"had_liked":false,"id":347238,"user_name":"梦江","can_delete":false,"product_type":"c1","uid":2059155,"ip_address":"","ucode":"B5FD2835863460","user_header":"https://static001.geekbang.org/account/avatar/00/1f/6b/93/bfda2d1c.jpg","comment_is_top":false,"comment_ctime":1653838028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653838028","product_id":100024701,"comment_content":"如果通过软中断 相比syscall，多了一个中断处理程序的介入，所以性能低？","like_count":0},{"had_liked":false,"id":341457,"user_name":"涛子","can_delete":false,"product_type":"c1","uid":2647122,"ip_address":"","ucode":"8B9830B2B3C6FD","user_header":"https://static001.geekbang.org/account/avatar/00/28/64/52/e4536e9c.jpg","comment_is_top":false,"comment_ctime":1649638529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649638529","product_id":100024701,"comment_content":"这一节太硬核了。。","like_count":0},{"had_liked":false,"id":336632,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1646268187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646268187","product_id":100024701,"comment_content":"这一篇完全看不懂了，只会java","like_count":0},{"had_liked":false,"id":332847,"user_name":"iamjohnnyzhuang","can_delete":false,"product_type":"c1","uid":1015327,"ip_address":"","ucode":"E694C1828907F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/1f/b1d458a9.jpg","comment_is_top":false,"comment_ctime":1643727433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643727433","product_id":100024701,"comment_content":"对于做业务的同学真的不需要学习的这么细，分层学习才是适合自己的。通过操作系统课程了解大部分核心流程，比如进程的创建流程、内存分页这些基础概念。细节的东西日常用不到即使现在弄懂了很快也会忘记，真有用到再来学习也会事倍功半。","like_count":0},{"had_liked":false,"id":332086,"user_name":"凯文小猪","can_delete":false,"product_type":"c1","uid":1980201,"ip_address":"","ucode":"36D8AD0229547F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","comment_is_top":false,"comment_ctime":1643011326,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643011326","product_id":100024701,"comment_content":"32位还是很清晰的 通过包装过的系统函数找到系统调用号 之后移入eax 发起int 0x80 ，等到结果返回 iret指令 从eax里拿到执行结果。<br>有个问题：linux 3.10 linux 32位为什么不直接使用sysenter , sysexit。这两个指令是intel原生提供的 还望老师解答","like_count":0},{"had_liked":false,"id":328674,"user_name":"yf","can_delete":false,"product_type":"c1","uid":2636690,"ip_address":"","ucode":"4D81F5FD54C7FC","user_header":"https://static001.geekbang.org/account/avatar/00/28/3b/92/d018ecbb.jpg","comment_is_top":false,"comment_ctime":1640832526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640832526","product_id":100024701,"comment_content":"请问老师：<br>1. 这里获得系统调用号的时候，是通过glibc做还是内核做？<br>2. 如果是glibc做的话，那么通过调用的函数名得到调用号的时候，glibc已经知道了用户态函数和调用号之间的对应关系了是吗是吗？<br>3.如果我在系统调用表中，将open函数的系统调用号改掉之后，还能够对应上吗？<br>","like_count":0},{"had_liked":false,"id":325796,"user_name":"lanru666","can_delete":false,"product_type":"c1","uid":2796588,"ip_address":"","ucode":"83064A6AEDD34F","user_header":"https://static001.geekbang.org/account/avatar/00/2a/ac/2c/d2742c9a.jpg","comment_is_top":false,"comment_ctime":1639133089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639133089","product_id":100024701,"comment_content":"哪里可以下断点，最后实验的函数可以下断点，sys_open的不行","like_count":0},{"had_liked":false,"id":324623,"user_name":"Geek_93217e","can_delete":false,"product_type":"c1","uid":2309990,"ip_address":"","ucode":"DC70FDB8AD83EA","user_header":"","comment_is_top":false,"comment_ctime":1638520855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638520855","product_id":100024701,"comment_content":"&quot;进入内核之前，保存所有的寄存器，然后调用 do_syscall_32_irqs_on &quot;这一句话有些迷惑,看最后的流程图,感觉保存寄存器像是已经进入到内核,但还未进行系统调用之前","like_count":0},{"had_liked":false,"id":317968,"user_name":"xiong","can_delete":false,"product_type":"c1","uid":1099375,"ip_address":"","ucode":"C1BFD9EF96372F","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/6f/ac3003fa.jpg","comment_is_top":false,"comment_ctime":1635078045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635078045","product_id":100024701,"comment_content":"只能说太硬核","like_count":0},{"had_liked":false,"id":312686,"user_name":"luo","can_delete":false,"product_type":"c1","uid":1716827,"ip_address":"","ucode":"1A1DA8EB916ECF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/32/5b/d0c7e813.jpg","comment_is_top":false,"comment_ctime":1631942377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631942377","product_id":100024701,"comment_content":"不错，第一遍看的有点懵，第二遍着重看了下里面的汇编语句结合老师的讲解还是能看懂的，系统调用生成表编译时自动生成那里还有点懵，不过不影响整体调用流程理解，写的很好，感谢。","like_count":0},{"had_liked":false,"id":307134,"user_name":"skye","can_delete":false,"product_type":"c1","uid":1027840,"ip_address":"","ucode":"C55C9F52C78A00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/00/9b49f42b.jpg","comment_is_top":false,"comment_ctime":1628904301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628904301","product_id":100024701,"comment_content":"64位系统调用没有用中断？","like_count":0},{"had_liked":false,"id":302875,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1626419165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626419165","product_id":100024701,"comment_content":"又一讲看不懂，看了个寂寞。","like_count":0},{"had_liked":false,"id":288971,"user_name":"。。。","can_delete":false,"product_type":"c1","uid":2181622,"ip_address":"","ucode":"D0A85FF8F0BC71","user_header":"https://static001.geekbang.org/account/avatar/00/21/49/f6/74131e49.jpg","comment_is_top":false,"comment_ctime":1618803296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618803296","product_id":100024701,"comment_content":"软中断和syscall的区别是什么呀？","like_count":0},{"had_liked":false,"id":287985,"user_name":"雪中亮","can_delete":false,"product_type":"c1","uid":1024341,"ip_address":"","ucode":"B294FDFF9F13E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/55/cff2322c.jpg","comment_is_top":false,"comment_ctime":1618239878,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1618239878","product_id":100024701,"comment_content":"我看到老师讲过，一个进程只会创建一个内核栈，那么我就有问题了：系统调用可以并发执行吗？也就是说会不会出现某一时刻，一个进程的多个线程同时进行系统调用并均陷入内核态呢？如果一个进程只有一个内核栈的话，多个系统调用就要排队了，老师是这样吗？","like_count":0,"discussions":[{"author":{"id":1024341,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a1/55/cff2322c.jpg","nickname":"雪中亮","note":"","ucode":"B294FDFF9F13E8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368249,"discussion_content":"我在StackOverflow上查到了结果：\n\nhttps://stackoverflow.com/a/18350287/6711470\n\nDoes each process have its own kernel stack ?\n\nNot just each process - each thread has its own kernel stack (and, in fact, its own user stack as well). Remember the only difference between processes and threads (to Linux) is the fact that multiple threads can share an address space (forming a process).\n\n每个线程都有自己的内核栈，进程和线程的唯一不同点，是他们分享同一个地址空间「来自于进程」。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618632927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274811,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1611185991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611185991","product_id":100024701,"comment_content":"知道了系统调用的复杂性，c不熟悉，看得很吃力","like_count":0},{"had_liked":false,"id":265249,"user_name":"？","can_delete":false,"product_type":"c1","uid":2030035,"ip_address":"","ucode":"3043E00A056081","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f9/d3/2cb7516e.jpg","comment_is_top":false,"comment_ctime":1606826900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606826900","product_id":100024701,"comment_content":"这个地方如果不关注代码实现的话，可以这么来理解，举个例子，我们应用程序发送一个http响应，这个时候是需要调用系统内核的网卡接口将用户层的数据拷贝到内核层，为什么要这样呢，因为Linux的用户进程是不能直接操作cpu的，这个时候就会有人觉得拷贝来拷贝去太慢了，不如把数据共享一下，就有了缓冲区，可以同时被用户进程和内核同时访问到，最后就是内核将数据通过网卡发送到网络上，就完成了一次服务端的http响应，然后就是计算机网络的知识了。","like_count":0},{"had_liked":false,"id":260510,"user_name":"IT蜗壳-Tango","can_delete":false,"product_type":"c1","uid":1000612,"ip_address":"","ucode":"92330844C1EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/a4/7a45d979.jpg","comment_is_top":false,"comment_ctime":1605052021,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1605052021","product_id":100024701,"comment_content":"打卡学习，感觉这个专栏还是至少再刷一遍才行。","like_count":0},{"had_liked":false,"id":256998,"user_name":"hinzer","can_delete":false,"product_type":"c1","uid":1708157,"ip_address":"","ucode":"021A687DF49F02","user_header":"https://static001.geekbang.org/account/avatar/00/1a/10/7d/e2e9d222.jpg","comment_is_top":false,"comment_ctime":1603808502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603808502","product_id":100024701,"comment_content":"系统调用这个图总结的太棒了！！","like_count":0},{"had_liked":false,"id":256119,"user_name":"小炭","can_delete":false,"product_type":"c1","uid":1109544,"ip_address":"","ucode":"E20E3958CAF06C","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/28/c04a0c83.jpg","comment_is_top":false,"comment_ctime":1603531684,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1603531684","product_id":100024701,"comment_content":"glibc 对系统调用的封装，这个中介对用户来说，最大的收益是什么呢？","like_count":0,"discussions":[{"author":{"id":1066409,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","nickname":"Lorry","note":"","ucode":"BD4754D0F1D786","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383976,"discussion_content":"收益就是节省了大量的开发成本，调用一个open函数就可以读取文件；否则你需要自己实现寄存器现场保存，调用系统函数，恢复保存现场一整套流程","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626325892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028811,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f5/0b/73628618.jpg","nickname":"兔嘟嘟","note":"","ucode":"5A9042B4C7670C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389330,"discussion_content":"实际上我们做开发连glibc都用不到，比如说python的open，又加了一层封装...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629221248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252328,"user_name":"？","can_delete":false,"product_type":"c1","uid":2030035,"ip_address":"","ucode":"3043E00A056081","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f9/d3/2cb7516e.jpg","comment_is_top":false,"comment_ctime":1602237863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602237863","product_id":100024701,"comment_content":"我下载了linux内核源码后，第一个函数声明就把我搞迷糊了，代码是这样的。<br>asmlinkage __visible void __init start_kernel(void)<br><br>asmlinkage 和_init 都是宏， __visible网上说是gcc用的，就很迷糊了，这个有推荐的资料系统学习一下吗，C语言这边也是有学习的,但是只学习了标准C的语法，GUN的一些语法还是不太清楚。学习的话是不是要把GUN的一些语法看一下才行","like_count":0},{"had_liked":false,"id":242563,"user_name":"wy","can_delete":false,"product_type":"c1","uid":1064681,"ip_address":"","ucode":"41C1B304E7F032","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e9/116f1dee.jpg","comment_is_top":false,"comment_ctime":1597760803,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597760803","product_id":100024701,"comment_content":"<br>根据深入计算机系统8.2.4节,cpu通过设置某个控制寄存器的模式来提供内核态和用户态切换的功能。用户态要切换到内核态，必须通过通过系统调用，通过调用syscall函数（64位）或者中断函数（32位）进入内核态，接着把数据段、代码段等寄存器现场保护起来，并最终通过传递过来的调用号在sys_call_table里面的找到相关的函数，并把寄存器里面的参数传递进去，执行完后，恢复现场，回到用户态。","like_count":0},{"had_liked":false,"id":242229,"user_name":"ISA007","can_delete":false,"product_type":"c1","uid":1103374,"ip_address":"","ucode":"232AA4463EA357","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/0e/711721c3.jpg","comment_is_top":false,"comment_ctime":1597640189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597640189","product_id":100024701,"comment_content":"C语言开发出身，对于系统调用的整个流程不是很了解，但是整体都看的明白。留着真正需要的时候再仔细研究！","like_count":0},{"had_liked":false,"id":230277,"user_name":"做一个积极的跳蚤","can_delete":false,"product_type":"c1","uid":2035956,"ip_address":"","ucode":"BBE367BBCB6C28","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ecruTrMgzvqIs5iaWVibZw4Rxic42ZXGTflvOFHiaZEkf32Su01gDCWT8tdIcEoybg0ibAYU2Q8f9bleL7Q37fKguxQ/132","comment_is_top":false,"comment_ctime":1593334380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593334380","product_id":100024701,"comment_content":"发现有个不好的学习习惯，本来看内核的那个进程链表，解决发现那个内存障碍看不懂，就去研究内存障碍，结果内存障碍中汇编cpu指令也不懂就又去看，越看越晕，最后慢慢放弃了继续看下去，最后大半天都过去了，发现那个进程链表还是停留在第一句，好吧估计等我研究差不多了都不晓得啥时候去了，算了不看了，继续听刘老师的下章教程了。哭，哭，哭","like_count":0},{"had_liked":false,"id":228018,"user_name":"highfly029","can_delete":false,"product_type":"c1","uid":2038039,"ip_address":"","ucode":"F1B0BE5097B61A","user_header":"","comment_is_top":false,"comment_ctime":1592536829,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592536829","product_id":100024701,"comment_content":"老师你好，感觉syscall是不是比interrupt性能要高啊，但是不知道为什么","like_count":0},{"had_liked":false,"id":201154,"user_name":"羊仔爸比","can_delete":false,"product_type":"c1","uid":1465584,"ip_address":"","ucode":"746A1099298811","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLTFKH3aA1FVyz7VvAIlISibAPbmiaAyQ5fAK3ElyEcXuRmsmicAefXxkhbC11icjBgfbXPXkHHt5O0xw/132","comment_is_top":false,"comment_ctime":1585724180,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585724180","product_id":100024701,"comment_content":"您好想问一下系统调用过程中__user_cs 和 __user_ds 是保存在哪里了，每太看明白","like_count":0},{"had_liked":false,"id":200361,"user_name":"hshayq","can_delete":false,"product_type":"c1","uid":1237880,"ip_address":"","ucode":"F5435E14BCCD25","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/78/3321053c.jpg","comment_is_top":false,"comment_ctime":1585576615,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585576615","product_id":100024701,"comment_content":"先忽略代码，重点了解一下流程","like_count":0},{"had_liked":false,"id":176784,"user_name":"hinzer","can_delete":false,"product_type":"c1","uid":1708157,"ip_address":"","ucode":"021A687DF49F02","user_header":"https://static001.geekbang.org/account/avatar/00/1a/10/7d/e2e9d222.jpg","comment_is_top":false,"comment_ctime":1581166982,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1581166982","product_id":100024701,"comment_content":"技术细节有点多，似懂非懂","like_count":0,"discussions":[{"author":{"id":1708157,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/10/7d/e2e9d222.jpg","nickname":"hinzer","note":"","ucode":"021A687DF49F02","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":227645,"discussion_content":"在读了一遍，确实有点硬核@_@","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586510284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176568,"user_name":"起而行","can_delete":false,"product_type":"c1","uid":1131399,"ip_address":"","ucode":"4F116B0B740776","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/87/7604d7a4.jpg","comment_is_top":false,"comment_ctime":1581088524,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581088524","product_id":100024701,"comment_content":"day9看似简单的系统调用，也需要经历:获取系统调用名称，转换为系统调用号，在系统调用表中根据系统调用号找到函数，执行函数，返回结果这些过程。在这之中，寄存器用来保存现场，宏定义能更好地呈现代码结构","like_count":0},{"had_liked":false,"id":175128,"user_name":"Geek_6f2a39","can_delete":false,"product_type":"c1","uid":1817246,"ip_address":"","ucode":"EA58EA41164AC5","user_header":"https://static001.geekbang.org/account/avatar/00/1b/ba/9e/b0d5542d.jpg","comment_is_top":false,"comment_ctime":1580565786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580565786","product_id":100024701,"comment_content":"看过微机原理和一些杂七杂八的Linux教程，文档里好多似曾相识的东西……","like_count":0},{"had_liked":false,"id":172828,"user_name":"_stuView","can_delete":false,"product_type":"c1","uid":1244561,"ip_address":"","ucode":"C2D4AAB08515F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/91/65ff3154.jpg","comment_is_top":false,"comment_ctime":1579329070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579329070","product_id":100024701,"comment_content":"好希望老师能在讲代码的时候把代码的位置贴出来，不然真的难以理解，想看看源码要自己找好久，有的还找不到","like_count":0},{"had_liked":false,"id":172440,"user_name":"_stuView","can_delete":false,"product_type":"c1","uid":1244561,"ip_address":"","ucode":"C2D4AAB08515F1","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/91/65ff3154.jpg","comment_is_top":false,"comment_ctime":1579177219,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579177219","product_id":100024701,"comment_content":"make-syscall.sh 根据配置文件 syscalls.list 生成的文件在哪里呢？是要编译 Linux 的时候执行这个脚本之后才生成的吗？想知道这个文件长什么样子","like_count":0},{"had_liked":false,"id":170647,"user_name":"无敌小饭桶","can_delete":false,"product_type":"c1","uid":1073175,"ip_address":"","ucode":"AF0015EC4BC90D","user_header":"https://static001.geekbang.org/account/avatar/00/10/60/17/2c2c21b6.jpg","comment_is_top":false,"comment_ctime":1578650579,"is_pvip":false,"replies":[{"id":"66272","content":"是不是你安装的系统有问题，dmsg看一下，或者看一下系统日志，也可以在公有云创建一个用用看","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1578823421,"ip_address":"","comment_id":170647,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578650579","product_id":100024701,"comment_content":"CenOS7.4 系统切换命令行界面一直卡在 start waiting for Plymouth boot screen to quit (1min32s&#47;no limit)这种情况是什么原因，有么有解决办法","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481055,"discussion_content":"是不是你安装的系统有问题，dmsg看一下，或者看一下系统日志，也可以在公有云创建一个用用看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578823421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162168,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1576470233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576470233","product_id":100024701,"comment_content":"只能读懂这些了:<br>系统调用最多六个参数，加上系统调用名名称总共七个参数。在用户态，让这七个参数存入寄存器，进入内核态以后，读取这七个寄存器，也就确认了系统调用和所有参数，然后调用中断服务完成系统调用后返回结果到用户态。从用户态进内核态需要保存存在寄存器中关于用户态的各种状态到内存，例如各种段首地址和偏移量。从内核态返回用户态，就会从内存拷贝回用户态的状态到相应寄存器，例如各种段首地址和偏移量。感觉内核态的运行时是不被打断的，所以就没有保存和恢复一说，只要数据段和代码段正常加载，执行完毕或错误即可。","like_count":0},{"had_liked":false,"id":155292,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1574675317,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574675317","product_id":100024701,"comment_content":"接项目的过程就是我们日常使用系统的过程","like_count":0},{"had_liked":false,"id":155251,"user_name":"核桃","can_delete":false,"product_type":"c1","uid":1385204,"ip_address":"","ucode":"7AB05270CBCCCB","user_header":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","comment_is_top":false,"comment_ctime":1574671720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574671720","product_id":100024701,"comment_content":"请问一下这里用的linux内核版本是多少？在linux-5.1.19下找不到这篇文章的内容.","like_count":0},{"had_liked":false,"id":141135,"user_name":"冥王星","can_delete":false,"product_type":"c1","uid":1311603,"ip_address":"","ucode":"CA43C381A69736","user_header":"https://static001.geekbang.org/account/avatar/00/14/03/73/38397da1.jpg","comment_is_top":false,"comment_ctime":1571120996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571120996","product_id":100024701,"comment_content":"了解这么详细的系统调用过程有什么用呢?","like_count":0},{"had_liked":false,"id":137988,"user_name":"Kevin⚡️Zhou","can_delete":false,"product_type":"c1","uid":1440772,"ip_address":"","ucode":"C0FC2673705212","user_header":"https://static001.geekbang.org/account/avatar/00/15/fc/04/d83a555e.jpg","comment_is_top":false,"comment_ctime":1569966362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569966362","product_id":100024701,"comment_content":"老师, 我有个疑问一直缠绕心中, 系统调用其实是调用了内核中的函数, 操作系统是如何通过sys_call_table查询出来的系统调用名称去找到这个内核函数在内存中的实际地址呢? 期待您的解答, 谢谢!","like_count":0},{"had_liked":false,"id":131402,"user_name":"ZYecho","can_delete":false,"product_type":"c1","uid":1356589,"ip_address":"","ucode":"9D156DD30C581E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLh73kPzAKhz7YxUribqF6QKFiahhVAbwpgVLSRicA68c6ZFA7vUBJY1ves3LVvibrypROyI7awv47eSA/132","comment_is_top":false,"comment_ctime":1567740135,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1567740135","product_id":100024701,"comment_content":"老师您好，我想问下系统调用的时候为什么需要保存到寄存器状态需要存到pt_regs 结构中去呢？系统调用如果使用软中断80的话不是会导致cpu硬件自动的将ss esp eflags cs eip等寄存器给压栈么？","like_count":0,"discussions":[{"author":{"id":1066409,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","nickname":"Lorry","note":"","ucode":"BD4754D0F1D786","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383978,"discussion_content":"用户态的将调用参数放到寄存器里面，内核将寄存器内容放置到pt_regs的内存结构中，为了便于内核程序访问（代码操作简单）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626326584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":131041,"user_name":"彭锐","can_delete":false,"product_type":"c1","uid":1179669,"ip_address":"","ucode":"F2CB53DE42026D","user_header":"https://static001.geekbang.org/account/avatar/00/12/00/15/6e399ec7.jpg","comment_is_top":false,"comment_ctime":1567606786,"is_pvip":false,"replies":[{"id":"49335","content":"写入了，就自动触发内核代码，这是硬件做的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567649838,"ip_address":"","comment_id":131041,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567606786","product_id":100024701,"comment_content":"64位的场景，glibc只要把系统调用号写入MSR，内核就开始执行。<br>问题是，内核代码是怎么知道MSR被写入了呢？一直轮询吗？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466260,"discussion_content":"写入了，就自动触发内核代码，这是硬件做的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567649838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126768,"user_name":"","can_delete":false,"product_type":"c1","uid":1322330,"ip_address":"","ucode":"FA2983C5AD320C","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/5a/cc637589.jpg","comment_is_top":false,"comment_ctime":1566467931,"is_pvip":false,"replies":[{"id":"48791","content":"加油","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567496365,"ip_address":"","comment_id":126768,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566467931","product_id":100024701,"comment_content":"放弃纠结,先过一遍再来感受了","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464158,"discussion_content":"加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567496365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":123973,"user_name":"cppWizard","can_delete":false,"product_type":"c1","uid":1063359,"ip_address":"","ucode":"6F137354FE5993","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/bf/2e5a6e9a.jpg","comment_is_top":false,"comment_ctime":1565786385,"is_pvip":false,"replies":[{"id":"46285","content":"如果写一个C++的程序，里面include了一些头文件，调用了一些函数，这里面就有很多是glibc的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566281025,"ip_address":"","comment_id":123973,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565786385","product_id":100024701,"comment_content":"超哥你好，在“glibc 对系统调用的封装”一节中提到，用户会调用glibc内的函数，我的问题是：这里的用户都是谁呢？是谁在调用glibc里的函数？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462929,"discussion_content":"如果写一个C++的程序，里面include了一些头文件，调用了一些函数，这里面就有很多是glibc的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566281025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121852,"user_name":"一塌糊涂","can_delete":false,"product_type":"c1","uid":1106566,"ip_address":"","ucode":"B55DAEFB98D83C","user_header":"https://static001.geekbang.org/account/avatar/00/10/e2/86/90041355.jpg","comment_is_top":false,"comment_ctime":1565234783,"is_pvip":false,"replies":[{"id":"46340","content":"非阻塞应该是在glibc里面做的吧。","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566296200,"ip_address":"","comment_id":121852,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1565234783","product_id":100024701,"comment_content":"这些都是阻塞系统掉用吧 ，非阻塞系统掉用是如何实现的啊 老师","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461977,"discussion_content":"非阻塞应该是在glibc里面做的吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566296200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114324,"user_name":"k先生","can_delete":false,"product_type":"c1","uid":1221532,"ip_address":"","ucode":"76D292DC62B52D","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/9c/8a14b7db.jpg","comment_is_top":false,"comment_ctime":1563273973,"is_pvip":false,"replies":[{"id":"46615","content":"多看几遍，以理解过程为主，代码是印证过程的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1566367496,"ip_address":"","comment_id":114324,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563273973","product_id":100024701,"comment_content":"直接撸代码解说，个人感觉看完记忆部分居多，有点深吸收不了","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458607,"discussion_content":"多看几遍，以理解过程为主，代码是印证过程的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566367496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":108908,"user_name":"gugu","can_delete":false,"product_type":"c1","uid":1346069,"ip_address":"","ucode":"A87EFB95B43CE7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QEqicKQS1lCunSfI7tIcfhTOb0GjIRRIiav2PBc4ZUvstNXhP2LISfhwwRqSJjwbpupMeaqclUGKc78lfS7JVmUQ/132","comment_is_top":false,"comment_ctime":1561926866,"is_pvip":false,"replies":[{"id":"39607","content":"允许，这是特别复杂的一个过程，很后面才会讲这个问题","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1562031595,"ip_address":"","comment_id":108908,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1561926866","product_id":100024701,"comment_content":"内核执行系统调用过程中允许被其它中断打断么？打断后如何恢复？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":456163,"discussion_content":"允许，这是特别复杂的一个过程，很后面才会讲这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562031595,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":106675,"user_name":"没心没肺","can_delete":false,"product_type":"c1","uid":1258867,"ip_address":"","ucode":"121FD3AEBA3BEA","user_header":"https://static001.geekbang.org/account/avatar/00/13/35/73/46d6dadc.jpg","comment_is_top":false,"comment_ctime":1561370485,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1561370485","product_id":100024701,"comment_content":"编译过程中得到的两个文件<br>unistd_32.h对应syscall_32.h<br>unistd_64.h对应syscall_64.h<br>是这样吗？","like_count":0},{"had_liked":false,"id":104018,"user_name":"东方奇骥","can_delete":false,"product_type":"c1","uid":1354850,"ip_address":"","ucode":"DEE7085F7E55A4","user_header":"https://static001.geekbang.org/account/avatar/00/14/ac/62/37912d51.jpg","comment_is_top":false,"comment_ctime":1560591209,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1560591209","product_id":100024701,"comment_content":"上一讲里面有讲的","like_count":0},{"had_liked":false,"id":102051,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1560126755,"is_pvip":false,"replies":[{"id":"37001","content":"代码主要为了印证和了解流程，所以多个文件里面的代码，我放在一起了，有时候，有的代码做了太多的分支，我都删掉了，只保留的主要的。","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1560241158,"ip_address":"","comment_id":102051,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1560126755","product_id":100024701,"comment_content":"请问老师，可否简单归纳一下本文提到的源码都在哪里？要如何打开查看？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453235,"discussion_content":"代码主要为了印证和了解流程，所以多个文件里面的代码，我放在一起了，有时候，有的代码做了太多的分支，我都删掉了，只保留的主要的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560241158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101713,"user_name":"Ken95","can_delete":false,"product_type":"c1","uid":1487490,"ip_address":"","ucode":"072F99687A08BF","user_header":"https://static001.geekbang.org/account/avatar/00/16/b2/82/2e2d3bdb.jpg","comment_is_top":false,"comment_ctime":1559923992,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559923992","product_id":100024701,"comment_content":"虽然有些懵但感觉很有意思，老师功底深厚","like_count":0},{"had_liked":false,"id":99532,"user_name":"edwjn","can_delete":false,"product_type":"c1","uid":1053316,"ip_address":"","ucode":"F6F1669E297A6D","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/84/ef753b80.jpg","comment_is_top":false,"comment_ctime":1559243631,"is_pvip":false,"replies":[{"id":"49225","content":"这个开销咋定义呢","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567604373,"ip_address":"","comment_id":99532,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559243631","product_id":100024701,"comment_content":"我理解这个中断机制就是一个巧妙的指令跳转，这个指令的指针是指向了do_syscall_32_irqs_on这个方法，在这个方法里会把控制单元里属于用户态的cs、ds保存下来，把调用系统方法需要的参数放到对应的寄存器里，然后切换控制单元为内核态的cs、ds，再根据系统调用表执行对应的系统方法，并拿到结果，把结果放到寄存器里，最后把控制单元里的cs、ds恢复回用户态。这就完成了一个系统调用。<br>想知道的一点是，一次系统调用的开销与一次进程切换(进程A-&gt;系统调度服务-&gt;进程A)的开销是不是一样的？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452156,"discussion_content":"这个开销咋定义呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567604373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99318,"user_name":"Akay","can_delete":false,"product_type":"c1","uid":1033946,"ip_address":"","ucode":"7E1A7EB7277718","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c6/da/9afaa805.jpg","comment_is_top":false,"comment_ctime":1559192227,"is_pvip":false,"replies":[{"id":"49231","content":"多看几遍就好了","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567604770,"ip_address":"","comment_id":99318,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559192227","product_id":100024701,"comment_content":"这几章看得好困难，有些懵懵懂懂~~~","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452059,"discussion_content":"多看几遍就好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567604770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90859,"user_name":"天王","can_delete":false,"product_type":"c1","uid":1239337,"ip_address":"","ucode":"C074B2F9A5F007","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/29/629d9bb0.jpg","comment_is_top":false,"comment_ctime":1556694947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556694947","product_id":100024701,"comment_content":"系统调用，就像一个办公大厅，可以结合一个open函数，来了解系统调用的整个过程，用户要打开一个文件，用户态进程首先会调用glibc函数，这个函数将系统调用名称转换成系统调用id，将参数和变量保存在寄存器里面，glibc调用系统内核的open函数，并且将寄存器存的传入到内核的寄存器，内核在系统调用表找到具体的调用函数，执行，返回到用户态，恢复值，继续执行。1  glibc简介 glibc有一个systemlist，系统调用列表，这个make-syscall.sh，对于每一个系统调用生成一个文件，里面定义了一些宏，系统调用的调用方式。PSEUDO函数里面DO_CALL。2 DO_CALL32位和64位调用是不一样的，32位的保存在sysdep.h文件，将根据系统调用名获取到的系统调用id，存到eax寄存器里面，执行ENTER_KERNEL，ENTER_KERNEL，会触发一个软中断，陷入中断门，可以陷入trap内核，trap_init函数，ENTRY函数通过push和SAVE_ALL将用户态的寄存器，存放在pt_regs里，调用do_syscall_32_irqs_on，内核调用函数，将系统调用号取出来，从systemlist找到对应的列表，从寄存器里面找到参数，进行调用，执行完之后iret指令将用户态的状态恢复，继续执行。系统调用表里面有对系统调用的定义，id，name，系统调用名称。syscall_32.tbl和syscall_64.tbl，真正的实现在一个.c文件。","like_count":0},{"had_liked":false,"id":89288,"user_name":"rxx","can_delete":false,"product_type":"c1","uid":1509742,"ip_address":"","ucode":"B4AD003324D2E0","user_header":"https://static001.geekbang.org/account/avatar/00/17/09/6e/b85d52b8.jpg","comment_is_top":false,"comment_ctime":1556150045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556150045","product_id":100024701,"comment_content":"我写的定时任务，因为有eof手动可以跑，跑定时跑不了，非常感谢！！","like_count":0},{"had_liked":false,"id":88141,"user_name":"Dispy","can_delete":false,"product_type":"c1","uid":1483495,"ip_address":"","ucode":"1BF7870B32AB15","user_header":"","comment_is_top":false,"comment_ctime":1555858097,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555858097","product_id":100024701,"comment_content":"看完一遍，相对而言，应用层面的编程简单了好多，直接调用现成的API；虽然看着懵逼，但是感觉打开了一扇神奇的大门。","like_count":0},{"had_liked":false,"id":88078,"user_name":"小辉辉","can_delete":false,"product_type":"c1","uid":1189661,"ip_address":"","ucode":"9FF25E25C85350","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/1d/1cb36854.jpg","comment_is_top":false,"comment_ctime":1555840175,"is_pvip":false,"replies":[{"id":"32060","content":"第一遍很不错，加油","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1556198113,"ip_address":"","comment_id":88078,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555840175","product_id":100024701,"comment_content":"先留个印，反正我听第一遍只能把握一个大概，源码是看懵了","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447716,"discussion_content":"第一遍很不错，加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556198113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88060,"user_name":"dahey","can_delete":false,"product_type":"c1","uid":1033381,"ip_address":"","ucode":"B2657BB10ABAE4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/a5/716951be.jpg","comment_is_top":false,"comment_ctime":1555831755,"is_pvip":false,"replies":[{"id":"32061","content":"谢谢","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1556198124,"ip_address":"","comment_id":88060,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555831755","product_id":100024701,"comment_content":"本来看代码看得有些懵，但是看到老师画的图把流程串起来了就都理解了😄觉得老师讲得非常好，虽然我对C语言跟汇编都不是非常熟悉，但是还是比较喜欢这种结合代码讲的方式，之前看现代操作系统这种只讲理论的书都只能理解大概，老师结合代码跟图讲更加直观～","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447704,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556198124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87044,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1555502845,"is_pvip":false,"replies":[{"id":"49616","content":"还好啦，加油","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567693025,"ip_address":"","comment_id":87044,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1555502845","product_id":100024701,"comment_content":"烧脑","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447292,"discussion_content":"还好啦，加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567693025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336475,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","nickname":"J.Smile","note":"","ucode":"C4D98DFDBF7584","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292451,"discussion_content":"你就是华仔","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595229569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86681,"user_name":"honnkyou","can_delete":false,"product_type":"c1","uid":1026608,"ip_address":"","ucode":"FD5EC4120EE803","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/30/acc91f01.jpg","comment_is_top":false,"comment_ctime":1555424761,"is_pvip":false,"replies":[{"id":"49631","content":"后面有","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567694805,"ip_address":"","comment_id":86681,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555424761","product_id":100024701,"comment_content":"老师能把整个open的调用过程先串一下吗？现在的形式，跟不上老师要传授的意图。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447118,"discussion_content":"后面有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567694805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86666,"user_name":"honnkyou","can_delete":false,"product_type":"c1","uid":1026608,"ip_address":"","ucode":"FD5EC4120EE803","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/30/acc91f01.jpg","comment_is_top":false,"comment_ctime":1555421650,"is_pvip":false,"replies":[{"id":"49632","content":"宏是直接替代的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567694928,"ip_address":"","comment_id":86666,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555421650","product_id":100024701,"comment_content":"&quot;glibc 还有一个文件 syscall-template.S，使用上面这个宏，定义了这个系统调用的调用方式。&quot;<br>这个地方是怎么跳到下面的，老师能串一下吗？<br>","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447113,"discussion_content":"宏是直接替代的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567694928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86615,"user_name":"Geek_younger","can_delete":false,"product_type":"c1","uid":1500804,"ip_address":"","ucode":"A4A32334DC05A7","user_header":"","comment_is_top":false,"comment_ctime":1555412326,"is_pvip":false,"replies":[{"id":"49634","content":"三年c，已经很牛啦","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567694965,"ip_address":"","comment_id":86615,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555412326","product_id":100024701,"comment_content":"鲁过三年嵌入式c，菜得一逼，能看懂一点点，太底层了，是我太菜","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447094,"discussion_content":"三年c，已经很牛啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567694965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86602,"user_name":"tux","can_delete":false,"product_type":"c1","uid":1477811,"ip_address":"","ucode":"BB7202009FC885","user_header":"https://static001.geekbang.org/account/avatar/00/16/8c/b3/a74a7125.jpg","comment_is_top":false,"comment_ctime":1555408084,"is_pvip":false,"replies":[{"id":"31276","content":"4.13","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1555493897,"ip_address":"","comment_id":86602,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555408084","product_id":100024701,"comment_content":"也许linux-4.11.1，较接近文中所用的内核版本吧","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447090,"discussion_content":"4.13","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555493897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86576,"user_name":"落石","can_delete":false,"product_type":"c1","uid":1184061,"ip_address":"","ucode":"11F60E700E96B6","user_header":"https://static001.geekbang.org/account/avatar/00/12/11/3d/7b9161ca.jpg","comment_is_top":false,"comment_ctime":1555402156,"is_pvip":false,"replies":[{"id":"49637","content":"https:&#47;&#47;elixir.bootlin.com&#47;linux&#47;v4.13.16看这里，已经链接好了相互代码关系","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567695232,"ip_address":"","comment_id":86576,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1555402156","product_id":100024701,"comment_content":"老师，可以先简单介绍一下环境搭建的前置知识么？我现在已经下好了源码，找到了 fs&#47;open.c 与 fcntl.h中的open定义，但是没办法把两个东西串联起来。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447078,"discussion_content":"https://elixir.bootlin.com/linux/v4.13.16看这里，已经链接好了相互代码关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567695232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066409,"avatar":"https://static001.geekbang.org/account/avatar/00/10/45/a9/3d48d6a2.jpg","nickname":"Lorry","note":"","ucode":"BD4754D0F1D786","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383979,"discussion_content":"https://elixir.bootlin.com/linux/v4.13.16/source\n后面要添加一个source，否则访问不到哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626327231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86542,"user_name":"tiankonghewo","can_delete":false,"product_type":"c1","uid":1476427,"ip_address":"","ucode":"7A55A9C17DD9DF","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/4b/16ea3997.jpg","comment_is_top":false,"comment_ctime":1555394520,"is_pvip":false,"replies":[{"id":"49641","content":"一点点进步，加油","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567695573,"ip_address":"","comment_id":86542,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555394520","product_id":100024701,"comment_content":"有一个宏观的了解，进步了一点点，细节不行，看不懂","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447062,"discussion_content":"一点点进步，加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567695573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86369,"user_name":"ninuxer","can_delete":false,"product_type":"c1","uid":1243135,"ip_address":"","ucode":"5394ADAF2667D6","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKQMM4m7NHuicr55aRiblTSEWIYe0QqbpyHweaoAbG7j2v7UUElqqeP3Ihrm3UfDPDRb1Hv8LvPwXqA/132","comment_is_top":false,"comment_ctime":1555373767,"is_pvip":false,"replies":[{"id":"49647","content":"可以学一学c","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567695666,"ip_address":"","comment_id":86369,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555373767","product_id":100024701,"comment_content":"打卡day10<br>我是谁？我在哪里？一脸懵逼～看来要撸过c才能消化","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446991,"discussion_content":"可以学一学c","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567695666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86323,"user_name":"明月","can_delete":false,"product_type":"c1","uid":1476588,"ip_address":"","ucode":"D3C649B954A519","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJayib1ZcRfOaoLsdsWZokiaO5tLAdC4uNAicQJRIVXrz9fIchib7QwXibnRrsJaoh5TUlia7faUf36g8Bw/132","comment_is_top":false,"comment_ctime":1555349949,"is_pvip":false,"replies":[{"id":"49648","content":"4.13","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567695672,"ip_address":"","comment_id":86323,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555349949","product_id":100024701,"comment_content":"老师的基于的内核是哪个版本","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446969,"discussion_content":"4.13","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567695672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86277,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1555336999,"is_pvip":false,"replies":[{"id":"49650","content":"发行版不同，内核一样，系统调用一样","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567695725,"ip_address":"","comment_id":86277,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555336999","product_id":100024701,"comment_content":"有一个问题一直不很清楚，想请教老师一下。<br><br>就是在docker中，不同容器是共享宿主内核的。但一个docker的宿主，却能运行多个发行版的容器。那容器运行时，内核到发行版之间的功能调用，也是通过cglib的syscalls.list来实现的吗？<br><br>或者换句话说，cglib其实是屏蔽了不同内核版本的差异吗？<br><br>感谢！","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446955,"discussion_content":"发行版不同，内核一样，系统调用一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567695725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86255,"user_name":"tux","can_delete":false,"product_type":"c1","uid":1477811,"ip_address":"","ucode":"BB7202009FC885","user_header":"https://static001.geekbang.org/account/avatar/00/16/8c/b3/a74a7125.jpg","comment_is_top":false,"comment_ctime":1555331853,"is_pvip":false,"replies":[{"id":"49654","content":"赞，https:&#47;&#47;elixir.bootlin.com&#47;linux&#47;v4.13.16","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567695979,"ip_address":"","comment_id":86255,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555331853","product_id":100024701,"comment_content":"对文中内核源码好奇，便先在Ubuntu Server (现成的)和CentOS(yum的)查看。文中内核文件路径，有的在Ubuntu有，有的在CentOS有。<br>至少看到一点文中的内核源码。<br>下班后，就编译安装4.X的内核源码。安装过程，略长。源码，还没看","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446939,"discussion_content":"赞，https://elixir.bootlin.com/linux/v4.13.16","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567695979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86232,"user_name":"小颜","can_delete":false,"product_type":"c1","uid":1078980,"ip_address":"","ucode":"4DAA36C2916E25","user_header":"","comment_is_top":false,"comment_ctime":1555328849,"is_pvip":false,"replies":[{"id":"49655","content":"可以grep一下看看","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696038,"ip_address":"","comment_id":86232,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555328849","product_id":100024701,"comment_content":"请问老师这个open函数是glibc源码哪个路径下面呀","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446927,"discussion_content":"可以grep一下看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86227,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1555328275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555328275","product_id":100024701,"comment_content":"1、头文件和实现文件<br>2、在系统调用表里面注册（在系统调用表里面增加一行？），这样发起调用的时候，才能找到你的代码。<br>3、再写一个库函数，间接调用系统调用。","like_count":0},{"had_liked":false,"id":86190,"user_name":"zKerry","can_delete":false,"product_type":"c1","uid":1497740,"ip_address":"","ucode":"9FB006D1A38D3F","user_header":"","comment_is_top":false,"comment_ctime":1555321146,"is_pvip":false,"replies":[{"id":"49660","content":"是的，统一定义","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696177,"ip_address":"","comment_id":86190,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555321146","product_id":100024701,"comment_content":"系统调用为什么要用syscall_define这样的宏定义，封装？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446911,"discussion_content":"是的，统一定义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86155,"user_name":"🗿顾晓峰🈹🈳🈴🈷🎏","can_delete":false,"product_type":"c1","uid":1109785,"ip_address":"","ucode":"F3447F81832780","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/19/ba159b8c.jpg","comment_is_top":false,"comment_ctime":1555316047,"is_pvip":false,"replies":[{"id":"49664","content":"自己读的","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696235,"ip_address":"","comment_id":86155,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555316047","product_id":100024701,"comment_content":"不知道这是老师自己读的还是有专门的讲解员，如果没有基础的人读别人的文稿，真是挺佩服他的。<br>反正我是听晕了。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446900,"discussion_content":"自己读的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86115,"user_name":"江南皮革厂研发中心保安队长","can_delete":false,"product_type":"c1","uid":1099584,"ip_address":"","ucode":"231419643A5CC5","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/40/66a203cd.jpg","comment_is_top":false,"comment_ctime":1555311405,"is_pvip":false,"replies":[{"id":"49668","content":"过一遍c吧","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696416,"ip_address":"","comment_id":86115,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555311405","product_id":100024701,"comment_content":"老师，请问后面的内容也会多数围绕着C的源码展开讲吗？如果是的话，我就放一放先把C过一遍了","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446892,"discussion_content":"过一遍c吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86094,"user_name":"Hpbbs","can_delete":false,"product_type":"c1","uid":1484103,"ip_address":"","ucode":"70FAEEF3D624F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/47/850fa048.jpg","comment_is_top":false,"comment_ctime":1555310354,"is_pvip":false,"replies":[{"id":"49670","content":"不必纠结代码，重点理解过程","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696475,"ip_address":"","comment_id":86094,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555310354","product_id":100024701,"comment_content":"2⃣️ 不好意思 点错了 接上一条留言。<br>一图胜千言 ，老师在 处理图时 可以把 每个流程步骤 操所在的文件也标注在图上 吗？<br>这样过系统源码 脑中的结构层次 会清晰利于理解 ","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446890,"discussion_content":"不必纠结代码，重点理解过程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696475,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":86091,"user_name":"Hpbbs","can_delete":false,"product_type":"c1","uid":1484103,"ip_address":"","ucode":"70FAEEF3D624F0","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/47/850fa048.jpg","comment_is_top":false,"comment_ctime":1555310120,"is_pvip":false,"replies":[{"id":"49671","content":"没有切换进程，切换用户态到内核态","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696526,"ip_address":"","comment_id":86091,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1555310120","product_id":100024701,"comment_content":"有如下几个思考问题<br>1⃣️在这个调用流程层次图里，进程这个抽象结构体现在这个层次图的哪些部分<br>猜想 保存现场就是调用切换进程了 <br>那么invoke一个 open 就要切换一次进程嘛 消耗会不会太大<br>2⃣️","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446889,"discussion_content":"没有切换进程，切换用户态到内核态","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1015918,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/80/6e/7f78292e.jpg","nickname":"无","note":"","ucode":"CF9F79815606F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":534258,"discussion_content":"没切换进程的话,那每个进程的内存区域里面都包含了用户态和内核态的内容咯?如果这样的话,为啥要在用户态到内核态的时候还要保持各种寄存器状态? 因为它们的内容在进程内存里的两个很不连续的地方?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638151403,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":446889,"ip_address":""},"score":534258,"extra":""}]}]},{"had_liked":false,"id":85934,"user_name":"MARK","can_delete":false,"product_type":"c1","uid":1126900,"ip_address":"","ucode":"9F429C9C5FEE6A","user_header":"https://static001.geekbang.org/account/avatar/00/11/31/f4/467cf5d7.jpg","comment_is_top":false,"comment_ctime":1555296002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555296002","product_id":100024701,"comment_content":"满脸懵逼，且得倒带多看几遍的─━ _ ─━✧","like_count":0},{"had_liked":false,"id":85890,"user_name":"共和国长子","can_delete":false,"product_type":"c1","uid":1130791,"ip_address":"","ucode":"C2F8F66FB23D3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/41/27/528144cc.jpg","comment_is_top":false,"comment_ctime":1555288715,"is_pvip":false,"replies":[{"id":"49677","content":"重点关注过程","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696702,"ip_address":"","comment_id":85890,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555288715","product_id":100024701,"comment_content":"看着这一堆代码，一脸懵逼","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446853,"discussion_content":"重点关注过程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696702,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85889,"user_name":"Hurt","can_delete":false,"product_type":"c1","uid":1050946,"ip_address":"","ucode":"DCE7428CCF08EF","user_header":"https://static001.geekbang.org/account/avatar/00/10/09/42/1f762b72.jpg","comment_is_top":false,"comment_ctime":1555288660,"is_pvip":false,"replies":[{"id":"49678","content":"重点关注过程","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567696731,"ip_address":"","comment_id":85889,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555288660","product_id":100024701,"comment_content":"汇编语言 看不懂啊 老师😂","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446852,"discussion_content":"重点关注过程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567696731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}