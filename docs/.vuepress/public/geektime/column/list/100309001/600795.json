{"id":600795,"title":"07｜强一致锁：如何解决高并发下的库存争抢问题？","content":"<p>你好，我是徐长龙。</p><p>这节课我会给你详细讲一讲高并发下的库存争抢案例，我相信很多人都看到过相关资料，但是在实践过程中，仍然会碰到具体的实现无法满足需求的情况，比如说有的实现无法秒杀多个库存，有的实现新增库存操作缓慢，有的实现库存耗尽时会变慢等等。</p><p>这是因为对于不同的需求，库存争抢的具体实现是不一样的，我们需要详细深挖，理解各个锁的特性和适用场景，才能针对不同的业务需要做出灵活调整。</p><p>由于秒杀场景是库存争抢非常经典的一个应用场景，接下来我会结合秒杀需求，带你看看如何实现高并发下的库存争抢，相信在这一过程中你会对锁有更深入的认识。</p><h3>锁争抢的错误做法</h3><p>在开始介绍库存争抢的具体方案之前，我们先来了解一个小知识——并发库存锁。还记得在我学计算机的时候，老师曾演示过一段代码：</p><pre><code class=\"language-c++\">public class ThreadCounter {\n&nbsp; &nbsp; private static int count = 0;\n&nbsp;\n&nbsp; &nbsp; public static void main(String[] args) throws Exception {\n&nbsp; &nbsp; &nbsp; &nbsp; Runnable task = new Runnable() {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; public void run() {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; for (int i = 0; i &lt; 1000; ++i) {\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; count += 1;\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }\n&nbsp; &nbsp; &nbsp; &nbsp; };\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; Thread t1 = new Thread(task);\n        t1.start();\n&nbsp; &nbsp; &nbsp; &nbsp; \n        Thread t2 = new Thread(task);\n&nbsp; &nbsp; &nbsp; &nbsp; t2.start();\n&nbsp;\n&nbsp; &nbsp; &nbsp; &nbsp; t1.join();\n&nbsp; &nbsp; &nbsp; &nbsp; t2.join();\n&nbsp;\n        cout &lt;&lt; \"count = \" &lt;&lt; count &lt;&lt; endl;\n&nbsp; &nbsp; }\n}\n</code></pre><!-- [[[read_end]]] --><p>从代码来看，我们运行后结果预期是2000，但是实际运行后并不是。为什么会这样呢？</p><p>当多线程并行对同一个公共变量读写时，由于没有互斥，多线程的set会相互覆盖或读取时容易读到其他线程刚写一半的数据，这就导致变量数据被损坏。反过来说，我们要想保证一个变量在多线程并发情况下的准确性，就需要这个变量在修改期间不会被其他线程更改或读取。</p><p>对于这个情况，我们一般都会用到锁或原子操作来保护库存变量：</p><ul>\n<li>如果是简单int类型数据，可以使用原子操作保证数据准确；</li>\n<li>如果是复杂的数据结构或多步操作，可以加锁来保证数据完整性。</li>\n</ul><p>这里我附上<a href=\"https://zhuanlan.zhihu.com/p/38664758\">关于几种锁的参考资料</a>，如果你感兴趣可以深入了解一下。</p><p>考虑到我们之前的习惯会有一定惯性，为了让你更好地理解争抢，这里我再举一个我们常会犯错的例子。因为扣库存的操作需要注意原子性，我们实践的时候常常碰到后面这种方式：</p><pre><code class=\"language-bash\">redis&gt; get prod_1475_stock_1\n15\nredis&gt; set prod_1475_stock_1 14\nOK\n</code></pre><p>也就是先将变量从缓存中取出，对其做-1操作，再放回到缓存当中，<strong>这是个错误做法。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/65/d1/65844557217e2e5f8d8ce606eea67dd1.jpg?wh=1920x1234\" alt=\"图片\"></p><p>如上图，原因是多个线程一起读取的时候，多个线程同时读到的是5，set回去时都是6，实际每个线程都拿到了库存，但是库存的实际数值并没有累计改变，这会导致库存超卖。如果你需要用这种方式去做，一般建议加一个自旋互斥锁，互斥其他线程做类似的操作。</p><p>不过锁操作是很影响性能的，在讲锁方式之前，我先给你介绍几个相对轻量的方式。</p><h3>原子操作</h3><p>在高并发修改的场景下，用互斥锁保证变量不被错误覆盖性能很差。让一万个用户抢锁，排队修改一台服务器的某个进程保存的变量，这是个很糟糕的设计。</p><p>因为锁在获取期间需要自旋循环等待，这需要不断地循环尝试多次才能抢到。而且参与争抢的线程越多，这种情况就越糟糕，这期间的通讯过程和循环等待很容易因为资源消耗造成系统不稳定。</p><p>对此，我会把库存放在一个独立的且性能很好的内存缓存服务Redis中集中管理，这样可以减少用户争抢库存导致其他服务的抖动，并且拥有更好的响应速度，这也是目前互联网行业保护库存量的普遍做法。</p><p>同时，我不建议通过数据库的行锁来保证库存的修改，因为数据库资源很珍贵，使用数据库行锁去管理库存，性能会很差且不稳定。</p><p>前面我们提到当有大量用户去并行修改一个变量时，只有用锁才能保证修改的正确性，但锁争抢性能很差，那怎么降低锁的粒度、减少锁的争枪呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/ce/d5880e0908129591e4d29f7eeeacf3ce.jpg?wh=1920x1040\" alt=\"图片\"></p><p>如上图，其实我们可以将一个热门商品的库存做拆分，放在多个key中去保存，这样可以大幅度减少锁争抢。</p><p>举个例子，当前商品库存有100个，我们可以把它放在10个key中用不同的Redis实例保存，每个key里面保存10个商品库存，当用户下单的时候可以随机找一个key进行扣库存操作。如果没库存，就记录好当前key再随机找剩下的9个key，直到成功扣除1个库存。</p><p>除了这种方法以外，我个人更推荐的做法是使用Redis的原子操作，因为原子操作的粒度更小，并且是高性能单线程实现，可以做到全局唯一决策。而且很多原子操作的底层实现都是通过硬件实现的，性能很好，比如文稿后面这个例子：</p><pre><code class=\"language-bash\">redis&gt; decr prod_1475_stock_1\n14\n</code></pre><p>incr、decr这类操作就是原子的，我们可以根据返回值是否大于0来判断是否扣库存成功。但是这里你要注意，如果当前值已经为负数，我们需要考虑一下是否将之前扣除的补偿回来。并且为了减少修改操作，我们可以在扣减之前做一次值检测，整体操作如下：</p><pre><code class=\"language-bash\">//读取当前库存，确认是否大于零\n//如大于零则继续操作，小于等于拒绝后续\nredis&gt; get prod_1475_stock_1\n1\n&nbsp;\n//开始扣减库存、如返回值大于或等于0那么代表扣减成功，小于0代表当前已经没有库存\n//可以看到返回-2，这可以理解成同时两个线程都在操作扣库存，并且都没拿到库存\nredis&gt; decr prod_1475_stock_1\n-2\n&nbsp;\n//扣减失败、补偿多扣的库存\n//这里返回0是因为同时两个线程都在做补偿，最终恢复0库存\nredis&gt; incr prod_1475_stock\n0\n</code></pre><p>这看起来是个不错的保护库存量方案，不过它也有缺点，相信你已经猜到了，这个库存的数值准确性取决于我们的业务是否能够返还恢复之前扣除的值。如果在服务运行过程中，“返还”这个操作被打断，人工修复会很难，因为你不知道当前有多少库存还在路上狂奔，只能等活动结束后所有过程都落地，再来看剩余库存量。</p><p>而要想完全保证<strong>库存不会丢失</strong>，我们习惯性通过事务和回滚来保障。但是外置的库存服务Redis不属于数据库的缓存范围，这一切需要通过人工代码去保障，这就要求我们在处理业务的每一处故障时都能处理好库存问题。</p><p>所以，很多常见秒杀系统的库存在<strong>出现故障时是不返还的</strong>，并不是不想返还，而是很多意外场景做不到。</p><p>提到锁，也许你会想到使用Setnx指令或数据库CAS的方式实现互斥排他锁，以此来解决库存问题。但是这个锁有自旋阻塞等待，并发高的时候用户服务需要循环多次做尝试才能够获取成功，这样很浪费系统资源，对数据服务压力较大，不推荐这样去做（<a href=\"https://demin.ws/blog/english/2012/05/05/atomic-spinlock-mutex/\">这里附上锁性能对比参考</a>）。</p><h3>令牌库存</h3><p>除了这种用数值记录库存的方式外，还有一种比较科学的方式就是“发令牌”方式，通过这个方式可以避免出现之前因为抢库存而让库存出现负数的情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/6e/85/6e411c3a78f8caae8670b10edf9aa185.jpg?wh=1920x592\" alt=\"图片\"></p><p>具体是使用Redis中的list保存多张令牌来代表库存，一张令牌就是一个库存，用户抢库存时拿到令牌的用户可以继续支付：</p><pre><code class=\"language-bash\">//放入三个库存\nredis&gt; lpush prod_1475_stock_queue_1 stock_1\nredis&gt; lpush prod_1475_stock_queue_1 stock_2\nredis&gt; lpush prod_1475_stock_queue_1 stock_3\n\n//取出一个，超过0.5秒没有返回，那么抢库存失败\nredis&gt; brpop prod_1475_stock_queue_1 0.5\n</code></pre><p>在没有库存后，用户只会拿到nil。当然这个实现方式只是解决抢库存失败后不用再补偿库存的问题，在我们对业务代码异常处理不完善时仍会出现丢库存情况。</p><p>同时，我们要注意brpop可以从list队列“右侧”中拿出一个令牌，如果不需要阻塞等待的话，使用rpop压测性能会更好一些。</p><p>不过，当我们的库存成千上万的时候，可能不太适合使用令牌方式去做，因为我们需要往list中推送1万个令牌才能正常工作来表示库存。如果有10万个库存就需要连续插入10万个字符串到list当中，入库期间会让Redis出现大量卡顿。</p><p>到这里，关于库存的设计看起来已经很完美了，不过请你想一想，如果产品侧提出“一个商品可以抢多个库存”这样的要求，也就是一次秒杀多个同种商品（比如一次秒杀两袋大米），我们利用多个锁降低锁争抢的方案还能满足吗？</p><h3>多库存秒杀</h3><p>其实这种情况经常出现，这让我们对之前的优化有了更多的想法。对于一次秒杀多个库存，我们的设计需要做一些调整。</p><p><img src=\"https://static001.geekbang.org/resource/image/73/b5/73e5312737d1164418f1d158b0fddbb5.jpg?wh=1920x1234\" alt=\"图片\"></p><p>之前我们为了减少锁冲突把库存拆成10个key随机获取，我们设想一下，当库存剩余最后几个商品时，极端情况下要想秒杀三件商品（如上图），我们需要尝试所有的库存key，然后在尝试10个key后最终只拿到了两个商品库存，那么这时候我们是拒绝用户下单，还是返还库存呢？</p><p>这其实就要看产品的设计了，同时我们也需要加一个检测：如果商品卖完了就不要再尝试拿10个库存key了，毕竟没库存后一次请求刷10次Redis，对Redis的服务压力很大（Redis O(1)指令性能理论可以达到10w OPS，一次请求刷10次，那么理想情况下抢库存接口性能为1W QPS，压测后建议按实测性能70%漏斗式限流）。</p><p>这时候你应该发现了，在“一个商品可以抢多个库存”这个场景下，拆分并没有减少锁争抢次数，同时还加大了维护难度。当库存越来越少的时候，抢购越往后性能表现越差，这个设计已经不符合我们设计的初衷（由业务需求造成我们底层设计不合适的情况经常会碰到，这需要我们在设计之初，多挖一挖产品具体的需求）。</p><p>那该怎么办呢？我们不妨将10个key合并成1个，改用rpop实现多个库存扣减，但库存不够三个只有两个的情况，仍需要让产品给个建议看看是否继续交易，同时在开始的时候用LLEN（O(1)）指令检查一下我们的List里面是否有足够的库存供我们rpop，以下是这次讨论的最终设计：</p><pre><code class=\"language-bash\">//取之前看一眼库存是否空了，空了不继续了(llen O(1))\nredis&gt; llen prod_1475_stock_queue\n3\n\n//取出库存3个，实际抢到俩\nredis&gt; rpop prod_1475_stock_queue 3\n\"stock_1\"\n\"stock_2\"\n\n//产品说数量不够，不允许继续交易，将库存返还\nredis&gt; lpush prod_1475_stock_queue stock_1\nredis&gt; lpush prod_1475_stock_queue stock_2\n\n</code></pre><p>通过这个设计，我们已经大大降低了下单系统锁争抢压力。要知道，Redis是一个性能很好的缓存服务，其O(1)类复杂度的指令在使用长链接的情况下多线程压测，5.0 版本的Redis就能够跑到10w OPS，而6.0版本的网络性能会更好。</p><p>这种利用Redis原子操作减少锁冲突的方式，对各个语言来说是通用且简单的。不过你要注意，不要把Redis服务和复杂业务逻辑混用，否则会影响我们的库存接口效率。</p><h3>自旋互斥超时锁</h3><p>如果我们在库存争抢时需要操作<strong>多个决策key才能够完成争抢</strong>，那么原子这种方式是不适合的。因为原子操作的粒度过小，无法做到事务性地维持多个数据的ACID。</p><p>这种多步操作，适合用自旋互斥锁的方式去实现，但流量大的时候不推荐这个方式，因为它的核心在于如果我们要保证用户的体验，我们需要逻辑代码多次循环抢锁，直到拿到锁为止，如下：</p><pre><code class=\"language-bash\">//业务逻辑需要循环抢锁，如循环10次，每次sleep 10ms，10次失败后返回失败给用户\n//获取锁后设置超时时间，防止进程崩溃后没有释放锁导致问题\n//如果获取锁失败会返回nil\nredis&gt; set prod_1475_stock_lock EX 60 NX\nOK\n\n//抢锁成功，扣减库存\nredis&gt; rpop prod_1475_stock_queue 1\n\"stock_1\"\n\n//扣减数字库存，用于展示\nredis&gt; decr prod_1475_stock_1\n3\n\n// 释放锁\nredis&gt; del prod_1475_stock_lock\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/d8/e8/d83a93c919a5e7477555f113305994e8.jpg?wh=1920x896\" alt=\"图片\" title=\"两个线程在等待锁\"></p><p>这种方式的缺点在于，在抢锁阶段如果排队抢的线程越多，等待时间就越长，并且由于多线程一起循环check的缘故，在高并发期间Redis的压力会非常大，如果有100人下单，那么有100个线程每隔10ms就会check一次，此时Redis的操作次数就是：</p><p>$$100线程\\times（1000ms\\div10ms）次 = 10000 ops$$</p><h3>CAS乐观锁：锁操作后置</h3><p>除此之外我再推荐一个实现方式：CAS乐观锁。<strong>相对于自旋互斥锁来说，它在并发争抢库存线程少的时候效率会更好。</strong>通常，我们用锁的实现方式是先抢锁，然后，再对数据进行操作。这个方式需要先抢到锁才能继续，而抢锁是有性能损耗的，即使没有其他线程抢锁，这个消耗仍旧存在。</p><p>CAS乐观锁的核心实现为：记录或监控当前库存信息或版本号，对数据进行预操作。</p><p><img src=\"https://static001.geekbang.org/resource/image/42/77/42548b2b809307824e8eb02b9cc37a77.jpg?wh=1920x1234\" alt=\"图片\"></p><p>如上图，在操作期间如果发现监控的数值有变化，那么就回滚之前操作；如果期间没有变化，就提交事务的完成操作，操作期间的所有动作都是事务的。</p><pre><code class=\"language-bash\">//开启事务\nredis&gt; multi\nOK\n\n// watch 修改值\n// 在exec期间如果出现其他线程修改，那么会自动失败回滚执行discard\nredis&gt; watch prod_1475_stock_queue prod_1475_stock_1\n\n//事务内对数据进行操作\nredis&gt; rpop prod_1475_stock_queue 1\nQUEUED\n\n//操作步骤2\nredis&gt; decr prod_1475_stock_1\nQUEUED\n\n//执行之前所有操作步骤\n//multi 期间 watch有数值有变化则会回滚\nredis&gt; exec\n3\n</code></pre><p>可以看到，通过这个方式我们可以批量地快速实现库存扣减，并且能大幅减少锁争抢时间。它的好处我们刚才说过，就是争抢线程少时效率特别好，但争抢线程多时会需要大量重试，不过即便如此，CAS乐观锁也会比用自旋锁实现的性能要好。</p><p>当采用这个方式的时候，我建议内部的操作步骤尽量少一些。同时要注意，<strong>如果Redis是Cluster模式，使用multi时必须在一个slot内才能保证原子性。</strong></p><h3>Redis Lua方式实现Redis锁</h3><p>与“事务+乐观锁”类似的实现方式还有一种，就是使用Redis的Lua脚本实现多步骤库存操作。因为<strong>Lua脚本内所有操作都是连续的</strong>，这个操作不会被其他操作打断，所以不存在锁争抢问题。</p><p>而且、可以根据不同的情况对Lua脚本做不同的操作，业务只需要执行指定的Lua脚本传递参数即可实现高性能扣减库存，这样可以大幅度减少业务多次请求等待的RTT。</p><p>为了方便演示怎么执行Lua脚本，我使用了PHP实现：</p><pre><code class=\"language-php\">&lt;?php\n$script = &lt;&lt;&lt;EOF\n// 获取当前库存个数\nlocal stock=tonumber(redis.call('GET',KEYS[1])); \n//没找到返回-1\nif stock==nil \nthen \n    return -1; \nend \n//找到了扣减库存个数\nlocal result=stock-ARGV[1]; \n//如扣减后少于指定个数，那么返回0\nif result&lt;0 \nthen \n    return 0; \nelse \n    //如果扣减后仍旧大于0，那么将结果放回Redis内，并返回1\n    redis.call('SET',KEYS[1],result); \n    return 1; \nend\nEOF;\n\n$redis = new \\Redis();\n$redis-&gt;connect('127.0.0.1', 6379);\n$result = $redis-&gt;eval($script, array(\"prod_stock\", 3), 1);\necho $result;\n</code></pre><p>通过这个方式，我们可以远程注入各种连贯带逻辑的操作，并且可以实现一些补库存的操作。</p><h3>总结</h3><p>这节课，我们针对库存锁争抢的问题，通过Redis的特性实现了六种方案，不过它们各有优缺点。</p><p><img src=\"https://static001.geekbang.org/resource/image/ff/67/ff8yyee21a25136d6f2754ee2167fe67.jpg?wh=3717x3074\" alt=\"\"><br>\n以上这些方法可以根据业务需要组合使用。</p><p>其实，我们用代码去实现锁定扣库存也能够实现库存争抢功能，比如本地CAS乐观锁方式，但是一般来说，我们自行实现的代码会和其他业务逻辑混在一起，会受到多方因素影响，业务代码会逐渐复杂，性能容易失控。而Redis是独立部署的，会比我们的业务代码拥有更好的系统资源去快速解决锁争抢问题。</p><p>你可能发现我们这节课讲的方案大多数只有一层“锁”，但很多业务场景实际存在多个锁的情况，并不是我不想介绍，而是十分不推荐，因为多层锁及锁重入等问题引入后会导致我们系统很难维护，一个小粒度的锁能解决我们大部分问题，何乐而不为呢？</p><h3>思考题</h3><p>1.请你思考一下，通过原子操作+拆开库存方式实现库存方案时，如何减少库存为0后接口缓慢的问题？</p><p>2.我们这节课的内容并不仅仅在讲库存，还包含了大量可实现的锁的使用方式，请你分享一些实践过程中常见但不容易被发现的精妙设计。</p><p>欢迎你在评论区与我交流讨论，我们下节课见！</p>","neighbors":{"left":{"article_title":"06｜领域拆分：如何合理地拆分系统？","id":599857},"right":{"article_title":"08｜系统隔离：如何应对高并发流量冲击？","id":601611}},"comments":[{"had_liked":false,"id":364492,"user_name":"Geek_8438e4","can_delete":false,"product_type":"c1","uid":2565436,"ip_address":"内蒙古","ucode":"055FDB9BF4D366","user_header":"","comment_is_top":false,"comment_ctime":1671017278,"is_pvip":false,"replies":[{"id":132489,"content":"你好，目前为止我了解到的情况是，首先数据层有故障基本都是有损的，只是数据多少的问题。如线上数据层出现故障很多基础服务是不会马上就切换的，因为redis以及类似的数据服务都会有个探测过程，以防止只是一时业务查询导致的卡顿导致误判，像redis使用keepalive或哨兵时，也是通过多次ping检测来判断服务是否真正失联，多次延迟确认后才会切换主从，但是这样过程探测过程会过去五分钟以上，所以这个问题严谨一些的说他想问你能做哪些措施预防服务损坏，而不是让我们去讲完美无缺的提供服务强一致，秒杀肯定是要保证库存不要出错的，所以故障了多副本保证切换后数据十分精准的要求是无法满足的，行业出现这个情况是立即停止秒杀活动或者 降级服务 然后将请求放入队列后做相应补救。另外redis mysql等如果对一致性要求高的话，需要做的代价就特别大，每次切换主后从库都是需要同步主库所有数据进度，想要做好这里需要有性能很好的两个从库一起同步数据。所以做好前期流量预测，做好压测，预备措施可以准备一些但是多少都会丢一点","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1671078474,"ip_address":"内蒙古","comment_id":364492,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"面试原题，请指教:既然你们减库存用了redis，那如果redis挂了怎么办","like_count":14,"discussions":[{"author":{"id":1015938,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/80/82/3c21b30c.jpg","nickname":"梅子黄时雨","note":"","ucode":"9F788D09C2E9E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598668,"discussion_content":"其实这是个陷阱，因为当我们回答给redis上高可用方案后，面试的人紧接着就会问我们，那节点宕机时，恰巧库存没有同步到副本中，这个时候库存就会有超卖的可能，那这种情况怎么解决呢？这时我们就绞尽脑汁去想对应的解决方案，这就陷入怪圈了，因为这本质是个CAP问题，要么保证数据一致性，要么保证可用性，那在这个秒杀场景中，自然是保证库存的一致性是关键问题。1. 放弃高可用方案；2. 路由到的某台redis故障的话，要么直接返回，“活动太火爆了，请重新抢购”，或者迁移到其他的redis上进行抢购，具体的可以商量下。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1672985028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1015938,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/80/82/3c21b30c.jpg","nickname":"梅子黄时雨","note":"","ucode":"9F788D09C2E9E7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599531,"discussion_content":"是的，这要看取舍了～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673576884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":598668,"ip_address":"北京","group_id":0},"score":599531,"extra":""}]},{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596546,"discussion_content":"你好，目前为止我了解到的情况是，首先数据层有故障基本都是有损的，只是数据多少的问题。如线上数据层出现故障很多基础服务是不会马上就切换的，因为redis以及类似的数据服务都会有个探测过程，以防止只是一时业务查询导致的卡顿导致误判，像redis使用keepalive或哨兵时，也是通过多次ping检测来判断服务是否真正失联，多次延迟确认后才会切换主从，但是这样过程探测过程会过去五分钟以上，所以这个问题严谨一些的说他想问你能做哪些措施预防服务损坏，而不是让我们去讲完美无缺的提供服务强一致，秒杀肯定是要保证库存不要出错的，所以故障了多副本保证切换后数据十分精准的要求是无法满足的，行业出现这个情况是立即停止秒杀活动或者 降级服务 然后将请求放入队列后做相应补救。另外redis mysql等如果对一致性要求高的话，需要做的代价就特别大，每次切换主后从库都是需要同步主库所有数据进度，想要做好这里需要有性能很好的两个从库一起同步数据。所以做好前期流量预测，做好压测，预备措施可以准备一些但是多少都会丢一点","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1671078474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"内蒙古","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1665471,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/bf/58f70a2a.jpg","nickname":"程序员花卷","note":"","ucode":"DDCFE578C6C428","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632547,"discussion_content":"面试官问你这个问题，第一肯定是需要你回答如何做redis的高可靠，比如主从，哨兵等，你们是如何搭建一个这样一个高可靠的架构的。当你回答了高可靠的搭建过程以及原理之后，面试官第二个想知道的问题就是当主节点挂了，哨兵经过一系列的投票选举出新的主节点后，假设在主节点挂之前，最新库存还没有同步到目前成为新主节点的从节点里面，就有可能出现超卖，这种情况怎么办，这种情况发生的概率极低，我觉得可以在代码层面也做一下控制，比如扣减redis中的库存成功之后，扣减数据库里面的库存，在扣减数据库库存时加个判断，当前扣减的库存数必须小于数据库里面的库存量，那么即使redis扣减成功了，数据库层面不会扣减成功，给用户返回抢购失败即可，但是这会有性能损耗。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700975461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"云南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066752,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","nickname":"piboye","note":"","ucode":"7CFD8712857A85","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604797,"discussion_content":"redis是不是可以超卖，只要放到数据库中流量小了就行，这样数据库保证不超买就行？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676433792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":363978,"user_name":"赵旭","can_delete":false,"product_type":"c1","uid":1132327,"ip_address":"内蒙古","ucode":"C08CE16441E116","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/27/bff28e1d.jpg","comment_is_top":false,"comment_ctime":1670408659,"is_pvip":false,"replies":[{"id":132388,"content":"你好，这确实是一个知识点","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1670667458,"ip_address":"内蒙古","comment_id":363978,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"问题1：秒杀秒杀肯定是很快就没库存了，只要分片够均匀，在一个分片查不到就返回‘没有库存’或者‘参与用户太多，稍后再试‘呗，如果是要持续几分钟的才能抢完的，这种级别的流量一般也不用分片","like_count":5,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596121,"discussion_content":"你好，这确实是一个知识点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670667458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"内蒙古","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361906,"user_name":"移横为固","can_delete":false,"product_type":"c1","uid":3214843,"ip_address":"北京","ucode":"ECA3065E8485B0","user_header":"https://static001.geekbang.org/account/avatar/00/31/0d/fb/a5fef3f7.jpg","comment_is_top":false,"comment_ctime":1667966150,"is_pvip":false,"replies":[{"id":131671,"content":"你好，移横为固，这样如何保证不超卖呢？","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668041578,"ip_address":"北京","comment_id":361906,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"问题1：库存拆开后，当某个库存key数量为0后，删除这个key，减少下次接口调用需要查询的key数量。\n在不考虑库存场景下，用锁的性能最高的就是不要有锁，如netty的reactive模型，把操作对象与线程进行绑定，避免争抢；还有ThreadLocal的线程副本。库存场景是对共享资源的操作，感觉只能用锁来同步","like_count":2,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593224,"discussion_content":"你好，移横为固，这样如何保证不超卖呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668041578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361798,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"北京","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1667876452,"is_pvip":false,"replies":[{"id":131617,"content":"你好，申傲，有任何疑问～多多交流！","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1667895108,"ip_address":"北京","comment_id":361798,"utype":1}],"discussion_count":1,"race_medal":2,"score":2,"product_id":100309001,"comment_content":"这节课对于复习 Redis 很有帮助~","like_count":2,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593035,"discussion_content":"你好，申傲，有任何疑问～多多交流！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667895108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365604,"user_name":"李喂马","can_delete":false,"product_type":"c1","uid":3237312,"ip_address":"北京","ucode":"3654B9299F5A4E","user_header":"https://static001.geekbang.org/account/avatar/00/31/65/c0/1e20ae2c.jpg","comment_is_top":false,"comment_ctime":1672820473,"is_pvip":false,"replies":[{"id":133174,"content":"你好，这里可以通过 js 对单次请求进行加密签名，并且保证每次秒杀接口入口流程和校验方式，每个活动都不同，这样能预防对方写一次脚本刷全站。\n\n同时，这样做之后，他的爬虫必须使用我们的脚本计算才能正确请求，提高爬虫的门槛，因为这样对方就需要可编程浏览器才能模拟用户来抢，这个代价就会大很多。\n\n另外要求必须真实绑定手机号用户才可以刷，限制单个用户指定时间内并发请求量，限制一个用户购买量，有未成交的不允许再下单，不用数字代表商品 id，让商品标识非数字连贯等多个组合。\n\n总结一下就是不断提高技术要求和门槛，来降低他们抢的性价比。","user_name":"作者回复","user_name_real":"作者","uid":1004527,"ctime":1672843935,"ip_address":"北京","comment_id":365604,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"请教个问题，全文讲的都是扣减库存的安全性和性能，但是秒杀系统经常会面临一些爬虫，在活动开始瞬间大量的爬虫请求导致库存被扣减完毕（这些些请求都的ip都是经过伪装的），导致真实用户无法购买到商品，面对这种情况老师有没有一些好的解决方案～","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598466,"discussion_content":"你好，这里可以通过 js 对单次请求进行加密签名，并且保证每次秒杀接口入口流程和校验方式，每个活动都不同，这样能预防对方写一次脚本刷全站。\n\n同时，这样做之后，他的爬虫必须使用我们的脚本计算才能正确请求，提高爬虫的门槛，因为这样对方就需要可编程浏览器才能模拟用户来抢，这个代价就会大很多。\n\n另外要求必须真实绑定手机号用户才可以刷，限制单个用户指定时间内并发请求量，限制一个用户购买量，有未成交的不允许再下单，不用数字代表商品 id，让商品标识非数字连贯等多个组合。\n\n总结一下就是不断提高技术要求和门槛，来降低他们抢的性价比。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672843935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1665471,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/bf/58f70a2a.jpg","nickname":"程序员花卷","note":"","ucode":"DDCFE578C6C428","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632548,"discussion_content":"你这个问题其实是秒杀场景的防刷，说白点就是如何防刷，防恶意流量\n1. 通过预约的功能进行流量的控制，没预约过的用户不让参与秒杀。\n2. 设置好每个用户每秒最多能请求的次数，超过则要求验证，验证可以是答题，滑滑块，发短信验证码等\n3.限制每个用户最多能购买几件商品\n4.限制地区，比如只有北京上海的用户才能参与秒杀\n方案有很多，根据实际情况选择","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1700975891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"云南","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2938336,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/d5/e0/addca785.jpg","nickname":"dk.wu","note":"","ucode":"E9091207B646DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606530,"discussion_content":"专业的抢购团队，往往不缺手机号用户。可能还需要有效识别该类爬虫账号，并进行限制的手段。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677205405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1251835,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oiboHpgukqib2ASXeU0H7W1ibgRMqyrNE5KaWicicPEDy0ia8YdoneZAtvW0EFIiaqZJp2OS4dnweOgXaJ5EjJicicEqic5A/132","nickname":"覃钰栋","note":"","ucode":"19080C463658EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2938336,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/d5/e0/addca785.jpg","nickname":"dk.wu","note":"","ucode":"E9091207B646DB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607581,"discussion_content":"增加答题功能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677985375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":606530,"ip_address":"广东","group_id":0},"score":607581,"extra":""}]}]},{"had_liked":false,"id":363325,"user_name":"dumpling","can_delete":false,"product_type":"c1","uid":1505273,"ip_address":"北京","ucode":"1DB7E878A2EA65","user_header":"https://static001.geekbang.org/account/avatar/00/16/f7/f9/4ce3b0fc.jpg","comment_is_top":false,"comment_ctime":1669539891,"is_pvip":false,"replies":[{"id":132084,"content":"你好，dumpling，这里有点理解错误，rpop不支持多元素取出，原文：“改用 rpop 实现多个库存扣减。”是说使用rpop指令是解决方案中的一环主要特指令牌方式的实现方式，后续说解决多个库存是和他平级的环节。","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1669541893,"ip_address":"北京","comment_id":363325,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"rpop 支持一次性移出多个元素吗？哪个版本支持的特性？","like_count":1,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594904,"discussion_content":"你好，dumpling，这里有点理解错误，rpop不支持多元素取出，原文：“改用 rpop 实现多个库存扣减。”是说使用rpop指令是解决方案中的一环主要特指令牌方式的实现方式，后续说解决多个库存是和他平级的环节。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669541894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1959822,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","nickname":"Spoon","note":"","ucode":"2FF9193AD482C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611310,"discussion_content":"redis 6.2.0支持多个元素pop了：https://redis.io/commands/rpop/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680018338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1959822,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","nickname":"Spoon","note":"","ucode":"2FF9193AD482C2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":613533,"discussion_content":"这个可以～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681380434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":611310,"ip_address":"北京","group_id":0},"score":613533,"extra":""}]}]},{"had_liked":false,"id":372154,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"浙江","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1680785881,"is_pvip":false,"replies":[{"id":135929,"content":"你好，如果是用incr这个方式，那么这里有个缺陷，服务端不知道这个key已经被删除了，他实际还是会decr一下这个操作～可能会出现负数","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1681123389,"ip_address":"北京","comment_id":372154,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"思考题：1.库存为了0接口缓慢，主要是因为需要遍历不同的key，可以把为0的key标记为删除，减少遍历次数；","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":613084,"discussion_content":"你好，如果是用incr这个方式，那么这里有个缺陷，服务端不知道这个key已经被删除了，他实际还是会decr一下这个操作～可能会出现负数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681123389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":371530,"user_name":"Spoon","can_delete":false,"product_type":"c1","uid":1959822,"ip_address":"浙江","ucode":"2FF9193AD482C2","user_header":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","comment_is_top":false,"comment_ctime":1680018736,"is_pvip":false,"replies":[{"id":135630,"content":"有一瞬间极端情况，这种情况平时没什么，高峰期极端情况会雪崩，锁冲突这个方式缺点是消费过慢，并发高的几秒可能需要三小时消费完所有队列堆积","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1680267737,"ip_address":"北京","comment_id":371530,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"1.拆分均匀地情况下，基本很快都被秒杀完，直接让用户重试就好\n2.消除锁冲突，改成MQ顺序队列方案，其实有很多系统在进DB前都采用排队方式减少冲突","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611725,"discussion_content":"有一瞬间极端情况，这种情况平时没什么，高峰期极端情况会雪崩，锁冲突这个方式缺点是消费过慢，并发高的几秒可能需要三小时消费完所有队列堆积","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680267737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":5,"child_discussions":[{"author":{"id":1959822,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","nickname":"Spoon","note":"","ucode":"2FF9193AD482C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":611749,"discussion_content":"针对消息堆积，有没有什么比较好的解决策略？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680276837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":611725,"ip_address":"江苏","group_id":0},"score":611749,"extra":""},{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1959822,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","nickname":"Spoon","note":"","ucode":"2FF9193AD482C2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611828,"discussion_content":"多消费","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680346735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":611749,"ip_address":"天津","group_id":0},"score":611828,"extra":""},{"author":{"id":1959822,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e7/8e/318cfde0.jpg","nickname":"Spoon","note":"","ucode":"2FF9193AD482C2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":611853,"discussion_content":"kafka当分区数量固定时，增加消费者也没用啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680357497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":611828,"ip_address":"江苏","group_id":0},"score":611853,"extra":""}]}]},{"had_liked":false,"id":370877,"user_name":"华伦","can_delete":false,"product_type":"c1","uid":1044639,"ip_address":"上海","ucode":"A4F27CC1C38D3B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f0/9f/46d8f49a.jpg","comment_is_top":false,"comment_ctime":1679329789,"is_pvip":false,"replies":[{"id":135391,"content":"你好，这个方式缺点是退货后延迟一会儿才能拿到，好处是减少了不必要的尝试，是否合理要看我们业务需要","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1679569997,"ip_address":"北京","comment_id":370877,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"针对于分片库存为0的场景，可以设定分片库存是否执行的标记，实时：当分片库存为0时原子化变更分片库存标记，定时：定时check 分片库存标记","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":610460,"discussion_content":"你好，这个方式缺点是退货后延迟一会儿才能拿到，好处是减少了不必要的尝试，是否合理要看我们业务需要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679569997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370159,"user_name":"普通熊猫 ଘ(੭ˊ꒳​ˋ)੭✧","can_delete":false,"product_type":"c1","uid":1196531,"ip_address":"北京","ucode":"7FEF9C72B4801B","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/f3/8bca4aba.jpg","comment_is_top":false,"comment_ctime":1678438291,"is_pvip":false,"replies":[{"id":135049,"content":"你好，各有千秋，是否适合取决于业务规模：）","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1678757352,"ip_address":"北京","comment_id":370159,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100309001,"comment_content":"1. 我不认为基于redis锁的方案是一个好的秒杀方案, redis是一个AP系统, redis的分布式锁用于限流是可以的, 用于库存就有些危险了. \n\n2. 如果让我设计的话, 主要做两点就够了. 一是限流: 基于总数的 (放10倍, 100倍于库存的流量进来都可以), 基于ip的, 基于user id的, 各种限流.  二是把下单请求放MQ中. \n\n3. 放到MQ中的请求, 后面只需要架2台微服务慢慢消费就可以了, 后面所有扣减库存的操作都直接在DB里基于事务进行. 不需要架设大量的微服务, 因此也不需要考虑太多DB写压力的问题.  ","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608950,"discussion_content":"你好，各有千秋，是否适合取决于业务规模：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678757352,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1196531,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/f3/8bca4aba.jpg","nickname":"普通熊猫 ଘ(੭ˊ꒳​ˋ)੭✧","note":"","ucode":"7FEF9C72B4801B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":608963,"discussion_content":"哇，感谢老师回复。\n\n老师方便的话可以去查一下Martin Kleppmann写的一篇文章《How to do distributed locking》。分布式系统中有三个不可回避的问题，我把它们合称为NPC问题：网络分区（Network partition）、进程暂停（Process pause）、时钟漂移（Clock drift）。这导致redis的锁有本质的设计缺陷，在金融场景下应尽量避免用于解决一致性问题。\n\n不知道链接能不能发出来，《How to do distributed locking》https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html\n\n我自己也写过一篇《看似忠良的分布式锁》： https://mp.weixin.qq.com/s/hOPT41HIAGE8iZ5jLlREmg ，可以参考","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1678759979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":608950,"ip_address":"北京","group_id":0},"score":608963,"extra":""},{"author":{"id":2054085,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoNlZoq9yhnF9LSoavepgInzDNSWAcvRqb79Wn8N2JhyicHQSndzu5KmZqwJ6cWcYHjQLS18pmiacUA/132","nickname":"Geek_70c0ab","note":"","ucode":"AEE45ED32F2C87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1196531,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/f3/8bca4aba.jpg","nickname":"普通熊猫 ଘ(੭ˊ꒳​ˋ)੭✧","note":"","ucode":"7FEF9C72B4801B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634326,"discussion_content":"我也觉得先做限流是一个很好的想法，在业务入口做限制，比流量进系统溜达一圈之后再做限制要好一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1703217613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":608963,"ip_address":"北京","group_id":0},"score":634326,"extra":""}]}]},{"had_liked":false,"id":370092,"user_name":"孙启金","can_delete":false,"product_type":"c1","uid":3015091,"ip_address":"河南","ucode":"60E14790C43093","user_header":"https://static001.geekbang.org/account/avatar/00/2e/01/b3/c20595f0.jpg","comment_is_top":false,"comment_ctime":1678361738,"is_pvip":false,"replies":[{"id":135046,"content":"你好，直接用户界面报错即可，这时可以前端来决定是否重试，对于多扣库存这里要能接受失误，毕竟比少扣好得多","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1678757273,"ip_address":"北京","comment_id":370092,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"请教老师一个问题：用redis实现秒杀扣减库存，如果某次扣减操作超时（如网络抖动等）要怎么办？比如在业务代码通过调用redis扣减库存，但操作redis超时了，此时不知道redis是否进行了扣减操作（超时重试可能会导致少卖）。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608947,"discussion_content":"你好，直接用户界面报错即可，这时可以前端来决定是否重试，对于多扣库存这里要能接受失误，毕竟比少扣好得多","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1678757273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1196531,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/f3/8bca4aba.jpg","nickname":"普通熊猫 ଘ(੭ˊ꒳​ˋ)੭✧","note":"","ucode":"7FEF9C72B4801B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608430,"discussion_content":"直接返回秒杀失败, 让用户重试, 运气也是实力的一部分, 哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678439039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":3015091,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/01/b3/c20595f0.jpg","nickname":"孙启金","note":"","ucode":"60E14790C43093","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1196531,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/f3/8bca4aba.jpg","nickname":"普通熊猫 ଘ(੭ˊ꒳​ˋ)੭✧","note":"","ucode":"7FEF9C72B4801B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608804,"discussion_content":"你好感谢回复！但是返回失败相当于没有下单成功，此时是不应该扣减库存的。但实际redis的扣减操作可能已经完成了，可能因为卡顿或者网络等问题导致返回的结果超时，应用侧没收到结果。这时会导致库存不准（少卖）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678673332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":608430,"ip_address":"河南","group_id":0},"score":608804,"extra":""},{"author":{"id":1196531,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/f3/8bca4aba.jpg","nickname":"普通熊猫 ଘ(੭ˊ꒳​ˋ)੭✧","note":"","ucode":"7FEF9C72B4801B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3015091,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/01/b3/c20595f0.jpg","nickname":"孙启金","note":"","ucode":"60E14790C43093","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608965,"discussion_content":"下单接口里应该带着订单号，因此接口可以设计成幂等的，安心重试即可。重试要么成功、要么失败、要么无响应，都是正常现象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678760150,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":608804,"ip_address":"北京","group_id":0},"score":608965,"extra":""}]}]},{"had_liked":false,"id":366199,"user_name":"StarKing","can_delete":false,"product_type":"c1","uid":1004192,"ip_address":"上海","ucode":"EB825CFA70AC1F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/a0/d308434e.jpg","comment_is_top":false,"comment_ctime":1673454928,"is_pvip":false,"replies":[{"id":133442,"content":"你好，StarKing，批量扣件建议用数值加上incr带上出库个数即可，另外我觉得批次出库这个场景是没有高并发争抢的，理论上可以直接update对应SN商品的出库状态即可。如果不是可以再多讲一些具体场景细节～","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1673504331,"ip_address":"北京","comment_id":366199,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"问下老师:我们需要批量商品数量扣件，批量批次出库扣件，批量SN出库扣件。除了数量用REDIS完成了，其他如何设计。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599402,"discussion_content":"你好，StarKing，批量扣件建议用数值加上incr带上出库个数即可，另外我觉得批次出库这个场景是没有高并发争抢的，理论上可以直接update对应SN商品的出库状态即可。如果不是可以再多讲一些具体场景细节～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673504331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":362645,"user_name":"G小调","can_delete":false,"product_type":"c1","uid":1145529,"ip_address":"北京","ucode":"8F3D50E2C1A559","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/b9/c3d3a92f.jpg","comment_is_top":false,"comment_ctime":1668697609,"is_pvip":false,"replies":[{"id":131866,"content":"常见方式是利用MySQL行锁实现，但是容易出现锁表问题","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668731587,"ip_address":"北京","comment_id":362645,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"请教个问题，正常的商品售卖，下单，扣减库存，怎么保证在高并发的情况下，保证系统的吞吐量，同时不超卖","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594012,"discussion_content":"常见方式是利用MySQL行锁实现，但是容易出现锁表问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668731588,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1196531,"avatar":"https://static001.geekbang.org/account/avatar/00/12/41/f3/8bca4aba.jpg","nickname":"普通熊猫 ଘ(੭ˊ꒳​ˋ)੭✧","note":"","ucode":"7FEF9C72B4801B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608438,"discussion_content":"MySQL我了解到的只有6种锁, CRUD会申请MDL读锁, 只跟DDL冲突, 而设置isolation level为Read Committed的话, 只会有行锁, 因此我断言只会锁行, 不会锁表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678440038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145529,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/b9/c3d3a92f.jpg","nickname":"G小调","note":"","ucode":"8F3D50E2C1A559","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594944,"discussion_content":"使用行锁，除了可能导致锁表，系统吞吐量也不高啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669600597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"云南","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1145529,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/b9/c3d3a92f.jpg","nickname":"G小调","note":"","ucode":"8F3D50E2C1A559","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594993,"discussion_content":"是的，这是常见的方式，使用Redis方式是我这次讲的内容，一般流量大后才会这样做","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669626062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":594944,"ip_address":"北京","group_id":0},"score":594993,"extra":""}]}]},{"had_liked":false,"id":362559,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"北京","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1668646271,"is_pvip":true,"replies":[{"id":131841,"content":"你好，大脸猫，这个方式很不错，有一个小细节补充，这个数据所在缓存的服务因为每次都会请求这里，会出现单个分片流量很大情况，这种需要怎么优化？","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668647657,"ip_address":"北京","comment_id":362559,"utype":1}],"discussion_count":7,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"第一个问题，记录一个库存总数，不需要绝对正确，每次扣减库存成功，总数也做相应扣减，一开始进入的时候也要验证库存是否足够。","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593902,"discussion_content":"你好，大脸猫，这个方式很不错，有一个小细节补充，这个数据所在缓存的服务因为每次都会请求这里，会出现单个分片流量很大情况，这种需要怎么优化？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668647657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1117318,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","nickname":"花花大脸猫","note":"","ucode":"8ABDB3F7F4FB0F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594100,"discussion_content":"初步的想法是不是可以将总数的key值也切成多个，加起来等于库存总数，每次读取其中的一个进行判断并减去库存数，不够就直接返回没有库存。但是感觉这个方式又有点多此一举，我的想法是实现越简单越好，请问针对单个分片流量过大，您有什么想法么，求分享！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668782676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1117318,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","nickname":"花花大脸猫","note":"","ucode":"8ABDB3F7F4FB0F","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":594209,"discussion_content":"可以复制多份","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668870283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":594100,"ip_address":"北京","group_id":0},"score":594209,"extra":""},{"author":{"id":1325997,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3b/ad/31193b83.jpg","nickname":"孙志强","note":"","ucode":"9C070F1E4EC6FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":598214,"discussion_content":"怎么复制？主从吗？更新的时候还是只有1个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672671371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":594209,"ip_address":"北京","group_id":0},"score":598214,"extra":""},{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1325997,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3b/ad/31193b83.jpg","nickname":"孙志强","note":"","ucode":"9C070F1E4EC6FF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":598304,"discussion_content":"单纯的在多个主分片复制多份剩余总数，然后扣减前，随机找个分片的 key 先判断下，用这个拦截流量，当有更新的时候定期同步多个分片的字段而不是每次都更新","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672744043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":598214,"ip_address":"北京","group_id":0},"score":598304,"extra":""}]}]},{"had_liked":false,"id":362011,"user_name":"zack","can_delete":false,"product_type":"c1","uid":1393583,"ip_address":"北京","ucode":"8D95488FA90C9B","user_header":"https://static001.geekbang.org/account/avatar/00/15/43/af/7b174587.jpg","comment_is_top":false,"comment_ctime":1668064532,"is_pvip":false,"replies":[{"id":131683,"content":"你好，zack，这个会牵扯到数据是否同步问题，理论上只有活动结束才会同步回去～或者数据库只是镜像，不作为结果评判，可以考虑一切以已售出订单进行计算","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668068733,"ip_address":"北京","comment_id":362011,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"请教，如果库存很多有剩余，是否要同步到mysql，如何同步；如果秒杀是不是不用同步了","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593286,"discussion_content":"你好，zack，这个会牵扯到数据是否同步问题，理论上只有活动结束才会同步回去～或者数据库只是镜像，不作为结果评判，可以考虑一切以已售出订单进行计算","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668068733,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361978,"user_name":"吴松文","can_delete":false,"product_type":"c1","uid":1086406,"ip_address":"北京","ucode":"F091DFD812C8BB","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/c6/a5a888d4.jpg","comment_is_top":false,"comment_ctime":1668042693,"is_pvip":false,"replies":[{"id":131673,"content":"你好，吴松文，很高兴收到你的提问，这个我没有研究过，我觉得可以测试下是否能保证全局一致性就能确认是否支持，同时即使组件支持，用的时候需要注意方法是否选对","user_name":"作者回复","user_name_real":"编辑","uid":1004527,"ctime":1668044564,"ip_address":"北京","comment_id":361978,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"老师，请问没有redis，用ehcach可以处理这种并发吗？","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":593232,"discussion_content":"你好，吴松文，很高兴收到你的提问，这个我没有研究过，我觉得可以测试下是否能保证全局一致性就能确认是否支持，同时即使组件支持，用的时候需要注意方法是否选对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1668044564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361687,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"北京","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1667785898,"is_pvip":true,"replies":[{"id":131547,"content":"你好，李二木，很高兴收到你的提问，一般两种方式，在本地缓存一段时间提交，但是网关需要做会话亲和。一种是扔到队列汇总处理，最后对于频繁更新的数据建议放缓存当作长期缓存更合适","user_name":"作者回复","user_name_real":"作者","uid":1004527,"ctime":1667786569,"ip_address":"北京","comment_id":361687,"utype":1}],"discussion_count":3,"race_medal":0,"score":3,"product_id":100309001,"comment_content":"好久把缓存中的库存数更新到数据库中，如果频繁更新数据库中某条数据，有什么办法解决","like_count":0,"discussions":[{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592864,"discussion_content":"你好，李二木，很高兴收到你的提问，一般两种方式，在本地缓存一段时间提交，但是网关需要做会话亲和。一种是扔到队列汇总处理，最后对于频繁更新的数据建议放缓存当作长期缓存更合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667786569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2314165,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4f/b5/bd6140a5.jpg","nickname":"ARM","note":"","ucode":"788FD0DBD39B94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":599430,"discussion_content":"频繁更新的数据放缓存？这个不会导致一直更新缓存吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673515343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":592864,"ip_address":"河南","group_id":0},"score":599430,"extra":""},{"author":{"id":1004527,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/53/ef/5cdaa18b.jpg","nickname":"thinkpc","note":"","ucode":"0EBF75B8707584","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2314165,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4f/b5/bd6140a5.jpg","nickname":"ARM","note":"","ucode":"788FD0DBD39B94","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599459,"discussion_content":"这是因为频繁更新缓存比频繁更新数据库性能好，这种更新多的放到缓存周期落数据库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673530863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":599430,"ip_address":"北京","group_id":0},"score":599459,"extra":""}]}]}]}