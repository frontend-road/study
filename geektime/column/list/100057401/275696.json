{"id":275696,"title":"06 | 分片机制：为什么说Range是更好的分片策略？","content":"<p>你好，我是王磊，你也可以叫我Ivan。</p><p>在这一讲的开头，我想请你思考一个问题，你觉得在大规模的业务应用下，单体数据库遇到的主要问题是什么？对，首先就是写入性能不足，这个我们在<a href=\"https://time.geekbang.org/column/article/274200\">第4讲</a>也说过，另外还有存储方面的限制。而分片就是解决性能和存储这两个问题的关键设计，甚至不仅是分布式数据库，在所有分布式存储系统中，分片这种设计都是广泛存在的。</p><p>所以今天，就让我们好好了解一下，分片到底是怎么回事儿。</p><h2>什么是分片</h2><p>分片在不同系统中有各自的别名，Spanner和YugabyteDB中被称为Tablet，在HBase和TiDB中被称为Region，在CockraochDB中被称为Range。无论叫什么，概念都是一样的，分片是一种水平切分数据表的方式，它是数据记录的集合，也是数据表的组成单位。</p><p>分布式数据库的分片与单体数据库的分区非常相似，区别在于：分区虽然可以将数据表按照策略切分成多个数据文件，但这些文件仍然存储在单节点上；而分片则可以进一步根据特定规则将切分好的文件分布到多个节点上，从而实现更强大的存储和计算能力。</p><p>分片机制通常有两点值得关注：</p><ol>\n<li>分片策略</li>\n</ol><p>主要有Hash（哈希）和Range（范围）两种。你可能还听到过Key和List，其实Key和List可以看作是Hash和Range的特殊情况，因为机制类似，我们这里就不再细分了。</p><!-- [[[read_end]]] --><ol start=\"2\">\n<li>分片的调度机制</li>\n</ol><p>分为静态与动态两种。静态意味着分片在节点上的分布基本是固定的，即使移动也需要人工的介入；动态则是指通过调度管理器基于算法在各节点之间自动地移动分片。</p><p>我把分片机制的两个要点与<a href=\"https://time.geekbang.org/column/article/274908\">第5讲</a>提到的两种架构风格对应了一下，放到下面的表格中，希望能给你带来更直观的感受。</p><p><img src=\"https://static001.geekbang.org/resource/image/69/ab/691fd31dd60df190cc725ae3f2d9ccab.jpg?wh=2700*788\" alt=\"\"></p><p>从表格中可以看出，PGXC只支持静态的Hash分片和Range分片，实现机制较为简单，所以，我就从这里开始展开吧。</p><h2>PGXC</h2><h3>Hash分片</h3><p>Hash分片，就是按照数据记录中指定关键字的Hash值将数据记录映射到不同的分片中。我画了一张图来表示Hash分片的过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/yy/60/yycace2bf5c6d8930ac68b1d6c197060.jpg?wh=2700*1634\" alt=\"\"></p><p>图中的表格部分显示了一个社交网站的记录表，包括主键、用户ID、分享内容和分享时间等字段。假设以用户ID作为关键字进行分片，系统会通过一个Hash函数计算用户ID的Hash值而后取模，分配到对应的分片。模为4的原因是系统一共有四个节点，每个节点作为一个分片。</p><p>因为Hash计算会过滤掉数据原有的业务特性，所以可以保证数据非常均匀地分布到多个分片上，这是Hash分片最大的优势，而且它的实现也很简洁。但示例中采用的分片方法直接用节点数作为模，如果系统节点数量变动，模也随之改变，数据就要重新Hash计算，从而带来大规模的数据迁移。显然，这种方式对于扩展性是非常不友好的。</p><p>那接下来的问题就是，我们需要找一个方法提升系统的扩展性。你可能猜到了，这就是一致性Hash，该算法首次提出是在论文“<a href=\"http://cs.brown.edu/courses/cs296-2/papers/consistent.pdf\">Consistent Hashing and Random Trees : Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web</a>”当中。</p><p>要在工业实践中应用一致性Hash算法，首先会引入虚拟节点，每个虚拟节点就是一个分片。为了便于说明，我们在这个案例中将分片数量设定为16。但实际上，因为分片数量决定了集群的最大规模，所以它通常会远大于初始集群节点数。</p><p><img src=\"https://static001.geekbang.org/resource/image/b9/ed/b931084d4f365f133765199dbddda9ed.jpg?wh=2700*1701\" alt=\"\"></p><p>16个分片构成了整个Hash空间，数据记录的主键和节点都要通过Hash函数映射到这个空间。这个Hash空间是一个Hash环。我们换一种方式画图，可以看得更清楚些。</p><p><img src=\"https://static001.geekbang.org/resource/image/b4/2a/b4376b54f26b73f66d2bd20b53652e2a.jpg?wh=2700*1311\" alt=\"\"></p><p>节点和数据都通过Hash函数映射到Hash环上，数据按照顺时针找到最近的节点。</p><p>当我们新增一台服务器，即节点E时，受影响的数据仅仅是新服务器到其环空间中前一台服务器（即沿着逆时针方向的第一台服务器）之间数据。结合我们的示例，只有小红分享的消息从节点B被移动到节点E，其他节点的数据保持不变。此后，节点B只存储Hash值6和7的消息，节点E存储Hash值4和5的消息。</p><p><img src=\"https://static001.geekbang.org/resource/image/27/b7/27f8f563bc6d598abdd6b08509dd69b7.jpg?wh=2700*1294\" alt=\"\"></p><p>Hash函数的优点是数据可以较为均匀地分配到各节点，并发写入性能更好。</p><p>本质上，Hash分片是一种静态分片方式，必须在设计之初约定分片的最大规模。同时，因为Hash函数已经过滤掉了业务属性，也很难解决访问业务热点问题。所谓业务热点，就是由于局部的业务活跃度较高，形成系统访问上的热点。这种情况普遍存在于各类应用中，比如电商网站的某个商品卖得比较好，或者外卖网站的某个饭店接单比较多，或者某个银行网点的客户业务量比较大等等。</p><h3>Range静态分片</h3><p>与Hash分片不同，Range分片的特点恰恰是能够加入对于业务的预估。例如，我们用“Location”作为关键字进行分片时，不是以统一的行政级别为标准。因为注册地在北京、上海的用户更多，所以这两个区域可以按照区县设置分片，而海外用户较少，可以按国家设置为分片。这样，分片间的数据更加平衡。</p><p><img src=\"https://static001.geekbang.org/resource/image/dc/5f/dcbda640005656263e8fc02d2c06295f.jpg?wh=2700*883\" alt=\"\"></p><p>但是，这种方式依然是静态的，如果海外业务迅速增长，服务海外用户的分片将承担更大的压力，可能导致性能下降，用户体验不佳。</p><p>相对Hash分片，Range分片的适用范围更加广泛。其中一个非常重要的原因是，Range分片可以更高效地扫描数据记录，而Hash分片由于数据被打散，扫描操作的I/O开销更大。但是，PGXC的Range分片受限于单体数据库的实现机制，很难随数据变动和负载变化而调整。</p><p>虽然有些PGXC同时支持两种分片方式，但Hash分片仍是主流，比如GoldenDB默认使用Hash分片，而TBase仅支持Hash分片。</p><h2>NewSQL</h2><p>总体上，NewSQL也是支持Hash和Range两种分片方式的。具体就产品来说，CockroachDB和YugabyteDB同时支持两种方式，TiDB仅支持Range分片。</p><p>NewSQL数据库的Hash分片也是静态的，所以与PGXC差别不大，这里就不再赘述了。接下来，我们重点学习下Range动态分片。</p><h3>Range动态分片</h3><p>NewSQL的Range分片，多数是用主键作为关键字来分片的，当然主键可以是系统自动生成的，也可以是用户指定的。既然提供了用户指定主键的方式，那么理论上可以通过设定主键的产生规则，控制数据流向哪个分片。但是，主键必须保证唯一性，甚至是单调递增的，导致这种控制就会比较复杂，使用成本较高。所以，我们基本可以认为，分片是一个系统自动处理的过程，用户是感知不到的。这样做的好处显然是提升了系统的易用性。</p><p>我们将NewSQL的Range分片称为动态分片，主要有两个原因：</p><ol>\n<li><strong>分片可以自动完成分裂与合并</strong></li>\n</ol><p>当单个分片的数据量超过设定值时，分片可以一分为二，这样就可以保证每个分片的数据量较为均衡。多个数据量较少的分片，会在一定的周期内被合并为一个分片。</p><p>还是回到我们社交网站这个例子，根据消息的数量来自动分片，我们可以得到R1、R2、R3三个分片。</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/bc/d793d5ded136bfba12ae1996f06285bc.jpg?wh=2700*887\" alt=\"\"></p><p>分片也会被均衡地调度到各个节点上，节点间的数据量也保持总体平衡。</p><ol start=\"2\">\n<li><strong>可以根据访问压力调度分片</strong></li>\n</ol><p>我们看到系统之所以尽量维持分片之间，以及节点间的数据量均衡，存储的原因外，还可以更大概率地将访问压力分散到各个节点上。但是，有少量的数据可能会成为访问热点，就是上面提到的业务热点，从而打破这种均衡。比如，琦琦和静静都是娱乐明星，有很多粉丝关注她们分享的内容，其访问量远超过普通人。这时候，系统会根据负载情况，将R2和R3分别调度到不同的节点，来均衡访问压力。</p><p><strong>存储均衡</strong>和<strong>访问压力均衡</strong>，是NewSQL分片调度机制普遍具备的两项能力。此外，还有两项能力在<a href=\"https://www.cs.princeton.edu/courses/archive/fall13/cos518/papers/spanner.pdf\">Spanner论文</a>中被提及，但在其他产品中没有看到工程化实现。</p><p>第一是<strong>减少分布式事务</strong>。</p><p>对分布式数据库来说，有一个不争的事实，那就是分布式事务的开销永远不会小于单节点本地事务的开销。因此，所有分布式数据库都试图通过减少分布式事务来提升性能。</p><p>Spanner在Tablet，也就是Range分片，之下增加了目录（Directory），作为数据调度的最小单位，它的调度范围是可以跨Tablet的。通过调度Directory可以将频繁参与同样事务的数据，转移到同一个Tablet下，从而将分布式事务转换为本地事务。</p><p>第二是<strong>缩短服务延时</strong>。</p><p>对于全球化部署的分布式数据库，数据可能存储在相距很远的多个数据中心，如果用户需要访问远端机房的数据，操作延时就比较长，这受制于数据传输速度。而Spanner可以将Directory调度到靠近用户的数据中心，缩短数据传输时间。当然，这里的调度对象都是数据的主副本，跨中心的数据副本仍然存在，负责保证系统整体的高可靠性。</p><p>Directory虽然带来新的特性，但显然也削弱了分片的原有功能，分片内的记录不再连续，扫描要付出更大成本。而减少分布式事务和靠近客户端位置这本身就是不能兼顾的，再加上存储和访问压力，分片调度机制要在四个目标间进行更复杂的权衡。</p><p>Spanner的这种设计能达到什么样的实际效果呢？我们现在还需要继续等待和观察。</p><h2>分片与高可靠的关系</h2><p>高可靠是分布式数据库的重要特性，分片是数据记录的最小组织单位，也必须是高可靠的。</p><p>NewSQL与PGXC的区别在于，对于NewSQL来说，分片是高可靠的最小单元；而对于PGXC，分片的高可靠要依附于节点的高可靠。</p><p>NewSQL的实现方式是复制组（Group）。在产品层面，通常由一个主副本和若干个副本组成，通过Raft或Paxos等共识算法完成数据同步，称为Raft Group或Paxos Group，所以我们简称这种方式为Group。因为不相关的数据记录会被并发操作，所以同一时刻有多个Group在工作。因此，NewSQL通常支持Multi Raft Group或者Multi Paxos Group。这里，我们先忽略Multi Paxos的另一个意思。</p><p>每个Group是独立运行的，只是共享相同的网络和节点资源，所以不同复制组的主副本是可以分布在不同节点的。</p><p>PGXC的最小高可靠单元由一个主节点和多个备节点组成，我们借用TDSQL中的术语，将其称为Set。一个PGXC是由多个Set组成。Set的主备节点间复制，多数采用半同步复制，平衡可靠性和性能。这意味着，所有分片的主副本必须运行在Set的主节点上。</p><p>从架构设计角度看，Group比Set更具优势，原因主要有两个方面。首先，Group的高可靠单元更小，出现故障时影响的范围就更小，系统整体的可靠性就更高。其次，在主机房范围内，Group的主副本可以在所有节点上运行，资源可以得到最大化使用，而Set模式下，占大多数的备节点是不提供有效服务的，资源白白浪费掉。</p><h2>小结</h2><p>好吧，今天的内容就到这里了，我们一起回顾下这节课的重点。</p><ol>\n<li>分片是分布式数据库的关键设计，以此实现多节点的存储和访问能力。</li>\n<li>分片机制的两个要点是分片策略和调度机制，分片策略包括Hash和Range两种，调度机制则分为静态和动态。</li>\n<li>PGXC使用单体数据库作为数据节点，往往只实现了静态分片。它的分片策略支持Hash和Range两种，其中Hash一般是指一致性Hash，可以最大程度规避节点扩缩带来的影响。Hash分片写性能出众，但查询性能差，Range则相反。</li>\n<li>NewSQL的默认分片策略通常是Range分片。分片调度机制为了实现存储平衡和访问压力平衡的目标，会将分片动态调度到各个节点。Spanner的设计又将在分片下拓展了Directory，通过对Directory的调度实现减少分布式事务和缩短延时的目标，但在其他分布式数据库中尚未看到对应的实现。</li>\n<li>NewSQL架构下，分片采用Paxos或Raft算法可以构成复制组，这种复制机制相比PGXC的主备节点复制，提供了更高的可靠性，资源使用也更加高效。</li>\n</ol><p>到这里你应该已经大体了解了分布式数据库分片机制。我们说Range是更好的分片策略，就是因为Range分片有条件做到更好的动态调度，只有动态了，才能自适应各种业务场景下的数据变化，平衡存储、访问压力、分布式事务和访问链路延时等多方面的诉求。从我个人的观点来说，NewSQL的Range分片方式更加优雅，随着单体数据库底层数据同步机制的改进，未来PGXC可能也会向这种方式靠拢。</p><p>如果你想更深入地了解Range分片机制，可以研究下<a href=\"https://www2.cs.duke.edu/courses/cps399.28/spring08/papers/osdi06-ChangDeanEtAl-bigtable.pdf\">BigTable的论文</a>。同时，因为HBase是业界公认的BigTable开源实现，所以你在它的<a href=\"https://hbase.apache.org/book.html#arch.overview\">官方文档</a>也能找到很多有用的内容。</p><p><img src=\"https://static001.geekbang.org/resource/image/55/88/556ca784ab375b295716c8ef17897288.jpg?wh=2700*3377\" alt=\"\"></p><h2>思考题</h2><p>Range分片的优势是动态调度，这就是说分片存储在哪个节点上是不断变化的。这时，客户端首先要知道分片的位置，就要先访问分片的元数据。你觉得这些元数据应该如何存储呢？是存储在某个中心点，还是分散在所有节点上呢？如果有多个副本，又该如何同步呢？</p><p>如果你想到了答案，又或者是触发了你对相关问题的思考，都可以在评论区和我聊聊，我会在答疑篇更系统地回复这个问题。如果你身边的朋友也对数据的分片机制，这个话题感兴趣，你也可以把今天这一讲分享给他，我们一起讨论。</p><h2>学习资料</h2><p>David Karge et al.: <a href=\"http://cs.brown.edu/courses/cs296-2/papers/consistent.pdf\"><em>Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web</em></a></p><p>Fay Chang et al.: <a href=\"https://www2.cs.duke.edu/courses/cps399.28/spring08/papers/osdi06-ChangDeanEtAl-bigtable.pdf\"><em>Bigtable: A Distributed Storage System for Structured Data</em></a></p><p>HBase: <a href=\"https://hbase.apache.org/book.html#arch.overview\"><em>Apache HBase ™ Reference Guide</em></a></p><p>James C. Corbett et al.: <a href=\"https://www.cs.princeton.edu/courses/archive/fall13/cos518/papers/spanner.pdf\"><em>Spanner: Google’s Globally-Distributed Database</em></a></p>","comments":[{"had_liked":false,"id":247216,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1599635403,"is_pvip":false,"replies":[{"id":"90804","content":"是的：）","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1599647110,"ip_address":"","comment_id":247216,"utype":1}],"discussion_count":2,"race_medal":0,"score":"70319112139","product_id":100057401,"comment_content":"思考题：<br>大部分分布式系统都有这么一个存储元数据的东西，比如TiDB的PD，HBase里的ZK，k8s的etcd。也可以把他们看成存储小数据的KV存储系统，一般通过Raft或者Paxos来维持共识，就跟普通分布式系统一样","like_count":17,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505343,"discussion_content":"是的：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599647110,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1418488,"avatar":"https://static001.geekbang.org/account/avatar/00/15/a4/f8/98dd74c4.jpg","nickname":"kakaliuu","note":"","ucode":"3375F841E2E917","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362688,"discussion_content":"Hadoop中有一个管理元数据的mysql库，是不是也可以理解为这个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617011332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243401,"user_name":"真名不叫黄金","can_delete":false,"product_type":"c1","uid":1174066,"ip_address":"","ucode":"FB611FC98F5BA7","user_header":"https://static001.geekbang.org/account/avatar/00/11/ea/32/1fd102ec.jpg","comment_is_top":false,"comment_ctime":1598088847,"is_pvip":false,"replies":[{"id":"89751","content":"是的，基本正确，点赞。另外，TiDB还做了一些优化，详细的内容在第7讲有说明","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598225725,"ip_address":"","comment_id":243401,"utype":1}],"discussion_count":4,"race_medal":0,"score":"31662859919","product_id":100057401,"comment_content":"猜测一下，如果是TiDB的话，将元数据存在PD，而PD本身又可部署为多节点高可用的，不过数据最终是落在etcd的，PD只是交互节点。<br>Spanner如何做的就不太好猜测，但是Spanner也有PD这个角色，也许是差不多的。","like_count":8,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504276,"discussion_content":"是的，基本正确，点赞。另外，TiDB还做了一些优化，详细的内容在第7讲有说明","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598225725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1319949,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJqUkoCXOxRraVNVg1fTm4O892WFVCjeL9pS8kUX2nEeTEcaS6k0kP25h3rRKtUCwSoUrY6dvP43w/132","nickname":"赵见跃","note":"","ucode":"F89B0BE32C3329","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300527,"discussion_content":"您好，TiDB里也包括了etcd吗？谢谢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598158148,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1174066,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ea/32/1fd102ec.jpg","nickname":"真名不叫黄金","note":"","ucode":"FB611FC98F5BA7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1319949,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJqUkoCXOxRraVNVg1fTm4O892WFVCjeL9pS8kUX2nEeTEcaS6k0kP25h3rRKtUCwSoUrY6dvP43w/132","nickname":"赵见跃","note":"","ucode":"F89B0BE32C3329","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301203,"discussion_content":"你好，我印象中好像有用到。不过具体是否用到，这个恐怕是得看他们文档才行，所以暂时不能为你解答，抱歉。以上回答只是我的猜测","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598437869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300527,"ip_address":""},"score":301203,"extra":""},{"author":{"id":1905171,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","nickname":"扩散性百万咸面包","note":"","ucode":"6D703D51553B42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1319949,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJqUkoCXOxRraVNVg1fTm4O892WFVCjeL9pS8kUX2nEeTEcaS6k0kP25h3rRKtUCwSoUrY6dvP43w/132","nickname":"赵见跃","note":"","ucode":"F89B0BE32C3329","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304652,"discussion_content":"去看PD文档，PD embedded Etcd。PD server也可以接受etcd的请求，源码内部也用了etcd client，可以PD是包了一层etcd","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599635275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300527,"ip_address":""},"score":304652,"extra":""}]}]},{"had_liked":false,"id":243394,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1598085230,"is_pvip":false,"replies":[{"id":"89701","content":"Hash分片会将数据比较均匀的分散在集群的各个节点上，所以性能更好，而Range的数据分布是根据编码规则（静态）或者主键（动态）的，不以追求平均分布为目标，所以性能会差些。这个性能差异问题，我在第17讲还会再说明。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598100407,"ip_address":"","comment_id":243394,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31662856302","product_id":100057401,"comment_content":"Hash 分片写性能出众，但查询性能差，Range 则相反。<br><br>没懂这一句话，文章中哪里有详细阐释为什么Hash分片的写性能更好呢？为什么Range的写性能就不行呢？","like_count":8,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315304,"discussion_content":"hash和range结合会不会更好呢","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603262122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504274,"discussion_content":"Hash分片会将数据比较均匀的分散在集群的各个节点上，所以性能更好，而Range的数据分布是根据编码规则（静态）或者主键（动态）的，不以追求平均分布为目标，所以性能会差些。这个性能差异问题，我在第17讲还会再说明。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598100407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249304,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1600581314,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18780450498","product_id":100057401,"comment_content":"老师，PGXC的这种模式，如果按Set来分片的话，那么为什么不能像Multi Raft Group一样，主Set副本分布在不同节点呢？这样就可以把读写压力分摊在不同节点上了。","like_count":4,"discussions":[{"author":{"id":2063923,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4rbCWDxib3FHibYBouTwZqZBH6h5IgvjibEiaBv4Ceekib9SYg0peBBlFGu8hDuGvwjKp6LNznvEAibYw/132","nickname":"DonaldTrumpppppppppp","note":"","ucode":"211B1A25C53172","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560944,"discussion_content":"我的理解是，pgxc的一个set中的每台节点只会运行一个mysql实例，主从间通过主从复制，只有主节点才能提供写服务（甚至从也不提供读，只作为备份）。 如果要其它节点也作为主，则可能一个节点上需要运行很多个mysql实例，太重量级了。 而newsql是通过raft等共识协议，复制的量级是一条条数据row，而不是像pgxc这种依赖于数据库引擎的主从同步机制这么重量级。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649495896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243396,"user_name":"南国","can_delete":false,"product_type":"c1","uid":1897062,"ip_address":"","ucode":"0D8D3C5F4EB8AE","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","comment_is_top":false,"comment_ctime":1598086602,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18777955786","product_id":100057401,"comment_content":"分片数据存在分布式文件系统里，元数据像bigtable一样用一个高可靠的协调中心存，比如Zookeeper，在合并和分裂的时候修改元数据，客户端缓存需要的元数据，修改的时候通知即可","like_count":4},{"had_liked":false,"id":243206,"user_name":"开心哥","can_delete":false,"product_type":"c1","uid":1705468,"ip_address":"","ucode":"D44C1F03B23C5A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/05/fc/bceb3f2b.jpg","comment_is_top":false,"comment_ctime":1597993270,"is_pvip":false,"replies":[{"id":"89709","content":"嗯，说得对，这是方案之一，点赞","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598110442,"ip_address":"","comment_id":243206,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14482895158","product_id":100057401,"comment_content":"元数据搞个etcd存起来如何？","like_count":4,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504220,"discussion_content":"嗯，说得对，这是方案之一，点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598110442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290075,"user_name":"yang","can_delete":false,"product_type":"c1","uid":1227722,"ip_address":"","ucode":"45C1BE2D4AD72B","user_header":"https://static001.geekbang.org/account/avatar/00/12/bb/ca/86d58e40.jpg","comment_is_top":false,"comment_ctime":1619349084,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5914316380","product_id":100057401,"comment_content":"hash--分片，基于hash槽的设计几乎没讲--，比如redis-cluster--事实上这种在大规模应用中反而会更多。","like_count":1},{"had_liked":false,"id":250170,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1600960163,"is_pvip":false,"replies":[{"id":"91791","content":"这是由单体数据库的主从复制机制决定的，无论哪种策略，都是以节点为单位的，从节点不能提供确保数据一致性的服务。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1601278857,"ip_address":"","comment_id":250170,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5895927459","product_id":100057401,"comment_content":"多数采用半同步复制，平衡可靠性和性能。这意味着，所有分片的主副本必须运行在 Set 的主节点上。<br><br>老师,这句话没懂,为什么使用半同步复制,所有分片的主福本都运行在set主节点呢","like_count":2,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506142,"discussion_content":"这是由单体数据库的主从复制机制决定的，无论哪种策略，都是以节点为单位的，从节点不能提供确保数据一致性的服务。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601278857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243435,"user_name":"Geek_4e4b8b","can_delete":false,"product_type":"c1","uid":1641027,"ip_address":"","ucode":"76AF179BCD9068","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqZCrVvIxvzSrvmoJAa3pTNGDabbq2ssvc8Z8jfGKKJiaNlNEm67BfTdfN0Bq2ypNvByHiboibpOyQBA/132","comment_is_top":false,"comment_ctime":1598105442,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5893072738","product_id":100057401,"comment_content":"作者可以研究下mongodb的hash分片，还是挺巧妙的，他的算法依赖的应该不是节点数，而是跟数据的chunk数相关，这样增减节点，只是涉及chunk的移动，不会大面积做全部数据的重平衡。当然算法如果仅仅只是chunk数相关，那chunk数变化就会触发算法变化，所以应该是做了优化的，保证chunk的分裂只会影响分裂chunk的数据移动。","like_count":2},{"had_liked":false,"id":243125,"user_name":"游弋云端","can_delete":false,"product_type":"c1","uid":1208637,"ip_address":"","ucode":"A960E8F5AA25B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/71/3d/da8dc880.jpg","comment_is_top":false,"comment_ctime":1597973007,"is_pvip":false,"replies":[{"id":"89880","content":"Hash分片确实是无主架构常采用的一种方式，不过CockroachDB的Range分片也是一个不错的思路","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598409541,"ip_address":"","comment_id":243125,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5892940303","product_id":100057401,"comment_content":"元数据集中存储，特别是能用全内存性能最好，但可靠性不足，一般做HA;或者元数据可以做一致性Hash来分片打散，个人认为Range不适合元数据，变化了数据位置不好计算。","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504187,"discussion_content":"Hash分片确实是无主架构常采用的一种方式，不过CockroachDB的Range分片也是一个不错的思路","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598409541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336851,"user_name":"张可夫斯基","can_delete":false,"product_type":"c1","uid":1076487,"ip_address":"","ucode":"3B8DF6D98583F2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIKoEicqUZTJly55qoUXRmK4wia7YbnibsMncJaO6tKgKAQNJRfpMsibvfeiaukIibsCsuaic8QjQ3gOoTGA/132","comment_is_top":false,"comment_ctime":1646399569,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646399569","product_id":100057401,"comment_content":"---原文<br>从架构设计角度看，Group 比 Set 更具优势，原因主要有两个方面。首先，Group 的高可靠单元更小，出现故障时影响的范围就更小，系统整体的可靠性就更高。其次，在主机房范围内，Group 的主副本可以在所有节点上运行，资源可以得到最大化使用，而 Set 模式下，占大多数的备节点是不提供有效服务的，资源白白浪费掉。<br><br>--问题<br><br>（这里可以斟酌一下，我们将海量数据划为不同的分片，每个分片使用Set来存储还是使用Group来存储在资源的使用上看是没有多大区别的，区别的是Set使用半同步来保证数据一致性，Group基于Raft保证数据一致性。 如果PGXC的所有分片主副本必须运行在Set的主节点上，那么它的写性能就是单机性能了。）","like_count":0},{"had_liked":false,"id":335900,"user_name":"阿白","can_delete":false,"product_type":"c1","uid":2151479,"ip_address":"","ucode":"48D1F8027B8DB0","user_header":"https://static001.geekbang.org/account/avatar/00/20/d4/37/3c179df6.jpg","comment_is_top":false,"comment_ctime":1645760933,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645760933","product_id":100057401,"comment_content":"总结一下hash分片, 其实有两类分片:<br>1.根据数据节点个数进行分片，node_id = hash(key) % 节点个数 ，上面介绍了.<br>2.在node上增加一层 chunk(redis-cluster叫slot)，这种典型的是redis-cluster，slot里的数据可以移动到不同的node上.","like_count":0},{"had_liked":false,"id":334146,"user_name":"xxx","can_delete":false,"product_type":"c1","uid":1096652,"ip_address":"","ucode":"E79CEA70430449","user_header":"https://static001.geekbang.org/account/avatar/00/10/bb/cc/fac12364.jpg","comment_is_top":false,"comment_ctime":1644764338,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644764338","product_id":100057401,"comment_content":"这个问题很重要，老师是高手。","like_count":0},{"had_liked":false,"id":330252,"user_name":"暴富","can_delete":false,"product_type":"c1","uid":2837106,"ip_address":"","ucode":"83BF36900D421D","user_header":"https://static001.geekbang.org/account/avatar/00/2b/4a/72/e39f3bc7.jpg","comment_is_top":false,"comment_ctime":1641883603,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1641883603","product_id":100057401,"comment_content":"尝试回答一下思考题，在分布式存储系统中一般都会有一个专门管理元数据的节点，这个节点可以用来存储动态变化的Range分片以及其他的元数据。这个管理元数据的节点在不同的分布式存储系统中使用的中间件都是不同的，有的是自己实现一套简单的强一致性kv系统（一般是通过Raft或者Paxos来保证数据的一致性），有的是直接复用已有的分布式协调系统（zookeeper，etcd等等）","like_count":1},{"had_liked":false,"id":326270,"user_name":"杜思奇","can_delete":false,"product_type":"c1","uid":2865281,"ip_address":"","ucode":"390D2D5045AE95","user_header":"https://static001.geekbang.org/account/avatar/00/2b/b8/81/a0afe928.jpg","comment_is_top":false,"comment_ctime":1639454798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639454798","product_id":100057401,"comment_content":"Teradata利用主索引求hash值，将数据分布到不同的AMP上。而GaussDB(DWS)是对主键求hash","like_count":0},{"had_liked":false,"id":301687,"user_name":"Geek_c39fbe","can_delete":false,"product_type":"c1","uid":1347741,"ip_address":"","ucode":"18972401113267","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJMsZRXU5AAdOQCpPZmowTqyBcibQWjEKssEL3LNq97JNaqHAceCsiadmMgRl8d9PZg3OsOk9bibAlew/132","comment_is_top":false,"comment_ctime":1625811520,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1625811520","product_id":100057401,"comment_content":"本章的range分片是不是比较适合number类型的，例子中的按照北京、上海这种地区进行分片，怎么进行range分片？","like_count":0,"discussions":[{"author":{"id":1254213,"avatar":"https://static001.geekbang.org/account/avatar/00/13/23/45/3addffe7.jpg","nickname":"brv","note":"","ucode":"DD94D8C2085EAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588301,"discussion_content":"地区这种，应该有一个对应的code_id,是不是code_id相近的可以划分到一个分片上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663657564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253623,"user_name":"楚翔style","can_delete":false,"product_type":"c1","uid":1174846,"ip_address":"","ucode":"E715F82C34A9AA","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/3e/c1725237.jpg","comment_is_top":false,"comment_ctime":1602814060,"is_pvip":false,"replies":[{"id":"97597","content":"这里只是举例，数量要由实现的具体算法控制","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1608517631,"ip_address":"","comment_id":253623,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1602814060","product_id":100057401,"comment_content":"hash环那里,A(0-3)表示只能放3个hash值吗?这个区间可以随意设置吗?","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507128,"discussion_content":"这里只是举例，数量要由实现的具体算法控制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608517631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249581,"user_name":"余学文","can_delete":false,"product_type":"c1","uid":1114284,"ip_address":"","ucode":"CCC7034351929B","user_header":"https://static001.geekbang.org/account/avatar/00/11/00/ac/614b8eb2.jpg","comment_is_top":false,"comment_ctime":1600698048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600698048","product_id":100057401,"comment_content":"请教老师一个问题，newsql的复制组如果将多副本存储在不同的机房，理论上是否可以实现数据库的异地多活，这会存在什么问题？","like_count":0},{"had_liked":false,"id":243118,"user_name":"权","can_delete":false,"product_type":"c1","uid":1251996,"ip_address":"","ucode":"BB608E9341FCD4","user_header":"https://static001.geekbang.org/account/avatar/00/13/1a/9c/082cf625.jpg","comment_is_top":false,"comment_ctime":1597971729,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1597971729","product_id":100057401,"comment_content":"es的，ceph的分片机制也是类似，ceph有自动rebalance,es貌似要手动","like_count":0,"discussions":[{"author":{"id":1187478,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1e/96/c735ad6b.jpg","nickname":"滩涂曳尾","note":"","ucode":"40F650F2A419D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553495,"discussion_content":"是啊，es是hash分片的，要搞成自动分片调度和分裂合并，还得改成range才行。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645931428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1050917,"avatar":"https://static001.geekbang.org/account/avatar/00/10/09/25/2db95c79.jpg","nickname":"杨赛军","note":"","ucode":"12F314F9E6F158","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359234,"discussion_content":"Range的好处还有一个就是可以尽量利用系统缓存，连续的数据在同一个区域，参考rocks db","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616147362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}