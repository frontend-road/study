{"id":165765,"title":"23 | RPC框架：10万QPS下如何实现毫秒级的服务调用？","content":"<p>你好，我是唐扬。</p><p>在<a href=\"https://time.geekbang.org/column/article/164025\">21讲</a>和<a href=\"https://time.geekbang.org/column/article/164710\">22讲</a>中，你的团队已经决定对垂直电商系统做服务化拆分，以便解决扩展性和研发成本高的问题。与此同时，你们在不断学习的过程中还发现系统做了服务化拆分之后会引入一些新的问题，这些问题我在上节课提到过，归纳起来主要是两点：</p><ul>\n<li>服务拆分单独部署后，引入的服务跨网络通信的问题；</li>\n<li>在拆分成多个小服务之后，服务如何治理的问题。</li>\n</ul><p>如果想要解决这两方面问题，你需要了解微服务化所需要的中间件的基本原理和使用技巧，那么本节课，我会带你掌握解决第一个问题的核心组件：<strong>RPC框架。</strong></p><p><strong>来思考这样一个场景：</strong>你的垂直电商系统的QPS已经达到了每秒2万次，在做了服务化拆分之后，由于我们把业务逻辑都拆分到了单独部署的服务中，那么假设你在完成一次完整的请求时需要调用4～5次服务，计算下来，RPC服务需要承载大概每秒10万次的请求。而你该如何设计RPC框架承载如此大的请求量呢？我建议你：</p><ul>\n<li>选择合适的网络模型，有针对性地调整网络参数优化网络传输性能；</li>\n<li>选择合适的序列化方式，以提升封包、解包的性能。</li>\n</ul><p>接下来我从原理出发，让你对于RPC有一个理性的认识，这样你在设计RPC框架时就可以清晰地知道自己的设计目标是什么了。</p><h2>你所知道的RPC</h2><!-- [[[read_end]]] --><p>说到RPC（Remote Procedure Call，远程过程调用），你不会陌生，它指的是通过网络调用另一台计算机上部署服务的技术。</p><p>而RPC框架就封装了网络调用的细节，让你像调用本地服务一样调用远程部署的服务。你也许觉得只有像Dubbo、Grpc、Thrift这些新兴的框架才算是RPC框架，<strong>其实严格来说，你很早之前就接触到与RPC相关的技术了。</strong></p><p>比如，Java原生就有一套远程调用框架叫做RMI（Remote Method Invocation），它可以让Java程序通过网络调用另一台机器上的Java对象的方法。它是一种远程调用的方法，也是J2EE时代大名鼎鼎的EJB的实现基础。</p><p>时至今日，你仍然可以通过Spring的“RmiServiceExporter”将Spring管理的bean暴露成一个RMI的服务，从而继续使用RMI来实现跨进程的方法调用。之所以RMI没有像Dubbo、Grpc一样大火，<strong>是因为它存在着一些缺陷：</strong></p><ul>\n<li>\n<p>RMI使用专为Java远程对象定制的协议JRMP（Java Remote Messaging Protocol）进行通信，这限制了它的通信双方只能是Java语言的程序，无法实现跨语言通信；</p>\n</li>\n<li>\n<p>RMI使用Java原生的对象序列化方式，生成的字节数组空间较大，效率很差。</p>\n</li>\n</ul><p><strong>另一个你可能听过的技术是Web Service，</strong>它也可以认为是RPC的一种实现方式。它的优势是使用HTTP+SOAP协议，保证了调用可以跨语言、跨平台。只要你支持HTTP协议，可以解析XML，那么就能够使用Web Service。在我看来，由于它使用XML封装数据，数据包大，性能还是比较差。</p><p><strong>借上面几个例子我主要是想告诉你，</strong>RPC并不是互联网时代的产物，也不是服务化之后才衍生出来的技术，而是一种规范，只要是封装了网络调用的细节能够实现远程调用其他服务，就可以算作是一种RPC技术了。</p><p><strong>那么你的垂直电商项目在使用RPC框架之后会产生什么变化呢？</strong></p><p>在我看来，在性能上的变化是不可忽视的，<strong>我给你举个例子。</strong> 比方说，你的电商系统中商品详情页面需要商品数据、评论数据还有店铺数据，如果在一体化的架构中，你只需要从商品库、评论库和店铺库获取数据就可以了，不考虑缓存的情况下有三次网络请求。</p><p>但是如果独立出商品服务、评论服务和店铺服务之后，那么就需要分别调用这三个服务，而这三个服务又会分别调用各自的数据库，这就是六次网络请求。如果你服务拆分得更细粒度，那么多出的网络调用就会越多，请求的延迟就会更长，而这就是你为了提升系统的扩展性在性能上所付出的代价。</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/ce/1dba9b34e2973ec185b353becfc64fce.jpg?wh=1142*392\" alt=\"\"></p><p>那么我们要如何优化RPC的性能，从而尽量减少网络调用对于性能的影响呢？在这里，你首先需要了解一次RPC的调用都经过了哪些步骤，因为这样你才可以针对这些步骤中可能存在的性能瓶颈点提出优化方案。<strong>步骤如下：</strong></p><ul>\n<li>\n<p>在一次RPC调用过程中，客户端首先会将调用的类名、方法名、参数名、参数值等信息，序列化成二进制流；</p>\n</li>\n<li>\n<p>然后客户端将二进制流通过网络发送给服务端；</p>\n</li>\n<li>\n<p>服务端接收到二进制流之后将它反序列化，得到需要调用的类名、方法名、参数名和参数值，再通过动态代理的方式调用对应的方法得到返回值；</p>\n</li>\n<li>\n<p>服务端将返回值序列化，再通过网络发送给客户端；</p>\n</li>\n<li>\n<p>客户端对结果反序列化之后，就可以得到调用的结果了。</p>\n</li>\n</ul><p><strong>过程图如下：</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/f9/3e/f98bd80af8a4e7258251db1084e0383e.jpg?wh=1142*330\" alt=\"\"></p><p>从这张图中你可以看到网络传输的过程，将请求序列化和反序列化的过程， 所以如果要提升RPC框架的性能，需要从<strong>网络传输和序列化</strong>两方面来优化。</p><h2>如何提升网络传输性能</h2><p>在网络传输优化中，你首先要做的是选择一种高性能的I/O模型。所谓I/O模型，就是我们处理I/O的方式。而一般单次I/O请求会分为两个阶段，每个阶段对于I/O的处理方式是不同的。</p><p><strong>首先，I/O会经历一个等待资源的阶段，</strong>比方说，等待网络传输数据可用，在这个过程中我们对I/O会有两种处理方式：</p><ul>\n<li>阻塞。指的是在数据不可用时I/O请求一直阻塞，直到数据返回；</li>\n<li>非阻塞。指的是数据不可用时I/O请求立即返回，直到被通知资源可用为止。</li>\n</ul><p><strong>然后是使用资源的阶段，</strong>比如说从网络上接收到数据，并且拷贝到应用程序的缓冲区里面。在这个阶段我们也会有两种处理方式：</p><ul>\n<li>同步处理。指的是I/O请求在读取或者写入数据时会阻塞，直到读取或者写入数据完成；</li>\n<li>异步处理。指的是I/O请求在读取或者写入数据时立即返回，当操作系统处理完成I/O请求并且将数据拷贝到用户提供的缓冲区后，再通知应用I/O请求执行完成。</li>\n</ul><p>将这两个阶段的四种处理方式做一些排列组合，再做一些补充，就得到了我们常见的五种I/O模型：</p><ul>\n<li>同步阻塞I/O；</li>\n<li>同步非阻塞I/O；</li>\n<li>同步多路I/O复用；</li>\n<li>信号驱动I/O；</li>\n<li>异步I/O。</li>\n</ul><p>你需要理解这五种I/O模型的区别和特点，不过在理解上你可能会有些难度，所以我来做个比喻方便你理解。</p><p>我们把I/O过程比喻成烧水倒水的过程，等待资源（就是烧水的过程），使用资源（就是倒水的过程）：</p><ul>\n<li>\n<p>如果你站在灶台边上一直等着（等待资源）水烧开，然后倒水（使用资源），那么就是同步阻塞I/O；</p>\n</li>\n<li>\n<p>如果你偷点儿懒，在烧水的时候躺在沙发上看会儿电视（不再时时刻刻等待资源），但是还是要时不时地去看看水开了没有，一旦水开了，马上去倒水（使用资源），那么这就是同步非阻塞I/O；</p>\n</li>\n<li>\n<p>如果你想要洗澡，需要同时烧好多壶水，那你就在看电视的间隙去看看哪壶水开了（等待多个资源），哪一壶开了就先倒哪一壶，这样就加快了烧水的速度，这就是同步多路I/O复用；</p>\n</li>\n<li>\n<p>不过你发现自己总是跑厨房去看水开了没，太累了，于是你考虑给你的水壶加一个报警器（信号），只要水开了就马上去倒水，这就是信号驱动I/O；</p>\n</li>\n<li>\n<p>最后一种就高级了，你发明了一个智能水壶，在水烧好后自动就可以把水倒好，这就是异步I/O。</p>\n</li>\n</ul><p>这五种I/O模型中最被广泛使用的是<strong>多路I/O复用，</strong>Linux系统中的select、epoll等系统调用都是支持多路I/O复用模型的，Java中的高性能网络框架Netty默认也是使用这种模型。你可以选择它。</p><p>选择好了一种高性能的I/O模型，是不是就能实现数据在网络上的高效传输呢？其实并没有那么简单，网络性能的调优涉及很多方面，<strong>其中不可忽视的一项就是网络参数的调优，</strong>接下来我带你了解其中一个典型例子。当然，你可以结合网络基础知识以及成熟RPC框架（比如Dubbo）的源码来深入了解网络参数调优的方方面面。</p><p><strong>在之前的项目中，</strong>我的团队曾经写过一个简单的RPC通信框架。在进行测试的时候发现远程调用一个空业务逻辑的方法时，平均响应时间居然可以到几十毫秒，这明显不符合我们的预期，在我们看来，运行一个空的方法应该在1毫秒之内可以返回。于是，我先在测试的时候使用tcpdump抓了包，发现一次请求的ACK包竟然要经过40ms才返回。在网上google了一下原因，发现和一个叫做tcp_nodelay的参数有关。<strong>这个参数是什么作用呢？</strong></p><p>TCP协议的包头有20字节，IP协议的包头也有20字节，如果仅仅传输1字节的数据在网络上传输的就有20 + 20 + 1 = 41字节，其中真正有用的数据只有1个字节，这对效率和带宽是极大的浪费。所以在1984年的时候，John Nagle提出了以他的名字命名的Nagle`s算法，他希望：</p><blockquote>\n<p>如果是连续的小数据包，大小没有一个MSS（Maximum Segment<br>\nSize，最大分段大小），并且还没有收到之前发送的数据包的Ack信息，那么这些小数据包就会在发送端暂存起来，直到小数据包累积到一个MSS，或者收到一个Ack为止。</p>\n</blockquote><p>这原本是为了减少不必要的网络传输，但是如果接收端开启了DelayedACK（延迟ACK的发送，这样可以合并多个ACK，提升网络传输效率），那就会发生发送端发送第一个数据包后接收端没有返回ACK，这时发送端发送了第二个数据包，因为Nagle`s算法的存在，并且第一个发送包的ACK还没有返回，所以第二个包会暂存起来。而DelayedACK的超时时间默认是40ms，所以一旦到了40ms，接收端回给发送端ACK，那么发送端才会发送第二个包，这样就增加了延迟。</p><p><strong>解决的方式非常简单：</strong>只要在Socket上开启tcp_nodelay就好了，这个参数关闭了Nagle`s算法，这样发送端就不需要等到上一个发送包的ACK返回直接发送新的数据包就好了。这对于强网络交互的场景来说非常的适用，基本上，如果你要自己实现一套网络框架，tcp_nodelay这个参数最好是要开启的。</p><h2>选择合适的序列化方式</h2><p><strong>在对网络数据传输完成调优之后，另外一个需要关注的点就是数据的序列化和反序列化。</strong>通常所说的序列化是将传输对象转换成二进制串的过程，而反序列化则是相反的动作，是将二进制串转换成对象的过程。</p><p>从上面的RPC调用过程中你可以看到，一次RPC调用需要经历两次数据序列化的过程和两次数据反序列化的过程，可见它们对于RPC的性能影响是很大的，<strong>那么我们在选择序列化方式的时候需要考虑哪些因素呢？</strong></p><p>首先需要考虑的肯定是性能嘛，性能包括时间上的开销和空间上的开销，时间上的开销就是序列化和反序列化的速度，这是显而易见需要重点考虑的，而空间上的开销则是序列化后的二进制串的大小，过大的二进制串也会占据传输带宽影响传输效率。</p><p>除去性能之外，我们需要考虑的是它是否可以跨语言、跨平台，这一点也非常重要，因为一般的公司的技术体系都不是单一的，使用的语言也不是单一的，那么如果你的RPC框架中传输的数据只能被一种语言解析，这无疑限制了框架的使用。</p><p>另外，扩展性也是一个需要考虑的重点问题。你想想，如果对象增加了一个字段就会造成传输协议的不兼容，导致服务调用失败，这会是多么可怕的事情。</p><p>综合上面的几个考虑点，在我看来，<strong>我们的序列化备选方案主要有以下几种：</strong></p><p>首先是大家熟知的JSON，它起源于JavaScript是一种最广泛使用的序列化协议，它的优势简单易用，同时在性能上相比XML有比较大的优势。</p><p>另外的Thrift和Protobuf都是需要引入IDL（Interface description language）的，也就是需要按照约定的语法写一个IDL文件，然后通过特定的编译器将它转换成各语言对应的代码，从而实现跨语言的特点。</p><p><strong>Thrift</strong>是Facebook开源的高性能的序列化协议，也是一个轻量级的RPC框架；<strong>Protobuf</strong>是谷歌开源的序列化协议。它们的共同特点是无论在空间上还是时间上都有着很高的性能，缺点就是由于IDL存在带来一些使用上的不方便。</p><p>那么你要如何选择这几种序列化协议呢？<strong>这里我给你几点建议：</strong></p><ul>\n<li>\n<p>如果对于性能要求不高，在传输数据占用带宽不大的场景下可以使用JSON作为序列化协议；</p>\n</li>\n<li>\n<p>如果对于性能要求比较高，那么使用Thrift或者Protobuf都可以。而Thrift提供了配套的RPC框架，所以想要一体化的解决方案，你可以优先考虑Thrift；</p>\n</li>\n<li>\n<p>在一些存储的场景下，比如说你的缓存中存储的数据占用空间较大，那么你可以考虑使用Protobuf替换JSON作为存储数据的序列化方式。</p>\n</li>\n</ul><h2>课程小结</h2><p>为了优化RPC框架的性能，本节课我带你了解了网络I/O模型和序列化方式的选择，它们是实现高并发RPC框架的要素，总结起来有三个要点：</p><ol>\n<li>\n<p>选择高性能的I/O模型，这里我推荐使用同步多路I/O复用模型；</p>\n</li>\n<li>\n<p>调试网络参数，这里面有一些经验值的推荐。比如将tcp_nodelay设置为true，也有一些参数需要在运行中来调试，比如接受缓冲区和发送缓冲区的大小，客户端连接请求缓冲队列的大小（back log）等等；</p>\n</li>\n<li>\n<p>序列化协议依据具体业务来选择。如果对性能要求不高可以选择JSON，否则可以从Thrift和Protobuf中选择其一。</p>\n</li>\n</ol><p>在学习本节课的过程中，我建议你阅读一下成熟的RPC框架的源代码。比如阿里开源的Dubbo、微博的Motan等等，理解它们的实现原理和细节，这样你会更有信心维护好你的微服务系统；同时你也可以从优秀的代码中学习到代码设计的技巧，比如说Dubbo对于RPC的抽象，SPI扩展点的设计，这样可以有助你提升代码能力。</p><p>当然了，本节课我不仅仅想让你了解RPC框架实现的一些原理，更想让你了解在做网络编程时需要考虑哪些关键点，这样你在设计此类型的系统时就会有一些考虑的方向和思路了。</p><h2>一课一思</h2><p>你在实际的工作中可能已经使用过一些RPC框架，那么结合你的实际经验，可以和我说说在RPC框架使用过程中，遇到了哪些问题吗？又是如何排查和解决的呢？欢迎在留言区与我分享你的经验。</p><p>最后，感谢你的阅读，如果这篇文章让你有所收获，也欢迎你将它分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"22 | 微服务架构：微服务化后系统架构要如何改造？","id":164710},"right":{"article_title":"24 | 注册中心：分布式系统如何寻址？","id":167151}},"comments":[{"had_liked":false,"id":152131,"user_name":"陈靖","can_delete":false,"product_type":"c1","uid":1147418,"ip_address":"","ucode":"8C9596A54DB5C8","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","comment_is_top":false,"comment_ctime":1573888307,"is_pvip":false,"replies":[{"id":"58712","content":"说的没错","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1574121210,"ip_address":"","comment_id":152131,"utype":1}],"discussion_count":7,"race_medal":0,"score":"194847416627","product_id":100035801,"comment_content":"先把单服务优化到极致，比一来就上各种乱七八糟的分布式框架靠谱的多","like_count":46,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474724,"discussion_content":"说的没错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574121210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006864,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/10/0acf7cbc.jpg","nickname":"Ryan-Hou","note":"","ucode":"5B703C1E1596A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":119050,"discussion_content":"不合理的拆分早晚还会再合并回来…别问我怎么知道的……","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1578212237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1125722,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2d/5a/d965c147.jpg","nickname":"wangbo","note":"","ucode":"3F0C9C320F0A1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53662,"discussion_content":"我们来了个沙雕组长，一来就把我们项目拆分，导致各种问题","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1574205810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023959,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9f/d7/18ee8352.jpg","nickname":"超群","note":"","ucode":"365D7F3A3BD73E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52283,"discussion_content":"老兄这是真知灼见啊","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574034684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1596920,"avatar":"https://static001.geekbang.org/account/avatar/00/18/5d/f8/7de2c1cc.jpg","nickname":"星空123","note":"","ucode":"E998A7C585671B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51807,"discussion_content":"单服务如果都没优化到极致，搞分布式问题会更多","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1573954994,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2312464,"avatar":"https://static001.geekbang.org/account/avatar/00/23/49/10/9f702778.jpg","nickname":"积极","note":"","ucode":"ACED706363019C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372080,"discussion_content":"太对了 一家小公司一上来面试就问分布式事务 我猜他们服务搞太多了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620179237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1097416,"avatar":"https://static001.geekbang.org/account/avatar/00/10/be/c8/7c5f324f.jpg","nickname":"港岛妹夫","note":"","ucode":"9F6AAA29B60D8F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53267,"discussion_content":"简直不能再赞同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574152298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152102,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1573878576,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"113243028272","product_id":100035801,"comment_content":"其实tcp_nodelay这问题的原理挺简单的，但很多教程就是把简单问题说得复杂了。作者这种实战派讲解的就简洁易懂","like_count":27},{"had_liked":false,"id":164580,"user_name":"长期规划","can_delete":false,"product_type":"c1","uid":1019332,"ip_address":"","ucode":"5EF65E9115834B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/c4/6f97daea.jpg","comment_is_top":false,"comment_ctime":1577031792,"is_pvip":false,"replies":[{"id":"63058","content":"RPC使用二进制协议应该是国内互联网公司被dubbo教育的结果","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1577240674,"ip_address":"","comment_id":164580,"utype":1}],"discussion_count":1,"race_medal":0,"score":"83181410416","product_id":100035801,"comment_content":"之前搞不懂为什么要搞RPC框架，后来才知道原来还是因为性能问题。我感觉RPC是随着高并发以及系统服务化之后才有了大范围的使用需求。<br>系统服务化后，一个前端访问会涉及到好多个后端的服务，如果服务间还是HTTP，那高并时，会成为性能的瓶颈之一。<br>从可维护性，可读性上来说，我感觉RESTful的HTTP协议比RPC更好。但从性能上来说，RPC更好","like_count":20,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478823,"discussion_content":"RPC使用二进制协议应该是国内互联网公司被dubbo教育的结果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577240674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151884,"user_name":"大魔王汪汪","can_delete":false,"product_type":"c1","uid":1010680,"ip_address":"","ucode":"4B205CB52FC95F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/f8/b4da7936.jpg","comment_is_top":false,"comment_ctime":1573806079,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"31638577151","product_id":100035801,"comment_content":"为什么信号量方式和异步io没有普及呢？","like_count":6,"discussions":[{"author":{"id":1123043,"avatar":"https://static001.geekbang.org/account/avatar/00/11/22/e3/510b69f9.jpg","nickname":"benny","note":"","ucode":"E2F30AF0C808D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":168293,"discussion_content":"信号量也属于异步IO，但是linux支持的不好，windows实现了真正的异步IO，但是用windows作服务器的太少。。。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1581570337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1274495,"avatar":"https://static001.geekbang.org/account/avatar/00/13/72/7f/5da093c5.jpg","nickname":"水目沾","note":"","ucode":"FDD1D15C277D58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53004,"discussion_content":"信号量方式缺陷比较多\n异步io是目前还不成熟：异步会使代码成倍复杂，但是提升的性能并不那么明显。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574123261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/81/ad80f427.jpg","nickname":"Lane","note":"","ucode":"F70459D1BBD9F4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":159308,"discussion_content":"因为linux没有实现真正意义上的异步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580661348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048661,"avatar":"https://static001.geekbang.org/account/avatar/00/10/00/55/3f0bc345.jpg","nickname":"Ghost","note":"","ucode":"CC6FD1D460ED10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143358,"discussion_content":"Netty的很多的设计已经媲美异步IO了,比如ChannelFuture 可以添加listener的方式，完成类似ComplationHandler的操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579502631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1022247,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","nickname":"阿卡牛","note":"","ucode":"0BC43A904C3199","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52526,"discussion_content":"异步I/O已经开始普及了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574061796,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1022247,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","nickname":"阿卡牛","note":"","ucode":"0BC43A904C3199","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364781,"discussion_content":"你说的应该是函数式编程(functional)和异步交互(Future)吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617604666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":52526,"ip_address":""},"score":364781,"extra":""}]}]},{"had_liked":false,"id":152022,"user_name":"飞翔","can_delete":false,"product_type":"c1","uid":1184658,"ip_address":"","ucode":"0641211EE9DA5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/13/92/0b4c8e30.jpg","comment_is_top":false,"comment_ctime":1573837058,"is_pvip":false,"discussion_count":2,"race_medal":1,"score":"23048673538","product_id":100035801,"comment_content":"公司自己实现的rpc框架闭源，我们内部人员都看不到代码😓","like_count":5,"discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309380,"discussion_content":"可能是拷贝了一份开源代码","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601276461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048661,"avatar":"https://static001.geekbang.org/account/avatar/00/10/00/55/3f0bc345.jpg","nickname":"Ghost","note":"","ucode":"CC6FD1D460ED10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143360,"discussion_content":"自己写一个呗  老师就差没给你写代码  别的都介绍了 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579502698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151945,"user_name":"程序水果宝","can_delete":false,"product_type":"c1","uid":1371633,"ip_address":"","ucode":"1700DDFE073A56","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqyicZYyW7ahaXgXUD8ZAS8x0t8jx5rYLhwbUCJiawRepKIZfsLdkxdQ9XQMo99c1UDibmNVfFnAqwPg/132","comment_is_top":false,"comment_ctime":1573819531,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18753688715","product_id":100035801,"comment_content":"为啥RPC框架在选择高性能的 I&#47;O 模型时不优先使用异步IO多路复用呢，异步IO多路复用的性能不是更好吗？","like_count":4,"discussions":[{"author":{"id":1004116,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/52/54/abb7bfe3.jpg","nickname":"Leon Zhu","note":"","ucode":"D74D189C02A0DF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53148,"discussion_content":"那是因为 linux 下还没有比较成熟的 AIO 模型，windows 下有 IOCP 这样一个真正意义上的异步 I/O 模型。参考：https://www.quora.com/Why-doesnt-Linux-have-a-system-like-IOCP-or-Rio-does","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1574139218,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1596647,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Ir1EdhB29109UhH7SGnVLEfEcKcGPDViaTpbS7BYXngqFghThYc093oFCTwsTLjVR7nHPokXJIPm7rbmPAU7TdQ/132","nickname":"Geek_33c134","note":"","ucode":"C5BBA83AABD2AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53308,"discussion_content":"这里的同步I/O模型指的是接受事件是同步，至于执行事件的相应内容都会放进线程池里面来执行的，也就是异步的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574158524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189579,"user_name":"芳菲菲兮满堂","can_delete":false,"product_type":"c1","uid":1000860,"ip_address":"","ucode":"C8D89999C201F1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/45/9c/5b06d143.jpg","comment_is_top":false,"comment_ctime":1584530786,"is_pvip":true,"replies":[{"id":"73091","content":"两个层面的东西吧，rpc是思想，http是具体协议","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1584590491,"ip_address":"","comment_id":189579,"utype":1}],"discussion_count":3,"race_medal":1,"score":"14469432674","product_id":100035801,"comment_content":"一直不太理解rpc和http之间差别有多大 为什么要用rpc呢","like_count":3,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487737,"discussion_content":"两个层面的东西吧，rpc是思想，http是具体协议","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584590491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1033240,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkwbyTYtSCx6Qc7cQPnnRWv38Jybh3etziaPmuP8gHcgS6FMxcdftrKgWiamH6fc2iciaicDKDVEwcEibQ/132","nickname":"sami","note":"","ucode":"9A66FCA00D8A37","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208625,"discussion_content":"性能差异吧，像dubbo是用tcp来传输数据的，http是在tcp的上层加了一些协议","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584567207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1612910,"avatar":"https://static001.geekbang.org/account/avatar/00/18/9c/6e/01b4d5d2.jpg","nickname":"liupan","note":"","ucode":"C6C7C48BCCAE12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1033240,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkwbyTYtSCx6Qc7cQPnnRWv38Jybh3etziaPmuP8gHcgS6FMxcdftrKgWiamH6fc2iciaicDKDVEwcEibQ/132","nickname":"sami","note":"","ucode":"9A66FCA00D8A37","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":591620,"discussion_content":"http3.0和rpc差不多了吧，主要是序列化的时间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666708517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":208625,"ip_address":"广东"},"score":591620,"extra":""}]}]},{"had_liked":false,"id":151989,"user_name":"longslee","can_delete":false,"product_type":"c1","uid":1465986,"ip_address":"","ucode":"C24E32E5B1B6F5","user_header":"https://static001.geekbang.org/account/avatar/00/16/5e/82/438c8534.jpg","comment_is_top":false,"comment_ctime":1573829170,"is_pvip":false,"replies":[{"id":"58443","content":"广义上来看是算的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1573866860,"ip_address":"","comment_id":151989,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14458731058","product_id":100035801,"comment_content":"哈哈哈哈，我居然忘记了我还使用过WebService呢，好古老。<br>另外，如果系统交互间，纯使用 http RESTful 来调用，这算不算RPC呢","like_count":3,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474680,"discussion_content":"广义上来看是算的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573866860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1013283,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/76/23/31e5e984.jpg","nickname":"空知","note":"","ucode":"C448E98238DD36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":137186,"discussion_content":"现在跟银行对接还是走 web service啊....","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1579181529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","nickname":"梁中华","note":"","ucode":"52FE40242CBAD0","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":133793,"discussion_content":"以前还有一个XML RPC，WebService规范成熟之前的方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578989641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151882,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1573806065,"is_pvip":false,"replies":[{"id":"58454","content":"是有的，不过我不太熟悉<br>","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1573867419,"ip_address":"","comment_id":151882,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14458707953","product_id":100035801,"comment_content":"PRC框架只是针对java平台的吗?对于微软的.net平台有rpc框架吗？？","like_count":3,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474644,"discussion_content":"是有的，不过我不太熟悉\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573867419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1102656,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d3/40/0067d6db.jpg","nickname":"AKA三皮","note":"","ucode":"D3BC5C60025E9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54755,"discussion_content":".net core 3.0 已经支持grpc了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574312884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1023959,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9f/d7/18ee8352.jpg","nickname":"超群","note":"","ucode":"365D7F3A3BD73E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52284,"discussion_content":"gRpc支持csharp","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574034724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151680,"user_name":"魏春河","can_delete":false,"product_type":"c1","uid":1117048,"ip_address":"","ucode":"DDD2998C157639","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/78/22410c47.jpg","comment_is_top":false,"comment_ctime":1573778863,"is_pvip":false,"replies":[{"id":"58305","content":"就是苹果自带的keynote鸭~😉","user_name":"编辑回复","user_name_real":"朱会","uid":"1564447","ctime":1573781336,"ip_address":"","comment_id":151680,"utype":2}],"discussion_count":1,"race_medal":1,"score":"14458680751","product_id":100035801,"comment_content":"老师，您文章里面插图是用什么画的？就像RPC调用过程那张图","like_count":3,"discussions":[{"author":{"id":1564447,"avatar":"https://static001.geekbang.org/account/avatar/00/17/df/1f/650a1d51.jpg","nickname":"小白兔奶糖","note":"","ucode":"AD0B858CFD1304","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474574,"discussion_content":"就是苹果自带的keynote鸭~😉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573781336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229484,"user_name":"xiaochao321","can_delete":false,"product_type":"c1","uid":1083596,"ip_address":"","ucode":"8F5AC46CD9400C","user_header":"https://static001.geekbang.org/account/avatar/00/10/88/cc/11b10a6f.jpg","comment_is_top":false,"comment_ctime":1593011484,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"10182946076","product_id":100035801,"comment_content":"能详细讲解一下http和rpc两者区别么，面试被问到了，为什么一定要用rpc，http也可以实现呀","like_count":2,"discussions":[{"author":{"id":1146244,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7d/84/7ec46b3f.jpg","nickname":"阿庄","note":"","ucode":"F93635DE7D8293","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310583,"discussion_content":"一方面调用方便，rpc可以让你像调用本地方法一样调用远程服务，如obj.foo()。\n另一方面，rpc传输数据一般基于二进制，是结构化数据，数据占用空间小，传输快，读取数据也快，但没有可读性。http是在tcp的基础上实现的纯文本协议，可读性好但数据占用相对大，还要解析文本，所以性能相对差。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1601911821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2032840,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/04/c8/3c7af100.jpg","nickname":"Javatar","note":"","ucode":"E216645CDF632C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338276,"discussion_content":"http是基于TCP又包了一层，主要面向的是web；RPC的一般实现是直接基于TCP，比起HTTP效率更高, 因为传输的数据量更少，比如HTTP会有一大堆用不到的header，且是文本传输，而RPC可以直接传输二进制数据流。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1609229878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785464,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/3e/78/ab4f7cbb.jpg","nickname":"风","note":"","ucode":"521EA2C8F5AB58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319081,"discussion_content":"我理解是 rpc（Remote Procedure Call Protocol）远程过程调用协议， http也能实现远程调用，http只不过是rpc的其中一种实现方式，除了http还可以使用 socket 、rmi 只要能实现 远程过程调用 是rpc。至于调用方便的说法，只要通过合理的代码封装都可以实现像调用本地方法一样调用远程服务","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1603938246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290004,"discussion_content":"http其实是说了很多废话，废话多了性能就低~","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1594299176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210906,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1587864139,"is_pvip":false,"replies":[{"id":"78859","content":"写一个简单的RPC框架简单，周边的服务治理体系是关键","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1588070088,"ip_address":"","comment_id":210906,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10177798731","product_id":100035801,"comment_content":"自己写，造轮子研究学习OK，一般还是使用成熟的方案，这些基本会考虑，业务开发逻辑里怎么优化通常是个大头。比如：数据加解密、数据解压缩、业务逻辑IO和什么存储设备交互、日志怎么打印、业务逻辑的编写是否最优等？","like_count":3,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493145,"discussion_content":"写一个简单的RPC框架简单，周边的服务治理体系是关键","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588070088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183237,"user_name":"yuan","can_delete":false,"product_type":"c1","uid":1207302,"ip_address":"","ucode":"EA3D0573478EC7","user_header":"https://static001.geekbang.org/account/avatar/00/12/6c/06/2ac17d5a.jpg","comment_is_top":false,"comment_ctime":1582979521,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10172914113","product_id":100035801,"comment_content":"为什么常规RPC框架不使用异步IO 或者 信号驱动IO，偏偏选择IO多路复用这种IO模型呢？","like_count":2,"discussions":[{"author":{"id":1450462,"avatar":"https://static001.geekbang.org/account/avatar/00/16/21/de/c935d3bd.jpg","nickname":"文培","note":"","ucode":"D8BC9BD6F2B261","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538653,"discussion_content":"异步IO，那么也就是在数据使用阶段，进程不会挂起可以抢占cpu，而内核copy数据的时候也需要cpu，这就造成了进程和内核进行cpu的竞争，并且步调不一致了，某些情况下，性能反而不如同步，因此使用的人也少","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639473589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2586341,"avatar":"","nickname":"石头","note":"","ucode":"EB3C9A277C7B0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370015,"discussion_content":"生态问题吧，好比大家都用a，你非要用b，也可以，但是不好用\n异步也是可以用的，但是早期全是同步阻塞，逐步迭代到了同步非阻塞，再到同步多路io复用，生态也是跟着逐渐变得。例如说tomcat的网络io或者netty得，都在慢慢演进。不是一次性就到了异步多路io的。但是从原理上来说异步多路复用性能更好。\n哪天生态起来了，大家都不用同步而是用异步，或者未来再出现啥新的模型也不奇怪，都是在不断发展和迭代的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619251834,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152356,"user_name":"XD","can_delete":false,"product_type":"c1","uid":1079293,"ip_address":"","ucode":"DC9DCFB3841A4E","user_header":"https://static001.geekbang.org/account/avatar/00/10/77/fd/c6619535.jpg","comment_is_top":false,"comment_ctime":1573981889,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163916481","product_id":100035801,"comment_content":"论学好操作系统的重要性。。","like_count":2},{"had_liked":false,"id":152219,"user_name":"张德","can_delete":false,"product_type":"c1","uid":1101929,"ip_address":"","ucode":"31FE63E8725EFC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/69/5dbdc245.jpg","comment_is_top":false,"comment_ctime":1573918195,"is_pvip":false,"replies":[{"id":"58713","content":"dubbo协议是支持多语言的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1574121265,"ip_address":"","comment_id":152219,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10163852787","product_id":100035801,"comment_content":"老师为啥不推荐dubbo呢  难道是dubbo只支持java系统间的调用吗？？？","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474755,"discussion_content":"dubbo协议是支持多语言的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574121265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152679,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1574061905,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5869029201","product_id":100035801,"comment_content":"按照老师烧水的例子，明显应该还有个异步非阻塞I&#47;O多路复用模型？","like_count":1,"discussions":[{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364782,"discussion_content":"异步模型，所有事情都完成了，只需要发送一个完成的消息","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617604790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151806,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1573794980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868762276","product_id":100035801,"comment_content":"老师讲得不错。","like_count":1},{"had_liked":false,"id":151765,"user_name":"吃饭饭","can_delete":false,"product_type":"c1","uid":1231549,"ip_address":"","ucode":"95CFA07CDA2957","user_header":"https://static001.geekbang.org/account/avatar/00/12/ca/bd/a51ae4b2.jpg","comment_is_top":false,"comment_ctime":1573786866,"is_pvip":false,"replies":[{"id":"58452","content":"可以看看RPC成熟的代码，一般是关闭Nagle算法的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1573867362,"ip_address":"","comment_id":151765,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5868754162","product_id":100035801,"comment_content":"我感觉注册中心相当重要，序列化使用 Hession 也不错。文中提到建议关闭 Nagle 算法，但是我从其它地方看到是不建议这么做的，因为针对 Nagle 算法和延时 ACK 的优化已经非常成熟了，有可能在禁用 Nagle算法之后，性能问题反而更加严重","like_count":2,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474607,"discussion_content":"可以看看RPC成熟的代码，一般是关闭Nagle算法的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573867362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341062,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1649320500,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649320500","product_id":100035801,"comment_content":"http 算是rpc框架吗？","like_count":0},{"had_liked":false,"id":291279,"user_name":"积极","can_delete":false,"product_type":"c1","uid":2312464,"ip_address":"","ucode":"ACED706363019C","user_header":"https://static001.geekbang.org/account/avatar/00/23/49/10/9f702778.jpg","comment_is_top":false,"comment_ctime":1620179178,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620179178","product_id":100035801,"comment_content":"grpc","like_count":0},{"had_liked":false,"id":286808,"user_name":"夜辉","can_delete":false,"product_type":"c1","uid":1886331,"ip_address":"","ucode":"9421385F51FF9E","user_header":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","comment_is_top":false,"comment_ctime":1617605369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617605369","product_id":100035801,"comment_content":"而 Thrift 提供了配 套的 RPC 框架，所以想要一体化的解决方案，你可以优先考虑 Thrift<br><br>请问这里的一体化的解决方案是指什么呢？","like_count":0},{"had_liked":false,"id":197260,"user_name":"如歌","can_delete":false,"product_type":"c1","uid":1292419,"ip_address":"","ucode":"727C90CA52CD73","user_header":"https://static001.geekbang.org/account/avatar/00/13/b8/83/7c1ed918.jpg","comment_is_top":false,"comment_ctime":1585365898,"is_pvip":false,"replies":[{"id":"74922","content":"思路是一样的","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1585553386,"ip_address":"","comment_id":197260,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585365898","product_id":100035801,"comment_content":"从网络传输来优化，引出io复用，🙏，自然就想到来nginx 和 redis，老师对吗？","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489484,"discussion_content":"思路是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585553386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197091,"user_name":"如歌","can_delete":false,"product_type":"c1","uid":1292419,"ip_address":"","ucode":"727C90CA52CD73","user_header":"https://static001.geekbang.org/account/avatar/00/13/b8/83/7c1ed918.jpg","comment_is_top":false,"comment_ctime":1585357722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585357722","product_id":100035801,"comment_content":"io复用是提升性能的关键 一句话帮我解决了很多疑惑点","like_count":0},{"had_liked":false,"id":160560,"user_name":"张彰","can_delete":false,"product_type":"c1","uid":1631400,"ip_address":"","ucode":"F03E0585E60763","user_header":"https://static001.geekbang.org/account/avatar/00/18/e4/a8/0d8a9cd9.jpg","comment_is_top":false,"comment_ctime":1575974388,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575974388","product_id":100035801,"comment_content":"逻辑非常缜密！","like_count":0},{"had_liked":false,"id":155892,"user_name":"大魔王汪汪","can_delete":false,"product_type":"c1","uid":1010680,"ip_address":"","ucode":"4B205CB52FC95F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/f8/b4da7936.jpg","comment_is_top":false,"comment_ctime":1574775291,"is_pvip":false,"replies":[{"id":"60258","content":"这个说实话我没有试过~","user_name":"作者回复","user_name_real":"唐扬","uid":"1448977","ctime":1575016732,"ip_address":"","comment_id":155892,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574775291","product_id":100035801,"comment_content":"老师我想问下，rpc框架可以支持泛化调用，那么这种泛化调用和非泛化调用相比是否存在性能问题呢？因为非泛化调用的长链接可以在服务启动时完成建立，而泛化调用长链接调用只能在服务发起时建立，所以应该在链接建立这里耗费时间吧","like_count":0,"discussions":[{"author":{"id":1448977,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1c/11/4b45993d.jpg","nickname":"唐扬","note":"","ucode":"1AF4C4A4DBC6EF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475914,"discussion_content":"这个说实话我没有试过~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575016732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152263,"user_name":"星空123","can_delete":false,"product_type":"c1","uid":1596920,"ip_address":"","ucode":"E998A7C585671B","user_header":"https://static001.geekbang.org/account/avatar/00/18/5d/f8/7de2c1cc.jpg","comment_is_top":false,"comment_ctime":1573955030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573955030","product_id":100035801,"comment_content":"老师 棒棒哒","like_count":0},{"had_liked":false,"id":152107,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1573879853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573879853","product_id":100035801,"comment_content":"以前系统设计时候允许有空值，且不论这对数据库是否友好，就是在切换序列化框架时候就有问题，有的协议不存在空值这一概念。这就要求在设计时，之前两个服务之间的协议每个字段都要有默认值","like_count":0},{"had_liked":false,"id":151941,"user_name":"Geek_e986e3","can_delete":false,"product_type":"c1","uid":1642716,"ip_address":"","ucode":"EF53D2DEA59A8F","user_header":"","comment_is_top":false,"comment_ctime":1573818406,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573818406","product_id":100035801,"comment_content":"老师多路复用也可以用异步。不是很理解单独把异步领出来是什么意思。还有信号量 能举个代码中的例子吗？比如epoll select 这类。我感觉好像都需要信号通知。也可以用异步 所以有点不是很理解你说的五个网络模型","like_count":0},{"had_liked":false,"id":151788,"user_name":"海罗沃德","can_delete":false,"product_type":"c1","uid":1165364,"ip_address":"","ucode":"8704F1D6980FA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","comment_is_top":false,"comment_ctime":1573792386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573792386","product_id":100035801,"comment_content":"李玥老師的消息對列課程裡也介紹了各種RPC框架，還介紹了各種序列化方式","like_count":0}]}