{"id":286082,"title":"17 | 为什么CPU结构也会影响Redis的性能？","content":"<p>你好，我是蒋德钧。</p><p>很多人都认为Redis和CPU的关系很简单，就是Redis的线程在CPU上运行，CPU快，Redis处理请求的速度也很快。</p><p>这种认知其实是片面的。CPU的多核架构以及多CPU架构，也会影响到Redis的性能。如果不了解CPU对Redis的影响，在对Redis的性能进行调优时，就可能会遗漏一些调优方法，不能把Redis的性能发挥到极限。</p><p>今天，我们就来学习下目前主流服务器的CPU架构，以及基于CPU多核架构和多CPU架构优化Redis性能的方法。</p><h2>主流的CPU架构</h2><p>要了解CPU对Redis具体有什么影响，我们得先了解一下CPU架构。</p><p>一个CPU处理器中一般有多个运行核心，我们把一个运行核心称为一个物理核，每个物理核都可以运行应用程序。每个物理核都拥有私有的一级缓存（Level 1 cache，简称L1 cache），包括一级指令缓存和一级数据缓存，以及私有的二级缓存（Level 2 cache，简称L2 cache）。</p><p>这里提到了一个概念，就是物理核的私有缓存。它其实是指缓存空间只能被当前的这个物理核使用，其他的物理核无法对这个核的缓存空间进行数据存取。我们来看一下CPU物理核的架构。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/3a/c2d620c012a82e825570df631a7fbc3a.jpg?wh=2114*1167\" alt=\"\"></p><p>因为L1和L2缓存是每个物理核私有的，所以，当数据或指令保存在L1、L2缓存时，物理核访问它们的延迟不超过10纳秒，速度非常快。那么，如果Redis把要运行的指令或存取的数据保存在L1和L2缓存的话，就能高速地访问这些指令和数据。</p><!-- [[[read_end]]] --><p>但是，这些L1和L2缓存的大小受限于处理器的制造技术，一般只有KB级别，存不下太多的数据。如果L1、L2缓存中没有所需的数据，应用程序就需要访问内存来获取数据。而应用程序的访存延迟一般在百纳秒级别，是访问L1、L2缓存的延迟的近10倍，不可避免地会对性能造成影响。</p><p>所以，不同的物理核还会共享一个共同的三级缓存（Level 3 cache，简称为L3 cache）。L3缓存能够使用的存储资源比较多，所以一般比较大，能达到几MB到几十MB，这就能让应用程序缓存更多的数据。当L1、L2缓存中没有数据缓存时，可以访问L3，尽可能避免访问内存。</p><p>另外，现在主流的CPU处理器中，每个物理核通常都会运行两个超线程，也叫作逻辑核。同一个物理核的逻辑核会共享使用L1、L2缓存。</p><p>为了方便你理解，我用一张图展示一下物理核和逻辑核，以及一级、二级缓存的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/d9/09/d9689a38cbe67c3008d8ba99663c2f09.jpg?wh=3065*1633\" alt=\"\"></p><p>在主流的服务器上，一个CPU处理器会有10到20多个物理核。同时，为了提升服务器的处理能力，服务器上通常还会有多个CPU处理器（也称为多CPU Socket），每个处理器有自己的物理核（包括L1、L2缓存），L3缓存，以及连接的内存，同时，不同处理器间通过总线连接。</p><p>下图显示的就是多CPU Socket的架构，图中有两个Socket，每个Socket有两个物理核。</p><p><img src=\"https://static001.geekbang.org/resource/image/5c/3d/5ceb2ab6f61c064284c8f8811431bc3d.jpg?wh=3000*1252\" alt=\"\"></p><p><strong>在多CPU架构上，应用程序可以在不同的处理器上运行</strong>。在刚才的图中，Redis可以先在Socket  1上运行一段时间，然后再被调度到Socket  2上运行。</p><p>但是，有个地方需要你注意一下：如果应用程序先在一个Socket上运行，并且把数据保存到了内存，然后被调度到另一个Socket上运行，此时，应用程序再进行内存访问时，就需要访问之前Socket上连接的内存，这种访问属于<strong>远端内存访问</strong>。<strong>和访问Socket直接连接的内存相比，远端内存访问会增加应用程序的延迟。</strong></p><p>在多CPU架构下，一个应用程序访问所在Socket的本地内存和访问远端内存的延迟并不一致，所以，我们也把这个架构称为非统一内存访问架构（Non-Uniform Memory Access，NUMA架构）。</p><p>到这里，我们就知道了主流的CPU多核架构和多CPU架构，我们来简单总结下CPU架构对应用程序运行的影响。</p><ul>\n<li>L1、L2缓存中的指令和数据的访问速度很快，所以，充分利用L1、L2缓存，可以有效缩短应用程序的执行时间；</li>\n<li>在NUMA架构下，如果应用程序从一个Socket上调度到另一个Socket上，就可能会出现远端内存访问的情况，这会直接增加应用程序的执行时间。</li>\n</ul><p>接下来，我们就先来了解下CPU多核是如何影响Redis性能的。</p><h2>CPU多核对Redis性能的影响</h2><p>在一个CPU核上运行时，应用程序需要记录自身使用的软硬件资源信息（例如栈指针、CPU核的寄存器值等），我们把这些信息称为<strong>运行时信息</strong>。同时，应用程序访问最频繁的指令和数据还会被缓存到L1、L2缓存上，以便提升执行速度。</p><p>但是，在多核CPU的场景下，一旦应用程序需要在一个新的CPU核上运行，那么，运行时信息就需要重新加载到新的CPU核上。而且，新的CPU核的L1、L2缓存也需要重新加载数据和指令，这会导致程序的运行时间增加。</p><p>说到这儿，我想跟你分享一个我曾经在多核CPU环境下对Redis性能进行调优的案例。希望借助这个案例，帮你全方位地了解到多核CPU对Redis的性能的影响。</p><p>当时，我们的项目需求是要对Redis的99%尾延迟进行优化，要求GET尾延迟小于300微秒，PUT尾延迟小于500微秒。</p><p>可能有同学不太清楚99%尾延迟是啥，我先解释一下。我们把所有请求的处理延迟从小到大排个序，<strong>99%的请求延迟小于的值就是99%尾延迟</strong>。比如说，我们有1000个请求，假设按请求延迟从小到大排序后，第991个请求的延迟实测值是1ms，而前990个请求的延迟都小于1ms，所以，这里的99%尾延迟就是1ms。</p><p>刚开始的时候，我们使用GET/PUT复杂度为O(1)的String类型进行数据存取，同时关闭了RDB和AOF，而且，Redis实例中没有保存集合类型的其他数据，也就没有bigkey操作，避免了可能导致延迟增加的许多情况。</p><p>但是，即使这样，我们在一台有24个CPU核的服务器上运行Redis实例，GET和PUT的99%尾延迟分别是504微秒和1175微秒，明显大于我们设定的目标。</p><p>后来，我们仔细检测了Redis实例运行时的服务器CPU的状态指标值，这才发现，CPU的context switch次数比较多。</p><p>context switch是指线程的上下文切换，这里的上下文就是线程的运行时信息。在CPU多核的环境中，一个线程先在一个CPU核上运行，之后又切换到另一个CPU核上运行，这时就会发生context switch。</p><p>当context switch发生后，Redis主线程的运行时信息需要被重新加载到另一个CPU核上，而且，此时，另一个CPU核上的L1、L2缓存中，并没有Redis实例之前运行时频繁访问的指令和数据，所以，这些指令和数据都需要重新从L3缓存，甚至是内存中加载。这个重新加载的过程是需要花费一定时间的。而且，Redis实例需要等待这个重新加载的过程完成后，才能开始处理请求，所以，这也会导致一些请求的处理时间增加。</p><p>如果在CPU多核场景下，Redis实例被频繁调度到不同CPU核上运行的话，那么，对Redis实例的请求处理时间影响就更大了。<strong>每调度一次，一些请求就会受到运行时信息、指令和数据重新加载过程的影响，这就会导致某些请求的延迟明显高于其他请求</strong>。分析到这里，我们就知道了刚刚的例子中99%尾延迟的值始终降不下来的原因。</p><p>所以，我们要避免Redis总是在不同CPU核上来回调度执行。于是，我们尝试着把Redis实例和CPU核绑定了，让一个Redis实例固定运行在一个CPU核上。我们可以使用<strong>taskset命令</strong>把一个程序绑定在一个核上运行。</p><p>比如说，我们执行下面的命令，就把Redis实例绑在了0号核上，其中，“-c”选项用于设置要绑定的核编号。</p><pre><code>taskset -c 0 ./redis-server\n</code></pre><p>绑定以后，我们进行了测试。我们发现，Redis实例的GET和PUT的99%尾延迟一下子就分别降到了260微秒和482微秒，达到了我们期望的目标。</p><p>我们来看一下绑核前后的Redis的99%尾延迟。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/57/eb72b9f58052d6a6023d3e1dac522157.jpg?wh=2760*477\" alt=\"\"></p><p>可以看到，在CPU多核的环境下，通过绑定Redis实例和CPU核，可以有效降低Redis的尾延迟。当然，绑核不仅对降低尾延迟有好处，同样也能降低平均延迟、提升吞吐率，进而提升Redis性能。</p><p>接下来，我们再来看看多CPU架构，也就是NUMA架构，对Redis性能的影响。</p><h2>CPU的NUMA架构对Redis性能的影响</h2><p>在实际应用Redis时，我经常看到一种做法，为了提升Redis的网络性能，把操作系统的网络中断处理程序和CPU核绑定。这个做法可以避免网络中断处理程序在不同核上来回调度执行，的确能有效提升Redis的网络处理性能。</p><p>但是，网络中断程序是要和Redis实例进行网络数据交互的，一旦把网络中断程序绑核后，我们就需要注意Redis实例是绑在哪个核上了，这会关系到Redis访问网络数据的效率高低。</p><p>我们先来看下Redis实例和网络中断程序的数据交互：网络中断处理程序从网卡硬件中读取数据，并把数据写入到操作系统内核维护的一块内存缓冲区。内核会通过epoll机制触发事件，通知Redis实例，Redis实例再把数据从内核的内存缓冲区拷贝到自己的内存空间，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/87/d2/8753ce6985fd08bb9cf9a3813c8b2cd2.jpg?wh=2108*1295\" alt=\"\"></p><p>那么，在CPU的NUMA架构下，当网络中断处理程序、Redis实例分别和CPU核绑定后，就会有一个潜在的风险：<strong>如果网络中断处理程序和Redis实例各自所绑的CPU核不在同一个CPU Socket上，那么，Redis实例读取网络数据时，就需要跨CPU Socket访问内存，这个过程会花费较多时间。</strong></p><p>这么说可能有点抽象，我再借助一张图来解释下。</p><p><img src=\"https://static001.geekbang.org/resource/image/30/b0/30cd42yy86debc0eb6e7c5b069533ab0.jpg?wh=3000*1251\" alt=\"\"></p><p>可以看到，图中的网络中断处理程序被绑在了CPU Socket 1的某个核上，而Redis实例则被绑在了CPU Socket  2上。此时，网络中断处理程序读取到的网络数据，被保存在CPU Socket  1的本地内存中，当Redis实例要访问网络数据时，就需要Socket 2通过总线把内存访问命令发送到 Socket 1上，进行远程访问，时间开销比较大。</p><p>我们曾经做过测试，和访问CPU Socket本地内存相比，跨CPU Socket的内存访问延迟增加了18%，这自然会导致Redis处理请求的延迟增加。</p><p>所以，为了避免Redis跨CPU Socket访问网络数据，我们最好把网络中断程序和Redis实例绑在同一个CPU Socket上，这样一来，Redis实例就可以直接从本地内存读取网络数据了，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/41/79/41f02b2afb08ec54249680e8cac30179.jpg?wh=2874*1479\" alt=\"\"></p><p>不过，需要注意的是，<strong>在CPU的NUMA架构下，对CPU核的编号规则，并不是先把一个CPU Socket中的所有逻辑核编完，再对下一个CPU Socket中的逻辑核编码，而是先给每个CPU Socket中每个物理核的第一个逻辑核依次编号，再给每个CPU Socket中的物理核的第二个逻辑核依次编号。</strong></p><p>我给你举个例子。假设有2个CPU Socket，每个Socket上有6个物理核，每个物理核又有2个逻辑核，总共24个逻辑核。我们可以执行<strong>lscpu命令</strong>，查看到这些核的编号：</p><pre><code>lscpu\n\nArchitecture: x86_64\n...\nNUMA node0 CPU(s): 0-5,12-17\nNUMA node1 CPU(s): 6-11,18-23\n...\n</code></pre><p>可以看到，NUMA node0的CPU核编号是0到5、12到17。其中，0到5是node0上的6个物理核中的第一个逻辑核的编号，12到17是相应物理核中的第二个逻辑核编号。NUMA node1的CPU核编号规则和node0一样。</p><p>所以，在绑核时，我们一定要注意，不能想当然地认为第一个Socket上的12个逻辑核的编号就是0到11。否则，网络中断程序和Redis实例就可能绑在了不同的CPU Socket上。</p><p>比如说，如果我们把网络中断程序和Redis实例分别绑到编号为1和7的CPU核上，此时，它们仍然是在2个CPU Socket上，Redis实例仍然需要跨Socket读取网络数据。</p><p><strong>所以，你一定要注意NUMA架构下CPU核的编号方法，这样才不会绑错核。</strong></p><p>我们先简单地总结下刚刚学习的内容。在CPU多核的场景下，用taskset命令把Redis实例和一个核绑定，可以减少Redis实例在不同核上被来回调度执行的开销，避免较高的尾延迟；在多CPU的NUMA架构下，如果你对网络中断程序做了绑核操作，建议你同时把Redis实例和网络中断程序绑在同一个CPU Socket的不同核上，这样可以避免Redis跨Socket访问内存中的网络数据的时间开销。</p><p>不过，“硬币都是有两面的”，绑核也存在一定的风险。接下来，我们就来了解下它的潜在风险点和解决方案。</p><h2>绑核的风险和解决方案</h2><p>Redis除了主线程以外，还有用于RDB生成和AOF重写的子进程（可以回顾看下<a href=\"https://time.geekbang.org/column/article/271754\">第4讲</a>和<a href=\"https://time.geekbang.org/column/article/271839\">第5讲</a>）。此外，我们还在<a href=\"https://time.geekbang.org/column/article/285000\">第16讲</a>学习了Redis的后台线程。</p><p>当我们把Redis实例绑到一个CPU逻辑核上时，就会导致子进程、后台线程和Redis主线程竞争CPU资源，一旦子进程或后台线程占用CPU时，主线程就会被阻塞，导致Redis请求延迟增加。</p><p>针对这种情况，我来给你介绍两种解决方案，分别是<strong>一个Redis实例对应绑一个物理核和优化Redis源码。</strong></p><p><strong>方案一：一个Redis实例对应绑一个物理核</strong></p><p>在给Redis实例绑核时，我们不要把一个实例和一个逻辑核绑定，而要和一个物理核绑定，也就是说，把一个物理核的2个逻辑核都用上。</p><p>我们还是以刚才的NUMA架构为例，NUMA node0的CPU核编号是0到5、12到17。其中，编号0和12、1和13、2和14等都是表示一个物理核的2个逻辑核。所以，在绑核时，我们使用属于同一个物理核的2个逻辑核进行绑核操作。例如，我们执行下面的命令，就把Redis实例绑定到了逻辑核0和12上，而这两个核正好都属于物理核1。</p><pre><code>taskset -c 0,12 ./redis-server\n</code></pre><p>和只绑一个逻辑核相比，把Redis实例和物理核绑定，可以让主线程、子进程、后台线程共享使用2个逻辑核，可以在一定程度上缓解CPU资源竞争。但是，因为只用了2个逻辑核，它们相互之间的CPU竞争仍然还会存在。如果你还想进一步减少CPU竞争，我再给你介绍一种方案。</p><p><strong>方案二：优化Redis源码</strong></p><p>这个方案就是通过修改Redis源码，把子进程和后台线程绑到不同的CPU核上。</p><p>如果你对Redis的源码不太熟悉，也没关系，因为这是通过编程实现绑核的一个通用做法。学会了这个方案，你可以在熟悉了源码之后把它用上，也可以应用在其他需要绑核的场景中。</p><p>接下来，我先介绍一下通用的做法，然后，再具体说说可以把这个做法对应到Redis的哪部分源码中。</p><p>通过编程实现绑核时，要用到操作系统提供的1个数据结构cpu_set_t和3个函数CPU_ZERO、CPU_SET和sched_setaffinity，我先来解释下它们。</p><ul>\n<li>cpu_set_t数据结构：是一个位图，每一位用来表示服务器上的一个CPU逻辑核。</li>\n<li>CPU_ZERO函数：以cpu_set_t结构的位图为输入参数，把位图中所有的位设置为0。</li>\n<li>CPU_SET函数：以CPU逻辑核编号和cpu_set_t位图为参数，把位图中和输入的逻辑核编号对应的位设置为1。</li>\n<li>sched_setaffinity函数：以进程/线程ID号和cpu_set_t为参数，检查cpu_set_t中哪一位为1，就把输入的ID号所代表的进程/线程绑在对应的逻辑核上。</li>\n</ul><p>那么，怎么在编程时把这三个函数结合起来实现绑核呢？很简单，我们分四步走就行。</p><ul>\n<li>第一步：创建一个cpu_set_t结构的位图变量；</li>\n<li>第二步：使用CPU_ZERO函数，把cpu_set_t结构的位图所有的位都设置为0；</li>\n<li>第三步：根据要绑定的逻辑核编号，使用CPU_SET函数，把cpu_set_t结构的位图相应位设置为1；</li>\n<li>第四步：使用sched_setaffinity函数，把程序绑定在cpu_set_t结构位图中为1的逻辑核上。</li>\n</ul><p>下面，我就具体介绍下，分别把后台线程、子进程绑到不同的核上的做法。</p><p>先说后台线程。为了让你更好地理解编程实现绑核，你可以看下这段示例代码，它实现了为线程绑核的操作：</p><pre><code>//线程函数\nvoid worker(int bind_cpu){\n    cpu_set_t cpuset;  //创建位图变量\n    CPU_ZERO(&amp;cpu_set); //位图变量所有位设置0\n    CPU_SET(bind_cpu, &amp;cpuset); //根据输入的bind_cpu编号，把位图对应为设置为1\n    sched_setaffinity(0, sizeof(cpuset), &amp;cpuset); //把程序绑定在cpu_set_t结构位图中为1的逻辑核\n\n    //实际线程函数工作\n}\n\nint main(){\n    pthread_t pthread1\n    //把创建的pthread1绑在编号为3的逻辑核上\n    pthread_create(&amp;pthread1, NULL, (void *)worker, 3);\n}\n</code></pre><p>对于Redis来说，它是在bio.c文件中的bioProcessBackgroundJobs函数中创建了后台线程。bioProcessBackgroundJobs函数类似于刚刚的例子中的worker函数，在这个函数中实现绑核四步操作，就可以把后台线程绑到和主线程不同的核上了。</p><p>和给线程绑核类似，当我们使用fork创建子进程时，也可以把刚刚说的四步操作实现在fork后的子进程代码中，示例代码如下：</p><pre><code>int main(){\n   //用fork创建一个子进程\n   pid_t p = fork();\n   if(p &lt; 0){\n      printf(&quot; fork error\\n&quot;);\n   }\n   //子进程代码部分\n   else if(!p){\n      cpu_set_t cpuset;  //创建位图变量\n      CPU_ZERO(&amp;cpu_set); //位图变量所有位设置0\n      CPU_SET(3, &amp;cpuset); //把位图的第3位设置为1\n      sched_setaffinity(0, sizeof(cpuset), &amp;cpuset);  //把程序绑定在3号逻辑核\n      //实际子进程工作\n      exit(0);\n   }\n   ...\n}\n</code></pre><p>对于Redis来说，生成RDB和AOF日志重写的子进程分别是下面两个文件的函数中实现的。</p><ul>\n<li>rdb.c文件：rdbSaveBackground函数；</li>\n<li>aof.c文件：rewriteAppendOnlyFileBackground函数。</li>\n</ul><p>这两个函数中都调用了fork创建子进程，所以，我们可以在子进程代码部分加上绑核的四步操作。</p><p>使用源码优化方案，我们既可以实现Redis实例绑核，避免切换核带来的性能影响，还可以让子进程、后台线程和主线程不在同一个核上运行，避免了它们之间的CPU资源竞争。相比使用taskset绑核来说，这个方案可以进一步降低绑核的风险。</p><h2>小结</h2><p>这节课，我们学习了CPU架构对Redis性能的影响。首先，我们了解了目前主流的多核CPU架构，以及NUMA架构。</p><p>在多核CPU架构下，Redis如果在不同的核上运行，就需要频繁地进行上下文切换，这个过程会增加Redis的执行时间，客户端也会观察到较高的尾延迟了。所以，建议你在Redis运行时，把实例和某个核绑定，这样，就能重复利用核上的L1、L2缓存，可以降低响应延迟。</p><p>为了提升Redis的网络性能，我们有时还会把网络中断处理程序和CPU核绑定。在这种情况下，如果服务器使用的是NUMA架构，Redis实例一旦被调度到和中断处理程序不在同一个CPU Socket，就要跨CPU Socket访问网络数据，这就会降低Redis的性能。所以，我建议你把Redis实例和网络中断处理程序绑在同一个CPU Socket下的不同核上，这样可以提升Redis的运行性能。</p><p>虽然绑核可以帮助Redis降低请求执行时间，但是，除了主线程，Redis还有用于RDB和AOF重写的子进程，以及4.0版本之后提供的用于惰性删除的后台线程。当Redis实例和一个逻辑核绑定后，这些子进程和后台线程会和主线程竞争CPU资源，也会对Redis性能造成影响。所以，我给了你两个建议：</p><ul>\n<li>如果你不想修改Redis代码，可以把按一个Redis实例一个物理核方式进行绑定，这样，Redis的主线程、子进程和后台线程可以共享使用一个物理核上的两个逻辑核。</li>\n<li>如果你很熟悉Redis的源码，就可以在源码中增加绑核操作，把子进程和后台线程绑到不同的核上，这样可以避免对主线程的CPU资源竞争。不过，如果你不熟悉Redis源码，也不用太担心，Redis 6.0出来后，可以支持CPU核绑定的配置操作了，我将在第38讲中向你介绍Redis 6.0的最新特性。</li>\n</ul><p>Redis的低延迟是我们永恒的追求目标，而多核CPU和NUMA架构已经成为了目前服务器的主流配置，所以，希望你能掌握绑核优化方案，并把它应用到实践中。</p><h2>每课一问</h2><p>按照惯例，我给你提个小问题。</p><p>在一台有2个CPU Socket（每个Socket 8个物理核）的服务器上，我们部署了有8个实例的Redis切片集群（8个实例都为主节点，没有主备关系），现在有两个方案：</p><ol>\n<li>在同一个CPU Socket上运行8个实例，并和8个CPU核绑定；</li>\n<li>在2个CPU Socket上各运行4个实例，并和相应Socket上的核绑定。</li>\n</ol><p>如果不考虑网络数据读取的影响，你会选择哪个方案呢？</p><p>欢迎在留言区写下你的思考和答案，如果你觉得有所收获，也欢迎你帮我把今天的内容分享给你的朋友。我们下节课见。</p>","neighbors":{"left":{"article_title":"16 | 异步机制：如何避免单线程模型的阻塞？","id":285000},"right":{"article_title":"18 | 波动的响应延迟：如何应对变慢的Redis？（上）","id":286549}},"comments":[{"had_liked":false,"id":248511,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1600186055,"is_pvip":true,"discussion_count":37,"race_medal":0,"score":"1212780963527","product_id":100056701,"comment_content":"这篇文章收获很大！对于CPU结构和如何绑核有了进一步了解。其实在NUMA架构下，不光对于CPU的绑核需要注意，对于内存的使用，也有很多注意点，下面回答课后问题，也会提到NUMA架构下内存方面的注意事项。<br><br>在一台有2个CPU Socket（每个Socket 8个物理核）的服务器上，我们部署了有8个实例的Redis切片集群（8个实例都为主节点，没有主备关系），采用哪种方案绑核最佳？<br><br>我更倾向于的方案是：在两个CPU Socket上各运行4个实例，并和相应Socket上的核绑定。这么做的原因主要从L3 Cache的命中率、内存利用率、避免使用到Swap这三个方面考虑：<br><br>1、由于CPU Socket1和2分别有自己的L3 Cache，如果把所有实例都绑定在同一个CPU Socket上，相当于这些实例共用这一个L3 Cache，另一个CPU Socket的L3 Cache浪费了。这些实例共用一个L3 Cache，会导致Cache中的数据频繁被替换，访问命中率下降，之后只能从内存中读取数据，这会增加访问的延迟。而8个实例分别绑定CPU Socket，可以充分使用2个L3 Cache，提高L3 Cache的命中率，减少从内存读取数据的开销，从而降低延迟。<br><br>2、如果这些实例都绑定在一个CPU Socket，由于采用NUMA架构的原因，所有实例会优先使用这一个节点的内存，当这个节点内存不足时，再经过总线去申请另一个CPU Socket下的内存，此时也会增加延迟。而8个实例分别使用2个CPU Socket，各自在访问内存时都是就近访问，延迟最低。<br><br>3、如果这些实例都绑定在一个CPU Socket，还有一个比较大的风险是：用到Swap的概率将会大大提高。如果这个CPU Socket对应的内存不够了，也可能不会去另一个节点申请内存（操作系统可以配置内存回收策略和Swap使用倾向：本节点回收内存&#47;其他节点申请内存&#47;内存数据换到Swap的倾向程度），而操作系统可能会把这个节点的一部分内存数据换到Swap上从而释放出内存给进程使用（如果没开启Swap可会导致直接OOM）。因为Redis要求性能非常高，如果从Swap中读取数据，此时Redis的性能就会急剧下降，延迟变大。所以8个实例分别绑定CPU Socket，既可以充分使用2个节点的内存，提高内存使用率，而且触发使用Swap的风险也会降低。<br><br>其实我们可以查一下，在NUMA架构下，也经常发生某一个节点内存不够，但其他节点内存充足的情况下，依旧使用到了Swap，进而导致软件性能急剧下降的例子。所以在运维层面，我们也需要关注NUMA架构下的内存使用情况（多个内存节点使用可能不均衡），并合理配置系统参数（内存回收策略&#47;Swap使用倾向），尽量去避免使用到Swap。","like_count":283,"discussions":[{"author":{"id":1316758,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","nickname":"Richard","note":"","ucode":"893F958B9DD161","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333539,"discussion_content":"大佬说的都很不错，我认为还有一点可以提一下，就是redis在这里是集群分片，他们各自持有部分数据，那么就会有各自的局部性，彼此之间互访的内容不多，慢说只有两个socket，要是有8个也可以让他们各自运行到一个socket上，各自有各自的缓存，也会有更好的命中率和空间局部利用率。","likes_number":27,"is_delete":false,"is_hidden":false,"ctime":1607560596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1873629,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/96/dd/1620a744.jpg","nickname":"simple_孙","note":"","ucode":"A77203E242D652","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410290,"discussion_content":"是不是跟散热还有点关系，都挤在一个socket里发热肯定更大","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1635651800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2124243,"avatar":"https://static001.geekbang.org/account/avatar/00/20/69/d3/97510c5b.jpg","nickname":"荐哥 | 周优军","note":"","ucode":"5DDD9CC85A2E6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1873629,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/96/dd/1620a744.jpg","nickname":"simple_孙","note":"","ucode":"A77203E242D652","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579920,"discussion_content":"你咋这么机智捏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657774167,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":410290,"ip_address":""},"score":579920,"extra":""}]},{"author":{"id":2107767,"avatar":"","nickname":"huy","note":"","ucode":"7463C3F31CC26C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315787,"discussion_content":"大佬麻烦问一下，同一台机器cpu虽然是NUMA架构，内存为什么不是共享的呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603327428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2107767,"avatar":"","nickname":"huy","note":"","ucode":"7463C3F31CC26C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315802,"discussion_content":"为了各自CPU访问内存更快。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1603328232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":315787,"ip_address":""},"score":315802,"extra":""},{"author":{"id":2635868,"avatar":"https://static001.geekbang.org/account/avatar/00/28/38/5c/d69b4891.jpg","nickname":"Wenxu","note":"","ucode":"430FE3A3A66E38","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2107767,"avatar":"","nickname":"huy","note":"","ucode":"7463C3F31CC26C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538514,"discussion_content":"cpu与cpu之间通过互联总线通信，intel称upi，and称xgmi。所以有二次拷贝、传输距离、协议解析时间开销","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639437207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":315787,"ip_address":""},"score":538514,"extra":""}]},{"author":{"id":1589208,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTITcwicqBDYzXtLibUtian172tPs7rJpqG1Vab4oGjnguA9ziaYjDCILSGaS6qRiakvRdUEhdmSG0BGPKw/132","nickname":"大饶Raysir","note":"","ucode":"0AFA191420A30D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312386,"discussion_content":"大佬提到的swap这个点真的厉害！","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1602674649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2542376,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","nickname":"夏天","note":"","ucode":"5F224DDAC94DFF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369853,"discussion_content":"内存充足的情况下。建议关闭 SWAP。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619175689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3190922,"avatar":"","nickname":"Geek_590385","note":"","ucode":"BE5BDD9180FA0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590426,"discussion_content":"天人啊，写的都是天书啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665734050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2313353,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4c/89/82a3ee04.jpg","nickname":"going","note":"","ucode":"3AA83F9B07BE8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582761,"discussion_content":"如果涉及到实例的新增或者删除，哈希槽的更新以及重定向的操作跨socket会不会很麻烦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659664235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553501,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645934165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545818,"discussion_content":"你一直都是那么优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642058970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2303560,"avatar":"","nickname":"微风夏至","note":"","ucode":"EFB31B33FE0187","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537371,"discussion_content":"切片节点之间也需要传递哈希槽信息以及迁移数据，同在一个CPU Socket会不会更快？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639043580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1297630,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","nickname":"剑八","note":"","ucode":"0A09F41DB8A4E7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382088,"discussion_content":"赞，不过还有一点是，能充分利用多CPU。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625409244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1736650,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyuuhxu0HH4cIKCClCqx0LTurCCYWmNcFwfTWV5te5afsibp2yuDmC9mibEHx0Xy8QlvqvMWWcAib8g/132","nickname":"我的喵","note":"","ucode":"A7435BDBDD2587","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348109,"discussion_content":"由于CPU Socket1和2分别有自己的L3 Cache------  L3不是所有物理核共享吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612427106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2326134,"avatar":"https://static001.geekbang.org/account/avatar/00/23/7e/76/368394bf.jpg","nickname":"哦","note":"","ucode":"C776659DED9D79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1736650,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyuuhxu0HH4cIKCClCqx0LTurCCYWmNcFwfTWV5te5afsibp2yuDmC9mibEHx0Xy8QlvqvMWWcAib8g/132","nickname":"我的喵","note":"","ucode":"A7435BDBDD2587","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348324,"discussion_content":"每一个CPU都有L3cache，而CPU内又有多个物理核，每一个物理核有自己的L1cache，L2cache但是同一个CPU内的物理核共享一个L3cache。关于L3cache是否共享，Intel和ARM还不同。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612513046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348109,"ip_address":""},"score":348324,"extra":""},{"author":{"id":1186981,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1c/a5/226ce8a7.jpg","nickname":"Noir","note":"","ucode":"985D4C4A5E1E85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1736650,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyuuhxu0HH4cIKCClCqx0LTurCCYWmNcFwfTWV5te5afsibp2yuDmC9mibEHx0Xy8QlvqvMWWcAib8g/132","nickname":"我的喵","note":"","ucode":"A7435BDBDD2587","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348991,"discussion_content":"NUMA 架构通常都是多路 CPU 了，不同是 CPU socket 已经是不同的 CPU 芯片了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612836358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348109,"ip_address":""},"score":348991,"extra":""},{"author":{"id":1886331,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/c8/7b/153181d7.jpg","nickname":"夜辉","note":"","ucode":"9421385F51FF9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1736650,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyuuhxu0HH4cIKCClCqx0LTurCCYWmNcFwfTWV5te5afsibp2yuDmC9mibEHx0Xy8QlvqvMWWcAib8g/132","nickname":"我的喵","note":"","ucode":"A7435BDBDD2587","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376897,"discussion_content":"L3只是同一个CPU Socket中的物理核共享\n而CPU Socket之间通过总线互相访问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622397502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348109,"ip_address":""},"score":376897,"extra":""}]},{"author":{"id":1203114,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/aa/777d7f88.jpg","nickname":"谁谁","note":"","ucode":"9651913B7B7ECC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331037,"discussion_content":"为什么要执行上下文切换，什么时候上下文切换？\n上下文切换不是指的cpu一会儿处理这个线程的数据，一会儿处理那个线程的数据？\n这里说的是一个线程在不同的cpu之间的切换？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606750033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1446512,"avatar":"https://static001.geekbang.org/account/avatar/00/16/12/70/10faf04b.jpg","nickname":"Lywane","note":"","ucode":"2B0027AA069CE9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1203114,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/aa/777d7f88.jpg","nickname":"谁谁","note":"","ucode":"9651913B7B7ECC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338172,"discussion_content":"老师文中提到的准确来讲叫 跨核上下文切换","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1609208151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331037,"ip_address":""},"score":338172,"extra":""},{"author":{"id":2326134,"avatar":"https://static001.geekbang.org/account/avatar/00/23/7e/76/368394bf.jpg","nickname":"哦","note":"","ucode":"C776659DED9D79","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1203114,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5b/aa/777d7f88.jpg","nickname":"谁谁","note":"","ucode":"9651913B7B7ECC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348328,"discussion_content":"进程是以时间片为单位获得占用CPU的时长的，当时间片用完或者是阻塞等待的时候会让出CPU，这个时候需要保存这个进程执行的状态进度例如程序计数器，寄存器，堆栈指针等；当该进程再次被调度程序选中执行时，从PCB中重新记载该程序上次执行的状态即要恢复现场。所以在进程的角度来看这个进程就像是一直在执行，逻辑上它一直占用CPU资源。这就是context switch","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1612513399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331037,"ip_address":""},"score":348328,"extra":""}]},{"author":{"id":1107550,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/5e/62158841.jpg","nickname":"取经人","note":"","ucode":"C3668CA65200DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326282,"discussion_content":"老兄每次留言都很经典","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605575896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2049478,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/45/c6/ba5176a6.jpg","nickname":"从不卖萌","note":"","ucode":"E9B7B1C8FAFE0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1107550,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/5e/62158841.jpg","nickname":"取经人","note":"","ucode":"C3668CA65200DF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350275,"discussion_content":"认真到让人佩服...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613792244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":326282,"ip_address":""},"score":350275,"extra":""}]},{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":316570,"discussion_content":"Redis部署在docker容器中，还能采用方案中的绑核操作吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603427346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1588794,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3e/3a/2267d2a3.jpg","nickname":"hoppo","note":"","ucode":"B0C7C124A99B2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325897,"discussion_content":"可以的，docker有很多可以针对宿主机资源做限制的配置项，磁盘、cpu、io等方面的都有，指定cpu绑核可以使用&#34;--cpuset-cpus&#34;这个参数，详细的可以查一下docker资源限制~","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1605453610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":316570,"ip_address":""},"score":325897,"extra":""},{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1588794,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3e/3a/2267d2a3.jpg","nickname":"hoppo","note":"","ucode":"B0C7C124A99B2D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327389,"discussion_content":"好的，谢谢啦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605825672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325897,"ip_address":""},"score":327389,"extra":""}]},{"author":{"id":2194584,"avatar":"https://static001.geekbang.org/account/avatar/00/21/7c/98/597d500f.jpg","nickname":"矜琦炫博","note":"","ucode":"F640BA255D501C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307649,"discussion_content":"有个疑问昂，L3缓存不是所有CPU共享的么？还是说在numa架构里分开了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600704968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2194584,"avatar":"https://static001.geekbang.org/account/avatar/00/21/7c/98/597d500f.jpg","nickname":"矜琦炫博","note":"","ucode":"F640BA255D501C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307683,"discussion_content":"是的，看图就明白了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600736596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":307649,"ip_address":""},"score":307683,"extra":""},{"author":{"id":1386818,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/42/43d4b1a8.jpg","nickname":"烫烫烫","note":"","ucode":"C06018670DE76A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2194584,"avatar":"https://static001.geekbang.org/account/avatar/00/21/7c/98/597d500f.jpg","nickname":"矜琦炫博","note":"","ucode":"F640BA255D501C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323750,"discussion_content":"L1和L2属于单个核心，不共享；L3属于CPU，CPU内的核心共享","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1604991180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":307649,"ip_address":""},"score":323750,"extra":""}]},{"author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307483,"discussion_content":"如果 CPU Socket 1、2 分别保存了4个实例，Redis 不可避免地跨 CPU Socket 读取网络数据，会不会因此引起的延迟？在这个方案中，应该不能避免了吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600665598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1001893,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","nickname":"小文同学","note":"","ucode":"48F2AEB989C12A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307486,"discussion_content":"是的，不能避免。所以问题也提到了，忽略网络数据读取的影响前提下方案如何选。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600667008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":307483,"ip_address":""},"score":307486,"extra":""}]},{"author":{"id":1205253,"avatar":"https://static001.geekbang.org/account/avatar/00/12/64/05/6989dce6.jpg","nickname":"我来也","note":"","ucode":"773D6104F56767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307379,"discussion_content":"课代表你好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600612950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1322455,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2d/d7/74fc8f38.jpg","nickname":"灿烂明天","note":"","ucode":"07DA56B0680D0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307024,"discussion_content":"你好，大佬，请问下这里说的节点是一个实例的意思吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600475832,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1322455,"avatar":"https://static001.geekbang.org/account/avatar/00/14/2d/d7/74fc8f38.jpg","nickname":"灿烂明天","note":"","ucode":"07DA56B0680D0C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307043,"discussion_content":"指的是NUMA节点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600480381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":307024,"ip_address":""},"score":307043,"extra":""}]},{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306398,"discussion_content":"计算机底层知识真的很好，膜拜。\n学习到了NUMA下，竟然可能会先使用swap，而不是其他节点的内存。\n问大佬个问题，现在在云主机上，物理的CPU应都是被共享的，那CPU绑核会不会有啥影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600262502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1670963,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/zGUSFibP0OGFW9a3QSic1DZLr5B4kPoNmt3RibzLNYSOxN3mUZibBMkGHpwcYPFYWJ7v61wsMvyIKzpBuQJWD2hVOg/132","nickname":"九时四","note":"","ucode":"92DCC2DF3DD15C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306220,"discussion_content":"像大佬学习！！！我只能想到缓存命中率和内存利用率，swap都没听过。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600221817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1435733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","nickname":"MClink","note":"","ucode":"F479190923355C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306176,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600211038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263857,"user_name":"薛定谔的猫","can_delete":false,"product_type":"c1","uid":2306514,"ip_address":"","ucode":"315E081F9E5D74","user_header":"https://static001.geekbang.org/account/avatar/00/23/31/d2/56bf47c8.jpg","comment_is_top":false,"comment_ctime":1606281855,"is_pvip":false,"replies":[{"id":"97919","content":"当网卡接收到数据后，会触发网卡中断，用来通知操作系统内核进行数据处理。因此，操作系统内核中用来处理网卡中断事件，把数据从内核的缓冲区拷贝到应用程序缓冲区的程序就是指网卡中断处理程序。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1608993658,"ip_address":"","comment_id":263857,"utype":1}],"discussion_count":7,"race_medal":0,"score":"220649613951","product_id":100056701,"comment_content":"小白请教一下，网络中断处理程序是指什么呢？","like_count":52,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510335,"discussion_content":"当网卡接收到数据后，会触发网卡中断，用来通知操作系统内核进行数据处理。因此，操作系统内核中用来处理网卡中断事件，把数据从内核的缓冲区拷贝到应用程序缓冲区的程序就是指网卡中断处理程序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608993658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2839720,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/54/a8/3b334406.jpg","nickname":"冷山","note":"","ucode":"67163D24B7FA0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":544661,"discussion_content":"您上面不是说网络中断处理程序是吧网络数据放到内核缓冲区吗？ 它应该不负责把数据直接拷贝到应用程序的缓冲区吧？这个拷贝是由用户线程自己去拷贝吧，也就是同步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641622917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":510335,"ip_address":""},"score":544661,"extra":""},{"author":{"id":1268264,"avatar":"https://static001.geekbang.org/account/avatar/00/13/5a/28/732d3f2f.jpg","nickname":"GEEKBANG_6638780","note":"","ucode":"952194E56FD8C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2839720,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/54/a8/3b334406.jpg","nickname":"冷山","note":"","ucode":"67163D24B7FA0E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585634,"discussion_content":"你说的是对的，中断是从网卡到内核缓冲区的数据copy。数据到内核后，会触发poll和epoll，这时用户程序才从内核copy数据，会发生系统调用。  这也正是zero copy的厉害之处，直接在内核就完成数据操作， 而不需要经过用户态","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661740706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":544661,"ip_address":"江苏"},"score":585634,"extra":""}]},{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589899,"discussion_content":"就是硬中断和软中断，当网卡里面有数据的时候会通过linux内核。内核通过硬中断来响应数据，吧网卡的数据拷贝到内存当中，然后有内核起一个后台线程软中断继续处理，你可以看看倪朋飞Linux性能优化实战就知道了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665387608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559516,"discussion_content":"把操作系统的网络中断处理程序和 CPU 核绑定----这个操作的命令是什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648802759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2526420,"avatar":"https://static001.geekbang.org/account/avatar/00/26/8c/d4/c228fe2c.jpg","nickname":"高欧叶尼兹","note":"","ucode":"1974C9151DBFB7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378947,"discussion_content":"身要处理数据就要切换到相应的redis实例所在socket，这是无法避免的代价","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623550750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1876716,"avatar":"http://thirdwx.qlogo.cn/mmopen/KFgDEHIEpnTUibfcckj33D1LVj9VapfrK3Yq2Gj00wnLt4nkWS7HvYy5NxvmnQcQpaysuBHVrB9MILWZ9hibUNasicPNtueYoNM/132","nickname":"JAVA初级开发工程师","note":"","ucode":"F78E2F30751AC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374692,"discussion_content":"一个服务器只有一个网络中断程序吗，如果只有一个，运行多个redis实例的时候是不是还是存在socket切换的问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621318278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270894,"user_name":"Geek_9b08a5","can_delete":false,"product_type":"c1","uid":2392536,"ip_address":"","ucode":"CF08E141456F24","user_header":"","comment_is_top":false,"comment_ctime":1609313966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"108983496366","product_id":100056701,"comment_content":"1.作者讲了什么？<br>\t在多核CPU架构和NUMA架构下，如何对redis进行优化配置<br>2.作者是怎么把这件事将明白的？<br>\t1，讲解了主流的CPU架构，主要有多核CPU架构和NUMA架构两个架构<br>\t\t多核CPU架构： 多个物理核，各物理核使用私有的1、2级缓存，共享3级缓存。物理核可包含2个超线程，称为逻辑核<br>\t\tNUMA架构： 一个服务器上多个cpu，称为CPU Socket，每个cpu socker存在多个物理核。每个socket通过总线连接，并且有用私有的内存空间<br>3.为了讲明白，作者讲了哪些要点，哪些亮点？<br>\t1、亮点：将主流的CPU架构进行剖析，使人更好理解cpu的原理，有助于后续redis性能的优化<br>\t2、要点：cpu架构：一个cpu一般拥有多个物理核，每个物理核都拥有私有的一级缓存，二级缓存。三级缓存是各物理核共享的缓存空间。而物理核又可以分为多个超线程，称为逻辑核，同一个物理核的逻辑核会共享使用 L1、L2 缓存。<br>\t3、要点：一级缓存和二级缓存访问延迟不超过10纳秒，但空间很小，只是KB单位。而应用程序访问内存延迟是百纳秒级别，基本上是一二级缓存的10倍<br>\t4、要点：不同的物理核还会共享一个共同的三级缓存，三级缓存空间比较多，为几到几十MB，当 L1、L2 缓存中没有数据缓存时，可以访问 L3，尽可能避免访问内存。<br>\t5、要点：多核CPU运行redis实例，会导致context switch，导致增加延迟，可以通过taskset 命令把redis进程绑定到某个cup物理核上。<br>\t6、要点：NUMA架构运行redis实例，如果网络中断程序和redis实例运行在不同的socket上，就需要跨 CPU Socket 访问内存，这个过程会花费较多时间。<br>\t7、要点：绑核的风险和解决方案：<br>\t\t\t一个 Redis 实例对应绑一个物理核 ： 将redis服务绑定到一个物理核上，而不是一个逻辑核上，如 taskset -c 0,12 .&#47;redis-server<br>\t\t\t优化 Redis 源码。<br>4.对于作者所讲的，我有哪些发散性思考？<br>给自己提了几个问题：<br>\t1，在多核CPU架构和NUMA架构，那个对于redis来说性能比较好<br>\t2，如何设置网络中断处理和redis绑定设置在同个socket上呢？<br><br>5.将来在哪些场景里，我能够使用它？<br><br>6.留言区收获<br>\t如果redis实例中内存不足以使用时，会用到swap那会怎么样？（答案来自@kaito 大佬）<br>\t\t因为Redis要求性能非常高，如果从Swap中读取数据，此时Redis的性能就会急剧下降，延迟变大。","like_count":26},{"had_liked":false,"id":265028,"user_name":"许峰","can_delete":false,"product_type":"c1","uid":2346462,"ip_address":"","ucode":"C12E7B53D7E658","user_header":"https://static001.geekbang.org/account/avatar/00/23/cd/de/0334fd13.jpg","comment_is_top":false,"comment_ctime":1606739132,"is_pvip":false,"replies":[{"id":"97916","content":"ECS主机提供的vCPU是指虚拟核，一般对应一个物理核心上的一个超线程，这是因为底层服务器一般会开启超线程。通常，一个物理核心会对应2个超线程，每个超线程对应一个vCPU。多个vCPU一般是在同一个NUMA节点上。<br><br>如果希望减少CPU超线程对性能的影响，可以通过阿里云SDK的选项关闭超线程。<br>","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1608992800,"ip_address":"","comment_id":265028,"utype":1}],"discussion_count":1,"race_medal":0,"score":"100390986940","product_id":100056701,"comment_content":"阿里云ecs主机都是vcpus, 这玩意算物理核心吗?<br>比如一个4vcpu, lscpu可以看到<br>NUMA node0 CPU(s):     0-3<br>这么绑?","like_count":24,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510774,"discussion_content":"ECS主机提供的vCPU是指虚拟核，一般对应一个物理核心上的一个超线程，这是因为底层服务器一般会开启超线程。通常，一个物理核心会对应2个超线程，每个超线程对应一个vCPU。多个vCPU一般是在同一个NUMA节点上。\n\n如果希望减少CPU超线程对性能的影响，可以通过阿里云SDK的选项关闭超线程。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608992800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248539,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1600217393,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"61729759537","product_id":100056701,"comment_content":"课后问题：我会选择方案二。首先一个实例不止有一个线程需要运行，所以方案一肯定会有CPU竞争问题；其次切片集群的通信不是通过内存，而是通过网络IO。","like_count":14,"discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":363792,"discussion_content":"大佬！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617284017,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2334507,"avatar":"https://static001.geekbang.org/account/avatar/00/23/9f/2b/57b71f70.jpg","nickname":"努逗斯","note":"","ucode":"C6C722E99F5168","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352693,"discussion_content":"其次这个点很关键，老师说在一台主机上部署8个节点的集群，自然想到集群需要通信交换哈希槽信息，如果通信是内存交换效率会很高，而现状是通过网络IO来通信，因为集群的节点可以部署在不同主机上，不同主机是没办法用内存通信的，方案二对内存利用率和缓存命中率友好，所以选择方案二","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614820843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248613,"user_name":"游弋云端","can_delete":false,"product_type":"c1","uid":1208637,"ip_address":"","ucode":"A960E8F5AA25B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/71/3d/da8dc880.jpg","comment_is_top":false,"comment_ctime":1600241344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48844881600","product_id":100056701,"comment_content":"有两套房子，就不用挤着睡吧，优选方案二。老师实验用的X86的CPU吧，对于ARM架构来讲，存在着跨DIE和跨P的说法，跨P的访问时延会更高，且多个P之间的访问存在着NUMA distances的说法，不同的布局导致的跨P访问时延也不相同。","like_count":11},{"had_liked":false,"id":261097,"user_name":"明月几时","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1605195310,"is_pvip":true,"replies":[{"id":"98015","content":"CPU有多核，即使单核上也会有超线程技术。除了多核，多处理器会形成NUMA架构，这些都会对系统性能产生影响。<br><br>所以，计算机体系结构的知识点对系统优化还是很有帮助的:)<br>","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1609081161,"ip_address":"","comment_id":261097,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44554868270","product_id":100056701,"comment_content":"很多人都认为 Redis 和 CPU 的关系很简单，就是 Redis 的线程在 CPU 上运行，CPU 快，Redis 处理请求的速度也很快。<br>这种认知其实是片面的。CPU 的多核架构以及多 CPU 架构，也会影响到 Redis 的性能。如果不了解 CPU 对 Redis 的影响，在对 Redis 的性能进行调优时，就可能会遗漏一些调优方法，不能把 Redis 的性能发挥到极限。","like_count":10,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509374,"discussion_content":"CPU有多核，即使单核上也会有超线程技术。除了多核，多处理器会形成NUMA架构，这些都会对系统性能产生影响。\n\n所以，计算机体系结构的知识点对系统优化还是很有帮助的:)\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609081161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277428,"user_name":"小可","can_delete":false,"product_type":"c1","uid":1006735,"ip_address":"","ucode":"8834AF621FA67D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/8f/551b5624.jpg","comment_is_top":false,"comment_ctime":1612409738,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"35972148106","product_id":100056701,"comment_content":"这篇文章真是太好了！对cpu有了更多的认识，公司服务lscpu挨个看了一遍，不懂的地方也去查了资料，自己也画了NUMA架构下多个cpu socket示意图，给每个逻辑cpu编号，对照图看怎么绑定网络中断和redis实例到同一个cpu socket，怎么绑定一个redis实例到同一个物理核，非常清晰！还有cpu的架构设计思路也可以应用到我们实际系统架构上，不得不赞叹这些神级设计，也感谢老师心细深入的讲解，真的发现宝藏了，O(∩_∩)O哈哈~","like_count":8,"discussions":[{"author":{"id":1006735,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/8f/551b5624.jpg","nickname":"小可","note":"","ucode":"8834AF621FA67D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539455,"discussion_content":"文档：多核CPU逻辑核编号.note\n链接：http://note.youdao.com/noteshare?id=d893ce14f79c9cb08e1e0ef190623fec&amp;sub=BB8841A5BF974F8891A15617F4E09D6A","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639721955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369292,"discussion_content":"兄弟，分享一下图啊，我们给你校正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618997482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1006735,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/8f/551b5624.jpg","nickname":"小可","note":"","ucode":"8834AF621FA67D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1295609,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRFRX8kNzNet7FibNvtavbVpAwK09AhIhrib9k762qWtH6mre8ickP7hM5mgZC4ytr8NnmIfmAhxMSQ/132","nickname":"老大不小","note":"","ucode":"35BCDD3CB13467","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539454,"discussion_content":"http://note.youdao.com/noteshare?id=d893ce14f79c9cb08e1e0ef190623fec&amp;sub=BB8841A5BF974F8891A15617F4E09D6A","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639721943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":369292,"ip_address":""},"score":539454,"extra":""}]}]},{"had_liked":false,"id":248601,"user_name":"zhou","can_delete":false,"product_type":"c1","uid":1065310,"ip_address":"","ucode":"E5D21F2A3359CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/5e/9d2953a3.jpg","comment_is_top":false,"comment_ctime":1600239292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18780108476","product_id":100056701,"comment_content":"在 NUMA 架构下，比如有两个 CPU Socket：CPU Socket 1 和 CPU Socket 2，每个 CPU Socket 都有自己的内存，CPU Socket 1 有自己的内存 Mem1，CPU Socket 2 有自己的内存 Mem2。<br><br>Redis 实例在 CPU Socket 1 上执行，网络中断处理程序在 CPU Socket 2 上执行，所以 Redis 实例的数据在内存 Mem1 上，网络中断处理程序的数据在 Mem2上。<br><br>因此 Redis 实例读取网络中断处理程序的内存数据（Mem2）时，是需要远端访问的，比直接访问自己的内存数据（Mem1）要慢。<br>","like_count":4},{"had_liked":false,"id":302323,"user_name":"元末","can_delete":false,"product_type":"c1","uid":2156850,"ip_address":"","ucode":"AB00C7E2EF36E8","user_header":"https://static001.geekbang.org/account/avatar/00/20/e9/32/b89fcc77.jpg","comment_is_top":false,"comment_ctime":1626166361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14511068249","product_id":100056701,"comment_content":"这篇文章很顶","like_count":3},{"had_liked":false,"id":291370,"user_name":"Young","can_delete":false,"product_type":"c1","uid":1073443,"ip_address":"","ucode":"075C0BBE20FD8C","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/23/30d134cf.jpg","comment_is_top":false,"comment_ctime":1620231370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10210165962","product_id":100056701,"comment_content":"老师您好，有个疑问： 即使内核绑定，但是当cpu时间片用尽，context switch依然会发生对吧？ 之后，cache里的数据会被刷掉， 所谓绑定的优势如何保证呢？ 谢谢！","like_count":2},{"had_liked":false,"id":273293,"user_name":"蚝不鱿鱼","can_delete":false,"product_type":"c1","uid":1428043,"ip_address":"","ucode":"5DB98E406F1D3E","user_header":"https://static001.geekbang.org/account/avatar/00/15/ca/4b/c1ace3aa.jpg","comment_is_top":false,"comment_ctime":1610526800,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10200461392","product_id":100056701,"comment_content":"结合隔壁我浩哥的计算机组成原理课程食用本节内容是真的香，感谢钧哥。","like_count":2,"discussions":[{"author":{"id":1641326,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJDdmHm6txEVtEXEDibSdIsRLEpghOoMt2kfZHetY9QLWHygicKCfhVoYiaylAZJoXbcCMBhXqMF4icgw/132","nickname":"洗洗睡吧","note":"","ucode":"DE7F8B4CA512F6","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385425,"discussion_content":"没计算机基础，看了开头几张被劝退","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627033308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261645,"user_name":"cp★钊","can_delete":false,"product_type":"c1","uid":1275690,"ip_address":"","ucode":"6B86D4D538BDF7","user_header":"https://static001.geekbang.org/account/avatar/00/13/77/2a/244d98aa.jpg","comment_is_top":false,"comment_ctime":1605456718,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5900424014","product_id":100056701,"comment_content":"挺有收获，以前学习比较少关注系统cpu结构这块。这次顺带也了解cpu亲和度、NUMA结构相关的知识点，希望老师也可以在文章中推荐一些相关知识点的学习链接之类的。","like_count":1},{"had_liked":false,"id":261633,"user_name":"hoppo","can_delete":false,"product_type":"c1","uid":1588794,"ip_address":"","ucode":"B0C7C124A99B2D","user_header":"https://static001.geekbang.org/account/avatar/00/18/3e/3a/2267d2a3.jpg","comment_is_top":false,"comment_ctime":1605452138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5900419434","product_id":100056701,"comment_content":"这篇文章确实收获很大，从CPU核心说到NUMA架构、我原来其实就是抱着 ”Redis 的线程在 CPU 上运行，CPU 越快，Redis 处理请求的速度也越快”相法的。现在想来真是太肤浅了...orz（失意体前屈）<br><br>不过一步一步跟着老师的思路来，还是很容易理解的，读到远端内存访问影响性能的时候，就会想是不是可以分到一个核上；看完了绑核的优点介绍又联系到风险和解决方式，一气呵成，给老师点个赞~","like_count":1},{"had_liked":false,"id":248714,"user_name":"土豆白菜","can_delete":false,"product_type":"c1","uid":1029749,"ip_address":"","ucode":"D1551C729D33E0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b6/75/32c19395.jpg","comment_is_top":false,"comment_ctime":1600269029,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5895236325","product_id":100056701,"comment_content":"老师，我也想问下比如azure redis 能否做这些优化","like_count":1},{"had_liked":false,"id":248563,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1600223105,"is_pvip":false,"discussion_count":2,"race_medal":1,"score":"5895190401","product_id":100056701,"comment_content":"请问老师，您文中提到我们仔细检测了 Redis 实例运行时的服务器 CPU 的状态指标值，这才发现，CPU 的 context switch 次数比较多。再遇到这样的问题的时候，排查的点有哪些呢？","like_count":1,"discussions":[{"author":{"id":1389256,"avatar":"https://static001.geekbang.org/account/avatar/00/15/32/c8/7770b717.jpg","nickname":"学习人","note":"","ucode":"0F4945624DF656","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390981,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630209043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1589208,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTITcwicqBDYzXtLibUtian172tPs7rJpqG1Vab4oGjnguA9ziaYjDCILSGaS6qRiakvRdUEhdmSG0BGPKw/132","nickname":"大饶Raysir","note":"","ucode":"0AFA191420A30D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312387,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602674759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359807,"user_name":"妥妥","can_delete":false,"product_type":"c1","uid":1206716,"ip_address":"广东","ucode":"5BC1C85CF60CAD","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/bc/c22bf219.jpg","comment_is_top":false,"comment_ctime":1665916437,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1665916437","product_id":100056701,"comment_content":"老师请教一下，不修改redis源码的情况下，为什么不干脆绑定同一个cpu socket下的三个核心？这样就不会有cpu资源的竞争了","like_count":0},{"had_liked":false,"id":355740,"user_name":"⚽️","can_delete":false,"product_type":"c1","uid":3030024,"ip_address":"上海","ucode":"85DCD85352B666","user_header":"https://static001.geekbang.org/account/avatar/00/2e/3c/08/93bde3ee.jpg","comment_is_top":false,"comment_ctime":1661705453,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1661705453","product_id":100056701,"comment_content":"网络中断和cpu怎么绑定啊","like_count":0},{"had_liked":false,"id":353652,"user_name":"going","can_delete":false,"product_type":"c1","uid":2313353,"ip_address":"北京","ucode":"3AA83F9B07BE8B","user_header":"https://static001.geekbang.org/account/avatar/00/23/4c/89/82a3ee04.jpg","comment_is_top":false,"comment_ctime":1659663773,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659663773","product_id":100056701,"comment_content":"同一个socket运行八个实例。<br>","like_count":0},{"had_liked":false,"id":344908,"user_name":"Nerd","can_delete":false,"product_type":"c1","uid":1519213,"ip_address":"","ucode":"0D3A43D08D07AF","user_header":"https://static001.geekbang.org/account/avatar/00/17/2e/6d/00a1c1b1.jpg","comment_is_top":false,"comment_ctime":1651847324,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651847324","product_id":100056701,"comment_content":"才知道一台服务器可以有多个 CPU 的配置，学习了","like_count":0},{"had_liked":false,"id":334580,"user_name":"日月星辰","can_delete":false,"product_type":"c1","uid":1796332,"ip_address":"","ucode":"4E9F48153B2D8B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/68/ec/eb0ebbb6.jpg","comment_is_top":false,"comment_ctime":1645004906,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645004906","product_id":100056701,"comment_content":"taskset 是操作系统的命令还是 Redis 的命令，感觉应该是操作系统的命令，但是不知道对不对。","like_count":0},{"had_liked":false,"id":333201,"user_name":"三三","can_delete":false,"product_type":"c1","uid":1054201,"ip_address":"","ucode":"4A76933C29BDA1","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/f9/0b14785a.jpg","comment_is_top":false,"comment_ctime":1644205575,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1644205575","product_id":100056701,"comment_content":"原来一根内存只会被一个cpu管理，本章学习到了不少东西","like_count":0},{"had_liked":false,"id":327146,"user_name":"树心","can_delete":false,"product_type":"c1","uid":1589523,"ip_address":"","ucode":"6C329F0FF798B9","user_header":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","comment_is_top":false,"comment_ctime":1639960332,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1639960332","product_id":100056701,"comment_content":"收获很多，对底层cpu知识有了更多的了解！","like_count":0},{"had_liked":false,"id":325601,"user_name":"长路漫漫","can_delete":false,"product_type":"c1","uid":2390057,"ip_address":"","ucode":"AAB163DAA7527D","user_header":"https://static001.geekbang.org/account/avatar/00/24/78/29/188c9bce.jpg","comment_is_top":false,"comment_ctime":1639038045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639038045","product_id":100056701,"comment_content":"这节课很有收获","like_count":0},{"had_liked":false,"id":324245,"user_name":"wessonwang","can_delete":false,"product_type":"c1","uid":1000441,"ip_address":"","ucode":"A9BA5E3A3F278E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/f9/723ee153.jpg","comment_is_top":false,"comment_ctime":1638347467,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638347467","product_id":100056701,"comment_content":"课后题，选第二种方案，相对于第一种方案来说，8个实例竞争一个L3 cache，比4个实例竞争要激烈的多，容易出现某些实例的L3缓存被刷出，搞得又得去内存加载数据。","like_count":0},{"had_liked":false,"id":316295,"user_name":"鱼","can_delete":false,"product_type":"c1","uid":1487584,"ip_address":"","ucode":"89EC9CE3AD0281","user_header":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","comment_is_top":false,"comment_ctime":1634263397,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634263397","product_id":100056701,"comment_content":"NUMA下的缓存模式和多IDC部署的系统中的Redis使用方式何其相似，在多IDC部署中，相关的系统尽量放在一个机房共用一个Redis集群而不是跨越公网（NUMA下的总线）去另外一个机房获取缓存数据。","like_count":0},{"had_liked":false,"id":314092,"user_name":"while (1)等;","can_delete":false,"product_type":"c1","uid":1061991,"ip_address":"","ucode":"BAEC7258D65B69","user_header":"https://static001.geekbang.org/account/avatar/00/10/34/67/06a7f9be.jpg","comment_is_top":false,"comment_ctime":1632833166,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1632833166","product_id":100056701,"comment_content":"之前以为CPU核越多性能越强，机器都用的48核，上面只部署一个实例，是不是很浪费？按老师说的是不是两核就够了","like_count":0},{"had_liked":false,"id":307310,"user_name":"热爱学习","can_delete":false,"product_type":"c1","uid":1046673,"ip_address":"","ucode":"9F7D4054F65D66","user_header":"","comment_is_top":false,"comment_ctime":1629021312,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1629021312","product_id":100056701,"comment_content":"课程中有一处这么说明：每个处理器有自己的内存。<br>对于此处的“内存”不是很理解，是内存条中的内存，还是CPU上的内存？","like_count":0,"discussions":[{"author":{"id":1740215,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8d/b7/2ba51589.jpg","nickname":"Daneil","note":"","ucode":"568FFC0C15C379","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392252,"discussion_content":"三级缓存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630922339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299686,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1624795839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624795839","product_id":100056701,"comment_content":"真的讲的特别好，有细节，有理论，有实战代码。","like_count":0},{"had_liked":false,"id":296332,"user_name":"Linton","can_delete":false,"product_type":"c1","uid":1046562,"ip_address":"","ucode":"7918113F03FD44","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/22/a59136c2.jpg","comment_is_top":false,"comment_ctime":1622902579,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622902579","product_id":100056701,"comment_content":"原以为关系不大，没想到是这样","like_count":0},{"had_liked":false,"id":295613,"user_name":"ArtistLu","can_delete":false,"product_type":"c1","uid":1166373,"ip_address":"","ucode":"2E641A3EB4F9AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/cc/25/8c6eab2c.jpg","comment_is_top":false,"comment_ctime":1622514062,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1622514062","product_id":100056701,"comment_content":"请问下，线上已经运行的redis实列，如何能无缝修改源代码绑定指定cpu核上？还是说要停服务？","like_count":0},{"had_liked":false,"id":294876,"user_name":"不凡","can_delete":false,"product_type":"c1","uid":2031689,"ip_address":"","ucode":"28A3EC4C309C56","user_header":"","comment_is_top":false,"comment_ctime":1622120285,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622120285","product_id":100056701,"comment_content":"为什么操作大key会导致CPU使用率高呢","like_count":0},{"had_liked":false,"id":292338,"user_name":"木头人","can_delete":false,"product_type":"c1","uid":1550296,"ip_address":"","ucode":"AB40DDCACE986B","user_header":"https://static001.geekbang.org/account/avatar/00/17/a7/d8/9cdb4896.jpg","comment_is_top":false,"comment_ctime":1620785895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620785895","product_id":100056701,"comment_content":"NUMA架构下，如何知道redis实例和中断程序绑定在了同一个cpu socket内？是否是老师执行lscpu命令中“NUMA node0 CPU(s): 0-5, 12-17”，这一行0-5，12-17逻辑cpu都是同一个cpu socket内，在网上查资料，发现一个socket可能包含多个node，这个时候如何知道socket包含哪些node？感谢老师抽空解答一下。","like_count":0},{"had_liked":false,"id":290451,"user_name":"manatee","can_delete":false,"product_type":"c1","uid":1041112,"ip_address":"","ucode":"708D90E7A265BD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e2/d8/f0562ede.jpg","comment_is_top":false,"comment_ctime":1619572054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619572054","product_id":100056701,"comment_content":"请问网络中断程序如何绑核呢","like_count":0},{"had_liked":false,"id":289002,"user_name":"学而不思则罔","can_delete":false,"product_type":"c1","uid":1091673,"ip_address":"","ucode":"3EAF4C37386F0E","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/59/e5a7762e.jpg","comment_is_top":false,"comment_ctime":1618816991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618816991","product_id":100056701,"comment_content":"收获很大！","like_count":0},{"had_liked":false,"id":287397,"user_name":"小木桩","can_delete":false,"product_type":"c1","uid":2435715,"ip_address":"","ucode":"F0A45F03C6B62D","user_header":"https://static001.geekbang.org/account/avatar/00/25/2a/83/39e56b8b.jpg","comment_is_top":false,"comment_ctime":1617931146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617931146","product_id":100056701,"comment_content":"用&#47; etc&#47;init. d&#47; redis_6379 start   如何绑核","like_count":0},{"had_liked":false,"id":286355,"user_name":"骏Jero","can_delete":false,"product_type":"c1","uid":1133122,"ip_address":"","ucode":"C0D505B088275E","user_header":"https://static001.geekbang.org/account/avatar/00/11/4a/42/b2c7dd30.jpg","comment_is_top":false,"comment_ctime":1617266560,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617266560","product_id":100056701,"comment_content":"老师，你好，读完这篇文章，感觉第一种多核cpu绑定一个核解决，尾延迟的方法一定会带来bgsave，aof多线程抢占cpu的问题吧。按照这个思路其实最好还是 多cpu架构绑定两个逻辑核或者就是在6.0中直接配置哪些操作在哪些核执行吧？","like_count":0},{"had_liked":false,"id":285332,"user_name":"文武木子","can_delete":false,"product_type":"c1","uid":1015986,"ip_address":"","ucode":"348752BDECD65F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/80/b2/2e9f442d.jpg","comment_is_top":false,"comment_ctime":1616743062,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"1616743062","product_id":100056701,"comment_content":"极限优化了，不过还是学到一些操作系统知识了","like_count":0},{"had_liked":false,"id":280661,"user_name":"Geek_卞","can_delete":false,"product_type":"c1","uid":2261862,"ip_address":"","ucode":"06FC593F0039A9","user_header":"","comment_is_top":false,"comment_ctime":1614307529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614307529","product_id":100056701,"comment_content":"CPU绑核，作为对Redis进程处理用户请求的底层优化方案，也存在着一定的弊端，比如资源竞争。命令<br>taskset -c 0,12 .&#47;redis-server可以让一个Redis实例绑定在一个物理核上，能在一定程度上缓解资源竞争问题！","like_count":0},{"had_liked":false,"id":277431,"user_name":"kaixiao7","can_delete":false,"product_type":"c1","uid":1242577,"ip_address":"","ucode":"505EC4AFB5E656","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/d1/cc6f82eb.jpg","comment_is_top":false,"comment_ctime":1612410123,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1612410123","product_id":100056701,"comment_content":"老师，单 CPU 处理器的核编号是不是和 NUMA 架构的核编号一样呢？<br>例如：一个CPU 有 2 个物理核，每个物理核有 2 个逻辑核，那么<br>0 表示第一个物理核的第一个逻辑核编号<br>1 表示第二个物理核的第一个逻辑核编号<br>2 表示第一个物理核的第二个逻辑核编号<br>3 表示第二个物理核的第二个逻辑核编号","like_count":0,"discussions":[{"author":{"id":1740215,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8d/b7/2ba51589.jpg","nickname":"Daneil","note":"","ucode":"568FFC0C15C379","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392253,"discussion_content":"lscpu看一下，感觉一个CPU也是NUMA架构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630922469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271638,"user_name":"下个目标45k","can_delete":false,"product_type":"c1","uid":1066508,"ip_address":"","ucode":"193BA8C3AA9A61","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","comment_is_top":false,"comment_ctime":1609744897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609744897","product_id":100056701,"comment_content":"写的真好啊,深入浅出","like_count":0},{"had_liked":false,"id":265596,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1606958721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606958721","product_id":100056701,"comment_content":"采用方案2。<br>方案1的时候实例内部仍旧存在竞争，方案2可以的避免这种情况。","like_count":0},{"had_liked":false,"id":265327,"user_name":"Sr7vy","can_delete":false,"product_type":"c1","uid":1276653,"ip_address":"","ucode":"4C2D930E984BC9","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/ed/f52b84b9.jpg","comment_is_top":false,"comment_ctime":1606870482,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606870482","product_id":100056701,"comment_content":"提问，关于redis监控 used_cpu_sys 和 used_cpu_user含义？最近used_cpu_sys是不是飙高，辛苦老师帮分析下什么原因","like_count":0},{"had_liked":false,"id":264576,"user_name":"张海鹏","can_delete":false,"product_type":"c1","uid":1213390,"ip_address":"","ucode":"0186CABC7864CF","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/ce/d52344f4.jpg","comment_is_top":false,"comment_ctime":1606528980,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1606528980","product_id":100056701,"comment_content":"我选第一种。毕竟是分片集群，集群间节点少不了数据交互，槽重新分配什么数据量还大，题目还说了，全是主节点，这就意味着任何一个节点都不能有长时间阻塞，数据迁移是要阻塞的。所以，我选第一种。","like_count":0},{"had_liked":false,"id":261099,"user_name":"明月几时","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1605195376,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1605195376","product_id":100056701,"comment_content":"很不错，嘿嘿收货很大&#47;","like_count":0},{"had_liked":false,"id":261098,"user_name":"明月几时","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1605195357,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1605195357","product_id":100056701,"comment_content":"不同的物理核还会共享一个共同的三级缓存（Level 3 cache，简称为 L3 cache）。L3 缓存能够使用的存储资源比较多，所以一般比较大，能达到几 MB 到几十 MB，这就能让应用程序缓存更多的数据。当 L1、L2 缓存中没有数据缓存时，可以访问 L3，尽可能避免访问内存。","like_count":0},{"had_liked":false,"id":260180,"user_name":"凡人修仙","can_delete":false,"product_type":"c1","uid":2257084,"ip_address":"","ucode":"0891E43FCD646A","user_header":"","comment_is_top":false,"comment_ctime":1604935062,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604935062","product_id":100056701,"comment_content":"小菜鸟有一个大胆的想法，不知道可以不，就是启动后，热会机，就可以让每个物理核都缓存上了","like_count":0},{"had_liked":false,"id":260071,"user_name":"袁东昊的电信手机","can_delete":false,"product_type":"c1","uid":2300724,"ip_address":"","ucode":"938393B2C47702","user_header":"","comment_is_top":false,"comment_ctime":1604919052,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604919052","product_id":100056701,"comment_content":"老师，为什么redis的主动淘汰是1秒100次？","like_count":0},{"had_liked":false,"id":257945,"user_name":"Geek_772139","can_delete":false,"product_type":"c1","uid":1902221,"ip_address":"","ucode":"06FBB079BC38EB","user_header":"","comment_is_top":false,"comment_ctime":1604219841,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604219841","product_id":100056701,"comment_content":"如果网络中断处理程序，绑定了一个CPU核，那对于运行在另一个CPU核上的所有程序，都不能利用缓存cache了吧？","like_count":0},{"had_liked":false,"id":255780,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1603427330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603427330","product_id":100056701,"comment_content":"提问：Redis部署在docker容器中，还能采用方案中的绑核操作吗？","like_count":0},{"had_liked":false,"id":255777,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1603427247,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603427247","product_id":100056701,"comment_content":"第一反应是方案1，考虑到槽位迁移时，集群节点需要进行网络交互。但是按照假设不考虑网络数据读取影响，选择方案2。<br>方案1的缺点：所有实例共享CPU槽1的内存，资源竞争严重，而且存在后台线程处理时，会影响到实例的主线程运行。<br><br>操作系统知识不牢固，能想到的点儿不多<br><br>kaito描述的比较全面","like_count":0},{"had_liked":false,"id":255108,"user_name":"千帆一道带风轻","can_delete":false,"product_type":"c1","uid":1675729,"ip_address":"","ucode":"085E197D5FD1D5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Kfsq4rlKCRyeowVbyeX0olVa1tR8jZB717FIz530AMNsZjMEgsIQNtBzNnqy2GAJNwS0OXdsFQcziaSDVGD5XcQ/132","comment_is_top":false,"comment_ctime":1603267507,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1603267507","product_id":100056701,"comment_content":"我想知道老师是如何测量Redis 的 99% 尾延迟的，是否可以提供方法或者工具","like_count":0,"discussions":[{"author":{"id":1675729,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Kfsq4rlKCRyeowVbyeX0olVa1tR8jZB717FIz530AMNsZjMEgsIQNtBzNnqy2GAJNwS0OXdsFQcziaSDVGD5XcQ/132","nickname":"千帆一道带风轻","note":"","ucode":"085E197D5FD1D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315914,"discussion_content":"redis-benchmark性能压测的时候延迟的单位都是毫秒，你的压测结果是微秒，是怎么做到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603336483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253779,"user_name":"feihui","can_delete":false,"product_type":"c1","uid":1007294,"ip_address":"","ucode":"13F1D4A82BC650","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/be/9ea55f46.jpg","comment_is_top":false,"comment_ctime":1602870337,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1602870337","product_id":100056701,"comment_content":"老师，想请教个问题：将进程1绑定在某个固定CPU核上，可以避免L1&#47;L2缓存的重加载，有个疑惑是当该进程的CPU时间片用完，另外一个进程2调度到该核心上执行，此时不会把进程1的缓存刷掉吗？","like_count":0,"discussions":[{"author":{"id":1073443,"avatar":"https://static001.geekbang.org/account/avatar/00/10/61/23/30d134cf.jpg","nickname":"Young","note":"","ucode":"075C0BBE20FD8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372229,"discussion_content":"同样的疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620230897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253394,"user_name":"陈靖","can_delete":false,"product_type":"c1","uid":1147418,"ip_address":"","ucode":"8C9596A54DB5C8","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/1a/64ec25ff.jpg","comment_is_top":false,"comment_ctime":1602726147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602726147","product_id":100056701,"comment_content":"我想知道都放一起有没有好处","like_count":0},{"had_liked":false,"id":251884,"user_name":"篮球不是这么打的","can_delete":false,"product_type":"c1","uid":1749078,"ip_address":"","ucode":"5DC354E8541C6B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b0/56/fc077ef8.jpg","comment_is_top":false,"comment_ctime":1601949028,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601949028","product_id":100056701,"comment_content":"老师，如果是想要把Redis的实例部署在容器里，那如何进行绑核？","like_count":0},{"had_liked":false,"id":250903,"user_name":"dfuru","can_delete":false,"product_type":"c1","uid":2110772,"ip_address":"","ucode":"0222FADA093D95","user_header":"","comment_is_top":false,"comment_ctime":1601276663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601276663","product_id":100056701,"comment_content":"方案1，当数据在redis实例间迁移时，读请求可能在新node节点的L1、L2甚至L3缓存中未命中，需要重新加载缓存，读延迟增大。","like_count":0},{"had_liked":false,"id":249483,"user_name":"Lemon","can_delete":false,"product_type":"c1","uid":2136414,"ip_address":"","ucode":"E52BB361B69825","user_header":"https://static001.geekbang.org/account/avatar/00/20/99/5e/33481a74.jpg","comment_is_top":false,"comment_ctime":1600670866,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600670866","product_id":100056701,"comment_content":"get到了许多知识点，干货满满！","like_count":0},{"had_liked":false,"id":248540,"user_name":"写点啥呢","can_delete":false,"product_type":"c1","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1600217660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600217660","product_id":100056701,"comment_content":"请问蒋老师，文章的例子代码是硬编码了子进程绑定的CPU编号，这样因为不知道运行时主进程绑定的CPU还是会有一定竞争的风险。那么有没有可以避免这种情况的方案，能够动态根据主进程绑定的情况分配子进程应该使用的CPU编号的实现呢？","like_count":0},{"had_liked":false,"id":248531,"user_name":"jacky","can_delete":false,"product_type":"c1","uid":2105773,"ip_address":"","ucode":"CF3638E2177182","user_header":"https://static001.geekbang.org/account/avatar/00/20/21/ad/734464b7.jpg","comment_is_top":false,"comment_ctime":1600214918,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1600214918","product_id":100056701,"comment_content":"绑核用的都是逻辑核编号吧，那么在云虚机进行相关操作也是一样的了？","like_count":0,"discussions":[{"author":{"id":1113737,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","nickname":"xuanyuan","note":"","ucode":"1EC79B9372868F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337571,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608978206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}