{"id":324192,"title":"13 | 如何防止数据被调包？","content":"<p>你好，我是范学雷。</p><p>还记得我们在前面讨论过CBC模式补齐预言攻击吗？当时，我们谈到了一个问题，就是解密端是无法判断解密得到的数据是发送者发送的数据，还是被人掉了包的数据的。</p><p>这就好比，牛郎要送的信是，“七夕今宵看碧霄，牛郎织女渡鹊桥”。织女拆开一看，却是一堆乱码，或者是变成了“我断不思量，你莫思量我。将你从前与我心，付与他人可”。</p><p>如果这封信真的变成了一堆乱码，就意味着信息没有被有效地送达，这样会给织女愁上加愁；而如果内容是“我断不思量”，简直就是一支穿心箭，这可一点都不好玩。</p><p>那么，织女看到“我断不思量，你莫思量我。将你从前与我心，付与他人可”的信件，除了靠坚贞不渝的信念这个不靠谱的办法之外，她有没有其他的办法来判断这是一封伪造的信件？牛郎除了坚信织女有坚贞不渝的信念之外，他有没有其他的办法来预防信件的伪造？</p><p>其实，<strong>解决<strong><strong>问题</strong></strong>的思路<strong><strong>也</strong></strong>很直观，就是要能够验证发送的信息</strong>。牛郎发送信息时，心里要想着意外情况，要给织女提供验证信息的办法。织女收到信息时，要有办法验证信息的真伪，不能只依靠心里的信念。</p><p>那么，我们今天这一讲，就来分析一下如何防止数据被调包这个问题。</p><h2>怎样有效地验证一段信息？</h2><p>首先，我们来分析下，要想有效地验证一段信息，需要满足什么条件呢？</p><!-- [[[read_end]]] --><p>第一个条件就是，<strong>我们要有额外的信息</strong>。只有要验证的信息本身，是没有办法验证这个信息的。也就是说，信息本身不能自己验证自己。这个额外的信息，我们暂且称之为验证信息。</p><p>第二个条件就是，<strong>验证<strong><strong>信息和待验证的消息</strong></strong>之间要有关联</strong>。如果没有关联，也就意味着如果我们替换掉待验证的信息，验证信息并不受影响，这显然起不到验证的作用。</p><p>如果待验证的信息有变动，验证信息也要变动，而且验证信息的变动结果要不可预测。如果可以人为构造一段信息，它的验证信息和待验证的信息是一样的，也起不到验证的效果。</p><p>第三个条件，就是<strong>验证信息的计算要快，数据要小</strong>。不知道这一点，你能不能理解？这点说的就是，计算效率要高，要不然验证信息的实用和推广价值就会大打折扣。</p><p>那么，有同时满足上述三个条件的一个方案吗？消息验证码（Message Authentication Code, MAC）就是最常用的满足上述三个条件的一个方案。</p><p><img src=\"https://static001.geekbang.org/resource/image/d5/c9/d5eee6ab3fe89befdd25f8cfbe521ec9.jpeg?wh=2284*1285\" alt=\"\"></p><h2>消息验证码是怎么工作的？</h2><p>既然消息验证码可以同时满足我们的三个条件，那么消息验证码是怎么工作的？</p><p>首先，我们来看使用消息验证码的前提，就是信息的发送方和接收方要持有相同的密钥，这和我们前面讨论的对称密钥的条件是一样的。能够使用对称密钥的场景，都能够满足这个前提。</p><p>另外，信息的发送方和接收方要使用相同的消息验证函数。这个函数的输入数据就是对称密钥和待验证信息。信息的发送方使用消息验证函数，可以生成消息验证码。</p><p>接下来，信息发送方把待验证信息和消息验证码都发送给信息接收方。信息接收方使用相同的消息验证函数和对称密钥，以及接收到的待验证信息，生成消息验证码。</p><p>然后，信息接收方对比接收到的消息验证码和自己生成的消息验证码。如果两个消息验证码是一样的，就表明待验证信息不是伪造的信息。否则，待验证信息就是被篡改过的信息。</p><p>这听起来是一个不错的方案。不过，消息验证函数需要使用对称密钥，输入任意大小的数据，输出为一小段数据。什么样的消息验证函数能够承担起这样的任务呢？</p><p>通常的对称密钥算法，密文数据不会小于明文数据，这样的话，就不能满足验证数据小的要求。因此，通常的对称密钥算法，我们并不能当做消息验证函数使用。</p><p>那么，我们到底该怎么选择消息验证函数？</p><h2>该怎么选择消息验证函数？</h2><p>我刚才提到，消息验证函数的输出应该是一小段数据，这一点有没有让你想起，我们前面提到的单向散列函数？我们再来回顾一下单向散列函数的三个特点：</p><ul>\n<li>正向计算容易，逆向运算困难；</li>\n<li>运算结果均匀分布，构造碰撞困难；</li>\n<li>给定数据的散列值是确定的，长度固定。</li>\n</ul><p>如果你再回头看看，我们上面讨论的消息验证的三个条件，单向散列函数就能够完美地满足这三个条件。那么，对称密钥怎么和单向散列函数结合起来，构造出消息验证函数呢？<strong>最常见的方案就是基于单向散列函数的消息验证码。</strong></p><p>基于单向散列函数的消息验证码（Hash-based Message Authentication Code， HMAC）这个名字是不是听起来太长了，所以我们通常使用它的简称HMAC。</p><p>在HMAC的算法里，单向散列函数的输入数据是由对称密钥和待验证消息构造出来的。到目前为止，这种构造方法还没有明显的安全问题，我们不再讨论构造细节。如果你感兴趣，可以查阅1997年发表的RFC 2104。</p><p>一个密码学算法经历了二十多年还没有明显的安全漏洞，这真的是很难得！</p><p>不过，你需要注意的是，HMAC算法并不使用我们前面讨论过的链接模式。所以，对称密钥链接模式的各种安全问题并不会影响HMAC算法的安全性。</p><h2>为什么需要对称密钥？</h2><p>到这里，你是不是早就有了一个疑问，消息验证函数为什么还需要对称密钥呢？我们前面提到，单向散列函数也可以验证数据的完整性。为什么它不直接使用单向散列函数呢？</p><p>还记得吗？我们前面在讨论单向散列函数解决数据完整性问题的时候，还有一个遗留的问题，就是怎么获得原始数据的散列值。对称密钥就是用来解决这个问题的。</p><p>我们先来看看，如果没有对称密钥的加入，消息验证码还能不能工作。</p><p>信息发送方把待验证信息和消息验证码都发送给信息接收方。假设存在一个中间攻击者，能够解开待验证信息和消息验证码。由于单向散列函数是公开的算法，中间攻击者就可以篡改待验证信息，重新生成消息验证码。</p><p>然后，中间攻击者把篡改的信息和篡改的验证码发给信息接收方。篡改的信息和篡改的验证码能够通过信息接收方的信息验证。也就是说，这样的话，信息接收方就没有办法识别出这个信息是不是原始的、没有篡改的信息。这样，信息验证就失效了。</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/02/3ba5851332a0fcc8ea9630473c5c8502.jpeg?wh=2284*1285\" alt=\"\"></p><p>可是，如果对称密钥参与了消息验证码的运算，由于中间攻击者并不知道对称密钥的数据，攻击者就很难伪造出一个能够通过验证的消息验证码。换一个说法，<strong>对称密钥的参与，是为了确保散列值来源于原始数据，而不是篡改的数据。</strong></p><p>有了对称密钥这个私有数据的参与，消息验证码的算法是不是就没有安全漏洞了呢？</p><h2>怎么计算HMAC算法的强度？</h2><p>HMAC算法与对称密钥和单向散列函数息息相关，所以，对称密钥的安全强度和单向散列函数的安全强度，都会影响HMAC算法的安全强度。该怎么计算HMAC算法的安全强度呢？</p><p>严格的来说，HMAC算法的安全强度，是由对称密钥的安全强度和两倍的散列值长度之间较小的那个数值决定的。比如，如果我们选择256位的对称密钥，以及散列值长度是160位的SHA-1。</p><p>两倍的散列值长度就是320位。那么，在256位和320位两个数值之间，256位是较小的数值。那么，这个HMAC运算的安全强度就是256位。</p><p>一般来说，两倍的散列值长度通常大于流行对称密钥强度。所以，HMAC算法的强度，通常也是由对称密钥决定。简单起见，<strong>对于流行的HMAC算法，我们只需要考虑对称密钥的安全强度</strong>。</p><h2>有哪些常见的HMAC算法？</h2><p>HMAC算法是由单向散列函数的算法确定的。下面的表格，我列出了一些常见的算法。同样的，我们把HMAC算法也按照退役的、遗留的以及现行的算法来分类。</p><p><img src=\"https://static001.geekbang.org/resource/image/54/20/5409851byy6b8c39102fee2b98aaa720.jpeg?wh=2284*1285\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/6f/c8/6fe58983135d71e44afe36cf2b8797c8.jpeg?wh=2284*1285\" alt=\"\"></p><p>其中，<strong>HmacSHA256和HmacSHA384是目前最流行的两个HMAC算法</strong>。和以前的讨论一样，为了最大限度的互操作性和兼容性，我们应该选择当前最流行的算法。</p><p>如果单独的加密并不能解决信息的有效传递问题，有没有加密算法，能够综合考虑信息的机密性和完整性？如果存在这样的算法，我们就不需要额外设计消息验证码了。下一次，我们来讨论这个问题。</p><h2>Take Away（今日收获）</h2><p>今天，我们讨论了防止数据被调包的技术，也就是消息验证码。我们讨论了消息验证码要解决的问题，以及消息验证码的工作原理。我们还谈到如何选择消息验证函数，最常见的方案就是选择基于单向散列函数的消息验证码，也就是HMAC。</p><p>为什么我们需要对称密钥？其实是为了解决单向散列函数的遗留问题，因为对称密钥的参与，可以确保散列值来源于原始数据，而不是篡改的数据。</p><p>最后，我们还研究了怎么计算HMAC算法的强度，还列出了目前常见的HMAC算法。我们应该选择当前最流行的算法，而对于流行的HMAC算法，我们只需要考虑对称密钥的安全强度。</p><p>通过今天的讨论，我们要：</p><ul>\n<li>了解消息验证码要解决的问题；</li>\n<li>尽量选用现行的、流行的算法：HmacSHA256和HmacSHA384。</li>\n</ul><h2>思考题</h2><p>今天的思考题，是一个复习题，也是一个改进的题目。</p><p>我们前面讨论过的牛郎织女的约会问题。我们再来看看现在，我们有没有更好的办法解决这个问题。如果牛郎要给织女发信息，七夕相约鹊桥会。</p><blockquote>\n<p>织女：<br>\n七月初七晚七点，鹊桥相会。不见不散。<br>\n牛郎</p>\n</blockquote><p>你能够帮助牛郎想想吗？该怎么使用单向散列函数和消息验证码，来防范约会信息被恶意修改？你建议的办法还有没有其他的问题？</p><p>欢迎在留言区留言，记录、讨论你的想法。</p><p>好的，今天就这样，我们下次再聊。</p><p><strong>附：表格中算法参考文献链接</strong></p><ul>\n<li>HmacMD5：<a href=\"https://tools.ietf.org/html/rfc1321\">RFC 1321 </a></li>\n<li>HmacSHA1：<a href=\"https://csrc.nist.gov/publications/detail/fips/180/1/archive/1995-04-17\">FIPS 180-1</a></li>\n<li>HmacSHA224：<a href=\"https://csrc.nist.gov/publications/detail/fips/180/3/archive/2008-10-31\">FIPS 180-3</a></li>\n<li>HmacSHA256、HmacSHA384、HmacSHA512： <a href=\"https://csrc.nist.gov/publications/detail/fips/180/2/archive/2002-08-01\">FIPS 180-2</a></li>\n<li>HmacSHA512/224、HmacSHA512/256 ：<a href=\"https://csrc.nist.gov/publications/detail/fips/180/4/final\">FIPS 180-4 </a></li>\n<li>HmacSHA3-224、HmacSHA3-256、HmacSHA3-384、HmacSHA3-512：<a href=\"https://csrc.nist.gov/publications/detail/fips/202/final\">FIPAS 202</a></li>\n</ul>","neighbors":{"left":{"article_title":"12 | 怎么利用加密端攻击？","id":323436},"right":{"article_title":"14 | 加密数据能够自我验证吗？","id":325231}},"comments":[{"had_liked":false,"id":309887,"user_name":"Geek_828b39","can_delete":false,"product_type":"c1","uid":2729802,"ip_address":"","ucode":"DE2A5F215A3C1E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/D62JX0VEX0yhnWxgbiaXMUnEqdsVxc8JMxUBibVicbLSZ6zia606EG0zI9oosiceHsdiavDZGUyHzcvsEExFGxwP4mDg/132","comment_is_top":false,"comment_ctime":1630381566,"is_pvip":false,"replies":[{"id":"112396","content":"看得很细，问题也很好。简单的说，这和HMAC算法的构造有关系，两倍弹列值长度以内的数据，理论上不能构造出碰撞的数据，两倍以外就没办法保障了。 详细的算法，你可以看看RFC 2104里的描述。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1630551836,"ip_address":"","comment_id":309887,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5925348862","product_id":100064801,"comment_content":"严格的来说，HMAC 算法的安全强度，是由对称密钥的安全强度和两倍的散列值长度之间较小的那个数值决定的。<br>老师，这里为什么是两倍的散列值？","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526052,"discussion_content":"看得很细，问题也很好。简单的说，这和HMAC算法的构造有关系，两倍弹列值长度以内的数据，理论上不能构造出碰撞的数据，两倍以外就没办法保障了。 详细的算法，你可以看看RFC 2104里的描述。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630551836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269466,"user_name":"Litt1eQ","can_delete":false,"product_type":"c1","uid":2083695,"ip_address":"","ucode":"D80D0B14F3B312","user_header":"https://static001.geekbang.org/account/avatar/00/1f/cb/6f/b6693f43.jpg","comment_is_top":false,"comment_ctime":1608675256,"is_pvip":true,"replies":[{"id":"97865","content":"嗯，要想办法先交换密钥。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1608873689,"ip_address":"","comment_id":269466,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5903642552","product_id":100064801,"comment_content":"双方可以用之前约定好的密钥 然后牛郎用这个密钥给消息生成一个HMAC 然后消息和HMAC一同发给织女 织女收到消息 验证HMAC和消息是否匹配 则可确定消息有无篡改 这样做的前提是牛郎和织女能够安全的交换密钥 消息内容也最好加上具体的时间（防止重放攻击）","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512283,"discussion_content":"嗯，要想办法先交换密钥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608873689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288723,"user_name":"三叶虫tlb","can_delete":false,"product_type":"c1","uid":1010499,"ip_address":"","ucode":"A8236974932E6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/43/b6bcab56.jpg","comment_is_top":false,"comment_ctime":1618642577,"is_pvip":false,"replies":[{"id":"104883","content":"算法不同","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1618858554,"ip_address":"","comment_id":288723,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618642577","product_id":100064801,"comment_content":"HMAC 和 单向散列函数+ salt 有什么不同。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518717,"discussion_content":"算法不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618858554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280270,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1614147818,"is_pvip":false,"replies":[{"id":"102070","content":";-) 是不是前几篇还没来得及看呢？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1614580633,"ip_address":"","comment_id":280270,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1614147818","product_id":100064801,"comment_content":"既然说到了消息验证码，为啥不直接将消息直接使用对称加密，这样数据也不会被篡改调包；使用消息验证码的方式得先将原始消息散列，然后加密，最后把原始消息，和验证消息发出去，这样不是很多此一举？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516041,"discussion_content":";-) 是不是前几篇还没来得及看呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614580633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274421,"user_name":"zzzz","can_delete":false,"product_type":"c1","uid":2336388,"ip_address":"","ucode":"1E84C07366CBB0","user_header":"https://static001.geekbang.org/account/avatar/00/23/a6/84/5ca855d6.jpg","comment_is_top":false,"comment_ctime":1611018560,"is_pvip":false,"replies":[{"id":"99619","content":"是的，加解密和消息验证是两个领域的问题。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1611037924,"ip_address":"","comment_id":274421,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611018560","product_id":100064801,"comment_content":"老师，HMAC的传递方式是没有涉及上一节讲的明文密文对吗？<br>就是，加密解密和这里的消息验证是两块不相关的内容吗<br>我先把问题记在这里，等看完了全部再来看看嘿嘿","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514012,"discussion_content":"是的，加解密和消息验证是两个领域的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611037924,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270055,"user_name":"孜孜","can_delete":false,"product_type":"c1","uid":1018203,"ip_address":"","ucode":"7EF4FB644357CE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg","comment_is_top":false,"comment_ctime":1608887580,"is_pvip":true,"replies":[{"id":"97887","content":"嗯，了解这个思路了。谢谢！","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1608920366,"ip_address":"","comment_id":270055,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1608887580","product_id":100064801,"comment_content":"双向验证软件(two factor），比如Google身份验证器等，都会把epoch分段，然后在加上一点容错。这样即使客户端在提示的30s快到的时候输入验证码，服务端也会认证通过。 如果手动改变手机时间，双向认证软件会工作不正常。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512501,"discussion_content":"嗯，了解这个思路了。谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608920366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269781,"user_name":"范","can_delete":false,"product_type":"c1","uid":1574450,"ip_address":"","ucode":"D115514B2AA5CC","user_header":"https://static001.geekbang.org/account/avatar/00/18/06/32/3de6a189.jpg","comment_is_top":false,"comment_ctime":1608783637,"is_pvip":false,"replies":[{"id":"97846","content":"同意前两条，不同意最后一条。密码学是用来解决人的问题的，回不去。认为人好了就好了，就太理想了。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1608835346,"ip_address":"","comment_id":269781,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1608783637","product_id":100064801,"comment_content":"谢谢老师的分享。<br>密码学相关的内容首先是发展变化的，没有一套算法或者密钥是无懈可击的；其次攻守双方是互相促进的；最后，密码学还是回归到人的问题，计算机只是工具。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512386,"discussion_content":"同意前两条，不同意最后一条。密码学是用来解决人的问题的，回不去。认为人好了就好了，就太理想了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608835346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":269535,"user_name":"孜孜","can_delete":false,"product_type":"c1","uid":1018203,"ip_address":"","ucode":"7EF4FB644357CE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/89/5b/d8f78c1e.jpg","comment_is_top":false,"comment_ctime":1608693832,"is_pvip":true,"replies":[{"id":"97859","content":"有点好奇，客户端和服务端的时间没有偏差吗？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1608872369,"ip_address":"","comment_id":269535,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1608693832","product_id":100064801,"comment_content":"我们用的 生成6位数字的双向验证软件，其实就是对当前时间进行hmac。因为时间这个原数据客户端和服务端都是一样的，所以hmac也应该是一样的。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512312,"discussion_content":"有点好奇，客户端和服务端的时间没有偏差吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608872369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}