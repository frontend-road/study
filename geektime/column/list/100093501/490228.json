{"id":490228,"title":"加餐｜聊聊Go语言的指针","content":"<p>你好，我是Tony Bai。</p><p>刚刚完成专栏结束语，我又马不停蹄地开始撰写这篇加餐，因为在结束语中我曾提到过对专栏没有介绍指针类型的不安，如果你是编程初学者，或者只有动态语言的经验，又或者只有像Java这类不支持指针的静态语言编程的经验，缺少指针的讲解就可能会给你的学习过程带来一些困惑。</p><p>因此，在这一篇加餐中，我就来补上指针类型这一课。<strong>不过，我建议你不要把这篇当作加餐，而是当作本专栏必学的一节课</strong>。</p><p>那么什么是指针呢？它和我们常见的Go类型，比如int、string、切片类型等有什么区别呢？下面我们就来一探究竟!</p><h2>什么是指针类型</h2><p>和我们学过的所有类型都不同，指针类型是依托某一个类型而存在的，比如：一个整型为int，那么它对应的整型指针就是*int，也就是在int的前面加上一个星号。没有int类型，就不会有*int类型。而int也被称为*int指针类型的<strong>基类型</strong>。</p><p>我们泛化一下指针类型的这个定义：<strong>如果我们拥有一个类型T，那么以T作为基类型的指针类型为*T</strong>。</p><p>声明一个指针类型变量的语法与非指针类型的普通变量是一样的，我们以声明一个*T指针类型的变量为例：</p><pre><code class=\"language-plain\">var p *T\n</code></pre><p>不过Go中也有一种指针类型是例外，它不需要基类型，它就是<strong>unsafe.Pointer</strong>。unsafe.Pointer类似于C语言中的void*，用于表示一个通用指针类型，也就是<strong>任何指针类型都可以显式转换为一个unsafe.Pointer，而unsafe.Pointer也可以显式转换为任意指针类型</strong>，如下面代码所示：</p><!-- [[[read_end]]] --><pre><code class=\"language-plain\">var p *T\nvar p1 = unsafe.Pointer(p) // 任意指针类型显式转换为unsafe.Pointer\np = (*T)(p1)               // unsafe.Pointer也可以显式转换为任意指针类型\n</code></pre><p>unsafe.Pointer是Go语言的高级特性，在Go运行时与Go标准库中unsafe.Pointer都有着广泛的应用。但unsafe.Pointer属于unsafe编程范畴，我这里就不深入了，你感兴趣可以查一下资料。</p><p>如果指针类型变量没有被显式赋予初值，那么它的值为<strong>nil</strong>：</p><pre><code class=\"language-plain\">var p *T\nprintln(p == nil) // true\n</code></pre><p>那么，如果要给一个指针类型变量赋值，我们该怎么做呢？我们以一个整型指针类型为例来看一下：</p><pre><code class=\"language-plain\">var a int = 13\nvar p *int = &amp;a  // 给整型指针变量p赋初值\n</code></pre><p>在这个例子中，我们用<code>&amp;a</code>作为*int指针类型变量p的初值，这里变量a前面的<code>&amp;</code>符号称为<strong>取地址符号</strong>，这一行的含义就是将变量a的地址赋值给指针变量p。这里要注意，我们只能使用基类型变量的地址给对应的指针类型变量赋值，如果类型不匹配，Go编译器是会报错的，比如下面这段代码：</p><pre><code class=\"language-plain\">var b byte = 10\nvar p *int = &amp;b // Go编译器报错：cannot use &amp;b (value of type *byte) as type *int in variable declaration \n</code></pre><p>到这里，我们可以看到：指针类型变量的值与我们之前所了解的任何类型的值都不同，那它究竟有什么特别之处呢？我们继续往下看。</p><p>在专栏的第10讲中，我们学习过如何在Go中声明一个变量。每当我们声明一个变量，Go都会为变量分配对应的内存空间。如果我们声明的是非指针类型的变量，那么Go在这些变量对应的内存单元中究竟存储了什么呢？</p><p>我们以最简单的整型变量为例，看看对应的内存单元存储的内容：</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/36/3c238629fa4bc42703757a9213963436.jpg?wh=1920x1047\" alt=\"图片\"></p><p>我们看到，<strong>对于非指针类型变量，Go在对应的内存单元中放置的就是该变量的值</strong>。我们对这些变量进行修改操作的结果，也会直接体现在这个内存单元上，如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/ac/3b/acd6c0441f7d9e4bd3beeb337348f93b.jpg?wh=1920x1047\" alt=\"图片\"></p><p>那么，指针类型变量在对应的内存空间中放置的又是什么呢？我们还以*int类型指针变量为例，下面这张示意图就展示了该变量对应内存空间存储的值究竟是什么：</p><p><img src=\"https://static001.geekbang.org/resource/image/60/57/60cd01d8d93def15e88yyd48a1dcdd57.jpg?wh=1920x1047\" alt=\"图片\"></p><p>从图中我们看到，<strong>Go为指针变量p分配的内存单元中存储的是整型变量a对应的内存单元的地址</strong>。也正是由于指针类型变量存储的是内存单元的地址，指针类型变量的大小与其基类型大小无关，而是和系统地址的表示长度有关。比如下面例子：</p><pre><code class=\"language-plain\">package main\n\nimport \"unsafe\"\n\ntype foo struct {\n    id   string\n    age  int8\n    addr string\n}\n\nfunc main() {\n    var p1 *int\n    var p2 *bool\n    var p3 *byte\n    var p4 *[20]int\n    var p5 *foo\n    var p6 unsafe.Pointer\n    println(unsafe.Sizeof(p1)) // 8 \n    println(unsafe.Sizeof(p2)) // 8\n    println(unsafe.Sizeof(p3)) // 8\n    println(unsafe.Sizeof(p4)) // 8\n    println(unsafe.Sizeof(p5)) // 8\n    println(unsafe.Sizeof(p6)) // 8\n}\n</code></pre><p>这里的例子通过unsafe.Sizeof函数来计算每一个指针类型的大小，我们看到，无论指针的基类型是什么，不同类型的指针类型的大小在同一个平台上是一致的。在x86-64平台上，地址的长度都是8个字节。</p><p>unsafe包的Sizeof函数原型如下：</p><pre><code class=\"language-plain\">func Sizeof(x ArbitraryType) uintptr\n</code></pre><p>这个函数的返回值类型是uintptr，这是一个Go预定义的标识符。我们通过go doc可以查到这一类型代表的含义：<strong>uintptr是一个整数类型，它的大小足以容纳任何指针的比特模式（bit pattern）</strong>。</p><p>这句话比较拗口，也不好理解。我们换个方式，可以将这句话理解为：<strong>在Go语言中uintptr类型的大小就代表了指针类型的大小</strong>。</p><p>一旦指针变量得到了正确赋值，也就是指针指向某一个合法类型的变量，我们就可以通过指针读取或修改其指向的内存单元所代表的基类型变量，比如：</p><pre><code class=\"language-plain\">var a int = 17\nvar p *int = &amp;a\nprintln(*p) // 17 \n(*p) += 3\nprintln(a)  // 20\n</code></pre><p>我们用一副示意图来更直观地表示这个过程：</p><p><img src=\"https://static001.geekbang.org/resource/image/f0/97/f0989112yy0ccf34d8ff06f9d4cdc497.jpg?wh=1920x1047\" alt=\"图片\"></p><p>通过指针变量读取或修改其指向的内存地址上的变量值，这个操作被称为指针的<strong>解引用（dereference）</strong>。它的形式就是在指针类型变量的前面加上一个星号，就像前面的例子中那样。</p><p>从上面的例子和图中，我们都可以看到，通过<strong>解引用</strong>输出或修改的，并不是指针变量本身的值，而是指针指向的内存单元的值。要输出指针自身的值，也就是指向的内存单元的地址，我们可以使用Printf通过%p来实现：</p><pre><code class=\"language-plain\">fmt.Printf(\"%p\\n\", p) // 0xc0000160d8\n</code></pre><p>指针变量可以变换其指向的内存单元，对应到语法上，就是为指针变量重新赋值，比如下面代码：</p><pre><code class=\"language-plain\">var a int = 5\nvar b int = 6\n\nvar p *int = &amp;a  // 指向变量a所在内存单元\nprintln(*p)      // 输出变量a的值\np = &amp;b           // 指向变量b所在内存单元\nprintln(*p)      // 输出变量b的值\n</code></pre><p>多个指针变量可以指向同一个变量的内存单元的，这样通过其中一个指针变量对内存单元的修改，是可以通过另外一个指针变量的解引用反映出来的，比如下面例子：</p><pre><code class=\"language-plain\">var a int = 5\nvar p1 *int = &amp;a // p1指向变量a所在内存单元\nvar p2 *int = &amp;a // p2指向变量a所在内存单元\n(*p1) += 5       // 通过p1修改变量a的值\nprintln(*p2)     // 10 对变量a的修改可以通过另外一个指针变量p2的解引用反映出来\n</code></pre><p>讲到这里，你应该对指针的概念有一定的了解了。不过，有同学可能会问：既然指针变量也作为一个内存单元存储在内存中，那么是否可以被其他指针变量指向呢？好，下面我们就来回答这个问题！</p><h2>二级指针</h2><p>首先剧透一下：<strong>可以</strong>！我们来看下面这个例子：</p><pre><code class=\"language-plain\">package main\n\nfunc main() {\n    var a int = 5\n    var p1 *int = &amp;a\n    println(*p1) // 5\n    var b int = 55\n    var p2 *int = &amp;b\n    println(*p2) // 55\n\n    var pp **int = &amp;p1\n    println(**pp) // 5\n    pp = &amp;p2      \n    println(**pp) // 55\n}  \n</code></pre><p>在这个例子中，我们声明了两个*int类型指针p1和p2，分别指向两个整型变量a和b，我们还声明了一个**int型的指针变量pp，它的初值为指针变量p1的地址。之后我们用p2的地址为pp变量作了重新赋值。</p><p>通过下面这个示意图，能更容易理解这个例子（注意：这里只是示意图，并非真实内存布局图）：</p><p><img src=\"https://static001.geekbang.org/resource/image/85/10/850094f2156e8fb2ba0d6b152c348710.jpg?wh=1920x1047\" alt=\"图片\"></p><p>我们看到，**int类型的变量pp中存储的是*int型变量的地址，这和前面的*int型变量存储的是int型变量的地址的情况，其实是一种原理。**int被称为二级指针，也就是指向指针的指针，那自然，我们可以理解*int就是一级指针了。</p><p>前面说过，对一级指针解引用，我们得到的其实是指针指向的变量。而对二级指针pp解引用一次，我们得到将是pp指向的指针变量：</p><pre><code class=\"language-plain\">println((*pp) == p1) // true\n</code></pre><p>那么对pp解引用二次，我们将得到啥呢？对pp解引用两次，其实就相当于对一级指针解引用一次，我们得到的是pp指向的指针变量所指向的整型变量：</p><pre><code class=\"language-plain\">println((**pp) == (*p1)) // true\nprintln((**pp) == a)     // true\n</code></pre><p>那么二级指针通常用来做什么呢？我们知道一级指针常被用来改变普通变量的值，那么可以推断，<strong>二级指针就可以用来改变指针变量的值，也就是指针变量的指向</strong>。</p><p>前面我们提到过，在同一个函数中，改变指针的指向十分容易，我们只需要给一级指针重新赋值为另外一个变量的地址就可以了。</p><p>但是，如果我们需要跨函数改变一个指针变量的指向，我们就不能选择一级指针类型作为形参类型了。因为一级指针只能改变普通变量的值，无法改变指针变量的指向。我们只能选择二级指针类型作为形参类型。</p><p>我们来看一个例子：</p><pre><code class=\"language-plain\">package main\n\nfunc foo(pp **int) {\n    var b int = 55\n    var p1 *int = &amp;b\n    (*pp) = p1\n}\n\nfunc main() {\n    var a int = 5\n    var p *int = &amp;a\n    println(*p) // 5\n    foo(&amp;p)\n    println(*p) // 55\n}\n</code></pre><p>对应这段代码的示意图如下（注意：仅是示意图，不是内存真实布局）：</p><p><img src=\"https://static001.geekbang.org/resource/image/46/e7/4610b0d309c1dab340800eedyy301ce7.jpg?wh=1980x1080\" alt=\"\"></p><p>在这个例子中我们可以看到，通过二级指针pp，我们改变的是它指向的一级指针变量p的指向，从指向变量a的地址变为指向变量b的地址。</p><p>即便有图有真相，你可能也会觉得理解二级指针还是很困难，这很正常。无论是学习C还是学习Go，又或是其他带有指针的静态编程语言，二级指针虽然仅仅是增加了一个“间接环节”，但理解起来都十分困难，这也是二级指针在Go中很少使用的原因。至于三级指针或其他多级指针，我们更是要慎用，对它们的使用会大幅拉低你的Go代码的可读性。</p><p>接下来我们再来看看指针在Go中的用途以及使用上的限制。</p><h2>Go中的指针用途与使用限制</h2><p>Go是带有垃圾回收的编程语言，指针在Go中依旧位于C位，它的作用不仅体现在语法层面上，更体现在Go运行时层面，尤其是内存管理与垃圾回收这两个地方，这两个运行时机制<strong>只关心指针</strong>。</p><p>在语法层面，相对于“指针为王”的C语言来说，Go指针的使用要少不少，这很大程度上是因为Go提供了更灵活和高级的复合类型，比如切片、map等，并将使用指针的复杂性隐藏在运行时的实现层面了。这样，Go程序员自己就不需要在语法层面通过指针来实现这些高级复合类型的功能。</p><p>指针无论是在Go中，还是在其他支持指针的编程语言中，存在的意义就是为了是<strong>“可改变”</strong>。在Go中，我们使用*T类型的变量调用方法、以*T类型作为函数或方法的形式参数、返回*T类型的返回值等的目的，也都是因为指针可以改变其指向的内存单元的值。</p><p>当然，指针的好处，还包括它传递的开销是常数级的（在x86-64平台上仅仅是8字节的拷贝），可控可预测。无论指针指向的是一个字节大小的变量，还是一个拥有10000个元素的[10000]int型数组，传递指针的开销都是一样的。</p><p>不过，虽然Go在语法层面上保留了指针，但Go语言的目标之一是成为一门安全的编程语言，因此，它对指针的使用做了一定的限制，包括这两方面：</p><p><strong>限制一：限制了显式指针类型转换。</strong></p><p>在C语言中，我们可以像下面代码这样实现显式指针类型转换：</p><pre><code class=\"language-plain\">#include &lt;stdio.h&gt;\n  \nint main() {\n    int a = 0x12345678;\n    int *p = &amp;a;\n    char *p1 = (char*)p; // 将一个整型指针显式转换为一个char型指针\n    printf(\"%x\\n\", *p1); \n}\n</code></pre><p>但是在Go中，这样的显式指针转换会得到Go编译器的报错信息：</p><pre><code class=\"language-plain\">package main\n\nimport (\n    \"fmt\"\n    \"unsafe\"\n)\n\nfunc main() {\n    var a int = 0x12345678\n    var pa *int = &amp;a\n    var pb *byte = (*byte)(pa) // 编译器报错：cannot convert pa (variable of type *int) to type *byte\n    fmt.Printf(\"%x\\n\", *pb)\n}\n</code></pre><p>如果我们“一意孤行”，非要进行这个转换，Go也提供了unsafe的方式，因为我们需要使用到unsafe.Pointer，如下面代码：</p><pre><code class=\"language-plain\">func main() {                                                                         \n    var a int = 0x12345678                                                            \n    var pa *int = &amp;a                                                                  \n    var pb *byte = (*byte)(unsafe.Pointer(pa)) // ok\n    fmt.Printf(\"%x\\n\", *pb) // 78                                                          \n} \n</code></pre><p>如果我们使用unsafe包中类型或函数，代码的安全性就要由开发人员自己保证，也就是开发人员得明确知道自己在做啥！</p><p><strong>限制二：不支持指针运算。</strong></p><p>指针运算是C语言的大杀器，在C语言中，我们可以通过指针运算实现各种高级操作，比如简单的数组元素的遍历：</p><pre><code class=\"language-plain\">#include &lt;stdio.h&gt;\n  \nint main() {\n    int a[] = {1, 2, 3, 4, 5};\n    int *p = &amp;a[0];\n    for (int i = 0; i &lt; sizeof(a)/sizeof(a[0]); i++) {\n            printf(\"%d\\n\", *p);\n            p = p + 1; \n    }\n}\n</code></pre><p>但指针运算也是安全问题的“滋生地”。为了安全性，Go在语法层面抛弃了指针运算这个特性。在Go语言中，下面的代码将得到Go编译器的报错信息：</p><pre><code class=\"language-plain\">package main\n\nfunc main() {\n    var arr = [5]int{1, 2, 3, 4, 5}\n    var p *int = &amp;arr[0]\n    println(*p)\n    p = p + 1  // 编译器报错：cannot convert 1 (untyped int constant) to *int\n    println(*p)\n}\n</code></pre><p>如果我们非要做指针运算，Go依然提供了unsafe的途径，比如下面通过unsafe遍历数组的代码：</p><pre><code class=\"language-plain\">package main\n\nimport \"unsafe\"\n\nfunc main() {\n    var arr = [5]int{11, 12, 13, 14, 15}\n    var p *int = &amp;arr[0]\n    var i uintptr\n    for i = 0; i &lt; uintptr(len(arr)); i++ {\n        p1 := (*int)(unsafe.Pointer(uintptr(unsafe.Pointer(p)) + i*unsafe.Sizeof(*p)))\n        println(*p1)\n    }           \n}\n</code></pre><p>上面这段代码就通过unsafe.Pointer与uintptr的相互转换，间接实现了“指针运算”。但即便我们可以使用unsafe方法实现“指针运算”，Go编译器也不会为开发人员提供任何帮助，开发人员需要自己告诉编译器要加减的绝对地址偏移值，而不是像前面C语言例子中那样，可以根据指针类型决定指针运算中数值1所代表的实际地址偏移值。</p><h2>小结</h2><p>好了，讲到这里指针的这节加餐就结束了，不知道现在你是否对指针有了一个初步的认知了呢！</p><p>指针变量是一种在它对应的内存单元中，存储另外一个变量a对应的内存单元地址的变量，我们也称该指针指向变量a。指针类型通常需要依托某一类型而存在，unsafe包的Pointer类型是个例外。</p><p>指针变量的声明与普通变量别无二异，我们可以用一个指针的基类型的变量的地址，为指针变量赋初值。如果指针变量没有初值，那它的默认值为nil。通过对指针变量的解引用，我们可以读取和修改其指向的变量的值。</p><p>我们可以声明指向指针的指针变量，这样的指针被称为二级指针。二级指针可以用来改变指针变量的值，也就是指针变量的指向。不过二级指针以及多级指针很难理解，一旦使用会降低代码的可读性，我建议你一定要慎用。</p><p>另外，出于内存安全性的考虑，Go语言对指针的使用做出了限制，不允许在Go代码中进行显式指针类型转换以及指针运算，当然我们可以通过unsafe方式实现这些功能，但在使用unsafe包的类型与函数时，你一定要知道你正在做什么，确保代码的正确性。</p><h2>思考题</h2><p>学完这一讲后，我建议你回看一下本专栏中涉及指针的章节与实战项目，你可能会有新的收获。</p>","comments":[{"had_liked":false,"id":337133,"user_name":"青鸟飞鱼","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1646642370,"is_pvip":false,"replies":[{"id":123241,"content":"感谢支持！","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646723636,"ip_address":"","comment_id":337133,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"看完整个专栏，只能说一句，老师来极客时间开专栏，太晚了，期待新课","like_count":7},{"had_liked":false,"id":336458,"user_name":"ly","can_delete":false,"product_type":"c1","uid":1478117,"ip_address":"","ucode":"6DD7DEECF39AF8","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/e5/f3df7b02.jpg","comment_is_top":false,"comment_ctime":1646150273,"is_pvip":false,"replies":[{"id":123034,"content":"感谢支持👍。后续是否有课程，尚不确定:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646290723,"ip_address":"","comment_id":336458,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"看完老师的课，对go的喜欢又多了一分，老师能不能出一门实战的课，系统设计加代码实现，感觉就这一门看不过瘾","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554260,"discussion_content":"感谢支持👍。后续是否有课程，尚不确定:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646290723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1793879,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5f/57/791d0f5e.jpg","nickname":"Geek_8ed998","note":"","ucode":"1C164836354665","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601967,"discussion_content":"在极客开个视频训练营吧\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675560247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338512,"user_name":"xiaoru","can_delete":false,"product_type":"c1","uid":2558855,"ip_address":"","ucode":"8BC8D5B067C5B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qeL7fNxa4BVLoVicIHwH221lM8EVsKlDSNmn6iaa18ALvpiaRFuesLk4aq3q11BpAIFwMR5nebDQK5ldZykZkK5Pw/132","comment_is_top":false,"comment_ctime":1647530421,"is_pvip":false,"replies":[{"id":123866,"content":"foo函数中的变量b不会被分配在栈上，会在堆上分配。这个go编译器会做逃逸分析(escape analysis)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1647826483,"ip_address":"","comment_id":338512,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"二级指针例子中foo函数返回会栈桢空间不是应该被回收吗？为什么还能取到b中的值？","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557453,"discussion_content":"foo函数中的变量b不会被分配在栈上，会在堆上分配。这个go编译器会做逃逸分析(escape analysis)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647826483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375257,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1685161898,"is_pvip":false,"replies":[{"id":136956,"content":"按照你的问题，写了一个例子：\n\npackage main\n\nfunc foo(p *int) {\n\tvar b int = 55\n\tp = &amp;b\n}\n\nfunc main() {\n\tvar a int = 5\n\tvar p *int = &amp;a\n\tprintln(*p) &#47;&#47; 5\n\tfoo(p)\n\tprintln(*p) &#47;&#47; 5\n}\n\n在这个例子中，main中的p和foo的参数p完全是两个不同函数栈上的变量，虽然foo参数p指向的也是main函数的变量a。\n\nfoo函数可以等价于：\n\nfunc foo() {\n\tvar p *int\n        var b int = 55\n\tp = &amp;b\n}\n\nfoo的参数就等价于其函数内声明的本地变量。\n\n所以foo内对p的修改，与main函数中的p并无关系。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1685196251,"ip_address":"美国","comment_id":375257,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"tony bai 老师，文中的这句话：“如果我们需要跨函数改变一个指针变量的指向，我们就不能选择一级指针类型作为形参类型了。因为一级指针只能改变普通变量的值，无法改变指针变量的指向。”\n\n没有太理解，我通过传递一个变量的指针到另外一个函数中，然后在另外一个函数中，用另一个变量的指针地址是可以赋值的，但是函数外，传递的变量的指针没有改变，不知道为什么？ 这块能在解释一下么？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557453,"discussion_content":"foo函数中的变量b不会被分配在栈上，会在堆上分配。这个go编译器会做逃逸分析(escape analysis)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647826483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346630,"user_name":"五彩斑斓的輝","can_delete":false,"product_type":"c1","uid":2885173,"ip_address":"","ucode":"43F11424417E06","user_header":"https://static001.geekbang.org/account/avatar/00/2c/06/35/82915b9b.jpg","comment_is_top":false,"comment_ctime":1653300174,"is_pvip":false,"replies":[{"id":126448,"content":"这里可能表达不清。主要要表达的意思是通过指针传递参数与非指针传递参数的差别。非指针传递 改变的是拷贝，而不是原变量。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653381561,"ip_address":"","comment_id":346630,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"指针无论是在 Go 中，还是在其他支持指针的编程语言中，存在的意义就是为了是“可改变”。在 Go 中，我们使用 *T 类型的变量调用方法、以 *T 类型作为函数或方法的形式参数、返回 *T 类型的返回值等的目的，也都是因为指针可以改变其指向的内存单元的值。\n\n可改变，怎么理解啊？如果不用指针也是可以改变的吧？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573375,"discussion_content":"这里可能表达不清。主要要表达的意思是通过指针传递参数与非指针传递参数的差别。非指针传递 改变的是拷贝，而不是原变量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653381561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2885173,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/06/35/82915b9b.jpg","nickname":"五彩斑斓的輝","note":"","ucode":"43F11424417E06","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":573377,"discussion_content":"嗯嗯 明白！只是“可改变”传递的信息不够明确，有点转不过来，可改变的对象什么？对于方法receiver参数来说是原类型实例；而对于函数参数来说，是实参所指向内存单元的值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653382193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":573375,"ip_address":"","group_id":0},"score":573377,"extra":""}]}]},{"had_liked":false,"id":375253,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1685156357,"is_pvip":false,"replies":[{"id":136955,"content":"的确是笔误，后续让编辑老师修改一下，感谢指出。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1685195303,"ip_address":"辽宁","comment_id":375253,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony bai 老师 ，文中有一处小错误。\n\n在“多个指针变量可以指向同一个变量的内存单元的，这样通过其中一个指针变量对内存单元的修改，是可以通过另外一个指针变量的解引用反映出来的，比如下面例子：”\n\n这段文字下面的代码中 ： p2指向变量b所在内存单元 应该改为 p2指向变量a所在内存单元 的吧？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619507,"discussion_content":"的确是笔误，后续让编辑老师修改一下，感谢指出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685195303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":367650,"user_name":"crazyball","can_delete":false,"product_type":"c1","uid":2706253,"ip_address":"广东","ucode":"179BB7A145B124","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epaH1gHotWQumjRxuX89vHeak6NvLjcrrWApsFkcXTpmh7SOVN5bUO6OPiaEMia5MZjKv2yhTt42icEg/132","comment_is_top":false,"comment_ctime":1675405243,"is_pvip":false,"replies":[{"id":134043,"content":":)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1675948644,"ip_address":"广东","comment_id":367650,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"催更大白老师进阶或实战课~","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603111,"discussion_content":":)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675948644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360242,"user_name":"Elroy","can_delete":false,"product_type":"c1","uid":1630622,"ip_address":"北京","ucode":"B9578EE4A3C98C","user_header":"https://static001.geekbang.org/account/avatar/00/18/e1/9e/4107db55.jpg","comment_is_top":false,"comment_ctime":1666334070,"is_pvip":false,"replies":[{"id":131094,"content":"👍😄","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1666579034,"ip_address":"北京","comment_id":360242,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"最开始看到课程的名字，误以为很基础，就随意翻了几篇感兴趣的看看，没想到干货满满，又从头看了一篇。讲的真好！","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603111,"discussion_content":":)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675948644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359157,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"北京","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1665295288,"is_pvip":true,"replies":[{"id":130606,"content":"macro？go好像从来没有考虑加上macro。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1665297047,"ip_address":"北京","comment_id":359157,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"go2 会把macro加回来吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589745,"discussion_content":"macro？go好像从来没有考虑加上macro。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665297047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351260,"user_name":"一本书","can_delete":false,"product_type":"c1","uid":2767251,"ip_address":"","ucode":"4C07047F052BB4","user_header":"https://static001.geekbang.org/account/avatar/00/2a/39/93/f0247cf8.jpg","comment_is_top":false,"comment_ctime":1657640435,"is_pvip":true,"replies":[{"id":127779,"content":"嗯嗯。后续看是否有机会:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657694872,"ip_address":"","comment_id":351260,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"期待白老师出一个实战课","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579796,"discussion_content":"嗯嗯。后续看是否有机会:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657694872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337133,"user_name":"青鸟飞鱼","can_delete":false,"product_type":"c1","uid":1807943,"ip_address":"","ucode":"8C64517DA556FE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/47/93838ff7.jpg","comment_is_top":false,"comment_ctime":1646642370,"is_pvip":false,"replies":[{"id":123241,"content":"感谢支持！","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646723636,"ip_address":"","comment_id":337133,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"看完整个专栏，只能说一句，老师来极客时间开专栏，太晚了，期待新课","like_count":7,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555023,"discussion_content":"感谢支持！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646723636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1793879,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5f/57/791d0f5e.jpg","nickname":"Geek_8ed998","note":"","ucode":"1C164836354665","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629903,"discussion_content":"两年过去了，赶快开新课吧，老师的课学起来过瘾","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697781818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336458,"user_name":"ly","can_delete":false,"product_type":"c1","uid":1478117,"ip_address":"","ucode":"6DD7DEECF39AF8","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/e5/f3df7b02.jpg","comment_is_top":false,"comment_ctime":1646150273,"is_pvip":false,"replies":[{"id":123034,"content":"感谢支持👍。后续是否有课程，尚不确定:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1646290723,"ip_address":"","comment_id":336458,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"看完老师的课，对go的喜欢又多了一分，老师能不能出一门实战的课，系统设计加代码实现，感觉就这一门看不过瘾","like_count":5,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555023,"discussion_content":"感谢支持！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646723636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1793879,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5f/57/791d0f5e.jpg","nickname":"Geek_8ed998","note":"","ucode":"1C164836354665","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629903,"discussion_content":"两年过去了，赶快开新课吧，老师的课学起来过瘾","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697781818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338512,"user_name":"xiaoru","can_delete":false,"product_type":"c1","uid":2558855,"ip_address":"","ucode":"8BC8D5B067C5B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qeL7fNxa4BVLoVicIHwH221lM8EVsKlDSNmn6iaa18ALvpiaRFuesLk4aq3q11BpAIFwMR5nebDQK5ldZykZkK5Pw/132","comment_is_top":false,"comment_ctime":1647530421,"is_pvip":false,"replies":[{"id":123866,"content":"foo函数中的变量b不会被分配在栈上，会在堆上分配。这个go编译器会做逃逸分析(escape analysis)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1647826483,"ip_address":"","comment_id":338512,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"二级指针例子中foo函数返回会栈桢空间不是应该被回收吗？为什么还能取到b中的值？","like_count":4,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554260,"discussion_content":"感谢支持👍。后续是否有课程，尚不确定:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646290723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1793879,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/5f/57/791d0f5e.jpg","nickname":"Geek_8ed998","note":"","ucode":"1C164836354665","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601967,"discussion_content":"在极客开个视频训练营吧\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675560247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375257,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1685161898,"is_pvip":false,"replies":[{"id":136956,"content":"按照你的问题，写了一个例子：\n\npackage main\n\nfunc foo(p *int) {\n\tvar b int = 55\n\tp = &amp;b\n}\n\nfunc main() {\n\tvar a int = 5\n\tvar p *int = &amp;a\n\tprintln(*p) &#47;&#47; 5\n\tfoo(p)\n\tprintln(*p) &#47;&#47; 5\n}\n\n在这个例子中，main中的p和foo的参数p完全是两个不同函数栈上的变量，虽然foo参数p指向的也是main函数的变量a。\n\nfoo函数可以等价于：\n\nfunc foo() {\n\tvar p *int\n        var b int = 55\n\tp = &amp;b\n}\n\nfoo的参数就等价于其函数内声明的本地变量。\n\n所以foo内对p的修改，与main函数中的p并无关系。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1685196251,"ip_address":"美国","comment_id":375257,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"tony bai 老师，文中的这句话：“如果我们需要跨函数改变一个指针变量的指向，我们就不能选择一级指针类型作为形参类型了。因为一级指针只能改变普通变量的值，无法改变指针变量的指向。”\n\n没有太理解，我通过传递一个变量的指针到另外一个函数中，然后在另外一个函数中，用另一个变量的指针地址是可以赋值的，但是函数外，传递的变量的指针没有改变，不知道为什么？ 这块能在解释一下么？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619509,"discussion_content":"按照你的问题，写了一个例子：\n\npackage main\n\nfunc foo(p *int) {\n\tvar b int = 55\n\tp = &amp;b\n}\n\nfunc main() {\n\tvar a int = 5\n\tvar p *int = &amp;a\n\tprintln(*p) // 5\n\tfoo(p)\n\tprintln(*p) // 5\n}\n\n在这个例子中，main中的p和foo的参数p完全是两个不同函数栈上的变量，虽然foo参数p指向的也是main函数的变量a。\n\nfoo函数可以等价于：\n\nfunc foo() {\n\tvar p *int\n        var b int = 55\n\tp = &amp;b\n}\n\nfoo的参数就等价于其函数内声明的本地变量。\n\n所以foo内对p的修改，与main函数中的p并无关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685196251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346630,"user_name":"五彩斑斓的輝","can_delete":false,"product_type":"c1","uid":2885173,"ip_address":"","ucode":"43F11424417E06","user_header":"https://static001.geekbang.org/account/avatar/00/2c/06/35/82915b9b.jpg","comment_is_top":false,"comment_ctime":1653300174,"is_pvip":false,"replies":[{"id":126448,"content":"这里可能表达不清。主要要表达的意思是通过指针传递参数与非指针传递参数的差别。非指针传递 改变的是拷贝，而不是原变量。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1653381561,"ip_address":"","comment_id":346630,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"指针无论是在 Go 中，还是在其他支持指针的编程语言中，存在的意义就是为了是“可改变”。在 Go 中，我们使用 *T 类型的变量调用方法、以 *T 类型作为函数或方法的形式参数、返回 *T 类型的返回值等的目的，也都是因为指针可以改变其指向的内存单元的值。\n\n可改变，怎么理解啊？如果不用指针也是可以改变的吧？","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619509,"discussion_content":"按照你的问题，写了一个例子：\n\npackage main\n\nfunc foo(p *int) {\n\tvar b int = 55\n\tp = &amp;b\n}\n\nfunc main() {\n\tvar a int = 5\n\tvar p *int = &amp;a\n\tprintln(*p) // 5\n\tfoo(p)\n\tprintln(*p) // 5\n}\n\n在这个例子中，main中的p和foo的参数p完全是两个不同函数栈上的变量，虽然foo参数p指向的也是main函数的变量a。\n\nfoo函数可以等价于：\n\nfunc foo() {\n\tvar p *int\n        var b int = 55\n\tp = &amp;b\n}\n\nfoo的参数就等价于其函数内声明的本地变量。\n\n所以foo内对p的修改，与main函数中的p并无关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685196251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375253,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"广东","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1685156357,"is_pvip":false,"replies":[{"id":136955,"content":"的确是笔误，后续让编辑老师修改一下，感谢指出。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1685195303,"ip_address":"辽宁","comment_id":375253,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony bai 老师 ，文中有一处小错误。\n\n在“多个指针变量可以指向同一个变量的内存单元的，这样通过其中一个指针变量对内存单元的修改，是可以通过另外一个指针变量的解引用反映出来的，比如下面例子：”\n\n这段文字下面的代码中 ： p2指向变量b所在内存单元 应该改为 p2指向变量a所在内存单元 的吧？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573375,"discussion_content":"这里可能表达不清。主要要表达的意思是通过指针传递参数与非指针传递参数的差别。非指针传递 改变的是拷贝，而不是原变量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653381561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2885173,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/06/35/82915b9b.jpg","nickname":"五彩斑斓的輝","note":"","ucode":"43F11424417E06","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":573377,"discussion_content":"嗯嗯 明白！只是“可改变”传递的信息不够明确，有点转不过来，可改变的对象什么？对于方法receiver参数来说是原类型实例；而对于函数参数来说，是实参所指向内存单元的值。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653382193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":573375,"ip_address":"","group_id":0},"score":573377,"extra":""}]}]},{"had_liked":false,"id":367650,"user_name":"crazyball","can_delete":false,"product_type":"c1","uid":2706253,"ip_address":"广东","ucode":"179BB7A145B124","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epaH1gHotWQumjRxuX89vHeak6NvLjcrrWApsFkcXTpmh7SOVN5bUO6OPiaEMia5MZjKv2yhTt42icEg/132","comment_is_top":false,"comment_ctime":1675405243,"is_pvip":false,"replies":[{"id":134043,"content":":)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1675948644,"ip_address":"广东","comment_id":367650,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"催更大白老师进阶或实战课~","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619507,"discussion_content":"的确是笔误，后续让编辑老师修改一下，感谢指出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685195303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360242,"user_name":"Elroy","can_delete":false,"product_type":"c1","uid":1630622,"ip_address":"北京","ucode":"B9578EE4A3C98C","user_header":"https://static001.geekbang.org/account/avatar/00/18/e1/9e/4107db55.jpg","comment_is_top":false,"comment_ctime":1666334070,"is_pvip":false,"replies":[{"id":131094,"content":"👍😄","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1666579034,"ip_address":"北京","comment_id":360242,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"最开始看到课程的名字，误以为很基础，就随意翻了几篇感兴趣的看看，没想到干货满满，又从头看了一篇。讲的真好！","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591390,"discussion_content":"👍😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666579034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359157,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"北京","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1665295288,"is_pvip":true,"replies":[{"id":130606,"content":"macro？go好像从来没有考虑加上macro。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1665297047,"ip_address":"北京","comment_id":359157,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"go2 会把macro加回来吗？","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591390,"discussion_content":"👍😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666579034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351260,"user_name":"一本书","can_delete":false,"product_type":"c1","uid":2767251,"ip_address":"","ucode":"4C07047F052BB4","user_header":"https://static001.geekbang.org/account/avatar/00/2a/39/93/f0247cf8.jpg","comment_is_top":false,"comment_ctime":1657640435,"is_pvip":true,"replies":[{"id":127779,"content":"嗯嗯。后续看是否有机会:)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1657694872,"ip_address":"","comment_id":351260,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"期待白老师出一个实战课","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589745,"discussion_content":"macro？go好像从来没有考虑加上macro。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665297047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348367,"user_name":"Geek_4b9101","can_delete":false,"product_type":"c1","uid":2396096,"ip_address":"","ucode":"71E430505E7D53","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/KZN2M9CPvWZtjfUblowkxaYdHCfhq6mUOFcKkOAzzR9PVJm4IYUsVP47rHbwZNQT6qxavazjJzn14wpiawKPTaA/132","comment_is_top":false,"comment_ctime":1655024774,"is_pvip":false,"replies":[{"id":126930,"content":"哈哈。这又不是网络文学，说有就有😁。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1655097115,"ip_address":"","comment_id":348367,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"结束了，不够看啊，还有吗","like_count":1},{"had_liked":false,"id":335999,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1645837900,"is_pvip":true,"replies":[{"id":122859,"content":"不客气👍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645996370,"ip_address":"","comment_id":335999,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"惊喜。谢谢老师的加餐","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553621,"discussion_content":"不客气👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645996370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377222,"user_name":"听说昵称太长了躲在树后面会被别人看见的","can_delete":false,"product_type":"c1","uid":3616258,"ip_address":"福建","ucode":"EFFEE43631C3B4","user_header":"https://static001.geekbang.org/account/avatar/00/37/2e/02/7f151e08.jpg","comment_is_top":false,"comment_ctime":1688100450,"is_pvip":false,"replies":[{"id":137490,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1688285655,"ip_address":"辽宁","comment_id":377222,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"看我老师的 go，对 c 语言的好感又增加了，谁说 c 只能面向过程，简直是背了个世纪大锅","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553621,"discussion_content":"不客气👍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645996370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348501,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1655136792,"is_pvip":false,"replies":[{"id":126968,"content":"可以尝试通过go提供的逃逸分析工具来判定。之前写过一篇文章 https:&#47;&#47;tonybai.com&#47;2021&#47;05&#47;24&#47;understand-go-escape-analysis-by-example 可参考。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1655268433,"ip_address":"","comment_id":348501,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"go是怎么区分变量应该是分配在堆上还是栈上的","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576067,"discussion_content":"可以尝试通过go提供的逃逸分析工具来判定。之前写过一篇文章 https://tonybai.com/2021/05/24/understand-go-escape-analysis-by-example 可参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655268434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336001,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1645841204,"is_pvip":false,"replies":[{"id":122860,"content":"好问题！引用传递其实本质也是值传递，只是传递的是指针&#47;地址或像切片这样的“描述符”。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645996553,"ip_address":"","comment_id":336001,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师太良心了，又是一篇质量教学。\n突然想到一个问题， 为什么很多语言都选择 默认值传递 方式。比如 c，python，go，java。 都是值传递。\n请教老师 默认值传递的 好处是什么，为什么这些大佬设计语言时 不默认为 引用传递。\n值传递 要copy数据 不是麻烦了吗","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576067,"discussion_content":"可以尝试通过go提供的逃逸分析工具来判定。之前写过一篇文章 https://tonybai.com/2021/05/24/understand-go-escape-analysis-by-example 可参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655268434,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348367,"user_name":"Geek_4b9101","can_delete":false,"product_type":"c1","uid":2396096,"ip_address":"","ucode":"71E430505E7D53","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/KZN2M9CPvWZtjfUblowkxaYdHCfhq6mUOFcKkOAzzR9PVJm4IYUsVP47rHbwZNQT6qxavazjJzn14wpiawKPTaA/132","comment_is_top":false,"comment_ctime":1655024774,"is_pvip":false,"replies":[{"id":126930,"content":"哈哈。这又不是网络文学，说有就有😁。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1655097115,"ip_address":"","comment_id":348367,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"结束了，不够看啊，还有吗","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575763,"discussion_content":"哈哈。这又不是网络文学，说有就有😁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655097115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335999,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1645837900,"is_pvip":true,"replies":[{"id":122859,"content":"不客气👍。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645996370,"ip_address":"","comment_id":335999,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"惊喜。谢谢老师的加餐","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575763,"discussion_content":"哈哈。这又不是网络文学，说有就有😁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655097115,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377222,"user_name":"听说昵称太长了躲在树后面会被别人看见的","can_delete":false,"product_type":"c1","uid":3616258,"ip_address":"福建","ucode":"EFFEE43631C3B4","user_header":"https://static001.geekbang.org/account/avatar/00/37/2e/02/7f151e08.jpg","comment_is_top":false,"comment_ctime":1688100450,"is_pvip":false,"replies":[{"id":137490,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1688285655,"ip_address":"辽宁","comment_id":377222,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"看我老师的 go，对 c 语言的好感又增加了，谁说 c 只能面向过程，简直是背了个世纪大锅","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622443,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688285655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348501,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1655136792,"is_pvip":false,"replies":[{"id":126968,"content":"可以尝试通过go提供的逃逸分析工具来判定。之前写过一篇文章 https:&#47;&#47;tonybai.com&#47;2021&#47;05&#47;24&#47;understand-go-escape-analysis-by-example 可参考。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1655268433,"ip_address":"","comment_id":348501,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"go是怎么区分变量应该是分配在堆上还是栈上的","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622443,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688285655,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336001,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1645841204,"is_pvip":false,"replies":[{"id":122860,"content":"好问题！引用传递其实本质也是值传递，只是传递的是指针&#47;地址或像切片这样的“描述符”。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1645996553,"ip_address":"","comment_id":336001,"utype":1}],"discussion_count":4,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"老师太良心了，又是一篇质量教学。\n突然想到一个问题， 为什么很多语言都选择 默认值传递 方式。比如 c，python，go，java。 都是值传递。\n请教老师 默认值传递的 好处是什么，为什么这些大佬设计语言时 不默认为 引用传递。\n值传递 要copy数据 不是麻烦了吗","like_count":0,"discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553561,"discussion_content":"说下Java和go\nJava除了基本数据类型是完全的值传递，其他都是“引用”传递，其实也是值传递，传递的都是内存地址，因此List Map 自定义对象之类的，在a方法中修改了，不用专门返回，其他方法读取时，是可以读取到a对数据得操作的。\n \nGo是标准的值传递，但是，string，slice，map，channel等本身就是信用，传递的时候与数据量是没有关系，是复制几个属性。到结构体，如果属性比较多的时候，值传递是有比较大的损耗，因此可以选择指针传递。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1645966901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553622,"discussion_content":"好问题！引用传递其实本质也是值传递，只是传递的是指针/地址或像切片这样的“描述符”。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645996553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1135528,"avatar":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","nickname":"return","note":"","ucode":"42B8A3380DF04B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":554542,"discussion_content":"明白了， 感谢老师。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646457059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":553622,"ip_address":"","group_id":0},"score":554542,"extra":""}]},{"author":{"id":2342631,"avatar":"https://static001.geekbang.org/account/avatar/00/23/be/e7/4a37626c.jpg","nickname":"努力努力🌟","note":"","ucode":"F8964666BCDC38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554659,"discussion_content":"原因很简单，他们都是学习了c语言。c语言家族都使用值传递。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646538881,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}