{"id":90998,"title":"浏览器API（小实验）：动手整理全部API","content":"<p>你好，我是winter。今天我们来讲讲浏览器API。</p><p>浏览器的API数目繁多，我们在之前的课程中，已经一起学习了其中几个比较有体系的部分：比如之前讲到过的DOM和CSSOM等等。但是，如果你留意过，会发现我们讲到的API仍然是标准中非常小的一部分。</p><p>这里，我们不可能把课程变成一本厚厚的API参考手册，所以这一节课，我设计了一个实验，我们一起来给API分分类。</p><p>我们按照每个API所在的标准来分类。所以，我们用代码来反射浏览器环境中全局对象的属性，然后我们用JavaScript的filter方法来逐步过滤掉已知的属性。</p><p>接下来，我们整理API的方法如下：</p><ul>\n<li>从Window的属性中，找到API名称；</li>\n<li>查阅MDN或者Google，找到API所在的标准；</li>\n<li>阅读标准，手工或者用代码整理出标准中包含的API；</li>\n<li>用代码在Window的属性中过滤掉标准中涉及的API。</li>\n</ul><p>重复这个过程，我们可以找到所有的API对应的标准。首先我们先把前面已经讲过的API过滤掉。</p><p>##JavaScript中规定的API</p><p>大部分的API属于Window对象（或者说全局对象），我们可以用反射来看一看现行浏览器中已经实现的API，我这里使用Mac下的Chrome 72.0.3626.121版本。</p><!-- [[[read_end]]] --><p>我们首先调用 Object.getOwnPropertyNames(window)。在我的环境中，可以看到，共有821个属性。</p><p>这里包含了JavaScript标准规定的属性，我们做一下过滤：</p><pre><code class=\"language-JavaScript\">{\n    let js = new Set();\n    let objects = [\"BigInt\", \"BigInt64Array\", \"BigUint64Array\", \"Infinity\", \"NaN\", \"undefined\", \"eval\", \"isFinite\", \"isNaN\", \"parseFloat\", \"parseInt\", \"decodeURI\", \"decodeURIComponent\", \"encodeURI\", \"encodeURIComponent\", \"Array\", \"Date\", \"RegExp\", \"Promise\", \"Proxy\", \"Map\", \"WeakMap\", \"Set\", \"WeakSet\", \"Function\", \"Boolean\", \"String\", \"Number\", \"Symbol\", \"Object\", \"Error\", \"EvalError\", \"RangeError\", \"ReferenceError\", \"SyntaxError\", \"TypeError\", \"URIError\", \"ArrayBuffer\", \"SharedArrayBuffer\", \"DataView\", \"Float32Array\", \"Float64Array\", \"Int8Array\", \"Int16Array\", \"Int32Array\", \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\", \"Atomics\", \"JSON\", \"Math\", \"Reflect\", \"escape\", \"unescape\"];\n    objects.forEach(o =&gt; js.add(o));\n    let names = Object.getOwnPropertyNames(window)\n    names = names.filter(e =&gt; !js.has(e));\n}\n</code></pre><p>这一部分我们已经在JavaScript部分讲解过了（JavaScript对象：你知道全部的对象分类吗），所以这里我就采用手工的方式过滤出来。</p><h2>DOM中的元素构造器</h2><p>接下来我们看看已经讲过的DOM部分，DOM部分包含了document属性和一系列的构造器，我们可以用JavaScript的prototype来过滤构造器。</p><pre><code class=\"language-JavaScript\">    names = names.filter( e =&gt; {\n        try { \n            return !(window[e].prototype instanceof Node)\n        } catch(err) {\n            return true;\n        }\n    }).filter( e =&gt; e != \"Node\")\n</code></pre><p>这里我们把所有Node的子类都过滤掉，再把Node本身也过滤掉，这是非常大的一批了。</p><h2>Window对象上的属性</h2><p>接下来我们要找到Window对象的定义，我们在下面链接中可以找到。</p><ul>\n<li><a href=\"https://html.spec.whatwg.org/#window\">https://html.spec.whatwg.org/#window</a></li>\n</ul><p>这里有一个Window接口，是使用WebIDL定义的，我们手工把其中的函数和属性整理出来，如下：</p><pre><code>\n window,self,document,name,location,history,customElements,locationbar,menubar, personalbar,scrollbars,statusbar,toolbar,status,close,closed,stop,focus, blur,frames,length,top,opener,parent,frameElement,open,navigator,applicationCache,alert,confirm,prompt,print,postMessage\n</code></pre><p>接下来，我们编写代码，把这些函数和属性，从浏览器Window对象的属性中去掉，JavaScript代码如下：</p><pre><code class=\"language-JavaScript\">{\n    let names = Object.getOwnPropertyNames(window)\n    let js = new Set();\n    let objects = [\"BigInt\", \"BigInt64Array\", \"BigUint64Array\", \"Infinity\", \"NaN\", \"undefined\", \"eval\", \"isFinite\", \"isNaN\", \"parseFloat\", \"parseInt\", \"decodeURI\", \"decodeURIComponent\", \"encodeURI\", \"encodeURIComponent\", \"Array\", \"Date\", \"RegExp\", \"Promise\", \"Proxy\", \"Map\", \"WeakMap\", \"Set\", \"WeakSet\", \"Function\", \"Boolean\", \"String\", \"Number\", \"Symbol\", \"Object\", \"Error\", \"EvalError\", \"RangeError\", \"ReferenceError\", \"SyntaxError\", \"TypeError\", \"URIError\", \"ArrayBuffer\", \"SharedArrayBuffer\", \"DataView\", \"Float32Array\", \"Float64Array\", \"Int8Array\", \"Int16Array\", \"Int32Array\", \"Uint8Array\", \"Uint16Array\", \"Uint32Array\", \"Uint8ClampedArray\", \"Atomics\", \"JSON\", \"Math\", \"Reflect\", \"escape\", \"unescape\"];\n    objects.forEach(o =&gt; js.add(o));\n    names = names.filter(e =&gt; !js.has(e));\n\n    names = names.filter( e =&gt; {\n        try { \n            return !(window[e].prototype instanceof Node)\n        } catch(err) {\n            return true;\n        }\n    }).filter( e =&gt; e != \"Node\")\n\n    let windowprops = new Set();\n    objects = [\"window\", \"self\", \"document\", \"name\", \"location\", \"history\", \"customElements\", \"locationbar\", \"menubar\", \" personalbar\", \"scrollbars\", \"statusbar\", \"toolbar\", \"status\", \"close\", \"closed\", \"stop\", \"focus\", \" blur\", \"frames\", \"length\", \"top\", \"opener\", \"parent\", \"frameElement\", \"open\", \"navigator\", \"applicationCache\", \"alert\", \"confirm\", \"prompt\", \"print\", \"postMessage\", \"console\"];\n    objects.forEach(o =&gt; windowprops.add(o));\n    names = names.filter(e =&gt; !windowprops.has(e));\n}\n</code></pre><p>我们还要过滤掉所有的事件，也就是on开头的属性。</p><pre><code class=\"language-JavaScript\">names = names.filter( e =&gt; !e.match(/^on/))\n</code></pre><p>webkit前缀的私有属性我们也过滤掉：</p><pre><code class=\"language-JavaScript\">names = names.filter( e =&gt; !e.match(/^webkit/))\n</code></pre><p>除此之外，我们在HTML标准中还能找到所有的接口，这些我们也过滤掉：</p><pre><code class=\"language-JavaScript\">\n    let interfaces = new Set();\n    objects = [\"ApplicationCache\", \"AudioTrack\", \"AudioTrackList\", \"BarProp\", \"BeforeUnloadEvent\", \"BroadcastChannel\", \"CanvasGradient\", \"CanvasPattern\", \"CanvasRenderingContext2D\", \"CloseEvent\", \"CustomElementRegistry\", \"DOMStringList\", \"DOMStringMap\", \"DataTransfer\", \"DataTransferItem\", \"DataTransferItemList\", \"DedicatedWorkerGlobalScope\", \"Document\", \"DragEvent\", \"ErrorEvent\", \"EventSource\", \"External\", \"FormDataEvent\", \"HTMLAllCollection\", \"HashChangeEvent\", \"History\", \"ImageBitmap\", \"ImageBitmapRenderingContext\", \"ImageData\", \"Location\", \"MediaError\", \"MessageChannel\", \"MessageEvent\", \"MessagePort\", \"MimeType\", \"MimeTypeArray\", \"Navigator\", \"OffscreenCanvas\", \"OffscreenCanvasRenderingContext2D\", \"PageTransitionEvent\", \"Path2D\", \"Plugin\", \"PluginArray\", \"PopStateEvent\", \"PromiseRejectionEvent\", \"RadioNodeList\", \"SharedWorker\", \"SharedWorkerGlobalScope\", \"Storage\", \"StorageEvent\", \"TextMetrics\", \"TextTrack\", \"TextTrackCue\", \"TextTrackCueList\", \"TextTrackList\", \"TimeRanges\", \"TrackEvent\", \"ValidityState\", \"VideoTrack\", \"VideoTrackList\", \"WebSocket\", \"Window\", \"Worker\", \"WorkerGlobalScope\", \"WorkerLocation\", \"WorkerNavigator\"];\n    objects.forEach(o =&gt; interfaces.add(o));\n\n    names = names.filter(e =&gt; !interfaces.has(e));\n\n</code></pre><p>这样过滤之后，我们已经过滤掉了所有的事件、Window对象、JavaScript全局对象和DOM相关的属性，但是，竟然还剩余了很多属性！你是不是很惊讶呢？好了，接下来我们才进入今天的正题。</p><h2>其它属性</h2><p>这些既不属于Window对象，又不属于JavaScript语言的Global对象的属性，它们究竟是什么呢？</p><p>我们可以一个一个来查看这些属性，来发现一些我们以前没有关注过的标准。</p><p>首先，我们要把过滤的代码做一下抽象，写成一个函数：</p><pre><code class=\"language-JavaScript\">function filterOut(names, props) {\n    let set = new Set();\n    props.forEach(o =&gt; set.add(o));\n    return names.filter(e =&gt; !set.has(e));\n}\n</code></pre><p>每次执行完filter函数，都会剩下一些属性，接下来，我们找到剩下的属性来看一看。</p><h3>ECMAScript 2018 Internationalization API</h3><p>在我的浏览器环境中，第一个属性是：Intl。</p><p>查找这些属性来历的最佳文档是MDN，当然，你也可以使用Google。</p><p>总之，经过查阅，我发现，它属于ECMA402标准，这份标准是JavaScript的一个扩展，它包含了国际化相关的内容：</p><ul>\n<li><a href=\"http://www.ecma-international.org/ecma-402/5.0/index.html#Title\">http://www.ecma-international.org/ecma-402/5.0/index.html#Title</a></li>\n</ul><p>ECMA402中，只有一个全局属性Intl，我们也把它过滤掉：</p><pre><code class=\"language-JavaScript\">names = names.filter(e =&gt; e != \"Intl\")\n</code></pre><p>再来看看还有什么属性。</p><h3>Streams标准</h3><p>接下来我看到的属性是： ByteLengthQueuingStrategy。</p><p>同样经过查阅，它来自WHATWG的Streams标准：<br>\n<a href=\"https://streams.spec.whatwg.org/#blqs-class\">https://streams.spec.whatwg.org/#blqs-class</a></p><p>不过，跟ECMA402不同，Streams标准中还有一些其它属性，这里我手工查阅了这份标准，并做了整理。</p><p>接下来，我们用代码把它们跟 ByteLengthQueuingStrategy 一起过滤掉：</p><pre><code class=\"language-JavaScript\">names = filterOut(names, [\"ReadableStream\", \"ReadableStreamDefaultReader\", \"ReadableStreamBYOBReader\", \"ReadableStreamDefaultController\", \"ReadableByteStreamController\", \"ReadableStreamBYOBRequest\", \"WritableStream\", \"WritableStreamDefaultWriter\", \"WritableStreamDefaultController\", \"TransformStream\", \"TransformStreamDefaultController\", \"ByteLengthQueuingStrategy\", \"CountQueuingStrategy\"]);\n</code></pre><p>好了，过滤之后，又少了一些属性，我们继续往下看。</p><h3>WebGL</h3><p>接下来我看到的属性是：WebGLContext​Event。</p><p>显然，这个属性来自WebGL标准：</p><ul>\n<li><a href=\"https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15\">https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.15</a></li>\n</ul><p>我们在这份标准中找到了一些别的属性，我们把它一起过滤掉：</p><pre><code class=\"language-JavaScript\">names = filterOut(names, [\"WebGLContextEvent\",\"WebGLObject\", \"WebGLBuffer\", \"WebGLFramebuffer\", \"WebGLProgram\", \"WebGLRenderbuffer\", \"WebGLShader\", \"WebGLTexture\", \"WebGLUniformLocation\", \"WebGLActiveInfo\", \"WebGLShaderPrecisionFormat\", \"WebGLRenderingContext\"]);\n</code></pre><p>过滤掉WebGL，我们继续往下看。</p><h3>Web Audio API</h3><p>下一个属性是 WaveShaperNode。这个属性名听起来就跟声音有关，这个属性来自W3C的Web Audio API标准。</p><p>我们来看一下标准：</p><ul>\n<li><a href=\"https://www.w3.org/TR/webaudio/\">https://www.w3.org/TR/webaudio/</a></li>\n</ul><p>Web Audio API中有大量的属性，这里我用代码做了过滤。得到了以下列表：</p><pre><code>[&quot;AudioContext&quot;, &quot;AudioNode&quot;, &quot;AnalyserNode&quot;, &quot;AudioBuffer&quot;, &quot;AudioBufferSourceNode&quot;, &quot;AudioDestinationNode&quot;, &quot;AudioParam&quot;, &quot;AudioListener&quot;, &quot;AudioWorklet&quot;, &quot;AudioWorkletGlobalScope&quot;, &quot;AudioWorkletNode&quot;, &quot;AudioWorkletProcessor&quot;, &quot;BiquadFilterNode&quot;, &quot;ChannelMergerNode&quot;, &quot;ChannelSplitterNode&quot;, &quot;ConstantSourceNode&quot;, &quot;ConvolverNode&quot;, &quot;DelayNode&quot;, &quot;DynamicsCompressorNode&quot;, &quot;GainNode&quot;, &quot;IIRFilterNode&quot;, &quot;MediaElementAudioSourceNode&quot;, &quot;MediaStreamAudioSourceNode&quot;, &quot;MediaStreamTrackAudioSourceNode&quot;, &quot;MediaStreamAudioDestinationNode&quot;, &quot;PannerNode&quot;, &quot;PeriodicWave&quot;, &quot;OscillatorNode&quot;, &quot;StereoPannerNode&quot;, &quot;WaveShaperNode&quot;, &quot;ScriptProcessorNode&quot;, &quot;AudioProcessingEvent&quot;]\n</code></pre><p>于是我们把它们也过滤掉：</p><pre><code class=\"language-JavaScript\">\nnames = filterOut(names, [\"AudioContext\", \"AudioNode\", \"AnalyserNode\", \"AudioBuffer\", \"AudioBufferSourceNode\", \"AudioDestinationNode\", \"AudioParam\", \"AudioListener\", \"AudioWorklet\", \"AudioWorkletGlobalScope\", \"AudioWorkletNode\", \"AudioWorkletProcessor\", \"BiquadFilterNode\", \"ChannelMergerNode\", \"ChannelSplitterNode\", \"ConstantSourceNode\", \"ConvolverNode\", \"DelayNode\", \"DynamicsCompressorNode\", \"GainNode\", \"IIRFilterNode\", \"MediaElementAudioSourceNode\", \"MediaStreamAudioSourceNode\", \"MediaStreamTrackAudioSourceNode\", \"MediaStreamAudioDestinationNode\", \"PannerNode\", \"PeriodicWave\", \"OscillatorNode\", \"StereoPannerNode\", \"WaveShaperNode\", \"ScriptProcessorNode\", \"AudioProcessingEvent\"]);\n</code></pre><p>我们继续看下一个属性。</p><h3>Encoding标准</h3><p>在我的环境中，下一个属性是 TextDecoder，经过查阅得知，这个属性也来自一份WHATWG的标准，Encoding：</p><ul>\n<li><a href=\"https://encoding.spec.whatwg.org/#dom-textencoder\">https://encoding.spec.whatwg.org/#dom-textencoder</a></li>\n</ul><p>这份标准仅仅包含四个接口，我们把它们过滤掉：</p><pre><code class=\"language-JavaScript\">names = filterOut(names, [\"TextDecoder\", \"TextEncoder\", \"TextDecoderStream\", \"TextEncoderStream\"]);\n</code></pre><p>我们继续来看下一个属性。</p><h3>Web Background Synchronization</h3><p>下一个属性是 SyncManager，这个属性比较特殊，它并没有被标准化，但是我们仍然可以找到它的来源文档：</p><ul>\n<li><a href=\"https://wicg.github.io/BackgroundSync/spec/#sync-manager-interface\">https://wicg.github.io/BackgroundSync/spec/#sync-manager-interface</a></li>\n</ul><p>这个属性我们就不多说了，过滤掉就好了。</p><h3>Web Cryptography API</h3><p>我们继续看下去，下一个属性是 SubtleCrypto，这个属性来自Web Cryptography API，也是W3C的标准。</p><ul>\n<li><a href=\"https://www.w3.org/TR/WebCryptoAPI/\">https://www.w3.org/TR/WebCryptoAPI/</a></li>\n</ul><p>这份标准中规定了三个Class和一个Window对象的扩展，给Window对象添加了一个属性crypto。</p><pre><code class=\"language-JavaScript\">names = filterOut(names, [\"CryptoKey\", \"SubtleCrypto\", \"Crypto\", \"crypto\"]);\n</code></pre><p>我们继续来看。</p><h3>Media Source Extensions</h3><p>下一个属性是 SourceBufferList，它来自于：</p><ul>\n<li><a href=\"https://www.w3.org/TR/media-source/\">https://www.w3.org/TR/media-source/</a></li>\n</ul><p>这份标准中包含了三个接口，这份标准还扩展了一些接口，但是没有扩展window。</p><pre><code class=\"language-JavaScript\">names = filterOut(names, [\"MediaSource\", \"SourceBuffer\", \"SourceBufferList\"]);\n</code></pre><p>我们继续看下一个属性。</p><h3>The Screen Orientation API</h3><p>下一个属性是ScreenOrientation，它来自W3C的The Screen Orientation API标准：</p><ul>\n<li><a href=\"https://www.w3.org/TR/screen-orientation/\">https://www.w3.org/TR/screen-orientation/</a></li>\n</ul><p>它里面只有ScreenOrientation一个接口，也是可以过滤掉的。</p><h2>结语</h2><p>到 Screen Orientation API，我这里看到还剩300余个属性没有处理，剩余部分，我想把它留给大家自己来完成。</p><p>我们可以看到，在整理API的过程中，我们可以找到各种不同组织的标准，比如：</p><ul>\n<li>ECMA402标准来自 ECMA；</li>\n<li>Encoding标准来自WHATWG；</li>\n<li>WebGL标准来自 Khronos；</li>\n<li>Web Cryptography标准来自 W3C；</li>\n<li>还有些API，根本没有被标准化。</li>\n</ul><p>浏览器环境的API，正是这样复杂的环境。我们平时编程面对的环境也是这样的一个环境。</p><p>所以，面对如此繁复的API，我建议在系统掌握DOM、CSSOM的基础上，你可以仅仅做大概的浏览和记忆，根据实际工作需要，选择其中几个来深入学习。</p><p>做完这个实验，你对Web API的理解应该会有很大提升。</p><p>这一节课的问题就是完成所有的API到标准的归类，不同的浏览器环境应该略有不同，欢迎你把自己的结果留言一起讨论。</p><p></p>","comments":[{"had_liked":false,"id":89032,"user_name":"CC","can_delete":false,"product_type":"c1","uid":1021014,"ip_address":"","ucode":"2B732860C4231B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/94/56/4b8395f6.jpg","comment_is_top":false,"comment_ctime":1556067433,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"516952142953","product_id":100023201,"comment_content":"经过几天的整理，终于穷尽了 Chrome 下的 API。记得之前看别人文章中介绍的各种 API 一头雾水，现在回头看，多了不少熟悉感，而且每个 API 都能落在知识树的一个节点上。<br><br>分享整理所得：<br><br>W3C 标准下的 API：<br>* Web Audio API<br>* Web Cryptography API<br>* Media Source Extensions<br>* The Screen Orientation API<br>* Network Information API<br>* Web MIDI (Musical Instrument Digital Interface ) API <br>* IndexedDB API<br>* Gamepad API<br>* DeviceOrientation Event<br>* Web App Manifest<br>* WebVTT: The Web Video Text Tracks Format<br>* Touch Events<br>* Scalable Vector Graphics (SVG)<br>* Resize Observer API<br>* Intersection Observer<br>* Mutation Observer<br>* Cooperative Scheduling of Background Tasks<br>* Service Worker API<br>* Payment Request API<br>* Presentation API<br>* Web Authentication API<br><br>WICG 标准下的 API：<br>* Input Device Capabilitie<br>* Web Bluetooth API<br>* WebUSB API<br><br>ECMA 标准下的 API：<br>* JavaScript 全局变量<br>* ECMAScript 2018 Internationalization API<br><br>WHATWG 标准下的 API：<br>* Streams<br>* Encoding<br>* URL<br><br>Khronos 标准下的 API：<br>* WebGL<br><br>未标准化的 API：<br>* Web Background Synchronization<br>* WebRTC API<br>* Document Object Model XPath<br>* Visual Viewport API<br>* Performance Timeline API<br>","like_count":121},{"had_liked":false,"id":87618,"user_name":"阿成","can_delete":false,"product_type":"c1","uid":1390032,"ip_address":"","ucode":"CEC3CD65FB9333","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/d0/f2ac6d91.jpg","comment_is_top":false,"comment_ctime":1555642589,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"108929824989","product_id":100023201,"comment_content":"整理的过程中，我发现我对翻阅标准的恐惧心降低了... 而且大概了解了一下这些spec都在干些啥(虽然也有很多并不知道他们是在干啥)...<br><br>就是花的时间有点长... 都整理完太累了... 有些词实在是检索不到spec，只能在一些犄角旮旯的地方甚至源码里看到引用...<br><br>过程中，甚至提升了搜索引擎的使用技巧：<br>关键词 site:域名<br>&quot;关键词&quot;<br><br>结果如下（肯定有不准确的地方... 仅供参考）：<br>https:&#47;&#47;gist.github.com&#47;aimergenge&#47;c0fb01dbdbf3aa1c2b31e3f2ae779274<br><br>tc39,w3c,whatwg 基本就这几个组织在推动web发展....<br>另外还有个khronos管openGL、webGL等图形标准的...","like_count":26},{"had_liked":false,"id":213604,"user_name":"champ可口可乐了","can_delete":false,"product_type":"c1","uid":1177430,"ip_address":"","ucode":"EA75C67E9124C7","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/56/b82eeac7.jpg","comment_is_top":false,"comment_ctime":1588489214,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44538162174","product_id":100023201,"comment_content":"其实，MDN上已经整理好了<br>https:&#47;&#47;developer.mozilla.org&#47;en-US&#47;docs&#47;Web&#47;API","like_count":11},{"had_liked":false,"id":87173,"user_name":"mfist","can_delete":false,"product_type":"c1","uid":1373624,"ip_address":"","ucode":"4F99F422C23FB4","user_header":"https://static001.geekbang.org/account/avatar/00/14/f5/b8/9f165f4b.jpg","comment_is_top":false,"comment_ctime":1555540944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23030377424","product_id":100023201,"comment_content":"1. 通过老师的课，感觉慢慢会去翻标准了，之前学习没有见过的API，只是到MDN为止。<br>2. 浏览器器中大多数的对象都原型继承自Object，是否可以根据原型继承关系 将window上面的api绘制成一颗树？有了这些继承关系 是否更容易理清这些全局属性呢。<br>","like_count":6},{"had_liked":false,"id":92601,"user_name":"🐳李小博🐳","can_delete":false,"product_type":"c1","uid":1463337,"ip_address":"","ucode":"DCA1AE4DC793EC","user_header":"https://static001.geekbang.org/account/avatar/00/16/54/29/59663398.jpg","comment_is_top":false,"comment_ctime":1557305530,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18737174714","product_id":100023201,"comment_content":"有一个疑惑是，大小写的两个属性有什么区别<br>Screen，screen<br>Event，event","like_count":4,"discussions":[{"author":{"id":1048547,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/e3/4c8bb163.jpg","nickname":"D°Sunny","note":"","ucode":"9952174D7B0029","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":26651,"discussion_content":"大写的是类，小写的是对象。前面的文章有提到","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1570612542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":167294,"user_name":"余文郁","can_delete":false,"product_type":"c1","uid":1388319,"ip_address":"","ucode":"A51117A929EBD8","user_header":"https://static001.geekbang.org/account/avatar/00/15/2f/1f/f95bd8c9.jpg","comment_is_top":false,"comment_ctime":1577757911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10167692503","product_id":100023201,"comment_content":"winter老师，问个关于DOM获取的问题，通过querySelectorAll获取的是静态集合，但通过getElementByClassName获取的是动态集合，会随着DOM结构的变化而变化，想这些获取的HTMLCollection和NodeList如何判断是不是动态的呢，以及他们底层的原理是怎么样的呢，为什么会有动态静态之分","like_count":2},{"had_liked":false,"id":208597,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1587388417,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5882355713","product_id":100023201,"comment_content":"说实话，老师这个整理API的学习方法挺好，加深对API的整体理解，对技术也有了更全面的认知。（还可以归个类，大致分分组）以后我学其他技术的时候也用这个办法，快速上手。","like_count":1},{"had_liked":false,"id":340441,"user_name":"*","can_delete":false,"product_type":"c1","uid":1710685,"ip_address":"","ucode":"DB5BA86B4D7E5C","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1a/5d/3c8004c6.jpg","comment_is_top":false,"comment_ctime":1648814411,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648814411","product_id":100023201,"comment_content":"WHATWG、W3C这两个组织有什么区别啊","like_count":0},{"had_liked":false,"id":243830,"user_name":"Marvin","can_delete":false,"product_type":"c1","uid":1138706,"ip_address":"","ucode":"D955A98C48CBEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/12/268826e6.jpg","comment_is_top":false,"comment_ctime":1598284315,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598284315","product_id":100023201,"comment_content":"我过滤到其他API之前还剩下523个，大家呢？","like_count":0,"discussions":[{"author":{"id":1087879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","nickname":"dao","note":"","ucode":"4181FB270462CF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386939,"discussion_content":"563","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627900088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227149,"user_name":"李岩","can_delete":false,"product_type":"c1","uid":1793763,"ip_address":"","ucode":"A7E1259C5B81AB","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5e/e3/da3167ff.jpg","comment_is_top":false,"comment_ctime":1592298322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592298322","product_id":100023201,"comment_content":"醍醐灌顶<br>","like_count":0}]}