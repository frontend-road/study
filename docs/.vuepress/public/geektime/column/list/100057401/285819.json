{"id":285819,"title":"17 | 为什么不建议你使用自增主键？","content":"<p>你好，我是王磊，你也可以叫我Ivan。</p><p>有经验的数据库开发人员一定知道，数据库除了事务处理、查询引擎这些核心功能外，还会提供一些小特性。它们看上去不起眼，却对简化开发工作很有帮助。</p><p>不过，这些特性的设计往往是以单体数据库架构和适度的并发压力为前提的。随着业务规模扩大，在真正的海量并发下，这些特性就可能被削弱或者失效。在分布式架构下，是否要延续这些特性也存在不确定性，我们今天要聊的自增主键就是这样的小特性。</p><p>虽然，我对自增主键的态度和<a href=\"https://time.geekbang.org/column/article/285270\">第16讲</a>提到的存储过程一样，都不推荐你使用，但是原因各有不同。存储过程主要是工程方面的原因，而自增主键则是架构上的因素。好了，让我们进入正题吧。</p><h2>自增主键的特性</h2><p>自增主键在不同的数据库中的存在形式稍有差异。在MySQL中，你可以在建表时直接通过关键字auto_increment来定义自增主键，例如这样：</p><pre><code>create table ‘test’ (\n  ‘id’  int(16) NOT NULL AUTO_INCREMENT,\n  ‘name’  char(10) DEFAULT NULL,\n  PRIMARY KEY(‘id’) \n) ENGINE = InnoDB;\n</code></pre><p>而在Oracle中则是先声明一个连续的序列，也就是sequence，而后在insert语句中可以直接引用sequence，例如下面这样：</p><pre><code>create sequence test_seq increment by 1 start with 1;\ninsert into test(id, name) values(test_seq.nextval, ' An example ');\n</code></pre><p>自增主键给开发人员提供了很大的便利。因为，主键必须要保证唯一，而且多数设计规范都会要求，主键不要带有业务属性，所以如果数据库没有内置这个特性，应用开发人员就必须自己设计一套主键的生成逻辑。数据库原生提供的自增主键免去了这些工作量，而且似乎还能满足开发人员的更多的期待。</p><!-- [[[read_end]]] --><p>这些期待是什么呢？我总结了一下，大概有这么三层：</p><ul>\n<li>首先是唯一性，这是必须保证的，否则还能叫主键吗？</li>\n<li>其次是单调递增，也就是后插入记录的自增主键值一定比先插入记录要大。</li>\n<li>最后就是连续递增，自增主键每次加1。有些应用系统甚至会基于自增主键的“连续递增”特性来设计业务逻辑。</li>\n</ul><h2>单体数据库的自增主键</h2><p>但是，我接下来的分析可能会让你失望，因为除了最基本的唯一性，另外的两层期待都是无法充分满足的。</p><h3>无法连续递增</h3><p>首先说连续递增。在多数情况下，自增主键确实表现为连续递增。但是当事务发生冲突时，主键就会跳跃，留下空洞。下面，我用一个例子简单介绍下MySQL的处理过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/1a/21/1ae285029b67aa128fd34c5cc3caf721.jpg?wh=2700*622\" alt=\"\"></p><p>两个事务T1和T2都要在同一张表中插入记录，T1先执行，得到的主键是25，而T2后执行，得到是26。</p><p><img src=\"https://static001.geekbang.org/resource/image/7e/54/7e48552810fcc500aec4f4c253a18e54.jpg?wh=2700*605\" alt=\"\"></p><p>但是，T1事务还要操作其他数据库表，结果不走运，出现了异常，T1必须回滚。T2事务则正常执行成功，完成了事务提交。</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/6e/f8890f3f251cc74808f6fyy53a29526e.jpg?wh=2700*608\" alt=\"\"></p><p>这样，在数据表中就缺少主键为25的记录，而当下一个事务T3再次申请主键时，得到的就是27，那么25就成了永远的空洞。</p><p>为什么不支持连续递增呢？这是因为自增字段所依赖的计数器并不是和事务绑定的。如果要做到连续递增，就要保证计数器提供的每个主键都被使用。</p><p>怎么确保每个主键都被使用呢？那就要等待使用主键的事务都提交成功。这意味着，必须前一个事务提交后，计数器才能为后一个事务提供新的主键，这个计数器就变成了一个表级锁。</p><p>显然，如果存在这么大粒度的锁，性能肯定会很差，所以MySQL优先选择了性能，放弃了连续递增。至于那些因为事务冲突被跳过的数字呢，系统也不会再回收重用了，这是因为要保证自增主键的单调递增。</p><p>看到这里你可能会想， 虽然实现不了连续递增，但至少能保证单调递增，也不错。那么，我要再给你泼一盆冷水了，这个单调递增有时也是不能保证的。</p><h3>无法单调递增</h3><p>对于单体数据库自身来说，自增主键确实是单调递增的。但使用自增主键也是有前提的，那就是主键生成的速度要能够满足应用系统的并发需求。而在高并发量场景下，每个事务都要去申请主键，数据库如果无法及时处理，自增主键就会成为瓶颈。那么，这时只用自增主键已经不能解决问题了，往往还要在应用系统上做些优化。</p><p>比如，对于Oracle数据库，常见的优化方式就是由Sequence负责生成主键的高位，由应用服务器负责生成低位数字，拼接起来形成完整的主键。</p><p><img src=\"https://static001.geekbang.org/resource/image/f2/0c/f2b6cc531b0dbec7d19f191b6225b20c.jpg?wh=2700*1443\" alt=\"\"></p><p>图中展示这样的例子，数据库的Sequence 是一个5位的整型数字，范围从10001到99999。每个应用系统实例先拿到一个号，比如10001，应用系统在使用这5位为作为高位，自己再去拼接5位的低位，这样得到一个10位长度的主键。这样，每个节点访问一次Sequence就可以处理99999次请求，处理过程是基于应用系统内存中的数据计算主键，没有磁盘I/O开销，而相对的Sequence递增时是要记录日志的，所以方案改进后性能有大幅度提升。</p><p>这个方案虽然使用了Sequence，但也只能保证全局唯一，数据表中最终保存的主键不再是单调递增的了。</p><p>因为，几乎所有数据库中的自增字段或者自增序列都是要记录日志的，也就都会产生磁盘I/O，也就都会面临这个性能瓶颈的问题。所以，我们可以得出一个结论：在一个海量并发场景下，即使借助单体数据库的自增主键特性，也不能实现单调递增的主键。</p><h2>自增主键的问题</h2><p>对于分布式数据库，自增主键带来的麻烦就更大了。具体来说是两个问题，一是在自增主键的产生环节，二是在自增主键的使用环节。</p><p>首先，产生自增主键难点就在单调递增。如果你已经学习过<a href=\"https://time.geekbang.org/column/article/274908\">第5讲</a>就会发现，单调递增这个要求和全局时钟中的TSO是很相似的。你现在已经知道，TSO实现起来比较复杂，也容易成为系统的瓶颈，如果再用作主键的发生器，显然不大合适。</p><p>其次，使用单调递增的主键，也会给分布式数据库的写入带来问题。这个问题是在Range分片下发生的，我们通常将这个问题称为 “尾部热点”。</p><h3>尾部热点</h3><p>我们先通过一组性能测试数据来看看尾部热点问题的现象，这些数据和图表来自<a href=\"https://www.cockroachlabs.com/blog/unpacking-competitive-benchmarks/\">CockroachDB官网</a>。</p><p><img src=\"https://static001.geekbang.org/resource/image/53/d2/5324e7ee83485724b062d6e8e72bcdd2.png?wh=2854*1356\" alt=\"\"></p><p>这本身是一个CockraochDB与YugabyteDB的对比测试。测试环境使用亚马逊跨机房的三节点集群，执行SQL insert操作时，YugabyteDB的TPS达到58,877，而CockroachDB的TPS是34,587。YugabyteDB集群三个节点上的CPU都得到了充分使用，而CockroachDB集群中负载主要集中在一个节点上，另外两个节点的CPU多数情况都处于空闲状态。</p><p>为什么CockroachDB的节点负载这么不均衡呢？这是由于CockroachDB默认设置为Range分片，而测试程序的生成主键是单调递增的，所以新写入的数据往往集中在一个 Range 范围内，而Range又是数据调度的最小单位，只能存在于单节点，那么这时集群就退化成单机的写入性能，不能充分利用分布式读写的扩展优势了。当所有写操作都集中在集群的一个节点时，就出现了我们常说的数据访问热点（Hotspot）。</p><p>图中也体现了CockroachDB改为Hash分片时的情况，因为数据被分散到多个Range，所以TPS一下提升到61,113，性能达到原来的1.77倍。</p><p>现在性能问题的根因已经找到了，就是同时使用自增主键和Range分片。在<a href=\"https://time.geekbang.org/column/article/275696\">第6讲</a>我们已经介绍过了Range分片很多优势，这使得Range分片成为一个不能轻易放弃的选择。于是，主流产品的默认方案是保持Range分片，放弃自增主键，转而用随机主键来代替。</p><h2>随机主键方案</h2><p>随机主键的产生方式可以分为数据库内置和应用外置两种方式。当然对于应用开发者来说，内置方式使用起来会更加简便。</p><h3>内置UUID</h3><p>UUID（Universally Unique Identifier）可能是最经常使用的一种唯一ID算法，CockroachDB也建议使用UUID作为主键，并且内置了同名的数据类型和函数。UUID是由32个的16进制数字组成，所以每个UUID的长度是128位（16^32 = 2^128）。UUID作为一种广泛使用标准，有多个实现版本，影响它的因素包括时间、网卡MAC地址、自定义Namesapce等等。</p><p>但是，UUID的缺点很明显，那就是键值长度过长，达到了128位，因此存储和计算的代价都会增加。</p><h3>内置Radom ID</h3><p>TiDB默认是支持自增主键的，对未声明主键的表，会提供了一个隐式主键_tidb_rowid，因为这个主键大体上是单调递增的，所以也会出现我们前面说的“尾部热点”问题。</p><p>TiDB也提供了UUID函数，而且在4.0版本中还提供了另一种解决方案AutoRandom。TiDB 模仿MySQL的 AutoIncrement，提供了AutoRandom关键字用于生成一个随机ID填充指定列。</p><p><img src=\"https://static001.geekbang.org/resource/image/4y/86/4yy3c805599ebb98ba418a4c63220986.jpg?wh=2700*351\" alt=\"\"></p><p>这个随机ID是一个64位整型，分为三个部分。</p><ul>\n<li>第一部分的符号位没有实际作用。</li>\n<li>第二部分是事务开始时间，默认为5位，可以理解为事务时间戳的一种映射。</li>\n<li>第三部分则是自增的序列号, 使用其余位。</li>\n</ul><p>AutoRandom可以保证表内主键唯一，用户也不需要关注分片情况。</p><h3>外置Snowflake</h3><p>雪花算法（Snowflake）是Twitter公司分布式项目采用的ID生成算法。</p><p><img src=\"https://static001.geekbang.org/resource/image/5a/e2/5a0738f8520a5d21582e896yy3413de2.jpg?wh=2700*348\" alt=\"\"></p><p>这个算法生成的ID是一个64位的长整型，由四个部分构成：</p><ul>\n<li>第一部分是1位的符号位，并没有实际用处，主要为了兼容长整型的格式。</li>\n<li>第二部分是41位的时间戳用来记录本地的毫秒时间。</li>\n<li>第三部分是机器ID，这里说的机器就是生成ID的节点，用10位长度给机器做编码，那意味着最大规模可以达到1024个节点（2^10）。</li>\n<li>最后是12位序列，序列的长度直接决定了一个节点1毫秒能够产生的ID数量，12位就是4096（2^12）。</li>\n</ul><p>这样，根据数据结构推算，雪花算法支持的TPS可以达到419万左右（2^22*1000），我相信对于绝大多数系统来说是足够了。</p><p>但实现雪花算法时，有个小问题往往被忽略，那就是要注意时间回拨带来的影响。机器时钟如果出现回拨，产生的ID就有可能重复，这需要在算法中特殊处理一下。</p><h2>小结</h2><p>那么，今天的课程就到这里了，让我们梳理一下这一讲的要点。</p><ol>\n<li>单体数据库普遍提供了自增主键或序列等方式，自动产生主键。单体数据库的自增主键保证主键唯一、单调递增，但在发生事务冲突时，并不能做到连续递增。在海量并发场景下，通常不能直接使用数据库的自增主键，因为它的性能不能满足要求。解决方式是应用系统进行优化，有数据库控制高位，应用系统控制低位，提升性能。但使用这种方案，主键不再是单调递增的。</li>\n<li>分布式数据库在产生自增主键和使用自增主键两方面都有问题。生成自增主键时，要做到绝对的单调递增，其复杂度等同于TSO全局时钟，而且存在性能上限。使用自增主键时，会导致写入数据集中在单个节点，出现“尾部热点”问题。</li>\n<li>由于自增主键的问题，有的分布式数据库，如CockroachDB更推荐使用随机主键的方式。随机主键的产生机制可以分为数据库内置和应用系统外置两种思路。内置的技术方案，我们介绍了CockraochDB的UUID和TiDB的RadomID。外置技术方案，我们介绍了Snowflake。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/6f/4f/6f4b43cfb79e1f1696c0fcb741d9ed4f.jpg?wh=2700*1435\" alt=\"\"></p><h2>思考题</h2><p>课程的最后，我们来看看今天的思考题。我们说如果分布式数据库使用Range分片的情况下，单调递增的主键会造成写入压力集中在单个节点上，出现“尾部热点”问题。因此，很多产品都用随机主键替换自增主键，分散写入热点。我的问题就是，你觉得使用随机主键是不是一定能避免出现“热点”问题呢？</p><p>欢迎你在评论区留言和我一起讨论，我会在答疑篇和你继续讨论这个问题。如果你身边的朋友也对分布式架构下如何设计主键这个话题感兴趣，你也可以把今天这一讲分享给他，我们一起讨论。</p><h2>学习资料</h2><p>CockroachDB: <a href=\"https://www.cockroachlabs.com/blog/unpacking-competitive-benchmarks/\"><em>Yugabyte vs CockroachDB: Unpacking Competitive Benchmark Claims</em></a></p>","comments":[{"had_liked":false,"id":248616,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1600242016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14485143904","product_id":100057401,"comment_content":"课后题<br>1.第一次听说尾部热点，长见识。<br>2.不好说一定能避免出现“热点”。首先，随机主键替换自增主键，确实能分散写入热点。但如果这个写入&quot;热点&quot;超过db分配集群的容量,那么再怎么分散也没有意义。其次，既然是随机，那么脸也很重要，非酋手全落到一个rang分片内，那么热点还是会出现。<br><br>个人疑问:<br>对于db的单机性能瓶颈，到底是自增主键先到还是db连接数(并行任务数)先到呢？从栏主的描述，感觉是自增主键会先到。（从自增主键的产生环节的描述来看）","like_count":3},{"had_liked":false,"id":277884,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1612658464,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10202593056","product_id":100057401,"comment_content":"对于uuid生成方式，在insert和delete是否会考虑到数据页分裂对性能的影响呢？","like_count":1,"discussions":[{"author":{"id":1904497,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKkThulMFj6MiaY8qlsmHWrlIzo1SEhwDjwpgLP2bhLYETx1f0DepRDsBdssd5dFKN35zzFUYnia1Q/132","nickname":"luck_tou","note":"","ucode":"E6BACBB08C504E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357375,"discussion_content":"你说的这个我觉得肯定有影响，主要还是要权衡！另外newsql风格的数据库这个问题就不太要考虑，lsm和b+的策略有重大区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615796171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311575,"user_name":"麋鹿在泛舟","can_delete":false,"product_type":"c1","uid":1121975,"ip_address":"","ucode":"1379CADA08688E","user_header":"https://static001.geekbang.org/account/avatar/00/11/1e/b7/b20ab184.jpg","comment_is_top":false,"comment_ctime":1631317908,"is_pvip":true,"replies":[{"id":"112918","content":"还是看性能要求，普通场景，自增主键还是很便捷的；高并发场景还是要谨慎使用。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1631362947,"ip_address":"","comment_id":311575,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5926285204","product_id":100057401,"comment_content":"看起来使用自增主键帶来的好外很有限，坏处却很明显，是一种偷懒的行为了。","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526664,"discussion_content":"还是看性能要求，普通场景，自增主键还是很便捷的；高并发场景还是要谨慎使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631362947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346284,"user_name":"nobug","can_delete":false,"product_type":"c1","uid":1132668,"ip_address":"","ucode":"F122B3B66C0798","user_header":"https://static001.geekbang.org/account/avatar/00/11/48/7c/4c4bf254.jpg","comment_is_top":false,"comment_ctime":1652979854,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1652979854","product_id":100057401,"comment_content":"雪花算法生成的id也是单调有序的吧，单调有序的话，还可以避免尾部热点吗？","like_count":0,"discussions":[{"author":{"id":1487584,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","nickname":"鱼","note":"","ucode":"89EC9CE3AD0281","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577669,"discussion_content":"因为它天生支持了在分布式环境下同时支持多台机器生成，不局限于一台机器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656292244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345269,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1652165401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652165401","product_id":100057401,"comment_content":"不使用自增主键插入更新数据索引的问题怎么解决","like_count":0},{"had_liked":false,"id":300614,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1625256851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625256851","product_id":100057401,"comment_content":"自增主键其实老师少提了一个问题：可能在事务并发时造成死锁-这是UUID的一个坑，这是最近在RMDB圈子里出现的一个意外，之前都以为是Index的问题，可是通过查看日志发现死锁的源头就是UUID的计算错误，甚至为此特意提交了云厂商Bug。<br>通过今天的课程其实就发现就是由于事务的高并发，引发了UUID的计算错误，导致了数据库的死锁且直接计算出现一堆超级延时和潜在问题。<br>看RMDB不能只看表层和日志，透过现象看本质，源码中肯定有坑，只是触发条件特殊才导致了我们以为天下无贼而已。","like_count":0},{"had_liked":false,"id":286687,"user_name":"Dr. Wong","can_delete":false,"product_type":"c1","uid":1518348,"ip_address":"","ucode":"0CEF58927E69E8","user_header":"https://static001.geekbang.org/account/avatar/00/17/2b/0c/f4bdb520.jpg","comment_is_top":false,"comment_ctime":1617501512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617501512","product_id":100057401,"comment_content":"单体数据库自增主键的优势在于数据类型为4-8个字节的整形，加上主键列排列方式的特点，可以让数据存的更为紧凑，从而提升检索速度和减少表及索引的大小。不绑定业务，不是海量并发，用着也没问题。","like_count":0},{"had_liked":false,"id":281418,"user_name":"慕然","can_delete":false,"product_type":"c1","uid":1667714,"ip_address":"","ucode":"8622102560A80F","user_header":"https://static001.geekbang.org/account/avatar/00/19/72/82/24fb9d18.jpg","comment_is_top":false,"comment_ctime":1614742925,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1614742925","product_id":100057401,"comment_content":"“机器时钟如果出现回拨，产生的 ID 就有可能重复，这需要在算法中特殊处理一下”。请问这里的特殊处理指的是怎么处理呢？直接抛异常，还是等待？","like_count":0,"discussions":[{"author":{"id":1487584,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","nickname":"鱼","note":"","ucode":"89EC9CE3AD0281","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570518,"discussion_content":"造成时间回拨的原因主要是因为时间同步，最粗暴的方法，关闭NTP时间同步或者使用阿里的时间服务器进行同步（消除了润秒）。优雅一些的方法如下：1.遇到时间回拨就等待再获取ID；2.报错交给业务方处理（通常是重试）；3.snowflake设计考虑时间回拨，例如取2bit作为时间回拨位，遇到就+1，这里取哪高两位还是低两位值得思考","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651803932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1904497,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKkThulMFj6MiaY8qlsmHWrlIzo1SEhwDjwpgLP2bhLYETx1f0DepRDsBdssd5dFKN35zzFUYnia1Q/132","nickname":"luck_tou","note":"","ucode":"E6BACBB08C504E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357374,"discussion_content":"我觉得不是抛异常也不是等待，应该是改算法，引入新的不可重复的变量解决问题，当然会影响生成速度吧。抛异常不可取，这样会中断操作；等待的可能性也不大，因为等待意味着发现有重复，发现这个事情会随着行数数量的增大而越来越长，最终发现的时间将不可承受。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615795974,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254796,"user_name":"三石","can_delete":false,"product_type":"c1","uid":1123146,"ip_address":"","ucode":"734DCECABC3BEC","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","comment_is_top":false,"comment_ctime":1603187930,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1603187930","product_id":100057401,"comment_content":"单体数据库普遍提供了自增主键或序列等方式，自动产生主键。单体数据库的自增主键保证主键唯一、单调递增，但在发生事务冲突时，并不能做到连续递增----这里有个问题请教下，自增主键一般没系统会做赋予业务含义，只要保证递增即可，连续递增这个什么场景会用到呢？","like_count":0,"discussions":[{"author":{"id":1904497,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKkThulMFj6MiaY8qlsmHWrlIzo1SEhwDjwpgLP2bhLYETx1f0DepRDsBdssd5dFKN35zzFUYnia1Q/132","nickname":"luck_tou","note":"","ucode":"E6BACBB08C504E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357378,"discussion_content":"从简单的无空洞的特性就有很多好处，比如计算总数时候将不需要遍历主键，计算相差位置的时候可以直接id相减等；其次就是在大尺度上考虑问题，空洞代表了浪费，有空洞的递增将更快的耗尽资源。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615796469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254794,"user_name":"三石","can_delete":false,"product_type":"c1","uid":1123146,"ip_address":"","ucode":"734DCECABC3BEC","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","comment_is_top":false,"comment_ctime":1603187656,"is_pvip":false,"replies":[{"id":"92930","content":"建议先看下第六讲分片机制","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1603200859,"ip_address":"","comment_id":254794,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603187656","product_id":100057401,"comment_content":"课程的最后，我们来看看今天的思考题。我们说如果分布式数据库使用 Range 分片的情况下，单调递增的主键会造成写入压力集中在单个节点上，出现“尾部热点”问题------分布式数据库为啥还用递增主键当分片的路由字段？数据库系统设计没这么考虑的吧，根据主业务来权衡用哪些业务字段做分片路由吧","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507514,"discussion_content":"建议先看下第六讲分片机制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603200859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254789,"user_name":"三石","can_delete":false,"product_type":"c1","uid":1123146,"ip_address":"","ucode":"734DCECABC3BEC","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","comment_is_top":false,"comment_ctime":1603187371,"is_pvip":false,"replies":[{"id":"92929","content":"必须不能是表锁呀，捂脸","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1603200584,"ip_address":"","comment_id":254789,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1603187371","product_id":100057401,"comment_content":"怎么确保每个主键都被使用呢？那就要等待使用主键的事务都提交成功。这意味着，必须前一个事务提交后，计数器才能为后一个事务提供新的主键，这个计数器就变成了一个表级锁。-----mysql的自增主键本身就带锁而且是表锁吧？","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507512,"discussion_content":"必须不能是表锁呀，捂脸","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603200584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253652,"avatar":"https://static001.geekbang.org/account/avatar/00/13/21/14/423a821f.jpg","nickname":"Steven","note":"","ucode":"3FE64459842015","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380132,"discussion_content":"AUTO-INC Locking 是一种特殊的表锁。\n\n5.1.22 开始，InnoDB存储引擎提供了参数 innodb_autoinc_lock_mode 来控制自增长的模式，默认值为 1，即对于simple inserts，该值会用互斥量去对内存中的计数器进行累加的操作。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624352756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315149,"discussion_content":"作者大大，这是我从知乎的一个专栏看到的----AUTOINC 锁又叫自增锁（一般简写成 AI 锁），是一种表锁，当表中有自增列（AUTOINCREMENT）时出现。当插入表中有自增列时，数据库需要自动生成自增值，它会先为该表加 AUTOINC 表锁，阻塞其他事务的插入操作，这样保证生成的自增值肯定是唯一的\n\n作者：Java架构师想静静\n链接：https://zhuanlan.zhihu.com/p/149228460\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603244853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248865,"user_name":"真名不叫黄金","can_delete":false,"product_type":"c1","uid":1174066,"ip_address":"","ucode":"FB611FC98F5BA7","user_header":"https://static001.geekbang.org/account/avatar/00/11/ea/32/1fd102ec.jpg","comment_is_top":false,"comment_ctime":1600338819,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600338819","product_id":100057401,"comment_content":"随机主键也不一定能避免热点，因为索引也可能有热点:<br>1. 索引的列值可能是单调递增的，比如以(created_at)作为索引，那么这个索引的写入也会有尾部热点<br>2. 索引值的基数分布不均匀，比如以(user_id)作为索引，但是恰巧他是个大客户，数据库中20%都是同一个user_id的数据，那么也会有热点。","like_count":0},{"had_liked":false,"id":248745,"user_name":"Geek_0c1732","can_delete":false,"product_type":"c1","uid":1721278,"ip_address":"","ucode":"6276D0412CCE51","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLAhj2fB8NI2TPI1SNicgiciczuMUHyAb9HHBkkKJHrgtR162fsicaTqdAneHfuVX7icDXaVibDHstM9L47g/132","comment_is_top":false,"comment_ctime":1600298591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600298591","product_id":100057401,"comment_content":"oceanbase的自增字段只能保证在一个分区内的单调递增就是为了这个原因吧！印象中oceanbase好像不能使用自增字段做主键","like_count":0},{"had_liked":false,"id":248659,"user_name":"平风造雨","can_delete":false,"product_type":"c1","uid":1014349,"ip_address":"","ucode":"F9EE4704F31E22","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/4d/b0228a1a.jpg","comment_is_top":false,"comment_ctime":1600255155,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1600255155","product_id":100057401,"comment_content":"随机主键的如果是64位的Long，再使用Range分区的情况下，某段时间内某个分区依然还是热点吧？","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314709,"discussion_content":"提前分析下业务数据的特性，用离散性较好的业务字段做分区路由字段不更好么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603188175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248619,"user_name":"游弋云端","can_delete":false,"product_type":"c1","uid":1208637,"ip_address":"","ucode":"A960E8F5AA25B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/71/3d/da8dc880.jpg","comment_is_top":false,"comment_ctime":1600242562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600242562","product_id":100057401,"comment_content":"个人认为自增主键本身在单体数据库中不是一个良好的设计，应该定义自己的主键或者流水号规则。分布式系统中，需要一个流水号分配中心，类似于Oracle的解决方案，分配一个号段先持久化，然后对外发放，异常后+X来避免重复分配，保障流水号唯一。","like_count":1},{"had_liked":false,"id":248522,"user_name":"左岸","can_delete":false,"product_type":"c1","uid":1019962,"ip_address":"","ucode":"259F40EBAD148C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/3a/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1600210751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600210751","product_id":100057401,"comment_content":"所以结论就是分布式下，做到全局唯一和趋势递增更简单，不要想着单调递增？","like_count":0}]}