{"id":6895,"title":"05 | 复杂度来源：高可用","content":"<p>今天，我们聊聊复杂度的第二个来源<span class=\"orange\">高可用</span>。</p>\n<p>参考维基百科，先来看看高可用的定义。</p>\n<blockquote>\n<p>系统无中断地执行其功能的能力，代表系统的可用性程度，是进行系统设计时的准则之一。</p>\n</blockquote>\n<p>这个定义的关键在于“<strong>无中断</strong>”，但恰好难点也在“无中断”上面，因为无论是单个硬件还是单个软件，都不可能做到无中断，硬件会出故障，软件会有bug；硬件会逐渐老化，软件会越来越复杂和庞大……</p>\n<p>除了硬件和软件本质上无法做到“无中断”，外部环境导致的不可用更加不可避免、不受控制。例如，断电、水灾、地震，这些事故或者灾难也会导致系统不可用，而且影响程度更加严重，更加难以预测和规避。</p>\n<p>所以，系统的高可用方案五花八门，但万变不离其宗，本质上都是通过“<strong>冗余</strong>”来实现高可用。通俗点来讲，就是一台机器不够就两台，两台不够就四台；一个机房可能断电，那就部署两个机房；一条通道可能故障，那就用两条，两条不够那就用三条（移动、电信、联通一起上）。高可用的“冗余”解决方案，单纯从形式上来看，和之前讲的高性能是一样的，都是通过增加更多机器来达到目的，但其实本质上是有根本区别的：<strong>高性能增加机器目的在于“扩展”处理性能；高可用增加机器目的在于“冗余”处理单元</strong>。</p>\n<p>通过冗余增强了可用性，但同时也带来了复杂性，我会根据不同的应用场景逐一分析。</p>\n<h2>计算高可用</h2>\n<p>这里的“计算”指的是业务的逻辑处理。计算有一个特点就是<strong>无论在哪台机器上进行计算，同样的算法和输入数据，产出的结果都是一样的</strong>，所以将计算从一台机器迁移到另外一台机器，对业务并没有什么影响。既然如此，计算高可用的复杂度体现在哪里呢？我以最简单的单机变双机为例进行分析。先来看一个单机变双机的简单架构示意图。</p>\n<!-- [[[read_end]]] -->\n<p><img src=\"https://static001.geekbang.org/resource/image/96/97/9616057cea1365eacf5f6c9c0091yy97.jpg?wh=2798*1881\" alt=\"\" /></p>\n<p>你可能会发现，这个双机的架构图和上期“高性能”讲到的双机架构图是一样的，因此复杂度也是类似的，具体表现为：</p>\n<ul>\n<li>\n<p>需要增加一个任务分配器，选择合适的任务分配器也是一件复杂的事情，需要综合考虑性能、成本、可维护性、可用性等各方面因素。</p>\n</li>\n<li>\n<p>任务分配器和真正的业务服务器之间有连接和交互，需要选择合适的连接方式，并且对连接进行管理。例如，连接建立、连接检测、连接中断后如何处理等。</p>\n</li>\n<li>\n<p>任务分配器需要增加分配算法。例如，常见的双机算法有主备、主主，主备方案又可以细分为冷备、温备、热备。</p>\n</li>\n</ul>\n<p>上面这个示意图只是简单的双机架构，我们再看一个复杂一点的高可用集群架构。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/e1/8d/e1e003e99efe63669d8137782d5fe18d.jpg?wh=3163*1916\" alt=\"\" /></p>\n<p>这个高可用集群相比双机来说，分配算法更加复杂，可以是1主3备、2主2备、3主1备、4主0备，具体应该采用哪种方式，需要结合实际业务需求来分析和判断，并不存在某种算法就一定优于另外的算法。例如，ZooKeeper采用的就是1主多备，而Memcached采用的就是全主0备。</p>\n<h2>存储高可用</h2>\n<p>对于需要存储数据的系统来说，整个系统的高可用设计关键点和难点就在于“存储高可用”。存储与计算相比，有一个本质上的区别：<strong>将数据从一台机器搬到到另一台机器，需要经过线路进行传输</strong>。线路传输的速度是毫秒级别，同一机房内部能够做到几毫秒；分布在不同地方的机房，传输耗时需要几十甚至上百毫秒。例如，从广州机房到北京机房，稳定情况下ping延时大约是50ms，不稳定情况下可能达到1s甚至更多。</p>\n<p>虽然毫秒对于人来说几乎没有什么感觉，但是对于高可用系统来说，就是本质上的不同，这意味着整个系统在某个时间点上，数据肯定是不一致的。按照“<strong>数据+ 逻辑= 业务</strong>”这个公式来套的话，数据不一致，即使逻辑一致，最后的业务表现就不一样了。以最经典的银行储蓄业务为例，假设用户的数据存在北京机房，用户存入了1万块钱，然后他查询的时候被路由到了上海机房，北京机房的数据没有同步到上海机房，用户会发现他的余额并没有增加1万块。想象一下，此时用户肯定会背后一凉，马上会怀疑自己的钱被盗了，然后赶紧打客服电话投诉，甚至打110报警，即使最后发现只是因为传输延迟导致的问题，站在用户的角度来说，这个过程的体验肯定很不好。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/0b/5d/0bcb547c1f2yyc8c1761cd203656765d.jpg?wh=2458*1623\" alt=\"\" /></p>\n<p>除了物理上的传输速度限制，传输线路本身也存在可用性问题，传输线路可能中断、可能拥塞、可能异常（错包、丢包），并且传输线路的故障时间一般都特别长，短的十几分钟，长的几个小时都是可能的。例如，2015年支付宝因为光缆被挖断，业务影响超过4个小时；2016年中美海底光缆中断3小时等。在传输线路中断的情况下，就意味着存储无法进行同步，在这段时间内整个系统的数据是不一致的。</p>\n<p>综合分析，无论是正常情况下的传输延迟，还是异常情况下的传输中断，都会导致系统的数据在某个时间点或者时间段是不一致的，而数据的不一致又会导致业务问题；但如果完全不做冗余，系统的整体高可用又无法保证，所以<strong>存储高可用的难点不在于如何备份数据，而在于如何减少或者规避数据不一致对业务造成的影响</strong>。</p>\n<p>分布式领域里面有一个著名的CAP定理，从理论上论证了存储高可用的复杂度。也就是说，存储高可用不可能同时满足“一致性、可用性、分区容错性”，最多满足其中两个，这就要求我们在做架构设计时结合业务进行取舍。</p>\n<h2>高可用状态决策</h2>\n<p>无论是计算高可用还是存储高可用，其基础都是“<strong>状态决策</strong>”，即系统需要能够判断当前的状态是正常还是异常，如果出现了异常就要采取行动来保证高可用。如果状态决策本身都是有错误或者有偏差的，那么后续的任何行动和处理无论多么完美也都没有意义和价值。但在具体实践的过程中，恰好存在一个本质的矛盾：<strong>通过冗余来实现的高可用系统，状态决策本质上就不可能做到完全正确</strong>。下面我基于几种常见的决策方式进行详细分析。</p>\n<p>1.独裁式</p>\n<p>独裁式决策指的是存在一个独立的决策主体，我们姑且称它为“决策者”，负责收集信息然后进行决策；所有冗余的个体，我们姑且称它为“上报者”，都将状态信息发送给决策者。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/86/cd/86083402e7fd928782350e6f7c109ccd.jpg?wh=2389*1642\" alt=\"\" /></p>\n<p>独裁式的决策方式不会出现决策混乱的问题，因为只有一个决策者，但问题也正是在于只有一个决策者。当决策者本身故障时，整个系统就无法实现准确的状态决策。如果决策者本身又做一套状态决策，那就陷入一个递归的死循环了。</p>\n<p>2.协商式</p>\n<p>协商式决策指的是两个独立的个体通过交流信息，然后根据规则进行决策，<strong>最常用的协商式决策就是主备决策</strong>。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/57/8a/57ed8efdb316727f99217d8cca11528a.jpg?wh=2003*784\" alt=\"\" /></p>\n<p>这个架构的基本协商规则可以设计成：</p>\n<ul>\n<li>2台服务器启动时都是备机。</li>\n<li>2台服务器建立连接。</li>\n<li>2台服务器交换状态信息。</li>\n<li>某1台服务器做出决策，成为主机；另一台服务器继续保持备机身份。</li>\n</ul>\n<p>协商式决策的架构不复杂，规则也不复杂，其难点在于，如果两者的信息交换出现问题（比如主备连接中断），此时状态决策应该怎么做。</p>\n<ul>\n<li>如果备机在连接中断的情况下认为主机故障，那么备机需要升级为主机，但实际上此时主机并没有故障，那么系统就出现了两个主机，这与设计初衷（1主1备）是不符合的。</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/d2/37/d2469cbb833a01618a8a783ee2674337.jpg?wh=1955*797\" alt=\"\" /></p>\n<ul>\n<li>如果备机在连接中断的情况下不认为主机故障，则此时如果主机真的发生故障，那么系统就没有主机了，这同样与设计初衷（1主1备）是不符合的。</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/da/3c/da340fffcb7e33ffc0f3431856f7403c.jpg?wh=2031*785\" alt=\"\" /></p>\n<ul>\n<li>如果为了规避连接中断对状态决策带来的影响，可以增加更多的连接。例如，双连接、三连接。这样虽然能够降低连接中断对状态带来的影响（注意：只能降低，不能彻底解决），但同时又引入了这几条连接之间信息取舍的问题，即如果不同连接传递的信息不同，应该以哪个连接为准？实际上这也是一个无解的答案，无论以哪个连接为准，在特定场景下都可能存在问题。</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/4f/ef/4fb17b9b33d2ce2bf94269a2f78ffaef.jpg?wh=2014*755\" alt=\"\" /></p>\n<p>综合分析，协商式状态决策在某些场景总是存在一些问题的。</p>\n<p>3.民主式</p>\n<p>民主式决策指的是多个独立的个体通过投票的方式来进行状态决策。例如，ZooKeeper集群在选举leader时就是采用这种方式。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/b6/8c/b681373246bb52bc4c48801a82cb588c.jpg?wh=3340*1397\" alt=\"\" /></p>\n<p>民主式决策和协商式决策比较类似，其基础都是独立的个体之间交换信息，每个个体做出自己的决策，然后按照“<strong>多数取胜</strong>”的规则来确定最终的状态。不同点在于民主式决策比协商式决策要复杂得多，ZooKeeper的选举算法ZAB，绝大部分人都看得云里雾里，更不用说用代码来实现这套算法了。</p>\n<p>除了算法复杂，民主式决策还有一个固有的缺陷：脑裂。这个词来源于医学，指人体左右大脑半球的连接被切断后，左右脑因为无法交换信息，导致各自做出决策，然后身体受到两个大脑分别控制，会做出各种奇怪的动作。例如：当一个脑裂患者更衣时，他有时会一只手将裤子拉起，另一只手却将裤子往下脱。脑裂的根本原因是，原来统一的集群因为连接中断，造成了两个独立分隔的子集群，每个子集群单独进行选举，于是选出了2个主机，相当于人体有两个大脑了。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/0f/74/0fd72dd8fe80dd19c562b8825d25e174.jpg?wh=3031*2754\" alt=\"\" /></p>\n<p>从图中可以看到，正常状态的时候，节点5作为主节点，其他节点作为备节点；当连接发生故障时，节点1、节点2、节点3形成了一个子集群，节点4、节点5形成了另外一个子集群，这两个子集群的连接已经中断，无法进行信息交换。按照民主决策的规则和算法，两个子集群分别选出了节点2和节点5作为主节点，此时整个系统就出现了两个主节点。这个状态违背了系统设计的初衷，两个主节点会各自做出自己的决策，整个系统的状态就混乱了。</p>\n<p>为了解决脑裂问题，民主式决策的系统一般都采用“投票节点数必须超过系统总节点数一半”规则来处理。如图中那种情况，节点4和节点5形成的子集群总节点数只有2个，没有达到总节点数5个的一半，因此这个子集群不会进行选举。这种方式虽然解决了脑裂问题，但同时降低了系统整体的可用性，即如果系统不是因为脑裂问题导致投票节点数过少，而真的是因为节点故障（例如，节点1、节点2、节点3真的发生了故障），此时系统也不会选出主节点，整个系统就相当于宕机了，尽管此时还有节点4和节点5是正常的。</p>\n<p>综合分析，无论采取什么样的方案，状态决策都不可能做到任何场景下都没有问题，但完全不做高可用方案又会产生更大的问题，如何选取适合系统的高可用方案，也是一个复杂的分析、判断和选择的过程。</p>\n<h2>小结</h2>\n<p>今天我给你讲了复杂度来源之一的高可用，分析了计算高可用和存储高可用两个场景，给出了几种高可用状态决策方式，希望对你有所帮助。</p>\n<p>这就是今天的全部内容，留一道思考题给你吧。高性能和高可用是很多系统的核心复杂度，你认为哪个会更复杂一些？理由是什么？</p>\n<p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。（编辑乱入：精彩的留言有机会获得丰厚福利哦！）</p>\n","neighbors":{"left":{"article_title":"04 | 复杂度来源：高性能","id":6605},"right":{"article_title":"06 | 复杂度来源：可扩展性","id":6899}},"comments":[{"had_liked":false,"id":7790,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1525738756,"is_pvip":true,"discussion_count":11,"race_medal":0,"score":"1646498213124","product_id":100006601,"comment_content":"今日心得<br><br>需求驱动驱动；而高可用与高性能，是架构设计中两个非常重要的决策因素。因此，面对不同业务系统的不同需求，对高可用与高性能也会有不同的决策结论，其实现的复杂度也各不相同。支付宝业务，对于可用性和性能就会有很高的要求，在可用性方面希望能提供7＊24不间断服务，在高性能方面则希望能实时收付款；而对于一个学生管理系统，在可用性与性能方面就不一定要有多高的要求，比如晚上可关机，几秒内能查询到信息也可接受。为此，高可用性与高性能的复杂度讨论需要结合业务需求。<br><br>1 WHAT - 什么是可用性？<br>定义可用性，可以先定义什么是不可用。需要经历若干环节，网站的页面才能呈现在最终的用户面前；而其中的任何一个环节出现了故障，都可能会导致网站的页面不可访问，也就是出现了网站不可用的情况。昨夜iOS版本QQ出现大面积闪退就是一个系统不可用的典型案例。<br><br>我们可以利用百分比来对网站可用性进行度量：<br>网站不可用时间=完成故障修复的时间点 - 故障发现的时间点<br>网站年度可用时间=年度总时间 - 网站不可用时间<br>网站年度可用性=(网站年度可用时间&#47;年度总时间) x 100%<br><br>举例：一些知名大型网站的可用性可达到99.99%（俗称4个9），我们可以算一下一年下来留给处理故障的时间有多少？<br>年度总时间=365*24*60=525600分钟<br>网站不可用时间=525600*(1-99.99%)=52.56分钟<br>也就是，如果网站要达到4个9的可用性，一年下来网站不可用时间最多53分钟（也就是不足1个小时）。<br><br>可见，高可用性就是技术实力的象征，高可用性就是竞争力。<br><br>2 WHY - 为什么会出现不可用？<br>硬件故障。网站多运行在普通的商用服务器，而这些服务器本身就不具备高可用性，再加之网站系统背后有数量众多服务器，那么一定时间内服务器宕机是大概率事件，直接导致部署在该服务器上的服务受影响。<br><br>软件BUG或网站更新升级发布。BUG不能消灭，只能减少；上线后的系统在运行过程中，难免会出现故障，而这些故障同样直接导致某些网站服务不可用；此外，网站更新升级发布也会引起相对较频繁的服务器宕机。<br><br>不可抗拒力。如地震、水灾、战争等。<br><br>3 HOW - 如何做到高可用<br>核心思想：网站高可用的主要技术手段是服务与数据的冗余备份与失效转移。同一服务组件部署在多台服务器上；数据存储在多台服务器上互相备份。通过上述技术手段，当任何一台服务器宕机或出现各种不可预期的问题时，就将相应的服务切换到其他可用的服务器上，不影响系统的整体可用性，也不会导致数据丢失。<br><br>从架构角度看可用性：当前网站系统多采用经典的分层模型，从上到下为：应用层、服务层与数据层。应用层主要实现业务逻辑处理；服务层提供可复用的服务；数据层负责数据读写；在部署架构上常采用应用和数据分离部署，应用会部署到不同服务器上，这些服务器被称为应用层的服务器；这些可复用的服务也会各自部署在不同服务器上，称为服务层的服务器；而各类数据库系统、文件柜等数据则部署在数据层的服务器。<br><br>硬件故障方面引起不可用的技术解决措施：(1)应用服务器。可通过负载均衡设备将多个应用服务器构建为集群对外提供服务（前提是这些服务需要设计为无状态，即应用服务器不保存业务的上下文信息，而仅根据每次请求提交的数据进行业务逻辑的操作响应），当均衡设备通过心跳检测手段检测到应用服务器不可用时，则将其从集群中移除，并将请求切换到其他可用的应用服务上。(2)服务层服务器。这些服务器被应用层通过分布式服务框架（如Dubbo）访问，分布式服务框架可在应用层客户端程序中实现软件负载均衡，并通过服务注册中心提供服务的服务器进行心跳检测，当发现有服务器不可用时，立即通知客户端程序修改服务列表，同时移除响应的服务器。(3)数据服务器。需要在数据写入时进行数据同步复制，将数据写入多台服务器上，实现数据冗余备份；当数据服务器宕机时，应用程序将访问切换到有备份数据的服务器上。<br><br>软件方面引起不可用的技术解决措施：通过软件开发过程进行质量保证。通过预发布验证、严格测试、灰度发布等手段，尽量减少上线服务的故障。","like_count":384,"discussions":[{"author":{"id":1270814,"avatar":"https://static001.geekbang.org/account/avatar/00/13/64/1e/3d9d5d5a.jpg","nickname":"磊","note":"","ucode":"102A72830B5458","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377415,"discussion_content":"同样看一篇教程，为啥别人就能学习到这么多( ・◇・)","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1622635070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3104291,"avatar":"","nickname":"Geek_6c11dc","note":"","ucode":"345A2128D664EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1270814,"avatar":"https://static001.geekbang.org/account/avatar/00/13/64/1e/3d9d5d5a.jpg","nickname":"磊","note":"","ucode":"102A72830B5458","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583286,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660013943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":377415,"ip_address":"浙江"},"score":583286,"extra":""}]},{"author":{"id":1305980,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/7c/6cdd7190.jpg","nickname":"闲敲棋子落灯花","note":"","ucode":"64908160BFBCB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320814,"discussion_content":"加餐，给力","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604483787,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1705788,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/07/3c/b4c5897b.jpg","nickname":"😊","note":"","ucode":"CA31516547B07C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386184,"discussion_content":"看完正文再看完评论，舒适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627457896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132316,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/1c/1219b946.jpg","nickname":"Star. D","note":"","ucode":"058DCFD6F813E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385160,"discussion_content":"大佬给力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626925319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1999235,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/81/83/f93b1e62.jpg","nickname":"peaceForce","note":"","ucode":"98A318930DDC9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380415,"discussion_content":"干货","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624496795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028943,"avatar":"","nickname":"Geek9625","note":"","ucode":"8110B0DE0432E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380389,"discussion_content":"需求驱动驱动？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624463367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008809,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/64/a9/27d63f2e.jpg","nickname":"佳楠","note":"","ucode":"A1698AE91992AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365095,"discussion_content":"买一送一吗，真实在","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617708483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357596,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615821338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1731543,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/6b/d7/8872624a.jpg","nickname":"xmeng","note":"","ucode":"C0CA2182BA3B4B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356518,"discussion_content":"加餐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615615546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2036986,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/14/fa/d5a650a7.jpg","nickname":"NoMoneyException","note":"","ucode":"A2679A2AB4C5EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288493,"discussion_content":"大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593761125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7888,"user_name":"彡工鸟","can_delete":false,"product_type":"c1","uid":1108881,"ip_address":"","ucode":"37867BF7151F33","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/91/12612612.jpg","comment_is_top":false,"comment_ctime":1525760507,"is_pvip":false,"replies":[{"id":"2271","content":"你说的有道理，没有绝对的结论，我的问题只是想引起大家思考，通过思考来更深入理解复杂度。<br><br>通常情况下，高可用要复杂一些，因为需要考虑的情景很多，而且没有完美的方案，只能做取舍。","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525769751,"ip_address":"","comment_id":7888,"utype":1}],"discussion_count":5,"race_medal":0,"score":"345123144187","product_id":100006601,"comment_content":"这么多回复里，没有人提到高可用和高性能的量化指标，没有这个指标前提下，无法断定哪个更复杂吧。打个比方，高可用两条99就行了，你觉得会复杂，会难么？高性能要求你在并发百万，千万级调用十几个服务前提下，仍能保持10多毫秒，你觉得简单？复杂与否还是要指标。另外，很多人都关注应用节点和硬件节点高可用，却忽略了业务高可用这个视角，系统全挂了，你人工接入业务，在后台帮用户开通，办理，对业务来说也是高可用吧。以上个人看法","like_count":81,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417508,"discussion_content":"你说的有道理，没有绝对的结论，我的问题只是想引起大家思考，通过思考来更深入理解复杂度。\n\n通常情况下，高可用要复杂一些，因为需要考虑的情景很多，而且没有完美的方案，只能做取舍。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525769751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2822855,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/12/c7/a520de81.jpg","nickname":"一心不乱","note":"","ucode":"88FA75C46C90A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589987,"discussion_content":"部分行业的高可用是有国标的，比如失效率低于10（-7）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665449337,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2828559,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/29/0f/d18ae3c5.jpg","nickname":"siwei","note":"","ucode":"85B3B88FC147DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409704,"discussion_content":"要看普世度，不能拿特殊当作一般，这个只能算作特殊情况，就好比一年有365天，而润年是366天，你就非说一年有366天","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635492794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098348,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c2/6c/677005ae.jpg","nickname":"李晓清","note":"","ucode":"00F68107F14934","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383732,"discussion_content":"认同你，我觉得看乔新亮讲高可用可能视角会更高，不是单一的技术思维","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626226746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026832,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ab/10/b812ff3e.jpg","nickname":"Hesher","note":"","ucode":"99AB8B1704CB7E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347833,"discussion_content":"严谨","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612336231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":20333,"user_name":"小超在努力","can_delete":false,"product_type":"c1","uid":1209160,"ip_address":"","ucode":"5C04AA8A96532F","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/48/ced94e09.jpg","comment_is_top":false,"comment_ctime":1534381762,"is_pvip":false,"replies":[{"id":"7119","content":"你已参透天机😄","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1534387664,"ip_address":"","comment_id":20333,"utype":1}],"discussion_count":6,"race_medal":0,"score":"340836798146","product_id":100006601,"comment_content":"古人有言：先解决有无，再解决优化。所以可用更难，性能次之，找对象同理。","like_count":80,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422210,"discussion_content":"你已参透天机😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534387664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558778,"discussion_content":"听说还有一个词，叫宁缺毋滥 宁死不从","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648462357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2842415,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/5f/2f/251c062d.jpg","nickname":"鼎风","note":"","ucode":"1992C1061638BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547319,"discussion_content":"找对象先解决有没有，再解决好不好？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642610081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1626542,"avatar":"https://static001.geekbang.org/account/avatar/00/18/d1/ae/c1b186e6.jpg","nickname":"Mr.张","note":"","ucode":"AE4BC29C26A268","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536498,"discussion_content":"秀啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638796823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1395162,"avatar":"https://static001.geekbang.org/account/avatar/00/15/49/da/8b4e1408.jpg","nickname":"Ted","note":"","ucode":"89A8202074C0B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387932,"discussion_content":"犀利","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628502154,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1137880,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5c/d8/dfe1d4dc.jpg","nickname":"学斌","note":"","ucode":"ED3432D8EDC327","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373976,"discussion_content":"问题是哪个更复杂，不是哪个更重要。我觉得还是高性能更复杂。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620955719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9953,"user_name":"bieber","can_delete":false,"product_type":"c1","uid":1104162,"ip_address":"","ucode":"367972879273CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/22/047fbc47.jpg","comment_is_top":false,"comment_ctime":1527179027,"is_pvip":false,"replies":[{"id":"3118","content":"有道理，没有完美的高可用方案","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1527217289,"ip_address":"","comment_id":9953,"utype":1}],"discussion_count":2,"race_medal":0,"score":"276405085971","product_id":100006601,"comment_content":"高可用的解决方法不是解决，而是减少或者规避，而规避某个问题的时候，一般都会引发另一个问题，只是这个问题比之前的小，高可用的设计过程其实也是一个取舍的过程。这也就是为什么系统可用性永远只是说几个九，永远缺少那个一。<br>而高性能，这个基本上就是定义计算能力，可以通过架构的优化，算法的改进，硬件的升级都可以得到很好的解决，从而达到我们心里对性能的预期…","like_count":65,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418273,"discussion_content":"有道理，没有完美的高可用方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527217289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1272031,"avatar":"https://static001.geekbang.org/account/avatar/00/13/68/df/7653ed08.jpg","nickname":"^_^","note":"","ucode":"801738927EFA91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333847,"discussion_content":"优秀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607651673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8398,"user_name":"夜行观星","can_delete":false,"product_type":"c1","uid":1010389,"ip_address":"","ucode":"C880CB39033929","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6a/d5/73c75eb3.jpg","comment_is_top":false,"comment_ctime":1526177818,"is_pvip":false,"replies":[{"id":"2474","content":"感谢指正，ZK的协议是ZAB，官方文档也解释了ZAB不是Paxos算法，因为两者的设计目标不同，我没有深入研究两者协议，但大部分研究过的人认为ZAB是在Paxos算法上进行了改良和优化，有兴趣的可以深入研究一下。","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526183268,"ip_address":"","comment_id":8398,"utype":1}],"discussion_count":2,"race_medal":0,"score":"126080229402","product_id":100006601,"comment_content":"就我一个人注意到ZK的选举算法不是Paxos吗？虽然不是本文重点😂","like_count":29,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417697,"discussion_content":"感谢指正，ZK的协议是ZAB，官方文档也解释了ZAB不是Paxos算法，因为两者的设计目标不同，我没有深入研究两者协议，但大部分研究过的人认为ZAB是在Paxos算法上进行了改良和优化，有兴趣的可以深入研究一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526183268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3026504,"avatar":"","nickname":"GVCIC011Karen","note":"","ucode":"D946FA394A8F4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580606,"discussion_content":"注意到了，文字和语音不一致。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658287283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10562,"user_name":"性能","can_delete":false,"product_type":"c1","uid":1137192,"ip_address":"","ucode":"BBFA2A31B02B8F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIyhbzdkFM64HvRATbWjc3hkic7icUszl9hU9hpIMZcibKH4wWam4SHfkcvM7MUoKjGDRrvYGXuvR91Q/132","comment_is_top":false,"comment_ctime":1527597122,"is_pvip":false,"replies":[{"id":"3386","content":"强一致性目前没有太好的方式，目前一般采取用户分区的做法，即：将用户分散在多个数据分区中，每个数据分区中的用户用单点数据库保证强一致性","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1527645454,"ip_address":"","comment_id":10562,"utype":1}],"discussion_count":3,"race_medal":0,"score":"117491714114","product_id":100006601,"comment_content":"老师，银行账务类强一致性业务，适用最终一致性方案吗？我们通常要求既要实时看到账务操作结果，又要提供高性能，最终只能用依赖于数据库实现一致性，但性能压力很大","like_count":28,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418526,"discussion_content":"强一致性目前没有太好的方式，目前一般采取用户分区的做法，即：将用户分散在多个数据分区中，每个数据分区中的用户用单点数据库保证强一致性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527645454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2761776,"avatar":"","nickname":"杨浩（研发部）","note":"","ucode":"269DFBE35932CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":580421,"discussion_content":"大神的意思是这类场景，还是只能靠数据库来完成一致性最合适，通过分表分库的方案提升性能，来满足业务需求吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658155452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":418526,"ip_address":""},"score":580421,"extra":""}]},{"author":{"id":1250907,"avatar":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","nickname":"Monday","note":"","ucode":"77B9BACC783598","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304861,"discussion_content":"打个标记，采用分区的做法，存储在单点数据库","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599701544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68725,"user_name":"晓晨同学","can_delete":false,"product_type":"c1","uid":1413041,"ip_address":"","ucode":"236AEEB786E2CE","user_header":"https://static001.geekbang.org/account/avatar/00/15/8f/b1/7b697ed4.jpg","comment_is_top":false,"comment_ctime":1550586984,"is_pvip":false,"replies":[{"id":"27201","content":"为你点赞👍👍👍","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1552232260,"ip_address":"","comment_id":68725,"utype":1}],"discussion_count":1,"race_medal":0,"score":"113219736680","product_id":100006601,"comment_content":"核心思想：网站高可用的主要技术手段是服务与数据的冗余备份与失效转移。同一服务组件部署在多台服务器上；数据存储在多台服务器上互相备份。通过上述技术手段，当任何一台服务器宕机或出现各种不可预期的问题时，就将相应的服务切换到其他可用的服务器上，不影响系统的整体可用性，也不会导致数据丢失。<br><br>从架构角度看可用性：当前网站系统多采用经典的分层模型，从上到下为：应用层、服务层与数据层。应用层主要实现业务逻辑处理；服务层提供可复用的服务；数据层负责数据读写；在部署架构上常采用应用和数据分离部署，应用会部署到不同服务器上，这些服务器被称为应用层的服务器；这些可复用的服务也会各自部署在不同服务器上，称为服务层的服务器；而各类数据库系统、文件柜等数据则部署在数据层的服务器。<br><br>硬件故障方面引起不可用的技术解决措施：(1)应用服务器。可通过负载均衡设备将多个应用服务器构建为集群对外提供服务（前提是这些服务需要设计为无状态，即应用服务器不保存业务的上下文信息，而仅根据每次请求提交的数据进行业务逻辑的操作响应），当均衡设备通过心跳检测手段检测到应用服务器不可用时，则将其从集群中移除，并将请求切换到其他可用的应用服务上。(2)服务层服务器。这些服务器被应用层通过分布式服务框架（如Dubbo）访问，分布式服务框架可在应用层客户端程序中实现软件负载均衡，并通过服务注册中心提供服务的服务器进行心跳检测，当发现有服务器不可用时，立即通知客户端程序修改服务列表，同时移除响应的服务器。(3)数据服务器。需要在数据写入时进行数据同步复制，将数据写入多台服务器上，实现数据冗余备份；当数据服务器宕机时，应用程序将访问切换到有备份数据的服务器上。<br>","like_count":26,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439817,"discussion_content":"为你点赞👍👍👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552232260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7787,"user_name":"YMF_WX1981","can_delete":false,"product_type":"c1","uid":1123051,"ip_address":"","ucode":"8891A4C343D9FD","user_header":"https://static001.geekbang.org/account/avatar/00/11/22/eb/b580b80f.jpg","comment_is_top":false,"comment_ctime":1525738295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"100309986103","product_id":100006601,"comment_content":"高可用相对复杂。<br><br>高性能，不管通过什么方式，或多或少，性能总获提高，行为上非必须做；高可用必须做，因为系统宕机或数据丢失时，谈高性能也无意义。<br><br>高可用涉及分布式存储和分布式计算，这两课题本身就复杂。<br><br>高可用涉及的非技术因素，如自然，政治。<br><br>So...<br><br>","like_count":23},{"had_liked":false,"id":188947,"user_name":"A李文","can_delete":false,"product_type":"c1","uid":1129781,"ip_address":"","ucode":"E304F70E9A52E8","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/35/ab80a720.jpg","comment_is_top":false,"comment_ctime":1584437537,"is_pvip":false,"replies":[{"id":"74901","content":"冷备：系统没启动<br>温备：系统启动，但是没法接管业务<br>热备：系统启动，随时可以接管业务","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1585541049,"ip_address":"","comment_id":188947,"utype":1}],"discussion_count":4,"race_medal":0,"score":"87483783457","product_id":100006601,"comment_content":"冷备、温备、热备的具体区别是","like_count":20,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487573,"discussion_content":"冷备：系统没启动\n温备：系统启动，但是没法接管业务\n热备：系统启动，随时可以接管业务","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585541049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","nickname":"KW💤","note":"","ucode":"290DD7016F4EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403228,"discussion_content":"华仔，好像不是这个意思。这冷温热是指备份时主库的服务状态，冷即是主库停止服务、温是主库只支持读操作、热是主库服务均不受影响","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1634036358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587339,"discussion_content":"华仔确实搞错了吧：\n热备\n\n在数据库正常运行下进行备份。\n\n备份期间，数据库读写均可正常进行。\n\n温备\n\n数据库可用性弱于热备，备份期间，数据库只能进行读操作，不能进行写操作。\n\n冷备\n\n在备份期间，应用的读写操作不可进行。\n\n备份出的数据可靠性最高。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662984768,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2332051,"avatar":"https://static001.geekbang.org/account/avatar/00/23/95/93/568dd3d0.jpg","nickname":"橡树","note":"","ucode":"FDD618DB3DB4D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589551,"discussion_content":"服务3类备份和数据库3类备份是一个意思吗？不太懂，求讲解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665111255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":587339,"ip_address":"山东"},"score":589551,"extra":""}]}]},{"had_liked":false,"id":35527,"user_name":"佳","can_delete":false,"product_type":"c1","uid":1263049,"ip_address":"","ucode":"F25D82CC74A76D","user_header":"https://static001.geekbang.org/account/avatar/00/13/45/c9/a4f7054f.jpg","comment_is_top":false,"comment_ctime":1540638563,"is_pvip":false,"replies":[{"id":"12643","content":"很正确👍","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1540685624,"ip_address":"","comment_id":35527,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48785278819","product_id":100006601,"comment_content":"高性能虽然复杂，但是只要通过合理的集群方案还是可以解决业务的性能需求，但是高可用也只能做到相对高可用，绝对高可用是不存在的，总会有诸多突发外界因素进行干扰，高性能的实现是受人为控制的，只要是在人的控制范围内，那问题都不是问题，但是要做到高可用，很多事情都不是人能控制的，比如天灾人祸","like_count":12,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427563,"discussion_content":"很正确👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1540685624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8674,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1526361950,"is_pvip":false,"replies":[{"id":"2589","content":"有区别，但实践中一般很难清晰的区分，否则每次都要解释半天，我们一般都是混用，大家都明白是什么意思。<br><br>严格来说，高可用是指正常提供服务的概率，主要和故障恢复时间有关；高可靠是指出问题的概率，主要和故障次数有关。大部分情况下其实我们都是说可用性，因为保证系统能够正常提供服务才是我们的首要目标。","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526377102,"ip_address":"","comment_id":8674,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48771002206","product_id":100006601,"comment_content":"有些人把高可用与高可靠混淆了，高可用是不要中断服务，高可靠是数据不丢失。","like_count":11,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417816,"discussion_content":"有区别，但实践中一般很难清晰的区分，否则每次都要解释半天，我们一般都是混用，大家都明白是什么意思。\n\n严格来说，高可用是指正常提供服务的概率，主要和故障恢复时间有关；高可靠是指出问题的概率，主要和故障次数有关。大部分情况下其实我们都是说可用性，因为保证系统能够正常提供服务才是我们的首要目标。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526377102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7832,"user_name":"罗烽","can_delete":false,"product_type":"c1","uid":1104625,"ip_address":"","ucode":"B55A6A441A3863","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/f1/738bcb98.jpg","comment_is_top":false,"comment_ctime":1525741935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"48770382191","product_id":100006601,"comment_content":"高性能，高可用，哪个复杂度更高？<br>我认为高可用更复杂。性能方面，我们可已通过增加机器，拆分服务来提高性能。但是高可用这个不是通过单纯花钱（增加机器）能解决的，但还是必须要花钱😂😂，相比较而言，它更需要一个良好的设计，这个就很复杂了。<br>关于高可用，我有些自己的想法<br>1，还是要做小的服务，小的服务稳定性会更高。<br>2，高可用的监控十分的重要，只有能先发现问题，才能接下来处理问题。<br>3， 存储高可用（减少和规避数据不一致），这个太复杂的不清楚，我们的业务现在没有那么复杂，数据库用的就是阿里云的主备rds，相比较而言，使用阿里云的服务会让我们的服务保障性更高些，这个只能想到这些","like_count":11},{"had_liked":false,"id":10143,"user_name":"孙振超","can_delete":false,"product_type":"c1","uid":1101755,"ip_address":"","ucode":"0F9EABC6125350","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/bb/22af0e52.jpg","comment_is_top":false,"comment_ctime":1527308041,"is_pvip":false,"replies":[{"id":"3169","content":"确实如此","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1527374882,"ip_address":"","comment_id":10143,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44476981001","product_id":100006601,"comment_content":"相对而言还是高可用更难些，按照作者说的高性能其实就是容量，在负载均衡系统高可用的情况下加机器就可以了，而想做到各个环节的高可用不是靠加机器就能搞定的，通常需要复杂的算法、引入更多的中间件、牺牲一定的性能才能实现，这其中还要进行各种权衡取舍裁剪才可以","like_count":10,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418356,"discussion_content":"确实如此","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527374882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7804,"user_name":"李志伟","can_delete":false,"product_type":"c1","uid":1109152,"ip_address":"","ucode":"22F031A44B0693","user_header":"https://static001.geekbang.org/account/avatar/00/10/ec/a0/b8c72b2f.jpg","comment_is_top":false,"comment_ctime":1525739519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40180445183","product_id":100006601,"comment_content":"个人觉得根据场景而定，如果一个系统部署结构复杂，组件众多，数据量也很大。那么高可用性的代价就会比较高。因为高可用意味着冗余，<br>冗余也就意味着要有额外的策略来管理这些冗余的组件。另外大数据量数据服务冗余异地多活也是很有挑战性的。 于此相对如果一个系统他的业务复杂度很高，涉及到很多的复杂计算，但是本身部署结构不复杂，那么这时候高性能的复杂度就会比较大","like_count":9},{"had_liked":false,"id":115545,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1563616141,"is_pvip":false,"replies":[{"id":"42629","content":"独到的解读","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1563884849,"ip_address":"","comment_id":115545,"utype":1}],"discussion_count":3,"race_medal":0,"score":"35923354509","product_id":100006601,"comment_content":"本质上高可用更难。到目前为止业界还没有办法明确度量到底能达到几个9。你交付给我一个系统，你可以说达到了3个9或4个9，我怎么能相信你呢？反之性能指标是可以很快就能实测出来的。<br>        一般地讲，高可用和高性能就像列车的两条轨道共同进退。一方面为了实现数据库的高可用需要部署主从模式或一主多从模式，但是这样会影响数据库的读写性能；另一方面为了实现高性能，对业务服务器进行扩容，大规模的集群有上千台服务器，几乎每天都会出现各种类型的故障，这就影响到了系统的高可用。","like_count":8,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459153,"discussion_content":"独到的解读","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563884849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1270239,"avatar":"https://static001.geekbang.org/account/avatar/00/13/61/df/c9470e1f.jpg","nickname":"明同学","note":"","ucode":"4F0877EB8B942E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414001,"discussion_content":"不是非得100%才叫高可用，99%难道不是高可用？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636633553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1474044,"avatar":"https://static001.geekbang.org/account/avatar/00/16/7d/fc/89286700.jpg","nickname":"jibu","note":"","ucode":"FF5CF9054EA477","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358624,"discussion_content":"这是一个进一个腿吧？并不是共同进退。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616020880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8026,"user_name":"Geek_d8f635","can_delete":false,"product_type":"c1","uid":1092024,"ip_address":"","ucode":"5B5CC1AD18D712","user_header":"https://static001.geekbang.org/account/avatar/00/10/a9/b8/d7182af2.jpg","comment_is_top":false,"comment_ctime":1525864821,"is_pvip":false,"replies":[{"id":"2382","content":"据我目前对区块链的理解来看，区块链恰恰是性能低下的实现方案，不但没有帮助，还会存在明显的性能问题","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525943993,"ip_address":"","comment_id":8026,"utype":1}],"discussion_count":2,"race_medal":0,"score":"35885603189","product_id":100006601,"comment_content":"区块链技术如果越来越成熟，是不是对高性能有很大帮助？","like_count":8,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417552,"discussion_content":"据我目前对区块链的理解来看，区块链恰恰是性能低下的实现方案，不但没有帮助，还会存在明显的性能问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525943993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2761776,"avatar":"","nickname":"杨浩（研发部）","note":"","ucode":"269DFBE35932CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":580419,"discussion_content":"确是高可靠方案😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658155265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":417552,"ip_address":""},"score":580419,"extra":""}]}]},{"had_liked":false,"id":7784,"user_name":"MavenTalker","can_delete":false,"product_type":"c1","uid":1015142,"ip_address":"","ucode":"4E8A7CF2166610","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/66/070a7fb2.jpg","comment_is_top":false,"comment_ctime":1525737356,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"27295541132","product_id":100006601,"comment_content":"为保证高可用，有时候会引入其他组件，比如keepalive等等，此时keepalive也易容易产生单点问题，于是做主从或其他方案。若其他方案同样存在单点问题，如此往复下去。悲观的看，似乎无止境，更多的时候是个取舍。","like_count":6},{"had_liked":false,"id":10020,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1119395,"ip_address":"","ucode":"9E5D6A5E963F15","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/a3/0782e181.jpg","comment_is_top":false,"comment_ctime":1527226887,"is_pvip":false,"replies":[{"id":"3180","content":"是的，通俗来讲，高性能是土豪，有钱可以任性；高可用是文豪，需要日积月累修炼😃","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1527376077,"ip_address":"","comment_id":10020,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23002063367","product_id":100006601,"comment_content":"高性能是为了达到一个量化的目标，通常我们会有各种不同的办法去实现，抛开消耗来说，方法有很多种，就像上篇讲到的，粗暴加机器，优雅划分等;但是高可用是为了规避一个非量化的抽象bug场景集合，这些不都是能提前预测到的，所以高可用一般来说都会比高性能复杂！","like_count":5,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418314,"discussion_content":"是的，通俗来讲，高性能是土豪，有钱可以任性；高可用是文豪，需要日积月累修炼😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1527376077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7942,"user_name":"itperson","can_delete":false,"product_type":"c1","uid":1008401,"ip_address":"","ucode":"1363D71C84CF8B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/11/ea921534.jpg","comment_is_top":false,"comment_ctime":1525793223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23000629703","product_id":100006601,"comment_content":"高可用更复杂一些，因为需要考虑很多的异常处理方式。","like_count":5},{"had_liked":false,"id":7838,"user_name":"Ivan","can_delete":false,"product_type":"c1","uid":1103623,"ip_address":"","ucode":"B6C3207C26BDC5","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/07/0de57e61.jpg","comment_is_top":false,"comment_ctime":1525742869,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23000579349","product_id":100006601,"comment_content":"高可用一般会考虑的更多一些，简单点说一个不可以的服务也就不存在性能一说，冗余是高可用的主要手段，高可用的主要复杂度体现在状态监控，服务切换或服务恢复上，为了降低其复杂度，又有无状态设计，熔断设计等等，这里面其实又牵扯到高性能，一个高性能的服务往往是快的小的独立的，相应的其高可用也就较容易实现。感觉最终的落地点还是在业务复杂度上，登录偏向高性能，支付偏向高可用","like_count":5},{"had_liked":false,"id":257071,"user_name":"邱荣财","can_delete":false,"product_type":"c1","uid":1958681,"ip_address":"","ucode":"414D74823F8AA5","user_header":"https://static001.geekbang.org/account/avatar/00/1d/e3/19/7eba0a69.jpg","comment_is_top":false,"comment_ctime":1603847448,"is_pvip":false,"replies":[{"id":"94080","content":"很有道理������","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1604389192,"ip_address":"","comment_id":257071,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18783716632","product_id":100006601,"comment_content":"高性能路线，拆拆拆，拆系统，拆服务，拆微服务，拆函数服务，拆任务，拆进程，拆线程，任务调度，加机器。<br>高可用路线，合合合，多条链接合起来作为一个线路，主备合起来作为一个系统，主从合起来作为一个系统，多份数据合起来作为一份数据，状态决策，CAP","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508208,"discussion_content":"很有道理������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604389192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77257,"user_name":"威","can_delete":false,"product_type":"c1","uid":1068542,"ip_address":"","ucode":"C921CDCB22B9A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/4d/fe/882eaf0f.jpg","comment_is_top":false,"comment_ctime":1552898753,"is_pvip":false,"replies":[{"id":"28708","content":"概念上有明确的界限，但本质上都是冗余更多物理硬件，所以很多时候两者可以同时考虑","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1553299197,"ip_address":"","comment_id":77257,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18732767937","product_id":100006601,"comment_content":"老师你好，高性能和高可用有明确的界限吗，感觉有时候是混着用的。例如现实中我们会使用扩展处理单元的形式来提高性能，但是同时也提高了系统的可用性。比如为了不出现单点，我们会把业务系统双机部署，同时提供无状态服务，上游通过nginx来分流，既提高了性能，也能在某台机down掉时，另一个节点也能提高服务，从而达到高可用目的","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443659,"discussion_content":"概念上有明确的界限，但本质上都是冗余更多物理硬件，所以很多时候两者可以同时考虑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553299197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357757,"discussion_content":"高性能、高可用、高扩展都是相互作用影响的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615861631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8661,"user_name":"dbo","can_delete":false,"product_type":"c1","uid":1052678,"ip_address":"","ucode":"3C5343589E47C2","user_header":"","comment_is_top":false,"comment_ctime":1526357723,"is_pvip":false,"replies":[{"id":"2581","content":"后面会详细阐述CAP","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526369134,"ip_address":"","comment_id":8661,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18706226907","product_id":100006601,"comment_content":"CAP理论的作者已经重新解释了很多人对CAP的误解，C A P 三者并不是互斥关系只能选其二，而是在出现网络分区时，可以选择0.9 + 0.9 + 0.7之类的措施，在三者间进行平衡取舍。","like_count":4,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417813,"discussion_content":"后面会详细阐述CAP","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526369134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":12937,"user_name":"Cola","can_delete":false,"product_type":"c1","uid":1048859,"ip_address":"","ucode":"67A27A8DEF42E2","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/1b/24db90c7.jpg","comment_is_top":false,"comment_ctime":1529157860,"is_pvip":false,"replies":[{"id":"4352","content":"是的，高可用异常场景很多","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1529377772,"ip_address":"","comment_id":12937,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14414059748","product_id":100006601,"comment_content":"对于普通公司来说，高可用远比高性能复杂的多。现代软件系统由于硬件设备性能大幅提升与一系列成熟稳定的云服务&#47;解决方案，要达到用户层面的高性能其实不难，甚至通过单纯的砸钱于设备质量与数量也能达到普义上的高性能。但是高可用却要考虑一系列负载均衡，多进程集群(无状态设计)，服务治理(熔断设计，失效转移，快速恢复)，监控(状态报警，自动扩展，黑名单)，缓存与存储(数据的一致性，脏数据的处理，冷热备份)，这是一个庞大的技术栈。但是当用户量级达到另一个层面，高性能难度也成指数性增长，这时候这两个命题你中有我我中有你，两者是密不可分的。","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419468,"discussion_content":"是的，高可用异常场景很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529377772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7884,"user_name":"高歌在羊城","can_delete":false,"product_type":"c1","uid":1100492,"ip_address":"","ucode":"56D495D4218181","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/cc/97fd68ec.jpg","comment_is_top":false,"comment_ctime":1525758918,"is_pvip":false,"replies":[{"id":"2278","content":"别急，后面很多案例和模式分析","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525775718,"ip_address":"","comment_id":7884,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14410660806","product_id":100006601,"comment_content":"大神，希望后面多一些落地的案例分析，章节篇幅可以长一点，一次讲一个要点都行😁","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417506,"discussion_content":"别急，后面很多案例和模式分析","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525775718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7819,"user_name":"幸福时光","can_delete":false,"product_type":"c1","uid":1002341,"ip_address":"","ucode":"0479E9A5F11C73","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/65/bd254a02.jpg","comment_is_top":false,"comment_ctime":1525740915,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14410642803","product_id":100006601,"comment_content":"架构的问题谈复杂性不如谈重要性来得直接，这个依赖于架构所要解决的业务场景的复杂度是对高性能有更高要求，还是对高可用有更高要求。如果对高性能的要求取舍大于高可用，自然高性能的架构考虑势必会复杂一些。大多数情况下，鱼和熊掌不可兼得，最终架构选择还是要依赖业务场景做出平衡。","like_count":3},{"had_liked":false,"id":263747,"user_name":"GLADIATOR","can_delete":false,"product_type":"c1","uid":1448564,"ip_address":"","ucode":"6FE14E0BCD6240","user_header":"https://static001.geekbang.org/account/avatar/00/16/1a/74/8f7f8786.jpg","comment_is_top":false,"comment_ctime":1606261304,"is_pvip":false,"replies":[{"id":"95757","content":"很多系统都是独裁哦，例如Hadoop 的name node，不过独裁确实风险大，但是简单，因此很多系统设计的时候再把独裁节点设计成双机","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1606347814,"ip_address":"","comment_id":263747,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10196195896","product_id":100006601,"comment_content":"民主虽然可能造成效率问题，但政治风险较小。独裁寄托于单点皇帝，容易形成单点故障，万一碰到一个开倒车的，就是灾难啊","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510287,"discussion_content":"很多系统都是独裁哦，例如Hadoop 的name node，不过独裁确实风险大，但是简单，因此很多系统设计的时候再把独裁节点设计成双机","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606347814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1502442,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ec/ea/9d7823dd.jpg","nickname":"TaceyWong","note":"","ucode":"117996F449EB45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414053,"discussion_content":"民主集中制哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636642062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":143951,"user_name":"臧咔嚓","can_delete":false,"product_type":"c1","uid":1101627,"ip_address":"","ucode":"827758EC99C34F","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/3b/679b518b.jpg","comment_is_top":false,"comment_ctime":1571813330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10161747922","product_id":100006601,"comment_content":"高可用架构的通用设计方式不只是冗余。<br>高可用架构通用设计方式：<br>1. 单点冗余做failover<br>2. 服务熔断做服务降级<br>3. 限流","like_count":2},{"had_liked":false,"id":77411,"user_name":"xiao皮孩。。","can_delete":false,"product_type":"c1","uid":1367499,"ip_address":"","ucode":"27AE899819D10F","user_header":"https://static001.geekbang.org/account/avatar/00/14/dd/cb/23b114a7.jpg","comment_is_top":false,"comment_ctime":1552919677,"is_pvip":false,"replies":[{"id":"28707","content":"高性能还有多路复用，数据结构这些","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1553299124,"ip_address":"","comment_id":77411,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10142854269","product_id":100006601,"comment_content":"让我明白了脑裂这个词。<br><br>高性能三板斧:加机器，缓存，异步<br>高可用:集群，set化<br>请大神补充","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443714,"discussion_content":"高性能还有多路复用，数据结构这些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553299124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":9568,"user_name":"missa","can_delete":false,"product_type":"c1","uid":1033417,"ip_address":"","ucode":"485CB229C4C556","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/c9/90c8a53e.jpg","comment_is_top":false,"comment_ctime":1526952977,"is_pvip":false,"replies":[{"id":"2928","content":"是的，分布式状态一致性很难，异常场景太多","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526971645,"ip_address":"","comment_id":9568,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10116887569","product_id":100006601,"comment_content":"高性能，高可用。<br>高可用会比较复杂，性能这块随意现在硬件的发展，成本越来越低价了。大多数公司也不会专门的对机器进行性能的调优。<br>高可用需要考虑的存储高可用，和状态高可用就比较复杂多样的场景了。","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":418118,"discussion_content":"是的，分布式状态一致性很难，异常场景太多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526971645,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8402,"user_name":"小思绪","can_delete":false,"product_type":"c1","uid":1123040,"ip_address":"","ucode":"A7F813280BFF10","user_header":"https://static001.geekbang.org/account/avatar/00/11/22/e0/8e58a7e1.jpg","comment_is_top":false,"comment_ctime":1526182628,"is_pvip":false,"replies":[{"id":"2475","content":"表现有点类似，但主备一般不用脑裂，集群才用脑裂这个词","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526183388,"ip_address":"","comment_id":8402,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10116117220","product_id":100006601,"comment_content":"协商式中的双主也是脑裂吧？","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417699,"discussion_content":"表现有点类似，但主备一般不用脑裂，集群才用脑裂这个词","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526183388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8275,"user_name":"fxp","can_delete":false,"product_type":"c1","uid":1049894,"ip_address":"","ucode":"3346FC07E5F885","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/26/05aeb46c.jpg","comment_is_top":false,"comment_ctime":1526032174,"is_pvip":false,"replies":[{"id":"2434","content":"如果你是说要先做到高可用才能做到高性能，那这个说法是不成立的；<br><br>如果你说高性能设计涉及到高可用的取舍，那是有道理的，例如mysql的高性能写入是以牺牲一定高可用为代价的","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526053039,"ip_address":"","comment_id":8275,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10115966766","product_id":100006601,"comment_content":"解决高性能问题的必经之路就是高可用。","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417652,"discussion_content":"如果你是说要先做到高可用才能做到高性能，那这个说法是不成立的；\n\n如果你说高性能设计涉及到高可用的取舍，那是有道理的，例如mysql的高性能写入是以牺牲一定高可用为代价的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526053039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8226,"user_name":"追寻云的痕迹","can_delete":false,"product_type":"c1","uid":1081114,"ip_address":"","ucode":"2B782C85CF0F67","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/1a/eb8021c3.jpg","comment_is_top":false,"comment_ctime":1525996729,"is_pvip":false,"replies":[{"id":"2406","content":"你已经剧透了😂","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526005130,"ip_address":"","comment_id":8226,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10115931321","product_id":100006601,"comment_content":"化繁为简，通过简单的举例，就把核心概念说说清楚了。架构师的作用就在于各种场景中做出合适的取舍，而不是像普通程序员那样陷入Paxos还是Raft好的争论中。PowerShell之父Jeffery Snover有一句话叫，To ship is to choose，讲的就是取舍的问题。","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417639,"discussion_content":"你已经剧透了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526005130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8156,"user_name":"亚伦碎语","can_delete":false,"product_type":"c1","uid":1014505,"ip_address":"","ucode":"F32E5E1B63CC90","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/e9/da5c0203.jpg","comment_is_top":false,"comment_ctime":1525929183,"is_pvip":false,"replies":[{"id":"2379","content":"还是有无状态的系统呢，nginx负载均衡，redis缓存等","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525943728,"ip_address":"","comment_id":8156,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10115863775","product_id":100006601,"comment_content":"状态是分布式系统的噩梦，然而一个系统又不可能没有状态","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417604,"discussion_content":"还是有无状态的系统呢，nginx负载均衡，redis缓存等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525943728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7970,"user_name":"云辉","can_delete":false,"product_type":"c1","uid":1103058,"ip_address":"","ucode":"0E67E8E8421294","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/d2/96dbfa5a.jpg","comment_is_top":false,"comment_ctime":1525825946,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10115760538","product_id":100006601,"comment_content":"高性能可预测，可牺牲，可取舍。而高可用要考虑各种情况，而且是有状态的，对于数据不一致的恢复是一场噩梦。相对来说，还是高可用难一点，高性能在极端情况下也难的。","like_count":2},{"had_liked":false,"id":7860,"user_name":"mike","can_delete":false,"product_type":"c1","uid":1109306,"ip_address":"","ucode":"FF8EC7347CAC29","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/3a/e61ba233.jpg","comment_is_top":false,"comment_ctime":1525747874,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10115682466","product_id":100006601,"comment_content":"       高可用的关键字通过 “无间断”分析，它与高性能都是通过增加机器的方案来解决问题，两者本质区别在于目的不同，一个是通过 “扩展”处理性能，一个是 “冗余”处理单元。<br><br>       实现方式，可以是 1 主 3 备、2 主 2 备、3 主 1 备、4 主 0 备，具体场景进行选择，高可用的难点在于如何减少和规避数据不一致对业务造成的影响。<br><br>        方法论: 独裁式，协商式，民主式。分析它们各自的优缺点，结合实际业务场景，选择合适的高可用方案。<br>        <br>        如何选取适合系统的高可用方案，也是一个复杂的分析、判断和选择的过程。","like_count":2},{"had_liked":false,"id":7843,"user_name":"lost","can_delete":false,"product_type":"c1","uid":1085742,"ip_address":"","ucode":"E40992F09AB900","user_header":"https://static001.geekbang.org/account/avatar/00/10/91/2e/bfed892f.jpg","comment_is_top":false,"comment_ctime":1525743450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10115678042","product_id":100006601,"comment_content":"高可用和高性能分开看其实难度都不大，难就难在有些场景需要二者兼顾。要解决高可用，数据层要做备份要做分区，一旦这么做就面临一致性问题，而在多个分区进行数据一致性同步本身就对高性能冲突，所以大部分设计都设计为最终一致性。毕竟不是每个公司都跟googe一样财大气粗可以把分布式协商的延迟降低到可以接受的级别。","like_count":2},{"had_liked":false,"id":7791,"user_name":"zeus2_18921421203","can_delete":false,"product_type":"c1","uid":1101505,"ip_address":"","ucode":"CFFF09CAAA1164","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/c1/54a9a699.jpg","comment_is_top":false,"comment_ctime":1525738787,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10115673379","product_id":100006601,"comment_content":"高可用主要难点是数据的高可用，而应用服务 机房 链路目前都比较成熟。","like_count":2},{"had_liked":false,"id":7780,"user_name":"ncicheng","can_delete":false,"product_type":"c1","uid":1061450,"ip_address":"","ucode":"A22815C4E3712C","user_header":"https://static001.geekbang.org/account/avatar/00/10/32/4a/2dc9cfde.jpg","comment_is_top":false,"comment_ctime":1525735506,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10115670098","product_id":100006601,"comment_content":"可不可以这样理解，协商式用在只有主备两台机器的简单情况，当机器数量多于两个但少于五个时就采用独裁式，当机器很多时就采用民主式更好？谢谢","like_count":2,"discussions":[{"author":{"id":1003452,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4f/bc/501ce428.jpg","nickname":"年轮","note":"","ucode":"C70B8CD2FA0F54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584931,"discussion_content":"同学，算术没学好啊。机器数量都大于2了，怎么还是独裁式了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661232843,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285907,"user_name":"蓝萧","can_delete":false,"product_type":"c1","uid":1227606,"ip_address":"","ucode":"DE125B56BF7818","user_header":"https://static001.geekbang.org/account/avatar/00/12/bb/56/a506a165.jpg","comment_is_top":false,"comment_ctime":1617070435,"is_pvip":false,"replies":[{"id":"103863","content":"实际上还是高可用更复杂一些，绝大部分理论和算法也都是关于高可用的，FLP、CAP、Paxos、Raft、ZAB……","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1617154763,"ip_address":"","comment_id":285907,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5912037731","product_id":100006601,"comment_content":"我认为高可用与高性能，它们的复杂度都会根据相应的指标与业务场景发生变化，是两条函数曲线。高性能复杂度起点较低，随着业务复杂度提升增长较快；而高可用的复杂度起点较高，随着业务复杂度提升增长较慢。两条曲线会有一个相交点。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517822,"discussion_content":"实际上还是高可用更复杂一些，绝大部分理论和算法也都是关于高可用的，FLP、CAP、Paxos、Raft、ZAB……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617154763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265342,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1606873998,"is_pvip":false,"replies":[{"id":"96492","content":"2C 高可用是高体验，2B高可用不一定是体验，可能是安全可靠","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1606901678,"ip_address":"","comment_id":265342,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5901841294","product_id":100006601,"comment_content":"这个世界本身就不是永恒不变的，而高可用却追求永久恒定。显然有违天道人伦，理想很丰满，现实很骨感。高可用如何高呢？我觉得就是能对用户的最终目标负责，那就是高可用，只不过是体验的好坏不同罢了，所以高可用归根结底可以说是高体验。---个人观点。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510891,"discussion_content":"2C 高可用是高体验，2B高可用不一定是体验，可能是安全可靠","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606901678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230941,"user_name":"M1racle","can_delete":false,"product_type":"c1","uid":1057144,"ip_address":"","ucode":"CFA981F34AFDA8","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/78/732a2e33.jpg","comment_is_top":false,"comment_ctime":1593527476,"is_pvip":true,"replies":[{"id":"85857","content":"是的","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1594046555,"ip_address":"","comment_id":230941,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5888494772","product_id":100006601,"comment_content":"我觉得高可用更复杂，高性能起码是正向解决问题，高可用绝对是各种妥协思量的选择，一不小心就是坑","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500083,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594046555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226800,"user_name":"wesley","can_delete":false,"product_type":"c1","uid":1107003,"ip_address":"","ucode":"D55BE5B3320C2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/3b/9c3afa01.jpg","comment_is_top":false,"comment_ctime":1592206225,"is_pvip":false,"replies":[{"id":"83682","content":"预防只是降低出故障概率，无法根除故障，故障的发生是随机的","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1592303028,"ip_address":"","comment_id":226800,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5887173521","product_id":100006601,"comment_content":"高可用更多的是如何去预防，比如在做容量规划是留些预留，通过冗余来提升可用性。通过监控数据来持续优化可用。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498367,"discussion_content":"预防只是降低出故障概率，无法根除故障，故障的发生是随机的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592303028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":182464,"user_name":"谭方敏","can_delete":false,"product_type":"c1","uid":1710960,"ip_address":"","ucode":"728DC7ECB7C902","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1b/70/547042ee.jpg","comment_is_top":false,"comment_ctime":1582791728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5877759024","product_id":100006601,"comment_content":"高可用比高性能更加复杂，从以往的经验来看，高可用要解决的问题就是状态一致性问题，在不同进程之间如何协同状态。虽然现在不少中间件都自带协同处理机制，zookeeper，redis，mongodb，但是回到业务层面还是会有一些业务强相关的状态数据很难通过这些中间件集群来达到保证数据一致性的目的。<br>将业务强相关的状态数据剥离出来也不是没办法，成本是很大的，需要调整工作业务流，并且讲细分进一步分拆。","like_count":1},{"had_liked":false,"id":177944,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1581557657,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5876524953","product_id":100006601,"comment_content":"高可用总结:<br>①存储高可用和计算高可用<br>②存储高可用的cap理论<br>③存储高可用决策方式:独裁式、协商式、民主式<br>④高可用故障一般分为:服务故障和连接故障都会对最终主备决策造成影响。","like_count":1,"discussions":[{"author":{"id":1056209,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/d1/f427b83e.jpg","nickname":"javaworker","note":"","ucode":"ABF9DDDBD3BDBF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553539,"discussion_content":"同学，哪个软件用的协商式，能举个例子不","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645956411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164675,"user_name":"晓晨同学","can_delete":false,"product_type":"c1","uid":1413041,"ip_address":"","ucode":"236AEEB786E2CE","user_header":"https://static001.geekbang.org/account/avatar/00/15/8f/b1/7b697ed4.jpg","comment_is_top":false,"comment_ctime":1577070799,"is_pvip":false,"replies":[{"id":"63202","content":"脑裂是借用医学上的名词，很形象的，民主式的决策才有，独裁和协商式的会出现不一致，但是不太像脑裂","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1577326297,"ip_address":"","comment_id":164675,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5872038095","product_id":100006601,"comment_content":"我理解文中的3种状态决策都有可能出现脑裂","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478860,"discussion_content":"脑裂是借用医学上的名词，很形象的，民主式的决策才有，独裁和协商式的会出现不一致，但是不太像脑裂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577326297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164276,"user_name":"Geek_steven_wang","can_delete":false,"product_type":"c1","uid":1477120,"ip_address":"","ucode":"8CC8F4C9726191","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI8mFt5wSkia31qc8paRg2uPSB6AuEBDricrSxvFBuTpP3NnnflekpJ7wqvN0nRrJyu7zVbzd7Lwjxw/132","comment_is_top":false,"comment_ctime":1576921137,"is_pvip":false,"replies":[{"id":"63207","content":"这两个不是一个级别的东西，99高可用和1万并发差不多复杂度","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1577326528,"ip_address":"","comment_id":164276,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5871888433","product_id":100006601,"comment_content":"看两个项的具体要求，99高可用性 就要比 百万迸发高性能要求 简单。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478702,"discussion_content":"这两个不是一个级别的东西，99高可用和1万并发差不多复杂度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577326528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127314,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1566648828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5861616124","product_id":100006601,"comment_content":" 课前思考及问题<br>1：复杂度来源——高可用？<br>高可用的本质——分布式——冗余机器及数据，机器多了而且需要同步数据协同工作。，很明显和实现高性能的集群类似，会引入软件编程的复杂度。<br><br>课后思考及问题<br>1：华仔正文中的核心观点<br>1-1：系统的高可用方案五花八门，但万变不离其宗，本质上都是通过“冗余”来实现高可用。<br>1-2：高性能增加机器目的在于“扩展”处理性能；高可用增加机器目的在于“冗余”处理单元<br>1-3：数据 + 逻辑 = 业务，数据或逻辑有问题，必然导致业务出问题。<br>1-4：存储高可用的难点不在于如何备份数据，而在于如何减少或者规避数据不一致对业务造成的影响。<br>2：读来通俗易懂，醍醐灌顶，精彩<br>3：关于高性能和高可用谁更复杂这个问题，应该比较明显。<br>3-1：高性能，通过加机器基本能实现<br>          高可用，无论如何考虑基本实现不了<br>3-2：高性能，需要考虑的细节少一些，主要在负载<br>          高可用，需要考虑的细节就多了，且做不到<br>3-3：高性能，慢一点其实还是能忍的<br>          高可用，都不能用了，还有啥可讲的<br>3-4：高性能，影响性能的因素相对少<br>          高可用，导致不可用的因素多，且不确定<br>两者一对比，那个更难搞一目了然，就好像对象脾气不好吵架了，多哄哄就好了。如果连对象都没有，虽然不会吵架但还有许多事情压根就不用考虑啦！<br><br>","like_count":1},{"had_liked":false,"id":113644,"user_name":"晓晨同学","can_delete":false,"product_type":"c1","uid":1413041,"ip_address":"","ucode":"236AEEB786E2CE","user_header":"https://static001.geekbang.org/account/avatar/00/15/8f/b1/7b697ed4.jpg","comment_is_top":false,"comment_ctime":1563104001,"is_pvip":false,"replies":[{"id":"41833","content":"数据的读写复制总得有个系统来负责吧，这个系统就是处理单元<br><br>Nginx集群没有选举的概念，交换机随机或者轮询分配请求","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1563356447,"ip_address":"","comment_id":113644,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858071297","product_id":100006601,"comment_content":"有几个问题没搞明白，<br>1.高可用的对象是处理单元？存储高可用明显是数据吧<br>2.nginx集群是属于哪种状态决策，有点像引入外部节点的独裁式啊，但是并没有文中所说的独裁式的递归问题了","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458326,"discussion_content":"数据的读写复制总得有个系统来负责吧，这个系统就是处理单元\n\nNginx集群没有选举的概念，交换机随机或者轮询分配请求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563356447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90252,"user_name":"微尘","can_delete":false,"product_type":"c1","uid":1022200,"ip_address":"","ucode":"E8C707C9EB00F7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/f8/be117f37.jpg","comment_is_top":false,"comment_ctime":1556460214,"is_pvip":false,"replies":[{"id":"33309","content":"正确","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1557459134,"ip_address":"","comment_id":90252,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5851427510","product_id":100006601,"comment_content":"高性能要解决的是系统在一定条件下的确定性问题，这是有解的。<br>而高可用要解决的是系统在一定条件下的不确定性概率问题，无论如何设计冗余，哪怕是做到可用性99.9999%，也只能尽量缩小概率，而无法彻底解决概率问题。<br>因此，通常来说高可用更加复杂一些。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":448442,"discussion_content":"正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557459134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19929,"user_name":"木木","can_delete":false,"product_type":"c1","uid":1205341,"ip_address":"","ucode":"B446FD36734E75","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/5d/de0536e8.jpg","comment_is_top":false,"comment_ctime":1534166171,"is_pvip":false,"replies":[{"id":"6966","content":"结论是正确的，但原因不全面，高可用更复杂的原因在于高可用细节很多","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1534227289,"ip_address":"","comment_id":19929,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5829133467","product_id":100006601,"comment_content":"先高可用，再高性能。如果都不能用了，也就谈不上性能了，所以我认为高可用要复杂一点。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":422024,"discussion_content":"结论是正确的，但原因不全面，高可用更复杂的原因在于高可用细节很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534227289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":18631,"user_name":"牧羊人","can_delete":false,"product_type":"c1","uid":1133616,"ip_address":"","ucode":"26B09ED2F01C31","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/30/5baace6a.jpg","comment_is_top":false,"comment_ctime":1533516386,"is_pvip":false,"replies":[{"id":"6512","content":"一槌定音，是变种就有不完美的地方","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1533532441,"ip_address":"","comment_id":18631,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5828483682","product_id":100006601,"comment_content":"世界上只有一种分布式一致性算法 就是paxos 其他的都是其变种","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421606,"discussion_content":"一槌定音，是变种就有不完美的地方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533532441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8928,"user_name":"陈天境","can_delete":false,"product_type":"c1","uid":1100792,"ip_address":"","ucode":"FF9EA3ACAAF864","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/f8/f4adadcb.jpg","comment_is_top":false,"comment_ctime":1526523718,"is_pvip":true,"replies":[{"id":"2661","content":"被撤销备案这个就不是技术能解决的，如果真要防备这种情况，申请两个或更多域名，但这样做不利于用户认知和SEO推广","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526539051,"ip_address":"","comment_id":8928,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5821491014","product_id":100006601,"comment_content":"对于域名，有没有高可用而言呢？比如我们最近域名由于某些原因被撤销备案导致访问不了，而重新备案时间又很长。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417905,"discussion_content":"被撤销备案这个就不是技术能解决的，如果真要防备这种情况，申请两个或更多域名，但这样做不利于用户认知和SEO推广","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526539051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8634,"user_name":"focus　根","can_delete":false,"product_type":"c1","uid":1126545,"ip_address":"","ucode":"4FD612ACE353E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/91/75a69d33.jpg","comment_is_top":false,"comment_ctime":1526350024,"is_pvip":false,"replies":[{"id":"2590","content":"app的架构主要体现在可扩展性，后面会讲","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526377161,"ip_address":"","comment_id":8634,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5821317320","product_id":100006601,"comment_content":"自己虽然做Android开发，但是也对这个架构的处理产生兴趣  应该如何实践提高自己对架构设计的能力","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417803,"discussion_content":"app的架构主要体现在可扩展性，后面会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526377161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8517,"user_name":"王磊","can_delete":false,"product_type":"c1","uid":1050085,"ip_address":"","ucode":"A4DE9804642A08","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/e5/aa579968.jpg","comment_is_top":false,"comment_ctime":1526292191,"is_pvip":false,"replies":[{"id":"2527","content":"单机房高可用+数据分区，后面会讲到","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526311071,"ip_address":"","comment_id":8517,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5821259487","product_id":100006601,"comment_content":"如上的回复&#39;一般不建议集群跨机房，性能太低，你说的这种场景一般不会用异地多活&#39;，是会用还是不会用，如果不会用，那用什么?","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417757,"discussion_content":"单机房高可用+数据分区，后面会讲到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526311071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8475,"user_name":"王磊","can_delete":false,"product_type":"c1","uid":1050085,"ip_address":"","ucode":"A4DE9804642A08","user_header":"https://static001.geekbang.org/account/avatar/00/10/05/e5/aa579968.jpg","comment_is_top":false,"comment_ctime":1526258104,"is_pvip":false,"replies":[{"id":"2496","content":"一般不建议集群跨机房，性能太低，你说的这种场景一般不会用异地多活","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526265048,"ip_address":"","comment_id":8475,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5821225400","product_id":100006601,"comment_content":"关于高可用状态决策，处在一个集群的节点也可能是异地，如北京，上海，深圳，对吗?否则，一个用户在北京取钱后，余额为0，在数据同步到深圳之前，理论上又在深圳取钱，这种情况因为有集群的leader<br>，以leader的状态为准，来避免这种情况。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417739,"discussion_content":"一般不建议集群跨机房，性能太低，你说的这种场景一般不会用异地多活","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526265048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8425,"user_name":"赵志强","can_delete":false,"product_type":"c1","uid":1111191,"ip_address":"","ucode":"03AF4D9601A2CC","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/97/31ed8605.jpg","comment_is_top":false,"comment_ctime":1526206707,"is_pvip":false,"replies":[{"id":"2484","content":"分开讲不是说每个系统都只能有一个复杂度，而是为了条理性","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526253760,"ip_address":"","comment_id":8425,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5821174003","product_id":100006601,"comment_content":"我觉得大多情况不能把高性能和高可用割裂来讲，甚至在很多场合也不能分开，就如同作者所举例，要保证双十一海量并发访问，秒杀某件商品，即需要高性能（即不能卡机），也需要高可用（数据的一致性），很难想象缺失一个后，长时间打不开页面或页面打开很快，但标的显示数量和实际不符。至于比较哪个更复杂，还要看投入多少成本，增加机器就能提高可用性我觉得一点也不复杂。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417713,"discussion_content":"分开讲不是说每个系统都只能有一个复杂度，而是为了条理性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526253760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8056,"user_name":"任锋","can_delete":false,"product_type":"c1","uid":1086592,"ip_address":"","ucode":"8C32C85A61C426","user_header":"https://static001.geekbang.org/account/avatar/00/10/94/80/70e483f6.jpg","comment_is_top":false,"comment_ctime":1525880912,"is_pvip":false,"replies":[{"id":"2385","content":"数据库一般不用双主，用分库分表","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525944239,"ip_address":"","comment_id":8056,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5820848208","product_id":100006601,"comment_content":"您好 华仔，首先我觉得高可用是比高性能更复杂，也看了你的回复，我已确认，我们的架构就是属于独裁模式，但是这还是一方面的弊端，如果链接数超了怎么办呢？双主应该可以解决，但是很少听说数据库双主架构？","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417563,"discussion_content":"数据库一般不用双主，用分库分表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525944239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7928,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1103597,"ip_address":"","ucode":"3CA477F2DE7C7B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d6/ed/e518b5f2.jpg","comment_is_top":false,"comment_ctime":1525784644,"is_pvip":false,"replies":[{"id":"2291","content":"如果不提炼一些原则和理念，单纯讲例子，难以讲述核心本质，这也是很多朋友看了几十上百个架构案例，每个好像都看懂了，但让自己去设计架构的时候，还是一筹莫展","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525823627,"ip_address":"","comment_id":7928,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5820751940","product_id":100006601,"comment_content":"希望多举例子从例子上分析引入","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417520,"discussion_content":"如果不提炼一些原则和理念，单纯讲例子，难以讲述核心本质，这也是很多朋友看了几十上百个架构案例，每个好像都看懂了，但让自己去设计架构的时候，还是一筹莫展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525823627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7800,"user_name":"龙","can_delete":false,"product_type":"c1","uid":1103635,"ip_address":"","ucode":"6732E2A811FAD1","user_header":"https://static001.geekbang.org/account/avatar/00/10/d7/13/6706cf83.jpg","comment_is_top":false,"comment_ctime":1525739337,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5820706633","product_id":100006601,"comment_content":"醍醐灌顶，讲的非常好","like_count":1},{"had_liked":false,"id":357753,"user_name":"咖啡不加糖","can_delete":false,"product_type":"c1","uid":2400955,"ip_address":"广东","ucode":"4D6F1F80382C63","user_header":"https://static001.geekbang.org/account/avatar/00/24/a2/bb/cf822570.jpg","comment_is_top":false,"comment_ctime":1663600708,"is_pvip":false,"replies":[{"id":"130314","content":"正解","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1663900177,"ip_address":"广东","comment_id":357753,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1663600708","product_id":100006601,"comment_content":"高可用的复杂度比高性能要高。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588612,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663900177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352519,"user_name":"杨恒","can_delete":false,"product_type":"c1","uid":3066545,"ip_address":"北京","ucode":"057CCB97B56740","user_header":"https://static001.geekbang.org/account/avatar/00/2e/ca/b1/044d3e98.jpg","comment_is_top":false,"comment_ctime":1658743702,"is_pvip":false,"replies":[{"id":"128343","content":"拼完肌肉拼大脑：算法","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1659066394,"ip_address":"北京","comment_id":352519,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1658743702","product_id":100006601,"comment_content":"高性能可以拼肌肉，高可用拼完肌肉拼？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581918,"discussion_content":"拼完肌肉拼大脑：算法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659066394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351164,"user_name":"艺超(鲁鸣)","can_delete":false,"product_type":"c1","uid":1029436,"ip_address":"","ucode":"7F749FA543E0F1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b5/3c/967d7291.jpg","comment_is_top":false,"comment_ctime":1657586823,"is_pvip":false,"replies":[{"id":"127827","content":"好像这么说也可以 ：）","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1657789892,"ip_address":"","comment_id":351164,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1657586823","product_id":100006601,"comment_content":"产品的一般是从能用到用的爽递进的，所以高可用更重要，性能不用那么高也可以接受。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579992,"discussion_content":"好像这么说也可以 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657789892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347534,"user_name":"林海俭","can_delete":false,"product_type":"c1","uid":1973346,"ip_address":"","ucode":"403020C3201C90","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM6ssNfBGQXiafTSCBHtl4L7ykIBjqZMMpWU3v4ibwP0APYzWk88zELRaJXUNMIVcuWpkb0Q3x0CicYxg/132","comment_is_top":false,"comment_ctime":1654134319,"is_pvip":false,"replies":[{"id":"126785","content":"正解","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1654487691,"ip_address":"","comment_id":347534,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1654134319","product_id":100006601,"comment_content":"我觉得高可用更加复杂，更加重要，要解决硬件，软件等各种问题，而且系统高性能的前提也是系统高可用","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574945,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654487692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346709,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1159120,"ip_address":"","ucode":"BF1E619F24248F","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/d0/17342a29.jpg","comment_is_top":false,"comment_ctime":1653374510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653374510","product_id":100006601,"comment_content":"主节点： 独裁式 协商式 民主式 ","like_count":0},{"had_liked":false,"id":343682,"user_name":"林肯","can_delete":false,"product_type":"c1","uid":1008582,"ip_address":"","ucode":"D2C97220230DE5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/c6/d6ea3df3.jpg","comment_is_top":false,"comment_ctime":1650980444,"is_pvip":false,"replies":[{"id":"125600","content":"兄台阿里系的 ？","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1651194085,"ip_address":"","comment_id":343682,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650980444","product_id":100006601,"comment_content":"高可用解决方案：冗余；<br>计算高可用：冗余多台机器，机器都是无状态的；<br>存储高可用：难点不在冗余，而在于平衡高可用和一致性；CAP理论<br>广义的讲：高可用不仅仅是冗余；关键时刻部分业务做降级也是可选项。<br>阿里三板斧：可灰度、可监控、可降级；都是保证高可用的手段","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568643,"discussion_content":"兄台阿里系的 ？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651194086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340271,"user_name":"Geek_c45ccf","can_delete":false,"product_type":"c1","uid":2945547,"ip_address":"","ucode":"9FB72B5C6C9714","user_header":"","comment_is_top":false,"comment_ctime":1648711396,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648711396","product_id":100006601,"comment_content":"高可用比较复杂吧，因为有的问题根本无解。","like_count":0},{"had_liked":false,"id":337293,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1646736943,"is_pvip":false,"replies":[{"id":"123268","content":"加油 ：）","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1646746094,"ip_address":"","comment_id":337293,"utype":1}],"discussion_count":1,"race_medal":4,"score":"1646736943","product_id":100006601,"comment_content":"不错，长见识了，以前就听说高并发什么的，觉得很遥远，现象举例就形象很多","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555101,"discussion_content":"加油 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646746094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332898,"user_name":"易飞","can_delete":false,"product_type":"c1","uid":2630424,"ip_address":"","ucode":"32AC28754237F7","user_header":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","comment_is_top":false,"comment_ctime":1643794887,"is_pvip":false,"replies":[{"id":"121700","content":"是的，FLP原理","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1644027629,"ip_address":"","comment_id":332898,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643794887","product_id":100006601,"comment_content":"高可用的状态决策想想就很难，而且也没有完美的解决办法","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549481,"discussion_content":"是的，FLP原理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644027629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331393,"user_name":"刘恩德","can_delete":false,"product_type":"c1","uid":1542736,"ip_address":"","ucode":"A92D3BA6CA546E","user_header":"https://static001.geekbang.org/account/avatar/00/17/8a/50/1ac12c3c.jpg","comment_is_top":false,"comment_ctime":1642571938,"is_pvip":false,"replies":[{"id":"121118","content":"正解，高可用很多时候只能取舍","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1642645275,"ip_address":"","comment_id":331393,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642571938","product_id":100006601,"comment_content":"高可用会更复杂<br>高性能一般有量化指标, 通过架构的优化，算法的改进，硬件的升级能实现对应的指标, 但是高可用目前没有完美的解决办法, 只能减少或者规避,  需要考虑的情景很多.","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547347,"discussion_content":"正解，高可用很多时候只能取舍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642645275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329193,"user_name":"蓝士钦","can_delete":false,"product_type":"c1","uid":1229516,"ip_address":"","ucode":"726EB5C8EF1249","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/cc/ca22bb7c.jpg","comment_is_top":false,"comment_ctime":1641202017,"is_pvip":false,"replies":[{"id":"119959","content":"正解","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1641351081,"ip_address":"","comment_id":329193,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641202017","product_id":100006601,"comment_content":"高可用会比高性能要复杂一些。<br>保证高性能，只需要做合理的业务拆分，增加机器即可，是有解的，只不过是有上限的。<br>高可用，通过冗余数据，在增加机器的基础上，引入的新的复杂点：数据一致性。<br>在分布式系统中，因为各种条件因素，在某一个时刻，集群内点数据一定是存在不一致的。<br>通过状态决策：独裁、协商、选举，都无法保证高可用。只能根据对应的场景做取舍。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543905,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641351081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329098,"user_name":"子非鱼","can_delete":false,"product_type":"c1","uid":1146001,"ip_address":"","ucode":"7577222878C1E1","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/91/0d8e2472.jpg","comment_is_top":false,"comment_ctime":1641119452,"is_pvip":false,"replies":[{"id":"119965","content":"也不可能做到绝对高可用","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1641351195,"ip_address":"","comment_id":329098,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641119452","product_id":100006601,"comment_content":"reliability：system continues to work correctly even if there is something wrong. 这就要求系统有一定的容错机制，但是不可能容所有的错。比如冗余机器，是考虑机器故障的问题，但是当地球上所有服务器都出现问题时，你还能冗余机器到哪里呢，月球上吗？所以，描述系统高可用的时候，必须具体指明场景，否则没有意义。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543911,"discussion_content":"也不可能做到绝对高可用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641351195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328038,"user_name":"lliill","can_delete":false,"product_type":"c1","uid":1179412,"ip_address":"","ucode":"E01B1377D3EE57","user_header":"https://static001.geekbang.org/account/avatar/00/11/ff/14/4d5dfbfb.jpg","comment_is_top":false,"comment_ctime":1640497224,"is_pvip":false,"replies":[{"id":"119505","content":"正解，高可用更复杂一些，尤其是高可用存储","user_name":"作者回复","user_name_real":"编辑","uid":"1098920","ctime":1640614042,"ip_address":"","comment_id":328038,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1640497224","product_id":100006601,"comment_content":"高可用实现起来也许会更复杂，他需要考虑的因素太多，比如存储高可用不仅需要考虑区域间网络延迟问题，还要考虑自然因素，有许多不可控的因素影响高可用。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541961,"discussion_content":"正解，高可用更复杂一些，尤其是高可用存储","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640614042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311486,"user_name":"Drake敏","can_delete":false,"product_type":"c1","uid":2734734,"ip_address":"","ucode":"38366767EFDC90","user_header":"https://static001.geekbang.org/account/avatar/00/29/ba/8e/4645afae.jpg","comment_is_top":false,"comment_ctime":1631253341,"is_pvip":false,"replies":[{"id":"112896","content":"那能否做一个不出问题的系统 ？：）","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1631325736,"ip_address":"","comment_id":311486,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1631253341","product_id":100006601,"comment_content":"高可用更重要，否则系统出现问题的时候都没有备选方案","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526630,"discussion_content":"那能否做一个不出问题的系统 ？：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631325736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2734734,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ba/8e/4645afae.jpg","nickname":"Drake敏","note":"","ucode":"38366767EFDC90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393249,"discussion_content":"预案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631326174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311095,"user_name":"Kim","can_delete":false,"product_type":"c1","uid":1067212,"ip_address":"","ucode":"824575C9FCE06D","user_header":"https://static001.geekbang.org/account/avatar/00/10/48/cc/109fa895.jpg","comment_is_top":false,"comment_ctime":1631070532,"is_pvip":false,"replies":[{"id":"112753","content":"正解","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1631086524,"ip_address":"","comment_id":311095,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631070532","product_id":100006601,"comment_content":"可用性更复杂。<br>提高可用性的手段只有冗余，冗余的机器间需要通过网络通信，交换信息或者备份信息。<br>问题就出现在网络，网络是不可靠的，实际上也可以冗余网络来规避网络带来的不确定性。<br>即在数据传输时，通过不同的网络传输相同的数据，到不同地方的机房。<br>但是最终还是解决不了自然灾害等外界因素。几乎无解。只能尽量避免。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526471,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631086524,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308792,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1629800033,"is_pvip":false,"replies":[{"id":"111777","content":"比如说机房的一个交换机坏了，就可能导致集群脑裂","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1629810896,"ip_address":"","comment_id":308792,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629800033","product_id":100006601,"comment_content":"今天的课程，我感觉脑裂怎么产生的没有说明白，只是说节点故障，那肯定是出现了故障才产生的，场景是啥？ 课后题来看：高性能就是软件与硬件的发挥极致，高可用要涉及到很多知识了，网络的知识，操作系统的，除了基础知识外还要考虑各种场景，所以涉及到的范围更广，深度更深。高性能与高可用都不简单，但是高可用可能更难一些。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525624,"discussion_content":"比如说机房的一个交换机坏了，就可能导致集群脑裂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629810896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307797,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1629259313,"is_pvip":true,"replies":[{"id":"111535","content":"是的，分布式一致性是非常难搞的","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1629346149,"ip_address":"","comment_id":307797,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629259313","product_id":100006601,"comment_content":"当然是高可用复杂很多，需要考虑分区和数据一致的问题。简单的高性能加集群就能实现了","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525290,"discussion_content":"是的，分布式一致性是非常难搞的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629346149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293868,"user_name":"Geek_c66b6b","can_delete":false,"product_type":"c1","uid":2632258,"ip_address":"","ucode":"3907905E2BC544","user_header":"","comment_is_top":false,"comment_ctime":1621583100,"is_pvip":false,"replies":[{"id":"106574","content":"正解","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1621593478,"ip_address":"","comment_id":293868,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1621583100","product_id":100006601,"comment_content":"高性能增加机器的目的在于“扩展”处理性能，高可用增加机器的目的在于“冗余”处理单元","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520406,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621593478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286966,"user_name":"佳楠","can_delete":false,"product_type":"c1","uid":1008809,"ip_address":"","ucode":"A1698AE91992AA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/64/a9/27d63f2e.jpg","comment_is_top":false,"comment_ctime":1617708635,"is_pvip":false,"replies":[{"id":"104228","content":"高可用更难的核心原因可以看看FLP和CAP两个理论","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1617755999,"ip_address":"","comment_id":286966,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1617708635","product_id":100006601,"comment_content":"高可用更难些，因为故障都是未知的，很多时候无法防患于未然。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518149,"discussion_content":"高可用更难的核心原因可以看看FLP和CAP两个理论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617755999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286218,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1617196725,"is_pvip":true,"replies":[{"id":"104047","content":"高性能高可用才是冗余，可扩展性高不是冗余，安全性高也不是冗余。","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1617326379,"ip_address":"","comment_id":286218,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1617196725","product_id":100006601,"comment_content":"系统的高本质上都是“冗余”","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517912,"discussion_content":"高性能高可用才是冗余，可扩展性高不是冗余，安全性高也不是冗余。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617326379,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280820,"user_name":"李兴振","can_delete":false,"product_type":"c1","uid":2004552,"ip_address":"","ucode":"78E54478F38DC1","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/48/a0c6a06c.jpg","comment_is_top":false,"comment_ctime":1614408004,"is_pvip":false,"replies":[{"id":"101953","content":"你说的前者是“高性能”么？实际上高可用更复杂，你可以看看其他人的回答。","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1614425343,"ip_address":"","comment_id":280820,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1614408004","product_id":100006601,"comment_content":"高性能关注点解决系统的性能瓶颈，和本身故障无关；高可用是考虑系统的故障不稳定，增加了安全措施；解决问题问题的方向不同。 单纯说复杂，可能还是前者复杂。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516215,"discussion_content":"你说的前者是“高性能”么？实际上高可用更复杂，你可以看看其他人的回答。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614425343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279030,"user_name":"DFighting","can_delete":false,"product_type":"c1","uid":1233193,"ip_address":"","ucode":"F3BA2426FF8582","user_header":"https://static001.geekbang.org/account/avatar/00/12/d1/29/1b1234ed.jpg","comment_is_top":false,"comment_ctime":1613556606,"is_pvip":true,"replies":[{"id":"101411","content":"后面会讲解具体的高可用计算和高可用存储架构模式","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1613611852,"ip_address":"","comment_id":279030,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1613556606","product_id":100006601,"comment_content":"高可用吧，因为意外情况如随机事件般发生，很难全部顾及<br>计算高可用读完咋感觉有点像微服务设计的幂等，向外暴露的服务不能存在状态。存储高可用，好抽象，读完整个课程，感觉学会了点，但是总结不出来<br>最后，高可用的关键是具体业务场景下，梳理可以允许的最大不可用时间，最好有可用性的标准，然后才可以基于已有的技术，方案，经验等去做设计吧","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515603,"discussion_content":"后面会讲解具体的高可用计算和高可用存储架构模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613611852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276638,"user_name":"恐龙","can_delete":false,"product_type":"c1","uid":1323030,"ip_address":"","ucode":"7B85A27E40D261","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/16/4773d604.jpg","comment_is_top":false,"comment_ctime":1612061321,"is_pvip":false,"replies":[{"id":"100431","content":"你听得好细，赞 👍<br><br>我跟编辑说一下纠正一下。","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1612103484,"ip_address":"","comment_id":276638,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1612061321","product_id":100006601,"comment_content":"纯干货。反馈一个小问题，协商式中这句话“这个架构的基本协商规则可以设计成：”后面的内容在语音里分为“四种”，实际是通过“4步”建立一套主备机制，应该是“第一步，第二步、、、”","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514781,"discussion_content":"你听得好细，赞 👍\n\n我跟编辑说一下纠正一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612103484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260006,"user_name":"老艮额","can_delete":false,"product_type":"c1","uid":1180638,"ip_address":"","ucode":"60622F5DFE9D30","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/de/fe473006.jpg","comment_is_top":false,"comment_ctime":1604905991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604905991","product_id":100006601,"comment_content":"高可用的经典案例是阿里用剪刀剪断了机房的网线。但其实那更像是一场成功的ToB的宣讲会，因为其实有很多情况比剪网线还可怕，比如如何预防DDOS攻击","like_count":0},{"had_liked":false,"id":251722,"user_name":"龙猫","can_delete":false,"product_type":"c1","uid":1112490,"ip_address":"","ucode":"FD726CC969EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/aa/3e80212e.jpg","comment_is_top":false,"comment_ctime":1601808691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601808691","product_id":100006601,"comment_content":"高可用更加复杂，高性能可以通过扩展解决，要保证高可用需要结合实际情况选择cap","like_count":0},{"had_liked":false,"id":245586,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1599000820,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1599000820","product_id":100006601,"comment_content":"高可用意味着无中断，系统高可用方案本质上都是通过“冗余”实现。<br><br>高性能增加机器的目的在于“扩展”处理性能；高可用增加机器的目的在于“冗余”处理单元。<br><br>有没有可能增加机器同时满足高性能和高可用？感觉上高性能和高可用是不同的两个衡量维度，但是有可能在降低性能指标的情况下保证高可用？<br><br>无论是独裁式、协商式或者民主式，状态决策都可能出现问题，这个和人类社会很像，需要结合业务，进行分析、判断和选择。","like_count":0},{"had_liked":false,"id":241685,"user_name":"Andy","can_delete":false,"product_type":"c1","uid":1447283,"ip_address":"","ucode":"708042A35424DC","user_header":"https://static001.geekbang.org/account/avatar/00/16/15/73/e5e4b245.jpg","comment_is_top":false,"comment_ctime":1597390223,"is_pvip":false,"replies":[{"id":"89622","content":"同时兼备高性能和高可用当然更复杂������","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1597984158,"ip_address":"","comment_id":241685,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597390223","product_id":100006601,"comment_content":"对于高可用和高性能而言，个人觉得，不能掉入二元论当中，也就是更复杂的是高性能或者高可用。任何系统都是有不同的模块、组件、子系统组成，并且，系统本身也是有生命周期的，不同的生命周期，复杂度呈现不一样。以下以工作涉及的电商系统为例说明。<br>对于从0到1的初始阶段，如何快速实现系统功能，这是最最重要的事情。整个系统的架构设计极有可能采取了非常粗糙的方式进行了，怎么快，就怎么来，并且，由于业务量一开始，并没有上来，所以，只要保证基本运行就行。虽然，此时，业务量没有上去，但是，不能让用户感受有“中断”的感觉，那么，自然，我们需要把存储和计算的高可用作为系统的保证，冗余较少量的机器就行，通常可能3台机器。<br>随着，业务越来越成熟，用户越来越多，项目进入了高速发展阶段，此时，提高大量用户的请求处理，就变得极为重要，高性能此时变成了系统的复杂度问题，这就要求我们依然通过增加机器，达到多台机器集群服务提升系统的运算量级。<br>项目继续发展，业务量继续提升，此时业务量不仅大，业务的问题和机器的问题也会增加。高可用和高性能就变成两个相互交织的重要问题，两者都需要一起解决，既要高性能，又要高可用，这样的复杂度也是相当难搞的。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503814,"discussion_content":"同时兼备高性能和高可用当然更复杂������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597984158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236241,"user_name":"林毅鑫","can_delete":false,"product_type":"c1","uid":1917916,"ip_address":"","ucode":"1BB3D186E90D96","user_header":"https://static001.geekbang.org/account/avatar/00/1d/43/dc/95d4f2c5.jpg","comment_is_top":false,"comment_ctime":1595376080,"is_pvip":false,"replies":[{"id":"87409","content":"答案是对的，但不要这么简单粗暴的分析😂","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1595474552,"ip_address":"","comment_id":236241,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1595376080","product_id":100006601,"comment_content":"必然是高可用更复杂一些，都不能用了就别谈性能了。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502001,"discussion_content":"答案是对的，但不要这么简单粗暴的分析😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595474552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":236001,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1595288126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595288126","product_id":100006601,"comment_content":"两者都比较复杂，为了提高性能会引入一些中间件mq或redis，那么就不得不考虑高可用的问题。","like_count":0},{"had_liked":false,"id":204683,"user_name":"荣码人生","can_delete":false,"product_type":"c1","uid":1397399,"ip_address":"","ucode":"6BD1A1991B484D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEL9JoquW6ia5A9AUkt8Ah51WQsqlpWnzwLcZwXKycAricKGOeqHf2JrVHxkHIjx5LuHnm8fJ1bJVLlA/132","comment_is_top":false,"comment_ctime":1586441736,"is_pvip":false,"replies":[{"id":"77052","content":"复杂度来说高可用更复杂一些，各种场景都要有不同的处理方式","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1586843341,"ip_address":"","comment_id":204683,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586441736","product_id":100006601,"comment_content":"从难点看，高性能目前来看通过任务分解，即微服务化，做成足够细颗粒度的分布式系统，就可以实现高性能。而高可用，通过冗余就可以实现，只要保证系统不可用即可。高性能难度更大，高性能只要用户数在不断增加，是没有天花板，而高可用，只需保证用户可用，即使性能慢也是可接受。<br>实际工作中，我们通常用物理冗余来实现高可用（不同机房备份），而通过增加多台服务器来实现高性能，但通过不断增加服务器让单体系统提高性能是有瓶颈的，后续的性能优化的方向都是微服务化，这个实现上比高可用难很多。<br>上面是我最开始的回答，不过当看了几个读者留言，我觉得这个问题确实要先量化，不然两者不可比，比如你要达到百万用户10ms响应的高性能，和你要达到99.999999SLA的高可用，都非常不容易实现。<br>","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491249,"discussion_content":"复杂度来说高可用更复杂一些，各种场景都要有不同的处理方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586843341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":193528,"user_name":"Ahaochan","can_delete":false,"product_type":"c1","uid":1726482,"ip_address":"","ucode":"2421EC162370FF","user_header":"https://wx.qlogo.cn/mmopen/vi_32/kibibtNMahiafQ3qM51Hu4yiaF3rybBiaJobRlBhUDTF67DtBKibKib66LcSSVOiaTmloA2noSic9hfntYlAsu9icIPKicE6Q/132","comment_is_top":false,"comment_ctime":1584923752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584923752","product_id":100006601,"comment_content":"如何做到高可用？总得来说就是冗余，准备plan B。在一台机器挂掉的时候，有另一台机器可以顶上，避免服务不可用的情况。<br><br>常见的高可用方案有<br>一主一备<br>一主多备<br>多主零备<br>多主多备<br><br>当主节点挂掉的时候，决策机器选举出新的主节点也有多种方案。但是大体就两种，独裁决策和民主决策。<br>独裁决策最大的问题是独裁者挂了，就群龙无首了。<br>民主决策最大的问题是脑裂问题，意见达不成统一。","like_count":0},{"had_liked":false,"id":191344,"user_name":"杨小松","can_delete":false,"product_type":"c1","uid":1111742,"ip_address":"","ucode":"D89CAA76C60C13","user_header":"https://static001.geekbang.org/account/avatar/00/10/f6/be/e5b04e7d.jpg","comment_is_top":false,"comment_ctime":1584764742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584764742","product_id":100006601,"comment_content":"很多小公司都没有实践的机会，而且现在也有越来越多的现成云方案","like_count":0},{"had_liked":false,"id":191342,"user_name":"杨小松","can_delete":false,"product_type":"c1","uid":1111742,"ip_address":"","ucode":"D89CAA76C60C13","user_header":"https://static001.geekbang.org/account/avatar/00/10/f6/be/e5b04e7d.jpg","comment_is_top":false,"comment_ctime":1584764692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584764692","product_id":100006601,"comment_content":"了解了之后，还是需要有实践的机会。","like_count":0},{"had_liked":false,"id":189723,"user_name":"福克斯","can_delete":false,"product_type":"c1","uid":1101551,"ip_address":"","ucode":"9778E3D5ECB461","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJicd5aiaTgyOr0hfV2rSaDBcJV3Zpc8CELsfH6KRIC3IR9O57RuN4Mlmqow4pROpU06Cd5jsgv713w/132","comment_is_top":false,"comment_ctime":1584542517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584542517","product_id":100006601,"comment_content":"高可用和一致性是由业务来区分的吧！","like_count":0},{"had_liked":false,"id":179665,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1582074489,"is_pvip":false,"replies":[{"id":"69937","content":"后面章节会详细展开","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1582191489,"ip_address":"","comment_id":179665,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582074489","product_id":100006601,"comment_content":"高可用问题，除了从冗余架构层面，能够在谈谈其它层面更好，由点到面铺开","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484350,"discussion_content":"后面章节会详细展开","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582191489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":111136,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1562486098,"is_pvip":false,"replies":[{"id":"40568","content":"分析很正确","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1562555556,"ip_address":"","comment_id":111136,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562486098","product_id":100006601,"comment_content":"<br>1.解决高性能问题，需要对系统中的复杂任务进行分解、合并等一系列操作进行整合，把一个复杂任务分解为若干个子任务，并把子任务的均匀分散到各服务器中，使每个子任务相对独立，处理简单，这样整个系统的并发程度较高，从整体上提高系统性能。<br>2.解决高可用问题，需要采用一定的算法来决定各服务器之间的任务分配问题，解决出现故障出现之后数据迁移问题，需要采用决策算法来决定集群中的决策服务器。<br>综上所述，解决高可用问题需要考虑的东西更多，用到的算法也更复杂。因此，解决高可用比解决高性能更复杂。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":457246,"discussion_content":"分析很正确","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562555556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90243,"user_name":"郑佳宁","can_delete":false,"product_type":"c1","uid":1389623,"ip_address":"","ucode":"D4221F5BF8EBD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqsFicCU21tKou4mFvfy5fOn9sfNYHNDfna8eozeVOLGs58gcAu8v2IIVFRsM6R8DIuWSVAjzubh8A/132","comment_is_top":false,"comment_ctime":1556457971,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556457971","product_id":100006601,"comment_content":"总结的很好。觉得在日常工作中，可扩展性、安全、规模，这几个更加常见和重要一些。而且每一块扩展开了讲，需要考虑的地方都比上面提到的要复杂的多。","like_count":0},{"had_liked":false,"id":86220,"user_name":"陈斌","can_delete":false,"product_type":"c1","uid":1149402,"ip_address":"","ucode":"AD6933D125C930","user_header":"https://static001.geekbang.org/account/avatar/00/11/89/da/136cdca6.jpg","comment_is_top":false,"comment_ctime":1555326586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555326586","product_id":100006601,"comment_content":"总的来说高可用会复杂一点，从某个意义上来说，高可用包含持续的高性能。<br>从边际效用递减来看，高性能的效用是持续递减，同样是提升10倍的性能，从10s到1s，效用比10ms到1ms。对用户来说，影响不大；只要把性能稳定在一个稳定的阀值以内，从架构上差不多就可以接受了。<br>但如果遇到是双十一业务量突然暴增，导致系统垮了，这个时候就是高可用的问题。<br>","like_count":0},{"had_liked":false,"id":75370,"user_name":"开心果源～老余","can_delete":false,"product_type":"c1","uid":1355445,"ip_address":"","ucode":"EEA63D092246C8","user_header":"https://static001.geekbang.org/account/avatar/00/14/ae/b5/df9e0b81.jpg","comment_is_top":false,"comment_ctime":1552383801,"is_pvip":false,"replies":[{"id":"28717","content":"这怎么可能啊😂我没这么厉害，每个领域都够一个人一辈子去钻研了","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1553300039,"ip_address":"","comment_id":75370,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1552383801","product_id":100006601,"comment_content":"认证学习架构知识，想成为华子一样的高手，请问下老师在大数据、AI、区块链方面有没有录课程！ ","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":442875,"discussion_content":"这怎么可能啊😂我没这么厉害，每个领域都够一个人一辈子去钻研了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553300039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":72438,"user_name":"hejiaming007","can_delete":false,"product_type":"c1","uid":1123421,"ip_address":"","ucode":"59B41D81EC83B8","user_header":"https://static001.geekbang.org/account/avatar/00/11/24/5d/ec592589.jpg","comment_is_top":false,"comment_ctime":1551625637,"is_pvip":false,"replies":[{"id":"27914","content":"后面会专门讲","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1552624771,"ip_address":"","comment_id":72438,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551625637","product_id":100006601,"comment_content":"可以说一下异地多活吗？也是高可用这个章节里面的内容吗？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441588,"discussion_content":"后面会专门讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552624771,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71208,"user_name":"行者","can_delete":false,"product_type":"c1","uid":1063734,"ip_address":"","ucode":"EA31201A7C5AE1","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/36/2d61e080.jpg","comment_is_top":false,"comment_ctime":1551283446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1551283446","product_id":100006601,"comment_content":"高可用更复杂些，因为需要考虑业务场景，以及业务要求，所以要均衡取舍，才能最终找到平衡点，这个很不容易。","like_count":0},{"had_liked":false,"id":69113,"user_name":"朱汉棠","can_delete":false,"product_type":"c1","uid":1426267,"ip_address":"","ucode":"47CDC1DD6EFFEF","user_header":"https://static001.geekbang.org/account/avatar/00/15/c3/5b/295c1f0f.jpg","comment_is_top":false,"comment_ctime":1550664426,"is_pvip":false,"replies":[{"id":"27892","content":"加油😊","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1552624217,"ip_address":"","comment_id":69113,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1550664426","product_id":100006601,"comment_content":"上一次听到脑裂这个词是数据库脚本升级的时候，数据库锁了，然后重启数据库起不来了，请教dba 说脑裂了，当时感觉就是非常不好，跟你学到很多东西","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439958,"discussion_content":"加油😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1552624217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63608,"user_name":"付志波","can_delete":false,"product_type":"c1","uid":1378093,"ip_address":"","ucode":"3842BD04E255DE","user_header":"https://static001.geekbang.org/account/avatar/00/15/07/2d/eab19d59.jpg","comment_is_top":false,"comment_ctime":1548415003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548415003","product_id":100006601,"comment_content":"高性能更加复杂涉及到临界资源访问需要分布式锁，由于任务拆分又有可能有分布式事务问题。","like_count":0},{"had_liked":false,"id":49256,"user_name":"信信","can_delete":false,"product_type":"c1","uid":1303865,"ip_address":"","ucode":"8DF0EC045579FD","user_header":"https://static001.geekbang.org/account/avatar/00/13/e5/39/951f89c8.jpg","comment_is_top":false,"comment_ctime":1544633563,"is_pvip":false,"replies":[{"id":"17760","content":"决策者挂了系统就挂了","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1544679486,"ip_address":"","comment_id":49256,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544633563","product_id":100006601,"comment_content":"老师您好，文中提到独裁式：如果决策者本身又做一套状态决策，那就陷入一个递归的死循环了。这句话无法理解，肯请老师指教。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432549,"discussion_content":"决策者挂了系统就挂了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544679486,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48917,"user_name":"gkb111","can_delete":false,"product_type":"c1","uid":1224217,"ip_address":"","ucode":"9B3154BCC9046B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLUic3XzxET3L3QXxcTbeg96GMx1HkiaiaZdudchmOmtPnuEPHK5vYEeMkvJR098XljMbXDialYib3z6w/132","comment_is_top":false,"comment_ctime":1544577840,"is_pvip":false,"replies":[{"id":"17767","content":"是计算高可用，不是算法高可用😀","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1544679724,"ip_address":"","comment_id":48917,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544577840","product_id":100006601,"comment_content":"今天主要学了两个概念，算法高可用和存储高可用。这两种方式，同时都需要决策机的决策，如何决策，cap理论，民主选举算法，协调式，独裁式。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432417,"discussion_content":"是计算高可用，不是算法高可用😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544679724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48316,"user_name":"fiend","can_delete":false,"product_type":"c1","uid":1048275,"ip_address":"","ucode":"F567C8485B5DD2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/d3/328ade9c.jpg","comment_is_top":false,"comment_ctime":1544419035,"is_pvip":false,"replies":[{"id":"17771","content":"某些场景下不可行，因为主备机不是同时检测到连接中断的","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1544679882,"ip_address":"","comment_id":48316,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1544419035","product_id":100006601,"comment_content":"老师你好，想问下，在协商式的主备决策场景中，如果两者的连接中断了，主机检测到连接中断，自动降为备机，备机检测到连接中断，自动升为主机，这样是否可行？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432126,"discussion_content":"某些场景下不可行，因为主备机不是同时检测到连接中断的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544679882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":43874,"user_name":"李健","can_delete":false,"product_type":"c1","uid":1326948,"ip_address":"","ucode":"AC5469BF734B90","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/64/3f161fff.jpg","comment_is_top":false,"comment_ctime":1543315802,"is_pvip":false,"replies":[{"id":"15693","content":"理解正确👍","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1543361697,"ip_address":"","comment_id":43874,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1543315802","product_id":100006601,"comment_content":"高可用与高性能。<br>高性能可以通过架设设备，完善算法，优化架构进行解决，但是性能也有极致，不过个人观点是，性能的极致对于用户而言，就是体验度足够。而低延时处理得当是不会影响用户体验的。<br>高可用而言，不中断目标难以达成，业务逻辑存在时差及不可抗因素，综合考虑实现高可用复杂度更好。<br>『小白理论』","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":430532,"discussion_content":"理解正确👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1543361697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":43634,"user_name":"Sunny","can_delete":false,"product_type":"c1","uid":1100609,"ip_address":"","ucode":"FAA642893DCC9B","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/41/7a490933.jpg","comment_is_top":false,"comment_ctime":1543249882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543249882","product_id":100006601,"comment_content":"计算高可用和存储高可用","like_count":0},{"had_liked":false,"id":28578,"user_name":"。。。。","can_delete":false,"product_type":"c1","uid":1042514,"ip_address":"","ucode":"343588C9585A61","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/52/97f59d07.jpg","comment_is_top":false,"comment_ctime":1538103765,"is_pvip":false,"replies":[{"id":"10362","content":"这个图是官方的，client不是投票，而是读写操作","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1538143030,"ip_address":"","comment_id":28578,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1538103765","product_id":100006601,"comment_content":"ZK的leader投票不是server之间的投票么，看您的图解咋是client给server来投票","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425312,"discussion_content":"这个图是官方的，client不是投票，而是读写操作","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538143030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":26878,"user_name":"Sorry^HK","can_delete":false,"product_type":"c1","uid":1249824,"ip_address":"","ucode":"0392E272E1B81C","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/20/b08f0ca0.jpg","comment_is_top":false,"comment_ctime":1537768171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1537768171","product_id":100006601,"comment_content":"1&#47;3的感觉。","like_count":0},{"had_liked":false,"id":20452,"user_name":"文竹","can_delete":false,"product_type":"c1","uid":1103167,"ip_address":"","ucode":"74413B1975976B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/3f/80bf4841.jpg","comment_is_top":false,"comment_ctime":1534463990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1534463990","product_id":100006601,"comment_content":"一般来说，高可用更复杂，理由如下。<br><br>高性能设计时关注点：性能，可以用QPS，TPS，吞吐量来衡量。对于一个API服务集群来说，可以用压力测试工具来验证服务集群性能情况。若性能提不上去，可以看下性能瓶颈在哪，再针对性设计方案（比如增加机器或服务拆解等）。分析流程比较简单。<br><br><br>高可用设计时关注点：系统功能的可用性，分为计算高可用和存储高可用，需要考虑异常情况下的处理方式。一般的处理方式有同城同机房集群部署，同城跨机房集群部署，异地跨机房集群部署，跨国跨机房集群部署，具体选取哪种方式依业务决定。因计算是可复制的，高性能设计还要分析瓶颈和找出合理设计，计算高可用设计难度低于高性能设计。存储高可用由于要考虑一致性问题，其难度要高于高性能设计。高可用设计关注业务功能可用性，关注点比较细；高性能关注性能，关注点比较单一，粗。","like_count":0},{"had_liked":false,"id":14810,"user_name":"艳姐","can_delete":false,"product_type":"c1","uid":1159298,"ip_address":"","ucode":"8A7DC647461CCC","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/82/013f0f1e.jpg","comment_is_top":false,"comment_ctime":1530672060,"is_pvip":false,"replies":[{"id":"5027","content":"后面有很多章节讲各种架构模式","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1530783334,"ip_address":"","comment_id":14810,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1530672060","product_id":100006601,"comment_content":"如何做到存储高可用没有讲","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420140,"discussion_content":"后面有很多章节讲各种架构模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530783334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14432,"user_name":"milu","can_delete":false,"product_type":"c1","uid":1161188,"ip_address":"","ucode":"785E29282B212E","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/e4/e99b40b4.jpg","comment_is_top":false,"comment_ctime":1530431106,"is_pvip":false,"replies":[{"id":"4897","content":"有钱也不能这么任性啊😂","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1530520599,"ip_address":"","comment_id":14432,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1530431106","product_id":100006601,"comment_content":"没有什么是加机子解决不了性能。。如果有。。一定是机子不够","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420010,"discussion_content":"有钱也不能这么任性啊😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530520599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14023,"user_name":"DavidTsai","can_delete":false,"product_type":"c1","uid":1072280,"ip_address":"","ucode":"DCE3AE45536B8C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/98/449bbdf4.jpg","comment_is_top":false,"comment_ctime":1530146284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1530146284","product_id":100006601,"comment_content":"高可用主要解决的是应对高性能分布式不同机器下最终输出结果的一致问题，同时需要决策如何保证机器之间信息互通正常而做出选择","like_count":0},{"had_liked":false,"id":12274,"user_name":"水月洞天","can_delete":false,"product_type":"c1","uid":1055551,"ip_address":"","ucode":"58C98CEA27312D","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/3f/9316f3f6.jpg","comment_is_top":false,"comment_ctime":1528759331,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1528759331","product_id":100006601,"comment_content":"高性能解决的是计算的速度和计算量问题，高可用解决异常带来的不可控情况。后者不仅要考虑计算的高可用，还要考虑传输的高可用，存储的高可用，考虑的场景更多。","like_count":0},{"had_liked":false,"id":12261,"user_name":"我走我流","can_delete":false,"product_type":"c1","uid":1134100,"ip_address":"","ucode":"1CD12CDA12FE60","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/14/13863643.jpg","comment_is_top":false,"comment_ctime":1528727843,"is_pvip":false,"replies":[{"id":"4114","content":"哪种效果比较好？","user_name":"作者回复","user_name_real":"华仔","uid":"1098920","ctime":1528869992,"ip_address":"","comment_id":12261,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1528727843","product_id":100006601,"comment_content":"实际项目中独裁式，协商式，民主投票式都用过。。。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419183,"discussion_content":"哪种效果比较好？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1528869992,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":10443,"user_name":"唐朝首都","can_delete":false,"product_type":"c1","uid":1081233,"ip_address":"","ucode":"F72655AE0AE4CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/91/962eba1a.jpg","comment_is_top":false,"comment_ctime":1527554575,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1527554575","product_id":100006601,"comment_content":"总体而言高可用更复杂一点，因为对于高可用来说，只要我们能够找到服务的性能瓶颈，针对性做出优化，基本上都能解决；但是对于高可用来说，基本是无解的，我们能做的基本上是做选择与取舍，找出更符合我们业务场景的方案。","like_count":0},{"had_liked":false,"id":10393,"user_name":"Tony","can_delete":false,"product_type":"c1","uid":1041154,"ip_address":"","ucode":"137608CF629DFD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e3/02/0c228d1c.jpg","comment_is_top":false,"comment_ctime":1527521108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1527521108","product_id":100006601,"comment_content":"高可用复杂<br>先从需求取舍来讲，高可用绝大部分情况下都必须做，数据对企业来说是非常重要的<br>数据+逻辑=业务，没了数据，业务也会瘫痪<br>通篇文章介绍了高可用的核心方案是通过冗余方案实现，但是没有一个完美的冗余方案能做到100%保证高可用<br><br>而反观上一篇的高性能，单机可以通过垂直方案提升服务性能，水平方向可以通过增加服务器扩展性能，尽管性能提高有个逼近值<br><br>相比于高可用，高性能实现要容易一些","like_count":0},{"had_liked":false,"id":8718,"user_name":"日光倾城","can_delete":false,"product_type":"c1","uid":1120345,"ip_address":"","ucode":"E4329963F660DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/59/daeb0b6c.jpg","comment_is_top":false,"comment_ctime":1526384928,"is_pvip":false,"replies":[{"id":"2610","content":"是的，细节很多，有的互相冲突，需要判断取舍","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526437757,"ip_address":"","comment_id":8718,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1526384928","product_id":100006601,"comment_content":"我觉得满足高可用更复杂，因为影响高可用的因素更多也更难以把控，","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417832,"discussion_content":"是的，细节很多，有的互相冲突，需要判断取舍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526437757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8689,"user_name":"J","can_delete":false,"product_type":"c1","uid":1107681,"ip_address":"","ucode":"5196AC0BAEE457","user_header":"https://static001.geekbang.org/account/avatar/00/10/e6/e1/f44cdfaf.jpg","comment_is_top":false,"comment_ctime":1526373649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526373649","product_id":100006601,"comment_content":"我认为高可用更复杂一点 高性能和高可用底层上除了设计节点通信外，还多了复杂的选举算法，如paxos","like_count":0},{"had_liked":false,"id":8391,"user_name":"石同享","can_delete":false,"product_type":"c1","uid":1126166,"ip_address":"","ucode":"59DE36A10C8356","user_header":"https://static001.geekbang.org/account/avatar/00/11/2f/16/62210b6b.jpg","comment_is_top":false,"comment_ctime":1526168138,"is_pvip":false,"replies":[{"id":"2477","content":"后面异地多活章节会讲","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526183480,"ip_address":"","comment_id":8391,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1526168138","product_id":100006601,"comment_content":"老师想请教个问题。分布式环境下数据同步是常遇到的问题，分布式环境下达到强一致很困难，所以一般考虑最终一致性。绝大部分场最终一致是可以接受的。但是像支付，交易这种场景最终一致性对用户来说也是不可能忍受的，用户期待的是强一致。   您觉得应该如何去权衡这个最终一致性和用户期待的强一致？  另外最终一致性这块什么时候会讲呀。感谢(数据一致应该也可理解是高可用的一部分吧)～","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417693,"discussion_content":"后面异地多活章节会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526183480,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8307,"user_name":"杰","can_delete":false,"product_type":"c1","uid":1100786,"ip_address":"","ucode":"05C3FCCDACD571","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/f2/98388f30.jpg","comment_is_top":false,"comment_ctime":1526084854,"is_pvip":false,"replies":[{"id":"2438","content":"有钱任性么？😂<br>学到技术最重要，如果觉得超值，可以让更多人来学习😃","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526090575,"ip_address":"","comment_id":8307,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1526084854","product_id":100006601,"comment_content":"这课程再贵10倍我也买，把架构讲的如此通俗易懂，膜拜一下大神！","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417663,"discussion_content":"有钱任性么？😂\n学到技术最重要，如果觉得超值，可以让更多人来学习😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526090575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8293,"user_name":"晴天","can_delete":false,"product_type":"c1","uid":1100637,"ip_address":"","ucode":"9796E0EF8DD9A8","user_header":"https://static001.geekbang.org/account/avatar/00/10/cb/5d/f3b20f07.jpg","comment_is_top":false,"comment_ctime":1526056368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1526056368","product_id":100006601,"comment_content":"看到现在综合前几章的内容，打破了我对设计的一些固有看法以及相当然的观点，可用性是软件复杂度的来源之一，而并没有银弹，也无一劳永逸的办法，集群增加以及优化策略都是折中主义，所以很符合开篇之词，设计是解决一定程度上复杂度带来的问题。","like_count":0},{"had_liked":false,"id":8202,"user_name":"衣申人","can_delete":false,"product_type":"c1","uid":1115777,"ip_address":"","ucode":"887FE9109B97DE","user_header":"https://static001.geekbang.org/account/avatar/00/11/06/81/28418795.jpg","comment_is_top":false,"comment_ctime":1525965517,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525965517","product_id":100006601,"comment_content":"状态决策属于一致性的范畴？这一节不是谈可用性吗？","like_count":0},{"had_liked":false,"id":8199,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1525964777,"is_pvip":false,"replies":[{"id":"2409","content":"通常情况下高可用复杂一些，异常场景很多","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526005362,"ip_address":"","comment_id":8199,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1525964777","product_id":100006601,"comment_content":"高性能，这个架构的设计更为复杂，更加不可控制","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417625,"discussion_content":"通常情况下高可用复杂一些，异常场景很多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526005362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8169,"user_name":"王旭东","can_delete":false,"product_type":"c1","uid":1108106,"ip_address":"","ucode":"61950FD5D5BFF9","user_header":"https://static001.geekbang.org/account/avatar/00/10/e8/8a/e3032578.jpg","comment_is_top":false,"comment_ctime":1525940094,"is_pvip":false,"replies":[{"id":"2381","content":"确实如此","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525943871,"ip_address":"","comment_id":8169,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1525940094","product_id":100006601,"comment_content":"个人认为正常场景下，高可用比高性能更复杂也更重要，复杂在于高可用无法100%保证CAP。<br>重要在于高性能的前提是系统可用。其实两个都重要和复杂，都需要我们好好权衡😂😂😂","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417609,"discussion_content":"确实如此","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525943871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8157,"user_name":"波波安","can_delete":false,"product_type":"c1","uid":1002452,"ip_address":"","ucode":"2A677908E5A75D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","comment_is_top":false,"comment_ctime":1525929375,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1525929375","product_id":100006601,"comment_content":"从带来问题的严重性来看，一般高可用出现的问题比高性能方面出现的问题更严重。","like_count":0},{"had_liked":false,"id":8049,"user_name":"Will","can_delete":false,"product_type":"c1","uid":1019923,"ip_address":"","ucode":"66A054E8AFDC36","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/13/b5479887.jpg","comment_is_top":false,"comment_ctime":1525877472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525877472","product_id":100006601,"comment_content":"高可用:<br><br>不中断的提供功能执行。<br><br><br>按场景来说分为计算和存储高可用。<br><br>计算高可用:<br><br>需要一个分配器<br><br>分配器需要管理与计算资源的连接<br><br>需要根据场景制定不同的分配算法（1主3备，2主2备，3主1备，4主0备）<br><br><br>存储高可用:<br><br>需要考虑传输的延迟和中断，分布式领域CAP理论，存储高可用不可同时满足“一致性，可用性，分区容错性”，只能最多满足两种情况。<br><br><br>状态决策是高可用的基础:<br><br>独裁，独裁本身就不满足高可用。<br><br>协商，当备机和主机连接中断，备机不知道主机当前是否活着，那么备机是否升级到主机，如果引入多个连接，那么多个连接信息传递如果不一致，导致了更多的复杂性。<br><br>民主，少数服从多数，但如果分成了两个部分“脑裂”，会选出两个首脑，所以一般情况下民主必须是半数以上。<br><br><br>对于高性能和高可用谁更复杂，还是要看选择的指标和面对的业务场景。<br><br>如果每秒处理10000的订单和保持99.999%高可用性都非常复杂。高可用还是要更复杂一些，因为没有完美的解决方案，只能是取舍。<br><br>","like_count":0},{"had_liked":false,"id":8041,"user_name":"有渔@蔡","can_delete":false,"product_type":"c1","uid":1099829,"ip_address":"","ucode":"4AB669229892C8","user_header":"","comment_is_top":false,"comment_ctime":1525871416,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525871416","product_id":100006601,"comment_content":"高性能，高可用，采用的语言不同，可收到事半功倍的效果。比如nginx+lua的openresty，性能杠杠的。elixir写的高并发，几年都不会挂。","like_count":0},{"had_liked":false,"id":8040,"user_name":"有渔@蔡","can_delete":false,"product_type":"c1","uid":1099829,"ip_address":"","ucode":"4AB669229892C8","user_header":"","comment_is_top":false,"comment_ctime":1525871185,"is_pvip":false,"replies":[{"id":"2387","content":"后面有具体的异地多活，你也可以搜索互联网上的案例","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525944478,"ip_address":"","comment_id":8040,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1525871185","product_id":100006601,"comment_content":"作者能专门讲下你们实际项目中的异地多活解决方案吗好？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417556,"discussion_content":"后面有具体的异地多活，你也可以搜索互联网上的案例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525944478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8025,"user_name":"快乐的小傻子","can_delete":false,"product_type":"c1","uid":1109721,"ip_address":"","ucode":"F6C5AB7C08C16F","user_header":"https://static001.geekbang.org/account/avatar/00/10/ee/d9/84d44bc8.jpg","comment_is_top":false,"comment_ctime":1525864291,"is_pvip":false,"replies":[{"id":"2436","content":"有一定关联，但不是基础和上层的关系","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1526053327,"ip_address":"","comment_id":8025,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1525864291","product_id":100006601,"comment_content":"高可用性是不是应该为高性能的基础呢？服务性能高，可用性差，这个用户体验和公司业务都不易接受吧","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417551,"discussion_content":"有一定关联，但不是基础和上层的关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526053327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8008,"user_name":"天使","can_delete":false,"product_type":"c1","uid":1069842,"ip_address":"","ucode":"74F10EE17DD77F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/12/783f6294.jpg","comment_is_top":false,"comment_ctime":1525845718,"is_pvip":false,"replies":[{"id":"2321","content":"会的，到时候交流","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525857344,"ip_address":"","comment_id":8008,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1525845718","product_id":100006601,"comment_content":"看目录里好像没有针对一致性问题专门讲解的章节，会在后面高可用或者CAP那里讲解吗？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417542,"discussion_content":"会的，到时候交流","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525857344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7994,"user_name":"geektcp","can_delete":false,"product_type":"c1","uid":1119594,"ip_address":"","ucode":"F98DF956FA19FD","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/6a/5c861711.jpg","comment_is_top":false,"comment_ctime":1525835347,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525835347","product_id":100006601,"comment_content":"高可用和高性能哪个更复杂？本身就是一个前提模糊的复杂问句，要看业务类型，业务需求和实际系统的瓶颈。例如我就把zk作为单点运行，因为追求性能，另外实践证明zk单点比zk集群更稳定可靠！","like_count":0},{"had_liked":false,"id":7950,"user_name":"带刺的温柔","can_delete":false,"product_type":"c1","uid":1107210,"ip_address":"","ucode":"509C4CF0176EDB","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/0a/13c0f653.jpg","comment_is_top":false,"comment_ctime":1525796632,"is_pvip":false,"replies":[{"id":"2322","content":"后面架构设计原则会解答你的问题","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525857399,"ip_address":"","comment_id":7950,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1525796632","product_id":100006601,"comment_content":"刚上完线有点小兴奋看完老师讲解结合自己遇到的项目我觉得毫无疑问性能与高可用都重要。只是在业务发展的不同时期需要有不同的选择。比如说前期我觉得主要是业务开发性能与高可用可以暂时放一放，中期随着业务的发展量不断增加那么在性能上就要多花些功夫，随着业务不断的发展这个钱包也鼓起来了那这个时候两手都要抓而且要硬。我的问题是老师帮我点评一下有说错的没","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417526,"discussion_content":"后面架构设计原则会解答你的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525857399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7943,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1525793319,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1525793319","product_id":100006601,"comment_content":"数据库冗余，如何做到数据的一致性呢？就是数据如何同步过来的。我现在的项目是自己写一个定时工具来同步，但是时效性比较差。","like_count":0,"discussions":[{"author":{"id":1965699,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","nickname":"慎独明强","note":"","ucode":"DC2F7F2C0C8F60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292616,"discussion_content":"数据库有binlog实时同步异步复制，但是在主库出现大事务和高并发是会出现延迟同步。如果采用同步复制，会大大降低数据库性能。你自己写工具，是冷备的方式，一般一天一次，时效性差。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595287987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7939,"user_name":"Hesher","can_delete":false,"product_type":"c1","uid":1026832,"ip_address":"","ucode":"99AB8B1704CB7E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/10/b812ff3e.jpg","comment_is_top":false,"comment_ctime":1525792216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525792216","product_id":100006601,"comment_content":"业务规模不大的情况下，高可用更加复杂。拆分业务，分库分表拆服务，加机器加实例，加缓存，等等优化手段都可以提升性能。而高可用则需要仔细考虑，根据业务决定使用AP方案还是CP方案，比如绝大多数互联网应用都是保证AP，而银行、证券等系统，数据一致性要求肯定会更高，优先保证CP。","like_count":0},{"had_liked":false,"id":7931,"user_name":"老王","can_delete":false,"product_type":"c1","uid":1054710,"ip_address":"","ucode":"02AA850A7A9767","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/f6/87aac8c1.jpg","comment_is_top":false,"comment_ctime":1525785992,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1525785992","product_id":100006601,"comment_content":"我还在可用的路上，还没到性能呢..","like_count":0},{"had_liked":false,"id":7930,"user_name":"Smile","can_delete":false,"product_type":"c1","uid":1112296,"ip_address":"","ucode":"0684A430AC4A1A","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/e8/47fcf0c6.jpg","comment_is_top":false,"comment_ctime":1525785885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525785885","product_id":100006601,"comment_content":"看各位大神的留言 也是一种提升。。。","like_count":0},{"had_liked":false,"id":7916,"user_name":"卡莫拉内西","can_delete":false,"product_type":"c1","uid":1117409,"ip_address":"","ucode":"CA9E2DE91DA117","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/e1/e0ba4e87.jpg","comment_is_top":false,"comment_ctime":1525781232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525781232","product_id":100006601,"comment_content":"请问ap类型的分布式协调服务属于哪种方式呢?在高可用的场景下是否比cp类型的zk更合适，例如eureka。<br>我觉得高可用的设计应该比高性能更复杂，高可用是普遍互联网软件系统的基础特性（特殊需求除外），设计好高性能大多是基于高可用的，高可用都没有，扯高性能那就是空中楼阁，不知道我的想法对不对","like_count":0},{"had_liked":false,"id":7909,"user_name":"约书亚","can_delete":false,"product_type":"c1","uid":1046714,"ip_address":"","ucode":"81EA27ADD9EC1A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f8/ba/14e05601.jpg","comment_is_top":false,"comment_ctime":1525777537,"is_pvip":false,"replies":[{"id":"2294","content":"脑裂发生时，两个主都不知道，因此原主不能按照你说的方式不响应","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525824383,"ip_address":"","comment_id":7909,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1525777537","product_id":100006601,"comment_content":"有个问题要和大神探讨，文中说脑裂是靠投票解决的，逻辑上没错。但一般脑裂这名词更多指发生分区后，又选出一个主，原主又不自知。这种情况下要解决的是分区时，原主绝不能响应事务处理，分区恢复后原主要主动切换成从的问题<br>在raft中这是依靠写事务要多数节点响应，以及心跳信息中带term来解决的<br>原谅我抠字眼","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417514,"discussion_content":"脑裂发生时，两个主都不知道，因此原主不能按照你说的方式不响应","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525824383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7907,"user_name":"Regular","can_delete":false,"product_type":"c1","uid":1025998,"ip_address":"","ucode":"80B3EA083534CA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/ce/7ee0d672.jpg","comment_is_top":false,"comment_ctime":1525774370,"is_pvip":false,"replies":[{"id":"2276","content":"看起来一样，但本质不一样，高性能的集群中机器是对等的，高可用集群中机器关系是变化多样的。","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525775641,"ip_address":"","comment_id":7907,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1525774370","product_id":100006601,"comment_content":"老师好，今天讲得计算高可用，和上次讲得“任务分配”两者是不是可以重合，同样的架构，即使高可用，也是高性能？<br>还有一个问题，上次讲得高性能方式“任务分解”，拆分后的每个子任务也得进行计算高可用，用现在讲的高可用方式合理吗？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417513,"discussion_content":"看起来一样，但本质不一样，高性能的集群中机器是对等的，高可用集群中机器关系是变化多样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525775641,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7886,"user_name":"高歌在羊城","can_delete":false,"product_type":"c1","uid":1100492,"ip_address":"","ucode":"56D495D4218181","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/cc/97fd68ec.jpg","comment_is_top":false,"comment_ctime":1525759480,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525759480","product_id":100006601,"comment_content":"高可用比高性能的需求更加强烈，服务可用的前提下才讲高性能才有实际意义。性能开销一般在网络io，数据库读写上，可通过合理的服务化水平扩展进行提升，分布式缓存，内存数据库等。高可用意味着所有的组件都要冗余，要求在飞速运行中进行升级修理，实时监控到系统组件的运行状态，快速修复，没有百分百的高可用系统存在。","like_count":0},{"had_liked":false,"id":7874,"user_name":"山人","can_delete":false,"product_type":"c1","uid":1068934,"ip_address":"","ucode":"A90A80AF987CB9","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/86/881c40e8.jpg","comment_is_top":false,"comment_ctime":1525754791,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525754791","product_id":100006601,"comment_content":"我觉得高可用和高性能的复杂度比较没有绝对的答案，依据具体的指标来定，比如我们不能说小时级的高可用比上千并发毫秒级的性能要求的复杂度要高，而且还要结合具体的业务场景具体问题具体分析","like_count":0},{"had_liked":false,"id":7863,"user_name":"孙晓明","can_delete":false,"product_type":"c1","uid":1117094,"ip_address":"","ucode":"CAD28E4D5A3E76","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/a6/b234aa79.jpg","comment_is_top":false,"comment_ctime":1525750659,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525750659","product_id":100006601,"comment_content":"不能笼统的说高性能还是高可用的复杂度高，需要具体分析场景。例如，高性能的复杂度中，如果使用任务分解实现高可用，不仅需要考虑集群相应复杂度的问题，还要考虑软件代码如何实现的复杂度问题。高可用的复杂度中，对数据高可用的实现，需要考虑数据一致性如何实现等问题。","like_count":0},{"had_liked":false,"id":7847,"user_name":"野马","can_delete":false,"product_type":"c1","uid":1065176,"ip_address":"","ucode":"CC58CBF541D34A","user_header":"https://static001.geekbang.org/account/avatar/00/10/40/d8/69722032.jpg","comment_is_top":false,"comment_ctime":1525744415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525744415","product_id":100006601,"comment_content":"高可用更复杂，高可用需要良好的设计。高性能可以通过增加机器达到高性能。","like_count":0},{"had_liked":false,"id":7846,"user_name":"大光头","can_delete":false,"product_type":"c1","uid":1041792,"ip_address":"","ucode":"8EF797AFD1E27C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo3DrWeV7ZwRLXrRZg4V3ic1LQYdZ3u1oicDhqPic47vMguvf5QS69roTiaJrwDr5Re3Sy2UyHDWwmsTA/132","comment_is_top":false,"comment_ctime":1525743771,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525743771","product_id":100006601,"comment_content":"相对而言，高可用会更加复杂些，因为高可用意味着要增加存储资源，即数据冗余，数据冗余就会导致一致性问题。而高性能，一般可以通过增加计算资源实现","like_count":0},{"had_liked":false,"id":7837,"user_name":"彦龍","can_delete":false,"product_type":"c1","uid":1099596,"ip_address":"","ucode":"91CA140F477C9D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/4c/5b08f1fd.jpg","comment_is_top":false,"comment_ctime":1525742839,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525742839","product_id":100006601,"comment_content":"个人理解：两者都很重要，根据业务场景不同，侧重点不同，高可用需求场景会更多一些。两者有时是相互关联的，比如为了实现数据处理的速度，使用分布式集群处理，这同样增加了整个系统的可用性；为了实现web系统的可用性，使用lbs，这也间接增强了整个系统处理性能。","like_count":0},{"had_liked":false,"id":7818,"user_name":"成功","can_delete":false,"product_type":"c1","uid":1112099,"ip_address":"","ucode":"954B90AC92E8C3","user_header":"https://static001.geekbang.org/account/avatar/00/10/f8/23/165d2f0e.jpg","comment_is_top":false,"comment_ctime":1525740896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525740896","product_id":100006601,"comment_content":"高性能对系统非故障状态下的客户感知更直观，高可用对系统故障下的容灾性和可用性起决定作用，高可用在目前的技术体系中更难实现。","like_count":0},{"had_liked":false,"id":7817,"user_name":"李志博","can_delete":false,"product_type":"c1","uid":1009109,"ip_address":"","ucode":"F3C72573B3C112","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/d5/88beb15a.jpg","comment_is_top":false,"comment_ctime":1525740816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525740816","product_id":100006601,"comment_content":"高性能吧，不同系统业务场景都不一样，需要从设计，技术选型，架构方面好好取设计，才有可能实现高性能，但是高可用感觉和业务关系不大，不考虑一些极端场景，市面上的方案都够用了","like_count":0},{"had_liked":false,"id":7813,"user_name":"Forrest","can_delete":false,"product_type":"c1","uid":1032662,"ip_address":"","ucode":"2BAF62DFE9E918","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/d6/f331dba7.jpg","comment_is_top":false,"comment_ctime":1525739999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525739999","product_id":100006601,"comment_content":"我认为是高可用更复杂，因为难点在于数据的一致性。","like_count":0},{"had_liked":false,"id":7812,"user_name":"淡彩","can_delete":false,"product_type":"c1","uid":1013739,"ip_address":"","ucode":"2571F86F7589F8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/eb/205ff49c.jpg","comment_is_top":false,"comment_ctime":1525739960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525739960","product_id":100006601,"comment_content":"我认为高可用更复杂一些。正如上一节课提到的高性能可以通过简单粗暴的增加计算节点(程序已经优化到一定程度的前提)去提升，那么高可用对于高性能的计算节点来说就是为了保证高性能的计算节点能够可靠的使用，当然还包括这节提到的存储的高可用，如果没有了高可用，那么高性能也必然无法得到正常的发挥。对于高可用的多种方案，都没有非常完美的方案，在异常情况下这就得通过人工干预了，这里需要运维监控等一系列保障措施。以上是我的观点，若有不妥之处，望指正。","like_count":0},{"had_liked":false,"id":7810,"user_name":"恰饭哒","can_delete":false,"product_type":"c1","uid":1014023,"ip_address":"","ucode":"0395069A050057","user_header":"https://static001.geekbang.org/account/avatar/00/0f/79/07/2f418316.jpg","comment_is_top":false,"comment_ctime":1525739899,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1525739899","product_id":100006601,"comment_content":"高可用更加复杂些<br>1.没有绝对的高可用因为无法满足CAP<br>定理  <br>2.高性能可以通过拆分系统和提高硬件性能来完成目前为止软件对性能的要求还可以通过各种方式解决","like_count":0},{"had_liked":false,"id":7803,"user_name":"LEON","can_delete":false,"product_type":"c1","uid":1109922,"ip_address":"","ucode":"58F7AF5302FCAD","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/a2/6ea5bb9e.jpg","comment_is_top":false,"comment_ctime":1525739499,"is_pvip":true,"replies":[{"id":"2274","content":"是的，心跳线也会故障，多条心跳线还会出现信号不一致的问题","user_name":"作者回复","user_name_real":"华仔@阿里游戏","uid":"1098920","ctime":1525769981,"ip_address":"","comment_id":7803,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1525739499","product_id":100006601,"comment_content":"您好，我有一个问题，文中&quot;通过冗余来实现的高可用系统，状态决策本质上就不可能做到完全正确。&quot;这部分不是很理解。主备决策中，如果两台设备的心跳线为多条的话。只要有一个心跳线信号正常在就可以维持主备模式。理论上没有问题，可以做到状态决策完全正确，但是不排除是两台设备的心跳进程全部故障。所以说通过冗余来实现的高可用系统，状态决策本质上就不可能做到完全正确。这样理解是否正确？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417478,"discussion_content":"是的，心跳线也会故障，多条心跳线还会出现信号不一致的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525769981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":7798,"user_name":"narry","can_delete":false,"product_type":"c1","uid":1033576,"ip_address":"","ucode":"B8010C1DE39D08","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/68/7afb7304.jpg","comment_is_top":false,"comment_ctime":1525739243,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525739243","product_id":100006601,"comment_content":"个人认为如果将两者进行比较，高可用带来的挑战更大，高性能可以依靠扩展来应对，根据AKF扩展立方理论，3个方向上的扩展都涉及到了高可用的问题，X方向与其它两个方向的结合就会带来计算（XY）和数据一致性(XZ)高可用问题,所以解决高可用是解决扩展问题的关键技术挑战，挑战更高","like_count":0},{"had_liked":false,"id":7792,"user_name":"@漆~心endless","can_delete":false,"product_type":"c1","uid":1103153,"ip_address":"","ucode":"8DB0BBE2188A1B","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/31/b09432cc.jpg","comment_is_top":false,"comment_ctime":1525738958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1525738958","product_id":100006601,"comment_content":"单从考虑的方面来说，高可用需要注意的点比较多，但也不能单纯的说哪一种更复杂，需要根据业务来判断。","like_count":0}]}