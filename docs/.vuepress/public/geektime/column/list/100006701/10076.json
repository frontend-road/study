{"id":10076,"title":"第24讲 | 有哪些方法可以在运行时动态生成一个Java类？","content":"<p>在开始今天的学习前，我建议你先复习一下<a href=\"http://time.geekbang.org/column/article/7489\">专栏第6讲</a>有关动态代理的内容。作为Java基础模块中的内容，考虑到不同基础的同学以及一个循序渐进的学习过程，我当时并没有在源码层面介绍动态代理的实现技术，仅进行了相应的技术比较。但是，有了<a href=\"http://time.geekbang.org/column/article/9946\">上一讲</a>的类加载的学习基础后，我想是时候该进行深入分析了。</p>\n<p>今天我要问你的问题是，<span class=\"orange\">有哪些方法可以在运行时动态生成一个Java类？</span></p>\n<h2>典型回答</h2>\n<p>我们可以从常见的Java类来源分析，通常的开发过程是，开发者编写Java代码，调用javac编译成class文件，然后通过类加载机制载入JVM，就成为应用运行时可以使用的Java类了。</p>\n<p>从上面过程得到启发，其中一个直接的方式是从源码入手，可以利用Java程序生成一段源码，然后保存到文件等，下面就只需要解决编译问题了。</p>\n<p>有一种笨办法，直接用ProcessBuilder之类启动javac进程，并指定上面生成的文件作为输入，进行编译。最后，再利用类加载器，在运行时加载即可。</p>\n<p>前面的方法，本质上还是在当前程序进程之外编译的，那么还有没有不这么low的办法呢？</p>\n<p>你可以考虑使用Java Compiler API，这是JDK提供的标准API，里面提供了与javac对等的编译器功能，具体请参考<a href=\"https://docs.oracle.com/javase/9/docs/api/javax/tools/package-summary.html\">java.compiler</a>相关文档。</p><!-- [[[read_end]]] -->\n<p>进一步思考，我们一直围绕Java源码编译成为JVM可以理解的字节码，换句话说，只要是符合JVM规范的字节码，不管它是如何生成的，是不是都可以被JVM加载呢？我们能不能直接生成相应的字节码，然后交给类加载器去加载呢？</p>\n<p>当然也可以，不过直接去写字节码难度太大，通常我们可以利用Java字节码操纵工具和类库来实现，比如在<a href=\"http://time.geekbang.org/column/article/7489\">专栏第6讲</a>中提到的<a href=\"https://asm.ow2.io/\">ASM</a>、<a href=\"http://www.javassist.org/\">Javassist</a>、cglib等。</p>\n<h2>考点分析</h2>\n<p>虽然曾经被视为黑魔法，但在当前复杂多变的开发环境中，在运行时动态生成逻辑并不是什么罕见的场景。重新审视我们谈到的动态代理，本质上不就是在特定的时机，去修改已有类型实现，或者创建新的类型。</p>\n<p>明白了基本思路后，我还是围绕类加载机制进行展开，面试过程中面试官很可能从技术原理或实践的角度考察：</p>\n<ul>\n<li>\n<p>字节码和类加载到底是怎么无缝进行转换的？发生在整个类加载过程的哪一步？</p>\n</li>\n<li>\n<p>如何利用字节码操纵技术，实现基本的动态代理逻辑？</p>\n</li>\n<li>\n<p>除了动态代理，字节码操纵技术还有那些应用场景？</p>\n</li>\n</ul>\n<h2>知识扩展</h2>\n<p>首先，我们来理解一下，类从字节码到Class对象的转换，在类加载过程中，这一步是通过下面的方法提供的功能，或者defineClass的其他本地对等实现。</p>\n<pre><code>protected final Class&lt;?&gt; defineClass(String name, byte[] b, int off, int len,\n                                 \tProtectionDomain protectionDomain)\nprotected final Class&lt;?&gt; defineClass(String name, java.nio.ByteBuffer b,\n                                 \tProtectionDomain protectionDomain)\n</code></pre>\n<p>我这里只选取了最基础的两个典型的defineClass实现，Java重载了几个不同的方法。</p>\n<p>可以看出，只要能够生成出规范的字节码，不管是作为byte数组的形式，还是放到ByteBuffer里，都可以平滑地完成字节码到Java对象的转换过程。</p>\n<p>JDK提供的defineClass方法，最终都是本地代码实现的。</p>\n<pre><code>static native Class&lt;?&gt; defineClass1(ClassLoader loader, String name, byte[] b, int off, int len,\n                                \tProtectionDomain pd, String source);\n\nstatic native Class&lt;?&gt; defineClass2(ClassLoader loader, String name, java.nio.ByteBuffer b,\n                                \tint off, int len, ProtectionDomain pd,\n                                \tString source);\n</code></pre>\n<p>更进一步，我们来看看JDK dynamic proxy的<a href=\"http://hg.openjdk.java.net/jdk/jdk/file/29169633327c/src/java.base/share/classes/java/lang/reflect/Proxy.java\">实现代码</a>。你会发现，对应逻辑是实现在ProxyBuilder这个静态内部类中，ProxyGenerator生成字节码，并以byte数组的形式保存，然后通过调用Unsafe提供的defineClass入口。</p>\n<pre><code>byte[] proxyClassFile = ProxyGenerator.generateProxyClass(\n    \tproxyName, interfaces.toArray(EMPTY_CLASS_ARRAY), accessFlags);\ntry {\n\tClass&lt;?&gt; pc = UNSAFE.defineClass(proxyName, proxyClassFile,\n                                 \t0, proxyClassFile.length,\n      \t                           loader, null);\n\treverseProxyCache.sub(pc).putIfAbsent(loader, Boolean.TRUE);\n\treturn pc;\n} catch (ClassFormatError e) {\n// 如果出现ClassFormatError，很可能是输入参数有问题，比如，ProxyGenerator有bug\n}\n</code></pre>\n<p>前面理顺了二进制的字节码信息到Class对象的转换过程，似乎我们还没有分析如何生成自己需要的字节码，接下来一起来看看相关的字节码操纵逻辑。</p>\n<p>JDK内部动态代理的逻辑，可以参考<a href=\"http://hg.openjdk.java.net/jdk/jdk/file/29169633327c/src/java.base/share/classes/java/lang/reflect/ProxyGenerator.java\">java.lang.reflect.ProxyGenerator</a>的内部实现。我觉得可以认为这是种另类的字节码操纵技术，其利用了<a href=\"https://docs.oracle.com/javase/9/docs/api/java/io/DataOutputStream.html\">DataOutputStrem</a>提供的能力，配合hard-coded的各种JVM指令实现方法，生成所需的字节码数组。你可以参考下面的示例代码。</p>\n<pre><code>private void codeLocalLoadStore(int lvar, int opcode, int opcode_0,\n                            \tDataOutputStream out)\n\tthrows IOException\n{\n\tassert lvar &gt;= 0 &amp;&amp; lvar &lt;= 0xFFFF;\n\t// 根据变量数值，以不同格式，dump操作码\n    if (lvar &lt;= 3) {\n    \tout.writeByte(opcode_0 + lvar);\n\t} else if (lvar &lt;= 0xFF) {\n    \tout.writeByte(opcode);\n    \tout.writeByte(lvar &amp; 0xFF);\n\t} else {\n    \t// 使用宽指令修饰符，如果变量索引不能用无符号byte\n    \tout.writeByte(opc_wide);\n    \tout.writeByte(opcode);\n    \tout.writeShort(lvar &amp; 0xFFFF);\n\t}\n}\n</code></pre>\n<p>这种实现方式的好处是没有太多依赖关系，简单实用，但是前提是你需要懂各种<a href=\"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5\">JVM指令</a>，知道怎么处理那些偏移地址等，实际门槛非常高，所以并不适合大多数的普通开发场景。</p>\n<p>幸好，Java社区专家提供了各种从底层到更高抽象水平的字节码操作类库，我们不需要什么都自己从头做。JDK内部就集成了ASM类库，虽然并未作为公共API暴露出来，但是它广泛应用在，如<a href=\"https://docs.oracle.com/javase/9/docs/api/java/lang/instrument/package-summary.html\">java.lang.instrumentation</a> API底层实现，或者<a href=\"https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/CallSite.html\">Lambda Call Site</a>生成的内部逻辑中，这些代码的实现我就不在这里展开了，如果你确实有兴趣或有需要，可以参考类似LamdaForm的字节码生成逻辑：<a href=\"http://hg.openjdk.java.net/jdk/jdk/file/29169633327c/src/java.base/share/classes/java/lang/invoke/InvokerBytecodeGenerator.java\">java.lang.invoke.InvokerBytecodeGenerator</a><a href=\"http://hg.openjdk.java.net/jdk/jdk/file/29169633327c/src/java.base/share/classes/java/lang/invoke/InvokerBytecodeGenerator.java\">。</a></p>\n<p>从相对实用的角度思考一下，实现一个简单的动态代理，都要做什么？如何使用字节码操纵技术，走通这个过程呢？</p>\n<p>对于一个普通的Java动态代理，其实现过程可以简化成为：</p>\n<ul>\n<li>\n<p>提供一个基础的接口，作为被调用类型（com.mycorp.HelloImpl）和代理类之间的统一入口，如com.mycorp.Hello。</p>\n</li>\n<li>\n<p>实现<a href=\"https://docs.oracle.com/javase/9/docs/api/java/lang/reflect/InvocationHandler.html\">InvocationHandler</a>，对代理对象方法的调用，会被分派到其invoke方法来真正实现动作。</p>\n</li>\n<li>\n<p>通过Proxy类，调用其newProxyInstance方法，生成一个实现了相应基础接口的代理类实例，可以看下面的方法签名。</p>\n</li>\n</ul>\n<pre><code>public static Object newProxyInstance(ClassLoader loader,\n                                  \tClass&lt;?&gt;[] interfaces,\n                                  \tInvocationHandler h)\n</code></pre>\n<p>我们分析一下，动态代码生成是具体发生在什么阶段呢？</p>\n<p>不错，就是在newProxyInstance生成代理类实例的时候。我选取了JDK自己采用的ASM作为示例，一起来看看用ASM实现的简要过程，请参考下面的示例代码片段。</p>\n<p>第一步，生成对应的类，其实和我们去写Java代码很类似，只不过改为用ASM方法和指定参数，代替了我们书写的源码。</p>\n<pre><code>ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);\n\ncw.visit(V1_8,                      // 指定Java版本\n    \tACC_PUBLIC,             \t// 说明是public类型\n        &quot;com/mycorp/HelloProxy&quot;,\t// 指定包和类的名称\n    \tnull,                   \t// 签名，null表示不是泛型\n    \t&quot;java/lang/Object&quot;,             \t// 指定父类\n    \tnew String[]{ &quot;com/mycorp/Hello&quot; }); // 指定需要实现的接口\n</code></pre>\n<p>更进一步，我们可以按照需要为代理对象实例，生成需要的方法和逻辑。</p>\n<pre><code>MethodVisitor mv = cw.visitMethod(\n    \tACC_PUBLIC,         \t    // 声明公共方法\n    \t&quot;sayHello&quot;,             \t// 方法名称\n    \t&quot;()Ljava/lang/Object;&quot;, \t// 描述符\n    \tnull,                   \t// 签名，null表示不是泛型\n    \tnull);                      // 可能抛出的异常，如果有，则指定字符串数组\n\nmv.visitCode();\n// 省略代码逻辑实现细节\ncw.visitEnd();                      // 结束类字节码生成\n</code></pre>\n<p>上面的代码虽然有些晦涩，但总体还是能多少理解其用意，不同的visitX方法提供了创建类型，创建各种方法等逻辑。ASM API，广泛的使用了<a href=\"https://en.wikipedia.org/wiki/Visitor_pattern\">Visitor</a>模式，如果你熟悉这个模式，就会知道它所针对的场景是将算法和对象结构解耦，非常适合字节码操纵的场合，因为我们大部分情况都是依赖于特定结构修改或者添加新的方法、变量或者类型等。</p>\n<p>按照前面的分析，字节码操作最后大都应该是生成byte数组，ClassWriter提供了一个简便的方法。</p>\n<pre><code>cw.toByteArray();\n</code></pre>\n<p>然后，就可以进入我们熟知的类加载过程了，我就不再赘述了，如果你对ASM的具体用法感兴趣，可以参考这个<a href=\"http://www.baeldung.com/java-asm\">教程</a>。</p>\n<p>最后一个问题，字节码操纵技术，除了动态代理，还可以应用在什么地方？</p>\n<p>这个技术似乎离我们日常开发遥远，但其实已经深入到各个方面，也许很多你现在正在使用的框架、工具就应用该技术，下面是我能想到的几个常见领域。</p>\n<ul>\n<li>\n<p>各种Mock框架</p>\n</li>\n<li>\n<p>ORM框架</p>\n</li>\n<li>\n<p>IOC容器</p>\n</li>\n<li>\n<p>部分Profiler工具，或者运行时诊断工具等</p>\n</li>\n<li>\n<p>生成形式化代码的工具</p>\n</li>\n</ul>\n<p>甚至可以认为，字节码操纵技术是工具和基础框架必不可少的部分，大大减少了开发者的负担。</p>\n<p>今天我们探讨了更加深入的类加载和字节码操作方面技术。为了理解底层的原理，我选取的例子是比较偏底层的、能力全面的类库，如果实际项目中需要进行基础的字节码操作，可以考虑使用更加高层次视角的类库，例如<a href=\"http://bytebuddy.net/#/\">Byte Buddy</a>等。</p>\n<h2>一课一练</h2>\n<p>关于今天我们讨论的题目你做到心中有数了吗？试想，假如我们有这样一个需求，需要添加某个功能，例如对某类型资源如网络通信的消耗进行统计，重点要求是，不开启时必须是<strong>零开销，而不是低开销，</strong>可以利用我们今天谈到的或者相关的技术实现吗？</p>\n<p>请你在留言区写写你对这个问题的思考，我会选出经过认真思考的留言，送给你一份学习奖励礼券，欢迎你与我一起讨论。</p>\n<p>你的朋友是不是也在准备面试呢？你可以“请朋友读”，把今天的题目分享给好友，或许你能帮到他。</p>\n<p></p>\n","neighbors":{"left":{"article_title":"第23讲 | 请介绍类加载过程，什么是双亲委派模型？","id":9946},"right":{"article_title":"第25讲 | 谈谈JVM内存区域的划分，哪些区域可能发生OutOfMemoryError?","id":10192}},"comments":[{"had_liked":false,"id":14357,"user_name":"三口先生","can_delete":false,"product_type":"c1","uid":1117257,"ip_address":"","ucode":"8E8672321FE510","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/49/d71e939d.jpg","comment_is_top":false,"comment_ctime":1530325970,"is_pvip":false,"replies":[{"id":"4838","content":"不错","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530373135,"ip_address":"","comment_id":14357,"utype":1}],"discussion_count":1,"race_medal":0,"score":"267818298322","product_id":100006701,"comment_content":"将资源消耗的这个实例，用动态代理的方式创建这个实例动态代理对象，在动态代理的invoke中添加新的需求。开始使用代理对象，不开启则使用原来的方法，因为动态代理是在运行时创建。所以是零消耗。","like_count":62,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419982,"discussion_content":"不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530373135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14646,"user_name":"tyson","can_delete":false,"product_type":"c1","uid":1110943,"ip_address":"","ucode":"E88F630B53C743","user_header":"https://static001.geekbang.org/account/avatar/00/10/f3/9f/3e4e8d46.jpg","comment_is_top":false,"comment_ctime":1530582391,"is_pvip":true,"replies":[{"id":"4983","content":"是的，我自己也是用Javaagent方案","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530665045,"ip_address":"","comment_id":14646,"utype":1}],"discussion_count":4,"race_medal":0,"score":"216278947191","product_id":100006701,"comment_content":"可以考虑用javaagent+字节码处理拦截方法进行统计：对httpclient中的方法进行拦截，增加header或者转发等进行统计。开启和关闭只要增加一个javaagent启动参数就行","like_count":50,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420075,"discussion_content":"是的，我自己也是用Javaagent方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530665045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1179622,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ff/e6/4b0ddfcf.jpg","nickname":"李飞","note":"","ucode":"4B23FF72AA4BA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369832,"discussion_content":"如果运行中需要关闭呢？javaagent是不是就不太适合了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619169029,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1113660,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","nickname":"Miaozhe","note":"","ucode":"62872E8C138B67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":66462,"discussion_content":"要自己重写Javaagent的方法？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575073348,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1144504,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/b8/e4cd7997.jpg","nickname":"KAGEMUSHA","note":"","ucode":"DFC05BE62A9C10","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1113660,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/3c/13175251.jpg","nickname":"Miaozhe","note":"","ucode":"62872E8C138B67","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305707,"discussion_content":"这只是更进一步深入的策略，上面不说用动态代理简单实现也行吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600064282,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":66462,"ip_address":""},"score":305707,"extra":""}]}]},{"had_liked":false,"id":14363,"user_name":"四阿哥","can_delete":false,"product_type":"c1","uid":1104580,"ip_address":"","ucode":"3296E89174D370","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/c4/270db3ad.jpg","comment_is_top":false,"comment_ctime":1530330338,"is_pvip":false,"replies":[{"id":"4841","content":"非常感谢，老学究感到很欣慰，希望能对未来实践有帮助，专栏形式更多的是解决知识点的问题，后续专栏还没开始思考","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530373561,"ip_address":"","comment_id":14363,"utype":1}],"discussion_count":2,"race_medal":0,"score":"61659872482","product_id":100006701,"comment_content":"老师，您这个专栏完结了还会不会出其他专栏，你的每一篇我起码要听三四遍，我都是咬文嚼字的听，非常有用，非常好的内功心法","like_count":14,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419986,"discussion_content":"非常感谢，老学究感到很欣慰，希望能对未来实践有帮助，专栏形式更多的是解决知识点的问题，后续专栏还没开始思考","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530373561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1644768,"avatar":"https://static001.geekbang.org/account/avatar/00/19/18/e0/fa5a473b.jpg","nickname":"Geek_dbb622","note":"","ucode":"9A061D09F48208","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":185136,"discussion_content":"真敢吹啊你，还心法","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1582597329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14352,"user_name":"antipas","can_delete":false,"product_type":"c1","uid":1039798,"ip_address":"","ucode":"7F95F697D607C2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/b6/fcf322a7.jpg","comment_is_top":false,"comment_ctime":1530323403,"is_pvip":false,"replies":[{"id":"4840","content":"是的","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530373184,"ip_address":"","comment_id":14352,"utype":1}],"discussion_count":1,"race_medal":0,"score":"57364898251","product_id":100006701,"comment_content":"无痕埋点原理就是这样。像注解类框架也用到了比如retrofit","like_count":13,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419977,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530373184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":29119,"user_name":"冯宇","can_delete":false,"product_type":"c1","uid":1248481,"ip_address":"","ucode":"894A0951E776D7","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/e1/e54540b9.jpg","comment_is_top":false,"comment_ctime":1538270807,"is_pvip":false,"replies":[{"id":"11443","content":"不错，各种jvm语言也是一大亮点","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1539274442,"ip_address":"","comment_id":29119,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48782911063","product_id":100006701,"comment_content":"还可以基于JVM实现各种动态语言。比如groovy就是使用java开发的动态脚本语言","like_count":11,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425498,"discussion_content":"不错，各种jvm语言也是一大亮点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1539274442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":14512,"user_name":"rivers","can_delete":false,"product_type":"c1","uid":1168878,"ip_address":"","ucode":"4138B721C2502E","user_header":"https://static001.geekbang.org/account/avatar/00/11/d5/ee/02ce07ee.jpg","comment_is_top":false,"comment_ctime":1530499931,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23005336411","product_id":100006701,"comment_content":"希望作者能详细的讲下，javaassist等其他代理模式的使用，砍掉了很多内容，尽量考虑下水平有限的读者","like_count":5},{"had_liked":false,"id":14984,"user_name":"胡馥春","can_delete":false,"product_type":"c1","uid":1117304,"ip_address":"","ucode":"0EE812A5A1D1CB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/JooolCyKac0KOswuGiavSmiaOYYHemuGv3JgVGmnOQpcwgVe9akTMdibrtSR9vS8f64vRbYJKMrnibMmOBxCxibhfzg/132","comment_is_top":false,"comment_ctime":1530785170,"is_pvip":false,"replies":[{"id":"5092","content":"不是，Proxy这里是个特例，因为需要生成新的class","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1530896131,"ip_address":"","comment_id":14984,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14415687058","product_id":100006701,"comment_content":"所有用到java反射的地方，底层都是采用了字节码操纵技术，老师，这么理解对吗？","like_count":3,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420201,"discussion_content":"不是，Proxy这里是个特例，因为需要生成新的class","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1530896131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217601,"user_name":"李飞","can_delete":false,"product_type":"c1","uid":1555180,"ip_address":"","ucode":"930458850AA05B","user_header":"https://static001.geekbang.org/account/avatar/00/17/ba/ec/2b1c6afc.jpg","comment_is_top":false,"comment_ctime":1589541813,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10179476405","product_id":100006701,"comment_content":"越来越底层了，也越来越吃力，看来需要反复阅读才能吃透了","like_count":2},{"had_liked":false,"id":183665,"user_name":"朱震震","can_delete":false,"product_type":"c1","uid":1013128,"ip_address":"","ucode":"6E8AE4506255AE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/75/88/fd024a11.jpg","comment_is_top":false,"comment_ctime":1583110966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10173045558","product_id":100006701,"comment_content":"为什么需要动态加载，这个部分对系统有没有影响，会带来什么好处和坏处，痛点在哪，这些需要思考清楚。<br>好处解耦，实现动态的载入和卸载，监控等。缺点就是整体系统维护复杂度增高。这个技术通俗的理解就是使用了封装jvm识别的指令，然后生成字节码，然后使用加载类的方式加载，生成。具体细节还要详细研究","like_count":2},{"had_liked":false,"id":90658,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1556602379,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10146536971","product_id":100006701,"comment_content":"老师在讲一些知识的时候，会提及到前面相关的章节，觉得特别赞，可以提醒我们去复习前面的章节，不至于学了后面忘了前面~~老师时不时可以来一些这样的提醒😁","like_count":2},{"had_liked":false,"id":192707,"user_name":"护爽使者","can_delete":false,"product_type":"c1","uid":1275464,"ip_address":"","ucode":"12DC35DD74671C","user_header":"https://static001.geekbang.org/account/avatar/00/13/76/48/5ab89daa.jpg","comment_is_top":false,"comment_ctime":1584869080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879836376","product_id":100006701,"comment_content":"反射，动态代理等","like_count":1},{"had_liked":false,"id":150010,"user_name":"王盛武","can_delete":false,"product_type":"c1","uid":1182516,"ip_address":"","ucode":"DE7EF246D3DCE8","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/34/f41d73a4.jpg","comment_is_top":false,"comment_ctime":1573444743,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868412039","product_id":100006701,"comment_content":"老师好, 请问&quot;newProxyInstance 生成代理类实例的时候&quot;,  这里是用 hard-code生成字节码,<br>为何您这里选用的是ASM的例子呢?  上文提到了JDK里ASM是用在LamdaFrom, 不是newProxyInstance里哦","like_count":1},{"had_liked":false,"id":84327,"user_name":"多格","can_delete":false,"product_type":"c1","uid":1222021,"ip_address":"","ucode":"122195F3D90EA1","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/85/eeb5b42f.jpg","comment_is_top":false,"comment_ctime":1554827385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5849794681","product_id":100006701,"comment_content":"1. Proxy.newProxyInstance<br>2. Class&lt;?&gt; cl = getProxyClass0(loader, interfaces);<br>3.     private static final WeakCache&lt;ClassLoader, Class&lt;?&gt;[], Class&lt;?&gt;&gt;<br>        proxyClassCache = new WeakCache&lt;&gt;(new KeyFactory(), new ProxyClassFactory());<br>4.value = Objects.requireNonNull(valueFactory.apply(key, parameter));<br>5.interfaceClass = Class.forName(intf.getName(), false, loader);<br>6.Verify that the Class object actually represents an interface [限制只能是接口]<br>7.             byte[] proxyClassFile = ProxyGenerator.generateProxyClass(<br>                proxyName, interfaces, accessFlags);<br>8.return defineClass0(loader, proxyName,<br>                                    proxyClassFile, 0, proxyClassFile.length);<br>","like_count":1},{"had_liked":false,"id":17570,"user_name":"黄明恩","can_delete":false,"product_type":"c1","uid":1119409,"ip_address":"","ucode":"EF75C8BFA14D17","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/b1/7d974f0a.jpg","comment_is_top":false,"comment_ctime":1532752985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5827720281","product_id":100006701,"comment_content":"所谓零开销是指哪部分开销，做个统计的开关逻辑不就好了，硬套动态代理来实现感觉有点","like_count":1},{"had_liked":false,"id":16222,"user_name":"mojo","can_delete":false,"product_type":"c1","uid":1096150,"ip_address":"","ucode":"2A5E742C00A5C6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicRlf8vZguE6KpS8FEjpaheGbB3UZojKWTn501r2KLe3I3F7NlpSSpMZpaCcs5PBtR1nCHMHYcrA/132","comment_is_top":false,"comment_ctime":1531836747,"is_pvip":false,"replies":[{"id":"5639","content":"加载到system classloader...我理解卸载不了","user_name":"作者回复","user_name_real":"杨晓峰","uid":"1009360","ctime":1531880542,"ip_address":"","comment_id":16222,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5826804043","product_id":100006701,"comment_content":"请问老师，使用classloader动态加载的外部jar包，应该如何正确的卸载？已经加载到systemclassloader……通过反射urlclassloader的addurl方法加进去的","like_count":1,"discussions":[{"author":{"id":1009360,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/d0/6541f1d5.jpg","nickname":"杨晓峰","note":"","ucode":"2BF255467A978F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420718,"discussion_content":"加载到system classloader...我理解卸载不了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1531880542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2459923,"avatar":"https://static001.geekbang.org/account/avatar/00/25/89/13/0d3c5008.jpg","nickname":"最好不过","note":"","ucode":"C7DBCD08402DF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372964,"discussion_content":"可以卸载\n由Java虚拟机自带的加载器所加载的类，在虚拟机的生命周期中，始终不会被卸载。Java虚拟机自带的类加器包括根类加载器，扩展类加载器和系统类加载器。Java虚拟机本身会始终引用这些类加载器，而这些类加载器则会始引用它们所加载的类的`Class`对象，因此这`Class`对象终是可及的。\n\n由用户自定义的类加载器所加载的类是可以被卸载的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1620544483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}