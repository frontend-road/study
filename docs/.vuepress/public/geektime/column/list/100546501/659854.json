{"id":659854,"title":"12｜视频发布功能实现：怎样满足用户发布视频的需求？","content":"<p>你好，我是Barry。</p><p>我们都知道，在线视频平台除了满足用户在平台内浏览视频的需求之外，还需要满足用户发布视频的需求。</p><p>用户不单单是游客，还有可能成为平台的创作者，这样平台才能吸引更多的用户入驻。这节课的另一个核心知识点就是视频一键三连的功能实现，不难发现，这两块都属于用户与平台的交互功能。相信学完这节课以后，你的代码能力和需求设计能力会再一次强化。</p><p>接下来我们一起看看该如何实现吧！</p><h2>视频发布需求梳理</h2><p>视频发布主要的使用者是平台的用户，核心就是满足用户在平台内上传视频、分享视频内容的需求。这里我们重点关注三个问题。</p><p>第一，发布视频的入口在哪里？我们选择在创作中心来完成视频内容的发布功能，创作中心主要用于用户的视频管理。</p><p>第二，发布视频都需要哪些信息？也就是在发布视频过程中，都需要用户上传哪些信息字段。同时，为了确保视频正常发布，平台还需要验证部分信息，例如封面上传只能上传图片，视频上传只能上传视频文件，这样可以更方便地把控内容。</p><p>第三，我们要模拟视频平台审核的功能。用户刚发布的视频，不能直接进入平台，还需要经过审核之后才能流入平台。这也是平台对视频内容监测和把控，确保平台内容的绿色健康。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/bd/e34afe8bfbff0032e65d5cf95c0bc8bd.jpg?wh=3414x1798\" alt=\"\"></p><p>前面这张图主要展示的就是平台的创作中心。</p><!-- [[[read_end]]] --><p>我们梳理一下用户的使用流程。创作中心的入口放在个人中心下面，用户点击自己的头像就能看到下拉列表。接着点击创作中心，就来到了创作中心页面，这时候用户能够看到“去发布视频”按钮，点击按钮就直接跳转到发布页面。最后用户输入视频相关信息、上传封面图片和视频文件，点击发布即可完成视频的发布动作，视频会进入待审核列表。</p><h2>字段属性</h2><p>我们结合视频发布页面的预览截图，反推一下我们需要的信息字段。</p><p><img src=\"https://static001.geekbang.org/resource/image/a3/39/a383063f8258e80da03a0d9d1f327d39.jpg?wh=3061x1798\" alt=\"\"></p><p>其实这个生成过程应该是倒置的，也就是说我们要先考虑好用户需要上传哪些信息，然后根据功能的需求去设计页面。因为我已经完成了开发，我期望能够先给你看到效果，来引导你去思考，这样你以后碰到相关的功能需求就很容易处理了。</p><p>那用户发布视频到底需要哪些信息字段呢？这些字段的设计我们又该如何考虑？这绝对不是天马星空想出来的。</p><p>我们需要从展示和功能两个方向来考虑。</p><p>1.展示维度可以帮助我们倒推所需字段。回想首页展示内容，我们在展示视频信息的时候需要视频的标题、封面、描述以及作者信息，所以平台需要用户在上传的时候就把这些数据提交给后台。</p><p>2.从功能实现的方向看，就是确定发布视频的时候需要用户提供哪些字段，然后把字段存储在数据库，方便我们后期的查询或修改操作。</p><p>当然，所有的变量字段你都可以自己命名，但是一定要命名规范，然后要保持前后端字段统一。</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/d6/f4d8871799549f4eafa8e1264427b3d6.jpg?wh=2455x1081\" alt=\"\"></p><p>在明确了字段信息之后，就可以确定我们需要在视频上传时提交的信息。</p><h2>页面布局与功能实现</h2><p>创作中心的列表页的实现方式和个人中心里“我的关注”是一样的逻辑。</p><p>接下来我们重点看看视频发布页的布局和实现。这个页面是表单提交的形式，主要用到的组件就是Element。</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/cb/b7277f7f44312aa478b4113c579659cb.jpg?wh=3061x1686\" alt=\"\"></p><p>其中带*号的表示必填项，我们只需要根据前面的功能需求来设置就可以。</p><p>这里我们先聚焦在视频发布页的表单实现上，至于更多表单属性的详细介绍，你可以课后查阅<a href=\"https://element.eleme.cn/#/zh-CN/component/form\">官网</a>，还是非常好理解的。</p><p>代码中的onclick方法都可以自定义，你不妨把我后面写的代码作为参考。如果你写的代码和我不完全一样也没关系，只要保证页面的功能完整就可以。</p><pre><code class=\"language-plain\">&lt;template&gt;\n  &lt;div class=\"article-edit\"&gt;\n    &lt;div class=\"content-main container\"&gt;\n      &lt;div class=\"content-wrapper\"&gt;\n        &lt;el-form\n          ref=\"form\"\n          label-width=\"100px\"\n          class=\"video-name\"\n          :model=\"video\"\n          :rules=\"rules\"\n        &gt;\n          &lt;el-form-item label=\"标题\" prop=\"title\"&gt;\n            &lt;el-input\n              type=\"age\"\n              autocomplete=\"off\"\n              placeholder=\"最多输入20个文字/40个字符\"\n              v-model=\"video.title\"\n              clearable\n            &gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n          &lt;el-form-item label=\"封面\" prop=\"cover\"&gt;\n            &lt;el-upload\n              class=\"avatar-uploader\"\n               action=\"这里要写文件上传的地址\"\n              :show-file-list=\"false\"\n              :on-success=\"handleAvatarSuccess\"\n              :before-upload=\"beforeAvatarUpload\"\n            &gt;\n              &lt;img v-if=\"video.cover\" :src=\"video.cover\" class=\"avatar\" /&gt;\n              &lt;i v-else class=\"el-icon-plus avatar-uploader-icon\"&gt;&lt;/i&gt;\n            &lt;/el-upload&gt;\n          &lt;/el-form-item&gt;\n          &lt;el-form-item label=\"视频\" prop=\"video\"&gt;\n            &lt;el-upload\n              class=\"upload-demo\"\n              action=\"这里写文件上传的地址\"\n              :on-preview=\"handlePreview\"\n              :before-upload=\"beforeAvatarUpload\"\n              :on-remove=\"handleRemove\"\n              :before-remove=\"beforeRemove\"\n            &gt;\n              &lt;el-button size=\"small\" type=\"primary\"&gt;点击上传&lt;/el-button&gt;\n              &lt;div slot=\"tip\" class=\"el-upload__tip\"&gt;只能上传mp4/avi/mov/rmvb/flv文件，且不超过1G&lt;/div&gt;\n            &lt;/el-upload&gt;\n          &lt;/el-form-item&gt;\n          &lt;el-form-item label=\"描述\" prop=\"desc\"&gt;\n            &lt;el-input\n              type=\"textarea\"\n              :autosize=\"{ minRows: 2 }\" //设置最小高度\n              placeholder=\"请输入视频描述\"\n              v-model=\"video.desc\"\n            &gt;&lt;/el-input&gt;\n          &lt;/el-form-item&gt;\n          &lt;el-form-item label=\"类别\" prop=\"type\"&gt;\n            &lt;el-select v-model=\"video.type\" placeholder=\"请选择\"&gt;\n              &lt;el-option\n                v-for=\"item in options\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\"\n              &gt;&lt;/el-option&gt;\n            &lt;/el-select&gt;\n          &lt;/el-form-item&gt;\n          &lt;el-form-item label=\"标签\" prop=\"tag\"&gt;\n            &lt;el-tag\n              :key=\"tag\"\n              v-for=\"tag in dynamicTags\"\n              closable\n              :disable-transitions=\"false\"  //是否禁用渐变动画\n              @close=\"handleClose(tag)\"\n            &gt;{{tag}}&lt;/el-tag&gt;\n            //以下方法主要用于新增标签\n            &lt;el-input\n              class=\"input-new-tag\"\n              v-if=\"inputVisible\"\n              v-model=\"inputValue\"\n              ref=\"saveTagInput\"\n              size=\"small\"\n              @keyup.enter.native=\"handleInputConfirm\"\n              @blur=\"handleInputConfirm\"\n            &gt;&lt;/el-input&gt;\n            &lt;el-button v-else class=\"button-new-tag\" size=\"small\" @click=\"showInput\"&gt;+ New Tag&lt;/el-button&gt;\n          &lt;/el-form-item&gt;\n          &lt;button class=\"button-default\" @click=\"onSave('form')\"&gt;发布&lt;/button&gt;\n        &lt;/el-form&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre><h3>表单提交验证功能</h3><p>Form 组件提供了表单验证的功能，我们只需要通过&nbsp;rules&nbsp;属性传入约定的验证规则，并且将 Form-Item 的&nbsp;prop&nbsp;属性设置为需校验的字段名即可。后面是具体的代码案例。</p><pre><code class=\"language-plain\">//我们以标题为案例\n//标题是必须让用户填写的一个字段，所以我们要通过表单验证，提示用户，如果没有填写不能提交\n//同时我们要限制填入字段的长度\n\n//表单内标题的代码\n\n&lt;el-form\n  ref=\"form\"\n  label-width=\"100px\"\n  class=\"video-name\"\n  :model=\"video\"\n  :rules=\"rules\" //表单必须带上rules属性\n&gt;\n&lt;el-form-item label=\"标题\" prop=\"title\"&gt;\n  &lt;el-input\n    type=\"age\"\n    autocomplete=\"off\" //原生属性，自动补全\n    placeholder=\"最多输入5个文字到10个字符\" //输入框内显示输入提示\n    v-model=\"video.title\" //绑定的字段\n    clearable\n  &gt;&lt;/el-input&gt;\n&lt;/el-form-item&gt;\n//发布按钮\n&lt;button class=\"button-default\" @click=\"onSave('form')\"&gt;发布&lt;/button&gt;\n&lt;/el-form&gt;\n//在data内，我们需要写一个rules\nrules: {\n  title: [\n        { required: true, message: \"请输入标题\", trigger: \"blur\" },\n        {\n          min: 5,\n          max: 10,\n          message: \"最多输入5个文字到10个字符\",\n          trigger: \"blur\",\n        },\n      ],\n }\n \n//到这里还不够，我们需要在methods中点击发布按钮时进行表单的验证\nmethods:{\n  onSave(formName) {\n    this.$refs[formName].validate((valid) =&gt; {\n        if (valid) {\n          //如果验证通过，直接在下面写提交的方法就可以\n        } else {\n          //如果验证不通过，则直接做出提示\n          return false;\n        }\n      });\n}\n</code></pre><p>以上就是完整的一个表单验证过程。你会发现使用组件很便捷，不需要像之前那样，通过单独写Javascript来实现。<br>\n这里补充一句，课程里我重点和你讲解的是Element组件库中不容易理解的部分，以及与我们项目实现更相关的组件。其他组件理解起来也不难，你可以课后对照官网做补充了解。</p><p>我们来看看实现后的效果。我们输入一些不满足要求的内容，点击提交按钮看一下页面的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/60/d9/6072d1d4a124dd1df351f8e1d25825d9.jpg?wh=3061x1103\" alt=\"\"></p><p>一旦输入内容超出规定范围，就会出现后面这样的提示。</p><p><img src=\"https://static001.geekbang.org/resource/image/60/d3/60258f454d3e14354acfa716606bb3d3.jpg?wh=3061x1003\" alt=\"\"></p><h3>文件上传功能</h3><p>文件上传依然可以通过Element的组件去实现。为了让你在应用过程中少走弯路，我先带你梳理一下注意事项。</p><p>在项目中，通过封面照片上传功能代码案例，让你之后在应对各种系统的文件上传功能，你都可以通过下面的方法来实现。</p><p>首先，我们要了解Upload组件，它的作用是在前端实现文件以及图片的上传。</p><p>我们先来重点认识Upload组件的几个参数，表格里列出的参数是我们使用组件时常用到的方法，参数说明来自官网。</p><p><img src=\"https://static001.geekbang.org/resource/image/ca/9f/caef045420d7c0b2f6379byy3462d79f.jpg?wh=3733x2303\" alt=\"\"></p><p>了解了常用参数，还需要结合具体实现代码才能加深理解。</p><pre><code class=\"language-plain\">//表单中页面代码\n&lt;el-form-item label=\"封面\" prop=\"cover\"&gt;\n  &lt;el-upload\n    class=\"avatar-uploader\"\n    action=\"#\" //这里要写服务器上传地址，前期没有可以直接写#号\n    :show-file-list=\"false\"\n    :on-success=\"handleAvatarSuccess\" // 上传成功之后的钩子方法\n    :before-upload=\"beforeAvatarUpload\" //上传前的钩子方法\n  &gt;\n    &lt;img v-if=\"video.cover\" :src=\"video.cover\" class=\"avatar\" /&gt;//上传成功之后展示图片\n    &lt;i v-else class=\"el-icon-plus avatar-uploader-icon\"&gt;&lt;/i&gt;\n  &lt;/el-upload&gt;\n&lt;/el-form-item&gt;\n</code></pre><p>以上就是组件的写法，结合注释还是很好理解的。你要关注的是钩子方法，我们需要在上传过程中针对不同情况灵活应用它。</p><p>我们再结合一个实用案例体会一下钩子方法的妙处。比方说，我们想在上传过程中判断文件格式，要怎么实现呢？</p><p>这里就要用到before-upload钩子，它的作用就是在文件上传之前判断文件类型。下面就是钩子方法，该方法有且仅有一个参数返回，就是file文件信息，我们结合代码实现具体看一下。</p><pre><code class=\"language-plain\">beforeAvatarUpload(file) {\n   //file中有文件的相关信息，你可以在控制台直接打印查看\n   //file.type是文件的类型\n   //file.size是文件的大小\n  const isJPG = file.type === \"image/jpeg\"; \n  const isLt2M = file.size / 1024 / 1024 &lt; 2;\n  if(!isJPG){\n    this.$message.error(\"上传头像图片只能是 JPG 格式!\");\n  }else if(!isLt2M){\n    this.$message.error(\"上传头像图片大小不能超过 2MB!\");\n  }else{\n    //当你没有文件上传服务器地址的时候，这里主要用于图片展示\n    this.video.cover = URL.createObjectURL(file);\n    return false\n  }\n  return isJPG &amp;&amp; isLt2M;\n}\n</code></pre><p>最终文件上传到后端并实现存储，我们就直接使用axios来做接口调用，POST方法传值。这里我们重点需要关注的是对于file文件的上传接口，我们需要使用FormData格式进行数据封装，提交方式是后面这样。</p><pre><code class=\"language-plain\">let formdata = new FormData()\nformdata.append('title', this.video.title)\nformdata.append('video_url', this.video.video_url)\nformdata.append('cover', this.video.cover)\nformdata.append('userId', this.userId)\n\nthis.$axios\n  .post('请求的接口地址', this.formdata)\n  .then((data) =&gt; {\n    if (data.code === 200) {\n      this.$message({\n        type: \"success\",\n        message: data.msg,\n      });\n      this.$router.push(\"/home/admin\"); //提交成功之后回到创作中心\n    }\n  });\n</code></pre><p>好，进行到这里，视频发布功能的设计与开发已经大功告成了！恭喜我们取得阶段性的成果。</p><h2>如何修改发布视频内容</h2><p>为了更灵活地管理发布的视频内容，给用户更好的使用体验，已发布视频内容的修改功能也是必不可少的。</p><p>我们同样先推演一下用户的操作流程。用户可以在创作中心的待审核列表、审核通过列表、审核不通过列表中，选择相应的视频，点击修改按钮，然后跳转到编辑页面就可以修改视频内容了。</p><p>那么修改视频的流程与发布视频有什么不同呢？</p><p>不同就是，用户点击修改按钮跳转到修改页面以后需要获取当前视频的信息，并不是像发布视频那样，表单是完全清空的状态。所以这时我们需要在页面加载的时候，直接把对应视频的信息显示出来，方便用户去修改表单。</p><p>那么我们下面要做的就是确定如何获取视频信息，有两种方式供我们选择。</p><p>第一种方法就是利用查询接口来查询。当用户点击修改按钮跳转到修改页面时，需要调用视频查询接口获取数据，接着赋值给表单。</p><p>第二种方法就是利用浏览器缓冲，这相当于把点击当前视频的信息直接存储在localstorage中，然后在修改页面的mounted方法中直接赋值。</p><p>比较一下这两个方法，我们会发现接口请求的方式更加得当。毕竟存储在缓存中，存在一定的安全隐患。</p><p>确定了接口请求的信息获取方法，我们来看看具体的实现代码。</p><p>我们在home/admin.vue文件中。我们先来看HTML部分，我给你写了详细的注释。</p><pre><code class=\"language-plain\">//HTML部分\n&lt;span&gt;\n  &lt;i class=\"el-icon-edit-outline\" @click.stop=\"goEdit(item.articleId)\"&gt;&lt;/i&gt;\n  //修改按钮，触发方法goEdit，同时传递视频的ID\n&lt;/span&gt;\n</code></pre><p>JS部分我们要实现带着参数进行页面跳转，后面是具体的代码案例。</p><pre><code class=\"language-plain\">//Js部分\n//在跳转路由中，可以直接以+id的这样的写法来传值，采用的是route的params方法，也可以多个值进行传递\ngoEdit(id) {\n  this.$router.push(\"/video/edit/\" + id);\n}\n</code></pre><p>在edit.vue文件中，我们要写出获取对应视频信息的方法。</p><pre><code class=\"language-plain\">mounted() {\n    this.video.userId = this.user.userId;\n    // 直接可以通过this.$route.params.id获取到传输的ID\n    // params 是route传参方式，\n    if (this.$route.params.id) {\n      this.$axios\n        .get(\n          \"接口地址\" +\n            this.$route.params.id\n        )\n        .then((data) =&gt; {\n          //this.video就是表单的数据\n          this.video = data.data;\n        });\n    }\n  }\n</code></pre><p>到这里，我们就完成了已发布视频的修改功能，这样就能更灵活地管理视频发布内容了。</p><h2>总结</h2><p>我们回顾一下这节课的内容。这节课我们一起设计并实现了视频发布功能，这是视频平台里最核心的一个模块。</p><p>整个实现过程中，有三个核心知识需要我们重点关注。</p><p>第一，在功能开发前的设计环节中，一定要明确<strong>页面呈现形式和对应的属性字段</strong>。比如视频发布的字段，可以从功能开发和内容展示两个维度考虑，确保功能的完整性。</p><p>第二，组件的使用。这节课我们又接触到了新组件，灵活应用组件能够帮我们快速开发功能，提升工作效率。对于组件，我推荐的学习方法是根据Element官网的案例代码进行实践，只要你充分理解了组件的API，应用起来就非常容易。</p><p>第三是视频修改功能的实现，其实它的实现逻辑和新增视频类似，只不过多了一步提前获取修改数据。确定视频信息获取方法的时候，我们对比了接口调用和浏览器缓冲这两种方式，选择了安全性更好的第一种方式。</p><p>这几节课代码实战内容比重比较大，希望你课后多多上手练习，有什么疑问可以在留言区和我交流。</p><p>下节课，我们将会完成个人中心的另一个核心模块——数据中心，敬请期待。</p><h2>思考题</h2><p>如果想在表单中el-input组件中实现输入数字的验证功能，你有什么好办法？</p><p>欢迎你在留言区和我交流讨论。如果觉得这节课的内容对你有启发，也推荐你把这节课分享给更多朋友。</p>","comments":[{"had_liked":false,"id":374868,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1684541548,"is_pvip":false,"replies":[{"id":136779,"content":"1、Python可以很好地处理高并发，因为它本身就是一种高并发的编程语言，而且有很多用于处理并发的库和工具。像Flask框架，提供了很多用于处理并发的工具和库，如锁、队列、请求池等，这个是完全可以处理的。\n2、主要是修改视频的信息，你可以完全更换视频的所有信息，常规的操作是替换其中的一些描述信息，这个功能的需求你可以在开发中自己定义也是OK的。\n","user_name":"作者回复","user_name_real":"编辑","uid":3050845,"ctime":1684655978,"ip_address":"北京","comment_id":374868,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100546501,"comment_content":"Q1：python开发网站的话，能处理高并发吗？（是不是只适合小型、并发不高的网站？）\nQ2：“修改视频”，是修改视频信息吗？还是修改视频本身的内容？","like_count":1,"discussions":[{"author":{"id":3050845,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8d/5d/9a86007c.jpg","nickname":"Barry","note":"","ucode":"82175C78B4CAED","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":618859,"discussion_content":"1、Python可以很好地处理高并发，因为它本身就是一种高并发的编程语言，而且有很多用于处理并发的库和工具。像Flask框架，提供了很多用于处理并发的工具和库，如锁、队列、请求池等，这个是完全可以处理的。\n2、主要是修改视频的信息，你可以完全更换视频的所有信息，常规的操作是替换其中的一些描述信息，这个功能的需求你可以在开发中自己定义也是OK的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1684655978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":374796,"user_name":"BigData～兰兴星","can_delete":false,"product_type":"c1","uid":2275664,"ip_address":"江苏","ucode":"2D0CF9BCFF2493","user_header":"https://static001.geekbang.org/account/avatar/00/22/b9/50/30eea9a0.jpg","comment_is_top":false,"comment_ctime":1684453207,"is_pvip":false,"replies":[{"id":136769,"content":"可以的，之后再合适的时间节点可以加一节，我们一起来交流学习一下视频的审核机制和实现方式，期望对你有所帮助，一起加油。\n","user_name":"作者回复","user_name_real":"编辑","uid":3050845,"ctime":1684510626,"ip_address":"北京","comment_id":374796,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100546501,"comment_content":"老师，用户发布视频后如何审核这能不能加一期学习一下","like_count":1,"discussions":[{"author":{"id":3050845,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8d/5d/9a86007c.jpg","nickname":"Barry","note":"","ucode":"82175C78B4CAED","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":618763,"discussion_content":"可以的，之后再合适的时间节点可以加一节，我们一起来交流学习一下视频的审核机制和实现方式，期望对你有所帮助，一起加油。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1684510627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381490,"user_name":"zgy","can_delete":false,"product_type":"c1","uid":1387798,"ip_address":"上海","ucode":"05EA6845199250","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/16/b525a71d.jpg","comment_is_top":false,"comment_ctime":1695284125,"is_pvip":false,"replies":[{"id":138979,"content":"使用的阿里云。","user_name":"作者回复","user_name_real":"编辑","uid":3050845,"ctime":1695391016,"ip_address":"北京","comment_id":381490,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100546501,"comment_content":"用的是哪个平台的云点播","like_count":0,"discussions":[{"author":{"id":3050845,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8d/5d/9a86007c.jpg","nickname":"Barry","note":"","ucode":"82175C78B4CAED","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628511,"discussion_content":"使用的阿里云。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695391016,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}