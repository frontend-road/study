{"id":160981,"title":"01 | 为什么说每个程序员都要尽早地学习并掌握设计模式相关知识？","content":"<p>我相信，很多程序员都已经意识到基础知识的重要性，觉得要夯实基础，才能走得更远，但同时对于如何将基础知识转化成开发“生产力”仍然有些疑惑。所以，你可能看了很多基础的书籍，比如操作系统、组成原理、编译原理等，但还是觉得很迷茫，觉得在开发中用不上，起码在平时的CRUD业务开发中用不上。实际上，这些基础的知识确实很难直接转化成开发“生产力”。但是，它能潜移默化地、间接地提高你对技术的理解。</p><p>不过，我觉得，设计模式和操作系统、组成原理、编译原理等这些基础学科是不一样的。它虽然也算是一门基础知识，但是它和数据结构、算法更像是一道儿的，相比那些更加基础的学科，设计模式能更直接地提高你的开发能力。我在开篇词里也说了，如果说数据结构和算法是教你如何写出高效代码，那设计模式讲的是如何写出可扩展、可读、可维护的高质量代码，所以，它们跟平时的编码会有直接的关系，也会直接影响到你的开发能力。</p><p>不过，你可能还是会觉得设计模式是把屠龙刀，看起来很厉害，但平时的开发根本用不上。基于这种观点，接下来，我们就具体地聊一聊，我们为什么要学习设计模式？</p><h2>1. 应对面试中的设计模式相关问题</h2><p>学习设计模式和算法一样，最功利、最直接的目的，可能就是应对面试了。</p><!-- [[[read_end]]] --><p>不管你是前端工程师、后端工程师，还是全栈工程师，在求职面试中，设计模式问题是被问得频率比较高的一类问题。特别是一些像BAT、TMD这样的大公司，比较重视候选人的基本功，经常会拿算法、设计模式之类的问题来考察候选人。</p><p>所以，我在求职面试的时候，都会提前准备、温习一遍设计模式。尽管并不是每次面试都会被问到，但一旦被问到，如果回答得不好，就是一个败笔，这场面试基本上也就凉凉了。所以，为了保证万无一失，摆脱一旦被问到答不出来的窘境，对于设计模式这种大概率被问到的问题，我都会未雨绸缪，提前准备一下。</p><p>当然，我并不是临时抱佛脚。我平时就比较重视设计模式相关知识的积累，所以底子比较好，只需要在每次面试前花很短的时间，重新温习一下，便可以自信满满地去面试，而不是心里老是担心被问到，影响正常的面试发挥。</p><p>所以，如果你也不想让设计模式相关问题成为你面试中的短板，那跟着我把专栏中的知识点都搞清楚，以后面试再遇到设计模式相关的问题，就不会惧怕了，甚至还会成为你面试中的亮点。</p><h2>2. 告别写被人吐槽的烂代码</h2><p>我们经常说，“Talk is cheap，show me the code。”实际上，代码能力是一个程序员最基础的能力，是基本功，是展示一个程序员基础素养的最直接的衡量标准。你写的代码，实际上就是你名片。</p><p>尽管我已经工作近十年，但我一直没有脱离编码一线，现在每天也都在坚持写代码、review指导同事写代码、重构遗留系统的烂代码。这些年的工作经历中，我见过太多的烂代码，比如命名不规范、类设计不合理、分层不清晰、没有模块化概念、代码结构混乱、高度耦合等等。这样的代码维护起来非常费劲，添加或者修改一个功能，常常会牵一发而动全身，让你无从下手，恨不得将全部的代码删掉重写！</p><p>当然，在这些年的工作经历中，我也看到过很多让我眼前一亮的代码。每当我看到这样的好代码，都会立刻对作者产生无比的好感和认可。且不管这个人处在公司的何种级别，从代码就能看出，他是一个基础扎实的高潜员工，值得培养，前途无量！因此，代码写得好，能让你在团队中脱颖而出。</p><p>所以，我的专栏，不仅仅只是讲解设计模式，更加重要的是，我会通过实战例子，手把手教你如何避免刚刚提到的代码问题，告别被人诟病的烂代码，写出令人称道的好代码，成为团队中的代码标杆！而且，写出一份漂亮的代码，你自己也会很有成就感。</p><h2>3. 提高复杂代码的设计和开发能力</h2><p>大部分工程师比较熟悉的都是编程语言、工具、框架这些东西，因为每天的工作就是在框架里根据业务需求，填充代码。实际上，我刚工作的时候，也是做这类事情。相对来说，这样的工作并不需要你具备很强的代码设计能力，只要单纯地能理解业务，翻译成代码就可以了。</p><p>但是，有一天，我的leader让我开发一个跟业务无关的比较通用的功能模块，面对这样稍微复杂的代码设计和开发，我就发现我有点力不从心，不知从何下手了。因为我知道只是完成功能、代码能用，可能并不复杂，但是要想写出易扩展、易用、易维护的代码，并不容易。</p><p>如何分层、分模块？应该怎么划分类？每个类应该具有哪些属性、方法？怎么设计类之间的交互？该用继承还是组合？该使用接口还是抽象类？怎样做到解耦、高内聚低耦合？该用单例模式还是静态方法？用工厂模式创建对象还是直接new出来？如何避免引入设计模式提高扩展性的同时带来的降低可读性问题？……各种问题，一下子挤到了我面前。</p><p>而我当时并没有对设计模式相关的知识（包括设计模式、设计原则、面向对象设计思想等）有太多的了解和积累，所以一时间搞得我手足无措。好在因此我意识到了这方面知识的重要性，所以在之后很多年的开发中，我都一直刻意锻炼、积累这方面的能力。面对复杂代码、功能、系统的设计和开发，我也越来越得心应手，游刃有余。写出高质量代码已经成为了我的习惯，不经意间写出来的代码，都能作为同事学习、临摹的范例，这也成为了我职场中最引以为豪的亮点之一。</p><h2>4. 让读源码、学框架事半功倍</h2><p>对于一个有追求的程序员来说，对技术的积累，既要有广度，也要有深度。很多技术人早早就意识到了这一点，所以在学习框架、中间件的时候，都会抽空去研究研究原理，读一读源码，希望能在深度上有所积累，而不只是略知皮毛，会用而已。</p><p>从我的经验和同事的反馈来看，有些人看源码的时候，经常会遇到看不懂、看不下去的问题。不知道你有没有遇到过这种情况？实际上，这个问题的原因很简单，那就是你积累的基本功还不够，你的能力还不足以看懂这些代码。为什么我会这么说呢？</p><p>优秀的开源项目、框架、中间件，代码量、类的个数都会比较多，类结构、类之间的关系极其复杂，常常调用来调用去。所以，为了保证代码的扩展性、灵活性、可维护性等，代码中会使用到很多设计模式、设计原则或者设计思想。如果你不懂这些设计模式、原则、思想，在看代码的时候，你可能就会琢磨不透作者的设计思路，对于一些很明显的设计思路，你可能要花费很多时间才能参悟。相反，如果你对设计模式、原则、思想非常了解，一眼就能参透作者的设计思路、设计初衷，很快就可以把脑容量释放出来，重点思考其他问题，代码读起来就会变得轻松了。</p><p>实际上，除了看不懂、看不下去的问题，还有一个隐藏的问题，你可能自己都发现不了，那就是你自己觉得看懂了，实际上，里面的精髓你并没有get到多少！因为优秀的开源项目、框架、中间件，就像一个集各种高精尖技术在一起的战斗机。如果你想剖析它的原理、学习它的技术，而你没有积累深厚的基本功，就算把这台战斗机摆在你面前，你也不能完全参透它的精髓，只是了解个皮毛，看个热闹而已。</p><p>因此，学好设计模式相关的知识，不仅能让你更轻松地读懂开源项目，还能更深入地参透里面的技术精髓，做到事半功倍。</p><h2>5. 为你的职场发展做铺垫</h2><p>普通的、低级别的开发工程师，只需要把框架、开发工具、编程语言用熟练，再做几个项目练练手，基本上就能应付平时的开发工作了。但是，如果你不想一辈子做一个低级的码农，想成长为技术专家、大牛、技术leader，希望在职场有更高的成就、更好的发展，那就要重视基本功的训练、基础知识的积累。</p><p>你去看大牛写的代码，或者优秀的开源项目，代码写得都非常的优美，质量都很高。如果你只是框架用得很溜，架构聊得头头是道，但写出来的代码很烂，让人一眼就能看出很多不合理的、可以改进的地方，那你永远都成不了别人心目中的“技术大牛”。</p><p>再者，在技术这条职场道路上，当成长到一定阶段之后，你势必要承担一些指导培养初级员工、新人，以及code review的工作。这个时候，如果你自己都对“什么是好的代码？如何写出好的代码？”不了解，那又该如何指导别人，如何让人家信服呢？</p><p>还有，如果你是一个技术leader，负责一个项目整体的开发工作，你就需要为开发进度、开发效率和项目质量负责。你也不希望团队堆砌垃圾代码，让整个项目无法维护，添加、修改一个功能都要费老大劲，最终拉低整个团队的开发效率吧？</p><p>除此之外，代码质量低还会导致线上bug频发，排查困难。整个团队都陷在成天修改无意义的低级bug、在烂代码中添补丁的事情中。而一个设计良好、易维护的系统，可以解放我们的时间，让我们做些更加有意义、更能提高自己和团队能力的事情。</p><p>最后，当你成为leader、或者团队中的资深工程师、技术专家之后，你势必要负责一部分团队的招聘工作。这个时候，如果你要考察候选人的设计能力、代码能力，那设计模式相关的问题便是一个很好的考察点。</p><p>不过，我也了解到，很多面试官实际上对设计模式也并不是很了解，只能拿一些简单的单例模式、工厂模式来考察候选人，而且所出的题目往往都脱离实践，比如，如何设计一个餐厅系统、停车场系统、售票系统等。这些题目都是网上万年不变的老题目，几乎考察不出候选人的能力。在我的专栏中，有200多个真实项目开发中的设计模式相关问题，你跟着看下来，足以让你成为设计模式方面的大牛，再来面试候选人的时候，就不用因为题目老套、脱离实践而尴尬了！</p><h2>重点回顾</h2><p>今天，我们讲了为什么要学习设计模式相关的知识，总结一下的话，主要有这样五点：应对面试中的设计模式相关问题；告别写被人吐槽的烂代码；提高复杂代码的设计和开发能力；让读源码、学框架事半功倍；为你的职场发展做铺垫。</p><p>投资要趁早，这样我们才能尽早享受复利。同样，有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读。这样在你后面的生活、工作、学习中，才能一直都发挥作用。不要等到好多年后，看到了，才恍然大悟，后悔没有早点去学、去看。</p><p>设计模式作为一门与编码、开发有着直接关系的基础知识，是你现在就要开始学习的。早点去学习，以后的项目就都可以拿来锻炼，每写一行代码都是对内功的利用和加深，是可以受益一整个职业生涯的事情。</p><h2>课堂讨论</h2><p>今天课堂讨论的话题有两个：</p><ol>\n<li>聊一聊你对设计模式相关知识的重要性的看法；</li>\n<li>在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？</li>\n</ol><p>欢迎在留言区发表你的观点，积极参与讨论。你也可以把这篇文章分享给你的朋友，邀请他一起学习。</p>","neighbors":{"left":{"article_title":"开篇词 | 一对一的设计与编码集训，让你告别没有成长的烂代码！","id":160463},"right":{"article_title":"02 | 从哪些维度评判代码质量的好坏？如何具备写出高质量代码的能力？","id":160985}},"comments":[{"had_liked":false,"id":147375,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1572861327,"is_pvip":false,"discussion_count":25,"race_medal":0,"score":"1152624096655","product_id":100039001,"comment_content":"笔记：<br>1 作者反复解释了下学好dp 的重要性。<br>映像深刻的：<br>基本功不够，把一台战斗机放你面前，你都不知道如何欣赏和品味。<br>其它职能：<br>1 面试所需（适当的区分度）<br>2 告别烂代码，让实现优雅起来。老司机后，要参与指导菜鸟，也要会。<br>3 show me the code ,你牛不牛，终归还需要代码的展现，把框架说得头头是道又如何，技术看技术，硬核不行，外表的东西白搭。没法成为别人心中的大牛的。<br><br>作业：聊看法。<br>一句话，简直太tmd 的重要了。<br><br>以前重构过一个p2p 客户投资后奖励活动【放心，平台未跑路，老板是用心做事的人】。  刚开始，他们真的是 if eles 的去写每一个活动。<br>我去了后。主要就是参考yii 框架的实现方法。<br>做了以下解藕，把购买后的奖励分为四块。<br>通过配置 rules 来确认是否有奖励资格。    【首次，】<br>清算出奖多少，奖给谁（通常会带上推荐人）【固定额，阶梯算法，比例值，vip 等级等】<br>创建出奖励执行类， （红包，现金，抽奖券 ， 积分等） 并执行奖励<br>发送通知  （站内信，短信，微信，邮件 ， ） （通知会在通知里挂接广告）<br>离开那公司时特意查了一下，公司共发布了1700 条个奖励项，给客户返利约900 万。<br>","like_count":269,"discussions":[{"author":{"id":1042354,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e7/b2/334bc992.jpg","nickname":"AlfredLover","note":"","ucode":"A3A998F362CC37","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219588,"discussion_content":"这家公司现在跑路了吗","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1585787058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1862936,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/6d/18/e05f72ee.jpg","nickname":"冰原的苍蓝星","note":"","ucode":"84120EC31A63AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":254068,"discussion_content":"看完作者前两篇，我连你说的dp是啥都没知道","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1588293542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1023885,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9f/8d/d725d32c.jpg","nickname":"李德政","note":"","ucode":"3AC49F5671485C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1862936,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/6d/18/e05f72ee.jpg","nickname":"冰原的苍蓝星","note":"","ucode":"84120EC31A63AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267523,"discussion_content":"Design pattern？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1589643060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":254068,"ip_address":""},"score":267523,"extra":""},{"author":{"id":1547667,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9d/93/4159edaa.jpg","nickname":"朴素柠檬c","note":"","ucode":"2D4CBB70D801B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1023885,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/9f/8d/d725d32c.jpg","nickname":"李德政","note":"","ucode":"3AC49F5671485C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324637,"discussion_content":"这个DP缩写 简直了","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1605146738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":267523,"ip_address":""},"score":324637,"extra":""}]},{"author":{"id":2555790,"avatar":"https://static001.geekbang.org/account/avatar/00/26/ff/8e/b16d75c6.jpg","nickname":"Yuki","note":"","ucode":"936E2C34F16B72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368605,"discussion_content":"还以为是dp算法。。。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1618758332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51001,"discussion_content":"所以实战才是对代码的尊重，设计模式在实战中提现，真的是太棒了。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1573798034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1547667,"avatar":"https://static001.geekbang.org/account/avatar/00/17/9d/93/4159edaa.jpg","nickname":"朴素柠檬c","note":"","ucode":"2D4CBB70D801B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":324638,"discussion_content":"不写代码吓逼逼的程序员都是废物","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605146763,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51001,"ip_address":""},"score":324638,"extra":""}]},{"author":{"id":1182984,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0d/08/2f825f69.jpg","nickname":"丁源(156*****518)","note":"","ucode":"BDBB8B7D0745FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46407,"discussion_content":"期待作者给出一些够味的设计范例","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573167378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1182984,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0d/08/2f825f69.jpg","nickname":"丁源(156*****518)","note":"","ucode":"BDBB8B7D0745FC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46427,"discussion_content":"me 2","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573170127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":46407,"ip_address":""},"score":46427,"extra":""}]},{"author":{"id":1243370,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f8/ea/98738420.jpg","nickname":"Jaswine","note":"","ucode":"EE39D9629204DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44966,"discussion_content":"规则引擎？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572996393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2848276,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIRrgrGQYmic2V6bkmbtfXXrsjk3boxpt8KyBuQvazSVHpvtzzvdT4p192jdG5JgIN1nPVziav8Auew/132","nickname":"Geek_38d160","note":"","ucode":"AE3588D61FBB6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536815,"discussion_content":"还以为出bug了，怎么把算法那边的评论带过来了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638874556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024294,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","nickname":"null","note":"","ucode":"F9039EFED6B55D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45096,"discussion_content":"好巧，我也重构过类似项目，用户匹配规则，奖励下发内容，通知机制，都抽象出来，只留下几个不可变的逻辑代码类。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573003789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2044957,"avatar":"","nickname":"coc","note":"","ucode":"64FC186B1055B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578648,"discussion_content":"现在应该是跑路了，全国的P2P已经清空了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656922894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1045577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f4/49/2add4f6b.jpg","nickname":"北极的大企鹅","note":"","ucode":"8935346D08E109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":354294,"discussion_content":"dp\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615269686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1441810,"avatar":"https://static001.geekbang.org/account/avatar/00/16/00/12/7048984b.jpg","nickname":"Krystal","note":"","ucode":"A8986403DE927C","race_medal":3,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297703,"discussion_content":"我以为是深度优先","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597027718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2056201,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/60/09/a8e7913b.jpg","nickname":"SandCarving","note":"","ucode":"6B97DB71613A46","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1441810,"avatar":"https://static001.geekbang.org/account/avatar/00/16/00/12/7048984b.jpg","nickname":"Krystal","note":"","ucode":"A8986403DE927C","race_medal":3,"user_type":1,"is_pvip":true},"discussion":{"id":340692,"discussion_content":"深度优先是df吧，应该是动态规划🆗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610099134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297703,"ip_address":""},"score":340692,"extra":""},{"author":{"id":1194060,"avatar":"https://static001.geekbang.org/account/avatar/00/12/38/4c/5426e2e0.jpg","nickname":"CJJ","note":"","ucode":"7E02A6A8547559","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":2056201,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/60/09/a8e7913b.jpg","nickname":"SandCarving","note":"","ucode":"6B97DB71613A46","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345780,"discussion_content":"这里的dp是指设计模式吧哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611794467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":340692,"ip_address":""},"score":345780,"extra":""},{"author":{"id":2446982,"avatar":"https://static001.geekbang.org/account/avatar/00/25/56/86/db4c0d1c.jpg","nickname":"ljx","note":"","ucode":"6133FC98C44498","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1441810,"avatar":"https://static001.geekbang.org/account/avatar/00/16/00/12/7048984b.jpg","nickname":"Krystal","note":"","ucode":"A8986403DE927C","race_medal":3,"user_type":1,"is_pvip":true},"discussion":{"id":350103,"discussion_content":"难道不是动态规划吗😂 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613709214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297703,"ip_address":""},"score":350103,"extra":""}]},{"author":{"id":1055624,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1b/88/ac69f57a.jpg","nickname":"磉盘","note":"","ucode":"1C245991F30A73","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47658,"discussion_content":"作业部分怎么体现出设计模式的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573386949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1736485,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/7f/25/f6c3a5d8.jpg","nickname":"符明明","note":"","ucode":"44028EA9967627","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45910,"discussion_content":"1. 我不会写大型程序。2. 没有。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573097124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1566477,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e7/0d/506bd8d1.jpg","nickname":"蝈蝈不是蛐蛐","note":"","ucode":"ADE5747408081A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1736485,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/7f/25/f6c3a5d8.jpg","nickname":"符明明","note":"","ucode":"44028EA9967627","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300793,"discussion_content":"������������","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598264937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":45910,"ip_address":""},"score":300793,"extra":""}]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45417,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573036653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1577856,"avatar":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","nickname":"L🚲🐱","note":"","ucode":"08A012739614DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43424,"discussion_content":"设计模式和算法数据结构一样重要，只用过单例和工厂模式， 在争哥的带领下好好学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572873904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1577856,"avatar":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","nickname":"L🚲🐱","note":"","ucode":"08A012739614DE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43430,"discussion_content":"一起加油","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1572874129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":43424,"ip_address":""},"score":43430,"extra":""},{"author":{"id":1577856,"avatar":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","nickname":"L🚲🐱","note":"","ucode":"08A012739614DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1661704,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","nickname":"丁丁历险记","note":"","ucode":"A43829E454C067","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50054,"discussion_content":"嗯嗯 一起加油","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573658993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":43430,"ip_address":""},"score":50054,"extra":""}]}]},{"had_liked":false,"id":147474,"user_name":"嚴脂红.*","can_delete":false,"product_type":"c1","uid":1017900,"ip_address":"","ucode":"D27D807AA334E4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/2c/87861bb1.jpg","comment_is_top":false,"comment_ctime":1572865811,"is_pvip":true,"discussion_count":7,"race_medal":0,"score":"547033712403","product_id":100039001,"comment_content":"做游戏开发相关的工作，日常用到非常多的设计模式，比如:<br><br>对于游戏的设置，ui和scene等等各种manager管理类都要用到单例模式。<br>创建游戏中各种角色的各种工厂模式还有对象池。<br>处理游戏角色的各种状态的有限状态机要用到状态模式。<br>在优化复杂游戏场景时会用到享元模式。<br>还有游戏引擎本身就用到的组件模式。<br>......","like_count":127,"discussions":[{"author":{"id":1693576,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d7/88/7dcde249.jpg","nickname":"庄周梦蝶","note":"","ucode":"7878ED3EB11E97","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353025,"discussion_content":"感觉很少用到设计模式，主要是做业务开发，增删改查，用了ssm加常用中间件即可满足需要，把数据库表结构设计好就行。没用设计模式也没发现有什么不妥。有的生般应套的设计模式反而把代码搞复杂了，变得也不灵活。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1614953438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","nickname":"o0oi1i","note":"","ucode":"D1F6AD4AAEAFBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214586,"discussion_content":"这么🐂佰了还来学？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585211545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51002,"discussion_content":"设计模式太TMD实用了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573798058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323868,"avatar":"https://static001.geekbang.org/account/avatar/00/14/33/5c/8c0a372a.jpg","nickname":"Fourty Seven","note":"","ucode":"DD213225842F68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45301,"discussion_content":"这些都是常用的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573020462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2862349,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL7iccMa4yaKJyLyibysdJBiaodgMickvdCxc58knqcHibDBdBK3WDhPHOAXia7E1BZ7gba4bph6FwaN7sw/132","nickname":"之一","note":"","ucode":"F58398575F85F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544542,"discussion_content":"一直尝试状态机，从来用不好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641555633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1051563,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0b/ab/0e2857e5.jpg","nickname":"Coding小先","note":"","ucode":"965B1CC757E026","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320320,"discussion_content":"嘻嘻，我现在也在一个小游戏公司","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604319278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809792,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/80/f4fa8503.jpg","nickname":"cowboy","note":"","ucode":"B4ACE80915EB0D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276587,"discussion_content":"同行一起进步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590908476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147775,"user_name":"jony","can_delete":false,"product_type":"c1","uid":1048286,"ip_address":"","ucode":"80765A6B9ABA0D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/de/2019f370.jpg","comment_is_top":false,"comment_ctime":1572886100,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"474019288660","product_id":100039001,"comment_content":"设计模式，两眼一抹黑，从0开始","like_count":110,"discussions":[{"author":{"id":2331450,"avatar":"","nickname":"Geek_1a6406","note":"","ucode":"5A09F17C35B85B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327498,"discussion_content":"解藕，边界划分，让代码易于维护","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605851303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147566,"user_name":"乐","can_delete":false,"product_type":"c1","uid":1049576,"ip_address":"","ucode":"4505CB6BD9C144","user_header":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","comment_is_top":false,"comment_ctime":1572870278,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"366645090438","product_id":100039001,"comment_content":"个人认为设计模式主要解决的是扩展和耦合问题<br><br>日常使用：<br><br>使用代理模式进行共性化处理，比如说 AOP 思想，将非业务功能和业务功能解耦<br><br>* 事务的处理@Translation<br>* 系统间上下文的传递 ThreadLocal + restTemplate#intercept 等等<br><br>使用工厂 + 策略<br><br>* 不同优惠种类的计算<br>* 定制化功能的解耦<br><br>观察者模式：这个模式的思想，我觉得非常的重要，你可以在许多中间件（mq、zookeeper、netty 等等）乃至生活中都能看到它的影子<br><br>* 通过领域事件解耦业务<br>* 理解 eventloop、epoll 等等<br>* 通过 watch 实现动态配置、HA 等等<br><br>责任链模式：pipeline 思想<br><br>* filter<br>* 理解 netty 中的各种 handler","like_count":86,"discussions":[{"author":{"id":1335474,"avatar":"https://static001.geekbang.org/account/avatar/00/14/60/b2/ccebcb71.jpg","nickname":"不学不行啊","note":"","ucode":"69368165141C2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210016,"discussion_content":"都这么厉害了，还要买课么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584701856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234314,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d5/8a/7050236a.jpg","nickname":"东征","note":"","ucode":"DC557A1631A493","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44886,"discussion_content":"还有重用代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572970786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151500,"user_name":"摸爬滚打三十年","can_delete":false,"product_type":"c1","uid":1240241,"ip_address":"","ucode":"764A7F920EC304","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/b1/d790b927.jpg","comment_is_top":false,"comment_ctime":1573731673,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"336581180761","product_id":100039001,"comment_content":"关于为什么早学设计模式我很有发言权，我们公司的食堂有一道名菜:肥牛金针菇，去的早的吃肥牛，去的晚的吃金针菇。","like_count":78,"discussions":[{"author":{"id":2226367,"avatar":"https://static001.geekbang.org/account/avatar/00/21/f8/bf/59f2e600.jpg","nickname":"月明风清","note":"","ucode":"65A97CF2E320FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575895,"discussion_content":"笑死我了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655175187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3015503,"avatar":"","nickname":"Geek_08a0f7","note":"","ucode":"C2D78F6B714B88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573993,"discussion_content":"人才！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653788860,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2820671,"avatar":"","nickname":"require","note":"","ucode":"3AA3DCE0CD73E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542072,"discussion_content":"有画面感了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640658560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1103353,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d5/f9/1f9a2c3c.jpg","nickname":"磨砖做镜","note":"","ucode":"D8B8196AE1ED98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249498,"discussion_content":"是啊，来的早吃肉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587944678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147472,"user_name":"梁军","can_delete":false,"product_type":"c1","uid":1521145,"ip_address":"","ucode":"81E22EFAFD77B4","user_header":"https://static001.geekbang.org/account/avatar/00/17/35/f9/7a682fc1.jpg","comment_is_top":false,"comment_ctime":1572865716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"203436328628","product_id":100039001,"comment_content":"个人感觉，设计模式和数据结构算法结合，再去读源码或者框架，很清晰，一个招式一个内功","like_count":47},{"had_liked":false,"id":147613,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1572873270,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"181961499702","product_id":100039001,"comment_content":"1.设计模式很主要，很主要，很主要。他是一个能够长久迭代开发的必要条件，也是一个提高开发效率的必要条件。当我第一次用设计模式的时候我激动的一晚上没睡好，反反复复去看我的代码，喜欢的不得了。我会对照我的代码思考需求变更我的代码应该改什么，那种解耦合，可扩展的架构真的喜欢！！！<br><br>2.单例、工厂、模板、策略<br>基本的套路就是：单例的工厂类负责创建策略类，但是每个策略类都有共同特性，所以用到了模板模式。<br>类关系就是每个策略类实现策略接口并继承模板类。交由单例的工厂来管理。<br>也有人说这就是模板。跟策略没关，但我认为确实也是策略。<br>场景:医疗系统，药品分为中药，西药，医疗器械等等不同类别，每种类别计算价格方式由相同的算法和不同的算法组成，所以我用了模板和策略。👀<br>补充：其实最后我发现spring有依赖搜索，直接注入map就行了。完全不用自己写工厂管理😂😂😂","like_count":42,"discussions":[{"author":{"id":2356993,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/KMVyjF3bDDa7oot4QVWiaiaicMho9JtZ2E8nWqK8562B6HEicOwyfmAGwocLsvTMMnqWqEob5BrlI0OJpTvLMx7U5Q/132","nickname":"Geek_c7292f","note":"","ucode":"BB6F9413C0A0D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335096,"discussion_content":"看来你的编码热情非常高，我欣赏你","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1608090975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2882086,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/fa/26/a38f4b5d.jpg","nickname":"jl","note":"","ucode":"3EC1591B396600","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543334,"discussion_content":"我也想获得这种快乐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641093908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1122533,"avatar":"https://static001.geekbang.org/account/avatar/00/11/20/e5/f66d6144.jpg","nickname":"九先生","note":"","ucode":"A63A333299D485","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385678,"discussion_content":"当年我也是这样，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627203732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1363834,"avatar":"https://static001.geekbang.org/account/avatar/00/14/cf/7a/51951b07.jpg","nickname":"微笑","note":"","ucode":"6E8E2964D0191F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51681,"discussion_content":"哈哈  感觉单例  直接用注解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573914926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1593289,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","nickname":"编程界的小学生","note":"","ucode":"4A5BE9A5E877FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1363834,"avatar":"https://static001.geekbang.org/account/avatar/00/14/cf/7a/51951b07.jpg","nickname":"微笑","note":"","ucode":"6E8E2964D0191F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51704,"discussion_content":"被spring管理的可以直接一个注解，不被spring管理的就需要手动写了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573916381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51681,"ip_address":""},"score":51704,"extra":""}]}]},{"had_liked":false,"id":147351,"user_name":"谭棋钊","can_delete":false,"product_type":"c1","uid":1237976,"ip_address":"","ucode":"F7F982BE5978BA","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/d8/bc70f34a.jpg","comment_is_top":false,"comment_ctime":1572860471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"143306781239","product_id":100039001,"comment_content":"只用过单例","like_count":33},{"had_liked":false,"id":150109,"user_name":"吉吉","can_delete":false,"product_type":"c1","uid":1126111,"ip_address":"","ucode":"5A5DAB5B49D0F1","user_header":"https://static001.geekbang.org/account/avatar/00/11/2e/df/59725073.jpg","comment_is_top":false,"comment_ctime":1573462986,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"100357710794","product_id":100039001,"comment_content":"1、设计模式的重要性看法：<br>(1)可以使得代码编写更优雅<br>(2)对学习一些开源框架有很大帮助<br>(3)程序的可扩展性、维护性更好，系统解耦<br>2、基于上面的看法结合实际项目说明：<br>(1)在新老系统接割的项目中，进行数据回写，用到了策略模式，根据不同的接口码值，进行不同的策略回写。<br>(2)在银行前置系统中，用到了模板设计模式，对接不同的三方通道，在模板中定义某些特定的步骤，并加上hook，具体步骤子类实现。<br>(3)责任链模式，在网关系统中用到的filter就是责任链模式，把一个请求依次的在过滤器链上进行传输<br>(4)装饰器模式，在普通的微服务提供的restful接口中，在请求返回的时给对象添加一些额外的职责<br>(5)门面设计模式，对外提供统一的接口，例如在springcloud中提供统一的feinclient接口，所有外部系统都通过feinclient接口进行接入，从而不关心内部接口的调用实现。<br>(6)还有命令设计模式，原来在看工作流的时候不知道这个模式，看的云里雾里，后来才知道原来整个框架用到了命令设计模式，一下子就明朗了很多。所以学习设计模式很重要。<br>还有单例模式、工厂模式等，以上大概就是在工作中用到的设计模式，分享一下，如有不对请指正。","like_count":23},{"had_liked":false,"id":147544,"user_name":"仰望星空","can_delete":false,"product_type":"c1","uid":1117087,"ip_address":"","ucode":"4EA928AC927055","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/9f/788b964e.jpg","comment_is_top":false,"comment_ctime":1572869144,"is_pvip":false,"replies":[{"id":"56964","content":"函数式编程感觉还是没面向对象流行 所以专栏中没讲","user_name":"作者回复","comment_id":147544,"uid":"1190123","ip_address":"","utype":1,"ctime":1572922845,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"87472215064","product_id":100039001,"comment_content":"老师能不能讲讲函数式编程思想，设计模式都是基于面向对象的，而现在更流行函数式编程。","like_count":20,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473261,"discussion_content":"函数式编程感觉还是没面向对象流行 所以专栏中没讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572922845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1274328,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLicryBoLjDicckia0c5bkOoAlYoR2I9NMK8BiaD7HCGxhS1eM9YSfDuUJuZC90uwv9FvHIVSsBoxFgZw/132","nickname":"MwumLi","note":"","ucode":"9A8A72334ADF6E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51719,"discussion_content":"觉得可可以单独一篇进行对比一下","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573917455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479082,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/aa/374cc963.jpg","nickname":"流水人家","note":"","ucode":"9BB4367CAAF781","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43436,"discussion_content":"函数式编程和面向对象不冲突吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572874423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147753,"user_name":"大王拍我去巡山","can_delete":false,"product_type":"c1","uid":1067406,"ip_address":"","ucode":"94A1EE540BC9CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/8e/e6eaf434.jpg","comment_is_top":false,"comment_ctime":1572883537,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"70292360273","product_id":100039001,"comment_content":"CRUD写的太多了， 通过设计模式也能简化业务代码，释放生产力。期望能多有些代码场景的演练，跟随学习","like_count":16},{"had_liked":false,"id":147645,"user_name":"汤小高","can_delete":false,"product_type":"c1","uid":1555565,"ip_address":"","ucode":"D4AB7766273D52","user_header":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","comment_is_top":false,"comment_ctime":1572875890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"65997385330","product_id":100039001,"comment_content":"课后讨论：我的看法<br>1.聊一聊你对设计模式相关知识的重要性的看法；<br>（1）设计模式能让程序员编写出可读性高，易维护，易拓展的代码，避免烂代码。<br>（2）利用好设计模式能让复杂功能的设计的代码可复用性，可拓展性，可维护性，可读性更高。达到高内聚、低耦合的目的。<br>（3）设计模式能提高程序员的自我修养<br><br>2.在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>用到过模板模式，单例模式。<br>2.1）模板模式应用场景：在一个项目的规则引擎中，一个规则引擎有一系列规则过滤，这个过滤步骤基本上是确定的，只是某些步骤在不同的场景下需要相互替换，模板方法定义了方法调用顺序，需要用到一个钩子，让子类去实现这个方法。<br>模板模式解决问题：解决了以后可拓展的问题，如果以后需要在新场景下新增规则方法，只需新增一个类，实现钩子方法即可，不需改动既有代码。<br>2.2）单例模式应用场景：用于加载项目中需要的配置文件的资源类。<br>单例模式解决问题：解决了资源共用，避免创建出大量资源对象，节省了JVM内存资源。<br>","like_count":15},{"had_liked":false,"id":147458,"user_name":"帆大肚子","can_delete":false,"product_type":"c1","uid":1529040,"ip_address":"","ucode":"3DB11DB2FA1802","user_header":"https://static001.geekbang.org/account/avatar/00/17/54/d0/4e1fc664.jpg","comment_is_top":false,"comment_ctime":1572864916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61702407060","product_id":100039001,"comment_content":"我是做iOS开发的，之前一直有了解过设计模式，也在自己的一个框架中应用了组合模式。<br><br>重要性那就更不用说了，上个坑是一个专门定制ERP的公司，需要从APP上录入很多信息。我接手的时候，准备一根绳子随时准备上吊。我就连类似于把姓名输入项和性别输入项换一个位置，都要换一个上午。\b<br>学习了设计模式之后，我对应公司的开发场景，应用组合等模式把公司的iOS开发组件化（最快的时候一天写了20个表单页面）。<br>虽然自己有学过，但是如王争老师所说的，自学的效果真的有些不尽人意，并缺少反馈。<br>熟悉OC的同学可以去看看我的作品，希望大家给予指点<br>https:&#47;&#47;github.com&#47;xiefans&#47;FFormLib<br>但是因为自己比较懒，没有给文档补全。","like_count":14},{"had_liked":false,"id":147389,"user_name":"SweetyTang","can_delete":false,"product_type":"c1","uid":1601101,"ip_address":"","ucode":"5EB1431FA66F1D","user_header":"https://static001.geekbang.org/account/avatar/00/18/6e/4d/22de9c0e.jpg","comment_is_top":false,"comment_ctime":1572861935,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"53112469487","product_id":100039001,"comment_content":"用的最多的是观察者模式，其它模式都不了解，有些太失败了😭😭😭","like_count":12,"discussions":[{"author":{"id":1126534,"avatar":"https://static001.geekbang.org/account/avatar/00/11/30/86/c4e4d753.jpg","nickname":"优雅一点","note":"","ucode":"DA9608594E7602","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43213,"discussion_content":"我连观察者模式都没用过","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1572863503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1601101,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6e/4d/22de9c0e.jpg","nickname":"SweetyTang","note":"","ucode":"5EB1431FA66F1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1126534,"avatar":"https://static001.geekbang.org/account/avatar/00/11/30/86/c4e4d753.jpg","nickname":"优雅一点","note":"","ucode":"DA9608594E7602","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43219,"discussion_content":"一起让争哥带飞 😃","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572863829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":43213,"ip_address":""},"score":43219,"extra":""}]},{"author":{"id":1258839,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/57/ab4ba792.jpg","nickname":"小鱼","note":"","ucode":"9F3D087A95D0C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51191,"discussion_content":"我做后端也经常用观察者模式啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573822445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134761,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","nickname":"冰糕不冰","note":"","ucode":"B754FE464BA426","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43343,"discussion_content":"做客户端开发的同学吧？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572869561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1601101,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6e/4d/22de9c0e.jpg","nickname":"SweetyTang","note":"","ucode":"5EB1431FA66F1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1134761,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","nickname":"冰糕不冰","note":"","ucode":"B754FE464BA426","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43406,"discussion_content":"嗯，你这都可以看出来，佩服","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572872433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":43343,"ip_address":""},"score":43406,"extra":""},{"author":{"id":1134761,"avatar":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","nickname":"冰糕不冰","note":"","ucode":"B754FE464BA426","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1601101,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6e/4d/22de9c0e.jpg","nickname":"SweetyTang","note":"","ucode":"5EB1431FA66F1D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43518,"discussion_content":"因为我们公司安卓经常给我说观察者模式，通知这个那个页面更新UI，哈哈。还有eventbus","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572879415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":43406,"ip_address":""},"score":43518,"extra":""}]}]},{"had_liked":false,"id":148271,"user_name":"时光之刃","can_delete":false,"product_type":"c1","uid":1083381,"ip_address":"","ucode":"0F15CAD70BDDC3","user_header":"https://static001.geekbang.org/account/avatar/00/10/87/f5/c6d1ffed.jpg","comment_is_top":false,"comment_ctime":1572966641,"is_pvip":true,"replies":[{"id":"57097","content":"可以的 我后面可以考虑多写几篇加餐","user_name":"作者回复","comment_id":148271,"uid":"1190123","ip_address":"","utype":1,"ctime":1572993697,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"48817606897","product_id":100039001,"comment_content":"希望老师能举一些开源代码中的设计模式，比如netty或者ES等","like_count":11,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473447,"discussion_content":"可以的 我后面可以考虑多写几篇加餐","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572993697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147748,"user_name":"条","can_delete":false,"product_type":"c1","uid":1203836,"ip_address":"","ucode":"6F8679175256E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/7c/94af3f5e.jpg","comment_is_top":false,"comment_ctime":1572883097,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40227588761","product_id":100039001,"comment_content":"1.个人觉得设计模式就是对一些写比较好的代码的总结，其实代码看的写的多了，也能写出自己的设计模式。<br>2.最近重构了一块生成excel的代码，因为相似的代码很多，就用到了简单工厂模式和策略模式，工厂模式让对象的创建更加明确，策略模式让代码的逻辑看起来更加清晰、也解决一些代码重复的问题。","like_count":9,"discussions":[{"author":{"id":1103353,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d5/f9/1f9a2c3c.jpg","nickname":"磨砖做镜","note":"","ucode":"D8B8196AE1ED98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249499,"discussion_content":"业务逻辑很容易重复，设计模式很适合用上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587944751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147367,"user_name":"彦祖","can_delete":false,"product_type":"c1","uid":1235159,"ip_address":"","ucode":"784CBB0C8BFD47","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/d7/21cc617d.jpg","comment_is_top":false,"comment_ctime":1572861110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35932599478","product_id":100039001,"comment_content":"之前读完了大话设计模式，入职新公司后，为了完成新的需求复用旧类，采用了模板方法模式。为了把那些好几百行的代码拆开重新梳理，也只是能用到建造者模式来解决方法参数贼多的问题。","like_count":8},{"had_liked":false,"id":149392,"user_name":"学好习，做好人","can_delete":false,"product_type":"c1","uid":1205294,"ip_address":"","ucode":"C991643DB458E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/2e/e70a317a.jpg","comment_is_top":false,"comment_ctime":1573208064,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31637979136","product_id":100039001,"comment_content":"第一个问题：之所以称为设计模式而不是设计模型，我觉得模式只是提供了一个解决某类问题的思路，不是一成不变的，要根据具体的场景来应用，而不是当作一个模型来生搬硬套，还有还有就是过多的套用设计模式有时候反而是问题变得复杂，所以设计模式很重要，他提供给我们解决某种问题的一个好的解决思路和方法，但是也要具体情况具体分析<br>第二个问题：模板模式和策略模式用的比较多，曾经解决过一个场景，入参是一样的，要根据参数中type字段不同的值解决不同的业务场景，源代码中充斥着大量的if..else.新增一种业务场景，需要修改源代码，明显不符合开闭原则，解决办法：使用策略模式解决，不同的type对应一个具体的策略，新增一个场景的时候，新增一个具体的策略类即可，不需要修改源代码了","like_count":7,"discussions":[{"author":{"id":2682755,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/hLuvmO25DGTicuebTcUkrNmFaUXjkvYsSDPBe978ElcgymEI2jEAs4OtMYC8iaU8FPPMFYUHOb8ALmIaVsRKdpNQ/132","nickname":"Geek_00f955","note":"","ucode":"666A6FE95D1D4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588783,"discussion_content":"恍恍惚惚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664109227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148269,"user_name":"于留月","can_delete":false,"product_type":"c1","uid":1048918,"ip_address":"","ucode":"DE3516198CF1B2","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/56/03fb63d9.jpg","comment_is_top":false,"comment_ctime":1572966552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31637737624","product_id":100039001,"comment_content":"设计模式的重要性：<br>1、提高设计和开发能力，从更高层次考虑问题：可读性、可维护性、可扩展性、模块化、组件化；<br>2、读源码、学框架，深有体会，Android源码到处充斥着各式各样的设计模式和设计原则；<br>3、职场发展，个人希望能够在架构和技术leader方面深入发展；<br>4、高质量代码，避免坏代码，不想被同行嘲笑，不想被同事鄙视，不想被后期维护的人吐槽，想被人称赞；<br>5、作为专业话术，更方便同行业间交流，更容易跟领导解释清楚，更轻松带领团队完成任务；<br><br>使用经验：<br><br>策略模式：<br>解决开发、测试、预发布、生产环境不同的数据来源、不同的数据处理方式，以及不同的图片加载方式<br><br>建造者模式：<br>网络通信协议，非常规意义上的http请求，更多是Socket通信，需要处理大量的参数传递，包装，解析<br><br>","like_count":7},{"had_liked":false,"id":147347,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1572860321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31637631393","product_id":100039001,"comment_content":"学完这个，再去重温数据结构，大有裨益。","like_count":7},{"had_liked":false,"id":151831,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1573797844,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"23048634324","product_id":100039001,"comment_content":"1：就如老师说的，投资要趁早，不然后面后悔都来不及。我就是典型的例子，大学的时候没学习设计模式，后来工作上一直会被用到，我才开始重视，去看《Head First设计模式》。但是例子终究是例子，还得靠实战才能更进一步。<br><br>2. 在初入职场的时候，被师傅带着，用过单例模式，观察者模式，适配器模式等，主要是解决Android开发中重复创建对象、监听数据变化、以及控件的使用等等。很多设计模式都是无形之中使用的，如果能尽早学会，阅读Android源码都会事半功倍。<br><br>现在更多的是Java开发了，微服务中这么多设计模式，都在影响着我，跟着老师学起来，我相信我可以的","like_count":5,"discussions":[{"author":{"id":1743060,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er8xHGabhfnPnK7gN3hVJ0n3wia5qIaay7IOQaGJ4ia0kB1CKywjbJNeGjM7DKexk6TZl88f6um4pqw/132","nickname":"早早凡","note":"","ucode":"E70B0306637482","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305608,"discussion_content":"我也是安卓转java","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600015798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148943,"user_name":"啊哈哈哈怕","can_delete":false,"product_type":"c1","uid":1637119,"ip_address":"","ucode":"A35E88C8D3CABD","user_header":"https://static001.geekbang.org/account/avatar/00/18/fa/ff/ff6fc1b2.jpg","comment_is_top":false,"comment_ctime":1573114026,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23047950506","product_id":100039001,"comment_content":"是不是适用设计模式也应该一分为二的看，如果业务非常简单就没必要上设计模式增加系统的复杂性了。","like_count":5,"discussions":[{"author":{"id":2034632,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/0b/c8/15f055d3.jpg","nickname":"图灵机","note":"","ucode":"EB02DB653AD591","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284737,"discussion_content":"因为各种框架已经给你实现好了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592620967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148659,"user_name":"大姨夫斯基","can_delete":false,"product_type":"c1","uid":1519521,"ip_address":"","ucode":"79989AC4DD36FE","user_header":"https://static001.geekbang.org/account/avatar/00/17/2f/a1/5f32ada6.jpg","comment_is_top":false,"comment_ctime":1573045996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23047882476","product_id":100039001,"comment_content":"投资要趁早，这样我们才能尽早享受复利。  很赞同这个观点，因为切身体会过。","like_count":5},{"had_liked":false,"id":147634,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1572875089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18752744273","product_id":100039001,"comment_content":"1，重要性亲身经历过：被面试，面试别人，看源码，设计易维护易扩展的功能模块<br>2，几乎没使用过。读过设计模式的书籍，现在全还回去了。这也是学习本专栏的原因。","like_count":4},{"had_liked":false,"id":331267,"user_name":"Lingo","can_delete":false,"product_type":"c1","uid":1075334,"ip_address":"","ucode":"82ECA2E0533B78","user_header":"https://static001.geekbang.org/account/avatar/00/10/68/86/348be7f8.jpg","comment_is_top":false,"comment_ctime":1642512388,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14527414276","product_id":100039001,"comment_content":"🌟聊一聊你对设计模式相关知识的重要性的看法。<br><br>设计模式是编码的基本功，不懂设计模式就去搞开发，虽然搞出来的软件也能用，但也仅仅是“能用”。代码的可读性，可扩展性，可维护性不强的话，写的这些代码早晚会变成一堆垃圾。<br><br>就像是吃饭要先学习拿筷子，跑步要先学会走路。基本的东西，现在不学好，后面的道路会更加坎坷。加班改bug，重构烂代码，花费的时间和精力肯定会更多。<br><br>如果现在已经觉得前进的道路不平坦，那此时正是学习的好时机。因为你比那些没有经验，就去学习的人，更有学习的理由，更加知道学习的好处。学习与实战是相辅相成的。<br><br>加油吧，愿做一个有追求的打工人！<br><br><br>🌟在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br><br>如果说没有，是不是就把天聊起了哈哈😄，仔细想想还是有的。<br><br>作为一名有追求安卓开发工程师，jetpack里的liveData还是经常使用的，使用的是监听者设计模式，配合dataBinding实现数据与ui的双向绑定。体现了状态驱动ui的编程思想。<br><br>retrofit使用了代理模式，使用java的动态代理、反射、注解，实现了一个非常好用的网络请求框架。帮助开发者构造出okhttp的call对象，实现网络请求。使用了适配器模式，使retrofit可以无缝配合rxjava、kotlin的suspend挂起函数等第三方库一起工作。<br><br>okhttp使用了职责链模式，非常优雅的实现了http报文的封装、连接池的管理、线程池的管理，并且有很高的可扩展性，支持用户自定义拦截器。<br><br>安卓本身的activity就是使用了模版模式，让用户只需关注每个生命周期需要做的事情，而不需要关注生命周期是被谁，何时调用的。<br><br>lifecycle使用了监听者模式、context使用了门面模式，装饰器模式、控件树使用了组合模式等等等等……<br><br>最近刚学了dart，里面的const关键字用于声明编译期常量，我觉得也可以看作是编译器对享元模式的应用。","like_count":3},{"had_liked":false,"id":267654,"user_name":"米虫","can_delete":false,"product_type":"c1","uid":1448031,"ip_address":"","ucode":"18B78262CA2B0A","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/5f/b391c6c2.jpg","comment_is_top":false,"comment_ctime":1607860185,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14492762073","product_id":100039001,"comment_content":"设计模式是六大设计原则的最佳实践，对解决复杂系统问题有重要指导意义。分层、模块化、抽象、接口、管道、插件等等耳熟能详的内容，都对应着一种模式，设计出这些模式，就好比发掘数理公式一样。常见的设计模式，是大多数系统最好的解释。<br><br>工厂、装饰、外观、策略、模板、状态、观察等都深度使用过，也为自己使用过感到自豪，但是关键的能力在于识别模式，学习这门课就是想对所有的模式都能驾轻就熟。","like_count":3},{"had_liked":false,"id":154542,"user_name":"张鼎松","can_delete":false,"product_type":"c1","uid":1063160,"ip_address":"","ucode":"061F86EA9AA93D","user_header":"https://static001.geekbang.org/account/avatar/00/10/38/f8/b7ae7c6d.jpg","comment_is_top":false,"comment_ctime":1574477146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14459379034","product_id":100039001,"comment_content":"“有些东西，要早点知道；有些书，要早点读。这样在你后面的生活、工作、学习中，才能一直都发挥作用。不要等到好多年后，看到了，才恍然大悟，后悔没有早点去学、去看。”  <br>多么痛的领悟！这些年下来这样的事情还少吗？老师的话句句说到心坎里啊！","like_count":3},{"had_liked":false,"id":150027,"user_name":"蓝二哥哥我才是无羡啊👻","can_delete":false,"product_type":"c1","uid":1738272,"ip_address":"","ucode":"E70EE4E08F16AF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/20/e71b5585.jpg","comment_is_top":false,"comment_ctime":1573450029,"is_pvip":false,"replies":[{"id":"58375","content":"内功足够扎实，才能领会别人的代码为什么这么写。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573790377,"ip_address":"","comment_id":150027,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14458351917","product_id":100039001,"comment_content":"  做服务端开发相关工作，对于一个初入职场的小白来说，什么工厂模式单例模式，只有简单的知道概念，看项目都不能明白他们的体现，但最近发现了单例模式在装饰器方面的应用是真的让人印象深刻，从中体会到了编程的乐趣，所以下定决心要好好学习设计模式！<br>  还有老师说的：“你以为你读懂了别人的代码，其实你可能还未领悟到其中的精髓！”我思考一阵，发现好像真的是这样，最近在学习前辈的代码阶段，好像只是懂了代码实现的业务逻辑，并不十分明白为什么要这样去实现，好处在哪，所以想问问老师，怎么才能领悟到别人代码的精髓呢","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474041,"discussion_content":"内功足够扎实，才能领会别人的代码为什么这么写。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573790377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149073,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1371891,"ip_address":"","ucode":"8BEFC518F06AC7","user_header":"https://static001.geekbang.org/account/avatar/00/14/ee/f3/a94cee23.jpg","comment_is_top":false,"comment_ctime":1573136096,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14458037984","product_id":100039001,"comment_content":"最近刚刚看了《大话设计模式》，了解了一些设计模式，之前也看过，但是没怎么看懂，看了就忘记。这次再次看设计模式，有了不一样的感悟，觉得可以看懂一些，看某种设计模式，会带着这种设计模式是为了解决什么问题这样的一个思考去学习，然后对设计模式就理解得深一点。但说实话，有些设计模式还是没读懂，即使看明白书上的代码，也不知道如何运用在工作中。<br>在这分享一下自己最近看懂的一个设计模式，也运用在了工作中。这个设计模式叫状态设计模式，它主要是为了解决烦长、复杂的多条件逻辑判断问题，把这种多个条件逻辑设计成一个个的类来处理，逻辑处理还涉及到流转，在每个处理类中做判断。不过我还加入了自己的一些想法，这些条件处理类继承了一个抽象类，来处理一些公共的逻辑。我用来处理的是时间上年、月、日、时、分上的业务逻辑处理。","like_count":3},{"had_liked":false,"id":147816,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1572910431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457812319","product_id":100039001,"comment_content":"设计模式的重要性当然是不言而喻的。代码质量问题是我最近一直关心的问题。<br>在实际过程中用过<br>1.单例<br>2.工厂<br>3.builder模式<br>4策略模式<br>印象中最深的就是做一个通用功能，我就是用的策略模式，做完之后得到了leader的刮目相看，代码结构清晰，代码量少，同事用起来觉得非常方便。<br>后面跟着争哥好好学习设计模式，让自己的代码成为同事们的标杆。","like_count":3},{"had_liked":false,"id":147722,"user_name":"Joanfen","can_delete":false,"product_type":"c1","uid":1004260,"ip_address":"","ucode":"4CF1B92337B625","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/e4/50600574.jpg","comment_is_top":false,"comment_ctime":1572881156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457783044","product_id":100039001,"comment_content":"1. 设计模式相当于是前人总结的一些套路，当业务与这些模式比较契合时，就可以使用对应的模式来设计，而且当大家都了解这些“套路”时，交流也会比较顺畅<br>2. 设计App相关协议时使用过工厂模式，为了减少case判断","like_count":3},{"had_liked":false,"id":147648,"user_name":"will","can_delete":false,"product_type":"c1","uid":1156207,"ip_address":"","ucode":"7A7DBE3E0EEAEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/6f/672a27d4.jpg","comment_is_top":false,"comment_ctime":1572876015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457777903","product_id":100039001,"comment_content":"来到新公司才发现设计模式的重要性，回顾以前写的代码真的是很垃圾。<br>现在用到了很多的设计模式：<br>1、builder模式<br>2、责任链模式<br>3、单列模式<br>4、观察者模式<br>5、adapter模式等。<br>但是对于这些模式的精髓，还是没有深刻理解到，一定要好好学习一波","like_count":3},{"had_liked":false,"id":355008,"user_name":"后其身而身先","can_delete":false,"product_type":"c1","uid":3159196,"ip_address":"山东","ucode":"E7F36107A5A925","user_header":"https://static001.geekbang.org/account/avatar/00/30/34/9c/05708466.jpg","comment_is_top":false,"comment_ctime":1660969042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10250903634","product_id":100039001,"comment_content":"我相信，有很多程序员和我一样，并不是软件相关专业科班出身的。<br>对于我们这些非科班出身的程序员来讲，很多时候，都是在摸着石头过河。因为没有系统性和体系化的知识结构基础，在做程序设计和程序开发的时候，都只能凭经验或直觉来做。<br>经验丰富之后，可能写出的代码也比较漂亮；但是在带新人的时候，却不能够讲解清楚什么是好代码，怎么避免掉入烂代码的坑里，结果导致自己的“弟子”们，要么无法理解自己所讲授的内容，要么，就学的似是而非，画虎类犬。耽误了别人的前程，同时，也阻碍了自己的进步<br>回头来学习这些，是为了“补课”，把自己的经验理论化，将这些理论知识和自己的实践相互印证，建立坚实的知识结构体系。在这样的体系基础之上，也更易于向别人传播自己的知识和经验，只有基础牢固，才能建成真正屹立不倒的摩天大楼","like_count":3},{"had_liked":false,"id":239289,"user_name":"磐星","can_delete":false,"product_type":"c1","uid":1003640,"ip_address":"","ucode":"19436A86714C3D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/78/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1596497296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10186431888","product_id":100039001,"comment_content":"比设计模式的重要性对中高阶程序员尤其重要， 写的代码和程序设计需要优雅且扩展性强<br><br>以前工作中模板方法和代理 用的比较多 ","like_count":2},{"had_liked":false,"id":188585,"user_name":"西山薄凉","can_delete":false,"product_type":"c1","uid":1438400,"ip_address":"","ucode":"7A44850F99EC02","user_header":"https://static001.geekbang.org/account/avatar/00/15/f2/c0/bf148d4f.jpg","comment_is_top":false,"comment_ctime":1584372140,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10174306732","product_id":100039001,"comment_content":"iOS开发来推书了<br>《Objective-C编程之道》，讲了各种设计模式在系统中的使用。非常经典","like_count":2,"discussions":[{"author":{"id":2356993,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/KMVyjF3bDDa7oot4QVWiaiaicMho9JtZ2E8nWqK8562B6HEicOwyfmAGwocLsvTMMnqWqEob5BrlI0OJpTvLMx7U5Q/132","nickname":"Geek_c7292f","note":"","ucode":"BB6F9413C0A0D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335097,"discussion_content":"现在不是流行swift吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608091190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148075,"user_name":"httvc","can_delete":false,"product_type":"c1","uid":1328883,"ip_address":"","ucode":"3E21CC740976B0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLeocOtQchqJhmQjrSLVvkIfGmhK1STust04THMVxWB0ibGMWOaKWJKnSgb6PbEHELXknGdEbHSkjQ/132","comment_is_top":false,"comment_ctime":1572937465,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10162872057","product_id":100039001,"comment_content":"一直觉得设计模式很重要，但是就是静不下心来学，看博客学的时候坚持一周过个周六日第二周周一就忘了，又看其他的，这次一定看完。<br>在开发的时候用过单例，适配器，观察者和被观察者，建造设计模式，然后看源码的时候看过代理，工厂设计模式，其他的设计模式在没了解。","like_count":2},{"had_liked":false,"id":147683,"user_name":"Crack","can_delete":false,"product_type":"c1","uid":1638828,"ip_address":"","ucode":"BA9573576069C2","user_header":"https://static001.geekbang.org/account/avatar/00/19/01/ac/0a84e410.jpg","comment_is_top":false,"comment_ctime":1572879083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10162813675","product_id":100039001,"comment_content":"设计模式就是来指导怎么写代码吧","like_count":2},{"had_liked":false,"id":147673,"user_name":"Wiggins","can_delete":false,"product_type":"c1","uid":1078222,"ip_address":"","ucode":"021EE98CF0E4EE","user_header":"https://static001.geekbang.org/account/avatar/00/10/73/ce/23bd3997.jpg","comment_is_top":false,"comment_ctime":1572878413,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"10162813005","product_id":100039001,"comment_content":"课堂讨论 1 公司里的新电商项目 由一个工作十余年的老程序员主要开发下单这块 代码中充斥着ifelse 十分难以维护 虽然注释清晰 但是让人根本没有看下去的欲望<br>2在项目中主要用到的就是单例模式 dotnetcore框架中自带的addsingleton 让对象在生命周期内只实例化一次 还有就是观察者模式 主要就是mq的exchange中还有实际业务中 减少了很多重复的代码","like_count":2,"discussions":[{"author":{"id":1590960,"avatar":"https://static001.geekbang.org/account/avatar/00/18/46/b0/4f45e06e.jpg","nickname":"天雨流芳","note":"","ucode":"81657BA9C900FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45818,"discussion_content":"同.net 一起学习～，👏👏👏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573088500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147517,"user_name":"暒","can_delete":false,"product_type":"c1","uid":1547048,"ip_address":"","ucode":"9C956F418C66BB","user_header":"https://static001.geekbang.org/account/avatar/00/17/9b/28/9d89de4d.jpg","comment_is_top":false,"comment_ctime":1572867833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10162802425","product_id":100039001,"comment_content":"默默打卡，加油阿星","like_count":2},{"had_liked":false,"id":147490,"user_name":"兔2🐰🍃","can_delete":false,"product_type":"c1","uid":1096984,"ip_address":"","ucode":"1FEDA044BB6CBD","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/18/2af6bf4b.jpg","comment_is_top":false,"comment_ctime":1572866871,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10162801463","product_id":100039001,"comment_content":"设计模式重要性很多，提高源码理解能力，加深中间件原理理解，争哥说的为职场做铺垫做铺垫，真的很有道理，当你自身能力强大起来后，你会发现自身求知欲加强了，不断地学习，不断的接触到牛人，学习他们的经验，走上捷径之路。常说学习没有捷径，但我觉得捷径就在于此。认同的顶上去！让很多人看到~","like_count":2,"discussions":[{"author":{"id":2134882,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erpYZalYvFGcBs7zZvYwaQAZwTLiaw0mycJ4PdYpP3VxAYkAtyIRHhjSOrOK0yESaPpgEbVQUwf6LA/132","nickname":"Harlan","note":"","ucode":"F43595A0A00B19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304288,"discussion_content":"怎么认识牛人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599539121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1096984,"avatar":"https://static001.geekbang.org/account/avatar/00/10/bd/18/2af6bf4b.jpg","nickname":"兔2🐰🍃","note":"","ucode":"1FEDA044BB6CBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2134882,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erpYZalYvFGcBs7zZvYwaQAZwTLiaw0mycJ4PdYpP3VxAYkAtyIRHhjSOrOK0yESaPpgEbVQUwf6LA/132","nickname":"Harlan","note":"","ucode":"F43595A0A00B19","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304388,"discussion_content":"视频号可以多关注下，太多优秀的人了，向他们学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599559580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304288,"ip_address":""},"score":304388,"extra":""}]}]},{"had_liked":false,"id":147464,"user_name":"Yo nací para quererte.","can_delete":false,"product_type":"c1","uid":1664572,"ip_address":"","ucode":"8B6E9B8B3D007C","user_header":"https://static001.geekbang.org/account/avatar/00/19/66/3c/2d563488.jpg","comment_is_top":false,"comment_ctime":1572865383,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10162799975","product_id":100039001,"comment_content":"设计模式很重要<br>学过一段时间unity，一个好的游戏代码可以从中看到很多设计模式的影子。搭建框架的过程花费时间可能是很漫长的，不过框架写好之后填充内容就很容易了，框架也可以复用。再也不怕改需求了。","like_count":2},{"had_liked":false,"id":293958,"user_name":"杨杨","can_delete":false,"product_type":"c1","uid":1402090,"ip_address":"","ucode":"8B990A127FF903","user_header":"https://static001.geekbang.org/account/avatar/00/15/64/ea/2480b207.jpg","comment_is_top":false,"comment_ctime":1621650106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5916617402","product_id":100039001,"comment_content":"学好和掌握设计模式真的很重要，对于一个开发，融会贯通了设计模式思想，那么coding的时候肯定下笔如有神，质量高，写出来后期维护也很方便，so我也想掌握这项开发必备技能，从普通码农中脱颖而出。<br>之前我们项目组接手了一个已经开发好功能模块的项目，我们要做的就是在原有功能上进行新开发功能需求。但是这个项目之前经过了N代人的开发，里面代码基本上都是堆砌而成的，读起来真的是惨不忍睹，而且代码都没有注释，一个类文件竟然有上万行，读起来真的是非常吃力！没办法，我们接手后项目经理要求我们尽量写出比原来代码质量高的新代码，然后再利用闲暇优化之前不好的代码。我们还定期进行项目组内代码串讲，代码检视，让大家都可以对感觉不合理的代码提出意见，然后改进。最后经过我们一年多的开发，交出了比较满意的项目代码，也得到了公司的认可。","like_count":1},{"had_liked":false,"id":278315,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1612869206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5907836502","product_id":100039001,"comment_content":"1.设计模式可以提高代码的复用性、可扩展能力，平时经常因为乱糟糟的代码感到头疼，工作开发效率也很低下，常常看别人代码都需要不少时间，还会因为代码中各种意想不到的逻辑导致线上问题。这时就能体现设计模式的重要性了，其实都不用说设计模式，只要大部分人能将代码写的条理清楚、见名知意，我就谢天谢地了。<br>2.目前对设计模式理解很少，只用过简单的工厂、策略、模板方法、观察者模式。","like_count":1},{"had_liked":false,"id":274437,"user_name":"CoreDao","can_delete":false,"product_type":"c1","uid":2418145,"ip_address":"","ucode":"75D08C21EC57FA","user_header":"https://static001.geekbang.org/account/avatar/00/24/e5/e1/5af35687.jpg","comment_is_top":false,"comment_ctime":1611021638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5905988934","product_id":100039001,"comment_content":"1.对个人。一方面提升代码美感，另一方面提升对源码等的理解。<br>2.对团队。代码可读性，bug率等会降低。","like_count":1},{"had_liked":false,"id":266905,"user_name":"焱","can_delete":false,"product_type":"c1","uid":1113301,"ip_address":"","ucode":"677BF1BE4B94D5","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/d5/1cf5fd56.jpg","comment_is_top":false,"comment_ctime":1607522130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5902489426","product_id":100039001,"comment_content":"个人认为设计模式是优秀的前辈们在软件开发过程的总结，处理了一些典型问题的比较好的一种解决方案，在实际项目中遇到过会话管理中无限new耗尽内存问题使用了单例减小内存问题","like_count":1},{"had_liked":false,"id":245418,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1598941087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5893908383","product_id":100039001,"comment_content":"【要点】<br>1、学习并掌握设计模式相关知识可以帮助我们应对面试中的设计模式相关问题。尽早把设计模式相关的知识点搞清楚，面试时遇到相关问题就不需要害怕了，让设计模式为成为面试中的亮点。<br>2、学习并掌握设计模式相关知识可以帮助我们告别写被别人吐槽的烂代码。写的一手好代码让你在团队中更容易脱颖而出，得到大家的认可，赢得尊重与响应的江湖地位。<br>3、学习并掌握设计模式相关知识可以帮助我们提高复杂代码的设计和开发能力。每天在固定的框架里根据业务需求填充代码，十年如一年，当突然面临有挑战的编码工作时往往力不从心。你不中年危机谁危机！所以，学习设计模式也是一种应对中年危机的方法。<br>4、学习并掌握设计模式相关知识可以让我们读源码、学框架事半功倍。阅读优秀的源码，获得其中的精髓，是我们高效学习持续进步的重要法宝，而在设计模式方面的能力直接决定了能否看得懂、学得会、用的上。<br>5、学习并掌握设计模式相关知识可以为我们的职场发展做铺垫。技术人最佩服的就是技术牛人，要做团队的技术带头人，而不是团队的技术天花板。<br>【思考】<br>1、单例模式，例如Chromium中的Browser进程的资源管理类，用于同一的资源管理及调度。以及Chromium中的HTML分词器，由于词库固定，所以用于对输入的字符流进行分词时只需一个实例即可。<br>2、工厂模式，例如Chromium中创建DOM树节点的创建类。适用于创建有很多共同属性的同一类对象，使用工厂模式一般都伴随着模板类的使用。","like_count":1},{"had_liked":false,"id":189645,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1921287,"ip_address":"","ucode":"64BBE005890845","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/07/b5a945b6.jpg","comment_is_top":false,"comment_ctime":1584537910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879505206","product_id":100039001,"comment_content":"感觉在学习得到的专栏，给作者点赞","like_count":1},{"had_liked":false,"id":178893,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1043401,"ip_address":"","ucode":"B631E56A112BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/c9/b1b233cf.jpg","comment_is_top":false,"comment_ctime":1581847859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5876815155","product_id":100039001,"comment_content":"打卡：<br>1、聊一聊你对设计模式相关知识的重要性的看法；<br>答：懂设计模式，主要体现的是内功，如果你不会，可能对于复杂度小或刚启动的项目还just so so。但是随着复杂度变高、架构不断演化，如果前提架构设计不好，你的研发效能就会迅速下降，苦不堪言；<br>所以，我觉得设计模型非常重要，是一个架构师的基本功，是提高研发效能的利器。<br>当然，得具体场景具体分析，比如你就是为了快速开发一个poc原型，那就怎么快怎么来。<br><br>2、在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>答：有用到；<br>单例模式：任务分配manager作为一个单例模式，被别的服务调用；优势：保证只有一个实例；<br>工厂模式：同一个算法有不同的实现；那么就抽象出一个算法工厂；优势：新增一个算法非常方便；代码结构清晰；<br><br><br>自我感觉在这方面思考和经验比较欠缺，目前只感觉到基于接口编程的好处。","like_count":1},{"had_liked":false,"id":159721,"user_name":"J","can_delete":false,"product_type":"c1","uid":1118252,"ip_address":"","ucode":"0CAB1969668F69","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/2c/330651c8.jpg","comment_is_top":false,"comment_ctime":1575743913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870711209","product_id":100039001,"comment_content":"在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>MVC，用于编写界面交互的场景，M专注于数据生厂，V专注于界面编写，C专注于协调他们之间交互，解决界面或数据有变动的情况下减少对现有代码的入侵以及破坏。<br>工厂模式：通常用于向请求服务器数据。将返回的 json 数据转 model ，键值映射。还有生厂消费者模式。<br>单例模式：用于跨类跨模块同步读写临时数据，解决在保持业务模块相互独立的同时又能保持实时的通讯。<br>观察者模式：用于监听跨类跨模块某一对象的变化情况，解决业务耦合问题。<br>委托模式：用于，可以实现业务解耦，减少代码破坏<br>还有很多<br><br> <br>聊一聊你对设计模式相关知识的重要性的看法<br>可以更直观的评估代码质量，以现在的眼光来看，现在的代码或多或少都是用到设计模式。个人觉得学习设计模式最大的原因就是怎么跟大家讲明白自己的想法，让大家信服，从而提高自己的技术领导力。","like_count":1},{"had_liked":false,"id":156199,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1574834762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869802058","product_id":100039001,"comment_content":"2.自己在开发过程中常用的最多是面向接口编程，单例，工厂，注册监听。<br>最关键的其实是分层级，隔离变化和不变","like_count":1},{"had_liked":false,"id":156198,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1574834608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869801904","product_id":100039001,"comment_content":"最开始参加工作时候，看代码仅仅知道跟踪函数调用，但是跟着跟着就没了，摸不到头脑。后来知道那个是注册监听😂<br>很多时候，读代码最先了解的是其框架，调用关系，消息机制等，然后才能不把自己看糊涂。<br>有些程序员，不仅代码懒，还不爱写文档，导致过两天自己都看不懂，你说可笑不可笑。<br>所以，程序绝不仅仅为了实现功能，更多的是为后续的可移植可扩展打下基础","like_count":1},{"had_liked":false,"id":152804,"user_name":"菩提晓","can_delete":false,"product_type":"c1","uid":1052898,"ip_address":"","ucode":"9716098118C32D","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/e2/d4b51007.jpg","comment_is_top":false,"comment_ctime":1574082499,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5869049795","product_id":100039001,"comment_content":"这篇文章，印象最深的是了解设计模式，对研读源代码的重要性，经常一腔热血想要读源代码，又被源代码的复杂结构弄得晕头转向，希望通过这门课程的学习后，能够翻一翻有价值的源码，检验一下自己学习的成功，也希望老师可以推荐一下开始阅读源码的方法。","like_count":1},{"had_liked":false,"id":152414,"user_name":"姚布斯","can_delete":false,"product_type":"c1","uid":1335972,"ip_address":"","ucode":"09F958407F63FB","user_header":"https://static001.geekbang.org/account/avatar/00/14/62/a4/972b2b33.jpg","comment_is_top":false,"comment_ctime":1573994715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868962011","product_id":100039001,"comment_content":"1.掌握好设计模式相关知识，可以:1&gt;帮助你更好地应对面试；2&gt;帮助你告别“烂代码”；3&gt;帮助你轻松构建复杂系统；4&gt;帮助你更轻松地读懂源码；5&gt;帮助你更快地进阶高级甚至专家级别。<br>2.除了单例，建造者和代理模式以外，其他用的不是很多。。","like_count":1},{"had_liked":false,"id":152265,"user_name":"michael","can_delete":false,"product_type":"c1","uid":1005835,"ip_address":"","ucode":"69738B5801F0FD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/0b/fb876077.jpg","comment_is_top":false,"comment_ctime":1573955357,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868922653","product_id":100039001,"comment_content":"工作中比较常用单例和工厂，其他涉及的不多","like_count":1},{"had_liked":false,"id":151235,"user_name":"徐锦","can_delete":false,"product_type":"c1","uid":1116178,"ip_address":"","ucode":"5DFA43E12F685D","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/12/9c7ea83a.jpg","comment_is_top":false,"comment_ctime":1573690224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868657520","product_id":100039001,"comment_content":"作为一个测试人员，跟着大牛学习学习，力争能一个合格程序员要求自己","like_count":1},{"had_liked":false,"id":149521,"user_name":"越过大西洋","can_delete":false,"product_type":"c1","uid":1254936,"ip_address":"","ucode":"21FBC3BBCC23B4","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/18/ed6911b7.jpg","comment_is_top":false,"comment_ctime":1573264791,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868232087","product_id":100039001,"comment_content":"今年很有幸的参与了公司主业务相关代码的重构, 收获颇多:<br>1. 再糟糕的代码也要反复阅读理解每一行代码的意义才能保证重构后不会出现预期之外的结果 (这个过程整整花掉了整个重构的 2&#47;3 时间)<br>2. 在理解原业务和代码的基础上, 合理利用时序图, 输出各系统间交互情况; 利用流图输出业务逻辑<br>3. 小组内不断地针对重构前的时序图和代码进行讨论, 最终输出新流程的时序图以及流程图, 进行评审<br>4. 根据新的流程编写新的业务代码 (在流程非常清晰的情况下, 写出代码其实花的时间非常少)<br><br>编码的过程中简单的用到了面向对象的继承和封装, 依赖注入<br>在编写单元测试的过程中更能体会和发现代码中的一些设计缺陷甚至是过度设计","like_count":1},{"had_liked":false,"id":148822,"user_name":"听雨声淅沥","can_delete":false,"product_type":"c1","uid":1247350,"ip_address":"","ucode":"C975EE69A5D103","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/76/350f19ea.jpg","comment_is_top":false,"comment_ctime":1573091388,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868058684","product_id":100039001,"comment_content":"比较赞同作者观点 ，上学年大三，老师教授这门课的时候尽管说的清晰明白，老师也很厉害，但是仍然脱离不了一些书本的常见模型，我也能理解，当时毕竟是萌新。希望在这里看到更加真实有力的设计模式，将设计模式的魅力体现地更加淋漓尽致，我们大家共同进步。","like_count":1},{"had_liked":false,"id":148624,"user_name":"晨风破晓","can_delete":false,"product_type":"c1","uid":1321464,"ip_address":"","ucode":"F2BC46428A97B5","user_header":"https://static001.geekbang.org/account/avatar/00/14/29/f8/561c5be1.jpg","comment_is_top":false,"comment_ctime":1573039827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868007123","product_id":100039001,"comment_content":"告别烂代码，提高复杂代码的设计和开发能力，轻松阅读源码，轻松学框架","like_count":1},{"had_liked":false,"id":147675,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1572878594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867845890","product_id":100039001,"comment_content":"最近重构了一个项目，用到了观察者模式、模版模式、工厂模式、单例模式以及建造者模式。从扩展性和维护性升级了一版代码。","like_count":1},{"had_liked":false,"id":147654,"user_name":"‭ ‭ ‭ ‭","can_delete":false,"product_type":"c1","uid":1446588,"ip_address":"","ucode":"1A55B58FF70711","user_header":"https://static001.geekbang.org/account/avatar/00/16/12/bc/2a796c79.jpg","comment_is_top":false,"comment_ctime":1572876597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867843893","product_id":100039001,"comment_content":"1 设计模式可以提高你在编写代码时的思维深度和广度。而不只是写一些可以实现业务、可以运行的代码<br>2 只用过单例设计模式，但是光光这一个模式你就需要思考要在什么场景下去使用它，你所写的单例代码是不是真的满足“单例”，是否具备安全性等等。<br>读一些源码也可以加深对设计模式的认识，观摩过Java的IO，Spring的DI，但都是很浅显，希望跟着争哥能让自己在设计模式上有着超出之前的认知，能回过头去思考当时在看代码时的所想所觉","like_count":1},{"had_liked":false,"id":147611,"user_name":"雷霹雳的爸爸","can_delete":false,"product_type":"c1","uid":1119490,"ip_address":"","ucode":"99BBA6D83DD11F","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/02/66f65388.jpg","comment_is_top":false,"comment_ctime":1572872963,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5867840259","product_id":100039001,"comment_content":"真正开始看设计模式，应该是在看重构之后，好像里面说的是设计模式为重构指明了目标，除了设计模式，SOLID设计原则对我影响可能更深…<br><br>要说起来，模板方法和策略模式是应用较多的两个，后者毫无疑问的感觉用spring依赖注入相当于怎么也绕不过去，但是现在看起来能遵循里氏替换的反倒很少，不过大多时候感觉还是无伤大雅；前者一方面其实也是受spring影响较深，变体的模板回调如jdbc template的风格，即便try resource 时代之后也常常用于隔离异常处理和主题流程部分，另一方面模板方法适合大流程稳定，局部逻辑多样化的场景，非常适合隔壁犬类一天八变的折腾这屋子里灵长类这种无奈玩法<br><br>另外第二讲才发现，这次老师没用本尊的声音？","like_count":1},{"had_liked":false,"id":147520,"user_name":"Geek_862694","can_delete":false,"product_type":"c1","uid":1366022,"ip_address":"","ucode":"977B4195C7CFB1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBP7piae8iaHU7w2a4TyLKPFI7xiaia3Hias2ibMPftnFEic0lqGU315U70peQs7X3Kyd3bDgJjF6nBQg7xA/132","comment_is_top":false,"comment_ctime":1572868008,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5867835304","product_id":100039001,"comment_content":"了解常用的几个设计模式，但是如何选择合适的设计模式去应用是选择要掌握的","like_count":1},{"had_liked":false,"id":147420,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1572863048,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5867830344","product_id":100039001,"comment_content":"我来聊一聊我对设计模式的感悟吧，在项目中要做活动，而所有的活动都千篇一律差不多，但是我竟然没能很好的复用代码，导致加一个活动就要加一个文件！让我深刻体会到面向对象和设计模式的重要性！","like_count":1,"discussions":[{"author":{"id":1079816,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","nickname":"Aaron Cheung","note":"","ucode":"03972759C53667","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45063,"discussion_content":"成大大👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573002275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1236766,"avatar":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","nickname":"传说中的成大大","note":"","ucode":"103543D6E706BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1079816,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","nickname":"Aaron Cheung","note":"","ucode":"03972759C53667","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46767,"discussion_content":"你是哪位？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573204207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":45063,"ip_address":""},"score":46767,"extra":""}]}]},{"had_liked":false,"id":360100,"user_name":"Geek_5b5057","can_delete":false,"product_type":"c1","uid":3202816,"ip_address":"河北","ucode":"6B81DBE4BDEC75","user_header":"","comment_is_top":false,"comment_ctime":1666174375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666174375","product_id":100039001,"comment_content":"设计模式就像《三十六计》，提炼了开发中普遍适用、公认的“套路”，能大大提高开发效率，而正因为是普适的，在学习他人的好代码时，也能快速看透其“计谋”。","like_count":0},{"had_liked":false,"id":359321,"user_name":"Geek_ab2b78","can_delete":false,"product_type":"c1","uid":3195956,"ip_address":"天津","ucode":"9AE87C74B295B1","user_header":"","comment_is_top":false,"comment_ctime":1665411942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665411942","product_id":100039001,"comment_content":"话题讨论：<br>1. 完全同意王争老师的观点，感受最深的就是设计模式对阅读源码的重要性。在阅读Spring MVC源码中，如果对适配器和策略模式足够了解的话会发现Spring MVC源码基本都是在复用这两个设计模式。<br><br>2. 个人开发中比较得意的一个设计模式就是模仿netty的责任链机制，再结合发布订阅模式，实现了事件驱动下的回调一个责任链，且责任链是可排序的，事件的传递是可选择性终止的。","like_count":0},{"had_liked":false,"id":358477,"user_name":"叶落化离愁","can_delete":false,"product_type":"c1","uid":2189515,"ip_address":"浙江","ucode":"3FB48B90DD3DE0","user_header":"https://static001.geekbang.org/account/avatar/00/21/68/cb/95261184.jpg","comment_is_top":false,"comment_ctime":1664348612,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1664348612","product_id":100039001,"comment_content":"非常重要，也是在面临到实际挑战才发现这是一个不可或缺的内功，不是一朝一夕能练成的。","like_count":0},{"had_liked":false,"id":358370,"user_name":"Playmaker","can_delete":false,"product_type":"c1","uid":3017263,"ip_address":"中国香港","ucode":"48652E8135B54B","user_header":"https://static001.geekbang.org/account/avatar/00/2e/0a/2f/477f02d1.jpg","comment_is_top":false,"comment_ctime":1664251102,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1664251102","product_id":100039001,"comment_content":"1. 不同的设计模式就像足球比赛中的不同的阵型，定下整个比赛的基调，选择正确的阵型可以达到事半功倍的效果，学习不同的阵型也利于参透其他队伍的比赛<br><br>2. 过往的项目中有一个客服分配策略的项目，其中有用到策略模式，用于新增分配策略时能更好的适配","like_count":0},{"had_liked":false,"id":356397,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"浙江","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1662261448,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662261448","product_id":100039001,"comment_content":"设计模式能让代码的实现更优雅，看着更舒服，虽说不懂设计模式，实际选择，代码也是照样写，但是写出来的是烂代码，堆砌出来的代码，看着像是面向过程的，没有深度思考在里面。","like_count":0},{"had_liked":false,"id":355757,"user_name":"Stay_Gold","can_delete":false,"product_type":"c1","uid":1119904,"ip_address":"北京","ucode":"ACB8DCD2EF8F95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2NTTABPFibg2k9tZscOOKx9wu80a85d5HspCorO9Nibj7Z7q9v1icPTVm5ia52r0RCzEaA/132","comment_is_top":false,"comment_ctime":1661736301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661736301","product_id":100039001,"comment_content":"设计模式的重要性看法：<br>1.现实世界业务总是变化的，如果代码经常要随着业务变动而有大的变动的话，难免工作效率低下，bug多。<br>2.大部分好的设计模式能让代码更加容易理解，这样不管是代码交给其他人处理，还是自己来处理都能更快速的开展工作。<br>3.管理复杂度是软件的终极主题，大部分软件的失败都是因为复杂度爆炸导致的。但是设计模式能帮我们很好的管理软件的各种复杂度。<br>用过的设计模式：<br>1.单例模式：EFCore的context是典型的单例模式。保证系统中始终只有一个实例，降低多实例操作数据库导致的各种死锁，阻塞等问题。<br>2.工厂模式：不同的情况下，通过构造函数也好，通过函数传递也好，生成不同的对象实例。<br>3.其他有些比如观察者等设计模式很多也都是通过框架使用的，很少自己独立去实现各种设计模式","like_count":0},{"had_liked":false,"id":355438,"user_name":"May","can_delete":false,"product_type":"c1","uid":3153982,"ip_address":"上海","ucode":"C34CBE48276ADA","user_header":"https://static001.geekbang.org/account/avatar/00/30/20/3e/91c68049.jpg","comment_is_top":false,"comment_ctime":1661390493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661390493","product_id":100039001,"comment_content":"1、设计模式非常重要，以前读书时没意识到，工作了才开始意识到。实习和现在正式工作都是做开源大数据内核开发，刚开始上手看源码非常复杂，像是在读天书。现在的感触是设计模式的用处体现在读+改源码。现在的大数据软件设计非常优秀且复杂（flink、spark等），熟悉设计模式才能get到整个框架的原理、流程、设计思想。其次是改源码，为了保证拓展性、可维护性，必须使用设计模式。<br>2、最近的一个issue似乎用到了职责链模式（不是很确定），后面看到了再研究是否重构。","like_count":0},{"had_liked":false,"id":355249,"user_name":"高帅","can_delete":false,"product_type":"c1","uid":3077992,"ip_address":"北京","ucode":"50AC1404D20D23","user_header":"","comment_is_top":false,"comment_ctime":1661224514,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661224514","product_id":100039001,"comment_content":"早学，收益终生，对自己负责。","like_count":0},{"had_liked":false,"id":352260,"user_name":"hrbt0o","can_delete":false,"product_type":"c1","uid":1632138,"ip_address":"","ucode":"AF513292EEE137","user_header":"https://static001.geekbang.org/account/avatar/00/18/e7/8a/dc0478c6.jpg","comment_is_top":false,"comment_ctime":1658485400,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658485400","product_id":100039001,"comment_content":"自己用到的，应该是适配器模式，公司做了聊天项目，要对接第三方软件（企微、飞书、钉钉等），由于不同的第三方在相同的消息类型中（如文本类型、图片类型）使用的格式不一样，所以通过适配模式，将这些不同的第三方消息格式转为公司项目使用的消息格式。","like_count":0},{"had_liked":false,"id":351534,"user_name":"Jasper","can_delete":false,"product_type":"c1","uid":1202174,"ip_address":"","ucode":"A07ABF45D39089","user_header":"https://static001.geekbang.org/account/avatar/00/12/57/fe/beab006d.jpg","comment_is_top":false,"comment_ctime":1657871085,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657871085","product_id":100039001,"comment_content":"2022打卡","like_count":0},{"had_liked":false,"id":350920,"user_name":"SICUN","can_delete":false,"product_type":"c1","uid":1254261,"ip_address":"","ucode":"22A384904EB9E9","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/75/2b599841.jpg","comment_is_top":false,"comment_ctime":1657347316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657347316","product_id":100039001,"comment_content":"1.面试时会被别人问到也会用来问别人作为编码能力的考察；晋升时可通过阐述设计模式如何与业务结合作为答辩亮点；对阅读laravel框架源码很有帮助，因为laravel框架使用了大量设计模式<br>2.在交易系统中使用工厂模式创建处理 支付宝&#47;微信支付的服务类","like_count":0},{"had_liked":false,"id":348381,"user_name":"Mr.Jiang","can_delete":false,"product_type":"c1","uid":3023788,"ip_address":"","ucode":"AA90AA926E8DE8","user_header":"https://static001.geekbang.org/account/avatar/00/2e/23/ac/4d5217bd.jpg","comment_is_top":false,"comment_ctime":1655037530,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655037530","product_id":100039001,"comment_content":"1. 去年觉得设计模式固然重要，但始终不及其他技术及底层原理重要，觉得起码需要再积累一年经验再学习。<br><br>但是经过现在两年工作的经历和体会，发现其实框架源码也好，技术底层也罢，还有业务代码的质量，技术组件代码的质量，都需要设计模式。<br><br>王争老师说得好，框架源码也是需要基础扎实才可以看得进去的。对于这点我深有体会，比如我部门用到了消息队列，基于SpringCloudStream封装，但是里面写的其实并不算太好，也用了很多设计，但是我始终get不到设计的点，所以只看懂了皮毛。还有其他的一些源码，比如Kafka客户端，Spring的等等。甚至包括我们部门的业务代码，比如订单模块，营销模块，OMS模块，都用到了很多设计模式，自己了解电商全貌的时候无法理解设计的点，所以才醒过来发现设计模式的重要性，而且从现在就要开始去学，去实战。<br><br>说几个能让自己坚持下去的理由吧：<br>1.1 代码变得好看、易扩展、易读、易维护，自己赏心悦目，不再觉得是屎山，烂代码，并且不再畏惧去在里面加新功能以及改动。<br><br>1.2 夯实面向对象及设计思想，能有利于读懂其他大牛，优秀开源框架的代码和领会其设计思想，不再停留在功能和代码表面。<br><br>1.3 从功利的角度，为以后的面试问到这个能回答出来，且能丰富简历，为简历添砖加完。<br><br>1.4 从普通程序员-&gt; 优秀程序员的必备技能之一。<br><br><br>2. 在过往的项目经验中，我用到了和看到了以下的设计模式：<br><br>2.1 策略模式，在OMS系统对接多渠道订单，实现订单下载，转化等逻辑时，天然的多渠道就是多个策略，后续有新的平台如拼多多，抖音，直接添加新的平台策略即可。还有在上家小公司对接企业微信的时候，因为企业微信消息会有很多消息类型，如文本类型，卡片类型等，不同的消息类型需要被路由到不同的handler处理器里面进行处理，策略模式也得到了很多的使用。<br><br>2.2 责任链模式，在营销模块中，比如促销引擎的设计，维护了campaign的条件和奖励，当需要查询临时订单的促销优惠时，需要根据订单上的信息，经过规则场景过滤器责任链进行过滤判断，当前订单是否满足某个活动的优惠条件。<br><br>除此之外，责任链还可以用在订单取消队列中的同一模块的统一回撤链路，比如营销模块的优惠券，促销计数器等的链式回滚。<br><br>还可以用于流程器（类似于小型的任务编排功能），比如一个审批流程，需要经过固定的审批数据构建，数据校验，异常检查，审批结果保存，审批错误记录等这几个节点，都是通过一个bo贯穿整条链路做处理。<br><br>模版+抽象类也常用","like_count":0},{"had_liked":false,"id":348324,"user_name":"FOCUS","can_delete":false,"product_type":"c1","uid":2942404,"ip_address":"","ucode":"C1AD031F155EFE","user_header":"","comment_is_top":false,"comment_ctime":1654960111,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654960111","product_id":100039001,"comment_content":"后悔看晚了，刚做完一个项目，很好的练手机会，却没有利用起来。但是之前看过netty的源码，看到了大量责任链模式和观察者模式的使用。还有gateway，也有大量的责任链模式。<br>立个flag，学好设计模式，在下个项目中实操起来！","like_count":0},{"had_liked":false,"id":347224,"user_name":"二饼","can_delete":false,"product_type":"c1","uid":2415448,"ip_address":"","ucode":"48120565D135F7","user_header":"https://static001.geekbang.org/account/avatar/00/24/db/58/a7a0a85b.jpg","comment_is_top":false,"comment_ctime":1653826965,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1653826965","product_id":100039001,"comment_content":"去年出来工作，目前在普通的小公司搬砖。<br><br>Q: 聊一聊你对设计模式相关知识的重要性的看法；<br>在上学的时候有听说过设计模式，但是对于其的了解仅限于听说，脑海中只有一个粗浅的概念。出来工作后，看过几本相关的书，还翻过gof（不过没有看下去...），但是一直都是很懵懂的状态，只能讲几句理论，但是这到底是个什么东西，以及怎么使用，我是真的不清楚了。<br>现在工作上的业务虽然比较简单，但是我也从平常的 review  和 代码设计上发现了很多设计和组织上的不足，再加上有意识地读源码，像小争哥说的一样，从设计模式上就看不明白，因此只能更加上心地学习，入了这个专栏，希望能让量变成功变成质变！<br><br><br>Q: 在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>有想过在资源付费模块中使用建造器和组合模式用来计算，但是因为太理论，最终还是没有实现到代码中。不过像是经常遇见的单例、迭代器、观察者这些都可以在一些框架源码中接触到。","like_count":0},{"had_liked":false,"id":345683,"user_name":"钱鹏 Allen","can_delete":false,"product_type":"c1","uid":2518863,"ip_address":"","ucode":"7E95E82C0717DA","user_header":"https://static001.geekbang.org/account/avatar/00/26/6f/4f/3cf1e9c4.jpg","comment_is_top":false,"comment_ctime":1652508411,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652508411","product_id":100039001,"comment_content":"聊一聊你对设计模式相关知识的重要性的看法；在你过往的项目开发中，有没有用过某种设计模式？<br>设计SQL的时候，也需要借鉴设计模式，不然整体的运行时间指数级别增加。<br><br>是在什么场景下应用的？解决了什么问题？<br>目前正在设计公司的数仓分层，需要合理的代码结构。","like_count":0},{"had_liked":false,"id":345573,"user_name":"坚定的抢手","can_delete":false,"product_type":"c1","uid":2831233,"ip_address":"","ucode":"E5A5EC6196C518","user_header":"https://static001.geekbang.org/account/avatar/00/2b/33/81/3693f4d9.jpg","comment_is_top":false,"comment_ctime":1652409827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652409827","product_id":100039001,"comment_content":"1. 我是一个cpp开发者，每次让做设计，写设计文档，都不知道写什么。看了大佬说自己第一次做通用模块的心声，才发现，原来是因为自己不懂设计模式。java组的同事好像这方面就强很多，可能他们一开始就在研究这个方向吧。理解设计模式并灵活运用以后，最大的好处就是在设计的时候，知道自己应该考虑什么，而不是走一步看一步。<br>2. 单例模式，观察者模式，策略模式等都用过，不过用的不细致，可能勉强符合一些设计模式吧。","like_count":0},{"had_liked":false,"id":345357,"user_name":"林风自在","can_delete":false,"product_type":"c1","uid":1123468,"ip_address":"","ucode":"C347C10040FD55","user_header":"https://static001.geekbang.org/account/avatar/00/11/24/8c/9f38c9ac.jpg","comment_is_top":false,"comment_ctime":1652230937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652230937","product_id":100039001,"comment_content":"设计模式感觉重在于思想，而并非局限于23种设计模式，在实际项目开发中要避免因为设计模式而去用设计模式。<br><br>项目实际运用的还不少，比如单例模式，抽象工厂模式，装饰器模式，网关过滤器的时候用了责任链模式","like_count":0},{"had_liked":false,"id":345181,"user_name":"姚钫","can_delete":false,"product_type":"c1","uid":1498146,"ip_address":"","ucode":"ECB8B0627A4F9B","user_header":"https://static001.geekbang.org/account/avatar/00/16/dc/22/41a390ae.jpg","comment_is_top":false,"comment_ctime":1652092035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652092035","product_id":100039001,"comment_content":"220509 day01<br>1. 为了面试 2.能写出高质量的代码 3.提高复杂的代码设计和开发能力 4.阅读优秀框架的源码 5.更好的职业发展<br>2.做过支付项目, 要对支付方式进行路由,因为有很多渠道,之前都是使用if else,后改用工厂+策略,将整个流程进行抽象,接入新渠道只要继承一个抽象类重新自己逻辑即可","like_count":0},{"had_liked":false,"id":345087,"user_name":"lakeslove","can_delete":false,"product_type":"c1","uid":1277081,"ip_address":"","ucode":"65E14D29D3C981","user_header":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","comment_is_top":false,"comment_ctime":1652011794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652011794","product_id":100039001,"comment_content":"19年就买了，22年才开始学。<br>设计模式的理论学过挺多遍，但是和工作关联不上。<br>具体体现在：<br>1、面对复杂的业务无法很快的设计出可扩展的架构<br>2、知道代码很烂，但是重构代码又无从下手<br>3、同事写得用了很多设计模式的代码，看起来很吃力","like_count":0},{"had_liked":false,"id":344901,"user_name":"陌兮","can_delete":false,"product_type":"c1","uid":1415619,"ip_address":"","ucode":"00CE47CAECD5CD","user_header":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","comment_is_top":false,"comment_ctime":1651845146,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651845146","product_id":100039001,"comment_content":"每次需要设计组件开发的时候。总感觉脑海里的解法不够优雅，但是又想不到还有什么可以优化的。如果组件复杂，又总会引入一些相关性不大的类，很是头疼","like_count":0},{"had_liked":false,"id":343062,"user_name":"没有軒的筝","can_delete":false,"product_type":"c1","uid":1332535,"ip_address":"","ucode":"8B6A8A1B5472EE","user_header":"https://static001.geekbang.org/account/avatar/00/14/55/37/57aeb6af.jpg","comment_is_top":false,"comment_ctime":1650614784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650614784","product_id":100039001,"comment_content":"      之前以为程序是给机器看的，怎么写就行，只要把功能完成，但是根据工作的时间越来越长，发现程序是给开发者看的，如果设计不好，给后期的维护带来很大的困难，真是体会到了该一处而动全身那种感觉。<br>       设计模式近几年也一直在学，但是一直学不到真髓，有些程序设计不知道该用哪种设计模式，即使最后选定了设计模式，也感觉不是最好的设计。","like_count":0},{"had_liked":false,"id":341373,"user_name":"Hero","can_delete":false,"product_type":"c1","uid":1321726,"ip_address":"","ucode":"33D7939CC3C815","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/fe/197449a0.jpg","comment_is_top":false,"comment_ctime":1649570380,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649570380","product_id":100039001,"comment_content":"1:工作两年多的程序员，一直知道设计模式很重要，但是一直没有学习，处于道理我都懂，就是没行动的状态。根本原因还是自己不作为，想呆在自己的舒适区，不想学习新东西，最近想学习Spring的源码，发现无从下手，根本看不下去，发现真的是自己基础太差了。现在正在跟着廖雪峰老师的Java教程复习基础知识，跟着王争老师的课程学习设计模式，把这两个课程看完，准备在系统的学习一下Spring知识和源码。<br>2:我用过的设计模式<br>单列模式：<br>建造者模式：<br>工厂模式：","like_count":0},{"had_liked":false,"id":341344,"user_name":"白云","can_delete":false,"product_type":"c1","uid":2667052,"ip_address":"","ucode":"289E2E8A3EBF1B","user_header":"https://static001.geekbang.org/account/avatar/00/28/b2/2c/09fc5b7b.jpg","comment_is_top":false,"comment_ctime":1649558816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649558816","product_id":100039001,"comment_content":"1、不想被吐槽，这个太有感觉了，代码review的时候都不想让别人看，都是基础的业务逻辑代码堆砌，框架是leader搭的，稍微复杂点就犯懵，这个时候学习设计模式，把代码写的易扩展，好维护就相当重要了。<br>2、说来惭愧，好像没有用到过设计模式，知道项目里有用观察者模式，但是我那是别人写的，","like_count":0},{"had_liked":false,"id":341231,"user_name":"唐宋元明清","can_delete":false,"product_type":"c1","uid":1758582,"ip_address":"","ucode":"744941454E86B4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJS1VejyuiaIGYT7cnpV15gGGvW9jarjD6tCUDt7JVGicicCF6stMjBRKj6NKic4ZfxYtzz75eiaDL5AnA/132","comment_is_top":false,"comment_ctime":1649434300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649434300","product_id":100039001,"comment_content":"设计模式本身不重要，重要的掌握模式的理念和初衷，即设计模式的原则。从原则出发，去想下设计模式的设计思路","like_count":0},{"had_liked":false,"id":340991,"user_name":"Geek_441001","can_delete":false,"product_type":"c1","uid":2421724,"ip_address":"","ucode":"159C7D1965FDD9","user_header":"","comment_is_top":false,"comment_ctime":1649257552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649257552","product_id":100039001,"comment_content":"课堂讨论：<br>1.设计模式重要性的看法。<br>已经写了几年代码了，就像王老师说的一直是代码的堆砌。代码复用率低，即使抽出来成单独的函数，对于此函数应该放到哪一个类中、项目如何分层等问题的认知都比较薄弱。甚至开始怀疑自己是不是在面向对象编程。最近公司来了字节的大佬，基于洋葱架构开发了通用单体框架，代码之清新脱俗，让我意识到自己的编码能力确实需要锻炼下。<br><br>2.以往使用的设计模式。<br>实际上没有特地去使用设计模式，但是比如策略模式、简单工厂模式等，可是不知不觉就在代码里提现出来了。另外还有一些框架当中的设计模式，觉得用得很好，也就参考其实现了。比如责任链模式，在orm框架中用得很频繁，觉得很不错也有去借鉴其实现方式。","like_count":0},{"had_liked":false,"id":340394,"user_name":"搬砖农民工👩‍🌾","can_delete":false,"product_type":"c1","uid":2873541,"ip_address":"","ucode":"50E0602562E968","user_header":"https://static001.geekbang.org/account/avatar/00/2b/d8/c5/6a553741.jpg","comment_is_top":false,"comment_ctime":1648796796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648796796","product_id":100039001,"comment_content":"针对争哥这篇文章，在我个人观点中主要是想让我们思考几个问题：<br>1、为什么面试者都会问到设计模式，是习惯，还是一种面试流程，还是因为在我们编程中占着举足轻重的位置呐？<br>2、在自己开发过程中有没有反省过或者写完之后自己去优化自己的代码，防止后人吐槽自己的代码，上一篇争哥也提到了代码的可读性问题，这不仅是对自己的负责，更是对下位接收代码人尊重？<br>3、为什么每个开发人员都要去学习设计模式？它能带给我们什么？这些在这争哥的文章都有各自的答案，耐心斟读，可以体会到不同的含义！<br>对一个刚步入java领域的新成员，我对设计模式的认识也并不深入，只想让自己变强，让自己的知识视野更宽阔一些吧；<br>对于问题，在我们开发中有着许许多多的设计模式，在一些框架中可以看到很多成熟的设计模式的使用；但前提要知道设计模式的形式，看懂了形式，才会更容易的去看里面的细节和逻辑；<br>在我开发中经常用的设计模式也就两三种：<br>一是：策略模式--》简单来说，我们出行会有多种形式，可以做出租车，公交，单车等等，但每一个选择就是一组策略，而在实际开发中我们可以定义一个接口，定义枚举等相关类来实现具体的结果；<br>二是：模板模式--》在我个人看是主要是定义一些操作流程，并把这些操作流程延迟下来，具体场景我们需要搭建自己模板<br>三是：单列模式，想必这个大家也经常用得到吧<br>所以在我看来设计模式在我们编程中很重要，但常用的设计模式并不是很多，它实现高内聚低耦合的效果，方便对项目的增加和扩展等<br>以上是我个人观点，如果哪里不对，还请大佬对一个刚初入java世界的萌新指出不对之处，本人在此感谢！","like_count":0},{"had_liked":false,"id":340043,"user_name":"王华杰","can_delete":false,"product_type":"c1","uid":1666474,"ip_address":"","ucode":"CA07326F8A04B7","user_header":"https://static001.geekbang.org/account/avatar/00/19/6d/aa/34b6ecff.jpg","comment_is_top":false,"comment_ctime":1648552979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648552979","product_id":100039001,"comment_content":"非常重要，因为我代码就写的很烂，bug频出。一般用的比较多的就是工厂模式。","like_count":0},{"had_liked":false,"id":339564,"user_name":"鸭duck农民工","can_delete":false,"product_type":"c1","uid":1862908,"ip_address":"","ucode":"F2D17893DEAD34","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJWxIyKo31BtkbEKTbnBP1roU3MotxYgx0RkkK0hlpQzXNVuIM6wkqMndtXvwT5t03EUX95El0UFw/132","comment_is_top":false,"comment_ctime":1648189703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648189703","product_id":100039001,"comment_content":"我觉得设计模式的重要性主要有三点：<br>1.应对复杂的需求。如果不懂设计模式，很容易写出只满足当前需求的代码，缺乏可维护性、可拓展性；<br>2.利于优秀框架及源码的阅读。其中涉及较多设计模式，如果不懂设计模式的话，可能理解起来比较慢，或者不知道为什么要使用这些设计模式；<br>3.积累内功，由此及彼。通过积累设计模式的使用经验，为后续设计复杂系统提供底层基础。","like_count":0},{"had_liked":false,"id":339168,"user_name":"加油(ง •̀_•́)ง🐻","can_delete":false,"product_type":"c1","uid":2455440,"ip_address":"","ucode":"48C656329DF89C","user_header":"https://static001.geekbang.org/account/avatar/00/25/77/90/ae705448.jpg","comment_is_top":false,"comment_ctime":1647954099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647954099","product_id":100039001,"comment_content":"希望可以有助于看源码","like_count":0},{"had_liked":false,"id":337736,"user_name":"陈君宙","can_delete":false,"product_type":"c1","uid":1343018,"ip_address":"","ucode":"50A6420F9FAADE","user_header":"https://static001.geekbang.org/account/avatar/00/14/7e/2a/98358fe0.jpg","comment_is_top":false,"comment_ctime":1646998042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646998042","product_id":100039001,"comment_content":"感觉设计模式重要 但是出来工厂 单利 基本不认得","like_count":0},{"had_liked":false,"id":335130,"user_name":"Geek_58fcf2","can_delete":false,"product_type":"c1","uid":2918421,"ip_address":"","ucode":"3B052EBC012E8B","user_header":"","comment_is_top":false,"comment_ctime":1645349278,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645349278","product_id":100039001,"comment_content":"设计模式：<br>1.面试<br>2.提升编码设计能力写出高质量代码<br>3.复杂业务编码设计和开发能力<br>4.更容易看懂别人的源代码<br>5.提升职业竞争力","like_count":0},{"had_liked":false,"id":334794,"user_name":"Beginner!","can_delete":false,"product_type":"c1","uid":2302099,"ip_address":"","ucode":"4A9C4E27D7E436","user_header":"https://static001.geekbang.org/account/avatar/00/23/20/93/dac66325.jpg","comment_is_top":false,"comment_ctime":1645111861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645111861","product_id":100039001,"comment_content":"自己看法:使用设计模式的目的，降低代码耦合度，便于扩展和复用。","like_count":0},{"had_liked":false,"id":334707,"user_name":"Geek_f23551","can_delete":false,"product_type":"c1","uid":2916054,"ip_address":"","ucode":"CA8147BC812D59","user_header":"","comment_is_top":false,"comment_ctime":1645086394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645086394","product_id":100039001,"comment_content":"打卡one day：<br>学好设计模式相关知识，我觉得可以让自己在设计代码的时候能够写出高质量的代码，给别人一种高级感<br>在公司实习的过程中，发现一些源码的设计中使用了单例模式创建实例对象。还有一些使用了工厂模式                                                                                                ","like_count":0},{"had_liked":false,"id":333877,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1644568499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644568499","product_id":100039001,"comment_content":"我记得耗子叔说过，虽然有人讲不要过度的设计，但是能现在设计的代码，就要重点去设计，等到你要改东西的时候，你会感激那时候你的设计。<br>","like_count":0},{"had_liked":false,"id":333396,"user_name":"Geek_1af452","can_delete":false,"product_type":"c1","uid":2908485,"ip_address":"","ucode":"2FF76FB24B3FD1","user_header":"","comment_is_top":false,"comment_ctime":1644324005,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1644324005","product_id":100039001,"comment_content":"交作业：<br>1、非常重要，不然看源代码真的是一头雾水<br>2、大部分开发工作都是拧螺丝，有幸被leader安排了一次系统重构，大大提高了不同算法接入的效率，并将分位置预估能力完美复用到全场景","like_count":0},{"had_liked":false,"id":333013,"user_name":"Tony Lai","can_delete":false,"product_type":"c1","uid":1903111,"ip_address":"","ucode":"E3D8B8933C9151","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0a/07/c15b3b85.jpg","comment_is_top":false,"comment_ctime":1643959320,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643959320","product_id":100039001,"comment_content":"作业：<br>问题1:<br>我觉得确实设计模式是对我们日常开发来说是很重要的一点，是前人的一些智慧的结晶，对有些特定的问题可以有些固定的解决方法和套路，可以让我们避开很多的坑，这些设计模式的思想比如单一原则，开闭原则，接口隔离原则，迪米特法则，依赖倒置原则，这些基本的原则可以提高我们代码的，可读性，可复用性，可维护性，让代码更加健壮，易读，易懂，但是说实话我自己只是知道这些东西，真正到使用的时候还是用的很少，比如我知道用策略模式可以减少if -else的代码<br>问题2:<br>在过往的项目中用的多的就是构建者模式，用来构建一些复杂的对象，解决了对于复杂对象创建容易出错的问题，和一些单例模式创建全局唯一的对象<br><br>下一步行动<br>   自己的敲的代码偏少，要在接下来的学习过程中除了理论知识的学习还大量的去实践，在项目中多用<br>   例外多看看评论区一些优秀的评论，内化为自己的知识<br>","like_count":0},{"had_liked":false,"id":331712,"user_name":"Geek_1511df","can_delete":false,"product_type":"c1","uid":2828097,"ip_address":"","ucode":"5BDD0CEC52B96E","user_header":"","comment_is_top":false,"comment_ctime":1642733386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642733386","product_id":100039001,"comment_content":"我很low的, 感觉平时的工作基本就是CRUD, 我也试图去想办法优化代码但是不得其法啊, 每次学习设计模式看着好像都懂了, 但是到了实际工作中就是应用不上, 以致于我现在都是要优化某一部分的代码都是去查设计模式看看适用于哪种, 做不到信手拈来","like_count":0},{"had_liked":false,"id":330790,"user_name":"李兴振","can_delete":false,"product_type":"c1","uid":2004552,"ip_address":"","ucode":"78E54478F38DC1","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/48/a0c6a06c.jpg","comment_is_top":false,"comment_ctime":1642163459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642163459","product_id":100039001,"comment_content":"现在开始学起吧 设计模式 项目中也用 但系统性不强","like_count":0},{"had_liked":false,"id":328302,"user_name":"require","can_delete":false,"product_type":"c1","uid":2820671,"ip_address":"","ucode":"3AA3DCE0CD73E6","user_header":"","comment_is_top":false,"comment_ctime":1640658700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640658700","product_id":100039001,"comment_content":"设计模式就是一种套路，就像是xx剑谱，即使功力再深厚，最终还是得回归到剑法，才能最大程度发挥实力<br>","like_count":0},{"had_liked":false,"id":328199,"user_name":"Geek_1188b5","can_delete":false,"product_type":"c1","uid":2877774,"ip_address":"","ucode":"1A9B66D5F38436","user_header":"","comment_is_top":false,"comment_ctime":1640601350,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640601350","product_id":100039001,"comment_content":"设计模式主要是解决代码的易读性，维护性，以及解耦。在实际的项目中可能用的比较多的就是单例，观察者，工厂这类常见的设计模式。我觉得其他的设计模式没有用这要还是不够懂他们。","like_count":0},{"had_liked":false,"id":326767,"user_name":"学不动了","can_delete":false,"product_type":"c1","uid":1235562,"ip_address":"","ucode":"6855C982ECC3A8","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/6a/6b96edbd.jpg","comment_is_top":false,"comment_ctime":1639665446,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639665446","product_id":100039001,"comment_content":"1.设计模式就是一套传承多年的拳法，每一个招式都有其精妙之处。不懂设计模式，面对复杂多变的需求，写出的代码后期会变成一坨shit。掌握设计模式，写出易读、易维护高质量的代码，自己赏心悦目，同时看到也有面～<br>2.工作中肯定有用到某些设计模式，但是我不认得它们，不知道叫什么～","like_count":0},{"had_liked":false,"id":323911,"user_name":"KeChin","can_delete":false,"product_type":"c1","uid":2550881,"ip_address":"","ucode":"57BF02DB1201B9","user_header":"","comment_is_top":false,"comment_ctime":1638210975,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638210975","product_id":100039001,"comment_content":"好的設計模式可以做到容易維護、閱讀、擴展。<br><br>有用spring 做開發，所以應該算用過singleton 以及prototype、再來是beanFactory 簡單工廠模式。日常開發應該有用過template 以及裝飾者模式。<br><br>","like_count":0},{"had_liked":false,"id":322855,"user_name":"Geek_225452","can_delete":false,"product_type":"c1","uid":2850015,"ip_address":"","ucode":"EAD6D398C2A42E","user_header":"","comment_is_top":false,"comment_ctime":1637633862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637633862","product_id":100039001,"comment_content":"为什么要学习设计模式？<br>1. 如果把编程当做我们完成一件复杂的事的话，设计模式就是我们的行为准则，知道我们哪些可以做，哪些不可以做，怎么做才能少走弯路<br>2. 大型的项目必定是满足，易读、易扩展、易维护的，因此比定是结构逻辑比较强的，学习设计模式有利于学习优秀的开源代码设计，提升自己的整体逻辑设计思维<br>3. 设计模式是一种思维方式，有时候并不能给我们提供解决方案，但是让我们在应对复杂问题时，知道从哪下手，行程一套分析处理框架","like_count":0},{"had_liked":false,"id":321024,"user_name":"auch","can_delete":false,"product_type":"c1","uid":2227105,"ip_address":"","ucode":"462B7410040102","user_header":"https://static001.geekbang.org/account/avatar/00/21/fb/a1/601c3808.jpg","comment_is_top":false,"comment_ctime":1636624453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636624453","product_id":100039001,"comment_content":"设计模式相关知识的重要性<br> 1. 更好的理解模块设计，架构设计的思想与原则<br> 2. 提升自我知识水平，使自身的代码水平超越CRUD<br> 3. 为阅读源码做准备<br>在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br> 1. 有用过模板方法，对要开发的众多组件抽象出其共性，然后不同的组件有其不同的实现，解析了组件耦合的问题<br><br><br> <br>","like_count":0},{"had_liked":false,"id":320228,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":2763179,"ip_address":"","ucode":"3588850B3370C8","user_header":"https://static001.geekbang.org/account/avatar/00/2a/29/ab/59a6e437.jpg","comment_is_top":false,"comment_ctime":1636162717,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1636162717","product_id":100039001,"comment_content":"好处很多，过度设计的问题也经历过。我其实在大学就开始接触设计模式，现在依然记得第一次看gof书籍的感觉，那震撼程度，绝对比李安受到的震撼大好几倍。后来也继续学习设计模式并应用到项目中。<br><br>最常用的几个模式：builder，装饰器，监听者，命令，策略，当然还有最最常用且滥用的单例，每个项目总能找到几个不同的manager😂","like_count":0},{"had_liked":false,"id":319464,"user_name":"海魂","can_delete":false,"product_type":"c1","uid":1126307,"ip_address":"","ucode":"850CB4FFA5C026","user_header":"https://static001.geekbang.org/account/avatar/00/11/2f/a3/6aadcde7.jpg","comment_is_top":false,"comment_ctime":1635821235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635821235","product_id":100039001,"comment_content":"笔记：<br>１．设计模式在面对复杂的业务，SDK设计，阅读源码这这个方面我认为很有帮助．<br>２．我在工作中实际用到的最多就是单例了","like_count":0},{"had_liked":false,"id":319242,"user_name":"慢动作","can_delete":false,"product_type":"c1","uid":2184311,"ip_address":"","ucode":"F47BDAEC694E32","user_header":"https://static001.geekbang.org/account/avatar/00/21/54/77/b0986fed.jpg","comment_is_top":false,"comment_ctime":1635692212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635692212","product_id":100039001,"comment_content":"1、记得上大学时，c++老师就拿着一本设计模式相关的书籍，让我们去看，说后边大有用处。再结合自己校招和工作的经历，让我对如何写出高质量代码有很大的兴趣。希望可以借助这门课程，提高自己的代码水平。<br>2、使用的比较简单的工厂模式，用于获取不同的handler。","like_count":0},{"had_liked":false,"id":318731,"user_name":"流云追风","can_delete":false,"product_type":"c1","uid":2611950,"ip_address":"","ucode":"16D738406CB191","user_header":"https://static001.geekbang.org/account/avatar/00/27/da/ee/63090718.jpg","comment_is_top":false,"comment_ctime":1635406138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635406138","product_id":100039001,"comment_content":"用过观察者、单例、工厂等,需要了解每个模式适应的场景,不要滥用","like_count":0},{"had_liked":false,"id":318183,"user_name":"dog_brother","can_delete":false,"product_type":"c1","uid":1619597,"ip_address":"","ucode":"9F64D3C6D815FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U9LYlZEx2HrpsELeh3KMlqFiaKpSAaaZeBttXRAVvDXUgcufpqJ60bJWGYGNpT7752w/132","comment_is_top":false,"comment_ctime":1635175131,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635175131","product_id":100039001,"comment_content":"学习这个专栏，我最大的目标是，提高复杂代码的设计和开发能力。","like_count":0},{"had_liked":false,"id":317633,"user_name":"萝卜头","can_delete":false,"product_type":"c1","uid":1254333,"ip_address":"","ucode":"4A05A9C1213D50","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/bd/a57350da.jpg","comment_is_top":false,"comment_ctime":1634872794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634872794","product_id":100039001,"comment_content":"确实学习一些东西要早点学习，这样平时开发就可以使用起来了。<br>作业：<br>一：目前对开发的理解是全栈工程师，需要完成设计、开发、测试、运维的能力。说实话自己的能力还是不太行，前段时间有任务需要做设计，就感觉到明显的吃力，做出一个可靠性好，可扩展性强，低耦合；确实对我来说比较有挑战，意识到设计模式的重要性。<br>二：单例吧，一些配置文件只要初始化一次就行了，使用golang sync.once","like_count":0},{"had_liked":false,"id":316325,"user_name":"Josh","can_delete":false,"product_type":"c1","uid":1732495,"ip_address":"","ucode":"94516251AA0B62","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6f/8f/0e1fd90f.jpg","comment_is_top":false,"comment_ctime":1634270598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634270598","product_id":100039001,"comment_content":"自己平时编码过程中所使用的设计模式，大多是些比较简单的比如策略模式之类，对编码方式的细节有所改善，但对系统的设计还没有特别多的体感，希望后续学习能解答并体悟自己的这块空白。","like_count":0},{"had_liked":false,"id":315773,"user_name":"SupeRyin丶詩","can_delete":false,"product_type":"c1","uid":1315130,"ip_address":"","ucode":"C5143296F777CC","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/3a/f467fa7d.jpg","comment_is_top":false,"comment_ctime":1633994607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633994607","product_id":100039001,"comment_content":"之前想做一个东西，关于爬虫的，功能实现了，但是代码写得很烂。重构想用一些设计模式，不知道应该怎么选择，其实就暴露了自己设计模式很薄弱吧","like_count":0},{"had_liked":false,"id":314685,"user_name":"Geek4901","can_delete":false,"product_type":"c1","uid":2715323,"ip_address":"","ucode":"7EA02BF7A84355","user_header":"","comment_is_top":false,"comment_ctime":1633326371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633326371","product_id":100039001,"comment_content":"看源码的时候就发现了,都是设计模式...  必须要掌握, 加油了!","like_count":0},{"had_liked":false,"id":314210,"user_name":"Bacchus","can_delete":false,"product_type":"c1","uid":1830814,"ip_address":"","ucode":"A8AA7E4909B201","user_header":"https://static001.geekbang.org/account/avatar/00/1b/ef/9e/fd29bdd8.jpg","comment_is_top":false,"comment_ctime":1632900658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632900658","product_id":100039001,"comment_content":"设计模式基础一塌糊涂，单单知道一些设计模式，不知道怎么用，不知道什么时候用","like_count":0},{"had_liked":false,"id":313766,"user_name":"Geek_1","can_delete":false,"product_type":"c1","uid":2704407,"ip_address":"","ucode":"59300A73996D20","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/17/e4fdcaad.jpg","comment_is_top":false,"comment_ctime":1632654938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632654938","product_id":100039001,"comment_content":"今年毕业，刚刚参加工作，目前使用过得设计模式：单例模式，建造者模式","like_count":0},{"had_liked":false,"id":312426,"user_name":"在左","can_delete":false,"product_type":"c1","uid":2767626,"ip_address":"","ucode":"1331E31BF69820","user_header":"https://static001.geekbang.org/account/avatar/00/2a/3b/0a/3b235a7e.jpg","comment_is_top":false,"comment_ctime":1631795940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631795940","product_id":100039001,"comment_content":"1.觉得设计模式很重要，非常值得学习。我们公司很多项目的代码就像作者说的那样，根本维护不动。妥妥的屎山一样的代码，看着非常难受。然而自己又是个半吊子，即使重构也不知道该怎么重构好。所以我来学习相关的知识。我希望是能把公司的相关项目代码重构掉，让变成高质量的代码。能够解放我自己的维护时间，让自己看着也舒服。<br>2.这方面比较欠缺，并没有让我觉得能够让人眼前一亮的设计。","like_count":0},{"had_liked":false,"id":311020,"user_name":"沐","can_delete":false,"product_type":"c1","uid":1326537,"ip_address":"","ucode":"678F6A0C778CDD","user_header":"https://static001.geekbang.org/account/avatar/00/14/3d/c9/a1e6a307.jpg","comment_is_top":false,"comment_ctime":1631019565,"is_pvip":false,"discussion_count":0,"race_medal":3,"score":"1631019565","product_id":100039001,"comment_content":"之前的工作中用的比较多的设计模式有：单例模式，工厂模式，观察者模式，模板模式。","like_count":0},{"had_liked":false,"id":308020,"user_name":"刘泽民","can_delete":false,"product_type":"c1","uid":2731016,"ip_address":"","ucode":"E4F55018D01ABD","user_header":"","comment_is_top":false,"comment_ctime":1629360038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629360038","product_id":100039001,"comment_content":"设计模式是针对软件设计中一些共性问题做出的一个优秀的技术解决方案，在遵循代码设计原则的基础上进行优化提炼","like_count":0},{"had_liked":false,"id":307421,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":2009059,"ip_address":"","ucode":"E4E5A25AF08961","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLT5FUVKibUC0YcbkIkDmaoXBTP872icNbL4mTgiaQO97yOZ6Ff5r3IhYibpInia153858libloqw7n2obw/132","comment_is_top":false,"comment_ctime":1629095232,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629095232","product_id":100039001,"comment_content":"1. 之前大致学习过一遍设计模式，但是对于具体如何使用不是特别理解，真正实现功能的时候希望能写出最优的实现方案，但发现总找不到合适的方式。<br>2. 使用过单例模式，工厂模式和模板模式，其中模板模式主要是解决了一系列策略相同但具体细节不同的功能","like_count":0},{"had_liked":false,"id":307382,"user_name":"Geek_7ed5e9","can_delete":false,"product_type":"c1","uid":2572349,"ip_address":"","ucode":"124EFF40E15E6A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Xia3ZAGK5zB9cBbOxAY0dI3JuglaHCtvCI9R2JvJB8ECuu0Ys8tMWGN9HicMl2KxDibqGO2fr9cJGjlOIcKSUdqUA/132","comment_is_top":false,"comment_ctime":1629074589,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629074589","product_id":100039001,"comment_content":"学好设计模式的重要性<br>1.能更轻松读懂别人写的好代码，理解作者的思路<br>2.解决复杂的设计问题，写出易扩展，易维护的代码<br>曾经用到过的设计模式<br>单例模式<br>为了应付面试，环境中只存在一个实例<br>1.只需要一个实例，如controller,service<br>2.只能有一个","like_count":0},{"had_liked":false,"id":306996,"user_name":"Geek_66589e","can_delete":false,"product_type":"c1","uid":1783777,"ip_address":"","ucode":"FFE9CCB15015EE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/37/e1/e47b1819.jpg","comment_is_top":false,"comment_ctime":1628821221,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628821221","product_id":100039001,"comment_content":"课后作业<br>(1)实际上我对设计模式没有太多的了解，只是稍微看过一些相关的文章，印象里设计模式应该是算是一种捷径，可以帮助你完成代码的设计<br>(2)因为我没有进行过系统的学习，日常工作中的编码都是依靠经验来完成的，自己可能使用过，但是自己没有意识到。","like_count":0},{"had_liked":false,"id":306654,"user_name":"小周","can_delete":false,"product_type":"c1","uid":2453498,"ip_address":"","ucode":"7ED7BC27A46C4C","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/fa/615a0df3.jpg","comment_is_top":false,"comment_ctime":1628658466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628658466","product_id":100039001,"comment_content":"个人认为合理使用设计模式能够有效的提高代码的灵活性、扩展性以及可维护性等，同时，学习设计模式不仅是为了学习内功，更是为了能写出高质量的代码。因此学习设计模式是非常有必要的。","like_count":0},{"had_liked":false,"id":306584,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1628613802,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1628613802","product_id":100039001,"comment_content":"个人认为高内聚低耦合是解决计算机大部分问题的一个万能通解。我是c语言入的门，虽然c没有类，对象。但是函数这个东西什么语言都有，最简单解耦就是参数尽量少传，以及尽量少调用其他函数。我玩python最难受就是python的库多，但是就是这些库多导致我Python的好多外部麻烦也是库多版本问题以及库的依赖问题。","like_count":0},{"had_liked":false,"id":306338,"user_name":"Geek_b7eb88","can_delete":false,"product_type":"c1","uid":1573715,"ip_address":"","ucode":"0EB46381D9B1CB","user_header":"","comment_is_top":false,"comment_ctime":1628501590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628501590","product_id":100039001,"comment_content":"课堂讨论：<br>作为移动端开发，刚开始不觉得设计模式有多重要，只是单例能解决数据存储，观察者解决数据更新等简单问题而已。随着工作经验的增加，遇到了需要移动端结合UI处理复杂数据的问题，就懵逼了。感觉怎么写都不对。希望对设计模式有个整体的认知。 自己目前的观点是:再牛逼的设计模式也抵不过一个智障的产品经理。（手动狗头）","like_count":0},{"had_liked":false,"id":305128,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1627832516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627832516","product_id":100039001,"comment_content":"作为一个新手程序员，学习设计模型的动力更多是来自于面试，平时用过的设计模型也只有简单工厂模式和策略模式","like_count":0},{"had_liked":false,"id":304181,"user_name":"东方蓂荚","can_delete":false,"product_type":"c1","uid":1128681,"ip_address":"","ucode":"B794BAD4971F5A","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/e9/f4d612d7.jpg","comment_is_top":false,"comment_ctime":1627288363,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1627288363","product_id":100039001,"comment_content":"设计模式看法：<br>我是因为在工作中遇到想重构代码发现无从下手，在看了很多案例之后发现自己对设计模式基本没有了解，不懂为什么他会这么设计这个框架，才决定来学习设计模式的。<br>其实在工作中，设计模式还是很重要的，随着互联网的发展，已经不再是以前简单的业务代码堆砌，更多的考虑的是项目的可维护性、健壮性、可读性等功能。如果对设计模式没有基本的了解，那么对以后项目的扩展性及维护性是致命的。<br>当你想去重构前辈写的代码时，会有一种吃shi的感觉，但又有一种无从下手的焦虑。<br>同时，掌握好数据结构对学习好的开源框架还是很有帮助的。最起码能看明白为什么这么设计，这么设计的好处在哪里。不会有一种很迷茫的感觉。","like_count":0},{"had_liked":false,"id":304039,"user_name":"九先生","can_delete":false,"product_type":"c1","uid":1122533,"ip_address":"","ucode":"A63A333299D485","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/e5/f66d6144.jpg","comment_is_top":false,"comment_ctime":1627203423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627203423","product_id":100039001,"comment_content":"很喜欢老师的这句话：<br>投资要趁早，这样我们才能尽早享受复利。同样，有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读。这样在你后面的生活、工作、学习中，才能一直都发挥作用。不要等到好多年后，看到了，才恍然大悟，后悔没有早点去学、去看。<br><br>作业：<br>以前对设计模式，用得最多的是建造者模式、策略模式<br>建造者模式：在new一个对象时候需要传入很多个参数，如果在构造方法上有有很多的参数的话会非常不美观，所以使用了建造者模式。<br>策略模式：之前支付功能时，不同的银行支付逻辑不一样，但是他们又都是一个职责之内，为了不写满屏幕的else if这种烂代码，使用策略模式实现：接口+抽象类（通用功能）+多个接口实现类来实现，做到了高内聚低耦合这种高质量的代码<br>","like_count":0},{"had_liked":false,"id":303344,"user_name":"Mine","can_delete":false,"product_type":"c1","uid":1545087,"ip_address":"","ucode":"59A5E2E939B522","user_header":"https://static001.geekbang.org/account/avatar/00/17/93/7f/906641ae.jpg","comment_is_top":false,"comment_ctime":1626743837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626743837","product_id":100039001,"comment_content":"想到设计模式，脑中第一冒出的感觉就是高大上，是一种很厉害的技术；<br>然后再想细细思考什么是设计模式，除了知道有23种经典模式，其它就很模糊了；<br>至于重要性，肯定知道很重要，但真的真的很模糊，受限于能力或者说是懒，平常的编码中不会刻意去提炼、使用。<br>也有可能使用了却不知道，只是没那么规范，毕竟单例、工厂、观察者用的场景还是有的，<br>争取学完课程后，能返回来回答第二个话题，嘎嘎。。。","like_count":0},{"had_liked":false,"id":302627,"user_name":"孙静","can_delete":false,"product_type":"c1","uid":1424967,"ip_address":"","ucode":"1EDC6DCAA99490","user_header":"https://static001.geekbang.org/account/avatar/00/15/be/47/13f28bce.jpg","comment_is_top":false,"comment_ctime":1626308036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626308036","product_id":100039001,"comment_content":"1.设计模式的好处我觉得可以让我们的代码可以有扩展性，阅读性高，有逻辑性，可复用性高，看起来更体面<br><br>2.工作中自己写设计模式比较少也就是工厂方法、单例","like_count":0},{"had_liked":false,"id":299660,"user_name":"达尼亚尔","can_delete":false,"product_type":"c1","uid":1556489,"ip_address":"","ucode":"028C3BF9AE55EC","user_header":"https://static001.geekbang.org/account/avatar/00/17/c0/09/f1280359.jpg","comment_is_top":false,"comment_ctime":1624785903,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1624785903","product_id":100039001,"comment_content":"我用过策略模式和模板方法模式。策略模式主要是用来优化代码中繁琐的if else。模板方法的话，让一些业务处理过程变得规范一些，有一定步骤。","like_count":0},{"had_liked":false,"id":299476,"user_name":"冰糕不冰","can_delete":false,"product_type":"c1","uid":1134761,"ip_address":"","ucode":"B754FE464BA426","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","comment_is_top":false,"comment_ctime":1624668632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624668632","product_id":100039001,"comment_content":"学习设计模式的重要性:<br>1.减少垃圾代码<br>2.提高复杂项目设计能力<br>3.读懂开源代码<br>4.指导团队初级程序员工作","like_count":0},{"had_liked":false,"id":299370,"user_name":"易飞","can_delete":false,"product_type":"c1","uid":2630424,"ip_address":"","ucode":"32AC28754237F7","user_header":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","comment_is_top":false,"comment_ctime":1624600862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624600862","product_id":100039001,"comment_content":"设计模式，只在面试中用到过。。","like_count":0},{"had_liked":false,"id":297374,"user_name":"大头","can_delete":false,"product_type":"c1","uid":1315367,"ip_address":"","ucode":"C1FB2C8A0FB0C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/27/32746bbf.jpg","comment_is_top":false,"comment_ctime":1623489908,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1623489908","product_id":100039001,"comment_content":"1 观察者模式，部门名称变更后，其他冗余部门名称的地方异步更新<br>2 链条模式，对入参进行多级过滤<br>3 策略模式，根据输入不同，更新不同类的数据<br>4 工厂模式，配合策略模式使用<br>5 建造者模式，okhttp创建实例<br>6 代理模式，代理处理rpc请求","like_count":0},{"had_liked":false,"id":297075,"user_name":"Faded","can_delete":false,"product_type":"c1","uid":2655908,"ip_address":"","ucode":"9BFD018D7FAF7B","user_header":"https://static001.geekbang.org/account/avatar/00/28/86/a4/39115ec9.jpg","comment_is_top":false,"comment_ctime":1623300790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623300790","product_id":100039001,"comment_content":"1.对设计模式相关知识的重要性的看法：<br>  之前还没看这个课程，就感觉挺重要的，看了这一节之后，感觉就像是从初级到资深程序员的必需知识。<br>2.在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题<br>  对于刚实习的我来说，并没有在实际项目中应用过任何设计模式，顶多就是了解了一些设计模式的理论知识。<br>","like_count":0},{"had_liked":false,"id":296958,"user_name":"HSC胡舒程","can_delete":false,"product_type":"c1","uid":1941115,"ip_address":"","ucode":"77D81890F5E66B","user_header":"","comment_is_top":false,"comment_ctime":1623240139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623240139","product_id":100039001,"comment_content":"设计模式的重要性不言而喻，很多时候使用良好的设计模式会使提高代码的可扩张性，并且设计模式可以说是程序员们的通用语言，通过设计模式编写的出的代码可读性也非常强，更易于别的程序员来理解你的代码。<br>目前来说用到的设计模式种类比较少，但是单例模式用了不少，主要是用来作为一个全局的数据存储类，在任何时候都可以从中获取数据。","like_count":0},{"had_liked":false,"id":296895,"user_name":"楼外楼","can_delete":false,"product_type":"c1","uid":1243180,"ip_address":"","ucode":"791F2CA15B8F1F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/sgEfkeMSIIibeH4l0HS8uwM6PGY3DSHoW5tV9l1hDQ06tr3OnI7F545Wdxsh59rqOKnzjLUpCcEqic3P9zZbKzPQ/132","comment_is_top":false,"comment_ctime":1623217441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623217441","product_id":100039001,"comment_content":"如何分层、分模块？应该怎么划分类？每个类应该具有哪些属性、方法？怎么设计类之间的交互？该用继承还是组合？该使用接口还是抽象类？怎样做到解耦、高内聚低耦合？该用单例模式还是静态方法？用工厂模式创建对象还是直接 new 出来？如何避免引入设计模式提高扩展性的同时带来的降低可读性问题？……各种问题，","like_count":0},{"had_liked":false,"id":294900,"user_name":"lucas","can_delete":false,"product_type":"c1","uid":1507709,"ip_address":"","ucode":"53B855AD647D4D","user_header":"https://static001.geekbang.org/account/avatar/00/17/01/7d/7b576eb3.jpg","comment_is_top":false,"comment_ctime":1622125770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622125770","product_id":100039001,"comment_content":"1.一直用c写代码，一直想提高代码能力，觉得设计模式和OOP思想应该也是可以用上的<br>2.没做过设计模式相关的整改","like_count":0},{"had_liked":false,"id":294563,"user_name":"Geek_ccbd80","can_delete":false,"product_type":"c1","uid":2638517,"ip_address":"","ucode":"BBA76D078D8584","user_header":"","comment_is_top":false,"comment_ctime":1622000373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622000373","product_id":100039001,"comment_content":"1 设计模式是前人写代码优秀经验的总结。<br>2 用过单例模式、工厂模式等，也有一些写过，但没有意识到的其它模式。曾经在开源中看到使用发布-订阅模式，非常优雅地解决了数据联动问题","like_count":0},{"had_liked":false,"id":294222,"user_name":"帅气的名字","can_delete":false,"product_type":"c1","uid":2635800,"ip_address":"","ucode":"59B71A677963D1","user_header":"https://static001.geekbang.org/account/avatar/00/28/38/18/0a4ef54d.jpg","comment_is_top":false,"comment_ctime":1621839439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621839439","product_id":100039001,"comment_content":"不懂设计模式的话，写出的代码大概率是烂代码，没法扩展，没法排查bug，甚至遇到稍微复杂的代码就力不从心，容易被淘汰","like_count":0},{"had_liked":false,"id":294045,"user_name":"李景阳","can_delete":false,"product_type":"c1","uid":2621592,"ip_address":"","ucode":"07FAB95C77EDEB","user_header":"","comment_is_top":false,"comment_ctime":1621704678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621704678","product_id":100039001,"comment_content":"日常用的最多的是MVC","like_count":0},{"had_liked":false,"id":293751,"user_name":"Geek_5b7d28","can_delete":false,"product_type":"c1","uid":2057476,"ip_address":"","ucode":"BAA1CDD539C369","user_header":"","comment_is_top":false,"comment_ctime":1621520491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621520491","product_id":100039001,"comment_content":"我觉得对于程序员来说，代码就像一个人的形象。有一个好的形象，无论是别人还是自己看，都会赏心悦目。","like_count":0},{"had_liked":false,"id":293411,"user_name":"wonderful2","can_delete":false,"product_type":"c1","uid":2625536,"ip_address":"","ucode":"6BA4BBA3B9B32B","user_header":"","comment_is_top":false,"comment_ctime":1621385714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621385714","product_id":100039001,"comment_content":"设计模式重要的是理解其中的思想，具体怎么玩这么实现其实有很多变种，表面上的目的是为了写更高质量更漂亮的代码，实质上是提高自己的代码技艺。<br>工作上用过的设计模式有单例模式、代理模式、工厂模式","like_count":0},{"had_liked":false,"id":292913,"user_name":"炫炫","can_delete":false,"product_type":"c1","uid":1358609,"ip_address":"","ucode":"FDC7A0C6E08B02","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/11/7069b8eb.jpg","comment_is_top":false,"comment_ctime":1621074838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621074838","product_id":100039001,"comment_content":"争哥，我心中滴神，第三刷，来了来了","like_count":0},{"had_liked":false,"id":292898,"user_name":"乔宏民","can_delete":false,"product_type":"c1","uid":2181661,"ip_address":"","ucode":"B6A9F971E9CC96","user_header":"https://static001.geekbang.org/account/avatar/00/21/4a/1d/3567f117.jpg","comment_is_top":false,"comment_ctime":1621062064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621062064","product_id":100039001,"comment_content":"第一篇讲的真好，像极了沙场秋点兵！好了，我们要去打仗了。","like_count":0},{"had_liked":false,"id":292453,"user_name":"歪歪在学习","can_delete":false,"product_type":"c1","uid":1618198,"ip_address":"","ucode":"889032C02D2D26","user_header":"https://static001.geekbang.org/account/avatar/00/18/b1/16/ba221660.jpg","comment_is_top":false,"comment_ctime":1620827362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620827362","product_id":100039001,"comment_content":"作为一个工作三年的程序员，之前一直跟业务打交道，这次出来面试后发现自己真的太菜了，每次被面试官问到设计模式就很虚，因为我之前开发没用过设计模式😢。为了提高自己的技术深度，写出更优雅的代码，必须学好设计模式。","like_count":0},{"had_liked":false,"id":292201,"user_name":"Geek_5b4fff","can_delete":false,"product_type":"c1","uid":2309113,"ip_address":"","ucode":"349542C8F7CBBC","user_header":"","comment_is_top":false,"comment_ctime":1620719545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620719545","product_id":100039001,"comment_content":"1、单例模式<br>网络请求工具类，避免了每次请求都需要创建各种资源问题<br>2、策略模式<br>定义一组接口规范，根据业务的不同做具体的实现，方便扩展","like_count":0},{"had_liked":false,"id":292116,"user_name":"woodie","can_delete":false,"product_type":"c1","uid":2004783,"ip_address":"","ucode":"1C2925AD8191DA","user_header":"","comment_is_top":false,"comment_ctime":1620696885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620696885","product_id":100039001,"comment_content":"以前觉得自己写的代码质量还凑活，但好在什么地方，烂在什么地方，道不出所以然来，感觉得缺少“灵魂”指导思想，“内核”的东西，所以这次学些设计模式的目的：1、掌握“好”“烂”代码的标准；2、在一些复杂的场景中，能够多一些设计思路","like_count":0},{"had_liked":false,"id":291479,"user_name":"Time-sun","can_delete":false,"product_type":"c1","uid":1949865,"ip_address":"","ucode":"47D2EB4FD2F925","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/tiaEaUwoYl8z5FROHibq5XYjjcuTia840dHYT8zqwV4ibfWPNeQHw3ib20iba8bRRkVxwYUCz9ENkDGRsfnmSJQBAALA/132","comment_is_top":false,"comment_ctime":1620301643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620301643","product_id":100039001,"comment_content":"看法：<br>阅读优秀的开源项目时，根本不知道作者的思路是啥，也就没有顶层的思考角度了，只能debug一行一行的看，费时费力。","like_count":0},{"had_liked":false,"id":291455,"user_name":"luolx","can_delete":false,"product_type":"c1","uid":2383171,"ip_address":"","ucode":"AF14D78C7AA52A","user_header":"https://static001.geekbang.org/account/avatar/00/24/5d/43/06e7b99b.jpg","comment_is_top":false,"comment_ctime":1620293240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620293240","product_id":100039001,"comment_content":"以前总觉得自己写的代码很low，看别人的代码就感觉很高大上，现在才发现，原来是设计模式导致的。。","like_count":0},{"had_liked":false,"id":290464,"user_name":"Geek_967e26","can_delete":false,"product_type":"c1","uid":2414954,"ip_address":"","ucode":"000BC1A8A23C82","user_header":"","comment_is_top":false,"comment_ctime":1619576700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619576700","product_id":100039001,"comment_content":"设计模式是真的重要，现在从零开始","like_count":0},{"had_liked":false,"id":290457,"user_name":"CoffeeMilk","can_delete":false,"product_type":"c1","uid":1522119,"ip_address":"","ucode":"EC3B6AD4FD392A","user_header":"https://static001.geekbang.org/account/avatar/00/17/39/c7/cf40613f.jpg","comment_is_top":false,"comment_ctime":1619573952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619573952","product_id":100039001,"comment_content":"课后讨论 <br>1、我认为设计模式是让我们能够更好，更优雅的实现功能，是一个有追求程序员的基本功（即：能够将复杂问题分解为简单问题，做到合理化设计与实现，提高复用率，且质量有保证，毕竟这些设计模式是经过时间验证的内容）。<br>2、我在智慧工厂项目中，用的最多的有：①单例模式【应用场景：系统配置文件、日志等】；②工厂模式。","like_count":0},{"had_liked":false,"id":290267,"user_name":"夜雨声烦","can_delete":false,"product_type":"c1","uid":1349749,"ip_address":"","ucode":"87D8DB1E32522A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK6mh3xlaMoGtWjmVJh2LutdLcQcPbKNjRlVru3bx8ynPhgwuGhhdzTkwEMoXbvBtgkcDSfom1kZg/132","comment_is_top":false,"comment_ctime":1619465660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619465660","product_id":100039001,"comment_content":"看法：设计模式重要性五点作者已经说。在我自己看来学习设计模式期望能让我写出高效可维护性的代码、更快的看懂别人的代码、读懂开源代码、快速了解开源框架<br>应用：没有应用过，说来惭愧设计模型一直没了解过，现在算是从0开始。","like_count":0},{"had_liked":false,"id":289790,"user_name":"贝壳喊母","can_delete":false,"product_type":"c1","uid":1208159,"ip_address":"","ucode":"4D0E8C55BDE64F","user_header":"","comment_is_top":false,"comment_ctime":1619175223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619175223","product_id":100039001,"comment_content":"应该很重要，通过推荐买来学习的。最近自己在从项目创建到设计到开发感觉比较吃力。用的也都是框架的框架什么的。真的是只会用的那种！感觉这样下去真的就废了。通过这次学习希望能够得到一个提升吧！","like_count":0},{"had_liked":false,"id":289558,"user_name":"哇*我好肥","can_delete":false,"product_type":"c1","uid":2579133,"ip_address":"","ucode":"26C937842EC9FE","user_header":"https://static001.geekbang.org/account/avatar/00/27/5a/bd/a3b20809.jpg","comment_is_top":false,"comment_ctime":1619081224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619081224","product_id":100039001,"comment_content":"为什么学习设计模式？<br>1、应对面试中被问到的设计模式的问题<br>2、提升自己写出优质代码的能力<br>3、提升解读源码的能力，让看源码事半功倍<br>4、为以后职业生涯铺路<br>5、提高复杂代码的设计和开发能力<br><br>对设计模式的看法<br>个人觉得设计模式是必不可少的，无论是编写优质代码、提高复杂代码的设计能力<br>都是必不可少的，而且对于思考问题的思维能力，我觉得也有帮助，对于以后成为升级加薪也是非常有帮助的<br><br>目前项目中是否用了哪些设计模式？<br>目前没有印象用到哪些模式","like_count":0},{"had_liked":false,"id":289232,"user_name":"Choi","can_delete":false,"product_type":"c1","uid":1045669,"ip_address":"","ucode":"4B33F8728331DC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/45FrSezibbp2L7v0aE8fgL6vFokiarz9nRw6icEK14OL3ZSaQVrCH0ZKmcFibicEk8zLdkU9JmPQ31ibvulyNvoclJWA/132","comment_is_top":false,"comment_ctime":1618925783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618925783","product_id":100039001,"comment_content":"工作一直沉浸于CRUD之中，需要提升自己，写出不一样的代码，修炼内功，不负韶华。🤔<br><br>平时用得最多的是单例、建造者、模版方法、策略模式","like_count":0},{"had_liked":false,"id":288697,"user_name":"嗯。","can_delete":false,"product_type":"c1","uid":1563245,"ip_address":"","ucode":"30FC6EF9A01070","user_header":"https://static001.geekbang.org/account/avatar/00/17/da/6d/7c8fdb14.jpg","comment_is_top":false,"comment_ctime":1618630137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618630137","product_id":100039001,"comment_content":"设计模式的重要性对于开发人员来说毋庸置疑，它和数据结构与算法一样，是程序员的基本功，它可以建立我们的设计思想和原则，写成高质量的代码，而对于个人来说，一是可以在面试中为自己加分，二是在工作中可以写出不被同事诟病甚至眼前一亮的代码，三则是提高自己的内功和能力，写出优秀的代码获得成就感。<br><br>在我工作中，经常遇到的是策略模式的场景，比如我新入职的电商公司，下单是必须的业务，而下单的场景分很多种，比如普通下单、拼团下单、用积分下单等等，而其中的业务逻辑是不一样的，最笨的办法就是if-else一把梭，但是正常的一个电商项目下单的逻辑也是很复杂的，如果都写在一个类里面可读性极差，因此，可以使用策略模式，分别处理对应的逻辑。","like_count":0},{"had_liked":false,"id":287852,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1618196095,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618196095","product_id":100039001,"comment_content":"1、不用不知道，一用发现真香<br>2、用过门面+工厂+策略+模板，主要用于搭建文件服务器的需求上<br>门面用于暴露简单接口，以及封装后面的策略调用<br>工厂用于获取文件服务器的不同实现类对象<br>策略用于提供文件服务器基本操作的不同算法实现，例如提供mongo、minio等分别实现<br>模板用于提供文件服务器基本操作的固定模板，比如上传文件的几个固定步骤，上传文件存储-备份磁盘-上传记录等，上传文件存储需交给子类提供不同上传逻辑的实现","like_count":0},{"had_liked":false,"id":285416,"user_name":"Jerry","can_delete":false,"product_type":"c1","uid":1120977,"ip_address":"","ucode":"F10BBBA2644E46","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/d1/698609e1.jpg","comment_is_top":false,"comment_ctime":1616802206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616802206","product_id":100039001,"comment_content":"1.好的设计模式代码，在扩展或者修改功能的时候，会很明确需要修改什么类的什么方法，而且影响的只是这个类相关的逻辑，不至于牵一发而动全身。<br>2.印象比较深刻的是用“策略模式&quot;来解决不同用户类型，调用不同的“登录”接口拉取用户信息，拉取成功后，做下一步逻辑处理。这里把&quot;根据用户类型调用不同登录接口&quot;用策略模式来设计，使得不同的登录接口逻辑相互隔离。","like_count":0},{"had_liked":false,"id":285027,"user_name":"小万叔叔","can_delete":false,"product_type":"c1","uid":1448768,"ip_address":"","ucode":"41966A18867C63","user_header":"https://static001.geekbang.org/account/avatar/00/16/1b/40/68e59e53.jpg","comment_is_top":false,"comment_ctime":1616583137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616583137","product_id":100039001,"comment_content":"设计模式的重要性 ：最直观的作用提高易用性，和可读性 <br>用过的设计模式：构造器，单例，工厂等等。","like_count":0},{"had_liked":false,"id":284822,"user_name":"Windqiu","can_delete":false,"product_type":"c1","uid":2278659,"ip_address":"","ucode":"EF78D3CF73BCBB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/TUMtkaIMdbFDS28AhjrQcqOhiapNvHyPMApz9QoZZkShZmomJRh6GX2aL2YeSMg4SicdydzdWxXZOZz49HNS9EtA/132","comment_is_top":false,"comment_ctime":1616487789,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616487789","product_id":100039001,"comment_content":"在通常的CURD上，确实用的设计模式不多。但是如果你想通过业务框架，去实现技术架构的话，设计模式是必备的。设计模式并不是23种，而是N种，因为设计就是N。<br>我是PHP工程师，但是在写业务过程中，深刻觉得设计模式太需要了，为了业务的健壮与拓展，为了代码的质量。<br>你说Go没有设计模式，Go也有的，思想是想通的。","like_count":0},{"had_liked":false,"id":284449,"user_name":"森林里的胖老虎","can_delete":false,"product_type":"c1","uid":2530946,"ip_address":"","ucode":"C93BA8F2885601","user_header":"https://static001.geekbang.org/account/avatar/00/26/9e/82/7758ab1c.jpg","comment_is_top":false,"comment_ctime":1616251464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616251464","product_id":100039001,"comment_content":"我在项目中用到最多的就是单例模式。数据存储链接，不必每一个请求过来都要去链接一次，直接利用单例模式，doube check","like_count":0},{"had_liked":false,"id":283663,"user_name":"John Bull","can_delete":false,"product_type":"c1","uid":1362023,"ip_address":"","ucode":"2A1B4191CD87B8","user_header":"https://static001.geekbang.org/account/avatar/00/14/c8/67/5489998a.jpg","comment_is_top":false,"comment_ctime":1615875697,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1615875697","product_id":100039001,"comment_content":"掌握好设计模式对阅读框架源码很重要，深有体会！","like_count":0},{"had_liked":false,"id":283464,"user_name":"诺","can_delete":false,"product_type":"c1","uid":2397674,"ip_address":"","ucode":"66A7DE3E9D1A70","user_header":"https://static001.geekbang.org/account/avatar/00/24/95/ea/42f6d9be.jpg","comment_is_top":false,"comment_ctime":1615791580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615791580","product_id":100039001,"comment_content":"因为自己在开发当中遇到过一些框架，在运用到自己的项目中后，由于自己的代码质量不是很高，出现问题后需要阅读源码来分析解决问题。<br>而市面上的成熟框架中作用的设计模式较多，实际上可读性比较强，但对于我这种对设计模式理解不深的人来说，理解就比较困难，看不下去，所以设计模式的提升尤为重要。<br>另一方面，有些时候需要自己设计通用的组件和构建工程化项目，这时候需要写出易拓展好维护的代码才能实现这种需求，在开发的过程中就体现出了自己在设计模式的严重不足，所以学习设计模式还是很重要的","like_count":0},{"had_liked":false,"id":281852,"user_name":"杨昌业","can_delete":false,"product_type":"c1","uid":2452804,"ip_address":"","ucode":"0F043DA819F975","user_header":"","comment_is_top":false,"comment_ctime":1614927491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614927491","product_id":100039001,"comment_content":"设计模式相关知识学习的重要性:1.让我告别烂代码2更加容易理解源码框架3面试更加从容<br>单例模式--手机短信验证码确保不会重复发送,<br>","like_count":0},{"had_liked":false,"id":281532,"user_name":"chenruoxu","can_delete":false,"product_type":"c1","uid":1144192,"ip_address":"","ucode":"74F740C1C5DEDA","user_header":"https://static001.geekbang.org/account/avatar/00/11/75/80/8da73d9c.jpg","comment_is_top":false,"comment_ctime":1614776159,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614776159","product_id":100039001,"comment_content":"设计模式于我真的是能够大大提升工作效率的，之前改造存量系统的时候，由于经验不足，原来的代码写了很多 try-catch 的代码，这些代码后面已经很难理解和维护，后面一个大牛带我进行改造，用了模版模式和策略模式进行重构，代码清晰简洁，后面的维护也变得很轻松。所以我觉得学好设计模式是能够解放生产力的。","like_count":0},{"had_liked":false,"id":280497,"user_name":"森碟儿","can_delete":false,"product_type":"c1","uid":1155664,"ip_address":"","ucode":"A1A82553C755CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/a2/50/1a2f1171.jpg","comment_is_top":false,"comment_ctime":1614235827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614235827","product_id":100039001,"comment_content":"1学好设计模式很重要，好的设计模式会使整个项目更健壮，更稳定，利用设计模式还可以解决日常工作中的疑难问题，代码质量高，可读性强，还能多去学习大神级写的设计模式，达到学习致用的效果<br>2.过往的开发项目中，采用的是传统的设计模式MVC，虽然也知道还有MVVM MVP  等其他的设计模式，但不会利用到项目中，仅仅知道理论而已，所以想通过本次跟老师学习，能解决此问题。","like_count":0},{"had_liked":false,"id":280162,"user_name":"Geek_ea3267","can_delete":false,"product_type":"c1","uid":1962384,"ip_address":"","ucode":"71C1EBF50F457A","user_header":"","comment_is_top":false,"comment_ctime":1614099820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614099820","product_id":100039001,"comment_content":"1.设计模式可以重构代码, 使得更容易维护, 容易拓展<br>2.使用过策略模式加工厂模式加spring注入解决复杂业务的if else可读写差, 耦合性高的问题","like_count":0},{"had_liked":false,"id":279513,"user_name":"Kuris_01🦖","can_delete":false,"product_type":"c1","uid":2391763,"ip_address":"","ucode":"DE346E0FA7EC7D","user_header":"https://static001.geekbang.org/account/avatar/00/24/7e/d3/0e85f07c.jpg","comment_is_top":false,"comment_ctime":1613810394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613810394","product_id":100039001,"comment_content":"刚步入职场，还处于写业务代码的阶段，添加一些功能的时候照模搬砖能基本完成要求，但是这样的代码累积到后面最后墙塌了砸的还是自己的脚，看前辈们的代码也觉得有很多可以优化的地方。<br>现在处于对设计模式基本不懂的状态，知道有些地方if else写多了不好但是不知道如何优化，所以得赶紧学习一波~","like_count":0},{"had_liked":false,"id":279484,"user_name":"刘剑","can_delete":false,"product_type":"c1","uid":1140328,"ip_address":"","ucode":"B530AE58C05788","user_header":"https://static001.geekbang.org/account/avatar/00/11/66/68/fe556f2f.jpg","comment_is_top":false,"comment_ctime":1613801591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613801591","product_id":100039001,"comment_content":"1.设计模式的重要性：<br>为面试提供有利的补充；<br>告别烂代码，让自己的代码结构清晰，更易于扩展；<br>更容易看明白很多开源代码的设计思想<br>2.用过哪些设计模式?解决什么问题？<br>之前做过某停车软件的会员体系，用到过策略模式，一开始多个分段，不同的会员级别，考虑过用if-else，但是后面如果再扩展会很痛苦，用策略模式有新的会员级别和优惠政策，只需要新增一个新的策略类。<br>所有的项目中的配置，固定不变的配置，都放在核心配置类中(单例)。<br>使用netty+jdbctemplate写api快速响应接口时，netty里的handler根据不同的uri使用不同的pipeline用到了责任链模式，还有些对象线程池用到了观察者模式<br>","like_count":0},{"had_liked":false,"id":279421,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1613781103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613781103","product_id":100039001,"comment_content":"设计模式对于面向对象的开发非常重要，之前我也看过这方面的书，设计模式就像围棋中的手筋，巧妙地运用可以使程序在可维护性，扩展性，复用性方面得到很大的提升。","like_count":0},{"had_liked":false,"id":279224,"user_name":"李金鹏","can_delete":false,"product_type":"c1","uid":1445362,"ip_address":"","ucode":"8FCCA5B8BD8DDD","user_header":"https://static001.geekbang.org/account/avatar/00/16/0d/f2/3865fe28.jpg","comment_is_top":false,"comment_ctime":1613660003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613660003","product_id":100039001,"comment_content":"1.spring框架用到了很多设计模式，比如工厂模式<br>2.我在项目中遇到的最多的模式是单例模式，应用场景有公共对象比如全局上下文、线程池等","like_count":0},{"had_liked":false,"id":277921,"user_name":"鞠小军","can_delete":false,"product_type":"c1","uid":1117744,"ip_address":"","ucode":"F945863EC472B2","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/30/e613d032.jpg","comment_is_top":false,"comment_ctime":1612668964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612668964","product_id":100039001,"comment_content":"设计模式看过好多书和分享了，知道是怎么个原理和设计思路，但是日常开发时用的较少，还是基本功不扎实哈，要平时一点点刻意去理解和实践。","like_count":0},{"had_liked":false,"id":277381,"user_name":"超超超超超帅耶🌴","can_delete":false,"product_type":"c1","uid":1266987,"ip_address":"","ucode":"931E23DC0ACB04","user_header":"https://static001.geekbang.org/account/avatar/00/13/55/2b/b7927cc4.jpg","comment_is_top":false,"comment_ctime":1612402411,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612402411","product_id":100039001,"comment_content":"1.我觉得对我来说设计模式的作用里最重要的还是第二点和第四点，之前没有学过设计模式，好多源码里面的设计模式名词都不知道，后来看过一遍之后，明显看源码简单了很多<br>2.自己代码里使用过策略模式结合工厂模式来解决一个不同类型数据的处理问题，让整个逻辑抽离开来，不至于全部耦合在一起if()else if()","like_count":0},{"had_liked":false,"id":276232,"user_name":"Geek1185","can_delete":false,"product_type":"c1","uid":2028954,"ip_address":"","ucode":"47BEE492EF4C1A","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/9a/63dc81a2.jpg","comment_is_top":false,"comment_ctime":1611840366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611840366","product_id":100039001,"comment_content":"烂代码的特点","like_count":0},{"had_liked":false,"id":273432,"user_name":"刘立嘉","can_delete":false,"product_type":"c1","uid":2414637,"ip_address":"","ucode":"1241140EBE7FE3","user_header":"https://static001.geekbang.org/account/avatar/00/24/d8/2d/6ec3760c.jpg","comment_is_top":false,"comment_ctime":1610594938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610594938","product_id":100039001,"comment_content":"面试时候能用上","like_count":0},{"had_liked":false,"id":273070,"user_name":"是小毛吖","can_delete":false,"product_type":"c1","uid":1363547,"ip_address":"","ucode":"B14B176DA1C989","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/5b/d7e523c2.jpg","comment_is_top":false,"comment_ctime":1610430312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610430312","product_id":100039001,"comment_content":"设计模式的重要性当然不言而喻，能够让人们写出的代码更高效、更具备拓展性。但是难点在于什么场景适合用。千万不要为了用而用","like_count":0},{"had_liked":false,"id":272945,"user_name":"笑天","can_delete":false,"product_type":"c1","uid":1561173,"ip_address":"","ucode":"B71B671B302D3B","user_header":"","comment_is_top":false,"comment_ctime":1610360941,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610360941","product_id":100039001,"comment_content":"设计模式相关只是的重要性看法：<br>1.学习设计模式，是对面向对象编程进一步的深入了解。设计模式，个人觉得是抽象方面的一些总结，前人留下的关于抽象的一套武功秘籍。<br>2.个人开发过程中，有简单的用到过工厂模式，策略模式。不知道是否抽象的得当。<br>卡券规则的校验，用了一个策略模式。抽象一个limit接口，定义一个checkLimit()方法，相当于是strategy。每个具体规则，都要实现这个checkLimit()方法，校验limit是否可用。本应该耦合在上下文的规则校验，就转移到了每个具体规则类中。当新增了某个类型的规则以后，只需要新增一个类，实现limit接口即可。这样就不用修改上下文，满足了开闭原则","like_count":0},{"had_liked":false,"id":272816,"user_name":"慎独。","can_delete":false,"product_type":"c1","uid":1101771,"ip_address":"","ucode":"0780B71A00B1CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/cb/6b1216e6.jpg","comment_is_top":false,"comment_ctime":1610296399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610296399","product_id":100039001,"comment_content":"在大型项目中，设计模式使用的时候恰到好处直接关系着这个项目的成败。","like_count":0},{"had_liked":false,"id":271857,"user_name":"成锋","can_delete":false,"product_type":"c1","uid":1337402,"ip_address":"","ucode":"7017928510C031","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/3a/e22b689a.jpg","comment_is_top":false,"comment_ctime":1609843174,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609843174","product_id":100039001,"comment_content":"重要性：<br> 提升代码设计能力<br> 看懂框架代码<br>项目实战：<br> 项目中很少用到设计模式","like_count":0},{"had_liked":false,"id":271420,"user_name":"霍云Obsidian","can_delete":false,"product_type":"c1","uid":1178275,"ip_address":"","ucode":"1E5818D5C01576","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/a3/1b29f975.jpg","comment_is_top":false,"comment_ctime":1609602855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609602855","product_id":100039001,"comment_content":"说实话，很多时候写代码 不知道该用什么。 例如 单例模式 还是静态类。。","like_count":0},{"had_liked":false,"id":271388,"user_name":"adkii","can_delete":false,"product_type":"c1","uid":2370418,"ip_address":"","ucode":"6AA28E359903E4","user_header":"https://static001.geekbang.org/account/avatar/00/24/2b/72/d06e75e4.jpg","comment_is_top":false,"comment_ctime":1609590922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609590922","product_id":100039001,"comment_content":"每二个问题就是在面试里碰到了一个问题，然后就没有然后了，平常代码里基本上都是CURD，对设计模式确实没用过，就很尴尬","like_count":0},{"had_liked":false,"id":271164,"user_name":"牛牛","can_delete":false,"product_type":"c1","uid":1194626,"ip_address":"","ucode":"CFCE68B4F92209","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/82/1ff83a38.jpg","comment_is_top":false,"comment_ctime":1609426865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609426865","product_id":100039001,"comment_content":"为什么学习设计模式？<br>1. 应对面试中设计模式相关的问题<br>2. 告别项目中的代码被人吐槽<br>3. 提高复杂代码的设计和研发能力<br>4. 让读源码、学框架事半功倍<br>5. 为职业生涯做铺垫","like_count":0},{"had_liked":false,"id":270529,"user_name":"Geek_db65af","can_delete":false,"product_type":"c1","uid":2392901,"ip_address":"","ucode":"3FC520A40F9C68","user_header":"","comment_is_top":false,"comment_ctime":1609151466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609151466","product_id":100039001,"comment_content":"在设计系统的时候会考虑如何写代码更优美，效率更高，扩展性更好等，但竟从不知道这些就是设计模式，也不知道可以通过课程、书籍学习这些，惭愧。","like_count":0},{"had_liked":false,"id":267484,"user_name":"Geek_652490","can_delete":false,"product_type":"c1","uid":1817165,"ip_address":"","ucode":"0612EE1FD02AF1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/0qP9dQyibmPu1JUAan9bXEXZBAaOetRStstIcQDXZUFdU9jHb5W3RlNfCBI0kVkZzZTf6NbXwSY4IQqOsVSNQibw/132","comment_is_top":false,"comment_ctime":1607764569,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607764569","product_id":100039001,"comment_content":"设计模式五条作用<br>1 面试<br>2避免烂代码<br>3 复杂系统设计必备<br>4 看源码<br>5 职场发展铺路","like_count":0},{"had_liked":false,"id":267483,"user_name":"Geek_652490","can_delete":false,"product_type":"c1","uid":1817165,"ip_address":"","ucode":"0612EE1FD02AF1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/0qP9dQyibmPu1JUAan9bXEXZBAaOetRStstIcQDXZUFdU9jHb5W3RlNfCBI0kVkZzZTf6NbXwSY4IQqOsVSNQibw/132","comment_is_top":false,"comment_ctime":1607764446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607764446","product_id":100039001,"comment_content":"设计模式在看源码的时候真的有用，不懂模式举步维艰。之前设计开发socket http互转中间件时，因为不懂设计模式，几乎重写了两遍。","like_count":0},{"had_liked":false,"id":267229,"user_name":"大头","can_delete":false,"product_type":"c1","uid":1315367,"ip_address":"","ucode":"C1FB2C8A0FB0C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/27/32746bbf.jpg","comment_is_top":false,"comment_ctime":1607654455,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1607654455","product_id":100039001,"comment_content":"个人理解：设计模式是前辈总结的最佳实践，属于一定套路。再遇到特定的场景，使用对应的设计模式能提升代码质量，尤其是写出易扩展的代码。<br>用过三种设计模式，单例模式，场景是线程池的创建。工厂加策略模式，场景是不同的角色有不同的薪资提成算法。观察者模式，场景是员工调动部门后，员工的各类业务数据进行异步更新","like_count":0},{"had_liked":false,"id":266750,"user_name":"孙小梦","can_delete":false,"product_type":"c1","uid":1189821,"ip_address":"","ucode":"3762D7A6016187","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/bd/7d407685.jpg","comment_is_top":false,"comment_ctime":1607478580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607478580","product_id":100039001,"comment_content":"老师，其实我的编程年限也不短了，但是就像老师说的一样，一直都在写“能用”的代码，对代码的设计能力真的很弱，希望跟着老师的课程，对这方面可以有一个大的提升！","like_count":0},{"had_liked":false,"id":266748,"user_name":"Geek_96f0c3","can_delete":false,"product_type":"c1","uid":2190041,"ip_address":"","ucode":"BC712514B7016B","user_header":"","comment_is_top":false,"comment_ctime":1607478319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607478319","product_id":100039001,"comment_content":"使用过单例与 adapter 、观察者模式<br>觉得自己最大的问题是代码解耦与可读性问题<br>希望提高代码质量","like_count":0},{"had_liked":false,"id":266099,"user_name":"田镇珲","can_delete":false,"product_type":"c1","uid":1762765,"ip_address":"","ucode":"F112D969D81822","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e5/cd/2d6d8f80.jpg","comment_is_top":false,"comment_ctime":1607167326,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1607167326","product_id":100039001,"comment_content":"目前最大的刚需就是通过设计模式 读懂前辈写的代码 从而提高自己的代码能力","like_count":0},{"had_liked":false,"id":265185,"user_name":"冯佳兴","can_delete":false,"product_type":"c1","uid":1717342,"ip_address":"","ucode":"41D308E99EF9FF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/34/5e/089ac156.jpg","comment_is_top":false,"comment_ctime":1606809312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606809312","product_id":100039001,"comment_content":"设计模式是一种思想，其实写代码是很容易的，但是今天写的自己能看懂，明天也能刚看懂，过一段时间呢？如果自己都看不懂，这段代码不能称为好代码，好的代码是让别人一看就懂，出了问题直接能定位到问题，前提是这段代码有一个良好的设计思路。","like_count":0},{"had_liked":false,"id":264778,"user_name":"mgs2002","can_delete":false,"product_type":"c1","uid":1812970,"ip_address":"","ucode":"F5931108BD509B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/ea/5bfce6c5.jpg","comment_is_top":false,"comment_ctime":1606643266,"is_pvip":false,"replies":[{"id":"96061","content":"来得及啊 加油","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700535,"ip_address":"","comment_id":264778,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606643266","product_id":100039001,"comment_content":"30多了还来得及吗。。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510682,"discussion_content":"来得及啊 加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264739,"user_name":"李奇峰","can_delete":false,"product_type":"c1","uid":1563487,"ip_address":"","ucode":"22BC56BA5A5726","user_header":"https://static001.geekbang.org/account/avatar/00/17/db/5f/c5791954.jpg","comment_is_top":false,"comment_ctime":1606624173,"is_pvip":false,"replies":[{"id":"96064","content":"加油~~~","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700551,"ip_address":"","comment_id":264739,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606624173","product_id":100039001,"comment_content":"设计模式在大学的时候通过《Head First 设计模式》这本书学过一段时间，但是工作之后就忘掉了。好像都只是能把业务逻辑完成就可以了，很少用到设计模式的思想去编写代码。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510671,"discussion_content":"加油~~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264538,"user_name":"高崇波","can_delete":false,"product_type":"c1","uid":2343749,"ip_address":"","ucode":"682C0147C00BE2","user_header":"https://static001.geekbang.org/account/avatar/00/23/c3/45/c80bea83.jpg","comment_is_top":false,"comment_ctime":1606494000,"is_pvip":false,"replies":[{"id":"96069","content":"嗯嗯 加油","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700579,"ip_address":"","comment_id":264538,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606494000","product_id":100039001,"comment_content":"我是做嵌入式开发的主要是用C语言，C语言语法结构上不支持面向对象，但是在思想可以实现面向对象，对这边了解的太少，代码的架构能力太薄弱，每次做项目都是考虑实现功能，没有对代码的扩展性，可维护性等做太多的考虑。希望学习设计模式能够带我提升一个档次","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510592,"discussion_content":"嗯嗯 加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262996,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1605937808,"is_pvip":true,"replies":[{"id":"96114","content":"������","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700869,"ip_address":"","comment_id":262996,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605937808","product_id":100039001,"comment_content":"设计模式是组织代码的艺术，怎么让接盘侠研究代码的时候能专注于一个更小的上下文，怎么面对不断变化的需求，隔离变化，能做可扩展的修改，或者尽量小范围修改。<br>还记得，那是一个查询路由的东东，对不同查询类型，都会走一溜烟的处理链条，而在链条的每一环，都要判断查询的类型是什么要不要跳过，或者进行特殊化的处理。这样对新增一个查询类型，就意味着要改整个链条。我做的修改是，把查询类型和查询链条做了接耦，为每一种查询装配一种独特的处理链。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510062,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261289,"user_name":"Geek_5a5d9a","can_delete":false,"product_type":"c1","uid":2046477,"ip_address":"","ucode":"8A444C96DB4389","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/6gic9ib9c9865ec0rKEPZJtvbj2yINgrGtjibr95luMEZdJ0oBV0hJUbE7iaeia4B802CibweG3yicJSCo5c93MeCSxMg/132","comment_is_top":false,"comment_ctime":1605259227,"is_pvip":false,"replies":[{"id":"96150","content":"嗯嗯","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606701492,"ip_address":"","comment_id":261289,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605259227","product_id":100039001,"comment_content":"移动端开发:<br>常用的设计模式: 单例模式, 代理模式, 观察者模式, 适配器模式, 还有用到一些策略模式","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509441,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260693,"user_name":"Geek_7cb078","can_delete":false,"product_type":"c1","uid":1697610,"ip_address":"","ucode":"EEEE2DF8D21121","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ6peT4XHOU7sibZ1Htb2oU3Ldg668DPWJTZuq1y6NzcTKPxU0KB50Cy3EI8CJ33bJAHnlZ1jVicg8Q/132","comment_is_top":false,"comment_ctime":1605084795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605084795","product_id":100039001,"comment_content":"聊一聊你对设计模式相关知识的重要性的看法；<br>已经整天在写CRUD，项目在紧急开发过程中一团乱麻，为了效率 而放弃设计，其实是直接涉及不位，不知道怎么放，怎么分层，怎么分包，怎么聚合还是集成，想写但是知识储备不够，看了一部分Spring源码，虽说雾里看花，但是依旧感到震撼<br>在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>单例: 项目中就一个实例<br>工厂：去生产组装需要的业务对象，不需要手动去new，统一管理<br>适配器，去解决恶心的ifelse的问题，适配器提高了扩展性","like_count":0},{"had_liked":false,"id":259746,"user_name":"dream","can_delete":false,"product_type":"c1","uid":1965961,"ip_address":"","ucode":"37EB9A740280BE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ff/89/ac4dd89f.jpg","comment_is_top":false,"comment_ctime":1604824682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604824682","product_id":100039001,"comment_content":"1. 在日志系统使用@Slf4j注解，无需创建LoggerFactory,该日志由门面模式实现<br>2.在SlectCode.xml中存有方位和省份的定位信息，那么每使用一次，就需要new一个对象坑定不是好的方法，此时使用单例模式，在整个程序运行中，只需要创建一个对象，使用时，直接获取就好","like_count":0},{"had_liked":false,"id":258951,"user_name":"Geek_ashun","can_delete":false,"product_type":"c1","uid":2292214,"ip_address":"","ucode":"2F96E46EAA16D7","user_header":"https://static001.geekbang.org/account/avatar/00/22/f9/f6/312cf4ba.jpg","comment_is_top":false,"comment_ctime":1604586115,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1604586115","product_id":100039001,"comment_content":"以前从没系统的学过设计模式,这次买了课程,加油","like_count":0},{"had_liked":false,"id":258310,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1038811,"ip_address":"","ucode":"BFAF83E23199DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d9/db/66d5b3f4.jpg","comment_is_top":false,"comment_ctime":1604379588,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604379588","product_id":100039001,"comment_content":"1. 设计模式能让我更快看懂源码；能写出更高质量的代码，提高别人review代码的效率；<br>2.项目开发中好像没刻意用过啥设计模式，因为还不太会，从现在开始吧。","like_count":0},{"had_liked":false,"id":258174,"user_name":"Coding小先","can_delete":false,"product_type":"c1","uid":1051563,"ip_address":"","ucode":"965B1CC757E026","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/ab/0e2857e5.jpg","comment_is_top":false,"comment_ctime":1604319232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604319232","product_id":100039001,"comment_content":"遇到的设计模式基本很少，很多都是 if else 搞定。懂设计模式的话，对阅读框架源码很有帮助，这点深有体会，先前看 Kafka 源码的时候，有些看的一脸懵逼","like_count":0},{"had_liked":false,"id":255253,"user_name":"幺零贰肆","can_delete":false,"product_type":"c1","uid":1726261,"ip_address":"","ucode":"B559E8E9AA5183","user_header":"https://static001.geekbang.org/account/avatar/00/1a/57/35/b325d272.jpg","comment_is_top":false,"comment_ctime":1603290201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603290201","product_id":100039001,"comment_content":"我说怎么之前看源码总是很吃力，原来缺少这部分知识，一语中的，自己浑然不知<br><br>一、重要性：1.能够读懂大牛写的代码的真正思想和精髓<br>2.自己也可以编写出高质量的有内涵的代码<br>3.增加可扩展性，减少线上bug<br>二、1.单例模式：全局缓存<br>2. 观察者模式：解决业务线程挂掉的情形","like_count":0},{"had_liked":false,"id":253667,"user_name":"Kelly.W","can_delete":false,"product_type":"c1","uid":1518308,"ip_address":"","ucode":"6EFB58A24355C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/2a/e4/714ffd01.jpg","comment_is_top":false,"comment_ctime":1602823925,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1602823925","product_id":100039001,"comment_content":"1. 学习设计模式，可以在日常工作中使用，避免烂代码堆砌，也易于其他人维护，提高自己和团队的效率。<br>2. 能够设计结构合理的通用功能组件<br>3. 提升面试竞争力","like_count":0},{"had_liked":false,"id":253531,"user_name":"住在隔壁的黎蜀黍","can_delete":false,"product_type":"c1","uid":2159236,"ip_address":"","ucode":"BFDA73894AC90B","user_header":"https://static001.geekbang.org/account/avatar/00/20/f2/84/99c1d86c.jpg","comment_is_top":false,"comment_ctime":1602766665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602766665","product_id":100039001,"comment_content":"真的是从O开始学习了，做了六七年搬运功，还是设计模式一知半解。加油","like_count":0},{"had_liked":false,"id":252173,"user_name":"杨鹤云","can_delete":false,"product_type":"c1","uid":2186259,"ip_address":"","ucode":"A09CA071D93B38","user_header":"https://static001.geekbang.org/account/avatar/00/21/5c/13/dccc0cfb.jpg","comment_is_top":false,"comment_ctime":1602159689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602159689","product_id":100039001,"comment_content":"说起这，我就想起以前在澳洲读本科cs的时候， 我们学校本科cs,SE，mobile development三个方向前两年的课程一样，第二年的关于设计模式的课基本就是门劝退课了，我三次过，每次test-50分，均分不到25。好多人过不了那门课就直接换专业或者退学了。。。。","like_count":0},{"had_liked":false,"id":250958,"user_name":"过往的莲华江海","can_delete":false,"product_type":"c1","uid":1157348,"ip_address":"","ucode":"271999FE861B69","user_header":"https://static001.geekbang.org/account/avatar/00/11/a8/e4/6e07d6c1.jpg","comment_is_top":false,"comment_ctime":1601291812,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601291812","product_id":100039001,"comment_content":"今天用了观察者模式，终于告别了轮询","like_count":0},{"had_liked":false,"id":249215,"user_name":"REAL_MADIRD","can_delete":false,"product_type":"c1","uid":1012889,"ip_address":"","ucode":"9E327B5456739D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/99/dbdee494.jpg","comment_is_top":false,"comment_ctime":1600506912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600506912","product_id":100039001,"comment_content":"就是想提高开发效率，公司业务需求变更太频繁，想学点设计模式，可以写出易维护，易扩展的代码，这样再不怕业务需求变更了","like_count":0},{"had_liked":false,"id":249039,"user_name":"DayDayUp","can_delete":false,"product_type":"c1","uid":1610552,"ip_address":"","ucode":"9C53659518AB74","user_header":"https://static001.geekbang.org/account/avatar/00/18/93/38/71615300.jpg","comment_is_top":false,"comment_ctime":1600411082,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1600411082","product_id":100039001,"comment_content":"之前准备面试就准备了基本的简单工厂模式，单例模式。果然书到用时方恨少，现在到了公司看了公司的代码就有点两眼一抹黑的感觉，读的很难，于是就下决心一口气学完，然后以后就开始实践和加强。","like_count":0},{"had_liked":false,"id":246877,"user_name":"JackWang","can_delete":false,"product_type":"c1","uid":1233080,"ip_address":"","ucode":"A27692F6632761","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/fSia25euAvKhffia7qia2xe1cODibS18iaicSiarZVPhPic19LzIpnI9zoHib29FJSOUUCtibVBR00oj7jwxm47FXTLk0a4Q/132","comment_is_top":false,"comment_ctime":1599509788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599509788","product_id":100039001,"comment_content":"在以往的项目中利用过策略模式，主要为了避免if…else if…else的问题","like_count":0},{"had_liked":false,"id":246249,"user_name":"白泽丶","can_delete":false,"product_type":"c1","uid":1320595,"ip_address":"","ucode":"0F1C044AD1B3C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/93/b4791ee3.jpg","comment_is_top":false,"comment_ctime":1599222408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599222408","product_id":100039001,"comment_content":"大学刚毕业的时候读了一遍设计模式之禅，现在除了5大原则都忘得差不多了","like_count":0},{"had_liked":false,"id":245661,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599018653,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599018653","product_id":100039001,"comment_content":"聊一聊你对设计模式相关知识的重要性的看法；<br>1、思考问题的方式。不会的话，就很容易去按照堆砖的思路叠加。<br>会的话，会把建楼分门别类的角色、恰当的流程，恰当的功能，进行有序建立<br><br>在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>1、单例、工厂模式：解决新建对象只能一个，以及复用新建对象<br>2、桥接模式：将变化转移到另外一个对象<br>     适配器模式：不相容的接口，转化为相容的接口，通过组合","like_count":0},{"had_liked":false,"id":245502,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1598961384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598961384","product_id":100039001,"comment_content":"作业：设计模式重要性，让自己的代码看起来更优美，可拓展性更好，虽然很多领导层不怎么重视，还记得组长跟我们说，之前总监说的一句话：“就算你能把代码写的������样，又能怎么样？ 项目能跑起来，稳定运行就可以了。   但我不认同这个观点，同样说写代码，你写的好，那这就是你的能力。学到的永远都是自己的，技多不压身<br>2、自己在项目中用的最多的是模板模式，策略模式。其他的没有主动去用过","like_count":0},{"had_liked":false,"id":245161,"user_name":"Ryoma","can_delete":false,"product_type":"c1","uid":1130590,"ip_address":"","ucode":"7F692369239692","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","comment_is_top":false,"comment_ctime":1598849958,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1598849958","product_id":100039001,"comment_content":"对设计模式相关知识的重要性的看法：觉得自己写出了特别优美的代码——然后发现只不过是应用了某个设计模式后的冲击感","like_count":0},{"had_liked":false,"id":245017,"user_name":"一尾","can_delete":false,"product_type":"c1","uid":1517556,"ip_address":"","ucode":"67D404036231D1","user_header":"https://static001.geekbang.org/account/avatar/00/17/27/f4/a1ce6248.jpg","comment_is_top":false,"comment_ctime":1598783903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598783903","product_id":100039001,"comment_content":"做界面开发。只用到了单例 工厂 观察者 策略这几种，或许也用到了适配器","like_count":0},{"had_liked":false,"id":244963,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1598763776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598763776","product_id":100039001,"comment_content":"现在最大的问题是，写代码的时候，可能用了某种设计模式，但是根本不知道那个是设计模式，很迷茫","like_count":0},{"had_liked":false,"id":244960,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1598763282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598763282","product_id":100039001,"comment_content":"写了6年的烂代码，需要放弃之前的垃圾思维，从零开始了","like_count":0},{"had_liked":false,"id":244369,"user_name":"yingyingqin","can_delete":false,"product_type":"c1","uid":1244276,"ip_address":"","ucode":"D75A0C4DDC5F08","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQyP4WVaRJVZcYD5h0GhEgzdML1qGyDBibu21TsiaDHxBx8knCzrClsoh9ZZwjurLGgvsprP6QW9qQ/132","comment_is_top":false,"comment_ctime":1598494478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598494478","product_id":100039001,"comment_content":"设计模式对于大的系统的设计和小的一个类的设计和实现都很重要。<br>使用过的设计模式基本没有，不过想起来有次在看opencv图像拼接的源码的时候，它在实现特征点的提取功能时，有多种特征点，就采用了类的继承的方法，在父类里定义了虚函数但没有实现，在子类中实现了针对具体特征点的虚函数。","like_count":0},{"had_liked":false,"id":244199,"user_name":"Geek_35cfdd","can_delete":false,"product_type":"c1","uid":1792214,"ip_address":"","ucode":"AD9615ABB4CA25","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoiaP1gptuBzj3AXMpY8yLTIkpuarouOVzLde4636UJ7zAgnOEZibiaAIRVAicFaO64ftH45YOn1pD3VA/132","comment_is_top":false,"comment_ctime":1598426651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598426651","product_id":100039001,"comment_content":"设计模式更像是前人根据历史的经验总结出来的方式，方法。就像是武侠中的招式，虽然把招式学好，可以成为一流高手。但是想成为超一流高手，到时候就不拘泥于招式（各种模式）。而是要学习心法（设计原则）。当然上来就学心法（设计原则），容易走火入魔。哈哈","like_count":0},{"had_liked":false,"id":244188,"user_name":"逆风一战九","can_delete":false,"product_type":"c1","uid":2143900,"ip_address":"","ucode":"83127627F6F37C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI45zO9GOMquhD0ia1wTBSwtJ1juPcpFTSrOGicGW3jf6JclaudauHicN8OpADArQKL8zPtDicEx4aicgA/132","comment_is_top":false,"comment_ctime":1598422504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598422504","product_id":100039001,"comment_content":"设计模式最开始是建筑大师提出来的，建筑如果没有好的设计，就会费工费料， 代码也是如此， 早点读书，学习设计模式，有利于享受复利，<br>用过的设计模式有：<br>1.单例模式：<br>     分 单线程里面 就是始终判断一个初始化为空的变量是否为空， 为空就实例化对应的类，否则直接返回这个变量<br>        多线程的时候， 涉及到后端的知识，暂时还不清楚java如何实现，<br>2. 观察者模式： vue 是mvvm  vm 连接 view 和 model 做到一方变化 另一方由框架完成自动跟着变化，实现数据与ui同步，ui变化与数据变化同步， 方便开发，公众号的订阅和发布， 具体订阅发布和观察者有什么区别 还要再具体学习<br>3 工厂模式： 避免代码调用的过程中，频繁使用new关键字，而是通过工厂模式 统一返回需要的对象<br>4 模版模式， 类似mixin 或者宏 <br>5 命令模式， 一个命令对应一个动作， 对外隐藏实现细节<br>6 策略模式， 避免多个if else的判断<br>8 代理模式， 隐藏本体，实现本体想要功能。例如明星和经纪人<br>9 状态模式，状态的流转，前端Promise 就是一个状态机 由三种状态 对应的状态流转<br><br>以上还可以更高维度划分<br>1. 创建型：关注对象如何实例化或者产生的<br>2 行为型：对象不是一个孤立的个人，对象包括属性和方法，多个对象之间如何通信，包括方法和属性的的互相如何使用<br>3 表现型： 对这个理解还不够，后面再学习","like_count":0},{"had_liked":false,"id":243790,"user_name":"y y gi r l","can_delete":false,"product_type":"c1","uid":2132615,"ip_address":"","ucode":"0BC00677D3071D","user_header":"https://static001.geekbang.org/account/avatar/00/20/8a/87/dd68531b.jpg","comment_is_top":false,"comment_ctime":1598277318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598277318","product_id":100039001,"comment_content":"设计模式是解决代码耦合，扩展性的技术，业务代码里倒是不怎么用设计模式，做开源项目用得很多","like_count":0},{"had_liked":false,"id":241645,"user_name":"python","can_delete":false,"product_type":"c1","uid":1870014,"ip_address":"","ucode":"2226125EBC99A5","user_header":"https://static001.geekbang.org/account/avatar/00/1c/88/be/cc6a7c11.jpg","comment_is_top":false,"comment_ctime":1597377738,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597377738","product_id":100039001,"comment_content":"课堂讨论：<br>1、设计模式是对编码思维的一种矫正，吸取前人经验，提高自我编码能力<br>2、用过单利模式，在数据库链接创建链接对象的时候","like_count":0},{"had_liked":false,"id":240955,"user_name":"飞狼踏月渡惊风","can_delete":false,"product_type":"c1","uid":1531473,"ip_address":"","ucode":"48E64ABDE30464","user_header":"https://static001.geekbang.org/account/avatar/00/17/5e/51/f52b0e17.jpg","comment_is_top":false,"comment_ctime":1597132259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597132259","product_id":100039001,"comment_content":"设计模式：是大佬们总结的经验，套用人只能接受教训不能接受经验这句话来讲，没有实战都是空谈，我以为我知道罢了。<br>记录一点废话：<br>说到用到的模式，咸鱼第一反应工厂单例，其次观察者跟代理，前二是各种框架乱吹，大概原理也讲不清晰，观察跟代理惊然发现一时间也是也说不上来，用到的时候研究了好一段时间，真的就是靠百度会用的咸鱼，也没有系统地做好记录，往后阿梗不要太懒，小聪明只能过一时不能过一世。","like_count":0},{"had_liked":false,"id":240200,"user_name":"Javatar","can_delete":false,"product_type":"c1","uid":2032840,"ip_address":"","ucode":"E216645CDF632C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/04/c8/3c7af100.jpg","comment_is_top":false,"comment_ctime":1596786697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596786697","product_id":100039001,"comment_content":"关于优秀开源项目源码那段说的简直太对了！！！很多设计模式，你如果不知道，或者不熟悉，源码中那一点点就够你想半天，关键最后还是想不明白；但如果你事先掌握了这种设计模式，再去看源码，你似乎就能理解为啥要这么写了，甚至还会和作者产生一点共鸣，那种感觉很奇妙...","like_count":0},{"had_liked":false,"id":239930,"user_name":"victor","can_delete":false,"product_type":"c1","uid":1389245,"ip_address":"","ucode":"23E2F8CF93E46E","user_header":"https://static001.geekbang.org/account/avatar/00/15/32/bd/305b457a.jpg","comment_is_top":false,"comment_ctime":1596695872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596695872","product_id":100039001,"comment_content":"设计模式真的是很重要，不管是在平时写代码的过程中还是在看别人的代码过程中！没有扎实的功底，在阅读源码的过程中很多东西看的是眼花缭乱的，看着看着就断线了。<br>希望能通过课程提高自己的编码能力，写出漂亮的代码！<br>2.因为自己在这方面的功底比较弱，所以平时开发的工程中单例用的比较多，其他的模式都很少用！","like_count":0},{"had_liked":false,"id":239909,"user_name":"zz","can_delete":false,"product_type":"c1","uid":1401424,"ip_address":"","ucode":"0EA8F2BCEEF07D","user_header":"https://static001.geekbang.org/account/avatar/00/15/62/50/5af82e73.jpg","comment_is_top":false,"comment_ctime":1596690451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596690451","product_id":100039001,"comment_content":"1、应用设计模式可以避免在开发过程中过程式编码，可以把各个代码优雅的组合在一起，为以后业务扩展留更光明的路子<br>2、应用场景<br>         1》责任链模式：用于商品订购场景鉴权，不同用户、不同商品有不同的校验规则。每类场景可能存在相同的校验逻辑，将这些校验逻辑抽取出来作为链条中的一环，在校验前组合每类场景的校验链条。<br>         2》代理模式：通过代理模式来实现对接口调用耗时以及日志打印，避免在每个日志中增加业务逻辑<br>         3》策略模式：调用外部接口时，外部接口的调用方式不一致，比如有ws、rest、socket等，将具体的调用封装成一个策略，解决聚合调用外部接口的逻辑，以及对调用外部接口统一实现日志记录、耗时记录、异常记录等内容","like_count":0},{"had_liked":false,"id":239854,"user_name":"zhao健枫的微信ID确实有点长啊","can_delete":false,"product_type":"c1","uid":1535005,"ip_address":"","ucode":"46C5D8EBE40109","user_header":"https://static001.geekbang.org/account/avatar/00/17/6c/1d/203e2917.jpg","comment_is_top":false,"comment_ctime":1596678147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596678147","product_id":100039001,"comment_content":"为什么学：想掌握一种能力--能写出那种让人一眼看不懂，看多两眼不禁称妙的代码的能力！！！<br>用过：只写过观察者，策略，Builder等烂大街的模式，可能还是半吊子。","like_count":0},{"had_liked":false,"id":239843,"user_name":"席席","can_delete":false,"product_type":"c1","uid":1591399,"ip_address":"","ucode":"656377E29D4F76","user_header":"https://static001.geekbang.org/account/avatar/00/18/48/67/128eda8f.jpg","comment_is_top":false,"comment_ctime":1596676421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596676421","product_id":100039001,"comment_content":"觉得王老师说的这两句挺好的，一是如果不懂设计模式阅读源码的脑容量会被设计模式的代码复杂度消耗。二是假设我自己在代码里写了设计模式，如何让后者也能便于理解。","like_count":0},{"had_liked":false,"id":239762,"user_name":"小玉家的猫","can_delete":false,"product_type":"c1","uid":1731082,"ip_address":"","ucode":"ACA36922F22B69","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6a/0a/45562844.jpg","comment_is_top":false,"comment_ctime":1596635553,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596635553","product_id":100039001,"comment_content":"写过最多的就是单例模式了，感觉很好用！但副作用也很大，容易出现内存泄露。","like_count":0},{"had_liked":false,"id":239524,"user_name":"andy","can_delete":false,"product_type":"c1","uid":1752513,"ip_address":"","ucode":"A1D3C7C9DCCB89","user_header":"https://static001.geekbang.org/account/avatar/00/1a/bd/c1/e10c4014.jpg","comment_is_top":false,"comment_ctime":1596554420,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1596554420","product_id":100039001,"comment_content":"这不就是面试常问的问题，尤其第二个问题<br>先回答第一个问题<br>对于设计模式，它是对各种实际应用场景的高度抽象，可以说是前人对于人类生活的高度总结，是经典中的经典，可以说，对于许多的计算机基础学科而言，设计模式是能够非常具体的贴近人类生活的场景的了，同时，设计模式，可以理解为套路，他能够方便开发者，更快更高效的应对相似的场景，能够设计出高效高质量的代码。不是有那么一种说法，高手，都是那些有着系统知识，有着各种套路和方法论的人嘛。而设计模式，可以说是，coder高手的必备武器。<br>对于第二个问题，多年的开发经验，实际上用到了许多的设计模式。<br>对于单例设计模式，为了能够解决多线程并发导致的资源访问，维护原子性操作，在号码生成的业务场景中，使用了单例设计模式，进行访问控制，当然，这里也加上了锁，进而保证号码生成不会出现重复的情况。<br>再比如生产与消费者模式，这个在整个电商业务中用的非常多，为了能够设计一个大量调用火车票订票服务的系统，采用了该模式，不断将新生成的订票订单，放入队列之中，随后，消费者再获取数据，访问第三方的火车票订票服务系统。<br>其他的模式，这里就不一一举例了。<br>","like_count":0},{"had_liked":false,"id":238893,"user_name":"迈克糖","can_delete":false,"product_type":"c1","uid":1749228,"ip_address":"","ucode":"A55D3DB2B20C4B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b0/ec/78be126d.jpg","comment_is_top":false,"comment_ctime":1596358750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596358750","product_id":100039001,"comment_content":"我用的最多的事模板设计模式，和策略模式。拿着锤子看的眼里到处都是钉子，我发现什么我写什么代码都会往这两种模式上扯","like_count":0},{"had_liked":false,"id":238690,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1596262223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596262223","product_id":100039001,"comment_content":"作者说到看开源项目无法看懂，我深有体会，我能够看懂每个代码段的功能，但是对于稍大一些的项目，我就无法了解其中的精髓，很快会陷入看不懂得状态，因此，设计模式在大型项目里是有举足轻重的地位的。我在工作中，对于一些资源和配置文件的管理，单例模式还是用得比较多。","like_count":0},{"had_liked":false,"id":238586,"user_name":"Elvis Lee","can_delete":false,"product_type":"c1","uid":2098270,"ip_address":"","ucode":"A4B26AFFE817FA","user_header":"https://static001.geekbang.org/account/avatar/00/20/04/5e/5d2e6254.jpg","comment_is_top":false,"comment_ctime":1596205675,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596205675","product_id":100039001,"comment_content":"重要性：学习设计模式，更好的构建项目，编写好的代码。职场上升职加薪<br>游戏开发，经常需要用到单例，但是由于没学设计模式，写了很多垃圾代码，自己后期维护也很难，所以决定好好学习设计模式","like_count":0},{"had_liked":false,"id":238574,"user_name":"。华伟","can_delete":false,"product_type":"c1","uid":2095422,"ip_address":"","ucode":"CD2645632E70D0","user_header":"https://static001.geekbang.org/account/avatar/00/1f/f9/3e/aef7a849.jpg","comment_is_top":false,"comment_ctime":1596201671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596201671","product_id":100039001,"comment_content":"学设计模式主要是想让自己写的代码做到有的放矢，而不是根据感觉写，因为每个时间段的感觉不一样","like_count":0},{"had_liked":false,"id":238497,"user_name":"栤枫","can_delete":false,"product_type":"c1","uid":1242121,"ip_address":"","ucode":"72C5D6EB22CA9F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/09/d78fa748.jpg","comment_is_top":false,"comment_ctime":1596185092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596185092","product_id":100039001,"comment_content":"从面向过程到面向对象编程的转变","like_count":0},{"had_liked":false,"id":238418,"user_name":"静","can_delete":false,"product_type":"c1","uid":1374928,"ip_address":"","ucode":"8C0D23AAEC67C4","user_header":"https://static001.geekbang.org/account/avatar/00/14/fa/d0/17c6ef3b.jpg","comment_is_top":false,"comment_ctime":1596163367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596163367","product_id":100039001,"comment_content":"新手学习设计模式，跟着大佬从零开始","like_count":0},{"had_liked":false,"id":238276,"user_name":"Happy—sea","can_delete":false,"product_type":"c1","uid":1624484,"ip_address":"","ucode":"4EAD3636164392","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/a4/66b606ad.jpg","comment_is_top":false,"comment_ctime":1596108304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596108304","product_id":100039001,"comment_content":"看了一些设计模式，但是不会用，继续学习老师的课程","like_count":0},{"had_liked":false,"id":238234,"user_name":"坚持","can_delete":false,"product_type":"c1","uid":1004051,"ip_address":"","ucode":"80049DF366F37E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI8HY5UxPvK5EIEicxCARjePdicpkcdyViaxn0dHrVsfXOA49BHkyMW4h3LSZhnCz6jXTgx2PFEKXYWQ/132","comment_is_top":false,"comment_ctime":1596099412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596099412","product_id":100039001,"comment_content":"设计模式可以让代码更好看，像是一个规则，coding的时候有迹可循，不过，工作三年了，才用过观察者模式和单例模式，欠缺好多，过来补课了：）","like_count":0},{"had_liked":false,"id":237685,"user_name":"汉江","can_delete":false,"product_type":"c1","uid":1788647,"ip_address":"","ucode":"01622D984B8F9B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4a/e7/6c16af5d.jpg","comment_is_top":false,"comment_ctime":1595925249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595925249","product_id":100039001,"comment_content":"看了作者写的话  才明白 自己以前看spring源码  虽然基本的流程是清晰的，但是为什么这么设计是懵逼的","like_count":0},{"had_liked":false,"id":237424,"user_name":"《木之南》","can_delete":false,"product_type":"c1","uid":2085644,"ip_address":"","ucode":"C60D2F6014EBAE","user_header":"https://static001.geekbang.org/account/avatar/00/1f/d3/0c/5e48f701.jpg","comment_is_top":false,"comment_ctime":1595825502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595825502","product_id":100039001,"comment_content":"设计模式是一个开发具备的一种素养；要慢慢的培养并在实际开发中锻炼与升华；<br><br>用过单例模式，业务需求发送短信功能；<br>用过工厂模式，物联网底端与设备进行通讯时使用过；","like_count":0},{"had_liked":false,"id":237081,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1595670632,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1595670632","product_id":100039001,"comment_content":"使用策略模式 应对对接不同渠道使用不同handler","like_count":0},{"had_liked":false,"id":236758,"user_name":"taku","can_delete":false,"product_type":"c1","uid":2068684,"ip_address":"","ucode":"B22DA9A4A9DC91","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotIianb3beTzsGIte6BZxlIhEwc2ryrNBGxZy8ibKbfibVJyUS8d3ZxybAdfJwHPm13ydPC4VJP7Lbw/132","comment_is_top":false,"comment_ctime":1595520080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595520080","product_id":100039001,"comment_content":"现在开始学习，加油！","like_count":0},{"had_liked":false,"id":236574,"user_name":"思密达","can_delete":false,"product_type":"c1","uid":1812646,"ip_address":"","ucode":"82FF8EE9A37461","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a8/a6/825879a0.jpg","comment_is_top":false,"comment_ctime":1595470682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595470682","product_id":100039001,"comment_content":"1、很重要，早点学习，就可以直接运用在工作中，一边学一变练，日积月累，就可以甩开周围人几条街。<br>2、初来乍到，组内的project的代码，各种继承，知道使用了某种设计模式，但是就是看不懂套路，不开心。","like_count":0},{"had_liked":false,"id":235444,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1595039210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595039210","product_id":100039001,"comment_content":"读完了 《大话设计模式》和《clean code》 只是有意识的去简单优化下命名，能复用的就复用，但是还是不会设计","like_count":0},{"had_liked":false,"id":235198,"user_name":"prepared","can_delete":false,"product_type":"c1","uid":1194853,"ip_address":"","ucode":"00E54A5C7CDCBE","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/65/3a4fc8cf.jpg","comment_is_top":false,"comment_ctime":1594943074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594943074","product_id":100039001,"comment_content":"数据共享平台，用到工厂模式。主要解决要共享多类数据，但是它的逻辑是一样的，使用工场方法创建针对不同数据的处理类。","like_count":0},{"had_liked":false,"id":234502,"user_name":"笨鸟","can_delete":false,"product_type":"c1","uid":1236320,"ip_address":"","ucode":"68029ADA76AA5A","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","comment_is_top":false,"comment_ctime":1594706939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594706939","product_id":100039001,"comment_content":"我们公司都是用IF-elseif-else ","like_count":0},{"had_liked":false,"id":232422,"user_name":"幽林萌逐","can_delete":false,"product_type":"c1","uid":1520451,"ip_address":"","ucode":"E6D95EC891800F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqrAA1j4Oyy6ibicNOicn8K0olrEjtLLanic8V0y9icia6cvCVRCiabOm5llC0WhzcSWvaI2fia75hYbvjrQ/132","comment_is_top":false,"comment_ctime":1593999436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593999436","product_id":100039001,"comment_content":"设计模式优点是可以提高代码的可维护性可读性<br>项目中由于有不同的供应商，使用工厂模式 根据入参的key返回单接口的不同的实现类，从而执行不同的逻辑。<br>我抛个问题点出来，很多同事不了解设计模式，比如我在项目里使用了一个较冷门的设计模式，但是他们有时候读我的代码就会有点晕，相反对于他们来说if else反而更好读，这个问题就很尴尬。","like_count":0},{"had_liked":false,"id":232123,"user_name":"sorationalist","can_delete":false,"product_type":"c1","uid":2012902,"ip_address":"","ucode":"4E2B3B3234E1C5","user_header":"https://static001.geekbang.org/account/avatar/00/1e/b6/e6/b2be4536.jpg","comment_is_top":false,"comment_ctime":1593860308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593860308","product_id":100039001,"comment_content":"平时开发确实只是简单的增删改查，并没有刻意使用任何设计模式。","like_count":0},{"had_liked":false,"id":229460,"user_name":"harukong","can_delete":false,"product_type":"c1","uid":1443551,"ip_address":"","ucode":"8FD25B7341FCD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKRn8Mcfib1laSicpyueZJVbGKOibRKmHP0mlGV3exVSNhIy9nnmmEz2EGFPQL2z40939gVic0AQCw68w/132","comment_is_top":false,"comment_ctime":1593003781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593003781","product_id":100039001,"comment_content":"1、聊一聊你对设计模式相关知识的重要性的看法；<br>--设计模块对于程序员写出高质量代码比较重要，大家都遵循一定的规则去写代码，方便团队规范代码实现<br>2、在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>--使用过单例模式、策略模式<br>--单例模块 避免同一个对象重复创建，多用于项目中使用频率较高的操作类<br>--策略模块 大量if else业务代码实现功能的场景 使用策略模式解决了有新功能在很多if else中往下编写，提高代码的可读性","like_count":0},{"had_liked":false,"id":229333,"user_name":"breeze","can_delete":false,"product_type":"c1","uid":1747935,"ip_address":"","ucode":"143767E9307ED2","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ab/df/7bf49e31.jpg","comment_is_top":false,"comment_ctime":1592967362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592967362","product_id":100039001,"comment_content":"工作刚满一年，学习设计模式的初衷就是单纯的为了应付面试而去网上搜索了一下，但在实际工作中发现，设计模式非常重要，网上讲解的都是零零散散的，从来没有系统的学习过。","like_count":0},{"had_liked":false,"id":228076,"user_name":"杨锋","can_delete":false,"product_type":"c1","uid":1283461,"ip_address":"","ucode":"85A7828A538FB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","comment_is_top":false,"comment_ctime":1592549551,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592549551","product_id":100039001,"comment_content":" 因为平时工作基本都是crud，设计模式在工作过没太大的感觉。但是对于看源码，设计模式是必须要懂的，比如spring aop源码。如果不懂动态代理，基本上就没法看下去。","like_count":0},{"had_liked":false,"id":226507,"user_name":"小树苗","can_delete":false,"product_type":"c1","uid":1644500,"ip_address":"","ucode":"71288176D058E2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqtnoXPFibFwKdrUibJQWYSCmAlc7FeEH5MbjiawszNgwEXAkuWKGYQMTQbnQbjlR8n9lpDgN4GQHoXQ/132","comment_is_top":false,"comment_ctime":1592124921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592124921","product_id":100039001,"comment_content":"1.设计模式对于组织大型项目代码具有指导意义。<br>2.很多开发框架包含很多设计模式，如果不理解设计模式，就会知其然不知其所以然。","like_count":0},{"had_liked":false,"id":226439,"user_name":"Chris Zou","can_delete":false,"product_type":"c1","uid":1897148,"ip_address":"","ucode":"B6DFC71C1DD8B7","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/bc/ffc7ad67.jpg","comment_is_top":false,"comment_ctime":1592103722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592103722","product_id":100039001,"comment_content":"* 聊一聊你对设计模式相关知识的重要性的看法；<br>1. 应用到实践中，设计和开发可扩展性、易维护、阅读性好的高质量代码<br>2. 能看懂大牛写的代码、优秀的开源框架<br><br>* 在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>单例模式，当时主要解决了全局变量的问题；还有工厂模式，只容易扩展一些新的算法；其他的没有仔细想过","like_count":0},{"had_liked":false,"id":226225,"user_name":"邹培俊","can_delete":false,"product_type":"c1","uid":1199467,"ip_address":"","ucode":"54B1AAE6BDAB33","user_header":"https://static001.geekbang.org/account/avatar/00/12/4d/6b/79642a53.jpg","comment_is_top":false,"comment_ctime":1592008941,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592008941","product_id":100039001,"comment_content":"问：聊一聊你对设计模式相关知识的重要性的看法；<br>答：设计模式类似程序员之间的约定俗成的暗号，在说设计和实现的时候比较容易让人理解，降低沟通成本。设计模式是一套成熟的解决问题的思路，而且保证的程序的可扩展性。<br>问：在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>答：我们的系统是一个事件接收和事件驱动的系统。每一个消息的处理都基本上需要经过转换，过滤，打标，执行4个阶段。消息的处理逻辑有的是一样的，有的可能打标规则不一样，有的可能执行规则不一样，为了好维护和方便扩展，我们将具体实现封装成一个个组件，给每个消息处理流程根据业务场景配置不同的转换器，过滤器，打标处理器，执行处理器。这些通过一个链条组成，处理者不需要关系消息的传递。这个过程就用到了策略模式和责任链模式","like_count":0},{"had_liked":false,"id":225897,"user_name":"小盆友想家","can_delete":false,"product_type":"c1","uid":1878383,"ip_address":"","ucode":"933CEBB96C7855","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a9/6f/e05910a9.jpg","comment_is_top":false,"comment_ctime":1591884799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591884799","product_id":100039001,"comment_content":"老师说的太感通深受，虽然已经工作了3-4年，但基本都是在框架下面增增改改，脱离框架之后真正开发时有点摸不到头绪，设计模式只接触过单例、策略、工厂模式，其他接触相对较少；","like_count":0},{"had_liked":false,"id":225378,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1591748701,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1591748701","product_id":100039001,"comment_content":"模版模式、工厂模式、单例模式经常用，但是并不懂怎么才算用得恰当、好坏","like_count":0},{"had_liked":false,"id":224207,"user_name":"pony","can_delete":false,"product_type":"c1","uid":1021530,"ip_address":"","ucode":"B72FA864CDD286","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/5a/846a09f7.jpg","comment_is_top":false,"comment_ctime":1591317236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591317236","product_id":100039001,"comment_content":"1.设计模式是对一类问题总结后给出的成熟的解决方案，可以让软件设计有了标准去参考<br>2.单例模式、委托模式（go），工厂模式","like_count":0},{"had_liked":false,"id":223730,"user_name":"微末凡尘","can_delete":false,"product_type":"c1","uid":1099525,"ip_address":"","ucode":"25EDFD0914D0F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","comment_is_top":false,"comment_ctime":1591167237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591167237","product_id":100039001,"comment_content":"1、设计模式的重要性不言而喻，可以可以大大解放我们的生产力，提高生产效率，编写出可维护，可扩展的代码<br>2、我是一名php开发工程师，在学习thinkphp5源码的过程中，就发现了作者使用了大量的设计模式，比如最简单的单例模式，工厂模式，注册树模式，门面模式等等，学习了一些设计模式，看框架的源代码清楚明了多了。","like_count":0},{"had_liked":false,"id":222397,"user_name":"yonghao","can_delete":false,"product_type":"c1","uid":2026001,"ip_address":"","ucode":"59E0141414CF95","user_header":"","comment_is_top":false,"comment_ctime":1590784658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590784658","product_id":100039001,"comment_content":"打卡：<br>课堂内容: <br>为什么要学习设计模式相关的知识，总结一下的话，主要有这样五点：应对面试中的设计模式相关问题；告别写被人吐槽的烂代码；提高复杂代码的设计和开发能力；让读源码、学框架事半功倍；为你的职场发展做铺垫。<br>讨论：<br>今天课堂讨论的话题有两个：聊一聊你对设计模式相关知识的重要性的看法：自己没有这方面的知识，所以当写了几百行代码，尤其要频繁修改参数的时候，认识到低耦合的重要性，对自己的深感无力，希望跟着争哥好好学习。<br>在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>还没做过项目的菜鸡，以后来回答","like_count":0},{"had_liked":false,"id":221184,"user_name":"王瑞强","can_delete":false,"product_type":"c1","uid":1829090,"ip_address":"","ucode":"DEE4EB5E23433F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/e8/e2/2bcaef68.jpg","comment_is_top":false,"comment_ctime":1590421661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590421661","product_id":100039001,"comment_content":"（一）设计模式重要性的看法<br>1，可以提高代码的可读性和可维护性。比如多层嵌套的if else看起来头大，改起来也费劲<br>2，可以提高代码的扩展能力。比如：开发一个接口，怎么设计这个接口，才能让它拥有很好的扩展能力，从而兼容新的功能，不至于原来的接口废弃，重新开发<br>（二）曾经用到的设计模式<br>1，单例模式。使用场景：城市基础信息缓存，使用map保存cityId和城市信息，写了一个根据cityId查询cityInfo的方法，使用双重非空判断加锁的方式从map中获取cityInfo<br>2，建造者模式。使用场景：很多地方会用到根据乘客id去查询乘客信息的方法，为了防止在没个调用此方法前都做乘客id的非空检验，我在build方法了统一做了id的检验，为空则抛异常，不为空则调用此接口，同时赋值返回结果给builder属性。个人感觉不好，有点生搬硬套<br>3，简单工厂模式。使用场景：创建一个factory类，在写一个静态方法getInstance(type)，根据字段type来new不同的类<br>4，责任链模式。使用场景：某个业务，满足一定条件，需要打电话通知客人，满足另一个条件，通知客服。我当时构建了一个抽象类，里面保存了一个后继指针。每种处理方式都继承这个抽象类，同时构造成链。现在想想感觉也不怎么合适，感觉责任链更像是一个审批流。","like_count":0},{"had_liked":false,"id":219973,"user_name":"朝小树","can_delete":false,"product_type":"c1","uid":1323875,"ip_address":"","ucode":"18DC282DEF16C8","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/63/2d48822a.jpg","comment_is_top":false,"comment_ctime":1590128112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590128112","product_id":100039001,"comment_content":"如果写业务代码时，只想着简单的实现功能，代码能用；使用框架时只想着怎么使用，就算开发多年，也不会是不会有太大的提高的；要尽量写出易扩展、易用、易维护的代码，尽量简洁明了，注释清晰，性能优越。","like_count":0},{"had_liked":false,"id":219736,"user_name":"永远不要低估一颗冠军的心","can_delete":false,"product_type":"c1","uid":1339230,"ip_address":"","ucode":"FF0DD7382CD3CA","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/5e/3f7e9ccd.jpg","comment_is_top":false,"comment_ctime":1590072319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590072319","product_id":100039001,"comment_content":"1使用设计模式的话会使代码看上去技术含量高一点，最主要的方便是便于扩展。可以用最少的代码完成复杂的功能，而且保证不会有大方向上的逻辑错误。都是前人总结出来的最佳实践，可以大大提高开发的效率。<br>2.在我的开发工作中，见过一次创建数据库连接使用单例模式。但是自己从来没有用过设计模式。甚至最近几年在工作中都没有见到过那一段代码使用了设计模式，也看不出代码是怎样分层的。面试的时候也只能是背一下面试题，从来都举不出使用设计模式真是的案例。之前在网上也买了关于设计模式的课程。现在再回顾，倒是看着眼熟，但是具体分析，也不是很懂。更别说熟练应用了，惭愧。从这个专栏开始学起。","like_count":0},{"had_liked":false,"id":217559,"user_name":"Geek rick","can_delete":false,"product_type":"c1","uid":1754279,"ip_address":"","ucode":"1A9216B2A47E92","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/QlHaicGZOD7c68A6gHC5dGuukQ4VJtVpGCeHHc8ANvHxQ8K9GibVwLHQVURQeWGed8yOWcMqKDnibaSd7S6Y4WKSQ/132","comment_is_top":false,"comment_ctime":1589533698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589533698","product_id":100039001,"comment_content":"作为一个AI的半吊子程序员，视觉领域有很多好用的库，譬如mmdetection，detectron2等，这些库里面有很多hook，因为自己了解过一点设计模式的皮毛，大概能看出来是个啥模式，我亲眼见到很多同学，按照hook，一个个的看源码，纸上记得密密麻麻，然后框架还是不会用，这就是个模版模式，知道设计模式，扩展起来得心应手。这也是我想再多系统学学设计模式的初衷。","like_count":0},{"had_liked":false,"id":216600,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589293381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589293381","product_id":100039001,"comment_content":"数据结构与算法关注代码高效。面向对象编程、设计原则、设计模式关注代码可扩展、可读、可测试、可维护。","like_count":0},{"had_liked":false,"id":216255,"user_name":"GeekD","can_delete":false,"product_type":"c1","uid":1783804,"ip_address":"","ucode":"357FAB2249FDB4","user_header":"","comment_is_top":false,"comment_ctime":1589210221,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589210221","product_id":100039001,"comment_content":"设计模式的重要性：<br>1.写出易扩展，易维护，清晰的程序代码。<br>2.能在看源码时更容易理解作者的设计意图，降低阅读源码的难度<br><br>用过哪些设计模式：<br>1.模板方法，固定程序运行流程，暴露自定义的钩子函数供子类去做个性化实现<br>2.策略模式，减少if else 的冗长判断，在需要添加新的判断逻辑时通过添加策略类即可<br>3.单例模式，这个应该基本每个开发人员都用过吧<br>","like_count":0},{"had_liked":false,"id":213283,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588361615,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1588361615","product_id":100039001,"comment_content":"用过建造者模式，观察者模式，其他没用过。","like_count":0},{"had_liked":false,"id":213282,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588361472,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1588361472","product_id":100039001,"comment_content":"学过工厂模式，单例模式，代理模式等模式，然而一用就不记得了，感觉脑袋空空，不知从何下手。","like_count":0},{"had_liked":false,"id":213151,"user_name":"妙子爸","can_delete":false,"product_type":"c1","uid":1433842,"ip_address":"","ucode":"988C1A7B9548F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/hsxzhpId4k4uGK5CG534oLEIibqluVwOqgGqxFibILZDSia38gYOHflJDE1zfDVRGRIRq8sxdrAzWnvDP0eVDRMyQ/132","comment_is_top":false,"comment_ctime":1588316183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588316183","product_id":100039001,"comment_content":"组合模式：基金各种参数最大回撤、夏普等的计算提供给不同页面展示。<br>责任链模式：开市前各种初始化，收市后的各种状态变更的顺序执行。<br>策略模式：替换复杂的if else场景。","like_count":0},{"had_liked":false,"id":212789,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1588211366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588211366","product_id":100039001,"comment_content":"今天重温了第一节，为什么要学习设计模式？我的收获有：<br><br>我们都知道数据结构与算法的重要性，它解决的问题是：写出高效的代码，时间复杂度低，空间复杂度低。我们也花了很多时间在练习，比如去LeetCode上面刷题。<br><br>那么设计模式用来干嘛的呢？它解决的什么问题？设计模式指导我们写出高质量的代码。高质量的代码表现在代码具有可扩展性、可维护性、可读性、可测试性。对于设计模式的学习似乎没有什么地方可以让我们像刷题那样去练习，那咋办呢？有他人指导，跟着高手去学习，看着代码从垃圾变成优秀的过程，自己也就会慢慢领会。<br><br>设计模式给程序员带来的直接好处是：<br><br>通过面试；<br>写出好代码，不要满篇都是if-else，有很多重复的代码，别人也无法读懂，看也看不明白、改又不敢改；<br>学框架、读源码，优秀的框架必然采用设计模式，没有这些知识，是很难读懂的，无法get到其中精髓；<br>带团队，作为leader当然得review code，招募新人。<br>说来惭愧，自己在工程中还没有应用过设计模式。了解到的有<br><br>在Spring中Bean的生命周期有单例、原型，此处应用了单例模式和原型模式。<br>在AOP中会用到动态代理模式。<br>在Java的IO包中有装饰器模式。<br>在数据库连接池中会有工程模式。","like_count":0},{"had_liked":false,"id":210442,"user_name":"KID","can_delete":false,"product_type":"c1","uid":1867938,"ip_address":"","ucode":"EE80B7CA7CC2A2","user_header":"https://static001.geekbang.org/account/avatar/00/1c/80/a2/96dcd1fa.jpg","comment_is_top":false,"comment_ctime":1587744947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587744947","product_id":100039001,"comment_content":"ui接收后端消息采用订阅模式，各个ui模块只订阅自己需要的服务端消息。<br>ui拼接采用组件而不是继承，继承很难抽象出共用部分，主要是因为ui设计由美术同学主导；采用组件可以自由组合需要的模块，不用受制于人。","like_count":0},{"had_liked":false,"id":208414,"user_name":"滴水藏海","can_delete":false,"product_type":"c1","uid":1074640,"ip_address":"","ucode":"9C1F9C91189F69","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/d0/c11d4a31.jpg","comment_is_top":false,"comment_ctime":1587353642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587353642","product_id":100039001,"comment_content":"一些工具sdk的抽离，用的比较多的是单例&#47;工厂和策略<br>业务上主要做优惠券服务，用的模版方法，装饰模式，责任链模式，工厂方法","like_count":0},{"had_liked":false,"id":208281,"user_name":"🌻","can_delete":false,"product_type":"c1","uid":1509651,"ip_address":"","ucode":"9B4D8CA8C09A70","user_header":"https://static001.geekbang.org/account/avatar/00/17/09/13/d762ce74.jpg","comment_is_top":false,"comment_ctime":1587314119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587314119","product_id":100039001,"comment_content":"1. 聊一聊你对设计模式相关知识的重要性的看法；<br>新入职工作，拿到同事给的代码，看到一个读入excel表格功能，重复从16列读入数据，写了重复的16个if else，我就明白这一定不是好代码。更加坚定了我要学习设计模式<br><br><br>2. 在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>开始学习课程，并把课程中的内容应用到实践上","like_count":0},{"had_liked":false,"id":207006,"user_name":"₯㎕","can_delete":false,"product_type":"c1","uid":1080182,"ip_address":"","ucode":"6E06492D0FBA54","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/76/69aada7c.jpg","comment_is_top":false,"comment_ctime":1586993174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586993174","product_id":100039001,"comment_content":"设计模式的重要性<br>1.提高自己的业务分析，设计，编码能力，写出优秀的高质量代码<br>2.阅读源码，框架能够快速理解底层架构，吸收设计的精髓<br>3.提高程序的可扩展性，可读性，易用性，真正做到高内聚低耦合，<br>4.面试重点，升职加薪必备<br><br>在过往的项目中用过哪些设计模式<br>1.策略模式<br>多系统接口的统一封装适配<br>2.责任链模式<br>订单下单后使用责任链模式处理优惠券，积分等逻辑","like_count":0},{"had_liked":false,"id":203736,"user_name":"冯佳兴","can_delete":false,"product_type":"c1","uid":1717342,"ip_address":"","ucode":"41D308E99EF9FF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/34/5e/089ac156.jpg","comment_is_top":false,"comment_ctime":1586260918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586260918","product_id":100039001,"comment_content":"机房收费系统中用过单例模式，解决了窗口重复弹出的问题，即对象只能实例化一次，收费的时候用了策略模式，其次就是职责链模式，用在审批的场景。外观模式的话，在七层的外观层用了一下。","like_count":0},{"had_liked":false,"id":203141,"user_name":"MrVito","can_delete":false,"product_type":"c1","uid":1252169,"ip_address":"","ucode":"716FF6F8871706","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/49/ddefc656.jpg","comment_is_top":false,"comment_ctime":1586143623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586143623","product_id":100039001,"comment_content":"写过简单的工厂模式demo，写过单例模式demo，实战项目真的少见少见！","like_count":0},{"had_liked":false,"id":202362,"user_name":"👅","can_delete":false,"product_type":"c1","uid":1335335,"ip_address":"","ucode":"3A3198E899DC6A","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/27/fcc46413.jpg","comment_is_top":false,"comment_ctime":1585975822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585975822","product_id":100039001,"comment_content":"1.提高自己编码能力，有自信跟别人说我可以写<br>2.面试时会用<br>3.写出的代码易维护，易交接<br>4.可以教别人装逼😂<br><br>没有刻意使用过设计模式，还是太菜了，加油学习","like_count":0},{"had_liked":false,"id":202222,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1585925771,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1585925771","product_id":100039001,"comment_content":"打个鸡血！出发！","like_count":0},{"had_liked":false,"id":201423,"user_name":"AlfredLover","can_delete":false,"product_type":"c1","uid":1042354,"ip_address":"","ucode":"A3A998F362CC37","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/b2/334bc992.jpg","comment_is_top":false,"comment_ctime":1585786978,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585786978","product_id":100039001,"comment_content":"设计模式让你写出简洁高效的代码，但可读性未必好。业务代码主要是让其它人能快速理解业务，要慎用设计模式。","like_count":0},{"had_liked":false,"id":200326,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1585572893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585572893","product_id":100039001,"comment_content":"1.设计模式是架构师的基本能力，学习设计模式就像你英文中的短语，你学的多了，就能写出优美的句子，同理也能写出优美的代码，今天第一天订。<br><br>2.预计这么课学完到年底了，今年要有个突破，不然机会来了也把我不住，老师讲的问题，在我身上都出现了，天天写crud快废了。","like_count":0},{"had_liked":false,"id":199942,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1585503133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585503133","product_id":100039001,"comment_content":"设计模式就像唐诗三百首，熟读后不会作诗也会吟","like_count":0},{"had_liked":false,"id":199941,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1585503007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585503007","product_id":100039001,"comment_content":"有些知识要早点知道，有些书要早点读","like_count":0},{"had_liked":false,"id":198961,"user_name":"张贺","can_delete":false,"product_type":"c1","uid":1283181,"ip_address":"","ucode":"0254E40FB3EB5F","user_header":"https://static001.geekbang.org/account/avatar/00/13/94/6d/5cd6e8c7.jpg","comment_is_top":false,"comment_ctime":1585474457,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585474457","product_id":100039001,"comment_content":"从0开始学设计模式","like_count":0},{"had_liked":false,"id":198520,"user_name":"与路同飞","can_delete":false,"product_type":"c1","uid":1138821,"ip_address":"","ucode":"2985F1440A1962","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/85/f72f1d94.jpg","comment_is_top":false,"comment_ctime":1585455030,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585455030","product_id":100039001,"comment_content":"1.聊一聊你对设计模式相关知识的重要性的看法<br>    答：学好设计模式是自己晋升大牛的必要阶段，各种开源框架源码中到处透漏着设计模式，如果不掌握这项基础能力，会导致看开源源码会晕晕乎乎的。<br>2.在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>   答：有用过，但是不多。模版方法模式，医生排班系统，四种不同班次对于的详细规则不同，但是整体的处理逻辑相同，抽出一个模版类，实现整体处理过程，具体的实现留出四个抽象方法，让四个子类去分别实现","like_count":0},{"had_liked":false,"id":198430,"user_name":"乐朦","can_delete":false,"product_type":"c1","uid":1938739,"ip_address":"","ucode":"C5A666DB0521E0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/95/33/7d4b08ec.jpg","comment_is_top":false,"comment_ctime":1585450885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585450885","product_id":100039001,"comment_content":"曾经有一个面试摆在我面前，因为设计模式，直接凉凉了。一直想把设计模式学好学透，也看了一些书籍，但是应用上还是比较吃力。期待通过设计模式之美，拿下设计模式。","like_count":0},{"had_liked":false,"id":198052,"user_name":"天草二十六","can_delete":false,"product_type":"c1","uid":1360712,"ip_address":"","ucode":"3165EE3007527B","user_header":"https://static001.geekbang.org/account/avatar/00/14/c3/48/3a739da6.jpg","comment_is_top":false,"comment_ctime":1585407909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585407909","product_id":100039001,"comment_content":"评论都可以学到很多，多看看","like_count":0},{"had_liked":false,"id":197992,"user_name":"赵毅","can_delete":false,"product_type":"c1","uid":1905585,"ip_address":"","ucode":"28F6820F1987F6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIgDicRj9LAvWVyuibTbRnZDFeC6uWI8zfWU1gLM6yPoNklUaiar4TKxEyRHFibjIth3iahRNLcNvewjug/132","comment_is_top":false,"comment_ctime":1585406102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585406102","product_id":100039001,"comment_content":"看重两点：<br>1、告别只是实现可以的功能就好，写出高质量的代码，写出优美的代码<br>2、快速看懂高级的开源项目，学习老司机的实现、可以提出自己的共鸣或者意见<br><br>基于以上两点，设计模式就是干这个的，常用单例、观察者、工厂","like_count":0},{"had_liked":false,"id":197645,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585389504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585389504","product_id":100039001,"comment_content":"学过好几遍设计模式，我对思想这玩意是执着追求的，拓宽我的思维和角度","like_count":0},{"had_liked":false,"id":197472,"user_name":"这得从我捡到一个鼠标垫开始说起","can_delete":false,"product_type":"c1","uid":1272321,"ip_address":"","ucode":"2FF4347B4E7A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/01/d9cb531d.jpg","comment_is_top":false,"comment_ctime":1585380702,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585380702","product_id":100039001,"comment_content":"如果代码不是面向接口的，在修改的时候经常牵一发而动全身。<br>","like_count":0},{"had_liked":false,"id":196351,"user_name":"黄马","can_delete":false,"product_type":"c1","uid":1019506,"ip_address":"","ucode":"93E391B4678EC2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/72/63c94eee.jpg","comment_is_top":false,"comment_ctime":1585274839,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1585274839","product_id":100039001,"comment_content":"聊一聊你对设计模式相关知识的重要性的看法；<br><br>设计模式的定义<br>设计模式(英语 design pattern)是对面向对象设计中反复出现的问题的解决方案<br>设计模式通常描述了一组相互紧密作用的类与对象。<br>设计模式提供一种讨论软件设计的公共语言，使得熟练设计者的设计经验可以被初学者和其他设计者掌握。<br>设计模式还为软件重构提供了目标<br><br>前人总结的关于软件设计中问题解决的方案。相当于是解决问题的套路，而且已经将问题分类了。<br>是基本功，基本功就是入门的最基本要求，基本功最熬人，需要时间<br><br><br>在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br><br>平时很少用到设计模式<br><br>也就是在几番需求变化之后，可能能发现某些规律，对需求有一些判断，所以就可以使用一些设计模式，减少代码大面积的修改，也就是增加代码的扩展性。例如只需要增加一个接口的实现，例如策略模式等等","like_count":0},{"had_liked":false,"id":196023,"user_name":"凡","can_delete":false,"product_type":"c1","uid":1041878,"ip_address":"","ucode":"BCF83BE1D434D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/d6/37a1be71.jpg","comment_is_top":false,"comment_ctime":1585231197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585231197","product_id":100039001,"comment_content":"设计模式和算法一样！其实就是一种套路！对于某些特定问题的固有解决思路！不知道这么理解对不对","like_count":0},{"had_liked":false,"id":195678,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1585211427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585211427","product_id":100039001,"comment_content":"“投资要趁早，这样我们才能尽早享受复利。同样，有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读。这样在你后面的生活、工作、学习中，才能一直都发挥作用。不要等到好多年后，看到了，才恍然大悟，后悔没有早点去学、去看。” <br>后悔呀没有早点看到这段！！！！！！！！！","like_count":0},{"had_liked":false,"id":195468,"user_name":"余结","can_delete":false,"product_type":"c1","uid":1272016,"ip_address":"","ucode":"6F852213FC8E8A","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/d0/cc05745c.jpg","comment_is_top":false,"comment_ctime":1585189896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585189896","product_id":100039001,"comment_content":"设计模式只闻其名，并没有真正使用过，希望通过本次课堂能够学以致用。","like_count":0},{"had_liked":false,"id":195450,"user_name":"Six","can_delete":false,"product_type":"c1","uid":1220617,"ip_address":"","ucode":"E297BB638B2BD9","user_header":"https://static001.geekbang.org/account/avatar/00/12/a0/09/4af6ff52.jpg","comment_is_top":false,"comment_ctime":1585188918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585188918","product_id":100039001,"comment_content":"首先说明下我是做Android开发的<br>1.正如作者所说，设计模式是写出高质量代码的关键，当然重要了。<br>2.责任链设计模式<br>         应用场景:首页有各个业务，而各个业务区分不同类型，对于各个业务点击跳转需要根据类型跳转到不同的目标页面。（脑补支付宝，美团首页等等）。而这里不仅仅是单独的跳转，需要考虑目标页面是h5页面，跳转到目标页面的传值都不一样。而且点击业务时需要埋点和根据账号权限不同有所拦截。<br>         简单处理：当然这里最简单的是switch case。根据业务类型来写，但每个case一大堆处理。缺点是类臃肿,不清晰都在一个类中，而且没有分层的概念。不好维护。新增一个点击业务到跳转时的处理规则时改动太多。最坏是每个case下都处理(而我们有50+的case)<br>         优化：使用责任链设计模式对该情况进行分层，层与层之间通过一个中间集合关联(这个集合就是链(这里的链可以理解为层)的集合用于下发到下一条链的)。这样层与层之前很清晰，比如预处理层(拦截不符合要求的点击),打点层，处理默认参数层，跳转层。之后如果想要再加一个处理逻辑，可以扩展一个层。       ","like_count":0},{"had_liked":false,"id":195447,"user_name":"🐒🐱🐭🐮🐯🐰🐶","can_delete":false,"product_type":"c1","uid":1189080,"ip_address":"","ucode":"52426AE36A9A39","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d8/aa41d743.jpg","comment_is_top":false,"comment_ctime":1585188700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585188700","product_id":100039001,"comment_content":"1，对各整个架构架构，减少代码的重复率<br>2，面向对象，为了处理田地种菜，每个田地都是一个对象","like_count":0},{"had_liked":false,"id":192221,"user_name":"webs507wh","can_delete":false,"product_type":"c1","uid":1625555,"ip_address":"","ucode":"F93B8906D164F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/JF5ZUbI5KMFsTASqrVTUhpxyrOqGtBR4iaobxaASEjyZ7rPic50kzqQvNhFOw04MkyzUN0sc3pu7QsJwD57moibtw/132","comment_is_top":false,"comment_ctime":1584843537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584843537","product_id":100039001,"comment_content":"不错，学习中","like_count":0},{"had_liked":false,"id":191762,"user_name":"快乐一家","can_delete":false,"product_type":"c1","uid":1608101,"ip_address":"","ucode":"37156DF2DC27E3","user_header":"https://static001.geekbang.org/account/avatar/00/18/89/a5/f89a1946.jpg","comment_is_top":false,"comment_ctime":1584794996,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584794996","product_id":100039001,"comment_content":"我是做Python的web开发的，所有工作都是自己独立完成，早点学设计模式，早点少给自己挖坑","like_count":0},{"had_liked":false,"id":191267,"user_name":"Amo,","can_delete":false,"product_type":"c1","uid":1675087,"ip_address":"","ucode":"B77CBE5C61CDEB","user_header":"https://static001.geekbang.org/account/avatar/00/19/8f/4f/d42fdb9c.jpg","comment_is_top":false,"comment_ctime":1584759939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584759939","product_id":100039001,"comment_content":"曾经出来面试也有被问到过设计模式，可是自身对设计模式了解太少了，希望下次回答能让人刮目相看","like_count":0},{"had_liked":false,"id":189682,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1584540428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584540428","product_id":100039001,"comment_content":"在读源码的时候，好多核心的代码，用的什么模式两眼一抹黑，只能百度找框架用了什么模式，打算从零开始认真学习，为了自己读源码的时候，能够读的更顺一点","like_count":0},{"had_liked":false,"id":189027,"user_name":"治慧","can_delete":false,"product_type":"c1","uid":1245904,"ip_address":"","ucode":"47C331EF63EDC6","user_header":"https://static001.geekbang.org/account/avatar/00/13/02/d0/8abab63f.jpg","comment_is_top":false,"comment_ctime":1584448284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584448284","product_id":100039001,"comment_content":"作业:工作中用到的最多的还是单例模式(比如spring中DefaultBeanNameGenerator在5.2版本后),策略模式(来解决if else过多的场景),工厂模式(比如spring中的FactoryBean)","like_count":0},{"had_liked":false,"id":188855,"user_name":"晓双","can_delete":false,"product_type":"c1","uid":1476696,"ip_address":"","ucode":"59CA9DB77697D5","user_header":"https://static001.geekbang.org/account/avatar/00/16/88/58/3e19586a.jpg","comment_is_top":false,"comment_ctime":1584426766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584426766","product_id":100039001,"comment_content":"设计模式确实重要，工作中亲身经历过设计不足的代码，迭代和扩展起来都特别费劲，所以来好好学习下设计模式","like_count":0},{"had_liked":false,"id":188357,"user_name":"言十年","can_delete":false,"product_type":"c1","uid":1110039,"ip_address":"","ucode":"67B8B49C3A3B17","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/17/796a3d20.jpg","comment_is_top":false,"comment_ctime":1584344236,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584344236","product_id":100039001,"comment_content":"写php ：用过 单例 ，工厂<br>写oc：观察者模式、代理模式","like_count":0},{"had_liked":false,"id":187925,"user_name":"wakaka","can_delete":false,"product_type":"c1","uid":1471508,"ip_address":"","ucode":"835A7341577D3B","user_header":"https://static001.geekbang.org/account/avatar/00/16/74/14/ea854bfc.jpg","comment_is_top":false,"comment_ctime":1584278859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584278859","product_id":100039001,"comment_content":"为了提高读源码的效率，先练好基本功。","like_count":0},{"had_liked":false,"id":187514,"user_name":"Geek_339bf3","can_delete":false,"product_type":"c1","uid":1901438,"ip_address":"","ucode":"6DD84D487A4BDB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrj3mbL4JWp4ssyiaUW5T5avPXI899ibF2icKhC74OoqDSusz0GUmwQJm1sUmiaGclBtFSpmJXiaztYBg/132","comment_is_top":false,"comment_ctime":1584150625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584150625","product_id":100039001,"comment_content":"设计模式重要性的理解：<br>好的设计事半功倍。设计出可扩展、可维护、易于理解的代码比只实现功能带来的维护成本低很多。代码的质量和维护效率的提升，一方面能够提升程序员的成就感，另一方面也能为团队带来好的收益。","like_count":0},{"had_liked":false,"id":185329,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1583562385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583562385","product_id":100039001,"comment_content":"专栏里面提到的学习设计模式的用处<br><br>1.现在很多公司尤其是大公司面试的时候都会有设计模式的面试题,如果不懂的话,基本上是没有戏.所以我们第一可以用在面试上,<br>2.懂得设计模式可以让我们在工作中写出扩展,可以维护的代码,而不是别人吐槽的烂代码<br>3.提高复杂代码的设计和开发能力.简单的代码其实大家写的都差不多,但是涉及到复杂代码,如果不懂设计模式,基本上无从下手.<br>4.更容易看懂源码.优秀的项目,框架等里面的结构都很复杂,用到了很多设计思想,如果不懂,硬要去读,只能是事倍功半<br>5.为以后发展做铺垫,如果只是懂得用框架,但是不懂如算法,设计模式等基本知识,那基本上不可能在技术上有很好的发展.<br><br>我个人比较看重的是第二和第四个好处<br>","like_count":0},{"had_liked":false,"id":184638,"user_name":"Presley","can_delete":false,"product_type":"c1","uid":1215219,"ip_address":"","ucode":"D8F125835F4903","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/f3/7c89d00e.jpg","comment_is_top":false,"comment_ctime":1583376001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583376001","product_id":100039001,"comment_content":"之前没有刻意学习过，有时候都不知道自己竟然用了设计模式","like_count":0},{"had_liked":false,"id":183403,"user_name":"新的起点，新的开始^_^","can_delete":false,"product_type":"c1","uid":1262068,"ip_address":"","ucode":"9C0810F472AC93","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/f4/5df17eff.jpg","comment_is_top":false,"comment_ctime":1583034112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583034112","product_id":100039001,"comment_content":"先谈下我对设计模式重要性的理解吧，由浅而深可以分为：<br>1.应对面试<br>2.提高阅读优秀代码的源码，我就有这方面的问题，在看某个框架或者中间件或者别人的代码的时候，就是看不懂，看不下去的问题<br>3.可以提高我们写的代码的质量，不是因为看完争哥的文章就能提高我们的代码质量，而是看完文章后，我们在以后再工作的时候，都会想到代码质量，业务相匹配的数据结构和设计模式这个思想，先有了这个思想之后，日积月累形成习惯，潜移默化的我们的代码质量一定会有所提高的。<br>至于我在工作中都用到哪些设计模式了，这个肯定是用到了，但是因为我的设计模式方面的基础实在是太浅薄了，说不上来，所以才要学习争哥的文章，都不好意思说本人已经工作四五年了，希望而立之年开始新的努力计划还不算太晚。<br>诸君，共同努力","like_count":0},{"had_liked":false,"id":181844,"user_name":"发飙的蜗牛","can_delete":false,"product_type":"c1","uid":1800868,"ip_address":"","ucode":"B2D96A2D0B6BA4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7a/a4/79ffe77c.jpg","comment_is_top":false,"comment_ctime":1582643148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582643148","product_id":100039001,"comment_content":"加油＾０＾","like_count":0},{"had_liked":false,"id":181244,"user_name":"Geek_4eeff6","can_delete":false,"product_type":"c1","uid":1681947,"ip_address":"","ucode":"C1B40B950F9D17","user_header":"https://static001.geekbang.org/account/avatar/00/19/aa/1b/9303452a.jpg","comment_is_top":false,"comment_ctime":1582526308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582526308","product_id":100039001,"comment_content":"1、对于设计模式，刚毕业那会没咋重视，现在越来越感觉到他的重要性，代码出了问题，排查的时候，进入源码里，都看不懂，还有碰到稍微复杂的业务，哎  就云里雾里了。设计模式真的很重要。<br>2、实际中用到过 单例模式，模板方法（项目中有好多的预警相关的业务，可以抽出一个模板，然后每个预警具体实现），还有工厂方法（碰到那种大段大段的if-else的时候，用工厂结合策略去解决）。","like_count":0},{"had_liked":false,"id":180864,"user_name":"空白昵称","can_delete":false,"product_type":"c1","uid":1433815,"ip_address":"","ucode":"91F50CA25102AB","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d7/744bd8c3.jpg","comment_is_top":false,"comment_ctime":1582431472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582431472","product_id":100039001,"comment_content":"自己写的代码被别人吐槽了无数次，可却依然不知为什么。可见学习设计模式是多么重要了。看了专栏罗列出那么多好处，恨不得关到小黑屋学了😂","like_count":0},{"had_liked":false,"id":180211,"user_name":"Vicent🍀","can_delete":false,"product_type":"c1","uid":1589894,"ip_address":"","ucode":"70AEA72A0B6F0E","user_header":"https://static001.geekbang.org/account/avatar/00/18/42/86/6b2e81ba.jpg","comment_is_top":false,"comment_ctime":1582209313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582209313","product_id":100039001,"comment_content":"1. 我觉得重要性也提现在对项目的驾驭能力上，如果涉及模式模式比较熟练，从整体到细节都可以采用统一的方法论来实现，我遇到过有时候看似“讨巧”的开发，会给后面维护带来不少麻烦，特别适用hard code编码。<br>2.最近重构代码多一些，策略模式会比较常使用，因为有些时候存在兜底方法，需要切回老的方法，设置策略模式，配合动态化配置，可以进行一些运行逻辑的切换。","like_count":0},{"had_liked":false,"id":179825,"user_name":"佐西玛","can_delete":false,"product_type":"c1","uid":1090743,"ip_address":"","ucode":"73AAED82340E2B","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/b7/e0d88365.jpg","comment_is_top":false,"comment_ctime":1582105374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582105374","product_id":100039001,"comment_content":"以下是我个人的看法：<br>1、如其回答设计模式的重要性，我更想先回答为什么要在工程实践中使用设计模式，因为我们写的代码基本都不是一次交付的，如果需求发生了变化，那么我们希望在实现新需求的基础上尽可能的少修改、添加代码，尽可能的不影响别的功能，因为这样才能简化开发、方便测试，提升产品迭代效率。所以代码的可维护性和可扩展性由此变得重要了，设计模式也因此变得那么有必要。设计模式是众多前辈在相当长时间的经验和错误中总结出来的最佳实践，站在巨人的肩膀上看世界，不好吗？<br>2、我的工作也是游戏开发，公司的项目中用享元模式存储媒体美术资源，用观察者模式记录玩家的金币使用，用策略模式控制不同商品的上架以及不同商店的刷新。","like_count":0},{"had_liked":false,"id":179169,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1581930686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581930686","product_id":100039001,"comment_content":"本章的课后问题:<br>1.设计模式的重要性<br>设计模式是很重要的,在我自学成为程序员之前,我就开始去学习算法相关的知识,在成为程序员之后,我愈发的明白,基础是一个程序员能够走多远的基石,有了良好的基础,才能越学越轻松,于是我开始走上了一条底层学习的不归路,也是开始接触了设计模式,通信协议这些开发中并不常见的知识<br><br>2.使用过什么设计模式<br>我曾经在做一个设备的在线状态的功能时候,对于设备的上报信息,使用无锁的设计模式,利用这个减少了和数据库的交互,做到了项目内部维护在线状态,并且利用了观察者设计模式,即时的推送数据到页面","like_count":0},{"had_liked":false,"id":178092,"user_name":"junmawang","can_delete":false,"product_type":"c1","uid":1763466,"ip_address":"","ucode":"977E9E25CE6C94","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/8a/803a42e0.jpg","comment_is_top":false,"comment_ctime":1581585527,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581585527","product_id":100039001,"comment_content":"将设计模式运用在项目中，告别写被人吐槽的烂代码；提高复杂代码的设计和开发能力<br>项目中设计模式比如附件上传，运用到了工厂设计模式，主要逻辑如下<br>1、抽出上传工厂类<br>2、附件上传时根据DB中的上传配置进行工厂选择<br>3、完成附件上传","like_count":0},{"had_liked":false,"id":177921,"user_name":"coco張","can_delete":false,"product_type":"c1","uid":1522583,"ip_address":"","ucode":"48712CAC9FE4EC","user_header":"https://static001.geekbang.org/account/avatar/00/17/3b/97/ce00cd8d.jpg","comment_is_top":false,"comment_ctime":1581531234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581531234","product_id":100039001,"comment_content":"拥有优秀的设计模式的代码总是让人欣喜，在工作中总是会去模仿。自己的基础不扎实，有的代码真的看不懂，思维定式的感觉。在某次coding dojo中，partner解题的第一步骤就是想想用什么设计模式，而不是堆砌代码实现功能，当时就被震撼到了。自己很少从头实现一个框架，总是在缝缝补补，对于基本功已经忘得差不多了，为了让自己更有效率地工作还是得从头再来打基础，刻意练习。<br>就像科比说的和做的一样，高手还是得继续打基础，别人证明可行的方式就去做，没必要造轮子","like_count":0},{"had_liked":false,"id":177854,"user_name":"秀丽","can_delete":false,"product_type":"c1","uid":1402332,"ip_address":"","ucode":"9872272B8056F5","user_header":"https://static001.geekbang.org/account/avatar/00/15/65/dc/0737102d.jpg","comment_is_top":false,"comment_ctime":1581515251,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581515251","product_id":100039001,"comment_content":"本篇专栏感想：<br>绝对是干货，里面的好多点，是自己亲身体会的。<br>一、本人已工作10年多，现在是一门架构师，因为项目紧急，需要写代码，发现自己好久没写的，写的很不顺手，好多东西写了，然后发现需要提取出来，作为公用的，一些变量的命名也是想之又想，团队的成员还安慰我，说架构师早就不用写代码了，但是我自己知道，自己不写代码，就脱离了一线，如何解决线上问题呢。<br>二、因为需要去了解很多的中间件和做调研，有时候发现文档不齐全，不细致，有些东西，只能去看代码了，但是发现平时用的不多的设计模式在这些中间件中，别用的，那叫一个淋漓尽致，这时候真的后悔，自己对设计模式的重视程度了。<br>三、无论到什么情况，设计模式都是面试被常常问到的，只是简单的回答有什么模式，一看就是用的不深入了，哈哈，那时候，心里只有一个囧字了。<br><br>总之希望能跟着作者，将设计模式系统的学习下去，坚持就是胜利。","like_count":0},{"had_liked":false,"id":177454,"user_name":"qpzm7903","can_delete":false,"product_type":"c1","uid":1138683,"ip_address":"","ucode":"C7C14962D34BE7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/fb/af061ca7.jpg","comment_is_top":false,"comment_ctime":1581395407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581395407","product_id":100039001,"comment_content":"从0开始！","like_count":0},{"had_liked":false,"id":176148,"user_name":"Geek_bb89c3","can_delete":false,"product_type":"c1","uid":1331828,"ip_address":"","ucode":"0F97B5B0F2DDD6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IZKGetBZDuMEa2VwwtesTELvLORIyV749ItgfAqNPv30n4zEv71wuGNr1aNVIVltG0icvH53DHDuqPuzNpiauWAg/132","comment_is_top":false,"comment_ctime":1580971878,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580971878","product_id":100039001,"comment_content":"学习设计模式对好的代码有更加深入的理解：<br>1.能够在面试过程中，通过理论化的方式向面试官展示自己的代码功力；<br>2.在打代码的时候，通过使用设计模式的各种理论，原则，模式来将需要的功能实现的非常的漂亮，让别人读了觉得有东西。<br>3.在codereview 和管理团伙的时候，这个时候可以对别人和团队的代码提出要求和规范，其中哦部分就来自于设计模式。<br>4.在招聘新的人员加入团队的时候，这个时候如何衡量候选人能够打出好代码，其中一部分判断标准就是对设计模式的理解。<br>","like_count":0},{"had_liked":false,"id":175836,"user_name":"Andy_Ron","can_delete":false,"product_type":"c1","uid":1147385,"ip_address":"","ucode":"A6963B60B326AA","user_header":"https://static001.geekbang.org/account/avatar/00/11/81/f9/3508b638.jpg","comment_is_top":false,"comment_ctime":1580867364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580867364","product_id":100039001,"comment_content":"来的有点晚了，要加点劲赶上专栏进度了！😀<br>前面留言的小伙伴，例子好精彩哦！","like_count":0},{"had_liked":false,"id":175686,"user_name":"张理查","can_delete":false,"product_type":"c1","uid":1003152,"ip_address":"","ucode":"1F93E631CD4B35","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/90/a8d19e7b.jpg","comment_is_top":false,"comment_ctime":1580799449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580799449","product_id":100039001,"comment_content":"01.这篇展开来说了到底为什么要学？首先是提升输出，代码就是你的名片，烂代码可不要成为你的标签；遇到写复杂代码的情况下不会手足无措，做到剑在心中。其次是提高输入效率，比如牛人的代码为啥读不懂，因为牛人的语言你不懂，牛人说话的方式你不掌握，自己读不懂，做了团队leader后你就是团队技术的天花板，那还做啥leader，能服众么？","like_count":0},{"had_liked":false,"id":173541,"user_name":"艾米","can_delete":false,"product_type":"c1","uid":1639425,"ip_address":"","ucode":"4295EBC4C86915","user_header":"https://static001.geekbang.org/account/avatar/00/19/04/01/37744410.jpg","comment_is_top":false,"comment_ctime":1579592080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579592080","product_id":100039001,"comment_content":"设计模式很重要，一直都知道，但对于设计模式，从没有系统的学习过，每次都是心血来潮看看，然后也没有应用。“普通的、低级别的开发工程师，只需要把框架、开发工具、编程语言用熟练，再做几个项目练练手，基本上就能应付平时的开发工作了。”说的太对了，这也是大部分人的现状。不破不立，希望这8个月的学习能把设计模式消化好。","like_count":0},{"had_liked":false,"id":173296,"user_name":"coderguai","can_delete":false,"product_type":"c1","uid":1266201,"ip_address":"","ucode":"1C99617F98EC12","user_header":"https://static001.geekbang.org/account/avatar/00/13/52/19/8b0d3854.jpg","comment_is_top":false,"comment_ctime":1579497966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579497966","product_id":100039001,"comment_content":"1.设计模式是程序员修炼的心法，是突破自己的秘籍；<br>","like_count":0},{"had_liked":false,"id":172906,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1579356042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579356042","product_id":100039001,"comment_content":"鄙人写代码不多，主要是针对开源代码进行问题定位和打补丁。<br>从我的经验来看设计模式和数据结构算法还是很重要的，多少次看了linux内核代码觉得看懂了，但是经高手一指点才发现已经懂得是皮毛。经过一段时间后发现开源代码里面就是有很多的模式跟数据结构看不懂啊！","like_count":0},{"had_liked":false,"id":172274,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1579143579,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579143579","product_id":100039001,"comment_content":"到目前为止，只用过单利","like_count":0},{"had_liked":false,"id":171734,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1579003587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579003587","product_id":100039001,"comment_content":"感觉我现在就处于一个瓶颈期，理论知识储备的足够充分，实际上手写的代码还是会被人吐槽，迫切想改变这种情况","like_count":0},{"had_liked":false,"id":171611,"user_name":"Deekuun","can_delete":false,"product_type":"c1","uid":1618872,"ip_address":"","ucode":"A65F9A28B6FD6C","user_header":"https://static001.geekbang.org/account/avatar/00/18/b3/b8/218b1217.jpg","comment_is_top":false,"comment_ctime":1578976292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578976292","product_id":100039001,"comment_content":"自己看了一些设计模式，看的时候都明白，但是实际开发中就忘记了，或者想用不晓得如何设计。","like_count":0},{"had_liked":false,"id":171348,"user_name":"好饿早知道送外卖了","can_delete":false,"product_type":"c1","uid":1132304,"ip_address":"","ucode":"AED22DB5BF8FC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","comment_is_top":false,"comment_ctime":1578906245,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1578906245","product_id":100039001,"comment_content":"设计模式这个东西，吸收了真的就是自己的。现在看到项目里有一大堆ifelse，都会浑身难受的想重构，比如面向协议编程。","like_count":0},{"had_liked":false,"id":170838,"user_name":"K.","can_delete":false,"product_type":"c1","uid":1128428,"ip_address":"","ucode":"EFA18DA76818A0","user_header":"https://static001.geekbang.org/account/avatar/00/11/37/ec/32f6c98e.jpg","comment_is_top":false,"comment_ctime":1578736846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578736846","product_id":100039001,"comment_content":"当你知道好的代码长什么样子时，当你自己也开始注重代码质量时，一看到烂代码你也会在心理暗暗骂一句辣鸡= =","like_count":0},{"had_liked":false,"id":170575,"user_name":"HoshinoKanade","can_delete":false,"product_type":"c1","uid":1770245,"ip_address":"","ucode":"AA8B4F90FB9E5F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/03/05/140068f9.jpg","comment_is_top":false,"comment_ctime":1578637346,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578637346","product_id":100039001,"comment_content":"雖然自以為已經到達了不用回答問題2的境界<br>設計模式從來不需要高調不需要華麗<br>更加不需要去冠名<br>不過誠然老師所說 需要在面試前刻意複習<br>加上思維遠不及老師廣 還是滾進來再學一遍<br><br>設計模式有關的書 我看了三四遍<br>每一次看的體會也不同 謝謝老師","like_count":0},{"had_liked":false,"id":170499,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1578622060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578622060","product_id":100039001,"comment_content":"尽早的掌握设计模式，能够在头脑中形成一套评价体系：不仅能够规范自己，还能评价别人。不仅能够工作中应用，还是面试中加分。","like_count":0},{"had_liked":false,"id":170491,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1578621182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578621182","product_id":100039001,"comment_content":"读不懂别人的代码，有两种情况：<br>1.代码真烂，这种情况希望该程序员学习提高<br>2.代码真高端，这种情况我们应该学习提高自己","like_count":0},{"had_liked":false,"id":169602,"user_name":"LF","can_delete":false,"product_type":"c1","uid":1434867,"ip_address":"","ucode":"ECED172D2273D3","user_header":"https://static001.geekbang.org/account/avatar/00/15/e4/f3/60a7b345.jpg","comment_is_top":false,"comment_ctime":1578386737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578386737","product_id":100039001,"comment_content":"单例模式：懒汉式（线程不安全）饿汉式（线程安全，耗内存）枚举式（线程安全）","like_count":0},{"had_liked":false,"id":169403,"user_name":"意","can_delete":false,"product_type":"c1","uid":1129311,"ip_address":"","ucode":"A4B0C03248EA77","user_header":"https://static001.geekbang.org/account/avatar/00/11/3b/5f/a2c78423.jpg","comment_is_top":false,"comment_ctime":1578327029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578327029","product_id":100039001,"comment_content":"依赖倒置","like_count":0},{"had_liked":false,"id":169283,"user_name":"pippin","can_delete":false,"product_type":"c1","uid":1784022,"ip_address":"","ucode":"F7619FCE24D481","user_header":"","comment_is_top":false,"comment_ctime":1578305355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578305355","product_id":100039001,"comment_content":"网上的视频和书籍都有说设计模式是什么，但怎么用、为什么要用，这样用有什么好处，又有什么不足，造成在面对代码的时候，想不到使用设计模式","like_count":0},{"had_liked":false,"id":169064,"user_name":"半橙汁","can_delete":false,"product_type":"c1","uid":1477902,"ip_address":"","ucode":"BB93BB9CCB7FA2","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/0e/5e97bbef.jpg","comment_is_top":false,"comment_ctime":1578270216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578270216","product_id":100039001,"comment_content":"听过的不少，估计用的也不少，不过，可气的是居然没办法对关联关系说出个12345","like_count":0},{"had_liked":false,"id":168958,"user_name":"wx","can_delete":false,"product_type":"c1","uid":1254784,"ip_address":"","ucode":"DD0B86A2059150","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/80/26b85375.jpg","comment_is_top":false,"comment_ctime":1578225671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578225671","product_id":100039001,"comment_content":"重要性：面试顺利通过；可以提高设计开发能力，使代码易于扩张；对读源码、学框架可以事半功倍。指导同事。<br><br>之前使用过两种设计模式。<br>单例模式，场景：和当时把zookeeper当作动态配置源来使用，每个服务实例只需要和zk建立一个连接即可。避免和zk建立多个连接的情况。<br><br>模板模式，场景：消息队列的消费端和生产端，将初始化生产消费端代码封装在模板中，业务只需关心消费到的数据即可，不用关心怎么消费的。","like_count":0},{"had_liked":false,"id":168568,"user_name":"信天游","can_delete":false,"product_type":"c1","uid":1046101,"ip_address":"","ucode":"4B46403E169499","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f6/55/1065fce8.jpg","comment_is_top":false,"comment_ctime":1578111990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578111990","product_id":100039001,"comment_content":"参加工作的第二年，刚开始的工作就如同老师所说的在框架里根据业务需求填充代码，都是维护类的项目，逻辑功能简单，这期间也并没有用到设计模式。直到最近的一个季度，接到了新的需求新的功能，里面的业务逻辑稍复杂，一开始写的代码没有用设计模式，被leader吐槽为堆砌的烂代码，首先是自己没有意识，其次是自己对设计模式的掌握并不完全，直到后来leader review了代码，提出了优化意见后，自己去研究了责任链，并尝试写了一个demo后再应用到项目上。在优化代码的时候自己也在思考，使用了设计模式的好处。的确，模块的划分更加清晰，功能的扩展也更加方便了。","like_count":0},{"had_liked":false,"id":167772,"user_name":"闲庭花落","can_delete":false,"product_type":"c1","uid":1193289,"ip_address":"","ucode":"CE69DB92D5F424","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/49/484c0eba.jpg","comment_is_top":false,"comment_ctime":1577932052,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577932052","product_id":100039001,"comment_content":"老师的第一篇下来，真的是直击内心，引起共鸣啊","like_count":0},{"had_liked":false,"id":167430,"user_name":"吴小浅","can_delete":false,"product_type":"c1","uid":1186819,"ip_address":"","ucode":"36D1743C0A9C40","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/03/9178abe4.jpg","comment_is_top":false,"comment_ctime":1577792795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577792795","product_id":100039001,"comment_content":"1、开发出低耦合、高内聚的模块，能够更好的应对日后的需求扩展和开发工作，简单说就是一次编码，以后的工作变轻松；<br>2、根据策略模式实现支付的动态扩展；","like_count":0},{"had_liked":false,"id":166935,"user_name":"追逐繁星的孩纸~","can_delete":false,"product_type":"c1","uid":1593884,"ip_address":"","ucode":"69DC37A9E39C7E","user_header":"https://static001.geekbang.org/account/avatar/00/18/52/1c/e902de0f.jpg","comment_is_top":false,"comment_ctime":1577633567,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1577633567","product_id":100039001,"comment_content":"1.聊一聊你对设计模式相关知识的重要性的看法；<br>特别重要，可以让编码思路更清晰。<br>2.在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>用过建造者模式，是在构建搜索请求条件的场景下应用的，因为构建搜索请求有些搜索条件，过滤条件，高亮配置等，使用建造者模式根据不同人的请求进行构造","like_count":0},{"had_liked":false,"id":166392,"user_name":"此鱼不得水","can_delete":false,"product_type":"c1","uid":1257453,"ip_address":"","ucode":"95268E823FB4D2","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ed/a87bb8fa.jpg","comment_is_top":false,"comment_ctime":1577440799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577440799","product_id":100039001,"comment_content":"句句扎心!","like_count":0},{"had_liked":false,"id":165849,"user_name":"原点","can_delete":false,"product_type":"c1","uid":1204499,"ip_address":"","ucode":"E662FD2B62B8A9","user_header":"https://static001.geekbang.org/account/avatar/00/12/61/13/dd987817.jpg","comment_is_top":false,"comment_ctime":1577332077,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577332077","product_id":100039001,"comment_content":"极客出品，必为精品。之前看了几篇老师的算法专栏的文章，竟然每篇的知识点都懂了，问啥自己看书没有这种效果呢？<br>前两天优惠力度大，看到老师的设计模式的课，果断买了。刚结束上一个专栏的学习，就进来了。两篇文章读下来，就决定把老师的两个专栏先学完再学别的😃","like_count":0},{"had_liked":false,"id":165760,"user_name":"HuDP","can_delete":false,"product_type":"c1","uid":1183184,"ip_address":"","ucode":"65E70A9B7CAB54","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/d0/b48302e9.jpg","comment_is_top":false,"comment_ctime":1577319375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577319375","product_id":100039001,"comment_content":"项目复杂后，设计模式的重要性就越来越凸显出来","like_count":0},{"had_liked":false,"id":165220,"user_name":"💪🏻💪🏻💪🏻","can_delete":false,"product_type":"c1","uid":1255450,"ip_address":"","ucode":"C517792745ABD5","user_header":"https://static001.geekbang.org/account/avatar/00/13/28/1a/259c7603.jpg","comment_is_top":false,"comment_ctime":1577182288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577182288","product_id":100039001,"comment_content":"还是入门阶段，希望能跟着大佬学习","like_count":0},{"had_liked":false,"id":165036,"user_name":"bin.chen","can_delete":false,"product_type":"c1","uid":1135604,"ip_address":"","ucode":"5BA49358AB8A1A","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/f4/e277325d.jpg","comment_is_top":false,"comment_ctime":1577150709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577150709","product_id":100039001,"comment_content":"1.设计模式在工作中是非常的重要 目前所在公司就看到很多的烂代码，而且每次维护起来都特别费劲，适当的根据需求应用设计模式改观代码质量是非常有必要的<br>2.工作中用的多的就是工厂 装饰 单列 ","like_count":0},{"had_liked":false,"id":164951,"user_name":"桂城老托尼","can_delete":false,"product_type":"c1","uid":1306032,"ip_address":"","ucode":"139E4B8EE88B79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","comment_is_top":false,"comment_ctime":1577115708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577115708","product_id":100039001,"comment_content":"设计模式重要性不言而喻，除了作者提到的几点外，设计模式是技术同学之间沟通的抽象高效的语言，方便我们精炼表达。 <br>工作中也要避免过度设计，为了模式而模式(前期练手可能是好的)，低耦合，高内聚，易扩展是目的，模式是手段。<br>工作中用的较多的有观察者，工厂，策略，模板，适配器等","like_count":0},{"had_liked":false,"id":164636,"user_name":"铁血柔情","can_delete":false,"product_type":"c1","uid":1124220,"ip_address":"","ucode":"F09CACF06B8D05","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/7c/463d4342.jpg","comment_is_top":false,"comment_ctime":1577063612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577063612","product_id":100039001,"comment_content":"Spring中的单例模式和工厂模式，以及自己练习写的一个观察者模式，打卡第二次","like_count":0},{"had_liked":false,"id":164411,"user_name":"黑色空间","can_delete":false,"product_type":"c1","uid":1793130,"ip_address":"","ucode":"D1C70DC7BFCB05","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5c/6a/33b0c829.jpg","comment_is_top":false,"comment_ctime":1576980903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576980903","product_id":100039001,"comment_content":"用的比较多的 策略，代理和单例","like_count":0},{"had_liked":false,"id":164233,"user_name":"Seeker","can_delete":false,"product_type":"c1","uid":1180644,"ip_address":"","ucode":"C5F22962B8CE0D","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/e4/0cb8dcaf.jpg","comment_is_top":false,"comment_ctime":1576911913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576911913","product_id":100039001,"comment_content":"项目中使用过单例模式，工厂模式，代理模式，门面模式，命令行模式，模版模式，但都不是我开发的，努力学习中","like_count":0},{"had_liked":false,"id":163819,"user_name":"黄政","can_delete":false,"product_type":"c1","uid":1345630,"ip_address":"","ucode":"9076A1BF7BB051","user_header":"https://static001.geekbang.org/account/avatar/00/14/88/5e/cc916a2b.jpg","comment_is_top":false,"comment_ctime":1576807532,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1576807532","product_id":100039001,"comment_content":"1.设计模式的好坏决定了一个模块的基础框架的优异，好的设计模式，代码优雅，维护简单。<br>2.今年的项目开发中，实现了一个代理模式，针对json文件进行读写，免去了客户端对文件加锁，读写互斥等问题的处理。","like_count":0},{"had_liked":false,"id":163706,"user_name":"Yangjing","can_delete":false,"product_type":"c1","uid":1018061,"ip_address":"","ucode":"D88DFD4958D07C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/cd/2c3808ce.jpg","comment_is_top":false,"comment_ctime":1576770227,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576770227","product_id":100039001,"comment_content":"打卡，烂代码不仅看着累，改着累，改了还会又一堆bug。","like_count":0},{"had_liked":false,"id":163586,"user_name":"Geek_323c91","can_delete":false,"product_type":"c1","uid":1732683,"ip_address":"","ucode":"AE946A94605456","user_header":"","comment_is_top":false,"comment_ctime":1576749525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576749525","product_id":100039001,"comment_content":"工厂 模板  代理  装饰","like_count":0},{"had_liked":false,"id":163464,"user_name":"包籽:-)","can_delete":false,"product_type":"c1","uid":1330598,"ip_address":"","ucode":"84CAD48B0832FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/4d/a6/e56e4bcd.jpg","comment_is_top":false,"comment_ctime":1576726529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576726529","product_id":100039001,"comment_content":"Android 源码还有非常出名的Glide,Okhttp,Eventbus,Rxjava等中有很多设计模式，没有深厚的功力还是难以吃透。","like_count":0},{"had_liked":false,"id":163133,"user_name":"程序员大天地","can_delete":false,"product_type":"c1","uid":1249001,"ip_address":"","ucode":"7A21F15FEE2D5B","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/e9/98b6ea61.jpg","comment_is_top":false,"comment_ctime":1576661399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576661399","product_id":100039001,"comment_content":"设计模式以前一直没有研究过，只知道一个单例模式，从0开始（晕）","like_count":0},{"had_liked":false,"id":162574,"user_name":"思绪走了灬光✨","can_delete":false,"product_type":"c1","uid":1101661,"ip_address":"","ucode":"512DD0FA5C024C","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/5d/99756164.jpg","comment_is_top":false,"comment_ctime":1576558825,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576558825","product_id":100039001,"comment_content":"看不懂spring security","like_count":0},{"had_liked":false,"id":162504,"user_name":"wai","can_delete":false,"product_type":"c1","uid":1439529,"ip_address":"","ucode":"29CE3BE148FB79","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/29/60e01017.jpg","comment_is_top":false,"comment_ctime":1576546306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576546306","product_id":100039001,"comment_content":"个人认为好的架构设计尤为重要，我现在日常的工作中深有体会，我们现在的项目历史的负债过于严重，项目很大，基本没什么设计，导致排查一个生产环境的问题需要半天甚至一天的时间，处理问题，不调试基本看不出来问题在哪，改一块地方，涉及到的影响点很多，牵一发动全身。设计模式是实现良好架构设计的基石，它能够很好的解决项目扩展，解藕等问题；好好学习，提高代码质量，提升架构设计能力","like_count":0},{"had_liked":false,"id":162404,"user_name":"告别流浪的喵","can_delete":false,"product_type":"c1","uid":1352487,"ip_address":"","ucode":"3748144E1899E4","user_header":"https://static001.geekbang.org/account/avatar/00/14/a3/27/91472366.jpg","comment_is_top":false,"comment_ctime":1576509893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576509893","product_id":100039001,"comment_content":"上学的时候，接触过设计模式。只是那时候业务逻辑很简单，课堂上的例子也简单，没有体会到设计模式真正的精髓。但是工作中发现，在项目重构以及设计过程中，设计思想转化成设计模式，可保证代码逻辑的清晰，为后期维护提供了诸多便利。","like_count":0},{"had_liked":false,"id":162201,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1576476338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576476338","product_id":100039001,"comment_content":"作者讲了学习设计模式的五个好处，我最看重的是第3点“提高复杂代码的设计和开发能力”。因为这就是你的硬实力，如果你没有复杂代码的设计和开发能力，你能做的就永远是CRUD这类简单的开发。天天在做这些基础的开发，不提高对自己的要求，那在职场上就永远不会进步，就只能看着别人升职加薪，自己年纪大了等着被淘汰。","like_count":0},{"had_liked":false,"id":162037,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1576454286,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576454286","product_id":100039001,"comment_content":"单例 责任链","like_count":0},{"had_liked":false,"id":161011,"user_name":"rammelzzz","can_delete":false,"product_type":"c1","uid":1606275,"ip_address":"","ucode":"3BA634B5F6F74B","user_header":"https://static001.geekbang.org/account/avatar/00/18/82/83/8f168e4e.jpg","comment_is_top":false,"comment_ctime":1576078540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576078540","product_id":100039001,"comment_content":"设计模式是面向对象开发的精髓。复杂场景下使用设计模式往往能化繁为简，保持代码可读、可维护与可扩展。很多时候可能并不了解某种设计模式，但是却在使用DP带来的便利。比如代理模式，AOP事务控制；单例模式，ThreadLocal全局用户；发布订阅模式，配置中心。。等等。离开设计模式，很多流程难以或者无法实现<br>","like_count":0},{"had_liked":false,"id":160891,"user_name":"胖子","can_delete":false,"product_type":"c1","uid":1037760,"ip_address":"","ucode":"E6371346288A87","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIuRQaZX70dsBg6khub2VPM1eQAP9IWRWxgOFed3ia4kXyNJInFRicWJ0ibf2YmLsOvJa1sGygGpmJg/132","comment_is_top":false,"comment_ctime":1576055076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576055076","product_id":100039001,"comment_content":"1、用过适配器模式、模板模式。<br>2、不知设计模式难以区分代码和人的高与低，架构设计讨论插不上话。<br>","like_count":0},{"had_liked":false,"id":160606,"user_name":"盈盈一水间","can_delete":false,"product_type":"c1","uid":1526680,"ip_address":"","ucode":"C2593188215854","user_header":"https://static001.geekbang.org/account/avatar/00/17/4b/98/7fd79cca.jpg","comment_is_top":false,"comment_ctime":1575985118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575985118","product_id":100039001,"comment_content":"面试被问到一个问题印象深刻，观察者模式 观察者指什么 跟事件订阅模式有什么区别","like_count":0},{"had_liked":false,"id":160220,"user_name":"看，世界倒着","can_delete":false,"product_type":"c1","uid":1021951,"ip_address":"","ucode":"FFBFF8E4B63ED6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/ff/df9cb5b9.jpg","comment_is_top":false,"comment_ctime":1575893509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575893509","product_id":100039001,"comment_content":"1、重要性：熟悉设计模式，可以快速达成某种共识，初始设计原理，例如一看某个命名，就知道作者用了什么模式，看代码的人也能知道怎么去使用。<br>2、项目中: 之前在做消息处理的时候，采用了命令模式和订阅发布模式。","like_count":0},{"had_liked":false,"id":158708,"user_name":"落曦","can_delete":false,"product_type":"c1","uid":1475039,"ip_address":"","ucode":"C70F7E2EDC3FD7","user_header":"https://static001.geekbang.org/account/avatar/00/16/81/df/066ffab3.jpg","comment_is_top":false,"comment_ctime":1575438508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575438508","product_id":100039001,"comment_content":"先来聊一聊我对设计模式相关知识的看法 我是一名大三的学生在一个公司实习 最近在学flutter 带我的经理和我聊了很多 算法说重要也重要 但是正常的开发用不到 我们所有用到开发的地方 不管是任何语言 需要的都是设计模式 因此我对设计模式产生了很大的兴趣 在开发的很多地方也都是要用到这个设计模式的<br>问题二 本人学生 还在学校中学习 但在几次的课程设计中或多或少的可能用到过设计模式了 只是自己没什么印象 所以我想深入学习以及了解设计模式 感受设计模式之美","like_count":0},{"had_liked":false,"id":158566,"user_name":"用0和1改变自己","can_delete":false,"product_type":"c1","uid":1527530,"ip_address":"","ucode":"42B8F6ECF6BDD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/lfMbV8RibrhFxjILg4550cZiaay64mTh5Zibon64TiaicC8jDMEK7VaXOkllHSpS582Jl1SUHm6Jib2AticVlHibiaBvUOA/132","comment_is_top":false,"comment_ctime":1575419461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575419461","product_id":100039001,"comment_content":"当初刚面试时第一次问到设计模式时，懵的，根本没听过，后面又被问了几次，去补了一下类型和概念，没用，这次要好好学。","like_count":0},{"had_liked":false,"id":158425,"user_name":"Coding小先","can_delete":false,"product_type":"c1","uid":1051563,"ip_address":"","ucode":"965B1CC757E026","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/ab/0e2857e5.jpg","comment_is_top":false,"comment_ctime":1575368385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575368385","product_id":100039001,"comment_content":"设计模式，没有接触过。","like_count":0},{"had_liked":false,"id":157866,"user_name":"爱水人家","can_delete":false,"product_type":"c1","uid":1730305,"ip_address":"","ucode":"0C94C6ACBC9CEB","user_header":"https://static001.geekbang.org/account/avatar/00/1a/67/01/44626cb9.jpg","comment_is_top":false,"comment_ctime":1575273233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575273233","product_id":100039001,"comment_content":"我是一个C++算法工程师，对工程项目来说，如果你不同设计模式，那么即使你的代码能跑通，但是如果你分享代码或者对自己代码增删查改功能时，往往会显得问题百出。你会发现自己的代码总是有一些问题，但是你却不知道如何去改。这其中就是设计模式的问题了。这也是我学习设计模式的初衷！","like_count":0},{"had_liked":false,"id":157404,"user_name":"Triple Z 💤","can_delete":false,"product_type":"c1","uid":1233998,"ip_address":"","ucode":"A6DB7C91B903CE","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/4e/5813df2f.jpg","comment_is_top":false,"comment_ctime":1575133261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575133261","product_id":100039001,"comment_content":"What is good code taste?","like_count":0},{"had_liked":false,"id":157286,"user_name":"马哲","can_delete":false,"product_type":"c1","uid":1692122,"ip_address":"","ucode":"45FC76B2CE0E53","user_header":"https://static001.geekbang.org/account/avatar/00/19/d1/da/1249fc90.jpg","comment_is_top":false,"comment_ctime":1575103022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575103022","product_id":100039001,"comment_content":"设计模式的重要性：在工作中看到与自己合作的同事写的代码，他们能用非常短的时间写出很高质量的代码，模块之间耦合度低，类设计合理，繁杂的业务处理逻辑与主流程剥离开来，就像是一幅美丽的画。<br>设计模式的应用，不能够说出用了哪些，只能觉得别人的代码写得好","like_count":0},{"had_liked":false,"id":156827,"user_name":"乾坤瞬间","can_delete":false,"product_type":"c1","uid":1683130,"ip_address":"","ucode":"15BDCF29CBF8EB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWIUF31dicT1YBTxWNX0uvbMxl15UwdlwFicGhNo0DsQ7CbM6k16EQxK7bwSMcicLGMdYto4jGPTvrg/132","comment_is_top":false,"comment_ctime":1574986188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574986188","product_id":100039001,"comment_content":"设计模式真的很重要，也像争哥说的那样，在读源码的过程中，很多代码与代码之间的调用其实都蕴含着设计思想，由于在工作中遇到一些问题需要读sparkstreaming源码才能解决的时候，如果没有观察者与监听者思维的指导很容易陷入细节误区，抓不到重点，也就无法在短时间内看懂，并解决开发问题了","like_count":0},{"had_liked":false,"id":156753,"user_name":"Kevan","can_delete":false,"product_type":"c1","uid":1755742,"ip_address":"","ucode":"DA9165D459C9DD","user_header":"","comment_is_top":false,"comment_ctime":1574947935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574947935","product_id":100039001,"comment_content":"设计模式如果在项目初期可能不太彰显，可以随意写！但是真正到项目运维了几年后，你就会发现一个类，没有设计，拆封过，3-4000行代码，改一个报数都需要查看多少引用，多少子类时，就发现，一个好的代码设计是多重要了！不要问我咋知道的…","like_count":0},{"had_liked":false,"id":156738,"user_name":"蓝思绪","can_delete":false,"product_type":"c1","uid":1361693,"ip_address":"","ucode":"2D8CE718DEAD96","user_header":"https://static001.geekbang.org/account/avatar/00/14/c7/1d/048dc01a.jpg","comment_is_top":false,"comment_ctime":1574944806,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574944806","product_id":100039001,"comment_content":"前端工程师，封装的UI组件复用性差，来学学设计模式看看","like_count":0},{"had_liked":false,"id":156726,"user_name":"萍水相逢","can_delete":false,"product_type":"c1","uid":1755772,"ip_address":"","ucode":"60A2B46838BF62","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ca/7c/e93ed948.jpg","comment_is_top":false,"comment_ctime":1574942797,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574942797","product_id":100039001,"comment_content":"设计模式对于我们开发者来说就是大国利器，人之底蕴，平时写业务一般用不到，但影响力无处不在。以前没学过设计模式式时，在独立设计模块或者中间价的时候，很是头痛，优化了很久才出结果，后来了解了设计模式，才知道自己在那时就用到了，只是野路子，就像修行小说中的散修，接触到之后，有种夕闻道，朝可死的感觉，现在每次有学习的机会，倍感珍惜!希望学习完课程，有新的感受!","like_count":0},{"had_liked":false,"id":156424,"user_name":"死海之汪","can_delete":false,"product_type":"c1","uid":1056128,"ip_address":"","ucode":"95AEE7008341E7","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/80/7f25b1ae.jpg","comment_is_top":false,"comment_ctime":1574869575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574869575","product_id":100039001,"comment_content":"学习设计模式的目的：<br>1. 读懂好代码<br>2. 写出好代码<br>3. 指导别人写出好代码","like_count":0},{"had_liked":false,"id":155762,"user_name":"🐾mc🐾","can_delete":false,"product_type":"c1","uid":1030759,"ip_address":"","ucode":"CE47F9316D6E14","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/67/c764be06.jpg","comment_is_top":false,"comment_ctime":1574750853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574750853","product_id":100039001,"comment_content":"从今起，我要对老师的文章进行Review，^ _ ^<br><br>投资要趁早，这样我们才能尽早享受复利  --&gt;  投资要趁早，这样我们才能尽早享受福利","like_count":0},{"had_liked":false,"id":155749,"user_name":"奇小易","can_delete":false,"product_type":"c1","uid":1171151,"ip_address":"","ucode":"E06B4DFB5352BB","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/cf/ef2e0501.jpg","comment_is_top":false,"comment_ctime":1574747719,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574747719","product_id":100039001,"comment_content":"本人设计模式相关知识零基础，但也想聊一下自己对设计模式相关知识重要性的看法。<br><br>个人看法：<br>这些知识能直接提升代码质量，也就是直接提升写代码的成就感，也就直接增加爱上编程的可能性。(非常直接）<br><br>例子：<br>曾经玩一款网游，刚开始仅仅是为了休闲娱乐，后来在很多外部因素的影响下，不断的想要玩好它，随着技术的增长，对这款游戏的热爱也是只增不减，更让我觉得有趣的是那个时候再练习一些枯燥的技巧时，也非常乐意。（也可能是游戏反馈机制做的比较好，但是也有一些人会放弃一些基本功练习，会觉得那个东西好无聊没必要练习）<br>基于此经历，所以我认为先把事情做好了，后面就会更主动的深入学习，而设计模式相关知识就是最直接影响着写好代码的关键。","like_count":0},{"had_liked":false,"id":155332,"user_name":"我叫郭小黑","can_delete":false,"product_type":"c1","uid":1463441,"ip_address":"","ucode":"C238592EB5EDBC","user_header":"https://static001.geekbang.org/account/avatar/00/16/54/91/0d4647d9.jpg","comment_is_top":false,"comment_ctime":1574679369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574679369","product_id":100039001,"comment_content":"用过单例模式和观察者模式，单例模式的作用在于不需要频繁的创建对象，spring的single就是这种方式，还用过一次观察者模式(jdk自带的)，场景为我需要定时监控一个接口是否ping通，当可以通的时候，通知需要这个信息的模块。观察者模式很方便的可以做到这个事情。","like_count":0},{"had_liked":false,"id":154649,"user_name":"ZengTudou","can_delete":false,"product_type":"c1","uid":1370064,"ip_address":"","ucode":"6F76C977C4E093","user_header":"https://static001.geekbang.org/account/avatar/00/14/e7/d0/2a9b3208.jpg","comment_is_top":false,"comment_ctime":1574499573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574499573","product_id":100039001,"comment_content":"1，设计模式，说实话，我是在看准备秋招的时候开始接触的，当时不是很在意，不过在后来看Glide的源码的时候，我第一次深刻意识到，设计模式真的很重要很重要，这些大牛写的框架，使用的时候非常简单，但实际上内部做了非常非常多的工作，耦合解耦都做的非常好。刚开始看的时候，很多东西都看不明白，回头又去补了设计模式的知识，虽然最后能够基本拉通源码，但是说实话，我觉得并没有吸收到精华，为什么这么设计，我自己以后在设计这个东西的时候或者类似功能的时候，对我的帮助是什么，我觉得这才是最有用的。可能像作者说的一样，高度和基本功还不够，希望能够跟着作者的脚步慢慢前进吧。<br>2，我自己的话，用的还比较少，目前还是学习的阶段，不过也将设计模式的东西慢慢用到自己的代码之中。","like_count":0},{"had_liked":false,"id":153842,"user_name":"胡小旭","can_delete":false,"product_type":"c1","uid":1747537,"ip_address":"","ucode":"B346CE73545BA6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/aa/51/f0f16517.jpg","comment_is_top":false,"comment_ctime":1574316064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574316064","product_id":100039001,"comment_content":"1. 聊一聊你对设计模式相关知识的重要性的看法<br>设计模式对于写出高质量代码起着至关重要的作用。由于项目地慢慢迭代，代码量会变得越来越多，功能会变得越来越复杂，这时如果能够通过设计模式来重新设计类与类之间的关系，项目代码的层次结构，那么可以降低代码的复杂度，提升代码的扩展性和易用性。这真的非常重要。如果不这样，当代码迭代到瓶颈的时候，会遇到无法向前的瓶颈，往往会由于修改一处的bug，进而引起来好几个bug。以至于，未来定位bug花了无数的时间。这就是不使用设计模式的后果和代价。<br>","like_count":0},{"had_liked":false,"id":153573,"user_name":"被讨厌的勇气","can_delete":false,"product_type":"c1","uid":1547913,"ip_address":"","ucode":"AE3B3CA27D91A2","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/89/6e9c05d6.jpg","comment_is_top":false,"comment_ctime":1574261284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574261284","product_id":100039001,"comment_content":"##坚持打卡##<br><br>程序员的主要工作就是写代码。代码一上规模，代码的组织就显得异常重要。代码组织包括可读性、可维护性、可扩展性、复用性等。设计模式是组织代码、解决编程问题的一柄利器。","like_count":0},{"had_liked":false,"id":153425,"user_name":"霸波儿奔","can_delete":false,"product_type":"c1","uid":1035314,"ip_address":"","ucode":"4AB75DB06CB254","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/32/d9dbf4e7.jpg","comment_is_top":false,"comment_ctime":1574234303,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574234303","product_id":100039001,"comment_content":"有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读<br>投资要趁早","like_count":0},{"had_liked":false,"id":153416,"user_name":"月月鸟","can_delete":false,"product_type":"c1","uid":1689424,"ip_address":"","ucode":"1C5F30680E8B89","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/50/7de695b8.jpg","comment_is_top":false,"comment_ctime":1574232731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574232731","product_id":100039001,"comment_content":"一：<br>2020届毕业生，现在已入职一家待遇还不错的小公司<br>我这个方向只有两名开发人员，前两周我一直在熟悉代码，距今已经有一个月了 已基本接收所有模块<br>这个月线上也出现了一些bug、也遇到重大的重写  <br>深刻的发现维护低质量的代码是一件非常糟心的事 其实我也没资格吐槽前辈的代码 毕竟他写的已经稳定运行这么久了 而我才刚刚入职 但是我想以后的日子里 不能让未来的同事吐槽我的代码 一定要合理的设计<br>二：<br>其实大学期间也学习过相关课程，但是因为纯理论基本不会实现所以并没有认真听，顶多会设计接口 封装方法 即便是这样都感觉比其他同学的烂代码好很多了 直到出来工作 才发现自己的拙见","like_count":0},{"had_liked":false,"id":153371,"user_name":"呆猫","can_delete":false,"product_type":"c1","uid":1228759,"ip_address":"","ucode":"69E256E6A19225","user_header":"https://static001.geekbang.org/account/avatar/00/12/bf/d7/9e2c8648.jpg","comment_is_top":false,"comment_ctime":1574225721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574225721","product_id":100039001,"comment_content":"最近在读设计模式的书，顺便优化了一下项目的代码，但是还有很多地方明知不合理，确无从下手改，希望跟着专栏边学习边实践","like_count":0},{"had_liked":false,"id":153216,"user_name":"蟹肥","can_delete":false,"product_type":"c1","uid":1737493,"ip_address":"","ucode":"382B86651ED909","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rNMTN9E43LZ0dpb4s3ElcRnBYpic5zzrCXGvKdib7rDwSEEWto83gXgFFQWMWXQmUxodcKyNnhDK1yIjeiaR7Mz3A/132","comment_is_top":false,"comment_ctime":1574192254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574192254","product_id":100039001,"comment_content":"1.设计模式是由GoF将前人的经验与智慧收集起来让我们加以复用,站在巨人的肩膀上,并在实际开发中,当团队具有相似的设计模式观念,可以使用设计模式沟通进而降低浪费.<br>2.组合模式用来描述树状清单结构","like_count":0},{"had_liked":false,"id":153016,"user_name":"捕风捉影","can_delete":false,"product_type":"c1","uid":1713935,"ip_address":"","ucode":"E7F75B2521C8CF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/27/0f/4af4daff.jpg","comment_is_top":false,"comment_ctime":1574141278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574141278","product_id":100039001,"comment_content":"目前为止比较浅显<br>1.举例一个普通的需要不断迭代的机器学习模型，对拿到数据进行的工作模块化，数据清洗，特征工程。<br>2.但是单单模块化还不够，需要对模块进行细分<br>数据清洗：筛选各种需要剔除的字段，接下来应该是对各个字段进行清洗，但为了以后查找问题方便，而且集中处理，将其放在特征工程的模块中。<br>特征工程：根据字段特性筛选不同类型的字段，将各个字段划分为不同类型的特征，另将需要额外remapping的字段划分为一个特征类型，便于区分处理，然后对不同类型的特征分块处理。<br><br>3.目前只是简单将整套工作流程，进行模块化，<br>3.1 可以在后续的迭代模型过程中，添加功能，添加特征非常方便，很大程度上避免了漏掉哪个处理流程造成的bug。<br>3.2 而且可读性比较好。分层明显。<br>3.3 对比之前的完全一套函数罗列起来，更加清晰。<br><br>希望我可以在本课程能够熟悉设计模式，并知道在工作中那些地方该用到什么设计模式。<br>在此立个flag，每一节课，必须留下自己的总结，学到了什么，疑惑点是什么，并且必须将自己所有的疑惑点解决掉。<br>","like_count":0},{"had_liked":false,"id":152940,"user_name":"千年孤独","can_delete":false,"product_type":"c1","uid":1037215,"ip_address":"","ucode":"282CA1A68E8774","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d3/9f/36ea3be4.jpg","comment_is_top":false,"comment_ctime":1574127594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574127594","product_id":100039001,"comment_content":"知其然所以然<br>为什么我觉得我需要学习设计模式？<br>最近在想参考别人的开源IM系统，想自己动手写一套来实践，同时也希望能够做好代码的质量。<br>在阅读开源项目中，我无法理解各个项目代码中的代码设计，知道哪些是好的哪些坏的，两者都吸收，到最后自己实践的代码还是一团糟。","like_count":0},{"had_liked":false,"id":152831,"user_name":"玉皇大亮","can_delete":false,"product_type":"c1","uid":1019849,"ip_address":"","ucode":"5C4FDF1FDCF8A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/c9/833d5060.jpg","comment_is_top":false,"comment_ctime":1574085163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574085163","product_id":100039001,"comment_content":"1.简单说编程高手经常用，并且融汇贯通；搬砖菜鸟偶尔用，不明所以<br>2.React中ContextAPI为了解决跨层级组件通信问题，提出了Provider&#47;Consumer的生产者&#47;消费者模式","like_count":0},{"had_liked":false,"id":152799,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1574081985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574081985","product_id":100039001,"comment_content":"使用设计模式让代码开发思路更为清晰，写出更容易维护的代码。工作中用得最多的是工厂模式，单例模式，策略模式，但只是用到比较皮毛的部分，还要继续学习。","like_count":0},{"had_liked":false,"id":152767,"user_name":"慢慢走着","can_delete":false,"product_type":"c1","uid":1238962,"ip_address":"","ucode":"8312A1C179FD4D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/b2/cd32ce18.jpg","comment_is_top":false,"comment_ctime":1574077253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574077253","product_id":100039001,"comment_content":"这样我们才能尽早享受复利。  福利写成了复利","like_count":0},{"had_liked":false,"id":152735,"user_name":"Geek_d19870","can_delete":false,"product_type":"c1","uid":1119721,"ip_address":"","ucode":"C90D252A7F67BF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIRLM0nibsyQdl0y5cl8ntdVzgxQWlqjHniaicjNwuDqiaicXUbLNGhRcg8QOF5wPJziadeQXu2MzhyVK1A/132","comment_is_top":false,"comment_ctime":1574071620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574071620","product_id":100039001,"comment_content":"1.有助于写出高质量、扩展性强、优雅的代码。<br>2.有助于领悟优秀源码的思想，提升个人内功。<br>3.可以让自己有能力且有效的帮助他人提升，前提是你愿意的话；帮助别人等于帮助自己。<br>4.有了上面的保证，不出意外的话，职场升级&#47;offer就是附属品。","like_count":0},{"had_liked":false,"id":152554,"user_name":"晨间新闻","can_delete":false,"product_type":"c1","uid":1161406,"ip_address":"","ucode":"6F7A55AAD52F16","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/be/2d77d643.jpg","comment_is_top":false,"comment_ctime":1574042384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574042384","product_id":100039001,"comment_content":"原来看不懂源码是因为内功不足呀","like_count":0},{"had_liked":false,"id":152526,"user_name":"Win","can_delete":false,"product_type":"c1","uid":1473487,"ip_address":"","ucode":"5D1FCE4B424B82","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/cf/870ab4af.jpg","comment_is_top":false,"comment_ctime":1574039450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574039450","product_id":100039001,"comment_content":"经验➕未雨绸缪","like_count":0},{"had_liked":false,"id":152425,"user_name":"Simplation","can_delete":false,"product_type":"c1","uid":1176020,"ip_address":"","ucode":"22CC71D3B021AB","user_header":"https://static001.geekbang.org/account/avatar/00/11/f1/d4/bd644628.jpg","comment_is_top":false,"comment_ctime":1573998099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573998099","product_id":100039001,"comment_content":"笔记：<br>为什么要学习并掌握设计模式的相关知识？<br>1. 应对面试中的设计模式相关问题。<br>2. 告别写被人吐槽的烂代码。(提高自己的编码能力，写出高质量代码)<br>3. 提高复杂代码的设计和开发能力。<br>4. 让读源码、学框架事半功倍。<br>5. 为你的职场发展做铺垫。<br><br>作业：<br>1.设计模式非常重要，个人深有体会。（尤其是刚入行的时候，看别人的开源项目真的是很费劲）<br>2.工作中只用到工厂、单例、观察者。<br><br>文章中的这句话深有体会”你以为你读懂了别人的代码，其实你可能还未领悟到其中的精髓！“，在阅读开源框架代码的时候花费的事件不少，但只是了解业务，有很多的地方不知道为什么要这样去写！！！<br>跟随作者学习。","like_count":0},{"had_liked":false,"id":152377,"user_name":"早就在城下","can_delete":false,"product_type":"c1","uid":1501819,"ip_address":"","ucode":"3B0D4D7CF7339A","user_header":"https://static001.geekbang.org/account/avatar/00/16/ea/7b/8f597e3d.jpg","comment_is_top":false,"comment_ctime":1573986075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573986075","product_id":100039001,"comment_content":"构造器模式是不是用的最多，哈哈","like_count":0},{"had_liked":false,"id":152357,"user_name":"wyf2317","can_delete":false,"product_type":"c1","uid":1236837,"ip_address":"","ucode":"7F3E61A6188B39","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ub4icibeRLzff8Nf6ORsolib9KHtmeu3d4cCCAFd3Xgah3v78WfDYQB7WKq9iaIPXPwHBxw7mkBP9wYxDGMT9m1Rbw/132","comment_is_top":false,"comment_ctime":1573982041,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573982041","product_id":100039001,"comment_content":"1  找工作必备的敲门砖。看开源代码必备。使用适合的设计模式可以减少开发工作量，减少潜在bug。<br><br>2 单例：异步文件读写并热更新类，提高程序并发。 简单工厂：根据客户端请求创建不同接口对象。","like_count":0},{"had_liked":false,"id":152274,"user_name":"豌豆","can_delete":false,"product_type":"c1","uid":1113307,"ip_address":"","ucode":"0C35FD827F9BFD","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/db/56b0d13c.jpg","comment_is_top":false,"comment_ctime":1573958008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573958008","product_id":100039001,"comment_content":"在没有开始到这门课程之前，也看过些设计模式的书，就像作者说的，看的时候觉得自己懂了，实际中不知道如何应用，了解的设计模式其实也很有限，最后能记得的就更少了。<br>听完开课词与第一节课之后，我思考了一下当前自己的状态与一些感悟：<br> 关于重构与阅读工作中的项目代码<br>\t1. 自己也能发现写的项目中让我觉得很佩服的代码，但是哪里好呢，是怎么基于何种设计后的思考呢？讲不出；<br>\t2. 针对业务上有关联，但又不是强关联的模块，按照现有代码的编写，从代码层面就已经做了强关联；<br>\t3. 当然也会发现写的不容易理解的或者觉得不合理的地方，也会去尝试按照自己的方式去抽象和重构。<br>关于写代码<br>\t1. 虽然也一直在写代码，但是修修补补的工作较多，设计工作似乎是在前人摘好的树上照葫芦画瓢，并不是想搞创新，而是这种设计工作总觉得有种不知其所以然的感觉；<br>\t2. 编码更多像是在吃老本，写出来的代码和几年前的差别并不大。<br>关于代码review<br>\t1. 目前自己的工作内容中已经有了需要去指导新进员工的责任，在做代码评审时，除了开发规范上做些要求，其他的方面，觉得有些力不从心，想想自己好像也是这么过来的。<br>\t2. 自身能力不能提高，除了自己无法进步外，以自身能力教别人，理论上最好的结果是把新人变成和我一样的水平，显然这是不够的。<br>关于开源代码<br>\t1. 文章中提到了看不懂、看不下去的问题，我这里还有一个是不知道从哪里入手来看的问题。<br>\t2. 除了工作需要一定要去看源码的某些点之外，很容易放弃阅读源码这件事情。<br>目前这门课程的开课词和第一节课就已经吸引到我了，有不少痛点。希望自己能够跟着文章一起学习设计模式，从0到0.1到0.2到0.3，最后到1，第一个小目标，跟着本课程持续学习，加油。","like_count":0},{"had_liked":false,"id":152167,"user_name":"Lyle","can_delete":false,"product_type":"c1","uid":1002548,"ip_address":"","ucode":"55371A8BE9F88D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/34/0df5906a.jpg","comment_is_top":false,"comment_ctime":1573896156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573896156","product_id":100039001,"comment_content":"1，设计模式是程序员的基本功<br>2，之前模块基本都是悉尼的一个大牛写的，有单例模式，简单工厂模式，访问者模式，观察者模式等。","like_count":0},{"had_liked":false,"id":152129,"user_name":"王先生","can_delete":false,"product_type":"c1","uid":1082275,"ip_address":"","ucode":"027C061F660605","user_header":"https://static001.geekbang.org/account/avatar/00/10/83/a3/432bbbd9.jpg","comment_is_top":false,"comment_ctime":1573887850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573887850","product_id":100039001,"comment_content":"这篇也是讲重要性，早学早用，早用早熟，早熟早精。","like_count":0},{"had_liked":false,"id":152118,"user_name":"谭鹏","can_delete":false,"product_type":"c1","uid":1142009,"ip_address":"","ucode":"4A8120C4AA6F2F","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/f9/af80b4da.jpg","comment_is_top":false,"comment_ctime":1573884083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573884083","product_id":100039001,"comment_content":"偏业务 ,对设计模式 出了常用的单例和模板方法  其他的没啥概念","like_count":0},{"had_liked":false,"id":152103,"user_name":"Geek_ceadd5","can_delete":false,"product_type":"c1","uid":1655186,"ip_address":"","ucode":"0534D95EFEF779","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJ1rSibUto4HWXuX1AbkqOhlW7deyRxXo7Fwt1iam57SFQgSCiaHWMjT8SlXficxKjuUy44gBSkmM1V3A/132","comment_is_top":false,"comment_ctime":1573878632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573878632","product_id":100039001,"comment_content":"学不懂的时候，弄个项目感觉什么设计模式都能用上。","like_count":0},{"had_liked":false,"id":152003,"user_name":"zhou","can_delete":false,"product_type":"c1","uid":1087243,"ip_address":"","ucode":"E1CE8575B3F106","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","comment_is_top":false,"comment_ctime":1573831780,"is_pvip":false,"discussion_count":0,"race_medal":3,"score":"1573831780","product_id":100039001,"comment_content":"确实看源码时，看着看着就晕了。设计模式学了很多，但当时学了还能记得几天，半个月不用就忘记了","like_count":0},{"had_liked":false,"id":151939,"user_name":"刘会俊","can_delete":false,"product_type":"c1","uid":1065775,"ip_address":"","ucode":"DFC7B41EA6AF57","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/2f/4ff46e78.jpg","comment_is_top":false,"comment_ctime":1573818366,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1573818366","product_id":100039001,"comment_content":"去年对接各个支付平台的时候用了简单工厂+策略，但是感觉用法不太对，然后针对不同业务种类的订单，使用了责任链模式，感觉还是只会用，没有抓住精髓","like_count":0},{"had_liked":false,"id":151864,"user_name":"thinkmore","can_delete":false,"product_type":"c1","uid":1137647,"ip_address":"","ucode":"8FC3414685165C","user_header":"https://static001.geekbang.org/account/avatar/00/11/5b/ef/ab462610.jpg","comment_is_top":false,"comment_ctime":1573801995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573801995","product_id":100039001,"comment_content":"看过猫猫狗狗的设计模式感觉自己弄懂了，掌握了武林绝学，然后别人实际作用，我去啥玩意儿呀！这就是我的现状","like_count":0},{"had_liked":false,"id":151822,"user_name":"李杰","can_delete":false,"product_type":"c1","uid":1743953,"ip_address":"","ucode":"E177762621E11E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9c/51/76fcc9cd.jpg","comment_is_top":false,"comment_ctime":1573796789,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573796789","product_id":100039001,"comment_content":"设计模式，大概是一种DSL，一种优化过的标准化操作","like_count":0},{"had_liked":false,"id":151754,"user_name":"个人练习生niki👍","can_delete":false,"product_type":"c1","uid":1191678,"ip_address":"","ucode":"48E5D6DE94BBBB","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/fe/5541689b.jpg","comment_is_top":false,"comment_ctime":1573785793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573785793","product_id":100039001,"comment_content":"设计模式显著提升了代码的扩展性。<br>工作中用过单例模式、工厂模式、策略模式、模板方法模式<br>在加解密过程中，系统支持多种类型CA进行加解密。每种实例只创建一个对象，单例模式用来避免创建过多对象。<br>根据CA类型用工厂方法去创建对应的对象，实现调用者与对象创建之间解耦。<br>加解密流程 获取CA类型-&gt;前置操作-&gt;加解密-&gt;后置操作。这是一个模板方法模型。<br>通过传入不同的CA类型，可以调用不同的CA加解密，是一种策略模式，相互之间可以替换。","like_count":0},{"had_liked":false,"id":151719,"user_name":"苏彧","can_delete":false,"product_type":"c1","uid":1622448,"ip_address":"","ucode":"C016B28DF7449C","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/b0/b52d9ade.jpg","comment_is_top":false,"comment_ctime":1573781572,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573781572","product_id":100039001,"comment_content":"我是今年刚出来的大学生，够早的看了你的文章，","like_count":0},{"had_liked":false,"id":151670,"user_name":"麻婆豆腐","can_delete":false,"product_type":"c1","uid":1731885,"ip_address":"","ucode":"F371FE05D081D6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6d/2d/de41f9cf.jpg","comment_is_top":false,"comment_ctime":1573778148,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573778148","product_id":100039001,"comment_content":"1带设计就有高级感，所谓磨刀不误砍柴工，对整个项目的提升是非常大的。<br>2.没有用过啊！天天写烂代码，希望通过学习能够提高code能力，不要被别人吐槽","like_count":0},{"had_liked":false,"id":151643,"user_name":"昵称不重要","can_delete":false,"product_type":"c1","uid":1156872,"ip_address":"","ucode":"50F0E9DC56AE3B","user_header":"https://static001.geekbang.org/account/avatar/00/11/a7/08/802cc83f.jpg","comment_is_top":false,"comment_ctime":1573774434,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573774434","product_id":100039001,"comment_content":"用过单例模式减少资源创建的开销","like_count":0},{"had_liked":false,"id":151592,"user_name":"Pioneer4","can_delete":false,"product_type":"c1","uid":1742839,"ip_address":"","ucode":"EE095D397D9BB4","user_header":"https://static001.geekbang.org/account/avatar/00/1a/97/f7/8afbb146.jpg","comment_is_top":false,"comment_ctime":1573746605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573746605","product_id":100039001,"comment_content":"# 1.聊一聊你对设计模式相关知识的重要性的看法：<br>设计模式是前辈代码设计的总结，是经典，也是共识，有助于提高代码的可扩展性、逻辑性、全局性。<br># 2. 在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>还未做过开发，感觉在学习使用各种框架的时候，Factory工厂模式用得很多，就相当于给我们开发者提供了创建某个对象的唯一通道，对于作者本身，可以自由修改源代码而不影响开发者的使用。","like_count":0},{"had_liked":false,"id":151587,"user_name":"秋葵","can_delete":false,"product_type":"c1","uid":1354644,"ip_address":"","ucode":"6D72EFFCDD14E3","user_header":"https://static001.geekbang.org/account/avatar/00/14/ab/94/729a2318.jpg","comment_is_top":false,"comment_ctime":1573744643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573744643","product_id":100039001,"comment_content":"1.刚工作一年的码农，就自己而言，目前理解项目需求，使用合适的设计模式来完成功能能够节省很多时间，一切需求完成下来会很顺利。<br>2.对设计模式了解不多，可能平时用到了，但具体说不上来。<br>","like_count":0},{"had_liked":false,"id":151584,"user_name":"Rolkevin","can_delete":false,"product_type":"c1","uid":1078696,"ip_address":"","ucode":"9B668E3CE8C80D","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/a8/f0538063.jpg","comment_is_top":false,"comment_ctime":1573744281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573744281","product_id":100039001,"comment_content":"1、设计模式，在某次面试中，被问了一道，当时就一脸懵，什么是设计模式，从那之后才慢慢开始知道设计模式的存在（很失败）对我来说，当前，设计模式的重要性就在老师提到的为什么要学设计模式中的头2个，为了面试以及告别烂代码，摆脱crud，现在就是后悔当初，工作之余没有学习新知识，现在很被动，但愿此时开始不会太晚<br>2、回想了一下，工作中用的只有单例跟工厂了，长叹一声...跟着专栏，除了系统学习设计模式之外，也想借此机会，养成主动学习的习惯；<br>画外音：自我感觉抽象思维不够强，想请教老师，有什么办法可以加强思维能力","like_count":0},{"had_liked":false,"id":151501,"user_name":"有爱有波哥","can_delete":false,"product_type":"c1","uid":1464493,"ip_address":"","ucode":"DD9A023563151F","user_header":"https://static001.geekbang.org/account/avatar/00/16/58/ad/6abb57c4.jpg","comment_is_top":false,"comment_ctime":1573731826,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573731826","product_id":100039001,"comment_content":"就如争哥说，源码看不懂","like_count":0},{"had_liked":false,"id":151400,"user_name":"加号","can_delete":false,"product_type":"c1","uid":1459955,"ip_address":"","ucode":"EDB8A6351C6A6E","user_header":"https://static001.geekbang.org/account/avatar/00/16/46/f3/f8a83f39.jpg","comment_is_top":false,"comment_ctime":1573713379,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573713379","product_id":100039001,"comment_content":"设计模式可以避免代码的堆积，开发出整洁，易维护，解耦合的功能。但在平时的项目中，因项目急迫，确实很少有时间去仔细考虑，布局。时间长了后，就遗忘掉这些知识，希望能重新捡起来~~","like_count":0},{"had_liked":false,"id":151283,"user_name":"Janet－林","can_delete":false,"product_type":"c1","uid":1093701,"ip_address":"","ucode":"29B4CCE6D6890B","user_header":"https://static001.geekbang.org/account/avatar/00/10/b0/45/8a223c24.jpg","comment_is_top":false,"comment_ctime":1573694891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573694891","product_id":100039001,"comment_content":"用了比较多单例和工厂","like_count":0},{"had_liked":false,"id":151240,"user_name":"斜杠ing...","can_delete":false,"product_type":"c1","uid":1676247,"ip_address":"","ucode":"C4AE866AC8B9AE","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/d7/93c8f92a.jpg","comment_is_top":false,"comment_ctime":1573690500,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573690500","product_id":100039001,"comment_content":"刚换了家公司，看到大量的我ifelse就晕了，而且相同的功能到处在复制。有些明显的用个模版就可以很好的解决问题，但就是复制了一大堆代码，搞得bug超多","like_count":0,"discussions":[{"author":{"id":1740639,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8f/5f/c6d10aa8.jpg","nickname":"码弓手","note":"","ucode":"B5D1EC8424B5D5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50358,"discussion_content":"以前也被不好的代码气到，明明同杨的功能却写了三分代码，当我用模板抽出来后，却因为改动别人的代码被负责人说教了，😂😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573710643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151119,"user_name":"东流","can_delete":false,"product_type":"c1","uid":1738147,"ip_address":"","ucode":"2715BC6E87BD83","user_header":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","comment_is_top":false,"comment_ctime":1573655391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573655391","product_id":100039001,"comment_content":"设计模式可以降低代码耦合性，继续扩展<br>我目前用得最多的是单例模式，当成全局变量使用。还有就是观察者模式，事件监听","like_count":0},{"had_liked":false,"id":151109,"user_name":"沐天同","can_delete":false,"product_type":"c1","uid":1055298,"ip_address":"","ucode":"1405E344F07F0D","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/42/55c79768.jpg","comment_is_top":false,"comment_ctime":1573654307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573654307","product_id":100039001,"comment_content":"1. 可维护的代码是易扩展，解耦的。<br><br>2.用过的设计模式，单例，工厂，观察者，模板","like_count":0},{"had_liked":false,"id":151103,"user_name":"even","can_delete":false,"product_type":"c1","uid":1249431,"ip_address":"","ucode":"C976CFB2A0EBBF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Cwkic25ndkExxY3HvVjAaYKVzFRicv2X6TE2sjdqTBBmqeh7X8crIQe3SHPichvcayOCqI3PJ88yVuMNlD8VvkE3A/132","comment_is_top":false,"comment_ctime":1573654040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573654040","product_id":100039001,"comment_content":"有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读。非常认同！","like_count":0},{"had_liked":false,"id":151101,"user_name":"杨氏","can_delete":false,"product_type":"c1","uid":1734266,"ip_address":"","ucode":"862E0C3113F929","user_header":"https://static001.geekbang.org/account/avatar/00/1a/76/7a/e2780019.jpg","comment_is_top":false,"comment_ctime":1573653678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573653678","product_id":100039001,"comment_content":"设计模式灰常重要，几乎面试必问题。<br>我虽然懂几个，但理解不够透。希望能跟着老师把这方面提高。","like_count":0},{"had_liked":false,"id":151093,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1573652888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573652888","product_id":100039001,"comment_content":"结合作者的看法和自己的经历来看，学习设计模式的目的的确可以有很多<br>1.想要自己写出好看的代码，却总是不确定什么样的情况下用什么样的代码最为合适<br>2.在阅读别人的代码或者源码时，不太能理解这种写法的优劣性，更无从面对以后需要对别人的代码进行审核和把关的情况<br>工作中还是使用基础框架的多，很多工厂模式，单例模式，装饰者模式之类的都是看源码解析的概念知道的，实际运用开发中几乎没有清晰明白的理解过，所以还是希望接下来的学习中，能够更进一步的理解这一点。","like_count":0},{"had_liked":false,"id":151025,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1241567,"ip_address":"","ucode":"C42E11098E1B38","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","comment_is_top":false,"comment_ctime":1573644310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573644310","product_id":100039001,"comment_content":"在看别人的源代码时，好难啃动啊","like_count":0},{"had_liked":false,"id":151014,"user_name":"Empty","can_delete":false,"product_type":"c1","uid":1237261,"ip_address":"","ucode":"AD6C95A503B991","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/0d/ecf81935.jpg","comment_is_top":false,"comment_ctime":1573643273,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573643273","product_id":100039001,"comment_content":"<br>工厂模式和适配器模式，主要就是通过不同的服务提供商来获取数据，个人感觉设计模式还是很重要的，可以解耦业务，做到开闭原则，减少产生新bug的概率","like_count":0},{"had_liked":false,"id":150907,"user_name":"Cindy_Yu","can_delete":false,"product_type":"c1","uid":1328604,"ip_address":"","ucode":"EE6869CAC5C1EC","user_header":"https://static001.geekbang.org/account/avatar/00/14/45/dc/a3a231d1.jpg","comment_is_top":false,"comment_ctime":1573625419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573625419","product_id":100039001,"comment_content":"建造者模式，在dialog里用。set title等。适配器模式。adapter.","like_count":0},{"had_liked":false,"id":150766,"user_name":"idea","can_delete":false,"product_type":"c1","uid":1252848,"ip_address":"","ucode":"621921030982C0","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/f0/59702429.jpg","comment_is_top":false,"comment_ctime":1573608380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573608380","product_id":100039001,"comment_content":"用得比较多的是单利，工厂，责任链，策略这几种模式。最近遇到一个业务场景需要编写非常多的规则内容，为了优化规则部分的逻辑代码，学习了drools规则引擎，现在将核心的rule全部抽离了出来，感觉代码清晰了很多。","like_count":0},{"had_liked":false,"id":150652,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1573574721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573574721","product_id":100039001,"comment_content":"我是做python，设计模式感觉用的少，设计原则感觉很精髓， 设计原则不仅指导面向对象也指导面向过程。  带来的 最大好处就是扩展性。","like_count":0},{"had_liked":false,"id":150644,"user_name":"姚先生","can_delete":false,"product_type":"c1","uid":1181069,"ip_address":"","ucode":"B2FAE540D562E1","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/8d/27db1e0f.jpg","comment_is_top":false,"comment_ctime":1573573477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573573477","product_id":100039001,"comment_content":"功利一点，希望通过专栏的学习，可以在工作中用到设计模式，面试被面试时得心应手，看得懂优秀开源代码的设计理念","like_count":0},{"had_liked":false,"id":150327,"user_name":"Spring.Fred","can_delete":false,"product_type":"c1","uid":1055148,"ip_address":"","ucode":"66C84150ACC304","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ac/32da70c9.jpg","comment_is_top":false,"comment_ctime":1573519408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573519408","product_id":100039001,"comment_content":"用的最多的是用策略模式解决ifelse过多不好扩展的问题","like_count":0},{"had_liked":false,"id":150293,"user_name":"黄剑","can_delete":false,"product_type":"c1","uid":1204424,"ip_address":"","ucode":"D7F68DE19F41CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/c8/044dd4a2.jpg","comment_is_top":false,"comment_ctime":1573513348,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1573513348","product_id":100039001,"comment_content":"用过单例模式，工厂模式，发布订阅模式","like_count":0},{"had_liked":false,"id":150231,"user_name":"李哈哈","can_delete":false,"product_type":"c1","uid":1691748,"ip_address":"","ucode":"2A19E74F24D459","user_header":"https://static001.geekbang.org/account/avatar/00/19/d0/64/cb6c25fe.jpg","comment_is_top":false,"comment_ctime":1573482293,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"1573482293","product_id":100039001,"comment_content":"有些人看源码的时候，经常会遇到看不懂、看不下去的问题。这不就是我么，努力跟随学习，早日修复我这个看不懂源码，看代码慢的技能bug。","like_count":0},{"had_liked":false,"id":150133,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1573466691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573466691","product_id":100039001,"comment_content":"以前学的看完就忘，跟实际结合不起来。有印象的就是Java I&#47;O 的 装饰器模式，还有各种以Builder结尾的构建器模式。好像设计模式分几大类，创建型等等","like_count":0},{"had_liked":false,"id":150084,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1573459849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573459849","product_id":100039001,"comment_content":"代码规范的用处：1.省的被人瞎J⑧扯过来取笑:代码都写成这样，一看就是菜<br>    2.提高复杂代码的设计和开发能力：平常都是写的一些功能代码，到重新开始设计和写的时候就不知道怎么设计，怎么去干什么了<br>    3.让读源码、学框架事半功倍：主流框架一般都会遵守这些规则，你知道了这些规则跟着走就更顺了<br><br>既然是常用的设计模式，那就是大家都承认都在用的好的模式。学习别人优秀的设计模式远比自己yy出一个要更快更好的多","like_count":0},{"had_liked":false,"id":149933,"user_name":"leejunhui","can_delete":false,"product_type":"c1","uid":1188627,"ip_address":"","ucode":"A957C0034B9F4D","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/13/6ba35b43.jpg","comment_is_top":false,"comment_ctime":1573434002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573434002","product_id":100039001,"comment_content":"说来惭愧，在四年开发经验中，对于设计模式确实是忽略了，日常使用偏多的可能就是单例，工厂模式了","like_count":0},{"had_liked":false,"id":149826,"user_name":"Tyro","can_delete":false,"product_type":"c1","uid":1141696,"ip_address":"","ucode":"48B27982321578","user_header":"https://static001.geekbang.org/account/avatar/00/11/6b/c0/790d88ad.jpg","comment_is_top":false,"comment_ctime":1573395357,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573395357","product_id":100039001,"comment_content":"重要性：<br>1.  减少重复代码；<br>2. 使代码逻辑更加清晰；<br>3. 看源码<br><br>项目开发中：<br>1.  策略模式，工厂，不同的数据依据不同的规则导入数据库 （共有的导入抽提了出来），工厂协同完成","like_count":0},{"had_liked":false,"id":149823,"user_name":"刘洋","can_delete":false,"product_type":"c1","uid":1275580,"ip_address":"","ucode":"9C4DEDDF6CB7DB","user_header":"https://static001.geekbang.org/account/avatar/00/13/76/bc/0e8e0ef8.jpg","comment_is_top":false,"comment_ctime":1573394144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573394144","product_id":100039001,"comment_content":"用过单例模式，策略模式和建造者模式","like_count":0},{"had_liked":false,"id":149810,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1025030,"ip_address":"","ucode":"62A89FD460827A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/06/cf6b6d0f.jpg","comment_is_top":false,"comment_ctime":1573385530,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573385530","product_id":100039001,"comment_content":"我觉得很多同学应该和我一样，听说过设计模式很重要，然后就会个单例。<br><br>其实吧，别人吐槽我代码写的烂倒是不可怕，可怕的是写得烂也没人告诉你，大家一起烂。<br><br>还有读开源框架的源码，我从来没体会到小争哥说的，优美这种感觉，有的只是焦头烂额，连猜带蒙。<br><br>我先承认自己很差吧，接下来就跟着学，虽然我这不敢立什么豪言壮语，尽力吧。","like_count":0},{"had_liked":false,"id":149733,"user_name":"narry","can_delete":false,"product_type":"c1","uid":1033576,"ip_address":"","ucode":"B8010C1DE39D08","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/68/7afb7304.jpg","comment_is_top":false,"comment_ctime":1573359624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573359624","product_id":100039001,"comment_content":"软件之所以称之为软件，就在于易于扩展，满足不断变化，所以我们必须关注于软件的演进能力，而在实际的开发过程中，我们由于各种原因常常只重视了软件的行为价值，而忽视了其架构价值，逐渐软件也变成了“硬件”，如果说solid原则是道，那设计模式就是术，学会了术，也会加深对道的理解","like_count":0},{"had_liked":false,"id":149684,"user_name":"Geek_4e58c9","can_delete":false,"product_type":"c1","uid":1541413,"ip_address":"","ucode":"C1507B6BCCF4F0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/FpudwHOvLaFheC6EiboZsfEQGtvEWykGNTCC3AUM7L9sReWZ7TVicJ73uV1sZ3jbRibYj2NasLHAkLmn7p8FkW2Cg/132","comment_is_top":false,"comment_ctime":1573318945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573318945","product_id":100039001,"comment_content":"广度到深度，使用设计模式是借鉴前人走过的坑，避免自己也重复走坑","like_count":0},{"had_liked":false,"id":149628,"user_name":"学明","can_delete":false,"product_type":"c1","uid":1033677,"ip_address":"","ucode":"1A499A2557F74D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/cd/7d3e4355.jpg","comment_is_top":false,"comment_ctime":1573292377,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573292377","product_id":100039001,"comment_content":"个人理解设计模式最重要的是抽象，拆分，分层，解藕。<br>把问题做现实抽象类比，然后拆分成多个模块来解决，横块间纵向少量分层（单向依赖），横向完全解藕。","like_count":0},{"had_liked":false,"id":149600,"user_name":"thomas-fan","can_delete":false,"product_type":"c1","uid":1258997,"ip_address":"","ucode":"CCFB55E1CC0C26","user_header":"https://static001.geekbang.org/account/avatar/00/13/35/f5/5283d5a2.jpg","comment_is_top":false,"comment_ctime":1573288695,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573288695","product_id":100039001,"comment_content":"看各类框架的源码不掌握好设计模式真容易越看越迷糊，希望这次学习能看懂写出高质量代码","like_count":0},{"had_liked":false,"id":149566,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1573274788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573274788","product_id":100039001,"comment_content":"设计模式应用的难点在于两个方面：1是如何发现遗留代码中的设计模式，2是每种设计模式应用的场景。设计模式很重要，但有时人就是犯懒，觉得抽象设计模式很浪费时间。代码中满屏的条件判断和长长的函数参数，还有同事之间沟通的时候如果对设计模式很熟悉将会提高沟通效率。","like_count":0},{"had_liked":false,"id":149527,"user_name":"codecly","can_delete":false,"product_type":"c1","uid":1178615,"ip_address":"","ucode":"65FBA9A4BDFCDF","user_header":"https://static001.geekbang.org/account/avatar/00/11/fb/f7/3e94e55d.jpg","comment_is_top":false,"comment_ctime":1573267432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573267432","product_id":100039001,"comment_content":"一直觉得设计模式很重要，但是每次都都没有静下心来完整的学习，很多设计模式傻傻的分不清弄混<br>重要性：<br>1. 可以提高代码的可维护性<br>2. 开源代码中内涵了很多设计模式、设计思想，学懂设计模式可以更容易看懂开源框架，学习框架的设计思想<br>3. 可以和同行更容易交流","like_count":0},{"had_liked":false,"id":149485,"user_name":"Fun","can_delete":false,"product_type":"c1","uid":1145502,"ip_address":"","ucode":"5D89BA4C678785","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJdUGdEj3R25CrYqibPibYibibRicqUfyL4aTTPbMagyywjKMhXGZE37RTe7lEdvC4DibvtYpzg8zXvt9HQ/132","comment_is_top":false,"comment_ctime":1573233162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573233162","product_id":100039001,"comment_content":"# day 5.<br>重新刷了几篇总结，聊聊我对设计模式的看法。<br>设计模式自然是属于那种不明觉厉的范畴的。其实，如果真的每个人有机会从头至尾参与哪怕一种设计模式的应用（从需求分析，讨论代码实现，搭建代码骨架，慢慢补充完善代码，遇到问题，单元测试，遇到新问题，思考重构，最后决定采用某种设计模式），我想你就会恍然大悟，原来在这种场景下这样写的代码会如此干净，漂亮而可靠，你由衷地生出一种自信的会心的笑意。<br>这大概就是我对设计模式之美的理解了。","like_count":0},{"had_liked":false,"id":149476,"user_name":"努力努力再努力m","can_delete":false,"product_type":"c1","uid":1644369,"ip_address":"","ucode":"9DD9E9C2988FFC","user_header":"https://static001.geekbang.org/account/avatar/00/19/17/51/3e13dc0c.jpg","comment_is_top":false,"comment_ctime":1573228848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573228848","product_id":100039001,"comment_content":"看法：学好设计模式，就是为了能看懂别人写的好的代码，然后自己也能写出高质量的代码。<br>应用场景：在项目中单例，工厂，这些简单的设计模式，学习设计模式，也是为了能看懂框架源码。","like_count":0},{"had_liked":false,"id":149460,"user_name":"林黛玉","can_delete":false,"product_type":"c1","uid":1266620,"ip_address":"","ucode":"F8507366012881","user_header":"https://static001.geekbang.org/account/avatar/00/13/53/bc/72baeee8.jpg","comment_is_top":false,"comment_ctime":1573224085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573224085","product_id":100039001,"comment_content":"概念：设计模式是什么？<br>回答：设计模式「design pattern」代表最佳实践，是众多开发人员长期探索、试错、总结。","like_count":0},{"had_liked":false,"id":149456,"user_name":"极客时间","can_delete":false,"product_type":"c1","uid":1015564,"ip_address":"","ucode":"AF7565BB5EF164","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/0c/392ce255.jpg","comment_is_top":false,"comment_ctime":1573223448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573223448","product_id":100039001,"comment_content":"订阅发布模式 单例模式就这俩 其他的模棱两可","like_count":0},{"had_liked":false,"id":149417,"user_name":"Geek_129da0","can_delete":false,"product_type":"c1","uid":1734684,"ip_address":"","ucode":"9597A7E2899C6A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/x54MaKxBBJj0Zlia7YBECzKzwGOX3rUSnVQAkJ9HYyFVic3K0xiaoUwThr4Ou4PRy6NdcpQTFb3NHo2H3Mngn78JA/132","comment_is_top":false,"comment_ctime":1573214064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573214064","product_id":100039001,"comment_content":"模板模式，单例模式，责任链模式","like_count":0},{"had_liked":false,"id":149393,"user_name":"Lorne.Z","can_delete":false,"product_type":"c1","uid":1109854,"ip_address":"","ucode":"8C67D82246A3AC","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/5e/381d043b.jpg","comment_is_top":false,"comment_ctime":1573208944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573208944","product_id":100039001,"comment_content":"说的太对了 ---&gt;  投资要趁早，这样我们才能尽早享受复利。同样，有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读。这样在你后面的生活、工作、学习中，才能一直都发挥作用。不要等到好多年后，看到了，才恍然大悟，后悔没有早点去学、去看。<br>需要学习的太多了","like_count":0},{"had_liked":false,"id":149322,"user_name":"小陳仔","can_delete":false,"product_type":"c1","uid":1245074,"ip_address":"","ucode":"8D5B6DB671E9FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/92/73d4ccd1.jpg","comment_is_top":false,"comment_ctime":1573192637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573192637","product_id":100039001,"comment_content":"身为前端工程师的我，目前只用过工厂模式和 发布与订阅模式，家里也的确有一摞书，有的还未开封，经常看完就忘记，后来发现理论与实践必须要相互结合，才能更好的理解与运用。","like_count":0},{"had_liked":false,"id":149317,"user_name":"Clay","can_delete":false,"product_type":"c1","uid":1330248,"ip_address":"","ucode":"EAEBCB16787116","user_header":"https://static001.geekbang.org/account/avatar/00/14/4c/48/1b177245.jpg","comment_is_top":false,"comment_ctime":1573190827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573190827","product_id":100039001,"comment_content":"老鸟来学习:<br><br>现在每天主要也是在重构过往烂代码，或者写一些团队可以用到的工具，偶尔review同事代码。因为作为技术leader，技术是一线能力，不能放下，所以一直这么坚持下来，但同是也在扩展自己横向能力，例如管理能力等。<br>另外给我启发的是: 设计模式能提高复杂代码的设计和开发能力，这个总结很到位，很喜欢。<br><br>讨论：<br>1. 设计模式重要性：个人觉得如果需要开发中大型后台可以深入学习设计模式，不需要的可以简单理解学习就好（学无止尽，专注某一两个领域即可）<br>2. 没系统学过设计模式，说说最近优化系统懂得了什么是好的设计思想，如何设计好一个系统？<br>- 有灵魂的目录结构，给人一眼就能看出其系统设计核心<br>- 每个目录的设计理念是什么，弄清楚这些基本就能够理解这个系统<br>有点晚了，先到这里，跑题了勿怪","like_count":0},{"had_liked":false,"id":149296,"user_name":"罗炜昊","can_delete":false,"product_type":"c1","uid":1684357,"ip_address":"","ucode":"EEC180F814D1B3","user_header":"https://static001.geekbang.org/account/avatar/00/19/b3/85/9d3c685c.jpg","comment_is_top":false,"comment_ctime":1573184684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573184684","product_id":100039001,"comment_content":"我是某985硕士毕业，现在在某厂做算法工程师。在学校里，涉及到项目，导师都是让博士师兄开发基础类，里面就有一些继承，接口，我们硕士就是开发功能类，和导师讨论好用啥启发式算法，或者求解器求解如何建模，然后开发，然后项目结束，那时，用师兄开发的基础类可爽了，噼里啪啦得用。后面来了公司，没有师兄给你开发基础类了，遇见一些小项目又是自己独立开发算法，做过企业项目的都知道，业务自己都搞不清需求是啥，往往都是和你说个背景，你去开发，他看结果，然后开始挤牙膏，不断的修改需求，你就要不断的修改算法。如果基础类、耦合等做不好，真的很痛苦，比如我目前就是，开始设计时不清楚要不要做继承，也不知道该不该做接口，到了开发到后面，才感觉当时应该做继承的，这时改又很麻烦，所以急需设计模式补课呀！！！","like_count":0},{"had_liked":false,"id":149257,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1573180067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573180067","product_id":100039001,"comment_content":"应对面试中的设计模式相关问题；告别写被人吐槽的烂代码；提高复杂代码的设计和开发能力；让读源码、学框架事半功倍；为你的职场发展做铺垫。<br>看了这五点，还有什么理由不订阅呢？","like_count":0},{"had_liked":false,"id":149248,"user_name":"李文杰","can_delete":false,"product_type":"c1","uid":1504021,"ip_address":"","ucode":"1C745DF9049408","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/15/4952e98e.jpg","comment_is_top":false,"comment_ctime":1573178584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573178584","product_id":100039001,"comment_content":"重要性可能主要体现在面试中，懂一点，深究起来，就打不出来啦。","like_count":0},{"had_liked":false,"id":149243,"user_name":"薯条","can_delete":false,"product_type":"c1","uid":1697454,"ip_address":"","ucode":"48529989A2C51F","user_header":"https://static001.geekbang.org/account/avatar/00/19/e6/ae/73a52bb9.jpg","comment_is_top":false,"comment_ctime":1573178252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573178252","product_id":100039001,"comment_content":"安卓开发。用单例模式封装部分第三方库；静态代理解决重复点击问题；观察者模式;Builder模式创建公共组件。<br>最近看Retrofit源码，总结其用到设计模式：<br>Retrofit创建 Builder模式；Retrofit内部维护多个工厂集合：ConverterAdapter CallAdapter；适配器模式","like_count":0},{"had_liked":false,"id":149231,"user_name":"对影成三人","can_delete":false,"product_type":"c1","uid":1054145,"ip_address":"","ucode":"CFFD3B70E82804","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/c1/ece966c1.jpg","comment_is_top":false,"comment_ctime":1573177081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573177081","product_id":100039001,"comment_content":"一直觉得设计模式很重要（像数据结构，算法，这些与语言无关的通用知识），也有买书看，看博客，但是总感觉自己只知道点皮毛，而且工作中用的少，隔一段时间又忘记了，感觉陷入一个奇怪的循环。所以很期待这个课程。","like_count":0},{"had_liked":false,"id":149193,"user_name":"开心学习","can_delete":false,"product_type":"c1","uid":1215134,"ip_address":"","ucode":"DCC050F6A8840B","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/9e/502e5f14.jpg","comment_is_top":false,"comment_ctime":1573174669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573174669","product_id":100039001,"comment_content":"设计模式平时只是会在面试之前，在网上看一些临时准备准备，实际工作中除了CRUD确实很少用到。<br><br>单例模式，工厂模式等，只是简单了解，不会实际使用。<br><br>希望跟老师一起攻克设计模式。<br><br>非常期待!!!","like_count":0},{"had_liked":false,"id":149109,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1573142671,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573142671","product_id":100039001,"comment_content":"设计模式用得恰到好处，代码就会很舒服，用得不合适，代码就会过于复杂，这真的是可以训练出来的吗？<br><br>程序员的核心产出就是代码，代码在精不在多，有点技术洁癖是必须的。<br><br>之前的项目中使用职责链模式处理用户登录接口上的一连串功能；现在的项目里使用模板模式处理通用的二、三方服务调用；使用最多的是策略设计模式，用来屏蔽掉具体实现的差异","like_count":0},{"had_liked":false,"id":149093,"user_name":"Geekwangc","can_delete":false,"product_type":"c1","uid":1591256,"ip_address":"","ucode":"C7CF64DF3E3EAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/phlKhN4SKv2dic5Sr6fE4qWILbkDUjCQ2xhdiboM3UWSib4ulj3u7vl9OX4tylQTH8DfXWYELia7ry2WJ6PReowAVw/132","comment_is_top":false,"comment_ctime":1573140138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573140138","product_id":100039001,"comment_content":"工作五年，感觉不到任何进步，从现在开始补补基础","like_count":0},{"had_liked":false,"id":149033,"user_name":"Joie","can_delete":false,"product_type":"c1","uid":1163808,"ip_address":"","ucode":"73A66DF56972F4","user_header":"https://static001.geekbang.org/account/avatar/00/11/c2/20/fb3861e8.jpg","comment_is_top":false,"comment_ctime":1573129390,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573129390","product_id":100039001,"comment_content":"在设计测试框架的过程中，发现设计模式比算法还要重要，一个高可用，易扩展的框架真的会事半功倍。","like_count":0},{"had_liked":false,"id":148974,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1573120125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573120125","product_id":100039001,"comment_content":"知道什么时候不用设计模式也是一个很重要的问题，希望老师也能谈谈反模式的话题。","like_count":0},{"had_liked":false,"id":148929,"user_name":"啥也不会","can_delete":false,"product_type":"c1","uid":1040584,"ip_address":"","ucode":"2E0F593B237C59","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e0/c8/4ad13219.jpg","comment_is_top":false,"comment_ctime":1573112279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573112279","product_id":100039001,"comment_content":"1.聊一聊你对设计模式相关知识的重要性的看法；<br>设计模式的使用可以极高的提高系统的可扩展性和可维护性。<br>2.在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>我用过策略模式，用以解决同一行为的不同实现的方式，比如有的场景下去查缓存、有的去查数据库，根据场景不同，加载不同的策略。","like_count":0},{"had_liked":false,"id":148917,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1573109144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573109144","product_id":100039001,"comment_content":"打个卡。","like_count":0},{"had_liked":false,"id":148911,"user_name":"松间明月447","can_delete":false,"product_type":"c1","uid":1273227,"ip_address":"","ucode":"34A81A93FA6BCE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epu2ts9GReslOVerQhUsibQxfzU89VpeNCTuZGdjr7G5kfl4fhNt9qibJgKJh9Mr171yhy96H0TSGjQ/132","comment_is_top":false,"comment_ctime":1573108394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573108394","product_id":100039001,"comment_content":"默默地打卡,没有用过设计模式","like_count":0},{"had_liked":false,"id":148909,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1573107958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573107958","product_id":100039001,"comment_content":"太重要了，即使是根据已有的框架开发一般的业务逻辑，也是很有用的。平常的业务开发不一定会用到某些设计模式，但是围绕着设计模式的思想，原则是非常实用的。<br>在第一次看完一本设计模式的书后，发现有些新学的设计模式自己已经在项目中用到了，像适配器模式，碰到某些写的垃圾的源代码，在不改变源代码的情况下将其封装起来，然后定义一些明确的接口，业务模块就不需要跟这些垃圾代码打交道了。<br><br>","like_count":0},{"had_liked":false,"id":148888,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1573102959,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1573102959","product_id":100039001,"comment_content":"用的最多的就是单例，工厂，策略，模板，其他的一些没有用过的都还回去了，还是理解不够深刻没有用到实际开发中😂","like_count":0},{"had_liked":false,"id":148886,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1573102321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573102321","product_id":100039001,"comment_content":"A1: 技术提升过程中绕不过去的点，而且确实有用。<br>A2: 仅限使用，Builder模式构建dialog；Adpter模为recyclerview填充item；单例模式构建https等工具类等等","like_count":0},{"had_liked":false,"id":148842,"user_name":"嗨","can_delete":false,"product_type":"c1","uid":1248627,"ip_address":"","ucode":"5AC0E0BACF2889","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/73/68d063b3.jpg","comment_is_top":false,"comment_ctime":1573093987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573093987","product_id":100039001,"comment_content":"非计算机专业的开发者，没系统学习过设计模式，开发中会碰到把代码堆在一起不好，但又不知改如何设计，希望学习完本专栏能解决这个问题。项目中有用到过单例模式、工厂模式、抽象工厂模式、组合模式等。","like_count":0},{"had_liked":false,"id":148831,"user_name":"不与三季人说","can_delete":false,"product_type":"c1","uid":1693164,"ip_address":"","ucode":"A3F03832309FDD","user_header":"https://static001.geekbang.org/account/avatar/00/19/d5/ec/3d6e7ea7.jpg","comment_is_top":false,"comment_ctime":1573092779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573092779","product_id":100039001,"comment_content":"学习就是潜移默化的过程，间接的提高技术<br><br>应对面试中设计模式的问题，告别烂代码，提高代码设计和开发能力。<br><br>设计模式的重要性是毋庸置疑的。我目前所在的公司项目是一个七八年前的老平台，所用的技术无论是架构还是代码都让我看了恨不得马上走人，公司也意识到了这个问题所以准备对整个平台进行重新设计，我觉得这对我来说也是一个很好的机会，然而我发现我除了吐槽别人的代码写的不行之外，换我自己去写，可能和别人也差不多，因为让我去重新设计这样的一个系统，对我来说也是不知如何下手，不知道怎么设计模块，不知道怎么设计类，不知道怎么把业务细化到代码上还能让代码看上去优美，可复用性强，可扩展性强，这些对我来说都是问题，如果我对设计模式有了很深的认识和了解，我想对我的现阶段工作以及以后的发展都肯定是非常有利的，所以我果断订阅王争老师的口碑非常好的专栏，跟着专栏的更新去坚持学习，每日打卡，写留言，作总结，要让自己变得更优秀。！","like_count":0},{"had_liked":false,"id":148824,"user_name":"听雨声淅沥","can_delete":false,"product_type":"c1","uid":1247350,"ip_address":"","ucode":"C975EE69A5D103","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/76/350f19ea.jpg","comment_is_top":false,"comment_ctime":1573091744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573091744","product_id":100039001,"comment_content":"没有最好的设计模式  只有更加合适的<br>见招拆招  无招胜有招 <br>多多使用组合拳的威力","like_count":0},{"had_liked":false,"id":148821,"user_name":"长夏江村","can_delete":false,"product_type":"c1","uid":1608879,"ip_address":"","ucode":"79921B6F7760B2","user_header":"https://static001.geekbang.org/account/avatar/00/18/8c/af/debec40c.jpg","comment_is_top":false,"comment_ctime":1573090903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573090903","product_id":100039001,"comment_content":"之前买了本关于设计模式的书，发现是除了封面是中文其余全是英文，硬着头皮读了几章似懂非懂，希望在这重新开始。","like_count":0},{"had_liked":false,"id":148792,"user_name":"kooffe","can_delete":false,"product_type":"c1","uid":1140905,"ip_address":"","ucode":"87BB4D1E925736","user_header":"","comment_is_top":false,"comment_ctime":1573087517,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573087517","product_id":100039001,"comment_content":"打卡学习中！！！","like_count":0},{"had_liked":false,"id":148709,"user_name":"Geek_kevin","can_delete":false,"product_type":"c1","uid":1301274,"ip_address":"","ucode":"03B0253CA59582","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/1a/30201f1a.jpg","comment_is_top":false,"comment_ctime":1573052361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573052361","product_id":100039001,"comment_content":"1.设计模式的重要性不言而喻,是写,好的,干净,整洁的代码基础,不懂设计模式,你的代码有可能就是充斥着大量的if else,冗余度高,也非常不利于团队协作。<br>2.目前在工作中用到的设计模式比较多的就是单例和工厂,单例和工厂用的场景，主要就是数据库的访问类相关,还用到了策略的模式,主要用于业务的不同逻辑处理,避免了代码中充斥着大量的if else.","like_count":0},{"had_liked":false,"id":148696,"user_name":"😚 46","can_delete":false,"product_type":"c1","uid":1433535,"ip_address":"","ucode":"EED0EBBBF80A43","user_header":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","comment_is_top":false,"comment_ctime":1573050723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573050723","product_id":100039001,"comment_content":"1. 能够从容的写出优雅的代码，提高代码的可读性和扩展性。有效的提高编码质量，拓宽设计思路。<br>2.公司业务做点餐公众号，使用工厂+ 策略 +装饰者模式重构了产品列表查询，不同的门店的营业时间各不相同，库存低于阈值装饰相应的文案。","like_count":0},{"had_liked":false,"id":148682,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1573048763,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1573048763","product_id":100039001,"comment_content":"Day002 01<br>1.设计模式是对一些常见场景解决方案的抽象总结，便于你更好的设计编码。<br>2.常用单例，手撕日志类。工厂，不同数据库。","like_count":0},{"had_liked":false,"id":148676,"user_name":"alls well","can_delete":false,"product_type":"c1","uid":1072439,"ip_address":"","ucode":"8E3EB5A3DF6E0D","user_header":"https://static001.geekbang.org/account/avatar/00/10/5d/37/8261fc68.jpg","comment_is_top":false,"comment_ctime":1573047622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573047622","product_id":100039001,"comment_content":"嵌入式设备，需求繁杂多变，设备交互兼容性定制很多，功能不够支撑使用设计模式，在此先找思想灵感，学习如何解耦与兼容性强","like_count":0},{"had_liked":false,"id":148666,"user_name":"大姨夫斯基","can_delete":false,"product_type":"c1","uid":1519521,"ip_address":"","ucode":"79989AC4DD36FE","user_header":"https://static001.geekbang.org/account/avatar/00/17/2f/a1/5f32ada6.jpg","comment_is_top":false,"comment_ctime":1573046607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573046607","product_id":100039001,"comment_content":"安卓开发  主要用单例 工厂 builder 责任链 adapter 代理 模板等","like_count":0},{"had_liked":false,"id":148652,"user_name":"Zer01ne","can_delete":false,"product_type":"c1","uid":1661564,"ip_address":"","ucode":"71ED3A6DD5AB8A","user_header":"https://static001.geekbang.org/account/avatar/00/19/5a/7c/990cf251.jpg","comment_is_top":false,"comment_ctime":1573044992,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573044992","product_id":100039001,"comment_content":"看过一点设计模式，但平时写代码的时候，没有用设计模式的思想，不知道怎么运用，这也是我很苦恼的","like_count":0},{"had_liked":false,"id":148642,"user_name":"尚寂清","can_delete":false,"product_type":"c1","uid":1735856,"ip_address":"","ucode":"FA1D9D6844BC2E","user_header":"","comment_is_top":false,"comment_ctime":1573043354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573043354","product_id":100039001,"comment_content":"经常用到设计模式有：单例模式、观察者模式、模板方法模式和工厂模式","like_count":0},{"had_liked":false,"id":148622,"user_name":"马什么梅","can_delete":false,"product_type":"c1","uid":1665192,"ip_address":"","ucode":"251B100AC229EE","user_header":"https://static001.geekbang.org/account/avatar/00/19/68/a8/1fa41264.jpg","comment_is_top":false,"comment_ctime":1573039399,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573039399","product_id":100039001,"comment_content":"设计模式看了又忘,记不住","like_count":0},{"had_liked":false,"id":148601,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1573036796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573036796","product_id":100039001,"comment_content":"哈哈，设计模式还真的是很少使用…<br>基本业务代码。<br>学设计模式作用 1面试 2代码质量 3源码阅读","like_count":0},{"had_liked":false,"id":148578,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1573032889,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573032889","product_id":100039001,"comment_content":"用过简单的单例模式，针对不用的功能创建线程池的时候，保证每个功能只能创建一次该线程池","like_count":0},{"had_liked":false,"id":148576,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1573032808,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573032808","product_id":100039001,"comment_content":"基础<br><br>- 直接转化成开发的生产力<br>  - 数据机构与算法（代码的效率）<br>  - 设计模式（代码的质量【可扩展、可读、可维护性等等】）<br>- 间接转化成开发的生产力的<br>  - 操作系统、组成原理、编译原理等等。<br>  - 如果学会这些立马去编程序，你会发现并并没有什么效果，但是当你去阅读源码和一些工具的底层时，会觉得特别轻松。提升的事**内力**。<br><br><br><br>学习设计模式的好处<br><br>- 应对面试<br>- 告别低质量的代码<br>- 提高复杂代码的设计和开发能力<br>  - 这点我有着很深的印象，当时部门领导让我写一个组件，更能我直接给实现了，但是代码仅仅是一大堆，没有分层什么的根本也没用到设计模式，最后少不了被一通怼，这么复杂的系统你就这样完成了，我怀疑你写的code漏洞百出。<br>- 阅读源码框架事半功倍<br>- 职场发展做铺垫<br>  - 代码是一个程序员的根本，代码都写不 优雅，怎么成为一个技术大牛。<br>  - leader 的培养新人责任和code review work<br>  - 技术leader 怼项目的质量需要负责的","like_count":0},{"had_liked":false,"id":148531,"user_name":"Warn","can_delete":false,"product_type":"c1","uid":1465310,"ip_address":"","ucode":"F2F7FCDB0940D0","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/de/152f1c2c.jpg","comment_is_top":false,"comment_ctime":1573026392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573026392","product_id":100039001,"comment_content":"1、设计模式，个人感觉：在代码方面更多的目的性是架构，耦合度和扩展性；在个人方面更多的目的性是底气，不管对内还是对外。<br>2、前端开发这些年，真没底气说用过什么设计模式。","like_count":0},{"had_liked":false,"id":148525,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1573024828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573024828","product_id":100039001,"comment_content":"为什么要学习设计模式？<br><br>设计模式讲的是如何写出可扩展、可读、可维护的高质量代码，所以，它们跟平时的编码会有直接的关系，也会直接影响到你的开发能力。<br><br>以下几点是笔记+自己的思考。<br> <br>1 、告别被人被人吐槽得烂代码<br>我想作为程序员，代码是自己的名片，是自己的脸面，要学会如何优雅得写代码。不甘做一个低级码农是每个程序员的自我要求。<br><br>2、应对面试<br><br>我想不用去死记硬背网上得面试题，理解&amp;会用才是王道。<br><br>3、提高复杂代码得设计和开发能力<br>我想会写代码的程序员一抓一大把，但是未必每个人都能应对业务场景超级复杂的系统的设计，设计不好的直接后果就是写出来的代码仅仅能用而已，健壮性就别谈了。<br><br>4、让都源码 学框架事半功倍<br>几度看spring源码都看不下去，我想没有基础知识做支撑，它们真的只是一堆代码而已，看不出优雅之处，学设计模式的目的就是为了培养自己对程序的审美能力。<br><br>5、为职场中得发展做铺垫<br>我想机会不会经常有，偶尔来一两次时希望自己能抓住，不看过往，从做好每一件小事，学好基础开始准备。","like_count":0},{"had_liked":false,"id":148504,"user_name":"PB","can_delete":false,"product_type":"c1","uid":1711529,"ip_address":"","ucode":"4F28594635BC7D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1d/a9/a108318b.jpg","comment_is_top":false,"comment_ctime":1573020492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573020492","product_id":100039001,"comment_content":"有同感，平时开发的时候觉得还能应付，但到了开发独立模块，或者一个全新的package或者service的时候就手足无措，不知道如何写出易扩展、易用、易维护的代码","like_count":0},{"had_liked":false,"id":148499,"user_name":"星期八","can_delete":false,"product_type":"c1","uid":1185504,"ip_address":"","ucode":"34A37F73A48E7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/16/e0/7abad3cc.jpg","comment_is_top":false,"comment_ctime":1573019939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573019939","product_id":100039001,"comment_content":"不说面试什么的，就是自己写出来，自己看起来舒服，别人看的懂，好维护，也很重要，就是要好看！！！至今就用过单例，原型，工厂，模板，策略，最多也就用了个享元模式","like_count":0},{"had_liked":false,"id":148489,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1573017950,"is_pvip":false,"replies":[{"id":"57175","content":"加餐文章有讲到 别急","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573025689,"ip_address":"","comment_id":148489,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573017950","product_id":100039001,"comment_content":"设计模式的重要性不用多说 自己体会就好 但是烂代码真的很神烦 老师 现在刚接触一个项目 我个人感觉写的蛮烂的 开发起来各种坑 迭代时间紧 请问 怎么破","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473509,"discussion_content":"加餐文章有讲到 别急","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573025689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148488,"user_name":"慕容引刀","can_delete":false,"product_type":"c1","uid":1016308,"ip_address":"","ucode":"714E94AEB42D7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/f4/d92c7ef5.jpg","comment_is_top":false,"comment_ctime":1573017850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573017850","product_id":100039001,"comment_content":"最常见的就是代码中无数的if else else else else。。。，模板模式或策略模式都可以帮助解决。","like_count":0},{"had_liked":false,"id":148484,"user_name":"阿童木","can_delete":false,"product_type":"c1","uid":1148479,"ip_address":"","ucode":"90B3294D6ED984","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/3f/b1d64e5a.jpg","comment_is_top":false,"comment_ctime":1573017044,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573017044","product_id":100039001,"comment_content":"1、展现自身能力的利器<br>2、评判他人的原则标准","like_count":0},{"had_liked":false,"id":148473,"user_name":"闪耀之作r","can_delete":false,"product_type":"c1","uid":1712458,"ip_address":"","ucode":"11929B7EF47D4B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/21/4a/05c36143.jpg","comment_is_top":false,"comment_ctime":1573014982,"is_pvip":false,"replies":[{"id":"57176","content":"现在学最好，会编程即可。两者不需要结合。不需要单独学，设计模式跟编程语言没太大关系。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573026332,"ip_address":"","comment_id":148473,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573014982","product_id":100039001,"comment_content":"设计模式什么时候学最好？需要什么基础，有先后顺序分吗？数据结构与算法怎么和设计模式相结合，设计模式不只是java才有，其他的也有，其他的都需要单独学习吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473502,"discussion_content":"现在学最好，会编程即可。两者不需要结合。不需要单独学，设计模式跟编程语言没太大关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573026332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148464,"user_name":"hao-kuai","can_delete":false,"product_type":"c1","uid":1272354,"ip_address":"","ucode":"DFDFDDDBA4503C","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/22/527904b2.jpg","comment_is_top":false,"comment_ctime":1573012035,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573012035","product_id":100039001,"comment_content":"理解：<br>个人感觉设计模式是前辈们在应对某一类问题时候总结出来的最佳实践，类似于数学公式，你可以不用，但是用了能够提升效率<br>重要性：<br>1、设计模式是最佳实践，可以帮你大概率规避不必要坑<br>2、设计模式提供了方法论、一个工具，面对一个问题提供了一个切入点<br>3、设计模式能够促使你做好功能划分、功能边界，方便以后的扩展、问题定位<br>4、设计模式同时还提供了程序员们沟通的术语，可以不言而喻<br>使用经验：<br>本身是OC语言的iOS开发，最主要的UIApplcation类就是单例，最常见的页面UIViewController是遵守MVC，最基本的页面元素UIView应用了工厂设计模式，最熟悉的UITableView用了委托代理；后来接触React前端框架接触类MVVM，它使用组合替换了继承；开发过程中在框架中进行业务开发，设计模式到处都是。","like_count":0},{"had_liked":false,"id":148444,"user_name":"改变自己@","can_delete":false,"product_type":"c1","uid":1582711,"ip_address":"","ucode":"87184DEA07D68B","user_header":"https://static001.geekbang.org/account/avatar/00/18/26/77/ddbad55b.jpg","comment_is_top":false,"comment_ctime":1573008139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573008139","product_id":100039001,"comment_content":"之前学了一遍设计模式，感觉学完之后，有种强行使用的感觉，遇见问题所有的模式拿来套用一下，解决问题感觉没有针对性，不能很好的解决问题。","like_count":0},{"had_liked":false,"id":148435,"user_name":"钢！","can_delete":false,"product_type":"c1","uid":1246834,"ip_address":"","ucode":"22155C1F87AC72","user_header":"https://static001.geekbang.org/account/avatar/00/13/06/72/d5b570e1.jpg","comment_is_top":false,"comment_ctime":1573006970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573006970","product_id":100039001,"comment_content":"自己都不愿意看自己写的流水线式代码，学学设计模式让自己的代码更优雅，易扩展。","like_count":0},{"had_liked":false,"id":148431,"user_name":"攀登者","can_delete":false,"product_type":"c1","uid":1074549,"ip_address":"","ucode":"FC26A8AC504C5E","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/75/9c0b9b5b.jpg","comment_is_top":false,"comment_ctime":1573006342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573006342","product_id":100039001,"comment_content":"20191106 常用有单例、工厂、代理等，没有仔细分析过","like_count":0},{"had_liked":false,"id":148421,"user_name":"搅局","can_delete":false,"product_type":"c1","uid":1733851,"ip_address":"","ucode":"5664F01ADDAA37","user_header":"https://static001.geekbang.org/account/avatar/00/1a/74/db/164c9f7b.jpg","comment_is_top":false,"comment_ctime":1573005544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573005544","product_id":100039001,"comment_content":"1. 聊一聊你对设计模式相关知识的重要性的看法；<br>作为一个编程小白，自己目前的水平停留在项目能跑。不能很好的抽象MVC，很多代码都堆在 Controller 文件中，动辄1000行代码，代码维护费时费力。想要 Clean Code 却无从下手。<br><br>希望再学习了设计模式之后，可以盖出结构化现代化的房子，高效、简洁、去除不必要的耦合，告别茅草屋。<br><br>2. 在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>无。","like_count":0},{"had_liked":false,"id":148420,"user_name":"摸爬滚打三十年","can_delete":false,"product_type":"c1","uid":1240241,"ip_address":"","ucode":"764A7F920EC304","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/b1/d790b927.jpg","comment_is_top":false,"comment_ctime":1573005502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573005502","product_id":100039001,"comment_content":"现在在做支付中台的项目，我个人负责支付路由这块。前期调研，支付路由有很多影响因素，比如:支付限额，费率，支付通道，营销策略，渠道类型，卡类型、商户类型、资金寸头等众多因素的影响。自己不想写一坨 if else 看起来很low 的代码。自己对设计模式也不熟练，应该如何抽象，应该建哪些类，是写接口还是类，类之间的关系等发面一筹莫展，感觉像无头苍蝇。希望通过老师的课程找到灵感，写出高质量的代码。也希望留言区的大牛们多多指点。","like_count":0},{"had_liked":false,"id":148411,"user_name":"夜空咏叹调","can_delete":false,"product_type":"c1","uid":1189074,"ip_address":"","ucode":"CC9350BCF218CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d2/a5e272ce.jpg","comment_is_top":false,"comment_ctime":1573004470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573004470","product_id":100039001,"comment_content":"问题一:设计模式和代码在实现层有点类似数据结构和算法，设计模式就是算法的一个放大吧，只是算法是针对的数据结构，设计模式是针对的整个程序。不知道理解的对不对，如果有不正确的地方请指出。<br>问题二:说来惭愧，写了多年代码，其实也就用到了单例模式，其他设计模式要么不理解，不会用，要么觉得用不到，单例使用的场景是代码中有一个资源会重复创建初始化，但是其实这个资源完全可以共用，没必要每次创建，为避免资源浪费采用的。","like_count":0},{"had_liked":false,"id":148394,"user_name":"菡萏如佳人","can_delete":false,"product_type":"c1","uid":1002849,"ip_address":"","ucode":"8DC3B29C9D2049","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/61/48b65197.jpg","comment_is_top":false,"comment_ctime":1573002006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573002006","product_id":100039001,"comment_content":"200多个真实项目.....光这一点理由就值得订阅了","like_count":0},{"had_liked":false,"id":148384,"user_name":"geeklyc","can_delete":false,"product_type":"c1","uid":1264061,"ip_address":"","ucode":"F25441AB6433B3","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/bd/ae37990b.jpg","comment_is_top":false,"comment_ctime":1573000850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573000850","product_id":100039001,"comment_content":"一直觉得设计很重要，不论是架构、拓展、可读性等。设计模式的书看过几本书，一看觉得会，一用就不会，平常也只能照葫芦画瓢写一点常用的设计模式，但是不知道怎么灵活应用到日常开发，还需要老师多多指点。","like_count":0},{"had_liked":false,"id":148366,"user_name":"davidzhou","can_delete":false,"product_type":"c1","uid":1018904,"ip_address":"","ucode":"F4B2929F4111DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/18/7cbc34eb.jpg","comment_is_top":false,"comment_ctime":1572999187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572999187","product_id":100039001,"comment_content":"项目当中见过滥用单例模式的，类中实现的接口都是用完就可以释放的，都会创建单例来一直持有这个对象","like_count":0},{"had_liked":false,"id":148359,"user_name":"Chen","can_delete":false,"product_type":"c1","uid":1503113,"ip_address":"","ucode":"C1128558AB5BC4","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/89/8c73a24d.jpg","comment_is_top":false,"comment_ctime":1572998556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572998556","product_id":100039001,"comment_content":"每次在修复bug，或者增加功能时看到自己的代码都不忍直视😂，我觉得学习设计模式能改变这种现状。<br>目前项目中只会用单例，构建者设计模式。","like_count":0},{"had_liked":false,"id":148349,"user_name":"M.O(∩_∩)O","can_delete":false,"product_type":"c1","uid":1498641,"ip_address":"","ucode":"B245C2BA20DDA8","user_header":"https://static001.geekbang.org/account/avatar/00/16/de/11/72f96304.jpg","comment_is_top":false,"comment_ctime":1572996208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572996208","product_id":100039001,"comment_content":"我为什么想学设计模式，在于它能使我代码实现更优雅<br><br>之前用过策略模式，但是依葫芦画瓢而已<br><br>","like_count":0},{"had_liked":false,"id":148292,"user_name":"拉格朗日的忧桑","can_delete":false,"product_type":"c1","uid":1312991,"ip_address":"","ucode":"5FCB2C6616E113","user_header":"https://static001.geekbang.org/account/avatar/00/14/08/df/4e5c2b29.jpg","comment_is_top":false,"comment_ctime":1572968934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572968934","product_id":100039001,"comment_content":"是看懂优秀开源项目的基石。<br>在实际项目中使用工厂模式、策略模式、享元模式解决不同奖品发放逻辑不同的问题，使修改封闭","like_count":0},{"had_liked":false,"id":148286,"user_name":"宝宝疯","can_delete":false,"product_type":"c1","uid":1026637,"ip_address":"","ucode":"D86F5A645FE61B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/4d/c7df89bf.jpg","comment_is_top":false,"comment_ctime":1572968161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572968161","product_id":100039001,"comment_content":"写简单的业务代码很少会用到设计模式，但是如果想要代码能够拥有更好的通用性和扩展性，想要编写更简洁的代码，设计模式是绕不过去的，这也是区分初级程序员和高级程序员的标志。<br><br>期待跟随老师一起学习，写出更好的作品。","like_count":0},{"had_liked":false,"id":148280,"user_name":"Geek_b2b094","can_delete":false,"product_type":"c1","uid":1614162,"ip_address":"","ucode":"AA93C54D8D7980","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/k5r6L01rTcMNbungWUPxq7ZkfEas5uy4rFpxnzCRadIDAQGpQfzLSUbLicqZUgoplia0Vhia4twtia6827iafAevbog/132","comment_is_top":false,"comment_ctime":1572967532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572967532","product_id":100039001,"comment_content":"重构系统这个深有体会。最近被调去维护个n年前的系统，代码基本不能看，一个类写了几千行，一个方法上千行。有的表上百个字段。。基本只能推倒重做","like_count":0},{"had_liked":false,"id":148275,"user_name":"鲸勿落","can_delete":false,"product_type":"c1","uid":1377859,"ip_address":"","ucode":"4F45D62F85491D","user_header":"https://static001.geekbang.org/account/avatar/00/15/06/43/0e5a3bf7.jpg","comment_is_top":false,"comment_ctime":1572966904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572966904","product_id":100039001,"comment_content":"前段时间去面试就问到了发布-订阅模式","like_count":0},{"had_liked":false,"id":148266,"user_name":"Andy Jiang","can_delete":false,"product_type":"c1","uid":1227279,"ip_address":"","ucode":"436609A0A445CF","user_header":"https://static001.geekbang.org/account/avatar/00/12/ba/0f/9789c2cc.jpg","comment_is_top":false,"comment_ctime":1572965967,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572965967","product_id":100039001,"comment_content":"1. 平时工作中很少用到设计模式，最多的就是抽出公共组件，方便复用<br>2. 之前也看过一些设计模式的书籍和文章，但是一段时间不接触就忘了差不多了","like_count":0},{"had_liked":false,"id":148257,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1572964947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572964947","product_id":100039001,"comment_content":"用刻意练习里的概念，就是要建立设计模式的心理表征","like_count":0},{"had_liked":false,"id":148249,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1572963836,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572963836","product_id":100039001,"comment_content":"1. 问题一：理解设计模式的时候看一些开源项目的代码就一种被验证的感觉。目前市面上的书都偏demo，缺少真是项目的例子，也是我想一直搞的。老师很多说到心坎里面了。<br>2. 期望具体的设计模式讲解能提供对应开源代码的链接。<br>3. 问题二：实际使用的设计模式很多，但对于初学者，工厂模式，代理模式，单例模式，构建者模式，模板模式，策略模式是基本能力，而且可以在实际中经常用到。","like_count":0},{"had_liked":false,"id":148247,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":1172544,"ip_address":"","ucode":"BD0196DC43904B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK6tjf32L6g7icarqaVfmDdTxx9X6mfDibFfCLnaguLQVkKstImePyNwSKQVqC7PbeGLkVnLjan3obQ/132","comment_is_top":false,"comment_ctime":1572963423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572963423","product_id":100039001,"comment_content":"问设计模式就是单例和工厂模式😬","like_count":0},{"had_liked":false,"id":148246,"user_name":"pan","can_delete":false,"product_type":"c1","uid":1439228,"ip_address":"","ucode":"7C95D66C95E1BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1iaykDMsDvUbd13DxewFGibSExGyNyzmHK8cciam9EH9RRWbhfSgMDPIbGP5hfe9hX0uTEkybhmic3fdpYVHXmRpJg/132","comment_is_top":false,"comment_ctime":1572963087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572963087","product_id":100039001,"comment_content":"近期最大的感受就是1.看开源代码的时候，觉得它是用了什么设计模式的，但是由于不熟练，就没法完全Get.<br>2.面试的时候，确实设计模式是一个考点，自己还是没法说出所以然.<br>3.最近自己设计系统实现的时候，想要抽象，但是还停留在很简单的一层抽象上，感觉可以用的工具有点少.","like_count":0},{"had_liked":false,"id":148245,"user_name":"漩涡鸣人","can_delete":false,"product_type":"c1","uid":1108346,"ip_address":"","ucode":"A39A8D88BFB125","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/7a/f5246858.jpg","comment_is_top":false,"comment_ctime":1572962832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572962832","product_id":100039001,"comment_content":"用不到不代表没用  自有其真意","like_count":0},{"had_liked":false,"id":148235,"user_name":"郁方林","can_delete":false,"product_type":"c1","uid":1130275,"ip_address":"","ucode":"8ABEAFDA815DDE","user_header":"https://static001.geekbang.org/account/avatar/00/11/3f/23/8ff389d2.jpg","comment_is_top":false,"comment_ctime":1572961409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572961409","product_id":100039001,"comment_content":"默默打卡，加油，不负青春，不负自己","like_count":0},{"had_liked":false,"id":148230,"user_name":"Geek_Spring","can_delete":false,"product_type":"c1","uid":1292572,"ip_address":"","ucode":"3F44EE152CB357","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erRavHNiaicxIIq5Pal1iadE4axG6ibbib6llpHBslhiahWDQ6tdE1IcWicFogfvuyfGoiayC51knA09UtQvQ/132","comment_is_top":false,"comment_ctime":1572961115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572961115","product_id":100039001,"comment_content":"1.设计模式的重要性<br>    面对某优秀的开源框架，看的时候觉得很抽象，看完之后，完全没有get到设计的精髓，感觉白白的看了一遍<br>    面对业务上的烂代码，真的很想去重构，但是会的就那么几个设计模式，无能为力<br>2.曾经用过的设计模式<br>\t策略模式，工厂模式 一起用的时候解决了N多的IF ELSE，用完之后真的很爽<br><br>但是还是很浅的在使用设计模式希望能够继续努力啊","like_count":0},{"had_liked":false,"id":148229,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1572961086,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1572961086","product_id":100039001,"comment_content":"要想写出易于维护和扩展的软件，设计模式很重要，也对后续加入的工程师友好，更有利于代码的维护和可扩展性。<br>设计模式本身是从实践中总结出来的，所以也要灵活使用，基本上大部分的设计模式都遇到过，但是还有很多不熟练，有的时候想不到相关的模式，希望后面能多多锻炼","like_count":0},{"had_liked":false,"id":148217,"user_name":"雨季不再来","can_delete":false,"product_type":"c1","uid":1731625,"ip_address":"","ucode":"74DBBB8E525067","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6c/29/38ddc1ce.jpg","comment_is_top":false,"comment_ctime":1572959774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572959774","product_id":100039001,"comment_content":"问题1.我觉得特别重要！<br>问题2.大学未毕业，实习中，没有用到过","like_count":0},{"had_liked":false,"id":148214,"user_name":"张迪","can_delete":false,"product_type":"c1","uid":1104835,"ip_address":"","ucode":"6A5D44999A0FEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/c3/e11adfe8.jpg","comment_is_top":false,"comment_ctime":1572959068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572959068","product_id":100039001,"comment_content":"1，设计模式能写出可扩展高质量的代码<br>2，工厂方法，策略模式，构造者模式","like_count":0},{"had_liked":false,"id":148213,"user_name":"GalGadot朵吧","can_delete":false,"product_type":"c1","uid":1424031,"ip_address":"","ucode":"3CAA4A6955CBC4","user_header":"https://static001.geekbang.org/account/avatar/00/15/ba/9f/6ad2cd71.jpg","comment_is_top":false,"comment_ctime":1572958975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572958975","product_id":100039001,"comment_content":"跟上学习八个月","like_count":0},{"had_liked":false,"id":148209,"user_name":"肖大妞","can_delete":false,"product_type":"c1","uid":1426644,"ip_address":"","ucode":"2AD2F8684FDCF8","user_header":"https://static001.geekbang.org/account/avatar/00/15/c4/d4/5c8fb1cb.jpg","comment_is_top":false,"comment_ctime":1572958349,"is_pvip":false,"replies":[{"id":"57180","content":"别急 慢慢学 学完你就知道了","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573027177,"ip_address":"","comment_id":148209,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572958349","product_id":100039001,"comment_content":"设计模式用过一些，单例，代理，责任链，装饰者模式等，但是一直没有get到设计模式的优点，难道就只是为了方便代码扩展，让人容易看懂？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473432,"discussion_content":"别急 慢慢学 学完你就知道了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573027177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148187,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1572956191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572956191","product_id":100039001,"comment_content":"1 设计模式很确实很重要，读了这篇文章才发现读不下去Spring源码是因为基础太差，没有掌握设计模式<br>2 工作证用到的有：单例、工厂、发布订阅、代理、门面等。但没有特别复杂的业务场景，没有为实现一个功能组合使用多种设计模式。","like_count":0},{"had_liked":false,"id":148184,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1572955624,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1572955624","product_id":100039001,"comment_content":"看源码看不懂？理解不到精髓？那是你基础功不够扎实。这句话太扎心了，不够也的确是这样的，学习好设计模式","like_count":0},{"had_liked":false,"id":148161,"user_name":"jkhcw","can_delete":false,"product_type":"c1","uid":1324237,"ip_address":"","ucode":"300F1FEAEA9EB4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/EvqrQ1wMs4SzC8dSBjAfVdEZ3yDT0bDUMicfRLq6BOSzjGFhCownt3S5MERXLpOpLmyJXCuyWbeOQG3ibzy0b4ibA/132","comment_is_top":false,"comment_ctime":1572953084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572953084","product_id":100039001,"comment_content":"适配器模式很有用","like_count":0},{"had_liked":false,"id":148156,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1572951972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572951972","product_id":100039001,"comment_content":"设计模式能让我们的日常工作产生复利效应，如果没有设计模式的概念，除了最初熟练度增加，后面利率趋近于零，而设计模式相当于提高了利率，能让我们不断成长！","like_count":0},{"had_liked":false,"id":148153,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1572950530,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572950530","product_id":100039001,"comment_content":"对于设计模式的重要性，我认为在编码中如果能适当合理的运用设计模式，那无疑会为我们后期的维护(增加新需求)带来极大的便利，易读、可扩展性高的代码能够省下不少开发时间，同时提升开发效率。<br>对于设计模式的运用，运用过简单工厂模式，运用在收集系统资源信息的场景中，针对传入不同资源name以及资源json数据转换为相应资源对象，运用多态思想，分别调用不同资源的持久化逻辑，完成存储。优化之后，代码逻辑更清晰，可读性更强","like_count":0},{"had_liked":false,"id":148145,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1572948368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572948368","product_id":100039001,"comment_content":"身为编码者，有责任与义务写出漂亮代码，有义务与责任恶心垃圾代码！O(∩_∩)O哈哈~","like_count":0},{"had_liked":false,"id":148139,"user_name":"秋晓浦","can_delete":false,"product_type":"c1","uid":1448198,"ip_address":"","ucode":"7B98E05B472990","user_header":"https://static001.geekbang.org/account/avatar/00/16/19/06/fc2f127b.jpg","comment_is_top":false,"comment_ctime":1572947449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572947449","product_id":100039001,"comment_content":"使用angular 开发,只用过单例 观察者模式","like_count":0},{"had_liked":false,"id":148111,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1572942991,"is_pvip":false,"replies":[{"id":"57501","content":"那也不是。你可以不必非得将他们联系在一起，可以独立的看待","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573287454,"ip_address":"","comment_id":148111,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572942991","product_id":100039001,"comment_content":"理不清楚面向对象设计7个原则之间关系，好像每条说的都很有道理，24种设计模式是对这个7个原则的从不同方面给出的解决方案吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473399,"discussion_content":"那也不是。你可以不必非得将他们联系在一起，可以独立的看待","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573287454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148105,"user_name":"胖🐯","can_delete":false,"product_type":"c1","uid":1732966,"ip_address":"","ucode":"FB6EA96A335846","user_header":"https://static001.geekbang.org/account/avatar/00/1a/71/66/087de1c6.jpg","comment_is_top":false,"comment_ctime":1572941873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572941873","product_id":100039001,"comment_content":"设计模式就是一些技术大牛千百年来开发生涯中的用于解决一些相同问题而总结的一些牛逼的经验，学习设计模式不仅可以让自己写出高质量的代码，还能让我们在看大牛代码时候不至于懵逼🙂","like_count":0},{"had_liked":false,"id":148080,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1088687,"ip_address":"","ucode":"17AF8578D6F41F","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/af/05eeb5e9.jpg","comment_is_top":false,"comment_ctime":1572938502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572938502","product_id":100039001,"comment_content":"印象比较深刻的是工作的头几年，因为没有很好的编码习惯，也没有相应的学习，导致写出的代码又烂又臭，没有很好的做到高内聚低耦合，也没有把通用的模块和功能进行封装的能力，就像争哥所说，看很多高质量源码由于代码和类比较多，看一会就不知所向。随着工作时间的增长，编码能力也在努力提高中，比如做简单的组件、封装、看源码等，但是增长也仅限于此，还不具备编写高质量代码和高质量第三方库的能力，希望通过学习设计模式能够进一步提升自己在此两项的能力。","like_count":0},{"had_liked":false,"id":148076,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1572937626,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572937626","product_id":100039001,"comment_content":"现在项目代码最让人头疼的是：增加或修改业务逻辑，就像伤筋动骨一般（代码耦合度高），需要大改并重新测试。费时费力，而且还不一定能做好。我总觉得这不是一种工程手段，想来其他工程也不像这样总是推倒重来呀！我学习设计模式就是为了避免上述情况的再次发生。我就觉得通过这篇课程，我可以写出可维护、易扩展、耦合度低的代码，让工作更具深度和价值。<br><br>文中的一段话我感同身受：『早点去学习，以后的项目就都可以拿来锻炼，每写一行代码都是对内功的利用和加深，是可以受益一整个职业生涯的事情。』像滚雪球一般，让自己越来越强大！<br><br>工程实践中用得较多的是：<br>* 单例模式，比如对于蓝牙模块的控制管理类，抽象单例管理整个模块的功能流程；<br>* 观察者模式，实现异步回调。","like_count":0},{"had_liked":false,"id":148062,"user_name":"君不得闲","can_delete":false,"product_type":"c1","uid":1101581,"ip_address":"","ucode":"718AA2C9B410BB","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/0d/f4150547.jpg","comment_is_top":false,"comment_ctime":1572935164,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1572935164","product_id":100039001,"comment_content":"学习设计模式就是个磨刀的过程，越早的磨砺，之后得到的收益就更大。<br>应对面试时得心应手，谈工资时理直气壮。<br>写代码时成就满满，维护代码时一气呵成。<br>阅读源码和理解框架更容易理解作者所想要表达的思想。<br>思想的碰撞才能更好地进步。<br>最后完全不怕锅从天降。<br>","like_count":0},{"had_liked":false,"id":148057,"user_name":"路上有只🦅","can_delete":false,"product_type":"c1","uid":1691085,"ip_address":"","ucode":"3E5B365A273D73","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/MJIYyZ54UmgSmsXGzfGUsVTiaHRib1VSStrRJY2cnwNwtjSI06ke1hibYxQFoj46pysFqmxILM71Ry9nD2jPDJHww/132","comment_is_top":false,"comment_ctime":1572933704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572933704","product_id":100039001,"comment_content":"1.学设计模式可以写出更健壮优雅的代码，优雅的代码让人赏心悦目，哈哈；<br>2.有用过职责链模式，不过是项目组的大牛写的，不是很明白它的作用和原理，相信跟着争哥学完设计模式后，一定会明白。","like_count":0},{"had_liked":false,"id":148052,"user_name":"power","can_delete":false,"product_type":"c1","uid":1455616,"ip_address":"","ucode":"8FCE95CAB092C3","user_header":"https://static001.geekbang.org/account/avatar/00/16/36/00/0e79c1f1.jpg","comment_is_top":false,"comment_ctime":1572932978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572932978","product_id":100039001,"comment_content":"工厂，单例","like_count":0},{"had_liked":false,"id":148050,"user_name":"一切顺其自然","can_delete":false,"product_type":"c1","uid":1014580,"ip_address":"","ucode":"D477D471F46BAC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/34/5fc2e9de.jpg","comment_is_top":false,"comment_ctime":1572932902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572932902","product_id":100039001,"comment_content":"1.聊一聊你对设计模式相关知识的重要性的看法；<br>当不了解设计模式的时候，写代码就像砌砖头；当了解了设计模式之后，你就是盖房子了，先有了房子的框架，再往里面砌砖头。<br>2.在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>用到的设计模式基本上也是最常见的那些，单例，观察者，工厂，代理，策略等等。在使用过程中思考的比较少，觉得哪个用着方便就用哪个。","like_count":0},{"had_liked":false,"id":148042,"user_name":"Tom.G","can_delete":false,"product_type":"c1","uid":1206034,"ip_address":"","ucode":"7929B45C1A51F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","comment_is_top":false,"comment_ctime":1572932476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572932476","product_id":100039001,"comment_content":"1.设计模式是基本功，是编写高质量代码的基础，熟练掌握设计模式可以开发出易于维护、扩展的代码。对于阅读他人优秀代码也是很有帮助的。<br>2.单例模式，桌面开发用户相关信息读取，用户信息无需重复读取，直接使用；模板方法，固定的流程抽象细节，重写具体的细节达到代码复用效果；观察者模式，对象变化引起另一个对象变化，降低对象间耦合","like_count":0},{"had_liked":false,"id":148039,"user_name":"火力全开","can_delete":false,"product_type":"c1","uid":1412220,"ip_address":"","ucode":"8CE1733A2F618C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","comment_is_top":false,"comment_ctime":1572932377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572932377","product_id":100039001,"comment_content":"建议作者结合Spring之类的优秀开源项目来讲设计模式，它们当中一定涉及到大量优秀的实践","like_count":0},{"had_liked":false,"id":148037,"user_name":"前端西瓜哥","can_delete":false,"product_type":"c1","uid":1248576,"ip_address":"","ucode":"150130C34CD1C1","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/40/f70e5653.jpg","comment_is_top":false,"comment_ctime":1572931604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572931604","product_id":100039001,"comment_content":"我是一名web前端，上家公司做svg编辑器，实现撤回重做功能，用到了命令模式。","like_count":0},{"had_liked":false,"id":148036,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1572931309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572931309","product_id":100039001,"comment_content":"前几天leader跟我聊到工厂模式，我表示一脸懵比，然后被吐槽了…准备学好了再回去虐他，哈哈哈","like_count":0},{"had_liked":false,"id":148032,"user_name":"Kearmy","can_delete":false,"product_type":"c1","uid":1204459,"ip_address":"","ucode":"F9C26C4DB71EC2","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/eb/d75e59df.jpg","comment_is_top":false,"comment_ctime":1572930817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572930817","product_id":100039001,"comment_content":"为了面试才了解到的单例模式，工厂模式","like_count":0},{"had_liked":false,"id":148021,"user_name":"OlafOO","can_delete":false,"product_type":"c1","uid":1019254,"ip_address":"","ucode":"105F8B194ED37B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/76/994a9929.jpg","comment_is_top":false,"comment_ctime":1572929571,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572929571","product_id":100039001,"comment_content":"设计模式我理解是代码解耦，模块化，服务化的一套抽象出来的方法论。<br>最近有用过策略模式优化ifelse<br>面试中比较常问的有单例，比如双重校验下的单例为什么要用volatile，其实和设计模式无关，但是设计模式真的很考验研发的知识面和理解。<br>老师说的能力不足以看懂源码，我个人觉得确实是这样，以前看源码时候看不懂，一直很怕。最近开始发现能慢慢看懂一点点了，还是不能着急不要害怕，慢慢来！","like_count":0},{"had_liked":false,"id":148019,"user_name":"董宗磊","can_delete":false,"product_type":"c1","uid":1095445,"ip_address":"","ucode":"D7005A328BC2EE","user_header":"https://static001.geekbang.org/account/avatar/00/10/b7/15/6a2b6b83.jpg","comment_is_top":false,"comment_ctime":1572929520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572929520","product_id":100039001,"comment_content":"单例，工厂，观察者，策略，模板","like_count":0},{"had_liked":false,"id":148018,"user_name":"Sisyphus235","can_delete":false,"product_type":"c1","uid":1366359,"ip_address":"","ucode":"829CC4CE0FA96E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ooZCPFY1xgC81h0Eu3vuqbWG5MaBp8RNmvXXGQwupo2LpSOLq0rBlTDRAF1yM6wF09WdeG49rA9dJSVKIUBxnQ/132","comment_is_top":false,"comment_ctime":1572929518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572929518","product_id":100039001,"comment_content":"代码就像是对现实世界人物的逻辑抽象，设计模式是对代码的逻辑抽象，有点像学问的学问。<br>印象比较深的是单例模式，对人物进行分配的时候，只能有一个分配器，所以做了一个单例，保证信息是准确的。","like_count":0},{"had_liked":false,"id":148005,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1572927310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572927310","product_id":100039001,"comment_content":"没有啥经验的在校生，说说自己的看法：<br>1.为了更好的准备面试<br>2.看一些框架源码得时候，自己直接看是啃不动的。我想好的框架应该遵循乐设计模式的吧～所以这得学习啊<br>3.渴望自己能写出好的代码","like_count":0},{"had_liked":false,"id":148001,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1572926599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572926599","product_id":100039001,"comment_content":"学习了设计模式不仅对阅读源码有帮助，也对面试有帮助，更对自己的内功修炼有帮助！打卡。","like_count":0},{"had_liked":false,"id":147958,"user_name":"教授叶抱一","can_delete":false,"product_type":"c1","uid":1434046,"ip_address":"","ucode":"9D759A5F0B9D40","user_header":"https://static001.geekbang.org/account/avatar/00/15/e1/be/61cd263f.jpg","comment_is_top":false,"comment_ctime":1572922415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572922415","product_id":100039001,"comment_content":"总结一下的话，主要有这样五点：应对面试中的设计模式相关问题；告别写被人吐槽的烂代码；提高复杂代码的设计和开发能力；让读源码、学框架事半功倍；为你的职场发展做铺垫。投资要趁早，这样我们才能尽早享受复利。<br>同样，有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读。这样在你后面的生活、工作、学习中，才能一直都发挥作用。不要等到好多年后，看到了，才恍然大悟，后悔没有早点去学、去看。<br>设计模式作为一门与编码、开发有着直接关系的基础知识，是你现在就要开始学习的。早点去学习，以后的项目就都可以拿来锻炼，每写一行代码都是对内功的利用和加深，是可以受益一整个职业生涯的事情。","like_count":0},{"had_liked":false,"id":147945,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1572920803,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572920803","product_id":100039001,"comment_content":"投资现在!","like_count":0},{"had_liked":false,"id":147941,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1079657,"ip_address":"","ucode":"0335277F255F7A","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/69/5960a2af.jpg","comment_is_top":false,"comment_ctime":1572920457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572920457","product_id":100039001,"comment_content":"设计模式的重要性正如老师所说的, 五个方面, 就目前对我而言, 一直想写出高质量的代码, 看过一点重构2,但都感觉不尽如意, 差点什么东西. 设计模式在阅读源码的时候也有很大的帮助, 这个就我平常有时候看源码会卡住也深有体会, 总感觉设计模式一堵很高的强, 怎么都爬不上去.<br><br>工作中从来没用过设计模式, 可能是工作时间短, 10个月不到一年的时间吧, 至少我目前没有写过和设计模式相关的代码.","like_count":0},{"had_liked":false,"id":147934,"user_name":"liliumss","can_delete":false,"product_type":"c1","uid":1333094,"ip_address":"","ucode":"A52AC5042F3115","user_header":"https://static001.geekbang.org/account/avatar/00/14/57/66/e57bdb18.jpg","comment_is_top":false,"comment_ctime":1572920161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572920161","product_id":100039001,"comment_content":"用的比较多的是模板模式和策略模式，遇到多个业务中大流程一样，但是每个步骤的算法不同，就可以用模板模式，把单独的算法下放到子类去实例化，策略模式也是这个思想，抽象出多个业务的相同操作，把算法放到每个子类去实现，除此之外，职责链模式，观察者模式了解，但是用的不多","like_count":0},{"had_liked":false,"id":147929,"user_name":"噗╰_╯噗 ","can_delete":false,"product_type":"c1","uid":1140666,"ip_address":"","ucode":"AFB831EB42256D","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/ba/5a1bd8c9.jpg","comment_is_top":false,"comment_ctime":1572919780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572919780","product_id":100039001,"comment_content":"设计模式是不断提高代码质量，解偶模块依赖，减少重复代码的利器，文中说的很对，设计模式是一个程序员代码能力的重要提现，可惜呀，我这还是一直停留在单例，工厂层面，需要继续加油","like_count":0},{"had_liked":false,"id":147927,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1572919660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572919660","product_id":100039001,"comment_content":"希望能够通过专栏的学习 改造自己的代码，边学边练 加深印象 增加亮点","like_count":0},{"had_liked":false,"id":147920,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1572919301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572919301","product_id":100039001,"comment_content":"日常工作中也用到了一些设计模式，比如业务开发中应用了单例、工厂、观察者等设计模式，通过一些开发包或框架也了解了一些，比如lombok中的build模式，Spring AOP中的代理模式。<br>以上就是了解的一些，自己也手动编码设计过这些，但是总感觉没有站在全局更有效的来思考这些设计模式，希望跟着争哥多学习！","like_count":0},{"had_liked":false,"id":147917,"user_name":"xavier","can_delete":false,"product_type":"c1","uid":1243128,"ip_address":"","ucode":"2F7918EA37ED9F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/f8/3c0a6854.jpg","comment_is_top":false,"comment_ctime":1572919036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572919036","product_id":100039001,"comment_content":"不明白什么是设计模式，只知道掌握设计模式后可写出可扩展、可读、可维护的高质量代码。<br>这正是我所需要的。","like_count":0},{"had_liked":false,"id":147914,"user_name":"shniu","can_delete":false,"product_type":"c1","uid":1019555,"ip_address":"","ucode":"E64CD8BED96D8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/a3/d7e5fe8a.jpg","comment_is_top":false,"comment_ctime":1572918818,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572918818","product_id":100039001,"comment_content":"自己的理解：设计原则，设计模式确实是基本功，指导如何合理可扩展易维护的写程序；只有在设计时有一个全局的把控才能一点点优化出高质量的代码，自己也非常看重这方面的能力，在团队中合作做事情这更是必不可少的，能大大提高工作效率；唯一的问题是在实际工作中获取到的指点几乎为零，很难有实质性的提高。认为最大的好处是可以解耦合，模块化，职责分离清晰，更好的扩展性等<br><br>接触和用到过的设计模式：<br>单例模式，比如全局配置文件对象，Spring的单例bean等<br>观察者模式：消息的发布订阅等<br>代理模式：AOP；在调用多个三方服务时使用代理来屏蔽调用细节<br>等","like_count":0},{"had_liked":false,"id":147910,"user_name":"iamcopper","can_delete":false,"product_type":"c1","uid":1405888,"ip_address":"","ucode":"39ACD56AE99DBF","user_header":"https://static001.geekbang.org/account/avatar/00/15/73/c0/e440cb9c.jpg","comment_is_top":false,"comment_ctime":1572918653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572918653","product_id":100039001,"comment_content":"一直自认为自己的代码能力还不错，日常工作中也能看得出好代码与烂代码。但让自己来设计接口框架时，又觉得力不从心，不知道从何做起，很早也就意识到自己需要在代码设计上有提高，我想这正是设计模式所能解决的问题，也正是我所欠缺的。","like_count":0},{"had_liked":false,"id":147899,"user_name":"辉仔lovers","can_delete":false,"product_type":"c1","uid":1210219,"ip_address":"","ucode":"3DC5B0CD0B8E71","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLVhJRVwJ0eVlC7zjNfWP6PP7VmUkF1X2m6qfh7Wic3NhAOz2fSGibF6LXLcJ59zOz7nBpCcByvtFjw/132","comment_is_top":false,"comment_ctime":1572917984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572917984","product_id":100039001,"comment_content":"1.学习了设计模式才能看源码的时候，了解到作者的精髓。而不是看热闹<br>2.平常对于一些if判断，会尝试着使用策略模式来提高扩展性和维护性。用的最多的是模板方法，定义一个抽象类。将一些共有的方法定义在抽象类中。","like_count":0},{"had_liked":false,"id":147892,"user_name":"fmouse","can_delete":false,"product_type":"c1","uid":1202325,"ip_address":"","ucode":"9A8858CFFAB858","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/95/640b6465.jpg","comment_is_top":false,"comment_ctime":1572917490,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1572917490","product_id":100039001,"comment_content":"看过些设计模式，当时难理解，都是些理论，知道这些理论是实践得出的，难于如何在开发中很好的运用，时间一长大部分都忘记。","like_count":0},{"had_liked":false,"id":147889,"user_name":"骡子看书","can_delete":false,"product_type":"c1","uid":1358287,"ip_address":"","ucode":"0BAFD7E0D10841","user_header":"https://static001.geekbang.org/account/avatar/00/14/b9/cf/21fef111.jpg","comment_is_top":false,"comment_ctime":1572917363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572917363","product_id":100039001,"comment_content":"是该自己写写代码了。","like_count":0},{"had_liked":false,"id":147884,"user_name":"GGL","can_delete":false,"product_type":"c1","uid":1215892,"ip_address":"","ucode":"AED10B8248D1E7","user_header":"https://static001.geekbang.org/account/avatar/00/12/8d/94/150dfe78.jpg","comment_is_top":false,"comment_ctime":1572917244,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572917244","product_id":100039001,"comment_content":"iOS 开发，主要用到的是单例模式、观察者模式、代理模式、工厂模式","like_count":0},{"had_liked":false,"id":147881,"user_name":"肥而不腻","can_delete":false,"product_type":"c1","uid":1435246,"ip_address":"","ucode":"3E6786A82A6DD6","user_header":"https://static001.geekbang.org/account/avatar/00/15/e6/6e/062da5e4.jpg","comment_is_top":false,"comment_ctime":1572917021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572917021","product_id":100039001,"comment_content":"希望通过我的努力和贡献，让项目代码能脱离各种复制粘贴","like_count":0},{"had_liked":false,"id":147879,"user_name":"yu🐟","can_delete":false,"product_type":"c1","uid":1181583,"ip_address":"","ucode":"E988567C46539E","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/8f/3ef096f3.jpg","comment_is_top":false,"comment_ctime":1572916721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572916721","product_id":100039001,"comment_content":"单例 原型 模板","like_count":0},{"had_liked":false,"id":147872,"user_name":"Hua100","can_delete":false,"product_type":"c1","uid":1723325,"ip_address":"","ucode":"4E7A749C343E90","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLeKVmTFdR2hQsCaNxxTK8wvnXXBayKLLoITqnbW9yjloAZWU99mOGaf1DkWqM6dol77aER9ickibA/132","comment_is_top":false,"comment_ctime":1572916069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572916069","product_id":100039001,"comment_content":"渣渣表示有为了设计模式课而用过工厂。还得努力！向大牛挺进","like_count":0},{"had_liked":false,"id":147870,"user_name":"龙坤","can_delete":false,"product_type":"c1","uid":1233455,"ip_address":"","ucode":"D1724E68D6304D","user_header":"https://static001.geekbang.org/account/avatar/00/12/d2/2f/04882ff8.jpg","comment_is_top":false,"comment_ctime":1572915722,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1572915722","product_id":100039001,"comment_content":"写过命令设计模式，在封装rest api的时候用过","like_count":0},{"had_liked":false,"id":147867,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1572915239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572915239","product_id":100039001,"comment_content":"1. 做了三年开发越来意识到设计模式的重要性。在读spring源码过程中就能看到诸如模板，工厂，观察者等。不过至今自认为还没能力好好理解。刚毕业去面试时有个面试官就推荐我本书-大话设计模式。那时候只是大概过了一遍，没有深入理解，随着时间流逝有些东西不用也就忘光了。有些遗憾。希望这次跟着大家的脚步把设计模式的基础打牢。<br>2. 用过的设计模式: 单例，简单工厂，策略模式，模版模式。","like_count":0},{"had_liked":false,"id":147860,"user_name":"杜","can_delete":false,"product_type":"c1","uid":1236070,"ip_address":"","ucode":"E372639657C9AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/66/5861451b.jpg","comment_is_top":false,"comment_ctime":1572914682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572914682","product_id":100039001,"comment_content":"之前看过一个视频里提到过，设计模式是程序员专用黑话，非常认可。不懂设计模式，就看不懂别人的代码，又不能写出优雅高质量的代码让别人欣赏。其实设计模式说白了，就是行业在几十年沉淀的套路吧。","like_count":0},{"had_liked":false,"id":147854,"user_name":"古古惑惑","can_delete":false,"product_type":"c1","uid":1039710,"ip_address":"","ucode":"37724A018564FF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/5e/2354204d.jpg","comment_is_top":false,"comment_ctime":1572914222,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572914222","product_id":100039001,"comment_content":"设计模式有利于写出维护性好，扩展性强的代码，需要好好学习","like_count":0},{"had_liked":false,"id":147851,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1572914095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572914095","product_id":100039001,"comment_content":"打卡<br>工作中用到过一些设计模式，最常用的是单例模式，但是后来发现，经常会为了设计模式而设计模式，自己都不知道最好的用什么模式，为了让代码看起来高大上而乱用设计模式，相信跟着王大佬学习下来定会有所成长","like_count":0},{"had_liked":false,"id":147841,"user_name":"chdy","can_delete":false,"product_type":"c1","uid":1262881,"ip_address":"","ucode":"F3FDA58F445CC1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLfsEsaDzp8TqSsymPoqOgo1n5oFK8iaajGeUNPxnVjpmDAibyIic9Hhj72yOVY1wpKrib8eyQa070Wkw/132","comment_is_top":false,"comment_ctime":1572913140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572913140","product_id":100039001,"comment_content":"设计模式之于研发恰如伤寒论之于中医，欲为上工，非熟诵不可。<br>起初正是研读开源框架才了解一些，遗憾的是虎头蛇尾，一直未能细细品味。<br>在项目中的应用更是少之又少，一是多半使用框架，二是会的人也少。接过别人的代码一看，也就保持一致吧。工作中能有几次是从零开始的新项目。学习她，只为在自己的代码天地里施展一番","like_count":0},{"had_liked":false,"id":147840,"user_name":"dw靖","can_delete":false,"product_type":"c1","uid":1185977,"ip_address":"","ucode":"F6C60B1E3777FC","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b9/de606b05.jpg","comment_is_top":false,"comment_ctime":1572913095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572913095","product_id":100039001,"comment_content":"使用过 抽象方法模式 策略模式 单例 责任链 ","like_count":0},{"had_liked":false,"id":147830,"user_name":"小北","can_delete":false,"product_type":"c1","uid":1120156,"ip_address":"","ucode":"A428FC9B771108","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ercic1LB9N9P1kArjS1f3hOo641elcwFGHWrxeYF4yZjfwiaydLwVeM4ZJEmVkib66GtJoE0cr6Dviauw/132","comment_is_top":false,"comment_ctime":1572912140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572912140","product_id":100039001,"comment_content":"1.设计模式本质上就是代码最佳设计经验的总结，站到一个更高的角度，抽象并用最佳方案实现业务逻辑，来保证代码的健壮、优雅、可扩展、可维护，而不是单纯的CRUD。设计模式掌握的深浅是高阶和低阶工程师的重要区别。<br>2.在具体工作中大部分情况下已经有同学做好了框架，只需要在框架中写业务逻辑，即小争哥说的“翻译业务逻辑”，真正用到设计模式的机会比较少，接触最多的是单例和工厂模式，但实际上对设计模式的理解和体会并不深。希望通过专栏学习加深理解，并熟练掌握设计模式的运用，做一名优秀的工程师而不是搬砖的码农。","like_count":0},{"had_liked":false,"id":147813,"user_name":"冰糕不冰","can_delete":false,"product_type":"c1","uid":1134761,"ip_address":"","ucode":"B754FE464BA426","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","comment_is_top":false,"comment_ctime":1572909792,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572909792","product_id":100039001,"comment_content":"1.设计模式我感觉很重要！好的设计模式能让代码提高重用性，避免后续修改破坏原本代码结构。<br>2.用过的设计模式包括工厂模式，代理模式，策略模式。","like_count":0},{"had_liked":false,"id":147809,"user_name":"傅君阳","can_delete":false,"product_type":"c1","uid":1646790,"ip_address":"","ucode":"C3FAC41D4165B6","user_header":"https://static001.geekbang.org/account/avatar/00/19/20/c6/8a81a32c.jpg","comment_is_top":false,"comment_ctime":1572909023,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572909023","product_id":100039001,"comment_content":"那句老话:出名要趁早。基本功要早点学，学扎实。","like_count":0},{"had_liked":false,"id":147800,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1572902930,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572902930","product_id":100039001,"comment_content":"只在面试的时候问过，平时就写写业务代码，没有体会到设计模式的用处。还有期待着下面的课程，和大家一起进步！","like_count":0},{"had_liked":false,"id":147792,"user_name":"海罗沃德","can_delete":false,"product_type":"c1","uid":1165364,"ip_address":"","ucode":"8704F1D6980FA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","comment_is_top":false,"comment_ctime":1572890811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572890811","product_id":100039001,"comment_content":"最近在研究reactive streaming，才接觸到很優秀的設計模式，以個人經驗未來reactive streaming會是熱門領域，提前佈局、提前學習，對於將來職業生涯大有裨益","like_count":0},{"had_liked":false,"id":147785,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1572888786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572888786","product_id":100039001,"comment_content":"看过《head first 设计模式》，觉得都能理解，但是在实际项目中却没有用武之地，希望在这个专栏中看到不同。","like_count":0},{"had_liked":false,"id":147780,"user_name":"筱乐乐哦","can_delete":false,"product_type":"c1","uid":1307611,"ip_address":"","ucode":"AE92539F0419C3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/db/5b7a8fd8.jpg","comment_is_top":false,"comment_ctime":1572887228,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572887228","product_id":100039001,"comment_content":"最近在读dubbo的源码，就发现设计模式的实在太重要了，能看懂代码的流程，知道是什么实现的，然后是就会为他的这种设计感到惊叹，像是里面的责任链模式、观察者模式、修饰器模式等，常见的就不说了，感觉设计实在是巧妙，怪不得能一直活下去","like_count":0},{"had_liked":false,"id":147761,"user_name":"朱坤","can_delete":false,"product_type":"c1","uid":1098637,"ip_address":"","ucode":"65224DA2456EAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/8d/214ad614.jpg","comment_is_top":false,"comment_ctime":1572883991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572883991","product_id":100039001,"comment_content":"关于为什么学习设计模式，里面许多点都说到心坎里了","like_count":0},{"had_liked":false,"id":147752,"user_name":"Yayu","can_delete":false,"product_type":"c1","uid":1058015,"ip_address":"","ucode":"5E7842458D8229","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","comment_is_top":false,"comment_ctime":1572883307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572883307","product_id":100039001,"comment_content":"我要成为技术专家，加油！","like_count":0},{"had_liked":false,"id":147742,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1572882440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572882440","product_id":100039001,"comment_content":"默默打卡","like_count":0},{"had_liked":false,"id":147740,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1572882315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572882315","product_id":100039001,"comment_content":"工厂模式和策略模式，解决if else的问题。。。","like_count":0},{"had_liked":false,"id":147731,"user_name":"kkk","can_delete":false,"product_type":"c1","uid":1453027,"ip_address":"","ucode":"FB4BFD00618699","user_header":"","comment_is_top":false,"comment_ctime":1572881810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572881810","product_id":100039001,"comment_content":"磨刀不误砍柴工，培养好的习惯很重要。我们有一句戏谑的话，一般创业初期的公司，程序员都是在写屎，到中期的时候，这些屎就由别人来吃。怎么让代码自述其职，是我学习设计模式的目的","like_count":0},{"had_liked":false,"id":147729,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1572881627,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572881627","product_id":100039001,"comment_content":"为了不要每次面试的时候，都浅尝辄止的知道一点点，此次来深入学习.<br>重要性：无论是代码的可读性，还是扩展性， 读源码 都离不开设计模式.<br>","like_count":0},{"had_liked":false,"id":147704,"user_name":"仙道","can_delete":false,"product_type":"c1","uid":1161146,"ip_address":"","ucode":"CF35D34B484B71","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/ba/ae4cabd8.jpg","comment_is_top":false,"comment_ctime":1572880126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572880126","product_id":100039001,"comment_content":"jdk源码应该是非常牛逼的代码了。可是看它好痛苦啊","like_count":0},{"had_liked":false,"id":147696,"user_name":"NYang","can_delete":false,"product_type":"c1","uid":1239235,"ip_address":"","ucode":"FCDB3246D1195A","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/c3/11479173.jpg","comment_is_top":false,"comment_ctime":1572879641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572879641","product_id":100039001,"comment_content":"现在写代码越来越感觉设计模式的重要了，总觉得自己代码耦合太高，每次改功能都要大动一番，不仅浪费时间还拖累自己成长<br>","like_count":0},{"had_liked":false,"id":147693,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1572879498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572879498","product_id":100039001,"comment_content":"我觉得设计模式的重要性和老师说的差不了多少<br>1. 面试，最功利性的<br>2. 提高自己的编码能力，能在团队里面发挥更多（工作一年多，目前一直在写业务代码，几乎与设计模式绝缘，系统中倒是有一些大佬的设计模式运用，只有这些可以看了）<br>3. 想去为开源贡献一份自己的力量（开源项目都读不懂，何谈贡献）<br><br>使用设计模式的话，builder？，template method，factory，好像没别的了😂","like_count":0},{"had_liked":false,"id":147691,"user_name":"🌲树根🌲","can_delete":false,"product_type":"c1","uid":1159060,"ip_address":"","ucode":"1CB2271FB7872D","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/94/6949a55c.jpg","comment_is_top":false,"comment_ctime":1572879467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572879467","product_id":100039001,"comment_content":"一直认为代码不是写给自己看的，是写给别人看的。设计模式就是教我们怎么写得让人赏心悦目。<br><br>观察者、状态机、工厂用的比较多，解决订单模块，支付模块","like_count":0},{"had_liked":false,"id":147690,"user_name":"Running","can_delete":false,"product_type":"c1","uid":1006392,"ip_address":"","ucode":"6377B6BD1F01FF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5b/38/42ff18f1.jpg","comment_is_top":false,"comment_ctime":1572879426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572879426","product_id":100039001,"comment_content":"最近的项目对可拓展性要求比较高，回想当时设计架构时的种种苦恼，添加&#47;删除一个功能动全身，感觉都是Debug中写代码的，如果可拓展性好一点，那么也许就不需要加班那么多了，定位问题也不会那么困难","like_count":0},{"had_liked":false,"id":147689,"user_name":"仙道","can_delete":false,"product_type":"c1","uid":1161146,"ip_address":"","ucode":"CF35D34B484B71","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/ba/ae4cabd8.jpg","comment_is_top":false,"comment_ctime":1572879411,"is_pvip":false,"replies":[{"id":"56934","content":"头条美团 滴滴","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1572912638,"ip_address":"","comment_id":147689,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1572879411","product_id":100039001,"comment_content":"TMD公司是哪几个公司","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473286,"discussion_content":"头条美团 滴滴","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572912638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b9/740b3563.jpg","nickname":"陈优雅","note":"","ucode":"D07B8D6BED85A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43731,"discussion_content":"头条，美团，滴滴？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572886904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147669,"user_name":"Sophomores","can_delete":false,"product_type":"c1","uid":1202241,"ip_address":"","ucode":"5811D65168461C","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/41/c3ed2a69.jpg","comment_is_top":false,"comment_ctime":1572878271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572878271","product_id":100039001,"comment_content":"野路子出发，没怎么重视设计模式，现在学习好好补补基础","like_count":0},{"had_liked":false,"id":147658,"user_name":"logant","can_delete":false,"product_type":"c1","uid":1244556,"ip_address":"","ucode":"F7AC53F477BE8D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/8c/357dc701.jpg","comment_is_top":false,"comment_ctime":1572877079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572877079","product_id":100039001,"comment_content":"应对面试，告别烂代码写出好代码，提高复杂设计能力，读懂框架读懂源码，通过代码提高影响力<br>平时使用的模式比较少，只是了解些，单例，工厂，模板","like_count":0},{"had_liked":false,"id":147647,"user_name":"小可爱(๑• . •๑)","can_delete":false,"product_type":"c1","uid":1106190,"ip_address":"","ucode":"1E97973449DBDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/0e/2912db26.jpg","comment_is_top":false,"comment_ctime":1572875995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572875995","product_id":100039001,"comment_content":"1、设计模式的看法：超级重要，自己也啃书五六遍了，但是收效甚微啊，希望跟着争哥啃下这块骨头。<br>2、设计模式在平时开发的时候：①订单的状态扭转使用了状态机模式。②线程池等---工厂模式。","like_count":0},{"had_liked":false,"id":147646,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1572875909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572875909","product_id":100039001,"comment_content":"平常单例模式和工厂模式用的比较多，哈哈，惭愧","like_count":0},{"had_liked":false,"id":147644,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1572875857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572875857","product_id":100039001,"comment_content":"设计模式我是觉得很重要的，对于项目的整体设计，代码的可读性可扩展性是非常重要的。有时候看源码确实看不太懂，就是因为自己基础不够。之前也一直想着学习设计模式，买了书也就看了一下下后面就没看了，要坚持啊。让自己变得更优秀","like_count":0},{"had_liked":false,"id":147622,"user_name":"程序员的冬天","can_delete":false,"product_type":"c1","uid":1098029,"ip_address":"","ucode":"79CFC94CB1F92D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c1/2d/9186e340.jpg","comment_is_top":false,"comment_ctime":1572873843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572873843","product_id":100039001,"comment_content":"我目前处于的阶段就是一般的设计模式看得出来，自己动手没写过，现在读框架的源码已经有点力不从心，感觉工作几年了，也是一直处于熟悉框架的工程中，希望这次坚持下来，提升自己写复杂代码的能力，而不是一直写一些CRUD代码。","like_count":0},{"had_liked":false,"id":147617,"user_name":"Juntíng","can_delete":false,"product_type":"c1","uid":1039290,"ip_address":"","ucode":"F6A3B528D6F3FD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/ba/304a9a4a.jpg","comment_is_top":false,"comment_ctime":1572873393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572873393","product_id":100039001,"comment_content":"设计模式很重要一直都知道，但一直没有注重这块，没有真正理解设计模式带来的便利。在大量业务、开发任务下，快决定了一切，就更不可能在自己学的半斤八两的情况下使用到一些设计模式。<br><br>在项目中运用到的最多的也就是观察者模式、单例模式、工厂模式。","like_count":0},{"had_liked":false,"id":147607,"user_name":"黄闻涛","can_delete":false,"product_type":"c1","uid":1730455,"ip_address":"","ucode":"F3FB0C699B22ED","user_header":"https://static001.geekbang.org/account/avatar/00/1a/67/97/cbf60dab.jpg","comment_is_top":false,"comment_ctime":1572872910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572872910","product_id":100039001,"comment_content":"设计通用模版完全不知道从何下手<br><br>很多代码框架看的懂然后就没然后了","like_count":0},{"had_liked":false,"id":147596,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1572872199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572872199","product_id":100039001,"comment_content":"听说过几个模式，Android开发中涉及到Builder模式构建对象，Adapter模式来填充数据，应该还有命令模式。不过仅仅是了解，自己不敢想去使用 :-)","like_count":0},{"had_liked":false,"id":147590,"user_name":"。。。","can_delete":false,"product_type":"c1","uid":1365578,"ip_address":"","ucode":"7F943EEB55560C","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/4a/159db001.jpg","comment_is_top":false,"comment_ctime":1572871895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572871895","product_id":100039001,"comment_content":"会说也是一种本领，我的先学会去说，嘿嘿。","like_count":0},{"had_liked":false,"id":147584,"user_name":"cnJun","can_delete":false,"product_type":"c1","uid":1412258,"ip_address":"","ucode":"67DC484BB56424","user_header":"https://static001.geekbang.org/account/avatar/00/15/8c/a2/c7be644d.jpg","comment_is_top":false,"comment_ctime":1572871297,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572871297","product_id":100039001,"comment_content":"为什么要学习设计模式：<br>1、应对面试<br>2、写高质量代码<br>3、读源码<br><br>话题讨论：<br>1、聊一聊你对设计模式相关知识的重要性的看法<br>认为不懂设计模式很难写出高质量代码，不想整天CRUD，想有自己的思想。另一个就是读源码，发现很多源码真的用得好多设计模式，一直很难读懂。<br>2、在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>单例模式，数据分析时用的。","like_count":0},{"had_liked":false,"id":147565,"user_name":"A^Lee","can_delete":false,"product_type":"c1","uid":1703333,"ip_address":"","ucode":"266466CFB22321","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/a5/bef6b5f6.jpg","comment_is_top":false,"comment_ctime":1572870272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572870272","product_id":100039001,"comment_content":"我一直认为阅读优秀的源码是一名程序员提升编码能力的捷径，但是每次去阅读源码就会遇到争哥说道的问题就是代码跳来跳去一头雾水。我一直想提高一下我阅读源码的能力，现在终于找到问题症结所在。之前也有看过设计模式书籍，感觉就是继承啊接口啊之类的排列组合，感觉只是在解决某些问题的同时为了提高可扩展性降低耦合度所抽象出来的模式，也动手敲过书中猫狗车的例子，但是感觉还是不知道该怎样用到实际开发中。所以我非常非常期待争哥的这门课程！","like_count":0},{"had_liked":false,"id":147560,"user_name":"葛学强","can_delete":false,"product_type":"c1","uid":1619767,"ip_address":"","ucode":"76A0CC9E1B54DC","user_header":"https://static001.geekbang.org/account/avatar/00/18/b7/37/171c307e.jpg","comment_is_top":false,"comment_ctime":1572869851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869851","product_id":100039001,"comment_content":"单例模式用的比较多","like_count":0},{"had_liked":false,"id":147559,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1572869825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869825","product_id":100039001,"comment_content":"有些设计模式平时很少见，底层框架有的用，用的也不多，很多时候都是看完理解过后忘😓","like_count":0},{"had_liked":false,"id":147555,"user_name":"　扬帆丶启航　","can_delete":false,"product_type":"c1","uid":1235282,"ip_address":"","ucode":"4079D0889CD86C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/52/73351eab.jpg","comment_is_top":false,"comment_ctime":1572869583,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869583","product_id":100039001,"comment_content":"设计模式可以帮助我们更好的去写出高质量的代码，还能帮助我们在阅读代码的时候去理解作者的设计理念，去理解作者的意图，对于我们编写，阅读代码有这很好的帮助。目前就了解过单例，工厂，代理模式希望可以跟着老师把设计模式学的透彻。","like_count":0},{"had_liked":false,"id":147554,"user_name":"GeekAmI","can_delete":false,"product_type":"c1","uid":1005030,"ip_address":"","ucode":"232C0B6DFB9F56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/e6/87197b10.jpg","comment_is_top":false,"comment_ctime":1572869537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869537","product_id":100039001,"comment_content":"线程池封装成一个单例工具类，使用者简单了很多；<br>Netty服务端的handler，封装成单例类，减少每次链接重复创建对象。","like_count":0},{"had_liked":false,"id":147550,"user_name":"ruleGreen","can_delete":false,"product_type":"c1","uid":1314537,"ip_address":"","ucode":"FA4D36B97212A1","user_header":"https://static001.geekbang.org/account/avatar/00/14/0e/e9/929c5c73.jpg","comment_is_top":false,"comment_ctime":1572869407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869407","product_id":100039001,"comment_content":"之前实习的时候用过建造者模式，也不知道为啥，就是当时的leader把代码重构了，导致我写的代码有bug","like_count":0},{"had_liked":false,"id":147548,"user_name":"多多洛","can_delete":false,"product_type":"c1","uid":1233870,"ip_address":"","ucode":"5801171C2D2F21","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/ce/8ed72840.jpg","comment_is_top":false,"comment_ctime":1572869322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869322","product_id":100039001,"comment_content":"通用领域，规范大同小异，这时候策略模式是最好的解决方案。","like_count":0},{"had_liked":false,"id":147546,"user_name":"阳光很轻","can_delete":false,"product_type":"c1","uid":1619031,"ip_address":"","ucode":"73408E2DA4F10D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKE7VtDBFkSht6VgE4UZL82SlUrDXKVaGVibJSNXsVhfrPTNQ2OfrrOGu7ugMxwa0osyZibRqZjh5KQ/132","comment_is_top":false,"comment_ctime":1572869248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869248","product_id":100039001,"comment_content":"我觉得设计模式的使用最直接的好处就是增加了代码的可读性和可维护性，可扩展性，同时增加自己的架构能力。这几点对项目而言至关重要。<br>平时用的最多的设计模式是单件，工厂，委托和订阅模式，希望能熟悉更多的设计模式，并且应用到合适的场景中，提高项目的价值。","like_count":0},{"had_liked":false,"id":147533,"user_name":"阿辉","can_delete":false,"product_type":"c1","uid":1084775,"ip_address":"","ucode":"0D4D4C855E7C42","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/67/2471da5b.jpg","comment_is_top":false,"comment_ctime":1572868529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572868529","product_id":100039001,"comment_content":"没学过设计模式，看到产品需求，脑子有好多实现方法，这样写可以，那样写也可以，但哪种都觉得不够好。","like_count":0},{"had_liked":false,"id":147530,"user_name":"李恒达","can_delete":false,"product_type":"c1","uid":1120147,"ip_address":"","ucode":"E9F1AC9E74CA16","user_header":"https://static001.geekbang.org/account/avatar/00/11/17/93/981dc959.jpg","comment_is_top":false,"comment_ctime":1572868330,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1572868330","product_id":100039001,"comment_content":"最近给组里开发了个工具，本来好好的，结果需求有了一些变化，想改一下发现跟要重写差不多了，感觉要是有设计模式相关的积累就好了😂😂","like_count":0},{"had_liked":false,"id":147529,"user_name":"不破楼兰终不还","can_delete":false,"product_type":"c1","uid":1145867,"ip_address":"","ucode":"F06EEF04552A90","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/0b/2b5e5da5.jpg","comment_is_top":false,"comment_ctime":1572868257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572868257","product_id":100039001,"comment_content":"感触深刻的算是看开源框架的源码了，各种继承、组合为啥要这么搞啊？虽然了解个大概，但是都是皮毛，往往研究起来就是从看码到放弃&#47;(ㄒoㄒ)&#47;~~  <br>工作中的设计模式真的是用的太少了，大部分都是框架中实现的……","like_count":0},{"had_liked":false,"id":147527,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1572868156,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572868156","product_id":100039001,"comment_content":"接手过一个服务，因为代码可读性，可维护性和稳定性已经到了崩溃的地步，修改不如推倒重来的情况下推倒重来了。<br>也经历过两版，现在的这版本深刻的体会到了良好的模块划分，代码结构是多么重要，不但是现在的维护，甚至是后续的微服务拆分都会受益。也更体会到自己的还有很多细节做的不好，加油，边学边结合现状思考，学以致用！<br>用到的模式：策略模式、适配器模式、工厂模式、模版模式、责任链模式、单例模式、状态机、状态机","like_count":0},{"had_liked":false,"id":147526,"user_name":"爱吃彩虹糖的猫~","can_delete":false,"product_type":"c1","uid":1261108,"ip_address":"","ucode":"9EC7A8FD4B7DB1","user_header":"https://static001.geekbang.org/account/avatar/00/13/3e/34/dd0a3c61.jpg","comment_is_top":false,"comment_ctime":1572868126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572868126","product_id":100039001,"comment_content":"一、对设计模式相关知识的重要性的看法：<br>1、设计模式很重要，对于优化系统结构，代码优化有着质一样的提升。<br>2、之前不知道设计模式的时候，写代码有些不同情况的操作都是写出来怪怪的，后来知道了有个“策略模式”。<br>二、用过的设计模式<br>001 单例模式，之前刚学会线程池的时候，哪里需要用到多线程，就在那个地方new ThreadPoolExecutor（），后面new得多了，好像提示有重复代码，网上搜了一下，好像可以写成单例模式……真的是太赞了虽然有见过单例模式，真正自己写一个单例在项目中用到还是不多的。","like_count":0},{"had_liked":false,"id":147521,"user_name":"jeffery","can_delete":false,"product_type":"c1","uid":1219972,"ip_address":"","ucode":"35E2DAA386FB86","user_header":"https://static001.geekbang.org/account/avatar/00/12/9d/84/171b2221.jpg","comment_is_top":false,"comment_ctime":1572868016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572868016","product_id":100039001,"comment_content":"没搞过开发果断购买 希望给点学习建议 谢谢争哥","like_count":0},{"had_liked":false,"id":147518,"user_name":"游侠儿","can_delete":false,"product_type":"c1","uid":1448050,"ip_address":"","ucode":"18C5FD5F5BD7F3","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/72/eb388a89.jpg","comment_is_top":false,"comment_ctime":1572867894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572867894","product_id":100039001,"comment_content":"设计模式就是套路，是针对某些特定问题的通用解决方案，通过学习设计模式可以在遇到类似需求的时候迅速找到相对比较完善的解决方法，也可以通过设计模式原则对自己的代码进行评估以写出高质量的代码<br>平常用到比较多的设计模式有下面几个<br>单例模式：用于各种管理类<br>发布订阅模式：用于页面间通讯<br>命令队列：用于消息发出时间和执行时间之间的解耦，常用于角色移动，战斗播报等<br>工厂模式：统一管理对象的创建，常于对象池配合以实现对象复用<br>适配器模式：常用语SDK的接入","like_count":0},{"had_liked":false,"id":147507,"user_name":"moqifei","can_delete":false,"product_type":"c1","uid":1358410,"ip_address":"","ucode":"E0A6C858B78A3A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGovXf8jNP5ZqHsDKLwajjicbFwpX9on1xiaJDR4CgWaWP2KcfOdneasBfKFo3dO3dwQyGG6WjK40w/132","comment_is_top":false,"comment_ctime":1572867542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572867542","product_id":100039001,"comment_content":"通用设计原则：高内聚，低耦合 <br>实用设计原则：SOLID<br>设计原则是道，设计模式是术，编写高质量代码需要道与术的融合。<br><br>","like_count":0},{"had_liked":false,"id":147504,"user_name":"Arthur.Li","can_delete":false,"product_type":"c1","uid":1005824,"ip_address":"","ucode":"EC2436A5136C13","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/00/6d14972a.jpg","comment_is_top":false,"comment_ctime":1572867174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572867174","product_id":100039001,"comment_content":"这两门课真是读源码利器","like_count":0},{"had_liked":false,"id":147491,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1572866871,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572866871","product_id":100039001,"comment_content":"重要性:1.懂设计模式，沟通起来会更方便顺畅(亲身经历)<br>2.能写出优秀的代码，良好的代码结构，代码层次清晰<br><br>自己只用过单例模式，当时场景是一个功能模块要被几个类用到，为避免为现有的类的一些方法增加参数传递，做了一个全局的单例方便其他几个类调用","like_count":0},{"had_liked":false,"id":147487,"user_name":"weineel","can_delete":false,"product_type":"c1","uid":1049741,"ip_address":"","ucode":"6DC6EF4F256A53","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","comment_is_top":false,"comment_ctime":1572866602,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1572866602","product_id":100039001,"comment_content":"设计原则和设计模式是程序员的通用语言。<br>作为大前端，用的最多就是工厂、策略、单例、观察者了，偶尔用到享元。","like_count":0},{"had_liked":false,"id":147480,"user_name":"IT蜗壳-Tango","can_delete":false,"product_type":"c1","uid":1000612,"ip_address":"","ucode":"92330844C1EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/a4/7a45d979.jpg","comment_is_top":false,"comment_ctime":1572866123,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1572866123","product_id":100039001,"comment_content":"11&#47;04 打卡","like_count":0},{"had_liked":false,"id":147473,"user_name":"Chandler","can_delete":false,"product_type":"c1","uid":1140165,"ip_address":"","ucode":"F4B49A2D0CB11F","user_header":"https://static001.geekbang.org/account/avatar/00/11/65/c5/b379fc6d.jpg","comment_is_top":false,"comment_ctime":1572865728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572865728","product_id":100039001,"comment_content":"平时最常用的是策略+工厂模式，单例。","like_count":0},{"had_liked":false,"id":147469,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1572865563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572865563","product_id":100039001,"comment_content":"之前看过《大话设计模式》一书，实际工作中只应用了简单的solid法则，并没有应用特定的设计模式，这块积累非常欠缺。希望通过学习该专栏，并加上实际应用，能补上这一块","like_count":0},{"had_liked":false,"id":147463,"user_name":"nsn_huang","can_delete":false,"product_type":"c1","uid":1041796,"ip_address":"","ucode":"D8C6DA6530F3B6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/84/4a01e18d.jpg","comment_is_top":false,"comment_ctime":1572865310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572865310","product_id":100039001,"comment_content":"真的很重要，最大的体会就是看框架源码的时候，太复杂了，简直要裂。<br>了解过 单例模式，工厂模式，简单工厂模式，责任链模式，监听者模式，都是琐碎的了解，设计模式的知识没有成体系","like_count":0},{"had_liked":false,"id":147459,"user_name":"随机的","can_delete":false,"product_type":"c1","uid":1194535,"ip_address":"","ucode":"D8319136F27CBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/27/6bb0bb01.jpg","comment_is_top":false,"comment_ctime":1572864939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572864939","product_id":100039001,"comment_content":"用过策略模式，平时看的源码中最多看到的就是这种模式，比如JDK File 类 public String[] list(FilenameFilter filter) {}，典型的策略模式","like_count":0},{"had_liked":false,"id":147450,"user_name":"lijun","can_delete":false,"product_type":"c1","uid":1116095,"ip_address":"","ucode":"69EC8B86211AD9","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/bf/49f385ec.jpg","comment_is_top":false,"comment_ctime":1572864611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572864611","product_id":100039001,"comment_content":"工作中用过观察者模式，中介者模式，代理模式，命令模式，装饰者模式。","like_count":0},{"had_liked":false,"id":147442,"user_name":"刘旺旺","can_delete":false,"product_type":"c1","uid":1086132,"ip_address":"","ucode":"A9E89684BAE08D","user_header":"https://static001.geekbang.org/account/avatar/00/10/92/b4/bd466eed.jpg","comment_is_top":false,"comment_ctime":1572864010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572864010","product_id":100039001,"comment_content":"很多时候都能听到或看到设计模式很重要，也看过一些文章和书去了解，但还是懵懵懂懂，用就更少了。加油，一步步向前！","like_count":0},{"had_liked":false,"id":147431,"user_name":"Aliliin","can_delete":false,"product_type":"c1","uid":1025239,"ip_address":"","ucode":"61F9A09BB6650F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/d7/5d2bfaa7.jpg","comment_is_top":false,"comment_ctime":1572863673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572863673","product_id":100039001,"comment_content":"只用过单例模式和抽象工厂模式。","like_count":0},{"had_liked":false,"id":147430,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1572863650,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1572863650","product_id":100039001,"comment_content":"如果写代码时完全不使用任何设计模式的面向过程式开发，只需要短短一星期，就会完全忘记自己之前写的啥","like_count":0,"discussions":[{"author":{"id":1307080,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","nickname":"potato00fa","note":"","ucode":"D179E68D87CC50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43224,"discussion_content":"自己目前使用的最多的是工厂模式，没有工厂模式之前，各种new对象时的getter、setter代码满天飞，然后new对象new多了以后，发现还需要原型模式来深克隆对象，各种浅拷贝的工具类和框架都不满足，于是又自己实现深拷贝的原型模式。\n现在在写一些函数的时候发现可能会有函数重试的需求，于是又开始搞策略模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572864085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147412,"user_name":"cc","can_delete":false,"product_type":"c1","uid":1592092,"ip_address":"","ucode":"FF41E5D87BAD76","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/1c/5eb03a91.jpg","comment_is_top":false,"comment_ctime":1572862657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572862657","product_id":100039001,"comment_content":"学习专栏的重要性老师已经总结好了：<br><br>应对面试中的设计模式相关问题；<br>告别写被人吐槽的烂代码；<br>提高复杂代码的设计和开发能力；<br>让读源码、学框架事半功倍；<br>为你的职场发展做铺垫。","like_count":0},{"had_liked":false,"id":147402,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1572862407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572862407","product_id":100039001,"comment_content":"只用过单例，工厂，观察者，感觉用了这些设计模式可以让整个代码工程更易读，更好找到入口","like_count":0},{"had_liked":false,"id":147383,"user_name":"丿淡忘","can_delete":false,"product_type":"c1","uid":1139645,"ip_address":"","ucode":"604AE01961A026","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","comment_is_top":false,"comment_ctime":1572861436,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1572861436","product_id":100039001,"comment_content":"单例模式，主要用于给界面提供服务的接口","like_count":0},{"had_liked":false,"id":147373,"user_name":"虎哥","can_delete":false,"product_type":"c1","uid":1185061,"ip_address":"","ucode":"29D604EC85D3BC","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/25/1d3d616f.jpg","comment_is_top":false,"comment_ctime":1572861311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572861311","product_id":100039001,"comment_content":"设计模式是特定问题的解决的方式，不能为了用模式而用，应该在合适的场景下选择性的使用，也可以在已有的基础上改造，组合出新的，适合具体场景的模式。","like_count":0},{"had_liked":false,"id":147371,"user_name":"姑苏小沈🏃🎸","can_delete":false,"product_type":"c1","uid":1085941,"ip_address":"","ucode":"FFC9C7BC1C6B4B","user_header":"https://static001.geekbang.org/account/avatar/00/10/91/f5/6881f336.jpg","comment_is_top":false,"comment_ctime":1572861169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572861169","product_id":100039001,"comment_content":"学习设计模式一个问题是，平常用的机会少，学完容易忘记。","like_count":0},{"had_liked":false,"id":147366,"user_name":"Zed","can_delete":false,"product_type":"c1","uid":1184951,"ip_address":"","ucode":"09947C76F55A46","user_header":"https://static001.geekbang.org/account/avatar/00/12/14/b7/bb6a1fd4.jpg","comment_is_top":false,"comment_ctime":1572861069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572861069","product_id":100039001,"comment_content":"1：没有良好的语言基础设计基础好的架构和代码结构，所以能够理解和运用设计模式可以说是开发技能的统筹能力，能够体现出工程师的“质量”；<br>2：工厂模式，代理模式，装饰器模式，装饰器模式，实现了应用中不同种对象的组合运行，灵活扩展，不改原来代码情况为对象添加新功能","like_count":0},{"had_liked":false,"id":147349,"user_name":"Luoang","can_delete":false,"product_type":"c1","uid":1566097,"ip_address":"","ucode":"E7D227E2E00796","user_header":"https://static001.geekbang.org/account/avatar/00/17/e5/91/d043b8be.jpg","comment_is_top":false,"comment_ctime":1572860434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572860434","product_id":100039001,"comment_content":"打卡！滴滴","like_count":0},{"had_liked":false,"id":147325,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1572859146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572859146","product_id":100039001,"comment_content":"用得最多的就是工厂模式，会不会有点失败:(","like_count":0},{"had_liked":false,"id":147311,"user_name":"zs阿帅","can_delete":false,"product_type":"c1","uid":1141173,"ip_address":"","ucode":"07A54AE7F1CAFF","user_header":"https://static001.geekbang.org/account/avatar/00/11/69/b5/1e1731cc.jpg","comment_is_top":false,"comment_ctime":1572858470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572858470","product_id":100039001,"comment_content":"终于等到了","like_count":0},{"had_liked":false,"id":147375,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1572861327,"is_pvip":false,"discussion_count":25,"race_medal":0,"score":"1152624096655","product_id":100039001,"comment_content":"笔记：<br>1 作者反复解释了下学好dp 的重要性。<br>映像深刻的：<br>基本功不够，把一台战斗机放你面前，你都不知道如何欣赏和品味。<br>其它职能：<br>1 面试所需（适当的区分度）<br>2 告别烂代码，让实现优雅起来。老司机后，要参与指导菜鸟，也要会。<br>3 show me the code ,你牛不牛，终归还需要代码的展现，把框架说得头头是道又如何，技术看技术，硬核不行，外表的东西白搭。没法成为别人心中的大牛的。<br><br>作业：聊看法。<br>一句话，简直太tmd 的重要了。<br><br>以前重构过一个p2p 客户投资后奖励活动【放心，平台未跑路，老板是用心做事的人】。  刚开始，他们真的是 if eles 的去写每一个活动。<br>我去了后。主要就是参考yii 框架的实现方法。<br>做了以下解藕，把购买后的奖励分为四块。<br>通过配置 rules 来确认是否有奖励资格。    【首次，】<br>清算出奖多少，奖给谁（通常会带上推荐人）【固定额，阶梯算法，比例值，vip 等级等】<br>创建出奖励执行类， （红包，现金，抽奖券 ， 积分等） 并执行奖励<br>发送通知  （站内信，短信，微信，邮件 ， ） （通知会在通知里挂接广告）<br>离开那公司时特意查了一下，公司共发布了1700 条个奖励项，给客户返利约900 万。<br>","like_count":269},{"had_liked":false,"id":147474,"user_name":"嚴脂红.*","can_delete":false,"product_type":"c1","uid":1017900,"ip_address":"","ucode":"D27D807AA334E4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/2c/87861bb1.jpg","comment_is_top":false,"comment_ctime":1572865811,"is_pvip":true,"discussion_count":7,"race_medal":0,"score":"547033712403","product_id":100039001,"comment_content":"做游戏开发相关的工作，日常用到非常多的设计模式，比如:<br><br>对于游戏的设置，ui和scene等等各种manager管理类都要用到单例模式。<br>创建游戏中各种角色的各种工厂模式还有对象池。<br>处理游戏角色的各种状态的有限状态机要用到状态模式。<br>在优化复杂游戏场景时会用到享元模式。<br>还有游戏引擎本身就用到的组件模式。<br>......","like_count":127,"discussions":[{"author":{"id":1693576,"avatar":"https://static001.geekbang.org/account/avatar/00/19/d7/88/7dcde249.jpg","nickname":"庄周梦蝶","note":"","ucode":"7878ED3EB11E97","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353025,"discussion_content":"感觉很少用到设计模式，主要是做业务开发，增删改查，用了ssm加常用中间件即可满足需要，把数据库表结构设计好就行。没用设计模式也没发现有什么不妥。有的生般应套的设计模式反而把代码搞复杂了，变得也不灵活。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1614953438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132312,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","nickname":"o0oi1i","note":"","ucode":"D1F6AD4AAEAFBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214586,"discussion_content":"这么🐂佰了还来学？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1585211545,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015483,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","nickname":"程序员小跃","note":"","ucode":"25BB96E0791A60","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51002,"discussion_content":"设计模式太TMD实用了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573798058,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1323868,"avatar":"https://static001.geekbang.org/account/avatar/00/14/33/5c/8c0a372a.jpg","nickname":"Fourty Seven","note":"","ucode":"DD213225842F68","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45301,"discussion_content":"这些都是常用的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573020462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2862349,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL7iccMa4yaKJyLyibysdJBiaodgMickvdCxc58knqcHibDBdBK3WDhPHOAXia7E1BZ7gba4bph6FwaN7sw/132","nickname":"之一","note":"","ucode":"F58398575F85F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544542,"discussion_content":"一直尝试状态机，从来用不好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641555633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1051563,"avatar":"https://static001.geekbang.org/account/avatar/00/10/0b/ab/0e2857e5.jpg","nickname":"Coding小先","note":"","ucode":"965B1CC757E026","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320320,"discussion_content":"嘻嘻，我现在也在一个小游戏公司","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604319278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809792,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/80/f4fa8503.jpg","nickname":"cowboy","note":"","ucode":"B4ACE80915EB0D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276587,"discussion_content":"同行一起进步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590908476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147775,"user_name":"jony","can_delete":false,"product_type":"c1","uid":1048286,"ip_address":"","ucode":"80765A6B9ABA0D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/de/2019f370.jpg","comment_is_top":false,"comment_ctime":1572886100,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"474019288660","product_id":100039001,"comment_content":"设计模式，两眼一抹黑，从0开始","like_count":110,"discussions":[{"author":{"id":2331450,"avatar":"","nickname":"Geek_1a6406","note":"","ucode":"5A09F17C35B85B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327498,"discussion_content":"解藕，边界划分，让代码易于维护","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605851303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147566,"user_name":"乐","can_delete":false,"product_type":"c1","uid":1049576,"ip_address":"","ucode":"4505CB6BD9C144","user_header":"https://static001.geekbang.org/account/avatar/00/10/03/e8/4c943503.jpg","comment_is_top":false,"comment_ctime":1572870278,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"366645090438","product_id":100039001,"comment_content":"个人认为设计模式主要解决的是扩展和耦合问题<br><br>日常使用：<br><br>使用代理模式进行共性化处理，比如说 AOP 思想，将非业务功能和业务功能解耦<br><br>* 事务的处理@Translation<br>* 系统间上下文的传递 ThreadLocal + restTemplate#intercept 等等<br><br>使用工厂 + 策略<br><br>* 不同优惠种类的计算<br>* 定制化功能的解耦<br><br>观察者模式：这个模式的思想，我觉得非常的重要，你可以在许多中间件（mq、zookeeper、netty 等等）乃至生活中都能看到它的影子<br><br>* 通过领域事件解耦业务<br>* 理解 eventloop、epoll 等等<br>* 通过 watch 实现动态配置、HA 等等<br><br>责任链模式：pipeline 思想<br><br>* filter<br>* 理解 netty 中的各种 handler","like_count":86,"discussions":[{"author":{"id":1335474,"avatar":"https://static001.geekbang.org/account/avatar/00/14/60/b2/ccebcb71.jpg","nickname":"不学不行啊","note":"","ucode":"69368165141C2D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210016,"discussion_content":"都这么厉害了，还要买课么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584701856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234314,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d5/8a/7050236a.jpg","nickname":"东征","note":"","ucode":"DC557A1631A493","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44886,"discussion_content":"还有重用代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572970786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151500,"user_name":"摸爬滚打三十年","can_delete":false,"product_type":"c1","uid":1240241,"ip_address":"","ucode":"764A7F920EC304","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/b1/d790b927.jpg","comment_is_top":false,"comment_ctime":1573731673,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"336581180761","product_id":100039001,"comment_content":"关于为什么早学设计模式我很有发言权，我们公司的食堂有一道名菜:肥牛金针菇，去的早的吃肥牛，去的晚的吃金针菇。","like_count":78},{"had_liked":false,"id":147472,"user_name":"梁军","can_delete":false,"product_type":"c1","uid":1521145,"ip_address":"","ucode":"81E22EFAFD77B4","user_header":"https://static001.geekbang.org/account/avatar/00/17/35/f9/7a682fc1.jpg","comment_is_top":false,"comment_ctime":1572865716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"203436328628","product_id":100039001,"comment_content":"个人感觉，设计模式和数据结构算法结合，再去读源码或者框架，很清晰，一个招式一个内功","like_count":47},{"had_liked":false,"id":147613,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1572873270,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"181961499702","product_id":100039001,"comment_content":"1.设计模式很主要，很主要，很主要。他是一个能够长久迭代开发的必要条件，也是一个提高开发效率的必要条件。当我第一次用设计模式的时候我激动的一晚上没睡好，反反复复去看我的代码，喜欢的不得了。我会对照我的代码思考需求变更我的代码应该改什么，那种解耦合，可扩展的架构真的喜欢！！！<br><br>2.单例、工厂、模板、策略<br>基本的套路就是：单例的工厂类负责创建策略类，但是每个策略类都有共同特性，所以用到了模板模式。<br>类关系就是每个策略类实现策略接口并继承模板类。交由单例的工厂来管理。<br>也有人说这就是模板。跟策略没关，但我认为确实也是策略。<br>场景:医疗系统，药品分为中药，西药，医疗器械等等不同类别，每种类别计算价格方式由相同的算法和不同的算法组成，所以我用了模板和策略。👀<br>补充：其实最后我发现spring有依赖搜索，直接注入map就行了。完全不用自己写工厂管理😂😂😂","like_count":42,"discussions":[{"author":{"id":1515149,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1e/8d/5b242931.jpg","nickname":"Fish","note":"","ucode":"C20719F8B0F7C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295010,"discussion_content":"替换了isExpired函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596069664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147351,"user_name":"谭棋钊","can_delete":false,"product_type":"c1","uid":1237976,"ip_address":"","ucode":"F7F982BE5978BA","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/d8/bc70f34a.jpg","comment_is_top":false,"comment_ctime":1572860471,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"143306781239","product_id":100039001,"comment_content":"只用过单例","like_count":33},{"had_liked":false,"id":150109,"user_name":"吉吉","can_delete":false,"product_type":"c1","uid":1126111,"ip_address":"","ucode":"5A5DAB5B49D0F1","user_header":"https://static001.geekbang.org/account/avatar/00/11/2e/df/59725073.jpg","comment_is_top":false,"comment_ctime":1573462986,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"100357710794","product_id":100039001,"comment_content":"1、设计模式的重要性看法：<br>(1)可以使得代码编写更优雅<br>(2)对学习一些开源框架有很大帮助<br>(3)程序的可扩展性、维护性更好，系统解耦<br>2、基于上面的看法结合实际项目说明：<br>(1)在新老系统接割的项目中，进行数据回写，用到了策略模式，根据不同的接口码值，进行不同的策略回写。<br>(2)在银行前置系统中，用到了模板设计模式，对接不同的三方通道，在模板中定义某些特定的步骤，并加上hook，具体步骤子类实现。<br>(3)责任链模式，在网关系统中用到的filter就是责任链模式，把一个请求依次的在过滤器链上进行传输<br>(4)装饰器模式，在普通的微服务提供的restful接口中，在请求返回的时给对象添加一些额外的职责<br>(5)门面设计模式，对外提供统一的接口，例如在springcloud中提供统一的feinclient接口，所有外部系统都通过feinclient接口进行接入，从而不关心内部接口的调用实现。<br>(6)还有命令设计模式，原来在看工作流的时候不知道这个模式，看的云里雾里，后来才知道原来整个框架用到了命令设计模式，一下子就明朗了很多。所以学习设计模式很重要。<br>还有单例模式、工厂模式等，以上大概就是在工作中用到的设计模式，分享一下，如有不对请指正。","like_count":23},{"had_liked":false,"id":147544,"user_name":"仰望星空","can_delete":false,"product_type":"c1","uid":1117087,"ip_address":"","ucode":"4EA928AC927055","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/9f/788b964e.jpg","comment_is_top":false,"comment_ctime":1572869144,"is_pvip":false,"replies":[{"id":"56964","content":"函数式编程感觉还是没面向对象流行 所以专栏中没讲","user_name":"作者回复","comment_id":147544,"uid":"1190123","ip_address":"","utype":1,"ctime":1572922845,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"87472215064","product_id":100039001,"comment_content":"老师能不能讲讲函数式编程思想，设计模式都是基于面向对象的，而现在更流行函数式编程。","like_count":20,"discussions":[{"author":{"id":2588697,"avatar":"https://static001.geekbang.org/account/avatar/00/27/80/19/ac06db0b.jpg","nickname":"New","note":"","ucode":"406DF65BD05FAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390494,"discussion_content":"使用@VisibleForTesting注解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629862387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147753,"user_name":"大王拍我去巡山","can_delete":false,"product_type":"c1","uid":1067406,"ip_address":"","ucode":"94A1EE540BC9CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/8e/e6eaf434.jpg","comment_is_top":false,"comment_ctime":1572883537,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"70292360273","product_id":100039001,"comment_content":"CRUD写的太多了， 通过设计模式也能简化业务代码，释放生产力。期望能多有些代码场景的演练，跟随学习","like_count":16},{"had_liked":false,"id":147645,"user_name":"汤小高","can_delete":false,"product_type":"c1","uid":1555565,"ip_address":"","ucode":"D4AB7766273D52","user_header":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","comment_is_top":false,"comment_ctime":1572875890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"65997385330","product_id":100039001,"comment_content":"课后讨论：我的看法<br>1.聊一聊你对设计模式相关知识的重要性的看法；<br>（1）设计模式能让程序员编写出可读性高，易维护，易拓展的代码，避免烂代码。<br>（2）利用好设计模式能让复杂功能的设计的代码可复用性，可拓展性，可维护性，可读性更高。达到高内聚、低耦合的目的。<br>（3）设计模式能提高程序员的自我修养<br><br>2.在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>用到过模板模式，单例模式。<br>2.1）模板模式应用场景：在一个项目的规则引擎中，一个规则引擎有一系列规则过滤，这个过滤步骤基本上是确定的，只是某些步骤在不同的场景下需要相互替换，模板方法定义了方法调用顺序，需要用到一个钩子，让子类去实现这个方法。<br>模板模式解决问题：解决了以后可拓展的问题，如果以后需要在新场景下新增规则方法，只需新增一个类，实现钩子方法即可，不需改动既有代码。<br>2.2）单例模式应用场景：用于加载项目中需要的配置文件的资源类。<br>单例模式解决问题：解决了资源共用，避免创建出大量资源对象，节省了JVM内存资源。<br>","like_count":15},{"had_liked":false,"id":147458,"user_name":"帆大肚子","can_delete":false,"product_type":"c1","uid":1529040,"ip_address":"","ucode":"3DB11DB2FA1802","user_header":"https://static001.geekbang.org/account/avatar/00/17/54/d0/4e1fc664.jpg","comment_is_top":false,"comment_ctime":1572864916,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"61702407060","product_id":100039001,"comment_content":"我是做iOS开发的，之前一直有了解过设计模式，也在自己的一个框架中应用了组合模式。<br><br>重要性那就更不用说了，上个坑是一个专门定制ERP的公司，需要从APP上录入很多信息。我接手的时候，准备一根绳子随时准备上吊。我就连类似于把姓名输入项和性别输入项换一个位置，都要换一个上午。\b<br>学习了设计模式之后，我对应公司的开发场景，应用组合等模式把公司的iOS开发组件化（最快的时候一天写了20个表单页面）。<br>虽然自己有学过，但是如王争老师所说的，自学的效果真的有些不尽人意，并缺少反馈。<br>熟悉OC的同学可以去看看我的作品，希望大家给予指点<br>https:&#47;&#47;github.com&#47;xiefans&#47;FFormLib<br>但是因为自己比较懒，没有给文档补全。","like_count":14},{"had_liked":false,"id":147389,"user_name":"SweetyTang","can_delete":false,"product_type":"c1","uid":1601101,"ip_address":"","ucode":"5EB1431FA66F1D","user_header":"https://static001.geekbang.org/account/avatar/00/18/6e/4d/22de9c0e.jpg","comment_is_top":false,"comment_ctime":1572861935,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"53112469487","product_id":100039001,"comment_content":"用的最多的是观察者模式，其它模式都不了解，有些太失败了😭😭😭","like_count":12,"discussions":[{"author":{"id":1538604,"avatar":"https://static001.geekbang.org/account/avatar/00/17/7a/2c/54b48459.jpg","nickname":"Vincent.X","note":"","ucode":"8A40B5B2F4B102","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283959,"discussion_content":"所谓mock就是模拟。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592406985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087243,"avatar":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","nickname":"zhou","note":"","ucode":"E1CE8575B3F106","race_medal":3,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280302,"discussion_content":"需要依赖数据库、网络通信、文件系统等，那我们就需要将被测代码与外部系统解依赖，而这种解依赖的方法就叫作“mock”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591525033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148271,"user_name":"时光之刃","can_delete":false,"product_type":"c1","uid":1083381,"ip_address":"","ucode":"0F15CAD70BDDC3","user_header":"https://static001.geekbang.org/account/avatar/00/10/87/f5/c6d1ffed.jpg","comment_is_top":false,"comment_ctime":1572966641,"is_pvip":true,"replies":[{"id":"57097","content":"可以的 我后面可以考虑多写几篇加餐","user_name":"作者回复","comment_id":148271,"uid":"1190123","ip_address":"","utype":1,"ctime":1572993697,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"48817606897","product_id":100039001,"comment_content":"希望老师能举一些开源代码中的设计模式，比如netty或者ES等","like_count":11,"discussions":[{"author":{"id":1983911,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/45/a7/762a4a08.jpg","nickname":"冰封剑鞘","note":"","ucode":"D9F04A1AB3C8A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274526,"discussion_content":"请温习一边“重构”的定义，不改变原有行为下使得代码更灵活，更易测试，所以是不存在测试后需要改回来的情况的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590590288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147748,"user_name":"条","can_delete":false,"product_type":"c1","uid":1203836,"ip_address":"","ucode":"6F8679175256E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/5e/7c/94af3f5e.jpg","comment_is_top":false,"comment_ctime":1572883097,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"40227588761","product_id":100039001,"comment_content":"1.个人觉得设计模式就是对一些写比较好的代码的总结，其实代码看的写的多了，也能写出自己的设计模式。<br>2.最近重构了一块生成excel的代码，因为相似的代码很多，就用到了简单工厂模式和策略模式，工厂模式让对象的创建更加明确，策略模式让代码的逻辑看起来更加清晰、也解决一些代码重复的问题。","like_count":9,"discussions":[{"author":{"id":1103353,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d5/f9/1f9a2c3c.jpg","nickname":"磨砖做镜","note":"","ucode":"D8B8196AE1ED98","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249499,"discussion_content":"业务逻辑很容易重复，设计模式很适合用上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587944751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147367,"user_name":"彦祖","can_delete":false,"product_type":"c1","uid":1235159,"ip_address":"","ucode":"784CBB0C8BFD47","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/d7/21cc617d.jpg","comment_is_top":false,"comment_ctime":1572861110,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35932599478","product_id":100039001,"comment_content":"之前读完了大话设计模式，入职新公司后，为了完成新的需求复用旧类，采用了模板方法模式。为了把那些好几百行的代码拆开重新梳理，也只是能用到建造者模式来解决方法参数贼多的问题。","like_count":8},{"had_liked":false,"id":149392,"user_name":"学好习，做好人","can_delete":false,"product_type":"c1","uid":1205294,"ip_address":"","ucode":"C991643DB458E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/2e/e70a317a.jpg","comment_is_top":false,"comment_ctime":1573208064,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31637979136","product_id":100039001,"comment_content":"第一个问题：之所以称为设计模式而不是设计模型，我觉得模式只是提供了一个解决某类问题的思路，不是一成不变的，要根据具体的场景来应用，而不是当作一个模型来生搬硬套，还有还有就是过多的套用设计模式有时候反而是问题变得复杂，所以设计模式很重要，他提供给我们解决某种问题的一个好的解决思路和方法，但是也要具体情况具体分析<br>第二个问题：模板模式和策略模式用的比较多，曾经解决过一个场景，入参是一样的，要根据参数中type字段不同的值解决不同的业务场景，源代码中充斥着大量的if..else.新增一种业务场景，需要修改源代码，明显不符合开闭原则，解决办法：使用策略模式解决，不同的type对应一个具体的策略，新增一个场景的时候，新增一个具体的策略类即可，不需要修改源代码了","like_count":7,"discussions":[{"author":{"id":2682755,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/hLuvmO25DGTicuebTcUkrNmFaUXjkvYsSDPBe978ElcgymEI2jEAs4OtMYC8iaU8FPPMFYUHOb8ALmIaVsRKdpNQ/132","nickname":"Geek_00f955","note":"","ucode":"666A6FE95D1D4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588783,"discussion_content":"恍恍惚惚","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664109227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148269,"user_name":"于留月","can_delete":false,"product_type":"c1","uid":1048918,"ip_address":"","ucode":"DE3516198CF1B2","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/56/03fb63d9.jpg","comment_is_top":false,"comment_ctime":1572966552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31637737624","product_id":100039001,"comment_content":"设计模式的重要性：<br>1、提高设计和开发能力，从更高层次考虑问题：可读性、可维护性、可扩展性、模块化、组件化；<br>2、读源码、学框架，深有体会，Android源码到处充斥着各式各样的设计模式和设计原则；<br>3、职场发展，个人希望能够在架构和技术leader方面深入发展；<br>4、高质量代码，避免坏代码，不想被同行嘲笑，不想被同事鄙视，不想被后期维护的人吐槽，想被人称赞；<br>5、作为专业话术，更方便同行业间交流，更容易跟领导解释清楚，更轻松带领团队完成任务；<br><br>使用经验：<br><br>策略模式：<br>解决开发、测试、预发布、生产环境不同的数据来源、不同的数据处理方式，以及不同的图片加载方式<br><br>建造者模式：<br>网络通信协议，非常规意义上的http请求，更多是Socket通信，需要处理大量的参数传递，包装，解析<br><br>","like_count":7},{"had_liked":false,"id":147347,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1572860321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31637631393","product_id":100039001,"comment_content":"学完这个，再去重温数据结构，大有裨益。","like_count":7},{"had_liked":false,"id":151831,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1573797844,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"23048634324","product_id":100039001,"comment_content":"1：就如老师说的，投资要趁早，不然后面后悔都来不及。我就是典型的例子，大学的时候没学习设计模式，后来工作上一直会被用到，我才开始重视，去看《Head First设计模式》。但是例子终究是例子，还得靠实战才能更进一步。<br><br>2. 在初入职场的时候，被师傅带着，用过单例模式，观察者模式，适配器模式等，主要是解决Android开发中重复创建对象、监听数据变化、以及控件的使用等等。很多设计模式都是无形之中使用的，如果能尽早学会，阅读Android源码都会事半功倍。<br><br>现在更多的是Java开发了，微服务中这么多设计模式，都在影响着我，跟着老师学起来，我相信我可以的","like_count":5,"discussions":[{"author":{"id":1484184,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","nickname":"djfhchdh","note":"","ucode":"E71D75328CE398","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":125139,"discussion_content":"long currentTimestamp = System.currentTimeMillis();这个语句是未决行为，我觉得只要封装一个getCurrentTimestamp()方法就行了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578476657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148943,"user_name":"啊哈哈哈怕","can_delete":false,"product_type":"c1","uid":1637119,"ip_address":"","ucode":"A35E88C8D3CABD","user_header":"https://static001.geekbang.org/account/avatar/00/18/fa/ff/ff6fc1b2.jpg","comment_is_top":false,"comment_ctime":1573114026,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23047950506","product_id":100039001,"comment_content":"是不是适用设计模式也应该一分为二的看，如果业务非常简单就没必要上设计模式增加系统的复杂性了。","like_count":5,"discussions":[{"author":{"id":2034632,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/0b/c8/15f055d3.jpg","nickname":"图灵机","note":"","ucode":"EB02DB653AD591","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284737,"discussion_content":"因为各种框架已经给你实现好了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592620967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148659,"user_name":"大姨夫斯基","can_delete":false,"product_type":"c1","uid":1519521,"ip_address":"","ucode":"79989AC4DD36FE","user_header":"https://static001.geekbang.org/account/avatar/00/17/2f/a1/5f32ada6.jpg","comment_is_top":false,"comment_ctime":1573045996,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23047882476","product_id":100039001,"comment_content":"投资要趁早，这样我们才能尽早享受复利。  很赞同这个观点，因为切身体会过。","like_count":5},{"had_liked":false,"id":147634,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1572875089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18752744273","product_id":100039001,"comment_content":"1，重要性亲身经历过：被面试，面试别人，看源码，设计易维护易扩展的功能模块<br>2，几乎没使用过。读过设计模式的书籍，现在全还回去了。这也是学习本专栏的原因。","like_count":4},{"had_liked":false,"id":331267,"user_name":"Lingo","can_delete":false,"product_type":"c1","uid":1075334,"ip_address":"","ucode":"82ECA2E0533B78","user_header":"https://static001.geekbang.org/account/avatar/00/10/68/86/348be7f8.jpg","comment_is_top":false,"comment_ctime":1642512388,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14527414276","product_id":100039001,"comment_content":"🌟聊一聊你对设计模式相关知识的重要性的看法。<br><br>设计模式是编码的基本功，不懂设计模式就去搞开发，虽然搞出来的软件也能用，但也仅仅是“能用”。代码的可读性，可扩展性，可维护性不强的话，写的这些代码早晚会变成一堆垃圾。<br><br>就像是吃饭要先学习拿筷子，跑步要先学会走路。基本的东西，现在不学好，后面的道路会更加坎坷。加班改bug，重构烂代码，花费的时间和精力肯定会更多。<br><br>如果现在已经觉得前进的道路不平坦，那此时正是学习的好时机。因为你比那些没有经验，就去学习的人，更有学习的理由，更加知道学习的好处。学习与实战是相辅相成的。<br><br>加油吧，愿做一个有追求的打工人！<br><br><br>🌟在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br><br>如果说没有，是不是就把天聊起了哈哈😄，仔细想想还是有的。<br><br>作为一名有追求安卓开发工程师，jetpack里的liveData还是经常使用的，使用的是监听者设计模式，配合dataBinding实现数据与ui的双向绑定。体现了状态驱动ui的编程思想。<br><br>retrofit使用了代理模式，使用java的动态代理、反射、注解，实现了一个非常好用的网络请求框架。帮助开发者构造出okhttp的call对象，实现网络请求。使用了适配器模式，使retrofit可以无缝配合rxjava、kotlin的suspend挂起函数等第三方库一起工作。<br><br>okhttp使用了职责链模式，非常优雅的实现了http报文的封装、连接池的管理、线程池的管理，并且有很高的可扩展性，支持用户自定义拦截器。<br><br>安卓本身的activity就是使用了模版模式，让用户只需关注每个生命周期需要做的事情，而不需要关注生命周期是被谁，何时调用的。<br><br>lifecycle使用了监听者模式、context使用了门面模式，装饰器模式、控件树使用了组合模式等等等等……<br><br>最近刚学了dart，里面的const关键字用于声明编译期常量，我觉得也可以看作是编译器对享元模式的应用。","like_count":3},{"had_liked":false,"id":267654,"user_name":"米虫","can_delete":false,"product_type":"c1","uid":1448031,"ip_address":"","ucode":"18B78262CA2B0A","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/5f/b391c6c2.jpg","comment_is_top":false,"comment_ctime":1607860185,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14492762073","product_id":100039001,"comment_content":"设计模式是六大设计原则的最佳实践，对解决复杂系统问题有重要指导意义。分层、模块化、抽象、接口、管道、插件等等耳熟能详的内容，都对应着一种模式，设计出这些模式，就好比发掘数理公式一样。常见的设计模式，是大多数系统最好的解释。<br><br>工厂、装饰、外观、策略、模板、状态、观察等都深度使用过，也为自己使用过感到自豪，但是关键的能力在于识别模式，学习这门课就是想对所有的模式都能驾轻就熟。","like_count":3},{"had_liked":false,"id":154542,"user_name":"张鼎松","can_delete":false,"product_type":"c1","uid":1063160,"ip_address":"","ucode":"061F86EA9AA93D","user_header":"https://static001.geekbang.org/account/avatar/00/10/38/f8/b7ae7c6d.jpg","comment_is_top":false,"comment_ctime":1574477146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14459379034","product_id":100039001,"comment_content":"“有些东西，要早点知道；有些书，要早点读。这样在你后面的生活、工作、学习中，才能一直都发挥作用。不要等到好多年后，看到了，才恍然大悟，后悔没有早点去学、去看。”  <br>多么痛的领悟！这些年下来这样的事情还少吗？老师的话句句说到心坎里啊！","like_count":3},{"had_liked":false,"id":150027,"user_name":"蓝二哥哥我才是无羡啊👻","can_delete":false,"product_type":"c1","uid":1738272,"ip_address":"","ucode":"E70EE4E08F16AF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/20/e71b5585.jpg","comment_is_top":false,"comment_ctime":1573450029,"is_pvip":false,"replies":[{"id":"58375","content":"内功足够扎实，才能领会别人的代码为什么这么写。","user_name":"作者回复","comment_id":150027,"uid":"1190123","ip_address":"","utype":1,"ctime":1573790377,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"14458351917","product_id":100039001,"comment_content":"  做服务端开发相关工作，对于一个初入职场的小白来说，什么工厂模式单例模式，只有简单的知道概念，看项目都不能明白他们的体现，但最近发现了单例模式在装饰器方面的应用是真的让人印象深刻，从中体会到了编程的乐趣，所以下定决心要好好学习设计模式！<br>  还有老师说的：“你以为你读懂了别人的代码，其实你可能还未领悟到其中的精髓！”我思考一阵，发现好像真的是这样，最近在学习前辈的代码阶段，好像只是懂了代码实现的业务逻辑，并不十分明白为什么要这样去实现，好处在哪，所以想问问老师，怎么才能领悟到别人代码的精髓呢","like_count":3,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474041,"discussion_content":"内功足够扎实，才能领会别人的代码为什么这么写。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573790377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":149073,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1371891,"ip_address":"","ucode":"8BEFC518F06AC7","user_header":"https://static001.geekbang.org/account/avatar/00/14/ee/f3/a94cee23.jpg","comment_is_top":false,"comment_ctime":1573136096,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14458037984","product_id":100039001,"comment_content":"最近刚刚看了《大话设计模式》，了解了一些设计模式，之前也看过，但是没怎么看懂，看了就忘记。这次再次看设计模式，有了不一样的感悟，觉得可以看懂一些，看某种设计模式，会带着这种设计模式是为了解决什么问题这样的一个思考去学习，然后对设计模式就理解得深一点。但说实话，有些设计模式还是没读懂，即使看明白书上的代码，也不知道如何运用在工作中。<br>在这分享一下自己最近看懂的一个设计模式，也运用在了工作中。这个设计模式叫状态设计模式，它主要是为了解决烦长、复杂的多条件逻辑判断问题，把这种多个条件逻辑设计成一个个的类来处理，逻辑处理还涉及到流转，在每个处理类中做判断。不过我还加入了自己的一些想法，这些条件处理类继承了一个抽象类，来处理一些公共的逻辑。我用来处理的是时间上年、月、日、时、分上的业务逻辑处理。","like_count":3},{"had_liked":false,"id":147816,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1572910431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457812319","product_id":100039001,"comment_content":"设计模式的重要性当然是不言而喻的。代码质量问题是我最近一直关心的问题。<br>在实际过程中用过<br>1.单例<br>2.工厂<br>3.builder模式<br>4策略模式<br>印象中最深的就是做一个通用功能，我就是用的策略模式，做完之后得到了leader的刮目相看，代码结构清晰，代码量少，同事用起来觉得非常方便。<br>后面跟着争哥好好学习设计模式，让自己的代码成为同事们的标杆。","like_count":3},{"had_liked":false,"id":147722,"user_name":"Joanfen","can_delete":false,"product_type":"c1","uid":1004260,"ip_address":"","ucode":"4CF1B92337B625","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/e4/50600574.jpg","comment_is_top":false,"comment_ctime":1572881156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457783044","product_id":100039001,"comment_content":"1. 设计模式相当于是前人总结的一些套路，当业务与这些模式比较契合时，就可以使用对应的模式来设计，而且当大家都了解这些“套路”时，交流也会比较顺畅<br>2. 设计App相关协议时使用过工厂模式，为了减少case判断","like_count":3},{"had_liked":false,"id":147648,"user_name":"will","can_delete":false,"product_type":"c1","uid":1156207,"ip_address":"","ucode":"7A7DBE3E0EEAEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/a4/6f/672a27d4.jpg","comment_is_top":false,"comment_ctime":1572876015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457777903","product_id":100039001,"comment_content":"来到新公司才发现设计模式的重要性，回顾以前写的代码真的是很垃圾。<br>现在用到了很多的设计模式：<br>1、builder模式<br>2、责任链模式<br>3、单列模式<br>4、观察者模式<br>5、adapter模式等。<br>但是对于这些模式的精髓，还是没有深刻理解到，一定要好好学习一波","like_count":3},{"had_liked":false,"id":355008,"user_name":"后其身而身先","can_delete":false,"product_type":"c1","uid":3159196,"ip_address":"山东","ucode":"E7F36107A5A925","user_header":"https://static001.geekbang.org/account/avatar/00/30/34/9c/05708466.jpg","comment_is_top":false,"comment_ctime":1660969042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10250903634","product_id":100039001,"comment_content":"我相信，有很多程序员和我一样，并不是软件相关专业科班出身的。<br>对于我们这些非科班出身的程序员来讲，很多时候，都是在摸着石头过河。因为没有系统性和体系化的知识结构基础，在做程序设计和程序开发的时候，都只能凭经验或直觉来做。<br>经验丰富之后，可能写出的代码也比较漂亮；但是在带新人的时候，却不能够讲解清楚什么是好代码，怎么避免掉入烂代码的坑里，结果导致自己的“弟子”们，要么无法理解自己所讲授的内容，要么，就学的似是而非，画虎类犬。耽误了别人的前程，同时，也阻碍了自己的进步<br>回头来学习这些，是为了“补课”，把自己的经验理论化，将这些理论知识和自己的实践相互印证，建立坚实的知识结构体系。在这样的体系基础之上，也更易于向别人传播自己的知识和经验，只有基础牢固，才能建成真正屹立不倒的摩天大楼","like_count":3},{"had_liked":false,"id":239289,"user_name":"磐星","can_delete":false,"product_type":"c1","uid":1003640,"ip_address":"","ucode":"19436A86714C3D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/50/78/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1596497296,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10186431888","product_id":100039001,"comment_content":"比设计模式的重要性对中高阶程序员尤其重要， 写的代码和程序设计需要优雅且扩展性强<br><br>以前工作中模板方法和代理 用的比较多 ","like_count":2},{"had_liked":false,"id":188585,"user_name":"西山薄凉","can_delete":false,"product_type":"c1","uid":1438400,"ip_address":"","ucode":"7A44850F99EC02","user_header":"https://static001.geekbang.org/account/avatar/00/15/f2/c0/bf148d4f.jpg","comment_is_top":false,"comment_ctime":1584372140,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10174306732","product_id":100039001,"comment_content":"iOS开发来推书了<br>《Objective-C编程之道》，讲了各种设计模式在系统中的使用。非常经典","like_count":2,"discussions":[{"author":{"id":2356993,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/KMVyjF3bDDa7oot4QVWiaiaicMho9JtZ2E8nWqK8562B6HEicOwyfmAGwocLsvTMMnqWqEob5BrlI0OJpTvLMx7U5Q/132","nickname":"Geek_c7292f","note":"","ucode":"BB6F9413C0A0D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335097,"discussion_content":"现在不是流行swift吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608091190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148075,"user_name":"httvc","can_delete":false,"product_type":"c1","uid":1328883,"ip_address":"","ucode":"3E21CC740976B0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLeocOtQchqJhmQjrSLVvkIfGmhK1STust04THMVxWB0ibGMWOaKWJKnSgb6PbEHELXknGdEbHSkjQ/132","comment_is_top":false,"comment_ctime":1572937465,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10162872057","product_id":100039001,"comment_content":"一直觉得设计模式很重要，但是就是静不下心来学，看博客学的时候坚持一周过个周六日第二周周一就忘了，又看其他的，这次一定看完。<br>在开发的时候用过单例，适配器，观察者和被观察者，建造设计模式，然后看源码的时候看过代理，工厂设计模式，其他的设计模式在没了解。","like_count":2},{"had_liked":false,"id":147683,"user_name":"Crack","can_delete":false,"product_type":"c1","uid":1638828,"ip_address":"","ucode":"BA9573576069C2","user_header":"https://static001.geekbang.org/account/avatar/00/19/01/ac/0a84e410.jpg","comment_is_top":false,"comment_ctime":1572879083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10162813675","product_id":100039001,"comment_content":"设计模式就是来指导怎么写代码吧","like_count":2},{"had_liked":false,"id":147673,"user_name":"Wiggins","can_delete":false,"product_type":"c1","uid":1078222,"ip_address":"","ucode":"021EE98CF0E4EE","user_header":"https://static001.geekbang.org/account/avatar/00/10/73/ce/23bd3997.jpg","comment_is_top":false,"comment_ctime":1572878413,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"10162813005","product_id":100039001,"comment_content":"课堂讨论 1 公司里的新电商项目 由一个工作十余年的老程序员主要开发下单这块 代码中充斥着ifelse 十分难以维护 虽然注释清晰 但是让人根本没有看下去的欲望<br>2在项目中主要用到的就是单例模式 dotnetcore框架中自带的addsingleton 让对象在生命周期内只实例化一次 还有就是观察者模式 主要就是mq的exchange中还有实际业务中 减少了很多重复的代码","like_count":2,"discussions":[{"author":{"id":1590960,"avatar":"https://static001.geekbang.org/account/avatar/00/18/46/b0/4f45e06e.jpg","nickname":"天雨流芳","note":"","ucode":"81657BA9C900FE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45818,"discussion_content":"同.net 一起学习～，👏👏👏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573088500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147517,"user_name":"暒","can_delete":false,"product_type":"c1","uid":1547048,"ip_address":"","ucode":"9C956F418C66BB","user_header":"https://static001.geekbang.org/account/avatar/00/17/9b/28/9d89de4d.jpg","comment_is_top":false,"comment_ctime":1572867833,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10162802425","product_id":100039001,"comment_content":"默默打卡，加油阿星","like_count":2},{"had_liked":false,"id":147490,"user_name":"兔2🐰🍃","can_delete":false,"product_type":"c1","uid":1096984,"ip_address":"","ucode":"1FEDA044BB6CBD","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/18/2af6bf4b.jpg","comment_is_top":false,"comment_ctime":1572866871,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10162801463","product_id":100039001,"comment_content":"设计模式重要性很多，提高源码理解能力，加深中间件原理理解，争哥说的为职场做铺垫做铺垫，真的很有道理，当你自身能力强大起来后，你会发现自身求知欲加强了，不断地学习，不断的接触到牛人，学习他们的经验，走上捷径之路。常说学习没有捷径，但我觉得捷径就在于此。认同的顶上去！让很多人看到~","like_count":2,"discussions":[{"author":{"id":2134882,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erpYZalYvFGcBs7zZvYwaQAZwTLiaw0mycJ4PdYpP3VxAYkAtyIRHhjSOrOK0yESaPpgEbVQUwf6LA/132","nickname":"Harlan","note":"","ucode":"F43595A0A00B19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304288,"discussion_content":"怎么认识牛人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599539121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1096984,"avatar":"https://static001.geekbang.org/account/avatar/00/10/bd/18/2af6bf4b.jpg","nickname":"兔2🐰🍃","note":"","ucode":"1FEDA044BB6CBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2134882,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erpYZalYvFGcBs7zZvYwaQAZwTLiaw0mycJ4PdYpP3VxAYkAtyIRHhjSOrOK0yESaPpgEbVQUwf6LA/132","nickname":"Harlan","note":"","ucode":"F43595A0A00B19","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304388,"discussion_content":"视频号可以多关注下，太多优秀的人了，向他们学习","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599559580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304288,"ip_address":""},"score":304388,"extra":""}]}]},{"had_liked":false,"id":147464,"user_name":"Yo nací para quererte.","can_delete":false,"product_type":"c1","uid":1664572,"ip_address":"","ucode":"8B6E9B8B3D007C","user_header":"https://static001.geekbang.org/account/avatar/00/19/66/3c/2d563488.jpg","comment_is_top":false,"comment_ctime":1572865383,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10162799975","product_id":100039001,"comment_content":"设计模式很重要<br>学过一段时间unity，一个好的游戏代码可以从中看到很多设计模式的影子。搭建框架的过程花费时间可能是很漫长的，不过框架写好之后填充内容就很容易了，框架也可以复用。再也不怕改需求了。","like_count":2},{"had_liked":false,"id":293958,"user_name":"杨杨","can_delete":false,"product_type":"c1","uid":1402090,"ip_address":"","ucode":"8B990A127FF903","user_header":"https://static001.geekbang.org/account/avatar/00/15/64/ea/2480b207.jpg","comment_is_top":false,"comment_ctime":1621650106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5916617402","product_id":100039001,"comment_content":"学好和掌握设计模式真的很重要，对于一个开发，融会贯通了设计模式思想，那么coding的时候肯定下笔如有神，质量高，写出来后期维护也很方便，so我也想掌握这项开发必备技能，从普通码农中脱颖而出。<br>之前我们项目组接手了一个已经开发好功能模块的项目，我们要做的就是在原有功能上进行新开发功能需求。但是这个项目之前经过了N代人的开发，里面代码基本上都是堆砌而成的，读起来真的是惨不忍睹，而且代码都没有注释，一个类文件竟然有上万行，读起来真的是非常吃力！没办法，我们接手后项目经理要求我们尽量写出比原来代码质量高的新代码，然后再利用闲暇优化之前不好的代码。我们还定期进行项目组内代码串讲，代码检视，让大家都可以对感觉不合理的代码提出意见，然后改进。最后经过我们一年多的开发，交出了比较满意的项目代码，也得到了公司的认可。","like_count":1},{"had_liked":false,"id":278315,"user_name":"星夜","can_delete":false,"product_type":"c1","uid":1128491,"ip_address":"","ucode":"3B46C09D994CEB","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/2b/9db9406b.jpg","comment_is_top":false,"comment_ctime":1612869206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5907836502","product_id":100039001,"comment_content":"1.设计模式可以提高代码的复用性、可扩展能力，平时经常因为乱糟糟的代码感到头疼，工作开发效率也很低下，常常看别人代码都需要不少时间，还会因为代码中各种意想不到的逻辑导致线上问题。这时就能体现设计模式的重要性了，其实都不用说设计模式，只要大部分人能将代码写的条理清楚、见名知意，我就谢天谢地了。<br>2.目前对设计模式理解很少，只用过简单的工厂、策略、模板方法、观察者模式。","like_count":1},{"had_liked":false,"id":274437,"user_name":"CoreDao","can_delete":false,"product_type":"c1","uid":2418145,"ip_address":"","ucode":"75D08C21EC57FA","user_header":"https://static001.geekbang.org/account/avatar/00/24/e5/e1/5af35687.jpg","comment_is_top":false,"comment_ctime":1611021638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5905988934","product_id":100039001,"comment_content":"1.对个人。一方面提升代码美感，另一方面提升对源码等的理解。<br>2.对团队。代码可读性，bug率等会降低。","like_count":1},{"had_liked":false,"id":266905,"user_name":"焱","can_delete":false,"product_type":"c1","uid":1113301,"ip_address":"","ucode":"677BF1BE4B94D5","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/d5/1cf5fd56.jpg","comment_is_top":false,"comment_ctime":1607522130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5902489426","product_id":100039001,"comment_content":"个人认为设计模式是优秀的前辈们在软件开发过程的总结，处理了一些典型问题的比较好的一种解决方案，在实际项目中遇到过会话管理中无限new耗尽内存问题使用了单例减小内存问题","like_count":1},{"had_liked":false,"id":245418,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1598941087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5893908383","product_id":100039001,"comment_content":"【要点】<br>1、学习并掌握设计模式相关知识可以帮助我们应对面试中的设计模式相关问题。尽早把设计模式相关的知识点搞清楚，面试时遇到相关问题就不需要害怕了，让设计模式为成为面试中的亮点。<br>2、学习并掌握设计模式相关知识可以帮助我们告别写被别人吐槽的烂代码。写的一手好代码让你在团队中更容易脱颖而出，得到大家的认可，赢得尊重与响应的江湖地位。<br>3、学习并掌握设计模式相关知识可以帮助我们提高复杂代码的设计和开发能力。每天在固定的框架里根据业务需求填充代码，十年如一年，当突然面临有挑战的编码工作时往往力不从心。你不中年危机谁危机！所以，学习设计模式也是一种应对中年危机的方法。<br>4、学习并掌握设计模式相关知识可以让我们读源码、学框架事半功倍。阅读优秀的源码，获得其中的精髓，是我们高效学习持续进步的重要法宝，而在设计模式方面的能力直接决定了能否看得懂、学得会、用的上。<br>5、学习并掌握设计模式相关知识可以为我们的职场发展做铺垫。技术人最佩服的就是技术牛人，要做团队的技术带头人，而不是团队的技术天花板。<br>【思考】<br>1、单例模式，例如Chromium中的Browser进程的资源管理类，用于同一的资源管理及调度。以及Chromium中的HTML分词器，由于词库固定，所以用于对输入的字符流进行分词时只需一个实例即可。<br>2、工厂模式，例如Chromium中创建DOM树节点的创建类。适用于创建有很多共同属性的同一类对象，使用工厂模式一般都伴随着模板类的使用。","like_count":1},{"had_liked":false,"id":189645,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1921287,"ip_address":"","ucode":"64BBE005890845","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/07/b5a945b6.jpg","comment_is_top":false,"comment_ctime":1584537910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879505206","product_id":100039001,"comment_content":"感觉在学习得到的专栏，给作者点赞","like_count":1},{"had_liked":false,"id":178893,"user_name":"小伟","can_delete":false,"product_type":"c1","uid":1043401,"ip_address":"","ucode":"B631E56A112BDC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/eb/c9/b1b233cf.jpg","comment_is_top":false,"comment_ctime":1581847859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5876815155","product_id":100039001,"comment_content":"打卡：<br>1、聊一聊你对设计模式相关知识的重要性的看法；<br>答：懂设计模式，主要体现的是内功，如果你不会，可能对于复杂度小或刚启动的项目还just so so。但是随着复杂度变高、架构不断演化，如果前提架构设计不好，你的研发效能就会迅速下降，苦不堪言；<br>所以，我觉得设计模型非常重要，是一个架构师的基本功，是提高研发效能的利器。<br>当然，得具体场景具体分析，比如你就是为了快速开发一个poc原型，那就怎么快怎么来。<br><br>2、在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>答：有用到；<br>单例模式：任务分配manager作为一个单例模式，被别的服务调用；优势：保证只有一个实例；<br>工厂模式：同一个算法有不同的实现；那么就抽象出一个算法工厂；优势：新增一个算法非常方便；代码结构清晰；<br><br><br>自我感觉在这方面思考和经验比较欠缺，目前只感觉到基于接口编程的好处。","like_count":1},{"had_liked":false,"id":159721,"user_name":"J","can_delete":false,"product_type":"c1","uid":1118252,"ip_address":"","ucode":"0CAB1969668F69","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/2c/330651c8.jpg","comment_is_top":false,"comment_ctime":1575743913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870711209","product_id":100039001,"comment_content":"在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>MVC，用于编写界面交互的场景，M专注于数据生厂，V专注于界面编写，C专注于协调他们之间交互，解决界面或数据有变动的情况下减少对现有代码的入侵以及破坏。<br>工厂模式：通常用于向请求服务器数据。将返回的 json 数据转 model ，键值映射。还有生厂消费者模式。<br>单例模式：用于跨类跨模块同步读写临时数据，解决在保持业务模块相互独立的同时又能保持实时的通讯。<br>观察者模式：用于监听跨类跨模块某一对象的变化情况，解决业务耦合问题。<br>委托模式：用于，可以实现业务解耦，减少代码破坏<br>还有很多<br><br> <br>聊一聊你对设计模式相关知识的重要性的看法<br>可以更直观的评估代码质量，以现在的眼光来看，现在的代码或多或少都是用到设计模式。个人觉得学习设计模式最大的原因就是怎么跟大家讲明白自己的想法，让大家信服，从而提高自己的技术领导力。","like_count":1},{"had_liked":false,"id":156199,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1574834762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869802058","product_id":100039001,"comment_content":"2.自己在开发过程中常用的最多是面向接口编程，单例，工厂，注册监听。<br>最关键的其实是分层级，隔离变化和不变","like_count":1},{"had_liked":false,"id":156198,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1574834608,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869801904","product_id":100039001,"comment_content":"最开始参加工作时候，看代码仅仅知道跟踪函数调用，但是跟着跟着就没了，摸不到头脑。后来知道那个是注册监听😂<br>很多时候，读代码最先了解的是其框架，调用关系，消息机制等，然后才能不把自己看糊涂。<br>有些程序员，不仅代码懒，还不爱写文档，导致过两天自己都看不懂，你说可笑不可笑。<br>所以，程序绝不仅仅为了实现功能，更多的是为后续的可移植可扩展打下基础","like_count":1},{"had_liked":false,"id":152804,"user_name":"菩提晓","can_delete":false,"product_type":"c1","uid":1052898,"ip_address":"","ucode":"9716098118C32D","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/e2/d4b51007.jpg","comment_is_top":false,"comment_ctime":1574082499,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5869049795","product_id":100039001,"comment_content":"这篇文章，印象最深的是了解设计模式，对研读源代码的重要性，经常一腔热血想要读源代码，又被源代码的复杂结构弄得晕头转向，希望通过这门课程的学习后，能够翻一翻有价值的源码，检验一下自己学习的成功，也希望老师可以推荐一下开始阅读源码的方法。","like_count":1},{"had_liked":false,"id":152414,"user_name":"姚布斯","can_delete":false,"product_type":"c1","uid":1335972,"ip_address":"","ucode":"09F958407F63FB","user_header":"https://static001.geekbang.org/account/avatar/00/14/62/a4/972b2b33.jpg","comment_is_top":false,"comment_ctime":1573994715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868962011","product_id":100039001,"comment_content":"1.掌握好设计模式相关知识，可以:1&gt;帮助你更好地应对面试；2&gt;帮助你告别“烂代码”；3&gt;帮助你轻松构建复杂系统；4&gt;帮助你更轻松地读懂源码；5&gt;帮助你更快地进阶高级甚至专家级别。<br>2.除了单例，建造者和代理模式以外，其他用的不是很多。。","like_count":1},{"had_liked":false,"id":152265,"user_name":"michael","can_delete":false,"product_type":"c1","uid":1005835,"ip_address":"","ucode":"69738B5801F0FD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/0b/fb876077.jpg","comment_is_top":false,"comment_ctime":1573955357,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868922653","product_id":100039001,"comment_content":"工作中比较常用单例和工厂，其他涉及的不多","like_count":1},{"had_liked":false,"id":151235,"user_name":"徐锦","can_delete":false,"product_type":"c1","uid":1116178,"ip_address":"","ucode":"5DFA43E12F685D","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/12/9c7ea83a.jpg","comment_is_top":false,"comment_ctime":1573690224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868657520","product_id":100039001,"comment_content":"作为一个测试人员，跟着大牛学习学习，力争能一个合格程序员要求自己","like_count":1},{"had_liked":false,"id":149521,"user_name":"越过大西洋","can_delete":false,"product_type":"c1","uid":1254936,"ip_address":"","ucode":"21FBC3BBCC23B4","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/18/ed6911b7.jpg","comment_is_top":false,"comment_ctime":1573264791,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868232087","product_id":100039001,"comment_content":"今年很有幸的参与了公司主业务相关代码的重构, 收获颇多:<br>1. 再糟糕的代码也要反复阅读理解每一行代码的意义才能保证重构后不会出现预期之外的结果 (这个过程整整花掉了整个重构的 2&#47;3 时间)<br>2. 在理解原业务和代码的基础上, 合理利用时序图, 输出各系统间交互情况; 利用流图输出业务逻辑<br>3. 小组内不断地针对重构前的时序图和代码进行讨论, 最终输出新流程的时序图以及流程图, 进行评审<br>4. 根据新的流程编写新的业务代码 (在流程非常清晰的情况下, 写出代码其实花的时间非常少)<br><br>编码的过程中简单的用到了面向对象的继承和封装, 依赖注入<br>在编写单元测试的过程中更能体会和发现代码中的一些设计缺陷甚至是过度设计","like_count":1},{"had_liked":false,"id":148822,"user_name":"听雨声淅沥","can_delete":false,"product_type":"c1","uid":1247350,"ip_address":"","ucode":"C975EE69A5D103","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/76/350f19ea.jpg","comment_is_top":false,"comment_ctime":1573091388,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868058684","product_id":100039001,"comment_content":"比较赞同作者观点 ，上学年大三，老师教授这门课的时候尽管说的清晰明白，老师也很厉害，但是仍然脱离不了一些书本的常见模型，我也能理解，当时毕竟是萌新。希望在这里看到更加真实有力的设计模式，将设计模式的魅力体现地更加淋漓尽致，我们大家共同进步。","like_count":1},{"had_liked":false,"id":148624,"user_name":"晨风破晓","can_delete":false,"product_type":"c1","uid":1321464,"ip_address":"","ucode":"F2BC46428A97B5","user_header":"https://static001.geekbang.org/account/avatar/00/14/29/f8/561c5be1.jpg","comment_is_top":false,"comment_ctime":1573039827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868007123","product_id":100039001,"comment_content":"告别烂代码，提高复杂代码的设计和开发能力，轻松阅读源码，轻松学框架","like_count":1},{"had_liked":false,"id":147675,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1572878594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867845890","product_id":100039001,"comment_content":"最近重构了一个项目，用到了观察者模式、模版模式、工厂模式、单例模式以及建造者模式。从扩展性和维护性升级了一版代码。","like_count":1},{"had_liked":false,"id":147654,"user_name":"‭ ‭ ‭ ‭","can_delete":false,"product_type":"c1","uid":1446588,"ip_address":"","ucode":"1A55B58FF70711","user_header":"https://static001.geekbang.org/account/avatar/00/16/12/bc/2a796c79.jpg","comment_is_top":false,"comment_ctime":1572876597,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867843893","product_id":100039001,"comment_content":"1 设计模式可以提高你在编写代码时的思维深度和广度。而不只是写一些可以实现业务、可以运行的代码<br>2 只用过单例设计模式，但是光光这一个模式你就需要思考要在什么场景下去使用它，你所写的单例代码是不是真的满足“单例”，是否具备安全性等等。<br>读一些源码也可以加深对设计模式的认识，观摩过Java的IO，Spring的DI，但都是很浅显，希望跟着争哥能让自己在设计模式上有着超出之前的认知，能回过头去思考当时在看代码时的所想所觉","like_count":1},{"had_liked":false,"id":147611,"user_name":"雷霹雳的爸爸","can_delete":false,"product_type":"c1","uid":1119490,"ip_address":"","ucode":"99BBA6D83DD11F","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/02/66f65388.jpg","comment_is_top":false,"comment_ctime":1572872963,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5867840259","product_id":100039001,"comment_content":"真正开始看设计模式，应该是在看重构之后，好像里面说的是设计模式为重构指明了目标，除了设计模式，SOLID设计原则对我影响可能更深…<br><br>要说起来，模板方法和策略模式是应用较多的两个，后者毫无疑问的感觉用spring依赖注入相当于怎么也绕不过去，但是现在看起来能遵循里氏替换的反倒很少，不过大多时候感觉还是无伤大雅；前者一方面其实也是受spring影响较深，变体的模板回调如jdbc template的风格，即便try resource 时代之后也常常用于隔离异常处理和主题流程部分，另一方面模板方法适合大流程稳定，局部逻辑多样化的场景，非常适合隔壁犬类一天八变的折腾这屋子里灵长类这种无奈玩法<br><br>另外第二讲才发现，这次老师没用本尊的声音？","like_count":1},{"had_liked":false,"id":147520,"user_name":"Geek_862694","can_delete":false,"product_type":"c1","uid":1366022,"ip_address":"","ucode":"977B4195C7CFB1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLBP7piae8iaHU7w2a4TyLKPFI7xiaia3Hias2ibMPftnFEic0lqGU315U70peQs7X3Kyd3bDgJjF6nBQg7xA/132","comment_is_top":false,"comment_ctime":1572868008,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5867835304","product_id":100039001,"comment_content":"了解常用的几个设计模式，但是如何选择合适的设计模式去应用是选择要掌握的","like_count":1},{"had_liked":false,"id":147420,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1572863048,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5867830344","product_id":100039001,"comment_content":"我来聊一聊我对设计模式的感悟吧，在项目中要做活动，而所有的活动都千篇一律差不多，但是我竟然没能很好的复用代码，导致加一个活动就要加一个文件！让我深刻体会到面向对象和设计模式的重要性！","like_count":1,"discussions":[{"author":{"id":1079816,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","nickname":"Aaron Cheung","note":"","ucode":"03972759C53667","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":45063,"discussion_content":"成大大👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573002275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1236766,"avatar":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","nickname":"传说中的成大大","note":"","ucode":"103543D6E706BF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1079816,"avatar":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","nickname":"Aaron Cheung","note":"","ucode":"03972759C53667","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46767,"discussion_content":"你是哪位？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573204207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":45063,"ip_address":""},"score":46767,"extra":""}]}]},{"had_liked":false,"id":360100,"user_name":"Geek_5b5057","can_delete":false,"product_type":"c1","uid":3202816,"ip_address":"河北","ucode":"6B81DBE4BDEC75","user_header":"","comment_is_top":false,"comment_ctime":1666174375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666174375","product_id":100039001,"comment_content":"设计模式就像《三十六计》，提炼了开发中普遍适用、公认的“套路”，能大大提高开发效率，而正因为是普适的，在学习他人的好代码时，也能快速看透其“计谋”。","like_count":0},{"had_liked":false,"id":359321,"user_name":"Geek_ab2b78","can_delete":false,"product_type":"c1","uid":3195956,"ip_address":"天津","ucode":"9AE87C74B295B1","user_header":"","comment_is_top":false,"comment_ctime":1665411942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665411942","product_id":100039001,"comment_content":"话题讨论：<br>1. 完全同意王争老师的观点，感受最深的就是设计模式对阅读源码的重要性。在阅读Spring MVC源码中，如果对适配器和策略模式足够了解的话会发现Spring MVC源码基本都是在复用这两个设计模式。<br><br>2. 个人开发中比较得意的一个设计模式就是模仿netty的责任链机制，再结合发布订阅模式，实现了事件驱动下的回调一个责任链，且责任链是可排序的，事件的传递是可选择性终止的。","like_count":0},{"had_liked":false,"id":358477,"user_name":"叶落化离愁","can_delete":false,"product_type":"c1","uid":2189515,"ip_address":"浙江","ucode":"3FB48B90DD3DE0","user_header":"https://static001.geekbang.org/account/avatar/00/21/68/cb/95261184.jpg","comment_is_top":false,"comment_ctime":1664348612,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1664348612","product_id":100039001,"comment_content":"非常重要，也是在面临到实际挑战才发现这是一个不可或缺的内功，不是一朝一夕能练成的。","like_count":0},{"had_liked":false,"id":358370,"user_name":"Playmaker","can_delete":false,"product_type":"c1","uid":3017263,"ip_address":"中国香港","ucode":"48652E8135B54B","user_header":"https://static001.geekbang.org/account/avatar/00/2e/0a/2f/477f02d1.jpg","comment_is_top":false,"comment_ctime":1664251102,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1664251102","product_id":100039001,"comment_content":"1. 不同的设计模式就像足球比赛中的不同的阵型，定下整个比赛的基调，选择正确的阵型可以达到事半功倍的效果，学习不同的阵型也利于参透其他队伍的比赛<br><br>2. 过往的项目中有一个客服分配策略的项目，其中有用到策略模式，用于新增分配策略时能更好的适配","like_count":0},{"had_liked":false,"id":356397,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"浙江","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1662261448,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662261448","product_id":100039001,"comment_content":"设计模式能让代码的实现更优雅，看着更舒服，虽说不懂设计模式，实际选择，代码也是照样写，但是写出来的是烂代码，堆砌出来的代码，看着像是面向过程的，没有深度思考在里面。","like_count":0},{"had_liked":false,"id":355757,"user_name":"Stay_Gold","can_delete":false,"product_type":"c1","uid":1119904,"ip_address":"北京","ucode":"ACB8DCD2EF8F95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2NTTABPFibg2k9tZscOOKx9wu80a85d5HspCorO9Nibj7Z7q9v1icPTVm5ia52r0RCzEaA/132","comment_is_top":false,"comment_ctime":1661736301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661736301","product_id":100039001,"comment_content":"设计模式的重要性看法：<br>1.现实世界业务总是变化的，如果代码经常要随着业务变动而有大的变动的话，难免工作效率低下，bug多。<br>2.大部分好的设计模式能让代码更加容易理解，这样不管是代码交给其他人处理，还是自己来处理都能更快速的开展工作。<br>3.管理复杂度是软件的终极主题，大部分软件的失败都是因为复杂度爆炸导致的。但是设计模式能帮我们很好的管理软件的各种复杂度。<br>用过的设计模式：<br>1.单例模式：EFCore的context是典型的单例模式。保证系统中始终只有一个实例，降低多实例操作数据库导致的各种死锁，阻塞等问题。<br>2.工厂模式：不同的情况下，通过构造函数也好，通过函数传递也好，生成不同的对象实例。<br>3.其他有些比如观察者等设计模式很多也都是通过框架使用的，很少自己独立去实现各种设计模式","like_count":0},{"had_liked":false,"id":355438,"user_name":"May","can_delete":false,"product_type":"c1","uid":3153982,"ip_address":"上海","ucode":"C34CBE48276ADA","user_header":"https://static001.geekbang.org/account/avatar/00/30/20/3e/91c68049.jpg","comment_is_top":false,"comment_ctime":1661390493,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661390493","product_id":100039001,"comment_content":"1、设计模式非常重要，以前读书时没意识到，工作了才开始意识到。实习和现在正式工作都是做开源大数据内核开发，刚开始上手看源码非常复杂，像是在读天书。现在的感触是设计模式的用处体现在读+改源码。现在的大数据软件设计非常优秀且复杂（flink、spark等），熟悉设计模式才能get到整个框架的原理、流程、设计思想。其次是改源码，为了保证拓展性、可维护性，必须使用设计模式。<br>2、最近的一个issue似乎用到了职责链模式（不是很确定），后面看到了再研究是否重构。","like_count":0},{"had_liked":false,"id":355249,"user_name":"高帅","can_delete":false,"product_type":"c1","uid":3077992,"ip_address":"北京","ucode":"50AC1404D20D23","user_header":"","comment_is_top":false,"comment_ctime":1661224514,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661224514","product_id":100039001,"comment_content":"早学，收益终生，对自己负责。","like_count":0},{"had_liked":false,"id":352260,"user_name":"hrbt0o","can_delete":false,"product_type":"c1","uid":1632138,"ip_address":"","ucode":"AF513292EEE137","user_header":"https://static001.geekbang.org/account/avatar/00/18/e7/8a/dc0478c6.jpg","comment_is_top":false,"comment_ctime":1658485400,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658485400","product_id":100039001,"comment_content":"自己用到的，应该是适配器模式，公司做了聊天项目，要对接第三方软件（企微、飞书、钉钉等），由于不同的第三方在相同的消息类型中（如文本类型、图片类型）使用的格式不一样，所以通过适配模式，将这些不同的第三方消息格式转为公司项目使用的消息格式。","like_count":0},{"had_liked":false,"id":351534,"user_name":"Jasper","can_delete":false,"product_type":"c1","uid":1202174,"ip_address":"","ucode":"A07ABF45D39089","user_header":"https://static001.geekbang.org/account/avatar/00/12/57/fe/beab006d.jpg","comment_is_top":false,"comment_ctime":1657871085,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1657871085","product_id":100039001,"comment_content":"2022打卡","like_count":0},{"had_liked":false,"id":350920,"user_name":"SICUN","can_delete":false,"product_type":"c1","uid":1254261,"ip_address":"","ucode":"22A384904EB9E9","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/75/2b599841.jpg","comment_is_top":false,"comment_ctime":1657347316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657347316","product_id":100039001,"comment_content":"1.面试时会被别人问到也会用来问别人作为编码能力的考察；晋升时可通过阐述设计模式如何与业务结合作为答辩亮点；对阅读laravel框架源码很有帮助，因为laravel框架使用了大量设计模式<br>2.在交易系统中使用工厂模式创建处理 支付宝&#47;微信支付的服务类","like_count":0},{"had_liked":false,"id":348381,"user_name":"Mr.Jiang","can_delete":false,"product_type":"c1","uid":3023788,"ip_address":"","ucode":"AA90AA926E8DE8","user_header":"https://static001.geekbang.org/account/avatar/00/2e/23/ac/4d5217bd.jpg","comment_is_top":false,"comment_ctime":1655037530,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655037530","product_id":100039001,"comment_content":"1. 去年觉得设计模式固然重要，但始终不及其他技术及底层原理重要，觉得起码需要再积累一年经验再学习。<br><br>但是经过现在两年工作的经历和体会，发现其实框架源码也好，技术底层也罢，还有业务代码的质量，技术组件代码的质量，都需要设计模式。<br><br>王争老师说得好，框架源码也是需要基础扎实才可以看得进去的。对于这点我深有体会，比如我部门用到了消息队列，基于SpringCloudStream封装，但是里面写的其实并不算太好，也用了很多设计，但是我始终get不到设计的点，所以只看懂了皮毛。还有其他的一些源码，比如Kafka客户端，Spring的等等。甚至包括我们部门的业务代码，比如订单模块，营销模块，OMS模块，都用到了很多设计模式，自己了解电商全貌的时候无法理解设计的点，所以才醒过来发现设计模式的重要性，而且从现在就要开始去学，去实战。<br><br>说几个能让自己坚持下去的理由吧：<br>1.1 代码变得好看、易扩展、易读、易维护，自己赏心悦目，不再觉得是屎山，烂代码，并且不再畏惧去在里面加新功能以及改动。<br><br>1.2 夯实面向对象及设计思想，能有利于读懂其他大牛，优秀开源框架的代码和领会其设计思想，不再停留在功能和代码表面。<br><br>1.3 从功利的角度，为以后的面试问到这个能回答出来，且能丰富简历，为简历添砖加完。<br><br>1.4 从普通程序员-&gt; 优秀程序员的必备技能之一。<br><br><br>2. 在过往的项目经验中，我用到了和看到了以下的设计模式：<br><br>2.1 策略模式，在OMS系统对接多渠道订单，实现订单下载，转化等逻辑时，天然的多渠道就是多个策略，后续有新的平台如拼多多，抖音，直接添加新的平台策略即可。还有在上家小公司对接企业微信的时候，因为企业微信消息会有很多消息类型，如文本类型，卡片类型等，不同的消息类型需要被路由到不同的handler处理器里面进行处理，策略模式也得到了很多的使用。<br><br>2.2 责任链模式，在营销模块中，比如促销引擎的设计，维护了campaign的条件和奖励，当需要查询临时订单的促销优惠时，需要根据订单上的信息，经过规则场景过滤器责任链进行过滤判断，当前订单是否满足某个活动的优惠条件。<br><br>除此之外，责任链还可以用在订单取消队列中的同一模块的统一回撤链路，比如营销模块的优惠券，促销计数器等的链式回滚。<br><br>还可以用于流程器（类似于小型的任务编排功能），比如一个审批流程，需要经过固定的审批数据构建，数据校验，异常检查，审批结果保存，审批错误记录等这几个节点，都是通过一个bo贯穿整条链路做处理。<br><br>模版+抽象类也常用","like_count":0},{"had_liked":false,"id":348324,"user_name":"FOCUS","can_delete":false,"product_type":"c1","uid":2942404,"ip_address":"","ucode":"C1AD031F155EFE","user_header":"","comment_is_top":false,"comment_ctime":1654960111,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654960111","product_id":100039001,"comment_content":"后悔看晚了，刚做完一个项目，很好的练手机会，却没有利用起来。但是之前看过netty的源码，看到了大量责任链模式和观察者模式的使用。还有gateway，也有大量的责任链模式。<br>立个flag，学好设计模式，在下个项目中实操起来！","like_count":0},{"had_liked":false,"id":347224,"user_name":"二饼","can_delete":false,"product_type":"c1","uid":2415448,"ip_address":"","ucode":"48120565D135F7","user_header":"https://static001.geekbang.org/account/avatar/00/24/db/58/a7a0a85b.jpg","comment_is_top":false,"comment_ctime":1653826965,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1653826965","product_id":100039001,"comment_content":"去年出来工作，目前在普通的小公司搬砖。<br><br>Q: 聊一聊你对设计模式相关知识的重要性的看法；<br>在上学的时候有听说过设计模式，但是对于其的了解仅限于听说，脑海中只有一个粗浅的概念。出来工作后，看过几本相关的书，还翻过gof（不过没有看下去...），但是一直都是很懵懂的状态，只能讲几句理论，但是这到底是个什么东西，以及怎么使用，我是真的不清楚了。<br>现在工作上的业务虽然比较简单，但是我也从平常的 review  和 代码设计上发现了很多设计和组织上的不足，再加上有意识地读源码，像小争哥说的一样，从设计模式上就看不明白，因此只能更加上心地学习，入了这个专栏，希望能让量变成功变成质变！<br><br><br>Q: 在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>有想过在资源付费模块中使用建造器和组合模式用来计算，但是因为太理论，最终还是没有实现到代码中。不过像是经常遇见的单例、迭代器、观察者这些都可以在一些框架源码中接触到。","like_count":0},{"had_liked":false,"id":345683,"user_name":"钱鹏 Allen","can_delete":false,"product_type":"c1","uid":2518863,"ip_address":"","ucode":"7E95E82C0717DA","user_header":"https://static001.geekbang.org/account/avatar/00/26/6f/4f/3cf1e9c4.jpg","comment_is_top":false,"comment_ctime":1652508411,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652508411","product_id":100039001,"comment_content":"聊一聊你对设计模式相关知识的重要性的看法；在你过往的项目开发中，有没有用过某种设计模式？<br>设计SQL的时候，也需要借鉴设计模式，不然整体的运行时间指数级别增加。<br><br>是在什么场景下应用的？解决了什么问题？<br>目前正在设计公司的数仓分层，需要合理的代码结构。","like_count":0},{"had_liked":false,"id":345573,"user_name":"坚定的抢手","can_delete":false,"product_type":"c1","uid":2831233,"ip_address":"","ucode":"E5A5EC6196C518","user_header":"https://static001.geekbang.org/account/avatar/00/2b/33/81/3693f4d9.jpg","comment_is_top":false,"comment_ctime":1652409827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652409827","product_id":100039001,"comment_content":"1. 我是一个cpp开发者，每次让做设计，写设计文档，都不知道写什么。看了大佬说自己第一次做通用模块的心声，才发现，原来是因为自己不懂设计模式。java组的同事好像这方面就强很多，可能他们一开始就在研究这个方向吧。理解设计模式并灵活运用以后，最大的好处就是在设计的时候，知道自己应该考虑什么，而不是走一步看一步。<br>2. 单例模式，观察者模式，策略模式等都用过，不过用的不细致，可能勉强符合一些设计模式吧。","like_count":0},{"had_liked":false,"id":345357,"user_name":"林风自在","can_delete":false,"product_type":"c1","uid":1123468,"ip_address":"","ucode":"C347C10040FD55","user_header":"https://static001.geekbang.org/account/avatar/00/11/24/8c/9f38c9ac.jpg","comment_is_top":false,"comment_ctime":1652230937,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652230937","product_id":100039001,"comment_content":"设计模式感觉重在于思想，而并非局限于23种设计模式，在实际项目开发中要避免因为设计模式而去用设计模式。<br><br>项目实际运用的还不少，比如单例模式，抽象工厂模式，装饰器模式，网关过滤器的时候用了责任链模式","like_count":0},{"had_liked":false,"id":345181,"user_name":"姚钫","can_delete":false,"product_type":"c1","uid":1498146,"ip_address":"","ucode":"ECB8B0627A4F9B","user_header":"https://static001.geekbang.org/account/avatar/00/16/dc/22/41a390ae.jpg","comment_is_top":false,"comment_ctime":1652092035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652092035","product_id":100039001,"comment_content":"220509 day01<br>1. 为了面试 2.能写出高质量的代码 3.提高复杂的代码设计和开发能力 4.阅读优秀框架的源码 5.更好的职业发展<br>2.做过支付项目, 要对支付方式进行路由,因为有很多渠道,之前都是使用if else,后改用工厂+策略,将整个流程进行抽象,接入新渠道只要继承一个抽象类重新自己逻辑即可","like_count":0},{"had_liked":false,"id":345087,"user_name":"lakeslove","can_delete":false,"product_type":"c1","uid":1277081,"ip_address":"","ucode":"65E14D29D3C981","user_header":"https://static001.geekbang.org/account/avatar/00/13/7c/99/4dac6ce6.jpg","comment_is_top":false,"comment_ctime":1652011794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652011794","product_id":100039001,"comment_content":"19年就买了，22年才开始学。<br>设计模式的理论学过挺多遍，但是和工作关联不上。<br>具体体现在：<br>1、面对复杂的业务无法很快的设计出可扩展的架构<br>2、知道代码很烂，但是重构代码又无从下手<br>3、同事写得用了很多设计模式的代码，看起来很吃力","like_count":0},{"had_liked":false,"id":344901,"user_name":"陌兮","can_delete":false,"product_type":"c1","uid":1415619,"ip_address":"","ucode":"00CE47CAECD5CD","user_header":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","comment_is_top":false,"comment_ctime":1651845146,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651845146","product_id":100039001,"comment_content":"每次需要设计组件开发的时候。总感觉脑海里的解法不够优雅，但是又想不到还有什么可以优化的。如果组件复杂，又总会引入一些相关性不大的类，很是头疼","like_count":0},{"had_liked":false,"id":343062,"user_name":"没有軒的筝","can_delete":false,"product_type":"c1","uid":1332535,"ip_address":"","ucode":"8B6A8A1B5472EE","user_header":"https://static001.geekbang.org/account/avatar/00/14/55/37/57aeb6af.jpg","comment_is_top":false,"comment_ctime":1650614784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650614784","product_id":100039001,"comment_content":"      之前以为程序是给机器看的，怎么写就行，只要把功能完成，但是根据工作的时间越来越长，发现程序是给开发者看的，如果设计不好，给后期的维护带来很大的困难，真是体会到了该一处而动全身那种感觉。<br>       设计模式近几年也一直在学，但是一直学不到真髓，有些程序设计不知道该用哪种设计模式，即使最后选定了设计模式，也感觉不是最好的设计。","like_count":0},{"had_liked":false,"id":341373,"user_name":"Hero","can_delete":false,"product_type":"c1","uid":1321726,"ip_address":"","ucode":"33D7939CC3C815","user_header":"https://static001.geekbang.org/account/avatar/00/14/2a/fe/197449a0.jpg","comment_is_top":false,"comment_ctime":1649570380,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649570380","product_id":100039001,"comment_content":"1:工作两年多的程序员，一直知道设计模式很重要，但是一直没有学习，处于道理我都懂，就是没行动的状态。根本原因还是自己不作为，想呆在自己的舒适区，不想学习新东西，最近想学习Spring的源码，发现无从下手，根本看不下去，发现真的是自己基础太差了。现在正在跟着廖雪峰老师的Java教程复习基础知识，跟着王争老师的课程学习设计模式，把这两个课程看完，准备在系统的学习一下Spring知识和源码。<br>2:我用过的设计模式<br>单列模式：<br>建造者模式：<br>工厂模式：","like_count":0},{"had_liked":false,"id":341344,"user_name":"白云","can_delete":false,"product_type":"c1","uid":2667052,"ip_address":"","ucode":"289E2E8A3EBF1B","user_header":"https://static001.geekbang.org/account/avatar/00/28/b2/2c/09fc5b7b.jpg","comment_is_top":false,"comment_ctime":1649558816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649558816","product_id":100039001,"comment_content":"1、不想被吐槽，这个太有感觉了，代码review的时候都不想让别人看，都是基础的业务逻辑代码堆砌，框架是leader搭的，稍微复杂点就犯懵，这个时候学习设计模式，把代码写的易扩展，好维护就相当重要了。<br>2、说来惭愧，好像没有用到过设计模式，知道项目里有用观察者模式，但是我那是别人写的，","like_count":0},{"had_liked":false,"id":341231,"user_name":"唐宋元明清","can_delete":false,"product_type":"c1","uid":1758582,"ip_address":"","ucode":"744941454E86B4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJS1VejyuiaIGYT7cnpV15gGGvW9jarjD6tCUDt7JVGicicCF6stMjBRKj6NKic4ZfxYtzz75eiaDL5AnA/132","comment_is_top":false,"comment_ctime":1649434300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649434300","product_id":100039001,"comment_content":"设计模式本身不重要，重要的掌握模式的理念和初衷，即设计模式的原则。从原则出发，去想下设计模式的设计思路","like_count":0},{"had_liked":false,"id":340991,"user_name":"Geek_441001","can_delete":false,"product_type":"c1","uid":2421724,"ip_address":"","ucode":"159C7D1965FDD9","user_header":"","comment_is_top":false,"comment_ctime":1649257552,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649257552","product_id":100039001,"comment_content":"课堂讨论：<br>1.设计模式重要性的看法。<br>已经写了几年代码了，就像王老师说的一直是代码的堆砌。代码复用率低，即使抽出来成单独的函数，对于此函数应该放到哪一个类中、项目如何分层等问题的认知都比较薄弱。甚至开始怀疑自己是不是在面向对象编程。最近公司来了字节的大佬，基于洋葱架构开发了通用单体框架，代码之清新脱俗，让我意识到自己的编码能力确实需要锻炼下。<br><br>2.以往使用的设计模式。<br>实际上没有特地去使用设计模式，但是比如策略模式、简单工厂模式等，可是不知不觉就在代码里提现出来了。另外还有一些框架当中的设计模式，觉得用得很好，也就参考其实现了。比如责任链模式，在orm框架中用得很频繁，觉得很不错也有去借鉴其实现方式。","like_count":0},{"had_liked":false,"id":340394,"user_name":"搬砖农民工👩‍🌾","can_delete":false,"product_type":"c1","uid":2873541,"ip_address":"","ucode":"50E0602562E968","user_header":"https://static001.geekbang.org/account/avatar/00/2b/d8/c5/6a553741.jpg","comment_is_top":false,"comment_ctime":1648796796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648796796","product_id":100039001,"comment_content":"针对争哥这篇文章，在我个人观点中主要是想让我们思考几个问题：<br>1、为什么面试者都会问到设计模式，是习惯，还是一种面试流程，还是因为在我们编程中占着举足轻重的位置呐？<br>2、在自己开发过程中有没有反省过或者写完之后自己去优化自己的代码，防止后人吐槽自己的代码，上一篇争哥也提到了代码的可读性问题，这不仅是对自己的负责，更是对下位接收代码人尊重？<br>3、为什么每个开发人员都要去学习设计模式？它能带给我们什么？这些在这争哥的文章都有各自的答案，耐心斟读，可以体会到不同的含义！<br>对一个刚步入java领域的新成员，我对设计模式的认识也并不深入，只想让自己变强，让自己的知识视野更宽阔一些吧；<br>对于问题，在我们开发中有着许许多多的设计模式，在一些框架中可以看到很多成熟的设计模式的使用；但前提要知道设计模式的形式，看懂了形式，才会更容易的去看里面的细节和逻辑；<br>在我开发中经常用的设计模式也就两三种：<br>一是：策略模式--》简单来说，我们出行会有多种形式，可以做出租车，公交，单车等等，但每一个选择就是一组策略，而在实际开发中我们可以定义一个接口，定义枚举等相关类来实现具体的结果；<br>二是：模板模式--》在我个人看是主要是定义一些操作流程，并把这些操作流程延迟下来，具体场景我们需要搭建自己模板<br>三是：单列模式，想必这个大家也经常用得到吧<br>所以在我看来设计模式在我们编程中很重要，但常用的设计模式并不是很多，它实现高内聚低耦合的效果，方便对项目的增加和扩展等<br>以上是我个人观点，如果哪里不对，还请大佬对一个刚初入java世界的萌新指出不对之处，本人在此感谢！","like_count":0},{"had_liked":false,"id":340043,"user_name":"王华杰","can_delete":false,"product_type":"c1","uid":1666474,"ip_address":"","ucode":"CA07326F8A04B7","user_header":"https://static001.geekbang.org/account/avatar/00/19/6d/aa/34b6ecff.jpg","comment_is_top":false,"comment_ctime":1648552979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648552979","product_id":100039001,"comment_content":"非常重要，因为我代码就写的很烂，bug频出。一般用的比较多的就是工厂模式。","like_count":0},{"had_liked":false,"id":339564,"user_name":"鸭duck农民工","can_delete":false,"product_type":"c1","uid":1862908,"ip_address":"","ucode":"F2D17893DEAD34","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJWxIyKo31BtkbEKTbnBP1roU3MotxYgx0RkkK0hlpQzXNVuIM6wkqMndtXvwT5t03EUX95El0UFw/132","comment_is_top":false,"comment_ctime":1648189703,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648189703","product_id":100039001,"comment_content":"我觉得设计模式的重要性主要有三点：<br>1.应对复杂的需求。如果不懂设计模式，很容易写出只满足当前需求的代码，缺乏可维护性、可拓展性；<br>2.利于优秀框架及源码的阅读。其中涉及较多设计模式，如果不懂设计模式的话，可能理解起来比较慢，或者不知道为什么要使用这些设计模式；<br>3.积累内功，由此及彼。通过积累设计模式的使用经验，为后续设计复杂系统提供底层基础。","like_count":0},{"had_liked":false,"id":339168,"user_name":"加油(ง •̀_•́)ง🐻","can_delete":false,"product_type":"c1","uid":2455440,"ip_address":"","ucode":"48C656329DF89C","user_header":"https://static001.geekbang.org/account/avatar/00/25/77/90/ae705448.jpg","comment_is_top":false,"comment_ctime":1647954099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647954099","product_id":100039001,"comment_content":"希望可以有助于看源码","like_count":0},{"had_liked":false,"id":337736,"user_name":"陈君宙","can_delete":false,"product_type":"c1","uid":1343018,"ip_address":"","ucode":"50A6420F9FAADE","user_header":"https://static001.geekbang.org/account/avatar/00/14/7e/2a/98358fe0.jpg","comment_is_top":false,"comment_ctime":1646998042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646998042","product_id":100039001,"comment_content":"感觉设计模式重要 但是出来工厂 单利 基本不认得","like_count":0},{"had_liked":false,"id":335130,"user_name":"Geek_58fcf2","can_delete":false,"product_type":"c1","uid":2918421,"ip_address":"","ucode":"3B052EBC012E8B","user_header":"","comment_is_top":false,"comment_ctime":1645349278,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1645349278","product_id":100039001,"comment_content":"设计模式：<br>1.面试<br>2.提升编码设计能力写出高质量代码<br>3.复杂业务编码设计和开发能力<br>4.更容易看懂别人的源代码<br>5.提升职业竞争力","like_count":0},{"had_liked":false,"id":334794,"user_name":"Beginner!","can_delete":false,"product_type":"c1","uid":2302099,"ip_address":"","ucode":"4A9C4E27D7E436","user_header":"https://static001.geekbang.org/account/avatar/00/23/20/93/dac66325.jpg","comment_is_top":false,"comment_ctime":1645111861,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645111861","product_id":100039001,"comment_content":"自己看法:使用设计模式的目的，降低代码耦合度，便于扩展和复用。","like_count":0},{"had_liked":false,"id":334707,"user_name":"Geek_f23551","can_delete":false,"product_type":"c1","uid":2916054,"ip_address":"","ucode":"CA8147BC812D59","user_header":"","comment_is_top":false,"comment_ctime":1645086394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645086394","product_id":100039001,"comment_content":"打卡one day：<br>学好设计模式相关知识，我觉得可以让自己在设计代码的时候能够写出高质量的代码，给别人一种高级感<br>在公司实习的过程中，发现一些源码的设计中使用了单例模式创建实例对象。还有一些使用了工厂模式                                                                                                ","like_count":0},{"had_liked":false,"id":333877,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1644568499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644568499","product_id":100039001,"comment_content":"我记得耗子叔说过，虽然有人讲不要过度的设计，但是能现在设计的代码，就要重点去设计，等到你要改东西的时候，你会感激那时候你的设计。<br>","like_count":0},{"had_liked":false,"id":333396,"user_name":"Geek_1af452","can_delete":false,"product_type":"c1","uid":2908485,"ip_address":"","ucode":"2FF76FB24B3FD1","user_header":"","comment_is_top":false,"comment_ctime":1644324005,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1644324005","product_id":100039001,"comment_content":"交作业：<br>1、非常重要，不然看源代码真的是一头雾水<br>2、大部分开发工作都是拧螺丝，有幸被leader安排了一次系统重构，大大提高了不同算法接入的效率，并将分位置预估能力完美复用到全场景","like_count":0},{"had_liked":false,"id":333013,"user_name":"Tony Lai","can_delete":false,"product_type":"c1","uid":1903111,"ip_address":"","ucode":"E3D8B8933C9151","user_header":"https://static001.geekbang.org/account/avatar/00/1d/0a/07/c15b3b85.jpg","comment_is_top":false,"comment_ctime":1643959320,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1643959320","product_id":100039001,"comment_content":"作业：<br>问题1:<br>我觉得确实设计模式是对我们日常开发来说是很重要的一点，是前人的一些智慧的结晶，对有些特定的问题可以有些固定的解决方法和套路，可以让我们避开很多的坑，这些设计模式的思想比如单一原则，开闭原则，接口隔离原则，迪米特法则，依赖倒置原则，这些基本的原则可以提高我们代码的，可读性，可复用性，可维护性，让代码更加健壮，易读，易懂，但是说实话我自己只是知道这些东西，真正到使用的时候还是用的很少，比如我知道用策略模式可以减少if -else的代码<br>问题2:<br>在过往的项目中用的多的就是构建者模式，用来构建一些复杂的对象，解决了对于复杂对象创建容易出错的问题，和一些单例模式创建全局唯一的对象<br><br>下一步行动<br>   自己的敲的代码偏少，要在接下来的学习过程中除了理论知识的学习还大量的去实践，在项目中多用<br>   例外多看看评论区一些优秀的评论，内化为自己的知识<br>","like_count":0},{"had_liked":false,"id":331712,"user_name":"Geek_1511df","can_delete":false,"product_type":"c1","uid":2828097,"ip_address":"","ucode":"5BDD0CEC52B96E","user_header":"","comment_is_top":false,"comment_ctime":1642733386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642733386","product_id":100039001,"comment_content":"我很low的, 感觉平时的工作基本就是CRUD, 我也试图去想办法优化代码但是不得其法啊, 每次学习设计模式看着好像都懂了, 但是到了实际工作中就是应用不上, 以致于我现在都是要优化某一部分的代码都是去查设计模式看看适用于哪种, 做不到信手拈来","like_count":0},{"had_liked":false,"id":330790,"user_name":"李兴振","can_delete":false,"product_type":"c1","uid":2004552,"ip_address":"","ucode":"78E54478F38DC1","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/48/a0c6a06c.jpg","comment_is_top":false,"comment_ctime":1642163459,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642163459","product_id":100039001,"comment_content":"现在开始学起吧 设计模式 项目中也用 但系统性不强","like_count":0},{"had_liked":false,"id":328302,"user_name":"require","can_delete":false,"product_type":"c1","uid":2820671,"ip_address":"","ucode":"3AA3DCE0CD73E6","user_header":"","comment_is_top":false,"comment_ctime":1640658700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640658700","product_id":100039001,"comment_content":"设计模式就是一种套路，就像是xx剑谱，即使功力再深厚，最终还是得回归到剑法，才能最大程度发挥实力<br>","like_count":0},{"had_liked":false,"id":328199,"user_name":"Geek_1188b5","can_delete":false,"product_type":"c1","uid":2877774,"ip_address":"","ucode":"1A9B66D5F38436","user_header":"","comment_is_top":false,"comment_ctime":1640601350,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640601350","product_id":100039001,"comment_content":"设计模式主要是解决代码的易读性，维护性，以及解耦。在实际的项目中可能用的比较多的就是单例，观察者，工厂这类常见的设计模式。我觉得其他的设计模式没有用这要还是不够懂他们。","like_count":0},{"had_liked":false,"id":326767,"user_name":"学不动了","can_delete":false,"product_type":"c1","uid":1235562,"ip_address":"","ucode":"6855C982ECC3A8","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/6a/6b96edbd.jpg","comment_is_top":false,"comment_ctime":1639665446,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639665446","product_id":100039001,"comment_content":"1.设计模式就是一套传承多年的拳法，每一个招式都有其精妙之处。不懂设计模式，面对复杂多变的需求，写出的代码后期会变成一坨shit。掌握设计模式，写出易读、易维护高质量的代码，自己赏心悦目，同时看到也有面～<br>2.工作中肯定有用到某些设计模式，但是我不认得它们，不知道叫什么～","like_count":0},{"had_liked":false,"id":323911,"user_name":"KeChin","can_delete":false,"product_type":"c1","uid":2550881,"ip_address":"","ucode":"57BF02DB1201B9","user_header":"","comment_is_top":false,"comment_ctime":1638210975,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638210975","product_id":100039001,"comment_content":"好的設計模式可以做到容易維護、閱讀、擴展。<br><br>有用spring 做開發，所以應該算用過singleton 以及prototype、再來是beanFactory 簡單工廠模式。日常開發應該有用過template 以及裝飾者模式。<br><br>","like_count":0},{"had_liked":false,"id":322855,"user_name":"Geek_225452","can_delete":false,"product_type":"c1","uid":2850015,"ip_address":"","ucode":"EAD6D398C2A42E","user_header":"","comment_is_top":false,"comment_ctime":1637633862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637633862","product_id":100039001,"comment_content":"为什么要学习设计模式？<br>1. 如果把编程当做我们完成一件复杂的事的话，设计模式就是我们的行为准则，知道我们哪些可以做，哪些不可以做，怎么做才能少走弯路<br>2. 大型的项目必定是满足，易读、易扩展、易维护的，因此比定是结构逻辑比较强的，学习设计模式有利于学习优秀的开源代码设计，提升自己的整体逻辑设计思维<br>3. 设计模式是一种思维方式，有时候并不能给我们提供解决方案，但是让我们在应对复杂问题时，知道从哪下手，行程一套分析处理框架","like_count":0},{"had_liked":false,"id":321024,"user_name":"auch","can_delete":false,"product_type":"c1","uid":2227105,"ip_address":"","ucode":"462B7410040102","user_header":"https://static001.geekbang.org/account/avatar/00/21/fb/a1/601c3808.jpg","comment_is_top":false,"comment_ctime":1636624453,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636624453","product_id":100039001,"comment_content":"设计模式相关知识的重要性<br> 1. 更好的理解模块设计，架构设计的思想与原则<br> 2. 提升自我知识水平，使自身的代码水平超越CRUD<br> 3. 为阅读源码做准备<br>在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br> 1. 有用过模板方法，对要开发的众多组件抽象出其共性，然后不同的组件有其不同的实现，解析了组件耦合的问题<br><br><br> <br>","like_count":0},{"had_liked":false,"id":320228,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":2763179,"ip_address":"","ucode":"3588850B3370C8","user_header":"https://static001.geekbang.org/account/avatar/00/2a/29/ab/59a6e437.jpg","comment_is_top":false,"comment_ctime":1636162717,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1636162717","product_id":100039001,"comment_content":"好处很多，过度设计的问题也经历过。我其实在大学就开始接触设计模式，现在依然记得第一次看gof书籍的感觉，那震撼程度，绝对比李安受到的震撼大好几倍。后来也继续学习设计模式并应用到项目中。<br><br>最常用的几个模式：builder，装饰器，监听者，命令，策略，当然还有最最常用且滥用的单例，每个项目总能找到几个不同的manager😂","like_count":0},{"had_liked":false,"id":319464,"user_name":"海魂","can_delete":false,"product_type":"c1","uid":1126307,"ip_address":"","ucode":"850CB4FFA5C026","user_header":"https://static001.geekbang.org/account/avatar/00/11/2f/a3/6aadcde7.jpg","comment_is_top":false,"comment_ctime":1635821235,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635821235","product_id":100039001,"comment_content":"笔记：<br>１．设计模式在面对复杂的业务，SDK设计，阅读源码这这个方面我认为很有帮助．<br>２．我在工作中实际用到的最多就是单例了","like_count":0},{"had_liked":false,"id":319242,"user_name":"慢动作","can_delete":false,"product_type":"c1","uid":2184311,"ip_address":"","ucode":"F47BDAEC694E32","user_header":"https://static001.geekbang.org/account/avatar/00/21/54/77/b0986fed.jpg","comment_is_top":false,"comment_ctime":1635692212,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635692212","product_id":100039001,"comment_content":"1、记得上大学时，c++老师就拿着一本设计模式相关的书籍，让我们去看，说后边大有用处。再结合自己校招和工作的经历，让我对如何写出高质量代码有很大的兴趣。希望可以借助这门课程，提高自己的代码水平。<br>2、使用的比较简单的工厂模式，用于获取不同的handler。","like_count":0},{"had_liked":false,"id":318731,"user_name":"流云追风","can_delete":false,"product_type":"c1","uid":2611950,"ip_address":"","ucode":"16D738406CB191","user_header":"https://static001.geekbang.org/account/avatar/00/27/da/ee/63090718.jpg","comment_is_top":false,"comment_ctime":1635406138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635406138","product_id":100039001,"comment_content":"用过观察者、单例、工厂等,需要了解每个模式适应的场景,不要滥用","like_count":0},{"had_liked":false,"id":318183,"user_name":"dog_brother","can_delete":false,"product_type":"c1","uid":1619597,"ip_address":"","ucode":"9F64D3C6D815FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U9LYlZEx2HrpsELeh3KMlqFiaKpSAaaZeBttXRAVvDXUgcufpqJ60bJWGYGNpT7752w/132","comment_is_top":false,"comment_ctime":1635175131,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635175131","product_id":100039001,"comment_content":"学习这个专栏，我最大的目标是，提高复杂代码的设计和开发能力。","like_count":0},{"had_liked":false,"id":317633,"user_name":"萝卜头","can_delete":false,"product_type":"c1","uid":1254333,"ip_address":"","ucode":"4A05A9C1213D50","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/bd/a57350da.jpg","comment_is_top":false,"comment_ctime":1634872794,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634872794","product_id":100039001,"comment_content":"确实学习一些东西要早点学习，这样平时开发就可以使用起来了。<br>作业：<br>一：目前对开发的理解是全栈工程师，需要完成设计、开发、测试、运维的能力。说实话自己的能力还是不太行，前段时间有任务需要做设计，就感觉到明显的吃力，做出一个可靠性好，可扩展性强，低耦合；确实对我来说比较有挑战，意识到设计模式的重要性。<br>二：单例吧，一些配置文件只要初始化一次就行了，使用golang sync.once","like_count":0},{"had_liked":false,"id":316325,"user_name":"Josh","can_delete":false,"product_type":"c1","uid":1732495,"ip_address":"","ucode":"94516251AA0B62","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6f/8f/0e1fd90f.jpg","comment_is_top":false,"comment_ctime":1634270598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634270598","product_id":100039001,"comment_content":"自己平时编码过程中所使用的设计模式，大多是些比较简单的比如策略模式之类，对编码方式的细节有所改善，但对系统的设计还没有特别多的体感，希望后续学习能解答并体悟自己的这块空白。","like_count":0},{"had_liked":false,"id":315773,"user_name":"SupeRyin丶詩","can_delete":false,"product_type":"c1","uid":1315130,"ip_address":"","ucode":"C5143296F777CC","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/3a/f467fa7d.jpg","comment_is_top":false,"comment_ctime":1633994607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633994607","product_id":100039001,"comment_content":"之前想做一个东西，关于爬虫的，功能实现了，但是代码写得很烂。重构想用一些设计模式，不知道应该怎么选择，其实就暴露了自己设计模式很薄弱吧","like_count":0},{"had_liked":false,"id":314685,"user_name":"Geek4901","can_delete":false,"product_type":"c1","uid":2715323,"ip_address":"","ucode":"7EA02BF7A84355","user_header":"","comment_is_top":false,"comment_ctime":1633326371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1633326371","product_id":100039001,"comment_content":"看源码的时候就发现了,都是设计模式...  必须要掌握, 加油了!","like_count":0},{"had_liked":false,"id":314210,"user_name":"Bacchus","can_delete":false,"product_type":"c1","uid":1830814,"ip_address":"","ucode":"A8AA7E4909B201","user_header":"https://static001.geekbang.org/account/avatar/00/1b/ef/9e/fd29bdd8.jpg","comment_is_top":false,"comment_ctime":1632900658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632900658","product_id":100039001,"comment_content":"设计模式基础一塌糊涂，单单知道一些设计模式，不知道怎么用，不知道什么时候用","like_count":0},{"had_liked":false,"id":313766,"user_name":"Geek_1","can_delete":false,"product_type":"c1","uid":2704407,"ip_address":"","ucode":"59300A73996D20","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/17/e4fdcaad.jpg","comment_is_top":false,"comment_ctime":1632654938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632654938","product_id":100039001,"comment_content":"今年毕业，刚刚参加工作，目前使用过得设计模式：单例模式，建造者模式","like_count":0},{"had_liked":false,"id":312426,"user_name":"在左","can_delete":false,"product_type":"c1","uid":2767626,"ip_address":"","ucode":"1331E31BF69820","user_header":"https://static001.geekbang.org/account/avatar/00/2a/3b/0a/3b235a7e.jpg","comment_is_top":false,"comment_ctime":1631795940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631795940","product_id":100039001,"comment_content":"1.觉得设计模式很重要，非常值得学习。我们公司很多项目的代码就像作者说的那样，根本维护不动。妥妥的屎山一样的代码，看着非常难受。然而自己又是个半吊子，即使重构也不知道该怎么重构好。所以我来学习相关的知识。我希望是能把公司的相关项目代码重构掉，让变成高质量的代码。能够解放我自己的维护时间，让自己看着也舒服。<br>2.这方面比较欠缺，并没有让我觉得能够让人眼前一亮的设计。","like_count":0},{"had_liked":false,"id":311020,"user_name":"沐","can_delete":false,"product_type":"c1","uid":1326537,"ip_address":"","ucode":"678F6A0C778CDD","user_header":"https://static001.geekbang.org/account/avatar/00/14/3d/c9/a1e6a307.jpg","comment_is_top":false,"comment_ctime":1631019565,"is_pvip":false,"discussion_count":0,"race_medal":3,"score":"1631019565","product_id":100039001,"comment_content":"之前的工作中用的比较多的设计模式有：单例模式，工厂模式，观察者模式，模板模式。","like_count":0,"discussions":[{"author":{"id":1067450,"avatar":"https://static001.geekbang.org/account/avatar/00/10/49/ba/23c9246a.jpg","nickname":"mαnajay","note":"","ucode":"6DE9FBD1BEC8AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372203,"discussion_content":"中间层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620223620,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308020,"user_name":"刘泽民","can_delete":false,"product_type":"c1","uid":2731016,"ip_address":"","ucode":"E4F55018D01ABD","user_header":"","comment_is_top":false,"comment_ctime":1629360038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629360038","product_id":100039001,"comment_content":"设计模式是针对软件设计中一些共性问题做出的一个优秀的技术解决方案，在遵循代码设计原则的基础上进行优化提炼","like_count":0},{"had_liked":false,"id":307421,"user_name":"Geek","can_delete":false,"product_type":"c1","uid":2009059,"ip_address":"","ucode":"E4E5A25AF08961","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLT5FUVKibUC0YcbkIkDmaoXBTP872icNbL4mTgiaQO97yOZ6Ff5r3IhYibpInia153858libloqw7n2obw/132","comment_is_top":false,"comment_ctime":1629095232,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629095232","product_id":100039001,"comment_content":"1. 之前大致学习过一遍设计模式，但是对于具体如何使用不是特别理解，真正实现功能的时候希望能写出最优的实现方案，但发现总找不到合适的方式。<br>2. 使用过单例模式，工厂模式和模板模式，其中模板模式主要是解决了一系列策略相同但具体细节不同的功能","like_count":0},{"had_liked":false,"id":307382,"user_name":"Geek_7ed5e9","can_delete":false,"product_type":"c1","uid":2572349,"ip_address":"","ucode":"124EFF40E15E6A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Xia3ZAGK5zB9cBbOxAY0dI3JuglaHCtvCI9R2JvJB8ECuu0Ys8tMWGN9HicMl2KxDibqGO2fr9cJGjlOIcKSUdqUA/132","comment_is_top":false,"comment_ctime":1629074589,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1629074589","product_id":100039001,"comment_content":"学好设计模式的重要性<br>1.能更轻松读懂别人写的好代码，理解作者的思路<br>2.解决复杂的设计问题，写出易扩展，易维护的代码<br>曾经用到过的设计模式<br>单例模式<br>为了应付面试，环境中只存在一个实例<br>1.只需要一个实例，如controller,service<br>2.只能有一个","like_count":0},{"had_liked":false,"id":306996,"user_name":"Geek_66589e","can_delete":false,"product_type":"c1","uid":1783777,"ip_address":"","ucode":"FFE9CCB15015EE","user_header":"https://static001.geekbang.org/account/avatar/00/1b/37/e1/e47b1819.jpg","comment_is_top":false,"comment_ctime":1628821221,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628821221","product_id":100039001,"comment_content":"课后作业<br>(1)实际上我对设计模式没有太多的了解，只是稍微看过一些相关的文章，印象里设计模式应该是算是一种捷径，可以帮助你完成代码的设计<br>(2)因为我没有进行过系统的学习，日常工作中的编码都是依靠经验来完成的，自己可能使用过，但是自己没有意识到。","like_count":0},{"had_liked":false,"id":306654,"user_name":"小周","can_delete":false,"product_type":"c1","uid":2453498,"ip_address":"","ucode":"7ED7BC27A46C4C","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/fa/615a0df3.jpg","comment_is_top":false,"comment_ctime":1628658466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628658466","product_id":100039001,"comment_content":"个人认为合理使用设计模式能够有效的提高代码的灵活性、扩展性以及可维护性等，同时，学习设计模式不仅是为了学习内功，更是为了能写出高质量的代码。因此学习设计模式是非常有必要的。","like_count":0},{"had_liked":false,"id":306584,"user_name":"功夫熊猫","can_delete":false,"product_type":"c1","uid":2732243,"ip_address":"","ucode":"D124F4FA4E816F","user_header":"https://static001.geekbang.org/account/avatar/00/29/b0/d3/200e82ff.jpg","comment_is_top":false,"comment_ctime":1628613802,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1628613802","product_id":100039001,"comment_content":"个人认为高内聚低耦合是解决计算机大部分问题的一个万能通解。我是c语言入的门，虽然c没有类，对象。但是函数这个东西什么语言都有，最简单解耦就是参数尽量少传，以及尽量少调用其他函数。我玩python最难受就是python的库多，但是就是这些库多导致我Python的好多外部麻烦也是库多版本问题以及库的依赖问题。","like_count":0},{"had_liked":false,"id":306338,"user_name":"Geek_b7eb88","can_delete":false,"product_type":"c1","uid":1573715,"ip_address":"","ucode":"0EB46381D9B1CB","user_header":"","comment_is_top":false,"comment_ctime":1628501590,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628501590","product_id":100039001,"comment_content":"课堂讨论：<br>作为移动端开发，刚开始不觉得设计模式有多重要，只是单例能解决数据存储，观察者解决数据更新等简单问题而已。随着工作经验的增加，遇到了需要移动端结合UI处理复杂数据的问题，就懵逼了。感觉怎么写都不对。希望对设计模式有个整体的认知。 自己目前的观点是:再牛逼的设计模式也抵不过一个智障的产品经理。（手动狗头）","like_count":0},{"had_liked":false,"id":305128,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1627832516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627832516","product_id":100039001,"comment_content":"作为一个新手程序员，学习设计模型的动力更多是来自于面试，平时用过的设计模型也只有简单工厂模式和策略模式","like_count":0},{"had_liked":false,"id":304181,"user_name":"东方蓂荚","can_delete":false,"product_type":"c1","uid":1128681,"ip_address":"","ucode":"B794BAD4971F5A","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/e9/f4d612d7.jpg","comment_is_top":false,"comment_ctime":1627288363,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1627288363","product_id":100039001,"comment_content":"设计模式看法：<br>我是因为在工作中遇到想重构代码发现无从下手，在看了很多案例之后发现自己对设计模式基本没有了解，不懂为什么他会这么设计这个框架，才决定来学习设计模式的。<br>其实在工作中，设计模式还是很重要的，随着互联网的发展，已经不再是以前简单的业务代码堆砌，更多的考虑的是项目的可维护性、健壮性、可读性等功能。如果对设计模式没有基本的了解，那么对以后项目的扩展性及维护性是致命的。<br>当你想去重构前辈写的代码时，会有一种吃shi的感觉，但又有一种无从下手的焦虑。<br>同时，掌握好数据结构对学习好的开源框架还是很有帮助的。最起码能看明白为什么这么设计，这么设计的好处在哪里。不会有一种很迷茫的感觉。","like_count":0},{"had_liked":false,"id":304039,"user_name":"九先生","can_delete":false,"product_type":"c1","uid":1122533,"ip_address":"","ucode":"A63A333299D485","user_header":"https://static001.geekbang.org/account/avatar/00/11/20/e5/f66d6144.jpg","comment_is_top":false,"comment_ctime":1627203423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627203423","product_id":100039001,"comment_content":"很喜欢老师的这句话：<br>投资要趁早，这样我们才能尽早享受复利。同样，有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读。这样在你后面的生活、工作、学习中，才能一直都发挥作用。不要等到好多年后，看到了，才恍然大悟，后悔没有早点去学、去看。<br><br>作业：<br>以前对设计模式，用得最多的是建造者模式、策略模式<br>建造者模式：在new一个对象时候需要传入很多个参数，如果在构造方法上有有很多的参数的话会非常不美观，所以使用了建造者模式。<br>策略模式：之前支付功能时，不同的银行支付逻辑不一样，但是他们又都是一个职责之内，为了不写满屏幕的else if这种烂代码，使用策略模式实现：接口+抽象类（通用功能）+多个接口实现类来实现，做到了高内聚低耦合这种高质量的代码<br>","like_count":0},{"had_liked":false,"id":303344,"user_name":"Mine","can_delete":false,"product_type":"c1","uid":1545087,"ip_address":"","ucode":"59A5E2E939B522","user_header":"https://static001.geekbang.org/account/avatar/00/17/93/7f/906641ae.jpg","comment_is_top":false,"comment_ctime":1626743837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626743837","product_id":100039001,"comment_content":"想到设计模式，脑中第一冒出的感觉就是高大上，是一种很厉害的技术；<br>然后再想细细思考什么是设计模式，除了知道有23种经典模式，其它就很模糊了；<br>至于重要性，肯定知道很重要，但真的真的很模糊，受限于能力或者说是懒，平常的编码中不会刻意去提炼、使用。<br>也有可能使用了却不知道，只是没那么规范，毕竟单例、工厂、观察者用的场景还是有的，<br>争取学完课程后，能返回来回答第二个话题，嘎嘎。。。","like_count":0},{"had_liked":false,"id":302627,"user_name":"孙静","can_delete":false,"product_type":"c1","uid":1424967,"ip_address":"","ucode":"1EDC6DCAA99490","user_header":"https://static001.geekbang.org/account/avatar/00/15/be/47/13f28bce.jpg","comment_is_top":false,"comment_ctime":1626308036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626308036","product_id":100039001,"comment_content":"1.设计模式的好处我觉得可以让我们的代码可以有扩展性，阅读性高，有逻辑性，可复用性高，看起来更体面<br><br>2.工作中自己写设计模式比较少也就是工厂方法、单例","like_count":0},{"had_liked":false,"id":299660,"user_name":"达尼亚尔","can_delete":false,"product_type":"c1","uid":1556489,"ip_address":"","ucode":"028C3BF9AE55EC","user_header":"https://static001.geekbang.org/account/avatar/00/17/c0/09/f1280359.jpg","comment_is_top":false,"comment_ctime":1624785903,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1624785903","product_id":100039001,"comment_content":"我用过策略模式和模板方法模式。策略模式主要是用来优化代码中繁琐的if else。模板方法的话，让一些业务处理过程变得规范一些，有一定步骤。","like_count":0},{"had_liked":false,"id":299476,"user_name":"冰糕不冰","can_delete":false,"product_type":"c1","uid":1134761,"ip_address":"","ucode":"B754FE464BA426","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","comment_is_top":false,"comment_ctime":1624668632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624668632","product_id":100039001,"comment_content":"学习设计模式的重要性:<br>1.减少垃圾代码<br>2.提高复杂项目设计能力<br>3.读懂开源代码<br>4.指导团队初级程序员工作","like_count":0},{"had_liked":false,"id":299370,"user_name":"易飞","can_delete":false,"product_type":"c1","uid":2630424,"ip_address":"","ucode":"32AC28754237F7","user_header":"https://static001.geekbang.org/account/avatar/00/28/23/18/4284361f.jpg","comment_is_top":false,"comment_ctime":1624600862,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624600862","product_id":100039001,"comment_content":"设计模式，只在面试中用到过。。","like_count":0},{"had_liked":false,"id":297374,"user_name":"大头","can_delete":false,"product_type":"c1","uid":1315367,"ip_address":"","ucode":"C1FB2C8A0FB0C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/27/32746bbf.jpg","comment_is_top":false,"comment_ctime":1623489908,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1623489908","product_id":100039001,"comment_content":"1 观察者模式，部门名称变更后，其他冗余部门名称的地方异步更新<br>2 链条模式，对入参进行多级过滤<br>3 策略模式，根据输入不同，更新不同类的数据<br>4 工厂模式，配合策略模式使用<br>5 建造者模式，okhttp创建实例<br>6 代理模式，代理处理rpc请求","like_count":0},{"had_liked":false,"id":297075,"user_name":"Faded","can_delete":false,"product_type":"c1","uid":2655908,"ip_address":"","ucode":"9BFD018D7FAF7B","user_header":"https://static001.geekbang.org/account/avatar/00/28/86/a4/39115ec9.jpg","comment_is_top":false,"comment_ctime":1623300790,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623300790","product_id":100039001,"comment_content":"1.对设计模式相关知识的重要性的看法：<br>  之前还没看这个课程，就感觉挺重要的，看了这一节之后，感觉就像是从初级到资深程序员的必需知识。<br>2.在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题<br>  对于刚实习的我来说，并没有在实际项目中应用过任何设计模式，顶多就是了解了一些设计模式的理论知识。<br>","like_count":0},{"had_liked":false,"id":296958,"user_name":"HSC胡舒程","can_delete":false,"product_type":"c1","uid":1941115,"ip_address":"","ucode":"77D81890F5E66B","user_header":"","comment_is_top":false,"comment_ctime":1623240139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623240139","product_id":100039001,"comment_content":"设计模式的重要性不言而喻，很多时候使用良好的设计模式会使提高代码的可扩张性，并且设计模式可以说是程序员们的通用语言，通过设计模式编写的出的代码可读性也非常强，更易于别的程序员来理解你的代码。<br>目前来说用到的设计模式种类比较少，但是单例模式用了不少，主要是用来作为一个全局的数据存储类，在任何时候都可以从中获取数据。","like_count":0},{"had_liked":false,"id":296895,"user_name":"楼外楼","can_delete":false,"product_type":"c1","uid":1243180,"ip_address":"","ucode":"791F2CA15B8F1F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/sgEfkeMSIIibeH4l0HS8uwM6PGY3DSHoW5tV9l1hDQ06tr3OnI7F545Wdxsh59rqOKnzjLUpCcEqic3P9zZbKzPQ/132","comment_is_top":false,"comment_ctime":1623217441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623217441","product_id":100039001,"comment_content":"如何分层、分模块？应该怎么划分类？每个类应该具有哪些属性、方法？怎么设计类之间的交互？该用继承还是组合？该使用接口还是抽象类？怎样做到解耦、高内聚低耦合？该用单例模式还是静态方法？用工厂模式创建对象还是直接 new 出来？如何避免引入设计模式提高扩展性的同时带来的降低可读性问题？……各种问题，","like_count":0},{"had_liked":false,"id":294900,"user_name":"lucas","can_delete":false,"product_type":"c1","uid":1507709,"ip_address":"","ucode":"53B855AD647D4D","user_header":"https://static001.geekbang.org/account/avatar/00/17/01/7d/7b576eb3.jpg","comment_is_top":false,"comment_ctime":1622125770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622125770","product_id":100039001,"comment_content":"1.一直用c写代码，一直想提高代码能力，觉得设计模式和OOP思想应该也是可以用上的<br>2.没做过设计模式相关的整改","like_count":0,"discussions":[{"author":{"id":1178683,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fc/3b/c6b5b64f.jpg","nickname":"bboy孙晨杰","note":"","ucode":"D7389FB3368749","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143036,"discussion_content":"个人理解中间层引入的目的，主要是为了隔离底层服务的变化对调用层的影响，因此中间层的接口状态肯定是最为稳定的，当底层服务出现变化时只需要修改中间层的实现逻辑，调用层是完全无感的；所以如果中间层的接口设计时一定要通用灵活，避免修改的情况出现。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1579488272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":188062,"discussion_content":"中间层更多的作用是统一输入输出，让双方不需要关心信息的变化","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582792123,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294563,"user_name":"Geek_ccbd80","can_delete":false,"product_type":"c1","uid":2638517,"ip_address":"","ucode":"BBA76D078D8584","user_header":"","comment_is_top":false,"comment_ctime":1622000373,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622000373","product_id":100039001,"comment_content":"1 设计模式是前人写代码优秀经验的总结。<br>2 用过单例模式、工厂模式等，也有一些写过，但没有意识到的其它模式。曾经在开源中看到使用发布-订阅模式，非常优雅地解决了数据联动问题","like_count":0},{"had_liked":false,"id":294222,"user_name":"帅气的名字","can_delete":false,"product_type":"c1","uid":2635800,"ip_address":"","ucode":"59B71A677963D1","user_header":"https://static001.geekbang.org/account/avatar/00/28/38/18/0a4ef54d.jpg","comment_is_top":false,"comment_ctime":1621839439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621839439","product_id":100039001,"comment_content":"不懂设计模式的话，写出的代码大概率是烂代码，没法扩展，没法排查bug，甚至遇到稍微复杂的代码就力不从心，容易被淘汰","like_count":0},{"had_liked":false,"id":294045,"user_name":"李景阳","can_delete":false,"product_type":"c1","uid":2621592,"ip_address":"","ucode":"07FAB95C77EDEB","user_header":"","comment_is_top":false,"comment_ctime":1621704678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621704678","product_id":100039001,"comment_content":"日常用的最多的是MVC","like_count":0},{"had_liked":false,"id":293751,"user_name":"Geek_5b7d28","can_delete":false,"product_type":"c1","uid":2057476,"ip_address":"","ucode":"BAA1CDD539C369","user_header":"","comment_is_top":false,"comment_ctime":1621520491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621520491","product_id":100039001,"comment_content":"我觉得对于程序员来说，代码就像一个人的形象。有一个好的形象，无论是别人还是自己看，都会赏心悦目。","like_count":0},{"had_liked":false,"id":293411,"user_name":"wonderful2","can_delete":false,"product_type":"c1","uid":2625536,"ip_address":"","ucode":"6BA4BBA3B9B32B","user_header":"","comment_is_top":false,"comment_ctime":1621385714,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621385714","product_id":100039001,"comment_content":"设计模式重要的是理解其中的思想，具体怎么玩这么实现其实有很多变种，表面上的目的是为了写更高质量更漂亮的代码，实质上是提高自己的代码技艺。<br>工作上用过的设计模式有单例模式、代理模式、工厂模式","like_count":0},{"had_liked":false,"id":292913,"user_name":"炫炫","can_delete":false,"product_type":"c1","uid":1358609,"ip_address":"","ucode":"FDC7A0C6E08B02","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/11/7069b8eb.jpg","comment_is_top":false,"comment_ctime":1621074838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621074838","product_id":100039001,"comment_content":"争哥，我心中滴神，第三刷，来了来了","like_count":0},{"had_liked":false,"id":292898,"user_name":"乔宏民","can_delete":false,"product_type":"c1","uid":2181661,"ip_address":"","ucode":"B6A9F971E9CC96","user_header":"https://static001.geekbang.org/account/avatar/00/21/4a/1d/3567f117.jpg","comment_is_top":false,"comment_ctime":1621062064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621062064","product_id":100039001,"comment_content":"第一篇讲的真好，像极了沙场秋点兵！好了，我们要去打仗了。","like_count":0},{"had_liked":false,"id":292453,"user_name":"歪歪在学习","can_delete":false,"product_type":"c1","uid":1618198,"ip_address":"","ucode":"889032C02D2D26","user_header":"https://static001.geekbang.org/account/avatar/00/18/b1/16/ba221660.jpg","comment_is_top":false,"comment_ctime":1620827362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620827362","product_id":100039001,"comment_content":"作为一个工作三年的程序员，之前一直跟业务打交道，这次出来面试后发现自己真的太菜了，每次被面试官问到设计模式就很虚，因为我之前开发没用过设计模式😢。为了提高自己的技术深度，写出更优雅的代码，必须学好设计模式。","like_count":0},{"had_liked":false,"id":292201,"user_name":"Geek_5b4fff","can_delete":false,"product_type":"c1","uid":2309113,"ip_address":"","ucode":"349542C8F7CBBC","user_header":"","comment_is_top":false,"comment_ctime":1620719545,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620719545","product_id":100039001,"comment_content":"1、单例模式<br>网络请求工具类，避免了每次请求都需要创建各种资源问题<br>2、策略模式<br>定义一组接口规范，根据业务的不同做具体的实现，方便扩展","like_count":0},{"had_liked":false,"id":292116,"user_name":"woodie","can_delete":false,"product_type":"c1","uid":2004783,"ip_address":"","ucode":"1C2925AD8191DA","user_header":"","comment_is_top":false,"comment_ctime":1620696885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620696885","product_id":100039001,"comment_content":"以前觉得自己写的代码质量还凑活，但好在什么地方，烂在什么地方，道不出所以然来，感觉得缺少“灵魂”指导思想，“内核”的东西，所以这次学些设计模式的目的：1、掌握“好”“烂”代码的标准；2、在一些复杂的场景中，能够多一些设计思路","like_count":0},{"had_liked":false,"id":291479,"user_name":"Time-sun","can_delete":false,"product_type":"c1","uid":1949865,"ip_address":"","ucode":"47D2EB4FD2F925","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/tiaEaUwoYl8z5FROHibq5XYjjcuTia840dHYT8zqwV4ibfWPNeQHw3ib20iba8bRRkVxwYUCz9ENkDGRsfnmSJQBAALA/132","comment_is_top":false,"comment_ctime":1620301643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620301643","product_id":100039001,"comment_content":"看法：<br>阅读优秀的开源项目时，根本不知道作者的思路是啥，也就没有顶层的思考角度了，只能debug一行一行的看，费时费力。","like_count":0},{"had_liked":false,"id":291455,"user_name":"luolx","can_delete":false,"product_type":"c1","uid":2383171,"ip_address":"","ucode":"AF14D78C7AA52A","user_header":"https://static001.geekbang.org/account/avatar/00/24/5d/43/06e7b99b.jpg","comment_is_top":false,"comment_ctime":1620293240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620293240","product_id":100039001,"comment_content":"以前总觉得自己写的代码很low，看别人的代码就感觉很高大上，现在才发现，原来是设计模式导致的。。","like_count":0},{"had_liked":false,"id":290464,"user_name":"Geek_967e26","can_delete":false,"product_type":"c1","uid":2414954,"ip_address":"","ucode":"000BC1A8A23C82","user_header":"","comment_is_top":false,"comment_ctime":1619576700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619576700","product_id":100039001,"comment_content":"设计模式是真的重要，现在从零开始","like_count":0},{"had_liked":false,"id":290457,"user_name":"CoffeeMilk","can_delete":false,"product_type":"c1","uid":1522119,"ip_address":"","ucode":"EC3B6AD4FD392A","user_header":"https://static001.geekbang.org/account/avatar/00/17/39/c7/cf40613f.jpg","comment_is_top":false,"comment_ctime":1619573952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619573952","product_id":100039001,"comment_content":"课后讨论 <br>1、我认为设计模式是让我们能够更好，更优雅的实现功能，是一个有追求程序员的基本功（即：能够将复杂问题分解为简单问题，做到合理化设计与实现，提高复用率，且质量有保证，毕竟这些设计模式是经过时间验证的内容）。<br>2、我在智慧工厂项目中，用的最多的有：①单例模式【应用场景：系统配置文件、日志等】；②工厂模式。","like_count":0},{"had_liked":false,"id":290267,"user_name":"夜雨声烦","can_delete":false,"product_type":"c1","uid":1349749,"ip_address":"","ucode":"87D8DB1E32522A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK6mh3xlaMoGtWjmVJh2LutdLcQcPbKNjRlVru3bx8ynPhgwuGhhdzTkwEMoXbvBtgkcDSfom1kZg/132","comment_is_top":false,"comment_ctime":1619465660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619465660","product_id":100039001,"comment_content":"看法：设计模式重要性五点作者已经说。在我自己看来学习设计模式期望能让我写出高效可维护性的代码、更快的看懂别人的代码、读懂开源代码、快速了解开源框架<br>应用：没有应用过，说来惭愧设计模型一直没了解过，现在算是从0开始。","like_count":0},{"had_liked":false,"id":289790,"user_name":"贝壳喊母","can_delete":false,"product_type":"c1","uid":1208159,"ip_address":"","ucode":"4D0E8C55BDE64F","user_header":"","comment_is_top":false,"comment_ctime":1619175223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619175223","product_id":100039001,"comment_content":"应该很重要，通过推荐买来学习的。最近自己在从项目创建到设计到开发感觉比较吃力。用的也都是框架的框架什么的。真的是只会用的那种！感觉这样下去真的就废了。通过这次学习希望能够得到一个提升吧！","like_count":0},{"had_liked":false,"id":289558,"user_name":"哇*我好肥","can_delete":false,"product_type":"c1","uid":2579133,"ip_address":"","ucode":"26C937842EC9FE","user_header":"https://static001.geekbang.org/account/avatar/00/27/5a/bd/a3b20809.jpg","comment_is_top":false,"comment_ctime":1619081224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619081224","product_id":100039001,"comment_content":"为什么学习设计模式？<br>1、应对面试中被问到的设计模式的问题<br>2、提升自己写出优质代码的能力<br>3、提升解读源码的能力，让看源码事半功倍<br>4、为以后职业生涯铺路<br>5、提高复杂代码的设计和开发能力<br><br>对设计模式的看法<br>个人觉得设计模式是必不可少的，无论是编写优质代码、提高复杂代码的设计能力<br>都是必不可少的，而且对于思考问题的思维能力，我觉得也有帮助，对于以后成为升级加薪也是非常有帮助的<br><br>目前项目中是否用了哪些设计模式？<br>目前没有印象用到哪些模式","like_count":0},{"had_liked":false,"id":289232,"user_name":"Choi","can_delete":false,"product_type":"c1","uid":1045669,"ip_address":"","ucode":"4B33F8728331DC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/45FrSezibbp2L7v0aE8fgL6vFokiarz9nRw6icEK14OL3ZSaQVrCH0ZKmcFibicEk8zLdkU9JmPQ31ibvulyNvoclJWA/132","comment_is_top":false,"comment_ctime":1618925783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618925783","product_id":100039001,"comment_content":"工作一直沉浸于CRUD之中，需要提升自己，写出不一样的代码，修炼内功，不负韶华。🤔<br><br>平时用得最多的是单例、建造者、模版方法、策略模式","like_count":0},{"had_liked":false,"id":288697,"user_name":"嗯。","can_delete":false,"product_type":"c1","uid":1563245,"ip_address":"","ucode":"30FC6EF9A01070","user_header":"https://static001.geekbang.org/account/avatar/00/17/da/6d/7c8fdb14.jpg","comment_is_top":false,"comment_ctime":1618630137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618630137","product_id":100039001,"comment_content":"设计模式的重要性对于开发人员来说毋庸置疑，它和数据结构与算法一样，是程序员的基本功，它可以建立我们的设计思想和原则，写成高质量的代码，而对于个人来说，一是可以在面试中为自己加分，二是在工作中可以写出不被同事诟病甚至眼前一亮的代码，三则是提高自己的内功和能力，写出优秀的代码获得成就感。<br><br>在我工作中，经常遇到的是策略模式的场景，比如我新入职的电商公司，下单是必须的业务，而下单的场景分很多种，比如普通下单、拼团下单、用积分下单等等，而其中的业务逻辑是不一样的，最笨的办法就是if-else一把梭，但是正常的一个电商项目下单的逻辑也是很复杂的，如果都写在一个类里面可读性极差，因此，可以使用策略模式，分别处理对应的逻辑。","like_count":0},{"had_liked":false,"id":287852,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1618196095,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1618196095","product_id":100039001,"comment_content":"1、不用不知道，一用发现真香<br>2、用过门面+工厂+策略+模板，主要用于搭建文件服务器的需求上<br>门面用于暴露简单接口，以及封装后面的策略调用<br>工厂用于获取文件服务器的不同实现类对象<br>策略用于提供文件服务器基本操作的不同算法实现，例如提供mongo、minio等分别实现<br>模板用于提供文件服务器基本操作的固定模板，比如上传文件的几个固定步骤，上传文件存储-备份磁盘-上传记录等，上传文件存储需交给子类提供不同上传逻辑的实现","like_count":0,"discussions":[{"author":{"id":1134288,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","nickname":"Ken张云忠","note":"","ucode":"D0BAC9FC17DE2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":128507,"discussion_content":"道术法器可以有多种不同的理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578645531,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285416,"user_name":"Jerry","can_delete":false,"product_type":"c1","uid":1120977,"ip_address":"","ucode":"F10BBBA2644E46","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/d1/698609e1.jpg","comment_is_top":false,"comment_ctime":1616802206,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616802206","product_id":100039001,"comment_content":"1.好的设计模式代码，在扩展或者修改功能的时候，会很明确需要修改什么类的什么方法，而且影响的只是这个类相关的逻辑，不至于牵一发而动全身。<br>2.印象比较深刻的是用“策略模式&quot;来解决不同用户类型，调用不同的“登录”接口拉取用户信息，拉取成功后，做下一步逻辑处理。这里把&quot;根据用户类型调用不同登录接口&quot;用策略模式来设计，使得不同的登录接口逻辑相互隔离。","like_count":0},{"had_liked":false,"id":285027,"user_name":"小万叔叔","can_delete":false,"product_type":"c1","uid":1448768,"ip_address":"","ucode":"41966A18867C63","user_header":"https://static001.geekbang.org/account/avatar/00/16/1b/40/68e59e53.jpg","comment_is_top":false,"comment_ctime":1616583137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616583137","product_id":100039001,"comment_content":"设计模式的重要性 ：最直观的作用提高易用性，和可读性 <br>用过的设计模式：构造器，单例，工厂等等。","like_count":0},{"had_liked":false,"id":284822,"user_name":"Windqiu","can_delete":false,"product_type":"c1","uid":2278659,"ip_address":"","ucode":"EF78D3CF73BCBB","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/TUMtkaIMdbFDS28AhjrQcqOhiapNvHyPMApz9QoZZkShZmomJRh6GX2aL2YeSMg4SicdydzdWxXZOZz49HNS9EtA/132","comment_is_top":false,"comment_ctime":1616487789,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616487789","product_id":100039001,"comment_content":"在通常的CURD上，确实用的设计模式不多。但是如果你想通过业务框架，去实现技术架构的话，设计模式是必备的。设计模式并不是23种，而是N种，因为设计就是N。<br>我是PHP工程师，但是在写业务过程中，深刻觉得设计模式太需要了，为了业务的健壮与拓展，为了代码的质量。<br>你说Go没有设计模式，Go也有的，思想是想通的。","like_count":0},{"had_liked":false,"id":284449,"user_name":"森林里的胖老虎","can_delete":false,"product_type":"c1","uid":2530946,"ip_address":"","ucode":"C93BA8F2885601","user_header":"https://static001.geekbang.org/account/avatar/00/26/9e/82/7758ab1c.jpg","comment_is_top":false,"comment_ctime":1616251464,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616251464","product_id":100039001,"comment_content":"我在项目中用到最多的就是单例模式。数据存储链接，不必每一个请求过来都要去链接一次，直接利用单例模式，doube check","like_count":0},{"had_liked":false,"id":283663,"user_name":"John Bull","can_delete":false,"product_type":"c1","uid":1362023,"ip_address":"","ucode":"2A1B4191CD87B8","user_header":"https://static001.geekbang.org/account/avatar/00/14/c8/67/5489998a.jpg","comment_is_top":false,"comment_ctime":1615875697,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1615875697","product_id":100039001,"comment_content":"掌握好设计模式对阅读框架源码很重要，深有体会！","like_count":0},{"had_liked":false,"id":283464,"user_name":"诺","can_delete":false,"product_type":"c1","uid":2397674,"ip_address":"","ucode":"66A7DE3E9D1A70","user_header":"https://static001.geekbang.org/account/avatar/00/24/95/ea/42f6d9be.jpg","comment_is_top":false,"comment_ctime":1615791580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615791580","product_id":100039001,"comment_content":"因为自己在开发当中遇到过一些框架，在运用到自己的项目中后，由于自己的代码质量不是很高，出现问题后需要阅读源码来分析解决问题。<br>而市面上的成熟框架中作用的设计模式较多，实际上可读性比较强，但对于我这种对设计模式理解不深的人来说，理解就比较困难，看不下去，所以设计模式的提升尤为重要。<br>另一方面，有些时候需要自己设计通用的组件和构建工程化项目，这时候需要写出易拓展好维护的代码才能实现这种需求，在开发的过程中就体现出了自己在设计模式的严重不足，所以学习设计模式还是很重要的","like_count":0},{"had_liked":false,"id":281852,"user_name":"杨昌业","can_delete":false,"product_type":"c1","uid":2452804,"ip_address":"","ucode":"0F043DA819F975","user_header":"","comment_is_top":false,"comment_ctime":1614927491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614927491","product_id":100039001,"comment_content":"设计模式相关知识学习的重要性:1.让我告别烂代码2更加容易理解源码框架3面试更加从容<br>单例模式--手机短信验证码确保不会重复发送,<br>","like_count":0},{"had_liked":false,"id":281532,"user_name":"chenruoxu","can_delete":false,"product_type":"c1","uid":1144192,"ip_address":"","ucode":"74F740C1C5DEDA","user_header":"https://static001.geekbang.org/account/avatar/00/11/75/80/8da73d9c.jpg","comment_is_top":false,"comment_ctime":1614776159,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1614776159","product_id":100039001,"comment_content":"设计模式于我真的是能够大大提升工作效率的，之前改造存量系统的时候，由于经验不足，原来的代码写了很多 try-catch 的代码，这些代码后面已经很难理解和维护，后面一个大牛带我进行改造，用了模版模式和策略模式进行重构，代码清晰简洁，后面的维护也变得很轻松。所以我觉得学好设计模式是能够解放生产力的。","like_count":0},{"had_liked":false,"id":280497,"user_name":"森碟儿","can_delete":false,"product_type":"c1","uid":1155664,"ip_address":"","ucode":"A1A82553C755CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/a2/50/1a2f1171.jpg","comment_is_top":false,"comment_ctime":1614235827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614235827","product_id":100039001,"comment_content":"1学好设计模式很重要，好的设计模式会使整个项目更健壮，更稳定，利用设计模式还可以解决日常工作中的疑难问题，代码质量高，可读性强，还能多去学习大神级写的设计模式，达到学习致用的效果<br>2.过往的开发项目中，采用的是传统的设计模式MVC，虽然也知道还有MVVM MVP  等其他的设计模式，但不会利用到项目中，仅仅知道理论而已，所以想通过本次跟老师学习，能解决此问题。","like_count":0},{"had_liked":false,"id":280162,"user_name":"Geek_ea3267","can_delete":false,"product_type":"c1","uid":1962384,"ip_address":"","ucode":"71C1EBF50F457A","user_header":"","comment_is_top":false,"comment_ctime":1614099820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614099820","product_id":100039001,"comment_content":"1.设计模式可以重构代码, 使得更容易维护, 容易拓展<br>2.使用过策略模式加工厂模式加spring注入解决复杂业务的if else可读写差, 耦合性高的问题","like_count":0},{"had_liked":false,"id":279513,"user_name":"Kuris_01🦖","can_delete":false,"product_type":"c1","uid":2391763,"ip_address":"","ucode":"DE346E0FA7EC7D","user_header":"https://static001.geekbang.org/account/avatar/00/24/7e/d3/0e85f07c.jpg","comment_is_top":false,"comment_ctime":1613810394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613810394","product_id":100039001,"comment_content":"刚步入职场，还处于写业务代码的阶段，添加一些功能的时候照模搬砖能基本完成要求，但是这样的代码累积到后面最后墙塌了砸的还是自己的脚，看前辈们的代码也觉得有很多可以优化的地方。<br>现在处于对设计模式基本不懂的状态，知道有些地方if else写多了不好但是不知道如何优化，所以得赶紧学习一波~","like_count":0},{"had_liked":false,"id":279484,"user_name":"刘剑","can_delete":false,"product_type":"c1","uid":1140328,"ip_address":"","ucode":"B530AE58C05788","user_header":"https://static001.geekbang.org/account/avatar/00/11/66/68/fe556f2f.jpg","comment_is_top":false,"comment_ctime":1613801591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613801591","product_id":100039001,"comment_content":"1.设计模式的重要性：<br>为面试提供有利的补充；<br>告别烂代码，让自己的代码结构清晰，更易于扩展；<br>更容易看明白很多开源代码的设计思想<br>2.用过哪些设计模式?解决什么问题？<br>之前做过某停车软件的会员体系，用到过策略模式，一开始多个分段，不同的会员级别，考虑过用if-else，但是后面如果再扩展会很痛苦，用策略模式有新的会员级别和优惠政策，只需要新增一个新的策略类。<br>所有的项目中的配置，固定不变的配置，都放在核心配置类中(单例)。<br>使用netty+jdbctemplate写api快速响应接口时，netty里的handler根据不同的uri使用不同的pipeline用到了责任链模式，还有些对象线程池用到了观察者模式<br>","like_count":0},{"had_liked":false,"id":279421,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1613781103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613781103","product_id":100039001,"comment_content":"设计模式对于面向对象的开发非常重要，之前我也看过这方面的书，设计模式就像围棋中的手筋，巧妙地运用可以使程序在可维护性，扩展性，复用性方面得到很大的提升。","like_count":0},{"had_liked":false,"id":279224,"user_name":"李金鹏","can_delete":false,"product_type":"c1","uid":1445362,"ip_address":"","ucode":"8FCCA5B8BD8DDD","user_header":"https://static001.geekbang.org/account/avatar/00/16/0d/f2/3865fe28.jpg","comment_is_top":false,"comment_ctime":1613660003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613660003","product_id":100039001,"comment_content":"1.spring框架用到了很多设计模式，比如工厂模式<br>2.我在项目中遇到的最多的模式是单例模式，应用场景有公共对象比如全局上下文、线程池等","like_count":0},{"had_liked":false,"id":277921,"user_name":"鞠小军","can_delete":false,"product_type":"c1","uid":1117744,"ip_address":"","ucode":"F945863EC472B2","user_header":"https://static001.geekbang.org/account/avatar/00/11/0e/30/e613d032.jpg","comment_is_top":false,"comment_ctime":1612668964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612668964","product_id":100039001,"comment_content":"设计模式看过好多书和分享了，知道是怎么个原理和设计思路，但是日常开发时用的较少，还是基本功不扎实哈，要平时一点点刻意去理解和实践。","like_count":0},{"had_liked":false,"id":277381,"user_name":"超超超超超帅耶🌴","can_delete":false,"product_type":"c1","uid":1266987,"ip_address":"","ucode":"931E23DC0ACB04","user_header":"https://static001.geekbang.org/account/avatar/00/13/55/2b/b7927cc4.jpg","comment_is_top":false,"comment_ctime":1612402411,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612402411","product_id":100039001,"comment_content":"1.我觉得对我来说设计模式的作用里最重要的还是第二点和第四点，之前没有学过设计模式，好多源码里面的设计模式名词都不知道，后来看过一遍之后，明显看源码简单了很多<br>2.自己代码里使用过策略模式结合工厂模式来解决一个不同类型数据的处理问题，让整个逻辑抽离开来，不至于全部耦合在一起if()else if()","like_count":0},{"had_liked":false,"id":276232,"user_name":"Geek1185","can_delete":false,"product_type":"c1","uid":2028954,"ip_address":"","ucode":"47BEE492EF4C1A","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/9a/63dc81a2.jpg","comment_is_top":false,"comment_ctime":1611840366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1611840366","product_id":100039001,"comment_content":"烂代码的特点","like_count":0},{"had_liked":false,"id":273432,"user_name":"刘立嘉","can_delete":false,"product_type":"c1","uid":2414637,"ip_address":"","ucode":"1241140EBE7FE3","user_header":"https://static001.geekbang.org/account/avatar/00/24/d8/2d/6ec3760c.jpg","comment_is_top":false,"comment_ctime":1610594938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610594938","product_id":100039001,"comment_content":"面试时候能用上","like_count":0},{"had_liked":false,"id":273070,"user_name":"是小毛吖","can_delete":false,"product_type":"c1","uid":1363547,"ip_address":"","ucode":"B14B176DA1C989","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/5b/d7e523c2.jpg","comment_is_top":false,"comment_ctime":1610430312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610430312","product_id":100039001,"comment_content":"设计模式的重要性当然不言而喻，能够让人们写出的代码更高效、更具备拓展性。但是难点在于什么场景适合用。千万不要为了用而用","like_count":0},{"had_liked":false,"id":272945,"user_name":"笑天","can_delete":false,"product_type":"c1","uid":1561173,"ip_address":"","ucode":"B71B671B302D3B","user_header":"","comment_is_top":false,"comment_ctime":1610360941,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610360941","product_id":100039001,"comment_content":"设计模式相关只是的重要性看法：<br>1.学习设计模式，是对面向对象编程进一步的深入了解。设计模式，个人觉得是抽象方面的一些总结，前人留下的关于抽象的一套武功秘籍。<br>2.个人开发过程中，有简单的用到过工厂模式，策略模式。不知道是否抽象的得当。<br>卡券规则的校验，用了一个策略模式。抽象一个limit接口，定义一个checkLimit()方法，相当于是strategy。每个具体规则，都要实现这个checkLimit()方法，校验limit是否可用。本应该耦合在上下文的规则校验，就转移到了每个具体规则类中。当新增了某个类型的规则以后，只需要新增一个类，实现limit接口即可。这样就不用修改上下文，满足了开闭原则","like_count":0},{"had_liked":false,"id":272816,"user_name":"慎独。","can_delete":false,"product_type":"c1","uid":1101771,"ip_address":"","ucode":"0780B71A00B1CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/cb/6b1216e6.jpg","comment_is_top":false,"comment_ctime":1610296399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610296399","product_id":100039001,"comment_content":"在大型项目中，设计模式使用的时候恰到好处直接关系着这个项目的成败。","like_count":0},{"had_liked":false,"id":271857,"user_name":"成锋","can_delete":false,"product_type":"c1","uid":1337402,"ip_address":"","ucode":"7017928510C031","user_header":"https://static001.geekbang.org/account/avatar/00/14/68/3a/e22b689a.jpg","comment_is_top":false,"comment_ctime":1609843174,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1609843174","product_id":100039001,"comment_content":"重要性：<br> 提升代码设计能力<br> 看懂框架代码<br>项目实战：<br> 项目中很少用到设计模式","like_count":0},{"had_liked":false,"id":271420,"user_name":"霍云Obsidian","can_delete":false,"product_type":"c1","uid":1178275,"ip_address":"","ucode":"1E5818D5C01576","user_header":"https://static001.geekbang.org/account/avatar/00/11/fa/a3/1b29f975.jpg","comment_is_top":false,"comment_ctime":1609602855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609602855","product_id":100039001,"comment_content":"说实话，很多时候写代码 不知道该用什么。 例如 单例模式 还是静态类。。","like_count":0},{"had_liked":false,"id":271388,"user_name":"adkii","can_delete":false,"product_type":"c1","uid":2370418,"ip_address":"","ucode":"6AA28E359903E4","user_header":"https://static001.geekbang.org/account/avatar/00/24/2b/72/d06e75e4.jpg","comment_is_top":false,"comment_ctime":1609590922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609590922","product_id":100039001,"comment_content":"每二个问题就是在面试里碰到了一个问题，然后就没有然后了，平常代码里基本上都是CURD，对设计模式确实没用过，就很尴尬","like_count":0},{"had_liked":false,"id":271164,"user_name":"牛牛","can_delete":false,"product_type":"c1","uid":1194626,"ip_address":"","ucode":"CFCE68B4F92209","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/82/1ff83a38.jpg","comment_is_top":false,"comment_ctime":1609426865,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609426865","product_id":100039001,"comment_content":"为什么学习设计模式？<br>1. 应对面试中设计模式相关的问题<br>2. 告别项目中的代码被人吐槽<br>3. 提高复杂代码的设计和研发能力<br>4. 让读源码、学框架事半功倍<br>5. 为职业生涯做铺垫","like_count":0},{"had_liked":false,"id":270529,"user_name":"Geek_db65af","can_delete":false,"product_type":"c1","uid":2392901,"ip_address":"","ucode":"3FC520A40F9C68","user_header":"","comment_is_top":false,"comment_ctime":1609151466,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609151466","product_id":100039001,"comment_content":"在设计系统的时候会考虑如何写代码更优美，效率更高，扩展性更好等，但竟从不知道这些就是设计模式，也不知道可以通过课程、书籍学习这些，惭愧。","like_count":0},{"had_liked":false,"id":267484,"user_name":"Geek_652490","can_delete":false,"product_type":"c1","uid":1817165,"ip_address":"","ucode":"0612EE1FD02AF1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/0qP9dQyibmPu1JUAan9bXEXZBAaOetRStstIcQDXZUFdU9jHb5W3RlNfCBI0kVkZzZTf6NbXwSY4IQqOsVSNQibw/132","comment_is_top":false,"comment_ctime":1607764569,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607764569","product_id":100039001,"comment_content":"设计模式五条作用<br>1 面试<br>2避免烂代码<br>3 复杂系统设计必备<br>4 看源码<br>5 职场发展铺路","like_count":0},{"had_liked":false,"id":267483,"user_name":"Geek_652490","can_delete":false,"product_type":"c1","uid":1817165,"ip_address":"","ucode":"0612EE1FD02AF1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/0qP9dQyibmPu1JUAan9bXEXZBAaOetRStstIcQDXZUFdU9jHb5W3RlNfCBI0kVkZzZTf6NbXwSY4IQqOsVSNQibw/132","comment_is_top":false,"comment_ctime":1607764446,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607764446","product_id":100039001,"comment_content":"设计模式在看源码的时候真的有用，不懂模式举步维艰。之前设计开发socket http互转中间件时，因为不懂设计模式，几乎重写了两遍。","like_count":0},{"had_liked":false,"id":267229,"user_name":"大头","can_delete":false,"product_type":"c1","uid":1315367,"ip_address":"","ucode":"C1FB2C8A0FB0C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/27/32746bbf.jpg","comment_is_top":false,"comment_ctime":1607654455,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1607654455","product_id":100039001,"comment_content":"个人理解：设计模式是前辈总结的最佳实践，属于一定套路。再遇到特定的场景，使用对应的设计模式能提升代码质量，尤其是写出易扩展的代码。<br>用过三种设计模式，单例模式，场景是线程池的创建。工厂加策略模式，场景是不同的角色有不同的薪资提成算法。观察者模式，场景是员工调动部门后，员工的各类业务数据进行异步更新","like_count":0},{"had_liked":false,"id":266750,"user_name":"孙小梦","can_delete":false,"product_type":"c1","uid":1189821,"ip_address":"","ucode":"3762D7A6016187","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/bd/7d407685.jpg","comment_is_top":false,"comment_ctime":1607478580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607478580","product_id":100039001,"comment_content":"老师，其实我的编程年限也不短了，但是就像老师说的一样，一直都在写“能用”的代码，对代码的设计能力真的很弱，希望跟着老师的课程，对这方面可以有一个大的提升！","like_count":0},{"had_liked":false,"id":266748,"user_name":"Geek_96f0c3","can_delete":false,"product_type":"c1","uid":2190041,"ip_address":"","ucode":"BC712514B7016B","user_header":"","comment_is_top":false,"comment_ctime":1607478319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607478319","product_id":100039001,"comment_content":"使用过单例与 adapter 、观察者模式<br>觉得自己最大的问题是代码解耦与可读性问题<br>希望提高代码质量","like_count":0},{"had_liked":false,"id":266099,"user_name":"田镇珲","can_delete":false,"product_type":"c1","uid":1762765,"ip_address":"","ucode":"F112D969D81822","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e5/cd/2d6d8f80.jpg","comment_is_top":false,"comment_ctime":1607167326,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1607167326","product_id":100039001,"comment_content":"目前最大的刚需就是通过设计模式 读懂前辈写的代码 从而提高自己的代码能力","like_count":0},{"had_liked":false,"id":265185,"user_name":"冯佳兴","can_delete":false,"product_type":"c1","uid":1717342,"ip_address":"","ucode":"41D308E99EF9FF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/34/5e/089ac156.jpg","comment_is_top":false,"comment_ctime":1606809312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606809312","product_id":100039001,"comment_content":"设计模式是一种思想，其实写代码是很容易的，但是今天写的自己能看懂，明天也能刚看懂，过一段时间呢？如果自己都看不懂，这段代码不能称为好代码，好的代码是让别人一看就懂，出了问题直接能定位到问题，前提是这段代码有一个良好的设计思路。","like_count":0},{"had_liked":false,"id":264778,"user_name":"mgs2002","can_delete":false,"product_type":"c1","uid":1812970,"ip_address":"","ucode":"F5931108BD509B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a9/ea/5bfce6c5.jpg","comment_is_top":false,"comment_ctime":1606643266,"is_pvip":false,"replies":[{"id":"96061","content":"来得及啊 加油","user_name":"作者回复","comment_id":264778,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700535,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1606643266","product_id":100039001,"comment_content":"30多了还来得及吗。。","like_count":0,"discussions":[{"author":{"id":2920655,"avatar":"","nickname":"Geek_69090b","note":"","ucode":"758C05A4865E4F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553253,"discussion_content":"假设子类要用一个父类的方法，只能用父类的，无法改变，如果用注入的话，注入的类的方法是可以改变的，像如策略模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645788244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264739,"user_name":"李奇峰","can_delete":false,"product_type":"c1","uid":1563487,"ip_address":"","ucode":"22BC56BA5A5726","user_header":"https://static001.geekbang.org/account/avatar/00/17/db/5f/c5791954.jpg","comment_is_top":false,"comment_ctime":1606624173,"is_pvip":false,"replies":[{"id":"96064","content":"加油~~~","user_name":"作者回复","comment_id":264739,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700551,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1606624173","product_id":100039001,"comment_content":"设计模式在大学的时候通过《Head First 设计模式》这本书学过一段时间，但是工作之后就忘掉了。好像都只是能把业务逻辑完成就可以了，很少用到设计模式的思想去编写代码。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510671,"discussion_content":"加油~~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700551,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264538,"user_name":"高崇波","can_delete":false,"product_type":"c1","uid":2343749,"ip_address":"","ucode":"682C0147C00BE2","user_header":"https://static001.geekbang.org/account/avatar/00/23/c3/45/c80bea83.jpg","comment_is_top":false,"comment_ctime":1606494000,"is_pvip":false,"replies":[{"id":"96069","content":"嗯嗯 加油","user_name":"作者回复","comment_id":264538,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700579,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1606494000","product_id":100039001,"comment_content":"我是做嵌入式开发的主要是用C语言，C语言语法结构上不支持面向对象，但是在思想可以实现面向对象，对这边了解的太少，代码的架构能力太薄弱，每次做项目都是考虑实现功能，没有对代码的扩展性，可维护性等做太多的考虑。希望学习设计模式能够带我提升一个档次","like_count":0,"discussions":[{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340081,"discussion_content":"是","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609899938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262996,"user_name":"峰","can_delete":false,"product_type":"c1","uid":1056019,"ip_address":"","ucode":"C53CB64E8E7D19","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/13/31ea1b0b.jpg","comment_is_top":false,"comment_ctime":1605937808,"is_pvip":true,"replies":[{"id":"96114","content":"������","user_name":"作者回复","comment_id":262996,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700869,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1605937808","product_id":100039001,"comment_content":"设计模式是组织代码的艺术，怎么让接盘侠研究代码的时候能专注于一个更小的上下文，怎么面对不断变化的需求，隔离变化，能做可扩展的修改，或者尽量小范围修改。<br>还记得，那是一个查询路由的东东，对不同查询类型，都会走一溜烟的处理链条，而在链条的每一环，都要判断查询的类型是什么要不要跳过，或者进行特殊化的处理。这样对新增一个查询类型，就意味着要改整个链条。我做的修改是，把查询类型和查询链条做了接耦，为每一种查询装配一种独特的处理链。","like_count":0,"discussions":[{"author":{"id":1965699,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","nickname":"慎独明强","note":"","ucode":"DC2F7F2C0C8F60","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338424,"discussion_content":"同步rpc还是异步rpc。同步调用还是耦合在一起","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609287807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261289,"user_name":"Geek_5a5d9a","can_delete":false,"product_type":"c1","uid":2046477,"ip_address":"","ucode":"8A444C96DB4389","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/6gic9ib9c9865ec0rKEPZJtvbj2yINgrGtjibr95luMEZdJ0oBV0hJUbE7iaeia4B802CibweG3yicJSCo5c93MeCSxMg/132","comment_is_top":false,"comment_ctime":1605259227,"is_pvip":false,"replies":[{"id":"96150","content":"嗯嗯","user_name":"作者回复","comment_id":261289,"uid":"1190123","ip_address":"","utype":1,"ctime":1606701492,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1605259227","product_id":100039001,"comment_content":"移动端开发:<br>常用的设计模式: 单例模式, 代理模式, 观察者模式, 适配器模式, 还有用到一些策略模式","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509441,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701492,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260693,"user_name":"Geek_7cb078","can_delete":false,"product_type":"c1","uid":1697610,"ip_address":"","ucode":"EEEE2DF8D21121","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ6peT4XHOU7sibZ1Htb2oU3Ldg668DPWJTZuq1y6NzcTKPxU0KB50Cy3EI8CJ33bJAHnlZ1jVicg8Q/132","comment_is_top":false,"comment_ctime":1605084795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605084795","product_id":100039001,"comment_content":"聊一聊你对设计模式相关知识的重要性的看法；<br>已经整天在写CRUD，项目在紧急开发过程中一团乱麻，为了效率 而放弃设计，其实是直接涉及不位，不知道怎么放，怎么分层，怎么分包，怎么聚合还是集成，想写但是知识储备不够，看了一部分Spring源码，虽说雾里看花，但是依旧感到震撼<br>在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>单例: 项目中就一个实例<br>工厂：去生产组装需要的业务对象，不需要手动去new，统一管理<br>适配器，去解决恶心的ifelse的问题，适配器提高了扩展性","like_count":0},{"had_liked":false,"id":259746,"user_name":"dream","can_delete":false,"product_type":"c1","uid":1965961,"ip_address":"","ucode":"37EB9A740280BE","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ff/89/ac4dd89f.jpg","comment_is_top":false,"comment_ctime":1604824682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604824682","product_id":100039001,"comment_content":"1. 在日志系统使用@Slf4j注解，无需创建LoggerFactory,该日志由门面模式实现<br>2.在SlectCode.xml中存有方位和省份的定位信息，那么每使用一次，就需要new一个对象坑定不是好的方法，此时使用单例模式，在整个程序运行中，只需要创建一个对象，使用时，直接获取就好","like_count":0},{"had_liked":false,"id":258951,"user_name":"Geek_ashun","can_delete":false,"product_type":"c1","uid":2292214,"ip_address":"","ucode":"2F96E46EAA16D7","user_header":"https://static001.geekbang.org/account/avatar/00/22/f9/f6/312cf4ba.jpg","comment_is_top":false,"comment_ctime":1604586115,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1604586115","product_id":100039001,"comment_content":"以前从没系统的学过设计模式,这次买了课程,加油","like_count":0},{"had_liked":false,"id":258310,"user_name":"Leo","can_delete":false,"product_type":"c1","uid":1038811,"ip_address":"","ucode":"BFAF83E23199DA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d9/db/66d5b3f4.jpg","comment_is_top":false,"comment_ctime":1604379588,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604379588","product_id":100039001,"comment_content":"1. 设计模式能让我更快看懂源码；能写出更高质量的代码，提高别人review代码的效率；<br>2.项目开发中好像没刻意用过啥设计模式，因为还不太会，从现在开始吧。","like_count":0},{"had_liked":false,"id":258174,"user_name":"Coding小先","can_delete":false,"product_type":"c1","uid":1051563,"ip_address":"","ucode":"965B1CC757E026","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/ab/0e2857e5.jpg","comment_is_top":false,"comment_ctime":1604319232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604319232","product_id":100039001,"comment_content":"遇到的设计模式基本很少，很多都是 if else 搞定。懂设计模式的话，对阅读框架源码很有帮助，这点深有体会，先前看 Kafka 源码的时候，有些看的一脸懵逼","like_count":0},{"had_liked":false,"id":255253,"user_name":"幺零贰肆","can_delete":false,"product_type":"c1","uid":1726261,"ip_address":"","ucode":"B559E8E9AA5183","user_header":"https://static001.geekbang.org/account/avatar/00/1a/57/35/b325d272.jpg","comment_is_top":false,"comment_ctime":1603290201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603290201","product_id":100039001,"comment_content":"我说怎么之前看源码总是很吃力，原来缺少这部分知识，一语中的，自己浑然不知<br><br>一、重要性：1.能够读懂大牛写的代码的真正思想和精髓<br>2.自己也可以编写出高质量的有内涵的代码<br>3.增加可扩展性，减少线上bug<br>二、1.单例模式：全局缓存<br>2. 观察者模式：解决业务线程挂掉的情形","like_count":0},{"had_liked":false,"id":253667,"user_name":"Kelly.W","can_delete":false,"product_type":"c1","uid":1518308,"ip_address":"","ucode":"6EFB58A24355C4","user_header":"https://static001.geekbang.org/account/avatar/00/17/2a/e4/714ffd01.jpg","comment_is_top":false,"comment_ctime":1602823925,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1602823925","product_id":100039001,"comment_content":"1. 学习设计模式，可以在日常工作中使用，避免烂代码堆砌，也易于其他人维护，提高自己和团队的效率。<br>2. 能够设计结构合理的通用功能组件<br>3. 提升面试竞争力","like_count":0},{"had_liked":false,"id":253531,"user_name":"住在隔壁的黎蜀黍","can_delete":false,"product_type":"c1","uid":2159236,"ip_address":"","ucode":"BFDA73894AC90B","user_header":"https://static001.geekbang.org/account/avatar/00/20/f2/84/99c1d86c.jpg","comment_is_top":false,"comment_ctime":1602766665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602766665","product_id":100039001,"comment_content":"真的是从O开始学习了，做了六七年搬运功，还是设计模式一知半解。加油","like_count":0},{"had_liked":false,"id":252173,"user_name":"杨鹤云","can_delete":false,"product_type":"c1","uid":2186259,"ip_address":"","ucode":"A09CA071D93B38","user_header":"https://static001.geekbang.org/account/avatar/00/21/5c/13/dccc0cfb.jpg","comment_is_top":false,"comment_ctime":1602159689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602159689","product_id":100039001,"comment_content":"说起这，我就想起以前在澳洲读本科cs的时候， 我们学校本科cs,SE，mobile development三个方向前两年的课程一样，第二年的关于设计模式的课基本就是门劝退课了，我三次过，每次test-50分，均分不到25。好多人过不了那门课就直接换专业或者退学了。。。。","like_count":0},{"had_liked":false,"id":250958,"user_name":"过往的莲华江海","can_delete":false,"product_type":"c1","uid":1157348,"ip_address":"","ucode":"271999FE861B69","user_header":"https://static001.geekbang.org/account/avatar/00/11/a8/e4/6e07d6c1.jpg","comment_is_top":false,"comment_ctime":1601291812,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601291812","product_id":100039001,"comment_content":"今天用了观察者模式，终于告别了轮询","like_count":0},{"had_liked":false,"id":249215,"user_name":"REAL_MADIRD","can_delete":false,"product_type":"c1","uid":1012889,"ip_address":"","ucode":"9E327B5456739D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/99/dbdee494.jpg","comment_is_top":false,"comment_ctime":1600506912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600506912","product_id":100039001,"comment_content":"就是想提高开发效率，公司业务需求变更太频繁，想学点设计模式，可以写出易维护，易扩展的代码，这样再不怕业务需求变更了","like_count":0},{"had_liked":false,"id":249039,"user_name":"DayDayUp","can_delete":false,"product_type":"c1","uid":1610552,"ip_address":"","ucode":"9C53659518AB74","user_header":"https://static001.geekbang.org/account/avatar/00/18/93/38/71615300.jpg","comment_is_top":false,"comment_ctime":1600411082,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1600411082","product_id":100039001,"comment_content":"之前准备面试就准备了基本的简单工厂模式，单例模式。果然书到用时方恨少，现在到了公司看了公司的代码就有点两眼一抹黑的感觉，读的很难，于是就下决心一口气学完，然后以后就开始实践和加强。","like_count":0},{"had_liked":false,"id":246877,"user_name":"JackWang","can_delete":false,"product_type":"c1","uid":1233080,"ip_address":"","ucode":"A27692F6632761","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/fSia25euAvKhffia7qia2xe1cODibS18iaicSiarZVPhPic19LzIpnI9zoHib29FJSOUUCtibVBR00oj7jwxm47FXTLk0a4Q/132","comment_is_top":false,"comment_ctime":1599509788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599509788","product_id":100039001,"comment_content":"在以往的项目中利用过策略模式，主要为了避免if…else if…else的问题","like_count":0},{"had_liked":false,"id":246249,"user_name":"白泽丶","can_delete":false,"product_type":"c1","uid":1320595,"ip_address":"","ucode":"0F1C044AD1B3C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/93/b4791ee3.jpg","comment_is_top":false,"comment_ctime":1599222408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599222408","product_id":100039001,"comment_content":"大学刚毕业的时候读了一遍设计模式之禅，现在除了5大原则都忘得差不多了","like_count":0},{"had_liked":false,"id":245661,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599018653,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599018653","product_id":100039001,"comment_content":"聊一聊你对设计模式相关知识的重要性的看法；<br>1、思考问题的方式。不会的话，就很容易去按照堆砖的思路叠加。<br>会的话，会把建楼分门别类的角色、恰当的流程，恰当的功能，进行有序建立<br><br>在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>1、单例、工厂模式：解决新建对象只能一个，以及复用新建对象<br>2、桥接模式：将变化转移到另外一个对象<br>     适配器模式：不相容的接口，转化为相容的接口，通过组合","like_count":0},{"had_liked":false,"id":245502,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1598961384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598961384","product_id":100039001,"comment_content":"作业：设计模式重要性，让自己的代码看起来更优美，可拓展性更好，虽然很多领导层不怎么重视，还记得组长跟我们说，之前总监说的一句话：“就算你能把代码写的������样，又能怎么样？ 项目能跑起来，稳定运行就可以了。   但我不认同这个观点，同样说写代码，你写的好，那这就是你的能力。学到的永远都是自己的，技多不压身<br>2、自己在项目中用的最多的是模板模式，策略模式。其他的没有主动去用过","like_count":0},{"had_liked":false,"id":245161,"user_name":"Ryoma","can_delete":false,"product_type":"c1","uid":1130590,"ip_address":"","ucode":"7F692369239692","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","comment_is_top":false,"comment_ctime":1598849958,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1598849958","product_id":100039001,"comment_content":"对设计模式相关知识的重要性的看法：觉得自己写出了特别优美的代码——然后发现只不过是应用了某个设计模式后的冲击感","like_count":0},{"had_liked":false,"id":245017,"user_name":"一尾","can_delete":false,"product_type":"c1","uid":1517556,"ip_address":"","ucode":"67D404036231D1","user_header":"https://static001.geekbang.org/account/avatar/00/17/27/f4/a1ce6248.jpg","comment_is_top":false,"comment_ctime":1598783903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598783903","product_id":100039001,"comment_content":"做界面开发。只用到了单例 工厂 观察者 策略这几种，或许也用到了适配器","like_count":0},{"had_liked":false,"id":244963,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1598763776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598763776","product_id":100039001,"comment_content":"现在最大的问题是，写代码的时候，可能用了某种设计模式，但是根本不知道那个是设计模式，很迷茫","like_count":0},{"had_liked":false,"id":244960,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1598763282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598763282","product_id":100039001,"comment_content":"写了6年的烂代码，需要放弃之前的垃圾思维，从零开始了","like_count":0},{"had_liked":false,"id":244369,"user_name":"yingyingqin","can_delete":false,"product_type":"c1","uid":1244276,"ip_address":"","ucode":"D75A0C4DDC5F08","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJQyP4WVaRJVZcYD5h0GhEgzdML1qGyDBibu21TsiaDHxBx8knCzrClsoh9ZZwjurLGgvsprP6QW9qQ/132","comment_is_top":false,"comment_ctime":1598494478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598494478","product_id":100039001,"comment_content":"设计模式对于大的系统的设计和小的一个类的设计和实现都很重要。<br>使用过的设计模式基本没有，不过想起来有次在看opencv图像拼接的源码的时候，它在实现特征点的提取功能时，有多种特征点，就采用了类的继承的方法，在父类里定义了虚函数但没有实现，在子类中实现了针对具体特征点的虚函数。","like_count":0},{"had_liked":false,"id":244199,"user_name":"Geek_35cfdd","can_delete":false,"product_type":"c1","uid":1792214,"ip_address":"","ucode":"AD9615ABB4CA25","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoiaP1gptuBzj3AXMpY8yLTIkpuarouOVzLde4636UJ7zAgnOEZibiaAIRVAicFaO64ftH45YOn1pD3VA/132","comment_is_top":false,"comment_ctime":1598426651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598426651","product_id":100039001,"comment_content":"设计模式更像是前人根据历史的经验总结出来的方式，方法。就像是武侠中的招式，虽然把招式学好，可以成为一流高手。但是想成为超一流高手，到时候就不拘泥于招式（各种模式）。而是要学习心法（设计原则）。当然上来就学心法（设计原则），容易走火入魔。哈哈","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503553,"discussion_content":"这个不好定量来区分的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597411793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244188,"user_name":"逆风一战九","can_delete":false,"product_type":"c1","uid":2143900,"ip_address":"","ucode":"83127627F6F37C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI45zO9GOMquhD0ia1wTBSwtJ1juPcpFTSrOGicGW3jf6JclaudauHicN8OpADArQKL8zPtDicEx4aicgA/132","comment_is_top":false,"comment_ctime":1598422504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598422504","product_id":100039001,"comment_content":"设计模式最开始是建筑大师提出来的，建筑如果没有好的设计，就会费工费料， 代码也是如此， 早点读书，学习设计模式，有利于享受复利，<br>用过的设计模式有：<br>1.单例模式：<br>     分 单线程里面 就是始终判断一个初始化为空的变量是否为空， 为空就实例化对应的类，否则直接返回这个变量<br>        多线程的时候， 涉及到后端的知识，暂时还不清楚java如何实现，<br>2. 观察者模式： vue 是mvvm  vm 连接 view 和 model 做到一方变化 另一方由框架完成自动跟着变化，实现数据与ui同步，ui变化与数据变化同步， 方便开发，公众号的订阅和发布， 具体订阅发布和观察者有什么区别 还要再具体学习<br>3 工厂模式： 避免代码调用的过程中，频繁使用new关键字，而是通过工厂模式 统一返回需要的对象<br>4 模版模式， 类似mixin 或者宏 <br>5 命令模式， 一个命令对应一个动作， 对外隐藏实现细节<br>6 策略模式， 避免多个if else的判断<br>8 代理模式， 隐藏本体，实现本体想要功能。例如明星和经纪人<br>9 状态模式，状态的流转，前端Promise 就是一个状态机 由三种状态 对应的状态流转<br><br>以上还可以更高维度划分<br>1. 创建型：关注对象如何实例化或者产生的<br>2 行为型：对象不是一个孤立的个人，对象包括属性和方法，多个对象之间如何通信，包括方法和属性的的互相如何使用<br>3 表现型： 对这个理解还不够，后面再学习","like_count":0},{"had_liked":false,"id":243790,"user_name":"y y gi r l","can_delete":false,"product_type":"c1","uid":2132615,"ip_address":"","ucode":"0BC00677D3071D","user_header":"https://static001.geekbang.org/account/avatar/00/20/8a/87/dd68531b.jpg","comment_is_top":false,"comment_ctime":1598277318,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598277318","product_id":100039001,"comment_content":"设计模式是解决代码耦合，扩展性的技术，业务代码里倒是不怎么用设计模式，做开源项目用得很多","like_count":0},{"had_liked":false,"id":241645,"user_name":"python","can_delete":false,"product_type":"c1","uid":1870014,"ip_address":"","ucode":"2226125EBC99A5","user_header":"https://static001.geekbang.org/account/avatar/00/1c/88/be/cc6a7c11.jpg","comment_is_top":false,"comment_ctime":1597377738,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597377738","product_id":100039001,"comment_content":"课堂讨论：<br>1、设计模式是对编码思维的一种矫正，吸取前人经验，提高自我编码能力<br>2、用过单利模式，在数据库链接创建链接对象的时候","like_count":0},{"had_liked":false,"id":240955,"user_name":"飞狼踏月渡惊风","can_delete":false,"product_type":"c1","uid":1531473,"ip_address":"","ucode":"48E64ABDE30464","user_header":"https://static001.geekbang.org/account/avatar/00/17/5e/51/f52b0e17.jpg","comment_is_top":false,"comment_ctime":1597132259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597132259","product_id":100039001,"comment_content":"设计模式：是大佬们总结的经验，套用人只能接受教训不能接受经验这句话来讲，没有实战都是空谈，我以为我知道罢了。<br>记录一点废话：<br>说到用到的模式，咸鱼第一反应工厂单例，其次观察者跟代理，前二是各种框架乱吹，大概原理也讲不清晰，观察跟代理惊然发现一时间也是也说不上来，用到的时候研究了好一段时间，真的就是靠百度会用的咸鱼，也没有系统地做好记录，往后阿梗不要太懒，小聪明只能过一时不能过一世。","like_count":0},{"had_liked":false,"id":240200,"user_name":"Javatar","can_delete":false,"product_type":"c1","uid":2032840,"ip_address":"","ucode":"E216645CDF632C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/04/c8/3c7af100.jpg","comment_is_top":false,"comment_ctime":1596786697,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596786697","product_id":100039001,"comment_content":"关于优秀开源项目源码那段说的简直太对了！！！很多设计模式，你如果不知道，或者不熟悉，源码中那一点点就够你想半天，关键最后还是想不明白；但如果你事先掌握了这种设计模式，再去看源码，你似乎就能理解为啥要这么写了，甚至还会和作者产生一点共鸣，那种感觉很奇妙...","like_count":0},{"had_liked":false,"id":239930,"user_name":"victor","can_delete":false,"product_type":"c1","uid":1389245,"ip_address":"","ucode":"23E2F8CF93E46E","user_header":"https://static001.geekbang.org/account/avatar/00/15/32/bd/305b457a.jpg","comment_is_top":false,"comment_ctime":1596695872,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596695872","product_id":100039001,"comment_content":"设计模式真的是很重要，不管是在平时写代码的过程中还是在看别人的代码过程中！没有扎实的功底，在阅读源码的过程中很多东西看的是眼花缭乱的，看着看着就断线了。<br>希望能通过课程提高自己的编码能力，写出漂亮的代码！<br>2.因为自己在这方面的功底比较弱，所以平时开发的工程中单例用的比较多，其他的模式都很少用！","like_count":0},{"had_liked":false,"id":239909,"user_name":"zz","can_delete":false,"product_type":"c1","uid":1401424,"ip_address":"","ucode":"0EA8F2BCEEF07D","user_header":"https://static001.geekbang.org/account/avatar/00/15/62/50/5af82e73.jpg","comment_is_top":false,"comment_ctime":1596690451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596690451","product_id":100039001,"comment_content":"1、应用设计模式可以避免在开发过程中过程式编码，可以把各个代码优雅的组合在一起，为以后业务扩展留更光明的路子<br>2、应用场景<br>         1》责任链模式：用于商品订购场景鉴权，不同用户、不同商品有不同的校验规则。每类场景可能存在相同的校验逻辑，将这些校验逻辑抽取出来作为链条中的一环，在校验前组合每类场景的校验链条。<br>         2》代理模式：通过代理模式来实现对接口调用耗时以及日志打印，避免在每个日志中增加业务逻辑<br>         3》策略模式：调用外部接口时，外部接口的调用方式不一致，比如有ws、rest、socket等，将具体的调用封装成一个策略，解决聚合调用外部接口的逻辑，以及对调用外部接口统一实现日志记录、耗时记录、异常记录等内容","like_count":0},{"had_liked":false,"id":239854,"user_name":"zhao健枫的微信ID确实有点长啊","can_delete":false,"product_type":"c1","uid":1535005,"ip_address":"","ucode":"46C5D8EBE40109","user_header":"https://static001.geekbang.org/account/avatar/00/17/6c/1d/203e2917.jpg","comment_is_top":false,"comment_ctime":1596678147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596678147","product_id":100039001,"comment_content":"为什么学：想掌握一种能力--能写出那种让人一眼看不懂，看多两眼不禁称妙的代码的能力！！！<br>用过：只写过观察者，策略，Builder等烂大街的模式，可能还是半吊子。","like_count":0},{"had_liked":false,"id":239843,"user_name":"席席","can_delete":false,"product_type":"c1","uid":1591399,"ip_address":"","ucode":"656377E29D4F76","user_header":"https://static001.geekbang.org/account/avatar/00/18/48/67/128eda8f.jpg","comment_is_top":false,"comment_ctime":1596676421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596676421","product_id":100039001,"comment_content":"觉得王老师说的这两句挺好的，一是如果不懂设计模式阅读源码的脑容量会被设计模式的代码复杂度消耗。二是假设我自己在代码里写了设计模式，如何让后者也能便于理解。","like_count":0},{"had_liked":false,"id":239762,"user_name":"小玉家的猫","can_delete":false,"product_type":"c1","uid":1731082,"ip_address":"","ucode":"ACA36922F22B69","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6a/0a/45562844.jpg","comment_is_top":false,"comment_ctime":1596635553,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596635553","product_id":100039001,"comment_content":"写过最多的就是单例模式了，感觉很好用！但副作用也很大，容易出现内存泄露。","like_count":0},{"had_liked":false,"id":239524,"user_name":"andy","can_delete":false,"product_type":"c1","uid":1752513,"ip_address":"","ucode":"A1D3C7C9DCCB89","user_header":"https://static001.geekbang.org/account/avatar/00/1a/bd/c1/e10c4014.jpg","comment_is_top":false,"comment_ctime":1596554420,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1596554420","product_id":100039001,"comment_content":"这不就是面试常问的问题，尤其第二个问题<br>先回答第一个问题<br>对于设计模式，它是对各种实际应用场景的高度抽象，可以说是前人对于人类生活的高度总结，是经典中的经典，可以说，对于许多的计算机基础学科而言，设计模式是能够非常具体的贴近人类生活的场景的了，同时，设计模式，可以理解为套路，他能够方便开发者，更快更高效的应对相似的场景，能够设计出高效高质量的代码。不是有那么一种说法，高手，都是那些有着系统知识，有着各种套路和方法论的人嘛。而设计模式，可以说是，coder高手的必备武器。<br>对于第二个问题，多年的开发经验，实际上用到了许多的设计模式。<br>对于单例设计模式，为了能够解决多线程并发导致的资源访问，维护原子性操作，在号码生成的业务场景中，使用了单例设计模式，进行访问控制，当然，这里也加上了锁，进而保证号码生成不会出现重复的情况。<br>再比如生产与消费者模式，这个在整个电商业务中用的非常多，为了能够设计一个大量调用火车票订票服务的系统，采用了该模式，不断将新生成的订票订单，放入队列之中，随后，消费者再获取数据，访问第三方的火车票订票服务系统。<br>其他的模式，这里就不一一举例了。<br>","like_count":0},{"had_liked":false,"id":238893,"user_name":"迈克糖","can_delete":false,"product_type":"c1","uid":1749228,"ip_address":"","ucode":"A55D3DB2B20C4B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b0/ec/78be126d.jpg","comment_is_top":false,"comment_ctime":1596358750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596358750","product_id":100039001,"comment_content":"我用的最多的事模板设计模式，和策略模式。拿着锤子看的眼里到处都是钉子，我发现什么我写什么代码都会往这两种模式上扯","like_count":0},{"had_liked":false,"id":238690,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1596262223,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596262223","product_id":100039001,"comment_content":"作者说到看开源项目无法看懂，我深有体会，我能够看懂每个代码段的功能，但是对于稍大一些的项目，我就无法了解其中的精髓，很快会陷入看不懂得状态，因此，设计模式在大型项目里是有举足轻重的地位的。我在工作中，对于一些资源和配置文件的管理，单例模式还是用得比较多。","like_count":0},{"had_liked":false,"id":238586,"user_name":"Elvis Lee","can_delete":false,"product_type":"c1","uid":2098270,"ip_address":"","ucode":"A4B26AFFE817FA","user_header":"https://static001.geekbang.org/account/avatar/00/20/04/5e/5d2e6254.jpg","comment_is_top":false,"comment_ctime":1596205675,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596205675","product_id":100039001,"comment_content":"重要性：学习设计模式，更好的构建项目，编写好的代码。职场上升职加薪<br>游戏开发，经常需要用到单例，但是由于没学设计模式，写了很多垃圾代码，自己后期维护也很难，所以决定好好学习设计模式","like_count":0},{"had_liked":false,"id":238574,"user_name":"。华伟","can_delete":false,"product_type":"c1","uid":2095422,"ip_address":"","ucode":"CD2645632E70D0","user_header":"https://static001.geekbang.org/account/avatar/00/1f/f9/3e/aef7a849.jpg","comment_is_top":false,"comment_ctime":1596201671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596201671","product_id":100039001,"comment_content":"学设计模式主要是想让自己写的代码做到有的放矢，而不是根据感觉写，因为每个时间段的感觉不一样","like_count":0},{"had_liked":false,"id":238497,"user_name":"栤枫","can_delete":false,"product_type":"c1","uid":1242121,"ip_address":"","ucode":"72C5D6EB22CA9F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f4/09/d78fa748.jpg","comment_is_top":false,"comment_ctime":1596185092,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596185092","product_id":100039001,"comment_content":"从面向过程到面向对象编程的转变","like_count":0},{"had_liked":false,"id":238418,"user_name":"静","can_delete":false,"product_type":"c1","uid":1374928,"ip_address":"","ucode":"8C0D23AAEC67C4","user_header":"https://static001.geekbang.org/account/avatar/00/14/fa/d0/17c6ef3b.jpg","comment_is_top":false,"comment_ctime":1596163367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596163367","product_id":100039001,"comment_content":"新手学习设计模式，跟着大佬从零开始","like_count":0},{"had_liked":false,"id":238276,"user_name":"Happy—sea","can_delete":false,"product_type":"c1","uid":1624484,"ip_address":"","ucode":"4EAD3636164392","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/a4/66b606ad.jpg","comment_is_top":false,"comment_ctime":1596108304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596108304","product_id":100039001,"comment_content":"看了一些设计模式，但是不会用，继续学习老师的课程","like_count":0},{"had_liked":false,"id":238234,"user_name":"坚持","can_delete":false,"product_type":"c1","uid":1004051,"ip_address":"","ucode":"80049DF366F37E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI8HY5UxPvK5EIEicxCARjePdicpkcdyViaxn0dHrVsfXOA49BHkyMW4h3LSZhnCz6jXTgx2PFEKXYWQ/132","comment_is_top":false,"comment_ctime":1596099412,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596099412","product_id":100039001,"comment_content":"设计模式可以让代码更好看，像是一个规则，coding的时候有迹可循，不过，工作三年了，才用过观察者模式和单例模式，欠缺好多，过来补课了：）","like_count":0},{"had_liked":false,"id":237685,"user_name":"汉江","can_delete":false,"product_type":"c1","uid":1788647,"ip_address":"","ucode":"01622D984B8F9B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/4a/e7/6c16af5d.jpg","comment_is_top":false,"comment_ctime":1595925249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595925249","product_id":100039001,"comment_content":"看了作者写的话  才明白 自己以前看spring源码  虽然基本的流程是清晰的，但是为什么这么设计是懵逼的","like_count":0},{"had_liked":false,"id":237424,"user_name":"《木之南》","can_delete":false,"product_type":"c1","uid":2085644,"ip_address":"","ucode":"C60D2F6014EBAE","user_header":"https://static001.geekbang.org/account/avatar/00/1f/d3/0c/5e48f701.jpg","comment_is_top":false,"comment_ctime":1595825502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595825502","product_id":100039001,"comment_content":"设计模式是一个开发具备的一种素养；要慢慢的培养并在实际开发中锻炼与升华；<br><br>用过单例模式，业务需求发送短信功能；<br>用过工厂模式，物联网底端与设备进行通讯时使用过；","like_count":0},{"had_liked":false,"id":237081,"user_name":"David","can_delete":false,"product_type":"c1","uid":1021825,"ip_address":"","ucode":"22CBBC13FC97A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/81/e1eaf621.jpg","comment_is_top":false,"comment_ctime":1595670632,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1595670632","product_id":100039001,"comment_content":"使用策略模式 应对对接不同渠道使用不同handler","like_count":0},{"had_liked":false,"id":236758,"user_name":"taku","can_delete":false,"product_type":"c1","uid":2068684,"ip_address":"","ucode":"B22DA9A4A9DC91","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotIianb3beTzsGIte6BZxlIhEwc2ryrNBGxZy8ibKbfibVJyUS8d3ZxybAdfJwHPm13ydPC4VJP7Lbw/132","comment_is_top":false,"comment_ctime":1595520080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595520080","product_id":100039001,"comment_content":"现在开始学习，加油！","like_count":0},{"had_liked":false,"id":236574,"user_name":"思密达","can_delete":false,"product_type":"c1","uid":1812646,"ip_address":"","ucode":"82FF8EE9A37461","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a8/a6/825879a0.jpg","comment_is_top":false,"comment_ctime":1595470682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595470682","product_id":100039001,"comment_content":"1、很重要，早点学习，就可以直接运用在工作中，一边学一变练，日积月累，就可以甩开周围人几条街。<br>2、初来乍到，组内的project的代码，各种继承，知道使用了某种设计模式，但是就是看不懂套路，不开心。","like_count":0},{"had_liked":false,"id":235444,"user_name":"Gopher","can_delete":false,"product_type":"c1","uid":1206229,"ip_address":"","ucode":"3C1F9012BB486D","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","comment_is_top":false,"comment_ctime":1595039210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595039210","product_id":100039001,"comment_content":"读完了 《大话设计模式》和《clean code》 只是有意识的去简单优化下命名，能复用的就复用，但是还是不会设计","like_count":0},{"had_liked":false,"id":235198,"user_name":"prepared","can_delete":false,"product_type":"c1","uid":1194853,"ip_address":"","ucode":"00E54A5C7CDCBE","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/65/3a4fc8cf.jpg","comment_is_top":false,"comment_ctime":1594943074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594943074","product_id":100039001,"comment_content":"数据共享平台，用到工厂模式。主要解决要共享多类数据，但是它的逻辑是一样的，使用工场方法创建针对不同数据的处理类。","like_count":0},{"had_liked":false,"id":234502,"user_name":"笨鸟","can_delete":false,"product_type":"c1","uid":1236320,"ip_address":"","ucode":"68029ADA76AA5A","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","comment_is_top":false,"comment_ctime":1594706939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594706939","product_id":100039001,"comment_content":"我们公司都是用IF-elseif-else ","like_count":0},{"had_liked":false,"id":232422,"user_name":"幽林萌逐","can_delete":false,"product_type":"c1","uid":1520451,"ip_address":"","ucode":"E6D95EC891800F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLqrAA1j4Oyy6ibicNOicn8K0olrEjtLLanic8V0y9icia6cvCVRCiabOm5llC0WhzcSWvaI2fia75hYbvjrQ/132","comment_is_top":false,"comment_ctime":1593999436,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593999436","product_id":100039001,"comment_content":"设计模式优点是可以提高代码的可维护性可读性<br>项目中由于有不同的供应商，使用工厂模式 根据入参的key返回单接口的不同的实现类，从而执行不同的逻辑。<br>我抛个问题点出来，很多同事不了解设计模式，比如我在项目里使用了一个较冷门的设计模式，但是他们有时候读我的代码就会有点晕，相反对于他们来说if else反而更好读，这个问题就很尴尬。","like_count":0},{"had_liked":false,"id":232123,"user_name":"sorationalist","can_delete":false,"product_type":"c1","uid":2012902,"ip_address":"","ucode":"4E2B3B3234E1C5","user_header":"https://static001.geekbang.org/account/avatar/00/1e/b6/e6/b2be4536.jpg","comment_is_top":false,"comment_ctime":1593860308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593860308","product_id":100039001,"comment_content":"平时开发确实只是简单的增删改查，并没有刻意使用任何设计模式。","like_count":0},{"had_liked":false,"id":229460,"user_name":"harukong","can_delete":false,"product_type":"c1","uid":1443551,"ip_address":"","ucode":"8FD25B7341FCD7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKRn8Mcfib1laSicpyueZJVbGKOibRKmHP0mlGV3exVSNhIy9nnmmEz2EGFPQL2z40939gVic0AQCw68w/132","comment_is_top":false,"comment_ctime":1593003781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593003781","product_id":100039001,"comment_content":"1、聊一聊你对设计模式相关知识的重要性的看法；<br>--设计模块对于程序员写出高质量代码比较重要，大家都遵循一定的规则去写代码，方便团队规范代码实现<br>2、在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>--使用过单例模式、策略模式<br>--单例模块 避免同一个对象重复创建，多用于项目中使用频率较高的操作类<br>--策略模块 大量if else业务代码实现功能的场景 使用策略模式解决了有新功能在很多if else中往下编写，提高代码的可读性","like_count":0},{"had_liked":false,"id":229333,"user_name":"breeze","can_delete":false,"product_type":"c1","uid":1747935,"ip_address":"","ucode":"143767E9307ED2","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ab/df/7bf49e31.jpg","comment_is_top":false,"comment_ctime":1592967362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592967362","product_id":100039001,"comment_content":"工作刚满一年，学习设计模式的初衷就是单纯的为了应付面试而去网上搜索了一下，但在实际工作中发现，设计模式非常重要，网上讲解的都是零零散散的，从来没有系统的学习过。","like_count":0},{"had_liked":false,"id":228076,"user_name":"杨锋","can_delete":false,"product_type":"c1","uid":1283461,"ip_address":"","ucode":"85A7828A538FB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","comment_is_top":false,"comment_ctime":1592549551,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592549551","product_id":100039001,"comment_content":" 因为平时工作基本都是crud，设计模式在工作过没太大的感觉。但是对于看源码，设计模式是必须要懂的，比如spring aop源码。如果不懂动态代理，基本上就没法看下去。","like_count":0},{"had_liked":false,"id":226507,"user_name":"小树苗","can_delete":false,"product_type":"c1","uid":1644500,"ip_address":"","ucode":"71288176D058E2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqtnoXPFibFwKdrUibJQWYSCmAlc7FeEH5MbjiawszNgwEXAkuWKGYQMTQbnQbjlR8n9lpDgN4GQHoXQ/132","comment_is_top":false,"comment_ctime":1592124921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592124921","product_id":100039001,"comment_content":"1.设计模式对于组织大型项目代码具有指导意义。<br>2.很多开发框架包含很多设计模式，如果不理解设计模式，就会知其然不知其所以然。","like_count":0},{"had_liked":false,"id":226439,"user_name":"Chris Zou","can_delete":false,"product_type":"c1","uid":1897148,"ip_address":"","ucode":"B6DFC71C1DD8B7","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/bc/ffc7ad67.jpg","comment_is_top":false,"comment_ctime":1592103722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592103722","product_id":100039001,"comment_content":"* 聊一聊你对设计模式相关知识的重要性的看法；<br>1. 应用到实践中，设计和开发可扩展性、易维护、阅读性好的高质量代码<br>2. 能看懂大牛写的代码、优秀的开源框架<br><br>* 在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>单例模式，当时主要解决了全局变量的问题；还有工厂模式，只容易扩展一些新的算法；其他的没有仔细想过","like_count":0},{"had_liked":false,"id":226225,"user_name":"邹培俊","can_delete":false,"product_type":"c1","uid":1199467,"ip_address":"","ucode":"54B1AAE6BDAB33","user_header":"https://static001.geekbang.org/account/avatar/00/12/4d/6b/79642a53.jpg","comment_is_top":false,"comment_ctime":1592008941,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592008941","product_id":100039001,"comment_content":"问：聊一聊你对设计模式相关知识的重要性的看法；<br>答：设计模式类似程序员之间的约定俗成的暗号，在说设计和实现的时候比较容易让人理解，降低沟通成本。设计模式是一套成熟的解决问题的思路，而且保证的程序的可扩展性。<br>问：在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>答：我们的系统是一个事件接收和事件驱动的系统。每一个消息的处理都基本上需要经过转换，过滤，打标，执行4个阶段。消息的处理逻辑有的是一样的，有的可能打标规则不一样，有的可能执行规则不一样，为了好维护和方便扩展，我们将具体实现封装成一个个组件，给每个消息处理流程根据业务场景配置不同的转换器，过滤器，打标处理器，执行处理器。这些通过一个链条组成，处理者不需要关系消息的传递。这个过程就用到了策略模式和责任链模式","like_count":0},{"had_liked":false,"id":225897,"user_name":"小盆友想家","can_delete":false,"product_type":"c1","uid":1878383,"ip_address":"","ucode":"933CEBB96C7855","user_header":"https://static001.geekbang.org/account/avatar/00/1c/a9/6f/e05910a9.jpg","comment_is_top":false,"comment_ctime":1591884799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591884799","product_id":100039001,"comment_content":"老师说的太感通深受，虽然已经工作了3-4年，但基本都是在框架下面增增改改，脱离框架之后真正开发时有点摸不到头绪，设计模式只接触过单例、策略、工厂模式，其他接触相对较少；","like_count":0},{"had_liked":false,"id":225378,"user_name":"maybe","can_delete":false,"product_type":"c1","uid":1475528,"ip_address":"","ucode":"93D160F617E750","user_header":"https://static001.geekbang.org/account/avatar/00/16/83/c8/5ce842f6.jpg","comment_is_top":false,"comment_ctime":1591748701,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1591748701","product_id":100039001,"comment_content":"模版模式、工厂模式、单例模式经常用，但是并不懂怎么才算用得恰当、好坏","like_count":0},{"had_liked":false,"id":224207,"user_name":"pony","can_delete":false,"product_type":"c1","uid":1021530,"ip_address":"","ucode":"B72FA864CDD286","user_header":"https://static001.geekbang.org/account/avatar/00/0f/96/5a/846a09f7.jpg","comment_is_top":false,"comment_ctime":1591317236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591317236","product_id":100039001,"comment_content":"1.设计模式是对一类问题总结后给出的成熟的解决方案，可以让软件设计有了标准去参考<br>2.单例模式、委托模式（go），工厂模式","like_count":0},{"had_liked":false,"id":223730,"user_name":"微末凡尘","can_delete":false,"product_type":"c1","uid":1099525,"ip_address":"","ucode":"25EDFD0914D0F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","comment_is_top":false,"comment_ctime":1591167237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591167237","product_id":100039001,"comment_content":"1、设计模式的重要性不言而喻，可以可以大大解放我们的生产力，提高生产效率，编写出可维护，可扩展的代码<br>2、我是一名php开发工程师，在学习thinkphp5源码的过程中，就发现了作者使用了大量的设计模式，比如最简单的单例模式，工厂模式，注册树模式，门面模式等等，学习了一些设计模式，看框架的源代码清楚明了多了。","like_count":0},{"had_liked":false,"id":222397,"user_name":"yonghao","can_delete":false,"product_type":"c1","uid":2026001,"ip_address":"","ucode":"59E0141414CF95","user_header":"","comment_is_top":false,"comment_ctime":1590784658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590784658","product_id":100039001,"comment_content":"打卡：<br>课堂内容: <br>为什么要学习设计模式相关的知识，总结一下的话，主要有这样五点：应对面试中的设计模式相关问题；告别写被人吐槽的烂代码；提高复杂代码的设计和开发能力；让读源码、学框架事半功倍；为你的职场发展做铺垫。<br>讨论：<br>今天课堂讨论的话题有两个：聊一聊你对设计模式相关知识的重要性的看法：自己没有这方面的知识，所以当写了几百行代码，尤其要频繁修改参数的时候，认识到低耦合的重要性，对自己的深感无力，希望跟着争哥好好学习。<br>在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>还没做过项目的菜鸡，以后来回答","like_count":0},{"had_liked":false,"id":221184,"user_name":"王瑞强","can_delete":false,"product_type":"c1","uid":1829090,"ip_address":"","ucode":"DEE4EB5E23433F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/e8/e2/2bcaef68.jpg","comment_is_top":false,"comment_ctime":1590421661,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590421661","product_id":100039001,"comment_content":"（一）设计模式重要性的看法<br>1，可以提高代码的可读性和可维护性。比如多层嵌套的if else看起来头大，改起来也费劲<br>2，可以提高代码的扩展能力。比如：开发一个接口，怎么设计这个接口，才能让它拥有很好的扩展能力，从而兼容新的功能，不至于原来的接口废弃，重新开发<br>（二）曾经用到的设计模式<br>1，单例模式。使用场景：城市基础信息缓存，使用map保存cityId和城市信息，写了一个根据cityId查询cityInfo的方法，使用双重非空判断加锁的方式从map中获取cityInfo<br>2，建造者模式。使用场景：很多地方会用到根据乘客id去查询乘客信息的方法，为了防止在没个调用此方法前都做乘客id的非空检验，我在build方法了统一做了id的检验，为空则抛异常，不为空则调用此接口，同时赋值返回结果给builder属性。个人感觉不好，有点生搬硬套<br>3，简单工厂模式。使用场景：创建一个factory类，在写一个静态方法getInstance(type)，根据字段type来new不同的类<br>4，责任链模式。使用场景：某个业务，满足一定条件，需要打电话通知客人，满足另一个条件，通知客服。我当时构建了一个抽象类，里面保存了一个后继指针。每种处理方式都继承这个抽象类，同时构造成链。现在想想感觉也不怎么合适，感觉责任链更像是一个审批流。","like_count":0},{"had_liked":false,"id":219973,"user_name":"朝小树","can_delete":false,"product_type":"c1","uid":1323875,"ip_address":"","ucode":"18DC282DEF16C8","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/63/2d48822a.jpg","comment_is_top":false,"comment_ctime":1590128112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590128112","product_id":100039001,"comment_content":"如果写业务代码时，只想着简单的实现功能，代码能用；使用框架时只想着怎么使用，就算开发多年，也不会是不会有太大的提高的；要尽量写出易扩展、易用、易维护的代码，尽量简洁明了，注释清晰，性能优越。","like_count":0},{"had_liked":false,"id":219736,"user_name":"永远不要低估一颗冠军的心","can_delete":false,"product_type":"c1","uid":1339230,"ip_address":"","ucode":"FF0DD7382CD3CA","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/5e/3f7e9ccd.jpg","comment_is_top":false,"comment_ctime":1590072319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590072319","product_id":100039001,"comment_content":"1使用设计模式的话会使代码看上去技术含量高一点，最主要的方便是便于扩展。可以用最少的代码完成复杂的功能，而且保证不会有大方向上的逻辑错误。都是前人总结出来的最佳实践，可以大大提高开发的效率。<br>2.在我的开发工作中，见过一次创建数据库连接使用单例模式。但是自己从来没有用过设计模式。甚至最近几年在工作中都没有见到过那一段代码使用了设计模式，也看不出代码是怎样分层的。面试的时候也只能是背一下面试题，从来都举不出使用设计模式真是的案例。之前在网上也买了关于设计模式的课程。现在再回顾，倒是看着眼熟，但是具体分析，也不是很懂。更别说熟练应用了，惭愧。从这个专栏开始学起。","like_count":0},{"had_liked":false,"id":217559,"user_name":"Geek rick","can_delete":false,"product_type":"c1","uid":1754279,"ip_address":"","ucode":"1A9216B2A47E92","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/QlHaicGZOD7c68A6gHC5dGuukQ4VJtVpGCeHHc8ANvHxQ8K9GibVwLHQVURQeWGed8yOWcMqKDnibaSd7S6Y4WKSQ/132","comment_is_top":false,"comment_ctime":1589533698,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589533698","product_id":100039001,"comment_content":"作为一个AI的半吊子程序员，视觉领域有很多好用的库，譬如mmdetection，detectron2等，这些库里面有很多hook，因为自己了解过一点设计模式的皮毛，大概能看出来是个啥模式，我亲眼见到很多同学，按照hook，一个个的看源码，纸上记得密密麻麻，然后框架还是不会用，这就是个模版模式，知道设计模式，扩展起来得心应手。这也是我想再多系统学学设计模式的初衷。","like_count":0},{"had_liked":false,"id":216600,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589293381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589293381","product_id":100039001,"comment_content":"数据结构与算法关注代码高效。面向对象编程、设计原则、设计模式关注代码可扩展、可读、可测试、可维护。","like_count":0},{"had_liked":false,"id":216255,"user_name":"GeekD","can_delete":false,"product_type":"c1","uid":1783804,"ip_address":"","ucode":"357FAB2249FDB4","user_header":"","comment_is_top":false,"comment_ctime":1589210221,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589210221","product_id":100039001,"comment_content":"设计模式的重要性：<br>1.写出易扩展，易维护，清晰的程序代码。<br>2.能在看源码时更容易理解作者的设计意图，降低阅读源码的难度<br><br>用过哪些设计模式：<br>1.模板方法，固定程序运行流程，暴露自定义的钩子函数供子类去做个性化实现<br>2.策略模式，减少if else 的冗长判断，在需要添加新的判断逻辑时通过添加策略类即可<br>3.单例模式，这个应该基本每个开发人员都用过吧<br>","like_count":0},{"had_liked":false,"id":213283,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588361615,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1588361615","product_id":100039001,"comment_content":"用过建造者模式，观察者模式，其他没用过。","like_count":0},{"had_liked":false,"id":213282,"user_name":"JKwar","can_delete":false,"product_type":"c1","uid":1047466,"ip_address":"","ucode":"B733CA24D5701F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/aa/01fedf6c.jpg","comment_is_top":false,"comment_ctime":1588361472,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1588361472","product_id":100039001,"comment_content":"学过工厂模式，单例模式，代理模式等模式，然而一用就不记得了，感觉脑袋空空，不知从何下手。","like_count":0},{"had_liked":false,"id":213151,"user_name":"妙子爸","can_delete":false,"product_type":"c1","uid":1433842,"ip_address":"","ucode":"988C1A7B9548F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/hsxzhpId4k4uGK5CG534oLEIibqluVwOqgGqxFibILZDSia38gYOHflJDE1zfDVRGRIRq8sxdrAzWnvDP0eVDRMyQ/132","comment_is_top":false,"comment_ctime":1588316183,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588316183","product_id":100039001,"comment_content":"组合模式：基金各种参数最大回撤、夏普等的计算提供给不同页面展示。<br>责任链模式：开市前各种初始化，收市后的各种状态变更的顺序执行。<br>策略模式：替换复杂的if else场景。","like_count":0},{"had_liked":false,"id":212789,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1588211366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588211366","product_id":100039001,"comment_content":"今天重温了第一节，为什么要学习设计模式？我的收获有：<br><br>我们都知道数据结构与算法的重要性，它解决的问题是：写出高效的代码，时间复杂度低，空间复杂度低。我们也花了很多时间在练习，比如去LeetCode上面刷题。<br><br>那么设计模式用来干嘛的呢？它解决的什么问题？设计模式指导我们写出高质量的代码。高质量的代码表现在代码具有可扩展性、可维护性、可读性、可测试性。对于设计模式的学习似乎没有什么地方可以让我们像刷题那样去练习，那咋办呢？有他人指导，跟着高手去学习，看着代码从垃圾变成优秀的过程，自己也就会慢慢领会。<br><br>设计模式给程序员带来的直接好处是：<br><br>通过面试；<br>写出好代码，不要满篇都是if-else，有很多重复的代码，别人也无法读懂，看也看不明白、改又不敢改；<br>学框架、读源码，优秀的框架必然采用设计模式，没有这些知识，是很难读懂的，无法get到其中精髓；<br>带团队，作为leader当然得review code，招募新人。<br>说来惭愧，自己在工程中还没有应用过设计模式。了解到的有<br><br>在Spring中Bean的生命周期有单例、原型，此处应用了单例模式和原型模式。<br>在AOP中会用到动态代理模式。<br>在Java的IO包中有装饰器模式。<br>在数据库连接池中会有工程模式。","like_count":0},{"had_liked":false,"id":210442,"user_name":"KID","can_delete":false,"product_type":"c1","uid":1867938,"ip_address":"","ucode":"EE80B7CA7CC2A2","user_header":"https://static001.geekbang.org/account/avatar/00/1c/80/a2/96dcd1fa.jpg","comment_is_top":false,"comment_ctime":1587744947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587744947","product_id":100039001,"comment_content":"ui接收后端消息采用订阅模式，各个ui模块只订阅自己需要的服务端消息。<br>ui拼接采用组件而不是继承，继承很难抽象出共用部分，主要是因为ui设计由美术同学主导；采用组件可以自由组合需要的模块，不用受制于人。","like_count":0},{"had_liked":false,"id":208414,"user_name":"滴水藏海","can_delete":false,"product_type":"c1","uid":1074640,"ip_address":"","ucode":"9C1F9C91189F69","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/d0/c11d4a31.jpg","comment_is_top":false,"comment_ctime":1587353642,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587353642","product_id":100039001,"comment_content":"一些工具sdk的抽离，用的比较多的是单例&#47;工厂和策略<br>业务上主要做优惠券服务，用的模版方法，装饰模式，责任链模式，工厂方法","like_count":0},{"had_liked":false,"id":208281,"user_name":"🌻","can_delete":false,"product_type":"c1","uid":1509651,"ip_address":"","ucode":"9B4D8CA8C09A70","user_header":"https://static001.geekbang.org/account/avatar/00/17/09/13/d762ce74.jpg","comment_is_top":false,"comment_ctime":1587314119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587314119","product_id":100039001,"comment_content":"1. 聊一聊你对设计模式相关知识的重要性的看法；<br>新入职工作，拿到同事给的代码，看到一个读入excel表格功能，重复从16列读入数据，写了重复的16个if else，我就明白这一定不是好代码。更加坚定了我要学习设计模式<br><br><br>2. 在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>开始学习课程，并把课程中的内容应用到实践上","like_count":0},{"had_liked":false,"id":207006,"user_name":"₯㎕","can_delete":false,"product_type":"c1","uid":1080182,"ip_address":"","ucode":"6E06492D0FBA54","user_header":"https://static001.geekbang.org/account/avatar/00/10/7b/76/69aada7c.jpg","comment_is_top":false,"comment_ctime":1586993174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586993174","product_id":100039001,"comment_content":"设计模式的重要性<br>1.提高自己的业务分析，设计，编码能力，写出优秀的高质量代码<br>2.阅读源码，框架能够快速理解底层架构，吸收设计的精髓<br>3.提高程序的可扩展性，可读性，易用性，真正做到高内聚低耦合，<br>4.面试重点，升职加薪必备<br><br>在过往的项目中用过哪些设计模式<br>1.策略模式<br>多系统接口的统一封装适配<br>2.责任链模式<br>订单下单后使用责任链模式处理优惠券，积分等逻辑","like_count":0},{"had_liked":false,"id":203736,"user_name":"冯佳兴","can_delete":false,"product_type":"c1","uid":1717342,"ip_address":"","ucode":"41D308E99EF9FF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/34/5e/089ac156.jpg","comment_is_top":false,"comment_ctime":1586260918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586260918","product_id":100039001,"comment_content":"机房收费系统中用过单例模式，解决了窗口重复弹出的问题，即对象只能实例化一次，收费的时候用了策略模式，其次就是职责链模式，用在审批的场景。外观模式的话，在七层的外观层用了一下。","like_count":0},{"had_liked":false,"id":203141,"user_name":"MrVito","can_delete":false,"product_type":"c1","uid":1252169,"ip_address":"","ucode":"716FF6F8871706","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/49/ddefc656.jpg","comment_is_top":false,"comment_ctime":1586143623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586143623","product_id":100039001,"comment_content":"写过简单的工厂模式demo，写过单例模式demo，实战项目真的少见少见！","like_count":0},{"had_liked":false,"id":202362,"user_name":"👅","can_delete":false,"product_type":"c1","uid":1335335,"ip_address":"","ucode":"3A3198E899DC6A","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/27/fcc46413.jpg","comment_is_top":false,"comment_ctime":1585975822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585975822","product_id":100039001,"comment_content":"1.提高自己编码能力，有自信跟别人说我可以写<br>2.面试时会用<br>3.写出的代码易维护，易交接<br>4.可以教别人装逼😂<br><br>没有刻意使用过设计模式，还是太菜了，加油学习","like_count":0},{"had_liked":false,"id":202222,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1585925771,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1585925771","product_id":100039001,"comment_content":"打个鸡血！出发！","like_count":0},{"had_liked":false,"id":201423,"user_name":"AlfredLover","can_delete":false,"product_type":"c1","uid":1042354,"ip_address":"","ucode":"A3A998F362CC37","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/b2/334bc992.jpg","comment_is_top":false,"comment_ctime":1585786978,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585786978","product_id":100039001,"comment_content":"设计模式让你写出简洁高效的代码，但可读性未必好。业务代码主要是让其它人能快速理解业务，要慎用设计模式。","like_count":0},{"had_liked":false,"id":200326,"user_name":"技术骨干","can_delete":false,"product_type":"c1","uid":1098720,"ip_address":"","ucode":"8FCF8DE6D29201","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/e0/3db22579.jpg","comment_is_top":false,"comment_ctime":1585572893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585572893","product_id":100039001,"comment_content":"1.设计模式是架构师的基本能力，学习设计模式就像你英文中的短语，你学的多了，就能写出优美的句子，同理也能写出优美的代码，今天第一天订。<br><br>2.预计这么课学完到年底了，今年要有个突破，不然机会来了也把我不住，老师讲的问题，在我身上都出现了，天天写crud快废了。","like_count":0},{"had_liked":false,"id":199942,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1585503133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585503133","product_id":100039001,"comment_content":"设计模式就像唐诗三百首，熟读后不会作诗也会吟","like_count":0},{"had_liked":false,"id":199941,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1585503007,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585503007","product_id":100039001,"comment_content":"有些知识要早点知道，有些书要早点读","like_count":0},{"had_liked":false,"id":198961,"user_name":"张贺","can_delete":false,"product_type":"c1","uid":1283181,"ip_address":"","ucode":"0254E40FB3EB5F","user_header":"https://static001.geekbang.org/account/avatar/00/13/94/6d/5cd6e8c7.jpg","comment_is_top":false,"comment_ctime":1585474457,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585474457","product_id":100039001,"comment_content":"从0开始学设计模式","like_count":0},{"had_liked":false,"id":198520,"user_name":"与路同飞","can_delete":false,"product_type":"c1","uid":1138821,"ip_address":"","ucode":"2985F1440A1962","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/85/f72f1d94.jpg","comment_is_top":false,"comment_ctime":1585455030,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585455030","product_id":100039001,"comment_content":"1.聊一聊你对设计模式相关知识的重要性的看法<br>    答：学好设计模式是自己晋升大牛的必要阶段，各种开源框架源码中到处透漏着设计模式，如果不掌握这项基础能力，会导致看开源源码会晕晕乎乎的。<br>2.在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>   答：有用过，但是不多。模版方法模式，医生排班系统，四种不同班次对于的详细规则不同，但是整体的处理逻辑相同，抽出一个模版类，实现整体处理过程，具体的实现留出四个抽象方法，让四个子类去分别实现","like_count":0},{"had_liked":false,"id":198430,"user_name":"乐朦","can_delete":false,"product_type":"c1","uid":1938739,"ip_address":"","ucode":"C5A666DB0521E0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/95/33/7d4b08ec.jpg","comment_is_top":false,"comment_ctime":1585450885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585450885","product_id":100039001,"comment_content":"曾经有一个面试摆在我面前，因为设计模式，直接凉凉了。一直想把设计模式学好学透，也看了一些书籍，但是应用上还是比较吃力。期待通过设计模式之美，拿下设计模式。","like_count":0},{"had_liked":false,"id":198052,"user_name":"天草二十六","can_delete":false,"product_type":"c1","uid":1360712,"ip_address":"","ucode":"3165EE3007527B","user_header":"https://static001.geekbang.org/account/avatar/00/14/c3/48/3a739da6.jpg","comment_is_top":false,"comment_ctime":1585407909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585407909","product_id":100039001,"comment_content":"评论都可以学到很多，多看看","like_count":0},{"had_liked":false,"id":197992,"user_name":"赵毅","can_delete":false,"product_type":"c1","uid":1905585,"ip_address":"","ucode":"28F6820F1987F6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIgDicRj9LAvWVyuibTbRnZDFeC6uWI8zfWU1gLM6yPoNklUaiar4TKxEyRHFibjIth3iahRNLcNvewjug/132","comment_is_top":false,"comment_ctime":1585406102,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585406102","product_id":100039001,"comment_content":"看重两点：<br>1、告别只是实现可以的功能就好，写出高质量的代码，写出优美的代码<br>2、快速看懂高级的开源项目，学习老司机的实现、可以提出自己的共鸣或者意见<br><br>基于以上两点，设计模式就是干这个的，常用单例、观察者、工厂","like_count":0},{"had_liked":false,"id":197645,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585389504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585389504","product_id":100039001,"comment_content":"学过好几遍设计模式，我对思想这玩意是执着追求的，拓宽我的思维和角度","like_count":0},{"had_liked":false,"id":197472,"user_name":"这得从我捡到一个鼠标垫开始说起","can_delete":false,"product_type":"c1","uid":1272321,"ip_address":"","ucode":"2FF4347B4E7A9B","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/01/d9cb531d.jpg","comment_is_top":false,"comment_ctime":1585380702,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585380702","product_id":100039001,"comment_content":"如果代码不是面向接口的，在修改的时候经常牵一发而动全身。<br>","like_count":0},{"had_liked":false,"id":196351,"user_name":"黄马","can_delete":false,"product_type":"c1","uid":1019506,"ip_address":"","ucode":"93E391B4678EC2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/72/63c94eee.jpg","comment_is_top":false,"comment_ctime":1585274839,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1585274839","product_id":100039001,"comment_content":"聊一聊你对设计模式相关知识的重要性的看法；<br><br>设计模式的定义<br>设计模式(英语 design pattern)是对面向对象设计中反复出现的问题的解决方案<br>设计模式通常描述了一组相互紧密作用的类与对象。<br>设计模式提供一种讨论软件设计的公共语言，使得熟练设计者的设计经验可以被初学者和其他设计者掌握。<br>设计模式还为软件重构提供了目标<br><br>前人总结的关于软件设计中问题解决的方案。相当于是解决问题的套路，而且已经将问题分类了。<br>是基本功，基本功就是入门的最基本要求，基本功最熬人，需要时间<br><br><br>在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br><br>平时很少用到设计模式<br><br>也就是在几番需求变化之后，可能能发现某些规律，对需求有一些判断，所以就可以使用一些设计模式，减少代码大面积的修改，也就是增加代码的扩展性。例如只需要增加一个接口的实现，例如策略模式等等","like_count":0},{"had_liked":false,"id":196023,"user_name":"凡","can_delete":false,"product_type":"c1","uid":1041878,"ip_address":"","ucode":"BCF83BE1D434D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/d6/37a1be71.jpg","comment_is_top":false,"comment_ctime":1585231197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585231197","product_id":100039001,"comment_content":"设计模式和算法一样！其实就是一种套路！对于某些特定问题的固有解决思路！不知道这么理解对不对","like_count":0},{"had_liked":false,"id":195678,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1585211427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585211427","product_id":100039001,"comment_content":"“投资要趁早，这样我们才能尽早享受复利。同样，有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读。这样在你后面的生活、工作、学习中，才能一直都发挥作用。不要等到好多年后，看到了，才恍然大悟，后悔没有早点去学、去看。” <br>后悔呀没有早点看到这段！！！！！！！！！","like_count":0},{"had_liked":false,"id":195468,"user_name":"余结","can_delete":false,"product_type":"c1","uid":1272016,"ip_address":"","ucode":"6F852213FC8E8A","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/d0/cc05745c.jpg","comment_is_top":false,"comment_ctime":1585189896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585189896","product_id":100039001,"comment_content":"设计模式只闻其名，并没有真正使用过，希望通过本次课堂能够学以致用。","like_count":0},{"had_liked":false,"id":195450,"user_name":"Six","can_delete":false,"product_type":"c1","uid":1220617,"ip_address":"","ucode":"E297BB638B2BD9","user_header":"https://static001.geekbang.org/account/avatar/00/12/a0/09/4af6ff52.jpg","comment_is_top":false,"comment_ctime":1585188918,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585188918","product_id":100039001,"comment_content":"首先说明下我是做Android开发的<br>1.正如作者所说，设计模式是写出高质量代码的关键，当然重要了。<br>2.责任链设计模式<br>         应用场景:首页有各个业务，而各个业务区分不同类型，对于各个业务点击跳转需要根据类型跳转到不同的目标页面。（脑补支付宝，美团首页等等）。而这里不仅仅是单独的跳转，需要考虑目标页面是h5页面，跳转到目标页面的传值都不一样。而且点击业务时需要埋点和根据账号权限不同有所拦截。<br>         简单处理：当然这里最简单的是switch case。根据业务类型来写，但每个case一大堆处理。缺点是类臃肿,不清晰都在一个类中，而且没有分层的概念。不好维护。新增一个点击业务到跳转时的处理规则时改动太多。最坏是每个case下都处理(而我们有50+的case)<br>         优化：使用责任链设计模式对该情况进行分层，层与层之间通过一个中间集合关联(这个集合就是链(这里的链可以理解为层)的集合用于下发到下一条链的)。这样层与层之前很清晰，比如预处理层(拦截不符合要求的点击),打点层，处理默认参数层，跳转层。之后如果想要再加一个处理逻辑，可以扩展一个层。       ","like_count":0},{"had_liked":false,"id":195447,"user_name":"🐒🐱🐭🐮🐯🐰🐶","can_delete":false,"product_type":"c1","uid":1189080,"ip_address":"","ucode":"52426AE36A9A39","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d8/aa41d743.jpg","comment_is_top":false,"comment_ctime":1585188700,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585188700","product_id":100039001,"comment_content":"1，对各整个架构架构，减少代码的重复率<br>2，面向对象，为了处理田地种菜，每个田地都是一个对象","like_count":0},{"had_liked":false,"id":192221,"user_name":"webs507wh","can_delete":false,"product_type":"c1","uid":1625555,"ip_address":"","ucode":"F93B8906D164F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/JF5ZUbI5KMFsTASqrVTUhpxyrOqGtBR4iaobxaASEjyZ7rPic50kzqQvNhFOw04MkyzUN0sc3pu7QsJwD57moibtw/132","comment_is_top":false,"comment_ctime":1584843537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584843537","product_id":100039001,"comment_content":"不错，学习中","like_count":0},{"had_liked":false,"id":191762,"user_name":"快乐一家","can_delete":false,"product_type":"c1","uid":1608101,"ip_address":"","ucode":"37156DF2DC27E3","user_header":"https://static001.geekbang.org/account/avatar/00/18/89/a5/f89a1946.jpg","comment_is_top":false,"comment_ctime":1584794996,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584794996","product_id":100039001,"comment_content":"我是做Python的web开发的，所有工作都是自己独立完成，早点学设计模式，早点少给自己挖坑","like_count":0},{"had_liked":false,"id":191267,"user_name":"Amo,","can_delete":false,"product_type":"c1","uid":1675087,"ip_address":"","ucode":"B77CBE5C61CDEB","user_header":"https://static001.geekbang.org/account/avatar/00/19/8f/4f/d42fdb9c.jpg","comment_is_top":false,"comment_ctime":1584759939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584759939","product_id":100039001,"comment_content":"曾经出来面试也有被问到过设计模式，可是自身对设计模式了解太少了，希望下次回答能让人刮目相看","like_count":0},{"had_liked":false,"id":189682,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1584540428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584540428","product_id":100039001,"comment_content":"在读源码的时候，好多核心的代码，用的什么模式两眼一抹黑，只能百度找框架用了什么模式，打算从零开始认真学习，为了自己读源码的时候，能够读的更顺一点","like_count":0},{"had_liked":false,"id":189027,"user_name":"治慧","can_delete":false,"product_type":"c1","uid":1245904,"ip_address":"","ucode":"47C331EF63EDC6","user_header":"https://static001.geekbang.org/account/avatar/00/13/02/d0/8abab63f.jpg","comment_is_top":false,"comment_ctime":1584448284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584448284","product_id":100039001,"comment_content":"作业:工作中用到的最多的还是单例模式(比如spring中DefaultBeanNameGenerator在5.2版本后),策略模式(来解决if else过多的场景),工厂模式(比如spring中的FactoryBean)","like_count":0},{"had_liked":false,"id":188855,"user_name":"晓双","can_delete":false,"product_type":"c1","uid":1476696,"ip_address":"","ucode":"59CA9DB77697D5","user_header":"https://static001.geekbang.org/account/avatar/00/16/88/58/3e19586a.jpg","comment_is_top":false,"comment_ctime":1584426766,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584426766","product_id":100039001,"comment_content":"设计模式确实重要，工作中亲身经历过设计不足的代码，迭代和扩展起来都特别费劲，所以来好好学习下设计模式","like_count":0},{"had_liked":false,"id":188357,"user_name":"言十年","can_delete":false,"product_type":"c1","uid":1110039,"ip_address":"","ucode":"67B8B49C3A3B17","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/17/796a3d20.jpg","comment_is_top":false,"comment_ctime":1584344236,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584344236","product_id":100039001,"comment_content":"写php ：用过 单例 ，工厂<br>写oc：观察者模式、代理模式","like_count":0},{"had_liked":false,"id":187925,"user_name":"wakaka","can_delete":false,"product_type":"c1","uid":1471508,"ip_address":"","ucode":"835A7341577D3B","user_header":"https://static001.geekbang.org/account/avatar/00/16/74/14/ea854bfc.jpg","comment_is_top":false,"comment_ctime":1584278859,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584278859","product_id":100039001,"comment_content":"为了提高读源码的效率，先练好基本功。","like_count":0},{"had_liked":false,"id":187514,"user_name":"Geek_339bf3","can_delete":false,"product_type":"c1","uid":1901438,"ip_address":"","ucode":"6DD84D487A4BDB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrj3mbL4JWp4ssyiaUW5T5avPXI899ibF2icKhC74OoqDSusz0GUmwQJm1sUmiaGclBtFSpmJXiaztYBg/132","comment_is_top":false,"comment_ctime":1584150625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584150625","product_id":100039001,"comment_content":"设计模式重要性的理解：<br>好的设计事半功倍。设计出可扩展、可维护、易于理解的代码比只实现功能带来的维护成本低很多。代码的质量和维护效率的提升，一方面能够提升程序员的成就感，另一方面也能为团队带来好的收益。","like_count":0},{"had_liked":false,"id":185329,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1583562385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583562385","product_id":100039001,"comment_content":"专栏里面提到的学习设计模式的用处<br><br>1.现在很多公司尤其是大公司面试的时候都会有设计模式的面试题,如果不懂的话,基本上是没有戏.所以我们第一可以用在面试上,<br>2.懂得设计模式可以让我们在工作中写出扩展,可以维护的代码,而不是别人吐槽的烂代码<br>3.提高复杂代码的设计和开发能力.简单的代码其实大家写的都差不多,但是涉及到复杂代码,如果不懂设计模式,基本上无从下手.<br>4.更容易看懂源码.优秀的项目,框架等里面的结构都很复杂,用到了很多设计思想,如果不懂,硬要去读,只能是事倍功半<br>5.为以后发展做铺垫,如果只是懂得用框架,但是不懂如算法,设计模式等基本知识,那基本上不可能在技术上有很好的发展.<br><br>我个人比较看重的是第二和第四个好处<br>","like_count":0},{"had_liked":false,"id":184638,"user_name":"Presley","can_delete":false,"product_type":"c1","uid":1215219,"ip_address":"","ucode":"D8F125835F4903","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/f3/7c89d00e.jpg","comment_is_top":false,"comment_ctime":1583376001,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583376001","product_id":100039001,"comment_content":"之前没有刻意学习过，有时候都不知道自己竟然用了设计模式","like_count":0},{"had_liked":false,"id":183403,"user_name":"新的起点，新的开始^_^","can_delete":false,"product_type":"c1","uid":1262068,"ip_address":"","ucode":"9C0810F472AC93","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/f4/5df17eff.jpg","comment_is_top":false,"comment_ctime":1583034112,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583034112","product_id":100039001,"comment_content":"先谈下我对设计模式重要性的理解吧，由浅而深可以分为：<br>1.应对面试<br>2.提高阅读优秀代码的源码，我就有这方面的问题，在看某个框架或者中间件或者别人的代码的时候，就是看不懂，看不下去的问题<br>3.可以提高我们写的代码的质量，不是因为看完争哥的文章就能提高我们的代码质量，而是看完文章后，我们在以后再工作的时候，都会想到代码质量，业务相匹配的数据结构和设计模式这个思想，先有了这个思想之后，日积月累形成习惯，潜移默化的我们的代码质量一定会有所提高的。<br>至于我在工作中都用到哪些设计模式了，这个肯定是用到了，但是因为我的设计模式方面的基础实在是太浅薄了，说不上来，所以才要学习争哥的文章，都不好意思说本人已经工作四五年了，希望而立之年开始新的努力计划还不算太晚。<br>诸君，共同努力","like_count":0},{"had_liked":false,"id":181844,"user_name":"发飙的蜗牛","can_delete":false,"product_type":"c1","uid":1800868,"ip_address":"","ucode":"B2D96A2D0B6BA4","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7a/a4/79ffe77c.jpg","comment_is_top":false,"comment_ctime":1582643148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582643148","product_id":100039001,"comment_content":"加油＾０＾","like_count":0},{"had_liked":false,"id":181244,"user_name":"Geek_4eeff6","can_delete":false,"product_type":"c1","uid":1681947,"ip_address":"","ucode":"C1B40B950F9D17","user_header":"https://static001.geekbang.org/account/avatar/00/19/aa/1b/9303452a.jpg","comment_is_top":false,"comment_ctime":1582526308,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582526308","product_id":100039001,"comment_content":"1、对于设计模式，刚毕业那会没咋重视，现在越来越感觉到他的重要性，代码出了问题，排查的时候，进入源码里，都看不懂，还有碰到稍微复杂的业务，哎  就云里雾里了。设计模式真的很重要。<br>2、实际中用到过 单例模式，模板方法（项目中有好多的预警相关的业务，可以抽出一个模板，然后每个预警具体实现），还有工厂方法（碰到那种大段大段的if-else的时候，用工厂结合策略去解决）。","like_count":0},{"had_liked":false,"id":180864,"user_name":"空白昵称","can_delete":false,"product_type":"c1","uid":1433815,"ip_address":"","ucode":"91F50CA25102AB","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d7/744bd8c3.jpg","comment_is_top":false,"comment_ctime":1582431472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582431472","product_id":100039001,"comment_content":"自己写的代码被别人吐槽了无数次，可却依然不知为什么。可见学习设计模式是多么重要了。看了专栏罗列出那么多好处，恨不得关到小黑屋学了😂","like_count":0},{"had_liked":false,"id":180211,"user_name":"Vicent🍀","can_delete":false,"product_type":"c1","uid":1589894,"ip_address":"","ucode":"70AEA72A0B6F0E","user_header":"https://static001.geekbang.org/account/avatar/00/18/42/86/6b2e81ba.jpg","comment_is_top":false,"comment_ctime":1582209313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582209313","product_id":100039001,"comment_content":"1. 我觉得重要性也提现在对项目的驾驭能力上，如果涉及模式模式比较熟练，从整体到细节都可以采用统一的方法论来实现，我遇到过有时候看似“讨巧”的开发，会给后面维护带来不少麻烦，特别适用hard code编码。<br>2.最近重构代码多一些，策略模式会比较常使用，因为有些时候存在兜底方法，需要切回老的方法，设置策略模式，配合动态化配置，可以进行一些运行逻辑的切换。","like_count":0},{"had_liked":false,"id":179825,"user_name":"佐西玛","can_delete":false,"product_type":"c1","uid":1090743,"ip_address":"","ucode":"73AAED82340E2B","user_header":"https://static001.geekbang.org/account/avatar/00/10/a4/b7/e0d88365.jpg","comment_is_top":false,"comment_ctime":1582105374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582105374","product_id":100039001,"comment_content":"以下是我个人的看法：<br>1、如其回答设计模式的重要性，我更想先回答为什么要在工程实践中使用设计模式，因为我们写的代码基本都不是一次交付的，如果需求发生了变化，那么我们希望在实现新需求的基础上尽可能的少修改、添加代码，尽可能的不影响别的功能，因为这样才能简化开发、方便测试，提升产品迭代效率。所以代码的可维护性和可扩展性由此变得重要了，设计模式也因此变得那么有必要。设计模式是众多前辈在相当长时间的经验和错误中总结出来的最佳实践，站在巨人的肩膀上看世界，不好吗？<br>2、我的工作也是游戏开发，公司的项目中用享元模式存储媒体美术资源，用观察者模式记录玩家的金币使用，用策略模式控制不同商品的上架以及不同商店的刷新。","like_count":0},{"had_liked":false,"id":179169,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1581930686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581930686","product_id":100039001,"comment_content":"本章的课后问题:<br>1.设计模式的重要性<br>设计模式是很重要的,在我自学成为程序员之前,我就开始去学习算法相关的知识,在成为程序员之后,我愈发的明白,基础是一个程序员能够走多远的基石,有了良好的基础,才能越学越轻松,于是我开始走上了一条底层学习的不归路,也是开始接触了设计模式,通信协议这些开发中并不常见的知识<br><br>2.使用过什么设计模式<br>我曾经在做一个设备的在线状态的功能时候,对于设备的上报信息,使用无锁的设计模式,利用这个减少了和数据库的交互,做到了项目内部维护在线状态,并且利用了观察者设计模式,即时的推送数据到页面","like_count":0},{"had_liked":false,"id":178092,"user_name":"junmawang","can_delete":false,"product_type":"c1","uid":1763466,"ip_address":"","ucode":"977E9E25CE6C94","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/8a/803a42e0.jpg","comment_is_top":false,"comment_ctime":1581585527,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581585527","product_id":100039001,"comment_content":"将设计模式运用在项目中，告别写被人吐槽的烂代码；提高复杂代码的设计和开发能力<br>项目中设计模式比如附件上传，运用到了工厂设计模式，主要逻辑如下<br>1、抽出上传工厂类<br>2、附件上传时根据DB中的上传配置进行工厂选择<br>3、完成附件上传","like_count":0},{"had_liked":false,"id":177921,"user_name":"coco張","can_delete":false,"product_type":"c1","uid":1522583,"ip_address":"","ucode":"48712CAC9FE4EC","user_header":"https://static001.geekbang.org/account/avatar/00/17/3b/97/ce00cd8d.jpg","comment_is_top":false,"comment_ctime":1581531234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581531234","product_id":100039001,"comment_content":"拥有优秀的设计模式的代码总是让人欣喜，在工作中总是会去模仿。自己的基础不扎实，有的代码真的看不懂，思维定式的感觉。在某次coding dojo中，partner解题的第一步骤就是想想用什么设计模式，而不是堆砌代码实现功能，当时就被震撼到了。自己很少从头实现一个框架，总是在缝缝补补，对于基本功已经忘得差不多了，为了让自己更有效率地工作还是得从头再来打基础，刻意练习。<br>就像科比说的和做的一样，高手还是得继续打基础，别人证明可行的方式就去做，没必要造轮子","like_count":0},{"had_liked":false,"id":177854,"user_name":"秀丽","can_delete":false,"product_type":"c1","uid":1402332,"ip_address":"","ucode":"9872272B8056F5","user_header":"https://static001.geekbang.org/account/avatar/00/15/65/dc/0737102d.jpg","comment_is_top":false,"comment_ctime":1581515251,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581515251","product_id":100039001,"comment_content":"本篇专栏感想：<br>绝对是干货，里面的好多点，是自己亲身体会的。<br>一、本人已工作10年多，现在是一门架构师，因为项目紧急，需要写代码，发现自己好久没写的，写的很不顺手，好多东西写了，然后发现需要提取出来，作为公用的，一些变量的命名也是想之又想，团队的成员还安慰我，说架构师早就不用写代码了，但是我自己知道，自己不写代码，就脱离了一线，如何解决线上问题呢。<br>二、因为需要去了解很多的中间件和做调研，有时候发现文档不齐全，不细致，有些东西，只能去看代码了，但是发现平时用的不多的设计模式在这些中间件中，别用的，那叫一个淋漓尽致，这时候真的后悔，自己对设计模式的重视程度了。<br>三、无论到什么情况，设计模式都是面试被常常问到的，只是简单的回答有什么模式，一看就是用的不深入了，哈哈，那时候，心里只有一个囧字了。<br><br>总之希望能跟着作者，将设计模式系统的学习下去，坚持就是胜利。","like_count":0},{"had_liked":false,"id":177454,"user_name":"qpzm7903","can_delete":false,"product_type":"c1","uid":1138683,"ip_address":"","ucode":"C7C14962D34BE7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/fb/af061ca7.jpg","comment_is_top":false,"comment_ctime":1581395407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581395407","product_id":100039001,"comment_content":"从0开始！","like_count":0},{"had_liked":false,"id":176148,"user_name":"Geek_bb89c3","can_delete":false,"product_type":"c1","uid":1331828,"ip_address":"","ucode":"0F97B5B0F2DDD6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IZKGetBZDuMEa2VwwtesTELvLORIyV749ItgfAqNPv30n4zEv71wuGNr1aNVIVltG0icvH53DHDuqPuzNpiauWAg/132","comment_is_top":false,"comment_ctime":1580971878,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580971878","product_id":100039001,"comment_content":"学习设计模式对好的代码有更加深入的理解：<br>1.能够在面试过程中，通过理论化的方式向面试官展示自己的代码功力；<br>2.在打代码的时候，通过使用设计模式的各种理论，原则，模式来将需要的功能实现的非常的漂亮，让别人读了觉得有东西。<br>3.在codereview 和管理团伙的时候，这个时候可以对别人和团队的代码提出要求和规范，其中哦部分就来自于设计模式。<br>4.在招聘新的人员加入团队的时候，这个时候如何衡量候选人能够打出好代码，其中一部分判断标准就是对设计模式的理解。<br>","like_count":0},{"had_liked":false,"id":175836,"user_name":"Andy_Ron","can_delete":false,"product_type":"c1","uid":1147385,"ip_address":"","ucode":"A6963B60B326AA","user_header":"https://static001.geekbang.org/account/avatar/00/11/81/f9/3508b638.jpg","comment_is_top":false,"comment_ctime":1580867364,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580867364","product_id":100039001,"comment_content":"来的有点晚了，要加点劲赶上专栏进度了！😀<br>前面留言的小伙伴，例子好精彩哦！","like_count":0},{"had_liked":false,"id":175686,"user_name":"张理查","can_delete":false,"product_type":"c1","uid":1003152,"ip_address":"","ucode":"1F93E631CD4B35","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/90/a8d19e7b.jpg","comment_is_top":false,"comment_ctime":1580799449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580799449","product_id":100039001,"comment_content":"01.这篇展开来说了到底为什么要学？首先是提升输出，代码就是你的名片，烂代码可不要成为你的标签；遇到写复杂代码的情况下不会手足无措，做到剑在心中。其次是提高输入效率，比如牛人的代码为啥读不懂，因为牛人的语言你不懂，牛人说话的方式你不掌握，自己读不懂，做了团队leader后你就是团队技术的天花板，那还做啥leader，能服众么？","like_count":0},{"had_liked":false,"id":173541,"user_name":"艾米","can_delete":false,"product_type":"c1","uid":1639425,"ip_address":"","ucode":"4295EBC4C86915","user_header":"https://static001.geekbang.org/account/avatar/00/19/04/01/37744410.jpg","comment_is_top":false,"comment_ctime":1579592080,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579592080","product_id":100039001,"comment_content":"设计模式很重要，一直都知道，但对于设计模式，从没有系统的学习过，每次都是心血来潮看看，然后也没有应用。“普通的、低级别的开发工程师，只需要把框架、开发工具、编程语言用熟练，再做几个项目练练手，基本上就能应付平时的开发工作了。”说的太对了，这也是大部分人的现状。不破不立，希望这8个月的学习能把设计模式消化好。","like_count":0},{"had_liked":false,"id":173296,"user_name":"coderguai","can_delete":false,"product_type":"c1","uid":1266201,"ip_address":"","ucode":"1C99617F98EC12","user_header":"https://static001.geekbang.org/account/avatar/00/13/52/19/8b0d3854.jpg","comment_is_top":false,"comment_ctime":1579497966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579497966","product_id":100039001,"comment_content":"1.设计模式是程序员修炼的心法，是突破自己的秘籍；<br>","like_count":0},{"had_liked":false,"id":172906,"user_name":"linker","can_delete":false,"product_type":"c1","uid":1803259,"ip_address":"","ucode":"6C5799F2FC2C82","user_header":"https://static001.geekbang.org/account/avatar/00/1b/83/fb/621adceb.jpg","comment_is_top":false,"comment_ctime":1579356042,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579356042","product_id":100039001,"comment_content":"鄙人写代码不多，主要是针对开源代码进行问题定位和打补丁。<br>从我的经验来看设计模式和数据结构算法还是很重要的，多少次看了linux内核代码觉得看懂了，但是经高手一指点才发现已经懂得是皮毛。经过一段时间后发现开源代码里面就是有很多的模式跟数据结构看不懂啊！","like_count":0},{"had_liked":false,"id":172274,"user_name":"M","can_delete":false,"product_type":"c1","uid":1810576,"ip_address":"","ucode":"06F26E1D62E9C9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","comment_is_top":false,"comment_ctime":1579143579,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579143579","product_id":100039001,"comment_content":"到目前为止，只用过单利","like_count":0},{"had_liked":false,"id":171734,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1579003587,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579003587","product_id":100039001,"comment_content":"感觉我现在就处于一个瓶颈期，理论知识储备的足够充分，实际上手写的代码还是会被人吐槽，迫切想改变这种情况","like_count":0},{"had_liked":false,"id":171611,"user_name":"Deekuun","can_delete":false,"product_type":"c1","uid":1618872,"ip_address":"","ucode":"A65F9A28B6FD6C","user_header":"https://static001.geekbang.org/account/avatar/00/18/b3/b8/218b1217.jpg","comment_is_top":false,"comment_ctime":1578976292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578976292","product_id":100039001,"comment_content":"自己看了一些设计模式，看的时候都明白，但是实际开发中就忘记了，或者想用不晓得如何设计。","like_count":0},{"had_liked":false,"id":171348,"user_name":"好饿早知道送外卖了","can_delete":false,"product_type":"c1","uid":1132304,"ip_address":"","ucode":"AED22DB5BF8FC7","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","comment_is_top":false,"comment_ctime":1578906245,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1578906245","product_id":100039001,"comment_content":"设计模式这个东西，吸收了真的就是自己的。现在看到项目里有一大堆ifelse，都会浑身难受的想重构，比如面向协议编程。","like_count":0},{"had_liked":false,"id":170838,"user_name":"K.","can_delete":false,"product_type":"c1","uid":1128428,"ip_address":"","ucode":"EFA18DA76818A0","user_header":"https://static001.geekbang.org/account/avatar/00/11/37/ec/32f6c98e.jpg","comment_is_top":false,"comment_ctime":1578736846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578736846","product_id":100039001,"comment_content":"当你知道好的代码长什么样子时，当你自己也开始注重代码质量时，一看到烂代码你也会在心理暗暗骂一句辣鸡= =","like_count":0},{"had_liked":false,"id":170575,"user_name":"HoshinoKanade","can_delete":false,"product_type":"c1","uid":1770245,"ip_address":"","ucode":"AA8B4F90FB9E5F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/03/05/140068f9.jpg","comment_is_top":false,"comment_ctime":1578637346,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578637346","product_id":100039001,"comment_content":"雖然自以為已經到達了不用回答問題2的境界<br>設計模式從來不需要高調不需要華麗<br>更加不需要去冠名<br>不過誠然老師所說 需要在面試前刻意複習<br>加上思維遠不及老師廣 還是滾進來再學一遍<br><br>設計模式有關的書 我看了三四遍<br>每一次看的體會也不同 謝謝老師","like_count":0},{"had_liked":false,"id":170499,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1578622060,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578622060","product_id":100039001,"comment_content":"尽早的掌握设计模式，能够在头脑中形成一套评价体系：不仅能够规范自己，还能评价别人。不仅能够工作中应用，还是面试中加分。","like_count":0},{"had_liked":false,"id":170491,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1578621182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578621182","product_id":100039001,"comment_content":"读不懂别人的代码，有两种情况：<br>1.代码真烂，这种情况希望该程序员学习提高<br>2.代码真高端，这种情况我们应该学习提高自己","like_count":0},{"had_liked":false,"id":169602,"user_name":"LF","can_delete":false,"product_type":"c1","uid":1434867,"ip_address":"","ucode":"ECED172D2273D3","user_header":"https://static001.geekbang.org/account/avatar/00/15/e4/f3/60a7b345.jpg","comment_is_top":false,"comment_ctime":1578386737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578386737","product_id":100039001,"comment_content":"单例模式：懒汉式（线程不安全）饿汉式（线程安全，耗内存）枚举式（线程安全）","like_count":0},{"had_liked":false,"id":169403,"user_name":"意","can_delete":false,"product_type":"c1","uid":1129311,"ip_address":"","ucode":"A4B0C03248EA77","user_header":"https://static001.geekbang.org/account/avatar/00/11/3b/5f/a2c78423.jpg","comment_is_top":false,"comment_ctime":1578327029,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578327029","product_id":100039001,"comment_content":"依赖倒置","like_count":0},{"had_liked":false,"id":169283,"user_name":"pippin","can_delete":false,"product_type":"c1","uid":1784022,"ip_address":"","ucode":"F7619FCE24D481","user_header":"","comment_is_top":false,"comment_ctime":1578305355,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578305355","product_id":100039001,"comment_content":"网上的视频和书籍都有说设计模式是什么，但怎么用、为什么要用，这样用有什么好处，又有什么不足，造成在面对代码的时候，想不到使用设计模式","like_count":0},{"had_liked":false,"id":169064,"user_name":"半橙汁","can_delete":false,"product_type":"c1","uid":1477902,"ip_address":"","ucode":"BB93BB9CCB7FA2","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/0e/5e97bbef.jpg","comment_is_top":false,"comment_ctime":1578270216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578270216","product_id":100039001,"comment_content":"听过的不少，估计用的也不少，不过，可气的是居然没办法对关联关系说出个12345","like_count":0},{"had_liked":false,"id":168958,"user_name":"wx","can_delete":false,"product_type":"c1","uid":1254784,"ip_address":"","ucode":"DD0B86A2059150","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/80/26b85375.jpg","comment_is_top":false,"comment_ctime":1578225671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578225671","product_id":100039001,"comment_content":"重要性：面试顺利通过；可以提高设计开发能力，使代码易于扩张；对读源码、学框架可以事半功倍。指导同事。<br><br>之前使用过两种设计模式。<br>单例模式，场景：和当时把zookeeper当作动态配置源来使用，每个服务实例只需要和zk建立一个连接即可。避免和zk建立多个连接的情况。<br><br>模板模式，场景：消息队列的消费端和生产端，将初始化生产消费端代码封装在模板中，业务只需关心消费到的数据即可，不用关心怎么消费的。","like_count":0},{"had_liked":false,"id":168568,"user_name":"信天游","can_delete":false,"product_type":"c1","uid":1046101,"ip_address":"","ucode":"4B46403E169499","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f6/55/1065fce8.jpg","comment_is_top":false,"comment_ctime":1578111990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578111990","product_id":100039001,"comment_content":"参加工作的第二年，刚开始的工作就如同老师所说的在框架里根据业务需求填充代码，都是维护类的项目，逻辑功能简单，这期间也并没有用到设计模式。直到最近的一个季度，接到了新的需求新的功能，里面的业务逻辑稍复杂，一开始写的代码没有用设计模式，被leader吐槽为堆砌的烂代码，首先是自己没有意识，其次是自己对设计模式的掌握并不完全，直到后来leader review了代码，提出了优化意见后，自己去研究了责任链，并尝试写了一个demo后再应用到项目上。在优化代码的时候自己也在思考，使用了设计模式的好处。的确，模块的划分更加清晰，功能的扩展也更加方便了。","like_count":0},{"had_liked":false,"id":167772,"user_name":"闲庭花落","can_delete":false,"product_type":"c1","uid":1193289,"ip_address":"","ucode":"CE69DB92D5F424","user_header":"https://static001.geekbang.org/account/avatar/00/12/35/49/484c0eba.jpg","comment_is_top":false,"comment_ctime":1577932052,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577932052","product_id":100039001,"comment_content":"老师的第一篇下来，真的是直击内心，引起共鸣啊","like_count":0},{"had_liked":false,"id":167430,"user_name":"吴小浅","can_delete":false,"product_type":"c1","uid":1186819,"ip_address":"","ucode":"36D1743C0A9C40","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/03/9178abe4.jpg","comment_is_top":false,"comment_ctime":1577792795,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577792795","product_id":100039001,"comment_content":"1、开发出低耦合、高内聚的模块，能够更好的应对日后的需求扩展和开发工作，简单说就是一次编码，以后的工作变轻松；<br>2、根据策略模式实现支付的动态扩展；","like_count":0},{"had_liked":false,"id":166935,"user_name":"追逐繁星的孩纸~","can_delete":false,"product_type":"c1","uid":1593884,"ip_address":"","ucode":"69DC37A9E39C7E","user_header":"https://static001.geekbang.org/account/avatar/00/18/52/1c/e902de0f.jpg","comment_is_top":false,"comment_ctime":1577633567,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1577633567","product_id":100039001,"comment_content":"1.聊一聊你对设计模式相关知识的重要性的看法；<br>特别重要，可以让编码思路更清晰。<br>2.在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>用过建造者模式，是在构建搜索请求条件的场景下应用的，因为构建搜索请求有些搜索条件，过滤条件，高亮配置等，使用建造者模式根据不同人的请求进行构造","like_count":0},{"had_liked":false,"id":166392,"user_name":"此鱼不得水","can_delete":false,"product_type":"c1","uid":1257453,"ip_address":"","ucode":"95268E823FB4D2","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ed/a87bb8fa.jpg","comment_is_top":false,"comment_ctime":1577440799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577440799","product_id":100039001,"comment_content":"句句扎心!","like_count":0},{"had_liked":false,"id":165849,"user_name":"原点","can_delete":false,"product_type":"c1","uid":1204499,"ip_address":"","ucode":"E662FD2B62B8A9","user_header":"https://static001.geekbang.org/account/avatar/00/12/61/13/dd987817.jpg","comment_is_top":false,"comment_ctime":1577332077,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1577332077","product_id":100039001,"comment_content":"极客出品，必为精品。之前看了几篇老师的算法专栏的文章，竟然每篇的知识点都懂了，问啥自己看书没有这种效果呢？<br>前两天优惠力度大，看到老师的设计模式的课，果断买了。刚结束上一个专栏的学习，就进来了。两篇文章读下来，就决定把老师的两个专栏先学完再学别的😃","like_count":0},{"had_liked":false,"id":165760,"user_name":"HuDP","can_delete":false,"product_type":"c1","uid":1183184,"ip_address":"","ucode":"65E70A9B7CAB54","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/d0/b48302e9.jpg","comment_is_top":false,"comment_ctime":1577319375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577319375","product_id":100039001,"comment_content":"项目复杂后，设计模式的重要性就越来越凸显出来","like_count":0},{"had_liked":false,"id":165220,"user_name":"💪🏻💪🏻💪🏻","can_delete":false,"product_type":"c1","uid":1255450,"ip_address":"","ucode":"C517792745ABD5","user_header":"https://static001.geekbang.org/account/avatar/00/13/28/1a/259c7603.jpg","comment_is_top":false,"comment_ctime":1577182288,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577182288","product_id":100039001,"comment_content":"还是入门阶段，希望能跟着大佬学习","like_count":0},{"had_liked":false,"id":165036,"user_name":"bin.chen","can_delete":false,"product_type":"c1","uid":1135604,"ip_address":"","ucode":"5BA49358AB8A1A","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/f4/e277325d.jpg","comment_is_top":false,"comment_ctime":1577150709,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577150709","product_id":100039001,"comment_content":"1.设计模式在工作中是非常的重要 目前所在公司就看到很多的烂代码，而且每次维护起来都特别费劲，适当的根据需求应用设计模式改观代码质量是非常有必要的<br>2.工作中用的多的就是工厂 装饰 单列 ","like_count":0},{"had_liked":false,"id":164951,"user_name":"桂城老托尼","can_delete":false,"product_type":"c1","uid":1306032,"ip_address":"","ucode":"139E4B8EE88B79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcxSpNMqwqyicMvdOSr9ic0p1ABiauHnv7g7YQVSJuoHPoQbYDu3YzdpgmSAk2KricUBQ5yibWBWIq75w/132","comment_is_top":false,"comment_ctime":1577115708,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577115708","product_id":100039001,"comment_content":"设计模式重要性不言而喻，除了作者提到的几点外，设计模式是技术同学之间沟通的抽象高效的语言，方便我们精炼表达。 <br>工作中也要避免过度设计，为了模式而模式(前期练手可能是好的)，低耦合，高内聚，易扩展是目的，模式是手段。<br>工作中用的较多的有观察者，工厂，策略，模板，适配器等","like_count":0},{"had_liked":false,"id":164636,"user_name":"铁血柔情","can_delete":false,"product_type":"c1","uid":1124220,"ip_address":"","ucode":"F09CACF06B8D05","user_header":"https://static001.geekbang.org/account/avatar/00/11/27/7c/463d4342.jpg","comment_is_top":false,"comment_ctime":1577063612,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577063612","product_id":100039001,"comment_content":"Spring中的单例模式和工厂模式，以及自己练习写的一个观察者模式，打卡第二次","like_count":0},{"had_liked":false,"id":164411,"user_name":"黑色空间","can_delete":false,"product_type":"c1","uid":1793130,"ip_address":"","ucode":"D1C70DC7BFCB05","user_header":"https://static001.geekbang.org/account/avatar/00/1b/5c/6a/33b0c829.jpg","comment_is_top":false,"comment_ctime":1576980903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576980903","product_id":100039001,"comment_content":"用的比较多的 策略，代理和单例","like_count":0},{"had_liked":false,"id":164233,"user_name":"Seeker","can_delete":false,"product_type":"c1","uid":1180644,"ip_address":"","ucode":"C5F22962B8CE0D","user_header":"https://static001.geekbang.org/account/avatar/00/12/03/e4/0cb8dcaf.jpg","comment_is_top":false,"comment_ctime":1576911913,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576911913","product_id":100039001,"comment_content":"项目中使用过单例模式，工厂模式，代理模式，门面模式，命令行模式，模版模式，但都不是我开发的，努力学习中","like_count":0},{"had_liked":false,"id":163819,"user_name":"黄政","can_delete":false,"product_type":"c1","uid":1345630,"ip_address":"","ucode":"9076A1BF7BB051","user_header":"https://static001.geekbang.org/account/avatar/00/14/88/5e/cc916a2b.jpg","comment_is_top":false,"comment_ctime":1576807532,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1576807532","product_id":100039001,"comment_content":"1.设计模式的好坏决定了一个模块的基础框架的优异，好的设计模式，代码优雅，维护简单。<br>2.今年的项目开发中，实现了一个代理模式，针对json文件进行读写，免去了客户端对文件加锁，读写互斥等问题的处理。","like_count":0},{"had_liked":false,"id":163706,"user_name":"Yangjing","can_delete":false,"product_type":"c1","uid":1018061,"ip_address":"","ucode":"D88DFD4958D07C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/cd/2c3808ce.jpg","comment_is_top":false,"comment_ctime":1576770227,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576770227","product_id":100039001,"comment_content":"打卡，烂代码不仅看着累，改着累，改了还会又一堆bug。","like_count":0},{"had_liked":false,"id":163586,"user_name":"Geek_323c91","can_delete":false,"product_type":"c1","uid":1732683,"ip_address":"","ucode":"AE946A94605456","user_header":"","comment_is_top":false,"comment_ctime":1576749525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576749525","product_id":100039001,"comment_content":"工厂 模板  代理  装饰","like_count":0},{"had_liked":false,"id":163464,"user_name":"包籽:-)","can_delete":false,"product_type":"c1","uid":1330598,"ip_address":"","ucode":"84CAD48B0832FA","user_header":"https://static001.geekbang.org/account/avatar/00/14/4d/a6/e56e4bcd.jpg","comment_is_top":false,"comment_ctime":1576726529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576726529","product_id":100039001,"comment_content":"Android 源码还有非常出名的Glide,Okhttp,Eventbus,Rxjava等中有很多设计模式，没有深厚的功力还是难以吃透。","like_count":0},{"had_liked":false,"id":163133,"user_name":"程序员大天地","can_delete":false,"product_type":"c1","uid":1249001,"ip_address":"","ucode":"7A21F15FEE2D5B","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/e9/98b6ea61.jpg","comment_is_top":false,"comment_ctime":1576661399,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576661399","product_id":100039001,"comment_content":"设计模式以前一直没有研究过，只知道一个单例模式，从0开始（晕）","like_count":0},{"had_liked":false,"id":162574,"user_name":"思绪走了灬光✨","can_delete":false,"product_type":"c1","uid":1101661,"ip_address":"","ucode":"512DD0FA5C024C","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/5d/99756164.jpg","comment_is_top":false,"comment_ctime":1576558825,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1576558825","product_id":100039001,"comment_content":"看不懂spring security","like_count":0},{"had_liked":false,"id":162504,"user_name":"wai","can_delete":false,"product_type":"c1","uid":1439529,"ip_address":"","ucode":"29CE3BE148FB79","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/29/60e01017.jpg","comment_is_top":false,"comment_ctime":1576546306,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576546306","product_id":100039001,"comment_content":"个人认为好的架构设计尤为重要，我现在日常的工作中深有体会，我们现在的项目历史的负债过于严重，项目很大，基本没什么设计，导致排查一个生产环境的问题需要半天甚至一天的时间，处理问题，不调试基本看不出来问题在哪，改一块地方，涉及到的影响点很多，牵一发动全身。设计模式是实现良好架构设计的基石，它能够很好的解决项目扩展，解藕等问题；好好学习，提高代码质量，提升架构设计能力","like_count":0},{"had_liked":false,"id":162404,"user_name":"告别流浪的喵","can_delete":false,"product_type":"c1","uid":1352487,"ip_address":"","ucode":"3748144E1899E4","user_header":"https://static001.geekbang.org/account/avatar/00/14/a3/27/91472366.jpg","comment_is_top":false,"comment_ctime":1576509893,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576509893","product_id":100039001,"comment_content":"上学的时候，接触过设计模式。只是那时候业务逻辑很简单，课堂上的例子也简单，没有体会到设计模式真正的精髓。但是工作中发现，在项目重构以及设计过程中，设计思想转化成设计模式，可保证代码逻辑的清晰，为后期维护提供了诸多便利。","like_count":0},{"had_liked":false,"id":162201,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1576476338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576476338","product_id":100039001,"comment_content":"作者讲了学习设计模式的五个好处，我最看重的是第3点“提高复杂代码的设计和开发能力”。因为这就是你的硬实力，如果你没有复杂代码的设计和开发能力，你能做的就永远是CRUD这类简单的开发。天天在做这些基础的开发，不提高对自己的要求，那在职场上就永远不会进步，就只能看着别人升职加薪，自己年纪大了等着被淘汰。","like_count":0},{"had_liked":false,"id":162037,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1576454286,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576454286","product_id":100039001,"comment_content":"单例 责任链","like_count":0},{"had_liked":false,"id":161011,"user_name":"rammelzzz","can_delete":false,"product_type":"c1","uid":1606275,"ip_address":"","ucode":"3BA634B5F6F74B","user_header":"https://static001.geekbang.org/account/avatar/00/18/82/83/8f168e4e.jpg","comment_is_top":false,"comment_ctime":1576078540,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576078540","product_id":100039001,"comment_content":"设计模式是面向对象开发的精髓。复杂场景下使用设计模式往往能化繁为简，保持代码可读、可维护与可扩展。很多时候可能并不了解某种设计模式，但是却在使用DP带来的便利。比如代理模式，AOP事务控制；单例模式，ThreadLocal全局用户；发布订阅模式，配置中心。。等等。离开设计模式，很多流程难以或者无法实现<br>","like_count":0,"discussions":[{"author":{"id":2276155,"avatar":"https://static001.geekbang.org/account/avatar/00/22/bb/3b/6e020a32.jpg","nickname":"多学多看多记","note":"","ucode":"0670C833007510","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410941,"discussion_content":"同意","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635816644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1386897,"avatar":"https://static001.geekbang.org/account/avatar/00/15/29/91/4b09222c.jpg","nickname":"pb","note":"","ucode":"180EC2A00EDCBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365107,"discussion_content":"同意1.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617710613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293308,"discussion_content":"摸摸","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595501644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132304,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/10/2d673601.jpg","nickname":"好饿早知道送外卖了","note":"","ucode":"AED22DB5BF8FC7","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293307,"discussion_content":"666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595501327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160891,"user_name":"胖子","can_delete":false,"product_type":"c1","uid":1037760,"ip_address":"","ucode":"E6371346288A87","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLIuRQaZX70dsBg6khub2VPM1eQAP9IWRWxgOFed3ia4kXyNJInFRicWJ0ibf2YmLsOvJa1sGygGpmJg/132","comment_is_top":false,"comment_ctime":1576055076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576055076","product_id":100039001,"comment_content":"1、用过适配器模式、模板模式。<br>2、不知设计模式难以区分代码和人的高与低，架构设计讨论插不上话。<br>","like_count":0},{"had_liked":false,"id":160606,"user_name":"盈盈一水间","can_delete":false,"product_type":"c1","uid":1526680,"ip_address":"","ucode":"C2593188215854","user_header":"https://static001.geekbang.org/account/avatar/00/17/4b/98/7fd79cca.jpg","comment_is_top":false,"comment_ctime":1575985118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575985118","product_id":100039001,"comment_content":"面试被问到一个问题印象深刻，观察者模式 观察者指什么 跟事件订阅模式有什么区别","like_count":0},{"had_liked":false,"id":160220,"user_name":"看，世界倒着","can_delete":false,"product_type":"c1","uid":1021951,"ip_address":"","ucode":"FFBFF8E4B63ED6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/97/ff/df9cb5b9.jpg","comment_is_top":false,"comment_ctime":1575893509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575893509","product_id":100039001,"comment_content":"1、重要性：熟悉设计模式，可以快速达成某种共识，初始设计原理，例如一看某个命名，就知道作者用了什么模式，看代码的人也能知道怎么去使用。<br>2、项目中: 之前在做消息处理的时候，采用了命令模式和订阅发布模式。","like_count":0},{"had_liked":false,"id":158708,"user_name":"落曦","can_delete":false,"product_type":"c1","uid":1475039,"ip_address":"","ucode":"C70F7E2EDC3FD7","user_header":"https://static001.geekbang.org/account/avatar/00/16/81/df/066ffab3.jpg","comment_is_top":false,"comment_ctime":1575438508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575438508","product_id":100039001,"comment_content":"先来聊一聊我对设计模式相关知识的看法 我是一名大三的学生在一个公司实习 最近在学flutter 带我的经理和我聊了很多 算法说重要也重要 但是正常的开发用不到 我们所有用到开发的地方 不管是任何语言 需要的都是设计模式 因此我对设计模式产生了很大的兴趣 在开发的很多地方也都是要用到这个设计模式的<br>问题二 本人学生 还在学校中学习 但在几次的课程设计中或多或少的可能用到过设计模式了 只是自己没什么印象 所以我想深入学习以及了解设计模式 感受设计模式之美","like_count":0},{"had_liked":false,"id":158566,"user_name":"用0和1改变自己","can_delete":false,"product_type":"c1","uid":1527530,"ip_address":"","ucode":"42B8F6ECF6BDD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/lfMbV8RibrhFxjILg4550cZiaay64mTh5Zibon64TiaicC8jDMEK7VaXOkllHSpS582Jl1SUHm6Jib2AticVlHibiaBvUOA/132","comment_is_top":false,"comment_ctime":1575419461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575419461","product_id":100039001,"comment_content":"当初刚面试时第一次问到设计模式时，懵的，根本没听过，后面又被问了几次，去补了一下类型和概念，没用，这次要好好学。","like_count":0},{"had_liked":false,"id":158425,"user_name":"Coding小先","can_delete":false,"product_type":"c1","uid":1051563,"ip_address":"","ucode":"965B1CC757E026","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/ab/0e2857e5.jpg","comment_is_top":false,"comment_ctime":1575368385,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575368385","product_id":100039001,"comment_content":"设计模式，没有接触过。","like_count":0},{"had_liked":false,"id":157866,"user_name":"爱水人家","can_delete":false,"product_type":"c1","uid":1730305,"ip_address":"","ucode":"0C94C6ACBC9CEB","user_header":"https://static001.geekbang.org/account/avatar/00/1a/67/01/44626cb9.jpg","comment_is_top":false,"comment_ctime":1575273233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575273233","product_id":100039001,"comment_content":"我是一个C++算法工程师，对工程项目来说，如果你不同设计模式，那么即使你的代码能跑通，但是如果你分享代码或者对自己代码增删查改功能时，往往会显得问题百出。你会发现自己的代码总是有一些问题，但是你却不知道如何去改。这其中就是设计模式的问题了。这也是我学习设计模式的初衷！","like_count":0},{"had_liked":false,"id":157404,"user_name":"Triple Z 💤","can_delete":false,"product_type":"c1","uid":1233998,"ip_address":"","ucode":"A6DB7C91B903CE","user_header":"https://static001.geekbang.org/account/avatar/00/12/d4/4e/5813df2f.jpg","comment_is_top":false,"comment_ctime":1575133261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575133261","product_id":100039001,"comment_content":"What is good code taste?","like_count":0},{"had_liked":false,"id":157286,"user_name":"马哲","can_delete":false,"product_type":"c1","uid":1692122,"ip_address":"","ucode":"45FC76B2CE0E53","user_header":"https://static001.geekbang.org/account/avatar/00/19/d1/da/1249fc90.jpg","comment_is_top":false,"comment_ctime":1575103022,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575103022","product_id":100039001,"comment_content":"设计模式的重要性：在工作中看到与自己合作的同事写的代码，他们能用非常短的时间写出很高质量的代码，模块之间耦合度低，类设计合理，繁杂的业务处理逻辑与主流程剥离开来，就像是一幅美丽的画。<br>设计模式的应用，不能够说出用了哪些，只能觉得别人的代码写得好","like_count":0},{"had_liked":false,"id":156827,"user_name":"乾坤瞬间","can_delete":false,"product_type":"c1","uid":1683130,"ip_address":"","ucode":"15BDCF29CBF8EB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLWIUF31dicT1YBTxWNX0uvbMxl15UwdlwFicGhNo0DsQ7CbM6k16EQxK7bwSMcicLGMdYto4jGPTvrg/132","comment_is_top":false,"comment_ctime":1574986188,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574986188","product_id":100039001,"comment_content":"设计模式真的很重要，也像争哥说的那样，在读源码的过程中，很多代码与代码之间的调用其实都蕴含着设计思想，由于在工作中遇到一些问题需要读sparkstreaming源码才能解决的时候，如果没有观察者与监听者思维的指导很容易陷入细节误区，抓不到重点，也就无法在短时间内看懂，并解决开发问题了","like_count":0},{"had_liked":false,"id":156753,"user_name":"Kevan","can_delete":false,"product_type":"c1","uid":1755742,"ip_address":"","ucode":"DA9165D459C9DD","user_header":"","comment_is_top":false,"comment_ctime":1574947935,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574947935","product_id":100039001,"comment_content":"设计模式如果在项目初期可能不太彰显，可以随意写！但是真正到项目运维了几年后，你就会发现一个类，没有设计，拆封过，3-4000行代码，改一个报数都需要查看多少引用，多少子类时，就发现，一个好的代码设计是多重要了！不要问我咋知道的…","like_count":0},{"had_liked":false,"id":156738,"user_name":"蓝思绪","can_delete":false,"product_type":"c1","uid":1361693,"ip_address":"","ucode":"2D8CE718DEAD96","user_header":"https://static001.geekbang.org/account/avatar/00/14/c7/1d/048dc01a.jpg","comment_is_top":false,"comment_ctime":1574944806,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574944806","product_id":100039001,"comment_content":"前端工程师，封装的UI组件复用性差，来学学设计模式看看","like_count":0},{"had_liked":false,"id":156726,"user_name":"萍水相逢","can_delete":false,"product_type":"c1","uid":1755772,"ip_address":"","ucode":"60A2B46838BF62","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ca/7c/e93ed948.jpg","comment_is_top":false,"comment_ctime":1574942797,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574942797","product_id":100039001,"comment_content":"设计模式对于我们开发者来说就是大国利器，人之底蕴，平时写业务一般用不到，但影响力无处不在。以前没学过设计模式式时，在独立设计模块或者中间价的时候，很是头痛，优化了很久才出结果，后来了解了设计模式，才知道自己在那时就用到了，只是野路子，就像修行小说中的散修，接触到之后，有种夕闻道，朝可死的感觉，现在每次有学习的机会，倍感珍惜!希望学习完课程，有新的感受!","like_count":0},{"had_liked":false,"id":156424,"user_name":"死海之汪","can_delete":false,"product_type":"c1","uid":1056128,"ip_address":"","ucode":"95AEE7008341E7","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/80/7f25b1ae.jpg","comment_is_top":false,"comment_ctime":1574869575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574869575","product_id":100039001,"comment_content":"学习设计模式的目的：<br>1. 读懂好代码<br>2. 写出好代码<br>3. 指导别人写出好代码","like_count":0},{"had_liked":false,"id":155762,"user_name":"🐾mc🐾","can_delete":false,"product_type":"c1","uid":1030759,"ip_address":"","ucode":"CE47F9316D6E14","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/67/c764be06.jpg","comment_is_top":false,"comment_ctime":1574750853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574750853","product_id":100039001,"comment_content":"从今起，我要对老师的文章进行Review，^ _ ^<br><br>投资要趁早，这样我们才能尽早享受复利  --&gt;  投资要趁早，这样我们才能尽早享受福利","like_count":0},{"had_liked":false,"id":155749,"user_name":"奇小易","can_delete":false,"product_type":"c1","uid":1171151,"ip_address":"","ucode":"E06B4DFB5352BB","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/cf/ef2e0501.jpg","comment_is_top":false,"comment_ctime":1574747719,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574747719","product_id":100039001,"comment_content":"本人设计模式相关知识零基础，但也想聊一下自己对设计模式相关知识重要性的看法。<br><br>个人看法：<br>这些知识能直接提升代码质量，也就是直接提升写代码的成就感，也就直接增加爱上编程的可能性。(非常直接）<br><br>例子：<br>曾经玩一款网游，刚开始仅仅是为了休闲娱乐，后来在很多外部因素的影响下，不断的想要玩好它，随着技术的增长，对这款游戏的热爱也是只增不减，更让我觉得有趣的是那个时候再练习一些枯燥的技巧时，也非常乐意。（也可能是游戏反馈机制做的比较好，但是也有一些人会放弃一些基本功练习，会觉得那个东西好无聊没必要练习）<br>基于此经历，所以我认为先把事情做好了，后面就会更主动的深入学习，而设计模式相关知识就是最直接影响着写好代码的关键。","like_count":0},{"had_liked":false,"id":155332,"user_name":"我叫郭小黑","can_delete":false,"product_type":"c1","uid":1463441,"ip_address":"","ucode":"C238592EB5EDBC","user_header":"https://static001.geekbang.org/account/avatar/00/16/54/91/0d4647d9.jpg","comment_is_top":false,"comment_ctime":1574679369,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574679369","product_id":100039001,"comment_content":"用过单例模式和观察者模式，单例模式的作用在于不需要频繁的创建对象，spring的single就是这种方式，还用过一次观察者模式(jdk自带的)，场景为我需要定时监控一个接口是否ping通，当可以通的时候，通知需要这个信息的模块。观察者模式很方便的可以做到这个事情。","like_count":0},{"had_liked":false,"id":154649,"user_name":"ZengTudou","can_delete":false,"product_type":"c1","uid":1370064,"ip_address":"","ucode":"6F76C977C4E093","user_header":"https://static001.geekbang.org/account/avatar/00/14/e7/d0/2a9b3208.jpg","comment_is_top":false,"comment_ctime":1574499573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574499573","product_id":100039001,"comment_content":"1，设计模式，说实话，我是在看准备秋招的时候开始接触的，当时不是很在意，不过在后来看Glide的源码的时候，我第一次深刻意识到，设计模式真的很重要很重要，这些大牛写的框架，使用的时候非常简单，但实际上内部做了非常非常多的工作，耦合解耦都做的非常好。刚开始看的时候，很多东西都看不明白，回头又去补了设计模式的知识，虽然最后能够基本拉通源码，但是说实话，我觉得并没有吸收到精华，为什么这么设计，我自己以后在设计这个东西的时候或者类似功能的时候，对我的帮助是什么，我觉得这才是最有用的。可能像作者说的一样，高度和基本功还不够，希望能够跟着作者的脚步慢慢前进吧。<br>2，我自己的话，用的还比较少，目前还是学习的阶段，不过也将设计模式的东西慢慢用到自己的代码之中。","like_count":0},{"had_liked":false,"id":153842,"user_name":"胡小旭","can_delete":false,"product_type":"c1","uid":1747537,"ip_address":"","ucode":"B346CE73545BA6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/aa/51/f0f16517.jpg","comment_is_top":false,"comment_ctime":1574316064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574316064","product_id":100039001,"comment_content":"1. 聊一聊你对设计模式相关知识的重要性的看法<br>设计模式对于写出高质量代码起着至关重要的作用。由于项目地慢慢迭代，代码量会变得越来越多，功能会变得越来越复杂，这时如果能够通过设计模式来重新设计类与类之间的关系，项目代码的层次结构，那么可以降低代码的复杂度，提升代码的扩展性和易用性。这真的非常重要。如果不这样，当代码迭代到瓶颈的时候，会遇到无法向前的瓶颈，往往会由于修改一处的bug，进而引起来好几个bug。以至于，未来定位bug花了无数的时间。这就是不使用设计模式的后果和代价。<br>","like_count":0},{"had_liked":false,"id":153573,"user_name":"被讨厌的勇气","can_delete":false,"product_type":"c1","uid":1547913,"ip_address":"","ucode":"AE3B3CA27D91A2","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/89/6e9c05d6.jpg","comment_is_top":false,"comment_ctime":1574261284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574261284","product_id":100039001,"comment_content":"##坚持打卡##<br><br>程序员的主要工作就是写代码。代码一上规模，代码的组织就显得异常重要。代码组织包括可读性、可维护性、可扩展性、复用性等。设计模式是组织代码、解决编程问题的一柄利器。","like_count":0},{"had_liked":false,"id":153425,"user_name":"霸波儿奔","can_delete":false,"product_type":"c1","uid":1035314,"ip_address":"","ucode":"4AB75DB06CB254","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cc/32/d9dbf4e7.jpg","comment_is_top":false,"comment_ctime":1574234303,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574234303","product_id":100039001,"comment_content":"有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读<br>投资要趁早","like_count":0},{"had_liked":false,"id":153416,"user_name":"月月鸟","can_delete":false,"product_type":"c1","uid":1689424,"ip_address":"","ucode":"1C5F30680E8B89","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/50/7de695b8.jpg","comment_is_top":false,"comment_ctime":1574232731,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574232731","product_id":100039001,"comment_content":"一：<br>2020届毕业生，现在已入职一家待遇还不错的小公司<br>我这个方向只有两名开发人员，前两周我一直在熟悉代码，距今已经有一个月了 已基本接收所有模块<br>这个月线上也出现了一些bug、也遇到重大的重写  <br>深刻的发现维护低质量的代码是一件非常糟心的事 其实我也没资格吐槽前辈的代码 毕竟他写的已经稳定运行这么久了 而我才刚刚入职 但是我想以后的日子里 不能让未来的同事吐槽我的代码 一定要合理的设计<br>二：<br>其实大学期间也学习过相关课程，但是因为纯理论基本不会实现所以并没有认真听，顶多会设计接口 封装方法 即便是这样都感觉比其他同学的烂代码好很多了 直到出来工作 才发现自己的拙见","like_count":0},{"had_liked":false,"id":153371,"user_name":"呆猫","can_delete":false,"product_type":"c1","uid":1228759,"ip_address":"","ucode":"69E256E6A19225","user_header":"https://static001.geekbang.org/account/avatar/00/12/bf/d7/9e2c8648.jpg","comment_is_top":false,"comment_ctime":1574225721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574225721","product_id":100039001,"comment_content":"最近在读设计模式的书，顺便优化了一下项目的代码，但是还有很多地方明知不合理，确无从下手改，希望跟着专栏边学习边实践","like_count":0},{"had_liked":false,"id":153216,"user_name":"蟹肥","can_delete":false,"product_type":"c1","uid":1737493,"ip_address":"","ucode":"382B86651ED909","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rNMTN9E43LZ0dpb4s3ElcRnBYpic5zzrCXGvKdib7rDwSEEWto83gXgFFQWMWXQmUxodcKyNnhDK1yIjeiaR7Mz3A/132","comment_is_top":false,"comment_ctime":1574192254,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574192254","product_id":100039001,"comment_content":"1.设计模式是由GoF将前人的经验与智慧收集起来让我们加以复用,站在巨人的肩膀上,并在实际开发中,当团队具有相似的设计模式观念,可以使用设计模式沟通进而降低浪费.<br>2.组合模式用来描述树状清单结构","like_count":0},{"had_liked":false,"id":153016,"user_name":"捕风捉影","can_delete":false,"product_type":"c1","uid":1713935,"ip_address":"","ucode":"E7F75B2521C8CF","user_header":"https://static001.geekbang.org/account/avatar/00/1a/27/0f/4af4daff.jpg","comment_is_top":false,"comment_ctime":1574141278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574141278","product_id":100039001,"comment_content":"目前为止比较浅显<br>1.举例一个普通的需要不断迭代的机器学习模型，对拿到数据进行的工作模块化，数据清洗，特征工程。<br>2.但是单单模块化还不够，需要对模块进行细分<br>数据清洗：筛选各种需要剔除的字段，接下来应该是对各个字段进行清洗，但为了以后查找问题方便，而且集中处理，将其放在特征工程的模块中。<br>特征工程：根据字段特性筛选不同类型的字段，将各个字段划分为不同类型的特征，另将需要额外remapping的字段划分为一个特征类型，便于区分处理，然后对不同类型的特征分块处理。<br><br>3.目前只是简单将整套工作流程，进行模块化，<br>3.1 可以在后续的迭代模型过程中，添加功能，添加特征非常方便，很大程度上避免了漏掉哪个处理流程造成的bug。<br>3.2 而且可读性比较好。分层明显。<br>3.3 对比之前的完全一套函数罗列起来，更加清晰。<br><br>希望我可以在本课程能够熟悉设计模式，并知道在工作中那些地方该用到什么设计模式。<br>在此立个flag，每一节课，必须留下自己的总结，学到了什么，疑惑点是什么，并且必须将自己所有的疑惑点解决掉。<br>","like_count":0},{"had_liked":false,"id":152940,"user_name":"千年孤独","can_delete":false,"product_type":"c1","uid":1037215,"ip_address":"","ucode":"282CA1A68E8774","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d3/9f/36ea3be4.jpg","comment_is_top":false,"comment_ctime":1574127594,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574127594","product_id":100039001,"comment_content":"知其然所以然<br>为什么我觉得我需要学习设计模式？<br>最近在想参考别人的开源IM系统，想自己动手写一套来实践，同时也希望能够做好代码的质量。<br>在阅读开源项目中，我无法理解各个项目代码中的代码设计，知道哪些是好的哪些坏的，两者都吸收，到最后自己实践的代码还是一团糟。","like_count":0},{"had_liked":false,"id":152831,"user_name":"玉皇大亮","can_delete":false,"product_type":"c1","uid":1019849,"ip_address":"","ucode":"5C4FDF1FDCF8A9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/c9/833d5060.jpg","comment_is_top":false,"comment_ctime":1574085163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574085163","product_id":100039001,"comment_content":"1.简单说编程高手经常用，并且融汇贯通；搬砖菜鸟偶尔用，不明所以<br>2.React中ContextAPI为了解决跨层级组件通信问题，提出了Provider&#47;Consumer的生产者&#47;消费者模式","like_count":0},{"had_liked":false,"id":152799,"user_name":"千锤百炼领悟之极限","can_delete":false,"product_type":"c1","uid":1744257,"ip_address":"","ucode":"224B5CF2101716","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/81/d748b7eb.jpg","comment_is_top":false,"comment_ctime":1574081985,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574081985","product_id":100039001,"comment_content":"使用设计模式让代码开发思路更为清晰，写出更容易维护的代码。工作中用得最多的是工厂模式，单例模式，策略模式，但只是用到比较皮毛的部分，还要继续学习。","like_count":0},{"had_liked":false,"id":152767,"user_name":"慢慢走着","can_delete":false,"product_type":"c1","uid":1238962,"ip_address":"","ucode":"8312A1C179FD4D","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/b2/cd32ce18.jpg","comment_is_top":false,"comment_ctime":1574077253,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574077253","product_id":100039001,"comment_content":"这样我们才能尽早享受复利。  福利写成了复利","like_count":0},{"had_liked":false,"id":152735,"user_name":"Geek_d19870","can_delete":false,"product_type":"c1","uid":1119721,"ip_address":"","ucode":"C90D252A7F67BF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIRLM0nibsyQdl0y5cl8ntdVzgxQWlqjHniaicjNwuDqiaicXUbLNGhRcg8QOF5wPJziadeQXu2MzhyVK1A/132","comment_is_top":false,"comment_ctime":1574071620,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574071620","product_id":100039001,"comment_content":"1.有助于写出高质量、扩展性强、优雅的代码。<br>2.有助于领悟优秀源码的思想，提升个人内功。<br>3.可以让自己有能力且有效的帮助他人提升，前提是你愿意的话；帮助别人等于帮助自己。<br>4.有了上面的保证，不出意外的话，职场升级&#47;offer就是附属品。","like_count":0},{"had_liked":false,"id":152554,"user_name":"晨间新闻","can_delete":false,"product_type":"c1","uid":1161406,"ip_address":"","ucode":"6F7A55AAD52F16","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/be/2d77d643.jpg","comment_is_top":false,"comment_ctime":1574042384,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574042384","product_id":100039001,"comment_content":"原来看不懂源码是因为内功不足呀","like_count":0},{"had_liked":false,"id":152526,"user_name":"Win","can_delete":false,"product_type":"c1","uid":1473487,"ip_address":"","ucode":"5D1FCE4B424B82","user_header":"https://static001.geekbang.org/account/avatar/00/16/7b/cf/870ab4af.jpg","comment_is_top":false,"comment_ctime":1574039450,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574039450","product_id":100039001,"comment_content":"经验➕未雨绸缪","like_count":0},{"had_liked":false,"id":152425,"user_name":"Simplation","can_delete":false,"product_type":"c1","uid":1176020,"ip_address":"","ucode":"22CC71D3B021AB","user_header":"https://static001.geekbang.org/account/avatar/00/11/f1/d4/bd644628.jpg","comment_is_top":false,"comment_ctime":1573998099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573998099","product_id":100039001,"comment_content":"笔记：<br>为什么要学习并掌握设计模式的相关知识？<br>1. 应对面试中的设计模式相关问题。<br>2. 告别写被人吐槽的烂代码。(提高自己的编码能力，写出高质量代码)<br>3. 提高复杂代码的设计和开发能力。<br>4. 让读源码、学框架事半功倍。<br>5. 为你的职场发展做铺垫。<br><br>作业：<br>1.设计模式非常重要，个人深有体会。（尤其是刚入行的时候，看别人的开源项目真的是很费劲）<br>2.工作中只用到工厂、单例、观察者。<br><br>文章中的这句话深有体会”你以为你读懂了别人的代码，其实你可能还未领悟到其中的精髓！“，在阅读开源框架代码的时候花费的事件不少，但只是了解业务，有很多的地方不知道为什么要这样去写！！！<br>跟随作者学习。","like_count":0},{"had_liked":false,"id":152377,"user_name":"早就在城下","can_delete":false,"product_type":"c1","uid":1501819,"ip_address":"","ucode":"3B0D4D7CF7339A","user_header":"https://static001.geekbang.org/account/avatar/00/16/ea/7b/8f597e3d.jpg","comment_is_top":false,"comment_ctime":1573986075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573986075","product_id":100039001,"comment_content":"构造器模式是不是用的最多，哈哈","like_count":0},{"had_liked":false,"id":152357,"user_name":"wyf2317","can_delete":false,"product_type":"c1","uid":1236837,"ip_address":"","ucode":"7F3E61A6188B39","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ub4icibeRLzff8Nf6ORsolib9KHtmeu3d4cCCAFd3Xgah3v78WfDYQB7WKq9iaIPXPwHBxw7mkBP9wYxDGMT9m1Rbw/132","comment_is_top":false,"comment_ctime":1573982041,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573982041","product_id":100039001,"comment_content":"1  找工作必备的敲门砖。看开源代码必备。使用适合的设计模式可以减少开发工作量，减少潜在bug。<br><br>2 单例：异步文件读写并热更新类，提高程序并发。 简单工厂：根据客户端请求创建不同接口对象。","like_count":0},{"had_liked":false,"id":152274,"user_name":"豌豆","can_delete":false,"product_type":"c1","uid":1113307,"ip_address":"","ucode":"0C35FD827F9BFD","user_header":"https://static001.geekbang.org/account/avatar/00/10/fc/db/56b0d13c.jpg","comment_is_top":false,"comment_ctime":1573958008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573958008","product_id":100039001,"comment_content":"在没有开始到这门课程之前，也看过些设计模式的书，就像作者说的，看的时候觉得自己懂了，实际中不知道如何应用，了解的设计模式其实也很有限，最后能记得的就更少了。<br>听完开课词与第一节课之后，我思考了一下当前自己的状态与一些感悟：<br> 关于重构与阅读工作中的项目代码<br>\t1. 自己也能发现写的项目中让我觉得很佩服的代码，但是哪里好呢，是怎么基于何种设计后的思考呢？讲不出；<br>\t2. 针对业务上有关联，但又不是强关联的模块，按照现有代码的编写，从代码层面就已经做了强关联；<br>\t3. 当然也会发现写的不容易理解的或者觉得不合理的地方，也会去尝试按照自己的方式去抽象和重构。<br>关于写代码<br>\t1. 虽然也一直在写代码，但是修修补补的工作较多，设计工作似乎是在前人摘好的树上照葫芦画瓢，并不是想搞创新，而是这种设计工作总觉得有种不知其所以然的感觉；<br>\t2. 编码更多像是在吃老本，写出来的代码和几年前的差别并不大。<br>关于代码review<br>\t1. 目前自己的工作内容中已经有了需要去指导新进员工的责任，在做代码评审时，除了开发规范上做些要求，其他的方面，觉得有些力不从心，想想自己好像也是这么过来的。<br>\t2. 自身能力不能提高，除了自己无法进步外，以自身能力教别人，理论上最好的结果是把新人变成和我一样的水平，显然这是不够的。<br>关于开源代码<br>\t1. 文章中提到了看不懂、看不下去的问题，我这里还有一个是不知道从哪里入手来看的问题。<br>\t2. 除了工作需要一定要去看源码的某些点之外，很容易放弃阅读源码这件事情。<br>目前这门课程的开课词和第一节课就已经吸引到我了，有不少痛点。希望自己能够跟着文章一起学习设计模式，从0到0.1到0.2到0.3，最后到1，第一个小目标，跟着本课程持续学习，加油。","like_count":0},{"had_liked":false,"id":152167,"user_name":"Lyle","can_delete":false,"product_type":"c1","uid":1002548,"ip_address":"","ucode":"55371A8BE9F88D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4c/34/0df5906a.jpg","comment_is_top":false,"comment_ctime":1573896156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573896156","product_id":100039001,"comment_content":"1，设计模式是程序员的基本功<br>2，之前模块基本都是悉尼的一个大牛写的，有单例模式，简单工厂模式，访问者模式，观察者模式等。","like_count":0},{"had_liked":false,"id":152129,"user_name":"王先生","can_delete":false,"product_type":"c1","uid":1082275,"ip_address":"","ucode":"027C061F660605","user_header":"https://static001.geekbang.org/account/avatar/00/10/83/a3/432bbbd9.jpg","comment_is_top":false,"comment_ctime":1573887850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573887850","product_id":100039001,"comment_content":"这篇也是讲重要性，早学早用，早用早熟，早熟早精。","like_count":0},{"had_liked":false,"id":152118,"user_name":"谭鹏","can_delete":false,"product_type":"c1","uid":1142009,"ip_address":"","ucode":"4A8120C4AA6F2F","user_header":"https://static001.geekbang.org/account/avatar/00/11/6c/f9/af80b4da.jpg","comment_is_top":false,"comment_ctime":1573884083,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573884083","product_id":100039001,"comment_content":"偏业务 ,对设计模式 出了常用的单例和模板方法  其他的没啥概念","like_count":0},{"had_liked":false,"id":152103,"user_name":"Geek_ceadd5","can_delete":false,"product_type":"c1","uid":1655186,"ip_address":"","ucode":"0534D95EFEF779","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJ1rSibUto4HWXuX1AbkqOhlW7deyRxXo7Fwt1iam57SFQgSCiaHWMjT8SlXficxKjuUy44gBSkmM1V3A/132","comment_is_top":false,"comment_ctime":1573878632,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573878632","product_id":100039001,"comment_content":"学不懂的时候，弄个项目感觉什么设计模式都能用上。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":135475,"discussion_content":"关于这个问题，有很多同学有误解，我写了篇文章解释一下：\nhttps://mp.weixin.qq.com/s/Od95pFonyLo7IlB3THa8Tw","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1579093991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1677568,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eopibicYcibaNGZvicTEMyYroXQGpP1WicRxI0SBobVJVYtml6K6bQhtgR3bLZJkFZMSDV4SuxdjZRgXUw/132","nickname":"宇智波悟天","note":"","ucode":"C6945990FE33C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":304382,"discussion_content":"争哥的专栏质量都有保证，期待争哥出下一个专栏！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599557422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":135475,"ip_address":""},"score":304382,"extra":""},{"author":{"id":1463740,"avatar":"https://static001.geekbang.org/account/avatar/00/16/55/bc/fad0090b.jpg","nickname":"Yeyw","note":"","ucode":"C9D20DB91C3BE5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":345859,"discussion_content":"哈哈哈哈，太难了，太不容易了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611803559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":135475,"ip_address":""},"score":345859,"extra":""},{"author":{"id":2739750,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ce/26/f493253d.jpg","nickname":"源不息","note":"","ucode":"2B9FF0B611BC9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":542087,"discussion_content":"期待出下一专栏，美一篇都很用心，都讲出了5年编程经验的我觉得优秀的地方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640661734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":135475,"ip_address":""},"score":542087,"extra":""}]},{"author":{"id":1447569,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/WtHCCMoLJ2DvzqQwPYZyj2RlN7eibTLMHDMTSO4xIKjfKR1Eh9L98AMkkZY7FmegWyGLahRQJ5ibPzeeFtfpeSow/132","nickname":"脱缰的野马__","note":"","ucode":"D5F993E7232C61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286973,"discussion_content":"如果只是想学23种设计模式的话网上有非常多的资料。我个人从自己的经历来看，之前确实看过不少网上的设计模式资料，基本千篇一律，总感觉学完之后不够深刻更别谈能很好的应用，可能我个人学习能力有问题。截止到目前为止通过看争哥的专栏，我能领悟到的就是要真正学会学懂设计模式，很重要的一个前提或者说基础就是要先理解透这些设计原则和设计思想，这就是不少同学说的“前奏”，我个人觉得没有这块的认知去学习设计模式最终的效果也只是记背的效果","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1593337310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1506085,"avatar":"https://static001.geekbang.org/account/avatar/00/16/fb/25/f6743e97.jpg","nickname":"进击的前端er","note":"","ucode":"9229B410F48B85","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":242104,"discussion_content":"我的天，你是怎么看的，前面才是本专栏的精髓啊，掌握了这些思想和原则，比照搬设计模式强太多了","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1587466528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1032755,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/c2/33/ccbf2045.jpg","nickname":"sta","note":"","ucode":"D840070850EA5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306915,"discussion_content":"说实话，我觉的前半部分更加重要，而且更难理解和运用，当然对后面的我也很期待","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1600417625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481302,"discussion_content":"先从第一篇开始就是正题啊 😂 前面的比后面的更重要呢 建议你回过头去再看下前几篇文章","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579054265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609735,"avatar":"https://static001.geekbang.org/account/avatar/00/18/90/07/41d19261.jpg","nickname":"Nacol","note":"","ucode":"B645ECB9540B95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366050,"discussion_content":"设计原则、思想是内功，设计模式是武功招式。就像张无忌学习的最久的是九阳神功，而不是乾坤大挪移。不可本末倒置。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617949160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289671,"discussion_content":"这人难道就是传说中的API调用师？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594175697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1598564,"avatar":"https://static001.geekbang.org/account/avatar/00/18/64/64/865c1eb4.jpg","nickname":"劳码识途","note":"","ucode":"7AEF4D9407F097","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309568,"discussion_content":"也有可能是代码平移大师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601349682,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":289671,"ip_address":""},"score":309568,"extra":""}]},{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377514,"discussion_content":"这是喷子，哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622691032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134517,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/b5/e0bb3efe.jpg","nickname":"晗晗","note":"","ucode":"93C812E7E5AA75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":287949,"discussion_content":"我都看不懂，还想多看几遍，你这我看的下吧都要掉下来了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593598589,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438470,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f3/06/8da1bf0c.jpg","nickname":"Fredo","note":"","ucode":"681D6692617DAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164758,"discussion_content":"前面的都没理解，后面的看多了也是虚招，更不可能实际运用中见招拆招。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581219042,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396147,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4d/b3/85828cc4.jpg","nickname":"f","note":"","ucode":"686BD6C21FE02B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141254,"discussion_content":"实在不同意这条评论 这还能让小编给找了 无语😓","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579405497,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396147,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4d/b3/85828cc4.jpg","nickname":"f","note":"","ucode":"686BD6C21FE02B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141239,"discussion_content":"我认为这全都是正题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579404649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152003,"user_name":"zhou","can_delete":false,"product_type":"c1","uid":1087243,"ip_address":"","ucode":"E1CE8575B3F106","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/0b/a943bcb3.jpg","comment_is_top":false,"comment_ctime":1573831780,"is_pvip":false,"discussion_count":0,"race_medal":3,"score":"1573831780","product_id":100039001,"comment_content":"确实看源码时，看着看着就晕了。设计模式学了很多，但当时学了还能记得几天，半个月不用就忘记了","like_count":0},{"had_liked":false,"id":151939,"user_name":"刘会俊","can_delete":false,"product_type":"c1","uid":1065775,"ip_address":"","ucode":"DFC7B41EA6AF57","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/2f/4ff46e78.jpg","comment_is_top":false,"comment_ctime":1573818366,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1573818366","product_id":100039001,"comment_content":"去年对接各个支付平台的时候用了简单工厂+策略，但是感觉用法不太对，然后针对不同业务种类的订单，使用了责任链模式，感觉还是只会用，没有抓住精髓","like_count":0},{"had_liked":false,"id":151864,"user_name":"thinkmore","can_delete":false,"product_type":"c1","uid":1137647,"ip_address":"","ucode":"8FC3414685165C","user_header":"https://static001.geekbang.org/account/avatar/00/11/5b/ef/ab462610.jpg","comment_is_top":false,"comment_ctime":1573801995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573801995","product_id":100039001,"comment_content":"看过猫猫狗狗的设计模式感觉自己弄懂了，掌握了武林绝学，然后别人实际作用，我去啥玩意儿呀！这就是我的现状","like_count":0},{"had_liked":false,"id":151822,"user_name":"李杰","can_delete":false,"product_type":"c1","uid":1743953,"ip_address":"","ucode":"E177762621E11E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9c/51/76fcc9cd.jpg","comment_is_top":false,"comment_ctime":1573796789,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573796789","product_id":100039001,"comment_content":"设计模式，大概是一种DSL，一种优化过的标准化操作","like_count":0},{"had_liked":false,"id":151754,"user_name":"个人练习生niki👍","can_delete":false,"product_type":"c1","uid":1191678,"ip_address":"","ucode":"48E5D6DE94BBBB","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/fe/5541689b.jpg","comment_is_top":false,"comment_ctime":1573785793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573785793","product_id":100039001,"comment_content":"设计模式显著提升了代码的扩展性。<br>工作中用过单例模式、工厂模式、策略模式、模板方法模式<br>在加解密过程中，系统支持多种类型CA进行加解密。每种实例只创建一个对象，单例模式用来避免创建过多对象。<br>根据CA类型用工厂方法去创建对应的对象，实现调用者与对象创建之间解耦。<br>加解密流程 获取CA类型-&gt;前置操作-&gt;加解密-&gt;后置操作。这是一个模板方法模型。<br>通过传入不同的CA类型，可以调用不同的CA加解密，是一种策略模式，相互之间可以替换。","like_count":0},{"had_liked":false,"id":151719,"user_name":"苏彧","can_delete":false,"product_type":"c1","uid":1622448,"ip_address":"","ucode":"C016B28DF7449C","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/b0/b52d9ade.jpg","comment_is_top":false,"comment_ctime":1573781572,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573781572","product_id":100039001,"comment_content":"我是今年刚出来的大学生，够早的看了你的文章，","like_count":0},{"had_liked":false,"id":151670,"user_name":"麻婆豆腐","can_delete":false,"product_type":"c1","uid":1731885,"ip_address":"","ucode":"F371FE05D081D6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6d/2d/de41f9cf.jpg","comment_is_top":false,"comment_ctime":1573778148,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573778148","product_id":100039001,"comment_content":"1带设计就有高级感，所谓磨刀不误砍柴工，对整个项目的提升是非常大的。<br>2.没有用过啊！天天写烂代码，希望通过学习能够提高code能力，不要被别人吐槽","like_count":0},{"had_liked":false,"id":151643,"user_name":"昵称不重要","can_delete":false,"product_type":"c1","uid":1156872,"ip_address":"","ucode":"50F0E9DC56AE3B","user_header":"https://static001.geekbang.org/account/avatar/00/11/a7/08/802cc83f.jpg","comment_is_top":false,"comment_ctime":1573774434,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573774434","product_id":100039001,"comment_content":"用过单例模式减少资源创建的开销","like_count":0},{"had_liked":false,"id":151592,"user_name":"Pioneer4","can_delete":false,"product_type":"c1","uid":1742839,"ip_address":"","ucode":"EE095D397D9BB4","user_header":"https://static001.geekbang.org/account/avatar/00/1a/97/f7/8afbb146.jpg","comment_is_top":false,"comment_ctime":1573746605,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573746605","product_id":100039001,"comment_content":"# 1.聊一聊你对设计模式相关知识的重要性的看法：<br>设计模式是前辈代码设计的总结，是经典，也是共识，有助于提高代码的可扩展性、逻辑性、全局性。<br># 2. 在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>还未做过开发，感觉在学习使用各种框架的时候，Factory工厂模式用得很多，就相当于给我们开发者提供了创建某个对象的唯一通道，对于作者本身，可以自由修改源代码而不影响开发者的使用。","like_count":0},{"had_liked":false,"id":151587,"user_name":"秋葵","can_delete":false,"product_type":"c1","uid":1354644,"ip_address":"","ucode":"6D72EFFCDD14E3","user_header":"https://static001.geekbang.org/account/avatar/00/14/ab/94/729a2318.jpg","comment_is_top":false,"comment_ctime":1573744643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573744643","product_id":100039001,"comment_content":"1.刚工作一年的码农，就自己而言，目前理解项目需求，使用合适的设计模式来完成功能能够节省很多时间，一切需求完成下来会很顺利。<br>2.对设计模式了解不多，可能平时用到了，但具体说不上来。<br>","like_count":0},{"had_liked":false,"id":151584,"user_name":"Rolkevin","can_delete":false,"product_type":"c1","uid":1078696,"ip_address":"","ucode":"9B668E3CE8C80D","user_header":"https://static001.geekbang.org/account/avatar/00/10/75/a8/f0538063.jpg","comment_is_top":false,"comment_ctime":1573744281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573744281","product_id":100039001,"comment_content":"1、设计模式，在某次面试中，被问了一道，当时就一脸懵，什么是设计模式，从那之后才慢慢开始知道设计模式的存在（很失败）对我来说，当前，设计模式的重要性就在老师提到的为什么要学设计模式中的头2个，为了面试以及告别烂代码，摆脱crud，现在就是后悔当初，工作之余没有学习新知识，现在很被动，但愿此时开始不会太晚<br>2、回想了一下，工作中用的只有单例跟工厂了，长叹一声...跟着专栏，除了系统学习设计模式之外，也想借此机会，养成主动学习的习惯；<br>画外音：自我感觉抽象思维不够强，想请教老师，有什么办法可以加强思维能力","like_count":0},{"had_liked":false,"id":151501,"user_name":"有爱有波哥","can_delete":false,"product_type":"c1","uid":1464493,"ip_address":"","ucode":"DD9A023563151F","user_header":"https://static001.geekbang.org/account/avatar/00/16/58/ad/6abb57c4.jpg","comment_is_top":false,"comment_ctime":1573731826,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573731826","product_id":100039001,"comment_content":"就如争哥说，源码看不懂","like_count":0},{"had_liked":false,"id":151400,"user_name":"加号","can_delete":false,"product_type":"c1","uid":1459955,"ip_address":"","ucode":"EDB8A6351C6A6E","user_header":"https://static001.geekbang.org/account/avatar/00/16/46/f3/f8a83f39.jpg","comment_is_top":false,"comment_ctime":1573713379,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573713379","product_id":100039001,"comment_content":"设计模式可以避免代码的堆积，开发出整洁，易维护，解耦合的功能。但在平时的项目中，因项目急迫，确实很少有时间去仔细考虑，布局。时间长了后，就遗忘掉这些知识，希望能重新捡起来~~","like_count":0},{"had_liked":false,"id":151283,"user_name":"Janet－林","can_delete":false,"product_type":"c1","uid":1093701,"ip_address":"","ucode":"29B4CCE6D6890B","user_header":"https://static001.geekbang.org/account/avatar/00/10/b0/45/8a223c24.jpg","comment_is_top":false,"comment_ctime":1573694891,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573694891","product_id":100039001,"comment_content":"用了比较多单例和工厂","like_count":0},{"had_liked":false,"id":151240,"user_name":"斜杠ing...","can_delete":false,"product_type":"c1","uid":1676247,"ip_address":"","ucode":"C4AE866AC8B9AE","user_header":"https://static001.geekbang.org/account/avatar/00/19/93/d7/93c8f92a.jpg","comment_is_top":false,"comment_ctime":1573690500,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573690500","product_id":100039001,"comment_content":"刚换了家公司，看到大量的我ifelse就晕了，而且相同的功能到处在复制。有些明显的用个模版就可以很好的解决问题，但就是复制了一大堆代码，搞得bug超多","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481262,"discussion_content":"这节课里的代码都没带吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580122074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286251,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a0/6b/0a21b2b8.jpg","nickname":"迷羊","note":"","ucode":"85AF8CED3436C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":136328,"discussion_content":"争哥的意思是如果不带前缀，而是直接命名为 name、password、avatarUrl。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579137577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151119,"user_name":"东流","can_delete":false,"product_type":"c1","uid":1738147,"ip_address":"","ucode":"2715BC6E87BD83","user_header":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","comment_is_top":false,"comment_ctime":1573655391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573655391","product_id":100039001,"comment_content":"设计模式可以降低代码耦合性，继续扩展<br>我目前用得最多的是单例模式，当成全局变量使用。还有就是观察者模式，事件监听","like_count":0},{"had_liked":false,"id":151109,"user_name":"沐天同","can_delete":false,"product_type":"c1","uid":1055298,"ip_address":"","ucode":"1405E344F07F0D","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/42/55c79768.jpg","comment_is_top":false,"comment_ctime":1573654307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573654307","product_id":100039001,"comment_content":"1. 可维护的代码是易扩展，解耦的。<br><br>2.用过的设计模式，单例，工厂，观察者，模板","like_count":0},{"had_liked":false,"id":151103,"user_name":"even","can_delete":false,"product_type":"c1","uid":1249431,"ip_address":"","ucode":"C976CFB2A0EBBF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Cwkic25ndkExxY3HvVjAaYKVzFRicv2X6TE2sjdqTBBmqeh7X8crIQe3SHPichvcayOCqI3PJ88yVuMNlD8VvkE3A/132","comment_is_top":false,"comment_ctime":1573654040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573654040","product_id":100039001,"comment_content":"有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读。非常认同！","like_count":0},{"had_liked":false,"id":151101,"user_name":"杨氏","can_delete":false,"product_type":"c1","uid":1734266,"ip_address":"","ucode":"862E0C3113F929","user_header":"https://static001.geekbang.org/account/avatar/00/1a/76/7a/e2780019.jpg","comment_is_top":false,"comment_ctime":1573653678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573653678","product_id":100039001,"comment_content":"设计模式灰常重要，几乎面试必问题。<br>我虽然懂几个，但理解不够透。希望能跟着老师把这方面提高。","like_count":0},{"had_liked":false,"id":151093,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1573652888,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573652888","product_id":100039001,"comment_content":"结合作者的看法和自己的经历来看，学习设计模式的目的的确可以有很多<br>1.想要自己写出好看的代码，却总是不确定什么样的情况下用什么样的代码最为合适<br>2.在阅读别人的代码或者源码时，不太能理解这种写法的优劣性，更无从面对以后需要对别人的代码进行审核和把关的情况<br>工作中还是使用基础框架的多，很多工厂模式，单例模式，装饰者模式之类的都是看源码解析的概念知道的，实际运用开发中几乎没有清晰明白的理解过，所以还是希望接下来的学习中，能够更进一步的理解这一点。","like_count":0,"discussions":[{"author":{"id":2644098,"avatar":"https://static001.geekbang.org/account/avatar/00/28/58/82/98ccc722.jpg","nickname":"佚名","note":"","ucode":"1898769ACBDF0F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383598,"discussion_content":"有道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626175767,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151025,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1241567,"ip_address":"","ucode":"C42E11098E1B38","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","comment_is_top":false,"comment_ctime":1573644310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573644310","product_id":100039001,"comment_content":"在看别人的源代码时，好难啃动啊","like_count":0},{"had_liked":false,"id":151014,"user_name":"Empty","can_delete":false,"product_type":"c1","uid":1237261,"ip_address":"","ucode":"AD6C95A503B991","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/0d/ecf81935.jpg","comment_is_top":false,"comment_ctime":1573643273,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573643273","product_id":100039001,"comment_content":"<br>工厂模式和适配器模式，主要就是通过不同的服务提供商来获取数据，个人感觉设计模式还是很重要的，可以解耦业务，做到开闭原则，减少产生新bug的概率","like_count":0},{"had_liked":false,"id":150907,"user_name":"Cindy_Yu","can_delete":false,"product_type":"c1","uid":1328604,"ip_address":"","ucode":"EE6869CAC5C1EC","user_header":"https://static001.geekbang.org/account/avatar/00/14/45/dc/a3a231d1.jpg","comment_is_top":false,"comment_ctime":1573625419,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573625419","product_id":100039001,"comment_content":"建造者模式，在dialog里用。set title等。适配器模式。adapter.","like_count":0},{"had_liked":false,"id":150766,"user_name":"idea","can_delete":false,"product_type":"c1","uid":1252848,"ip_address":"","ucode":"621921030982C0","user_header":"https://static001.geekbang.org/account/avatar/00/13/1d/f0/59702429.jpg","comment_is_top":false,"comment_ctime":1573608380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573608380","product_id":100039001,"comment_content":"用得比较多的是单利，工厂，责任链，策略这几种模式。最近遇到一个业务场景需要编写非常多的规则内容，为了优化规则部分的逻辑代码，学习了drools规则引擎，现在将核心的rule全部抽离了出来，感觉代码清晰了很多。","like_count":0},{"had_liked":false,"id":150652,"user_name":"return","can_delete":false,"product_type":"c1","uid":1135528,"ip_address":"","ucode":"42B8A3380DF04B","user_header":"https://static001.geekbang.org/account/avatar/00/11/53/a8/abc96f70.jpg","comment_is_top":false,"comment_ctime":1573574721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573574721","product_id":100039001,"comment_content":"我是做python，设计模式感觉用的少，设计原则感觉很精髓， 设计原则不仅指导面向对象也指导面向过程。  带来的 最大好处就是扩展性。","like_count":0},{"had_liked":false,"id":150644,"user_name":"姚先生","can_delete":false,"product_type":"c1","uid":1181069,"ip_address":"","ucode":"B2FAE540D562E1","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/8d/27db1e0f.jpg","comment_is_top":false,"comment_ctime":1573573477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573573477","product_id":100039001,"comment_content":"功利一点，希望通过专栏的学习，可以在工作中用到设计模式，面试被面试时得心应手，看得懂优秀开源代码的设计理念","like_count":0},{"had_liked":false,"id":150327,"user_name":"Spring.Fred","can_delete":false,"product_type":"c1","uid":1055148,"ip_address":"","ucode":"66C84150ACC304","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/ac/32da70c9.jpg","comment_is_top":false,"comment_ctime":1573519408,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573519408","product_id":100039001,"comment_content":"用的最多的是用策略模式解决ifelse过多不好扩展的问题","like_count":0},{"had_liked":false,"id":150293,"user_name":"黄剑","can_delete":false,"product_type":"c1","uid":1204424,"ip_address":"","ucode":"D7F68DE19F41CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/c8/044dd4a2.jpg","comment_is_top":false,"comment_ctime":1573513348,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1573513348","product_id":100039001,"comment_content":"用过单例模式，工厂模式，发布订阅模式","like_count":0},{"had_liked":false,"id":150231,"user_name":"李哈哈","can_delete":false,"product_type":"c1","uid":1691748,"ip_address":"","ucode":"2A19E74F24D459","user_header":"https://static001.geekbang.org/account/avatar/00/19/d0/64/cb6c25fe.jpg","comment_is_top":false,"comment_ctime":1573482293,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"1573482293","product_id":100039001,"comment_content":"有些人看源码的时候，经常会遇到看不懂、看不下去的问题。这不就是我么，努力跟随学习，早日修复我这个看不懂源码，看代码慢的技能bug。","like_count":0},{"had_liked":false,"id":150133,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1573466691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573466691","product_id":100039001,"comment_content":"以前学的看完就忘，跟实际结合不起来。有印象的就是Java I&#47;O 的 装饰器模式，还有各种以Builder结尾的构建器模式。好像设计模式分几大类，创建型等等","like_count":0},{"had_liked":false,"id":150084,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1573459849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573459849","product_id":100039001,"comment_content":"代码规范的用处：1.省的被人瞎J⑧扯过来取笑:代码都写成这样，一看就是菜<br>    2.提高复杂代码的设计和开发能力：平常都是写的一些功能代码，到重新开始设计和写的时候就不知道怎么设计，怎么去干什么了<br>    3.让读源码、学框架事半功倍：主流框架一般都会遵守这些规则，你知道了这些规则跟着走就更顺了<br><br>既然是常用的设计模式，那就是大家都承认都在用的好的模式。学习别人优秀的设计模式远比自己yy出一个要更快更好的多","like_count":0},{"had_liked":false,"id":149933,"user_name":"leejunhui","can_delete":false,"product_type":"c1","uid":1188627,"ip_address":"","ucode":"A957C0034B9F4D","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/13/6ba35b43.jpg","comment_is_top":false,"comment_ctime":1573434002,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573434002","product_id":100039001,"comment_content":"说来惭愧，在四年开发经验中，对于设计模式确实是忽略了，日常使用偏多的可能就是单例，工厂模式了","like_count":0},{"had_liked":false,"id":149826,"user_name":"Tyro","can_delete":false,"product_type":"c1","uid":1141696,"ip_address":"","ucode":"48B27982321578","user_header":"https://static001.geekbang.org/account/avatar/00/11/6b/c0/790d88ad.jpg","comment_is_top":false,"comment_ctime":1573395357,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573395357","product_id":100039001,"comment_content":"重要性：<br>1.  减少重复代码；<br>2. 使代码逻辑更加清晰；<br>3. 看源码<br><br>项目开发中：<br>1.  策略模式，工厂，不同的数据依据不同的规则导入数据库 （共有的导入抽提了出来），工厂协同完成","like_count":0},{"had_liked":false,"id":149823,"user_name":"刘洋","can_delete":false,"product_type":"c1","uid":1275580,"ip_address":"","ucode":"9C4DEDDF6CB7DB","user_header":"https://static001.geekbang.org/account/avatar/00/13/76/bc/0e8e0ef8.jpg","comment_is_top":false,"comment_ctime":1573394144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573394144","product_id":100039001,"comment_content":"用过单例模式，策略模式和建造者模式","like_count":0},{"had_liked":false,"id":149810,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1025030,"ip_address":"","ucode":"62A89FD460827A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/06/cf6b6d0f.jpg","comment_is_top":false,"comment_ctime":1573385530,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573385530","product_id":100039001,"comment_content":"我觉得很多同学应该和我一样，听说过设计模式很重要，然后就会个单例。<br><br>其实吧，别人吐槽我代码写的烂倒是不可怕，可怕的是写得烂也没人告诉你，大家一起烂。<br><br>还有读开源框架的源码，我从来没体会到小争哥说的，优美这种感觉，有的只是焦头烂额，连猜带蒙。<br><br>我先承认自己很差吧，接下来就跟着学，虽然我这不敢立什么豪言壮语，尽力吧。","like_count":0},{"had_liked":false,"id":149733,"user_name":"narry","can_delete":false,"product_type":"c1","uid":1033576,"ip_address":"","ucode":"B8010C1DE39D08","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/68/7afb7304.jpg","comment_is_top":false,"comment_ctime":1573359624,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573359624","product_id":100039001,"comment_content":"软件之所以称之为软件，就在于易于扩展，满足不断变化，所以我们必须关注于软件的演进能力，而在实际的开发过程中，我们由于各种原因常常只重视了软件的行为价值，而忽视了其架构价值，逐渐软件也变成了“硬件”，如果说solid原则是道，那设计模式就是术，学会了术，也会加深对道的理解","like_count":0},{"had_liked":false,"id":149684,"user_name":"Geek_4e58c9","can_delete":false,"product_type":"c1","uid":1541413,"ip_address":"","ucode":"C1507B6BCCF4F0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/FpudwHOvLaFheC6EiboZsfEQGtvEWykGNTCC3AUM7L9sReWZ7TVicJ73uV1sZ3jbRibYj2NasLHAkLmn7p8FkW2Cg/132","comment_is_top":false,"comment_ctime":1573318945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573318945","product_id":100039001,"comment_content":"广度到深度，使用设计模式是借鉴前人走过的坑，避免自己也重复走坑","like_count":0},{"had_liked":false,"id":149628,"user_name":"学明","can_delete":false,"product_type":"c1","uid":1033677,"ip_address":"","ucode":"1A499A2557F74D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c5/cd/7d3e4355.jpg","comment_is_top":false,"comment_ctime":1573292377,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573292377","product_id":100039001,"comment_content":"个人理解设计模式最重要的是抽象，拆分，分层，解藕。<br>把问题做现实抽象类比，然后拆分成多个模块来解决，横块间纵向少量分层（单向依赖），横向完全解藕。","like_count":0},{"had_liked":false,"id":149600,"user_name":"thomas-fan","can_delete":false,"product_type":"c1","uid":1258997,"ip_address":"","ucode":"CCFB55E1CC0C26","user_header":"https://static001.geekbang.org/account/avatar/00/13/35/f5/5283d5a2.jpg","comment_is_top":false,"comment_ctime":1573288695,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573288695","product_id":100039001,"comment_content":"看各类框架的源码不掌握好设计模式真容易越看越迷糊，希望这次学习能看懂写出高质量代码","like_count":0},{"had_liked":false,"id":149566,"user_name":"enjoylearning","can_delete":false,"product_type":"c1","uid":1000237,"ip_address":"","ucode":"DCAF8538DEA277","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/2d/af86d73f.jpg","comment_is_top":false,"comment_ctime":1573274788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573274788","product_id":100039001,"comment_content":"设计模式应用的难点在于两个方面：1是如何发现遗留代码中的设计模式，2是每种设计模式应用的场景。设计模式很重要，但有时人就是犯懒，觉得抽象设计模式很浪费时间。代码中满屏的条件判断和长长的函数参数，还有同事之间沟通的时候如果对设计模式很熟悉将会提高沟通效率。","like_count":0},{"had_liked":false,"id":149527,"user_name":"codecly","can_delete":false,"product_type":"c1","uid":1178615,"ip_address":"","ucode":"65FBA9A4BDFCDF","user_header":"https://static001.geekbang.org/account/avatar/00/11/fb/f7/3e94e55d.jpg","comment_is_top":false,"comment_ctime":1573267432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573267432","product_id":100039001,"comment_content":"一直觉得设计模式很重要，但是每次都都没有静下心来完整的学习，很多设计模式傻傻的分不清弄混<br>重要性：<br>1. 可以提高代码的可维护性<br>2. 开源代码中内涵了很多设计模式、设计思想，学懂设计模式可以更容易看懂开源框架，学习框架的设计思想<br>3. 可以和同行更容易交流","like_count":0},{"had_liked":false,"id":149485,"user_name":"Fun","can_delete":false,"product_type":"c1","uid":1145502,"ip_address":"","ucode":"5D89BA4C678785","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJdUGdEj3R25CrYqibPibYibibRicqUfyL4aTTPbMagyywjKMhXGZE37RTe7lEdvC4DibvtYpzg8zXvt9HQ/132","comment_is_top":false,"comment_ctime":1573233162,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573233162","product_id":100039001,"comment_content":"# day 5.<br>重新刷了几篇总结，聊聊我对设计模式的看法。<br>设计模式自然是属于那种不明觉厉的范畴的。其实，如果真的每个人有机会从头至尾参与哪怕一种设计模式的应用（从需求分析，讨论代码实现，搭建代码骨架，慢慢补充完善代码，遇到问题，单元测试，遇到新问题，思考重构，最后决定采用某种设计模式），我想你就会恍然大悟，原来在这种场景下这样写的代码会如此干净，漂亮而可靠，你由衷地生出一种自信的会心的笑意。<br>这大概就是我对设计模式之美的理解了。","like_count":0},{"had_liked":false,"id":149476,"user_name":"努力努力再努力m","can_delete":false,"product_type":"c1","uid":1644369,"ip_address":"","ucode":"9DD9E9C2988FFC","user_header":"https://static001.geekbang.org/account/avatar/00/19/17/51/3e13dc0c.jpg","comment_is_top":false,"comment_ctime":1573228848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573228848","product_id":100039001,"comment_content":"看法：学好设计模式，就是为了能看懂别人写的好的代码，然后自己也能写出高质量的代码。<br>应用场景：在项目中单例，工厂，这些简单的设计模式，学习设计模式，也是为了能看懂框架源码。","like_count":0},{"had_liked":false,"id":149460,"user_name":"林黛玉","can_delete":false,"product_type":"c1","uid":1266620,"ip_address":"","ucode":"F8507366012881","user_header":"https://static001.geekbang.org/account/avatar/00/13/53/bc/72baeee8.jpg","comment_is_top":false,"comment_ctime":1573224085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573224085","product_id":100039001,"comment_content":"概念：设计模式是什么？<br>回答：设计模式「design pattern」代表最佳实践，是众多开发人员长期探索、试错、总结。","like_count":0},{"had_liked":false,"id":149456,"user_name":"极客时间","can_delete":false,"product_type":"c1","uid":1015564,"ip_address":"","ucode":"AF7565BB5EF164","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/0c/392ce255.jpg","comment_is_top":false,"comment_ctime":1573223448,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573223448","product_id":100039001,"comment_content":"订阅发布模式 单例模式就这俩 其他的模棱两可","like_count":0},{"had_liked":false,"id":149417,"user_name":"Geek_129da0","can_delete":false,"product_type":"c1","uid":1734684,"ip_address":"","ucode":"9597A7E2899C6A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/x54MaKxBBJj0Zlia7YBECzKzwGOX3rUSnVQAkJ9HYyFVic3K0xiaoUwThr4Ou4PRy6NdcpQTFb3NHo2H3Mngn78JA/132","comment_is_top":false,"comment_ctime":1573214064,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573214064","product_id":100039001,"comment_content":"模板模式，单例模式，责任链模式","like_count":0},{"had_liked":false,"id":149393,"user_name":"Lorne.Z","can_delete":false,"product_type":"c1","uid":1109854,"ip_address":"","ucode":"8C67D82246A3AC","user_header":"https://static001.geekbang.org/account/avatar/00/10/ef/5e/381d043b.jpg","comment_is_top":false,"comment_ctime":1573208944,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573208944","product_id":100039001,"comment_content":"说的太对了 ---&gt;  投资要趁早，这样我们才能尽早享受复利。同样，有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读。这样在你后面的生活、工作、学习中，才能一直都发挥作用。不要等到好多年后，看到了，才恍然大悟，后悔没有早点去学、去看。<br>需要学习的太多了","like_count":0},{"had_liked":false,"id":149322,"user_name":"小陳仔","can_delete":false,"product_type":"c1","uid":1245074,"ip_address":"","ucode":"8D5B6DB671E9FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/92/73d4ccd1.jpg","comment_is_top":false,"comment_ctime":1573192637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573192637","product_id":100039001,"comment_content":"身为前端工程师的我，目前只用过工厂模式和 发布与订阅模式，家里也的确有一摞书，有的还未开封，经常看完就忘记，后来发现理论与实践必须要相互结合，才能更好的理解与运用。","like_count":0},{"had_liked":false,"id":149317,"user_name":"Clay","can_delete":false,"product_type":"c1","uid":1330248,"ip_address":"","ucode":"EAEBCB16787116","user_header":"https://static001.geekbang.org/account/avatar/00/14/4c/48/1b177245.jpg","comment_is_top":false,"comment_ctime":1573190827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573190827","product_id":100039001,"comment_content":"老鸟来学习:<br><br>现在每天主要也是在重构过往烂代码，或者写一些团队可以用到的工具，偶尔review同事代码。因为作为技术leader，技术是一线能力，不能放下，所以一直这么坚持下来，但同是也在扩展自己横向能力，例如管理能力等。<br>另外给我启发的是: 设计模式能提高复杂代码的设计和开发能力，这个总结很到位，很喜欢。<br><br>讨论：<br>1. 设计模式重要性：个人觉得如果需要开发中大型后台可以深入学习设计模式，不需要的可以简单理解学习就好（学无止尽，专注某一两个领域即可）<br>2. 没系统学过设计模式，说说最近优化系统懂得了什么是好的设计思想，如何设计好一个系统？<br>- 有灵魂的目录结构，给人一眼就能看出其系统设计核心<br>- 每个目录的设计理念是什么，弄清楚这些基本就能够理解这个系统<br>有点晚了，先到这里，跑题了勿怪","like_count":0},{"had_liked":false,"id":149296,"user_name":"罗炜昊","can_delete":false,"product_type":"c1","uid":1684357,"ip_address":"","ucode":"EEC180F814D1B3","user_header":"https://static001.geekbang.org/account/avatar/00/19/b3/85/9d3c685c.jpg","comment_is_top":false,"comment_ctime":1573184684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573184684","product_id":100039001,"comment_content":"我是某985硕士毕业，现在在某厂做算法工程师。在学校里，涉及到项目，导师都是让博士师兄开发基础类，里面就有一些继承，接口，我们硕士就是开发功能类，和导师讨论好用啥启发式算法，或者求解器求解如何建模，然后开发，然后项目结束，那时，用师兄开发的基础类可爽了，噼里啪啦得用。后面来了公司，没有师兄给你开发基础类了，遇见一些小项目又是自己独立开发算法，做过企业项目的都知道，业务自己都搞不清需求是啥，往往都是和你说个背景，你去开发，他看结果，然后开始挤牙膏，不断的修改需求，你就要不断的修改算法。如果基础类、耦合等做不好，真的很痛苦，比如我目前就是，开始设计时不清楚要不要做继承，也不知道该不该做接口，到了开发到后面，才感觉当时应该做继承的，这时改又很麻烦，所以急需设计模式补课呀！！！","like_count":0},{"had_liked":false,"id":149257,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1573180067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573180067","product_id":100039001,"comment_content":"应对面试中的设计模式相关问题；告别写被人吐槽的烂代码；提高复杂代码的设计和开发能力；让读源码、学框架事半功倍；为你的职场发展做铺垫。<br>看了这五点，还有什么理由不订阅呢？","like_count":0},{"had_liked":false,"id":149248,"user_name":"李文杰","can_delete":false,"product_type":"c1","uid":1504021,"ip_address":"","ucode":"1C745DF9049408","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/15/4952e98e.jpg","comment_is_top":false,"comment_ctime":1573178584,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573178584","product_id":100039001,"comment_content":"重要性可能主要体现在面试中，懂一点，深究起来，就打不出来啦。","like_count":0},{"had_liked":false,"id":149243,"user_name":"薯条","can_delete":false,"product_type":"c1","uid":1697454,"ip_address":"","ucode":"48529989A2C51F","user_header":"https://static001.geekbang.org/account/avatar/00/19/e6/ae/73a52bb9.jpg","comment_is_top":false,"comment_ctime":1573178252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573178252","product_id":100039001,"comment_content":"安卓开发。用单例模式封装部分第三方库；静态代理解决重复点击问题；观察者模式;Builder模式创建公共组件。<br>最近看Retrofit源码，总结其用到设计模式：<br>Retrofit创建 Builder模式；Retrofit内部维护多个工厂集合：ConverterAdapter CallAdapter；适配器模式","like_count":0},{"had_liked":false,"id":149231,"user_name":"对影成三人","can_delete":false,"product_type":"c1","uid":1054145,"ip_address":"","ucode":"CFFD3B70E82804","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/c1/ece966c1.jpg","comment_is_top":false,"comment_ctime":1573177081,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573177081","product_id":100039001,"comment_content":"一直觉得设计模式很重要（像数据结构，算法，这些与语言无关的通用知识），也有买书看，看博客，但是总感觉自己只知道点皮毛，而且工作中用的少，隔一段时间又忘记了，感觉陷入一个奇怪的循环。所以很期待这个课程。","like_count":0},{"had_liked":false,"id":149193,"user_name":"开心学习","can_delete":false,"product_type":"c1","uid":1215134,"ip_address":"","ucode":"DCC050F6A8840B","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/9e/502e5f14.jpg","comment_is_top":false,"comment_ctime":1573174669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573174669","product_id":100039001,"comment_content":"设计模式平时只是会在面试之前，在网上看一些临时准备准备，实际工作中除了CRUD确实很少用到。<br><br>单例模式，工厂模式等，只是简单了解，不会实际使用。<br><br>希望跟老师一起攻克设计模式。<br><br>非常期待!!!","like_count":0},{"had_liked":false,"id":149109,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1573142671,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573142671","product_id":100039001,"comment_content":"设计模式用得恰到好处，代码就会很舒服，用得不合适，代码就会过于复杂，这真的是可以训练出来的吗？<br><br>程序员的核心产出就是代码，代码在精不在多，有点技术洁癖是必须的。<br><br>之前的项目中使用职责链模式处理用户登录接口上的一连串功能；现在的项目里使用模板模式处理通用的二、三方服务调用；使用最多的是策略设计模式，用来屏蔽掉具体实现的差异","like_count":0},{"had_liked":false,"id":149093,"user_name":"Geekwangc","can_delete":false,"product_type":"c1","uid":1591256,"ip_address":"","ucode":"C7CF64DF3E3EAA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/phlKhN4SKv2dic5Sr6fE4qWILbkDUjCQ2xhdiboM3UWSib4ulj3u7vl9OX4tylQTH8DfXWYELia7ry2WJ6PReowAVw/132","comment_is_top":false,"comment_ctime":1573140138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573140138","product_id":100039001,"comment_content":"工作五年，感觉不到任何进步，从现在开始补补基础","like_count":0},{"had_liked":false,"id":149033,"user_name":"Joie","can_delete":false,"product_type":"c1","uid":1163808,"ip_address":"","ucode":"73A66DF56972F4","user_header":"https://static001.geekbang.org/account/avatar/00/11/c2/20/fb3861e8.jpg","comment_is_top":false,"comment_ctime":1573129390,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573129390","product_id":100039001,"comment_content":"在设计测试框架的过程中，发现设计模式比算法还要重要，一个高可用，易扩展的框架真的会事半功倍。","like_count":0},{"had_liked":false,"id":148974,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1573120125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573120125","product_id":100039001,"comment_content":"知道什么时候不用设计模式也是一个很重要的问题，希望老师也能谈谈反模式的话题。","like_count":0},{"had_liked":false,"id":148929,"user_name":"啥也不会","can_delete":false,"product_type":"c1","uid":1040584,"ip_address":"","ucode":"2E0F593B237C59","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e0/c8/4ad13219.jpg","comment_is_top":false,"comment_ctime":1573112279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573112279","product_id":100039001,"comment_content":"1.聊一聊你对设计模式相关知识的重要性的看法；<br>设计模式的使用可以极高的提高系统的可扩展性和可维护性。<br>2.在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>我用过策略模式，用以解决同一行为的不同实现的方式，比如有的场景下去查缓存、有的去查数据库，根据场景不同，加载不同的策略。","like_count":0},{"had_liked":false,"id":148917,"user_name":"Fan","can_delete":false,"product_type":"c1","uid":1115232,"ip_address":"","ucode":"3BF28670FD9407","user_header":"https://static001.geekbang.org/account/avatar/00/11/04/60/64d166b6.jpg","comment_is_top":false,"comment_ctime":1573109144,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573109144","product_id":100039001,"comment_content":"打个卡。","like_count":0},{"had_liked":false,"id":148911,"user_name":"松间明月447","can_delete":false,"product_type":"c1","uid":1273227,"ip_address":"","ucode":"34A81A93FA6BCE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epu2ts9GReslOVerQhUsibQxfzU89VpeNCTuZGdjr7G5kfl4fhNt9qibJgKJh9Mr171yhy96H0TSGjQ/132","comment_is_top":false,"comment_ctime":1573108394,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573108394","product_id":100039001,"comment_content":"默默地打卡,没有用过设计模式","like_count":0},{"had_liked":false,"id":148909,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1573107958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573107958","product_id":100039001,"comment_content":"太重要了，即使是根据已有的框架开发一般的业务逻辑，也是很有用的。平常的业务开发不一定会用到某些设计模式，但是围绕着设计模式的思想，原则是非常实用的。<br>在第一次看完一本设计模式的书后，发现有些新学的设计模式自己已经在项目中用到了，像适配器模式，碰到某些写的垃圾的源代码，在不改变源代码的情况下将其封装起来，然后定义一些明确的接口，业务模块就不需要跟这些垃圾代码打交道了。<br><br>","like_count":0},{"had_liked":false,"id":148888,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1573102959,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1573102959","product_id":100039001,"comment_content":"用的最多的就是单例，工厂，策略，模板，其他的一些没有用过的都还回去了，还是理解不够深刻没有用到实际开发中😂","like_count":0},{"had_liked":false,"id":148886,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1573102321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573102321","product_id":100039001,"comment_content":"A1: 技术提升过程中绕不过去的点，而且确实有用。<br>A2: 仅限使用，Builder模式构建dialog；Adpter模为recyclerview填充item；单例模式构建https等工具类等等","like_count":0},{"had_liked":false,"id":148842,"user_name":"嗨","can_delete":false,"product_type":"c1","uid":1248627,"ip_address":"","ucode":"5AC0E0BACF2889","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/73/68d063b3.jpg","comment_is_top":false,"comment_ctime":1573093987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573093987","product_id":100039001,"comment_content":"非计算机专业的开发者，没系统学习过设计模式，开发中会碰到把代码堆在一起不好，但又不知改如何设计，希望学习完本专栏能解决这个问题。项目中有用到过单例模式、工厂模式、抽象工厂模式、组合模式等。","like_count":0},{"had_liked":false,"id":148831,"user_name":"不与三季人说","can_delete":false,"product_type":"c1","uid":1693164,"ip_address":"","ucode":"A3F03832309FDD","user_header":"https://static001.geekbang.org/account/avatar/00/19/d5/ec/3d6e7ea7.jpg","comment_is_top":false,"comment_ctime":1573092779,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573092779","product_id":100039001,"comment_content":"学习就是潜移默化的过程，间接的提高技术<br><br>应对面试中设计模式的问题，告别烂代码，提高代码设计和开发能力。<br><br>设计模式的重要性是毋庸置疑的。我目前所在的公司项目是一个七八年前的老平台，所用的技术无论是架构还是代码都让我看了恨不得马上走人，公司也意识到了这个问题所以准备对整个平台进行重新设计，我觉得这对我来说也是一个很好的机会，然而我发现我除了吐槽别人的代码写的不行之外，换我自己去写，可能和别人也差不多，因为让我去重新设计这样的一个系统，对我来说也是不知如何下手，不知道怎么设计模块，不知道怎么设计类，不知道怎么把业务细化到代码上还能让代码看上去优美，可复用性强，可扩展性强，这些对我来说都是问题，如果我对设计模式有了很深的认识和了解，我想对我的现阶段工作以及以后的发展都肯定是非常有利的，所以我果断订阅王争老师的口碑非常好的专栏，跟着专栏的更新去坚持学习，每日打卡，写留言，作总结，要让自己变得更优秀。！","like_count":0},{"had_liked":false,"id":148824,"user_name":"听雨声淅沥","can_delete":false,"product_type":"c1","uid":1247350,"ip_address":"","ucode":"C975EE69A5D103","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/76/350f19ea.jpg","comment_is_top":false,"comment_ctime":1573091744,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573091744","product_id":100039001,"comment_content":"没有最好的设计模式  只有更加合适的<br>见招拆招  无招胜有招 <br>多多使用组合拳的威力","like_count":0},{"had_liked":false,"id":148821,"user_name":"长夏江村","can_delete":false,"product_type":"c1","uid":1608879,"ip_address":"","ucode":"79921B6F7760B2","user_header":"https://static001.geekbang.org/account/avatar/00/18/8c/af/debec40c.jpg","comment_is_top":false,"comment_ctime":1573090903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573090903","product_id":100039001,"comment_content":"之前买了本关于设计模式的书，发现是除了封面是中文其余全是英文，硬着头皮读了几章似懂非懂，希望在这重新开始。","like_count":0},{"had_liked":false,"id":148792,"user_name":"kooffe","can_delete":false,"product_type":"c1","uid":1140905,"ip_address":"","ucode":"87BB4D1E925736","user_header":"","comment_is_top":false,"comment_ctime":1573087517,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573087517","product_id":100039001,"comment_content":"打卡学习中！！！","like_count":0},{"had_liked":false,"id":148709,"user_name":"Geek_kevin","can_delete":false,"product_type":"c1","uid":1301274,"ip_address":"","ucode":"03B0253CA59582","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/1a/30201f1a.jpg","comment_is_top":false,"comment_ctime":1573052361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573052361","product_id":100039001,"comment_content":"1.设计模式的重要性不言而喻,是写,好的,干净,整洁的代码基础,不懂设计模式,你的代码有可能就是充斥着大量的if else,冗余度高,也非常不利于团队协作。<br>2.目前在工作中用到的设计模式比较多的就是单例和工厂,单例和工厂用的场景，主要就是数据库的访问类相关,还用到了策略的模式,主要用于业务的不同逻辑处理,避免了代码中充斥着大量的if else.","like_count":0},{"had_liked":false,"id":148696,"user_name":"😚 46","can_delete":false,"product_type":"c1","uid":1433535,"ip_address":"","ucode":"EED0EBBBF80A43","user_header":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","comment_is_top":false,"comment_ctime":1573050723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573050723","product_id":100039001,"comment_content":"1. 能够从容的写出优雅的代码，提高代码的可读性和扩展性。有效的提高编码质量，拓宽设计思路。<br>2.公司业务做点餐公众号，使用工厂+ 策略 +装饰者模式重构了产品列表查询，不同的门店的营业时间各不相同，库存低于阈值装饰相应的文案。","like_count":0},{"had_liked":false,"id":148682,"user_name":"Y024","can_delete":false,"product_type":"c1","uid":1018056,"ip_address":"","ucode":"397126D2E17997","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/c8/ae476935.jpg","comment_is_top":false,"comment_ctime":1573048763,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1573048763","product_id":100039001,"comment_content":"Day002 01<br>1.设计模式是对一些常见场景解决方案的抽象总结，便于你更好的设计编码。<br>2.常用单例，手撕日志类。工厂，不同数据库。","like_count":0},{"had_liked":false,"id":148676,"user_name":"alls well","can_delete":false,"product_type":"c1","uid":1072439,"ip_address":"","ucode":"8E3EB5A3DF6E0D","user_header":"https://static001.geekbang.org/account/avatar/00/10/5d/37/8261fc68.jpg","comment_is_top":false,"comment_ctime":1573047622,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573047622","product_id":100039001,"comment_content":"嵌入式设备，需求繁杂多变，设备交互兼容性定制很多，功能不够支撑使用设计模式，在此先找思想灵感，学习如何解耦与兼容性强","like_count":0},{"had_liked":false,"id":148666,"user_name":"大姨夫斯基","can_delete":false,"product_type":"c1","uid":1519521,"ip_address":"","ucode":"79989AC4DD36FE","user_header":"https://static001.geekbang.org/account/avatar/00/17/2f/a1/5f32ada6.jpg","comment_is_top":false,"comment_ctime":1573046607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573046607","product_id":100039001,"comment_content":"安卓开发  主要用单例 工厂 builder 责任链 adapter 代理 模板等","like_count":0},{"had_liked":false,"id":148652,"user_name":"Zer01ne","can_delete":false,"product_type":"c1","uid":1661564,"ip_address":"","ucode":"71ED3A6DD5AB8A","user_header":"https://static001.geekbang.org/account/avatar/00/19/5a/7c/990cf251.jpg","comment_is_top":false,"comment_ctime":1573044992,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573044992","product_id":100039001,"comment_content":"看过一点设计模式，但平时写代码的时候，没有用设计模式的思想，不知道怎么运用，这也是我很苦恼的","like_count":0},{"had_liked":false,"id":148642,"user_name":"尚寂清","can_delete":false,"product_type":"c1","uid":1735856,"ip_address":"","ucode":"FA1D9D6844BC2E","user_header":"","comment_is_top":false,"comment_ctime":1573043354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573043354","product_id":100039001,"comment_content":"经常用到设计模式有：单例模式、观察者模式、模板方法模式和工厂模式","like_count":0},{"had_liked":false,"id":148622,"user_name":"马什么梅","can_delete":false,"product_type":"c1","uid":1665192,"ip_address":"","ucode":"251B100AC229EE","user_header":"https://static001.geekbang.org/account/avatar/00/19/68/a8/1fa41264.jpg","comment_is_top":false,"comment_ctime":1573039399,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573039399","product_id":100039001,"comment_content":"设计模式看了又忘,记不住","like_count":0},{"had_liked":false,"id":148601,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1573036796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573036796","product_id":100039001,"comment_content":"哈哈，设计模式还真的是很少使用…<br>基本业务代码。<br>学设计模式作用 1面试 2代码质量 3源码阅读","like_count":0},{"had_liked":false,"id":148578,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1573032889,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573032889","product_id":100039001,"comment_content":"用过简单的单例模式，针对不用的功能创建线程池的时候，保证每个功能只能创建一次该线程池","like_count":0},{"had_liked":false,"id":148576,"user_name":"张洋","can_delete":false,"product_type":"c1","uid":1182914,"ip_address":"","ucode":"549BE5DEEF8417","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/c2/bad34a50.jpg","comment_is_top":false,"comment_ctime":1573032808,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573032808","product_id":100039001,"comment_content":"基础<br><br>- 直接转化成开发的生产力<br>  - 数据机构与算法（代码的效率）<br>  - 设计模式（代码的质量【可扩展、可读、可维护性等等】）<br>- 间接转化成开发的生产力的<br>  - 操作系统、组成原理、编译原理等等。<br>  - 如果学会这些立马去编程序，你会发现并并没有什么效果，但是当你去阅读源码和一些工具的底层时，会觉得特别轻松。提升的事**内力**。<br><br><br><br>学习设计模式的好处<br><br>- 应对面试<br>- 告别低质量的代码<br>- 提高复杂代码的设计和开发能力<br>  - 这点我有着很深的印象，当时部门领导让我写一个组件，更能我直接给实现了，但是代码仅仅是一大堆，没有分层什么的根本也没用到设计模式，最后少不了被一通怼，这么复杂的系统你就这样完成了，我怀疑你写的code漏洞百出。<br>- 阅读源码框架事半功倍<br>- 职场发展做铺垫<br>  - 代码是一个程序员的根本，代码都写不 优雅，怎么成为一个技术大牛。<br>  - leader 的培养新人责任和code review work<br>  - 技术leader 怼项目的质量需要负责的","like_count":0},{"had_liked":false,"id":148531,"user_name":"Warn","can_delete":false,"product_type":"c1","uid":1465310,"ip_address":"","ucode":"F2F7FCDB0940D0","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/de/152f1c2c.jpg","comment_is_top":false,"comment_ctime":1573026392,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573026392","product_id":100039001,"comment_content":"1、设计模式，个人感觉：在代码方面更多的目的性是架构，耦合度和扩展性；在个人方面更多的目的性是底气，不管对内还是对外。<br>2、前端开发这些年，真没底气说用过什么设计模式。","like_count":0},{"had_liked":false,"id":148525,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1573024828,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573024828","product_id":100039001,"comment_content":"为什么要学习设计模式？<br><br>设计模式讲的是如何写出可扩展、可读、可维护的高质量代码，所以，它们跟平时的编码会有直接的关系，也会直接影响到你的开发能力。<br><br>以下几点是笔记+自己的思考。<br> <br>1 、告别被人被人吐槽得烂代码<br>我想作为程序员，代码是自己的名片，是自己的脸面，要学会如何优雅得写代码。不甘做一个低级码农是每个程序员的自我要求。<br><br>2、应对面试<br><br>我想不用去死记硬背网上得面试题，理解&amp;会用才是王道。<br><br>3、提高复杂代码得设计和开发能力<br>我想会写代码的程序员一抓一大把，但是未必每个人都能应对业务场景超级复杂的系统的设计，设计不好的直接后果就是写出来的代码仅仅能用而已，健壮性就别谈了。<br><br>4、让都源码 学框架事半功倍<br>几度看spring源码都看不下去，我想没有基础知识做支撑，它们真的只是一堆代码而已，看不出优雅之处，学设计模式的目的就是为了培养自己对程序的审美能力。<br><br>5、为职场中得发展做铺垫<br>我想机会不会经常有，偶尔来一两次时希望自己能抓住，不看过往，从做好每一件小事，学好基础开始准备。","like_count":0},{"had_liked":false,"id":148504,"user_name":"PB","can_delete":false,"product_type":"c1","uid":1711529,"ip_address":"","ucode":"4F28594635BC7D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1d/a9/a108318b.jpg","comment_is_top":false,"comment_ctime":1573020492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573020492","product_id":100039001,"comment_content":"有同感，平时开发的时候觉得还能应付，但到了开发独立模块，或者一个全新的package或者service的时候就手足无措，不知道如何写出易扩展、易用、易维护的代码","like_count":0},{"had_liked":false,"id":148499,"user_name":"星期八","can_delete":false,"product_type":"c1","uid":1185504,"ip_address":"","ucode":"34A37F73A48E7F","user_header":"https://static001.geekbang.org/account/avatar/00/12/16/e0/7abad3cc.jpg","comment_is_top":false,"comment_ctime":1573019939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573019939","product_id":100039001,"comment_content":"不说面试什么的，就是自己写出来，自己看起来舒服，别人看的懂，好维护，也很重要，就是要好看！！！至今就用过单例，原型，工厂，模板，策略，最多也就用了个享元模式","like_count":0},{"had_liked":false,"id":148489,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1573017950,"is_pvip":false,"replies":[{"id":"57175","content":"加餐文章有讲到 别急","user_name":"作者回复","comment_id":148489,"uid":"1190123","ip_address":"","utype":1,"ctime":1573025689,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1573017950","product_id":100039001,"comment_content":"设计模式的重要性不用多说 自己体会就好 但是烂代码真的很神烦 老师 现在刚接触一个项目 我个人感觉写的蛮烂的 开发起来各种坑 迭代时间紧 请问 怎么破","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501877,"discussion_content":"都可以啊，用中文也没问题，只要公司达成一致就可以，别有的用中文，有的用英文","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595291566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148488,"user_name":"慕容引刀","can_delete":false,"product_type":"c1","uid":1016308,"ip_address":"","ucode":"714E94AEB42D7D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/81/f4/d92c7ef5.jpg","comment_is_top":false,"comment_ctime":1573017850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573017850","product_id":100039001,"comment_content":"最常见的就是代码中无数的if else else else else。。。，模板模式或策略模式都可以帮助解决。","like_count":0},{"had_liked":false,"id":148484,"user_name":"阿童木","can_delete":false,"product_type":"c1","uid":1148479,"ip_address":"","ucode":"90B3294D6ED984","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/3f/b1d64e5a.jpg","comment_is_top":false,"comment_ctime":1573017044,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573017044","product_id":100039001,"comment_content":"1、展现自身能力的利器<br>2、评判他人的原则标准","like_count":0},{"had_liked":false,"id":148473,"user_name":"闪耀之作r","can_delete":false,"product_type":"c1","uid":1712458,"ip_address":"","ucode":"11929B7EF47D4B","user_header":"https://static001.geekbang.org/account/avatar/00/1a/21/4a/05c36143.jpg","comment_is_top":false,"comment_ctime":1573014982,"is_pvip":false,"replies":[{"id":"57176","content":"现在学最好，会编程即可。两者不需要结合。不需要单独学，设计模式跟编程语言没太大关系。","user_name":"作者回复","comment_id":148473,"uid":"1190123","ip_address":"","utype":1,"ctime":1573026332,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1573014982","product_id":100039001,"comment_content":"设计模式什么时候学最好？需要什么基础，有先后顺序分吗？数据结构与算法怎么和设计模式相结合，设计模式不只是java才有，其他的也有，其他的都需要单独学习吗","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473502,"discussion_content":"现在学最好，会编程即可。两者不需要结合。不需要单独学，设计模式跟编程语言没太大关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573026332,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148464,"user_name":"hao-kuai","can_delete":false,"product_type":"c1","uid":1272354,"ip_address":"","ucode":"DFDFDDDBA4503C","user_header":"https://static001.geekbang.org/account/avatar/00/13/6a/22/527904b2.jpg","comment_is_top":false,"comment_ctime":1573012035,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573012035","product_id":100039001,"comment_content":"理解：<br>个人感觉设计模式是前辈们在应对某一类问题时候总结出来的最佳实践，类似于数学公式，你可以不用，但是用了能够提升效率<br>重要性：<br>1、设计模式是最佳实践，可以帮你大概率规避不必要坑<br>2、设计模式提供了方法论、一个工具，面对一个问题提供了一个切入点<br>3、设计模式能够促使你做好功能划分、功能边界，方便以后的扩展、问题定位<br>4、设计模式同时还提供了程序员们沟通的术语，可以不言而喻<br>使用经验：<br>本身是OC语言的iOS开发，最主要的UIApplcation类就是单例，最常见的页面UIViewController是遵守MVC，最基本的页面元素UIView应用了工厂设计模式，最熟悉的UITableView用了委托代理；后来接触React前端框架接触类MVVM，它使用组合替换了继承；开发过程中在框架中进行业务开发，设计模式到处都是。","like_count":0},{"had_liked":false,"id":148444,"user_name":"改变自己@","can_delete":false,"product_type":"c1","uid":1582711,"ip_address":"","ucode":"87184DEA07D68B","user_header":"https://static001.geekbang.org/account/avatar/00/18/26/77/ddbad55b.jpg","comment_is_top":false,"comment_ctime":1573008139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573008139","product_id":100039001,"comment_content":"之前学了一遍设计模式，感觉学完之后，有种强行使用的感觉，遇见问题所有的模式拿来套用一下，解决问题感觉没有针对性，不能很好的解决问题。","like_count":0},{"had_liked":false,"id":148435,"user_name":"钢！","can_delete":false,"product_type":"c1","uid":1246834,"ip_address":"","ucode":"22155C1F87AC72","user_header":"https://static001.geekbang.org/account/avatar/00/13/06/72/d5b570e1.jpg","comment_is_top":false,"comment_ctime":1573006970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573006970","product_id":100039001,"comment_content":"自己都不愿意看自己写的流水线式代码，学学设计模式让自己的代码更优雅，易扩展。","like_count":0},{"had_liked":false,"id":148431,"user_name":"攀登者","can_delete":false,"product_type":"c1","uid":1074549,"ip_address":"","ucode":"FC26A8AC504C5E","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/75/9c0b9b5b.jpg","comment_is_top":false,"comment_ctime":1573006342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573006342","product_id":100039001,"comment_content":"20191106 常用有单例、工厂、代理等，没有仔细分析过","like_count":0},{"had_liked":false,"id":148421,"user_name":"搅局","can_delete":false,"product_type":"c1","uid":1733851,"ip_address":"","ucode":"5664F01ADDAA37","user_header":"https://static001.geekbang.org/account/avatar/00/1a/74/db/164c9f7b.jpg","comment_is_top":false,"comment_ctime":1573005544,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573005544","product_id":100039001,"comment_content":"1. 聊一聊你对设计模式相关知识的重要性的看法；<br>作为一个编程小白，自己目前的水平停留在项目能跑。不能很好的抽象MVC，很多代码都堆在 Controller 文件中，动辄1000行代码，代码维护费时费力。想要 Clean Code 却无从下手。<br><br>希望再学习了设计模式之后，可以盖出结构化现代化的房子，高效、简洁、去除不必要的耦合，告别茅草屋。<br><br>2. 在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>无。","like_count":0},{"had_liked":false,"id":148420,"user_name":"摸爬滚打三十年","can_delete":false,"product_type":"c1","uid":1240241,"ip_address":"","ucode":"764A7F920EC304","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/b1/d790b927.jpg","comment_is_top":false,"comment_ctime":1573005502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573005502","product_id":100039001,"comment_content":"现在在做支付中台的项目，我个人负责支付路由这块。前期调研，支付路由有很多影响因素，比如:支付限额，费率，支付通道，营销策略，渠道类型，卡类型、商户类型、资金寸头等众多因素的影响。自己不想写一坨 if else 看起来很low 的代码。自己对设计模式也不熟练，应该如何抽象，应该建哪些类，是写接口还是类，类之间的关系等发面一筹莫展，感觉像无头苍蝇。希望通过老师的课程找到灵感，写出高质量的代码。也希望留言区的大牛们多多指点。","like_count":0},{"had_liked":false,"id":148411,"user_name":"夜空咏叹调","can_delete":false,"product_type":"c1","uid":1189074,"ip_address":"","ucode":"CC9350BCF218CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d2/a5e272ce.jpg","comment_is_top":false,"comment_ctime":1573004470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573004470","product_id":100039001,"comment_content":"问题一:设计模式和代码在实现层有点类似数据结构和算法，设计模式就是算法的一个放大吧，只是算法是针对的数据结构，设计模式是针对的整个程序。不知道理解的对不对，如果有不正确的地方请指出。<br>问题二:说来惭愧，写了多年代码，其实也就用到了单例模式，其他设计模式要么不理解，不会用，要么觉得用不到，单例使用的场景是代码中有一个资源会重复创建初始化，但是其实这个资源完全可以共用，没必要每次创建，为避免资源浪费采用的。","like_count":0},{"had_liked":false,"id":148394,"user_name":"菡萏如佳人","can_delete":false,"product_type":"c1","uid":1002849,"ip_address":"","ucode":"8DC3B29C9D2049","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/61/48b65197.jpg","comment_is_top":false,"comment_ctime":1573002006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573002006","product_id":100039001,"comment_content":"200多个真实项目.....光这一点理由就值得订阅了","like_count":0},{"had_liked":false,"id":148384,"user_name":"geeklyc","can_delete":false,"product_type":"c1","uid":1264061,"ip_address":"","ucode":"F25441AB6433B3","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/bd/ae37990b.jpg","comment_is_top":false,"comment_ctime":1573000850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573000850","product_id":100039001,"comment_content":"一直觉得设计很重要，不论是架构、拓展、可读性等。设计模式的书看过几本书，一看觉得会，一用就不会，平常也只能照葫芦画瓢写一点常用的设计模式，但是不知道怎么灵活应用到日常开发，还需要老师多多指点。","like_count":0},{"had_liked":false,"id":148366,"user_name":"davidzhou","can_delete":false,"product_type":"c1","uid":1018904,"ip_address":"","ucode":"F4B2929F4111DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8c/18/7cbc34eb.jpg","comment_is_top":false,"comment_ctime":1572999187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572999187","product_id":100039001,"comment_content":"项目当中见过滥用单例模式的，类中实现的接口都是用完就可以释放的，都会创建单例来一直持有这个对象","like_count":0},{"had_liked":false,"id":148359,"user_name":"Chen","can_delete":false,"product_type":"c1","uid":1503113,"ip_address":"","ucode":"C1128558AB5BC4","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/89/8c73a24d.jpg","comment_is_top":false,"comment_ctime":1572998556,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572998556","product_id":100039001,"comment_content":"每次在修复bug，或者增加功能时看到自己的代码都不忍直视😂，我觉得学习设计模式能改变这种现状。<br>目前项目中只会用单例，构建者设计模式。","like_count":0},{"had_liked":false,"id":148349,"user_name":"M.O(∩_∩)O","can_delete":false,"product_type":"c1","uid":1498641,"ip_address":"","ucode":"B245C2BA20DDA8","user_header":"https://static001.geekbang.org/account/avatar/00/16/de/11/72f96304.jpg","comment_is_top":false,"comment_ctime":1572996208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572996208","product_id":100039001,"comment_content":"我为什么想学设计模式，在于它能使我代码实现更优雅<br><br>之前用过策略模式，但是依葫芦画瓢而已<br><br>","like_count":0},{"had_liked":false,"id":148292,"user_name":"拉格朗日的忧桑","can_delete":false,"product_type":"c1","uid":1312991,"ip_address":"","ucode":"5FCB2C6616E113","user_header":"https://static001.geekbang.org/account/avatar/00/14/08/df/4e5c2b29.jpg","comment_is_top":false,"comment_ctime":1572968934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572968934","product_id":100039001,"comment_content":"是看懂优秀开源项目的基石。<br>在实际项目中使用工厂模式、策略模式、享元模式解决不同奖品发放逻辑不同的问题，使修改封闭","like_count":0},{"had_liked":false,"id":148286,"user_name":"宝宝疯","can_delete":false,"product_type":"c1","uid":1026637,"ip_address":"","ucode":"D86F5A645FE61B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/4d/c7df89bf.jpg","comment_is_top":false,"comment_ctime":1572968161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572968161","product_id":100039001,"comment_content":"写简单的业务代码很少会用到设计模式，但是如果想要代码能够拥有更好的通用性和扩展性，想要编写更简洁的代码，设计模式是绕不过去的，这也是区分初级程序员和高级程序员的标志。<br><br>期待跟随老师一起学习，写出更好的作品。","like_count":0},{"had_liked":false,"id":148280,"user_name":"Geek_b2b094","can_delete":false,"product_type":"c1","uid":1614162,"ip_address":"","ucode":"AA93C54D8D7980","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/k5r6L01rTcMNbungWUPxq7ZkfEas5uy4rFpxnzCRadIDAQGpQfzLSUbLicqZUgoplia0Vhia4twtia6827iafAevbog/132","comment_is_top":false,"comment_ctime":1572967532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572967532","product_id":100039001,"comment_content":"重构系统这个深有体会。最近被调去维护个n年前的系统，代码基本不能看，一个类写了几千行，一个方法上千行。有的表上百个字段。。基本只能推倒重做","like_count":0},{"had_liked":false,"id":148275,"user_name":"鲸勿落","can_delete":false,"product_type":"c1","uid":1377859,"ip_address":"","ucode":"4F45D62F85491D","user_header":"https://static001.geekbang.org/account/avatar/00/15/06/43/0e5a3bf7.jpg","comment_is_top":false,"comment_ctime":1572966904,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572966904","product_id":100039001,"comment_content":"前段时间去面试就问到了发布-订阅模式","like_count":0},{"had_liked":false,"id":148266,"user_name":"Andy Jiang","can_delete":false,"product_type":"c1","uid":1227279,"ip_address":"","ucode":"436609A0A445CF","user_header":"https://static001.geekbang.org/account/avatar/00/12/ba/0f/9789c2cc.jpg","comment_is_top":false,"comment_ctime":1572965967,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572965967","product_id":100039001,"comment_content":"1. 平时工作中很少用到设计模式，最多的就是抽出公共组件，方便复用<br>2. 之前也看过一些设计模式的书籍和文章，但是一段时间不接触就忘了差不多了","like_count":0},{"had_liked":false,"id":148257,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1572964947,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572964947","product_id":100039001,"comment_content":"用刻意练习里的概念，就是要建立设计模式的心理表征","like_count":0},{"had_liked":false,"id":148249,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1572963836,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572963836","product_id":100039001,"comment_content":"1. 问题一：理解设计模式的时候看一些开源项目的代码就一种被验证的感觉。目前市面上的书都偏demo，缺少真是项目的例子，也是我想一直搞的。老师很多说到心坎里面了。<br>2. 期望具体的设计模式讲解能提供对应开源代码的链接。<br>3. 问题二：实际使用的设计模式很多，但对于初学者，工厂模式，代理模式，单例模式，构建者模式，模板模式，策略模式是基本能力，而且可以在实际中经常用到。","like_count":0},{"had_liked":false,"id":148247,"user_name":"kevin","can_delete":false,"product_type":"c1","uid":1172544,"ip_address":"","ucode":"BD0196DC43904B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTK6tjf32L6g7icarqaVfmDdTxx9X6mfDibFfCLnaguLQVkKstImePyNwSKQVqC7PbeGLkVnLjan3obQ/132","comment_is_top":false,"comment_ctime":1572963423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572963423","product_id":100039001,"comment_content":"问设计模式就是单例和工厂模式😬","like_count":0},{"had_liked":false,"id":148246,"user_name":"pan","can_delete":false,"product_type":"c1","uid":1439228,"ip_address":"","ucode":"7C95D66C95E1BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/1iaykDMsDvUbd13DxewFGibSExGyNyzmHK8cciam9EH9RRWbhfSgMDPIbGP5hfe9hX0uTEkybhmic3fdpYVHXmRpJg/132","comment_is_top":false,"comment_ctime":1572963087,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572963087","product_id":100039001,"comment_content":"近期最大的感受就是1.看开源代码的时候，觉得它是用了什么设计模式的，但是由于不熟练，就没法完全Get.<br>2.面试的时候，确实设计模式是一个考点，自己还是没法说出所以然.<br>3.最近自己设计系统实现的时候，想要抽象，但是还停留在很简单的一层抽象上，感觉可以用的工具有点少.","like_count":0},{"had_liked":false,"id":148245,"user_name":"漩涡鸣人","can_delete":false,"product_type":"c1","uid":1108346,"ip_address":"","ucode":"A39A8D88BFB125","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/7a/f5246858.jpg","comment_is_top":false,"comment_ctime":1572962832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572962832","product_id":100039001,"comment_content":"用不到不代表没用  自有其真意","like_count":0},{"had_liked":false,"id":148235,"user_name":"郁方林","can_delete":false,"product_type":"c1","uid":1130275,"ip_address":"","ucode":"8ABEAFDA815DDE","user_header":"https://static001.geekbang.org/account/avatar/00/11/3f/23/8ff389d2.jpg","comment_is_top":false,"comment_ctime":1572961409,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572961409","product_id":100039001,"comment_content":"默默打卡，加油，不负青春，不负自己","like_count":0},{"had_liked":false,"id":148230,"user_name":"Geek_Spring","can_delete":false,"product_type":"c1","uid":1292572,"ip_address":"","ucode":"3F44EE152CB357","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erRavHNiaicxIIq5Pal1iadE4axG6ibbib6llpHBslhiahWDQ6tdE1IcWicFogfvuyfGoiayC51knA09UtQvQ/132","comment_is_top":false,"comment_ctime":1572961115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572961115","product_id":100039001,"comment_content":"1.设计模式的重要性<br>    面对某优秀的开源框架，看的时候觉得很抽象，看完之后，完全没有get到设计的精髓，感觉白白的看了一遍<br>    面对业务上的烂代码，真的很想去重构，但是会的就那么几个设计模式，无能为力<br>2.曾经用过的设计模式<br>\t策略模式，工厂模式 一起用的时候解决了N多的IF ELSE，用完之后真的很爽<br><br>但是还是很浅的在使用设计模式希望能够继续努力啊","like_count":0},{"had_liked":false,"id":148229,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1572961086,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1572961086","product_id":100039001,"comment_content":"要想写出易于维护和扩展的软件，设计模式很重要，也对后续加入的工程师友好，更有利于代码的维护和可扩展性。<br>设计模式本身是从实践中总结出来的，所以也要灵活使用，基本上大部分的设计模式都遇到过，但是还有很多不熟练，有的时候想不到相关的模式，希望后面能多多锻炼","like_count":0},{"had_liked":false,"id":148217,"user_name":"雨季不再来","can_delete":false,"product_type":"c1","uid":1731625,"ip_address":"","ucode":"74DBBB8E525067","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6c/29/38ddc1ce.jpg","comment_is_top":false,"comment_ctime":1572959774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572959774","product_id":100039001,"comment_content":"问题1.我觉得特别重要！<br>问题2.大学未毕业，实习中，没有用到过","like_count":0},{"had_liked":false,"id":148214,"user_name":"张迪","can_delete":false,"product_type":"c1","uid":1104835,"ip_address":"","ucode":"6A5D44999A0FEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/db/c3/e11adfe8.jpg","comment_is_top":false,"comment_ctime":1572959068,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572959068","product_id":100039001,"comment_content":"1，设计模式能写出可扩展高质量的代码<br>2，工厂方法，策略模式，构造者模式","like_count":0},{"had_liked":false,"id":148213,"user_name":"GalGadot朵吧","can_delete":false,"product_type":"c1","uid":1424031,"ip_address":"","ucode":"3CAA4A6955CBC4","user_header":"https://static001.geekbang.org/account/avatar/00/15/ba/9f/6ad2cd71.jpg","comment_is_top":false,"comment_ctime":1572958975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572958975","product_id":100039001,"comment_content":"跟上学习八个月","like_count":0},{"had_liked":false,"id":148209,"user_name":"肖大妞","can_delete":false,"product_type":"c1","uid":1426644,"ip_address":"","ucode":"2AD2F8684FDCF8","user_header":"https://static001.geekbang.org/account/avatar/00/15/c4/d4/5c8fb1cb.jpg","comment_is_top":false,"comment_ctime":1572958349,"is_pvip":false,"replies":[{"id":"57180","content":"别急 慢慢学 学完你就知道了","user_name":"作者回复","comment_id":148209,"uid":"1190123","ip_address":"","utype":1,"ctime":1573027177,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1572958349","product_id":100039001,"comment_content":"设计模式用过一些，单例，代理，责任链，装饰者模式等，但是一直没有get到设计模式的优点，难道就只是为了方便代码扩展，让人容易看懂？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473432,"discussion_content":"别急 慢慢学 学完你就知道了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573027177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148187,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1572956191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572956191","product_id":100039001,"comment_content":"1 设计模式很确实很重要，读了这篇文章才发现读不下去Spring源码是因为基础太差，没有掌握设计模式<br>2 工作证用到的有：单例、工厂、发布订阅、代理、门面等。但没有特别复杂的业务场景，没有为实现一个功能组合使用多种设计模式。","like_count":0},{"had_liked":false,"id":148184,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1572955624,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1572955624","product_id":100039001,"comment_content":"看源码看不懂？理解不到精髓？那是你基础功不够扎实。这句话太扎心了，不够也的确是这样的，学习好设计模式","like_count":0},{"had_liked":false,"id":148161,"user_name":"jkhcw","can_delete":false,"product_type":"c1","uid":1324237,"ip_address":"","ucode":"300F1FEAEA9EB4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/EvqrQ1wMs4SzC8dSBjAfVdEZ3yDT0bDUMicfRLq6BOSzjGFhCownt3S5MERXLpOpLmyJXCuyWbeOQG3ibzy0b4ibA/132","comment_is_top":false,"comment_ctime":1572953084,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572953084","product_id":100039001,"comment_content":"适配器模式很有用","like_count":0},{"had_liked":false,"id":148156,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1572951972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572951972","product_id":100039001,"comment_content":"设计模式能让我们的日常工作产生复利效应，如果没有设计模式的概念，除了最初熟练度增加，后面利率趋近于零，而设计模式相当于提高了利率，能让我们不断成长！","like_count":0},{"had_liked":false,"id":148153,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1572950530,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572950530","product_id":100039001,"comment_content":"对于设计模式的重要性，我认为在编码中如果能适当合理的运用设计模式，那无疑会为我们后期的维护(增加新需求)带来极大的便利，易读、可扩展性高的代码能够省下不少开发时间，同时提升开发效率。<br>对于设计模式的运用，运用过简单工厂模式，运用在收集系统资源信息的场景中，针对传入不同资源name以及资源json数据转换为相应资源对象，运用多态思想，分别调用不同资源的持久化逻辑，完成存储。优化之后，代码逻辑更清晰，可读性更强","like_count":0},{"had_liked":false,"id":148145,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1572948368,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572948368","product_id":100039001,"comment_content":"身为编码者，有责任与义务写出漂亮代码，有义务与责任恶心垃圾代码！O(∩_∩)O哈哈~","like_count":0},{"had_liked":false,"id":148139,"user_name":"秋晓浦","can_delete":false,"product_type":"c1","uid":1448198,"ip_address":"","ucode":"7B98E05B472990","user_header":"https://static001.geekbang.org/account/avatar/00/16/19/06/fc2f127b.jpg","comment_is_top":false,"comment_ctime":1572947449,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572947449","product_id":100039001,"comment_content":"使用angular 开发,只用过单例 观察者模式","like_count":0},{"had_liked":false,"id":148111,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1572942991,"is_pvip":false,"replies":[{"id":"57501","content":"那也不是。你可以不必非得将他们联系在一起，可以独立的看待","user_name":"作者回复","comment_id":148111,"uid":"1190123","ip_address":"","utype":1,"ctime":1573287454,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1572942991","product_id":100039001,"comment_content":"理不清楚面向对象设计7个原则之间关系，好像每条说的都很有道理，24种设计模式是对这个7个原则的从不同方面给出的解决方案吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481269,"discussion_content":"嗯嗯 我改下\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580121972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148105,"user_name":"胖🐯","can_delete":false,"product_type":"c1","uid":1732966,"ip_address":"","ucode":"FB6EA96A335846","user_header":"https://static001.geekbang.org/account/avatar/00/1a/71/66/087de1c6.jpg","comment_is_top":false,"comment_ctime":1572941873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572941873","product_id":100039001,"comment_content":"设计模式就是一些技术大牛千百年来开发生涯中的用于解决一些相同问题而总结的一些牛逼的经验，学习设计模式不仅可以让自己写出高质量的代码，还能让我们在看大牛代码时候不至于懵逼🙂","like_count":0},{"had_liked":false,"id":148080,"user_name":"Calvin","can_delete":false,"product_type":"c1","uid":1088687,"ip_address":"","ucode":"17AF8578D6F41F","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/af/05eeb5e9.jpg","comment_is_top":false,"comment_ctime":1572938502,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572938502","product_id":100039001,"comment_content":"印象比较深刻的是工作的头几年，因为没有很好的编码习惯，也没有相应的学习，导致写出的代码又烂又臭，没有很好的做到高内聚低耦合，也没有把通用的模块和功能进行封装的能力，就像争哥所说，看很多高质量源码由于代码和类比较多，看一会就不知所向。随着工作时间的增长，编码能力也在努力提高中，比如做简单的组件、封装、看源码等，但是增长也仅限于此，还不具备编写高质量代码和高质量第三方库的能力，希望通过学习设计模式能够进一步提升自己在此两项的能力。","like_count":0},{"had_liked":false,"id":148076,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1572937626,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572937626","product_id":100039001,"comment_content":"现在项目代码最让人头疼的是：增加或修改业务逻辑，就像伤筋动骨一般（代码耦合度高），需要大改并重新测试。费时费力，而且还不一定能做好。我总觉得这不是一种工程手段，想来其他工程也不像这样总是推倒重来呀！我学习设计模式就是为了避免上述情况的再次发生。我就觉得通过这篇课程，我可以写出可维护、易扩展、耦合度低的代码，让工作更具深度和价值。<br><br>文中的一段话我感同身受：『早点去学习，以后的项目就都可以拿来锻炼，每写一行代码都是对内功的利用和加深，是可以受益一整个职业生涯的事情。』像滚雪球一般，让自己越来越强大！<br><br>工程实践中用得较多的是：<br>* 单例模式，比如对于蓝牙模块的控制管理类，抽象单例管理整个模块的功能流程；<br>* 观察者模式，实现异步回调。","like_count":0},{"had_liked":false,"id":148062,"user_name":"君不得闲","can_delete":false,"product_type":"c1","uid":1101581,"ip_address":"","ucode":"718AA2C9B410BB","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/0d/f4150547.jpg","comment_is_top":false,"comment_ctime":1572935164,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1572935164","product_id":100039001,"comment_content":"学习设计模式就是个磨刀的过程，越早的磨砺，之后得到的收益就更大。<br>应对面试时得心应手，谈工资时理直气壮。<br>写代码时成就满满，维护代码时一气呵成。<br>阅读源码和理解框架更容易理解作者所想要表达的思想。<br>思想的碰撞才能更好地进步。<br>最后完全不怕锅从天降。<br>","like_count":0},{"had_liked":false,"id":148057,"user_name":"路上有只🦅","can_delete":false,"product_type":"c1","uid":1691085,"ip_address":"","ucode":"3E5B365A273D73","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/MJIYyZ54UmgSmsXGzfGUsVTiaHRib1VSStrRJY2cnwNwtjSI06ke1hibYxQFoj46pysFqmxILM71Ry9nD2jPDJHww/132","comment_is_top":false,"comment_ctime":1572933704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572933704","product_id":100039001,"comment_content":"1.学设计模式可以写出更健壮优雅的代码，优雅的代码让人赏心悦目，哈哈；<br>2.有用过职责链模式，不过是项目组的大牛写的，不是很明白它的作用和原理，相信跟着争哥学完设计模式后，一定会明白。","like_count":0},{"had_liked":false,"id":148052,"user_name":"power","can_delete":false,"product_type":"c1","uid":1455616,"ip_address":"","ucode":"8FCE95CAB092C3","user_header":"https://static001.geekbang.org/account/avatar/00/16/36/00/0e79c1f1.jpg","comment_is_top":false,"comment_ctime":1572932978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572932978","product_id":100039001,"comment_content":"工厂，单例","like_count":0},{"had_liked":false,"id":148050,"user_name":"一切顺其自然","can_delete":false,"product_type":"c1","uid":1014580,"ip_address":"","ucode":"D477D471F46BAC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/34/5fc2e9de.jpg","comment_is_top":false,"comment_ctime":1572932902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572932902","product_id":100039001,"comment_content":"1.聊一聊你对设计模式相关知识的重要性的看法；<br>当不了解设计模式的时候，写代码就像砌砖头；当了解了设计模式之后，你就是盖房子了，先有了房子的框架，再往里面砌砖头。<br>2.在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>用到的设计模式基本上也是最常见的那些，单例，观察者，工厂，代理，策略等等。在使用过程中思考的比较少，觉得哪个用着方便就用哪个。","like_count":0},{"had_liked":false,"id":148042,"user_name":"Tom.G","can_delete":false,"product_type":"c1","uid":1206034,"ip_address":"","ucode":"7929B45C1A51F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","comment_is_top":false,"comment_ctime":1572932476,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572932476","product_id":100039001,"comment_content":"1.设计模式是基本功，是编写高质量代码的基础，熟练掌握设计模式可以开发出易于维护、扩展的代码。对于阅读他人优秀代码也是很有帮助的。<br>2.单例模式，桌面开发用户相关信息读取，用户信息无需重复读取，直接使用；模板方法，固定的流程抽象细节，重写具体的细节达到代码复用效果；观察者模式，对象变化引起另一个对象变化，降低对象间耦合","like_count":0},{"had_liked":false,"id":148039,"user_name":"火力全开","can_delete":false,"product_type":"c1","uid":1412220,"ip_address":"","ucode":"8CE1733A2F618C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEIaTvOKvUt4WnuSjkBp0tjd6O6vvVyw5fcib3UgZibE8tz2ICbTfkwbzs8MHNMJjV6W2mLjywLsvBibg/132","comment_is_top":false,"comment_ctime":1572932377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572932377","product_id":100039001,"comment_content":"建议作者结合Spring之类的优秀开源项目来讲设计模式，它们当中一定涉及到大量优秀的实践","like_count":0},{"had_liked":false,"id":148037,"user_name":"前端西瓜哥","can_delete":false,"product_type":"c1","uid":1248576,"ip_address":"","ucode":"150130C34CD1C1","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/40/f70e5653.jpg","comment_is_top":false,"comment_ctime":1572931604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572931604","product_id":100039001,"comment_content":"我是一名web前端，上家公司做svg编辑器，实现撤回重做功能，用到了命令模式。","like_count":0},{"had_liked":false,"id":148036,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1572931309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572931309","product_id":100039001,"comment_content":"前几天leader跟我聊到工厂模式，我表示一脸懵比，然后被吐槽了…准备学好了再回去虐他，哈哈哈","like_count":0},{"had_liked":false,"id":148032,"user_name":"Kearmy","can_delete":false,"product_type":"c1","uid":1204459,"ip_address":"","ucode":"F9C26C4DB71EC2","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/eb/d75e59df.jpg","comment_is_top":false,"comment_ctime":1572930817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572930817","product_id":100039001,"comment_content":"为了面试才了解到的单例模式，工厂模式","like_count":0},{"had_liked":false,"id":148021,"user_name":"OlafOO","can_delete":false,"product_type":"c1","uid":1019254,"ip_address":"","ucode":"105F8B194ED37B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/76/994a9929.jpg","comment_is_top":false,"comment_ctime":1572929571,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572929571","product_id":100039001,"comment_content":"设计模式我理解是代码解耦，模块化，服务化的一套抽象出来的方法论。<br>最近有用过策略模式优化ifelse<br>面试中比较常问的有单例，比如双重校验下的单例为什么要用volatile，其实和设计模式无关，但是设计模式真的很考验研发的知识面和理解。<br>老师说的能力不足以看懂源码，我个人觉得确实是这样，以前看源码时候看不懂，一直很怕。最近开始发现能慢慢看懂一点点了，还是不能着急不要害怕，慢慢来！","like_count":0},{"had_liked":false,"id":148019,"user_name":"董宗磊","can_delete":false,"product_type":"c1","uid":1095445,"ip_address":"","ucode":"D7005A328BC2EE","user_header":"https://static001.geekbang.org/account/avatar/00/10/b7/15/6a2b6b83.jpg","comment_is_top":false,"comment_ctime":1572929520,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572929520","product_id":100039001,"comment_content":"单例，工厂，观察者，策略，模板","like_count":0,"discussions":[{"author":{"id":1134288,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","nickname":"Ken张云忠","note":"","ucode":"D0BAC9FC17DE2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132192,"discussion_content":"valid is an adjective","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578885905,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148018,"user_name":"Sisyphus235","can_delete":false,"product_type":"c1","uid":1366359,"ip_address":"","ucode":"829CC4CE0FA96E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ooZCPFY1xgC81h0Eu3vuqbWG5MaBp8RNmvXXGQwupo2LpSOLq0rBlTDRAF1yM6wF09WdeG49rA9dJSVKIUBxnQ/132","comment_is_top":false,"comment_ctime":1572929518,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572929518","product_id":100039001,"comment_content":"代码就像是对现实世界人物的逻辑抽象，设计模式是对代码的逻辑抽象，有点像学问的学问。<br>印象比较深的是单例模式，对人物进行分配的时候，只能有一个分配器，所以做了一个单例，保证信息是准确的。","like_count":0},{"had_liked":false,"id":148005,"user_name":"子夜2104","can_delete":false,"product_type":"c1","uid":1070286,"ip_address":"","ucode":"C4FF54AEA6002F","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/ce/92029d2f.jpg","comment_is_top":false,"comment_ctime":1572927310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572927310","product_id":100039001,"comment_content":"没有啥经验的在校生，说说自己的看法：<br>1.为了更好的准备面试<br>2.看一些框架源码得时候，自己直接看是啃不动的。我想好的框架应该遵循乐设计模式的吧～所以这得学习啊<br>3.渴望自己能写出好的代码","like_count":0},{"had_liked":false,"id":148001,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1572926599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572926599","product_id":100039001,"comment_content":"学习了设计模式不仅对阅读源码有帮助，也对面试有帮助，更对自己的内功修炼有帮助！打卡。","like_count":0},{"had_liked":false,"id":147958,"user_name":"教授叶抱一","can_delete":false,"product_type":"c1","uid":1434046,"ip_address":"","ucode":"9D759A5F0B9D40","user_header":"https://static001.geekbang.org/account/avatar/00/15/e1/be/61cd263f.jpg","comment_is_top":false,"comment_ctime":1572922415,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572922415","product_id":100039001,"comment_content":"总结一下的话，主要有这样五点：应对面试中的设计模式相关问题；告别写被人吐槽的烂代码；提高复杂代码的设计和开发能力；让读源码、学框架事半功倍；为你的职场发展做铺垫。投资要趁早，这样我们才能尽早享受复利。<br>同样，有些能力，要早点锻炼；有些东西，要早点知道；有些书，要早点读。这样在你后面的生活、工作、学习中，才能一直都发挥作用。不要等到好多年后，看到了，才恍然大悟，后悔没有早点去学、去看。<br>设计模式作为一门与编码、开发有着直接关系的基础知识，是你现在就要开始学习的。早点去学习，以后的项目就都可以拿来锻炼，每写一行代码都是对内功的利用和加深，是可以受益一整个职业生涯的事情。","like_count":0},{"had_liked":false,"id":147945,"user_name":"蝴蝶","can_delete":false,"product_type":"c1","uid":1193167,"ip_address":"","ucode":"8019924D99182F","user_header":"https://static001.geekbang.org/account/avatar/00/12/34/cf/0a316b48.jpg","comment_is_top":false,"comment_ctime":1572920803,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572920803","product_id":100039001,"comment_content":"投资现在!","like_count":0},{"had_liked":false,"id":147941,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1079657,"ip_address":"","ucode":"0335277F255F7A","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/69/5960a2af.jpg","comment_is_top":false,"comment_ctime":1572920457,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572920457","product_id":100039001,"comment_content":"设计模式的重要性正如老师所说的, 五个方面, 就目前对我而言, 一直想写出高质量的代码, 看过一点重构2,但都感觉不尽如意, 差点什么东西. 设计模式在阅读源码的时候也有很大的帮助, 这个就我平常有时候看源码会卡住也深有体会, 总感觉设计模式一堵很高的强, 怎么都爬不上去.<br><br>工作中从来没用过设计模式, 可能是工作时间短, 10个月不到一年的时间吧, 至少我目前没有写过和设计模式相关的代码.","like_count":0},{"had_liked":false,"id":147934,"user_name":"liliumss","can_delete":false,"product_type":"c1","uid":1333094,"ip_address":"","ucode":"A52AC5042F3115","user_header":"https://static001.geekbang.org/account/avatar/00/14/57/66/e57bdb18.jpg","comment_is_top":false,"comment_ctime":1572920161,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572920161","product_id":100039001,"comment_content":"用的比较多的是模板模式和策略模式，遇到多个业务中大流程一样，但是每个步骤的算法不同，就可以用模板模式，把单独的算法下放到子类去实例化，策略模式也是这个思想，抽象出多个业务的相同操作，把算法放到每个子类去实现，除此之外，职责链模式，观察者模式了解，但是用的不多","like_count":0},{"had_liked":false,"id":147929,"user_name":"噗╰_╯噗 ","can_delete":false,"product_type":"c1","uid":1140666,"ip_address":"","ucode":"AFB831EB42256D","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/ba/5a1bd8c9.jpg","comment_is_top":false,"comment_ctime":1572919780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572919780","product_id":100039001,"comment_content":"设计模式是不断提高代码质量，解偶模块依赖，减少重复代码的利器，文中说的很对，设计模式是一个程序员代码能力的重要提现，可惜呀，我这还是一直停留在单例，工厂层面，需要继续加油","like_count":0},{"had_liked":false,"id":147927,"user_name":"曾经瘦过","can_delete":false,"product_type":"c1","uid":1240106,"ip_address":"","ucode":"57C32575A1C1FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/2a/b11d5ad8.jpg","comment_is_top":false,"comment_ctime":1572919660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572919660","product_id":100039001,"comment_content":"希望能够通过专栏的学习 改造自己的代码，边学边练 加深印象 增加亮点","like_count":0},{"had_liked":false,"id":147920,"user_name":"考休","can_delete":false,"product_type":"c1","uid":1053955,"ip_address":"","ucode":"968DFC00D6D0CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","comment_is_top":false,"comment_ctime":1572919301,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572919301","product_id":100039001,"comment_content":"日常工作中也用到了一些设计模式，比如业务开发中应用了单例、工厂、观察者等设计模式，通过一些开发包或框架也了解了一些，比如lombok中的build模式，Spring AOP中的代理模式。<br>以上就是了解的一些，自己也手动编码设计过这些，但是总感觉没有站在全局更有效的来思考这些设计模式，希望跟着争哥多学习！","like_count":0},{"had_liked":false,"id":147917,"user_name":"xavier","can_delete":false,"product_type":"c1","uid":1243128,"ip_address":"","ucode":"2F7918EA37ED9F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/f8/3c0a6854.jpg","comment_is_top":false,"comment_ctime":1572919036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572919036","product_id":100039001,"comment_content":"不明白什么是设计模式，只知道掌握设计模式后可写出可扩展、可读、可维护的高质量代码。<br>这正是我所需要的。","like_count":0},{"had_liked":false,"id":147914,"user_name":"shniu","can_delete":false,"product_type":"c1","uid":1019555,"ip_address":"","ucode":"E64CD8BED96D8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/a3/d7e5fe8a.jpg","comment_is_top":false,"comment_ctime":1572918818,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572918818","product_id":100039001,"comment_content":"自己的理解：设计原则，设计模式确实是基本功，指导如何合理可扩展易维护的写程序；只有在设计时有一个全局的把控才能一点点优化出高质量的代码，自己也非常看重这方面的能力，在团队中合作做事情这更是必不可少的，能大大提高工作效率；唯一的问题是在实际工作中获取到的指点几乎为零，很难有实质性的提高。认为最大的好处是可以解耦合，模块化，职责分离清晰，更好的扩展性等<br><br>接触和用到过的设计模式：<br>单例模式，比如全局配置文件对象，Spring的单例bean等<br>观察者模式：消息的发布订阅等<br>代理模式：AOP；在调用多个三方服务时使用代理来屏蔽调用细节<br>等","like_count":0},{"had_liked":false,"id":147910,"user_name":"iamcopper","can_delete":false,"product_type":"c1","uid":1405888,"ip_address":"","ucode":"39ACD56AE99DBF","user_header":"https://static001.geekbang.org/account/avatar/00/15/73/c0/e440cb9c.jpg","comment_is_top":false,"comment_ctime":1572918653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572918653","product_id":100039001,"comment_content":"一直自认为自己的代码能力还不错，日常工作中也能看得出好代码与烂代码。但让自己来设计接口框架时，又觉得力不从心，不知道从何做起，很早也就意识到自己需要在代码设计上有提高，我想这正是设计模式所能解决的问题，也正是我所欠缺的。","like_count":0},{"had_liked":false,"id":147899,"user_name":"辉仔lovers","can_delete":false,"product_type":"c1","uid":1210219,"ip_address":"","ucode":"3DC5B0CD0B8E71","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLVhJRVwJ0eVlC7zjNfWP6PP7VmUkF1X2m6qfh7Wic3NhAOz2fSGibF6LXLcJ59zOz7nBpCcByvtFjw/132","comment_is_top":false,"comment_ctime":1572917984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572917984","product_id":100039001,"comment_content":"1.学习了设计模式才能看源码的时候，了解到作者的精髓。而不是看热闹<br>2.平常对于一些if判断，会尝试着使用策略模式来提高扩展性和维护性。用的最多的是模板方法，定义一个抽象类。将一些共有的方法定义在抽象类中。","like_count":0},{"had_liked":false,"id":147892,"user_name":"fmouse","can_delete":false,"product_type":"c1","uid":1202325,"ip_address":"","ucode":"9A8858CFFAB858","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/95/640b6465.jpg","comment_is_top":false,"comment_ctime":1572917490,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1572917490","product_id":100039001,"comment_content":"看过些设计模式，当时难理解，都是些理论，知道这些理论是实践得出的，难于如何在开发中很好的运用，时间一长大部分都忘记。","like_count":0},{"had_liked":false,"id":147889,"user_name":"骡子看书","can_delete":false,"product_type":"c1","uid":1358287,"ip_address":"","ucode":"0BAFD7E0D10841","user_header":"https://static001.geekbang.org/account/avatar/00/14/b9/cf/21fef111.jpg","comment_is_top":false,"comment_ctime":1572917363,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572917363","product_id":100039001,"comment_content":"是该自己写写代码了。","like_count":0},{"had_liked":false,"id":147884,"user_name":"GGL","can_delete":false,"product_type":"c1","uid":1215892,"ip_address":"","ucode":"AED10B8248D1E7","user_header":"https://static001.geekbang.org/account/avatar/00/12/8d/94/150dfe78.jpg","comment_is_top":false,"comment_ctime":1572917244,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572917244","product_id":100039001,"comment_content":"iOS 开发，主要用到的是单例模式、观察者模式、代理模式、工厂模式","like_count":0},{"had_liked":false,"id":147881,"user_name":"肥而不腻","can_delete":false,"product_type":"c1","uid":1435246,"ip_address":"","ucode":"3E6786A82A6DD6","user_header":"https://static001.geekbang.org/account/avatar/00/15/e6/6e/062da5e4.jpg","comment_is_top":false,"comment_ctime":1572917021,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572917021","product_id":100039001,"comment_content":"希望通过我的努力和贡献，让项目代码能脱离各种复制粘贴","like_count":0},{"had_liked":false,"id":147879,"user_name":"yu🐟","can_delete":false,"product_type":"c1","uid":1181583,"ip_address":"","ucode":"E988567C46539E","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/8f/3ef096f3.jpg","comment_is_top":false,"comment_ctime":1572916721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572916721","product_id":100039001,"comment_content":"单例 原型 模板","like_count":0},{"had_liked":false,"id":147872,"user_name":"Hua100","can_delete":false,"product_type":"c1","uid":1723325,"ip_address":"","ucode":"4E7A749C343E90","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLLeKVmTFdR2hQsCaNxxTK8wvnXXBayKLLoITqnbW9yjloAZWU99mOGaf1DkWqM6dol77aER9ickibA/132","comment_is_top":false,"comment_ctime":1572916069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572916069","product_id":100039001,"comment_content":"渣渣表示有为了设计模式课而用过工厂。还得努力！向大牛挺进","like_count":0},{"had_liked":false,"id":147870,"user_name":"龙坤","can_delete":false,"product_type":"c1","uid":1233455,"ip_address":"","ucode":"D1724E68D6304D","user_header":"https://static001.geekbang.org/account/avatar/00/12/d2/2f/04882ff8.jpg","comment_is_top":false,"comment_ctime":1572915722,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1572915722","product_id":100039001,"comment_content":"写过命令设计模式，在封装rest api的时候用过","like_count":0},{"had_liked":false,"id":147867,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1018370,"ip_address":"","ucode":"7A488CC6FE15E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8a/02/828938c9.jpg","comment_is_top":false,"comment_ctime":1572915239,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572915239","product_id":100039001,"comment_content":"1. 做了三年开发越来意识到设计模式的重要性。在读spring源码过程中就能看到诸如模板，工厂，观察者等。不过至今自认为还没能力好好理解。刚毕业去面试时有个面试官就推荐我本书-大话设计模式。那时候只是大概过了一遍，没有深入理解，随着时间流逝有些东西不用也就忘光了。有些遗憾。希望这次跟着大家的脚步把设计模式的基础打牢。<br>2. 用过的设计模式: 单例，简单工厂，策略模式，模版模式。","like_count":0},{"had_liked":false,"id":147860,"user_name":"杜","can_delete":false,"product_type":"c1","uid":1236070,"ip_address":"","ucode":"E372639657C9AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/dc/66/5861451b.jpg","comment_is_top":false,"comment_ctime":1572914682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572914682","product_id":100039001,"comment_content":"之前看过一个视频里提到过，设计模式是程序员专用黑话，非常认可。不懂设计模式，就看不懂别人的代码，又不能写出优雅高质量的代码让别人欣赏。其实设计模式说白了，就是行业在几十年沉淀的套路吧。","like_count":0},{"had_liked":false,"id":147854,"user_name":"古古惑惑","can_delete":false,"product_type":"c1","uid":1039710,"ip_address":"","ucode":"37724A018564FF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dd/5e/2354204d.jpg","comment_is_top":false,"comment_ctime":1572914222,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572914222","product_id":100039001,"comment_content":"设计模式有利于写出维护性好，扩展性强的代码，需要好好学习","like_count":0},{"had_liked":false,"id":147851,"user_name":"黄林晴","can_delete":false,"product_type":"c1","uid":1362631,"ip_address":"","ucode":"B15C38AECDA88F","user_header":"https://static001.geekbang.org/account/avatar/00/14/ca/c7/00e544c2.jpg","comment_is_top":false,"comment_ctime":1572914095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572914095","product_id":100039001,"comment_content":"打卡<br>工作中用到过一些设计模式，最常用的是单例模式，但是后来发现，经常会为了设计模式而设计模式，自己都不知道最好的用什么模式，为了让代码看起来高大上而乱用设计模式，相信跟着王大佬学习下来定会有所成长","like_count":0},{"had_liked":false,"id":147841,"user_name":"chdy","can_delete":false,"product_type":"c1","uid":1262881,"ip_address":"","ucode":"F3FDA58F445CC1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLfsEsaDzp8TqSsymPoqOgo1n5oFK8iaajGeUNPxnVjpmDAibyIic9Hhj72yOVY1wpKrib8eyQa070Wkw/132","comment_is_top":false,"comment_ctime":1572913140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572913140","product_id":100039001,"comment_content":"设计模式之于研发恰如伤寒论之于中医，欲为上工，非熟诵不可。<br>起初正是研读开源框架才了解一些，遗憾的是虎头蛇尾，一直未能细细品味。<br>在项目中的应用更是少之又少，一是多半使用框架，二是会的人也少。接过别人的代码一看，也就保持一致吧。工作中能有几次是从零开始的新项目。学习她，只为在自己的代码天地里施展一番","like_count":0},{"had_liked":false,"id":147840,"user_name":"dw靖","can_delete":false,"product_type":"c1","uid":1185977,"ip_address":"","ucode":"F6C60B1E3777FC","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b9/de606b05.jpg","comment_is_top":false,"comment_ctime":1572913095,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572913095","product_id":100039001,"comment_content":"使用过 抽象方法模式 策略模式 单例 责任链 ","like_count":0},{"had_liked":false,"id":147830,"user_name":"小北","can_delete":false,"product_type":"c1","uid":1120156,"ip_address":"","ucode":"A428FC9B771108","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ercic1LB9N9P1kArjS1f3hOo641elcwFGHWrxeYF4yZjfwiaydLwVeM4ZJEmVkib66GtJoE0cr6Dviauw/132","comment_is_top":false,"comment_ctime":1572912140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572912140","product_id":100039001,"comment_content":"1.设计模式本质上就是代码最佳设计经验的总结，站到一个更高的角度，抽象并用最佳方案实现业务逻辑，来保证代码的健壮、优雅、可扩展、可维护，而不是单纯的CRUD。设计模式掌握的深浅是高阶和低阶工程师的重要区别。<br>2.在具体工作中大部分情况下已经有同学做好了框架，只需要在框架中写业务逻辑，即小争哥说的“翻译业务逻辑”，真正用到设计模式的机会比较少，接触最多的是单例和工厂模式，但实际上对设计模式的理解和体会并不深。希望通过专栏学习加深理解，并熟练掌握设计模式的运用，做一名优秀的工程师而不是搬砖的码农。","like_count":0},{"had_liked":false,"id":147813,"user_name":"冰糕不冰","can_delete":false,"product_type":"c1","uid":1134761,"ip_address":"","ucode":"B754FE464BA426","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/a9/3f8c7418.jpg","comment_is_top":false,"comment_ctime":1572909792,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572909792","product_id":100039001,"comment_content":"1.设计模式我感觉很重要！好的设计模式能让代码提高重用性，避免后续修改破坏原本代码结构。<br>2.用过的设计模式包括工厂模式，代理模式，策略模式。","like_count":0},{"had_liked":false,"id":147809,"user_name":"傅君阳","can_delete":false,"product_type":"c1","uid":1646790,"ip_address":"","ucode":"C3FAC41D4165B6","user_header":"https://static001.geekbang.org/account/avatar/00/19/20/c6/8a81a32c.jpg","comment_is_top":false,"comment_ctime":1572909023,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572909023","product_id":100039001,"comment_content":"那句老话:出名要趁早。基本功要早点学，学扎实。","like_count":0},{"had_liked":false,"id":147800,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1572902930,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572902930","product_id":100039001,"comment_content":"只在面试的时候问过，平时就写写业务代码，没有体会到设计模式的用处。还有期待着下面的课程，和大家一起进步！","like_count":0},{"had_liked":false,"id":147792,"user_name":"海罗沃德","can_delete":false,"product_type":"c1","uid":1165364,"ip_address":"","ucode":"8704F1D6980FA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c8/34/fb871b2c.jpg","comment_is_top":false,"comment_ctime":1572890811,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572890811","product_id":100039001,"comment_content":"最近在研究reactive streaming，才接觸到很優秀的設計模式，以個人經驗未來reactive streaming會是熱門領域，提前佈局、提前學習，對於將來職業生涯大有裨益","like_count":0},{"had_liked":false,"id":147785,"user_name":"Richie","can_delete":false,"product_type":"c1","uid":1019588,"ip_address":"","ucode":"12314EF0347693","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/c4/8d1150f3.jpg","comment_is_top":false,"comment_ctime":1572888786,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572888786","product_id":100039001,"comment_content":"看过《head first 设计模式》，觉得都能理解，但是在实际项目中却没有用武之地，希望在这个专栏中看到不同。","like_count":0},{"had_liked":false,"id":147780,"user_name":"筱乐乐哦","can_delete":false,"product_type":"c1","uid":1307611,"ip_address":"","ucode":"AE92539F0419C3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/db/5b7a8fd8.jpg","comment_is_top":false,"comment_ctime":1572887228,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572887228","product_id":100039001,"comment_content":"最近在读dubbo的源码，就发现设计模式的实在太重要了，能看懂代码的流程，知道是什么实现的，然后是就会为他的这种设计感到惊叹，像是里面的责任链模式、观察者模式、修饰器模式等，常见的就不说了，感觉设计实在是巧妙，怪不得能一直活下去","like_count":0},{"had_liked":false,"id":147761,"user_name":"朱坤","can_delete":false,"product_type":"c1","uid":1098637,"ip_address":"","ucode":"65224DA2456EAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/8d/214ad614.jpg","comment_is_top":false,"comment_ctime":1572883991,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572883991","product_id":100039001,"comment_content":"关于为什么学习设计模式，里面许多点都说到心坎里了","like_count":0},{"had_liked":false,"id":147752,"user_name":"Yayu","can_delete":false,"product_type":"c1","uid":1058015,"ip_address":"","ucode":"5E7842458D8229","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","comment_is_top":false,"comment_ctime":1572883307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572883307","product_id":100039001,"comment_content":"我要成为技术专家，加油！","like_count":0},{"had_liked":false,"id":147742,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1572882440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572882440","product_id":100039001,"comment_content":"默默打卡","like_count":0},{"had_liked":false,"id":147740,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1572882315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572882315","product_id":100039001,"comment_content":"工厂模式和策略模式，解决if else的问题。。。","like_count":0},{"had_liked":false,"id":147731,"user_name":"kkk","can_delete":false,"product_type":"c1","uid":1453027,"ip_address":"","ucode":"FB4BFD00618699","user_header":"","comment_is_top":false,"comment_ctime":1572881810,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572881810","product_id":100039001,"comment_content":"磨刀不误砍柴工，培养好的习惯很重要。我们有一句戏谑的话，一般创业初期的公司，程序员都是在写屎，到中期的时候，这些屎就由别人来吃。怎么让代码自述其职，是我学习设计模式的目的","like_count":0},{"had_liked":false,"id":147729,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1572881627,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572881627","product_id":100039001,"comment_content":"为了不要每次面试的时候，都浅尝辄止的知道一点点，此次来深入学习.<br>重要性：无论是代码的可读性，还是扩展性， 读源码 都离不开设计模式.<br>","like_count":0},{"had_liked":false,"id":147704,"user_name":"仙道","can_delete":false,"product_type":"c1","uid":1161146,"ip_address":"","ucode":"CF35D34B484B71","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/ba/ae4cabd8.jpg","comment_is_top":false,"comment_ctime":1572880126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572880126","product_id":100039001,"comment_content":"jdk源码应该是非常牛逼的代码了。可是看它好痛苦啊","like_count":0},{"had_liked":false,"id":147696,"user_name":"NYang","can_delete":false,"product_type":"c1","uid":1239235,"ip_address":"","ucode":"FCDB3246D1195A","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/c3/11479173.jpg","comment_is_top":false,"comment_ctime":1572879641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572879641","product_id":100039001,"comment_content":"现在写代码越来越感觉设计模式的重要了，总觉得自己代码耦合太高，每次改功能都要大动一番，不仅浪费时间还拖累自己成长<br>","like_count":0},{"had_liked":false,"id":147693,"user_name":"花儿少年","can_delete":false,"product_type":"c1","uid":1318540,"ip_address":"","ucode":"CFE4F64243673B","user_header":"https://static001.geekbang.org/account/avatar/00/14/1e/8c/450fe5cb.jpg","comment_is_top":false,"comment_ctime":1572879498,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572879498","product_id":100039001,"comment_content":"我觉得设计模式的重要性和老师说的差不了多少<br>1. 面试，最功利性的<br>2. 提高自己的编码能力，能在团队里面发挥更多（工作一年多，目前一直在写业务代码，几乎与设计模式绝缘，系统中倒是有一些大佬的设计模式运用，只有这些可以看了）<br>3. 想去为开源贡献一份自己的力量（开源项目都读不懂，何谈贡献）<br><br>使用设计模式的话，builder？，template method，factory，好像没别的了😂","like_count":0},{"had_liked":false,"id":147691,"user_name":"🌲树根🌲","can_delete":false,"product_type":"c1","uid":1159060,"ip_address":"","ucode":"1CB2271FB7872D","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/94/6949a55c.jpg","comment_is_top":false,"comment_ctime":1572879467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572879467","product_id":100039001,"comment_content":"一直认为代码不是写给自己看的，是写给别人看的。设计模式就是教我们怎么写得让人赏心悦目。<br><br>观察者、状态机、工厂用的比较多，解决订单模块，支付模块","like_count":0},{"had_liked":false,"id":147690,"user_name":"Running","can_delete":false,"product_type":"c1","uid":1006392,"ip_address":"","ucode":"6377B6BD1F01FF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5b/38/42ff18f1.jpg","comment_is_top":false,"comment_ctime":1572879426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572879426","product_id":100039001,"comment_content":"最近的项目对可拓展性要求比较高，回想当时设计架构时的种种苦恼，添加&#47;删除一个功能动全身，感觉都是Debug中写代码的，如果可拓展性好一点，那么也许就不需要加班那么多了，定位问题也不会那么困难","like_count":0},{"had_liked":false,"id":147689,"user_name":"仙道","can_delete":false,"product_type":"c1","uid":1161146,"ip_address":"","ucode":"CF35D34B484B71","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/ba/ae4cabd8.jpg","comment_is_top":false,"comment_ctime":1572879411,"is_pvip":false,"replies":[{"id":"56934","content":"头条美团 滴滴","user_name":"作者回复","comment_id":147689,"uid":"1190123","ip_address":"","utype":1,"ctime":1572912638,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1572879411","product_id":100039001,"comment_content":"TMD公司是哪几个公司","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473286,"discussion_content":"头条美团 滴滴","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572912638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019577,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b9/740b3563.jpg","nickname":"陈优雅","note":"","ucode":"D07B8D6BED85A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43731,"discussion_content":"头条，美团，滴滴？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572886904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147669,"user_name":"Sophomores","can_delete":false,"product_type":"c1","uid":1202241,"ip_address":"","ucode":"5811D65168461C","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/41/c3ed2a69.jpg","comment_is_top":false,"comment_ctime":1572878271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572878271","product_id":100039001,"comment_content":"野路子出发，没怎么重视设计模式，现在学习好好补补基础","like_count":0},{"had_liked":false,"id":147658,"user_name":"logant","can_delete":false,"product_type":"c1","uid":1244556,"ip_address":"","ucode":"F7AC53F477BE8D","user_header":"https://static001.geekbang.org/account/avatar/00/12/fd/8c/357dc701.jpg","comment_is_top":false,"comment_ctime":1572877079,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572877079","product_id":100039001,"comment_content":"应对面试，告别烂代码写出好代码，提高复杂设计能力，读懂框架读懂源码，通过代码提高影响力<br>平时使用的模式比较少，只是了解些，单例，工厂，模板","like_count":0},{"had_liked":false,"id":147647,"user_name":"小可爱(๑• . •๑)","can_delete":false,"product_type":"c1","uid":1106190,"ip_address":"","ucode":"1E97973449DBDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/0e/2912db26.jpg","comment_is_top":false,"comment_ctime":1572875995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572875995","product_id":100039001,"comment_content":"1、设计模式的看法：超级重要，自己也啃书五六遍了，但是收效甚微啊，希望跟着争哥啃下这块骨头。<br>2、设计模式在平时开发的时候：①订单的状态扭转使用了状态机模式。②线程池等---工厂模式。","like_count":0},{"had_liked":false,"id":147646,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1572875909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572875909","product_id":100039001,"comment_content":"平常单例模式和工厂模式用的比较多，哈哈，惭愧","like_count":0},{"had_liked":false,"id":147644,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1572875857,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572875857","product_id":100039001,"comment_content":"设计模式我是觉得很重要的，对于项目的整体设计，代码的可读性可扩展性是非常重要的。有时候看源码确实看不太懂，就是因为自己基础不够。之前也一直想着学习设计模式，买了书也就看了一下下后面就没看了，要坚持啊。让自己变得更优秀","like_count":0},{"had_liked":false,"id":147622,"user_name":"程序员的冬天","can_delete":false,"product_type":"c1","uid":1098029,"ip_address":"","ucode":"79CFC94CB1F92D","user_header":"https://static001.geekbang.org/account/avatar/00/10/c1/2d/9186e340.jpg","comment_is_top":false,"comment_ctime":1572873843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572873843","product_id":100039001,"comment_content":"我目前处于的阶段就是一般的设计模式看得出来，自己动手没写过，现在读框架的源码已经有点力不从心，感觉工作几年了，也是一直处于熟悉框架的工程中，希望这次坚持下来，提升自己写复杂代码的能力，而不是一直写一些CRUD代码。","like_count":0},{"had_liked":false,"id":147617,"user_name":"Juntíng","can_delete":false,"product_type":"c1","uid":1039290,"ip_address":"","ucode":"F6A3B528D6F3FD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/ba/304a9a4a.jpg","comment_is_top":false,"comment_ctime":1572873393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572873393","product_id":100039001,"comment_content":"设计模式很重要一直都知道，但一直没有注重这块，没有真正理解设计模式带来的便利。在大量业务、开发任务下，快决定了一切，就更不可能在自己学的半斤八两的情况下使用到一些设计模式。<br><br>在项目中运用到的最多的也就是观察者模式、单例模式、工厂模式。","like_count":0},{"had_liked":false,"id":147607,"user_name":"黄闻涛","can_delete":false,"product_type":"c1","uid":1730455,"ip_address":"","ucode":"F3FB0C699B22ED","user_header":"https://static001.geekbang.org/account/avatar/00/1a/67/97/cbf60dab.jpg","comment_is_top":false,"comment_ctime":1572872910,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572872910","product_id":100039001,"comment_content":"设计通用模版完全不知道从何下手<br><br>很多代码框架看的懂然后就没然后了","like_count":0},{"had_liked":false,"id":147596,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1572872199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572872199","product_id":100039001,"comment_content":"听说过几个模式，Android开发中涉及到Builder模式构建对象，Adapter模式来填充数据，应该还有命令模式。不过仅仅是了解，自己不敢想去使用 :-)","like_count":0},{"had_liked":false,"id":147590,"user_name":"。。。","can_delete":false,"product_type":"c1","uid":1365578,"ip_address":"","ucode":"7F943EEB55560C","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/4a/159db001.jpg","comment_is_top":false,"comment_ctime":1572871895,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572871895","product_id":100039001,"comment_content":"会说也是一种本领，我的先学会去说，嘿嘿。","like_count":0},{"had_liked":false,"id":147584,"user_name":"cnJun","can_delete":false,"product_type":"c1","uid":1412258,"ip_address":"","ucode":"67DC484BB56424","user_header":"https://static001.geekbang.org/account/avatar/00/15/8c/a2/c7be644d.jpg","comment_is_top":false,"comment_ctime":1572871297,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572871297","product_id":100039001,"comment_content":"为什么要学习设计模式：<br>1、应对面试<br>2、写高质量代码<br>3、读源码<br><br>话题讨论：<br>1、聊一聊你对设计模式相关知识的重要性的看法<br>认为不懂设计模式很难写出高质量代码，不想整天CRUD，想有自己的思想。另一个就是读源码，发现很多源码真的用得好多设计模式，一直很难读懂。<br>2、在你过往的项目开发中，有没有用过某种设计模式？是在什么场景下应用的？解决了什么问题？<br>单例模式，数据分析时用的。","like_count":0},{"had_liked":false,"id":147565,"user_name":"A^Lee","can_delete":false,"product_type":"c1","uid":1703333,"ip_address":"","ucode":"266466CFB22321","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/a5/bef6b5f6.jpg","comment_is_top":false,"comment_ctime":1572870272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572870272","product_id":100039001,"comment_content":"我一直认为阅读优秀的源码是一名程序员提升编码能力的捷径，但是每次去阅读源码就会遇到争哥说道的问题就是代码跳来跳去一头雾水。我一直想提高一下我阅读源码的能力，现在终于找到问题症结所在。之前也有看过设计模式书籍，感觉就是继承啊接口啊之类的排列组合，感觉只是在解决某些问题的同时为了提高可扩展性降低耦合度所抽象出来的模式，也动手敲过书中猫狗车的例子，但是感觉还是不知道该怎样用到实际开发中。所以我非常非常期待争哥的这门课程！","like_count":0},{"had_liked":false,"id":147560,"user_name":"葛学强","can_delete":false,"product_type":"c1","uid":1619767,"ip_address":"","ucode":"76A0CC9E1B54DC","user_header":"https://static001.geekbang.org/account/avatar/00/18/b7/37/171c307e.jpg","comment_is_top":false,"comment_ctime":1572869851,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869851","product_id":100039001,"comment_content":"单例模式用的比较多","like_count":0},{"had_liked":false,"id":147559,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1572869825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869825","product_id":100039001,"comment_content":"有些设计模式平时很少见，底层框架有的用，用的也不多，很多时候都是看完理解过后忘😓","like_count":0},{"had_liked":false,"id":147555,"user_name":"　扬帆丶启航　","can_delete":false,"product_type":"c1","uid":1235282,"ip_address":"","ucode":"4079D0889CD86C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/52/73351eab.jpg","comment_is_top":false,"comment_ctime":1572869583,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869583","product_id":100039001,"comment_content":"设计模式可以帮助我们更好的去写出高质量的代码，还能帮助我们在阅读代码的时候去理解作者的设计理念，去理解作者的意图，对于我们编写，阅读代码有这很好的帮助。目前就了解过单例，工厂，代理模式希望可以跟着老师把设计模式学的透彻。","like_count":0},{"had_liked":false,"id":147554,"user_name":"GeekAmI","can_delete":false,"product_type":"c1","uid":1005030,"ip_address":"","ucode":"232C0B6DFB9F56","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/e6/87197b10.jpg","comment_is_top":false,"comment_ctime":1572869537,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869537","product_id":100039001,"comment_content":"线程池封装成一个单例工具类，使用者简单了很多；<br>Netty服务端的handler，封装成单例类，减少每次链接重复创建对象。","like_count":0},{"had_liked":false,"id":147550,"user_name":"ruleGreen","can_delete":false,"product_type":"c1","uid":1314537,"ip_address":"","ucode":"FA4D36B97212A1","user_header":"https://static001.geekbang.org/account/avatar/00/14/0e/e9/929c5c73.jpg","comment_is_top":false,"comment_ctime":1572869407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869407","product_id":100039001,"comment_content":"之前实习的时候用过建造者模式，也不知道为啥，就是当时的leader把代码重构了，导致我写的代码有bug","like_count":0},{"had_liked":false,"id":147548,"user_name":"多多洛","can_delete":false,"product_type":"c1","uid":1233870,"ip_address":"","ucode":"5801171C2D2F21","user_header":"https://static001.geekbang.org/account/avatar/00/12/d3/ce/8ed72840.jpg","comment_is_top":false,"comment_ctime":1572869322,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869322","product_id":100039001,"comment_content":"通用领域，规范大同小异，这时候策略模式是最好的解决方案。","like_count":0},{"had_liked":false,"id":147546,"user_name":"阳光很轻","can_delete":false,"product_type":"c1","uid":1619031,"ip_address":"","ucode":"73408E2DA4F10D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKE7VtDBFkSht6VgE4UZL82SlUrDXKVaGVibJSNXsVhfrPTNQ2OfrrOGu7ugMxwa0osyZibRqZjh5KQ/132","comment_is_top":false,"comment_ctime":1572869248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572869248","product_id":100039001,"comment_content":"我觉得设计模式的使用最直接的好处就是增加了代码的可读性和可维护性，可扩展性，同时增加自己的架构能力。这几点对项目而言至关重要。<br>平时用的最多的设计模式是单件，工厂，委托和订阅模式，希望能熟悉更多的设计模式，并且应用到合适的场景中，提高项目的价值。","like_count":0},{"had_liked":false,"id":147533,"user_name":"阿辉","can_delete":false,"product_type":"c1","uid":1084775,"ip_address":"","ucode":"0D4D4C855E7C42","user_header":"https://static001.geekbang.org/account/avatar/00/10/8d/67/2471da5b.jpg","comment_is_top":false,"comment_ctime":1572868529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572868529","product_id":100039001,"comment_content":"没学过设计模式，看到产品需求，脑子有好多实现方法，这样写可以，那样写也可以，但哪种都觉得不够好。","like_count":0},{"had_liked":false,"id":147530,"user_name":"李恒达","can_delete":false,"product_type":"c1","uid":1120147,"ip_address":"","ucode":"E9F1AC9E74CA16","user_header":"https://static001.geekbang.org/account/avatar/00/11/17/93/981dc959.jpg","comment_is_top":false,"comment_ctime":1572868330,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1572868330","product_id":100039001,"comment_content":"最近给组里开发了个工具，本来好好的，结果需求有了一些变化，想改一下发现跟要重写差不多了，感觉要是有设计模式相关的积累就好了😂😂","like_count":0},{"had_liked":false,"id":147529,"user_name":"不破楼兰终不还","can_delete":false,"product_type":"c1","uid":1145867,"ip_address":"","ucode":"F06EEF04552A90","user_header":"https://static001.geekbang.org/account/avatar/00/11/7c/0b/2b5e5da5.jpg","comment_is_top":false,"comment_ctime":1572868257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572868257","product_id":100039001,"comment_content":"感触深刻的算是看开源框架的源码了，各种继承、组合为啥要这么搞啊？虽然了解个大概，但是都是皮毛，往往研究起来就是从看码到放弃&#47;(ㄒoㄒ)&#47;~~  <br>工作中的设计模式真的是用的太少了，大部分都是框架中实现的……","like_count":0},{"had_liked":false,"id":147527,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1572868156,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572868156","product_id":100039001,"comment_content":"接手过一个服务，因为代码可读性，可维护性和稳定性已经到了崩溃的地步，修改不如推倒重来的情况下推倒重来了。<br>也经历过两版，现在的这版本深刻的体会到了良好的模块划分，代码结构是多么重要，不但是现在的维护，甚至是后续的微服务拆分都会受益。也更体会到自己的还有很多细节做的不好，加油，边学边结合现状思考，学以致用！<br>用到的模式：策略模式、适配器模式、工厂模式、模版模式、责任链模式、单例模式、状态机、状态机","like_count":0},{"had_liked":false,"id":147526,"user_name":"爱吃彩虹糖的猫~","can_delete":false,"product_type":"c1","uid":1261108,"ip_address":"","ucode":"9EC7A8FD4B7DB1","user_header":"https://static001.geekbang.org/account/avatar/00/13/3e/34/dd0a3c61.jpg","comment_is_top":false,"comment_ctime":1572868126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572868126","product_id":100039001,"comment_content":"一、对设计模式相关知识的重要性的看法：<br>1、设计模式很重要，对于优化系统结构，代码优化有着质一样的提升。<br>2、之前不知道设计模式的时候，写代码有些不同情况的操作都是写出来怪怪的，后来知道了有个“策略模式”。<br>二、用过的设计模式<br>001 单例模式，之前刚学会线程池的时候，哪里需要用到多线程，就在那个地方new ThreadPoolExecutor（），后面new得多了，好像提示有重复代码，网上搜了一下，好像可以写成单例模式……真的是太赞了虽然有见过单例模式，真正自己写一个单例在项目中用到还是不多的。","like_count":0},{"had_liked":false,"id":147521,"user_name":"jeffery","can_delete":false,"product_type":"c1","uid":1219972,"ip_address":"","ucode":"35E2DAA386FB86","user_header":"https://static001.geekbang.org/account/avatar/00/12/9d/84/171b2221.jpg","comment_is_top":false,"comment_ctime":1572868016,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572868016","product_id":100039001,"comment_content":"没搞过开发果断购买 希望给点学习建议 谢谢争哥","like_count":0},{"had_liked":false,"id":147518,"user_name":"游侠儿","can_delete":false,"product_type":"c1","uid":1448050,"ip_address":"","ucode":"18C5FD5F5BD7F3","user_header":"https://static001.geekbang.org/account/avatar/00/16/18/72/eb388a89.jpg","comment_is_top":false,"comment_ctime":1572867894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572867894","product_id":100039001,"comment_content":"设计模式就是套路，是针对某些特定问题的通用解决方案，通过学习设计模式可以在遇到类似需求的时候迅速找到相对比较完善的解决方法，也可以通过设计模式原则对自己的代码进行评估以写出高质量的代码<br>平常用到比较多的设计模式有下面几个<br>单例模式：用于各种管理类<br>发布订阅模式：用于页面间通讯<br>命令队列：用于消息发出时间和执行时间之间的解耦，常用于角色移动，战斗播报等<br>工厂模式：统一管理对象的创建，常于对象池配合以实现对象复用<br>适配器模式：常用语SDK的接入","like_count":0},{"had_liked":false,"id":147507,"user_name":"moqifei","can_delete":false,"product_type":"c1","uid":1358410,"ip_address":"","ucode":"E0A6C858B78A3A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGovXf8jNP5ZqHsDKLwajjicbFwpX9on1xiaJDR4CgWaWP2KcfOdneasBfKFo3dO3dwQyGG6WjK40w/132","comment_is_top":false,"comment_ctime":1572867542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572867542","product_id":100039001,"comment_content":"通用设计原则：高内聚，低耦合 <br>实用设计原则：SOLID<br>设计原则是道，设计模式是术，编写高质量代码需要道与术的融合。<br><br>","like_count":0},{"had_liked":false,"id":147504,"user_name":"Arthur.Li","can_delete":false,"product_type":"c1","uid":1005824,"ip_address":"","ucode":"EC2436A5136C13","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/00/6d14972a.jpg","comment_is_top":false,"comment_ctime":1572867174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572867174","product_id":100039001,"comment_content":"这两门课真是读源码利器","like_count":0},{"had_liked":false,"id":147491,"user_name":"中年男子","can_delete":false,"product_type":"c1","uid":1039204,"ip_address":"","ucode":"027C86B3370150","user_header":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","comment_is_top":false,"comment_ctime":1572866871,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1572866871","product_id":100039001,"comment_content":"重要性:1.懂设计模式，沟通起来会更方便顺畅(亲身经历)<br>2.能写出优秀的代码，良好的代码结构，代码层次清晰<br><br>自己只用过单例模式，当时场景是一个功能模块要被几个类用到，为避免为现有的类的一些方法增加参数传递，做了一个全局的单例方便其他几个类调用","like_count":0},{"had_liked":false,"id":147487,"user_name":"weineel","can_delete":false,"product_type":"c1","uid":1049741,"ip_address":"","ucode":"6DC6EF4F256A53","user_header":"https://static001.geekbang.org/account/avatar/00/10/04/8d/005c2ff3.jpg","comment_is_top":false,"comment_ctime":1572866602,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1572866602","product_id":100039001,"comment_content":"设计原则和设计模式是程序员的通用语言。<br>作为大前端，用的最多就是工厂、策略、单例、观察者了，偶尔用到享元。","like_count":0},{"had_liked":false,"id":147480,"user_name":"IT蜗壳-Tango","can_delete":false,"product_type":"c1","uid":1000612,"ip_address":"","ucode":"92330844C1EF9C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/a4/7a45d979.jpg","comment_is_top":false,"comment_ctime":1572866123,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1572866123","product_id":100039001,"comment_content":"11&#47;04 打卡","like_count":0},{"had_liked":false,"id":147473,"user_name":"Chandler","can_delete":false,"product_type":"c1","uid":1140165,"ip_address":"","ucode":"F4B49A2D0CB11F","user_header":"https://static001.geekbang.org/account/avatar/00/11/65/c5/b379fc6d.jpg","comment_is_top":false,"comment_ctime":1572865728,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572865728","product_id":100039001,"comment_content":"平时最常用的是策略+工厂模式，单例。","like_count":0},{"had_liked":false,"id":147469,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1572865563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572865563","product_id":100039001,"comment_content":"之前看过《大话设计模式》一书，实际工作中只应用了简单的solid法则，并没有应用特定的设计模式，这块积累非常欠缺。希望通过学习该专栏，并加上实际应用，能补上这一块","like_count":0},{"had_liked":false,"id":147463,"user_name":"nsn_huang","can_delete":false,"product_type":"c1","uid":1041796,"ip_address":"","ucode":"D8C6DA6530F3B6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/84/4a01e18d.jpg","comment_is_top":false,"comment_ctime":1572865310,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572865310","product_id":100039001,"comment_content":"真的很重要，最大的体会就是看框架源码的时候，太复杂了，简直要裂。<br>了解过 单例模式，工厂模式，简单工厂模式，责任链模式，监听者模式，都是琐碎的了解，设计模式的知识没有成体系","like_count":0},{"had_liked":false,"id":147459,"user_name":"随机的","can_delete":false,"product_type":"c1","uid":1194535,"ip_address":"","ucode":"D8319136F27CBA","user_header":"https://static001.geekbang.org/account/avatar/00/12/3a/27/6bb0bb01.jpg","comment_is_top":false,"comment_ctime":1572864939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572864939","product_id":100039001,"comment_content":"用过策略模式，平时看的源码中最多看到的就是这种模式，比如JDK File 类 public String[] list(FilenameFilter filter) {}，典型的策略模式","like_count":0},{"had_liked":false,"id":147450,"user_name":"lijun","can_delete":false,"product_type":"c1","uid":1116095,"ip_address":"","ucode":"69EC8B86211AD9","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/bf/49f385ec.jpg","comment_is_top":false,"comment_ctime":1572864611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572864611","product_id":100039001,"comment_content":"工作中用过观察者模式，中介者模式，代理模式，命令模式，装饰者模式。","like_count":0},{"had_liked":false,"id":147442,"user_name":"刘旺旺","can_delete":false,"product_type":"c1","uid":1086132,"ip_address":"","ucode":"A9E89684BAE08D","user_header":"https://static001.geekbang.org/account/avatar/00/10/92/b4/bd466eed.jpg","comment_is_top":false,"comment_ctime":1572864010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572864010","product_id":100039001,"comment_content":"很多时候都能听到或看到设计模式很重要，也看过一些文章和书去了解，但还是懵懵懂懂，用就更少了。加油，一步步向前！","like_count":0},{"had_liked":false,"id":147431,"user_name":"Aliliin","can_delete":false,"product_type":"c1","uid":1025239,"ip_address":"","ucode":"61F9A09BB6650F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/d7/5d2bfaa7.jpg","comment_is_top":false,"comment_ctime":1572863673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572863673","product_id":100039001,"comment_content":"只用过单例模式和抽象工厂模式。","like_count":0},{"had_liked":false,"id":147430,"user_name":"potato00fa","can_delete":false,"product_type":"c1","uid":1307080,"ip_address":"","ucode":"D179E68D87CC50","user_header":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","comment_is_top":false,"comment_ctime":1572863650,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1572863650","product_id":100039001,"comment_content":"如果写代码时完全不使用任何设计模式的面向过程式开发，只需要短短一星期，就会完全忘记自己之前写的啥","like_count":0,"discussions":[{"author":{"id":1307080,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f1/c8/8e6dc340.jpg","nickname":"potato00fa","note":"","ucode":"D179E68D87CC50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43224,"discussion_content":"自己目前使用的最多的是工厂模式，没有工厂模式之前，各种new对象时的getter、setter代码满天飞，然后new对象new多了以后，发现还需要原型模式来深克隆对象，各种浅拷贝的工具类和框架都不满足，于是又自己实现深拷贝的原型模式。\n现在在写一些函数的时候发现可能会有函数重试的需求，于是又开始搞策略模式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572864085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147412,"user_name":"cc","can_delete":false,"product_type":"c1","uid":1592092,"ip_address":"","ucode":"FF41E5D87BAD76","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/1c/5eb03a91.jpg","comment_is_top":false,"comment_ctime":1572862657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572862657","product_id":100039001,"comment_content":"学习专栏的重要性老师已经总结好了：<br><br>应对面试中的设计模式相关问题；<br>告别写被人吐槽的烂代码；<br>提高复杂代码的设计和开发能力；<br>让读源码、学框架事半功倍；<br>为你的职场发展做铺垫。","like_count":0},{"had_liked":false,"id":147402,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1572862407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572862407","product_id":100039001,"comment_content":"只用过单例，工厂，观察者，感觉用了这些设计模式可以让整个代码工程更易读，更好找到入口","like_count":0},{"had_liked":false,"id":147383,"user_name":"丿淡忘","can_delete":false,"product_type":"c1","uid":1139645,"ip_address":"","ucode":"604AE01961A026","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/bd/80f587ad.jpg","comment_is_top":false,"comment_ctime":1572861436,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1572861436","product_id":100039001,"comment_content":"单例模式，主要用于给界面提供服务的接口","like_count":0},{"had_liked":false,"id":147373,"user_name":"虎哥","can_delete":false,"product_type":"c1","uid":1185061,"ip_address":"","ucode":"29D604EC85D3BC","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/25/1d3d616f.jpg","comment_is_top":false,"comment_ctime":1572861311,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572861311","product_id":100039001,"comment_content":"设计模式是特定问题的解决的方式，不能为了用模式而用，应该在合适的场景下选择性的使用，也可以在已有的基础上改造，组合出新的，适合具体场景的模式。","like_count":0},{"had_liked":false,"id":147371,"user_name":"姑苏小沈🏃🎸","can_delete":false,"product_type":"c1","uid":1085941,"ip_address":"","ucode":"FFC9C7BC1C6B4B","user_header":"https://static001.geekbang.org/account/avatar/00/10/91/f5/6881f336.jpg","comment_is_top":false,"comment_ctime":1572861169,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572861169","product_id":100039001,"comment_content":"学习设计模式一个问题是，平常用的机会少，学完容易忘记。","like_count":0},{"had_liked":false,"id":147366,"user_name":"Zed","can_delete":false,"product_type":"c1","uid":1184951,"ip_address":"","ucode":"09947C76F55A46","user_header":"https://static001.geekbang.org/account/avatar/00/12/14/b7/bb6a1fd4.jpg","comment_is_top":false,"comment_ctime":1572861069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572861069","product_id":100039001,"comment_content":"1：没有良好的语言基础设计基础好的架构和代码结构，所以能够理解和运用设计模式可以说是开发技能的统筹能力，能够体现出工程师的“质量”；<br>2：工厂模式，代理模式，装饰器模式，装饰器模式，实现了应用中不同种对象的组合运行，灵活扩展，不改原来代码情况为对象添加新功能","like_count":0},{"had_liked":false,"id":147349,"user_name":"Luoang","can_delete":false,"product_type":"c1","uid":1566097,"ip_address":"","ucode":"E7D227E2E00796","user_header":"https://static001.geekbang.org/account/avatar/00/17/e5/91/d043b8be.jpg","comment_is_top":false,"comment_ctime":1572860434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572860434","product_id":100039001,"comment_content":"打卡！滴滴","like_count":0},{"had_liked":false,"id":147325,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1572859146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572859146","product_id":100039001,"comment_content":"用得最多的就是工厂模式，会不会有点失败:(","like_count":0},{"had_liked":false,"id":147311,"user_name":"zs阿帅","can_delete":false,"product_type":"c1","uid":1141173,"ip_address":"","ucode":"07A54AE7F1CAFF","user_header":"https://static001.geekbang.org/account/avatar/00/11/69/b5/1e1731cc.jpg","comment_is_top":false,"comment_ctime":1572858470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572858470","product_id":100039001,"comment_content":"终于等到了","like_count":0}]}