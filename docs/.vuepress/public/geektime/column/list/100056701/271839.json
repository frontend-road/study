{"id":271839,"title":"05 | 内存快照：宕机后，Redis如何实现快速恢复？","content":"<p>你好，我是蒋德钧。</p><p>上节课，我们学习了Redis避免数据丢失的AOF方法。这个方法的好处，是每次执行只需要记录操作命令，需要持久化的数据量不大。一般而言，只要你采用的不是always的持久化策略，就不会对性能造成太大影响。</p><p>但是，也正因为记录的是操作命令，而不是实际的数据，所以，用AOF方法进行故障恢复的时候，需要逐一把操作日志都执行一遍。如果操作日志非常多，Redis就会恢复得很缓慢，影响到正常使用。这当然不是理想的结果。那么，还有没有既可以保证可靠性，还能在宕机时实现快速恢复的其他方法呢？</p><p>当然有了，这就是我们今天要一起学习的另一种持久化方法：<strong>内存快照</strong>。所谓内存快照，就是指内存中的数据在某一个时刻的状态记录。这就类似于照片，当你给朋友拍照时，一张照片就能把朋友一瞬间的形象完全记下来。</p><p>对Redis来说，它实现类似照片记录效果的方式，就是把某一时刻的状态以文件的形式写到磁盘上，也就是快照。这样一来，即使宕机，快照文件也不会丢失，数据的可靠性也就得到了保证。这个快照文件就称为RDB文件，其中，RDB就是Redis DataBase的缩写。</p><p>和AOF相比，RDB记录的是某一时刻的数据，并不是操作，所以，在做数据恢复时，我们可以直接把RDB文件读入内存，很快地完成恢复。听起来好像很不错，但内存快照也并不是最优选项。为什么这么说呢？</p><!-- [[[read_end]]] --><p>我们还要考虑两个关键问题：</p><ul>\n<li>对哪些数据做快照？这关系到快照的执行效率问题；</li>\n<li>做快照时，数据还能被增删改吗？这关系到Redis是否被阻塞，能否同时正常处理请求。</li>\n</ul><p>这么说可能你还不太好理解，我还是拿拍照片来举例子。我们在拍照时，通常要关注两个问题：</p><ul>\n<li>如何取景？也就是说，我们打算把哪些人、哪些物拍到照片中；</li>\n<li>在按快门前，要记着提醒朋友不要乱动，否则拍出来的照片就模糊了。</li>\n</ul><p>你看，这两个问题是不是非常重要呢？那么，接下来，我们就来具体地聊一聊。先说“取景”问题，也就是我们对哪些数据做快照。</p><h2>给哪些内存数据做快照？</h2><p>Redis的数据都在内存中，为了提供所有数据的可靠性保证，它执行的是<strong>全量快照</strong>，也就是说，把内存中的所有数据都记录到磁盘中，这就类似于给100个人拍合影，把每一个人都拍进照片里。这样做的好处是，一次性记录了所有数据，一个都不少。</p><p>当你给一个人拍照时，只用协调一个人就够了，但是，拍100人的大合影，却需要协调100个人的位置、状态，等等，这当然会更费时费力。同样，给内存的全量数据做快照，把它们全部写入磁盘也会花费很多时间。而且，全量数据越多，RDB文件就越大，往磁盘上写数据的时间开销就越大。</p><p>对于Redis而言，它的单线程模型就决定了，我们要尽量避免所有会阻塞主线程的操作，所以，针对任何操作，我们都会提一个灵魂之问：“它会阻塞主线程吗?”RDB文件的生成是否会阻塞主线程，这就关系到是否会降低Redis的性能。</p><p>Redis提供了两个命令来生成RDB文件，分别是save和bgsave。</p><ul>\n<li>save：在主线程中执行，会导致阻塞；</li>\n<li>bgsave：创建一个子进程，专门用于写入RDB文件，避免了主线程的阻塞，这也是Redis RDB文件生成的默认配置。</li>\n</ul><p>好了，这个时候，我们就可以通过bgsave命令来执行全量快照，这既提供了数据的可靠性保证，也避免了对Redis的性能影响。</p><p>接下来，我们要关注的问题就是，在对内存数据做快照时，这些数据还能“动”吗? 也就是说，这些数据还能被修改吗？ 这个问题非常重要，这是因为，如果数据能被修改，那就意味着Redis还能正常处理写操作。否则，所有写操作都得等到快照完了才能执行，性能一下子就降低了。</p><h2>快照时数据能修改吗?</h2><p>在给别人拍照时，一旦对方动了，那么这张照片就拍糊了，我们就需要重拍，所以我们当然希望对方保持不动。对于内存快照而言，我们也不希望数据“动”。</p><p>举个例子。我们在时刻t给内存做快照，假设内存数据量是4GB，磁盘的写入带宽是0.2GB/s，简单来说，至少需要20s（4/0.2 = 20）才能做完。如果在时刻t+5s时，一个还没有被写入磁盘的内存数据A，被修改成了A’，那么就会破坏快照的完整性，因为A’不是时刻t时的状态。因此，和拍照类似，我们在做快照时也不希望数据“动”，也就是不能被修改。</p><p>但是，如果快照执行期间数据不能被修改，是会有潜在问题的。对于刚刚的例子来说，在做快照的20s时间里，如果这4GB的数据都不能被修改，Redis就不能处理对这些数据的写操作，那无疑就会给业务服务造成巨大的影响。</p><p>你可能会想到，可以用bgsave避免阻塞啊。这里我就要说到一个常见的误区了，<strong>避免阻塞和正常处理写操作并不是一回事</strong>。此时，主线程的确没有阻塞，可以正常接收请求，但是，为了保证快照完整性，它只能处理读操作，因为不能修改正在执行快照的数据。</p><p>为了快照而暂停写操作，肯定是不能接受的。所以这个时候，Redis就会借助操作系统提供的写时复制技术（Copy-On-Write, COW），在执行快照的同时，正常处理写操作。</p><p>简单来说，bgsave子进程是由主线程fork生成的，可以共享主线程的所有内存数据。bgsave子进程运行后，开始读取主线程的内存数据，并把它们写入RDB文件。</p><p>此时，如果主线程对这些数据也都是读操作（例如图中的键值对A），那么，主线程和bgsave子进程相互不影响。但是，如果主线程要修改一块数据（例如图中的键值对C），那么，这块数据就会被复制一份，生成该数据的副本（键值对C’）。然后，主线程在这个数据副本上进行修改。同时，bgsave子进程可以继续把原来的数据（键值对C）写入RDB文件。</p><p><img src=\"https://static001.geekbang.org/resource/image/a2/58/a2e5a3571e200cb771ed8a1cd14d5558.jpg?wh=13333*7500\" alt=\"\" title=\"写时复制机制保证快照期间数据可修改\"></p><p>这既保证了快照的完整性，也允许主线程同时对数据进行修改，避免了对正常业务的影响。</p><p>到这里，我们就解决了对“哪些数据做快照”以及“做快照时数据能否修改”这两大问题：Redis会使用bgsave对当前内存中的所有数据做快照，这个操作是子进程在后台完成的，这就允许主线程同时可以修改数据。</p><p>现在，我们再来看另一个问题：多久做一次快照？我们在拍照的时候，还有项技术叫“连拍”，可以记录人或物连续多个瞬间的状态。那么，快照也适合“连拍”吗？</p><h2>可以每秒做一次快照吗？</h2><p>对于快照来说，所谓“连拍”就是指连续地做快照。这样一来，快照的间隔时间变得很短，即使某一时刻发生宕机了，因为上一时刻快照刚执行，丢失的数据也不会太多。但是，这其中的快照间隔时间就很关键了。</p><p>如下图所示，我们先在T0时刻做了一次快照，然后又在T0+t时刻做了一次快照，在这期间，数据块5和9被修改了。如果在t这段时间内，机器宕机了，那么，只能按照T0时刻的快照进行恢复。此时，数据块5和9的修改值因为没有快照记录，就无法恢复了。</p><p><img src=\"https://static001.geekbang.org/resource/image/71/ab/711c873a61bafde79b25c110735289ab.jpg?wh=3292*1244\" alt=\"\" title=\"快照机制下的数据丢失\"></p><p>所以，要想尽可能恢复数据，t值就要尽可能小，t越小，就越像“连拍”。那么，t值可以小到什么程度呢，比如说是不是可以每秒做一次快照？毕竟，每次快照都是由bgsave子进程在后台执行，也不会阻塞主线程。</p><p>这种想法其实是错误的。虽然bgsave执行时不阻塞主线程，但是，<strong>如果频繁地执行全量快照，也会带来两方面的开销</strong>。</p><p>一方面，频繁将全量数据写入磁盘，会给磁盘带来很大压力，多个快照竞争有限的磁盘带宽，前一个快照还没有做完，后一个又开始做了，容易造成恶性循环。</p><p>另一方面，bgsave子进程需要通过fork操作从主线程创建出来。虽然，子进程在创建后不会再阻塞主线程，但是，fork这个创建过程本身会阻塞主线程，而且主线程的内存越大，阻塞时间越长。如果频繁fork出bgsave子进程，这就会频繁阻塞主线程了（所以，在Redis中如果有一个bgsave在运行，就不会再启动第二个bgsave子进程）。那么，有什么其他好方法吗？</p><p>此时，我们可以做增量快照，所谓增量快照，就是指，做了一次全量快照后，后续的快照只对修改的数据进行快照记录，这样可以避免每次全量快照的开销。</p><p>在第一次做完全量快照后，T1和T2时刻如果再做快照，我们只需要将被修改的数据写入快照文件就行。但是，这么做的前提是，<strong>我们需要记住哪些数据被修改了</strong>。你可不要小瞧这个“记住”功能，它需要我们使用额外的元数据信息去记录哪些数据被修改了，这会带来额外的空间开销问题。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/8a/a5/8a1d515269cd23595ee1813e8dff28a5.jpg?wh=4000*1828\" alt=\"\" title=\"增量快照示意图\"></p><p>如果我们对每一个键值对的修改，都做个记录，那么，如果有1万个被修改的键值对，我们就需要有1万条额外的记录。而且，有的时候，键值对非常小，比如只有32字节，而记录它被修改的元数据信息，可能就需要8字节，这样的画，为了“记住”修改，引入的额外空间开销比较大。这对于内存资源宝贵的Redis来说，有些得不偿失。</p><p>到这里，你可以发现，虽然跟AOF相比，快照的恢复速度快，但是，快照的频率不好把握，如果频率太低，两次快照间一旦宕机，就可能有比较多的数据丢失。如果频率太高，又会产生额外开销，那么，还有什么方法既能利用RDB的快速恢复，又能以较小的开销做到尽量少丢数据呢？</p><p>Redis 4.0中提出了一个<strong>混合使用AOF日志和内存快照</strong>的方法。简单来说，内存快照以一定的频率执行，在两次快照之间，使用AOF日志记录这期间的所有命令操作。</p><p>这样一来，快照不用很频繁地执行，这就避免了频繁fork对主线程的影响。而且，AOF日志也只用记录两次快照间的操作，也就是说，不需要记录所有操作了，因此，就不会出现文件过大的情况了，也可以避免重写开销。</p><p>如下图所示，T1和T2时刻的修改，用AOF日志记录，等到第二次做全量快照时，就可以清空AOF日志，因为此时的修改都已经记录到快照中了，恢复时就不再用日志了。</p><p><img src=\"https://static001.geekbang.org/resource/image/e4/20/e4c5846616c19fe03dbf528437beb320.jpg?wh=3508*2183\" alt=\"\" title=\"内存快照和AOF混合使用\"></p><p>这个方法既能享受到RDB文件快速恢复的好处，又能享受到AOF只记录操作命令的简单优势，颇有点“鱼和熊掌可以兼得”的感觉，建议你在实践中用起来。</p><h2>小结</h2><p>这节课，我们学习了Redis用于避免数据丢失的内存快照方法。这个方法的优势在于，可以快速恢复数据库，也就是只需要把RDB文件直接读入内存，这就避免了AOF需要顺序、逐一重新执行操作命令带来的低效性能问题。</p><p>不过，内存快照也有它的局限性。它拍的是一张内存的“大合影”，不可避免地会耗时耗力。虽然，Redis设计了bgsave和写时复制方式，尽可能减少了内存快照对正常读写的影响，但是，频繁快照仍然是不太能接受的。而混合使用RDB和AOF，正好可以取两者之长，避两者之短，以较小的性能开销保证数据可靠性和性能。</p><p>最后，关于AOF和RDB的选择问题，我想再给你提三点建议：</p><ul>\n<li>数据不能丢失时，内存快照和AOF的混合使用是一个很好的选择；</li>\n<li>如果允许分钟级别的数据丢失，可以只使用RDB；</li>\n<li>如果只用AOF，优先使用everysec的配置选项，因为它在可靠性和性能之间取了一个平衡。</li>\n</ul><h2>每课一问</h2><p>我曾碰到过这么一个场景：我们使用一个2核CPU、4GB内存、500GB磁盘的云主机运行Redis，Redis数据库的数据量大小差不多是2GB，我们使用了RDB做持久化保证。当时Redis的运行负载以修改操作为主，写读比例差不多在8:2左右，也就是说，如果有100个请求，80个请求执行的是修改操作。你觉得，在这个场景下，用RDB做持久化有什么风险吗？你能帮着一起分析分析吗？</p><p>到这里，关于持久化我们就讲完了，这块儿内容是熟练掌握Redis的基础，建议你一定好好学习下这两节课。如果你觉得有收获，希望你能帮我分享给更多的人，帮助更多人解决持久化的问题。</p>","neighbors":{"left":{"article_title":"04 | AOF日志：宕机了，Redis如何避免数据丢失？","id":271754},"right":{"article_title":"06 | 数据同步：主从库如何实现数据一致？","id":272852}},"comments":[{"had_liked":false,"id":241566,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":true,"comment_ctime":1597339380,"is_pvip":true,"replies":[{"id":"89332","content":"除了考虑了内存风险，还考虑了CPU风险。赞！先置个顶 :D<br><br>关于绑核的操作，后面再和Kaito同学聊聊，绑核也有些值得探讨的地方的。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597579629,"ip_address":"","comment_id":241566,"utype":1}],"discussion_count":113,"race_medal":0,"score":"9.2233759425773998e+18","product_id":100056701,"comment_content":"2核CPU、4GB内存、500G磁盘，Redis实例占用2GB，写读比例为8:2，此时做RDB持久化，产生的风险主要在于 CPU资源 和 内存资源 这2方面：<br><br>\ta、内存资源风险：Redis fork子进程做RDB持久化，由于写的比例为80%，那么在持久化过程中，“写实复制”会重新分配整个实例80%的内存副本，大约需要重新分配1.6GB内存空间，这样整个系统的内存使用接近饱和，如果此时父进程又有大量新key写入，很快机器内存就会被吃光，如果机器开启了Swap机制，那么Redis会有一部分数据被换到磁盘上，当Redis访问这部分在磁盘上的数据时，性能会急剧下降，已经达不到高性能的标准（可以理解为武功被废）。如果机器没有开启Swap，会直接触发OOM，父子进程会面临被系统kill掉的风险。<br><br>\tb、CPU资源风险：虽然子进程在做RDB持久化，但生成RDB快照过程会消耗大量的CPU资源，虽然Redis处理处理请求是单线程的，但Redis Server还有其他线程在后台工作，例如AOF每秒刷盘、异步关闭文件描述符这些操作。由于机器只有2核CPU，这也就意味着父进程占用了超过一半的CPU资源，此时子进程做RDB持久化，可能会产生CPU竞争，导致的结果就是父进程处理请求延迟增大，子进程生成RDB快照的时间也会变长，整个Redis Server性能下降。<br><br>\tc、另外，可以再延伸一下，老师的问题没有提到Redis进程是否绑定了CPU，如果绑定了CPU，那么子进程会继承父进程的CPU亲和性属性，子进程必然会与父进程争夺同一个CPU资源，整个Redis Server的性能必然会受到影响！所以如果Redis需要开启定时RDB和AOF重写，进程一定不要绑定CPU。","like_count":910,"discussions":[{"author":{"id":1266098,"avatar":"https://static001.geekbang.org/account/avatar/00/13/51/b2/e4281116.jpg","nickname":"敲键盘的猿","note":"","ucode":"23BEC050CF7CD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340144,"discussion_content":"好家伙，我直接好家伙，买这个课感觉真特么太值了","likes_number":32,"is_delete":false,"is_hidden":false,"ctime":1609916098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2377406,"avatar":"","nickname":"杨毅","note":"","ucode":"189923D892549F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342472,"discussion_content":"屌， 每篇文章的评论， 就属你最屌","likes_number":26,"is_delete":false,"is_hidden":false,"ctime":1610691400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211790,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7d/8e/bb16d414.jpg","nickname":"Wangxi","note":"","ucode":"C25A9A14179930","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298688,"discussion_content":"这是专门来砸场子的吧","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1597378793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1211790,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7d/8e/bb16d414.jpg","nickname":"Wangxi","note":"","ucode":"C25A9A14179930","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":298696,"discussion_content":"不敢不敢，一起进步。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1597379689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298688,"ip_address":""},"score":298696,"extra":""}]},{"author":{"id":1135948,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/4c/df7ff549.jpg","nickname":"星星","note":"","ucode":"206B5063D53B01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338526,"discussion_content":"补充一下，大量的写时复制会产生很多页中断，也会大量的消耗cpu","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1609306741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1135948,"avatar":"https://static001.geekbang.org/account/avatar/00/11/55/4c/df7ff549.jpg","nickname":"星星","note":"","ucode":"206B5063D53B01","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569283,"discussion_content":"只要触发写操作 就会由操作系统生成一个page fault","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651393903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":338526,"ip_address":""},"score":569283,"extra":""}]},{"author":{"id":1227840,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","nickname":"大力水手Jerry","note":"","ucode":"E4A6C71E275DB5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374885,"discussion_content":"第一个内存方面，题设是读写比例为2：8，与修改的内容占全局数据的80%，是两回事。如果修改的数据比较集中，比如极端情况下所有修改只是更新10条全局记录，那么这个写时复制并不会消耗太多的内存。","likes_number":12,"is_delete":false,"is_hidden":false,"ctime":1621400820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2142543,"avatar":"https://static001.geekbang.org/account/avatar/00/20/b1/4f/f0b9b11d.jpg","nickname":"Inno","note":"","ucode":"8CB14D9A54CC9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1227840,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/40/2279cfb5.jpg","nickname":"大力水手Jerry","note":"","ucode":"E4A6C71E275DB5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381453,"discussion_content":"极端情况下，那10条记录就是hot key了。对于一般情形，在业务设计合理的情况下，读写比例与修改数据占比也相近吧。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625061818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374885,"ip_address":""},"score":381453,"extra":""},{"author":{"id":1672786,"avatar":"https://static001.geekbang.org/account/avatar/00/19/86/52/91c7d112.jpg","nickname":"Garen","note":"","ucode":"0608C88F83EF0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2142543,"avatar":"https://static001.geekbang.org/account/avatar/00/20/b1/4f/f0b9b11d.jpg","nickname":"Inno","note":"","ucode":"8CB14D9A54CC9B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385430,"discussion_content":"一天86400s，redis只收到10个请求，8个是修改操作。你说这8个操作能影响redis做rdb？虽然是夸张的手法，但是道理都是一样的，错了就是错了，有啥好反驳的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1627034623,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":381453,"ip_address":""},"score":385430,"extra":""},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1672786,"avatar":"https://static001.geekbang.org/account/avatar/00/19/86/52/91c7d112.jpg","nickname":"Garen","note":"","ucode":"0608C88F83EF0C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575493,"discussion_content":"看把你认真的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1654883473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":385430,"ip_address":""},"score":575493,"extra":""}]},{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303088,"discussion_content":"班长，建个群吧","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1599134662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323757,"discussion_content":"看我个人主页加微信进群。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1604992137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303088,"ip_address":""},"score":323757,"extra":""},{"author":{"id":2306514,"avatar":"https://static001.geekbang.org/account/avatar/00/23/31/d2/56bf47c8.jpg","nickname":"薛定谔的猫","note":"","ucode":"315E081F9E5D74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":326645,"discussion_content":"怎么看主页 求拉群","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605633819,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":323757,"ip_address":""},"score":326645,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2306514,"avatar":"https://static001.geekbang.org/account/avatar/00/23/31/d2/56bf47c8.jpg","nickname":"薛定谔的猫","note":"","ucode":"315E081F9E5D74","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326657,"discussion_content":"加微信，拉你进去。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605656803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":326645,"ip_address":""},"score":326657,"extra":""}]},{"author":{"id":1221965,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/4d/08087780.jpg","nickname":"Intellij","note":"","ucode":"4B368BFD7B501D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346361,"discussion_content":"自古一楼出人才，果然不错","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1611923294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1144021,"avatar":"https://static001.geekbang.org/account/avatar/00/11/74/d5/de9641dc.jpg","nickname":"poettian","note":"","ucode":"26EE408F908D12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298682,"discussion_content":"针对a风险，这个应该是极端的情况下吧，就是在RDB期间，修改了整个redis 80%的数据","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1597377781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1144021,"avatar":"https://static001.geekbang.org/account/avatar/00/11/74/d5/de9641dc.jpg","nickname":"poettian","note":"","ucode":"26EE408F908D12","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298693,"discussion_content":"不是极端情况，有些业务场景就是80%的写。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597379626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298682,"ip_address":""},"score":298693,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1144021,"avatar":"https://static001.geekbang.org/account/avatar/00/11/74/d5/de9641dc.jpg","nickname":"poettian","note":"","ucode":"26EE408F908D12","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298699,"discussion_content":"问题也说了，需要考虑潜在风险，不排除这种情况。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597379950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298682,"ip_address":""},"score":298699,"extra":""},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":584387,"discussion_content":"这里，如果考虑潜在的风险，个人认为应该考虑成全量的内存数据拷贝，毕竟80%的读写，是有可能占到几乎全量内存的容量的，当然如果集合业务分析修改的数据的规律，是更好的～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660799407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298699,"ip_address":"浙江"},"score":584387,"extra":""}]},{"author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300560,"discussion_content":"读写次数比例80:20, 不等于只有80%的数据被修改，两个概念吧？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1598170560,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1811495,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","nickname":"小袁","note":"","ucode":"3F5D8721F577D9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300565,"discussion_content":"是的，两个概念。不排除这种情况，所以分析的是潜在风险。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1598173008,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300560,"ip_address":""},"score":300565,"extra":""}]},{"author":{"id":1060757,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2f/95/e4f1a874.jpg","nickname":"亮岚","note":"","ucode":"BB251160556A4D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299666,"discussion_content":"看了评论之后，我极度的怀疑redis这个单词我是不是都会拼错？","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1597761116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2131639,"avatar":"","nickname":"Geek_175bc2","note":"","ucode":"D8D6F17C8D6B1D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1060757,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2f/95/e4f1a874.jpg","nickname":"亮岚","note":"","ucode":"BB251160556A4D","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":299939,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597885039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299666,"ip_address":""},"score":299939,"extra":""},{"author":{"id":1355831,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b0/37/d654fbac.jpg","nickname":"几近虚年","note":"","ucode":"28CD6486EED8E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1060757,"avatar":"https://static001.geekbang.org/account/avatar/00/10/2f/95/e4f1a874.jpg","nickname":"亮岚","note":"","ucode":"BB251160556A4D","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":360254,"discussion_content":"所以买这种课程，评论也很值钱，哈哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616400113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299666,"ip_address":""},"score":360254,"extra":""}]},{"author":{"id":2883490,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/ff/a2/56e24200.jpg","nickname":"J 杰~","note":"","ucode":"7202987553A19D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544032,"discussion_content":"作者给助教Kaito发点工资吧","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1641382701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234200,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d5/18/7f3b1af2.jpg","nickname":"头晕的小骚年","note":"","ucode":"EDA4B89BAA33F1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298661,"discussion_content":"大佬计算机基础知识好扎实","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1597373119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1114684,"avatar":"https://static001.geekbang.org/account/avatar/00/11/02/3c/c9c1ca76.jpg","nickname":"雪海觅隐香","note":"","ucode":"07685DE073FBB9","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1234200,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d5/18/7f3b1af2.jpg","nickname":"头晕的小骚年","note":"","ucode":"EDA4B89BAA33F1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301141,"discussion_content":"看大佬的博客就明白了，赶紧去膜拜下！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598422328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298661,"ip_address":""},"score":301141,"extra":""}]},{"author":{"id":2860954,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/wfRD8vz9zQDYgxwSqW6jnpIcQ3guZUE6EQuVXM5Wribtp9wDlJLO8SG76CCPEdmDviaTK99iarvTYLxJw71bKdeXw/132","nickname":"CheerJia","note":"","ucode":"5A2E4A956816C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537500,"discussion_content":"我连你的评论都不太理解，是不是没救了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1639069092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1586404,"avatar":"https://static001.geekbang.org/account/avatar/00/18/34/e4/4450c053.jpg","nickname":"四味糖","note":"","ucode":"6648BACBF1CFEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409267,"discussion_content":"有一个不严谨的地方是，读写比例为2：8，做快照那一段时间并不一定会修改80%的数据","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1635406010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1700160,"avatar":"","nickname":"李宇","note":"","ucode":"40BCF1B3517A3F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408398,"discussion_content":"针对@Kaito大佬的回答，我觉得还有一点补充当内存到达临界点时，有新key写入，也会触发key的淘汰策略，根据不同的淘汰策略会进行key的删除操作，这样一定程度上还是破坏的数据的完整性。我的理解是淘汰策略属于亡羊补牢的做法，在实际应用中，还是要尽可能保证内存有足够的空间。（如果说得不对，大家指正一下哦）","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1635240615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1259280,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/10/a8aa9acb.jpg","nickname":"jzdayz","note":"","ucode":"E84C0DFC53BE8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369018,"discussion_content":"父进程有子进程时，写数据时会开辟新的空间存储数据，并且会修改自己的虚拟表，那么如果父进程没有子进程时，就是直接修改对应的空间数据吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1618904106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1259280,"avatar":"https://static001.geekbang.org/account/avatar/00/13/37/10/a8aa9acb.jpg","nickname":"jzdayz","note":"","ucode":"E84C0DFC53BE8A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369252,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618988149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":369018,"ip_address":""},"score":369252,"extra":""}]},{"author":{"id":2149853,"avatar":"https://static001.geekbang.org/account/avatar/00/20/cd/dd/ddb68d3d.jpg","nickname":"ฅ","note":"","ucode":"09D2943758ADD4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":319147,"discussion_content":"巨佬","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1603952780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253384,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","nickname":"Dovelol","note":"","ucode":"9B5DDF7720F307","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299874,"discussion_content":"班长我想问一下怎么监控redis的读写比例呢？比如在阿里云环境或者自建redis服务的时候。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597847668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1253384,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","nickname":"Dovelol","note":"","ucode":"9B5DDF7720F307","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299884,"discussion_content":"执行info all命令，可以看到每种命令的请求次数。","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1597848357,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299874,"ip_address":""},"score":299884,"extra":""},{"author":{"id":1388092,"avatar":"https://static001.geekbang.org/account/avatar/00/15/2e/3c/eae43616.jpg","nickname":"sid","note":"","ucode":"3D1F9169A19D29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":301317,"discussion_content":"老懂哥了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598489233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299884,"ip_address":""},"score":301317,"extra":""}]},{"author":{"id":1067564,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4a/2c/f8451d77.jpg","nickname":"石维康","note":"","ucode":"E39ED8416B2C01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298684,"discussion_content":"你是老师的小号吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597377883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1067564,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4a/2c/f8451d77.jpg","nickname":"石维康","note":"","ucode":"E39ED8416B2C01","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298695,"discussion_content":"哈哈，其实这些问题都是我平时遇到过的，所以回答地比较详细。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1597379670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298684,"ip_address":""},"score":298695,"extra":""}]},{"author":{"id":3039911,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/62/a7/5e979796.jpg","nickname":"寒东","note":"","ucode":"67075D56906E17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579848,"discussion_content":"Kaito老师，我的超人","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1657712761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503775,"discussion_content":"除了考虑了内存风险，还考虑了CPU风险。赞！先置个顶 :D\n\n关于绑核的操作，后面再和Kaito同学聊聊，绑核也有些值得探讨的地方的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597579629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":4,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1015918,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/80/6e/7f78292e.jpg","nickname":"无","note":"","ucode":"CF9F79815606F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":541463,"discussion_content":"老师 和 @Kaito 班长， 绑核的讨论能否贴出来让大家学习下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640391260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":503775,"ip_address":""},"score":541463,"extra":""}]},{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381881,"discussion_content":"厉害了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1625276130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2416395,"avatar":"https://static001.geekbang.org/account/avatar/00/24/df/0b/7f14e6fd.jpg","nickname":"rtl.","note":"","ucode":"7E4E58548BA853","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356912,"discussion_content":"插眼","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615706780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1106088,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/a8/4e739cf6.jpg","nickname":"Sic Pavis","note":"","ucode":"48B5F0118347C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345310,"discussion_content":"有点不对，业务场景读写是二八开。但是不代表rdb期间会对全量数据都操作一遍，有可能这段时间的请求量大概只有总数据量的10%，这样按你的算法内存额外占用就只有0.16g了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611710818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1106088,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/a8/4e739cf6.jpg","nickname":"Sic Pavis","note":"","ucode":"48B5F0118347C8","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345361,"discussion_content":"讨论的是潜在风险，所以分析的是，极端情况下80%数据被修改了，会有什么问题。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1611714084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":345310,"ip_address":""},"score":345361,"extra":""},{"author":{"id":1240970,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ef/8a/e639595e.jpg","nickname":"阿体","note":"","ucode":"E836BC56D79D37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":359564,"discussion_content":"如果算极端情况，最大是100%，二八开只是增加了概率。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1616229377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":345361,"ip_address":""},"score":359564,"extra":""},{"author":{"id":1435750,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKmErICiaf9SDLwMssR4gObnw0ibyllH0aOcAdeHTo6ia1n293VrKCAL2icyaRoAFAm8yuXfnKuKqmxVA/132","nickname":"阿烨","note":"","ucode":"38713FC3A147D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":360427,"discussion_content":"这个80%的假设确实是没什么依据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616429995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":345361,"ip_address":""},"score":360427,"extra":""}]},{"author":{"id":2049478,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/45/c6/ba5176a6.jpg","nickname":"从不卖萌","note":"","ucode":"E9B7B1C8FAFE0B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339547,"discussion_content":"这也太强了，这个课买的真值。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609728703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2361560,"avatar":"","nickname":"Geek_1bc715","note":"","ucode":"075433EA1AFE28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333928,"discussion_content":"绑核之前也让运维操作过,但不是很理解是什么原理,帮忙解释下？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607674779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2361560,"avatar":"","nickname":"Geek_1bc715","note":"","ucode":"075433EA1AFE28","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333949,"discussion_content":"后面有文章讲了，可以看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607678238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333928,"ip_address":""},"score":333949,"extra":""}]},{"author":{"id":2314145,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4f/a1/6addd029.jpg","nickname":"Y娃","note":"","ucode":"E6056EBBB15509","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326965,"discussion_content":"我冒昧的问一句，您真的没有私下补课吗？这节课东西真的有这么多吗？0-0","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605709823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2314145,"avatar":"https://static001.geekbang.org/account/avatar/00/23/4f/a1/6addd029.jpg","nickname":"Y娃","note":"","ucode":"E6056EBBB15509","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326969,"discussion_content":"围绕Redis做的比较多～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605710155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":326965,"ip_address":""},"score":326969,"extra":""}]},{"author":{"id":1727355,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/5b/7b/1ee6ec86.jpg","nickname":"Lionheart","note":"","ucode":"CA2E83FE4EAD18","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299131,"discussion_content":"持久化期间主进程的写操作，触发了写时复制，会不会阻塞主线程？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597570535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1727355,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/5b/7b/1ee6ec86.jpg","nickname":"Lionheart","note":"","ucode":"CA2E83FE4EAD18","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299163,"discussion_content":"写操作触发写时复制，如果都是小key，正常分配内存空间速度会很快，如果是bigkey或开启了内存大页机制，会有阻塞主线程的风险。","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1597582861,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299131,"ip_address":""},"score":299163,"extra":""}]},{"author":{"id":2105056,"avatar":"","nickname":"forever","note":"","ucode":"7DB5A0D9049688","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298675,"discussion_content":"OOM:Out Of Memory Killer","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597375952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2076719,"avatar":"","nickname":"Geek_ea7656","note":"","ucode":"871DC1F5A2D475","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298649,"discussion_content":"课代表","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597371098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1629537,"avatar":"https://static001.geekbang.org/account/avatar/00/18/dd/61/544c2838.jpg","nickname":"kevin","note":"","ucode":"8A0F58E2723893","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298621,"discussion_content":"学习了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597365071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585987,"discussion_content":"我去这哥们牛逼了怀疑是在砸场子的，一个王者去黑铁段位来虐我们哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661929072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2786848,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/86/20/1f1221f5.jpg","nickname":"听风","note":"","ucode":"EC2EB012E8DB6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585636,"discussion_content":"总感觉80%写，在rdb下如果快照时间有一定间隔的情况下，丢失数据量也是比较大的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661742498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3050838,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MnNmAGFwlyPFiazHo4micPVFR4SheUk4VC5gKyoYHyHaZAWbyI16aEhm4xoxa4bNH7h5SdPajZibpC5wlyUGBzoog/132","nickname":"Geek_ad9aec","note":"","ucode":"951E86E64B4844","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579730,"discussion_content":"CPU资源风险分析那里，2核CPU就意味着父进程占用了超过一半的CPU资源。是怎么算出来的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657636850,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2940659,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/de/f3/91dbd7da.jpg","nickname":"Mark","note":"","ucode":"28132BA4855996","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570516,"discussion_content":"a风险不存在吧，2GB的rdb，也就是10秒内完成，虽然写比例占了80%，但是这10秒内会修改到80%的数据？这两码事吧？\nb风险也不存在吧？cpu竞争无处不在，写rdb是io密集型，并不会占用太多cpu","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651802109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1622448,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c1/b0/b52d9ade.jpg","nickname":"苏彧","note":"","ucode":"C016B28DF7449C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562384,"discussion_content":"老哥，有个疑惑，aof每秒刷盘不是由主线程完成的么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649817006,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336634,"avatar":"https://static001.geekbang.org/account/avatar/00/14/65/3a/bc801fb2.jpg","nickname":"mqray","note":"","ucode":"15664507AD7033","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558618,"discussion_content":"+1 也准备问这个疑惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648396091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553324,"discussion_content":"每日一mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645852404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181960,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/08/f3547e77.jpg","nickname":"lobby","note":"","ucode":"8D81722BE36AD4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547413,"discussion_content":"老哥是这个课的一大特色呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642662891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2164123,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oOSgaSW8MFRDx6da1bicY40IVg7hoDNjYlSuTeIg93aB3nuKedhbTa2HQhXpBJmN2w0xU9icvkTDZWMzL5NVicrYw/132","nickname":"伪钞","note":"","ucode":"7087364945A6B0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382969,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625813423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1060969,"avatar":"https://static001.geekbang.org/account/avatar/00/10/30/69/19e2aae4.jpg","nickname":"Geek123","note":"","ucode":"EFEF067FFA2579","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374928,"discussion_content":"K，问个问题。\n老师文章中说，快照的两方面开销。\n1、频繁将全量数据写入磁盘，会给磁盘带来很大的压力\n2、fork bgsave子线程这个过程会阻塞主线程，且系统中只会存在一个fork bgsave子线程\n这里有个疑问，快照不是由bgsave线程来生成的吗？老师说的第一方面，多个快照竞争有效磁盘资源，但是第二方面又说，系统里只会存在一个bgsave线程，这里似乎矛盾了，还是我哪个地方理解有误？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621413852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2644383,"avatar":"https://static001.geekbang.org/account/avatar/00/28/59/9f/fb04a5fd.jpg","nickname":"南顺城街","note":"","ucode":"0BDC30E5FBB0C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1060969,"avatar":"https://static001.geekbang.org/account/avatar/00/10/30/69/19e2aae4.jpg","nickname":"Geek123","note":"","ucode":"EFEF067FFA2579","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377588,"discussion_content":"请仔细看原文，老师说的两个开销是频繁的执行全量快照，而很明显 Redis 不让你这么做，最短间隔支持一分钟，而且在 Redis 中如果有一个 bgsave 在运行，就不会再启动第二个 bgsave 子进程（注意，前者是会出现的问题，后者是redis 的实现。）建议看遍原文再说，老师哪个（）也是没起到作用","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1622716706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374928,"ip_address":""},"score":377588,"extra":""},{"author":{"id":1600367,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6b/6f/34ff17fa.jpg","nickname":"丿毒毒毒毒","note":"","ucode":"AC60DC49B75E72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1060969,"avatar":"https://static001.geekbang.org/account/avatar/00/10/30/69/19e2aae4.jpg","nickname":"Geek123","note":"","ucode":"EFEF067FFA2579","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378630,"discussion_content":"这两个是老师为了说明为什么不适合频繁的做RDB快照的解释而举出的例子，实际上当redis中已经有一个bgsave子进程进行全量快照时，接下来再发生bgsave命令的话会被拒绝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623310941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374928,"ip_address":""},"score":378630,"extra":""},{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1060969,"avatar":"https://static001.geekbang.org/account/avatar/00/10/30/69/19e2aae4.jpg","nickname":"Geek123","note":"","ucode":"EFEF067FFA2579","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393574,"discussion_content":"快照是主进程生成的。至于多个快照是老师提出的一种假设，而系统实际上只会存在唯一一个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631499617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374928,"ip_address":""},"score":393574,"extra":""}]},{"author":{"id":1969753,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ovFeV17BSAHpzBza8YewjNSyb3vh95PHrVKmkSkGVTlvibDDKqupfu2rryZL5dkXJ3Mic1TYuYC5iaMttqg1Fz9nQ/132","nickname":"it小白","note":"","ucode":"CC183F81A7ADF4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372626,"discussion_content":"想问大佬一个问题，如果使用了混合使用 AOF 日志和内存快照的方法来做增量快照，是不是fork出的子进程只去执行AOF中的命令，如果这个时候主进程改动了AOF中存在的key，那这个时候又是怎么做同步的呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620394699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1275424,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/aiaO77mTsCalcia49ElevPn988pgwcL3rD5ic1DTD6E8rbAwfmguiaPsibHicsYGQID7VbmD21GUAV9bbuNMfDhDGGyg/132","nickname":"穿针土豆丝","note":"","ucode":"5DA3BDDE5162E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365741,"discussion_content":"大佬，收下我的膝盖！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617873496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2532285,"avatar":"","nickname":"Geek_926921","note":"","ucode":"51C3B0178D77E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360397,"discussion_content":"大佬，咩我","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616426879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2357566,"avatar":"https://static001.geekbang.org/account/avatar/00/23/f9/3e/0d5f27c4.jpg","nickname":"肥猫不开心","note":"","ucode":"FA9204B84913C0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360078,"discussion_content":"你怎么这么猛啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616344043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358488,"discussion_content":"巨佬，我感觉还有一个可能会降低redis性能的原因。在cow的过程中产生了大量的中端，此时如果如果task多，就会存在大量竞争情况。被迫让出时间片，进而排队？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615989140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2185166,"avatar":"https://static001.geekbang.org/account/avatar/00/21/57/ce/ad3c3954.jpg","nickname":"鹅鹅鹅","note":"","ucode":"6AFA3FCC7B5AEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352268,"discussion_content":"好家伙，能留个联系方式嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614670178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2185166,"avatar":"https://static001.geekbang.org/account/avatar/00/21/57/ce/ad3c3954.jpg","nickname":"鹅鹅鹅","note":"","ucode":"6AFA3FCC7B5AEF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352364,"discussion_content":"微信 black-rye，还有Redis群可进。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614693367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":352268,"ip_address":""},"score":352364,"extra":""},{"author":{"id":1526471,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/c7/0cff4a59.jpg","nickname":"木木夕","note":"","ucode":"EA5D709D0DE50E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":354948,"discussion_content":"Kaito 老哥，你是不是还有一个公众号，如果我没记错的话","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615367622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":352364,"ip_address":""},"score":354948,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1526471,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/c7/0cff4a59.jpg","nickname":"木木夕","note":"","ucode":"EA5D709D0DE50E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355086,"discussion_content":"是啊，刚开始做，公众号「水滴与银弹」可以关注下，已经更新好几篇硬核Redis文章了，可以来看看哈。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1615382147,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":354948,"ip_address":""},"score":355086,"extra":""}]},{"author":{"id":1173293,"avatar":"https://static001.geekbang.org/account/avatar/00/11/e7/2d/c21fd3e3.jpg","nickname":"李胖","note":"","ucode":"1D0C0F10E240F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350831,"discussion_content":"娘 有大神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614045333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2354474,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/UNC7eWZWvRyAPWUpIJicgZBWLNpkljMbgeaFVWU3QNmWgaibchc8aGFfAG7gWh7eghHSrtSuSqMDp2ibVnvE2eLJg/132","nickname":"Geek_a88948","note":"","ucode":"C7FF3099A180D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350689,"discussion_content":"大佬，针对CPU资源风险，请问2核CPU的情况下，由于存在父进程及其他后台进程（例如aof刷盘）、bgsave子进程，所以父进程占用CPU超一半了吗？如果不是，大佬帮忙解答下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613979684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331427,"discussion_content":"cgroup 指定  fork 的时候使用哪个cpu的核。。15年的时候 呆的公司 运维已经具备这个实力了。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606872391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":6,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2341163,"avatar":"https://static001.geekbang.org/account/avatar/00/23/b9/2b/c0f306a5.jpg","nickname":"Geek_a315d7","note":"","ucode":"6F8D9CA9D8844C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329539,"discussion_content":"你好，有两点疑问，麻烦解答下\n\n1 现有内存数据2G，读写比例为8：2，只有在子线程rdb没有执行完的极端情况下才会多出来1.6G的新内存，可以这么理解吗？\n2 比如在rdb的过程中新生成了1.6G的数据，那么在rdb结束之后，多出来的那部分内存具体是如何处理呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606400320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2341163,"avatar":"https://static001.geekbang.org/account/avatar/00/23/b9/2b/c0f306a5.jpg","nickname":"Geek_a315d7","note":"","ucode":"6F8D9CA9D8844C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329552,"discussion_content":"1、RDB期间主进程改了80%数据才会。\n\n2、RDB结束，子进程退出，内存被回收。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606402002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":329539,"ip_address":""},"score":329552,"extra":""},{"author":{"id":1215066,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8a/5a/b67a82e3.jpg","nickname":"shen","note":"","ucode":"AE5737B0C7DC4F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":333427,"discussion_content":"子进程不是只有一个吗？那么可以串行执行然后清理掉cow的内存然后再重用这块内存，这样是不是就可以不需要这么多内存了？？麻烦大佬解答下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607519297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":329552,"ip_address":""},"score":333427,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1215066,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8a/5a/b67a82e3.jpg","nickname":"shen","note":"","ucode":"AE5737B0C7DC4F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333456,"discussion_content":"COW是父进程做的，你再看下流程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607523107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":333427,"ip_address":""},"score":333456,"extra":""}]},{"author":{"id":2124257,"avatar":"https://static001.geekbang.org/account/avatar/00/20/69/e1/a8230a63.jpg","nickname":"chillsen","note":"","ucode":"FCC413E7888D45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329371,"discussion_content":"“写实复制”会重新分配整个实例80%的内存副本？请问为什么是80%？不是10%？20%？或者直接内存写入磁盘文件呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606373007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2124257,"avatar":"https://static001.geekbang.org/account/avatar/00/20/69/e1/a8230a63.jpg","nickname":"chillsen","note":"","ucode":"FCC413E7888D45","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329387,"discussion_content":"审一下题目。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606377206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":329371,"ip_address":""},"score":329387,"extra":""},{"author":{"id":1303713,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e4/a1/178387da.jpg","nickname":"25ma","note":"","ucode":"AB5435B9DB52C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2124257,"avatar":"https://static001.geekbang.org/account/avatar/00/20/69/e1/a8230a63.jpg","nickname":"chillsen","note":"","ucode":"FCC413E7888D45","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":333125,"discussion_content":"读写比例8:2，按百分比就是80%了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607436887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":329371,"ip_address":""},"score":333125,"extra":""}]},{"author":{"id":1452799,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","nickname":"BertGeek","note":"","ucode":"8E1D72C9F9778C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328911,"discussion_content":"大约重写分配内存3.2G","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606271563,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1316758,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","nickname":"Richard","note":"","ucode":"893F958B9DD161","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323668,"discussion_content":"大佬，我对第二点消耗CPU有些疑问，我赞成内存数据传输到磁盘有CPU的参与，但我认为写rdb的后台进程是个io密集型的程序，我不清楚底层数据的传输是否会用到DMA，如果用到了那CPU就又进一步释放了一些压力，所以在io的过程中CPU是可以处理其他的事情的，iowait的意义不是CPU的消耗，反而代表尚有CPU可用，所以我认为你提到的消耗大量的CPU并不合理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604979658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1316758,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","nickname":"Richard","note":"","ucode":"893F958B9DD161","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323689,"discussion_content":"我指的CPU消耗不是写磁盘，而是子进程把内存数据持久化到磁盘这个过程，需要迭代出实例中的所有数据，这个过程需要消耗CPU。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1604982706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":323668,"ip_address":""},"score":323689,"extra":""},{"author":{"id":1316758,"avatar":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","nickname":"Richard","note":"","ucode":"893F958B9DD161","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":323707,"discussion_content":"你说的对，是我没看仔细，这就粉碎了一些坚称Redis是单线程不需要太多CPU的谣言，哈哈。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1604984502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":323689,"ip_address":""},"score":323707,"extra":""}]},{"author":{"id":1121584,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/30/4a82c7af.jpg","nickname":"fancion","note":"","ucode":"9000895F6BE0E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312753,"discussion_content":"请问大佬这个问题怎么解决呢？调整持久化策略么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602810841,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1276563,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7a/93/c9302518.jpg","nickname":"高志强","note":"","ucode":"68737002043752","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305199,"discussion_content":"该同学的真到位666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599814743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1615539,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI6LXcIqb5K48nia8d4zmdsD1M9AZeyXoGrLzX5xvqfN0fqXOsYKUWLbZvZ8TtJCXWmYbCkCXg93dQ/132","nickname":"漏脚脖","note":"","ucode":"214AE52EC201E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303185,"discussion_content":"因你而买","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599180259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1229070,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c1/0e/2b987d54.jpg","nickname":"蜉蝣","note":"","ucode":"77CF92496855D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302005,"discussion_content":"猛！    很喜欢看你的留言","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598755124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1764564,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL2eEJKKjJlUkFBoRm8zlhokvlM6Z77PzGkl4PKPW84sncXGlQibdsEghH6q80jQkDa2pHkjCyOEhQ/132","nickname":"一切皆底层","note":"","ucode":"A36E41110723B6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301391,"discussion_content":"咱们班有群吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598514814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1764564,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL2eEJKKjJlUkFBoRm8zlhokvlM6Z77PzGkl4PKPW84sncXGlQibdsEghH6q80jQkDa2pHkjCyOEhQ/132","nickname":"一切皆底层","note":"","ucode":"A36E41110723B6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344529,"discussion_content":"有群，加我微信 black-rye 进群哈！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611490694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301391,"ip_address":""},"score":344529,"extra":""}]},{"author":{"id":1064018,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3c/52/5951ffb4.jpg","nickname":"Sinvi","note":"","ucode":"2A90976980CA3C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301125,"discussion_content":"膜拜。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598413931,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":7,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1253384,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","nickname":"Dovelol","note":"","ucode":"9B5DDF7720F307","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299876,"discussion_content":"班长，想问下，我之前2核16G的单机redis生产环境同时开启RDB和AOF来持久化，然后没一会儿就发现好多错误log，大概意思是磁盘压力太大，这个你遇到过吗？一般你的持久化策略是什么呢？会同时开启吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597847845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1253384,"avatar":"https://static001.geekbang.org/account/avatar/00/13/20/08/bc06bc69.jpg","nickname":"Dovelol","note":"","ucode":"9B5DDF7720F307","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299887,"discussion_content":"RDB不要太频繁，AOF不要设置always。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1597848423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299876,"ip_address":""},"score":299887,"extra":""}]},{"author":{"id":1106238,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e1/3e/a617ae38.jpg","nickname":"每天一点点","note":"","ucode":"B4DFDA3200B452","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299264,"discussion_content":"Redis T0时点 fork子进程做RDB持久化，假如需要时间为20S，这期间做读数据，不会触发数据分离，但是在T+5S时父进程已存在的key发生写操作，会触发COW，会复制一份新的数据到内存中，那此时子进程看到的key数据应该是T时点的数据吧，问题一：COW是对父进程的数据更新操作，对子进程数据的隔离；问题二：若写操作为80%的话，此时就会出现内存膨胀问题，对吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597634322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1106238,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e1/3e/a617ae38.jpg","nickname":"每天一点点","note":"","ucode":"B4DFDA3200B452","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299275,"discussion_content":"1、是的，子进程只能看到T时刻的数据\n\n2、写操作覆盖80%的key的话，父进程会重新分配80%的内存副本","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1597638966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299264,"ip_address":""},"score":299275,"extra":""},{"author":{"id":1522220,"avatar":"https://static001.geekbang.org/account/avatar/00/17/3a/2c/683ae4af.jpg","nickname":"豆花羹","note":"","ucode":"57D8F64988C305","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1306092,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ61zTDmLk7IhLJn6seBPOwsVaKIWUWaxk5YmsdYBZUOYMQCsyl9iaQVSg9U5qJVLLOCFUoLUuYnRA/132","nickname":"fjpcode","note":"","ucode":"C32C5E3ECB9A90","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308499,"discussion_content":"子进程写的就是T时刻的数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600962194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304024,"ip_address":""},"score":308499,"extra":""},{"author":{"id":2354474,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/UNC7eWZWvRyAPWUpIJicgZBWLNpkljMbgeaFVWU3QNmWgaibchc8aGFfAG7gWh7eghHSrtSuSqMDp2ibVnvE2eLJg/132","nickname":"Geek_a88948","note":"","ucode":"C7FF3099A180D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1306092,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ61zTDmLk7IhLJn6seBPOwsVaKIWUWaxk5YmsdYBZUOYMQCsyl9iaQVSg9U5qJVLLOCFUoLUuYnRA/132","nickname":"fjpcode","note":"","ucode":"C32C5E3ECB9A90","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350685,"discussion_content":"写不了，副本只有T时刻的数据，之后的操作看不到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613978743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304024,"ip_address":""},"score":350685,"extra":""}]},{"author":{"id":1108229,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e9/05/d187d6a0.jpg","nickname":"未设置","note":"","ucode":"727CEBD162B08A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298706,"discussion_content":"大佬有博客，公众号之类的吗，想去膜拜一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597383288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1108229,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e9/05/d187d6a0.jpg","nickname":"未设置","note":"","ucode":"727CEBD162B08A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298756,"discussion_content":"http://kaito-kidd.com/\n\n只写了博客，目前没有公众号，后期考虑会开。","likes_number":14,"is_delete":false,"is_hidden":false,"ctime":1597392688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298706,"ip_address":""},"score":298756,"extra":""},{"author":{"id":1062070,"avatar":"https://static001.geekbang.org/account/avatar/00/10/34/b6/0feb574b.jpg","nickname":"我的黄金时代","note":"","ucode":"D7825B45B372F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":299622,"discussion_content":"膜拜","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597753709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298756,"ip_address":""},"score":299622,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1108229,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e9/05/d187d6a0.jpg","nickname":"未设置","note":"","ucode":"727CEBD162B08A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350747,"discussion_content":"公众号已经有了，看个人主页加我微信，公众号文章开始更新了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1613997309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298706,"ip_address":""},"score":350747,"extra":""}]},{"author":{"id":1670963,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/zGUSFibP0OGFW9a3QSic1DZLr5B4kPoNmt3RibzLNYSOxN3mUZibBMkGHpwcYPFYWJ7v61wsMvyIKzpBuQJWD2hVOg/132","nickname":"九时四","note":"","ucode":"92DCC2DF3DD15C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298639,"discussion_content":"大佬！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597369381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":8,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243697,"user_name":"Devin","can_delete":false,"product_type":"c1","uid":1025067,"ip_address":"","ucode":"7BDCD517BD8DD2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/2b/3ba9f64b.jpg","comment_is_top":true,"comment_ctime":1598252327,"is_pvip":false,"replies":[{"id":"89806","content":"Redis启动后本身是一个进程，它的主体工作（接收请求、服务请求读写数据）也是在这个进程中完成的，咱们有些同学称Redis为主进程是可以的。<br><br>同时，Redis这个进程属于单线程的进程，也就是说进程主体工作没有用多个线程来运行，所以我一般把它也称为主线程，突显它的单线程模式。<br><br>有的程序启动后，会在进程中启动多个线程来处理工作，这个时候我就不会称它为主线程了，因为没有一个线程是单独做主要工作的。<br><br>希望能解答了你的问题。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1598286071,"ip_address":"","comment_id":243697,"utype":1}],"discussion_count":8,"race_medal":0,"score":"9.2233724722446991e+18","product_id":100056701,"comment_content":"老师全文中都是使用的“主线程”而不是“主进程”，评论中大家有的用的是“主线程”有的是“主进程”。请问下老师为啥不是用的“主进程”？","like_count":102,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504363,"discussion_content":"Redis启动后本身是一个进程，它的主体工作（接收请求、服务请求读写数据）也是在这个进程中完成的，咱们有些同学称Redis为主进程是可以的。\n\n同时，Redis这个进程属于单线程的进程，也就是说进程主体工作没有用多个线程来运行，所以我一般把它也称为主线程，突显它的单线程模式。\n\n有的程序启动后，会在进程中启动多个线程来处理工作，这个时候我就不会称它为主线程了，因为没有一个线程是单独做主要工作的。\n\n希望能解答了你的问题。","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1598286071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1107879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e7/a7/9825371e.jpg","nickname":"Penn","note":"","ucode":"2D73D9C2AED26F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":533541,"discussion_content":"顿悟了！赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637897677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":504363,"ip_address":""},"score":533541,"extra":"{\"user_type\":1}"}]},{"author":{"id":1197455,"avatar":"https://static001.geekbang.org/account/avatar/00/12/45/8f/a56b2214.jpg","nickname":"innocent","note":"","ucode":"368659A0DDE7E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347345,"discussion_content":"C语言里面进程就是线程。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612205233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1652895,"avatar":"https://static001.geekbang.org/account/avatar/00/19/38/9f/895353ab.jpg","nickname":"黄卫江","note":"","ucode":"0366942B81E7FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1197455,"avatar":"https://static001.geekbang.org/account/avatar/00/12/45/8f/a56b2214.jpg","nickname":"innocent","note":"","ucode":"368659A0DDE7E4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574223,"discussion_content":"线程是操作系统支持的，C语言也可以创建线程吧。#include &lt;pthread.h&gt;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653912915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":347345,"ip_address":""},"score":574223,"extra":""}]},{"author":{"id":2277195,"avatar":"https://static001.geekbang.org/account/avatar/00/22/bf/4b/2acf59c1.jpg","nickname":"我","note":"","ucode":"49C9AFFB997A3F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324373,"discussion_content":"redis主线程可以理解为主进程的主线程，主进程还有其他三个子线程，在bio里面，分别是aof重写，惰性删除大val和惰性释放客户端。还有可能有两个子进程，都是fork出来的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605096207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585988,"discussion_content":"根据倪朋飞的专栏来说，进程是拥有资源的基本单位，线程是调度的基本单位，但是当一个进程里面只有一个线程，那么线程等于进程，因为没有其他线程和他争抢资源","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661929210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1589523,"avatar":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","nickname":"树心","note":"","ucode":"6C329F0FF798B9","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536411,"discussion_content":"对，我也有这个疑惑来着。\nbgsave是【子进程】，为啥会共享【主线程】的数据？不是进程创建子进程或者线程吗？子进程是复制了父进程的内存空间，子线程和父进程的内存空间是共享的\n看了评论理解了一些了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638781253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1778000,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ncicjtgbOgxk2V3VWYJQAia6VqrvHE23JVGtkQALgl6XScQmdqmKZ5RXicfw0CQ4uMplhMeeYoSZNPggBRTpQLR1Q/132","nickname":"0xkjAlbert","note":"","ucode":"B607DA1230321F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304451,"discussion_content":"我的理解是redis本身只有一个进程，这个进程一般只有一个线程再跑，处理特殊任务时才会由主线程fork子线程的方式来工作，主进程并不会fork子进程了，只有一个进程，所以也就不提主进程了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599574401,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241831,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1597461582,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"452569027662","product_id":100056701,"comment_content":"1，作者讲了什么？<br>作者在本章讲了redis两种持久化方式中的RDB方式<br>2，作者是怎么把这事给讲明白的？<br>为了让大家明白RDB的快照的概念，作者举了拍照片，照合影的例子<br>3，为了讲明白，作者讲了哪些要点，有哪些亮点？<br>（1）亮点1：作者解释快照使用了拍合影的例子，让我很好的理解快照的概念，以及内存数据大小对快照产生的影响<br>（2）要点1：RDB快照，将此时内存中的所有的数据写入磁盘<br>（3）要点2：生成快照有两种方式：sava和bgsava，save是主进程执行，生成时会阻塞redis，只能执行查找。bgsave是由主进程fork出子进程执行，<br>（4）要点3：子进程在被fork处理时，与主进程共享同一份内存，但在生成快照时采取COW机制，确保不会阻塞主进程的数据读写<br>（5）要点4：RDB的执行频率很重要，这会影响到数据的完整性和Redis的性能稳定性。所以4.0后有了aof和rdb混合的数据持久化机制<br>4，对于作者所讲，我有哪些发散性思考？<br>作者开篇提到的两个问题：快照什么数据，快照有何影响，具体的场景，才能讨论出具体的技术方案，我个人认为，脱离场景谈方案是在自嗨<br><br>5，将来有哪些场景，我能够使用到它？<br>我们项目的redis持久化使用的方式就是aof和rdb混合，前一段时间，做过集群升级扩容。把每台8c,30G内存,5主5从，升级改造成为8c,15G内存,15主15从。这样搞主要是因为之前的集群内存占用太高，导致数据持久化失败<br>6，读者评论的收获：<br>定这个专栏，真是觉得捡到宝了，大神@Kaito写的评论实在漂亮，每次都要读好几遍，读完都有赏心悦目的愉悦感，期望自己有一天也可像他那样出色<br>","like_count":105,"discussions":[{"author":{"id":2104255,"avatar":"https://static001.geekbang.org/account/avatar/00/20/1b/bf/48de2ca3.jpg","nickname":"脚踏实地，砥砺前行","note":"","ucode":"273EAD9741748D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348540,"discussion_content":"谢谢你的提纲，我们可以自己往里面填东西，可以一起讨论。\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612619108,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1488020,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","nickname":"追风筝的人","note":"","ucode":"2993D60F94C396","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571324,"discussion_content":"楼主  5主5从集群 用的Redis哪个版本？ SET/GET TPS 不使用pipeline 可以达到多少范围？  我这redis  5主5从 集群15000-25000  TPS  版本 5.0.7 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652174761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2104255,"avatar":"https://static001.geekbang.org/account/avatar/00/20/1b/bf/48de2ca3.jpg","nickname":"脚踏实地，砥砺前行","note":"","ucode":"273EAD9741748D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348544,"discussion_content":"1，作者讲了什么？\n作者在本章讲了redis两种持久化方式中的RDB方式\n2，作者是怎么把这事给讲明白的？\n为了让大家明白RDB的快照的概念，作者举了拍照片，照合影的例子，比如拍照时的取景问题，人物是否会移动的问题？这2个问题刚好对应rdb的快照范围和快照时T+n的数据修改问题。\n3，为了讲明白，作者讲了哪些要点，有哪些亮点？\n（1）亮点1：作者解释快照使用了拍合影的例子，让我很好的理解快照的概念，以及内存数据大小对快照产生的影响，如果写操作很多的话，单纯rdb确实不太合适，例如内存4G的云主机，2G的redis数据，8:2的写读，那么RDB时内存要还会占用2*0.8=1.6,如果redis有开启swap模式，redis的会数据会写入磁盘中，那么写入操作很会变慢很多呗，如果没有开启swap那么就会报OOM.（借助问题理解redis,此处向Kaito敬礼）\n\n（2）要点1：RDB快照，将此时内存中的所有的数据写入磁盘\n（3）要点2：生成快照有两种方式：sava和bgsava，save是主进程执行，会阻塞主进程，只能执行查找。bgsave是由主进程fork出子进程执行，不会阻塞主进程。这也是 Redis RDB 文件生成的默认配置。\n（4）要点3：子进程在被fork处理时，与主进程共享同一份内存，但在生成快照时采取COW机制，确保不会阻塞主进程的数据读写。比如快照时数据被修改，主线程会复制数据，bgsave子线程会读取副本的信息，从而写入RDB文件中\n（5）要点4：RDB的执行频率很重要，这会影响到数据的完整性和Redis的性能稳定性。所以4.0后有了aof和rdb混合的数据持久化机制\n（6.）\n4，对于作者所讲，我有哪些发散性思考？\n快照什么数据？全量数据。\n快照时数据能修改吗?可以修改，这里要提下bgsave,主线程fork出bgsave.当在进行快照时，数据修改，会生成一个副本，bgsave子线程会从副本中读取数据。\n可以每秒做一次快照吗？如果频繁地执行全量快照，1，磁盘顶不住呀。2.bgsave 子进程需要通过 fork 操作从主线程创建出来，要花费时间呀，兄弟。\n结合上节课的知识，建议使用RDB和AOF,RDB记录第一此快照，AOF记录第一次快照和第二次快照中的操作，但是怎么设置呢？还是要看api哈哈哈\n\n5，将来有哪些场景，我能够使用到它？\n我们项目的redis持久化使用的方式就是aof和rdb混合，前一段时间，做过集群升级扩容。把每台8c,30G内存,5主5从，升级改造成为8c,15G内存,15主15从。这样搞主要是因为之前的集群内存占用太高，导致数据持久化失败---（项目中有用到redis,但是不是运维，没有深入了解过配置的内容，深感羞愧，以后我来补充）\n6，读者评论的收获：\n一样向@Kaito敬礼。居然能把redis理解的这么透彻，学redis牵引出来的知识实在时太多了。IO,NIO，计算机原理，多线程问题等等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612620221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1581294,"avatar":"","nickname":"Geek_be4cec","note":"","ucode":"C87642D655EAC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2104255,"avatar":"https://static001.geekbang.org/account/avatar/00/20/1b/bf/48de2ca3.jpg","nickname":"脚踏实地，砥砺前行","note":"","ucode":"273EAD9741748D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391616,"discussion_content":"请问aof和rdb混合是怎么具体实践的？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1630553462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348544,"ip_address":""},"score":391616,"extra":""},{"author":{"id":2802228,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/KZnBJvpnltmDE1P7bOx2Jeq5ZIv8K3Oia1v2gZjotLpp5t6ODUBYLVphZtRiaaKZAxEwmDCTvMketZcplghrOkSA/132","nickname":"Geek_c91135","note":"","ucode":"4313A7B7181B65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1581294,"avatar":"","nickname":"Geek_be4cec","note":"","ucode":"C87642D655EAC3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407908,"discussion_content":"同样的疑问😭","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635148585,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":391616,"ip_address":""},"score":407908,"extra":""}]}]},{"had_liked":false,"id":242028,"user_name":"Geek_Lin","can_delete":false,"product_type":"c1","uid":2120990,"ip_address":"","ucode":"3C887B8E6FF3B9","user_header":"","comment_is_top":false,"comment_ctime":1597566012,"is_pvip":false,"replies":[{"id":"89489","content":"子进程读到的是主线程修改前的数据。<br><br>我在文章中介绍写时复制时，说法上有点偏它能达到的效果了，可能让大家理解有误了，抱歉！<br><br>我再解释下，文章中说“这块数据就会被复制一份，生成该数据的副本”，这个操作在实际执行过程中，是子进程复制了主线程的页表，所以通过页表映射，能读到主线程的原始数据，而当有新数据写入或数据修改时，主线程会把新数据或修改后的数据写到一个新的物理内存地址上，并修改主线程自己的页表映射。所以，子进程读到的类似于原始数据的一个副本，而主线程也可以正常进行修改。<br><br>希望能解答你的疑惑。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597759565,"ip_address":"","comment_id":242028,"utype":1}],"discussion_count":12,"race_medal":0,"score":"340899982396","product_id":100056701,"comment_content":"文章中写时复制那里，复制的是主线程修改之前的数据还是主线程修改之后的呢？","like_count":79,"discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569284,"discussion_content":"修改之前的数据 子进程会继承父进程的页表 。实际上copy-on-write 只是将自己用户态的虚地址指向一个新的实地址而已。但是因为子进程永远是只读 所以它的虚空间地址永远指向修改之前的数据。证据就是观察此时的ref count","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651394140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2873299,"avatar":"","nickname":"nuptxiaoli","note":"","ucode":"EF2962A390DC55","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546735,"discussion_content":"应该就是没有落盘，修改主线程的数据还在内存中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642410232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1112676,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","nickname":"Sam Fu","note":"","ucode":"EA285A4943271F","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534000,"discussion_content":"那对同一个数据多次修改，之前已经写时复制过了。下次应该就直接在副本上操作就可以了吧？那怎么能知道已经复制过了呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638067273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503906,"discussion_content":"子进程读到的是主线程修改前的数据。\n\n我在文章中介绍写时复制时，说法上有点偏它能达到的效果了，可能让大家理解有误了，抱歉！\n\n我再解释下，文章中说“这块数据就会被复制一份，生成该数据的副本”，这个操作在实际执行过程中，是子进程复制了主线程的页表，所以通过页表映射，能读到主线程的原始数据，而当有新数据写入或数据修改时，主线程会把新数据或修改后的数据写到一个新的物理内存地址上，并修改主线程自己的页表映射。所以，子进程读到的类似于原始数据的一个副本，而主线程也可以正常进行修改。\n\n希望能解答你的疑惑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597759565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1314544,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0e/f0/fc75636b.jpg","nickname":"Kinyi_Chan","note":"","ucode":"A7BDF203148A90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":556153,"discussion_content":"请问复制页表的这个操作是主进程还是fork出来的子进程来做的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647234164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":503906,"ip_address":""},"score":556153,"extra":""}]},{"author":{"id":1840097,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJq1QledRhFicNMRYDJ1ibCveUqlrtIYhDCvAicOmmnia3GPrjjepDZhibXMJ0iabTsibVC2KMZtoIG4A9icg/132","nickname":"xuwen_chen","note":"","ucode":"03C766DEA69DF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370758,"discussion_content":"终于弄懂cow了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619525898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2230909,"avatar":"https://static001.geekbang.org/account/avatar/00/22/0a/7d/ac715471.jpg","nickname":"独孤九剑","note":"","ucode":"6C1253E2B8C1D4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349029,"discussion_content":"其实是“一致性快照”吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612855081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2110772,"avatar":"","nickname":"dfuru","note":"","ucode":"0222FADA093D95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301814,"discussion_content":"写时复制的那个是主线程新的页表？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598669764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1401733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/63/85/9ccf1b19.jpg","nickname":"草帽路飞","note":"","ucode":"7416D1D82E3456","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301510,"discussion_content":"想请教一下，如果读到的是主线程修改之前的，那主线程修改的数据岂不是没有落盘？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598541998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1272825,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6b/f9/da3ee7a8.jpg","nickname":"Onyanga","note":"","ucode":"DF4D22F0D51881","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1401733,"avatar":"https://static001.geekbang.org/account/avatar/00/15/63/85/9ccf1b19.jpg","nickname":"草帽路飞","note":"","ucode":"7416D1D82E3456","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":304274,"discussion_content":"走增量了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1599535229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301510,"ip_address":""},"score":304274,"extra":""},{"author":{"id":1441606,"avatar":"https://static001.geekbang.org/account/avatar/00/15/ff/46/7e4039ea.jpg","nickname":"伟平","note":"","ucode":"2D3E55238FC8B3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1272825,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6b/f9/da3ee7a8.jpg","nickname":"Onyanga","note":"","ucode":"DF4D22F0D51881","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306239,"discussion_content":"AOF么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600227835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304274,"ip_address":""},"score":306239,"extra":""},{"author":{"id":1002581,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4c/55/879a4443.jpg","nickname":"greensky01","note":"","ucode":"9C1B0EBFC603D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1272825,"avatar":"https://static001.geekbang.org/account/avatar/00/13/6b/f9/da3ee7a8.jpg","nickname":"Onyanga","note":"","ucode":"DF4D22F0D51881","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306818,"discussion_content":"增量是通过AOF吗，那能确定从哪一个AOF开始作为同步的起点吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600396431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304274,"ip_address":""},"score":306818,"extra":""}]}]},{"had_liked":false,"id":241602,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1597368370,"is_pvip":true,"discussion_count":17,"race_medal":0,"score":"203460831282","product_id":100056701,"comment_content":"Kaito的回答为啥老让我觉得自己那么菜呢������<br><br>我稍微补充下老师对于 ”混合使用 AOF 日志和内存快照“这块的东西：<br>在redis4.0以前，redis AOF的重写机制是指令整合（老师上一节课已经说过），但是在redis4.0以后，redis的 AOF 重写的时候就直接把 RDB 的内容写到 AOF 文件开头，将增量的以指令的方式Append到AOF，这样做的好处是可以结合 RDB 和 AOF 的优点, 快速加载同时避免丢失过多的数据。当然缺点也是有的， AOF 里面的 RDB 部分就是压缩格式不再是 AOF 格式，可读性较差。Redis服务在读取AOF文件的怎么判断是否AOF文件中是否包含RDB，它会查看是否以 REDIS 开头；人为的看的话，也可以看到以REDIS开头，RDB的文件也打开也是乱码。<br><br>可以通过aof-use-rdb-preamble 配置去设置改功能。<br><br># When rewriting the AOF file, Redis is able to use an RDB preamble in the<br># AOF file for faster rewrites and recoveries. When this option is turned<br># on the rewritten AOF file is composed of two different stanzas:<br>#<br>#   [RDB file][AOF tail]<br>#<br># When loading Redis recognizes that the AOF file starts with the &quot;REDIS&quot;<br># string and loads the prefixed RDB file, and continues loading the AOF<br># tail.<br>aof-use-rdb-preamble yes<br>","like_count":47,"discussions":[{"author":{"id":1252567,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1c/d7/c176ad9f.jpg","nickname":"绝尘而去","note":"","ucode":"690E4E6B3E39DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308737,"discussion_content":"你的描述不太对，重写的时候是把内存中的数据以RDB的格式写入到aof文件中，不是把RDB文件写入到aof中","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1601048643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1252567,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1c/d7/c176ad9f.jpg","nickname":"绝尘而去","note":"","ucode":"690E4E6B3E39DD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":308760,"discussion_content":"对对，点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601078396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308737,"ip_address":""},"score":308760,"extra":""},{"author":{"id":1252567,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1c/d7/c176ad9f.jpg","nickname":"绝尘而去","note":"","ucode":"690E4E6B3E39DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":308762,"discussion_content":"好多人都因为你的描述而产生了疑问，所以纠正一下。哈哈😄","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601078777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308760,"ip_address":""},"score":308762,"extra":""},{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1252567,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1c/d7/c176ad9f.jpg","nickname":"绝尘而去","note":"","ucode":"690E4E6B3E39DD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":308766,"discussion_content":"哈哈，没事，应该的，技术就应该是清晰的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1601079465,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308762,"ip_address":""},"score":308766,"extra":""}]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298873,"discussion_content":"混合持久只有在 AOF 重写的时候，才会把 RDB 的内容写到 AOF 文件中的吗？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1597456970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":5,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"discussion":{"id":299077,"discussion_content":"是的，重写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597555949,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298873,"ip_address":""},"score":299077,"extra":""},{"author":{"id":1114684,"avatar":"https://static001.geekbang.org/account/avatar/00/11/02/3c/c9c1ca76.jpg","nickname":"雪海觅隐香","note":"","ucode":"07685DE073FBB9","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":301143,"discussion_content":"大佬，我想问下，是不是 AOF 重写的情况下宕机恢复读取到REDIS开头就只需恢复AOF文件数据即可，非重写情况，没有读到REDIS开头，先回放AOF里面的命令再去加载最新的RDB快照","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598422776,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299077,"ip_address":""},"score":301143,"extra":""},{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1114684,"avatar":"https://static001.geekbang.org/account/avatar/00/11/02/3c/c9c1ca76.jpg","nickname":"雪海觅隐香","note":"","ucode":"07685DE073FBB9","race_medal":1,"user_type":1,"is_pvip":false},"discussion":{"id":301492,"discussion_content":"不是的，AOF开启后，Redis重启后，就只会读取AOF，但是AOF是追加形式的，所以文件很大，所以才会搞AOF的重写，为了提高读取AOF的效率，才让AOF整合了RDB","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598540321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301143,"ip_address":""},"score":301492,"extra":""}]},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298700,"discussion_content":"你补充的很好啊，我对混合持久化这块也不是很熟悉，因为没怎么使用过，看了你的补充，学习到了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597380091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":298705,"discussion_content":"跟着老师和大佬一块学习，加油","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1597382015,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298700,"ip_address":""},"score":298705,"extra":""}]},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575495,"discussion_content":"是的, 现有的rdb是老的, 是上一个时间点的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654884890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308239,"discussion_content":"想咨询下，这两个日志里面都没有保存命令相应的时间信息，那么重写aof日志时，如何根据rdb文件保存数据，确定那些数据是相对于rdb文件是增量的数据呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600874120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1252567,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1c/d7/c176ad9f.jpg","nickname":"绝尘而去","note":"","ucode":"690E4E6B3E39DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308738,"discussion_content":"他这块的描述有问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601048718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308239,"ip_address":""},"score":308738,"extra":""},{"author":{"id":1254968,"avatar":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","nickname":"Darren","note":"","ucode":"CCD2B2C492BE9A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308761,"discussion_content":"是内存中的数据，写一份，不是用现有的rdb","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1601078443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308239,"ip_address":""},"score":308761,"extra":""}]}]},{"had_liked":false,"id":244756,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1598668985,"is_pvip":false,"replies":[{"id":"90089","content":"可以看下第10讲的答疑，有对COW的底层机制做了更加详细的介绍。<br><br>第5讲介绍COW时，有点偏于介绍COW的效果了。实际上，fork本身这个操作执行时，内核需要给子进程拷贝主线程的页表。如果主线程的内存大，页表也相应大，拷贝页表耗时长，会阻塞主线程。<br><br>bgsave保存RDB时，如果有写请求，主线程会把新数据写到新的物理地址，此时的阻塞会来自于主线程申请新内存空间以及复制原数据。<br><br>如果是子进程做复制，而主线程直接改数据的话，会有问题：1. 如果子进程还没有把一块数据写入RDB时，主线程就修改了数据，那么就快照完整性就被破坏了；2. 子进程复制数据时，也需要加锁，避免主线程同时修改，如果此时，主线程正好有写请求要处理，主线程同样会被阻塞。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1598706522,"ip_address":"","comment_id":244756,"utype":1}],"discussion_count":5,"race_medal":0,"score":"156217491641","product_id":100056701,"comment_content":"感觉老师这里是不是说的有点问题？<br>１．fork()本身应该是比较快的吧？因为COW的存在，只需要部分数据（局部变量）的复制。真正阻塞的是bgsave在持久化过程中写RDB的时候，因为同时要服务写请求，所以主线程要复制对应内存。<br>２．这个复制为什么不能让fork()出来的子线程去做呢？这样不就不阻塞主线程了吗？<br>","like_count":36,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504691,"discussion_content":"可以看下第10讲的答疑，有对COW的底层机制做了更加详细的介绍。\n\n第5讲介绍COW时，有点偏于介绍COW的效果了。实际上，fork本身这个操作执行时，内核需要给子进程拷贝主线程的页表。如果主线程的内存大，页表也相应大，拷贝页表耗时长，会阻塞主线程。\n\nbgsave保存RDB时，如果有写请求，主线程会把新数据写到新的物理地址，此时的阻塞会来自于主线程申请新内存空间以及复制原数据。\n\n如果是子进程做复制，而主线程直接改数据的话，会有问题：1. 如果子进程还没有把一块数据写入RDB时，主线程就修改了数据，那么就快照完整性就被破坏了；2. 子进程复制数据时，也需要加锁，避免主线程同时修改，如果此时，主线程正好有写请求要处理，主线程同样会被阻塞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598706522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346390,"discussion_content":"如果 父子进程同时修改一块内存就会存在资源竞争，势必需要通过加锁进行互斥操作，如果父进程在修改时发现，子进程正在锁着这块数据，父进程就会阻塞等待。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611931735,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2041396,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","nickname":"宙斯","note":"","ucode":"80DF36BAD298AD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335986,"discussion_content":"老师你好，‘如果子进程没有写入rdb，主线程就修改了’，个人感觉修改就修改了，子进程总是落下内存读取的瞬间数据。而不以开始做rdb的时刻为数据保留备份和镜像。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608443060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1181208,"avatar":"https://static001.geekbang.org/account/avatar/00/12/06/18/2fb33fe8.jpg","nickname":"chen","note":"","ucode":"94CE5D998F5EA2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2041396,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","nickname":"宙斯","note":"","ucode":"80DF36BAD298AD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":347868,"discussion_content":"这里应该是数据的完整性，比如是一个 list 类型的数据，子进程只写入了这个 list 中的部分数据，后部分数据被主线程修改了，那最终写入rdb 的就是错误的数据，除非在这块内存空间加锁，那就一样会阻塞主线程的写","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612344840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335986,"ip_address":""},"score":347868,"extra":""},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2041396,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","nickname":"宙斯","note":"","ucode":"80DF36BAD298AD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":575497,"discussion_content":"不行的, 这块必须保证完整性, 因为aof重写会用到, 比如数据如果已经+1, 后面写aof的时候又会写一个incr 1, 这样就重复了, 所以rdb不单单是拍照所用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654885260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335986,"ip_address":""},"score":575497,"extra":""}]}]},{"had_liked":false,"id":242131,"user_name":"曾轼麟","can_delete":false,"product_type":"c1","uid":1451391,"ip_address":"","ucode":"D418371AC11270","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","comment_is_top":false,"comment_ctime":1597598389,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"83201977013","product_id":100056701,"comment_content":" 【内存风险】：2 核 CPU、4GB 内存、500GB 磁盘， 2GB数据，在操作系统虚拟内存的支持下，fork出一个子进程会贡献主进程的虚拟内存映射的物理空间，这个是MMU实现的不属于Redis的产物，但是当发生数据修改的时候，MMU会将子进程的物理内存复制独立出来（写时拷贝技术）。在 8:2的独写比例中实际需要的物理内存可能会达到 1.6 +1.6 = 3.2 。假设开启swap的情况下，在物理内存不能满足程序运行的时候，虚拟内存技术会将内存中的数据保存在磁盘上，这样会导致Redis性能下降。<br><br>对于绑核问题，我认同Kaito同学的说法。不过我认为的问题是因为云主机的原因：一般大型服务器是使用QPI总线，NMUA架构。NUMA中，虽然内存直接绑定在CPU上，但是由于内存被平均分配在了各个组上。只有当CPU访问自身直接绑定的内存对应的物理地址时，才会有较短的响应时间。而如果需要访问其他CPU 绑定的内存的数据时，就需要通过特殊的通道访问，响应时间就相比之前变慢了（甚至有些服务器宁愿使用swap也不走特殊通道），假如当前云主机比较繁忙的情况下，这样就会导致性能下降。（大部分互联网公司都使用了服务器虚拟化技术）","like_count":19,"discussions":[{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554966,"discussion_content":"NUMA的诞生背景\n在NUMA出现之前，CPU朝着高频率的方向发展遇到了天花板，转而向着多核心的方向发展。\n\n在一开始，内存控制器还在北桥中，所有CPU对内存的访问都要通过北桥来完成。此时所有CPU访问内存都是“一致的”，如下图所示：\n\nUMA\n这样的架构称为UMA(Uniform Memory Access)，直译为“统一内存访问”，这样的架构对软件层面来说非常容易，总线模型保证所有的内存访问是一致的，即每个处理器核心共享相同的内存地址空间。但随着CPU核心数的增加，这样的架构难免遇到问题，比如对总线的带宽带来挑战、访问同一块内存的冲突问题。为了解决这些问题，有人搞出了NUMA。\n\nNUMA构架细节\nNUMA 全称 Non-Uniform Memory Access，译为“非一致性内存访问”。这种构架下，不同的内存器件和CPU核心从属不同的 Node，每个 Node 都有自己的集成内存控制器（IMC，Integrated Memory Controller）。\n\n在 Node 内部，架构类似SMP，使用 IMC Bus 进行不同核心间的通信；不同的 Node 间通过QPI（Quick Path Interconnect）进行通信，如下图所示：\n\nNUMA\n一般来说，一个内存插槽对应一个 Node。需要注意的一个特点是，QPI的延迟要高于IMC Bus，也就是说CPU访问内存有了远近（remote/local）之别，而且实验分析来看，这个差别非常明显。\n\n在Linux中，对于NUMA有以下几个需要注意的地方：\n\n1. 默认情况下，内核不会将内存页面从一个 NUMA Node 迁移到另外一个 NUMA Node；\n2. 但是有现成的工具可以实现将冷页面迁移到远程（Remote）的节点：NUMA Balancing；\n\n3. 关于不同 NUMA Node 上内存页面迁移的规则，社区中有依然有不少争论。\n\n链接：https://www.jianshu.com/p/0607c5f62c51","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1646703171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358496,"discussion_content":"有点不大理解楼主的意思，感觉kaito大佬说的意思应该是CPU执行指令的压力，和寻址关系应该不大","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615989836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1451391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","nickname":"曾轼麟","note":"","ucode":"D418371AC11270","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":358688,"discussion_content":"虚拟内存，由于fork进程，写时拷贝导致的页交换","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616030899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":358496,"ip_address":""},"score":358688,"extra":""},{"author":{"id":1451391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","nickname":"曾轼麟","note":"","ucode":"D418371AC11270","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":358689,"discussion_content":"会将超出部分的内存交换到磁盘上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616030942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":358496,"ip_address":""},"score":358689,"extra":""},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1451391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","nickname":"曾轼麟","note":"","ucode":"D418371AC11270","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358740,"discussion_content":"你是说写时拷贝时复制出来的叶如果达到一定数量后，根据numa架构，如果寻址时间太长，会产生额外的消耗，甚至是直接swap到硬盘吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616040856,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":358689,"ip_address":""},"score":358740,"extra":""}]},{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585995,"discussion_content":"numa架构是访问本地内存比较块访问远程内存比较慢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661932519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241857,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1597470743,"is_pvip":false,"replies":[{"id":"89293","content":"非常赞！考虑到了根据不同的QPS进行分析。<br><br>我再提一个维度，你可以考虑下，就是修改的键值对的范围，也就是说写操作是针对一小部分键值对，还是针对大部分键值对的。你觉得这个维度会有影响么？","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597507541,"ip_address":"","comment_id":241857,"utype":1}],"discussion_count":2,"race_medal":0,"score":"74611914775","product_id":100056701,"comment_content":"解答：<br>系统的QPS未知，两种情况吧：<br>1. QPS较低，不会有什么问题<br>2. QPS较高，首先由于写多读少，造成更多的写时拷贝，导致更多的内存占用。如果采用增量快照，需要增加额外的内存开销；再则，写RDB文件，OS会分配一些Cache用于磁盘写，进一步加剧内存资源的消耗。<br>由于频繁的写RDB文件，造成较大的磁盘IO开销，消耗CPU","like_count":17,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503861,"discussion_content":"非常赞！考虑到了根据不同的QPS进行分析。\n\n我再提一个维度，你可以考虑下，就是修改的键值对的范围，也就是说写操作是针对一小部分键值对，还是针对大部分键值对的。你觉得这个维度会有影响么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597507541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299150,"discussion_content":"修改键值对的范围，决定了写实复制的内存拷贝大小，因此会有影响","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1597578293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241575,"user_name":"漫步oo0云端","can_delete":false,"product_type":"c1","uid":1427152,"ip_address":"","ucode":"4906095751D7B0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppZl39m2knwLH6PIia5YQTOWSOTGhy8ZZAutUIrxKOYFCtLLLYb1OZvIVVLzL7Y8eglKFe4Sib9D7g/132","comment_is_top":false,"comment_ctime":1597359966,"is_pvip":false,"replies":[{"id":"89303","content":"如果服务挂了，我们可以让Redis实例自动重启。此时，如果没有数据备份的话，再启动时，所有的数据都需要重新写入，这个过程会比较耗时。而如果有备份的话，Redis再启动后，可以直接读入备份数据，对于这些数据的读写操作就可以很快服务了。不知道有没有解答你的疑惑。<br><br>愿意提出来的问题都是好问题哈 :)","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597556874,"ip_address":"","comment_id":241575,"utype":1}],"discussion_count":19,"race_medal":0,"score":"66021869406","product_id":100056701,"comment_content":"我想提一个傻问题，我作为初学者想问，如果redis服务挂了，备份有什么用？能恢复的前提不是服务还存活吗？难道服务挂了会自动拉起服务？自动还原吗？","like_count":15,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503779,"discussion_content":"如果服务挂了，我们可以让Redis实例自动重启。此时，如果没有数据备份的话，再启动时，所有的数据都需要重新写入，这个过程会比较耗时。而如果有备份的话，Redis再启动后，可以直接读入备份数据，对于这些数据的读写操作就可以很快服务了。不知道有没有解答你的疑惑。\n\n愿意提出来的问题都是好问题哈 :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597556874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298793,"discussion_content":"生产环境，Redis服务都是有监控的。服务挂了，会自动拉起，可以实现自动恢复。\n除非 持久化文件损坏，这时就需要人工干预了","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1597400091,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1623487,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/sPORo6cN3GSVxjHj9nqSAPn7KG4wtSTqNUommjNndpf8qd7bHKHquuldXZfxD5nF1ldy4LeoAQNwSsOgcmWG9w/132","nickname":"守望者","note":"","ucode":"DEE375A5F2D57A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358369,"discussion_content":"服务重启之后，怎么自动监测数据是否丢失呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615972941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298793,"ip_address":""},"score":358369,"extra":""}]},{"author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346391,"discussion_content":"备份的目的就是为了数据重放比较快，在Redis重启(自动或手动)后，可以顺序读取备份文件，如果没有备文件，可能需要到 关系数据库 中读取，但是查询数据库恢复缓存，要比顺序读取文件慢的多得多。所有备份的目的就是在Redis服务重启后能够尽可能快的提供服务。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611932261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1263094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/45/f6/c75ff5a6.jpg","nickname":"ll","note":"","ucode":"30075384D40BCA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298643,"discussion_content":"用监控服务检测服务状态，自动拉起服务。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597369458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585997,"discussion_content":"生产环境都是容器化，物理机或者虚拟机是集群化，都有自动拉起服务的后台监控进程，当redis服务挂了会立马拉起来的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661932722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575498,"discussion_content":"服务先被容器拉起来, redis服务自己再去恢复......         自己都死了怎么恢复自己...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654885409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1344336,"avatar":"https://static001.geekbang.org/account/avatar/00/14/83/50/cdbad036.jpg","nickname":"Jzhb","note":"","ucode":"2D68621A5757F2","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376399,"discussion_content":"我看，漫步兄应该是说手动操作去恢复这个过程耗时比较长，因此觉得如果是手动操作，没有备份的意义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622108578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1427152,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppZl39m2knwLH6PIia5YQTOWSOTGhy8ZZAutUIrxKOYFCtLLLYb1OZvIVVLzL7Y8eglKFe4Sib9D7g/132","nickname":"漫步oo0云端","note":"","ucode":"4906095751D7B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299223,"discussion_content":"感谢老师回复。受教了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597619164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211790,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7d/8e/bb16d414.jpg","nickname":"Wangxi","note":"","ucode":"C25A9A14179930","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298690,"discussion_content":"你写代码，写了1000行，这时候电脑死机了。备份能保证你重新打开电脑代码还在。如果没有备份，不好意思，代码重新再写一遍吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597379174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1231549,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ca/bd/a51ae4b2.jpg","nickname":"吃饭饭","note":"","ucode":"95CFA07CDA2957","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1211790,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7d/8e/bb16d414.jpg","nickname":"Wangxi","note":"","ucode":"C25A9A14179930","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":300749,"discussion_content":"你这个叫硬件存储吧？对应不上 Redis 的备份概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598254694,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298690,"ip_address":""},"score":300749,"extra":""},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1231549,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ca/bd/a51ae4b2.jpg","nickname":"吃饭饭","note":"","ucode":"95CFA07CDA2957","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584385,"discussion_content":"从内存和磁盘的角度上看，还可以～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660798890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":300749,"ip_address":"浙江"},"score":584385,"extra":""}]},{"author":{"id":2105056,"avatar":"","nickname":"forever","note":"","ucode":"7DB5A0D9049688","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298677,"discussion_content":"备份是为了数据落地到硬盘，崩溃后你的硬盘数据还在就能恢复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597376525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1193052,"avatar":"https://static001.geekbang.org/account/avatar/00/12/34/5c/6b4757a0.jpg","nickname":"倪大人","note":"","ucode":"4798D69F3E86FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298673,"discussion_content":"备份的目的是为了给你保存一份数据，要是没有备份就没法恢复数据了，无论是自动还是手动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597375422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","nickname":"Mr.蜜","note":"","ucode":"C911B81198B3F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298654,"discussion_content":"如果到了你说的这种会宕机的场景，那么就不可能还是一个redis实例，肯定会使用多个redis实例，那么在redis宕机以后，快速恢复，提供服务，就是最好的方案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597371902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1629537,"avatar":"https://static001.geekbang.org/account/avatar/00/18/dd/61/544c2838.jpg","nickname":"kevin","note":"","ucode":"8A0F58E2723893","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298623,"discussion_content":"redis是内存数据库，宕机后内存中数据就丢了，备份就是保证redis服务重新启动后可以恢复数据吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597365288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1427152,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppZl39m2knwLH6PIia5YQTOWSOTGhy8ZZAutUIrxKOYFCtLLLYb1OZvIVVLzL7Y8eglKFe4Sib9D7g/132","nickname":"漫步oo0云端","note":"","ucode":"4906095751D7B0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1629537,"avatar":"https://static001.geekbang.org/account/avatar/00/18/dd/61/544c2838.jpg","nickname":"kevin","note":"","ucode":"8A0F58E2723893","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":298625,"discussion_content":"所以备份的目的主要是手动恢复？那么手动恢复的过程也是耗时的啊？首先故障后人要知道。那么这个过程就很耗时，开机，分析问题，找备份文件，执行语句还原。整个过程我不认为人工还原是好的办法。如果无法做到自动恢复，我总觉得备份的意义并不大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597366341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298623,"ip_address":""},"score":298625,"extra":""},{"author":{"id":1061214,"avatar":"https://static001.geekbang.org/account/avatar/00/10/31/5e/d7cdc1d6.jpg","nickname":"江厚宏","note":"","ucode":"00A5A0995C6D75","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1427152,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppZl39m2knwLH6PIia5YQTOWSOTGhy8ZZAutUIrxKOYFCtLLLYb1OZvIVVLzL7Y8eglKFe4Sib9D7g/132","nickname":"漫步oo0云端","note":"","ucode":"4906095751D7B0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298773,"discussion_content":"备份做的是让你能恢复，而故障有可能是断电等物理原因，这样就无法自动恢复了，所以没什么意义","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597395500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298625,"ip_address":""},"score":298773,"extra":""},{"author":{"id":1788196,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/49/24/8fdc9194.jpg","nickname":"家豪","note":"","ucode":"61139279C5C6A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1427152,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eppZl39m2knwLH6PIia5YQTOWSOTGhy8ZZAutUIrxKOYFCtLLLYb1OZvIVVLzL7Y8eglKFe4Sib9D7g/132","nickname":"漫步oo0云端","note":"","ucode":"4906095751D7B0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364544,"discussion_content":"假如没有备份，redis重启后，由于没有缓存，刚开始用户访问系统时，系统的响应会变慢。所以，我觉得备份的意义主要还是确保系统重启后，能够恢复正常的响应速度。我猜你想说的应该是“备份恢复速度的快慢意义不大”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617513259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298625,"ip_address":""},"score":364544,"extra":""}]}]},{"had_liked":false,"id":242179,"user_name":"每天晒白牙","can_delete":false,"product_type":"c1","uid":1004698,"ip_address":"","ucode":"A1B102CD933DEA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/9a/76c0af70.jpg","comment_is_top":false,"comment_ctime":1597629818,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"40252335482","product_id":100056701,"comment_content":"Redis持久化<br>AOF<br>AOF是一种通过记录操作命令的的方式来达到持久化的目的，正是因为记录操作命令而不是数据，所以在恢复数据的时候需要 redo 这些操作命令(当然 AOF 也有重写机制从而使命令减少)，如果操作日志太多，恢复过程就会很慢，可能会影响 Redis 的正常使用<br><br>RDB<br>RDB 是一种内存快照，把内存的数据在某一时刻的状态记录下来，所以通过 RDB 恢复数据只需要把 RDB 文件读入内存就可以恢复数据(具体实现细节还没去了解)<br><br>但这里有两个需要注意的问题<br>1.对哪些数据做快照，关系到快照的执行顺序<br>2.做快照时，还能对数据做增删改吗？这会关系到 Redis 是否阻塞，因为如果在做快照时，还能对数据做修改，说明 Redis 还能处理写请求，如果不能对数据做修改，就不能处理写请求，要等执行完快照才能处理写请求，这样会影响性能<br><br>来看第一个问题<br>RDB 是对全量数据需要快照，全量数据会使 RDB 文件大，发文件写到磁盘就会耗时，因为 Redis 是单线程，会不会阻塞主线程？(这一点始终都要考虑的点)<br>Redis 实现 RDB 的方式有两种<br>①save:在主线程中执行，会导致阻塞<br>②bgsave:创建子线程来执行，不会阻塞，这是默认的<br>所以可以使用 bgsave 来对全量内存做快照，不影响主进程<br><br>来看第二个问题<br>在做快照时，我们是不希望数据被修改的，但是如果在做快照过程中，Redis 不能处理写操作，这对业务是会造成影响的，但上面刚说完 bgsave 进行快照是非阻塞的呀，这是一个常见的误区：避免阻塞和正常的处理写操作不是一回事。用 bgsave 时，主线程是没有被阻塞，可以正常处理请求，但为了保证快照的完整性，只能处理读请求，因为不能修改正在执行快照的数据。显然为了快照而暂停写是不能被接受的。Redis 采用操作系统提供的写时复制技术（Copy-On-Write 即 COW），在执行快照的同时，可以正常的处理写操作<br>bgsave 子线程是由主线程 fork 生成，可以共享主线程的所有内存数据，所以 bgsave 子线程是读取主线程的内存数据并把他们写入 RDB 文件的<br>如果主线程对这些数据只执行读操作，两个线程是互不影响的。如果主线程要执行写造作，那么这个数据就会被复制一份，生成一个副本，然后 bgsave 子线程会把这个副本数据写入 RDB 文件，这样主线程就可以修改原来的数据了。这样既保证了快照的完整性，也保证了正常的业务进行<br><br>那如何更好的使用 RDB 呢？<br>RDB 的频率不好把握，如果频率太低，两次快照间一旦有宕机，就可能会丢失很多数据。如果频率太高，又会产生额外开销，主要体现在两个方面<br>①频繁将全量数据写入磁盘，会给磁盘带来压力，多个快照竞争有效的磁盘带宽<br>②bgsave 子线程是通过 fork 主线程得来，前面也说了，bgsave 子线程是不会阻塞主线程的，但 fork 这个创建过程是会阻塞主线程的，而且主线程内存越大，阻塞时间越长<br><br>最好的方法是全量快照+增量快照，即进行一次 RDB 后，后面的增量修改用 AOF 记录两次全量快照之间的写操作，这样可以避免频繁 fork 对主线程的影响。同时避免 AOF 文件过大，重写的开销","like_count":9,"discussions":[{"author":{"id":1581294,"avatar":"","nickname":"Geek_be4cec","note":"","ucode":"C87642D655EAC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391614,"discussion_content":"最好的方法是全量快照+增量快照，即进行一次 RDB 后，后面的增量修改用 AOF 记录两次全量快照之间的写操作。\n\n请问这个具体怎么实现？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630552536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244835,"user_name":"吕","can_delete":false,"product_type":"c1","uid":1210890,"ip_address":"","ucode":"8F08E2CB81C4C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/0a/0ce5c232.jpg","comment_is_top":false,"comment_ctime":1598693985,"is_pvip":false,"replies":[{"id":"90087","content":"可以自动执行。Redis配置文件中的save选项是用来配置bgsave的触发条件的，例如<br>save 60 10000<br><br>如果60s内有至少10000个键值对的修改，就会自动触发bgsave了。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1598705323,"ip_address":"","comment_id":244835,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35958432353","product_id":100056701,"comment_content":"老师，请教一下，bgsave命令只能是手动执行么？没配置中只看到了save,没有bgsave的配置","like_count":8,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504713,"discussion_content":"可以自动执行。Redis配置文件中的save选项是用来配置bgsave的触发条件的，例如\nsave 60 10000\n\n如果60s内有至少10000个键值对的修改，就会自动触发bgsave了。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1598705323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241702,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1597394594,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"35957132962","product_id":100056701,"comment_content":"很奇怪，对于RDB和AOF混合搭配的策略，为什么不把AOF应用于RDB生成增量快照呢？而非要再次生成全量快照？","like_count":8,"discussions":[{"author":{"id":1022411,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/99/cb/8964faab.jpg","nickname":"-只是小小配角_","note":"","ucode":"EFC1CD54A23F39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348255,"discussion_content":"个人理解：4.0之前的aof重写就是把内存里的数据重新以可读的指令格式写入到aof文件中，这样aof文件中无效指令是没有了，但在加载aof文件的时候依然比较慢。既然重写的时候已经要全量持久化内存数据，那么以rdb的格式持久化后，在加载的时候就更快。同时，在进行rdb格式持久化的时候，主线程仍然在进行写入操作，把这部分操作以aof指令的格式追加到aof文件中，就能保证数据的完整性","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612493023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575499,"discussion_content":"意思是就进行一次全量快照, 后面增量全部记aof?  那我用rdb快照还有个毛用, 就用第一次?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654885812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2542376,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","nickname":"夏天","note":"","ucode":"5F224DDAC94DFF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369438,"discussion_content":"AOF 保存指令，重放肯定没有 RDB 快","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619023501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1036864,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d2/40/1721df97.jpg","nickname":"万物皆然","note":"","ucode":"D8DB86666D12A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299144,"discussion_content":"aof记录的是命令","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597575928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1671917,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqvfH3iatrDMG3YaW1LlCtibKbPe4lSib8CvWTK78emvAu0dNCQY7OOZPZfQicdCUKUyFpTcia5exNibvIQ/132","nickname":"akka","note":"","ucode":"FCD0964E761172","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299130,"discussion_content":"如果要做增量快照，就会不用aof日志来记录更改信息了，直接用第一种增量快照方案就行；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597570327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1671917,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqvfH3iatrDMG3YaW1LlCtibKbPe4lSib8CvWTK78emvAu0dNCQY7OOZPZfQicdCUKUyFpTcia5exNibvIQ/132","nickname":"akka","note":"","ucode":"FCD0964E761172","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575500,"discussion_content":"确实, aof只是在两次全量快照之间辅助, 这样全量快照不用太频繁的进行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654885937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299130,"ip_address":""},"score":575500,"extra":""}]},{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298904,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597470806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241616,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1597371655,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31662142727","product_id":100056701,"comment_content":"1.写太多，COW需要复制的东西太多，内存占用问题；<br>2.CPU太少，redis后台还有很多线程在后台工作，会产生CPU竞争。","like_count":7},{"had_liked":false,"id":241558,"user_name":"小宇子2B","can_delete":false,"product_type":"c1","uid":1254615,"ip_address":"","ucode":"E360188C65EAEA","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/d7/146f484b.jpg","comment_is_top":false,"comment_ctime":1597336133,"is_pvip":false,"replies":[{"id":"89331","content":"分析的不错，这种情况下，内存的潜在压力风险比较大。<br><br>另外，Kaito同学还分析了CPU资源的风险，也可以看看。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597579302,"ip_address":"","comment_id":241558,"utype":1}],"discussion_count":4,"race_medal":0,"score":"31662107205","product_id":100056701,"comment_content":"做RDB期间是写时复制的 2GB的数据 80%都是写请求 也就是大概要复制出来1.6GB数据，加上本身数据2GB ，已经达到3.6GB，去掉操作系统本身的内存占用 机器所剩内存已经不多了 容易发生OOM","like_count":7,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503772,"discussion_content":"分析的不错，这种情况下，内存的潜在压力风险比较大。\n\n另外，Kaito同学还分析了CPU资源的风险，也可以看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597579302,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1398112,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ9Tqqn1hgO2KfT77UkrtxQ2JBsa7xTLXLFO2Da5kAPjyXiceyibE7LZo5zxLm90wCKeHdXbPwUcwVA/132","nickname":"优雅小黑猫","note":"","ucode":"7FF0B8C0843957","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539754,"discussion_content":"我觉得直接拿2GB * 0.8 = 1.6GB 有失偏颇。假设你bgsave要10s钟，那也就意味着需要重新复制一份的数据是这10s钟之内的写请求，一般情况下这个时间段内要复制出来的数据是远远不到1.6GB的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639831342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","nickname":"Mr.蜜","note":"","ucode":"C911B81198B3F5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298657,"discussion_content":"在我看来，COW->数据备份好以后，会立即删掉复制出来的数据，所以占用内存其实没有你想象的那么多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597372386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1035257,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/f9/75d08ccf.jpg","nickname":"Mr.蜜","note":"","ucode":"C911B81198B3F5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346393,"discussion_content":"COW 是在主进程一侧执行的。只有子进程把所有数据写入到RDB后才会释放内存，所以内存占用还是蛮多的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611932632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298657,"ip_address":""},"score":346393,"extra":""}]}]},{"had_liked":false,"id":271255,"user_name":"周翔在山麓（Xiang Zhou）","can_delete":false,"product_type":"c1","uid":1609289,"ip_address":"","ucode":"E126273356E5B6","user_header":"https://static001.geekbang.org/account/avatar/00/18/8e/49/10ef002d.jpg","comment_is_top":false,"comment_ctime":1609494621,"is_pvip":false,"replies":[{"id":"98415","content":"学习时把知识贯通起来理解是个好方法！","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1609720447,"ip_address":"","comment_id":271255,"utype":1}],"discussion_count":4,"race_medal":0,"score":"27379298397","product_id":100056701,"comment_content":"这一讲真的很好, aof 相当于数据库的 binlog, rdb 相当于redo log. 知识互相映射, 加强了学习. 我又看了一遍mysql 的数据恢复机制. 同学们还记得吗?","like_count":6,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512880,"discussion_content":"学习时把知识贯通起来理解是个好方法！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609720447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336951,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/77/194ba21d.jpg","nickname":"lzh","note":"","ucode":"C3D83DF4230109","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349431,"discussion_content":"要类比也应该是aof->statement的bin_log，而rdb->row的bin_log吧...全量快照是由bin_log完成的，而且也没有redo_log的循环写","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1613203094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2450893,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/L8EpqHoAnmvkzCIsdOkv5QvhIzu5tMaF2FDusXShqukv5ZBkS8DbicWaErjnYydibiaqBrs70wQ8P6axvC2FbWpbQ/132","nickname":"Geek_d3928c","note":"","ucode":"7CB09FD1F7CB23","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387402,"discussion_content":"redolog没有写回到磁盘，这里aof已经写回到磁盘了，根本不一样吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628152326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1272315,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/nSvVtStiaQzslFM7YRnlhPyTgSHGoXvOqlSQS8rMEmfnFCtasNxRiaVfrRcMlkuOSq1iaReQD0CiaGHMVibsVMNkAxQ/132","nickname":"justin","note":"","ucode":"09AE502D6A28D9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373183,"discussion_content":"别乱误导人，没有可比性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620643566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246655,"user_name":"benzhang","can_delete":false,"product_type":"c1","uid":2105770,"ip_address":"","ucode":"69F7137CE0D197","user_header":"https://static001.geekbang.org/account/avatar/00/20/21/aa/66d71e6b.jpg","comment_is_top":false,"comment_ctime":1599446971,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"18779316155","product_id":100056701,"comment_content":"你好，关于这一点我有点疑问<br>“另一方面，bgsave 子进程需要通过 fork 操作从主线程创建出来。虽然，子进程在创建后不会再阻塞主线程，但是，fork 这个创建过程本身会阻塞主线程，而且主线程的内存越大，阻塞时间越长。如果频繁 fork 出 bgsave 子进程，这就会频繁阻塞主线程了。那么，有什么其他好方法吗？”<br>我一直以为bgsave这个子进程只需要创建一次而已。从上面这段话的意思看，也就是说每写一次快照就需要fork一个bgsave子进程吗？如果是的话，哪如何解决写入冲突呢？","like_count":4,"discussions":[{"author":{"id":1645430,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","nickname":"Spring4J","note":"","ucode":"06F056085A2564","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549495,"discussion_content":"不是说了只能有一个bgsave的子进程吗？如果频繁触发bgsave，可能上一个子进程还没写完，这时候主线程肯定就只有阻塞等待了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644029216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289212,"user_name":"Geek__e15575f5b6ec","can_delete":false,"product_type":"c1","uid":1462158,"ip_address":"","ucode":"B5358BC01BCA8D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJnugUNWBtcszhJg3Q0hqEMSHftKco2TqCG78blZ3ibjncjZ64NbibGia5l4NB0DUibIq0BCZ03JvkoNA/132","comment_is_top":false,"comment_ctime":1618917970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10208852562","product_id":100056701,"comment_content":"最近遇到个问题，docker安装的redis，运行一段时间之后，日志显示会出现几十次的DB saved on disk<br>时间间隔几百毫秒到几秒之间 然后会出现redis部分数据丢失  完全不知道怎么排查 有没有大佬能够解惑","like_count":2},{"had_liked":false,"id":241630,"user_name":"Spring4J","can_delete":false,"product_type":"c1","uid":1645430,"ip_address":"","ucode":"06F056085A2564","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKiauonyMORA2s43W7mogGDH4WYjW0gBJtYmUa9icTB6aMPGqibicEKlLoQmLKLWEctwHzthbTZkKR20w/132","comment_is_top":false,"comment_ctime":1597374792,"is_pvip":false,"replies":[{"id":"89225","content":"不错，不错！可以再想想看，在问题里的云主机上，哪怕我们先不考虑快照频率问题，单就做一次快照本身，是否可能还会有其他问题？：）","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597411893,"ip_address":"","comment_id":241630,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10187309384","product_id":100056701,"comment_content":"由于修改操作占大部分比例，为了尽可能保证宕机时数据的完整性，快照的间隔就不能太长，而间隔太短又会带来很多的性能开销，所以对于这种特点的数据，不适合使用RDB的持久化方式","like_count":2,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503795,"discussion_content":"不错，不错！可以再想想看，在问题里的云主机上，哪怕我们先不考虑快照频率问题，单就做一次快照本身，是否可能还会有其他问题？：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597411893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2346462,"avatar":"https://static001.geekbang.org/account/avatar/00/23/cd/de/0334fd13.jpg","nickname":"许峰","note":"","ucode":"C12E7B53D7E658","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":330506,"discussion_content":"一天做一次快照, 肯定是可以的啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606637863,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342631,"user_name":"go big","can_delete":false,"product_type":"c1","uid":2904850,"ip_address":"","ucode":"783EA248C52B2C","user_header":"https://static001.geekbang.org/account/avatar/00/2c/53/12/ed39ec11.jpg","comment_is_top":false,"comment_ctime":1650371780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5945339076","product_id":100056701,"comment_content":"哈哈","like_count":1},{"had_liked":false,"id":328714,"user_name":"冷山","can_delete":false,"product_type":"c1","uid":2839720,"ip_address":"","ucode":"67163D24B7FA0E","user_header":"https://static001.geekbang.org/account/avatar/00/2b/54/a8/3b334406.jpg","comment_is_top":false,"comment_ctime":1640851632,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5935818928","product_id":100056701,"comment_content":"哎呀，总结一下：<br>不管是RDB还是AOF。他们都需要fork出一个子进程进行日志的操作。<br>而两者使用子进程来操作日志时、都存在两个阻塞点：<br>1. fork的过程中、如果实例数据比较多，主线程的页表就比较大、复制主线程的页表给子进程这个操作就比较耗时（这里可以理解为主线程把自己的内存空间中的数据遗传给子进程使用），会阻塞主线程。<br><br>2. RDB在生成日志和AOF在重写时，为了支持主线程同时可以对原有数据进行写操作：两者都借助了操作系统的：写时复制机制。 写时复制机制就是主线程在修改原有数据时，它会动用遗传给子进程的数据，而是拷贝一份数据副本（以页为单位拷贝），然后对这个副本进行操作。  假设主线程在子进程使用的原有数据A上做修改，如果此时数据A还没有被AOF重写或者被生成RDB快照，那么就会导致子进程重写&#47;生成RDB快照的过程失败，或者说是脏数据嘛。","like_count":1,"discussions":[{"author":{"id":1443795,"avatar":"https://static001.geekbang.org/account/avatar/00/16/07/d3/6cef132d.jpg","nickname":"童荣兵","note":"","ucode":"607AE45DF2DD29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553228,"discussion_content":"如果此时数据A还没有被AOF重写或者被生成RDB快照，那么就会导致子进程重写/生成RDB快照的过程失败，或者说是脏数据嘛？是这样吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645775979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325023,"user_name":"树心","can_delete":false,"product_type":"c1","uid":1589523,"ip_address":"","ucode":"6C329F0FF798B9","user_header":"https://static001.geekbang.org/account/avatar/00/18/41/13/ab14ad25.jpg","comment_is_top":false,"comment_ctime":1638781770,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"5933749066","product_id":100056701,"comment_content":"bgsave是子进程，为什么能共享主线程（主进程）的数据，不是子线程才能共享父进程的数据吗？子进程fork的时候是要复制一份的","like_count":1},{"had_liked":false,"id":300277,"user_name":"Just Do IT","can_delete":false,"product_type":"c1","uid":1192724,"ip_address":"","ucode":"1EAD92510FA7BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","comment_is_top":false,"comment_ctime":1625080959,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5920048255","product_id":100056701,"comment_content":"感觉老师说的Redis4.0AOF和RDB混用那个地方有点问题？<br><br>Redis恢复数据是以AOF优先的，如果采用AOF只记录中间的数据，那么恢复的时候肯定是数据缺失的。","like_count":1,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388407,"discussion_content":"aof如果没有人为干预应该是全量的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628755002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280645,"user_name":"Just Do IT","can_delete":false,"product_type":"c1","uid":1192724,"ip_address":"","ucode":"1EAD92510FA7BE","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","comment_is_top":false,"comment_ctime":1614303798,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5909271094","product_id":100056701,"comment_content":"我认为这句话是有问题的，不是使用了混合持久化就不丢失数据了   如果在全量快照的过程中宕机，丢失的数据反而比只使用AOF的策略更多，它丢失的是整个内存的数据，如果在生成全量快照之后宕机，那么它丢失数据的情况和AOF相同。<br><br><br><br>“数据不能丢失时，内存快照和 AOF 的混合使用是一个很好的选择；”","like_count":1,"discussions":[{"author":{"id":1073236,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/54/b3eb605b.jpg","nickname":"阿牛","note":"","ucode":"DC8C189FCF3289","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360620,"discussion_content":"如果快照时宕机，可以使用上一次的RDB+增量AOF恢复。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616490618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1192724,"avatar":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","nickname":"Just Do IT","note":"","ucode":"1EAD92510FA7BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1073236,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/54/b3eb605b.jpg","nickname":"阿牛","note":"","ucode":"DC8C189FCF3289","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":384525,"discussion_content":"全量RDB的时候会先清空增量的AOF，清空AOF之后才开始RDB。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626629824,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":360620,"ip_address":""},"score":384525,"extra":""},{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1192724,"avatar":"https://static001.geekbang.org/account/avatar/00/12/33/14/78104f1f.jpg","nickname":"Just Do IT","note":"","ucode":"1EAD92510FA7BE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388408,"discussion_content":"为啥要先清空增量aof呢？基于什么考虑的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628755245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":384525,"ip_address":""},"score":388408,"extra":""}]}]},{"had_liked":false,"id":273898,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1610711740,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5905679036","product_id":100056701,"comment_content":"「混合使用 AOF 日志和内存快照」<br>这节课的aof文件，和上一节课的aof 文件，不是同一份吧？因为重新执行快照，这节课的aof 文件会被清空。<br>比如我开启了aof 和rdb 两种持久化策略，在更新数据时，要写两份aof 文件是么？<br>那我能关闭上节课的aof 持久化策略，只启用本节课的混合aof 和rdb 策略，是不是也能做到数据的不丢失？（丢失多少数据，则由混合的aof 文件刷盘间隔决定）<br>谢谢老师！","like_count":1},{"had_liked":false,"id":269579,"user_name":"chon","can_delete":false,"product_type":"c1","uid":1068925,"ip_address":"","ucode":"1C32170972F726","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/7d/dd852b04.jpg","comment_is_top":false,"comment_ctime":1608705853,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5903673149","product_id":100056701,"comment_content":"写读比这么高有必要用redis吗？","like_count":1,"discussions":[{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588620,"discussion_content":"当然有用了。redis每秒可以写10万条数据，如果不用redis，那么mysql如何能顶住每秒10万+的写入，redis本身就是为了减少对db的压力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663913862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241570,"user_name":"learn more","can_delete":false,"product_type":"c1","uid":1128702,"ip_address":"","ucode":"0EF628B2E0F95E","user_header":"https://static001.geekbang.org/account/avatar/00/11/38/fe/00ddeb81.jpg","comment_is_top":false,"comment_ctime":1597348283,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5892315579","product_id":100056701,"comment_content":"因为redis是单线程的，所以双核够用，一个执行命令，一个用来bgsave，不会阻塞主线程；内存4g，实际占用2g左右，因此内存是一个临界点，比如 fork 子进城的时候很有可能耗尽所有的内存，加上读写比例是写多读少，那么根据 save 的配置很有可能出现频繁的 bgsave，此时内存将成为瓶颈；磁盘空间足够，所以不会影响。<br>不知道有没有分析正确😂","like_count":1},{"had_liked":false,"id":360137,"user_name":"NullPointer","can_delete":false,"product_type":"c1","uid":1179184,"ip_address":"广东","ucode":"83B7DA926A0411","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/30/c9b568c3.jpg","comment_is_top":false,"comment_ctime":1666226821,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666226821","product_id":100056701,"comment_content":"拍照的时候人一直动的画拍摄质量不好，选用aof好点<br>","like_count":0},{"had_liked":false,"id":358552,"user_name":"RD","can_delete":false,"product_type":"c1","uid":1194858,"ip_address":"北京","ucode":"E3947B6E1681AD","user_header":"https://static001.geekbang.org/account/avatar/00/12/3b/6a/80d9c545.jpg","comment_is_top":false,"comment_ctime":1664423441,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1664423441","product_id":100056701,"comment_content":"我感觉混合模式那里说的有问题。AOF 日志和 RDB 日志就是两个东西。重启恢复逻辑应该是这样的，如果 AOF 没开，RDB 开着，则走 RDB 恢复。如果 AOF 开着，则只会走 AOF ，因为 AOF 本身的定义就是全量数据，所以只要 AOF 开启，不管是否混用，都只需要 AOF 文件就能完全恢复数据。这里的混用不是指，混用两种日志逻辑去恢复数据，而是综合两种日志的优势给 AOF 增强。AOF 的缺点是，记录的命令行而不是数据本身，所以在恢复的时候只能挨条重放，redis 又是单线程，所以很慢。RDB 的缺点是，每隔很短的时间就做快照，会频繁做 fork 操作，并且频繁地进行写时复制耗费内存。所以，所谓的混合模式，还是单独使用 AOF 日志模式，用重写机制不频繁的优点代替 RDB 频繁快照的缺点，用 RDB 记录数据二进制格式的优点，弥补 AOF 记录命令重放的缺点。所以，最终逻辑应该是，在服务启动时，做快照生成二进制内容写到 AOF 文件，然后正常增量写，等到了重写的时候，再重新生成二进制内容写到新的 AOF 文件，然后继续增量写。从头到尾都是 AOF 的逻辑，唯一的就是重写的时候，结合 RDB 的优点，写入的是二进制格式日志。","like_count":0},{"had_liked":false,"id":356794,"user_name":"Geek_7b634a","can_delete":false,"product_type":"c1","uid":2037343,"ip_address":"北京","ucode":"F7E9652F667C39","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/w5clq5iao6Drk2omjqdcJSVicHLffzwsJnqOdD7HATD4904UgXKr5LCfAa90bNLhr7uia0mjyxcF1HGibKQXzicSB7A/132","comment_is_top":false,"comment_ctime":1662599819,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662599819","product_id":100056701,"comment_content":"赞","like_count":0},{"had_liked":false,"id":356241,"user_name":"遇见阳光","can_delete":false,"product_type":"c1","uid":1203576,"ip_address":"湖北","ucode":"378E5D37B3CD0E","user_header":"https://static001.geekbang.org/account/avatar/00/12/5d/78/f011d586.jpg","comment_is_top":false,"comment_ctime":1662083182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662083182","product_id":100056701,"comment_content":"1 rdb与aof混合持久化过程中,在rename过程中,此时又存在新的写操作,如何保证后续的写命令也能写入aof文件中? 2 rename是否保证原子性? 3.上次混合持久化未完成时,快速写入又导致快照开始是否会发生.","like_count":0},{"had_liked":false,"id":355525,"user_name":"Geek_77396f","can_delete":false,"product_type":"c1","uid":3161420,"ip_address":"北京","ucode":"0B668C20368723","user_header":"","comment_is_top":false,"comment_ctime":1661471573,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661471573","product_id":100056701,"comment_content":"aof和rdb混用时，1、aof和rdb恢复数据执行顺序，是先执行哪种持久化方式？ 2.aof开启后按之前讲的应该是记录每一次的操作命令，作为rdb补充，记录区间时刻修改数据，这个能控制只记录区间时刻数据命令吗？","like_count":0},{"had_liked":false,"id":355070,"user_name":"蔡欧","can_delete":false,"product_type":"c1","uid":1317604,"ip_address":"广东","ucode":"39470A1DCAA7A9","user_header":"https://static001.geekbang.org/account/avatar/00/14/1a/e4/5e2a8190.jpg","comment_is_top":false,"comment_ctime":1661052850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661052850","product_id":100056701,"comment_content":"rdb的优点和缺点：优点就是弥补了AOF恢复慢的问题，缺点就是快照之间的数据会丢失、单次快照开销比较大，如果内存数据很大，有快照失败的风险、增量快照会有额外的空间损耗<br>如何定义备份和恢复的策略：如果接受秒级的数据丢失，可以使用aof，如果可以接受分钟级，则可以使用rdb，如果不接受数据丢失，可以使用aof+rdb混合模式","like_count":0},{"had_liked":false,"id":351779,"user_name":"going","can_delete":false,"product_type":"c1","uid":2313353,"ip_address":"","ucode":"3AA83F9B07BE8B","user_header":"https://static001.geekbang.org/account/avatar/00/23/4c/89/82a3ee04.jpg","comment_is_top":false,"comment_ctime":1658193123,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658193123","product_id":100056701,"comment_content":"老师有一个问题不太明白，在fork子进程这个过程中主线程是被阻塞的，那为什么有一个子进程在执行就不能有第二个子进程在执行，他不能在一个子进程在执行写RDB的时候在产生一个子进程吗？","like_count":0},{"had_liked":false,"id":351751,"user_name":"Geek_ad9aec","can_delete":false,"product_type":"c1","uid":3050838,"ip_address":"","ucode":"951E86E64B4844","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/MnNmAGFwlyPFiazHo4micPVFR4SheUk4VC5gKyoYHyHaZAWbyI16aEhm4xoxa4bNH7h5SdPajZibpC5wlyUGBzoog/132","comment_is_top":false,"comment_ctime":1658151255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658151255","product_id":100056701,"comment_content":"写时复制解决在做快照期间数据的修改。那么快照完毕之后，这部分被复制出来的地址与原数据是怎么处理的？","like_count":0},{"had_liked":false,"id":351430,"user_name":"伯阳","can_delete":false,"product_type":"c1","uid":1596631,"ip_address":"","ucode":"DBDC8735AA54AD","user_header":"https://static001.geekbang.org/account/avatar/00/18/5c/d7/3b92bb0d.jpg","comment_is_top":false,"comment_ctime":1657784366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657784366","product_id":100056701,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":349169,"user_name":"NorthWind","can_delete":false,"product_type":"c1","uid":1037669,"ip_address":"","ucode":"459ADF3B0945E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d5/65/1c9f1530.jpg","comment_is_top":false,"comment_ctime":1655780040,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1655780040","product_id":100056701,"comment_content":"没有清楚主线程具体要负责啥。。。。","like_count":0,"discussions":[{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588621,"discussion_content":"主线程是单线程主要复制从socket里面读取数据解析数据包然后写入内存或者是从内存读出数据到客户端","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663914038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348697,"user_name":"。。","can_delete":false,"product_type":"c1","uid":2853618,"ip_address":"","ucode":"A52A6043D27D87","user_header":"https://static001.geekbang.org/account/avatar/00/2b/8a/f2/6c6f7886.jpg","comment_is_top":false,"comment_ctime":1655305623,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1655305623","product_id":100056701,"comment_content":"对于设置了过期时间的key，假设key已经过期，通过 rdb、aof 会导致key已经过期，但是又恢复过来了的可能吗","like_count":0,"discussions":[{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588622,"discussion_content":"我觉得不会，恢复数据只存在数据库down了然后通过脚本拉起redis才会从备份当中拿出数据同步到数据库里面","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663914129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347644,"user_name":"樱桃汁。","can_delete":false,"product_type":"c1","uid":2907715,"ip_address":"","ucode":"36EE9D8B9C5122","user_header":"https://static001.geekbang.org/account/avatar/00/2c/5e/43/004a52fa.jpg","comment_is_top":false,"comment_ctime":1654246313,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654246313","product_id":100056701,"comment_content":"风险在于内存空间原本就小，频繁修改对原数据的保持耗费大量空间","like_count":0},{"had_liked":false,"id":347505,"user_name":"邱邱邱","can_delete":false,"product_type":"c1","uid":2611827,"ip_address":"","ucode":"828318EB2316EB","user_header":"https://static001.geekbang.org/account/avatar/00/27/da/73/7e7593a7.jpg","comment_is_top":false,"comment_ctime":1654091139,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1654091139","product_id":100056701,"comment_content":"1、仅使用RDB，且大部分请求为修改，两次保存RDB间隙若出现宕机，丢失修改数据会比较多<br>2、redis本身数据已达到50%，同时当前的修改请求需要对原数据创建副本，存在内存溢出的风险<br>","like_count":0},{"had_liked":false,"id":345434,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1651129,"ip_address":"","ucode":"2846E112A81854","user_header":"https://static001.geekbang.org/account/avatar/00/19/31/b9/d5fea48f.jpg","comment_is_top":false,"comment_ctime":1652269196,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652269196","product_id":100056701,"comment_content":"修改的时候会新建一个副本来修改，修改的频率高，值又是大对象的话会产生很多副本，会导致内存占用以较高的速率上升","like_count":0},{"had_liked":false,"id":344814,"user_name":"Mark","can_delete":false,"product_type":"c1","uid":2940659,"ip_address":"","ucode":"28132BA4855996","user_header":"https://static001.geekbang.org/account/avatar/00/2c/de/f3/91dbd7da.jpg","comment_is_top":false,"comment_ctime":1651803928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651803928","product_id":100056701,"comment_content":"老师你好，传统意义上的写时复制，并不会细粒度的控制到每一个元素的复制，而是整块内存复制，然后进行修改，修改完成替换原有内存，这么做的目的是解除锁竞争带来的影响，但是文中rdb快照的写时复制，粒度控制到了每一个键值对，只有需要修改的键值对才复制，请问这种细粒度的控制是如何实现的，我们又是如何知道哪些数据被复制了，以及rdb完成后，如何将这些复制的数据再替换到原有内存中？","like_count":0},{"had_liked":false,"id":343722,"user_name":"Berton 👻","can_delete":false,"product_type":"c1","uid":1956822,"ip_address":"","ucode":"7D6F1F48A173AD","user_header":"https://static001.geekbang.org/account/avatar/00/1d/db/d6/cd266a84.jpg","comment_is_top":false,"comment_ctime":1651023051,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651023051","product_id":100056701,"comment_content":"这节为啥没留言？","like_count":0},{"had_liked":false,"id":341751,"user_name":"苏彧","can_delete":false,"product_type":"c1","uid":1622448,"ip_address":"","ucode":"C016B28DF7449C","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/b0/b52d9ade.jpg","comment_is_top":false,"comment_ctime":1649820516,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649820516","product_id":100056701,"comment_content":"老师，如果快照执行过程中，宕机了怎么办呢","like_count":0},{"had_liked":false,"id":341360,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1649566703,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649566703","product_id":100056701,"comment_content":"频繁的写入操作，使用rdb持久化，数据丢失后的影响范围会比较大","like_count":0},{"had_liked":false,"id":336703,"user_name":"zlyj","can_delete":false,"product_type":"c1","uid":1588637,"ip_address":"","ucode":"5F9F2BD2475E11","user_header":"https://static001.geekbang.org/account/avatar/00/18/3d/9d/877deaff.jpg","comment_is_top":false,"comment_ctime":1646300790,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1646300790","product_id":100056701,"comment_content":"很像是 mysql 的redolog 和 全库备份","like_count":0,"discussions":[{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588623,"discussion_content":"mysql的binlog是service层的redolog和回滚日志是引擎层的，一般用于异常down恢复，对于mysql会在每天晚上0点开始增量备份，一个月进行一次全量备份","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663914278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331578,"user_name":"日月星辰","can_delete":false,"product_type":"c1","uid":1796332,"ip_address":"","ucode":"4E9F48153B2D8B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/68/ec/eb0ebbb6.jpg","comment_is_top":false,"comment_ctime":1642661896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642661896","product_id":100056701,"comment_content":"在快照的过程中如果有写操作就会生成一个副本，副本供新数据写用。那快照生成之后，这个副本所占用的内存是怎么释放的呢？","like_count":0},{"had_liked":false,"id":328689,"user_name":"allen","can_delete":false,"product_type":"c1","uid":1845606,"ip_address":"","ucode":"E57157C526CA1F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/45pRUO8aOjCiayWqC5j5xvyaVicUTGSHBRWhZLKog9AgnLEBSJQbyjPtoQHV66bictJxAkDiao5d441OnhPmibLBialw/132","comment_is_top":false,"comment_ctime":1640843629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640843629","product_id":100056701,"comment_content":"cow技术，修改之后数据，后面再刷入RDB？","like_count":0},{"had_liked":false,"id":325700,"user_name":"CheerJia","can_delete":false,"product_type":"c1","uid":2860954,"ip_address":"","ucode":"5A2E4A956816C8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/wfRD8vz9zQDYgxwSqW6jnpIcQ3guZUE6EQuVXM5Wribtp9wDlJLO8SG76CCPEdmDviaTK99iarvTYLxJw71bKdeXw/132","comment_is_top":false,"comment_ctime":1639101175,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639101175","product_id":100056701,"comment_content":"问个问题，RDB前后两次快照是复用的同一个文件吗？","like_count":0},{"had_liked":false,"id":324823,"user_name":"Aprelude","can_delete":false,"product_type":"c1","uid":1658796,"ip_address":"","ucode":"840D3F7A35AEEF","user_header":"https://static001.geekbang.org/account/avatar/00/19/4f/ac/80439ba7.jpg","comment_is_top":false,"comment_ctime":1638669456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638669456","product_id":100056701,"comment_content":"关于aof和rdb混合使用，能说一下Redis具体怎么配置吗","like_count":0},{"had_liked":false,"id":323833,"user_name":"wessonwang","can_delete":false,"product_type":"c1","uid":1000441,"ip_address":"","ucode":"A9BA5E3A3F278E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/f9/723ee153.jpg","comment_is_top":false,"comment_ctime":1638177223,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638177223","product_id":100056701,"comment_content":"无论是全量快照，还是增量快照，快照过程大量key被修改，这两种快照方案 将导致使用额外空间存储维护这些修改，导致内存占用较高。","like_count":0},{"had_liked":false,"id":323647,"user_name":"Sam Fu","can_delete":false,"product_type":"c1","uid":1112676,"ip_address":"","ucode":"EA285A4943271F","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","comment_is_top":false,"comment_ctime":1638067537,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"1638067537","product_id":100056701,"comment_content":"我感觉redis作为缓存使用的话不一定非要持久化，持久化还是会有性能的损耗。 ","like_count":0,"discussions":[{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588625,"discussion_content":"不弄持久化的话，当redis宕机，重启需要和慢速数据库mysql同步数据，那么会影响前端访问速度，比较用户访问页面的体感是1、5、10s，1s是最优的访问速度，10s都没有打开网站，那么用户体验会特别差","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663914400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320317,"user_name":"李晓磊","can_delete":false,"product_type":"c1","uid":2774465,"ip_address":"","ucode":"227A5EFC29E856","user_header":"https://static001.geekbang.org/account/avatar/00/2a/55/c1/b61dd4dd.jpg","comment_is_top":false,"comment_ctime":1636248717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636248717","product_id":100056701,"comment_content":"上述场景内存小，只有4g，而Redis数据库占了一半，2g。写读比例8：2的情况下使用RDB快照的方式记录某个时刻全量数据在记录数据时父进程会出现大量写时复制，对于空间和时间的开销巨大。时间间隔要求不能太小，并且两个快照间隔直接涉及大量写操作，一旦宕机数据会丢失不少。对于快照的时间间隔要求又不能太大。这种场景下考虑AOF+RDB相结合的方式实现数据持久化更能最优化服务器和系统性能。","like_count":0},{"had_liked":false,"id":318817,"user_name":"受超凡","can_delete":false,"product_type":"c1","uid":2678558,"ip_address":"","ucode":"A2A160D483BBB0","user_header":"","comment_is_top":false,"comment_ctime":1635433911,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1635433911","product_id":100056701,"comment_content":"RDB和AOF混合的方式有个疑问，AOF是在两次RDB之间记录的操作命令，那某一个AOF日志属于哪两个快照之间是怎么确定的呢？还是不需要考虑这种问题呢？","like_count":0,"discussions":[{"author":{"id":2678558,"avatar":"","nickname":"受超凡","note":"","ucode":"A2A160D483BBB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":409596,"discussion_content":"前边记录的aof会被删除。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635471648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318723,"user_name":"zhouyn","can_delete":false,"product_type":"c1","uid":1293445,"ip_address":"","ucode":"0F87F8FB6392EC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJgiaIRyuaugictM4BuzjJ6JykfFayFy3nFyomzyibJ8c282djR6JKenvbGBpaLeGjrvwAjYDXBQKicicw/132","comment_is_top":false,"comment_ctime":1635403315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635403315","product_id":100056701,"comment_content":"老师，请教个问题，文中说“这块数据就会被复制一份，生成该数据的副本（键值对 C’）。然后，主线程在这个数据副本上进行修改。同时，bgsave 子进程可以继续把原来的数据（键值对 C）写入 RDB 文件。”那之后是什么时候把数据副本上的数据更新到从库的呢？","like_count":0},{"had_liked":false,"id":316077,"user_name":"克里斯","can_delete":false,"product_type":"c1","uid":1181844,"ip_address":"","ucode":"00B755C10AC1C3","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/94/2c22bd4e.jpg","comment_is_top":false,"comment_ctime":1634124440,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1634124440","product_id":100056701,"comment_content":"虚拟网卡，虚拟磁盘，虚拟内存，虚拟机，虚拟接口，虚拟硬件，虚拟设备，虚拟ip这些如何实现的","like_count":0},{"had_liked":false,"id":314049,"user_name":"徐大雷","can_delete":false,"product_type":"c1","uid":2548016,"ip_address":"","ucode":"4D6F0D4C58CE93","user_header":"https://static001.geekbang.org/account/avatar/00/26/e1/30/56151c95.jpg","comment_is_top":false,"comment_ctime":1632818323,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1632818323","product_id":100056701,"comment_content":"老师你好，请问redis在不重启的情况下能否恢复数据，感谢","like_count":0},{"had_liked":false,"id":313955,"user_name":"俯瞰风景.","can_delete":false,"product_type":"c1","uid":1044166,"ip_address":"","ucode":"A6DB68B7B84AEE","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/c6/bebcbcf0.jpg","comment_is_top":false,"comment_ctime":1632754793,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632754793","product_id":100056701,"comment_content":"因为AOF在机器宕机后进行数据恢复时，需要执行大量的命令，会造成数据恢复速度非常慢，而通过RDB快照可以进行快速数据恢复。但是生成RDB快照耗时耗力，频繁生成快照会造成写硬盘压力过大，且频繁fork子进程会阻塞主线程。<br><br>结合DRB和AOF：一方面按一定周期生成RDB快照文件，另一方面两次快照之间，写操作通过AOF日志进行记录。这个方案正好可以取两者之长，避两者之短，以较小的性能开销保证数据可靠性和性能。","like_count":0},{"had_liked":false,"id":311039,"user_name":"自由","can_delete":false,"product_type":"c1","uid":2576960,"ip_address":"","ucode":"4E3B53D29D86CA","user_header":"https://static001.geekbang.org/account/avatar/00/27/52/40/db9b0eb2.jpg","comment_is_top":false,"comment_ctime":1631028365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631028365","product_id":100056701,"comment_content":"受益匪浅！！！","like_count":0},{"had_liked":false,"id":310309,"user_name":"Mousse","can_delete":false,"product_type":"c1","uid":2734363,"ip_address":"","ucode":"E604B66327EFF9","user_header":"https://static001.geekbang.org/account/avatar/00/29/b9/1b/19121fbf.jpg","comment_is_top":false,"comment_ctime":1630586666,"is_pvip":false,"discussion_count":3,"race_medal":1,"score":"1630586666","product_id":100056701,"comment_content":"蒋老师你好，我尝试着在我本地开发机器上aof和rdb。我的redis版本是6.2.5，开发系统是macos11.3.1,redis自编译成功后，加载默认的redis.conf后，rdb是默认持久化的选择策略，如果你需要打开aof的话 ，需要appendonly参数改为yes。我如此操作后，我本地redis默认持久化策略就变成了aof，我试着写了一些命令发现这时候redis只保存aof的文件。我的问题是，文中您提到redis4.0支持，rdb+aof的持久化策略，用rdb全量备份，aof增量写数据，这要如何设置，我试着查了一些资料都没提到如何设置aof+rdb","like_count":0,"discussions":[{"author":{"id":3065276,"avatar":"","nickname":"Geek_b3b8da","note":"","ucode":"5461CD95B1D764","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588631,"discussion_content":"AOF and RDB persistence can be enabled at the same time without problems.\nIf the AOF is enabled on startup Redis will load the AOF, that is the file\nwith the better durability guarantees.\n\n翻译\nAOF 和 RDB 持久化可以同时启用，没有问题。\n如果启动时启用了 AOF，Redis 会加载 AOF，也就是文件\n具有更好的耐用性保证\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663916799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048367,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ff/2f/172b942b.jpg","nickname":"扬帆起航","note":"","ucode":"708B686F19B8DE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533181,"discussion_content":"是这个命令开启red+aof   # When rewriting the AOF file, Redis is able to use an RDB preamble in the\n# AOF file for faster rewrites and recoveries. When this option is turned\n# on the rewritten AOF file is composed of two different stanzas:\n#\n#   [RDB file][AOF tail]\n#\n# When loading, Redis recognizes that the AOF file starts with the &#34;REDIS&#34;\n# string and loads the prefixed RDB file, then continues loading the AOF\n# tail.\naof-use-rdb-preamble yes","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637808823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393583,"discussion_content":"混合持久化应该就是指的4.0版本以后的开启rewrite的aof","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631503266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310221,"user_name":"Geek_be4cec","can_delete":false,"product_type":"c1","uid":1581294,"ip_address":"","ucode":"C87642D655EAC3","user_header":"","comment_is_top":false,"comment_ctime":1630552387,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630552387","product_id":100056701,"comment_content":"RDB和AOF同时开启，这个他们各自的时间上的怎么设定呢？","like_count":0},{"had_liked":false,"id":309561,"user_name":"MClink","can_delete":false,"product_type":"c1","uid":1435733,"ip_address":"","ucode":"F479190923355C","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","comment_is_top":false,"comment_ctime":1630231616,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1630231616","product_id":100056701,"comment_content":"这样的画，为了“记住”修改，引入的额外空间开销比较大。这对于内存资源宝贵的 Redis 来说，有些得不偿失。 这里字打错了，是话不是画","like_count":0},{"had_liked":false,"id":308698,"user_name":"shark","can_delete":false,"product_type":"c1","uid":1229873,"ip_address":"","ucode":"485C22926374B6","user_header":"https://static001.geekbang.org/account/avatar/00/12/c4/31/f92091d1.jpg","comment_is_top":false,"comment_ctime":1629762171,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629762171","product_id":100056701,"comment_content":"请问老师，如何实现RDB和AOF混合使用？要是用脚本实现，如何避免在备份的时候数据重复备份？","like_count":0},{"had_liked":false,"id":307442,"user_name":"Del皮耶罗","can_delete":false,"product_type":"c1","uid":1326223,"ip_address":"","ucode":"E90D6311ED875F","user_header":"https://static001.geekbang.org/account/avatar/00/14/3c/8f/be719404.jpg","comment_is_top":false,"comment_ctime":1629104251,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1629104251","product_id":100056701,"comment_content":"想问下一个关于RDB间隔时间配置的问题：里面的比如<br>save 3600 1<br>save 300 100<br>save 60 10000<br>该如何理解？可以同时开启吗？<br>如果同时开启，那是否优先满足第一点，只要有改变key的（肯定是优先满足第一条啊），每秒都会触发RDB呢？<br>","like_count":0,"discussions":[{"author":{"id":2204399,"avatar":"","nickname":"Geek_891ff4","note":"","ucode":"8CAAB68E2434C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588384,"discussion_content":"可以同时开启\n1，如果至少有1个键更改，则在3600秒后做快照\n2，如果至少有100个键更改，则在300秒后做快照\n3，如果至少有10000个键更改，则在60秒后做快照","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663731214,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1326223,"avatar":"https://static001.geekbang.org/account/avatar/00/14/3c/8f/be719404.jpg","nickname":"Del皮耶罗","note":"","ucode":"E90D6311ED875F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389229,"discussion_content":"应该是每次改变都会触发RDB，不是每秒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629185753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306559,"user_name":"冲冲冲","can_delete":false,"product_type":"c1","uid":2676330,"ip_address":"","ucode":"4DA7596B5AFD51","user_header":"https://static001.geekbang.org/account/avatar/00/28/d6/6a/1d844a27.jpg","comment_is_top":false,"comment_ctime":1628607316,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628607316","product_id":100056701,"comment_content":"老师，我有一个疑问，子进程如果记录是父进程原来的数据，那么保存下来数据不就不一致了吗","like_count":0},{"had_liked":false,"id":303815,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1627011197,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627011197","product_id":100056701,"comment_content":"说一个简单的问题,在fork结束之后,因为懒加载,所以只有写的时候才会重新开辟物理内存,而8:2的比例代表着写的几率太大了,所以必然会占用内存空间,很有可能会把物理内存占满","like_count":0},{"had_liked":false,"id":303595,"user_name":"Ddot","can_delete":false,"product_type":"c1","uid":2028097,"ip_address":"","ucode":"2A0011AB1E921E","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/41/e84cd704.jpg","comment_is_top":false,"comment_ctime":1626866613,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1626866613","product_id":100056701,"comment_content":"老师，请教一个问题，在cow的过程中，写操作会在新的内存中进行，在cow结束后，新分配的内存和原来的内存如何合并在一起呢，或者如何保证新的数据覆盖掉原来的数据，或者说是，原来的旧数据会被回收掉吗？","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393585,"discussion_content":"如果cow期间数据没有涉及修改，还是原来的内存，修改后老的会被回收掉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631503515,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302083,"user_name":"Lotus","can_delete":false,"product_type":"c1","uid":1588679,"ip_address":"","ucode":"FDE1A67C0E6636","user_header":"https://static001.geekbang.org/account/avatar/00/18/3d/c7/47f89975.jpg","comment_is_top":false,"comment_ctime":1626073909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626073909","product_id":100056701,"comment_content":"Kaito 大神太厉害了，膜拜","like_count":0},{"had_liked":false,"id":300934,"user_name":"K菌无惨","can_delete":false,"product_type":"c1","uid":2194764,"ip_address":"","ucode":"97A532D588FD49","user_header":"","comment_is_top":false,"comment_ctime":1625455035,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625455035","product_id":100056701,"comment_content":"感觉RDB和AOF日志重写的过程挺类似的","like_count":0},{"had_liked":false,"id":299150,"user_name":"liker","can_delete":false,"product_type":"c1","uid":2656449,"ip_address":"","ucode":"714734A211477F","user_header":"","comment_is_top":false,"comment_ctime":1624493474,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1624493474","product_id":100056701,"comment_content":"为何rdb要使用子进程而不是子线程呢？","like_count":0,"discussions":[{"author":{"id":1067570,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4a/32/23db38ab.jpg","nickname":"Sunny","note":"","ucode":"FE57B69A9CF91D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381471,"discussion_content":"子进程是单独的虚拟内存空间，可以写时复制，快照数据不变， 子线程共享主线程的虚拟内存，快照数据变化了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625068890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296210,"user_name":"Geek2808","can_delete":false,"product_type":"c1","uid":2028948,"ip_address":"","ucode":"835C9691723163","user_header":"","comment_is_top":false,"comment_ctime":1622807528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622807528","product_id":100056701,"comment_content":"如果请求量很高的话，RDB快照只保存了少量不变的数据，AOF文件也会很大。","like_count":0},{"had_liked":false,"id":296209,"user_name":"Geek2808","can_delete":false,"product_type":"c1","uid":2028948,"ip_address":"","ucode":"835C9691723163","user_header":"","comment_is_top":false,"comment_ctime":1622806826,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622806826","product_id":100056701,"comment_content":"老师，【简单来说，bgsave 子进程是由主线程 fork 生成的，可以共享主线程的所有内存数据。】感觉有点乱，到底是进程还是线程？","like_count":0},{"had_liked":false,"id":295927,"user_name":"Geek_72b9a7","can_delete":false,"product_type":"c1","uid":2105175,"ip_address":"","ucode":"4C26B79F9F15A9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/40ab8h1zbSUZmzxARyicDuXECYwtQNDd9jxAbys5LMnVLJMmibTCHd1icrRZMnMSvTJ27UdITA0439hAaVIxcOkGQ/132","comment_is_top":false,"comment_ctime":1622646681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622646681","product_id":100056701,"comment_content":"aofrewrite和bgsave fork子进城所需要复制主线程的东西一样吗","like_count":0},{"had_liked":false,"id":294771,"user_name":"JAVA初级开发工程师","can_delete":false,"product_type":"c1","uid":1876716,"ip_address":"","ucode":"F78E2F30751AC2","user_header":"http://thirdwx.qlogo.cn/mmopen/KFgDEHIEpnTUibfcckj33D1LVj9VapfrK3Yq2Gj00wnLt4nkWS7HvYy5NxvmnQcQpaysuBHVrB9MILWZ9hibUNasicPNtueYoNM/132","comment_is_top":false,"comment_ctime":1622085751,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1622085751","product_id":100056701,"comment_content":"有个问题想请教一下老师，当hash 扩容到一半的时候宕机，这时候hash结构是怎么恢复数据呢","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393586,"discussion_content":"rehash和bgsave操作应该不能并行的，觉得还是用的rehash前的rdb进行回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631503951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293894,"user_name":"I.m 帅帅大王","can_delete":false,"product_type":"c1","uid":1614580,"ip_address":"","ucode":"C8757C0AA4DDD2","user_header":"https://static001.geekbang.org/account/avatar/00/18/a2/f4/76ad0893.jpg","comment_is_top":false,"comment_ctime":1621589610,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621589610","product_id":100056701,"comment_content":"文章中说“这块数据就会被复制一份，生成该数据的副本”，这个操作在实际执行过程中，是子进程复制了主线程的页表，所以通过页表映射，能读到主线程的原始数据，而当有新数据写入或数据修改时，主线程会把新数据或修改后的数据写到一个新的物理内存地址上，并修改主线程自己的页表映射。所以，子进程读到的类似于原始数据的一个副本，而主线程也可以正常进行修改。想问一下主线程修改之后的数据子进程不知道，后续怎么保证数据一致呢？","like_count":0},{"had_liked":false,"id":292444,"user_name":"Geek_9aa39b","can_delete":false,"product_type":"c1","uid":2560905,"ip_address":"","ucode":"58F81542A9528E","user_header":"https://static001.geekbang.org/account/avatar/00/27/13/89/545d9bb1.jpg","comment_is_top":false,"comment_ctime":1620823653,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620823653","product_id":100056701,"comment_content":"提问<br>aof+rdb也会存在宕机丢数据的问题吧？只要aof不是同步写的方式。","like_count":0},{"had_liked":false,"id":291632,"user_name":"it小白","can_delete":false,"product_type":"c1","uid":1969753,"ip_address":"","ucode":"CC183F81A7ADF4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ovFeV17BSAHpzBza8YewjNSyb3vh95PHrVKmkSkGVTlvibDDKqupfu2rryZL5dkXJ3Mic1TYuYC5iaMttqg1Fz9nQ/132","comment_is_top":false,"comment_ctime":1620394756,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1620394756","product_id":100056701,"comment_content":"想问一个问题，如果使用了混合AOF 日志和内存快照的方法来做增量快照，是不是fork出的子进程只去执行AOF中的命令，如果这个时候主进程改动了AOF中存在的key，那这个时候又是怎么做同步的呢","like_count":0,"discussions":[{"author":{"id":1600367,"avatar":"https://static001.geekbang.org/account/avatar/00/18/6b/6f/34ff17fa.jpg","nickname":"丿毒毒毒毒","note":"","ucode":"AC60DC49B75E72","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378634,"discussion_content":"说下我个人的理解：首先会先fork出bgsave子进程做RDB快照，在做RDB快照的过程中如果有更新操作，会做AOF日志，如果多次对同一个key进行更新操作，会把这些操作命令记录到AOF日志中，等到RDB快照执行完毕后，在把AOF日志中的命令更新到内存中去，等到下次再做RDB快照时还是那一刻的最新数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623311816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288430,"user_name":"灵石（请勿乱吃）","can_delete":false,"product_type":"c1","uid":2345422,"ip_address":"","ucode":"81467807211055","user_header":"https://static001.geekbang.org/account/avatar/00/23/c9/ce/6d059da3.jpg","comment_is_top":false,"comment_ctime":1618467075,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1618467075","product_id":100056701,"comment_content":"评论栏的大佬让我恍然大悟、茅厕顿开。","like_count":0},{"had_liked":false,"id":287142,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1617792496,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1617792496","product_id":100056701,"comment_content":"本来想问一个问题，结果写着写着明白了。就当记录一下吧，因为bgsave子进程在做快照时也基于COW机制来做的，那既然是这样的话，在给redis做增量快照时，为啥不直接使用COW创建出来的副本来实现呢。<br>比如，做完一次全量快照，删除已经使用完的副本，主线程上再有修改也同样用副本进行记录修改后值，下一次增量直接用。这样的话会导致副本的含义发生变化。其实思路跟使用AOF是一样的","like_count":0,"discussions":[{"author":{"id":1123146,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/4a/c608bdf6.jpg","nickname":"三石","note":"","ucode":"734DCECABC3BEC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388416,"discussion_content":"副本怎么去辨识删除操作这种带来的增量变化呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628756209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285251,"user_name":"田佳伟","can_delete":false,"product_type":"c1","uid":1034087,"ip_address":"","ucode":"D31C9799F383D2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c7/67/0077314b.jpg","comment_is_top":false,"comment_ctime":1616689425,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616689425","product_id":100056701,"comment_content":"每课一问：如果读写比例是2:8的话，那么在做快照的时候，本来数据量占用内存2G，那么由于cow机制，最坏的情况下，Redis的数据就会占用到3.6G，再加上系统运行和其他基础软件的运行内存，基本上内存就打满了！这种情况下可以选择在低峰期的时候做RDB（如每天一次），然后保留一天的AOF日志，还是RDB+AOF","like_count":0},{"had_liked":false,"id":284874,"user_name":"阿牛","can_delete":false,"product_type":"c1","uid":1073236,"ip_address":"","ucode":"DC8C189FCF3289","user_header":"https://static001.geekbang.org/account/avatar/00/10/60/54/b3eb605b.jpg","comment_is_top":false,"comment_ctime":1616505470,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1616505470","product_id":100056701,"comment_content":"【学习打卡】今天主要讲的是Redis持久化RDB机制，RDB是将某一时间点的所有内存数据写入磁盘。<br>1、Redis如何防止阻塞主线程：<br>• save：在主线程中执行，会导致阻塞；<br>• bgsave：创建一个子进程，专门用于写入 RDB 文件，避免了主线程的阻塞，这也是 Redis RDB 文件生成的默认配置。<br>2、fork的子进程和主进程通过写时复制(Copy On Write)实现内存区域的共享，子进程会拷贝主进程的数据结构，当主进程想要去写内存区域的数据时会发信号量，主进程就会在物理内存中创建这个页面的一个新副本，更新页表条目指向这个新的副本。bgsave子进程读取对应的内存数据写入RDB文件。<br>3、Redis4.0以后出的aof和rdb混合数据持久化机制：RDB实现非高频数据快照，避免频繁fork对主进程的影响。AOF记录两次RDB之间的Redis操作日志，不做重写操作，第二次RDB镜像成功过后，AOF记录删除。","like_count":0},{"had_liked":false,"id":284018,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1616038079,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1616038079","product_id":100056701,"comment_content":"虽然通常说 Redis 是单线程的，但是学习到这里就已经发现，Redis 在缓存读写之外，其实也用到了很多子线程，比如之前的 bgrewriteaof 和这里的 bgsave。<br><br>在处理 RDB 快照时候采用 COW, Copy-On-Write 写时复制 的技术，感觉思路和在前面处理 AOF 的时候有些类似。<br><br>内存快照和 AOF 混用这个想法实在是太好了，取了两种方法的优点，又在一定程度上避免了缺点。<br><br>对我来说，目前的工作中并没有使用 Redis，但是 Redis 的这些设计思路，算得上是“他山之石”。<br><br>对于课后题，试着分析一下<br><br>因为 4GB 内存，而 Redis 的数据量大约 2GB，那么我估计几乎所有的数据都会放在内存中，修改请求占 80% 的情况下，用 RDB 做持久化，即使是增量模式，那么每次的 RDB 估计也会比较大，500GB 磁盘大概能写 200 个 RDB，一方面有存储压力，另一方面快照的时候对于 Redis 应该也会有阻塞（不知道 2 核 在这里是否用的上）。<br><br>如果采用 AOF 和 RDB 混合模式，应该是比较好的选择；或者干脆就只用 AOF 的 everysec  模式，取一个平衡。<br><br>再次膜拜 @kaito 大神","like_count":0},{"had_liked":false,"id":283886,"user_name":"守望者","can_delete":false,"product_type":"c1","uid":1623487,"ip_address":"","ucode":"DEE375A5F2D57A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/sPORo6cN3GSVxjHj9nqSAPn7KG4wtSTqNUommjNndpf8qd7bHKHquuldXZfxD5nF1ldy4LeoAQNwSsOgcmWG9w/132","comment_is_top":false,"comment_ctime":1615972593,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615972593","product_id":100056701,"comment_content":"这节课和上一节课的主要都是关于redis持久化的，主要作用是解决服务挂了之后造成数据丢失的问题。而且redis挂了的话，监控系统会重启redis，以尽快恢复服务。重启之后检查数据是否丢失应该是必要的。那么，请问老师：redis服务重启之后怎么通过程序自动判断是否有数据丢失呢？之所以强调自动判断，是为了区别人工检查。","like_count":0},{"had_liked":false,"id":282511,"user_name":"c梦","can_delete":false,"product_type":"c1","uid":1616385,"ip_address":"","ucode":"E860801B197DBA","user_header":"https://static001.geekbang.org/account/avatar/00/18/aa/01/641f3c3a.jpg","comment_is_top":false,"comment_ctime":1615285490,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1615285490","product_id":100056701,"comment_content":"bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据。<br><br>对这句话有点疑惑，麻烦老师解答，疑惑的是bgsave会将副本数据写入rdb? <br><br>假设 t 时刻触发写 rdb，写完一共花了 t0 秒，那 t + n（n &lt; t0）时刻的写操作也会同步到 t 时刻的内存快照，那此时的 rdb 记录的是 t + t0 时刻的快照吗？","like_count":0,"discussions":[{"author":{"id":1073236,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/54/b3eb605b.jpg","nickname":"阿牛","note":"","ucode":"DC8C189FCF3289","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360618,"discussion_content":"我认为t+t0生成的RDB快照是t时刻的数据，t+n时刻的写数据没有同步到快照中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616490552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275879,"user_name":"Sic Pavis","can_delete":false,"product_type":"c1","uid":1106088,"ip_address":"","ucode":"48B5F0118347C8","user_header":"https://static001.geekbang.org/account/avatar/00/10/e0/a8/4e739cf6.jpg","comment_is_top":false,"comment_ctime":1611711332,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1611711332","product_id":100056701,"comment_content":"有个疑问，aof全量重写和rdb的快照记录有何区别？都是全量重写数据记录，他们的逻辑一样吗，如果不一样，其不一样的原因又是基于什么考虑呢","like_count":0,"discussions":[{"author":{"id":1073236,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/54/b3eb605b.jpg","nickname":"阿牛","note":"","ucode":"DC8C189FCF3289","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360621,"discussion_content":"目的是一样的，但是实现方式不同。AOF实现基于redis命令日志实现恢复，是指令；RDB是二进制文件，是镜像redis快照记录，回复的时候是直接全量回复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616490956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2087032,"avatar":"","nickname":"InfoQ_b6953d6a47e5","note":"","ucode":"50D9447FAFAB65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352105,"discussion_content":"aof写入的是redis的命令，而rdb快照是写入的数据","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614602612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272517,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1610108060,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1610108060","product_id":100056701,"comment_content":"原文：<br>但是，如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据。<br><br>1.主线程 copy 一份副本，副本是新的内存地址，修改前，要修改的内容还是原来的内存地址。<br>2.子进程读的是新内存地址的副本。主线程修改的是原数据。<br><br>请问老师，上面的理解对么？谢谢！<br>对于第2点，子进程是如何感知副本的新内存地址的？因为这份数据并不是t 时刻的状态。谢谢","like_count":0,"discussions":[{"author":{"id":1741677,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/93/6d/d433e70a.jpg","nickname":"春江水暖","note":"","ucode":"7D8FBE67FB6F74","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340951,"discussion_content":"个人认为，作者这里对写时复制的过程描述不是很正确。影响了大家的理解。按照文章中描述的意思，就是主线程fork出子线程后，主子线程共享一个物理内存副本。当主线程去修改这份副本的pageA时，会为子线程先拷贝这一pageA，拷贝出来的这一页（我们暂定为pageB），然后子线程的页表中原来存放pageA的地址改为pageB的地址，然后主线程就可以修改原来的pageA了。\n\n但是实际不是这样的。按照《深入理解计算机系统 第三版》P584 中的描述：主子线程共享的这块内存区域会被标记私有的写时复制，一旦主子线程中有一个线程去视图去写这块内存区域中的某个页面，那么这个写操作就会触发一个保护故障。“当故障处理程序注意到保护异常是由于进程试图写私有的写时复制区域中的一个页面而引起的，它就会在物理内存中创建这个页面的一个新副本，更新页表条目指向这个新的副本，然后恢复这个页面的可写权限，当故障处理程序返回时，CPU重新执行这个写操作，在新创建的页面上这个写操作就可以正常执行了。“\n\n所以，按作者描述，在复制一份新副本给子线程后，主线程可以对”私有的写时复制“区域直接进行写操作，是不对的。\n\n所以，个人认为，写时复制下，哪个线程需要进行写操作，故障处理程序就为哪个线程拷贝出独立的副本，去做修改，并更新该线程的页表，没做写操作的线程还是映射的原来的地址空间。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1610216910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073236,"avatar":"https://static001.geekbang.org/account/avatar/00/10/60/54/b3eb605b.jpg","nickname":"阿牛","note":"","ucode":"DC8C189FCF3289","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":360651,"discussion_content":"正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616498885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":270268,"user_name":"市集养猫者","can_delete":false,"product_type":"c1","uid":1240629,"ip_address":"","ucode":"D44FF82C51C617","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/35/5647c7e5.jpg","comment_is_top":false,"comment_ctime":1609041749,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1609041749","product_id":100056701,"comment_content":"有个问题，用AOF与RDB混合保存的情况下，当执行一条写命令，数据被修改了，而在保存命令到AOF文件前发生异常，那么数据是不是也会丢失","like_count":0,"discussions":[{"author":{"id":1066508,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","nickname":"下个目标45k","note":"","ucode":"193BA8C3AA9A61","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338275,"discussion_content":"没有刷盘到日志文件就会丢失","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609229719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266405,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1607326954,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1607326954","product_id":100056701,"comment_content":"老师好，请问下，写时复制那里，既然 bgsave 子进程读取到的是修改前的数据，那么本次生成的全量快照就包含了一部分脏数据是吧(不考虑开启 AOF 混合持久化的情况)？最新的修改需要下一次全量快照才会同步？","like_count":0},{"had_liked":false,"id":261677,"user_name":"fcb的鱼","can_delete":false,"product_type":"c1","uid":1243901,"ip_address":"","ucode":"88667EBF09CEC0","user_header":"https://static001.geekbang.org/account/avatar/00/12/fa/fd/ec24cba7.jpg","comment_is_top":false,"comment_ctime":1605488470,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605488470","product_id":100056701,"comment_content":"关于rdb备份问个问题，比如当前备份花20秒，如果比如我已经把键值A备份到了磁盘，但是后边又对A有修改，那么A的副本也会被备份，那恢复数据的时候怎么区别这两个备份值，以哪个为准？","like_count":0},{"had_liked":false,"id":258767,"user_name":"明月几时","can_delete":false,"product_type":"c1","uid":1675716,"ip_address":"","ucode":"E46C844EAB2CD0","user_header":"https://static001.geekbang.org/account/avatar/00/19/91/c4/bcdcda65.jpg","comment_is_top":false,"comment_ctime":1604551763,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1604551763","product_id":100056701,"comment_content":"学到了三点建议：<br>1.数据不能丢失时，内存快照和 AOF 的混合使用是一个很好的选择；<br>2.如果允许分钟级别的数据丢失，可以只使用 RDB；<br>3.如果只用 AOF，优先使用 everysec 的配置选项，因为它在可靠性和性能之间取了一个平衡。","like_count":0},{"had_liked":false,"id":253617,"user_name":"Always","can_delete":false,"product_type":"c1","uid":1445428,"ip_address":"","ucode":"3372A81DE9E8D3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/hzGxFXIL1UWlCzmyfIiaTvQyDavbYz0vZrRusOtU3fTasL5dJ38neRKQHIzlH4uEL8jmOEt0ztGQ4AXYpNMy2ibA/132","comment_is_top":false,"comment_ctime":1602813072,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1602813072","product_id":100056701,"comment_content":"老师，不好意思，我有几个基础的问题，还望老师不吝赐教<br>1、BGSAVE包括BGREWRITEAOF，是使用写时复制，那么复制的应该是修改之后的值吧？<br>2、BGSAVE应该也是一个持续的过程，假如在这个过程中某个key被修改了一次，这个时候会写入rdb文件，那么如果紧接着又修改了一次，还会再次写入rdb文件么？还是说要等到下次BGSAVE再写入？<br>3、对于那些一直没有写入操作的数据，什么时候会写入rdb文件呢？（redis的大部分使用场景应该还是读取比写入多，那么那些数据什时候会写入rdb呢？）<br>4、即使rdb和aof混用的方法，也不能保证没有数据丢失吧","like_count":0,"discussions":[{"author":{"id":2354474,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/UNC7eWZWvRyAPWUpIJicgZBWLNpkljMbgeaFVWU3QNmWgaibchc8aGFfAG7gWh7eghHSrtSuSqMDp2ibVnvE2eLJg/132","nickname":"Geek_a88948","note":"","ucode":"C7FF3099A180D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350846,"discussion_content":"1、bgsave包含bgrewriteaof，出处在哪里呢\n2、bgsave是持续的，如果快照过程中，有个key被修改了，是不会写入到rdb文件的。原因是fork时，子进程的页表映射的是备份时间点时刻的，之后的修改，对于子进程是未知的\n3、rdb文件记录的是某一时刻redis中的全部数据。aof记录的操作\n4、aof和rdb混用，丢失风险在于aof的写回策略，最优情况下everysec按秒写回，有可能丢失前一秒的操作","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1614050848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":253407,"user_name":"油纸伞","can_delete":false,"product_type":"c1","uid":2212143,"ip_address":"","ucode":"C2655B9F8874E2","user_header":"https://static001.geekbang.org/account/avatar/00/21/c1/2f/5c8167aa.jpg","comment_is_top":false,"comment_ctime":1602729804,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1602729804","product_id":100056701,"comment_content":"请问下使用rdb和aof 混合使用在配置文件中如何配置呢？","like_count":0,"discussions":[{"author":{"id":1113818,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/da/01cfbdc6.jpg","nickname":"念","note":"","ucode":"866A800D49C498","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351148,"discussion_content":"还需要配置其他的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614166568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2354474,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/UNC7eWZWvRyAPWUpIJicgZBWLNpkljMbgeaFVWU3QNmWgaibchc8aGFfAG7gWh7eghHSrtSuSqMDp2ibVnvE2eLJg/132","nickname":"Geek_a88948","note":"","ucode":"C7FF3099A180D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350844,"discussion_content":"aof-use-rdb-preamble yes，redis5.0默认是开启的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614050414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252774,"user_name":"珅珅君","can_delete":false,"product_type":"c1","uid":1069646,"ip_address":"","ucode":"3700048634C565","user_header":"https://static001.geekbang.org/account/avatar/00/10/52/4e/5150a2ee.jpg","comment_is_top":false,"comment_ctime":1602484141,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1602484141","product_id":100056701,"comment_content":"你好，有个问题，当rdb间隔时间设置过短，是会fork多个子进程吗，如果是多个子进程是否又会创建多个rdb文件？如果是多个快照，这会不会因竞争导致数据混乱","like_count":0,"discussions":[{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":373459,"discussion_content":"太频繁会不会导致前一个rdb还没完成，第二个rdb又要开始了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620735176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":250987,"user_name":"wyf2317","can_delete":false,"product_type":"c1","uid":1236837,"ip_address":"","ucode":"7F3E61A6188B39","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ub4icibeRLzff8Nf6ORsolib9KHtmeu3d4cCCAFd3Xgah3v78WfDYQB7WKq9iaIPXPwHBxw7mkBP9wYxDGMT9m1Rbw/132","comment_is_top":false,"comment_ctime":1601299305,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1601299305","product_id":100056701,"comment_content":"1. 内存会不够，有oom的风险<br>2. RDB会开一个进程，对CPU资源占用较多并且io高了负载也会上去<br>整体响应会变慢","like_count":0},{"had_liked":false,"id":249645,"user_name":"萧","can_delete":false,"product_type":"c1","uid":1229143,"ip_address":"","ucode":"0C2239867AFF5F","user_header":"https://static001.geekbang.org/account/avatar/00/12/c1/57/27de274f.jpg","comment_is_top":false,"comment_ctime":1600739651,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1600739651","product_id":100056701,"comment_content":"### Redis持久化之内存快照<br>内存快照存储的是某一个时刻的数据状态<br>两种存储法：save，bgseve，一般使用bgsave，避免阻塞<br><br>bgsave应对快照时数据修改，使用写时复制技术，复制一份数据副本<br>### Redis持久化之混合AOF和内存快照<br>Redis4.0：内存快照一定频率进行执行，两次快照之间，使用AOF日志记录这期间的所有操作命令<br>在第二次做全量快照的时候，可以情况AOF日志，经修改的记录放到快照中<br><br>有个疑问：这里的AOF快照时整个系统的日志还是专门针对内存快照的日志？","like_count":0},{"had_liked":false,"id":249522,"user_name":"学个球","can_delete":false,"product_type":"c1","uid":1019725,"ip_address":"","ucode":"7343F3C0CA981D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8f/4d/65fb45e6.jpg","comment_is_top":false,"comment_ctime":1600682076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600682076","product_id":100056701,"comment_content":"今天重新读了一下文章，才发现自己一个理解有误的地方。<br><br>对于写时复制技术中，在生成快照期间，如果某个键有修改，会生成一个数据副本，子进程读取，保证在时刻 t 的 RDB 和数据的一致性。<br><br>对于“生成的副本”之前一直理解成是修改后的数据，所以就和时刻 t 的一致性产生了矛盾。<br>那时自己理解为在 RDB 写成功后的那个时刻 t，RDB 和 数据库一致（这个理解是错误的）。","like_count":0},{"had_liked":false,"id":249414,"user_name":"pippin","can_delete":false,"product_type":"c1","uid":1784022,"ip_address":"","ucode":"F7619FCE24D481","user_header":"","comment_is_top":false,"comment_ctime":1600652199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600652199","product_id":100056701,"comment_content":"在主线程要修改一块数据，是主线程去指向新生成的数据页吗，那bgsave子进程写入rdb中的数据是修改前的数值吗。所以rdb保存的数据只是在bgsave子进程fork出来时的数据页，对于fork中，主进程再有需要的数据，是不在这次的rdb文件中的。不知道我这样说的对不对","like_count":0},{"had_liked":false,"id":247961,"user_name":"深蓝","can_delete":false,"product_type":"c1","uid":1035807,"ip_address":"","ucode":"85C7094E3A5289","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/1f/220c6d83.jpg","comment_is_top":false,"comment_ctime":1599957099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599957099","product_id":100056701,"comment_content":"风险是执行快照的时间间隔问题","like_count":0},{"had_liked":false,"id":246763,"user_name":"Admin","can_delete":false,"product_type":"c1","uid":1186053,"ip_address":"","ucode":"01AE6AA0505F39","user_header":"https://static001.geekbang.org/account/avatar/00/12/19/05/f26e718e.jpg","comment_is_top":false,"comment_ctime":1599471694,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599471694","product_id":100056701,"comment_content":"AOF 是先执行，再写入文件，那么是不是不能100%保证Redis数据不丢啊","like_count":0},{"had_liked":false,"id":246193,"user_name":"夏虫井蛙","can_delete":false,"product_type":"c1","uid":1370226,"ip_address":"","ucode":"66609D88E395A0","user_header":"https://static001.geekbang.org/account/avatar/00/14/e8/72/e44c69ef.jpg","comment_is_top":false,"comment_ctime":1599203973,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599203973","product_id":100056701,"comment_content":"关于写时复制机制那张图有个问题，考虑这样一种情况：键值对A做了修改，bgsave子进程读取了，随后键值对A再次做了修改，这时候bgsave子进程已经读取到键值对C的副本了，那么键值对A的副本是否再次被读取？<br>如果再次读取，bgsave子进程生成快照的起止时间怎么决定？如果键值对A一直在修改呢？是否就无法打快照了？<br>如果不再次读取，那么4.0之后的混用RDB和AOF方案，清空AOF日志的时候，因为第二次修改的时间也在生成RDB快照的时间内，所以键值对A的第二次修改日志也被清空了，这样就造成了数据丢失，怎么保证数据的可靠性呢？","like_count":0},{"had_liked":false,"id":245390,"user_name":"Y、先生","can_delete":false,"product_type":"c1","uid":1604447,"ip_address":"","ucode":"9D3BC6AF916BCA","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/5f/3400d01b.jpg","comment_is_top":false,"comment_ctime":1598930217,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1598930217","product_id":100056701,"comment_content":"redis使用rdb持久化，主进程是使用的save还是bgsave？","like_count":0,"discussions":[{"author":{"id":1252567,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1c/d7/c176ad9f.jpg","nickname":"绝尘而去","note":"","ucode":"690E4E6B3E39DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308744,"discussion_content":"这个结果不唯一，如果你是主动持久化，那你既可以执行save，也可以执行bgsave；如果走的是配置文件的被动持久化，那么走的就是bgsave","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601049126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1452799,"avatar":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","nickname":"BertGeek","note":"","ucode":"8E1D72C9F9778C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328918,"discussion_content":"fork子进程，负责bgsave","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606273159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1604447,"avatar":"https://static001.geekbang.org/account/avatar/00/18/7b/5f/3400d01b.jpg","nickname":"Y、先生","note":"","ucode":"9D3BC6AF916BCA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303734,"discussion_content":"咋没人确认回答下啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599364552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245209,"user_name":"起个啥名字比较好","can_delete":false,"product_type":"c1","uid":1170139,"ip_address":"","ucode":"1975CDABB01620","user_header":"https://static001.geekbang.org/account/avatar/00/11/da/db/1a51fe24.jpg","comment_is_top":false,"comment_ctime":1598864285,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1598864285","product_id":100056701,"comment_content":"那就是说，快照的时候，如果数据A被修改了，那主线程重新开辟一块内存空间，存放最新的数据A‘，快照里面放着的还是数据A，然后A‘就成为新的内存数据，将来快照拍完了，原来的A数据内存，就被释放掉吗？不知道我的理解对不对","like_count":0,"discussions":[{"author":{"id":1252567,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1c/d7/c176ad9f.jpg","nickname":"绝尘而去","note":"","ucode":"690E4E6B3E39DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308745,"discussion_content":"是这样的，子进程执行完会把没有用的内存回收。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601049255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244941,"user_name":"松果","can_delete":false,"product_type":"c1","uid":1274379,"ip_address":"","ucode":"22D872F0532BE6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erCXMLHlLs8TTRvw6BL13Zd0IGFeVZdicCsHnjJmM1FUC43sibcHIK0ViaIaOvOb5BVTlr3OTJNwaKzA/132","comment_is_top":false,"comment_ctime":1598758860,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598758860","product_id":100056701,"comment_content":"copy on write, 在主线程写时，只为子线程复制内存页吗，共享内存标记为 readolny模式，那么主线程是直接修改的原始内存还是同样复制一份内存页进行修改？","like_count":0},{"had_liked":false,"id":244824,"user_name":"妥协","can_delete":false,"product_type":"c1","uid":1249656,"ip_address":"","ucode":"7201DFE9C12669","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/78/4f0cd172.jpg","comment_is_top":false,"comment_ctime":1598691981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598691981","product_id":100056701,"comment_content":"做rdb快照时，redis会同时自动清空之前的aof日志吗？这里因为涉及一个问题，就是aof中的日志会不会已经在rdb中生效了。恢复数据时，如果采用rdb加aof的方式，重放aof时，需要不需要指定具体某个时间点的，以避免aof少放或者多放日志?也就是aof重放日志是幂等的吗？","like_count":0},{"had_liked":false,"id":244529,"user_name":"莫名","can_delete":false,"product_type":"c1","uid":1007254,"ip_address":"","ucode":"E28F2602BA25DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/96/a03175bc.jpg","comment_is_top":false,"comment_ctime":1598573133,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1598573133","product_id":100056701,"comment_content":"有关 COW 的介绍有点小问题，bgsave 读取的是修改前的 C，可以理解为只读，COW 只发生在 Redis 主进程。","like_count":0,"discussions":[{"author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346395,"discussion_content":"应该是发生在主进程中，谁写谁复制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611933523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043499,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/2b/1e059a0f.jpg","nickname":"nul","note":"","ucode":"2DBF03B2193B76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340916,"discussion_content":"我也觉得是这样，但是老师图上画的怎么是bgsave子线程使用新的内存地址。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610201049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244493,"user_name":"慎独明强","can_delete":false,"product_type":"c1","uid":1965699,"ip_address":"","ucode":"DC2F7F2C0C8F60","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fe/83/df562574.jpg","comment_is_top":false,"comment_ctime":1598536788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598536788","product_id":100056701,"comment_content":"主要从内存和cpu来考虑，2核cpu，则会出现cpu的竞争问题，线程的时间片切换的开销；内存由于在生成rdb文件，80%写数据，会重新生成一个副本大约1.6g数据，总共4g，扣除操作系统一些内存，原有内存2g，如果由大量的key在写入时，会由内存溢出的风险。看到留言区，还谈到内存交换，交换到磁盘，那么会影响到读取的性能；","like_count":0},{"had_liked":false,"id":243441,"user_name":"Lemon","can_delete":false,"product_type":"c1","uid":2136414,"ip_address":"","ucode":"E52BB361B69825","user_header":"https://static001.geekbang.org/account/avatar/00/20/99/5e/33481a74.jpg","comment_is_top":false,"comment_ctime":1598108529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598108529","product_id":100056701,"comment_content":"老师您好，有个细节像请教一下：bgsave 子进程会把这个修改过后的副本数据写入 RDB 文件。<br><br>假设有A,B,C三个数据，bgsave 子进程已经读到 B 数据了，此时主线程要修改 A 的数据，这个时候生成的副本 bgsave 会去读取再重新写入 RDB 吗？还是要像文中的图上所示，只有 bgsave 未读到的数据才会生成副本被记录呢？","like_count":0},{"had_liked":false,"id":242899,"user_name":"美美","can_delete":false,"product_type":"c1","uid":1148422,"ip_address":"","ucode":"44CC95C45AF345","user_header":"https://static001.geekbang.org/account/avatar/00/11/86/06/72b01bb7.jpg","comment_is_top":false,"comment_ctime":1597887530,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597887530","product_id":100056701,"comment_content":"写操作频繁，使用RDB作为持久化，会因为写时复制机智对主线程频繁造成阻塞，拉低吞吐量。<br><br>有一个不清晰的点还请老师解答。如果采用RDB+AOF，当RDB完成后清空AOF文件，那写盘的这一段时间内的变更岂不是会丢失？还是说在fork子进程后会写新的AOF文件，备份完成后删除旧AOF文件。","like_count":0},{"had_liked":false,"id":242431,"user_name":"不负青春不负己🤘","can_delete":false,"product_type":"c1","uid":1363671,"ip_address":"","ucode":"A6DD8E8B20EA6E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","comment_is_top":false,"comment_ctime":1597721206,"is_pvip":true,"replies":[{"id":"89595","content":"赞！","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597939146,"ip_address":"","comment_id":242431,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597721206","product_id":100056701,"comment_content":"打卡 第二遍 ","like_count":0,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504010,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597939146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242302,"user_name":"akka","can_delete":false,"product_type":"c1","uid":1671917,"ip_address":"","ucode":"FCD0964E761172","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqvfH3iatrDMG3YaW1LlCtibKbPe4lSib8CvWTK78emvAu0dNCQY7OOZPZfQicdCUKUyFpTcia5exNibvIQ/132","comment_is_top":false,"comment_ctime":1597665561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597665561","product_id":100056701,"comment_content":"老师，文章最后你说的方案“Redis 4.0 中提出了一个混合使用 AOF 日志和内存快照的方法”，<br>就是redis 4.0 的AOF重写？<br>但是从描述上来看，各个操作的顺序和AOF重写又有点不像","like_count":0},{"had_liked":false,"id":242239,"user_name":"riryoutexi","can_delete":false,"product_type":"c1","uid":2112144,"ip_address":"","ucode":"2A3C7060F4D677","user_header":"https://static001.geekbang.org/account/avatar/00/20/3a/90/2ab62cd9.jpg","comment_is_top":false,"comment_ctime":1597645121,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597645121","product_id":100056701,"comment_content":"请问蒋老师，线上一般通过什么策略或依据去配置备份方式。比如 数据不能丢失时，多久RDB 一次？","like_count":0},{"had_liked":false,"id":241945,"user_name":"u","can_delete":false,"product_type":"c1","uid":1140276,"ip_address":"","ucode":"88FA7BA089807C","user_header":"https://static001.geekbang.org/account/avatar/00/11/66/34/0508d9e4.jpg","comment_is_top":false,"comment_ctime":1597511979,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597511979","product_id":100056701,"comment_content":"写时复制？那20%读操作相关的数据不就没法RDB了么？","like_count":0},{"had_liked":false,"id":241938,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1597507633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597507633","product_id":100056701,"comment_content":"评论中有大神，看完文章再看评论收获更多","like_count":0},{"had_liked":false,"id":241858,"user_name":"yyl","can_delete":false,"product_type":"c1","uid":1170843,"ip_address":"","ucode":"1741DACDFCA9AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","comment_is_top":false,"comment_ctime":1597470853,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597470853","product_id":100056701,"comment_content":"提问：<br>1. RDB文件损坏的话，是否影响Redis数据恢复？是否有人工干预方法？<br>2. fork进程，父子进程遵循写时复制，为什么父进程内存越大，阻塞时间越长呢？","like_count":0},{"had_liked":false,"id":241816,"user_name":"第四范式","can_delete":false,"product_type":"c1","uid":1663762,"ip_address":"","ucode":"61ECDC7C834CAF","user_header":"https://static001.geekbang.org/account/avatar/00/19/63/12/5a22fcc7.jpg","comment_is_top":false,"comment_ctime":1597456511,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597456511","product_id":100056701,"comment_content":"临时表内容太多。会浪费内存资源。这个问题。怎么解呢？老师也没说解决方案","like_count":0},{"had_liked":false,"id":241755,"user_name":"游弋云端","can_delete":false,"product_type":"c1","uid":1208637,"ip_address":"","ucode":"A960E8F5AA25B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/71/3d/da8dc880.jpg","comment_is_top":false,"comment_ctime":1597412298,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597412298","product_id":100056701,"comment_content":"本质上与ZooKeeper的数据全内存、全量内存快照dump以及日志恢复机制非常相似，理论上殊途同归。","like_count":0},{"had_liked":false,"id":241670,"user_name":"Geek_cc6b96","can_delete":false,"product_type":"c1","uid":1743219,"ip_address":"","ucode":"20D23076E128CD","user_header":"https://static001.geekbang.org/account/avatar/00/1a/99/73/41a354c7.jpg","comment_is_top":false,"comment_ctime":1597387423,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597387423","product_id":100056701,"comment_content":"RDB和AOF 不就是流媒体编码中的 I帧、P帧 概念嘛","like_count":0},{"had_liked":false,"id":241619,"user_name":"等风来🎧","can_delete":false,"product_type":"c1","uid":1804087,"ip_address":"","ucode":"B6BB8714A0B019","user_header":"https://static001.geekbang.org/account/avatar/00/1b/87/37/b071398c.jpg","comment_is_top":false,"comment_ctime":1597372686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597372686","product_id":100056701,"comment_content":"老师有个疑问希望您能解答一下。<br>”如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据”<br>这里键值对C被复制，是主线程来做吗？<br>如果是主线程来做，它是怎么感知到键值对C什么时候需要复制的？redis源码层面做了判断吗？有子进程的时候，如果是写操作就复制<br>子进程又是怎么知道从哪里知道键值对C的副本的地址的","like_count":0},{"had_liked":false,"id":241604,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1597368860,"is_pvip":false,"discussion_count":1,"race_medal":1,"score":"1597368860","product_id":100056701,"comment_content":"请问老师，在混合使用aof和内存快照的方法时候、提到在做全量快照的时候，清空AOF日志。是在全量快照前清空AOF日志还是全量快照后清空AOF日志呢？<br>粗略的想，在做全量快照时候产生新的AOF日志，如果清空AOF日志的话，会把新的日志清掉....","like_count":0,"discussions":[{"author":{"id":1671917,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqvfH3iatrDMG3YaW1LlCtibKbPe4lSib8CvWTK78emvAu0dNCQY7OOZPZfQicdCUKUyFpTcia5exNibvIQ/132","nickname":"akka","note":"","ucode":"FCD0964E761172","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299362,"discussion_content":"老师说这种混合使用模式，我猜指的就是redis 4.0的AOF重写吧！如果不是指AOF重写的话，在conf配置文件中，我真的没找到相应的配置项，来开启老师说的这种方案。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597666751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241601,"user_name":"脱缰的野马__","can_delete":false,"product_type":"c1","uid":1447569,"ip_address":"","ucode":"D5F993E7232C61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/WtHCCMoLJ2DvzqQwPYZyj2RlN7eibTLMHDMTSO4xIKjfKR1Eh9L98AMkkZY7FmegWyGLahRQJ5ibPzeeFtfpeSow/132","comment_is_top":false,"comment_ctime":1597367856,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1597367856","product_id":100056701,"comment_content":"老师，你说的主线程fork子线程也会阻塞，而且主线程内存越大阻塞越久。老师可以再深入讲解一下fork子线程的过程嘛？","like_count":0,"discussions":[{"author":{"id":1170843,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/9b/0bc44a78.jpg","nickname":"yyl","note":"","ucode":"1741DACDFCA9AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298787,"discussion_content":"可以去网上看看相关的帖子，或者自己这个demo验证下即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597399721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2105421,"avatar":"","nickname":"Geek_2423e0","note":"","ucode":"B7D454A3DE67AD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298672,"discussion_content":"看下Kaito在第四讲的答复：\n\nfork子进程，fork这个瞬间一定是会阻塞主线程的（注意，fork时并不会一次性拷贝所有内存数据给子进程，老师文章写的是拷贝所有内存数据给子进程，我个人认为是有歧义的），fork采用操作系统提供的写实复制(Copy On Write)机制，就是为了避免一次性拷贝大量内存数据给子进程造成的长时间阻塞问题，但fork子进程需要拷贝进程必要的数据结构，其中有一项就是拷贝内存页表（虚拟内存和物理内存的映射索引表），这个拷贝过程会消耗大量CPU资源，拷贝完成之前整个进程是会阻塞的，阻塞时间取决于整个实例的内存大小，实例越大，内存页表越大，fork阻塞时间越久。拷贝内存页表完成后，子进程与父进程指向相同的内存地址空间，也就是说此时虽然产生了子进程，但是并没有申请与父进程相同的内存大小。那什么时候父子进程才会真正内存分离呢？“写实复制”顾名思义，就是在写发生时，才真正拷贝内存真正的数据，这个过程中，父进程也可能会产生阻塞的风险，就是下面介绍的场景。\n\nb、fork出的子进程指向与父进程相同的内存地址空间，此时子进程就可以执行AOF重写，把内存中的所有数据写入到AOF文件中。但是此时父进程依旧是会有流量写入的，如果父进程操作的是一个已经存在的key，那么这个时候父进程就会真正拷贝这个key对应的内存数据，申请新的内存空间，这样逐渐地，父子进程内存数据开始分离，父子进程逐渐拥有各自独立的内存空间。因为内存分配是以页为单位进行分配的，默认4k，如果父进程此时操作的是一个bigkey，重新申请大块内存耗时会变长，可能会产阻塞风险。另外，如果操作系统开启了内存大页机制(Huge Page，页面大小2M)，那么父进程申请内存时阻塞的概率将会大大提高，所以在Redis机器上需要关闭Huge Page机制。Redis每次fork生成RDB或AOF重写完成后，都可以在Redis log中看到父进程重新申请了多大的内存空间。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597375096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241588,"user_name":"秋梵","can_delete":false,"product_type":"c1","uid":1464835,"ip_address":"","ucode":"129DA4E9886D2E","user_header":"https://static001.geekbang.org/account/avatar/00/16/5a/03/b27f72b6.jpg","comment_is_top":false,"comment_ctime":1597366228,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"1597366228","product_id":100056701,"comment_content":"老师我有几个问题想问：<br>1、在做快照时，第一次使用的是全量快照，之后使用的都是增量快照，那么这个是Redis做快照时默认的机制还是需要我们主动配置？<br>2、既然save命令会令主线程阻塞，那为什么Redis还要设置这一个选项？这个设置是有什么其他的优点和使用场景吗？<br>3、在做持久化时若同时开启了AOF和RDB（不是混合模式），这样做的话是合适的持久化选择吗？会对Redis进程产生什么影响？","like_count":0,"discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298674,"discussion_content":"1、需要配置\n\n2、有些场景是没必要开子进程生成RDB的，例如实例没有任何读写请求，这时备份时执行save在主线程中做就可以了\n\n3、可以配合使用，但是要配置合理的参数，避免产生阻塞风险，例如RDB在低峰期执行，AOF设置为每秒刷盘","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1597375513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1671917,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqvfH3iatrDMG3YaW1LlCtibKbPe4lSib8CvWTK78emvAu0dNCQY7OOZPZfQicdCUKUyFpTcia5exNibvIQ/132","nickname":"akka","note":"","ucode":"FCD0964E761172","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":299361,"discussion_content":"关于第一个问题，redis使用rdb做持久化时，每次 只能 做全量快照吧，好像没有配置rdb“增量快照”的地方吧？我看了下redis根目录下的conf文件，没找到这个配置啊！老师说的那个rdb增量快照，可能只是一种方案吧，redis源码没有实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597666476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":298674,"ip_address":""},"score":299361,"extra":""},{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1671917,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqvfH3iatrDMG3YaW1LlCtibKbPe4lSib8CvWTK78emvAu0dNCQY7OOZPZfQicdCUKUyFpTcia5exNibvIQ/132","nickname":"akka","note":"","ucode":"FCD0964E761172","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299661,"discussion_content":"其实指的是RDB和AOF混合持久化，这个是4.0提供的功能，需要配置后才会开启。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597760181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299361,"ip_address":""},"score":299661,"extra":""}]},{"author":{"id":2076719,"avatar":"","nickname":"Geek_ea7656","note":"","ucode":"871DC1F5A2D475","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298650,"discussion_content":"第二个问题，容易想到的就是cpu资源匮乏的时候，就用save命令啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597371178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":241580,"user_name":"无名十三","can_delete":false,"product_type":"c1","uid":1670246,"ip_address":"","ucode":"4E8F487838BA64","user_header":"https://static001.geekbang.org/account/avatar/00/19/7c/66/73eabdd2.jpg","comment_is_top":false,"comment_ctime":1597363630,"is_pvip":true,"replies":[{"id":"89195","content":"因为Redis是单线程模型，所以Redis主进程也就是一个线程，我一般也称为主线程了。","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1597365817,"ip_address":"","comment_id":241580,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597363630","product_id":100056701,"comment_content":"简单来说，bgsave 子进程是由主线程 fork 生成的，可以共享主线程的所有内存数据。bgsave 子进程运行后，开始读取主线程的内存数据，并把它们写入 RDB 文件。<br><br><br>老师，这里是主线程还是主进程？","like_count":0,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503781,"discussion_content":"因为Redis是单线程模型，所以Redis主进程也就是一个线程，我一般也称为主线程了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597365817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}