{"id":527423,"title":"39 | 如何在编译期玩转字符串？","content":"<p>你好，我是吴咏炜。</p><p>在实际的项目里，我遇到过不少在编译期处理字符串的需求。今天，我们就来把这个问题好好讨论一下。</p><h2>对象的选择</h2><p>在编译期处理字符串，你是不能使用 <code>std::string</code> 的。原因有以下几个方面：</p><ul>\n<li>在 C++20 之前你完全无法在编译期使用 <code>string</code>。而且，对于编译期 <code>string</code> 的支持来得比较晚，只有 MSVC 较早支持，GCC 需要刚出炉不久的 GCC 12，Clang 需要当前（2022 年 6 月）尚未正式发布的 LLVM 15。</li>\n<li>到了 C++20，你虽然可以在编译期使用 <code>string</code>，但实际上仍有很多不方便的地方。最明显的，编译期生成的字符串不能在运行期使用。并且，<code>string</code> <strong>不可以</strong>声明为 constexpr。</li>\n<li><code>string</code> 不能用作模板参数。</li>\n</ul><p>因此我们只能放弃这个看起来最方便的方式，另外探索一条新路。我们的基本操作对象可以是下面这几样：</p><ul>\n<li>常字符指针，这是字符串字面量会自然退化成的东西</li>\n<li><code>string_view</code>，C++17 里新增的有力工具，方法和 <code>string</code> 类似，且基本都是 constexpr</li>\n<li><code>array</code>，使用它我们才可以返回全新的字符串</li>\n</ul><p>我们的编译期字符串处理，也因此会围绕着这几种类型来进行讨论。</p><h2>常见操作</h2><h3>获取字符串长度</h3><p>一个最最基本的操作，显然就是获取字符串的长度。这里，我们不能使用 C 的 <code>strlen</code> 函数，因为这个函数不是 constexpr。</p><!-- [[[read_end]]] --><p>对于这个操作，我们尝试一下几种不同的实现方式。</p><p>首先，我们可以自己实现 <code>strlen</code> 的功能，并把代码写成 constexpr 函数：</p><pre><code class=\"language-cpp\">namespace strtools {\n\nconstexpr size_t\nlength(const char* str)\n{\n  size_t count = 0;\n  while (*str != '\\0') {\n    ++str;\n    ++count;\n  }\n  return count;\n}\n\n} // namespace strtools\n</code></pre><p>不过，标准库里是不是有现成的编译期获取字符串长度的机制呢？答案是，有。不仅有，还能支持 <code>char</code>、<code>wchar_t</code> 等多种不同字符类型的情况。以 Unix 下最常用的 <code>char</code> 为例，使用跟上面相同的接口，我们可以写出：</p><pre><code class=\"language-cpp\">constexpr size_t\nlength(const char* str)\n{\n  return char_traits&lt;char&gt;::length(\n    str);\n}\n</code></pre><p>从 C++17 开始，这就是合法的可以在编译期计算字符串长度的代码了。（不过，一些较老的编译器上，使用 <code>char_traits</code> 会有一些问题，如 GCC 8 或更老的版本。）</p><p>既然用了 C++17，我们当然也可以试一下 <code>string_view</code> 了：</p><pre><code class=\"language-cpp\">constexpr size_t\nlength(string_view sv)\n{\n  return sv.size();\n}\n</code></pre><p>不管使用上面哪一种写法，现在你可以用下面的代码来验证我们确实可以在编译的时候验证字符串的长度：</p><pre><code class=\"language-cpp\">static_assert(strtools::length(\"Hi\") == 2);\n</code></pre><p>目前看起来，应该是 <code>string_view</code> 实现最方便了。</p><h3>查找字符</h3><p>查找指定的字符也是一个常用功能。我们不能使用 <code>strchr</code>，但一样，我们有几种不同的实现方式可供选择。使用 <code>char_traits</code> 或 <code>string_view</code> 的代码都非常简单。</p><p>这是使用 <code>char_traits</code> 的版本：</p><pre><code class=\"language-cpp\">constexpr const char*\nfind(const char* str, char ch)\n{\n  return char_traits&lt;char&gt;::find(\n    str, length(str), ch);\n}\n</code></pre><p>这是使用 <code>string_view</code> 的版本：</p><pre><code class=\"language-cpp\">constexpr string_view::size_type\nfind(string_view sv, char ch)\n{\n  return sv.find(ch);\n}\n</code></pre><p>这次我就不展示手工的查找代码了。（除非你非得用老的编译器，否则简单为好。）</p><h3>字符串比较</h3><p>下一个是字符串比较。这个 <code>string_view</code> 完全不需要动手就赢了：<code>string_view</code> 可以直接进行各种标准的比较，不需要写任何的代码。</p><h3>截取子串</h3><p>看起来使用 <code>string_view</code> 很方便，我们应当尽量使用 <code>string_view</code>，可以少写代码。不过，截取子串这个操作，<code>string_view::substr</code> 够不够用呢？</p><p>这个问题，没有实际的使用场景是比较难回答的。我在项目中遇到过的一个实际场景是，<code>__FILE__</code> 宏可能会携带编译时的完整路径，导致在不同路径下编译会产生不同的二进制输出。而比较理想的解决方式是，通过编译期编程来消除某个前缀或者截取路径的最后部分，让编译的绝对路径不会泄漏出来。</p><p>实测结果，<code>string_view::substr</code> 难当此任。对于下面的代码：</p><pre><code class=\"language-cpp\">puts(\"/usr/local\"sv.substr(5)\n       .data());\n</code></pre><p>我们在编译器的汇编输出里会看到这样的代码（参见 <a href=\"https://godbolt.org/z/1dssd96vz\">https://godbolt.org/z/1dssd96vz</a>）：</p><pre><code class=\"language-assembly\">.LC0:\n        .string \"/usr/local\"\n        …\n        mov     edi, OFFSET FLAT:.LC0+5\n        call    puts\n</code></pre><p>我们得另外想办法……</p><p>下面我们来试试 <code>array</code>。很容易会想到类似下面这样的代码：</p><pre><code class=\"language-cpp\">constexpr auto\nsubstr(string_view sv,\n       size_t offset, size_t count)\n{\n  array&lt;char, count + 1&gt; result{};\n  copy_n(&amp;sv[offset], count,\n         result.data());\n  return result;\n}\n</code></pre><p>代码的意图应该很容易读懂：根据要求的大小生成一个全新的字符数组并清零（C++20 之前不允许 constexpr 变量不立即初始化）；拷贝所需的内容；然后返回。可惜，这个代码没法通过编译……</p><p>它里面有好几个问题：</p><ul>\n<li>函数参数不是编译期常量，不能用在模板参数里</li>\n<li><code>copy_n</code> 在 C++20 之前不是 constexpr，不能用于编译期编程</li>\n</ul><p>第二个问题好解决，手写个循环就行。我们重点来看一下第一个问题。</p><p>一个 constexpr 函数可以在编译期求值，也可以在运行期求值，所以函数的参数全部不被视作编译期常量，不能用到模板参数等要求编译期常量的地方。</p><p>更进一步，这个问题到了 C++20 的 consteval 函数，仍然没有解决。其主要原因是，如果我们允许函数的参数当作编译期常量来用的话，那我们就能写出一个函数，它的入参的不同的<strong>值</strong>（相同类型），能够产生不同<strong>类型</strong>的返回值。例如（当前为不合法代码）：</p><pre><code class=\"language-cpp\">consteval auto make_constant(int n)\n{\n  return integral_constant&lt;int, n&gt;{};\n}\n</code></pre><p>这在目前的类型系统里是无法接受的，我们仍需确保函数的返回值有唯一类型。要想在函数里用作模板参数的值，就必须以模板参数的形式来传递给函数模板（而不是作为非模板函数的普通参数）——这种情况下，每一个不同的模板参数就意味着一个不同的模板特化，不是同一个函数，这样就没有上面这个函数返回值类型不唯一这个问题。</p><p>顺便说一句，有一个标准提案 P1045 试图解决这个问题 <span class=\"orange\">[1]</span>，但后来迟迟没有进展。由于存在一些绕过的方案（下面会讨论），目前我们仍能实现需要的效果。</p><p>回到 <code>substr</code> 函数，我们需要把长度变成模板参数。下面是修改的结果：</p><pre><code class=\"language-cpp\">template &lt;size_t Count&gt;\nconstexpr auto\nsubstr(string_view sv,\n       size_t offset = 0)\n{\n  array&lt;char, Count + 1&gt; result{};\n  for (size_t i = 0; i &lt; Count;\n       ++i) {\n    result[i] = sv[offset + i];\n  }\n  return result;\n}\n</code></pre><p>这回，代码确实可以工作了。对于 <code>puts(substr&lt;5&gt;(\"/usr/local\", 5).data());</code>，现在编译器生成的结果里不再有 <code>\"/usr/\"</code> 了。</p><hr><p>不过，很遗憾，这回我们见到了抽象对编译器的挑战：在当前 Godbolt 上最新版本的 GCC（12.1）和 MSVC（19.32）下，这个版本的 <code>substr</code> 没有生成最优的输出，我在老版本的编译器上也多多少少遇到了一些兼容性问题。因此，纯粹从实际的角度，我推荐下面这个不使用 <code>string_view</code> 的版本：</p><pre><code class=\"language-cpp\">template &lt;size_t Count&gt;\nconstexpr auto\nsubstr(const char* str,\n       size_t offset = 0)\n{\n  array&lt;char, Count + 1&gt; result{};\n  for (size_t i = 0; i &lt; Count;\n       ++i) {\n    result[i] = str[offset + i];\n  }\n  return result;\n}\n</code></pre><p>如果有兴趣的话，你可以自行比较一下这两个不同版本代码生成的汇编：</p><ul>\n<li><a href=\"https://godbolt.org/z/zT8s1aEYo\">https://godbolt.org/z/zT8s1aEYo</a></li>\n<li><a href=\"https://godbolt.org/z/qGPevxP98\">https://godbolt.org/z/qGPevxP98</a></li>\n</ul><p>只有 Clang 对于这两个版本生成了完全相同的高效汇编代码：</p><pre><code class=\"language-assembly\">        mov     word ptr [rsp + 4], 108\n        mov     dword ptr [rsp], 1633906540\n        mov     rdi, rsp\n        call    puts\n</code></pre><p>如果你不明白为什么有 108 和 1633906540 这两个数字的话，提醒你一下，这两个数字的十六进制表示分别是 0x6C 和 0x61636F6C。查一下 ASCII 表你就应该可以明白了。</p><hr><p>既然我们在接口里不用 <code>string_view</code>，参数里的 <code>offset</code> 就变得很鸡肋了。因此，下面我们不再使用 <code>offset</code> 这个参数，并把函数名更改为 <code>copy_str</code>：</p><pre><code class=\"language-cpp\">template &lt;size_t Count&gt;\nconstexpr auto\ncopy_str(const char* str)\n{\n  array&lt;char, Count + 1&gt; result{};\n  for (size_t i = 0; i &lt; Count;\n       ++i) {\n    result[i] = str[i];\n  }\n  return result;\n}\n</code></pre><h2>编译期传参问题</h2><p>不过，当你想把上面这些编译期函数组合起来的话，你会发现仍然缺了点什么。比如，如果你想把 <code>\"/usr/local\"</code> 这样的路径<strong>自动</strong>去掉第一段，得到 <code>\"local\"</code>，你可能会试图写出下面这样的代码：</p><pre><code class=\"language-cpp\">constexpr auto\nremove_head(const char* path)\n{\n  if (*path == '/') {\n    ++path;\n  }\n  auto start = find(path, '/');\n  if (start == nullptr) {\n    return copy_str&lt;length(path)&gt;(\n      path);\n  } else {\n    return copy_str&lt;length(\n      start + 1)&gt;(start + 1);\n  }\n}\n</code></pre><p>它的问题仍然是，没法通过编译。并且，你有没有注意到，这个代码恰恰违反了我上面提到过的，一个函数的返回类型需要一致这个约束。</p><p>对于这个问题，我目前一般采用 Michael Park 描述的一个解法，用 lambda 表达式来对“编译期参数”进行封装 <span class=\"orange\">[2]</span>。为了方便使用，我定义了三个宏：</p><pre><code class=\"language-cpp\">#define CARG typename\n#define CARG_WRAP(x) [] { return (x); }\n#define CARG_UNWRAP(x) (x)()\n</code></pre><p>“CARG”的意思是“constexpr argument”，代表编译期常量参数。对应于之前那个不能编译的 <code>make_constant</code> 函数，我们现在可以用下面的函数模板来代替：</p><pre><code class=\"language-cpp\">template &lt;CARG Int&gt;\nconstexpr auto\nmake_constant(Int cn)\n{\n  constexpr int n = CARG_UNWRAP(cn);\n  return integral_constant&lt;int,\n                           n&gt;{};\n}\n</code></pre><p>很容易验证它能够正常工作：</p><pre><code class=\"language-cpp\">auto result =\n  make_constant(CARG_WRAP(2));\nstatic_assert(\n  std::is_same_v&lt;\n    integral_constant&lt;int, 2&gt;,\n    decltype(result)&gt;);\n</code></pre><p>稍微解释一下。在模板参数里，我用 <code>CARG</code> 代替 <code>typename</code>，这只是为了代码的可读性，表示这个模板参数实质上是编译期常量的类型封装。<code>Int</code> 就是这个特殊类型的名称。这个类型我们在实例化函数模板的时候不提供，而是让编译器自己进行推导。调用的时候（<code>make_constant(CARG_WRAP(2))</code>）实际提供的是一个 lambda 表达式（<code>[] { return (2); }</code>），里面封装了我们需要的常量。在实际使用的时候，再使用 <code>CARG_UNWRAP</code> 来进行求值（<code>[] { return (2); }()</code>），重新得回常量值。</p><p>现在我们可以改写 <code>remove_head</code> 函数了：</p><pre><code class=\"language-cpp\">template &lt;CARG Str&gt;\nconstexpr auto\nremove_head(Str cpath)\n{\n  constexpr auto path =\n    CARG_UNWRAP(cpath);\n  constexpr int skip =\n    (*path == '/') ? 1 : 0;\n  constexpr auto pos = path + skip;\n  constexpr auto start =\n    find(pos, '/');\n  if constexpr (start == nullptr) {\n    return copy_str&lt;length(pos)&gt;(\n      pos);\n  } else {\n    return copy_str&lt;length(\n      start + 1)&gt;(start + 1);\n  }\n}\n</code></pre><p>这个函数跟之前的版本结构相似，但细节上有了很多改变。为了把结果作为模板参数传递给 <code>copy_str</code>，我们不得不一路使用 constexpr，为此还必须放弃可变性，写出非常具有函数式编程风格的代码。</p><p>最终效果如何呢？我们在 <code>main</code> 函数里只放下面这一条语句试试：</p><pre><code class=\"language-cpp\">puts(strtools::remove_head(\n       CARG_WRAP(\"/usr/local\"))\n       .data());\n</code></pre><p>下面是 GCC 在 x86-64 上优化编译输出的汇编（参见 <a href=\"https://godbolt.org/z/M1v1ba3PE\">https://godbolt.org/z/M1v1ba3PE</a>）：</p><pre><code class=\"language-assembly\">main:\n        sub     rsp, 24\n        mov     eax, DWORD PTR .LC0[rip]\n        lea     rdi, [rsp+8]\n        mov     DWORD PTR [rsp+8], eax\n        mov     eax, 108\n        mov     WORD PTR [rsp+12], ax\n        call    puts\n        xor     eax, eax\n        add     rsp, 24\n        ret\n.LC0:\n        .byte   108\n        .byte   111\n        .byte   99\n        .byte   97\n</code></pre><p>可以看到，编译器会把 <code>\"local\"</code> 对应的 ASCII 码填到栈上，把使用的栈空间的起始地址赋给 rdi 寄存器，然后调用 <code>puts</code> 函数。输出中完全看不到 <code>\"/usr/\"</code> 的影子了。事实上，上面那条 <code>puts</code> 语句跟 <code>puts(substr&lt;5&gt;(\"/usr/local\", 5).data());</code> 的输出结果没有区别。</p><p>Godbolt 上的版本是使用 <code>char_traits</code> 的简洁版本，适用于较新的编译器。特别地，GCC 8 就无法正常工作了。而 GitHub 上的<a href=\"https://github.com/adah1972/geek_time_cpp\">代码库</a>采用了手写的 <code>strtools::length</code> 和 <code>strtools::find</code>，在 GCC 7 下依然能够工作。</p><p>这里再提醒一句，编译期产生的字符 <code>array</code> 是可以安全地自由传递和存储的，但从 <code>array</code> 里用 <code>data()</code> 方法取得的指针不是。取得指针<strong>立即</strong>用来调用其他函数是可以的（像上面的 <code>puts</code>），因为 <code>array</code> 的生命周期会延续到这条语句执行结束；但直接把这个指针存下来，则会导致悬挂指针，是一种未定义行为。</p><h2>字符串模板参数</h2><p>上面我们已经在参数传递中把字符串变成了类型（lambda 表达式），但不像整数和 <code>integral_constant</code>，这两者之间没有一一对应关系。这在很多时候是不方便的：对于两个 <code>integral_constant</code>，我们可以直接使用 <code>is_same</code> 来判断它们是否相同；对于传递字符串的 lambda 表达式，我们可没法这么用——两个 lambda 表达式的类型永远不同。</p><p>C++ 里是不允许直接使用字符串字面量作为非类型模板参数的，因为字符串在不同的翻译单元可能会重复出现，而且字符串也没有合适的比较语义——比较两个字符串只是两个指针的比较而已，不能达到用户一般期望的效果。要使用字符串字面量作为模板参数，我们需要找到方法，把字符串当成一系列的字符传给模板进行处理。我们有两种可用的方法：</p><ul>\n<li>GCC 的非标准扩展，可以用在 GCC 和 Clang 编译器中（支持 C++17）</li>\n<li>C++20 的标准方法，可以用在任何支持 C++20 的编译器中（包含 GCC）</li>\n</ul><p>下面我们分别来看一下。</p><h3>GCC 扩展</h3><p>GCC 有一个根据标准提案实现的扩展 <span class=\"orange\">[3]</span>，使得我们可以把字符串当成模板参数来使用，编译器会把字符串展开成一系列的字符，结果就完全落入了标准 C++ 的范畴。这样的代码在 GCC 和 Clang 下都能够工作，但如果你打开 <code>-Wpedantic</code> 开关的话，编译器会对这种用法告警，告诉你这不是标准 C++。</p><p>下面是一个示例：</p><pre><code class=\"language-cpp\">template &lt;char... Cs&gt;\nstruct compile_time_string {\n  static constexpr char value[]{\n    Cs..., '\\0'};\n};\n\ntemplate &lt;typename T, T... Cs&gt;\nconstexpr compile_time_string&lt;Cs...&gt;\noperator\"\"_cts()\n{\n  return {};\n}\n</code></pre><p>类模板的定义是标准 C++，使我们可以声明出 <code>compile_time_string&lt;'H', 'i'&gt;</code> 这样的类型，同时，取这个类型的 <code>value</code> 成员我们即可得到 <code>\"Hi\"</code> 这样一个字符串。GCC 的扩展是在字面量运算符上——我们现在可以写出 <code>\"Hi\"_cts</code> 来得到一个 <code>compile_time_string&lt;'H', 'i'&gt;</code> 类型的对象。</p><p>使用上面的定义，下面的代码会合法通过编译：</p><pre><code class=\"language-cpp\">constexpr auto a = \"Hi\"_cts;\nconstexpr auto b = \"Hi\"_cts;\nstatic_assert(\n  is_same_v&lt;decltype(a),\n            decltype(b)&gt;);\n</code></pre><h3>C++20</h3><p>上面的方法虽然简单有效，但在 C++ 标准委员会没能获得共识从而进入标准。不过，到了 C++20，我们可以在模板参数中使用更多的非类型模板参数的类型了（这句话确实有点拗口）<span class=\"orange\">[4]</span>。特别是，用户定义的字面类型也在其中（可参考<a href=\"https://time.geekbang.org/column/article/182902\">第 15 讲</a>）。</p><p>下面是一个示例：</p><pre><code class=\"language-cpp\">template &lt;size_t N&gt;\nstruct compile_time_string {\n  constexpr compile_time_string(\n    const char (&amp;str)[N])\n  {\n    copy_n(str, N, value);\n  }\n  char value[N]{};\n};\n\ntemplate &lt;compile_time_string cts&gt;\nconstexpr auto operator\"\"_cts()\n{\n  return cts;\n}\n</code></pre><p>同样，前面的那个类模板没啥特别，但允许这个 <code>compile_time_string</code> 用作模板参数，以及<strong>字符串字面量运算符模板</strong> <span class=\"orange\">[5]</span>，就是 C++20 的改进了。我们现在同样可以写出 <code>\"Hi\"_cts</code> 来生成一个 <code>compile_time_string</code> 的对象。不过，需要注意的是，这个对象的类型是 <code>compile_time_string&lt;3&gt;</code>，因此 <code>\"Hi\"_cts</code> 和 <code>\"Ha\"_cts</code> 属于同一类型——这就和 GCC 扩展的结果很不同了。</p><p>不过，重点在于我们已经可以使用 <code>compile_time_string</code> 作为模板参数，所以，我们再小小地包一层就可以了：</p><pre><code class=\"language-cpp\">template &lt;compile_time_string cts&gt;\nstruct cts_wrapper {\n  static constexpr compile_time_string\n    str{cts};\n};\n</code></pre><p>对应于前面的编译期字符串类型比较，我们现在需要这样写：</p><pre><code class=\"language-cpp\">auto a = cts_wrapper&lt;\"Hi\"_cts&gt;{};\nauto b = cts_wrapper&lt;\"Hi\"_cts&gt;{};\nstatic_assert(\n  is_same_v&lt;decltype(a),\n            decltype(b)&gt;);\n</code></pre><p>甚至进一步简化成（通过非 explicit 的构造）：</p><pre><code class=\"language-cpp\">auto a = cts_wrapper&lt;\"Hi\"&gt;{};\nauto b = cts_wrapper&lt;\"Hi\"&gt;{};\nstatic_assert(\n  is_same_v&lt;decltype(a),\n            decltype(b)&gt;);\n</code></pre><h3>接口统一</h3><p>前面 GCC 和 C++20 的写法不一致，在实际项目里会带来一些困扰。因此，在实际项目里，我会使用宏，使得实际使用这些功能的代码是统一的。具体细节你可以参考 GitHub 上的<a href=\"https://github.com/adah1972/geek_time_cpp\">代码库</a>。在使用这些宏定义之后，现在我们可以这样写：</p><pre><code class=\"language-cpp\">using t1 = decltype(CTS_STRING(Hi));\nusing t2 = decltype(CTS_STRING(Hi));\nusing t3 = decltype(CTS_STRING(Ha));\nstatic_assert(is_same_v&lt;t1, t2&gt;);\nstatic_assert(!is_same_v&lt;t1, t3&gt;);\nputs(CTS_GET_VALUE(CTS_STRING(Hi)));\n</code></pre><p>有了这样的基础之后，我们就可以在编译期玩很多花样，得到一些之前无法完成的效果。</p><h2>内容小结</h2><p>本讲我们讨论了在编译期处理字符串的一些技巧。利用这些技巧，我们能够在编译而非执行代码时对字符串进行处理，从而把一些处理提前，消除运行期的开销。</p><h2>课后思考</h2><p>请尝试一下，你能不能实现我文中提到的需求，在编译期把一个文件名去掉前面的路径部分，只留下最后的名称？</p><p>期待你的分享，如有任何疑问，欢迎留言讨论！</p><h2><span class=\"reference\">参考资料</span></h2><p><span class=\"reference\">[1] David Stone, “<code>constexpr</code> function parameters”. <a href=\"https://wg21.link/p1045r1\">https://wg21.link/p1045r1</a></span></p><p><span class=\"reference\">[2] Michael Park, “<code>constexpr</code> function parameters”. <a href=\"https://mpark.github.io/programming/2017/05/26/constexpr-function-parameters/\">https://mpark.github.io/programming/2017/05/26/constexpr-function-parameters/</a></span></p><p><span class=\"reference\">[3] Richard Smith, “Literal operator templates for strings”. <a href=\"http://wg21.link/n3599\">http://wg21.link/n3599</a></span></p><p><span class=\"reference\">[4] cppreference.com, “Template parameters and template arguments”. <a href=\"https://en.cppreference.com/w/cpp/language/template_parameters\">https://en.cppreference.com/w/cpp/language/template_parameters</a></span></p><p><span class=\"reference\">[4a] cppreference.com, “模板形参与模板实参”. <a href=\"https://zh.cppreference.com/w/cpp/language/template_parameters\">https://zh.cppreference.com/w/cpp/language/template_parameters</a></span></p><p><span class=\"reference\">[5] cppreference.com, “User-defined literals”. <a href=\"https://en.cppreference.com/w/cpp/language/user_literal\">https://en.cppreference.com/w/cpp/language/user_literal</a></span></p><p><span class=\"reference\">[5a] cppreference.com, “用户定义字面量”. <a href=\"https://zh.cppreference.com/w/cpp/language/user_literal\">https://zh.cppreference.com/w/cpp/language/user_literal</a></span></p>","neighbors":{"left":{"article_title":"38 | 折叠表达式：高效的编译期展开","id":523170},"right":{"article_title":"40 | 如何在编译期遍历数据？","id":532651}},"comments":[{"had_liked":false,"id":384180,"user_name":"李云龙","can_delete":false,"product_type":"c1","uid":3201926,"ip_address":"北京","ucode":"785924B16BE788","user_header":"https://static001.geekbang.org/account/avatar/00/30/db/86/51ec4c41.jpg","comment_is_top":false,"comment_ctime":1700467192,"is_pvip":false,"replies":[{"id":140139,"content":"有限制还是不好。实现一个 rfind（需要给出长度，或者调用编译期可执行的 strlen）或者 find_last_of 就可以了。原理上没有特别之处。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1700475975,"ip_address":"上海","comment_id":384180,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"分享一下我的思考题解决方案：我原本想着用递归来写，但编译一直没有通过。最后我只能用手动展开的方法，写了一个最多支持5层目录的路径前缀分离，除了下面这个函数之外，其他函数都与老师的保持一致。\ntemplate &lt;CARG Str&gt;\nconstexpr auto remove_head_5(Str cpath)\n{\n    constexpr auto path = CARG_UNWRAP(cpath);\n    constexpr int skip = (*path == &#39;&#47;&#39;) ? 1 : 0;\n    constexpr auto pos = path + skip;\n    constexpr auto start = find(pos, &#39;&#47;&#39;);\n\n    if constexpr (start == nullptr) {\n        return copy_str&lt;length(pos)&gt;(pos);\n    }\n    else {\n        constexpr auto pos2 = start + 1;\n        constexpr auto start2 = find(pos2, &#39;&#47;&#39;);\n        if constexpr (start2 == nullptr) {\n            return copy_str&lt;length(pos2)&gt;(pos2);\n        }\n        else {\n            constexpr auto pos3 = start2 + 1;\n            constexpr auto start3 = find(pos3, &#39;&#47;&#39;);\n            if constexpr (start3 == nullptr) {\n                return copy_str&lt;length(pos3)&gt;(pos2);\n            }\n            else\n            {\n                constexpr auto pos4 = start3 + 1;\n                constexpr auto start4 = find(pos4, &#39;&#47;&#39;);\n                if constexpr (start4 == nullptr) {\n                    return copy_str&lt;length(pos4)&gt;(pos4);\n                }\n                else {\n                    return copy_str&lt;length(start4 + 1)&gt;(start4 + 1);\n                }\n            }\n        }\n    }\n}\n\nint main() {\n    &#47;&#47;调用\n    puts(::remove_head_5(CARG_WRAP(&quot;&#47;usr&#47;local&#47;test&#47;txt&#47;file&quot;)).data());\n    return 0;\n}","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632103,"discussion_content":"有限制还是不好。实现一个 rfind（需要给出长度，或者调用编译期可执行的 strlen）或者 find_last_of 就可以了。原理上没有特别之处。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1700475975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3201926,"avatar":"https://static001.geekbang.org/account/avatar/00/30/db/86/51ec4c41.jpg","nickname":"李云龙","note":"","ucode":"785924B16BE788","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":632110,"discussion_content":"感谢老师指点迷津","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700478884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":632103,"ip_address":"北京","group_id":0},"score":632110,"extra":""}]}]},{"had_liked":false,"id":384151,"user_name":"李云龙","can_delete":false,"product_type":"c1","uid":3201926,"ip_address":"美国","ucode":"785924B16BE788","user_header":"https://static001.geekbang.org/account/avatar/00/30/db/86/51ec4c41.jpg","comment_is_top":false,"comment_ctime":1700406828,"is_pvip":false,"replies":[{"id":140140,"content":"对，如果 start 是普通的函数参数那就不行了。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1700476099,"ip_address":"上海","comment_id":384151,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"老师，这段代码的两个return返回不同的array类型，但可以编译通过，是因为pos和start已经是编译期常量了，在编译期就可以确定走哪个return分支，从而就可以确定函数的返回值类型了。我的理解正确吗？\nif constexpr (start == nullptr) {    return copy_str&lt;length(pos)&gt;(pos);  } else {    return copy_str&lt;length(start + 1)&gt;(start + 1);  }","like_count":1},{"had_liked":false,"id":390282,"user_name":"陌音","can_delete":false,"product_type":"c1","uid":1763505,"ip_address":"北京","ucode":"9EAAD1F5D08FEA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/b1/b2c62429.jpg","comment_is_top":false,"comment_ctime":1714980683,"is_pvip":false,"replies":[{"id":142024,"content":"一、直接使用 constexpr 变量可强制要求编译期求值，可以解决你说的问题，如：\n\nhttps:&#47;&#47;godbolt.org&#47;z&#47;6j1nocKMv\n\n二、使用 STL 的 C++ 项目如果不开优化（尤其是不开内联优化的话），性能根本不能打。发布时一定是开至少 -O2 的。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1715396808,"ip_address":"上海","comment_id":390282,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"不使用-O2编译选项的话，生成的汇编还是会有&quot;&#47;usr&#47;local&quot;。在实际项目中，我们应该如何选择优化等级？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632103,"discussion_content":"有限制还是不好。实现一个 rfind（需要给出长度，或者调用编译期可执行的 strlen）或者 find_last_of 就可以了。原理上没有特别之处。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1700475975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3201926,"avatar":"https://static001.geekbang.org/account/avatar/00/30/db/86/51ec4c41.jpg","nickname":"李云龙","note":"","ucode":"785924B16BE788","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":632110,"discussion_content":"感谢老师指点迷津","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700478884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":632103,"ip_address":"北京","group_id":0},"score":632110,"extra":""}]}]},{"had_liked":false,"id":366908,"user_name":"行大运","can_delete":false,"product_type":"c1","uid":2269536,"ip_address":"广东","ucode":"BAE241834C5FAD","user_header":"https://static001.geekbang.org/account/avatar/00/22/a1/60/89727fc5.jpg","comment_is_top":false,"comment_ctime":1674573947,"is_pvip":false,"replies":[{"id":133783,"content":"目前没有计划……","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1674993345,"ip_address":"上海","comment_id":366908,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"什么时候出一个完整的C++20专栏！","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644634,"discussion_content":"一、直接使用 constexpr 变量可强制要求编译期求值，可以解决你说的问题，如：\n\nhttps://godbolt.org/z/6j1nocKMv\n\n二、使用 STL 的 C++ 项目如果不开优化（尤其是不开内联优化的话），性能根本不能打。发布时一定是开至少 -O2 的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715396808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356655,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"上海","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1662471830,"is_pvip":true,"replies":[{"id":129863,"content":"C++ 字符串处理有哪里不如 C？","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1662637134,"ip_address":"上海","comment_id":356655,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"c++20 字符串处理，可以超越c了","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601027,"discussion_content":"目前没有计划……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674993345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384180,"user_name":"李云龙","can_delete":false,"product_type":"c1","uid":3201926,"ip_address":"北京","ucode":"785924B16BE788","user_header":"https://static001.geekbang.org/account/avatar/00/30/db/86/51ec4c41.jpg","comment_is_top":false,"comment_ctime":1700467192,"is_pvip":false,"replies":[{"id":140139,"content":"有限制还是不好。实现一个 rfind（需要给出长度，或者调用编译期可执行的 strlen）或者 find_last_of 就可以了。原理上没有特别之处。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1700475975,"ip_address":"上海","comment_id":384180,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"分享一下我的思考题解决方案：我原本想着用递归来写，但编译一直没有通过。最后我只能用手动展开的方法，写了一个最多支持5层目录的路径前缀分离，除了下面这个函数之外，其他函数都与老师的保持一致。\ntemplate &lt;CARG Str&gt;\nconstexpr auto remove_head_5(Str cpath)\n{\n    constexpr auto path = CARG_UNWRAP(cpath);\n    constexpr int skip = (*path == &#39;&#47;&#39;) ? 1 : 0;\n    constexpr auto pos = path + skip;\n    constexpr auto start = find(pos, &#39;&#47;&#39;);\n\n    if constexpr (start == nullptr) {\n        return copy_str&lt;length(pos)&gt;(pos);\n    }\n    else {\n        constexpr auto pos2 = start + 1;\n        constexpr auto start2 = find(pos2, &#39;&#47;&#39;);\n        if constexpr (start2 == nullptr) {\n            return copy_str&lt;length(pos2)&gt;(pos2);\n        }\n        else {\n            constexpr auto pos3 = start2 + 1;\n            constexpr auto start3 = find(pos3, &#39;&#47;&#39;);\n            if constexpr (start3 == nullptr) {\n                return copy_str&lt;length(pos3)&gt;(pos2);\n            }\n            else\n            {\n                constexpr auto pos4 = start3 + 1;\n                constexpr auto start4 = find(pos4, &#39;&#47;&#39;);\n                if constexpr (start4 == nullptr) {\n                    return copy_str&lt;length(pos4)&gt;(pos4);\n                }\n                else {\n                    return copy_str&lt;length(start4 + 1)&gt;(start4 + 1);\n                }\n            }\n        }\n    }\n}\n\nint main() {\n    &#47;&#47;调用\n    puts(::remove_head_5(CARG_WRAP(&quot;&#47;usr&#47;local&#47;test&#47;txt&#47;file&quot;)).data());\n    return 0;\n}","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632104,"discussion_content":"对，如果 start 是普通的函数参数那就不行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700476099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384151,"user_name":"李云龙","can_delete":false,"product_type":"c1","uid":3201926,"ip_address":"美国","ucode":"785924B16BE788","user_header":"https://static001.geekbang.org/account/avatar/00/30/db/86/51ec4c41.jpg","comment_is_top":false,"comment_ctime":1700406828,"is_pvip":false,"replies":[{"id":140140,"content":"对，如果 start 是普通的函数参数那就不行了。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1700476099,"ip_address":"上海","comment_id":384151,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"老师，这段代码的两个return返回不同的array类型，但可以编译通过，是因为pos和start已经是编译期常量了，在编译期就可以确定走哪个return分支，从而就可以确定函数的返回值类型了。我的理解正确吗？\nif constexpr (start == nullptr) {    return copy_str&lt;length(pos)&gt;(pos);  } else {    return copy_str&lt;length(start + 1)&gt;(start + 1);  }","like_count":1,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632104,"discussion_content":"对，如果 start 是普通的函数参数那就不行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700476099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390282,"user_name":"陌音","can_delete":false,"product_type":"c1","uid":1763505,"ip_address":"北京","ucode":"9EAAD1F5D08FEA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/b1/b2c62429.jpg","comment_is_top":false,"comment_ctime":1714980683,"is_pvip":false,"replies":[{"id":142024,"content":"一、直接使用 constexpr 变量可强制要求编译期求值，可以解决你说的问题，如：\n\nhttps:&#47;&#47;godbolt.org&#47;z&#47;6j1nocKMv\n\n二、使用 STL 的 C++ 项目如果不开优化（尤其是不开内联优化的话），性能根本不能打。发布时一定是开至少 -O2 的。","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1715396808,"ip_address":"上海","comment_id":390282,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"不使用-O2编译选项的话，生成的汇编还是会有&quot;&#47;usr&#47;local&quot;。在实际项目中，我们应该如何选择优化等级？","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":644634,"discussion_content":"一、直接使用 constexpr 变量可强制要求编译期求值，可以解决你说的问题，如：\n\nhttps://godbolt.org/z/6j1nocKMv\n\n二、使用 STL 的 C++ 项目如果不开优化（尤其是不开内联优化的话），性能根本不能打。发布时一定是开至少 -O2 的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715396808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366908,"user_name":"行大运","can_delete":false,"product_type":"c1","uid":2269536,"ip_address":"广东","ucode":"BAE241834C5FAD","user_header":"https://static001.geekbang.org/account/avatar/00/22/a1/60/89727fc5.jpg","comment_is_top":false,"comment_ctime":1674573947,"is_pvip":false,"replies":[{"id":133783,"content":"目前没有计划……","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1674993345,"ip_address":"上海","comment_id":366908,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"什么时候出一个完整的C++20专栏！","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":601027,"discussion_content":"目前没有计划……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674993345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356655,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"上海","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1662471830,"is_pvip":true,"replies":[{"id":129863,"content":"C++ 字符串处理有哪里不如 C？","user_name":"作者回复","user_name_real":"编辑","uid":1645639,"ctime":1662637134,"ip_address":"上海","comment_id":356655,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100040501,"comment_content":"c++20 字符串处理，可以超越c了","like_count":0,"discussions":[{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586976,"discussion_content":"C++ 字符串处理有哪里不如 C？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662637134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":1066752,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","nickname":"piboye","note":"","ucode":"7CFD8712857A85","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":587004,"discussion_content":"极致性能，一般c++98要退回到c的方式，现在c++有编译器计算，可以做到比c更快","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662683267,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":586976,"ip_address":"广东","group_id":0},"score":587004,"extra":""},{"author":{"id":1066752,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","nickname":"piboye","note":"","ucode":"7CFD8712857A85","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":587005,"discussion_content":"不追求极致性能的时候，一般用go更方便些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662683338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":586976,"ip_address":"广东","group_id":0},"score":587005,"extra":""},{"author":{"id":1645639,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1c/47/53c48284.jpg","nickname":"吴咏炜","note":"","ucode":"8C24C10AEC779F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1066752,"avatar":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","nickname":"piboye","note":"","ucode":"7CFD8712857A85","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":587463,"discussion_content":"并没有。C 要做到跟 C++ 功能一样的话，性能不会更好，麻烦程度高得多。不过，在原先没有 string_view 的时候，确实 C++ 的写法更容易出现一些不必要的堆上内存分配的情况。现在应该可以全面超过 C 了。\n\nC 的标准库里的一些函数，如 strdup、strlen、strcat，在字符串长的时候都非常低效的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1663066637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":587004,"ip_address":"上海","group_id":0},"score":587463,"extra":""}]}]}]}