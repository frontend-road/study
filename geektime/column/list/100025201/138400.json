{"id":138400,"title":"43 | 实战（三）：“画图”程序后端实战","content":"<p>你好，我是七牛云许式伟。</p><p>在上一章，我们实现了一个 mock 版本的服务端，代码如下：</p><ul>\n<li><a href=\"https://github.com/qiniu/qpaint/tree/v31/paintdom\">https://github.com/qiniu/qpaint/tree/v31/paintdom</a></li>\n</ul><p>我们这一章实战的目标，是要把它改造成一个产品级的服务端程序。</p><p>前面两讲，我们一讲谈了 RESTful API 层，一讲谈了底层是业务逻辑的实现层。今天，我们要谈的是帐号（Account）与认证（Authorization）。</p><p>我们之前实现的 mock 版本服务端是匿名可访问的，不需要授权。在上一讲，我们开始引入了多租户，但为了简化，用的是一种 mock 的认证方式。</p><p>接下来我们就要动真格了。</p><p>但在此之前，我们仍然要先理解一下帐号和认证这两个概念。虽然这是两个大家非常耳熟能详的东西。</p><h2>帐号（Account）</h2><p>帐号，简单说就是某种表征用户身份的实体，它代表了一个“用户”。虽然一个物理的自然人用户可能会在同一个网站开多个帐号，但从业务角度，我们往往把这些帐号看作不同的用户。</p><p>互联网帐号的表征方式有很多，比较常见的有：</p><ul>\n<li>电子邮件；</li>\n<li>手机号；</li>\n<li>用户自定义的网络 ID；</li>\n<li>自动分配的唯一 ID。</li>\n</ul><p>前三者大家容易理解。对于自动分配的 UUID，其实最典型的是银行。你的银行帐号从来都不是你自己定义的，而是预先分配好的一个卡号。</p><!-- [[[read_end]]] --><p>当然还有一些冷门的选择。比如有的网站选择用身份证号作为帐号 ID，这通常发生在政府公共服务类的业务。</p><h2>授权（Authorization）</h2><p>那么授权是什么？授权是帐号对服务的访问方式。</p><p>从这句话字面去理解，授权和帐号相关。有帐号，就会有授权。但是帐号和授权并不是对应的关系。同一个帐号，可能会有多种授权。</p><p>常见的授权机制有哪些？</p><p>前面我们在 “<a href=\"https://time.geekbang.org/column/article/134384\">40 | 服务端的业务架构建议</a>” 这一讲提过，当前主流的授权方式有两种：一种是基于 Token，一种是基于 AK/SK。</p><p>但实际上还有一种最常见的授权机制没有被提到，那就是：用户名+密码。</p><p>这里的 “用户名” 其实就是指 “帐号”。</p><p>当然，没有提的原因是因为当时我们是在讨论网络 API 协议的授权机制选择。我们在业界基本上看不到用 “用户名+密码” 来作为网络 API 的授权机制。</p><p>为什么不用？因为不安全。假如在每一次 API 请求中都带上密码，那么显然密码泄漏的概率会更大。</p><p>所以，安全性上的需求会导致我们倾向于尽可能减少密码在网络中传输的次数。“用户名+密码” 这种授权方式，必然会以尽可能少的频率去使用。</p><p>哪些情况会用 “用户名+密码” 授权？</p><p>其一，登录（login）。对于一个 Web 应用而言，授权的第一步是登录。登录最经典的方式就是 “用户名+密码” 授权。</p><p>“用户名+密码” 授权往往只发生在登录那一下，登录后就会生成一个会话（Session）用途的 Cookie。此后 Web 应用的授权都基于 Session，直到 Session 过期。</p><p>抱歉，我们的词汇有点贫乏。这里说的 Session 授权，和浏览器引入的 Session 不是一回事。Session 授权发生在登录之后，一般并不会随浏览器窗口的关闭而消失，往往有几天的有效期。</p><p>甚至有一些网站的 Session 有效期会自动顺延。也就是说，只要你在会话期内活跃的话，Session 授权就不会过期。超时时间从你最后一次活动算起，只有你连续几天都不活跃才会导致 Session 过期。</p><p>其二，作为 Token 授权的入口。其实 RESTful API 层中的 Token 授权，和 Web 应用中的 Session 授权的地位是非常像的。</p><p>Session 授权会有过期时间，Token 授权也会有过期时间。Session 授权有自动顺延，Token 授权有 Refresh。Session 授权的典型入口是登录（login），Token 授权也一样有 “用户名+密码” 授权这个入口。</p><p>这样来看，Token 授权和 Session 授权的差别只是应用场景不同，一个用于 API 层，一个用于 Web。而这也导致承载它们的机制有些不同，Token 授权基于 HTTP 的 Authorization 头，而 Session 授权则基于 Cookie。</p><h2>OAuth 2.0</h2><p>由于 QPaint 程序是一个 To C 的应用，所以在 API 层的授权机制选择上，我们很自然会选择 Token 授权。</p><p>当前推荐的 Token 授权标准是 OAuth 2.0，它得到了广泛的支持，如果你在使用各类 C 端应用程序的开放接口，会发现它们往往都是基于 OAuth 2.0 的。</p><p>有两种场景下我们会考虑 OAuth 2.0。</p><p>第一种场景，也是 OAuth 的核心场景，就是提供开放接口。</p><p>对于一个服务提供方来说，通过推广自己的 App ，来让更多用户使用自己的服务是一个常规的办法。但还有一个非常值得考虑的方式，就是把服务以 API 方式开放出来，让更多的 App 接入自己的服务。</p><p>一旦我们希望授权第三方应用程序来调用我们的服务，最好的选择是 OAuth 2.0。</p><p>第二种场景，是作为 OpenID 提供方。也就是说，第三方应用接入我的 OAuth 接口，并不是为了要调用我的什么能力，而只是为了复用我的用户。</p><p>这当然不是谁都能够做得到的，还是要有足够大的用户基数，并且有一定的入口价值才有可能被接受。国内被广泛使用的典型 OpenID 提供方有：</p><ul>\n<li>微信和 QQ；</li>\n<li>支付宝；</li>\n<li>新浪微博。</li>\n</ul><p>为了支持 OAuth 2.0 作为 OpenID 的场景，OpenID Foundation 还专门引入了 OpenID Connect 协议规范。详细资料如下：</p><ul>\n<li><a href=\"https://openid.net/connect/\">https://openid.net/connect/</a></li>\n</ul><p>今天我们重点还是关注 OAuth 2.0 的核心场景。它涉及到以下三个角色：</p><ul>\n<li>服务提供商。包括授权服务（Authorization Server）和资源服务（Resource Server）。</li>\n<li>终端用户，也就是资源拥有方（Resource Owner）。终端用户是服务提供商的用户，它的资源也存在于服务提供商提供的服务中。但是这些资源的归属是属于终端用户的，所以我们称之为资源拥有方。</li>\n<li>第三方应用，也就是客户端（Client）。在 OAuth 的视角中，官方应用和第三方应用并无大的区别，以相同的机制在工作。从这一点来说，称之为客户端会更加合理。</li>\n</ul><p>这三个角色交互的基本场景是：</p><p>首先，第三方应用，也就是客户端（Client），向服务提供商提出接入申请。这一步可以理解为类似把 App 注册到应用商店的过程，每个应用只需要做一次。</p><p>然后，客户端（Client）向终端用户，也就是资源拥有方（Resource Owner）申请访问权限。这个申请发生在服务提供商提供的环境中，所以服务提供商可以感知资源拥有方是拒绝，还是接受了客户端的请求。</p><p>然后，客户端（Client）向服务提供商的授权服务（Authorization Server）发起授权请求，并得到了可用于访问资源的 Token。</p><p>最后，客户端（Client）通过 Token 向服务提供商的资源服务（Resource Server）发起资源访问请求。</p><p>整个过程的具体流程如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/48/01/489deed0e9dc2d8464112cd0cd3b4801.png?wh=480*298\" alt=\"\"></p><p>（A）终端用户打开客户端以后，客户端要求终端用户给予授权。<br>\n（B）终端用户同意给予客户端授权。<br>\n（C）客户端使用上一步获得的授权，向认证服务器申请令牌（Token）。<br>\n（D）认证服务器对客户端进行认证以后，确认无误，同意发放令牌。<br>\n（E）客户端使用令牌，向资源服务器申请获取资源。<br>\n（F）资源服务器确认令牌无误，同意向客户端开放资源。</p><p>这个图体现了 OAuth 2.0 的核心思想。但不同场景下，具体的授权流程有一定的差异。常见的授权模式有如下几种：</p><ul>\n<li>授权码模式（Authorization Code）；</li>\n<li>简化模式（Implicit）；</li>\n<li>用户名+密码模式（Resource Owner Password Credentials）；</li>\n<li>客户端模式（Client Credentials）；</li>\n<li>访问令牌（Access Token）；</li>\n<li>更新令牌（Refresh Token）。</li>\n</ul><p>其中，基于访问令牌（Access Token）的授权模式是最核心的一种，请求频率最大。更新令牌（Refresh Token）则次之。每次访问令牌（Access Token）失效后，通过更新令牌（Refresh Token）获得新的访问令牌（Access Token）。</p><p>其他所有的授权方式，是在不同场景下的授权入口。通过这些授权入口的任何一个都可以同时获得访问令牌（Access Token）和更新令牌（Refresh Token）。</p><p>用户名+密码模式（Resource Owner Password Credentials）不用过多解释，这是我们最为熟悉的一种授权方式。</p><p>我们重点解释下授权码模式（Authorization Code），这是 OAuth 作为第三方开放接口用的最多的一种场景。它的业务流程如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/0e/fe/0e357b47943b75dae1666b90a55aabfe.png?wh=764*529\" alt=\"图片: https://uploader.shimo.im/f/7kw35bAyIoseOFoz.png\"></p><p>（A）终端用户访问某个网站，客户端（通常是一个标准的浏览器）将终端用户重定向到认证服务。<br>\n（B）终端用户选择是否给予该网站相应的授权。<br>\n（C）如果授权，认证服务器将用户导向网站事先指定好的 “重定向URI”（Redirection URI），同时附上一个授权码。<br>\n（D）该网站收到授权码，附上早先的 “重定向URI”，向认证服务器申请令牌。这一步是在网站的后端服务器上完成的，对终端用户不可见。<br>\n（E）认证服务器核对了授权码和重定向URI，确认无误后，网站的后端服务器返回访问令牌（access token）和更新令牌（refresh token）。</p><p>此后，该网站就可以通过后端服务器去访问相应的服务了。</p><h2>结语</h2><p>今天我们主要聊了帐号与授权相关的基础体系，重点介绍 OAuth 2.0 背后的逻辑。下一讲我们会讨论如何基于 OAuth 来完成 QPaint 的帐号与授权机制。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲开始我们继续实战。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","comments":[{"had_liked":false,"id":134788,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1568935023,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"27338738799","product_id":100025201,"comment_content":"早起打卡 43 对前后端分离式的企业式类似ldap认证一直有点困惑 看看许老师的后续课程💪","like_count":6,"discussions":[{"author":{"id":1494491,"avatar":"https://static001.geekbang.org/account/avatar/00/16/cd/db/7467ad23.jpg","nickname":"Bachue Zhou","note":"","ucode":"3175754775CA32","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":38755,"discussion_content":"我很久以前用过 ldap，我的理解一直是，ldap 就相当于把自己的账户数据库直接以只读的形式开放出来供第三方查询，其实是个很糟糕的设计。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571829339,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134885,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1568947038,"is_pvip":false,"replies":[{"id":"51764","content":"用来验证","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1568961772,"ip_address":"","comment_id":134885,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14453848926","product_id":100025201,"comment_content":"授权码模式中的第C步已经将用户导向到了重定向url，为什么第D步还要附上重定向url呢？第D步附上的的这个重定向url的作用是什么呢？","like_count":3,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467943,"discussion_content":"用来验证","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568961772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225537,"user_name":"Geek_9d0e04","can_delete":false,"product_type":"c1","uid":1902220,"ip_address":"","ucode":"F5560CE5BDB125","user_header":"","comment_is_top":false,"comment_ctime":1591780556,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5886747852","product_id":100025201,"comment_content":"有一个问题，resource owner收到client请求中的，access token，是不是需要去authorization server做下access token的校验？不校验的话，如何判断access token是有效的呢？这种校验，每次client请求都需要做吗？？","like_count":1,"discussions":[{"author":{"id":1502331,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELARO7p9N9icET6WGE3gkficK4IzM8xE133W4g7TDRUxXiaF6NArA1Bn3GeVBic96RZ2lhT5Biaby8icsdA/132","nickname":"Geek_abd910","note":"","ucode":"1C85E36A29E2AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331713,"discussion_content":"很多种方式，可以rpc调用，也可以用sk验证签名。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606959120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138182,"user_name":"Geek_88604f","can_delete":false,"product_type":"c1","uid":1501234,"ip_address":"","ucode":"33DD1318E53814","user_header":"","comment_is_top":false,"comment_ctime":1570086530,"is_pvip":false,"replies":[{"id":"53179","content":"1、浏览器是客户端，它也需要接入申请。<br>2、是的。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1570103727,"ip_address":"","comment_id":138182,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5865053826","product_id":100025201,"comment_content":"        终端用户通过浏览器访问云服务提供商提供的服务时，浏览器就相当于客户端吧？浏览器需要向服务提供商提出接入申请吗？<br>        当终端用户打开登录页面时会要求输入用户名和密码，这个过程是不是可以认为客户端（Client）向终端用户申请访问权限。","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469426,"discussion_content":"1、浏览器是客户端，它也需要接入申请。\n2、是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570103727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290618,"user_name":"不温暖啊不纯良","can_delete":false,"product_type":"c1","uid":2079117,"ip_address":"","ucode":"204474A214E00C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/b9/8d/00bded19.jpg","comment_is_top":false,"comment_ctime":1619660431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619660431","product_id":100025201,"comment_content":"在授权码模式下，用户代理会发送三个请求，接收两个请求。<br>发送请求给终端用户请求授权。<br>发送重定向请求到认证服务器。<br>发送用户授权信息到认证服务器。<br>终端用户返回授权。<br>认证服务器返回认证后的重定向请求。<br><br>然后用户代理拿到这个重定向请求，返回给客户端，然后客户端使用这个重定向请求资源，在这个请求里，同样需要经过认证服务器，认证成功后给用户返回资源。","like_count":0},{"had_liked":false,"id":184566,"user_name":"沉睡的木木夕","can_delete":false,"product_type":"c1","uid":1036362,"ip_address":"","ucode":"2C6B23B34C44E7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d0/4a/7e3d158d.jpg","comment_is_top":false,"comment_ctime":1583338940,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583338940","product_id":100025201,"comment_content":"验证这一块讲的过于简单了。<br>从架构上来讲，授权验证，搭建 sts，这个概念很重要的，虽然很容易查资料得知具体细节<br>不过我认为还是有必要在详细讲下","like_count":0},{"had_liked":false,"id":145922,"user_name":"💢 星星💢","can_delete":false,"product_type":"c1","uid":1254392,"ip_address":"","ucode":"A402B765222C35","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/f8/24fcccea.jpg","comment_is_top":false,"comment_ctime":1572402845,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1572402845","product_id":100025201,"comment_content":"老师，还是不理解，为啥要先颁发一个code,在颁发token,直接颁发token不是也可以么，可能是为了安全，但是具体安全在哪，我还是没理解。。","like_count":0,"discussions":[{"author":{"id":1052994,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/226NabDEu1IGMN7Om1gQqG22hk2dZKojpB0KDpAK0vtujQLdlgZsVaPbIc4ymcib0NdH3Syh8YibRuL7Lv5kVCkg/132","nickname":"果子","note":"","ucode":"D7B288A3E722F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372094,"discussion_content":"授权码只能表明终端用户批准了授权，且这个授权码是公开的，而颁发token需要对client的身份进行验证。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620185324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144007,"user_name":"Subfire","can_delete":false,"product_type":"c1","uid":1051622,"ip_address":"","ucode":"339A4EA20EBCEC","user_header":"https://static001.geekbang.org/account/avatar/00/10/0b/e6/99183c8d.jpg","comment_is_top":false,"comment_ctime":1571823338,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1571823338","product_id":100025201,"comment_content":"这里的授权是包含了鉴权么?","like_count":0,"discussions":[{"author":{"id":1429415,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoE0kjq5VlNmRoLCSpibHiaulSogf8VPrlB9VJPEicPoSn8Bl2GCIfOdibcUbohyRYun7ew1jyEUdxqtg/132","nickname":"听幺零的声音","note":"","ucode":"FF5345419863F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539293,"discussion_content":"不包括，鉴权更复杂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639662210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135841,"user_name":"CoderLim","can_delete":false,"product_type":"c1","uid":1029523,"ip_address":"","ucode":"4A856891BE98E5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKY0ibA4DWA9Bf6MuicKhyEt0yDXvAzG21xnOUHNLDwuic2icxpesyeXc1AMboeZEW97e8SuZdzIBefqA/132","comment_is_top":false,"comment_ctime":1569287952,"is_pvip":false,"replies":[{"id":"52107","content":"code和token是完全不同的东西","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1569311542,"ip_address":"","comment_id":135841,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569287952","product_id":100025201,"comment_content":"授权码不是认证后颁发的 code 吗，为什么还需要再认证再颁发新 code (token )","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468354,"discussion_content":"code和token是完全不同的东西","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569311542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}