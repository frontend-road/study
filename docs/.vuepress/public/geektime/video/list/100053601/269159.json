{"id":269159,"title":"39 | 如何设计一把轻量级的锁？","content":"<p><strong>课件和Demo地址</strong><br>\n<a href=\"https://gitee.com/geektime-geekbang/geektime-distributed\">https://gitee.com/geektime-geekbang/geektime-distributed</a></p>","comments":[{"had_liked":false,"id":239901,"user_name":"慌张而黑糖","can_delete":false,"product_type":"c3","uid":1638878,"ip_address":"","ucode":"B4416885A301C8","user_header":"https://static001.geekbang.org/account/avatar/00/19/01/de/bf524817.jpg","comment_is_top":false,"comment_ctime":1596687759,"is_pvip":false,"replies":[{"id":88707,"content":"栅栏令牌是悲观锁，在锁被判定超时的情况下，可能其实锁持有方并没有完全死掉，之后它又回来更新共享资源，栅栏令牌是对这种情况的一个修复。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1596814792,"ip_address":"","comment_id":239901,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"栅栏令牌怎么有点乐观锁的意思，感觉是悲观锁和乐观锁的结合","like_count":4,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503270,"discussion_content":"栅栏令牌是悲观锁，在锁被判定超时的情况下，可能其实锁持有方并没有完全死掉，之后它又回来更新共享资源，栅栏令牌是对这种情况的一个修复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596814792,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1025006,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/ee/636415d8.jpg","nickname":"永昌","note":"","ucode":"A572DDE33DFAD9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305505,"discussion_content":"我也觉得像是结合乐观锁机制，不过极端条件下，serviceA在serviceB之后再执行update操作，这时候如果不用栅栏令牌，serviceA在乐观锁机制下也是会操作成功的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599969901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255789,"user_name":"what if","can_delete":false,"product_type":"c3","uid":1353380,"ip_address":"","ucode":"A47E207894810B","user_header":"https://static001.geekbang.org/account/avatar/00/14/a6/a4/902eb4db.jpg","comment_is_top":false,"comment_ctime":1603432439,"is_pvip":false,"replies":[{"id":93420,"content":"数据库内部的锁，是为了解决数据库内部的并发控制而设计的，它并不能直接应用到数据库以外的场景。为了支持业务上一些需要锁机制的场景，某些数据库也对外提供一些锁机制。这两类锁是面向不同场景的锁。\n\n而业务上一些需要锁机制的场景，可以借助数据库表所对外提供的一些锁机制，来实现乐观锁和悲观锁。当然，除了数据库依赖，redis或者zookeeper之类也提供锁机制。另外，除了锁的具体底层实现以外，一般业务端还要写一些封装代码。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1603713349,"ip_address":"","comment_id":255789,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"老师请教个问题，数据库本身就有实现丰富的锁机制，锁管理，死锁检测，锁超时处理，这里设计乐观锁，还有悲观锁时，都把这部分逻辑放到应用侧去实现，而不是DB里实现，是因为DB不容易水平扩容以及DB锁代价高的原因吗？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507837,"discussion_content":"数据库内部的锁，是为了解决数据库内部的并发控制而设计的，它并不能直接应用到数据库以外的场景。为了支持业务上一些需要锁机制的场景，某些数据库也对外提供一些锁机制。这两类锁是面向不同场景的锁。\n\n而业务上一些需要锁机制的场景，可以借助数据库表所对外提供的一些锁机制，来实现乐观锁和悲观锁。当然，除了数据库依赖，redis或者zookeeper之类也提供锁机制。另外，除了锁的具体底层实现以外，一般业务端还要写一些封装代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603713349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281005,"user_name":"tenyears","can_delete":false,"product_type":"c3","uid":1855229,"ip_address":"","ucode":"0CACA3D408FBBE","user_header":"https://static001.geekbang.org/account/avatar/00/1c/4e/fd/bce64518.jpg","comment_is_top":false,"comment_ctime":1614522475,"is_pvip":false,"replies":[{"id":102212,"content":"对于分布式锁场景，中大型互联网公司zk用得多，小规模公司redis&#47;DB用得多。因为总体上小规模公司更多，所以我认为redis&#47;DB的使用量更广泛。\n\n打个比方，zk是重量级武器，功能更强大，运维部署成本也高。redis是轻量级武器，功能只能算够用，但是运维部署成本低。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1614787027,"ip_address":"","comment_id":281005,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"请假下波波老师企业中用的分布式锁zk 实现用的多还是redis 用的多？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516273,"discussion_content":"对于分布式锁场景，中大型互联网公司zk用得多，小规模公司redis/DB用得多。因为总体上小规模公司更多，所以我认为redis/DB的使用量更广泛。\n\n打个比方，zk是重量级武器，功能更强大，运维部署成本也高。redis是轻量级武器，功能只能算够用，但是运维部署成本低。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614787027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255787,"user_name":"what if","can_delete":false,"product_type":"c3","uid":1353380,"ip_address":"","ucode":"A47E207894810B","user_header":"https://static001.geekbang.org/account/avatar/00/14/a6/a4/902eb4db.jpg","comment_is_top":false,"comment_ctime":1603432181,"is_pvip":false,"replies":[{"id":93419,"content":"有点类似","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1603711624,"ip_address":"","comment_id":255787,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"悲观锁里的栅栏令牌，看上去就是基于版本号的乐观锁: )","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507835,"discussion_content":"有点类似","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603711624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":321469,"user_name":"Sam Fu","can_delete":false,"product_type":"c3","uid":1112676,"ip_address":"","ucode":"EA285A4943271F","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/64/457325e6.jpg","comment_is_top":false,"comment_ctime":1636891044,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"这里面的乐观锁机制很好用。尤其是在状态机更新的时候，校验更新时数据库中中的状态必须等于预期的状态，否则更新失败。","like_count":2},{"had_liked":false,"id":361587,"user_name":"九时四","can_delete":false,"product_type":"c3","uid":1670963,"ip_address":"北京","ucode":"92DCC2DF3DD15C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/zGUSFibP0OGFW9a3QSic1DZLr5B4kPoNmt3RibzLNYSOxN3mUZibBMkGHpwcYPFYWJ7v61wsMvyIKzpBuQJWD2hVOg/132","comment_is_top":false,"comment_ctime":1667656950,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"栅栏令牌锁场景:如果微服务1比微服务2提前更新数据,还是有问题啊,怎么保证只更新一次?","like_count":1,"discussions":[{"author":{"id":1390097,"avatar":"https://static001.geekbang.org/account/avatar/00/15/36/11/8d6919a3.jpg","nickname":"🚀Want","note":"","ucode":"F1732E6492024E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629555,"discussion_content":"我也觉得，如果是多次更新数据库的任务，就有问题了。只做一次更新操作的可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697259074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262634,"user_name":"丁小明","can_delete":false,"product_type":"c3","uid":1207622,"ip_address":"","ucode":"CC23857B8D75D5","user_header":"https://static001.geekbang.org/account/avatar/00/12/6d/46/e16291f8.jpg","comment_is_top":false,"comment_ctime":1605787908,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"还可以通过一种watch dog的机制，业务方主动续约延长过期时间，不过这种机制无法应对gc导致的jvm卡顿导致延期的问题。","like_count":1}]}