{"id":144221,"title":"43 | 如何构建自己的Flutter混合开发框架（一）？","content":"<p>你好，我是陈航。在本次课程的最后一个主题里，我来和你聊聊如何设计自己的Flutter混合开发框架。</p><p>所谓混合开发，是指在App的整体架构继续使用原生技术栈的基础上，将Flutter运行环境嵌入到原生App工程中：由原生开发人员为Flutter运行提供宿主容器及基础能力支撑，而Flutter开发人员则负责应用层业务及App内大部分渲染工作。</p><p>这种开发模式的好处十分明显。对于工程师而言，跨平台的Flutter框架减少了对底层环境的依赖，使用完整的技术栈和工具链隔离了各个终端系统的差异，无论是Android、iOS甚至是前端工程师，都可以使用统一而标准化的能力进行业务开发，从而扩充了技能栈。而对于企业而言，这种方式不仅具备了原生App良好的用户体验，以及丰富的底层能力，还同时拥有了跨平台技术开发低成本和多端体验一致性的优势，直接节省研发资源。</p><p>那么，在原生工程中引入Flutter混合开发能力，我们应该如何设计工程架构，原生开发与Flutter开发的工作模式又是怎样的呢？</p><p>接下来，在今天的分享中，我会着重为你介绍这两个主题设计思路和建设方向；而在下一次分享中，我则会通过一个实际的案例，与你详细说明在业务落地中，我们需要重点考虑哪些技术细节，这样你在为自己的原生工程中设计混合开发框架时也就有迹可循了。</p><!-- [[[read_end]]] --><h2>混合开发架构</h2><p>在<a href=\"https://time.geekbang.org/column/article/144121\">第41篇文章</a>中，我与你介绍了软件功能分治的两种手段，即组件化和平台化，以及如何在满足单向依赖原则的前提下，以分层的形式将软件功能进行分类聚合的方法。这些设计思想，能够让我们在设计软件系统架构时，降低整体工程的复杂性，提高App的可扩展性和可维护性。</p><p>与纯Flutter工程能够以自治的方式去分拆软件功能、管理工程依赖不同，<strong>Flutter混合工程的功能分治</strong>需要原生工程与Flutter工程一起配合完成，即：在Flutter模块的视角看来，一部分与渲染相关的基础能力完全由Flutter代码实现，而另一部分涉及操作系统底层、业务通用能力部分，以及整体应用架构支撑，则需要借助于原生工程给予支持。</p><p>在第41篇文章中，我们通过四象限分析法，把纯Flutter应用按照业务和UI分解成4类。同样的，混合工程的功能单元也可以按照这个分治逻辑分为4个维度，即不具备业务属性的原生基础功能、不具备业务属性的原生UI控件、不具备UI属性的原生基础业务功能和带UI属性的独立业务模块。</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/4f/c49f49bd45b4f1ff2137f2a04539d84f.png?wh=836*712\" alt=\"\"></p><center><span class=\"reference\">图1 四象限分析法</span></center><p>从图中可以看到，对于前3个维度（即原生UI控件、原生基础功能、原生基础业务功能）的定义，纯Flutter工程与混合工程并无区别，只不过实现方式由Flutter变成了原生；对于第四个维度（即独立业务模块）的功能归属，考虑到业务模块的最小单元是页面，而Flutter的最终呈现形式也是独立的页面，因此我们把Flutter模块也归为此类，我们的工程可以像依赖原生业务模块一样直接依赖它，为用户提供独立的业务功能。</p><p>我们把这些组件及其依赖按照从上到下的方式进行划分，就是一个完整的混合开发架构了。可以看到，原生工程和Flutter工程的边界定义清晰，双方都可以保持原有的分层管理依赖的开发模式不变。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/cd/e79fe918939247337e9b474a79ad84cd.png?wh=2180*1244\" alt=\"\"></p><center><span class=\"reference\">图2 Flutter混合开发架构</span></center><p>需要注意的是，作为一个内嵌在原生工程的功能组件，Flutter模块的运行环境是由原生工程提供支持的，这也就意味着在渲染交互能力之外的部分基础功能（比如网络、存储），以及和原生业务共享的业务通用能力（比如支付、账号）需要原生工程配合完成，即原生工程以分层的形式提供上层调用接口，Flutter模块以插件的形式直接访问原生代码宿主对应功能实现。</p><p>因此，不仅不同归属定义的原生组件之前存在着分层依赖的关系，Flutter模块与原生组件之前也隐含着分层依赖的关系。比如，Flutter模块中处于基础业务模块的账号插件，依赖位于原生基础业务模块中的账号功能；Flutter模块中处于基础业务模块的网络插件，依赖位于原生基础功能的网络引擎。</p><p>可以看到，在混合工程架构中，像原生工程依赖Flutter模块、Flutter模块又依赖原生工程这样跨技术栈的依赖管理行为，我们实际上是通过<strong>将双方抽象为彼此对应技术栈的依赖，从而实现分层管理</strong>的：即将原生对Flutter的依赖抽象为依赖Flutter模块所封装的原生组件，而Flutter对原生的依赖则抽象为依赖插件所封装的原生行为。</p><h2>Flutter混合开发工作流</h2><p>对于软件开发而言，工程师的职责涉及从需求到上线的整个生命周期，包含需求阶段-&gt;方案阶段-&gt;开发阶段-&gt;发布阶段-&gt;线上运维阶段。可以看出，这其实就是一种抽象的工作流程。</p><p>其中，<strong>和工程化关联最为紧密的是开发阶段和发布阶段</strong>。我们将工作流中和工程开发相关的部分抽离，定义为开发工作流，根据生命周期中关键节点和高频节点，可以将整个工作流划分为如下七个阶段，即初始化-&gt;开发/调试-&gt;构建-&gt;测试-&gt;发布-&gt;集成-&gt;原生工具链：</p><p><img src=\"https://static001.geekbang.org/resource/image/81/0d/819e4a250478ddba6a0b51badf1ad20d.png?wh=1556*872\" alt=\"\"></p><center><span class=\"reference\">图3 Flutter混合开发工作流</span></center><p>前6个阶段是Flutter的标准工作流，最后一个阶段是原生开发的标准工作流。</p><p>可以看到，<strong>在混合开发工作模式中，Flutter的开发模式与原生开发模式之间有着清晰的分工边界</strong>：Flutter模块是原生工程的上游，其最终产物是原生工程依赖。从原生工程视角看，其开发模式与普通原生应用并无区别，因此这里就不再赘述了，我们<strong>重点讨论Flutter开发模式</strong>。</p><p>对于Flutter标准工作流的6个阶段而言，每个阶段都会涉及业务或产品特性提出的特异性要求，技术方案的选型，各阶段工作成本可用性、可靠性的衡量，以及监控相关基础服务的接入和配置等。</p><p>每件事儿都是一个固定的步骤，而当开发规模随着文档、代码、需求增加时，我们会发现重复的步骤越来越多。此时，<strong>如果我们把这些步骤像抽象代码一样，抽象出一些相同操作，就可以大大提升开发效率。</strong></p><p>优秀的程序员会发掘工作中的问题，从中探索提高生产力的办法，而<strong>转变思维模式就是一个不错的起点</strong>。以持续交付的指导思想来看待这些问题，我们希望整体方案能够以可重复、可配置化的形式，来保障整个工作流的开发体验、效率、稳定性和可靠性，而这些都离不开Flutter对命令行工具支持。</p><p>比如，对于测试阶段的Dart代码分析，我们可以使用flutter analyze命令对代码中可能存在的语法或语义问题进行检查；又比如，在发布期的package发布环节，我们可以使用flutter packages pub publish --dry-run命令对待发布的包进行发布前检查，确认无误后使用去掉dry-run参数的publish命令将包提交至Pub站点。</p><p>这些基本命令对各个开发节点的输入、输出以及执行过程进行了抽象，熟练掌握它们及对应的扩展参数用法，我们不仅可以在本地开发时打造一个易用便捷的工程开发环境，还可以将这些命令部署到云端，实现工程构建及部署的自动化。</p><p>我把这六个阶段涉及的关键命令总结为了一张表格，你可以结合这张表格，体会落实在具体实现中的Flutter标准工作流。</p><center><span class=\"reference\">表1 Flutter标准工作流命令</span></center><p><img src=\"https://static001.geekbang.org/resource/image/ce/5c/ce14569558ffc149a361c2993c54025c.png?wh=1694*1712\" alt=\"\"></p><h2>总结</h2><p>对于Flutter混合开发而言，如何处理好原生与Flutter之间的关系，需要从工程架构与工作模式上定义清晰的分工边界。</p><p>在架构层面，将Flutter模块定义为原生工程的独立业务层，以原生基础业务层向Flutter模块提供业务通用能力、原生基础能力层向Flutter模块提供基础功能支持这样的方式去分层管理依赖。</p><p>在工作模式层面，将作为原生工程上游的Flutter模块开发，抽象为原生依赖产物的工程管理，并提炼出对应的工作流，以可重复、配置化的命令行方式对各个阶段进行统一管理。</p><p>可以看到，在原生App工程中引入Flutter运行环境，由原生开发主做应用架构和基础能力赋能、Flutter开发主做应用层业务的混合开发协作方式，能够综合原生App与Flutter框架双方的特点和优势，不仅可以直接节省研发资源，也符合目前行业人才能力模型的发展趋势。</p><h2>思考题</h2><p>除了工程依赖之外，我们还需要管理Flutter SDK自身的依赖。考虑到Flutter SDK升级非常频繁，对于多人协作的团队模式中，如何保证每个人使用的Flutter SDK版本完全一致呢？</p><p>欢迎你在评论区给我留言分享你的观点，我会在下一篇文章中等待你！感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":302087,"user_name":"karisli","can_delete":false,"product_type":"c1","uid":1506399,"ip_address":"","ucode":"14E9118FAA3327","user_header":"https://static001.geekbang.org/account/avatar/00/16/fc/5f/439a96cd.jpg","comment_is_top":false,"comment_ctime":1626074887,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5921042183","product_id":100031001,"comment_content":"flutter混合原生交互的话需要对传递的数据进行编码解码，那如果通信频繁的话会不会有什么性能问题呀，比如用flutter来开发相册页面，使用native来上传要备份的文件，上传完成之后让通知lutter来显示。","like_count":1},{"had_liked":false,"id":328763,"user_name":"Marco","can_delete":false,"product_type":"c1","uid":1397516,"ip_address":"","ucode":"796A4B9D1DE55D","user_header":"https://static001.geekbang.org/account/avatar/00/15/53/0c/b4907516.jpg","comment_is_top":false,"comment_ctime":1640870272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640870272","product_id":100031001,"comment_content":"我们网络请求需要调一个native的库对报文加密，那flutter每次请求多得先跟native通信一次，会不会有性能问题","like_count":0},{"had_liked":false,"id":285123,"user_name":"许凯","can_delete":false,"product_type":"c1","uid":1604645,"ip_address":"","ucode":"4F11AD41CB0244","user_header":"https://static001.geekbang.org/account/avatar/00/18/7c/25/70134099.jpg","comment_is_top":false,"comment_ctime":1616634299,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1616634299","product_id":100031001,"comment_content":"想请问下，混合开发的项目，发布debug版本时几个安卓手机上都是运行正常的，但是release版本就会出现有的按钮没法点按和闪退的情况，不知道这种情况应该如何排查解决","like_count":0},{"had_liked":false,"id":197048,"user_name":"甘陵笑笑生","can_delete":false,"product_type":"c1","uid":1028570,"ip_address":"","ucode":"9F9D60CFEB73DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b1/da/88197585.jpg","comment_is_top":false,"comment_ctime":1585353399,"is_pvip":true,"discussion_count":6,"race_medal":0,"score":"1585353399","product_id":100031001,"comment_content":"有没有完全使用Flutter开发的独立App，不需要iOS和Android人员的参与","like_count":0,"discussions":[{"author":{"id":1331611,"avatar":"https://static001.geekbang.org/account/avatar/00/14/51/9b/ccea47d9.jpg","nickname":"安迪密恩","note":"","ucode":"A6F3F67CF8E6F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293559,"discussion_content":"ios不参与安装包都打不出来（指自己）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595580975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1054958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","nickname":"ABC","note":"","ucode":"7501AD9C0C4A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335196,"discussion_content":"来一台mac笔记本电脑就可以搞定全流程了。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608113885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1028570,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b1/da/88197585.jpg","nickname":"甘陵笑笑生","note":"","ucode":"9F9D60CFEB73DD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1054958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","nickname":"ABC","note":"","ucode":"7501AD9C0C4A70","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336093,"discussion_content":"不懂ios和androi就想跨平台 目标远大 但不现实 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608475353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335196,"ip_address":""},"score":336093,"extra":""},{"author":{"id":1054958,"avatar":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","nickname":"ABC","note":"","ucode":"7501AD9C0C4A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1028570,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b1/da/88197585.jpg","nickname":"甘陵笑笑生","note":"","ucode":"9F9D60CFEB73DD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":336273,"discussion_content":"android懂，ios略懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608543219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":336093,"ip_address":""},"score":336273,"extra":""}]},{"author":{"id":1459289,"avatar":"https://static001.geekbang.org/account/avatar/00/16/44/59/9cc7d8cd.jpg","nickname":"毛成方","note":"","ucode":"DFBF3D464D8D7C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300925,"discussion_content":"兄弟 目标伟大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598322082,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1911871,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/rRCSdTPyqWdJkIdySLkRpKDkg6oXhGibbCsMVEBVumXZbWGHNW1dwVjAeazeTOukiauJxH9mB8dQM681Kbe7kVRA/132","nickname":"王文亮","note":"","ucode":"109317BB185796","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229179,"discussion_content":"对于上线应用的app而言 目前不现实，毕竟社区没有完全发展起来，目前rn也只是勉强能达到这种要求；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586614062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176197,"user_name":"IF-Processing","can_delete":false,"product_type":"c1","uid":1205736,"ip_address":"","ucode":"8298C3C9320D94","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/e8/d1e52dbb.jpg","comment_is_top":false,"comment_ctime":1580985786,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1580985786","product_id":100031001,"comment_content":"如果有一个项目是H5的，而其展示的内容，又与业务深度耦合，其中很多页面甚至是后台生成出来的，在这种场景下，我们利用flutter是否可以实现部分页面（由后台展示的页面）用类似Browser这类的Widget显示，而其他的使用Flutter进行改造呢？如果可以，求思路与可能的坑点","like_count":0,"discussions":[{"author":{"id":1911871,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/rRCSdTPyqWdJkIdySLkRpKDkg6oXhGibbCsMVEBVumXZbWGHNW1dwVjAeazeTOukiauJxH9mB8dQM681Kbe7kVRA/132","nickname":"王文亮","note":"","ucode":"109317BB185796","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229189,"discussion_content":"您这个挺难的，首先要后台生成的页面用webview来承载，目前flutter的webview不是很完善，最好可以用原生的webview以组件的形式封装成普通的widget，这样可以避开android ios的原生页面 同时提高webview的定制行，还不影响flutter本身的路由；\n其他的h5页面可以由flutter来改造，但是需要app完全重构完了才能上线，估计领导是不会同意的，除非 公司不差钱；循序渐进的迁移业务也可以，路由是一个大问题，还有就是h5也flutter的通信要设计好  不然 会做废；我们以前用rn重构h5 还和android ios原生同时混合重构，那叫个酸爽，一辈子都忘不了的那种","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586614511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205736,"avatar":"https://static001.geekbang.org/account/avatar/00/12/65/e8/d1e52dbb.jpg","nickname":"IF-Processing","note":"","ucode":"8298C3C9320D94","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":229480,"discussion_content":"多谢指点迷津，我考虑下换换思路，目前这个app的性能实在让我头疼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586656284,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160798,"user_name":"JW","can_delete":false,"product_type":"c1","uid":1180823,"ip_address":"","ucode":"1078B9415C1176","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/97/80740db0.jpg","comment_is_top":false,"comment_ctime":1576033629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576033629","product_id":100031001,"comment_content":"太抽象不容易懂，要多看几遍。","like_count":0},{"had_liked":false,"id":146064,"user_name":"和小胖","can_delete":false,"product_type":"c1","uid":1180727,"ip_address":"","ucode":"406BD7AB987EBF","user_header":"https://static001.geekbang.org/account/avatar/00/12/04/37/aa04f997.jpg","comment_is_top":false,"comment_ctime":1572427704,"is_pvip":false,"replies":[{"id":"58825","content":"是的，参考18篇分享，把flutter和dart sdk的版本固定就好","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1574164703,"ip_address":"","comment_id":146064,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1572427704","product_id":100031001,"comment_content":"思考题，我觉得本意还是如何维持一个 flutter 项目中每个开发人员依赖的统一，因为最终它是要打出一个 aar 这类的文件给原生使用的，所以最后问题就成了如何保证每个开发人员的 pubspec.yaml 中的配置都一致了。","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472695,"discussion_content":"是的，参考18篇分享，把flutter和dart sdk的版本固定就好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574164703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1050185,"avatar":"https://static001.geekbang.org/account/avatar/00/10/06/49/ed603d6f.jpg","nickname":"尼古拉斯.球哥","note":"","ucode":"BEA1FE7F88CC91","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41867,"discussion_content":"*斌，明天早上来趟 FF前台","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572525558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1180727,"avatar":"https://static001.geekbang.org/account/avatar/00/12/04/37/aa04f997.jpg","nickname":"和小胖","note":"","ucode":"406BD7AB987EBF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1050185,"avatar":"https://static001.geekbang.org/account/avatar/00/10/06/49/ed603d6f.jpg","nickname":"尼古拉斯.球哥","note":"","ucode":"BEA1FE7F88CC91","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41916,"discussion_content":"球哥，你认错人了，嘿嘿。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572531537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41867,"ip_address":""},"score":41916,"extra":""}]}]},{"had_liked":false,"id":138872,"user_name":"Bojack","can_delete":false,"product_type":"c1","uid":1251080,"ip_address":"","ucode":"A57E552845DB28","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoLw2qjwoaVCDq8BqCcXOibyTG3rxiaJlDy2lt62IkiaDrrHeVwq4Pe8RpBbYJTIiadyicZ7InBCLCjJtQ/132","comment_is_top":false,"comment_ctime":1570496479,"is_pvip":false,"replies":[{"id":"53538","content":"这一节主要是讲概念，demo下一节有","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1570522136,"ip_address":"","comment_id":138872,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1570496479","product_id":100031001,"comment_content":"这里能给一个demo吗？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469679,"discussion_content":"这一节主要是讲概念，demo下一节有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570522136,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}