{"id":148148,"title":"28 | I/O多路复用进阶：子线程使用poll处理连接I/O事件","content":"<p>你好，我是盛延敏，这里是网络编程实战第28讲，欢迎回来。</p><p>在前面的第27讲中，我们引入了reactor反应堆模式，并且让reactor反应堆同时分发Acceptor上的连接建立事件和已建立连接的I/O事件。</p><p>我们仔细想想这种模式，在发起连接请求的客户端非常多的情况下，有一个地方是有问题的，那就是单reactor线程既分发连接建立，又分发已建立连接的I/O，有点忙不过来，在实战中的表现可能就是客户端连接成功率偏低。</p><p>再者，新的硬件技术不断发展，多核多路CPU已经得到极大的应用，单reactor反应堆模式看着大把的CPU资源却不用，有点可惜。</p><p>这一讲我们就将acceptor上的连接建立事件和已建立连接的I/O事件分离，形成所谓的主-从reactor模式。</p><h2>主-从reactor模式</h2><p>下面的这张图描述了主-从reactor模式是如何工作的。</p><p>主-从这个模式的核心思想是，主反应堆线程只负责分发Acceptor连接建立，已连接套接字上的I/O事件交给sub-reactor负责分发。其中sub-reactor的数量，可以根据CPU的核数来灵活设置。</p><p>比如一个四核CPU，我们可以设置sub-reactor为4。相当于有4个身手不凡的反应堆线程同时在工作，这大大增强了I/O分发处理的效率。而且，同一个套接字事件分发只会出现在一个反应堆线程中，这会大大减少并发处理的锁开销。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/92/2a/9269551b14c51dc9605f43d441c5a92a.png?wh=1026*1108\" alt=\"\"><br>\n我来解释一下这张图，我们的主反应堆线程一直在感知连接建立的事件，如果有连接成功建立，主反应堆线程通过accept方法获取已连接套接字，接下来会按照一定的算法选取一个从反应堆线程，并把已连接套接字加入到选择好的从反应堆线程中。</p><p>主反应堆线程唯一的工作，就是调用accept获取已连接套接字，以及将已连接套接字加入到从反应堆线程中。不过，这里还有一个小问题，主反应堆线程和从反应堆线程，是两个不同的线程，如何把已连接套接字加入到另外一个线程中呢？更令人沮丧的是，此时从反应堆线程或许处于事件分发的无限循环之中，在这种情况下应该怎么办呢？</p><p>我在这里先卖个关子，这是高性能网络程序框架要解决的问题。在实战篇里，我将为这些问题一一解开答案。</p><h2>主-从reactor+worker threads模式</h2><p>如果说主-从reactor模式解决了I/O分发的高效率问题，那么work threads就解决了业务逻辑和I/O分发之间的耦合问题。把这两个策略组装在一起，就是实战中普遍采用的模式。大名鼎鼎的Netty，就是把这种模式发挥到极致的一种实现。不过要注意Netty里面提到的worker线程，其实就是我们这里说的从reactor线程，并不是处理具体业务逻辑的worker线程。</p><p>下面贴的一段代码就是常见的Netty初始化代码，这里Boss  Group就是acceptor主反应堆，workerGroup就是从反应堆。而处理业务逻辑的线程，通常都是通过使用Netty的程序开发者进行设计和定制，一般来说，业务逻辑线程需要从workerGroup线程中分离，以便支持更高的并发度。</p><pre><code>public final class TelnetServer {\n    static final int PORT = Integer.parseInt(System.getProperty(&quot;port&quot;, SSL? &quot;8992&quot; : &quot;8023&quot;));\n\n    public static void main(String[] args) throws Exception {\n        //产生一个reactor线程，只负责accetpor的对应处理\n        EventLoopGroup bossGroup = new NioEventLoopGroup(1);\n        //产生一个reactor线程，负责处理已连接套接字的I/O事件分发\n        EventLoopGroup workerGroup = new NioEventLoopGroup(1);\n        try {\n           //标准的Netty初始，通过serverbootstrap完成线程池、channel以及对应的handler设置，注意这里讲bossGroup和workerGroup作为参数设置\n            ServerBootstrap b = new ServerBootstrap();\n            b.group(bossGroup, workerGroup)\n             .channel(NioServerSocketChannel.class)\n             .handler(new LoggingHandler(LogLevel.INFO))\n             .childHandler(new TelnetServerInitializer(sslCtx));\n\n            //开启两个reactor线程无限循环处理\n            b.bind(PORT).sync().channel().closeFuture().sync();\n        } finally {\n            bossGroup.shutdownGracefully();\n            workerGroup.shutdownGracefully();\n        }\n    }\n}\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/1e/b4/1e647269a5f51497bd5488b2a44444b4.png?wh=3340*6055\" alt=\"\"><br>\n这张图解释了主-从反应堆下加上worker线程池的处理模式。</p><p>主-从反应堆跟上面介绍的做法是一样的。和上面不一样的是，这里将decode、compute、encode等CPU密集型的工作从I/O线程中拿走，这些工作交给worker线程池来处理，而且这些工作拆分成了一个个子任务进行。encode之后完成的结果再由sub-reactor的I/O线程发送出去。</p><h2>样例程序</h2><pre><code>#include &lt;lib/acceptor.h&gt;\n#include &quot;lib/common.h&quot;\n#include &quot;lib/event_loop.h&quot;\n#include &quot;lib/tcp_server.h&quot;\n\nchar rot13_char(char c) {\n    if ((c &gt;= 'a' &amp;&amp; c &lt;= 'm') || (c &gt;= 'A' &amp;&amp; c &lt;= 'M'))\n        return c + 13;\n    else if ((c &gt;= 'n' &amp;&amp; c &lt;= 'z') || (c &gt;= 'N' &amp;&amp; c &lt;= 'Z'))\n        return c - 13;\n    else\n        return c;\n}\n\n//连接建立之后的callback\nint onConnectionCompleted(struct tcp_connection *tcpConnection) {\n    printf(&quot;connection completed\\n&quot;);\n    return 0;\n}\n\n//数据读到buffer之后的callback\nint onMessage(struct buffer *input, struct tcp_connection *tcpConnection) {\n    printf(&quot;get message from tcp connection %s\\n&quot;, tcpConnection-&gt;name);\n    printf(&quot;%s&quot;, input-&gt;data);\n\n    struct buffer *output = buffer_new();\n    int size = buffer_readable_size(input);\n    for (int i = 0; i &lt; size; i++) {\n        buffer_append_char(output, rot13_char(buffer_read_char(input)));\n    }\n    tcp_connection_send_buffer(tcpConnection, output);\n    return 0;\n}\n\n//数据通过buffer写完之后的callback\nint onWriteCompleted(struct tcp_connection *tcpConnection) {\n    printf(&quot;write completed\\n&quot;);\n    return 0;\n}\n\n//连接关闭之后的callback\nint onConnectionClosed(struct tcp_connection *tcpConnection) {\n    printf(&quot;connection closed\\n&quot;);\n    return 0;\n}\n\nint main(int c, char **v) {\n    //主线程event_loop\n    struct event_loop *eventLoop = event_loop_init();\n\n    //初始化acceptor\n    struct acceptor *acceptor = acceptor_init(SERV_PORT);\n\n    //初始tcp_server，可以指定线程数目，这里线程是4，说明是一个acceptor线程，4个I/O线程，没一个I/O线程\n    //tcp_server自己带一个event_loop\n    struct TCPserver *tcpServer = tcp_server_init(eventLoop, acceptor, onConnectionCompleted, onMessage,\n                                                  onWriteCompleted, onConnectionClosed, 4);\n    tcp_server_start(tcpServer);\n\n    // main thread for acceptor\n    event_loop_run(eventLoop);\n}\n</code></pre><p>我们的样例程序几乎和第27讲的一样，唯一的不同是在创建TCPServer时，线程的数量设置不再是0，而是4。这里线程是4，说明是一个主acceptor线程，4个从reactor线程，每一个线程都跟一个event_loop一一绑定。</p><p>你可能会问，这么简单就完成了主、从线程的配置？</p><p>答案是YES。这其实是设计框架需要考虑的地方，一个框架不仅要考虑性能、扩展性，也需要考虑可用性。可用性部分就是程序开发者如何使用框架。如果我是一个开发者，我肯定关心框架的使用方式是不是足够方便，配置是不是足够灵活等。</p><p>像这里，可以根据需求灵活地配置主、从反应堆线程，就是一个易用性的体现。当然，因为时间有限，我没有考虑woker线程的部分，这部分其实应该是应用程序自己来设计考虑。网络编程框架通过回调函数暴露了交互的接口，这里应用程序开发者完全可以在onMessage方法里面获取一个子线程来处理encode、compute和encode的工作，像下面的示范代码一样。</p><pre><code>//数据读到buffer之后的callback\nint onMessage(struct buffer *input, struct tcp_connection *tcpConnection) {\n    printf(&quot;get message from tcp connection %s\\n&quot;, tcpConnection-&gt;name);\n    printf(&quot;%s&quot;, input-&gt;data);\n    //取出一个线程来负责decode、compute和encode\n    struct buffer *output = thread_handle(input);\n    //处理完之后再通过reactor I/O线程发送数据\n    tcp_connection_send_buffer(tcpConnection, output);\n    return \n</code></pre><h2>样例程序结果</h2><p>我们启动这个服务器端程序，你可以从服务器端的输出上看到使用了poll作为事件分发方式。</p><p>多打开几个telnet客户端交互，main-thread只负责新的连接建立，每个客户端数据的收发由不同的子线程Thread-1、Thread-2、Thread-3和Thread-4来提供服务。</p><p>这里由于使用了子线程进行I/O处理，主线程可以专注于新连接处理，从而大大提高了客户端连接成功率。</p><pre><code>$./poll-server-multithreads\n[msg] set poll as dispatcher\n[msg] add channel fd == 4, main thread\n[msg] poll added channel fd==4\n[msg] set poll as dispatcher\n[msg] add channel fd == 7, main thread\n[msg] poll added channel fd==7\n[msg] event loop thread init and signal, Thread-1\n[msg] event loop run, Thread-1\n[msg] event loop thread started, Thread-1\n[msg] set poll as dispatcher\n[msg] add channel fd == 9, main thread\n[msg] poll added channel fd==9\n[msg] event loop thread init and signal, Thread-2\n[msg] event loop run, Thread-2\n[msg] event loop thread started, Thread-2\n[msg] set poll as dispatcher\n[msg] add channel fd == 11, main thread\n[msg] poll added channel fd==11\n[msg] event loop thread init and signal, Thread-3\n[msg] event loop thread started, Thread-3\n[msg] set poll as dispatcher\n[msg] event loop run, Thread-3\n[msg] add channel fd == 13, main thread\n[msg] poll added channel fd==13\n[msg] event loop thread init and signal, Thread-4\n[msg] event loop run, Thread-4\n[msg] event loop thread started, Thread-4\n[msg] add channel fd == 5, main thread\n[msg] poll added channel fd==5\n[msg] event loop run, main thread\n[msg] get message channel i==1, fd==5\n[msg] activate channel fd == 5, revents=2, main thread\n[msg] new connection established, socket == 14\nconnection completed\n[msg] get message channel i==0, fd==7\n[msg] activate channel fd == 7, revents=2, Thread-1\n[msg] wakeup, Thread-1\n[msg] add channel fd == 14, Thread-1\n[msg] poll added channel fd==14\n[msg] get message channel i==1, fd==14\n[msg] activate channel fd == 14, revents=2, Thread-1\nget message from tcp connection connection-14\nfasfas\n[msg] get message channel i==1, fd==14\n[msg] activate channel fd == 14, revents=2, Thread-1\nget message from tcp connection connection-14\nfasfas\nasfa\n[msg] get message channel i==1, fd==5\n[msg] activate channel fd == 5, revents=2, main thread\n[msg] new connection established, socket == 15\nconnection completed\n[msg] get message channel i==0, fd==9\n[msg] activate channel fd == 9, revents=2, Thread-2\n[msg] wakeup, Thread-2\n[msg] add channel fd == 15, Thread-2\n[msg] poll added channel fd==15\n[msg] get message channel i==1, fd==15\n[msg] activate channel fd == 15, revents=2, Thread-2\nget message from tcp connection connection-15\nafasdfasf\n[msg] get message channel i==1, fd==15\n[msg] activate channel fd == 15, revents=2, Thread-2\nget message from tcp connection connection-15\nafasdfasf\nsafsafa\n[msg] get message channel i==1, fd==15\n[msg] activate channel fd == 15, revents=2, Thread-2\n[msg] poll delete channel fd==15\nconnection closed\n[msg] get message channel i==1, fd==5\n[msg] activate channel fd == 5, revents=2, main thread\n[msg] new connection established, socket == 16\nconnection completed\n[msg] get message channel i==0, fd==11\n[msg] activate channel fd == 11, revents=2, Thread-3\n[msg] wakeup, Thread-3\n[msg] add channel fd == 16, Thread-3\n[msg] poll added channel fd==16\n[msg] get message channel i==1, fd==16\n[msg] activate channel fd == 16, revents=2, Thread-3\nget message from tcp connection connection-16\nfdasfasdf\n[msg] get message channel i==1, fd==14\n[msg] activate channel fd == 14, revents=2, Thread-1\n[msg] poll delete channel fd==14\nconnection closed\n[msg] get message channel i==1, fd==5\n[msg] activate channel fd == 5, revents=2, main thread\n[msg] new connection established, socket == 17\nconnection completed\n[msg] get message channel i==0, fd==13\n[msg] activate channel fd == 13, revents=2, Thread-4\n[msg] wakeup, Thread-4\n[msg] add channel fd == 17, Thread-4\n[msg] poll added channel fd==17\n[msg] get message channel i==1, fd==17\n[msg] activate channel fd == 17, revents=2, Thread-4\nget message from tcp connection connection-17\nqreqwrq\n[msg] get message channel i==1, fd==16\n[msg] activate channel fd == 16, revents=2, Thread-3\n[msg] poll delete channel fd==16\nconnection closed\n[msg] get message channel i==1, fd==5\n[msg] activate channel fd == 5, revents=2, main thread\n[msg] new connection established, socket == 18\nconnection completed\n[msg] get message channel i==0, fd==7\n[msg] activate channel fd == 7, revents=2, Thread-1\n[msg] wakeup, Thread-1\n[msg] add channel fd == 18, Thread-1\n[msg] poll added channel fd==18\n[msg] get message channel i==1, fd==18\n[msg] activate channel fd == 18, revents=2, Thread-1\nget message from tcp connection connection-18\nfasgasdg\n^C\n</code></pre><h2>总结</h2><p>本讲主要讲述了主从reactor模式，主从reactor模式中，主reactor只负责连接建立的处理，而把已连接套接字的I/O事件分发交给从reactor线程处理，这大大提高了客户端连接的处理能力。从Netty的实现上来看，也遵循了这一原则。</p><h2>思考题</h2><p>和往常一样，给你留两道思考题：</p><p>第一道，从日志输出中，你还可以看到main-thread首先加入了fd为4的套接字，这个是监听套接字，很好理解。可是这里的main-thread又加入了一个fd为7的套接字，这个套接字是干什么用的呢？</p><p>第二道，你可以试着修改一下服务器端的代码，把decode-compute-encode部分使用线程或者线程池来处理。</p><p>欢迎你在评论区写下你的思考，或者在GitHub上上传修改过的代码，我会和你一起交流，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","neighbors":{"left":{"article_title":"27 | I/O多路复用遇上线程：使用poll单线程处理所有I/O事件","id":146664},"right":{"article_title":"29 | 渐入佳境：使用epoll和多线程模型","id":149204}},"comments":[{"had_liked":false,"id":154950,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1574603944,"is_pvip":false,"replies":[{"id":"60378","content":"总结的很到位，有点惊艳 😁","user_name":"作者回复","comment_id":154950,"uid":"1618647","ip_address":"","utype":1,"ctime":1575186459,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"306517281960","product_id":100032701,"comment_content":"1：阻塞IO+多进程——实现简单，性能一般<br><br>2：阻塞IO+多线程——相比于阻塞IO+多进程，减少了上下文切换所带来的开销，性能有所提高。<br><br>3：阻塞IO+线程池——相比于阻塞IO+多线程，减少了线程频繁创建和销毁的开销，性能有了进一步的提高。<br><br>4：Reactor+线程池——相比于阻塞IO+线程池，采用了更加先进的事件驱动设计思想，资源占用少、效率高、扩展性强，是支持高性能高并发场景的利器。<br><br>5：主从Reactor+线程池——相比于Reactor+线程池，将连接建立事件和已建立连接的各种IO事件分离，主Reactor只负责处理连接事件，从Reactor只负责处理各种IO事件，这样能增加客户端连接的成功率，并且可以充分利用现在多CPU的资源特性进一步的提高IO事件的处理效率。<br><br><br>6：主 - 从Reactor模式的核心思想是，主Reactor线程只负责分发 Acceptor 连接建立，已连接套接字上的 I&#47;O 事件交给 从Reactor 负责分发。其中 sub-reactor 的数量，可以根据 CPU 的核数来灵活设置。","like_count":72,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475621,"discussion_content":"总结的很到位，有点惊艳 😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575186459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205575,"user_name":"ray","can_delete":false,"product_type":"c1","uid":1717235,"ip_address":"","ucode":"10962C711CBC11","user_header":"","comment_is_top":false,"comment_ctime":1586677335,"is_pvip":false,"replies":[{"id":"76807","content":"正如你所说，一般我们这里说的worker都是正经干苦力活的，如encode&#47;decode，业务逻辑等，在网络编程范式下，我们不推荐I&#47;O操作又混在worker线程里面。<br><br>而你提的routine的方式，应该是一种I&#47;O处理的编程方式，当我们使用这样routine的时候，如果有I&#47;O操作，对应的cpu资源被切换回去，实际上又回到了I&#47;O事件驱动的范式。这里的routine本身是被语言自己所封装的I&#47;O事件驱动机制所包装的，你可以认为在这种情况下，语言(如C++&#47;Golang)实现了内生的事件驱动机制，让我们可以直接关注之前的encode&#47;decode和业务逻辑的编码。<br><br>不管技术怎么变化，cpu、线程、事件驱动，这些概念和实现都是实实在在存在的，为了让我们写代码更加的简单和直接，将这些复杂的概念藏在后面，通过新的编程范式来达到这样的目的，是现代程序语言发展的必然。","user_name":"作者回复","comment_id":205575,"uid":"1618647","ip_address":"","utype":1,"ctime":1586681879,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"44536350295","product_id":100032701,"comment_content":"老师您好，<br>如果在worker thread pool里面的thread在执行工作时，又遇到了I&#47;O。是不是也可以在worker thread pool里面加入epoll来轮询？但通常在worker thread里面遇到的I&#47;O应该都已经不是network I&#47;O了，而是sql、读写file、或是向第三方发起api，我不是很确定能否用epoll来处理。<br><br>有在google上查到，worker thread或worker process若遇到I&#47;O，似乎会用一种叫作coroutine的方式来切换cpu的使用权。此种切换方式，不涉及kernel，全是在应用程序做切换。<br><br>这边想请教老师，对在worker thread里面遇到I&#47;O问题时的处理方式或是心得是什么？<br><br>谢谢老师的分享！","like_count":11,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491518,"discussion_content":"正如你所说，一般我们这里说的worker都是正经干苦力活的，如encode/decode，业务逻辑等，在网络编程范式下，我们不推荐I/O操作又混在worker线程里面。\n\n而你提的routine的方式，应该是一种I/O处理的编程方式，当我们使用这样routine的时候，如果有I/O操作，对应的cpu资源被切换回去，实际上又回到了I/O事件驱动的范式。这里的routine本身是被语言自己所封装的I/O事件驱动机制所包装的，你可以认为在这种情况下，语言(如C++/Golang)实现了内生的事件驱动机制，让我们可以直接关注之前的encode/decode和业务逻辑的编码。\n\n不管技术怎么变化，cpu、线程、事件驱动，这些概念和实现都是实实在在存在的，为了让我们写代码更加的简单和直接，将这些复杂的概念藏在后面，通过新的编程范式来达到这样的目的，是现代程序语言发展的必然。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586681879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150536,"user_name":"马不停蹄","can_delete":false,"product_type":"c1","uid":1620168,"ip_address":"","ucode":"9AB66524672291","user_header":"https://static001.geekbang.org/account/avatar/00/18/b8/c8/950fb2c9.jpg","comment_is_top":false,"comment_ctime":1573551304,"is_pvip":false,"replies":[{"id":"58551","content":"Java的封装是非常漂亮，倘若能理解原理，就会更加容易理解它的封装了。","user_name":"作者回复","comment_id":150536,"uid":"1618647","ip_address":"","utype":1,"ctime":1573991244,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"23048387784","product_id":100032701,"comment_content":"学习 netty 的时候了解到 reactor 模式，netty 的 （单 、主从）reactor 可以灵活配置，老师讲的模式真的是和 netty 设计一样 ，这次学习算是真正搞明白了哈哈","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474194,"discussion_content":"Java的封装是非常漂亮，倘若能理解原理，就会更加容易理解它的封装了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573991244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142276,"user_name":"刘系","can_delete":false,"product_type":"c1","uid":1009725,"ip_address":"","ucode":"A772E5BCAE640E","user_header":"","comment_is_top":false,"comment_ctime":1571323970,"is_pvip":false,"replies":[{"id":"55122","content":"我怎么觉的你的结果是对的呢？有可能我文章中贴的信息不够全，造成了一定的误导。","user_name":"作者回复","comment_id":142276,"uid":"1618647","ip_address":"","utype":1,"ctime":1571457394,"user_name_real":"froghui"}],"discussion_count":2,"race_medal":0,"score":"23046160450","product_id":100032701,"comment_content":"老师，我试验了程序，发现有一个问题。<br>服务器程序启动后输出结果与文章中的不一样。<br> .&#47;poll-server-multithreads <br>[msg] set poll as dispatcher, main thread<br>[msg] add channel fd == 4, main thread<br>[msg] poll added channel fd==4, main thread<br>[msg] set poll as dispatcher, Thread-1<br>[msg] add channel fd == 8, Thread-1<br>[msg] poll added channel fd==8, Thread-1<br>[msg] event loop thread init and signal, Thread-1<br>[msg] event loop run, Thread-1<br>[msg] event loop thread started, Thread-1<br>[msg] set poll as dispatcher, Thread-2<br>[msg] add channel fd == 10, Thread-2<br>[msg] poll added channel fd==10, Thread-2<br>[msg] event loop thread init and signal, Thread-2<br>[msg] event loop run, Thread-2<br>[msg] event loop thread started, Thread-2<br>[msg] set poll as dispatcher, Thread-3<br>[msg] add channel fd == 19, Thread-3<br>[msg] poll added channel fd==19, Thread-3<br>[msg] event loop thread init and signal, Thread-3<br>[msg] event loop run, Thread-3<br>[msg] event loop thread started, Thread-3<br>[msg] set poll as dispatcher, Thread-4<br>[msg] add channel fd == 21, Thread-4<br>[msg] poll added channel fd==21, Thread-4<br>[msg] event loop thread init and signal, Thread-4<br>[msg] event loop run, Thread-4<br>[msg] event loop thread started, Thread-4<br>[msg] add channel fd == 6, main thread<br>[msg] poll added channel fd==6, main thread<br>[msg] event loop run, main thread<br>各个子线程启动后创建的套接字对是添加在子线程的eventloop上的，而不是像文章中的全是添加在主线程中。<br>从我阅读代码来看，确实也是添加在子线程中。不知道哪里不对？<br>主线程给子线程下发连接套接字是通过主线程调用event_loop_add_channel_event完成的，当主线程中发现eventloop和自己不是同一个线程，就通过给这个evenloop的套接字对发送一个“a”产生事件唤醒，然后子线程处理pending_channel，实现在子线程中添加连接套接字。<br>","like_count":5,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471056,"discussion_content":"我怎么觉的你的结果是对的呢？有可能我文章中贴的信息不够全，造成了一定的误导。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571457394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2450040,"avatar":"","nickname":"王蓬勃","note":"","ucode":"DDF4CCE9728DCF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540252,"discussion_content":"总算看明白了 这里好复杂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640001334,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239176,"user_name":"Simple life","can_delete":false,"product_type":"c1","uid":1571460,"ip_address":"","ucode":"1902D7F72FB43F","user_header":"https://static001.geekbang.org/account/avatar/00/17/fa/84/f01d203a.jpg","comment_is_top":false,"comment_ctime":1596452920,"is_pvip":false,"replies":[{"id":"89387","content":"非常同意，这里不是使用有误，只是作为一个例子，在线程里统一处理了解码、处理和编码。你的说法是对的。","user_name":"作者回复","comment_id":239176,"uid":"1618647","ip_address":"","utype":1,"ctime":1597636264,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"14481354808","product_id":100032701,"comment_content":"我觉得老师这里onMessage回调中使用线程池方式有误，这里解码，处理，编码是串行操作的，多线程并不能带来性能的提升，主线程还是会阻塞不释放的，我觉得最佳的做法是，解码交给线程池去做，然后返回，解码完成后注册进sub-reactor中再交由下一个业务处理，业务处理，编码同上，实现解耦充分利用多线程","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503012,"discussion_content":"非常同意，这里不是使用有误，只是作为一个例子，在线程里统一处理了解码、处理和编码。你的说法是对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597636264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261582,"user_name":"进击的巨人","can_delete":false,"product_type":"c1","uid":1167120,"ip_address":"","ucode":"DB62D77D460BF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/cf/10/9fa2e5ba.jpg","comment_is_top":false,"comment_ctime":1605429316,"is_pvip":false,"replies":[{"id":"95511","content":"嗯，netty确实是这样设计的，很多东西最后都是殊途同归。","user_name":"作者回复","comment_id":261582,"uid":"1618647","ip_address":"","utype":1,"ctime":1606041999,"user_name_real":"froghui"}],"discussion_count":2,"race_medal":0,"score":"10195363908","product_id":100032701,"comment_content":"Netty的主从reactor分别对应bossGroup和workerGroup，workerGroup处理非accept的io事件，至于业务逻辑是否交给另外的线程池处理，可以理解为netty并没有支持，原因是因为业务逻辑都需要开发者自己自定义提供，但在这点上，netty通过ChannelHandler+pipline提供了io事件和业务逻辑分离的能力，需要开发者添加自定义ChannelHandler，实现io事件到业务逻辑处理的线程分离。","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509526,"discussion_content":"嗯，netty确实是这样设计的，很多东西最后都是殊途同归。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606041999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1066707,"avatar":"https://static001.geekbang.org/account/avatar/00/10/46/d3/e25d104a.jpg","nickname":"êｗěｎ","note":"","ucode":"5000233111BEFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335380,"discussion_content":"可以看下pipline.addLast的api 是支持线程池参数的，可以让业务handler在自定义线程池执行","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1608176802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":214597,"user_name":"疯狂的石头","can_delete":false,"product_type":"c1","uid":1763900,"ip_address":"","ucode":"65CE6EB494FDCA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ea/3c/24cb4bde.jpg","comment_is_top":false,"comment_ctime":1588770682,"is_pvip":false,"replies":[{"id":"79834","content":"最后一个部分会讲这部分的设计，不要晕哈。","user_name":"作者回复","comment_id":214597,"uid":"1618647","ip_address":"","utype":1,"ctime":1589099672,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"10178705274","product_id":100032701,"comment_content":"看老师源码，channel，buffer各种对象，调来调去的，给我调懵了。","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494134,"discussion_content":"最后一个部分会讲这部分的设计，不要晕哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589099672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":185136,"user_name":"绿箭侠","can_delete":false,"product_type":"c1","uid":1528536,"ip_address":"","ucode":"B994F558A98E29","user_header":"https://static001.geekbang.org/account/avatar/00/17/52/d8/123a4981.jpg","comment_is_top":false,"comment_ctime":1583492839,"is_pvip":false,"replies":[{"id":"71666","content":"这个是通过CMake来定义的，通过CMake的check来检验是否enable epoll，这个宏出现在动态生成的头文件中。<br><br># check epoll and add config.h for the macro compilation<br>include(CheckSymbolExists)<br>check_symbol_exists(epoll_create &quot;sys&#47;epoll.h&quot; EPOLL_EXISTS)<br>if (EPOLL_EXISTS)<br>    # Linux下设置为epoll<br>    set(EPOLL_ENABLE 1 CACHE INTERNAL &quot;enable epoll&quot;)<br><br>    # Linux下也设置为poll<br>#    set(EPOLL_ENABLE &quot;&quot; CACHE INTERNAL &quot;not enable epoll&quot;)<br>else ()<br>    set(EPOLL_ENABLE &quot;&quot; CACHE INTERNAL &quot;not enable epoll&quot;)<br>endif ()","user_name":"作者回复","comment_id":185136,"uid":"1618647","ip_address":"","utype":1,"ctime":1583639685,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"5878460135","product_id":100032701,"comment_content":"event_loop.c --- struct event_loop *event_loop_init_with_name(char *thread_name)：<br><br>#ifdef EPOLL_ENABLE<br>    yolanda_msgx(&quot;set epoll as dispatcher, %s&quot;, eventLoop-&gt;thread_name);<br>    eventLoop-&gt;eventDispatcher = &amp;epoll_dispatcher;<br>#else<br>    yolanda_msgx(&quot;set poll as dispatcher, %s&quot;, eventLoop-&gt;thread_name);<br>    eventLoop-&gt;eventDispatcher = &amp;poll_dispatcher;<br>#endif<br>    eventLoop-&gt;event_dispatcher_data = eventLoop-&gt;eventDispatcher-&gt;init(eventLoop);<br><br>没找到 EPOLL_ENABLE 的定义，老师怎么考虑的！！这里的话是否只能在event_loop.h 所包含的头文件中去找定义？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":486262,"discussion_content":"这个是通过CMake来定义的，通过CMake的check来检验是否enable epoll，这个宏出现在动态生成的头文件中。\n\n# check epoll and add config.h for the macro compilation\ninclude(CheckSymbolExists)\ncheck_symbol_exists(epoll_create &amp;quot;sys/epoll.h&amp;quot; EPOLL_EXISTS)\nif (EPOLL_EXISTS)\n    # Linux下设置为epoll\n    set(EPOLL_ENABLE 1 CACHE INTERNAL &amp;quot;enable epoll&amp;quot;)\n\n    # Linux下也设置为poll\n#    set(EPOLL_ENABLE &amp;quot;&amp;quot; CACHE INTERNAL &amp;quot;not enable epoll&amp;quot;)\nelse ()\n    set(EPOLL_ENABLE &amp;quot;&amp;quot; CACHE INTERNAL &amp;quot;not enable epoll&amp;quot;)\nendif ()","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583639685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171066,"user_name":"李朝辉","can_delete":false,"product_type":"c1","uid":1152951,"ip_address":"","ucode":"8E4A4469A77A88","user_header":"https://static001.geekbang.org/account/avatar/00/11/97/b7/d5a83264.jpg","comment_is_top":false,"comment_ctime":1578837256,"is_pvip":false,"replies":[{"id":"68054","content":"接近真相了，后续章节会揭开答案。","user_name":"作者回复","comment_id":171066,"uid":"1618647","ip_address":"","utype":1,"ctime":1580628062,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"5873804552","product_id":100032701,"comment_content":"fd为7的套接字应该是socketpair()调用创建的主-从reactor套接字对中，从reactor线程写，主reactor线程读的套接字，作用的话，个人推测应该是从reactor线程中的连接套接字关闭了（即连接断开了），将这样的事件反馈给主reactor，以通知主reactor线程，我已经准备好接收下一个连接套接字？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481228,"discussion_content":"接近真相了，后续章节会揭开答案。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580628062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171057,"user_name":"李朝辉","can_delete":false,"product_type":"c1","uid":1152951,"ip_address":"","ucode":"8E4A4469A77A88","user_header":"https://static001.geekbang.org/account/avatar/00/11/97/b7/d5a83264.jpg","comment_is_top":false,"comment_ctime":1578834702,"is_pvip":false,"replies":[{"id":"68055","content":"我其实没想这么多，一般而言，worker线程的个数保持和cpu核一致，是一个比较常见的做法，例如nginx。","user_name":"作者回复","comment_id":171057,"uid":"1618647","ip_address":"","utype":1,"ctime":1580628179,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"5873801998","product_id":100032701,"comment_content":"4核cpu，主reactor要占掉一个，只有3个可以分配给从核心。<br>按照老师的说法，是因为主reactor的工作相对比较简单，所以占用内核的时间很少，所以将从reactor分配满，然后最大化对连接套接字的处理能力吗？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481224,"discussion_content":"我其实没想这么多，一般而言，worker线程的个数保持和cpu核一致，是一个比较常见的做法，例如nginx。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580628179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140079,"user_name":"川云","can_delete":false,"product_type":"c1","uid":1265438,"ip_address":"","ucode":"3D56399A7C5BDF","user_header":"https://static001.geekbang.org/account/avatar/00/13/4f/1e/e2b7a9ba.jpg","comment_is_top":false,"comment_ctime":1570802919,"is_pvip":false,"replies":[{"id":"55072","content":"调用poll的代码已经封装在框架中，具体可以看<br>https:&#47;&#47;github.com&#47;froghui&#47;yolanda<br><br>lib&#47;event_dispatcher.h<br>lib&#47;poll_dispatcher.h<br>lib&#47;poll_dispatcher.c","user_name":"作者回复","comment_id":140079,"uid":"1618647","ip_address":"","utype":1,"ctime":1571451206,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"5865770215","product_id":100032701,"comment_content":"可不可以把调用poll代码的位置展示一下","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470236,"discussion_content":"调用poll的代码已经封装在框架中，具体可以看\nhttps://github.com/froghui/yolanda\n\nlib/event_dispatcher.h\nlib/poll_dispatcher.h\nlib/poll_dispatcher.c","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571451206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327238,"user_name":"王蓬勃","can_delete":false,"product_type":"c1","uid":2450040,"ip_address":"","ucode":"DDF4CCE9728DCF","user_header":"","comment_is_top":false,"comment_ctime":1640000321,"is_pvip":false,"replies":[{"id":"119417","content":"这段判断，判断的依据是当前的线程id是event_loop里的记录，是不是一致的。<br>if (!isInSameThread(eventLoop)) {<br>        event_loop_wakeup(eventLoop);<br>    } else {<br>        event_loop_handle_pending_channel(eventLoop);<br>    }","user_name":"作者回复","comment_id":327238,"uid":"1618647","ip_address":"","utype":1,"ctime":1640403369,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1640000321","product_id":100032701,"comment_content":"老师 请问那个event_loop_do_channel_event函数什么时候才进入不是同一个线程的判断中去？看不明白了","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541488,"discussion_content":"这段判断，判断的依据是当前的线程id是event_loop里的记录，是不是一致的。\nif (!isInSameThread(eventLoop)) {\n        event_loop_wakeup(eventLoop);\n    } else {\n        event_loop_handle_pending_channel(eventLoop);\n    }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640403369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320655,"user_name":"这一行，30年","can_delete":false,"product_type":"c1","uid":2238081,"ip_address":"","ucode":"DC9408D1DEC015","user_header":"https://static001.geekbang.org/account/avatar/00/22/26/81/036e6579.jpg","comment_is_top":false,"comment_ctime":1636440885,"is_pvip":true,"replies":[{"id":"116705","content":"你是用什么方法编译的？我的工程统一用CMake编译，应该没问题。<br><br>另外，这里的库都在源代码的lib目录下。","user_name":"作者回复","comment_id":320655,"uid":"1618647","ip_address":"","utype":1,"ctime":1636873835,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1636440885","product_id":100032701,"comment_content":"<br>   <br>#include &lt;lib&#47;acceptor.h&gt;<br>#include &quot;lib&#47;common.h&quot;<br>#include &quot;lib&#47;event_loop.h&quot;<br>#include &quot;lib&#47;tcp_server.h&quot;<br><br>把老师的代码copy过去，这些类库都报错，不用老师引用的宏用什么宏？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530077,"discussion_content":"你是用什么方法编译的？我的工程统一用CMake编译，应该没问题。\n\n另外，这里的库都在源代码的lib目录下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636873835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312599,"user_name":"企鹅","can_delete":false,"product_type":"c1","uid":1498369,"ip_address":"","ucode":"AE29B98E5B4497","user_header":"https://static001.geekbang.org/account/avatar/00/16/dd/01/803f3750.jpg","comment_is_top":false,"comment_ctime":1631885425,"is_pvip":false,"replies":[{"id":"114036","content":"master reactor 反应堆线程，就是主acceptor，这两个意思接近，一个是从设计模式角度，另一个是从程序设计功能角度。","user_name":"作者回复","comment_id":312599,"uid":"1618647","ip_address":"","utype":1,"ctime":1633576022,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1631885425","product_id":100032701,"comment_content":"老师，主reactor只分发acceptor上建立连接的事件，不应该是client-&gt;acceptor -&gt; master reactor么，图上是client-&gt;master reactor-&gt;acceptor这里看晕了","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527040,"discussion_content":"master reactor 反应堆线程，就是主acceptor，这两个意思接近，一个是从设计模式角度，另一个是从程序设计功能角度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633576022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275425,"user_name":"Morton","can_delete":false,"product_type":"c1","uid":1544422,"ip_address":"","ucode":"9D0E7715B0C0AB","user_header":"https://static001.geekbang.org/account/avatar/00/17/90/e6/5eb07352.jpg","comment_is_top":false,"comment_ctime":1611536915,"is_pvip":false,"replies":[{"id":"100426","content":"你说的是一个分法，主要还是看你worker线程干活的多少，最好还是经过实际压测的结果来决定cpu分配比。","user_name":"作者回复","comment_id":275425,"uid":"1618647","ip_address":"","utype":1,"ctime":1612101651,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1611536915","product_id":100032701,"comment_content":"老师，Reactor线程池占用了一部分cpu核，然后worker线程如果用线程池又会占用一部分cpu核，假设8核机器应该怎么分配线程池？reactor占4个worker线程占4个？<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514337,"discussion_content":"你说的是一个分法，主要还是看你worker线程干活的多少，最好还是经过实际压测的结果来决定cpu分配比。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612101651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254236,"user_name":"木子皿","can_delete":false,"product_type":"c1","uid":1242778,"ip_address":"","ucode":"3FDEAFABB4C427","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUzv6S9wroyXaoFIwvC1mdDiav4BVS4BbPTuwtvWibthL5PyMuxFNicY06QJMZicVpib7E88S19nH4I9Q/132","comment_is_top":false,"comment_ctime":1603088906,"is_pvip":false,"replies":[{"id":"95501","content":"先看懂，再试着改","user_name":"作者回复","comment_id":254236,"uid":"1618647","ip_address":"","utype":1,"ctime":1606040775,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1603088906","product_id":100032701,"comment_content":"终于把整个代码流程走通了，太不容易了，不过还只是看得懂，写出来还是很难！","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507326,"discussion_content":"先看懂，再试着改","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606040775,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254147,"user_name":"木子皿","can_delete":false,"product_type":"c1","uid":1242778,"ip_address":"","ucode":"3FDEAFABB4C427","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJUzv6S9wroyXaoFIwvC1mdDiav4BVS4BbPTuwtvWibthL5PyMuxFNicY06QJMZicVpib7E88S19nH4I9Q/132","comment_is_top":false,"comment_ctime":1603071923,"is_pvip":false,"replies":[{"id":"95500","content":"坚持就是胜利 ✌️","user_name":"作者回复","comment_id":254147,"uid":"1618647","ip_address":"","utype":1,"ctime":1606040751,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1603071923","product_id":100032701,"comment_content":"坚持坚持，无数次想放弃！快要结束了！","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507295,"discussion_content":"坚持就是胜利 ✌️","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606040751,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234446,"user_name":"我的名字不叫1988","can_delete":false,"product_type":"c1","uid":1054568,"ip_address":"","ucode":"6833A6EC2FF501","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/68/1592a02d.jpg","comment_is_top":false,"comment_ctime":1594693689,"is_pvip":false,"replies":[{"id":"86812","content":"嗯，我看到了，改起来~","user_name":"作者回复","comment_id":234446,"uid":"1618647","ip_address":"","utype":1,"ctime":1594907726,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1594693689","product_id":100032701,"comment_content":"老师，github上面的源码，lib&#47;poll_dispacher.c文件里面的poll_add、poll_del、poll_update等函数里面的“if (i &gt; INIT_POLL_SIZE)” 判断有问题，因为 for 循环结束之后，i 的可能的最大值为INIT_POLL_SIZE，所以永远不可能大于INIT_POLL_SIZE","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501393,"discussion_content":"嗯，我看到了，改起来~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594907726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222511,"user_name":"jhren","can_delete":false,"product_type":"c1","uid":1596987,"ip_address":"","ucode":"60F7CCEA1E2C88","user_header":"https://static001.geekbang.org/account/avatar/00/18/5e/3b/845fb641.jpg","comment_is_top":false,"comment_ctime":1590824723,"is_pvip":false,"replies":[{"id":"82179","content":"合理啊，客户端也可以事件驱动。","user_name":"作者回复","comment_id":222511,"uid":"1618647","ip_address":"","utype":1,"ctime":1590931447,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1590824723","product_id":100032701,"comment_content":"请问老师，我看见有人在发送端使用httpcomponents I&#47;O reactor，请问合理吗？<br><br>https:&#47;&#47;hc.apache.org&#47;httpcomponents-core-ga&#47;tutorial&#47;html&#47;nio.html#d5e477","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496823,"discussion_content":"合理啊，客户端也可以事件驱动。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590931447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181758,"user_name":"supermouse","can_delete":false,"product_type":"c1","uid":1321860,"ip_address":"","ucode":"88072D5F881827","user_header":"https://static001.geekbang.org/account/avatar/00/14/2b/84/07f0c0d6.jpg","comment_is_top":false,"comment_ctime":1582628988,"is_pvip":false,"replies":[{"id":"71034","content":"channel是一个抽象，表示一个连接通道，有可能是tcp连接，也有可能是内部的一个实现(如sockertpair)，你可以把它和connection做一个有效关联。","user_name":"作者回复","comment_id":181758,"uid":"1618647","ip_address":"","utype":1,"ctime":1583052653,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1582628988","product_id":100032701,"comment_content":"老师，请问能不能说一下上一讲和这一讲的代码中的channel是干什么用的？一直没看明白","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485110,"discussion_content":"channel是一个抽象，表示一个连接通道，有可能是tcp连接，也有可能是内部的一个实现(如sockertpair)，你可以把它和connection做一个有效关联。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583052653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156047,"user_name":"林林","can_delete":false,"product_type":"c1","uid":1613227,"ip_address":"","ucode":"7B6318B971E430","user_header":"https://static001.geekbang.org/account/avatar/00/18/9d/ab/6589d91a.jpg","comment_is_top":false,"comment_ctime":1574815509,"is_pvip":false,"replies":[{"id":"60368","content":"我没有试过，不是很确定。按道理来说是可以的。<br><br>把描述字传给另一个进程，当close的时候，应该和fork一个子进程处理的方式一样。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1575185226,"ip_address":"","comment_id":156047,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574815509","product_id":100032701,"comment_content":"请问老师，这里的主从reactor，是否可以是两个不同的进程(非子进程) 并通过消息队列把新连接socket的描述符发给从reactor进程？ 用这种方法，close socket的时候是否需要主从reactor进程都close一次？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475969,"discussion_content":"我没有试过，不是很确定。按道理来说是可以的。\n\n把描述字传给另一个进程，当close的时候，应该和fork一个子进程处理的方式一样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575185226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146368,"user_name":"yusuf","can_delete":false,"product_type":"c1","uid":1170784,"ip_address":"","ucode":"9F32149B2ADDA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/dd/60/eae432c6.jpg","comment_is_top":false,"comment_ctime":1572508659,"is_pvip":false,"replies":[{"id":"56590","content":"每个反应堆都有一个自己的线程，也应该把自己的业务逻辑放到统一的线程池里面，至于这个线程池是不是在多个反应堆线程间共享，完全由应用程序自己设计和掌控，我个人觉得一个线程池是OK的，这个图里是一个示例。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1572572209,"ip_address":"","comment_id":146368,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572508659","product_id":100032701,"comment_content":"老师，请问是每个从反应堆都有自己的worker线程池么？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472821,"discussion_content":"每个反应堆都有一个自己的线程，也应该把自己的业务逻辑放到统一的线程池里面，至于这个线程池是不是在多个反应堆线程间共享，完全由应用程序自己设计和掌控，我个人觉得一个线程池是OK的，这个图里是一个示例。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572572209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142230,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571316304,"is_pvip":false,"replies":[{"id":"55121","content":"作用马上在第四篇展开讲。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571457196,"ip_address":"","comment_id":142230,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571316304","product_id":100032701,"comment_content":"第一问我研究了代码 lib&#47;event_loop.c 231和232行 创建了一个channel并且event_loop_add_channel_event事件<br>然后又在lib&#47;tcp_server.c  169和171给listenfd创建了一个channel并且执行了event_loop_add_channel_event<br>所以是两次,上面那个是对socketpair创建描述符进行了添加作用还不太明白","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471037,"discussion_content":"作用马上在第四篇展开讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571457196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":140577,"user_name":"Hale","can_delete":false,"product_type":"c1","uid":1129731,"ip_address":"","ucode":"1925955343FE94","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/03/b2d9a084.jpg","comment_is_top":false,"comment_ctime":1571010889,"is_pvip":true,"replies":[{"id":"55076","content":"通过round-robin的算法。代码在<br>lib&#47;thread_pool.c  thread_pool_get_loop","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571451895,"ip_address":"","comment_id":140577,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571010889","product_id":100032701,"comment_content":"主 reactor 通过什么样的算法把连接套接字分发给从reactor？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470449,"discussion_content":"通过round-robin的算法。代码在\nlib/thread_pool.c  thread_pool_get_loop","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571451895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":139834,"user_name":"mgxian","can_delete":false,"product_type":"c1","uid":1014806,"ip_address":"","ucode":"7B7E77E6A83B87","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/16/4d1e5cc1.jpg","comment_is_top":false,"comment_ctime":1570754146,"is_pvip":false,"replies":[{"id":"55069","content":"谜底很快揭晓 :)","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571450921,"ip_address":"","comment_id":139834,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1570754146","product_id":100032701,"comment_content":"7这个套接字应该是用来传递新建连接的套接字的 ","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470134,"discussion_content":"谜底很快揭晓 :)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571450921,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177315,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","nickname":"沉淀的梦想","note":"","ucode":"BCB7C26F9D214B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":30815,"discussion_content":"用套接字来传递套接字，感觉很神奇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570861289,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}