{"id":78427,"title":"30 | 答疑文章（二）：用动态的观点看加锁","content":"<p>在第<a href=\"https://time.geekbang.org/column/article/75173\">20</a>和<a href=\"https://time.geekbang.org/column/article/75659\">21</a>篇文章中，我和你介绍了InnoDB的间隙锁、next-key lock，以及加锁规则。在这两篇文章的评论区，出现了很多高质量的留言。我觉得通过分析这些问题，可以帮助你加深对加锁规则的理解。</p><p>所以，我就从中挑选了几个有代表性的问题，构成了今天这篇答疑文章的主题，即：用动态的观点看加锁。</p><p><strong>为了方便你理解，我们再一起复习一下加锁规则。这个规则中，包含了两个“原则”、两个“优化”和一个“bug”：</strong></p><ul>\n<li>原则1：加锁的基本单位是next-key lock。希望你还记得，next-key lock是前开后闭区间。</li>\n<li>原则2：查找过程中访问到的对象才会加锁。</li>\n<li>优化1：索引上的等值查询，给唯一索引加锁的时候，next-key lock退化为行锁。</li>\n<li>优化2：索引上的等值查询，向右遍历时且最后一个值不满足等值条件的时候，next-key lock退化为间隙锁。</li>\n<li>一个bug：唯一索引上的范围查询会访问到不满足条件的第一个值为止。</li>\n</ul><p>接下来，我们的讨论还是基于下面这个表t：</p><pre><code>CREATE TABLE `t` (\n  `id` int(11) NOT NULL,\n  `c` int(11) DEFAULT NULL,\n  `d` int(11) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  KEY `c` (`c`)\n) ENGINE=InnoDB;\n\ninsert into t values(0,0,0),(5,5,5),\n(10,10,10),(15,15,15),(20,20,20),(25,25,25);\n</code></pre><h1>不等号条件里的等值查询</h1><p>有同学对“等值查询”提出了疑问：等值查询和“遍历”有什么区别？为什么我们文章的例子里面，where条件是不等号，这个过程里也有等值查询？</p><!-- [[[read_end]]] --><p>我们一起来看下这个例子，分析一下这条查询语句的加锁范围：</p><pre><code>begin;\nselect * from t where id&gt;9 and id&lt;12 order by id desc for update;\n</code></pre><p>利用上面的加锁规则，我们知道这个语句的加锁范围是主键索引上的 (0,5]、(5,10]和(10, 15)。也就是说，id=15这一行，并没有被加上行锁。为什么呢？</p><p>我们说加锁单位是next-key lock，都是前开后闭区间，但是这里用到了优化2，即索引上的等值查询，向右遍历的时候id=15不满足条件，所以next-key lock退化为了间隙锁 (10, 15)。</p><p>但是，我们的查询语句中where条件是大于号和小于号，这里的“等值查询”又是从哪里来的呢？</p><p>要知道，加锁动作是发生在语句执行过程中的，所以你在分析加锁行为的时候，要从索引上的数据结构开始。这里，我再把这个过程拆解一下。</p><p>如图1所示，是这个表的索引id的示意图。</p><p><img src=\"https://static001.geekbang.org/resource/image/ac/bb/ac1aa07860c565b907b32c5f75c4f2bb.png?wh=1142*856\" alt=\"\"></p><center><span class=\"reference\">图1 索引id示意图</span></center><ol>\n<li>\n<p>首先这个查询语句的语义是order by id desc，要拿到满足条件的所有行，优化器必须先找到“第一个id&lt;12的值”。</p>\n</li>\n<li>\n<p>这个过程是通过索引树的搜索过程得到的，在引擎内部，其实是要找到id=12的这个值，只是最终没找到，但找到了(10,15)这个间隙。</p>\n</li>\n<li>\n<p>然后向左遍历，在遍历过程中，就不是等值查询了，会扫描到id=5这一行，所以会加一个next-key lock (0,5]。</p>\n</li>\n</ol><p>也就是说，在执行过程中，通过树搜索的方式定位记录的时候，用的是“等值查询”的方法。</p><h1>等值查询的过程</h1><p>与上面这个例子对应的，是@发条橙子同学提出的问题：下面这个语句的加锁范围是什么？</p><pre><code>begin;\nselect id from t where c in(5,20,10) lock in share mode;\n</code></pre><p>这条查询语句里用的是in，我们先来看这条语句的explain结果。<br>\n<img src=\"https://static001.geekbang.org/resource/image/8a/b3/8a089159c82c1458b26e2756583347b3.png?wh=1483*143\" alt=\"\"></p><center><span class=\"reference\">图2 in语句的explain结果</span></center><p>可以看到，这条in语句使用了索引c并且rows=3，说明这三个值都是通过B+树搜索定位的。</p><p>在查找c=5的时候，先锁住了(0,5]。但是因为c不是唯一索引，为了确认还有没有别的记录c=5，就要向右遍历，找到c=10才确认没有了，这个过程满足优化2，所以加了间隙锁(5,10)。</p><p>同样的，执行c=10这个逻辑的时候，加锁的范围是(5,10] 和 (10,15)；执行c=20这个逻辑的时候，加锁的范围是(15,20] 和 (20,25)。</p><p>通过这个分析，我们可以知道，这条语句在索引c上加的三个记录锁的顺序是：先加c=5的记录锁，再加c=10的记录锁，最后加c=20的记录锁。</p><p>你可能会说，这个加锁范围，不就是从(5,25)中去掉c=15的行锁吗？为什么这么麻烦地分段说呢？</p><p>因为我要跟你强调这个过程：这些锁是“在执行过程中一个一个加的”，而不是一次性加上去的。</p><p>理解了这个加锁过程之后，我们就可以来分析下面例子中的死锁问题了。</p><p>如果同时有另外一个语句，是这么写的：</p><pre><code>select id from t where c in(5,20,10) order by c desc for update;\n</code></pre><p>此时的加锁范围，又是什么呢？</p><p>我们现在都知道间隙锁是不互锁的，但是这两条语句都会在索引c上的c=5、10、20这三行记录上加记录锁。</p><p>这里你需要注意一下，由于语句里面是order by c desc， 这三个记录锁的加锁顺序，是先锁c=20，然后c=10，最后是c=5。</p><p>也就是说，这两条语句要加锁相同的资源，但是加锁顺序相反。当这两条语句并发执行的时候，就可能出现死锁。</p><p>关于死锁的信息，MySQL只保留了最后一个死锁的现场，但这个现场还是不完备的。</p><p>有同学在评论区留言到，希望我能展开一下怎么看死锁。现在，我就来简单分析一下上面这个例子的死锁现场。</p><h1>怎么看死锁？</h1><p>图3是在出现死锁后，执行show engine innodb status命令得到的部分输出。这个命令会输出很多信息，有一节LATESTDETECTED DEADLOCK，就是记录的最后一次死锁信息。<br>\n<img src=\"https://static001.geekbang.org/resource/image/a7/f6/a7dccb91bc17d12746703eb194775cf6.png?wh=1288*825\" alt=\"\"></p><center><span class=\"reference\">图3 死锁现场</span></center><p>我们来看看这图中的几个关键信息。</p><ol>\n<li>\n<p>这个结果分成三部分：</p>\n<ul>\n<li>(1) TRANSACTION，是第一个事务的信息；</li>\n<li>(2) TRANSACTION，是第二个事务的信息；</li>\n<li>WE ROLL BACK TRANSACTION (1)，是最终的处理结果，表示回滚了第一个事务。</li>\n</ul>\n</li>\n<li>\n<p>第一个事务的信息中：</p>\n<ul>\n<li>WAITING FOR THIS LOCK TO BE GRANTED，表示的是这个事务在等待的锁信息；</li>\n<li>index c of table `test`.`t`，说明在等的是表t的索引c上面的锁；</li>\n<li>lock mode S waiting 表示这个语句要自己加一个读锁，当前的状态是等待中；</li>\n<li>Record lock说明这是一个记录锁；</li>\n<li>n_fields 2表示这个记录是两列，也就是字段c和主键字段id；</li>\n<li>0: len 4; hex 0000000a; asc ;;是第一个字段，也就是c。值是十六进制a，也就是10；</li>\n<li>1: len 4; hex 0000000a; asc ;;是第二个字段，也就是主键id，值也是10；</li>\n<li>这两行里面的asc表示的是，接下来要打印出值里面的“可打印字符”，但10不是可打印字符，因此就显示空格。</li>\n<li>第一个事务信息就只显示出了等锁的状态，在等待(c=10,id=10)这一行的锁。</li>\n<li>当然你是知道的，既然出现死锁了，就表示这个事务也占有别的锁，但是没有显示出来。别着急，我们从第二个事务的信息中推导出来。</li>\n</ul>\n</li>\n<li>\n<p>第二个事务显示的信息要多一些：</p>\n<ul>\n<li>“ HOLDS THE LOCK(S)”用来显示这个事务持有哪些锁；</li>\n<li>index c of table `test`.`t` 表示锁是在表t的索引c上；</li>\n<li>hex 0000000a和hex 00000014表示这个事务持有c=10和c=20这两个记录锁；</li>\n<li>WAITING FOR THIS LOCK TO BE GRANTED，表示在等(c=5,id=5)这个记录锁。</li>\n</ul>\n</li>\n</ol><p>从上面这些信息中，我们就知道：</p><ol>\n<li>\n<p>“lock in share mode”的这条语句，持有c=5的记录锁，在等c=10的锁；</p>\n</li>\n<li>\n<p>“for update”这个语句，持有c=20和c=10的记录锁，在等c=5的记录锁。</p>\n</li>\n</ol><p>因此导致了死锁。这里，我们可以得到两个结论：</p><ol>\n<li>\n<p>由于锁是一个个加的，要避免死锁，对同一组资源，要按照尽量相同的顺序访问；</p>\n</li>\n<li>\n<p>在发生死锁的时刻，for update 这条语句占有的资源更多，回滚成本更大，所以InnoDB选择了回滚成本更小的lock in share mode语句，来回滚。</p>\n</li>\n</ol><h1>怎么看锁等待？</h1><p>看完死锁，我们再来看一个锁等待的例子。</p><p>在第21篇文章的评论区，@Geek_9ca34e 同学做了一个有趣验证，我把复现步骤列出来：</p><p><img src=\"https://static001.geekbang.org/resource/image/af/75/af3602b81aeb49e33577ba372d220a75.png?wh=1246*402\" alt=\"\"></p><center><span class=\"reference\">图4 delete导致间隙变化</span></center><p>可以看到，由于session A并没有锁住c=10这个记录，所以session B删除id=10这一行是可以的。但是之后，session B再想insert id=10这一行回去就不行了。</p><p>现在我们一起看一下此时show engine innodb status的结果，看看能不能给我们一些提示。锁信息是在这个命令输出结果的TRANSACTIONS这一节。你可以在文稿中看到这张图片<br>\n<img src=\"https://static001.geekbang.org/resource/image/c3/a6/c3744fb7b61df2a5b45b8eb1f2a853a6.png?wh=1701*324\" alt=\"\"></p><center><span class=\"reference\">图 5 锁等待信息</span></center><p>我们来看几个关键信息。</p><ol>\n<li>\n<p>index PRIMARY of table `test`.`t` ，表示这个语句被锁住是因为表t主键上的某个锁。</p>\n</li>\n<li>\n<p>lock_mode X locks gap before rec insert intention waiting 这里有几个信息：</p>\n<ul>\n<li>insert intention表示当前线程准备插入一个记录，这是一个插入意向锁。为了便于理解，你可以认为它就是这个插入动作本身。</li>\n<li>gap before rec 表示这是一个间隙锁，而不是记录锁。</li>\n</ul>\n</li>\n<li>\n<p>那么这个gap是在哪个记录之前的呢？接下来的0~4这5行的内容就是这个记录的信息。</p>\n</li>\n<li>\n<p>n_fields 5也表示了，这一个记录有5列：</p>\n<ul>\n<li>0: len 4; hex 0000000f; asc ;;第一列是主键id字段，十六进制f就是id=15。所以，这时我们就知道了，这个间隙就是id=15之前的，因为id=10已经不存在了，它表示的就是(5,15)。</li>\n<li>1: len 6; hex 000000000513; asc ;;第二列是长度为6字节的事务id，表示最后修改这一行的是trx id为1299的事务。</li>\n<li>2: len 7; hex b0000001250134; asc % 4;; 第三列长度为7字节的回滚段信息。可以看到，这里的acs后面有显示内容(%和4)，这是因为刚好这个字节是可打印字符。</li>\n<li>后面两列是c和d的值，都是15。</li>\n</ul>\n</li>\n</ol><p>因此，我们就知道了，由于delete操作把id=10这一行删掉了，原来的两个间隙(5,10)、(10,15）变成了一个(5,15)。</p><p>说到这里，你可以联合起来再思考一下这两个现象之间的关联：</p><ol>\n<li>\n<p>session A执行完select语句后，什么都没做，但它加锁的范围突然“变大”了；</p>\n</li>\n<li>\n<p>第21篇文章的课后思考题，当我们执行select * from t where c&gt;=15 and c&lt;=20 order by c desc lock in share mode; 向左扫描到c=10的时候，要把(5, 10]锁起来。</p>\n</li>\n</ol><p>也就是说，所谓“间隙”，其实根本就是由“这个间隙右边的那个记录”定义的。</p><h1>update的例子</h1><p>看过了insert和delete的加锁例子，我们再来看一个update语句的案例。在留言区中@信信 同学做了这个试验：</p><p><img src=\"https://static001.geekbang.org/resource/image/61/a7/61c1ceea7b59201649c2514c9db864a7.png?wh=1252*500\" alt=\"\"></p><center><span class=\"reference\">图 6 update 的例子</span></center><p>你可以自己分析一下，session A的加锁范围是索引c上的 (5,10]、(10,15]、(15,20]、(20,25]和(25,supremum]。</p><blockquote>\n<p>注意：根据c&gt;5查到的第一个记录是c=10，因此不会加(0,5]这个next-key lock。</p>\n</blockquote><p>之后session B的第一个update语句，要把c=5改成c=1，你可以理解为两步：</p><ol>\n<li>\n<p>插入(c=1, id=5)这个记录；</p>\n</li>\n<li>\n<p>删除(c=5, id=5)这个记录。</p>\n</li>\n</ol><p>按照我们上一节说的，索引c上(5,10)间隙是由这个间隙右边的记录，也就是c=10定义的。所以通过这个操作，session A的加锁范围变成了图7所示的样子：<br>\n<img src=\"https://static001.geekbang.org/resource/image/d2/e9/d2f6a0c46dd8d12f6a90dacc466d53e9.png?wh=1142*856\" alt=\"\"></p><center><span class=\"reference\">图 7 session B修改后， session A的加锁范围</span></center><p>好，接下来session B要执行 update t set c = 5 where c = 1这个语句了，一样地可以拆成两步：</p><ol>\n<li>\n<p>插入(c=5, id=5)这个记录；</p>\n</li>\n<li>\n<p>删除(c=1, id=5)这个记录。</p>\n</li>\n</ol><p>第一步试图在已经加了间隙锁的(1,10)中插入数据，所以就被堵住了。</p><h1>小结</h1><p>今天这篇文章，我用前面<a href=\"https://time.geekbang.org/column/article/75173\">第20</a>和<a href=\"https://time.geekbang.org/column/article/75659\">第21篇</a>文章评论区的几个问题，再次跟你复习了加锁规则。并且，我和你重点说明了，分析加锁范围时，一定要配合语句执行逻辑来进行。</p><p>在我看来，每个想认真了解MySQL原理的同学，应该都要能够做到：通过explain的结果，就能够脑补出一个SQL语句的执行流程。达到这样的程度，才算是对索引组织表、索引、锁的概念有了比较清晰的认识。你同样也可以用这个方法，来验证自己对这些知识点的掌握程度。</p><p>在分析这些加锁规则的过程中，我也顺便跟你介绍了怎么看show engine innodb status输出结果中的事务信息和死锁信息，希望这些内容对你以后分析现场能有所帮助。</p><p>老规矩，即便是答疑文章，我也还是要留一个课后问题给你的。</p><p>上面我们提到一个很重要的点：所谓“间隙”，其实根本就是由“这个间隙右边的那个记录”定义的。</p><p>那么，一个空表有间隙吗？这个间隙是由谁定义的？你怎么验证这个结论呢？</p><p>你可以把你关于分析和验证方法写在留言区，我会在下一篇文章的末尾和你讨论这个问题。感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><h1>上期问题时间</h1><p>我在上一篇文章最后留给的问题，是分享一下你关于业务监控的处理经验。</p><p>在这篇文章的评论区，很多同学都分享了不错的经验。这里，我就选择几个比较典型的留言，和你分享吧：</p><ul>\n<li>@老杨同志 回答得很详细。他的主要思路就是关于服务状态和服务质量的监控。其中，服务状态的监控，一般都可以用外部系统来实现；而服务的质量的监控，就要通过接口的响应时间来统计。</li>\n<li>@Ryoma 同学，提到服务中使用了healthCheck来检测，其实跟我们文中提到的select 1的模式类似。</li>\n<li>@强哥 同学，按照监控的对象，将监控分成了基础监控、服务监控和业务监控，并分享了每种监控需要关注的对象。</li>\n</ul><p>这些都是很好的经验，你也可以根据具体的业务场景借鉴适合自己的方案。</p><p></p>","neighbors":{"left":{"article_title":"29 | 如何判断一个数据库是不是出问题了？","id":78134},"right":{"article_title":"31 | 误删数据后除了跑路，还能怎么办？","id":78658}},"comments":[{"had_liked":false,"id":62658,"user_name":"Ryoma","can_delete":false,"product_type":"c1","uid":1130590,"ip_address":"","ucode":"7F692369239692","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","comment_is_top":true,"comment_ctime":1548125307,"is_pvip":true,"replies":[{"id":"22180","content":"嗯 所以我这里特别小心地没有写“锁“这个字。<br><br>间隙 (5,10)、(10,15）是客观存在的。<br><br>你提得也很对，“锁”是执行过程中才加的，是一个动态的概念。<br>这个问题也能够让大家更了解我们标题的意思，置顶了哈 👍","user_name":"作者回复","comment_id":62658,"uid":"1264162","ip_address":"","utype":1,"ctime":1548129344,"user_name_real":"林晓斌"}],"discussion_count":12,"race_medal":2,"score":"9.2233726525832008e+18","product_id":100020801,"comment_content":"删除数据，导致锁扩大的描述：“因此，我们就知道了，由于 delete 操作把 id=10 这一行删掉了，原来的两个间隙 (5,10)、(10,15）变成了一个 (5,15)。”<br>我觉得这个提到的(5, 10) 和 (10, 15)两个间隙会让人有点误解，实际上在删除之前间隙锁只有一个(10, 15)，删除了数据之后，导致间隙锁左侧扩张成了5，间隙锁成为了(5, 15)。","like_count":144,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437293,"discussion_content":"嗯 所以我这里特别小心地没有写“锁“这个字。\n\n间隙 (5,10)、(10,15）是客观存在的。\n\n你提得也很对，“锁”是执行过程中才加的，是一个动态的概念。\n这个问题也能够让大家更了解我们标题的意思，置顶了哈 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548129344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1031683,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/be/03/404edf37.jpg","nickname":"小动物","note":"","ucode":"BCC35CE768EB99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379514,"discussion_content":"原文这段话，，，我看了十来分钟，没太理解。看了评论终于懂了。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1623933927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1018620,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8a/fc/d1dd57dd.jpg","nickname":"ipofss","note":"","ucode":"DE3061C9259F9E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":185233,"discussion_content":"我也有这个疑问，现在明白了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582606093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1817694,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/bc/5e/eefba15b.jpg","nickname":"Cooo","note":"","ucode":"6B099F66F25202","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578680,"discussion_content":"我试了一下，和老师说的有出入，事务B中删除id=10这一行，后还可以插入成功，感觉并没有扩大锁范围。有人能解答一下吗\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656941249,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1543162,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/fa/103e6900.jpg","nickname":"山鬼谣","note":"","ucode":"E25F498B85A01B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535000,"discussion_content":"还好我看了评论，作者思路转变快了些。我自己推就推出了一个间隙锁，我还以为我学错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638329894,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1187160,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1d/58/fb740847.jpg","nickname":"随心而动","note":"","ucode":"3A59D3EC728265","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532120,"discussion_content":"牛牛牛，我说怎么实验不出来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637542217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1926222,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/64/4e/83c61c7f.jpg","nickname":"靓仔","note":"","ucode":"077A290A2DCF42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375595,"discussion_content":"确实 看到那的时候确实以为我错了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621760773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2558430,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJjbYMNwhsazNatHcxQ7L9MXTq2zurFrnZHWZxsWY55czDxSerHAeibrvwZB7t6CqoDfjMM2nWDHmg/132","nickname":"Geek_73fe59","note":"","ucode":"123D06150ADBFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368192,"discussion_content":"Ryoma的评论不完全正确，间隙锁还有（15,20]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618590397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2448277,"avatar":"https://static001.geekbang.org/account/avatar/00/25/5b/95/462890c6.jpg","nickname":"叶涛","note":"","ucode":"B45348979BE159","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2558430,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJjbYMNwhsazNatHcxQ7L9MXTq2zurFrnZHWZxsWY55czDxSerHAeibrvwZB7t6CqoDfjMM2nWDHmg/132","nickname":"Geek_73fe59","note":"","ucode":"123D06150ADBFA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370463,"discussion_content":"人家说的是8.0.18以后高版本了，没有唯一索引范围加锁的BUG了","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1619424025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":368192,"ip_address":""},"score":370463,"extra":""},{"author":{"id":2862052,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/ab/e4/9c64475b.jpg","nickname":"听风","note":"","ucode":"4BB3F3F790825B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2558430,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJjbYMNwhsazNatHcxQ7L9MXTq2zurFrnZHWZxsWY55czDxSerHAeibrvwZB7t6CqoDfjMM2nWDHmg/132","nickname":"Geek_73fe59","note":"","ucode":"123D06150ADBFA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542770,"discussion_content":"间隙锁不应该是 (15, 20)吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640839808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":368192,"ip_address":""},"score":542770,"extra":""},{"author":{"id":2389270,"avatar":"https://static001.geekbang.org/account/avatar/00/24/75/16/6e28bf17.jpg","nickname":"初晨","note":"","ucode":"C5D95D13E49127","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2862052,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/ab/e4/9c64475b.jpg","nickname":"听风","note":"","ucode":"4BB3F3F790825B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585477,"discussion_content":"范围查询，没有优化原则，因此不退化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661588460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":542770,"ip_address":"陕西"},"score":585477,"extra":""}]},{"author":{"id":1587367,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/kDAfyOQibroSCUliaG2tiachpaKyuPGd6eyRe20ibvb3R1QjSrLSufevBIOLQjAJpricM6mqeJJ4pccnbgKIfvoFnKw/132","nickname":"Geek_bcdbd4","note":"","ucode":"681F337C89A216","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342988,"discussion_content":"谢谢，解答了我的疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610893305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62715,"user_name":"令狐少侠","can_delete":false,"product_type":"c1","uid":1334516,"ip_address":"","ucode":"36390E67AF0779","user_header":"https://static001.geekbang.org/account/avatar/00/14/5c/f4/88f107d9.jpg","comment_is_top":true,"comment_ctime":1548141535,"is_pvip":false,"replies":[{"id":"22243","content":"对， 好问题<br>lock_mode X waiting表示next-key lock；<br>lock_mode X locks rec but not gap是只有行锁；<br>还有一种 “locks gap before rec”，就是只有间隙锁；<br>","user_name":"作者回复","comment_id":62715,"uid":"1264162","ip_address":"","utype":1,"ctime":1548215829,"user_name_real":"林晓斌"}],"discussion_count":2,"race_medal":0,"score":"9.2233723862953001e+18","product_id":100020801,"comment_content":"有个问题想确认下，在死锁日志里，lock_mode X waiting是间隙锁+行锁，lock_mode X locks rec but not gap这种加but not gap才是行锁？<br>老师你后面能说下group by的原理吗，我看目录里面没有","like_count":82,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437317,"discussion_content":"对， 好问题\nlock_mode X waiting表示next-key lock；\nlock_mode X locks rec but not gap是只有行锁；\n还有一种 “locks gap before rec”，就是只有间隙锁；\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1548215829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2009461,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/a9/75/dbccd12d.jpg","nickname":"稻草人","note":"","ucode":"6694EE2CD36B8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":356511,"discussion_content":"group by原理我也想知道！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615614479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":66207,"user_name":"IceGeek17","can_delete":false,"product_type":"c1","uid":1103101,"ip_address":"","ucode":"1B42D7260449B4","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/fd/43802282.jpg","comment_is_top":false,"comment_ctime":1549892184,"is_pvip":false,"replies":[{"id":"25269","content":"1. 对的<br><br>2. 对的<br><br>3. “因为扫到了c=10，所以会加next-key lock (5,10]”， 对的。 <br>    第二个“如果”，实现上并不是这样的，所以没法回答😆<br>","user_name":"作者回复","comment_id":66207,"uid":"1264162","ip_address":"","utype":1,"ctime":1551186229,"user_name_real":"林晓斌"}],"discussion_count":8,"race_medal":0,"score":"229183158872","product_id":100020801,"comment_content":"老师，新年好，有几个问题：<br>问题一：<br>对于文中的第一个例子（不等号条件里的等值查询），当试图去找 “第一个id&lt;12的值&quot;的时候，用的还是从左往右的遍历（因为用到了优化2），也就是说，当去找第一个等值的时候（通过树搜索去定位记录的时候），即使order by desc，但用的还是向右遍历，当找到了第一个等值的时候（例子中的id=15），然后根据order by desc，再向左遍历。<br>是不是这么理解？<br><br>问题二：<br>对于第21讲的思考题， select * from t where c&gt;=15 and c&lt;=20 order by c desc lock in share mode， 老师已经给出了答案，我这里再详细理解一下：<br>先定位索引c上最右边c=20的行，所以第一个等值查询会扫描到c=25，然后通过优化2，next-key lock退化为间隙锁，则会加上间隙锁（20，25），紧接着再向左遍历，会加 next-key lock (15, 20], (10, 15], 因为要扫描到c=10才停下来，所以也会加next-key lock (5,10]<br>理解的是否正确？<br><br>问题三：<br>对于上面的问题二的sql，在索引c上，把（10，25）这段区间锁上就应该是完备的了，理论上（5，10]这段区间是否锁上对结果应该没有影响呀。<br>是不是说MySQL就是这么实现的，next-key lock前开后闭，因为扫到了c=10，所以会加next-key lock (5,10]，这里MySQL的实现扩大了锁的区间范围，其实没有这个必要？<br>另外，如果不加next-key lock (5,10]，是不是这里c=10还是应该要锁的，如果不锁可能被删除？<br><br>","like_count":53,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438750,"discussion_content":"1. 对的\n\n2. 对的\n\n3. “因为扫到了c=10，所以会加next-key lock (5,10]”， 对的。 \n    第二个“如果”，实现上并不是这样的，所以没法回答😆\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551186229,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1672786,"avatar":"https://static001.geekbang.org/account/avatar/00/19/86/52/91c7d112.jpg","nickname":"Garen","note":"","ucode":"0608C88F83EF0C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41420,"discussion_content":"第3个问题，真的会让人觉得mysql很傻。但是 是符合老师的两个原则的。条件>=15,向左扫描到15时，范围查找>就结束了，因为不是唯一索引，所以还要继续向左扫描=15。直到扫描到10，根据原则2，扫描到的都加锁，所以10是要加锁的。但是原则1，加锁的单位是next-key lock，所以加了(5，10]。\n\n感觉mysql傻，是因为优化2，只适用于向右遍历。这个例子是向左遍历的。而且next-key lock左开右闭有点死板了。应该ASC左开右闭，DESC左闭右开。这样优化2向左也能由新定义的next-key lock 退化为间隙锁了。加锁范围就是(10,25)。10这条数据也不用加锁，如果真被删了，根据间隙锁的定义，锁范围自然会扩大","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1572422942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1261360,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3f/30/23f6b413.jpg","nickname":"五十九秒","note":"","ucode":"1F34F62193CFF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1672786,"avatar":"https://static001.geekbang.org/account/avatar/00/19/86/52/91c7d112.jpg","nickname":"Garen","note":"","ucode":"0608C88F83EF0C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308019,"discussion_content":"嗯，赞同。感觉像是历史遗留问题，脑补了一下实现方案，从程序设计角度来说，这样实现起来设计思想统一，没有考虑到对desc的特殊优化。以左右存在的记录作为间隙加锁也扩大了间隙锁的范围，但这样的设计应该是最清晰的，并且平时的应用场景又大多是写少读多。综上感觉有些应该是权衡和历史遗留的问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600826722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41420,"ip_address":""},"score":308019,"extra":""},{"author":{"id":1887586,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLhicDSmL4vicPADhxxzOzukMar8nV5Tc3ic2dz4FQIxMX3WmX5a2V3sdD121eWpvfQI8NXIkkDZoDFw/132","nickname":"Geek_536b54","note":"","ucode":"F62BC7781D9212","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1672786,"avatar":"https://static001.geekbang.org/account/avatar/00/19/86/52/91c7d112.jpg","nickname":"Garen","note":"","ucode":"0608C88F83EF0C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335192,"discussion_content":"DESC 不能左闭右开 老师这个例子只是说明，假如目前C索引 0 5 10 10 15 20 25 呢 明明是到左边第一个10就不满足条件，左闭会把最左边第二个10也包括在内","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608113637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41420,"ip_address":""},"score":335192,"extra":""}]},{"author":{"id":1649282,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLGAV2NgUo0VVNjiagIJCZmPHvogtAJcUib6icLCbR4vcvfziashHZjpZ0FUxSdawFnHGUSmIaePvDaWQ/132","nickname":"Geek_b74670","note":"","ucode":"083AF837FB0112","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8289,"discussion_content":"问题2描述的很详细，同时也把例子1的过程也描述出来了，在你的提示下，终于把行锁，gap lock，next-key lock怎么加搞懂了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1567876236,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1641131,"avatar":"","nickname":"木木夕","note":"","ucode":"AD74A0CD183EF3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6180,"discussion_content":"问题2中扫描到c=10停下来已经不满足条件了，为啥还要继续向左扫描锁住（5，10]呢。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566745487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1351117,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/2au3iaQvydOVeVY1vlSVeGia7SvrpWFVibdxdjKiafof3RhzFO9e8sxKIBxKXJQibRNpO9pCH2hmibkibsGv7YKF3yjEw/132","nickname":"秋一匹","note":"","ucode":"BEBDBF8C15C6BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1641131,"avatar":"","nickname":"木木夕","note":"","ucode":"AD74A0CD183EF3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281710,"discussion_content":"加锁的基本单位是next key lock","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1591796608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6180,"ip_address":""},"score":281710,"extra":""},{"author":{"id":1333649,"avatar":"https://static001.geekbang.org/account/avatar/00/14/59/91/fa2d8bb2.jpg","nickname":"不吃辣👾","note":"","ucode":"B25E0725B5E85F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1641131,"avatar":"","nickname":"木木夕","note":"","ucode":"AD74A0CD183EF3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383252,"discussion_content":"真相只有一个，懒得释放！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626012387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6180,"ip_address":""},"score":383252,"extra":""}]}]},{"had_liked":false,"id":62613,"user_name":"Jason_鹏","can_delete":false,"product_type":"c1","uid":1179329,"ip_address":"","ucode":"4A3DCAAC531724","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/c1/6c99fff4.jpg","comment_is_top":false,"comment_ctime":1548120287,"is_pvip":false,"replies":[{"id":"22162","content":"根据c&gt;5查到的第一个记录是c=10，因此不会加(0,5]这个next-key lock。<br><br>你提醒得对，我应该多说明这句， 我加到文稿中啦👍","user_name":"作者回复","comment_id":62613,"uid":"1264162","ip_address":"","utype":1,"ctime":1548124349,"user_name_real":"林晓斌"}],"discussion_count":7,"race_medal":0,"score":"151871975647","product_id":100020801,"comment_content":"最后一个update的例子，为没有加（0，5）的间隙呢？我理解应该是先拿c＝5去b+树搜索，按照间隙索最右原则，应该会加（0，5]的间隙，然后c＝5不满足大于5条件，根据优化2原则退化成（0，5）的间隙索，我是这样理解的","like_count":35,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437277,"discussion_content":"根据c&amp;gt;5查到的第一个记录是c=10，因此不会加(0,5]这个next-key lock。\n\n你提醒得对，我应该多说明这句， 我加到文稿中啦👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548124349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305985,"discussion_content":"我想系统是如何知道第一条就查c=10这条记录的？不应该先查c=5这条记录然后向后遍历吗？查找过程中访问到的对象都会加锁呀！不先定位到c=5，系统是怎么知道直接查询c=10的？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600142022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1261360,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3f/30/23f6b413.jpg","nickname":"五十九秒","note":"","ucode":"1F34F62193CFF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308025,"discussion_content":"应该是B+树的定位功能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600827197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305985,"ip_address":""},"score":308025,"extra":""},{"author":{"id":1543040,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/80/8702bd5f.jpg","nickname":"evan","note":"","ucode":"491B073D5AFEDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320040,"discussion_content":"也有同样的疑问...","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604229911,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305985,"ip_address":""},"score":320040,"extra":""},{"author":{"id":1543162,"avatar":"https://static001.geekbang.org/account/avatar/00/17/8b/fa/103e6900.jpg","nickname":"山鬼谣","note":"","ucode":"E25F498B85A01B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535036,"discussion_content":"我的理解：通过B+数找到c=10,找的过程中可能遇到c=5，但是间隙锁，应该锁的是叶子节点，遍历也是遍历叶子节点，所以等值查询才会被定义为：通过树搜索的方式来定位记录。而后通过叶子节点(此时已经定位到c=10)的往右遍历。\n即：非叶子节点遇到的，不会加锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638339808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305985,"ip_address":""},"score":535036,"extra":""}]},{"author":{"id":1211790,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7d/8e/bb16d414.jpg","nickname":"Wangxi","note":"","ucode":"C25A9A14179930","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257363,"discussion_content":"这个做了实验，(0,5) 区间是没加锁的， id > 10 也做了实验 (5, 10)也是没有加锁的。 mysql8.0.18","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588562291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62571,"user_name":"长杰","can_delete":false,"product_type":"c1","uid":1312212,"ip_address":"","ucode":"DD52C9494005F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/d4/e06bf86d.jpg","comment_is_top":false,"comment_ctime":1548115271,"is_pvip":false,"replies":[{"id":"22149","content":"select * from t where c&gt;=15 and c&lt;=20 order by c desc in share mode;<br><br>这个语句是根据 c=20 来查数据的，所以加锁(20,25]的时候，可以使用优化2；<br><br>select * from t where id&gt;10 and id&lt;=15 for update；<br>这里的id=20，是用“向右遍历”的方式得到的，没有优化，按照“以next-key lock”为加锁单位来执行<br><br>","user_name":"作者回复","comment_id":62571,"uid":"1264162","ip_address":"","utype":1,"ctime":1548119134,"user_name_real":"林晓斌"}],"discussion_count":10,"race_medal":0,"score":"83152493895","product_id":100020801,"comment_content":"老师，之前讲这个例子时，select * from t where c&gt;=15 and c&lt;=20 order by c desc in share mode;<br>最右边加的是 (20, 25)的间隙锁，<br>而这个例子select * from t where id&gt;10 and id&lt;=15 for update中，最右边加的是(15,20]的next-key锁，<br>这两个查询为何最后边一个加的gap锁，一个加的next-key锁，他们都是&lt;=的等值范围查询，区别在哪里？","like_count":19,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437261,"discussion_content":"select * from t where c&amp;gt;=15 and c&amp;lt;=20 order by c desc in share mode;\n\n这个语句是根据 c=20 来查数据的，所以加锁(20,25]的时候，可以使用优化2；\n\nselect * from t where id&amp;gt;10 and id&amp;lt;=15 for update；\n这里的id=20，是用“向右遍历”的方式得到的，没有优化，按照“以next-key lock”为加锁单位来执行\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548119134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1508329,"avatar":"https://static001.geekbang.org/account/avatar/00/17/03/e9/6358059c.jpg","nickname":"GalaxyCreater","note":"","ucode":"C79E8A088D57CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263146,"discussion_content":"select * from t where id>10 and id<=15 for update 你把这里的id换成c加锁方式就一样了，唯一索引和普通索引的区别。唯一索引范围锁bug","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1589180101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1117597,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0d/9d/58d09086.jpg","nickname":"达达队长","note":"","ucode":"1C3F2E4F6B7637","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265103,"discussion_content":"id是主键，唯一索引，定位到15就结束了\nc不是唯一索引，到20还得往后看看，发现是25，退化","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589375122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1117597,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0d/9d/58d09086.jpg","nickname":"达达队长","note":"","ucode":"1C3F2E4F6B7637","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308408,"discussion_content":"id是主键，唯一索引，定位到15，退化为行锁\nc不是唯一索引，到20还得往后看看，发现是25，退化为间隙锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600942290,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":265103,"ip_address":""},"score":308408,"extra":""}]},{"author":{"id":1302741,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e0/d5/7485e51f.jpg","nickname":"~玲玲玲~子~哥~","note":"","ucode":"89379F3A0427EA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":104553,"discussion_content":"order by desc是有大到小扫描，先定位的是c=20,不加order by是先定位id=15","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577440734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1986739,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/50/b3/9269cd59.jpg","nickname":"LWD","note":"","ucode":"DDA444DB113C01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588005,"discussion_content":"完全get！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663438295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043325,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/c9xpiakQ3OC1AlfCeW03lLnnb7mj5v35Hib8YDs66zpnVib2n2qFichFmFp2Ec4QDPR0dKh38MkBBLyD3bE4NiaanZQ/132","nickname":"龙晓","note":"","ucode":"FAF34F1C65D103","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357876,"discussion_content":"知道是一回事，灵活运用还需多多练习啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615886938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1261360,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3f/30/23f6b413.jpg","nickname":"五十九秒","note":"","ucode":"1F34F62193CFF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308030,"discussion_content":"第一个向右遍历是因为c不是唯一索引，是等值查找的原因向右遍历，适用的是等值查找的规则，第二个向右遍历id是唯一索引，是唯一索引范围查找的bug导致向右遍历，适用的是范围查找的规则。我也感觉范围查找用间隙锁也不会影响结果的正确性，这可能是个需要优化的点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600827821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1302064,"avatar":"https://static001.geekbang.org/account/avatar/00/13/de/30/b468b41d.jpg","nickname":"北落狮门","note":"","ucode":"C5A951170001B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":706,"discussion_content":"SELECT * FROM t WHERE c<=20 ORDER BY c DESC LOCK in SHARE mode;  少了c>=15 为什么就不会使用优化2   会锁住25？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561971816,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1554570,"avatar":"https://static001.geekbang.org/account/avatar/00/17/b8/8a/7367a69e.jpg","nickname":"嘉兴","note":"","ucode":"6997E7A3E25EE4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1302064,"avatar":"https://static001.geekbang.org/account/avatar/00/13/de/30/b468b41d.jpg","nickname":"北落狮门","note":"","ucode":"C5A951170001B9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":21936,"discussion_content":"explain查看一下，你会发现走的是全表扫描...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569554643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":706,"ip_address":""},"score":21936,"extra":""}]}]},{"had_liked":false,"id":62642,"user_name":"☞","can_delete":false,"product_type":"c1","uid":1302793,"ip_address":"","ucode":"6FAEF05F234D2A","user_header":"https://static001.geekbang.org/account/avatar/00/13/e1/09/9483f537.jpg","comment_is_top":false,"comment_ctime":1548123890,"is_pvip":false,"replies":[{"id":"22175","content":"索引搜索就是 “找到第一个值，然后向左或向右遍历”，<br>order by desc 就是要用最大的值来找第一个；<br>order by就是要用做小的值来找第一个；<br><br>“所以只需要[20,25)来判断已经是最后一个20就可以了是吧”，<br>你描述的意思是对的，但是在MySQL里面不建议写这样的前闭后开区间哈，容易造成误解。<br>可以描述为：<br>“取第一个id=20后，向右遍历(25,25)这个间隙”^_^","user_name":"作者回复","comment_id":62642,"uid":"1264162","ip_address":"","utype":1,"ctime":1548128880,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"74562567922","product_id":100020801,"comment_content":"老师好：<br>        select * from t where c&gt;=15 and c&lt;=20 order by c desc for update;<br>        为什么这种c=20就是用来查数据的就不是向右遍历<br>        select * from t where c&gt;=15 and c&lt;=20 这种就是向右遍历<br>        怎么去判断合适是查找数据，何时又是遍历呢，是因为第一个有order by desc，然后反向向左遍历了吗？所以只需要[20,25)来判断已经是最后一个20就可以了是吧","like_count":17,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437285,"discussion_content":"索引搜索就是 “找到第一个值，然后向左或向右遍历”，\norder by desc 就是要用最大的值来找第一个；\norder by就是要用做小的值来找第一个；\n\n“所以只需要[20,25)来判断已经是最后一个20就可以了是吧”，\n你描述的意思是对的，但是在MySQL里面不建议写这样的前闭后开区间哈，容易造成误解。\n可以描述为：\n“取第一个id=20后，向右遍历(25,25)这个间隙”^_^","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548128880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":63955,"user_name":"Long","can_delete":false,"product_type":"c1","uid":1318970,"ip_address":"","ucode":"2417242560360A","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/3a/90db6a24.jpg","comment_is_top":false,"comment_ctime":1548618757,"is_pvip":false,"replies":[{"id":"22620","content":"😆 👍","user_name":"作者回复","comment_id":63955,"uid":"1264162","ip_address":"","utype":1,"ctime":1548635657,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"57383193605","product_id":100020801,"comment_content":"感觉这篇文章以及前面加锁的文章，提升了自己的认知。还有，谢谢老师讲解了日志的对应细节……还愿了","like_count":13,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437780,"discussion_content":"😆 👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548635657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235671,"user_name":"Geek8819","can_delete":false,"product_type":"c1","uid":2028950,"ip_address":"","ucode":"521AEDAB2EED81","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/96/e963b41b.jpg","comment_is_top":false,"comment_ctime":1595144788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44544817748","product_id":100020801,"comment_content":"老师，我记得之前你有说过范围查询第一次定位时用的等值查找。那select * from t where id &gt;10 and id &lt;= 15这条语句，首先用10去索引树查找。不应该加（5，10]这样一个记录锁么？","like_count":10},{"had_liked":false,"id":62313,"user_name":"长杰","can_delete":false,"product_type":"c1","uid":1312212,"ip_address":"","ucode":"DD52C9494005F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/d4/e06bf86d.jpg","comment_is_top":false,"comment_ctime":1548030908,"is_pvip":false,"replies":[{"id":"22025","content":"不是哦，这里第一个id&gt;10找到的是(10,15)这个gap，并没有加（5,10）， <br>还有根据股则里面的“bug”，id=20也会被锁的，所以应该是（10,15]（15,20]","user_name":"作者回复","comment_id":62313,"uid":"1264162","ip_address":"","utype":1,"ctime":1548037071,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"40202736572","product_id":100020801,"comment_content":"老师，select * from t where id&gt;10 and id&lt;=15 for update;这个语句持有的锁不应该是（5,10）（10,15]（15,20）吗？","like_count":9,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437167,"discussion_content":"不是哦，这里第一个id&amp;gt;10找到的是(10,15)这个gap，并没有加（5,10）， \n还有根据股则里面的“bug”，id=20也会被锁的，所以应该是（10,15]（15,20]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548037071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184420,"user_name":"索旭东","can_delete":false,"product_type":"c1","uid":1139039,"ip_address":"","ucode":"BFD07BCD8C8CAE","user_header":"https://static001.geekbang.org/account/avatar/00/11/61/5f/b279daaf.jpg","comment_is_top":false,"comment_ctime":1583311652,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"31648082724","product_id":100020801,"comment_content":"select * from t where id&gt;10 and id&lt;=15 for update;<br><br>select c from t where c&gt;5 lock in share mode;<br><br>第一条的锁是(5,10),(10,15)<br>第二个语句的锁是（5,10]....<br>两个对比，感觉矛盾了呀，第二个语句给的理由是，大于5的第一个被访问到的记录是10，同样原理第一个语句访问的第一个记录不是应该是15吗？","like_count":7,"discussions":[{"author":{"id":1809802,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/8a/a2d34896.jpg","nickname":"一元(wx:abley1874)","note":"","ucode":"5E7A33642FC767","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306003,"discussion_content":"先入为主，被你误导了，第一条的锁是(10,15]，(15,20]。楼上之所以实测结果是(10,15) 是因为 mysql 8.0.18已经修复唯一索引继续向下遍历的BUG","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600146279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211790,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7d/8e/bb16d414.jpg","nickname":"Wangxi","note":"","ucode":"C25A9A14179930","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257366,"discussion_content":"mysql 8.0.18刚做了实验 第一条锁是(10,15] 第二条锁是(5, 10)....","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1588562508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1111825,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/11/714285d8.jpg","nickname":"Wolf、Heart","note":"","ucode":"9A6FC15DAF6269","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408739,"discussion_content":"第一条加锁是：（10,15]（15,20]并没有(5,10)，感觉应该也是先定位到5这条记录，对应next-key lock（5,10]，继续向后寻找，直到id=20停止，因此加锁范围（5,10]、（10,15]（15,20]，又由于5这条记录并不满足查询条件，只是用于辅助定位记录，需要移除，因此最终加锁范围为（10,15]（15,20]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635313295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105023,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1560906180,"is_pvip":false,"replies":[{"id":"38147","content":"练着练着，规则就忘记了，然后直接脑补执行流程，上结论","user_name":"作者回复","comment_id":105023,"uid":"1264162","ip_address":"","utype":1,"ctime":1560998212,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"31625677252","product_id":100020801,"comment_content":"这么多加锁规则记不住","like_count":7,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454527,"discussion_content":"练着练着，规则就忘记了，然后直接脑补执行流程，上结论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560998212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99987,"user_name":"hal","can_delete":false,"product_type":"c1","uid":1359844,"ip_address":"","ucode":"98E625F7327FD9","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/e4/45758517.jpg","comment_is_top":false,"comment_ctime":1559378851,"is_pvip":false,"replies":[{"id":"36695","content":"🤝🤝🤝🤝🤝","user_name":"作者回复","comment_id":99987,"uid":"1264162","ip_address":"","utype":1,"ctime":1560003646,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"31624149923","product_id":100020801,"comment_content":"非常谢谢老师，专栏质量非常高，祝老师身体健康万事如意，因为内容写的太好了……很激动👍👍👍👍👍","like_count":7,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452353,"discussion_content":"🤝🤝🤝🤝🤝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560003646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62793,"user_name":"长杰","can_delete":false,"product_type":"c1","uid":1312212,"ip_address":"","ucode":"DD52C9494005F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/d4/e06bf86d.jpg","comment_is_top":false,"comment_ctime":1548158223,"is_pvip":false,"replies":[{"id":"22250","content":"1. 代码实现上，传入的就是id&gt;10里面的这个10<br>2. 可以的，不过因为id是主键，而且id=15这一行存在，我觉得用优化1解释更好哦","user_name":"作者回复","comment_id":62793,"uid":"1264162","ip_address":"","utype":1,"ctime":1548216820,"user_name_real":"林晓斌"}],"discussion_count":2,"race_medal":0,"score":"31612929295","product_id":100020801,"comment_content":"老师，还是select * from t where c&gt;=15 and c&lt;=20 order by c desc in share mode与select * from t where id&gt;10 and id&lt;=15 for update的问题，为何select * from t where id&gt;10 and id&lt;=15 for update不能解释为：根据id=15来查数据，加锁(15, 20]的时候，可以使用优化2，<br>这个等值查询是根据什么规则来定的？ 如果select * from t where id&gt;10 and id&lt;=15 for update加上order by id desc是否可以按照id=15等值查询，利用优化2？多谢指教。","like_count":7,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437351,"discussion_content":"1. 代码实现上，传入的就是id&amp;gt;10里面的这个10\n2. 可以的，不过因为id是主键，而且id=15这一行存在，我觉得用优化1解释更好哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548216820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1261360,"avatar":"https://static001.geekbang.org/account/avatar/00/13/3f/30/23f6b413.jpg","nickname":"五十九秒","note":"","ucode":"1F34F62193CFF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308051,"discussion_content":"可以想想最后返回客户端的结果，没有desc的正序排列，是从最小值向最大值取值，所以根据最小值定位；加了desc，倒排是从最大向最小取值，所以根据最大值定位，向最小取值。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1600831254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62440,"user_name":"库淘淘","can_delete":false,"product_type":"c1","uid":1310240,"ip_address":"","ucode":"90813B0C46E978","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqibSwKPg7hiapc49qoM4dibhM3fYANPjfltF2ibBZ3dHX2hibjg5EIIcziahrmjO5R2XrcRibvU39TQS7jg/132","comment_is_top":false,"comment_ctime":1548058694,"is_pvip":false,"replies":[{"id":"22102","content":"发现了👍🏿","user_name":"作者回复","comment_id":62440,"uid":"1264162","ip_address":"","utype":1,"ctime":1548087432,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"31612829766","product_id":100020801,"comment_content":"对于问题 我理解是这样 <br>session 1：<br>delete from t;<br>begin; select * from t for update;<br>session 2:<br>insert into t values(1,1,1);发生等待<br>show engine innodb status\\G; <br>.....<br>------- TRX HAS BEEN WAITING 5 SEC FOR THIS LOCK TO BE GRANTED:<br>RECORD LOCKS space id 75 page no 3 n bits 72 index PRIMARY of table `test`.`t` trx id 752090 lock_mode X insert intention waiting<br>Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0<br> 0: len 8; hex 73757072656d756d; asc supremum;;<br>其中申请插入意向锁与间隙锁 冲突，supremum这个能否理解为 间隙右边的那个记录","like_count":7,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437214,"discussion_content":"发现了👍🏿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548087432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287750,"user_name":"Yc","can_delete":false,"product_type":"c1","uid":1661365,"ip_address":"","ucode":"407776D104D6F8","user_header":"https://static001.geekbang.org/account/avatar/00/19/59/b5/26d3c637.jpg","comment_is_top":false,"comment_ctime":1618132425,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"27387936201","product_id":100020801,"comment_content":"老师你好，请问一下 图4的一个问题。。求解答<br><br>为啥，10不会被锁住呢？条件是id&gt;10，查询规则是首先找到id=10的这行数据，然后根据这行数据进行向右遍历。按照加锁规则：原则 2：查找过程中访问到的对象才会加锁。<br>加锁的话 在根据优化1：优化 1：索引上的等值查询，给唯一索引加锁的时候，next-key lock 退化为行锁。  这个例子为啥ID=10不加锁！！！，求老师翻牌","like_count":6,"discussions":[{"author":{"id":1324550,"avatar":"https://static001.geekbang.org/account/avatar/00/14/36/06/08c46bcd.jpg","nickname":"聂利","note":"","ucode":"808E064089724D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587395,"discussion_content":"从左边第1个起点查找是等值查询，因为是&gt;10,等于10相当于没找到，而且规则 划本来也是左开右闭。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663032039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2724584,"avatar":"https://static001.geekbang.org/account/avatar/00/29/92/e8/32378dd0.jpg","nickname":"时荒","note":"","ucode":"DDE08CDBD24D5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582256,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659339226,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170925,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/ed/e6eed95e.jpg","nickname":"Flying","note":"","ucode":"CA3DCE897F2013","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387361,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628134674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2045385,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/35/c9/f1d1bb6f.jpg","nickname":"zhang_qing_yun","note":"","ucode":"E4CD54834ADFFD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369829,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619168455,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82706,"user_name":"唯她命","can_delete":false,"product_type":"c1","uid":1240398,"ip_address":"","ucode":"8F687E8D306840","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/4e/ef406442.jpg","comment_is_top":false,"comment_ctime":1554281237,"is_pvip":false,"replies":[{"id":"30167","content":"修改索引值都会修改位置的😆<br>","user_name":"作者回复","comment_id":82706,"uid":"1264162","ip_address":"","utype":1,"ctime":1554626046,"user_name_real":"林晓斌"}],"discussion_count":2,"race_medal":0,"score":"27324085013","product_id":100020801,"comment_content":"老师，update语句  mysql在执行过程中 ，都是先拆成  插入 和 删除的吗？不是直接修改？","like_count":7,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445691,"discussion_content":"修改索引值都会修改位置的😆\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554626046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1065351,"avatar":"https://static001.geekbang.org/account/avatar/00/10/41/87/d26efb2e.jpg","nickname":"SuperSnow","note":"","ucode":"84C89AA8083E6A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":175908,"discussion_content":"锁都是作用在索引上的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582002164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62718,"user_name":"Justin","can_delete":false,"product_type":"c1","uid":1305601,"ip_address":"","ucode":"D49723FEA66731","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/01/978d54af.jpg","comment_is_top":false,"comment_ctime":1548141814,"is_pvip":false,"replies":[{"id":"22245","content":"会的","user_name":"作者回复","comment_id":62718,"uid":"1264162","ip_address":"","utype":1,"ctime":1548215865,"user_name_real":"林晓斌"}],"discussion_count":1,"race_medal":0,"score":"27317945590","product_id":100020801,"comment_content":"想咨询一下 普通索引 如果索引中包括的元素都相同 在索引中顺序是怎么排解的呢 是按主键排列的吗 比如(name ,age ) 索引 name age都一样 那索引中会按照主键排序吗？","like_count":6,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437319,"discussion_content":"会的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548215865,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":96509,"user_name":"Lane","can_delete":false,"product_type":"c1","uid":1008257,"ip_address":"","ucode":"F70459D1BBD9F4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/81/ad80f427.jpg","comment_is_top":false,"comment_ctime":1558437095,"is_pvip":true,"discussion_count":4,"race_medal":0,"score":"23033273575","product_id":100020801,"comment_content":"第一个例子<br>begin; select * from t where id&gt;9 and id&lt;12 order by id desc for update;  <br>为什么会有(0,5]，不理解，但是测试确实insert into t values (3,3,3);会卡主","like_count":5,"discussions":[{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4479,"discussion_content":"有“order by id desc”,所以会向左遍历，要一直到id=5,才是找到了不是等于9的第一个值，所以会加(0,5] 这样的 next-key  lock 的锁。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1565453076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1335409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ0siaXviaRMJxYNCibIeicadw3F9L28oTbJIUXSmKtNWvEHNviaM7dr60PZSq1cHj6AzruuP8wvyHnYSA/132","nickname":"酷酷哒","note":"","ucode":"463ED1CA951AC3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":36042,"discussion_content":"对于这个我也没理解，没有order by desc 能分析下吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571317576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":4479,"ip_address":""},"score":36042,"extra":""},{"author":{"id":1795793,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/zxkns28cIAUZIt3WjDb8G26qiccT84d9GMr9ZpbYR60TU1ibqSj9NoYVHlJvGF1kOltkqNDmEfJCqPuYVkue3WHg/132","nickname":"Geek_55e386","note":"","ucode":"5A727F1323C2D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1335409,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ0siaXviaRMJxYNCibIeicadw3F9L28oTbJIUXSmKtNWvEHNviaM7dr60PZSq1cHj6AzruuP8wvyHnYSA/132","nickname":"酷酷哒","note":"","ucode":"463ED1CA951AC3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":366912,"discussion_content":"首先加锁,从 (小,大]\nid > 9; 按照desc降序排列, 他要拿到比9小的值5;\n然后间隙枷锁规则,  比5小的 (0, 5]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618216705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":36042,"ip_address":""},"score":366912,"extra":""}]},{"author":{"id":2046557,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epHrVsJzVH0LUFyMmU77Raj3fF3oXrl8OpD4v1wWhRHjPbs2iaeZE5qtw1ZoZWqq5oAeDkAwa8Nv6g/132","nickname":"Geek_aa9f6e","note":"","ucode":"D2EAAC7244FA45","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539727,"discussion_content":"假如说没有这个(0,5]，会有什么影响吗？感觉没啥影响啊，这个锁有点多余，可以被优化吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639815354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62416,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1548052199,"is_pvip":false,"replies":[{"id":"22094","content":"赞<br>show engine innodb status 有惊喜😆","user_name":"作者回复","comment_id":62416,"uid":"1264162","ip_address":"","utype":1,"ctime":1548078244,"user_name_real":"林晓斌"}],"discussion_count":2,"race_medal":0,"score":"23022888679","product_id":100020801,"comment_content":"先说结论：空表锁 (-supernum，supernum],老师提到过mysql的正无穷是supernum，在没有数据的情况下，next-key lock 应该是supernum前面的间隙加 supernum的行锁。但是前开后闭的区间，前面的值是什么我也不知道，就写了一个-supernum。<br>稍微验证一下<br>session 1）<br>begin;<br>select * from t where id&gt;9 for update;<br>session 2）<br>begin;<br>insert into t values(0,0,0),(5,5,5);<br>（block）<br>","like_count":5,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437204,"discussion_content":"赞\nshow engine innodb status 有惊喜😆","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548078244,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1061402,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/y5NFbibdKCFCg0lHKK5ERGOQWXYYK7jhnqm2BxQ6r7tWvXx8uDmibglweejDWU39BTmDSAtBJGj1ibOZK2uIHQyqg/132","nickname":"Mr_freezing37","note":"","ucode":"BB605A6FEDCEB6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":259615,"discussion_content":"老师说的惊喜是supremum的值！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588790646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148225,"user_name":"Icy:S LYZ","can_delete":false,"product_type":"c1","uid":1683788,"ip_address":"","ucode":"73C983E11A43C2","user_header":"https://static001.geekbang.org/account/avatar/00/19/b1/4c/9f06f199.jpg","comment_is_top":false,"comment_ctime":1572960881,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18752830065","product_id":100020801,"comment_content":"难道只有我有疑问，如果唯一索引变成varchar，间隙区间会怎么选吗？？？还是我的问题？","like_count":4},{"had_liked":false,"id":324967,"user_name":"bigdudo","can_delete":false,"product_type":"c1","uid":1371360,"ip_address":"","ucode":"5938710D7C1149","user_header":"https://static001.geekbang.org/account/avatar/00/14/ec/e0/d072d6f0.jpg","comment_is_top":false,"comment_ctime":1638761329,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10228695921","product_id":100020801,"comment_content":"人在地铁，还没时间坐下来好好整理笔记，遂在此现总结下：加锁这个必须要跟着b+树来比照才清晰；要时刻谨记按照最右原则。举几个个例子：<br>1、select id from table_q where c&gt;5and c&lt;15 按照文中既有的数据，首先肯定要从5开始查数据：因为c不等于5，所以区间（5，10]的nklock是成立的，(10,15] (15,20] (20,wuqiong) 以上对于c&gt;5来说都是成立的。c&lt;15 满足的有(10,15) (5,10](0,5]取交集得到（5，10](10,15)<br>2、其次如果是select id from table_q where c=5 首先（0，5]肯定没跑了 但是要清楚，你如果是引擎，你从左往右拿、拿到第一个5，你会安心的拍拍屁股去交差吗？肯定要往后拿拿到不一样的为止，所以区间自然而然就延伸到了（5，10）。10没必要加锁了，因为不等于5<br><br>3、然后如果select id from table_q where c&gt;=5and c&lt;=15 那肯定要从（0，5]开始 然后（10，15]也要是右闭区间，但是和第二个例子一样，引擎从左往右拿，怎么能确认到这个15就可以呢？万一后面还有15呢？肯定还要往后check，所以就会延伸到（15，20）。<br><br>4、再说这个<br>begin;<br>select * from t where id&gt;9 and id&lt;12 order by id desc for update;<br>首先因为是逆序，所以引擎是从右向左check<br>先check id&lt;12 (15,10] (10,5](5,0]<br>其次是id&gt;9 (wuqiong,15] (15,10] (10,5]<br>取交集 就是[5,15)<br><br>对于加锁，个人理解是知道其本质就好，没必要过分追求对其理解的精细程度，看他们的对加锁的迭代，是一版一版优化得来的，而所谓的这些加锁逻辑也是大部分人暗箱理解得出的一个大概结论。我们只需要知道其加锁的依据和原因，我觉得就已经对这块的内容理解的7788了。没必要钻进去si磕。说不定下个版本的加锁规则又微调了呢，开区间又变回了闭区间了呢？ 那我们一直纠结这种小细节的 岂不是要疯掉，还是那句话，知道和了解对于nextKeyLock的枷锁依据和本质后，对于Innodb开发者他们后续的改动在我们这里也只是锦上添花罢了","like_count":2,"discussions":[{"author":{"id":1804626,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/89/52/b96c272d.jpg","nickname":"🤐","note":"","ucode":"17D997E499E651","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580618,"discussion_content":"我一般都是你这么理解的 非唯一索引就是要多找一行 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658296794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1804626,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/89/52/b96c272d.jpg","nickname":"🤐","note":"","ucode":"17D997E499E651","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580617,"discussion_content":"对 感觉死磕没必要 看的心情烦 居然把bug当特性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658296692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247651,"user_name":"考拉出山","can_delete":false,"product_type":"c1","uid":1303954,"ip_address":"","ucode":"917E35FD7B2D06","user_header":"https://wx.qlogo.cn/mmopen/vi_32/1mOvT5fApeicXppMP3zADG6XIPicNt5D9dL6y46SF5UUcH0hicG21LM6xSgHJj5oAdzCyeGtLZYHYmlvaFwecrGOA/132","comment_is_top":false,"comment_ctime":1599786706,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10189721298","product_id":100020801,"comment_content":"第一个解释有误导，没说清楚。因为之前有例子说过  小于  大于 小于＜  ＞  不是等值查询。现在又来解释等值查询。","like_count":2,"discussions":[{"author":{"id":1228424,"avatar":"https://static001.geekbang.org/account/avatar/00/12/be/88/8d15796f.jpg","nickname":"John","note":"","ucode":"A46AF2906C38C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310903,"discussion_content":"用户sql 的范围查询在MySQL内部会转成&#34;对范围边界的等值查询&#34;","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1602120092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1364763,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d3/1b/94a0637b.jpg","nickname":"依旧木瓜","note":"","ucode":"A77CD9CE9F67EB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309926,"discussion_content":"我看着也是，几个优化都是有不同场景的，但是并没有解释的很详细。造成第一时间在往5个规则里套","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601520903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62730,"user_name":"PengfeiWang","can_delete":false,"product_type":"c1","uid":1308369,"ip_address":"","ucode":"C877BBE99192B2","user_header":"https://static001.geekbang.org/account/avatar/00/13/f6/d1/dcafd7cf.jpg","comment_is_top":false,"comment_ctime":1548144239,"is_pvip":false,"replies":[{"id":"22246","content":"主要是这里这一行不存在。。<br>如果能够明确找到一行锁住的话，使用优化1就更准确些","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548216054,"ip_address":"","comment_id":62730,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10138078831","product_id":100020801,"comment_content":"老师，您好：<br>         对文中以下语句感到有困惑：<br>我们说加锁单位是 next-key lock，都是前开后闭区，但是这里用到了优化 2，即索引上的等值查询，向右遍历的时候id=15不满足条件，所以 next-key lock 退化为了间隙锁 (10, 15)。<br>SQL语句中条件中使用的是id字段（唯一索引），那么根据加锁规则这里不应该用的是优化 2，而是优化 1，因为优化1中明确指出给唯一索引加锁，从而优化 2的字面意思来理解，它适用于普通索引。不知道是不是我理解的不到位？","like_count":2,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437326,"discussion_content":"主要是这里这一行不存在。。\n如果能够明确找到一行锁住的话，使用优化1就更准确些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548216054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197128,"user_name":"喻茂","can_delete":false,"product_type":"c1","uid":1318661,"ip_address":"","ucode":"C8BD8086A17365","user_header":"https://static001.geekbang.org/account/avatar/00/14/1f/05/8a06692e.jpg","comment_is_top":false,"comment_ctime":1585359710,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5880327006","product_id":100020801,"comment_content":"<br>begin;<br>select * from t where id&gt;9 and id&lt;12 order by id desc for update;   这个还是有点不太明白 <br>因为根据一个 bug：唯一索引上的范围查询会访问到不满足条件的第一个值为止。这个原则向左遍历找到5这个不满足条件的值应该要结束啊，加锁应该是[5,15) 为什么（0，5）还会加上间隙锁？","like_count":1,"discussions":[{"author":{"id":1889026,"avatar":"","nickname":"红颜铭心","note":"","ucode":"18F94E5444C71A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":232318,"discussion_content":"唯一索引上的范围查询会访问到不满足条件的第一个值为止; 并以该值为next-key Lock的右侧边界 索引上不满足条件的第一个值为5 以它为右边界应该是(0,5] 只不过觉得多锁了一段区间； 如果为order by id  asc，只有间歇锁(10,15) 同样以不满足条件的第一个值为右边界(加上优化规则2)，在这种情况下并没有多锁间隙； 个人分析：mysql是为了将规则变得更为通用；不过觉得可以优化下，将向左遍历加锁逻辑变更为，将不满足条件的第一个值作为next-key Lock的左侧区间值，避免过度加锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586866616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1351755,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a0/4b/b818d731.jpg","nickname":"kkk","note":"","ucode":"33C6170F5E0CD5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":219413,"discussion_content":"我也是不明白这一点，我感觉是不是和order by 有关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585754197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184981,"user_name":"路过的猪","can_delete":false,"product_type":"c1","uid":1207854,"ip_address":"","ucode":"5CC5FEB7977289","user_header":"https://static001.geekbang.org/account/avatar/00/12/6e/2e/008b5481.jpg","comment_is_top":false,"comment_ctime":1583461762,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5878429058","product_id":100020801,"comment_content":"百思不得其解：<br><br>begin;<br>select * from t where c &lt; 15 for update;<br>select * from t where c = 15 for update;<br>锁住 (-∞, 15] 、(15, 20)<br><br>begin;<br>select * from t where c &lt;= 15 for update;<br>锁住 (-∞, 15] 、(15, 20]<br><br>为什么使用 &lt;= 后，20这个记录就加上锁了呢？<br>是MySQL故意为之，还是有其他原因？","like_count":1,"discussions":[{"author":{"id":2882162,"avatar":"","nickname":"Geek_bf19f6","note":"","ucode":"869D41CD1A291E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544592,"discussion_content":"我感觉可以这么想 就是第一个➕-∞,15】肯定没问题 并且c小于15到15这块就可以结束了 所以不需要➕15,20的锁 但是还有一个=15的条件 所以利用这个等值来找到(15,20) 你的第二个事物同样是-∞,15]的开局 又因为这是从小到大的排序 而且只有一个锁条件(第一个事物有两个条件) 所以此范围查询的等值条件肯定是在左边的起点已经用完了 所以到20停止只是&lt;=的第一个的不符合的条件 这样一来15.20】就存在了 两者的区别在于事物一明确指出了15有等值的条件而事物二虽然&lt;=15的条件 但是并不能应用 15作为等值。这主要看到底是逆序还是正序 文中的都是正序 对于范围查找 都是最左边的当作等值条件 逆序则相反。于是乎15都不会做为等值查询 只不过事物1还有第二个加锁条件就是15的等值查询","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641573858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015341,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/2d/abb7bfe3.jpg","nickname":"无眠","note":"","ucode":"26EB12DDBE36C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300020,"discussion_content":"begin; select * from t_lock_test where c<16 for update;\n\n锁住了所有范围，更是奇怪","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597912943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176660,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1581132827,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"5876100123","product_id":100020801,"comment_content":"老师 最后那两个例子 我在我的MySQL 8.0上试是可以的 没有阻塞","like_count":1,"discussions":[{"author":{"id":1324550,"avatar":"https://static001.geekbang.org/account/avatar/00/14/36/06/08c46bcd.jpg","nickname":"聂利","note":"","ucode":"808E064089724D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587397,"discussion_content":"8.0修复了bug","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663032338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1990288,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5e/90/6ab53210.jpg","nickname":"付威","note":"","ucode":"7C0E9724647F9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263218,"discussion_content":"说没阻塞的是不是你没理解老师session B  是两个事务吧？是不是放在一个事务内了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589189362,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"一步","note":"","ucode":"73CEA468CE70C3","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1990288,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/5e/90/6ab53210.jpg","nickname":"付威","note":"","ucode":"7C0E9724647F9B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410395,"discussion_content":"放到一个事物里面 为什么可以执行成功的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635686075,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":263218,"ip_address":""},"score":410395,"extra":""}]},{"author":{"id":1586908,"avatar":"https://static001.geekbang.org/account/avatar/00/18/36/dc/97369381.jpg","nickname":"张钟强","note":"","ucode":"EE0D5CAEDBBAC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":233273,"discussion_content":"我也是mysql8.0的，没阻塞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586915443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133509,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1568595639,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"5863562935","product_id":100020801,"comment_content":"老师好!不知道还看得见么。很矛盾啊有个地方。<br>begin;<br>select * from t where id&gt;9 and id&lt;12 order by id desc for update;<br>加锁方位是(0,5]..(10.15)。加锁时是找到第一个不满足的条件然后加一个前开后闭的。所以(0,5]也被加锁了，可以。<br>但是到了下一个<br>begin;<br>select id from t where c in(5,20,10) lock in share mode;<br>在查找 c=5 的时候，先锁住了 (0,5]。但是因为 c 不是唯一索引，为了确认还有没有别的记录 c=5，就要向右遍历，找到 c=10 才确认没有了，这个过程满足优化 2，所以加了间隙锁 (5,10)。<br>你可能会说，这个加锁范围，不就是从 (5,25) 中去掉 c=15 的行锁吗？为什么这么麻烦地分段说呢？<br>下面这个加锁范围到底是多少啊?。<br>(0,25)还是(5,25)?c不是唯一索引不符合优化条件。之前9那一行。对(0,5]＋了锁。第一个不满足条件的是0，为啥不对(-xx，0]加锁呢?","like_count":1,"discussions":[{"author":{"id":1257945,"avatar":"https://static001.geekbang.org/account/avatar/00/13/31/d9/1a748694.jpg","nickname":"不是党员","note":"","ucode":"1C8DD42D693FFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377232,"discussion_content":"同样对【不就是从 (5,25) 中去掉 c=15 的行锁吗？】这句话有疑问，为什么是 (5,25) 而不是 (0,25) ？最开始不是已经根据原则 1 为区间 (0, 5] 添加 next-key lock 了么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622555459,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1788647,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/4a/e7/6c16af5d.jpg","nickname":"汉江","note":"","ucode":"01622D984B8F9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352675,"discussion_content":"我理解的为什么加锁分段说 是因为加锁是一个值一个值加的，那么这样的话 如果刚好有一个加锁是 倒序开始加 比如 先加 20 再加 10 再加 5 这样有可能这两个语句会形成死锁，如果是一下子把锁都加完 那顶多是 另一个事务等待 不会形成死锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614817576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1674555,"avatar":"https://static001.geekbang.org/account/avatar/00/19/8d/3b/42d9c669.jpg","nickname":"艾瑞克小霸王","note":"","ucode":"58FCCAC0F675E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166212,"discussion_content":"我也觉得是  (0,15) (15,25)... ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581355421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118298,"user_name":"锋芒","can_delete":false,"product_type":"c1","uid":1320419,"ip_address":"","ucode":"BB5284E3C8D78D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ach5TNuIu8T4Of8ibvfWM4JPic5uQn9Y7TgGjBHLp2iar4icxJzs14bpUXV9OdYiciblvJl14zSqXjwtDffHnSTqbD6g/132","comment_is_top":false,"comment_ctime":1564313645,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5859280941","product_id":100020801,"comment_content":"老师， 在读提交 隔离级别 也会有 间隙锁next-key lock  么 ？next-key lock 在mysql中怎么启动呢 ？","like_count":1,"discussions":[{"author":{"id":2542376,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","nickname":"夏天","note":"","ucode":"5F224DDAC94DFF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368693,"discussion_content":"在读提交 隔离级别 除了外键用到 gap 锁，其他都是行锁","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1618804940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":98817,"user_name":"还一棵树","can_delete":false,"product_type":"c1","uid":1317709,"ip_address":"","ucode":"C187F2A141D60E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eop9WylZJicLQxlvXukXUgPp39zJHyyReK5s1C9VhA6rric7GiarbfQMuWhdCCDdxdfL610Hc4cNkn9Q/132","comment_is_top":false,"comment_ctime":1559099998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5854067294","product_id":100020801,"comment_content":"为什么我在5.6的版本上 测试  文中最后2个死锁的案例都没有复现 （rr，rc都测试了，没有复现死锁）<br>CREATE TABLE `t` (<br>  `id` int(11) NOT NULL,<br>  `c` int(11) DEFAULT NULL,<br>  `d` int(11) DEFAULT NULL,<br>  PRIMARY KEY (`id`),<br>  KEY `i_c` (`c`)<br>) ENGINE=InnoDB DEFAULT CHARSET=latin1；<br>gaotuan[test]11:17:59&gt;select *  from t;<br>+----+------+------+<br>| id | c    | d    |<br>+----+------+------+<br>|  0 |    0 |    0 |<br>|  1 |    1 |    1 |<br>|  5 |    5 |    5 |<br>| 10 |   10 |   10 |<br>| 15 |   15 |   15 |<br>| 20 |   20 |   20 |<br>| 25 |   25 |   25 |<br>+----+------+------+<br>session1：<br>gaotuan[test]11:02:04&gt;begin;<br>Query OK, 0 rows affected (0.00 sec)<br><br>gaotuan[test]11:02:07&gt;select c from t where c&gt;5 lock in share mode;<br>+------+<br>| c    |<br>+------+<br>|   10 |<br>|   15 |<br>|   20 |<br>|   25 |<br>+------+<br>4 rows in set (0.00 sec)<br><br>session2：<br>gaotuan[test]11:05:08&gt;begin;<br>Query OK, 0 rows affected (0.00 sec)<br><br>gaotuan[test]11:05:11&gt;<br>gaotuan[test]11:05:13&gt;delete from t where id=10;<br>Query OK, 1 row affected (0.00 sec)<br><br>gaotuan[test]11:05:19&gt;insert into t values(10,10,10);<br>Query OK, 1 row affected (0.00 sec)<br><br>gaotuan[test]11:05:30&gt;rollback;","like_count":1},{"had_liked":false,"id":76522,"user_name":"w","can_delete":false,"product_type":"c1","uid":1318306,"ip_address":"","ucode":"DB837CAE2FB7C7","user_header":"https://static001.geekbang.org/account/avatar/00/14/1d/a2/ef8758c9.jpg","comment_is_top":false,"comment_ctime":1552625682,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"5847592978","product_id":100020801,"comment_content":"有个很奇怪的现象<br>session a: begin; select * from cd where c &lt;= 10 for update;<br>session b: select * from cd where c = 15 for update;<br>此时session b会被block<br>session a稍作修改<br>session a: begin; select * from cd where c = 10 for update;<br>session b: select * from cd where c = 15 for update;<br>\b此时session b不会被阻塞住。我理解即使c&lt;=10这种也不应该阻塞c=15。<br>我理解的加锁过程是等值查找到c=10这一行，向右遍历 next-key lock为（10，15]，根据优化2退化为(10,15) 。但是实验结果令人费解","like_count":1,"discussions":[{"author":{"id":1593250,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/KRaFF1vD8IklMK39rL3JxQ4LwvG04P8IIUU63Kk0Js6GA3iclxJH3YFA2nm07Ajc6QsnKbgSqhj8N5OPBRib2GuA/132","nickname":"River91","note":"","ucode":"D0E7C001E4188E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2452,"discussion_content":"explain一下，发现没有走索引，走了全表扫描，根据规则2，所有记录都会加锁。我是这么理解的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563633646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1986739,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/50/b3/9269cd59.jpg","nickname":"LWD","note":"","ucode":"DDA444DB113C01","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568650,"discussion_content":"范围查询是bug。不会退化间隙锁。这些加锁的规则一定要区分好种类。比如唯一索引等值查询。非唯一索引等值查询。等值范围。范围，排序...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651194266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1226968,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/d8/f81b5604.jpg","nickname":"hcyycb","note":"","ucode":"77FF6CA41F9E66","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4485,"discussion_content":"主要是你这里用的是 排它锁，而且 select * 这样是要“回表”的，用explain 显示是全表扫描，访问到的对象都要加锁，加了排它锁后，其他想读的锁都加不上了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565458365,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1226196,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b5/d4/3bd5b77b.jpg","nickname":"佑儿","note":"","ucode":"0629888E7A5E16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1922,"discussion_content":"我也有同样的疑问，哪位大神解答下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563097206,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62305,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1548030269,"is_pvip":false,"replies":[{"id":"22027","content":"第22篇文章末尾有说明的","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548037252,"ip_address":"","comment_id":62305,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5842997565","product_id":100020801,"comment_content":"第 21 篇文章的课后思考题，当我们执行 select * from t where c&gt;=15 and c&lt;=20 order by c desc lock in share mode; 向左扫描到 c=10 的时候，要把 (5, 10] 锁起来。这里面怎么会把5-10也锁起来？不是向左遍历找到10就结束了？干嘛还要找5","like_count":1,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437164,"discussion_content":"第22篇文章末尾有说明的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548037238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1997293,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/79/ed/4737a49b.jpg","nickname":"雪の雫·雨の音","note":"","ucode":"0693DA3939A321","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":270903,"discussion_content":"next-key lock是加锁的基本单位，所以扫描到c=10的记录的时候加锁加的就是(5,10]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590067874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357832,"user_name":"LL","can_delete":false,"product_type":"c1","uid":3004698,"ip_address":"山西","ucode":"1E498475B2D9EC","user_header":"https://static001.geekbang.org/account/avatar/00/2d/d9/1a/f5bb1a23.jpg","comment_is_top":false,"comment_ctime":1663668938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1663668938","product_id":100020801,"comment_content":"老师您好，首先感谢老师，从老师这学到了不少MySQL的知识。之前看这三篇的文章的时候云里雾里，最近快看完专栏了，又回过头来看间隙锁这块，大部分问题都明朗了，但还是有疑惑，加锁规则2：查找过程中访问到的对象“才会”加锁（21讲案例2中又写到 根据原则 2，访问到的“都要”加锁 ）。<br><br>1.第一个问题：<br>按照扫描到都要加的话，第20讲中，c=5的等值查询，加了(0，5]，再扫描到不符合的条件10，加(5,10]再优化为(5,10)。看了第30讲之后，不等号里的等值查询，id&gt;12，是先找id=12。那后边的id&gt;10的范围查询，不应该就是先找id=10的记录吗，此id=10这个记录存在，根据访问到都要加锁,那为什么不加next-key lock (再优化成行锁)。<br>2.第二个问题<br>非唯一索引的等值查询，如c=5，id=5,为什么有必要加(5,10)的锁？不加的话，c=5,id=6，会被阻塞吗。<br>接触专栏的时间比较晚，不知道老师还关注留言不~","like_count":0},{"had_liked":false,"id":350755,"user_name":"弋延","can_delete":false,"product_type":"c1","uid":2708966,"ip_address":"","ucode":"D04AAEDF8C658A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epRo9GU1yic8fZwJp2ia9qq0RL7nCvDcosxwwIMZxSHtxjh4aLezyuvYdzgsEY2cib9ibSJNIqb8gFqHw/132","comment_is_top":false,"comment_ctime":1657173389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657173389","product_id":100020801,"comment_content":"范围、等值","like_count":0},{"had_liked":false,"id":347706,"user_name":"whyly","can_delete":false,"product_type":"c1","uid":1798882,"ip_address":"","ucode":"D34D6B7164C982","user_header":"https://static001.geekbang.org/account/avatar/00/1b/72/e2/95b0543c.jpg","comment_is_top":false,"comment_ctime":1654331900,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654331900","product_id":100020801,"comment_content":"空表间隙是(Infimum, Supremum]","like_count":0},{"had_liked":false,"id":339576,"user_name":"佐佐真君","can_delete":false,"product_type":"c1","uid":2761438,"ip_address":"","ucode":"CE6E1A08C30DB1","user_header":"https://static001.geekbang.org/account/avatar/00/2a/22/de/1351551d.jpg","comment_is_top":false,"comment_ctime":1648199185,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648199185","product_id":100020801,"comment_content":"可以从B+数蟹行协议的角度来理解next-key lock和行锁之间的转化","like_count":0},{"had_liked":false,"id":338370,"user_name":"寥若晨星","can_delete":false,"product_type":"c1","uid":1447739,"ip_address":"","ucode":"2E87E43687DE72","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eou1BMETumU21ZI4yiaLenOMSibzkAgkw944npIpsJRicmdicxlVQcgibyoQ00rdGk9Htp1j0dM5CP2Fibw/132","comment_is_top":false,"comment_ctime":1647441052,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647441052","product_id":100020801,"comment_content":"大家貌似都对等值查询的查找过程，查找的过程中是否访问了某个记录这种问题理不清楚，希望再补充一下","like_count":0},{"had_liked":false,"id":338024,"user_name":"杰sir","can_delete":false,"product_type":"c1","uid":1098505,"ip_address":"","ucode":"80BB56B3BFB71A","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/09/dc368335.jpg","comment_is_top":false,"comment_ctime":1647241010,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647241010","product_id":100020801,"comment_content":"疑问：<br>select * from t where id &gt;=10 and id &lt;= 15 order by id desc for update<br>如何分析这个例子的加锁流程呢？<br>1，等值查询id=15，找到了，对id=15加行锁【优化1】<br>2，order by id desc 向左遍历，找到id=10，加next-key lock (5,10]，满足id&gt;=10继续向左遍历，<br>3，找到id=5，加next-key lock (0,5]，不满足id&gt;=10结束<br>4，最终加锁范围是(0,5],(5,10],15，但明显有问题，如何解释呢？<br><br>order id asc则很好分析：<br>select * from t where id &gt;=10 and id &lt;= 15 for update<br>如何分析这个例子的加锁流程呢？<br>1，等值查询id=10，找到了，对id=10加行锁【优化1】<br>2，向右遍历，找到id=15，加next-key lock (10,15]，满足id&lt;=15继续向右遍历，<br>3，找到id=20，加next-key lock (15,20]，不满足id&lt;=15结束<br>4，最终加锁范围是10,(10,15],(15,20]","like_count":0},{"had_liked":false,"id":327673,"user_name":"yueyuebaby","can_delete":false,"product_type":"c1","uid":1100903,"ip_address":"","ucode":"7766CFACE88D91","user_header":"https://static001.geekbang.org/account/avatar/00/10/cc/67/2ce23ee6.jpg","comment_is_top":false,"comment_ctime":1640228165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640228165","product_id":100020801,"comment_content":"老师，您好。这个死锁问题一直没有理解，主键记录的update更新自增某个字段死锁了，如sql：        update `tb_cp`  SET  `completed_total`  =`completed_total`  +1 WHERE  id = 644<br>        并发更新。麻烦老师解答一下，谢谢。<br>死锁日志如下：<br>        2021-05-16 14:39:45 7fbd4ffff700<br>        *** (1) TRANSACTION:<br>        TRANSACTION 40213711, ACTIVE 1.169 sec starting index read<br>        mysql tables in use 1, locked 1<br>        LOCK WAIT 27 lock struct(s), heap size 2936, 19 row lock(s), undo log entries 8<br>        LOCK BLOCKING MySQL thread id: 822312382 block 839573619<br>        MySQL thread id 839573619, OS thread handle 0x7fbd49bff700, query id 1115380 10.168.23.17 cp updating<br>        update `tb_cp`  SET  `completed_total`  =`completed_total`  +1 WHERE  id = 644<br>        *** (1) WAITING FOR THIS LOCK TO BE GRANTED:<br>        RECORD LOCKS space id 26 page no 8 n bits 296 index `PRIMARY` of table `xl`.`tb_cp` trx id 40213711 lock_mode X locks rec but not gap waiting<br>        Record lock, heap no 64 PHYSICAL RECORD: n_fields 12; compact format; info bits 0<br>        *** (2) TRANSACTION:<br>        TRANSACTION 40213713, ACTIVE 0.927 sec starting index read<br>        mysql tables in use 1, locked 1<br>        27 lock struct(s), heap size 2936, 19 row lock(s), undo log entries 8<br>        MySQL thread id 822312382, OS thread handle 0x7fbd4ffff700, query id 1115413 10.168.23.17 cp updating<br>        update `tb_cp`  SET  `completed_total`  =`completed_total`  +1 WHERE  id = 644<br>        *** (2) HOLDS THE LOCK(S):<br>        RECORD LOCKS space id 26 page no 8 n bits 296 index `PRIMARY` of table `xl`.`tb_cp` trx id 40213713 lock mode S locks rec but not gap<br>        Record lock, heap no 64 PHYSICAL RECORD: n_fields 12; compact format; info bits 0<br>        *** (2) WAITING FOR THIS LOCK TO BE GRANTED:<br>        RECORD LOCKS space id 26 page no 8 n bits 296 index `PRIMARY` of table `xl`.`tb_cp` trx id 40213713 lock_mode X locks rec but not gap waiting<br>        Record lock, heap no 64 PHYSICAL RECORD: n_fields 12; compact format; info bits 0<br>        *** WE ROLL BACK TRANSACTION (2)","like_count":0},{"had_liked":false,"id":324419,"user_name":"FelixFly","can_delete":false,"product_type":"c1","uid":1160461,"ip_address":"","ucode":"1D39A7C3D0E31F","user_header":"https://static001.geekbang.org/account/avatar/00/11/b5/0d/0e65dee6.jpg","comment_is_top":false,"comment_ctime":1638426068,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1638426068","product_id":100020801,"comment_content":"begin;<br>select * from t where id&gt;9 and id&lt;12 order by id desc for update;<br>加锁范围是主键索引上的 (0,5]、(5,10]和 (10, 15)，其中(5,10]和 (10, 15)都好理解，不是有id &gt; 9 条件么？为啥还会锁(0,5]？<br><br>当去掉了`order by id desc` ，加锁范围是主键索引上的(5,10]和 (10, 15]，这个又包含15是什么原因<br><br>","like_count":0,"discussions":[{"author":{"id":1160461,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b5/0d/0e65dee6.jpg","nickname":"FelixFly","note":"","ucode":"1D39A7C3D0E31F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535719,"discussion_content":"尴尬，文章下面找不到自己的留言记录，提的问题自己没有办法回答，记得APP上有精选留言，所以在这评论下自己，经过自己的探索和理解：\n语句1：`begin; select * from t where id &gt; 9 and id &lt; 12 order by id desc for update`;\n\n这个锁的范围是(0,5]、(5,10]和(10,15)\n\n* 由于存在`order by id desc`存在，索引先从`id &lt; 12`开始查找12的位置，没有找到，找到了(10,15)的间隙，优化②\n* 向左遍历，查询到10这个值，这个时候加(5,10]，判断条件id &gt; 9 成立，继续向左遍历，原则①和原则②\n* 向左遍历，查询到5这个值，这个时候加(0,5]，判断条件id &gt; 9 不成立了，结束加锁，原则①和原则②\n\n语句2：`begin; select * from t where id &gt; 9 and id &lt; 12 for update`;\n\n这个锁的范围是(5,10]和(10,15]\n\n* `id &gt; 9` 先找到9 这个值，没有找到，找到了(5,10)的间隙，优化②\n* 向右遍历，找到10这个值，这个时候加(5,10]，判断条件id &lt;12 成立，原则①和原则②\n* 向右遍历，找到15这个值，这个时候加(10,15]，判断条件id &lt;12 不成立了，结束加锁，原则①和原则②","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638523833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318467,"user_name":"Wolf、Heart","can_delete":false,"product_type":"c1","uid":1111825,"ip_address":"","ucode":"9A6FC15DAF6269","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/11/714285d8.jpg","comment_is_top":false,"comment_ctime":1635304604,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1635304604","product_id":100020801,"comment_content":"1.执行语句select * from t where id&gt;9 and id&lt;12 order by id desc for update，加锁范围：(0,5]、(5,10]和 (10, 15)，给出的解释：引擎内部会查找12这条记录，由于记录不存在，只能找到(10,15)间隙<br>2.执行select c from t where c &gt; 5 lock in share mode语句，按照如上的解释，引擎内部应该查找5这条记录，那么加锁范围就应该包含(0, 5)，然而实际加锁范围：(5,10]、(10,15]、(15,20]、(20,25](25,supremum]<br>期待你的回复，解除心中疑惑，感激不尽<br>","like_count":0,"discussions":[{"author":{"id":1111825,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f7/11/714285d8.jpg","nickname":"Wolf、Heart","note":"","ucode":"9A6FC15DAF6269","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412414,"discussion_content":"范围查询首先也是定位记录，针对第二条查询语句c > 5，可以先定位5这条记录，因此加锁范围（0,5]，(5,10],(10,15],(15,20],(20,25],(25,superme],由于5这条记录只是用于辅助定位记录，在查询中其实并不存在，因此需要把(0,5]加锁范围去除","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636162913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316431,"user_name":"小乙哥","can_delete":false,"product_type":"c1","uid":1063308,"ip_address":"","ucode":"C77E79BEA0C325","user_header":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","comment_is_top":false,"comment_ctime":1634302562,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634302562","product_id":100020801,"comment_content":"https:&#47;&#47;stackoverflow.com&#47;questions&#47;66898742&#47;mysql-unique-key-causes-dead-lock<br>哪位大神可以帮忙分析一下这个死锁","like_count":0},{"had_liked":false,"id":315942,"user_name":"特立独行的猪","can_delete":false,"product_type":"c1","uid":1465344,"ip_address":"","ucode":"1440F96375740A","user_header":"https://static001.geekbang.org/account/avatar/00/16/5c/00/5d11e68d.jpg","comment_is_top":false,"comment_ctime":1634078101,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634078101","product_id":100020801,"comment_content":"session 1：<br>delete from t2;<br>begin; select * from t2 for update;<br>session 2:<br>insert into t2 values(1,1,1);发生等待<br><br>show engine innodb status\\G;<br>------------<br>TRANSACTIONS<br>------------<br>Trx id counter 104558<br>Purge done for trx&#39;s n:o &lt; 104549 undo n:o &lt; 0 state: running but idle<br>History list length 0<br>LIST OF TRANSACTIONS FOR EACH SESSION:<br>---TRANSACTION 421974886751856, not started<br>0 lock struct(s), heap size 1136, 0 row lock(s)<br>---TRANSACTION 104557, ACTIVE 24 sec inserting<br>mysql tables in use 1, locked 1<br>LOCK WAIT 2 lock struct(s), heap size 1136, 1 row lock(s)<br>MySQL thread id 34, OS thread handle 140477509486336, query id 349 localhost root update<br>insert into t2 values(1)<br>------- TRX HAS BEEN WAITING 24 SEC FOR THIS LOCK TO BE GRANTED:<br>RECORD LOCKS space id 44 page no 3 n bits 72 index PRIMARY of table `test01`.`t2` trx id 104557 lock_mode X insert intention waiting<br>Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0<br>0: len 8; hex 73757072656d756d; asc supremum;;<br><br>mysql&gt; select * from information_schema.innodb_locks;<br>+---------------+-------------+-----------+-----------+---------------+------------+------------+-----------+----------+------------------------+<br>| lock_id       | lock_trx_id | lock_mode | lock_type | lock_table    | lock_index | lock_space | lock_page | lock_rec | lock_data              |<br>+---------------+-------------+-----------+-----------+---------------+------------+------------+-----------+----------+------------------------+<br>| 104557:44:3:1 | 104557      | X         | RECORD    | `test01`.`t2` | PRIMARY    |         44 |         3 |        1 | supremum pseudo-record |<br>| 104555:44:3:1 | 104555      | X         | RECORD    | `test01`.`t2` | PRIMARY    |         44 |         3 |        1 | supremum pseudo-record |<br>+---------------+-------------+-----------+-----------+---------------+------------+------------+-----------+----------+------------------------+<br><br>其中申请插入意向锁与间隙锁 冲突，supremum就是间隙右边的那个记录","like_count":0},{"had_liked":false,"id":278486,"user_name":"励研冰","can_delete":false,"product_type":"c1","uid":1106394,"ip_address":"","ucode":"FCBC8266018FA0","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/da/d7f591a7.jpg","comment_is_top":false,"comment_ctime":1612969664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612969664","product_id":100020801,"comment_content":"老师在开始的第一个例子中说：在执行过程中，通过树搜索的方式定位记录的时候，用的是“等值查询”的方法。<br>在 怎么看锁等待的例子中<br>select * from t where id &gt;10 and I’d&lt;=15 for update<br>如果按照例子一的结论&gt;10的点应该会找到id=10这一行，这时候可以用到优化1，所以会给is=10的这一行加锁啊，为什么没有加锁能删除成功呢？","like_count":0},{"had_liked":false,"id":258441,"user_name":"creed","can_delete":false,"product_type":"c1","uid":1911117,"ip_address":"","ucode":"617CA912AE9CD1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3wia2iaNnpnfRYs5O1OIYWhv7oEXSiaArqc9tIkicKVxBLUCycdBoNvzMfF2GRl89e7oJ2icZNCvdMD5iaibcOVemX5GA/132","comment_is_top":false,"comment_ctime":1604448515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604448515","product_id":100020801,"comment_content":"老师请教一个问题，死锁分析中：<br>“n_fields 2 表示这个记录是两列，也就是字段 c 和主键字段 id；0: len 4; hex 0000000a; asc ;; 是第一个字段，也就是 c。值是十六进制 a，也就是 10；1: len 4; hex 0000000a; asc ;; 是第二个字段，也就是主键 id，值也是 10；” 怎么看出n_fileds 2就是字段c和主键id","like_count":0},{"had_liked":false,"id":258285,"user_name":"@%初%@","can_delete":false,"product_type":"c1","uid":1053509,"ip_address":"","ucode":"2B8A6134675ED7","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/45/16c60da2.jpg","comment_is_top":false,"comment_ctime":1604369472,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"1604369472","product_id":100020801,"comment_content":"丁老师，你好，关于 select * from t where id&gt;9 and id&lt;12 order by id desc for update; 我一直没理解为什么(0,5]这个间隙也加上锁了，id&lt;12向左遍历，锁上(0,5]这个间隙是为了防止在这个间隙中插入数据，导致前后数据不一致，这个我能理解，但是不是还有 id&gt;9这个条件吗，这样其实是可以保证不访问(0,5]这个间隙的，这样理解对吗？希望详细解答下。","like_count":0,"discussions":[{"author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348576,"discussion_content":"同意，其实只用锁到(5，10]，就可以了，之所以锁到(0，5]感觉是纯粹为了代码逻辑统一，可以重复调用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612636318,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1857196,"avatar":"","nickname":"文野","note":"","ucode":"6193A3648DD557","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1526355,"avatar":"https://static001.geekbang.org/account/avatar/00/17/4a/53/063f9d17.jpg","nickname":"moonfox","note":"","ucode":"902BFF40EFA9FA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384058,"discussion_content":"我觉得不是，要不就是代码写的有问题，这个间隙真的没必要锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626346814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348576,"ip_address":""},"score":384058,"extra":""}]}]},{"had_liked":false,"id":254685,"user_name":"Geek_1968cf","can_delete":false,"product_type":"c1","uid":2224546,"ip_address":"","ucode":"1839F5CD2CCD63","user_header":"","comment_is_top":false,"comment_ctime":1603168119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603168119","product_id":100020801,"comment_content":"老师好，确认个问题。update  t set c=1 where b=2; b是普通索引，有三行数据b=2。给b索引等于2加锁，这三行索引是一下子加了锁，还是一行一行加的锁呢。如果有其他的事务来给这几行数据加锁，会产生死锁吗？","like_count":0},{"had_liked":false,"id":253330,"user_name":"周兴佳","can_delete":false,"product_type":"c1","uid":1925466,"ip_address":"","ucode":"E5F941019F1D2E","user_header":"","comment_is_top":false,"comment_ctime":1602685765,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602685765","product_id":100020801,"comment_content":"-- session 1;<br>begin;<br>select c from t WHERE c &gt; 5 LOCK IN SHARE MODE;<br>-- session 2;<br>BEGIN;<br>UPDATE t SET c = 2 WHERE c = 5;<br>-- session 3<br>BEGIN;<br>INSERT INTO `t` (`id`, `c`, `d`) VALUES (1, 1, 1);<br>session 3 为什么会锁住？","like_count":0},{"had_liked":false,"id":252852,"user_name":"...","can_delete":false,"product_type":"c1","uid":2173050,"ip_address":"","ucode":"DD6CFE144B4D6D","user_header":"https://static001.geekbang.org/account/avatar/00/21/28/7a/8e71fccf.jpg","comment_is_top":false,"comment_ctime":1602502085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602502085","product_id":100020801,"comment_content":"<br>select * from t where id&gt;9 and id&lt;12 order by id desc for update;<br>为什么这句要在(0,5] 加锁？想了半天都不明白 范围查询中c=5不是已经不符合，可以直接不要？","like_count":0},{"had_liked":false,"id":250819,"user_name":"别问","can_delete":false,"product_type":"c1","uid":1500187,"ip_address":"","ucode":"B24480E6E5792B","user_header":"https://static001.geekbang.org/account/avatar/00/16/e4/1b/76d3b44c.jpg","comment_is_top":false,"comment_ctime":1601253636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601253636","product_id":100020801,"comment_content":"老师你好，关于死锁日志含义有什么推荐资料阅读嘛，我查到的一些都是参差不齐，帮助不大的-.-","like_count":0},{"had_liked":false,"id":248844,"user_name":"一块跑跑","can_delete":false,"product_type":"c1","uid":1177796,"ip_address":"","ucode":"576EC5A37721FD","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/c4/c7f665df.jpg","comment_is_top":false,"comment_ctime":1600332822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600332822","product_id":100020801,"comment_content":"老师好，针对 select * from t where id&gt;9 and id&lt;12 order by id desc for update; 这个的加锁还不太了解，经过测试，在这条语句执行期间，照样可以执行insert into t values(13,13,13)，insert into t values(2,2,2)，insert into t values(7,7,7)，按照间课程分析来看应该都阻塞才对啊","like_count":0},{"had_liked":false,"id":247674,"user_name":"考拉出山","can_delete":false,"product_type":"c1","uid":1303954,"ip_address":"","ucode":"917E35FD7B2D06","user_header":"https://wx.qlogo.cn/mmopen/vi_32/1mOvT5fApeicXppMP3zADG6XIPicNt5D9dL6y46SF5UUcH0hicG21LM6xSgHJj5oAdzCyeGtLZYHYmlvaFwecrGOA/132","comment_is_top":false,"comment_ctime":1599790494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599790494","product_id":100020801,"comment_content":"21讲中有这么个例子“select * from t where id&gt;=10 and id&lt;11 for update;” 首次 session A 定位查找 id=10 的行的时候，是当做等值查询来判断的，而向右扫描到 id=15 的时候，用的是范围查询判断。，session A 这时候锁的范围就是主键索引上，行锁 id=10 和 next-key lock(10,15]  <br><br>本章中第一个例子“select * from t where id&gt;9 and id&lt;12 order by id desc for update;”为什么这里找到 15  就不是范围查找 而是等值查找 15 不加行锁","like_count":0},{"had_liked":false,"id":237677,"user_name":"lleft","can_delete":false,"product_type":"c1","uid":1970443,"ip_address":"","ucode":"D573EB509455AE","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIx1V1QAxC4NHaxYZGyuibBN8lcURJWc5nrnO4yic1kxnDemYV2FJGialf47kYX9qtDnZZOfe1SJeLicg/132","comment_is_top":false,"comment_ctime":1595922431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595922431","product_id":100020801,"comment_content":"文中等值查询的死锁问题，没有模拟出来，只有锁等待，并没有死锁。<br>session1：<br>begin;<br>select id from t where c in(5,20,10) lock in share mode;<br><br>session2：<br>select id from t where c in(5,20,10) order by c desc for update;<br>不会死锁呀，只有锁等待。。。","like_count":0},{"had_liked":false,"id":234893,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1594821074,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594821074","product_id":100020801,"comment_content":"老师可如果两条sql语句，update t set d=1 where c in (5,10,15)和update t set d=1 where c in (15,10,5)，这两条语句mysql会做优化么，还是加锁顺序就是in语句里面的值的顺序。","like_count":0},{"had_liked":false,"id":234882,"user_name":"坐地铁的程序员","can_delete":false,"product_type":"c1","uid":1621470,"ip_address":"","ucode":"A04A239D173E2A","user_header":"https://static001.geekbang.org/account/avatar/00/18/bd/de/e0c994b3.jpg","comment_is_top":false,"comment_ctime":1594817393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594817393","product_id":100020801,"comment_content":"老师我的数据库是8.0.17，表结构是CREATE TABLE hero (<br>    number INT,<br>    name VARCHAR(100),<br>    country varchar(100),<br>    PRIMARY KEY (number),<br>    UNIQUE idx_name (name)<br>) Engine=InnoDB CHARSET=utf8;<br>插入数据INSERT INTO hero VALUES<br>    (1, &#39;l刘备&#39;, &#39;蜀&#39;),<br>    (3, &#39;z诸葛亮&#39;, &#39;蜀&#39;),<br>    (8, &#39;c曹操&#39;, &#39;魏&#39;),<br>    (15, &#39;x荀彧&#39;, &#39;魏&#39;),<br>    (20, &#39;s孙权&#39;, &#39;吴&#39;); <br>事务1：执行SELECT * FROM hero FORCE INDEX(uk_name) WHERE name &gt;= &#39;c曹操&#39; LOCK IN SHARE MODE;未提交<br>事务2：执行insert into hero values(7,&#39;b保利&#39;,&#39;未知&#39;);会阻塞<br>按照优化1，c曹操的唯一索引等值查询应该是加普通行锁，但是执行show engine innodb status，却看到lock_mode X locks gap before rec insert intention waiting，老师解答一下","like_count":0},{"had_liked":false,"id":234881,"user_name":"坐地铁的程序员","can_delete":false,"product_type":"c1","uid":1621470,"ip_address":"","ucode":"A04A239D173E2A","user_header":"https://static001.geekbang.org/account/avatar/00/18/bd/de/e0c994b3.jpg","comment_is_top":false,"comment_ctime":1594817389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594817389","product_id":100020801,"comment_content":"老师我的数据库是8.0.17，表结构是CREATE TABLE hero (<br>    number INT,<br>    name VARCHAR(100),<br>    country varchar(100),<br>    PRIMARY KEY (number),<br>    UNIQUE idx_name (name)<br>) Engine=InnoDB CHARSET=utf8;<br>插入数据INSERT INTO hero VALUES<br>    (1, &#39;l刘备&#39;, &#39;蜀&#39;),<br>    (3, &#39;z诸葛亮&#39;, &#39;蜀&#39;),<br>    (8, &#39;c曹操&#39;, &#39;魏&#39;),<br>    (15, &#39;x荀彧&#39;, &#39;魏&#39;),<br>    (20, &#39;s孙权&#39;, &#39;吴&#39;); <br>事务1：执行SELECT * FROM hero FORCE INDEX(uk_name) WHERE name &gt;= &#39;c曹操&#39; LOCK IN SHARE MODE;未提交<br>事务2：执行insert into hero values(7,&#39;b保利&#39;,&#39;未知&#39;);会阻塞<br>按照优化1，c曹操的唯一索引等值查询应该是加普通行锁，但是执行show engine innodb status，却看到lock_mode X locks gap before rec insert intention waiting，老师解答一下","like_count":0},{"had_liked":false,"id":231675,"user_name":"小沙","can_delete":false,"product_type":"c1","uid":1170866,"ip_address":"","ucode":"9AD2FE435168B4","user_header":"","comment_is_top":false,"comment_ctime":1593746271,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593746271","product_id":100020801,"comment_content":"老师，如何显示SQL语句所加间隙锁？<br>如，使用show engine innodb status之类的，如何查看间隙锁的范围。如果MYSQL能显示出来所加的间隙锁，一方面有利于自己的学习和验证，一方面线上遇到问题也能确切的知道原因。","like_count":0},{"had_liked":false,"id":224183,"user_name":"心声","can_delete":false,"product_type":"c1","uid":1448630,"ip_address":"","ucode":"ABFFC9137B0FC8","user_header":"https://static001.geekbang.org/account/avatar/00/16/1a/b6/4777f789.jpg","comment_is_top":false,"comment_ctime":1591314643,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591314643","product_id":100020801,"comment_content":"开启两个事务，事务a插入数据从0-10，事务b插入数据从5-15，请问会发生死锁吗？","like_count":0,"discussions":[{"author":{"id":1324550,"avatar":"https://static001.geekbang.org/account/avatar/00/14/36/06/08c46bcd.jpg","nickname":"聂利","note":"","ucode":"808E064089724D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587400,"discussion_content":"插入意向锁之间是不会冲突的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663034726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223778,"user_name":"鲁班大师","can_delete":false,"product_type":"c1","uid":1179156,"ip_address":"","ucode":"4F9615DF87B031","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/14/f1532dec.jpg","comment_is_top":false,"comment_ctime":1591178192,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1591178192","product_id":100020801,"comment_content":"update user_item set status=1 where user_id=? and item_id=?<br>老师，这个语句会死锁吗，假设user_id和item_id都加了索引，在执行过程中是先在主键索引加锁还是在非主键索引加锁呢","like_count":0,"discussions":[{"author":{"id":1324550,"avatar":"https://static001.geekbang.org/account/avatar/00/14/36/06/08c46bcd.jpg","nickname":"聂利","note":"","ucode":"808E064089724D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587401,"discussion_content":"应该是查询阶段只会选择一个索引，然后加锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663034847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221991,"user_name":"Geek_a8be59","can_delete":false,"product_type":"c1","uid":1563985,"ip_address":"","ucode":"BEC0F57B51DC44","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdiaUiaCYQe9tibemaNU5ya7RrU3MYcSGEIG7zF27u0ZDnZs5lYxPb7KPrAsj3bibM79QIOnPXAatfIw/132","comment_is_top":false,"comment_ctime":1590651323,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590651323","product_id":100020801,"comment_content":"老师您好，请问一下这个要怎么解释？<br>SELECT * from t where id &gt;10 and id &lt;15 for update;<br><br>第一个问题：为什么这个实际锁住了15这行？<br>按照我的理解：等值查询“id&gt;10”,扫描到15这行，所以根据优化二，这个加的是应该是(10,15)不是么。<br>第二个问题：优化二里面所说的“不满足等值条件”里的这个等值条件具体指什么的，比如上面说是指id&gt;10还是id&gt;10 and id&lt;15","like_count":0},{"had_liked":false,"id":219705,"user_name":"雪の雫·雨の音","can_delete":false,"product_type":"c1","uid":1997293,"ip_address":"","ucode":"0693DA3939A321","user_header":"https://static001.geekbang.org/account/avatar/00/1e/79/ed/4737a49b.jpg","comment_is_top":false,"comment_ctime":1590067604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590067604","product_id":100020801,"comment_content":"回答问题：<br>有，这个间隙是由supremum定义的。<br>验证：<br>1、创建一个空表t<br>CREATE TABLE `t` ( `id` int(11) NOT NULL, `c` int(11) DEFAULT NULL, `d` int(11) DEFAULT NULL, PRIMARY KEY (`id`), KEY `c` (`c`)) ENGINE=InnoDB;<br>2、sessionA执行<br>begin;<br>select * from t for update;<br>3、sessionB执行<br>insert into t values(1,1,1);<br><br>发现sessionB的插入操作被阻塞。<br>此时执行show engine innodb status，发现其结果中关于锁的信息为：<br>RECORD LOCKS space id 2309 page no 4 n bits 72 index PRIMARY of table `mldn`.`t` trx id 368234 lock_mode X insert intention waiting<br>Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0<br> 0: len 8; hex 73757072656d756d; asc supremum;;<br>验证了next-key lock是到supremum为止的。<br><br>","like_count":0},{"had_liked":false,"id":214698,"user_name":"上善若水","can_delete":false,"product_type":"c1","uid":1116397,"ip_address":"","ucode":"F4EC3FA1F27594","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/ed/fe5242fe.jpg","comment_is_top":false,"comment_ctime":1588784304,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588784304","product_id":100020801,"comment_content":"老师，问个问题。<br>为什么 Select * from t where id&gt;10 and id&lt;15 for update; 这个语句的区间是从(5,10)开始的，<br>而Select c from t where c&gt;5 lock in share mode; 这个语句的区间是从(5,10]开始的","like_count":0},{"had_liked":false,"id":213795,"user_name":"Wangxi","can_delete":false,"product_type":"c1","uid":1211790,"ip_address":"","ucode":"C25A9A14179930","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/8e/bb16d414.jpg","comment_is_top":false,"comment_ctime":1588563266,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1588563266","product_id":100020801,"comment_content":"实验环境 mysql 8.0.18 隔离级别 可重复读<br><br>select * from t where id &gt; 10 and id &lt;= 15  for update;<br>这一句会锁住的范围是 (10, 15] 并不会锁住(5,10)<br>当执行 delete from t where id= 10; 后 由于(10, 15] 左边界被删了，这个锁范围会向左扩散到5这里，变成了(5, 15]<br><br>","like_count":0},{"had_liked":false,"id":212828,"user_name":"…","can_delete":false,"product_type":"c1","uid":1297845,"ip_address":"","ucode":"207C7F95192129","user_header":"https://static001.geekbang.org/account/avatar/00/13/cd/b5/2e60f2b0.jpg","comment_is_top":false,"comment_ctime":1588217258,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1588217258","product_id":100020801,"comment_content":"session a <br>begin;<br>select * from t where id &gt; 10 and id &lt;= 15 for update;<br><br>session2 insert int t values(11,11,11);<br><br>这个为什么会阻塞呢？<br>按我的理解 首先是查询&gt;10的第一个数字也就是15，这个时候加的是(10, 15]的锁。<br>因为是等值查询，又因为是唯一索引，所以会退化为15的行锁，不是这样吗？ ","like_count":0,"discussions":[{"author":{"id":1563985,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKdiaUiaCYQe9tibemaNU5ya7RrU3MYcSGEIG7zF27u0ZDnZs5lYxPb7KPrAsj3bibM79QIOnPXAatfIw/132","nickname":"Geek_a8be59","note":"","ucode":"BEC0F57B51DC44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":275459,"discussion_content":"我也是这里想不通 不知道这个等值到底指的什么意思。SELECT * from t where id>10 and id<=15 ORDER BY id desc  for update; 发现这个有（15，20）的间隙，但是通过描述首先定位到了15，应该就是（10,15】，根据优化一，应该就是15这个记录锁，然后向左遍历，（5,10】和15这个行锁，不知道为什么会有（15,20）和（5,10）这个间隙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590717159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211325,"user_name":"鲁班大师","can_delete":false,"product_type":"c1","uid":1179156,"ip_address":"","ucode":"4F9615DF87B031","user_header":"https://static001.geekbang.org/account/avatar/00/11/fe/14/f1532dec.jpg","comment_is_top":false,"comment_ctime":1587948960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587948960","product_id":100020801,"comment_content":"<br>begin;<br>select * from t where id&gt;9 and id&lt;12 order by id desc for update;<br>老师，如果把id&gt;9 and id&lt;12换成，id&gt;1000000 and id&lt;1000002,是不是就会加好多好多的间隙锁和行锁，这个时候几乎等价于锁表了吧？性能也太差了，那到底什么场景才适合使用可重复读隔离级别？","like_count":0},{"had_liked":false,"id":206670,"user_name":"张钟强","can_delete":false,"product_type":"c1","uid":1586908,"ip_address":"","ucode":"EE0D5CAEDBBAC8","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/dc/97369381.jpg","comment_is_top":false,"comment_ctime":1586915376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586915376","product_id":100020801,"comment_content":"最后讲解的两个锁等待的例子，我怎么都复现不了啊？mysql版本 8.0.12，隔离级别 REPEATABLE-READ","like_count":0},{"had_liked":false,"id":186037,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1242455,"ip_address":"","ucode":"0CCCA6F4DCC480","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/57/ce10fb1b.jpg","comment_is_top":false,"comment_ctime":1583745118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583745118","product_id":100020801,"comment_content":"所谓“间隙”，其实根本就是由“这个间隙右边的那个记录”定义的，这句话，还是不明白是什么意思。","like_count":0},{"had_liked":false,"id":182172,"user_name":"小霸王学习机","can_delete":false,"product_type":"c1","uid":1475972,"ip_address":"","ucode":"522112D5F72FF9","user_header":"","comment_is_top":false,"comment_ctime":1582725752,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582725752","product_id":100020801,"comment_content":"老师您好，请问： select id from t where c &gt;5 lock in share mode ; 这种读锁，在show engine innodb status里面看不出来，需要设置什么参数吗？","like_count":0},{"had_liked":false,"id":178410,"user_name":"青青蒹葭","can_delete":false,"product_type":"c1","uid":1798505,"ip_address":"","ucode":"B0BB2B59A2CCA8","user_header":"https://static001.geekbang.org/account/avatar/00/1b/71/69/8c75dc75.jpg","comment_is_top":false,"comment_ctime":1581681718,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581681718","product_id":100020801,"comment_content":"空表应该有锁。按照间隙锁的规则应该是 (-supernum，supernum]<br>然后用show engine innodb status看到了<br>Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0<br> 0: len 8; hex 73757072656d756d; asc supremum;;<br>看了老师这么久的专栏。就四个字，受益匪浅","like_count":0},{"had_liked":false,"id":176270,"user_name":"forever","can_delete":false,"product_type":"c1","uid":1574051,"ip_address":"","ucode":"3EBCD4AB045880","user_header":"https://static001.geekbang.org/account/avatar/00/18/04/a3/95de9a19.jpg","comment_is_top":false,"comment_ctime":1581003772,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581003772","product_id":100020801,"comment_content":"这么多规则得梳理下","like_count":0},{"had_liked":false,"id":175196,"user_name":"华融科技","can_delete":false,"product_type":"c1","uid":1808280,"ip_address":"","ucode":"B6BA3C47C05073","user_header":"","comment_is_top":false,"comment_ctime":1580612307,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580612307","product_id":100020801,"comment_content":"Session A<br>begin;<br>select c from t where c&gt;5 lock in share mode; <br>加锁范围是索引 c 上的 (5,10]、(10,15]、(15,20]、(20,25]和 (25,supremum]。<br><br>Session B<br>update t set c=1 where c=5; <br>请问一下，为什么session B的update 语句锁的范围不是 （1，5], (5,10) 而只有（1，5】？","like_count":0},{"had_liked":false,"id":175180,"user_name":"华融科技","can_delete":false,"product_type":"c1","uid":1808280,"ip_address":"","ucode":"B6BA3C47C05073","user_header":"","comment_is_top":false,"comment_ctime":1580605275,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580605275","product_id":100020801,"comment_content":"begin;<br>select * from t where id&gt;9 and id&lt;12 order by id desc for update;<br>原文：加锁范围是主键索引上的 (0,5]、(5,10]和 (10, 15)。<br>问题：枷锁范围应该只有 (5,10]和 (10, 15)， 因为 id &gt;9 的条件在向左遍历时会使得 到 （5，10】这个区间就结束了呀？","like_count":0},{"had_liked":false,"id":171682,"user_name":"88591","can_delete":false,"product_type":"c1","uid":1254656,"ip_address":"","ucode":"04CE3E46455185","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/00/3afbab43.jpg","comment_is_top":false,"comment_ctime":1578991278,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578991278","product_id":100020801,"comment_content":"老师<br>select * from t where id&gt;9 and id&lt;12 order by id desc for update;  <br>order by 这个查找 过程还是不清楚。安装查询过程应该是先过滤数据在排序。感觉这个加锁的流程是先排序后过滤","like_count":0},{"had_liked":false,"id":165594,"user_name":"Dev-L","can_delete":false,"product_type":"c1","uid":1145068,"ip_address":"","ucode":"485E940C3F17B9","user_header":"https://static001.geekbang.org/account/avatar/00/11/78/ec/f7f0d21a.jpg","comment_is_top":false,"comment_ctime":1577265986,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577265986","product_id":100020801,"comment_content":"等值查询，范围查询，以及向右&#47;向左遍历的区别是什么？完全被自己弄晕了，哪位大神能解答一下？<br>如果查的是where c&lt;10 order by c desc，和where c&lt;=10 order by c desc的锁分布有什么不同","like_count":0},{"had_liked":false,"id":143163,"user_name":"高世家","can_delete":false,"product_type":"c1","uid":1581769,"ip_address":"","ucode":"B87372C333CCA2","user_header":"https://static001.geekbang.org/account/avatar/00/18/22/c9/74a7925d.jpg","comment_is_top":false,"comment_ctime":1571641440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571641440","product_id":100020801,"comment_content":"select * from t where id&gt;9 and id&lt;12 order by id desc for update;<br>锁的范围是 [10,15)<br>select * from t where id&gt;9 and id&lt;12 for update;<br>锁的范围是[10,15]<br>临界锁左开右闭  也是按照排序后的左开右闭对吧","like_count":0},{"had_liked":false,"id":136932,"user_name":"嘉兴","can_delete":false,"product_type":"c1","uid":1554570,"ip_address":"","ucode":"6997E7A3E25EE4","user_header":"https://static001.geekbang.org/account/avatar/00/17/b8/8a/7367a69e.jpg","comment_is_top":false,"comment_ctime":1569555963,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1569555963","product_id":100020801,"comment_content":"-- T1 事务A<br>begin;<br>select * from c20 where id&gt;=15 and id&lt;=20 order by id desc lock in share mode;<br><br>-- T2 事务B<br>begin;<br>update c20 set d=d+1 where id=25;\t-- OK<br>insert into c20 values(21,21,21);\t-- 阻塞<br><br>不能理解, 为什么事务A执行的语句会给 间隙(20,25) 加上锁.<br>通过 show engine innodb status; 查看发现事务A确实持有上述间隙锁.<br>通过 explain select * from c20 where id&gt;=15 and id&lt;=20 order by id desc lock in share mode; 查看 Extra 也没有 filesort, key=PRIMARY, 因此个人认为是按照主键索引向左遍历得到结果.<br><br>按照我的理解, 由于 `order by id desc` , 因此首先是在主键索引上搜索 id=20, 同时由于主键索引上这个值是唯一的, 因此不必向右遍历. 然而事实上它确实这么做了, 这让我想到了 BUG1: 主键索引上的范围查询会遍历到不满足条件的第一个.<br>但是这一步的搜索过程应该是等值查询才对, 完全一脸懵住了...<br>不知道老师现在还能看到这条评论不?","like_count":0,"discussions":[{"author":{"id":1324550,"avatar":"https://static001.geekbang.org/account/avatar/00/14/36/06/08c46bcd.jpg","nickname":"聂利","note":"","ucode":"808E064089724D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587404,"discussion_content":"select * from c20 where id&gt;=15 and id&lt;=20 order by id desc lock in share mode;\n锁为(5,10],(10,15],(15,20],(20,25)  \n\nupdate c20 set d=d+1 where id=25;\nupdate 的间隙锁(20,25),(25,+..),  \n间隙锁(20,25)  和(20,25),(25,+..),  锁之间兼容的，不锁\n\n插入意向锁和间隙锁是冲突，不兼容的。所以会锁住的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663035701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130032,"user_name":"feihui","can_delete":false,"product_type":"c1","uid":1007294,"ip_address":"","ucode":"13F1D4A82BC650","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/be/9ea55f46.jpg","comment_is_top":false,"comment_ctime":1567354986,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1567354986","product_id":100020801,"comment_content":"老师，你好，请问第一个例子中 select * from t where id&gt;9 and id&lt;12 order by id desc for update; 为什么会把 （0, 5] 的间隙锁也加上的？百思不得其解","like_count":0},{"had_liked":false,"id":129859,"user_name":"MrVito","can_delete":false,"product_type":"c1","uid":1252169,"ip_address":"","ucode":"716FF6F8871706","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/49/ddefc656.jpg","comment_is_top":false,"comment_ctime":1567306975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567306975","product_id":100020801,"comment_content":"explain很重要，加锁要明晰！","like_count":0},{"had_liked":false,"id":120504,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1564916508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1564916508","product_id":100020801,"comment_content":"感谢<br>又是对加锁规则的梳理，加锁的范围我还是不能完全拿捏好，不过比之前的自己强一丢丢。<br>小结一下<br>1：加锁本质上就是解决因高并发引起的问题，典型的就是数据不一致<br>2：锁是在索引树上的，锁是逐个加上的<br>3：行锁容易理解，就是锁定一个记录行<br>4：间隙锁是为了解决幻读而生的，锁定的是两个节点之间的范围，防止执行插入操作，导致幻读的产生<br>5：加锁的规则见老师的总结，两个原则两个优化一个bug，我觉得判断的时候，如果拿不定也可逆向思维，看看锁定那些范围后就不会出现幻读现象啦😄<br>6：索引搜索的时候，是先定位一个值，然后向左或右遍历，这个对于理解逐个加锁有帮助","like_count":0},{"had_liked":false,"id":102077,"user_name":"忆季","can_delete":false,"product_type":"c1","uid":1141957,"ip_address":"","ucode":"F62FB7F3D2F0CE","user_header":"","comment_is_top":false,"comment_ctime":1560129871,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560129871","product_id":100020801,"comment_content":"看的很蒙 为什么第一个例子 需要向左遍历到05","like_count":0},{"had_liked":false,"id":97769,"user_name":"乔纳森","can_delete":false,"product_type":"c1","uid":1045107,"ip_address":"","ucode":"51EC9FAE071388","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f2/73/1c7bceae.jpg","comment_is_top":false,"comment_ctime":1558769503,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1558769503","product_id":100020801,"comment_content":"老师，RR 和 RC 都是比较常用的隔离级别，这两种事务隔离级别下的加锁规则比较大；<br>","like_count":0},{"had_liked":false,"id":78826,"user_name":"小卡向前冲","can_delete":false,"product_type":"c1","uid":1124914,"ip_address":"","ucode":"1C8908A61FA00B","user_header":"https://static001.geekbang.org/account/avatar/00/11/2a/32/6354a589.jpg","comment_is_top":false,"comment_ctime":1553249232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553249232","product_id":100020801,"comment_content":"老师你好，我的问题跟@长杰的第二问类似。对于sql： select * from t where id&gt;10 and id&lt;=15 for update加上order by id desc。 它的加锁顺序是不是： （10, 15]， (15,20] (bug)， （5,10]?<br>我不太明白为什么说，这里要用优化1，获得行锁？ 还是说，先获取id=15的行锁，然后在加（10,15]， （5,10]","like_count":0},{"had_liked":false,"id":62922,"user_name":"滔滔","can_delete":false,"product_type":"c1","uid":1303342,"ip_address":"","ucode":"6968B5771AF79D","user_header":"https://static001.geekbang.org/account/avatar/00/13/e3/2e/77ad18f4.jpg","comment_is_top":false,"comment_ctime":1548207830,"is_pvip":false,"replies":[{"id":"22251","content":"会加锁，insert into t values (6,6,6) 被堵住了","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548216910,"ip_address":"","comment_id":62922,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548207830","product_id":100020801,"comment_content":"老师，有个疑问，select * from t where c&gt;=15 and c&lt;=20 order by c desc lock in share mode; 向左扫描到 c=10 的时候，为什么要把 (5, 10] 锁起来？不锁也不会出现幻读或者逻辑上的不一致吧🤔","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437402,"discussion_content":"会加锁，insert into t values (6,6,6) 被堵住了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548216910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62883,"user_name":"尘封","can_delete":false,"product_type":"c1","uid":1247006,"ip_address":"","ucode":"CEE0C006387A03","user_header":"https://static001.geekbang.org/account/avatar/00/13/07/1e/bdbe93f4.jpg","comment_is_top":false,"comment_ctime":1548202048,"is_pvip":false,"replies":[{"id":"23184","content":"会讲的哈~<br>新春快乐~","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1549270503,"ip_address":"","comment_id":62883,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548202048","product_id":100020801,"comment_content":"老师，咨询个问题，本来想在后面分区表的文章问，发现大纲里没有分区表这一讲。<br>1，timestamp类型为什么不支持分区？<br>2，前面的文章讲过分区不要太多，这个多了会怎么样？比如一个表一千多个分区<br>谢谢","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437382,"discussion_content":"会讲的哈~\n新春快乐~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1549270503,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62768,"user_name":"古娜拉黑暗之神·巴啦啦能量·堕落达","can_delete":false,"product_type":"c1","uid":1185642,"ip_address":"","ucode":"080BBCEF7DE985","user_header":"https://static001.geekbang.org/account/avatar/00/12/17/6a/c979163e.jpg","comment_is_top":false,"comment_ctime":1548152153,"is_pvip":false,"replies":[{"id":"22249","content":"你这个例子里面有两行c=10","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548216684,"ip_address":"","comment_id":62768,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548152153","product_id":100020801,"comment_content":"老师，您好：<br>我执行“explain select id from t where c in(5,20,10) lock in share mode;” 时，显示的rows对应的值是4。为什么啊？<br>我的mysql版本是：5.7.23-0ubuntu0.16.04.1，具体sql语句如下：<br>mysql&gt; select * from t;<br>+----+------+------+<br>| id | c    | d    |<br>+----+------+------+<br>|  0 |    0 |    0 |<br>|  5 |    5 |    5 |<br>| 10 |   10 |   10 |<br>| 15 |   15 |   15 |<br>| 20 |   20 |   20 |<br>| 25 |   25 |   25 |<br>| 30 |   10 |   30 |<br>+----+------+------+<br>7 rows in set (0.00 sec)<br><br>mysql&gt; explain select id from t where c in(5,20,10) lock in share mode;<br>+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+--------------------------+<br>| id | select_type | table | partitions | type  | possible_keys | key  | key_len | ref  | rows | filtered | Extra                    |<br>+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+--------------------------+<br>|  1 | SIMPLE      | t        | NULL       | range | c                  | c        | 5       | NULL |    4 |   100.00 | Using where; Using index |<br>+----+-------------+-------+------------+-------+---------------+------+---------+------+------+----------+--------------------------+<br>1 row in set, 1 warning (0.00 sec)","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437343,"discussion_content":"你这个例子里面有两行c=10","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548216684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62740,"user_name":"Ivan","can_delete":false,"product_type":"c1","uid":1302381,"ip_address":"","ucode":"57090A053A247F","user_header":"https://static001.geekbang.org/account/avatar/00/13/df/6d/44cf0de4.jpg","comment_is_top":false,"comment_ctime":1548146439,"is_pvip":false,"replies":[{"id":"22248","content":"好问题，第33篇会说到哈<br>你可以在mysql客户端参数增加 --quick 再试试","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548216263,"ip_address":"","comment_id":62740,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548146439","product_id":100020801,"comment_content":"Jan 17 23:52:27 prod-mysql-01 kernel: [ pid ]   uid  tgid total_vm      rss cpu oom_adj oom_score_adj name<br>Jan 17 23:52:27 prod-mysql-01 kernel: [125254]     0 125254    27087        5   0       0             0 mysqld_safe<br>Jan 17 23:52:27 prod-mysql-01 kernel: [126004]   498 126004 24974389 22439356   5       0             0 mysqld<br>Jan 17 23:52:27 prod-mysql-01 kernel: [ 5733]     0  5733  7606586  6077037   7       0             0 mysql<br>---------------------------系统日志--------------------------------------------------------------------------------<br><br>老师你好，请教一个问题 ，我在mysql服务器上本地登录，执行了一个SQL（select  b.id,b.status from  rb_bak b   where  id not  in (select  id from rb );该语句问了找不同数据， rb和 rb_bak 数据量均为500万左右），SQL很慢，30分钟也没结果；<br>在SQL语句执行期间，发生了OOM，mysql服务被kill。查看系统日志发现 mysqld 占用内存基本没有变，但是本机连接mysql的客户端进程（5733）却占用了内存近20G，这很让人费解，SQL没有执行完，客户端怎么会占用这么多内存？<br>用其他SQL查询查询不同数据，也就十几条数据，更不可能占用这么多内存呀。还请老师帮忙分析一下，谢谢。","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437330,"discussion_content":"好问题，第33篇会说到哈\n你可以在mysql客户端参数增加 --quick 再试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548216263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62714,"user_name":"ServerCoder","can_delete":false,"product_type":"c1","uid":1066487,"ip_address":"","ucode":"7F266C97696E16","user_header":"https://static001.geekbang.org/account/avatar/00/10/45/f7/0f9bcf1f.jpg","comment_is_top":false,"comment_ctime":1548141189,"is_pvip":false,"replies":[{"id":"22242","content":"可以用到多核呀，你是怎么得到 “时间主要耗费在了网络读取上。”这个结论的？<br><br>另外，把这三个文件先拷贝到数据库本地，然后本地执行load看看什么效果？<br>","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548215119,"ip_address":"","comment_id":62714,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548141189","product_id":100020801,"comment_content":"林老师我有个问题想请教一下，描述如下，望给予指点，先谢谢了！<br><br>环境：虚拟机，CPU 4核，内存8G，系统CentOS7.4，MySQL版本5.6.40<br>数据库配置：<br>bulk_insert_buffer_size = 256M<br>sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES<br>secure_file_priv=&#39;&#39;<br>default-storage-engine=MYISAM<br>测试场景修改过的参数(以下这些参数得调整对加载效率没有实质的提升)：<br>myisam_repair_threads=3<br>myisam_sort_buffer_size=256M<br>net_buffer_length=1M<br>myisam_use_mmap=ON<br>key_buffer_size=256M<br><br>测试场景：测试程序多线程，通过客户端API，执行load data infile语句加载数据文件<br>三个线程，三个文件(每个文件100万条数据、150MB)，三张表(表结构相同，字段类型均为整形，没有定义主键，有一个字段加了非唯一索引)，一一对应进行数据加载，数据库没有使用多核，而是把一个核心的利用率均分给了三个线程。<br>单个线程加载一个文件大约耗时3秒<br>单线程加载三个文件到三张表大约耗时9秒<br>三个线程分别加载三个文件到三张表，则每个线程均耗时大约9秒。从这个效果看，单线程顺序加载和三线程并发加载耗时相同，没有提升效果。<br>三线程加载过程中查看processlist发现时间主要耗费在了网络读取上。<br><br>问题：为啥这种场景下MySQL不利用多核？这种并行加载的情况要如何才能让其利用多核，提升加载速度<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437316,"discussion_content":"可以用到多核呀，你是怎么得到 “时间主要耗费在了网络读取上。”这个结论的？\n\n另外，把这三个文件先拷贝到数据库本地，然后本地执行load看看什么效果？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548215119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62675,"user_name":"慕塔","can_delete":false,"product_type":"c1","uid":1302106,"ip_address":"","ucode":"5C6C668C1106A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/A94RKUfWfwzRzb68T9xskctQ43TBgXSBIL78p0N0ria2tQxmsTTJebYmefhkbHK7zwpoxokxs43UxpgDTdwm5tg/132","comment_is_top":false,"comment_ctime":1548128424,"is_pvip":false,"replies":[{"id":"22241","content":"我觉得这两个对比不太公平^_^<br><br>1）的测试可能会出现中间件瓶颈，<br>   a)网络环节中间增加了一跳；<br>   b) 如果是小查询，可能proxy先打到瓶颈<br>2)的测试结论一般会比1）好些<br><br>但是有这个架构，你肯定是从中间件访问数据库的，所以应该以1的测试结果为准","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548214759,"ip_address":"","comment_id":62675,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548128424","product_id":100020801,"comment_content":"是这样的 假设只有一主一从 1)是集群只有一个sysbench实例，产生的数据流通过中间件，主机分全部写，和30%的读，另外70%的读全部分给从机。2)有两个sysbench，一个读写加压到主机，另一个只有加压到从机。主从复制之间通过binlog。问题在1)的QPS累加与2)QPS累加 意义一样吗   1)的一条事务有读写，而2)的情况，主机与1)一样，从机的读事务与主机里的读不一样吧😁","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437299,"discussion_content":"我觉得这两个对比不太公平^_^\n\n1）的测试可能会出现中间件瓶颈，\n   a)网络环节中间增加了一跳；\n   b) 如果是小查询，可能proxy先打到瓶颈\n2)的测试结论一般会比1）好些\n\n但是有这个架构，你肯定是从中间件访问数据库的，所以应该以1的测试结果为准","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548214759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62436,"user_name":"慕塔","can_delete":false,"product_type":"c1","uid":1302106,"ip_address":"","ucode":"5C6C668C1106A5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/A94RKUfWfwzRzb68T9xskctQ43TBgXSBIL78p0N0ria2tQxmsTTJebYmefhkbHK7zwpoxokxs43UxpgDTdwm5tg/132","comment_is_top":false,"comment_ctime":1548057741,"is_pvip":false,"replies":[{"id":"22163","content":"TPS就看主库的写入<br>QPS就看所有从库的读能力加和<br>不过没看懂你问题中1）和2）的区别😅","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548124479,"ip_address":"","comment_id":62436,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548057741","product_id":100020801,"comment_content":"大佬 请教下一主多从集群性能测试性能计算问题  如果使用基准测试工具sysbench。数据流有两种<br>1)<br> sysbench---mycat---mysql主机(读写) TPS QPS1<br>                             |               |binlog<br>                             mysql从机(只读)QPS2<br>那性能指标  TPS  QPS=QPS1+QPS2<br>2)<br>sysbench---mysql主机(读写) TPS QPS1<br>                               | binlog<br>sysbench---mysql从机(只读)TPS QPS2<br>集群性能指标TPS  QPS=QPS1+QPS2<br>这两种哪种严谨些啊？mycat的损失忽略。<br>生产中的集群性能怎么算的呢？？？(还是学生 谢谢！)","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437211,"discussion_content":"TPS就看主库的写入\nQPS就看所有从库的读能力加和\n不过没看懂你问题中1）和2）的区别😅","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548124479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62369,"user_name":"HuaMax","can_delete":false,"product_type":"c1","uid":1118488,"ip_address":"","ucode":"2E78DE1AF098AF","user_header":"https://static001.geekbang.org/account/avatar/00/11/11/18/8cee35f9.jpg","comment_is_top":false,"comment_ctime":1548040362,"is_pvip":false,"replies":[{"id":"22054","content":"不是的，要找id&gt;10的，并没有命中id=10哦，你可以理解成就是查到了(10,15)这个间隙","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548042323,"ip_address":"","comment_id":62369,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548040362","product_id":100020801,"comment_content":"删除导致锁范围扩大那个例子，id&gt;10 and id&lt;=15，锁范围为什么没有10呢？不是应该（5，10]吗？","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437186,"discussion_content":"不是的，要找id&amp;gt;10的，并没有命中id=10哦，你可以理解成就是查到了(10,15)这个间隙","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548042323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62367,"user_name":"llx","can_delete":false,"product_type":"c1","uid":1153012,"ip_address":"","ucode":"95741E1BD74B26","user_header":"https://static001.geekbang.org/account/avatar/00/11/97/f4/6709b8cf.jpg","comment_is_top":false,"comment_ctime":1548039030,"is_pvip":false,"replies":[{"id":"22053","content":"👍 ","user_name":"作者回复","user_name_real":"林晓斌","uid":"1264162","ctime":1548042247,"ip_address":"","comment_id":62367,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1548039030","product_id":100020801,"comment_content":"回复@往事随风，顺其自然<br>前面有解释为什么，这篇文章有更详细的解释。Gap lock 由右值指定的，由于 c 不是唯一键，需要到10，遍历到10的时候，就把 5-10 锁了<br>","like_count":0,"discussions":[{"author":{"id":1264162,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/22/2681d602.jpg","nickname":"林晓斌","note":"","ucode":"CDE42D44F26240","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":437185,"discussion_content":"👍 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548042247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}