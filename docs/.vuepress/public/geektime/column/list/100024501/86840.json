{"id":86840,"title":"05 | 链接器：符号是怎么绑定到地址上的？","content":"<p>你好，我是戴铭。</p><p>你是不是经常会好奇自己参与的这么些项目，为什么有的编译起来很快，有的却很慢；编译完成后，有的启动得很快，有的却很慢。其实，在理解了编译和启动时链接器所做的事儿之后，你就可以从根儿上找到这些问题的答案了。</p><p>所以，在今天这篇文章中，我就重点和你讲解一下链接器相关的知识。<strong>简单地说，链接器最主要的作用，就是将符号绑定到地址上。</strong>理解了这其中的原理后，你就可以有针对性地去调整和优化项目了。</p><p>同时，掌握了链接器的作用，也将有助于你理解后面文章中，关于符号表、加载相关的内容。</p><p>现在，我们就从 iOS 开发的起点，也就是编写代码和编译代码开始说起，看看链接器在这其中到底发挥了什么作用。</p><h2>iOS开发为什么使用的是编译器？</h2><p>我们都知道，iOS 编写的代码是先使用编译器把代码编译成机器码，然后直接在 CPU 上执行机器码的。之所以不使用解释器来运行代码，是因为苹果公司希望 iPhone 的执行效率更高、运行速度能达到最快。</p><p>那<strong>为什么说用解释器运行代码的速度不够快呢？</strong>这是因为解释器会在运行时解释执行代码，获取一段代码后就会将其翻译成目标代码（就是字节码（Bytecode）），然后一句一句地执行目标代码。</p><p>也就是说，解释器，是在运行时才去解析代码，这样就比在运行之前通过编译器生成一份完整的机器码再去执行的效率要低。</p><!-- [[[read_end]]] --><p>这时你一定会纳闷了，既然编译器效率这么高，那为什么还有人用解释器呢？所谓事有利弊，解释器可以在运行时去执行代码，说明它具有动态性，程序运行后能够随时通过增加和更新代码来改变程序的逻辑。</p><p>也就是说，你写的程序跑起来后不用重新启动，就可以看到代码修改后的效果，这样就缩短了调试周期。程序发布后，你还可以随时修复问题或者增加新功能，用户也不用一定要等到发布新版本后才可以升级使用。所以说，使用解释器可以帮我们缩短整个程序的开发周期和功能更新周期。</p><p>那么，使用编译器和解释器执行代码的特点，我们就可以概括如下：</p><ul>\n<li>\n<p>采用编译器生成机器码执行的好处是效率高，缺点是调试周期长。</p>\n</li>\n<li>\n<p>解释器执行的好处是编写调试方便，缺点是执行效率低。</p>\n</li>\n</ul><p>编译器和解释器的比较图示如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/43/d7621cb8232fae96b46a52e1b7fb7643.png?wh=2732*2048\" alt=\"\"></p><center><span class=\"reference\">图1 编译器和执行器的对比</span></center><p>明确了iOS开发使用编译器的原因以后，你还需要了解 <strong>iOS 开发使用的到底是什么编译器。</strong></p><p>现在苹果公司使用的编译器是LLVM，相比于Xcode 5版本前使用的GCC，编译速度提高了3倍。同时，苹果公司也反过来主导了 LLVM 的发展，让 LLVM 可以针对苹果公司的硬件进行更多的优化。</p><p>总结来说，LLVM 是编译器工具链技术的一个集合。而其中的lld 项目，就是内置链接器。编译器会对每个文件进行编译，生成 Mach-O（可执行文件）；链接器会将项目中的多个 Mach-O文件合并成一个。</p><p>LLVM 的编译过程非常复杂。如果你有兴趣的话，可以通过<a href=\"http://llvm.org/docs/\">官方手册</a>查看完整的编译过程。</p><p>这里，我先简单为你总结下编译的几个主要过程：</p><ul>\n<li>\n<p>首先，你写好代码后，LLVM 会预处理你的代码，比如把宏嵌入到对应的位置。</p>\n</li>\n<li>\n<p>预处理完后，LLVM会对代码进行词法分析和语法分析，生成 AST 。AST 是抽象语法树，结构上比代码更精简，遍历起来更快，所以使用 AST 能够更快速地进行静态检查，同时还能更快地生成 IR（中间表示）。</p>\n</li>\n<li>\n<p>最后 AST 会生成 IR，IR 是一种更接近机器码的语言，区别在于和平台无关，通过 IR 可以生成多份适合不同平台的机器码。对于 iOS 系统，IR 生成的可执行文件就是 Mach-O。</p>\n</li>\n</ul><p>下图展示了编译的主要过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/03/63/03e511d5cc6eb12889d882d6e705ac63.png?wh=2048*2732\" alt=\"\"></p><center><span class=\"reference\">图2 编译的主要过程</span></center><h2>编译时链接器做了什么？</h2><p>Mach-O 文件里面的内容，主要就是代码和数据：代码是函数的定义；数据是全局变量的定义，包括全局变量的初始值。不管是代码还是数据，它们的实例都需要由符号将其关联起来。</p><p>为什么呢？因为Mach-O 文件里的那些代码，比如 if、for、while 生成的机器指令序列，要操作的数据会存储在某个地方，变量符号就需要绑定到数据的存储地址。你写的代码还会引用其他的代码，引用的函数符号也需要绑定到该函数的地址上。</p><p>而链接器的作用，就是完成变量、函数符号和其地址绑定这样的任务。而这里我们所说的符号，就可以理解为变量名和函数名。</p><p><strong>那为什么要让链接器做符号和地址绑定这样一件事儿呢？不绑定的话，又会有什么问题？</strong></p><p>如果地址和符号不做绑定的话，要让机器知道你在操作什么内存地址，你就需要在写代码时给每个指令设好内存地址。写这样的代码的过程，就像你直接在和不同平台的机器沟通，连编译生成 AST 和 IR 的步骤都省掉了，甚至优化平台相关的代码都需要你自己编写。</p><p>这件事儿看起来挺酷，但可读性和可维护性都会很差，比如修改代码后对地址的维护就会让你崩溃。而这种“崩溃”的罪魁祸首就是代码和内存地址绑定得太早。</p><p>另外，绑定得太早除了可读性和可维护性差之外，还会有更多的重复工作。因为，你需要针对不同的平台写多份代码，而这些代码本可以通过高级语言一次编译成多份。既然这样，那我们应该怎么办呢？</p><p>我们首先想到的就是，用汇编语言来让这种绑定滞后。随着编程语言的进化，我们很快就发现，采用任何一种高级编程语言，都可以解决代码和内存绑定过早产生的问题，同时还能扫掉使用汇编写程序的烦恼。</p><p>现在，我们已经通过反证法，理解了在一个文件里把符号和地址绑定在一起的必要性。接下来，我们再看看<strong>链接器为什么还要把项目中的多个 Mach-O文件合并成一个。</strong></p><p>其实，这个问题也好回答。</p><p>你肯定不希望一个项目是在一个文件里从头写到尾的吧。项目中文件之间的变量和接口函数都是相互依赖的，所以这时我们就需要通过链接器将项目中生成的多个 Mach-O 文件的符号和地址绑定起来。</p><p>没有这个绑定过程的话，单个文件生成的 Mach-O 文件是无法正常运行起来的。因为，如果运行时碰到调用在其他文件中实现的函数的情况时，就会找不到这个调用函数的地址，从而无法继续执行。</p><p>链接器在链接多个目标文件的过程中，会创建一个符号表，用于记录所有已定义的和所有未定义的符号。链接时如果出现相同符号的情况，就会出现“ld: dumplicate symbols”的错误信息；如果在其他目标文件里没有找到符号，就会提示“Undefined symbols”的错误信息。</p><p>说完了链接器解决的问题，我们再一起来看看<strong>链接器对代码主要做了哪几件事儿。</strong></p><ul>\n<li>\n<p>去项目文件里查找目标代码文件里没有定义的变量。</p>\n</li>\n<li>\n<p>扫描项目中的不同文件，将所有符号定义和引用地址收集起来，并放到全局符号表中。</p>\n</li>\n<li>\n<p>计算合并后长度及位置，生成同类型的段进行合并，建立绑定。</p>\n</li>\n<li>\n<p>对项目中不同文件里的变量进行地址重定位。</p>\n</li>\n</ul><p>你在项目里为某项需求写了一些功能函数，但随着业务的发展，一些功能被下掉了或者被其他负责的同事在另一个文件里用其他函数更新了功能。那么这时，你以前写的那些函数就没有用武之地了。日长月久，无用的函数越来越多，生成的 Mach-O 文件也就越来越大。</p><p>这时，链接器在整理函数的符号调用关系时，就可以帮你理清有哪些函数是没被调用的，并自动去除掉。那这是怎么实现的呢？</p><p>链接器在整理函数的调用关系时，会以main函数为源头，跟随每个引用，并将其标记为live。跟随完成后，那些未被标记live的函数，就是无用函数。然后，链接器可以通过打开 Dead code stripping 开关，来开启自动去除无用代码的功能。并且，这个开关是默认开启的。</p><p>说完了编译时链接器的基本功能，接下来我们再说一说动态库链接，这也是链接器的一大作用。</p><h2>动态库链接</h2><p>在真实的 iOS 开发中，你会发现很多功能都是现成可用的，不光你能够用，其他App 也在用，比如 GUI 框架、I/O、网络等。链接这些共享库到你的 Mach-O 文件，也是通过链接器来完成的。</p><p>链接的共用库分为静态库和动态库：静态库是编译时链接的库，需要链接进你的 Mach-O 文件里，如果需要更新就要重新编译一次，无法动态加载和更新；而动态库是运行时链接的库，使用 dyld 就可以实现动态加载。</p><p>Mach-O 文件是编译后的产物，而动态库在运行时才会被链接，并没参与 Mach-O文件的编译和链接，所以 Mach-O文件中并没有包含动态库里的符号定义。也就是说，这些符号会显示为“未定义”，但它们的名字和对应的库的路径会被记录下来。运行时通过 dlopen 和 dlsym 导入动态库时，先根据记录的库路径找到对应的库，再通过记录的名字符号找到绑定的地址。</p><p>dlopen 会把共享库载入运行进程的地址空间，载入的共享库也会有未定义的符号，这样会触发更多的共享库被载入。dlopen 也可以选择是立刻解析所有引用还是滞后去做。dlopen 打开动态库后返回的是引用的指针，dlsym 的作用就是通过 dlopen 返回的动态库指针和函数符号，得到函数的地址然后使用。</p><p><strong>使用dyld加载动态库，有两种方式</strong>：有程序启动加载时绑定和符号第一次被用到时绑定。为了减少启动时间，大部分动态库使用的都是符号第一次被用到时再绑定的方式。</p><p>加载过程开始会修正地址偏移，iOS 会用 ASLR 来做地址偏移避免攻击，确定 Non-Lazy Pointer 地址进行符号地址绑定，加载所有类，最后执行 load 方法和 Clang Attribute 的 constructor 修饰函数。</p><p>每个函数、全局变量和类都是通过符号的形式定义和使用的，当把目标文件链接成一个 Mach-O文件时，链接器在目标文件和动态库之间对符号做解析处理。</p><p>下面，我们就通过一个例子来看看 dyld 的链接过程。</p><p><strong>第一步：</strong>先编写多个文件。</p><p>Boy.h</p><pre><code>c\n#import &lt;Foundation/Foundation.h&gt;\n@interface Boy : NSObject\n- (void)say;\n@end\n</code></pre><p>Boy.m</p><pre><code>c\n#import “Boy.h”\n@implementation Boy\n- (void)say\n{\n    NSLog(@“hi there again!\\n”);\n}\n@end\n</code></pre><p>SayHi.m</p><pre><code>c\n#import “Boy.h”\nint main(int argc, char *argv[])\n{\n    @autoreleasepool {\n        Boy *boy = [[Boy alloc] init];\n        [boy say];\n        return 0;\n    }\n}\n</code></pre><p><strong>第二步：</strong>编译多个文件。</p><pre><code>xcrun clang -c Boy.m\nxcrun clang -c SayHi.m\n</code></pre><p><strong>第三步：</strong>将编译后的文件链接起来，这样就可以生成 a.out 可执行文件了。</p><blockquote>\n<p>备注：a.out是编译器的默认名字。</p>\n</blockquote><pre><code>xcrun clang SayHi.o Boy.o -Wl,`xcrun —show-sdk-path`/System/Library/Frameworks/Foundation.framework/Foundation\n</code></pre><p>符号表会规定它们的符号，你可以使用 nm 工具查看。</p><p>我们先用nm工具看一下SayHi.o文件：</p><pre><code>xcrun nm -nm SayHi.o\n\n\n                 (undefined) external _OBJC_CLASS_$_Boy\n                 (undefined) external _objc_autoreleasePoolPop\n                 (undefined) external _objc_autoreleasePoolPush\n                 (undefined) external _objc_msgSend\n0000000000000000 (__TEXT,__text) external _main\n</code></pre><ul>\n<li>\n<p>_OBJC_CLASS_$_Boy ，表示 Boy 的 OC 符号。</p>\n</li>\n<li>\n<p>(undefined) external ，表示未实现非私有。如果是私有的话，就是 non-external。</p>\n</li>\n<li>\n<p>external _main ，表示 main() 函数，处理 0 地址，记录在 __TEXT,__text 区域里。</p>\n</li>\n</ul><p>接下来，我们再看看 Boy.o文件：</p><pre><code>xcrun nm -nm Boy.o\n\n\n                 (undefined) external _NSLog\n                 (undefined) external _OBJC_CLASS_$_NSObject\n                 (undefined) external _OBJC_METACLASS_$_NSObject\n                 (undefined) external ___CFConstantStringClassReference\n                 (undefined) external __objc_empty_cache\n0000000000000000 (__TEXT,__text) non-external -[Boy say]\n0000000000000060 (__DATA,__objc_const) non-external l_OBJC_METACLASS_RO_$_Boy\n00000000000000a8 (__DATA,__objc_const) non-external l_OBJC_$_INSTANCE_METHODS_Boy\n00000000000000c8 (__DATA,__objc_const) non-external l_OBJC_CLASS_RO_$_Boy\n0000000000000110 (__DATA,__objc_data) external _OBJC_METACLASS_$_Boy\n0000000000000138 (__DATA,__objc_data) external _OBJC_CLASS_$_Boy\n</code></pre><p>因为 undefined 符号表示的是该文件类未定义，所以在目标文件和 Foundation framework 动态库做链接处理时，链接器会尝试解析所有的 undefined 符号。</p><p>链接器通过动态库解析成符号会记录是通过哪个动态库解析的，路径也会一起记录下来。你可以再用 nm 工具查看 a.out 符号表，对比 boy.o 的符号表，看看链接器是怎么解析符号的。</p><pre><code>xcrun nm -nm a.out\n\n\n                 (undefined) external _NSLog (from Foundation)\n                 (undefined) external _OBJC_CLASS_$_NSObject (from CoreFoundation)\n                 (undefined) external _OBJC_METACLASS_$_NSObject (from CoreFoundation)\n                 (undefined) external ___CFConstantStringClassReference (from CoreFoundation)\n                 (undefined) external __objc_empty_cache (from libobjc)\n                 (undefined) external _objc_autoreleasePoolPop (from libobjc)\n                 (undefined) external _objc_autoreleasePoolPush (from libobjc)\n                 (undefined) external _objc_msgSend (from libobjc)\n                 (undefined) external dyld_stub_binder (from libSystem)\n0000000100000000 (__TEXT,__text) [referenced dynamically] external __mh_execute_header\n0000000100000e90 (__TEXT,__text) external _main\n0000000100000f10 (__TEXT,__text) non-external -[Boy say]\n0000000100001130 (__DATA,__objc_data) external _OBJC_METACLASS_$_Boy\n0000000100001158 (__DATA,__objc_data) external _OBJC_CLASS_$_Boy\n</code></pre><p>进行对比的时候，我们可以重点关注哪些 undefined 的符号，有了更多信息，就可以知道在哪个动态库能够找到它。</p><p>我们可以通过 otool工具来找到符号所需库在哪儿。</p><pre><code>xcrun otool -L a.out\n\na.out:\n  /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation (compatibility version 300.0.0, current version 1349.25.0)\n  /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1238.0.0)\n  /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1348.28.0)\n  /usr/lib/libobjc.A.dylib (compatibility version 1.0.0, current version 228.0.0)\n</code></pre><p>从otool 工具输出的结果可以看到，这些 undefined 符号需要的两个库分别是 libSystem 和 libobjc。查看 libSystem库的话，你可以看到常用的 GCD 的 libdispatch，还有 Block 的 libsystem_blocks。</p><p>dylib 这种格式，表示是动态链接的，编译的时候不会被编译到执行文件中，在程序执行的时候才 link，这样就不用算到包大小里，而且不更新执行程序就能够更新库。</p><p>我们可以打印看看什么库被加载了：</p><pre><code>(export DYLD_PRINT_LIBRARIES=; ./a.out )\n\n\ndyld: loaded: /Users/didi/Downloads/./a.out\ndyld: loaded: /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation\ndyld: loaded: /usr/lib/libSystem.B.dylib\ndyld: loaded: /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation\n…\n</code></pre><p>数一下，被加载的库还挺多的。</p><p>因为 Foundation 还会依赖一些其他动态库，这些依赖的其他库还会再依赖更多的库，所以相互依赖的符号会很多，需要处理的时间也会比较长。</p><p>这里系统上的动态链接器会使用共享缓存，共享缓存在 /var/db/dyld/。当加载 Mach-O 文件时，动态链接器会先检查是否有共享缓存。每个进程都会在自己的地址空间映射这些共享缓存，这样做可以起到优化App启动速度的作用。</p><p>而关于动态链接器的作用顺序是怎样的，你可以先看看 Mike Ash 写的这篇关于 dyld 的博客： <a href=\"https://www.mikeash.com/pyblog/friday-qa-2012-11-09-dyld-dynamic-linking-on-os-x.html\">Dynamic Linking On OS X</a>。这篇博客里面，很详细地讲解了 dyld 所做的事情。</p><p>简单来说， dyld做了这么几件事儿：</p><ul>\n<li>\n<p>先执行 Mach-O文件，根据 Mach-O文件里 undefined 的符号加载对应的动态库，系统会设置一个共享缓存来解决加载的递归依赖问题；</p>\n</li>\n<li>\n<p>加载后，将 undefined 的符号绑定到动态库里对应的地址上；</p>\n</li>\n<li>\n<p>最后再处理 +load 方法，main 函数返回后运行 static terminator。</p>\n</li>\n</ul><p>调用 +load 方法是通过 runtime 库处理的。你可以通过一个<a href=\"https://github.com/RetVal/objc-runtime\">可编译的开源 runtime 库</a>来了解 runtime，从源码层面去看程序启动时 runtime 做了哪些事情。在 debug-objc 下创建一个类，在 +load 方法里断点查看走到这里调用的堆栈如下：</p><pre><code>0  +[someclass load]\n1  call_class_loads()\n2  ::call_load_methods\n3  ::load_images(const char *path __unused, const struct mach_header *mh)\n4  dyld::notifySingle(dyld_image_states, ImageLoader const*, ImageLoader::InitializerTimingList*)\n11 _dyld_start\n</code></pre><p>在 load_images 方法里断点 p path 可以打印出所有加载的动态链接库，这个方法的 hasLoadMethods 用于快速判断是否有 +load 方法。</p><p>prepare_load_methods 这个方法会获取所有类的列表然后收集其中的 +load 方法，在代码里可以发现 Class 的 +load 是先执行的，然后执行 Category 。</p><p>为什么这样做呢？我们通过 prepare_load_methods 这个方法可以看出，在遍历 Class 的 +load 方法时会执行 schedule_class_load 方法，这个方法会递归到根节点来满足 Class 收集完整关系树的需求。</p><p>最后， call_load_methods 会创建一个 autoreleasePool 使用函数指针来动态调用类和 Category 的 +load 方法。</p><p>如果你想了解 Cocoa 的 Foundation 库的话，可以通过 GNUStep 源码来学习。比如 ，NSNotificationCenter 发送通知是按什么顺序发送的，你可以查看 NSNotificationCenter.m 里的 addObserver 方法和 postNotification 方法，看看观察者是怎么添加的，以及是怎么被遍历通知到的。</p><p>最后说一句，dyld 是开源的，地址是：<a href=\"https://github.com/opensource-apple/dyld\">https://github.com/opensource-apple/dyld</a></p><h2>小结</h2><p>今天这篇文章，我与你介绍了链接器是什么，为什么需要链接器，以及链接器在编译时和程序启动时会做的事情。总体来看，从编译、链接、执行、动态库加载到 main 函数开始执行的过程如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/37/91/37861720c57d41c723a9118ad120da91.png?wh=2732*2048\" alt=\"\"><br>\n编译阶段由于有了链接器，你的代码可以写在不同的文件里，每个文件都能够独立编成 Mach-O 文件进行标记。编译器可以根据你修改的文件范围来减少编译，通过这种方式提高每次编译的速度。</p><p>了解了这种链接机制，你也能够明白，文件越多，链接器链接 Mach-O文件所需绑定的遍历操作就会越多，编译速度也会越慢。</p><p>了解程序运行阶段的动态库链接原理，会让你更多地了解程序在启动时做的事情，同时还能够对你有一些启发。</p><p>比如，在开发调试阶段，是不是代码改完以后可以先不去链接项目里的所有文件，只编译当前修改的文件动态库，通过运行时加载动态库及时更新，看到修改的结果。这样调试的速度，不就能够得到质的提升了么。而具体怎么做，我会在第6篇文章“App 如何通过注入动态库的方式实现极速编译调试？”中和你详细说明。</p><p>再比如，你可以逆向找出其他 App 里你感兴趣功能的使用方法，然后在自己的程序里直接调用它，最后将那个 App 作为动态库加载到自己的 App 里。这样，你感兴趣的这个功能，就能够在你自己的程序里起作用了。</p><p>其实，使用链接器不仅能提高开发效率，还可以让你发挥想象力再去做些其他有趣的事情。</p><h2>课后小作业</h2><p>请你写一段代码，在 App 运行时通过 dlopen 和 dlsym 链接加载 bundle 里的动态库。</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p><span class=\"reference\">最近，我收到一些同学的反馈，说这门课的一些内容比较深，一时难以琢磨透。如果你也有这样的感受，推荐你学习极客时间刚刚上新的另一门视频课程：由腾讯高级工程师朱德权，主讲的《从 0 开发一款 iOS App》。</span></p><p><span class=\"reference\">朱德权老师将会基于最新技术，从实践出发，手把手带你构建类今日头条的App。要知道，那些很牛的 iOS 开发者，往往都具备独立开发一款 App 的能力。</span></p><p><span class=\"reference\">这门课正在上新优惠，欢迎点击<a href=\"https://time.geekbang.org/course/intro/169?utm_term=zeusKHUZ0&amp;utm_source=app&amp;utm_medium=geektime&amp;utm_campaign=169-presell&amp;utm_content=daiming\">这里</a>试看。</span></p>","neighbors":{"left":{"article_title":"04 | 项目大了人员多了，架构怎么设计更合理？","id":86522},"right":{"article_title":"06 | App 如何通过注入动态库的方式实现极速编译调试？","id":87188}},"comments":[{"had_liked":false,"id":81286,"user_name":"陈栋楠","can_delete":false,"product_type":"c1","uid":1453659,"ip_address":"","ucode":"945BFB2372B2AD","user_header":"https://static001.geekbang.org/account/avatar/00/16/2e/5b/4a49f953.jpg","comment_is_top":false,"comment_ctime":1553849424,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"156172672080","product_id":100024501,"comment_content":"《程序员的自我修养》里有非常详细的关于链接的内容，对于想学习这块知识的同学是很好的资料","like_count":36},{"had_liked":false,"id":78532,"user_name":"邓斌","can_delete":false,"product_type":"c1","uid":1453918,"ip_address":"","ucode":"A516165B893666","user_header":"https://static001.geekbang.org/account/avatar/00/16/2f/5e/e1306e14.jpg","comment_is_top":false,"comment_ctime":1553169746,"is_pvip":false,"replies":[{"id":"28789","content":"写的真棒，赞","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553333277,"ip_address":"","comment_id":78532,"utype":1}],"discussion_count":1,"race_medal":0,"score":"83157548370","product_id":100024501,"comment_content":"我发现戴大神写几篇的主题跟我最近在写的博客很像哦哈哈ヾﾉ≧∀≦)o<br>https:&#47;&#47;www.jianshu.com&#47;p&#47;95896fb96a03","like_count":19,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444133,"discussion_content":"写的真棒，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553333277,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81555,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1414938,"ip_address":"","ucode":"8132F30DE5B787","user_header":"https://static001.geekbang.org/account/avatar/00/15/97/1a/41416144.jpg","comment_is_top":false,"comment_ctime":1553942515,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"65978451955","product_id":100024501,"comment_content":"老师请问下 既然Mach-o中清理掉了没用的函数 那废弃的函数不用删除也不会影响包大小，那删除没用的函数来达到瘦身效果的说法就不正确了对吧 ，被用到的函数中的无用代码才会影响包大小这样理解对嘛","like_count":16,"discussions":[{"author":{"id":1454522,"avatar":"https://static001.geekbang.org/account/avatar/00/16/31/ba/694ae5e5.jpg","nickname":"大大盆子","note":"","ucode":"276E3F40C82A8B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":406572,"discussion_content":"链接器只会清理无用的C/C++/swift这些静态函数，对OC的方法是无效的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1634797801,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78345,"user_name":"晓龙","can_delete":false,"product_type":"c1","uid":1004576,"ip_address":"","ucode":"78CDCEBD183D3A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/54/20/93c79f7c.jpg","comment_is_top":false,"comment_ctime":1553132205,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"65977641645","product_id":100024501,"comment_content":"看到动态绑定，大概了解了下flutter调试时是如何hotreload UI的。<br><br>flutter有两套编译器，JIT，AOT。<br>debug时用JIT，release时AOT。<br><br>debug时，如果修改了dart文件，按下R后，Dart会先去工程里遍历增量dart源文件，然后通知Dart VM去load改写后的dart文件，通知flutter framework去更新widgets tree。<br><br>参考：https:&#47;&#47;www.jianshu.com&#47;p&#47;69c96cefc810?tdsourcetag=s_pctim_aiomsg","like_count":16},{"had_liked":false,"id":78246,"user_name":"绝影","can_delete":false,"product_type":"c1","uid":1341899,"ip_address":"","ucode":"B96CD7B6516293","user_header":"https://static001.geekbang.org/account/avatar/00/14/79/cb/3fb26f09.jpg","comment_is_top":false,"comment_ctime":1553101462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44502774422","product_id":100024501,"comment_content":"太棒了，有料。深入浅出，文末还有总结，支持这样文章结构！","like_count":10},{"had_liked":false,"id":83155,"user_name":"straycandy","can_delete":false,"product_type":"c1","uid":1455358,"ip_address":"","ucode":"FAD7F6D41BAA15","user_header":"","comment_is_top":false,"comment_ctime":1554443311,"is_pvip":false,"replies":[{"id":"30029","content":"oc 的不会，c 的会","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1554450137,"ip_address":"","comment_id":83155,"utype":1}],"discussion_count":5,"race_medal":0,"score":"35914181679","product_id":100024501,"comment_content":"你好，请问下oc具有动态特性，链接器在清理无用函数时候，如何保证运行时不会指向这个函数呢？比如页面路由之类的函数，函数名都是拼接而成的。很是疑惑，而且经过实验，链接器确实辨认出来了这些函数，开启dead code stripping 后没有导致崩溃","like_count":8,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445890,"discussion_content":"oc 的不会，c 的会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554450137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2444450,"avatar":"https://static001.geekbang.org/account/avatar/00/25/4c/a2/dfc6d97b.jpg","nickname":"(void","note":"","ucode":"0B4790632AAB27","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350387,"discussion_content":"OC的他似乎并不会去删除，但是项目中OC的无用代码明显要比C的多，这个时候有啥好办法？\n","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1613833578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2444450,"avatar":"https://static001.geekbang.org/account/avatar/00/25/4c/a2/dfc6d97b.jpg","nickname":"(void","note":"","ucode":"0B4790632AAB27","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350388,"discussion_content":"比如一个基础组件，我们提供给多个业务方使用，但是每个业务方可能只用了这个组件的其中几个方法/类，那么其实这个库等于有很多都是没用的代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613833695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":231792,"discussion_content":"作者的意思是，oc不会清理无用函数？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586829933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2444450,"avatar":"https://static001.geekbang.org/account/avatar/00/25/4c/a2/dfc6d97b.jpg","nickname":"(void","note":"","ucode":"0B4790632AAB27","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350393,"discussion_content":"oc最终编译成了c函数，你的所有的类和方法实际上都是注册进去的结构体，而且注册肯定是有个调用者的，所以不存在会有被dead code 检测到的情况，所以没有办法解决oc的情况了。而且这个是编译时的检查，oc是运行时的语言，在编译时去除是不是有点太凶残了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613834073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":231792,"ip_address":""},"score":350393,"extra":""}]}]},{"had_liked":false,"id":78754,"user_name":"smilingmiao","can_delete":false,"product_type":"c1","uid":1157910,"ip_address":"","ucode":"B48F429563EF74","user_header":"https://static001.geekbang.org/account/avatar/00/11/ab/16/0f83cab6.jpg","comment_is_top":false,"comment_ctime":1553231378,"is_pvip":false,"replies":[{"id":"28662","content":"赞","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553263890,"ip_address":"","comment_id":78754,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31618002450","product_id":100024501,"comment_content":"老师，经过我的实践，你的 -show 应该改成 --show。","like_count":7,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444224,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553263890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004657,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/71/96741eda.jpg","nickname":"Bruce","note":"","ucode":"2C4A564C8CF2F8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288065,"discussion_content":"老铁稳，我还在想为啥报错呢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593642561,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78965,"user_name":"mαnajay","can_delete":false,"product_type":"c1","uid":1067450,"ip_address":"","ucode":"6DE9FBD1BEC8AD","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/ba/23c9246a.jpg","comment_is_top":false,"comment_ctime":1553309852,"is_pvip":false,"replies":[{"id":"28787","content":"对","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553333135,"ip_address":"","comment_id":78965,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27323113628","product_id":100024501,"comment_content":"这里的共享缓存是 [Diving into WWDC 2017] App Startup Time: Past, Present, and Future  里面说的 Dyld 2.0 开始引入的 prebinding completely replaced by shared cache 吗? 用来进程间共享这块系统的动态库 相关地址信息","like_count":6,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444304,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553333135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78303,"user_name":"Trust me ҉҉҉҉҉҉҉❀","can_delete":false,"product_type":"c1","uid":1112913,"ip_address":"","ucode":"B576CBDE262A40","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/51/870a6fcb.jpg","comment_is_top":false,"comment_ctime":1553128352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23027964832","product_id":100024501,"comment_content":"dyld3可以预绑定系统库的 符号 加快启动时间","like_count":5},{"had_liked":false,"id":114284,"user_name":"小小的存在","can_delete":false,"product_type":"c1","uid":1236258,"ip_address":"","ucode":"0CAFEB1C2B5F36","user_header":"https://static001.geekbang.org/account/avatar/00/12/dd/22/1dc0fd86.jpg","comment_is_top":false,"comment_ctime":1563265849,"is_pvip":false,"replies":[{"id":"42877","content":"一种是，在程序开始运行时通过 dyld 动态加载。通过 dyld 加载的动态库需要在编译时进行链接，链接时会做标记，绑定的地址在加载后再决定。<br>第二种是，显式运行时链接（Explicit Runtime Linking），即在运行时通过动态链接器提供的 API dlopen 和 dlsym 来加载。这种方式，在编译时是不需要参与链接的。不过，通过这种运行时加载远程动态库的App，苹果公司是不允许上线 App Store 的，所以只能用于线下调试环节。","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1563984848,"ip_address":"","comment_id":114284,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18743135033","product_id":100024501,"comment_content":"大神，编译时的符号绑定和启动时的符号绑定是什么区别呀？","like_count":4,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458594,"discussion_content":"一种是，在程序开始运行时通过 dyld 动态加载。通过 dyld 加载的动态库需要在编译时进行链接，链接时会做标记，绑定的地址在加载后再决定。\n第二种是，显式运行时链接（Explicit Runtime Linking），即在运行时通过动态链接器提供的 API dlopen 和 dlsym 来加载。这种方式，在编译时是不需要参与链接的。不过，通过这种运行时加载远程动态库的App，苹果公司是不允许上线 App Store 的，所以只能用于线下调试环节。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563984848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1372053,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epac4Lf3nrGGdoawIal12Hq8v9swaP6OFCicr5tEkRn1hH9Db21gc9EL8FjoMBE0VZJkgDfSaJUHgA/132","nickname":"BrightFuture","note":"","ucode":"8D0D70F3C5B198","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379053,"discussion_content":"戴老师，上述文章说“而动态库是运行时链接的库，使用 dyld 就可以实现动态加载”，与此处回答的“通过 dyld 加载的动态库需要在编译时进行链接”，感觉有一点矛盾，还望赐教","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623653752,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236258,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/22/1dc0fd86.jpg","nickname":"小小的存在","note":"","ucode":"0CAFEB1C2B5F36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3932,"discussion_content":"那编译时绑定的地址是什么地址呀？和程序运行时符号的地址是什么区别？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564988369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90692,"user_name":"不知名的iOS网友","can_delete":false,"product_type":"c1","uid":1454387,"ip_address":"","ucode":"8E21A2FD5C9697","user_header":"","comment_is_top":false,"comment_ctime":1556611023,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18736480207","product_id":100024501,"comment_content":"dyld 编译不通过的原因：<br>估计大家都是直接复制的代码，由于文本的问题，#import &quot;xxx.h&quot; ,&quot;&quot;这个英文字符已经被替换成了中文字符，所以大家更改一下就能编译通过啦。","like_count":4},{"had_liked":false,"id":90092,"user_name":"石年","can_delete":false,"product_type":"c1","uid":1060965,"ip_address":"","ucode":"B23141119979BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/30/65/4a2363ff.jpg","comment_is_top":false,"comment_ctime":1556413181,"is_pvip":false,"discussion_count":6,"race_medal":0,"score":"18736282365","product_id":100024501,"comment_content":"这里系统上的动态链接器会使用共享缓存，共享缓存在 &#47;var&#47;db&#47;dyld&#47;。当加载 Mach-O 文件时，动态链接器会先检查是否有共享缓存。每个进程都会在自己的地址空间映射这些共享缓存<br><br>我有个问题，是不是在动态加载的时候对于公用的动态库还是得在内存做拷贝，保证进程间相互隔离？如果进程地址空间映射方式共享，我在A应用用fishhook去hook一个公用动态库，那是不是会影响所有用到这个公用动态库的其他应用，实验证明只会影响自身应用。大神帮忙解释下~_~","like_count":5,"discussions":[{"author":{"id":1375813,"avatar":"https://static001.geekbang.org/account/avatar/00/14/fe/45/992ffe11.jpg","nickname":"老林sir","note":"","ucode":"757727F69D926C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":278,"discussion_content":"每个进程都会在自己的地址空间映射这些共享缓存，这句话就是答案呀","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1561384578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1152154,"avatar":"https://static001.geekbang.org/account/avatar/00/11/94/9a/d7a88e15.jpg","nickname":"陈希敏","note":"","ucode":"A9BD3B9266B30B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2804,"discussion_content":"我的理解，代码段是共享的，但数据段是各自有备份的，而本进程对于共享缓存的引用其实是间接引用，fishhook改变的只是本进程里的这个间接引用，对共享缓存是没影响的，事实上也做不到..","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563949033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1208414,"avatar":"https://static001.geekbang.org/account/avatar/00/12/70/5e/121e5a97.jpg","nickname":"Ero.北北","note":"","ucode":"0BEE5C301EF93F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327123,"discussion_content":"朋友了解下fPIC和GOT","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605750542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2034825,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/0c/89/67ebd89a.jpg","nickname":"头像不是本人","note":"","ucode":"9797FADC6D7EE7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320592,"discussion_content":"你hook的不是动态库中代码的内容，只是修改了映射到你进程虚拟内存中的地址","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604408660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1667007,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLDuzsOjzIPUDE0EpPQb0uibDghCdXfpBKckqPy0T9rHyMFJLdOeonvZkgZibsewtb7wT8uWQ7MNYs9g/132","nickname":"Geek_47e318","note":"","ucode":"6A0D5F2ECB6640","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292528,"discussion_content":"一个物理内存地址会对应多个虚拟地址啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595250926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1040432,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e0/30/44b742ca.jpg","nickname":"LJ","note":"","ucode":"ACDBF87220B376","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8229,"discussion_content":"首先你得知道hook的原理，是在当前的运行时环境中改变函数指针，这是最基本的方法查找原理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567843979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":84600,"user_name":"陈希敏","can_delete":false,"product_type":"c1","uid":1152154,"ip_address":"","ucode":"A9BD3B9266B30B","user_header":"https://static001.geekbang.org/account/avatar/00/11/94/9a/d7a88e15.jpg","comment_is_top":false,"comment_ctime":1554883253,"is_pvip":false,"replies":[{"id":"30724","content":"你先拉 https:&#47;&#47;github.com&#47;RetVal&#47;objc-runtime ，搜素 load_images 方法，在那里打断点","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1555140498,"ip_address":"","comment_id":84600,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18734752437","product_id":100024501,"comment_content":"老师请问一下，在 load_images 方法里断点 p path，这一步是怎么做的？<br><br>","like_count":4,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446396,"discussion_content":"你先拉 https://github.com/RetVal/objc-runtime ，搜素 load_images 方法，在那里打断点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555140498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81662,"user_name":"爱弹吉他的纳兰沛容","can_delete":false,"product_type":"c1","uid":1477662,"ip_address":"","ucode":"BDF9F35BDB21C3","user_header":"https://static001.geekbang.org/account/avatar/00/16/8c/1e/4230cd6a.jpg","comment_is_top":false,"comment_ctime":1554000114,"is_pvip":false,"replies":[{"id":"29815","content":"对","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1554199412,"ip_address":"","comment_id":81662,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18733869298","product_id":100024501,"comment_content":"老师，我有个疑问：OC是编译语言，Xcode使用的是LLVM编译器，那么生成的ipa包应该是经过编译后的机器码，所以在iOS系统内是不存在编译器的，而安卓系统则存在JVM虚拟机？","like_count":4,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445288,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554199412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":79759,"user_name":"hao","can_delete":false,"product_type":"c1","uid":1455940,"ip_address":"","ucode":"174B855F3768CE","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/44/6a0b759f.jpg","comment_is_top":false,"comment_ctime":1553539646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14438441534","product_id":100024501,"comment_content":"老师你好<br>使用 dyld 加载动态库，有两种方式：有程序启动加载时绑定和符号第一次被用到时绑定。<br>请问这个可以在哪里设置的吗？","like_count":3},{"had_liked":false,"id":78276,"user_name":"zeroskylian","can_delete":false,"product_type":"c1","uid":1454413,"ip_address":"","ucode":"737C6DB3C3E0AF","user_header":"https://static001.geekbang.org/account/avatar/00/16/31/4d/e4228ff8.jpg","comment_is_top":false,"comment_ctime":1553125124,"is_pvip":false,"replies":[{"id":"28812","content":"是的，用于调试","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553340704,"ip_address":"","comment_id":78276,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14438027012","product_id":100024501,"comment_content":"在 App 运行时通过 dlopen 和 dlsym 链接加载 bundle 里的动态库。<br><br>这个是不是只能用于调试，记得iOS不允许在沙盒中加载动态库","like_count":3,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444028,"discussion_content":"是的，用于调试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553340704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78267,"user_name":"springday","can_delete":false,"product_type":"c1","uid":1360326,"ip_address":"","ucode":"45D072FD923775","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJrXzp40cuBgbfXMuWMe743Uw3IPfZvRAAdPa3WYru1V90qK683KcOppkt0Dpxg564zSsElZW3nlA/132","comment_is_top":false,"comment_ctime":1553123036,"is_pvip":false,"replies":[{"id":"28792","content":"期待苹果爸爸赶快加上吧","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553333430,"ip_address":"","comment_id":78267,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14438024924","product_id":100024501,"comment_content":"老师，iOS目前支持AOT么。另外，感觉iOS目前编辑时间过长，是不是应该采用flutter的预编辑机制呢。","like_count":3,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444025,"discussion_content":"期待苹果爸爸赶快加上吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553333430,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":231810,"discussion_content":"搞反了吧？编译时用的是JIT这种热加载技术","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586830369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2444450,"avatar":"https://static001.geekbang.org/account/avatar/00/25/4c/a2/dfc6d97b.jpg","nickname":"(void","note":"","ucode":"0B4790632AAB27","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1785940,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/rWMGIQG1z13nekorr9I4PY1w7rlskssf949IQ24SvIewpM7mmZoH2QEZ2aKHu5tkmicGQ7KTGrN9vFYhrDsdp9w/132","nickname":"Geek_9dbcb4","note":"","ucode":"BB92D5E844A743","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350389,"discussion_content":"AOT，jit的是不需要编译的的，只是我们开发中的编译会有编译缓存的加速而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613833901,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":231810,"ip_address":""},"score":350389,"extra":""}]}]},{"had_liked":false,"id":78250,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1131597,"ip_address":"","ucode":"458E57B617CCA4","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/4d/07bdd82f.jpg","comment_is_top":false,"comment_ctime":1553102815,"is_pvip":false,"replies":[{"id":"28813","content":"是的","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553340722,"ip_address":"","comment_id":78250,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14438004703","product_id":100024501,"comment_content":"再比如，你可以逆向找出其他 App 里你感兴趣功能的使用方法，然后在自己的程序里直接调用它，最后将那个 App 作为动态库加载到自己的 App 里。这样，你感兴趣的这个功能，就能够在你自己的程序里起作用了。<br><br><br>这需要越狱机吧？","like_count":3,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444019,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553340722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78243,"user_name":"langzuxiaozi","can_delete":false,"product_type":"c1","uid":1228566,"ip_address":"","ucode":"16ED5AF589D766","user_header":"https://static001.geekbang.org/account/avatar/00/12/bf/16/3e4fbe53.jpg","comment_is_top":false,"comment_ctime":1553099546,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"14438001434","product_id":100024501,"comment_content":"dlopen dlsym 审核会被拒，是有办法解决这个问题吗？<br>","like_count":3,"discussions":[{"author":{"id":1093005,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ad/8d/3b2ac759.jpg","nickname":"大年初一","note":"","ucode":"AE2AE59763BFCA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1791,"discussion_content":"不会被拒的，不要传动态参数 例如 dlopen(value)","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1562913898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455042,"avatar":"https://static001.geekbang.org/account/avatar/00/16/33/c2/9c3ba9e2.jpg","nickname":"小可爱","note":"","ucode":"F2FF3533DB69D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279335,"discussion_content":"不传value怎么打开动态库呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591325345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78824,"user_name":"Dariel®","can_delete":false,"product_type":"c1","uid":1016590,"ip_address":"","ucode":"14C7994192A244","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/0e/6f69afb7.jpg","comment_is_top":false,"comment_ctime":1553248968,"is_pvip":false,"replies":[{"id":"28651","content":"The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Despite its name, LLVM has little to do with traditional virtual machines. The name &quot;LLVM&quot; itself is not an acronym; it is the full name of the project.<br><br>这是官方的定义，LLVM 是整个工具链的名字。<br><br>Clang is an &quot;LLVM native&quot; C&#47;C++&#47;Objective-C compiler<br><br>这个事 Clang 的定义<br><br>可以参看 LLVM 官网  https:&#47;&#47;llvm.org&#47;","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553261956,"ip_address":"","comment_id":78824,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10143183560","product_id":100024501,"comment_content":"OC前端编译器是CLang，后端编译才是LLVM吧","like_count":2,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444243,"discussion_content":"The LLVM Project is a collection of modular and reusable compiler and toolchain technologies. Despite its name, LLVM has little to do with traditional virtual machines. The name &amp;quot;LLVM&amp;quot; itself is not an acronym; it is the full name of the project.\n\n这是官方的定义，LLVM 是整个工具链的名字。\n\nClang is an &amp;quot;LLVM native&amp;quot; C/C++/Objective-C compiler\n\n这个事 Clang 的定义\n\n可以参看 LLVM 官网  https://llvm.org/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553261956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265967,"user_name":"C__","can_delete":false,"product_type":"c1","uid":2029233,"ip_address":"","ucode":"0C9F9CEA4B5439","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f6/b1/f9490fec.jpg","comment_is_top":false,"comment_ctime":1607080721,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5902048017","product_id":100024501,"comment_content":"好文章总给人相见恨晚的感觉，感谢分享！","like_count":1},{"had_liked":false,"id":131456,"user_name":"蜂子","can_delete":false,"product_type":"c1","uid":1468174,"ip_address":"","ucode":"ACD11D9A72B066","user_header":"https://static001.geekbang.org/account/avatar/00/16/67/0e/843cf30a.jpg","comment_is_top":false,"comment_ctime":1567757606,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5862724902","product_id":100024501,"comment_content":"void loadImage(char * path)<br>{<br>    void *lib_handle = dlopen(path, RTLD_LOCAL);<br>    if (lib_handle == nil) {<br>        NSLog(@&quot;error %s&quot;, dlerror());<br>        printf(&quot;[FAIL] dlopen-basic %s\\n&quot;, path);<br>    }<br>    <br>    void *sys = dlsym(lib_handle, &quot;my_free&quot;);<br>    if (sys == nil) {<br>        NSLog(@&quot;error %s&quot;, dlerror());<br>        printf(&quot;[FAIL] dlopen-basic %s\\n&quot;, path);<br>    }<br>    <br>    int result = dlclose(lib_handle);<br>    if (result == 0) {<br>        printf(&quot;dlclose() returned %c\\n&quot;, result);<br>        printf(&quot;[FAIL] dlopen-basic %s\\n&quot;, path);<br>    }<br>    printf(&quot;[PASS] dlopen-basic %s\\n&quot;, path);<br>}<br><br>dylib 里面有源码。","like_count":2},{"had_liked":false,"id":88866,"user_name":"Geek__Will","can_delete":false,"product_type":"c1","uid":1457283,"ip_address":"","ucode":"974205AE63484B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIIzJXIAHCPG8o3lPhyb0Fy1S0XMlVDFk91tLfYM9aC3ucGib2ByfT8cWYgyu9SSXKBHS3OUqR6o1A/132","comment_is_top":false,"comment_ctime":1556016245,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5850983541","product_id":100024501,"comment_content":"符号绑定是否只对类做符号绑定？不会对方法或者变量做绑定？在静态库中在oc类文件.m中如果有定义的c或者c++的函数或者变量，默认会是全局的，而且会绑定地址，如果两个相同静态库定义了同名的函数或者变量，link如果加了-ObjC会报重复定义的冲突，如果没加，则编织通过，且不影响运行，麻烦老师给讲讲原理，谢谢","like_count":1},{"had_liked":false,"id":81009,"user_name":"Hjay","can_delete":false,"product_type":"c1","uid":1334835,"ip_address":"","ucode":"279C233D6AC437","user_header":"https://static001.geekbang.org/account/avatar/00/14/5e/33/6d1687fd.jpg","comment_is_top":false,"comment_ctime":1553774991,"is_pvip":false,"replies":[{"id":"29463","content":"对","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553836490,"ip_address":"","comment_id":81009,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5848742287","product_id":100024501,"comment_content":"每个文件编译出来的mach-o文件类型是目标文件吧，走过link才会聚合成mach-o可执行文件","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445041,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553836490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80970,"user_name":"jimbo","can_delete":false,"product_type":"c1","uid":1454555,"ip_address":"","ucode":"779DC4A912C55B","user_header":"https://static001.geekbang.org/account/avatar/00/16/31/db/77251f31.jpg","comment_is_top":false,"comment_ctime":1553766244,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848733540","product_id":100024501,"comment_content":"基础太差了，看了几遍，并且查了一些资料后，有点基础概念了","like_count":1},{"had_liked":false,"id":79328,"user_name":"Swift4.1","can_delete":false,"product_type":"c1","uid":1457906,"ip_address":"","ucode":"6561C910A36BFF","user_header":"https://static001.geekbang.org/account/avatar/00/16/3e/f2/28086207.jpg","comment_is_top":false,"comment_ctime":1553435983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848403279","product_id":100024501,"comment_content":"这篇文章真的非常好 以前一直不了解mach-o文件的细节","like_count":1},{"had_liked":false,"id":78797,"user_name":"drunkenMouse","can_delete":false,"product_type":"c1","uid":1454037,"ip_address":"","ucode":"AA8CEA703ECBE8","user_header":"","comment_is_top":false,"comment_ctime":1553241963,"is_pvip":false,"replies":[{"id":"28653","content":"对","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553262211,"ip_address":"","comment_id":78797,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5848209259","product_id":100024501,"comment_content":"dlopen 会把共享库载入运行进程的地址空间，这里的共享库指的是动态库吧？","like_count":1,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444232,"discussion_content":"对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553262211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78245,"user_name":"Gargit","can_delete":false,"product_type":"c1","uid":1423107,"ip_address":"","ucode":"E62510A99A4512","user_header":"https://static001.geekbang.org/account/avatar/00/15/b7/03/f23f5cbe.jpg","comment_is_top":false,"comment_ctime":1553100635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848067931","product_id":100024501,"comment_content":"睡前大概浏览一下，明天再细读里头不懂的概念","like_count":1},{"had_liked":false,"id":342588,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1241567,"ip_address":"","ucode":"C42E11098E1B38","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","comment_is_top":false,"comment_ctime":1650356422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650356422","product_id":100024501,"comment_content":"<br>xcrun clang SayHi.o Boy.o -Wl,`xcrun —show-sdk-path`&#47;System&#47;Library&#47;Frameworks&#47;Foundation.framework&#47;Foundation  这一步一直不成功","like_count":0},{"had_liked":false,"id":279196,"user_name":"我","can_delete":false,"product_type":"c1","uid":1253215,"ip_address":"","ucode":"82B63B004062BB","user_header":"https://static001.geekbang.org/account/avatar/00/13/1f/5f/b9638873.jpg","comment_is_top":false,"comment_ctime":1613654167,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613654167","product_id":100024501,"comment_content":"太厉害了！","like_count":0},{"had_liked":false,"id":262486,"user_name":"Ero.北北","can_delete":false,"product_type":"c1","uid":1208414,"ip_address":"","ucode":"0BEE5C301EF93F","user_header":"https://static001.geekbang.org/account/avatar/00/12/70/5e/121e5a97.jpg","comment_is_top":false,"comment_ctime":1605749826,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605749826","product_id":100024501,"comment_content":"动态库没有参与mach-o文件的编译和链接这个说法有点问题，mach-o在编译时，如果引用的是共享（动态）库，对应需要动态绑定的符号会被记录在一个section里面待dyld读取后绑定重定位","like_count":0},{"had_liked":false,"id":242698,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1456533,"ip_address":"","ucode":"812208DE6C6A7B","user_header":"https://static001.geekbang.org/account/avatar/00/16/39/95/c442a6cc.jpg","comment_is_top":false,"comment_ctime":1597819456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597819456","product_id":100024501,"comment_content":"“你可以逆向找出其他 App 里你感兴趣功能的使用方法，然后在自己的程序里直接调用它，最后将那个 App 作为动态库加载到自己的 App 里”， 老师，请问这句话怎么把其他的App作为动态库加载到自己的App里呢?","like_count":0},{"had_liked":false,"id":240241,"user_name":"Guarantee","can_delete":false,"product_type":"c1","uid":1388495,"ip_address":"","ucode":"46380E86F03F26","user_header":"https://static001.geekbang.org/account/avatar/00/15/2f/cf/fb214a2c.jpg","comment_is_top":false,"comment_ctime":1596803795,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1596803795","product_id":100024501,"comment_content":"老师，OC是有.h文件和.m文件的，但是为什么Xcode在项目编译的时候，显示只会编译.m文件，.h文件也包含了很多信息的啊，这是为什么呢？","like_count":0,"discussions":[{"author":{"id":2032085,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/01/d5/40a5fc44.jpg","nickname":"wxflymes","note":"","ucode":"0E3514CFF2129F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347330,"discussion_content":". h文件基本都通过预编译指令引入到. m文件里面了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612195558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":212410,"user_name":"凡","can_delete":false,"product_type":"c1","uid":1041878,"ip_address":"","ucode":"BCF83BE1D434D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e5/d6/37a1be71.jpg","comment_is_top":false,"comment_ctime":1588120365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588120365","product_id":100024501,"comment_content":"请问swift和oc在这整个流程上有哪些区别","like_count":0},{"had_liked":false,"id":198032,"user_name":"莫言","can_delete":false,"product_type":"c1","uid":1460977,"ip_address":"","ucode":"3B5782B58BFD18","user_header":"https://static001.geekbang.org/account/avatar/00/16/4a/f1/e3b02c6d.jpg","comment_is_top":false,"comment_ctime":1585407520,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585407520","product_id":100024501,"comment_content":"这里是高级进阶课程，蛮好的，看不懂的可以去查查入门资料","like_count":0},{"had_liked":false,"id":183563,"user_name":"xhh","can_delete":false,"product_type":"c1","uid":1883150,"ip_address":"","ucode":"0E860BE1A49209","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLVLXmoqRXG0smwy6c1po4tGqJ8fnNBusPEshQQWHQUPib545sKlZx0nAIwvhhGObQ3u0bhLs436pQ/132","comment_is_top":false,"comment_ctime":1583067252,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583067252","product_id":100024501,"comment_content":"戴老师的课程很好。补充的很多的不足。","like_count":0},{"had_liked":false,"id":157968,"user_name":"PEI LIANG","can_delete":false,"product_type":"c1","uid":1501372,"ip_address":"","ucode":"F6D60FB4F54E4E","user_header":"https://static001.geekbang.org/account/avatar/00/16/e8/bc/5a90f882.jpg","comment_is_top":false,"comment_ctime":1575290941,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575290941","product_id":100024501,"comment_content":"“LLVM 是编译器工具链技术的一个集合。而其中的 lld 项目，就是内置链接器。编译器会对每个文件进行编译，生成 Mach-O（可执行文件）；”每个文件编译完生成的不是可执行文件，而是目标文件。","like_count":0},{"had_liked":false,"id":157874,"user_name":"PEI LIANG","can_delete":false,"product_type":"c1","uid":1501372,"ip_address":"","ucode":"F6D60FB4F54E4E","user_header":"https://static001.geekbang.org/account/avatar/00/16/e8/bc/5a90f882.jpg","comment_is_top":false,"comment_ctime":1575275135,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575275135","product_id":100024501,"comment_content":"llvm 并不是编译器，编译器是Apple clang.","like_count":0},{"had_liked":false,"id":145946,"user_name":"null","can_delete":false,"product_type":"c1","uid":1642151,"ip_address":"","ucode":"B0ACD1B5CA541B","user_header":"https://static001.geekbang.org/account/avatar/00/19/0e/a7/9b79c245.jpg","comment_is_top":false,"comment_ctime":1572405017,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572405017","product_id":100024501,"comment_content":"“ld: dumplicate symbols” 应该是“ld: duplicate symbols”吧？","like_count":0},{"had_liked":false,"id":131457,"user_name":"蜂子","can_delete":false,"product_type":"c1","uid":1468174,"ip_address":"","ucode":"ACD11D9A72B066","user_header":"https://static001.geekbang.org/account/avatar/00/16/67/0e/843cf30a.jpg","comment_is_top":false,"comment_ctime":1567757732,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567757732","product_id":100024501,"comment_content":"还可以直接DYLD_INSERT_LIBRARIES 环境变量注入bundle里面动态库，书还是多看几遍才有用啊！","like_count":0},{"had_liked":false,"id":125498,"user_name":"Hello灬麦德姆","can_delete":false,"product_type":"c1","uid":1458884,"ip_address":"","ucode":"7F1E617401F9CD","user_header":"https://static001.geekbang.org/account/avatar/00/16/42/c4/b9166b7d.jpg","comment_is_top":false,"comment_ctime":1566194881,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1566194881","product_id":100024501,"comment_content":"链接器在链接多个目标文件的过程中，会创建一个符号表，用于记录所有已定义和未定义的符号。<br>这里的未定义的符号具体指什么呢？没有定义为什么要记录呢？","like_count":0,"discussions":[{"author":{"id":1501372,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/bc/5a90f882.jpg","nickname":"PEI LIANG","note":"","ucode":"F6D60FB4F54E4E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":70336,"discussion_content":"猜测是动态库里的符号。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575346237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1667007,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLDuzsOjzIPUDE0EpPQb0uibDghCdXfpBKckqPy0T9rHyMFJLdOeonvZkgZibsewtb7wT8uWQ7MNYs9g/132","nickname":"Geek_47e318","note":"","ucode":"6A0D5F2ECB6640","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501372,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/bc/5a90f882.jpg","nickname":"PEI LIANG","note":"","ucode":"F6D60FB4F54E4E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292529,"discussion_content":"就是undefined的动态库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595251185,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":70336,"ip_address":""},"score":292529,"extra":""}]}]},{"had_liked":false,"id":116569,"user_name":"IAMCJ","can_delete":false,"product_type":"c1","uid":1040766,"ip_address":"","ucode":"4C4F6ECDAC563E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e1/7e/b4b259c7.jpg","comment_is_top":false,"comment_ctime":1563871753,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1563871753","product_id":100024501,"comment_content":"学到了很多东西，有几个疑问，希望大佬能给回复一下，谢谢😁<br><br>1、共享缓存的‘共享’是指给一个手机上的众多App共享这个缓存吗？意思是不是一个动态库被加载之后加入到缓存中，之后其他的App启动用到这个动态库就不需要重新加载了？<br><br>2、dyld是不是先“加载”一个动态库，然后再把它和编译后的 Mach-O 文件“链接”起来？<br><br>3、所有默认的动态链接库被合并成一个大的“缓存文件”，放到&#47;System&#47;Library&#47;Caches&#47;com.apple.dyld&#47;目录下，按不同的架构保存分别保存着，这个“缓存文件”是共享缓存生成的吗？","like_count":0,"discussions":[{"author":{"id":1458957,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/7IvaucOdCqF6HLA3aC7YzYzv9GGJ26Wz5XESWMAoycSO2KQIibBxmaMc4E2icjJoO1gP5GqqJspt6ZPuxd5EKBag/132","nickname":"Damon","note":"","ucode":"318F0D8C8D0B52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305773,"discussion_content":"我理解的共享，就是系统的一些动态库，被某个程序从磁盘加载到内存的时候，会放到共享缓存里面，有另外的程序需要加载这个动态库的时候，就直接取共享缓存的，然后映射到自己程序分配的地址空间里面，从而提高效率","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600081431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102925,"user_name":"提盏星灯逛人间","can_delete":false,"product_type":"c1","uid":1576358,"ip_address":"","ucode":"E99309FAA4AC88","user_header":"https://static001.geekbang.org/account/avatar/00/18/0d/a6/6895c4b9.jpg","comment_is_top":false,"comment_ctime":1560329645,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560329645","product_id":100024501,"comment_content":"基础太差了。。。惭愧","like_count":0},{"had_liked":false,"id":97196,"user_name":"九三","can_delete":false,"product_type":"c1","uid":1454691,"ip_address":"","ucode":"7D093ED7273CBE","user_header":"https://static001.geekbang.org/account/avatar/00/16/32/63/fa24f92e.jpg","comment_is_top":false,"comment_ctime":1558605759,"is_pvip":false,"replies":[{"id":"35001","content":"是对象的实例","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1558842753,"ip_address":"","comment_id":97196,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1558605759","product_id":100024501,"comment_content":"不管是代码还是数据，它们的实例都需要由符号将其关联起来。<br>这个实例什么意思 ？是对象实例吗","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451173,"discussion_content":"是对象的实例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558842753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":90210,"user_name":"一纸丶荒年","can_delete":false,"product_type":"c1","uid":1458078,"ip_address":"","ucode":"9A4C0364B97780","user_header":"https://static001.geekbang.org/account/avatar/00/16/3f/9e/7a6e6442.jpg","comment_is_top":false,"comment_ctime":1556448295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1556448295","product_id":100024501,"comment_content":"基础 太差了 编译多个文件。  怎么做吖  ","like_count":0},{"had_liked":false,"id":88026,"user_name":"Toon","can_delete":false,"product_type":"c1","uid":1256136,"ip_address":"","ucode":"16189FD3A4B03B","user_header":"","comment_is_top":false,"comment_ctime":1555817462,"is_pvip":false,"replies":[{"id":"31679","content":"抽象语法树","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1555859107,"ip_address":"","comment_id":88026,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555817462","product_id":100024501,"comment_content":"什么是AST？","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447686,"discussion_content":"抽象语法树","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555859107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87043,"user_name":"springxiao","can_delete":false,"product_type":"c1","uid":1143109,"ip_address":"","ucode":"1823EBB59B5A0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/71/45/ae5bb741.jpg","comment_is_top":false,"comment_ctime":1555502681,"is_pvip":true,"replies":[{"id":"32674","content":"dyld 就是那个系统的动态链接器","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1556892519,"ip_address":"","comment_id":87043,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555502681","product_id":100024501,"comment_content":"&#39;&#39;动态库是运行时链接的库，使用 dyld 就可以实现动态加载 &#39;&#39;  是不是ios系统中也存在一个类似链接器的东西，将动态库和mac-o进行关联？<br><br>","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447291,"discussion_content":"dyld 就是那个系统的动态链接器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1556892519,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85633,"user_name":"代码里的扁舟","can_delete":false,"product_type":"c1","uid":1464198,"ip_address":"","ucode":"85CADE7B08C5ED","user_header":"https://static001.geekbang.org/account/avatar/00/16/57/86/d87169b3.jpg","comment_is_top":false,"comment_ctime":1555149969,"is_pvip":false,"replies":[{"id":"30763","content":"答疑一文章里已答复","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1555164704,"ip_address":"","comment_id":85633,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1555149969","product_id":100024501,"comment_content":"大神：为什么要首先找出Undefined未定义的符号？为什么要根据undefined的符号加载对应的动态库？对这个不是很懂","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446742,"discussion_content":"答疑一文章里已答复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555164704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82023,"user_name":"Jersey、","can_delete":false,"product_type":"c1","uid":1358381,"ip_address":"","ucode":"53985C9B1CF73E","user_header":"https://static001.geekbang.org/account/avatar/00/14/ba/2d/e0339b0a.jpg","comment_is_top":false,"comment_ctime":1554105057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554105057","product_id":100024501,"comment_content":"戴老师, 请问一下我在使用 xcrun clang -c file.m 的时候一直报错, 找到不相关文件, 在网上找了些方法 指定对应的 SDK 库, 但是还是有报错或者警告, 很多文件会失败。  这个主要是什么原因呢, 因为如何解决呀。  老师可以讲解一下吗。","like_count":0},{"had_liked":false,"id":81586,"user_name":"鱼丸～粗面～","can_delete":false,"product_type":"c1","uid":1262116,"ip_address":"","ucode":"3AB1872DDB6AED","user_header":"https://static001.geekbang.org/account/avatar/00/13/42/24/9f78ec72.jpg","comment_is_top":false,"comment_ctime":1553954637,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553954637","product_id":100024501,"comment_content":"多来点iOS和编译原理相结合的内容。","like_count":0},{"had_liked":false,"id":81456,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1414938,"ip_address":"","ucode":"8132F30DE5B787","user_header":"https://static001.geekbang.org/account/avatar/00/15/97/1a/41416144.jpg","comment_is_top":false,"comment_ctime":1553917647,"is_pvip":false,"replies":[{"id":"29534","content":"Mach-O 里没有，内存里也不会有","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553941409,"ip_address":"","comment_id":81456,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553917647","product_id":100024501,"comment_content":"请问下 Mach-o 文件中是清理掉了没有用的到函数，内存中还是存在这些函数的吧？","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445206,"discussion_content":"Mach-O 里没有，内存里也不会有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553941409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81170,"user_name":"Yuen","can_delete":false,"product_type":"c1","uid":1115032,"ip_address":"","ucode":"748A08C718C430","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/98/73ab8ceb.jpg","comment_is_top":false,"comment_ctime":1553824625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553824625","product_id":100024501,"comment_content":"(lldb) p path<br>(const char *) $0 = 0x00007ffeefbff2f0 &quot;&#47;Users&#47;Ruan&#47;Library&#47;Developer&#47;Xcode&#47;DerivedData&#47;objc-dwjusikpptngjacblrnyiechvikc&#47;Build&#47;Products&#47;Debug&#47;debug-objc&quot;<br>","like_count":0},{"had_liked":false,"id":81169,"user_name":"Yuen","can_delete":false,"product_type":"c1","uid":1115032,"ip_address":"","ucode":"748A08C718C430","user_header":"https://static001.geekbang.org/account/avatar/00/11/03/98/73ab8ceb.jpg","comment_is_top":false,"comment_ctime":1553824598,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1553824598","product_id":100024501,"comment_content":"您好，在可编译的开源 runtime 库中，我在load_images方法中断点p path，只打印出了如下结果","like_count":0,"discussions":[{"author":{"id":1375821,"avatar":"https://static001.geekbang.org/account/avatar/00/14/fe/4d/e5c33794.jpg","nickname":"慧慧","note":"","ucode":"C1CDB9BF4564C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350127,"discussion_content":"同问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613719215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1455880,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/08/e25813c0.jpg","nickname":"落夏","note":"","ucode":"A5A2A5C4EF9E54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":282030,"discussion_content":"请问为啥我的可编译的开源runtime库中， 在main中打了断点但是无效，您怎么设置的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591864528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80939,"user_name":"胡大猴(´･_･`)","can_delete":false,"product_type":"c1","uid":1141131,"ip_address":"","ucode":"26459843066A7C","user_header":"https://static001.geekbang.org/account/avatar/00/11/69/8b/1d034714.jpg","comment_is_top":false,"comment_ctime":1553759822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553759822","product_id":100024501,"comment_content":"似乎dlclose()在Mac OS 和iOS上都没起到预期作用<br>是有什么原因吗","like_count":0},{"had_liked":false,"id":80868,"user_name":"Geek_b17107","can_delete":false,"product_type":"c1","uid":1467795,"ip_address":"","ucode":"1E7B324734C189","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jfwxv44zewuyr7WEsOvTo6VXZibncYyAobptGkO2vbbRNMlGwU1LgEQm5BMicrBzxUiat3gmlKXqnSVPib05TuI7ww/132","comment_is_top":false,"comment_ctime":1553744431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553744431","product_id":100024501,"comment_content":"“在代码里可以发现 Class 的 +load 是先执行的，然后执行 Category。”<br>这个规则仅限于同一个动态库&#47;主程序二进制文件内部吧，比如动态库A中的某个 Category  的 +load 方法有可能比主程序中另一个 Class 的 +load 方法先执行。不过对于同一个类及其分类，Class 的 +load 方法总是比 Category 的 +load 方法先执行。","like_count":0},{"had_liked":false,"id":79474,"user_name":"bubble","can_delete":false,"product_type":"c1","uid":1008527,"ip_address":"","ucode":"E1046CC31341D9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/8f/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1553492735,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1553492735","product_id":100024501,"comment_content":"老师我在终端运行的时候 xcrun clang -c SayHi.m 报错 SayHi.m:9:9: error: expected &quot;FILENAME&quot; or &lt;FILENAME&gt;<br>#import “Boy.h”<br>        ^<br>SayHi.m:13:9: error: use of undeclared identifier &#39;Boy&#39;<br>        Boy *boy = [[Boy alloc] init];<br>        ^<br>SayHi.m:13:14: error: use of undeclared identifier &#39;boy&#39;<br>        Boy *boy = [[Boy alloc] init];<br>             ^<br>SayHi.m:13:22: error: use of undeclared identifier &#39;Boy&#39;<br>        Boy *boy = [[Boy alloc] init];<br>                     ^<br>SayHi.m:14:10: error: use of undeclared identifier &#39;boy&#39;<br>        [boy say];<br>         ^<br>5 errors generated. 您给的例子具体怎么操作的？有些疑惑","like_count":0},{"had_liked":false,"id":79421,"user_name":"Ripper","can_delete":false,"product_type":"c1","uid":1167593,"ip_address":"","ucode":"03F30F937AF0E5","user_header":"https://static001.geekbang.org/account/avatar/00/11/d0/e9/7dc0be6b.jpg","comment_is_top":false,"comment_ctime":1553480479,"is_pvip":false,"replies":[{"id":"28978","content":"合理","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553499697,"ip_address":"","comment_id":79421,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553480479","product_id":100024501,"comment_content":"哈哈，每天都是干货，有一点点消化不良啊！音频和文章都很棒!<br>😀 提一个小小的建议，就是在读到有图或者有代码的部分的时候，能不能稍稍停顿一下，因为我发现即便是边看文章边听音频，遇到有图或代码的部分的时候就没有时间稍稍浏览一下了。觉得建议不合理请忽略...","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444495,"discussion_content":"合理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553499697,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78808,"user_name":"沈陈","can_delete":false,"product_type":"c1","uid":1024888,"ip_address":"","ucode":"6869550C65C971","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/78/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1553243385,"is_pvip":false,"replies":[{"id":"28652","content":"赞","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1553262089,"ip_address":"","comment_id":78808,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553243385","product_id":100024501,"comment_content":"老师，应该是--show-sdk-path","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444236,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553262089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78806,"user_name":"drunkenMouse","can_delete":false,"product_type":"c1","uid":1454037,"ip_address":"","ucode":"AA8CEA703ECBE8","user_header":"","comment_is_top":false,"comment_ctime":1553243303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553243303","product_id":100024501,"comment_content":"最后再处理 +load 方法，main 函数返回后运行、。。。第二步还能理解，第三步就想不通了。<br><br>如果说加载了动态链接库，也会默认先调用+load方法，那这个main函数返回后，岂不是意味着：<br><br>在动态链接库的main函数执行前，会先将库中文件编译成可执行文件再执行+load方法，之后执行main函数 跟App的冷启动时main函数执行前的操作一样了？","like_count":0},{"had_liked":false,"id":78794,"user_name":"※ Alfred ※※※","can_delete":false,"product_type":"c1","uid":1023360,"ip_address":"","ucode":"7735BCF4F9FEE6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/80/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1553241495,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553241495","product_id":100024501,"comment_content":"友情提醒：<br>xcrun clang SayHi.o Boy.o -Wl,`xcrun —show-sdk-path`&#47;System&#47;Library&#47;Frameworks&#47;Foundation.framework&#47;Foundation<br>‘—’应该是两个’-’，文档的问题，非作者笔误。<br>","like_count":0},{"had_liked":false,"id":78707,"user_name":"hao","can_delete":false,"product_type":"c1","uid":1455940,"ip_address":"","ucode":"174B855F3768CE","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/44/6a0b759f.jpg","comment_is_top":false,"comment_ctime":1553221438,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553221438","product_id":100024501,"comment_content":"老师你好：<br>看了dyld的源码，里面有段代码：<br><br>if ( *segCount &gt; 255 )<br>\t\tdyld::throwf(&quot;malformed mach-o image: more than 255 segments in %s&quot;, path);<br><br>当中的segCount不能超过255个，这个segCount是根据LC_SEGMENT_64来统计的，想问下：machO里的LC_SEGMENT_64是怎么生成的，我们开发层面什么情况下会使的LC_SEGMENT_64增多？","like_count":0},{"had_liked":false,"id":78625,"user_name":"天山雪莲","can_delete":false,"product_type":"c1","uid":1249818,"ip_address":"","ucode":"6B3A9CDDF2AAF2","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/1a/0749cce3.jpg","comment_is_top":false,"comment_ctime":1553184834,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553184834","product_id":100024501,"comment_content":"学习了，赞。","like_count":0},{"had_liked":false,"id":78432,"user_name":"阿柒","can_delete":false,"product_type":"c1","uid":1255157,"ip_address":"","ucode":"29FAEEB007D9C4","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLbPelttpoZVoPUZ6ZBmwfYKUeicBTcP7mGJo1jicEAEQBgIlY6y9oWwhVUayAZukYkatyNxLrbpia9g/132","comment_is_top":false,"comment_ctime":1553146686,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553146686","product_id":100024501,"comment_content":"很棒。谢谢老师<br>","like_count":0}]}