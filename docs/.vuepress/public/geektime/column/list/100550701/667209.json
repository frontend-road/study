{"id":667209,"title":"08｜迭代答案：让结果更惊喜","content":"<p>你好，我是键盘，我们继续驯服 GPT。</p><p>我们已经讲完怎么设计prompt，怎么更好地写出少冗余的prompt，接下来就要同步打磨ChatGPT的输出结果和prompt本身了。</p><p>为什么不是单纯调整中间过程来迭代结果？因为输入影响输出，我们没办法保证设计“一定没有错漏”这种完美的情况，而且初始prompt是源头，影响权重最大。</p><p>这节课，我会带你实现一个ChatHub，打通主流AI产品之间的协作，在这个过程中反复打磨prompt本身和输出结果。</p><h2>开始整活</h2><p>明确打造AI全明星ChatHub这个目标之后，我们开始着手设计。<strong>课程中会用到Python（必备）和Arc浏览器（非必需）。</strong></p><p>关于Python，你不需要Python基础，但需要<a href=\"https://time.geekbang.org/column/article/664762\">安装好程序和环境</a>，在ChatGPT的协助下大概需要半天来解决，属于一劳永逸的准备工作。Arc浏览器这边主要是利用它的分屏功能，传统浏览器的话，使用标签分离也可以解决。</p><p><img src=\"https://static001.geekbang.org/resource/image/b0/e2/b0664f8cc2551146db8b06909970aae2.png?wh=1920x723\" alt=\"图片\" title=\"Arc 浏览器的分屏功能\"></p><h3>先思维，再技术</h3><p>眼尖的小伙伴看到“多标签”可能就明白了，ChatHub就是通过让AI接管浏览器的权限自动打开多标签。再次强调，用什么技术并不重要，“从结果反推来实现”的思维是贯穿整套课程的。</p><p>之所以用这个轻量方式来实现ChatHub，原因有3个。</p><!-- [[[read_end]]] --><ol>\n<li><strong>不应该依赖多余的工具</strong><strong>：</strong>高端的食材往往只需要最朴素的烹饪方式。规划prompt用记事本，访问AI就靠浏览器本身。</li>\n<li><strong>工具只是手段</strong><strong>：</strong>解决问题不是非得做一个工具，整合已有工具也可以。</li>\n<li><strong>规避账户风险</strong><strong>：</strong>这个方法用的全是官方的模型和服务，干干净净。</li>\n</ol><p>但是目前ChatGPT还没办法接管浏览器权限，所以就让TA写个脚本来实现，Python也只是其中一种可能。</p><p><img src=\"https://static001.geekbang.org/resource/image/ff/7a/fff0ca13c592420581074743048dd37a.png?wh=1468x400\" alt=\"图片\" title=\"ChatGPT 没办法替你打开浏览器\"></p><h3>盘点需求，设计prompt</h3><p>和ChatGPT协作的第一步永远是搞明白自己要什么。ChatHub主要是为了方便“一站式”整合市面上能够提效的AI，同时利用Arc的分屏，不仅可以在ChatGPT旁边安排强大的辅助，你还能够让不同AI的输出物有效流转，比如将Firefly生成的图片嵌入ChatGPT生成的文稿中。</p><p>那么我们都需要哪些AI呢？</p><ol>\n<li><strong>C位六边形战士ChatGPT：</strong>ai.com。</li>\n<li><strong>你的第二智能大脑，优秀的个人笔记Notion：</strong>www.notion.so。</li>\n<li><strong>Google的Bard，胜在能联网，更有图片可视化：</strong>bard.google.com。</li>\n<li><strong>Claude，ChatGPT的优秀备胎，也支持中文：</strong> poe.com。</li>\n<li><strong>你的智能设计师 Adobe Firefly：</strong>firefly.adobe.com。</li>\n</ol><p>盘点需求之后，发现不需要特别试探什么概念，我们开始设计prompt。</p><h3>从源头开始观察和校正</h3><p>直接立人设，列要求，下指令。</p><center>\n💬 初始 prompt\n</center><pre><code class=\"language-markdown\">你是一位python编程专家，写一段脚本帮我打开以下标签页：\n{ai.com，notion.so，bard.google.com，poe.com，firefly.adobe.com}\n\n背景信息：Mac系统，默认浏览器Arc\n\n要求：\n- 尽量少地使用依赖库\n- 完成任务后在代码结果中显示“🎉 任务已执行”\n- 请一步一步思考\n</code></pre><p>迭代的第一步：ChatGPT先打开它们给我看看。比如我的跑机结果是页面被一个个覆盖打开，最后只能看到最后一个链接，这个要怎么应对呢？</p><p>这是prompt设计的疏忽导致的，“打开以下标签页”需要修改为“帮我并列打开以下标签页”，表达才更准确。另外，Arc和主流浏览器的内部操作机制也可能不同，可以先尝试Chrome、Safari之类的主流浏览器是否支持，通过对照来找线索。<strong>对照法是迭代中很常用的技巧，不用一根筋死磕。</strong></p><p>继续分析，我们真实的使用情况中，更多是希望最后停留在ChatGPT页面。这个只要在原prompt的第二行里让标签页打开的顺序反过来就行。如果你有其他需求，随时可以在代码中调整链接、数量和顺序。</p><p><strong>因为<strong><strong>最基础的</strong></strong>需求实现<strong><strong>都</strong></strong>偏离预期<strong><strong>了</strong></strong>，<strong><strong>所以</strong></strong>我们从源头校正结果</strong>。修订原始prompt主要用的是<a href=\"https://time.geekbang.org/column/article/662929\">第一节课</a>里面的“编辑”和“重新生成”两个一键提效技巧。</p><center>\n💬 prompt\n</center><pre><code class=\"language-markdown\">你是一位python编程专家，写一段脚本帮我并排打开以下标签页：\n{firefly.adobe.com，poe.com，bard.google.com，notion.so，ai.com}\n\n背景信息：Mac系统，默认浏览器Chrome\n\n要求：\n- 尽量少地使用依赖库\n- 完成任务后在代码结果中显示“🎉 任务已执行”\n- 请一步一步思考\n</code></pre><center>\n🤖️ ChatGPT：适用于Chrome的Python解决方案\n</center><pre><code class=\"language-markdown\">import subprocess\n\ndef open_tabs(urls):\n    command = 'open -a \"Google Chrome\" {}'.format(' '.join(urls))\n    subprocess.Popen(command, shell=True)\n\nif __name__ == '__main__':\n    urls = ['https://firefly.adobe.com', 'https://poe.com', 'https://bard.google.com', 'https://notion.so', 'https://ai.com']\n    open_tabs(urls)\n    print(\"🎉 任务已执行\")\n</code></pre><p>顺利完成任务，一秒全打开。</p><p>因为任务不复杂，运行没有报错，省去了让ChatGPT修bug的时间。那万一报错了怎么办？复制报错信息。用prompt“报错：&lt;你复制的报错信息&gt;”交给ChatGPT改代码，TA会指出存在的问题，同时提供进一步的解决方案。</p><p><img src=\"https://static001.geekbang.org/resource/image/a4/c4/a4013c60e0d2842d051fc560d88f90c4.png?wh=1920x582\" alt=\"图片\"></p><p>从两次对照结果看来，Arc的内部操作机制确实对结果有影响，根据这个线索，用持续沟通的方式来解决它，然后打磨细节。相比修改初始prompt的方式，<strong>在获取初次结果之后持续沟通的必要前提是调整后能跑通且基本符合预期，但是存在可优化的空间。</strong>否则，就要从源头优化。</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/d7/3bb9e2d50f5557e4653b85081b5241d7.png?wh=1248x360\" alt=\"图片\" title=\"从头还是继续\"></p><h3>持续迭代，直到解决问题</h3><p>Chrome 这条路径跑通之后，我们就要迁移到Arc浏览器来<strong>实现零干扰的沉浸式智能空间</strong>了，实现的关键就在于利用Arc的隐藏界面框架和自身强大的分屏整合能力。结合第一次输出，<strong>抛出一个可能性，让TA去找突破。</strong>下面的迭代跑机截图中，我使用了3个“提示词工程”技巧来提升执行效果。</p><ol>\n<li><strong>提供“步骤”：</strong>给ChatGPT思考的时间，逐步推理，稳扎稳打。你可以参考我拆解给ChatGPT的Tab打开步骤。</li>\n</ol><pre><code class=\"language-markdown\">1. 打开Arc浏览器。\n2. CMD+T粘贴我在初始prompt里面提供的链接，按回车来打开网页。 \n3. 重复这个步骤，直到5个Tab都被打开。\n</code></pre><ol start=\"2\">\n<li><strong>“请一步一步思考” + “输出完整的代码”</strong>：设计了一个编码场景中实用的“提示词工程”组合来激活ChatGPT的慢思维，而且代码不会再被切碎输出。</li>\n<li><strong>补充细节：</strong>用“默认浏览器”交待背景信息，“请确保步骤没有改动”不破坏运行框架。只要是能提升效果的交流方法，你都可以认为是有效的提示词工程。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/c6/b7/c67671b1af9153c47906df1300b457b7.png?wh=1920x1184\" alt=\"图片\" title=\"持续迭代\"></p><p>最后，用模拟快捷键来分屏的方式遇到了阻碍。ChatGPT除了直接摊手，还给了AppleScript和pyautogui这2种解决方案的代码，但暂时实现都不理想，主要是因为会在最后的ChatGPT界面中获取焦点，快捷键的作用变成了输入。好在自动分屏不是核心的需求，可以后续再来优化它。只在有需要的时候，使用Arc的快捷键Shift+Cmd+=，回车就能触发。</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/23/8e1767ffc799f6fbe256700c4218fc23.png?wh=1919x746\" alt=\"图片\" title=\"ChatGPT 摊手\"></p><p>我们来看最新的一组迭代成果，耗时3秒，顺利执行。</p><p><img src=\"https://static001.geekbang.org/resource/image/74/d3/743fb9546d6f7d274c9257ca4f3268d3.png?wh=1920x876\" alt=\"图片\" title=\"AI 3 秒完成组队\"></p><p>不过，日常使用如果一直都靠手动启动Python来运行也不方便，所以可以<strong>让ChatGPT将这个调用写成快捷指令的形式来提效</strong>。我用的是Mac，系统自带的快捷指令或自动操作等方式都能实现，Windows上就是类似批处理指令。</p><p>这一步终于报错了。没关系，ChatGPT会出手，报错信息交给TA，抄作业就行。</p><p><img src=\"https://static001.geekbang.org/resource/image/6e/42/6ec0f464c7b35da5e0678b99447e6e42.png?wh=1920x580\" alt=\"图片\" title=\"终于报错了，全程复制粘贴解决\"></p><p>照着提示安装完“ xcode命令行工具”就解决了，一键召唤AI全明星，一秒全到场。</p><p><img src=\"https://static001.geekbang.org/resource/image/6e/fe/6e3c9e6eae1dee864yybaeb000698afe.gif?wh=960x599\" alt=\"图片\" title=\"一秒召唤 AI 全明星\"></p><p>现在，我们就打造了一个能够整合众多工具的ChatHub了，简单来说，TA的“一站式”价值有3个方向。</p><ol>\n<li><strong>提效闭环：</strong>AI 全明星强强联合，生成的内容可以高效流转，不再“单打独斗”。</li>\n<li><strong>沉浸式体验：</strong>Arc可以隐藏界面中影响思考的操作，比如侧边栏和老牌浏览器“头上”密密麻麻的标签页。</li>\n<li><strong>提升输入体验：</strong>从单行输入框到页面，Notion提供了更广阔的空间，方便你规划和管理prompt，同时也是ChatGPT输出的交付文稿的好归宿。</li>\n</ol><h2>ChatHub：一键打通智能协作空间</h2><p>不过打造这个ChatHub并不是结果，而是开始。我们怎么把TA用起来呢？</p><h3>闭环AIGC工作流</h3><p>假如你的团队想拥抱AIGC来提效工作流，你可以利用大家熟悉的AI来生成项目计划并进行管理，将AI生成的包括图文、代码、计划等等内容有秩序地组织起来，让它们在不同的AI之间有效流转，在协作文档中追踪。可以说是“一个ChatHub解君愁”。</p><p>第一步，围绕C位的ChatGPT，搭配Notion初步打造一个闭环的AIGC工作流：规划prompt ▸ ChatGPT解决需求 ▸ 交付成果归档管理和协作。你也可以用Notion管理各种经过实战检验的AI人设。</p><p><img src=\"https://static001.geekbang.org/resource/image/ca/f1/ca160130704b650342143671cc8921f1.png?wh=1920x792\" alt=\"图片\" title=\"用 ChatHub 整合 AI 工作流\"></p><p>第二步，整合其他工具，比如打开<a href=\"https://data:text/html;base64,PGh0bWwgY29udGVudGVkaXRhYmxlPmVkaXQgbWU8L2h0bWw+\">临时记事本</a>，你就可以用简洁的方式来规划prompt，实现零干扰的AI沉浸空间。右边这段Master人设模版我已经注入了输入法，敲两下就能出来，你可以期待第10节课的分享。</p><p><img src=\"https://static001.geekbang.org/resource/image/91/a4/91a2e9f70a3c7d4fc4a0e4ee414c82a4.png?wh=1920x792\" alt=\"图片\" title=\"高端的食材往往只要最朴素的烹饪方式\"></p><p>第三步，利用ChatGPT生成学习计划或项目计划。把计划粘贴到Notion中就会形成可追踪的里程碑，不再需要To Do List应用。这里可以作为团队成员的管理文档，拆解每天的工作。你还可以要求ChatGPT把生成的内容自动发送到Notion笔记中，提升团队沟通效率。这些目标都能够通过迭代达成。</p><p><img src=\"https://static001.geekbang.org/resource/image/53/56/537b04ab4178d1265c9363f59db21a56.png?wh=1920x792\" alt=\"图片\" title=\"用 ChatHub 制定可用计划\"></p><p>最后，如果团队里有图片相关的需求，智能绘图作为链接也能够流转到其他AI的生产线中。除了Firefly，Midjourney和Stable Diffusion的图片也可以这么用。当然，你要注意相关的版权细节，比如$10/月的MJ套餐生成的结果就不可商用。</p><p><img src=\"https://static001.geekbang.org/resource/image/34/7e/347fdb1e0190f2dc776bafc187aa197e.png?wh=1920x989\" alt=\"图片\" title=\"智能绘图结果整合到 ChatGPT 文稿中\"></p><h3>目光所及，强强联合，助你更高效</h3><p>通过ChatHub，你可以利用不同AI的优势去高效组合。怎么做呢？看看下面AI三剑客的截图，分别是ChatGPT、Poe上的Claude、谷歌Bard。</p><p><img src=\"https://static001.geekbang.org/resource/image/26/b5/267beyyccce481f6ccf4b32164a06db5.png?wh=1920x792AI\" alt=\"图片\" title=\"三剑客\"></p><p>最左边的ChatGPT我们比较熟悉了，智能时代的第一个冲浪板。大多时候可以优先在这个“人智协作舒适区”展开工作。不过，用ChatGPT就是最好的方案了吗？想要迁移ChatGPT的能力，继续往右看。</p><p>中间的Poe接入了Claude、ChatGPT和GPT-4等主流官方模型，不方便使用OpenAI服务的小伙伴不用再为访问问题犯愁了，打开就能用。假如有需要总结超长文本，那么它的Claude-100K模型可以胜任挑战。缺点是Claude的综合输出质量稍稍逊色。</p><p>最右，<strong>免费的</strong> Bard胜在联网准确、生成速度一骑绝尘，默认生成3组结果参考，更有图像可视化的能力，大幅提升了可读性。缺点是大家比较关注的语言问题：目前只支持英文。</p><p>现在，ChatHub里的ChatGPT和Claude都能轻松解决翻译问题，你可以同时让三剑客为你提供服务，不用切换多个Tab，反复左右横跳。</p><h3>综合对照，让AI有效内卷，为你所用</h3><p>除了组合应用，还有一种提效场景是针对同一个问题做综合对照，交出最好的成果。</p><p>比如下面分别让Claude、Bard和GPT-4总结K.K新书的例子，初始prompt都是“总结KK的新书：<em>Excellent Advice for Living Wisdom I Wish Id Known Earlier</em>。</p><p>首先验证是否可行。假如都顺利通过，你就定一个综合标准来评估哪一个结果是更好的，可以使用准确度、完整度、专业表达这些指标。</p><p>完成对照，你也可以用刚才说的“强强联合法”继续升华输出结果。Bard有可视化的能力，要求结果里面先展示书籍封面就可以帮助快速确认是否瞎编。而GPT-4借助AskYourPDF插件就可以给到准确和详细的总结，再参考Claude的链接和Bard的封面，就能升级为丰富专业的输出。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/5e/8f8061d88390db5e89a4c98eeae8f25e.png?wh=1920x1106\" alt=\"图片\" title=\"总结 K.K 新书 Excellent Advice for Living Wisdom I Wish Id Known Earlier\"></p><h2>小黑板</h2><p>上手ChatGPT有三大里程碑：掌握独立设计prompt、学会高质量和少冗余的提问、会迭代“答案”。这节课我们终于来到最后一个里程。</p><p>从<strong>“有错漏”和“不稳定”</strong>这2个普遍问题出发，我们打造了一个能够有效打通主流AI进行协作的ChatHub。这个过程中，我们掌握了从源头到过程的迭代方法，还有针对成果的升级方法，打造了从生成方案代码到一键打通的沉浸式智能协作空间。<strong>以前没有编程基础<strong><strong>就</strong></strong>完全不可能的方案，今天你在ChatGPT的帮助下就能做到。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/a9/26/a9e5d7a81a35a1ebf0893f4ff1c4df26.png?wh=1274x398\" alt=\"图片\" title=\"上手 ChatGPT 的三大里程碑\"></p><p>其实，迭代答案从初始prompt设计就开始了，我们灵活使用套路，直接出发。盘点好需求，结合3W原则，初始prompt就形成了。发出去之后，就要从源头开始观察生成结果。我推荐你使用2个“一键提效”技巧来纠偏，用“编辑”解决修错漏和补细节，用“重新生成”给你多组可对比的方案。如果方向没有偏离，就可以进入过程迭代，结合主动思考去引导ChatGPT“打磨”，直到达成目标。</p><p>过程迭代我提供了实用的提示词技巧，核心作用是激活慢思维和提升推理质量。遇到阻碍和报错也不要紧，抓大放小、对照实验都是解决的方法，ChatGPT会指引你走出困境。</p><p>迭代是为了更好的结果，但所有的结果都只是新的开始。不断突破的精神才是你给自己最大的惊喜。</p><p><strong>要点秒懂：</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/41/31/41ef40b37af8dc37dbbbc8b3d93a4831.png?wh=1262x732\" alt=\"图片\"></p><h2>课后练习</h2><p>盘点一下自己的高频需求，有没有想过借助ChatGPT来重塑的解决方案呢？或者就是单纯实现更高效？尝试一下。可以是针对一个日常离不开的工具，通过这种整合方式和ChatGPT的内容生产全流程对接，可以是突然灵光一闪，打造一个取悦自己的智能骚操作。</p><p>期待在评论区看到你的思考或感受分享，也欢迎你将这节课分享给感兴趣的朋友们，戳此加入<a href=\"http://jinshuju.net/f/oI1KKM\">课程交流群</a>，我们下节课再会。</p><h2>附：Arc浏览器适用的Python代码</h2><p>测试环境：MacOS</p><pre><code class=\"language-markdown\">import subprocess\n\ndef open_tabs(urls):\n&nbsp; &nbsp; for url in urls:\n&nbsp; &nbsp; &nbsp; &nbsp; if 'notion.so' in url:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 执行AppleScript脚本来打开新标签页并打开notion.so\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; script = 'tell application \"Arc\" to tell window 1 to make new tab with properties {{URL:\"{}\"}}'.format(url)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; subprocess.run(['osascript', '-e', script], capture_output=True, text=True)\n&nbsp; &nbsp; &nbsp; &nbsp; else:\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 执行AppleScript脚本来打开新标签页并打开链接\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; script = 'tell application \"Arc\" to tell window 1 to make new tab with properties {{URL:\"{}\"}}'.format(url)\n&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; subprocess.run(['osascript', '-e', script], capture_output=True, text=True)\n\n&nbsp; &nbsp; print(\"🎉 任务已执行\")\n\nif __name__ == '__main__':\n&nbsp; &nbsp; urls = ['https://ai.com', 'https://notion.so', 'https://bard.google.com', 'https://poe.com', 'https://firefly.adobe.com']\n&nbsp; &nbsp; open_tabs(urls)\n</code></pre>","comments":[{"had_liked":false,"id":377155,"user_name":"石云升","can_delete":false,"product_type":"c1","uid":1024195,"ip_address":"广东","ucode":"78F1DD33EFD000","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/c3/c5db35df.jpg","comment_is_top":false,"comment_ctime":1688007876,"is_pvip":false,"replies":[{"id":137447,"content":"基础很容易，后面灵活组合基础就需要实践吃透和思考了。这门课都是实践里萃取的精华和思考，并不是简简单单的操作手册。","user_name":"作者回复","user_name_real":"编辑","uid":3588216,"ctime":1688045970,"ip_address":"广东","comment_id":377155,"utype":1}],"discussion_count":1,"race_medal":1,"score":2,"product_id":100550701,"comment_content":"我收回我在发刊词里留言说的，这门课很好学，速来。\n我要改成，这门课学起来不容易，但有好东西。同学们，速来。","like_count":4,"discussions":[{"author":{"id":3588216,"avatar":"https://static001.geekbang.org/account/avatar/00/36/c0/78/15553da1.jpg","nickname":"ᴶᴱᴿ","note":"","ucode":"4E0DADC47389DF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":622272,"discussion_content":"基础很容易，后面灵活组合基础就需要实践吃透和思考了。这门课都是实践里萃取的精华和思考，并不是简简单单的操作手册。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1688045970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376380,"user_name":"Toni","can_delete":false,"product_type":"c1","uid":3206957,"ip_address":"瑞士","ucode":"E6B2FACCC1E000","user_header":"https://static001.geekbang.org/account/avatar/00/30/ef/2d/757bb0d3.jpg","comment_is_top":false,"comment_ctime":1686749452,"is_pvip":false,"replies":[{"id":137246,"content":"只要清晰表达需求，ChatGPT不会让人失望。😁","user_name":"作者回复","user_name_real":"编辑","uid":3588216,"ctime":1686811952,"ip_address":"广东","comment_id":376380,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100550701,"comment_content":"ChatGPT生成的代码和对代码的解释: (Windows, Microsoft Edge)\n\n如果你希望通过命令行（CMD）来打开 Microsoft Edge 浏览器并同时打开指定的标签页，你可以使用以下的批处理脚本。\n\n首先，创建一个名为 open_tabs.cmd 的文本文件，将以下内容复制粘贴到文件中：\n\n--------------------------------------\n@echo off\nset urls=&quot;https:&#47;&#47;firefly.adobe.com&quot; &quot;https:&#47;&#47;poe.com&quot; &quot;https:&#47;&#47;bard.google.com&quot; &quot;https:&#47;&#47;notion.so&quot; &quot;https:&#47;&#47;ai.com&quot;\nfor %%i in (%urls%) do (\n    start microsoft-edge:%%i\n)\necho 🎉 任务已执行\n---------------------------------------\n\n然后，保存文件并将其双击运行，或在 CMD 中执行该批处理脚本。\n\n这个脚本会使用 start 命令打开 Microsoft Edge 浏览器，并通过使用 microsoft-edge: 协议打开指定的标签页。%urls% 变量包含了要打开的标签页的URL列表。循环遍历这些URL，并使用 start microsoft-edge:URL 命令来在 Microsoft Edge 中打开每个标签页。\n\n执行完所有的命令后，会打印出 &quot;🎉 任务已执行&quot; 表示脚本成功完成了任务。\n\n请注意，这种方法假定你的系统上已经安装了 Microsoft Edge 浏览器，并且它是默认浏览器。\n\n希望这能帮到你！如果你还有其他问题，请随时提问。\n----------------------------------------\n\n使用本课的方法，ChatGPT生成的代码跑得通。","like_count":0,"discussions":[{"author":{"id":3588216,"avatar":"https://static001.geekbang.org/account/avatar/00/36/c0/78/15553da1.jpg","nickname":"ᴶᴱᴿ","note":"","ucode":"4E0DADC47389DF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621093,"discussion_content":"只要清晰表达需求，ChatGPT不会让人失望。😁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686811952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3206957,"avatar":"https://static001.geekbang.org/account/avatar/00/30/ef/2d/757bb0d3.jpg","nickname":"Toni","note":"","ucode":"E6B2FACCC1E000","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621104,"discussion_content":"如何让ChatGPT解24点游戏，用较快的方法，对prompt是个挑战","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686817314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3206957,"avatar":"https://static001.geekbang.org/account/avatar/00/30/ef/2d/757bb0d3.jpg","nickname":"Toni","note":"","ucode":"E6B2FACCC1E000","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621103,"discussion_content":"嗯，难点是如何实现发散思维","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686817138,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376474,"user_name":"ᴶᴱᴿ","can_delete":false,"product_type":"c1","uid":3588216,"ip_address":"广东","ucode":"4E0DADC47389DF","user_header":"https://static001.geekbang.org/account/avatar/00/36/c0/78/15553da1.jpg","comment_is_top":false,"comment_ctime":1686834936,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100550701,"comment_content":"这节课我们在群里面整了个ChatGPT抽奖，送出了两个Arc邀请码。分享一下prompt和会话。\n\n原会话：https:&#47;&#47;chat.openai.com&#47;share&#47;da2f3bfb-704d-4171-b5e2-99f7937f8a54\n\n你将扮演一个公平的抽奖器，从下面的ID中抽出2位幸运小伙伴：\n\n1. ID\n2. Y024\n3. ReadU\n4. 一阴一阳之谓道\n5. Nothing\n6. 追\n7. zhjk\n8. 我不是小朋友\n9. 月涩风潇\n10. 线\n\n输出模版：\n## 🎉恭喜这两位朋友\n#表格输出2个ID\n获得Arc浏览器邀请码，请小窗JER领取","like_count":5}]}