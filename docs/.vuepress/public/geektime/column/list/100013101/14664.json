{"id":14664,"title":"11 | 通道的高级玩法","content":"<p>我们已经讨论过了通道的基本操作以及背后的规则。今天，我再来讲讲通道的高级玩法。</p><p>首先来说说单向通道。我们在说“通道”的时候指的都是双向通道，即：既可以发也可以收的通道。</p><p>所谓单向通道就是，只能发不能收，或者只能收不能发的通道。一个通道是双向的，还是单向的是由它的类型字面量体现的。</p><p>还记得我们在上篇文章中说过的接收操作符<code>&lt;-</code>吗？如果我们把它用在通道的类型字面量中，那么它代表的就不是“发送”或“接收”的动作了，而是表示通道的方向。</p><p>比如：</p><pre><code>var uselessChan = make(chan&lt;- int, 1)\n</code></pre><p>我声明并初始化了一个名叫<code>uselessChan</code>的变量。这个变量的类型是<code>chan&lt;- int</code>，容量是<code>1</code>。</p><p>请注意紧挨在关键字<code>chan</code>右边的那个<code>&lt;-</code>，这表示了这个通道是单向的，并且只能发而不能收。</p><p>类似的，如果这个操作符紧挨在<code>chan</code>的左边，那么就说明该通道只能收不能发。所以，前者可以被简称为发送通道，后者可以被简称为接收通道。</p><p>注意，与发送操作和接收操作对应，这里的“发”和“收”都是站在操作通道的代码的角度上说的。</p><p>从上述变量的名字上你也能猜到，这样的通道是没用的。通道就是为了传递数据而存在的，声明一个只有一端（发送端或者接收端）能用的通道没有任何意义。那么，单向通道的用途究竟在哪儿呢？</p><!-- [[[read_end]]] --><p><strong>问题：单向通道有什么应用价值？</strong></p><p>你可以先自己想想，然后再接着往下看。</p><p><strong>典型回答</strong></p><p>概括地说，单向通道最主要的用途就是约束其他代码的行为。</p><p><strong>问题解析</strong></p><p>这需要从两个方面讲，都跟函数的声明有些关系。先来看下面的代码：</p><pre><code>func SendInt(ch chan&lt;- int) {\n\tch &lt;- rand.Intn(1000)\n}\n</code></pre><p>我用<code>func</code>关键字声明了一个叫做<code>SendInt</code>的函数。这个函数只接受一个<code>chan&lt;- int</code>类型的参数。在这个函数中的代码只能向参数<code>ch</code>发送元素值，而不能从它那里接收元素值。这就起到了约束函数行为的作用。</p><p>你可能会问，我自己写的函数自己肯定能确定操作通道的方式，为什么还要再约束？好吧，这个例子可能过于简单了。在实际场景中，这种约束一般会出现在接口类型声明中的某个方法定义上。请看这个叫<code>Notifier</code>的接口类型声明：</p><pre><code>type Notifier interface {\n\tSendInt(ch chan&lt;- int)\n}\n</code></pre><p>在接口类型声明的花括号中，每一行都代表着一个方法的定义。接口中的方法定义与函数声明很类似，但是只包含了方法名称、参数列表和结果列表。</p><p>一个类型如果想成为一个接口类型的实现类型，那么就必须实现这个接口中定义的所有方法。因此，如果我们在某个方法的定义中使用了单向通道类型，那么就相当于在对它的所有实现做出约束。</p><p>在这里，<code>Notifier</code>接口中的<code>SendInt</code>方法只会接受一个发送通道作为参数，所以，在该接口的所有实现类型中的<code>SendInt</code>方法都会受到限制。这种约束方式还是很有用的，尤其是在我们编写模板代码或者可扩展的程序库的时候。</p><p>顺便说一下，我们在调用<code>SendInt</code>函数的时候，只需要把一个元素类型匹配的双向通道传给它就行了，没必要用发送通道，因为Go语言在这种情况下会自动地把双向通道转换为函数所需的单向通道。</p><pre><code>intChan1 := make(chan int, 3)\nSendInt(intChan1)\n</code></pre><p>在另一个方面，我们还可以在函数声明的结果列表中使用单向通道。如下所示：</p><pre><code>func getIntChan() &lt;-chan int {\n\tnum := 5\n\tch := make(chan int, num)\n\tfor i := 0; i &lt; num; i++ {\n\t\tch &lt;- i\n\t}\n\tclose(ch)\n\treturn ch\n}\n</code></pre><p>函数<code>getIntChan</code>会返回一个<code>&lt;-chan int</code>类型的通道，这就意味着得到该通道的程序，只能从通道中接收元素值。这实际上就是对函数调用方的一种约束了。</p><p>另外，我们在Go语言中还可以声明函数类型，如果我们在函数类型中使用了单向通道，那么就相等于在约束所有实现了这个函数类型的函数。</p><p>我们再顺便看一下调用<code>getIntChan</code>的代码：</p><pre><code>intChan2 := getIntChan()\nfor elem := range intChan2 {\n\tfmt.Printf(&quot;The element in intChan2: %v\\n&quot;, elem)\n}\n</code></pre><p>我把调用<code>getIntChan</code>得到的结果值赋给了变量<code>intChan2</code>，然后用<code>for</code>语句循环地取出了该通道中的所有元素值，并打印出来。</p><p>这里的<code>for</code>语句也可以被称为带有<code>range</code>子句的<code>for</code>语句。它的用法我在后面讲<code>for</code>语句的时候专门说明。现在你只需要知道关于它的三件事：</p><ol>\n<li>上述<code>for</code>语句会不断地尝试从通道<code>intChan2</code>中取出元素值。即使<code>intChan2</code>已经被关闭了，它也会在取出所有剩余的元素值之后再结束执行。</li>\n<li>通常，当通道<code>intChan2</code>中没有元素值时，这条<code>for</code>语句会被阻塞在有<code>for</code>关键字的那一行，直到有新的元素值可取。不过，由于这里的<code>getIntChan</code>函数会事先将<code>intChan2</code>关闭，所以它在取出<code>intChan2</code>中的所有元素值之后会直接结束执行。</li>\n<li>倘若通道<code>intChan2</code>的值为<code>nil</code>，那么这条<code>for</code>语句就会被永远地阻塞在有<code>for</code>关键字的那一行。</li>\n</ol><p>这就是带<code>range</code>子句的<code>for</code>语句与通道的联用方式。不过，它是一种用途比较广泛的语句，还可以被用来从其他一些类型的值中获取元素。除此之外，Go语言还有一种专门为了操作通道而存在的语句：<code>select</code>语句。</p><p><strong>知识扩展</strong></p><p><strong>问题1：<code>select</code>语句与通道怎样联用，应该注意些什么？</strong></p><p><code>select</code>语句只能与通道联用，它一般由若干个分支组成。每次执行这种语句的时候，一般只有一个分支中的代码会被运行。</p><p><code>select</code>语句的分支分为两种，一种叫做候选分支，另一种叫做默认分支。候选分支总是以关键字<code>case</code>开头，后跟一个<code>case</code>表达式和一个冒号，然后我们可以从下一行开始写入当分支被选中时需要执行的语句。</p><p>默认分支其实就是default case，因为，当且仅当没有候选分支被选中时它才会被执行，所以它以关键字<code>default</code>开头并直接后跟一个冒号。同样的，我们可以在<code>default:</code>的下一行写入要执行的语句。</p><p>由于<code>select</code>语句是专为通道而设计的，所以每个<code>case</code>表达式中都只能包含操作通道的表达式，比如接收表达式。</p><p>当然，如果我们需要把接收表达式的结果赋给变量的话，还可以把这里写成赋值语句或者短变量声明。下面展示一个简单的例子。</p><pre><code>// 准备好几个通道。\nintChannels := [3]chan int{\n\tmake(chan int, 1),\n\tmake(chan int, 1),\n\tmake(chan int, 1),\n}\n// 随机选择一个通道，并向它发送元素值。\nindex := rand.Intn(3)\nfmt.Printf(&quot;The index: %d\\n&quot;, index)\nintChannels[index] &lt;- index\n// 哪一个通道中有可取的元素值，哪个对应的分支就会被执行。\nselect {\ncase &lt;-intChannels[0]:\n\tfmt.Println(&quot;The first candidate case is selected.&quot;)\ncase &lt;-intChannels[1]:\n\tfmt.Println(&quot;The second candidate case is selected.&quot;)\ncase elem := &lt;-intChannels[2]:\n\tfmt.Printf(&quot;The third candidate case is selected, the element is %d.\\n&quot;, elem)\ndefault:\n\tfmt.Println(&quot;No candidate case is selected!&quot;)\n}\n</code></pre><p>我先准备好了三个类型为<code>chan int</code>、容量为<code>1</code>的通道，并把它们存入了一个叫做<code>intChannels</code>的数组。</p><p>然后，我随机选择一个范围在[0, 2]的整数，把它作为索引在上述数组中选择一个通道，并向其中发送一个元素值。</p><p>最后，我用一个包含了三个候选分支的<code>select</code>语句，分别尝试从上述三个通道中接收元素值，哪一个通道中有值，哪一个对应的候选分支就会被执行。后面还有一个默认分支，不过在这里它是不可能被选中的。</p><p>在使用<code>select</code>语句的时候，我们首先需要注意下面几个事情。</p><ol>\n<li>如果像上述示例那样加入了默认分支，那么无论涉及通道操作的表达式是否有阻塞，<code>select</code>语句都不会被阻塞。如果那几个表达式都阻塞了，或者说都没有满足求值的条件，那么默认分支就会被选中并执行。</li>\n<li>如果没有加入默认分支，那么一旦所有的<code>case</code>表达式都没有满足求值条件，那么<code>select</code>语句就会被阻塞。直到至少有一个<code>case</code>表达式满足条件为止。</li>\n<li>还记得吗？我们可能会因为通道关闭了，而直接从通道接收到一个其元素类型的零值。所以，在很多时候，我们需要通过接收表达式的第二个结果值来判断通道是否已经关闭。一旦发现某个通道关闭了，我们就应该及时地屏蔽掉对应的分支或者采取其他措施。这对于程序逻辑和程序性能都是有好处的。</li>\n<li><code>select</code>语句只能对其中的每一个<code>case</code>表达式各求值一次。所以，如果我们想连续或定时地操作其中的通道的话，就往往需要通过在<code>for</code>语句中嵌入<code>select</code>语句的方式实现。但这时要注意，简单地在<code>select</code>语句的分支中使用<code>break</code>语句，只能结束当前的<code>select</code>语句的执行，而并不会对外层的<code>for</code>语句产生作用。这种错误的用法可能会让这个<code>for</code>语句无休止地运行下去。</li>\n</ol><p>下面是一个简单的示例。</p><pre><code>intChan := make(chan int, 1)\n// 一秒后关闭通道。\ntime.AfterFunc(time.Second, func() {\n\tclose(intChan)\n})\nselect {\ncase _, ok := &lt;-intChan:\n\tif !ok {\n\t\tfmt.Println(&quot;The candidate case is closed.&quot;)\n\t\tbreak\n\t}\n\tfmt.Println(&quot;The candidate case is selected.&quot;)\n}\n</code></pre><p>我先声明并初始化了一个叫做<code>intChan</code>的通道，然后通过<code>time</code>包中的<code>AfterFunc</code>函数约定在一秒钟之后关闭该通道。</p><p>后面的<code>select</code>语句只有一个候选分支，我在其中利用接收表达式的第二个结果值对<code>intChan</code>通道是否已关闭做了判断，并在得到肯定结果后，通过<code>break</code>语句立即结束当前<code>select</code>语句的执行。</p><p>这个例子以及前面那个例子都可以在demo24.go文件中被找到。你应该运行下，看看结果如何。</p><p>上面这些注意事项中的一部分涉及到了<code>select</code>语句的分支选择规则。我觉得很有必要再专门整理和总结一下这些规则。</p><p><strong>问题2：<code>select</code>语句的分支选择规则都有哪些？</strong></p><p>规则如下面所示。</p><ol>\n<li>对于每一个<code>case</code>表达式，都至少会包含一个代表发送操作的发送表达式或者一个代表接收操作的接收表达式，同时也可能会包含其他的表达式。比如，如果<code>case</code>表达式是包含了接收表达式的短变量声明时，那么在赋值符号左边的就可以是一个或两个表达式，不过此处的表达式的结果必须是可以被赋值的。当这样的<code>case</code>表达式被求值时，它包含的多个表达式总会以从左到右的顺序被求值。<br>\n<br></li>\n<li><code>select</code>语句包含的候选分支中的<code>case</code>表达式都会在该语句执行开始时先被求值，并且求值的顺序是依从代码编写的顺序从上到下的。结合上一条规则，在<code>select</code>语句开始执行时，排在最上边的候选分支中最左边的表达式会最先被求值，然后是它右边的表达式。仅当最上边的候选分支中的所有表达式都被求值完毕后，从上边数第二个候选分支中的表达式才会被求值，顺序同样是从左到右，然后是第三个候选分支、第四个候选分支，以此类推。<br>\n<br></li>\n<li>对于每一个<code>case</code>表达式，如果其中的发送表达式或者接收表达式在被求值时，相应的操作正处于阻塞状态，那么对该<code>case</code>表达式的求值就是不成功的。在这种情况下，我们可以说，这个<code>case</code>表达式所在的候选分支是不满足选择条件的。<br>\n<br></li>\n<li>仅当<code>select</code>语句中的所有<code>case</code>表达式都被求值完毕后，它才会开始选择候选分支。这时候，它只会挑选满足选择条件的候选分支执行。如果所有的候选分支都不满足选择条件，那么默认分支就会被执行。如果这时没有默认分支，那么<code>select</code>语句就会立即进入阻塞状态，直到至少有一个候选分支满足选择条件为止。一旦有一个候选分支满足选择条件，<code>select</code>语句（或者说它所在的goroutine）就会被唤醒，这个候选分支就会被执行。<br>\n<br></li>\n<li>如果<code>select</code>语句发现同时有多个候选分支满足选择条件，那么它就会用一种伪随机的算法在这些分支中选择一个并执行。注意，即使<code>select</code>语句是在被唤醒时发现的这种情况，也会这样做。<br>\n<br></li>\n<li>一条<code>select</code>语句中只能够有一个默认分支。并且，默认分支只在无候选分支可选时才会被执行，这与它的编写位置无关。<br>\n<br></li>\n<li><code>select</code>语句的每次执行，包括<code>case</code>表达式求值和分支选择，都是独立的。不过，至于它的执行是否是并发安全的，就要看其中的<code>case</code>表达式以及分支中，是否包含并发不安全的代码了。</li>\n</ol><p>我把与以上规则相关的示例放在demo25.go文件中了。你一定要去试运行一下，然后尝试用上面的规则去解释它的输出内容。</p><p><strong>总结</strong></p><p>今天，我们先讲了单向通道的表示方法，操作符“<code>&lt;-</code>”仍然是关键。如果只用一个词来概括单向通道存在的意义的话，那就是“约束”，也就是对代码的约束。</p><p>我们可以使用带<code>range</code>子句的<code>for</code>语句从通道中获取数据，也可以通过<code>select</code>语句操纵通道。</p><p><code>select</code>语句是专门为通道而设计的，它可以包含若干个候选分支，每个分支中的<code>case</code>表达式都会包含针对某个通道的发送或接收操作。</p><p>当<code>select</code>语句被执行时，它会根据一套<strong>分支选择规则</strong>选中某一个分支并执行其中的代码。如果所有的候选分支都没有被选中，那么默认分支（如果有的话）就会被执行。注意，发送和接收操作的阻塞是分支选择规则的一个很重要的依据。</p><p><strong>思考题</strong></p><p>今天的思考题都由上述内容中的线索延伸而来。</p><ol>\n<li>如果在<code>select</code>语句中发现某个通道已关闭，那么应该怎样屏蔽掉它所在的分支？</li>\n<li>在<code>select</code>语句与<code>for</code>语句联用时，怎样直接退出外层的<code>for</code>语句？</li>\n</ol><p><a href=\"https://github.com/hyper0x/Golang_Puzzlers\">戳此查看Go语言专栏文章配套详细代码。</a></p>","neighbors":{"left":{"article_title":"10 | 通道的基本操作","id":14660},"right":{"article_title":"12 | 使用函数的正确姿势","id":14671}},"comments":[{"had_liked":false,"id":23007,"user_name":"江山如画","can_delete":false,"product_type":"c1","uid":1188280,"ip_address":"","ucode":"BEB6228E6135B5","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/b8/aca814dd.jpg","comment_is_top":false,"comment_ctime":1536109936,"is_pvip":false,"discussion_count":7,"race_medal":0,"score":"418147937648","product_id":100013101,"comment_content":"感觉方法应该挺多，就看解决的是不是优雅<br><br>第一个问题：发现某个channel被关闭后，为了防止再次进入这个分支，可以把这个channel重新赋值成为一个长度为0的非缓冲通道，这样这个case就一直被阻塞了：<br>for {<br>\t\tselect {<br>\t\tcase _, ok := &lt;-ch1:<br>\t\t\tif !ok {<br>\t\t\t\tch1 = make(chan int)<br>\t\t\t}<br>\t\tcase ..... :<br>\t\t\t&#47;&#47;&#47;&#47;<br>\t\tdefault:<br>\t\t\t&#47;&#47;&#47;&#47;\t<br>\t\t}<br>\t}<br><br>第二个问题：可以用 break和标签配合使用，直接break出指定的循环体，或者goto语句直接跳转到指定标签执行<br><br>break配合标签：<br><br>ch1 := make(chan int, 1)<br>\ttime.AfterFunc(time.Second, func() { close(ch1) })<br>loop:<br>\tfor {<br>\t\tselect {<br>\t\tcase _, ok := &lt;-ch1:<br>\t\t\tif !ok {<br>\t\t\t\tbreak loop<br>\t\t\t}<br>\t\t\tfmt.Println(&quot;ch1&quot;)<br>\t\t}<br>\t}<br>\tfmt.Println(&quot;END&quot;)<br><br>goto配合标签：<br><br>ch1 := make(chan int, 1)<br>\ttime.AfterFunc(time.Second, func() { close(ch1) })<br>\tfor {<br>\t\tselect {<br>\t\tcase _, ok := &lt;-ch1:<br>\t\t\tif !ok {<br>\t\t\t\tgoto loop<br>\t\t\t}<br>\t\t\tfmt.Println(&quot;ch1&quot;)<br>\t\t}<br>\t}<br>loop:<br>\tfmt.Println(&quot;END&quot;)","like_count":98,"discussions":[{"author":{"id":1239277,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e8/ed/f9347e5e.jpg","nickname":"我的腿腿","note":"","ucode":"2AAA36A7C3AD75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324169,"discussion_content":"直接return 可以吗？\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605064134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2334257,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/4fZ9thib248ZkR1N3Eekeyb8N1V1Ud0uePctlI4VQUibPSmEZvgoP0VYl6IsVHJc7ZMiczQMtU76y6E6ag1zNAK4Q/132","nickname":"Geek_336577","note":"","ucode":"4826355EBA4950","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1239277,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e8/ed/f9347e5e.jpg","nickname":"我的腿腿","note":"","ucode":"2AAA36A7C3AD75","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353145,"discussion_content":"那就看你这个代码段所在的函数是不是还有后续代码要运行，如果还有任务要运行那就不行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615033436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":324169,"ip_address":""},"score":353145,"extra":""}]},{"author":{"id":1236156,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dc/bc/3c5a1634.jpg","nickname":"Loyalty","note":"","ucode":"C23EE6878580C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585590,"discussion_content":"设置为不带缓冲区的不会将其置为阻塞，有入chan没有出或者没有入chan有出才会阻塞，你这个也没有入，select会一直去查看吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661691961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1649662,"avatar":"https://static001.geekbang.org/account/avatar/00/19/2b/fe/7925eb7e.jpg","nickname":"pdf","note":"","ucode":"A44250955878BB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314108,"discussion_content":"请问\nchan struct{}\nchan int\n哪个会好一点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603117756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2550566,"avatar":"","nickname":"brad","note":"","ucode":"B836AEA074B7BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1649662,"avatar":"https://static001.geekbang.org/account/avatar/00/19/2b/fe/7925eb7e.jpg","nickname":"pdf","note":"","ucode":"A44250955878BB","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":365267,"discussion_content":"chan struct{}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617758103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":314108,"ip_address":""},"score":365267,"extra":""}]},{"author":{"id":1676966,"avatar":"https://static001.geekbang.org/account/avatar/00/19/96/a6/32a286e0.jpg","nickname":"大雄","note":"","ucode":"5FCFDD3A940801","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62395,"discussion_content":"牛逼\n这一看不就是新手","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574840238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1459980,"avatar":"https://static001.geekbang.org/account/avatar/00/16/47/0c/f2f0245e.jpg","nickname":"🐶","note":"","ucode":"D9E46DDB64BA77","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4478,"discussion_content":"优雅！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565452242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":27308,"user_name":"任性😀","can_delete":false,"product_type":"c1","uid":1209711,"ip_address":"","ucode":"F80DB5E6896105","user_header":"https://static001.geekbang.org/account/avatar/00/12/75/6f/8a6e0a14.jpg","comment_is_top":false,"comment_ctime":1537869578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"246351005450","product_id":100013101,"comment_content":"demo24里边少了rand.Seed(time.Now().Unix())，不然每次随机数都是固定的顺序","like_count":58},{"had_liked":false,"id":79363,"user_name":"左氧佛沙星人","can_delete":false,"product_type":"c1","uid":1195278,"ip_address":"","ucode":"0D8295E1DABA8C","user_header":"https://static001.geekbang.org/account/avatar/00/12/3d/0e/92176eaa.jpg","comment_is_top":false,"comment_ctime":1553447273,"is_pvip":true,"replies":[{"id":"29065","content":"因为 make(chan int) 初始化的是不带缓冲的通道。非缓冲通道只有在收发双方都就绪的情况下才能传递元素值，否则就阻塞。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1553531388,"ip_address":"","comment_id":79363,"utype":1}],"discussion_count":2,"race_medal":0,"score":"130402466153","product_id":100013101,"comment_content":"老师好，demo25中的这段代码我没看懂，不是这个匹配上了吗？为啥没有执行呢？我理解应该打印The second candidate case is selected.。。。。<br>```<br>case getChan(1) &lt;- getNumber(1):<br>```<br>能指点一下吗？","like_count":31,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444468,"discussion_content":"因为 make(chan int) 初始化的是不带缓冲的通道。非缓冲通道只有在收发双方都就绪的情况下才能传递元素值，否则就阻塞。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553531388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2811353,"avatar":"","nickname":"Geek3977","note":"","ucode":"7BE3A2592A2D36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560216,"discussion_content":"所以改造一下程序，增加一个接受方，应该就能匹配上了：\n需要把接收语句和demo中的select语句块分别放到go语句中，并在main中通过sync.WaitGroup控制","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649231383,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34859,"user_name":"到不了的塔","can_delete":false,"product_type":"c1","uid":1258362,"ip_address":"","ucode":"0F5BE3CB58DE31","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/7a/ac307bfc.jpg","comment_is_top":false,"comment_ctime":1540342027,"is_pvip":false,"replies":[{"id":"13317","content":"设置为nil就可以了。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1541482543,"ip_address":"","comment_id":34859,"utype":1}],"discussion_count":2,"race_medal":0,"score":"74554786059","product_id":100013101,"comment_content":"郝老师，请问第一题的答案是啥，不知道怎么屏蔽分支呢","like_count":18,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":427365,"discussion_content":"设置为nil就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541482543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1254138,"avatar":"https://static001.geekbang.org/account/avatar/00/13/22/fa/671d2937.jpg","nickname":"重新来过","note":"","ucode":"27CC35140B63F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389669,"discussion_content":"老师是设置通道为nil吗？我测试这样不行\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629370996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23039,"user_name":"笨笨","can_delete":false,"product_type":"c1","uid":1005351,"ip_address":"","ucode":"6DA6DCAF6A7DCB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/27/805786be.jpg","comment_is_top":false,"comment_ctime":1536116745,"is_pvip":true,"replies":[{"id":"8401","content":"你的问题是什么？","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1536215996,"ip_address":"","comment_id":23039,"utype":1}],"discussion_count":1,"race_medal":0,"score":"70255593481","product_id":100013101,"comment_content":"谢谢赫老师今日分享，回答问题如下<br>1.对于select中被close的channel判断其第二个boolean参数，如果是false则被关闭，那么赋值此channel为nil，那么每次到这个nil的channel就会阻塞，select会忽略阻塞的通道，如果再搭配上default就一定能保证不会被阻塞了。<br>2.通过定义标签，配合goto或者break能实现在同一个函数内任意跳转，故可以跳出多层嵌套的循环。","like_count":17,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423383,"discussion_content":"你的问题是什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536215996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68705,"user_name":"zhaopan","can_delete":false,"product_type":"c1","uid":1151132,"ip_address":"","ucode":"2AD77203285F6E","user_header":"https://static001.geekbang.org/account/avatar/00/11/90/9c/532446e4.jpg","comment_is_top":false,"comment_ctime":1550580197,"is_pvip":false,"replies":[{"id":"25260","content":"这里只会检查一下接收操作或发送操作是否可以进行（是否不会被阻塞）。有兴趣的话可以看一下 runtime&#47;select.go 中的 selectgo 函数的源码。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1551184025,"ip_address":"","comment_id":68705,"utype":1}],"discussion_count":1,"race_medal":0,"score":"48795220453","product_id":100013101,"comment_content":"老师好:<br>仅当select语句中的所有case表达式都被求值完毕后，它才会开始选择候选分支。<br>当接收通道操作有多个满足条件时, 这里的所有case表达式都被求值完毕, 应该怎么理解? <br>是多个case表达式都能接收到通道的数据么?<br>如果都接收了, 随机选择一个分支去处理接收的通道数据. 那其他满足条件的case分支怎么执行到了?<br>如果是外层加for循环, 重新select语句, 那上一次select的操作其他满足条件未被选择的case还能收到上一次的数据么?<br>这里的原理是什么呢?<br>","like_count":11,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":439807,"discussion_content":"这里只会检查一下接收操作或发送操作是否可以进行（是否不会被阻塞）。有兴趣的话可以看一下 runtime/select.go 中的 selectgo 函数的源码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551184025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":65957,"user_name":"🐻","can_delete":false,"product_type":"c1","uid":1043072,"ip_address":"","ucode":"534EDAD496A0E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/80/8759e4c1.jpg","comment_is_top":false,"comment_ctime":1549798326,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"40204503990","product_id":100013101,"comment_content":"https:&#47;&#47;stackoverflow.com&#47;questions&#47;25469682&#47;break-out-of-select-loop<br><br>for-select break 方法。","like_count":9},{"had_liked":false,"id":57178,"user_name":"阿海","can_delete":false,"product_type":"c1","uid":1281585,"ip_address":"","ucode":"2589431F840C42","user_header":"https://static001.geekbang.org/account/avatar/00/13/8e/31/28972804.jpg","comment_is_top":false,"comment_ctime":1546672933,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"35906411301","product_id":100013101,"comment_content":"运行了demo25.go, 发现结果是No candidate case is selected，原因跟<br>var channels = [3]chan int{<br>\tnil,<br>\tmake(chan int, 1),<br>\tnil,<br>}<br>有关，因为channels[0], channels[2]都是nil，所以select case时阻塞，而channels[1]初始化为无缓存channel，当没有从channels[1]取值时，select case阻塞，所以一轮下来，没有符合的条件case，只能运行case default了。","like_count":8,"discussions":[{"author":{"id":1676966,"avatar":"https://static001.geekbang.org/account/avatar/00/19/96/a6/32a286e0.jpg","nickname":"大雄","note":"","ucode":"5FCFDD3A940801","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62399,"discussion_content":"var channels = [3]chan int{\n\tnil,\n\tmake(chan int),\n\tnil,\n}\n内容不是这个么。 默认为0，是非缓存通道所以堵塞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574840378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23721,"user_name":"啵啵","can_delete":false,"product_type":"c1","uid":1118843,"ip_address":"","ucode":"627A3E72DBFF79","user_header":"https://static001.geekbang.org/account/avatar/00/11/12/7b/5da66a2f.jpg","comment_is_top":false,"comment_ctime":1536625319,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35896363687","product_id":100013101,"comment_content":"第一个问题，如果判断到chan关闭，即取到的第二个值为false。则将该chan赋值为nil。<br>第二个问题，根据情况使用goto或者return。或者加一个是否结束的标识，goto然后用两个break。","like_count":9},{"had_liked":false,"id":36976,"user_name":"heha37","can_delete":false,"product_type":"c1","uid":1008962,"ip_address":"","ucode":"13C180307574A6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/65/42/76eb78bd.jpg","comment_is_top":false,"comment_ctime":1541410466,"is_pvip":true,"replies":[{"id":"13295","content":"是的。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1541480649,"ip_address":"","comment_id":36976,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31606181538","product_id":100013101,"comment_content":"当第二个boolean参数为false的时候，在相应的case中设置chan为nil零值，再次case求值的时候会遭遇阻塞，会屏蔽该case。","like_count":8,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428105,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1541480649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130966,"user_name":"Tron","can_delete":false,"product_type":"c1","uid":1130053,"ip_address":"","ucode":"2C4FC68C80A7DD","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/45/3879f334.jpg","comment_is_top":false,"comment_ctime":1567584790,"is_pvip":false,"replies":[{"id":"49382","content":"首先修正一点，这与进程无关，与 goroutine 有关，而且没有父子关系。<br><br>正题回答：不能。因为程序流程已经走到 downloadBigBigFile() 这里了，不可能在没有循环或跳转的情况下再往回走。<br><br>看起来你应该把 ctx 放入 downloadBigBigFile 函数，然后在这个函数里做判断。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1567653913,"ip_address":"","comment_id":130966,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23042421270","product_id":100013101,"comment_content":"请教老师一个问题, 如果我用context 取消一个正在执行的下载任务，形如：<br>select {<br>    case i := &lt;- jobs:<br>          downloadBigBigFile()<br>    case ctx &lt;-Done<br>          return<br>}<br><br>当 父进程发出cancel 指令后， 能够取消downloadBigBigFile（）里面运行的任务吗？","like_count":6,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466218,"discussion_content":"首先修正一点，这与进程无关，与 goroutine 有关，而且没有父子关系。\n\n正题回答：不能。因为程序流程已经走到 downloadBigBigFile() 这里了，不可能在没有循环或跳转的情况下再往回走。\n\n看起来你应该把 ctx 放入 downloadBigBigFile 函数，然后在这个函数里做判断。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567653913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88740,"user_name":"Flo","can_delete":false,"product_type":"c1","uid":1206979,"ip_address":"","ucode":"B7B721892229B8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoCl6Nxf9oW9mGnZj6iarW2ica5uE7dTQ1BiaSrPu4lVNkn0VIToLOgC0K4eJrEicia1pIh345WRibMtQlw/132","comment_is_top":false,"comment_ctime":1555988795,"is_pvip":false,"replies":[{"id":"31793","content":"不好意思，问问题的人太多了，你问的时候最好带上比较完整的上下文。我下面按我目前对你问题的理解回答你吧。<br><br>select 语句对某个 case 中的通道接收表达式的实际执行需要两个前提条件：<br><br>1. 接收操作不会被阻塞。<br>2. 当前 case 被选中。<br><br>对于 case 中的通道发送表达式来说也是类似。因此，我们完全不用担心那些未被选中的通道操作会突然执行。<br><br><br>","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1555996528,"ip_address":"","comment_id":88740,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23030825275","product_id":100013101,"comment_content":"对zhaopan的问题中老师的回复存在疑惑，老师回复如下：“作者回复: 这里只会检查一下接收操作或发送操作是否可以进行（是否不会被阻塞）。有兴趣的话可以看一下 runtime&#47;select.go 中的 selectgo 函数的源码。”<br>-----这里是不是表示，对于那些符合条件但没有执行到的case，之前判断的时候是不是并没有从chan中取出数据？","like_count":5,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447887,"discussion_content":"不好意思，问问题的人太多了，你问的时候最好带上比较完整的上下文。我下面按我目前对你问题的理解回答你吧。\n\nselect 语句对某个 case 中的通道接收表达式的实际执行需要两个前提条件：\n\n1. 接收操作不会被阻塞。\n2. 当前 case 被选中。\n\n对于 case 中的通道发送表达式来说也是类似。因此，我们完全不用担心那些未被选中的通道操作会突然执行。\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555996528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23044,"user_name":"癫狂的小兵","can_delete":false,"product_type":"c1","uid":1018069,"ip_address":"","ucode":"77AB0E7A21CEF9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/d5/1e8fccab.jpg","comment_is_top":false,"comment_ctime":1536119447,"is_pvip":false,"replies":[{"id":"8400","content":"放在for循环里每次也是随机的，不过可以用for循环，或者再次执行select语句。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1536215934,"ip_address":"","comment_id":23044,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23010955927","product_id":100013101,"comment_content":"请问当select语句发现多个分支满足条件时随机选择一个分支执行 那怎样让其他满足条件的分支执行呢？ for 循环 等待下一次循环时再执行？ ","like_count":5,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423386,"discussion_content":"放在for循环里每次也是随机的，不过可以用for循环，或者再次执行select语句。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536215934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":59308,"user_name":"长杰","can_delete":false,"product_type":"c1","uid":1312212,"ip_address":"","ucode":"DD52C9494005F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/d4/e06bf86d.jpg","comment_is_top":false,"comment_ctime":1547349439,"is_pvip":false,"replies":[{"id":"25235","content":"你可以看看我在前面的（程序实体相关的）文章中讲的。程序实体的名称如果首字母大写那么就说明是其访问权限是公开的，否则就是包级私有的。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1551180389,"ip_address":"","comment_id":59308,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18727218623","product_id":100013101,"comment_content":"函数定义，有的用首字母大写的命名规则，有的用驼峰命名规则，老师能介绍一下go语言编程的规范介绍吗？","like_count":4,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":436322,"discussion_content":"你可以看看我在前面的（程序实体相关的）文章中讲的。程序实体的名称如果首字母大写那么就说明是其访问权限是公开的，否则就是包级私有的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551180389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24233,"user_name":"许森森","can_delete":false,"product_type":"c1","uid":1105360,"ip_address":"","ucode":"7C46D56DD8366B","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/d0/36b6eaf7.jpg","comment_is_top":false,"comment_ctime":1536855909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18716725093","product_id":100013101,"comment_content":"1 发现channel是closed之后，重新make，使得为nil，保证一直 阻塞。<br><br>\t\ti := 0<br>\t\tfor {<br>\t\t\tselect {<br>\t\t\tcase _, ok := &lt;-c:<br>\t\t\t\tif !ok {<br>\t\t\t\t\tc = make(chan bool)<br>\t\t\t\t\tfmt.Println(&quot;!ok&quot;)<br>\t\t\t\t} else {<br>\t\t\t\t\tfmt.Println(&quot;c:&quot;, c)<br>\t\t\t\t}<br>\t\t\tdefault:<br>\t\t\t\ttime.Sleep(1e9) &#47;&#47; 等待1秒钟<br>\t\t\t\tfmt.Println(&quot;default, &quot;, i)<br>\t\t\t\ti = i + 1<br>\t\t\t\tif i &gt; 3 {<br>\t\t\t\t\treturn<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>2 <br>return 直接退出程序<br>break loop &#47;&#47; 结合loop，会退出for循环<br>goto end &#47;&#47;结合end，跳转<br><br>\t&#47;&#47;在select语句与for语句联用时，怎样直接退出外层的for语句?<br>\ttick := time.Tick(100 * time.Millisecond)<br>\tboom := time.After(500 * time.Millisecond)<br>\t&#47;&#47;loop:<br>\tfor {<br>\t\tselect {<br>\t\tcase &lt;-tick:<br>\t\t\tfmt.Println(&quot;tick.&quot;)<br>\t\tcase &lt;-boom:<br>\t\t\tfmt.Println(&quot;BOOM!&quot;)<br>\t\t\t&#47;&#47; return  &#47;&#47;直接退出程序<br>\t\t\t&#47;&#47;break loop &#47;&#47; 结合loop，会退出for循环<br>\t\t\tgoto end &#47;&#47;结合end<br>\t\tdefault:<br>\t\t\tfmt.Println(&quot;    .&quot;)<br>\t\t\ttime.Sleep(50 * time.Millisecond)<br>\t\t}<br>\t}<br><br>end:<br>\tfmt.Println(&quot;END...&quot;)<br>","like_count":4},{"had_liked":false,"id":23590,"user_name":"Kennedy","can_delete":false,"product_type":"c1","uid":1049022,"ip_address":"","ucode":"C50627007E5ED0","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/be/be358cab.jpg","comment_is_top":false,"comment_ctime":1536539129,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18716408313","product_id":100013101,"comment_content":"通道的类型如果是方法，性能会差吗？","like_count":4},{"had_liked":false,"id":163674,"user_name":"水先生","can_delete":false,"product_type":"c1","uid":1249714,"ip_address":"","ucode":"362A71DF511E3E","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/b2/dd0606b2.jpg","comment_is_top":false,"comment_ctime":1576765085,"is_pvip":false,"replies":[{"id":"62323","content":"在这里不会，因为getIntChan函数已经把intChan2关闭了。<br><br>文章里的描述我改进了一下：<br><br>2. 通常，当通道 intChan2 中没有元素值时，这条 for 语句会被阻塞在有 for 关键字的那一行，直到有新的元素值可取。不过，由于这里的 getIntChan 函数会事先将 intChan2 关闭，所以它在取出 intChan2 中的所有元素值之后会直接结束执行。<br><br>后面我会让编辑帮我更新一下。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1576825235,"ip_address":"","comment_id":163674,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14461666973","product_id":100013101,"comment_content":"“二、当intChan2中没有元素值时，它会被阻塞在有for关键字的那一行，直到有新的元素值可取。”<br>老师，我有一个疑问：for...range..会把channel的元素全部取出来的，意思是到最后，就会阻塞么？","like_count":3,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478501,"discussion_content":"在这里不会，因为getIntChan函数已经把intChan2关闭了。\n\n文章里的描述我改进了一下：\n\n2. 通常，当通道 intChan2 中没有元素值时，这条 for 语句会被阻塞在有 for 关键字的那一行，直到有新的元素值可取。不过，由于这里的 getIntChan 函数会事先将 intChan2 关闭，所以它在取出 intChan2 中的所有元素值之后会直接结束执行。\n\n后面我会让编辑帮我更新一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576825235,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69653,"user_name":"一只傻哈皮","can_delete":false,"product_type":"c1","uid":1197402,"ip_address":"","ucode":"D819A20B528E0A","user_header":"https://static001.geekbang.org/account/avatar/00/12/45/5a/97337039.jpg","comment_is_top":false,"comment_ctime":1550803187,"is_pvip":false,"replies":[{"id":"25265","content":"这属于语言特性之一，没有什么特殊原因。你可以理解为避免case书写顺序影响到执行顺序。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1551184530,"ip_address":"","comment_id":69653,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14435705075","product_id":100013101,"comment_content":"请问select伪随机执行的目的是什么呢？没太理解这样做的目的。","like_count":3,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440207,"discussion_content":"这属于语言特性之一，没有什么特殊原因。你可以理解为避免case书写顺序影响到执行顺序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551184530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1557834,"avatar":"https://static001.geekbang.org/account/avatar/00/17/c5/4a/340bda41.jpg","nickname":"水阡墨","note":"","ucode":"87C949F0E295A9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340720,"discussion_content":"这个回复真好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610106708,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24037,"user_name":"Neo","can_delete":false,"product_type":"c1","uid":1070189,"ip_address":"","ucode":"A2B2E2F8780557","user_header":"https://static001.geekbang.org/account/avatar/00/10/54/6d/c947ef55.jpg","comment_is_top":false,"comment_ctime":1536766951,"is_pvip":false,"replies":[{"id":"8932","content":"这种情况下是这样。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1536975659,"ip_address":"","comment_id":24037,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14421668839","product_id":100013101,"comment_content":"请问老师： <br>select 分支选择规则中第5个：&quot;如果select语句发现同时有多个候选分支满足选择条件，那么它就会用一种伪随机算法在这些分支中选择一个执行&quot;   随机选一个执行 那我们是不是就不能确定程序会执行哪一条与语句了？<br><br>","like_count":3,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423815,"discussion_content":"这种情况下是这样。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536975659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23683,"user_name":"Forever","can_delete":false,"product_type":"c1","uid":1200760,"ip_address":"","ucode":"76BE8C9BFD41B2","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/78/4365471c.jpg","comment_is_top":false,"comment_ctime":1536587240,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14421489128","product_id":100013101,"comment_content":"老师请问如果我是100个管道并行读入1亿的数字 然后100个管道分别去调用判断数字是否是质数的函数 然后本来运行着好好的cpu占用率到了99  后来突然不再运算了 cpu也直接占用率骤降到5% 但是程序没有报错而是暂停不动 请问老师是什么原因","like_count":2,"discussions":[{"author":{"id":1197376,"avatar":"https://static001.geekbang.org/account/avatar/00/12/45/40/ba205571.jpg","nickname":"King","note":"","ucode":"2C1806226C69B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":146076,"discussion_content":"OOM了吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579596266,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23190,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1536196605,"is_pvip":false,"replies":[{"id":"8397","content":"设计API的时候很有用。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1536215643,"ip_address":"","comment_id":23190,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14421098493","product_id":100013101,"comment_content":"我感觉那个只发不收和只收不发的通道，还是没啥用啊","like_count":3,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423458,"discussion_content":"设计API的时候很有用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536215643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163707,"user_name":"水先生","can_delete":false,"product_type":"c1","uid":1249714,"ip_address":"","ucode":"362A71DF511E3E","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/b2/dd0606b2.jpg","comment_is_top":false,"comment_ctime":1576770775,"is_pvip":false,"replies":[{"id":"62326","content":"你是改成这样了么？<br><br>var channels = [3]chan int{<br>\tnil,<br>\tmake(chan int, 1),<br>\tnil,<br>}<br><br>如果是这样，那么你就把第二个通道由非缓冲通道改成了缓冲通道。如此一来，通道中就有了一个空位，可以容纳一个元素了，所以第二个case就能执行了。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1576825657,"ip_address":"","comment_id":163707,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10166705367","product_id":100013101,"comment_content":"老师，我在demo25中，尝试将channels的容量是何止为1，跑的时候发现，所有的case都有传递参数，getChan和getNumber都有打印成功，但是最终是case打印了second，这是什么原因，没想明白。（基础不扎实）","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478510,"discussion_content":"你是改成这样了么？\n\nvar channels = [3]chan int{\n\tnil,\n\tmake(chan int, 1),\n\tnil,\n}\n\n如果是这样，那么你就把第二个通道由非缓冲通道改成了缓冲通道。如此一来，通道中就有了一个空位，可以容纳一个元素了，所以第二个case就能执行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576825657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":73593,"user_name":"Cxb","can_delete":false,"product_type":"c1","uid":1228479,"ip_address":"","ucode":"4B275B3F3079D3","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/bf/36077300.jpg","comment_is_top":false,"comment_ctime":1551934113,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10141868705","product_id":100013101,"comment_content":"@王小勃<br>demo25 不输出second candidate 原因应该是channels[1]是非缓冲通道，select语句检测到阻塞状态，所以case语句不成立。把channels[1]设置为缓冲通道，或者写个协程接受channels[1]就可以输出second candidate<br>func main() {<br>\t&#47;&#47;go func() {<br>\t&#47;&#47;\tfmt.Println(&lt;-channels[1])<br>\t&#47;&#47;}()<br>\tselect {<br>\tcase getChan(0) &lt;- getNumber(0):<br>\t\tfmt.Println(&quot;The first candidate case is selected.&quot;)<br>\tcase getChan(1) &lt;- getNumber(1):<br>\t\tfmt.Println(&quot;The second candidate case is selected.&quot;)<br>\tcase getChan(2) &lt;- getNumber(2):<br>\t\tfmt.Println(&quot;The third candidate case is selected&quot;)<br>\tdefault:<br>\t\tfmt.Println(&quot;No candidate case is selected!&quot;)<br>\t}<br>}","like_count":2},{"had_liked":false,"id":24360,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1536925528,"is_pvip":true,"replies":[{"id":"8925","content":"只能向它发送数据的我简称为发送通道。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1536974826,"ip_address":"","comment_id":24360,"utype":1}],"discussion_count":1,"race_medal":1,"score":"10126860120","product_id":100013101,"comment_content":"老师你上面的发送通道&lt;-是代表，可以向通道中发送数据呢？那对于通道而言是不是就是，通道接收数据，叫做接收通道?","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423952,"discussion_content":"只能向它发送数据的我简称为发送通道。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536974826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":23500,"user_name":"michael","can_delete":false,"product_type":"c1","uid":1086975,"ip_address":"","ucode":"EBCFCB4196FC8C","user_header":"https://static001.geekbang.org/account/avatar/00/10/95/ff/033caa38.jpg","comment_is_top":false,"comment_ctime":1536425952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10126360544","product_id":100013101,"comment_content":"第二个问题，可以将for select写到一个函数里面，用return的方式来跳出for循环","like_count":2},{"had_liked":false,"id":23417,"user_name":"王腾飞","can_delete":false,"product_type":"c1","uid":1035111,"ip_address":"","ucode":"6D4F81620470E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/67/5a3f9ae8.jpg","comment_is_top":false,"comment_ctime":1536363334,"is_pvip":false,"replies":[{"id":"8485","content":"切片不是并发安全的，在这种场景下最好不要用。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1536385750,"ip_address":"","comment_id":23417,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10126297926","product_id":100013101,"comment_content":"如何动态的调整select的channel，比如我能否select一个channel切片，然后根据需要调整切片的内容？","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423557,"discussion_content":"切片不是并发安全的，在这种场景下最好不要用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536385750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299647,"user_name":"zach_turing","can_delete":false,"product_type":"c1","uid":2231266,"ip_address":"","ucode":"7DFC2068B50B1E","user_header":"","comment_is_top":false,"comment_ctime":1624780398,"is_pvip":false,"replies":[{"id":"108720","content":"对，这是一个语言规范级别的规则。单独使用与配合使用的行为是不同的，这也凸显了select语句的重要作用，类似的还有for语句与通道的联用。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1624860839,"ip_address":"","comment_id":299647,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5919747694","product_id":100013101,"comment_content":"前面讲到，如果对nil通道写操作会发生panic。但是对于demo25.go中的case ，对于第一个是个nil通道，向里写只是会阻塞，而不会panic，这是为什么呢？  当做select的一种特殊情况来理解吗","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522496,"discussion_content":"对，这是一个语言规范级别的规则。单独使用与配合使用的行为是不同的，这也凸显了select语句的重要作用，类似的还有for语句与通道的联用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624860839,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293057,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1621176684,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"5916143980","product_id":100013101,"comment_content":"单向通道这个设计，似乎在别的语言中是没有的，有点类似于文件的只读或者只写属性（用于约束 IO 操作），单向通道用于约束其他代码的行为。<br><br>单向通道可以用于接口类型申明中的方法定义（参数列表），也可以用在函数声明的结果列表中<br><br>而 Go 语言在实现过程中，自动的将双向通道转换为单向通道也减轻了实现时候的负担。<br><br>demo24 示例 1 的代码有一点奇怪，我执行的时候通常随机数会生成为 2，不知道什么原因，当然，这个不重要。<br><br>看到留言里面 @任性 同学的提示，增加 <br><br>```<br>rand.Seed(time.Now().Unix())<br>```<br><br>就可以解决随机数的问题。<br><br>从 demo25 中的示例可以看到，Go 语言 select 语句（与通道连用）和其他语言的 switch 是完全不一样的，我之前对这个部分有一些混淆。<br><br>对于思考题：<br><br>1. 如果在 select 语句中发现某个通道已关闭，使用类似 demo24 示例二中的方法，可以判断通道是否已关闭，如果关闭，就是用 break 来结束当前 select。不知道这个是不是屏蔽的意思<br><br>2. 如果 select 语句和 for 语句连用，一方面使用 break 结束当前的 select，另外就是可以设置一个标记为，结束整个 for 循环。<br><br>看了一下留言和标准答案，两道思考题似乎都没有做对。<br><br>第一个思考题当发现通道关闭的时候，将 chan 赋值为 nil，就可以实现屏蔽。<br><br>第二个题目推荐留言中提到了 stackoverflow 的链接，https:&#47;&#47;stackoverflow.com&#47;questions&#47;25469682&#47;break-out-of-select-loopfor-select break <br><br>给出了两种方法，一种是用 return 替换 break，另一种是使用类似于 goto 语句的标签，进行 break<br><br>```<br>L:<br>\tfor {<br>\t\tselect {<br>\t\tcase &lt;-done:<br>\t\t\t&#47;&#47; break<br>\t\t\t&#47;&#47; return<br>\t\t\tbreak L<br>\t\tcase num := &lt;- numbers:<br>\t\t\tfmt.Println(num)<br>\t\t}<br>\t}<br>```<br><br>比较佩服那些不看留言，也不看看课后答案，直接提问的同学。","like_count":2},{"had_liked":false,"id":222414,"user_name":"海盗船长","can_delete":false,"product_type":"c1","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1590799668,"is_pvip":false,"replies":[{"id":"82202","content":"只会执行一个啊，在任何情况下都只会有一个分支被执行。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1590981986,"ip_address":"","comment_id":222414,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5885766964","product_id":100013101,"comment_content":"“如果select语句发现同时有多个候选分支满足选择条件，那么它就会用一种伪随机的算法在这些分支中选择一个并执行。注意，即使select语句是在被唤醒时发现的这种情况，也会这样做。” 老师 请问下 根据这条规则，是不是所有满足选择条件的分支最终都会被执行？","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496786,"discussion_content":"只会执行一个啊，在任何情况下都只会有一个分支被执行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590981986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170645,"user_name":"喵了个咪的汪","can_delete":false,"product_type":"c1","uid":1338163,"ip_address":"","ucode":"8D6BDF3B681147","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKTDI00ykOfZ1UFxHGZ1Yhknb2BIqrwZgjFD6ykDlN3KUEMN4YgKa8N9TVib8vrtQ2Uk0tFCGAwNsw/132","comment_is_top":false,"comment_ctime":1578650255,"is_pvip":false,"replies":[{"id":"66119","content":"不太对，再想想？：）","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1578656686,"ip_address":"","comment_id":170645,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5873617551","product_id":100013101,"comment_content":"感觉两个思考题都可以用添加哨兵来解决，不知道对不对？","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481053,"discussion_content":"不太对，再想想？：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578656686,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":156234,"user_name":"大雄","can_delete":false,"product_type":"c1","uid":1676966,"ip_address":"","ucode":"5FCFDD3A940801","user_header":"https://static001.geekbang.org/account/avatar/00/19/96/a6/32a286e0.jpg","comment_is_top":false,"comment_ctime":1574840594,"is_pvip":false,"replies":[{"id":"60038","content":"有一方正在收，还有另一方正在发。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1574856141,"ip_address":"","comment_id":156234,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5869807890","product_id":100013101,"comment_content":"看到评论：<br>非缓冲通道只有在收发双方都就绪的情况下才能传递元素值<br>怎么理解收发双方都就绪的情况下。能举个例子吗？<br>","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476043,"discussion_content":"有一方正在收，还有另一方正在发。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574856141,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71115,"user_name":"dean不闷","can_delete":false,"product_type":"c1","uid":1120512,"ip_address":"","ucode":"6440E0250AD0D8","user_header":"https://static001.geekbang.org/account/avatar/00/11/19/00/a7f4cde8.jpg","comment_is_top":false,"comment_ctime":1551268022,"is_pvip":false,"replies":[{"id":"25758","content":"当然。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1551415472,"ip_address":"","comment_id":71115,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5846235318","product_id":100013101,"comment_content":"老师，假如一个通道中存着1，2，3，4，5五个值，第一个case从通道读走了1，那么后续的case就读不到1了吧？","like_count":1,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440998,"discussion_content":"当然。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551415472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52266,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1545356106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840323402","product_id":100013101,"comment_content":"有个问题不明：demo25中 select为什么选择的不是第二个case输出？<br>第二个case实际上在往channels[1] &lt;- 2 ,那为什么不输出：The second candidate case is selected.<br>package main<br><br>import &quot;fmt&quot;<br><br>var channels = [3]chan int{<br>\tnil,<br>\tmake(chan int),<br>\tnil,<br>}<br><br>var numbers = []int{1, 2, 3}<br><br>func main() {<br>\tselect {<br>\tcase getChan(0) &lt;- getNumber(0):<br>\t\tfmt.Println(&quot;The first candidate case is selected.&quot;)<br>\tcase getChan(1) &lt;- getNumber(1):<br>\t\tfmt.Println(&quot;The second candidate case is selected.&quot;)<br>\tcase getChan(2) &lt;- getNumber(2):<br>\t\tfmt.Println(&quot;The third candidate case is selected&quot;)<br>\tdefault:<br>\t\tfmt.Println(&quot;No candidate case is selected!&quot;)<br>\t}<br>}<br><br>func getNumber(i int) int {<br>\tfmt.Printf(&quot;numbers[%d]\\n&quot;, i)<br>\treturn numbers[i]<br>}<br><br>func getChan(i int) chan int {<br>\tfmt.Printf(&quot;channels[%d]\\n&quot;, i)<br>\treturn channels[i]<br>}","like_count":1},{"had_liked":false,"id":34720,"user_name":"憎爱不关心","can_delete":false,"product_type":"c1","uid":1133580,"ip_address":"","ucode":"A868ACB200C798","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/0c/ada45f25.jpg","comment_is_top":false,"comment_ctime":1540269326,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5835236622","product_id":100013101,"comment_content":"老师你好，这节课，还没看但是买了你的GO并发编程，借宝地问老师一个问题，第四章的loadgen代码里，有一个函数如下：<br>&#47;&#47; genLoad 会发生载荷并向承受方发送。<br>func (gen *myGenerator) genLoad(throttle &lt;-chan time.Time) {<br>\tfor {<br>\t\tselect {<br>\t\tcase &lt;- gen.ctx.Done():<br>\t\t\tgen.prepareToStop(gen.ctx.Err())<br>\t\t\treturn<br>\t\tdefault:<br>\t\t}<br><br>\t\tgen.asyncCall()<br><br>\t\tif gen.lps &gt; 0 {<br>\t\t\tselect {<br>\t\t\t\tcase&lt;-throttle:<br>\t\t\t\tcase&lt;-gen.ctx.Done():<br>\t\t\t\t\tgen.prepareToStop(gen.ctx.Err())<br>\t\t\t\t\treturn<br>\t\t\t\tdefault:<br>\t\t\t\t\t&#47;&#47;fmt.Println(&quot;DD&quot;)<br>\t\t\t}<br>\t\t}<br>\t}<br>}<br><br>最后这个default：<br>本来在老师的代码里没有，我无意中加上了。<br>结果加不加这个default：执行的结果完全是两个，天差地别，老师如果有时间，请在这里加上这一行代码default: test一下，本来是success 5000多个，结果加上之后，call error 1000，succuess 40000多，timeout2000多，实在不明白为何会这样，谢谢老师。","like_count":1},{"had_liked":false,"id":23307,"user_name":"冰激凌的眼泪","can_delete":false,"product_type":"c1","uid":1087945,"ip_address":"","ucode":"5DCB974667E93A","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/c9/a7c77746.jpg","comment_is_top":false,"comment_ctime":1536282591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5831249887","product_id":100013101,"comment_content":"单向通道乍看没什么作用，但是看了后面文章，看到在函数传参、返回时可以通过双向通道的退化形成单向通道，就明白作者说的约束行为的意义了。","like_count":1},{"had_liked":false,"id":340419,"user_name":"青山","can_delete":false,"product_type":"c1","uid":1131070,"ip_address":"","ucode":"749BAD1834AC0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/3e/c1f76202.jpg","comment_is_top":false,"comment_ctime":1648806650,"is_pvip":false,"replies":[{"id":"124528","content":"文字描述没有写出代码清晰，但是就我看，这样做在设计层面看是有问题的。这种循环阻塞最容易出问题。<br><br>从代码层面看也有问题，你怎么判断b的chan已经阻塞了？依靠超时来判断嘛？没法精确判断。另外，让a的chan也阻塞，这种同步方式很蹩脚。<br><br>你可以考虑用一些同步工具来做，比如 WaitGroup 或者 Context 。Channel 主要用于传递信息，而不是同步。你要是真想把它当信号传递管道来用，那就用非缓冲通道 make(chan struct{}, 0)  。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1648881022,"ip_address":"","comment_id":340419,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1648806650","product_id":100013101,"comment_content":"老师你好，我有一个问题，如果我们使用chan来控制流程，a函数有个一个容量为5的chan，b函数有一个为1的容量chan，b函数获取a的队列，当b函数的的队列阻塞掉了就会让a函数的队列到5之后阻塞，达到b函数控制a函数流程，这样设计合理吗？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559685,"discussion_content":"文字描述没有写出代码清晰，但是就我看，这样做在设计层面看是有问题的。这种循环阻塞最容易出问题。\n\n从代码层面看也有问题，你怎么判断b的chan已经阻塞了？依靠超时来判断嘛？没法精确判断。另外，让a的chan也阻塞，这种同步方式很蹩脚。\n\n你可以考虑用一些同步工具来做，比如 WaitGroup 或者 Context 。Channel 主要用于传递信息，而不是同步。你要是真想把它当信号传递管道来用，那就用非缓冲通道 make(chan struct{}, 0)  。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648881022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323058,"user_name":"jxs1211","can_delete":false,"product_type":"c1","uid":1101006,"ip_address":"","ucode":"B7F1F2D84389E7","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKELX1Rd1vmLRWibHib8P95NA87F4zcj8GrHKYQL2RcLDVnxNy1ia2geTWgW6L2pWn2kazrPNZMRVrIg/132","comment_is_top":false,"comment_ctime":1637717471,"is_pvip":false,"replies":[{"id":"117299","content":"你好好看看那个例子的上下文，前面的代码：<br><br>&amp;#47;&amp;#47; 随机选择一个通道，并向它发送元素值。<br>index := rand.Intn(3)<br>fmt.Printf(&amp;quot;The index: %d\\n&amp;quot;, index)<br>intChannels[index] &amp;lt;- index<br><br>这里明确表示：只随机选取一个通道然后向它发送值。<br><br>另外，在你的表述中也存在一个问题：并不是“求值成功的case放到候选”，而是“一旦发现某个通道中有元素值可取就作为候选”。如果对所有的case表达式都做真的求值，那么就等于把所有通道中的可取元素值全取出来了。这样的话，就相当于select语句私自转移了用户（开发者）使用的数据，肯定会出大问题的。尤其是在并发操作通道的情况下。","user_name":"作者回复","user_name_real":"编辑","uid":"1026643","ctime":1637822714,"ip_address":"","comment_id":323058,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637717471","product_id":100013101,"comment_content":"&#47;&#47; 哪一个通道中有可取的元素值，哪个对应的分支就会被执行。<br>难道不应该是求值成功的case放到候选，在进行伪随机算法现在执行一个case子句吗","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533240,"discussion_content":"你好好看看那个例子的上下文，前面的代码：\n\n&amp;#47;&amp;#47; 随机选择一个通道，并向它发送元素值。\nindex := rand.Intn(3)\nfmt.Printf(&amp;quot;The index: %d\\n&amp;quot;, index)\nintChannels[index] &amp;lt;- index\n\n这里明确表示：只随机选取一个通道然后向它发送值。\n\n另外，在你的表述中也存在一个问题：并不是“求值成功的case放到候选”，而是“一旦发现某个通道中有元素值可取就作为候选”。如果对所有的case表达式都做真的求值，那么就等于把所有通道中的可取元素值全取出来了。这样的话，就相当于select语句私自转移了用户（开发者）使用的数据，肯定会出大问题的。尤其是在并发操作通道的情况下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637822714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308832,"user_name":"0770","can_delete":false,"product_type":"c1","uid":1961314,"ip_address":"","ucode":"CC55AB48F23C3E","user_header":"","comment_is_top":false,"comment_ctime":1629815528,"is_pvip":false,"replies":[{"id":"111911","content":"只是评估是否可操作，并不会真正进行操作。另外，每次 select 都是独立求值的。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1629974435,"ip_address":"","comment_id":308832,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629815528","product_id":100013101,"comment_content":"仅当select语句中的所有case表达式都被求值完毕后，它才会开始选择候选分支。 我的疑问是，n个case中求值，已经从chan取出数据，如果择其一个case执行，其他已经取值的case的chan，不就丢失数据吗？还是说1.会放回去chan，还是等下次select，再匹配case的时候，不需要再求值了。","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525638,"discussion_content":"只是评估是否可操作，并不会真正进行操作。另外，每次 select 都是独立求值的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629974435,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308219,"user_name":"盘胧","can_delete":false,"product_type":"c1","uid":1650748,"ip_address":"","ucode":"5386CC4C92ECC2","user_header":"https://static001.geekbang.org/account/avatar/00/19/30/3c/0668d6ae.jpg","comment_is_top":false,"comment_ctime":1629454798,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629454798","product_id":100013101,"comment_content":"break 改成 return就好了","like_count":0},{"had_liked":false,"id":296239,"user_name":"罗峰","can_delete":false,"product_type":"c1","uid":1218501,"ip_address":"","ucode":"5F3D6AF8F28322","user_header":"https://static001.geekbang.org/account/avatar/00/12/97/c5/84491beb.jpg","comment_is_top":false,"comment_ctime":1622853746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622853746","product_id":100013101,"comment_content":"Select求值应该仅判断是否阻塞","like_count":0},{"had_liked":false,"id":296238,"user_name":"罗峰","can_delete":false,"product_type":"c1","uid":1218501,"ip_address":"","ucode":"5F3D6AF8F28322","user_header":"https://static001.geekbang.org/account/avatar/00/12/97/c5/84491beb.jpg","comment_is_top":false,"comment_ctime":1622853568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622853568","product_id":100013101,"comment_content":"Select语句包括分支求值，分支选择。前者从上到下，后者随机。","like_count":0},{"had_liked":false,"id":261171,"user_name":"我的腿腿","can_delete":false,"product_type":"c1","uid":1239277,"ip_address":"","ucode":"2AAA36A7C3AD75","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/ed/f9347e5e.jpg","comment_is_top":false,"comment_ctime":1605233586,"is_pvip":false,"replies":[{"id":"94841","content":"目前还无法直接设定 goroutine的名称。不过你可以利用参数值把所谓的名称传入到go函数当中。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1605279402,"ip_address":"","comment_id":261171,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605233586","product_id":100013101,"comment_content":"go 子协程在启动的时候怎么自定义名称，我本地运行名字都叫runtime.gopark,不好排查问题","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509403,"discussion_content":"目前还无法直接设定 goroutine的名称。不过你可以利用参数值把所谓的名称传入到go函数当中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605279402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260588,"user_name":"我的腿腿","can_delete":false,"product_type":"c1","uid":1239277,"ip_address":"","ucode":"2AAA36A7C3AD75","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/ed/f9347e5e.jpg","comment_is_top":false,"comment_ctime":1605066137,"is_pvip":false,"replies":[{"id":"94734","content":"很遗憾，两个都不对。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1605149057,"ip_address":"","comment_id":260588,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1605066137","product_id":100013101,"comment_content":"第一个问题：<br>ch1 = make(chan struct{})<br>第二个问题：<br>done := make(chan struct{})<br>close(done)<br>for {<br>\t\tselect {<br>\t\tcase &lt;-done:<br>\t\t\treturn<br>\t\tcase ...<br>\t\tcase ...<br>\t}","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509239,"discussion_content":"很遗憾，两个都不对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605149057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239277,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e8/ed/f9347e5e.jpg","nickname":"我的腿腿","note":"","ucode":"2AAA36A7C3AD75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325027,"discussion_content":"尴尬死了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605224456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":207666,"user_name":"LbbNiu","can_delete":false,"product_type":"c1","uid":1142526,"ip_address":"","ucode":"AD0D05864C6913","user_header":"https://static001.geekbang.org/account/avatar/00/11/6e/fe/79955244.jpg","comment_is_top":false,"comment_ctime":1587133372,"is_pvip":true,"replies":[{"id":"77687","content":"我上下文都不清楚，没法回答你。你需要现有猜测，然后验证猜测，逐一排查。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1587286810,"ip_address":"","comment_id":207666,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587133372","product_id":100013101,"comment_content":"client := &amp;http.Client{}<br>\tclient.Transport = &amp;http.Transport{<br>\t\t&#47;&#47;DisableKeepAlives:true,<br>\t\tTLSClientConfig: &amp;tls.Config{<br>\t\t\tInsecureSkipVerify: true,<br>\t\t},<br>\t\tProxy: func(request *http.Request) (u *url.URL, err error) {<br>\t\t\t&#47;&#47;return url.Parse(&quot;http:&#47;&#47;10.19.0.85:8888&quot;)<br>\t\t\t&#47;&#47;return url.Parse(&quot;http:&#47;&#47;192.168.11.123:8888&quot;)<br>\t\t\treturn rp(request) &#47;&#47;返回 squid的代理地址URL 例如 http:&#47;&#47;账号:密码@ip地址:8999<br>\t\t},<br>\t}<br>\tmethod := &quot;GET&quot;<br>\tu = &quot;https:&#47;&#47;220.181.38.150&quot;<br>\treq, err := http.NewRequest(method, u, nil)<br>\tif err != nil {<br>\t\tfmt.Println(err)<br>\t}<br>\treq.Host = &quot;www.baidu.com&quot;<br>\tres, err := client.Do(req)<br>请求老师，这么写为什么请求会报错呢，squid日志直接500","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492200,"discussion_content":"我上下文都不清楚，没法回答你。你需要现有猜测，然后验证猜测，逐一排查。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587286810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201149,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1217554,"ip_address":"","ucode":"C5A540BC5A60B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/12/15558f28.jpg","comment_is_top":false,"comment_ctime":1585723689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585723689","product_id":100013101,"comment_content":"思考题<br>1、在case中通过第二个参数判断chan是否关闭，如果关闭则通过make(chan type)来对关闭的chan置nil，当再次执行到select时，因为chan时nil会进入阻塞从而不会被选为候选分支。<br>2、方法一可以使用lable加goto跳转到for外面；方法二：可以设置一个额外的标记位，当chan关闭时，设置flag=true，在for的最后判断flag决定是否break","like_count":0},{"had_liked":false,"id":186020,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1583743229,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583743229","product_id":100013101,"comment_content":"总结 单向通道和select<br>1. 单向通道 <br>   只能接收或者发送的通道,主要是用来对代码进行约束<br>   注意事项:<br>      如果以一个单向通道作为参数时 它可以接收一个双向通道并且把他转变成单向通道<br>2. select 主要就是为了操作而设计的<br>   1 先对所有的case语句进行求值<br>   2 再从候选分支选择一个满足条件的<br>   3 如果同时有多条分支 那么就会采用一个伪随机算法 选取一个分支<br>   4 如果没有分支 则走向default子句<br>   必须要提供一个default子语句 如果没提供的话没有满足分支条件的情况下会一直阻塞着 <br>   select只会执行一次 所以一般也会搭配for使用<br>关于思考题 <br>第一问 因为通道接收返回两个值 第二个值可以表示其是否已经关闭了 如果已经关闭了则可以采用break来屏蔽该它的分支<br>第二问<br>1. 如果是函数 直接return<br>2. 加标签","like_count":0},{"had_liked":false,"id":163672,"user_name":"水先生","can_delete":false,"product_type":"c1","uid":1249714,"ip_address":"","ucode":"362A71DF511E3E","user_header":"https://static001.geekbang.org/account/avatar/00/13/11/b2/dd0606b2.jpg","comment_is_top":false,"comment_ctime":1576764978,"is_pvip":false,"replies":[{"id":"62324","content":"你的两个问题重复了，我再另一个那里回答你了。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1576825260,"ip_address":"","comment_id":163672,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576764978","product_id":100013101,"comment_content":"&quot;二、当intChan2中没有元素值时，它会被阻塞在有for关键字的那一行，直到有新的元素值可取。&quot;<br><br>老师，请问for...range...会把channel的元素取出来么？","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478499,"discussion_content":"你的两个问题重复了，我再另一个那里回答你了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576825260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":144347,"user_name":"Geek_f8dc6b","can_delete":false,"product_type":"c1","uid":1448402,"ip_address":"","ucode":"D60EB10F9F5932","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJBiaPEt5QP5QtiaYthFoLwLGc9oicd1OOMRXZGzRPECuSq0tPrp7BLhqoJDiarfYFT6GnrTicoQVoZk0w/132","comment_is_top":false,"comment_ctime":1571900641,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571900641","product_id":100013101,"comment_content":"希望讲深一点","like_count":0},{"had_liked":false,"id":130957,"user_name":"Tron","can_delete":false,"product_type":"c1","uid":1130053,"ip_address":"","ucode":"2C4FC68C80A7DD","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/45/3879f334.jpg","comment_is_top":false,"comment_ctime":1567583870,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567583870","product_id":100013101,"comment_content":"GOTO语句","like_count":0},{"had_liked":false,"id":95148,"user_name":"窝窝头","can_delete":false,"product_type":"c1","uid":1063866,"ip_address":"","ucode":"5C2635ED6484F8","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/ba/3b30dcde.jpg","comment_is_top":false,"comment_ctime":1557974611,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1557974611","product_id":100013101,"comment_content":"第一个问题直接在case里面对通道赋空值或者替换通道变量<br>第二个问题可以直接用break+标签跳出指定tag的for循环","like_count":0},{"had_liked":false,"id":78422,"user_name":"蛋蛋的蛋蛋","can_delete":false,"product_type":"c1","uid":1332201,"ip_address":"","ucode":"FDB92E5ECDF538","user_header":"https://static001.geekbang.org/account/avatar/00/14/53/e9/83413f80.jpg","comment_is_top":false,"comment_ctime":1553144233,"is_pvip":false,"replies":[{"id":"28872","content":"简单来说，可以用goto语句配合着来写。当然了，你自己设置个代表状态的变量也是可以的。","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1553397902,"ip_address":"","comment_id":78422,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553144233","product_id":100013101,"comment_content":"请问第二题是不是可以在 for 外用个 flag 记录 select break 情况，如果 select break，flag 状态切换，select 一次结束后判断 flag 状态去 break for 循环","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444089,"discussion_content":"简单来说，可以用goto语句配合着来写。当然了，你自己设置个代表状态的变量也是可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553397902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":68706,"user_name":"zhaopan","can_delete":false,"product_type":"c1","uid":1151132,"ip_address":"","ucode":"2AD77203285F6E","user_header":"https://static001.geekbang.org/account/avatar/00/11/90/9c/532446e4.jpg","comment_is_top":false,"comment_ctime":1550580920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550580920","product_id":100013101,"comment_content":"问题1:<br>当第二个boolean参数为false的时候，在相应的case中*设置chan为nil零值*，再次case求值的时候会遭遇阻塞，会屏蔽该case。<br>问题2:<br>&#47;&#47; 示例1。<br>func example1() {<br>\t&#47;&#47; 准备好几个通道。<br>\tintChannels := [3]chan int{<br>\t\tmake(chan int, 1),<br>\t\tmake(chan int, 1),<br>\t\tmake(chan int, 1),<br>\t}<br>\tintChannels[0] &lt;- 01<br>\tintChannels[1] &lt;- 11<br>\tintChannels[2] &lt;- 22<br>\t&#47;&#47; 哪一个通道中有可取的元素值，哪个对应的分支就会被执行。<br>\tfor {<br>\t\tselect {<br>\t\tcase elem0 := &lt;-intChannels[0]:<br>\t\t\tfmt.Printf(&quot;elem0 the element is %d.\\n&quot;, elem0)<br>\t\tcase elem1 := &lt;-intChannels[1]:<br>\t\t\tfmt.Printf(&quot;elem1 the element is %d.\\n&quot;, elem1)<br>\t\tcase elem2 := &lt;-intChannels[2]:<br>\t\t\tfmt.Printf(&quot;elem2 the element is %d.\\n&quot;, elem2)<br>\t\tdefault:<br>\t\t\tfmt.Println(&quot;No candidate case is selected!&quot;)<br>\t\t\tgoto end  &#47;&#47;或者直接return<br>\t\t}<br>\t}<br>\tend:<br>}<br>运行结果(分支执行的顺序是随机的):<br>elem1 the element is 11.<br>elem2 the element is 22.<br>elem0 the element is 1.<br>No candidate case is selected!<br><br>仅当select语句中的所有case表达式都被求值完毕后，它才会开始选择候选分支。<br>求值操作应该怎么理解???","like_count":0},{"had_liked":false,"id":52181,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1545329248,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545329248","product_id":100013101,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":34865,"user_name":"到不了的塔","can_delete":false,"product_type":"c1","uid":1258362,"ip_address":"","ucode":"0F5BE3CB58DE31","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/7a/ac307bfc.jpg","comment_is_top":false,"comment_ctime":1540342945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1540342945","product_id":100013101,"comment_content":"select有一个分支被唤醒后，会有多长的时间继续监听其他分支的唤醒，然后在执行case分支。<br>intChannels := [3]chan int{<br>\t\tmake(chan int, 1),<br>\t\tmake(chan int, 1),<br>\t\tmake(chan int, 1),<br>\t}<br><br>\ttime.AfterFunc(5, func() {<br>\t\tintChannels[1] &lt;- 1<br>\t})<br>\ttime.AfterFunc(5000, func() {   &#47;&#47;时间为500时，就变为了intChannels[2]被唤醒了<br>\t\tintChannels[2] &lt;- 2<br>\t})<br>\tselect {<br>\tcase &lt;-intChannels[0]:<br>\t\tfmt.Println(&quot;The first channel is ready&quot;)<br>\tcase &lt;-intChannels[1]:<br>\t\tfmt.Println(&quot;The second channel is ready &quot;)<br>\tcase &lt;-intChannels[2]:<br>\t\tfmt.Println(&quot;The third channel is ready&quot;)<br>\t}","like_count":0},{"had_liked":false,"id":24424,"user_name":"Pixar","can_delete":false,"product_type":"c1","uid":1197659,"ip_address":"","ucode":"E653387BA8EA16","user_header":"https://static001.geekbang.org/account/avatar/00/12/46/5b/07858c33.jpg","comment_is_top":false,"comment_ctime":1536996674,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536996674","product_id":100013101,"comment_content":"func main() {<br>\tch1 := make(chan int64, 3)<br>\tch1 &lt;- 100<br><br>\tch2 := make(chan int64, 3)<br>\tclose(ch2)<br><br>\tfor {<br>\t\tselect {<br>\t\tcase v1 := &lt;-ch1:<br>\t\t\tfmt.Println(v1)<br>\t\tcase _, isOpen := &lt;-ch2:<br>\t\t\tif !isOpen {<br>\t\t\t\tch2 = nil<br>\t\t\t}<br>\t\tdefault:<br>\t\t\tgoto next<br>\t\t}<br>\t}<br><br>next:<br>\tfmt.Println(&quot;The Programe is over&quot;)<br>}","like_count":0},{"had_liked":false,"id":23906,"user_name":"Gavin","can_delete":false,"product_type":"c1","uid":1197118,"ip_address":"","ucode":"A9674DFC26FBBF","user_header":"https://static001.geekbang.org/account/avatar/00/12/44/3e/8f13b074.jpg","comment_is_top":false,"comment_ctime":1536716208,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536716208","product_id":100013101,"comment_content":"单向通道可以实现事件监听","like_count":0},{"had_liked":false,"id":23034,"user_name":"asdf100","can_delete":false,"product_type":"c1","uid":1043738,"ip_address":"","ucode":"39D8D71453E575","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/1a/ce7f7d54.jpg","comment_is_top":false,"comment_ctime":1536115427,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536115427","product_id":100013101,"comment_content":"如果select语句发现同时有多个候选分支满足选择条件,那么它就会用一种伪随机的算法在这些分支中选择一个并执行。","like_count":0},{"had_liked":false,"id":23022,"user_name":"Yayu","can_delete":false,"product_type":"c1","uid":1058015,"ip_address":"","ucode":"5E7842458D8229","user_header":"https://static001.geekbang.org/account/avatar/00/10/24/df/645f8087.jpg","comment_is_top":false,"comment_ctime":1536111785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536111785","product_id":100013101,"comment_content":"1.在候选分支中将接收表达式赋值给两个变量，使用第二个变量来判断 channel 是否关闭，如果关闭，可以使用 break 来屏蔽这条候选分支的逻辑代码。<br>2.显然使用 break 语句只能推出 select 分支语句，无法退出外层 for 循环，要想在 select 分支语句中直接跳出外层循环，需要借助 标签来完成，在外层 for 循环语句前 定义标签 Loop:（当然也可以起个其他名字）在 select 的 case 语句中使用 goto Loop 或者 break Loop 来直接跳出外层 for 循环。<br>当然，这两者是有区别的。区别在于「break 标签 」只能用于 for 循环，且标签在 for 循环前面。而「goto 标签」是一个通用的跳转语句。","like_count":0}]}