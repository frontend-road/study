{"id":619907,"title":"71｜再回首：“模块与标准库”单元小结","content":"<p>你好，我是尹会生。</p><p>在这一章的视频中，我为你介绍了Python常用的标准库，以及通过Python的模块机制导入标准库的方法。</p><p>如果你是初学者的话，我建议你熟练掌握自己工作领域的标准库。因为标准库没有明显的性能瓶颈，且功能强大。而标准库对于新手来说，最难掌握的部分就是它庞大的数量。虽然官方文档分门别类地存放了各类标准库，但是由于Python语言适用场景广，数量庞大，要想实现一个功能，有好几个库都能供你使用，只是新手一般不知道如何选择合适的库。</p><p>为此，我的建议是：<strong>先了解Python支持哪些标准库，再掌握通用的标准库文档查询方法，最后再熟悉自己工作中必备的5～10个标准库。</strong></p><p>为了让你更好地掌握选择合适的标准库的方法，接下来，我会通过一个自动下载软件并验证MD5值的例子，来带你再回顾一下我是如何找到自己需要的标准库并实现自己想要的功能的。</p><h2><strong>找到自己需要的库</strong></h2><p>提到下载这件事，自然少不了Python对网络功能的支持。如果你通读了一遍Python的标准库目录，不难发现，网络功能相关的库非常多。这时候你就要根据自己的需求，细分每个标准库的具体实现功能。我以最常见的通过HTTP协议下载文件为例，带你来看看我是如何选择标准库的。</p>","comments":[{"had_liked":false,"id":390131,"user_name":"键盘上的魔术","can_delete":false,"product_type":"c3","uid":2697700,"ip_address":"上海","ucode":"A731D721FB8D3A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/LFJZ4x47rvShGhsePLIxc8EzdlBxAmVAIjJ2FQZ4NEpo8E4JCZQEOb2NIfOuiaQLL6Otkt7W3Rmu6Tv3AkgYdRA/132","comment_is_top":false,"comment_ctime":1714446249,"is_pvip":false,"replies":[{"id":142165,"content":"我再举个例子给你，帮你理解一下这部分知识：\n首先是概念：在Python中，一个包（package）是一个包含 __init__.py 文件的目录，这个文件可以为空，但它的存在使得Python将目录视为包。包可以包含模块（模块是.py文件），也可以包含子包（即包含自己的__init__.py文件的目录）。\n\n然后我们来举个例子\nmy_package&#47;\n│\n├── __init__.py\n├── subpackage1&#47;\n│   ├── __init__.py\n│   └── module1.py\n└── subpackage2&#47;\n    ├── __init__.py\n    └── module2.py\n\n在这个例子中，my_package 是一个包，它包含两个子包 subpackage1 和 subpackage2，每个子包都有自己的 __init__.py 文件和模块文件 module1.py 和 module2.py。\n\n如果你想要在 my_package 的 __init__.py 中导入 module1.py 中的某个函数，可以这样做：\n\nmy_package&#47;__init__.py:\nfrom .subpackage1 import module1\nubpackage1&#47;__init__.py 也可以包含类似的导入语句，以允许直接从 subpackage1 导入 module1.py 中的内容：\n\nmy_package&#47;subpackage1&#47;__init__.py:\n\nfrom .module1 import some_function\n这样，其他代码可以这样导入函数：\n\nfrom my_package.subpackage1 import some_function\n或者，如果你想让 module1.py 中的所有内容都可以直接从 subpackage1 导入，可以在 subpackage1&#47;__init__.py 中使用 import *：\n\nmy_package&#47;subpackage1&#47;__init__.py:\n\nfrom .module1 import *\n目录结构和导入机制主要用在大型项目的模块化上面，让结构更加清晰","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1716565432,"ip_address":"广东","comment_id":390131,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"看了下那些第三方库的实现，感觉这一章，大模块，子模块的目录结构没怎么讲。比如一个大包，下面的子包，子包下面有__init__.py，子包下面还有很多“子子.py”。 然后子包的__init__.py通过from .子子  函数的语句声明告诉python， 当有人尝试从 子包 导入内容时，会自动去导入子子.py中的内容","like_count":1,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645716,"discussion_content":"我再举个例子给你，帮你理解一下这部分知识：\n首先是概念：在Python中，一个包（package）是一个包含 __init__.py 文件的目录，这个文件可以为空，但它的存在使得Python将目录视为包。包可以包含模块（模块是.py文件），也可以包含子包（即包含自己的__init__.py文件的目录）。\n\n然后我们来举个例子\nmy_package/\n│\n├── __init__.py\n├── subpackage1/\n│   ├── __init__.py\n│   └── module1.py\n└── subpackage2/\n    ├── __init__.py\n    └── module2.py\n\n在这个例子中，my_package 是一个包，它包含两个子包 subpackage1 和 subpackage2，每个子包都有自己的 __init__.py 文件和模块文件 module1.py 和 module2.py。\n\n如果你想要在 my_package 的 __init__.py 中导入 module1.py 中的某个函数，可以这样做：\n\nmy_package/__init__.py:\nfrom .subpackage1 import module1\nubpackage1/__init__.py 也可以包含类似的导入语句，以允许直接从 subpackage1 导入 module1.py 中的内容：\n\nmy_package/subpackage1/__init__.py:\n\nfrom .module1 import some_function\n这样，其他代码可以这样导入函数：\n\nfrom my_package.subpackage1 import some_function\n或者，如果你想让 module1.py 中的所有内容都可以直接从 subpackage1 导入，可以在 subpackage1/__init__.py 中使用 import *：\n\nmy_package/subpackage1/__init__.py:\n\nfrom .module1 import *\n目录结构和导入机制主要用在大型项目的模块化上面，让结构更加清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716565432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366954,"user_name":"Calvin","can_delete":false,"product_type":"c3","uid":2550899,"ip_address":"上海","ucode":"01A6EAC448B17F","user_header":"https://static001.geekbang.org/account/avatar/00/26/ec/73/4b22ef87.jpg","comment_is_top":false,"comment_ctime":1674656684,"is_pvip":false,"replies":[{"id":133719,"content":"不是的，大部分是靠经验得来的结果， 虽然Python标准库比较多， 但是结合自身的工作场景，一般只有十几个常用的，在里面再精挑细选得到的结论","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1674792766,"ip_address":"广东","comment_id":366954,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"“发现下载地址是 HTTPS 协议的。通过协议类型，我们首先排除不支持 HTTPS 协议的库。这样可以将待使用的协议从十几个精简到三个：webbrowser、urlib、http.client。”请问老师，这里是一个个库点进去看排除嘛，还是靠标准库内的搜索功能。我用关键字https搜索了一下，匹配的信息又太多了“https:&#47;&#47;docs.python.org&#47;zh-cn&#47;3.10&#47;search.html?q=https”","like_count":1,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600724,"discussion_content":"不是的，大部分是靠经验得来的结果， 虽然Python标准库比较多， 但是结合自身的工作场景，一般只有十几个常用的，在里面再精挑细选得到的结论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674792766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366092,"user_name":"Geek_0dccde","can_delete":false,"product_type":"c3","uid":3232217,"ip_address":"北京","ucode":"C6F81B5AF666A1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKUmqCkA9u03BPxTam9VQeHpCxxlbaJoqibI9fGprRds61g9S4AK8Rz1el9aAaibZR9fNAIrjtXY7Iw/132","comment_is_top":false,"comment_ctime":1673398386,"is_pvip":false,"replies":[{"id":133389,"content":"如果多看几遍可以理解得更透彻，记得更牢固，也是非常幸运的一件事情😊","user_name":"编辑回复","user_name_real":"编辑","uid":2843479,"ctime":1673419859,"ip_address":"北京","comment_id":366092,"utype":2}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"看完第八章，但我感觉至少得看两到三遍。","like_count":1,"discussions":[{"author":{"id":2843479,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/63/57/cba4c68b.jpg","nickname":"小虎子🐯","note":"","ucode":"4C9530B3FB407B","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599243,"discussion_content":"如果多看几遍可以理解得更透彻，记得更牢固，也是非常幸运的一件事情😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673419859,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":8}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009793,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM417c39k9NcWsBvmNv4CrJFSbMxRniccZbeHhNkfgLldyEKBiazjDl6ojVYH2LFicgwDticicoC8M0bTLQ/132","nickname":"大包子","note":"","ucode":"58D273AEBAE48A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623292,"discussion_content":"的确是 已经晕了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1689263313,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":374073,"user_name":"Sofia@","can_delete":false,"product_type":"c3","uid":3192629,"ip_address":"上海","ucode":"21E15632125FB5","user_header":"https://static001.geekbang.org/account/avatar/00/30/b7/35/21a32157.jpg","comment_is_top":false,"comment_ctime":1683554165,"is_pvip":false,"replies":[{"id":137000,"content":"应该是浏览器开了代理，导致请求失败，并非安装certifi库","user_name":"作者回复","user_name_real":"编辑","uid":1056235,"ctime":1685453425,"ip_address":"广东","comment_id":374073,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"URLError: &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:997)&gt;\n老师，为什么我在Jupyter里面跑总是报这个错呢，重新下载了证书，指定证书路径，重新安装certifi这个库都没用，这是什么原因呢？","like_count":0,"discussions":[{"author":{"id":1056235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1d/eb/b2123759.jpg","nickname":"尹会生","note":"","ucode":"D1093DBD093617","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619725,"discussion_content":"应该是浏览器开了代理，导致请求失败，并非安装certifi库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685453426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365658,"user_name":"Matthew","can_delete":false,"product_type":"c3","uid":2843865,"ip_address":"江苏","ucode":"96093089773740","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEKSVuNarJuDhBSvHY0giaq6yriceEBKiaKuc04wCYWOuso50noqDexaPJJibJN7PHwvcQppnzsDia1icZkw/132","comment_is_top":false,"comment_ctime":1672880380,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"import hashlib\n\nfrom urllib.request import urlretrieve\n \ndef get_file_md5(file_name, blobk_size):\n    &quot;&quot;&quot;\n    计算大文件的md5\n    &quot;&quot;&quot;\n    m = hashlib.new(&#39;md5&#39;)  #创建md5对象\n    \n    with open(file_name,&#39;rb&#39;) as fobj:\n        while True:\n            data = fobj.read(blobk_size)\n            if not data:\n                break\n            m.update(data) #更新md5对象\n    \n    return m.hexdigest()  #返回md5对象\n\nif __name__ == &#39;__main__&#39;:\n    \n    remote_url = &quot;https:&#47;&#47;www.python.org&#47;ftp&#47;python&#47;3.10.9&#47;python-3.10.9-amd64.exe&quot;\n    local_file = &quot;.&#47;python-3.10.9-amd64.exe&quot;\n \n    urlretrieve(remote_url, local_file)\n    \n    f_md5 = get_file_md5(local_file, 10)\n    print(f_md5)","like_count":1},{"had_liked":false,"id":396142,"user_name":"尹长拟","can_delete":false,"product_type":"c3","uid":3074007,"ip_address":"北京","ucode":"1EBD42B5BBD934","user_header":"","comment_is_top":false,"comment_ctime":1733232756,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"import hashlib\nfrom urllib.request import urlretrieve\nimport os\n\n# 目标文件的 URL\nremote_url = &quot;https:&#47;&#47;www.python.org&#47;ftp&#47;python&#47;3.10.9&#47;python-3.10.9-amd64.exe&quot;\n\n# 本地保存路径\nlocal_file = r&quot;e:\\python-3.10.9-amd64.exe&quot;\n\n# 确保目标目录存在\ndirectory = os.path.dirname(local_file)\nif not os.path.exists(directory):\n    os.makedirs(directory)\n\n# 下载文件\ntry:\n    urlretrieve(remote_url, local_file)\n    print(f&quot;文件已成功下载到 {local_file}&quot;)\nexcept Exception as e:\n    print(f&quot;下载过程中发生错误: {e}&quot;)\n\n# 计算文件的 MD5 哈希值\ntry:\n    with open(local_file, &quot;rb&quot;) as f:\n        md5 = hashlib.new(&#39;md5&#39;)\n        # 使用分块读取的方式来计算 MD5，避免一次性加载整个文件\n        for chunk in iter(lambda: f.read(4096), b&quot;&quot;):\n            md5.update(chunk)\n        print(f&quot;文件的 MD5 哈希值: {md5.hexdigest()}&quot;)\nexcept FileNotFoundError:\n    print(f&quot;文件未找到: {local_file}&quot;)\nexcept Exception as e:\n    print(f&quot;计算 MD5 时发生错误: {e}&quot;)","like_count":0},{"had_liked":false,"id":384909,"user_name":"760418","can_delete":false,"product_type":"c3","uid":3768167,"ip_address":"上海","ucode":"C160176FE97575","user_header":"","comment_is_top":false,"comment_ctime":1701776132,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"import hashlib\nwith open(local_file, &quot;rb&quot;) as f:\n    md5 = hashlib.new(&#39;md5&#39;)    # 使用 MD5 算法\n    md5.update(f.read()) \n    \nprint(md5.hexdigest())   # 与下载网站的 MD5 值对照\n# dce578fe177892488cadb6c34aea58ee","like_count":0},{"had_liked":false,"id":379230,"user_name":"Geek_Mike","can_delete":false,"product_type":"c3","uid":3196376,"ip_address":"云南","ucode":"CFA942192C3B74","user_header":"https://static001.geekbang.org/account/avatar/00/30/c5/d8/c5509b9c.jpg","comment_is_top":false,"comment_ctime":1691577810,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"import hashlib\nfrom urllib.request import urlopen\nimport tempfile\nimport shutil\n\nurl = &#39;https:&#47;&#47;example.com&#47;file_name.exe&#39;\n\nwith urlopen(url) as f1:\n    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n        shutil.copyfileobj(f1, tmp_file)\n\nwith open(tmp_file, &#39;rb&#39;) as f2:\n    md5 = hashlib.md5()\n    chunk = 1024\n    while True:\n        data = f2.read(chunk)\n        if not data:\n            break\n        md5.update(data)\n    print(md5.hexdigest())","like_count":0},{"had_liked":false,"id":369229,"user_name":"yanyu-xin","can_delete":false,"product_type":"c3","uid":1899757,"ip_address":"广东","ucode":"3AA389F9E4C236","user_header":"","comment_is_top":false,"comment_ctime":1677247549,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100310001,"comment_content":"import hashlib \nfrom urllib.request import urlretrieve\n \nremote_url = &quot;https:&#47;&#47;www.python.org&#47;ftp&#47;python&#47;3.10.9&#47;python-3.10.9-amd64.exe&quot;\nlocal_file = &quot;e:\\python-3.10.9-amd64.exe&quot;\n \nurlretrieve(remote_url, local_file)\n\nmd5 = hashlib.new(&#39;md5&#39;) #创建md5对象\n\n#  用with同时读取大文件每一行\nwith open(local_file, &quot;rb&quot;) as f:\n    for fLine in f:\n        md5.update(fLine.readline()) \n \nprint(md5.hexdigest()) #返回md5对象","like_count":0}]}