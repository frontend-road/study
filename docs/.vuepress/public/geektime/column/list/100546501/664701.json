{"id":664701,"title":"19｜路由定义和视图常用逻辑：路由定义和视图的核心是什么？","content":"<p>你好，我是Barry。</p><p>上节课我们完成了Flask框架搭建，同时我们也提到了路由。虽然我们都知道路由是处理URL和视图函数之间关系的程序，但在项目中究竟为什么要使用路由，我们又该如何使用，这些问题我们仍然没有解决。</p><p>这节课，我们重点学习静态路由还有视图函数的常用逻辑，了解了这些，你就能能够编写和处理复杂的视图函数，掌握从路由请求中提取有用的信息，并能够生成动态响应做一些接口的开发。</p><h2>初识路由</h2><p>路由是Flask框架中非常重要的组成部分。为什么说它非常重要呢？因为路由的作用是将HTTP请求的URL路径映射到相应的函数处理程序。这样我们在开发过程中，就能将不同的URL路径与相应的函数处理程序关联起来，从而实现对Web应用的灵活控制。</p><p>路由可以分为静态路由和动态路由。两者主要是在形式上有一些区别，通常静态路由使用@app.route(‘/’)这样的装饰器形式。</p><p>而动态路由会使用变量名&lt;name&gt;，形式通常为@app.route(‘/’, &lt;name&gt;)。当然，其中还可以传入其他类型的参数，如整型、浮点型，甚至Path路径等。现在你先知道它们有什么区别就可以，动态路由这部分我会在下一节课重点去讲解，这节课我们重点学习静态路由。</p><!-- [[[read_end]]] --><h2>静态路由详解</h2><p>路由的装饰器形式是@app.route(‘/’)，装饰器中的第一个参数是 ‘/’，括号当中的斜杠表示项目根路径。</p><p>静态路由的工作机制很容易理解：在我们的项目开发过程中，都是在根路径的基础上去修改URL，对于不同的URL需要使用装饰器的方式来绑定不同的视图函数。</p><p>不难看出静态路由里装饰器的重要性，我们这就来了解一下装饰器函数中的重要参数，它们分别是methods、endpoint、url_for、redirect_to，掌握了这些参数能让你进一步加深对路由的了解。我们这就依次去看一下它们的具体用途。</p><h4>methods参数</h4><p>我们首先来看methods。methods是当前视图函数支持或者说函数指定的HTTP请求方法。这么说有点抽象，我们不妨通过后面这个案例来看看。</p><pre><code class=\"language-python\">from flask import Flask, request\napp = Flask(__name__)\n@app.route('/message', methods=['POST'])\n  def message():\n&nbsp; name = request.form['name']\n&nbsp; location = request.form['location']\n&nbsp; age = request.form['age']\n&nbsp; return f'Hi, {name} ,you have live in {location} for {age} years!'\nif __name__ == '__main__':\n&nbsp; app.run()\n</code></pre><p>methods参数主要用来指定函数的请求方法。在上面的案例中，路由装饰器的methods参数指定message()函数使用POST请求方法。在message()函数里的参数name、location、age使用request方法从表单中获取数据，message()函数最后返回了表单中的名字、地址和年龄。</p><p>当用户在提交表单数据的时候，Flask会自动调用视图函数message()，并且从请求当中获取提交的数据。最后，我们将提交的数据返回并展示给用户。这就是methods核心作用。</p><h4>endpiont函数</h4><p>接下来我们再来了解一下endpoint。</p><p>Flask 路由装饰器&nbsp;@app.route&nbsp;中的&nbsp;endpoint&nbsp;参数是一个<strong>函数</strong>，用于指定要处理的 URL 的名称。这个参数可以是一个字符串，用于匹配要处理的 URL，也可以是一个函数，用于生成 URL。</p><p>当我们使用&nbsp;@app.route&nbsp;装饰器时，它会自动添加&nbsp;endpoint&nbsp;参数。这个参数可以接受一个字符串或一个函数作为值。如果我们采用函数作为&nbsp;endpoint&nbsp;参数传递的形式，那么Flask 将在路由处理函数内部调用该函数。</p><p>接下来我们看一个例子，直观感受一下。</p><pre><code class=\"language-python\">from flask import Flask\napp = Flask(__name__)\n@app.route('/hello', endpoint='hello_world')  \ndef hello_world():  \n    return 'Hello, World!'\nif __name__ ==&nbsp;'__main__':\n&nbsp; app.run()\n</code></pre><p>在上面的代码中，/hello&nbsp;是路由的 URL，hello_world&nbsp;是处理该请求的视图函数。当用户访问&nbsp;/hello&nbsp;路径时，Flask 将会调用&nbsp;hello_world&nbsp;函数来处理请求，并返回一个包含 “Hello, World!” 的响应。</p><p>endpoint&nbsp;参数的作用是让 Flask 能够处理相同 URL 的请求。比方说，如果有多个处理相同 URL 的视图函数，但是它们使用不同的&nbsp;endpoint&nbsp;参数，Flask 就会根据传入的&nbsp;endpoint&nbsp;参数来选择正确的视图函数。</p><p>另外，如果在 Flask 应用程序中有多个路由，但是它们使用相同的&nbsp;endpoint&nbsp;参数，那么这些路由将共享同一个视图函数。这样可以避免在多个路由中编写相同的视图函数，从而提高代码的复用性和可维护性。</p><h4>url_for装饰器</h4><p>url_for&nbsp;是一个用于生成 URL 的装饰器，它可以帮助我们在模板中更方便地生成动态的 URL。 该函数的参数是一个字符串或字典，用于指定要生成的 URL 的变量名。</p><p>url_for&nbsp;装饰器可以在路由函数的&nbsp;path&nbsp;参数中使用，也可以在路由函数的&nbsp;url_for&nbsp;参数中使用。如果在&nbsp;path&nbsp;参数中使用，它将在生成的 URL 中使用变量名替换路径部分；如果在&nbsp;url_for&nbsp;参数中使用，它将生成一个新的 URL，其中变量名将作为路径部分。我们还是结合案例来感受一下。</p><pre><code class=\"language-python\">from flask import Flask, render_template  \n  \napp = Flask(__name__)  \n  \n@app.route('/hello')  \ndef hello():  \n    name = 'World'  \n    return render_template('hello.html', name=name)  \n  \nif __name__ == '__main__':  \n    url = url_for(hello)  \n    print(url)  # 输出：&lt;http://localhost/hello?name=World&gt; \n</code></pre><p>在上面的示例中，/hello&nbsp;路由的返回值是一个字符串&nbsp;‘World’，这个字符串将被替换为URL中的参数值，最终生成的URL是&nbsp;&lt;<code>http://localhost/hello?name=World</code>&gt;。</p><p>需要注意的是，<strong>url_for&nbsp;装饰器只会生成一个唯一的 URL</strong>，如果在同一个请求中多次使用相同的&nbsp;url_for&nbsp;装饰器，则会生成相同的 URL。如果需要避免重复的 URL，可以在模板中手动拼接 URL。</p><h4>redirect_to</h4><p>redirect_to是重定向装饰器。当用户点击路由跳转链接时，浏览器会发送一个 HTTP 重定向请求，Flask 路由装饰器&nbsp;redirect_to&nbsp;可以捕获这个重定向请求，并将用户重定向到目标 URL。</p><p>应用redirect_to&nbsp;装饰器的重点，就是了解它需要接收一个参数，这个参数就是重定向后要跳转到的目标 URL。当用户点击路由跳转链接时，Flask 会自动发送一个 HTTP 重定向请求到目标 URL。装饰器&nbsp;redirect_to&nbsp;会拦截这个重定向请求，并且把用户重定向到指定的目标 URL。</p><p>我们一起通过后面这段代码来学习一下redirect_to具体的用法。</p><pre><code class=\"language-python\">from flask import Flask, render_template  \n  \napp = Flask(__name__)  \n  \n@app.route('/hello')  \ndef hello():  \n    name = 'World'  \n    return render_template('hello.html', name=name, redirect_to='/home')  \n  \nif __name__ == '__main__':  \n    url = '/hello?name=World'  \n    response = app.run()  \n</code></pre><p>在上面的示例中，hello视图函数使用render_template函数返回一个渲染后的模板，模板文件名为hello.html。 当用户点击路由跳转链接的时候，然后 Flask 会把用户重定向到&nbsp;&lt;<code>http://localhost/home</code>&gt;。</p><p>到这里，我们已经清楚了路由装饰器中核心的配置项，这是Flask框架使用过程中的一个必备知识点，相信掌握之后会让你后面的开发实现更加流畅。</p><p>我们已经知道了静态路由会将 URL 路径与特定的函数或视图函数关联起来，以便在接收到相应的 HTTP 请求时调用相应的函数或视图函数来处理请求。那视图函数到底扮演着什么样的角色呢？这就是我们接下来要探索的内容。</p><h2>视图函数</h2><p>Flask 中的视图函数就是用于处理 HTTP 请求并返回响应的 Python 函数。视图函数通常接受 HTTP 方法（如 GET、POST、PUT、DELETE 等）和 URL 路径作为参数，并根据请求的不同和条件来执行不同的操作。</p><p>比方说，在处理 GET 请求时，视图函数可以生成 HTML 响应或从数据库中检索数据；而在处理 POST 请求时，视图函数可以将表单数据写入数据库或执行其他一些特定操作。</p><p>和视图函数紧密相关的函数和对象包括render_template函数和request对象，我们依次来看看。</p><h3>render_template函数</h3><p>render_template函数主要的作用就是将视图函数中的数据传递给模板，并在模板中使用这些数据来生成 HTML 响应。</p><p>由此我们就理清了视图函数和render_template的关系：<strong>视图函数负责处理请求并生成需要传递给模板的数据，然后使用&nbsp;render_template&nbsp;函数将数据传递给模板来渲染响应内容。</strong></p><p>在render_template&nbsp;函数内可以接受两个参数。第一个参数是template_name，代表要渲染的模板文件名称。</p><p>第二个参数是context，可以是一个字典，包含要在模板中使用的变量和数据。context&nbsp;参数还可以是 Flask 视图函数的返回值，它可以被视图函数中的变量引用。</p><p>我们可以在用于生成 HTML 响应的 Jinja2 模板中，使用&nbsp;{{ }}&nbsp;语法来引用&nbsp;context&nbsp;中的变量。</p><p>你可以结合后面这个简单的render_template例子来理解一下。</p><pre><code class=\"language-python\">from flask import Flask, render_template\napp = Flask(__name__)\n@app.route('/')\ndef index():\n&nbsp; &nbsp; return render_template('index.html')\nif __name__ == '__main__':\n&nbsp; &nbsp; app.run()\n</code></pre><p>在这个例子中，视图函数返回的就是我们事先编写好的index.html网页。这里的渲染的模板 index.html文件是之前就存在应用程序的templates文件夹当中的。</p><p>除了使用render_template去渲染模板，我们还可以给模板中传入值，你不妨结合后面的代码案例来看看。</p><pre><code class=\"language-python\">from flask import Flask, render_template\napp = Flask(__name__)\n@app.route('/')\ndef index():\n  data={\n    'name':'列表',\n    'len':'8',\n    'list':{1,2,3,4,5,6,7,8}\n  }\n&nbsp; return render_template('index.html'，data=data)\nif __name__ == '__main__':\n&nbsp; app.run()\n</code></pre><p>前面的data是HTML文件中的data，后一个data是我们传入的data。html文件的代码我也放在了下面。</p><pre><code class=\"language-xml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Title&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n名称：{{data['name']}}\n&lt;br&gt;\n长度：{{data['len']}}\n&lt;br&gt;\nlist：{{data['list']}}\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>代码输出的效果是后面这样。<br>\n<img src=\"https://static001.geekbang.org/resource/image/3d/65/3db2f6fb95a845cdf8f6dc6af6392265.png?wh=1917x377\" alt=\"图片\"></p><p>我们需要注意的是，这里传给render_template函数中的data参数，<strong>也必须在HTML文件中出现同样的形参data，才能传入成功。</strong></p><p>其实这种传值的方法，还可以使用在我们的在线视频平台项目里。比如说，只要我们能获取到视频的点赞数、观看数和评论数等信息，就可以通过这种方法，把值通过函数render_template传给视频首页，从而实现数据的更新。</p><p>以上我们是实现对render_template函数的应用，除了完成页面的展示，在请求过程中我们还需要关注的信息就是请求返回信息。我们需要通过返回信息来做代码逻辑的处理，例如请求的 URL、HTTP 方法、请求头、请求体等，这就要用到我们下面即将学到的request对象了。</p><h3>request对象</h3><p>Flask 视图函数中的&nbsp;request&nbsp;是一个非常有用的对象，它包含了客户端与服务器之间的所有请求和响应数据。</p><p>在 Flask 中，视图函数的&nbsp;request&nbsp;对象通常是由客户端发送给服务器的第一个请求对象，它包含了客户端发送给服务器的所有数据，比如后面这些信息。</p><p>1.请求头信息：如 Accept、Content-Type 等<br>\n2.请求的 URL参数request.url<br>\n3.发送给服务器的请求体数据request.json<br>\n4.请求方法request.method<br>\n5.表单数据，即 POST 请求中传递的数据request.form</p><p>在视图函数中，我们可以通过&nbsp;request&nbsp;对象来获取这些数据，并对它们进行处理。接下来，我们结合后面简单的案例来学习一下request要如何使用。</p><pre><code class=\"language-python\">from flask import Flask, request\napp = Flask(__name__)&nbsp;&nbsp;\n&nbsp;&nbsp;\n@app.route('/')&nbsp;&nbsp;\ndef index():&nbsp;&nbsp;\n&nbsp; &nbsp; url = request.url&nbsp;&nbsp;\n&nbsp; &nbsp; return 'Hello, World!'&nbsp;&nbsp;\n&nbsp;&nbsp;\nif __name__ == '__main__':&nbsp;&nbsp;\n&nbsp; &nbsp; response = app.run()&nbsp;&nbsp;\n&nbsp; &nbsp; print(response.url)&nbsp; # 输出：&lt;http://localhost:8080/&gt;\n\n</code></pre><p>在上面的示例中，我们定义了一个名为&nbsp;index&nbsp;的视图函数，它返回了一个字符串 “Hello, World!”。在视图函数中，我们通过&nbsp;request.url&nbsp;获取了请求的 URL，并将其返回给客户端。<br>\n&nbsp;<br>\n除了获取请求URL，我们还可以通过&nbsp;request.method、request.path&nbsp;和&nbsp;request.data&nbsp;等属性来获取更多的请求信息。这些属性可以帮助我们更方便地处理和操作客户端发送给服务器的数据。</p><p>接下来，我们来了解一下request的两个核心的属性request.form和request.method。</p><h4>request.form属性应用</h4><p>我们先来了解request.form属性，它是一个字典类型对象，可以用来获取表单数据。具体来说，这些数据包含在客户端向服务器发送的POST请求里，这就是它的使用场景。</p><p>此时需要注意，如果前端传回来的数据格式不是表单，此时我们就不能用request.form。比如JSON或者其他格式，那么就要用request.data来获取。无论是request.form还是request.data，都是需属于request对象本身的参数。</p><p>但是特殊情况下，如果request.form这个字典对象中没有某个我们想获取的键对值，就会引发keyerror这个异常。此时我们就通过request.form.get()来更安全地获取request.form这个字典当中的值。</p><p>request.form.get是获取request.form当中特定字段的一个方法，并且我们还可以设置一个默认值，防止如果这个字典当中不存在这个值引起意外错误，这也是你应用过程中需要注意的地方。</p><p>比方说，我们想获取前端用户输入的手机号、用户名等信息，就可以这么操作。</p><pre><code class=\"language-python\">from flask import Flask, request\napp = Flask(__name__)\n@app.route('/login', methods=['POST'])\ndef login():\n  name = request.form.get('name', '')  \n  mobile = request.form.get('mobile', '') \n  # 这里可以进行用户名和手机号信息验证等其他操作\n  return name + '' + mobile\nif __name__ == '__main__':\n  app.run()\n</code></pre><p>从前面这段代码可以看到，request.form中包含我们的用户和密码两个字段。我们让参数name从request.form中获取name字段对应的值，mobile从request.form中获取mobile字段对应的值，并且我们把默认值设置成了空字符串，这样可以避免keyerror的异常。如果表单当中没有对应的键对值，我们就会返回默认值，也就是我们这里的空字符串。最后再返回用户的信息。</p><h4>request.method属性</h4><p>其次就是request.method，它代表了客户端发起的 HTTP 请求的方法。当然了，我们也可以根据method请求方式不同，返回不同的响应界面。</p><p>我们把之前讲request.form时使用的代码例子稍作修改，就变成了后面这样。</p><pre><code class=\"language-python\">from flask import Flask, request\napp = Flask(__name__)\n@app.route('/', methods=['GET','POST'])\ndef login():\n  if request.method == \"GET\":\n    return render_template('login.html')\n  name = request.form.get['name','']\n  pwd = request.form.get['pwd','']\n  return name + '' + pwd\nif __name__ == '__main__':\n&nbsp; app.run()\n</code></pre><p>在这个例子中，路由允许GET和POST两种方式，但我们限定只能使用POST方式提交用户信息。如果用了GET方式，则会渲染login.html，效果就是提示用户在login.html页面中提交信息，然后自动返回登录界面。</p><p>如果这个request.method是GET方法，那我们就显示“这是GET请求方法”。如果request.method是POST方法，就表示它会通过前端向服务器请求数据，这时候需要我们在对应的HTML文件当中设置这个POST。这部分内容我们前端实战篇也提到过，你可以再复习巩固一下。</p><h2>案例实战</h2><p>前面我们已经掌握了很多的储备知识，包括静态路由和视图函数。</p><p>接下来我们来把前面所学综合应用一下，一起实现“哨兵检查口令”这个案例。</p><p>我们先在Practice文件下新建cipher_check.py文件，再新建一个practice_2_index.html文件，这两个文件你也可以自己命名。我也给你把文件创建的结构截图贴在了后面，供你参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/7b/45/7b80336989606aee9c87c4ab830aab45.jpg?wh=2600x493\" alt=\"\"></p><p>你可以参考后面这段代码，这是我们在HTML中需要实现的内容，主要是建立一个表单，并且在里面设置一个带有口令输入的输入框。</p><pre><code class=\"language-xml\">&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;cipher-check&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;口令对接&lt;/h1&gt;\n&lt;form action=\"/check\" method=\"post\"&gt;\n&lt;label for=\"cipher\"&gt;口令：&lt;/label&gt;\n&lt;input type=\"text\" id=\"cipher\" name=\"cipher\"&gt;&lt;br&gt;&lt;br&gt;\n&lt;input type=\"submit\" value=\"提交\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><p>我们运行前面这段代码，具体页面展示的效果就是后面这样，你可以参考一下。</p><p><img src=\"https://static001.geekbang.org/resource/image/f9/0f/f94b669403b30a935a9a4697c2156e0f.jpg?wh=2600x704\" alt=\"\"></p><p>在cipher_check.py具体的代码实现，你同样可以参考后面我写的版本，你可以边看文稿边听我讲解。</p><pre><code class=\"language-python\">from flask import Flask, render_template, request, redirect, url_for\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('practice_2_index.html')\n@app.route('/&lt;code&gt;', methods=['GET'])\ndef check_(code):\n    Cipher = '路由装饰器'\n    if request.method == 'GET' and code == Cipher:\n        return '使用GET方法，口令正确'\n    else:\n        return redirect(url_for('failure'))\n@app.route('/check', methods=['POST'])\ndef check():\n    Cipher = '路由装饰器'\n    cipher = request.form.get('cipher')\n    if request.method == 'POST' and cipher == Cipher:\n        return redirect(url_for('success'))\n    else:\n        return redirect(url_for('failure'))\n@app.route('/success')\ndef success():\n    return '暗号对接成功！'\ndef failure():\n    return '暗号对接失败！'\nif __name__ == '__main__':\n    app.run()\n</code></pre><p>不难发现这段代码中，index()视图函数渲染了用来给用户输入口令的模板practice_2_index.html。输入口令可以用两种方式来实现，一种在URL中直接输入口令，一种通过表单提交。</p><p>我们需要提前把口令Cipher的参数设定为“路由装饰器”，同时在口令检查函数check_()内，我们要指定采用GET请求方式。如果用户输入内容正确，就直接返回“使用GET方法，口令正确”的字样；如果输入错误，则重定向到failure()视图函数，提示用户暗号对接失败。</p><p>如果口令检查函数check()指定POST请求方式。这时候就会从表单中获取用户提交口令，口令检查对接上后，重定向到success()视图函数，提示用户“暗号对接成功”。我们一起来看一下GET方式的运行结果。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/c7/c273ff51b6214ba803093b77301ee3c7.jpg?wh=2600x650\" alt=\"\"></p><p>最后，我们来看看POST方式运行后的结果，后面截图里呈现的就是对接成功之后的效果。</p><p><img src=\"https://static001.geekbang.org/resource/image/98/e1/980da414bf7f3299b8a298e465a2b7e1.jpg?wh=2620x535\" alt=\"\"></p><p>好，我们成功完成了“哨兵检查口令”这个有趣的案例，通过实践巩固了我们前面学到的路由和视图函数知识。在课后你也要自己尝试一下，这样学习效果会更好。</p><h2>总结</h2><p>又到了课程的尾声，我们一起来回顾总结一下这节课的内容。</p><p>路由在Flask框架中非常重要，它能将URL路径与应用程序中的函数关联起来，从而实现对HTTP请求的处理。路由又分为静态路由和动态路由，两者主要是在形式上有一些区别，这节课我们重点学习了静态路由。</p><p>关于静态路由，你重点要掌握后面这四点。</p><p>1.methods参数，它用于设定当前视图函数支持或者函数指定的HTTP请求方法。<br>\n2.endpoint函数，它用于指定要处理的 URL 的名称。endpoint可以是一个字符串，用于匹配要处理的 URL，也可以是一个函数，用于生成 URL。<br>\n3.url_for&nbsp;是一个用于生成 URL 的装饰器，它可以帮助我们在模板中更方便地生成动态的 URL。<br>\n4.捕获重定向请求的redirect_to，并将用户重定向到目标 URL。</p><p>我们一定要明确每个参数的作用，这样我们在实战中更顺畅。</p><p>除了静态路由，我们还学习了视图函数，它是用于处理 HTTP 请求并返回响应的 Python 函数。</p><p>其中你需要重点掌握 <strong>render_template这个函数，它会根据模板文件中的变量和条件动态地生成 HTML 代码，并将其返回给客户端。</strong>以后做视图的时候，别忘了render_template这种实现方式。render_template&nbsp;函数可以接受两个参数，分别是template_name和context。</p><p>最后，我们还要关注请求返回信息request&nbsp;对象，request通常是由客户端发送给服务器的第一个请求对象，它包含了客户端发送给服务器的所有数据。 <strong>request.form和request.method的用法也是重要知识点</strong>，开发里经常会用到，只有扎实地掌握这两个属性，才能提高你的代码实战能力。</p><p>希望你在课后多多实践，巩固今天学到的内容。下节课我们继续学习动态路由，敬请期待。</p><h2>思考题</h2><p>这节课我们简单讨论过动态路由是什么。那么在路由定义中，为什么要使用动态路由参数？</p><p>欢迎你在留言区和我交流互动，如果这节课对你有启发，记得分享给身边的同事、朋友，和他一起交流进步。</p>","neighbors":{"left":{"article_title":"18｜初识Flask：搭建第一个Flask项目","id":663717},"right":{"article_title":"20｜匹配路由&异常捕获：如何用转化器实现匹配规则？","id":665255}},"comments":[{"had_liked":false,"id":382893,"user_name":"Aegean Sea","can_delete":false,"product_type":"c1","uid":3688848,"ip_address":"广西","ucode":"0C6F23AEAC6E07","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELrxUK36wj3AesBNLK4tPibu7URiaI48cMWho2t8bfZOyfYDnQwQu2TTXibIbGVZ8DkPhNXDGr7VTfOJv1R1ccw1KBv5qfbq1bYvDhL1MtAVjISA/132","comment_is_top":false,"comment_ctime":1698156242,"is_pvip":false,"replies":[{"id":139568,"content":"你在源码库中可看到完整的实现。","user_name":"作者回复","user_name_real":"编辑","uid":3050845,"ctime":1698585747,"ip_address":"北京","comment_id":382893,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100546501,"comment_content":"最后那个failure函数少了装饰器","like_count":1,"discussions":[{"author":{"id":3050845,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8d/5d/9a86007c.jpg","nickname":"Barry","note":"","ucode":"82175C78B4CAED","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630506,"discussion_content":"你在源码库中可看到完整的实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698585747,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":3869936,"avatar":"https://static001.geekbang.org/account/avatar/00/3b/0c/f0/c8950925.jpg","nickname":"niniク","note":"","ucode":"A19C3C5C00EEB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3050845,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8d/5d/9a86007c.jpg","nickname":"Barry","note":"","ucode":"82175C78B4CAED","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":642329,"discussion_content":"源码库在哪里看到\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1713470022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":630506,"ip_address":"陕西","group_id":0},"score":642329,"extra":""}]}]},{"had_liked":false,"id":379494,"user_name":"蜡笔小新爱看书","can_delete":false,"product_type":"c1","uid":1224437,"ip_address":"广东","ucode":"3E597682ADB0C8","user_header":"https://static001.geekbang.org/account/avatar/00/12/ae/f5/a17bbcc9.jpg","comment_is_top":false,"comment_ctime":1692014392,"is_pvip":false,"replies":[{"id":138329,"content":"感谢指正，字典的键应该用括号括起来，而不是用方括号，因为这个是单独案例，书写疏忽了，但是项目中的实现代码不会有这样的情况，稍后就会更新，到时再来看文稿。\n","user_name":"作者回复","user_name_real":"编辑","uid":3050845,"ctime":1692452436,"ip_address":"北京","comment_id":379494,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100546501,"comment_content":"纠错：name = request.form.get(&#39;name&#39;,&#39;&#39;)\n    age = request.form.get(&#39;age&#39;,&#39;&#39;)，不是中括号[]","like_count":0,"discussions":[{"author":{"id":3050845,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8d/5d/9a86007c.jpg","nickname":"Barry","note":"","ucode":"82175C78B4CAED","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":626024,"discussion_content":"感谢指正，字典的键应该用括号括起来，而不是用方括号，因为这个是单独案例，书写疏忽了，但是项目中的实现代码不会有这样的情况，稍后就会更新，到时再来看文稿。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1692452436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":376487,"user_name":"浩仔是程序员","can_delete":false,"product_type":"c1","uid":1104601,"ip_address":"广东","ucode":"A7E5CF9E1571A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/d9/f051962f.jpg","comment_is_top":false,"comment_ctime":1686841394,"is_pvip":false,"replies":[{"id":137303,"content":"方法复用确实是一个不错的做法，这样可以将一些公共逻辑提取出来，避免代码冗余，这个在使用上还是有选择性的，非必需使用。当然它也有优势的地方，例如endpoint可以用于在蓝图中管理路由，这个我们后边课有讲。我们可以使用endpoint将路由与蓝图关联起来，这样会让路由的管理和维护更加方便和可复用，也是一种优化的选择。","user_name":"作者回复","user_name_real":"编辑","uid":3050845,"ctime":1687167248,"ip_address":"北京","comment_id":376487,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100546501,"comment_content":"endpoint这个感觉确实不是很有必要，@app.route下面跟着就是处理函数，一个路由对应一个函数，如果想多个路由复用同一个函数，抽象出来一个方法复用就可以了，一对一的映射比较清晰点，而且通常多个路由都是同一个处理函数的场景比较少吧","like_count":0,"discussions":[{"author":{"id":3050845,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8d/5d/9a86007c.jpg","nickname":"Barry","note":"","ucode":"82175C78B4CAED","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621371,"discussion_content":"方法复用确实是一个不错的做法，这样可以将一些公共逻辑提取出来，避免代码冗余，这个在使用上还是有选择性的，非必需使用。当然它也有优势的地方，例如endpoint可以用于在蓝图中管理路由，这个我们后边课有讲。我们可以使用endpoint将路由与蓝图关联起来，这样会让路由的管理和维护更加方便和可复用，也是一种优化的选择。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1687167248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3605821,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI7Bm7xdbwqoWPaDwqn6WESYL5QY8X8r3Q1P7UEIeDWictxJWEIJLluhIDHF7b0wFpbiav3gYToBBYg/132","nickname":"Geek_840593","note":"","ucode":"F92256CD230166","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":621174,"discussion_content":"解决命名空间的作用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686889355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"重庆","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375792,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1685971758,"is_pvip":false,"replies":[{"id":137170,"content":"1、hello_world 是一个字符串，它被用作端点名称。端点是一个标识符，用于在 Flask 应用中引用一组视图函数。在这个例子中，hello_world 端点只包含一个视图函数 hello_world。\n2、当在 Flask 应用程序中有多个路由使用相同的 endpoint 参数时，它们将共享同一个视图函数。这意味着，无论你通过哪个路由访问该端点，都将调用相同的视图函数来处理请求。是这样的关系。下面我给你写个案例，你看案例就能看清他们的关系：\n@app.route(&#39;&#47;&#39;)  \n@app.route(&#39;&#47;home&#39;)  \n@app.route(&#39;&#47;index&#39;, endpoint=&#39;home&#39;)  \ndef home():  \n    return render_template(&#39;home.html&#39;)  \n\n3、在HTTP请求中，数据可以以多种格式进行传输，包括表单数据、JSON数据、XML数据等。在Flask中，可以通过请求对象的data属性来获取请求的数据。\n对于其他格式的数据，例如XML数据，则可以通过Flask提供的request.get_data()方法来获取整个请求体数据，然后使用相应的库来解析XML数据。这个根据类型去选择就可以\n4、是的，Flask默认会将模板文件放在templates目录下。当使用render_template函数时，需要传入文件名作为第一个参数，如果该文件在templates目录下，可以只传入文件名；如果文件不在templates目录下，需要指定文件的完整路径\n5、1、是的，理解是正确的\n2、在 if __name__ == &#39;__main__&#39;: 代码块中，调用 Flask 提供的 url_for() 函数，传入 hello() 函数作为参数。这将返回 &#47;hello 路由对应的 URL。然后，将 URL 打印到控制台。这个对待吗问题统一解释，你就明白核心逻辑了。继续加油，多多实践。\n\n因此，这段代码会在以下情况下执行：\n当你运行这个 Flask 应用程序时，它将执行 if __name__ == &#39;__main__&#39;: 代码块中的代码。\n当用户访问 &#47;hello 路由时，Flask 将调用 hello() 函数，执行其中的代码。\n","user_name":"作者回复","user_name_real":"编辑","uid":3050845,"ctime":1686194145,"ip_address":"北京","comment_id":375792,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100546501,"comment_content":"请教老师几个问题：\nQ1：怎么判断endpoint是字符串还是函数？\n文中的例子，函数是def hello_world()。endpoint=&#39;hello_world&#39;，这里的hello_world是字符串还是函数？\nQ2：“如果在 Flask 应用程序中有多个路由，但是它们使用相同的  endpoint  参数，那么这些路由将共享同一个视图函数”，怎么理解？能否举例说明。\n路由装饰器都是加在函数名称前面的，多个路由就是多个函数啊。\n\nQ3：request的数据只有表单和json两种吗？如果是其他种类会怎么处理？\nQ4：render_template函数中的第一个参数，就是文件名，这个文件必须在目录templates下面吗？\nQ5：url_for的例子代码是怎么执行的?\n我的理解：程序运行后，1 最下面的“if __name__ == &#39;__main__&#39;”会执行，即执行“url = url_for(hello)”和“print(url)”；\n2 “def hello():”这个函数不会执行，只有用户通过浏览器发请求的时候才执行。\n是这样吗？\nQ6：url_for(hello)中的“hello”是指“def hello():”中的hello吗？ 还是指@app.route(&#39;&#47;hello&#39;)中的“hello”？\n“&#47;hello  路由的返回值是一个字符串  ‘World’”，为什么会返回字符串world？ &#47;hello对应函数hello，而函数hello返回的是一个网页啊（render_template）","like_count":0,"discussions":[{"author":{"id":3050845,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/8d/5d/9a86007c.jpg","nickname":"Barry","note":"","ucode":"82175C78B4CAED","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620461,"discussion_content":"1、hello_world 是一个字符串，它被用作端点名称。端点是一个标识符，用于在 Flask 应用中引用一组视图函数。在这个例子中，hello_world 端点只包含一个视图函数 hello_world。\n2、当在 Flask 应用程序中有多个路由使用相同的 endpoint 参数时，它们将共享同一个视图函数。这意味着，无论你通过哪个路由访问该端点，都将调用相同的视图函数来处理请求。是这样的关系。下面我给你写个案例，你看案例就能看清他们的关系：\n@app.route(&#39;/&#39;)  \n@app.route(&#39;/home&#39;)  \n@app.route(&#39;/index&#39;, endpoint=&#39;home&#39;)  \ndef home():  \n    return render_template(&#39;home.html&#39;)  \n\n3、在HTTP请求中，数据可以以多种格式进行传输，包括表单数据、JSON数据、XML数据等。在Flask中，可以通过请求对象的data属性来获取请求的数据。\n对于其他格式的数据，例如XML数据，则可以通过Flask提供的request.get_data()方法来获取整个请求体数据，然后使用相应的库来解析XML数据。这个根据类型去选择就可以\n4、是的，Flask默认会将模板文件放在templates目录下。当使用render_template函数时，需要传入文件名作为第一个参数，如果该文件在templates目录下，可以只传入文件名；如果文件不在templates目录下，需要指定文件的完整路径\n5、1、是的，理解是正确的\n2、在 if __name__ == &#39;__main__&#39;: 代码块中，调用 Flask 提供的 url_for() 函数，传入 hello() 函数作为参数。这将返回 /hello 路由对应的 URL。然后，将 URL 打印到控制台。这个对待吗问题统一解释，你就明白核心逻辑了。继续加油，多多实践。\n\n因此，这段代码会在以下情况下执行：\n当你运行这个 Flask 应用程序时，它将执行 if __name__ == &#39;__main__&#39;: 代码块中的代码。\n当用户访问 /hello 路由时，Flask 将调用 hello() 函数，执行其中的代码。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1686194145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1090373,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a3/45/8e9c6a69.jpg","nickname":"因为有你心存感激","note":"","ucode":"18B83F8C346453","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":654462,"discussion_content":"flask 怎么获取路由参数？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1732770898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}