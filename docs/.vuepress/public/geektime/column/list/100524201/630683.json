{"id":630683,"title":"02｜顺序表（上）：如何实现快速地随机访问？","content":"<p>你好，我是王健伟。</p><p>今天来聊一聊最基础的数据结构——“顺序表”。</p><p>在聊顺序表之前，首先我们要引入“线性结构”和“线性表”的概念。</p><h2>线性结构与线性表</h2><p><strong>线性结构</strong>是一种数据结构，其中保存的数据像一条线一样按顺序排列，数据之间是一对一的关系，也就是每个数据只有一个直接前趋<span class=\"reference\">（也可写做前驱）</span>和一个直接后继。不过，第一个数据没有前趋，最后一个数据没有后继，这意味着数据之间只有简单的前后<span class=\"reference\">（相邻）</span>次序关系。你也可以想象一下排队的情景，这就是线性结构。</p><p><strong>线性表</strong>是<strong>一种线性结构</strong>，是具有相同数据类型的n<span class=\"reference\">（n≥0）</span>个数据的有限序列，其中n是线性表的长度。其一般表示为（$a_{1}$,$a_{2}$,…$a_{i}$,$a_{i+1}$,…,$a_{n}$）。当n=0时，线性表就是一个空表。</p><p>在一般表示中，$a_{1}$是第一个数据，$a_{i}$是第i个数据，$a_{n}$是最后一个数据，这表示线性表中的数据是有先后次序的。除$a_{1}$外，每个数据有且仅有一个直接前趋数据，除$a_{n}$外，每个数据有且仅有一个直接后继数据。</p><!-- [[[read_end]]] --><p>这表示什么呢？我们可以发现，除第一个数据外总有办法根据当前数据找到其直接前趋，除最后一个数据外，总有办法根据当前数据找到其直接后继。要注意的是，每个数据所占用的存储空间大小相同。数组、链表、栈、队列等都属于线性表中的一种，或者你也可以理解成，<strong>数组、链表、栈、队列等都可以用<strong><strong>来</strong></strong>表达线性表</strong>。</p><p>比如图1，就是一个线性表。</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/86/b7bd7c89fc05937c00295ec1d54cb786.jpg?wh=1719x239\" alt=\"图片\" title=\"图1&nbsp; 线性表\"></p><p>这里我们延伸一下，与线性表的概念相对应的，还有<strong>非线性表</strong>。非线性表里的数据之间并不是简单的一对一关系，可能是一对多或多对多关系。树、图、堆等都属于非线性表中的一种，后面课节都会进行详细讲解。</p><p><img src=\"https://static001.geekbang.org/resource/image/83/6d/83495116bd6cd24305cc19e14e15576d.jpg?wh=1719x563\" alt=\"图片\" title=\"图2&nbsp; 树（非线性表）[br]一种一对多关系的非线性表，比如a1有两个后继节点a2、a3等\"></p><p>话说回来，在有了一种数据结构之后<span class=\"reference\">（包括线性表、非线性表）</span>，一般还需要实现在该数据结构上的一些基本操作，才能够方便地操作其中的数据。我们习惯将这些基本操作封装成函数或接口，方便自己或团队其他成员使用，这样不但可以避免重复的工作，更可以在很大程度上减少对数据操作出错的可能性。</p><p>线性表上常用的操作有这么几种。</p><ul>\n<li>创建线性表后对数据进行初始化</li>\n<li>销毁线性表前对资源进行释放</li>\n<li>按位置插入元素</li>\n<li>按位置删除元素</li>\n<li>按位置获取元素值</li>\n<li>按值查找线性表元素，返回该值在线性表中第一次出现的位置</li>\n<li>显示线性表中所有元素值</li>\n<li>获取线性表长度</li>\n</ul><p>接下来，我们就尝试实现这些操作。</p><h2>线性表的顺序存储</h2><p><strong>线性表的顺序存储</strong>指的是用一段连续的内存空间依次存储线性表中的数据，而数组正好具有内存空间连续的特性，因此，线性表的顺序存储是<strong>采用一维数组</strong>来实现的<span class=\"reference\">（回忆一下STL中vector容器也是用一段连续的内存空间来保存数据）</span>，采用一维数组实现的线性表也叫做<strong>顺序表</strong>。</p><p>我们看一下一维数组的存储结构。</p><p><img src=\"https://static001.geekbang.org/resource/image/a9/03/a9939010c91cf116322b511879efb203.jpg?wh=1719x609\" alt=\"图片\" title=\"图3&nbsp; 一维数组的存储结构\"></p><p>在图3中，一维数组<span class=\"reference\">（简称数组）</span>的下标从0开始，最大的数组下标为n，这意味着整个数组能容纳n+1个元素。这里要注意，在实现顺序表时，有两点需要说明。</p><ul>\n<li><strong>随机访问</strong></li>\n</ul><p>因为内存空间连续且数据类型相同，因此，随机访问数组中的任意元素<span class=\"reference\">（数据）</span>就非常方便快捷。</p><p>那么什么是随机访问呢？它指的是通过数组首地址和所给元素下标就可以在最短的时间内找到任意的数组元素。另外，想一想，通过下标随机访问数组元素的时间复杂度是多少呢？</p><p>是的，O(1)。</p><p>我们再来说说随机访问的地址又是怎么得到的。比如有一个长度为10的整型数组a，首地址为是1000，那么这个数组中第3个元素，也就是数组元素a[2]的地址，就可以直接用“a[i]地址=数组首地址+下标*sizeof(整型)”得到。</p><p>举个例子，如果假设整型数据所占用的内存空间是4字节，那么数组元素a[2]的地址是1000+2*4=1008。同理，数组元素a[5]的地址是1000+5*4=1020。</p><ul>\n<li><strong>插入或删除元素</strong></li>\n</ul><p>在顺序存储中，插入或者删除元素可能会碰到的情况就是要求数据之间彼此要紧挨在一起，数据之间不允许有空位，也就是说必须保证数据之间内存的连续性，所以当向数组中插入元素或删除数组中元素时，必须要做大量的数据搬运工作，所以插入或删除元素的效率会变得很低。这一点，你在后续进行代码实现的时候，会体会得更加深刻。</p><p>顺序表的第一种实现方式：<strong>为一维数组静态分配内存</strong>。比如，定义如下的SeqList结构来表示顺序表。</p><pre><code class=\"language-plain\">typedef struct&nbsp;\n{\n\tint&nbsp; m_data[10]; //静态数组来保存顺序表中的元素，一共10个位置（最多存入10个元素）\n\tint&nbsp; m_length;&nbsp; &nbsp;//顺序表当前实际长度（当前顺序表中已经存入了多少个元素）\n}SeqList;&nbsp;\n</code></pre><p>上述代码中，数组m_data的大小在编译时就已经确定，后续无法改变，这意味着该顺序表最多只能保存10个元素。</p><p>顺序表的第二种实现方式：<strong>为一维数组动态分配内存</strong>。比如，定义如下的SeqList结构来表示顺序表。</p><pre><code class=\"language-plain\">typedef struct&nbsp;\n{\n\tint* m_data;&nbsp; &nbsp; //顺序表中的元素保存在m_data所指向的动态数组内存中\n\tint m_length;&nbsp; &nbsp;//顺序表当前实际长度\nint m_maxsize;&nbsp; //动态数组最大容量，因动态数组可以扩容，因此要记录该值\n}SeqList;\n</code></pre><p>上述代码中，数组m_data的大小事先是不确定的，在程序执行过程中，用new的方式为m_data指针<span class=\"reference\">（一维数组）</span>分配一定数量的内存。当顺序表中数据元素逐渐增多，当前分配的内存无法容纳时，可以用new新开辟一块更大的内存，并将当前内存中的数据拷贝到新内存中去，同时把旧的内存释放掉。</p><p>通过静态分配内存方式与动态分配内存方式实现顺序表的过程，在程序代码上大同小异，但后者代码实现起来要更加复杂一些。因此，后续我会特意采用后者的代码编写方式来实现顺序表。</p><h2>顺序表的基础操作</h2><p>好了，了解整体框架之后，下面我们就来看一看顺序表的具体实现代码，包括基本框架、插入、删除、获取以及其它的一些常用操作。</p><h3>顺序表的类定义、初始化和释放操作</h3><p>首先，要把顺序表相关的类的基本框架实现出来。这里的难度不大，代码中的注释也已经非常详细，你可以仔细看一下。</p><pre><code class=\"language-plain\">#define InitSize 10&nbsp; &nbsp;//动态数组的初始尺寸\n#define IncSize&nbsp; 5&nbsp; &nbsp; //当动态数组存满数据后每次扩容所能多保存的数据元素数量\n\t\ntemplate &lt;typename T&gt; //T代表数组中元素的类型\nclass SeqList\n{\npublic:\n\tSeqList(int length=InitSize); //构造函数，参数可以有默认值\n\t~SeqList();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//析构函数\n\t\npublic:\n\tbool ListInsert(int i, const T&amp; e);&nbsp; //在第i个位置插入指定元素e\n\tbool ListDelete(int i);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //删除第i个位置的元素\n\tbool GetElem(int i, T&amp; e);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//获得第i个位置的元素值\n\tint&nbsp; LocateElem(const T &amp;e);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//按元素值查找其在顺序表中第一次出现的位置\n\t\t\n\tvoid DispList();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//输出顺序表中的所有元素\n\tint&nbsp; ListLength();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//获取顺序表的长度\n\tvoid ReverseList();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //翻转顺序表\t\t\n\t\t\nprivate:\n\tvoid IncreaseSize();&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//当顺序表存满数据后可以调用此函数为顺序表扩容\n\t\nprivate:\n\tT*&nbsp; m_data;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//存放顺序表中的元素\n\tint m_length;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//顺序表当前长度（当前有几个元素）\n\tint m_maxsize;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; //动态数组最大容量\n};\n\t\n//通过构造函数对顺序表进行初始化\ntemplate &lt;typename T&gt;\nSeqList&lt;T&gt;::SeqList(int length)\n{\n\tm_data = new T[length]; //为一维数组动态分配内存\n\tm_length = 0;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;//顺序表当前实际长度为0，表示还未向其中存入任何数据元素\n\tm_maxsize = length;&nbsp; &nbsp; &nbsp;//顺序表最多可以存储m_maxsize个数据元素\n}\n\t\n//通过析构函数对顺序表进行资源释放\ntemplate &lt;typename T&gt;\nSeqList&lt;T&gt;::~SeqList()\n{\n\tdelete[] m_data;\n\tm_length = 0; //非必须\n}\n</code></pre><p>注意，在main主函数中，加入下面的代码就可以创建一个初始大小为10的顺序表对象了。</p><pre><code class=\"language-plain\">SeqList&lt;int&gt; seqobj(10);\n</code></pre><h3>顺序表元素插入操作</h3><p>还记得我们刚刚说的顺序存储的特点吗？因为顺序表中每个数据元素在内存中是连续存储的，所以如果要在某个位置插入一个元素，则需要把原来该位置的元素依次向后移动。如图4所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/b6/fc42a4638dbe2b757befddeb6ece13b6.jpg?wh=1719x413\" alt=\"图片\" title=\"图4&nbsp; 顺序表插入元素10前后的元素位置对比图\"></p><p>仔细观察，如果我要将元素10插入到顺序表的第3个位置，为了保证元素之间内存的连续性，就需要将原来第3个位置以及第3个位置之后的所有元素依次向后移动1个位置，为新插入的元素腾出地方。</p><p>那么这里就有几点需要考虑的问题了，我们一个一个来说。</p><ul>\n<li><strong>数组下标是多少？</strong></li>\n</ul><p>这里所谈的插入位置是从编号1开始的，而数组下标是从0开始的，所以在写代码将插入的位置转换成数组下标时，需要减1。</p><ul>\n<li><strong>先从谁开始移动呢？</strong></li>\n</ul><p>在移动3、4、5这几个元素时，需要先把元素5移动到第6个位置，再把元素4移动到第5个位置，最后把元素3移动到第4个位置。也就是先从数组中最后一个元素开始依次向后移动。如果先把元素3移动到第4个位置了，那么就会把原来第4个位置的元素4直接覆盖掉。</p><ul>\n<li><strong>插入位置和原有长度有什么关系吗？</strong></li>\n</ul><p>如果在第3个位置插入元素，则顺序表中必须至少要有2个元素。试想一下，如果顺序表为空或只有1个元素，那么它的第2个位置肯定是空的。因为顺序表中各个元素的内存必须是连续的，我们不可以隔着一个或者多个空位置向顺序表中插入元素。</p><ul>\n<li><strong>最后，</strong><strong>如果顺序表已经满了，则不应该允许插入数据。</strong></li>\n</ul><p>理清头绪之后，我们看一下插入操作ListInsert的实现代码。</p><pre><code class=\"language-plain\">//在第i个位置（位置编号从1开始）插入指定元素e，时间复杂度：O(n)，时间开销主要源于元素的移动\ntemplate &lt;typename T&gt;\nbool SeqList&lt;T&gt;::ListInsert(int i, const T&amp; e)\n{\n\t//如果顺序表已经存满了数据，则不允许再插入新数据了\n\tif (m_length &gt;= m_maxsize)\n\t{\n\t\tcout &lt;&lt; \"顺序表已满，不能再进行插入操作了!\" &lt;&lt; endl;\n\t\treturn false;\n\t}\n\t\n\t//判断插入位置i是否合法，i的合法值应该是1到m_length+1之间\n\tif(i &lt; 1 || i &gt; (m_length+1))\n\t{\n\t\tcout &lt;&lt; \"元素\" &lt;&lt; e &lt;&lt;\"插入的位置\" &lt;&lt; i &lt;&lt; \"不合法，合法的位置是1到\" &lt;&lt; m_length+1 &lt;&lt; \"之间!\" &lt;&lt; endl;\n\t\treturn false;\n\t}\n\t\t\n\t//从最后一个元素开始向前遍历到要插入新元素的第i个位置，分别将这些位置中原有的元素向后移动一个位置\n\tfor (int j = m_length; j &gt;= i; --j)&nbsp;\n\t{\n\t\tm_data[j] = m_data[j-1];\n\t}\n\tm_data[i-1] = e;&nbsp; &nbsp;//在指定位置i处插入元素e，因为数组下标从0开始，所以这里用i-1表示插入位置所对应的数组下标\n\tcout &lt;&lt; \"成功在位置为\" &lt;&lt; i &lt;&lt; \"处插入元素\" &lt;&lt; m_data[i - 1] &lt;&lt; \"!\" &lt;&lt; endl;\n\tm_length++;&nbsp; &nbsp; &nbsp; &nbsp; //实际表长+1\n\treturn true;\n\t}\n</code></pre><p>在main主函数中，可以继续增加代码测试元素插入操作。</p><pre><code class=\"language-plain\">seqobj.ListInsert(1, 15);\nseqobj.ListInsert(2, 10);\nseqobj.ListInsert(30, 8);\n</code></pre><p>执行结果如下，可以看到，前两个元素插入成功，第三个元素插入失败并给出提示。</p><p><img src=\"https://static001.geekbang.org/resource/image/34/09/34391c8a3214c48b0d08fd3a8eb73209.jpg?wh=1920x277\" alt=\"图片\"></p><p>接下来，我们分析一下ListInsert的时间复杂度。只需要关注for循环的执行次数与问题规模n的关系，问题规模n在这里指的是顺序表的当前长度m_length。一共分为3种情况。</p><ul>\n<li><strong>最好情况时间复杂度</strong></li>\n</ul><p>如果将元素插入到顺序表的尾部，则其他已有的顺序表中元素都不需要移动，for循环一次都不会执行，这是最好情况时间复杂度O(1)。</p><ul>\n<li><strong>最坏情况时间复杂度</strong></li>\n</ul><p>如果将元素插入到顺序表的头部，则其他已有的顺序表中所有元素都需要依次后移，for循环执行的次数就会是顺序表中已有元素的个数，这是最坏情况时间复杂度O(n)。</p><ul>\n<li><strong>平均情况时间复杂度</strong></li>\n</ul><p>因为元素e可以插入1到m_length+1之间的任何一个位置，其中m_length代表问题规模n，即m_length等于n，所以如果假设元素e插入到任何一个位置的概率相同，那么插入到位置1，2，…，m_length+1的概率就都为$\\frac{1}{n+1}$。</p><p>我们试想一下，如果元素e要插入到第1个位置，则需要把后面的n个元素依次后移，也就是for循环会执行n次；如果元素e要插入到第2个位置则需要把后面的n-1个元素依次后移，也就是for循环会执行n-1次…以此类推，如果要插入到最后的位置<span class=\"reference\">（第n+1个位置）</span>，则for循环执行0次。</p><p>把每种情况下循环的次数累加起来，再除以n+1，就可以得到数组中元素后移次数的平均值<span class=\"reference\">（平均循环次数）</span>：后移次数平均值=$\\frac{1+2+3+…+n}{n+1}$。</p><p><img src=\"https://static001.geekbang.org/resource/image/52/a3/526142fb35231e2726ca83af2f11bca3.jpeg?wh=1920x398\" alt=\"图片\"></p><p>因为大O时间复杂度表示法中，系数可以忽略掉，所以平均情况时间复杂度为O(n)。</p><p>这个分析有什么用呢？当然，如果将新元素插入到顺序表中间的某个位置，若顺序表中元素没有顺序要求，则可以通过将被插入位置原有元素移动到顺序表最后位置，然后把新元素放到被插入位置的方法来避免顺序表中的元素被大量移动。此时的时间复杂度就为O(1)，相关的代码你可以尝试自行实现。</p><h2>小结</h2><p>这节课，我们首先引入了“线性结构”与“线性表”这两个基本概念，接着讲述了<strong>线性表<strong><strong>的</strong></strong>顺序存储</strong>——“顺序表”。你可以把顺序表理解为是线性表的一种。</p><p>我们实现了顺序表的基本定义、初始化、释放操作代码，向顺序表中插入元素操作的代码并分析了插入操作的时间复杂度。你可以看到，我在实现插入元素操作的代码时，加入了判断顺序表是否已满以及插入的位置是否合法的代码。虽然这些判断代码并不是必须的，但却可以增加健壮性，不要忘记，<strong>健壮性是一个好算法的设计要求之一。</strong></p><p>最后，针对分析算法的时间复杂度这件事，我认为并非是必须的，但如果能做到对算法的时间复杂度心中有数，甚至能够通过改进算法的实现来进一步降低算法的时间复杂度，也能够让你后续的代码编写能力更上一层楼。不过，如果你有面试的需求，那么一些经典算法的时间复杂度还是要尽可能的去理解和记忆。</p><h2>归纳思考</h2><p>你可以尝试编写代码，实现一个时间复杂度为O(1)的新的顺序表插入操作：要求将被插入位置原有元素移动到顺序表最后的位置，并把新元素放到被插入位置。</p><p>欢迎你在留言区和我互动。如果觉得有所收获，也可以分享给更多的朋友一起学习。我们下一讲见！</p>","neighbors":{"left":{"article_title":"01｜编程环境：工欲善其事，必先利其器","id":629677},"right":{"article_title":"03｜顺序表（下）：常用操作合集与复杂度分析","id":631382}},"comments":[{"had_liked":false,"id":368520,"user_name":"KuangXiang","can_delete":false,"product_type":"c1","uid":1104356,"ip_address":"广东","ucode":"BEEB53A49BA695","user_header":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","comment_is_top":true,"comment_ctime":1676423846,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"每节的完整实现代码看这里：https:&#47;&#47;gitee.com&#47;jianw_wang&#47;geektime_cpp_dsa&#47;tree&#47;master","like_count":4,"discussions":[{"author":{"id":1165817,"avatar":"https://static001.geekbang.org/account/avatar/00/11/c9/f9/39492855.jpg","nickname":"阿阳","note":"","ucode":"20A35FB86B1C5C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605072,"discussion_content":"给力，给力，就需要这种能落地实现的代码。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1676597003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368537,"user_name":"徐石头","can_delete":false,"product_type":"c1","uid":1035885,"ip_address":"湖南","ucode":"D8FA8A64FB7E33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/6d/530df0dd.jpg","comment_is_top":false,"comment_ctime":1676430596,"is_pvip":true,"replies":[{"id":134216,"content":"不会C++问题不大，根据课程讲的内容，用其他语言实现个8、9成绝无问题，这也是这门课程的一个重要特点—理论知识和文字描述都是为写代码服务的。只要你看懂了理论知识，用其他语言就是可以写出代码。","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1676432095,"ip_address":"广东","comment_id":368537,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"不会C++，写了Go版本，请斧正\nhttps:&#47;&#47;github.com&#47;xushuhui&#47;algorithm-and-data-structure&#47;blob&#47;master&#47;datastructure&#47;array.go#L35","like_count":2,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":604796,"discussion_content":"不会C++问题不大，根据课程讲的内容，用其他语言实现个8、9成绝无问题，这也是这门课程的一个重要特点—理论知识和文字描述都是为写代码服务的。只要你看懂了理论知识，用其他语言就是可以写出代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676432096,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370790,"user_name":"wu526","can_delete":false,"product_type":"c1","uid":1022129,"ip_address":"上海","ucode":"69282EB175B48E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/98/b1/f89a84d0.jpg","comment_is_top":false,"comment_ctime":1679278063,"is_pvip":false,"replies":[{"id":135300,"content":"类模板和普通类不一样，一般在头文件中要包含整个类模板的实现体。因为类模板要实例化成具体类，其实现体部分对于其他源文件必须可见。","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1679320855,"ip_address":"广东","comment_id":370790,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"老师，我现在想把声明放在.h 中, 实现放在 .cpp 中, 但这样就无法运行了，visual studio 是需要进行什么设置吗","like_count":1,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609980,"discussion_content":"类模板和普通类不一样，一般在头文件中要包含整个类模板的实现体。因为类模板要实例化成具体类，其实现体部分对于其他源文件必须可见。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679320855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368798,"user_name":"阿阳","can_delete":false,"product_type":"c1","uid":1165817,"ip_address":"江苏","ucode":"20A35FB86B1C5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/c9/f9/39492855.jpg","comment_is_top":false,"comment_ctime":1676725245,"is_pvip":false,"replies":[{"id":134321,"content":"😂😂","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1676769660,"ip_address":"广东","comment_id":368798,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"实现一个时间复杂度为 O(1) 的新的顺序表插入操作:\ntemplate &lt;typename T&gt;\nbool SeqList&lt;T&gt;::ListInsert2(int i, const T&amp; e) {\n    &#47;&#47; 如果顺序表已经存满了数据，则不允许再插入新数据了\n    if (m_length &gt;= m_maxsize) {\n        cout &lt;&lt; &quot;顺序表已满，不能再进行插入操作了！&quot; &lt;&lt; endl;\n        return false;\n    }\n\n    &#47;&#47; 判断插入位置i是否合法，i的合法值应该是1到m_length+1之间\n    if (i &lt; 1 || i &gt;(m_length + 1)) {\n        cout &lt;&lt; &quot;元素&quot; &lt;&lt; e &lt;&lt; &quot;插入位置&quot; &lt;&lt; i &lt;&lt; &quot;不合法，合法的位置是1到&quot; &lt;&lt; m_length + 1 &lt;&lt; &quot;之间！&quot; &lt;&lt; endl;\n        return false;\n    }\n    &#47;&#47; 将插入位置i原有元素移动到顺序表最后的位置\n    m_data[m_length] = m_data[i - 1];\n    m_data[i - 1] = e;\n    cout &lt;&lt; &quot;成功在位置为 &quot; &lt;&lt; i &lt;&lt; &quot; 处插入元素&quot; &lt;&lt; m_data[i - 1] &lt;&lt; &quot;!&quot; &lt;&lt; endl;\n    m_length++;     &#47;&#47; 实际表长+1\n    return true;\n\n}\n","like_count":1,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605580,"discussion_content":"😂😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676769660,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2978448,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/FgM8EEM4fd37xmN2YnbibMrMjHrQfXjvZhk7bGWSgblkRHNrABpm2hVTt4orm2kGDGxd52fl3MibbLo9AaQM68qA/132","nickname":"Geek_687234","note":"","ucode":"280CCC66F9C6FB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606156,"discussion_content":"顺序就不一致了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1676974106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":368703,"user_name":"徐石头","can_delete":false,"product_type":"c1","uid":1035885,"ip_address":"湖南","ucode":"D8FA8A64FB7E33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ce/6d/530df0dd.jpg","comment_is_top":false,"comment_ctime":1676600639,"is_pvip":true,"replies":[{"id":134285,"content":"没明白你的疑问，可以提供出代码来一起探讨。","user_name":"作者回复","user_name_real":"编辑","uid":1104356,"ctime":1676611287,"ip_address":"广东","comment_id":368703,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"为什么位置不直接用数组索引，在新增、删除、随机访问都增加了一次运算指令，数组是底层数据结构，性能要尽可能优化，运算指令没有必要。另外对调用者如果不看注释或者源码不会明白理解位置+1，不符合默认编程约定，容易被误用造成bug。","like_count":0,"discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605098,"discussion_content":"没明白你的疑问，可以提供出代码来一起探讨。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676611287,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035885,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ce/6d/530df0dd.jpg","nickname":"徐石头","note":"","ucode":"D8FA8A64FB7E33","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":605432,"discussion_content":"注释中写到 // 在第i个位置（位置编号从1开始）\nListInsert 方法 m_data[i - 1] = e;\nGetElem 方法 e = m_data[i - 1];\nLocateElem 方法 return i + 1; \n这三个方法都增加了一次运算指令，位置为什么从1开始而不是从0开始？不符合默认编程约定，容易被误用造成bug。对调用者来说如果不看注释或者源码不会明白位置从1开始，增加了理解负担。数组是底层数据结构，性能尽可能优化，运算指令没有必要。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676625098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"湖南","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1104356,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/e4/791d0f5e.jpg","nickname":"KuangXiang","note":"","ucode":"BEEB53A49BA695","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1035885,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ce/6d/530df0dd.jpg","nickname":"徐石头","note":"","ucode":"D8FA8A64FB7E33","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":608626,"discussion_content":"刚看到这个，回复较晚抱歉。对于接口的调用者，是否知道位置是从0开始，是个问题，我不能假设调用者知道这件事（因为不保证接口实现者和使用者是同一个人）。我更倾向大家一般会认为位置是从1开始这种思维，所以我增加了注释说明以防止误用错用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678546774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":605432,"ip_address":"广东","group_id":0},"score":608626,"extra":""}]}]},{"had_liked":false,"id":395336,"user_name":"camel","can_delete":false,"product_type":"c1","uid":1117530,"ip_address":"浙江","ucode":"D0D698CD74388F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0d/5a/e60f4125.jpg","comment_is_top":false,"comment_ctime":1730274481,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"有个疑问：表这个概念不就是表示线性结构吗？印象中“线性表”就对应着List。 “非线性表”这个概念看着奇奇怪怪的","like_count":0},{"had_liked":false,"id":392794,"user_name":"Fang","can_delete":false,"product_type":"c1","uid":3540228,"ip_address":"上海","ucode":"6F026565387364","user_header":"https://static001.geekbang.org/account/avatar/00/36/05/04/8deca125.jpg","comment_is_top":false,"comment_ctime":1721803891,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100524201,"comment_content":"O(1)  O(n)  O(n)","like_count":0}]}