{"id":9369,"title":"76 | 程序员练级攻略：软件设计","content":"<p>你好，我是陈皓，网名左耳朵耗子。</p><p>学习软件设计的方法、理念、范式和模式，是让你从一个程序员通向工程师的必备技能。如果你不懂这些设计方法，那么你将无法做出优质的软件。这就好像写作文一样，文章人人都能写，但是能写得有条理，有章法，有血有肉，就不简单了。软件开发也一样，实现功能，做出来并不难，但是要做漂亮，做优雅，就非常不容易了。</p><p>Linus说过，这世界程序员之所有高下之分，最大的区别就是程序员的“品味”不一样。有品位的程序员和没有品位的程序员写出来的代码，做出来的软件，差距非常大。<strong>所以，如果你想成为一名优秀的程序员，软件设计定是你的必修课</strong>。</p><p>然而，软件设计这个事，并不是一朝一夕就能学会的，也不是别人能把你教会的，很多东西需要你自己用实践、用时间、用错误、用教训、用痛苦才能真正体会其中的精髓。所以，除了学习理论知识外，你还需要大量的工程实践，然后每过一段时间就把这些设计的东西重新回炉一下。你会发现这些软件设计的东西，就像饮茶一样，一开始是苦的，然后慢慢回甘，最终你会喝出真正的滋味。</p><p><strong>要学好这些软件开发和设计的方法，你真的需要磨练和苦行，反复咀嚼，反复推敲，在实践和理论中螺旋式地学习，才能真正掌握。</strong> 所以，你需要有足够的耐心和恒心。</p><!-- [[[read_end]]] --><h1>编程范式</h1><p>学习编程范式可以让你明白编程的本质和各种语言的编程方式。因此，我推荐以下一些资料，以帮助你系统化地学习和理解。</p><ul>\n<li>\n<p>一个是我在极客时间写的《编程范式游记》系列文章，目录如下。</p>\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/301\">编程范式游记（1）- 起源</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/303\">编程范式游记（2）- 泛型编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2017\">编程范式游记（3）- 类型系统和泛型的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2711\">编程范式游记（4）- 函数式编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2723\">编程范式游记（5）- 修饰器模式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2729\">编程范式游记（6）- 面向对象编程</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2741\">编程范式游记（7）- 基于原型的编程范式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2748\">编程范式游记（8）- Go 语言的委托模式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2751\">编程范式游记（9）- 编程的本质</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2752\">编程范式游记（10）- 逻辑编程范式</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/2754\">编程范式游记（11）- 程序世界里的编程范式</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://en.wikipedia.org/wiki/Programming_paradigm\">Wikipedia: Programming paradigm</a> ，维基百科上有一个编程范式的页面，顺着这个页面看下去，你可以看到很多很多有用的和编程相关的知识。这些东西对你的编程技能的提高会非常非常有帮助。</p>\n</li>\n<li>\n<p><a href=\"https://www.ybrikman.com/writing/2014/04/09/six-programming-paradigms-that-will/\">Six programming paradigms that will change how you think about coding</a>，中文翻译版为 <a href=\"https://my.oschina.net/editorial-story/blog/890965\">六个编程范型将改变你对编程的看法</a>。这篇文章讲了默认支持并发（Concurrent by default）、依赖类型（Dependent types）、连接性语言（Concatenative languages）、声明式编程（Declarative programming）、符号式编程（Symbolic programming）、基于知识的编程（Knowledge-based programming）等六种不太常见的编程范式，并结合了一些你没怎么听说过的语言来分别进行讲述。</p>\n<p>比如在讲Concatenative languages时，以Forth、cat和joy三种语言为例讲述这一编程范式背后的思想——语言中的所有内容都是一个函数，用于将数据推送到堆栈或从堆栈弹出数据；程序几乎完全通过功能组合来构建（concatenation is composition）。作者认为，这些编程范式背后的思想十分有魅力，能够改变对编程的思考。我看完此文，对此也深信不疑。虽然这些语言和编程范式不常用到，但确实能在思想层面给予人很大的启发。这也是我推荐此文的目的。</p>\n</li>\n<li>\n<p><a href=\"https://www.info.ucl.ac.be/~pvr/VanRoyChapter.pdf\">Programming Paradigms for Dummies: What Every Programmer Should Know</a> ，这篇文章的作者彼得·范·罗伊（Peter Van Roy）是比利时鲁汶大学的计算机科学教师。他在这篇文章里分析了编程语言在历史上的演进，有哪些典型的、值得研究的案例，里面体现了哪些值得学习的范式。</p>\n<p>比如，在分布式编程领域，他提到了Erlang、E、Distributed Oz和Didactic Oz这四种编程语言。虽然它们都是分布式编程语言，但各有特色，各自解决了不同的问题。通过这篇文章能学到不少在设计编程语言时要考虑的问题，让你重新审视自己所使用的编程语言应该怎样用才能用好，有什么局限性，这些局限性能否被克服等。</p>\n</li>\n<li>\n<p><a href=\"http://open.163.com/special/opencourse/paradigms.html\">斯坦福大学公开课：编程范式</a>，这是一门比较基础且很详细的课程，适合学习编程语言的初学者。它通过讲述C、C++、并发编程、Scheme、Python这5门语言，介绍了它们各自不同的编程范式。以C语言为例，它解释了C语言的基本要素，如指针、内存分配、堆、C风格的字符串等，并解释了为什么C语言会在泛型编程、多态等方面有局限性。通过学习这门课程，你会对一些常用的编程范式有所了解。</p>\n</li>\n</ul><h1>一些软件设计的相关原则</h1><ul>\n<li>\n<p><strong><a href=\"http://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">Don’t Repeat Yourself (DRY) </a></strong> ，DRY是一个最简单的法则，也是最容易被理解的。但它也可能是最难被应用的（因为要做到这样，我们需要在泛型设计上做相当的努力，这并不是一件容易的事）。它意味着，当在两个或多个地方发现一些相似代码的时候，我们需要把它们的共性抽象出来形成一个唯一的新方法，并且改变现有地方的代码让它们以一些合适的参数调用这个新的方法。</p>\n</li>\n<li>\n<p><strong><a href=\"http://en.wikipedia.org/wiki/KISS_principle\">Keep It Simple, Stupid(KISS)</a></strong> ，KISS原则在设计上可能最被推崇，在家装设计、界面设计和操作设计上，复杂的东西越来越被众人所鄙视了，而简单的东西越来越被人所认可。宜家（IKEA）简约、高效的家居设计和生产思路；微软（Microsoft）“所见即所得”的理念；谷歌（Google）简约、直接的商业风格，无一例外地遵循了“KISS”原则。也正是“KISS”原则，成就了这些看似神奇的商业经典。而苹果公司的iPhone和iPad将这个原则实践到了极至。</p>\n</li>\n<li>\n<p><strong>Program to an interface, not an implementation</strong>，这是设计模式中最根本的哲学，注重接口，而不是实现，依赖接口，而不是实现。接口是抽象是稳定的，实现则是多种多样的。在面向对象的S.O.L.I.D原则中会提到我们的依赖倒置原则，就是这个原则的另一种样子。还有一条原则叫 Composition over inheritance（喜欢组合而不是继承），这两条是那23个经典设计模式中的设计原则。</p>\n</li>\n<li>\n<p><strong><a href=\"http://en.wikipedia.org/wiki/You_Ain%27t_Gonna_Need_It\">You Ain’t Gonna Need It (YAGNI)</a></strong> ，这个原则简而言之为——只考虑和设计必须的功能，避免过度设计。只实现目前需要的功能，在以后你需要更多功能时，可以再进行添加。如无必要，勿增复杂性。软件开发是一场trade-off的博弈。</p>\n</li>\n<li>\n<p><strong><a href=\"http://en.wikipedia.org/wiki/Principle_of_Least_Knowledge\">Law of Demeter</a></strong>，迪米特法则(Law of Demeter)，又称“最少知识原则”（Principle of Least Knowledge），其来源于1987年荷兰大学的一个叫做Demeter的项目。克雷格·拉尔曼（Craig Larman）把Law of Demeter又称作“不要和陌生人说话”。在《程序员修炼之道》中讲LoD的那一章将其叫作“解耦合与迪米特法则”。</p>\n<p>关于迪米特法则有一些很形象的比喻：1) 如果你想让你的狗跑的话，你会对狗狗说还是对四条狗腿说？2) 如果你去店里买东西，你会把钱交给店员，还是会把钱包交给店员让他自己拿？和狗的四肢说话？让店员自己从钱包里拿钱？这听起来有点儿荒唐，不过在我们的代码里这几乎是见怪不怪的事情了。对于LoD，正式的表述如下：</p>\n<p>对于对象 ‘O’ 中一个方法’M’，M应该只能够访问以下对象中的方法：</p>\n<ol>\n<li>对象O；</li>\n<li>与O直接相关的Component Object；</li>\n<li>由方法M创建或者实例化的对象；</li>\n<li>作为方法M的参数的对象。</li>\n</ol>\n</li>\n<li>\n<p><strong><a href=\"<a href=\" http:=\"\" en.wikipedia.org=\"\" wiki=\"\" solid_(object-oriented_design\"=\"\">面向对象的S.O.L.I.D 原则</a>\"&gt;http://en.wikipedia.org/wiki/Solid_(object-oriented_design)</strong>：</p>\n<ul>\n<li><strong>SRP（Single Responsibility Principle）- 职责单一原则</strong>。关于单一职责原则，其核心的思想是：一个类，只做一件事，并把这件事做好，其只有一个引起它变化的原因。单一职责原则可以看作是低耦合、高内聚在面向对象原则上的引申，将职责定义为引起变化的原因，以提高内聚性来减少引起变化的原因。</li>\n</ul>\n<p>职责过多，可能引起它变化的原因就越多，这将导致职责依赖，相互之间就产生影响，从而极大地损伤其内聚性和耦合度。单一职责，通常意味着单一的功能，因此不要为一个模块实现过多的功能点，以保证实体只有一个引起它变化的原因。</p>\n<ul>\n<li>\n<p><strong> OCP（Open/Closed Principle）- 开闭原则</strong>。关于开放封闭原则，其核心的思想是：模块是可扩展的，而不可修改的。也就是说，对扩展是开放的，而对修改是封闭的。对扩展开放，意味着有新的需求或变化时，可以对现有代码进行扩展，以适应新的情况。对修改封闭，意味着类一旦设计完成，就可以独立完成其工作，而不要对类进行任何修改。</p>\n</li>\n<li>\n<p><strong>LSP（Liskov substitution principle）- 里氏代换原则</strong>。软件工程大师罗伯特·马丁（Robert C. Martin）把里氏代换原则最终简化为一句话：“Subtypes must be substitutable for their base types”。也就是，子类必须能够替换成它们的基类。即子类应该可以替换任何基类能够出现的地方，并且经过替换以后，代码还能正常工作。另外，不应该在代码中出现if/else之类对子类类型进行判断的条件。里氏替换原则LSP是使代码符合开闭原则的一个重要保证。正是由于子类型的可替换性才使得父类型的模块在无需修改的情况下就可以扩展。</p>\n</li>\n<li>\n<p><strong>ISP（Interface Segregation Principle ）- 接口隔离原则</strong>。接口隔离原则的意思是把功能实现在接口中，而不是类中，使用多个专门的接口比使用单一的总接口要好。举个例子，我们对电脑有不同的使用方式，比如：写作、通讯、看电影、打游戏、上网、编程、计算和数据存储等。</p>\n</li>\n</ul>\n<p>如果我们把这些功能都声明在电脑的抽象类里面，那么，我们的上网本、PC机、服务器和笔记本的实现类都要实现所有的这些接口，这就显得太复杂了。所以，我们可以把这些功能接口隔离开来，如工作学习接口、编程开发接口、上网娱乐接口、计算和数据服务接口，这样，我们的不同功能的电脑就可以有所选择地继承这些接口。</p>\n<ul>\n<li><strong>DIP（Dependency Inversion Principle）- 依赖倒置原则</strong>。高层模块不应该依赖于低层模块的实现，而是依赖于高层抽象。举个例子，墙面的开关不应该依赖于电灯的开关实现，而是应该依赖于一个抽象的开关的标准接口。这样，当我们扩展程序的时候，开关同样可以控制其它不同的灯，甚至不同的电器。也就是说，电灯和其它电器继承并实现我们的标准开关接口，而开关厂商就可以不需要关于其要控制什么样的设备，只需要关心那个标准的开关标准。这就是依赖倒置原则。</li>\n</ul>\n</li>\n<li>\n<p><a href=\"http://c2.com/cgi/wiki?CommonClosurePrinciple\">CCP（Common Closure Principle） - 共同封闭原则</a>，一个包中所有的类应该对同一种类型的变化关闭。一个变化影响一个包，便影响了包中所有的类。一个更简短的说法是：一起修改的类，应该组合在一起（同一个包里）。如果必须修改应用程序里的代码，那么我们希望所有的修改都发生在一个包里（修改关闭），而不是遍布在很多包里。</p>\n<p>CCP原则就是把因为某个同样的原因而需要修改的所有类组合进一个包里。如果两个类从物理上或者从概念上联系得非常紧密，它们通常一起发生改变，那么它们应该属于同一个包。CCP延伸了开闭原则（OCP）的“关闭”概念，当因为某个原因需要修改时，把需要修改的范围限制在一个最小范围内的包里。</p>\n</li>\n<li>\n<p><a href=\"http://c2.com/cgi/wiki?CommonReusePrinciple\">CRP（Common Reuse Principle）- 共同重用原则</a> ，包的所有类被一起重用。如果你重用了其中的一个类，就重用全部。换个说法是，没有被一起重用的类不应该组合在一起。CRP原则帮助我们决定哪些类应该被放到同一个包里。依赖一个包就是依赖这个包所包含的一切。</p>\n<p>当一个包发生了改变，并发布新的版本，使用这个包的所有用户都必须在新的包环境下验证他们的工作，即使被他们使用的部分没有发生任何改变。因为如果包中包含未被使用的类，即使用户不关心该类是否改变，但用户还是不得不升级该包并对原来的功能加以重新测试。CCP则让系统的维护者受益。CCP让包尽可能大（CCP原则加入功能相关的类），CRP则让包尽可能小（CRP原则剔除不使用的类）。它们的出发点不一样，但不相互冲突。</p>\n</li>\n<li>\n<p><a href=\"http://en.wikipedia.org/wiki/Hollywood_Principle\">好莱坞原则 - Hollywood Principle</a> ，好莱坞原则就是一句话——“don’t call us, we’ll call you.”。意思是，好莱坞的经纪人不希望你去联系他们，而是他们会在需要的时候来联系你。也就是说，所有的组件都是被动的，所有的组件初始化和调用都由容器负责。</p>\n<p>简单来讲，就是由容器控制程序之间的关系，而非传统实现中，由程序代码直接操控。这也就是所谓“控制反转”的概念所在：1) 不创建对象，而是描述创建对象的方式。2）在代码中，对象与服务没有直接联系，而是容器负责将这些联系在一起。控制权由应用代码中转到了外部容器，控制权的转移，是所谓反转。好莱坞原则就是<a href=\"http://en.wikipedia.org/wiki/Inversion_of_Control\">IoC（Inversion of Control）</a> 或<a href=\"https://martinfowler.com/articles/injection.html\">DI（Dependency Injection）</a>的基础原则。</p>\n</li>\n<li>\n<p><a href=\"http://en.wikipedia.org/wiki/Coupling_(computer_science)\">高内聚， 低耦合& - High Cohesion & Low/Loose coupling</a>，这个原则是UNIX操作系统设计的经典原则，把模块间的耦合降到最低，而努力让一个模块做到精益求精。内聚，指一个模块内各个元素彼此结合的紧密程度；耦合指一个软件结构内不同模块之间互连程度的度量。内聚意味着重用和独立，耦合意味着多米诺效应牵一发动全身。对于面向对象来说，你也可以看看马萨诸塞州戈登学院的面向对象课中的这一节讲义<a href=\"http://www.math-cs.gordon.edu/courses/cs211/lectures-2009/Cohesion,Coupling,MVC.pdf\">High Cohesion and Low Coupling</a>。</p>\n</li>\n<li>\n<p><a href=\"http://en.wikipedia.org/wiki/Convention_over_Configuration\">CoC（Convention over Configuration）- 惯例优于配置原则</a> ，简单点说，就是将一些公认的配置方式和信息作为内部缺省的规则来使用。例如，Hibernate的映射文件，如果约定字段名和类属性一致的话，基本上就可以不要这个配置文件了。你的应用只需要指定不convention的信息即可，从而减少了大量convention而又不得不花时间和精力啰里啰嗦的东东。</p>\n<p>配置文件在很多时候相当影响开发效率。Rails 中很少有配置文件（但不是没有，数据库连接就是一个配置文件）。Rails 的fans号称其开发效率是 Java 开发的 10 倍，估计就是这个原因。Maven也使用了CoC原则，当你执行 <code>mvn -compile</code> 命令的时候，不需要指定源文件放在什么地方，而编译以后的class文件放置在什么地方也没有指定，这就是CoC原则。</p>\n</li>\n<li>\n<p><a href=\"http://sulong.me/archives/99\">SoC (Separation of Concerns) - 关注点分离</a> ，SoC 是计算机科学中最重要的努力目标之一。这个原则，就是在软件开发中，通过各种手段，将问题的各个关注点分开。如果一个问题能分解为独立且较小的问题，就是相对较易解决的。问题太过于复杂，要解决问题需要关注的点太多，而程序员的能力是有限的，不能同时关注于问题的各个方面。</p>\n<p>正如程序员的记忆力相对于计算机知识来说那么有限一样，程序员解决问题的能力相对于要解决的问题的复杂性也是一样的非常有限。在我们分析问题的时候，如果我们把所有的东西混在一起讨论，那么就只会有一个结果——乱。实现关注点分离的方法主要有两种，一种是标准化，另一种是抽象与包装。标准化就是制定一套标准，让使用者都遵守它，将人们的行为统一起来，这样使用标准的人就不用担心别人会有很多种不同的实现，使自己的程序不能和别人的配合。</p>\n<p>就像是开发镙丝钉的人只专注于开发镙丝钉就行了，而不用关注镙帽是怎么生产的，反正镙帽和镙丝钉按照标准来就一定能合得上。不断地把程序的某些部分抽象并包装起来，也是实现关注点分离的好方法。一旦一个函数被抽象出来并实现了，那么使用函数的人就不用关心这个函数是如何实现的。同样的，一旦一个类被抽象并实现了，类的使用者也不用再关注于这个类的内部是如何实现的。诸如组件、分层、面向服务等这些概念都是在不同的层次上做抽象和包装，以使得使用者不用关心它的内部实现细节。</p>\n</li>\n<li>\n<p><a href=\"http://en.wikipedia.org/wiki/Design_by_contract\">DbC（Design by Contract）- 契约式设计</a> ，DbC的核心思想是对软件系统中的元素之间相互合作以及“责任”与“义务”的比喻。这种比喻从商业活动中“客户”与“供应商”达成“契约”而得来。如果在程序设计中一个模块提供了某种功能，那么它要：</p>\n<ul>\n<li>\n<p>期望所有调用它的客户模块都保证一定的进入条件：这就是模块的先验条件（客户的义务和供应商的权利，这样它就不用去处理不满足先验条件的情况）。</p>\n</li>\n<li>\n<p>保证退出时给出特定的属性：这就是模块的后验条件（供应商的义务，显然也是客户的权利）。</p>\n</li>\n<li>\n<p>在进入时假定，并在退出时保持一些特定的属性：不变式。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"http://c2.com/cgi/wiki?AcyclicDependenciesPrinciple\">ADP（Acyclic Dependencies Principle）- 无环依赖原则</a> ，包（或服务）之间的依赖结构必须是一个直接的无环图形，也就是说，在依赖结构中不允许出现环（循环依赖）。如果包的依赖形成了环状结构，怎么样打破这种循环依赖呢？</p>\n<p>有两种方法可以打破这种循环依赖关系：第一种方法是创建新的包，如果A、B、C形成环路依赖，那么把这些共同类抽出来放在一个新的包D里。这样就把C依赖A变成了C依赖D以及A依赖D，从而打破了循环依赖关系。第二种方法是使用DIP（依赖倒置原则）和ISP（接口分隔原则）设计原则。无环依赖原则（ADP）为我们解决包之间的关系耦合问题。在设计模块时，不能有循环依赖。</p>\n</li>\n</ul><h1>一些软件设计的读物</h1><ul>\n<li>\n<p>《<a href=\"https://book.douban.com/subject/26819666/\">领域驱动设计</a>》 ，本书是领域驱动设计方面的经典之作。全书围绕着设计和开发实践，结合若干真实的项目案例，向读者阐述如何在真实的软件开发中应用领域驱动设计。书中给出了领域驱动设计的系统化方法，并将人们普遍接受的一些实践综合到一起，融入了作者的见解和经验，展现了一些可扩展的设计新实践、已验证过的技术以及便于应对复杂领域的软件项目开发的基本原则。</p>\n</li>\n<li>\n<p>《<a href=\"https://book.douban.com/subject/1467587/\">UNIX编程艺术</a>》 ，这本书主要介绍了Unix系统领域中的设计和开发哲学、思想文化体系、原则与经验，由公认的Unix编程大师、开源运动领袖人物之一埃里克·雷蒙德（Eric S. Raymond）倾力多年写作而成。包括Unix设计者在内的多位领域专家也为本书贡献了宝贵的内容。本书内容涉及社群文化、软件开发设计与实现，覆盖面广、内容深邃，完全展现了作者极其深厚的经验积累和领域智慧。</p>\n</li>\n<li>\n<p>《<a href=\"https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html\">Clean Architecture</a>》，如果你读过 《<a href=\"https://book.douban.com/subject/5442024/\">Clean Code</a>》 和 《<a href=\"https://book.douban.com/subject/11614538/\">The Clean Coder</a>》这两本书。你就能猜得到这种 Clean 系列一定也是出自“Bob大叔”之手。没错，就是Bob大叔的心血之作。除了这个网站，《<a href=\"https://book.douban.com/subject/26915970/\">Clean Architecture</a>》也是一本书，这是一本很不错的架构类图书。对软件架构的元素、方法等讲得很清楚。示例都比较简单，并带一些软件变化历史的讲述，很开阔视野。</p>\n</li>\n<li>\n<p><a href=\"https://12factor.net/\">The Twelve-Factor App</a> ，如今，软件通常会作为一种服务来交付，它们被称为网络应用程序，或软件即服务（SaaS）。12-Factor 为构建SaaS 应用提供了方法论，这也是架构师必读的文章。（<a href=\"https://12factor.net/zh_cn/\">中译版</a>） 这篇文章在业内的影响力很大，必读！</p>\n</li>\n<li>\n<p><a href=\"https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8\">Avoid Over Engineering</a> ，有时候，我们会过渡设计我们的系统，过度设计会把我们带到另外一个复杂度上，所以，我们需要一些工程上的平衡。这篇文章是一篇非常不错地告诉你什么是过度设计的文章。</p>\n</li>\n<li>\n<p><a href=\"https://medium.com/@DataStax/instagram-engineerings-3-rules-to-a-scalable-cloud-application-architecture-c44afed31406\">Instagram Engineering’s 3 rules to a scalable cloud application architecture</a> ，Instagram 工程的三个黄金法则：1）使用稳定可靠的技术（迎接新的技术）；2）不要重新发明轮子；3）Keep it very simple。我觉得这三条很不错。其实，Amazon也有两条工程法则，一个是自动化，一个是简化。</p>\n</li>\n<li>\n<p><a href=\"https://www.infoq.com/presentations/effective-api-design\">How To Design A Good API and Why it Matters - Joshua Bloch</a> ，Google的一个分享，关于如何设计好一个API。</p>\n</li>\n<li>\n<p>关于Restful API的设计，你可以学习并借鉴一下下面这些文章。</p>\n<ul>\n<li><a href=\"https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api\">Best Practices for Designing a Pragmatic RESTful API</a></li>\n<li><a href=\"https://betimdrenica.wordpress.com/2015/03/09/ideal-rest-api-design/\">Ideal REST API design</a></li>\n<li><a href=\"https://github.com/interagent/http-api-design\">HTTP API Design Guide</a></li>\n<li><a href=\"https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md\">Microsoft REST API Guidelines</a></li>\n<li><a href=\"https://github.com/watson-developer-cloud/api-guidelines\">IBM Watson REST API Guidelines</a></li>\n<li><a href=\"https://opensource.zalando.com/restful-api-guidelines/\">Zalando RESTful API and Event Scheme Guidelines</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://blog.codinghorror.com/the-problem-with-logging/\">The Problem With Logging</a> ，一篇关于程序打日志的短文，可以让你知道一些可能以往不知道的打日志需要注意的问题。</p>\n</li>\n<li>\n<p><a href=\"http://berb.github.io/diploma-thesis/community/index.html\">Concurrent Programming for Scalable Web Architectures</a> ，这是一本在线的免费书，教你如何架构一个可扩展的高性能的网站。其中谈到了一些不错的设计方法和知识。</p>\n</li>\n</ul><h1>小结</h1><p>好了，总结一下今天分享的内容。我认为，“品位”不同，是各层次程序员之间最大的区别，这也决定了他们所做出来的软件的质量和价值。因此，我特意撰写了软件设计这一篇章，帮助那些想成长为软件工程师、设计师或架构师的程序员，提高软件设计的品位，进而实现自己的目标。</p><p>虽然很多程序员都忽略了对编程范式的学习，但我觉得学习编程范式其实是非常非常重要的事，能够明白编程的本质和各种语言的编程方式。为此，我推荐了好几份学习资料，帮助你系统化地学习和理解。随后我介绍了DRY-避免重复原则、KISS-简单原则、迪米特法则（又称“最少知识原则”）、 面向对象的S.O.L.I.D原则等多个经典的软件设计原则。</p><p>最后，我精选并推荐了软件设计方面的学习资料，如《领域驱动设计》、《UNIX编程艺术》和《Clean Architecture》等必读好书，以及如何构建SaaS，如何避免过度设计，如何设计API，如何用程序打日志等方面的资料。</p><p>希望这些内容对你有帮助。从下一篇文章开始，我们将进入《程序员练级攻略》的第五个篇章——高手成长篇。敬请期待。</p><p>下面是《程序员练级攻略》系列文章的目录。</p><ul>\n<li><a href=\"https://time.geekbang.org/column/article/8136\">开篇词</a></li>\n<li>入门篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/8216\">零基础启蒙</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/8217\">正式入门</a></li>\n</ul>\n</li>\n<li>修养篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/8700\">程序员修养</a></li>\n</ul>\n</li>\n<li>专业基础篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/8701\">编程语言</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/8887\">理论学科</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/8888\">系统知识</a></li>\n</ul>\n</li>\n<li>软件设计篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/9369\">软件设计</a></li>\n</ul>\n</li>\n<li>高手成长篇\n<ul>\n<li><a href=\"https://time.geekbang.org/column/article/9759\">Linux系统、内存和网络（系统底层知识）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/9851\">异步I/O模型和Lock-Free编程（系统底层知识）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10216\">Java底层知识</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10301\">数据库</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10603\">分布式架构入门（分布式架构）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/10604\">分布式架构经典图书和论文（分布式架构）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11232\">分布式架构工程设计(分布式架构)</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11116\">微服务</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11665\">容器化和自动化运维</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/11669\">机器学习和人工智能</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12271\">前端基础和底层原理（前端方向）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12389\">前端性能优化和框架（前端方向）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12486\">UI/UX设计（前端方向）</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/12561\">技术资源集散地</a></li>\n</ul>\n</li>\n</ul>","comments":[{"had_liked":false,"id":13420,"user_name":"SMTCode","can_delete":false,"product_type":"c1","uid":1109038,"ip_address":"","ucode":"0D837A753E4FAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/ec/2e/49d13bd2.jpg","comment_is_top":false,"comment_ctime":1529620604,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"289292429436","product_id":100002201,"comment_content":"字字珠玑，针针见血，博学多才，厚积薄发。对于入行晚，又没有耗叔这般超级大脑，还要陪伴宝宝的我来说，优先把编程语言这种工具用起来，给老婆和孩儿一个基本的经济保障。但要想用好工具，需要把耗叔推荐的系统知识、编程语言、编程规约穿插起来，而且要经过大量实战才能融会贯通。接触过耗叔推荐的部分书籍，要想坚持看下去真心难。耗叔的毅力和领悟能力不是一般的高。以前我都是以操作系统为中心划分知识方向，现在觉得耗叔的划分（计算+存储+网络）更加科学。耗叔推荐的四种编程语言，都很难一蹴而就，应该从自己擅长的部分入手，逐步扩大。我想把计算机技术作为一个终身的奋斗目标，从这角度出发，系统基本功越早学越好，何时学都不晚。耗叔成功给我们穿了一条线，能少走很多弯路。至于每个人能领略到何种程度，最终能达到何种高度，最后拼的还是脑袋+耐力。面对这么多维度的知识，该如何平衡各部分的时间，也是因人而异的，我也没有想好。不过千里之行，始于足下。行动起来，逐个突破，纵使达不到耗叔的高度，也能让自己站到更高的层次，用耐力、有耐心去打磨自己。我觉得耗叔应该很“冷”，因为高处不胜寒，孤独是多么的寂寞。耗叔有我们，不孤独。","like_count":67,"discussions":[{"author":{"id":1482915,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a0/a3/8da99bb0.jpg","nickname":"业余爱好者","note":"","ucode":"A890935A982988","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":206814,"discussion_content":"如何以操作系统为中心划分知识？我是按层划分的：组成原理->os->中间件->编程语言->类库->框架->软件工程。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584447272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1447283,"avatar":"https://static001.geekbang.org/account/avatar/00/16/15/73/e5e4b245.jpg","nickname":"Andy","note":"","ucode":"708042A35424DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565104,"discussion_content":"想问下，你现在怎么样了，我比较关心这个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650383743,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1313934,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0c/8e/8a39ee55.jpg","nickname":"文古","note":"","ucode":"9A3991AA033EB4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554434,"discussion_content":"你的书上面有多厚的灰尘了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646378998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13316,"user_name":"zzz","can_delete":false,"product_type":"c1","uid":1147132,"ip_address":"","ucode":"8B3E723179F69D","user_header":"https://static001.geekbang.org/account/avatar/00/11/80/fc/5a52fcf5.jpg","comment_is_top":false,"comment_ctime":1529540478,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"108903722878","product_id":100002201,"comment_content":"耗子叔你好，有一个很久之前就在的想法和顾虑：从csdn 到酷壳，再到这里。你分享和推荐的很多知识，经典，但是好多知识点，需要日复一日，甚至好几个月才能学完，那么，问题来了，比如，你一个月前推荐的东西，我一个月后才学完，就比如这个程序员系列，基本学完您推荐的书后，得好几年，两年后还能看到极客时间您的专栏的文章吗？或者您的酷壳和csdn 会一直都在吗？我用不用把你的所有博客和文章记录到我的笔记，以防丢失呢？这个工程量有点大。嘿嘿😁","like_count":25,"discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391552,"discussion_content":"极客时间还能看。其它的可以试试爬虫","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630505276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13422,"user_name":"SMTCode","can_delete":false,"product_type":"c1","uid":1109038,"ip_address":"","ucode":"0D837A753E4FAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/ec/2e/49d13bd2.jpg","comment_is_top":false,"comment_ctime":1529621728,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"87428967648","product_id":100002201,"comment_content":"感觉手握大量武林秘籍，怎奈无神功护体，不得其精要。总喜欢幻想一招制敌，怎奈真正的修行要经过多少个春夏秋冬。一路走来，能坚持下来的人了了，但坚持下来的都成了高手和传说。不写了，孩醒了，看娃～","like_count":20,"discussions":[{"author":{"id":2009734,"avatar":"","nickname":"一墨","note":"","ucode":"2EFB72EEC69FE2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":283075,"discussion_content":"看娃, 一招瞬间破功...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592171215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":15394,"user_name":"师兄","can_delete":false,"product_type":"c1","uid":1016528,"ip_address":"","ucode":"92B5379E1CD978","user_header":"https://static001.geekbang.org/account/avatar/00/0f/82/d0/6bd11e58.jpg","comment_is_top":false,"comment_ctime":1531158190,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"57365733038","product_id":100002201,"comment_content":"每篇文章看得我都想哭","like_count":13,"discussions":[{"author":{"id":3182159,"avatar":"","nickname":"Geek_62d2e2","note":"","ucode":"13F104BF7DAA37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588593,"discussion_content":"同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663891409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13312,"user_name":"颇忒妥","can_delete":false,"product_type":"c1","uid":1026448,"ip_address":"","ucode":"AA86AD1049BC2E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/90/0c5ed3d9.jpg","comment_is_top":false,"comment_ctime":1529539648,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44479212608","product_id":100002201,"comment_content":"强烈推荐领域驱动设计，要看原版","like_count":10},{"had_liked":false,"id":13475,"user_name":"TH","can_delete":false,"product_type":"c1","uid":1053413,"ip_address":"","ucode":"C5EA20546DC09C","user_header":"https://static001.geekbang.org/account/avatar/00/10/12/e5/592d9324.jpg","comment_is_top":false,"comment_ctime":1529664855,"is_pvip":true,"replies":[{"id":"4616","content":"《云计算架构设计模式》在后面会推荐，这篇文章主要是讲软件设计的。","user_name":"作者回复","comment_id":13475,"uid":"1001269","ip_address":"","utype":1,"ctime":1529993993,"user_name_real":"左耳朵"}],"discussion_count":1,"race_medal":0,"score":"40184370519","product_id":100002201,"comment_content":"《领域驱动设计》和《实现领域驱动设计》真的是必看的书，绝对颠覆软件设计能力。嗯，市面上关于DDD的书就这两本，不多。另外推荐微软刚出的一本书《云计算架构设计模式》<br>","like_count":9,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419660,"discussion_content":"《云计算架构设计模式》在后面会推荐，这篇文章主要是讲软件设计的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529993993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13426,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1529624964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27299428740","product_id":100002201,"comment_content":"最值得付费专栏。","like_count":6},{"had_liked":false,"id":13405,"user_name":"湖心亭看雪","can_delete":false,"product_type":"c1","uid":1023363,"ip_address":"","ucode":"88BAEBA964B6BC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/83/968da410.jpg","comment_is_top":false,"comment_ctime":1529591508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18709460692","product_id":100002201,"comment_content":"关于DDD，我也推荐一本落地的好书吧，implementing domain-driven design，实现领域驱动设计。","like_count":4},{"had_liked":false,"id":257939,"user_name":"你为啥那么牛","can_delete":false,"product_type":"c1","uid":1503506,"ip_address":"","ucode":"1ABC604A54A8F6","user_header":"https://static001.geekbang.org/account/avatar/00/16/f1/12/7dac30d6.jpg","comment_is_top":false,"comment_ctime":1604219181,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10194153773","product_id":100002201,"comment_content":"这些文章，我都会逐一看的","like_count":2},{"had_liked":false,"id":212051,"user_name":"Geek_a2584e","can_delete":false,"product_type":"c1","uid":1785158,"ip_address":"","ucode":"26F4FD66A90C93","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIkvkUicJ7SfC3lXJUQMaTFgYYdv9tgAibMCe99gzicrl1gAOqRZcKXTeNQMp41PeyTmfd0bTx4xCNzQ/132","comment_is_top":false,"comment_ctime":1588053198,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10177987790","product_id":100002201,"comment_content":"在设计的时候确实考虑的很多，设计了半天，但是在改了几次需求，改了几次接口之后代码的耦合性直线型上升，真的很头疼。","like_count":2},{"had_liked":false,"id":195209,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1921287,"ip_address":"","ucode":"64BBE005890845","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/07/b5a945b6.jpg","comment_is_top":false,"comment_ctime":1585146742,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10175081334","product_id":100002201,"comment_content":"虽然去年刚考过《系统架构设计师》，但是看了这系列文章后发现自己离真正的有修养的程序员还差的很远。借老子的话“学海无涯苦作舟”，仅仅计算机这一个领域已无涯了...","like_count":2},{"had_liked":false,"id":57410,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1546783190,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10136717782","product_id":100002201,"comment_content":"这个冬天比较冷，需要看一看让人热血沸腾的知识地图，信心更多的一些，步子也更坚实了。","like_count":2},{"had_liked":false,"id":13583,"user_name":"yangwnaghoayu","can_delete":false,"product_type":"c1","uid":1137303,"ip_address":"","ucode":"675C0C7DFBF1FE","user_header":"","comment_is_top":false,"comment_ctime":1529824147,"is_pvip":false,"replies":[{"id":"4602","content":"如果你从C&#47;C++开始了，那倒也不用了。不过多学点没错的……","user_name":"作者回复","comment_id":13583,"uid":"1001269","ip_address":"","utype":1,"ctime":1529979129,"user_name_real":"左耳朵"}],"discussion_count":1,"race_medal":0,"score":"10119758739","product_id":100002201,"comment_content":"耗子叔，我跟之前一个网友类似的疑问： 我本科毕业工作一年了，大学课堂学过C，自己在C并不熟练的情况下自学了C++，毕业后从事C++图像处理相关工作。  自己现在还要从python和前后端开始来学习么？    我不知道您安排简单的学习下前后端是为了单纯的培养初学者的编程兴趣，还是为了培养兴趣+培养思维？   您有空滴时候能不能回答下哈😄，不管咋样，很感谢您给我们提供了这么多好东西，谢谢您了啊","like_count":2,"discussions":[{"author":{"id":1001269,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/47/35/89726f5f.jpg","nickname":"左耳朵","note":"","ucode":"8A4741D677702E","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":419694,"discussion_content":"如果你从C/C++开始了，那倒也不用了。不过多学点没错的……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1529979129,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":13517,"user_name":"黄晓东","can_delete":false,"product_type":"c1","uid":1107029,"ip_address":"","ucode":"79B22A82FB9EC1","user_header":"https://static001.geekbang.org/account/avatar/00/10/e4/55/b07743d2.jpg","comment_is_top":false,"comment_ctime":1529718558,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10119653150","product_id":100002201,"comment_content":"定好目标，认准方向，浩哥指引，使命必达，还有一个关键是自己的位置","like_count":2},{"had_liked":false,"id":13399,"user_name":"9527","can_delete":false,"product_type":"c1","uid":1032735,"ip_address":"","ucode":"04B51C09E3C7B8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c2/1f/343f2dec.jpg","comment_is_top":false,"comment_ctime":1529586232,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10119520824","product_id":100002201,"comment_content":"耗哥问个题外话，对于加班文化怎么看，感觉很多加班并不能提升多少技术，很多都是拼体力<br>耗哥怎么看待加班呢","like_count":2},{"had_liked":false,"id":13365,"user_name":"Lee","can_delete":false,"product_type":"c1","uid":1083699,"ip_address":"","ucode":"DE4F80831AE46F","user_header":"https://static001.geekbang.org/account/avatar/00/10/89/33/f929f303.jpg","comment_is_top":false,"comment_ctime":1529558410,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10119493002","product_id":100002201,"comment_content":"耗子叔，有个阅读顺序的问题一直想请教您。以前是按您酷壳上的练级攻略学习的，现在的工作c++程序员，您介绍的有些书是看过的，但是从入门启蒙篇里开始的每篇里都有很多没看过的书，我是应该按您每篇里的书读完后再读下一篇里的，还是说可以先着重读某一篇里的。比如，系统篇里的操作系统和网络的书我读过一些，但是入门篇里的Python只学过一些笨办法学Python的教程，html&#47;css只在w3cschool上学过一些，并没有把启蒙篇里的学完，这时的学习顺序怎么安排优先级，比如可能会面临换工作的可能。","like_count":2},{"had_liked":false,"id":13341,"user_name":"Geek.Kwok","can_delete":false,"product_type":"c1","uid":1043668,"ip_address":"","ucode":"80D38825D990F9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/d4/8f877895.jpg","comment_is_top":false,"comment_ctime":1529544521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10119479113","product_id":100002201,"comment_content":"与和“世界杯”一样豪门的知识盛宴，超级赞","like_count":2},{"had_liked":false,"id":292751,"user_name":"王子瑞Aliloke有事电联","can_delete":false,"product_type":"c1","uid":1249400,"ip_address":"","ucode":"9ABE8E475E336B","user_header":"https://static001.geekbang.org/account/avatar/00/13/10/78/29bd3f1e.jpg","comment_is_top":false,"comment_ctime":1620960892,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5915928188","product_id":100002201,"comment_content":"信息量真大--要坚持学习，同时快速学习。<br>今年目标是在公司带团队，负责一个十几人的项目。","like_count":1},{"had_liked":false,"id":129922,"user_name":"不一样的烟火","can_delete":false,"product_type":"c1","uid":1473251,"ip_address":"","ucode":"6E305F0EE90E8B","user_header":"https://static001.geekbang.org/account/avatar/00/16/7a/e3/145adba9.jpg","comment_is_top":false,"comment_ctime":1567327578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5862294874","product_id":100002201,"comment_content":"老师我现阶段的目标是50万 看完你的介绍有信心了 😁","like_count":1},{"had_liked":false,"id":14449,"user_name":"A💻 开发-浩秦","can_delete":false,"product_type":"c1","uid":1147854,"ip_address":"","ucode":"5C643C1F812DA3","user_header":"https://static001.geekbang.org/account/avatar/00/11/83/ce/8f755f36.jpg","comment_is_top":false,"comment_ctime":1530442395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5825409691","product_id":100002201,"comment_content":"武林秘籍之内功心法，值得订阅","like_count":1},{"had_liked":false,"id":13677,"user_name":"宋桓公","can_delete":false,"product_type":"c1","uid":1151948,"ip_address":"","ucode":"04235C2B87AB0E","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/cc/dfe92ee1.jpg","comment_is_top":false,"comment_ctime":1529923945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5824891241","product_id":100002201,"comment_content":"漂亮","like_count":1},{"had_liked":false,"id":13598,"user_name":"亚伦碎语","can_delete":false,"product_type":"c1","uid":1014505,"ip_address":"","ucode":"F32E5E1B63CC90","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7a/e9/da5c0203.jpg","comment_is_top":false,"comment_ctime":1529841445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5824808741","product_id":100002201,"comment_content":"一直有个问题就是面向对象的这些设计原则和范式如何用到FP中呢？","like_count":1},{"had_liked":false,"id":13342,"user_name":"云学","can_delete":false,"product_type":"c1","uid":1027233,"ip_address":"","ucode":"366AE90BA06356","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ac/a1/43d83698.jpg","comment_is_top":false,"comment_ctime":1529545356,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5824512652","product_id":100002201,"comment_content":"曾经花了一年的时间学习和实践clean code，对作者提到的那些原则有一些体会，收获很大","like_count":1},{"had_liked":false,"id":13327,"user_name":"长不胖的Garfield","can_delete":false,"product_type":"c1","uid":1025979,"ip_address":"","ucode":"F2C536094A061B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a7/bb/4e273719.jpg","comment_is_top":false,"comment_ctime":1529542613,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5824509909","product_id":100002201,"comment_content":"信息量太大了！这一篇文章够看好久","like_count":1},{"had_liked":false,"id":359779,"user_name":"细心点","can_delete":false,"product_type":"c1","uid":1756505,"ip_address":"北京","ucode":"F4D0EF8C71718E","user_header":"https://static001.geekbang.org/account/avatar/00/1a/cd/59/493b8eab.jpg","comment_is_top":false,"comment_ctime":1665884287,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665884287","product_id":100002201,"comment_content":"反馈个问题: LSP里的 “子类必须能够替换成它们的基类。” 写错了，应该是 替换掉（不是 替换成）","like_count":0},{"had_liked":false,"id":323398,"user_name":"方勇(gopher)","can_delete":false,"product_type":"c1","uid":1290625,"ip_address":"","ucode":"D199911C4CFEF5","user_header":"https://static001.geekbang.org/account/avatar/00/13/b1/81/13f23d1e.jpg","comment_is_top":false,"comment_ctime":1637889356,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637889356","product_id":100002201,"comment_content":"软件设计一直是面试忽视的内容，以后面试中会有所涉及！","like_count":0},{"had_liked":false,"id":234907,"user_name":"liudu_ec","can_delete":false,"product_type":"c1","uid":2041994,"ip_address":"","ucode":"E299071BD1DFA8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJiaeTzf4V8ib4xKcYjWEIflBSqkjbpkscoaedppgnBAD9ZAibjYSz0DNSJQw8icz7xljEgbNQ5hrzPAA/132","comment_is_top":false,"comment_ctime":1594823629,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1594823629","product_id":100002201,"comment_content":"耗子叔的文章信息量太大了。","like_count":0},{"had_liked":false,"id":196070,"user_name":"Geek_ab9b5f","can_delete":false,"product_type":"c1","uid":1778076,"ip_address":"","ucode":"080FAE08B0128A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLAmpDkIxlMjoRlVbicOmdAmrdr9bnfsCkcCPzo53ibzMeSt8ygtJXQiaTfU4rSe9qHJkOAQcUOQj9s9A/132","comment_is_top":false,"comment_ctime":1585233542,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585233542","product_id":100002201,"comment_content":"这是一条少有人走的路，贵在坚持✊","like_count":0},{"had_liked":false,"id":183821,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1583140868,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583140868","product_id":100002201,"comment_content":"打卡76","like_count":0},{"had_liked":false,"id":39070,"user_name":"肖春","can_delete":false,"product_type":"c1","uid":1255632,"ip_address":"","ucode":"145DA071937279","user_header":"https://static001.geekbang.org/account/avatar/00/13/28/d0/248ac91c.jpg","comment_is_top":false,"comment_ctime":1542182465,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1542182465","product_id":100002201,"comment_content":"只是量太大了，需要很长时间才能学完。","like_count":0},{"had_liked":false,"id":23771,"user_name":"Kai","can_delete":false,"product_type":"c1","uid":1024088,"ip_address":"","ucode":"CD3FACF1803D8F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/58/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1536644309,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1536644309","product_id":100002201,"comment_content":"想请教一下应该如何实践呢？比如design pattern里有23种模式，但工作中可能也就用到个几种。那该如何练习并实践其他的模式呢？","like_count":0},{"had_liked":false,"id":13987,"user_name":"小鱼儿","can_delete":false,"product_type":"c1","uid":1053492,"ip_address":"","ucode":"989EC453936B91","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/34/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1530104725,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1530104725","product_id":100002201,"comment_content":"终于看到最全的设计原则了！非常棒","like_count":0},{"had_liked":false,"id":13521,"user_name":"pomysky","can_delete":false,"product_type":"c1","uid":1006951,"ip_address":"","ucode":"2B02F867B2C0F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5d/67/0a967336.jpg","comment_is_top":false,"comment_ctime":1529720647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1529720647","product_id":100002201,"comment_content":"值得反复看","like_count":0},{"had_liked":false,"id":13504,"user_name":"破晓","can_delete":false,"product_type":"c1","uid":1153316,"ip_address":"","ucode":"13C33DE0CFD43B","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/24/e1cb609e.jpg","comment_is_top":false,"comment_ctime":1529686942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1529686942","product_id":100002201,"comment_content":"大脑大开持续坚持学习下去","like_count":0},{"had_liked":false,"id":13385,"user_name":"赵亮","can_delete":false,"product_type":"c1","uid":1072864,"ip_address":"","ucode":"053E4C61B77C23","user_header":"https://static001.geekbang.org/account/avatar/00/10/5e/e0/e45b7839.jpg","comment_is_top":false,"comment_ctime":1529575911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1529575911","product_id":100002201,"comment_content":"avoid over engineering 链接打不开，是被墙了么？","like_count":0},{"had_liked":false,"id":13362,"user_name":"*********26","can_delete":false,"product_type":"c1","uid":1145259,"ip_address":"","ucode":"8365F594EF6696","user_header":"https://static001.geekbang.org/account/avatar/00/11/79/ab/a73f3c22.jpg","comment_is_top":false,"comment_ctime":1529555599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1529555599","product_id":100002201,"comment_content":"我的水平不够，仅做参考，膜拜大佬","like_count":0},{"had_liked":false,"id":13359,"user_name":"gevin","can_delete":false,"product_type":"c1","uid":1005862,"ip_address":"","ucode":"B5AD68F1884A1F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/26/1015d573.jpg","comment_is_top":false,"comment_ctime":1529554900,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1529554900","product_id":100002201,"comment_content":"太经典了！<br><br>把我这些年掌握的编程原则和经验都串起来了，还补充了我的各个短板<br><br>感谢耗子哥！","like_count":0},{"had_liked":false,"id":13346,"user_name":"haha","can_delete":false,"product_type":"c1","uid":1036122,"ip_address":"","ucode":"1F018DC1DFEEE4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/5a/ce1011b1.jpg","comment_is_top":false,"comment_ctime":1529547057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1529547057","product_id":100002201,"comment_content":"每期必看！谢谢皓叔指明方向！","like_count":0},{"had_liked":false,"id":13344,"user_name":"孙悟空","can_delete":false,"product_type":"c1","uid":1055660,"ip_address":"","ucode":"28356CBC83C464","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/ac/41ec8c80.jpg","comment_is_top":false,"comment_ctime":1529546782,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1529546782","product_id":100002201,"comment_content":"编程范式是不是可以理解为设计模式昵","like_count":0,"discussions":[{"author":{"id":1644021,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/ajNVdqHZLLAU8sEUhlUrCS7Kft78oOPCyyaic74wVP4r98GOm6Fn2besj6HomwB41u2NsUJyeqMCzWhDwN2jZ8w/132","nickname":"Xiaojianjun_jason","note":"","ucode":"12452FF2A72C20","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558566,"discussion_content":"不是一回事","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648382496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}