{"id":510489,"title":"19｜DI Container（7）：如何实现Field Injection部分的功能？","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现注入依赖容器。</p><h2>回顾代码与任务列表</h2><p>到目前为止，我们的代码是这样的：</p><pre><code>ContextConfig.java:\n\npackage geektime.tdd.di;\n\nimport java.util.*;\nimport static java.util.List.of;\n\npublic class ContextConfig {\n    private Map&lt;Class&lt;?&gt;, ComponentProvider&lt;?&gt;&gt; providers = new HashMap&lt;&gt;();\n    \n    public &lt;Type&gt; void bind(Class&lt;Type&gt; type, Type instance) {\n        providers.put(type, new ComponentProvider&lt;Type&gt;() {\n            @Override\n            public Type get(Context context) {\n                return instance;\n            }\n            @Override\n            public List&lt;Class&lt;?&gt;&gt; getDependencies() {\n                return of();\n            }\n        });\n    }\n    \n    public &lt;Type, Implementation extends Type&gt;\n    void bind(Class&lt;Type&gt; type, Class&lt;Implementation&gt; implementation) {\n        providers.put(type, new ConstructorInjectionProvider&lt;&gt;(implementation));\n    }\n    \n    public Context getContext() {\n        providers.keySet().forEach(component -&gt; checkDependencies(component, new Stack&lt;&gt;()));\n        return new Context() {\n            @Override\n            public &lt;Type&gt; Optional&lt;Type&gt; get(Class&lt;Type&gt; type) {\n                return Optional.ofNullable(providers.get(type)).map(provider -&gt; (Type) provider.get(this));\n            }\n        };\n    }\n    \n    private void checkDependencies(Class&lt;?&gt; component, Stack&lt;Class&lt;?&gt;&gt; visiting) {\n        for (Class&lt;?&gt; dependency: providers.get(component).getDependencies()) {\n            if (!providers.containsKey(dependency)) throw new DependencyNotFoundException(component, dependency);\n            if (visiting.contains(dependency)) throw new CyclicDependenciesFoundException(visiting);\n            visiting.push(dependency);\n            checkDependencies(dependency, visiting);\n            visiting.pop();\n        }\n    }\n    \n    interface ComponentProvider&lt;T&gt; {\n        T get(Context context);\n        List&lt;Class&lt;?&gt;&gt; getDependencies();\n    }\n}\n    \nConstructorInjectionProvider.java:\n    \npackage geektime.tdd.di;\n    \nimport jakarta.inject.Inject;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Parameter;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport static java.util.Arrays.stream;\n\n\nclass ConstructorInjectionProvider&lt;T&gt; implements ContextConfig.ComponentProvider&lt;T&gt; {\n    private Constructor&lt;T&gt; injectConstructor;\n    \n    public ConstructorInjectionProvider(Class&lt;T&gt; component) {\n        this.injectConstructor = getInjectConstructor(component);\n    }\n    \n    private static &lt;Type&gt; Constructor&lt;Type&gt; getInjectConstructor(Class&lt;Type&gt; implementation) {\n        List&lt;Constructor&lt;?&gt;&gt; injectConstructors = stream(implementation.getConstructors())\n                .filter(c -&gt; c.isAnnotationPresent(Inject.class)).collect(Collectors.toList());\n        if (injectConstructors.size() &gt; 1) throw new IllegalComponentException();\n        return (Constructor&lt;Type&gt;) injectConstructors.stream().findFirst().orElseGet(() -&gt; {\n            try {\n                return implementation.getConstructor();\n            } catch (NoSuchMethodException e) {\n                throw new IllegalComponentException();\n            }\n        });\n    }\n    \n    @Override\n    public T get(Context context) {\n        try {\n            Object[] dependencies = stream(injectConstructor.getParameters())\n                    .map(p -&gt; context.get(p.getType()).get())\n                    .toArray(Object[]::new);\n            return injectConstructor.newInstance(dependencies);\n        } catch (InvocationTargetException | InstantiationException | IllegalAccessException e) {\n            throw new RuntimeException(e);\n        }\n    }\n    \n    @Override\n    public List&lt;Class&lt;?&gt;&gt; getDependencies() {\n        return stream(injectConstructor.getParameters()).map(Parameter::getType).collect(Collectors.toList());\n    }\n}\n    \nContext.java:\npackage geektime.tdd.di;\n    \nimport java.util.Optional;\n    \npublic interface Context {\n    &lt;Type&gt; Optional&lt;Type&gt; get(Class&lt;Type&gt; type);\n}\n</code></pre><p>任务列表状态为：</p><ul>\n<li>\n<p><s>无需构造的组件——组件实例</s></p>\n</li>\n<li>\n<p>如果注册的组件不可实例化，则抛出异常</p>\n<ul>\n<li>抽象类</li>\n<li>接口</li>\n</ul>\n</li>\n<li>\n<p><s>构造函数注入</s></p>\n<ul>\n<li><s>无依赖的组件应该通过默认构造函数生成组件实例</s></li>\n<li><s>有依赖的组件，通过Inject标注的构造函数生成组件实例</s></li>\n<li><s>如果所依赖的组件也存在依赖，那么需要对所依赖的组件也完成依赖注入</s></li>\n<li><s>如果组件有多于一个Inject标注的构造函数，则抛出异常</s></li>\n<li><s>如果组件没有Inject标注的构造函数，也没有默认构造函数（新增任务）</s></li>\n<li><s>如果组件需要的依赖不存在，则抛出异常</s></li>\n<li><s>如果组件间存在循环依赖，则抛出异常</s></li>\n</ul>\n</li>\n<li>\n<p>字段注入</p>\n<ul>\n<li>通过Inject标注将字段声明为依赖组件</li>\n<li>如果组件需要的依赖不存在，则抛出异常</li>\n<li>如果字段为final则抛出异常</li>\n<li>如果组件间存在循环依赖，则抛出异常</li>\n</ul>\n</li>\n<li>\n<p>方法注入</p>\n<ul>\n<li>通过Inject标注的方法，其参数为依赖组件</li>\n<li>通过Inject标注的无参数方法，会被调用</li>\n<li>按照子类中的规则，覆盖父类中的Inject方法</li>\n<li>如果组件需要的依赖不存在，则抛出异常</li>\n<li>如果方法定义类型参数，则抛出异常</li>\n<li>如果组件间存在循环依赖，则抛出异常</li>\n</ul>\n</li>\n<li>\n<p>对Provider类型的依赖</p>\n<ul>\n<li>注入构造函数中可以声明对于Provider的依赖</li>\n<li>注入字段中可以声明对于Provider的依赖</li>\n<li>注入方法中可声明对于Provider的依赖</li>\n</ul>\n</li>\n<li>\n<p>自定义Qualifier的依赖</p>\n<ul>\n<li>注册组件时，可额外指定Qualifier</li>\n<li>注册组件时，可从类对象上提取Qualifier</li>\n<li>寻找依赖时，需同时满足类型与自定义Qualifier标注</li>\n<li>支持默认Qualifier——Named</li>\n</ul>\n</li>\n<li>\n<p>Singleton生命周期</p>\n<ul>\n<li>注册组件时，可额外指定是否为Singleton</li>\n<li>注册组件时，可从类对象上提取Singleton标注</li>\n<li>对于包含Singleton标注的组件，在容器范围内提供唯一实例</li>\n<li>容器组件默认不是Single生命周期</li>\n</ul>\n</li>\n<li>\n<p>自定义Scope标注</p>\n<ul>\n<li>可向容器注册自定义Scope标注的回调</li>\n</ul>\n</li>\n</ul><!-- [[[read_end]]] --><h2>视频演示</h2><p>让我们进入今天的部分：</p><p><video poster=\"https://media001.geekbang.org/12bd2cbcfe1943c699fa0eea806c61d4/snapshots/6d7a82880a3b40d8b89f3fa722d0b67d-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/29782ff-1805ffac621-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/5a0435e410fc43ddb6601191e4290cac/1c6b1d3d9ddf46699ad1302590170b32-f5d0d3454c1700b775f8f2bd2470f596-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>在进入下节课之前，希望你能认真思考如下两个问题，并选择最有感触的一道进行回答。</p><ol>\n<li>要如何实现Method Injection部分的功能呢？</li>\n<li>在你看来，这节课的难易程度如何？有遇到什么卡壳的地方吗？</li>\n</ol><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码的链接分享出来。相信经过你的思考与实操，学习效果会更好！</p>","neighbors":{"left":{"article_title":"18｜DI Container（6）：如何实现循环依赖的检查？","id":508859},"right":{"article_title":"20｜DI Container（8）：如何实现Method Injection部分的功能？","id":510492}},"comments":[{"had_liked":false,"id":343832,"user_name":"枫中的刀剑","can_delete":false,"product_type":"c1","uid":1322387,"ip_address":"","ucode":"4B086F538184AA","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/93/0f1cbf44.jpg","comment_is_top":true,"comment_ctime":1651072007,"is_pvip":false,"replies":[{"id":"126089","content":"所以才说是架构技术而不是编码技术","user_name":"作者回复","user_name_real":"编辑","uid":"2537798","ctime":1652265913,"ip_address":"","comment_id":343832,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720428007997e+18","product_id":100109401,"comment_content":"这节个人感觉比较重要的就是对于同样的功能，在不同上下文环境下对测试风格的选择方式问题。<br>在某些情况下，不同的风格传递的信息或者说知识是不太一样的。而伴随你不同风格的选择可能直接影响后续功能实现的难易程度。TDD主要的难点还是在于设计，在于你对知识的理解，究竟是以一种怎样的方式呈现出来。","like_count":2,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571554,"discussion_content":"所以才说是架构技术而不是编码技术","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652265914,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346874,"user_name":"奇小易","can_delete":false,"product_type":"c1","uid":1171151,"ip_address":"","ucode":"E06B4DFB5352BB","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/cf/ef2e0501.jpg","comment_is_top":false,"comment_ctime":1653484802,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1653484802","product_id":100109401,"comment_content":"思考：<br>在不同功能上下文内完成任务项时，<br>有时候在更大范围的功能上下文的测试更好，有时在更小范围的功能上下文的测试更好。<br>故选择在哪个功能上下文进行编写测试时，需要思考不同功能上下文编写的测试会有什么差别。<br>然后再决定在哪个功能上下文进行编写。","like_count":0},{"had_liked":false,"id":345235,"user_name":"新的一页","can_delete":false,"product_type":"c1","uid":1509854,"ip_address":"","ucode":"DEF7A511BD905C","user_header":"https://static001.geekbang.org/account/avatar/00/17/09/de/eed196cf.jpg","comment_is_top":false,"comment_ctime":1652148970,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1652148970","product_id":100109401,"comment_content":"难的还是思维的转变，比如对于测试的整理，多少才算够。","like_count":0},{"had_liked":false,"id":343820,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1651069527,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651069527","product_id":100109401,"comment_content":"在你看来，这节课的难易程度如何？<br>很早就对逻辑实现一知半解了，坚持跟着视频敲代码，运行测试。每当测试通过时都会感觉：哇！好神奇！对于这个目标，难度可以接受。<br><br>有遇到什么卡壳的地方吗？<br>和之前一样，细小的差别，测试没通过，略微检查一下就过去了","like_count":0},{"had_liked":false,"id":343664,"user_name":"张铁林","can_delete":false,"product_type":"c1","uid":1108258,"ip_address":"","ucode":"4AB8BC6CDAC0A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/22/7606c6ba.jpg","comment_is_top":false,"comment_ctime":1650974805,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650974805","product_id":100109401,"comment_content":"config.bind(ComponentWithFieldInjection.class, ComponentWithFieldInjection.class);<br>干嘛要把自己绑定到自己身上？<br>老师说：不像写个接口[抠鼻]，懒。<br>我说我看得云里雾里，我在这给大家提个醒。","like_count":1},{"had_liked":false,"id":343617,"user_name":"张铁林","can_delete":false,"product_type":"c1","uid":1108258,"ip_address":"","ucode":"4AB8BC6CDAC0A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/22/7606c6ba.jpg","comment_is_top":false,"comment_ctime":1650956762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650956762","product_id":100109401,"comment_content":"对比时，写了4、5个例子，没太理解有什么差别。","like_count":0}]}