{"id":548750,"title":"29｜集群管理：如何用名字空间分隔系统资源？","content":"<p>你好，我是Chrono。</p><p>在上一节课里我们学习了资源配额和检查探针，它们可以保障Pod这个微观单位很好地运行。那么很自然地，我们就会想：在集群的宏观层次，会不会也有类似的方法来为Kubernetes提供运行保障呢？</p><p>这是毫无疑问的，因为Kubernetes在各个方面都考虑得非常周密，也有很多的手段来管理、控制集群的资源。</p><p>今天我们就来看看名字空间（namespace）的一些高级用法。</p><h2>为什么要有名字空间</h2><p>其实我们很早就接触过Kubernetes的名字空间，比如<a href=\"https://time.geekbang.org/column/article/529800\">第10讲</a>中查看apiserver等组件要用到 <code>kube-system</code> 名字空间，还有在<a href=\"https://time.geekbang.org/column/article/536829\">第20讲</a>里的Service对象，DNS的完整域名里也会用到名字空间。</p><p>不过之前学习的重点是Kubernetes架构和API对象，对名字空间没有特别关注，而且也过去比较久了，所以现在我们来重新认识一下名字空间。</p><p>首先要明白，<strong>Kubernetes的名字空间并不是一个实体对象，只是一个逻辑上的概念</strong>。它可以把集群切分成一个个彼此独立的区域，然后我们把对象放到这些区域里，就实现了类似容器技术里namespace的隔离效果，应用只能在自己的名字空间里分配资源和运行，不会干扰到其他名字空间里的应用。</p><!-- [[[read_end]]] --><p>你可能要问了：Kubernetes的Master/Node架构已经能很好地管理集群，为什么还要引入名字空间这个东西呢？它的实际意义是什么呢？</p><p>我觉得，这恰恰是Kubernetes<strong>面对大规模集群、海量节点时的一种现实考虑</strong>。因为集群很大、计算资源充足，会有非常多的用户在Kubernetes里创建各式各样的应用，可能会有百万数量级别的Pod，这就使得资源争抢和命名冲突的概率大大增加了，情形和单机Linux系统里是非常相似的。</p><p>比如说，现在有一个Kubernetes集群，前端组、后端组、测试组都在使用它。这个时候就很容易命名冲突，比如后端组先创建了一个Pod叫“Web”，这个名字就被“占用”了，之后前端组和测试组就只能绞尽脑汁再新起一个不冲突的名字。接着资源争抢也容易出现，比如某一天，测试组不小心部署了有Bug的应用，在节点上把资源都给“吃”完了，就会导致其他组的同事根本无法工作。</p><p>所以，当多团队、多项目共用Kubernetes的时候，为了避免这些问题的出现，我们就需要<strong>把集群给适当地“局部化”，为每一类用户创建出只属于它自己的“工作空间”</strong>。</p><p>如果把Kubernetes比做一个大牧场的话，API对象就是里面的鸡鸭牛羊，而名字空间就是圈养它们的围栏，有了各自合适的活动区域，就能更有效、更安全地利用Kubernetes。</p><h2>如何使用名字空间</h2><p>名字空间也是一种API对象，使用命令 <code>kubectl api-resources</code> 可以看到它的简称是“ns”，命令 <code>kubectl create</code> 不需要额外的参数，可以很容易地创建一个名字空间，比如：</p><pre><code class=\"language-plain\">kubectl create ns test-ns \nkubectl get ns\n</code></pre><p>Kubernetes初始化集群的时候也会预设4个名字空间：default、kube-system、kube-public、kube-node-lease。我们常用的是前两个，<code>default</code> 是用户对象默认的名字空间，<code>kube-system</code> 是系统组件所在的名字空间，相信你对它们已经很熟悉了。</p><p><strong>想要把一个对象放入特定的名字空间，需要在它的 <code>metadata</code> 里添加一个 <code>namespace</code> 字段</strong>，比如我们要在“test-ns”里创建一个简单的Nginx Pod，就要这样写：</p><pre><code class=\"language-yaml\">apiVersion: v1\nkind: Pod\nmetadata:\n&nbsp; name: ngx\n&nbsp; namespace: test-ns\n\nspec:\n&nbsp; containers:\n&nbsp; - image: nginx:alpine\n&nbsp; &nbsp; name: ngx\n</code></pre><p><code>kubectl apply</code> 创建这个对象之后，我们直接用 <code>kubectl get</code> 是看不到它的，因为默认查看的是“default”名字空间，<strong>想要操作其他名字空间的对象必须要用 <code>-n</code> 参数明确指定</strong>：</p><pre><code class=\"language-plain\">kubectl get pod -n test-ns\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/9d/9f/9dc2521b55e1ac34ee59454339ddc59f.png?wh=1088x298\" alt=\"图片\"></p><p>因为名字空间里的对象都从属于名字空间，所以在删除名字空间的时候一定要小心，一旦名字空间被删除，它里面的所有对象也都会消失。</p><p>你可以执行一下 <code>kubectl delete</code>，试着删除刚才创建的名字空间“test-ns”：</p><pre><code class=\"language-plain\">kubectl delete ns test-ns\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/20/a7/20d2e6874d74767bc1711972ae1022a7.png?wh=1088x236\" alt=\"图片\"></p><p>就会发现删除名字空间后，它里面的Pod也会无影无踪了。</p><h2>什么是资源配额</h2><p>有了名字空间，我们就可以像管理容器一样，给名字空间设定配额，把整个集群的计算资源分割成不同的大小，按需分配给团队或项目使用。</p><p>不过集群和单机不一样，除了限制最基本的CPU和内存，还必须限制各种对象的数量，否则对象之间也会互相挤占资源。</p><p><strong>名字空间的资源配额需要使用一个专门的API对象，叫做 <code>ResourceQuota</code>，简称是 <code>quota</code></strong>，我们可以使用命令 <code>kubectl create</code> 创建一个它的样板文件：</p><pre><code class=\"language-plain\">export out=\"--dry-run=client -o yaml\"\nkubectl create quota dev-qt $out\n</code></pre><p>因为资源配额对象必须依附在某个名字空间上，所以在它的 <code>metadata</code> 字段里必须明确写出 <code>namespace</code>（否则就会应用到default名字空间）。</p><p>下面我们先创建一个名字空间“dev-ns”，再创建一个资源配额对象“dev-qt”：</p><pre><code class=\"language-yaml\">apiVersion: v1\nkind: Namespace\nmetadata:\n&nbsp; name: dev-ns\n\n---\n\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n&nbsp; name: dev-qt\n&nbsp; namespace: dev-ns\n\nspec:\n  ... ...\n</code></pre><p>ResourceQuota对象的使用方式比较灵活，既可以限制整个名字空间的配额，也可以只限制某些类型的对象（使用scopeSelector），今天我们看第一种，它需要在 <code>spec</code> 里使用 <code>hard</code> 字段，意思就是“<strong>硬性全局限制</strong>”。</p><p>在ResourceQuota里可以设置各类资源配额，字段非常多，我简单地归了一下类，你可以课后再去官方文档上查找详细信息：</p><ul>\n<li>CPU和内存配额，使用 <code>request.*</code>、<code>limits.*</code>，这是和容器资源限制是一样的。</li>\n<li>存储容量配额，使 <code>requests.storage</code> 限制的是PVC的存储总量，也可以用 <code>persistentvolumeclaims</code> 限制PVC的个数。</li>\n<li>核心对象配额，使用对象的名字（英语复数形式），比如 <code>pods</code>、<code>configmaps</code>、<code>secrets</code>、<code>services</code>。</li>\n<li>其他API对象配额，使用 <code>count/name.group</code> 的形式，比如 <code>count/jobs.batch</code>、<code>count/deployments.apps</code>。</li>\n</ul><p>下面的这个YAML就是一个比较完整的资源配额对象：</p><pre><code class=\"language-yaml\">apiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: dev-qt\n  namespace: dev-ns\n\nspec:\n&nbsp; hard:\n&nbsp; &nbsp; requests.cpu: 10\n&nbsp; &nbsp; requests.memory: 10Gi\n&nbsp; &nbsp; limits.cpu: 10\n&nbsp; &nbsp; limits.memory: 20Gi\n\n&nbsp; &nbsp; requests.storage: 100Gi\n&nbsp; &nbsp; persistentvolumeclaims: 100\n\n&nbsp; &nbsp; pods: 100\n&nbsp; &nbsp; configmaps: 100\n&nbsp; &nbsp; secrets: 100\n&nbsp; &nbsp; services: 10\n\n&nbsp; &nbsp; count/jobs.batch: 1\n&nbsp; &nbsp; count/cronjobs.batch: 1\n&nbsp; &nbsp; count/deployments.apps: 1\n</code></pre><p>我来稍微解释一下它为名字空间加上的全局资源配额：</p><ul>\n<li>所有Pod的需求总量最多是10个CPU和10GB的内存，上限总量是10个CPU和20GB的内存。</li>\n<li>只能创建100个PVC对象，使用100GB的持久化存储空间。</li>\n<li>只能创建100个Pod，100个ConfigMap，100个Secret，10个Service。</li>\n<li>只能创建1个Job，1个CronJob，1个Deployment。</li>\n</ul><p>这个YAML文件比较大，字段比较多，如果你觉得不是太容易阅读的话，也可以把它拆成几个小的YAML，分类限制资源数量，也许会更灵活一些。比如：</p><pre><code class=\"language-yaml\">apiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: cpu-mem-qt\n  namespace: dev-ns\n\nspec:\n  hard:\n    requests.cpu: 10\n    requests.memory: 10Gi\n    limits.cpu: 10\n    limits.memory: 20Gi\n</code></pre><pre><code class=\"language-yaml\">apiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: core-obj-qt\n  namespace: dev-ns\n\nspec:\n  hard:\n    pods: 100\n    configmaps: 100\n    secrets: 100\n    services: 10\n</code></pre><h2>如何使用资源配额</h2><p>现在让我们用 <code>kubectl apply</code> 创建这个资源配额对象，然后用 <code>kubectl get</code> 查看，记得要用 <code>-n</code> 指定名字空间：</p><pre><code class=\"language-plain\">kubectl apply -f quota-ns.yml\nkubectl get quota -n dev-ns\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/c2/49/c2f22c420f62686c18831de0895fd449.png?wh=1598x402\" alt=\"图片\"></p><p>你可以看到输出了ResourceQuota的全部信息，但都挤在了一起，看起来很困难，这时可以再用命令 <code>kubectl describe</code> 来查看对象，它会给出一个清晰的表格：</p><pre><code class=\"language-plain\">kubectl describe quota -n dev-ns\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/6b/8b/6bc46986f7535393198c52e78b04yy8b.png?wh=1246x1044\" alt=\"图片\"></p><p>现在让我们尝试在这个名字空间里运行两个busybox Job，同样要加上 <code>-n</code> 参数：</p><pre><code class=\"language-plain\">kubectl create job echo1 -n dev-ns --image=busybox -- echo hello\nkubectl create job echo2 -n dev-ns --image=busybox -- echo hello\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/9f/c8/9f7430yy76638fa76ec22b7d37b16ac8.png?wh=1920x204\" alt=\"图片\"></p><p>ResourceQuota限制了名字空间里最多只能有一个Job，所以创建第二个Job对象时会失败，提示超出了资源配额。</p><p>再用命令 <code>kubectl describe</code> 来查看，也会发现Job资源已经到达了上限：</p><p><img src=\"https://static001.geekbang.org/resource/image/00/d8/004deb0cb87b3d3dbb050342b6f087d8.png?wh=1242x532\" alt=\"图片\"></p><p>不过，只要我们删除刚才的Job，就又可以运行一个新的离线业务了：</p><p><img src=\"https://static001.geekbang.org/resource/image/f5/eb/f5db572d679257705a1dcab125e148eb.png?wh=1920x213\" alt=\"图片\"></p><p>同样的，这个“dev-ns”里也只能创建一个CronJob和一个Deployment，你可以课后自己尝试一下。</p><h2>默认资源配额</h2><p>学到这里估计你也发现了，在名字空间加上了资源配额限制之后，它会有一个合理但比较“烦人”的约束：要求所有在里面运行的Pod都必须用字段 <code>resources</code> 声明资源需求，否则就无法创建。</p><p>比如说，现在我们想用命令 <code>kubectl run</code> 创建一个Pod：</p><pre><code class=\"language-plain\">kubectl run ngx --image=nginx:alpine -n dev-ns\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/45/d5/45e19f5fa9db52efc7b34a1bfd3a49d5.png?wh=1920x169\" alt=\"图片\"></p><p>发现给出了一个“Forbidden”的错误提示，说不满足配额要求。</p><p>Kubernetes这样做的原因也很好理解，上一讲里我们说过，如果Pod里没有 <code>resources</code> 字段，就可以无限制地使用CPU和内存，这显然与名字空间的资源配额相冲突。<strong>为了保证名字空间的资源总量可管可控，Kubernetes就只能拒绝创建这样的Pod了。</strong></p><p>这个约束对于集群管理来说是好事，但对于普通用户来说却带来了一点麻烦，本来YAML文件就已经够大够复杂的了，现在还要再增加几个字段，再费心估算它的资源配额。如果有很多小应用、临时Pod要运行的话，这样做的人力成本就比较高，不是太划算。</p><p>那么能不能让Kubernetes自动为Pod加上资源限制呢？也就是说给个默认值，这样就可以省去反复设置配额的烦心事。</p><p>这个时候就要用到一个<strong>很小但很有用的辅助对象了—— <code>LimitRange</code>，简称是 <code>limits</code>，它能为API对象添加默认的资源配额限制</strong>。</p><p>你可以用命令 <code>kubectl explain limits</code> 来查看它的YAML字段详细说明，这里说几个要点：</p><ul>\n<li><code>spec.limits</code> 是它的核心属性，描述了默认的资源限制。</li>\n<li><code>type</code> 是要限制的对象类型，可以是 <code>Container</code>、<code>Pod</code>、<code>PersistentVolumeClaim</code>。</li>\n<li><code>default</code> 是默认的资源上限，对应容器里的 <code>resources.limits</code>，只适用于 <code>Container</code>。</li>\n<li><code>defaultRequest</code> 默认申请的资源，对应容器里的 <code>resources.requests</code>，同样也只适用于 <code>Container</code>。</li>\n<li><code>max</code>、<code>min</code> 是对象能使用的资源的最大最小值。</li>\n</ul><p>这个YAML就示范了一个LimitRange对象：</p><pre><code class=\"language-yaml\">apiVersion: v1\nkind: LimitRange\nmetadata:\n&nbsp; name: dev-limits\n&nbsp; namespace: dev-ns\n\nspec:\n&nbsp; limits:\n&nbsp; - type: Container\n&nbsp; &nbsp; defaultRequest:\n&nbsp; &nbsp; &nbsp; cpu: 200m\n&nbsp; &nbsp; &nbsp; memory: 50Mi\n&nbsp; &nbsp; default:\n&nbsp; &nbsp; &nbsp; cpu: 500m\n&nbsp; &nbsp; &nbsp; memory: 100Mi\n&nbsp; - type: Pod\n&nbsp; &nbsp; max:\n&nbsp; &nbsp; &nbsp; cpu: 800m\n&nbsp; &nbsp; &nbsp; memory: 200Mi\n</code></pre><p>它设置了每个容器默认申请0.2的CPU和50MB内存，容器的资源上限是0.5的CPU和100MB内存，每个Pod的最大使用量是0.8的CPU和200MB内存。</p><p>使用 <code>kubectl apply</code> 创建LimitRange之后，再用 <code>kubectl describe</code> 就可以看到它的状态：</p><pre><code class=\"language-plain\">kubectl describe limitranges -n dev-ns\n</code></pre><p><img src=\"https://static001.geekbang.org/resource/image/fd/1e/fdfab789e7b3f7c744eec4bfb137cd1e.png?wh=1688x524\" alt=\"图片\"></p><p>现在我们就可以不用编写 <code>resources</code> 字段直接创建Pod了，再运行之前的 <code>kubectl run</code> 命令：</p><pre><code class=\"language-plain\">kubectl run ngx --image=nginx:alpine -n dev-ns\n</code></pre><p>有了这个默认的资源配额作为“保底”，这次就没有报错，Pod顺利创建成功，用 <code>kubectl describe</code> 查看Pod的状态，也可以看到LimitRange为它自动加上的资源配额：</p><p><img src=\"https://static001.geekbang.org/resource/image/cf/92/cfd5fef8aefe5321b505859029075792.png?wh=948x988\" alt=\"图片\"></p><h2>小结</h2><p>今天我们学习了如何使用名字空间来管理Kubernetes集群资源。</p><p>在我们的实验环境里，因为只有一个用户（也就是你自己），可以独占全部资源，所以使用名字空间的意义不大。</p><p>但是在生产环境里会有很多用户共同使用Kubernetes，必然会有对资源的竞争，为了公平起见，避免某些用户过度消耗资源，就非常有必要用名字空间做好集群的资源规划了。</p><p>再简单小结一下今天的内容：</p><ol>\n<li>名字空间是一个逻辑概念，没有实体，它的目标是为资源和对象划分出一个逻辑边界，避免冲突。</li>\n<li>ResourceQuota对象可以为名字空间添加资源配额，限制全局的CPU、内存和API对象数量。</li>\n<li>LimitRange对象可以为容器或者Pod添加默认的资源配额，简化对象的创建工作。</li>\n</ol><h2>课下作业</h2><p>最后是课下作业时间，给你留两个思考题：</p><ol>\n<li>如果你是Kubernetes系统管理员，你会如何使用名字空间来管理生产集群呢？</li>\n<li>你觉得设置资源配额应该遵循什么样的基本原则？</li>\n</ol><p>在最后这段一起学习的旅途中，期待在留言区看到你的思考，如果觉得今天的内容对你有帮助，也欢迎分享给身边的朋友一起讨论。我们下节课再见。</p><p><img src=\"https://static001.geekbang.org/resource/image/66/85/66aee91b8f232342ayy0b554375ec585.jpg?wh=1920x1818\" alt=\"图片\"></p>","neighbors":{"left":{"article_title":"28｜应用保障：如何让Pod运行得更健康？","id":548736},"right":{"article_title":"30｜系统监控：如何使用Metrics Server和Prometheus？","id":550598}},"comments":[{"had_liked":false,"id":356276,"user_name":"小宝","can_delete":false,"product_type":"c1","uid":1402330,"ip_address":"北京","ucode":"A7223A477C60C9","user_header":"https://static001.geekbang.org/account/avatar/00/15/65/da/29fe3dde.jpg","comment_is_top":false,"comment_ctime":1662101795,"is_pvip":true,"replies":[{"id":"129684","content":"great","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1662110032,"ip_address":"北京","comment_id":356276,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18841970979","product_id":100114501,"comment_content":"Q1:<br>namespace属于逻辑隔离，生产上体现可以划分为基础中间件命名空间，其余按照业务系统划分。<br>Q2:<br>按照目前实施一些经验，机器通常会采用cpu与内存形成一个固定比例，例如8core,16G, 16core,32G, 然后会建议应用软件采用这个比例去配置request,limited, 同时要求，request尽可能小些，可以容纳下更多应用，超过一些限额后，集群具备自动化弹性扩容，形成“超卖”。同理，资源配额也是建议这样的比例。","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586332,"discussion_content":"great","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662110032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355744,"user_name":"小林子","can_delete":false,"product_type":"c1","uid":1145383,"ip_address":"上海","ucode":"058C95ECBFE422","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/27/77ca2bc2.jpg","comment_is_top":false,"comment_ctime":1661731131,"is_pvip":true,"replies":[{"id":"129472","content":"当然是可以的，像apiservier就在kube-system。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1661743718,"ip_address":"上海","comment_id":355744,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10251665723","product_id":100114501,"comment_content":"老师，不同 namespace 的 service，pod 可以通信吗","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585642,"discussion_content":"当然是可以的，像apiservier就在kube-system。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661743718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1126593,"avatar":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","nickname":"密码123456","note":"","ucode":"9889463CC0EA71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585633,"discussion_content":"之前展示的ingress的例子，不就是跨命名空间的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661740464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"江苏"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360626,"user_name":"邵涵","can_delete":false,"product_type":"c1","uid":1069135,"ip_address":"上海","ucode":"43A16551A82F2F","user_header":"","comment_is_top":false,"comment_ctime":1666697745,"is_pvip":false,"replies":[{"id":"131226","content":"是的，理解的很对，因为api是按逻辑功能分组的。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1666772677,"ip_address":"上海","comment_id":360626,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1666697745","product_id":100114501,"comment_content":"“其他 API 对象配额，使用 count&#47;name.group 的形式，比如 count&#47;jobs.batch、count&#47;deployments.apps”<br>老师，请问这里的“group”是指什么？是kubectl api-resources中APIVERSION列中的内容吗？比如deployment的APIVERSION是“apps&#47;v1”，job和cronjob的APIVERSION是“batch&#47;v1”","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591711,"discussion_content":"是的，理解的很对，因为api是按逻辑功能分组的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666772677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357465,"user_name":"benny","can_delete":false,"product_type":"c1","uid":1137956,"ip_address":"北京","ucode":"CE3F0927248FF3","user_header":"https://static001.geekbang.org/account/avatar/00/11/5d/24/ccecf795.jpg","comment_is_top":false,"comment_ctime":1663291510,"is_pvip":true,"replies":[{"id":"130100","content":"28讲里用resources字段可以调整容器的资源，是不是就可以了。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1663300185,"ip_address":"北京","comment_id":357465,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1663291510","product_id":100114501,"comment_content":"老师，请问默认的容器资源限制比较少。如何针对单个容器调大资源呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587806,"discussion_content":"28讲里用resources字段可以调整容器的资源，是不是就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663300186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356990,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1111985,"ip_address":"北京","ucode":"9DADD72C193296","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","comment_is_top":false,"comment_ctime":1662802320,"is_pvip":true,"replies":[{"id":"129911","content":"和namespace无关，是Kubernetes对节点的限制，应该也是可以改的。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1662868220,"ip_address":"北京","comment_id":356990,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1662802320","product_id":100114501,"comment_content":"老师，K8S默认一个节点上的pod调度数是110。 这个是用namespace限制的吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587177,"discussion_content":"和namespace无关，是Kubernetes对节点的限制，应该也是可以改的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1662868221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035744,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cd/e0/c85bb948.jpg","nickname":"朱雯","note":"","ucode":"064C45FBF6B51F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589137,"discussion_content":"这个我感觉可以从逻辑上分析，因为namespace是跨节点的，你单个的namespace对某个节点的限制，是改变不了整个节点的情况的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664441481,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国香港"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356935,"user_name":"Frank","can_delete":false,"product_type":"c1","uid":1111985,"ip_address":"北京","ucode":"9DADD72C193296","user_header":"https://static001.geekbang.org/account/avatar/00/10/f7/b1/982ea185.jpg","comment_is_top":false,"comment_ctime":1662710398,"is_pvip":true,"replies":[{"id":"129895","content":"<br>1.是在容器级别限制资源，不是Pod级别。<br><br>2.当然了，node不归namespace管理。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1662724908,"ip_address":"北京","comment_id":356935,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1662710398","product_id":100114501,"comment_content":"1. 老师请问 limitrange 对  Container 的限制 是指什么哦？<br>2. 不同namespace的对象 ，可能运行在同一Node上吧？ ","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587066,"discussion_content":"\n1.是在容器级别限制资源，不是Pod级别。\n\n2.当然了，node不归namespace管理。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1662724908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356064,"user_name":"YueShi","can_delete":false,"product_type":"c1","uid":1625530,"ip_address":"北京","ucode":"8F7AFAE4641A7D","user_header":"https://static001.geekbang.org/account/avatar/00/18/cd/ba/3a348f2d.jpg","comment_is_top":false,"comment_ctime":1661942519,"is_pvip":true,"replies":[{"id":"129625","content":"这个话题就比较大了，超出了技术范围。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1661997245,"ip_address":"北京","comment_id":356064,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1661942519","product_id":100114501,"comment_content":"用名字空间来管理生产集群呢？<br><br>一切的软件架构都反应到组织架构上<br>按  事业群.部门.组.业务","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586123,"discussion_content":"这个话题就比较大了，超出了技术范围。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661997245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355945,"user_name":"戒贪嗔痴","can_delete":false,"product_type":"c1","uid":3017168,"ip_address":"北京","ucode":"D53EA3525DBD71","user_header":"https://static001.geekbang.org/account/avatar/00/2e/09/d0/8609bddc.jpg","comment_is_top":false,"comment_ctime":1661864606,"is_pvip":true,"replies":[{"id":"129555","content":"当然可以，namespace的用法很灵活，可以随意划分，和自己的业务场景结合就行。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1661912415,"ip_address":"北京","comment_id":355945,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1661864606","product_id":100114501,"comment_content":"名字空间既然是逻辑上的概念，那么我觉得可以用在业务从开发到上线的环境上，从测试，预发到生产，每种环境下再细分前端、后端、中间件等，表面理解，如有错误，还望指正。😂","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585932,"discussion_content":"当然可以，namespace的用法很灵活，可以随意划分，和自己的业务场景结合就行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661912415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355842,"user_name":"新时代农民工","can_delete":false,"product_type":"c1","uid":1225689,"ip_address":"北京","ucode":"0AA60DEDF6C062","user_header":"https://static001.geekbang.org/account/avatar/00/12/b3/d9/cf061262.jpg","comment_is_top":false,"comment_ctime":1661780504,"is_pvip":false,"replies":[{"id":"129519","content":"这个可能不太会讲了，属于管理员级别的，我个人用的也不多，sorry。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1661825122,"ip_address":"北京","comment_id":355842,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1661780504","product_id":100114501,"comment_content":"老师后续会讲讲RBAC吗","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585780,"discussion_content":"这个可能不太会讲了，属于管理员级别的，我个人用的也不多，sorry。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661825122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355806,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1661762436,"is_pvip":true,"replies":[{"id":"129503","content":"<br>1.这个感觉有点勉强，我还真没面过Kubernetes相关的岗位，而且Kubernetes的知识面太广了，难免挂一漏万。<br><br>2.不矛盾，显然会取两个限制的较小的那个。<br><br>3.Kubernetes的namespace是一个逻辑管理的概念，而容器的namespace是一个实打实的隔离技术，可以再看前面的复习一下。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1661764305,"ip_address":"北京","comment_id":355806,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1661762436","product_id":100114501,"comment_content":"请教老师几个问题：<br>Q1：最后能否以加餐形式出一期面试题讲解？<br>群里有同学去面试k8s挂了，能否讲几个典型面试题？<br><br>Q2：limitRange的定义不矛盾吗？<br>文中“容器的资源上限是 0.5 的 CPU 和 100MB 内存，每个 Pod 的最大使用量是 0.8 的 CPU 和 200MB 内存。”， 前面部分是上限，后面部分是最大值，后边的大于前面的啊，不矛盾吗？<br><br>Q3：k8s的namespace和容器的namespace有什么区别？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585700,"discussion_content":"\n1.这个感觉有点勉强，我还真没面过Kubernetes相关的岗位，而且Kubernetes的知识面太广了，难免挂一漏万。\n\n2.不矛盾，显然会取两个限制的较小的那个。\n\n3.Kubernetes的namespace是一个逻辑管理的概念，而容器的namespace是一个实打实的隔离技术，可以再看前面的复习一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661764306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","nickname":"dao","note":"","ucode":"4181FB270462CF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588773,"discussion_content":"Q2， 一个 Pod 可以包含多个容器。\nQ3，容器技术的 namespace 是 Linux 操作系统的一个特性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664093626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"新加坡"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}