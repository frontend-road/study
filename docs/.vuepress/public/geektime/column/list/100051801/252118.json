{"id":252118,"title":"22 | 知识串讲（下）：带你开发一个书店应用","content":"<p>你好，我是Chrono。</p><p>在上节课里，我给出了一个书店程序的例子，讲了项目设计、类图和自旋锁、Lua配置文件解析等工具类，搭建出了应用的底层基础。</p><p>今天，我接着讲剩下的主要业务逻辑部分，也就是数据的表示与统计，还有数据的接收和发送主循环，最终开发出完整的应用程序。</p><p>这里我再贴一下项目的UML图，希望给你提个醒。借助图形，我们往往能够更好地把握程序的总体结构。</p><p>图中间标注为绿色的两个类SalesData、Summary和两个lambda表达式recv_cycle、log_cycle是今天这节课的主要内容，实现了书店程序的核心业务逻辑，所以需要你重点关注它。</p><p><img src=\"https://static001.geekbang.org/resource/image/f0/ef/f08637cf6b49316c230d058cb2a9f5ef.jpg?wh=792*525\" alt=\"\"></p><h2>数据定义</h2><p>首先，我们来看一下怎么表示书本的销售记录。这里用的是SalesData类，它是书店程序数据统计的基础。</p><p>如果是实际的项目，SalesData会很复杂，因为一本书的相关信息有很多。但是，我们的这个例子只是演示，所以就简化了一些，基本的成员只有三个：ID号、销售册数和销售金额。</p><p>上节课，在讲自旋锁、配置文件等类时，我只是重点说了说代码内部逻辑，没有完整地细说，到底该怎么应用前面讲过的那些C++编码准则。</p><p>那么，这次在定义SalesData类的时候，我就集中归纳一下。这些都是我写C++代码时的“惯用法”，你也可以在自己的代码里应用它们，让代码更可读可维护：</p><!-- [[[read_end]]] --><ul>\n<li>适当使用空行分隔代码里的逻辑段落；</li>\n<li>类名使用CamelCase，函数和变量用snake_case，成员变量加“m_”前缀；</li>\n<li>在编译阶段使用静态断言，保证整数、浮点数的精度；</li>\n<li>使用final终结类继承体系，不允许别人产生子类；</li>\n<li>使用default显示定义拷贝构造、拷贝赋值、转移构造、转移赋值等重要函数；</li>\n<li>使用委托构造来编写多个不同形式的构造函数；</li>\n<li>成员变量在声明时直接初始化；</li>\n<li>using定义类型别名；</li>\n<li>使用const来修饰常函数；</li>\n<li>使用noexcept标记不抛出异常，优化函数。</li>\n</ul><p>列的点比较多，你可以对照着源码来进行理解：</p><pre><code>class SalesData final                   // final禁止继承\n{\npublic:\n  using this_type = SalesData;         // 自己的类型别名\npublic:\n  using string_type       = std::string;         // 外部的类型别名\n  using string_view_type  = const std::string&amp;;\n  using uint_type         = unsigned int;\n  using currency_type     = double;\n\n  STATIC_ASSERT(sizeof(uint_type) &gt;= 4);          // 静态断言\n  STATIC_ASSERT(sizeof(currency_type) &gt;= 4); \npublic:\n  SalesData(string_view_type id, uint_type s, currency_type r) noexcept         // 构造函数，保证不抛出异常\n      : m_id(id), m_sold(s), m_revenue(r)\n  {}  \n\n  SalesData(string_view_type id) noexcept         // 委托构造\n      : SalesData(id, 0, 0)\n  {}  \npublic:\n  SalesData() = default;                 // 显式default\n ~SalesData() = default;\n\n  SalesData(const this_type&amp;) = default;\n  SalesData&amp; operator=(const this_type&amp;) = default;\n\n  SalesData(this_type&amp;&amp; s) = default;  // 显式转移构造\n  SalesData&amp; operator=(this_type&amp;&amp; s) = default;\nprivate:\n  string_type m_id        = &quot;&quot;;         // 成员变量初始化\n  uint_type   m_sold      = 0;\n  uint_type   m_revenue   = 0;\npublic:\n  void inc_sold(uint_type s) noexcept        // 不抛出异常\n  {\n      m_sold += s;\n  }\npublic:\n  string_view_type id() const noexcept       // 常函数，不抛出异常\n  {\n      return m_id;\n  }\n\n  uint_type sold() const noexcept           // 常函数，不抛出异常\n  {\n      return m_sold;\n  }\n};\n</code></pre><p>需要注意的是，代码里显式声明了转移构造和转移赋值函数，这样，在放入容器的时候就避免了拷贝，能提高运行效率。</p><h2>序列化</h2><p>SalesData作为销售记录，需要在网络上传输，所以就需要序列化和反序列化。</p><p>这里我选择的是MessagePack（<a href=\"https://time.geekbang.org/column/article/245880\">第15讲</a>），我看重的是它小巧轻便的特性，而且用起来也很容易，只要在类定义里添加一个宏，就可以实现序列化：</p><pre><code>public:\n  MSGPACK_DEFINE(m_id, m_sold, m_revenue);  // 实现MessagePack序列化功能\n</code></pre><p>为了方便使用，还可以为SalesData增加一个专门序列化的成员函数pack()：</p><pre><code>public:\n  msgpack::sbuffer pack() const          // 成员函数序列化\n  {\n      msgpack::sbuffer sbuf;\n      msgpack::pack(sbuf, *this);\n\n      return sbuf;\n  }\n</code></pre><p>不过你要注意，写这个函数的同时也给SalesData类增加了点复杂度，在一定程度上违反了单一职责原则和接口隔离原则。</p><p>如果你在今后的实际项目中遇到类似的问题，就要权衡后再做决策，确认引入新功能带来的好处大于它增加的复杂度，尽量抵制扩充接口的诱惑，否则很容易写出“巨无霸”类。</p><h2>数据存储与统计</h2><p>有了销售记录之后，我们就可以定义用于数据存储和统计的Summary类了。</p><p>Summary类依然要遵循刚才的那些基本准则。从UML类图里可以看到，它关联了好几个类，所以类型别名对于它来说就特别重要，不仅可以简化代码，也方便后续的维护，你可要仔细看一下源码：</p><pre><code>class Summary final                       // final禁止继承\n{\npublic:\n  using this_type = Summary;               // 自己的类型别名\npublic:\n  using sales_type        = SalesData;       // 外部的类型别名\n  using lock_type         = SpinLock;\n  using lock_guard_type   = SpinLockGuard;\n\n  using string_type       = std::string;\n  using map_type          =                  // 容器类型定义\n          std::map&lt;string_type, sales_type&gt;;\n  using minmax_sales_type =\n          std::pair&lt;string_type, string_type&gt;;\npublic:\n  Summary() = default;                   // 显式default\n ~Summary() = default;\n\n  Summary(const this_type&amp;) = delete;    // 显式delete\n  Summary&amp; operator=(const this_type&amp;) = delete;\nprivate:\n  mutable lock_type   m_lock;            // 自旋锁\n  map_type            m_sales;           // 存储销售记录\n};\n</code></pre><p>Summary类的职责是存储大量的销售记录，所以需要选择恰当的容器。</p><p>考虑到销售记录不仅要存储，还有对数据的排序要求，所以我选择了可以在插入时自动排序的有序容器map。</p><p>不过要注意，这里我没有定制比较函数，所以默认是按照书号来排序的，不符合按销售量排序的要求。</p><p>（如果要按销售量排序的话就比较麻烦，因为不能用随时变化的销量作为Key，而标准库里又没有多索引容器，所以，你可以试着把它改成unordered_map，然后再用vector暂存来排序）。</p><p>为了能够在多线程里正确访问，Summary使用自旋锁来保护核心数据，在对容器进行任何操作前都要获取锁。锁不影响类的状态，所以要用mutable修饰。</p><p>因为有了RAII的SpinLockGuard（第21讲），所以自旋锁用起来很优雅，直接构造一个变量就行，不用担心异常安全的问题。你可以看一下成员函数add_sales()的代码，里面还用到了容器的查找算法。</p><pre><code>public:\n  void add_sales(const sales_type&amp; s)       // 非const\n  {\n    lock_guard_type guard(m_lock);          // 自动锁定，自动解锁\n\n    const auto&amp; id = s.id();                // const auto自动类型推导\n\n    if (m_sales.find(id) == m_sales.end()) {// 查找算法\n        m_sales[id] = s;                    // 没找到就添加元素\n        return;\n    }\n\n    m_sales[id].inc_sold(s.sold());        // 找到就修改销售量\n    m_sales[id].inc_revenue(s.revenue());\n  }\n</code></pre><p>Summary类里还有一个特别的统计功能，计算所有图书销量的第一名和最后一名。这用到了minmax_element算法（<a href=\"https://time.geekbang.org/column/article/243357\">第13讲</a>）。又因为比较规则是销量，而不是ID号，所以还要用lambda表达式自定义比较函数：</p><pre><code>public:\n  minmax_sales_type minmax_sales() const    //常函数\n  {\n    lock_guard_type guard(m_lock);          // 自动锁定，自动解锁\n\n    if (m_sales.empty()) {                  // 容器空则不处理\n      return minmax_sales_type();\n    }\n\n    auto ret = std::minmax_element(        // 求最大最小值\n      std::begin(m_sales), std::end(m_sales),// 全局函数获取迭代器\n      [](const auto&amp; a, const auto&amp; b)    // 匿名lambda表达式\n      {\n          return a.second.sold() &lt; b.second.sold();\n      });\n\n    auto min_pos = ret.first;            // 返回的是两个迭代器位置\n    auto max_pos = ret.second;\n\n    return {min_pos-&gt;second.id(), max_pos-&gt;second.id()};\n  }\n</code></pre><h2>服务端主线程</h2><p>好了，所有的功能类都开发完了，现在就可以把它们都组合起来了。</p><p>因为客户端程序比较简单，只是序列化，再用ZMQ发送，所以我就不讲了，你可以课下去看<a href=\"https://github.com/chronolaw/cpp_study/blob/master/section5/client.cpp\">GitHub</a>上的源码，今天我主要讲服务器端。</p><p>在main()函数开头，首先要加载配置文件，然后是数据存储类Summary，再定义一个用来计数的原子变量count（<a href=\"https://time.geekbang.org/column/article/245259\">第14讲</a>），这些就是程序运行的全部环境数据：</p><pre><code>Config conf;                  // 封装读取Lua配置文件\nconf.load(&quot;./conf.lua&quot;);      // 解析配置文件\n\nSummary sum;                  // 数据存储和统计\nstd::atomic_int count {0};    // 计数用的原子变量\n</code></pre><p>接下来的服务器主循环，我使用了lambda表达式，引用捕获上面的那些变量：</p><pre><code>auto recv_cycle = [&amp;]()      // 主循环lambda表达式\n{\n\t...\n}; \n</code></pre><p>主要的业务逻辑其实很简单，就是ZMQ接收数据，然后MessagePack反序列化，存储数据。</p><p>不过为了避免阻塞、充分利用多线程，我在收到数据后，就把它包装进智能指针，再扔到另外一个线程里去处理了。这样主循环就只接收数据，不会因为反序列化、插入、排序等大计算量的工作而阻塞。</p><p>我在代码里加上了详细的注释，你一定要仔细看、认真理解：</p><pre><code>auto recv_cycle = [&amp;]()               // 主循环lambda表达式\n{\n  using zmq_ctx = ZmqContext&lt;1&gt;;       // ZMQ的类型别名\n\n  auto sock = zmq_ctx::recv_sock();   // 自动类型推导获得接收Socket\n\n  sock.bind(                           // 绑定ZMQ接收端口 \n    conf.get&lt;string&gt;(&quot;config.zmq_ipc_addr&quot;));   // 读取Lua配置文件\n\n  for(;;) {                           // 服务器无限循环\n    auto msg_ptr =                   // 自动类型推导获得智能指针\n      std::make_shared&lt;zmq_message_type&gt;();\n\n    sock.recv(msg_ptr.get());        // ZMQ阻塞接收数据\n\n    ++count;                          // 增加原子计数\n \n    std::thread(            // 再启动一个线程反序列化存储，没有用async\n    [&amp;sum, msg_ptr]()                // 显式捕获，注意！！\n    {\n        SalesData book;\n\n        auto obj = msgpack::unpack(      // 反序列化\n                    msg_ptr-&gt;data&lt;char&gt;(), msg_ptr-&gt;size()).get();\n        obj.convert(book);\n\n        sum.add_sales(book);            // 存储数据\n    }).detach();                        // 分离线程，异步运行\n  }                                     // for(;;)结束\n};                                      // recv_cycle lambda\n</code></pre><p>你要特别注意lambda表达式与智能指针的配合方式，要用值捕获而不能是引用捕获，否则，在线程运行的时候，智能指针可能会因为离开作用域而被销毁，引用失效，导致无法预知的错误。</p><p>有了这个lambda，现在就可以用async（<a href=\"https://time.geekbang.org/column/article/245259\">第14讲</a>）来启动服务循环：</p><pre><code>auto fu1 = std::async(std::launch::async, recv_cycle);\nfu1.wait();\n</code></pre><p>现在我们就能够接收客户端发过来的数据，开始统计了。</p><h2>数据外发线程</h2><p>recv_cycle是接收前端发来的数据，我们还需要一个线程把统计数据外发出去。同样，我实现一个lambda表达式：log_cycle。</p><p>它采用了HTTP协议，把数据打包成JSON，发送到后台的某个RESTful服务器。</p><p>搭建符合要求的Web服务不是件小事，所以这里为了方便测试，我联动了一下《透视HTTP协议》，用那里的OpenResty写了个的HTTP接口：接收POST数据，然后打印到日志里，你可以参考<a href=\"https://time.geekbang.org/column/article/146833\">第41讲</a>在Linux上搭建这个后台服务。</p><p>log_cycle其实就是一个简单的HTTP客户端，所以代码的处理逻辑比较好理解，要注意的知识点主要有三个，都是前面讲过的：</p><ul>\n<li>读取Lua配置中的HTTP服务器地址和周期运行时间（<a href=\"https://time.geekbang.org/column/article/245905\">第17讲</a>）；</li>\n<li>JSON序列化数据（<a href=\"https://time.geekbang.org/column/article/245880\">第15讲</a>）；</li>\n<li>HTTP客户端发送请求（<a href=\"https://time.geekbang.org/column/article/245900\">第16讲</a>）。</li>\n</ul><p>你如果有点忘了，可以回顾一下，再结合下面的代码来理解、学习：</p><pre><code>auto log_cycle = [&amp;]()              // 外发循环lambda表达式\n{\n  // 获取Lua配置文件里的配置项\n  auto http_addr = conf.get&lt;string&gt;(&quot;config.http_addr&quot;);\n  auto time_interval = conf.get&lt;int&gt;(&quot;config.time_interval&quot;);\n\n  for(;;) {                        // 无限循环\n    std::this_thread::sleep_for(time_interval * 1s);  // 线程睡眠等待\n\n    json_t j;                        // JSON序列化数据\n    j[&quot;count&quot;] = static_cast&lt;int&gt;(count);\n    j[&quot;minmax&quot;] = sum.minmax_sales();\n\n    auto res = cpr::Post(            // 发送HTTP POST请求\n               cpr::Url{http_addr},\n               cpr::Body{j.dump()},\n               cpr::Timeout{200ms}  // 设置超时时间\n    );\n\n    if (res.status_code != 200) {    // 检查返回的状态码\n        cerr &lt;&lt; &quot;http post failed&quot; &lt;&lt; endl;\n    }\n  }                                   // for(;;)\n};                                    // log_cycle lambda\n</code></pre><p>然后，还是要在主线程里用async()函数来启动这个lambda表达式，让它在后台定时上报数据。</p><pre><code>auto fu2 = std::async(std::launch::async, log_cycle);\n</code></pre><p>这样，整个书店程序就全部完成了，试着去编译运行一下看看吧。</p><h2>小结</h2><p>好了，今天我就把书店示例程序从头到尾给讲完了。可以看到，代码里面应用了很多我们之前讲的C++特性，这些特性互相重叠、嵌套，紧凑地集成在了这个不是很大的程序里，代码整齐，逻辑清楚，很容易就实现了多线程、高性能的服务端程序，开发效率和运行效率都非常高。</p><p>我再对今天代码里的要点做个简单的小结：</p><ol>\n<li>编写类的时候要用好final、default、using、const等关键字，从代码细节着手提高效率和安全性；</li>\n<li>对于中小型项目，序列化格式可以选择小巧高效的MessagePack；</li>\n<li>在存储数据时，应当选择恰当的容器，有序容器在插入元素时会自动排序，但注意排序的依据只能是Key；</li>\n<li>在使用lambda表达式的时候，要特别注意捕获变量的生命周期，如果是在线程里异步执行，应当尽量用智能指针的值捕获，虽然有点麻烦，但比较安全。</li>\n</ol><p>那么，这些代码是否对你的工作有一些启迪呢？你是否能够把这些知识点成功地应用到实际项目里呢？希望你能多学习我在课程里给你分享的开发技巧和经验建议，熟练地掌握它们，写出媲美甚至超越示例代码的C++程序。</p><h2>课下作业</h2><p>最后是课下作业时间，这次就不是思考题，全是动手题，是时候检验你的编码实战能力了：</p><ol>\n<li>添加try-catch，处理可能发生的异常（<a href=\"https://time.geekbang.org/column/article/240292\">第9讲</a>）；</li>\n<li>写一个动态库，用Lua/Python调用C++发送请求，以脚本的方式简化客户端测试（<a href=\"https://time.geekbang.org/column/article/245905\">第17讲</a>）；</li>\n<li>把前端与服务器的数据交换格式改成JSON或者ProtoBuf（<a href=\"https://time.geekbang.org/column/article/245880\">第15讲</a>），然后用工厂类封装序列化和反序列化功能，隔离接口（<a href=\"https://time.geekbang.org/column/article/248880\">第19讲</a>、<a href=\"https://time.geekbang.org/column/article/248883\">第20讲</a>）。</li>\n</ol><p>再补充一点，在动手实践的过程中，你还可以顺便练习一下Git的版本管理：不要直接在master分支上开发，而是开几个不同的feature分支，测试完确认没有问题后，再合并到主干上。</p><p>欢迎你在留言区写下你的思考和答案，如果觉得今天的内容对你有所帮助，也欢迎分享给你的朋友。我们下节课见。</p><p><img src=\"https://static001.geekbang.org/resource/image/d1/0a/d11b4c0f976109451d21bde86fdf6b0a.jpg?wh=2500*2337\" alt=\"\"></p>","comments":[{"had_liked":false,"id":230176,"user_name":"robonix","can_delete":false,"product_type":"c1","uid":1212323,"ip_address":"","ucode":"866EC82EDA455B","user_header":"https://static001.geekbang.org/account/avatar/00/12/7f/a3/23540579.jpg","comment_is_top":false,"comment_ctime":1593303751,"is_pvip":false,"replies":[{"id":"84958","content":"需要理解转移语义，它的目的就是要把原对象的内容给“偷走”，转移到新的对象里。<br><br>这样原对象就空了，但数据依然是有效的，比如0、nullptr，只是没有了实际意义，可以被安全、轻量地销毁。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593307300,"ip_address":"","comment_id":230176,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18773172935","product_id":100051801,"comment_content":"代码里显式声明了转移构造和转移赋值函数，这样，在放入容器的时候就避免了拷贝，能提高运行效率。<br>那么被转移的类会被掏空了，使得内部数据无效吗？","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499793,"discussion_content":"需要理解转移语义，它的目的就是要把原对象的内容给“偷走”，转移到新的对象里。\n\n这样原对象就空了，但数据依然是有效的，比如0、nullptr，只是没有了实际意义，可以被安全、轻量地销毁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593307300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314626,"user_name":"wine99","can_delete":false,"product_type":"c1","uid":1682531,"ip_address":"","ucode":"F22F3E23E6F851","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/h6unp47tSLwwUZgnd3tuSSSEEOvXrC8aTI38ESYzsVZU8zZLMxvLDv8Zw2fmhr9M8CM46HCvQvicoutzwTjwNaA/132","comment_is_top":false,"comment_ctime":1633264802,"is_pvip":false,"replies":[{"id":"113963","content":"是的，泛型的lambda就是以auto作为参数类型，让编译器来推导类型。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1633306444,"ip_address":"","comment_id":314626,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10223199394","product_id":100051801,"comment_content":"老师课外小贴士中说的“使用了泛型的lambda”，是指lambda的入口参数用了auto吗？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527742,"discussion_content":"是的，泛型的lambda就是以auto作为参数类型，让编译器来推导类型。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633306444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310915,"user_name":"Geek_6427cc","can_delete":false,"product_type":"c1","uid":2687340,"ip_address":"","ucode":"E068345365B611","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI6bWC6dlUWtJBNHX12ZQ7a7Jp6iamGECic0oLzzlo2QqKmorwbGcsKaZbCDLdm4R9ProCcVX79sx4Q/132","comment_is_top":false,"comment_ctime":1630982367,"is_pvip":false,"replies":[{"id":"112726","content":"这个token就是一个非常简单的鉴权认证，如果token里不是字符串cpp@2020，就直接返回403，可以防止其他应用误入这个uri。<br><br>如果接触过api网关、restful调用，可能就会理解它的作用了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1631063532,"ip_address":"","comment_id":310915,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10220916959","product_id":100051801,"comment_content":"老师您好，想向您请教下，HTTP 服务器地址URL中的token参数有什么作用，在您编写的Lua模块中，判断了这个token参数，不是很理解","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526400,"discussion_content":"这个token就是一个非常简单的鉴权认证，如果token里不是字符串cpp@2020，就直接返回403，可以防止其他应用误入这个uri。\n\n如果接触过api网关、restful调用，可能就会理解它的作用了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631063532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2687340,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI6bWC6dlUWtJBNHX12ZQ7a7Jp6iamGECic0oLzzlo2QqKmorwbGcsKaZbCDLdm4R9ProCcVX79sx4Q/132","nickname":"Geek_6427cc","note":"","ucode":"E068345365B611","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393285,"discussion_content":"好的谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631339446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230177,"user_name":"robonix","can_delete":false,"product_type":"c1","uid":1212323,"ip_address":"","ucode":"866EC82EDA455B","user_header":"https://static001.geekbang.org/account/avatar/00/12/7f/a3/23540579.jpg","comment_is_top":false,"comment_ctime":1593303851,"is_pvip":false,"replies":[{"id":"84957","content":"示例代码，当然都是自己写出来比较好了，可以实践一下编码准则。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593307194,"ip_address":"","comment_id":230177,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10183238443","product_id":100051801,"comment_content":"老师，还想问一下，为啥不用std::lock_guard，自己写一个lock呢，只为了性能嘛？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499794,"discussion_content":"示例代码，当然都是自己写出来比较好了，可以实践一下编码准则。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593307194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229785,"user_name":"有学识的兔子","can_delete":false,"product_type":"c1","uid":1628867,"ip_address":"","ucode":"D1D654B1562FC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","comment_is_top":false,"comment_ctime":1593144622,"is_pvip":false,"replies":[{"id":"84783","content":"<br>1.只要没有显式声明noexcept的地方，其实都应该加上try-catch。<br><br>2.对，用C++写底层接口，然后用Python、lua去调用。<br><br>3.思路很对。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593151888,"ip_address":"","comment_id":229785,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10183079214","product_id":100051801,"comment_content":"1、Thread生成的地方，没有去做异常检查，我不太确定需不需要？<br>2、假如使用python脚本去简化客户端测试，是不是通过PYBIND11的方式把Client.cpp里的接口转化成python能够加载模块，在利用python测试该模块？<br>3.可以将SalesData里面涉及pack和upack的部分拆分出来，用工厂方法进行替换；工厂类可以借用STL将不同类型数据格式和对应工厂类映射起来；在通过配置文件增加该类型的配置，解析到数据类型后，关联到对应的工厂类产生对应的对象，基于此来动态切换实现pack和unpack的数据格式。","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499639,"discussion_content":"\n1.只要没有显式声明noexcept的地方，其实都应该加上try-catch。\n\n2.对，用C++写底层接口，然后用Python、lua去调用。\n\n3.思路很对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593151888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326851,"user_name":"忧天小鸡","can_delete":false,"product_type":"c1","uid":1073947,"ip_address":"","ucode":"A1412BDC108FD6","user_header":"https://static001.geekbang.org/account/avatar/00/10/63/1b/83ac7733.jpg","comment_is_top":false,"comment_ctime":1639721277,"is_pvip":false,"replies":[{"id":"118747","content":"用g++编译生成可执行文件，源码里有注释可以参考。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1639730360,"ip_address":"","comment_id":326851,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5934688573","product_id":100051801,"comment_content":"代码全都看得懂，但我不是服务端啊，这个怎么运行起来，缺少这方面的知识，怎么办？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539501,"discussion_content":"用g++编译生成可执行文件，源码里有注释可以参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639730360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301986,"user_name":"阿辉","can_delete":false,"product_type":"c1","uid":1106216,"ip_address":"","ucode":"57DE50B2426AE1","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/28/91280c40.jpg","comment_is_top":false,"comment_ctime":1626009719,"is_pvip":false,"replies":[{"id":"109278","content":"recv_cycle是服务主循环，首先阻塞在监听端口，有请求过来后才能走后面的流程处理数据。<br><br>参考一下代码里的注释，或者看看其他服务器的代码，应该就能理解了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1626054242,"ip_address":"","comment_id":301986,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5920977015","product_id":100051801,"comment_content":"recv_cycle的for循环的目的是什么？为啥，我运行完成程序，这个for循环只在client执行的时候会执行！因为我打了日志，只有client执行后，才会输出相应日志！","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523142,"discussion_content":"recv_cycle是服务主循环，首先阻塞在监听端口，有请求过来后才能走后面的流程处理数据。\n\n参考一下代码里的注释，或者看看其他服务器的代码，应该就能理解了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626054242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345148,"user_name":"Geek_967e79","can_delete":false,"product_type":"c1","uid":2774691,"ip_address":"","ucode":"D6009585C08FFC","user_header":"","comment_is_top":false,"comment_ctime":1652078957,"is_pvip":false,"replies":[{"id":"125997","content":"try-catch放在哪里就是看个人对错误的控制粒度，有的时候在最外面粒度会太“粗”，在子函数里可能会更容易控制。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1652148617,"ip_address":"","comment_id":345148,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652078957","product_id":100051801,"comment_content":"请问 try...catch函数为什么不写在main中？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571230,"discussion_content":"try-catch放在哪里就是看个人对错误的控制粒度，有的时候在最外面粒度会太“粗”，在子函数里可能会更容易控制。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652148617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":295623,"user_name":"阿辉","can_delete":false,"product_type":"c1","uid":1106216,"ip_address":"","ucode":"57DE50B2426AE1","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/28/91280c40.jpg","comment_is_top":false,"comment_ctime":1622518192,"is_pvip":false,"replies":[{"id":"107348","content":"recv_cycle里只有一个线程，里面其实就相当于标准的socket编程的listen再accept，只不过被zmq封装了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1622521084,"ip_address":"","comment_id":295623,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1622518192","product_id":100051801,"comment_content":"1. recv_cycle：服务器无限循环的目的是什么，是不是因为ZMQ阻塞接收数据，只有请求接受后，循环才会走一遍，之后发起另一个接受消息的线程？<br>2. 如果是这样的化，为什么用这种一直等待的方式接受数据啊，请求过来时，被动调用，是不是就行了啊？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521155,"discussion_content":"recv_cycle里只有一个线程，里面其实就相当于标准的socket编程的listen再accept，只不过被zmq封装了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622521084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288849,"user_name":"Geek_8866d4","can_delete":false,"product_type":"c1","uid":2435064,"ip_address":"","ucode":"34EAED72C2FAD0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ia5NFICdEuzaQ8Vib0depvkB6UmxPBFib51aClSJYfCIa7tn2nXauddwxDvbxYuQ9UeRGVICLfTtDJysnDJ5EfQcg/132","comment_is_top":false,"comment_ctime":1618729983,"is_pvip":false,"replies":[{"id":"104865","content":"&amp;&amp;表示右值引用，意思是对象是临时的，可以被move优化。<br><br>这个函数是C++11引入的转移构造函数，构造的时候可以把函数参数s里的东西都给“偷”到自己内部，降低对象创建的成本。<br><br>C++里的概念很多，如果遇到暂时不了解的也不要着急，说明你可能暂时用不上，探索其他更有用的地方，不要为一两个小特性分心。<br><br>有其他不明白的可以再问。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1618787191,"ip_address":"","comment_id":288849,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618729983","product_id":100051801,"comment_content":"SalesData(SalesData&amp;&amp; s) noexcept  罗老师， 你这个引用的引用怎么理解呢，我的c++语言功底比较薄弱，您的这个代码我很多都不是很理解","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518749,"discussion_content":"&amp;amp;&amp;amp;表示右值引用，意思是对象是临时的，可以被move优化。\n\n这个函数是C++11引入的转移构造函数，构造的时候可以把函数参数s里的东西都给“偷”到自己内部，降低对象创建的成本。\n\nC++里的概念很多，如果遇到暂时不了解的也不要着急，说明你可能暂时用不上，探索其他更有用的地方，不要为一两个小特性分心。\n\n有其他不明白的可以再问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618787191,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248053,"user_name":"Confidant.","can_delete":false,"product_type":"c1","uid":1660039,"ip_address":"","ucode":"6E137F863906B0","user_header":"https://static001.geekbang.org/account/avatar/00/19/54/87/3b1f9de4.jpg","comment_is_top":false,"comment_ctime":1599993494,"is_pvip":false,"replies":[{"id":"91173","content":"是安装难吗？可以用docker镜像，里面给安装好了。“docker pull chronolaw&#47;cpp_study”","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1600041372,"ip_address":"","comment_id":248053,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599993494","product_id":100051801,"comment_content":"cpr这个东西装起来有点难受啊","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505557,"discussion_content":"是安装难吗？可以用docker镜像，里面给安装好了。“docker pull chronolaw/cpp_study”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600041372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229906,"user_name":"有学识的兔子","can_delete":false,"product_type":"c1","uid":1628867,"ip_address":"","ucode":"D1D654B1562FC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIicr82CnrdEjibibAvyeKRQHszSzIAqoCWxN0kqC442XcjEae6S9j6NDtKLpg4Da4CUQQeUFUicWqiaDw/132","comment_is_top":false,"comment_ctime":1593183301,"is_pvip":false,"replies":[{"id":"84843","content":"可以把zmq的调用封装起来，不对外暴露zmq接口，Python调用只传递几个参数。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593215760,"ip_address":"","comment_id":229906,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593183301","product_id":100051801,"comment_content":"我碰到一个pybind11的问题：代码Client.cpp使用了第三方zmq组件，如果要转化成python可以调用的模块，除了适配Client.cpp自身接口需要用pybind11声明外，zmq涉及到的接口也要做么？ <br>看转换的格式比较固定，是不是有自动化的工具来做这件事呢？ ","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499690,"discussion_content":"可以把zmq的调用封装起来，不对外暴露zmq接口，Python调用只传递几个参数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593215760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229565,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1593059954,"is_pvip":false,"replies":[{"id":"84742","content":"unique_ptr只能管理对象的生命周期，自动销毁堆上的对象。而SpinLockGuard的目的是在生命周期结束时自动解锁。<br><br>虽然用的都是RAII技术，但两者的行为、作用不同。<br>","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593067347,"ip_address":"","comment_id":229565,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593059954","product_id":100051801,"comment_content":"为什么不用智能指针 unique_ptr，而是一定要自己重新写一个 SpinLockGuard？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499537,"discussion_content":"unique_ptr只能管理对象的生命周期，自动销毁堆上的对象。而SpinLockGuard的目的是在生命周期结束时自动解锁。\n\n虽然用的都是RAII技术，但两者的行为、作用不同。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593067347,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229551,"user_name":"LDxy","can_delete":false,"product_type":"c1","uid":1188710,"ip_address":"","ucode":"956432CE7B7761","user_header":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","comment_is_top":false,"comment_ctime":1593056010,"is_pvip":false,"replies":[{"id":"84736","content":"可以看一下21讲，这个服务器前面是前端服务，不是直接的客户端，当然，说是客户端也可以，毕竟是示例程序，不那么严格。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593060122,"ip_address":"","comment_id":229551,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593056010","product_id":100051801,"comment_content":"课下作业第3应该说的是客户端和服务器端吧","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499533,"discussion_content":"可以看一下21讲，这个服务器前面是前端服务，不是直接的客户端，当然，说是客户端也可以，毕竟是示例程序，不那么严格。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593060122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229515,"user_name":"木瓜777","can_delete":false,"product_type":"c1","uid":1512537,"ip_address":"","ucode":"FC52A499AF6374","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/aFAYPyw7ywC1xE9h1qibnTBwtWn2ClJqlicy5cMomhZVaruMyqSq76wMkS279mUaGhrLGwWo9ZnW0WCWfmMovlXw/132","comment_is_top":false,"comment_ctime":1593047419,"is_pvip":false,"replies":[{"id":"84735","content":"每个请求开新线程的代价是比较高的，但课程里的代码只是为了演示目的，实际项目里最好用线程池。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593060004,"ip_address":"","comment_id":229515,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1593047419","product_id":100051801,"comment_content":"每次接受请求，都开启一个线程，是否合理？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499515,"discussion_content":"每个请求开新线程的代价是比较高的，但课程里的代码只是为了演示目的，实际项目里最好用线程池。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593060004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006263,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5a/b7/f053eda7.jpg","nickname":"康熙","note":"","ucode":"70587D0019D94B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286098,"discussion_content":"老师只是给个示例，实际代码肯定不会这样写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593056190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}