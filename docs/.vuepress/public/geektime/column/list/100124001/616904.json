{"id":616904,"title":"33｜固若金汤：限速器与错误处理","content":"<p>你好，我是郑建勋。</p><p>我们前面的课程，由于一直都是不加限制地并发爬取目标网站，很容易导致被服务器封禁。为了能够正常稳定地访问服务器，我们这节课要给项目增加一个重要的功能：限速器。同时，我们还会介绍在Go中进行错误处理的最佳实践。</p><h2>限速器</h2><p>先来看限速器。很多情况下，不管你是想防止黑客的攻击，防止对资源的访问超过服务器的承载能力，亦或是防止在爬虫项目中被服务器封杀，我们都需要对服务进行限速。</p><p>在爬虫项目中，保持合适的速率也有利于我们稳定地爬取数据。大多数限速的机制是<strong>令牌桶算法（Token Bucket）</strong>来完成的。</p><p>令牌桶算法的原理很简单，我们可以想象这样一个场景，你去海底捞吃饭，里面只有10个座位，我们可以将这10个座位看作是桶的容量。现在，由于座位已经满了，服务员就帮我们叫了个号，我们随即进入到了等待的状态。</p><p>一桌客人吃完之后，下一位并不能马上就座，因为服务员还需要收拾饭桌。由于服务员的数量有限，因此即便很多桌客人同时吃完，也不能立即释放出所有的座位。如果每5分钟收拾好一桌，那么“1桌/5分钟”就叫做令牌放入桶中的速率。轮到我们就餐时，我们占据了一个座位，也就是占据了一个令牌，这时我们就可以开吃了。</p><p>通过上面简化的案例能够看到，令牌桶算法通过控制桶的容量和令牌放入桶中的速率，保证了系统能在最大的处理容量下正常工作。在Go中，我们可以使用官方的限速器实现：<a href=\"http://golang.org/x/time/rate\">golang.org/x/time/rate</a>，它提供了一些简单好用的API。</p><!-- [[[read_end]]] --><p>在 <a href=\"http://golang.org/x/time/rate\">golang.org/x/time/rate</a> 库中，类型Limit表示速率，代表每秒钟放入到桶中的令牌个数。NewLimiter函数中，第一个参数传递的是Limit速率，第二个参数b表示桶的数量。除此之外，库中还有Every函数，它的参数是两个令牌之间的时间间隔，它会转化为对应的Limit速率。</p><pre><code class=\"language-plain\">// Limit defines the maximum frequency of some events.  Limit is\n// represented as number of events per second.  A zero Limit allows no\n// events.\ntype Limit float64\n\n// NewLimiter returns a new Limiter that allows events up to rate r\n// and permits bursts of at most b tokens.\nfunc NewLimiter(r Limit, b int) *Limiter\n\n// Every converts a minimum time interval between events to a Limit.\nfunc Every(interval time.Duration) Limit\n</code></pre><p>生成了Limiter之后，我们一般会调用Limiter的Wait方法等待可用的令牌。其中，参数ctx可以设置超时退出的时间，它可以避免协程一直陷在堵塞状态中。</p><pre><code class=\"language-plain\">func (lim *Limiter) Wait(ctx context.Context) (err error) {\n\treturn lim.WaitN(ctx, 1)\n}\n</code></pre><p>如果没有可用的令牌，当前协程会陷入到堵塞状态。我们用一个例子来说明一下Limiter的使用方法。<br>\n在下面的例子中，rate.NewLimiter生成了一个限速器，其中桶的最大容量为2，rate.Limit(1)表示每隔1秒钟向桶中放入1个令牌。</p><pre><code class=\"language-plain\">package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"golang.org/x/time/rate\"\n\t\"time\"\n)\n\nfunc main() {\n\tlimit := rate.NewLimiter(rate.Limit(1), 2)\n\tfor {\n\t\tif err := limit.Wait(context.Background()); err == nil {\n\t\t\tfmt.Println(time.Now().Format(\"2006-01-02 15:04:05\"))\n\t\t}\n\t}\n}\n</code></pre><p>我们用一个for循环打印当前时间会发现，前两次打印是在同一秒，这是因为桶中一开始有两个令牌可以用。之后，每一次打印都需要间隔一秒，因为每隔一秒钟才会往桶中填充一个令牌。</p><pre><code class=\"language-plain\">2022-11-22 22:31:51\n2022-11-22 22:31:51\n2022-11-22 22:31:52\n2022-11-22 22:31:53\n2022-11-22 22:31:54\n</code></pre><p>我们再尝试使用rate.Every来生成Limit速率：</p><pre><code class=\"language-plain\">func main() {\n\tlimit := rate.NewLimiter(rate.Every(500*time.Millisecond), 2)\n\tfor {\n\t\tif err := limit.Wait(context.Background()); err == nil {\n\t\t\tfmt.Println(time.Now().Format(\"2006-01-02 15:04:05\"))\n\t\t}\n\t}\n}\n</code></pre><p>其中，rate.Every(500*time.Millisecond)表示每500毫秒放入一个令牌，换算过来就是每秒钟放入2个令牌。</p><p>所以我们可以看到，现在每秒钟都会输出两条记录：</p><pre><code class=\"language-plain\">2022-11-22 22:39:28\n2022-11-22 22:39:28\n2022-11-22 22:39:29\n2022-11-22 22:39:29\n2022-11-22 22:39:30\n2022-11-22 22:39:30\n</code></pre><p>刚才我们已经看到了限速器Limiter的基本用法。但有时候我们还会有一些更复杂的需求，例如有多层限速器的需求（细粒度限速器限制每秒的请求，粗粒度限速器限制每分钟、每小时或每天的请求）。</p><p>假设我们的爬虫项目希望每分钟只能够访问10次目标网站，但是只有每分钟的限制是不够的。因为这样我们可能会一秒钟直接访问10次，这样服务器就能直接检测出我们是爬虫机器人了。所以，我们还需要控制一下瞬时的请求量，例如每秒钟访问的频率不超过0.5次。这里我也借鉴了《Concurrency in Go》中多层限速器的设计，在新的Limiter包中将限速器抽象为了RateLimiter接口，<a href=\"http://golang.org/x/time/rate\">golang.org/x/time/rate</a>实现的Limiter自动就实现了该接口：</p><pre><code class=\"language-plain\">package limiter\n\ntype RateLimiter interface {\n\tWait(context.Context) error\n\tLimit() rate.Limit\n}\n</code></pre><p>多层限速器对应的multiLimiter如下：</p><pre><code class=\"language-plain\">\ntype multiLimiter struct {\n\tlimiters []RateLimiter\n}\n\nfunc MultiLimiter(limiters ...RateLimiter) *multiLimiter {\n\tbyLimit := func(i, j int) bool {\n\t\treturn limiters[i].Limit() &lt; limiters[j].Limit()\n\t}\n\tsort.Slice(limiters, byLimit)\n\treturn &amp;multiLimiter{limiters: limiters}\n}\n\nfunc (l *multiLimiter) Wait(ctx context.Context) error {\n\tfor _, l := range l.limiters {\n\t\tif err := l.Wait(ctx); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (l *multiLimiter) Limit() rate.Limit {\n\treturn l.limiters[0].Limit()\n}\n</code></pre><p>其中，MultiLimiter函数用于聚合多个RateLimiter，并将速率由小到大排序。Wait方法会循环遍历多层限速器multiLimiter中所有的限速器并索要令牌，只有当所有的限速器规则都满足后，才会正常执行后续的操作。</p><p>最后，我们生成多层限速器并把它放入爬虫任务Task中，每一个爬虫任务可能有不同的限速。这里生成速率的函数用Per进行了封装，例如limiter.Per(20, 1*time.Minute)代表速率是每1分钟补充20个令牌。</p><pre><code class=\"language-plain\">func main(){\n\t//2秒钟1个\n\tsecondLimit := rate.NewLimiter(limiter.Per(1, 2*time.Second), 1)\n\t//60秒20个\n\tminuteLimit := rate.NewLimiter(limiter.Per(20, 1*time.Minute), 20)\n\tmultiLimiter := limiter.MultiLimiter(secondLimit, minuteLimit)\n\n\tseeds := make([]*collect.Task, 0, 1000)\n\tseeds = append(seeds, &amp;collect.Task{\n\t\tProperty: collect.Property{\n\t\t\tName: \"douban_book_list\",\n\t\t},\n\t\tFetcher: f,\n\t\tStorage: storage,\n\t\tLimit:   multiLimiter,\n\t})\n}\n\nfunc Per(eventCount int, duration time.Duration) rate.Limit {\n\treturn rate.Every(duration / time.Duration(eventCount))\n}\n</code></pre><p>到这里，我们就不再需要在爬取数据时固定休眠了，只要使用限速器来控制速度的就可以了。</p><h2>随机休眠</h2><p>不过，如果使用多层限速器，我们访问服务器的频率会过于稳定。为了模拟人类的行为，我们还可以在限速器的基础上，增加随机休眠。</p><p>如下所示，假设设置的r.Task.WaitTime为2秒，我们这里使用了随机数，获取0-2000毫秒之间的任何一个整数作为休眠时间。</p><pre><code class=\"language-plain\">func (r *Request) Fetch() ([]byte, error) {\n\tif err := r.Task.Limit.Wait(context.Background()); err != nil {\n\t\treturn nil, err\n\t}\n\t// 随机休眠，模拟人类行为\n\tsleeptime := rand.Int63n(r.Task.WaitTime * 1000)\n\ttime.Sleep(time.Duration(sleeptime) * time.Millisecond)\n\treturn r.Task.Fetcher.Get(r)\n}\n</code></pre><p>下面是我通过多层限速器和随机休眠机制成功爬取到的图书数据：<br>\n<img src=\"https://static001.geekbang.org/resource/image/5b/e6/5b433923e28754f926da1681d07f8be6.png?wh=1680x936\" alt=\"图片\"></p><p>上述代码位于<a href=\"https://github.com/dreamerjackson/crawler\">v0.2.8</a>。</p><h2>错误处理</h2><p>介绍了限速器，我们再来看一看Go项目中另一个重要的话题：错误处理。在Go中，错误处理也是被人吐槽得比较多的地方。很多批评者根据自己过去的编程语言的经验，觉得在Go中有很多下面这样的错误处理语法。</p><pre><code class=\"language-plain\">if err != nil{\n\treturn err\n}\n</code></pre><p>确实，在日常实践中，代码常常会变得像下面这样，让人感觉不太优雅。</p><pre><code class=\"language-plain\">func doSomething() error {\n\tif err := foo(); err != nil {\n\t\treturn err\n\t}\n\tif err := bar(); err != nil {\n\t\treturn err\n\t}\n\tif err := baz(); err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n</code></pre><p>然而，Go这种错误处理方式实际上是深思熟虑的结果，它也是有软件工程的经验作为指导的。像Java或C++中错误处理的try…catch语句被<a href=\"https://250bpm.com/blog:4/\">实践证明</a>面临可读性差、难以精准地处理错误等问题。而在Go语言中，错误处理的哲学是强制调用者检查错误，这就保证了代码的可读性和健壮性。</p><p>虽然在某些情况下，这确实使 Go 代码变得冗长，但幸运的是，我们可以使用一些技术来最大程度地降低错误处理的重复性。</p><h3>基本的错误处理方式</h3><p>由于Go中允许多返回值，因此最常见的错误处理方式是将函数的最后一个返回值作为error接口，接口中的Error方法返回错误的信息。</p><pre><code class=\"language-plain\">type error interface {\n    Error() string\n}\n</code></pre><p>这种方式会用errors.New函数来生成一个新的错误，其中参数为本次的错误信息。</p><pre><code class=\"language-plain\">func (r *Request) Check() error {\n\tif r.Depth &gt; r.Task.MaxDepth {\n\t\treturn errors.New(\"max depth limit reached\")\n\t}\n\treturn nil\n}\n</code></pre><p>错误的信息需要清晰表明错误，方便定位问题，例如通过 <code>open not_here.txt: no such file or directory</code> ，我们可以清楚地知道打开的文件不存在。<br>\nerrors.New的实现非常简单，它生成了一个内置的errorString结构体，而 errorString 则实现了Error()方法。</p><pre><code class=\"language-plain\">func New(text string) error {\n\treturn &amp;errorString{text}\n}\n\ntype errorString struct {\n\ts string\n}\n\nfunc (e *errorString) Error() string {\n\treturn e.s\n}\n</code></pre><p>我们也可以采用fmt.Errorf来做一些格式化的输出：</p><pre><code class=\"language-plain\">func (b BrowserFetch) Get(request *Request) ([]byte, error) {\n\tclient := &amp;http.Client{\n\t\tTimeout: b.Timeout,\n\t}\n\tif b.Proxy != nil {\n\t\ttransport := http.DefaultTransport.(*http.Transport)\n\t\ttransport.Proxy = b.Proxy\n\t\tclient.Transport = transport\n\t}\n\treq, err := http.NewRequest(\"GET\", request.Url, nil)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"get url failed:%v\", err)\n\t}\n\t...\n}\n</code></pre><p>fmt.Errorf的好处是，我们可以在之前错误的基础上，附加一些额外的错误信息。<br>\n由于接口的零值为nil，因此在处理函数返回的错误时，我们要通过error != nil来判断是否有错误产生：</p><pre><code class=\"language-plain\">func (s *Crawler) CreateWork() {\n\tfor {\n\t\t...\n\t\tbody, err := req.Fetch()\n\t\tif err != nil {\n\t\t\ts.Logger.Error(\"can't fetch \",\n\t\t\t\tzap.Error(err),\n\t\t\t\tzap.String(\"url\", req.Url),\n\t\t\t)\n\t\t\ts.SetFailure(req)\n\t\t\tcontinue\n\t\t}\n}\n</code></pre><p>此外，在进行错误处理时，我们还要谨慎地处理自定义的错误。我们之前在介绍接口时提到过，当接口为nil时，意味着接口内部的动态类型和动态数据都为nil。所以下面foo函数返回的err不为nil：</p><pre><code class=\"language-plain\">func foo() error {\n\tvar err *os.PathError \n\treturn err\n}\nfunc main() {\n\terr := foo()\n\tfmt.Println(err != nil) // true\n}\n</code></pre><p>另一个类似的例子也是如此：</p><pre><code class=\"language-plain\">func GenerateError(flag bool) error {\n    var genErr StatusErr\n    if flag {\n        genErr = StatusErr{\n            Status: NotFound,\n        }\n    }\n    return genErr\n}\n\nfunc main() {\n    err := GenerateError(true) // **true**\n    fmt.Println(err != nil)\n    err = GenerateError(false) // **true**\n    fmt.Println(err != nil)\n}\n</code></pre><p>那我们应该怎么处理返回的错误呢？应该直接return err 让上层区处理？还是应该先对错误进行一些特殊的处理?</p><p>在实践中我们经常看到一些对错误反复、无意义的处理，最典型的就是日志处理。我们当前的项目也存在这个问题，当爬取网站超时时，会在多个地方打印错误信息，这时常是多余的。</p><pre><code class=\"language-plain\">{\"level\":\"ERROR\",\"ts\":\"2022-11-22T00:22:57.549+0800\",\"caller\":\"collect/collect.go:74\",\"msg\":\"fetch failed\",\"error\":\"Get \\\\\"&lt;https://book.douban.com/subject/1008145/\\\\&gt;\": context deadline exceeded (Client.Timeout exceeded while awaiting headers)\"}\n{\"level\":\"ERROR\",\"ts\":\"2022-11-22T00:22:57.549+0800\",\"caller\":\"engine/schedule.go:263\",\"msg\":\"can't fetch \",\"error\":\"Get \\\\\"&lt;https://book.douban.com/subject/1008145/\\\\&gt;\": context deadline exceeded (Client.Timeout exceeded while awaiting headers)\",\"url\":\"&lt;https://book.douban.com/subject/1008145/&gt;\"}\n</code></pre><p>但如果我们只是return err，又容易失去一些函数堆栈的关键信息，变得只知道最终的错误信息，不知道函数的调用链是如何触发这一问题的。其实，我们可以使用fmt.Errorf包装额外的错误信息来解决这一问题。</p><h3>错误链处理方式</h3><p>在实践中，我们可能还会遇到下面这样的特殊情况。例如tasks是任务的列表，我们希望所有任务都执行，即便前面任务执行失败也不退出。但是下面这样的写法就只能得到最后一个错误的信息：</p><pre><code class=\"language-plain\">func doSomething() error {\n\tvar reserr error\n\tfor _, task := range tasks {\n\t\tif err = f(task);err != nil{\n\t\t\treserr = err\n\t\t}\n\t}\n\n\treturn reserr\n}\n</code></pre><p>还有一种情况是希望能够检测到错误链中的某一类特定错误。举一个例子，foo函数通过读取Read来读取文件中的信息，当读取到最后，Read函数会返回特定的错误类型：io.EOF。而在一些场景需要检测特殊的错误类型来进行额外的逻辑处理。</p><pre><code class=\"language-plain\">func foo() error {\n  f, _ := os.Open(file)\n\tif _, err = f.Read(b); err != nil {\n\t\tfmt.Println(err == io.EOF) // true\n\t}\n}\n</code></pre><p>要解决这个问题，我们首先可能会想到在 foo 函数中使用 fmt.Errorf 包裹信息，但是很快会发现，现在已经失去了io.EOF这个原始的错误类型。</p><p>其实，为了解决这类问题，Go标准库为我们实现了类似错误包装的机制，它可以将多个错误组成一个错误链。要使用错误包装机制有一个非常简单的方法，那就是在使用fmt.Errorf的时候加入一个特殊的格式化符号%w，在下面这段代码中， <code>fmt.Errorf(\"read failed,%w\", err)</code> 将错误err进行了包装。</p><p>这时，我们可以通过errors.Is来判断当前错误中是否包含了原始的io.EOF错误，errors.Is会遍历整个错误链并查找是否有相同的错误。</p><pre><code class=\"language-plain\">func foo() error {\n  f, _ := os.Open(file)\n\tif _, err = f.Read(b); err != nil {\n\t\twarpErr := fmt.Errorf(\"read failed,%w\", err)\n\t\tfmt.Println(errors.Is(warpErr, io.EOF)) // true\n\t}\n}\n</code></pre><p>另外，errors.Unwrap还可以对错误进行解包，如下所示：</p><pre><code class=\"language-plain\">func foo() error {\n  f, _ := os.Open(file)\n\tif _, err = f.Read(b); err != nil {\n\t\twarpErr := fmt.Errorf(\"read failed,%w\", err)\n\t\terr = errors.Unwrap(warpErr)\n\t\tfmt.Println(err == io.EOF) //  true\n\t}\n}\n</code></pre><p>一般我们会使用errors.Is来判断错误链中是否包含了指定的错误，而不是直接使用下面的<code>==</code> 来判断。</p><pre><code class=\"language-plain\">if err == ErrSomething { \n\t...\n}\n</code></pre><p>要注意，尽量不要在自己的API中返回 <code>syscall.ENOENT</code> 以及 <code>io.EOF</code> 这样的特殊类型。因为这通常意味着调用者需要依赖我们代码库当中定义的特定类型。这在标准库中没有问题，但是如果是第三方库返回了一个新的错误类型，或者使用fmt.Errorf等方式进行了包裹，这种相等关系在后续就不再成立了。同时，这种方式还可能带来不必要的包之间的依赖。</p><h3>减少错误处理的实践</h3><p>为了避免冗长的错误处理，我们可以使用一些最佳实践。</p><p>例如下面的HTTP服务器中，每一个路由函数都需要处理错误，这看起来很繁琐。</p><pre><code class=\"language-plain\">func main() {\n    http.HandleFunc(\"/users\", viewUsers)\n    http.HandleFunc(\"/companies\", viewCompanies)\n}\n\nfunc viewUsers(w http.ResponseWriter, r *http.Request) {\n    ...\n    if err := userTemplate.Execute(w, user); err != nil {\n        http.Error(w, err.Error(), 500)\n    }\n}\n\nfunc viewCompanies(w http.ResponseWriter, r *http.Request) {\n    ...\n    if err := companiesTemplate.Execute(w, companies); err != nil {\n        http.Error(w, err.Error(), 500)\n    }\n}\n</code></pre><p>这时候，我们可以用一个类似中间件的函数appHandler来统一处理错误，改造如下：</p><pre><code class=\"language-plain\">func main() {\n    http.HandleFunc(\"/users\", appHandler(viewUsers))\n    http.HandleFunc(\"/companies\", appHandler(viewCompanies))\n}\n\nfunc viewUsers(w http.ResponseWriter, r *http.Request) {\n    return userTemplate.Execute(w, user)\n}\n\nfunc viewCompanies(w http.ResponseWriter, r *http.Request) {\n    return companiesTemplate.Execute(w, companies)\n}\n\ntype appHandler func(http.ResponseWriter, *http.Request) error\n\nfunc (fn appHandler) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    if err := fn(w, r); err != nil {\n        http.Error(w, err.Error(), 500)\n    }\n}\n</code></pre><p>第二个最佳实践是使用defer来减少错误处理。</p><p>例如，下面的函数在错误返回时，包装函数的逻辑是相同的。</p><pre><code class=\"language-plain\">func DoSomeThings(val1 int, val2 string) (string, error) {\n    val3, err := doThing1(val1)\n    if err != nil {\n        return \"\", fmt.Errorf(\"in DoSomeThings: %w\", err)\n    }\n    val4, err := doThing2(val2)\n    if err != nil {\n        return \"\", fmt.Errorf(\"in DoSomeThings: %w\", err)\n    }\n    result, err := doThing3(val3, val4)\n    if err != nil {\n        return \"\", fmt.Errorf(\"in DoSomeThings: %w\", err)\n    }\n    return result, nil\n}\n</code></pre><p>如果我们把这里的函数改造为使用defer，会更为简洁：</p><pre><code class=\"language-plain\">func DoSomeThings(val1 int, val2 string) (_ string, err error) {\n    defer func() {\n        if err != nil {\n            err = fmt.Errorf(\"in DoSomeThings: %w\", err)\n        }\n    }()\n    val3, err := doThing1(val1)\n    if err != nil {\n        return \"\", err\n    }\n    val4, err := doThing2(val2)\n    if err != nil {\n        return \"\", err\n    }\n    return doThing3(val3, val4)\n}\n</code></pre><h2>panic</h2><p>最后，我们再来讲讲一类特殊的错误：panic。当发生算术除0错误、内存无效访问、数组越界等问题时，会触发程序panic，导致程序异常退出并打印出函数的堆栈信息。</p><p>在Go 语言中，有以下两个内置函数可以处理程序的异常情况：</p><pre><code class=\"language-plain\">func panic(interface{})\nfunc recover() interface{}\n</code></pre><p>panic 函数传递的参数为空接口interface{}，它可以存储任何形式的错误信息并进行传递，然后在异常退出时打印出来。</p><pre><code class=\"language-plain\">panic(42)\npanic(\"unreachable\")\npanic(Error(\"cannot parse\"))\n</code></pre><p>Go 程序在 panic 时并不会直接导致程序异常退出，它会终止当前正在正常执行的函数，执行defer 函数并逐级返回。<br>\n例如，对于函数调用链a()→b()→c()，当函数 c 发生 panic 后，会返回函数b。此时，函数 b 也像发生了 panic 一样返回函数a。函数c、b、a 中的 defer 函数都将正常执行。</p><pre><code class=\"language-plain\">func a() {\n\tdefer fmt.Println(\"defer a\")\n\tb()\n\tfmt.Println(\"after a\")\n}\nfunc b() {\n\tdefer fmt.Println(\"defer b\")\n\tc()\n\tfmt.Println(\"after b\")\n}\nfunc c() {\n\tdefer fmt.Println(\"defer c\")\n\tpanic(\"this is panic\")\n\tfmt.Println(\"after c\")\n}\nfunc main() {\n\ta()\n}\n</code></pre><p>如下所示，当函数 c 触发了 panic 后，所有函数中的 defer 语句都会被正常调用，并且在panic时打印出堆栈信息。</p><pre><code class=\"language-plain\">defer c\ndefer b\ndefer a\npanic: this is panic\ngoroutine 1 [running]:\nmain.c()\n    bookcode/panic/panic_chain.go:19 +0x95\nmain.b()\n    bookcode/panic/panic_chain.go:13 +0x96\nmain.a()\n    bookcode/panic/panic_chain.go:7 +0x96\nmain.main()\n    bookcode/panic/panic_chain.go:24 +0x20\n\n</code></pre><p>通常，我们希望能够捕获这样的错误，然后让程序继续正常执行。要捕获这种异常，我们需要将 defer 与内置 recover 函数结合起来使用。</p><pre><code class=\"language-plain\">func executePanic() {\n\tdefer func() {\n\t\tif errMsg := recover(); errMsg != nil {\n\t\t\tfmt.Println(errMsg)\n\t\t}\n\t\tfmt.Println(\"This is recovery function...\")\n\t}()\n\tpanic(\"This is Panic Situation\")\n\tfmt.Println(\"The function executes Completely\")\n}\nfunc main() {\n\texecutePanic()\n\tfmt.Println(\"Main block is executed completely...\")\n}\n</code></pre><p>从下面这段输出可以看出，尽管有panic，main 函数仍然在正常执行后才退出。</p><pre><code class=\"language-plain\">This is Panic Situation\nThis is recovery function...\nMain block is executed completely...\n</code></pre><p>在实践中，我们常常看到一些开发者为了避免异常退出在各个函数调用的地方都加上了recover捕获，但其实这是没有必要的。借助上面的这个特性，我们只需要在最上层函数捕获异常就可以了。</p><p>有些同学可能会想，那我直接在main函数里加一个recover函数，这样捕获异常不就可以了吗？但这是不对的，因为我们讲的这个特性只适用于某一个单独的协程。所以我们应该对每一个重要的协程的最上层函数进行捕获，这样就可以避免程序的异常退出了。</p><p>下面这段代码中，我们在CreateWork方法中捕获到panic并打印到了日志中。一般这种日志会被额外的监控系统发现并报警。</p><pre><code class=\"language-plain\">func (s *Crawler) CreateWork() {\n\tdefer func() {\n\t\tif err := recover(); err != nil {\n\t\t\ts.Logger.Error(\"worker panic\",\n\t\t\t\tzap.Any(\"err\", err),\n\t\t\t\tzap.String(\"stack\", string(debug.Stack())))\n\t\t}\n\t}()\n...\n}\n</code></pre><h2>总结</h2><p>好了， 总结一下。</p><p>这节课，我们介绍了两个重要的特性限速器与错误处理。限速器通过令牌桶机制，帮助我们减少了爬虫对目标服务器的压力，并且使用了多层限速器对爬虫进行精细化的管理。</p><p>而对于错误处理，Go语言吸收了当前软件开发中遇到的经验与教训，其哲学是函数的调用者理应对错误进行处理，但这个思路确实有时候会带来错误处理冗长的问题。错误处理目前有许多最佳的实践，其中包括了错误的包装，错误中间件以及通过defer来减少错误的处理等。</p><p>最后我们还介绍了panic，在关键的功能最上层使用defer+recover可以防止程序异常退出。不过要注意，对异常进行捕获时，只能对单个协程生效。</p><h2>课后题</h2><p>学完这节课，给你留一道课后题。</p><p>错误处理是Go语言中被吐槽很多的话题，但是这其实是深思熟虑的设计结果。你可以查阅相关资料，谈一谈在Go中如何更好地进行错误处理。</p><p>欢迎你在留言区与我交流讨论，我们下节课见。</p>","neighbors":{"left":{"article_title":"32｜存储引擎：数据清洗与存储","id":615675},"right":{"article_title":"34｜服务注册与监听：Worker节点与etcd交互","id":617501}},"comments":[{"had_liked":false,"id":365940,"user_name":"viclilei","can_delete":false,"product_type":"c1","uid":2293890,"ip_address":"广东","ucode":"363E2872463BBE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKgz63XQKh9eI5vEicMY27siaoAPubmWr33XNBYic1rvFX0bFNUF6obpKpEEZgzcAtNX1nQiartf8icvdQ/132","comment_is_top":false,"comment_ctime":1673252573,"is_pvip":false,"replies":[{"id":134124,"content":"一步步测试和调试一下代码即可，这个没有想象中那么难哈","user_name":"作者回复","user_name_real":"编辑","uid":1903914,"ctime":1676212319,"ip_address":"北京","comment_id":365940,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"老师，为什么我按照代码写完后，请求数据还是有1s20条左右。可以帮忙判断我大概是什么地方写错了吗？","like_count":0,"discussions":[{"author":{"id":1903914,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0d/2a/dcb935cf.jpg","nickname":"时间为我们证明","note":"","ucode":"299438152D9F3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":603441,"discussion_content":"一步步测试和调试一下代码即可，这个没有想象中那么难哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1676212319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2293890,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKgz63XQKh9eI5vEicMY27siaoAPubmWr33XNBYic1rvFX0bFNUF6obpKpEEZgzcAtNX1nQiartf8icvdQ/132","nickname":"viclilei","note":"","ucode":"363E2872463BBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":599383,"discussion_content":"是Crawler 的CreateWork中req.Fetch忘记修改了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1673493085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":364979,"user_name":"Realm","can_delete":false,"product_type":"c1","uid":1081299,"ip_address":"浙江","ucode":"30CBEBE619D1A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/7f/d3/b5896293.jpg","comment_is_top":false,"comment_ctime":1671846684,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"在程序中应该避免使用野生的goroutine带来的panic，可以放在一个有个异常捕获的Go函数中来执行goroutine。姿势如下：\n```\nfunc Go(f func()) {\n\tgo func() {\n\t\t&#47;&#47; defer recover 捕获panic\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t\tlog.Printf(&quot;panic: %+v&quot;, err)\n\t\t\t}\n\t\t}()\n\n\t\tf()\n\t}()\n}\n\nfunc main() {\n\tf := func() {\n\t\tpanic(&quot;xxx&quot;)\n\t}\n\tGo(f)\n\n\ttime.Sleep(1 * time.Second)\n}\n\n```","like_count":1},{"had_liked":false,"id":387130,"user_name":"大毛","can_delete":false,"product_type":"c1","uid":1899599,"ip_address":"新疆","ucode":"93B18287F06706","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fc/4f/0a452c94.jpg","comment_is_top":false,"comment_ctime":1706532458,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"1 - 官方的 golang.org&#47;x&#47;time&#47;rate 实现限流是通过记录最后操作的时间+计算完成的，感觉这种处理方式让人耳目一新。以前我一直觉得这种令牌限流的算法就是使用 ticker 定时向一个 chan 中放入令牌，然后让获取令牌的人阻塞然后自行争抢，计算的方式毫无疑问比 ticker 的方式更优。另外这种计算的实现让这个limiter 有了一个有趣的特点，就是当调用 Wait(ctx context.Context) 的时候，如果 ctx 设置了过期时间，limiter 可以立即计算出这个调用者是否有机会获取到令牌（如果下一个令牌生成时间是 3 秒后，而 ctx 的过期时间是 1 秒，limiter 会立即返回一个错误，表示这个调用者不可能在过期时间内获取令牌），这不会让调用者一直在 Wait 方法上阻塞，也算是提升性能的一个小技巧\n\n2 - 课程中自行实现的多个级别的 limiter 感觉是有一个 bug？即如果设置了 5 个级别的 limiter，用户已经获得了前 3 个 limiter 的令牌，但是在尝试获取第 4 个令牌的时候出错，那是否应该将前三个令牌放回去？\n\n3 - error 推荐使用 github.com&#47;pkg&#47;errors\n\n4 - 一个 goroutine 如果没有使用 defer + recover 的方式来捕获 panic，这个 goroutine 将导致整个程序直接崩溃，如果你不想这样，要记得添加 defer + recover\n","like_count":0},{"had_liked":false,"id":365039,"user_name":"卢承灏","can_delete":false,"product_type":"c1","uid":1672266,"ip_address":"广东","ucode":"80805A03308CA4","user_header":"https://static001.geekbang.org/account/avatar/00/19/84/4a/50940078.jpg","comment_is_top":false,"comment_ctime":1671986225,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100124001,"comment_content":"老师，appHandler 讲解那里，viewUsers还有下面那个方法是不是漏了error 返回","like_count":0}]}