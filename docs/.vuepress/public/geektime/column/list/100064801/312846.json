{"id":312846,"title":"02｜单向散列函数：如何保证信息完整性？","content":"<p>你好，我是范学雷。</p><p>从今天开始，我就要和你一起逐渐接触密码学的具体细节了。在这个过程中，我会讲到很多密码学相关的概念和诉求，这是我们打好基础的关键。不过，你也不用紧张，我会和你一起分析，一步步带你掌握这些知识点。</p><p>还记得上一讲，我们讨论的话题吗？我们通过牛郎织女约会送信的小例子，探讨了“密码学有什么用”这个问题，从而理解了信息安全的基本问题和基本需求。</p><p>问题出现了，我们也知道了该用密码学。现在就要来解决问题了，接下来的几讲，我们就先来解决“信息的完整性”这个问题。你还记得解决完整性的工具是什么吗？——单向散列函数。</p><p>可是，什么是单向散列函数？它是怎么解决完整性问题的？今天，我们就来讨论这两个问题。</p><h2>什么是单向散列函数？</h2><p>首先，我们从名字上看，一眼就能看出来单向散列函数有两个关键修饰词，“单向”和“散列”。</p><p>其实，在数学上，单向函数和散列函数是两个不同类型的函数。所以，我们要想理解单向散列函数，我们就要先知道什么是单向函数，什么又是散列函数。</p><h3>什么是单向函数？</h3><p>如果你没有了解过什么是单向函数，你可以先猜一下，为什么它叫单向函数？</p><p><strong>单向函数（One-way Function）<strong><strong>是正向计算容易，逆向运算困难的函数</strong></strong></strong>。也就是说，给定你一个输入，你很容易计算出输出；但是给定你一个输出，你却很难计算出输入是什么。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/15/17/156fe7a265039ecb392750fc2byyf317.jpg?wh=2284*1285\" alt=\"\"></p><p>还有这样的函数？是不是感觉有点神奇？</p><p>《应用密码学》有一个很生动的例子来解释单向函数。把盘子打碎是一件很简单的事情，但是把这些碎片再拼接成一个完整的盘子，就是一件非常困难的事情。</p><p>也许，你会想，虽然把盘子碎片再拼接起来非常困难，但是仅仅就是非常困难而已，无论是手工还是计算机辅助，碎盘子还是可以拼接起来的。是的，这就是这个例子巧妙的地方。</p><p>单向函数就是这样的一个盘子。虽然我们强调，单向函数只能正向计算，不能逆向运算。但其实，这只是一个美好的愿望。为什么我这么说？</p><p>因为，我们能找到的、谈到的所谓的单向函数，都是正向计算容易，逆运算困难的函数。是的，我用的词语是“困难”，而不是“不能”，可能性只是很小，但不是没有。</p><p>在我们的日常生活里，泼出去的水再也收不回，说过的话、做过的事也没地方买后悔药，单向似乎才是生活的常态。但在数学领域，有很多函数看起来像是严格的单向函数，我们既证明不了它是单向函数，也暂时找不到逆向运算的办法。到底有没有逆向运算的办法，我们现在还不知道。</p><p>为什么我要和你强调“逆向运算困难”这件事？因为密码理论领域里很多棘手的问题，密码应用领域里的很多错误，都是来源于单向函数的这种不确定性。</p><p>比方说吧，每一个被破解的单向散列函数的密码学算法，在它被发明的时候，人们都没有找到逆向运算的办法，可是被破解的时候，人们就发现原来还是有办法去逆向运算的。</p><p>今天还是安全的算法，明天就可能被破解。<strong>这虽然使得密码学充满了挑战，但同时也使密码学充满了乐趣。</strong></p><p>不过，需要注意的是，我们要对这种不确定性保持足够的警惕，采取足够的防范措施。比如说，一个应用程序，至少要支持两种单向函数，当一种出现问题时，另外一种可以替补。</p><p>现在你知道了，单向函数是一个正向计算容易，逆向运算困难的函数。那我要是问你，对于我们来说，什么样的单向函数会更实用呢？我想，你应该可以回答出来：</p><ul>\n<li>一个更实用的单向函数，正向计算会更容易，容易程度就是这个函数的<strong>计算性能；</strong></li>\n<li>一个更实用的单向函数，逆向运算会更困难，困难程度就是这个函数的<strong>破解强度</strong>。</li>\n</ul><p>同样，我还是要强调一下，<strong>一个实用的单向函数，计算强度和破解强度要均衡考量，不可偏废</strong>。</p><p>以后我们谈到单向函数，指的都是正向计算容易，逆向运算困难的函数，除非特别声明。</p><h3>什么是散列函数？</h3><p>讲完了单向函数，我们再来看什么是散列函数。</p><p><strong>散列函数（Hash Function）是一个可以把任意大小的数据，转行成固定长度的数据的函数</strong>。比如说，无论输入数据是一个字节，或者一万个字节，输出数据都是16个字节。</p><p>我们把转换后的数据，叫做<strong>散列值</strong>。因为散列函数经常被人们直译为哈希函数，所以我们也可以称散列值为哈希值。通常的，对于给定的输入数据和散列函数，散列值是确定不变的。</p><p><img src=\"https://static001.geekbang.org/resource/image/19/1d/19554606e3465b79f6ea129a3dd2f61d.jpg?wh=2284*1285\" alt=\"\"></p><p>你可能会说，我懂了，不就是输入数据任意长度，输出数据固定长度吗？</p><p>是的，可问题也来了，既然输入数据的大小没有限制，而输出结果的数据长度固定，那么你觉得，会不会存在散列值相同的两个或者多个数据呢？——是确定存在的。</p><p>通常，我们把这种情况称为<strong>散列值碰撞</strong>。对于散列函数，散列值碰撞可不是一件好事情。</p><p>如果你学过Java语言或者数据结构和算法，应该对哈希值这个概念不陌生。Java语言里的hashCode()方法，或者数据结构和算法里的哈希值，就是一个散列函数的运用。</p><p>如果hashCode()的实现出现散列值碰撞，就会影响应用程序的性能，比如HashMap的检索时间会显著加长。再比如说，如果我们使用hashCode作为键值或者索引，散列值碰撞会导致检索错误，从而带来数据安全问题。</p><p>我在第一季<a href=\"https://time.geekbang.org/column/intro/100019601\">《代码精进之路》</a>专栏里，也讨论过散列值碰撞的性能基准测试。如果 10,000 个对象，只有 10 个不同的散列值，它的集合运算的性能是令人担忧的。因为这样和使用了没有散列值碰撞的实现相比，在性能方面，会有几百倍的差异。</p><p>现在，你应该意识到这个问题的重要性了，那么，我们应该怎样避免散列值碰撞呢？其实，因为输入数据的大小没有限制，输出数据的长度固定，理论上，我们是无法避免散列值碰撞的。</p><p>我们只能在降低散列值碰撞的可能性上想办法。也就是，我们要思考，如果我们不能避免散列值碰撞，我们会有什么办法可以降低散列值碰撞的风险呢？你可以先想一想。</p><p>最直观的办法，就是在<strong>输出数据的长度</strong>上想办法。虽然散列值长度固定，但是，我们可以让数据变得更长，<strong>散列值越长，存在相同散列值的概率就越小，发生碰撞的可能性就越小</strong>。</p><p>比如说，32位固定长度的散列值就要比16位固定长度的散列值发生碰撞的可能性更小。</p><p>是不是觉得我们可以解决问题了？问题是解决了，但从另一个角度来说，散列值越长，通常也就意味着计算越困难，计算性能越差。而且，你想一想，为什么当初我们要使用固定长度的散列值？不就是为了减少计算本身的性能损耗，从而获得性能优化吗？</p><p>所以，散列值也不是越长越好。那么，我们到底该如何选择散列值的长度呢？</p><p>其实，散列值的长度选择，应该是<strong>权衡性能</strong>后的结果。比如Java语言里，hashCode()的返回值是32位的整数，也就意味着散列值的长度是32位。由于hashCode()的返回值主要是用来检索，32位的整数已经足够大了，所以这是一个合适的选择。</p><p>除了散列值长度之外，想要降低散列值碰撞的可能性，我们还要考虑散列值的质量。<strong>一个好的散列函数，它的散列值应该是均匀分布的</strong>。也就是说，每一个散列值出现的概率都是一样的。</p><p>如果不这样的话，一部分散列值出现的概率就会较高，另一部分散列值出现的概率会较低，别人就更容易构造出两个或者多个数据，使得它们具有相同的散列值。这种行为，叫做<strong>碰撞攻击</strong>。</p><p>如果你要实现在Java的hashCode()方法，就需要考虑散列值的均匀分布问题。你可以看看《Effective Java》这本书，里面有专门的文章介绍如何实现hashCode()方法，降低散列值碰撞的风险。</p><h2>什么是单向散列函数？</h2><p>我们说完了什么是单向函数和什么是散列函数，现在我们可以探讨什么是单向散列函数了。</p><p><strong>单向散列函数既是一个单向函数，也是一个散列函数</strong>。它不仅要满足单向函数的要求，还要满足散列函数的要求。你还记得这两种函数的要求吗？其中，最要紧的就是：</p><ul>\n<li>逆向运算困难；</li>\n<li>构造碰撞困难。</li>\n</ul><p>大部分的hashCode()方法的实现，都满足不了逆向运算困难的要求，所以它们是不能算作单向散列函数的。比如说，按照Java的hashCode()方法的实现，32位整数的哈希值是这个整数本身，所以逆向运算一点难度都没有，当然不能算作单向散列函数。</p><p>单向散列函数是一定要逆向运算困难的。</p><p>至于构造碰撞困难，我用现成的单向散列函数给你举一个例子，比如SHA-1算法，它是一个常见的适用于密码学的单向散列函数。</p><p>现在，你面前有两句话，分别是“Hello, world!”和“Hello, vorld!”，这两句话只有一位的差异(w: 119/01110111, v: 118/01110110)，我把它们的SHA-1算法计算出来的散列值，列在了下面。</p><p>你可以对比两个散列值，感受一下一个位的输入数据差异，计算出的散列值能有多大的差异。</p><pre><code>SHA-1(&quot;Hello, world!):\n10010100 00111010 01110000 00101101 00000110 11110011 01000101 10011001 10101110 11100001 11111000 11011010 10001110 11111001 11110111 00101001 01100000 00110001 11010110 10011001\n\nSHA-1(&quot;Hello, vorld!):\n11001011 11111111 11111011 10010011 01010111 11000010 10001101 01011000 00100010 11000100 01010110 10000110 00101010 00110011 01010000 10111110 10000010 01111111 00100000 10101010\n</code></pre><p>是不是差异还挺大的？这种现象，我们把它叫做雪崩效应。</p><p><strong>雪崩效应（Avalanche Effect）是密码学算法一个常见的特点，指的是输入数据的微小变换，就会导致输出数据的巨大变化</strong>。严格雪崩效应是雪崩效应的一个形式化指标，我们也常用来衡量均匀分布。<strong>严格雪崩效应指的是，如果输入数据的一位反转，输出数据的每一位都有50%的概率会发生变化。</strong></p><p>一个适用于密码学的单向散列函数，就要具有雪崩效应的特点，也就是说，如果一个单向散列函数具有雪崩效应，那么对于给定的数据，构造出一个新的、具有相同散列值的数据是困难的。</p><p>在这一讲的一开始，我们说过，密码学的单向散列函数是用来解决数据完整性问题的。那么，单向散列函数是怎么解决数据完整性问题的呢？</p><h2>怎么解决完整性问题？</h2><p>想要解决完整性问题，我们就要知道完整性问题的背后逻辑是什么。</p><p>完整性意味着什么？完整性的核心是<strong>数据未经授权，不得更改</strong>。对于“不得更改”这四个字，你最直观的感受是什么？是不是无论如何，数据都没有办法改动？这是一个很强的解读。一般情况下，也很难有满足的场景。</p><p>还有一种站在反面看的、曲线的解读，就是如果数据有变动，能够被检测出来，我们就不采纳被篡改的数据。使用单向散列函数，就可以通过检查数据是否有变动，来解决数据完整性问题。</p><p>我们刚才说了，在单向散列函数里，一段数据，无论它是少了一个字，多了一个字，或者修改了一个字，原始数据和修改后的数据的散列值都可能相差巨大。</p><p>而且，由于逆向运算困难，虽然存在具有相同散列值的两个或者多个数据，但是对于一个好的单向散列函数来说，刻意寻找这样的数据是困难的。如果困难程度足够大，我们就有足够信心认为，如果散列值没有变化，它对应的输入数据也没有变化。</p><p>所以，单向函数和散列函数的组合，单向散列函数，就可以帮助我们解决完整性问题。</p><p>假如我们收到了一段数据，我们就可以重新计算这段数据的散列值。如果我们还可以获得数据发送者计算的散列值，我们就可以对比新计算的散列值和接收到的散列值。如果两个散列值是相同的，我们就可以认为这段数据是完整的；否则，这段数据就是被篡改过的。</p><pre><code>输入：\n    1、数据D\n    2、原始数据的散列值H\n    3、计算散列值使用的散列函数\n输出：\n    数据D是不是完整的？\n\n\n运算：\n    1、使用散列函数计算数据D的散列值H';\n    2、对比数据的散列值H和计算获得的散列值，如果两个散列值相同，则数据D是完整的；否则，数据D是修改过的数据。\n</code></pre><p>可是，这里面依然有两个遗留问题，也是我们使用单向散列函数需要特别关注的两个问题。</p><p>第一个问题是，我们该选择什么样的散列函数，它的破解难度才能足够大？这样，我们才有足够的信心根据散列值判断数据的完整性。</p><p>第二个问题是，我们怎么能够安全地获得数据发送者计算的散列值？如果我们接收到的是被修改过的数据和修改过的散列值，我们是没有办法判断数据是不是完整的。</p><p>第二个问题，我们放在稍后一点讨论。下一次，我们讨论第一个问题。</p><h2>Take Away（今日收获）</h2><p>今天，我们讨论了单向函数、散列函数以及单向散列函数，还有怎么使用单向散列函数来解决数据和信息的完整性问题。</p><p>为什么我要先讲单向散列函数？因为，单向散列函数是密码学的基础。在一个应用系统里，如果单向散列函数选择失误，整个系统的安全性就无从谈起。之后，我们还会讨论单向散列函数是怎样和加密算法以及签名算法结合起来，构建宏大的信息安全基础架构的。</p><p>我们常说，铁打的营盘流水的兵。<strong>在密码学里，最基础<strong><strong>的</strong></strong>概念<strong><strong>就</strong></strong>像是铁打的<strong><strong>营盘</strong></strong>，具有长久的生命力；而密码学算法就像是流水的兵，隔一阵儿就会换一茬</strong>。</p><p>所以，每一次讨论，我总是会先交代清楚基本概念和基础诉求，然后再带你去看具体的算法。基本概念和基础诉求可以跟随你几十年，随着你对它们理解的加深，会逐渐加厚你的功力。理解了基本概念和基础诉求，你就可以得心应手地调度、安排生命只有十数年的密码学算法了。</p><p>这一讲，通过对单向散列函数的讨论，我们要<strong>理解单向散列函数的以下三个特点：</strong></p><ul>\n<li><strong>单向散列函数正向计算容易，逆向运算困难；</strong></li>\n<li><strong>单向散列函数运算结果均匀分布，构造碰撞困难；</strong></li>\n<li><strong>对于相同的单向散列函数，</strong> <strong>给定数据的散列值是确定的，长度是固定的。</strong></li>\n</ul><p>然后我们要<strong>知道单向散列函数解决数据完整性问题的基本思路。</strong></p><h2>思考题</h2><p>我们回头看看上一次讨论过的牛郎织女的约会问题。牛郎要给织女发信息，七夕相约鹊桥会。</p><blockquote>\n<p>织女：<br>\n七月初七晚七点，鹊桥相会。不见不散。<br>\n牛郎</p>\n</blockquote><p>你能够帮助牛郎想想吗？该怎么使用单向散列函数，来防范约会信息被恶意修改？然后，你再想想，你建议的办法还有没有缺陷？欢迎在留言区留言，记录、讨论你的想法。</p><p>好的，今天就这样，我们下次再聊。</p>","neighbors":{"left":{"article_title":"01 | 学习密码学有什么用？","id":310833},"right":{"article_title":"03｜如何设置合适的安全强度？","id":313481}},"comments":[{"had_liked":false,"id":264198,"user_name":"tony","can_delete":false,"product_type":"c1","uid":1021314,"ip_address":"","ucode":"30E00E2346ED49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/95/82/02056ecc.jpg","comment_is_top":false,"comment_ctime":1606378316,"is_pvip":false,"replies":[{"id":"95830","content":"几乎是完美的。有两个小问题可以再细化一下。第一个问题是，牛郎怎么确认织女的公钥是织女的，织女怎么知道牛郎宣称的公钥真的是牛郎的？第二个问题是，使用使用非对称密钥加解密，有没有什么安全隐患？哪些算法可以这么干，那些算法不行？很遗憾，这个专栏没有计划讨论非对称密钥，这些都是很有意思的话题。<br><br>不过，仅仅使用对称密钥也能解决问题。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606408542,"ip_address":"","comment_id":264198,"utype":1}],"discussion_count":4,"race_medal":0,"score":"31671149388","product_id":100064801,"comment_content":"牛郎利用非对称算法，生成一个公钥与私钥。公钥对外公开。<br>织女利用非对称算法，生成一个公钥宜私钥。<br>公钥对外公开。<br><br>牛郎生成对称密钥（对称算法织女知道）。牛郎用自己的单向散列函数计算信件内容输出哈希值。然后进行用自己的私钥进行签名。这样就有了签名与信件原文，将这两者用对称密钥加密。同时将对称密钥用织女的公钥加密，简称数字信封。然后将数字信封与密文信息都发给织女。<br><br>织女收到密文及数字信封之后，只能织女用自己的私钥才能解开。织女用自己的私钥解开数字信封，得到对称密钥。再用对称密钥解密得到明文与数字签名。<br><br>然后织女使用相同的单向散列函数计算出哈希值，用牛郎的公钥解密收到的数字签名得到哈希值。如果这两个哈希值一致这说明信息未被篡改，否则这说明被篡改。<br><br><br><br>传递过程中，通过使用织女的公钥加密对称密钥，从而保证了对称密钥的安全传输同时也可以保证仅仅织女才能解密并且可以获取到对称密钥。而该对称密钥通过这种方式任何人则无发获取到。<br>织女然后通过该对称密钥解密信息内容，获取原文与哈希值，判断信件的完整性。<br><br>我把数字信封复习了一遍。","like_count":7,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510457,"discussion_content":"几乎是完美的。有两个小问题可以再细化一下。第一个问题是，牛郎怎么确认织女的公钥是织女的，织女怎么知道牛郎宣称的公钥真的是牛郎的？第二个问题是，使用使用非对称密钥加解密，有没有什么安全隐患？哪些算法可以这么干，那些算法不行？很遗憾，这个专栏没有计划讨论非对称密钥，这些都是很有意思的话题。\n\n不过，仅仅使用对称密钥也能解决问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1606408542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1138766,"avatar":"https://static001.geekbang.org/account/avatar/00/11/60/4e/1c654d86.jpg","nickname":"Omooo","note":"","ucode":"FFADFDC72EC847","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":588464,"discussion_content":"老师，这里的第二个问题是指 RSA 不具备前向安全性嘛？所以现在大多用动态秘钥交换协议 ECDHE？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663772658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":510457,"ip_address":"上海"},"score":588464,"extra":""}]},{"author":{"id":2352021,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e3/95/bc8241d9.jpg","nickname":"剁手","note":"","ucode":"0925A8C7782A99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331972,"discussion_content":"需要第三方权威 PKI/CA 来证明牛郎和织女的身份（证书）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607039088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1017986,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/88/82/e26364d7.jpg","nickname":"ptrr","note":"","ucode":"DC093709E651E3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329495,"discussion_content":"RSA原理要复杂的多吧 十几轮取摸运算呢 和哈希没关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606392461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263814,"user_name":"天天有吃的","can_delete":false,"product_type":"c1","uid":1604355,"ip_address":"","ucode":"6267FE8E68DEE5","user_header":"https://static001.geekbang.org/account/avatar/00/18/7b/03/03583011.jpg","comment_is_top":false,"comment_ctime":1606272754,"is_pvip":false,"replies":[{"id":"95705","content":"课程里尽量不使用代码，这样大家看起来就不用顾及语言问题了。但是，后面我会把涉及到的算法的用法，用Java写出来放到加餐或者Github上。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606285721,"ip_address":"","comment_id":263814,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31671043826","product_id":100064801,"comment_content":"希望老师可以把课程中用到的代码整理一份到git，比如今天的SHA1，虽然之前没接触过但是可以看看代码跑一跑理解一下，不然自己再去找博客去调试还是挺费时间的","like_count":7,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510317,"discussion_content":"课程里尽量不使用代码，这样大家看起来就不用顾及语言问题了。但是，后面我会把涉及到的算法的用法，用Java写出来放到加餐或者Github上。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606285721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264074,"user_name":"25ma","can_delete":false,"product_type":"c1","uid":1303713,"ip_address":"","ucode":"AB5435B9DB52C9","user_header":"https://static001.geekbang.org/account/avatar/00/13/e4/a1/178387da.jpg","comment_is_top":false,"comment_ctime":1606344348,"is_pvip":false,"replies":[{"id":"95771","content":"哈哈，明明不是一个讲故事的专栏。真是有点这个意思。不过，等着吧，烧脑的马上就来。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606351413,"ip_address":"","comment_id":264074,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10196278940","product_id":100064801,"comment_content":"突然有个大胆的想法，给老师这个课想了一个有趣的名字[趣谈密码学]，哈哈😄，让枯燥的密码学算法的学习变得更加有趣，生动，形象，感谢老师","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510412,"discussion_content":"哈哈，明明不是一个讲故事的专栏。真是有点这个意思。不过，等着吧，烧脑的马上就来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606351413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1303713,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e4/a1/178387da.jpg","nickname":"25ma","note":"","ucode":"AB5435B9DB52C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329231,"discussion_content":"烧脑+趣味对于我来说更容易坚持下去","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606352372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263974,"user_name":"向东是大海","can_delete":false,"product_type":"c1","uid":2046992,"ip_address":"","ucode":"A9FE1049D0D144","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3c/10/61efe672.jpg","comment_is_top":false,"comment_ctime":1606305982,"is_pvip":false,"replies":[{"id":"95732","content":"整体思路大方向没问题，还有小细节你要在挑战一下：既然公钥是公开的，王母娘娘会不会也截获了公钥，然后同样的步骤3，篡改信的内容？另外，公钥一般不能用来加密像信这样的信息，我们讲非对成密钥的时候在讨论为什么。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606337370,"ip_address":"","comment_id":263974,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10196240574","product_id":100064801,"comment_content":"1）织女生成一对密钥，一个是公钥，另一个是私钥；<br>2）织女把公钥寄给牛郎；<br>3）牛郎写信给织女，对信对内容进行hash；用公约对hash值加密作为数字签名；用公钥对信的内容进行加密；把加密后的信和信的数字签名一起寄给织女；<br>4）织女收信后，用私钥解密信的内容；用私钥解密数字签名得到信的hash值，比对信的hash值，如hash值正确，说明信未被篡改。","like_count":2,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510374,"discussion_content":"整体思路大方向没问题，还有小细节你要在挑战一下：既然公钥是公开的，王母娘娘会不会也截获了公钥，然后同样的步骤3，篡改信的内容？另外，公钥一般不能用来加密像信这样的信息，我们讲非对成密钥的时候在讨论为什么。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606337370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2441210,"avatar":"","nickname":"harryZ","note":"","ucode":"A16E3B4AD74E6E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":573564,"discussion_content":"&#34;公钥一般不能用来加密像信这样的信息&#34; why?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653493942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1303713,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e4/a1/178387da.jpg","nickname":"25ma","note":"","ucode":"AB5435B9DB52C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329198,"discussion_content":"你这个就是非对称加密的大致流程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606343259,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263966,"user_name":"Baldwin","can_delete":false,"product_type":"c1","uid":1615836,"ip_address":"","ucode":"7AF0328FEB7336","user_header":"https://static001.geekbang.org/account/avatar/00/18/a7/dc/2438f394.jpg","comment_is_top":false,"comment_ctime":1606305045,"is_pvip":false,"replies":[{"id":"95733","content":"也就是说，除了加密方法之外，没有别的秘密？这个加密方法怎么传递给对方呢？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606340951,"ip_address":"","comment_id":263966,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5901272341","product_id":100064801,"comment_content":"牛郎和织女约定好好加密方法。这几个字的实际存储比特取反然后用gb2312编码。最后用孙悟空的浑号做关键字；计算写一个校验和。当然加密方法和关键字 和签名算法只有牛郎和织女知道","like_count":1,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510367,"discussion_content":"也就是说，除了加密方法之外，没有别的秘密？这个加密方法怎么传递给对方呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606340951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1615836,"avatar":"https://static001.geekbang.org/account/avatar/00/18/a7/dc/2438f394.jpg","nickname":"Baldwin","note":"","ucode":"7AF0328FEB7336","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329204,"discussion_content":"从可信的第三方那儿取，比如说孙悟空","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606348358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361248,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1667363825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667363825","product_id":100064801,"comment_content":"在密码学里，最基础的概念就像是铁打的营盘，具有长久的生命力；而密码学算法就像是流水的兵，隔一阵儿就会换一茬。--记下来","like_count":0},{"had_liked":false,"id":361247,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"浙江","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1667363784,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1667363784","product_id":100064801,"comment_content":"学习了","like_count":0},{"had_liked":false,"id":359587,"user_name":"洛奇","can_delete":false,"product_type":"c1","uid":1624355,"ip_address":"美国","ucode":"662B4005721119","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/23/76511858.jpg","comment_is_top":false,"comment_ctime":1665661260,"is_pvip":false,"replies":[{"id":"130935","content":"hashcode()不是密码学意义上的单向散列函数。 比如说Byte的hashcode就是byte本身，一眼就能看出来。","user_name":"作者回复","user_name_real":"编辑","uid":"1111315","ctime":1666109161,"ip_address":"美国","comment_id":359587,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1665661260","product_id":100064801,"comment_content":"为什么java的hashcode()方法逆向运算很容易？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590850,"discussion_content":"hashcode()不是密码学意义上的单向散列函数。 比如说Byte的hashcode就是byte本身，一眼就能看出来。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1666109161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343564,"user_name":"亚东","can_delete":false,"product_type":"c1","uid":1026101,"ip_address":"","ucode":"8B7C8080B8516D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/35/85033228.jpg","comment_is_top":false,"comment_ctime":1650931473,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650931473","product_id":100064801,"comment_content":"感觉不能单纯地用单向散列函数，因为这个算法是不可逆。在牛郎织女的场景中，织女最终是要收到信息的。但是可以用这个来做签名把织女的地址跟信息用单向散列函数生成散列值发给织女。织女验证一下自己解密后的信息生成的散列值跟牛郎发过来的是否一致。来判断信息是否完整，被篡改。","like_count":0},{"had_liked":false,"id":275348,"user_name":"霍尔","can_delete":false,"product_type":"c1","uid":1137362,"ip_address":"","ucode":"14E3FCC02C90F7","user_header":"","comment_is_top":false,"comment_ctime":1611481435,"is_pvip":false,"replies":[{"id":"99940","content":"是的。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1611540494,"ip_address":"","comment_id":275348,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611481435","product_id":100064801,"comment_content":"如果黑客知道了单项散列函数，修改原文，并修改哈希值，那是不是就无法检测到原文被篡改","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514320,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611540494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272437,"user_name":"LXX","can_delete":false,"product_type":"c1","uid":2349160,"ip_address":"","ucode":"6BBE9967406E0F","user_header":"https://static001.geekbang.org/account/avatar/00/23/d8/68/89770b8b.jpg","comment_is_top":false,"comment_ctime":1610090184,"is_pvip":false,"replies":[{"id":"98883","content":"嗯，某一次会面很重要，要记得埋下种子。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1610302074,"ip_address":"","comment_id":272437,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1610090184","product_id":100064801,"comment_content":"首先牛郎和织女在某一次见面的时候，自己约定一份公钥和私钥，然后牛郎之后可以对自己的约会信息以及单向散列函数算出约会信息的哈希值，一起用通过私钥加密，再通过公钥将信息加密 一次，装入信封里头，如果能过对传输通道进行隐秘保护就更好啦，最后织女收到之后，通过公钥解密，再通过私钥解密，获得信息和哈希值，织女通过计算信息内容的哈希值，与收到的对比，即可。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513278,"discussion_content":"嗯，某一次会面很重要，要记得埋下种子。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610302074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266174,"user_name":"Lorin","can_delete":false,"product_type":"c1","uid":1379988,"ip_address":"","ucode":"7D546F70082DF0","user_header":"https://static001.geekbang.org/account/avatar/00/15/0e/94/4a2bb019.jpg","comment_is_top":false,"comment_ctime":1607225888,"is_pvip":false,"replies":[{"id":"96726","content":"散列函数并不要求逆向运算困难，所以反向破解不一定很难。咱们是在单向散列函数这一部分讲的雪崩效应。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1607273079,"ip_address":"","comment_id":266174,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607225888","product_id":100064801,"comment_content":"既然散列函数已经具备雪崩效应了，按理说，反向破解应该很难，这个时候为什么还要单向函数呢？","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511168,"discussion_content":"散列函数并不要求逆向运算困难，所以反向破解不一定很难。咱们是在单向散列函数这一部分讲的雪崩效应。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607273079,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265595,"user_name":"明","can_delete":false,"product_type":"c1","uid":1607502,"ip_address":"","ucode":"34FF545704EA8A","user_header":"https://static001.geekbang.org/account/avatar/00/18/87/4e/98173974.jpg","comment_is_top":false,"comment_ctime":1606958546,"is_pvip":false,"replies":[{"id":"96565","content":"是的，只满足一个是不行的。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606972957,"ip_address":"","comment_id":265595,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606958546","product_id":100064801,"comment_content":"老师 小白问一个很简单的问题（评论里大佬说的我都不会😂😂）单向散了函数说的是一个函数 既满足单向性质，又满足散列性质吧  而不是两个只满足其中一个性质函数的组合使用","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510986,"discussion_content":"是的，只满足一个是不行的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606972957,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264128,"user_name":"偏偏喜欢你","can_delete":false,"product_type":"c1","uid":1764425,"ip_address":"","ucode":"1E2E357F109F9D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ec/49/410176b8.jpg","comment_is_top":false,"comment_ctime":1606358547,"is_pvip":true,"replies":[{"id":"95796","content":"你的意思是使用私钥加密hash值对不对？hash的计算不能有私钥吧？要不然，对方怎么重算、对比散列值呢？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606375858,"ip_address":"","comment_id":264128,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1606358547","product_id":100064801,"comment_content":"使用RSA方式 私钥对数据进行加密，并携带数据和加密算法，公钥解密。<br>比如：A：加密算法，B：数据，C：hash值<br>整个信息为：A.B.hash(A+B+私钥）组成的，如果B 被篡改了，公钥验证hash里面的就会验证失败。<br>而RSA方式公钥不能对数据加密和篡改，只能验证。<br>带来的问题是 数据透明，可以使用可逆的加密算法加密数据部分。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510433,"discussion_content":"你的意思是使用私钥加密hash值对不对？hash的计算不能有私钥吧？要不然，对方怎么重算、对比散列值呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606375858,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2352021,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e3/95/bc8241d9.jpg","nickname":"剁手","note":"","ucode":"0925A8C7782A99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331974,"discussion_content":"牛郎要给织女写信，使用的公钥和私钥不能用错了：\n1、使用织女的公钥进行加密。（而不是使用牛郎的私钥加密）\n2、使用牛郎的私钥对信件进行数字签名，以此来证明自己的身份（证明是牛郎写信）\n3、织女接收到之后需要使用牛郎的公钥进行身份验证（第三方权威发放的数字证书：其中附带牛郎的公钥，能证明确实是牛郎发送的信件）。\n4、织女解封之后，只有织女才能使用自己的私钥解密信件内容。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607039886,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264009,"user_name":"成","can_delete":false,"product_type":"c1","uid":2336470,"ip_address":"","ucode":"C2F6B74B33FF0F","user_header":"https://static001.geekbang.org/account/avatar/00/23/a6/d6/1bf9f5bf.jpg","comment_is_top":false,"comment_ctime":1606311303,"is_pvip":false,"replies":[{"id":"95731","content":"是的，还需要一个办法来防止篡改。单向散列函数单独只能解决一部分问题。","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606337062,"ip_address":"","comment_id":264009,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606311303","product_id":100064801,"comment_content":"老师，我觉得可以把信息内容用单向散列函数计算出散列值，然后把这个值和函数算法包含在信件里发出，然后接受者可以用相同函数来计算信件里的内容，得到的散列值同附带的散列值比较，如果相同说明内容没有被篡改。但是有个问题，如果王母娘娘得到这封信把内容改了，用算法再计算一个新的散列值，发出去这就不好办了。所以还需要一个新的协定来约束。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510385,"discussion_content":"是的，还需要一个办法来防止篡改。单向散列函数单独只能解决一部分问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606337062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263934,"user_name":"彩色的沙漠","can_delete":false,"product_type":"c1","uid":1116183,"ip_address":"","ucode":"19A0975A5E69EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","comment_is_top":false,"comment_ctime":1606297923,"is_pvip":true,"replies":[{"id":"95729","content":"这要看AES具体的加密模式，如果是CBC或者ECB这些传统的加密模式，数据完整性是没有办法保证的。我们后面还会讨论这些安全问题，和带有自我验证的加密模式。也可以想一想一个例子，就是如果中间环节故意丢弃几个数据包，会有什么问题？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606321438,"ip_address":"","comment_id":263934,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606297923","product_id":100064801,"comment_content":"老师，接口数据采用的AES加密之后通信，对于明文还有必要在做哈希让后端在做完整性校验吗？如果做了哈希把哈希值放到某一个字段里面，然后在整体加密传输，感觉必要性不大，因为数据已经加密，如果被别人破译了加密，那完整性校验就不攻自破了。<br>需要一种混合算法，把明文的哈希值和明文的加密数据通过某种算法混合到一块，这种安全性高一点。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510355,"discussion_content":"这要看AES具体的加密模式，如果是CBC或者ECB这些传统的加密模式，数据完整性是没有办法保证的。我们后面还会讨论这些安全问题，和带有自我验证的加密模式。也可以想一想一个例子，就是如果中间环节故意丢弃几个数据包，会有什么问题？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606321438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263784,"user_name":"Charlie Guo","can_delete":false,"product_type":"c1","uid":1901929,"ip_address":"","ucode":"D6EF82B3635813","user_header":"https://static001.geekbang.org/account/avatar/00/1d/05/69/a1ededde.jpg","comment_is_top":false,"comment_ctime":1606267073,"is_pvip":false,"replies":[{"id":"95686","content":"这个思路清奇啊！这是假设只有织女牛郎知道用笔画加声调计算散列值吗？如果知道了幸运数字，还需要数笔画和算声调吗？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606267867,"ip_address":"","comment_id":263784,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1606267073","product_id":100064801,"comment_content":"可以把牛郎要发给织女的信的每个字的笔画数记录下来，然后加上声调数算出来的整数总值用二进制表示，然后通过Sha-256算出值加在信的最后。如果再可靠一点的话可以在第一步算出来的值上再加一个只有牛郎和织女才会知道的幸运数字再做Sha运算。","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510300,"discussion_content":"这个思路清奇啊！这是假设只有织女牛郎知道用笔画加声调计算散列值吗？如果知道了幸运数字，还需要数笔画和算声调吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606267867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2352021,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e3/95/bc8241d9.jpg","nickname":"剁手","note":"","ucode":"0925A8C7782A99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331978,"discussion_content":"比划和幸运数字的方法，属于移位、置换等方法，也可以说是一种编码方式。是可以用计算机碰撞进行破解。(使用计算机穷举：测试各种方法）\n比如二战时期的典范英格玛密码机，在现在计算机的计算力面前就是渣，秒破。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607040433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2352021,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e3/95/bc8241d9.jpg","nickname":"剁手","note":"","ucode":"0925A8C7782A99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331976,"discussion_content":"比划和幸运数字是可以用计算机碰撞进行破解。\n古典密码（编码方式）的算法需要保密，那个密码本需要保密。也就是说加解密都依赖相同的密码本。\n\n而现代密码方式，算法公开。只需要保护好钥匙就可以。（对称或非对称）。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607040224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2352021,"avatar":"https://static001.geekbang.org/account/avatar/00/23/e3/95/bc8241d9.jpg","nickname":"剁手","note":"","ucode":"0925A8C7782A99","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331975,"discussion_content":"古典密码方式不安全","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607040024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":263742,"user_name":"Litt1eQ","can_delete":false,"product_type":"c1","uid":2083695,"ip_address":"","ucode":"D80D0B14F3B312","user_header":"https://static001.geekbang.org/account/avatar/00/1f/cb/6f/b6693f43.jpg","comment_is_top":false,"comment_ctime":1606257881,"is_pvip":true,"replies":[{"id":"95685","content":"固定字符串和时间戳有什么用呢？是不是要假设王母娘娘不知道使用固定字符串和时间戳来伪造散列值？","user_name":"作者回复","user_name_real":"范学雷","uid":"1111315","ctime":1606267672,"ip_address":"","comment_id":263742,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1606257881","product_id":100064801,"comment_content":"牛郎喝织女可以先约定在消息后面拼接一个固定的字符串 这个字符串是提前约定好的 只有牛郎和织女知道 然后对如下信息作散列算法 原始信息 + 固定字符串+时间戳 发送的信息是 原始信息 散列算法的值 时间戳 这样织女在收到消息之后 按照同样的方法对消息作散列 如果值一样 表示消息没有被篡改过","like_count":0,"discussions":[{"author":{"id":1111315,"avatar":"https://static001.geekbang.org/account/avatar/00/10/f5/13/78741b7b.jpg","nickname":"范学雷","note":"","ucode":"D7CBE4A33427BD","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510283,"discussion_content":"固定字符串和时间戳有什么用呢？是不是要假设王母娘娘不知道使用固定字符串和时间戳来伪造散列值？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606267672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1303713,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e4/a1/178387da.jpg","nickname":"25ma","note":"","ucode":"AB5435B9DB52C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329199,"discussion_content":"我理解你说的固定字符串应该就是密钥，只有通信双方才能得到，时间戳是用于校验其实效性，比如牛郎发给织女一封信，其中有个字段就是当前发信的时间戳，时间戳的数据也进行散列，传递出去\n时间戳的用途可以作为信件的时效性，过了这个时间信件无法打开了(这一般是双方约定的规则)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606344109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}