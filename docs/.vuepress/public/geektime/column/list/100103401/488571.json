{"id":488571,"title":"17 | Context：万物皆为Context？","content":"<p>你好，我是朱涛。今天我们来学习Kotlin协程的Context。</p><p>协程的Context，在Kotlin当中有一个具体的名字，叫做CoroutineContext。它是我们理解Kotlin协程非常关键的一环。</p><p>从概念上讲，CoroutineContext很容易理解，它只是个<a href=\"https://zh.wikipedia.org/zh-hans/%E4%B8%8A%E4%B8%8B%E6%96%87_(%E8%AE%A1%E7%AE%97%E6%9C%BA)\">上下文</a>而已，实际开发中它最常见的用处就是切换线程池。不过，CoroutineContext背后的代码设计其实比较复杂，如果不能深入理解它的设计思想，那我们在后面阅读协程源码，并进一步建立复杂并发结构的时候，都将会困难重重。</p><p>所以这节课，我将会从应用的角度出发，带你了解CoroutineContext的使用场景，并会对照源码带你理解它的设计思路。另外，知识点之间的串联也是很重要的，所以我还会带你分析它跟我们前面学的Job、Deferred、launch、async有什么联系，让你能真正理解和掌握协程的上下文，并建立一个<strong>基于CoroutineContext的协程知识体系</strong>。</p><h2>Context的应用</h2><p>前面说过，CoroutineContext就是协程的上下文。你在前面的第14~16讲里其实就已经见过它了。在<a href=\"https://time.geekbang.org/column/article/486305\">第14讲</a>我介绍launch源码的时候，CoroutineContext其实就是函数的第一个参数：</p><!-- [[[read_end]]] --><pre><code class=\"language-plain\">// 代码段1\n\npublic fun CoroutineScope.launch(\n//                这里\n//                 ↓\n    context: CoroutineContext = EmptyCoroutineContext,\n    start: CoroutineStart = CoroutineStart.DEFAULT,\n    block: suspend CoroutineScope.() -&gt; Unit\n): Job {}\n</code></pre><p>这里我先说一下，之前我们在调用launch的时候，都没有传context这个参数，因此它会使用默认值EmptyCoroutineContext，顾名思义，这就是一个空的上下文对象。而如果我们想要指定launch工作的线程池的话，就需要自己传context这个参数了。</p><p>另外，在<a href=\"https://time.geekbang.org/column/article/487085\">第15讲</a>里，我们在挂起函数getUserInfo()当中，也用到了withContext()这个函数，当时我们传入的是“Dispatchers.IO”，这就是Kotlin官方提供的一个CoroutineContext对象。让我们来回顾一下：</p><pre><code class=\"language-plain\">// 代码段2\n\nfun main() = runBlocking {\n    val user = getUserInfo()\n    logX(user)\n}\n\nsuspend fun getUserInfo(): String {\n    logX(\"Before IO Context.\")\n    withContext(Dispatchers.IO) {\n        logX(\"In IO Context.\")\n        delay(1000L)\n    }\n    logX(\"After IO Context.\")\n    return \"BoyCoder\"\n}\n\n/*\n输出结果：\n================================\nBefore IO Context.\nThread:main @coroutine#1\n================================\n================================\nIn IO Context.\nThread:DefaultDispatcher-worker-1 @coroutine#1\n================================\n================================\nAfter IO Context.\nThread:main @coroutine#1\n================================\n================================\nBoyCoder\nThread:main @coroutine#1\n================================\n*/\n</code></pre><p>可以看到，当我们在withContext()这里指定线程池以后，Lambda当中的代码就会被分发到DefaultDispatcher线程池中去执行，而它外部的所有代码仍然还是运行在main之上。</p><p>其实，Kotlin官方还提供了挂起函数版本的main()函数，所以我们的代码也可以改成这样：</p><pre><code class=\"language-plain\">// 代码段3\n\nsuspend fun main() {\n    val user = getUserInfo()\n    logX(user)\n}\n</code></pre><p>不过，你要注意的是：挂起函数版本的main()的底层做了很多封装，虽然它可以帮我们省去写runBlocking的麻烦，但不利于我们学习阶段的探索和研究。因此，后续的Demo我们仍然以runBlocking为主，你只需要知道Kotlin有这么一个东西，等到你深入理解协程以后，就可以直接用“suspend main()”写Demo了。</p><p>我们说回runBlocking这个函数，第14讲里我们介绍过，它的第一个参数也是CoroutineContext，所以，我们也可以传入一个Dispatcher对象作为参数：</p><pre><code class=\"language-plain\">// 代码段4\n\n//                          变化在这里\n//                             ↓\nfun main() = runBlocking(Dispatchers.IO) {\n    val user = getUserInfo()\n    logX(user)\n}\n\n/*\n输出结果：\n================================\nBefore IO Context.\nThread:DefaultDispatcher-worker-1 @coroutine#1\n================================\n================================\nIn IO Context.\nThread:DefaultDispatcher-worker-1 @coroutine#1\n================================\n================================\nAfter IO Context.\nThread:DefaultDispatcher-worker-1 @coroutine#1\n================================\n================================\nBoyCoder\nThread:DefaultDispatcher-worker-1 @coroutine#1\n================================\n*/\n</code></pre><p>这时候，我们会发现，所有的代码都运行在DefaultDispatcher这个线程池当中了。而Kotlin官方除了提供了Dispatchers.IO以外，还提供了Dispatchers.Main、Dispatchers.Unconfined、Dispatchers.Default这几种内置Dispatcher。我来分别给你介绍一下：</p><ul>\n<li><strong>Dispatchers.Main</strong>，它只在UI编程平台才有意义，在Android、Swing之类的平台上，一般只有Main线程才能用于UI绘制。这个Dispatcher在普通的JVM工程当中，是无法直接使用的。</li>\n<li><strong>Dispatchers.Unconfined</strong>，代表无所谓，当前协程可能运行在任意线程之上。</li>\n<li><strong>Dispatchers.Default</strong>，它是用于CPU密集型任务的线程池。一般来说，它内部的线程个数是与机器CPU核心数量保持一致的，不过它有一个最小限制2。</li>\n<li><strong>Dispatchers.IO</strong>，它是用于IO密集型任务的线程池。它内部的线程数量一般会更多一些（比如64个），具体线程的数量我们可以通过参数来配置：kotlinx.coroutines.io.parallelism。</li>\n</ul><p>需要特别注意的是，Dispatchers.IO底层是可能复用Dispatchers.Default当中的线程的。如果你足够细心的话，会发现前面我们用的都是Dispatchers.IO，但实际运行的线程却是DefaultDispatcher这个线程池。</p><p>为了让这个问题更加清晰，我们可以把上面的例子再改一下：</p><pre><code class=\"language-plain\">// 代码段5\n\n//                          变化在这里\n//                             ↓\nfun main() = runBlocking(Dispatchers.Default) {\n    val user = getUserInfo()\n    logX(user)\n}\n\n/*\n输出结果：\n================================\nBefore IO Context.\nThread:DefaultDispatcher-worker-1 @coroutine#1\n================================\n================================\nIn IO Context.\nThread:DefaultDispatcher-worker-2 @coroutine#1\n================================\n================================\nAfter IO Context.\nThread:DefaultDispatcher-worker-2 @coroutine#1\n================================\n================================\nBoyCoder\nThread:DefaultDispatcher-worker-2 @coroutine#1\n================================\n*/\n</code></pre><p>当Dispatchers.Default线程池当中有富余线程的时候，它是可以被IO线程池复用的。可以看到，后面三个结果的输出都是在同一个线程之上的，这就是因为Dispatchers.Default被Dispatchers.IO复用线程导致的。如果我们换成自定义的Dispatcher，结果就会不一样了。</p><pre><code class=\"language-plain\">// 代码段6\n\nval mySingleDispatcher = Executors.newSingleThreadExecutor {\n    Thread(it, \"MySingleThread\").apply { isDaemon = true }\n}.asCoroutineDispatcher()\n\n//                          变化在这里\n//                             ↓\nfun main() = runBlocking(mySingleDispatcher) {\n    val user = getUserInfo()\n    logX(user)\n}\n\npublic fun ExecutorService.asCoroutineDispatcher(): ExecutorCoroutineDispatcher =\n    ExecutorCoroutineDispatcherImpl(this)\n\n/*\n输出结果：\n================================\nBefore IO Context.\nThread:MySingleThread @coroutine#1\n================================\n================================\nIn IO Context.\nThread:DefaultDispatcher-worker-1 @coroutine#1\n================================\n================================\nAfter IO Context.\nThread:MySingleThread @coroutine#1\n================================\n================================\nBoyCoder\nThread:MySingleThread @coroutine#1\n================================\n*/\n</code></pre><p>在上面的代码中，我们是通过asCoroutineDispatcher()这个扩展函数，创建了一个Dispatcher。从这里我们也能看到，Dispatcher的本质仍然还是线程。这也再次验证了我们<a href=\"https://time.geekbang.org/column/article/485632\">之前的说法</a>：<strong>协程运行在线程之上</strong>。</p><p>然后在这里，当我们为runBlocking传入自定义的mySingleDispatcher以后，程序运行的结果就不一样了，由于它底层并没有复用线程，因此只有“In IO Context”是运行在DefaultDispatcher这个线程池的，其他代码都运行在mySingleDispatcher之上。</p><p>另外，前面提到的<strong>Dispatchers.Unconfined</strong>，我们也要额外注意。还记得之前学习launch的时候，我们遇到的例子吗？请问下面4行代码，它们的执行顺序是怎样的？</p><pre><code class=\"language-plain\">// 代码段7\n\nfun main() = runBlocking {\n    logX(\"Before launch.\") // 1\n    launch {\n        logX(\"In launch.\") // 2\n        delay(1000L)\n        logX(\"End launch.\") // 3\n    }\n    logX(\"After launch\")   // 4\n}\n</code></pre><p>如果你理解了第14讲的内容，那你一定能分析出它们的运行顺序应该是：1、4、2、3。</p><p>但你要注意，同样的代码模式在特殊的环境下，结果可能会不一样。比如在Android平台，或者是如果我们指定了Dispatchers.Unconfined这个特殊的Dispatcher，它的这种行为模式也会被打破。比如像这样：</p><pre><code class=\"language-plain\">// 代码段8\n\nfun main() = runBlocking {\n    logX(\"Before launch.\")  // 1\n//               变化在这里\n//                  ↓\n    launch(Dispatchers.Unconfined) {\n        logX(\"In launch.\")  // 2\n        delay(1000L)\n        logX(\"End launch.\") // 3\n    }\n    logX(\"After launch\")    // 4\n}\n\n/*\n输出结果：\n================================\nBefore launch.\nThread:main @coroutine#1\n================================\n================================\nIn launch.\nThread:main @coroutine#2\n================================\n================================\nAfter launch\nThread:main @coroutine#1\n================================\n================================\nEnd launch.\nThread:kotlinx.coroutines.DefaultExecutor @coroutine#2\n================================\n*/\n</code></pre><p>以上代码的运行顺序就变成了：1、2、4、3。这一点，就再一次说明了Kotlin协程的难学。传了一个不同的参数进来，整个代码的执行顺序都变了，这谁不头疼呢？最要命的是，Dispatchers.Unconfined设计的本意，也并不是用来改变代码执行顺序的。</p><p>请你留意“End launch”运行的线程“DefaultExecutor”，是不是觉得很乱？其实Unconfined代表的意思就是，<strong>当前协程可能运行在任何线程之上，不作强制要求</strong>。</p><p>由此可见，Dispatchers.Unconfined其实是很危险的。所以，<strong>我们不应该随意使用Dispatchers.Unconfined</strong>。</p><p>好，现在我们也了解了CoroutineContext的常见应用场景。不过，我们还没解释这节课的标题，什么是“万物皆为Context”？</p><h2>万物皆有Context</h2><p>所谓的“万物皆为Context”，当然是一种夸张的说法，我们换成“万物皆有Context”可能更加准确。</p><p>在Kotlin协程当中，但凡是重要的概念，都或多或少跟CoroutineContext有关系：Job、Dispatcher、CoroutineExceptionHandler、CoroutineScope，甚至挂起函数，它们都跟CoroutineContext有着密切的联系。甚至，它们之中的Job、Dispatcher、CoroutineExceptionHandler本身，就是Context。</p><p>我这么一股脑地告诉你，你肯定觉得晕乎乎，所以下面我们就一个个来看。</p><h3>CoroutineScope</h3><p>在学习launch的时候，我提到过如果要调用launch，就必须先有“协程作用域”，也就是CoroutineScope。</p><pre><code class=\"language-plain\">// 代码段9\n\n//            注意这里\n//               ↓\npublic fun CoroutineScope.launch(\n    context: CoroutineContext = EmptyCoroutineContext,\n    start: CoroutineStart = CoroutineStart.DEFAULT,\n    block: suspend CoroutineScope.() -&gt; Unit\n): Job {}\n\n// CoroutineScope 源码\npublic interface CoroutineScope {\n    public val coroutineContext: CoroutineContext\n}\n</code></pre><p>如果你去看CoroutineScope的源码，你会发现，它其实就是一个简单的接口，而这个接口只有唯一的成员，就是CoroutineContext。所以，CoroutineScope只是对CoroutineContext做了一层封装而已，它的核心能力其实都来自于CoroutineContext。</p><p>而CoroutineScope最大的作用，就是可以方便我们批量控制协程。</p><pre><code class=\"language-plain\">// 代码段10\n\nfun main() = runBlocking {\n    // 仅用于测试，生成环境不要使用这么简易的CoroutineScope\n    val scope = CoroutineScope(Job())\n\n    scope.launch {\n        logX(\"First start!\")\n        delay(1000L)\n        logX(\"First end!\") // 不会执行\n    }\n\n    scope.launch {\n        logX(\"Second start!\")\n        delay(1000L)\n        logX(\"Second end!\") // 不会执行\n    }\n\n    scope.launch {\n        logX(\"Third start!\")\n        delay(1000L)\n        logX(\"Third end!\") // 不会执行\n    }\n\n    delay(500L)\n\n    scope.cancel()\n\n    delay(1000L)\n}\n\n/*\n输出结果：\n================================\nFirst start!\nThread:DefaultDispatcher-worker-1 @coroutine#2\n================================\n================================\nThird start!\nThread:DefaultDispatcher-worker-3 @coroutine#4\n================================\n================================\nSecond start!\nThread:DefaultDispatcher-worker-2 @coroutine#3\n================================\n*/\n</code></pre><p>在上面的代码中，我们自己创建了一个简单的CoroutineScope，接着，我们使用这个scope连续创建了三个协程，在500毫秒以后，我们就调用了scope.cancel()，这样一来，代码中每个协程的“end”日志就不会输出了。</p><p>这同样体现了协程<strong>结构化并发</strong>的理念，相同的功能，我们借助Job也同样可以实现。关于CoroutineScope更多的底层细节，我们会在源码篇的时候深入学习。</p><p>那么接下来，我们就看看Job跟CoroutineContext的关系。</p><h3>Job和Dispatcher</h3><p>如果说CoroutineScope是封装了CoroutineContext，那么Job就是一个真正的CoroutineContext了。</p><pre><code class=\"language-plain\">// 代码段11\n\npublic interface Job : CoroutineContext.Element {}\n\npublic interface CoroutineContext {\n    public interface Element : CoroutineContext {}\n}\n</code></pre><p>上面这段代码很有意思，Job继承自CoroutineContext.Element，而CoroutineContext.Element仍然继承自CoroutineContext，这就意味着Job是间接继承自CoroutineContext的。所以说，Job确实是一个真正的CoroutineContext。</p><p>所以，我们写这样的代码也完全没问题：</p><pre><code class=\"language-plain\">// 代码段12\n\nfun main() = runBlocking {\n    val job: CoroutineContext = Job()\n}\n</code></pre><p>不过，更有趣的是CoroutineContext本身的接口设计。</p><pre><code class=\"language-plain\">// 代码段13\n\npublic interface CoroutineContext {\n\n    public operator fun &lt;E : Element&gt; get(key: Key&lt;E&gt;): E?\n\n    public operator fun plus(context: CoroutineContext): CoroutineContext {}\n\n    public fun minusKey(key: Key&lt;*&gt;): CoroutineContext\n\n    public fun &lt;R&gt; fold(initial: R, operation: (R, Element) -&gt; R): R\n\n    public interface Key&lt;E : Element&gt;\n}\n</code></pre><p>从上面代码中的get()、plus()、minusKey()、fold()这几个方法，我们可以看到CoroutineContext的接口设计，就跟集合API一样。准确来说，它的API设计和Map十分类似。</p><p><img src=\"https://static001.geekbang.org/resource/image/a6/26/a611d29c307f953ebb099554a06a5d26.png?wh=1429x627\" alt=\"图片\"></p><p>所以，我们完全可以<strong>把CoroutineContext当作Map来用</strong>。</p><pre><code class=\"language-plain\">// 代码段14\n\n@OptIn(ExperimentalStdlibApi::class)\nfun main() = runBlocking {\n    // 注意这里\n    val scope = CoroutineScope(Job() + mySingleDispatcher)\n\n    scope.launch {\n        // 注意这里\n        logX(coroutineContext[CoroutineDispatcher] == mySingleDispatcher)\n        delay(1000L)\n        logX(\"First end!\")  // 不会执行\n    }\n\n    delay(500L)\n    scope.cancel()\n    delay(1000L)\n}\n/*\n输出结果：\n================================\ntrue\nThread:MySingleThread @coroutine#2\n================================\n*/\n</code></pre><p>在上面的代码中，我们使用了“Job() + mySingleDispatcher”这样的方式创建CoroutineScope，代码之所以这么写，是因为CoroutineContext的plus()进行了<strong>操作符重载</strong>。</p><pre><code class=\"language-plain\">// 代码段15\n\n//     操作符重载\n//        ↓\npublic operator fun &lt;E : Element&gt; plus(key: Key&lt;E&gt;): E?\n</code></pre><p>你注意这里代码中的<strong>operator关键字</strong>，如果少了它，我们就得换一种方式了：mySingleDispatcher.plus(Job())。因为，当我们用operator修饰plus()方法以后，就可以用“+”来重载这个方法，类似的，List和Map都支持这样的写法：list3 = list1+list2、map3 = map1 + map2，这代表集合之间的合并。</p><p>另外，我们还使用了“coroutineContext[CoroutineDispatcher]”这样的方式，访问当前协程所对应的Dispatcher。这也是因为CoroutineContext的get()，支持了<strong>操作符重载</strong>。</p><pre><code class=\"language-plain\">// 代码段16\n\n//     操作符重载\n//        ↓\npublic operator fun &lt;E : Element&gt; get(key: Key&lt;E&gt;): E?\n</code></pre><p>实际上，在Kotlin当中很多集合也是支持get()方法重载的，比如List、Map，我们都可以使用这样的语法：list[0]、map[key]，以数组下标的方式来访问集合元素。</p><p>还记得我们在<a href=\"https://time.geekbang.org/column/article/472154\">第1讲</a>提到的“集合与数组的访问方式一致”这个知识点吗？现在我们知道了，这都要归功于操作符重载。实际上，Kotlin官方的源代码当中大量使用了操作符重载来简化代码逻辑，而CoroutineContext就是一个最典型的例子。</p><p>如果你足够细心的话，这时候你应该也发现了：Dispatcher本身也是CoroutineContext，不然它怎么可以实现“Job() + mySingleDispatcher”这样的写法呢？最重要的是，当我们以这样的方式创建出scope以后，后续创建的协程就全部都运行在mySingleDispatcher这个线程之上了。</p><p>那么，<strong>Dispatcher到底是如何跟CoroutineContext建立关系的呢？</strong>让我们来看看它的源码吧。</p><pre><code class=\"language-plain\">// 代码段17\n\npublic actual object Dispatchers {\n\n    public actual val Default: CoroutineDispatcher = DefaultScheduler\n\n    public actual val Main: MainCoroutineDispatcher get() = MainDispatcherLoader.dispatcher\n\n    public actual val Unconfined: CoroutineDispatcher = kotlinx.coroutines.Unconfined\n\n    public val IO: CoroutineDispatcher = DefaultIoScheduler\n\n    public fun shutdown() {    }\n}\n\npublic abstract class CoroutineDispatcher :\n    AbstractCoroutineContextElement(ContinuationInterceptor), ContinuationInterceptor {}\n\npublic interface ContinuationInterceptor : CoroutineContext.Element {}\n</code></pre><p>可以看到，Dispatchers其实是一个object单例，它的内部成员的类型是CoroutineDispatcher，而它又是继承自ContinuationInterceptor，这个类则是实现了CoroutineContext.Element接口。由此可见，Dispatcher确实就是CoroutineContext。</p><h3>其他CoroutineContext</h3><p>除了上面几个重要的CoroutineContext之外，协程其实还有一些上下文是我们还没提到的。比如<strong>CoroutineName</strong>，当我们创建协程的时候，可以传入指定的名称。比如：</p><pre><code class=\"language-plain\">// 代码段18\n\n@OptIn(ExperimentalStdlibApi::class)\nfun main() = runBlocking {\n    val scope = CoroutineScope(Job() + mySingleDispatcher)\n    // 注意这里\n    scope.launch(CoroutineName(\"MyFirstCoroutine!\")) {\n        logX(coroutineContext[CoroutineDispatcher] == mySingleDispatcher)\n        delay(1000L)\n        logX(\"First end!\")\n    }\n\n    delay(500L)\n    scope.cancel()\n    delay(1000L)\n}\n\n/*\n输出结果：\n\n================================\ntrue\nThread:MySingleThread @MyFirstCoroutine!#2  // 注意这里\n================================\n*/\n</code></pre><p>在上面的代码中，我们调用launch的时候，传入了“CoroutineName(“MyFirstCoroutine!”)”作为协程的名字。在后面输出的结果中，我们得到了“@MyFirstCoroutine!#2”这样的输出。由此可见，其中的数字“2”，其实是一个自增的唯一ID。</p><p>CoroutineContext当中，还有一个重要成员是<strong>CoroutineExceptionHandler</strong>，它主要负责处理协程当中的异常。</p><pre><code class=\"language-plain\">// 代码段19\n\npublic interface CoroutineExceptionHandler : CoroutineContext.Element {\n\n    public companion object Key : CoroutineContext.Key&lt;CoroutineExceptionHandler&gt;\n\n    public fun handleException(context: CoroutineContext, exception: Throwable)\n}\n</code></pre><p>可以看到，CoroutineExceptionHandler的接口定义其实很简单，我们基本上一眼就能看懂。CoroutineExceptionHandler真正重要的，其实只有handleException()这个方法，如果我们要自定义异常处理器，我们就只需要实现该方法即可。</p><pre><code class=\"language-plain\">// 代码段20\n\n//&nbsp; 这里使用了挂起函数版本的main()\nsuspend fun main() {\n&nbsp; &nbsp; val myExceptionHandler = CoroutineExceptionHandler { _, throwable -&gt;\n&nbsp; &nbsp; &nbsp; &nbsp; println(\"Catch exception:&nbsp;$throwable\")\n&nbsp; &nbsp; }\n&nbsp; &nbsp; val scope = CoroutineScope(Job() + mySingleDispatcher)\n\n&nbsp; &nbsp; val job = scope.launch(myExceptionHandler) {\n&nbsp; &nbsp; &nbsp; &nbsp; val s: String? = null\n&nbsp; &nbsp; &nbsp; &nbsp; s!!.length // 空指针异常\n&nbsp; &nbsp; }\n\n&nbsp; &nbsp; job.join()\n}\n/*\n输出结果：\nCatch exception: java.lang.NullPointerException\n*/\n</code></pre><p>不过，虽然CoroutineExceptionHandler的用法看起来很简单，但当它跟协程“结构化并发”理念相结合以后，内部的异常处理逻辑是很复杂的。关于协程异常处理的机制，我们会在第23讲详细介绍。</p><h2>小结</h2><p>这节课的内容到这里就结束了，我们来总结一下吧。</p><ul>\n<li>CoroutineContext，是Kotlin协程当中非常关键的一个概念。它本身是一个接口，但它的接口设计与Map的API极为相似，我们在使用的过程中，也可以把它<strong>当作Map来用</strong>。</li>\n<li>协程里很多重要的类，它们本身都是CoroutineContext。比如Job、Deferred、Dispatcher、ContinuationInterceptor、CoroutineName、CoroutineExceptionHandler，它们都继承自CoroutineContext这个接口。也正因为它们都继承了CoroutineContext接口，所以我们可以通过<strong>操作符重载</strong>的方式，写出更加灵活的代码，比如“Job() + mySingleDispatcher+CoroutineName(“MyFirstCoroutine!”)”。</li>\n<li>协程当中的CoroutineScope，本质上也是CoroutineContext的一层<strong>简单封装</strong>。</li>\n<li>另外，协程里极其重要的“挂起函数”，它与CoroutineContext之间也有着非常紧密的联系。</li>\n</ul><p>另外我也画了一张结构图，来描述CoroutineContext元素之间的关系，方便你建立完整的知识体系。</p><p><img src=\"https://static001.geekbang.org/resource/image/eb/76/eb225787718e0d2cff8a55bcba86yy76.jpg?wh=2000x1125\" alt=\"\"></p><p>所以总的来说，我们前面学习的Job、Dispatcher、CoroutineName，它们本质上只是CoroutieContext这个集合当中的一种数据类型，只是恰好Kotlin官方让它们都继承了CoroutineContext这个接口。而CoroutineScope则是对CoroutineContext的进一步封装，它的核心能力，全部都是源自于CoroutineContext。</p><h2>思考题</h2><p>课程里，我提到了“挂起函数”与CoroutineContext也有着紧密的联系，请问，你能找到具体的证据吗？或者，你觉得下面的代码能成功运行吗？为什么？</p><pre><code>// 代码段21\n\nimport kotlinx.coroutines.*\nimport kotlin.coroutines.coroutineContext\n\n//                        挂起函数能可以访问协程上下文吗？\n//                                 ↓                              \nsuspend fun testContext() = coroutineContext\n\nfun main() = runBlocking {\n    println(testContext())\n}\n</code></pre><p>欢迎在留言区分享你的答案，也欢迎你把今天的内容分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"16 | Job：协程也有生命周期吗？","id":487930},"right":{"article_title":"18 | 实战：让KtHttp支持挂起函数","id":488985}},"comments":[{"had_liked":false,"id":336515,"user_name":"神秘嘉Bin","can_delete":false,"product_type":"c1","uid":2879116,"ip_address":"","ucode":"6045F09320E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ee/8c/06f3aef0.jpg","comment_is_top":false,"comment_ctime":1646197173,"is_pvip":false,"replies":[{"id":"123015","content":"很到位~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1646271183,"ip_address":"","comment_id":336515,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27416000949","product_id":100103401,"comment_content":"suspend方法需要在协程中执行，协程又一定有上下文，所以可以访问的到哈~ 也就是在suspend方法中可以访问当前协程上下文，并且拿到一些有用的信息","like_count":7,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554208,"discussion_content":"很到位~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646271183,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335489,"user_name":"夜班同志","can_delete":false,"product_type":"c1","uid":1192938,"ip_address":"","ucode":"19941F1537EB7B","user_header":"https://static001.geekbang.org/account/avatar/00/12/33/ea/373d8e6b.jpg","comment_is_top":false,"comment_ctime":1645537889,"is_pvip":false,"replies":[{"id":"122572","content":"没错~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645591292,"ip_address":"","comment_id":335489,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27415341665","product_id":100103401,"comment_content":"挂起函数的Continuation就有CoroutineContext","like_count":7,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552763,"discussion_content":"没错~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645591293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336486,"user_name":"神秘嘉Bin","can_delete":false,"product_type":"c1","uid":2879116,"ip_address":"","ucode":"6045F09320E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ee/8c/06f3aef0.jpg","comment_is_top":false,"comment_ctime":1646184558,"is_pvip":false,"replies":[{"id":"122975","content":"```<br>fun main() = runBlocking {<br>    logX(&quot;Before launch.&quot;) &#47;&#47; 1<br>    launch {<br>        logX(&quot;In launch.&quot;) &#47;&#47; 2<br>        delay(1000L)<br>        logX(&quot;End launch.&quot;) &#47;&#47; 3<br>    }<br>    logX(&quot;After launch&quot;)   &#47;&#47; 4<br>}<br>```<br><br>如果只针对这个案例，由于这里不涉及到多线程，所有协程都会运行在main之上，所以，我们基本上可以认为代码的执行顺序是这样的：1、4、2、3。<br><br>但如果涉及到多线程，则可能由于主线程繁忙，coroutine2在子线程先运行，而输出：1、2、4、3。<br><br>另外，如果我们配置其他的启动模式，或者其他的Context，则可能出现其他的代码运行顺序。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1646187103,"ip_address":"","comment_id":336486,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14531086446","product_id":100103401,"comment_content":"如果你理解了第 14 讲的内容，那你一定能分析出它们的运行顺序应该是：1、4、2、3。<br><br>也有可能是1、2、4、3吧？  这个得看CPU的调度了，也有可能子协程的2线运行吧？","like_count":4,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554010,"discussion_content":"```\nfun main() = runBlocking {\n    logX(&#34;Before launch.&#34;) // 1\n    launch {\n        logX(&#34;In launch.&#34;) // 2\n        delay(1000L)\n        logX(&#34;End launch.&#34;) // 3\n    }\n    logX(&#34;After launch&#34;)   // 4\n}\n```\n\n如果只针对这个案例，由于这里不涉及到多线程，所有协程都会运行在main之上，所以，我们基本上可以认为代码的执行顺序是这样的：1、4、2、3。\n\n但如果涉及到多线程，则可能由于主线程繁忙，coroutine2在子线程先运行，而输出：1、2、4、3。\n\n另外，如果我们配置其他的启动模式，或者其他的Context，则可能出现其他的代码运行顺序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646187103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2879116,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/ee/8c/06f3aef0.jpg","nickname":"神秘嘉Bin","note":"","ucode":"6045F09320E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":554172,"discussion_content":"确实，没注意到是runblock","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646234759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":554010,"ip_address":""},"score":554172,"extra":""}]}]},{"had_liked":false,"id":337861,"user_name":"白泽丶","can_delete":false,"product_type":"c1","uid":1320595,"ip_address":"","ucode":"0F1C044AD1B3C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/93/b4791ee3.jpg","comment_is_top":false,"comment_ctime":1647095898,"is_pvip":false,"replies":[{"id":"123581","content":"Dispatcher之间的组合其实并没有意义，你可以将其理解为后者替换前者。不过，在大部分情况下，IDE都会直接报错并告诉你：“Dispatcher之间的组合没有意义”。<br><br>```<br>fun main() {<br>    &#47;&#47; 报错<br>    val scope = CoroutineScope(Dispatchers.IO + Dispatchers.Main)<br>}<br>```","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1647235033,"ip_address":"","comment_id":337861,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10237030490","product_id":100103401,"comment_content":"如果为协程作用域创建时传入多个CoroutineContext，比如 Job() + Dispatcher.IO + Dispatcher.Main ，那么携程最终会在哪个线程池中执行呢","like_count":3,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556157,"discussion_content":"Dispatcher之间的组合其实并没有意义，你可以将其理解为后者替换前者。不过，在大部分情况下，IDE都会直接报错并告诉你：“Dispatcher之间的组合没有意义”。\n\n```\nfun main() {\n    // 报错\n    val scope = CoroutineScope(Dispatchers.IO + Dispatchers.Main)\n}\n```","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647235033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336077,"user_name":"白乾涛","can_delete":false,"product_type":"c1","uid":1339841,"ip_address":"","ucode":"0C704B0B90C8D7","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","comment_is_top":false,"comment_ctime":1645885249,"is_pvip":false,"replies":[{"id":"122843","content":"import kotlin.coroutines.coroutineContext<br><br>导包的时候，不要弄错了。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645967473,"ip_address":"","comment_id":336077,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10235819841","product_id":100103401,"comment_content":"1、思考题中的方法为什么要加 suspend，加不加有什么区别吗？<br>2、为什么代码打印的都是 EmptyCoroutineContext，且没有 name？<br><br><br>import kotlinx.coroutines.*<br>import kotlinx.coroutines.GlobalScope.coroutineContext<br><br>fun main() = runBlocking {<br>    printInfo(1) &#47;&#47; 1 - EmptyCoroutineContext - null<br>    CoroutineScope(Dispatchers.IO + Job() + CoroutineName(&quot;bqt&quot;)).launch {<br>        printInfo(2) &#47;&#47; 2 - EmptyCoroutineContext - null<br>    }<br>    delay(100L)<br>}<br><br>suspend fun printInfo(text: Any) = println(&quot;$text - $coroutineContext - ${coroutineContext[CoroutineName]?.name}&quot;)","like_count":3,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553564,"discussion_content":"import kotlin.coroutines.coroutineContext\n\n导包的时候，不要弄错了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645967473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1339841,"avatar":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","nickname":"白乾涛","note":"","ucode":"0C704B0B90C8D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554120,"discussion_content":"果然是导错包了。请问老师，我经常导错包，IDE 又不提示，这怎么办呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646221818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1342000,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7a/30/23fc4089.jpg","nickname":"24隋心所欲","note":"","ucode":"1B8B2789F68C94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1339841,"avatar":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","nickname":"白乾涛","note":"","ucode":"0C704B0B90C8D7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":592037,"discussion_content":"还能怎么办，自己debug呗。或者，给Google发邮件让他们改进IDE~~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1667039083,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":554120,"ip_address":"河北"},"score":592037,"extra":""}]}]},{"had_liked":false,"id":335201,"user_name":"面无表情的生鱼片","can_delete":false,"product_type":"c1","uid":1110076,"ip_address":"","ucode":"C71B9DD25C9018","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/3c/d72b0d26.jpg","comment_is_top":false,"comment_ctime":1645404860,"is_pvip":false,"replies":[{"id":"122454","content":"操作符重载你肯定能理解了对吧？至于Job() + Dispatcher的含义，其实就是同时指定：parentJob，还有线程池。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645459449,"ip_address":"","comment_id":335201,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10235339452","product_id":100103401,"comment_content":"请教老师，经常看到 Job() + Dispatcher ，这么做是什么原因呢","like_count":3,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552444,"discussion_content":"操作符重载你肯定能理解了对吧？至于Job() + Dispatcher的含义，其实就是同时指定：parentJob，还有线程池。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645459449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1090798,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a4/ee/cffd8ee6.jpg","nickname":"魏全运","note":"","ucode":"3FED702C724E2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":552464,"discussion_content":"请问这是怎么实现的呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645489192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552444,"ip_address":""},"score":552464,"extra":""}]}]},{"had_liked":false,"id":338880,"user_name":"WWWarmFly","can_delete":false,"product_type":"c1","uid":2621394,"ip_address":"","ucode":"DBACC196FADE65","user_header":"https://static001.geekbang.org/account/avatar/00/27/ff/d2/204edd23.jpg","comment_is_top":false,"comment_ctime":1647770532,"is_pvip":true,"replies":[{"id":"124010","content":"这样的关系：Dispatcher - CoroutineContext.Element - CoroutineContext","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1648030329,"ip_address":"","comment_id":338880,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5942737828","product_id":100103401,"comment_content":"请教老师，<br>Dispatcher 内部成员的类型是CoroutineContext，这里怎么推出<br><br>Dispatcher 确实就是 CoroutineContext","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557956,"discussion_content":"这样的关系：Dispatcher - CoroutineContext.Element - CoroutineContext","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648030329,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335211,"user_name":"7Promise","can_delete":false,"product_type":"c1","uid":2879220,"ip_address":"","ucode":"BF7C7F042E51F3","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ee/f4/27a5080a.jpg","comment_is_top":false,"comment_ctime":1645411433,"is_pvip":false,"replies":[{"id":"122455","content":"嗯，没错。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645459769,"ip_address":"","comment_id":335211,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5940378729","product_id":100103401,"comment_content":"思考题代码可以运行。coroutineContext方法是返回当前的CoroutineContext，因为runBlocking是CorouScope，CorouScope具有成员CoroutineContext，所以coroutineContext方法可以返回runBlocking的CoroutineContext。","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552445,"discussion_content":"嗯，没错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645459769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359311,"user_name":"Geek_fd59dd","can_delete":false,"product_type":"c1","uid":3195519,"ip_address":"北京","ucode":"EE6473120082A0","user_header":"","comment_is_top":false,"comment_ctime":1665406665,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665406665","product_id":100103401,"comment_content":"老师请教一下，本文中代码段2，打印结果依次是：Before IO Context-&gt; In IO Context. -&gt; After IO Context.   不应该是 Before IO Context-&gt; After IO Context. -&gt; In IO Context 吗","like_count":0},{"had_liked":false,"id":338454,"user_name":"Shanks-王冲","can_delete":false,"product_type":"c1","uid":1042983,"ip_address":"","ucode":"C4B90A17850E20","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ea/27/a3737d61.jpg","comment_is_top":false,"comment_ctime":1647507983,"is_pvip":false,"replies":[{"id":"123740","content":"没错，方向是对的，这就是我希望你们去看的coroutineContext变量，你可以再想想它的作用吗？<br><br>PS：具体答案我会在第27讲里给出的。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1647571556,"ip_address":"","comment_id":338454,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647507983","product_id":100103401,"comment_content":"Kotlin1.6源码package kotlin.coroutines中找到了这个，public suspend inline val coroutineContext: CoroutineContext，成员定义成suspend了，我不知道该怎么解释，贴出试试","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556912,"discussion_content":"没错，方向是对的，这就是我希望你们去看的coroutineContext变量，你可以再想想它的作用吗？\n\nPS：具体答案我会在第27讲里给出的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647571556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337274,"user_name":"Renext","can_delete":false,"product_type":"c1","uid":1020838,"ip_address":"","ucode":"3C4418F7E86CD6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/a6/679b3c6b.jpg","comment_is_top":false,"comment_ctime":1646729309,"is_pvip":false,"replies":[{"id":"123271","content":"ExecutorService.asCoroutineDispatcher()是Kotlin的源码哈，不需要你写进工程里的。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1646753461,"ip_address":"","comment_id":337274,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646729309","product_id":100103401,"comment_content":"代码段6报错：  Cannot access &#39;ExecutorCoroutineDispatcherImpl&#39;: it is private in file","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555119,"discussion_content":"ExecutorService.asCoroutineDispatcher()是Kotlin的源码哈，不需要你写进工程里的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646753461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335209,"user_name":"Allen","can_delete":false,"product_type":"c1","uid":1127306,"ip_address":"","ucode":"3F69DAC14260DC","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/8a/f7a3d5e6.jpg","comment_is_top":false,"comment_ctime":1645408675,"is_pvip":false,"replies":[{"id":"122456","content":"是的。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645459789,"ip_address":"","comment_id":335209,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1645408675","product_id":100103401,"comment_content":"代码是可以运行的，coroutineContext 的作用是获取当前运行作用域所对应协程的上下文信息。<br><br>这里打印出来的信息就是 runBlocking 所运行的协程所对应上下文的信息。<br><br>[CoroutineId(1), &quot;coroutine#1&quot;:BlockingCoroutine{Active}@759ebb3d, BlockingEventLoop@484b61fc]","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552446,"discussion_content":"是的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645459789,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1339841,"avatar":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","nickname":"白乾涛","note":"","ucode":"0C704B0B90C8D7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553433,"discussion_content":"为啥我打印的内容是 EmptyCoroutineContext\n\nsuspend fun getContext(): CoroutineContext = coroutineContext\n\nfun main() = runBlocking {\n    println(getContext())\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645884445,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2621394,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ff/d2/204edd23.jpg","nickname":"WWWarmFly","note":"","ucode":"DBACC196FADE65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552399,"discussion_content":"为啥我的ide  CoroutineContext 报红，是需要引入什么包吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645449260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1127306,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/8a/f7a3d5e6.jpg","nickname":"Allen","note":"","ucode":"3F69DAC14260DC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2621394,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ff/d2/204edd23.jpg","nickname":"WWWarmFly","note":"","ucode":"DBACC196FADE65","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":552465,"discussion_content":"coroutineContext 首字母是小写的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645489349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552399,"ip_address":""},"score":552465,"extra":""}]}]}]}