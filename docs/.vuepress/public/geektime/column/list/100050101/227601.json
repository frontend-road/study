{"id":227601,"title":"05 | 索引（下）：位移索引和时间戳索引的区别是什么？","content":"<p>你好，我是胡夕。今天，我们继续说索引那些事儿。</p><p>在上节课，我带你重点学习了Kafka源码中索引的抽象父类AbstractIndex。我分析了AbstractIndex类的大体对象结构，还介绍了社区改进版的二分查找算法在Kafka索引上的应用。</p><p>前面说过，Kafka索引类型有三大类：位移索引、时间戳索引和已中止事务索引。相比于最后一类索引，前两类索引的出镜率更高一些。在Kafka的数据路径下，你肯定看到过很多.index和.timeindex后缀的文件。不知你是否有过这样的疑问：“这些文件是用来做什么的呢？” 现在我可以明确告诉你：.index文件就是Kafka中的位移索引文件，而.timeindex文件则是时间戳索引文件。</p><p>那么，位移索引和时间戳索引到底是做什么用的呢？它们之间的区别是什么？今天，我就为你揭晓这些问题的答案。</p><h2>位移索引</h2><p>在学习Kafka的任何一类索引的时候，我们都要关注两个问题：</p><ol>\n<li>索引中的索引项是如何定义的？</li>\n<li>如何向索引写入新的索引项？</li>\n</ol><p>看到这里，你可能会很疑惑：“等等，难道我们不需要关心如何查询索引吗？” 当然需要啦！上节课我们不是讲过二分查找算法在索引中的应用了吗？如果你觉得有点生疏了，那就赶快先去复习一下吧。</p><!-- [[[read_end]]] --><p>现在，我们先来看下索引项的定义。</p><h3>索引项的定义</h3><p>位移索引也就是所谓的OffsetIndex，它可是一个老资历的组件了。如果我没记错的话，国内大面积使用Kafka应该是在0.8时代。从那个时候开始，OffsetIndex就已经存在了。每当Consumer需要从主题分区的某个位置开始读取消息时，Kafka就会用到OffsetIndex直接定位物理文件位置，从而避免了因为从头读取消息而引入的昂贵的I/O操作。</p><p>在上节课，我提到过，不同索引类型保存不同的&lt;Key, Value&gt;对。就OffsetIndex而言，Key就是消息的相对位移，Value是保存该消息的日志段文件中该消息第一个字节的物理文件位置。</p><p>这里我来具体解释一下相对位移的含义。还记得AbstractIndex类中的抽象方法entrySize吗？它定义了单个&lt;Key, Value&gt;对所用的字节数。对于OffsetIndex来说，entrySize就是8，如OffsetIndex.scala中定义的那样：</p><pre><code>    override def entrySize = 8\n</code></pre><p>为什么是8呢？相对位移是一个整型（Integer），占用4个字节，物理文件位置也是一个整型，同样占用4个字节，因此总共是8个字节。</p><p>那相对位移是什么值呢？我们知道，Kafka中的消息位移值是一个长整型（Long），应该占用8个字节才对。在保存OffsetIndex的&lt;Key, Value&gt;对时，Kafka做了一些优化。每个OffsetIndex对象在创建时，都已经保存了对应日志段对象的起始位移，因此，OffsetIndex索引项没必要保存完整的8字节位移值。相反地，它只需要保存与起始位移的差值（Delta）就够了，而这个差值是可以被整型容纳的。这种设计可以让OffsetIndex每个索引项都节省4个字节。</p><p>举个简单的例子。假设一个索引文件保存了1000个索引项，使用相对位移值就能节省大约4MB的空间，这是不是一件很划算的事情呢？</p><p>OffsetIndex定义了专门的方法，用于将一个Long型的位移值转换成相对位移，如下所示：</p><pre><code>def relativeOffset(offset: Long): Int = {\n    val relativeOffset = toRelative(offset)\n    if (relativeOffset.isEmpty)\n      // 如果无法转换成功（比如差值超过了整型表示范围)，则抛出异常\n      throw new IndexOffsetOverflowException(s&quot;Integer overflow for offset: $offset (${file.getAbsoluteFile})&quot;)\n    relativeOffset.get\n}\n</code></pre><p>relativeOffset方法调用了父类的toRelative方法执行真正的转换。我们来看一下toRelative方法的实现。</p><pre><code>private def toRelative(offset: Long): Option[Int] = {\n  val relativeOffset = offset - baseOffset\n  if (relativeOffset &lt; 0 || relativeOffset &gt; Int.MaxValue)\n    None\n  else\n    Some(relativeOffset.toInt)\n}\n</code></pre><p>逻辑很简单：第一步是计算给定的offset值与baseOffset的差值；第二步是校验该差值不能是负数或不能超过整型表示范围。如果校验通过，就直接返回该差值作为相对位移值，否则就返回None表示转换失败。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/00/c259aff07a71aa4fe16165f423b3d600.jpg?wh=2766*2180\" alt=\"\"></p><p>现在，你知道OffsetIndex中的索引项为什么是8个字节以及位移值是如何被转换成相对位移了吧？</p><p>当读取OffsetIndex时，源码还需要将相对位移值还原成之前的完整位移。这个是在parseEntry方法中实现的。</p><pre><code>override protected def parseEntry(buffer: ByteBuffer, n: Int): OffsetPosition = {\n  OffsetPosition(baseOffset + relativeOffset(buffer, n), physical(buffer, n))\n}\n</code></pre><p>我来给你解释下具体的实现方法。</p><p>这个方法返回一个OffsetPosition类型。该类有两个方法，分别返回索引项的Key和Value。</p><p><strong>这里的parseEntry方法，就是要构造OffsetPosition所需的Key和Value</strong>。Key是索引项中的完整位移值，<strong>代码使用baseOffset + relativeOffset(buffer, n)的方式将相对位移值还原成完整位移值</strong>；Value是这个位移值上消息在日志段文件中的物理位置，代码调用physical方法计算这个物理位置并把它作为Value。</p><p>最后，parseEntry方法把Key和Value封装到一个OffsetPosition实例中，然后将这个实例返回。</p><p>由于索引文件的总字节数就是索引项字节数乘以索引项数，因此，代码结合entrySize和buffer.getInt方法能够轻松地计算出第n个索引项所处的物理文件位置。这就是physical方法做的事情。</p><h3>写入索引项</h3><p>好了，有了这些基础，下面的内容就很容易理解了。我们来看下OffsetIndex中最重要的操作——<strong>写入索引项append方法的实现</strong>。</p><pre><code>def append(offset: Long, position: Int): Unit = {\n  inLock(lock) {\n    // 索引文件如果已经写满，直接抛出异常\n    require(!isFull, &quot;Attempt to append to a full index (size = &quot; + _entries + &quot;).&quot;)\n    // 要保证待写入的位移值offset比当前索引文件中所有现存的位移值都要大\n    // 这主要是为了维护索引的单调增加性\n    if (_entries == 0 || offset &gt; _lastOffset) {\n      trace(s&quot;Adding index entry $offset =&gt; $position to ${file.getAbsolutePath}&quot;)\n      mmap.putInt(relativeOffset(offset)) // 向mmap写入相对位移值\n      mmap.putInt(position) // 向mmap写入物理文件位置\n      _entries += 1 // 更新索引项个数\n      _lastOffset = offset // 更新当前索引文件最大位移值\n      // 确保写入索引项格式符合要求\n      require(_entries * entrySize == mmap.position(), s&quot;$entries entries but file position in index is ${mmap.position()}.&quot;)\n    } else {\n      throw new InvalidOffsetException(s&quot;Attempt to append an offset ($offset) to position $entries no larger than&quot; +\n        s&quot; the last offset appended (${_lastOffset}) to ${file.getAbsolutePath}.&quot;)\n    }\n  }\n}\n</code></pre><p>append方法接收两个参数：<strong>Long型的位移值</strong>和<strong>Integer型的物理文件位置</strong>。<strong>该方法最重要的两步，就是分别向mmap写入相对位移值和物理文件位置</strong>。我使用一张图，来总结下append方法的执行流程：</p><p><img src=\"https://static001.geekbang.org/resource/image/17/e6/176bec3d45790509c0587614be7f61e6.jpg?wh=2568*3354\" alt=\"\"></p><p>除了append方法，索引还有一个常见的操作：截断操作（Truncation）。<strong>截断操作是指，将索引文件内容直接裁剪掉一部分</strong>。比如，OffsetIndex索引文件中当前保存了100个索引项，我想只保留最开始的40个索引项。源码定义了truncateToEntries方法来实现这个需求：</p><pre><code>private def truncateToEntries(entries: Int): Unit = {\n  inLock(lock) {\n    _entries = entries\n    mmap.position(_entries * entrySize)\n    _lastOffset = lastEntry.offset\n    debug(s&quot;Truncated index ${file.getAbsolutePath} to $entries entries;&quot; +\n      s&quot; position is now ${mmap.position()} and last offset is now ${_lastOffset}&quot;)\n  }\n}\n\n</code></pre><p>这个方法接收entries参数，表示<strong>要截取到哪个槽</strong>，主要的逻辑实现是调用mmap的position方法。源码中的_entries * entrySize就是mmap要截取到的字节处。</p><p>下面，我来说说OffsetIndex的使用方式。</p><p>既然OffsetIndex被用来快速定位消息所在的物理文件位置，那么必然需要定义一个方法执行对应的查询逻辑。这个方法就是lookup。</p><pre><code>def lookup(targetOffset: Long): OffsetPosition = {\n  maybeLock(lock) {\n    val idx = mmap.duplicate // 使用私有变量复制出整个索引映射区\n    // largestLowerBoundSlotFor方法底层使用了改进版的二分查找算法寻找对应的槽\n    val slot = largestLowerBoundSlotFor(idx, targetOffset, IndexSearchType.KEY)\n    // 如果没找到，返回一个空的位置，即物理文件位置从0开始，表示从头读日志文件\n\t// 否则返回slot槽对应的索引项\n    if(slot == -1)\n      OffsetPosition(baseOffset, 0)\n    else\n      parseEntry(idx, slot)\n  }\n}\n</code></pre><p>我把主要的逻辑以注释的方式加到了代码中。该方法返回的，是不大于给定位移值targetOffset的最大位移值，以及对应的物理文件位置。你大致可以把这个方法，理解为位移值的FLOOR函数。</p><h2>时间戳索引</h2><p>说完了OffsetIndex，我们来看另一大类索引：时间戳索引，即TimeIndex。与OffsetIndex类似，我们重点关注TimeIndex中索引项的定义，以及如何写入TimeIndex索引项。</p><h3>索引项的定义</h3><p>与OffsetIndex不同的是，TimeIndex保存的是&lt;时间戳，相对位移值&gt;对。时间戳需要一个长整型来保存，相对位移值使用Integer来保存。因此，TimeIndex单个索引项需要占用12个字节。这也揭示了一个重要的事实：<strong>在保存同等数量索引项的基础上，TimeIndex会比OffsetIndex占用更多的磁盘空间</strong>。</p><h3>写入索引项</h3><p>TimeIndex也有append方法，只不过它叫作maybeAppend。我们来看下它的实现逻辑。</p><pre><code>def maybeAppend(timestamp: Long, offset: Long, skipFullCheck: Boolean = false): Unit = {\n  inLock(lock) {\n    if (!skipFullCheck)\n      // 如果索引文件已写满，抛出异常\n      require(!isFull, &quot;Attempt to append to a full time index (size = &quot; + _entries + &quot;).&quot;)\n    // 确保索引单调增加性\n    if (_entries != 0 &amp;&amp; offset &lt; lastEntry.offset)\n      throw new InvalidOffsetException(s&quot;Attempt to append an offset ($offset) to slot ${_entries} no larger than&quot; +\n        s&quot; the last offset appended (${lastEntry.offset}) to ${file.getAbsolutePath}.&quot;)\n    // 确保时间戳的单调增加性\n    if (_entries != 0 &amp;&amp; timestamp &lt; lastEntry.timestamp)\n      throw new IllegalStateException(s&quot;Attempt to append a timestamp ($timestamp) to slot ${_entries} no larger&quot; +\n        s&quot; than the last timestamp appended (${lastEntry.timestamp}) to ${file.getAbsolutePath}.&quot;)\n\n    if (timestamp &gt; lastEntry.timestamp) {\n      trace(s&quot;Adding index entry $timestamp =&gt; $offset to ${file.getAbsolutePath}.&quot;)\n      mmap.putLong(timestamp) // 向mmap写入时间戳\n      mmap.putInt(relativeOffset(offset)) // 向mmap写入相对位移值\n      _entries += 1 // 更新索引项个数\n      _lastEntry = TimestampOffset(timestamp, offset) // 更新当前最新的索引项\n      require(_entries * entrySize == mmap.position(), s&quot;${_entries} entries but file position in index is ${mmap.position()}.&quot;)\n    }\n  }\n}\n</code></pre><p>和OffsetIndex类似，向TimeIndex写入索引项的主体逻辑，是向mmap分别写入时间戳和相对位移值。只不过，<strong>除了校验位移值的单调增加性之外，TimeIndex还会确保顺序写入的时间戳也是单调增加的</strong>。</p><p>说到这里，我想到我当年读到这段代码时候的一个想法。那个时候，这段代码还没有加上时间戳单调增加的校验逻辑，我灵机一动，萌发了向TimeIndex写入一个过期时间戳的想法。一番动手操作之后，我真的向TimeIndex索引文件中写入了一个过期时间戳和位移。</p><p>你猜结果怎样？结果是引发了消费者端程序的彻底混乱。这是因为，当消费者端程序根据时间戳信息去过滤待读取的消息时，它读到了这个过期的时间戳并拿到了错误的位移值，因此返回了错误的数据。</p><p>为此，我还给社区提交了一个Jira，当时被驳回了——理由是不允许向TimeIndex写入过期时间戳。跟你说这个趣事儿只是想说明，有的时候，读源码会诱发很多灵感或奇思妙想，而这些东西是你在平时使用过程中不会想到的。这也算是阅读源码的一大收获吧。</p><h2>区别</h2><p>讲到这里，这节课就接近尾声了。最后，我用一张表格汇总下OffsetIndex和TimeIndex的特点和区别，希望能够帮助你更好地理解和消化今天的重点内容。</p><p><img src=\"https://static001.geekbang.org/resource/image/a3/78/a359ce4e81eb073a9ebed2979082b578.jpg?wh=3860*2007\" alt=\"\"></p><h2>总结</h2><p>今天，我带你详细分析了OffsetIndex和TimeIndex，以及它们的不同之处。虽然OffsetIndex和TimeIndex是不同类型的索引，但Kafka内部是把二者结合使用的。通常的流程是，先使用TimeIndex寻找满足时间戳要求的消息位移值，然后再利用OffsetIndex去定位该位移值所在的物理文件位置。因此，它们其实是合作的关系。</p><p>最后，我还想提醒你一点：<strong>不要对索引文件做任何修改！</strong>我碰到过因用户擅自重命名索引文件，从而导致Broker崩溃无法启动的场景。另外，虽然Kafka能够重建索引，但是随意地删除索引文件依然是一个很危险的操作。在生产环境中，我建议你尽量不要执行这样的操作。</p><h2>课后讨论</h2><p>OffsetIndex中的lookup方法实现了类似于FLOOR函数的位移查找逻辑。你能否对应写一个类似于CEILING函数的位移查找逻辑，即返回不小于给定位移值targetOffset的最小位移值和对应的物理文件位置？</p><p>欢迎你在留言区畅所欲言，跟我交流讨论，也欢迎你把今天的内容分享给你的朋友。</p>","neighbors":{"left":{"article_title":"04 | 索引（上）：改进的二分查找算法在Kafka索引的应用","id":226169},"right":{"article_title":"06 | 请求通道：如何实现Kafka请求队列？","id":230352}},"comments":[{"had_liked":false,"id":209778,"user_name":"胡夕","can_delete":false,"product_type":"c1","uid":1288090,"ip_address":"","ucode":"5709A689B6683B","user_header":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","comment_is_top":true,"comment_ctime":1587612733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"9.2233720599171994e+18","product_id":100050101,"comment_content":"你好，我是胡夕。我来公布上节课的“课后讨论”题答案啦～<br><br>上节课，咱们重点了解了Kafka索引对象以及改进版的二分查找算法，课后我让你思考下改进版二分查找算法中冷区和热区的分割线设定在8192字节处的原理。鉴于这是一个开放式的问题，我说下我的理解：就像源码注释里面写的那样，8192这个数字不大不小正合适。所谓不大不小是指它并不是太小，它足以确保大多数lagging很小的follower或consumer都只在热区查询；同时它也不会太大，对于主流4KB大小的page size而言， 热区大约也就只占用2~3个页面。<br><br>okay，你是怎么考虑的呢？我们可以一起讨论下。","like_count":5},{"had_liked":false,"id":221359,"user_name":"东风第一枝","can_delete":false,"product_type":"c1","uid":1402697,"ip_address":"","ucode":"0CD0F62E90DAD8","user_header":"https://static001.geekbang.org/account/avatar/00/15/67/49/864dba17.jpg","comment_is_top":false,"comment_ctime":1590481259,"is_pvip":false,"replies":[{"id":"81707","content":"嗯嗯，可以尝试写个test case，测试下自己的方法：）","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1590547095,"ip_address":"","comment_id":221359,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5885448555","product_id":100050101,"comment_content":"课后作业：<br>  def lookup(targetOffset: Long): OffsetPosition = {<br>    maybeLock(lock) {<br>      val idx = mmap.duplicate<br>      val slot = smallestUpperBoundSlotFor(idx, targetOffset, IndexSearchType.KEY)<br>      if(slot == -1)<br>        OffsetPosition(baseOffset, 0)<br>      else<br>        parseEntry(idx, slot)<br>    }<br>  }<br>&#47;&#47;自己重写了一下二分查找，发现有现成的方法，😆","like_count":1,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496437,"discussion_content":"嗯嗯，可以尝试写个test case，测试下自己的方法：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590547095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215073,"user_name":"Alpha 👀","can_delete":false,"product_type":"c1","uid":1200971,"ip_address":"","ucode":"3C0BAD36550718","user_header":"https://static001.geekbang.org/account/avatar/00/12/53/4b/28991f30.jpg","comment_is_top":false,"comment_ctime":1588900489,"is_pvip":false,"replies":[{"id":"79687","content":"针对消费者组，或者说针对每个group id。保存的是&lt;groupId, topicPartition, offset&gt;三元组。新增消费者拿到要消费的分区后，去查看有无对应的三元组记录，如果没有，则根据consumer端参数auto.offset.reset值来决定从哪里开始消费","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1588984081,"ip_address":"","comment_id":215073,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5883867785","product_id":100050101,"comment_content":"老师您好，请问一个问题，kafka记录消费者的消费offset是对消费者组，还是对单个消费者？比如一个消费者组中新加入一个消费者，分区重新分配，那新加入的消费者是从哪里开始消费？","like_count":2,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494303,"discussion_content":"针对消费者组，或者说针对每个group id。保存的是&amp;lt;groupId, topicPartition, offset&amp;gt;三元组。新增消费者拿到要消费的分区后，去查看有无对应的三元组记录，如果没有，则根据consumer端参数auto.offset.reset值来决定从哪里开始消费","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588984081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200971,"avatar":"https://static001.geekbang.org/account/avatar/00/12/53/4b/28991f30.jpg","nickname":"Alpha 👀","note":"","ucode":"3C0BAD36550718","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265912,"discussion_content":"谢谢老师指点！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589454580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210781,"user_name":"thomas","can_delete":false,"product_type":"c1","uid":1016777,"ip_address":"","ucode":"9AB945308F1B50","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/c9/5d03981a.jpg","comment_is_top":false,"comment_ctime":1587824683,"is_pvip":true,"replies":[{"id":"78474","content":"里面为空，只是预分配了10MB的空间","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1587868288,"ip_address":"","comment_id":210781,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5882791979","product_id":100050101,"comment_content":"老师，请问建立分区初始化的时候，log-segment的位移索引和时间索引文件将近有10M的数据？<br>---------------------------------------------------------------------------------------》<br>-rw-r--r--  1 root root 10485760 Apr 25 14:23 00000000000000000000.index<br>-rw-r--r--  1 root root        0 Apr 25 14:23 00000000000000000000.log<br>-rw-r--r--  1 root root 10485756 Apr 25 14:23 00000000000000000000.timeindex<br><br>","like_count":2,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493107,"discussion_content":"里面为空，只是预分配了10MB的空间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587868288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181505,"avatar":"https://static001.geekbang.org/account/avatar/00/12/07/41/2d477385.jpg","nickname":"柠檬C","note":"","ucode":"BC0EE704D952A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304145,"discussion_content":"MappedByteBuffer会直接占用设定的空间大小","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599479537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292627,"user_name":"QAQ","can_delete":false,"product_type":"c1","uid":2307937,"ip_address":"","ucode":"6E47215CBB81F5","user_header":"https://static001.geekbang.org/account/avatar/00/23/37/61/51e10a30.jpg","comment_is_top":false,"comment_ctime":1620901019,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620901019","product_id":100050101,"comment_content":"这些涉及到+1，-1的各种offset，position计算操作，能否补充更多的图片加以说明，例如在添加多条记录时，log文件到底怎么变的，index文件到底怎么变的等等","like_count":0},{"had_liked":false,"id":286233,"user_name":"快跑","can_delete":false,"product_type":"c1","uid":1564645,"ip_address":"","ucode":"90ED7E6D40C58E","user_header":"https://static001.geekbang.org/account/avatar/00/17/df/e5/65e37812.jpg","comment_is_top":false,"comment_ctime":1617203157,"is_pvip":false,"replies":[{"id":"104164","content":"如果你要根据时间戳查询消息，TimeIndex就用上了","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1617671573,"ip_address":"","comment_id":286233,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1617203157","product_id":100050101,"comment_content":"从消费者的角度，如果没有&lt;groupId, topicPartition, offset&gt;则从auto.offset.reset的offset开始读数据，这些步骤都能直接查到offset吧，那TimeIndex是在什么场景派上用场，发挥作用的?","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517917,"discussion_content":"如果你要根据时间戳查询消息，TimeIndex就用上了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617671573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1564645,"avatar":"https://static001.geekbang.org/account/avatar/00/17/df/e5/65e37812.jpg","nickname":"快跑","note":"","ucode":"90ED7E6D40C58E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365332,"discussion_content":"老师你好。根据时间戳查询消息，在什么场景会发生？\n命令行根据时间重置offset算么。还有其他什么场景是属于用TimeIndex？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617773942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246065,"user_name":"z.l","can_delete":false,"product_type":"c1","uid":1181055,"ip_address":"","ucode":"805CC5784D3F76","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/7f/d35ab9a1.jpg","comment_is_top":false,"comment_ctime":1599149086,"is_pvip":false,"replies":[{"id":"90471","content":"好像不太严谨。如果出现等于的情况呢？","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1599205450,"ip_address":"","comment_id":246065,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1599149086","product_id":100050101,"comment_content":"思考题，直接把lookup方法的最后一行改成 parseEntry(idx, slot+1)，可以吗？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505049,"discussion_content":"好像不太严谨。如果出现等于的情况呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599205450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244675,"user_name":"对与错","can_delete":false,"product_type":"c1","uid":1682027,"ip_address":"","ucode":"EF55733E3BD78B","user_header":"https://static001.geekbang.org/account/avatar/00/19/aa/6b/ab9a072a.jpg","comment_is_top":false,"comment_ctime":1598610218,"is_pvip":false,"replies":[{"id":"90147","content":"逻辑是统一的，都是写入最大的时间戳以及对应的位移","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1598836144,"ip_address":"","comment_id":244675,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1598610218","product_id":100050101,"comment_content":"有个疑问:在leader写入消息的时候,时间戳索引项里面是<br>&lt;消息集合的最后一条消息的时间戳，当前LEO的值&gt;,<br>在flowwer写入消息的时候,时间戳索引项里面是<br>&lt;消息集合的最后一条消息的时间戳，消息集合的最后一条消息的时间戳所对应的位移值&gt;,为什么这么设计?","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504660,"discussion_content":"逻辑是统一的，都是写入最大的时间戳以及对应的位移","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598836144,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225322,"user_name":"sljoai","can_delete":false,"product_type":"c1","uid":1018071,"ip_address":"","ucode":"FF88C4BA265DE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/d7/07f8bc6c.jpg","comment_is_top":false,"comment_ctime":1591714725,"is_pvip":false,"replies":[{"id":"83193","content":"1. 嗯，差不多是这么计算的<br>2. 逻辑变得更加简单了。每一个索引项都是&lt;offset, position&gt;对，那么第n项的相对位移自然就是buffer的n*entrySize字节处开始的4个字节表示的整数值","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1591871612,"ip_address":"","comment_id":225322,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1591714725","product_id":100050101,"comment_content":"胡老师，请教几个问题：<br>1.&quot;假设一个索引文件保存了 1000 个索引项，使用相对位移值就能节省大约 4MB 的空间，这是不是一件很划算的事情呢？!&quot;. 请问具体是怎么计算的呢？4字节 * 1000 ？<br>2.relativeOffset方法已经变了，我看到的是如下：<br>   private def relativeOffset(buffer: ByteBuffer, n: Int): Int = buffer.getInt(n * entrySize)<br> 跟本文中介绍的有所不同，该怎么理解呢？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497806,"discussion_content":"1. 嗯，差不多是这么计算的\n2. 逻辑变得更加简单了。每一个索引项都是&amp;lt;offset, position&amp;gt;对，那么第n项的相对位移自然就是buffer的n*entrySize字节处开始的4个字节表示的整数值","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591871612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1521451,"avatar":"https://static001.geekbang.org/account/avatar/00/17/37/2b/b32f1d66.jpg","nickname":"Ball","note":"","ucode":"1EE949E68D84CA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298357,"discussion_content":"第一个问题我也觉得计算值不对，相对位移值比绝对位移值节省4B 的存储空间，1000 个索引项加起来怎么算也是 4KB 左右才对。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597278958,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":215370,"user_name":"RonnieXie","can_delete":false,"product_type":"c1","uid":1395676,"ip_address":"","ucode":"2B5CB6283B1D94","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIZcwnxGkjzENwyeEd3RZsh9tpZDeYmnT51iciaMiaLV2XRfzrJolZvUWjf3L5DuE3BmBg7uCKg3iaSzQ/132","comment_is_top":false,"comment_ctime":1588983177,"is_pvip":false,"replies":[{"id":"79805","content":"你说的没错。不过一般情况下消费者并不是直接能够定位目标offset，相反地它是通过时间戳先找到目标offset的","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1589036126,"ip_address":"","comment_id":215370,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588983177","product_id":100050101,"comment_content":"老师，我这边对OffsetIndex 和 TimeIndex二者结合使用的理解有些模糊；<br>为什么需要一起使用，消费者不是根据Offset找到对于位置值开始消费就好吗？而且结合使用性能也应该降低吧？","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494406,"discussion_content":"你说的没错。不过一般情况下消费者并不是直接能够定位目标offset，相反地它是通过时间戳先找到目标offset的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589036126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210249,"user_name":"delete is create","can_delete":false,"product_type":"c1","uid":1147979,"ip_address":"","ucode":"A8C751219A7746","user_header":"https://static001.geekbang.org/account/avatar/00/11/84/4b/e4738ba8.jpg","comment_is_top":false,"comment_ctime":1587706123,"is_pvip":true,"replies":[{"id":"78366","content":"只能自己写程序实现了，Kafka没有提供这方面的机制:(","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1587712216,"ip_address":"","comment_id":210249,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587706123","product_id":100050101,"comment_content":"老师 如果用kafka实现延迟消息有没有什么好的实践    rocketmq这块原生就支持    想了解下kafka怎么做","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492981,"discussion_content":"只能自己写程序实现了，Kafka没有提供这方面的机制:(","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587712216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210189,"user_name":"Jonah","can_delete":false,"product_type":"c1","uid":1079507,"ip_address":"","ucode":"2C4799BD2FF0DE","user_header":"https://static001.geekbang.org/account/avatar/00/10/78/d3/1dc40aa2.jpg","comment_is_top":false,"comment_ctime":1587695606,"is_pvip":true,"replies":[{"id":"78340","content":"fetchUpperBoundOffset找的是大于给定物理文件位置的最小位置。smallestUpperBoundSlotFor返回-1说明当前索引文件中索引项保存的物理文件位置全都比target小。此时，Kafka代码就要将下一个日志段（如果存在的话）对象的起始位移值作为要寻找的位移值，这也是Log.addAbortedTransactions方法中upperBoundOffset的确认逻辑。但无论如何，fetchUpperBoundOffset作为单个函数而言，它不应该承载这么多逻辑，如果没找到直接返回None是最合理的做法。","user_name":"作者回复","user_name_real":"胡夕","uid":"1288090","ctime":1587697165,"ip_address":"","comment_id":210189,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1587695606","product_id":100050101,"comment_content":"我自己实现了个ceiling，发现源码中其实有fetchUpperBoundOffset，我和他的思路就一个差异，就是当smallestUpperBoundSlotFor返回-1的时候，为啥要返回None，而不是下一个插入位置？<br>def fetchUpperBoundOffset(fetchOffset: OffsetPosition, fetchSize: Int): Option[OffsetPosition] = {<br>    maybeLock(lock) {<br>      val idx = mmap.duplicate<br>      val slot = smallestUpperBoundSlotFor(idx, fetchOffset.position + fetchSize, IndexSearchType.VALUE)<br>      if (slot == -1)<br>        &#47;&#47; 为什么不能是OffsetPosition(lastOffset, mmap.position())<br>        None<br>      else<br>        Some(parseEntry(idx, slot))<br>    }<br>  }<br>","like_count":0,"discussions":[{"author":{"id":1288090,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a7/9a/495cb99a.jpg","nickname":"胡夕","note":"","ucode":"5709A689B6683B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492964,"discussion_content":"fetchUpperBoundOffset找的是大于给定物理文件位置的最小位置。smallestUpperBoundSlotFor返回-1说明当前索引文件中索引项保存的物理文件位置全都比target小。此时，Kafka代码就要将下一个日志段（如果存在的话）对象的起始位移值作为要寻找的位移值，这也是Log.addAbortedTransactions方法中upperBoundOffset的确认逻辑。但无论如何，fetchUpperBoundOffset作为单个函数而言，它不应该承载这么多逻辑，如果没找到直接返回None是最合理的做法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587697165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}