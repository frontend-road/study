{"id":524018,"title":"39｜RESTful Web Services（3）：明确架构愿景与调用栈顺序","content":"<p>你好，我是徐昊。今天我们继续使用TDD的方式实现RESTful Web Services。</p><p>在上节课，我们通过Spike将DI容器引入了实现，代码如下：</p><pre><code>static class ResourceServlet extends HttpServlet {\n    private final Context context;\n    private TestApplication application;\n    private Providers providers;\n    public ResourceServlet(TestApplication application, Providers providers) {\n        this.application = application;\n        this.providers = providers;\n        context = application.getContext();\n    }\n    \n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        Stream&lt;Class&lt;?&gt;&gt; rootResources = application.getClasses().stream().filter(c -&gt; c.isAnnotationPresent(Path.class));\n\n        ResourceContext rc = application.createResourceContext(req, resp);\n        Object result = dispatch(req, rootResources, rc);\n        MessageBodyWriter&lt;Object&gt; writer = (MessageBodyWriter&lt;Object&gt;) providers.getMessageBodyWriter(result.getClass(), null, null, null);\n        writer.writeTo(result, null, null, null, null, null, resp.getOutputStream());\n    }\n    \n    Object dispatch(HttpServletRequest req, Stream&lt;Class&lt;?&gt;&gt; rootResources, ResourceContext rc) {\n        try {\n            Class&lt;?&gt; rootClass = rootResources.findFirst().get();\n            Object rootResource = rc.initResource(context.get(ComponentRef.of(rootClass)).get());\n            Method method = Arrays.stream(rootClass.getMethods()).filter(m -&gt; m.isAnnotationPresent(GET.class)).findFirst().get();\n            return method.invoke(rootResource);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n</code></pre><p>在这个Spike的基础上，我们可以进一步细化架构的愿景：</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/4b/c4yyfbbe0e0361571e7352f4eefc474b.jpg?wh=2284x1285\" alt=\"\"></p><h2>明确调用栈顺序</h2><p>接下来需要稍微Spike一下的，就是Resource Dispatcher的部分：</p><p><video poster=\"https://media001.geekbang.org/b4febcbdd7d5417aa5c94b9cb82a7473/snapshots/bcc327d31d7a4ee6be07467b61d58073-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/10b6470c-181373b959e-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/f9047f0954e44aa88cd1d1c5acfeaeff/dbd3da0096ce419d97efd9e1f1501632-86af099113678cda5dc38ed4a773bfed-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>根据Spike的结果，我们可以得到这部分的架构愿景和调用栈顺序：</p><p><img src=\"https://static001.geekbang.org/resource/image/69/f9/69187acce0858b870364248b0f5f99f9.jpg?wh=2284x1285\" alt=\"\"><br>\n<img src=\"https://static001.geekbang.org/resource/image/10/a1/102dee363b2a45734c24ee4ef20c39a1.jpg?wh=2284x1285\" alt=\"\"><br>\n如上图所示，为大致的组件划分。</p><ul>\n<li>ResourceServlet：以Servlet的形式作为入口，处理Http请求。</li>\n<li>Application：指明RESTful应用所需的所有组件，比如Root Resource、Providers等，也是对于框架提供的服务的访问入口。</li>\n<li>ResourceRouter：Http请求派发算法的实现载体。</li>\n<li>Providers：三个扩展点，也就是MessageBodyWriter，MessageBodyReader以及ExceptionMapper。</li>\n</ul><p>明确了这些之后，就可以进入分解任务的环节了。但是，在这之前，我们要如何处理Spike代码呢？</p><p><video poster=\"https://media001.geekbang.org/2ea69c257de1468d8f983ed13722aa16/snapshots/93ee2b433027475b84420e0714860a29-00005.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/46935a0e-181373bcefc-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/cda9a8ababb24a43ac0a22ee9e0e43c4/1c5845278dca4bf49b52936dc247b48f-7b681756f1a85fa02d4b212d6a7fa960-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>思考题</h2><p>在进入下节课之前，希望你能认真思考如下两个问题。</p><ol>\n<li>在当前架构愿景下，我们要如何分解任务？</li>\n<li>关于架构愿景的学习，你有什么收获吗？</li>\n</ol><!-- [[[read_end]]] --><p>欢迎把你的想法分享在留言区，也欢迎把你的项目代码分享出来。相信经过你的思考与实操，学习效果会更好！</p>","neighbors":{"left":{"article_title":"38｜RESTful Web Services（2）：根据Spike的结果，要如何调整架构愿景？","id":524016},"right":{"article_title":"40｜RESTful Web Services（4）：在当前架构愿景下，要如何分解任务？","id":524019}},"comments":[{"had_liked":false,"id":348700,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1655309365,"is_pvip":false,"replies":[{"id":127876,"content":"嘻嘻每节课都在等你的代码～","user_name":"编辑回复","user_name_real":"编辑","uid":2189689,"ctime":1658043104,"ip_address":"","comment_id":348700,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"留下代码 https:&#47;&#47;github.com&#47;wyyl1&#47;geektime-tdd-framework&#47;tree&#47;3","like_count":1,"discussions":[{"author":{"id":2189689,"avatar":"https://static001.geekbang.org/account/avatar/00/21/69/79/b4132042.jpg","nickname":"🐑","note":"","ucode":"DE34B3B14287D1","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580253,"discussion_content":"嘻嘻每节课都在等你的代码～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658043104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348906,"user_name":"张铁林","can_delete":false,"product_type":"c1","uid":1108258,"ip_address":"","ucode":"4AB8BC6CDAC0A3","user_header":"https://static001.geekbang.org/account/avatar/00/10/e9/22/7606c6ba.jpg","comment_is_top":false,"comment_ctime":1655535453,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"https:&#47;&#47;github.com&#47;vfbiby&#47;tdd-restful\n","like_count":1},{"had_liked":false,"id":390099,"user_name":"范飞扬","can_delete":false,"product_type":"c1","uid":2721761,"ip_address":"广东","ucode":"A665DF46833A81","user_header":"https://static001.geekbang.org/account/avatar/00/29/87/e1/b3edcc09.jpg","comment_is_top":false,"comment_ctime":1714351678,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"好吧，原来dispatcher 变成了ResourceRouter，我说怎么组件元素变少了","like_count":0}]}