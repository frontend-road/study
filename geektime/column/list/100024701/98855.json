{"id":98855,"title":"29 | 虚拟文件系统：文件多了就需要档案管理系统","content":"<p>上一节，咱们的图书馆书架，也就是硬盘上的文件系统格式都搭建好了，现在我们还需要一个图书管理与借阅系统，也就是文件管理模块，不然我们怎么知道书都借给谁了呢？</p><p>进程要想往文件系统里面读写数据，需要很多层的组件一起合作。具体是怎么合作的呢？我们一起来看一看。</p><ul>\n<li>在应用层，进程在进行文件读写操作时，可通过系统调用如sys_open、sys_read、sys_write等。</li>\n<li>在内核，每个进程都需要为打开的文件，维护一定的数据结构。</li>\n<li>在内核，整个系统打开的文件，也需要维护一定的数据结构。</li>\n<li>Linux可以支持多达数十种不同的文件系统。它们的实现各不相同，因此Linux内核向用户空间提供了虚拟文件系统这个统一的接口，来对文件系统进行操作。它提供了常见的文件系统对象模型，例如inode、directory entry、mount等，以及操作这些对象的方法，例如inode operations、directory operations、file operations等。</li>\n<li>然后就是对接的是真正的文件系统，例如我们上节讲的ext4文件系统。</li>\n<li>为了读写ext4文件系统，要通过块设备I/O层，也即BIO层。这是文件系统层和块设备驱动的接口。</li>\n<li>为了加快块设备的读写效率，我们还有一个缓存层。</li>\n<li>最下层是块设备驱动程序。</li>\n</ul><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/3c/73/3c506edf93b15341da3db658e9970773.jpg?wh=1846*2852\" alt=\"\"></p><p>接下来我们逐层解析。</p><p>在这之前，有一点你需要注意。解析系统调用是了解内核架构最有力的一把钥匙，这里我们只要重点关注这几个最重要的系统调用就可以了：</p><ul>\n<li>mount系统调用用于挂载文件系统；</li>\n<li>open系统调用用于打开或者创建文件，创建要在flags中设置O_CREAT，对于读写要设置flags为O_RDWR；</li>\n<li>read系统调用用于读取文件内容；</li>\n<li>write系统调用用于写入文件内容。</li>\n</ul><h2>挂载文件系统</h2><p>想要操作文件系统，第一件事情就是挂载文件系统。</p><p>内核是不是支持某种类型的文件系统，需要我们进行注册才能知道。例如，咱们上一节解析的ext4文件系统，就需要通过register_filesystem进行注册，传入的参数是ext4_fs_type，表示注册的是ext4类型的文件系统。这里面最重要的一个成员变量就是ext4_mount。记住它，这个我们后面还会用。</p><pre><code>register_filesystem(&amp;ext4_fs_type);\n\n\nstatic struct file_system_type ext4_fs_type = {\n\t.owner\t\t= THIS_MODULE,\n\t.name\t\t= &quot;ext4&quot;,\n\t.mount\t\t= ext4_mount,\n\t.kill_sb\t= kill_block_super,\n\t.fs_flags\t= FS_REQUIRES_DEV,\n};\n</code></pre><p>如果一种文件系统的类型曾经在内核注册过，这就说明允许你挂载并且使用这个文件系统。</p><p>刚才我说了几个需要重点关注的系统调用，那我们就从第一个mount系统调用开始解析。mount系统调用的定义如下：</p><pre><code>SYSCALL_DEFINE5(mount, char __user *, dev_name, char __user *, dir_name, char __user *, type, unsigned long, flags, void __user *, data)\n{\n......\n\tret = do_mount(kernel_dev, dir_name, kernel_type, flags, options);\n......\n}\n</code></pre><p>接下来的调用链为：do_mount-&gt;do_new_mount-&gt;vfs_kern_mount。</p><pre><code>struct vfsmount *\nvfs_kern_mount(struct file_system_type *type, int flags, const char *name, void *data)\n{\n......\n\tmnt = alloc_vfsmnt(name);\n......\n\troot = mount_fs(type, flags, name, data);\n......\n\tmnt-&gt;mnt.mnt_root = root;\n\tmnt-&gt;mnt.mnt_sb = root-&gt;d_sb;\n\tmnt-&gt;mnt_mountpoint = mnt-&gt;mnt.mnt_root;\n\tmnt-&gt;mnt_parent = mnt;\n\tlist_add_tail(&amp;mnt-&gt;mnt_instance, &amp;root-&gt;d_sb-&gt;s_mounts);\n\treturn &amp;mnt-&gt;mnt;\n}\n</code></pre><p>vfs_kern_mount先是创建struct mount结构，每个挂载的文件系统都对应于这样一个结构。</p><pre><code>struct mount {\n\tstruct hlist_node mnt_hash;\n\tstruct mount *mnt_parent;\n\tstruct dentry *mnt_mountpoint;\n\tstruct vfsmount mnt;\n\tunion {\n\t\tstruct rcu_head mnt_rcu;\n\t\tstruct llist_node mnt_llist;\n\t};\n\tstruct list_head mnt_mounts;\t/* list of children, anchored here */\n\tstruct list_head mnt_child;\t/* and going through their mnt_child */\n\tstruct list_head mnt_instance;\t/* mount instance on sb-&gt;s_mounts */\n\tconst char *mnt_devname;\t/* Name of device e.g. /dev/dsk/hda1 */\n\tstruct list_head mnt_list;\n......\n} __randomize_layout;\n\n\nstruct vfsmount {\n\tstruct dentry *mnt_root;\t/* root of the mounted tree */\n\tstruct super_block *mnt_sb;\t/* pointer to superblock */\n\tint mnt_flags;\n} __randomize_layout;\n</code></pre><p>其中，mnt_parent是装载点所在的父文件系统，mnt_mountpoint是装载点在父文件系统中的dentry；struct dentry表示目录，并和目录的inode关联；mnt_root是当前文件系统根目录的dentry，mnt_sb是指向超级块的指针。</p><p>接下来，我们来看调用mount_fs挂载文件系统。</p><pre><code>struct dentry *\nmount_fs(struct file_system_type *type, int flags, const char *name, void *data)\n{\n\tstruct dentry *root;\n\tstruct super_block *sb;\n......\n\troot = type-&gt;mount(type, flags, name, data);\n......\n\tsb = root-&gt;d_sb;\n......\n}\n</code></pre><p>这里调用的是ext4_fs_type的mount函数，也就是咱们上面提到的ext4_mount，从文件系统里面读取超级块。在文件系统的实现中，每个在硬盘上的结构，在内存中也对应相同格式的结构。当所有的数据结构都读到内存里面，内核就可以通过操作这些数据结构，来操作文件系统了。</p><p>可以看出来，理解各个数据结构在这里的关系，非常重要。我这里举一个例子，来解析经过mount之后，刚刚那些数据结构之间的关系。</p><p>我们假设根文件系统下面有一个目录home，有另外一个文件系统A挂载在这个目录home下面。在文件系统A的根目录下面有另外一个文件夹hello。由于文件系统A已经挂载到了目录home下面，所以我们就有了目录/home/hello，然后有另外一个文件系统B挂载在/home/hello下面。在文件系统B的根目录下面有另外一个文件夹world，在world下面有个文件夹data。由于文件系统B已经挂载到了/home/hello下面，所以我们就有了目录/home/hello/world/data。</p><p>为了维护这些关系，操作系统创建了这一系列数据结构。具体你可以看下面的图。</p><p><img src=\"https://static001.geekbang.org/resource/image/66/27/663b3c5903d15fd9ba52f6d049e0dc27.jpeg?wh=5173*4114\" alt=\"\"></p><p>文件系统是树形关系。如果所有的文件夹都是几代单传，那就变成了一条线。你注意看图中的三条斜线。</p><p>第一条线是最左边的向左斜的<strong>dentry斜线</strong>。每一个文件和文件夹都有dentry，用于和inode关联。第二条线是最右面的向右斜的<strong>mount斜线</strong>，因为这个例子涉及两次文件系统的挂载，再加上启动的时候挂载的根文件系统，一共三个mount。第三条线是中间的向右斜的<strong>file斜线</strong>，每个打开的文件都有一个file结构，它里面有两个变量，一个指向相应的mount，一个指向相应的dentry。</p><p>我们从最上面往下看。根目录/对应一个dentry，根目录是在根文件系统上的，根文件系统是系统启动的时候挂载的，因而有一个mount结构。这个mount结构的mount point指针和mount root指针都是指向根目录的dentry。根目录对应的file的两个指针，一个指向根目录的dentry，一个指向根目录的挂载结构mount。</p><p>我们再来看第二层。下一层目录home对应了两个dentry，而且它们的parent都指向第一层的dentry。这是为什么呢？这是因为文件系统A挂载到了这个目录下。这使得这个目录有两个用处。一方面，home是根文件系统的一个挂载点；另一方面，home是文件系统A的根目录。</p><p>因为还有一次挂载，因而又有了一个mount结构。这个mount结构的mount point指针指向作为挂载点的那个dentry。mount root指针指向作为根目录的那个dentry，同时parent指针指向第一层的mount结构。home对应的file的两个指针，一个指向文件系统A根目录的dentry，一个指向文件系统A的挂载结构mount。</p><p>我们再来看第三层。目录hello又挂载了一个文件系统B，所以第三层的结构和第二层几乎一样。</p><p>接下来是第四层。目录world就是一个普通的目录。只要它的dentry的parent指针指向上一层就可以了。我们来看world对应的file结构。由于挂载点不变，还是指向第三层的mount结构。</p><p>接下来是第五层。对于文件data，是一个普通的文件，它的dentry的parent指向第四层的dentry。对于data对应的file结构，由于挂载点不变，还是指向第三层的mount结构。</p><h2>打开文件</h2><p>接下来，我们从分析Open系统调用说起。</p><p>在<a href=\"https://time.geekbang.org/column/article/89251\">系统调用</a>的那一节，我们知道，在进程里面通过open系统调用打开文件，最终对调用到内核的系统调用实现sys_open。当时我们仅仅解析了系统调用的原理，没有接着分析下去，现在我们接着分析这个过程。</p><pre><code>SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t, mode)\n{\n......\n\treturn do_sys_open(AT_FDCWD, filename, flags, mode);\n}\n\n\nlong do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode)\n{\n......\n\tfd = get_unused_fd_flags(flags);\n\tif (fd &gt;= 0) {\n\t\tstruct file *f = do_filp_open(dfd, tmp, &amp;op);\n\t\tif (IS_ERR(f)) {\n\t\t\tput_unused_fd(fd);\n\t\t\tfd = PTR_ERR(f);\n\t\t} else {\n\t\t\tfsnotify_open(f);\n\t\t\tfd_install(fd, f);\n\t\t}\n\t}\n\tputname(tmp);\n\treturn fd;\n}\n</code></pre><p>要打开一个文件，首先要通过get_unused_fd_flags得到一个没有用的文件描述符。如何获取这个文件描述符呢？</p><p>在每一个进程的task_struct中，有一个指针files，类型是files_struct。</p><pre><code>struct files_struct\t\t*files;\n</code></pre><p>files_struct里面最重要的是一个文件描述符列表，每打开一个文件，就会在这个列表中分配一项，下标就是文件描述符。</p><pre><code>struct files_struct {\n......\n\tstruct file __rcu * fd_array[NR_OPEN_DEFAULT];\n};\n</code></pre><p>对于任何一个进程，默认情况下，文件描述符0表示stdin标准输入，文件描述符1表示stdout标准输出，文件描述符2表示stderr标准错误输出。另外，再打开的文件，都会从这个列表中找一个空闲位置分配给它。</p><p>文件描述符列表的每一项都是一个指向struct file的指针，也就是说，每打开一个文件，都会有一个struct file对应。</p><p>do_sys_open中调用do_filp_open，就是创建这个struct file结构，然后fd_install(fd, f)是将文件描述符和这个结构关联起来。</p><pre><code>struct file *do_filp_open(int dfd, struct filename *pathname,\n\t\tconst struct open_flags *op)\n{\n......\n\tset_nameidata(&amp;nd, dfd, pathname);\n\tfilp = path_openat(&amp;nd, op, flags | LOOKUP_RCU);\n......\n\trestore_nameidata();\n\treturn filp;\n}\n</code></pre><p>do_filp_open里面首先初始化了struct nameidata这个结构。我们知道，文件都是一串的路径名称，需要逐个解析。这个结构在解析和查找路径的时候提供辅助作用。</p><p>在struct nameidata里面有一个关键的成员变量struct path。</p><pre><code>struct path {\n\tstruct vfsmount *mnt;\n\tstruct dentry *dentry;\n} __randomize_layout;\n</code></pre><p>其中，struct vfsmount和文件系统的挂载有关。另一个struct dentry，除了上面说的用于标识目录之外，还可以表示文件名，还会建立文件名及其inode之间的关联。</p><p>接下来就调用path_openat，主要做了以下几件事情：</p><ul>\n<li>get_empty_filp生成一个struct file结构；</li>\n<li>path_init初始化nameidata，准备开始节点路径查找；</li>\n<li>link_path_walk对于路径名逐层进行节点路径查找，这里面有一个大的循环，用“/”分隔逐层处理；</li>\n<li>do_last获取文件对应的inode对象，并且初始化file对象。</li>\n</ul><pre><code>static struct file *path_openat(struct nameidata *nd,\n\t\t\tconst struct open_flags *op, unsigned flags)\n{\n......\n\tfile = get_empty_filp();\n......\n\ts = path_init(nd, flags);\n......\n\twhile (!(error = link_path_walk(s, nd)) &amp;&amp;\n\t\t(error = do_last(nd, file, op, &amp;opened)) &gt; 0) {\n......\n\t}\n\tterminate_walk(nd);\n......\n\treturn file;\n}\n</code></pre><p>例如，文件“/root/hello/world/data”，link_path_walk会解析前面的路径部分“/root/hello/world”，解析完毕的时候nameidata的dentry为路径名的最后一部分的父目录“/root/hello/world”，而nameidata的filename为路径名的最后一部分“data”。</p><p>最后一部分的解析和处理，我们交给do_last。</p><pre><code>static int do_last(struct nameidata *nd,\n\t\t   struct file *file, const struct open_flags *op,\n\t\t   int *opened)\n{\n......\n\terror = lookup_fast(nd, &amp;path, &amp;inode, &amp;seq);\n......\n    error = lookup_open(nd, &amp;path, file, op, got_write, opened);\n......\n\terror = vfs_open(&amp;nd-&gt;path, file, current_cred());\n......\n}\n</code></pre><p>在这里面，我们需要先查找文件路径最后一部分对应的dentry。如何查找呢？</p><p>Linux为了提高目录项对象的处理效率，设计与实现了目录项高速缓存dentry cache，简称dcache。它主要由两个数据结构组成：</p><ul>\n<li>哈希表dentry_hashtable：dcache中的所有dentry对象都通过d_hash指针链到相应的dentry哈希链表中；</li>\n<li>未使用的dentry对象链表s_dentry_lru：dentry对象通过其d_lru指针链入LRU链表中。LRU的意思是最近最少使用，我们已经好几次看到它了。只要有它，就说明长时间不使用，就应该释放了。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/82/59/82dd76e1e84915206eefb8fc88385859.jpeg?wh=1804*3043\" alt=\"\"></p><p>这两个列表之间会产生复杂的关系：</p><ul>\n<li>引用为0：一个在散列表中的dentry变成没有人引用了，就会被加到LRU表中去；</li>\n<li>再次被引用：一个在LRU表中的dentry再次被引用了，则从LRU表中移除；</li>\n<li>分配：当dentry在散列表中没有找到，则从Slub分配器中分配一个；</li>\n<li>过期归还：当LRU表中最长时间没有使用的dentry应该释放回Slub分配器；</li>\n<li>文件删除：文件被删除了，相应的dentry应该释放回Slub分配器；</li>\n<li>结构复用：当需要分配一个dentry，但是无法分配新的，就从LRU表中取出一个来复用。</li>\n</ul><p>所以，do_last()在查找dentry的时候，当然先从缓存中查找，调用的是lookup_fast。</p><p>如果缓存中没有找到，就需要真的到文件系统里面去找了，lookup_open会创建一个新的dentry，并且调用上一级目录的Inode的inode_operations的lookup函数，对于ext4来讲，调用的是ext4_lookup，会到咱们上一节讲的文件系统里面去找inode。最终找到后将新生成的dentry赋给path变量。</p><pre><code>static int lookup_open(struct nameidata *nd, struct path *path,\n\t\t\tstruct file *file,\n\t\t\tconst struct open_flags *op,\n\t\t\tbool got_write, int *opened)\n{\n    ......\n    dentry = d_alloc_parallel(dir, &amp;nd-&gt;last, &amp;wq);\n    ......\n    struct dentry *res = dir_inode-&gt;i_op-&gt;lookup(dir_inode, dentry,\n\t\t\t\t\t\t\t     nd-&gt;flags);\n    ......\n    path-&gt;dentry = dentry;\n\tpath-&gt;mnt = nd-&gt;path.mnt;\n}\n\n\n\n\nconst struct inode_operations ext4_dir_inode_operations = {\n\t.create\t\t= ext4_create,\n\t.lookup\t\t= ext4_lookup,\n...\n</code></pre><p>do_last()的最后一步是调用vfs_open真正打开文件。</p><pre><code>int vfs_open(const struct path *path, struct file *file,\n\t     const struct cred *cred)\n{\n\tstruct dentry *dentry = d_real(path-&gt;dentry, NULL, file-&gt;f_flags, 0);\n......\n\tfile-&gt;f_path = *path;\n\treturn do_dentry_open(file, d_backing_inode(dentry), NULL, cred);\n}\n\n\nstatic int do_dentry_open(struct file *f,\n\t\t\t  struct inode *inode,\n\t\t\t  int (*open)(struct inode *, struct file *),\n\t\t\t  const struct cred *cred)\n{\n......\n\tf-&gt;f_mode = OPEN_FMODE(f-&gt;f_flags) | FMODE_LSEEK |\n\t\t\t\tFMODE_PREAD | FMODE_PWRITE;\n\tpath_get(&amp;f-&gt;f_path);\n\tf-&gt;f_inode = inode;\n\tf-&gt;f_mapping = inode-&gt;i_mapping;\n......\n\tf-&gt;f_op = fops_get(inode-&gt;i_fop);\n......\n\topen = f-&gt;f_op-&gt;open;\n......\n\terror = open(inode, f);\n......\n\tf-&gt;f_flags &amp;= ~(O_CREAT | O_EXCL | O_NOCTTY | O_TRUNC);\n\tfile_ra_state_init(&amp;f-&gt;f_ra, f-&gt;f_mapping-&gt;host-&gt;i_mapping);\n\treturn 0;\n......\n}\n\n\nconst struct file_operations ext4_file_operations = {\n......\n\t.open\t\t= ext4_file_open,\n......\n};\n\n</code></pre><p>vfs_open里面最终要做的一件事情是，调用f_op-&gt;open，也就是调用ext4_file_open。另外一件重要的事情是将打开文件的所有信息，填写到struct file这个结构里面。</p><pre><code>struct file {\n\tunion {\n\t\tstruct llist_node\tfu_llist;\n\t\tstruct rcu_head \tfu_rcuhead;\n\t} f_u;\n\tstruct path\t\tf_path;\n\tstruct inode\t\t*f_inode;\t/* cached value */\n\tconst struct file_operations\t*f_op;\n\tspinlock_t\t\tf_lock;\n\tenum rw_hint\t\tf_write_hint;\n\tatomic_long_t\t\tf_count;\n\tunsigned int \t\tf_flags;\n\tfmode_t\t\t\tf_mode;\n\tstruct mutex\t\tf_pos_lock;\n\tloff_t\t\t\tf_pos;\n\tstruct fown_struct\tf_owner;\n\tconst struct cred\t*f_cred;\n......\n\tstruct address_space\t*f_mapping;\n\terrseq_t\t\tf_wb_err;\n}\n</code></pre><h2>总结时刻</h2><p>对于虚拟文件系统的解析就到这里了，我们可以看出，有关文件的数据结构层次多，而且很复杂，就得到了下面这张图，这张图在这个专栏最开始的时候，已经展示过一遍，到这里，你应该能明白它们之间的关系了。</p><p><img src=\"https://static001.geekbang.org/resource/image/80/b9/8070294bacd74e0ac5ccc5ac88be1bb9.png?wh=4819*2602\" alt=\"\"></p><p>这张图十分重要，一定要掌握。因为我们后面的字符设备、块设备、管道、进程间通信、网络等等，全部都要用到这里面的知识。希望当你再次遇到它的时候，能够马上说出各个数据结构之间的关系。</p><p>这里我带你简单做一个梳理，帮助你理解记忆它。</p><p>对于每一个进程，打开的文件都有一个文件描述符，在files_struct里面会有文件描述符数组。每个一个文件描述符是这个数组的下标，里面的内容指向一个file结构，表示打开的文件。这个结构里面有这个文件对应的inode，最重要的是这个文件对应的操作file_operation。如果操作这个文件，就看这个file_operation里面的定义了。</p><p>对于每一个打开的文件，都有一个dentry对应，虽然叫作directory entry，但是不仅仅表示文件夹，也表示文件。它最重要的作用就是指向这个文件对应的inode。</p><p>如果说file结构是一个文件打开以后才创建的，dentry是放在一个dentry cache里面的，文件关闭了，他依然存在，因而他可以更长期地维护内存中的文件的表示和硬盘上文件的表示之间的关系。</p><p>inode结构就表示硬盘上的inode，包括块设备号等。</p><p>几乎每一种结构都有自己对应的operation结构，里面都是一些方法，因而当后面遇到对于某种结构进行处理的时候，如果不容易找到相应的处理函数，就先找这个operation结构，就清楚了。</p><h2>课堂练习</h2><p>上一节的总结中，我们说，同一个文件系统中，文件夹和文件的对应关系。如果跨的是文件系统，你知道如何维护这种映射关系吗？</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg?wh=1110*659\" alt=\"\"></p>","comments":[{"had_liked":false,"id":100577,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1559597835,"is_pvip":false,"replies":[{"id":"37048","content":"赞，这个思路好啊","user_name":"作者回复","comment_id":100577,"uid":"1001590","ip_address":"","utype":1,"ctime":1560255727,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"134703584011","product_id":100024701,"comment_content":"文章的核心就是把磁盘文件数据映射到进程中，可以把在磁盘的文件组织看成一种协议，内存中进程中的文件组织形式看成另外一种协议，内核就是这两个协议的中转proxy,带着这个主线看文章思路要明朗一些<br>  inode和dentry在一个文件系统挂载的时候怎么初始化和做好映射关系，这个是难点，我一开始也看懵逼了，后来一想，根文件系统不是挂载了各种磁盘分区的文件系统么，这个老师如果结合centos的xfs根文件系统下，可以挂载ext4的文件系统，并且用一个磁盘分区演示挂载，然后分析，可能大家更好理解，毕竟平时大家都是一个文件系统格式走到黑，个人建议这种复杂逻辑关系比如那个挂载图可以拍个动态图和视频，发个链接让大家去看看，<br>  ","like_count":32,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452607,"discussion_content":"赞，这个思路好啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560255727,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228194,"user_name":"Geek_ty","can_delete":false,"product_type":"c1","uid":1587280,"ip_address":"","ucode":"F8178B6B09D628","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epZhOmpZpicOzalVU7kibd59dMJc25N9cfGu9icBAIUPzYNYDedtzlYHZBiazaYiadgqvlotrjM4CA6KOQ/132","comment_is_top":false,"comment_ctime":1592585625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"74607029657","product_id":100024701,"comment_content":"感觉文件系统几篇文章还有很大提升空间，整体逻辑上应该有所调整才能更容易让人看懂。另外在有些方面介绍的不够详细，如dentry等并没有给出说明。除此之外还忽略了很多，如ext4_inode_info和ext4_inode是什么关系，如文件系统和虚拟文件系统如何建立关系，其设计的艺术的分析。希望作者有空的话可以整理整理提高一下，写的更能由浅入深。","like_count":18},{"had_liked":false,"id":101205,"user_name":"烈日融雪","can_delete":false,"product_type":"c1","uid":1131925,"ip_address":"","ucode":"E462E30FB0AFC0","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/95/968fd89f.jpg","comment_is_top":false,"comment_ctime":1559741251,"is_pvip":false,"replies":[{"id":"37036","content":"赞","user_name":"作者回复","comment_id":101205,"uid":"1001590","ip_address":"","utype":1,"ctime":1560255464,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"74574185283","product_id":100024701,"comment_content":"结合《Linux内核设计与实现》这本书 进入状态更快","like_count":18,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452851,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560255464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2311161,"avatar":"","nickname":"稻草人","note":"","ucode":"C5DF5B2437C97B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376752,"discussion_content":"看完这个专栏，去看这本书，会轻松很多！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622310462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101064,"user_name":"why","can_delete":false,"product_type":"c1","uid":1012937,"ip_address":"","ucode":"C9E796E53F6F5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/c9/d3439ca4.jpg","comment_is_top":false,"comment_ctime":1559707921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44509380881","product_id":100024701,"comment_content":"- 多层组件统一完成进行读写文件的任务<br>    - 系统调用 sys_open, sys_read 等<br>    - 进程维护打开的文件数据结构, 系统维护所有打开的文件数据结构<br>    - Linux 提供统一的虚拟文件系统接口; 例如 inode, directory entry, mount, 以及对应操作 inode  operations等, 因此可以同时支持数十种不同的文件系统<br>    - vfs 通过设备 I&#47;O 层在通过块设备驱动程序访问硬盘文件系统<br>    - 通过缓存层加快块设备读写<br>- 通过解析系统调用了解内核架构<br>- 挂载文件系统 mount<br>    - 注册文件系统 register_filesystem 后才能挂载<br>    - 调用链 mount-&gt;do_mount-&gt;do_new_mount→vfs_kern_mount<br>    - 首先创建 struct mount<br>        - 其中 mnt_parent 指向父 fs 的 mount; mnt_parentpoint 指向父 fs 的 dentry<br>        - 用 dentry 表示目录, 并和目录的 inode 关联<br>        - mnt_root 指向当前 fs 根目录的 dentry; 还有 vfsmount 指向挂载树 root 和超级块<br>    - 调用 mount_fs 进行挂载<br>        - 调用 ext4_fs_type→mount(ext4_mount),  读取超级块到内存<br>        - 文件和文件夹都有一个 dentry, 用于与 inode 关联, 每个挂载的文件系统都由一个 mount 描述; 每个打开的文件都由 file 结构描述, 其指向 dentry 和 mount.<br>        - 二层文件系统根目录有两个 dentry, 一个表示挂载点, 另一个是上层 fs 的目录.<br>- 打开文件 sys_open<br>    - 先获取一个未使用的 fd, 其中 task_struct.files.fd_array[] 中每一项指向打开文件的 struct file, 其中 fd 作为下标. 默认 0→stdin, 1→stdout, 2→stderr<br>    - 调用 do_sys_open-&gt;do_flip_open<br>        - 先初始化 nameidata, 解析文件路径名; 接着调用 path_openat<br>            - 生成 struct file 结构; 初始化 nameidata, 准备查找<br>            - link_path_walk 根据路径名逐层查找<br>            - do_last 获取文件 inode, 初始化 file<br>        - 查找路径最后一部分对应的 dentry<br>            - Linux 通过目录项高速缓存 dentry cache(dentry) 提高效率. 由两个数据结构组成<br>                - 哈希表: dentry_hashtable; 引用变为 0 后加入 lru 链表; dentry 没找到则从 slub 分配; 无法分配则从 lru 中获取; 文件删除释放 dentry;<br>                - 未使用的 dentry lru 链表; 再次被引用返回哈希表; dentry 过期返回给 slub 分配器<br>            - do_last 先从缓存查找 dentry, 若没找到在从文件系统中找并创建 dentry, 再赋给 nameidata 的 path.dentry; 最后调用 vfs_open 真正打开文件<br>            - vfs_open 会调用 f_op-&gt;open 即 ext4_file_open, 还将文件信息存入 struct file 中.<br>        - 许多结构体中都有自己对应的 operation 结构, 方便调用对应的函数进行处理","like_count":11},{"had_liked":false,"id":100612,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1559606284,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23034442764","product_id":100024701,"comment_content":"我再补充总结一下<br>第一 文章讲的是格式化一个磁盘并且mount到系统根目录<br>第二 进程创建过程中跟文件的交互过程，包括打开，创建，当然修改删除老师没讲<br>进城文件系统这个我有点疑惑之前老师讲进程task struct有提过，希望老师指点指点<br>大家可以自己格式化一个盘ext4，然后strace mount &#47;dev&#47;sdc &#47;test_flash &gt; mntout 2&gt;&amp;1<br>我追踪的关于mount的如下<br>execve(&quot;&#47;bin&#47;mount&quot;, [&quot;mount&quot;, &quot;&#47;dev&#47;sdc&quot;, &quot;&#47;test_flash&quot;], [&#47;* 26 vars *&#47;]) = 0<br>open(&quot;&#47;lib64&#47;libmount.so.1&quot;, O_RDONLY|O_CLOEXEC) = 3<br>lstat(&quot;&#47;run&#47;mount&#47;utab&quot;, 0x7ffebb0a8130) = -1 ENOENT (No such file or directory)<br>mkdir(&quot;&#47;run&#47;mount&quot;, 0755)               = -1 EEXIST (File exists)<br>stat(&quot;&#47;run&#47;mount&#47;utab&quot;, 0x7ffebb0a8020) = -1 ENOENT (No such file or directory)<br>stat(&quot;&#47;run&#47;mount&quot;, {st_mode=S_IFDIR|0755, st_size=40, ...}) = 0<br>access(&quot;&#47;run&#47;mount&quot;, R_OK|W_OK)         = 0<br>stat(&quot;&#47;sbin&#47;mount.ext4&quot;, 0x7ffebb0a6fc0) = -1 ENOENT (No such file or directory)<br>stat(&quot;&#47;sbin&#47;fs.d&#47;mount.ext4&quot;, 0x7ffebb0a6fc0) = -1 ENOENT (No such file or directory)<br>stat(&quot;&#47;sbin&#47;fs&#47;mount.ext4&quot;, 0x7ffebb0a6fc0) = -1 ENOENT (No such file or directory)<br>mount(&quot;&#47;dev&#47;sdc&quot;, &quot;&#47;test_flash&quot;, &quot;ext4&quot;, MS_MGC_VAL, NULL) = 0<br>","like_count":6},{"had_liked":false,"id":151107,"user_name":"深寒色的猫丶","can_delete":false,"product_type":"c1","uid":1183264,"ip_address":"","ucode":"869A2AB044E0D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/0e/20/bf8d71c3.jpg","comment_is_top":false,"comment_ctime":1573654230,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"18753523414","product_id":100024701,"comment_content":"老师，你说dentry最重要的作用是指向inode，但是 struct file不是已经指向inode了么","like_count":5,"discussions":[{"author":{"id":1253128,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1f/08/14642f9e.jpg","nickname":"相望于江湖","note":"","ucode":"9CCB6F89F92C89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552286,"discussion_content":"只是为了方便路径查找和复用而已，dentry有缓存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645373217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1203671,"avatar":"","nickname":"风逐残叶_c","note":"","ucode":"9BB90C99B09691","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":368764,"discussion_content":"我理解应该是作用不一样，struct file是VFS的接口层，是给每个进程用，屏蔽不同文件系统的细节。但是dentry是真实inode和内存的映射关系，属于VFS的实现层。struct fille指向inode，不代表dentry就没用了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618824797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267133,"user_name":"达文西","can_delete":false,"product_type":"c1","uid":1398824,"ip_address":"","ucode":"01C1063F23D634","user_header":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","comment_is_top":false,"comment_ctime":1607605846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14492507734","product_id":100024701,"comment_content":"inode跟dentry属于文件系统范畴，struct file属于进程上下文，fd属于用户态空间概念。","like_count":4},{"had_liked":false,"id":135500,"user_name":"thomas","can_delete":false,"product_type":"c1","uid":1016777,"ip_address":"","ucode":"9AB945308F1B50","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/c9/5d03981a.jpg","comment_is_top":false,"comment_ctime":1569199493,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14454101381","product_id":100024701,"comment_content":"老师，我的理解第一张图中的page cache，应该是buffer吧，而page cache是在VFS这一层 ","like_count":4},{"had_liked":false,"id":155381,"user_name":"czh","can_delete":false,"product_type":"c1","uid":1159078,"ip_address":"","ucode":"649FE5C9269D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/af/a6/3f15ba2f.jpg","comment_is_top":false,"comment_ctime":1574683769,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10164618361","product_id":100024701,"comment_content":"虚拟文件系统其实就是文件系统的数据结构，所以各个数据结构之间的关系要明白，作者在最后已经画出来了！背了它！","like_count":3},{"had_liked":false,"id":115414,"user_name":"oldman","can_delete":false,"product_type":"c1","uid":1133711,"ip_address":"","ucode":"6BACE2832B4429","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/8f/a90b3969.jpg","comment_is_top":false,"comment_ctime":1563584559,"is_pvip":false,"replies":[{"id":"46561","content":"看书，写代码","user_name":"作者回复","comment_id":115414,"uid":"1001590","ip_address":"","utype":1,"ctime":1566357705,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"10153519151","product_id":100024701,"comment_content":"想问问老师，怎么才能学好C语言","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459099,"discussion_content":"看书，写代码","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566357705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104222,"user_name":"Guarantee","can_delete":false,"product_type":"c1","uid":1388495,"ip_address":"","ucode":"46380E86F03F26","user_header":"https://static001.geekbang.org/account/avatar/00/15/2f/cf/fb214a2c.jpg","comment_is_top":false,"comment_ctime":1560688570,"is_pvip":false,"replies":[{"id":"49032","content":"draw.io","user_name":"作者回复","comment_id":104222,"uid":"1001590","ip_address":"","utype":1,"ctime":1567581490,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"10150623162","product_id":100024701,"comment_content":"老师，您专栏中的图，用的是什么软件，还是就是PS做的图吗？","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454175,"discussion_content":"draw.io","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567581490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163462,"user_name":"奔跑的码仔","can_delete":false,"product_type":"c1","uid":1609871,"ip_address":"","ucode":"AB3B02B07B8B8C","user_header":"https://static001.geekbang.org/account/avatar/00/18/90/8f/9c691a5f.jpg","comment_is_top":false,"comment_ctime":1576726435,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5871693731","product_id":100024701,"comment_content":"对于总结中的那副图，进程A和进程B都打开了stderr文件，但是，图中表示的是两个stderr文件描述符指向了同一个struct file结构。理论上，这个进程的stderr应该对应不同的struct file才对，应为struct file依附于进程的，进程每打开文件，内核就会相应的创建一个struct file与之对应。","like_count":1},{"had_liked":false,"id":126783,"user_name":"莫名","can_delete":false,"product_type":"c1","uid":1007254,"ip_address":"","ucode":"E28F2602BA25DD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/96/a03175bc.jpg","comment_is_top":false,"comment_ctime":1566474591,"is_pvip":false,"replies":[{"id":"48790","content":"inode结构就是用来“表示”硬盘上的inode。inode结构体是磁盘文件inode的内存表示，我也是这个意思的","user_name":"作者回复","comment_id":126783,"uid":"1001590","ip_address":"","utype":1,"ctime":1567496355,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"5861441887","product_id":100024701,"comment_content":"`inode 结构就表示硬盘上的 inode，包括块设备号等。` 这个说法不太准确。inode结构体是磁盘文件inode的内存表示，磁盘文件的inode不包含引用计数之类的东西，被读取至内存，使用inode结构体表示。","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464164,"discussion_content":"inode结构就是用来“表示”硬盘上的inode。inode结构体是磁盘文件inode的内存表示，我也是这个意思的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567496355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286929,"user_name":"geek","can_delete":false,"product_type":"c1","uid":2401422,"ip_address":"","ucode":"FF0845140D72A9","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/NyFOEueITjaGLpakMEuWAqVQjo1uDIXlpDdpCxXGfaWiaXzibLQ3WgOFCe8D9FvCmyjsGT7jDsLUbkt8jt2aVs9g/132","comment_is_top":false,"comment_ctime":1617686045,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1617686045","product_id":100024701,"comment_content":"file operation和 inode operation有什么区别呢？为啥要分两种，我理解file就是inode，操作file就是操作inode。","like_count":0},{"had_liked":false,"id":282079,"user_name":"garlic","can_delete":false,"product_type":"c1","uid":1019579,"ip_address":"","ucode":"FEB147EDB5774E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/bb/c039dc11.jpg","comment_is_top":false,"comment_ctime":1615046196,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1615046196","product_id":100024701,"comment_content":"跨越了文件系统目录和文件就没啥关系了， 查找文件可以通过dentry cache进行查找， 未找到时，通过文件系统mount point信息，读取中间的目录， 查找生成新dentry， 其父dentry也是指向其所在文件系统，不会跨越文件系统， 学习笔记https:&#47;&#47;garlicspace.com&#47;2021&#47;03&#47;06&#47;linux%e8%b7%a8%e6%96%87%e4%bb%b6%e7%b3%bb%e7%bb%9f%e7%9a%84%e6%96%87%e4%bb%b6%e5%a4%b9%e5%92%8c%e6%96%87%e4%bb%b6%e6%98%a0%e5%b0%84%e5%85%b3%e7%b3%bb&#47;","like_count":1},{"had_liked":false,"id":263155,"user_name":"凯","can_delete":false,"product_type":"c1","uid":1405256,"ip_address":"","ucode":"60DB11CF72C7B0","user_header":"https://static001.geekbang.org/account/avatar/00/15/71/48/44df7f4e.jpg","comment_is_top":false,"comment_ctime":1606026031,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606026031","product_id":100024701,"comment_content":"有一个问题，想请教一下，文件打开如果是文本格式打开文本文件（txt格式）没有问题，但是打开.csv .xls 就有问题。打开文件一般都会遇到判断文件格式的问题。<br><br>解决方案大致有两种，<br>1. 按照文件后缀判断，（不靠谱，windows可以修改后缀。Linux不关心后缀）<br>2. 二进制方式打开，读取前面的一到两个字节，转换成16进制的的字符串，判断这个字符串在提前准备好的不同文件的类型和开头前两个字符串组成的字典中查找。从而查找到对应的关系。<br>第二种方式可以判断，但是不知道原理，不知道是不是可靠。这个参考的文档么。<br><br>拓展，如果可以判断文件类型，是不是可以判断编码格式。这个没有查到。","like_count":0},{"had_liked":false,"id":260583,"user_name":"K菌无惨","can_delete":false,"product_type":"c1","uid":2194764,"ip_address":"","ucode":"97A532D588FD49","user_header":"","comment_is_top":false,"comment_ctime":1605065456,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605065456","product_id":100024701,"comment_content":"老师 请教一下struct ext4_dir_entry_2与struct dentry存在什么关联吗?","like_count":0},{"had_liked":false,"id":254889,"user_name":"时光","can_delete":false,"product_type":"c1","uid":1347240,"ip_address":"","ucode":"1087509C209C54","user_header":"https://static001.geekbang.org/account/avatar/00/14/8e/a8/c9819e37.jpg","comment_is_top":false,"comment_ctime":1603206647,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1603206647","product_id":100024701,"comment_content":"老师，文件名没有存放在inode结构里面吗，那文件名在磁盘上的什么地方存放呢？","like_count":0},{"had_liked":false,"id":219358,"user_name":"百行吴书","can_delete":false,"product_type":"c1","uid":1806261,"ip_address":"","ucode":"3DFCBBEBCA9A4B","user_header":"https://static001.geekbang.org/account/avatar/00/1b/8f/b5/7bc42adc.jpg","comment_is_top":false,"comment_ctime":1590016089,"is_pvip":false,"replies":[{"id":"83086","content":"竟然能ping通，能找到网卡吗？","user_name":"作者回复","comment_id":219358,"uid":"1001590","ip_address":"","utype":1,"ctime":1591785810,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"1590016089","product_id":100024701,"comment_content":"老师请教一个问题<br>我们创建的namespace  有没有统一的地方找到它<br>我创建一个network  namespace 在&#47;var&#47;run&#47;netns 目录下会生成一个挂载点  可以通过它 到ns中 <br> 现在我将一个网卡设备放到这个ns中  启用并配置IP  可以ping通  <br>此时通过 ip nsnet del 命令将这个ns删除  &#47;var&#47;run&#47;netns&#47; 目录下 ns的挂载点文件也将消失 <br>再ping 原先那个网卡  发现还可以ping通<br>疑问:该怎么进入这个ns，怎么将那个网卡拿回来？<br>还有一个问题  是不是只有在磁盘中的文件  才能通过 find -inum inode找到  在内存中不能通过该方法  有没有其他方法通过 inode找到内存中的文件","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495782,"discussion_content":"竟然能ping通，能找到网卡吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591785810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1806261,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/8f/b5/7bc42adc.jpg","nickname":"百行吴书","note":"","ucode":"3DFCBBEBCA9A4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281654,"discussion_content":"找不着，使用的是macvlan","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591786062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173193,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1579451352,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579451352","product_id":100024701,"comment_content":"我理解page cache那一层应该是缓冲区，而page cache应该在文件系统上面","like_count":0},{"had_liked":false,"id":139954,"user_name":"zhj","can_delete":false,"product_type":"c1","uid":1311772,"ip_address":"","ucode":"65B9E222D6E075","user_header":"https://static001.geekbang.org/account/avatar/00/14/04/1c/b0c6c009.jpg","comment_is_top":false,"comment_ctime":1570773628,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1570773628","product_id":100024701,"comment_content":"在vfs_kern_mount函数中<br>mnt-&gt;mnt.mnt_root = root;<br>\tmnt-&gt;mnt.mnt_sb = root-&gt;d_sb;<br>\tmnt-&gt;mnt_mountpoint = mnt-&gt;mnt.mnt_root;<br>\tmnt-&gt;mnt_parent = mnt;<br><br>这不是说明新分配的mount的挂载点就是vfsmount中的mnt_root<br>mnt_parent 就是新分配的mount  <br>和上文讲到的二者dentry不一致 且 mount的父mount说的不一致","like_count":0,"discussions":[{"author":{"id":1657948,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4c/5c/9ea0f752.jpg","nickname":"程序猿不圆","note":"","ucode":"BC8926A84A07C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":177313,"discussion_content":"do_add_mount函数中会做真正的挂接操作，修改挂载点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582093806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":138851,"user_name":"williamcai","can_delete":false,"product_type":"c1","uid":1158294,"ip_address":"","ucode":"B158F52C2D39BC","user_header":"https://static001.geekbang.org/account/avatar/00/11/ac/96/46b13896.jpg","comment_is_top":false,"comment_ctime":1570492816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570492816","product_id":100024701,"comment_content":"老师，你好，在dcache中没有找到文件，就会创建一个，这个新创建的文件要不要放入dcache中？<br>","like_count":0},{"had_liked":false,"id":133052,"user_name":"计算机班陈公子","can_delete":false,"product_type":"c1","uid":1168448,"ip_address":"","ucode":"0D776A68CBA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/40/7401ecc1.jpg","comment_is_top":false,"comment_ctime":1568339775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568339775","product_id":100024701,"comment_content":"有一点疑惑的就是，是不是一个进程打开一个文件会新建两个struct，一个是file struct他会放进files_struct数组里面，这个file stuct里面拥有inode信息。然后还会新建一个dentry struct，里面也有inode的信息？我看专栏中说这两个struct都是在文件打开后新建的，那这两个作用是否重复？还是说因为dentry还保留了mount的信息？","like_count":0},{"had_liked":false,"id":105498,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1561015662,"is_pvip":false,"replies":[{"id":"48899","content":"在内存里面，也有superblock的，会关联dentry","user_name":"作者回复","comment_id":105498,"uid":"1001590","ip_address":"","utype":1,"ctime":1567510813,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1561015662","product_id":100024701,"comment_content":"如何维护跨文件系统的文件夹和文件的关系：通过dentry在操作系统层面来维护，dentry和inode关联，而且dentry里有parent、child、subdirs这些成员，正好对应文件夹和文件之间的关系","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454706,"discussion_content":"在内存里面，也有superblock的，会关联dentry","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567510813,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105450,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1561003062,"is_pvip":false,"replies":[{"id":"48900","content":"会的","user_name":"作者回复","comment_id":105450,"uid":"1001590","ip_address":"","utype":1,"ctime":1567510822,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1561003062","product_id":100024701,"comment_content":"老师您好，请教一个问题：lookup_open创建新的dentry后，会把新的dentry加到dentry cache里吗？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454689,"discussion_content":"会的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567510822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102616,"user_name":"Spring","can_delete":false,"product_type":"c1","uid":1222211,"ip_address":"","ucode":"8175463FB4705B","user_header":"https://static001.geekbang.org/account/avatar/00/12/a6/43/cb6ab349.jpg","comment_is_top":false,"comment_ctime":1560264833,"is_pvip":false,"replies":[{"id":"49133","content":"dentry不仅仅表示目录，也可以表示文件","user_name":"作者回复","comment_id":102616,"uid":"1001590","ip_address":"","utype":1,"ctime":1567596312,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1560264833","product_id":100024701,"comment_content":"从文章可以看出，父文件系统的挂载点其实就是子文件系统挂载的地方，比如文章中的A文件系统挂载在根文件系统的home目录下，那home是根文件系统的一个挂载点。<br>另外，我有一个疑问：data是一个文件，而dentry是一个目录，为什么data文件struct file的dentry指向一个叫data的dentry呢？明明没有data目录呀？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453503,"discussion_content":"dentry不仅仅表示目录，也可以表示文件","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567596312,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100556,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1559576946,"is_pvip":false,"replies":[{"id":"37049","content":"home是在根文件系统上的一个挂载点<br>","user_name":"作者回复","comment_id":100556,"uid":"1001590","ip_address":"","utype":1,"ctime":1560255907,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1559576946","product_id":100024701,"comment_content":"老师，实在是不理解home目录为什么是根文件系统的挂载点，难道不是那个“&#47;”吗？我一直理解的挂载点就是挂载文件系统的那个目录，希望老师抽个时间，指点一下挂载目录和挂载点的区别，看了一天了，谢谢。","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452597,"discussion_content":"home是在根文件系统上的一个挂载点\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560255907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100506,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1559568199,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559568199","product_id":100024701,"comment_content":"老师的挂载文件系统个人感觉没有错, 我的理解如下<br><br>- 第一层<br>  - mount: 根文件系统描述 <br>  - dentry: 根文件系统路径<br>  - file: 根文件系统对应的文件<br>    - vfsmount: 指向该文件的文件系统 <br>    - dentry: 指向该文件的路径<br>- 第二层<br>  - mount: 文件系统 A 的描述<br>  - dentry: 文件系统 A 的根路径<br>  - file: 文件系统 A 的目录文件<br>- 第三层<br>  - mount: 文件系统 B 的描述<br>  - dentry: 文件系统 B 的根路径<br>  - file: 文件系统 B 的目录文件<br>- 第四层<br>  - dentry: 文件系统 B 中 world 文件夹路径<br>  - file: 文件系统 B 中的文件<br>- 第五层<br>  - dentry: 文件系统 B 中 world 文件夹下的文件路径<br>  - file: 文件系统 B 中 world 文件夹下的文件","like_count":0},{"had_liked":false,"id":100245,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1559497927,"is_pvip":false,"replies":[{"id":"49204","content":"裸设备的话，很难准确辨别文件吧","user_name":"作者回复","comment_id":100245,"uid":"1001590","ip_address":"","utype":1,"ctime":1567603051,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"1559497927","product_id":100024701,"comment_content":"老师，能否讲一下读写裸设备和读写设备上的文件的细节方面的区别","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452472,"discussion_content":"裸设备的话，很难准确辨别文件吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567603051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1233832,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d3/a8/91eed372.jpg","nickname":"魏乐","note":"","ucode":"B6D50018BE67E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2940,"discussion_content":"文件系统需要深入理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564048989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}