{"id":455912,"title":"20｜控制结构：Go中的switch语句有哪些变化？","content":"<p>你好，我是Tony Bai。</p><p>经过前两节课的学习，我们已经掌握了控制结构中的分支结构以及循环结构。前面我们也提到过，在计算机世界中，再复杂的算法都可以通过顺序、分支和循环这三种基本的控制结构构造出来。所以，理论上讲，我们现在已经具备了实现任何算法的能力了。</p><p>不过理论归理论，我们还是要回到现实中来，继续学习Go语言中的控制结构，现在我们还差一种分支控制结构没讲。除了if语句之外，Go语言还提供了一种更适合多路分支执行的分支控制结构，也就是<strong>switch语句</strong>。</p><p>今天这一节课，我们就来系统学习一下switch语句。Go语言中的switch语句继承自它的先祖C语言，所以我们这一讲的重点是Go switch语句相较于C语言的switch，有哪些重要的改进与创新。</p><p>在讲解改进与创新之前，我们先来认识一下switch语句。</p><h2>认识switch语句</h2><p>我们先通过一个例子来直观地感受一下switch语句的优点。在一些执行分支较多的场景下，使用switch分支控制语句可以让代码更简洁，可读性更好。</p><p>比如下面例子中的readByExt函数会根据传入的文件扩展名输出不同的日志，它使用了if语句进行分支控制：</p><pre><code class=\"language-plain\">func readByExt(ext string) {\n    if ext == \"json\" {\n        println(\"read json file\")\n    } else if ext == \"jpg\" || ext == \"jpeg\" || ext == \"png\" || ext == \"gif\" {\n        println(\"read image file\")\n    } else if ext == \"txt\" || ext == \"md\" {\n        println(\"read text file\")\n    } else if ext == \"yml\" || ext == \"yaml\" {\n        println(\"read yaml file\")\n    } else if ext == \"ini\" {\n        println(\"read ini file\")\n    } else {\n        println(\"unsupported file extension:\", ext)\n    }\n}\n</code></pre><!-- [[[read_end]]] --><p>如果用switch改写上述例子代码，我们可以这样来写：</p><pre><code class=\"language-plain\">func readByExtBySwitch(ext string) {\n    switch ext {\n    case \"json\":\n        println(\"read json file\")\n    case \"jpg\", \"jpeg\", \"png\", \"gif\":\n        println(\"read image file\")\n    case \"txt\", \"md\":\n        println(\"read text file\")\n    case \"yml\", \"yaml\":\n        println(\"read yaml file\")\n    case \"ini\":\n        println(\"read ini file\")\n    default:\n        println(\"unsupported file extension:\", ext)\n    }\n}\n</code></pre><p>从代码呈现的角度来看，针对这个例子，使用switch语句的实现要比if语句的实现更加简洁紧凑。并且，即便你这个时候还没有系统学过switch语句，相信你也能大致读懂上面readByExtBySwitch的执行逻辑。</p><p>简单来说，readByExtBySwitch函数就是将输入参数ext与每个case语句后面的表达式做比较，如果相等，就执行这个case语句后面的分支，然后函数返回。这里具体的执行逻辑，我们在后面再分析，现在你有个大概认识就好了。</p><p>接下来，我们就来进入正题，来看看Go语言中switch语句的一般形式：</p><pre><code class=\"language-plain\">switch initStmt; expr {\n    case expr1:\n        // 执行分支1\n    case expr2:\n        // 执行分支2\n    case expr3_1, expr3_2, expr3_3:\n        // 执行分支3\n    case expr4:\n        // 执行分支4\n    ... ...\n    case exprN:\n        // 执行分支N\n    default: \n        // 执行默认分支\n}\n</code></pre><p>我们按语句顺序来分析一下。首先看这个switch语句一般形式中的第一行，这一行由switch关键字开始，它的后面通常接着一个表达式（expr），这句中的initStmt是一个可选的组成部分。和if、for语句一样，我们可以在initStmt中通过短变量声明定义一些在switch语句中使用的临时变量。</p><p>接下来，switch后面的大括号内是一个个代码执行分支，每个分支以case关键字开始，每个case后面是一个表达式或是一个逗号分隔的表达式列表。这里还有一个以default关键字开始的特殊分支，被称为<strong>默认分支</strong>。</p><p>最后，我们再来看switch语句的执行流程。其实也很简单，switch语句会用expr的求值结果与各个case中的表达式结果进行比较，如果发现匹配的case，也就是case后面的表达式，或者表达式列表中任意一个表达式的求值结果与expr的求值结果相同，那么就会执行该case对应的代码分支，分支执行后，switch语句也就结束了。如果所有case表达式都无法与expr匹配，那么程序就会执行default默认分支，并且结束switch语句。</p><p>那么问题就来了！在有多个case执行分支的switch语句中，<strong>Go是按什么次序对各个case表达式进行求值，并且与switch表达式（expr）进行比较的</strong>？</p><p>我们通过一段示例代码来回答这个问题。这是一个一般形式的switch语句，为了能呈现switch语句的执行次序，我以多个输出特定日志的函数作为switch表达式以及各个case表达式：</p><pre><code class=\"language-plain\">func case1() int {\n    println(\"eval case1 expr\")\n    return 1\n}\n\nfunc case2_1() int {\n    println(\"eval case2_1 expr\")\n    return 0 \n}\nfunc case2_2() int {\n    println(\"eval case2_2 expr\")\n    return 2 \n}\n\nfunc case3() int {\n    println(\"eval case3 expr\")\n    return 3\n}\n\nfunc switchexpr() int {\n    println(\"eval switch expr\")\n    return 2\n}\n\nfunc main() {\n    switch switchexpr() {\n    case case1():\n        println(\"exec case1\")\n    case case2_1(), case2_2():\n        println(\"exec case2\")\n    case case3():\n        println(\"exec case3\")\n    default:\n        println(\"exec default\")\n    }\n}\n</code></pre><p>执行一下这个示例程序，我们得到如下结果：</p><pre><code class=\"language-plain\">eval switch expr\neval case1 expr\neval case2_1 expr\neval case2_2 expr\nexec case2\n</code></pre><p>从输出结果中我们看到，Go先对switch expr表达式进行求值，然后再按case语句的出现顺序，从上到下进行逐一求值。在带有表达式列表的case语句中，Go会从左到右，对列表中的表达式进行求值，比如示例中的case2_1函数就执行于case2_2函数之前。</p><p>如果switch表达式匹配到了某个case表达式，那么程序就会执行这个case对应的代码分支，比如示例中的“exec case2”。这个分支后面的case表达式将不会再得到求值机会，比如示例不会执行case3函数。这里要注意一点，即便后面的case表达式求值后也能与switch表达式匹配上，Go也不会继续去对这些表达式进行求值了。</p><p>除了这一点外，你还要注意default分支。<strong>无论default分支出现在什么位置，它都只会在所有case都没有匹配上的情况下才会被执行的。</strong></p><p>不知道你有没有发现，这里其实有一个优化小技巧，考虑到switch语句是按照case出现的先后顺序对case表达式进行求值的，那么如果我们将匹配成功概率高的case表达式排在前面，就会有助于提升switch语句执行效率。这点对于case后面是表达式列表的语句同样有效，我们可以将匹配概率最高的表达式放在表达式列表的最左侧。</p><p>到这里，我们已经了解了switch语句的一般形式以及执行次序。有了这个基础后，接下来我们就来看看这节课重点：Go语言的switch语句和它的“先祖”C语言中的Switch语句相比，都有哪些优化与创新？</p><h2>switch语句的灵活性</h2><p>为方便对比，我们先来简单了解一下C语言中的switch语句。C语言中的switch语句对表达式类型有限制，每个case语句只可以有一个表达式。而且，除非你显式使用break跳出，程序默认总是执行下一个case语句。这些特性开发人员带来了使用上的心智负担。</p><p>相较于C语言中switch语句的“死板”，Go的switch语句表现出极大的灵活性，主要表现在如下几方面：</p><p><strong>首先，switch语句各表达式的求值结果可以为各种类型值，只要它的类型支持比较操作就可以了。</strong></p><p>C语言中，switch语句中使用的所有表达式的求值结果只能是int或枚举类型，其他类型都会被C编译器拒绝。</p><p>Go语言就宽容得多了，只要类型支持比较操作，都可以作为switch语句中的表达式类型。比如整型、布尔类型、字符串类型、复数类型、元素类型都是可比较类型的数组类型，甚至字段类型都是可比较类型的结构体类型，也可以。下面就是一个使用自定义结构体类型作为switch表达式类型的例子：</p><pre><code class=\"language-plain\">type person struct {\n    name string\n    age  int\n}\n\nfunc main() {\n    p := person{\"tom\", 13}\n    switch p {\n    case person{\"tony\", 33}:\n        println(\"match tony\")\n    case person{\"tom\", 13}:\n        println(\"match tom\")\n    case person{\"lucy\", 23}:\n        println(\"match lucy\")\n    default:\n        println(\"no match\")\n    }\n}\n</code></pre><p>不过，实际开发过程中，以结构体类型为switch表达式类型的情况并不常见，这里举这个例子仅是为了说明Go switch语句对各种类型支持的广泛性。</p><p>而且，当switch表达式的类型为布尔类型时，如果求值结果始终为true，那么我们甚至可以省略switch后面的表达式，比如下面例子：</p><pre><code class=\"language-plain\">// 带有initStmt语句的switch语句\nswitch initStmt; {\n    case bool_expr1:\n    case bool_expr2:\n    ... ...\n}\n\n// 没有initStmt语句的switch语句\nswitch {\n    case bool_expr1:\n    case bool_expr2:\n    ... ...\n}\n</code></pre><p>不过，这里要注意，在带有initStmt的情况下，如果我们省略switch表达式，那么initStmt后面的分号不能省略，因为initStmt是一个语句。</p><p><strong>第二点：switch语句支持声明临时变量。</strong></p><p>在前面介绍switch语句的一般形式中，我们看到，和if、for等控制结构语句一样，switch语句的initStmt可用来声明只在这个switch隐式代码块中使用的变量，这种就近声明的变量最大程度地缩小了变量的作用域。</p><p><strong>第三点：case语句支持表达式列表。</strong></p><p>在C语言中，如果要让多个case分支的执行相同的代码逻辑，我们只能通过下面的方式实现：</p><pre><code class=\"language-plain\">void check_work_day(int a) {\n    switch(a) {\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n            printf(\"it is a work day\\n\");\n            break;\n        case 6:\n        case 7:\n            printf(\"it is a weekend day\\n\");\n            break;\n        default:\n            printf(\"do you live on earth?\\n\");\n    }\n}\n</code></pre><p>在上面这段C代码中，case 1~case 5匹配成功后，执行的都是case 5中的代码逻辑，case 6~case 7匹配成功后，执行的都是case 7中的代码逻辑。</p><p>之所以可以实现这样的逻辑，是因为当C语言中的switch语句匹配到某个case后，如果这个case对应的代码逻辑中没有break语句，那么代码将继续执行下一个case。比如当a = 3时，case 3后面的代码为空逻辑，并且没有break语句，那么C会继续向下执行case4、case5，直到在case 5中调用了break，代码执行流才离开switch语句。</p><p>这样看，虽然C也能实现多case语句执行同一逻辑的功能，但在case分支较多的情况下，代码会显得十分冗长。</p><p>Go语言中的处理要好得多。Go语言中，switch语句在case中支持表达式列表。我们可以用表达式列表实现与上面的示例相同的处理逻辑：</p><pre><code class=\"language-plain\">func checkWorkday(a int) {\n    switch a {\n    case 1, 2, 3, 4, 5:\n        println(\"it is a work day\")\n    case 6, 7:\n        println(\"it is a weekend day\")\n    default:\n        println(\"are you live on earth\")\n    }\n}\n</code></pre><p>根据前面我们讲过的switch语句的执行次序，理解上面这个例子应该不难。和C语言实现相比，使用case表达式列表的Go实现简单、清晰、易懂。</p><p><strong>第四点：取消了默认执行下一个case代码逻辑的语义。</strong></p><p>在前面的描述和check_work_day这个C代码示例中，你都能感受到，在C语言中，如果匹配到的case对应的代码分支中没有显式调用break语句，那么代码将继续执行下一个case的代码分支，这种“隐式语义”并不符合日常算法的常规逻辑，这也经常被诟病为C语言的一个缺陷。要修复这个缺陷，我们只能在每个case执行语句中都显式调用break。</p><p>Go语言中的Swith语句就修复了C语言的这个缺陷，取消了默认执行下一个case代码逻辑的“非常规”语义，每个case对应的分支代码执行完后就结束switch语句。</p><p>如果在少数场景下，你需要执行下一个case的代码逻辑，你可以显式使用Go提供的关键字fallthrough来实现，这也是Go“显式”设计哲学的一个体现。下面就是一个使用fallthrough的switch语句的例子，我们简单来看一下：</p><pre><code class=\"language-plain\">func case1() int {\n    println(\"eval case1 expr\")\n    return 1\n}\n\nfunc case2() int {\n    println(\"eval case2 expr\")\n    return 2\n}\n\nfunc switchexpr() int {\n    println(\"eval switch expr\")\n    return 1\n}\n\nfunc main() {\n    switch switchexpr() {\n    case case1():\n        println(\"exec case1\")\n        fallthrough\n    case case2():\n        println(\"exec case2\")\n        fallthrough\n    default:\n        println(\"exec default\")\n    }\n}\n</code></pre><p>执行一下这个示例程序，我们得到这样的结果：</p><pre><code class=\"language-plain\">eval switch expr\neval case1 expr\nexec case1\nexec case2\nexec default\n</code></pre><p>我们看到，switch expr的求值结果与case1匹配成功，Go执行了case1对应的代码分支。而且，由于case1代码分支中显式使用了fallthrough，执行完case1后，代码执行流并没有离开switch语句，而是继续执行下一个case，也就是case2的代码分支。</p><p>这里有一个注意点，由于fallthrough的存在，Go不会对case2的表达式做求值操作，而会直接执行case2对应的代码分支。而且，在这里case2中的代码分支也显式使用了fallthrough，于是最后一个代码分支，也就是default分支对应的代码也被执行了。</p><p>另外，还有一点要注意的是，如果某个case语句已经是switch语句中的最后一个case了，并且它的后面也没有default分支了，那么这个case中就不能再使用fallthrough，否则编译器就会报错。</p><p>到这里，我们看到Go的switch语句不仅修复了C语言switch的缺陷，还为Go开发人员提供了更大的灵活性，我们可以使用更多类型表达式作为switch表达式类型，也可以使用case表达式列表简化实现逻辑，还可以自行根据需要，确定是否使用fallthrough关键字继续向下执行下一个case的代码分支。</p><p>除了这些之外，Go语言的switch语句还支持求值结果为类型信息的表达式，也就是type switch语句，接下来我们就详细分析一下。</p><h2>type switch</h2><p>“type switch”这是一种特殊的switch语句用法，我们通过一个例子来看一下它具体的使用形式：</p><pre><code class=\"language-plain\">func main() {\n    var x interface{} = 13\n    switch x.(type) {\n    case nil:\n        println(\"x is nil\")\n    case int:\n        println(\"the type of x is int\")\n    case string:\n        println(\"the type of x is string\")\n    case bool:\n        println(\"the type of x is string\")\n    default:\n        println(\"don't support the type\")\n    }\n}\n</code></pre><p>我们看到，这个例子中switch语句的形式与前面是一致的，不同的是switch与case两个关键字后面跟着的表达式。</p><p>switch关键字后面跟着的表达式为 <code>x.(type)</code> ，这种表达式形式是switch语句专有的，而且也只能在switch语句中使用。这个表达式中的<strong>x必须是一个接口类型变量</strong>，表达式的求值结果是这个接口类型变量对应的动态类型。</p><p>什么是一个接口类型的动态类型呢？我们简单解释一下。以上面的代码 <code>var x interface{} = 13</code> 为例，x是一个接口类型变量，它的静态类型为 <code>interface{}</code> ，如果我们将整型值13赋值给x，x这个接口变量的动态类型就为int。关于接口类型变量的动态类型，我们后面还会详细讲，这里先简单了解一下就可以了。</p><p>接着，case关键字后面接的就不是普通意义上的表达式了，而是一个个具体的类型。这样，Go就能使用变量x的动态类型与各个case中的类型进行匹配，之后的逻辑就都是一样的了。</p><p>现在我们运行上面示例程序，输出了x的动态变量类型：</p><pre><code class=\"language-plain\">the type of x is int\n</code></pre><p>不过，通过 <code>x.(type)</code> ，我们除了可以获得变量x的动态类型信息之外，也能获得其动态类型对应的值信息，现在我们把上面的例子改造一下：</p><pre><code class=\"language-plain\">func main() {\n    var x interface{} = 13\n    switch v := x.(type) {\n    case nil:\n        println(\"v is nil\")\n    case int:\n        println(\"the type of v is int, v =\", v)\n    case string:\n        println(\"the type of v is string, v =\", v)\n    case bool:\n        println(\"the type of v is bool, v =\", v)\n    default:\n        println(\"don't support the type\")\n    }\n}\n</code></pre><p>这里我们将switch后面的表达式由 <code>x.(type)</code> 换成了 <code>v := x.(type)</code> 。对于后者，你千万不要认为变量v存储的是类型信息，其实<strong>v存储的是变量x的动态类型对应的值信息</strong>，这样我们在接下来的case执行路径中就可以使用变量v中的值信息了。</p><p>然后，我们运行上面示例，可以得到v的动态类型和值：</p><pre><code class=\"language-plain\">the type of v is int, v = 13\n</code></pre><p>另外，你可以发现，在前面的type switch演示示例中，我们一直使用interface{}这种接口类型的变量，Go中所有类型都实现了interface{}类型，所以case后面可以是任意类型信息。</p><p>但如果在switch后面使用了某个特定的接口类型I，那么case后面就只能使用实现了接口类型I的类型了，否则Go编译器会报错。你可以看看这个例子：</p><pre><code class=\"language-plain\">  type I interface {\n      M()\n  }\n  \n  type T struct {\n  }\n  \n func (T) M() {\n }\n \n func main() {\n     var t T\n     var i I = t\n     switch i.(type) {\n     case T:\n         println(\"it is type T\")\n     case int:\n         println(\"it is type int\")\n     case string:\n         println(\"it is type string\")\n     }\n }\n</code></pre><p>在这个例子中，我们在type switch中使用了自定义的接口类型I。那么，理论上所有case后面的类型都只能是实现了接口I的类型。但在这段代码中，只有类型T实现了接口类型I，Go原生类型int与string都没有实现接口I，于是在编译上述代码时，编译器会报出如下错误信息：</p><pre><code class=\"language-plain\">19:2: impossible type switch case: i (type I) cannot have dynamic type int (missing M method)\n21:2: impossible type switch case: i (type I) cannot have dynamic type string (missing M method)\n</code></pre><p>好了，到这里，关于switch语句语法层面的知识就都学习完了。Go对switch语句的优化与增强使得我们在日常使用switch时很少遇到坑，但这也并不意味着没有，最后我们就来看在Go编码过程中，我们可能遇到的一个与switch使用有关的问题，跳不出循环的break。</p><h2>跳不出循环的break</h2><p>在上一节课讲解break语句的时候，我们曾举了一个找出整型切片中第一个偶数的例子，当时我们是把for与if语句结合起来实现的。现在，我们把那个例子中if分支结构换成这节课学习的switch分支结构试试看。我们这里直接看改造后的代码：</p><pre><code class=\"language-plain\">func main() {\n    var sl = []int{5, 19, 6, 3, 8, 12}\n    var firstEven int = -1\n\n    // find first even number of the interger slice\n    for i := 0; i &lt; len(sl); i++ {\n        switch sl[i] % 2 {\n        case 0:\n            firstEven = sl[i]\n            break\n        case 1:\n            // do nothing\n        }        \n    }         \n    println(firstEven) \n}\n</code></pre><p>我们运行一下这个修改后的程序，得到结果为12。</p><p>奇怪，这个输出的值与我们的预期的好像不太一样。这段代码中，切片中的第一个偶数是6，而输出的结果却成了切片的最后一个偶数12。为什么会出现这种结果呢？</p><p>这就是Go中 break语句与switch分支结合使用会出现一个“小坑”。和我们习惯的C家族语言中的break不同，Go语言规范中明确规定，<strong>不带label的break语句中断执行并跳出的，是同一函数内break语句所在的最内层的for、switch或select</strong>。所以，上面这个例子的break语句实际上只跳出了switch语句，并没有跳出外层的for循环，这也就是程序未按我们预期执行的原因。</p><p>要修正这一问题，我们可以利用上节课学到的带label的break语句试试。这里我们也直接看看改进后的代码:</p><pre><code class=\"language-plain\">func main() {\n    var sl = []int{5, 19, 6, 3, 8, 12}\n    var firstEven int = -1\n\n    // find first even number of the interger slice\nloop:\n    for i := 0; i &lt; len(sl); i++ {\n        switch sl[i] % 2 {\n        case 0:\n            firstEven = sl[i]\n            break loop\n        case 1:\n            // do nothing\n        }\n    }\n    println(firstEven) // 6\n}\n</code></pre><p>在改进后的例子中，我们定义了一个label：loop，这个label附在for循环的外面，指代for循环的执行。当代码执行到“break loop”时，程序将停止label loop所指代的for循环的执行。关于带有label的break语句，你可以再回顾一下第19讲，这里就不多说了。</p><p>和switch语句一样能阻拦break跳出的还有一个语句，那就是select，我们后面讲解并发程序设计的时候再来详细分析。</p><h2>小结</h2><p>好了，今天的课讲到这里就结束了，现在我们一起来回顾一下吧。</p><p>在这一讲中，我们讲解了Go语言提供的另一种分支控制结构：switch语句。和if分支语句相比，在一些执行分支较多的场景下，使用switch分支控制语句可以让代码更简洁、可读性更好。</p><p>Go语言的switch语句继承自C语言，但“青出于蓝而胜于蓝”，Go不但修正了C语言中switch语句默认执行下一个case的“坑”，还对switch语句进行了改进与创新，包括支持更多类型、支持表达式列表等，让switch的表达力得到进一步提升。</p><p>除了使用常规表达式作为switch表达式和case表达式之外，Go switch语句又创新性地支持type switch，也就是用类型信息作为分支条件判断的操作数。在Go中，这种使用方式也是switch所独有的。这里，我们要注意的是只有接口类型变量才能使用type switch，并且所有case语句中的类型必须实现switch关键字后面变量的接口类型。</p><p>最后还需要你记住的是switch会阻拦break语句跳出for循环，就像我们这节课最后那个例子中那样，对于初学者来说，这是一个很容易掉下去的坑，你一定不要走弯路。</p><h2>思考题</h2><p>为了验证在多分支下基于switch语句实现的分支控制更为简洁，你可以尝试将这节课中的那些稍复杂一点的例子，改写为基于if条件分支的实现，然后再对比一下两种实现的复杂性，直观体会一下switch语句的优点。</p><p>欢迎你把这节课分享给更多对Go语言中的switch语句感兴趣的朋友。我是Tony Bai，我们下节课见。</p>","comments":[{"had_liked":false,"id":324694,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1638547784,"is_pvip":true,"replies":[{"id":117959,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638827726,"ip_address":"","comment_id":324694,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"type switch里的\n\nswitch v := x.(type) {\n\n看上去像是一个初始化语句，但其实是一个type guard，所以后面没有分号。如果有初始化语句的话就是这样的：\n\nswitch a:= f(); v := x.(type) {\n\n另外type switch里是不能fallthrough的","like_count":40},{"had_liked":false,"id":333970,"user_name":"一打七","can_delete":false,"product_type":"c1","uid":1241197,"ip_address":"","ucode":"D242C5EF70C176","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/6d/3e570bb8.jpg","comment_is_top":false,"comment_ctime":1644645065,"is_pvip":false,"replies":[{"id":122060,"content":"只有switch表达式可以用x.(type)，类型断言的格式是类似像x.(*int)的形式，类型断言后面括号里必须是某个具体的类型。而switch表达式的x.(type)就是x.(type)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644761754,"ip_address":"","comment_id":333970,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"文中说x.(type)这种表达式形式是 switch 语句专有的，但是类型断言也可以这么写，所以不应该是专有的吧？","like_count":17,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550859,"discussion_content":"只有switch表达式可以用x.(type)，类型断言的格式是类似像x.(*int)的形式，类型断言后面括号里必须是某个具体的类型。而switch表达式的x.(type)就是x.(type)。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1644761754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585190,"discussion_content":"这个解释的太清楚了， 之前对这块也有一些迷糊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661392317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333120,"user_name":"lyy","can_delete":false,"product_type":"c1","uid":2381893,"ip_address":"","ucode":"064F31D18E4875","user_header":"https://static001.geekbang.org/account/avatar/00/24/58/45/9ba77dc3.jpg","comment_is_top":false,"comment_ctime":1644110322,"is_pvip":false,"replies":[{"id":121805,"content":"但是如果按你的设计，fallthrough后，先要判断下一个case的条件，那么fallthrough的意义就不存在了，因为下一个case的条件求值后基本不会是true。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644291180,"ip_address":"","comment_id":333120,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"个人感觉fallthrough，执行完 case1 后，继续case2里面的代码，而不用判断case2的条件是否成立，这一点设计的并不好，估计很多人会理解为继续判断case2条件","like_count":9,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549908,"discussion_content":"但是如果按你的设计，fallthrough后，先要判断下一个case的条件，那么fallthrough的意义就不存在了，因为下一个case的条件求值后基本不会是true。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1644291180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2804244,"avatar":"","nickname":"郭雅文","note":"","ucode":"28C2F6407559AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584481,"discussion_content":"fallthrough现实中的使用场景会是什么呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1660872216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1915533,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3a/8d/f5e7a20d.jpg","nickname":"何以解忧","note":"","ucode":"4DFE2BDBAF4919","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2804244,"avatar":"","nickname":"郭雅文","note":"","ucode":"28C2F6407559AB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636014,"discussion_content":"场景没想出来，似乎存在这么一种逻辑： case1 符合的时候执行 case1 和case 2的逻辑但是只满足case2 的情况就只执行case2 ；似乎是各个条件是正交的，但是执行逻辑不正交","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705470160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":584481,"ip_address":"广东","group_id":0},"score":636014,"extra":""}]},{"author":{"id":1175507,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/d3/241d0b84.jpg","nickname":"upup","note":"","ucode":"25DB114677EF58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574544,"discussion_content":"同意老师的观点，如果没有fallthrough，各个case表达式“应该是”正交的；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654138275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556752,"discussion_content":"存在一种可能，程序想让继续执行case2的逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647500374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327867,"user_name":"文经","can_delete":false,"product_type":"c1","uid":1072346,"ip_address":"","ucode":"2C059BD2A4276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/da/0a8bc27b.jpg","comment_is_top":false,"comment_ctime":1640333942,"is_pvip":true,"replies":[{"id":120350,"content":"差不多。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641893295,"ip_address":"","comment_id":327867,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"白老师，我这样理解对不对：\nx.(type) 如果没有 := 符号的话，这个表达式是获取x的具体类型\nv := x.(type), 这个则是把x从具体的接口类型中获取它实际类型的值。\nx.(SomeType)， 则是判段x是否遵守SomeType接口，并转化为具体类型的值。\n所有的这些行为都是编译器把它转化为相应的代码。","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549908,"discussion_content":"但是如果按你的设计，fallthrough后，先要判断下一个case的条件，那么fallthrough的意义就不存在了，因为下一个case的条件求值后基本不会是true。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1644291180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2804244,"avatar":"","nickname":"郭雅文","note":"","ucode":"28C2F6407559AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584481,"discussion_content":"fallthrough现实中的使用场景会是什么呢？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1660872216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1915533,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3a/8d/f5e7a20d.jpg","nickname":"何以解忧","note":"","ucode":"4DFE2BDBAF4919","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2804244,"avatar":"","nickname":"郭雅文","note":"","ucode":"28C2F6407559AB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":636014,"discussion_content":"场景没想出来，似乎存在这么一种逻辑： case1 符合的时候执行 case1 和case 2的逻辑但是只满足case2 的情况就只执行case2 ；似乎是各个条件是正交的，但是执行逻辑不正交","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1705470160,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":584481,"ip_address":"广东","group_id":0},"score":636014,"extra":""}]},{"author":{"id":1175507,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/d3/241d0b84.jpg","nickname":"upup","note":"","ucode":"25DB114677EF58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574544,"discussion_content":"同意老师的观点，如果没有fallthrough，各个case表达式“应该是”正交的；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654138275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556752,"discussion_content":"存在一种可能，程序想让继续执行case2的逻辑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647500374,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323501,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1637936379,"is_pvip":false,"replies":[{"id":117579,"content":"后续会有实战项目，尽量串联吧。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638260774,"ip_address":"","comment_id":323501,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony Bai 老师的文章讲解的非常细致，鼓掌。\n\n想问一下老师，文中的内容基本都能理解，但是过一段时间就遗忘比较多了，尤其是后面的内容涉及到前面的知识时。希望老师在这门课中搞个小型的实战项目，能把前面的知识串在一起就好了。\n\n这样，不会觉得纸上得来终觉浅......","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545279,"discussion_content":"差不多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641893295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384644,"user_name":"十年一劫","can_delete":false,"product_type":"c1","uid":1942428,"ip_address":"浙江","ucode":"B9B67CD09DD2A3","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIV9NK3Mx29N2t9upmnZHN63hOgE6GV6LvaEDD2tkCASSKSVHictXZOucrpZJ0vPll4pF2XNVCKw1Q/132","comment_is_top":false,"comment_ctime":1701269259,"is_pvip":false,"replies":[{"id":140335,"content":"是这样的么？\n\npackage main\n\nimport &quot;fmt&quot;\n\nfunc switchOnType[T any](i interface{}) T {\n\tswitch v := i.(type) {\n\tcase T:\n\t\treturn v\n\n\tdefault:\n\t\tpanic(&quot;unsupported type&quot;)\n\t}\n}\n\nfunc main() {\n\tvar i interface{} = true\n\n\tb := switchOnType[bool](i)\n\n\tfmt.Printf(&quot;b type: %T value:%v\\n&quot;, b, b)\n}\n我试了一下, go 1.21是支持的。\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1701821720,"ip_address":"美国","comment_id":384644,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师，现在go支持泛型了，type switch语句中传入的类型可以用泛型么","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633087,"discussion_content":"是这样的么？\n\npackage main\n\nimport &#34;fmt&#34;\n\nfunc switchOnType[T any](i interface{}) T {\n\tswitch v := i.(type) {\n\tcase T:\n\t\treturn v\n\n\tdefault:\n\t\tpanic(&#34;unsupported type&#34;)\n\t}\n}\n\nfunc main() {\n\tvar i interface{} = true\n\n\tb := switchOnType[bool](i)\n\n\tfmt.Printf(&#34;b type: %T value:%v\\n&#34;, b, b)\n}\n我试了一下, go 1.21是支持的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701821720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375297,"user_name":"plh","can_delete":false,"product_type":"c1","uid":1031828,"ip_address":"四川","ucode":"D79F2B87AC3AD2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erEHTaQDkWqEYib9iabib8rACYpSFBHTPFmgicUKaib79MB6VIxNwiajHUS8kYFEKCGOjpibf0dibhIjqhfzg/132","comment_is_top":false,"comment_ctime":1685263154,"is_pvip":false,"replies":[{"id":136964,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1685326055,"ip_address":"北京","comment_id":375297,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":" switch 太灵活,即使有经验的go开发者也容易犯错. 看过好几篇文章,这个地方是讲的最全面,最清晰的. ","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633087,"discussion_content":"是这样的么？\n\npackage main\n\nimport &#34;fmt&#34;\n\nfunc switchOnType[T any](i interface{}) T {\n\tswitch v := i.(type) {\n\tcase T:\n\t\treturn v\n\n\tdefault:\n\t\tpanic(&#34;unsupported type&#34;)\n\t}\n}\n\nfunc main() {\n\tvar i interface{} = true\n\n\tb := switchOnType[bool](i)\n\n\tfmt.Printf(&#34;b type: %T value:%v\\n&#34;, b, b)\n}\n我试了一下, go 1.21是支持的。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701821720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"美国","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347510,"user_name":"qiutian","can_delete":false,"product_type":"c1","uid":1313498,"ip_address":"","ucode":"99658A8E342498","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/da/dcf8f2b1.jpg","comment_is_top":false,"comment_ctime":1654093200,"is_pvip":false,"replies":[{"id":126698,"content":"在这个case中：\ncase case2_1(), case2_2():        \n      println(&quot;exec case2&quot;)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1654119081,"ip_address":"","comment_id":347510,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"哪来的case2呢","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574525,"discussion_content":"在这个case中：\ncase case2_1(), case2_2():        \n      println(&#34;exec case2&#34;)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654119081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1313498,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0a/da/dcf8f2b1.jpg","nickname":"qiutian","note":"","ucode":"99658A8E342498","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":574762,"discussion_content":"恩，看到了，谢谢大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654322989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":574525,"ip_address":"","group_id":0},"score":574762,"extra":""}]}]},{"had_liked":false,"id":341246,"user_name":"peison","can_delete":false,"product_type":"c1","uid":1142893,"ip_address":"","ucode":"C467A3E0133EA2","user_header":"https://static001.geekbang.org/account/avatar/00/11/70/6d/11ea66f0.jpg","comment_is_top":false,"comment_ctime":1649473158,"is_pvip":false,"replies":[{"id":124883,"content":"type switch是go的一种比较特殊的语法。能运用该语法的x.(type)中的x必须是interface类型。\n\ncase分支是用某类型与x的动态类型作比较。而v := x.(type)中的v存储的是转换后对应的动态类型的值。\n\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1649903405,"ip_address":"","comment_id":341246,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"我想请教一下，文中type switch中的  v:=x.(type)后面，为什么switch中的case分支，不是和x.(type)的返回值v做比较？那实际上case分支是和什么值做比较","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562882,"discussion_content":"type switch是go的一种比较特殊的语法。能运用该语法的x.(type)中的x必须是interface类型。\n\ncase分支是用某类型与x的动态类型作比较。而v := x.(type)中的v存储的是转换后对应的动态类型的值。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649903405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390583,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715695693,"is_pvip":false,"replies":[{"id":142092,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1715870149,"ip_address":"辽宁","comment_id":390583,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"本节讲述了switch语句的使用\n1. switch是一个选择语句，对于多分支场景比if更加直观\n2.go的switch相比c语言，改进了break机制，默认break，除非fallthrough\n3.创新了一个type switch，可以用switch x.(type) 的方式，限定x需要是接口类型；并且如果x指定了类型，那么case语句需要是该接口类型的实现。\n4. 思考题：if和switch其实if还是更常用，case用在分支特别多的场景多一些","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562882,"discussion_content":"type switch是go的一种比较特殊的语法。能运用该语法的x.(type)中的x必须是interface类型。\n\ncase分支是用某类型与x的动态类型作比较。而v := x.(type)中的v存储的是转换后对应的动态类型的值。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649903405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324694,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1638547784,"is_pvip":true,"replies":[{"id":117959,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638827726,"ip_address":"","comment_id":324694,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"type switch里的\n\nswitch v := x.(type) {\n\n看上去像是一个初始化语句，但其实是一个type guard，所以后面没有分号。如果有初始化语句的话就是这样的：\n\nswitch a:= f(); v := x.(type) {\n\n另外type switch里是不能fallthrough的","like_count":40,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536585,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638827726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333970,"user_name":"一打七","can_delete":false,"product_type":"c1","uid":1241197,"ip_address":"","ucode":"D242C5EF70C176","user_header":"https://static001.geekbang.org/account/avatar/00/12/f0/6d/3e570bb8.jpg","comment_is_top":false,"comment_ctime":1644645065,"is_pvip":false,"replies":[{"id":122060,"content":"只有switch表达式可以用x.(type)，类型断言的格式是类似像x.(*int)的形式，类型断言后面括号里必须是某个具体的类型。而switch表达式的x.(type)就是x.(type)。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644761754,"ip_address":"","comment_id":333970,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"文中说x.(type)这种表达式形式是 switch 语句专有的，但是类型断言也可以这么写，所以不应该是专有的吧？","like_count":17,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536585,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638827726,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333120,"user_name":"lyy","can_delete":false,"product_type":"c1","uid":2381893,"ip_address":"","ucode":"064F31D18E4875","user_header":"https://static001.geekbang.org/account/avatar/00/24/58/45/9ba77dc3.jpg","comment_is_top":false,"comment_ctime":1644110322,"is_pvip":false,"replies":[{"id":121805,"content":"但是如果按你的设计，fallthrough后，先要判断下一个case的条件，那么fallthrough的意义就不存在了，因为下一个case的条件求值后基本不会是true。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1644291180,"ip_address":"","comment_id":333120,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"个人感觉fallthrough，执行完 case1 后，继续case2里面的代码，而不用判断case2的条件是否成立，这一点设计的并不好，估计很多人会理解为继续判断case2条件","like_count":9,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550859,"discussion_content":"只有switch表达式可以用x.(type)，类型断言的格式是类似像x.(*int)的形式，类型断言后面括号里必须是某个具体的类型。而switch表达式的x.(type)就是x.(type)。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1644761754,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585190,"discussion_content":"这个解释的太清楚了， 之前对这块也有一些迷糊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661392317,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327867,"user_name":"文经","can_delete":false,"product_type":"c1","uid":1072346,"ip_address":"","ucode":"2C059BD2A4276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/da/0a8bc27b.jpg","comment_is_top":false,"comment_ctime":1640333942,"is_pvip":true,"replies":[{"id":120350,"content":"差不多。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641893295,"ip_address":"","comment_id":327867,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"白老师，我这样理解对不对：\nx.(type) 如果没有 := 符号的话，这个表达式是获取x的具体类型\nv := x.(type), 这个则是把x从具体的接口类型中获取它实际类型的值。\nx.(SomeType)， 则是判段x是否遵守SomeType接口，并转化为具体类型的值。\n所有的这些行为都是编译器把它转化为相应的代码。","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545279,"discussion_content":"差不多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641893295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323501,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1637936379,"is_pvip":false,"replies":[{"id":117579,"content":"后续会有实战项目，尽量串联吧。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1638260774,"ip_address":"","comment_id":323501,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"Tony Bai 老师的文章讲解的非常细致，鼓掌。\n\n想问一下老师，文中的内容基本都能理解，但是过一段时间就遗忘比较多了，尤其是后面的内容涉及到前面的知识时。希望老师在这门课中搞个小型的实战项目，能把前面的知识串在一起就好了。\n\n这样，不会觉得纸上得来终觉浅......","like_count":3,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534717,"discussion_content":"后续会有实战项目，尽量串联吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638260774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":535044,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638340706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534717,"ip_address":"","group_id":0},"score":535044,"extra":""}]},{"author":{"id":1035064,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/38/4c9cfdf4.jpg","nickname":"谢小路","note":"","ucode":"C9FE2EB10DC105","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623947,"discussion_content":"真的，我每隔一段时间要复习知识。太难了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690043696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":384644,"user_name":"十年一劫","can_delete":false,"product_type":"c1","uid":1942428,"ip_address":"浙江","ucode":"B9B67CD09DD2A3","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIV9NK3Mx29N2t9upmnZHN63hOgE6GV6LvaEDD2tkCASSKSVHictXZOucrpZJ0vPll4pF2XNVCKw1Q/132","comment_is_top":false,"comment_ctime":1701269259,"is_pvip":false,"replies":[{"id":140335,"content":"是这样的么？\n\npackage main\n\nimport &quot;fmt&quot;\n\nfunc switchOnType[T any](i interface{}) T {\n\tswitch v := i.(type) {\n\tcase T:\n\t\treturn v\n\n\tdefault:\n\t\tpanic(&quot;unsupported type&quot;)\n\t}\n}\n\nfunc main() {\n\tvar i interface{} = true\n\n\tb := switchOnType[bool](i)\n\n\tfmt.Printf(&quot;b type: %T value:%v\\n&quot;, b, b)\n}\n我试了一下, go 1.21是支持的。\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1701821720,"ip_address":"美国","comment_id":384644,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"老师，现在go支持泛型了，type switch语句中传入的类型可以用泛型么","like_count":2,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534717,"discussion_content":"后续会有实战项目，尽量串联吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638260774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1351076,"avatar":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","nickname":"lesserror","note":"","ucode":"25A54D1165FCF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":535044,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638340706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":534717,"ip_address":"","group_id":0},"score":535044,"extra":""}]},{"author":{"id":1035064,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/38/4c9cfdf4.jpg","nickname":"谢小路","note":"","ucode":"C9FE2EB10DC105","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623947,"discussion_content":"真的，我每隔一段时间要复习知识。太难了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1690043696,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":375297,"user_name":"plh","can_delete":false,"product_type":"c1","uid":1031828,"ip_address":"四川","ucode":"D79F2B87AC3AD2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erEHTaQDkWqEYib9iabib8rACYpSFBHTPFmgicUKaib79MB6VIxNwiajHUS8kYFEKCGOjpibf0dibhIjqhfzg/132","comment_is_top":false,"comment_ctime":1685263154,"is_pvip":false,"replies":[{"id":136964,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1685326055,"ip_address":"北京","comment_id":375297,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":" switch 太灵活,即使有经验的go开发者也容易犯错. 看过好几篇文章,这个地方是讲的最全面,最清晰的. ","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619589,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685326055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347510,"user_name":"qiutian","can_delete":false,"product_type":"c1","uid":1313498,"ip_address":"","ucode":"99658A8E342498","user_header":"https://static001.geekbang.org/account/avatar/00/14/0a/da/dcf8f2b1.jpg","comment_is_top":false,"comment_ctime":1654093200,"is_pvip":false,"replies":[{"id":126698,"content":"在这个case中：\ncase case2_1(), case2_2():        \n      println(&quot;exec case2&quot;)","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1654119081,"ip_address":"","comment_id":347510,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"哪来的case2呢","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":619589,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685326055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341246,"user_name":"peison","can_delete":false,"product_type":"c1","uid":1142893,"ip_address":"","ucode":"C467A3E0133EA2","user_header":"https://static001.geekbang.org/account/avatar/00/11/70/6d/11ea66f0.jpg","comment_is_top":false,"comment_ctime":1649473158,"is_pvip":false,"replies":[{"id":124883,"content":"type switch是go的一种比较特殊的语法。能运用该语法的x.(type)中的x必须是interface类型。\n\ncase分支是用某类型与x的动态类型作比较。而v := x.(type)中的v存储的是转换后对应的动态类型的值。\n\n","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1649903405,"ip_address":"","comment_id":341246,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"我想请教一下，文中type switch中的  v:=x.(type)后面，为什么switch中的case分支，不是和x.(type)的返回值v做比较？那实际上case分支是和什么值做比较","like_count":1,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574525,"discussion_content":"在这个case中：\ncase case2_1(), case2_2():        \n      println(&#34;exec case2&#34;)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654119081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1313498,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0a/da/dcf8f2b1.jpg","nickname":"qiutian","note":"","ucode":"99658A8E342498","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":574762,"discussion_content":"恩，看到了，谢谢大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654322989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":574525,"ip_address":"","group_id":0},"score":574762,"extra":""}]}]},{"had_liked":false,"id":390583,"user_name":"人言有力","can_delete":false,"product_type":"c1","uid":1690736,"ip_address":"浙江","ucode":"3708FBBFB641FE","user_header":"https://static001.geekbang.org/account/avatar/00/19/cc/70/64045bc0.jpg","comment_is_top":false,"comment_ctime":1715695693,"is_pvip":false,"replies":[{"id":142092,"content":"👍","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1715870149,"ip_address":"辽宁","comment_id":390583,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100093501,"comment_content":"本节讲述了switch语句的使用\n1. switch是一个选择语句，对于多分支场景比if更加直观\n2.go的switch相比c语言，改进了break机制，默认break，除非fallthrough\n3.创新了一个type switch，可以用switch x.(type) 的方式，限定x需要是接口类型；并且如果x指定了类型，那么case语句需要是该接口类型的实现。\n4. 思考题：if和switch其实if还是更常用，case用在分支特别多的场景多一些","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645213,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715870149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331826,"user_name":"ps Sensking","can_delete":false,"product_type":"c1","uid":1377764,"ip_address":"","ucode":"8B3BC6E89B6EF9","user_header":"https://static001.geekbang.org/account/avatar/00/15/05/e4/3e676c4d.jpg","comment_is_top":false,"comment_ctime":1642796185,"is_pvip":false,"replies":[{"id":121610,"content":"问题没太看懂。文中例子switch x.(type) 中的x是一个interface{}类型接口，Go所有类型都实现了该接口，包括自定义类型T。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643540720,"ip_address":"","comment_id":331826,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"我们要注意的是只有接口类型变量才能使用 type switch，并且所有 case 语句中的类型必须实现 switch 关键字后面变量的接口类型。 \n您好这个例子用interface 里面只要实现一个 int  或者 string 就可以正常启动吗？ 如果是type 自定义的类型 T 就需要制定一个int 或者 string吗？","like_count":0},{"had_liked":false,"id":327861,"user_name":"文经","can_delete":false,"product_type":"c1","uid":1072346,"ip_address":"","ucode":"2C059BD2A4276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/da/0a8bc27b.jpg","comment_is_top":false,"comment_ctime":1640333056,"is_pvip":true,"replies":[{"id":120349,"content":"switch的不是v。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641893086,"ip_address":"","comment_id":327861,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"白老师，switch v := x.(type)，有点不太好理解。\n这个语句编译器是不是转化为类型这样的代码：\nv := x.(type)\nswitch x.(type)\n\n我直观上会理解成：\nv := x.(type)\nswitch v\n\n这算不算编译器提供的一种语法糖？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549070,"discussion_content":"问题没太看懂。文中例子switch x.(type) 中的x是一个interface{}类型接口，Go所有类型都实现了该接口，包括自定义类型T。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643540720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323494,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1637932657,"is_pvip":false,"replies":null,"discussion_count":6,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"今天《极客时间》两个专栏同时更新，主题都是 switch\n\n- 《深入剖析 Java 新特性》06 | Switch表达式：怎么简化多情景操作？\n- 《Tony Bai · Go 语言第一课》20｜控制结构：Go中的switch语句有哪些变化？\n\n对比结果\n\n- Java17 居然可以比 Go 简洁！\n- 但然综合能力 Go 的更灵活\n\n\nJava17 switch\n\n```java\nString checkWorkday(int day) {\n\treturn switch (day) {\n\t\tcase 1, 2, 3, 4, 5 -&gt; &quot;it is a work day&quot;;\n\t\tcase 6, 7 -&gt; &quot;it is a weekend day&quot;;\n\t\tdefault -&gt; &quot;are you live on earth&quot;;\n\t};\n}\n```\n\nGo switch\n\n```go\nfunc checkWorkday(day int) string {\n\tswitch day {\n\tcase 1, 2, 3, 4, 5:\n\t\treturn &quot;it is a work day&quot;\n\tcase 6, 7:\n\t\treturn &quot;it is a weekend day&quot;\n\tdefault:\n\t\treturn &quot;are you live on earth&quot;\n\t}\n}\n```","like_count":15,"discussions":[{"author":{"id":1156148,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a4/34/0ab08db6.jpg","nickname":"swift","note":"","ucode":"B243DCD10B04F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579733,"discussion_content":"JAVA如果要出来比语法，那么C#的switch更是随心所欲了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1657638039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3008370,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/e7/72/4cec29a8.jpg","nickname":"暴躁的蜗牛","note":"","ucode":"9B159C820C5524","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1156148,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a4/34/0ab08db6.jpg","nickname":"swift","note":"","ucode":"B243DCD10B04F0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586643,"discussion_content":"论语法糖的话 C# 无出其右","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662393418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":579733,"ip_address":"广东","group_id":0},"score":586643,"extra":""}]},{"author":{"id":1015986,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/80/b2/2e9f442d.jpg","nickname":"文武木子","note":"","ucode":"348752BDECD65F","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568435,"discussion_content":"Java这个case的箭头→惊呆了我🤣","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651135389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","nickname":"梁中华","note":"","ucode":"52FE40242CBAD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560455,"discussion_content":"这个java 17的写法有点像kotlin，switch居然也支持表达式了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649335669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556751,"discussion_content":"倒是认为一样简洁～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647500228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556865,"discussion_content":"都很优秀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647561311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":556751,"ip_address":"","group_id":0},"score":556865,"extra":""}]}]},{"had_liked":false,"id":323496,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1637932745,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":3,"product_id":100093501,"comment_content":"所以，switch 不需要 break 是出于大多数情况 switch 只需要走一条分支的缘故吗？","like_count":5},{"had_liked":false,"id":326372,"user_name":"木木","can_delete":false,"product_type":"c1","uid":2704565,"ip_address":"","ucode":"86820F26A27308","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/b5/7eba5a0e.jpg","comment_is_top":false,"comment_ctime":1639487312,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"C语言的switch是为了模拟跳转表，所以如果目的是根据值执行一小段的话，需要每个条件的执行语句最后都加break，go的switch已经不再是为了模拟跳转表了，就是按着人们常用的方法设计的，所以不用加break，但是break的作用依旧留着","like_count":1,"discussions":[{"author":{"id":1156148,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a4/34/0ab08db6.jpg","nickname":"swift","note":"","ucode":"B243DCD10B04F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579733,"discussion_content":"JAVA如果要出来比语法，那么C#的switch更是随心所欲了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1657638039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3008370,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/e7/72/4cec29a8.jpg","nickname":"暴躁的蜗牛","note":"","ucode":"9B159C820C5524","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1156148,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a4/34/0ab08db6.jpg","nickname":"swift","note":"","ucode":"B243DCD10B04F0","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586643,"discussion_content":"论语法糖的话 C# 无出其右","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662393418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":579733,"ip_address":"广东","group_id":0},"score":586643,"extra":""}]},{"author":{"id":1015986,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/80/b2/2e9f442d.jpg","nickname":"文武木子","note":"","ucode":"348752BDECD65F","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568435,"discussion_content":"Java这个case的箭头→惊呆了我🤣","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1651135389,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1006789,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5c/c5/1231d633.jpg","nickname":"梁中华","note":"","ucode":"52FE40242CBAD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560455,"discussion_content":"这个java 17的写法有点像kotlin，switch居然也支持表达式了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649335669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556751,"discussion_content":"倒是认为一样简洁～","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647500228,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556865,"discussion_content":"都很优秀","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647561311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":556751,"ip_address":"","group_id":0},"score":556865,"extra":""}]}]},{"had_liked":false,"id":323429,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1637898870,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"讲的非常详细，值得好好学习","like_count":1,"discussions":[{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":602671,"discussion_content":"Go的switch更符合语义直觉，基本上常用的查表、分段函数、复杂映射关系等都能简单表达。C语言的fallthrough，是效率的考虑，其实在Go中被case expr1, expr2:{}等价表达了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675838774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331826,"user_name":"ps Sensking","can_delete":false,"product_type":"c1","uid":1377764,"ip_address":"","ucode":"8B3BC6E89B6EF9","user_header":"https://static001.geekbang.org/account/avatar/00/15/05/e4/3e676c4d.jpg","comment_is_top":false,"comment_ctime":1642796185,"is_pvip":false,"replies":[{"id":121610,"content":"问题没太看懂。文中例子switch x.(type) 中的x是一个interface{}类型接口，Go所有类型都实现了该接口，包括自定义类型T。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1643540720,"ip_address":"","comment_id":331826,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"我们要注意的是只有接口类型变量才能使用 type switch，并且所有 case 语句中的类型必须实现 switch 关键字后面变量的接口类型。 \n您好这个例子用interface 里面只要实现一个 int  或者 string 就可以正常启动吗？ 如果是type 自定义的类型 T 就需要制定一个int 或者 string吗？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549070,"discussion_content":"问题没太看懂。文中例子switch x.(type) 中的x是一个interface{}类型接口，Go所有类型都实现了该接口，包括自定义类型T。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643540720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327861,"user_name":"文经","can_delete":false,"product_type":"c1","uid":1072346,"ip_address":"","ucode":"2C059BD2A4276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5c/da/0a8bc27b.jpg","comment_is_top":false,"comment_ctime":1640333056,"is_pvip":true,"replies":[{"id":120349,"content":"switch的不是v。","user_name":"作者回复","user_name_real":"编辑","uid":1026224,"ctime":1641893086,"ip_address":"","comment_id":327861,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"白老师，switch v := x.(type)，有点不太好理解。\n这个语句编译器是不是转化为类型这样的代码：\nv := x.(type)\nswitch x.(type)\n\n我直观上会理解成：\nv := x.(type)\nswitch v\n\n这算不算编译器提供的一种语法糖？","like_count":0,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545278,"discussion_content":"switch的不是v。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641893086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323494,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1637932657,"is_pvip":false,"replies":null,"discussion_count":6,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"今天《极客时间》两个专栏同时更新，主题都是 switch\n\n- 《深入剖析 Java 新特性》06 | Switch表达式：怎么简化多情景操作？\n- 《Tony Bai · Go 语言第一课》20｜控制结构：Go中的switch语句有哪些变化？\n\n对比结果\n\n- Java17 居然可以比 Go 简洁！\n- 但然综合能力 Go 的更灵活\n\n\nJava17 switch\n\n```java\nString checkWorkday(int day) {\n\treturn switch (day) {\n\t\tcase 1, 2, 3, 4, 5 -&gt; &quot;it is a work day&quot;;\n\t\tcase 6, 7 -&gt; &quot;it is a weekend day&quot;;\n\t\tdefault -&gt; &quot;are you live on earth&quot;;\n\t};\n}\n```\n\nGo switch\n\n```go\nfunc checkWorkday(day int) string {\n\tswitch day {\n\tcase 1, 2, 3, 4, 5:\n\t\treturn &quot;it is a work day&quot;\n\tcase 6, 7:\n\t\treturn &quot;it is a weekend day&quot;\n\tdefault:\n\t\treturn &quot;are you live on earth&quot;\n\t}\n}\n```","like_count":15,"discussions":[{"author":{"id":1026224,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a8/b0/6f87ab08.jpg","nickname":"Tony Bai","note":"","ucode":"B6B08985F6FA89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545278,"discussion_content":"switch的不是v。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641893086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323496,"user_name":"进化菌","can_delete":false,"product_type":"c1","uid":1276861,"ip_address":"","ucode":"B30A5F78BB4171","user_header":"https://static001.geekbang.org/account/avatar/00/13/7b/bd/ccb37425.jpg","comment_is_top":false,"comment_ctime":1637932745,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":4,"score":3,"product_id":100093501,"comment_content":"所以，switch 不需要 break 是出于大多数情况 switch 只需要走一条分支的缘故吗？","like_count":5},{"had_liked":false,"id":326372,"user_name":"木木","can_delete":false,"product_type":"c1","uid":2704565,"ip_address":"","ucode":"86820F26A27308","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/b5/7eba5a0e.jpg","comment_is_top":false,"comment_ctime":1639487312,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"C语言的switch是为了模拟跳转表，所以如果目的是根据值执行一小段的话，需要每个条件的执行语句最后都加break，go的switch已经不再是为了模拟跳转表了，就是按着人们常用的方法设计的，所以不用加break，但是break的作用依旧留着","like_count":1,"discussions":[{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":602671,"discussion_content":"Go的switch更符合语义直觉，基本上常用的查表、分段函数、复杂映射关系等都能简单表达。C语言的fallthrough，是效率的考虑，其实在Go中被case expr1, expr2:{}等价表达了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1675838774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323429,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1637898870,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100093501,"comment_content":"讲的非常详细，值得好好学习","like_count":1}]}