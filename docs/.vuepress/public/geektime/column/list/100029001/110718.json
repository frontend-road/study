{"id":110718,"title":"27 | 更好更快的握手：TLS1.3特性解析","content":"<p>上一讲中我讲了TLS1.2的握手过程，你是不是已经完全掌握了呢？</p><p>不过TLS1.2已经是10年前（2008年）的“老”协议了，虽然历经考验，但毕竟“岁月不饶人”，在安全、性能等方面已经跟不上如今的互联网了。</p><p>于是经过四年、近30个草案的反复打磨，TLS1.3终于在去年（2018年）“粉墨登场”，再次确立了信息安全领域的新标准。</p><p>在抓包分析握手之前，我们先来快速浏览一下TLS1.3的三个主要改进目标：<strong>兼容</strong>、<strong>安全与性能</strong>。</p><h2>最大化兼容性</h2><p>由于1.1、1.2等协议已经出现了很多年，很多应用软件、中间代理（官方称为“MiddleBox”）只认老的记录协议格式，更新改造很困难，甚至是不可行（设备僵化）。</p><p>在早期的试验中发现，一旦变更了记录头字段里的版本号，也就是由0x303（TLS1.2）改为0x304（TLS1.3）的话，大量的代理服务器、网关都无法正确处理，最终导致TLS握手失败。</p><p>为了保证这些被广泛部署的“老设备”能够继续使用，避免新协议带来的“冲击”，TLS1.3不得不做出妥协，保持现有的记录格式不变，通过“伪装”来实现兼容，使得TLS1.3看上去“像是”TLS1.2。</p><p>那么，该怎么区分1.2和1.3呢？</p><!-- [[[read_end]]] --><p>这要用到一个新的<strong>扩展协议</strong>（Extension Protocol），它有点“补充条款”的意思，通过在记录末尾添加一系列的“扩展字段”来增加新的功能，老版本的TLS不认识它可以直接忽略，这就实现了“后向兼容”。</p><p>在记录头的Version字段被兼容性“固定”的情况下，只要是TLS1.3协议，握手的“Hello”消息后面就必须有“<strong>supported_versions</strong>”扩展，它标记了TLS的版本号，使用它就能区分新旧协议。</p><p>其实上一讲Chrome在握手时发的就是TLS1.3协议，你可以看一下“Client Hello”消息后面的扩展，只是因为服务器不支持1.3，所以就“后向兼容”降级成了1.2。</p><pre><code>Handshake Protocol: Client Hello\n    Version: TLS 1.2 (0x0303)\n    Extension: supported_versions (len=11)\n        Supported Version: TLS 1.3 (0x0304)\n        Supported Version: TLS 1.2 (0x0303)\n</code></pre><p>TLS1.3利用扩展实现了许多重要的功能，比如“supported_groups”“key_share”“signature_algorithms”“server_name”等，这些等后面用到的时候再说。</p><h2>强化安全</h2><p>TLS1.2在十来年的应用中获得了许多宝贵的经验，陆续发现了很多的漏洞和加密算法的弱点，所以TLS1.3就在协议里修补了这些不安全因素。</p><p>比如：</p><ul>\n<li>伪随机数函数由PRF升级为HKDF（HMAC-based Extract-and-Expand Key Derivation Function）；</li>\n<li>明确禁止在记录协议里使用压缩；</li>\n<li>废除了RC4、DES对称加密算法；</li>\n<li>废除了ECB、CBC等传统分组模式；</li>\n<li>废除了MD5、SHA1、SHA-224摘要算法；</li>\n<li>废除了RSA、DH密钥交换算法和许多命名曲线。</li>\n</ul><p>经过这一番“减肥瘦身”之后，TLS1.3里只保留了AES、ChaCha20对称加密算法，分组模式只能用AEAD的GCM、CCM和Poly1305，摘要算法只能用SHA256、SHA384，密钥交换算法只有ECDHE和DHE，椭圆曲线也被“砍”到只剩P-256和x25519等5种。</p><p>减肥可以让人变得更轻巧灵活，TLS也是这样。</p><p>算法精简后带来了一个意料之中的好处：原来众多的算法、参数组合导致密码套件非常复杂，难以选择，而现在的TLS1.3里只有5个套件，无论是客户端还是服务器都不会再犯“选择困难症”了。</p><p><img src=\"https://static001.geekbang.org/resource/image/ee/65/eeeb1d30acbc0e69541ce0620346b765.jpg?wh=1500*1013\" alt=\"\"></p><p>这里还要特别说一下废除RSA和DH密钥交换算法的原因。</p><p>上一讲用Wireshark抓包时你一定看到了，浏览器默认会使用ECDHE而不是RSA做密钥交换，这是因为它不具有“<strong>前向安全</strong>”（Forward Secrecy）。</p><p>假设有这么一个很有耐心的黑客，一直在长期收集混合加密系统收发的所有报文。如果加密系统使用服务器证书里的RSA做密钥交换，一旦私钥泄露或被破解（使用社会工程学或者巨型计算机），那么黑客就能够使用私钥解密出之前所有报文的“Pre-Master”，再算出会话密钥，破解所有密文。</p><p>这就是所谓的“<strong>今日截获，明日破解</strong>”。</p><p>而ECDHE算法在每次握手时都会生成一对临时的公钥和私钥，每次通信的密钥对都是不同的，也就是“一次一密”，即使黑客花大力气破解了这一次的会话密钥，也只是这次通信被攻击，之前的历史消息不会受到影响，仍然是安全的。</p><p>所以现在主流的服务器和浏览器在握手阶段都已经不再使用RSA，改用ECDHE，而TLS1.3在协议里明确废除RSA和DH则在标准层面保证了“前向安全”。</p><h2>提升性能</h2><p>HTTPS建立连接时除了要做TCP握手，还要做TLS握手，在1.2中会多花两个消息往返（2-RTT），可能导致几十毫秒甚至上百毫秒的延迟，在移动网络中延迟还会更严重。</p><p>现在因为密码套件大幅度简化，也就没有必要再像以前那样走复杂的协商流程了。TLS1.3压缩了以前的“Hello”协商过程，删除了“Key Exchange”消息，把握手时间减少到了“1-RTT”，效率提高了一倍。</p><p>那么它是怎么做的呢？</p><p>其实具体的做法还是利用了扩展。客户端在“Client Hello”消息里直接用“<strong>supported_groups</strong>”带上支持的曲线，比如P-256、x25519，用“<strong>key_share</strong>”带上曲线对应的客户端公钥参数，用“<strong>signature_algorithms</strong>”带上签名算法。</p><p>服务器收到后在这些扩展里选定一个曲线和参数，再用“key_share”扩展返回服务器这边的公钥参数，就实现了双方的密钥交换，后面的流程就和1.2基本一样了。</p><p>我为1.3的握手过程画了一张图，你可以对比1.2看看区别在哪里。</p><p><img src=\"https://static001.geekbang.org/resource/image/4d/b0/4d1df4d07dbb1c2500fc4ea69ecf7ab0.png?wh=2055*1925\" alt=\"\"></p><p>除了标准的“1-RTT”握手，TLS1.3还引入了“0-RTT”握手，用“pre_shared_key”和“early_data”扩展，在TCP连接后立即就建立安全连接发送加密消息，不过这需要有一些前提条件，今天暂且不说。</p><h2>握手分析</h2><p>目前Nginx等Web服务器都能够很好地支持TLS1.3，但要求底层的OpenSSL必须是1.1.1，而我们实验环境里用的OpenSSL是1.1.0，所以暂时无法直接测试TLS1.3。</p><p>不过我在Linux上用OpenSSL1.1.1编译了一个支持TLS1.3的Nginx，用Wireshark抓包存到了GitHub上，用它就可以分析TLS1.3的握手过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/7a/db/7a2bc39fdbb421cf72a01e887e9156db.png?wh=900*1840\" alt=\"\"></p><p>在TCP建立连接之后，浏览器首先还是发一个“<strong>Client Hello</strong>”。</p><p>因为1.3的消息兼容1.2，所以开头的版本号、支持的密码套件和随机数（Client Random）结构都是一样的（不过这时的随机数是32个字节）。</p><pre><code>Handshake Protocol: Client Hello\n    Version: TLS 1.2 (0x0303)\n    Random: cebeb6c05403654d66c2329…\n    Cipher Suites (18 suites)\n        Cipher Suite: TLS_AES_128_GCM_SHA256 (0x1301)\n        Cipher Suite: TLS_CHACHA20_POLY1305_SHA256 (0x1303)\n        Cipher Suite: TLS_AES_256_GCM_SHA384 (0x1302)\n    Extension: supported_versions (len=9)\n        Supported Version: TLS 1.3 (0x0304)\n        Supported Version: TLS 1.2 (0x0303)\n    Extension: supported_groups (len=14)\n        Supported Groups (6 groups)\n            Supported Group: x25519 (0x001d)\n            Supported Group: secp256r1 (0x0017)\n    Extension: key_share (len=107)\n        Key Share extension\n            Client Key Share Length: 105\n            Key Share Entry: Group: x25519\n            Key Share Entry: Group: secp256r1\n</code></pre><p>注意“Client Hello”里的扩展，“<strong>supported_versions</strong>”表示这是TLS1.3，“<strong>supported_groups</strong>”是支持的曲线，“<strong>key_share</strong>”是曲线对应的参数。</p><p>这就好像是说：</p><p>“还是照老规矩打招呼，这边有这些这些信息。但我猜你可能会升级，所以再多给你一些东西，也许后面用的上，咱们有话尽量一口气说完。”</p><p>服务器收到“Client Hello”同样返回“Server Hello”消息，还是要给出一个<strong>随机数</strong>（Server Random）和选定密码套件。</p><pre><code>Handshake Protocol: Server Hello\n    Version: TLS 1.2 (0x0303)\n    Random: 12d2bce6568b063d3dee2…\n    Cipher Suite: TLS_AES_128_GCM_SHA256 (0x1301)\n    Extension: supported_versions (len=2)\n        Supported Version: TLS 1.3 (0x0304)\n    Extension: key_share (len=36)\n        Key Share extension\n            Key Share Entry: Group: x25519, Key Exchange length: 32\n</code></pre><p>表面上看和TLS1.2是一样的，重点是后面的扩展。“<strong>supported_versions</strong>”里确认使用的是TLS1.3，然后在“<strong>key_share</strong>”扩展带上曲线和对应的公钥参数。</p><p>服务器的“Hello”消息大概是这个意思：</p><p>“还真让你给猜对了，虽然还是按老规矩打招呼，但咱们来个‘旧瓶装新酒’。刚才你给的我都用上了，我再给几个你缺的参数，这次加密就这么定了。”</p><p>这时只交换了两条消息，客户端和服务器就拿到了四个共享信息：<strong>Client Random</strong>和<strong>Server Random</strong>、<strong>Client Params</strong>和<strong>Server Params</strong>，两边就可以各自用ECDHE算出“<strong>Pre-Master</strong>”，再用HKDF生成主密钥“<strong>Master Secret</strong>”，效率比TLS1.2提高了一大截。</p><p>在算出主密钥后，服务器立刻发出“<strong>Change Cipher Spec</strong>”消息，比TLS1.2提早进入加密通信，后面的证书等就都是加密的了，减少了握手时的明文信息泄露。</p><p>这里TLS1.3还有一个安全强化措施，多了个“<strong>Certificate Verify</strong>”消息，用服务器的私钥把前面的曲线、套件、参数等握手数据加了签名，作用和“<strong>Finished</strong>”消息差不多。但由于是私钥签名，所以强化了身份认证和和防窜改。</p><p>这两个“Hello”消息之后，客户端验证服务器证书，再发“Finished”消息，就正式完成了握手，开始收发HTTP报文。</p><p>虽然我们的实验环境暂时不能抓包测试TLS1.3，但互联网上很多网站都已经支持了TLS1.3，比如<a href=\"https://www.nginx.com/\">Nginx</a>、<a href=\"https://github.com/\">GitHub</a>，你可以课后自己用Wireshark试试。</p><p>在Chrome的开发者工具里，可以看到这些网站的TLS1.3应用情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/44/3c/44d8c3349ffdea5a1e4e13d222bc743c.png?wh=1601*1150\" alt=\"\"></p><h2>小结</h2><p>今天我们一起学习了TLS1.3的新特性，用抓包研究了它的握手过程，不过TLS1.3里的内容很多，还有一些特性没有谈到，后面会继续讲。</p><ol>\n<li><span class=\"orange\">为了兼容1.1、1.2等“老”协议，TLS1.3会“伪装”成TLS1.2，新特性在“扩展”里实现；</span></li>\n<li><span class=\"orange\">1.1、1.2在实践中发现了很多安全隐患，所以TLS1.3大幅度删减了加密算法，只保留了ECDHE、AES、ChaCha20、SHA-2等极少数算法，强化了安全；</span></li>\n<li><span class=\"orange\">TLS1.3也简化了握手过程，完全握手只需要一个消息往返，提升了性能。</span></li>\n</ol><h2>课下作业</h2><ol>\n<li>TLS1.3里的密码套件没有指定密钥交换算法和签名算法，那么在握手的时候会不会有问题呢？</li>\n<li>结合上一讲的RSA握手过程，解释一下为什么RSA密钥交换不具有“前向安全”。</li>\n<li>TLS1.3的握手过程与TLS1.2的“False Start”有什么异同？</li>\n</ol><p>欢迎你把自己的学习体会写在留言区，与我和其他同学一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。</p><p><img src=\"https://static001.geekbang.org/resource/image/ab/64/ab532f0074ddb136cd96c76c3a385164.png?wh=1769*3265\" alt=\"unpreview\"></p><p></p>","neighbors":{"left":{"article_title":"26 | 信任始于握手：TLS1.2连接过程解析","id":110354},"right":{"article_title":"28 | 连接太慢该怎么办：HTTPS的优化","id":111287}},"comments":[{"had_liked":false,"id":118426,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1564364001,"is_pvip":false,"replies":[{"id":"43405","content":"great。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564366783,"ip_address":"","comment_id":118426,"utype":1}],"discussion_count":2,"race_medal":0,"score":"186247957729","product_id":100029001,"comment_content":"1、TLS1.3精简了加密算法，通过support_groups、key_share、signature_algorithms这些参数就能判断出密钥交换算法和签名算法，不用在cipher suite中协商了<br>2、RSA握手时，client key exchage会使用RSA公钥加密pre master后传给服务端，一旦私钥被破解，那么之前的信息都会被破译，根本原因还是在于RSA的这一对公钥私钥并不是临时的。<br>3、相同点：都在未收到Finished确认消息时就已经向对方发送加密信息了，不同点：TLS1.3将change cipher spec合并到了hello中","like_count":44,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460403,"discussion_content":"great。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564366783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1959482,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e6/3a/382cf024.jpg","nickname":"rongyefeng","note":"","ucode":"9A15D947E9D645","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":281166,"discussion_content":"TLS1.3客户端将密钥交换算法参数合并到hello消息中，服务器端将change cipher spec合并到了hello中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591683495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119098,"user_name":"前端西瓜哥","can_delete":false,"product_type":"c1","uid":1248576,"ip_address":"","ucode":"150130C34CD1C1","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/40/f70e5653.jpg","comment_is_top":false,"comment_ctime":1564502888,"is_pvip":false,"replies":[{"id":"43677","content":"回答的非常好。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564534500,"ip_address":"","comment_id":119098,"utype":1}],"discussion_count":1,"race_medal":0,"score":"96053783400","product_id":100029001,"comment_content":"2. 结合上一讲的 RSA 握手过程，解释一下为什么 RSA 密钥交换不具有“前向安全”。<br><br>答：RSA 握手中，Server Hello 后，客户端拿到服务器的证书，从中提取出服务器的公钥，然后用这个公钥去加密客户端生成的一个随机数（会话密钥）得到密文，然后将其返回给服务器。虽然每次 TLS 握手中的会话密钥都是不一样的，但服务器的私钥却始终不会变。一旦黑客拿到了服务器私钥，并且截获了之前的所有密文，就能拿到每次会话中的对称密钥，从而得到客户端和服务器的所有“历史会话记录”。<br><br>说到底，RSA 握手下，服务器私钥是不变的，从而导致不具有“前向安全”。而 ECDHE 的私钥却是动态的，黑客拿到了一个，也只能解密一个密文。","like_count":23,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460743,"discussion_content":"回答的非常好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564534500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119106,"user_name":"彦页","can_delete":false,"product_type":"c1","uid":1178698,"ip_address":"","ucode":"194563354340C8","user_header":"https://static001.geekbang.org/account/avatar/00/11/fc/4a/49fb0f32.jpg","comment_is_top":false,"comment_ctime":1564504430,"is_pvip":false,"replies":[{"id":"43687","content":"这里有个细节没讲，其实tls1.3有多个加密密钥，在握手的时候，服务器发来的数据会用server_handshake_traffic_secret进行加密，而这个密钥也是由HKDF算出来的。<br><br>所以客户端先生成server_handshake_traffic_secret，把服务器握手消息解密，取出证书，验证证书，都没问题，才计算pre-master。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564535893,"ip_address":"","comment_id":119106,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27334308206","product_id":100029001,"comment_content":"老师，客户端验证服务器证书，为什么不是pre_master计算出来才检验证书？因为服务器已经把证书加密传输的啊？","like_count":7,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460746,"discussion_content":"这里有个细节没讲，其实tls1.3有多个加密密钥，在握手的时候，服务器发来的数据会用server_handshake_traffic_secret进行加密，而这个密钥也是由HKDF算出来的。\n\n所以客户端先生成server_handshake_traffic_secret，把服务器握手消息解密，取出证书，验证证书，都没问题，才计算pre-master。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564535893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159254,"user_name":"李鑫磊","can_delete":false,"product_type":"c1","uid":1101615,"ip_address":"","ucode":"D06517CFCEEE00","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/2f/4f89f22a.jpg","comment_is_top":false,"comment_ctime":1575592436,"is_pvip":false,"replies":[{"id":"60893","content":"可以参考“答疑篇”，讲ecdhe算法，参数就是算法的公钥、曲线定义。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1575594209,"ip_address":"","comment_id":159254,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14460494324","product_id":100029001,"comment_content":"请教老师，一直没看懂，“秘钥交换算法参数”究竟是什么？","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476996,"discussion_content":"可以参考“答疑篇”，讲ecdhe算法，参数就是算法的公钥、曲线定义。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575594209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286891,"user_name":"Geek_534344","can_delete":false,"product_type":"c1","uid":1455830,"ip_address":"","ucode":"2E4E549DD66232","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/R3kk0l4xvgn1Kl2ibD1I0IzC5sKX8UUoC8eAWaOEKTQ9npZN61VugVw4iblKzrZH391wRckgCS1x3EwRzxL0WL7A/132","comment_is_top":false,"comment_ctime":1617671572,"is_pvip":false,"replies":[{"id":"104176","content":"和TLS1.2的作用是一样的，验证服务器身份，对握手数据签名。<br><br>1.3只是简化了1.2的握手步骤，基本原理还是一样的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1617682255,"ip_address":"","comment_id":286891,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10207606164","product_id":100029001,"comment_content":"TLS1.3中，服务端的证书有什么作用呢？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518124,"discussion_content":"和TLS1.2的作用是一样的，验证服务器身份，对握手数据签名。\n\n1.3只是简化了1.2的握手步骤，基本原理还是一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617682255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172571,"user_name":"俊伟","can_delete":false,"product_type":"c1","uid":1111175,"ip_address":"","ucode":"7905B4F25637F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/f4/87/644c0c5d.jpg","comment_is_top":false,"comment_ctime":1579225647,"is_pvip":true,"replies":[{"id":"66921","content":"经过了认真的思考，回答的非常好！","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1579233190,"ip_address":"","comment_id":172571,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10169160239","product_id":100029001,"comment_content":"1.1.3在握手时指定了supported groups和key share和signature algorihms，服务器从这些参数中就能判断出密钥交互算法和摘要算法。<br>2.因为RSA是客户端算出pre master发送到服务端，算出来的master secret是固定的，随着时间的推移，有被黑客算出来的风险。<br>3.TLS1.2是客户端率先算出master secret，然后发送Application data 而TLS1.3是服务端优先算出master secret，发送Application data。","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481778,"discussion_content":"经过了认真的思考，回答的非常好！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579233190,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120845,"user_name":"彩色的沙漠","can_delete":false,"product_type":"c1","uid":1116183,"ip_address":"","ucode":"19A0975A5E69EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","comment_is_top":false,"comment_ctime":1565005234,"is_pvip":true,"replies":[{"id":"44375","content":"<br>这些比较细节和底层，如果想要认真研究还是建议去看rfc。<br><br>我简单解释一下：<br><br>1.tls1.3使用了多个对称密钥，服务器在握手Encrypted Extensions时使用的不是pre-master，而是server_handshake_traffic_secret。<br><br>2.可以参考课程里简略流程图，里面列出了那些记录，而具体的扩展字段会因密码套件而变化。<br><br>3.Finished消息与tls1.2的一样，是用会话密钥，也就是master secret加密的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565009821,"ip_address":"","comment_id":120845,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10154939826","product_id":100029001,"comment_content":"希望老师对TLS1.3增加一篇补充，里面涉及的细节大家不是很清楚怎么回事，网上资料少还容易误导。<br>1、服务器返回的Encrypted Extensions（被加密的扩展信息），加密的扩展信息里面不包含key_share和support_groups,这两个关键参数因为加密之后，无法计算pre-master。问题是加密的扩展信息使用的是哪个密钥对？<br>2、原文中“在算出主密钥后，服务器立刻发出“Change Cipher Spec”消息，比 TLS1.2 提早进入加密通信，后面的证书等就都是加密的，减少了握手时的明文信息泄露。问题是，除了证书还有那些参数使用加密传输，以及使用的是个密钥对？客户端不先计算pre-master何master-secret，怎么解密证书，进行验证？<br>3、server certificate verify，使用证书签名握手数据，Finished也是对握手数据进行摘要签名，它用的是master-secret进行的签名吗？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461504,"discussion_content":"\n这些比较细节和底层，如果想要认真研究还是建议去看rfc。\n\n我简单解释一下：\n\n1.tls1.3使用了多个对称密钥，服务器在握手Encrypted Extensions时使用的不是pre-master，而是server_handshake_traffic_secret。\n\n2.可以参考课程里简略流程图，里面列出了那些记录，而具体的扩展字段会因密码套件而变化。\n\n3.Finished消息与tls1.2的一样，是用会话密钥，也就是master secret加密的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565009821,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118863,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1564453765,"is_pvip":false,"replies":[{"id":"43579","content":"不是的。<br><br>还是要有pre-master，注意tls通信使用的master key需要三个随机数生成，其中客户端和服务器的随机数是公开的，而pre-master是加密传输。<br><br>tls1.3只是简化了握手过程中的密码套件协商，还是要交换密钥参数算pre-master的。<br><br>如果是自己内部的系统，当然可以不用tls那么复杂，直接一个随机数当会话密钥。<br><br>可以再看一下tls1.3的握手流程图，里面还有pre-master。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564454571,"ip_address":"","comment_id":118863,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10154388357","product_id":100029001,"comment_content":"老师，我对比了下tls1. 2和1.3，发现pre master根本就是多余的嘛,双方有个公共K, A=a*K发给服务端，服务端生成B=b*K,双方就可以利用a*b*K=b*a*K的相同密钥进行通信了,1.2是需要客户端把premaster发给服务端，然后双方a*b*K*pre master=b*a*K*pre master的对称密钥进行通信，1.3就是少了pre master，可以这样理解吧","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460622,"discussion_content":"不是的。\n\n还是要有pre-master，注意tls通信使用的master key需要三个随机数生成，其中客户端和服务器的随机数是公开的，而pre-master是加密传输。\n\ntls1.3只是简化了握手过程中的密码套件协商，还是要交换密钥参数算pre-master的。\n\n如果是自己内部的系统，当然可以不用tls那么复杂，直接一个随机数当会话密钥。\n\n可以再看一下tls1.3的握手流程图，里面还有pre-master。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564454571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219496,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","nickname":"Leon📷","note":"","ucode":"B9BBD1EFAAE5A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3700,"discussion_content":"那就是把tls1.2的pre master的发送省略了，双方各自自己计算pre master，无需传输了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564718833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1153455,"avatar":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","nickname":"饭粒","note":"","ucode":"4C3220B0D43997","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1219496,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","nickname":"Leon📷","note":"","ucode":"B9BBD1EFAAE5A2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257541,"discussion_content":"Pre-Master 发送应该只在 TLS1.2 使用 RSA 密钥交换算法时有，TLS1.3 已经废弃了 RSA 密钥交换算法，所以只存在 TLS1.2 中的 RSA 握手过程。EDCHE 握手中的 Pre-Master 则是通过椭圆参数 Client Params 和  Server Params 计算出来的，这在 TLS1.2，TLS1.3 的 EDCHE 握手都是这样，只不过 TLS1.3\n把 Client Params 和 Server Params 交换的过程合在了 Client Hello 和 Server Hello 中（通过 key_share 交换），省去了 TLS1.2中的 Client Key Exchange 和 Server Key Exchange，这也是 TLS1.3 在握手过程比 TLS1.2 缩短 1-RTT 的地方。\n个人理解，有误请指正。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588585328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":3700,"ip_address":""},"score":257541,"extra":""}]}]},{"had_liked":false,"id":281933,"user_name":"宝仔","can_delete":false,"product_type":"c1","uid":1013493,"ip_address":"","ucode":"A0F17DFF99DB21","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/f5/e3f5bd8d.jpg","comment_is_top":false,"comment_ctime":1614956024,"is_pvip":true,"replies":[{"id":"102363","content":"先说一下，我已经离开360一段时间了，所以只能是“前同事”。<br><br>关于这个问题，从描述上来看，好像与proxy_ssl_server_name on没有什么关系，所以我觉得还是应该从网络环境上找原因，而不是Nginx的问题。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1614985423,"ip_address":"","comment_id":281933,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5909923320","product_id":100029001,"comment_content":"罗老师你好，我们其实也算同事哈哈。我们是被360全资收购的一个创业公司，咨询你一个问题：<br>客户A有自己的一个域名a.test.com（nginx web，这个nginx web也是我们给搭建的）,访问https:&#47;&#47;a.test.com会反向代理(proxy_pass https:&#47;&#47;c.me.com)到我们的站点，c.me.com即为我们的站点。突然有一天客户反馈网站无法访问(问题表象是访问很慢，大概要7s左右，要么就是超时502)，查了很久的问题，各种抓包，最终在客户的nginx上加了proxy_ssl_server_name on;就好了；我们也知道这个参数的含义了，但是我们这边没有做任何变动，包括这家客户的nginx我们也没做任何变动，并且我们的客户不止这么一家，配置都是一样的，其他家都是正常的。难道是客户这边出口做了什么调整吗？老师有解法吗？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516554,"discussion_content":"先说一下，我已经离开360一段时间了，所以只能是“前同事”。\n\n关于这个问题，从描述上来看，好像与proxy_ssl_server_name on没有什么关系，所以我觉得还是应该从网络环境上找原因，而不是Nginx的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614985423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2211363,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eoWoXojHwtbL72K6oXgbiaThl5UuNlkNyWFpw5klRzQ7RhIhNOXtkgmH4h4d0AyWShk2D41emXM5PQ/132","nickname":"玲珑佩","note":"","ucode":"57FEC507F8DEDB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387801,"discussion_content":"是这个问题吗？ http://www.bubuko.com/infodetail-2565746.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628419774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222547,"user_name":"james","can_delete":false,"product_type":"c1","uid":1232771,"ip_address":"","ucode":"AC42035106E5B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yyibGRYCArsUNBfCAEAibua09Yb9D5AdO8TkCmXymhAepibqmlz0hzg06ggBLxyvXicnjqFVGr7zYF0rQoZ0aXCBAg/132","comment_is_top":false,"comment_ctime":1590832655,"is_pvip":false,"replies":[{"id":"82055","content":"说的很好。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1590839126,"ip_address":"","comment_id":222547,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5885799951","product_id":100029001,"comment_content":"1. TLS1.3精简了加密算法，通过support_groups、key_share、signature_algorithms这些参数就能判断出密钥交换算法和签名算法，不用在cipher suite中协商了<br>2.  RSA 握手中，Server Hello 后，客户端拿到服务器的证书，从中提取出服务器的公钥，然后用这个公钥去加密客户端生成的一个随机数（会话密钥）得到密文，然后将其返回给服务器。虽然每次 TLS 握手中的会话密钥都是不一样的，但服务器的私钥却始终不会变。一旦黑客拿到了服务器私钥，并且截获了之前的所有密文，就能拿到每次会话中的对称密钥，从而得到客户端和服务器的所有“历史会话记录”。<br><br>说到底，RSA 握手下，服务器私钥是不变的，从而导致不具有“前向安全”。而 ECDHE 的私钥却是动态的，黑客拿到了一个，也只能解密一个密文。<br><br>3.  相同点：都在未收到Finished确认消息时就已经向对方发送加密信息了，不同点：TLS1.3将change cipher spec合并到了hello中","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496838,"discussion_content":"说的很好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590839126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213915,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1588588849,"is_pvip":false,"replies":[{"id":"79267","content":"是的，客户端预先给出一些算法参数，让服务器选定，这样就省去了TLS1.2的套件协商过程。<br><br>比如这里就是两个椭圆曲线，x25519和P-256，服务器可以从中挑一个，目前大多数都使用最快最安全的X25519。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588634116,"ip_address":"","comment_id":213915,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5883556145","product_id":100029001,"comment_content":"Client Hello 数据中密钥参数 key_share 有两个 Key Share Entry，服务端回复只返回了一个，这个应该是和密钥套件（5选1）一样是需要服务端确定具体使用哪个？<br>Extension: key_share (len=107)<br>    Type: key_share (51)<br>    Length: 107<br>    Key Share extension<br>        Client Key Share Length: 105<br>        Key Share Entry: Group: x25519, Key Exchange length: 32<br>        Key Share Entry: Group: secp256r1, Key Exchange length: 65","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493896,"discussion_content":"是的，客户端预先给出一些算法参数，让服务器选定，这样就省去了TLS1.2的套件协商过程。\n\n比如这里就是两个椭圆曲线，x25519和P-256，服务器可以从中挑一个，目前大多数都使用最快最安全的X25519。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588634116,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":147054,"user_name":"book尾汁","can_delete":false,"product_type":"c1","uid":1446375,"ip_address":"","ucode":"AE2B8DFC643ACC","user_header":"https://static001.geekbang.org/account/avatar/00/16/11/e7/044a9a6c.jpg","comment_is_top":false,"comment_ctime":1572778310,"is_pvip":true,"replies":[{"id":"56812","content":"<br>1.tls1.3用扩展协议列出了支持的密钥交换算法和签名算法，所以不需要用密码套件指定。<br><br>2.对。<br><br>3.对。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1572829517,"ip_address":"","comment_id":147054,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867745606","product_id":100029001,"comment_content":"1. TLS1.3版本在client hello时，已经指定了摘要算法，列出了所支持的椭圆曲线、基点信息。<br>2. RSA做密钥交换算法时，采用的是证书里面公钥对应的私钥来加密会话密钥，一般私钥被破解，就可以得到之前截获信息的会话密钥，解密消息<br>3 相同点，都是未收到响应前就把 客户端就把密钥交换算法需要的参数传了过去<br>不同点，因为服务器尚未选择密钥交换算法，因此密钥交换算法的参数有多个，false start中是客户端先得到椭圆曲线的两个参数，算出master key并发起 change cipher spec，而TLS1.3则是服务器先得到这两个参数，发起change cipher spec, TLS1.3change cipher spec合并到了clienthello中","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473119,"discussion_content":"\n1.tls1.3用扩展协议列出了支持的密钥交换算法和签名算法，所以不需要用密码套件指定。\n\n2.对。\n\n3.对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572829517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343536,"user_name":"一省吾身","can_delete":false,"product_type":"c1","uid":1676631,"ip_address":"","ucode":"D902357160BBD9","user_header":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","comment_is_top":false,"comment_ctime":1650895876,"is_pvip":true,"replies":[{"id":"125583","content":"这两对公私钥的用途不一样，要注意区分。<br><br>ecdhe是用来做密钥交换的，临时用，所以不需要验证。<br>rsa是用作身份认证的，所有必须要有ca签名背书。<br><br>rsa生成密钥的速度很慢，而且它的算法特性也决定了没有办法实现前向保密。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1651128467,"ip_address":"","comment_id":343536,"utype":1}],"discussion_count":2,"race_medal":2,"score":"1650895876","product_id":100029001,"comment_content":"老师有点没懂:<br>ecdhe每次都会生成新的公私钥，而rsa总是用服务器的公钥加密私钥解密.<br>    证书是给server的公钥背书的,如果用新生成的公私钥,信任是如何建立的呢?<br>    另外为什么rsa不也每次生成新的公私钥呢,是不能实现还是为了向前兼容呢?<br>感谢!<br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568414,"discussion_content":"这两对公私钥的用途不一样，要注意区分。\n\necdhe是用来做密钥交换的，临时用，所以不需要验证。\nrsa是用作身份认证的，所有必须要有ca签名背书。\n\nrsa生成密钥的速度很慢，而且它的算法特性也决定了没有办法实现前向保密。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651128467,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1676631,"avatar":"https://static001.geekbang.org/account/avatar/00/19/95/57/a2991536.jpg","nickname":"一省吾身","note":"","ucode":"D902357160BBD9","race_medal":2,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569417,"discussion_content":"感谢解答，赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651421426,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316397,"user_name":"Geek_1760ca","can_delete":false,"product_type":"c1","uid":1513123,"ip_address":"","ucode":"5D29BAB6ACDDF8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKH4ILYLTcZjkl4lqZL6r4ZqPCic6IgPNByYccszEwhI0CU8SWW8g96gdIWiapw1RI6eYiagP10rXusA/132","comment_is_top":false,"comment_ctime":1634296119,"is_pvip":false,"replies":[{"id":"114596","content":"可以改，但改之后随机数就和服务器的对不上了，无法完成握手。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1634347450,"ip_address":"","comment_id":316397,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1634296119","product_id":100029001,"comment_content":"小贴士中的降级保护机制真的有用么？ 中间人本来就既是服务端又是客户端。是不是可以发现提示的随机数再改掉?","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528377,"discussion_content":"可以改，但改之后随机数就和服务器的对不上了，无法完成握手。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634347450,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314139,"user_name":"Unknown element","can_delete":false,"product_type":"c1","uid":2028277,"ip_address":"","ucode":"34A129800D0238","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f2/f5/b82f410d.jpg","comment_is_top":false,"comment_ctime":1632875382,"is_pvip":false,"replies":[{"id":"113784","content":"是的。<br><br>因为tls1.3只有很少的几个密码套件，所以客户端就全生成好，发给服务器，然后服务器再挑一个，这样就省去了来回协商的麻烦。<br><br>可以再看看抓包数据。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1632883461,"ip_address":"","comment_id":314139,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632875382","product_id":100029001,"comment_content":"老师client param不是和具体采用的密码套件有关吗 那tls 1.3中客户端是如何在服务器返回采用的密码套件之前把这个参数发给服务器的？还是说客户端把仅有的几个密码套件都生成了一个参数然后都发给服务器让服务器来选？谢谢老师","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527585,"discussion_content":"是的。\n\n因为tls1.3只有很少的几个密码套件，所以客户端就全生成好，发给服务器，然后服务器再挑一个，这样就省去了来回协商的麻烦。\n\n可以再看看抓包数据。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632883461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310760,"user_name":"Geek_68d3d2","can_delete":false,"product_type":"c1","uid":1674369,"ip_address":"","ucode":"EBD6D881AA7A74","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqf54z1ZmqQY1kmJ6t1HAnrqMM3j6WKf0oDeVLhtnA2ZUKY6AX9MK6RjvcO8SiczXy3uU0IzBQ3tpw/132","comment_is_top":false,"comment_ctime":1630895980,"is_pvip":false,"replies":[{"id":"112607","content":"前向安全与tls1.3无关，跟握手时使用的算法有关。<br><br>tls1.3废弃了rsa算法，它不具有前向安全性，而只能使用dhe和ecdhe，所以就具备了前向安全，密钥都是临时生成的，相当于一次一密，黑客破解了也不会对其他会话造成影响。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1630909364,"ip_address":"","comment_id":310760,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1630895980","product_id":100029001,"comment_content":"没明白tls1.3如何解决那种今日截获明日破解的问题。私钥黑客就不能自己算?","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526342,"discussion_content":"前向安全与tls1.3无关，跟握手时使用的算法有关。\n\ntls1.3废弃了rsa算法，它不具有前向安全性，而只能使用dhe和ecdhe，所以就具备了前向安全，密钥都是临时生成的，相当于一次一密，黑客破解了也不会对其他会话造成影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630909364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305484,"user_name":"假于物","can_delete":false,"product_type":"c1","uid":2708739,"ip_address":"","ucode":"2775796BFD4D20","user_header":"https://static001.geekbang.org/account/avatar/00/29/55/03/1092fb6a.jpg","comment_is_top":false,"comment_ctime":1627991985,"is_pvip":false,"replies":[{"id":"110482","content":"一次一密指的是加密用的公私钥是临时生成的。<br><br>ecdhe每次都会生成新的公私钥，而rsa总是用服务器的公钥加密私钥解密，不是临时的公钥私钥，所以不是一次一密。<br><br>这个就导致了rsa不具有前向安全。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1628039359,"ip_address":"","comment_id":305484,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627991985","product_id":100029001,"comment_content":"老师，有个地方需要请教下<br>文中说ECDHE是一次一密，其实RSA也是一次一密吧<br>RSA因为对称秘钥是由客户端决定的，用了服务器的公钥加密；<br>在服务器私钥被破解，RSA所有的信息都会被破解<br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524401,"discussion_content":"一次一密指的是加密用的公私钥是临时生成的。\n\necdhe每次都会生成新的公私钥，而rsa总是用服务器的公钥加密私钥解密，不是临时的公钥私钥，所以不是一次一密。\n\n这个就导致了rsa不具有前向安全。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628039359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":296164,"user_name":"o9","can_delete":false,"product_type":"c1","uid":1101332,"ip_address":"","ucode":"E373E82A39BBFE","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/14/b488f241.jpg","comment_is_top":false,"comment_ctime":1622784732,"is_pvip":false,"replies":[{"id":"107505","content":"这里说的rtt是指tcp建连后消费的rtt，是tls层面的消息来回，就不考虑tcp的ack了。<br><br>tls1.3只用一个rtt就完成了握手，而tls1.2交互过程就麻烦了一点，rsa要用2个rtt完成密钥交换，而ecdhe在第一个rtt之后，第二个消息可以用false start提前发送应用数据，效果和1.3就差不多了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1622854111,"ip_address":"","comment_id":296164,"utype":1}],"discussion_count":2,"race_medal":1,"score":"1622784732","product_id":100029001,"comment_content":"作者 您好，您在文章里说 TLS1.2需要花费 2 个 RTT，但是我看文章里的图片 里面是有服务端返回的 ACK 包的啊，这个不算吗？ECDHE应该是３个消息往返啊","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521344,"discussion_content":"这里说的rtt是指tcp建连后消费的rtt，是tls层面的消息来回，就不考虑tcp的ack了。\n\ntls1.3只用一个rtt就完成了握手，而tls1.2交互过程就麻烦了一点，rsa要用2个rtt完成密钥交换，而ecdhe在第一个rtt之后，第二个消息可以用false start提前发送应用数据，效果和1.3就差不多了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622854111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1101332,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ce/14/b488f241.jpg","nickname":"o9","note":"","ucode":"E373E82A39BBFE","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377786,"discussion_content":"这么说我就了然了 谢谢大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622858967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265455,"user_name":"123","can_delete":false,"product_type":"c1","uid":2254642,"ip_address":"","ucode":"701F0C970CBE70","user_header":"https://static001.geekbang.org/account/avatar/00/22/67/32/efb8ca32.jpg","comment_is_top":false,"comment_ctime":1606902080,"is_pvip":false,"replies":[{"id":"96532","content":"对国密不是太了解，而且TLS本身就是国际标准，不存在其他版本，我个人理解可能是算法里加入了国密算法吧，但这个就跳出标准的定义了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1606958394,"ip_address":"","comment_id":265455,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606902080","product_id":100029001,"comment_content":"老师能否讲一下，国密tls协议与国际协议的区别？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510934,"discussion_content":"对国密不是太了解，而且TLS本身就是国际标准，不存在其他版本，我个人理解可能是算法里加入了国密算法吧，但这个就跳出标准的定义了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606958394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231634,"user_name":"BoyiKia","can_delete":false,"product_type":"c1","uid":1983680,"ip_address":"","ucode":"D37541B4451D6B","user_header":"https://static001.geekbang.org/account/avatar/00/1e/44/c0/cd2cd082.jpg","comment_is_top":false,"comment_ctime":1593739340,"is_pvip":false,"replies":[{"id":"85512","content":"密钥必须要配合算法才能起作用，比如RSA算法要用1024位的私钥，ECDHE算法要用224位的私钥。<br><br>只有私钥，它只是一串数字，是无法完成签名动作的，必须要在算法里才能起作用。<br><br>就像盖章一样，只有章不行，还得有印泥、盖在正确的地方才能算是签名。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1593742449,"ip_address":"","comment_id":231634,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593739340","product_id":100029001,"comment_content":"老师 数字签名，是服务器用私钥加密了摘要。那么  签名算法是指什么，和数字签名有关系吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500386,"discussion_content":"密钥必须要配合算法才能起作用，比如RSA算法要用1024位的私钥，ECDHE算法要用224位的私钥。\n\n只有私钥，它只是一串数字，是无法完成签名动作的，必须要在算法里才能起作用。\n\n就像盖章一样，只有章不行，还得有印泥、盖在正确的地方才能算是签名。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593742449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228677,"user_name":"爱学习不害怕","can_delete":false,"product_type":"c1","uid":1245504,"ip_address":"","ucode":"BE325C02E4C92F","user_header":"https://static001.geekbang.org/account/avatar/00/13/01/40/a203a3b9.jpg","comment_is_top":false,"comment_ctime":1592787295,"is_pvip":false,"replies":[{"id":"84323","content":"感谢褒奖，今后我们都要持续学习进步。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592790274,"ip_address":"","comment_id":228677,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592787295","product_id":100029001,"comment_content":"课程每一篇文章都看了至少两遍，再整理一遍笔记，才能达到初步认识理解的程度。都是干货，对于在校生来说内容很丰富。而且从实践的角度去学习，去掉了很多不需要的枝节，比单纯的读《HTTP权威指南》这样的词典更能抓住重点和本质，喜欢老师的课程","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499143,"discussion_content":"感谢褒奖，今后我们都要持续学习进步。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592790274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227433,"user_name":"ttsunami","can_delete":false,"product_type":"c1","uid":1580976,"ip_address":"","ucode":"10D9066D81F010","user_header":"https://static001.geekbang.org/account/avatar/00/18/1f/b0/83054a91.jpg","comment_is_top":false,"comment_ctime":1592379208,"is_pvip":false,"replies":[{"id":"83813","content":"对rsa私钥的理解很正确，安全的关键在于rsa私钥的安全，这就给出了破解的突破口。<br><br>前向安全我是这么理解的，是“从现在往前、历史上”的那些通信都是安全的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592383537,"ip_address":"","comment_id":227433,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1592379208","product_id":100029001,"comment_content":"RSA的前向不安全是因为私钥参与了密钥的交换过程，密钥的完全取决于私钥是否安全。即只有私钥安全，密钥才能保持安全，“前向安全“我觉得用 “密钥安全的前提条件“更通俗易懂一些","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498637,"discussion_content":"对rsa私钥的理解很正确，安全的关键在于rsa私钥的安全，这就给出了破解的突破口。\n\n前向安全我是这么理解的，是“从现在往前、历史上”的那些通信都是安全的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592383537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1580976,"avatar":"https://static001.geekbang.org/account/avatar/00/18/1f/b0/83054a91.jpg","nickname":"ttsunami","note":"","ucode":"10D9066D81F010","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284457,"discussion_content":"想来想去 还是老师的理解对一些 哈哈😄 \n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592536879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":213907,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1588588331,"is_pvip":false,"replies":[{"id":"79266","content":"弄清楚当前主流的ECDHE，TLS也就不那么困难了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1588634013,"ip_address":"","comment_id":213907,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1588588331","product_id":100029001,"comment_content":"这两节内容太赞了，外面的资料大都只谈 TLS1.2 RSA 握手过程，这两节扩展梳理的清晰多了。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493894,"discussion_content":"弄清楚当前主流的ECDHE，TLS也就不那么困难了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588634013,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":206076,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1586784499,"is_pvip":false,"replies":[{"id":"76970","content":"great。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586815734,"ip_address":"","comment_id":206076,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586784499","product_id":100029001,"comment_content":"精彩！这一节和上一节结合起来，再加上评论区的解答，完全解惑了。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491663,"discussion_content":"great。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586815734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":184298,"user_name":"HunterYuan","can_delete":false,"product_type":"c1","uid":1015256,"ip_address":"","ucode":"F8900C33D29AA7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/d8/d7c77764.jpg","comment_is_top":false,"comment_ctime":1583285724,"is_pvip":false,"replies":[{"id":"71313","content":"在TLS标准里只用到单证书，实现签名认证。<br><br>我查了一下，这个双证书好像是特殊规定，分离了签名和加密。由于不在tls标准里，所以就不是很了解了，抱歉啊。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1583289195,"ip_address":"","comment_id":184298,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1583285724","product_id":100029001,"comment_content":"您好老师，最近遇到个问题，不太理解，望能抽出时间，指点迷津。<br>最近看资料，提到了服务器通过GMSSL，实现国密通信时，服务器必须设置双证书（签名证书和加密证书）才能正常通信。这个加密证书的作用是什么，是用来控制非对称加密算法还是对称加密算法使用的呢？<br>我的非对称加密认证是通过SM2生成私钥和证书，能够通过设置SSL_CTX_use_certificate_file函数，实现非对称加密采用SM2进行传输。但是非对称加密若采用SM4传输数据和上面提到的加密证书有关系吗，还是我客户端必须设置选择哪种秘钥套件进行传输，比如使用SSL_CTX_set_cipher_list函数设置为SM2-WITH-SMS4-SM3。<br>期待老师的回答，万分感谢。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485966,"discussion_content":"在TLS标准里只用到单证书，实现签名认证。\n\n我查了一下，这个双证书好像是特殊规定，分离了签名和加密。由于不在tls标准里，所以就不是很了解了，抱歉啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583289195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173106,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1579424997,"is_pvip":false,"replies":[{"id":"67164","content":"当然，毕竟多了加解密操作，不过比起以前来说已经有很大改善了，为了安全还是值得的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1579483012,"ip_address":"","comment_id":173106,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579424997","product_id":100029001,"comment_content":"虽然https提供了安全的保证，但是相比http来说在大请求量下性能还是比不过","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481958,"discussion_content":"当然，毕竟多了加解密操作，不过比起以前来说已经有很大改善了，为了安全还是值得的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579483012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119021,"user_name":"mark","can_delete":false,"product_type":"c1","uid":1566124,"ip_address":"","ucode":"59EE6EED0F06DD","user_header":"https://static001.geekbang.org/account/avatar/00/17/e5/ac/6c87d5ee.jpg","comment_is_top":false,"comment_ctime":1564488272,"is_pvip":false,"replies":[{"id":"43676","content":"这个涉及到算法的内部细节了，比较复杂，比如离散对数、椭圆曲线什么的，可以看看相关的资料。<br><br>其实如果不是专门做加解密的话，不需要了解太深入的细节。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564534471,"ip_address":"","comment_id":119021,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564488272","product_id":100029001,"comment_content":"有点纠结ECDHE算法，为什么这个算法可以保证pre-master是唯一的，而服务端又能准确的知道呢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460709,"discussion_content":"这个涉及到算法的内部细节了，比较复杂，比如离散对数、椭圆曲线什么的，可以看看相关的资料。\n\n其实如果不是专门做加解密的话，不需要了解太深入的细节。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564534471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118923,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1564469872,"is_pvip":false,"replies":[{"id":"43611","content":"密钥交换算法ECDHE保证了pre-master的安全性，黑客即使截获了Client Params和Server Params，也是无法算出pre-master的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564474099,"ip_address":"","comment_id":118923,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1564469872","product_id":100029001,"comment_content":"这时只交换了两条消息，客户端和服务器就拿到了四个共享信息：Client Random和Server Random、Client Params和Server Params，两边就可以各自用 ECDHE 算出“Pre-Master”，再用 HKDF 生成主密钥“Master Secret”，这样主密钥的参数都是明文的，不是暴露了吗","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460664,"discussion_content":"密钥交换算法ECDHE保证了pre-master的安全性，黑客即使截获了Client Params和Server Params，也是无法算出pre-master的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564474099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1701572,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f6/c4/e14686d4.jpg","nickname":"shk1230","note":"","ucode":"9E39279C23FF8F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553790,"discussion_content":"随机数不发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646095125,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118473,"user_name":"阿锋","can_delete":false,"product_type":"c1","uid":1127761,"ip_address":"","ucode":"7AF449ABA89242","user_header":"https://static001.geekbang.org/account/avatar/00/11/35/51/c616f95a.jpg","comment_is_top":false,"comment_ctime":1564371588,"is_pvip":false,"replies":[{"id":"43415","content":"有很多因素，不一定https比http要快，如果使用了http&#47;2，还有0-rtt，https是和http&#47;1.1性能上差不多的。<br><br>单从理论上分析，https多了加解密运算，是会慢一点，但可以用一些手段去优化，优化过的https可能会比未优化的http快。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564373278,"ip_address":"","comment_id":118473,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564371588","product_id":100029001,"comment_content":"HTTPS再怎么进行优化，相比于之前的HTTP都增加了性能损耗，但是为什么HTTPS的网页会比HTTP的要快。我是通过下面这个网页测试的。<br>https:&#47;&#47;www.httpvshttps.com&#47;","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460423,"discussion_content":"有很多因素，不一定https比http要快，如果使用了http/2，还有0-rtt，https是和http/1.1性能上差不多的。\n\n单从理论上分析，https多了加解密运算，是会慢一点，但可以用一些手段去优化，优化过的https可能会比未优化的http快。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564373278,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118396,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1564360303,"is_pvip":false,"replies":[{"id":"43406","content":"TLS里的子协议你可以理解成模块，是多个不同的部分，互相协作起作用。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564366889,"ip_address":"","comment_id":118396,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564360303","product_id":100029001,"comment_content":"老师，之前比喻的协议和协议之间嵌套关系就和快递一样。子协议之间的嵌套关系也是这样么?还是说这些子协议只是在某几个请求里有。之后就没了。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460392,"discussion_content":"TLS里的子协议你可以理解成模块，是多个不同的部分，互相协作起作用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564366889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118394,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1564360121,"is_pvip":false,"replies":[{"id":"43407","content":"不知道你说的是哪个部分，可以补充完善一下问题。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564366927,"ip_address":"","comment_id":118394,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1564360121","product_id":100029001,"comment_content":"感觉可能和Client Params和Server Params。有关系，具体不知，请老师指点","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460390,"discussion_content":"不知道你说的是哪个部分，可以补充完善一下问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564366927,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210699,"avatar":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","nickname":"-W.LI-","note":"","ucode":"3556786538664F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3365,"discussion_content":"课后习题。答案是多少","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564442072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}