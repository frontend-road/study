{"id":638406,"title":"13 | 组件运行时兼容：让组件可以灵活插拔","content":"<p>你好，我是黄俊彬。</p><p>上节课我们一起完成了Sharing项目的路由与注入改造，目前各个组件在编译时的依赖已经完全解除了。</p><p>如果说将代码编译时期的耦合解开，是迈开组件化的第一步，那么完善组件运行时的兼容就是组件化落地的重要验收标准。只有完善组件的运行时兼容，才能真正做到组件的动态插拔。</p><p>当组件可以做到灵活的动态插拔，则可以为产品的版本组合带来更加灵活的选择，更加高效地满足不同地区及用户的需求。</p><p>今天我们将一起来学习兼容性的定义、3类组件的兼容性要求以及通过Sharing项目来学习如何进行组件运行时的兼容性处理，让组件可以更灵活进行插拔。</p><h2>运行时兼容</h2><p>我们继续以Sharing项目为例，分析一下运行时的依赖具体指的是什么。</p><p>在Sharing项目中，我们不把文件组件打包到项目中，你可以参考后面这张截图。</p><p><img src=\"https://static001.geekbang.org/resource/image/61/0f/61a63e5656e42fb773b3f5yy96663e0f.jpg?wh=3080x2157\" alt=\"\"></p><p>由于前面我们已经将编译时期的耦合解开了，所以这里可以正常编译出安装包。但是当我们运行应用时，程序会出现闪退，具体的异常日志如下所示。</p><pre><code class=\"language-plain\">2022-09-15 09:45:30.940 12820-12820/com.jkb.junbin.sharing E/AndroidRuntime: FATAL EXCEPTION: main\n&nbsp; &nbsp; Process: com.jkb.junbin.sharing, PID: 12820\n&nbsp; &nbsp; java.lang.NullPointerException: Attempt to invoke virtual method 'java.lang.Class java.lang.Object.getClass()' on a null object reference\n&nbsp; &nbsp; &nbsp; &nbsp; at androidx.fragment.app.FragmentTransaction.doAddOp(FragmentTransaction.java:245)\n&nbsp; &nbsp; &nbsp; &nbsp; at androidx.fragment.app.BackStackRecord.doAddOp(BackStackRecord.java:183)\n&nbsp; &nbsp; &nbsp; &nbsp; at androidx.fragment.app.FragmentTransaction.add(FragmentTransaction.java:234)\n&nbsp; &nbsp; &nbsp; &nbsp; at androidx.fragment.app.FragmentPagerAdapter.instantiateItem(FragmentPagerAdapter.java:176)\n</code></pre><!-- [[[read_end]]] --><p>我们再来看看异常对应的具体代码，如下所示。</p><pre><code class=\"language-plain\">List&lt;Fragment&gt; fragments = new ArrayList&lt;&gt;();\nfragments.add((Fragment) ARouter.getInstance().build(\"/messageFeature/message\").navigation());\nfragments.add((Fragment) ARouter.getInstance().build(\"/fileFeature/file\").navigation());\nfragments.add((Fragment) ARouter.getInstance().build(\"/accountFeature/account\").navigation());\nSectionsPagerAdapter sectionsPagerAdapter = new SectionsPagerAdapter(this, getSupportFragmentManager(), fragments);\n</code></pre><p>通过上述代码可以看出，基座代码运行时没有做兼容性处理，这样在组件没有加载的情况下，如果代码上写了直接显示文件主页面，就会有异常。</p><p>所以，<strong>虽然我们通过路由解除了编译时的依赖，但是在运行时没有兼容处理也会异常，这个就是我们前面说的运行时的依赖。</strong></p><h2>组件兼容性定义</h2><p>那么你可能会想，组件都不加载了，功能能不受影响吗？</p><p>想要回答这个问题，我们需要先对兼容性的定义达成一致，也就是明确兼容性的要求怎么分级。</p><p>我们将组件的兼容性划分为4个等级，分别为没有兼容（C）、最低兼容（B）、基本兼容（A）、完全兼容（S）。</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/b4/4a8b97de966063eca48d1ff7aeaa4bb4.jpg?wh=3436x1645\" alt=\"\"></p><p>那么对于前面提到的3类组件，也就是业务组件、功能组件以及技术组件，它们的兼容性要求需达到什么要求呢？接下来，我们就结合各个类型的组件特点分析一下。</p><p>业务组件虽然在编译上不能直接有相互依赖，但运行上还是不可避免地会有一些功能的依赖。显然如果要做到完全兼容（S）成本会非常高，所以通常情况下<strong>对于业务组件的兼容性要求为基本兼容（A）。</strong></p><p>至于功能组件及技术组件，通常情况下相对比较稳定，不会有动态插拔的需求。但是这些组件会被上层的业务组件所引用，所以<strong>对于功能组件及技术组件的兼容性要求更多的是向上兼容</strong>，要保证对外提供的接口稳定，不能随意修改原有接口的方法签名，同时要做好异常的处理，避免出现接口不能按预期的协议返回数据。<strong>对于功能及业务组件的兼容性通常要求为基本兼容（A）或者完全兼容（S）。</strong></p><h2>Sharing项目兼容性改造</h2><p>确定了兼容性的级别，我们这就以Sharing项目为例，来看看如何对3类组件做兼容性改造，这里我分别挑选了基座组件、消息组件以及日志组件。</p><h3>基座组件改造</h3><p>基座组件划分在功能组件，但是它在运行时又承担着一个重要的工作，就是集成各个业务组件。拿一开始的运行时兼容的例子，如果没有进行兼容性处理，那么当业务组件没有集成时，基座组件可能完成不可用。</p><p>这里对于<strong>基座组件来说，兼容的方案是当业务组件被加载时就展示对应的业务组件功能，当没有加载时就屏蔽相关的业务组件的功能。</strong></p><p>接下来，我们来看看具体的兼容性代码，目前的逻辑是当路由框架没有加载到对应的业务组件页面时，则屏蔽相关的功能。</p><pre><code class=\"language-plain\">//进行非空的兼容性判断\nprivate List&lt;Fragment&gt; getFragmentList(List&lt;Integer&gt; tabTitles) {\n    List&lt;Fragment&gt; fragments = new ArrayList&lt;&gt;();\n    Fragment messageFragment = (Fragment) ARouter.getInstance().build(\"/messageFeature/message\").navigation();\n    if (messageFragment != null) {\n        fragments.add(messageFragment);\n        tabTitles.add(R.string.tab_message);\n    }\n    Fragment fileFragment = (Fragment) ARouter.getInstance().build(\"/fileFeature/file\").navigation();\n    if (fileFragment != null) {\n        fragments.add(fileFragment);\n        tabTitles.add(R.string.tab_file);\n    }\n    Fragment accountFragment = (Fragment) ARouter.getInstance().build(\"/accountFeature/account\").navigation();\n    if (accountFragment != null) {\n        fragments.add(accountFragment);\n        tabTitles.add(R.string.tab_user);\n    }\n    return fragments;\n}\n\n//页面根据数据动态展示\npublic class SectionsPagerAdapter extends FragmentPagerAdapter {\n    @Override\n    public Fragment getItem(int position) {\n         return fragments.get(position);\n    }\n    @Override\n    public int getCount() {\n        return tabTitles.size();\n    }\n}\n</code></pre><p>通过增加兼容性处理后，当我们不集成消息组件或者文件组件时，基座组件均可以正常运行，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/d4/0a73bb5d02f5533095738905329261d4.jpg?wh=4018x2497\" alt=\"\"></p><h3>消息组件改造</h3><p>对于消息组件，产品增加了一个小特性，就是在展示列表信息时，需要展示文件浏览量，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/0a/d5/0a2002ac91ee042c9b71b715c8dd32d5.jpg?wh=3080x2497\" alt=\"\"></p><p>获取文件浏览量是通过文件模块提供的实现得到的，代码是后面这样。</p><pre><code class=\"language-plain\">//接口定义\npublic interface IFileStatistics extends IProvider {\n    int getDownloadCount(String id);\n}\n\n//调用逻辑\n@Override\npublic void onBindViewHolder(final ViewHolder holder, int position) {\n    holder.tvName.setText(infoList.get(position).content);\n    holder.tvFileName.setText(infoList.get(position).fileName);\n    holder.tvSize.setText(DateUtil.getDateToString(infoList.get(position).date));\n    holder.tvCount.setText(\"文件浏览量：\" + iFileStatistics.getDownloadCount(infoList.get(position).id+\"\"));\n}\n</code></pre><p>此时，如果我们没有加载文件组件，由于存在运行时的依赖，消息组件就会有异常，日志如下所示。</p><pre><code class=\"language-plain\">&nbsp;Process: com.jkb.junbin.sharing, PID: 25093\n&nbsp; &nbsp; java.lang.NullPointerException: Attempt to invoke interface method 'int com.jkb.junbin.sharing.function.shell.interfaces.IFileStatistics.getDownloadCount()' on a null object reference\n&nbsp; &nbsp; &nbsp; &nbsp; at com.jkb.junbin.sharing.feature.message.MessageListAdapter.onBindViewHolder(MessageListAdapter.java:47)\n&nbsp; &nbsp; &nbsp; &nbsp; at com.jkb.junbin.sharing.feature.message.MessageListAdapter.onBindViewHolder(MessageListAdapter.java:20)\n</code></pre><p>对于消息组件的兼容性处理，我们当然也可以参考基座组件的方式，当文件组件没集成时，就屏蔽掉相关的展示逻辑。</p><pre><code class=\"language-plain\">@Autowired\npublic IFileStatistics iFileStatistics;\n@Override\npublic void onBindViewHolder(final ViewHolder holder, int position) {\n   if(iFileStatistics != null) {\n    holder.tvCount.setText(\"文件浏览量：\" + iFileStatistics.getDownloadCount(infoList.get(position).id+\"\"));\n}\n}\n</code></pre><p>但是如果当依赖组件不可用时，我们就需要有备选的方案，例如可以采用Mock的方式定义默认的实现，当依赖不可用就加载Default的实现。</p><p><strong>但目前ARouter框架还不支持一个接口多个实现的机制，这里假设Arouter支持通过priority属性控制多个实现的优先级，</strong>Default实现是后面这样。</p><pre><code class=\"language-plain\">@Route(path = \"/mock/IFileStatistics\", name = \"IFileStatisticsMock\",priority = 200)\npublic class IFileStatisticsMockImpl implements IFileStatistics {\n    @Override\n    public void init(Context context) {\n    }\n    @Override\n    public int getDownloadCount(String id) {\n        //通过其他的备选方案获取文件的数量。\n        return OtherService.getDownloadCount(id);\n    }\n}\n</code></pre><h3>日志组件改造</h3><p>因为技术组件通常会被多个功能或业务组件使用，所以做兼容性改造时最重要的一点就是保证向上兼容。也就是说，当内部实现有变化时，要保证好对上接口的兼容性。而且在修改扩展代码时，不能影响原有接口的功能。</p><p>对于<strong>基础组件来说，兼容方案的要求是当接口功能有修改或者变化时，不能影响原有接口提供的功能。原则上扩展需要增加新的接口，如果涉及调整原有的接口，也应该预留充分的时间给上层的组件修改，避免更新完新版本后出现编译不通过或者运行时异常。</strong></p><p>下面我们以日志组件为例做个兼容性改造练习。在之前日志组件提供的log方法，需要调用者传入username参数，代码是后面这样。</p><pre><code class=\"language-plain\">public static void log(String log, String username) {\n    //... ...\n    Log.d(tag, log);\n}\n</code></pre><p>对于调用者来说，每次都需要传递username参数，这里会有大量的重复代码，难以维护，所以我们可以选择不记录username相关信息。但此时如果我们直接修改原有的方法签名，会导致所有升级日志组件新版本的其他组件都需要修改。</p><p>这里建议你这样做：将原有废弃的方法加上@Deprecated注解，然后定义一个新的方法。</p><pre><code class=\"language-plain\">/**\n * 请使用新的日志记录方法LogUtils.log(String log)进行日志记录,\n *  本方法在XXX版本移除。\n */\n@Deprecated\npublic static void log(String log, String username) {\n    //... ...\n    Log.d(tag, log);\n}\n\npublic static void log(String log) {\n    //... ...\n    Log.d(tag, log);\n}\n</code></pre><p>当调用了标记@Deprecated注解的方法时，IDE在调用该标记废弃方法的地方会出现警告提示。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/7e/7621019203e3e8f8a6634f499f10867e.png?wh=1920x981\" alt=\"图片\"></p><p>最后，在确认已经没有其他组件对废弃方法的使用后，可以移除该方法。另外，如果技术组件也依赖了其他的组件，当依赖不可用时，代码需要做好异常的处理，并按接口协议返回抛出异常，让功能及业务组件能够按预期处理。</p><h2>总结</h2><p>今天我们一起学习了组件的兼容性定义，还通过Sharing项目了解了3类组件常用的兼容性处理方法。</p><p>对于兼容性，当存在依赖并且依赖不可用时，是没办法做到功能上完全一致的。为此，我们将兼容性分为了4个大类，分别为没有兼容（C）、最低兼容（B）、基本兼容（A）、完全兼容（S）。</p><p>业务组件兼容性的要求通常为基本兼容（A），当依赖的组件不可用时，我们可以在流程处理上将相关的功能隐藏，减少对用户使用的干扰；对于功能及技术组件，兼容性的要求通常为基本兼容（A）以及完全兼容（S），由于功能及技术组件被其他组件使用，所以可以通过扩展的方式，保证对外提供的接口稳定性。</p><p>至此，对于组件化架构的代码改造就告一段落了。从下节课开始，我们会深入组件内部，去对组件内的架构进行重构优化，敬请期待。</p><h2>思考题</h2><p>感谢你学完了今天的内容，今天的思考题是这样的：如果我们想增加一个动态的机制来控制组件的插拔，你觉得可以采用哪些方式，它们的优缺点有哪些？</p><p>欢迎你在留言区与我交流讨论，也欢迎你把它分享给你的同事或朋友，我们一起来高效、高质量交付软件！</p>","neighbors":{"left":{"article_title":"12｜依赖注入与路由：框架能够为我们解决什么问题？","id":635905},"right":{"article_title":"14｜过大类重构：如何重构动辄过万行的一个类？","id":638487}},"comments":[{"had_liked":false,"id":372713,"user_name":"williamwue","can_delete":false,"product_type":"c1","uid":1020450,"ip_address":"江苏","ucode":"C20E844117F4F6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/22/f37e0bf8.jpg","comment_is_top":false,"comment_ctime":1681461734,"is_pvip":false,"replies":[{"id":136149,"content":"这里是对的，通常功能及业务组件的兼容性要求为基本兼容（A）或者完全兼容（S）","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1681711114,"ip_address":"广东","comment_id":372713,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"原文：对于功能及业务组件的兼容性通常要求为基本兼容（A）或者完全兼容（S）。\n请问老师，这里的“业务组件”是不是应该是“技术组件”？","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":614126,"discussion_content":"这里是对的，通常功能及业务组件的兼容性要求为基本兼容（A）或者完全兼容（S）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1681711114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370626,"user_name":"ikun","can_delete":false,"product_type":"c1","uid":3537149,"ip_address":"北京","ucode":"911C7D3ECE6593","user_header":"https://static001.geekbang.org/account/avatar/00/35/f8/fd/791d0f5e.jpg","comment_is_top":false,"comment_ctime":1679036062,"is_pvip":false,"replies":[{"id":135281,"content":"Hi，ikun。\nQ1：对于单工程还是多工程还有一个重要的影响因素就是团队的规模，并没有那个就比那个好。我们在持续交付篇中会进一步介绍。\nQ2：我理解最重要的是要保持组件间的API稳定及兼容性。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1679274849,"ip_address":"广东","comment_id":370626,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"请教老师几个问题:\nQ1：组件化是单工程方案好还是多工程方案好\nQ2:对于组件化后的项目比如A、B、C、D，A是一个基础版，B、C、D在A的基础上做一些不同版本的定制化需求怎样处理对于后期的代码维护代价比较小","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609869,"discussion_content":"Hi，ikun。\nQ1：对于单工程还是多工程还有一个重要的影响因素就是团队的规模，并没有那个就比那个好。我们在持续交付篇中会进一步介绍。\nQ2：我理解最重要的是要保持组件间的API稳定及兼容性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679274849,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370114,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"北京","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1678410445,"is_pvip":false,"replies":[{"id":135042,"content":"Hi，peter。\nQ1: 实际我试了是不支持。\nQ2：通常不会。Deprecated注解告诉你标注方法要废弃，而且IDE也会有警告⚠️提示。此时建议及时使用新的方法。\nQ3：你可以查看标记了Deprecated注解方法的注释，通常会有介绍如何使用新的替代方法。\nQ4：目前没有涉及到，后续我们可以考虑，感谢反馈🤝。","user_name":"作者回复","user_name_real":"编辑","uid":1179206,"ctime":1678712590,"ip_address":"广东","comment_id":370114,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100525001,"comment_content":"请教老师几个问题：\nQ1：ARouter实际支持priority吗？\n文中“假设 Arouter 支持通过 priority 属性控制多个实现的优先级”，这里用了“假设”，实际情况是什么？\nQ2：使用Deprecated方法会有什么问题？\n写过一些不太复杂的应用，代码中经常用一些标注为Deprecated的方法，能编译、能运行，感觉不到有什么问题。那么，如果是上线运营的产品，会有什么问题吗？\nQ3：怎么找到Deprecated方法的替代方法？\n碰到Deprecated的方法时，也想用最新的方法，但有时候不知道怎么找其对应的新方法。\nQ4：实例sharing项目，会讲屏幕适配吗？","like_count":0,"discussions":[{"author":{"id":1179206,"avatar":"https://static001.geekbang.org/account/avatar/00/11/fe/46/033fccb2.jpg","nickname":"黄俊彬","note":"","ucode":"0DBE0CE4E7CFC9","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608886,"discussion_content":"Hi，peter。\nQ1: 实际我试了是不支持。\nQ2：通常不会。Deprecated注解告诉你标注方法要废弃，而且IDE也会有警告⚠️提示。此时建议及时使用新的方法。\nQ3：你可以查看标记了Deprecated注解方法的注释，通常会有介绍如何使用新的替代方法。\nQ4：目前没有涉及到，后续我们可以考虑，感谢反馈🤝。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678712590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}