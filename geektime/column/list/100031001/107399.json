{"id":107399,"title":"07 | 函数、类与运算符：Dart是如何处理信息的？","content":"<p>你好，我是陈航。</p><p>在上一篇文章中，我通过一个基本hello word的示例，带你体验了Dart的基础语法与类型变量，并与其他编程语言的特性进行对比，希望可以帮助你快速建立起对Dart的初步印象。</p><p>其实，编程语言虽然千差万别，但归根结底，它们的设计思想无非就是回答两个问题：</p><ul>\n<li>如何表示信息；</li>\n<li>如何处理信息。</li>\n</ul><p>在上一篇文章中，我们已经解决了Dart如何表示信息的问题，今天这篇文章我就着重和你分享它是如何处理信息的。</p><p>作为一门真正面向对象的编程语言，Dart将处理信息的过程抽象为了对象，以结构化的方式将功能分解，而函数、类与运算符就是抽象中最重要的手段。</p><p>接下来，我就从函数、类与运算符的角度，来进一步和你讲述Dart面向对象设计的基本思路。</p><h2>函数</h2><p>函数是一段用来独立地完成某个功能的代码。我在上一篇文章中和你提到，在Dart中，所有类型都是对象类型，函数也是对象，它的类型叫作Function。这意味着函数也可以被定义为变量，甚至可以被定义为参数传递给另一个函数。</p><p>在下面这段代码示例中，我定义了一个判断整数是否为0的isZero函数，并把它传递了给另一个printInfo函数，完成格式化打印出判断结果的功能。</p><pre><code>bool isZero(int number) { //判断整数是否为0\n  return number == 0; \n}\n\nvoid printInfo(int number,Function check) { //用check函数来判断整数是否为0\n  print(&quot;$number is Zero: ${check(number)}&quot;);\n}\n\nFunction f = isZero;\nint x = 10;\nint y = 0;\nprintInfo(x,f);  // 输出 10 is Zero: false\nprintInfo(y,f);  // 输出 0 is Zero: true\n</code></pre><!-- [[[read_end]]] --><p>如果函数体只有一行表达式，就比如上面示例中的isZero和printInfo函数，我们还可以像JavaScript语言那样用箭头函数来简化这个函数：</p><pre><code>bool isZero(int number) =&gt; number == 0;\n\nvoid printInfo(int number,Function check) =&gt; print(&quot;$number is Zero: ${check(number)}&quot;);\n</code></pre><p>有时，一个函数中可能需要传递多个参数。那么，如何让这类函数的参数声明变得更加优雅、可维护，同时降低调用者的使用成本呢？</p><p>C++与Java的做法是，提供函数的重载，即提供同名但参数不同的函数。但<strong>Dart认为重载会导致混乱，因此从设计之初就不支持重载，而是提供了可选命名参数和可选参数</strong>。</p><p>具体方式是，在声明函数时：</p><ul>\n<li>给参数增加{}，以paramName: value的方式指定调用参数，也就是可选命名参数；</li>\n<li>给参数增加[]，则意味着这些参数是可以忽略的，也就是可选参数。</li>\n</ul><p>在使用这两种方式定义函数时，我们还可以在参数未传递时设置默认值。我以一个只有两个参数的简单函数为例，来和你说明这两种方式的具体用法：</p><pre><code>//要达到可选命名参数的用法，那就在定义函数的时候给参数加上 {}\nvoid enable1Flags({bool bold, bool hidden}) =&gt; print(&quot;$bold , $hidden&quot;);\n\n//定义可选命名参数时增加默认值\nvoid enable2Flags({bool bold = true, bool hidden = false}) =&gt; print(&quot;$bold ,$hidden&quot;);\n\n//可忽略的参数在函数定义时用[]符号指定\nvoid enable3Flags(bool bold, [bool hidden]) =&gt; print(&quot;$bold ,$hidden&quot;);\n\n//定义可忽略参数时增加默认值\nvoid enable4Flags(bool bold, [bool hidden = false]) =&gt; print(&quot;$bold ,$hidden&quot;);\n\n//可选命名参数函数调用\nenable1Flags(bold: true, hidden: false); //true, false\nenable1Flags(bold: true); //true, null\nenable2Flags(bold: false); //false, false\n\n//可忽略参数函数调用\nenable3Flags(true, false); //true, false\nenable3Flags(true,); //true, null\nenable4Flags(true); //true, false\nenable4Flags(true,true); // true, true\n</code></pre><p><strong>这里我要和你强调的是，在Flutter中会大量用到可选命名参数的方式，你一定要记住它的用法。</strong></p><h2>类</h2><p>类是特定类型的数据和方法的集合，也是创建对象的模板。与其他语言一样，Dart为类概念提供了内置支持。</p><h3>类的定义及初始化</h3><p>Dart是面向对象的语言，每个对象都是一个类的实例，都继承自顶层类型Object。在Dart中，实例变量与实例方法、类变量与类方法的声明与Java类似，我就不再过多展开了。</p><p>值得一提的是，Dart中并没有public、protected、private这些关键字，我们只要在声明变量与方法时，在前面加上“_”即可作为private方法使用。如果不加“_”，则默认为public。不过，<strong>“_”的限制范围并不是类访问级别的，而是库访问级别</strong>。</p><p>接下来，我们以一个具体的案例看看<strong>Dart是如何定义和使用类的。</strong></p><p>我在Point类中，定义了两个成员变量x和y，通过构造函数语法糖进行初始化，成员函数printInfo的作用是打印它们的信息；而类变量factor，则在声明时就已经赋好了默认值0，类函数printZValue会打印出它的信息。</p><pre><code>class Point {\n  num x, y;\n  static num factor = 0;\n  //语法糖，等同于在函数体内：this.x = x;this.y = y;\n  Point(this.x,this.y);\n  void printInfo() =&gt; print('($x, $y)');\n  static void printZValue() =&gt; print('$factor');\n}\n\nvar p = new Point(100,200); // new 关键字可以省略\np.printInfo();  // 输出(100, 200);\nPoint.factor = 10;\nPoint.printZValue(); // 输出10\n</code></pre><p>有时候类的实例化需要根据参数提供多种初始化方式。除了可选命名参数和可选参数之外，Dart还提供了<strong>命名构造函数</strong>的方式，使得类的实例化过程语义更清晰。</p><p>此外，<strong>与C++类似，Dart支持初始化列表</strong>。在构造函数的函数体真正执行之前，你还有机会给实例变量赋值，甚至重定向至另一个构造函数。</p><p>如下面实例所示，Point类中有两个构造函数Point.bottom与Point，其中：Point.bottom将其成员变量的初始化重定向到了Point中，而Point则在初始化列表中为z赋上了默认值0。</p><pre><code>class Point {\n  num x, y, z;\n  Point(this.x, this.y) : z = 0; // 初始化变量z\n  Point.bottom(num x) : this(x, 0); // 重定向构造函数\n  void printInfo() =&gt; print('($x,$y,$z)');\n}\n\nvar p = Point.bottom(100);\np.printInfo(); // 输出(100,0,0)\n</code></pre><h3>复用</h3><p>在面向对象的编程语言中，将其他类的变量与方法纳入本类中进行复用的方式一般有两种：<strong>继承父类和接口实现</strong>。当然，在Dart也不例外。</p><p>在Dart中，你可以对同一个父类进行继承或接口实现：</p><ul>\n<li>继承父类意味着，子类由父类派生，会自动获取父类的成员变量和方法实现，子类可以根据需要覆写构造函数及父类方法；</li>\n<li>接口实现则意味着，子类获取到的仅仅是接口的成员变量符号和方法符号，需要重新实现成员变量，以及方法的声明和初始化，否则编译器会报错。</li>\n</ul><p>接下来，我以一个例子和你说明<strong>在Dart中继承和接口的差别</strong>。</p><p>Vector通过继承Point的方式增加了成员变量，并覆写了printInfo的实现；而Coordinate，则通过接口实现的方式，覆写了Point的变量定义及函数实现：</p><pre><code>class Point {\n  num x = 0, y = 0;\n  void printInfo() =&gt; print('($x,$y)');\n}\n\n//Vector继承自Point\nclass Vector extends Point{\n  num z = 0;\n  @override\n  void printInfo() =&gt; print('($x,$y,$z)'); //覆写了printInfo实现\n}\n\n//Coordinate是对Point的接口实现\nclass Coordinate implements Point {\n  num x = 0, y = 0; //成员变量需要重新声明\n  void printInfo() =&gt; print('($x,$y)'); //成员函数需要重新声明实现\n}\n\nvar xxx = Vector(); \nxxx\n  ..x = 1\n  ..y = 2\n  ..z = 3; //级联运算符，等同于xxx.x=1; xxx.y=2;xxx.z=3;\nxxx.printInfo(); //输出(1,2,3)\n\nvar yyy = Coordinate();\nyyy\n  ..x = 1\n  ..y = 2; //级联运算符，等同于yyy.x=1; yyy.y=2;\nyyy.printInfo(); //输出(1,2)\nprint (yyy is Point); //true\nprint(yyy is Coordinate); //true\n</code></pre><p>可以看出，子类Coordinate采用接口实现的方式，仅仅是获取到了父类Point的一个“空壳子”，只能从语义层面当成接口Point来用，但并不能复用Point的原有实现。那么，<strong>我们是否能够找到方法去复用Point的对应方法实现呢？</strong></p><p>也许你很快就想到了，我可以让Coordinate继承Point，来复用其对应的方法。但，如果Coordinate还有其他的父类，我们又该如何处理呢？</p><p>其实，<strong>除了继承和接口实现之外，Dart还提供了另一种机制来实现类的复用，即“混入”（Mixin）</strong>。混入鼓励代码重用，可以被视为具有实现方法的接口。这样一来，不仅可以解决Dart缺少对多重继承的支持问题，还能够避免由于多重继承可能导致的歧义（菱形问题）。</p><blockquote>\n<p>备注：继承歧义，也叫菱形问题，是支持多继承的编程语言中一个相当棘手的问题。当B类和C类继承自A类，而D类继承自B类和C类时会产生歧义。如果A中有一个方法在B和C中已经覆写，而D没有覆写它，那么D继承的方法的版本是B类，还是C类的呢？</p>\n</blockquote><p><strong>要使用混入，只需要with关键字即可。</strong>我们来试着改造Coordinate的实现，把类中的变量声明和函数实现全部删掉：</p><pre><code>class Coordinate with Point {\n}\n\nvar yyy = Coordinate();\nprint (yyy is Point); //true\nprint(yyy is Coordinate); //true\n</code></pre><p>可以看到，通过混入，一个类里可以以非继承的方式使用其他类中的变量与方法，效果正如你想象的那样。</p><h2>运算符</h2><p>Dart和绝大部分编程语言的运算符一样，所以你可以用熟悉的方式去执行程序代码运算。不过，<strong>Dart多了几个额外的运算符，用于简化处理变量实例缺失（即null）的情况</strong>。</p><ul>\n<li><strong>?.</strong>运算符：假设Point类有printInfo()方法，p是Point的一个可能为null的实例。那么，p调用成员方法的安全代码，可以简化为p?.printInfo() ，表示p为null的时候跳过，避免抛出异常。</li>\n<li><strong>??=</strong> 运算符：如果a为null，则给a赋值value，否则跳过。这种用默认值兜底的赋值语句在Dart中我们可以用a ??= value表示。</li>\n<li><strong>??</strong>运算符：如果a不为null，返回a的值，否则返回b。在Java或者C++中，我们需要通过三元表达式(a != null)? a : b来实现这种情况。而在Dart中，这类代码可以简化为a ?? b。</li>\n</ul><p><strong>在Dart中，一切都是对象，就连运算符也是对象成员函数的一部分。</strong></p><p>对于系统的运算符，一般情况下只支持基本数据类型和标准库中提供的类型。而对于用户自定义的类，如果想支持基本操作，比如比较大小、相加相减等，则需要用户自己来定义关于这个运算符的具体实现。</p><p><strong>Dart提供了类似C++的运算符覆写机制</strong>，使得我们不仅可以覆写方法，还可以覆写或者自定义运算符。</p><p>接下来，我们一起看一个Vector类中自定义“+”运算符和覆写\"==\"运算符的例子：</p><pre><code>class Vector {\n  num x, y;\n  Vector(this.x, this.y);\n  // 自定义相加运算符，实现向量相加\n  Vector operator +(Vector v) =&gt;  Vector(x + v.x, y + v.y);\n  // 覆写相等运算符，判断向量相等\n  bool operator == (dynamic v) =&gt; x == v.x &amp;&amp; y == v.y;\n}\n\nfinal x = Vector(3, 3);\nfinal y = Vector(2, 2);\nfinal z = Vector(1, 1);\nprint(x == (y + z)); //  输出true\n\n</code></pre><p>operator是Dart的关键字，与运算符一起使用，表示一个类成员运算符函数。在理解时，我们应该把operator和运算符作为整体，看作是一个成员函数名。</p><h2>总结</h2><p>函数、类与运算符是Dart处理信息的抽象手段。从今天的学习中你可以发现，Dart面向对象的设计吸纳了其他编程语言的优点，表达和处理信息的方式既简单又简洁，但又不失强大。</p><p>通过这两篇文章的内容，相信你已经了解了Dart的基本设计思路，熟悉了在Flutter开发中常用的语法特性，也已经具备了快速上手实践的能力。</p><p>接下来，我们简单回顾一下今天的内容，以便加深记忆与理解。</p><p>首先，我们认识了函数。函数也是对象，可以被定义为变量，或者参数。Dart不支持函数重载，但提供了可选命名参数和可选参数的方式，从而解决了函数声明时需要传递多个参数的可维护性。</p><p>然后，我带你学习了类。类提供了数据和函数的抽象复用能力，可以通过继承（父类继承，接口实现）和非继承（Mixin）方式实现复用。在类的内部，关于成员变量，Dart提供了包括命名构造函数和初始化列表在内的两种初始化方式。</p><p>最后，需要注意的是，运算符也是对象成员函数的一部分，可以覆写或者自定义。</p><h2>思考题</h2><p>最后，请你思考以下两个问题。</p><ol>\n<li>你是怎样理解父类继承，接口实现和混入的？我们应该在什么场景下使用它们？</li>\n<li>在父类继承的场景中，父类子类之间的构造函数执行顺序是怎样的？如果父类有多个构造函数，子类也有多个构造函数，如何从代码层面确保父类子类之间构造函数的正确调用？</li>\n</ol><pre><code>class Point {\n  num x, y;\n  Point() : this.make(0,0);\n  Point.left(x) : this.make(x,0);\n  Point.right(y) : this.make(0,y);\n  Point.make(this.x, this.y);\n  void printInfo() =&gt; print('($x,$y)');\n}\n\nclass Vector extends Point{\n  num z = 0;\n/*5个构造函数\n  Vector\n  Vector.left;\n  Vector.middle\n  Vector.right\n  Vector.make\n*/\n  @override\n  void printInfo() =&gt; print('($x,$y,$z)'); //覆写了printInfo实现\n}\n</code></pre><p>欢迎将你的答案留言告诉我，我们一起讨论。感谢你的收听，也欢迎你把这篇文章分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":113343,"user_name":"Young","can_delete":false,"product_type":"c1","uid":1334725,"ip_address":"","ucode":"646F0A2D28EFEA","user_header":"https://static001.geekbang.org/account/avatar/00/14/5d/c5/2f359dc3.jpg","comment_is_top":false,"comment_ctime":1562980570,"is_pvip":false,"replies":[{"id":"41336","content":"厉害了","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563054217,"ip_address":"","comment_id":113343,"utype":1}],"discussion_count":5,"race_medal":0,"score":"362340233434","product_id":100031001,"comment_content":"1.一般来讲，单继承，多实现，混入是多继承<br>A.继承是子类需要复用父类的方法实现<br>B.实现接口是复用接口的参数，返回值，和方法名，但不复用方法的实现，在Dart中实现抽象类 更像在java中实现用interface修饰的接口<br>C.混入是多继承，当被混入的类有多个同名方法时，调用子类的该方法时，会调用with声明的最后一个拥有该方法的类中的该方法，同时混入中的父类不能继承<br>","like_count":85,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458176,"discussion_content":"厉害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563054217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1048789,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM6Hj1lqJCmTpLMomONpG7jWA1ubqia12dyOcYoG1y2tEgRlicS88KqB3JfBenuluvtlNLM2DVR0lcoQ/132","nickname":"yabin","note":"","ucode":"65B0F25E30CAF1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2163,"discussion_content":"混入中的父类不能继承?怎么讲","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1563323848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1117405,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLt9GVR0GqQia3Ufk71VR73LK4N0eOgu6fn9V25RzNmA6gkvjlNycSskialu6D5dqPNicgFTCaFJGdw/132","nickname":"empireMind","note":"","ucode":"F2B4FFFDC009F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1972,"discussion_content":"混入不是多继承，是按照混入的顺序构造了一条继承链，本质上还是单继承。这个帖子讲的很详细 https://juejin.im/post/5bb204d3e51d450e4f38e2f6","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1563157647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1456728,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3a/58/494a6aca.jpg","nickname":"Paradise","note":"","ucode":"BF960407E87878","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1117405,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLt9GVR0GqQia3Ufk71VR73LK4N0eOgu6fn9V25RzNmA6gkvjlNycSskialu6D5dqPNicgFTCaFJGdw/132","nickname":"empireMind","note":"","ucode":"F2B4FFFDC009F7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2176,"discussion_content":"我也看了，讲的很好，很清楚，主要突出集成链...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563330639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1972,"ip_address":""},"score":2176,"extra":""},{"author":{"id":1256945,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2d/f1/d00c3a17.jpg","nickname":"凯南哥","note":"","ucode":"4057B0C4001F48","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1117405,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLt9GVR0GqQia3Ufk71VR73LK4N0eOgu6fn9V25RzNmA6gkvjlNycSskialu6D5dqPNicgFTCaFJGdw/132","nickname":"empireMind","note":"","ucode":"F2B4FFFDC009F7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263190,"discussion_content":"这个帖子写得不错 谢谢分享","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589185823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":1972,"ip_address":""},"score":263190,"extra":""}]}]},{"had_liked":false,"id":212927,"user_name":"Geek_183f9e","can_delete":false,"product_type":"c1","uid":1576826,"ip_address":"","ucode":"70405BB513AA9E","user_header":"https://static001.geekbang.org/account/avatar/00/18/0f/7a/420b41cd.jpg","comment_is_top":false,"comment_ctime":1588238781,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"143322159549","product_id":100031001,"comment_content":"讲真，可选参数部分我一开始没参透，其实应该这么讲。参数分为“必选”和“可选”，当两者同时存在时，<br>必选在前，可选在后。可选参数又分为两种：第一种是“可选命名参数”，使用{}；第二种是“可选位置参数”，使用[]。两者区别在于调用函数传参时：前者须署名参数名，但是调用顺序可变（但是必须在必选参数后面）。后者不必署名参数名，但是位置不可变。<br>","like_count":34},{"had_liked":false,"id":113570,"user_name":"宋锡珺","can_delete":false,"product_type":"c1","uid":1397823,"ip_address":"","ucode":"9C3700F9A3EF77","user_header":"https://static001.geekbang.org/account/avatar/00/15/54/3f/fdbdffe0.jpg","comment_is_top":false,"comment_ctime":1563081544,"is_pvip":true,"replies":[{"id":"41544","content":"厉害了","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563212118,"ip_address":"","comment_id":113570,"utype":1}],"discussion_count":1,"race_medal":0,"score":"83167460168","product_id":100031001,"comment_content":"1.<br>父类继承：和java类似，继承了父类的实例变量和各种方法。但是不能用一个普通方法重写getter。<br>抽象类：抽象类不能实例化，会报出AbstractClassInstantiationError错误。<br>接口：成员变量，成员函数需要重新声明实现。和java不一样的是，没有接口声明，可以通过抽象类来描述接口。<br>mixin:使一个类有多个父类。例如：在Flutter中常见的我们需要继承state。如果需要页面保持状态，我们还需要AutomaticKeepAliveClientMixin来保持页面状态。这时就需要通过with来使用mixin.<br>2.<br>子类构造函数调用父类非命名，无参构造函数。先父后子。<br>1.初始化列表<br>2.父类的无参构造函数<br>3当前类的无参构造函数<br>通过named constructors可以使父类有多个构造函数，但是子类是不能继承父类的构造函数的。如果使用父类的构造函数，子类需要实现父类的构造函数。","like_count":20,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458285,"discussion_content":"厉害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563212118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113596,"user_name":"Qilin Lou","can_delete":false,"product_type":"c1","uid":1031075,"ip_address":"","ucode":"29AD43329E7404","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bb/a3/af469d27.jpg","comment_is_top":false,"comment_ctime":1563090846,"is_pvip":false,"replies":[{"id":"41545","content":"因为operator==是继承自Object类，这个类的参数声明就是dynamic ","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563212246,"ip_address":"","comment_id":113596,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53102698398","product_id":100031001,"comment_content":"一个小问题，在覆写相等运算符时为何需要传入dynamic变量，而不能传入Vector呢？<br>bool operator==(dynamic v) =&gt; x == v.x &amp;&amp; y == v.y;<br>bool operator==(Vector v) =&gt; x == v.x &amp;&amp; y == v.y; &#47;&#47; 报错","like_count":13,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458298,"discussion_content":"因为operator==是继承自Object类，这个类的参数声明就是dynamic ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563212246,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118421,"user_name":"Geek_869250","can_delete":false,"product_type":"c1","uid":1457445,"ip_address":"","ucode":"292980DF23D5A0","user_header":"http://thirdwx.qlogo.cn/mmopen/h0KAdRFKjCOSLRjzictvlaHOxsEiaWMSqcO68oiaUqffzyYlEKrDRvicHociabv72HNuR2VdECr8mVFIRiayM0Dd7bNDnaiceicHysF7/132","comment_is_top":false,"comment_ctime":1564363151,"is_pvip":false,"replies":[{"id":"43505","content":"没啥不同。Mixins 的问题在于太过于灵活，与OOP的设计思路完全相反，小范围用问题不大，但如果你的类中引用了多个mixin，必须非常清楚每个mixin都干了什么，你使用的方法来自于哪个mixin，否则有代码被覆盖的风险。<br>","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1564423415,"ip_address":"","comment_id":118421,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31629134223","product_id":100031001,"comment_content":"mixin和react有什么不同，react已经不使用了","like_count":8,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460401,"discussion_content":"没啥不同。Mixins 的问题在于太过于灵活，与OOP的设计思路完全相反，小范围用问题不大，但如果你的类中引用了多个mixin，必须非常清楚每个mixin都干了什么，你使用的方法来自于哪个mixin，否则有代码被覆盖的风险。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564423415,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1457445,"avatar":"http://thirdwx.qlogo.cn/mmopen/h0KAdRFKjCOSLRjzictvlaHOxsEiaWMSqcO68oiaUqffzyYlEKrDRvicHociabv72HNuR2VdECr8mVFIRiayM0Dd7bNDnaiceicHysF7/132","nickname":"Geek_869250","note":"","ucode":"292980DF23D5A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4189,"discussion_content":"谢谢老师解惑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565220495,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113663,"user_name":"路灯客栈","can_delete":false,"product_type":"c1","uid":1285214,"ip_address":"","ucode":"EFFEA07F11569B","user_header":"https://static001.geekbang.org/account/avatar/00/13/9c/5e/a23c8962.jpg","comment_is_top":false,"comment_ctime":1563110053,"is_pvip":false,"replies":[{"id":"41546","content":":用于构造函数初始化其内部属性或做一些前置检查；<br>=&gt;是用于普通单行函数的语法糖","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563212396,"ip_address":"","comment_id":113663,"utype":1}],"discussion_count":3,"race_medal":0,"score":"18742979237","product_id":100031001,"comment_content":"小白问下<br>Point(this.x, this.y) : z = 0;<br>这里的‘ : ’的用法解释？ 和‘=&gt;’有什么区别？","like_count":4,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458337,"discussion_content":":用于构造函数初始化其内部属性或做一些前置检查；\n=&amp;gt;是用于普通单行函数的语法糖","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563212396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1237782,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e3/16/550d2145.jpg","nickname":"咸平四年望帝遗心","note":"","ucode":"E8B0C145E9F40E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2023,"discussion_content":"两种都是固定写法，前者指定默认值，后者是在传入的函数体中只有一句代码时的简易写法。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563184038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1174047,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ea/1f/ae6f7779.jpg","nickname":"itaqhi","note":"","ucode":"D1EBA124C80DEE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1985,"discussion_content":"“:”  在构造函数中后跟初始化列表，这里是将实例变量 z 初始化为 0。\n“=>”  是当函数只有一个表达式时的简化写法，会自动推断表达式的返回值。构造函数没有返回值，所以构造函数上是不能用“=>”的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563161699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114445,"user_name":"昨夜星辰","can_delete":false,"product_type":"c1","uid":1599619,"ip_address":"","ucode":"C83E678B865D02","user_header":"","comment_is_top":false,"comment_ctime":1563318845,"is_pvip":false,"replies":[{"id":"41887","content":"对调用者调用方式不同，一个需要显式声明参数名，参数位置无所谓；一个不用，但需要按照顺序摆放参数。","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563380757,"ip_address":"","comment_id":114445,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14448220733","product_id":100031001,"comment_content":"可选命名参数和可忽略参数有什么区别？","like_count":3,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458667,"discussion_content":"对调用者调用方式不同，一个需要显式声明参数名，参数位置无所谓；一个不用，但需要按照顺序摆放参数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563380757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1456728,"avatar":"https://static001.geekbang.org/account/avatar/00/16/3a/58/494a6aca.jpg","nickname":"Paradise","note":"","ucode":"BF960407E87878","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2177,"discussion_content":"1、name: value   2、value","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563330744,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232774,"user_name":"空白昵称","can_delete":false,"product_type":"c1","uid":1433815,"ip_address":"","ucode":"91F50CA25102AB","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/d7/744bd8c3.jpg","comment_is_top":false,"comment_ctime":1594114671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10184049263","product_id":100031001,"comment_content":"Function作为函数类型使用，但是丢失了函数的具体类型内容。<br>所以一般采用 typedef 定义一个Function类型？<br>相较而言，Swfit的闭包更具表达。","like_count":3},{"had_liked":false,"id":132285,"user_name":"颜为晨","can_delete":false,"product_type":"c1","uid":1596031,"ip_address":"","ucode":"8109E7B392684D","user_header":"https://static001.geekbang.org/account/avatar/00/18/5a/7f/c50d520e.jpg","comment_is_top":false,"comment_ctime":1568078345,"is_pvip":false,"replies":[{"id":"51214","content":"可以","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1568561700,"ip_address":"","comment_id":132285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10158012937","product_id":100031001,"comment_content":"可选命名参数是不是可以理解成 map？","like_count":3,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466857,"discussion_content":"可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568561700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279522,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1783603,"ip_address":"","ucode":"25439BAAEEF8FA","user_header":"https://static001.geekbang.org/account/avatar/00/1b/37/33/7425bd10.jpg","comment_is_top":false,"comment_ctime":1613811668,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5908778964","product_id":100031001,"comment_content":"没有发现有回答这个课后题的，按照自己的理解写了一下，不知道对不对<br><br>Vector(): this.make(0, 0, 0);<br>Vector.left(x): this.make(x, 0, 0); <br>Vector.middle(z): this.make(0, 0, z);<br>Vector.right(y): this.make(0, y, 0);<br>Vector.make(x, y, this.z): super.make(x, y);","like_count":1,"discussions":[{"author":{"id":1138590,"avatar":"","nickname":"啃","note":"","ucode":"A4A4A72A0F8684","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569764,"discussion_content":"是super.make，不应该用this吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651547779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307173,"user_name":"杨鹏","can_delete":false,"product_type":"c1","uid":2660078,"ip_address":"","ucode":"3582EEC0BFC2E0","user_header":"","comment_is_top":false,"comment_ctime":1628922244,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628922244","product_id":100031001,"comment_content":"1.继承就是复用父类的方法和变量<br>2.接口实现就是用其名而未用其实<br>3.混入即解决多继承的问题，比java更灵活的操作","like_count":0},{"had_liked":false,"id":302064,"user_name":"路口台灯","can_delete":false,"product_type":"c1","uid":1332347,"ip_address":"","ucode":"A76EB9118D5482","user_header":"https://static001.geekbang.org/account/avatar/00/14/54/7b/1b85c629.jpg","comment_is_top":false,"comment_ctime":1626059949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626059949","product_id":100031001,"comment_content":"1. 完全不允许重载，一个类中不允许存在方法名相同的多个函数，不论是通过继承、实现、还是混入。<br>2. 混入可以理解为多继承，可以复用成员变量和方法实现。<br>3. 被混入类的父类必须是Object类型，这解决了普通多继承的菱形问题，即被混入的类不能继承其他类，但可以实现其他接口。<br>4. 成员变量和方法复用冲突时，以复用机制的最后一个实现为准。","like_count":1},{"had_liked":false,"id":236514,"user_name":"MINGO","can_delete":false,"product_type":"c1","uid":1427501,"ip_address":"","ucode":"D1651EB000BF4B","user_header":"https://static001.geekbang.org/account/avatar/00/15/c8/2d/ecd27d8a.jpg","comment_is_top":false,"comment_ctime":1595432682,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595432682","product_id":100031001,"comment_content":"implements有啥意义  不理解","like_count":0},{"had_liked":false,"id":235750,"user_name":"伊利丹怒风","can_delete":false,"product_type":"c1","uid":1042222,"ip_address":"","ucode":"D4C3DC84E7020A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e7/2e/f317f6ad.jpg","comment_is_top":false,"comment_ctime":1595169038,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595169038","product_id":100031001,"comment_content":"这一节感觉浓缩了好多内容，都是Dart的特色...Dart感觉完全是为了前端开发尤其是widget场景，把各种语言的特性精挑细选了一下","like_count":0},{"had_liked":false,"id":229605,"user_name":"Geek_d7ea11","can_delete":false,"product_type":"c1","uid":1603717,"ip_address":"","ucode":"0FEF691CF21C79","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIBC94guaFqiaSlFhyibfo6kySHPqJCfQKzzz8JwumEMGiaVDfXJTbFAMK4vS6t9UJib4S8icmtsd7NAsg/132","comment_is_top":false,"comment_ctime":1593072684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593072684","product_id":100031001,"comment_content":"感觉叫可选命名参数  和可选位置参数  更加贴切","like_count":1},{"had_liked":false,"id":216694,"user_name":"dstweihao","can_delete":false,"product_type":"c1","uid":1089469,"ip_address":"","ucode":"6542E27AC85C7A","user_header":"https://static001.geekbang.org/account/avatar/00/10/9f/bd/48e8b958.jpg","comment_is_top":false,"comment_ctime":1589329378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589329378","product_id":100031001,"comment_content":"慢慢看，慢慢学习，边学边敲才有用的。","like_count":0},{"had_liked":false,"id":204069,"user_name":"Harris","can_delete":false,"product_type":"c1","uid":1211103,"ip_address":"","ucode":"120C7108EB94CA","user_header":"https://static001.geekbang.org/account/avatar/00/12/7a/df/5cd2b06d.jpg","comment_is_top":false,"comment_ctime":1586328657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586328657","product_id":100031001,"comment_content":"class A with B implements C {<br>  &#47;&#47;&#47; ...<br>}<br><br>class A extends C with B {<br>  &#47;&#47;&#47; ...<br>}<br>注意with语句必须写在implements的前面，extends的后面","like_count":0},{"had_liked":false,"id":190975,"user_name":"鸡蛋石头","can_delete":false,"product_type":"c1","uid":1229450,"ip_address":"","ucode":"61801769E485C8","user_header":"https://static001.geekbang.org/account/avatar/00/12/c2/8a/aed13671.jpg","comment_is_top":false,"comment_ctime":1584715256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584715256","product_id":100031001,"comment_content":"“_”库访问级别是什么意思？不是文件访问级别吗？","like_count":0},{"had_liked":false,"id":185772,"user_name":"Nirvana","can_delete":false,"product_type":"c1","uid":1134644,"ip_address":"","ucode":"1BFF3C1F968AAA","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/34/4c9ae8ed.jpg","comment_is_top":false,"comment_ctime":1583677592,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1583677592","product_id":100031001,"comment_content":"第一个例子是不是应该强调下，这些是写在main函数里面的，否则printInfo(x,f)在编辑器里面会报错啊。","like_count":0,"discussions":[{"author":{"id":3042959,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/6e/8f/387fe23e.jpg","nickname":"Batman","note":"","ucode":"08BD23FCC230AE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578326,"discussion_content":"谢老哥，一直报错，看你这个解决了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656660530,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179103,"user_name":"是八月","can_delete":false,"product_type":"c1","uid":1514191,"ip_address":"","ucode":"B0A9645B8E2292","user_header":"https://static001.geekbang.org/account/avatar/00/17/1a/cf/00e23ba8.jpg","comment_is_top":false,"comment_ctime":1581915893,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1581915893","product_id":100031001,"comment_content":"看到一个段websocket的代码，匿名函数看不明白<br>_socket.onClose.listen((_) =&gt; print(&#39;Websocket closed!&#39;));<br>(_)里面的下划线 是什么作用，什么意思？","like_count":0,"discussions":[{"author":{"id":1044793,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f1/39/768503ad.jpg","nickname":"钱洋彪","note":"","ucode":"84FBB0E48FD885","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":209464,"discussion_content":"这个function的参数，有些语言里若参数在函数体里不用，可以使用_代替参数，比如swift，js好像也是。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584631989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162617,"user_name":"加温后的啤酒","can_delete":false,"product_type":"c1","uid":1344488,"ip_address":"","ucode":"5F30978CDB1606","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/e8/f726c635.jpg","comment_is_top":false,"comment_ctime":1576566818,"is_pvip":false,"replies":[{"id":"63409","content":"“子类可以根据需要覆写构造函数”这里指的是子类可以通过子类自己的构造函数改变父类的变量初始化方式","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1577440543,"ip_address":"","comment_id":162617,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1576566818","product_id":100031001,"comment_content":"老师，你文中说“子类可以根据需要覆写构造函数及父类方法”，这句话用在大多数编程语言比如java中是对的，但是用在Dart中是不对的吧。Dart构造函数的特点是子类不会继承父类的构造函数，Dart官方文档里也有提到“Subclasses don’t inherit constructors from their superclass”，所以也就谈不上覆写构造函数。老师，我的理解对吗？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478104,"discussion_content":"“子类可以根据需要覆写构造函数”这里指的是子类可以通过子类自己的构造函数改变父类的变量初始化方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577440543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1783603,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/37/33/7425bd10.jpg","nickname":"Jason","note":"","ucode":"25439BAAEEF8FA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":255987,"discussion_content":"如果子类函数不实现父类的构造函数，子类是不能调用父类构造函数吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588432822,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161851,"user_name":"sherry慈","can_delete":false,"product_type":"c1","uid":1567269,"ip_address":"","ucode":"386687699AFBD7","user_header":"https://static001.geekbang.org/account/avatar/00/17/ea/25/9fda39a1.jpg","comment_is_top":false,"comment_ctime":1576379685,"is_pvip":false,"replies":[{"id":"63403","content":"当然可以呀","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1577439026,"ip_address":"","comment_id":161851,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1576379685","product_id":100031001,"comment_content":"问老师一个问题，可选命名参数可以和必传参数共存吗","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477882,"discussion_content":"当然可以呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577439026,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1344488,"avatar":"https://static001.geekbang.org/account/avatar/00/14/83/e8/f726c635.jpg","nickname":"加温后的啤酒","note":"","ucode":"5F30978CDB1606","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":85744,"discussion_content":"肯定是可以的。这个自己敲下代码试一试就晓得了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576571451,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150933,"user_name":"Captain","can_delete":false,"product_type":"c1","uid":1595885,"ip_address":"","ucode":"57B4E60ABA60AF","user_header":"https://static001.geekbang.org/account/avatar/00/18/59/ed/15465917.jpg","comment_is_top":false,"comment_ctime":1573631409,"is_pvip":false,"replies":[{"id":"58806","content":"命名构造函数就是给构造函数起了个名字，使用&quot;类名.构造函数名&quot;的方式初始化实例；<br>初始化列表是在构造函数体外，对变量进行批量赋值的机制，不仅简洁，代码执行性能也更优。","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1574143356,"ip_address":"","comment_id":150933,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1573631409","product_id":100031001,"comment_content":"就像，具体什么是命名构造函数，好处是什么？什么是初始化列表？是指什么列表呢？好处是什么？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474316,"discussion_content":"命名构造函数就是给构造函数起了个名字，使用&amp;quot;类名.构造函数名&amp;quot;的方式初始化实例；\n初始化列表是在构造函数体外，对变量进行批量赋值的机制，不仅简洁，代码执行性能也更优。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574143356,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141219,"user_name":"菜头","can_delete":false,"product_type":"c1","uid":1456964,"ip_address":"","ucode":"C5E95519F9EA21","user_header":"https://static001.geekbang.org/account/avatar/00/16/3b/44/dd534c9b.jpg","comment_is_top":false,"comment_ctime":1571129984,"is_pvip":false,"replies":[{"id":"54849","content":"Point.bottom就是例子啊","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1571291030,"ip_address":"","comment_id":141219,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571129984","product_id":100031001,"comment_content":"命名构造函数？有例子吗","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470699,"discussion_content":"Point.bottom就是例子啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571291030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":137660,"user_name":"微笑美男😄","can_delete":false,"product_type":"c1","uid":1010774,"ip_address":"","ucode":"E188923723703B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/56/07920099.jpg","comment_is_top":false,"comment_ctime":1569814127,"is_pvip":false,"replies":[{"id":"53524","content":"课程的全部示例代码参考：https:&#47;&#47;github.com&#47;cyndibaby905&#47;flutter_core_demo<br>","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1570519010,"ip_address":"","comment_id":137660,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1569814127","product_id":100031001,"comment_content":"有课件没 我是新手,按照课程上的示例代码写了以后,总是报错,运行不起来","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":469198,"discussion_content":"课程的全部示例代码参考：https://github.com/cyndibaby905/flutter_core_demo\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1570519010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126540,"user_name":"Zxt","can_delete":false,"product_type":"c1","uid":1623736,"ip_address":"","ucode":"F5AE69082E8324","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJV94SB9GY6ErM23QZ3jbYY7eIqbhoWHIMR2uusibj2Jib0CvAj64MLibkjwcCN6tOdgfW6dfNPpuhw/132","comment_is_top":false,"comment_ctime":1566403479,"is_pvip":false,"replies":[{"id":"47636","content":"Dart 1.13版本已经可以支持使用继承Object以外的类了","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566890590,"ip_address":"","comment_id":126540,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566403479","product_id":100031001,"comment_content":"为什么作为mixin的类 只能继承自object呢？也是为了防止多继承出现的菱形问题么？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464044,"discussion_content":"Dart 1.13版本已经可以支持使用继承Object以外的类了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566890590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126376,"user_name":"Zxt","can_delete":false,"product_type":"c1","uid":1623736,"ip_address":"","ucode":"F5AE69082E8324","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJV94SB9GY6ErM23QZ3jbYY7eIqbhoWHIMR2uusibj2Jib0CvAj64MLibkjwcCN6tOdgfW6dfNPpuhw/132","comment_is_top":false,"comment_ctime":1566375127,"is_pvip":false,"replies":[{"id":"46673","content":"Mixin目前的实现是以完全忽略构造函数，忽略构造函数调用链的方式实现的，因此只支持隐式的构造函数。一旦放开mixin的构造函数支持，Dart势必需要支持一套新的关键字语法，来支持Mixin类继承链上的构造转发，代价太大。","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566378358,"ip_address":"","comment_id":126376,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566375127","product_id":100031001,"comment_content":"一个声明了构造函数的类  无法被别的类混入了  这个是为什么呢？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463961,"discussion_content":"Mixin目前的实现是以完全忽略构造函数，忽略构造函数调用链的方式实现的，因此只支持隐式的构造函数。一旦放开mixin的构造函数支持，Dart势必需要支持一套新的关键字语法，来支持Mixin类继承链上的构造转发，代价太大。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566378358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126370,"user_name":"Zxt","can_delete":false,"product_type":"c1","uid":1623736,"ip_address":"","ucode":"F5AE69082E8324","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJV94SB9GY6ErM23QZ3jbYY7eIqbhoWHIMR2uusibj2Jib0CvAj64MLibkjwcCN6tOdgfW6dfNPpuhw/132","comment_is_top":false,"comment_ctime":1566374545,"is_pvip":false,"replies":[{"id":"46674","content":"可以呀","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1566378527,"ip_address":"","comment_id":126370,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566374545","product_id":100031001,"comment_content":"请教个问题，一个类可以同时混入多个类嘛？","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463956,"discussion_content":"可以呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566378527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118252,"user_name":"mj","can_delete":false,"product_type":"c1","uid":1067352,"ip_address":"","ucode":"27FCE15F8B0BEA","user_header":"https://static001.geekbang.org/account/avatar/00/10/49/58/15625db4.jpg","comment_is_top":false,"comment_ctime":1564302539,"is_pvip":false,"replies":[{"id":"43325","content":"package","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1564335562,"ip_address":"","comment_id":118252,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1564302539","product_id":100031001,"comment_content":"如果不加“_”，则默认为 public。不过，“_”的限制范围并不是类访问级别的，而是库访问级别<br><br>请问库访问级别是什么意思","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460322,"discussion_content":"package","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564335562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1665501,"avatar":"https://static001.geekbang.org/account/avatar/00/19/69/dd/85368669.jpg","nickname":"🐳冉🌊","note":"","ucode":"4F4F2750C8CDAA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578777,"discussion_content":"就是文件级别 一个人件在dart里就是一个库\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657007896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116425,"user_name":"云中大鹏","can_delete":false,"product_type":"c1","uid":1378521,"ip_address":"","ucode":"951C7C8DACB597","user_header":"https://static001.geekbang.org/account/avatar/00/15/08/d9/8d1759d1.jpg","comment_is_top":false,"comment_ctime":1563848945,"is_pvip":false,"replies":[{"id":"42590","content":"没有（但曾经有过）","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563856215,"ip_address":"","comment_id":116425,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563848945","product_id":100031001,"comment_content":"dart中有没有的 == 与===的区别","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459534,"discussion_content":"没有（但曾经有过）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563856215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":114096,"user_name":"JakePrim","can_delete":false,"product_type":"c1","uid":1151981,"ip_address":"","ucode":"ACA227B7610D84","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/ed/9cc44242.jpg","comment_is_top":false,"comment_ctime":1563237918,"is_pvip":false,"replies":[{"id":"41875","content":"混入，以非继承的方式复用别的类的代码。<br><br>恰恰相反哦，Flutter很多地方都用到了混入。","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563379734,"ip_address":"","comment_id":114096,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563237918","product_id":100031001,"comment_content":"继承和接口实现，与java类似，但是混入就不太理解了，什么场景下会用到呢？flutter好像也用不到这么复杂的逻辑吧","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458513,"discussion_content":"混入，以非继承的方式复用别的类的代码。\n\n恰恰相反哦，Flutter很多地方都用到了混入。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563379734,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113372,"user_name":"Mkl","can_delete":false,"product_type":"c1","uid":1594721,"ip_address":"","ucode":"1C8BF2DD5F788F","user_header":"https://static001.geekbang.org/account/avatar/00/18/55/61/ac1729d3.jpg","comment_is_top":false,"comment_ctime":1562987004,"is_pvip":false,"replies":[{"id":"41312","content":"是“_”<br>感谢提醒，我们改一下<br>","user_name":"作者回复","user_name_real":"土豆盒子","uid":"1088582","ctime":1563009193,"ip_address":"","comment_id":113372,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1562987004","product_id":100031001,"comment_content":"老师您好，请问“我们只要在声明变量与方法时，在前面加上“”即可作为 private 方法使用。如果不加“”，则默认为 public。”这里边的双引号中的内容是什么，看不到呀😳","like_count":0,"discussions":[{"author":{"id":1088582,"avatar":"https://static001.geekbang.org/account/avatar/00/10/9c/46/0b29b188.jpg","nickname":"土豆盒子","note":"","ucode":"A910F88CAC0A87","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458189,"discussion_content":"是“_”\n感谢提醒，我们改一下\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563009193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}