{"id":496703,"title":"11｜作为工程化方法的TDD：更低的成本与更高的效能","content":"<p>你好，我是徐昊。在了解了测试驱动开发中的“测试”，和测试驱动开发中的“驱动”之后。让我们重新复盘一下作为工程化方法的TDD。</p><h2>TDD的流程</h2><p>在<a href=\"https://time.geekbang.org/column/article/494207?utm_term=zeus7J9ZC&utm_source=pcweb&utm_medium=geektime&utm_campaign=100109401&utm_content=pcweb\">第一讲</a>中，我曾给出了一张任务分解法的流程图。用以在TDD演示过程中，帮助我们把握整体流程的走向。由于是在课程刚开始给出的，很多内容我们尚未澄清，无法给出更细致的描绘，只能看做对于TDD流程大略的描述。</p><p>那么在学习了什么是TDD中的测试，和什么是TDD中的驱动之后，我们将会怎么描述TDD的流程呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/a5/9c/a5a74d26cf9581064420d81cff7da89c.jpg?wh=2284x1285\" alt=\"\"></p><p>如上图所示，使用TDD的核心流程为：</p><ul>\n<li>首先将需求分解为<strong>功能点</strong>，也就是将需求转化为一系列<strong>可验证的里程碑点</strong>；</li>\n<li>如果已经存在架构或架构愿景，则依据架构中定义的<strong>组件与交互</strong>，将功能点分解为不同的<strong>功能上下文</strong>；</li>\n<li>如果尚不存在架构愿景，则可以将功能点作为功能上下文；</li>\n<li>将功能点按照功能上下文，分解为<strong>任务项</strong>。也就是进一步将可验证的里程碑点，分解为功能上下文中可验证的任务项；</li>\n<li>将任务项转化为<strong>自动化测试</strong>，进入红/绿/重构循环，驱动功能上下文内的功能实现；</li>\n<li>如果重构涉及功能上下文的重新划分，即<strong>提取/合并组件</strong>，即视作对于架构的重构与梳理。需调整后续功能点中对于功能上下文以及任务项的划分。</li>\n<li>如此往复，直到所有功能完成。</li>\n</ul><!-- [[[read_end]]] --><p>通过上述过程的描述，可以发现任务列表中的任务项源自两层分解：源自对于业务理解的功能点分解，以及源自架构愿景的功能上下文分解。</p><p>功能点分解帮助我们形成可验证的里程碑点。这些里程碑点可看作由可工作的软件（Working Software）构成的<strong>进度度量</strong>。功能上下文分解帮助我们找到正确的单元，指导我们保持良好的<strong>软件架构。</strong></p><p>如果功能点分解错误，那么就得不到功能正确的软件；如果功能上下文分解错误，那么就得不到架构良好的软件。</p><h2>TDD的工程优势</h2><p>所以，使用TDD开发软件对人的要求，与其他所有软件工程方法对人的要求是一样的：<strong>理解需求，明白架构</strong>。但是TDD提供了这样几点在工程管理上的优势。</p><p>第一，理解需求等于可以针对功能点写出测试。换句话说，<strong>写不出测试就是不理解需求</strong>。不理解需求就不要开发。在不理解需求的前提下开发功能点，只能带来负的进度。从工程管理角度上看，“判断一个人是否理解了需求”的成本极高。我想大家都有在各种拉通会议中，反复宣讲确认，但仍如鸡同鸭讲，不断消磨精力与斗志的体验。</p><p>TDD的“先写测试，后写生产的代码”的实践，实际上也就是要求“先理解需求，再开发”。但是TDD对于什么叫理解了需求，有了清晰的要求：能写出这个功能点的测试，就是理解了需求，别的都白扯。因而TDD从工程管理的角度，降低了“判断一个人是否理解了需求”的成本：<strong>看测试就行</strong>。</p><p>第二，不写测试，除了不会写测试之外，就是<strong>没理解需求</strong>。没理解需求就去写测试，那就是瞎干，瞎干不如不干。如果整个团队都写不出测试，那么说明这个需求无法通过可管控的工程化方式交付。</p><p>可管控的工程化方式交付，意味着这个需求在实现层面上可以被执行，也就是<strong>高确定性的</strong>。在高确定性的环境下，要追求效率。</p><p>而无法通过可管控的工程化方式交付，意味着不确定这个需求在实现层面上是否可被执行，需要进入<strong>探索模式</strong>。在不确定的情况下，<strong>要追求低成本及时止损</strong>。</p><p>所谓探索模式，也就是原型验证、定向的深度搜索、聘请外脑之类的活动。探索模式的关键在于，要在给定的时间范围内尝试，比如一到两天。超出这个时间范围仍然无法解决的，将变成<strong>项目风险</strong>，需要额外的管理方法，比如上升。然而，从工程管理的角度，“判断哪个需求应该从工程化方式交付模式进入探索模式”的成本极高。通常已经形成进度阻塞、延期或大量返工的时候，才能发现根本原因是<strong>不能确定实现方式</strong>。</p><p>TDD可以通过是否可以在规定时间内写出测试加以判断。因而，从工程管理的角度，降低了“判断哪个需求应该从工程化方式交付模式进入探索模式”的成本：<strong>看测试就行</strong>。</p><p>第三，所有软件从业人士都认为<strong>架构</strong>是重要的，但却很少有人理解架构究竟是如何发挥作用的。架构并不是停留在<strong>纸面上的框图</strong>，而是约定了构成软件系统的组件，以及组件之间的交互方式。也就是说，架构是组件<strong>职责划分的依据</strong>以及组件的<strong>交互模式</strong>。</p><p>比如MVC（Model/View/Controller）架构，表明系统组件按职责应该分成三种：管理数据的模型（Model），负责展示的视图（View），以及处理事件交互逻辑的控制器（Controller）。它们的交互模式为：视图渲染模型中的数据，视图中触发的事件则交由控制器处理，控制器可以通过修改模型，或是更新视图。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/4a/f3/4a730318c45ab75316e1e7e8a04330f3.jpg?wh=2284x1448\" alt=\"\"></p><p>想要破坏MVC的架构愿景很容易，比如把控制逻辑写到模型中，或者在视图中直接修改模型，都会破坏MVC的架构愿景。</p><p>架构是软件构造过程中产生的一类非常特殊的知识，它必须成为<strong>全体人员的共识</strong>，才能<strong>真正发挥作用</strong>。否则，架构就是一句空话，或者一堆空话。</p><p>从工程管理的角度，“判断团队是否对架构达成了共识”的成本极高。通常需要大量的代码审查才能发现对于架构理解的偏差，也需要大量的返工才能纠正这些偏差。</p><p>TDD则可以通过<strong>功能上下文以及任务项拆分的情况</strong>，判断成员是否认同并理解了架构。如果团队已经形成了架构共识，那么对于相同的功能点，团队中所有成员拆分出的功能上下文应该也相同。因而，从工程管理的角度，TDD降低了“判断团队是否对架构达成了共识”的成本：<strong>看功能上下文拆分就行</strong>。</p><p>第四，架构愿景很难在一开始就想得尽善尽美，随着需求发展，总会出现以当前架构愿景不容易实现的需求。如果硬拗进当前架构，就会出现<strong>不当的职责划分</strong>和<strong>别扭的组件交互</strong>，这只会加速架构的腐化。而“发现当前架构愿景不容易实现的需求”<strong>成本极高</strong>。</p><p>TDD则可以通过<strong>功能上下文以及任务项拆分的情况</strong>，判断架构是否能够实现当前需求。如果无法拆分出合理的功能上下文和任务项，那么这个需求，就是当前架构愿景不易实现的需求。因而，从工程管理的角度，TDD降低了“发现当前架构愿景不容易实现的需求”的成本：<strong>看功能上下文拆分就行</strong>。</p><p>顺便说一句，就算发现了“当前架构愿景不容易实现的需求”，也可以直接进入经典模式，通过重构抽取架构要素，演进式调整当前架构，不会影响项目进度。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/e5/ac/e5c4d4c0b8f6490252320829286ffaac.jpg?wh=2284x1285\" alt=\"\"></p><p>不难发现，TDD要求先写测试，实际是以<strong>可工作的软件</strong>的形态，验证对于需求的理解；而任务分解，则是在确定单元粒度的过程中，验证对于架构的共识。只要我们承认，“理解需求，明白架构”是一切工程化软件开发的前提，那么TDD就是目前已知的<strong>效能最高的方法</strong>。</p><h2>小结</h2><p>到此为止，我们展示了一个完整的例子：如何通过TDD实现命令行参数解析。以此为引子，我们讲解了TDD中的测试，分别介绍了状态验证与行为验证两种验证模式。并讨论了，为什么TDD中的测试不是单元测试。</p><p>在明白了TDD中的测试是什么之后，我们讨论了这样的测试是怎样驱动软件开发的：比起单元内的功能实现，测试更容易驱动架构设计，因而TDD更应该被看做是一种架构技术。然后，我们分别介绍了通过重构演进式驱动架构的经典TDD模式，以及在一定架构愿景之下，逐步实现不同功能单元的伦敦学派TDD模式。</p><p>最后，我们解释了作为工程方法，TDD与其他工程方法并没有什么本质区别，都需要在“理解需求，明白架构”的前提下，进行软件开发。只不过，TDD在工程管理上具有更低的成本和更高的效能。</p><p>虽然TDD看起来非常地违反直觉，然而在抽丝剥茧之后，你会发现，它反而是非常传统的开发模式。围绕测试与任务列表，它严谨地将所有必须的开发活动，转化为可管理的行为。杜绝了嘴上说一套实际做一套的可能。</p><p>也正是因为TDD从骨子里是非常传统的开发模式，非常强调对于需求的理解（可测试性），以及对于架构愿景的维护（演进式）。那么想要用好TDD，仅仅关注测试是不够的，还需要在需求分解与功能上下文分解上花力气下功夫。</p><p>接下来，我们将使用一系列更为实际的例子，展示如何通过TDD来完成它们。</p><h2>思考题</h2><p>在团队中从哪里开始推行TDD最容易入手？</p><p>欢迎把你的思考和想法分享在留言区，也欢迎你加入我们的<a href=\"https://jinshuju.net/f/zvOavT\">读者交流群</a>。我们下节课再见！</p>","neighbors":{"left":{"article_title":"10｜TDD中的驱动（3）：何为经典学派？何为伦敦学派？","id":496702},"right":{"article_title":"代码评点01｜不同语言TDD的节奏有何不同？","id":503219}},"comments":[{"had_liked":false,"id":341006,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1649292254,"is_pvip":false,"replies":[{"id":124671,"content":"局部优化 用处有限","user_name":"作者回复","user_name_real":"编辑","uid":2537798,"ctime":1649297976,"ip_address":"","comment_id":341006,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"1.  从认可 TDD 的员工开始推行最容易入手\n2. 从想不加班但又想通过技术手段提升效率的员工入手\n3. 从不想花费大量时间在线上找 Bug 的员工入手","like_count":1,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560358,"discussion_content":"局部优化 用处有限","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1649297976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341540,"user_name":"夏天","can_delete":false,"product_type":"c1","uid":1521358,"ip_address":"","ucode":"1397377B31751E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/rAqwExT20D9WdnlEmZpzXp9HrorvyeGOdpicPCwfAREPJuM1F5I3A8cTbCg2LwggfxdEP0qPwCuAWjrIRiaNj4MQ/132","comment_is_top":false,"comment_ctime":1649683959,"is_pvip":false,"replies":[{"id":124800,"content":"sponsor不是说服的，目睹-感知-改变 更有效","user_name":"作者回复","user_name_real":"编辑","uid":2537798,"ctime":1649724032,"ip_address":"","comment_id":341540,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"TDD带来的是工程效率的提升，是降本增效的方法。所以在团队中推行TDD，要先说服sponsor。sponsor愿意买单，才能推行TDD。","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561757,"discussion_content":"sponsor不是说服的，目睹-感知-改变 更有效","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1649724032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346453,"user_name":"姑射仙人","can_delete":false,"product_type":"c1","uid":1008517,"ip_address":"","ucode":"3EFC1F3E592165","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/85/1dc41622.jpg","comment_is_top":false,"comment_ctime":1653144985,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"老师，后面会去讲如何在项目型的工程实践中，Restful接口，数据库模型。项目为典型的三层架构，或DDD分层架构。这样的场景下，如何进行TDD，以及在需求大量变动的情况下，保证项目的质量？","like_count":5},{"had_liked":false,"id":342301,"user_name":"汗香","can_delete":false,"product_type":"c1","uid":1807921,"ip_address":"","ucode":"8F2C8A595F888A","user_header":"https://static001.geekbang.org/account/avatar/00/1b/96/31/91cc9c3c.jpg","comment_is_top":false,"comment_ctime":1650181334,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"与客户交流的过程中以测试代替文档，先得到客户的对需求列表方式的认可","like_count":3},{"had_liked":false,"id":342370,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1650209800,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"从自己开始入手，自己在做项目的过程中实践TDD，并取得一定的成果，进而在组内及团队内推广","like_count":2},{"had_liked":false,"id":392039,"user_name":"Geek_b11f27","can_delete":false,"product_type":"c1","uid":3901097,"ip_address":"河北","ucode":"6BD2DC6C4B90C6","user_header":"","comment_is_top":false,"comment_ctime":1719805747,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"从我自己入手，一个人如果不知道一件事情的好处就不会去做，不做就不知道这个好处，这样形成了一个死循环。我自己先试着打破循环，别人看到了了效果也相当于打破了他们的认知，从而有可能打破他们的认知上的死循环。","like_count":0},{"had_liked":false,"id":375307,"user_name":"少晴","can_delete":false,"product_type":"c1","uid":2285456,"ip_address":"广东","ucode":"31C290044F3B95","user_header":"https://static001.geekbang.org/account/avatar/00/22/df/90/0d8864db.jpg","comment_is_top":false,"comment_ctime":1685287382,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"我目前是项目TDD的推动负责人，我现在很困惑，对于团队成员能力的参差不齐，推动TDD的过程非常困难，很难让团队成员接受TDD思想。很主要的一点是不会写测试代码是他们一直吐槽的点，甚至很多人认为写测试代码所投入的精力远大于功能实现。所以这个如何解决呢","like_count":0,"discussions":[{"author":{"id":1129601,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/81/7ccdb399.jpg","nickname":"+ 糠","note":"","ucode":"2D5A91900FCA43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":640857,"discussion_content":"把这个课推荐给他们","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1711942202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005214,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/56/9e/e15a63bb.jpg","nickname":"jokar","note":"","ucode":"4FD20C9D4C71A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":635152,"discussion_content":"换人。这些人不行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704447201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"贵州","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346452,"user_name":"姑射仙人","can_delete":false,"product_type":"c1","uid":1008517,"ip_address":"","ucode":"3EFC1F3E592165","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/85/1dc41622.jpg","comment_is_top":false,"comment_ctime":1653144629,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"在团队中从哪里开始推行 TDD 最容易入手？\n\n从正在需要重构的项目入手容易些吧，但是往往这样的项目都有工期，和领导的KPI。敢于推行TDD需要莫大的勇气，感觉又是个一把手工程。","like_count":0},{"had_liked":false,"id":346451,"user_name":"姑射仙人","can_delete":false,"product_type":"c1","uid":1008517,"ip_address":"","ucode":"3EFC1F3E592165","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/85/1dc41622.jpg","comment_is_top":false,"comment_ctime":1653144506,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"1. 从工程管理的角度，“判断一个人是否理解了需求”的成本极高。\n2. 从工程管理的角度，“判断哪个需求应该从工程化方式交付模式进入探索模式”的成本极高。\n3. 从工程管理的角度，“判断团队是否对架构达成了共识”的成本极高。\n4. 从工程管理的角度，“发现当前架构愿景不容易实现的需求”成本极高。\n\n感觉自己不懂工程管理，如何补足这方面的知识呢？","like_count":0},{"had_liked":false,"id":341461,"user_name":"宁","can_delete":false,"product_type":"c1","uid":1110193,"ip_address":"","ucode":"8CF3C2AF6FD079","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/b1/bb5126fc.jpg","comment_is_top":false,"comment_ctime":1649640165,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"通过提交代码时检查代码测试覆盖率来推动TDD：前期可以覆盖率较低，但是一旦增加了检查，代码提交失败（红），增加测试代码使其通过检查并提交代码（绿），逐步提高测试覆盖率（重构），整个推动过程也可以保持TDD的节奏。——有种俄罗斯套娃的感觉，手动狗头","like_count":0}]}