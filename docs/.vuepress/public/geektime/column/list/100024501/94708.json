{"id":94708,"title":"27 | 如何用 Flexbox 思路开发？跟自动布局比，Flexbox 好在哪？","content":"<p>你好，我是戴铭。今天，我要和你跟你聊聊 Flexbox。</p><p>你很有可能不知道Flexbox 是啥，但一定不会对 React Native、Weex 和 Texture（AsyncDisplayKit） 感到陌生，而Flexbox就是这些知名布局库采用的布局思路。不可小觑的是，苹果公司官方的UIStackView，也是采用Flexbox思路来实现布局的。</p><p>接下来，我们就一起来看看Flexbox布局思路有什么优势，以及如何用它来实现布局。</p><h2>Flexbox 好在哪？</h2><p>目前来看，iOS 系统提供的布局方式有两种：</p><ul>\n<li>一种是 Frame 这种原始方式，也就是通过设置横纵坐标和宽高来确定布局。</li>\n<li>另一种是自动布局（Auto Layout），相比较于 Frame 需要指出每个视图的精确位置，自动布局对于视图位置的描述更加简洁和易读，只需要确定两个视图之间的关系就能够确定布局。</li>\n</ul><p>通过 <a href=\"https://github.com/SnapKit/Masonry\">Masonry</a>和 <a href=\"https://github.com/SnapKit/SnapKit\">SnapKit</a>这些第三方库，自动布局的易用性也有了很大提升。而且iOS 12 以后，苹果公司也已经解决了自动布局在性能方面的问题（这里，你可以再回顾下前面第4篇文章<a href=\"https://time.geekbang.org/column/article/85332\">《Auto Layout 是怎么进行自动布局的，性能如何？》</a>中的相关内容）。</p><p>那么在这种情况下，<strong>我们为什么还要关注其他布局思路呢？</strong>关于原因，我觉得主要包括以下两个方面。</p><!-- [[[read_end]]] --><p>其一，自动布局思路本身还可以再提高。Flexbox 比自动布局提供了更多、更规范的布局方法，布局方式考虑得更全面，使用起来也更加方便。同时，苹果公司基于 Flexbox 的布局思路，又在自动布局之上封装了一层 UIStackView。</p><p>其二，针对多个平台的库需要使用更加通用的布局思想。Flexbox 在2009年被 W3C 提出，可以很简单、完整地实现各种页面布局，而且还是响应式的，开始被应用于前端领域，目前所有浏览器都已支持。后来通过 React Native 和 Weex 等框架，它被带入到客户端开发中，同时支持了 iOS 和 Android。</p><p>与自动布局思路类似，Flexbox 使用的也是描述性的语言来布局。使用 Flexbox 布局的视图元素叫 Flex容器（flex container），其子视图元素叫作Flex项目（flex item）。Flexbox 布局的主要思想是，通过Flex容器设定的属性来改变内部Flex项目的宽、高，并调整 flex项目的位置来填充 flex容器的可用空间。</p><p>下图来自 W3C 官网，表示了 flex容器和 flex项目间的关系，其中 Main-Axis 表示横轴方向，Cross-Axis 表示纵轴方向。</p><p><img src=\"https://static001.geekbang.org/resource/image/c0/cd/c07d46e57f887adaac965c725aaf9ccd.png?wh=1410*588\" alt=\"\"><br>\n关于Flexbox 的详细入门资料，你可以参看阮一峰老师的“<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">Flex 布局教程：语法篇</a>”一文。而Flexbox 在 W3C 上完整的定义，你可以点击<a href=\"https://www.w3.org/TR/css-flexbox-1/\">这个链接</a>查看。</p><p>如果你的工程目前还没有迁移到 React Native 或 Weex，那我觉得你可以通过 Texture 来使用 Flexbox 思路开发界面布局。而关于React Native和 Weex 使用 Flexbox 布局的思路，我会在专栏后面的文章“原生布局转到前端布局，开发思路的转变有哪些？”里和你详细说明。</p><h2>Texture 如何使用 Flexbox 思路进行布局？</h2><p>基于Flexbox的布局思路，Texture框架的布局方案考虑得十分长远，也已经十分成熟，虽然学习起来需要费些力气，但是性能远好于苹果的自动布局，而且写起来更简单。</p><p>Texture框架的布局中，Texture考虑到布局扩展性，提供了一个基类 ASLayoutSpec。这个基类 提供了布局的基本能力，使 Texture 可以通过它扩展实现多种布局思路，比如 Wrapper、Inset、Overlay、Ratio、Relative、Absolute 等布局思路，也可以继承 ASLayoutSpec 来自定义你的布局算法。</p><p>ASLayoutSpec的子类，及其具体的功能如下：</p><pre><code>ASAbsoluteLayoutSpec // 绝对布局\nASBackgroundLayoutSpec // 背景布局\nASInsetLayoutSpec // 边距布局\nASOverlayLayoutSpec // 覆盖布局\nASRatioLayoutSpec // 比例布局\nASRelativeLayoutSpec // 顶点布局\nASCenterLayoutSpec // 居中布局\nASStackLayoutSpec // 盒子布局\nASWrapperLayoutSpec // 填充布局\nASCornerLayoutSpec // 角标布局\n</code></pre><p>ASLayoutSpec 子类实现了各种布局思路，ASLayoutSpec 会制定各种布局相通的协议方法，遵循这些协议后可以保证这些子类能够使用相同的规则去实现更丰富的布局。</p><p>通过 ASLayoutSpec 遵循的 ASLayoutElement 协议，可以知道 ASLayoutSpec 提供的基本能力有哪些。ASLayoutElement 协议定义如下：</p><pre><code>@protocol ASLayoutElement &lt;ASLayoutElementExtensibility, ASTraitEnvironment, ASLayoutElementAsciiArtProtocol&gt;\n\n#pragma mark - Getter\n\n@property (nonatomic, readonly) ASLayoutElementType layoutElementType;\n@property (nonatomic, readonly) ASLayoutElementStyle *style;\n- (nullable NSArray&lt;id&lt;ASLayoutElement&gt;&gt; *)sublayoutElements;\n\n#pragma mark - Calculate layout\n\n// 要求节点根据给定的大小范围返回布局\n- (ASLayout *)layoutThatFits:(ASSizeRange)constrainedSize;\n// 在子 layoutElements 上调用它来计算它们在 calculateLayoutThatFits: 方法里实现的布局\n- (ASLayout *)layoutThatFits:(ASSizeRange)constrainedSize parentSize:(CGSize)parentSize;\n// 重写此方法以计算 layoutElement 的布局\n- (ASLayout *)calculateLayoutThatFits:(ASSizeRange)constrainedSize;\n// 重写此方法允许你接收 layoutElement 的大小。使用这些值可以计算最终的约束大小。但这个方法要尽量少用\n- (ASLayout *)calculateLayoutThatFits:(ASSizeRange)constrainedSize\n                     restrictedToSize:(ASLayoutElementSize)size\n                 relativeToParentSize:(CGSize)parentSize;\n\n- (BOOL)implementsLayoutMethod;\n\n@end\n</code></pre><p>通过上面代码可以看出，协议定义了 layoutThatFits 和 calculateLayoutThatFits 等回调方法。其中，layoutThatFits 回调方法用来要求节点根据给定的大小范围返回布局，重写 calculateLayoutThatFits 方法用以计算 layoutElement 的布局。定义了统一的协议方法，能让 ASLayoutSpec 统一透出布局计算能力，统一规范的协议方法，也有利于布局算法的扩展。</p><p><strong>接下来，我们一起看看ASLayoutSpec的子类中，应用最广泛的ASStackLayoutSpec。</strong>它和 iOS 中自带的 UIStackView 类似，布局思路参照了 Flexbox，比如 horizontalAlignment、alignItems、flexWrap 等属性很容易和 Flexbox 对应上。</p><p>下面示例是一段官方的 ASStackLayoutSpec 示例代码。ASStackLayoutSpec 布局思路和 Flexbox是一样的，所以我们通过示例可以了解，如何通过 Texture 使用 Flexbox 布局思路开发界面：</p><pre><code>- (ASLayoutSpec *)layoutSpecThatFits:(ASSizeRange)constraint\n{\n    // 创建一个纵轴方向的 ASStackLayoutSpec 视图容器 vStack\n    ASStackLayoutSpec *vStack = [[ASStackLayoutSpec alloc] init];\n    // 设置两个子节点，第一个节点是标题，第二个正文内容\n    [vStack setChildren:@[titleNode, bodyNode];\n\n    // 创建一个横轴方向的 ASStackLayoutSpec 视图容器 hstack\n    ASStackLayoutSpec *hstack = [[ASStackLayoutSpec alloc] init];\n    hStack.direction          = ASStackLayoutDirectionHorizontal;\n    hStack.spacing            = 5.0; // 设置节点间距为5\n\n    // 在 hStack 里添加 imageNode 和 vStack 节点\n    [hStack setChildren:@[imageNode, vStack]];\n    \n    // 创建一个 ASInsetLayoutSpec 容器，设置四周边距为5，将 hStack 作为其子节点\n    ASInsetLayoutSpec *insetSpec = [ASInsetLayoutSpec insetLayoutSpecWithInsets:UIEdgeInsetsMake(5,5,5,5) child:hStack];\n\n    return insetSpec;\n}\n</code></pre><p>上面这段代码，会先创建一个纵轴方向的 ASStackLayoutSpec 视图容器 vStack；然后，为 vStack 设置两个子节点，第一个节点是标题，第二个节点是正文内容；接下来，创建一个横轴方向的 ASStackLayoutSpec 视图容器 hstack，在 hStack 里添加 imageNode 和 vStack 节点；最后，创建一个 ASInsetLayoutSpec 容器，设置四周边距为5，将 hStack 作为其子节点。</p><p>上面示例代码对应的视图效果如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/3e/fe/3ed4643a658f3a358d35dd9a151c7cfe.png?wh=1268*679\" alt=\"\"><br>\n除了 Texture 用到了 Flexbox 的布局思路，React Native 和 Weex 也用到了这个布局思路。这两个框架对 Flexbox 算法的实现，是一个叫作<a href=\"https://github.com/facebook/yoga\">Yoga</a> 的 C++ 库。</p><p>除了 React Native 和 Weex 之外，Yoga 还为很多其他开源框架提供支持，比如 <a href=\"https://fblitho.com/\">Litho</a>、<a href=\"https://componentkit.org/\">ComponentKit</a> 等。</p><p>为了能够用于各个平台，Yoga是由 C/C++ 语言编写的，依赖少，编译后的二进制文件也小，可以被方便地集成到 Android 和 iOS 上。</p><p>随着新硬件的不断推出，比如手表和折叠屏手机，你可能还需要掌握更多的布局算法，以不变应万变。比如说，除了 Flexbox 思路的布局 ASStackLayoutSpec以外，Texture中还有 Wrapper、Inset、Overlay、Ratio、Relative、Absolute 等针对不同场景的布局思路，同时还支持自定义布局算法。</p><p>那么，接下来我就跟你聊聊 Flexbox 的算法是怎样的。了解Flexbox的布局算法设计，一方面能够让你更好地理解 Flexbox 布局；另一方面，你也可以借此完整地了解一个布局算法是怎样设计的，使得你以后也能够设计出适合自己业务场景的布局算法。</p><h2>Flexbox 算法</h2><p>Flexbox 算法的主要思想是，让 flex容器能够改变其flex项目的宽高和顺序，以填充可用空间，flex容器可以通过扩大项目来填充可用空间，或者缩小项目以防止其超出其可用空间。</p><p><strong>首先</strong>，创建一组匿名的 flex 项目，按照这组匿名 flex项目设置的排列规则对其进行排列。</p><ul>\n<li>第一步，确定 flex项目的 main space 和 cross space，如果 flex容器定义了大小就直接使用定义的大小；否则， 从 flex容器的可用空间里减去 margin、border、padding。</li>\n<li>第二步，确定每个项目 的 flex base 大小和假设的大小，其中假设的大小是项目依据它最小和最大的大小属性来确定的。flex 容器的大小，由它的大小属性来确定。</li>\n</ul><p>这个计算过程中，flex容器的最小内容大小，是由它所有项目的最小内容大小之和算出的；而flex容器的最大内容大小，则是由它所有项目的最大内容大小之和确定出。</p><p><strong>接着</strong>，将 flex项目收集到 flex lines 中。如果 flex容器是单行，那么就把所有的 flex项目都收集到单个 flex line 里。否则，就从第一个未收集的项目开始尽可能多地收集 flex项目到 flex line 里，根据 flex容器的 inner 大小判断是否当前 flex line 收集满。重复操作，直到将所有 flex项目都被收集到了 flex lines 里。</p><p>处理完 flex lines 后，需要通过使用过的大小和可用大小来确定每个项目的 cross 大小，然后计算每个 flex line 的 cross 大小以及 flex line 里每个 flex项目的 cross 大小。</p><p><strong>最后，</strong>进行 Main-Axis 对齐和 Cross-Axis 对齐。</p><ul>\n<li>Main-Axis 对齐就是分配剩余空间。对于每个 flex line，如果有剩余空间， margin 设置为 auto 的话，就平均分配剩余空间。</li>\n<li>Cross-Axis 对齐，先要解决自动 margin，然后沿 cross-axis 对齐所有 flex items；随后确定 flex container 使用的 cross 大小；最后对齐所有 flex lines。</li>\n</ul><p>结合视图的概念，简化后 Flexbox 布局算法如下图：</p><p><img src=\"https://static001.geekbang.org/resource/image/80/b7/80350e0a3fb5f6ead639754a808b3cb7.jpeg?wh=1600*1199\" alt=\"\"><br>\n如图中所示，其中 View 类似 flex container，View 的 Subviews 类似 flex items，flexbox 的算法简而言之就是：首先依据 View 的 margin、padding、border 确定出横纵大小，接下来确定排列，根据 View 的大小确定 Subviews 的行内容，确定出行中每个 Subview 的大小，最终确定出 Subview 的位置。</p><h2>小结</h2><p>在今天这篇文中，我与你介绍了 Flexbox 比 iOS 系统自带的自动布局好在哪，还举例说明了 Texture 是如何利用 Flexbox 进行 iOS 开发的。</p><p>其实， iOS 系统自带的 UIStackView 也是依据 Flexbox 思路开发的。我们都知道，苹果公司一般不轻易使用第三方技术。这，也就表明了 Flexbox 的布局思路是非常优秀的。</p><p>所以，在最后我还跟你分享了 Flexbox 的布局算法。如果你想知道这个算法的具体实现，可以直接查看 <a href=\"https://github.com/facebook/yoga\">Yoga 的代码</a>。</p><p>我以前也做过一个将 HTML 代码转换成 Texture 代码的项目 <a href=\"https://github.com/ming1016/HTN/\">HTN</a>，HTML 使用 Flexbox 写的界面布局可以直接转成对应的 Texture 代码，使用示例代码如下：</p><pre><code>public func htmlToTexture() {\n    // inputLb.stringValue 是 html 代码\n    let treeBuilder = HTMLTreeBuilder(inputLb.stringValue)\n    _ = treeBuilder.parse()\n    // 解析 CSS\n    let cssStyle = CSSParser(treeBuilder.doc.allStyle()).parseSheet()\n    // 生成 DOM 树\n    let document = StyleResolver().resolver(treeBuilder.doc, styleSheet: cssStyle)\n    document.des() //打印包含样式信息的 DOM 树\n    \n    //转 Textrue\n    let layoutElement = LayoutElement().createRenderer(doc: document)\n    _ = HTMLToTexture(nodeName:&quot;Flexbox&quot;).converter(layoutElement);\n    nativeCodeLb.string = &quot;&quot;\n}\n</code></pre><h2>课后小作业</h2><p>如果你还没有开始使用 Flexbox ，请你立刻集成 Yoga 对你业务中一个页面使用 Flexbox 布局重写一遍吧。如果你不想集成第三方库，使用 UIStackView 也行。</p><p>今天的作业是基于 ASLayoutElement 协议，实现一个 Texture 自定义布局类。这个布局算法可以很简单，主要是想要帮你验证下你学习 Flexbox 算法的成果。</p><p>感谢你的收听，欢迎你在评论区给我留言分享你的观点，也欢迎把它分享给更多的朋友一起阅读。</p><p></p>","comments":[{"had_liked":false,"id":93666,"user_name":"Jeffrey","can_delete":false,"product_type":"c1","uid":1453745,"ip_address":"","ucode":"1CA6A788EA9B74","user_header":"https://static001.geekbang.org/account/avatar/00/16/2e/b1/85bbfa6b.jpg","comment_is_top":false,"comment_ctime":1557554058,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31622325130","product_id":100024501,"comment_content":"肯定frame效率高 ","like_count":8},{"had_liked":false,"id":95689,"user_name":"K","can_delete":false,"product_type":"c1","uid":1198674,"ip_address":"","ucode":"96AB532E8AFAC9","user_header":"https://static001.geekbang.org/account/avatar/00/12/4a/52/5e8972b6.jpg","comment_is_top":false,"comment_ctime":1558143547,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27327947323","product_id":100024501,"comment_content":"以下是个人理解，如有问题请指正，谢谢。<br>yoga是对frame的封装，内部实现了Flexbox算法（理念），texture是对yoga的封装，增加了异步渲染等。 性能上，由于frame是线性的，所以yoga和texture也应该是线性的，或者更优。而autolayout属于指数级的，这可能跟两者算法有关。所以，在使用上，在简单的布局页面或者性能要求不高的页面可以直接使用autolayout。相反，性能要求高的页面，可以选择frame, texture, yoga.","like_count":6,"discussions":[{"author":{"id":1457445,"avatar":"http://thirdwx.qlogo.cn/mmopen/h0KAdRFKjCOSLRjzictvlaHOxsEiaWMSqcO68oiaUqffzyYlEKrDRvicHociabv72HNuR2VdECr8mVFIRiayM0Dd7bNDnaiceicHysF7/132","nickname":"Geek_869250","note":"","ucode":"292980DF23D5A0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5165,"discussion_content":"autolayout已经优化成线性的了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566023818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1467154,"avatar":"https://static001.geekbang.org/account/avatar/00/16/63/12/c017aab5.jpg","nickname":"猴哥","note":"","ucode":"3DE2AFF4D4D4A2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8008,"discussion_content":"简单的布局用frame还是autolayout都无所谓，而复杂的布局用frame维护起来简直是灾难。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567755652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1435941,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e9/25/876c5b16.jpg","nickname":"最强小鲁班","note":"","ucode":"A7A510BB545387","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1467154,"avatar":"https://static001.geekbang.org/account/avatar/00/16/63/12/c017aab5.jpg","nickname":"猴哥","note":"","ucode":"3DE2AFF4D4D4A2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41549,"discussion_content":"确实","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572449265,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":8008,"ip_address":""},"score":41549,"extra":""}]}]},{"had_liked":false,"id":94435,"user_name":"Z","can_delete":false,"product_type":"c1","uid":1017541,"ip_address":"","ucode":"6D34504427AE9D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/86/c5/0e4845b5.jpg","comment_is_top":false,"comment_ctime":1557810839,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23032647319","product_id":100024501,"comment_content":"react native 里面的布局确实比较好用，比原生节省了开发效率","like_count":5,"discussions":[{"author":{"id":1740727,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/8f/b7/cf5fd411.jpg","nickname":"ྉPྉeྉrྉsྉoྉnྉaྉ","note":"","ucode":"284B995851A8CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":48255,"discussion_content":"那是因为你根本就不懂原生开发","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1573469273,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176690,"user_name":"powerGuo","can_delete":false,"product_type":"c1","uid":1455253,"ip_address":"","ucode":"0FF0ABEED86206","user_header":"https://static001.geekbang.org/account/avatar/00/16/34/95/73639020.jpg","comment_is_top":false,"comment_ctime":1581139085,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10171073677","product_id":100024501,"comment_content":"作者的怎么看flexlib这个库，我已经在我自己开始使用了，就是把flexbox编写的xml通过解析转换成Yoga的iOS原布局","like_count":3},{"had_liked":false,"id":93598,"user_name":"Geek_2844bd","can_delete":false,"product_type":"c1","uid":1462850,"ip_address":"","ucode":"EB1A34D5898FE1","user_header":"","comment_is_top":false,"comment_ctime":1557529292,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10147463884","product_id":100024501,"comment_content":"Texture和frame对比，性能如何？","like_count":2},{"had_liked":false,"id":213079,"user_name":"lvv","can_delete":false,"product_type":"c1","uid":1987666,"ip_address":"","ucode":"22B961D413DEFF","user_header":"","comment_is_top":false,"comment_ctime":1588297848,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5883265144","product_id":100024501,"comment_content":"推荐一下我基于 Facebook 的 yoga 修改的版本，支持 iOS macOS tvOS 项目地址：https:&#47;&#47;github.com&#47;cntrump&#47;yoga","like_count":1},{"had_liked":false,"id":146189,"user_name":"最强小鲁班","can_delete":false,"product_type":"c1","uid":1435941,"ip_address":"","ucode":"A7A510BB545387","user_header":"https://static001.geekbang.org/account/avatar/00/15/e9/25/876c5b16.jpg","comment_is_top":false,"comment_ctime":1572449324,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5867416620","product_id":100024501,"comment_content":"UIStackView真的巨好用","like_count":2,"discussions":[{"author":{"id":1737199,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/81/ef/197f4135.jpg","nickname":"一只狗狗","note":"","ucode":"4BA07EAE4C4CAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":249774,"discussion_content":"复杂的cell，同个类型布局不太一样。用mas只能remake，性能不太好，frame又难写。用别的又和项目不统一，这可怎么整。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587961797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1435941,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e9/25/876c5b16.jpg","nickname":"最强小鲁班","note":"","ucode":"A7A510BB545387","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1737199,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/81/ef/197f4135.jpg","nickname":"一只狗狗","note":"","ucode":"4BA07EAE4C4CAF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263069,"discussion_content":"性能只是理论的，我们关注的是结果。虽然mas理论上性能差点，但如果列表并没有卡顿现象，完全可以忽略性能。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589168896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":249774,"ip_address":""},"score":263069,"extra":""}]}]},{"had_liked":false,"id":93720,"user_name":"Geek_8e8cbf","can_delete":false,"product_type":"c1","uid":1462572,"ip_address":"","ucode":"FFE060EBDF5696","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKHFicKDOJk2zN9tJglk8eoP1wXicpRHVicNg1DycjjfcxEN02ZZ1MBWPbLSyvBMsYyIc7fVg1qbjhKg/132","comment_is_top":false,"comment_ctime":1557568788,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5852536084","product_id":100024501,"comment_content":"那现阶段想在iOS中使用Flexbox布局，是用Yoga，还是Texture呢？","like_count":1,"discussions":[{"author":{"id":2031202,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKSibXL7TtUX026icqrU5MVjTGkUZRRgtytADThXA9wcfibu0jgzdjPV1l8ZicibOCicp24r7hjlcdd1aMA/132","nickname":"互动教程网","note":"","ucode":"2D17703B153563","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357888,"discussion_content":"未来属于SwiftUI~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615889118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1243460,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f9/44/1a5e5992.jpg","nickname":"Tracy.li","note":"","ucode":"0338DEC133CC9F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340227,"discussion_content":"肯定是约束啊  方便性能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609931559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310570,"user_name":"...","can_delete":false,"product_type":"c1","uid":1020427,"ip_address":"","ucode":"35C881D8AA1C5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/0b/2ccf7908.jpg","comment_is_top":false,"comment_ctime":1630749109,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630749109","product_id":100024501,"comment_content":"flexbox相比自动布局的具体好处是?（除了前端生态之外的）","like_count":0},{"had_liked":false,"id":291580,"user_name":"文培定","can_delete":false,"product_type":"c1","uid":2382667,"ip_address":"","ucode":"A13E83C4FFDEBC","user_header":"","comment_is_top":false,"comment_ctime":1620374361,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620374361","product_id":100024501,"comment_content":"貌似HTML本身就支持Flex吧","like_count":0},{"had_liked":false,"id":253675,"user_name":"秦~政","can_delete":false,"product_type":"c1","uid":2222527,"ip_address":"","ucode":"0BF5AD2151A91B","user_header":"https://static001.geekbang.org/account/avatar/00/21/e9/bf/c968c358.jpg","comment_is_top":false,"comment_ctime":1602828062,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602828062","product_id":100024501,"comment_content":"原来UIStackView 是用来布局的啊，从来没有往这方面想过，以为就是一个方便给几个按钮啥的排一条直线的哈哈，没想过，互相嵌套；","like_count":0},{"had_liked":false,"id":163491,"user_name":"往来谁是白丁","can_delete":false,"product_type":"c1","uid":1014258,"ip_address":"","ucode":"C33D34C638B6E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/79/f2/465a80c0.jpg","comment_is_top":false,"comment_ctime":1576731015,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576731015","product_id":100024501,"comment_content":"flutter也是类似flex box布局","like_count":0},{"had_liked":false,"id":94130,"user_name":"豆豆斗地主","can_delete":false,"product_type":"c1","uid":1060673,"ip_address":"","ucode":"234FDB269D9954","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/41/e7d5ee4e.jpg","comment_is_top":false,"comment_ctime":1557728330,"is_pvip":false,"replies":[{"id":"35019","content":"可以的","user_name":"作者回复","user_name_real":"戴铭","uid":"1140280","ctime":1558851657,"ip_address":"","comment_id":94130,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1557728330","product_id":100024501,"comment_content":"老师您好 请问在实际开发中 是否以删除 storyboard的方式进行开发？","like_count":0,"discussions":[{"author":{"id":1140280,"avatar":"https://static001.geekbang.org/account/avatar/00/11/66/38/f9999b2b.jpg","nickname":"戴铭","note":"","ucode":"D61E685F962387","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":449927,"discussion_content":"可以的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558851657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":93701,"user_name":"Ant","can_delete":false,"product_type":"c1","uid":1079563,"ip_address":"","ucode":"07E6374F91F61E","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/0b/4346a253.jpg","comment_is_top":false,"comment_ctime":1557562542,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557562542","product_id":100024501,"comment_content":"今天终于知道啥是flexbox了","like_count":0}]}