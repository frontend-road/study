{"id":161587,"title":"06 | 理论三：面向对象相比面向过程有哪些优势？面向过程真的过时了吗？","content":"<p>在上两节课中，我们讲了面向对象这种现在非常流行的编程范式，或者说编程风格。实际上，除了面向对象之外，被大家熟知的编程范式还有另外两种，面向过程编程和函数式编程。面向过程这种编程范式随着面向对象的出现，已经慢慢退出了舞台，而函数式编程目前还没有被广泛接受。</p><p>在专栏中，我不会对函数式编程做讲解，但我会花两节课的时间，讲一下面向过程这种编程范式。你可能会问，既然面向对象已经成为主流的编程范式，而面向过程已经不那么推荐使用，那为什么又要浪费时间讲它呢？</p><p>那是因为在过往的工作中，我发现很多人搞不清楚面向对象和面向过程的区别，总以为使用面向对象编程语言来做开发，就是在进行面向对象编程了。而实际上，他们只是在用面向对象编程语言，编写面向过程风格的代码而已，并没有发挥面向对象编程的优势。这就相当于手握一把屠龙刀，却只是把它当作一把普通的刀剑来用，相当可惜。</p><p>所以，我打算详细对比一下面向过程和面向对象这两种编程范式，带你一块搞清楚下面这几个问题（前三个问题我今天讲解，后三个问题我放到下一节课中讲解）：</p><ol>\n<li>什么是面向过程编程与面向过程编程语言？</li>\n<li>面向对象编程相比面向过程编程有哪些优势？</li>\n<li>为什么说面向对象编程语言比面向过程编程语言更高级？</li>\n<li>有哪些看似是面向对象实际是面向过程风格的代码？</li>\n<li>在面向对象编程中，为什么容易写出面向过程风格的代码？</li>\n<li>面向过程编程和面向过程编程语言就真的无用武之地了吗？</li>\n</ol><!-- [[[read_end]]] --><p>话不多说，带着这几个问题，我们就正式开始今天的学习吧！</p><h2>什么是面向过程编程与面向过程编程语言？</h2><p>如果你是一名比较资深的程序员，最开始学习编程的时候，接触的是Basic、Pascal、C等面向过程的编程语言，那你对这两个概念肯定不陌生。但如果你是新生代的程序员，一开始学编程的时候，接触的就是面向对象编程语言，那你对这两个概念可能会比较不熟悉。所以，在对比面向对象与面向过程优劣之前，我们先把面向过程编程和面向过程编程语言这两个概念搞清楚。</p><p>实际上，我们可以对比着面向对象编程和面向对象编程语言这两个概念，来理解面向过程编程和面向过程编程语言。还记得我们之前是如何定义面向对象编程和面向对象编程语言的吗？让我们一块再来回顾一下。</p><ul>\n<li>面向对象编程是一种编程范式或编程风格。它以类或对象作为组织代码的基本单元，并将封装、抽象、继承、多态四个特性，作为代码设计和实现的基石 。</li>\n<li>面向对象编程语言是支持类或对象的语法机制，并有现成的语法机制，能方便地实现面向对象编程四大特性（封装、抽象、继承、多态）的编程语言。</li>\n</ul><p>类比面向对象编程与面向对象编程语言的定义，对于面向过程编程和面向过程编程语言这两个概念，我给出下面这样的定义。</p><ul>\n<li>面向过程编程也是一种编程范式或编程风格。它以过程（可以理解为方法、函数、操作）作为组织代码的基本单元，以数据（可以理解为成员变量、属性）与方法相分离为最主要的特点。面向过程风格是一种流程化的编程风格，通过拼接一组顺序执行的方法来操作数据完成一项功能。</li>\n<li>面向过程编程语言首先是一种编程语言。它最大的特点是不支持类和对象两个语法概念，不支持丰富的面向对象编程特性（比如继承、多态、封装），仅支持面向过程编程。</li>\n</ul><p>不过，这里我必须声明一下，就像我们在之前讲到的，面向对象编程和面向对象编程语言并没有官方的定义一样，这里我给出的面向过程编程和面向过程编程语言的定义，也并不是严格的官方定义。之所以要给出这样的定义，只是为了跟面向对象编程及面向对象编程语言做个对比，以方便你理解它们的区别。</p><p>定义不是很严格，也比较抽象，所以，我再用一个例子进一步解释一下。假设我们有一个记录了用户信息的文本文件users.txt，每行文本的格式是name&amp;age&amp;gender（比如，小王&amp;28&amp;男）。我们希望写一个程序，从users.txt文件中逐行读取用户信息，然后格式化成name\\tage\\tgender（其中，\\t是分隔符）这种文本格式，并且按照age从小到大排序之后，重新写入到另一个文本文件formatted_users.txt中。针对这样一个小程序的开发，我们一块来看看，用面向过程和面向对象两种编程风格，编写出来的代码有什么不同。</p><p>首先，我们先来看，用面向过程这种编程风格写出来的代码是什么样子的。注意，下面的代码是用C语言这种面向过程的编程语言来编写的。</p><pre><code>struct User {\n  char name[64];\n  int age;\n  char gender[16];\n};\n\nstruct User parse_to_user(char* text) {\n  // 将text(“小王&amp;28&amp;男”)解析成结构体struct User\n}\n\nchar* format_to_text(struct User user) {\n  // 将结构体struct User格式化成文本（&quot;小王\\t28\\t男&quot;）\n}\n\nvoid sort_users_by_age(struct User users[]) {\n  // 按照年龄从小到大排序users\n}\n\nvoid format_user_file(char* origin_file_path, char* new_file_path) {\n  // open files...\n  struct User users[1024]; // 假设最大1024个用户\n  int count = 0;\n  while(1) { // read until the file is empty\n    struct User user = parse_to_user(line);\n    users[count++] = user;\n  }\n  \n  sort_users_by_age(users);\n  \n  for (int i = 0; i &lt; count; ++i) {\n    char* formatted_user_text = format_to_text(users[i]);\n    // write to new file...\n  }\n  // close files...\n}\n\nint main(char** args, int argv) {\n  format_user_file(&quot;/home/zheng/user.txt&quot;, &quot;/home/zheng/formatted_users.txt&quot;);\n}\n</code></pre><p>然后，我们再来看，用面向对象这种编程风格写出来的代码是什么样子的。注意，下面的代码是用Java这种面向对象的编程语言来编写的。</p><pre><code> public class User {\n  private String name;\n  private int age;\n  private String gender;\n  \n  public User(String name, int age, String gender) {\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n  }\n  \n  public static User praseFrom(String userInfoText) {\n    // 将text(“小王&amp;28&amp;男”)解析成类User\n  }\n  \n  public String formatToText() {\n    // 将类User格式化成文本（&quot;小王\\t28\\t男&quot;）\n  }\n}\n\npublic class UserFileFormatter {\n  public void format(String userFile, String formattedUserFile) {\n    // Open files...\n    List users = new ArrayList&lt;&gt;();\n    while (1) { // read until file is empty \n      // read from file into userText...\n      User user = User.parseFrom(userText);\n      users.add(user);\n    }\n    // sort users by age...\n    for (int i = 0; i &lt; users.size(); ++i) {\n      String formattedUserText = user.formatToText();\n      // write to new file...\n    }\n    // close files...\n  }\n}\n\npublic class MainApplication {\n  public static void main(String[] args) {\n    UserFileFormatter userFileFormatter = new UserFileFormatter();\n    userFileFormatter.format(&quot;/home/zheng/users.txt&quot;, &quot;/home/zheng/formatted_users.txt&quot;);\n  }\n}\n</code></pre><p>从上面的代码中，我们可以看出，面向过程和面向对象最基本的区别就是，代码的组织方式不同。面向过程风格的代码被组织成了一组方法集合及其数据结构（struct User），方法和数据结构的定义是分开的。面向对象风格的代码被组织成一组类，方法和数据结构被绑定一起，定义在类中。</p><p>看完这个例子之后，你可能会说，面向对象编程和面向过程编程，两种风格的区别就这么一点吗？当然不是，对于这两种编程风格的更多区别，我们继续往下看。</p><h2>面向对象编程相比面向过程编程有哪些优势？</h2><p>刚刚我们介绍了面向过程编程及面向过程编程语言的定义，并跟面向对象编程及面向对象编程语言做了一个简单对比。接下来，我们再来看一下，为什么面向对象编程晚于面向过程编程出现，却能取而代之，成为现在主流的编程范式？面向对象编程跟面向过程编程比起来，到底有哪些优势？</p><h3>1.OOP更加能够应对大规模复杂程序的开发</h3><p>看了刚刚举的那个格式化文本文件的例子，你可能会有这样的疑问，两种编程风格实现的代码貌似差不多啊，顶多就是代码的组织方式有点区别，没有感觉到面向对象编程有什么明显的优势呀！你的感觉没错。之所以有这种感觉，主要原因是这个例子程序比较简单、不够复杂。</p><p>对于简单程序的开发来说，不管是用面向过程编程风格，还是用面向对象编程风格，差别确实不会很大，甚至有的时候，面向过程的编程风格反倒更有优势。因为需求足够简单，整个程序的处理流程只有一条主线，很容易被划分成顺序执行的几个步骤，然后逐句翻译成代码，这就非常适合采用面向过程这种面条式的编程风格来实现。</p><p>但对于大规模复杂程序的开发来说，整个程序的处理流程错综复杂，并非只有一条主线。如果把整个程序的处理流程画出来的话，会是一个网状结构。如果我们再用面向过程编程这种流程化、线性的思维方式，去翻译这个网状结构，去思考如何把程序拆解为一组顺序执行的方法，就会比较吃力。这个时候，面向对象的编程风格的优势就比较明显了。</p><p>面向对象编程是以类为思考对象。在进行面向对象编程的时候，我们并不是一上来就去思考，如何将复杂的流程拆解为一个一个方法，而是采用曲线救国的策略，先去思考如何给业务建模，如何将需求翻译为类，如何给类之间建立交互关系，而完成这些工作完全不需要考虑错综复杂的处理流程。当我们有了类的设计之后，然后再像搭积木一样，按照处理流程，将类组装起来形成整个程序。这种开发模式、思考问题的方式，能让我们在应对复杂程序开发的时候，思路更加清晰。</p><p>除此之外，面向对象编程还提供了一种更加清晰的、更加模块化的代码组织方式。比如，我们开发一个电商交易系统，业务逻辑复杂，代码量很大，可能要定义数百个函数、数百个数据结构，那如何分门别类地组织这些函数和数据结构，才能不至于看起来比较凌乱呢？类就是一种非常好的组织这些函数和数据结构的方式，是一种将代码模块化的有效手段。</p><p>你可能会说，像C语言这种面向过程的编程语言，我们也可以按照功能的不同，把函数和数据结构放到不同的文件里，以达到给函数和数据结构分类的目的，照样可以实现代码的模块化。你说得没错。只不过面向对象编程本身提供了类的概念，强制你做这件事情，而面向过程编程并不强求。这也算是面向对象编程相对于面向过程编程的一个微创新吧。</p><p>实际上，利用面向过程的编程语言照样可以写出面向对象风格的代码，只不过可能会比用面向对象编程语言来写面向对象风格的代码，付出的代价要高一些。而且，面向过程编程和面向对象编程并非完全对立的。很多软件开发中，尽管利用的是面向过程的编程语言，也都有借鉴面向对象编程的一些优点。</p><h3>2.OOP风格的代码更易复用、易扩展、易维护</h3><p>在刚刚的那个例子中，因为代码比较简单，所以只用到到了类、对象这两个最基本的面向对象概念，并没有用到更加高级的四大特性，封装、抽象、继承、多态。因此，面向对象编程的优势其实并没有发挥出来。</p><p>面向过程编程是一种非常简单的编程风格，并没有像面向对象编程那样提供丰富的特性。而面向对象编程提供的封装、抽象、继承、多态这些特性，能极大地满足复杂的编程需求，能方便我们写出更易复用、易扩展、易维护的代码。为什么这么说呢？还记得我们在上一节课中讲到的封装、抽象、继承、多态存在的意义吗？我们再来简单回顾一下。</p><p>首先，我们先来看下封装特性。封装特性是面向对象编程相比于面向过程编程的一个最基本的区别，因为它基于的是面向对象编程中最基本的类的概念。面向对象编程通过类这种组织代码的方式，将数据和方法绑定在一起，通过访问权限控制，只允许外部调用者通过类暴露的有限方法访问数据，而不会像面向过程编程那样，数据可以被任意方法随意修改。因此，面向对象编程提供的封装特性更有利于提高代码的易维护性。</p><p>其次，我们再来看下抽象特性。我们知道，函数本身就是一种抽象，它隐藏了具体的实现。我们在使用函数的时候，只需要了解函数具有什么功能，而不需要了解它是怎么实现的。从这一点上，不管面向过程编程还是是面向对象编程，都支持抽象特性。不过，面向对象编程还提供了其他抽象特性的实现方式。这些实现方式是面向过程编程所不具备的，比如基于接口实现的抽象。基于接口的抽象，可以让我们在不改变原有实现的情况下，轻松替换新的实现逻辑，提高了代码的可扩展性。</p><p>再次，我们来看下继承特性。继承特性是面向对象编程相比于面向过程编程所特有的两个特性之一（另一个是多态）。如果两个类有一些相同的属性和方法，我们就可以将这些相同的代码，抽取到父类中，让两个子类继承父类。这样两个子类也就可以重用父类中的代码，避免了代码重复写多遍，提高了代码的复用性。</p><p>最后，我们来看下多态特性。基于这个特性，我们在需要修改一个功能实现的时候，可以通过实现一个新的子类的方式，在子类中重写原来的功能逻辑，用子类替换父类。在实际的代码运行过程中，调用子类新的功能逻辑，而不是在原有代码上做修改。这就遵从了“对修改关闭、对扩展开放”的设计原则，提高代码的扩展性。除此之外，利用多态特性，不同的类对象可以传递给相同的方法，执行不同的代码逻辑，提高了代码的复用性。</p><p>所以说，基于这四大特性，利用面向对象编程，我们可以更轻松地写出易复用、易扩展、易维护的代码。当然，我们不能说，利用面向过程风格就不可以写出易复用、易扩展、易维护的代码，但没有四大特性的帮助，付出的代价可能就要高一些。</p><h3>3.OOP语言更加人性化、更加高级、更加智能</h3><p>人类最开始跟机器打交道是通过0、1这样的二进制指令，然后是汇编语言，再之后才出现了高级编程语言。在高级编程语言中，面向过程编程语言又早于面向对象编程语言出现。之所以先出现面向过程编程语言，那是因为跟机器交互的方式，从二进制指令、汇编语言到面向过程编程语言，是一个非常自然的过渡，都是一种流程化的、面条式的编程风格，用一组指令顺序操作数据，来完成一项任务。</p><p>从指令到汇编再到面向过程编程语言，跟机器打交道的方式在不停地演进，从中我们很容易发现这样一条规律，那就是编程语言越来越人性化，让人跟机器打交道越来越容易。笼统点讲，就是编程语言越来越高级。实际上，在面向过程编程语言之后，面向对象编程语言的出现，也顺应了这样的发展规律，也就是说，面向对象编程语言比面向过程编程语言更加高级！</p><p>跟二进制指令、汇编语言、面向过程编程语言相比，面向对象编程语言的编程套路、思考问题的方式，是完全不一样的。前三者是一种计算机思维方式，而面向对象是一种人类的思维方式。我们在用前面三种语言编程的时候，我们是在思考，如何设计一组指令，告诉机器去执行这组指令，操作某些数据，帮我们完成某个任务。而在进行面向对象编程时候，我们是在思考，如何给业务建模，如何将真实的世界映射为类或者对象，这让我们更加能聚焦到业务本身，而不是思考如何跟机器打交道。可以这么说，越高级的编程语言离机器越“远”，离我们人类越“近”，越“智能”。</p><p>这里多聊几句，顺着刚刚这个编程语言的发展规律来想，如果一种新的突破性的编程语言出现，那它肯定是更加“智能”的。大胆想象一下，使用这种编程语言，我们可以无需对计算机知识有任何了解，无需像现在这样一行一行地敲很多代码，只需要把需求文档写清楚，就能自动生成我们想要的软件了。</p><h2>重点回顾</h2><p>今天的内容就讲完了，我们来一起总结回顾一下，你需要重点掌握的几个知识点。</p><p><strong>1.什么是面向过程编程？什么是面向过程编程语言？</strong></p><p>实际上，面向过程编程和面向过程编程语言并没有严格的官方定义。理解这两个概念最好的方式是跟面向对象编程和面向对象编程语言进行对比。相较于面向对象编程以类为组织代码的基本单元，面向过程编程则是以过程（或方法）作为组织代码的基本单元。它最主要的特点就是数据和方法相分离。相较于面向对象编程语言，面向过程编程语言最大的特点就是不支持丰富的面向对象编程特性，比如继承、多态、封装。</p><p><strong>2.面向对象编程相比面向过程编程有哪些优势？</strong></p><p>面向对象编程相比起面向过程编程的优势主要有三个。</p><ul>\n<li>对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。</li>\n<li>面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。利用这些特性编写出来的代码，更加易扩展、易复用、易维护。</li>\n<li>从编程语言跟机器打交道的方式的演进规律中，我们可以总结出：面向对象编程语言比起面向过程编程语言，更加人性化、更加高级、更加智能。</li>\n</ul><h2>课堂讨论</h2><p>在文章中我讲到，面向对象编程比面向过程编程，更加容易应对大规模复杂程序的开发。但像Unix、Linux这些复杂的系统，也都是基于C语言这种面向过程的编程语言开发的，你怎么看待这个现象？这跟我之前的讲解相矛盾吗？</p><p>欢迎在留言区写下你的答案，和同学一起交流和分享。如果有收获，也欢迎你把这篇文章分享给你的朋友。</p>","neighbors":{"left":{"article_title":"05 | 理论二：封装、抽象、继承、多态分别可以解决哪些编程问题？","id":161114},"right":{"article_title":"07 | 理论四：哪些代码设计看似是面向对象，实际是面向过程的？","id":164907}},"comments":[{"had_liked":false,"id":152141,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1573890443,"is_pvip":false,"replies":[{"id":"58741","content":"👍","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574129736,"ip_address":"","comment_id":152141,"utype":1}],"discussion_count":48,"race_medal":0,"score":"4734627850635","product_id":100039001,"comment_content":"使用任何一个编程语言编写的程序，最终执行上都要落实到CPU一条一条指令的执行（无论通过虚拟机解释执行，还是直接编译为机器码），CPU看不到是使用何种语言编写的程序。对于所有编程语言最终目的是两种：提高硬件的运行效率和提高程序员的开发效率。然而这两种很难兼得。<br>C语言在效率方面几乎做到了极致，它更适合挖掘硬件的价值，如：C语言用数组char a[8]，经过编译以后变成了（基地址＋偏移量）的方式。对于CPU来说，没有运算比加法更快，它的执行效率的算法复杂度是O(1)的。从执行效率这个方面看，开发操作系统和贴近硬件的底层程序，C语言是极好的选择。<br>C语言带来的问题是内存越界、野指针、内存泄露等。它只关心程序飞的高不高，不关心程序猿飞的累不累。为了解脱程序员，提高开发效率，设计了OOP等更“智能”的编程语言，但是开发容易毕竟来源于对底层的一层一层又一层的包装。完成一个特定操作有了更多的中间环节, 占用了更大的内存空间, 占用了更多的CPU运算。从这个角度看，OOP这种高级语言的流行是因为硬件越来越便宜了。我们可以想象如果大众消费级的主控芯片仍然是单核600MHz为主流，运行Android系统点击一个界面需要2秒才能响应，那我们现在用的大部分手机程序绝对不是使用JAVA开发的，Android操作系统也不可能建立起这么大的生态。","like_count":1103,"discussions":[{"author":{"id":1423544,"avatar":"https://static001.geekbang.org/account/avatar/00/15/b8/b8/070de9c1.jpg","nickname":"子适","note":"","ucode":"57802D756E4828","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":56513,"discussion_content":"它只关心程序飞的高不高，不关心程序猿飞的累不累。🐂🍺","likes_number":28,"is_delete":false,"is_hidden":false,"ctime":1574492242,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1518308,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2a/e4/714ffd01.jpg","nickname":"Kelly.W","note":"","ucode":"6EFB58A24355C4","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315959,"discussion_content":"它只关心程序飞的高不高，不关心程序猿飞的累不累。太喜欢这句话了","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1603339918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1262680,"avatar":"https://static001.geekbang.org/account/avatar/00/13/44/58/a901cfce.jpg","nickname":"LiYou","note":"","ucode":"F10DD1205CCDD1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296826,"discussion_content":"对于所有编程语言最终目的是两种：提高硬件的运行效率和提高程序员的开发效率。然而这两种很难兼得。\n(๑˃̵ᴗ˂̵)👍(๑˃̵ᴗ˂̵)👍(๑˃̵ᴗ˂̵)👍","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1596677186,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":55565,"discussion_content":"硬件成本与编程语言发展，这个思考角度新颖","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1574384382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1956678,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/db/46/19fd3b93.jpg","nickname":"YYQ","note":"","ucode":"19C7D3B9D21DB0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292625,"discussion_content":"cpu中指令全是o（1），没有比这个高的","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1595290397,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474730,"discussion_content":"👍","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1574129736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383755,"discussion_content":"好家伙 这就是 买正版课的理由; 首先从硬件本质上谈起,人终究要驯服这个计算机,方式就有很多,面向过程开发 面向对象开发,不妨一 一试试,用Java来做,Java的面向对象开发,很上手,开发效率高,但是人的开发效率高了,一段时间内机器的效率不高,机器就是用来提高效率的,这个Java不妥;那就试试c,虽然c普通人开发效率慢,但是机器高,随着时间推移,机器带来的收益更大,因此还得看未来场景;","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1626232762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1308783,"avatar":"https://static001.geekbang.org/account/avatar/00/13/f8/6f/080973cf.jpg","nickname":"Edward","note":"","ucode":"10FAADF92D05F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342548,"discussion_content":"彩！","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610711479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2463396,"avatar":"","nickname":"Geek_d78bd5","note":"","ucode":"CEFEF90DC9A84C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391371,"discussion_content":"可以，透彻，我只想到c语言贴近硬件，易于开发。同时计算机的底层和普通的业务开发不太。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630420659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1958147,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e1/03/f937e673.jpg","nickname":"🍀","note":"","ucode":"60E0AC2A55B63B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268499,"discussion_content":"我也看了那一篇简书","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589791564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1691500,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cf/6c/87faa554.jpg","nickname":"MoeRookie","note":"","ucode":"E860D73EE91F00","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1958147,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/e1/03/f937e673.jpg","nickname":"🍀","note":"","ucode":"60E0AC2A55B63B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331188,"discussion_content":"请问那篇简书文章的地址是?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606801543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":268499,"ip_address":""},"score":331188,"extra":""}]},{"author":{"id":1253109,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1e/f5/fba1adfd.jpg","nickname":"斑斓","note":"","ucode":"57AE303DD189E0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":212556,"discussion_content":"硬件的发展总是制约着软件的发展","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584977068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584471,"discussion_content":"🚩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660866722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2715388,"avatar":"","nickname":"Geek8535","note":"","ucode":"D1919541632C95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532864,"discussion_content":"厉害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637722089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2664142,"avatar":"","nickname":"QL","note":"","ucode":"B2EA2101793B56","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530583,"discussion_content":"优秀极了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637109156,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1120156,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ercic1LB9N9P1kArjS1f3hOo641elcwFGHWrxeYF4yZjfwiaydLwVeM4ZJEmVkib66GtJoE0cr6Dviauw/132","nickname":"小北","note":"","ucode":"A428FC9B771108","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407614,"discussion_content":"说的太好了，直击本质！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635072669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1992973,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/69/0d/0a2fd71e.jpg","nickname":"刘博","note":"","ucode":"F00AA3B3200BBE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":402859,"discussion_content":"醍醐灌顶","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633958130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210268,"avatar":"https://static001.geekbang.org/account/avatar/00/12/77/9c/ce85b2d3.jpg","nickname":"汽水枪","note":"","ucode":"50C340ADC3C40A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398438,"discussion_content":"我想的是：因为历史原因和人多的原因。。哭泣。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632793498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1162242,"avatar":"https://static001.geekbang.org/account/avatar/00/11/bc/02/3f7a7197.jpg","nickname":"跨江大桥","note":"","ucode":"4629B23F1BB9F0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1210268,"avatar":"https://static001.geekbang.org/account/avatar/00/12/77/9c/ce85b2d3.jpg","nickname":"汽水枪","note":"","ucode":"50C340ADC3C40A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414933,"discussion_content":"内卷。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636940437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":398438,"ip_address":""},"score":414933,"extra":""}]},{"author":{"id":1622696,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c2/a8/f3f8f5d2.jpg","nickname":"一格状语","note":"","ucode":"EBA9ED5F97416D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394604,"discussion_content":"说的太好了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631953644,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1122533,"avatar":"https://static001.geekbang.org/account/avatar/00/11/20/e5/f66d6144.jpg","nickname":"九先生","note":"","ucode":"A63A333299D485","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385801,"discussion_content":"醍醐灌顶啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627281615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2309338,"avatar":"","nickname":"Geek_syh","note":"","ucode":"0177F10845CE87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382050,"discussion_content":"讲的太通透了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625388063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376972,"discussion_content":"大神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622444003,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1999235,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/81/83/f93b1e62.jpg","nickname":"peaceForce","note":"","ucode":"98A318930DDC9A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374559,"discussion_content":"妙哉妙哉！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621244662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234963,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d8/13/082013bc.jpg","nickname":"昵称C","note":"","ucode":"1BB2D537942DC2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374161,"discussion_content":"评论区有大神","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621046020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1691447,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cf/37/6ed137b9.jpg","nickname":"Dunk","note":"","ucode":"A8F5AB98382719","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":367104,"discussion_content":"彩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618272305,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1210386,"avatar":"https://static001.geekbang.org/account/avatar/00/12/78/12/7df38a54.jpg","nickname":"helloworld2018","note":"","ucode":"2AE40C0DF5A9F7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364316,"discussion_content":"膜拜","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617440884,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1240321,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ed/01/997432f3.jpg","nickname":"喜笑延开","note":"","ucode":"DBF645D2129460","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":347156,"discussion_content":"lihai","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612166275,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1971360,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/14/a0/4c315270.jpg","nickname":"刘颜","note":"","ucode":"FD3B9C7338B74C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332894,"discussion_content":"彩","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607387996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1717342,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/34/5e/089ac156.jpg","nickname":"冯佳兴","note":"","ucode":"41D308E99EF9FF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331871,"discussion_content":"漂亮","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606998341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1156557,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a5/cd/3aff5d57.jpg","nickname":"Alery","note":"","ucode":"08F3F49181E67B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":329086,"discussion_content":"精彩\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606309145,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541014,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/96/73ff13a0.jpg","nickname":"天亮前说晚安","note":"","ucode":"1D82EE562A7C71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304553,"discussion_content":"那为啥不搞个转换软件呢，用面向对象高级语言写代码然后编译成字节码文件使用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599613382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":6,"child_discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1541014,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/96/73ff13a0.jpg","nickname":"天亮前说晚安","note":"","ucode":"1D82EE562A7C71","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":335031,"discussion_content":"Java不就是这么做的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608077422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":304553,"ip_address":""},"score":335031,"extra":""},{"author":{"id":1541014,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/96/73ff13a0.jpg","nickname":"天亮前说晚安","note":"","ucode":"1D82EE562A7C71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":338432,"discussion_content":"我指的是编译阶段就直接生成指令集文件。不是加载运行，最后还要虚拟机转","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609290741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":335031,"ip_address":""},"score":338432,"extra":""},{"author":{"id":1116001,"avatar":"https://static001.geekbang.org/account/avatar/00/11/07/61/8adbd0ae.jpg","nickname":"李凯旋","note":"","ucode":"FC267DD00F620D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1541014,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/96/73ff13a0.jpg","nickname":"天亮前说晚安","note":"","ucode":"1D82EE562A7C71","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343010,"discussion_content":"关键要跨平台","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610901803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":338432,"ip_address":""},"score":343010,"extra":""}]},{"author":{"id":1455958,"avatar":"https://static001.geekbang.org/account/avatar/00/16/37/56/11068390.jpg","nickname":"倡印","note":"","ucode":"4F53AA5D017D89","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292585,"discussion_content":"大佬就是大佬","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595257718,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1283461,"avatar":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","nickname":"杨锋","note":"","ucode":"85A7828A538FB0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284936,"discussion_content":"厉害啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592673527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1314724,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/a4/0b49469f.jpg","nickname":"木子00","note":"","ucode":"8F78CA722EB29B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276018,"discussion_content":"讲的太厉害了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590801750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1736148,"avatar":"","nickname":"Geek_jerry","note":"","ucode":"684923936D7849","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267952,"discussion_content":"个人认为面向对象语言就是在面向过程的语言上的基础上升级得来的。目的就是为了方面大家从人的视角不是从机器的视角设计开发项目","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589716760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104310,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d9/b6/4c498c17.jpg","nickname":"1620","note":"","ucode":"C9222A5CE4723C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":224700,"discussion_content":"赞\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586324330,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1225224,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","nickname":"尔冬橙","note":"","ucode":"0B013A49BC18DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":217963,"discussion_content":"写的真好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585590303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1734795,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/78/8b/421cb2c4.jpg","nickname":"成活","note":"","ucode":"F8840EE4DC3969","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205874,"discussion_content":"手动点赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584352659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1235764,"avatar":"https://static001.geekbang.org/account/avatar/00/12/db/34/6b8cee97.jpg","nickname":"瘦风","note":"","ucode":"24CC2F8786D884","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":160555,"discussion_content":"赶紧拿出小本本记录下来📝","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580815944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1625618,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ce/12/1488e361.jpg","nickname":"小明","note":"","ucode":"5A0357E9849226","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102168,"discussion_content":"学习了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577327857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1608879,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8c/af/debec40c.jpg","nickname":"长夏江村","note":"","ucode":"79921B6F7760B2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62173,"discussion_content":"理解深刻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574820889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":5,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151616,"user_name":"猫切切切切切","can_delete":false,"product_type":"c1","uid":1075033,"ip_address":"","ucode":"F350BA1B7FFDC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","comment_is_top":false,"comment_ctime":1573751345,"is_pvip":true,"discussion_count":8,"race_medal":0,"score":"1152624986673","product_id":100039001,"comment_content":"操作系统是业务无关的，它更接近于底层计算机，因此更适合用面向过程的语言编写。而接近业务的也就是接近人的软件，则更适合用面向对象的语言编写。","like_count":269,"discussions":[{"author":{"id":1102062,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","nickname":"LYy","note":"","ucode":"8D5C39B9531E71","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51029,"discussion_content":"业务无关不等于适合用面向过程的编程语言，反倒是操作系统、中间件、框架这种业务无关的软件更需要用面向对象的思想去抽象和设计。\n面向对象思想的落地不一定要依托于面向对象语言，操作系统的设计是很面向对象的。","likes_number":30,"is_delete":false,"is_hidden":false,"ctime":1573801607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1075033,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","nickname":"猫切切切切切","note":"","ucode":"F350BA1B7FFDC4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1102062,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","nickname":"LYy","note":"","ucode":"8D5C39B9531E71","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":51330,"discussion_content":"有道理，使用非面向对象的语言一样可以写出面向对象的程序。\n\n操作系统的实现使用什么语言，关注的或许更多应该是其效率，而操作系统的设计才更多需要关心面向过程还是面向对象。\n\n所以操作系统使用C，是因为它更接近于底层，效率更高，但用C编写的操作系统同样应该使用面向对象设计，因为这无疑是个规模庞大逻辑复杂的程序。","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1573833756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51029,"ip_address":""},"score":51330,"extra":""},{"author":{"id":2460726,"avatar":"https://static001.geekbang.org/account/avatar/00/25/8c/36/48b9370a.jpg","nickname":"汤瑞麟","note":"","ucode":"18D4B4D32E82BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1075033,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","nickname":"猫切切切切切","note":"","ucode":"F350BA1B7FFDC4","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":387161,"discussion_content":"并不是因为C效率更高，而且操作系统作为和硬件直接交互的最底层软件。写他的语言需要提供直接访问内存的方案。但是现在绝大多数高级语言都是不允许直接访问内存的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628019299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51330,"ip_address":""},"score":387161,"extra":""},{"author":{"id":2460726,"avatar":"https://static001.geekbang.org/account/avatar/00/25/8c/36/48b9370a.jpg","nickname":"汤瑞麟","note":"","ucode":"18D4B4D32E82BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1075033,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","nickname":"猫切切切切切","note":"","ucode":"F350BA1B7FFDC4","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":387162,"discussion_content":"或者说并不完全因为","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628019314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51330,"ip_address":""},"score":387162,"extra":""}]},{"author":{"id":1734611,"avatar":"","nickname":"Mirinda","note":"","ucode":"D045188230CC08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54891,"discussion_content":"我觉得  操作系统还是考虑了效率的问题, 因为里面还有很大一部分汇编语言. 操作系统一样 也是一种业务,说他不是业务那真是外行.","likes_number":18,"is_delete":false,"is_hidden":false,"ctime":1574322651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1249136,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0f/70/759b1567.jpg","nickname":"张飞online","note":"","ucode":"C9787E4B35888C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53717,"discussion_content":"说的简直外行，第一，操作系统用c是因为那时候没有其他语言，这是根本，第二操作系统的代码你看看内核那个框架不是用结构体设计为面相对象的","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1574211541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1075033,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","nickname":"猫切切切切切","note":"","ucode":"F350BA1B7FFDC4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1249136,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0f/70/759b1567.jpg","nickname":"张飞online","note":"","ucode":"C9787E4B35888C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54730,"discussion_content":"嗯，已经反省了，在第一条回复的评论里。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574311614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":53717,"ip_address":""},"score":54730,"extra":""}]},{"author":{"id":1485185,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a9/81/385b09dd.jpg","nickname":"张小俊","note":"","ucode":"42B37D50B321B9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87221,"discussion_content":"因为那时候还没有C++","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576653257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151628,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1573765740,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"375235920492","product_id":100039001,"comment_content":"思考题<br>大学学习操作系统的时候，大部分内容已经忘了，还记得老师说过，虽然操作系统是用C语言写的，但是面向对象的思想早已深入到操作系统的源代码中。","like_count":87,"discussions":[{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414431,"discussion_content":"使用面向过程的语言来编写编程过程的代码/狗头","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636735248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151847,"user_name":"LYy","can_delete":false,"product_type":"c1","uid":1102062,"ip_address":"","ucode":"8D5C39B9531E71","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","comment_is_top":false,"comment_ctime":1573799776,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"345171183456","product_id":100039001,"comment_content":"操作系统虽然是用面向过程的C语言实现的 但是其设计逻辑是面向对象的。<br>C语言没有类和对象的概念，但是用结构体（struct）同样实现了信息的封装，内核源码中也不乏继承和多态思想的体现。<br>面向对象思想，不局限于具体语言。","like_count":81},{"had_liked":false,"id":151631,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1573770474,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"306516448490","product_id":100039001,"comment_content":"我们以历史的时间线看看这两种语言的演进过程。<br>1969年贝尔实验室提出Unix操作系统<br>1972年贝尔实验室的Dennis Ritchie开发C语言。<br>1973年他用C语言重写了Unix。<br>1991年Linus Torvalds提出Linux。<br><br>另外一条线面向对象语言的发展：<br>1972年第一个面向对象的编程语言是Simula发布。<br>1996年，Java1.0发布，流行的主要原因是jvm，Write Once, Run Anywhere（编写一次，到处安装JRE）<br><br>从时间上看，面向对象概念的提出晚于面向过程。C语言因商业应用成熟要比面相对象的编程语言早。<br><br>C语言的流行主要是因为Unix和Linux操作系统的实现基于C语言。类Unix系统可以运行在服务器，嵌入式设备，移动设备上。<br><br>一个东西的好坏要综合考虑：面向过程和面向对象各有各的优缺点。一门编程语言的提出是为了解决某些特定的问题。面向对象和面向过程在应用上各有各的位置。","like_count":71,"discussions":[{"author":{"id":1046302,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","nickname":"有铭","note":"","ucode":"2C7CB36CA5C04C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51052,"discussion_content":"你不能从面向对象里把c++去掉了。实际上c++才是面向对象大面积应用的第一个语言。虽然它的面向对象有很多让人诟病的地方","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573805335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53085,"discussion_content":"我觉得这个角度是很准确的，像操作系统这样的庞杂，其实还是很适合使用面向对象的方式来实现","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574130428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51073,"discussion_content":"很好的补充，谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573807633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152331,"user_name":"寒江独钓者","can_delete":false,"product_type":"c1","uid":1681787,"ip_address":"","ucode":"040E088986866A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLHtezkm2QCpQSD2sp0GhUmdTNhCfbtsPXGhXxUfwrDp4jQQfbWicI0a94zibK6xCvAEWdO48aKoEhg/132","comment_is_top":false,"comment_ctime":1573974636,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"242092143212","product_id":100039001,"comment_content":"读过linux内核源码和python解释器源码的应该都明白，所谓面向过程的C语言照样可以实现面向对象的思想，有很多设计都是非常优雅的，付出的代价并不高，我并不认为面向对象编程语言做相同的事情付出的代价会更低。编程思想、设计模式跟语言是没有关系的，编程思想和设计模式是指导我们编程的，而编程语言只是一种实现工具罢了。","like_count":56,"discussions":[{"author":{"id":1444483,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","nickname":"风","note":"","ucode":"E1CE0825AAF805","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301630,"discussion_content":"对操作系统和解释器这种底层软件而言，它们的变化性不大，功能需求清晰单调，所以用C语言按面向对象的思想去写，会感觉也没付出太多额外的代价。\n但如果换成是业务类代码，比如UI应用，如果用C，用面向对象去写，付出的额外代价，那就不可小视了","likes_number":18,"is_delete":false,"is_hidden":false,"ctime":1598592375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200660,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/14/cb118a61.jpg","nickname":"键舞飞扬","note":"","ucode":"4EC7A8D2E7AC78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341849,"discussion_content":"即便是工具，也是为了解决某些问题的，如果不能为面向对象带来好处，还要面向对象语言干什么?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610537181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152706,"user_name":"养成好习惯","can_delete":false,"product_type":"c1","uid":1388018,"ip_address":"","ucode":"7919C9592E2B2C","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/f2/07b94d3c.jpg","comment_is_top":false,"comment_ctime":1574066918,"is_pvip":false,"replies":[{"id":"58736","content":"函数式编程让写代码更加简单些，封装了很多设计模式、并发处理，可能是个趋势。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574129035,"ip_address":"","comment_id":152706,"utype":1}],"discussion_count":4,"race_medal":0,"score":"117538183910","product_id":100039001,"comment_content":"go语言大力推举函数式编程，这是趋势吗老师","like_count":28,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474906,"discussion_content":"函数式编程让写代码更加简单些，封装了很多设计模式、并发处理，可能是个趋势。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574129035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299436,"discussion_content":"go哪有大力推举函数式编程？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597679703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1019568,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","nickname":"CcczzZ","note":"","ucode":"5F46DA5053D2BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393874,"discussion_content":"函数是&#34;一等公民&#34;","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1631622667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299436,"ip_address":""},"score":393874,"extra":""},{"author":{"id":1200650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/0a/65976e95.jpg","nickname":"kougazhang","note":"","ucode":"E9AD678FCEC75D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1019568,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","nickname":"CcczzZ","note":"","ucode":"5F46DA5053D2BB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533789,"discussion_content":"函数一等公民和函数式编程差很远吧？\ngo 是现代化的C语法，语言层面支持了并发","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637976002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":393874,"ip_address":""},"score":533789,"extra":""}]}]},{"had_liked":false,"id":151722,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1573781855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"117537898847","product_id":100039001,"comment_content":"设计模式_06<br>操作系统的源码一直没读过，但我认为如此复杂的系统设计，(站在现在的时间点)用面向对象风格(或实现相同目的其他方式)来编写代码是更合适的，而且从Linux的模块化分来看，推测有类似的实践。<br><br>老话说, 机器能读懂所有代码, 但人不一定. 对于机器来说, 每一次业务调用流程都是序列化的, 机器并不在乎面向对象, 但人在乎. 正如本文所讲, 编程语言离机器越来越远, 离人越来越近. 为了迁就人, 我们使用了执行效率更低的语言, 有了更多的中间环节, 占用了更大的内存空间, 换来的是这个行业的蓬勃发展以及让人类的便捷生活和能力延伸.","like_count":27},{"had_liked":false,"id":151601,"user_name":"lijun","can_delete":false,"product_type":"c1","uid":1116095,"ip_address":"","ucode":"69EC8B86211AD9","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/bf/49f385ec.jpg","comment_is_top":false,"comment_ctime":1573747545,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"91768060761","product_id":100039001,"comment_content":"深夜追设计模式！🤑","like_count":21,"discussions":[{"author":{"id":1448863,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","nickname":"tuyu","note":"","ucode":"B235325B541408","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50772,"discussion_content":"加一","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573762989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50759,"discussion_content":"哈哈，老弟还没睡呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573749184,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170127,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1578535501,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"83182914125","product_id":100039001,"comment_content":"OOP 更能应付复杂流程的程序开发，自己是深有体会。<br><br>去年做了一个功能，第一版着急上线，就照着流程图翻译，最后就是一组顺序执行的方法集。if 分支特别多。<br><br>上线后有空，自己重构了一版。这次是翻译了泳道图：data_provider、rule_filter_chain、data_consumer 和 data_writer。<br>data_provider 提供 3 种类型的数据。每种类型数据有 2 种规则。匹配规则后，会有一些数据处理，如与订单绑定、返佣记录等。最后是将这些数据持久化到数据库。处理过程还使用了多态特性，因此在调用 rule_filter_chain、data_consumer、data_writer 处的代码都特别精简，都是从 Map 获取处理对象，然后直接调用方法。<br><br>现在回看，重构时自己关注最多也是思考最多的是每个阶段的类对象，它的职责是什么。如入参是什么，业务逻辑处理，处理后的出参是什么。实现完这些类后，就真的是像搭积木一样将这些类串起来就可以了。就跟文章说的一样：业务建模、翻译需求为类、类之间交互。<br>重构后的代码逻辑清晰了，也更简洁了。整个业务也更容易理解了。但是有一点，重构之后，类文件也增加了挺多。但是相比一个类几百上千行代码，我更喜欢简短的类。适当的增加一些类文件，也是能接受的。<br><br>","like_count":18,"discussions":[{"author":{"id":1750549,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b6/15/e2cfd10d.jpg","nickname":"ImYours°","note":"","ucode":"51F653129034C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388078,"discussion_content":"大佬，你这个实现有没有博客或者源码？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628582586,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2463502,"avatar":"https://static001.geekbang.org/account/avatar/00/25/97/0e/d79c9a2a.jpg","nickname":"风清扬","note":"","ucode":"0C252B0910677F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357072,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615730878,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174006,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1579868251,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"48824508507","product_id":100039001,"comment_content":"我只能感叹，王争老师文章的留言是我见过最多的","like_count":11,"discussions":[{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414432,"discussion_content":"mysql45讲的也不少/dog","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636735444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1449071,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqG3dBQs7fghrraQuXztdTJjmVYicGoic85W33U9ekSL6mpKvXOANI4N7duq5rXZXc2u7GVSFXERe6A/132","nickname":"Geek_717f1d","note":"","ucode":"741C242B0BBD6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298482,"discussion_content":"多不多不好评价， 留言质量是真的高","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597308377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383760,"discussion_content":"不打广告昂  还有 儒猿 专栏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626233172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153115,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1574161119,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44523834079","product_id":100039001,"comment_content":"面向过程最主要的特点就是数据和方法相分离。我哭了，虽然一直用的是MVC框架，但是没有业务建模；基本上都是数据导向，妥妥的面向过程开发。","like_count":10,"discussions":[{"author":{"id":1283461,"avatar":"https://static001.geekbang.org/account/avatar/00/13/95/85/15cd21c2.jpg","nickname":"杨锋","note":"","ucode":"85A7828A538FB0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284938,"discussion_content":"为毛你的图像会动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592674020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151727,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1573782263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44523455223","product_id":100039001,"comment_content":"我理解C++的出现主要是为了C语言中的泛型编程问题。而Java 的出现是为了抽象对计算机的依赖，更专注于业务。对于计算机底层 C&#47;C++ 可能更适合，而 C 的对于程序员来说自由度是最大的。再看Linux的发展，1991年，林纳斯基于Unix的编写的，可能他更善于这个语言，他编写 git 的时候也是用的 C。Unix选择C也是由于自己擅长的原因","like_count":10},{"had_liked":false,"id":151664,"user_name":"未未的未来","can_delete":false,"product_type":"c1","uid":1117268,"ip_address":"","ucode":"7E271691F5BF65","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/54/b829b6cc.jpg","comment_is_top":false,"comment_ctime":1573777699,"is_pvip":false,"replies":[{"id":"58342","content":"你指出的这点很好。关于封装，有两种理解，一种是狭义的面向对象特性：封装是一种信息隐藏，需要把数据和方法放到一起，而c语言实现的代码，数据和方法是分离的。封装的另一种广义的理解，可以包含你指的封装函数。抽象实际上我们前面章节中也讲到过，比较没有特异性，有的时候不看做面向对象的特性。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573785954,"ip_address":"","comment_id":151664,"utype":1}],"discussion_count":10,"race_medal":0,"score":"40228483363","product_id":100039001,"comment_content":"疑问：<br>老师举的文件那个例子，使用面向对象编程那个，不是封装了函数，用函数对操作过程进行了抽象了吗，为什么老师说没有用到封装、抽象这些特性？<br>思考题：<br>理解，C语言虽然是面相过程语言，但是面向过程语言也可以写面向对象的，另外，C语言更贴近底层一些，写操作系统的话还是有性能上的优势。","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474569,"discussion_content":"你指出的这点很好。关于封装，有两种理解，一种是狭义的面向对象特性：封装是一种信息隐藏，需要把数据和方法放到一起，而c语言实现的代码，数据和方法是分离的。封装的另一种广义的理解，可以包含你指的封装函数。抽象实际上我们前面章节中也讲到过，比较没有特异性，有的时候不看做面向对象的特性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573785954,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1039204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","nickname":"中年男子","note":"","ucode":"027C86B3370150","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51085,"discussion_content":"那个例子里，老师说只用到了类和对象， 没有用到面向对象的四大特性，是因为这个例子只是用到了类来组织代码的方式，将数据和方法绑定到了一起。并没有权限访问控制， 比如暴露方法来修改User类的三个成员：name、age、gender。 所以说的没有用到的&#34;封装&#34;是比较狭义的“封装”，当然封装成类也是封装，只是广义上的封装。  以上，我是这么理解的。欢迎交流。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573809254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1117268,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0c/54/b829b6cc.jpg","nickname":"未未的未来","note":"","ucode":"7E271691F5BF65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1039204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","nickname":"中年男子","note":"","ucode":"027C86B3370150","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":51119,"discussion_content":"是的，有些概念没有明显的边界，不是非黑即白，提高开发效率就好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573813161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51085,"ip_address":""},"score":51119,"extra":""}]},{"author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50879,"discussion_content":"如果从贴近底层和性能上考虑为什么不用汇编语言呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573781601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1117268,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0c/54/b829b6cc.jpg","nickname":"未未的未来","note":"","ucode":"7E271691F5BF65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":50961,"discussion_content":"我只是一种猜测吧，另外，C语言是比汇编语言高级一些的语言，在开发效率上也许是一方面的考虑吧。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573793188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":50879,"ip_address":""},"score":50961,"extra":""},{"author":{"id":1039204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","nickname":"中年男子","note":"","ucode":"027C86B3370150","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":51087,"discussion_content":"汇编离人“太远”，C语言比较折中？ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573809351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":50879,"ip_address":""},"score":51087,"extra":""},{"author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1039204,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/db/64/06d54a80.jpg","nickname":"中年男子","note":"","ucode":"027C86B3370150","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":51144,"discussion_content":"感觉是，汇编对于人来阅读有难度，c就易于人阅读了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573816732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51087,"ip_address":""},"score":51144,"extra":""}]},{"author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50876,"discussion_content":"使用c语言编写的例子，你说的封装了函数，并不是指面向对象语言中的封装，面向对象的封装是抽象出数据和方法，封装到一个类中。你说的封装的函数，只是实现这个函数所需要的步骤的集合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573781487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1117268,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0c/54/b829b6cc.jpg","nickname":"未未的未来","note":"","ucode":"7E271691F5BF65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1368038,"avatar":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","nickname":"Jesse","note":"","ucode":"727CA882B84DA0","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":50960,"discussion_content":"我可能没说清楚，是C++实现的那个例子，属性和函数都已经在类里了，就是有些不太明白为什么这不是一种封装。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573793085,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":50876,"ip_address":""},"score":50960,"extra":""}]}]},{"had_liked":false,"id":151687,"user_name":"摸爬滚打三十年","can_delete":false,"product_type":"c1","uid":1240241,"ip_address":"","ucode":"764A7F920EC304","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/b1/d790b927.jpg","comment_is_top":false,"comment_ctime":1573779374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31638550446","product_id":100039001,"comment_content":"老师前几节讲的都是基本概念，每读一遍就感觉加深了一层印象和理解。学习本节最大的感受，面向对象和面向过程之间相互对比更容易理解，他们最大的区别1.代码的组织单元:面向对象是类和对象，面向过程是函数和数据。2.是否支持四大特性以及对四大特性的支持程度，面向过程不支持继承和多态，在封装和抽象上，面向对象要更加深刻一些。面向对象对类抽象，面向过程抽象成方法，面条式的执行过程，流水线的操作方式。通过访问控制，面向对象对外暴露有限的成员属性和方法。总体来说，面向对象编程更适合人的思维习惯，能够客观反映代码和真实世界的关系。我的一点体会，不知道对不对，过一段时间再来回顾一次，看到时候的理解会不会更深。","like_count":7},{"had_liked":false,"id":152006,"user_name":"hudson","can_delete":false,"product_type":"c1","uid":1746552,"ip_address":"","ucode":"55D28AD8714D90","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a6/78/d79be6fc.jpg","comment_is_top":false,"comment_ctime":1573832253,"is_pvip":false,"replies":[{"id":"58742","content":"会不会有歧义呢？","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574129769,"ip_address":"","comment_id":152006,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23048668733","product_id":100039001,"comment_content":"formatToText换成toString是不是更符合习惯？","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474683,"discussion_content":"会不会有歧义呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574129769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2463502,"avatar":"https://static001.geekbang.org/account/avatar/00/25/97/0e/d79c9a2a.jpg","nickname":"风清扬","note":"","ucode":"0C252B0910677F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357073,"discussion_content":"会有歧义，确实是。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615730942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1898112,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","nickname":"WilliamVector","note":"","ucode":"E0D3C3D4FCB7C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304263,"discussion_content":"特定用途的字符串转换，最好不要覆盖为toString。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599531423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151991,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1573829284,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"23048665764","product_id":100039001,"comment_content":"阅读过Linux的文件系统的代码，就是利用函数指针使用了面向对象和策略模式的思想—有抽象的虚拟文件系统对外提供稳定的接口，下层兼容各种具体的文件格式的具体实现。只不过，如老师文中所说，实现的难度比直接利用语言特性要高不少。","like_count":5,"discussions":[{"author":{"id":1608615,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8b/a7/b6471f02.jpg","nickname":"远逝的栀子花","note":"","ucode":"77DCF684BABEEF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556224,"discussion_content":"感觉跟C++的类对象函数指针是差不多的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647255279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151849,"user_name":"😚 46","can_delete":false,"product_type":"c1","uid":1433535,"ip_address":"","ucode":"EED0EBBBF80A43","user_header":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","comment_is_top":false,"comment_ctime":1573799857,"is_pvip":false,"replies":[{"id":"58601","content":"有的 实战篇","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574040050,"ip_address":"","comment_id":151849,"utype":1}],"discussion_count":4,"race_medal":0,"score":"23048636337","product_id":100039001,"comment_content":"文中这一段，“如何给业务建模，如何将需求翻译为类，如何给类之间建立交互关系”，后续会有章节展开简介吗？","like_count":5,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474635,"discussion_content":"有的 实战篇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574040050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53598,"discussion_content":"哈哈,全篇这句话就吸引人,却没能深刻理解.\n\n如何给业务建模，如何将真实的世界映射为类或者对象，这让我们更加能聚焦到业务本身，而不是思考如何跟机器打交道\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574178007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369063,"discussion_content":"去看《编程的逻辑》李运华老师在这本书里给了完整的方法论，很赞👍🏻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618917532,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":53598,"ip_address":""},"score":369063,"extra":""}]},{"author":{"id":1433535,"avatar":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","nickname":"😚 46","note":"","ucode":"EED0EBBBF80A43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":52404,"discussion_content":"期待~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574047624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151730,"user_name":"Jesse","can_delete":false,"product_type":"c1","uid":1368038,"ip_address":"","ucode":"727CA882B84DA0","user_header":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","comment_is_top":false,"comment_ctime":1573782390,"is_pvip":true,"replies":[{"id":"58335","content":"这个也算是个不错的理由。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1573785440,"ip_address":"","comment_id":151730,"utype":1}],"discussion_count":4,"race_medal":0,"score":"18753651574","product_id":100039001,"comment_content":"想问个问题，面向对象语言是不是没有办法直接操作系统资源？而C语言可以，所以C语言成为操作系统的首选语言，是这样吗","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474591,"discussion_content":"这个也算是个不错的理由。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573785440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541894,"discussion_content":"rust呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640596202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177921,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f9/41/411b1753.jpg","nickname":"石仔","note":"","ucode":"974E4604CE2213","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291061,"discussion_content":"或者说cpu本身就是个面向过程的物件,所以只能接受面向过程的指令所以只有面向过程的语言能更好更快的操作它.面向对象的语言必须翻译成面向对象的指令","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594694652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1177921,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f9/41/411b1753.jpg","nickname":"石仔","note":"","ucode":"974E4604CE2213","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291060,"discussion_content":"直接操作系统资源是啥意思,系统底层是C写的,那么必然只能通过c提供的接口来调用底层,所有上层应用都无法避免把.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594694498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210407,"user_name":"高鹏0409","can_delete":false,"product_type":"c1","uid":1928337,"ip_address":"","ucode":"1833CA764B6A46","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/91/8268a753.jpg","comment_is_top":false,"comment_ctime":1587738948,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14472640836","product_id":100039001,"comment_content":"Python 更简洁清晰，写更少的代码，让计算机做更多事。看起来更像未来的编程语言啊！","like_count":3,"discussions":[{"author":{"id":1200660,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/14/cb118a61.jpg","nickname":"键舞飞扬","note":"","ucode":"4EC7A8D2E7AC78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341851,"discussion_content":"代码更少有时是因为动态语言的原因，是以牺牲性能为代价的。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1610537412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155738,"user_name":"CHS","can_delete":false,"product_type":"c1","uid":1240227,"ip_address":"","ucode":"3D8B2DABC0A1D6","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/a3/28763399.jpg","comment_is_top":false,"comment_ctime":1574746557,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14459648445","product_id":100039001,"comment_content":"不矛盾，面向对象是一种思想，语言是一种工具，任何语言都可以使用面向对象的思想来写代码。系统使用C语言，是因为C语言更加底层，执行效率高。","like_count":3},{"had_liked":false,"id":152021,"user_name":"筱乐乐哦","can_delete":false,"product_type":"c1","uid":1307611,"ip_address":"","ucode":"AE92539F0419C3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/db/5b7a8fd8.jpg","comment_is_top":false,"comment_ctime":1573836981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14458738869","product_id":100039001,"comment_content":"我的理解不矛盾，理由如下<br>1、操作系统更多的是和硬件打交道，需要考虑到语言本身翻译成机器语言的成本和执行效率，尤其总要。<br>2、如linux内核、总线、文件系统网络等的设计，也是具有面向对象过程的思想，很好的支持了常见的文件系统的挂在、内核的升级和对硬件的热插拔、网络等的处理，常见的服务器多数都是linux，为啥不用window，我的理解和设计实现有很大的关系，尤其是网络、安全、权限、标准等等<br>3、linux操作系统，本身就是一个大的抽象，属于一个硬件和高级软件连接的桥梁<br><br>也希望争哥发表下自己的看法，指点指点","like_count":3},{"had_liked":false,"id":151609,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1573749130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14458651018","product_id":100039001,"comment_content":"关于课堂讨论我觉得不矛盾，老师说的应对大规模复杂程序的开发可能是偏向现实世界抽象出来的业务很复杂，但是操作系统的复杂是面对计算机底层的，不是针对我们理解的业务的复杂，同时操作系统也是作为一个底层的存在，针对性能有更高的要求。","like_count":3},{"had_liked":false,"id":153141,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1574167123,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10164101715","product_id":100039001,"comment_content":"讨论题发表一下自己的意见<br>用面向对象语言结合面向过程思想写程序，这就相当于手握一把屠龙刀，却只是把它当作一把普通的刀剑来用。相反我们也可以用面向过程语言结合面向对象思想来写程序，那也能达到很好的易复用、易扩展、易维护的效果，相对来说代价会比较高，毕竟语言本身没有提供这种语法机制，需要在我们编程中体现处理实属不易。<br>","like_count":2},{"had_liked":false,"id":152013,"user_name":"猫切切切切切","can_delete":false,"product_type":"c1","uid":1075033,"ip_address":"","ucode":"F350BA1B7FFDC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","comment_is_top":false,"comment_ctime":1573833868,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10163768460","product_id":100039001,"comment_content":"思考题<br><br>使用非面向对象的语言一样可以写出面向对象的程序。<br><br>操作系统的实现使用什么语言，关注的或许更多应该是其效率，而操作系统的设计才更多需要关心面向过程还是面向对象。<br><br>所以操作系统使用C，是因为它更接近于底层，效率更高，但用C编写的操作系统同样应该使用面向对象设计，因为这无疑是个规模庞大逻辑复杂的程序。","like_count":2},{"had_liked":false,"id":151797,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1573793391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163727983","product_id":100039001,"comment_content":"OOP 是“离机器更远、离人更近、更智能”<br>面向过程语言(例如C)离机器“更近”，Unix&#47;Linux都是离硬件设备最近的操作系统级别的系统，所以C语言是更合适的。","like_count":2},{"had_liked":false,"id":151656,"user_name":"连边","can_delete":false,"product_type":"c1","uid":1391748,"ip_address":"","ucode":"54B5DA38449728","user_header":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","comment_is_top":false,"comment_ctime":1573776938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163711530","product_id":100039001,"comment_content":"思考，其实用什么语言来做什么软件，和几个方面有关系。1，软件诞生的时代，在它产生的时候，面向对象编程思想不是主要的趋势；2，发布软件的方式，如以开源的方式发布，它的成熟也要和其他开发者的水准相关，在当时的时代，太过超前的思想，没有很多人的参与，也诞生不了出名的软件；3，适用性，操作系统，更多的还是和计算机打交道，虽然思想上面向对象更适合人的思维，但是操作系统这一层，符合计算机思想的编程语言更适用，面向对象编程语言更适合开发应用软件，符合一般程序员的思维，更多的是跟操作系统打交道，等于中间有一种层级的关系。操作系统更像一个抽象的中间层。","like_count":2},{"had_liked":false,"id":151615,"user_name":"家","can_delete":false,"product_type":"c1","uid":1239284,"ip_address":"","ucode":"CA3597C948E9CF","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/f4/d1fcfa4d.jpg","comment_is_top":false,"comment_ctime":1573750621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163685213","product_id":100039001,"comment_content":"作为新手的我觉得不矛盾。用面向过程的语言也是可以实现面向对象的思想的。但是一些面向对象的语言的特性貌似需要操作系统来完成，应该不能直接用特别高级的语言来开发操作系统吧。希望老师指正，希望更多志同道合的战友一起交流进步。","like_count":2},{"had_liked":false,"id":151613,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1573750106,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10163684698","product_id":100039001,"comment_content":"我个人认为操作系统之所以用C语言写的可能是性能更高一点吧，还有就是c更底层一些，面向对象语言更高级一些，更先进一些，适合大型网站或者app开发等。所以每种语言都有不同的使用场景。JAVA是世界上最好的语言，不接受任何反驳。别跟老夫扯什么php！","like_count":2,"discussions":[{"author":{"id":1082785,"avatar":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","nickname":"郭俊杰","note":"","ucode":"D328E5738A4413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264841,"discussion_content":"不亏是编程界的小学生，不把我们py放在眼里呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589350874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286440,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1617321027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5912288323","product_id":100039001,"comment_content":"课堂讨论，个人理解：Unix，Linux这些复杂的系统虽然用了面向过程的C语言编写，但运用的却是面向对象的编程思想，比如，系统中的文件，目录，设备，进程，线程等都可以看成是对象，它们之间的交互也可以看作是对象之间的一种协作，因此，面向对象的编程和所用的语言无关，只和处理思想有关，这就像一个使剑的高手，哪怕手中无剑，照样可以把自己的双手变成一把锋利的宝剑。","like_count":1},{"had_liked":false,"id":269729,"user_name":"Am0xil","can_delete":false,"product_type":"c1","uid":2153943,"ip_address":"","ucode":"CE2A04F9FF9FE6","user_header":"https://static001.geekbang.org/account/avatar/00/20/dd/d7/885e4ce3.jpg","comment_is_top":false,"comment_ctime":1608773627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5903740923","product_id":100039001,"comment_content":"我觉得应该是面向对象语言更符合人类的思考逻辑，而面向过程语言则更符合机器的执行逻辑","like_count":1},{"had_liked":false,"id":214180,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1588671413,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5883638709","product_id":100039001,"comment_content":"<br>1. 什么是面向过程编程？什么是面向过程编程语言？<br>面向过程，是一种面向计算机的思考方式，通过指令告诉计算机如何执行<br>面向对象，是一种面向人的思考方式，思考如何将现实世界的需求，通过指令让计算机执行<br>2. 面向对象编程相比面向过程编程有哪些优势？<br>在思想上：面向对象最重要的优势，他是以解决描述真实世界的需求为出发点的。而面向过程是以命令计算机如何执行为出发点的。所以，面向对象语言相对而言，比面向过程语言解决真实世界的问题效率更高。（当然，对于计算机则不同）<br>在技术上：面向对象晚于面向过程诞生，吸收并加强了前者的优秀特性，如抽象，面向过程的抽象是方法，函数的抽象。而面向对象则通过“类”这一特性提供更高纬度的抽象。可以帮助开发人员，先将复杂问题拆解为小的模块问题，在将主要的问题明确后，在专注于业务细节。<br>面向对象还基于类这一概念，提供了封装特性，将方法和数据绑定，实现了将数据访问权限控制，提高了数据安全性和可维护性。<br>面向对象的继承概念还是要依托于类的概念，可以将多处的相同代码归集到一个类中，在其他要使用的地方通过继承就能获得相同能力。<br>多态，一个函数，可以有多种实现方法。这就像我们生活中，做晚餐这件事，可以做多种做法，煎炒烹炸都行。只有遵照基本的条件就行<br>","like_count":1},{"had_liked":false,"id":204116,"user_name":"🐒🐱🐭🐮🐯🐰🐶","can_delete":false,"product_type":"c1","uid":1189080,"ip_address":"","ucode":"52426AE36A9A39","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d8/aa41d743.jpg","comment_is_top":false,"comment_ctime":1586334928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881302224","product_id":100039001,"comment_content":"一个是基础，一个上层建筑。两个并不冲突","like_count":1},{"had_liked":false,"id":190309,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1921287,"ip_address":"","ucode":"64BBE005890845","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/07/b5a945b6.jpg","comment_is_top":false,"comment_ctime":1584628291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879595587","product_id":100039001,"comment_content":"通过这一讲的内容，让我比较清晰深刻和透彻的了解到计算机编程语言的演化历史，从指令到汇编到面向过程，再到现如今最流行的面向对象的高级编程语言。看到大家对于课堂问题的讨论更是像如获珍宝，感谢“极客时间”，感谢王争前辈，感谢留言的大咖童鞋们，这是“极客”们的天堂。","like_count":1},{"had_liked":false,"id":169526,"user_name":"都市鸽","can_delete":false,"product_type":"c1","uid":1061452,"ip_address":"","ucode":"26D36A95EB542D","user_header":"https://static001.geekbang.org/account/avatar/00/10/32/4c/1a730e4b.jpg","comment_is_top":false,"comment_ctime":1578371249,"is_pvip":false,"replies":[{"id":"65733","content":"不算，是一种新的编程范式","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1578379070,"ip_address":"","comment_id":169526,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5873338545","product_id":100039001,"comment_content":"go 语言的函数式编程算面向过程吗","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480596,"discussion_content":"不算，是一种新的编程范式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578379070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159497,"user_name":"爱水人家","can_delete":false,"product_type":"c1","uid":1730305,"ip_address":"","ucode":"0C94C6ACBC9CEB","user_header":"https://static001.geekbang.org/account/avatar/00/1a/67/01/44626cb9.jpg","comment_is_top":false,"comment_ctime":1575638657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870605953","product_id":100039001,"comment_content":"没有矛盾吧。因为操作系统是连接硬件和软件系统的一种中间件，由于它需要与硬件打交道，因此必须要面向过程的编程语言开发，这样才能指挥硬件工作。真是感觉现在的高级编程语言越来越智能了，尤其是涉及数据分析的编程语言，比如python。感觉这是一个大趋势。看完这节更加下定了我的决心，未来半年我一定要学习python。","like_count":1},{"had_liked":false,"id":152777,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1574078827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869046123","product_id":100039001,"comment_content":"我觉得主要原因还是因为大部分面向对象编程语言不能操作底层 理论上 只要语言支持操作底层 就可以写操作系统 c是最早出现的 比较接近人类思维的 能够操作底层的编程语言 并且编写出经典的操作系统而一炮走红 跟是不是面向过程风格面向对象风格没太大关系 操作系统复杂主要是硬件管理的复杂以及“如何高效操作”的复杂 简单说 随着发展 计算机被赋予了越来越多的能力及功能导致管理硬件的操作系统越来越复杂 ","like_count":1},{"had_liked":false,"id":152381,"user_name":"dagecao","can_delete":false,"product_type":"c1","uid":1542026,"ip_address":"","ucode":"5CC0F663713B39","user_header":"https://wx.qlogo.cn/mmopen/vi_32/cFtcpjRVvclDDXGVbzHuu0vWgpEzJYMR7ibe1EoepV2XLDsYVtX4merBZibSOtk90s0fPpZ5CMHASJhOegomXWhA/132","comment_is_top":false,"comment_ctime":1573986783,"is_pvip":false,"replies":[{"id":"58602","content":"每周更新三篇","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574040063,"ip_address":"","comment_id":152381,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5868954079","product_id":100039001,"comment_content":"暂时就只有这么几节课吗？啥时候发新的课程呢？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474798,"discussion_content":"每周更新三篇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574040063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152318,"user_name":"番茄炒西红柿","can_delete":false,"product_type":"c1","uid":1690242,"ip_address":"","ucode":"13F47BABAB2110","user_header":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","comment_is_top":false,"comment_ctime":1573970684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868937980","product_id":100039001,"comment_content":"老师没讲函数编程，但我看了一下相关的优点，感觉函数式编程的优点是除了继承oop的优点外还有并发和无状态这两个特点，而这种特点和现在云服务切合度很高，但现在问题是对人的要求高","like_count":1},{"had_liked":false,"id":152028,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1573841403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868808699","product_id":100039001,"comment_content":"个人感觉原因有二：<br>1、先来后到的原因，开发unix时没有面向对象语言或者面向对象还没开始流行<br>2、C语言的性能比Java等其他面向对象语言要好","like_count":1},{"had_liked":false,"id":151959,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1573822724,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5868790020","product_id":100039001,"comment_content":"历史原因吧，操作系统的开发也可以用面向对象的方式，比如把cpu memory，gpu等等都抽象成类，提供操作函数，也可以用面向对象来实现","like_count":1},{"had_liked":false,"id":151908,"user_name":"xavier","can_delete":false,"product_type":"c1","uid":1243128,"ip_address":"","ucode":"2F7918EA37ED9F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/f8/3c0a6854.jpg","comment_is_top":false,"comment_ctime":1573811319,"is_pvip":false,"replies":[{"id":"58746","content":"理解的没错。","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1574130139,"ip_address":"","comment_id":151908,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5868778615","product_id":100039001,"comment_content":"是否可以这样理解，在例子代码中，将类一层层往下剖析，单独看类中的某个函数方法，可能是面向过程的。但当封装成一个类并使用时，就是面向对象的。","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474648,"discussion_content":"理解的没错。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574130139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151731,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1573782658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868749954","product_id":100039001,"comment_content":"不矛盾。<br>第一：C语言更偏底层，对于操作系统这种偏底层的东西更适用，性能更好。<br>第二：C语言出现较早，当时面向对象编程语言还不太成熟。","like_count":1},{"had_liked":false,"id":151696,"user_name":"ismind","can_delete":false,"product_type":"c1","uid":1138710,"ip_address":"","ucode":"7AADD673ED3BC4","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/16/d1dd4972.jpg","comment_is_top":false,"comment_ctime":1573779995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868747291","product_id":100039001,"comment_content":"1，c语言可以直接编译成cpu可以理解的代码格式，而这些高级语言，比如Java，语法复杂，抽象程度高，直接在硬件上运行这种复杂的程序不太现实。<br>2，面向过程的语言也可以实现面向对象的特点，只不过要付出一些代价。<br>3，面向过程更符合机器思维，linux等系统是与机器打交道的，所以用面向对象就不合适了，面向对象更贴近人的思维。<br>4，还和语言的发展历史有关，语言是逐步发展的，查了下资料，20世纪70年代出现了操作系统，当时Ritchie用c语言将unix的核心重写了一下，也就是说用c语言取代了汇编语言。很明显，那个时候比较适合的语言就是c语言。（个人表述问题，应该了解我想表达的意思）<br>个人拙见。","like_count":1},{"had_liked":false,"id":151663,"user_name":"安静的boy","can_delete":false,"product_type":"c1","uid":1196475,"ip_address":"","ucode":"F5F44B75228A85","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/bb/21ce60d2.jpg","comment_is_top":false,"comment_ctime":1573777512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868744808","product_id":100039001,"comment_content":"思考题:面向过程编程语言也可以利用面向对象的风格来编写代码，就是实现起来没有面向对象编程语言那么容易。我想如果先出来的需要是面向对象的，搞不好liux就是面向对象语言写的了","like_count":1},{"had_liked":false,"id":151658,"user_name":"cc","can_delete":false,"product_type":"c1","uid":1592092,"ip_address":"","ucode":"FF41E5D87BAD76","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/1c/5eb03a91.jpg","comment_is_top":false,"comment_ctime":1573777131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868744427","product_id":100039001,"comment_content":"我的理解是：越底层的语言越接近机器码，效率越高，对硬件控制力更好。所以unix linux用c。<br>还有一点是不是和出世时间有关呢。linux是91年发行的。C++的第一个国际标准98年才有。。<br>这么一说时间线是主要原因？🤔️","like_count":1},{"had_liked":false,"id":151646,"user_name":"时光勿念","can_delete":false,"product_type":"c1","uid":1025003,"ip_address":"","ucode":"72C8EC5A62C700","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/eb/d26459ae.jpg","comment_is_top":false,"comment_ctime":1573775257,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"5868742553","product_id":100039001,"comment_content":"其实我一直觉得，如果有下一代编程语言，可能就是写设计模式了，程序员理解业务，然后描述成一种或多种设计模式，编译器生成代码，当然这里所说的是模式不止是现有的二十三种设计模式，而是包含一些更基础的操作的类似的东西","like_count":1,"discussions":[{"author":{"id":1328354,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/e2/763526e9.jpg","nickname":"程晓擘","note":"","ucode":"96986D5AE2B96C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51155,"discussion_content":"过不了多久，AI就可以编程了，我们提供逻辑，计算机就帮我们把代码写好了。哈哈。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573818072,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206787,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6a/03/cb597311.jpg","nickname":"远心","note":"","ucode":"1157202C315655","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50978,"discussion_content":"你这个想法挺好，我觉得可以起个名字，叫做面向思路编程。这感觉比写需求规格说明书更容易实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573795677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1025003,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/eb/d26459ae.jpg","nickname":"时光勿念","note":"","ucode":"72C8EC5A62C700","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1206787,"avatar":"https://static001.geekbang.org/account/avatar/00/12/6a/03/cb597311.jpg","nickname":"远心","note":"","ucode":"1157202C315655","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51017,"discussion_content":"哈哈，谢谢夸奖，不过我觉得面向思路不太好听（￣︶￣）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573799681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":50978,"ip_address":""},"score":51017,"extra":""}]},{"author":{"id":1025003,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a3/eb/d26459ae.jpg","nickname":"时光勿念","note":"","ucode":"72C8EC5A62C700","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50916,"discussion_content":"有道理，框架层面可以解决，这样来说我想要的可能只是一种更直接的描述设计思路的方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573786291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1115439,"avatar":"https://static001.geekbang.org/account/avatar/00/11/05/2f/5d93a37b.jpg","nickname":"严旭珺","note":"","ucode":"A74F0098478FC6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50846,"discussion_content":"我觉得这不是语言层面解决的问题，这应该是框架层面解决的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573779615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151625,"user_name":"Jover","can_delete":false,"product_type":"c1","uid":1148292,"ip_address":"","ucode":"0D4D45ED55C37B","user_header":"https://static001.geekbang.org/account/avatar/00/11/85/84/0dbdf8c1.jpg","comment_is_top":false,"comment_ctime":1573763938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868731234","product_id":100039001,"comment_content":"unix linux用c，跟python用c而不用cpp给我带来的疑惑几乎是一样一样的，js却是使用的cpp。难道这是历史遗留问题？","like_count":1},{"had_liked":false,"id":151602,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1573748628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868715924","product_id":100039001,"comment_content":"面相对象编程语言利用封装继承多态抽象等形式能让程序员更容易写出易扩展易维护的代码，针对复杂的程序面相对象编程能更容易写出来，针对简单的程序面相过程语言可能写的更快更好，回看历史结构化，面相对象都是为了解决某一个问题，提高生产力，前面都是我瞎扯的，我想说php是世界上最好的语言","like_count":1},{"had_liked":false,"id":358702,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"广东","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1664599086,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1664599086","product_id":100039001,"comment_content":"想知道为什么放弃函数式编程不讲","like_count":0},{"had_liked":false,"id":356537,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"浙江","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1662386635,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662386635","product_id":100039001,"comment_content":"在和操作系统交互的层面，面向过程语言对于机器更友好，更易执行。说的在处理复杂业务时，面向过程语言更好，更多的是人类应用场景的复杂。","like_count":0},{"had_liked":false,"id":355995,"user_name":"Stay_Gold","can_delete":false,"product_type":"c1","uid":1119904,"ip_address":"北京","ucode":"ACB8DCD2EF8F95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2NTTABPFibg2k9tZscOOKx9wu80a85d5HspCorO9Nibj7Z7q9v1icPTVm5ia52r0RCzEaA/132","comment_is_top":false,"comment_ctime":1661910983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661910983","product_id":100039001,"comment_content":"先总结一下本章所学：<br>1.面向过程编程：以操作为基本单元来组织代码，数据和操作互相分离，自顶向下的流程化风格，通过顺序操作数据来实现功能。<br>2.面向过程语言：以操作为基本单元来组织代码的语言，相对于面向过程语言来说没有类或者对象的概念，不能很好的支持面向对象四大特性（封装，抽象，继承，多态）。<br><br>问题<br>在文章中我讲到，面向对象编程比面向过程编程，更加容易应对大规模复杂程序的开发。但像 Unix、Linux 这些复杂的系统，也都是基于 C 语言这种面向过程的编程语言开发的，你怎么看待这个现象？这跟我之前的讲解相矛盾吗？<br>用面向过程的语言同样式可以实现面向对象风格的代码的。我相信在那些复杂系统中的很多代码风格都是面向对象的风格，同时面向对象风格编程再给程序员带来很多便利的情况下，也可能会造成很多不可控因素，这对于系统内核来说也是很大的隐患。","like_count":0},{"had_liked":false,"id":350970,"user_name":"SICUN","can_delete":false,"product_type":"c1","uid":1254261,"ip_address":"","ucode":"22A384904EB9E9","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/75/2b599841.jpg","comment_is_top":false,"comment_ctime":1657431619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657431619","product_id":100039001,"comment_content":"选择什么语言需要结合具体的场景，unix，linux这种底层的操作系统应该是需要本身资源占用少，性能好的，在当时面向对象编程语言可能也不是很成熟吧。","like_count":0},{"had_liked":false,"id":348786,"user_name":"学习学个屁","can_delete":false,"product_type":"c1","uid":1049017,"ip_address":"","ucode":"DF2D61E6FB2FCE","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","comment_is_top":false,"comment_ctime":1655391586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655391586","product_id":100039001,"comment_content":"那时候还没有其他面向对象编程语言，另外c 能直接操作硬件，您不是也说了面向过程语言也能面向对象编程","like_count":0},{"had_liked":false,"id":345744,"user_name":"姚钫","can_delete":false,"product_type":"c1","uid":1498146,"ip_address":"","ucode":"ECB8B0627A4F9B","user_header":"https://static001.geekbang.org/account/avatar/00/16/dc/22/41a390ae.jpg","comment_is_top":false,"comment_ctime":1652542196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652542196","product_id":100039001,"comment_content":"220514 day04 面向对象<br>1. 感觉自己一直没有面向对象，数据建模好像一直都没有过，我们开发流程，给需求做一个功能，我们画好时序图，设计表结构，提供给业务接口，根据接口写逻辑，<br>感觉一直都是，mvc的模式也是面向过程吧，entity是实体，service是功能，如何才能做到正规的面向对象，分析设计哪些类，该有什么属性和方法，如何交互<br>2. 写操作系统的用的面向过程的编程语言开发的，不一定写的是面向过程的风格，毕竟那一群人能力都比较强<br>","like_count":0},{"had_liked":false,"id":343871,"user_name":"李青藤","can_delete":false,"product_type":"c1","uid":1750245,"ip_address":"","ucode":"3990F6928FAE23","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b4/e5/e6d5d29a.jpg","comment_is_top":false,"comment_ctime":1651107187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651107187","product_id":100039001,"comment_content":"上帝的归上帝，凯撒的归凯撒！","like_count":0},{"had_liked":false,"id":343608,"user_name":"你听得到","can_delete":false,"product_type":"c1","uid":1516039,"ip_address":"","ucode":"2BD44F5D45F880","user_header":"https://static001.geekbang.org/account/avatar/00/17/22/07/2a82376a.jpg","comment_is_top":false,"comment_ctime":1650951389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650951389","product_id":100039001,"comment_content":"它们的劣势是什么😂","like_count":0},{"had_liked":false,"id":339082,"user_name":"Soil","can_delete":false,"product_type":"c1","uid":2870321,"ip_address":"","ucode":"3B353BC858B5AE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLE9hv64CEabxt76tQQcWDicx0sucpAApFvYoM8eXBViaJgz06EjcfJjiamSFWY9aAuxjILaPoiaa0lNw/132","comment_is_top":false,"comment_ctime":1647911251,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1647911251","product_id":100039001,"comment_content":"“如果一种新的突破性的编程语言出现，那它肯定是更加“智能”的。大胆想象一下，使用这种编程语言，我们可以无需对计算机知识有任何了解，无需像现在这样一行一行地敲很多代码，只需要把需求文档写清楚，就能自动生成我们想要的软件了。” 这一天会到来，并且必然也是硬件有了前所未有的突破。","like_count":0},{"had_liked":false,"id":338906,"user_name":"Geek_783504","can_delete":false,"product_type":"c1","uid":2743789,"ip_address":"","ucode":"549D3F0549743C","user_header":"https://static001.geekbang.org/account/avatar/00/29/dd/ed/f6c5432b.jpg","comment_is_top":false,"comment_ctime":1647784352,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647784352","product_id":100039001,"comment_content":"我觉得是关注点不同，设计网站，后台，是关注功能如何实现，而不是告诉计算机我需要执行什么指令，用面向对象作为主力语言更加符合实际开发。而操作系统，更加关注各个功能如何实现，如何告诉计算机怎么执行这条指令，相比于网站后台等，没有用很多复杂的操作去处理一个功能。","like_count":0},{"had_liked":false,"id":335146,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1645360260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645360260","product_id":100039001,"comment_content":"本人最开始做的是面向对象编程(java)，后来做的是面向函数式编程(nodejs)。<br>1.面向对象站在开发大系统的基础，的确很有优势。万物皆对象的设计，让工程边界更加清晰，而且容易维护、易拓展。<br>2.面向对象有四大特性OOP：继承、多态、抽象、封装。针对的是类。<br>3.golang是没有类class的，可以说是面向过程编程。因为也没有js那样，函数式编程灵活。<br>4.在编写大系统来说，一定要求的是规范和容易维护，而不是快速迭代。如果采用函数式编程，到你要维护迭代的时候，就开始痛苦了。<br>5.我以前做的函数式编程中，最大的痛点，就是每次迭代都要修复数据。（这种人为操控的过程，风险是非常大的）。","like_count":0},{"had_liked":false,"id":334130,"user_name":"巫山老妖","can_delete":false,"product_type":"c1","uid":1056037,"ip_address":"","ucode":"B35E2CF1B3B04E","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/25/c4cc1e9f.jpg","comment_is_top":false,"comment_ctime":1644757676,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1644757676","product_id":100039001,"comment_content":"Unix和Linux诞生的时候面向对象语言还没开始流行吧，C语言是更接近底层的语言，大多数跟硬件打交道采用C语言来实现，我理解主要有时代背景和执行效率的考虑。","like_count":0},{"had_liked":false,"id":324270,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1337016,"ip_address":"","ucode":"37D2AD591C1AEC","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/b8/ece79234.jpg","comment_is_top":false,"comment_ctime":1638352333,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638352333","product_id":100039001,"comment_content":"* 因为Linux是完全面向机器的，所以面向过程语言的“线型”特征，能更好被计算机所理解、执行。<br>* 不矛盾。老师讲的是软件系统开发，面向业务。此处说的是面向机器，更接近硬件的执行。","like_count":0},{"had_liked":false,"id":322997,"user_name":"hj_zack","can_delete":false,"product_type":"c1","uid":1181113,"ip_address":"","ucode":"53A11BAE0CEA2B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/NAcDfnQjZMSXE1ib2sAviaQFQHMsf7IJjTH73CaOic37R9QibdXNCNvzUGdqkIJYI05u3LnKmQRomqRRmMAhg9B1HQ/132","comment_is_top":false,"comment_ctime":1637681930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637681930","product_id":100039001,"comment_content":"要记住最重要的1点，面向对象编程和面向对象编程语言，是有区别的。面向对象编程语言和面向过程编程语言，都可以进行面向对象编程。只是面向对象编程语言进行面向对象编程，会更加简单","like_count":0},{"had_liked":false,"id":322205,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1637236478,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1637236478","product_id":100039001,"comment_content":"不冲突，Unix 和 Linux 是使用 C 语言进行开发的，另外 C 是高级语言性能最靠近汇编的。计算机的发展初期，配置都很低，开发人员必须节俭，必须了解底层。但是现在硬件的飞速发展，让编程语言的创造者能舍弃一些性能，换取更高的抽象，方便更多的开发者参与其中。很难想象，如果不是 C 语言，计算机能发展到今天。所以后面的语言再高级，都是 C 打底子打好了。","like_count":0},{"had_liked":false,"id":320758,"user_name":"胡皓","can_delete":false,"product_type":"c1","uid":1965051,"ip_address":"","ucode":"ECF5C14420899E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fb/fb/6db8d51e.jpg","comment_is_top":false,"comment_ctime":1636506046,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636506046","product_id":100039001,"comment_content":"思考题:<br>面向对象的语言像Java，其实是对面向过程语言(如c语音)进行了更进一步的封装，所以开发效率高，但是在执行效率上会有些损耗。而底层操作系统对效率要求是很高的，所以会用执行效率高的c语言。当然，这会让开发变难，但是世面上操作系统并不多，完全可以聚集一些能力很强的工程师来开发。而基于操作系统的应用则会很多，所以用面向对象的语言是首选。","like_count":0},{"had_liked":false,"id":313126,"user_name":"逆风一战九","can_delete":false,"product_type":"c1","uid":2143900,"ip_address":"","ucode":"83127627F6F37C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI45zO9GOMquhD0ia1wTBSwtJ1juPcpFTSrOGicGW3jf6JclaudauHicN8OpADArQKL8zPtDicEx4aicgA/132","comment_is_top":false,"comment_ctime":1632288249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632288249","product_id":100039001,"comment_content":"面向对象是一种思想，面向对象的语言提供一些语法来更好的承载数据和方法，不支持面向对象的语言，也可以写出面向对象思想的代码，c就是用struct承载数据，操作系统实现考虑用c，一个是那会儿没有java,更主要的是要与硬件打交道，c更适合","like_count":0},{"had_liked":false,"id":310479,"user_name":"像风一样","can_delete":false,"product_type":"c1","uid":1455876,"ip_address":"","ucode":"13E2CCCE3B179A","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/04/d2ab40c5.jpg","comment_is_top":false,"comment_ctime":1630670281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630670281","product_id":100039001,"comment_content":"为什么现在的操作系统基本上用C语言来实现？https:&#47;&#47;www.zhihu.com&#47;question&#47;28468921","like_count":0},{"had_liked":false,"id":306729,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1628683840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628683840","product_id":100039001,"comment_content":"Unix和Linux在一开始的时候就使用C语言进行开发，由于历史原因，现在这两个系统的内核代码也是C语言写的，不过最近R语言也有可能加入Linux系统了，可以看到技术一直在发展。另外一方面是系统内核代码要性能有极致的追求，而对比C语言，其他很多面向对象的语言还无法达到相当的性能，这也是一个关键原因吧","like_count":0},{"had_liked":false,"id":300283,"user_name":"overheat","can_delete":false,"product_type":"c1","uid":2675695,"ip_address":"","ucode":"DD82D9194C26D0","user_header":"https://static001.geekbang.org/account/avatar/00/28/d3/ef/b3b88181.jpg","comment_is_top":false,"comment_ctime":1625096153,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625096153","product_id":100039001,"comment_content":"rust不支持继承，封装用pub，抽象就是函数吧，多态是范型+trait","like_count":0},{"had_liked":false,"id":295476,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1622443888,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1622443888","product_id":100039001,"comment_content":"unix和linux首先追求效率，更底层，其次写的人水平厉害。😂","like_count":0},{"had_liked":false,"id":291171,"user_name":"柴柴777","can_delete":false,"product_type":"c1","uid":1032484,"ip_address":"","ucode":"5208B935ECB6F7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/24/0ea08c9e.jpg","comment_is_top":false,"comment_ctime":1620096734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620096734","product_id":100039001,"comment_content":"要支持面向对象这一套机制，对运行的效率会有所降低。会需要在运行时去做校验，寻找实际函数地址。对于普通业务开发更需要可维护，可拓展，可读，更易懂。对于操作系统来说，性能要求更高。当然需要更高性能的业余组件，也是可以采用面向过程的语言开发 ","like_count":0},{"had_liked":false,"id":291010,"user_name":"cccy七里十一","can_delete":false,"product_type":"c1","uid":1963604,"ip_address":"","ucode":"38858D844ECC72","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f6/54/bf649b32.jpg","comment_is_top":false,"comment_ctime":1619935716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619935716","product_id":100039001,"comment_content":"看完这章才恍然自己其实并没有深入了解过面向对象和面向过程的区别。用面向对象语言，但思考的方式仍然是线性的面向过程的。这个是我这章学完最大的感触与反思。","like_count":0},{"had_liked":false,"id":290259,"user_name":"Helios","can_delete":false,"product_type":"c1","uid":1380758,"ip_address":"","ucode":"BE6B98EE8F0D09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKJrOl63enWXCRxN0SoucliclBme0qrRb19ATrWIOIvibKIz8UAuVgicBMibIVUznerHnjotI4dm6ibODA/132","comment_is_top":false,"comment_ctime":1619452988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619452988","product_id":100039001,"comment_content":"面向对象相比面向过程的好处是更加注重模型，自己提供了丰富的面向对象的功能剩下的用不用就看你了","like_count":0},{"had_liked":false,"id":290091,"user_name":"刘杰","can_delete":false,"product_type":"c1","uid":1150394,"ip_address":"","ucode":"D45873B34FAA90","user_header":"https://static001.geekbang.org/account/avatar/00/11/8d/ba/30f502ed.jpg","comment_is_top":false,"comment_ctime":1619357786,"is_pvip":true,"discussion_count":0,"race_medal":3,"score":"1619357786","product_id":100039001,"comment_content":"matlab，statflow","like_count":0},{"had_liked":false,"id":287356,"user_name":"爱学习的Kirk","can_delete":false,"product_type":"c1","uid":2392633,"ip_address":"","ucode":"CB6607E26037EC","user_header":"https://static001.geekbang.org/account/avatar/00/24/82/39/c3227567.jpg","comment_is_top":false,"comment_ctime":1617897995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617897995","product_id":100039001,"comment_content":"个人认为并不矛盾<br>在阅读内核源码时，随处可见的面相对象思想，有时还能感受到面相对象语言相当于将面相过程语言包裹了一层","like_count":0},{"had_liked":false,"id":285425,"user_name":"luck_tou","can_delete":false,"product_type":"c1","uid":1904497,"ip_address":"","ucode":"E6BACBB08C504E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKkThulMFj6MiaY8qlsmHWrlIzo1SEhwDjwpgLP2bhLYETx1f0DepRDsBdssd5dFKN35zzFUYnia1Q/132","comment_is_top":false,"comment_ctime":1616810297,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1616810297","product_id":100039001,"comment_content":"sql就很高级，更接近人脑模式，把保障效率交给数据库引擎和DBA。","like_count":0},{"had_liked":false,"id":281545,"user_name":"Geek_ea3267","can_delete":false,"product_type":"c1","uid":1962384,"ip_address":"","ucode":"71C1EBF50F457A","user_header":"","comment_is_top":false,"comment_ctime":1614781645,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614781645","product_id":100039001,"comment_content":"linux和unix主要是和计算机系统打交道, 较为底层.使用面向过程的C语言效率比面向对象语言效率更高","like_count":0},{"had_liked":false,"id":281432,"user_name":"Anthony","can_delete":false,"product_type":"c1","uid":1309908,"ip_address":"","ucode":"9E0C98A9123365","user_header":"https://static001.geekbang.org/account/avatar/00/13/fc/d4/743d3f02.jpg","comment_is_top":false,"comment_ctime":1614748885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614748885","product_id":100039001,"comment_content":"我认为有两个原因：<br>一、我们知道，面向对象语言更适合人脑的思维，面向过程语言，也就是更底层的语言，更适合机器理解，但是这也导致了像C语言这种面向过程语言效率更高，操作系统作为底层系统，运行效率的比重毋庸置疑；<br>二、看是否能写出面向对象的代码往往不是由语言决定的，而是由写代码的程序员决定的，C语言一样可以写出面向对象风格的代码<br>","like_count":0},{"had_liked":false,"id":273829,"user_name":"刘立嘉","can_delete":false,"product_type":"c1","uid":2414637,"ip_address":"","ucode":"1241140EBE7FE3","user_header":"https://static001.geekbang.org/account/avatar/00/24/d8/2d/6ec3760c.jpg","comment_is_top":false,"comment_ctime":1610691012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610691012","product_id":100039001,"comment_content":"面向过程是一种编程思维方式，并不局限于编程语言。操作系统注重的是性能和稳定性，相对低级的编程语言更贴近机器，所以更适合用于编写。而上层的业务系统因其业务的复杂性，决定了它需要更灵活，快速地进行运算、迭代，更新，扩展。所以面向对象的编程语言会更适合。","like_count":0},{"had_liked":false,"id":272486,"user_name":"锐锐爱南球","can_delete":false,"product_type":"c1","uid":1158621,"ip_address":"","ucode":"7AA4CA355B9D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/dd/970e7b4a.jpg","comment_is_top":false,"comment_ctime":1610098463,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1610098463","product_id":100039001,"comment_content":"越高级的语言就越对人友好，而越低级的语言则是面向机器的。高级语言在运行时也会被编译成汇编语言，机器语言，而封装越复杂，那么编译效率就越低下。但是高级语言却可以让程序员复用模式，快速迭代，满足业务需求，所以才有现在纷繁多彩的互联网世界。而C语言等面向过程的语言则在单片机，操作系统上一枝独秀，因为他们是和机器打交道，追求运行的极致。我觉得两者并不冲突，反而是相辅相成。就和HTTP协议栈一样，每一层只关注自身的东西，然后上下层通过协议进行互通，细节互不关注，各管各的，各自发挥自己的职能。当然，最后说一点，Linux的问题和林纳斯有关，他作为Linux教主，本人及其讨厌面向对象编程。","like_count":0},{"had_liked":false,"id":267655,"user_name":"Amber","can_delete":false,"product_type":"c1","uid":2358638,"ip_address":"","ucode":"650FE5C46CCD1C","user_header":"https://static001.geekbang.org/account/avatar/00/23/fd/6e/1913dbb6.jpg","comment_is_top":false,"comment_ctime":1607860995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607860995","product_id":100039001,"comment_content":"我觉得操作系统，可能留言区更多是特指类unix 操作系统，用c 语言写的原因之一，是由于历史原因，在unix 出现的时候，c 语言都没有出现，而unix 是先用汇编写的，丹尼斯里奇也可能是考虑到汇编的不可移植性，有感而发明了c ，而此时用c 重写unix 是很自然的行为。因为c 很简单，和汇编，硬件很接近。然后在写编译器，大大可移植。<br>而此时，如果用cpp 写的话，需要做更多的抽象，代价更大。","like_count":0},{"had_liked":false,"id":266943,"user_name":"王川","can_delete":false,"product_type":"c1","uid":1944895,"ip_address":"","ucode":"AED1548E793EB3","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ad/3f/b5eabecf.jpg","comment_is_top":false,"comment_ctime":1607531201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607531201","product_id":100039001,"comment_content":"写代码前还是要仔细思考，避免使用面向对象的编程语言写出面向过程的代码。面向对象的核心在于设计","like_count":0},{"had_liked":false,"id":265774,"user_name":"REAL_MADIRD","can_delete":false,"product_type":"c1","uid":1012889,"ip_address":"","ucode":"9E327B5456739D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/99/dbdee494.jpg","comment_is_top":false,"comment_ctime":1607008770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607008770","product_id":100039001,"comment_content":"说白了，面向对象是一种思想，至于实现，理论上任何语言都可以使用这种思想，而C语言因为在机器上运行效率更好，所以对操作系统这种底层的基础设施，效率放第一位，没问题，但是在编程过程中，依然可以使用面向对象的编程思想","like_count":0},{"had_liked":false,"id":265452,"user_name":"崔光伟","can_delete":false,"product_type":"c1","uid":1875245,"ip_address":"","ucode":"603FCACC5CFC1C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJZMLfqpOHFbYF6Q31xgbKJ0FaO2ibFSqzyjV9gRlIYsnvGUcxYaG1eABJ5UupxVeda0yV0B3sBqDA/132","comment_is_top":false,"comment_ctime":1606901040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606901040","product_id":100039001,"comment_content":"面向对象是从人的角度出发的，面向过程是从机器角度出发的；","like_count":0},{"had_liked":false,"id":263575,"user_name":"初学者","can_delete":false,"product_type":"c1","uid":2331845,"ip_address":"","ucode":"A6B5DDB0FCD5EC","user_header":"https://static001.geekbang.org/account/avatar/00/23/94/c5/67fa8668.jpg","comment_is_top":false,"comment_ctime":1606187464,"is_pvip":false,"replies":[{"id":"96090","content":"大部分人都是这个感觉","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1606700720,"ip_address":"","comment_id":263575,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1606187464","product_id":100039001,"comment_content":"感觉现在写代码，不是面向对象开发，更感觉像是面向数据库开发","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510241,"discussion_content":"大部分人都是这个感觉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606700720,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541895,"discussion_content":"crud吗。。。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640596398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261945,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1605585078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605585078","product_id":100039001,"comment_content":"打卡：Java实现了整个用户信息的案例。","like_count":0},{"had_liked":false,"id":256083,"user_name":"蚝不鱿鱼","can_delete":false,"product_type":"c1","uid":1428043,"ip_address":"","ucode":"5DB98E406F1D3E","user_header":"https://static001.geekbang.org/account/avatar/00/15/ca/4b/c1ace3aa.jpg","comment_is_top":false,"comment_ctime":1603522838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603522838","product_id":100039001,"comment_content":"操作系统是更接近机器，所以用机器更能懂的语言。但对于人来说，就需要更符合大众思维的语言方便人和沟通，感觉又应验了那句话，计算机的世界里面没有什么问题是加一层解决不讲的，而面向对象就是更高级的一层相对面过程，可能我表达的不太到位。","like_count":0},{"had_liked":false,"id":255501,"user_name":"紫日","can_delete":false,"product_type":"c1","uid":1207410,"ip_address":"","ucode":"73A8DEE323AC19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXSb2jAzlMM0JdTjWrNiaq2uR9eeloBYp906POddb9evmuj5f4CUoO6ge8TibibwtZicnl1sRHic9rW7g/132","comment_is_top":false,"comment_ctime":1603358987,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1603358987","product_id":100039001,"comment_content":"对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。<br>面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。利用这些特性编写出来的代码，更加易扩展、易复用、易维护。<br>从编程语言跟机器打交道的方式的演进规律中，我们可以总结出：面向对象编程语言比起面向过程编程语言，更加人性化、更加高级、更加智能。","like_count":0},{"had_liked":false,"id":246923,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1599532267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599532267","product_id":100039001,"comment_content":"【要点】<br>1、面向过程编程和面向过程编程语言<br>面向过程编程和面向过程编程语言并没有严格的官方定义。理解这两个概念最好的方式是跟面向对象编程和面向对象编程语言进行对比。相较于面向对象编程以类为组织代码的基本单元，面向过程编程则是以过程（或方法）作为组织代码的基本单元。它最主要的特点就是数据和方法相分离。相较于面向对象编程语言，面向过程编程语言最大的特点就是不支持丰富的面向对象编程特性，比如继承、多态、封装。<br>2、面向对象编程相对于面向过程编程的优势<br>(1)对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。<br>(2)面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。利用这些特性编写出来的代码，更加易扩展、易复用、易维护。<br>(3)从编程语言跟机器打交道的方式的演进规律中，我们可以总结出：面向对象编程语言比起面向过程编程语言，更加人性化、更加高级、更加智能。<br>【思考】<br>Unix、Linux操作系统用C语言开发的原因：<br>1、C语言更贴进操作系统，效率更高，在当时的硬件水平C语言基本是首选。<br>2、面向对象是编程思想的体现，C语言是工具，并不矛盾，基于C语言也可以写出面向对象思想的程序。<br>3、作者可能更擅长C语言，或者说当时C语言仍然是主要流行的编程语言。","like_count":0},{"had_liked":false,"id":246760,"user_name":"左右","can_delete":false,"product_type":"c1","uid":1410917,"ip_address":"","ucode":"97D38B40C127BB","user_header":"https://static001.geekbang.org/account/avatar/00/15/87/65/0d0622e8.jpg","comment_is_top":false,"comment_ctime":1599471407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599471407","product_id":100039001,"comment_content":"从执行效率来说，面向过程语言无疑要比面向对象语言快的多，而操作系统虽然是比较复杂的程序，但开发过程中除了考虑实现复杂度之外，更多的还是应该考虑使用时的运行效率。这点来看，C语言会是首选。","like_count":0},{"had_liked":false,"id":246464,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1599361854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599361854","product_id":100039001,"comment_content":"一个是因为历史原因，这个前几篇评论中都说了。另外一个原因就是操作系统不需要经常开发新的，种类也就那么几种，我们只需要选择最高效的拿来用就行。操作系统的开发人员最多就是平时维护升级一下，这样当然要选择高效的c语言来开发。","like_count":0},{"had_liked":false,"id":245731,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599036518,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599036518","product_id":100039001,"comment_content":"1、不矛盾<br>2、Unix、Linux系统出现的较早，历史原因一直用的是C语言，面向对象的特性也有使用，比如通过函数来抽象、封装；另外C语言更高效。","like_count":0},{"had_liked":false,"id":245236,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1598872736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598872736","product_id":100039001,"comment_content":"并不矛盾，  操作系统更多的是与机器打交道，需要更加好的对机器资源，效率管理能力，面向过程语言的处理方式更适合机器","like_count":0},{"had_liked":false,"id":244127,"user_name":"BitbIt","can_delete":false,"product_type":"c1","uid":1412121,"ip_address":"","ucode":"418AB6E264E396","user_header":"https://static001.geekbang.org/account/avatar/00/15/8c/19/870c8992.jpg","comment_is_top":false,"comment_ctime":1598406622,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598406622","product_id":100039001,"comment_content":"那么需求文档会不会就是文中提到的，更智能更人性化的下代编程语言","like_count":0},{"had_liked":false,"id":244081,"user_name":"y y gi r l","can_delete":false,"product_type":"c1","uid":2132615,"ip_address":"","ucode":"0BC00677D3071D","user_header":"https://static001.geekbang.org/account/avatar/00/20/8a/87/dd68531b.jpg","comment_is_top":false,"comment_ctime":1598397142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598397142","product_id":100039001,"comment_content":"面向过程语言可以进行面向对象设计","like_count":0},{"had_liked":false,"id":241463,"user_name":"锋子","can_delete":false,"product_type":"c1","uid":1681459,"ip_address":"","ucode":"89FFA85BDB1C99","user_header":"https://static001.geekbang.org/account/avatar/00/19/a8/33/b71635c1.jpg","comment_is_top":false,"comment_ctime":1597301526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597301526","product_id":100039001,"comment_content":"什么时候有面向需求编程语言、面向产品编程语言，那才是更加接近人类的想法。 当然，那个时候产品为王啦，哈哈哈哈","like_count":0},{"had_liked":false,"id":240729,"user_name":"Geek_1d1ced","can_delete":false,"product_type":"c1","uid":2097256,"ip_address":"","ucode":"F2B0C5FA46D39F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wzUpQd1IrJ9K1ZlsCib7iarnu4JfibhLN3MTAiaZvhibTgG3lcHrBoS7aHafiaowdjrZicfKcbNUrwibbDZuNyDWoaUn3A/132","comment_is_top":false,"comment_ctime":1597046705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597046705","product_id":100039001,"comment_content":"看了大佬们的留言后的笔记：<br>1.c语言虽然存在如内存越界，野指针，内存泄漏等问题，但是它的效率非常高，适合底层的开发，像很多游戏都是用c或c++<br>2.操作系统内部实现有很多面向对象的思想，语言说到底也只是工具，核心的设计模式好的编程思想是更重要的东西。","like_count":0},{"had_liked":false,"id":240272,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1596840633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596840633","product_id":100039001,"comment_content":"C面向过程的代码效率更高","like_count":0},{"had_liked":false,"id":240240,"user_name":"foreveryi","can_delete":false,"product_type":"c1","uid":1596532,"ip_address":"","ucode":"C322C02C8D1CEC","user_header":"https://static001.geekbang.org/account/avatar/00/18/5c/74/3f9e7c14.jpg","comment_is_top":false,"comment_ctime":1596802689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596802689","product_id":100039001,"comment_content":"不矛盾，面向过程的编程语言开发的系统离机器很近，离人类较远。","like_count":0},{"had_liked":false,"id":239141,"user_name":"Happy—sea","can_delete":false,"product_type":"c1","uid":1624484,"ip_address":"","ucode":"4EAD3636164392","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/a4/66b606ad.jpg","comment_is_top":false,"comment_ctime":1596446147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596446147","product_id":100039001,"comment_content":"面对对象和面向过程的编程语言各有优势和缺陷，在不同的业务场景中选择适合的语言。","like_count":0},{"had_liked":false,"id":239131,"user_name":"天敌","can_delete":false,"product_type":"c1","uid":1059944,"ip_address":"","ucode":"CD29A622197197","user_header":"https://static001.geekbang.org/account/avatar/00/10/2c/68/c299bc71.jpg","comment_is_top":false,"comment_ctime":1596443115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596443115","product_id":100039001,"comment_content":"面对对象会造成机器指令的个数膨胀，而C语言没有这个问题。","like_count":0},{"had_liked":false,"id":238796,"user_name":"Elvis Lee","can_delete":false,"product_type":"c1","uid":2098270,"ip_address":"","ucode":"A4B26AFFE817FA","user_header":"https://static001.geekbang.org/account/avatar/00/20/04/5e/5d2e6254.jpg","comment_is_top":false,"comment_ctime":1596300547,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596300547","product_id":100039001,"comment_content":"个人觉得，语言只是工具，思想才是决定编程风格的关键。","like_count":0},{"had_liked":false,"id":238427,"user_name":"Geek_Wu","can_delete":false,"product_type":"c1","uid":2090869,"ip_address":"","ucode":"F8BD27F3B69A89","user_header":"","comment_is_top":false,"comment_ctime":1596165142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596165142","product_id":100039001,"comment_content":"我觉得还是从 问题本身来考虑这个问题。<br>咱们讨论的是面向对象编程的思维而非某种代码风格。至于为什么用C。。最大原因是为了兼顾代码执行效率和代码编辑效率吧。比C快的语音没有C编辑效率高，比C编辑效率快的没有C快。","like_count":0},{"had_liked":false,"id":237961,"user_name":"花影","can_delete":false,"product_type":"c1","uid":1183787,"ip_address":"","ucode":"990AE37BE51DB6","user_header":"https://static001.geekbang.org/account/avatar/00/12/10/2b/bb07956c.jpg","comment_is_top":false,"comment_ctime":1596014788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596014788","product_id":100039001,"comment_content":"对于面向过程和面向对象的理解：<br>面向过程： 单条线操作，什么都得你自己去处理<br>面向对象： 把相关操作封装成类，让每个类处理自己相关的逻辑<br><br> Unix、Linux 这些复杂的系统为什么基于 C语言开发？<br>1、C语言代码执行效率高<br>2、Unix、Linux这样的系统都是需要依赖于硬件的，但是硬件的更新速度并不大。<br>","like_count":0},{"had_liked":false,"id":236372,"user_name":"微末凡尘","can_delete":false,"product_type":"c1","uid":1099525,"ip_address":"","ucode":"25EDFD0914D0F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","comment_is_top":false,"comment_ctime":1595402816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595402816","product_id":100039001,"comment_content":"OOP是离机器更远，离人更近，更加的智能，更加的人性化。<br>而面向过程语言，例如C语言离机器更加近，UNIX&#47;Linux都是离硬件最近的操作系统，所以使用C语言更加的合适，留言中有句话写的很好，C语言只管程序员飞的高不高，而不管程序员飞的累不累，随着硬件的发展，硬件对程序性能的影响越来越小，现有的编程语言与越来越人性化，这是发展的趋势。","like_count":0},{"had_liked":false,"id":234449,"user_name":"石仔","can_delete":false,"product_type":"c1","uid":1177921,"ip_address":"","ucode":"974E4604CE2213","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/41/411b1753.jpg","comment_is_top":false,"comment_ctime":1594694196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594694196","product_id":100039001,"comment_content":"二刷<br>很多人说SQL是第四代语言,因为它只是告诉数据库,我要的数据哪里来,我要哪些列的数据,没有具体实现.","like_count":0},{"had_liked":false,"id":231242,"user_name":"超级励辰","can_delete":false,"product_type":"c1","uid":1017669,"ip_address":"","ucode":"94F34809B7D893","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/45/9edd38ba.jpg","comment_is_top":false,"comment_ctime":1593612925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593612925","product_id":100039001,"comment_content":"正篇文章真的学到很多，改变了自己很多的想法。特别是下面这段话：<br>面向对象编程是以类为思考对象。在进行面向对象编程的时候，我们并不是一上来就去思考，如何将复杂的流程拆解为一个一个方法，而是采用曲线救国的策略，先去思考如何给业务建模，如何将需求翻译为类，如何给类之间建立交互关系，而完成这些工作完全不需要考虑错综复杂的处理流程。<br>编程3年了，一直都是用面向过程的思想去考虑，说到面向对象也一直以为就是类而已，重要的不是语言，而是思想","like_count":0},{"had_liked":false,"id":221780,"user_name":"周星平","can_delete":false,"product_type":"c1","uid":1494880,"ip_address":"","ucode":"1FDCB487392B03","user_header":"https://static001.geekbang.org/account/avatar/00/16/cf/60/9100ad4f.jpg","comment_is_top":false,"comment_ctime":1590590788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590590788","product_id":100039001,"comment_content":"为什么要仿生呢，因为离大自然越相似的东西越智能越高级，编程语言也是这样，越仿生越强大","like_count":0},{"had_liked":false,"id":221238,"user_name":"鱼干","can_delete":false,"product_type":"c1","uid":1367335,"ip_address":"","ucode":"3BF41D25AFAC74","user_header":"https://static001.geekbang.org/account/avatar/00/14/dd/27/b0e91408.jpg","comment_is_top":false,"comment_ctime":1590454155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590454155","product_id":100039001,"comment_content":"个人的经验看，其实对于复杂业务有些惨痛教训，第一个是基于接口的单元测试和基于模型的单元测试，第二个是基于模型的复用和基于接口的复用。越复杂的项目在后续的迭代维护越能体现模型的好处","like_count":0},{"had_liked":false,"id":218181,"user_name":"GeekD","can_delete":false,"product_type":"c1","uid":1783804,"ip_address":"","ucode":"357FAB2249FDB4","user_header":"","comment_is_top":false,"comment_ctime":1589730236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589730236","product_id":100039001,"comment_content":"个人感觉操作系统使用C编写的原因有：<br>1.开发unix   linux时面向对象的思想还未出现<br>2.作者更熟悉c语言，且c是当时流行的编程语言（如果说因为c更接近底层，那为何不用汇编？😷）<br><br>每个软件时代出现的编程语言都有其存在的合理性，就像出现面向对象编程思想后诞生的新生操作系统，它们更多使用的是面向对象的编程语言。<br><br>同样的，如果函数式编程思想能引领未来的潮流，我也更愿意相信那时候的未来操作系统会使用函数式编程语言进行开发。","like_count":0},{"had_liked":false,"id":217577,"user_name":"Geek_f04d81","can_delete":false,"product_type":"c1","uid":1445106,"ip_address":"","ucode":"ECD9F1BE0B2186","user_header":"https://static001.geekbang.org/account/avatar/00/16/0c/f2/eff644f9.jpg","comment_is_top":false,"comment_ctime":1589536650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589536650","product_id":100039001,"comment_content":"看linux内核代码 处处都可以体现抽象 ","like_count":0},{"had_liked":false,"id":217576,"user_name":"Geek_f04d81","can_delete":false,"product_type":"c1","uid":1445106,"ip_address":"","ucode":"ECD9F1BE0B2186","user_header":"https://static001.geekbang.org/account/avatar/00/16/0c/f2/eff644f9.jpg","comment_is_top":false,"comment_ctime":1589536591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589536591","product_id":100039001,"comment_content":"内核用c开发再适合不过, 内核功能注重效率, 主要操作硬件, windows内核不也是c写的 hhh","like_count":0},{"had_liked":false,"id":216927,"user_name":"方舟勇士","can_delete":false,"product_type":"c1","uid":1218162,"ip_address":"","ucode":"53D3D844B08B92","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/72/a517bf25.jpg","comment_is_top":false,"comment_ctime":1589370646,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589370646","product_id":100039001,"comment_content":"因为性能，因为通用，因为编写操作系统的人水平高，所以用面向多过程的方法开发Unix、Linux","like_count":0},{"had_liked":false,"id":215925,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589153281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589153281","product_id":100039001,"comment_content":"面向过程编程范式是先考虑数据和处理数据的函数，函数和数据是分离的，main函数开始初始化数据调用func处理数数据。<br>面向对象编程范式：先根据需求抽象出类，粒度大的名词是类，粒度小的名称划分到类的属性，类的行为是方法，通过数据访问权限private和public保护属性的可见性和get、set方法保护数据的赋值和输出；先抽象出接口不用想实现就可以写代码，抽象出基类用继承实现代码复用。然后再用类“组合”和“依赖”进行搭积木完成现在业务逻辑。同时可以方便的利用多态实现扩展。<br>范式是完成需求的思考过程和组织代码的方式，跟用什么语言关系不是很大。","like_count":0},{"had_liked":false,"id":215287,"user_name":"文超","can_delete":false,"product_type":"c1","uid":1673835,"ip_address":"","ucode":"9994423E67FB4C","user_header":"https://static001.geekbang.org/account/avatar/00/19/8a/6b/992dc7d1.jpg","comment_is_top":false,"comment_ctime":1588948451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588948451","product_id":100039001,"comment_content":"Linux和Unix本身是更贴近于硬件底层，针对这些需求而言，执行的效率是优先考虑的。而C是仅次于汇编的高效率执行语言，用C开发能够保证效率。","like_count":0},{"had_liked":false,"id":210549,"user_name":"李圣悦","can_delete":false,"product_type":"c1","uid":1638427,"ip_address":"","ucode":"C1786C98824E50","user_header":"https://static001.geekbang.org/account/avatar/00/19/00/1b/eee13196.jpg","comment_is_top":false,"comment_ctime":1587786832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587786832","product_id":100039001,"comment_content":"写了几年代码，从不用c++只有一个原因：太复杂。个人觉得写自己能把握的代码才能是高质量代码。所以一直使用c来写代码，同样可以写出具有面向对象思想的代码","like_count":0},{"had_liked":false,"id":207697,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1587139635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587139635","product_id":100039001,"comment_content":"底层系统操作相对简单，执行逻辑偏线性化，多次多种方法 或多次调用同一个方法 来组成更高级的操作，那么单个方法的调用量是巨大的，而每一点的效率提升或降低带来的性能变化也是巨大的。而面相对象 的特性都是需要消耗性能 和 空间资源，自然面相过程更有优势。","like_count":0},{"had_liked":false,"id":205903,"user_name":"MrVito","can_delete":false,"product_type":"c1","uid":1252169,"ip_address":"","ucode":"716FF6F8871706","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/49/ddefc656.jpg","comment_is_top":false,"comment_ctime":1586754504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586754504","product_id":100039001,"comment_content":"面向对象，其实主要体现在思想层面上，面向过程语言也能写出面向对象的代码。","like_count":0},{"had_liked":false,"id":202715,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1586056455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586056455","product_id":100039001,"comment_content":"不冲突，机器执行最终还是二进制的形式，越是高级语言，转化成二进制，需要一个汇编，编译的阶段，这是需要耗很多时间的。操作系统用c是为了开发，也用到了面向对象编程思想，实现方式是结构体加函数指针","like_count":0},{"had_liked":false,"id":202363,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1585975844,"is_pvip":false,"replies":[{"id":"87071","content":"后面会讲到的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1595208952,"ip_address":"","comment_id":202363,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1585975844","product_id":100039001,"comment_content":"什么是函数式编程？与老师所说的面向过程编程有什么区别吗？感觉他们两是一样的。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490568,"discussion_content":"后面会讲到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595208952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201754,"user_name":"Geek_a9e93c","can_delete":false,"product_type":"c1","uid":1928846,"ip_address":"","ucode":"BF34AA5934C95E","user_header":"","comment_is_top":false,"comment_ctime":1585833170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585833170","product_id":100039001,"comment_content":"写了三年代码，一直都是面向过程，因为还没有对象😏","like_count":0},{"had_liked":false,"id":200466,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1585590631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585590631","product_id":100039001,"comment_content":"我感觉设计模式是内功心法，数据结构是外在招式。又好比华山派的气宗和剑宗。","like_count":0},{"had_liked":false,"id":197818,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585399599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585399599","product_id":100039001,"comment_content":"c编译执行的语言，效率更高，相对于硬件的调度，linux，unix本身就是一种操作系统，跟硬件如此密切的交流，用c语言的效率更高。当一种技术已经趋于稳定成熟的时候，我们就要学会滚轮子了，就是在c之上如何在进行简化，封装，所以高级语言越是能够得以运用，越是一些底层的东西在支撑着。","like_count":0},{"had_liked":false,"id":194243,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1585040434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585040434","product_id":100039001,"comment_content":"1.稍微看了一下，c语言是更偏底层的语言，对于写操作系统这种更有优势。<br><br>面向过程就是按照过程（方法）来进行编程，是一种编程风格。数据和方法是分离开的。<br><br>面向对象编程是以对象和类作为组织单元来编程。数据和方法放到一起。<br><br><br>面向对象的优势： 1.网状思维，我们只需要考虑一个个类和对象，然后再把这些类和对象组织起来。如果是面向过程的话，线性思维，就需要我们一开始就把所有的主线考虑清楚。 2.面向对象有四大特性，写出的代码易扩展，易维护。3.面向对象更智能，更符合人类的思维方式。","like_count":0},{"had_liked":false,"id":191390,"user_name":"不学不行啊","can_delete":false,"product_type":"c1","uid":1335474,"ip_address":"","ucode":"69368165141C2D","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/b2/ccebcb71.jpg","comment_is_top":false,"comment_ctime":1584769572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584769572","product_id":100039001,"comment_content":"面向对象编程相比起面向过程编程的优势主要有三个。对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。利用这些特性编写出来的代码，更加易扩展、易复用、易维护。从编程语言跟机器打交道的方式的演进规律中，我们可以总结出：面向对象编程语言比起面向过程编程语言，更加人性化、更加高级、更加智能。","like_count":0},{"had_liked":false,"id":190827,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1584696504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584696504","product_id":100039001,"comment_content":"主要还是看应用场景，对于操作系统用C语言这种面向过程的语言开发，主要是为了考虑效率。<br>而用面向过程一层层包装，最终还是转化为汇编的执行命令。<br>所有一般做嵌入式开发，直接和硬件打交道的使用面向过程还是有需求的。<br>做应用层开发，考虑的肯定是方便开发、好维护扩展。从这个角度看，面向对象更有意义。","like_count":0},{"had_liked":false,"id":187237,"user_name":"Presley","can_delete":false,"product_type":"c1","uid":1215219,"ip_address":"","ucode":"D8F125835F4903","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/f3/7c89d00e.jpg","comment_is_top":false,"comment_ctime":1584067236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584067236","product_id":100039001,"comment_content":"Unix、Linux 这些复杂的系统，属于底层系统，擅长与底层硬件打交道，要求能充分利用硬件的特性，也对性能要求极高，有些关键点甚至是汇编编写。而面向对象的语言比如Java,可能无法直接利用硬件的特性，当然，性能也相对较差","like_count":0},{"had_liked":false,"id":185724,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1583671158,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583671158","product_id":100039001,"comment_content":"有一定的原因是历史的包袱，在阅读TCP的源码的时候，发现前辈早就在用面向对象的思想在写代码了，一样实现了多态等高级特性","like_count":0},{"had_liked":false,"id":184881,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1583423923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583423923","product_id":100039001,"comment_content":"面向对象的示例代码貌似忘了根据age排序","like_count":0},{"had_liked":false,"id":184555,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1091781,"ip_address":"","ucode":"67802124F5181D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epjdWhOia2BKpvYDUIria0klBOvxU4v8CfsobsGYicUia6Hybb4n658LfJymFbuPk0koxldr6QIOpQsMA/132","comment_is_top":false,"comment_ctime":1583336758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583336758","product_id":100039001,"comment_content":"1.历史原因，一开始就是使用c编码，不容易切换；<br>2.底层，接近硬件，变化“”较小”<br>3.效率","like_count":0},{"had_liked":false,"id":181391,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1582534048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582534048","product_id":100039001,"comment_content":" Unix、Linux 这些系统虽然非常，但是不像业务需求一样变化那么频繁，所以对可扩展和可复用的要求没那么高，面向过程足够应付<br>另外就是很重要的一点，C语言是高级语言中的低级语言，它的执行效率是最高的。","like_count":0},{"had_liked":false,"id":180035,"user_name":"沁塵","can_delete":false,"product_type":"c1","uid":1564002,"ip_address":"","ucode":"4AD780EF50882B","user_header":"https://static001.geekbang.org/account/avatar/00/17/dd/62/824e5e16.jpg","comment_is_top":false,"comment_ctime":1582169657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582169657","product_id":100039001,"comment_content":"不矛盾。个人感觉面向过程是更接近人的思维的方式，是一种线性思维的思考方式，一开始人要和机器交互，机器怎么“读懂”人类的指令？那肯定按设计的那个人来，他觉得机器该是怎样的就是怎样的，既然人的潜意识都是线性思维的方式，那机器自然也就被设计成那样子。这也是为什么很多时候我们写面向过程感觉比写面向对象舒服，一气呵成，我们只是在用自己习惯的、舒服的方式在跟机器交流；但随着科技和社会的发展，项目复杂度上升，这种面向过程的方式问题就暴露出来了，具体问题在老师的专栏中已经指明，所以有了面向对象。面向对象是一种非线性的思维方式和解决方案，这也是为什么我们在看复杂项目的时候，需要各种跳来跳去，这总看起像是黑的绕远路的套路，实则是非线性思维的体现。无论是线性思维还是非线性思维，都是为了思考问题、解决问题的手段，本身应该没有优劣之分，只是在不同场景下才会体现出优劣。像 Unix、Linux 这些复杂的系统，也都是基于 C 语言这种面向过程的编程语言开发的，这个现象我觉得原因是面向对象相比面向过程会增加一些额外的调用开销，所以Unix、Linux 底层源码综合了一下，面向过程之余也借鉴了对象的写法，在舒服和性能之余兼顾维护性。","like_count":0},{"had_liked":false,"id":179868,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1582113928,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582113928","product_id":100039001,"comment_content":"<br>先梳理下核心观点，1）面向过程编程最大的特点是不支持封装、继承和多态，代码风格上是以方法作为组织单元的，这就意味着一个软件完全可以写在一个文件里（杠精可能说java也可以写在一个文件啊，那么我问你面向对象编程你怎么学的？！2）面向对象编程相比面向过程编程的优势是开发大型复杂系统效率更高，代码更易维护、更易扩展、更易复用<br><br>关于为什么Linux底层系统为什么用c开发的问题，可以这么思考底层系统的要求的运行效率更高、执行速度更快，特点是能有更大的操作底层系统权限，这就意味着代码质量的高低就决定了运行效率和运行速度，从操作系统角度，本质都是二进制指令，那么从前编程语言翻译到二进制指令的路径越短越好，面向对象编程语言因为需要经过jvm的封装中转的过程导致了编译路径更长，不过因为jit编译器的加持java的编译路径更短了自然就提升了效率，这就意味着写着人能看懂得代码同时享受着高效执行的速度，足见虚拟机团队的强大。<br><br>提个小建议，关于为什么面向对象编程语言可以更容易编写大型复杂系统可以加个链接，另外理论部分相对枯燥可以考虑加个配图加深理解，哈哈","like_count":0},{"had_liked":false,"id":179485,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582013921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582013921","product_id":100039001,"comment_content":"一是出现时间早,Unix出现的时间还是比较早的,用C已经很先进了<br>二是,相比较于面向对象编程语言,面向过程虽然不易去阅读,但是更加符合机器的执行思路,执行起来更加的快,所以更加合适去开发底层的操作系统<br>三是,即使是面向过程编程语言,也是可以使用一些高级的编程技巧和设计模式的,甚至可以去使用面向对象的类和对象的思想,所以虽然是C去书写的,但其中也是利用了面向对象的思想的","like_count":0},{"had_liked":false,"id":177996,"user_name":"万象","can_delete":false,"product_type":"c1","uid":1222046,"ip_address":"","ucode":"E81A16870C211E","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/9e/e78e11d7.jpg","comment_is_top":false,"comment_ctime":1581566995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581566995","product_id":100039001,"comment_content":"1、其他语言是以c语言为基础开发来<br>2、接近硬件层面的语言执行效率为先，目前还没有比c语言效率更高的高级语言<br>","like_count":0},{"had_liked":false,"id":176587,"user_name":"Geek_bb89c3","can_delete":false,"product_type":"c1","uid":1331828,"ip_address":"","ucode":"0F97B5B0F2DDD6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IZKGetBZDuMEa2VwwtesTELvLORIyV749ItgfAqNPv30n4zEv71wuGNr1aNVIVltG0icvH53DHDuqPuzNpiauWAg/132","comment_is_top":false,"comment_ctime":1581092516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581092516","product_id":100039001,"comment_content":"面向过程语言主要是以过程为基础组织程序。将数据和方法进行分离。面向对象一类和对象为基础来组织代码。支持封装，抽象，继承，多态四大特性。面向过程基于二进制方式逐步演进的。<br>面向对象的优势：<br>1.现实中程序格外的纷繁复杂，不紧紧是简单的线形的，面向对象编程更加适合解决这些复杂的问题。<br>2.面向对象支持封装，继承，多态，抽象。这四大特性。能够更方便的写出易维护，易扩展，易服用的程序。<br>3.面向对象编程思维更加贴近人的思维，一些列的类相互协作完成一项复杂的工作。面向对象给予一些列的指令完成一项复杂的工作。但是指令的粒度非常细且是线形的。复杂程度高很多。<br>","like_count":0},{"had_liked":false,"id":176234,"user_name":"lcf枫","can_delete":false,"product_type":"c1","uid":1144171,"ip_address":"","ucode":"D51E8F68BD41CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/75/6b/fd685164.jpg","comment_is_top":false,"comment_ctime":1580996663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580996663","product_id":100039001,"comment_content":"首先那会只有C 语言。其次里面很多地方有面向对象的影子。在C语言范围内的复用。","like_count":0},{"had_liked":false,"id":176000,"user_name":"张理查","can_delete":false,"product_type":"c1","uid":1003152,"ip_address":"","ucode":"1F93E631CD4B35","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/90/a8d19e7b.jpg","comment_is_top":false,"comment_ctime":1580907920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580907920","product_id":100039001,"comment_content":"面向过程语言早于面向对象，就像二进制、汇编到面向过程，是一个自然的过度，编程语言越来越人性化，符合人们的思维。OOP是一种人类的思维方式，我们通过给业务建模，将真实世界映射为类和对象，更加聚焦业务本身，思考如何让机器像人类一样思考。在脑机接口没有真正实现之前，OOP依然是最符合人们思维的编程语言风格","like_count":0},{"had_liked":false,"id":175256,"user_name":"BitInit","can_delete":false,"product_type":"c1","uid":1007271,"ip_address":"","ucode":"BDDDA0F51B1EFB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/a7/8dc374e2.jpg","comment_is_top":false,"comment_ctime":1580632651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580632651","product_id":100039001,"comment_content":"我认为面向对象和面向过程编程是两种代码的组织方式，而C是主要以面向过程而设计的编程语言，使用C同样可以写出面向对象编程的代码，只是成本要相对高而已。像Unix、Linux这些操作系统，里面的代码组织我感觉也有面向对象的思想。Java这种编程语言是天然支持面向对象编程，就相当于节约了你用C写面向对象程序的成本，但是这样也会付出一些代价，比如运行效率等等。","like_count":0},{"had_liked":false,"id":174273,"user_name":"RLIH","can_delete":false,"product_type":"c1","uid":1666777,"ip_address":"","ucode":"A0163F0F48D5D7","user_header":"https://static001.geekbang.org/account/avatar/00/19/6e/d9/8220999a.jpg","comment_is_top":false,"comment_ctime":1580115563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580115563","product_id":100039001,"comment_content":"由于编程的复杂性，提出了面向对象思想。面向对象语言是实现面向对象思想的工具。写操作系统这种复杂的软件，可以在原有语言基础上应用面向对象思想，也可直接选用合适的面向对象语言（如 c++）。","like_count":0},{"had_liked":false,"id":172324,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1579154782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579154782","product_id":100039001,"comment_content":"面向对象编程本质上还是思维方式的转变，先设计类，在通过类的交互来完成流程设计；而面向过程编程是将流程直译成代码","like_count":0},{"had_liked":false,"id":165797,"user_name":"喵喵喵","can_delete":false,"product_type":"c1","uid":1211713,"ip_address":"","ucode":"E3AD8BF42E19DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/41/3c5b770b.jpg","comment_is_top":false,"comment_ctime":1577324014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577324014","product_id":100039001,"comment_content":"打卡～","like_count":0},{"had_liked":false,"id":165035,"user_name":"wai","can_delete":false,"product_type":"c1","uid":1439529,"ip_address":"","ucode":"29CE3BE148FB79","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/29/60e01017.jpg","comment_is_top":false,"comment_ctime":1577150484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577150484","product_id":100039001,"comment_content":"语言没有好坏，只有适合不适合，C语言更接近系统底层，性能优势更强","like_count":0},{"had_liked":false,"id":164937,"user_name":"Geek_3e2092","can_delete":false,"product_type":"c1","uid":1788428,"ip_address":"","ucode":"5906E9EE05F4BE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJnv4h4j5tWy6HappcibN0A5wCwMoXGfxeufDfgCfiaficfericwNv5Slode5ysZDkOKDdF0d0orYBHUw/132","comment_is_top":false,"comment_ctime":1577113826,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577113826","product_id":100039001,"comment_content":"也算是经历了从汇编到c，到c++再到java的过程。确实像作者所说，从偏向机器的思维慢慢过渡到了偏向人类的思维，这似乎也顺应了这个时代的发展潮流。写c的时代，我们要非常关注内存的分配，占用，释放，指针是否越界，程序会不会跑飞等问题。现在还记得研究生时候写过一段代码，一运行电脑就自动关机(然而代码的目的不是为了关机！)工作后越来越多的用了java，有了jvm，似乎只有在性能调优的时候才会想想堆栈情况，其余时候真的不用再考虑太多，按照业务模块分解功能，专注业务实现就可以了。也因此，程序员越来越高产，门槛也越来越低。然而，知其然而也知其所以然的程序员越来越少了，这样虽然看上去写了不少代码，堆砌了很多新的框架组建，但根基并不牢靠。所以真的需要多一些作者这样的课程，来帮助大家慢下节奏，沉下心多思考","like_count":0},{"had_liked":false,"id":164759,"user_name":"黄政","can_delete":false,"product_type":"c1","uid":1345630,"ip_address":"","ucode":"9076A1BF7BB051","user_header":"https://static001.geekbang.org/account/avatar/00/14/88/5e/cc916a2b.jpg","comment_is_top":false,"comment_ctime":1577087001,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1577087001","product_id":100039001,"comment_content":"linux操作系统，实际上就是计算机指定的一层封装，操作系统更需要是机器的理解，而写开发程序更主要的是人类的理解。比如在linux上实现一个daemon进程的业务功能，这时候使用面向对象的语言就更有优势","like_count":0},{"had_liked":false,"id":164184,"user_name":"Next","can_delete":false,"product_type":"c1","uid":1748213,"ip_address":"","ucode":"D5ADDF248A9504","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ac/f5/2f97e279.jpg","comment_is_top":false,"comment_ctime":1576903643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576903643","product_id":100039001,"comment_content":"看编码的服务对象，也就是看它在服务层级（硬件-&gt;人）的位置。越靠近底层（硬件），受它影响的服务越多越广，越关心执行效率，稳定性；越靠近高层（人），执行效率越依赖于底层服务，本身越关注开发效率成本，维护性，扩展性。<br>靠近硬件的系统内核自然需要使用对硬件有更多控制权c语言等进行开发，而靠近人的应用开发会优先用面相对象的语言开发。<br>个人的一些思考，可能不那么严谨，请多多指教！！！","like_count":0},{"had_liked":false,"id":162223,"user_name":"握不住手中沙","can_delete":false,"product_type":"c1","uid":1097132,"ip_address":"","ucode":"F194E47C4D42C9","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/ac/49494ed8.jpg","comment_is_top":false,"comment_ctime":1576480011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576480011","product_id":100039001,"comment_content":"正如文中所说，二进制机器码、汇编语言、面向过程都是用一组指令顺序操作数据，来完成一项任务。而Unix、Linux这类操作系统系统软件直接跟底层硬件进行交互，需要按照硬件的流程化方式来进行，所以使用C语言来开发这类系统能够更好更快地利用计算机硬件资源。并且这类操作系统软件是对硬件资源的管理和操作，更多地通用性流程化的操作，而不是面对各种复杂业务场景的功能开发，使用C语言这类简单地面向过程编程语言能够让系统易维护，易扩展","like_count":0},{"had_liked":false,"id":159827,"user_name":"Geek_ecf7bb","can_delete":false,"product_type":"c1","uid":1523207,"ip_address":"","ucode":"5BF4DD62425BE0","user_header":"https://static001.geekbang.org/account/avatar/00/17/3e/07/c27b53b8.jpg","comment_is_top":false,"comment_ctime":1575805393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575805393","product_id":100039001,"comment_content":"个人感觉有几方面原因：<br>1.历史原因：这些操作系统开始编写的时候应该还没有成熟的面向对象的语言吧，所以就选择了c进行开发<br>2.速度：c语言是面相过程的语言，对于大型项目的开发难度相比面相对象要复杂一些，但是他更加接近底层，执行速度也更加快（对于操作系统一类应该速度是主要矛盾之一吧）<br>所以我觉得这个现象和老师讲的并不矛盾，现在大多数项目考虑到开发，扩展和维护的成本都会选择面向对象的编程语言和范式。","like_count":0},{"had_liked":false,"id":158155,"user_name":"王小贱","can_delete":false,"product_type":"c1","uid":1244728,"ip_address":"","ucode":"91AE60138ACA97","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/38/b6995d69.jpg","comment_is_top":false,"comment_ctime":1575339984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575339984","product_id":100039001,"comment_content":"but 前端圈子这两年又流行函数式编程了...","like_count":0},{"had_liked":false,"id":157708,"user_name":"lovelykooo","can_delete":false,"product_type":"c1","uid":1009369,"ip_address":"","ucode":"B8B9DF2C05E123","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/d9/b81be44b.jpg","comment_is_top":false,"comment_ctime":1575249272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575249272","product_id":100039001,"comment_content":"网状的业务结构 大概是什么样的 有栗子吗","like_count":0},{"had_liked":false,"id":156476,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1025030,"ip_address":"","ucode":"62A89FD460827A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/06/cf6b6d0f.jpg","comment_is_top":false,"comment_ctime":1574900465,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574900465","product_id":100039001,"comment_content":"Unix 出来的时候还没有面向对象语言，而且用 C 语言更加接近底层，执行效率更高，操作系统看中执行效率，用 C 来写正合适。这也说明了面向过程编程并不是不能用于开发复杂的程序。","like_count":0},{"had_liked":false,"id":156367,"user_name":"被讨厌的勇气","can_delete":false,"product_type":"c1","uid":1547913,"ip_address":"","ucode":"AE3B3CA27D91A2","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/89/6e9c05d6.jpg","comment_is_top":false,"comment_ctime":1574862607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574862607","product_id":100039001,"comment_content":"为什么操作系统这种复杂软件基于C语言开发？我认为可能的原因有C语言更底层，性能上有优势；C语言也可以实现面向对象的一些机制，只是比较麻烦。<br><br>##坚持打卡##<br><br>面向对象与面向过程的主要区别是代码的组织方式不同，面向过程使用函数和数据结构作为代码组织的基本单元，方法与数据分离是面向过程与面向对象的主要区别。<br><br>面向对象将类和对象作为组织代码的基本单元，更符合人的思维方式（对象与对象进行交互），使得其在大规模复杂程序的分析、设计上更加容易。面向对象的四大特性也使得程序更易用、易于扩展、易于维护。","like_count":0},{"had_liked":false,"id":156209,"user_name":"呆猫","can_delete":false,"product_type":"c1","uid":1228759,"ip_address":"","ucode":"69E256E6A19225","user_header":"https://static001.geekbang.org/account/avatar/00/12/bf/d7/9e2c8648.jpg","comment_is_top":false,"comment_ctime":1574836999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574836999","product_id":100039001,"comment_content":"操作系统本身就是和机器打交道, 是对用户指令的处理, 根据老师上面的讲解觉得用面向过程语言来开发是没有毛病的","like_count":0},{"had_liked":false,"id":156118,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1574820949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574820949","product_id":100039001,"comment_content":"不矛盾。像 Unix、Linux 这些复杂的系统，虽然都是基于 C 语言这种面向过程的编程语言开发的，但是这并不妨碍它们借鉴了面向对象的编程思想。面向对象编程并不依赖于编程语言，只不过使用面向过程编程语言实现面向对象编程的代价要大一些罢了。","like_count":0},{"had_liked":false,"id":155713,"user_name":"kkk","can_delete":false,"product_type":"c1","uid":1453027,"ip_address":"","ucode":"FB4BFD00618699","user_header":"","comment_is_top":false,"comment_ctime":1574741625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574741625","product_id":100039001,"comment_content":"为什么系统用的是c语言，一是C语言出现早，已经是成熟的操作系统基础语言，常见操作系统都是基于C语言，而二是性能问题，C语言效率高，更适合做大系统。","like_count":0},{"had_liked":false,"id":155385,"user_name":"昵称不重要","can_delete":false,"product_type":"c1","uid":1156872,"ip_address":"","ucode":"50F0E9DC56AE3B","user_header":"https://static001.geekbang.org/account/avatar/00/11/a7/08/802cc83f.jpg","comment_is_top":false,"comment_ctime":1574684220,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574684220","product_id":100039001,"comment_content":"操作系统更偏向和机器打交道所以使用面向过程的方式","like_count":0},{"had_liked":false,"id":155312,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1428828,"ip_address":"","ucode":"1AEBD6F79941B7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","comment_is_top":false,"comment_ctime":1574677472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574677472","product_id":100039001,"comment_content":"1 历史原因，c语言发展较早 也是当时最流行编程语言<br>2 c语言更接近硬件底层技术 运行效率高 作为基础系统需要更快的执行效率 而非贴近业务的面向对象程序风格","like_count":0},{"had_liked":false,"id":154893,"user_name":"东流","can_delete":false,"product_type":"c1","uid":1738147,"ip_address":"","ucode":"2715BC6E87BD83","user_header":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","comment_is_top":false,"comment_ctime":1574593148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574593148","product_id":100039001,"comment_content":"操作系统追求的是运行效率，c语言比较起其他高级语言效率更高，c语言虽然是面向过程的编程语言，但可以面向对象编程，就像作者说的那样","like_count":0},{"had_liked":false,"id":154513,"user_name":"王硕尧","can_delete":false,"product_type":"c1","uid":1743072,"ip_address":"","ucode":"8E5ED0B869C213","user_header":"https://static001.geekbang.org/account/avatar/00/1a/98/e0/8c814c13.jpg","comment_is_top":false,"comment_ctime":1574472516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574472516","product_id":100039001,"comment_content":"一个是结构体定义ADT，配合函数指针实现，另一个是宏定义配合C预处理器抽象出平台无关的部分","like_count":0},{"had_liked":false,"id":154432,"user_name":"Tom.G","can_delete":false,"product_type":"c1","uid":1206034,"ip_address":"","ucode":"7929B45C1A51F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","comment_is_top":false,"comment_ctime":1574429177,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574429177","product_id":100039001,"comment_content":"1.C语言出现时间更早<br>2.C语言效率更高<br>3.C语言对硬件的支持更好","like_count":0},{"had_liked":false,"id":154388,"user_name":"zeta","can_delete":false,"product_type":"c1","uid":1255260,"ip_address":"","ucode":"AF84A72375827C","user_header":"https://static001.geekbang.org/account/avatar/00/13/27/5c/ee2a876f.jpg","comment_is_top":false,"comment_ctime":1574421067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574421067","product_id":100039001,"comment_content":"操作系统级别的应用还是要采取执行更高效的代码，但最近包括Linux团队和微软都开始尝试采取Rust来扩展新的组件，这是个可喜的事实。因为Rust除了学习成本相对高以外（但个人感觉其实还是比C++低），是一种既能满足一定的面向对象特性提升代码质量，又能达到高效执行的语言。","like_count":0},{"had_liked":false,"id":154212,"user_name":"改变自己@","can_delete":false,"product_type":"c1","uid":1582711,"ip_address":"","ucode":"87184DEA07D68B","user_header":"https://static001.geekbang.org/account/avatar/00/18/26/77/ddbad55b.jpg","comment_is_top":false,"comment_ctime":1574391370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574391370","product_id":100039001,"comment_content":"简单来理解，不管是面向对象或者面向过程最后都是要合并到一起，然后按照顺序来存储到内存中然后等待被执行，面向过程即使分成多个文件来进行模仿面向对象的类的封装方式，也会通过预编译放到同一个文件中，然后按照对应的单线来执行。面向对象，虽然有类的封装分成不同的文件，也会通过四大特性封装，抽象，继承，多态，方便在程序的每个位置方便调用，只是给开发者提供更方便的编程方式，虽然可以在不同的地方进行交叉调用，最后大多也通过copy副本的方式，将调用的方法函数放到需要的位置，然后进行过程编程。以上是我对这两种编程的理解，有不对的地方希望老师和大家可以给予指正。我常用的是c#和Java很像，在日常的项目开发中，项目交叉调用，分块或分功能调用很多，面向对象确实非常方便，但是想要更好的编程，走的更远，底层的面向过程的编程方式是不可缺少的根基 。                     <br>       还有一点想请教一下老师，现在有一种是面向数据的编程方式，对于这种方式的学习老师有没有更好的建议，或者给一些方向，谢谢老师。","like_count":0},{"had_liked":false,"id":154165,"user_name":"heyman","can_delete":false,"product_type":"c1","uid":1173894,"ip_address":"","ucode":"92EF9EF1B1B1B3","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","comment_is_top":false,"comment_ctime":1574386322,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574386322","product_id":100039001,"comment_content":"“基于接口的抽象，可以让我们在不改变原有实现的情况下，轻松替换新的实现逻辑，提高了代码的可扩展性”。<br><br>老师您好，这句话不太明白，可以举个栗子吗？","like_count":0,"discussions":[{"author":{"id":1082785,"avatar":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","nickname":"郭俊杰","note":"","ucode":"D328E5738A4413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264843,"discussion_content":"可以看下前面章节，关于接口的抽象实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589351051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154024,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1574349481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574349481","product_id":100039001,"comment_content":"课堂讨论：（菜鸟个人猜测）感觉是因为操作系统语言要优先考虑计算机本身的底层操作和管理，因此他必须要用面向过程语言使得计算机更加容易理解，同时语言不高级才能保证执行过程中，避免太多的内存消耗，更加有效率更加快速的执行","like_count":0},{"had_liked":false,"id":153990,"user_name":"小明","can_delete":false,"product_type":"c1","uid":1625618,"ip_address":"","ucode":"5A0357E9849226","user_header":"https://static001.geekbang.org/account/avatar/00/18/ce/12/1488e361.jpg","comment_is_top":false,"comment_ctime":1574343763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574343763","product_id":100039001,"comment_content":"操作系统是与底层硬件直接交互的 使用面向过程的编程语言更高效 减少高级语言的封装 更好的控制对内存等的使用 因此对于编写代码的人的要求也更高","like_count":0},{"had_liked":false,"id":153967,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1574338155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574338155","product_id":100039001,"comment_content":"看到一个人用Javascript写的工具，用的是面向对象，ES6支持Class。如果C这些面向过程的语言直接改造面向对象有什么难点。是不是支持class，继承就好了？","like_count":0},{"had_liked":false,"id":153731,"user_name":"莲台野夜行","can_delete":false,"product_type":"c1","uid":1441180,"ip_address":"","ucode":"B759D03BAE15C3","user_header":"https://static001.geekbang.org/account/avatar/00/15/fd/9c/54e347ed.jpg","comment_is_top":false,"comment_ctime":1574300576,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574300576","product_id":100039001,"comment_content":"个人理解，考虑到机器语言的特性，面向过程的语言更适用于机器“理解“，操作系统作为翻译人类语言给机器的“业务平台“，使用面向过程的编程语言更合理，这和给人类使用的业务系统由面向对象语言编写并不冲突。","like_count":0},{"had_liked":false,"id":153488,"user_name":"wl","can_delete":false,"product_type":"c1","uid":1392730,"ip_address":"","ucode":"45062AA2460F1F","user_header":"https://static001.geekbang.org/account/avatar/00/15/40/5a/e65e8c40.jpg","comment_is_top":false,"comment_ctime":1574244903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574244903","product_id":100039001,"comment_content":"学习笔记：<br>今天学习了面向过程编程和面向过程编程语言，面向对象编程的优点。<br>面向过程编程和面向过程编程语言的概念（与面向对象编程对比）：<br>面向对象编程以类或对象作为组织代码的单元，面向过程编程不支持类或对象。<br>面向对象编程语言有四大特性（封装、抽象、继承、多态），面向过程编程语言不支持。<br>面向对象编程的优点：<br>1. 适合大型复杂系统开发<br>2. 更易维护、扩展、复用（考虑四大特性）<br>3. 更智能、更高级<br><br>思考题：<br>不矛盾。<br>老师在文中提到，语言是在不断演进的，开发那些系统的适合，还没有面向对象编程语言，但是也是可以通过面向过程的编程语言实现面向对象编程的。","like_count":0},{"had_liked":false,"id":153312,"user_name":"GGL","can_delete":false,"product_type":"c1","uid":1215892,"ip_address":"","ucode":"AED10B8248D1E7","user_header":"https://static001.geekbang.org/account/avatar/00/12/8d/94/150dfe78.jpg","comment_is_top":false,"comment_ctime":1574213998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574213998","product_id":100039001,"comment_content":"操作系统更加注重的是性能以及与底层硬件交互，使用面向过程的C语言编写可以更加精细的控制各个功能，比如内存；如果使用面向对象编程语言控制的不会那么精细，操作系统相比不是那么流畅。尤其是之前硬件成本高昂，使用面向对象编程语言更加不可能了。","like_count":0},{"had_liked":false,"id":153193,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1574177929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574177929","product_id":100039001,"comment_content":"还是没能深刻体会<br>如何给业务建模，如何将真实的世界映射为类或者对象，这让我们更加能聚焦到业务本身，而不是思考如何跟机器打交道","like_count":0},{"had_liked":false,"id":153188,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1510495,"ip_address":"","ucode":"C6FC61A90F202B","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/5f/4cbcbfb9.jpg","comment_is_top":false,"comment_ctime":1574176984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574176984","product_id":100039001,"comment_content":"计算机最重要的部件CPU 执行指令本身就是面向过程的（因为它从通电开始第一条指令就不断地执行下一条指令，直到断电）。导致编程时，最底层用面向过程是最接地气的。如果非要抽象出类，那抱歉，CPU不认识，所以必须需要做一些工作去适配OOP语言和CPU执行指令流之间差异。这部分工作就是开销(编译或翻译的开销)。也就是说，抽象是有开销的，高级是有开销的，因为CPU本身是低级的。所以操作系统用OOP语言编写的话就会有开销。既然用面向过程的C语言加一些面向对象的思想 能应付现代操作系统的复杂性，那就能秒杀OOP语言写的操作系统。","like_count":0},{"had_liked":false,"id":153042,"user_name":"Treasure","can_delete":false,"product_type":"c1","uid":1177602,"ip_address":"","ucode":"4211ECEB347C3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/02/a02d127d.jpg","comment_is_top":false,"comment_ctime":1574145461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574145461","product_id":100039001,"comment_content":"讲的真的是太好了。","like_count":0},{"had_liked":false,"id":153038,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1574144678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574144678","product_id":100039001,"comment_content":"<br>面向过程：是指解决问题的步骤，设计一天条流水线，机械的思维方式,记得存储过程不？就是这东西<br>优点：复杂问题流程化，进而简单化<br>缺点：可拓展性差<br><br>面向对象：对象就是特征和技能的结合体<br>优点：可拓展性强(封装、抽象、继承、多态)、易维护<br>缺点：性能低(因为类调用要实例化)<br><br><br>应用场景：用户需求经常变化，互联网应用，游戏，企业内部应用<br><br>复杂业务场景的时候少用面向过程，因为面向过程是针对一条或少量线路来的，如果多的话就会绕来绕去成网状的，这个过程用那个过程，调来调去，这时候还用过程无疑是雪上加霜<br><br><br>你说的隔离机器程度越高越智能，个人认为是站在开发者角度。在一定情况下（比如性能，比如c的指针）是更好的。","like_count":0},{"had_liked":false,"id":153028,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1574143051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574143051","product_id":100039001,"comment_content":"首先理解的是如果作者所说的，面向过程的语言还处于比较接近与计算机对话的语言，所以比起面向对象来说更适合作为操作系统本身的稳定性，以及流程性开发。而面向对象更多的适用于业务开发，更多的适合人去使用。<br>同时看到评论区有些小伙伴也说了其实面向对象的思维在操作系统中也有所体现，用了一部分的封装的思想，面向对象不局限于语言，受教了。","like_count":0},{"had_liked":false,"id":153003,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1574139030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574139030","product_id":100039001,"comment_content":"首先，Unix、Linux这些复杂系统开发出来时，面向对象编程并没有占据主流，其次，这些系统并非普通的业务系统，它们对性能的要求很高，所以用更贴近计算机的语言来更好地发挥硬件性能","like_count":0},{"had_liked":false,"id":152924,"user_name":"Paper","can_delete":false,"product_type":"c1","uid":1305388,"ip_address":"","ucode":"7EE26C2E892899","user_header":"https://static001.geekbang.org/account/avatar/00/13/eb/2c/ab72fda4.jpg","comment_is_top":false,"comment_ctime":1574124850,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574124850","product_id":100039001,"comment_content":"操作系统对于性能要求更加极致，使用c语言更具优势。此外，Unix  和 linux 诞生时面向对象语言还不是那么流行，同时也和作者的偏好有很大的关心。","like_count":0},{"had_liked":false,"id":152851,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1574089164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574089164","product_id":100039001,"comment_content":"1.因为当时面向对象的编程语言没有今天这么强大<br>2.都已经用C写了那么多年，作为程序员被告知要用另一种语言重写，而且没有性能上的优势，谁都不乐意啊<br>3.虽然go写的docker很6，但也是运行在Linux之上<br>4.高级语言提供了强大功能，但同时也占用了更多内存（例如Java中的包装类Integer比int更费内存）<br><br>总结：同意楼上同学说的性能问题","like_count":0},{"had_liked":false,"id":152841,"user_name":"ldd","can_delete":false,"product_type":"c1","uid":1208157,"ip_address":"","ucode":"E8344FAFFE5CF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/6f/5d/f0a19f09.jpg","comment_is_top":false,"comment_ctime":1574087505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574087505","product_id":100039001,"comment_content":"课后思考:<br>我觉得不冲突，Unix 或Linux 操作系统选择用c 应该更多的考量是性能方面。而文章中也说了，c 虽然是面向过程编程语言，但依然可以通过设计写出易于维护、易于扩展、易于复用的代码","like_count":0},{"had_liked":false,"id":152695,"user_name":"迈向架构师","can_delete":false,"product_type":"c1","uid":1637228,"ip_address":"","ucode":"2476594CF76001","user_header":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","comment_is_top":false,"comment_ctime":1574065161,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574065161","product_id":100039001,"comment_content":"它以过程（可以为理解方法、函数、操作）作为组织代码的基本单元<br>括号里是不是：可以|理解|为|","like_count":0},{"had_liked":false,"id":152653,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1574057344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574057344","product_id":100039001,"comment_content":"操作系统之所以用C来写，估计是比较考虑性能的要求吧；越高级的语言，由于抽象程度越高，其本省完成相同功能所实际进行的操作越多，性能相对来说就越低效","like_count":0},{"had_liked":false,"id":152585,"user_name":"scott","can_delete":false,"product_type":"c1","uid":1276032,"ip_address":"","ucode":"A3C507695AAF9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/78/80/d2547579.jpg","comment_is_top":false,"comment_ctime":1574046069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574046069","product_id":100039001,"comment_content":"面向对象编程 化繁为简，分治的思想","like_count":0},{"had_liked":false,"id":152574,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1574044757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574044757","product_id":100039001,"comment_content":"这些系统需要与二进制，汇编打交道，C语言这种面向过程的语言与它们更亲近些，更类似些。","like_count":0},{"had_liked":false,"id":152566,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1574043446,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574043446","product_id":100039001,"comment_content":"操作系统这些，重点是让我们我们需要思考，如何设计一组指令，告诉机器去执行这组指令，操作某些数据，帮我们完成某个任务。操作系统更能贴近底层，需要和底层更亲近些，而不需要太多的技巧，一步一步脚踏实地即可。<br><br>大胆想象一下，使用这种编程语言，我们可以无需对计算机知识有任何了解，无需像现在这样一行一行地敲很多代码，只需要把需求文档写清楚，就能自动生成我们想要的软件了。-----老师这句话写的真好，我之前也和小伙伴聊过，未来的发展估计就是弄个模板，让你去生成一个软件就行了，成为一个生成软件的流水工。所以，我们需要多多努力，以后可能就没饭吃了。","like_count":0},{"had_liked":false,"id":152557,"user_name":"董泽","can_delete":false,"product_type":"c1","uid":1640304,"ip_address":"","ucode":"3A9C52A40C05E7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epqhr6k2GrXDicNBGeYjzwrDfuwMaa21HRSdcKBvib1cK4E6CibvrdO1iawdzh330nRMoyobhfe3PxqVQ/132","comment_is_top":false,"comment_ctime":1574042717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574042717","product_id":100039001,"comment_content":"觉得原因是语言越高级对人越友好，反之语言越低级就对机器越友好","like_count":0},{"had_liked":false,"id":152495,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1574036524,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574036524","product_id":100039001,"comment_content":"对于我这种一开始就使用面向对象编程语言（Java）的人来说，确实是一篇扫盲的课程。","like_count":0},{"had_liked":false,"id":152443,"user_name":"小陳仔","can_delete":false,"product_type":"c1","uid":1245074,"ip_address":"","ucode":"8D5B6DB671E9FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/92/73d4ccd1.jpg","comment_is_top":false,"comment_ctime":1574002207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574002207","product_id":100039001,"comment_content":"个人理解：面向过程的编程语言更接近机器，执行效率高。","like_count":0},{"had_liked":false,"id":152413,"user_name":"沈康","can_delete":false,"product_type":"c1","uid":1611025,"ip_address":"","ucode":"02AFA50738AB8E","user_header":"https://static001.geekbang.org/account/avatar/00/18/95/11/eb431e52.jpg","comment_is_top":false,"comment_ctime":1573994099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573994099","product_id":100039001,"comment_content":"打个卡吧","like_count":0},{"had_liked":false,"id":152329,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1573973726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573973726","product_id":100039001,"comment_content":"<br>结论：不矛盾。<br>Unix系统发布于20世纪70年代，Linux系统发布于1991年。而面向对象编程的流行始于20世纪90年代。<br>即Unix和Linux发布的年代要早于面向对象编程流行的年代，In other word， Unix和Linux是有&quot;年代感“的software。<br>","like_count":0},{"had_liked":false,"id":152310,"user_name":"bucher","can_delete":false,"product_type":"c1","uid":1203973,"ip_address":"","ucode":"2A482BDBA2FD12","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/05/ca9ce3e9.jpg","comment_is_top":false,"comment_ctime":1573968407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573968407","product_id":100039001,"comment_content":"c语言虽然是面向过程的编程语言，但是功力深厚的编程者同样可以利用结构体等数据结构和思想写出面向对象的代码，具有非常好的代码扩展性","like_count":0},{"had_liked":false,"id":152257,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1573954321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573954321","product_id":100039001,"comment_content":"首先面向对象编程与面向过程的编程的侧重点不一样，不能说哪个编程范式比较好。在对于Linux操作系统而言，其面向的本身就是计算机，只需要告诉计算机特定的指令执行代码即可。当然也可以使用面向对象的思维方式来实现。而面向对象编程是面对的是将复杂的生活场景抽象成代码，所以这时候使用面向对象编程比较好。","like_count":0},{"had_liked":false,"id":152210,"user_name":"学好习，做好人","can_delete":false,"product_type":"c1","uid":1205294,"ip_address":"","ucode":"C991643DB458E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/2e/e70a317a.jpg","comment_is_top":false,"comment_ctime":1573915585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573915585","product_id":100039001,"comment_content":"说白了其实还是要弄清楚3点：第一：面向对象编程与面向对象编程语言是不是一样的  第二：面向过程编程与面向过程编程语言是不是一个东西   第三：是不是使用了面向对象语言写出的代码就是面向对象编程 、是不是使用了面向过程语言编程就体现不了面向对象编程的思想<br><br><br>这几点在前几节课讲基础的时候，老师讲的很明白了，在此自己举例子自己总结说明以下：<br><br>第一：Java是一门面向对象的语言，封装，继承，多态，抽象是面向对象语言的特性，当然Java在语法上面对这四大特性也很好的支持，但是是不是我们用Java写代码了，我们就会面向对象的编程思想了，我感觉不是，在很多Java的代码中，完全没有用到这几大特性，因为没用到，所以对开闭、里氏替换、依赖倒置等设计原则没有体现过，反过来讲，我们为什么写代码需要有设计原则，为什么需要有好的设计原则，是因为业务代码的逻辑几乎不会是一成不变的，所以在变化的时候，我们应该变化仅仅需要变化的部分，而不是推倒重来，所以我们需要设计原则来建立基础的模型，需要封装、继承、多态、抽象这些支持设计原则的最基本特性<br><br>第二：C语言是一门面向过程的编程语言，但是使用c语言编程的Unix系统，我感觉体现了面向对象编程的思想比如Unix系统的驱动设计，就是面向对象编程思想的体现<br><br>最后总结来看：选用什么样的语言来实现产品，来实现业务，跟很多因素有关，个人的能力，接入的快慢，公司的要求等等。<br><br>境界到了，语言对模型建立的影响应该很小了，这句话不知道说的对不对？因为我还远远没到这个境界，自己认为的","like_count":0},{"had_liked":false,"id":152208,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1573915148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573915148","product_id":100039001,"comment_content":"想起了上节的“绕口令”，不用面向对象语言也可以写出面向对象程序。操作系统源码应该已经做到这一点了，用面向过程语言是因为更贴近计算机，可以更好的做优化","like_count":0},{"had_liked":false,"id":152205,"user_name":"尚寂清","can_delete":false,"product_type":"c1","uid":1735856,"ip_address":"","ucode":"FA1D9D6844BC2E","user_header":"","comment_is_top":false,"comment_ctime":1573914367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573914367","product_id":100039001,"comment_content":"操作系统这么复杂的架构必然是使用面向对象实现的","like_count":0},{"had_liked":false,"id":152190,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1573908227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573908227","product_id":100039001,"comment_content":"据我所知linux也采用了面向对象的思想，unix时代主流编程思想应该还是面向过程吧","like_count":0},{"had_liked":false,"id":152185,"user_name":"jaryoung","can_delete":false,"product_type":"c1","uid":1077406,"ip_address":"","ucode":"6E72D107DB7E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","comment_is_top":false,"comment_ctime":1573905867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573905867","product_id":100039001,"comment_content":"个人觉得操作系统首选跟计算机，熟悉有不太熟悉的语言最好了。Java，go，py这些太高级了，太智能，意味着它需要吃更多的系统资源，而编写操作系统的语言不能太吃系统资源，还有就是我觉得是历史原因，C那时候是能跟计算机底层打交道，而且也能跟人打交道的最好语言。","like_count":0},{"had_liked":false,"id":152142,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1573890903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573890903","product_id":100039001,"comment_content":"使用任何一个编程语言编写的程序，最终执行上都要落实到CPU一条一条指令的执行（无论通过虚拟机解释执行，还是直接编译为机器码），CPU看不到是使用何种语言编写的程序。对于所有编程语言最终目的是两种：提高硬件的运行效率和提高程序员的开发效率。然而这两种很难兼得。<br>C语言在效率方面几乎做到了极致，它更适合挖掘硬件的价值，如：C语言用数组char a[8]，经过编译以后变成了（基地址＋偏移量）的方式。对于CPU来说，没有运算比加法更快，它的执行效率的算法复杂度是O(1)的。从执行效率这个方面看，开发操作系统和贴近硬件的底层程序，C语言是极好的选择。<br>C语言带来的问题是内存越界、野指针、内存泄露等。它只关心程序飞的高不高，不关心程序猿飞的累不累。为了解脱程序员，提高开发效率，设计了OOP等更“智能”的编程语言，但是开发容易毕竟来源于对底层的一层一层又一层的包装。完成一个特定操作有了更多的中间环节, 占用了更大的内存空间, 占用了更多的CPU运算。从这个角度看，OOP这种高级语言的流行是因为硬件越来越便宜了。我们可以想象如果大众消费级的主控芯片仍然是单核600MHz为主流，运行Android系统点击一个界面需要2秒才能响应，那我们现在用的大部分手机程序绝对不是使用JAVA开发的，Android操作系统也不可能建立起这么大的生态。<br>当然linux使用C语言开发有一些历史的原因。我们可以发明一种同样快的语言，但是没有C语言那么多的坑。D语言就是这么一个语言，但是没有太多的人用！这是因为现在有太多，太多太多的C代码，他们大部分都在正常工作，就像Linux, Window, MacOS，Unix，Vxworks操作系统内核以及GNU tool都是基于C语音开发，你想让这些人去用你的全新的语言，太难了。","like_count":0},{"had_liked":false,"id":152134,"user_name":"poppy","can_delete":false,"product_type":"c1","uid":1182792,"ip_address":"","ucode":"2ED2BDF703D0D9","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/48/ba59d28d.jpg","comment_is_top":false,"comment_ctime":1573888960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573888960","product_id":100039001,"comment_content":"个人理解:<br>1.写unix和linux系统的时候，主流语言还是面向过程的C语言，当时的作者肯定会偏向用擅长和主流的语言<br>2.unix和linux系统都是与硬件打交道的系统软件，C语言效率比较高，Java等面向对象的语言效率相对比较低，效率是一个很重要的点<br>3.由于unix和linux是更多的与机器打交道的系统，更符合面向过程思维。业务系统与人打交道更多，更符合面向对象思维。","like_count":0},{"had_liked":false,"id":152117,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1241567,"ip_address":"","ucode":"C42E11098E1B38","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","comment_is_top":false,"comment_ctime":1573883636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573883636","product_id":100039001,"comment_content":"c语言的执行效率更高","like_count":0},{"had_liked":false,"id":152116,"user_name":"光光","can_delete":false,"product_type":"c1","uid":1242876,"ip_address":"","ucode":"A0F1D0134C935F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/fc/171c4976.jpg","comment_is_top":false,"comment_ctime":1573883014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573883014","product_id":100039001,"comment_content":"从之前的01编程，到汇编、C（面向过程）到现在面向对象，其实是一个演化过程，从如何让机器工作，到如何让机器能更好的为人工作也是如此。现在用的unix，linux它们的硬件设计就是面向过程的设计理念，使用面向过程的语言能让机器更高效的运行；而对于人机交互、应用软件等面向对象更高效解决问题，操作系统也相应的改变。","like_count":0},{"had_liked":false,"id":152104,"user_name":"二十四桥仍在","can_delete":false,"product_type":"c1","uid":1232468,"ip_address":"","ucode":"5498FE5949190F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ce/54/c13b1d63.jpg","comment_is_top":false,"comment_ctime":1573878770,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1573878770","product_id":100039001,"comment_content":"我理解的面向对象是指，有一个User对象，不管被几个方法调用过，修改过几次，最后return User的时候，所有的修改都是生效的。方法都是针对这个对象去修改，所有的修改都生效。","like_count":0},{"had_liked":false,"id":152093,"user_name":"Beyond_JG","can_delete":false,"product_type":"c1","uid":1020825,"ip_address":"","ucode":"60CF343C35EF7C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/99/a232aa5a.jpg","comment_is_top":false,"comment_ctime":1573875802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573875802","product_id":100039001,"comment_content":"我虽然最先接触的是Basic，但是我还是个初级程序员😂😂","like_count":0},{"had_liked":false,"id":152088,"user_name":"Milittle","can_delete":false,"product_type":"c1","uid":1045455,"ip_address":"","ucode":"80E566639A8ABB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/cf/851dab01.jpg","comment_is_top":false,"comment_ctime":1573874459,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573874459","product_id":100039001,"comment_content":"面向过程更像是程序树，每一个分支都会有分叉，不同的程序路径走的是不同的任务执行。<br>面向对象更像是网络树，每一条路径都会有不同的任务执行。<br>个人认知，但是相对于面向过程来讲，我们在设计面向对象在设计的时候会比较复杂，而且对程序员的要求较高（当然不排除那些优秀的面向过程代码）","like_count":0},{"had_liked":false,"id":152084,"user_name":"个人练习生niki👍","can_delete":false,"product_type":"c1","uid":1191678,"ip_address":"","ucode":"48E5D6DE94BBBB","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/fe/5541689b.jpg","comment_is_top":false,"comment_ctime":1573873528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573873528","product_id":100039001,"comment_content":"<br> 汇编语言是低级语言，能够直接操作硬件，并且生成机器码的效率高。但汇编对平台的依赖性强，可移植性差，开发效率低。<br>而C语言则处于二者之间，可以在多种计算机平台上编译，移植性比较好，代码效率也比较高，可以对部分硬件直接访问，语言所产生的代码运行速度与汇编语言编写的代码运行速度几乎一样，开发效率较高。<br>高级的语言效率越低,如java要满足平台无关，代码编译成字节码，需由Java虚拟机读取运行， 所以效率偏低。","like_count":0},{"had_liked":false,"id":152082,"user_name":"马什么梅","can_delete":false,"product_type":"c1","uid":1665192,"ip_address":"","ucode":"251B100AC229EE","user_header":"https://static001.geekbang.org/account/avatar/00/19/68/a8/1fa41264.jpg","comment_is_top":false,"comment_ctime":1573873213,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573873213","product_id":100039001,"comment_content":"一门语言的广泛应用依托于其特性与历史,面向过程语言例如c相较于面向对象语言例如Java 对于底层有更快的运行效率,且操作系统诞生与大规模商用时是使用的面向过程语言,利用面向对象语言对操作系统进行重写有过高的生产成本","like_count":0},{"had_liked":false,"id":152039,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1573861695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573861695","product_id":100039001,"comment_content":"不矛盾， 面向过程语言也能实现面向对象的编码风格","like_count":0},{"had_liked":false,"id":152020,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1573835920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573835920","product_id":100039001,"comment_content":"不矛盾啊，操作系统的业务就是跟操作机器，操作硬件，而非像我们日常业务那样映射真是世界的对象，所以用和机器指令类似的面向过程编程语言岂不是更合适一点？","like_count":0},{"had_liked":false,"id":152002,"user_name":"探索无止境","can_delete":false,"product_type":"c1","uid":1044178,"ip_address":"","ucode":"91D2A9907DFA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/d2/7024431c.jpg","comment_is_top":false,"comment_ctime":1573831261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573831261","product_id":100039001,"comment_content":"老师每节课最后是否可以对上一节课留下的思考题谈谈您的想法，虽然留言区也有很多大神谈已经的理解，但作为读者更想听听作者的一些经验分享，这是购买专栏的初衷","like_count":0},{"had_liked":false,"id":151999,"user_name":"　扬帆丶启航　","can_delete":false,"product_type":"c1","uid":1235282,"ip_address":"","ucode":"4079D0889CD86C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/52/73351eab.jpg","comment_is_top":false,"comment_ctime":1573830959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573830959","product_id":100039001,"comment_content":"个人认为操作系统这种对性能有要求的用C语言编写是因为C语言更接近底层，速度更快。而且，用C语言编写也可以实现面向对象风格的编程。","like_count":0},{"had_liked":false,"id":151993,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1573829780,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573829780","product_id":100039001,"comment_content":"打卡6:复习了面向过程和面向对象的区别，主要收获是再次思考了这两种编程模式的思维上的不同—面向过程思维更多的是尝试按照模块化的方法去拆解问题，但是如果问题特别复杂，这种思维模式就会应付不来—面向对象思维则将抽象层次又提高了一层，离现实中的问题域更加近了，也就可以驾驭更复杂的问题，来搭建更复杂的软件系统。面向对象思维设计好的来里的方法的设计还是使用面向过程思维，这点很有趣，值得注意。","like_count":0},{"had_liked":false,"id":151990,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1573829216,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1573829216","product_id":100039001,"comment_content":"一个原因是历史原因，另外一个c 语言强大的性能，也是操作系统语言考虑，此外面向过程的语言也可以写出面向对象的代码，而且操作系统的需求比较稳定，没有众多的需求，更多的是追求稳定性、高性能。","like_count":0},{"had_liked":false,"id":151984,"user_name":"冯将","can_delete":false,"product_type":"c1","uid":1595747,"ip_address":"","ucode":"F2EEA94129ECD1","user_header":"https://static001.geekbang.org/account/avatar/00/18/59/63/6e69883a.jpg","comment_is_top":false,"comment_ctime":1573827788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573827788","product_id":100039001,"comment_content":"java的底层也是调用c，c++实现，代码执行效率低于c，但是它是面相对象编程语言，针对大型项目操作起来方便，而linux系统更加注重效率选择c语言，如果linux用java编写那系统就太卡了，我是这么理解的","like_count":0},{"had_liked":false,"id":151983,"user_name":"方向","can_delete":false,"product_type":"c1","uid":1261031,"ip_address":"","ucode":"CBB283D30C8C09","user_header":"https://static001.geekbang.org/account/avatar/00/13/3d/e7/e4b4afcc.jpg","comment_is_top":false,"comment_ctime":1573827378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573827378","product_id":100039001,"comment_content":"老师的每篇文章真的是深入浅出，易于理解有很有深度。看完文章，细想一下，其实现在目前编码很多时候都是用面向过程的编程方式去写业务需求，抽象能力不够，用的类也都是框架里面要求必须的，业务逻辑上按照功能分模块分文件，一个文件里有特定功能的函数，确实没有发挥面向对象编程语言的优势。希望跟着老师的节奏逐步利用起面向对象的优势。毕竟抽象越好质量肯定越高","like_count":0},{"had_liked":false,"id":151977,"user_name":"kimi","can_delete":false,"product_type":"c1","uid":1057192,"ip_address":"","ucode":"25DBF7D6859361","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/a8/1f93a764.jpg","comment_is_top":false,"comment_ctime":1573826401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573826401","product_id":100039001,"comment_content":"1 我认为的背后推动力 Unix和Linux出现的时代计算资源并不是相对过剩的，为了提升代码的人类接受程度而去牺牲机器的运行效率是十分奢侈的一件事。<br>2 Unix和Linux的定位并不是让大部分的人去修改这个系统，而是作为一共操作系统的平台去使用，作为使用者来说更为关心在这个平台上提供的工具和能力，平台以下的细节有需求再去改造，并不影响主要受众。","like_count":0},{"had_liked":false,"id":151967,"user_name":"夕_夕","can_delete":false,"product_type":"c1","uid":1262237,"ip_address":"","ucode":"DC01246C231965","user_header":"https://static001.geekbang.org/account/avatar/00/13/42/9d/dc645c1a.jpg","comment_is_top":false,"comment_ctime":1573823804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573823804","product_id":100039001,"comment_content":"1、底层语言更偏向机器打交道，执行更快，面向对象编程可以实现<br>2、高级语言最终还是会被翻译转换成底层语言，这个过程必然会有损效率<br>所以，并不矛盾，重在场景不同综合权益而已。","like_count":0},{"had_liked":false,"id":151946,"user_name":"旺旺","can_delete":false,"product_type":"c1","uid":1159196,"ip_address":"","ucode":"FE2CF90F446BFB","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/1c/2e30eeb8.jpg","comment_is_top":false,"comment_ctime":1573819579,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573819579","product_id":100039001,"comment_content":"Unix、Linux 这些复杂的系统，也都是基于 C 语言这种面向过程的编程语言开发的，只是因为：一方面这些系统诞生之初，面向对象语言还没有呢；另一方面C语言并不是说不能做面向对象编程，只是对编码人员的要求高，要求编程人更加自律，不像Java这种支持类的编程语言自身能从语言机制上提供更多面向对象的支持和限制。","like_count":0},{"had_liked":false,"id":151944,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1573819519,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573819519","product_id":100039001,"comment_content":"并不矛盾！像这些底层的操作系统 `Unix`、`Linux` 更需要的是优秀的运行性能，况且文章也说了，面向过程的编程语言也能够写出面向对象风格的代码。也就是说，使用面向过程的编程语言也能够构建大型的软件项目，还能够保证运行性能。","like_count":0},{"had_liked":false,"id":151943,"user_name":"暝","can_delete":false,"product_type":"c1","uid":1608600,"ip_address":"","ucode":"20AE1FDFE6DD91","user_header":"https://static001.geekbang.org/account/avatar/00/18/8b/98/ddbdea57.jpg","comment_is_top":false,"comment_ctime":1573818958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573818958","product_id":100039001,"comment_content":"“JAVA底层是用C语言编写的。<br><br>而JAVA虚拟机（JVM）是用C语言和汇编语言编写的。”<br>所以物理机使用机器语言，机器语言生汇编语言，汇编语言生C语言，C语言生万物。","like_count":0},{"had_liked":false,"id":151940,"user_name":"Warn","can_delete":false,"product_type":"c1","uid":1465310,"ip_address":"","ucode":"F2F7FCDB0940D0","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/de/152f1c2c.jpg","comment_is_top":false,"comment_ctime":1573818378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573818378","product_id":100039001,"comment_content":"个人觉得，操作系统的编写，一方面是因为这些语言出现的历史，就比如现在出现的各种框架一样，我的业务用自己发布的框架写起来更顺手；一方面是重构的成本和稳定性；还有就是语言的高级是针对对人的友好性来说的，操作系统是为了更快在机器上计算处理的。","like_count":0},{"had_liked":false,"id":151935,"user_name":"帆大肚子","can_delete":false,"product_type":"c1","uid":1529040,"ip_address":"","ucode":"3DB11DB2FA1802","user_header":"https://static001.geekbang.org/account/avatar/00/17/54/d0/4e1fc664.jpg","comment_is_top":false,"comment_ctime":1573817849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573817849","product_id":100039001,"comment_content":"不矛盾， 用面向对象可以写面向过程。<br>相反，用面向过程也可以写面向对象。<br>不过如文中所说， 付出的代价相对较大","like_count":0},{"had_liked":false,"id":151929,"user_name":"达文西","can_delete":false,"product_type":"c1","uid":1398824,"ip_address":"","ucode":"01C1063F23D634","user_header":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","comment_is_top":false,"comment_ctime":1573815945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573815945","product_id":100039001,"comment_content":"老师赶紧更新咯,,,","like_count":0},{"had_liked":false,"id":151901,"user_name":"努力努力再努力m","can_delete":false,"product_type":"c1","uid":1644369,"ip_address":"","ucode":"9DD9E9C2988FFC","user_header":"https://static001.geekbang.org/account/avatar/00/19/17/51/3e13dc0c.jpg","comment_is_top":false,"comment_ctime":1573809751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573809751","product_id":100039001,"comment_content":"C语言把硬件的运行效率压缩到了极致，这是java，python这些编程语言没办法比的。","like_count":0},{"had_liked":false,"id":151895,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1573807750,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573807750","product_id":100039001,"comment_content":"想知道课后题目的标准答案  \\smile","like_count":0},{"had_liked":false,"id":151881,"user_name":"大雄","can_delete":false,"product_type":"c1","uid":1371593,"ip_address":"","ucode":"4AF29A183AB495","user_header":"https://static001.geekbang.org/account/avatar/00/14/ed/c9/9abdd4c6.jpg","comment_is_top":false,"comment_ctime":1573805635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573805635","product_id":100039001,"comment_content":"Linux属于操作系统，需要对硬件有强大的控制能力，C语言更能满足要求，比如有指针；再者，使用过程化的编程语言一样可以编写出面向对象分格的代码。","like_count":0},{"had_liked":false,"id":151851,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1573799896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573799896","product_id":100039001,"comment_content":"感觉是操作系统都成熟以后才提出的面向对象编程。<br>另外也是由于c语言效率比较高，用新语言重写有点得不偿失","like_count":0},{"had_liked":false,"id":151841,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1573799397,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1573799397","product_id":100039001,"comment_content":"大胆想象一下，使用这种编程语言，我们可以无需对计算机知识有任何了解，无需像现在这样一行一行地敲很多代码，只需要把需求文档写清楚，就能自动生成我们想要的软件了。<br><br>王争老师好啊，这种编程语言出现了之后，我们是不是就不用学习面向对象和设计模式了呢？那我们现在不就白学了么？☹️","like_count":0,"discussions":[{"author":{"id":1592279,"avatar":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","nickname":"William Ning","note":"","ucode":"4DB8D05E69E5F3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51070,"discussion_content":"到了那个时候[个人认为短时间内不会实现], 猜测会产生两种结果, 水平一般的被取代,可能是被机器[倾向于机器], 可能是其他人, 技术牛的, 编写能自动生成我们想要软件的软件.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573807161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1141173,"avatar":"https://static001.geekbang.org/account/avatar/00/11/69/b5/1e1731cc.jpg","nickname":"zs阿帅","note":"","ucode":"07A54AE7F1CAFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51045,"discussion_content":"哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573803799,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151840,"user_name":"icephobia","can_delete":false,"product_type":"c1","uid":1284212,"ip_address":"","ucode":"CD383B35994331","user_header":"https://static001.geekbang.org/account/avatar/00/13/98/74/6edfe4c1.jpg","comment_is_top":false,"comment_ctime":1573799365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573799365","product_id":100039001,"comment_content":"第一：历史原因那个时代只有C最适合，受众最广。<br>第二：操作系统各个组件相对独立。难道硬要把网卡，硬盘等等这些硬件硬要抽象成硬件？<br>第三：C虽说不是面向对象语言，但是写代码的大牛们已经有了面向对象思想的雏形。<br>第四：感觉最重要的一点，面向对象概念不成熟的时期，可以通过分层的方式来达到与面向对象一样拥抱变化的效果。<br>","like_count":0},{"had_liked":false,"id":151834,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1573798662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573798662","product_id":100039001,"comment_content":"我觉得不矛盾 毕竟我发现很多开源框架都是c语言写的估计是因为更接近于机器所以执行更快,但是他们都采用了面向对象的思维方式去组织代码","like_count":0},{"had_liked":false,"id":151827,"user_name":"吃饭饭","can_delete":false,"product_type":"c1","uid":1231549,"ip_address":"","ucode":"95CFA07CDA2957","user_header":"https://static001.geekbang.org/account/avatar/00/12/ca/bd/a51ae4b2.jpg","comment_is_top":false,"comment_ctime":1573797565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573797565","product_id":100039001,"comment_content":"面向过程和面向对象只是一种语法抽象吧？不同的编码风格可能就会映射出不同的编程方式，有点牵强了","like_count":0},{"had_liked":false,"id":151825,"user_name":"нáпの゛","can_delete":false,"product_type":"c1","uid":1130666,"ip_address":"","ucode":"834FA877EFBAF7","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","comment_is_top":false,"comment_ctime":1573797462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573797462","product_id":100039001,"comment_content":"操作系统需要跟计算机接口打交道，需要用汇编、C等底层语言。","like_count":0},{"had_liked":false,"id":151820,"user_name":"远心","can_delete":false,"product_type":"c1","uid":1206787,"ip_address":"","ucode":"1157202C315655","user_header":"https://static001.geekbang.org/account/avatar/00/12/6a/03/cb597311.jpg","comment_is_top":false,"comment_ctime":1573796660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573796660","product_id":100039001,"comment_content":"## 为什么 Unix、Linux 是使用 C 这种面向过程编程语言开发的？<br>1. 历史原因。从二进制指令、汇编语言、面向过程编程语言、面向对象编程语言的发展历程来看，二进制指令和汇编语言由于不具备可移植性，并且不适用于开发大规模复杂程序，而 OOPL 比 POPL 出现得要晚。<br>2. Unix&#47;Linux 具备硬件管理的功能，而硬件运行的特点就是指令化、流程化，这一点与面向过程编程不谋而合。<br><br>## 我对未来编程语言的畅想<br><br>更加人性化、更加高级、更加智能，这一定是编程语言的发展方向，现在就已经出现了 AI 助力编程的消息了。<br><br>对于小争哥所想象的，根据需求规格说明书直接生成代码的编程方式。我觉得有一种方式更容易落地实现。由人类描述代码的设计思路，然后由智能化的编译器生成相应的代码。比如，人类描述 23 种设计模式，然后编译器实现。当然，由于 23 种设计模式只在一些经典问题中才会使用，所以对于一些不需要使用设计模式的编码场景，会需要使用类似的东西进行描述。我把这种编程风格称为面向思路编程。<br><br>其实，需求规格说明书也是一种表达，但是这种表达太过于接近业务。我不太相信几十年里能够做到。然而，面向思路编程是一种对于具体代码编码的描述，这种描述与业务需求描述无关。","like_count":0},{"had_liked":false,"id":151807,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1573794997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573794997","product_id":100039001,"comment_content":"1. 我觉得面向对象是一种思维方式，之前学习DDD和&lt;Thinking in uml&gt;<br>吸收到的一点就是拿到业务需求的时候，原来是脑子里面构建出来，并且还要思考业务顺序的前后影响。<br>if(业务规约1){<br>    A do something;<br>} else if(业务规约2){<br>    B do something;<br>}<br>现在的思维方式是，看到上面的业务描述，拿出本子记录<br>这个业务里面有A对象，有一个功能say();哪些数据是归A管理的<br>这个业务里面有B对象，有一个功能hello();哪些数据是归B管理的<br>所以我觉得面向对象思维，和你用什么语言写是太直接的关系。当然会限制你的实现。比如说虚拟文件系统，<br>我觉得就是面向对象的一种体现，可以支持ext、fat32等等，就是一种继承的体现。<br><br>2.有一个问题想问一下老师:目前我接触的项目实体都是贫血模型，<br>虽然分析业务的时候，会努力向面向对象靠近，但是业务代码实现的时候。<br>基本是每个分析的对象，功能包装进一个service，但是数据还是在贫血实体内。<br>有点类似DDD的聚合根(和实际DDD思想差的比较远)，<br>但是所有实体方法都是以服务的形式提供。但是一下子换成充血模型的话，<br>对团队整体代码和一些跨n个实体的业务方法，实现起来又有问题。<br>也没太想明白这个阶段怎么样比较合适。<br>想听听老师是怎么看待这个问题的。","like_count":0},{"had_liked":false,"id":151804,"user_name":"段启超","can_delete":false,"product_type":"c1","uid":1258209,"ip_address":"","ucode":"164CF3018071B2","user_header":"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg","comment_is_top":false,"comment_ctime":1573794616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573794616","product_id":100039001,"comment_content":"这个问题从两个方面来说：<br>1. linux 等这种操作系统层级的软件，更像是一个人机交互的中间层，向下，协调计算机硬件；向上，提供交互层，运行各种应用软件，执行用户的各种操作。对操作系统来说，执行效率要求更好，需要和硬件协调，这个正是C的强项。<br>2.时间节点。Linux产生的时间比较早，那个时候，c作为一门在当时来说，还算比较高级的语言，当然也是首选。<br>面向对象和面向过程都是风格，和具体语言无关。","like_count":0},{"had_liked":false,"id":151794,"user_name":"路伴友行","can_delete":false,"product_type":"c1","uid":1506974,"ip_address":"","ucode":"96B54B7EEAEDAD","user_header":"https://static001.geekbang.org/account/avatar/00/16/fe/9e/8165b0a0.jpg","comment_is_top":false,"comment_ctime":1573792822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573792822","product_id":100039001,"comment_content":"感觉要牵扯到Linux内核设计了...<br>要和硬件打交道的高级语言也只有c了 c++太繁重了没有c简练。<br>面相对象编程范式是一种约束 C语言完全可以做到的，结构体（ADT）+ 各种类型的指针，只能说那些巨佬太强大了！普通人根本就做不到的","like_count":0},{"had_liked":false,"id":151785,"user_name":"好吃不贵","can_delete":false,"product_type":"c1","uid":1316993,"ip_address":"","ucode":"6576E2BECE4F7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/18/81/83b6ade2.jpg","comment_is_top":false,"comment_ctime":1573791683,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573791683","product_id":100039001,"comment_content":"Linux操作系统好多模块都是分层实现的。每层在实现上，都尽量和上下两层无关，比如网络模块。另外也有用operations封装回调函数进行抽象的方式。比如file_operations是对不同类型文件操作的抽象。每种类型的文件都可以有自己的read，write函数。如果是设备文件，会调用驱动的读写函数。还有其他如net_device_ops是对以太网不同设备操作的抽象。","like_count":0},{"had_liked":false,"id":151784,"user_name":"NeverMore","can_delete":false,"product_type":"c1","uid":1608843,"ip_address":"","ucode":"835B9884DFA102","user_header":"https://static001.geekbang.org/account/avatar/00/18/8c/8b/bc18b962.jpg","comment_is_top":false,"comment_ctime":1573791521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573791521","product_id":100039001,"comment_content":"操作系统底层虽然是使用面向过程编程语言开发的，但是面向对象的思想却深入其中。像是Linux Kernel，它又分成各个子系统，同时又有分离、分层的概念。比如开发一个设备的驱动，只需要分配一个对应的核心层的结构体，对结构体的成员做出该设备特定的设置即可，而设备驱动的很多方法都可以使用核心层的代码；这个过程其实就类似于面向对象编程的继承。<br>可见对于复杂的系统的开发，面向对象的风格还是远胜于面向过程的。<br>操作系统底层为何需要使用C语言，我觉得一方面是基于其效率考虑，另一方面则是为了增强在不同体系架构之间的可移植性吧，因为不同的体系架构其汇编指令是不同的，而C代码在底层可以很好的和汇编代码结合。","like_count":0},{"had_liked":false,"id":151769,"user_name":"沐夜星光","can_delete":false,"product_type":"c1","uid":1447220,"ip_address":"","ucode":"22F699E237B179","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia2EwyyEVs3tWRnMlqaAG7R7HvlW4vGvxthKsicgsCEeXO1qL7mMy6GAzgdkSKcH3c70Qa2hY3JLw/132","comment_is_top":false,"comment_ctime":1573788262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573788262","product_id":100039001,"comment_content":"不太理解为什么说c是更底层，更接近机器码的语言，以及效率更高的原因。同样是高级语言，同样被编译成机器码执行，是因为面向对象语言需要支持更多特性导致编译成的指令更加冗杂吗？如果不考虑效率的问题，面向对象语言对人的友好性，是不是更容易考法呢？","like_count":0},{"had_liked":false,"id":151764,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1573786860,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573786860","product_id":100039001,"comment_content":"用C写操作系统可能是因为更加接近底层性能更好？还有就是不设计业务的频繁变动业务模块变动？","like_count":0},{"had_liked":false,"id":151752,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1573785299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573785299","product_id":100039001,"comment_content":"我的理解是，语言的简易性的提升伴随的是性能的丢失，网络服务可以通过增加实例来提升集群性能，但是操作系统是部署在单机上的，只能考虑高性能的语言(前三甲应该是就是C C++ RUST吧)，在linux的初期高级语言应该只有C语言吧。","like_count":0},{"had_liked":false,"id":151742,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1573783891,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573783891","product_id":100039001,"comment_content":"提问：<br>“对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。”<br><br>如何体现的呢？能举个例子具体说说么？","like_count":0},{"had_liked":false,"id":151739,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1573783419,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573783419","product_id":100039001,"comment_content":"越接近机器，那样语言就是越过程的语言。","like_count":0},{"had_liked":false,"id":151736,"user_name":"Lifelong Learning","can_delete":false,"product_type":"c1","uid":1173517,"ip_address":"","ucode":"3E39BED3E13FB4","user_header":"https://static001.geekbang.org/account/avatar/00/11/e8/0d/fcd95db8.jpg","comment_is_top":false,"comment_ctime":1573783118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573783118","product_id":100039001,"comment_content":"unix,linux等操作系统更接近硬件,其实操作系统是硬件的一个映射,就和我们身体各个器官都是硬件的组成部分,但是要这些硬件动起来就得让我们的思维和思想来操控了,操作系统要想更快的操作硬件就得按照机器的语言进行编译否则反应太慢了,而编程语言是我们人类使用的,而想让我们人类更快的使用电脑和程序,那编程语言应该就要更接近人类的思维模式,说到底就是面向过程和面向对象不是完全对立,他们的出现只是为了解决不同问题,让效率更高效罢了!","like_count":0},{"had_liked":false,"id":151726,"user_name":"Young！","can_delete":false,"product_type":"c1","uid":1025221,"ip_address":"","ucode":"2A658CEFD26011","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/c5/a53f8bbc.jpg","comment_is_top":false,"comment_ctime":1573782125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573782125","product_id":100039001,"comment_content":"面向对象的思想与实践是晚于面向过程的，当时的人们最主要的需求目标是如何更好的与机器交互，而不是像现在这样需要大量业务场景，所以对于那个时候来说，面向过程思想无疑是最好最适合编写操作系统的语言。现在各种业务应用场景，如果还是面向过程偏底层的语言去实现的话，对于编程门槛以及便利性也是非常不友好的。","like_count":0},{"had_liked":false,"id":151724,"user_name":"幻月剑","can_delete":false,"product_type":"c1","uid":1120906,"ip_address":"","ucode":"44F7B62F5CB4E9","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/8a/ae50ecbb.jpg","comment_is_top":false,"comment_ctime":1573781963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573781963","product_id":100039001,"comment_content":"Linux、Unix这类的系统，是偏底层的，这类系统是面向机器编程，对性能和对底层的掌控要求更高，面向对象的编程语言因为对人更友好，那么对于机器就不那么友好，所以依然采用面向过程编程","like_count":0},{"had_liked":false,"id":151711,"user_name":"不与三季人说","can_delete":false,"product_type":"c1","uid":1693164,"ip_address":"","ucode":"A3F03832309FDD","user_header":"https://static001.geekbang.org/account/avatar/00/19/d5/ec/3d6e7ea7.jpg","comment_is_top":false,"comment_ctime":1573780849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573780849","product_id":100039001,"comment_content":"面向过程是偏向底层的，机器更容易理解和执行，效率更高，代码量会少很多，但是错综复杂不易理解，越底层的语言越面向过程，学习过汇编，都是直接操作内存，操作cpu，无关业务，高级的语言易扩展易维护，开发效率高，但是相对来说代码执行效率没有达到极致，很多追求极致的软件底层最终还是使用C语言写，面向过程的语言和面向对象的语言没有谁好谁坏，都是在各自发挥着自己的用武之地。","like_count":0},{"had_liked":false,"id":151699,"user_name":"梁军","can_delete":false,"product_type":"c1","uid":1521145,"ip_address":"","ucode":"81E22EFAFD77B4","user_header":"https://static001.geekbang.org/account/avatar/00/17/35/f9/7a682fc1.jpg","comment_is_top":false,"comment_ctime":1573780146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573780146","product_id":100039001,"comment_content":"其实这些理论知识自己看是很无聊的，但却是很重要，跟着这样学效果不错，希望对后面的内容有大的支持","like_count":0},{"had_liked":false,"id":151698,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1573780056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573780056","product_id":100039001,"comment_content":"跟人打交道，就要用高级语言！省事！","like_count":0},{"had_liked":false,"id":151695,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212758,"ip_address":"","ucode":"ABF1824D24BA2F","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/56/311be282.jpg","comment_is_top":false,"comment_ctime":1573779984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573779984","product_id":100039001,"comment_content":"个人觉得更新是一种编程习惯，各有各的好处，看你如何用好。","like_count":0},{"had_liked":false,"id":151694,"user_name":"杨景胜","can_delete":false,"product_type":"c1","uid":1005023,"ip_address":"","ucode":"1B4FB1326032B6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/df/6dfd3cde.jpg","comment_is_top":false,"comment_ctime":1573779968,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573779968","product_id":100039001,"comment_content":"linux系统里面大量的使用抽象，用结构体加函数指针的方式实现了类的功能，就是面向对象的方法，只是用 c 写起来不那么直观。","like_count":0},{"had_liked":false,"id":151691,"user_name":"肥而不腻","can_delete":false,"product_type":"c1","uid":1435246,"ip_address":"","ucode":"3E6786A82A6DD6","user_header":"https://static001.geekbang.org/account/avatar/00/15/e6/6e/062da5e4.jpg","comment_is_top":false,"comment_ctime":1573779633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573779633","product_id":100039001,"comment_content":"关于思考题，个人理解一个是提出时间先后，另一个是性能问题吧！","like_count":0},{"had_liked":false,"id":151686,"user_name":"狂飙的蜗牛","can_delete":false,"product_type":"c1","uid":1227358,"ip_address":"","ucode":"0F57A6F7DEF567","user_header":"https://static001.geekbang.org/account/avatar/00/12/ba/5e/a299e7d5.jpg","comment_is_top":false,"comment_ctime":1573779279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573779279","product_id":100039001,"comment_content":"我想更重要的是为了追求极致性能考虑吧","like_count":0},{"had_liked":false,"id":151678,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1573778832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573778832","product_id":100039001,"comment_content":"从性能，还有操作系统运行方面cpu，c执行更快","like_count":0},{"had_liked":false,"id":151676,"user_name":"quietwater","can_delete":false,"product_type":"c1","uid":1055029,"ip_address":"","ucode":"C25E2CD356D3F9","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/35/be8372be.jpg","comment_is_top":false,"comment_ctime":1573778576,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573778576","product_id":100039001,"comment_content":"操作系统是离计算机最近的一层，都是和计算机打交道，当然面向过程更合适了。<br>如果做业务系统主要是解决业务问题，面向对象和业务更接近。<br>","like_count":0},{"had_liked":false,"id":151661,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1573777380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573777380","product_id":100039001,"comment_content":"unix和linux是用面向对象编程思想和面向过程语言写出来的","like_count":0},{"had_liked":false,"id":151644,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1573774570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573774570","product_id":100039001,"comment_content":"c语言与汇编语言可以互转，而且面相过程更符合机器执行逻辑速度更快","like_count":0},{"had_liked":false,"id":151635,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1573773153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573773153","product_id":100039001,"comment_content":"思考题，我觉得不矛盾。linux更加偏向于底层的操作。可能也有几十遗留问题，或者说c的执行效率更加。这都是猜想。等待其他同学详细解答。","like_count":0},{"had_liked":false,"id":151627,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1573765603,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573765603","product_id":100039001,"comment_content":"面向过程的方法，整个实现只用到函数和数据类（对象的萌芽，但思维方式上更接近于int等系统类型）。这两者把世界分成动词和名词两类。要表达主谓宾这样的结构比较费解。代码的分割也比较随意。<br>面向对象把世界重新打包，先把相关的名词和动词组成类，再定义类之间的调用，这样可以很清晰的表达主谓宾的结构。有了类的定义以后，系统分解就多了一个工具，更加适应于网状的现实世界。类提供的边界，也更适应于现实世界丰富的层次以及不同个体需要看到不同的信息。","like_count":0},{"had_liked":false,"id":151623,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1573763039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573763039","product_id":100039001,"comment_content":"深夜战斗中, 顺便追一篇","like_count":0},{"had_liked":false,"id":151614,"user_name":"WIZ","can_delete":false,"product_type":"c1","uid":1260348,"ip_address":"","ucode":"313AF84674475C","user_header":"https://static001.geekbang.org/account/avatar/00/13/3b/3c/2947127c.jpg","comment_is_top":false,"comment_ctime":1573750405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573750405","product_id":100039001,"comment_content":"打卡，思考题不太清楚，明早看大神留言。","like_count":0},{"had_liked":false,"id":151605,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1573748939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573748939","product_id":100039001,"comment_content":"linux，unix用C语言主要是历史原因吧","like_count":0},{"had_liked":false,"id":152141,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1573890443,"is_pvip":false,"replies":[{"id":"58741","content":"👍","user_name":"作者回复","comment_id":152141,"uid":"1190123","ip_address":"","utype":1,"ctime":1574129736,"user_name_real":"王争"}],"discussion_count":48,"race_medal":0,"score":"4734627850635","product_id":100039001,"comment_content":"使用任何一个编程语言编写的程序，最终执行上都要落实到CPU一条一条指令的执行（无论通过虚拟机解释执行，还是直接编译为机器码），CPU看不到是使用何种语言编写的程序。对于所有编程语言最终目的是两种：提高硬件的运行效率和提高程序员的开发效率。然而这两种很难兼得。<br>C语言在效率方面几乎做到了极致，它更适合挖掘硬件的价值，如：C语言用数组char a[8]，经过编译以后变成了（基地址＋偏移量）的方式。对于CPU来说，没有运算比加法更快，它的执行效率的算法复杂度是O(1)的。从执行效率这个方面看，开发操作系统和贴近硬件的底层程序，C语言是极好的选择。<br>C语言带来的问题是内存越界、野指针、内存泄露等。它只关心程序飞的高不高，不关心程序猿飞的累不累。为了解脱程序员，提高开发效率，设计了OOP等更“智能”的编程语言，但是开发容易毕竟来源于对底层的一层一层又一层的包装。完成一个特定操作有了更多的中间环节, 占用了更大的内存空间, 占用了更多的CPU运算。从这个角度看，OOP这种高级语言的流行是因为硬件越来越便宜了。我们可以想象如果大众消费级的主控芯片仍然是单核600MHz为主流，运行Android系统点击一个界面需要2秒才能响应，那我们现在用的大部分手机程序绝对不是使用JAVA开发的，Android操作系统也不可能建立起这么大的生态。","like_count":1103},{"had_liked":false,"id":151616,"user_name":"猫切切切切切","can_delete":false,"product_type":"c1","uid":1075033,"ip_address":"","ucode":"F350BA1B7FFDC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","comment_is_top":false,"comment_ctime":1573751345,"is_pvip":true,"discussion_count":8,"race_medal":0,"score":"1152624986673","product_id":100039001,"comment_content":"操作系统是业务无关的，它更接近于底层计算机，因此更适合用面向过程的语言编写。而接近业务的也就是接近人的软件，则更适合用面向对象的语言编写。","like_count":269,"discussions":[{"author":{"id":1102062,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","nickname":"LYy","note":"","ucode":"8D5C39B9531E71","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51029,"discussion_content":"业务无关不等于适合用面向过程的编程语言，反倒是操作系统、中间件、框架这种业务无关的软件更需要用面向对象的思想去抽象和设计。\n面向对象思想的落地不一定要依托于面向对象语言，操作系统的设计是很面向对象的。","likes_number":30,"is_delete":false,"is_hidden":false,"ctime":1573801607,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1075033,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","nickname":"猫切切切切切","note":"","ucode":"F350BA1B7FFDC4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1102062,"avatar":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","nickname":"LYy","note":"","ucode":"8D5C39B9531E71","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":51330,"discussion_content":"有道理，使用非面向对象的语言一样可以写出面向对象的程序。\n\n操作系统的实现使用什么语言，关注的或许更多应该是其效率，而操作系统的设计才更多需要关心面向过程还是面向对象。\n\n所以操作系统使用C，是因为它更接近于底层，效率更高，但用C编写的操作系统同样应该使用面向对象设计，因为这无疑是个规模庞大逻辑复杂的程序。","likes_number":16,"is_delete":false,"is_hidden":false,"ctime":1573833756,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51029,"ip_address":""},"score":51330,"extra":""},{"author":{"id":2460726,"avatar":"https://static001.geekbang.org/account/avatar/00/25/8c/36/48b9370a.jpg","nickname":"汤瑞麟","note":"","ucode":"18D4B4D32E82BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1075033,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","nickname":"猫切切切切切","note":"","ucode":"F350BA1B7FFDC4","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":387161,"discussion_content":"并不是因为C效率更高，而且操作系统作为和硬件直接交互的最底层软件。写他的语言需要提供直接访问内存的方案。但是现在绝大多数高级语言都是不允许直接访问内存的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628019299,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51330,"ip_address":""},"score":387161,"extra":""},{"author":{"id":2460726,"avatar":"https://static001.geekbang.org/account/avatar/00/25/8c/36/48b9370a.jpg","nickname":"汤瑞麟","note":"","ucode":"18D4B4D32E82BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1075033,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","nickname":"猫切切切切切","note":"","ucode":"F350BA1B7FFDC4","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":387162,"discussion_content":"或者说并不完全因为","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628019314,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":51330,"ip_address":""},"score":387162,"extra":""}]},{"author":{"id":1734611,"avatar":"","nickname":"Mirinda","note":"","ucode":"D045188230CC08","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54891,"discussion_content":"我觉得  操作系统还是考虑了效率的问题, 因为里面还有很大一部分汇编语言. 操作系统一样 也是一种业务,说他不是业务那真是外行.","likes_number":18,"is_delete":false,"is_hidden":false,"ctime":1574322651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1249136,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0f/70/759b1567.jpg","nickname":"张飞online","note":"","ucode":"C9787E4B35888C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53717,"discussion_content":"说的简直外行，第一，操作系统用c是因为那时候没有其他语言，这是根本，第二操作系统的代码你看看内核那个框架不是用结构体设计为面相对象的","likes_number":15,"is_delete":false,"is_hidden":false,"ctime":1574211541,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1075033,"avatar":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","nickname":"猫切切切切切","note":"","ucode":"F350BA1B7FFDC4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1249136,"avatar":"https://static001.geekbang.org/account/avatar/00/13/0f/70/759b1567.jpg","nickname":"张飞online","note":"","ucode":"C9787E4B35888C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":54730,"discussion_content":"嗯，已经反省了，在第一条回复的评论里。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1574311614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":53717,"ip_address":""},"score":54730,"extra":""}]},{"author":{"id":1485185,"avatar":"https://static001.geekbang.org/account/avatar/00/16/a9/81/385b09dd.jpg","nickname":"张小俊","note":"","ucode":"42B37D50B321B9","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87221,"discussion_content":"因为那时候还没有C++","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1576653257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151628,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1573765740,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"375235920492","product_id":100039001,"comment_content":"思考题<br>大学学习操作系统的时候，大部分内容已经忘了，还记得老师说过，虽然操作系统是用C语言写的，但是面向对象的思想早已深入到操作系统的源代码中。","like_count":87,"discussions":[{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414431,"discussion_content":"使用面向过程的语言来编写编程过程的代码/狗头","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636735248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151847,"user_name":"LYy","can_delete":false,"product_type":"c1","uid":1102062,"ip_address":"","ucode":"8D5C39B9531E71","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/ee/f5c5e191.jpg","comment_is_top":false,"comment_ctime":1573799776,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"345171183456","product_id":100039001,"comment_content":"操作系统虽然是用面向过程的C语言实现的 但是其设计逻辑是面向对象的。<br>C语言没有类和对象的概念，但是用结构体（struct）同样实现了信息的封装，内核源码中也不乏继承和多态思想的体现。<br>面向对象思想，不局限于具体语言。","like_count":81},{"had_liked":false,"id":151631,"user_name":"辣么大","can_delete":false,"product_type":"c1","uid":1396951,"ip_address":"","ucode":"AB308B6DCA0108","user_header":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","comment_is_top":false,"comment_ctime":1573770474,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"306516448490","product_id":100039001,"comment_content":"我们以历史的时间线看看这两种语言的演进过程。<br>1969年贝尔实验室提出Unix操作系统<br>1972年贝尔实验室的Dennis Ritchie开发C语言。<br>1973年他用C语言重写了Unix。<br>1991年Linus Torvalds提出Linux。<br><br>另外一条线面向对象语言的发展：<br>1972年第一个面向对象的编程语言是Simula发布。<br>1996年，Java1.0发布，流行的主要原因是jvm，Write Once, Run Anywhere（编写一次，到处安装JRE）<br><br>从时间上看，面向对象概念的提出晚于面向过程。C语言因商业应用成熟要比面相对象的编程语言早。<br><br>C语言的流行主要是因为Unix和Linux操作系统的实现基于C语言。类Unix系统可以运行在服务器，嵌入式设备，移动设备上。<br><br>一个东西的好坏要综合考虑：面向过程和面向对象各有各的优缺点。一门编程语言的提出是为了解决某些特定的问题。面向对象和面向过程在应用上各有各的位置。","like_count":71,"discussions":[{"author":{"id":1046302,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","nickname":"有铭","note":"","ucode":"2C7CB36CA5C04C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51052,"discussion_content":"你不能从面向对象里把c++去掉了。实际上c++才是面向对象大面积应用的第一个语言。虽然它的面向对象有很多让人诟病的地方","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1573805335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053955,"avatar":"https://static001.geekbang.org/account/avatar/00/10/15/03/c0fe1dbf.jpg","nickname":"考休","note":"","ucode":"968DFC00D6D0CF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53085,"discussion_content":"我觉得这个角度是很准确的，像操作系统这样的庞杂，其实还是很适合使用面向对象的方式来实现","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574130428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51073,"discussion_content":"很好的补充，谢谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573807633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152331,"user_name":"寒江独钓者","can_delete":false,"product_type":"c1","uid":1681787,"ip_address":"","ucode":"040E088986866A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLHtezkm2QCpQSD2sp0GhUmdTNhCfbtsPXGhXxUfwrDp4jQQfbWicI0a94zibK6xCvAEWdO48aKoEhg/132","comment_is_top":false,"comment_ctime":1573974636,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"242092143212","product_id":100039001,"comment_content":"读过linux内核源码和python解释器源码的应该都明白，所谓面向过程的C语言照样可以实现面向对象的思想，有很多设计都是非常优雅的，付出的代价并不高，我并不认为面向对象编程语言做相同的事情付出的代价会更低。编程思想、设计模式跟语言是没有关系的，编程思想和设计模式是指导我们编程的，而编程语言只是一种实现工具罢了。","like_count":56,"discussions":[{"author":{"id":1444483,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","nickname":"风","note":"","ucode":"E1CE0825AAF805","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301630,"discussion_content":"对操作系统和解释器这种底层软件而言，它们的变化性不大，功能需求清晰单调，所以用C语言按面向对象的思想去写，会感觉也没付出太多额外的代价。\n但如果换成是业务类代码，比如UI应用，如果用C，用面向对象去写，付出的额外代价，那就不可小视了","likes_number":18,"is_delete":false,"is_hidden":false,"ctime":1598592375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200660,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/14/cb118a61.jpg","nickname":"键舞飞扬","note":"","ucode":"4EC7A8D2E7AC78","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341849,"discussion_content":"即便是工具，也是为了解决某些问题的，如果不能为面向对象带来好处，还要面向对象语言干什么?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610537181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152706,"user_name":"养成好习惯","can_delete":false,"product_type":"c1","uid":1388018,"ip_address":"","ucode":"7919C9592E2B2C","user_header":"https://static001.geekbang.org/account/avatar/00/15/2d/f2/07b94d3c.jpg","comment_is_top":false,"comment_ctime":1574066918,"is_pvip":false,"replies":[{"id":"58736","content":"函数式编程让写代码更加简单些，封装了很多设计模式、并发处理，可能是个趋势。","user_name":"作者回复","comment_id":152706,"uid":"1190123","ip_address":"","utype":1,"ctime":1574129035,"user_name_real":"王争"}],"discussion_count":4,"race_medal":0,"score":"117538183910","product_id":100039001,"comment_content":"go语言大力推举函数式编程，这是趋势吗老师","like_count":28,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474906,"discussion_content":"函数式编程让写代码更加简单些，封装了很多设计模式、并发处理，可能是个趋势。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574129035,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299436,"discussion_content":"go哪有大力推举函数式编程？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597679703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1019568,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","nickname":"CcczzZ","note":"","ucode":"5F46DA5053D2BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1104850,"avatar":"https://static001.geekbang.org/account/avatar/00/10/db/d2/e29f8834.jpg","nickname":"lidashuang","note":"","ucode":"560ABE8032760E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393874,"discussion_content":"函数是&#34;一等公民&#34;","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1631622667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":299436,"ip_address":""},"score":393874,"extra":""},{"author":{"id":1200650,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/0a/65976e95.jpg","nickname":"kougazhang","note":"","ucode":"E9AD678FCEC75D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1019568,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","nickname":"CcczzZ","note":"","ucode":"5F46DA5053D2BB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":533789,"discussion_content":"函数一等公民和函数式编程差很远吧？\ngo 是现代化的C语法，语言层面支持了并发","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637976002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":393874,"ip_address":""},"score":533789,"extra":""}]}]},{"had_liked":false,"id":151722,"user_name":"李小四","can_delete":false,"product_type":"c1","uid":1112747,"ip_address":"","ucode":"2A766BE16B276B","user_header":"https://static001.geekbang.org/account/avatar/00/10/fa/ab/0d39e745.jpg","comment_is_top":false,"comment_ctime":1573781855,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"117537898847","product_id":100039001,"comment_content":"设计模式_06<br>操作系统的源码一直没读过，但我认为如此复杂的系统设计，(站在现在的时间点)用面向对象风格(或实现相同目的其他方式)来编写代码是更合适的，而且从Linux的模块化分来看，推测有类似的实践。<br><br>老话说, 机器能读懂所有代码, 但人不一定. 对于机器来说, 每一次业务调用流程都是序列化的, 机器并不在乎面向对象, 但人在乎. 正如本文所讲, 编程语言离机器越来越远, 离人越来越近. 为了迁就人, 我们使用了执行效率更低的语言, 有了更多的中间环节, 占用了更大的内存空间, 换来的是这个行业的蓬勃发展以及让人类的便捷生活和能力延伸.","like_count":27},{"had_liked":false,"id":151601,"user_name":"lijun","can_delete":false,"product_type":"c1","uid":1116095,"ip_address":"","ucode":"69EC8B86211AD9","user_header":"https://static001.geekbang.org/account/avatar/00/11/07/bf/49f385ec.jpg","comment_is_top":false,"comment_ctime":1573747545,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"91768060761","product_id":100039001,"comment_content":"深夜追设计模式！🤑","like_count":21,"discussions":[{"author":{"id":1113597,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","nickname":"注定非凡","note":"","ucode":"80673056E131B7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290392,"discussion_content":"你让我对双亲委派机制又多了一些理解，感谢感谢","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1594456151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2618193,"avatar":"https://static001.geekbang.org/account/avatar/00/27/f3/51/c8eb2d0c.jpg","nickname":"Amon Tin","note":"","ucode":"25391BEEB6A719","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":378497,"discussion_content":"要看懂这个评论的前提是先理解不同类加载器之间有父子关系","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1623246936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1708328,"avatar":"","nickname":"Geek_897ea4","note":"","ucode":"864B05054D686A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344464,"discussion_content":"简单的说单例就是唯一，而能在一个jvm实例中（进程）决定类是否唯一，就是看这个类的类加载器是否是同一个","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1611470800,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095857,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","nickname":"梦倚栏杆","note":"","ucode":"BDEB97F2822445","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186660,"discussion_content":" 不是很理解，有进一步的资料或者信息吗？ 类加载和实例化是两个概念吧。单例或者多例都是指的实例化呀","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1582703669,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1236496,"avatar":"https://static001.geekbang.org/account/avatar/00/12/de/10/9f15527d.jpg","nickname":"傲慢与偏执，","note":"","ucode":"E9F81223DFAD24","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1095857,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","nickname":"梦倚栏杆","note":"","ucode":"BDEB97F2822445","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":192902,"discussion_content":"不同的classloader加载同一个class文件，实例化出来的对象是不同的，也就是说同一个class文件在进程中实例化了两个不同的对象。  个人理解","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1583109947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":186660,"ip_address":""},"score":192902,"extra":""}]},{"author":{"id":2847986,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/74/f2/a373b8ab.jpg","nickname":"Henrik","note":"","ucode":"5EFBA7A150CD22","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559803,"discussion_content":"实际上当用户自定义类加载器加载java.打头的全类名时候就会报错退出","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648977653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380116,"discussion_content":"这个问题很好解释的，平时开发中classloader重复加载异常很普遍，你仔细排查就懂了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624348543,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546503,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642327104,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1337016,"avatar":"https://static001.geekbang.org/account/avatar/00/14/66/b8/ece79234.jpg","nickname":"王智","note":"","ucode":"37D2AD591C1AEC","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534798,"discussion_content":"有两个问题要请教， ①、一个JVM中允许几个类加载器？类加载器怎么创建？ ②、如果说双亲委派机制的JDK8可以保证JVM中一个类就加载一次，进而实现进程内唯一。那么是不是说JDK8之前的版本，就是有可能导致一个进程一个单例创建了多个对象（实例）呢？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638280692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1311125,"avatar":"https://static001.geekbang.org/account/avatar/00/14/01/95/fd09e8a8.jpg","nickname":"布拉姆","note":"","ucode":"479FF27D73BCAD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390052,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629624239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1617369,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/FqWrN8aNrlXEfo2YeDeCRuWMZ57VzsNC0aibkEIdiaNBdUVPjlBXrg9F4Eb8uMFYckuSgmXQ49vT6SHoicAjeEGdA/132","nickname":"Geek_558387","note":"","ucode":"2EA857EBC365B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":308954,"discussion_content":"我都压根没看评论内容就能知道回答的肯定很差, 一个评论能都能如此长篇大伦的绝对是没什么见底的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601131571,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1488601,"avatar":"https://static001.geekbang.org/account/avatar/00/16/b6/d9/4d8a4d4c.jpg","nickname":"红豆成香","note":"","ucode":"FB8FBB639B4BA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1617369,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/FqWrN8aNrlXEfo2YeDeCRuWMZ57VzsNC0aibkEIdiaNBdUVPjlBXrg9F4Eb8uMFYckuSgmXQ49vT6SHoicAjeEGdA/132","nickname":"Geek_558387","note":"","ucode":"2EA857EBC365B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":324687,"discussion_content":"什么道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605152442,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308954,"ip_address":""},"score":324687,"extra":""},{"author":{"id":2071082,"avatar":"","nickname":"Geek_06d001","note":"","ucode":"3923AEA1938E33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1617369,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/FqWrN8aNrlXEfo2YeDeCRuWMZ57VzsNC0aibkEIdiaNBdUVPjlBXrg9F4Eb8uMFYckuSgmXQ49vT6SHoicAjeEGdA/132","nickname":"Geek_558387","note":"","ucode":"2EA857EBC365B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386255,"discussion_content":"有病","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1627483841,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308954,"ip_address":""},"score":386255,"extra":""},{"author":{"id":2766883,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/38/23/4556004f.jpg","nickname":"包包","note":"","ucode":"C840BB4E46C6FC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1617369,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/FqWrN8aNrlXEfo2YeDeCRuWMZ57VzsNC0aibkEIdiaNBdUVPjlBXrg9F4Eb8uMFYckuSgmXQ49vT6SHoicAjeEGdA/132","nickname":"Geek_558387","note":"","ucode":"2EA857EBC365B5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554344,"discussion_content":"一个连评论内容都没看，就敢评论评论内容的，非蠢即坏！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646352343,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":308954,"ip_address":""},"score":554344,"extra":""}]},{"author":{"id":2085090,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/d0/e2/1d00c079.jpg","nickname":"写代码的","note":"","ucode":"F58186409A3D65","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297368,"discussion_content":"每次看到“双亲委派机制”中的“双亲”，我就想笑","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596889701,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1236320,"avatar":"https://static001.geekbang.org/account/avatar/00/12/dd/60/a6a4f79a.jpg","nickname":"笨鸟","note":"","ucode":"68029ADA76AA5A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2085090,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/d0/e2/1d00c079.jpg","nickname":"写代码的","note":"","ucode":"F58186409A3D65","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":314487,"discussion_content":"感觉应该是&#34;祖&#34;委派机制,找父亲,找父亲的父亲,父亲的父亲的父亲,不就是祖吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1603161870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297368,"ip_address":""},"score":314487,"extra":""}]},{"author":{"id":1194535,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/27/6bb0bb01.jpg","nickname":"随机的","note":"","ucode":"D8319136F27CBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294929,"discussion_content":"你好，请问一下关于类加载器有没有什么书讲到？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596031295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1624157,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c8/5d/1e3685e6.jpg","nickname":"Morse","note":"","ucode":"B09A716D79AE3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1194535,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/27/6bb0bb01.jpg","nickname":"随机的","note":"","ucode":"D8319136F27CBA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":295130,"discussion_content":"深入理解JVM 有讲到","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596097784,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":294929,"ip_address":""},"score":295130,"extra":""}]},{"author":{"id":1053509,"avatar":"https://static001.geekbang.org/account/avatar/00/10/13/45/16c60da2.jpg","nickname":"@%初%@","note":"","ucode":"2B8A6134675ED7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":216942,"discussion_content":"这个单例就是指的classloader中是唯一的，好比spring的ioc容器，singleton只能保证在一个ioc容器中是单例的，多个ioc容器中，可以存在多个。。。。个人见解。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585492904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1810576,"avatar":"https://wx.qlogo.cn/mmopen/vi_32/eLNeJNaEkwGSK7xvtamMibVLMy2MpbIqX3iaEhT7JtSnTRMRTwZ2j4HX7WAapiashbiaBDVriaXKSP0Oeic6ZAEVEXag/132","nickname":"M","note":"","ucode":"06F26E1D62E9C9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":205748,"discussion_content":"理解了，大佬，双亲委派机制鉴定了单例类在进程内唯一","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584337951,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170127,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1578535501,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"83182914125","product_id":100039001,"comment_content":"OOP 更能应付复杂流程的程序开发，自己是深有体会。<br><br>去年做了一个功能，第一版着急上线，就照着流程图翻译，最后就是一组顺序执行的方法集。if 分支特别多。<br><br>上线后有空，自己重构了一版。这次是翻译了泳道图：data_provider、rule_filter_chain、data_consumer 和 data_writer。<br>data_provider 提供 3 种类型的数据。每种类型数据有 2 种规则。匹配规则后，会有一些数据处理，如与订单绑定、返佣记录等。最后是将这些数据持久化到数据库。处理过程还使用了多态特性，因此在调用 rule_filter_chain、data_consumer、data_writer 处的代码都特别精简，都是从 Map 获取处理对象，然后直接调用方法。<br><br>现在回看，重构时自己关注最多也是思考最多的是每个阶段的类对象，它的职责是什么。如入参是什么，业务逻辑处理，处理后的出参是什么。实现完这些类后，就真的是像搭积木一样将这些类串起来就可以了。就跟文章说的一样：业务建模、翻译需求为类、类之间交互。<br>重构后的代码逻辑清晰了，也更简洁了。整个业务也更容易理解了。但是有一点，重构之后，类文件也增加了挺多。但是相比一个类几百上千行代码，我更喜欢简短的类。适当的增加一些类文件，也是能接受的。<br><br>","like_count":18,"discussions":[{"author":{"id":1181055,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/7f/d35ab9a1.jpg","nickname":"z.l","note":"","ucode":"805CC5784D3F76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":170109,"discussion_content":"补充， 相同类加载器的不同classloader实例加载同一个class文件，结果也是不同的类","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1581670178,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1554995,"avatar":"https://static001.geekbang.org/account/avatar/00/17/ba/33/2d83d174.jpg","nickname":"时光守护者-基兰","note":"","ucode":"F0B0887B1979D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181055,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/7f/d35ab9a1.jpg","nickname":"z.l","note":"","ucode":"805CC5784D3F76","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309769,"discussion_content":"什么情况会创建相同类加载器的不通classloader实例呢，什么情况下相同类加载器的不通classloader实例会加载同一个class文件呢？\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1601433970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":170109,"ip_address":""},"score":309769,"extra":""}]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591644,"discussion_content":"稳","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666748472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":173062,"discussion_content":"好的，谢谢！学习了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581825953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166024,"discussion_content":"请教一个问题，类加载器不同，具体是什么不同？（Bootstrap，Extension，Application类加载器）是指自定义Application类加载器么？是怎么做到单例不唯一的呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581345952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1008315,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/bb/323a3133.jpg","nickname":"下雨天","note":"","ucode":"816B3792ECC50A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":172914,"discussion_content":"看评论z.l补充，我是这个意思！谢谢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581816753,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":166024,"ip_address":""},"score":172914,"extra":""},{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":245787,"discussion_content":"你用两个ClassLoader实例去加载同一个class就能复现，用不同的类加载器也行，参考Tomcat。也可以用Thread.currentThread().getContextClassLoader()解决线程内唯一","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587699903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":166024,"ip_address":""},"score":245787,"extra":""},{"author":{"id":1788539,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/4a/7b/44b431e0.jpg","nickname":"若水","note":"","ucode":"2A02B970C43804","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1396951,"avatar":"https://static001.geekbang.org/account/avatar/00/15/50/d7/f82ed283.jpg","nickname":"辣么大","note":"","ucode":"AB308B6DCA0108","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":296898,"discussion_content":"有个类加载器上下文的概念，简单来说。自定义的类加载器和其‘父’加载器们构成一个类加载器上下文。‘父’打引号是因为是组合关系，不是继承关系。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1596699364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":166024,"ip_address":""},"score":296898,"extra":""}]}]},{"had_liked":false,"id":174006,"user_name":"静静聆听","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1579868251,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"48824508507","product_id":100039001,"comment_content":"我只能感叹，王争老师文章的留言是我见过最多的","like_count":11,"discussions":[{"author":{"id":2833619,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/3c/d3/fab9d588.jpg","nickname":"探雪","note":"","ucode":"2332650D9C8D54","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414432,"discussion_content":"mysql45讲的也不少/dog","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636735444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1449071,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqG3dBQs7fghrraQuXztdTJjmVYicGoic85W33U9ekSL6mpKvXOANI4N7duq5rXZXc2u7GVSFXERe6A/132","nickname":"Geek_717f1d","note":"","ucode":"741C242B0BBD6D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":298482,"discussion_content":"多不多不好评价， 留言质量是真的高","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597308377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383760,"discussion_content":"不打广告昂  还有 儒猿 专栏","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626233172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153115,"user_name":"苗","can_delete":false,"product_type":"c1","uid":1088710,"ip_address":"","ucode":"5ECCC6C855E541","user_header":"https://static001.geekbang.org/account/avatar/00/10/9c/c6/05a6798f.jpg","comment_is_top":false,"comment_ctime":1574161119,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"44523834079","product_id":100039001,"comment_content":"面向过程最主要的特点就是数据和方法相分离。我哭了，虽然一直用的是MVC框架，但是没有业务建模；基本上都是数据导向，妥妥的面向过程开发。","like_count":10,"discussions":[{"author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296320,"discussion_content":"双亲委派制---翻译的坑，最开始我也纠结了这个问题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1596509935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1476490,"avatar":"https://static001.geekbang.org/account/avatar/00/16/87/8a/07ab933c.jpg","nickname":"璀璨星空","note":"","ucode":"CE6324C4261A52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1937062,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/8e/a6/c3286b61.jpg","nickname":"Java垒墙工程师","note":"","ucode":"E76AE44A9C76AE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380117,"discussion_content":"误人子弟啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624348728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":296320,"ip_address":""},"score":380117,"extra":""}]},{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591643,"discussion_content":"稳","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666748464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2051293,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/4c/dd/c6035349.jpg","nickname":"Bumblebee","note":"","ucode":"B879C8A511D08D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546504,"discussion_content":"Mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642327217,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1887603,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/cd/73/f6889c2f.jpg","nickname":"Wind","note":"","ucode":"AD108636DE44C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297347,"discussion_content":"parents吧？人家指代的是：你委托父亲，然后父亲委托父亲的父亲..... parents原意是指代委托链中的各位“父亲们”，结果译成双亲（爸爸妈妈）了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596882161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1092806,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ac/c6/30820fa2.jpg","nickname":"李阳","note":"","ucode":"22492F371F4C84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1887603,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/cd/73/f6889c2f.jpg","nickname":"Wind","note":"","ucode":"AD108636DE44C4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301070,"discussion_content":"应该叫爷爸孙委派","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598400428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297347,"ip_address":""},"score":301070,"extra":""},{"author":{"id":1887603,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/cd/73/f6889c2f.jpg","nickname":"Wind","note":"","ucode":"AD108636DE44C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1092806,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ac/c6/30820fa2.jpg","nickname":"李阳","note":"","ucode":"22492F371F4C84","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301241,"discussion_content":"虽然绝大部分情况下是两级 但是实际上并没限制两级，所以只带成爸爸们是更好","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598450633,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":301070,"ip_address":""},"score":301241,"extra":""}]}]},{"had_liked":false,"id":151727,"user_name":"KaitoShy","can_delete":false,"product_type":"c1","uid":1038415,"ip_address":"","ucode":"E2E2E9BD3F5048","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/4f/65abc6f0.jpg","comment_is_top":false,"comment_ctime":1573782263,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"44523455223","product_id":100039001,"comment_content":"我理解C++的出现主要是为了C语言中的泛型编程问题。而Java 的出现是为了抽象对计算机的依赖，更专注于业务。对于计算机底层 C&#47;C++ 可能更适合，而 C 的对于程序员来说自由度是最大的。再看Linux的发展，1991年，林纳斯基于Unix的编写的，可能他更善于这个语言，他编写 git 的时候也是用的 C。Unix选择C也是由于自己擅长的原因","like_count":10},{"had_liked":false,"id":151664,"user_name":"未未的未来","can_delete":false,"product_type":"c1","uid":1117268,"ip_address":"","ucode":"7E271691F5BF65","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/54/b829b6cc.jpg","comment_is_top":false,"comment_ctime":1573777699,"is_pvip":false,"replies":[{"id":"58342","content":"你指出的这点很好。关于封装，有两种理解，一种是狭义的面向对象特性：封装是一种信息隐藏，需要把数据和方法放到一起，而c语言实现的代码，数据和方法是分离的。封装的另一种广义的理解，可以包含你指的封装函数。抽象实际上我们前面章节中也讲到过，比较没有特异性，有的时候不看做面向对象的特性。","user_name":"作者回复","comment_id":151664,"uid":"1190123","ip_address":"","utype":1,"ctime":1573785954,"user_name_real":"王争"}],"discussion_count":10,"race_medal":0,"score":"40228483363","product_id":100039001,"comment_content":"疑问：<br>老师举的文件那个例子，使用面向对象编程那个，不是封装了函数，用函数对操作过程进行了抽象了吗，为什么老师说没有用到封装、抽象这些特性？<br>思考题：<br>理解，C语言虽然是面相过程语言，但是面向过程语言也可以写面向对象的，另外，C语言更贴近底层一些，写操作系统的话还是有性能上的优势。","like_count":9,"discussions":[{"author":{"id":1015754,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","nickname":"helloworld","note":"","ucode":"00DF2FEC58D2E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591645,"discussion_content":"清晰易懂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666748522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219238,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9a/a6/29ac6f6a.jpg","nickname":"XXG","note":"","ucode":"55258F95874BF4","race_medal":4,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591206,"discussion_content":"看过，忘了，记不住啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666364046,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151687,"user_name":"摸爬滚打三十年","can_delete":false,"product_type":"c1","uid":1240241,"ip_address":"","ucode":"764A7F920EC304","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/b1/d790b927.jpg","comment_is_top":false,"comment_ctime":1573779374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31638550446","product_id":100039001,"comment_content":"老师前几节讲的都是基本概念，每读一遍就感觉加深了一层印象和理解。学习本节最大的感受，面向对象和面向过程之间相互对比更容易理解，他们最大的区别1.代码的组织单元:面向对象是类和对象，面向过程是函数和数据。2.是否支持四大特性以及对四大特性的支持程度，面向过程不支持继承和多态，在封装和抽象上，面向对象要更加深刻一些。面向对象对类抽象，面向过程抽象成方法，面条式的执行过程，流水线的操作方式。通过访问控制，面向对象对外暴露有限的成员属性和方法。总体来说，面向对象编程更适合人的思维习惯，能够客观反映代码和真实世界的关系。我的一点体会，不知道对不对，过一段时间再来回顾一次，看到时候的理解会不会更深。","like_count":7},{"had_liked":false,"id":152006,"user_name":"hudson","can_delete":false,"product_type":"c1","uid":1746552,"ip_address":"","ucode":"55D28AD8714D90","user_header":"https://static001.geekbang.org/account/avatar/00/1a/a6/78/d79be6fc.jpg","comment_is_top":false,"comment_ctime":1573832253,"is_pvip":false,"replies":[{"id":"58742","content":"会不会有歧义呢？","user_name":"作者回复","comment_id":152006,"uid":"1190123","ip_address":"","utype":1,"ctime":1574129769,"user_name_real":"王争"}],"discussion_count":3,"race_medal":0,"score":"23048668733","product_id":100039001,"comment_content":"formatToText换成toString是不是更符合习惯？","like_count":5,"discussions":[{"author":{"id":1055475,"avatar":"https://static001.geekbang.org/account/avatar/00/10/1a/f3/41d5ba7d.jpg","nickname":"iLeGeND","note":"","ucode":"4055A628A6E97C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352099,"discussion_content":"有道理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614601076,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2147220,"avatar":"https://static001.geekbang.org/account/avatar/00/20/c3/94/e89ebc50.jpg","nickname":"神毓逍遥","note":"","ucode":"83351CB18B190E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305560,"discussion_content":"连接池是如何使用到享元模式的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600000582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2147220,"avatar":"https://static001.geekbang.org/account/avatar/00/20/c3/94/e89ebc50.jpg","nickname":"神毓逍遥","note":"","ucode":"83351CB18B190E","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":305661,"discussion_content":"最大特点：固定数量的连接池，符合享元模式。连接池一般都要设置连接池数量，就像线程池一样，有一定数据的数据库连接池和数据库保持着连接，避免了每次和数据库交互时，新建、断开连接的开销。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600050808,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":305560,"ip_address":""},"score":305661,"extra":""}]}]},{"had_liked":false,"id":151991,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1573829284,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"23048665764","product_id":100039001,"comment_content":"阅读过Linux的文件系统的代码，就是利用函数指针使用了面向对象和策略模式的思想—有抽象的虚拟文件系统对外提供稳定的接口，下层兼容各种具体的文件格式的具体实现。只不过，如老师文中所说，实现的难度比直接利用语言特性要高不少。","like_count":5,"discussions":[{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165629,"discussion_content":"你说的应该是 tomcat容器内部采用的是双亲委派模式。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581307407,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":1134288,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","nickname":"Ken张云忠","note":"","ucode":"D0BAC9FC17DE2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":165672,"discussion_content":"tomcat作为Java应用是跑在jvm里的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581312704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":165629,"ip_address":""},"score":165672,"extra":""},{"author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1134288,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/d0/d8a5f720.jpg","nickname":"Ken张云忠","note":"","ucode":"D0BAC9FC17DE2B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":166509,"discussion_content":"tomcat内部是双亲模式来维持不同应用间的类隔离。 jvm应用不见得就是采用双亲委派。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581403902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":165672,"ip_address":""},"score":166509,"extra":""},{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1251111,"avatar":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","nickname":"Jxin","note":"","ucode":"4C03928388C413","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245788,"discussion_content":"tomcat是违背双亲委派的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587699999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":165629,"ip_address":""},"score":245788,"extra":""}]}]},{"had_liked":false,"id":151849,"user_name":"😚 46","can_delete":false,"product_type":"c1","uid":1433535,"ip_address":"","ucode":"EED0EBBBF80A43","user_header":"https://static001.geekbang.org/account/avatar/00/15/df/bf/96b50d1e.jpg","comment_is_top":false,"comment_ctime":1573799857,"is_pvip":false,"replies":[{"id":"58601","content":"有的 实战篇","user_name":"作者回复","comment_id":151849,"uid":"1190123","ip_address":"","utype":1,"ctime":1574040050,"user_name_real":"王争"}],"discussion_count":4,"race_medal":0,"score":"23048636337","product_id":100039001,"comment_content":"文中这一段，“如何给业务建模，如何将需求翻译为类，如何给类之间建立交互关系”，后续会有章节展开简介吗？","like_count":5,"discussions":[{"author":{"id":2446981,"avatar":"https://static001.geekbang.org/account/avatar/00/25/56/85/6da913fa.jpg","nickname":"LIFE l=new LIFE()","note":"","ucode":"729BACA3B7FD42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544216,"discussion_content":"线程id重复如果只拿线程单例来说，我觉得应该不会有问题，因为静态的map每次使用后就清理掉啦，，，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641441431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151730,"user_name":"Jesse","can_delete":false,"product_type":"c1","uid":1368038,"ip_address":"","ucode":"727CA882B84DA0","user_header":"https://static001.geekbang.org/account/avatar/00/14/df/e6/bd1b3c0b.jpg","comment_is_top":false,"comment_ctime":1573782390,"is_pvip":true,"replies":[{"id":"58335","content":"这个也算是个不错的理由。","user_name":"作者回复","comment_id":151730,"uid":"1190123","ip_address":"","utype":1,"ctime":1573785440,"user_name_real":"王争"}],"discussion_count":4,"race_medal":0,"score":"18753651574","product_id":100039001,"comment_content":"想问个问题，面向对象语言是不是没有办法直接操作系统资源？而C语言可以，所以C语言成为操作系统的首选语言，是这样吗","like_count":4,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495179,"discussion_content":"没啥用的，我就是引申讲一下，训练一下逻辑思维能力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594903794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":210407,"user_name":"高鹏0409","can_delete":false,"product_type":"c1","uid":1928337,"ip_address":"","ucode":"1833CA764B6A46","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/91/8268a753.jpg","comment_is_top":false,"comment_ctime":1587738948,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14472640836","product_id":100039001,"comment_content":"Python 更简洁清晰，写更少的代码，让计算机做更多事。看起来更像未来的编程语言啊！","like_count":3,"discussions":[{"author":{"id":2281909,"avatar":"https://static001.geekbang.org/account/avatar/00/22/d1/b5/8a834e2f.jpg","nickname":"菜鸡","note":"","ucode":"58088B8B62C2DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549535,"discussion_content":"确实，用computeIfAbsent可以避免这种情况","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1644059416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1182146,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/c2/8c5442bf.jpg","nickname":"老庄道人","note":"","ucode":"C102EA323A69B4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341649,"discussion_content":"Map会保证key的唯一，这里的关键是key要唯一，也就是ThreadID要唯一，这样问题就转化为唯一的ThreadID对应唯一的对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610494327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1344077,"avatar":"https://static001.geekbang.org/account/avatar/00/14/82/4d/ed67c248.jpg","nickname":"鹅的天牙(Dain) 🐜","note":"","ucode":"EEBE207853E07A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221456,"discussion_content":"感觉你英语单词好像理解错了，absent是不存的意思。只有不存在才会创建新对象","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586010044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1118488,"avatar":"https://static001.geekbang.org/account/avatar/00/11/11/18/8cee35f9.jpg","nickname":"HuaMax","note":"","ucode":"2E78DE1AF098AF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1344077,"avatar":"https://static001.geekbang.org/account/avatar/00/14/82/4d/ed67c248.jpg","nickname":"鹅的天牙(Dain) 🐜","note":"","ucode":"EEBE207853E07A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222427,"discussion_content":"这里是putIfAbsent，而不是createIfAbsent，对象已经创建了，只是是否放入map中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586143664,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":221456,"ip_address":""},"score":222427,"extra":""}]}]},{"had_liked":false,"id":155738,"user_name":"CHS","can_delete":false,"product_type":"c1","uid":1240227,"ip_address":"","ucode":"3D8B2DABC0A1D6","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/a3/28763399.jpg","comment_is_top":false,"comment_ctime":1574746557,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14459648445","product_id":100039001,"comment_content":"不矛盾，面向对象是一种思想，语言是一种工具，任何语言都可以使用面向对象的思想来写代码。系统使用C语言，是因为C语言更加底层，执行效率高。","like_count":3},{"had_liked":false,"id":152021,"user_name":"筱乐乐哦","can_delete":false,"product_type":"c1","uid":1307611,"ip_address":"","ucode":"AE92539F0419C3","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/db/5b7a8fd8.jpg","comment_is_top":false,"comment_ctime":1573836981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14458738869","product_id":100039001,"comment_content":"我的理解不矛盾，理由如下<br>1、操作系统更多的是和硬件打交道，需要考虑到语言本身翻译成机器语言的成本和执行效率，尤其总要。<br>2、如linux内核、总线、文件系统网络等的设计，也是具有面向对象过程的思想，很好的支持了常见的文件系统的挂在、内核的升级和对硬件的热插拔、网络等的处理，常见的服务器多数都是linux，为啥不用window，我的理解和设计实现有很大的关系，尤其是网络、安全、权限、标准等等<br>3、linux操作系统，本身就是一个大的抽象，属于一个硬件和高级软件连接的桥梁<br><br>也希望争哥发表下自己的看法，指点指点","like_count":3},{"had_liked":false,"id":151609,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1573749130,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14458651018","product_id":100039001,"comment_content":"关于课堂讨论我觉得不矛盾，老师说的应对大规模复杂程序的开发可能是偏向现实世界抽象出来的业务很复杂，但是操作系统的复杂是面对计算机底层的，不是针对我们理解的业务的复杂，同时操作系统也是作为一个底层的存在，针对性能有更高的要求。","like_count":3},{"had_liked":false,"id":153141,"user_name":"Better me","can_delete":false,"product_type":"c1","uid":1261959,"ip_address":"","ucode":"CADF08D357489A","user_header":"https://static001.geekbang.org/account/avatar/00/13/41/87/46d7e1c2.jpg","comment_is_top":false,"comment_ctime":1574167123,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10164101715","product_id":100039001,"comment_content":"讨论题发表一下自己的意见<br>用面向对象语言结合面向过程思想写程序，这就相当于手握一把屠龙刀，却只是把它当作一把普通的刀剑来用。相反我们也可以用面向过程语言结合面向对象思想来写程序，那也能达到很好的易复用、易扩展、易维护的效果，相对来说代价会比较高，毕竟语言本身没有提供这种语法机制，需要在我们编程中体现处理实属不易。<br>","like_count":2},{"had_liked":false,"id":152013,"user_name":"猫切切切切切","can_delete":false,"product_type":"c1","uid":1075033,"ip_address":"","ucode":"F350BA1B7FFDC4","user_header":"https://static001.geekbang.org/account/avatar/00/10/67/59/017b5726.jpg","comment_is_top":false,"comment_ctime":1573833868,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10163768460","product_id":100039001,"comment_content":"思考题<br><br>使用非面向对象的语言一样可以写出面向对象的程序。<br><br>操作系统的实现使用什么语言，关注的或许更多应该是其效率，而操作系统的设计才更多需要关心面向过程还是面向对象。<br><br>所以操作系统使用C，是因为它更接近于底层，效率更高，但用C编写的操作系统同样应该使用面向对象设计，因为这无疑是个规模庞大逻辑复杂的程序。","like_count":2},{"had_liked":false,"id":151797,"user_name":"熊斌","can_delete":false,"product_type":"c1","uid":1026280,"ip_address":"","ucode":"24D0C32F397113","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/e8/bc84c47d.jpg","comment_is_top":false,"comment_ctime":1573793391,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163727983","product_id":100039001,"comment_content":"OOP 是“离机器更远、离人更近、更智能”<br>面向过程语言(例如C)离机器“更近”，Unix&#47;Linux都是离硬件设备最近的操作系统级别的系统，所以C语言是更合适的。","like_count":2},{"had_liked":false,"id":151656,"user_name":"连边","can_delete":false,"product_type":"c1","uid":1391748,"ip_address":"","ucode":"54B5DA38449728","user_header":"https://static001.geekbang.org/account/avatar/00/15/3c/84/608f679b.jpg","comment_is_top":false,"comment_ctime":1573776938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163711530","product_id":100039001,"comment_content":"思考，其实用什么语言来做什么软件，和几个方面有关系。1，软件诞生的时代，在它产生的时候，面向对象编程思想不是主要的趋势；2，发布软件的方式，如以开源的方式发布，它的成熟也要和其他开发者的水准相关，在当时的时代，太过超前的思想，没有很多人的参与，也诞生不了出名的软件；3，适用性，操作系统，更多的还是和计算机打交道，虽然思想上面向对象更适合人的思维，但是操作系统这一层，符合计算机思想的编程语言更适用，面向对象编程语言更适合开发应用软件，符合一般程序员的思维，更多的是跟操作系统打交道，等于中间有一种层级的关系。操作系统更像一个抽象的中间层。","like_count":2},{"had_liked":false,"id":151615,"user_name":"家","can_delete":false,"product_type":"c1","uid":1239284,"ip_address":"","ucode":"CA3597C948E9CF","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/f4/d1fcfa4d.jpg","comment_is_top":false,"comment_ctime":1573750621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163685213","product_id":100039001,"comment_content":"作为新手的我觉得不矛盾。用面向过程的语言也是可以实现面向对象的思想的。但是一些面向对象的语言的特性貌似需要操作系统来完成，应该不能直接用特别高级的语言来开发操作系统吧。希望老师指正，希望更多志同道合的战友一起交流进步。","like_count":2},{"had_liked":false,"id":151613,"user_name":"编程界的小学生","can_delete":false,"product_type":"c1","uid":1593289,"ip_address":"","ucode":"4A5BE9A5E877FA","user_header":"https://static001.geekbang.org/account/avatar/00/18/4f/c9/9f51fd27.jpg","comment_is_top":false,"comment_ctime":1573750106,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10163684698","product_id":100039001,"comment_content":"我个人认为操作系统之所以用C语言写的可能是性能更高一点吧，还有就是c更底层一些，面向对象语言更高级一些，更先进一些，适合大型网站或者app开发等。所以每种语言都有不同的使用场景。JAVA是世界上最好的语言，不接受任何反驳。别跟老夫扯什么php！","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503200,"discussion_content":"没必要序列方法的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597453780,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286440,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1617321027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5912288323","product_id":100039001,"comment_content":"课堂讨论，个人理解：Unix，Linux这些复杂的系统虽然用了面向过程的C语言编写，但运用的却是面向对象的编程思想，比如，系统中的文件，目录，设备，进程，线程等都可以看成是对象，它们之间的交互也可以看作是对象之间的一种协作，因此，面向对象的编程和所用的语言无关，只和处理思想有关，这就像一个使剑的高手，哪怕手中无剑，照样可以把自己的双手变成一把锋利的宝剑。","like_count":1},{"had_liked":false,"id":269729,"user_name":"Am0xil","can_delete":false,"product_type":"c1","uid":2153943,"ip_address":"","ucode":"CE2A04F9FF9FE6","user_header":"https://static001.geekbang.org/account/avatar/00/20/dd/d7/885e4ce3.jpg","comment_is_top":false,"comment_ctime":1608773627,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5903740923","product_id":100039001,"comment_content":"我觉得应该是面向对象语言更符合人类的思考逻辑，而面向过程语言则更符合机器的执行逻辑","like_count":1},{"had_liked":false,"id":214180,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1588671413,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5883638709","product_id":100039001,"comment_content":"<br>1. 什么是面向过程编程？什么是面向过程编程语言？<br>面向过程，是一种面向计算机的思考方式，通过指令告诉计算机如何执行<br>面向对象，是一种面向人的思考方式，思考如何将现实世界的需求，通过指令让计算机执行<br>2. 面向对象编程相比面向过程编程有哪些优势？<br>在思想上：面向对象最重要的优势，他是以解决描述真实世界的需求为出发点的。而面向过程是以命令计算机如何执行为出发点的。所以，面向对象语言相对而言，比面向过程语言解决真实世界的问题效率更高。（当然，对于计算机则不同）<br>在技术上：面向对象晚于面向过程诞生，吸收并加强了前者的优秀特性，如抽象，面向过程的抽象是方法，函数的抽象。而面向对象则通过“类”这一特性提供更高纬度的抽象。可以帮助开发人员，先将复杂问题拆解为小的模块问题，在将主要的问题明确后，在专注于业务细节。<br>面向对象还基于类这一概念，提供了封装特性，将方法和数据绑定，实现了将数据访问权限控制，提高了数据安全性和可维护性。<br>面向对象的继承概念还是要依托于类的概念，可以将多处的相同代码归集到一个类中，在其他要使用的地方通过继承就能获得相同能力。<br>多态，一个函数，可以有多种实现方法。这就像我们生活中，做晚餐这件事，可以做多种做法，煎炒烹炸都行。只有遵照基本的条件就行<br>","like_count":1},{"had_liked":false,"id":204116,"user_name":"🐒🐱🐭🐮🐯🐰🐶","can_delete":false,"product_type":"c1","uid":1189080,"ip_address":"","ucode":"52426AE36A9A39","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d8/aa41d743.jpg","comment_is_top":false,"comment_ctime":1586334928,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5881302224","product_id":100039001,"comment_content":"一个是基础，一个上层建筑。两个并不冲突","like_count":1},{"had_liked":false,"id":190309,"user_name":"Nick","can_delete":false,"product_type":"c1","uid":1921287,"ip_address":"","ucode":"64BBE005890845","user_header":"https://static001.geekbang.org/account/avatar/00/1d/51/07/b5a945b6.jpg","comment_is_top":false,"comment_ctime":1584628291,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5879595587","product_id":100039001,"comment_content":"通过这一讲的内容，让我比较清晰深刻和透彻的了解到计算机编程语言的演化历史，从指令到汇编到面向过程，再到现如今最流行的面向对象的高级编程语言。看到大家对于课堂问题的讨论更是像如获珍宝，感谢“极客时间”，感谢王争前辈，感谢留言的大咖童鞋们，这是“极客”们的天堂。","like_count":1},{"had_liked":false,"id":169526,"user_name":"都市鸽","can_delete":false,"product_type":"c1","uid":1061452,"ip_address":"","ucode":"26D36A95EB542D","user_header":"https://static001.geekbang.org/account/avatar/00/10/32/4c/1a730e4b.jpg","comment_is_top":false,"comment_ctime":1578371249,"is_pvip":false,"replies":[{"id":"65733","content":"不算，是一种新的编程范式","user_name":"作者回复","comment_id":169526,"uid":"1190123","ip_address":"","utype":1,"ctime":1578379070,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5873338545","product_id":100039001,"comment_content":"go 语言的函数式编程算面向过程吗","like_count":1,"discussions":[{"author":{"id":1788647,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/4a/e7/6c16af5d.jpg","nickname":"汉江","note":"","ucode":"01622D984B8F9B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":296894,"discussion_content":"hashmap 也是entry[]  底层是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596697268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1541669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/86/25/25ded6c3.jpg","nickname":"zhengyu.nie","note":"","ucode":"FFE0377D323E46","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":245793,"discussion_content":"Weak引用map","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587700113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1094597,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b3/c5/7fc124e2.jpg","nickname":"Liam","note":"","ucode":"1D15D3B64F2606","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":178607,"discussion_content":"它不是HashMap，实现类似，key通过hash计算索引，通过连续选址法解决冲突（HashMap是通过链表或树节点扩展的方式解决冲突）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582180507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159497,"user_name":"爱水人家","can_delete":false,"product_type":"c1","uid":1730305,"ip_address":"","ucode":"0C94C6ACBC9CEB","user_header":"https://static001.geekbang.org/account/avatar/00/1a/67/01/44626cb9.jpg","comment_is_top":false,"comment_ctime":1575638657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870605953","product_id":100039001,"comment_content":"没有矛盾吧。因为操作系统是连接硬件和软件系统的一种中间件，由于它需要与硬件打交道，因此必须要面向过程的编程语言开发，这样才能指挥硬件工作。真是感觉现在的高级编程语言越来越智能了，尤其是涉及数据分析的编程语言，比如python。感觉这是一个大趋势。看完这节更加下定了我的决心，未来半年我一定要学习python。","like_count":1},{"had_liked":false,"id":152777,"user_name":"斐波那契","can_delete":false,"product_type":"c1","uid":1464006,"ip_address":"","ucode":"85E2EBC01392B1","user_header":"https://static001.geekbang.org/account/avatar/00/16/56/c6/0b449bc6.jpg","comment_is_top":false,"comment_ctime":1574078827,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5869046123","product_id":100039001,"comment_content":"我觉得主要原因还是因为大部分面向对象编程语言不能操作底层 理论上 只要语言支持操作底层 就可以写操作系统 c是最早出现的 比较接近人类思维的 能够操作底层的编程语言 并且编写出经典的操作系统而一炮走红 跟是不是面向过程风格面向对象风格没太大关系 操作系统复杂主要是硬件管理的复杂以及“如何高效操作”的复杂 简单说 随着发展 计算机被赋予了越来越多的能力及功能导致管理硬件的操作系统越来越复杂 ","like_count":1},{"had_liked":false,"id":152381,"user_name":"dagecao","can_delete":false,"product_type":"c1","uid":1542026,"ip_address":"","ucode":"5CC0F663713B39","user_header":"https://wx.qlogo.cn/mmopen/vi_32/cFtcpjRVvclDDXGVbzHuu0vWgpEzJYMR7ibe1EoepV2XLDsYVtX4merBZibSOtk90s0fPpZ5CMHASJhOegomXWhA/132","comment_is_top":false,"comment_ctime":1573986783,"is_pvip":false,"replies":[{"id":"58602","content":"每周更新三篇","user_name":"作者回复","comment_id":152381,"uid":"1190123","ip_address":"","utype":1,"ctime":1574040063,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5868954079","product_id":100039001,"comment_content":"暂时就只有这么几节课吗？啥时候发新的课程呢？","like_count":1,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474798,"discussion_content":"每周更新三篇","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574040063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152318,"user_name":"番茄炒西红柿","can_delete":false,"product_type":"c1","uid":1690242,"ip_address":"","ucode":"13F47BABAB2110","user_header":"https://static001.geekbang.org/account/avatar/00/19/ca/82/85f6a1a2.jpg","comment_is_top":false,"comment_ctime":1573970684,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868937980","product_id":100039001,"comment_content":"老师没讲函数编程，但我看了一下相关的优点，感觉函数式编程的优点是除了继承oop的优点外还有并发和无状态这两个特点，而这种特点和现在云服务切合度很高，但现在问题是对人的要求高","like_count":1},{"had_liked":false,"id":152028,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1573841403,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868808699","product_id":100039001,"comment_content":"个人感觉原因有二：<br>1、先来后到的原因，开发unix时没有面向对象语言或者面向对象还没开始流行<br>2、C语言的性能比Java等其他面向对象语言要好","like_count":1},{"had_liked":false,"id":151959,"user_name":"小晏子","can_delete":false,"product_type":"c1","uid":1132337,"ip_address":"","ucode":"3AAA6FB5ACB6AE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/31/f35367c8.jpg","comment_is_top":false,"comment_ctime":1573822724,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5868790020","product_id":100039001,"comment_content":"历史原因吧，操作系统的开发也可以用面向对象的方式，比如把cpu memory，gpu等等都抽象成类，提供操作函数，也可以用面向对象来实现","like_count":1},{"had_liked":false,"id":151908,"user_name":"xavier","can_delete":false,"product_type":"c1","uid":1243128,"ip_address":"","ucode":"2F7918EA37ED9F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f7/f8/3c0a6854.jpg","comment_is_top":false,"comment_ctime":1573811319,"is_pvip":false,"replies":[{"id":"58746","content":"理解的没错。","user_name":"作者回复","comment_id":151908,"uid":"1190123","ip_address":"","utype":1,"ctime":1574130139,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"5868778615","product_id":100039001,"comment_content":"是否可以这样理解，在例子代码中，将类一层层往下剖析，单独看类中的某个函数方法，可能是面向过程的。但当封装成一个类并使用时，就是面向对象的。","like_count":1,"discussions":[{"author":{"id":1701867,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f7/eb/e7127bb8.jpg","nickname":"，","note":"","ucode":"A5543C8DFEB198","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174276,"discussion_content":"就像老师文章里说的那样,多例创建的对象都是同一个类的对象,工厂模式创建的对象是不同类的对象,就像文章里的示例代码那样,BackendServer类有三个对象,他们分别是三台服务器的url,这三个对象就可以用来做负载均衡,随机返回一个对象提供服务.\n\n再比如,第二个代码案例,通过className拿到的logger对象分别是不同的对象,这应该是平时工作中最常见的场景\n再抽象一点说,就是同一个类,不同的实例\n\n再再比如,一个摄像头监控系统,里面会有很多摄像头对象,他们都是一个摄像头类,但是他们是不同的对象,比如安装在门上的,安装在走廊上的,在电梯上的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1581903709,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1024486,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","nickname":"旭东(Frank)","note":"","ucode":"176FA629800062","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":188984,"discussion_content":"线程池，数据库连接池","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1582844823,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151731,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1573782658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868749954","product_id":100039001,"comment_content":"不矛盾。<br>第一：C语言更偏底层，对于操作系统这种偏底层的东西更适用，性能更好。<br>第二：C语言出现较早，当时面向对象编程语言还不太成熟。","like_count":1},{"had_liked":false,"id":151696,"user_name":"ismind","can_delete":false,"product_type":"c1","uid":1138710,"ip_address":"","ucode":"7AADD673ED3BC4","user_header":"https://static001.geekbang.org/account/avatar/00/11/60/16/d1dd4972.jpg","comment_is_top":false,"comment_ctime":1573779995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868747291","product_id":100039001,"comment_content":"1，c语言可以直接编译成cpu可以理解的代码格式，而这些高级语言，比如Java，语法复杂，抽象程度高，直接在硬件上运行这种复杂的程序不太现实。<br>2，面向过程的语言也可以实现面向对象的特点，只不过要付出一些代价。<br>3，面向过程更符合机器思维，linux等系统是与机器打交道的，所以用面向对象就不合适了，面向对象更贴近人的思维。<br>4，还和语言的发展历史有关，语言是逐步发展的，查了下资料，20世纪70年代出现了操作系统，当时Ritchie用c语言将unix的核心重写了一下，也就是说用c语言取代了汇编语言。很明显，那个时候比较适合的语言就是c语言。（个人表述问题，应该了解我想表达的意思）<br>个人拙见。","like_count":1},{"had_liked":false,"id":151663,"user_name":"安静的boy","can_delete":false,"product_type":"c1","uid":1196475,"ip_address":"","ucode":"F5F44B75228A85","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/bb/21ce60d2.jpg","comment_is_top":false,"comment_ctime":1573777512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868744808","product_id":100039001,"comment_content":"思考题:面向过程编程语言也可以利用面向对象的风格来编写代码，就是实现起来没有面向对象编程语言那么容易。我想如果先出来的需要是面向对象的，搞不好liux就是面向对象语言写的了","like_count":1},{"had_liked":false,"id":151658,"user_name":"cc","can_delete":false,"product_type":"c1","uid":1592092,"ip_address":"","ucode":"FF41E5D87BAD76","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/1c/5eb03a91.jpg","comment_is_top":false,"comment_ctime":1573777131,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868744427","product_id":100039001,"comment_content":"我的理解是：越底层的语言越接近机器码，效率越高，对硬件控制力更好。所以unix linux用c。<br>还有一点是不是和出世时间有关呢。linux是91年发行的。C++的第一个国际标准98年才有。。<br>这么一说时间线是主要原因？🤔️","like_count":1},{"had_liked":false,"id":151646,"user_name":"时光勿念","can_delete":false,"product_type":"c1","uid":1025003,"ip_address":"","ucode":"72C8EC5A62C700","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a3/eb/d26459ae.jpg","comment_is_top":false,"comment_ctime":1573775257,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"5868742553","product_id":100039001,"comment_content":"其实我一直觉得，如果有下一代编程语言，可能就是写设计模式了，程序员理解业务，然后描述成一种或多种设计模式，编译器生成代码，当然这里所说的是模式不止是现有的二十三种设计模式，而是包含一些更基础的操作的类似的东西","like_count":1,"discussions":[{"author":{"id":2731028,"avatar":"https://static001.geekbang.org/account/avatar/00/29/ac/14/a8ff8fec.jpg","nickname":"慕言","note":"","ucode":"4918FA682F3895","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568486,"discussion_content":"老师的伪代码里写的加锁其实是分布式锁，所谓分布式锁，就是可以实现在整个分布式集群内加锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651150194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151625,"user_name":"Jover","can_delete":false,"product_type":"c1","uid":1148292,"ip_address":"","ucode":"0D4D45ED55C37B","user_header":"https://static001.geekbang.org/account/avatar/00/11/85/84/0dbdf8c1.jpg","comment_is_top":false,"comment_ctime":1573763938,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868731234","product_id":100039001,"comment_content":"unix linux用c，跟python用c而不用cpp给我带来的疑惑几乎是一样一样的，js却是使用的cpp。难道这是历史遗留问题？","like_count":1},{"had_liked":false,"id":151602,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1573748628,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5868715924","product_id":100039001,"comment_content":"面相对象编程语言利用封装继承多态抽象等形式能让程序员更容易写出易扩展易维护的代码，针对复杂的程序面相对象编程能更容易写出来，针对简单的程序面相过程语言可能写的更快更好，回看历史结构化，面相对象都是为了解决某一个问题，提高生产力，前面都是我瞎扯的，我想说php是世界上最好的语言","like_count":1},{"had_liked":false,"id":358702,"user_name":"Nio","can_delete":false,"product_type":"c1","uid":1529642,"ip_address":"广东","ucode":"A1B8D3C01FB937","user_header":"https://static001.geekbang.org/account/avatar/00/17/57/2a/c6c95f37.jpg","comment_is_top":false,"comment_ctime":1664599086,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1664599086","product_id":100039001,"comment_content":"想知道为什么放弃函数式编程不讲","like_count":0},{"had_liked":false,"id":356537,"user_name":"徐李","can_delete":false,"product_type":"c1","uid":1213325,"ip_address":"浙江","ucode":"41550F6CA1E112","user_header":"https://static001.geekbang.org/account/avatar/00/12/83/8d/03cac826.jpg","comment_is_top":false,"comment_ctime":1662386635,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1662386635","product_id":100039001,"comment_content":"在和操作系统交互的层面，面向过程语言对于机器更友好，更易执行。说的在处理复杂业务时，面向过程语言更好，更多的是人类应用场景的复杂。","like_count":0},{"had_liked":false,"id":355995,"user_name":"Stay_Gold","can_delete":false,"product_type":"c1","uid":1119904,"ip_address":"北京","ucode":"ACB8DCD2EF8F95","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJRCtuJkpyy2NTTABPFibg2k9tZscOOKx9wu80a85d5HspCorO9Nibj7Z7q9v1icPTVm5ia52r0RCzEaA/132","comment_is_top":false,"comment_ctime":1661910983,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661910983","product_id":100039001,"comment_content":"先总结一下本章所学：<br>1.面向过程编程：以操作为基本单元来组织代码，数据和操作互相分离，自顶向下的流程化风格，通过顺序操作数据来实现功能。<br>2.面向过程语言：以操作为基本单元来组织代码的语言，相对于面向过程语言来说没有类或者对象的概念，不能很好的支持面向对象四大特性（封装，抽象，继承，多态）。<br><br>问题<br>在文章中我讲到，面向对象编程比面向过程编程，更加容易应对大规模复杂程序的开发。但像 Unix、Linux 这些复杂的系统，也都是基于 C 语言这种面向过程的编程语言开发的，你怎么看待这个现象？这跟我之前的讲解相矛盾吗？<br>用面向过程的语言同样式可以实现面向对象风格的代码的。我相信在那些复杂系统中的很多代码风格都是面向对象的风格，同时面向对象风格编程再给程序员带来很多便利的情况下，也可能会造成很多不可控因素，这对于系统内核来说也是很大的隐患。","like_count":0},{"had_liked":false,"id":350970,"user_name":"SICUN","can_delete":false,"product_type":"c1","uid":1254261,"ip_address":"","ucode":"22A384904EB9E9","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/75/2b599841.jpg","comment_is_top":false,"comment_ctime":1657431619,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657431619","product_id":100039001,"comment_content":"选择什么语言需要结合具体的场景，unix，linux这种底层的操作系统应该是需要本身资源占用少，性能好的，在当时面向对象编程语言可能也不是很成熟吧。","like_count":0},{"had_liked":false,"id":348786,"user_name":"学习学个屁","can_delete":false,"product_type":"c1","uid":1049017,"ip_address":"","ucode":"DF2D61E6FB2FCE","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/b9/73435279.jpg","comment_is_top":false,"comment_ctime":1655391586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655391586","product_id":100039001,"comment_content":"那时候还没有其他面向对象编程语言，另外c 能直接操作硬件，您不是也说了面向过程语言也能面向对象编程","like_count":0},{"had_liked":false,"id":345744,"user_name":"姚钫","can_delete":false,"product_type":"c1","uid":1498146,"ip_address":"","ucode":"ECB8B0627A4F9B","user_header":"https://static001.geekbang.org/account/avatar/00/16/dc/22/41a390ae.jpg","comment_is_top":false,"comment_ctime":1652542196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652542196","product_id":100039001,"comment_content":"220514 day04 面向对象<br>1. 感觉自己一直没有面向对象，数据建模好像一直都没有过，我们开发流程，给需求做一个功能，我们画好时序图，设计表结构，提供给业务接口，根据接口写逻辑，<br>感觉一直都是，mvc的模式也是面向过程吧，entity是实体，service是功能，如何才能做到正规的面向对象，分析设计哪些类，该有什么属性和方法，如何交互<br>2. 写操作系统的用的面向过程的编程语言开发的，不一定写的是面向过程的风格，毕竟那一群人能力都比较强<br>","like_count":0},{"had_liked":false,"id":343871,"user_name":"李青藤","can_delete":false,"product_type":"c1","uid":1750245,"ip_address":"","ucode":"3990F6928FAE23","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b4/e5/e6d5d29a.jpg","comment_is_top":false,"comment_ctime":1651107187,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651107187","product_id":100039001,"comment_content":"上帝的归上帝，凯撒的归凯撒！","like_count":0},{"had_liked":false,"id":343608,"user_name":"你听得到","can_delete":false,"product_type":"c1","uid":1516039,"ip_address":"","ucode":"2BD44F5D45F880","user_header":"https://static001.geekbang.org/account/avatar/00/17/22/07/2a82376a.jpg","comment_is_top":false,"comment_ctime":1650951389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650951389","product_id":100039001,"comment_content":"它们的劣势是什么😂","like_count":0},{"had_liked":false,"id":339082,"user_name":"Soil","can_delete":false,"product_type":"c1","uid":2870321,"ip_address":"","ucode":"3B353BC858B5AE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLE9hv64CEabxt76tQQcWDicx0sucpAApFvYoM8eXBViaJgz06EjcfJjiamSFWY9aAuxjILaPoiaa0lNw/132","comment_is_top":false,"comment_ctime":1647911251,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1647911251","product_id":100039001,"comment_content":"“如果一种新的突破性的编程语言出现，那它肯定是更加“智能”的。大胆想象一下，使用这种编程语言，我们可以无需对计算机知识有任何了解，无需像现在这样一行一行地敲很多代码，只需要把需求文档写清楚，就能自动生成我们想要的软件了。” 这一天会到来，并且必然也是硬件有了前所未有的突破。","like_count":0},{"had_liked":false,"id":338906,"user_name":"Geek_783504","can_delete":false,"product_type":"c1","uid":2743789,"ip_address":"","ucode":"549D3F0549743C","user_header":"https://static001.geekbang.org/account/avatar/00/29/dd/ed/f6c5432b.jpg","comment_is_top":false,"comment_ctime":1647784352,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1647784352","product_id":100039001,"comment_content":"我觉得是关注点不同，设计网站，后台，是关注功能如何实现，而不是告诉计算机我需要执行什么指令，用面向对象作为主力语言更加符合实际开发。而操作系统，更加关注各个功能如何实现，如何告诉计算机怎么执行这条指令，相比于网站后台等，没有用很多复杂的操作去处理一个功能。","like_count":0},{"had_liked":false,"id":335146,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1645360260,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1645360260","product_id":100039001,"comment_content":"本人最开始做的是面向对象编程(java)，后来做的是面向函数式编程(nodejs)。<br>1.面向对象站在开发大系统的基础，的确很有优势。万物皆对象的设计，让工程边界更加清晰，而且容易维护、易拓展。<br>2.面向对象有四大特性OOP：继承、多态、抽象、封装。针对的是类。<br>3.golang是没有类class的，可以说是面向过程编程。因为也没有js那样，函数式编程灵活。<br>4.在编写大系统来说，一定要求的是规范和容易维护，而不是快速迭代。如果采用函数式编程，到你要维护迭代的时候，就开始痛苦了。<br>5.我以前做的函数式编程中，最大的痛点，就是每次迭代都要修复数据。（这种人为操控的过程，风险是非常大的）。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509572,"discussion_content":"������","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606701272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334130,"user_name":"巫山老妖","can_delete":false,"product_type":"c1","uid":1056037,"ip_address":"","ucode":"B35E2CF1B3B04E","user_header":"https://static001.geekbang.org/account/avatar/00/10/1d/25/c4cc1e9f.jpg","comment_is_top":false,"comment_ctime":1644757676,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1644757676","product_id":100039001,"comment_content":"Unix和Linux诞生的时候面向对象语言还没开始流行吧，C语言是更接近底层的语言，大多数跟硬件打交道采用C语言来实现，我理解主要有时代背景和执行效率的考虑。","like_count":0},{"had_liked":false,"id":324270,"user_name":"王智","can_delete":false,"product_type":"c1","uid":1337016,"ip_address":"","ucode":"37D2AD591C1AEC","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/b8/ece79234.jpg","comment_is_top":false,"comment_ctime":1638352333,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1638352333","product_id":100039001,"comment_content":"* 因为Linux是完全面向机器的，所以面向过程语言的“线型”特征，能更好被计算机所理解、执行。<br>* 不矛盾。老师讲的是软件系统开发，面向业务。此处说的是面向机器，更接近硬件的执行。","like_count":0},{"had_liked":false,"id":322997,"user_name":"hj_zack","can_delete":false,"product_type":"c1","uid":1181113,"ip_address":"","ucode":"53A11BAE0CEA2B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/NAcDfnQjZMSXE1ib2sAviaQFQHMsf7IJjTH73CaOic37R9QibdXNCNvzUGdqkIJYI05u3LnKmQRomqRRmMAhg9B1HQ/132","comment_is_top":false,"comment_ctime":1637681930,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637681930","product_id":100039001,"comment_content":"要记住最重要的1点，面向对象编程和面向对象编程语言，是有区别的。面向对象编程语言和面向过程编程语言，都可以进行面向对象编程。只是面向对象编程语言进行面向对象编程，会更加简单","like_count":0},{"had_liked":false,"id":322205,"user_name":"罗杰","can_delete":false,"product_type":"c1","uid":1320487,"ip_address":"","ucode":"96BAFAA147341F","user_header":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","comment_is_top":false,"comment_ctime":1637236478,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1637236478","product_id":100039001,"comment_content":"不冲突，Unix 和 Linux 是使用 C 语言进行开发的，另外 C 是高级语言性能最靠近汇编的。计算机的发展初期，配置都很低，开发人员必须节俭，必须了解底层。但是现在硬件的飞速发展，让编程语言的创造者能舍弃一些性能，换取更高的抽象，方便更多的开发者参与其中。很难想象，如果不是 C 语言，计算机能发展到今天。所以后面的语言再高级，都是 C 打底子打好了。","like_count":0},{"had_liked":false,"id":320758,"user_name":"胡皓","can_delete":false,"product_type":"c1","uid":1965051,"ip_address":"","ucode":"ECF5C14420899E","user_header":"https://static001.geekbang.org/account/avatar/00/1d/fb/fb/6db8d51e.jpg","comment_is_top":false,"comment_ctime":1636506046,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1636506046","product_id":100039001,"comment_content":"思考题:<br>面向对象的语言像Java，其实是对面向过程语言(如c语音)进行了更进一步的封装，所以开发效率高，但是在执行效率上会有些损耗。而底层操作系统对效率要求是很高的，所以会用执行效率高的c语言。当然，这会让开发变难，但是世面上操作系统并不多，完全可以聚集一些能力很强的工程师来开发。而基于操作系统的应用则会很多，所以用面向对象的语言是首选。","like_count":0},{"had_liked":false,"id":313126,"user_name":"逆风一战九","can_delete":false,"product_type":"c1","uid":2143900,"ip_address":"","ucode":"83127627F6F37C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI45zO9GOMquhD0ia1wTBSwtJ1juPcpFTSrOGicGW3jf6JclaudauHicN8OpADArQKL8zPtDicEx4aicgA/132","comment_is_top":false,"comment_ctime":1632288249,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632288249","product_id":100039001,"comment_content":"面向对象是一种思想，面向对象的语言提供一些语法来更好的承载数据和方法，不支持面向对象的语言，也可以写出面向对象思想的代码，c就是用struct承载数据，操作系统实现考虑用c，一个是那会儿没有java,更主要的是要与硬件打交道，c更适合","like_count":0},{"had_liked":false,"id":310479,"user_name":"像风一样","can_delete":false,"product_type":"c1","uid":1455876,"ip_address":"","ucode":"13E2CCCE3B179A","user_header":"https://static001.geekbang.org/account/avatar/00/16/37/04/d2ab40c5.jpg","comment_is_top":false,"comment_ctime":1630670281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630670281","product_id":100039001,"comment_content":"为什么现在的操作系统基本上用C语言来实现？https:&#47;&#47;www.zhihu.com&#47;question&#47;28468921","like_count":0},{"had_liked":false,"id":306729,"user_name":"Geek_842f07","can_delete":false,"product_type":"c1","uid":2698987,"ip_address":"","ucode":"ED772AF755FE7E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/WP4Ge8ABcINFkccKaNYKibicFnI0JAoojBBAUGrichNeRAgzm5RGbHG7GqYrFX3ELEzenuEbicQHJy2HZ72RxSOuMA/132","comment_is_top":false,"comment_ctime":1628683840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628683840","product_id":100039001,"comment_content":"Unix和Linux在一开始的时候就使用C语言进行开发，由于历史原因，现在这两个系统的内核代码也是C语言写的，不过最近R语言也有可能加入Linux系统了，可以看到技术一直在发展。另外一方面是系统内核代码要性能有极致的追求，而对比C语言，其他很多面向对象的语言还无法达到相当的性能，这也是一个关键原因吧","like_count":0},{"had_liked":false,"id":300283,"user_name":"overheat","can_delete":false,"product_type":"c1","uid":2675695,"ip_address":"","ucode":"DD82D9194C26D0","user_header":"https://static001.geekbang.org/account/avatar/00/28/d3/ef/b3b88181.jpg","comment_is_top":false,"comment_ctime":1625096153,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1625096153","product_id":100039001,"comment_content":"rust不支持继承，封装用pub，抽象就是函数吧，多态是范型+trait","like_count":0},{"had_liked":false,"id":295476,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1622443888,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1622443888","product_id":100039001,"comment_content":"unix和linux首先追求效率，更底层，其次写的人水平厉害。😂","like_count":0},{"had_liked":false,"id":291171,"user_name":"柴柴777","can_delete":false,"product_type":"c1","uid":1032484,"ip_address":"","ucode":"5208B935ECB6F7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/24/0ea08c9e.jpg","comment_is_top":false,"comment_ctime":1620096734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620096734","product_id":100039001,"comment_content":"要支持面向对象这一套机制，对运行的效率会有所降低。会需要在运行时去做校验，寻找实际函数地址。对于普通业务开发更需要可维护，可拓展，可读，更易懂。对于操作系统来说，性能要求更高。当然需要更高性能的业余组件，也是可以采用面向过程的语言开发 ","like_count":0},{"had_liked":false,"id":291010,"user_name":"cccy七里十一","can_delete":false,"product_type":"c1","uid":1963604,"ip_address":"","ucode":"38858D844ECC72","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f6/54/bf649b32.jpg","comment_is_top":false,"comment_ctime":1619935716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619935716","product_id":100039001,"comment_content":"看完这章才恍然自己其实并没有深入了解过面向对象和面向过程的区别。用面向对象语言，但思考的方式仍然是线性的面向过程的。这个是我这章学完最大的感触与反思。","like_count":0},{"had_liked":false,"id":290259,"user_name":"Helios","can_delete":false,"product_type":"c1","uid":1380758,"ip_address":"","ucode":"BE6B98EE8F0D09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKJrOl63enWXCRxN0SoucliclBme0qrRb19ATrWIOIvibKIz8UAuVgicBMibIVUznerHnjotI4dm6ibODA/132","comment_is_top":false,"comment_ctime":1619452988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619452988","product_id":100039001,"comment_content":"面向对象相比面向过程的好处是更加注重模型，自己提供了丰富的面向对象的功能剩下的用不用就看你了","like_count":0},{"had_liked":false,"id":290091,"user_name":"刘杰","can_delete":false,"product_type":"c1","uid":1150394,"ip_address":"","ucode":"D45873B34FAA90","user_header":"https://static001.geekbang.org/account/avatar/00/11/8d/ba/30f502ed.jpg","comment_is_top":false,"comment_ctime":1619357786,"is_pvip":true,"discussion_count":0,"race_medal":3,"score":"1619357786","product_id":100039001,"comment_content":"matlab，statflow","like_count":0},{"had_liked":false,"id":287356,"user_name":"爱学习的Kirk","can_delete":false,"product_type":"c1","uid":2392633,"ip_address":"","ucode":"CB6607E26037EC","user_header":"https://static001.geekbang.org/account/avatar/00/24/82/39/c3227567.jpg","comment_is_top":false,"comment_ctime":1617897995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617897995","product_id":100039001,"comment_content":"个人认为并不矛盾<br>在阅读内核源码时，随处可见的面相对象思想，有时还能感受到面相对象语言相当于将面相过程语言包裹了一层","like_count":0},{"had_liked":false,"id":285425,"user_name":"luck_tou","can_delete":false,"product_type":"c1","uid":1904497,"ip_address":"","ucode":"E6BACBB08C504E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJKkThulMFj6MiaY8qlsmHWrlIzo1SEhwDjwpgLP2bhLYETx1f0DepRDsBdssd5dFKN35zzFUYnia1Q/132","comment_is_top":false,"comment_ctime":1616810297,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1616810297","product_id":100039001,"comment_content":"sql就很高级，更接近人脑模式，把保障效率交给数据库引擎和DBA。","like_count":0},{"had_liked":false,"id":281545,"user_name":"Geek_ea3267","can_delete":false,"product_type":"c1","uid":1962384,"ip_address":"","ucode":"71C1EBF50F457A","user_header":"","comment_is_top":false,"comment_ctime":1614781645,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614781645","product_id":100039001,"comment_content":"linux和unix主要是和计算机系统打交道, 较为底层.使用面向过程的C语言效率比面向对象语言效率更高","like_count":0},{"had_liked":false,"id":281432,"user_name":"Anthony","can_delete":false,"product_type":"c1","uid":1309908,"ip_address":"","ucode":"9E0C98A9123365","user_header":"https://static001.geekbang.org/account/avatar/00/13/fc/d4/743d3f02.jpg","comment_is_top":false,"comment_ctime":1614748885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1614748885","product_id":100039001,"comment_content":"我认为有两个原因：<br>一、我们知道，面向对象语言更适合人脑的思维，面向过程语言，也就是更底层的语言，更适合机器理解，但是这也导致了像C语言这种面向过程语言效率更高，操作系统作为底层系统，运行效率的比重毋庸置疑；<br>二、看是否能写出面向对象的代码往往不是由语言决定的，而是由写代码的程序员决定的，C语言一样可以写出面向对象风格的代码<br>","like_count":0},{"had_liked":false,"id":273829,"user_name":"刘立嘉","can_delete":false,"product_type":"c1","uid":2414637,"ip_address":"","ucode":"1241140EBE7FE3","user_header":"https://static001.geekbang.org/account/avatar/00/24/d8/2d/6ec3760c.jpg","comment_is_top":false,"comment_ctime":1610691012,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610691012","product_id":100039001,"comment_content":"面向过程是一种编程思维方式，并不局限于编程语言。操作系统注重的是性能和稳定性，相对低级的编程语言更贴近机器，所以更适合用于编写。而上层的业务系统因其业务的复杂性，决定了它需要更灵活，快速地进行运算、迭代，更新，扩展。所以面向对象的编程语言会更适合。","like_count":0},{"had_liked":false,"id":272486,"user_name":"锐锐爱南球","can_delete":false,"product_type":"c1","uid":1158621,"ip_address":"","ucode":"7AA4CA355B9D69","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/dd/970e7b4a.jpg","comment_is_top":false,"comment_ctime":1610098463,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1610098463","product_id":100039001,"comment_content":"越高级的语言就越对人友好，而越低级的语言则是面向机器的。高级语言在运行时也会被编译成汇编语言，机器语言，而封装越复杂，那么编译效率就越低下。但是高级语言却可以让程序员复用模式，快速迭代，满足业务需求，所以才有现在纷繁多彩的互联网世界。而C语言等面向过程的语言则在单片机，操作系统上一枝独秀，因为他们是和机器打交道，追求运行的极致。我觉得两者并不冲突，反而是相辅相成。就和HTTP协议栈一样，每一层只关注自身的东西，然后上下层通过协议进行互通，细节互不关注，各管各的，各自发挥自己的职能。当然，最后说一点，Linux的问题和林纳斯有关，他作为Linux教主，本人及其讨厌面向对象编程。","like_count":0},{"had_liked":false,"id":267655,"user_name":"Amber","can_delete":false,"product_type":"c1","uid":2358638,"ip_address":"","ucode":"650FE5C46CCD1C","user_header":"https://static001.geekbang.org/account/avatar/00/23/fd/6e/1913dbb6.jpg","comment_is_top":false,"comment_ctime":1607860995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607860995","product_id":100039001,"comment_content":"我觉得操作系统，可能留言区更多是特指类unix 操作系统，用c 语言写的原因之一，是由于历史原因，在unix 出现的时候，c 语言都没有出现，而unix 是先用汇编写的，丹尼斯里奇也可能是考虑到汇编的不可移植性，有感而发明了c ，而此时用c 重写unix 是很自然的行为。因为c 很简单，和汇编，硬件很接近。然后在写编译器，大大可移植。<br>而此时，如果用cpp 写的话，需要做更多的抽象，代价更大。","like_count":0},{"had_liked":false,"id":266943,"user_name":"王川","can_delete":false,"product_type":"c1","uid":1944895,"ip_address":"","ucode":"AED1548E793EB3","user_header":"https://static001.geekbang.org/account/avatar/00/1d/ad/3f/b5eabecf.jpg","comment_is_top":false,"comment_ctime":1607531201,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607531201","product_id":100039001,"comment_content":"写代码前还是要仔细思考，避免使用面向对象的编程语言写出面向过程的代码。面向对象的核心在于设计","like_count":0},{"had_liked":false,"id":265774,"user_name":"REAL_MADIRD","can_delete":false,"product_type":"c1","uid":1012889,"ip_address":"","ucode":"9E327B5456739D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/99/dbdee494.jpg","comment_is_top":false,"comment_ctime":1607008770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607008770","product_id":100039001,"comment_content":"说白了，面向对象是一种思想，至于实现，理论上任何语言都可以使用这种思想，而C语言因为在机器上运行效率更好，所以对操作系统这种底层的基础设施，效率放第一位，没问题，但是在编程过程中，依然可以使用面向对象的编程思想","like_count":0},{"had_liked":false,"id":265452,"user_name":"崔光伟","can_delete":false,"product_type":"c1","uid":1875245,"ip_address":"","ucode":"603FCACC5CFC1C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJZMLfqpOHFbYF6Q31xgbKJ0FaO2ibFSqzyjV9gRlIYsnvGUcxYaG1eABJ5UupxVeda0yV0B3sBqDA/132","comment_is_top":false,"comment_ctime":1606901040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606901040","product_id":100039001,"comment_content":"面向对象是从人的角度出发的，面向过程是从机器角度出发的；","like_count":0},{"had_liked":false,"id":263575,"user_name":"初学者","can_delete":false,"product_type":"c1","uid":2331845,"ip_address":"","ucode":"A6B5DDB0FCD5EC","user_header":"https://static001.geekbang.org/account/avatar/00/23/94/c5/67fa8668.jpg","comment_is_top":false,"comment_ctime":1606187464,"is_pvip":false,"replies":[{"id":"96090","content":"大部分人都是这个感觉","user_name":"作者回复","comment_id":263575,"uid":"1190123","ip_address":"","utype":1,"ctime":1606700720,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1606187464","product_id":100039001,"comment_content":"感觉现在写代码，不是面向对象开发，更感觉像是面向数据库开发","like_count":0,"discussions":[{"author":{"id":1125033,"avatar":"https://static001.geekbang.org/account/avatar/00/11/2a/a9/83684d4a.jpg","nickname":"喆里","note":"","ucode":"0B4B38104645CA","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":262453,"discussion_content":"分布式锁只能解决互斥啊，并不能解决不同进程操作的是同一个对象啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589100238,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261945,"user_name":"淤白","can_delete":false,"product_type":"c1","uid":1206503,"ip_address":"","ucode":"D1E65DC40DAF68","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/e7/ee47d0e2.jpg","comment_is_top":false,"comment_ctime":1605585078,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605585078","product_id":100039001,"comment_content":"打卡：Java实现了整个用户信息的案例。","like_count":0},{"had_liked":false,"id":256083,"user_name":"蚝不鱿鱼","can_delete":false,"product_type":"c1","uid":1428043,"ip_address":"","ucode":"5DB98E406F1D3E","user_header":"https://static001.geekbang.org/account/avatar/00/15/ca/4b/c1ace3aa.jpg","comment_is_top":false,"comment_ctime":1603522838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603522838","product_id":100039001,"comment_content":"操作系统是更接近机器，所以用机器更能懂的语言。但对于人来说，就需要更符合大众思维的语言方便人和沟通，感觉又应验了那句话，计算机的世界里面没有什么问题是加一层解决不讲的，而面向对象就是更高级的一层相对面过程，可能我表达的不太到位。","like_count":0},{"had_liked":false,"id":255501,"user_name":"紫日","can_delete":false,"product_type":"c1","uid":1207410,"ip_address":"","ucode":"73A8DEE323AC19","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqXSb2jAzlMM0JdTjWrNiaq2uR9eeloBYp906POddb9evmuj5f4CUoO6ge8TibibwtZicnl1sRHic9rW7g/132","comment_is_top":false,"comment_ctime":1603358987,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"1603358987","product_id":100039001,"comment_content":"对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。<br>面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。利用这些特性编写出来的代码，更加易扩展、易复用、易维护。<br>从编程语言跟机器打交道的方式的演进规律中，我们可以总结出：面向对象编程语言比起面向过程编程语言，更加人性化、更加高级、更加智能。","like_count":0},{"had_liked":false,"id":246923,"user_name":"WilliamVector","can_delete":false,"product_type":"c1","uid":1898112,"ip_address":"","ucode":"E0D3C3D4FCB7C9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/80/85ec2c2a.jpg","comment_is_top":false,"comment_ctime":1599532267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599532267","product_id":100039001,"comment_content":"【要点】<br>1、面向过程编程和面向过程编程语言<br>面向过程编程和面向过程编程语言并没有严格的官方定义。理解这两个概念最好的方式是跟面向对象编程和面向对象编程语言进行对比。相较于面向对象编程以类为组织代码的基本单元，面向过程编程则是以过程（或方法）作为组织代码的基本单元。它最主要的特点就是数据和方法相分离。相较于面向对象编程语言，面向过程编程语言最大的特点就是不支持丰富的面向对象编程特性，比如继承、多态、封装。<br>2、面向对象编程相对于面向过程编程的优势<br>(1)对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。<br>(2)面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。利用这些特性编写出来的代码，更加易扩展、易复用、易维护。<br>(3)从编程语言跟机器打交道的方式的演进规律中，我们可以总结出：面向对象编程语言比起面向过程编程语言，更加人性化、更加高级、更加智能。<br>【思考】<br>Unix、Linux操作系统用C语言开发的原因：<br>1、C语言更贴进操作系统，效率更高，在当时的硬件水平C语言基本是首选。<br>2、面向对象是编程思想的体现，C语言是工具，并不矛盾，基于C语言也可以写出面向对象思想的程序。<br>3、作者可能更擅长C语言，或者说当时C语言仍然是主要流行的编程语言。","like_count":0},{"had_liked":false,"id":246760,"user_name":"左右","can_delete":false,"product_type":"c1","uid":1410917,"ip_address":"","ucode":"97D38B40C127BB","user_header":"https://static001.geekbang.org/account/avatar/00/15/87/65/0d0622e8.jpg","comment_is_top":false,"comment_ctime":1599471407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599471407","product_id":100039001,"comment_content":"从执行效率来说，面向过程语言无疑要比面向对象语言快的多，而操作系统虽然是比较复杂的程序，但开发过程中除了考虑实现复杂度之外，更多的还是应该考虑使用时的运行效率。这点来看，C语言会是首选。","like_count":0},{"had_liked":false,"id":246464,"user_name":"Younger Ku","can_delete":false,"product_type":"c1","uid":1323102,"ip_address":"","ucode":"D157DC38BDB515","user_header":"https://static001.geekbang.org/account/avatar/00/14/30/5e/c42bc33f.jpg","comment_is_top":false,"comment_ctime":1599361854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599361854","product_id":100039001,"comment_content":"一个是因为历史原因，这个前几篇评论中都说了。另外一个原因就是操作系统不需要经常开发新的，种类也就那么几种，我们只需要选择最高效的拿来用就行。操作系统的开发人员最多就是平时维护升级一下，这样当然要选择高效的c语言来开发。","like_count":0},{"had_liked":false,"id":245731,"user_name":"宇天飞","can_delete":false,"product_type":"c1","uid":1126444,"ip_address":"","ucode":"3FB37D1E2DAA61","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/2c/06375913.jpg","comment_is_top":false,"comment_ctime":1599036518,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1599036518","product_id":100039001,"comment_content":"1、不矛盾<br>2、Unix、Linux系统出现的较早，历史原因一直用的是C语言，面向对象的特性也有使用，比如通过函数来抽象、封装；另外C语言更高效。","like_count":0},{"had_liked":false,"id":245236,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1598872736,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598872736","product_id":100039001,"comment_content":"并不矛盾，  操作系统更多的是与机器打交道，需要更加好的对机器资源，效率管理能力，面向过程语言的处理方式更适合机器","like_count":0},{"had_liked":false,"id":244127,"user_name":"BitbIt","can_delete":false,"product_type":"c1","uid":1412121,"ip_address":"","ucode":"418AB6E264E396","user_header":"https://static001.geekbang.org/account/avatar/00/15/8c/19/870c8992.jpg","comment_is_top":false,"comment_ctime":1598406622,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1598406622","product_id":100039001,"comment_content":"那么需求文档会不会就是文中提到的，更智能更人性化的下代编程语言","like_count":0},{"had_liked":false,"id":244081,"user_name":"y y gi r l","can_delete":false,"product_type":"c1","uid":2132615,"ip_address":"","ucode":"0BC00677D3071D","user_header":"https://static001.geekbang.org/account/avatar/00/20/8a/87/dd68531b.jpg","comment_is_top":false,"comment_ctime":1598397142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598397142","product_id":100039001,"comment_content":"面向过程语言可以进行面向对象设计","like_count":0},{"had_liked":false,"id":241463,"user_name":"锋子","can_delete":false,"product_type":"c1","uid":1681459,"ip_address":"","ucode":"89FFA85BDB1C99","user_header":"https://static001.geekbang.org/account/avatar/00/19/a8/33/b71635c1.jpg","comment_is_top":false,"comment_ctime":1597301526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597301526","product_id":100039001,"comment_content":"什么时候有面向需求编程语言、面向产品编程语言，那才是更加接近人类的想法。 当然，那个时候产品为王啦，哈哈哈哈","like_count":0},{"had_liked":false,"id":240729,"user_name":"Geek_1d1ced","can_delete":false,"product_type":"c1","uid":2097256,"ip_address":"","ucode":"F2B0C5FA46D39F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/wzUpQd1IrJ9K1ZlsCib7iarnu4JfibhLN3MTAiaZvhibTgG3lcHrBoS7aHafiaowdjrZicfKcbNUrwibbDZuNyDWoaUn3A/132","comment_is_top":false,"comment_ctime":1597046705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1597046705","product_id":100039001,"comment_content":"看了大佬们的留言后的笔记：<br>1.c语言虽然存在如内存越界，野指针，内存泄漏等问题，但是它的效率非常高，适合底层的开发，像很多游戏都是用c或c++<br>2.操作系统内部实现有很多面向对象的思想，语言说到底也只是工具，核心的设计模式好的编程思想是更重要的东西。","like_count":0},{"had_liked":false,"id":240272,"user_name":"Ilearning99","can_delete":false,"product_type":"c1","uid":1989119,"ip_address":"","ucode":"7901836A2C47EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/qOdqzmC507sibL6sichNSDaVmyoMKibEIqHWpic4CftgOQnoA3QKeRPwic9j1Ha8MLtzzqzfSRavR9GWMju09SMADUg/132","comment_is_top":false,"comment_ctime":1596840633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596840633","product_id":100039001,"comment_content":"C面向过程的代码效率更高","like_count":0},{"had_liked":false,"id":240240,"user_name":"foreveryi","can_delete":false,"product_type":"c1","uid":1596532,"ip_address":"","ucode":"C322C02C8D1CEC","user_header":"https://static001.geekbang.org/account/avatar/00/18/5c/74/3f9e7c14.jpg","comment_is_top":false,"comment_ctime":1596802689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596802689","product_id":100039001,"comment_content":"不矛盾，面向过程的编程语言开发的系统离机器很近，离人类较远。","like_count":0},{"had_liked":false,"id":239141,"user_name":"Happy—sea","can_delete":false,"product_type":"c1","uid":1624484,"ip_address":"","ucode":"4EAD3636164392","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/a4/66b606ad.jpg","comment_is_top":false,"comment_ctime":1596446147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596446147","product_id":100039001,"comment_content":"面对对象和面向过程的编程语言各有优势和缺陷，在不同的业务场景中选择适合的语言。","like_count":0},{"had_liked":false,"id":239131,"user_name":"天敌","can_delete":false,"product_type":"c1","uid":1059944,"ip_address":"","ucode":"CD29A622197197","user_header":"https://static001.geekbang.org/account/avatar/00/10/2c/68/c299bc71.jpg","comment_is_top":false,"comment_ctime":1596443115,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596443115","product_id":100039001,"comment_content":"面对对象会造成机器指令的个数膨胀，而C语言没有这个问题。","like_count":0},{"had_liked":false,"id":238796,"user_name":"Elvis Lee","can_delete":false,"product_type":"c1","uid":2098270,"ip_address":"","ucode":"A4B26AFFE817FA","user_header":"https://static001.geekbang.org/account/avatar/00/20/04/5e/5d2e6254.jpg","comment_is_top":false,"comment_ctime":1596300547,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1596300547","product_id":100039001,"comment_content":"个人觉得，语言只是工具，思想才是决定编程风格的关键。","like_count":0},{"had_liked":false,"id":238427,"user_name":"Geek_Wu","can_delete":false,"product_type":"c1","uid":2090869,"ip_address":"","ucode":"F8BD27F3B69A89","user_header":"","comment_is_top":false,"comment_ctime":1596165142,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596165142","product_id":100039001,"comment_content":"我觉得还是从 问题本身来考虑这个问题。<br>咱们讨论的是面向对象编程的思维而非某种代码风格。至于为什么用C。。最大原因是为了兼顾代码执行效率和代码编辑效率吧。比C快的语音没有C编辑效率高，比C编辑效率快的没有C快。","like_count":0},{"had_liked":false,"id":237961,"user_name":"花影","can_delete":false,"product_type":"c1","uid":1183787,"ip_address":"","ucode":"990AE37BE51DB6","user_header":"https://static001.geekbang.org/account/avatar/00/12/10/2b/bb07956c.jpg","comment_is_top":false,"comment_ctime":1596014788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596014788","product_id":100039001,"comment_content":"对于面向过程和面向对象的理解：<br>面向过程： 单条线操作，什么都得你自己去处理<br>面向对象： 把相关操作封装成类，让每个类处理自己相关的逻辑<br><br> Unix、Linux 这些复杂的系统为什么基于 C语言开发？<br>1、C语言代码执行效率高<br>2、Unix、Linux这样的系统都是需要依赖于硬件的，但是硬件的更新速度并不大。<br>","like_count":0},{"had_liked":false,"id":236372,"user_name":"微末凡尘","can_delete":false,"product_type":"c1","uid":1099525,"ip_address":"","ucode":"25EDFD0914D0F4","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/05/19c5c255.jpg","comment_is_top":false,"comment_ctime":1595402816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1595402816","product_id":100039001,"comment_content":"OOP是离机器更远，离人更近，更加的智能，更加的人性化。<br>而面向过程语言，例如C语言离机器更加近，UNIX&#47;Linux都是离硬件最近的操作系统，所以使用C语言更加的合适，留言中有句话写的很好，C语言只管程序员飞的高不高，而不管程序员飞的累不累，随着硬件的发展，硬件对程序性能的影响越来越小，现有的编程语言与越来越人性化，这是发展的趋势。","like_count":0},{"had_liked":false,"id":234449,"user_name":"石仔","can_delete":false,"product_type":"c1","uid":1177921,"ip_address":"","ucode":"974E4604CE2213","user_header":"https://static001.geekbang.org/account/avatar/00/11/f9/41/411b1753.jpg","comment_is_top":false,"comment_ctime":1594694196,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594694196","product_id":100039001,"comment_content":"二刷<br>很多人说SQL是第四代语言,因为它只是告诉数据库,我要的数据哪里来,我要哪些列的数据,没有具体实现.","like_count":0},{"had_liked":false,"id":231242,"user_name":"超级励辰","can_delete":false,"product_type":"c1","uid":1017669,"ip_address":"","ucode":"94F34809B7D893","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/45/9edd38ba.jpg","comment_is_top":false,"comment_ctime":1593612925,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593612925","product_id":100039001,"comment_content":"正篇文章真的学到很多，改变了自己很多的想法。特别是下面这段话：<br>面向对象编程是以类为思考对象。在进行面向对象编程的时候，我们并不是一上来就去思考，如何将复杂的流程拆解为一个一个方法，而是采用曲线救国的策略，先去思考如何给业务建模，如何将需求翻译为类，如何给类之间建立交互关系，而完成这些工作完全不需要考虑错综复杂的处理流程。<br>编程3年了，一直都是用面向过程的思想去考虑，说到面向对象也一直以为就是类而已，重要的不是语言，而是思想","like_count":0},{"had_liked":false,"id":221780,"user_name":"周星平","can_delete":false,"product_type":"c1","uid":1494880,"ip_address":"","ucode":"1FDCB487392B03","user_header":"https://static001.geekbang.org/account/avatar/00/16/cf/60/9100ad4f.jpg","comment_is_top":false,"comment_ctime":1590590788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590590788","product_id":100039001,"comment_content":"为什么要仿生呢，因为离大自然越相似的东西越智能越高级，编程语言也是这样，越仿生越强大","like_count":0},{"had_liked":false,"id":221238,"user_name":"鱼干","can_delete":false,"product_type":"c1","uid":1367335,"ip_address":"","ucode":"3BF41D25AFAC74","user_header":"https://static001.geekbang.org/account/avatar/00/14/dd/27/b0e91408.jpg","comment_is_top":false,"comment_ctime":1590454155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590454155","product_id":100039001,"comment_content":"个人的经验看，其实对于复杂业务有些惨痛教训，第一个是基于接口的单元测试和基于模型的单元测试，第二个是基于模型的复用和基于接口的复用。越复杂的项目在后续的迭代维护越能体现模型的好处","like_count":0},{"had_liked":false,"id":218181,"user_name":"GeekD","can_delete":false,"product_type":"c1","uid":1783804,"ip_address":"","ucode":"357FAB2249FDB4","user_header":"","comment_is_top":false,"comment_ctime":1589730236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589730236","product_id":100039001,"comment_content":"个人感觉操作系统使用C编写的原因有：<br>1.开发unix   linux时面向对象的思想还未出现<br>2.作者更熟悉c语言，且c是当时流行的编程语言（如果说因为c更接近底层，那为何不用汇编？😷）<br><br>每个软件时代出现的编程语言都有其存在的合理性，就像出现面向对象编程思想后诞生的新生操作系统，它们更多使用的是面向对象的编程语言。<br><br>同样的，如果函数式编程思想能引领未来的潮流，我也更愿意相信那时候的未来操作系统会使用函数式编程语言进行开发。","like_count":0},{"had_liked":false,"id":217577,"user_name":"Geek_f04d81","can_delete":false,"product_type":"c1","uid":1445106,"ip_address":"","ucode":"ECD9F1BE0B2186","user_header":"https://static001.geekbang.org/account/avatar/00/16/0c/f2/eff644f9.jpg","comment_is_top":false,"comment_ctime":1589536650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589536650","product_id":100039001,"comment_content":"看linux内核代码 处处都可以体现抽象 ","like_count":0},{"had_liked":false,"id":217576,"user_name":"Geek_f04d81","can_delete":false,"product_type":"c1","uid":1445106,"ip_address":"","ucode":"ECD9F1BE0B2186","user_header":"https://static001.geekbang.org/account/avatar/00/16/0c/f2/eff644f9.jpg","comment_is_top":false,"comment_ctime":1589536591,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589536591","product_id":100039001,"comment_content":"内核用c开发再适合不过, 内核功能注重效率, 主要操作硬件, windows内核不也是c写的 hhh","like_count":0},{"had_liked":false,"id":216927,"user_name":"方舟勇士","can_delete":false,"product_type":"c1","uid":1218162,"ip_address":"","ucode":"53D3D844B08B92","user_header":"https://static001.geekbang.org/account/avatar/00/12/96/72/a517bf25.jpg","comment_is_top":false,"comment_ctime":1589370646,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1589370646","product_id":100039001,"comment_content":"因为性能，因为通用，因为编写操作系统的人水平高，所以用面向多过程的方法开发Unix、Linux","like_count":0},{"had_liked":false,"id":215925,"user_name":"scmath","can_delete":false,"product_type":"c1","uid":1149022,"ip_address":"","ucode":"641023BB246C29","user_header":"https://static001.geekbang.org/account/avatar/00/11/88/5e/7c76f422.jpg","comment_is_top":false,"comment_ctime":1589153281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589153281","product_id":100039001,"comment_content":"面向过程编程范式是先考虑数据和处理数据的函数，函数和数据是分离的，main函数开始初始化数据调用func处理数数据。<br>面向对象编程范式：先根据需求抽象出类，粒度大的名词是类，粒度小的名称划分到类的属性，类的行为是方法，通过数据访问权限private和public保护属性的可见性和get、set方法保护数据的赋值和输出；先抽象出接口不用想实现就可以写代码，抽象出基类用继承实现代码复用。然后再用类“组合”和“依赖”进行搭积木完成现在业务逻辑。同时可以方便的利用多态实现扩展。<br>范式是完成需求的思考过程和组织代码的方式，跟用什么语言关系不是很大。","like_count":0},{"had_liked":false,"id":215287,"user_name":"文超","can_delete":false,"product_type":"c1","uid":1673835,"ip_address":"","ucode":"9994423E67FB4C","user_header":"https://static001.geekbang.org/account/avatar/00/19/8a/6b/992dc7d1.jpg","comment_is_top":false,"comment_ctime":1588948451,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588948451","product_id":100039001,"comment_content":"Linux和Unix本身是更贴近于硬件底层，针对这些需求而言，执行的效率是优先考虑的。而C是仅次于汇编的高效率执行语言，用C开发能够保证效率。","like_count":0},{"had_liked":false,"id":210549,"user_name":"李圣悦","can_delete":false,"product_type":"c1","uid":1638427,"ip_address":"","ucode":"C1786C98824E50","user_header":"https://static001.geekbang.org/account/avatar/00/19/00/1b/eee13196.jpg","comment_is_top":false,"comment_ctime":1587786832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587786832","product_id":100039001,"comment_content":"写了几年代码，从不用c++只有一个原因：太复杂。个人觉得写自己能把握的代码才能是高质量代码。所以一直使用c来写代码，同样可以写出具有面向对象思想的代码","like_count":0},{"had_liked":false,"id":207697,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1587139635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587139635","product_id":100039001,"comment_content":"底层系统操作相对简单，执行逻辑偏线性化，多次多种方法 或多次调用同一个方法 来组成更高级的操作，那么单个方法的调用量是巨大的，而每一点的效率提升或降低带来的性能变化也是巨大的。而面相对象 的特性都是需要消耗性能 和 空间资源，自然面相过程更有优势。","like_count":0},{"had_liked":false,"id":205903,"user_name":"MrVito","can_delete":false,"product_type":"c1","uid":1252169,"ip_address":"","ucode":"716FF6F8871706","user_header":"https://static001.geekbang.org/account/avatar/00/13/1b/49/ddefc656.jpg","comment_is_top":false,"comment_ctime":1586754504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586754504","product_id":100039001,"comment_content":"面向对象，其实主要体现在思想层面上，面向过程语言也能写出面向对象的代码。","like_count":0},{"had_liked":false,"id":202715,"user_name":"酸辣土豆丝","can_delete":false,"product_type":"c1","uid":1751234,"ip_address":"","ucode":"0E3E4AFB31E1E6","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/c2/d1904d74.jpg","comment_is_top":false,"comment_ctime":1586056455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586056455","product_id":100039001,"comment_content":"不冲突，机器执行最终还是二进制的形式，越是高级语言，转化成二进制，需要一个汇编，编译的阶段，这是需要耗很多时间的。操作系统用c是为了开发，也用到了面向对象编程思想，实现方式是结构体加函数指针","like_count":0},{"had_liked":false,"id":202363,"user_name":"KK","can_delete":false,"product_type":"c1","uid":1324863,"ip_address":"","ucode":"FFC31A3FE3A285","user_header":"https://static001.geekbang.org/account/avatar/00/14/37/3f/a9127a73.jpg","comment_is_top":false,"comment_ctime":1585975844,"is_pvip":false,"replies":[{"id":"87071","content":"后面会讲到的","user_name":"作者回复","comment_id":202363,"uid":"1190123","ip_address":"","utype":1,"ctime":1595208952,"user_name_real":"王争"}],"discussion_count":1,"race_medal":1,"score":"1585975844","product_id":100039001,"comment_content":"什么是函数式编程？与老师所说的面向过程编程有什么区别吗？感觉他们两是一样的。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490568,"discussion_content":"后面会讲到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595208952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":201754,"user_name":"Geek_a9e93c","can_delete":false,"product_type":"c1","uid":1928846,"ip_address":"","ucode":"BF34AA5934C95E","user_header":"","comment_is_top":false,"comment_ctime":1585833170,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585833170","product_id":100039001,"comment_content":"写了三年代码，一直都是面向过程，因为还没有对象😏","like_count":0},{"had_liked":false,"id":200466,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1585590631,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585590631","product_id":100039001,"comment_content":"我感觉设计模式是内功心法，数据结构是外在招式。又好比华山派的气宗和剑宗。","like_count":0},{"had_liked":false,"id":197818,"user_name":"面向百度编程","can_delete":false,"product_type":"c1","uid":1732780,"ip_address":"","ucode":"8FE04A019D71D1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/70/ac/83bc14c0.jpg","comment_is_top":false,"comment_ctime":1585399599,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585399599","product_id":100039001,"comment_content":"c编译执行的语言，效率更高，相对于硬件的调度，linux，unix本身就是一种操作系统，跟硬件如此密切的交流，用c语言的效率更高。当一种技术已经趋于稳定成熟的时候，我们就要学会滚轮子了，就是在c之上如何在进行简化，封装，所以高级语言越是能够得以运用，越是一些底层的东西在支撑着。","like_count":0},{"had_liked":false,"id":194243,"user_name":"墨鱼","can_delete":false,"product_type":"c1","uid":1022720,"ip_address":"","ucode":"8FB5E4DCB8A024","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/00/654be3f7.jpg","comment_is_top":false,"comment_ctime":1585040434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585040434","product_id":100039001,"comment_content":"1.稍微看了一下，c语言是更偏底层的语言，对于写操作系统这种更有优势。<br><br>面向过程就是按照过程（方法）来进行编程，是一种编程风格。数据和方法是分离开的。<br><br>面向对象编程是以对象和类作为组织单元来编程。数据和方法放到一起。<br><br><br>面向对象的优势： 1.网状思维，我们只需要考虑一个个类和对象，然后再把这些类和对象组织起来。如果是面向过程的话，线性思维，就需要我们一开始就把所有的主线考虑清楚。 2.面向对象有四大特性，写出的代码易扩展，易维护。3.面向对象更智能，更符合人类的思维方式。","like_count":0},{"had_liked":false,"id":191390,"user_name":"不学不行啊","can_delete":false,"product_type":"c1","uid":1335474,"ip_address":"","ucode":"69368165141C2D","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/b2/ccebcb71.jpg","comment_is_top":false,"comment_ctime":1584769572,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584769572","product_id":100039001,"comment_content":"面向对象编程相比起面向过程编程的优势主要有三个。对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。面向对象编程相比面向过程编程，具有更加丰富的特性（封装、抽象、继承、多态）。利用这些特性编写出来的代码，更加易扩展、易复用、易维护。从编程语言跟机器打交道的方式的演进规律中，我们可以总结出：面向对象编程语言比起面向过程编程语言，更加人性化、更加高级、更加智能。","like_count":0},{"had_liked":false,"id":190827,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1584696504,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584696504","product_id":100039001,"comment_content":"主要还是看应用场景，对于操作系统用C语言这种面向过程的语言开发，主要是为了考虑效率。<br>而用面向过程一层层包装，最终还是转化为汇编的执行命令。<br>所有一般做嵌入式开发，直接和硬件打交道的使用面向过程还是有需求的。<br>做应用层开发，考虑的肯定是方便开发、好维护扩展。从这个角度看，面向对象更有意义。","like_count":0},{"had_liked":false,"id":187237,"user_name":"Presley","can_delete":false,"product_type":"c1","uid":1215219,"ip_address":"","ucode":"D8F125835F4903","user_header":"https://static001.geekbang.org/account/avatar/00/12/8a/f3/7c89d00e.jpg","comment_is_top":false,"comment_ctime":1584067236,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584067236","product_id":100039001,"comment_content":"Unix、Linux 这些复杂的系统，属于底层系统，擅长与底层硬件打交道，要求能充分利用硬件的特性，也对性能要求极高，有些关键点甚至是汇编编写。而面向对象的语言比如Java,可能无法直接利用硬件的特性，当然，性能也相对较差","like_count":0},{"had_liked":false,"id":185724,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1583671158,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583671158","product_id":100039001,"comment_content":"有一定的原因是历史的包袱，在阅读TCP的源码的时候，发现前辈早就在用面向对象的思想在写代码了，一样实现了多态等高级特性","like_count":0},{"had_liked":false,"id":184881,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1583423923,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583423923","product_id":100039001,"comment_content":"面向对象的示例代码貌似忘了根据age排序","like_count":0},{"had_liked":false,"id":184555,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1091781,"ip_address":"","ucode":"67802124F5181D","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epjdWhOia2BKpvYDUIria0klBOvxU4v8CfsobsGYicUia6Hybb4n658LfJymFbuPk0koxldr6QIOpQsMA/132","comment_is_top":false,"comment_ctime":1583336758,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583336758","product_id":100039001,"comment_content":"1.历史原因，一开始就是使用c编码，不容易切换；<br>2.底层，接近硬件，变化“”较小”<br>3.效率","like_count":0},{"had_liked":false,"id":181391,"user_name":"悠游","can_delete":false,"product_type":"c1","uid":1222834,"ip_address":"","ucode":"4FDDDDF29AE3F0","user_header":"https://static001.geekbang.org/account/avatar/00/12/a8/b2/998448ca.jpg","comment_is_top":false,"comment_ctime":1582534048,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582534048","product_id":100039001,"comment_content":" Unix、Linux 这些系统虽然非常，但是不像业务需求一样变化那么频繁，所以对可扩展和可复用的要求没那么高，面向过程足够应付<br>另外就是很重要的一点，C语言是高级语言中的低级语言，它的执行效率是最高的。","like_count":0},{"had_liked":false,"id":180035,"user_name":"沁塵","can_delete":false,"product_type":"c1","uid":1564002,"ip_address":"","ucode":"4AD780EF50882B","user_header":"https://static001.geekbang.org/account/avatar/00/17/dd/62/824e5e16.jpg","comment_is_top":false,"comment_ctime":1582169657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582169657","product_id":100039001,"comment_content":"不矛盾。个人感觉面向过程是更接近人的思维的方式，是一种线性思维的思考方式，一开始人要和机器交互，机器怎么“读懂”人类的指令？那肯定按设计的那个人来，他觉得机器该是怎样的就是怎样的，既然人的潜意识都是线性思维的方式，那机器自然也就被设计成那样子。这也是为什么很多时候我们写面向过程感觉比写面向对象舒服，一气呵成，我们只是在用自己习惯的、舒服的方式在跟机器交流；但随着科技和社会的发展，项目复杂度上升，这种面向过程的方式问题就暴露出来了，具体问题在老师的专栏中已经指明，所以有了面向对象。面向对象是一种非线性的思维方式和解决方案，这也是为什么我们在看复杂项目的时候，需要各种跳来跳去，这总看起像是黑的绕远路的套路，实则是非线性思维的体现。无论是线性思维还是非线性思维，都是为了思考问题、解决问题的手段，本身应该没有优劣之分，只是在不同场景下才会体现出优劣。像 Unix、Linux 这些复杂的系统，也都是基于 C 语言这种面向过程的编程语言开发的，这个现象我觉得原因是面向对象相比面向过程会增加一些额外的调用开销，所以Unix、Linux 底层源码综合了一下，面向过程之余也借鉴了对象的写法，在舒服和性能之余兼顾维护性。","like_count":0},{"had_liked":false,"id":179868,"user_name":"未来小娃","can_delete":false,"product_type":"c1","uid":1047329,"ip_address":"","ucode":"477D166EBB6B70","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fb/21/d017438c.jpg","comment_is_top":false,"comment_ctime":1582113928,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1582113928","product_id":100039001,"comment_content":"<br>先梳理下核心观点，1）面向过程编程最大的特点是不支持封装、继承和多态，代码风格上是以方法作为组织单元的，这就意味着一个软件完全可以写在一个文件里（杠精可能说java也可以写在一个文件啊，那么我问你面向对象编程你怎么学的？！2）面向对象编程相比面向过程编程的优势是开发大型复杂系统效率更高，代码更易维护、更易扩展、更易复用<br><br>关于为什么Linux底层系统为什么用c开发的问题，可以这么思考底层系统的要求的运行效率更高、执行速度更快，特点是能有更大的操作底层系统权限，这就意味着代码质量的高低就决定了运行效率和运行速度，从操作系统角度，本质都是二进制指令，那么从前编程语言翻译到二进制指令的路径越短越好，面向对象编程语言因为需要经过jvm的封装中转的过程导致了编译路径更长，不过因为jit编译器的加持java的编译路径更短了自然就提升了效率，这就意味着写着人能看懂得代码同时享受着高效执行的速度，足见虚拟机团队的强大。<br><br>提个小建议，关于为什么面向对象编程语言可以更容易编写大型复杂系统可以加个链接，另外理论部分相对枯燥可以考虑加个配图加深理解，哈哈","like_count":0},{"had_liked":false,"id":179485,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1582013921,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582013921","product_id":100039001,"comment_content":"一是出现时间早,Unix出现的时间还是比较早的,用C已经很先进了<br>二是,相比较于面向对象编程语言,面向过程虽然不易去阅读,但是更加符合机器的执行思路,执行起来更加的快,所以更加合适去开发底层的操作系统<br>三是,即使是面向过程编程语言,也是可以使用一些高级的编程技巧和设计模式的,甚至可以去使用面向对象的类和对象的思想,所以虽然是C去书写的,但其中也是利用了面向对象的思想的","like_count":0},{"had_liked":false,"id":177996,"user_name":"万象","can_delete":false,"product_type":"c1","uid":1222046,"ip_address":"","ucode":"E81A16870C211E","user_header":"https://static001.geekbang.org/account/avatar/00/12/a5/9e/e78e11d7.jpg","comment_is_top":false,"comment_ctime":1581566995,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581566995","product_id":100039001,"comment_content":"1、其他语言是以c语言为基础开发来<br>2、接近硬件层面的语言执行效率为先，目前还没有比c语言效率更高的高级语言<br>","like_count":0},{"had_liked":false,"id":176587,"user_name":"Geek_bb89c3","can_delete":false,"product_type":"c1","uid":1331828,"ip_address":"","ucode":"0F97B5B0F2DDD6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IZKGetBZDuMEa2VwwtesTELvLORIyV749ItgfAqNPv30n4zEv71wuGNr1aNVIVltG0icvH53DHDuqPuzNpiauWAg/132","comment_is_top":false,"comment_ctime":1581092516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581092516","product_id":100039001,"comment_content":"面向过程语言主要是以过程为基础组织程序。将数据和方法进行分离。面向对象一类和对象为基础来组织代码。支持封装，抽象，继承，多态四大特性。面向过程基于二进制方式逐步演进的。<br>面向对象的优势：<br>1.现实中程序格外的纷繁复杂，不紧紧是简单的线形的，面向对象编程更加适合解决这些复杂的问题。<br>2.面向对象支持封装，继承，多态，抽象。这四大特性。能够更方便的写出易维护，易扩展，易服用的程序。<br>3.面向对象编程思维更加贴近人的思维，一些列的类相互协作完成一项复杂的工作。面向对象给予一些列的指令完成一项复杂的工作。但是指令的粒度非常细且是线形的。复杂程度高很多。<br>","like_count":0},{"had_liked":false,"id":176234,"user_name":"lcf枫","can_delete":false,"product_type":"c1","uid":1144171,"ip_address":"","ucode":"D51E8F68BD41CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/75/6b/fd685164.jpg","comment_is_top":false,"comment_ctime":1580996663,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580996663","product_id":100039001,"comment_content":"首先那会只有C 语言。其次里面很多地方有面向对象的影子。在C语言范围内的复用。","like_count":0},{"had_liked":false,"id":176000,"user_name":"张理查","can_delete":false,"product_type":"c1","uid":1003152,"ip_address":"","ucode":"1F93E631CD4B35","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4e/90/a8d19e7b.jpg","comment_is_top":false,"comment_ctime":1580907920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580907920","product_id":100039001,"comment_content":"面向过程语言早于面向对象，就像二进制、汇编到面向过程，是一个自然的过度，编程语言越来越人性化，符合人们的思维。OOP是一种人类的思维方式，我们通过给业务建模，将真实世界映射为类和对象，更加聚焦业务本身，思考如何让机器像人类一样思考。在脑机接口没有真正实现之前，OOP依然是最符合人们思维的编程语言风格","like_count":0},{"had_liked":false,"id":175256,"user_name":"BitInit","can_delete":false,"product_type":"c1","uid":1007271,"ip_address":"","ucode":"BDDDA0F51B1EFB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/a7/8dc374e2.jpg","comment_is_top":false,"comment_ctime":1580632651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580632651","product_id":100039001,"comment_content":"我认为面向对象和面向过程编程是两种代码的组织方式，而C是主要以面向过程而设计的编程语言，使用C同样可以写出面向对象编程的代码，只是成本要相对高而已。像Unix、Linux这些操作系统，里面的代码组织我感觉也有面向对象的思想。Java这种编程语言是天然支持面向对象编程，就相当于节约了你用C写面向对象程序的成本，但是这样也会付出一些代价，比如运行效率等等。","like_count":0},{"had_liked":false,"id":174273,"user_name":"RLIH","can_delete":false,"product_type":"c1","uid":1666777,"ip_address":"","ucode":"A0163F0F48D5D7","user_header":"https://static001.geekbang.org/account/avatar/00/19/6e/d9/8220999a.jpg","comment_is_top":false,"comment_ctime":1580115563,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1580115563","product_id":100039001,"comment_content":"由于编程的复杂性，提出了面向对象思想。面向对象语言是实现面向对象思想的工具。写操作系统这种复杂的软件，可以在原有语言基础上应用面向对象思想，也可直接选用合适的面向对象语言（如 c++）。","like_count":0},{"had_liked":false,"id":172324,"user_name":"拉欧","can_delete":false,"product_type":"c1","uid":1206605,"ip_address":"","ucode":"40996A8093A95F","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/4d/81c44f45.jpg","comment_is_top":false,"comment_ctime":1579154782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579154782","product_id":100039001,"comment_content":"面向对象编程本质上还是思维方式的转变，先设计类，在通过类的交互来完成流程设计；而面向过程编程是将流程直译成代码","like_count":0},{"had_liked":false,"id":165797,"user_name":"喵喵喵","can_delete":false,"product_type":"c1","uid":1211713,"ip_address":"","ucode":"E3AD8BF42E19DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/7d/41/3c5b770b.jpg","comment_is_top":false,"comment_ctime":1577324014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577324014","product_id":100039001,"comment_content":"打卡～","like_count":0},{"had_liked":false,"id":165035,"user_name":"wai","can_delete":false,"product_type":"c1","uid":1439529,"ip_address":"","ucode":"29CE3BE148FB79","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/29/60e01017.jpg","comment_is_top":false,"comment_ctime":1577150484,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577150484","product_id":100039001,"comment_content":"语言没有好坏，只有适合不适合，C语言更接近系统底层，性能优势更强","like_count":0},{"had_liked":false,"id":164937,"user_name":"Geek_3e2092","can_delete":false,"product_type":"c1","uid":1788428,"ip_address":"","ucode":"5906E9EE05F4BE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJnv4h4j5tWy6HappcibN0A5wCwMoXGfxeufDfgCfiaficfericwNv5Slode5ysZDkOKDdF0d0orYBHUw/132","comment_is_top":false,"comment_ctime":1577113826,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577113826","product_id":100039001,"comment_content":"也算是经历了从汇编到c，到c++再到java的过程。确实像作者所说，从偏向机器的思维慢慢过渡到了偏向人类的思维，这似乎也顺应了这个时代的发展潮流。写c的时代，我们要非常关注内存的分配，占用，释放，指针是否越界，程序会不会跑飞等问题。现在还记得研究生时候写过一段代码，一运行电脑就自动关机(然而代码的目的不是为了关机！)工作后越来越多的用了java，有了jvm，似乎只有在性能调优的时候才会想想堆栈情况，其余时候真的不用再考虑太多，按照业务模块分解功能，专注业务实现就可以了。也因此，程序员越来越高产，门槛也越来越低。然而，知其然而也知其所以然的程序员越来越少了，这样虽然看上去写了不少代码，堆砌了很多新的框架组建，但根基并不牢靠。所以真的需要多一些作者这样的课程，来帮助大家慢下节奏，沉下心多思考","like_count":0},{"had_liked":false,"id":164759,"user_name":"黄政","can_delete":false,"product_type":"c1","uid":1345630,"ip_address":"","ucode":"9076A1BF7BB051","user_header":"https://static001.geekbang.org/account/avatar/00/14/88/5e/cc916a2b.jpg","comment_is_top":false,"comment_ctime":1577087001,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1577087001","product_id":100039001,"comment_content":"linux操作系统，实际上就是计算机指定的一层封装，操作系统更需要是机器的理解，而写开发程序更主要的是人类的理解。比如在linux上实现一个daemon进程的业务功能，这时候使用面向对象的语言就更有优势","like_count":0},{"had_liked":false,"id":164184,"user_name":"Next","can_delete":false,"product_type":"c1","uid":1748213,"ip_address":"","ucode":"D5ADDF248A9504","user_header":"https://static001.geekbang.org/account/avatar/00/1a/ac/f5/2f97e279.jpg","comment_is_top":false,"comment_ctime":1576903643,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576903643","product_id":100039001,"comment_content":"看编码的服务对象，也就是看它在服务层级（硬件-&gt;人）的位置。越靠近底层（硬件），受它影响的服务越多越广，越关心执行效率，稳定性；越靠近高层（人），执行效率越依赖于底层服务，本身越关注开发效率成本，维护性，扩展性。<br>靠近硬件的系统内核自然需要使用对硬件有更多控制权c语言等进行开发，而靠近人的应用开发会优先用面相对象的语言开发。<br>个人的一些思考，可能不那么严谨，请多多指教！！！","like_count":0},{"had_liked":false,"id":162223,"user_name":"握不住手中沙","can_delete":false,"product_type":"c1","uid":1097132,"ip_address":"","ucode":"F194E47C4D42C9","user_header":"https://static001.geekbang.org/account/avatar/00/10/bd/ac/49494ed8.jpg","comment_is_top":false,"comment_ctime":1576480011,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576480011","product_id":100039001,"comment_content":"正如文中所说，二进制机器码、汇编语言、面向过程都是用一组指令顺序操作数据，来完成一项任务。而Unix、Linux这类操作系统系统软件直接跟底层硬件进行交互，需要按照硬件的流程化方式来进行，所以使用C语言来开发这类系统能够更好更快地利用计算机硬件资源。并且这类操作系统软件是对硬件资源的管理和操作，更多地通用性流程化的操作，而不是面对各种复杂业务场景的功能开发，使用C语言这类简单地面向过程编程语言能够让系统易维护，易扩展","like_count":0},{"had_liked":false,"id":159827,"user_name":"Geek_ecf7bb","can_delete":false,"product_type":"c1","uid":1523207,"ip_address":"","ucode":"5BF4DD62425BE0","user_header":"https://static001.geekbang.org/account/avatar/00/17/3e/07/c27b53b8.jpg","comment_is_top":false,"comment_ctime":1575805393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575805393","product_id":100039001,"comment_content":"个人感觉有几方面原因：<br>1.历史原因：这些操作系统开始编写的时候应该还没有成熟的面向对象的语言吧，所以就选择了c进行开发<br>2.速度：c语言是面相过程的语言，对于大型项目的开发难度相比面相对象要复杂一些，但是他更加接近底层，执行速度也更加快（对于操作系统一类应该速度是主要矛盾之一吧）<br>所以我觉得这个现象和老师讲的并不矛盾，现在大多数项目考虑到开发，扩展和维护的成本都会选择面向对象的编程语言和范式。","like_count":0},{"had_liked":false,"id":158155,"user_name":"王小贱","can_delete":false,"product_type":"c1","uid":1244728,"ip_address":"","ucode":"91AE60138ACA97","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/38/b6995d69.jpg","comment_is_top":false,"comment_ctime":1575339984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575339984","product_id":100039001,"comment_content":"but 前端圈子这两年又流行函数式编程了...","like_count":0},{"had_liked":false,"id":157708,"user_name":"lovelykooo","can_delete":false,"product_type":"c1","uid":1009369,"ip_address":"","ucode":"B8B9DF2C05E123","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/d9/b81be44b.jpg","comment_is_top":false,"comment_ctime":1575249272,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575249272","product_id":100039001,"comment_content":"网状的业务结构 大概是什么样的 有栗子吗","like_count":0},{"had_liked":false,"id":156476,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1025030,"ip_address":"","ucode":"62A89FD460827A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/06/cf6b6d0f.jpg","comment_is_top":false,"comment_ctime":1574900465,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574900465","product_id":100039001,"comment_content":"Unix 出来的时候还没有面向对象语言，而且用 C 语言更加接近底层，执行效率更高，操作系统看中执行效率，用 C 来写正合适。这也说明了面向过程编程并不是不能用于开发复杂的程序。","like_count":0},{"had_liked":false,"id":156367,"user_name":"被讨厌的勇气","can_delete":false,"product_type":"c1","uid":1547913,"ip_address":"","ucode":"AE3B3CA27D91A2","user_header":"https://static001.geekbang.org/account/avatar/00/17/9e/89/6e9c05d6.jpg","comment_is_top":false,"comment_ctime":1574862607,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574862607","product_id":100039001,"comment_content":"为什么操作系统这种复杂软件基于C语言开发？我认为可能的原因有C语言更底层，性能上有优势；C语言也可以实现面向对象的一些机制，只是比较麻烦。<br><br>##坚持打卡##<br><br>面向对象与面向过程的主要区别是代码的组织方式不同，面向过程使用函数和数据结构作为代码组织的基本单元，方法与数据分离是面向过程与面向对象的主要区别。<br><br>面向对象将类和对象作为组织代码的基本单元，更符合人的思维方式（对象与对象进行交互），使得其在大规模复杂程序的分析、设计上更加容易。面向对象的四大特性也使得程序更易用、易于扩展、易于维护。","like_count":0},{"had_liked":false,"id":156209,"user_name":"呆猫","can_delete":false,"product_type":"c1","uid":1228759,"ip_address":"","ucode":"69E256E6A19225","user_header":"https://static001.geekbang.org/account/avatar/00/12/bf/d7/9e2c8648.jpg","comment_is_top":false,"comment_ctime":1574836999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574836999","product_id":100039001,"comment_content":"操作系统本身就是和机器打交道, 是对用户指令的处理, 根据老师上面的讲解觉得用面向过程语言来开发是没有毛病的","like_count":0},{"had_liked":false,"id":156118,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1574820949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574820949","product_id":100039001,"comment_content":"不矛盾。像 Unix、Linux 这些复杂的系统，虽然都是基于 C 语言这种面向过程的编程语言开发的，但是这并不妨碍它们借鉴了面向对象的编程思想。面向对象编程并不依赖于编程语言，只不过使用面向过程编程语言实现面向对象编程的代价要大一些罢了。","like_count":0},{"had_liked":false,"id":155713,"user_name":"kkk","can_delete":false,"product_type":"c1","uid":1453027,"ip_address":"","ucode":"FB4BFD00618699","user_header":"","comment_is_top":false,"comment_ctime":1574741625,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574741625","product_id":100039001,"comment_content":"为什么系统用的是c语言，一是C语言出现早，已经是成熟的操作系统基础语言，常见操作系统都是基于C语言，而二是性能问题，C语言效率高，更适合做大系统。","like_count":0},{"had_liked":false,"id":155385,"user_name":"昵称不重要","can_delete":false,"product_type":"c1","uid":1156872,"ip_address":"","ucode":"50F0E9DC56AE3B","user_header":"https://static001.geekbang.org/account/avatar/00/11/a7/08/802cc83f.jpg","comment_is_top":false,"comment_ctime":1574684220,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574684220","product_id":100039001,"comment_content":"操作系统更偏向和机器打交道所以使用面向过程的方式","like_count":0},{"had_liked":false,"id":155312,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1428828,"ip_address":"","ucode":"1AEBD6F79941B7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","comment_is_top":false,"comment_ctime":1574677472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574677472","product_id":100039001,"comment_content":"1 历史原因，c语言发展较早 也是当时最流行编程语言<br>2 c语言更接近硬件底层技术 运行效率高 作为基础系统需要更快的执行效率 而非贴近业务的面向对象程序风格","like_count":0},{"had_liked":false,"id":154893,"user_name":"东流","can_delete":false,"product_type":"c1","uid":1738147,"ip_address":"","ucode":"2715BC6E87BD83","user_header":"https://static001.geekbang.org/account/avatar/00/1a/85/a3/7e078442.jpg","comment_is_top":false,"comment_ctime":1574593148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574593148","product_id":100039001,"comment_content":"操作系统追求的是运行效率，c语言比较起其他高级语言效率更高，c语言虽然是面向过程的编程语言，但可以面向对象编程，就像作者说的那样","like_count":0},{"had_liked":false,"id":154513,"user_name":"王硕尧","can_delete":false,"product_type":"c1","uid":1743072,"ip_address":"","ucode":"8E5ED0B869C213","user_header":"https://static001.geekbang.org/account/avatar/00/1a/98/e0/8c814c13.jpg","comment_is_top":false,"comment_ctime":1574472516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574472516","product_id":100039001,"comment_content":"一个是结构体定义ADT，配合函数指针实现，另一个是宏定义配合C预处理器抽象出平台无关的部分","like_count":0},{"had_liked":false,"id":154432,"user_name":"Tom.G","can_delete":false,"product_type":"c1","uid":1206034,"ip_address":"","ucode":"7929B45C1A51F8","user_header":"https://static001.geekbang.org/account/avatar/00/12/67/12/5c6eb568.jpg","comment_is_top":false,"comment_ctime":1574429177,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574429177","product_id":100039001,"comment_content":"1.C语言出现时间更早<br>2.C语言效率更高<br>3.C语言对硬件的支持更好","like_count":0},{"had_liked":false,"id":154388,"user_name":"zeta","can_delete":false,"product_type":"c1","uid":1255260,"ip_address":"","ucode":"AF84A72375827C","user_header":"https://static001.geekbang.org/account/avatar/00/13/27/5c/ee2a876f.jpg","comment_is_top":false,"comment_ctime":1574421067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574421067","product_id":100039001,"comment_content":"操作系统级别的应用还是要采取执行更高效的代码，但最近包括Linux团队和微软都开始尝试采取Rust来扩展新的组件，这是个可喜的事实。因为Rust除了学习成本相对高以外（但个人感觉其实还是比C++低），是一种既能满足一定的面向对象特性提升代码质量，又能达到高效执行的语言。","like_count":0},{"had_liked":false,"id":154212,"user_name":"改变自己@","can_delete":false,"product_type":"c1","uid":1582711,"ip_address":"","ucode":"87184DEA07D68B","user_header":"https://static001.geekbang.org/account/avatar/00/18/26/77/ddbad55b.jpg","comment_is_top":false,"comment_ctime":1574391370,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574391370","product_id":100039001,"comment_content":"简单来理解，不管是面向对象或者面向过程最后都是要合并到一起，然后按照顺序来存储到内存中然后等待被执行，面向过程即使分成多个文件来进行模仿面向对象的类的封装方式，也会通过预编译放到同一个文件中，然后按照对应的单线来执行。面向对象，虽然有类的封装分成不同的文件，也会通过四大特性封装，抽象，继承，多态，方便在程序的每个位置方便调用，只是给开发者提供更方便的编程方式，虽然可以在不同的地方进行交叉调用，最后大多也通过copy副本的方式，将调用的方法函数放到需要的位置，然后进行过程编程。以上是我对这两种编程的理解，有不对的地方希望老师和大家可以给予指正。我常用的是c#和Java很像，在日常的项目开发中，项目交叉调用，分块或分功能调用很多，面向对象确实非常方便，但是想要更好的编程，走的更远，底层的面向过程的编程方式是不可缺少的根基 。                     <br>       还有一点想请教一下老师，现在有一种是面向数据的编程方式，对于这种方式的学习老师有没有更好的建议，或者给一些方向，谢谢老师。","like_count":0},{"had_liked":false,"id":154165,"user_name":"heyman","can_delete":false,"product_type":"c1","uid":1173894,"ip_address":"","ucode":"92EF9EF1B1B1B3","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/86/d34800a4.jpg","comment_is_top":false,"comment_ctime":1574386322,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1574386322","product_id":100039001,"comment_content":"“基于接口的抽象，可以让我们在不改变原有实现的情况下，轻松替换新的实现逻辑，提高了代码的可扩展性”。<br><br>老师您好，这句话不太明白，可以举个栗子吗？","like_count":0,"discussions":[{"author":{"id":1082785,"avatar":"https://static001.geekbang.org/account/avatar/00/10/85/a1/2442332c.jpg","nickname":"郭俊杰","note":"","ucode":"D328E5738A4413","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":264843,"discussion_content":"可以看下前面章节，关于接口的抽象实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589351051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154024,"user_name":"马建华","can_delete":false,"product_type":"c1","uid":1185974,"ip_address":"","ucode":"928189590259AB","user_header":"https://static001.geekbang.org/account/avatar/00/12/18/b6/f3f68a39.jpg","comment_is_top":false,"comment_ctime":1574349481,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574349481","product_id":100039001,"comment_content":"课堂讨论：（菜鸟个人猜测）感觉是因为操作系统语言要优先考虑计算机本身的底层操作和管理，因此他必须要用面向过程语言使得计算机更加容易理解，同时语言不高级才能保证执行过程中，避免太多的内存消耗，更加有效率更加快速的执行","like_count":0},{"had_liked":false,"id":153990,"user_name":"小明","can_delete":false,"product_type":"c1","uid":1625618,"ip_address":"","ucode":"5A0357E9849226","user_header":"https://static001.geekbang.org/account/avatar/00/18/ce/12/1488e361.jpg","comment_is_top":false,"comment_ctime":1574343763,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574343763","product_id":100039001,"comment_content":"操作系统是与底层硬件直接交互的 使用面向过程的编程语言更高效 减少高级语言的封装 更好的控制对内存等的使用 因此对于编写代码的人的要求也更高","like_count":0},{"had_liked":false,"id":153967,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1574338155,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574338155","product_id":100039001,"comment_content":"看到一个人用Javascript写的工具，用的是面向对象，ES6支持Class。如果C这些面向过程的语言直接改造面向对象有什么难点。是不是支持class，继承就好了？","like_count":0},{"had_liked":false,"id":153731,"user_name":"莲台野夜行","can_delete":false,"product_type":"c1","uid":1441180,"ip_address":"","ucode":"B759D03BAE15C3","user_header":"https://static001.geekbang.org/account/avatar/00/15/fd/9c/54e347ed.jpg","comment_is_top":false,"comment_ctime":1574300576,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574300576","product_id":100039001,"comment_content":"个人理解，考虑到机器语言的特性，面向过程的语言更适用于机器“理解“，操作系统作为翻译人类语言给机器的“业务平台“，使用面向过程的编程语言更合理，这和给人类使用的业务系统由面向对象语言编写并不冲突。","like_count":0},{"had_liked":false,"id":153488,"user_name":"wl","can_delete":false,"product_type":"c1","uid":1392730,"ip_address":"","ucode":"45062AA2460F1F","user_header":"https://static001.geekbang.org/account/avatar/00/15/40/5a/e65e8c40.jpg","comment_is_top":false,"comment_ctime":1574244903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574244903","product_id":100039001,"comment_content":"学习笔记：<br>今天学习了面向过程编程和面向过程编程语言，面向对象编程的优点。<br>面向过程编程和面向过程编程语言的概念（与面向对象编程对比）：<br>面向对象编程以类或对象作为组织代码的单元，面向过程编程不支持类或对象。<br>面向对象编程语言有四大特性（封装、抽象、继承、多态），面向过程编程语言不支持。<br>面向对象编程的优点：<br>1. 适合大型复杂系统开发<br>2. 更易维护、扩展、复用（考虑四大特性）<br>3. 更智能、更高级<br><br>思考题：<br>不矛盾。<br>老师在文中提到，语言是在不断演进的，开发那些系统的适合，还没有面向对象编程语言，但是也是可以通过面向过程的编程语言实现面向对象编程的。","like_count":0},{"had_liked":false,"id":153312,"user_name":"GGL","can_delete":false,"product_type":"c1","uid":1215892,"ip_address":"","ucode":"AED10B8248D1E7","user_header":"https://static001.geekbang.org/account/avatar/00/12/8d/94/150dfe78.jpg","comment_is_top":false,"comment_ctime":1574213998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574213998","product_id":100039001,"comment_content":"操作系统更加注重的是性能以及与底层硬件交互，使用面向过程的C语言编写可以更加精细的控制各个功能，比如内存；如果使用面向对象编程语言控制的不会那么精细，操作系统相比不是那么流畅。尤其是之前硬件成本高昂，使用面向对象编程语言更加不可能了。","like_count":0},{"had_liked":false,"id":153193,"user_name":"James","can_delete":false,"product_type":"c1","uid":1134861,"ip_address":"","ucode":"48B0F2A334D1C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","comment_is_top":false,"comment_ctime":1574177929,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574177929","product_id":100039001,"comment_content":"还是没能深刻体会<br>如何给业务建模，如何将真实的世界映射为类或者对象，这让我们更加能聚焦到业务本身，而不是思考如何跟机器打交道","like_count":0},{"had_liked":false,"id":153188,"user_name":"hello","can_delete":false,"product_type":"c1","uid":1510495,"ip_address":"","ucode":"C6FC61A90F202B","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/5f/4cbcbfb9.jpg","comment_is_top":false,"comment_ctime":1574176984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574176984","product_id":100039001,"comment_content":"计算机最重要的部件CPU 执行指令本身就是面向过程的（因为它从通电开始第一条指令就不断地执行下一条指令，直到断电）。导致编程时，最底层用面向过程是最接地气的。如果非要抽象出类，那抱歉，CPU不认识，所以必须需要做一些工作去适配OOP语言和CPU执行指令流之间差异。这部分工作就是开销(编译或翻译的开销)。也就是说，抽象是有开销的，高级是有开销的，因为CPU本身是低级的。所以操作系统用OOP语言编写的话就会有开销。既然用面向过程的C语言加一些面向对象的思想 能应付现代操作系统的复杂性，那就能秒杀OOP语言写的操作系统。","like_count":0},{"had_liked":false,"id":153042,"user_name":"Treasure","can_delete":false,"product_type":"c1","uid":1177602,"ip_address":"","ucode":"4211ECEB347C3D","user_header":"https://static001.geekbang.org/account/avatar/00/11/f8/02/a02d127d.jpg","comment_is_top":false,"comment_ctime":1574145461,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574145461","product_id":100039001,"comment_content":"讲的真的是太好了。","like_count":0},{"had_liked":false,"id":153038,"user_name":"冬渐暖","can_delete":false,"product_type":"c1","uid":1586800,"ip_address":"","ucode":"907E41AAE9A36C","user_header":"https://static001.geekbang.org/account/avatar/00/18/36/70/00122b24.jpg","comment_is_top":false,"comment_ctime":1574144678,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574144678","product_id":100039001,"comment_content":"<br>面向过程：是指解决问题的步骤，设计一天条流水线，机械的思维方式,记得存储过程不？就是这东西<br>优点：复杂问题流程化，进而简单化<br>缺点：可拓展性差<br><br>面向对象：对象就是特征和技能的结合体<br>优点：可拓展性强(封装、抽象、继承、多态)、易维护<br>缺点：性能低(因为类调用要实例化)<br><br><br>应用场景：用户需求经常变化，互联网应用，游戏，企业内部应用<br><br>复杂业务场景的时候少用面向过程，因为面向过程是针对一条或少量线路来的，如果多的话就会绕来绕去成网状的，这个过程用那个过程，调来调去，这时候还用过程无疑是雪上加霜<br><br><br>你说的隔离机器程度越高越智能，个人认为是站在开发者角度。在一定情况下（比如性能，比如c的指针）是更好的。","like_count":0},{"had_liked":false,"id":153028,"user_name":"志振爱咋滴咋滴","can_delete":false,"product_type":"c1","uid":1237624,"ip_address":"","ucode":"E7A5049920C101","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/78/9241b7b2.jpg","comment_is_top":false,"comment_ctime":1574143051,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574143051","product_id":100039001,"comment_content":"首先理解的是如果作者所说的，面向过程的语言还处于比较接近与计算机对话的语言，所以比起面向对象来说更适合作为操作系统本身的稳定性，以及流程性开发。而面向对象更多的适用于业务开发，更多的适合人去使用。<br>同时看到评论区有些小伙伴也说了其实面向对象的思维在操作系统中也有所体现，用了一部分的封装的思想，面向对象不局限于语言，受教了。","like_count":0},{"had_liked":false,"id":153003,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1574139030,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574139030","product_id":100039001,"comment_content":"首先，Unix、Linux这些复杂系统开发出来时，面向对象编程并没有占据主流，其次，这些系统并非普通的业务系统，它们对性能的要求很高，所以用更贴近计算机的语言来更好地发挥硬件性能","like_count":0},{"had_liked":false,"id":152924,"user_name":"Paper","can_delete":false,"product_type":"c1","uid":1305388,"ip_address":"","ucode":"7EE26C2E892899","user_header":"https://static001.geekbang.org/account/avatar/00/13/eb/2c/ab72fda4.jpg","comment_is_top":false,"comment_ctime":1574124850,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1574124850","product_id":100039001,"comment_content":"操作系统对于性能要求更加极致，使用c语言更具优势。此外，Unix  和 linux 诞生时面向对象语言还不是那么流行，同时也和作者的偏好有很大的关心。","like_count":0},{"had_liked":false,"id":152851,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1574089164,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574089164","product_id":100039001,"comment_content":"1.因为当时面向对象的编程语言没有今天这么强大<br>2.都已经用C写了那么多年，作为程序员被告知要用另一种语言重写，而且没有性能上的优势，谁都不乐意啊<br>3.虽然go写的docker很6，但也是运行在Linux之上<br>4.高级语言提供了强大功能，但同时也占用了更多内存（例如Java中的包装类Integer比int更费内存）<br><br>总结：同意楼上同学说的性能问题","like_count":0},{"had_liked":false,"id":152841,"user_name":"ldd","can_delete":false,"product_type":"c1","uid":1208157,"ip_address":"","ucode":"E8344FAFFE5CF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/6f/5d/f0a19f09.jpg","comment_is_top":false,"comment_ctime":1574087505,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574087505","product_id":100039001,"comment_content":"课后思考:<br>我觉得不冲突，Unix 或Linux 操作系统选择用c 应该更多的考量是性能方面。而文章中也说了，c 虽然是面向过程编程语言，但依然可以通过设计写出易于维护、易于扩展、易于复用的代码","like_count":0},{"had_liked":false,"id":152695,"user_name":"迈向架构师","can_delete":false,"product_type":"c1","uid":1637228,"ip_address":"","ucode":"2476594CF76001","user_header":"https://static001.geekbang.org/account/avatar/00/18/fb/6c/12fdc372.jpg","comment_is_top":false,"comment_ctime":1574065161,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574065161","product_id":100039001,"comment_content":"它以过程（可以为理解方法、函数、操作）作为组织代码的基本单元<br>括号里是不是：可以|理解|为|","like_count":0},{"had_liked":false,"id":152653,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1015754,"ip_address":"","ucode":"00DF2FEC58D2E6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/ca/ea85bfdd.jpg","comment_is_top":false,"comment_ctime":1574057344,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574057344","product_id":100039001,"comment_content":"操作系统之所以用C来写，估计是比较考虑性能的要求吧；越高级的语言，由于抽象程度越高，其本省完成相同功能所实际进行的操作越多，性能相对来说就越低效","like_count":0},{"had_liked":false,"id":152585,"user_name":"scott","can_delete":false,"product_type":"c1","uid":1276032,"ip_address":"","ucode":"A3C507695AAF9D","user_header":"https://static001.geekbang.org/account/avatar/00/13/78/80/d2547579.jpg","comment_is_top":false,"comment_ctime":1574046069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574046069","product_id":100039001,"comment_content":"面向对象编程 化繁为简，分治的思想","like_count":0},{"had_liked":false,"id":152574,"user_name":"饭太司替可","can_delete":false,"product_type":"c1","uid":1171829,"ip_address":"","ucode":"9A47FCA16199B0","user_header":"https://static001.geekbang.org/account/avatar/00/11/e1/75/bbdf9052.jpg","comment_is_top":false,"comment_ctime":1574044757,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574044757","product_id":100039001,"comment_content":"这些系统需要与二进制，汇编打交道，C语言这种面向过程的语言与它们更亲近些，更类似些。","like_count":0},{"had_liked":false,"id":152566,"user_name":"程序员小跃","can_delete":false,"product_type":"c1","uid":1015483,"ip_address":"","ucode":"25BB96E0791A60","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/bb/947c329a.jpg","comment_is_top":false,"comment_ctime":1574043446,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574043446","product_id":100039001,"comment_content":"操作系统这些，重点是让我们我们需要思考，如何设计一组指令，告诉机器去执行这组指令，操作某些数据，帮我们完成某个任务。操作系统更能贴近底层，需要和底层更亲近些，而不需要太多的技巧，一步一步脚踏实地即可。<br><br>大胆想象一下，使用这种编程语言，我们可以无需对计算机知识有任何了解，无需像现在这样一行一行地敲很多代码，只需要把需求文档写清楚，就能自动生成我们想要的软件了。-----老师这句话写的真好，我之前也和小伙伴聊过，未来的发展估计就是弄个模板，让你去生成一个软件就行了，成为一个生成软件的流水工。所以，我们需要多多努力，以后可能就没饭吃了。","like_count":0},{"had_liked":false,"id":152557,"user_name":"董泽","can_delete":false,"product_type":"c1","uid":1640304,"ip_address":"","ucode":"3A9C52A40C05E7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epqhr6k2GrXDicNBGeYjzwrDfuwMaa21HRSdcKBvib1cK4E6CibvrdO1iawdzh330nRMoyobhfe3PxqVQ/132","comment_is_top":false,"comment_ctime":1574042717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574042717","product_id":100039001,"comment_content":"觉得原因是语言越高级对人越友好，反之语言越低级就对机器越友好","like_count":0},{"had_liked":false,"id":152495,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1574036524,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574036524","product_id":100039001,"comment_content":"对于我这种一开始就使用面向对象编程语言（Java）的人来说，确实是一篇扫盲的课程。","like_count":0},{"had_liked":false,"id":152443,"user_name":"小陳仔","can_delete":false,"product_type":"c1","uid":1245074,"ip_address":"","ucode":"8D5B6DB671E9FD","user_header":"https://static001.geekbang.org/account/avatar/00/12/ff/92/73d4ccd1.jpg","comment_is_top":false,"comment_ctime":1574002207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574002207","product_id":100039001,"comment_content":"个人理解：面向过程的编程语言更接近机器，执行效率高。","like_count":0},{"had_liked":false,"id":152413,"user_name":"沈康","can_delete":false,"product_type":"c1","uid":1611025,"ip_address":"","ucode":"02AFA50738AB8E","user_header":"https://static001.geekbang.org/account/avatar/00/18/95/11/eb431e52.jpg","comment_is_top":false,"comment_ctime":1573994099,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573994099","product_id":100039001,"comment_content":"打个卡吧","like_count":0},{"had_liked":false,"id":152329,"user_name":"守拙","can_delete":false,"product_type":"c1","uid":1738326,"ip_address":"","ucode":"F594B2DA3F6D4F","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/56/509535da.jpg","comment_is_top":false,"comment_ctime":1573973726,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573973726","product_id":100039001,"comment_content":"<br>结论：不矛盾。<br>Unix系统发布于20世纪70年代，Linux系统发布于1991年。而面向对象编程的流行始于20世纪90年代。<br>即Unix和Linux发布的年代要早于面向对象编程流行的年代，In other word， Unix和Linux是有&quot;年代感“的software。<br>","like_count":0},{"had_liked":false,"id":152310,"user_name":"bucher","can_delete":false,"product_type":"c1","uid":1203973,"ip_address":"","ucode":"2A482BDBA2FD12","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/05/ca9ce3e9.jpg","comment_is_top":false,"comment_ctime":1573968407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573968407","product_id":100039001,"comment_content":"c语言虽然是面向过程的编程语言，但是功力深厚的编程者同样可以利用结构体等数据结构和思想写出面向对象的代码，具有非常好的代码扩展性","like_count":0},{"had_liked":false,"id":152257,"user_name":"落叶飞逝的恋","can_delete":false,"product_type":"c1","uid":1046429,"ip_address":"","ucode":"F9A95DB28BCF1E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f7/9d/be04b331.jpg","comment_is_top":false,"comment_ctime":1573954321,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573954321","product_id":100039001,"comment_content":"首先面向对象编程与面向过程的编程的侧重点不一样，不能说哪个编程范式比较好。在对于Linux操作系统而言，其面向的本身就是计算机，只需要告诉计算机特定的指令执行代码即可。当然也可以使用面向对象的思维方式来实现。而面向对象编程是面对的是将复杂的生活场景抽象成代码，所以这时候使用面向对象编程比较好。","like_count":0},{"had_liked":false,"id":152210,"user_name":"学好习，做好人","can_delete":false,"product_type":"c1","uid":1205294,"ip_address":"","ucode":"C991643DB458E2","user_header":"https://static001.geekbang.org/account/avatar/00/12/64/2e/e70a317a.jpg","comment_is_top":false,"comment_ctime":1573915585,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573915585","product_id":100039001,"comment_content":"说白了其实还是要弄清楚3点：第一：面向对象编程与面向对象编程语言是不是一样的  第二：面向过程编程与面向过程编程语言是不是一个东西   第三：是不是使用了面向对象语言写出的代码就是面向对象编程 、是不是使用了面向过程语言编程就体现不了面向对象编程的思想<br><br><br>这几点在前几节课讲基础的时候，老师讲的很明白了，在此自己举例子自己总结说明以下：<br><br>第一：Java是一门面向对象的语言，封装，继承，多态，抽象是面向对象语言的特性，当然Java在语法上面对这四大特性也很好的支持，但是是不是我们用Java写代码了，我们就会面向对象的编程思想了，我感觉不是，在很多Java的代码中，完全没有用到这几大特性，因为没用到，所以对开闭、里氏替换、依赖倒置等设计原则没有体现过，反过来讲，我们为什么写代码需要有设计原则，为什么需要有好的设计原则，是因为业务代码的逻辑几乎不会是一成不变的，所以在变化的时候，我们应该变化仅仅需要变化的部分，而不是推倒重来，所以我们需要设计原则来建立基础的模型，需要封装、继承、多态、抽象这些支持设计原则的最基本特性<br><br>第二：C语言是一门面向过程的编程语言，但是使用c语言编程的Unix系统，我感觉体现了面向对象编程的思想比如Unix系统的驱动设计，就是面向对象编程思想的体现<br><br>最后总结来看：选用什么样的语言来实现产品，来实现业务，跟很多因素有关，个人的能力，接入的快慢，公司的要求等等。<br><br>境界到了，语言对模型建立的影响应该很小了，这句话不知道说的对不对？因为我还远远没到这个境界，自己认为的","like_count":0},{"had_liked":false,"id":152208,"user_name":"Jackey","can_delete":false,"product_type":"c1","uid":1063751,"ip_address":"","ucode":"125DE81993FEDD","user_header":"https://static001.geekbang.org/account/avatar/00/10/3b/47/f6c772a1.jpg","comment_is_top":false,"comment_ctime":1573915148,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573915148","product_id":100039001,"comment_content":"想起了上节的“绕口令”，不用面向对象语言也可以写出面向对象程序。操作系统源码应该已经做到这一点了，用面向过程语言是因为更贴近计算机，可以更好的做优化","like_count":0},{"had_liked":false,"id":152205,"user_name":"尚寂清","can_delete":false,"product_type":"c1","uid":1735856,"ip_address":"","ucode":"FA1D9D6844BC2E","user_header":"","comment_is_top":false,"comment_ctime":1573914367,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573914367","product_id":100039001,"comment_content":"操作系统这么复杂的架构必然是使用面向对象实现的","like_count":0},{"had_liked":false,"id":152190,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1573908227,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573908227","product_id":100039001,"comment_content":"据我所知linux也采用了面向对象的思想，unix时代主流编程思想应该还是面向过程吧","like_count":0},{"had_liked":false,"id":152185,"user_name":"jaryoung","can_delete":false,"product_type":"c1","uid":1077406,"ip_address":"","ucode":"6E72D107DB7E51","user_header":"https://static001.geekbang.org/account/avatar/00/10/70/9e/5095f881.jpg","comment_is_top":false,"comment_ctime":1573905867,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573905867","product_id":100039001,"comment_content":"个人觉得操作系统首选跟计算机，熟悉有不太熟悉的语言最好了。Java，go，py这些太高级了，太智能，意味着它需要吃更多的系统资源，而编写操作系统的语言不能太吃系统资源，还有就是我觉得是历史原因，C那时候是能跟计算机底层打交道，而且也能跟人打交道的最好语言。","like_count":0},{"had_liked":false,"id":152142,"user_name":"相逢是缘","can_delete":false,"product_type":"c1","uid":1060730,"ip_address":"","ucode":"CB299F53A95654","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/7a/ab6c811c.jpg","comment_is_top":false,"comment_ctime":1573890903,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573890903","product_id":100039001,"comment_content":"使用任何一个编程语言编写的程序，最终执行上都要落实到CPU一条一条指令的执行（无论通过虚拟机解释执行，还是直接编译为机器码），CPU看不到是使用何种语言编写的程序。对于所有编程语言最终目的是两种：提高硬件的运行效率和提高程序员的开发效率。然而这两种很难兼得。<br>C语言在效率方面几乎做到了极致，它更适合挖掘硬件的价值，如：C语言用数组char a[8]，经过编译以后变成了（基地址＋偏移量）的方式。对于CPU来说，没有运算比加法更快，它的执行效率的算法复杂度是O(1)的。从执行效率这个方面看，开发操作系统和贴近硬件的底层程序，C语言是极好的选择。<br>C语言带来的问题是内存越界、野指针、内存泄露等。它只关心程序飞的高不高，不关心程序猿飞的累不累。为了解脱程序员，提高开发效率，设计了OOP等更“智能”的编程语言，但是开发容易毕竟来源于对底层的一层一层又一层的包装。完成一个特定操作有了更多的中间环节, 占用了更大的内存空间, 占用了更多的CPU运算。从这个角度看，OOP这种高级语言的流行是因为硬件越来越便宜了。我们可以想象如果大众消费级的主控芯片仍然是单核600MHz为主流，运行Android系统点击一个界面需要2秒才能响应，那我们现在用的大部分手机程序绝对不是使用JAVA开发的，Android操作系统也不可能建立起这么大的生态。<br>当然linux使用C语言开发有一些历史的原因。我们可以发明一种同样快的语言，但是没有C语言那么多的坑。D语言就是这么一个语言，但是没有太多的人用！这是因为现在有太多，太多太多的C代码，他们大部分都在正常工作，就像Linux, Window, MacOS，Unix，Vxworks操作系统内核以及GNU tool都是基于C语音开发，你想让这些人去用你的全新的语言，太难了。","like_count":0},{"had_liked":false,"id":152134,"user_name":"poppy","can_delete":false,"product_type":"c1","uid":1182792,"ip_address":"","ucode":"2ED2BDF703D0D9","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/48/ba59d28d.jpg","comment_is_top":false,"comment_ctime":1573888960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573888960","product_id":100039001,"comment_content":"个人理解:<br>1.写unix和linux系统的时候，主流语言还是面向过程的C语言，当时的作者肯定会偏向用擅长和主流的语言<br>2.unix和linux系统都是与硬件打交道的系统软件，C语言效率比较高，Java等面向对象的语言效率相对比较低，效率是一个很重要的点<br>3.由于unix和linux是更多的与机器打交道的系统，更符合面向过程思维。业务系统与人打交道更多，更符合面向对象思维。","like_count":0},{"had_liked":false,"id":152117,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1241567,"ip_address":"","ucode":"C42E11098E1B38","user_header":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","comment_is_top":false,"comment_ctime":1573883636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573883636","product_id":100039001,"comment_content":"c语言的执行效率更高","like_count":0},{"had_liked":false,"id":152116,"user_name":"光光","can_delete":false,"product_type":"c1","uid":1242876,"ip_address":"","ucode":"A0F1D0134C935F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f6/fc/171c4976.jpg","comment_is_top":false,"comment_ctime":1573883014,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573883014","product_id":100039001,"comment_content":"从之前的01编程，到汇编、C（面向过程）到现在面向对象，其实是一个演化过程，从如何让机器工作，到如何让机器能更好的为人工作也是如此。现在用的unix，linux它们的硬件设计就是面向过程的设计理念，使用面向过程的语言能让机器更高效的运行；而对于人机交互、应用软件等面向对象更高效解决问题，操作系统也相应的改变。","like_count":0},{"had_liked":false,"id":152104,"user_name":"二十四桥仍在","can_delete":false,"product_type":"c1","uid":1232468,"ip_address":"","ucode":"5498FE5949190F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ce/54/c13b1d63.jpg","comment_is_top":false,"comment_ctime":1573878770,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1573878770","product_id":100039001,"comment_content":"我理解的面向对象是指，有一个User对象，不管被几个方法调用过，修改过几次，最后return User的时候，所有的修改都是生效的。方法都是针对这个对象去修改，所有的修改都生效。","like_count":0},{"had_liked":false,"id":152093,"user_name":"Beyond_JG","can_delete":false,"product_type":"c1","uid":1020825,"ip_address":"","ucode":"60CF343C35EF7C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/99/a232aa5a.jpg","comment_is_top":false,"comment_ctime":1573875802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573875802","product_id":100039001,"comment_content":"我虽然最先接触的是Basic，但是我还是个初级程序员😂😂","like_count":0},{"had_liked":false,"id":152088,"user_name":"Milittle","can_delete":false,"product_type":"c1","uid":1045455,"ip_address":"","ucode":"80E566639A8ABB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/cf/851dab01.jpg","comment_is_top":false,"comment_ctime":1573874459,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573874459","product_id":100039001,"comment_content":"面向过程更像是程序树，每一个分支都会有分叉，不同的程序路径走的是不同的任务执行。<br>面向对象更像是网络树，每一条路径都会有不同的任务执行。<br>个人认知，但是相对于面向过程来讲，我们在设计面向对象在设计的时候会比较复杂，而且对程序员的要求较高（当然不排除那些优秀的面向过程代码）","like_count":0},{"had_liked":false,"id":152084,"user_name":"个人练习生niki👍","can_delete":false,"product_type":"c1","uid":1191678,"ip_address":"","ucode":"48E5D6DE94BBBB","user_header":"https://static001.geekbang.org/account/avatar/00/12/2e/fe/5541689b.jpg","comment_is_top":false,"comment_ctime":1573873528,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573873528","product_id":100039001,"comment_content":"<br> 汇编语言是低级语言，能够直接操作硬件，并且生成机器码的效率高。但汇编对平台的依赖性强，可移植性差，开发效率低。<br>而C语言则处于二者之间，可以在多种计算机平台上编译，移植性比较好，代码效率也比较高，可以对部分硬件直接访问，语言所产生的代码运行速度与汇编语言编写的代码运行速度几乎一样，开发效率较高。<br>高级的语言效率越低,如java要满足平台无关，代码编译成字节码，需由Java虚拟机读取运行， 所以效率偏低。","like_count":0},{"had_liked":false,"id":152082,"user_name":"马什么梅","can_delete":false,"product_type":"c1","uid":1665192,"ip_address":"","ucode":"251B100AC229EE","user_header":"https://static001.geekbang.org/account/avatar/00/19/68/a8/1fa41264.jpg","comment_is_top":false,"comment_ctime":1573873213,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573873213","product_id":100039001,"comment_content":"一门语言的广泛应用依托于其特性与历史,面向过程语言例如c相较于面向对象语言例如Java 对于底层有更快的运行效率,且操作系统诞生与大规模商用时是使用的面向过程语言,利用面向对象语言对操作系统进行重写有过高的生产成本","like_count":0},{"had_liked":false,"id":152039,"user_name":"L🚲🐱","can_delete":false,"product_type":"c1","uid":1577856,"ip_address":"","ucode":"08A012739614DE","user_header":"https://static001.geekbang.org/account/avatar/00/18/13/80/2c9da1b1.jpg","comment_is_top":false,"comment_ctime":1573861695,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573861695","product_id":100039001,"comment_content":"不矛盾， 面向过程语言也能实现面向对象的编码风格","like_count":0},{"had_liked":false,"id":152020,"user_name":"teddytyy","can_delete":false,"product_type":"c1","uid":1268738,"ip_address":"","ucode":"E1569D81A4154E","user_header":"https://static001.geekbang.org/account/avatar/00/13/5c/02/e7af1750.jpg","comment_is_top":false,"comment_ctime":1573835920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573835920","product_id":100039001,"comment_content":"不矛盾啊，操作系统的业务就是跟操作机器，操作硬件，而非像我们日常业务那样映射真是世界的对象，所以用和机器指令类似的面向过程编程语言岂不是更合适一点？","like_count":0},{"had_liked":false,"id":152002,"user_name":"探索无止境","can_delete":false,"product_type":"c1","uid":1044178,"ip_address":"","ucode":"91D2A9907DFA79","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ee/d2/7024431c.jpg","comment_is_top":false,"comment_ctime":1573831261,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573831261","product_id":100039001,"comment_content":"老师每节课最后是否可以对上一节课留下的思考题谈谈您的想法，虽然留言区也有很多大神谈已经的理解，但作为读者更想听听作者的一些经验分享，这是购买专栏的初衷","like_count":0},{"had_liked":false,"id":151999,"user_name":"　扬帆丶启航　","can_delete":false,"product_type":"c1","uid":1235282,"ip_address":"","ucode":"4079D0889CD86C","user_header":"https://static001.geekbang.org/account/avatar/00/12/d9/52/73351eab.jpg","comment_is_top":false,"comment_ctime":1573830959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573830959","product_id":100039001,"comment_content":"个人认为操作系统这种对性能有要求的用C语言编写是因为C语言更接近底层，速度更快。而且，用C语言编写也可以实现面向对象风格的编程。","like_count":0},{"had_liked":false,"id":151993,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1573829780,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573829780","product_id":100039001,"comment_content":"打卡6:复习了面向过程和面向对象的区别，主要收获是再次思考了这两种编程模式的思维上的不同—面向过程思维更多的是尝试按照模块化的方法去拆解问题，但是如果问题特别复杂，这种思维模式就会应付不来—面向对象思维则将抽象层次又提高了一层，离现实中的问题域更加近了，也就可以驾驭更复杂的问题，来搭建更复杂的软件系统。面向对象思维设计好的来里的方法的设计还是使用面向过程思维，这点很有趣，值得注意。","like_count":0},{"had_liked":false,"id":151990,"user_name":"Johar","can_delete":false,"product_type":"c1","uid":1101969,"ip_address":"","ucode":"834136A6F64CDC","user_header":"https://static001.geekbang.org/account/avatar/00/10/d0/91/89123507.jpg","comment_is_top":false,"comment_ctime":1573829216,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1573829216","product_id":100039001,"comment_content":"一个原因是历史原因，另外一个c 语言强大的性能，也是操作系统语言考虑，此外面向过程的语言也可以写出面向对象的代码，而且操作系统的需求比较稳定，没有众多的需求，更多的是追求稳定性、高性能。","like_count":0},{"had_liked":false,"id":151984,"user_name":"冯将","can_delete":false,"product_type":"c1","uid":1595747,"ip_address":"","ucode":"F2EEA94129ECD1","user_header":"https://static001.geekbang.org/account/avatar/00/18/59/63/6e69883a.jpg","comment_is_top":false,"comment_ctime":1573827788,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573827788","product_id":100039001,"comment_content":"java的底层也是调用c，c++实现，代码执行效率低于c，但是它是面相对象编程语言，针对大型项目操作起来方便，而linux系统更加注重效率选择c语言，如果linux用java编写那系统就太卡了，我是这么理解的","like_count":0},{"had_liked":false,"id":151983,"user_name":"方向","can_delete":false,"product_type":"c1","uid":1261031,"ip_address":"","ucode":"CBB283D30C8C09","user_header":"https://static001.geekbang.org/account/avatar/00/13/3d/e7/e4b4afcc.jpg","comment_is_top":false,"comment_ctime":1573827378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573827378","product_id":100039001,"comment_content":"老师的每篇文章真的是深入浅出，易于理解有很有深度。看完文章，细想一下，其实现在目前编码很多时候都是用面向过程的编程方式去写业务需求，抽象能力不够，用的类也都是框架里面要求必须的，业务逻辑上按照功能分模块分文件，一个文件里有特定功能的函数，确实没有发挥面向对象编程语言的优势。希望跟着老师的节奏逐步利用起面向对象的优势。毕竟抽象越好质量肯定越高","like_count":0},{"had_liked":false,"id":151977,"user_name":"kimi","can_delete":false,"product_type":"c1","uid":1057192,"ip_address":"","ucode":"25DBF7D6859361","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/a8/1f93a764.jpg","comment_is_top":false,"comment_ctime":1573826401,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573826401","product_id":100039001,"comment_content":"1 我认为的背后推动力 Unix和Linux出现的时代计算资源并不是相对过剩的，为了提升代码的人类接受程度而去牺牲机器的运行效率是十分奢侈的一件事。<br>2 Unix和Linux的定位并不是让大部分的人去修改这个系统，而是作为一共操作系统的平台去使用，作为使用者来说更为关心在这个平台上提供的工具和能力，平台以下的细节有需求再去改造，并不影响主要受众。","like_count":0},{"had_liked":false,"id":151967,"user_name":"夕_夕","can_delete":false,"product_type":"c1","uid":1262237,"ip_address":"","ucode":"DC01246C231965","user_header":"https://static001.geekbang.org/account/avatar/00/13/42/9d/dc645c1a.jpg","comment_is_top":false,"comment_ctime":1573823804,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573823804","product_id":100039001,"comment_content":"1、底层语言更偏向机器打交道，执行更快，面向对象编程可以实现<br>2、高级语言最终还是会被翻译转换成底层语言，这个过程必然会有损效率<br>所以，并不矛盾，重在场景不同综合权益而已。","like_count":0},{"had_liked":false,"id":151946,"user_name":"旺旺","can_delete":false,"product_type":"c1","uid":1159196,"ip_address":"","ucode":"FE2CF90F446BFB","user_header":"https://static001.geekbang.org/account/avatar/00/11/b0/1c/2e30eeb8.jpg","comment_is_top":false,"comment_ctime":1573819579,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573819579","product_id":100039001,"comment_content":"Unix、Linux 这些复杂的系统，也都是基于 C 语言这种面向过程的编程语言开发的，只是因为：一方面这些系统诞生之初，面向对象语言还没有呢；另一方面C语言并不是说不能做面向对象编程，只是对编码人员的要求高，要求编程人更加自律，不像Java这种支持类的编程语言自身能从语言机制上提供更多面向对象的支持和限制。","like_count":0},{"had_liked":false,"id":151944,"user_name":"授人以🐟，不如授人以渔","can_delete":false,"product_type":"c1","uid":1193874,"ip_address":"","ucode":"BD53829E924B66","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/92/961ba560.jpg","comment_is_top":false,"comment_ctime":1573819519,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573819519","product_id":100039001,"comment_content":"并不矛盾！像这些底层的操作系统 `Unix`、`Linux` 更需要的是优秀的运行性能，况且文章也说了，面向过程的编程语言也能够写出面向对象风格的代码。也就是说，使用面向过程的编程语言也能够构建大型的软件项目，还能够保证运行性能。","like_count":0},{"had_liked":false,"id":151943,"user_name":"暝","can_delete":false,"product_type":"c1","uid":1608600,"ip_address":"","ucode":"20AE1FDFE6DD91","user_header":"https://static001.geekbang.org/account/avatar/00/18/8b/98/ddbdea57.jpg","comment_is_top":false,"comment_ctime":1573818958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573818958","product_id":100039001,"comment_content":"“JAVA底层是用C语言编写的。<br><br>而JAVA虚拟机（JVM）是用C语言和汇编语言编写的。”<br>所以物理机使用机器语言，机器语言生汇编语言，汇编语言生C语言，C语言生万物。","like_count":0},{"had_liked":false,"id":151940,"user_name":"Warn","can_delete":false,"product_type":"c1","uid":1465310,"ip_address":"","ucode":"F2F7FCDB0940D0","user_header":"https://static001.geekbang.org/account/avatar/00/16/5b/de/152f1c2c.jpg","comment_is_top":false,"comment_ctime":1573818378,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573818378","product_id":100039001,"comment_content":"个人觉得，操作系统的编写，一方面是因为这些语言出现的历史，就比如现在出现的各种框架一样，我的业务用自己发布的框架写起来更顺手；一方面是重构的成本和稳定性；还有就是语言的高级是针对对人的友好性来说的，操作系统是为了更快在机器上计算处理的。","like_count":0},{"had_liked":false,"id":151935,"user_name":"帆大肚子","can_delete":false,"product_type":"c1","uid":1529040,"ip_address":"","ucode":"3DB11DB2FA1802","user_header":"https://static001.geekbang.org/account/avatar/00/17/54/d0/4e1fc664.jpg","comment_is_top":false,"comment_ctime":1573817849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573817849","product_id":100039001,"comment_content":"不矛盾， 用面向对象可以写面向过程。<br>相反，用面向过程也可以写面向对象。<br>不过如文中所说， 付出的代价相对较大","like_count":0},{"had_liked":false,"id":151929,"user_name":"达文西","can_delete":false,"product_type":"c1","uid":1398824,"ip_address":"","ucode":"01C1063F23D634","user_header":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","comment_is_top":false,"comment_ctime":1573815945,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573815945","product_id":100039001,"comment_content":"老师赶紧更新咯,,,","like_count":0},{"had_liked":false,"id":151901,"user_name":"努力努力再努力m","can_delete":false,"product_type":"c1","uid":1644369,"ip_address":"","ucode":"9DD9E9C2988FFC","user_header":"https://static001.geekbang.org/account/avatar/00/19/17/51/3e13dc0c.jpg","comment_is_top":false,"comment_ctime":1573809751,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573809751","product_id":100039001,"comment_content":"C语言把硬件的运行效率压缩到了极致，这是java，python这些编程语言没办法比的。","like_count":0},{"had_liked":false,"id":151895,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1573807750,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573807750","product_id":100039001,"comment_content":"想知道课后题目的标准答案  \\smile","like_count":0},{"had_liked":false,"id":151881,"user_name":"大雄","can_delete":false,"product_type":"c1","uid":1371593,"ip_address":"","ucode":"4AF29A183AB495","user_header":"https://static001.geekbang.org/account/avatar/00/14/ed/c9/9abdd4c6.jpg","comment_is_top":false,"comment_ctime":1573805635,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573805635","product_id":100039001,"comment_content":"Linux属于操作系统，需要对硬件有强大的控制能力，C语言更能满足要求，比如有指针；再者，使用过程化的编程语言一样可以编写出面向对象分格的代码。","like_count":0},{"had_liked":false,"id":151851,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1573799896,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573799896","product_id":100039001,"comment_content":"感觉是操作系统都成熟以后才提出的面向对象编程。<br>另外也是由于c语言效率比较高，用新语言重写有点得不偿失","like_count":0},{"had_liked":false,"id":151841,"user_name":"humor","can_delete":false,"product_type":"c1","uid":1181867,"ip_address":"","ucode":"9B48C4C7BEC92C","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/ab/caec7bca.jpg","comment_is_top":false,"comment_ctime":1573799397,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1573799397","product_id":100039001,"comment_content":"大胆想象一下，使用这种编程语言，我们可以无需对计算机知识有任何了解，无需像现在这样一行一行地敲很多代码，只需要把需求文档写清楚，就能自动生成我们想要的软件了。<br><br>王争老师好啊，这种编程语言出现了之后，我们是不是就不用学习面向对象和设计模式了呢？那我们现在不就白学了么？☹️","like_count":0,"discussions":[{"author":{"id":1095857,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","nickname":"梦倚栏杆","note":"","ucode":"BDEB97F2822445","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186723,"discussion_content":"对，感觉就跟整理衣服差不多。衣服少的时候，都放一起，多的时候，按照一定规则分一下，整理一下子","likes_number":35,"is_delete":false,"is_hidden":false,"ctime":1582709766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1585448,"avatar":"","nickname":"花满楼","note":"","ucode":"AC8A86283088DB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1095857,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","nickname":"梦倚栏杆","note":"","ucode":"BDEB97F2822445","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579181,"discussion_content":"言简意赅👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657240440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":186723,"ip_address":""},"score":579181,"extra":""}]},{"author":{"id":1447220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia2EwyyEVs3tWRnMlqaAG7R7HvlW4vGvxthKsicgsCEeXO1qL7mMy6GAzgdkSKcH3c70Qa2hY3JLw/132","nickname":"沐夜星光","note":"","ucode":"22F699E237B179","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":248458,"discussion_content":"“如果我们非得要将 if 分支逻辑去掉，那该怎么办呢？比较经典处理方法就是利用多态”。从实现来看，去掉if分支逻辑，主要是利用了map，而多态主要提升了parser类的可扩展性。将去掉if分支逻辑和利用多态之间并无直接关系，这一点从load实现的问题中反映了出来。工厂只能是转移if分支逻辑，而无法去除。","likes_number":19,"is_delete":false,"is_hidden":false,"ctime":1587872248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2085322,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/d1/ca/b537d120.jpg","nickname":"跳跳","note":"","ucode":"332AA758394E83","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1447220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia2EwyyEVs3tWRnMlqaAG7R7HvlW4vGvxthKsicgsCEeXO1qL7mMy6GAzgdkSKcH3c70Qa2hY3JLw/132","nickname":"沐夜星光","note":"","ucode":"22F699E237B179","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297855,"discussion_content":"我刚才也这样评论了 文章的重点在讨论ifelse 感觉很多人被带跑偏了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1597072460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":248458,"ip_address":""},"score":297855,"extra":""},{"author":{"id":2335869,"avatar":"https://static001.geekbang.org/account/avatar/00/23/a4/7d/19eb8409.jpg","nickname":"明石家秋刀鱼","note":"","ucode":"B0DAC2CFECE5C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1447220,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia2EwyyEVs3tWRnMlqaAG7R7HvlW4vGvxthKsicgsCEeXO1qL7mMy6GAzgdkSKcH3c70Qa2hY3JLw/132","nickname":"沐夜星光","note":"","ucode":"22F699E237B179","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332548,"discussion_content":"是的，我看的时候还纳闷怎么利用多态去掉ifelse逻辑","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1607257740,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":248458,"ip_address":""},"score":332548,"extra":""},{"author":{"id":2335869,"avatar":"https://static001.geekbang.org/account/avatar/00/23/a4/7d/19eb8409.jpg","nickname":"明石家秋刀鱼","note":"","ucode":"B0DAC2CFECE5C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2085322,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/d1/ca/b537d120.jpg","nickname":"跳跳","note":"","ucode":"332AA758394E83","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332819,"discussion_content":"是的这篇文章聚焦于ifelse的问题，其实还有复杂对象的创建、修改也是要关注的问题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1607347722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297855,"ip_address":""},"score":332819,"extra":""}]},{"author":{"id":1015512,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","nickname":"逍遥思","note":"","ucode":"340F05C786730F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290908,"discussion_content":"哈哈，头一回有这么多人点赞，开心","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1594639195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1049235,"avatar":"https://static001.geekbang.org/account/avatar/00/10/02/93/fed4baec.jpg","nickname":"Null","note":"","ucode":"D48077EBAD2E87","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389236,"discussion_content":"“复杂度无法消除，只能被转移”，从宏观上来说一定是对的。我想此处作者更想表达的是使用者的角度，将复杂的创建过程封装在工厂内部，对外部使用者来说复杂度自然就降低了，所以作者总结时使用的是“隔离复杂性”，可以说非常精准了。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1629186984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":328443,"discussion_content":"简单工厂模式的第二种实现方式没有过多的if...else...","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1606139737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1109559,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ee/37/d94534b1.jpg","nickname":"背包工程师","note":"","ucode":"4AE7C506DFD46B","race_medal":1,"user_type":1,"is_pvip":true},"reply_author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":342156,"discussion_content":"因为if-else被转移到map#get逻辑里了，分支判断是程序基本的流程控制怎么可能被消除，只能是在&#34;可视&#34;范围内消除。","likes_number":19,"is_delete":false,"is_hidden":false,"ctime":1610600169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":328443,"ip_address":""},"score":342156,"extra":""}]},{"author":{"id":1227107,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b9/63/a3b11794.jpg","nickname":"麦抠","note":"","ucode":"875DEA26F38BAB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379001,"discussion_content":"逻辑满分 跟我想的一样","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1623584488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1486168,"avatar":"https://static001.geekbang.org/account/avatar/00/16/ad/58/7d6a0b8e.jpg","nickname":"Deep","note":"","ucode":"EF3281F0A5824A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357809,"discussion_content":"我认为工厂模式的重点是 把创建的过程打包了。这样以后修改的地方就只有一处。但是根据需求调用什么类型的工厂是无法避免的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1615871582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063308,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8c/089525aa.jpg","nickname":"小乙哥","note":"","ucode":"C77E79BEA0C325","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306678,"discussion_content":"补充一句：抽象工厂主要应对一组对象的创建问题，将某一维度基准的一批对象创建收敛到单一的工厂类当中","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1600346264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1015189,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/95/dd73022c.jpg","nickname":"我是曾经那个少年","note":"","ucode":"9F02F7FF147D14","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530432,"discussion_content":"多态+IOC容器+map就可以去掉 if else逻辑哦","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637073873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1196864,"avatar":"https://static001.geekbang.org/account/avatar/00/12/43/40/e7ef18de.jpg","nickname":"嘉一","note":"","ucode":"8D16BD0B75B019","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":230707,"discussion_content":"看了很多描述都是一些花架子，看的云里雾里，这个描述抽象的很好，读完很好的理解了简单工厂和工厂方法的联系和区别！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1586765030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1382587,"avatar":"https://static001.geekbang.org/account/avatar/00/15/18/bb/9299fab1.jpg","nickname":"Null","note":"","ucode":"A7D4DF2A43C7D8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591721,"discussion_content":"赞同复杂度不会消失，可以被转移。但是if else 会消失。简单工厂的第二种写法，其实if else 消失了。另外if else 如果不消除不在工厂里，在RuleConfigParserFactoryMap里面。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666778247,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2622364,"avatar":"https://static001.geekbang.org/account/avatar/00/28/03/9c/5a0b8825.jpg","nickname":"Bin Watson","note":"","ucode":"33E3487896E859","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556762,"discussion_content":"总结真好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647502857,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2475056,"avatar":"https://static001.geekbang.org/account/avatar/00/25/c4/30/711b03e5.jpg","nickname":"Geek_Candice","note":"","ucode":"0F2CBCF624F905","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389307,"discussion_content":"说得好!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629210790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2690172,"avatar":"","nickname":"Geek_设计模式之美","note":"","ucode":"59263416E65594","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384224,"discussion_content":"对头对头，很容易带跑偏了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626432393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206229,"avatar":"https://static001.geekbang.org/account/avatar/00/12/67/d5/1b26b725.jpg","nickname":"Gopher","note":"","ucode":"3C1F9012BB486D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":309556,"discussion_content":"工厂方法只是把复杂度转移到了对应的工厂类中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601344093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151840,"user_name":"icephobia","can_delete":false,"product_type":"c1","uid":1284212,"ip_address":"","ucode":"CD383B35994331","user_header":"https://static001.geekbang.org/account/avatar/00/13/98/74/6edfe4c1.jpg","comment_is_top":false,"comment_ctime":1573799365,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573799365","product_id":100039001,"comment_content":"第一：历史原因那个时代只有C最适合，受众最广。<br>第二：操作系统各个组件相对独立。难道硬要把网卡，硬盘等等这些硬件硬要抽象成硬件？<br>第三：C虽说不是面向对象语言，但是写代码的大牛们已经有了面向对象思想的雏形。<br>第四：感觉最重要的一点，面向对象概念不成熟的时期，可以通过分层的方式来达到与面向对象一样拥抱变化的效果。<br>","like_count":0},{"had_liked":false,"id":151834,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1573798662,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573798662","product_id":100039001,"comment_content":"我觉得不矛盾 毕竟我发现很多开源框架都是c语言写的估计是因为更接近于机器所以执行更快,但是他们都采用了面向对象的思维方式去组织代码","like_count":0},{"had_liked":false,"id":151827,"user_name":"吃饭饭","can_delete":false,"product_type":"c1","uid":1231549,"ip_address":"","ucode":"95CFA07CDA2957","user_header":"https://static001.geekbang.org/account/avatar/00/12/ca/bd/a51ae4b2.jpg","comment_is_top":false,"comment_ctime":1573797565,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573797565","product_id":100039001,"comment_content":"面向过程和面向对象只是一种语法抽象吧？不同的编码风格可能就会映射出不同的编程方式，有点牵强了","like_count":0},{"had_liked":false,"id":151825,"user_name":"нáпの゛","can_delete":false,"product_type":"c1","uid":1130666,"ip_address":"","ucode":"834FA877EFBAF7","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/aa/49bbb007.jpg","comment_is_top":false,"comment_ctime":1573797462,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573797462","product_id":100039001,"comment_content":"操作系统需要跟计算机接口打交道，需要用汇编、C等底层语言。","like_count":0},{"had_liked":false,"id":151820,"user_name":"远心","can_delete":false,"product_type":"c1","uid":1206787,"ip_address":"","ucode":"1157202C315655","user_header":"https://static001.geekbang.org/account/avatar/00/12/6a/03/cb597311.jpg","comment_is_top":false,"comment_ctime":1573796660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573796660","product_id":100039001,"comment_content":"## 为什么 Unix、Linux 是使用 C 这种面向过程编程语言开发的？<br>1. 历史原因。从二进制指令、汇编语言、面向过程编程语言、面向对象编程语言的发展历程来看，二进制指令和汇编语言由于不具备可移植性，并且不适用于开发大规模复杂程序，而 OOPL 比 POPL 出现得要晚。<br>2. Unix&#47;Linux 具备硬件管理的功能，而硬件运行的特点就是指令化、流程化，这一点与面向过程编程不谋而合。<br><br>## 我对未来编程语言的畅想<br><br>更加人性化、更加高级、更加智能，这一定是编程语言的发展方向，现在就已经出现了 AI 助力编程的消息了。<br><br>对于小争哥所想象的，根据需求规格说明书直接生成代码的编程方式。我觉得有一种方式更容易落地实现。由人类描述代码的设计思路，然后由智能化的编译器生成相应的代码。比如，人类描述 23 种设计模式，然后编译器实现。当然，由于 23 种设计模式只在一些经典问题中才会使用，所以对于一些不需要使用设计模式的编码场景，会需要使用类似的东西进行描述。我把这种编程风格称为面向思路编程。<br><br>其实，需求规格说明书也是一种表达，但是这种表达太过于接近业务。我不太相信几十年里能够做到。然而，面向思路编程是一种对于具体代码编码的描述，这种描述与业务需求描述无关。","like_count":0},{"had_liked":false,"id":151807,"user_name":"DullBird","can_delete":false,"product_type":"c1","uid":1110494,"ip_address":"","ucode":"80E2FD5F9687CB","user_header":"https://static001.geekbang.org/account/avatar/00/10/f1/de/3ebcbb3f.jpg","comment_is_top":false,"comment_ctime":1573794997,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573794997","product_id":100039001,"comment_content":"1. 我觉得面向对象是一种思维方式，之前学习DDD和&lt;Thinking in uml&gt;<br>吸收到的一点就是拿到业务需求的时候，原来是脑子里面构建出来，并且还要思考业务顺序的前后影响。<br>if(业务规约1){<br>    A do something;<br>} else if(业务规约2){<br>    B do something;<br>}<br>现在的思维方式是，看到上面的业务描述，拿出本子记录<br>这个业务里面有A对象，有一个功能say();哪些数据是归A管理的<br>这个业务里面有B对象，有一个功能hello();哪些数据是归B管理的<br>所以我觉得面向对象思维，和你用什么语言写是太直接的关系。当然会限制你的实现。比如说虚拟文件系统，<br>我觉得就是面向对象的一种体现，可以支持ext、fat32等等，就是一种继承的体现。<br><br>2.有一个问题想问一下老师:目前我接触的项目实体都是贫血模型，<br>虽然分析业务的时候，会努力向面向对象靠近，但是业务代码实现的时候。<br>基本是每个分析的对象，功能包装进一个service，但是数据还是在贫血实体内。<br>有点类似DDD的聚合根(和实际DDD思想差的比较远)，<br>但是所有实体方法都是以服务的形式提供。但是一下子换成充血模型的话，<br>对团队整体代码和一些跨n个实体的业务方法，实现起来又有问题。<br>也没太想明白这个阶段怎么样比较合适。<br>想听听老师是怎么看待这个问题的。","like_count":0},{"had_liked":false,"id":151804,"user_name":"段启超","can_delete":false,"product_type":"c1","uid":1258209,"ip_address":"","ucode":"164CF3018071B2","user_header":"https://static001.geekbang.org/account/avatar/00/13/32/e1/c9aacb37.jpg","comment_is_top":false,"comment_ctime":1573794616,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573794616","product_id":100039001,"comment_content":"这个问题从两个方面来说：<br>1. linux 等这种操作系统层级的软件，更像是一个人机交互的中间层，向下，协调计算机硬件；向上，提供交互层，运行各种应用软件，执行用户的各种操作。对操作系统来说，执行效率要求更好，需要和硬件协调，这个正是C的强项。<br>2.时间节点。Linux产生的时间比较早，那个时候，c作为一门在当时来说，还算比较高级的语言，当然也是首选。<br>面向对象和面向过程都是风格，和具体语言无关。","like_count":0},{"had_liked":false,"id":151794,"user_name":"路伴友行","can_delete":false,"product_type":"c1","uid":1506974,"ip_address":"","ucode":"96B54B7EEAEDAD","user_header":"https://static001.geekbang.org/account/avatar/00/16/fe/9e/8165b0a0.jpg","comment_is_top":false,"comment_ctime":1573792822,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573792822","product_id":100039001,"comment_content":"感觉要牵扯到Linux内核设计了...<br>要和硬件打交道的高级语言也只有c了 c++太繁重了没有c简练。<br>面相对象编程范式是一种约束 C语言完全可以做到的，结构体（ADT）+ 各种类型的指针，只能说那些巨佬太强大了！普通人根本就做不到的","like_count":0},{"had_liked":false,"id":151785,"user_name":"好吃不贵","can_delete":false,"product_type":"c1","uid":1316993,"ip_address":"","ucode":"6576E2BECE4F7C","user_header":"https://static001.geekbang.org/account/avatar/00/14/18/81/83b6ade2.jpg","comment_is_top":false,"comment_ctime":1573791683,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573791683","product_id":100039001,"comment_content":"Linux操作系统好多模块都是分层实现的。每层在实现上，都尽量和上下两层无关，比如网络模块。另外也有用operations封装回调函数进行抽象的方式。比如file_operations是对不同类型文件操作的抽象。每种类型的文件都可以有自己的read，write函数。如果是设备文件，会调用驱动的读写函数。还有其他如net_device_ops是对以太网不同设备操作的抽象。","like_count":0},{"had_liked":false,"id":151784,"user_name":"NeverMore","can_delete":false,"product_type":"c1","uid":1608843,"ip_address":"","ucode":"835B9884DFA102","user_header":"https://static001.geekbang.org/account/avatar/00/18/8c/8b/bc18b962.jpg","comment_is_top":false,"comment_ctime":1573791521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573791521","product_id":100039001,"comment_content":"操作系统底层虽然是使用面向过程编程语言开发的，但是面向对象的思想却深入其中。像是Linux Kernel，它又分成各个子系统，同时又有分离、分层的概念。比如开发一个设备的驱动，只需要分配一个对应的核心层的结构体，对结构体的成员做出该设备特定的设置即可，而设备驱动的很多方法都可以使用核心层的代码；这个过程其实就类似于面向对象编程的继承。<br>可见对于复杂的系统的开发，面向对象的风格还是远胜于面向过程的。<br>操作系统底层为何需要使用C语言，我觉得一方面是基于其效率考虑，另一方面则是为了增强在不同体系架构之间的可移植性吧，因为不同的体系架构其汇编指令是不同的，而C代码在底层可以很好的和汇编代码结合。","like_count":0},{"had_liked":false,"id":151769,"user_name":"沐夜星光","can_delete":false,"product_type":"c1","uid":1447220,"ip_address":"","ucode":"22F699E237B179","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLia2EwyyEVs3tWRnMlqaAG7R7HvlW4vGvxthKsicgsCEeXO1qL7mMy6GAzgdkSKcH3c70Qa2hY3JLw/132","comment_is_top":false,"comment_ctime":1573788262,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573788262","product_id":100039001,"comment_content":"不太理解为什么说c是更底层，更接近机器码的语言，以及效率更高的原因。同样是高级语言，同样被编译成机器码执行，是因为面向对象语言需要支持更多特性导致编译成的指令更加冗杂吗？如果不考虑效率的问题，面向对象语言对人的友好性，是不是更容易考法呢？","like_count":0},{"had_liked":false,"id":151764,"user_name":"Eden Ma","can_delete":false,"product_type":"c1","uid":1457408,"ip_address":"","ucode":"755312F0D154F9","user_header":"https://static001.geekbang.org/account/avatar/00/16/3d/00/7daa7403.jpg","comment_is_top":false,"comment_ctime":1573786860,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573786860","product_id":100039001,"comment_content":"用C写操作系统可能是因为更加接近底层性能更好？还有就是不设计业务的频繁变动业务模块变动？","like_count":0},{"had_liked":false,"id":151752,"user_name":"pines","can_delete":false,"product_type":"c1","uid":1200708,"ip_address":"","ucode":"7B925605B36B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/44/de7f2b98.jpg","comment_is_top":false,"comment_ctime":1573785299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573785299","product_id":100039001,"comment_content":"我的理解是，语言的简易性的提升伴随的是性能的丢失，网络服务可以通过增加实例来提升集群性能，但是操作系统是部署在单机上的，只能考虑高性能的语言(前三甲应该是就是C C++ RUST吧)，在linux的初期高级语言应该只有C语言吧。","like_count":0},{"had_liked":false,"id":151742,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1573783891,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573783891","product_id":100039001,"comment_content":"提问：<br>“对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结构。面向对象编程比起面向过程编程，更能应对这种复杂类型的程序开发。”<br><br>如何体现的呢？能举个例子具体说说么？","like_count":0},{"had_liked":false,"id":151739,"user_name":"bearlu","can_delete":false,"product_type":"c1","uid":1030862,"ip_address":"","ucode":"14F260C8B24E27","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/ce/fd45714f.jpg","comment_is_top":false,"comment_ctime":1573783419,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573783419","product_id":100039001,"comment_content":"越接近机器，那样语言就是越过程的语言。","like_count":0},{"had_liked":false,"id":151736,"user_name":"Lifelong Learning","can_delete":false,"product_type":"c1","uid":1173517,"ip_address":"","ucode":"3E39BED3E13FB4","user_header":"https://static001.geekbang.org/account/avatar/00/11/e8/0d/fcd95db8.jpg","comment_is_top":false,"comment_ctime":1573783118,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573783118","product_id":100039001,"comment_content":"unix,linux等操作系统更接近硬件,其实操作系统是硬件的一个映射,就和我们身体各个器官都是硬件的组成部分,但是要这些硬件动起来就得让我们的思维和思想来操控了,操作系统要想更快的操作硬件就得按照机器的语言进行编译否则反应太慢了,而编程语言是我们人类使用的,而想让我们人类更快的使用电脑和程序,那编程语言应该就要更接近人类的思维模式,说到底就是面向过程和面向对象不是完全对立,他们的出现只是为了解决不同问题,让效率更高效罢了!","like_count":0},{"had_liked":false,"id":151726,"user_name":"Young！","can_delete":false,"product_type":"c1","uid":1025221,"ip_address":"","ucode":"2A658CEFD26011","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/c5/a53f8bbc.jpg","comment_is_top":false,"comment_ctime":1573782125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573782125","product_id":100039001,"comment_content":"面向对象的思想与实践是晚于面向过程的，当时的人们最主要的需求目标是如何更好的与机器交互，而不是像现在这样需要大量业务场景，所以对于那个时候来说，面向过程思想无疑是最好最适合编写操作系统的语言。现在各种业务应用场景，如果还是面向过程偏底层的语言去实现的话，对于编程门槛以及便利性也是非常不友好的。","like_count":0},{"had_liked":false,"id":151724,"user_name":"幻月剑","can_delete":false,"product_type":"c1","uid":1120906,"ip_address":"","ucode":"44F7B62F5CB4E9","user_header":"https://static001.geekbang.org/account/avatar/00/11/1a/8a/ae50ecbb.jpg","comment_is_top":false,"comment_ctime":1573781963,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573781963","product_id":100039001,"comment_content":"Linux、Unix这类的系统，是偏底层的，这类系统是面向机器编程，对性能和对底层的掌控要求更高，面向对象的编程语言因为对人更友好，那么对于机器就不那么友好，所以依然采用面向过程编程","like_count":0},{"had_liked":false,"id":151711,"user_name":"不与三季人说","can_delete":false,"product_type":"c1","uid":1693164,"ip_address":"","ucode":"A3F03832309FDD","user_header":"https://static001.geekbang.org/account/avatar/00/19/d5/ec/3d6e7ea7.jpg","comment_is_top":false,"comment_ctime":1573780849,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573780849","product_id":100039001,"comment_content":"面向过程是偏向底层的，机器更容易理解和执行，效率更高，代码量会少很多，但是错综复杂不易理解，越底层的语言越面向过程，学习过汇编，都是直接操作内存，操作cpu，无关业务，高级的语言易扩展易维护，开发效率高，但是相对来说代码执行效率没有达到极致，很多追求极致的软件底层最终还是使用C语言写，面向过程的语言和面向对象的语言没有谁好谁坏，都是在各自发挥着自己的用武之地。","like_count":0},{"had_liked":false,"id":151699,"user_name":"梁军","can_delete":false,"product_type":"c1","uid":1521145,"ip_address":"","ucode":"81E22EFAFD77B4","user_header":"https://static001.geekbang.org/account/avatar/00/17/35/f9/7a682fc1.jpg","comment_is_top":false,"comment_ctime":1573780146,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573780146","product_id":100039001,"comment_content":"其实这些理论知识自己看是很无聊的，但却是很重要，跟着这样学效果不错，希望对后面的内容有大的支持","like_count":0},{"had_liked":false,"id":151698,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1573780056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573780056","product_id":100039001,"comment_content":"跟人打交道，就要用高级语言！省事！","like_count":0},{"had_liked":false,"id":151695,"user_name":"安静","can_delete":false,"product_type":"c1","uid":1212758,"ip_address":"","ucode":"ABF1824D24BA2F","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/56/311be282.jpg","comment_is_top":false,"comment_ctime":1573779984,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573779984","product_id":100039001,"comment_content":"个人觉得更新是一种编程习惯，各有各的好处，看你如何用好。","like_count":0},{"had_liked":false,"id":151694,"user_name":"杨景胜","can_delete":false,"product_type":"c1","uid":1005023,"ip_address":"","ucode":"1B4FB1326032B6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/55/df/6dfd3cde.jpg","comment_is_top":false,"comment_ctime":1573779968,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573779968","product_id":100039001,"comment_content":"linux系统里面大量的使用抽象，用结构体加函数指针的方式实现了类的功能，就是面向对象的方法，只是用 c 写起来不那么直观。","like_count":0},{"had_liked":false,"id":151691,"user_name":"肥而不腻","can_delete":false,"product_type":"c1","uid":1435246,"ip_address":"","ucode":"3E6786A82A6DD6","user_header":"https://static001.geekbang.org/account/avatar/00/15/e6/6e/062da5e4.jpg","comment_is_top":false,"comment_ctime":1573779633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573779633","product_id":100039001,"comment_content":"关于思考题，个人理解一个是提出时间先后，另一个是性能问题吧！","like_count":0},{"had_liked":false,"id":151686,"user_name":"狂飙的蜗牛","can_delete":false,"product_type":"c1","uid":1227358,"ip_address":"","ucode":"0F57A6F7DEF567","user_header":"https://static001.geekbang.org/account/avatar/00/12/ba/5e/a299e7d5.jpg","comment_is_top":false,"comment_ctime":1573779279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573779279","product_id":100039001,"comment_content":"我想更重要的是为了追求极致性能考虑吧","like_count":0},{"had_liked":false,"id":151678,"user_name":"往事随风，顺其自然","can_delete":false,"product_type":"c1","uid":1235692,"ip_address":"","ucode":"F266EC6B143E38","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/ec/779c1a78.jpg","comment_is_top":false,"comment_ctime":1573778832,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573778832","product_id":100039001,"comment_content":"从性能，还有操作系统运行方面cpu，c执行更快","like_count":0},{"had_liked":false,"id":151676,"user_name":"quietwater","can_delete":false,"product_type":"c1","uid":1055029,"ip_address":"","ucode":"C25E2CD356D3F9","user_header":"https://static001.geekbang.org/account/avatar/00/10/19/35/be8372be.jpg","comment_is_top":false,"comment_ctime":1573778576,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1573778576","product_id":100039001,"comment_content":"操作系统是离计算机最近的一层，都是和计算机打交道，当然面向过程更合适了。<br>如果做业务系统主要是解决业务问题，面向对象和业务更接近。<br>","like_count":0},{"had_liked":false,"id":151661,"user_name":"tt","can_delete":false,"product_type":"c1","uid":1489957,"ip_address":"","ucode":"7753B79AD5A9AC","user_header":"https://static001.geekbang.org/account/avatar/00/16/bc/25/1c92a90c.jpg","comment_is_top":false,"comment_ctime":1573777380,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573777380","product_id":100039001,"comment_content":"unix和linux是用面向对象编程思想和面向过程语言写出来的","like_count":0},{"had_liked":false,"id":151644,"user_name":"Cy23","can_delete":false,"product_type":"c1","uid":1591293,"ip_address":"","ucode":"8DC561C5151758","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/fd/895f0c27.jpg","comment_is_top":false,"comment_ctime":1573774570,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573774570","product_id":100039001,"comment_content":"c语言与汇编语言可以互转，而且面相过程更符合机器执行逻辑速度更快","like_count":0},{"had_liked":false,"id":151635,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1573773153,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573773153","product_id":100039001,"comment_content":"思考题，我觉得不矛盾。linux更加偏向于底层的操作。可能也有几十遗留问题，或者说c的执行效率更加。这都是猜想。等待其他同学详细解答。","like_count":0},{"had_liked":false,"id":151627,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1573765603,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573765603","product_id":100039001,"comment_content":"面向过程的方法，整个实现只用到函数和数据类（对象的萌芽，但思维方式上更接近于int等系统类型）。这两者把世界分成动词和名词两类。要表达主谓宾这样的结构比较费解。代码的分割也比较随意。<br>面向对象把世界重新打包，先把相关的名词和动词组成类，再定义类之间的调用，这样可以很清晰的表达主谓宾的结构。有了类的定义以后，系统分解就多了一个工具，更加适应于网状的现实世界。类提供的边界，也更适应于现实世界丰富的层次以及不同个体需要看到不同的信息。","like_count":0},{"had_liked":false,"id":151623,"user_name":"tuyu","can_delete":false,"product_type":"c1","uid":1448863,"ip_address":"","ucode":"B235325B541408","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/BIRpwViaN51yynIeFonD7QRlwDCVtKibrG956NTxzEqibOZZVjhMMgibOPmd3VicfYxpknZsic1oJq8KicZvXkmmiajuQg/132","comment_is_top":false,"comment_ctime":1573763039,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573763039","product_id":100039001,"comment_content":"深夜战斗中, 顺便追一篇","like_count":0},{"had_liked":false,"id":151614,"user_name":"WIZ","can_delete":false,"product_type":"c1","uid":1260348,"ip_address":"","ucode":"313AF84674475C","user_header":"https://static001.geekbang.org/account/avatar/00/13/3b/3c/2947127c.jpg","comment_is_top":false,"comment_ctime":1573750405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573750405","product_id":100039001,"comment_content":"打卡，思考题不太清楚，明早看大神留言。","like_count":0},{"had_liked":false,"id":151605,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1573748939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573748939","product_id":100039001,"comment_content":"linux，unix用C语言主要是历史原因吧","like_count":0}]}