{"id":473656,"title":"04 | 实战：构建一个Kotlin版本的四则运算计算器","content":"<p>你好，我是朱涛。</p><p>前面几节课，我们学了不少Kotlin的语法，也算是对Kotlin有了一个基本认识。不过，单纯只认识Kotlin是远远不够的，我们还要<strong>会用Kotlin</strong>。当遇到一个具体问题的时候，我们得能用Kotlin来解决这个问题。换句话说，就是要实战。在实战的过程中，我们对Kotlin的理解也会进一步加深。</p><p>那么这节课，我们就把前面的知识点串联起来，一起做一个Kotlin版本的计算器。为了便于理解，我会以<strong>循序渐进</strong>的方式来编写这个计算器程序，由简单到复杂。你在这个由易到难的实操过程中，可以实际体会到Kotlin的代码实现思路以及编码方式的变化，进而也就能更好地掌握和运用前面所学的基础语法，以及与面向对象相关的知识点。</p><p>这个计算器程序大致会分为三个版本：</p><ul>\n<li>计算器1.0，实现两个整数的“加减乘除”，对输入数据有严格要求。</li>\n<li>计算器2.0，对输入数据无严格要求，融入面向对象的编程思想。</li>\n<li>计算器3.0，支持“大数的加法”，增加单元测试。</li>\n</ul><p>现在，我们就开始实战吧。</p><h2>创建Kotlin工程</h2><p>如果你之前没有使用过IntelliJ或Android Studio，你可能还不知道怎么创建一个工程。别担心，这个过程其实很简单，它分为以下几个步骤。</p><!-- [[[read_end]]] --><ul>\n<li>第一步：选择菜单“File -&gt; New -&gt; Project”。</li>\n<li>第二步：选中菜单左边的“Gradle”，然后在右边勾选“Java 和 Kotlin/JVM”，最后点击右下角的“Next”。</li>\n<li>第三步：给工程取一个你喜欢的名字，我们这里就用Calculator。GroupId这个地方一般使用倒过来的域名，这里根据你的实际情况填写即可。默认情况下，IDE会自动帮你设置成“org.example”，所以你不去改动它也没问题。最后，我们点击Finish，工程就创建成功了！</li>\n<li>第四步：等待工程配置完成。<strong>如果你是第一次创建Kotlin工程，点击Finish以后，你可能需要等待一段时间，IDE需要下载Gradle，然后用Gradle下载工程所需的依赖。</strong>当你在IDE当中能看到这样的工程结构时，这个工程就算配置完成了。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/89/9f/89cyycca9830e62538528df5e62fbc9f.gif?wh=1000x750\" alt=\"图片\"></p><h2>导入初始化工程</h2><p>其实，你只需要知道如何创建一个Kotlin工程就行了，也没必要真的跟着我一步步操作。课程配套的源代码已经在<a href=\"https://github.com/chaxiu/Calculator.git\">GitHub</a>开源，你可以将其下载下来并切换到start分支，这样就可以跟着课程一步步实现计算器的三个版本了。</p><p><strong>具体做法是这样的：</strong>打开IntelliJ，点击“Get from VCS”按钮，接着在弹出的窗口中，填入我们的GitHub URL“<a href=\"https://github.com/chaxiu/Calculator.git\">https://github.com/chaxiu/Calculator.git</a>”，然后点击右下角的Clone按钮即可。</p><p><img src=\"https://static001.geekbang.org/resource/image/47/03/477cd386aa83dddb7e2ab659b433f503.gif?wh=1000x750\" alt=\"图片\"></p><p>等代码下载完成以后，IDE会问你是否要打开此工程，我们选择打开。这样，我们的计算器工程就算导入进来了。</p><p>最后，我们还需要将工程改为初始化状态，借助Git我们可以非常方便地实现：</p><ul>\n<li>在IntelliJ的右下角，找到main按钮并且点击；</li>\n<li>在弹出的菜单中，点击start分支；</li>\n<li>最后，点击Checkout，代表将当前代码切换到初始状态。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/73/a7/730f5377ef2ee6e9d8dbe9179eb849a7.png?wh=581x379\" alt=\"图片\"></p><p>这样，我们就完成了整个工程的初始化配置了。为了测试我们的开发环境是否已经配置好，我们可以打开工程里的HelloWorld文件，运行一下，看看程序是否正常执行。</p><p><img src=\"https://static001.geekbang.org/resource/image/db/1f/db316ef784abb04cd3fc87fcd9b0a31f.gif?wh=976x544\" alt=\"图片\"></p><p>如果你也能在工程当中看见控制台输出“Hello world.”，说明你的开发环境已经完全没问题了。接下来，就让我们一起用Kotlin完成计算器的1.0版本吧！</p><h2>计算器1.0</h2><p>第一个版本的计算器，它的功能非常简单，你可以看看下面的动图演示。</p><p><img src=\"https://static001.geekbang.org/resource/image/dd/10/dd01d14119706f7eeef220576dda5510.gif?wh=596x359\" alt=\"图片\"></p><p>我们大致列举一下这个计算器的功能需求：</p><ul>\n<li>交互式界面，输入算式，按下回车，程序就会帮我们计算出结果；</li>\n<li>数字与字符之间要求有空格，“1 + 1”是可以的，“1+1”则不行；</li>\n<li>输入exit，按下回车，程序就会退出；</li>\n<li>支持“加减乘除”，四种运算，仅支持两个数的运算。</li>\n</ul><p>搞清楚功能需求以后，我们就可以开始写代码了。</p><p>首先，我们要创建一个Kotlin源代码文件：在Kotlin文件夹下，点击右键，选择“New -&gt; Kotlin Class/File”，然后填写文件名字即可，这里我们创建一个名为Calculator的Kotlin文件。</p><p><img src=\"https://static001.geekbang.org/resource/image/32/19/32be58b2b1ee01ccb888yy862546d019.png?wh=815x225\" alt=\"图片\"></p><p>由于我们的程序要和命令进行交互，根据不同的命令来做出不同的行为，因此，我们的程序需要有一个 <strong>while循环</strong>的逻辑，在循环当中，还要读取命令行的输入，然后根据输入的结果来判断执行逻辑。我们可以将整个程序分为以下几个步骤：</p><ul>\n<li>初始化，打印提示信息；</li>\n<li>第一步，读取输入命令；</li>\n<li>第二步，判断命令是不是exit，如果用户输入的是“exit”则直接退出程序；</li>\n<li>第三步，解析算式，分解出“数字”与“操作符”：“1”“+”“2”；</li>\n<li>第四步，根据操作符类型，算出结果：3；</li>\n<li>第五步，输出结果：1 + 2 = 3；</li>\n<li>第六步，进入下一个while循环。</li>\n</ul><pre><code class=\"language-plain\">fun main() {\n    while(true) {\n        // 初始化，打印提示信息\n        println(\"请输入标准的算式，并且按回车; \\n\" +\n                \"比如：1 + 1，注意符合与数字之间要有空格。\\n\" +\n                \"输入exit，退出程序。\")\n\n        // 第一步，读取输入命令；\n        var input = readLine()\n        if (input == null) continue\n        // 第二步，判断命令是不是exit，如果是则直接退出程序；\n        if (input == \"exit\") exitProcess(0)\n\n        // 第三步，解析算式，分解出“数字”与“操作符”：“1”“+”“2”；\n        var inputList = input.split(\" \")\n        // 第四步，根据操作符类型，算出结果：3；\n        var result = calculate(inputList)\n\n        // 第五步，输出结果：1 + 2 = 3；\n        if (result == null) {\n            println(\"输入格式不对\")\n            continue\n        } else {\n            println(\"$input = $result\")\n        }\n\n        // 第六步，进入下一个while循环。\n    }\n}\n\n// 具体计算逻辑\nprivate fun calculate(inputList: List&lt;String&gt;): Int? {\n    if (inputList.size != 3) return null\n\n    // 第七步，取出数字和操作符\n    var left = inputList.get(0).toInt()\n    var operation = inputList.get(1)\n    var right = inputList.get(2).toInt()\n\n    // 第八步，根据操作符的类型，执行计算\n    when(operation) {\n        \"+\" -&gt; return left + right\n        \"-\" -&gt; return left - right\n        \"*\" -&gt; return left * right\n        \"/\" -&gt; return left / right\n        else -&gt; return null\n    }\n}\n</code></pre><p>上面的代码非常简单直白，即使你没有任何编程经验，应该也能够理解。它也非常符合人的编程直觉。</p><p>不过，站在Kotlin的角度上看，以上的代码其实是有不少问题的，让我们通过一个图来对比着看：</p><p><img src=\"https://static001.geekbang.org/resource/image/84/03/84cac3866e2b1e14fd3ae6dc68074a03.png?wh=1240x1016\" alt=\"图片\"></p><ul>\n<li>箭头①，表示程序中的“提示信息”应该使用Kotlin的“三引号”的原始字符串，这样的话，我们可以省去繁琐的“\\n和+”，并且所见即所得；</li>\n<li>箭头②，表示读取输入命令后，我们可以直接使用Elvis表达式，两行代码就会变成一行；</li>\n<li>箭头③，表示程序中所有的var都应该改为val，我在<a href=\"https://time.geekbang.org/column/article/472154\">第1讲</a>中说过，在Kotlin当中，我们应该优先使用val，尽量避免使用可变的变量。</li>\n<li>箭头④，表示inputList.get(i)可以改为inputList[i]，这是因为Kotlin统一了数组和集合的元素访问操作，我们再也不用担心弄混了。</li>\n<li>箭头⑤，表示了两点。首先，我们可以将return放到when表达式的前面，这样就省得我们每个分支都写一遍return。另外，当我们使用when表达式的时候，应该尽量结合“枚举”或者“密封类”来使用。为此，我们可以为“加减乘除”四个操作符创建一个枚举类。这样，when表达式的分支会自动判定完备，而不需要else分支了。</li>\n</ul><p>那么经过调整，最终的源代码应该是这样的：</p><pre><code>val help = &quot;&quot;&quot;\n--------------------------------------\n使用说明：\n1. 输入 1 + 1，按回车，即可使用计算器；\n2. 注意：数字与符号之间要有空格；\n3. 想要退出程序，请输入：exit\n--------------------------------------&quot;&quot;&quot;.trimIndent()\n\nfun main() {\n    while (true) {\n        println(help)\n\n        val input = readLine() ?: continue\n        if (input == &quot;exit&quot;) exitProcess(0)\n\n        val inputList = input.split(&quot; &quot;)\n        val result = calculate(inputList)\n\n        if (result == null) {\n            println(&quot;输入格式不对&quot;)\n            continue\n        } else {\n            println(&quot;$input = $result&quot;)\n        }\n    }\n}\n\nprivate fun calculate(inputList: List&lt;String&gt;): Int? {\n    if (inputList.size != 3) return null\n\n    val left = inputList[0].toInt()\n    //                           ①\n    //                           ↓\n    val operation = Operation.valueOf(inputList[1])\n    val right = inputList[2].toInt()\n\n    return when (operation) {\n        Operation.ADD -&gt; left + right\n        Operation.MINUS -&gt; left - right\n        Operation.MULTI -&gt; left * right\n        Operation.DIVI -&gt; left / right\n    }\n}\n\nenum class Operation(val value: String) {\n    ADD(&quot;+&quot;),\n    MINUS(&quot;-&quot;),\n    MULTI(&quot;*&quot;),\n    DIVI(&quot;/&quot;)\n}\n</code></pre><p>好，我们的计算器1.0版本，到这里就算是完成了。</p><p>如果你跟随着我，一起来实现了这个简单的计算器，那么你在这个实操过程中就可以体会到，Kotlin编程与传统的Java/C之间确实是存在着一定的差别的。</p><p><strong>想要学会Kotlin语法其实不难，但要写出优雅的Kotlin代码，却不是一件容易的事情。</strong>我们唯一能做的，就是多写Kotlin代码，同时多看优秀的Kotlin代码，以及多思考改进自己已有的代码。</p><p>不过，代码中注释①处其实还有一些问题，接着让我们进入第二个版本的开发吧！</p><h2>计算器2.0</h2><p>在2.0版本中，我们会分成两个阶段：</p><ul>\n<li>第一个阶段，<strong>融入面向对象的思想</strong>。1.0版本中，我们只写了两个函数，一个是main()函数，另一个是calculate()函数。虽然这样的设计非常直观且便于理解，但却不太符合我们工程界的思维习惯。我们应该将程序封装到一个类当中，并且尽量让每个函数的功能划分清楚，保持每个函数尽量简单。</li>\n<li>第二个阶段，<strong>兼容输入格式</strong>。1.0版本中，我们对输入有严格的要求，数字和符号之间必须有空格，否则我们的算式解析会出错。在2.0版本中，我们尝试兼容不同的输入格式，不管数字和符号之间有没有空格，我们都要能成功执行。</li>\n</ul><p>让我们一步步来，首先是融入面向对象的思想。</p><h3>第一阶段：融入面向对象思想</h3><p>具体做法其实也很简单，我们可以将前面定义的两个函数收拢到一个类当中去，比如“CalculatorV2”：</p><pre><code class=\"language-plain\">class CalculatorV2 {\n    fun start() {}\n    fun calculate(input: String): Int? {}\n}\n</code></pre><p>可以看到，在这个CalculatorV2类当中有两个方法，<strong>start()</strong> 用于启动我们的计算器程序，监听控制台的文本输入；<strong>calculate(input)</strong> 用于接收输入文本，计算出算式的结果，然后返回一个可为空的整型，当输入不合法的时候会返回null。</p><p>这样，我们的计算器作为一个整体已经是一个对象了，我们可以很方便地在main()函数当中，创建一个实例，并且调用它的start()函数。这样一来，我们的计算器也就可以充分发挥出面向对象的优势。</p><pre><code class=\"language-plain\">fun main() {\n    val calculator = CalculatorV2()\n    calculator.start()\n}\n</code></pre><p>除了计算器本身需要面向对象，我们的输入表达式也可以抽象出一个具体模型出来。</p><p>我们知道，一个算式分为左边的数字、操作符和右边的数字。因此我们还可以定义一个类，来代表算式表达式。</p><pre><code class=\"language-plain\">data class Expression(\n    val left: String,\n    val operator: Operation,\n    val right: String\n)\n</code></pre><p>比如，我们想要表达“1 + 2”这个式子的话，我们就可以用这样一个结构来表示：</p><pre><code class=\"language-plain\">Expression(\"1\", Operation.ADD, \"2\")\n</code></pre><p>那么，在完成了面向对象的模型化以后，我们还需要进一步拆分函数的职责与颗粒度。其中，start()方法，主要用于控制程序的流程、输入与输出：</p><pre><code class=\"language-plain\">fun start() {\n    while (true) {\n        println(HELP)\n        val input = readLine() ?: continue\n        val result = calculate(input)\n        if (result == null) {\n            println(\"输入格式不对\")\n            continue\n        } else {\n            println(\"$input = $result\")\n        }\n    }\n}\n</code></pre><p>而calculate()方法，则需要进一步地拆分：</p><pre><code class=\"language-plain\">fun calculate(input: String): String? {\n    if (shouldExit(input)) exitProcess(0)\n    val exp = parseExpression(input) ?: return null\n    val left = exp.left\n    val operator = exp.operator\n    val right = exp.right\n    return when (operator) {\n        Operation.ADD -&gt; addString(left, right)\n        Operation.MINUS -&gt; minusString(left, right)\n        Operation.MULTI -&gt; multiString(left, right)\n        Operation.DIVI -&gt; diviString(left, right)\n    }\n}\n\nfun addString(left: String, right: String): String {\n    val result = left.toInt() + right.toInt()\n    return result.toString()\n}\nfun minusString(left: String, right: String): String {\n    val result = left.toInt() - right.toInt()\n    return result.toString()\n}\nfun multiString(left: String, right: String): String {\n    val result = left.toInt() * right.toInt()\n    return result.toString()\n}\nfun diviString(left: String, right: String): String {\n    val result = left.toInt() / right.toInt()\n    return result.toString()\n}\n\nfun shouldExit(input: String): Boolean {\n    return input == EXIT\n}\n\nfun parseExpression(input: String): Expression? {\n    // 待完成\n}\n\nfun parseOperator(input: String): Operation? {\n    // 待完成\n}\n</code></pre><p>通过以上代码可以看到，我们拆分calculate()方法主要做了三件事：</p><ul>\n<li>第一，<strong>将“是否退出”的逻辑封装到了shouldExit()方法当中</strong>，如果将来这部分逻辑变得更复杂，我们只改动这一个方法即可。</li>\n<li>第二，<strong>将算式的解析，封装到了parseExpression()方法当中</strong>，而解析算式的时候也需要解析操作符，这时候我们也需要parseOperator()。</li>\n<li>第三，<strong>将具体的计算逻辑交给了对应的方法</strong>。这么做的原因，是可以让我们的程序变得更加灵活。比如，我们在下个版本当中会更改“加法”的计算逻辑，那么我们就只需要改动这一个方法就行了。</li>\n</ul><p>同时，以上所有独立抽出来的方法，它们也都将变得<strong>可测试</strong>，这有利于提升程序的稳定性。</p><p>到这里，我们对计算器2.0的第一阶段改造就差不多完成了，我们融入了面向对象的思想，也对calculate()方法进行了更细颗粒度的拆分。下一步，我们要做的就是兼容算式的格式，让它能够解析没有空格的算式。</p><h3>第二阶段：兼容输入格式</h3><p>现在，假设我们的输入是“1+2”，数字与字符之间没有空格。那在这种情况下，我们就无法使用空格作为分隔符了。所以要换一种方式，想办法从算式当中，解析出操作符“加减乘除”中的一种，然后再用操作符作为我们的分隔符去找出数字。</p><p>其实，因为操作符只有这四种情况，所以我们很容易就能想到一种方案，一个个去尝试：</p><pre><code class=\"language-plain\">fun parseOperator(input: String): Operation? {\n    return when {\n        input.contains(Operation.ADD.value) -&gt; Operation.ADD\n        input.contains(Operation.MINUS.value) -&gt; Operation.MINUS\n        input.contains(Operation.MULTI.value) -&gt; Operation.MULTI\n        input.contains(Operation.DIVI.value) -&gt; Operation.DIVI\n        else -&gt; null\n    }\n}\n</code></pre><p>虽然，这段代码运行起来没什么问题，逻辑也非常得清晰，但它看起来很丑陋。而且它还有一个坏处：随着枚举类型的增多，我们的逻辑分支也会增多，手动添加起来也特别麻烦。</p><p>因此这种情况，我们就应该充分借助 <strong>Kotlin枚举</strong>的优势，通过遍历的方式来做：</p><pre><code class=\"language-plain\">fun parseOperator(input: String): Operation? {\n    Operation.values().forEach {\n        if (input.contains(it.value)) {\n            return it\n        }\n    }\n    return null\n}\n</code></pre><p>可以看到，优化后的代码中，我们不再需要手动地去写when的逻辑分支，也不必自己去枚举Operation的每一种情况，就连代码量也降低了很多，即使将来枚举种类增加了，我们也不必修改这部分代码了。</p><p>需要注意，以上的代码中，我们用到了集合遍历的语法“forEach”，你可以将它想象成强化版的for循环，它具体的用法我会在后面“Kotlin集合”那一节中讲解。</p><p>现在，对于一个算式“1+2”，我们已经可以成功解析出操作符“+”了，接下来要做的，就是通过“+”来分割字符串，将左右两个数字取出来“1”“2”。这个逻辑就很简单了：</p><pre><code class=\"language-plain\">fun parseExpression(input: String): Expression? {\n    // 解析操作符\n    val operation = parseOperator(input) ?: return null\n    // 用操作符分割算式，拿到数字\n    val list = input.split(operation.value)\n    if (list.size != 2) return null\n\n    return Expression(\n        // 算式左边\n        left = list[0].trim(),\n        operator = operation,\n        // 算式右边\n        right = list[1].trim()\n    )\n}\n</code></pre><p>以上代码大致分为三个步骤，我们以“1+2”为例：</p><ul>\n<li>第一个步骤，调用parseOperator()方法解析操作符“+”；</li>\n<li>第二个步骤，根据操作符分割算式的数字，分割之后得到的会是“1”“2”组成的列表；</li>\n<li>第三个步骤，将操作符、数字组合成Expression对象。</li>\n</ul><p>这里有一个细节需要注意，我们兼容的输入其实有两种情况，第一种是<strong>不包含空格</strong>“1+2”，那么我们解析出来的数字会是“1”“2”，这种情况下不会有问题；但还有第二种情况<strong>包含空格</strong>，对于原本正确的格式，我们更应该支持，比如“1 + 2”，被分隔之后的结果会是“1 ”“2”，这两个数字当中是包含空格符的。</p><p>所以，我们使用了<code>list[0].trim()</code>，这里的<code>trim()</code>方法就是用于去掉多余空格的。</p><p>让我们实际运行一下看看效果：</p><p><img src=\"https://static001.geekbang.org/resource/image/ce/b2/ce2c6debc469a274d7d0a6fd488978b2.gif?wh=852x452\" alt=\"图片\"></p><p>至此，我们的计算器2.0版本就完成了。在2.0版本的实操过程中，我们其实是在原有的基础上，融入了面向对象的思想，将计算器功能收拢到了一个类当中，同时也对计算器内部的方法进行了细颗粒度的拆分。</p><p>在这个过程中，我们创建了三个类：“Calculator”类，代表整个计算器；“Operation”枚举类，代表加减乘除四种运算操作符；“Expression”数据类，代表我们算式当中的数字和操作符。之后，我们又对计算器的核心功能进行了更细颗粒度的拆分，提高了程序的灵活性，为我们的功能扩展打下了基础。</p><p>好了，现在让我们进入3.0版本的开发吧。</p><h2>计算器3.0</h2><p>针对3.0这个版本，我们也分为了两个阶段：</p><ul>\n<li>第一阶段，<strong>增加单元测试</strong>。单元测试是软件工程当中的一个概念，它指的是对软件当中的最小可执行单元进行测试，以提高软件的稳定性。在Java当中，最小单元一般会认为是类，因此，我们一般会以类为单元，对类当中的方法进行一一测试。</li>\n<li>第二阶段，<strong>支持大数的加法</strong>。我们知道Java、Kotlin当中的整型都是有范围限制的，如果我们输入两个特别大的数字进行计算，那么程序是无法正常工作的。因此，我们需要对特别大的数进行兼容。</li>\n</ul><p>下面，我们先来搞定单元测试。</p><h3>第一阶段：单元测试</h3><p>在Kotlin当中，如果要使用单元测试，我们需要在gradle文件当中，添加Kotlin官方提供的依赖：</p><pre><code class=\"language-plain\">testImplementation 'org.jetbrains.kotlin:kotlin-test'\n</code></pre><p>这样，我们的工程就拥有单元测试的能力了。单元测试的代码，我们一般会放在工程的test目录下：</p><p><img src=\"https://static001.geekbang.org/resource/image/c3/1f/c305f53c828d94e671f7e89267c2111f.png?wh=395x629\" alt=\"图片\"></p><p>我们可以从这个图中看出很多信息：</p><ul>\n<li>第一，test目录、main目录，它们是平级的目录，内部拥有着相同的结构。main目录下放的是功能代码，test目录下放的则是测试代码。</li>\n<li>第二，由于我们要开发3.0版本，所以我们在main目录下创建了CalculatorV3这个类；另外，由于我们需要在3.0版本加入单元测试，所以对应的，我们在test目录下相同的地方，创建了TestCalculatorV3。这两个类的关系是一一对应的，CalculatorV3是为了实现3.0版本的功能，TestCalculatorV3是为了测试3.0版本的功能，确保功能正常。</li>\n</ul><p>不过这里你要<strong>注意</strong>，虽然我们创建了CalculatorV3这个类，但其实它里面的代码还是用的CalculatorV2的代码。3.0版本的功能，我们放到第二阶段才会去实现。</p><p>接下来，让我们来编写测试代码：</p><pre><code class=\"language-plain\">class TestCalculatorV3 {\n    @Test\n    fun testCalculate() {\n        val calculator = CalculatorV3()\n\n        val res1 = calculator.calculate(\"1+2\")\n        assertEquals(\"3\", res1)\n    }\n}\n</code></pre><p>首先，我们定义了一个方法testCalculate()，并且使用了一个注解@Test来修饰它。因为这样做以后，IntelliJ就会知道：哦，这是一个用来做测试的方法。</p><p>接着，我们在testCalculate()当中创建了一个CalculatorV3的对象，然后调用了它的calculate()方法，传入了“1+2”。我们知道，如果程序正常工作的话，返回的结果应该是“3”。因此，我们紧接着就执行了一个<strong>断言</strong>“assertEquals(“3”, res1)”，它的意思是“res1一定等于3”。如果res1=3，那么我们的单元测试就会成功，否则就会失败。</p><p>我们可以看看单元测试运行成功的效果：</p><p><img src=\"https://static001.geekbang.org/resource/image/b1/b1/b1c48ab4dd9c900bc3ee2e020da187b1.gif?wh=1348x960\" alt=\"图片\"></p><p>如果这时候，我们将“1+2”改成大数的加法，比如“2333333333333332+1”，并且将断言也修改一下：</p><pre><code class=\"language-plain\">val res1 = calculator.calculate(\"2333333333333332+1\")\nassertEquals(\"2333333333333333\", res1)\n</code></pre><p>那么，你觉得单元测试的结果会是怎么样的呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/b9/bc/b968fc9666cefc95545cd022e7a523bc.gif?wh=1348x960\" alt=\"图片\"></p><p>单元测试失败了！</p><p>具体原因相信你一定也能猜到，因为“2333333333333332”这个数实在太大了，已经远远超出了Int类型的范围，如果不做特殊处理的话，我们的程序是无法正常运行的。而这正好就是我们下一个阶段要做的事情：支持大数的加法。不论多大的两个数字相加，我们都要算出正确的结果。</p><p>这个单元测试的代码我们先留着，等我们实现“大数的加法”后，我们再重新运行一遍，这样一来，我们就可以借此验证代码是否正确。</p><h3>第二阶段：大数加法</h3><p>大数的加法，其实是我们程序员面试当中的一道高频题。它的解题思路也很简单，就是通过模拟我们<strong>手写加法竖式</strong>的方法，从个位、十位、百位、千位，一直累加，超过10的时候，我们需要进位。</p><p>我们以“135+99”为例：</p><p><img src=\"https://static001.geekbang.org/resource/image/f7/83/f777d39dd91641f5fb0b58a43e9bfc83.gif?wh=405x434\" alt=\"图片\"></p><p>从上面的手写加法竖式的过程我们可以看出，这个计算其实就是分了三个步骤在进行，分别是个位、十位、百位：</p><ul>\n<li>个位计算，“5+9=14”，出现进位，这时候我们用carry来存储进位：carry=1，个位结果为4；</li>\n<li>十位计算，十位相加“3+9=12”，由于之前有过进位，所以应该是“3+9+1=13”，十位结果为3；</li>\n<li>百位计算，由于99不存在百位，我们自动补零，所以就应该是“1+0+1=2”，百位结果为2。</li>\n</ul><p>最终，我们将每一位的结果拼接起来，就得到了最终的结果。有了这样的思路后，我们的代码就很容易实现了。</p><pre><code class=\"language-plain\">fun addString(leftNum: String, rightNum: String): String {\n    // ①\n    val result = StringBuilder()\n    // ②\n    var leftIndex = leftNum.length - 1\n    var rightIndex = rightNum.length - 1\n    // ③\n    var carry = 0\n\n    // ④\n    while (leftIndex &gt;= 0 || rightIndex &gt;= 0) {\n        // ⑤\n        val leftVal = if (leftIndex &gt;= 0) leftNum.get(leftIndex).digitToInt() else 0\n        val rightVal = if (rightIndex &gt;= 0) rightNum.get(rightIndex).digitToInt() else 0\n        val sum = leftVal + rightVal + carry\n        // ⑥\n        carry = sum / 10\n        result.append(sum % 10)\n        leftIndex--\n        rightIndex--\n    }\n    // ⑦\n    if (carry != 0) {\n        result.append(carry)\n    }\n\n    // ⑧\n    return result.reverse().toString()\n}\n</code></pre><p>上面的代码一共有8处注释，代表了整体的程序流程，让我们一步步来分析：</p><ul>\n<li>注释①，我们<strong>创建了一个StringBuilder对象，</strong>用于存储最终结果，由于我们的结果是一位位计算出来的，所以每一位结果都是慢慢拼接上去的，在这里，为了提高程序的性能，我们选择使用StringBuilder。</li>\n<li>注释②，我们<strong>定义了两个可变的变量index</strong>，它们分别指向了两个数字的个位，这是因为我们的计算是从个位开始的。</li>\n<li>注释③，<strong>carry</strong>，我们用它来存储每一位计算结果的进位。</li>\n<li>注释④，这个 <strong>while循环</strong>当中，我们会让两个index从低位一直到高位，直到遍历完它们所有的数字位。</li>\n<li>注释⑤，这里的逻辑是<strong>取每一位上的数字</strong>，其中有个细节就是补零操作，比如当程序运行到百位的时候，99没有百位，这时候rightVal = 0。</li>\n<li>注释⑥，当我们的程序计算出结果后，我们要<strong>分别算出carry，以及当前位的结果</strong>。这时候我们分别使用“除法”计算carry，使用“取余”操作计算当前位的结果。</li>\n<li>注释⑦，这里是<strong>为了兼容一个特殊的场景</strong>，在“99+1”的情况下，我们的while循环最多只会遍历到十位，如果不做特殊处理的话，结果将变成“99+1=00”。这并不是我们想要的，所以，为了兼容这种特殊情况，我们<strong>在while循环结束后增加了一个判断</strong>，如果carry=1，那就说明在最大的那一位数计算完以后，仍然有进位，我们要手动添加。</li>\n<li>注释⑧，对于一个算式“135+99”，我们的result拼接其实是倒叙的“432”，这时候我们需要<strong>将其翻转</strong>一下，才能得到正确的结果“135+99=234”。</li>\n</ul><p>到这里，我们的大数加法功能，就算实现了。让我们回过头，再去运行一次单元测试，来验证下我们的代码是否正确：</p><p><img src=\"https://static001.geekbang.org/resource/image/4d/eb/4dd2dyyf2b31cd5379a7134b0f6822eb.gif?wh=1348x960\" alt=\"图片\"></p><p>果然，在我们兼容了“大数加法”以后，单元测试就可以成功通过了。至此，我们的计算器3.0版本就算是完成了。</p><p>在这个版本的开发过程中，首先我们引入了单元测试，通过这种方式，我们可以测试代码逻辑是否正确，并可以辅助我们排查问题。接着，我们写了一个“2333333333333332+1”的测试用例，并且失败了，不过在完成大数加法的功能后，这个测试也最终通过了。</p><p>这里我需要特殊说明的是，为了不偏离本次实战课的目的，我们的单元测试只写了两个，但在实际的开发工作当中，单元测试是需要尽量覆盖所有情况的。换句话说，仅仅只是测试“1+2”“2333333333333332+1”这两种情况，是无法保证我们的计算器逻辑正确的。一般来说，一个应用于商业的计算器，它的单元测试用例数量会达到几百上千个。</p><h2>小结</h2><p>到这里，我们就通过完成三个不同版本的四则运算计算器，一起梳理了前面课程中，学习的那些重要的Kotlin的知识点，比如不可变的变量val、when表达式、数据类、枚举类，等等。并且也在实操过程中，一起思考了代码实现时可能会出现的问题。</p><p>你也可以在动手操作的过程中，具体感受下跟Java代码的不同，同时也看看自己的思路与课程的思路有什么不同，课程当中的代码还有哪些可以改进的地方。</p><p>最后我想让你注意的是，在3.0版本中，我们引入了<strong>单元测试功能</strong>。实际上，单元测试的作用，不仅仅可以验证新开发的功能，同时它还可以用于保证旧的功能不受影响。在实际开发工作中，我们很容易因为对功能A的改动，导致功能B出问题。然后往往由于时间限制，测试人员只测试了功能A，忽略了功能B，最终导致线上故障带来经济损失。</p><p>而借助单元测试，在每一次的开发工作完成以后，我们就统一跑一遍所有的单元测试，只要单元测试通过了，我们就能保证，新的功能没问题，而旧的功能也没问题。</p><h2>动手实操</h2><p>在3.0版本的开发当中，我们仅仅只实现了“大数的加法”，其余的“大数的减法”“大数的乘法”“大数的除法”都没有实现。请你挑其中一个功能，尝试自己实现，参考答案我会在之后放出来。</p><p>欢迎你在评论区分享你的实现思路，我们下节课再见。</p>","comments":[{"had_liked":false,"id":329290,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1641269953,"is_pvip":true,"replies":[{"id":"119949","content":"赞！","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641304114,"ip_address":"","comment_id":329290,"utype":1}],"discussion_count":4,"race_medal":0,"score":"109015452353","product_id":100103401,"comment_content":"val left = exp.left<br>val operator = exp.operator<br>val right = exp.right<br><br>是不是可以写成<br><br>val (left, operator, right) = exp","like_count":25,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543799,"discussion_content":"赞！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641304114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1130136,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKhhu1P5vUiagyT97qwPyNTcuIBE0b325DKIkBfeI0Xr6gyUZC7aWA1qP6IJicReEfqpv1wxylwbJzA/132","nickname":"wangfeng","note":"","ucode":"AF482A43D19040","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579680,"discussion_content":"const {a,b,c} =object \n前端解构是花括号","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657612678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1057332,"avatar":"https://static001.geekbang.org/account/avatar/00/10/22/34/580cdde0.jpg","nickname":"yalda","note":"","ucode":"1F782AB65DC0AA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571049,"discussion_content":"这种解构写法前端比较熟悉，Java 转过来的，需要适应一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652062201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014603,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/4b/95812b15.jpg","nickname":"抱紧我的小鲤鱼","note":"","ucode":"139780FB860FA3","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561498,"discussion_content":"解构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649649370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329345,"user_name":"王玉朋","can_delete":false,"product_type":"c1","uid":1187207,"ip_address":"","ucode":"A95CFA8233FFCA","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/87/14e6475a.jpg","comment_is_top":false,"comment_ctime":1641294781,"is_pvip":false,"replies":[{"id":"119942","content":"用PPT的动画一帧一帧做的。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641303783,"ip_address":"","comment_id":329345,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23116131261","product_id":100103401,"comment_content":"老师，135+99的加法竖式动画图是用什么做的？","like_count":5,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543790,"discussion_content":"用PPT的动画一帧一帧做的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641303783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332750,"user_name":"苍王","can_delete":false,"product_type":"c1","uid":1621978,"ip_address":"","ucode":"92F4A7513AF228","user_header":"https://static001.geekbang.org/account/avatar/00/18/bf/da/fede41ea.jpg","comment_is_top":false,"comment_ctime":1643543981,"is_pvip":true,"replies":[{"id":"121630","content":"代码写的很不错，思路也比较清晰，只是还有一些边界条件没注意好。<br><br>能提供单元测试的代码也很不错，不过测试的case覆盖的不是很全面，比如说：&quot;91-98&quot;的情况，就会测试失败。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1643591276,"ip_address":"","comment_id":332750,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10233478573","product_id":100103401,"comment_content":"private fun minusString(left: String, right: String): String {<br>        val result = StringBuilder()<br><br>        &#47;&#47;判断是否结果位负数<br>        val isMinus = (left.length &lt; right.length || left.length == right.length &amp;&amp; left[0] &lt; right[0])<br><br>        var leftIndex = left.length - 1<br>        var rightIndex = right.length - 1<br>        var _left = left<br>        var _right = right<br>        if (isMinus) {<br>            _left = right<br>            _right = left<br>            leftIndex = _left.length - 1<br>            rightIndex = _right.length - 1<br>        }<br><br>        var carry = 0<br>        while (leftIndex &gt;= 0 || rightIndex &gt;= 0) {<br>            val leftVal = if (leftIndex &gt;= 0) _left[leftIndex].digitToInt() else 0<br>            val rightVal = if (rightIndex &gt;= 0) _right[rightIndex].digitToInt() else 0<br>            var sum: Int<br>            if (leftVal - rightVal &lt; 0) {<br>                sum = leftVal - rightVal + 10 + carry<br>                carry = -1<br>            } else {<br>                sum = leftVal - rightVal + carry<br>                carry = 0<br>            }<br>            result.append(sum)<br>            leftIndex--<br>            rightIndex--<br><br>        }<br><br>        if (isMinus) {<br>            result.append(&quot;-&quot;)<br>        }<br><br>        return result.reverse().toString()<br>    }<br><br><br> @Test<br>    fun testCalculateMinus1() {<br>        val calculatorV = CalculatorV3()<br><br>        val result = calculatorV.calculate(&quot;90-1&quot;)<br>        assertEquals(&quot;89&quot;, result)<br>    }<br><br>    @Test<br>    fun testCalculateMinus2() {<br>        val calculatorV = CalculatorV3()<br><br>        val result = calculatorV.calculate(&quot;1-9&quot;)<br>        assertEquals(&quot;-8&quot;, result)<br>    }<br><br>    @Test<br>    fun testCalculateMinus3() {<br>        val calculatorV = CalculatorV3()<br><br>        val result = calculatorV.calculate(&quot;233333333333333333333-1&quot;)<br>        assertEquals(&quot;233333333333333333332&quot;, result)<br>    }","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549122,"discussion_content":"代码写的很不错，思路也比较清晰，只是还有一些边界条件没注意好。\n\n能提供单元测试的代码也很不错，不过测试的case覆盖的不是很全面，比如说：&#34;91-98&#34;的情况，就会测试失败。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643591276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1621978,"avatar":"https://static001.geekbang.org/account/avatar/00/18/bf/da/fede41ea.jpg","nickname":"苍王","note":"","ucode":"92F4A7513AF228","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549269,"discussion_content":"做了两处修改，大小判断和除0\nprivate fun minusString(left: String, right: String): String {\n        val result = StringBuilder()\n\n        //判断是否结果位负数\n        val isMinus = left &lt; right\n\n        var leftIndex = left.length - 1\n        var rightIndex = right.length - 1\n        var _left = left\n        var _right = right\n        if (isMinus) {\n            _left = right\n            _right = left\n            leftIndex = _left.length - 1\n            rightIndex = _right.length - 1\n        }\n\n        var carry = 0\n        while (leftIndex &gt;= 0 || rightIndex &gt;= 0) {\n            val leftVal = if (leftIndex &gt;= 0) _left[leftIndex].digitToInt() else 0\n            val rightVal = if (rightIndex &gt;= 0) _right[rightIndex].digitToInt() else 0\n            var sum: Int\n            if (leftVal - rightVal &lt; 0) {\n                sum = leftVal - rightVal + 10 + carry\n                carry = -1\n            } else {\n                sum = leftVal - rightVal + carry\n                carry = 0\n            }\n            result.append(sum)\n            leftIndex--\n            rightIndex--\n\n        }\n        //去掉末尾0\n        while (result.last().digitToInt() == 0) {\n            result.deleteAt(result.lastIndex)\n        }\n        if (isMinus) {\n            result.append(&#34;-&#34;)\n        }\n        return result.reverse().toString()\n    }","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643796152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338901,"user_name":"droidYu","can_delete":false,"product_type":"c1","uid":2849755,"ip_address":"","ucode":"154FEF1B561517","user_header":"https://static001.geekbang.org/account/avatar/00/2b/7b/db/7cfa21ad.jpg","comment_is_top":false,"comment_ctime":1647782767,"is_pvip":false,"replies":[{"id":"124011","content":"这是一个常见的错误用法，后续版本的做法才是对的，我打算在加餐里详细解释的。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1648030489,"ip_address":"","comment_id":338901,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5942750063","product_id":100103401,"comment_content":"老师，V1版本的代码输入 3 + 4 会报错：No enum constant Operation.+；需要输入3 ADD 4才能正常运行，是您标的①处的代码的问题Operation.valueOf()方法抛错，为什么要故意写错，是有什么设计要讲解吗？","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557957,"discussion_content":"这是一个常见的错误用法，后续版本的做法才是对的，我打算在加餐里详细解释的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648030489,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3114352,"avatar":"https://static001.geekbang.org/account/avatar/00/2f/85/70/f3cfe288.jpg","nickname":"十一点睡觉","note":"","ucode":"AAFD9E81090B2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587170,"discussion_content":"val operation = Operation.valueOf(inputList[1]) 这个错误用法害我纠结了一早上，，老师~· -_-","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662865479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335628,"user_name":"爱学习的小羊","can_delete":false,"product_type":"c1","uid":2883920,"ip_address":"","ucode":"9984EB84D7715B","user_header":"https://static001.geekbang.org/account/avatar/00/2c/01/50/c1556a25.jpg","comment_is_top":false,"comment_ctime":1645608006,"is_pvip":false,"replies":[{"id":"122727","content":"总体思路是不错的，但没考虑到一种边界情况：“-91-90”。<br><br>这题最难的就是判断边界了，你可以基于“-91-90”的情况再分析下。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645748039,"ip_address":"","comment_id":335628,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5940575302","product_id":100103401,"comment_content":"private fun minus(left: String, right: String): String {<br><br>        var maxNumber = String()<br>        var mainNumber = String()<br>        var resultMean = String()<br>        val data = left.length - right.length<br>        if (data &gt; 0){<br>            maxNumber = left<br>            mainNumber = right<br>            resultMean = &quot;&quot;<br>        }else if (data &lt; 0){<br>            maxNumber = right<br>            mainNumber = left<br>            resultMean = &quot;-&quot;<br>        }else{<br>            var position = 0<br>            while (left.get(position).digitToInt() == right.get(position).digitToInt()){<br>                position++<br>            }<br>            if (left.get(position).digitToInt() - right.get(position).digitToInt() &gt; 0){<br>                maxNumber = left<br>                mainNumber = right<br>                resultMean = &quot;&quot;<br>            }else{<br>                maxNumber = right<br>                mainNumber = left<br>                resultMean = &quot;-&quot;<br>            }<br>        }<br>        val result = StringBuilder()<br>        var maxIndex = maxNumber.length - 1<br>        var mainIndex = mainNumber.length - 1<br>        var carry = 0<br>        while (maxIndex &gt;= 0 || mainIndex &gt;= 0) {<br>            var leftVal = if (maxIndex &gt;= 0) maxNumber.get(maxIndex).digitToInt() else 0<br>            var rightVal = if (mainIndex &gt;= 0) mainNumber.get(mainIndex).digitToInt() else 0<br>            leftVal -= carry<br>            while (leftVal + carry * 10 &lt; rightVal) {<br>                carry++<br>            }<br>            val sum = leftVal + carry * 10 - rightVal<br>            if (sum in 1..9) {<br>                result.append(sum)<br>            }<br>            maxIndex--<br>            mainIndex--<br>        }<br>        return result.append(resultMean).reverse().toString()<br>    }<br>大佬这样写可吗","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553135,"discussion_content":"总体思路是不错的，但没考虑到一种边界情况：“-91-90”。\n\n这题最难的就是判断边界了，你可以基于“-91-90”的情况再分析下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645748040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333009,"user_name":"Geek_Adr","can_delete":false,"product_type":"c1","uid":2876897,"ip_address":"","ucode":"129E17B7D3EB88","user_header":"https://static001.geekbang.org/account/avatar/00/2b/e5/e1/a5064f88.jpg","comment_is_top":false,"comment_ctime":1643955747,"is_pvip":false,"replies":[{"id":"121688","content":"嗯……实际工作中是更推荐的。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1643984024,"ip_address":"","comment_id":333009,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5938923043","product_id":100103401,"comment_content":"V3实战 加 算法 ！提高语言的手感？<br>坏学生偷懒 string.toBigInteger()<br>","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":549435,"discussion_content":"嗯……实际工作中是更推荐的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643984024,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329597,"user_name":"JokerFake","can_delete":false,"product_type":"c1","uid":2639898,"ip_address":"","ucode":"844212D602F151","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epPU6RSBhdOdkTcLEtgWKuoXib2u34flmBicAwdXzEchibwEjmQsFiabyrNVajibdStw8UH3PuM4pfBIxg/132","comment_is_top":false,"comment_ctime":1641440025,"is_pvip":false,"replies":[{"id":"120167","content":"嗯，这只是1.0理想的结构。也是因为枚举的valueOf有这个问题，所以在后面版本当中才会有其他的方式。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641609676,"ip_address":"","comment_id":329597,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5936407321","product_id":100103401,"comment_content":"所以枚举那只能传ADD 不能传+ 这个bug是故意就给我们自己改的？","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544627,"discussion_content":"嗯，这只是1.0理想的结构。也是因为枚举的valueOf有这个问题，所以在后面版本当中才会有其他的方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641609676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329403,"user_name":"JL","can_delete":false,"product_type":"c1","uid":1441830,"ip_address":"","ucode":"07BD8069AE2CBD","user_header":"https://static001.geekbang.org/account/avatar/00/16/00/26/a80010f0.jpg","comment_is_top":false,"comment_ctime":1641323349,"is_pvip":false,"replies":[{"id":"119967","content":"首先，Kotlin官方没有提供assertThat()这样的语法支持。在Junit当中，assertThat()的优势在于它更加灵活一些。至于哪个好哪个坏肯定是无法一概而论的，它们肯定都有各自适用的场景。<br><br>我个人的理解是：<br>assertEquals适合简单场景，assertThat()适合灵活一些的场景。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641351945,"ip_address":"","comment_id":329403,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5936290645","product_id":100103401,"comment_content":"您好，想问一个关于单元测试的问题：<br>我在工作中assertEquals 和 assertThat().equals() 两种都遇到过 但是有人说 第二种更好一点。 想听听您的意见和建议。<br><br>之前网上搜了一下 也没有看到过说哪个好哪个坏","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543919,"discussion_content":"首先，Kotlin官方没有提供assertThat()这样的语法支持。在Junit当中，assertThat()的优势在于它更加灵活一些。至于哪个好哪个坏肯定是无法一概而论的，它们肯定都有各自适用的场景。\n\n我个人的理解是：\nassertEquals适合简单场景，assertThat()适合灵活一些的场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641351945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360732,"user_name":"24隋心所欲","can_delete":false,"product_type":"c1","uid":1342000,"ip_address":"河北","ucode":"1B8B2789F68C94","user_header":"https://static001.geekbang.org/account/avatar/00/14/7a/30/23fc4089.jpg","comment_is_top":false,"comment_ctime":1666788426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666788426","product_id":100103401,"comment_content":"“Kotlin 统一了数组和集合的元素访问操作”<br><br>大小：使用 Java 中集合的 size；访问：使用 Java 中数组的 []<br><br>这里不是很统一啊，都用集合或者都用数组，岂不是更符合“统一”？","like_count":0},{"had_liked":false,"id":355211,"user_name":"maitian","can_delete":false,"product_type":"c1","uid":2817839,"ip_address":"上海","ucode":"E974157AE36BAC","user_header":"https://static001.geekbang.org/account/avatar/00/2a/ff/2f/eb03fccc.jpg","comment_is_top":false,"comment_ctime":1661175415,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1661175415","product_id":100103401,"comment_content":"老师 计算器1.0版本 我报了这个错，很奇怪<br>Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: No enum constant com.derry.mandy.Operation1.+<br>\tat java.lang.Enum.valueOf(Enum.java:238)<br>\tat com.derry.mandy.Operation1.valueOf(Cacu_Laoshi.kt)<br>\tat com.derry.mandy.Cacu_LaoshiKt.calculate(Cacu_Laoshi.kt:39)<br>\tat com.derry.mandy.Cacu_LaoshiKt.main(Cacu_Laoshi.kt:22)<br>\tat com.derry.mandy.Cacu_LaoshiKt.main(Cacu_Laoshi.kt)<br>","like_count":0},{"had_liked":false,"id":351448,"user_name":"静水流深","can_delete":false,"product_type":"c1","uid":1756061,"ip_address":"","ucode":"762373F88BE056","user_header":"https://static001.geekbang.org/account/avatar/00/1a/cb/9d/6b93b659.jpg","comment_is_top":false,"comment_ctime":1657797038,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1657797038","product_id":100103401,"comment_content":"第一个Demo的第34行 <br>    val operation = Operation.valueOf(inputList[1])<br>报错 <br>Exception in thread &quot;main&quot; java.lang.IllegalArgumentException: No enum constant com.boycoder.Operation.+<br>","like_count":0,"discussions":[{"author":{"id":1395471,"avatar":"https://static001.geekbang.org/account/avatar/00/15/4b/0f/bd953c47.jpg","nickname":"韩小告","note":"","ucode":"6C601339A6F3EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587343,"discussion_content":"人家说了，第一个Demo是有问题的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662986410,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334197,"user_name":"故事与酒","can_delete":false,"product_type":"c1","uid":2788244,"ip_address":"","ucode":"1A0CCAA2C31D3C","user_header":"https://static001.geekbang.org/account/avatar/00/2a/8b/94/09dca97d.jpg","comment_is_top":false,"comment_ctime":1644806987,"is_pvip":false,"replies":[{"id":"122095","content":"哎呀，是代码太长截断了吗？我这边看到的代码不完整。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1644852012,"ip_address":"","comment_id":334197,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1644806987","product_id":100103401,"comment_content":"大数加和乘<br><br>fun minusString(left:String,right:String):String{<br>    val result = StringBuilder()<br>    var _left = left<br>    var _right = right<br>    var borrowNum = 0 &#47;&#47;是否向前借位<br>    var leftIndex = left.length -1<br>    var rightIndex = right.length - 1<br><br><br>    &#47;&#47;判断是否是小-大<br>    val isRightBig = left.length&lt;right.length || left.length == right.length &amp;&amp; left[0] &lt; right[0]<br>    if (isRightBig){<br>         _left = right<br>         _right = left<br>        leftIndex = _left.length - 1<br>        rightIndex = _right.length - 1<br>    }<br><br><br>    while(leftIndex &gt;=0 || rightIndex &gt;= 0){<br>        val leftVal = if (leftIndex &gt;= 0) _left.get(leftIndex).digitToInt() else 0<br>        val rightVal = if (rightIndex &gt;= 0) _right.get(rightIndex).digitToInt() else 0<br><br>        val digitResult = leftVal - rightVal - borrow","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551021,"discussion_content":"哎呀，是代码太长截断了吗？我这边看到的代码不完整。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644852012,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332077,"user_name":"剑来","can_delete":false,"product_type":"c1","uid":2156156,"ip_address":"","ucode":"D24214E9B76700","user_header":"https://static001.geekbang.org/account/avatar/00/20/e6/7c/51a02e43.jpg","comment_is_top":false,"comment_ctime":1643007854,"is_pvip":false,"replies":[{"id":"121316","content":"感谢补充。<br>PS：不熟悉Git操作的小伙伴，可以看看这里。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1643010637,"ip_address":"","comment_id":332077,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1643007854","product_id":100103401,"comment_content":"讲一个不是很关键的东西，通过你这个方式拉取代码后，一般刚下来本地是没有start分支的，需要通过origin&#47;start这个远程分支去checkout。","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548049,"discussion_content":"感谢补充。\nPS：不熟悉Git操作的小伙伴，可以看看这里。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643010637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331063,"user_name":"浅色的风","can_delete":false,"product_type":"c1","uid":2879520,"ip_address":"","ucode":"520C6B434FA39A","user_header":"https://static001.geekbang.org/account/avatar/00/2b/f0/20/54253ab7.jpg","comment_is_top":false,"comment_ctime":1642406092,"is_pvip":false,"replies":[{"id":"120991","content":"666，下次记得要写测试用例哈，单元测试是个好习惯。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1642479032,"ip_address":"","comment_id":331063,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642406092","product_id":100103401,"comment_content":" fun minusString(leftNum: String, rightNum: String): String {<br>        val result = StringBuilder()<br>        var leftIndex = leftNum.length - 1<br>        var rightIndex = rightNum.length - 1<br><br>        var borrow = 0<br><br>        while(leftIndex &gt;= 0 || rightIndex &gt;= 0){<br>            var leftVal = if(leftIndex &gt;= 0 ) leftNum.get(leftIndex).digitToInt() else 0<br>            val rightVal = if(rightIndex &gt;= 0 ) rightNum.get(rightIndex).digitToInt() else 0<br><br>            leftVal -= borrow;<br><br>            if(leftVal &gt;= rightVal ) borrow = 0 else borrow = 1<br><br>            val minu = borrow*10 + leftVal - rightVal<br><br>            result.append(minu)<br><br>            leftIndex--<br>            rightIndex--<br>        }<br><br>        if (result.get(result.lastIndex).digitToInt() == 0) {<br>            result.deleteAt(result.lastIndex)<br>        }<br>        return result.reverse().toString()<br>    }","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546958,"discussion_content":"666，下次记得要写测试用例哈，单元测试是个好习惯。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642479032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330910,"user_name":"郑峰","can_delete":false,"product_type":"c1","uid":1112517,"ip_address":"","ucode":"4D4C0C020E507C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/c5/95b97dfa.jpg","comment_is_top":false,"comment_ctime":1642275786,"is_pvip":false,"replies":[{"id":"120718","content":"工作中我们要首选BigDecimal。如果面试中，可就要自己实现了哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1642299609,"ip_address":"","comment_id":330910,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642275786","product_id":100103401,"comment_content":"  private fun addString(left: String, right: String) = left.toBigDecimal().add(right.toBigDecimal()).toString()<br>  private fun minusString(left: String, right: String) = left.toBigDecimal().subtract(right.toBigDecimal()).toString()<br>  private fun multiString(left: String, right: String) = left.toBigDecimal().multiply(right.toBigDecimal()).toString()<br>  private fun divString(left: String, right: String) = left.toBigDecimal().divideToIntegralValue(right.toBigDecimal()).toString()<br>","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546341,"discussion_content":"工作中我们要首选BigDecimal。如果面试中，可就要自己实现了哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642299609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330259,"user_name":"爱学习的小羊","can_delete":false,"product_type":"c1","uid":2883920,"ip_address":"","ucode":"9984EB84D7715B","user_header":"https://static001.geekbang.org/account/avatar/00/2c/01/50/c1556a25.jpg","comment_is_top":false,"comment_ctime":1641886258,"is_pvip":false,"replies":[{"id":"120380","content":"感谢你的认可。出书估计还很遥远，如果真的出书了，记得来找我。😀","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641974684,"ip_address":"","comment_id":330259,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641886258","product_id":100103401,"comment_content":"大佬以后出书的话  可以送我一本吗","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545484,"discussion_content":"感谢你的认可。出书估计还很遥远，如果真的出书了，记得来找我。😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641974684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329438,"user_name":"Marten","can_delete":false,"product_type":"c1","uid":2879124,"ip_address":"","ucode":"726A68B7D6470E","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ee/94/5f3460cd.jpg","comment_is_top":false,"comment_ctime":1641350858,"is_pvip":false,"replies":[{"id":"119978","content":"很好，下次记得把测试用例也写出来，大厂算法面试是必写测试用例的。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641367495,"ip_address":"","comment_id":329438,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1641350858","product_id":100103401,"comment_content":"大数的减法<br>fun minusString(left: String, right: String): String {<br>        val result = StringBuilder()<br>        var leftIndex = left.length - 1<br>        var rightIndex = right.length - 1<br><br>        var carry = 0<br><br>        while (leftIndex &gt;= 0 || rightIndex &gt;= 0) {<br>            var leftVal = if (leftIndex &gt;= 0) left.get(leftIndex).digitToInt() else 0<br>            var rightVal = if (rightIndex &gt;= 0) right.get(rightIndex).digitToInt() else 0<br>            leftVal -= carry<br>            while (leftVal + carry * 10 &lt; rightVal) {<br>                carry++<br>            }<br>            val sum = leftVal + carry * 10 - rightVal<br>            if (sum &lt;10) {<br>                result.append(sum)<br>            }<br>            leftIndex--<br>            rightIndex--<br><br>        }<br><br>        return result.reverse().toString().toInt().toString()<br>    }","like_count":0,"discussions":[{"author":{"id":1090798,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a4/ee/cffd8ee6.jpg","nickname":"魏全运","note":"","ucode":"3FED702C724E2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544757,"discussion_content":"没考虑leftValue ＜ rightValue 的情况吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641696724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543963,"discussion_content":"很好，下次记得把测试用例也写出来，大厂算法面试是必写测试用例的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1641367496,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1236983,"avatar":"","nickname":"辉哥","note":"","ucode":"21A65F4EE6CD04","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545370,"discussion_content":"没有考虑结果为负数的场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641917624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329433,"user_name":"Marten","can_delete":false,"product_type":"c1","uid":2879124,"ip_address":"","ucode":"726A68B7D6470E","user_header":"https://static001.geekbang.org/account/avatar/00/2b/ee/94/5f3460cd.jpg","comment_is_top":false,"comment_ctime":1641349848,"is_pvip":false,"replies":[{"id":"119977","content":"赞！你是第一个提交答案的。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641367428,"ip_address":"","comment_id":329433,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1641349848","product_id":100103401,"comment_content":" fun minusString(left: String, right: String): String {<br>        val result = StringBuilder()<br>        var leftIndex = left.length - 1<br>        var rightIndex = right.length - 1<br><br>        var carry = 0<br><br>        while (leftIndex &gt;= 0 || rightIndex &gt;= 0) {<br>            var leftVal = if (leftIndex &gt;= 0) left.get(leftIndex).digitToInt() else 0<br>            var rightVal = if (rightIndex &gt;= 0) right.get(rightIndex).digitToInt() else 0<br>            leftVal -= carry<br>            if (leftVal &lt; rightVal) {<br>                carry = 1<br>            }<br>            val sum = leftVal + carry * 10 - rightVal<br><br>            result.append(sum)<br>            leftIndex--<br>            rightIndex--<br><br>        }<br>        return result.reverse().toString()<br>    }","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543961,"discussion_content":"赞！你是第一个提交答案的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641367428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1189062,"avatar":"https://static001.geekbang.org/account/avatar/00/12/24/c6/c86e70d9.jpg","nickname":"逢庆","note":"","ucode":"519C5165B2F495","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":543986,"discussion_content":"可惜答案有bug","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641374161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":543961,"ip_address":""},"score":543986,"extra":""}]}]},{"had_liked":false,"id":329340,"user_name":"吴超","can_delete":false,"product_type":"c1","uid":1123687,"ip_address":"","ucode":"982F4CC3433EBA","user_header":"https://static001.geekbang.org/account/avatar/00/11/25/67/6496b6ac.jpg","comment_is_top":false,"comment_ctime":1641290483,"is_pvip":false,"replies":[{"id":"119946","content":"这是从Kotlin1.5才开始提供的扩展，检查一下你的Kotlin版本看看？","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641304033,"ip_address":"","comment_id":329340,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641290483","product_id":100103401,"comment_content":"rightNum.get(rightIndex).digitToInt()    digitToInt()  为啥找不到呢？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543795,"discussion_content":"这是从Kotlin1.5才开始提供的扩展，检查一下你的Kotlin版本看看？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641304034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329292,"user_name":"Renext","can_delete":false,"product_type":"c1","uid":1020838,"ip_address":"","ucode":"3C4418F7E86CD6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/a6/679b3c6b.jpg","comment_is_top":false,"comment_ctime":1641270539,"is_pvip":false,"replies":[{"id":"119947","content":"加油~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641304041,"ip_address":"","comment_id":329292,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641270539","product_id":100103401,"comment_content":"good","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543796,"discussion_content":"加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641304041,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329272,"user_name":"木易杨","can_delete":false,"product_type":"c1","uid":1353456,"ip_address":"","ucode":"3C6EFF05AFFACA","user_header":"https://static001.geekbang.org/account/avatar/00/14/a6/f0/50d0931d.jpg","comment_is_top":false,"comment_ctime":1641264340,"is_pvip":false,"replies":[{"id":"119941","content":"你是不是应该用“Operation.ADD”？","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641303739,"ip_address":"","comment_id":329272,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641264340","product_id":100103401,"comment_content":"No enum constant com.kymjs.project4.unit6.Operation.+    我的怎么会报这个错了？","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543789,"discussion_content":"你是不是应该用“Operation.ADD”？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641303739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":329138,"user_name":"会飞的小猪","can_delete":false,"product_type":"c1","uid":2834224,"ip_address":"","ucode":"EC4A84FA0ED4DB","user_header":"https://static001.geekbang.org/account/avatar/00/2b/3f/30/41c34dbb.jpg","comment_is_top":false,"comment_ctime":1641175184,"is_pvip":false,"replies":[{"id":"119910","content":"这是一个非常好的问题，相信这也会是很多人心中的疑惑。<br><br>这里，简短回答的话呢，就是：Kotlin的语法设计如此，它的valueOf传入的只能是“枚举类的名称”不能是当中的String Value。<br><br>不过Kotlin这么设计背后的原因呢，三言两语很难讲清楚，我会在后面答疑加餐当中详细解释。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1641261946,"ip_address":"","comment_id":329138,"utype":1}],"discussion_count":6,"race_medal":0,"score":"1641175184","product_id":100103401,"comment_content":"作者你好，在第一个案例Operation.valueOf(inputList[1])访问枚举类的时候咋会报非法数据异常嘞？直接传入“+”会报非法异常，传入“ADD”才正常，这是为什么？valueOf正常来说应该是匹配枚举类构造参数的吧","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543659,"discussion_content":"这是一个非常好的问题，相信这也会是很多人心中的疑惑。\n\n这里，简短回答的话呢，就是：Kotlin的语法设计如此，它的valueOf传入的只能是“枚举类的名称”不能是当中的String Value。\n\n不过Kotlin这么设计背后的原因呢，三言两语很难讲清楚，我会在后面答疑加餐当中详细解释。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641261947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1005385,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/49/abb7bfe3.jpg","nickname":"Hly","note":"","ucode":"22BF8AA5B8405D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":544145,"discussion_content":"我还有个小疑问哈。 就是为啥效果图里面输入1+1就能运行 但是用您代码跑的时候却是1 add 1才行哦","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641416680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":543659,"ip_address":""},"score":544145,"extra":""}]},{"author":{"id":1017478,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/86/86/abb7bfe3.jpg","nickname":"foo","note":"","ucode":"E21DCFF686435B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543541,"discussion_content":"根据 Enum#valueOf() 的文档注释:\nReturns the enum constant of the specified enum type with the specified name. The name must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)\n\n所以这里还是换成枚举类里面增加个 companion object 函数来处理吧 😅\n\n类似这样:\ncompanion object {\n        fun getValueFrom(value: String) = values().find { it.value == value }\n}","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1641199675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2697815,"avatar":"https://static001.geekbang.org/account/avatar/00/29/2a/57/6629c858.jpg","nickname":"阿康","note":"","ucode":"DF20E1E33A8A34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543674,"discussion_content":"你可以改成这样 \nenum class Operation(val value: String) {\n    `+`(&#34;+&#34;),\n    `-`(&#34;-&#34;),\n    `*`(&#34;*&#34;),\n    `÷`(&#34;/&#34;)\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641266354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2880329,"avatar":"","nickname":"Geek_c13afe","note":"","ucode":"CB6C00875813BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2697815,"avatar":"https://static001.geekbang.org/account/avatar/00/29/2a/57/6629c858.jpg","nickname":"阿康","note":"","ucode":"DF20E1E33A8A34","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543717,"discussion_content":"这样直接报错呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641280929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":543674,"ip_address":""},"score":543717,"extra":""}]},{"author":{"id":1353456,"avatar":"https://static001.geekbang.org/account/avatar/00/14/a6/f0/50d0931d.jpg","nickname":"木易杨","note":"","ucode":"3C6EFF05AFFACA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543669,"discussion_content":"看了一眼源码，enumType.enumConstantDirectory()拿到一个Map，key是ADD、MULTI这种的，value是Operation对象，所以传入+、-这种的不管用，只能传入ADD、MULTI才可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641265372,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}