{"id":467203,"title":"04｜控制逻辑：表达式和语句是如何协调程序运行的？","content":"<p>你好，我是于航。今天，我们继续来看 C 基本语法结构背后的实现细节。</p><p>上一讲，我主要介绍了编译器是如何使用机器指令来实现各类 C 运算符的。在应用程序的构建过程中，运算符仅作为“计算单元”，为程序提供了基本的“原子”计算能力。而数据如何同时使用多种不同的运算符，以及按照怎样的逻辑来在不同位置上“流动”，这一切都是由表达式和语句进行控制的。这一讲，就让我们来看看 C 语言中，用来描述程序运行逻辑的这两种控制单元“背后的故事”。</p><h2>表达式</h2><p>表达式（expression）是由一系列运算符与操作数（operand）组成的一种语法结构。其中，操作数是参与运算符计算的独立单元，也即运算符所操作的对象。操作数可以是一个简单的字面量值，比如数字 2、字符串 “Hello, world!”；也可以是另一组复杂的表达式。举个例子：在表达式 <code>(1 + 2) * 3 + 4 / 5</code> 中，乘法运算符 “*” 所对应的两个操作数分别是字面量数值 3，和子表达式 <code>(1 + 2)</code>。</p><p>通常来说，表达式的求值（evaluation）过程需要依据所涉及运算符的优先级和结合性的不同，而按一定顺序进行。我们一起来看看上面提到的 <code>(1 + 2) * 3 + 4 / 5</code> 这个表达式的计算流程。</p><p>首先，需要根据表达式中运算符优先级的不同，来决定最先进行哪一部分运算。运算符的优先级很好理解，由于乘法运算符 “*” 与除法运算符 “/” 的优先级高于加法运算符 “+”，因此在计算整个表达式的值时，需要首先对由这两个运算符组成的子表达式进行求值。</p><!-- [[[read_end]]] --><p>当从上一步中“筛选出”的待计算运算符多于 1 个时，我们就需要再判断运算符的结合性，来决定优先计算哪一个。因为乘法运算符和除法运算符均具有左结合性，因此，由左侧乘法运算符构成的子表达式需要被优先求值。</p><p>当我们以这个表达式为视角，进行观察时，参与表达式计算的操作数分别为子表达式 <code>(1 + 2)</code>，以及字面量数值 3。这里，我们需要分别对这两部分进行求值，直至乘法运算符 “*” 两边的操作数可以直接参与计算为止。但需要注意的是，C 标准中并未规定运算符两侧操作数的具体求值顺序，因此具体方式由编译器选择。</p><p>因此我们可以说，<strong>对表达式的求值过程，实际上就是根据运算符的优先级和结合性，来对表达式和它所包含的子表达式进行递归求值的过程</strong>。从编译的角度来看，这个过程中所涉及到的操作数的实际求值顺序会在语法分析阶段被确定，并体现在源码对应的抽象语法树（AST，Abstract Syntax Tree）上。为了方便进一步观察，我将这个表达式整合到了下面的 C 代码里，并保存在文件 main.c 中：</p><pre><code class=\"language-c++\">int foo(void) {\n  return (1 + 2) * 3 + 4 / 5;\n}\n</code></pre><p>然后，借助 Clang 编译器提供的 “-ast-dump” 选项，我们可以编译并打印出这段 C 代码对应的 AST 结构。完整的编译命令如下：</p><pre><code class=\"language-bash\">clang -Xclang -ast-dump -fsyntax-only&nbsp;main.c\n</code></pre><p>上面的命令执行完毕后，部分输出结果如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/fc/0a/fcf686b1f02ba6340b9a51a85f60ee0a.png?wh=1266x496\" alt=\"图片\"></p><p>AST 作为用于表示源代码语法结构的一种树形数据结构，语法分析器会将表达式中操作数的整体求值顺序映射到树的结构上。因此，当我们以后序遍历（LRD）的方式遍历这棵树时，便可以直接得到正确的表达式求值顺序。</p><p>对于上面的 AST 来说，由叶子结点组成的子树需要被最先求值，因此我们首先可以得到括号内加法表达式的计算结果 3。然后，该结果将作为叶子结点上的操作数，参与乘法运算符的计算，从而得到计算结果 9。接下来，除法运算符所在的子表达式经过求值，得到结果 0。最后，该值再作为最后一个加法运算符的操作数，与字面量值 9 相加，进而得到整个表达式的最终计算结果 9。</p><p>你可以看到，表达式提供了这样一种能力：<strong>能够让数据同时参与到多个操作符的不同计算过程中</strong>。而通过提供对运算符优先级与结合性的规则限制，表达式可以控制整个计算过程的有序进行。</p><h2>语句</h2><p>语句（statement）是用来描述程序的基本构建块。和表达式不同，语句是构成 C 程序的最大粒度单元，在它的内部，可以包含有简单或复杂的表达式结构，但也可以不包含任何内容。除此之外，语句在执行时不返回任何结果，但可能会产生副作用。</p><p>在 C 语言中，语句可以被分为复合语句、表达式语句、选择语句、迭代语句、跳转语句五种类型。<strong>但无论是哪种类型，语句都必须以分号结尾，并按从上到下的顺序依次执行</strong>。</p><p>其中，复合语句是指由花括号 “{}” 标记的一块区域。在这个区域中，我们可以放置声明（declaration）和语句，而最常见的一种复合语句便是函数体。在函数体内部，我们可以定义变量，并通过结合各类其他语句来实现函数的功能。而表达式语句则是直接由表达式外加一个分号组成的语句，比如函数调用语句或变量赋值语句。当然，表达式语句中的表达式也可以为空，这样就成为了仅由一个 “;” 组成的空语句。</p><p>在下面这段代码里，我标注出了其中使用到的复合语句与表达式语句。你可以通过它们来加深对这两种语句的理解。</p><pre><code class=\"language-c++\">int foo(int x, int y) {  // 复合语句；\n&nbsp; int sum = x + y; // 表达式语句；\n  if (sum &lt; 0) {  // 复合语句；\n    sum = -sum;  // 表达式语句；\n  }\n&nbsp; return sum;\n}\n</code></pre><p>这两种类型的语句，它们的具体结构依程序设计细节的不同而不同，因此这里我们不再做更多的讨论。相对的，在 C 语言中，选择语句、迭代语句、跳转语句都有着它们相对应的特定语法结构。因此，接下来我们重点看看这几类语句，探究编译器是如何实现它们的。</p><h3>选择语句</h3><p>同其他大多数语言类似，在 C 语言中，选择语句主要是指由 if…else 和 switch…case 这两种语法结构组成的语句。它们的使用方式你应该很熟悉，这里就不多讲了。让我们直接通过一个例子，观察编译器在默认情况下是如何实现它们的。首先来看 if…else 语句：</p><p><img src=\"https://static001.geekbang.org/resource/image/f0/46/f0d196f56b772f3b97e6d25e01cd8c46.png?wh=1920x1610\" alt=\"图片\"></p><p>如上图所示，在左侧的 C 函数 foo 中，我们使用 if…else 语句构建了一个简单的程序逻辑。if 语句会在每一个条件分支中检测函数参数 v 的值，并根据匹配情况返回一个数值。若所有情况都没有命中，则最后的 else 语句生效，直接返回数值 4。相应的，在右侧，我们可以看到这个函数对应的汇编代码。</p><p>在这里，通过红框内的汇编代码可以看到，变量 v 的值被存放在栈内存中地址为 rbp 寄存器的值减去 4 的位置上。程序使用多个标签（如 .L2、.L3 等），分别划分不同分支对应的处理逻辑，而分支的判断过程则是由指令 <code>cmp</code> 与条件跳转指令 <code>je</code> 与 <code>jne</code> 共同完成的。<strong>汇编代码和 C 代码的整体逻辑基本是一一对应的关系。</strong>因此，在这种情况下，为了尽量保持程序的执行性能，你可以将命中几率较大的条件语句放在较前的位置上。</p><p>接着，我们再来看看 switch…case 语句。</p><p><img src=\"https://static001.geekbang.org/resource/image/65/c3/65cae8d9643d6e5b6e2cefc0c5c6fac3.png?wh=1370x1656\" alt=\"图片\"></p><p>这里，我只列出了部分汇编代码，但足够你理解编译器对 switch…case 语句的实现细节了。其中，标注为红色的汇编代码会通过 <code>cmp</code> 指令，判断寄存器 eax 中的值，即变量 v 的值是否大于 60。若判断成立，则直接将程序跳转到标签 .L2 处，并将数字 4 作为返回值；若条件不成立，程序将继续执行。接下来，蓝色部分的代码会基于变量 v 的值，来产生一个用于参与后续运算符的 “token” 值。这个值的生成步骤如下所示：</p><ol>\n<li>将寄存器 edx 的值设为 1；</li>\n<li>将寄存器 ecx 的值设为变量 v 的值；</li>\n<li>将寄存器 rdx 中的值左移 v 位（值被扩展为 64 位）；</li>\n<li>将此时寄存器 rdx 中的值移动到 rax 中留作待用。</li>\n</ol><p>接下来，通过上图中右侧虚线框内的代码，程序完成了对变量 v 的值的第一次筛选过程。这个过程很好理解，如果将其中第一行指令 <code>movabs</code> 的立即数操作数 1154047404513689600 以 64 位二进制的形式展开，你会发现其中只有第 50 和 60 位被置位。</p><p>而第二行的 <code>and</code> 指令，会将这个超长的立即数与之前根据变量 v 的值进行移位而得来的 token 值进行“与”操作。若操作得到的结果不为 0，则表示 token 值的第 50 或 60 位肯定不为 0，即变量 v 的值为 50 或 60。否则，变量 v 的值则不符合该 case 语句的筛选条件。到这里，筛选的基本逻辑相信你已经清楚了。</p><p>不过，通过“位映射”的方式进行分支筛选，并不能完美地覆盖所有情况。比如，当 case 语句的筛选值过大，无法使用寄存器来进行映射时，默认优化条件下，编译器会将 switch…case 的实现“回退”到与 if…else 类似的方式。也就是说，使用 <code>cmp</code> 指令与条件跳转指令来进行分支的筛选与转移。当然，具体采用哪种实现策略依据编译器的不同而有所不同。</p><p>除了上面介绍的 if…else 与 switch…case 语句实现方式外，在高优化等级下，编译器还可能会采用一种名为“跳表”的方式，来实现这两种条件选择语句。</p><p>下面是用这种方式修改后的 switch…case 语句实现，你可以先观察下，并思考这种方式的实现思路。</p><p><img src=\"https://static001.geekbang.org/resource/image/1d/b6/1de27b48eb7ceeb09dd81f8500yy97b6.png?wh=1598x1752\" alt=\"图片\"></p><p>可以看到，这里我们将 switch…case 语句中分支筛选的“跨度”进行了减小，即将其中的最大分支匹配条件由 60 减小到了 40。<strong>跳表是一种用空间换时间的条件匹配策略</strong>，让我们通过上图右侧的汇编代码，来了解它的实现过程。</p><p>首先，标注为红色的汇编代码将变量 v 的值减去了选择语句中最小匹配条件的值，这里也就是 10。然后，程序通过 <code>cmp</code> 与 <code>ja</code> 指令，判断变量 v 的值是否超过了选择语句中最大匹配条件与最小匹配条件之间的差值，这里也就是 30。若是，则程序直接跳转到标签 .LBB0_3 处，并返回数值 3。</p><p>否则，程序就会使用跳表来寻找变量 v 的值对应的正确分支。<strong>所谓跳表，即在一段连续内存中存放的，可用于辅助查找正确目标地址的地址信息</strong>。在上面这个例子中，跳表从标签 .LJTI0_0 处开始。在这段内存中，连续存放了筛选值 10 到 40 区间内，每一个整数值对应的正确分支处理地址。接下来的蓝色代码保存了当跳表第 0 项“命中”时，函数需要返回的值。</p><p>假设在调用函数 foo 时，传入变量 v 的值为 20。虚线框中的 <code>jmp</code> 指令在执行时，会根据 v 的值在跳表中找到它所对应的正确分支地址。由于这里 rdi 寄存器中的值为 10（20 - 10），因此正确的分支处理地址便是跳表中第十项对应的值。这里可以看到，在 .LJTI0_0 标签 +80 字节的位置（.quad 代表 8 字节数据）处，正对应着标签 .LBB0_4 的地址。而该标签的位置，正是变量 v 为值 20 时的正确分支处理地址。</p><p>除了上面提到的这些编译器在实现分支语句时使用的常用方式外，根据分支语句的具体情况，编译器还可能会采用某些针对特定形态代码的专用优化。而即使针对最“原始”的 <code>cmp</code> 加条件跳转语句组合这种实现方式，编译器也会根据 C 源代码的情况，适当使用“二分法”等优化策略，来加快条件的筛选过程。</p><h3>迭代语句</h3><p>在 C 语言中，迭代语句主要包含 do…while、for、while 这三种基本语法形式。这些语句除了在执行细节上有些许差异外，其对应的汇编实现思路大同小异。这里我以 do…while 语句为例来讲解，具体代码如下所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/df/1c/df301d794a335203bf7d172e67cbbc1c.png?wh=1262x826\" alt=\"图片\"></p><p>可以看到，在真正对变量 v 进行条件判断之前，程序已经执行了一次 <code>printf</code> 函数，而这便是 do…while 语句相较于其他迭代语句的特点。迭代过程以 .L2 标签作为每次的起始点，每次迭代都遵循着“先执行循环体，再判断条件”的规则。条件的判断和执行转移流程则分别由指令 <code>test</code> 与 <code>jne</code> 负责进行。</p><p>即使是在高优化等级下，C 语言中的这三种基本迭代语句在机器层面的汇编实现方式也不会有较大的差异，但这也并不意味着你可以随意使用它们。至少对于 do…while 与 while 而言，它们在执行细节上存在着差异，如果不假思索地使用，很可能会给你的程序招致不必要且难以调试的 BUG。</p><h3>跳转语句</h3><p>C 语言中的跳转语句主要指那些可以改变程序执行流程的语法结构，它们主要包括以下四种类型：</p><ul>\n<li>break 语句；</li>\n<li>continue 语句；</li>\n<li>return 语句；</li>\n<li>goto 语句。</li>\n</ul><p>其中，return 语句的执行细节涉及到了函数的调用与返回，因此我会在 05 讲中为你详细介绍。而对于另外三种语句，相信就算不参考实际代码，对于它们的实现“套路”，你也已经心中有数，因为它们的基本功能均是改变程序的具体执行流程。</p><p>在 C 代码中，用于控制程序执行逻辑的大部分语句，其背后都是通过条件跳转语句来实现的。编译器通过代码分析，可以找到程序中可能的“跳入点”与“跳出点”，并在机器指令层面通过 <code>je</code> 等条件跳转指令，来控制程序的执行流程在这些点之间进行转移。也就是说，只要理解了其他语句实现中对条件跳转指令的使用方式，这里你就能融会贯通。</p><h2>总结</h2><p>好了，讲到这里，今天的内容也就基本结束了。最后我来给你总结一下。</p><p>今天我主要讲解了 C 语言中用于描述程序运行逻辑的两种“控制单元”，即表达式和语句背后的实现细节。</p><p>表达式作为一种表达计算的基本语法结构，对它的求值过程需要根据参与运算符的结合性与优先级，按一定顺序进行。而计算的具体顺序则会在语法分析阶段，由编译器直接体现在对应的 AST 结构形态上。</p><p>语句是程序的基本构建块，通过不同种类语句的组合使用，我们可以控制程序的执行逻辑。C 语言中的语句主要包括复合语句、表达式语句、选择语句、迭代语句，以及跳转语句共五种。其中，由于前两种语句的展现形式较为动态，因此我着重讲解了语法结构和功能较为固定的后三种语句。</p><p>选择语句包含 if…else 与 switch…case 两种类型，编译器通常会采用位映射法、跳表法、基于二分法的测试与条件跳转语句的方式来实现它们。迭代语句则包含 while 语句、do…while 语句以及 for 语句，编译器实现它们时，通常也是采用基本的测试与条件跳转，但三种迭代语句在执行细节上稍有差异。最后的跳转语句包含 return 语句、continue 语句、break 语句以及 goto 语句。它们作为可以改变程序执行顺序的语句，大多也以类似的方式实现。</p><h2>思考题</h2><p>最后给你留一个小问题，你可以在留言区和我交流：空语句 <code>;</code> 在 C 语言中有哪些使用方式？</p><p>今天的课程就结束了，希望可以帮助到你，也希望你在下方的留言区和我一起讨论。同时，欢迎你把这节课分享给你的朋友或同事，我们一起交流。</p>","comments":[{"had_liked":false,"id":327074,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":true,"comment_ctime":1639904336,"is_pvip":true,"replies":[{"id":"118976","content":"这是一个好问题，可以 watch 一下我在 01 讲的提到的 GitHub 仓库哈，我会尽快把相关资料更新在里面的。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639960721,"ip_address":"","comment_id":327074,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720556745994e+18","product_id":100100701,"comment_content":"现在遇到了 汇编指令 比较多了，有些指令不知道做了什么， 有没有一个统一的地方可以方便进行查询的","like_count":4,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540089,"discussion_content":"这是一个好问题，可以 watch 一下我在 01 讲的提到的 GitHub 仓库哈，我会尽快把相关资料更新在里面的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1639960721,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326444,"user_name":"liu_liu","can_delete":false,"product_type":"c1","uid":1019138,"ip_address":"","ucode":"24283806A07759","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/02/6a16058a.jpg","comment_is_top":false,"comment_ctime":1639531163,"is_pvip":false,"replies":[{"id":"118656","content":"这是一个很棒的问题！<br>如果使用 mov 指令，也是可以完成同样的功能的，只不过需要独立的两条指令，比如：<br>- dec rax;<br>- mov edx, rax<br>但使用 lea 指令，我们就可以仅通过一条机器指令来实现。相对于前者，其执行效率是不是更高呢？实际上，对于编译器来说，很多基本的四则运算都可以直接使用 lea 指令来实现，比如 lea eax, [123 + 4*ebx + esi]，就是直接将 ebx 中的值乘以 4 再加上 123 和 esi 中的值。相较于使用 mov 的多条指令，lea 可以充分利用它在硬件中的电路特性，以更高的效率进行计算。","user_name":"作者回复","user_name_real":"作者","uid":"1005890","ctime":1639587924,"ip_address":"","comment_id":326444,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40294236827","product_id":100100701,"comment_content":"<br>关于迭代语句中的 .L2 汇编代码段：<br><br>&#47;&#47; 把 v 放入 eax<br>mov eax, DWORD PTR [rbp-4]<br><br>&#47;&#47; edx = rax-1<br>lea edx, [rax-1]<br><br>&#47;&#47; 把 edx 的值写入 rbp-4 地址<br>move DWROD PTR [rbp-4], edx<br><br>这段汇编的作用应该是用于 v-- 。<br><br>但有一些不太明白，为什么要使用 lea 指令呢？可直接用 move 指令？<br><br><br><br><br>","like_count":9,"discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539438,"discussion_content":"我悟了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639715544,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326064,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1639359904,"is_pvip":false,"replies":[{"id":"118453","content":"没错！这是一种常见的场景。举个例子：<br><br>#include &lt;stdio.h&gt;<br>int main() {<br>  char c;<br>  while ((c = getchar()) == &#39; &#39;);<br>  printf(&quot;%c&quot;, c);<br>}","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639448507,"ip_address":"","comment_id":326064,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23114196384","product_id":100100701,"comment_content":"竟然有一种像当年读CSAPP第三章的感觉！<br><br>空语句用的少，多数时候用来做空循环体吧。","like_count":5,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538573,"discussion_content":"没错！这是一种常见的场景。举个例子：\n\n#include &lt;stdio.h&gt;\nint main() {\n  char c;\n  while ((c = getchar()) == &#39; &#39;);\n  printf(&#34;%c&#34;, c);\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639448507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326124,"user_name":"qinsi","can_delete":false,"product_type":"c1","uid":1667175,"ip_address":"","ucode":"090D9C4068FF12","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/67/0c1359c2.jpg","comment_is_top":false,"comment_ctime":1639387064,"is_pvip":true,"replies":[{"id":"118456","content":"达夫设备是 switch 语句和循环展开的巧妙结合，我们会在 19 讲再来深入介绍哈！","user_name":"作者回复","user_name_real":"作者","uid":"1005890","ctime":1639449960,"ip_address":"","comment_id":326124,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10229321656","product_id":100100701,"comment_content":"维基上Duff&#39;s device的例子<br><br>send(to, from, count)<br>register short *to, *from;<br>register count;<br>{<br>    register n = (count + 7) &#47; 8;<br>    switch (count % 8) {<br>    case 0: do { *to = *from++;<br>    case 7:      *to = *from++;<br>    case 6:      *to = *from++;<br>    case 5:      *to = *from++;<br>    case 4:      *to = *from++;<br>    case 3:      *to = *from++;<br>    case 2:      *to = *from++;<br>    case 1:      *to = *from++;<br>            } while (--n &gt; 0);<br>    }<br>}","like_count":2,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538581,"discussion_content":"达夫设备是 switch 语句和循环展开的巧妙结合，我们会在 19 讲再来深入介绍哈！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639449960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326618,"user_name":"dog_brother","can_delete":false,"product_type":"c1","uid":1619597,"ip_address":"","ucode":"9F64D3C6D815FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U9LYlZEx2HrpsELeh3KMlqFiaKpSAaaZeBttXRAVvDXUgcufpqJ60bJWGYGNpT7752w/132","comment_is_top":false,"comment_ctime":1639586465,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5934553761","product_id":100100701,"comment_content":"int i = 0;<br>for(; i &lt;10; ++i) {;}<br>我经常使用的两种场景，for循环初始条件空，或者循环体为空","like_count":1},{"had_liked":false,"id":326502,"user_name":"送过快递的码农","can_delete":false,"product_type":"c1","uid":1587666,"ip_address":"","ucode":"66EA81B3BADC73","user_header":"https://static001.geekbang.org/account/avatar/00/18/39/d2/845c0e39.jpg","comment_is_top":false,"comment_ctime":1639543802,"is_pvip":false,"replies":[{"id":"118655","content":"没错的，你的理解是正确的。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639587910,"ip_address":"","comment_id":326502,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5934511098","product_id":100100701,"comment_content":"老师 ，test&#47;cmp 比较多指令，最终结果会在EFLAGS这个寄存器中么，j(cond)指令会根据这个寄存器做相应的跳动？","like_count":2,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539088,"discussion_content":"没错的，你的理解是正确的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639587910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359418,"user_name":"Geek_Sakura","can_delete":false,"product_type":"c1","uid":2617689,"ip_address":"陕西","ucode":"33CD98B58CC39B","user_header":"https://static001.geekbang.org/account/avatar/00/27/f1/59/f2573793.jpg","comment_is_top":false,"comment_ctime":1665506207,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665506207","product_id":100100701,"comment_content":"想想要一个专栏汇编指令的查询手册","like_count":0},{"had_liked":false,"id":356023,"user_name":"阿妞","can_delete":false,"product_type":"c1","uid":2977065,"ip_address":"江苏","ucode":"DC6F6454CE9312","user_header":"https://static001.geekbang.org/account/avatar/00/2d/6d/29/8c7c83c5.jpg","comment_is_top":false,"comment_ctime":1661925682,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1661925682","product_id":100100701,"comment_content":"老师，请问一下 下面代码的汇编，满足条件跳转到.L6,不满足就继续执行，但最后的v=20，是在.L6里面，只有跳转才执行，不跳转就不执行？从c上看，是无论满足不满足条件，都应该执行的呀，很疑惑！<br>int test()<br>{<br>  int v=20;            <br>  if(v&gt;10)<br>  {<br>    v--;<br>    v=10;<br>  }<br>   v=20;<br>}<br><br>test:<br>        push    rbp<br>        mov     rbp, rsp<br>        mov     DWORD PTR [rbp-4], 20<br>        cmp     DWORD PTR [rbp-4], 10<br>        jle     .L6<br>        sub     DWORD PTR [rbp-4], 1<br>        mov     DWORD PTR [rbp-4], 10<br>.L6:<br>        mov     DWORD PTR [rbp-4], 20<br>        nop<br>        pop     rbp<br>        ret<br><br> ","like_count":0,"discussions":[{"author":{"id":1183743,"avatar":"https://static001.geekbang.org/account/avatar/00/12/0f/ff/86a1637d.jpg","nickname":"华仔","note":"","ucode":"96DB7EC64D50D4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591809,"discussion_content":"汇编没毛病，你要知道：\n1. jle 是小于等于的意思，对应汇编就是 当 v &lt;= 10 时才会跳转到 v=20；\n2. 当 jle 不满足的时候，也就是 v &gt; 10 时会顺序执行，直到最后的 ret","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666835210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":327019,"user_name":"白花风信子","can_delete":false,"product_type":"c1","uid":2850941,"ip_address":"","ucode":"89CA70180EA326","user_header":"https://static001.geekbang.org/account/avatar/00/2b/80/7d/51914d34.jpg","comment_is_top":false,"comment_ctime":1639841436,"is_pvip":false,"replies":[{"id":"119007","content":"如果这里提到的“挂起”是指阻塞当前线程的话，可以使用 poll \\ select \\ semaphore 等方式哈。死循环并不是一个好的方式。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639976358,"ip_address":"","comment_id":327019,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639841436","product_id":100100701,"comment_content":"进程里面的挂起也是for(;;);叭","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540164,"discussion_content":"如果这里提到的“挂起”是指阻塞当前线程的话，可以使用 poll \\ select \\ semaphore 等方式哈。死循环并不是一个好的方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639976358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326854,"user_name":"友","can_delete":false,"product_type":"c1","uid":2536820,"ip_address":"","ucode":"972A4333A8B101","user_header":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","comment_is_top":false,"comment_ctime":1639722070,"is_pvip":false,"replies":[{"id":"118786","content":"没错的，我们在第 05 讲有介绍这些内容哈。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639798915,"ip_address":"","comment_id":326854,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1639722070","product_id":100100701,"comment_content":"像 edi  esi 对应的应该是 第一个参数 第二个参数吧 ~ 我记得有 6个还是7个寄存器可以用来传参","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539649,"discussion_content":"没错的，我们在第 05 讲有介绍这些内容哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639798916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2536820,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b5/74/cd80b9f4.jpg","nickname":"友","note":"","ucode":"972A4333A8B101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":539650,"discussion_content":"嗯嗯 正在看第五章","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639798963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":539649,"ip_address":""},"score":539650,"extra":""}]}]},{"had_liked":false,"id":326380,"user_name":"chinandy","can_delete":false,"product_type":"c1","uid":2737221,"ip_address":"","ucode":"396E8478BB0393","user_header":"https://static001.geekbang.org/account/avatar/00/29/c4/45/88287ede.jpg","comment_is_top":false,"comment_ctime":1639490178,"is_pvip":false,"replies":[{"id":"118652","content":"可以直接在上方的 “Compiler options” 输入框里输入对应优化等级的参数，比如：-O2 \\ -O3。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639585961,"ip_address":"","comment_id":326380,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639490178","product_id":100100701,"comment_content":"老师：高优化等级怎么打开，在您给的那个网站上","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539081,"discussion_content":"可以直接在上方的 “Compiler options” 输入框里输入对应优化等级的参数，比如：-O2 \\ -O3。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639585961,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326355,"user_name":"=","can_delete":false,"product_type":"c1","uid":2600127,"ip_address":"","ucode":"104232A8292220","user_header":"https://static001.geekbang.org/account/avatar/00/27/ac/bf/f549183e.jpg","comment_is_top":false,"comment_ctime":1639481213,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639481213","product_id":100100701,"comment_content":"空语句；常用来实现一个空循环。例如:<br>for(;;);","like_count":0},{"had_liked":false,"id":326261,"user_name":"Geek_828b39","can_delete":false,"product_type":"c1","uid":2729802,"ip_address":"","ucode":"DE2A5F215A3C1E","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/D62JX0VEX0yhnWxgbiaXMUnEqdsVxc8JMxUBibVicbLSZ6zia606EG0zI9oosiceHsdiavDZGUyHzcvsEExFGxwP4mDg/132","comment_is_top":false,"comment_ctime":1639452049,"is_pvip":false,"replies":[{"id":"118654","content":"这里实际上是跟蓝框内的第一条汇编语句做的对比。第一条的 mov 指令仅把值 1 当做 32 位值放入到 edx 中；而后续程序在使用这个值生成“token”时，实际上是直接用 rdx 来访问的，因此实际上是在进行左移时同时被“扩展”为了 64 位值。同样的，后面进行按位与时，也是直接以 64 位值进行的。","user_name":"作者回复","user_name_real":"编辑","uid":"1005890","ctime":1639586331,"ip_address":"","comment_id":326261,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639452049","product_id":100100701,"comment_content":"将寄存器 rdx 中的值左移 v 位（值被扩展为 64 位）；<br>老师，这个这么理解？","like_count":0,"discussions":[{"author":{"id":1005890,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/59/42/e1757583.jpg","nickname":"Jason Yu 于航","note":"","ucode":"0731492F4BC77D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539086,"discussion_content":"这里实际上是跟蓝框内的第一条汇编语句做的对比。第一条的 mov 指令仅把值 1 当做 32 位值放入到 edx 中；而后续程序在使用这个值生成“token”时，实际上是直接用 rdx 来访问的，因此实际上是在进行左移时同时被“扩展”为了 64 位值。同样的，后面进行按位与时，也是直接以 64 位值进行的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639586331,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326239,"user_name":"柴","can_delete":false,"product_type":"c1","uid":2862943,"ip_address":"","ucode":"33B15B7A7D26D6","user_header":"https://static001.geekbang.org/account/avatar/00/2b/af/5f/19da4c77.jpg","comment_is_top":false,"comment_ctime":1639447939,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1639447939","product_id":100100701,"comment_content":"我在嵌入式程序里面，写过for( ; ; ;){}这样的死循环语句，其他的没啥印象","like_count":0,"discussions":[{"author":{"id":2622982,"avatar":"https://static001.geekbang.org/account/avatar/00/28/06/06/672e1c07.jpg","nickname":"就这样","note":"","ucode":"EB79D61524F809","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570377,"discussion_content":"不用写{}直接for(;;);","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651749297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1188710,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","nickname":"LDxy","note":"","ucode":"956432CE7B7761","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539015,"discussion_content":"与其写这么多分号，不如写while(1){}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639576361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326044,"user_name":"ppm","can_delete":false,"product_type":"c1","uid":2550034,"ip_address":"","ucode":"A52733E4654270","user_header":"https://static001.geekbang.org/account/avatar/00/26/e9/12/a1d173fe.jpg","comment_is_top":false,"comment_ctime":1639328621,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639328621","product_id":100100701,"comment_content":"延时或在case编译不过时","like_count":0}]}