{"id":773268,"title":"11｜TypeScript中的同名处理策略","content":"","comments":[{"had_liked":false,"id":390819,"user_name":"Jack Q","can_delete":false,"product_type":"c3","uid":1160078,"ip_address":"广东","ucode":"A7DBC311884FFA","user_header":"https://static001.geekbang.org/account/avatar/00/11/b3/8e/1c564eb2.jpg","comment_is_top":false,"comment_ctime":1716371727,"is_pvip":false,"replies":[{"id":142128,"content":"不错的总结。不过有一点小疏漏，在module W {}中的F不能“同名”重载，是语法问题，而非“不同域”。\n\n重载签名的语法在TS中是作为一个“块”，要么一次导出全部，要么就全部不导出的。并且由于函数（JS实体）不能被声明两次，所以在另一个同名的module中没办法再声明函数实体，进而也就不能声明更多的重载签名。","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1716377074,"ip_address":"江苏","comment_id":390819,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"function W() {\n  &#47;&#47; 会在js代码中创建对应的实体\n}\n&#47;&#47; 有添加属性时会自动创建一个同名的空 namespace\nW[&#39;0&#39;] = &quot;1&quot;;\n&#47;&#47; namespace 中未导出且未被使用的属性 不会出现在 .d.ts 中\nnamespace W {\n  &#47;&#47; interface A 被 class D 使用了, 所以会出现在 .d.ts中\n  interface A {\n    a: string;\n  }\n  export interface B {\n    b: string;\n  }\n  export class D implements A {\n    a = &quot;1&quot;;\n    static b: string = &quot;1&quot;;\n  }\n  function E(e: any) {}\n  &#47;&#47; 同一个域下允许 重载\n  export function F(f: number[]):void\n  export function F() {}\n  export const h: number = 1;\n}\n&#47;&#47; 在此处声明会导致 namespace 报错 (A namespace declaration cannot be located prior to a class or function with which it is merged)\n&#47;&#47; 如果一个命名空间 要与一个类或函数合并，那么这个命名空间的声明不能位于该类或函数的声明之前\n&#47;&#47; function X() {}\n\n&#47;&#47; module 最后会被转译为 同名的 namespace (module 在 TypeScript 1.5 中被弃用，改为使用 namespace)\nmodule W {\n  &#47;&#47; 虽然 namespace 同名 且发生了 合并\n  &#47;&#47; W 和 W 之间依旧是 不同域\n  &#47;&#47; 所以 module W 这里的 function F 无法重载\n  &#47;&#47; export function F(f: any[]):void\n  &#47;&#47; export function F() {}\n  interface I {\n    i: number;\n  }\n  export interface J {\n    j: number[];\n  }\n  class K {\n    static k: boolean = true;\n    setK() {}\n  }\n  export class L {\n    static l: string[] = [&quot;L&quot;];\n  }\n  &#47;&#47; ts 中 关于 K 的代码 最后会创建一个 class K (target &lt;= es5,则会创建一个 名为 K 的构造函数 ) 的 js 代码 和 一个 名为 K 的 实例类型()\n  &#47;&#47; 由于 类的实例类型可以被视为接口 \n  &#47;&#47; 所以 M (class) 可以 implements k (class)\n  export class M implements K {\n    setK() {}\n  }\n  export class N extends K {\n    &#47;&#47; override\n    &#47;&#47; wrong code (方法签名不兼容)\n    &#47;&#47; setK(v: number) {} \n    &#47;&#47; correct code\n    setK(v?: number) {}\n    &#47;&#47; 等效于 override setK(v?: number) {}\n  }\n}\n&#47;&#47; 此时发生了 合并\ntype WBI = W.B;\ntype WJI = W.J;\n&#47;&#47; 没有添加属性时不会被添加namespace\nfunction X() {}\ninterface Y {}\nclass Y {\n  &#47;&#47; 会在js代码中创建对应的实体\n}\nnamespace Y {}\n&#47;&#47; export default Y;\nenum Z {\n  &#47;&#47; 会在js代码中创建对应的实体\n  z = &quot;Z&quot;\n}","like_count":1,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645571,"discussion_content":"不错的总结。不过有一点小疏漏，在module W {}中的F不能“同名”重载，是语法问题，而非“不同域”。\n\n重载签名的语法在TS中是作为一个“块”，要么一次导出全部，要么就全部不导出的。并且由于函数（JS实体）不能被声明两次，所以在另一个同名的module中没办法再声明函数实体，进而也就不能声明更多的重载签名。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1716377074,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":390636,"user_name":"halo","can_delete":false,"product_type":"c3","uid":2866983,"ip_address":"广东","ucode":"574BDA398A81C6","user_header":"https://static001.geekbang.org/account/avatar/00/2b/bf/27/7f7acf6c.jpg","comment_is_top":false,"comment_ctime":1715840835,"is_pvip":false,"replies":[{"id":142088,"content":"谢谢鼓励。：）","user_name":"作者回复","user_name_real":"编辑","uid":1521669,"ctime":1715849645,"ip_address":"江苏","comment_id":390636,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100761001,"comment_content":"讲的太好了  深入浅出 应该是地表最强ts教程~感谢老师付出","like_count":1,"discussions":[{"author":{"id":1521669,"avatar":"https://static001.geekbang.org/account/avatar/00/17/38/05/7beecd5d.jpg","nickname":"Aiming","note":"","ucode":"66292B32F9960A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":645177,"discussion_content":"谢谢鼓励。：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1715849646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"江苏","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]}]}