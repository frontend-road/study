{"id":336766,"title":"03 | 基础架构：etcd一个写请求是如何执行的？","content":"<p>你好，我是唐聪。</p><p>在上一节课里，我通过分析etcd的一个读请求执行流程，给你介绍了etcd的基础架构，让你初步了解了在etcd的读请求流程中，各个模块是如何紧密协作，执行查询语句，返回数据给client。</p><p>那么etcd一个写请求执行流程又是怎样的呢？在执行写请求过程中，如果进程crash了，如何保证数据不丢、命令不重复执行呢？</p><p>今天我就和你聊聊etcd写过程中是如何解决这些问题的。希望通过这节课，让你了解一个key-value写入的原理，对etcd的基础架构中涉及写请求相关的模块有一定的理解，同时能触类旁通，当你在软件项目开发过程中遇到类似数据安全、幂等性等问题时，能设计出良好的方案解决它。</p><h2>整体架构</h2><p><img src=\"https://static001.geekbang.org/resource/image/8b/72/8b6dfa84bf8291369ea1803387906c72.png?wh=1920*1265\" alt=\"\"></p><p>为了让你能够更直观地理解etcd的写请求流程，我在如上的架构图中，用序号标识了下面的一个put hello为world的写请求的简要执行流程，帮助你从整体上快速了解一个写请求的全貌。</p><pre><code>etcdctl put hello world --endpoints http://127.0.0.1:2379\nOK\n\n</code></pre><p>首先client端通过负载均衡算法选择一个etcd节点，发起gRPC调用。然后etcd节点收到请求后经过gRPC拦截器、Quota模块后，进入KVServer模块，KVServer模块向Raft模块提交一个提案，提案内容为“大家好，请使用put方法执行一个key为hello，value为world的命令”。</p><!-- [[[read_end]]] --><p>随后此提案通过RaftHTTP网络模块转发、经过集群多数节点持久化后，状态会变成已提交，etcdserver从Raft模块获取已提交的日志条目，传递给Apply模块，Apply模块通过MVCC模块执行提案内容，更新状态机。</p><p>与读流程不一样的是写流程还涉及Quota、WAL、Apply三个模块。crash-safe及幂等性也正是基于WAL和Apply流程的consistent index等实现的，因此今天我会重点和你介绍这三个模块。</p><p>下面就让我们沿着写请求执行流程图，从0到1分析一个key-value是如何安全、幂等地持久化到磁盘的。</p><h2>Quota模块</h2><p>首先是流程一client端发起gRPC调用到etcd节点，和读请求不一样的是，写请求需要经过流程二db配额（Quota）模块，它有什么功能呢？</p><p>我们先从此模块的一个常见错误说起，你在使用etcd过程中是否遇到过\"etcdserver: mvcc: database space exceeded\"错误呢？</p><p>我相信只要你使用过etcd或者Kubernetes，大概率见过这个错误。它是指当前etcd db文件大小超过了配额，当出现此错误后，你的整个集群将不可写入，只读，对业务的影响非常大。</p><p>哪些情况会触发这个错误呢？</p><p>一方面默认db配额仅为2G，当你的业务数据、写入QPS、Kubernetes集群规模增大后，你的etcd db大小就可能会超过2G。</p><p>另一方面我们知道etcd v3是个MVCC数据库，保存了key的历史版本，当你未配置压缩策略的时候，随着数据不断写入，db大小会不断增大，导致超限。</p><p>最后你要特别注意的是，如果你使用的是etcd 3.2.10之前的旧版本，请注意备份可能会触发boltdb的一个Bug，它会导致db大小不断上涨，最终达到配额限制。</p><p>了解完触发Quota限制的原因后，我们再详细了解下Quota模块它是如何工作的。</p><p>当etcd server收到put/txn等写请求的时候，会首先检查下当前etcd db大小加上你请求的key-value大小之和是否超过了配额（quota-backend-bytes）。</p><p>如果超过了配额，它会产生一个告警（Alarm）请求，告警类型是NO SPACE，并通过Raft日志同步给其它节点，告知db无空间了，并将告警持久化存储到db中。</p><p>最终，无论是API层gRPC模块还是负责将Raft侧已提交的日志条目应用到状态机的Apply模块，都拒绝写入，集群只读。</p><p>那遇到这个错误时应该如何解决呢？</p><p>首先当然是调大配额。具体多大合适呢？etcd社区建议不超过8G。遇到过这个错误的你是否还记得，为什么当你把配额（quota-backend-bytes）调大后，集群依然拒绝写入呢?</p><p>原因就是我们前面提到的NO SPACE告警。Apply模块在执行每个命令的时候，都会去检查当前是否存在NO SPACE告警，如果有则拒绝写入。所以还需要你额外发送一个取消告警（etcdctl alarm disarm）的命令，以消除所有告警。</p><p>其次你需要检查etcd的压缩（compact）配置是否开启、配置是否合理。etcd保存了一个key所有变更历史版本，如果没有一个机制去回收旧的版本，那么内存和db大小就会一直膨胀，在etcd里面，压缩模块负责回收旧版本的工作。</p><p>压缩模块支持按多种方式回收旧版本，比如保留最近一段时间内的历史版本。不过你要注意，它仅仅是将旧版本占用的空间打个空闲（Free）标记，后续新的数据写入的时候可复用这块空间，而无需申请新的空间。</p><p>如果你需要回收空间，减少db大小，得使用碎片整理（defrag）， 它会遍历旧的db文件数据，写入到一个新的db文件。但是它对服务性能有较大影响，不建议你在生产集群频繁使用。</p><p>最后你需要注意配额（quota-backend-bytes）的行为，默认'0'就是使用etcd默认的2GB大小，你需要根据你的业务场景适当调优。如果你填的是个小于0的数，就会禁用配额功能，这可能会让你的db大小处于失控，导致性能下降，不建议你禁用配额。</p><h2>KVServer模块</h2><p>通过流程二的配额检查后，请求就从API层转发到了流程三的KVServer模块的put方法，我们知道etcd是基于Raft算法实现节点间数据复制的，因此它需要将put写请求内容打包成一个提案消息，提交给Raft模块。不过KVServer模块在提交提案前，还有如下的一系列检查和限速。</p><h3>Preflight Check</h3><p>为了保证集群稳定性，避免雪崩，任何提交到Raft模块的请求，都会做一些简单的限速判断。如下面的流程图所示，首先，如果Raft模块已提交的日志索引（committed index）比已应用到状态机的日志索引（applied index）超过了5000，那么它就返回一个\"etcdserver: too many requests\"错误给client。</p><p><img src=\"https://static001.geekbang.org/resource/image/dc/54/dc8e373e06f2ab5f63a7948c4a6c8554.png?wh=1164*1004\" alt=\"\"></p><p>然后它会尝试去获取请求中的鉴权信息，若使用了密码鉴权、请求中携带了token，如果token无效，则返回\"auth: invalid auth token\"错误给client。</p><p>其次它会检查你写入的包大小是否超过默认的1.5MB， 如果超过了会返回\"etcdserver: request is too large\"错误给给client。</p><h3>Propose</h3><p>最后通过一系列检查之后，会生成一个唯一的ID，将此请求关联到一个对应的消息通知channel，然后向Raft模块发起（Propose）一个提案（Proposal），提案内容为“大家好，请使用put方法执行一个key为hello，value为world的命令”，也就是整体架构图里的流程四。</p><p>向Raft模块发起提案后，KVServer模块会等待此put请求，等待写入结果通过消息通知channel返回或者超时。etcd默认超时时间是7秒（5秒磁盘IO延时+2*1秒竞选超时时间），如果一个请求超时未返回结果，则可能会出现你熟悉的etcdserver: request timed out错误。</p><h2>WAL模块</h2><p>Raft模块收到提案后，如果当前节点是Follower，它会转发给Leader，只有Leader才能处理写请求。Leader收到提案后，通过Raft模块输出待转发给Follower节点的消息和待持久化的日志条目，日志条目则封装了我们上面所说的put hello提案内容。</p><p>etcdserver从Raft模块获取到以上消息和日志条目后，作为Leader，它会将put提案消息广播给集群各个节点，同时需要把集群Leader任期号、投票信息、已提交索引、提案内容持久化到一个WAL（Write Ahead Log）日志文件中，用于保证集群的一致性、可恢复性，也就是我们图中的流程五模块。</p><p>WAL日志结构是怎样的呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/47/8d/479dec62ed1c31918a7c6cab8e6aa18d.png?wh=1920*1335\" alt=\"\"></p><p>上图是WAL结构，它由多种类型的WAL记录顺序追加写入组成，每个记录由类型、数据、循环冗余校验码组成。不同类型的记录通过Type字段区分，Data为对应记录内容，CRC为循环校验码信息。</p><p>WAL记录类型目前支持5种，分别是文件元数据记录、日志条目记录、状态信息记录、CRC记录、快照记录：</p><ul>\n<li>文件元数据记录包含节点ID、集群ID信息，它在WAL文件创建的时候写入；</li>\n<li>日志条目记录包含Raft日志信息，如put提案内容；</li>\n<li>状态信息记录，包含集群的任期号、节点投票信息等，一个日志文件中会有多条，以最后的记录为准；</li>\n<li>CRC记录包含上一个WAL文件的最后的CRC（循环冗余校验码）信息， 在创建、切割WAL文件时，作为第一条记录写入到新的WAL文件， 用于校验数据文件的完整性、准确性等；</li>\n<li>快照记录包含快照的任期号、日志索引信息，用于检查快照文件的准确性。</li>\n</ul><p>WAL模块又是如何持久化一个put提案的日志条目类型记录呢?</p><p>首先我们来看看put写请求如何封装在Raft日志条目里面。下面是Raft日志条目的数据结构信息，它由以下字段组成：</p><ul>\n<li>Term是Leader任期号，随着Leader选举增加；</li>\n<li>Index是日志条目的索引，单调递增增加；</li>\n<li>Type是日志类型，比如是普通的命令日志（EntryNormal）还是集群配置变更日志（EntryConfChange）；</li>\n<li>Data保存我们上面描述的put提案内容。</li>\n</ul><pre><code>type Entry struct {\n   Term             uint64    `protobuf:&quot;varint，2，opt，name=Term&quot; json:&quot;Term&quot;`\n   Index            uint64    `protobuf:&quot;varint，3，opt，name=Index&quot; json:&quot;Index&quot;`\n   Type             EntryType `protobuf:&quot;varint，1，opt，name=Type，enum=Raftpb.EntryType&quot; json:&quot;Type&quot;`\n   Data             []byte    `protobuf:&quot;bytes，4，opt，name=Data&quot; json:&quot;Data，omitempty&quot;`\n}\n</code></pre><p>了解完Raft日志条目数据结构后，我们再看WAL模块如何持久化Raft日志条目。它首先先将Raft日志条目内容（含任期号、索引、提案内容）序列化后保存到WAL记录的Data字段， 然后计算Data的CRC值，设置Type为Entry Type， 以上信息就组成了一个完整的WAL记录。</p><p>最后计算WAL记录的长度，顺序先写入WAL长度（Len Field），然后写入记录内容，调用fsync持久化到磁盘，完成将日志条目保存到持久化存储中。</p><p>当一半以上节点持久化此日志条目后， Raft模块就会通过channel告知etcdserver模块，put提案已经被集群多数节点确认，提案状态为已提交，你可以执行此提案内容了。</p><p>于是进入流程六，etcdserver模块从channel取出提案内容，添加到先进先出（FIFO）调度队列，随后通过Apply模块按入队顺序，异步、依次执行提案内容。</p><h2>Apply模块</h2><p>执行put提案内容对应我们架构图中的流程七，其细节图如下。那么Apply模块是如何执行put请求的呢？若put请求提案在执行流程七的时候etcd突然crash了， 重启恢复的时候，etcd是如何找回异常提案，再次执行的呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/5b/7f13edaf28yy7a6698e647104771235b.png?wh=1920*641\" alt=\"\"></p><p>核心就是我们上面介绍的WAL日志，因为提交给Apply模块执行的提案已获得多数节点确认、持久化，etcd重启时，会从WAL中解析出Raft日志条目内容，追加到Raft日志的存储中，并重放已提交的日志提案给Apply模块执行。</p><p>然而这又引发了另外一个问题，如何确保幂等性，防止提案重复执行导致数据混乱呢?</p><p>我们在上一节课里讲到，etcd是个MVCC数据库，每次更新都会生成新的版本号。如果没有幂等性保护，同样的命令，一部分节点执行一次，一部分节点遭遇异常故障后执行多次，则系统的各节点一致性状态无法得到保证，导致数据混乱，这是严重故障。</p><p>因此etcd必须要确保幂等性。怎么做呢？Apply模块从Raft模块获得的日志条目信息里，是否有唯一的字段能标识这个提案？</p><p>答案就是我们上面介绍Raft日志条目中的索引（index）字段。日志条目索引是全局单调递增的，每个日志条目索引对应一个提案， 如果一个命令执行后，我们在db里面也记录下当前已经执行过的日志条目索引，是不是就可以解决幂等性问题呢？</p><p>是的。但是这还不够安全，如果执行命令的请求更新成功了，更新index的请求却失败了，是不是一样会导致异常？</p><p>因此我们在实现上，还需要将两个操作作为原子性事务提交，才能实现幂等。</p><p>正如我们上面的讨论的这样，etcd通过引入一个consistent index的字段，来存储系统当前已经执行过的日志条目索引，实现幂等性。</p><p>Apply模块在执行提案内容前，首先会判断当前提案是否已经执行过了，如果执行了则直接返回，若未执行同时无db配额满告警，则进入到MVCC模块，开始与持久化存储模块打交道。</p><h2>MVCC</h2><p>Apply模块判断此提案未执行后，就会调用MVCC模块来执行提案内容。MVCC主要由两部分组成，一个是内存索引模块treeIndex，保存key的历史版本号信息，另一个是boltdb模块，用来持久化存储key-value数据。那么MVCC模块执行put hello为world命令时，它是如何构建内存索引和保存哪些数据到db呢？</p><h3>treeIndex</h3><p>首先我们来看MVCC的索引模块treeIndex，当收到更新key hello为world的时候，此key的索引版本号信息是怎么生成的呢？需要维护、持久化存储一个全局版本号吗？</p><p>版本号（revision）在etcd里面发挥着重大作用，它是etcd的逻辑时钟。etcd启动的时候默认版本号是1，随着你对key的增、删、改操作而全局单调递增。</p><p>因为boltdb中的key就包含此信息，所以etcd并不需要再去持久化一个全局版本号。我们只需要在启动的时候，从最小值1开始枚举到最大值，未读到数据的时候则结束，最后读出来的版本号即是当前etcd的最大版本号currentRevision。</p><p>MVCC写事务在执行put hello为world的请求时，会基于currentRevision自增生成新的revision如{2,0}，然后从treeIndex模块中查询key的创建版本号、修改次数信息。这些信息将填充到boltdb的value中，同时将用户的hello key和revision等信息存储到B-tree，也就是下面简易写事务图的流程一，整体架构图中的流程八。</p><p><img src=\"https://static001.geekbang.org/resource/image/a1/ff/a19a06d8f4cc5e488a114090d84116ff.png?wh=1920*1035\" alt=\"\"></p><h3>boltdb</h3><p>MVCC写事务自增全局版本号后生成的revision{2,0}，它就是boltdb的key，通过它就可以往boltdb写数据了，进入了整体架构图中的流程九。</p><p>boltdb上一篇我们提过它是一个基于B+tree实现的key-value嵌入式db，它通过提供桶（bucket）机制实现类似MySQL表的逻辑隔离。</p><p>在etcd里面你通过put/txn等KV API操作的数据，全部保存在一个名为key的桶里面，这个key桶在启动etcd的时候会自动创建。</p><p>除了保存用户KV数据的key桶，etcd本身及其它功能需要持久化存储的话，都会创建对应的桶。比如上面我们提到的etcd为了保证日志的幂等性，保存了一个名为consistent index的变量在db里面，它实际上就存储在元数据（meta）桶里面。</p><p>那么写入boltdb的value含有哪些信息呢？</p><p>写入boltdb的value， 并不是简单的\"world\"，如果只存一个用户value，索引又是保存在易失的内存上，那重启etcd后，我们就丢失了用户的key名，无法构建treeIndex模块了。</p><p>因此为了构建索引和支持Lease等特性，etcd会持久化以下信息:</p><ul>\n<li>key名称；</li>\n<li>key创建时的版本号（create_revision）、最后一次修改时的版本号（mod_revision）、key自身修改的次数（version）；</li>\n<li>value值；</li>\n<li>租约信息（后面介绍）。</li>\n</ul><p>boltdb value的值就是将含以上信息的结构体序列化成的二进制数据，然后通过boltdb提供的put接口，etcd就快速完成了将你的数据写入boltdb，对应上面简易写事务图的流程二。</p><p>但是put调用成功，就能够代表数据已经持久化到db文件了吗？</p><p>这里需要注意的是，在以上流程中，etcd并未提交事务（commit），因此数据只更新在boltdb所管理的内存数据结构中。</p><p>事务提交的过程，包含B+tree的平衡、分裂，将boltdb的脏数据（dirty page）、元数据信息刷新到磁盘，因此事务提交的开销是昂贵的。如果我们每次更新都提交事务，etcd写性能就会较差。</p><p>那么解决的办法是什么呢？etcd的解决方案是合并再合并。</p><p>首先boltdb key是版本号，put/delete操作时，都会基于当前版本号递增生成新的版本号，因此属于顺序写入，可以调整boltdb的bucket.FillPercent参数，使每个page填充更多数据，减少page的分裂次数并降低db空间。</p><p>其次etcd通过合并多个写事务请求，通常情况下，是异步机制定时（默认每隔100ms）将批量事务一次性提交（pending事务过多才会触发同步提交）， 从而大大提高吞吐量，对应上面简易写事务图的流程三。</p><p>但是这优化又引发了另外的一个问题， 因为事务未提交，读请求可能无法从boltdb获取到最新数据。</p><p>为了解决这个问题，etcd引入了一个bucket buffer来保存暂未提交的事务数据。在更新boltdb的时候，etcd也会同步数据到bucket buffer。因此etcd处理读请求的时候会优先从bucket buffer里面读取，其次再从boltdb读，通过bucket buffer实现读写性能提升，同时保证数据一致性。</p><h2>小结</h2><p>最后我们来小结一下，今天我给你介绍了etcd的写请求流程，重点介绍了Quota、WAL、Apply模块。</p><p>首先我们介绍了Quota模块工作原理和我们熟悉的database space exceeded错误触发原因，写请求导致db大小增加、compact策略不合理、boltdb Bug等都会导致db大小超限。</p><p>其次介绍了WAL模块的存储结构，它由一条条记录顺序写入组成，每个记录含有Type、CRC、Data，每个提案被提交前都会被持久化到WAL文件中，以保证集群的一致性和可恢复性。</p><p>随后我们介绍了Apply模块基于consistent index和事务实现了幂等性，保证了节点在异常情况下不会重复执行重放的提案。</p><p>最后我们介绍了MVCC模块是如何维护索引版本号、重启后如何从boltdb模块中获取内存索引结构的。以及etcd通过异步、批量提交事务机制，以提升写QPS和吞吐量。</p><p>通过以上介绍，希望你对etcd的一个写语句执行流程有个初步的理解，明白WAL模块、Apply模块、MVCC模块三者是如何相互协作的，从而实现在节点遭遇crash等异常情况下，不丢任何已提交的数据、不重复执行任何提案。</p><h2>思考题</h2><p>expensive read请求（如Kubernetes场景中查询大量pod）会影响写请求的性能吗？</p><p>你可以把你的思考和观点写在留言区里，我会在下一篇文章的末尾给出我的答案。</p><p>今天的课程就结束了，希望可以帮助到你，也希望你在下方的留言区和我参与讨论，同时欢迎你把这节课分享给你的朋友或者同事，一起交流一下。</p><h2>02思考题答案</h2><p>上节课我给大家留了一个思考题，评论中有同学说buffer没读到，从boltdb读时会产生磁盘I/O，这是一个常见误区。</p><p>实际上，etcd在启动的时候会通过mmap机制将etcd db文件映射到etcd进程地址空间，并设置了mmap的MAP_POPULATE flag，它会告诉Linux内核预读文件，Linux内核会将文件内容拷贝到物理内存中，此时会产生磁盘I/O。节点内存足够的请求下，后续处理读请求过程中就不会产生磁盘I/IO了。</p><p>若etcd节点内存不足，可能会导致db文件对应的内存页被换出，当读请求命中的页未在内存中时，就会产生缺页异常，导致读过程中产生磁盘IO，你可以通过观察etcd进程的majflt字段来判断etcd是否产生了主缺页中断。</p>","comments":[{"had_liked":false,"id":275600,"user_name":"唐聪","can_delete":false,"product_type":"c1","uid":1009582,"ip_address":"","ucode":"99CB061EDF35EA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","comment_is_top":false,"comment_ctime":1611617241,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"216359982041","product_id":100069901,"comment_content":"之前修复的存在3年多的不一致bug就是跟本节介绍的写请求幂等性有关，在每讲中，我提及的bug，特性缺点，大部分都是我之前踩过的坑，这些经验希望能帮助大家提前避免不必要的线上问题","like_count":51,"discussions":[{"author":{"id":1295167,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/oiboHpgukqib2ASXeU0H7W15zhRusOohD37CFCxSOnZfeOppkicDpOLVVmQYlbpw6rGib2Ib8smSFHZiaXXa7OJhHTQ/132","nickname":"scott","note":"","ucode":"2C9EC7D56D9848","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531110,"discussion_content":"请问一下有没有etcd源码学习交流群？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637232210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275675,"user_name":"Index","can_delete":false,"product_type":"c1","uid":1078909,"ip_address":"","ucode":"815A1A62F846CF","user_header":"https://static001.geekbang.org/account/avatar/00/10/76/7d/04c95885.jpg","comment_is_top":false,"comment_ctime":1611641176,"is_pvip":false,"replies":[{"id":"100075","content":"好的，谢谢你的认可，一起学习加油","user_name":"作者回复","comment_id":275675,"uid":"1009582","ip_address":"","utype":1,"ctime":1611668565,"user_name_real":"唐聪"}],"discussion_count":1,"race_medal":0,"score":"48856281432","product_id":100069901,"comment_content":"之前研究一段时间的etcd的源码，看的七七八八，现在再看这篇文章把之前的很多疑问都解答了，太棒了，etcd是个很优秀的项目，能把这么多的技术点融合在一起，实在是一个很好的开源学习项目。老师有空可以开直播，多聊聊etcd中涉及的技术点的一些学习，从源头上把知识融汇贯通，这样的学习真是酣畅淋漓","like_count":12,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514433,"discussion_content":"好的，谢谢你的认可，一起学习加油","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611668565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276178,"user_name":"于途","can_delete":false,"product_type":"c1","uid":1669343,"ip_address":"","ucode":"70300C6CCCEAF1","user_header":"https://static001.geekbang.org/account/avatar/00/19/78/df/424bdc4a.jpg","comment_is_top":false,"comment_ctime":1611822308,"is_pvip":true,"replies":[{"id":"100536","content":"第一个问题，10 boltdb篇会帮助你深入解答第1个问题，稍等<br>第二个问题，{2,0}={major,sub} 2是etcd mvcc事务版本号全局递增，0是事务内子版本号随修改操作递增（比如一个txn事务中多个put&#47;delete操作，其会从0递增)，因此第二次执行put hello world2的时候版本号应是{3,0}, 07 mvcc会详细介绍，明天更新","user_name":"作者回复","comment_id":276178,"uid":"1009582","ip_address":"","utype":1,"ctime":1612248505,"user_name_real":"唐聪"}],"discussion_count":1,"race_medal":0,"score":"31676593380","product_id":100069901,"comment_content":"1）首先 boltdb key 是版本号，put&#47;delete 操作时，都会基于当前版本号递增生成新的版本号，因此属于顺序写入，可以调整 boltdb 的 bucket.FillPercent 参数，使每个 page 填充更多数据，减少 page 的分裂次数并降低db空间。   此处的page 和 降低db空间不是很理解，劳烦老师解惑！<br><br>2）关于版本号(revision)的理解：假定全局版本号currentRevision=2，第一次执行 put hello world1，那么版本号为：hello:revision{2,0};第二次执行 put hello world2，此时版本号为：hello:revision{3,1};第3次执行 put hello world3，此时版本号为：hello:revision{4,2}。  不知理解是否有偏差？","like_count":8,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514620,"discussion_content":"第一个问题，10 boltdb篇会帮助你深入解答第1个问题，稍等\n第二个问题，{2,0}={major,sub} 2是etcd mvcc事务版本号全局递增，0是事务内子版本号随修改操作递增（比如一个txn事务中多个put/delete操作，其会从0递增)，因此第二次执行put hello world2的时候版本号应是{3,0}, 07 mvcc会详细介绍，明天更新","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612248505,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275714,"user_name":"TS.乔","can_delete":false,"product_type":"c1","uid":1502649,"ip_address":"","ucode":"1C412940605FF9","user_header":"https://static001.geekbang.org/account/avatar/00/16/ed/b9/510fb3e2.jpg","comment_is_top":false,"comment_ctime":1611651274,"is_pvip":false,"replies":[{"id":"100073","content":"嗯，谢谢你的建议，篇幅本身比较长就没继续扩展了，比如读写原理中，treeindex为什么用b-tree而不是其他数据结构，为什么使用boltdb而不是基于lsm树的leveldb等，后面答疑和其他讲我将适当和大家一起讨论","user_name":"作者回复","comment_id":275714,"uid":"1009582","ip_address":"","utype":1,"ctime":1611668506,"user_name_real":"唐聪"}],"discussion_count":2,"race_medal":0,"score":"31676422346","product_id":100069901,"comment_content":"希望在后面多加一下具体设计思路，以及特性取舍的东西","like_count":7,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514448,"discussion_content":"嗯，谢谢你的建议，篇幅本身比较长就没继续扩展了，比如读写原理中，treeindex为什么用b-tree而不是其他数据结构，为什么使用boltdb而不是基于lsm树的leveldb等，后面答疑和其他讲我将适当和大家一起讨论","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1611668506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345150,"discussion_content":"下一节也将分析etcd为什么使用raft而不是主备复制和去中心化复制等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611670688,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275661,"user_name":"jeffery","can_delete":false,"product_type":"c1","uid":1219972,"ip_address":"","ucode":"35E2DAA386FB86","user_header":"https://static001.geekbang.org/account/avatar/00/12/9d/84/171b2221.jpg","comment_is_top":false,"comment_ctime":1611637123,"is_pvip":false,"replies":[{"id":"100080","content":"谢谢，这个限速不是raft模块做的，raft是个单独共识算法库，是etcd server使用raft的时候，基于raft告知的committed index，本身apply模块的applied index做的限速，默认写死了5000","user_name":"作者回复","comment_id":275661,"uid":"1009582","ip_address":"","utype":1,"ctime":1611672443,"user_name_real":"唐聪"}],"discussion_count":1,"race_medal":0,"score":"27381440899","product_id":100069901,"comment_content":"原理讲的透彻、为啥applied index超过了 5000，返回一个&quot;etcdserver: too many requests&quot;错误给 client。raft源码定义的最大值吗？谢谢老师","like_count":7,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514428,"discussion_content":"谢谢，这个限速不是raft模块做的，raft是个单独共识算法库，是etcd server使用raft的时候，基于raft告知的committed index，本身apply模块的applied index做的限速，默认写死了5000","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611672443,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275715,"user_name":"七里","can_delete":false,"product_type":"c1","uid":1042604,"ip_address":"","ucode":"614A35DE72C739","user_header":"https://static001.geekbang.org/account/avatar/00/0f/e8/ac/7324d5ca.jpg","comment_is_top":false,"comment_ctime":1611651576,"is_pvip":false,"replies":[{"id":"100077","content":"就是key-value数据与consistent index在同一个boltdb事务中更新，boltdb后面会再单独介绍","user_name":"作者回复","comment_id":275715,"uid":"1009582","ip_address":"","utype":1,"ctime":1611671659,"user_name_real":"唐聪"}],"discussion_count":2,"race_medal":0,"score":"23086488056","product_id":100069901,"comment_content":"幂等部分的“原子性事务”如何实现的？","like_count":6,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514449,"discussion_content":"就是key-value数据与consistent index在同一个boltdb事务中更新，boltdb后面会再单独介绍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611671659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1145624,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/18/6e44e6e0.jpg","nickname":"恺撒之剑","note":"","ucode":"18F55D253647E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407265,"discussion_content":"也有此疑问，原来由boltdb事务保证原子性","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634960381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278407,"user_name":"Geek_5a8405","can_delete":false,"product_type":"c1","uid":2421596,"ip_address":"","ucode":"227449D010F147","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/rPaT2MzkXFmlmMTicGCRk5yVKqibPlloh66ibGJfoLQbgb6ficD3TkPmngR8UCEkrKZf5UbzvLlIglyYXBZibUINQ9Q/132","comment_is_top":false,"comment_ctime":1612928327,"is_pvip":false,"replies":[{"id":"101216","content":"赞，阅读过程中有深入思考，你可以看看04节raft，其中思考题与你说的类似，05有参考答案","user_name":"作者回复","comment_id":278407,"uid":"1009582","ip_address":"","utype":1,"ctime":1613054695,"user_name_real":"唐聪"}],"discussion_count":1,"race_medal":0,"score":"18792797511","product_id":100069901,"comment_content":"从节点收到Propose请求后会写wal日志吗？那如果最终并没有一半的节点成功响应，那已经写入wal的从节点怎么处理呢？","like_count":5,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515374,"discussion_content":"赞，阅读过程中有深入思考，你可以看看04节raft，其中思考题与你说的类似，05有参考答案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613054695,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277379,"user_name":"憨憨","can_delete":false,"product_type":"c1","uid":1504167,"ip_address":"","ucode":"B0174DE63247ED","user_header":"https://static001.geekbang.org/account/avatar/00/16/f3/a7/15ee1f00.jpg","comment_is_top":false,"comment_ctime":1612400244,"is_pvip":false,"replies":[{"id":"100682","content":"感谢认可😊","user_name":"作者回复","comment_id":277379,"uid":"1009582","ip_address":"","utype":1,"ctime":1612484071,"user_name_real":"唐聪"}],"discussion_count":1,"race_medal":0,"score":"18792269428","product_id":100069901,"comment_content":"讲的真好，干货十足","like_count":4,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515028,"discussion_content":"感谢认可😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612484071,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275434,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1611538935,"is_pvip":false,"discussion_count":4,"race_medal":0,"score":"18791408119","product_id":100069901,"comment_content":"会有影响。<br>1.如果读写请求都落到bucket buffer上，bucketbuffer需要做锁处理。<br>2.如果读写请求都落到boltdb上，db上的数据是从磁盘加载，同bucket buffer相比性能会下降一个数量级。<br>3.如果既落了bucket buffer，又落到了boltdb上。那么性能受到的影响介于1-2之间。","like_count":4,"discussions":[{"author":{"id":1181055,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/7f/d35ab9a1.jpg","nickname":"z.l","note":"","ucode":"805CC5784D3F76","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":397033,"discussion_content":"第一点，用读写锁不就行了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632545514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1233455,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d2/2f/04882ff8.jpg","nickname":"龙坤","note":"","ucode":"D1724E68D6304D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181055,"avatar":"https://static001.geekbang.org/account/avatar/00/12/05/7f/d35ab9a1.jpg","nickname":"z.l","note":"","ucode":"805CC5784D3F76","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":398198,"discussion_content":"mvcc机制有一点是为了解决并发读写性能问题，不需要悲观锁，它应用的原理是乐观锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632750646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":397033,"ip_address":""},"score":398198,"extra":""}]},{"author":{"id":1733275,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZzc3keFAJT12Sic3VYWx4PrZbCGDm4kBZD3oqnR4xsibGGtGy4tFO8y05Ims27SiaavA/132","nickname":"海阔天空","note":"","ucode":"8658B1610192E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344850,"discussion_content":"2落在boltdb时，不一定从磁盘加载吧，mmap\n映射到内存了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611585010,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1073125,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","nickname":"范闲","note":"","ucode":"F21FD7DF6BA53C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1733275,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJOBwR7MCVqwZzc3keFAJT12Sic3VYWx4PrZbCGDm4kBZD3oqnR4xsibGGtGy4tFO8y05Ims27SiaavA/132","nickname":"海阔天空","note":"","ucode":"8658B1610192E7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344857,"discussion_content":"不太了解boltdb的内部实现。如果是leveldb的话，先去memtable查，然后再从磁盘加载。\n对于2的情况来说，最好的情况在内存，最差的情况在磁盘。但是一定要有锁处理的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611586892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":344850,"ip_address":""},"score":344857,"extra":""}]}]},{"had_liked":false,"id":319988,"user_name":"励研冰","can_delete":false,"product_type":"c1","uid":1106394,"ip_address":"","ucode":"FCBC8266018FA0","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/da/d7f591a7.jpg","comment_is_top":false,"comment_ctime":1636028450,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14520930338","product_id":100069901,"comment_content":"这篇仔细读了好几遍每次都有不一样的收获跟理解，被很多设计细节跟思路所折服，最后整理了下发现etcd的写流程居然跟mysql中的设计有异曲同工之妙，比如mysql中的redolog，binlog，changebuff，内存缓存，事物合并提交等…….，最后有一个不明白的点是为什么在boltdb提交事物的时候不是用key的mod_revision而是要重新生成新的版本号","like_count":4,"discussions":[{"author":{"id":1311299,"avatar":"https://static001.geekbang.org/account/avatar/00/14/02/43/1c2fb7b3.jpg","nickname":"Bourne","note":"","ucode":"1286279F70B13F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534496,"discussion_content":"同感","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638199413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275601,"user_name":"云原生工程师","can_delete":false,"product_type":"c1","uid":2243294,"ip_address":"","ucode":"40CB692F21D3BC","user_header":"https://static001.geekbang.org/account/avatar/00/22/3a/de/e5c30589.jpg","comment_is_top":false,"comment_ctime":1611618129,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14496520017","product_id":100069901,"comment_content":"文章有点长，但读起来层层递进，有很大收获，发现之前自己所了解的还真不全面，填补了之前的一些空白面，期待后面的精彩内容","like_count":3},{"had_liked":false,"id":275596,"user_name":"kingstone","can_delete":false,"product_type":"c1","uid":1541689,"ip_address":"","ucode":"957342D964115E","user_header":"https://static001.geekbang.org/account/avatar/00/17/86/39/d12aaabf.jpg","comment_is_top":false,"comment_ctime":1611597550,"is_pvip":false,"replies":[{"id":"100042","content":"好问题，目前etcd没处理这种情况，它的类似是int64,最大值9223372036854775807，看起来是很难达到上限的","user_name":"作者回复","comment_id":275596,"uid":"1009582","ip_address":"","utype":1,"ctime":1611640915,"user_name_real":"唐聪"}],"discussion_count":1,"race_medal":0,"score":"14496499438","product_id":100069901,"comment_content":"请问revision如果超出了上限，revision会如何接着生成？","like_count":3,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514412,"discussion_content":"好问题，目前etcd没处理这种情况，它的类似是int64,最大值9223372036854775807，看起来是很难达到上限的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611640915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333835,"user_name":"Geek_604077","can_delete":false,"product_type":"c1","uid":1969081,"ip_address":"","ucode":"3BDCDCA9187514","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ib3Rzem884S5MOS96THy0gQXcF26PNsnRBpyr3pM5rVibZdYvAibpVvAGfibF1ddpgrteg9fQUsq4vce9EM95Jj97Q/132","comment_is_top":false,"comment_ctime":1644559237,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10234493829","product_id":100069901,"comment_content":"一篇都值回票价，醍醐灌顶，作者大佬太牛了","like_count":2},{"had_liked":false,"id":288746,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1618652870,"is_pvip":false,"replies":[{"id":"104897","content":"对，是一个全局单调递增的值，在boltdb中有一个key维护它，etcdserver应用已提交的raft日志条目到状态机时，会查询此日志条目的索引是否大于consistent index，如果大于则同key-value等数据在同boltdb事务中更新它，否则说明此日志条目已执行过。","user_name":"作者回复","comment_id":288746,"uid":"1009582","ip_address":"","utype":1,"ctime":1618885529,"user_name_real":"唐聪"}],"discussion_count":1,"race_medal":0,"score":"10208587462","product_id":100069901,"comment_content":"etcd 通过引入一个 consistent index 的字段，来存储系统当前已经执行过的日志条目索引，实现幂等性。<br>-----<br>consistent index 是一个全局的值吗，单调递增的?还是主要有raft日志应用到状态机，就会存储当前consistent index值吗，判断日志使用已经执行过，是需要进行key查找所有存储的consistent index值吗","like_count":3,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518724,"discussion_content":"对，是一个全局单调递增的值，在boltdb中有一个key维护它，etcdserver应用已提交的raft日志条目到状态机时，会查询此日志条目的索引是否大于consistent index，如果大于则同key-value等数据在同boltdb事务中更新它，否则说明此日志条目已执行过。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618885529,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281253,"user_name":"types","can_delete":false,"product_type":"c1","uid":2449777,"ip_address":"","ucode":"8B50927EF1804F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLDUJyeq54fiaXAgF62tNeocO3lHsKT4mygEcNoZLnibg6ONKicMgCgUHSfgW8hrMUXlwpNSzR8MHZwg/132","comment_is_top":false,"comment_ctime":1614665434,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10204600026","product_id":100069901,"comment_content":"1. consistent index具体是如何保存的，如何实现跟具体操作实现原子性提交的<br>2. readIndex跟consistent index儒者WAL index什么关系？ ReadIndex一定要处于commited吗？","like_count":3},{"had_liked":false,"id":312528,"user_name":"types","can_delete":false,"product_type":"c1","uid":2449777,"ip_address":"","ucode":"8B50927EF1804F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLDUJyeq54fiaXAgF62tNeocO3lHsKT4mygEcNoZLnibg6ONKicMgCgUHSfgW8hrMUXlwpNSzR8MHZwg/132","comment_is_top":false,"comment_ctime":1631849411,"is_pvip":false,"replies":[{"id":"113249","content":"串行","user_name":"作者回复","comment_id":312528,"uid":"1009582","ip_address":"","utype":1,"ctime":1631887237,"user_name_real":"唐聪"}],"discussion_count":1,"race_medal":0,"score":"5926816707","product_id":100069901,"comment_content":"Apply模块针对写请求，是串行执行的还是并发执行的？","like_count":2,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527001,"discussion_content":"串行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631887237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279555,"user_name":"恰同学少年。","can_delete":false,"product_type":"c1","uid":1928162,"ip_address":"","ucode":"4D4BC29421A245","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6b/e2/f02e45df.jpg","comment_is_top":false,"comment_ctime":1613820177,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5908787473","product_id":100069901,"comment_content":"感觉不太会。<br>1. client有负载均衡不会有很多请求都直接到主？<br>2. v3支持多路复用（这样到主链接数应该不会太多）<br>3. 线性读请求只会向主发获取ReadIndex的请求，还挺轻量的。<br>4. boltdb只有启动时会加载db文件并映射到mmap，内存够就不会有磁盘IO，所以影响也不大。","like_count":2},{"had_liked":false,"id":279472,"user_name":"浮生六记","can_delete":false,"product_type":"c1","uid":1134354,"ip_address":"","ucode":"5BEB409EF2B092","user_header":"https://static001.geekbang.org/account/avatar/00/11/4f/12/e1564440.jpg","comment_is_top":false,"comment_ctime":1613796305,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"5908763601","product_id":100069901,"comment_content":"&quot;其次 etcd 通过合并多个写事务请求，通常情况下，是异步机制定时（默认每隔 100ms）将批量事务一次性提交（pending 事务过多才会触发同步提交）， 从而大大提高吞吐量，对应上面简易写事务图的流程三。&quot;<br><br>你好，异步提交的事务，突然crash的话，如果保证安全写入磁盘呢？是boltdb有什么机制保证吗？我在boltdb那个章节没有看到相关内容，就此请教一下。","like_count":1,"discussions":[{"author":{"id":1928162,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/6b/e2/f02e45df.jpg","nickname":"恰同学少年。","note":"","ucode":"4D4BC29421A245","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350352,"discussion_content":"个人感觉是通过consistent index保证的，只有commit的事务consistent index才会记下来。不然etcd重启会根据WAL中的数据进行重放执行的。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1613819600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1134354,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4f/12/e1564440.jpg","nickname":"浮生六记","note":"","ucode":"5BEB409EF2B092","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1928162,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/6b/e2/f02e45df.jpg","nickname":"恰同学少年。","note":"","ucode":"4D4BC29421A245","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350671,"discussion_content":"嗯，我估计也是如此，我看了几个章节，感觉还是不能偷懒，还是得自己对着代码读一读，才能有正在的收获。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613975665,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":350352,"ip_address":""},"score":350671,"extra":""}]}]},{"had_liked":false,"id":276153,"user_name":"于途","can_delete":false,"product_type":"c1","uid":1669343,"ip_address":"","ucode":"70300C6CCCEAF1","user_header":"https://static001.geekbang.org/account/avatar/00/19/78/df/424bdc4a.jpg","comment_is_top":false,"comment_ctime":1611815869,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5906783165","product_id":100069901,"comment_content":"etcd 默认超时时间是 7 秒（5 秒磁盘 IO 延时 +2*1 秒竞选超时时间）<br><br>老师，“竞选超时时间”具体指的是什么？还有磁盘IO延时要怎么理解比较贴切？","like_count":1},{"had_liked":false,"id":275813,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1611674971,"is_pvip":true,"replies":[{"id":"100199","content":"boltdb的db文件，你可以在etcd的数据目录snap目录下看到有个名为db的文件，实践篇我会介绍db文件过大又哪些问题，etcd定位就是个小型的关键元数据存储","user_name":"作者回复","comment_id":275813,"uid":"1009582","ip_address":"","utype":1,"ctime":1611747447,"user_name_real":"唐聪"}],"discussion_count":1,"race_medal":0,"score":"5906642267","product_id":100069901,"comment_content":"这里 db 配额（Quota）的限制哪个地方的大小的？ 为什么会有这样的限制呢？ 这个限制是  boltdb 全部数据 持久化后的文件大小吗？","like_count":2,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514484,"discussion_content":"boltdb的db文件，你可以在etcd的数据目录snap目录下看到有个名为db的文件，实践篇我会介绍db文件过大又哪些问题，etcd定位就是个小型的关键元数据存储","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611747447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275522,"user_name":"mckee","can_delete":false,"product_type":"c1","uid":1066511,"ip_address":"","ucode":"E4DEBB462B93A1","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/0f/f6cfc659.jpg","comment_is_top":false,"comment_ctime":1611570366,"is_pvip":false,"replies":[{"id":"100032","content":"compact是非常常规的操作，只要db文件不是特别大，大小保持稳定就不用defrag哈，后面会详细介绍","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611638367,"ip_address":"","comment_id":275522,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5906537662","product_id":100069901,"comment_content":"compact后没有defrag的话对性能有影响吗","like_count":2,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514381,"discussion_content":"compact是非常常规的操作，只要db文件不是特别大，大小保持稳定就不用defrag哈，后面会详细介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611638367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351669,"user_name":"Geek_43032e","can_delete":false,"product_type":"c1","uid":1399477,"ip_address":"","ucode":"7F5108CAE16160","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJnv4h4j5tWyyI5h0hqCa7rgsqW9YJHPVvNPpSaN5wQLAGaheKiaa4ALujaZOX7S3vPcg9ODsyLBiaQ/132","comment_is_top":false,"comment_ctime":1658068756,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658068756","product_id":100069901,"comment_content":"raft持久化的内容包括log、votedFor(保存了在一个term内为哪个候选人投了票的信息)、currentTerm，不会记录committed index。在raft集群故障恢复时，会利用log恢复到一个一致性的状态，在实际使用时通常还会实现log compaction and snapshots功能以缩短故障恢复时间","like_count":0},{"had_liked":false,"id":347898,"user_name":"陆Zzz~","can_delete":false,"product_type":"c1","uid":2580648,"ip_address":"","ucode":"EDCCF83403CC65","user_header":"https://static001.geekbang.org/account/avatar/00/27/60/a8/bdc3d42e.jpg","comment_is_top":false,"comment_ctime":1654566660,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1654566660","product_id":100069901,"comment_content":"老师我有个疑问，文中说只要保证同一个索引的日志执行一次就能幂等，假设有一条命令，客户端发送给了raft并且提交但是还没apply，然后客户端觉得失败了，又发送一次，这时会生成一条新的日志，那么这两条日志其实只是上层的一条日志，这种情况怎么保证幂等呢","like_count":0},{"had_liked":false,"id":346528,"user_name":"蓝风","can_delete":false,"product_type":"c1","uid":2979239,"ip_address":"","ucode":"6CC0E755E88247","user_header":"https://static001.geekbang.org/account/avatar/00/2d/75/a7/76ca047c.jpg","comment_is_top":false,"comment_ctime":1653214860,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653214860","product_id":100069901,"comment_content":"1.etcd quota 指的是内存空间还是磁盘空间？<br>2.etcd 重启时，会从 WAL 中解析出 Raft 日志条目内容，追加到 Raft 日志的存储中，并重放已提交的日志提案给 Apply 模块执行。中的“追加到Raft日志的存储中” 是指什么？需要单独的区域存储日志？是磁盘空间还是内存？是不是可以理解为先把wal里面日志先读到内存，然后再根据内存的数据去让Apply模块重放？","like_count":0},{"had_liked":false,"id":339453,"user_name":"Geek_013d3d","can_delete":false,"product_type":"c1","uid":2775971,"ip_address":"","ucode":"55B7D002D66938","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqrmEUn2jvPbqqHTgcUzMSfI0Dvv7OZTHXyPgvN78qgoPBrejAlVgmicicicHKAPZiaewaXCKEsYicqL8A/132","comment_is_top":false,"comment_ctime":1648111342,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648111342","product_id":100069901,"comment_content":"你好，请教个问题，follower节点接受到写请求后，会转发给leader，leader apply该消息后，follower是如何拿到这个请求的结果的？","like_count":0},{"had_liked":false,"id":337851,"user_name":"Geek_87a588","can_delete":false,"product_type":"c1","uid":2885926,"ip_address":"","ucode":"E594E9A4E035FF","user_header":"","comment_is_top":false,"comment_ctime":1647093949,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647093949","product_id":100069901,"comment_content":"老师，etcdserver指的是什么呀，是指的是整个etcd集群吗？还是一个etcd节点，或者etcd节点中一个模块？","like_count":0},{"had_liked":false,"id":337237,"user_name":"追风筝的人","can_delete":false,"product_type":"c1","uid":1488020,"ip_address":"","ucode":"2993D60F94C396","user_header":"https://static001.geekbang.org/account/avatar/00/16/b4/94/2796de72.jpg","comment_is_top":false,"comment_ctime":1646710224,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1646710224","product_id":100069901,"comment_content":"老师  感觉mysql 比较容易入门， ETCD 不好学  脑壳疼  是不是不适合学ETCD ?","like_count":0},{"had_liked":false,"id":328868,"user_name":"残天噬魂","can_delete":false,"product_type":"c1","uid":1506609,"ip_address":"","ucode":"A2AD8303A4518D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/q2HwchogzNiavKhIB4GfAxH6B88NhSoC7B7keVEUqiaP6JPokDUNJLYehocOyqYqrhA3iaxywyRXLYkYJjDUQESZw/132","comment_is_top":false,"comment_ctime":1640921325,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640921325","product_id":100069901,"comment_content":"老师，这个Quota 模块是干什么用的？","like_count":0},{"had_liked":false,"id":321919,"user_name":"Adam","can_delete":false,"product_type":"c1","uid":1305633,"ip_address":"","ucode":"338BA720880E4F","user_header":"https://static001.geekbang.org/account/avatar/00/13/ec/21/b0fe1bfd.jpg","comment_is_top":false,"comment_ctime":1637110717,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637110717","product_id":100069901,"comment_content":"老师，假如我的etcd 集群部署在k8s中，通过lb 的方式暴露服务出来，集群外的apisix 通过slb 地址去访问etcd 服务是不是也是负载均衡的方式？","like_count":0},{"had_liked":false,"id":314310,"user_name":"八台上","can_delete":false,"product_type":"c1","uid":1391143,"ip_address":"","ucode":"FB3D74B522C720","user_header":"https://static001.geekbang.org/account/avatar/00/15/3a/27/5d218272.jpg","comment_is_top":false,"comment_ctime":1632967722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632967722","product_id":100069901,"comment_content":"老是想问一下 客户端收到etcdserver: request timed out 这个错误时， 提案提交成功了吗？ 是否需要重新提交提案呢？      还有就是客户端再提交一个写请求后什么时候返回给客户端呢","like_count":0},{"had_liked":false,"id":313968,"user_name":"types","can_delete":false,"product_type":"c1","uid":2449777,"ip_address":"","ucode":"8B50927EF1804F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLDUJyeq54fiaXAgF62tNeocO3lHsKT4mygEcNoZLnibg6ONKicMgCgUHSfgW8hrMUXlwpNSzR8MHZwg/132","comment_is_top":false,"comment_ctime":1632761176,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632761176","product_id":100069901,"comment_content":"文中提及： 这里需要注意的是，在以上流程中，etcd 并未提交事务（commit），因此数据只更新在 boltdb 所管理的内存数据结构中。<br>boltdb所管理的内存数据结构，文中提到交bucket buffer，请问这个bucket buffer跟treeindex简易写事务图（流程2）中的buffer是一个buffer吗？","like_count":0},{"had_liked":false,"id":312985,"user_name":"Vincent","can_delete":false,"product_type":"c1","uid":1087978,"ip_address":"","ucode":"CE4942FD556842","user_header":"https://static001.geekbang.org/account/avatar/00/10/99/ea/0d7b8cdc.jpg","comment_is_top":false,"comment_ctime":1632188350,"is_pvip":true,"replies":[{"id":"114593","content":"嗯，一般我们都是先将集群db配额调大，然后解除告警快速恢复集群，保证集群可用。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1634312624,"ip_address":"","comment_id":312985,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632188350","product_id":100069901,"comment_content":"唐老师好，文中有提到 compact 之后只是将空间标记为 free，还需要 defrag 才能释放空间，如果我此时直接 disalarm 不defrag 是不是可以先将集群恢复？ 先保证集群可用。","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527190,"discussion_content":"嗯，一般我们都是先将集群db配额调大，然后解除告警快速恢复集群，保证集群可用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634312624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312296,"user_name":"神毓逍遥","can_delete":false,"product_type":"c1","uid":2147220,"ip_address":"","ucode":"83351CB18B190E","user_header":"https://static001.geekbang.org/account/avatar/00/20/c3/94/e89ebc50.jpg","comment_is_top":false,"comment_ctime":1631721846,"is_pvip":true,"replies":[{"id":"113193","content":"嗯","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1631796440,"ip_address":"","comment_id":312296,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631721846","product_id":100069901,"comment_content":"很不错，本章节主要掌握写流程，然后可以跟读流程对比分析与学习，主要在于 Quota,WAL,APPLY 三块，由于是后两者细节比较多","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526928,"discussion_content":"嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631796440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304017,"user_name":"Geek_7d539e","can_delete":false,"product_type":"c1","uid":2037654,"ip_address":"","ucode":"0D116E904D616E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIVvyFCLRcfoWfiaJt99K0wiabvicWtQaJdSseVA6QqWyxcvN5nd2TgZqiaUACc94bBvPHZTibnfnZfdtQ/132","comment_is_top":false,"comment_ctime":1627184275,"is_pvip":false,"replies":[{"id":"110131","content":"是的，一个boltdb事务中包含多个key-value操作，有用户的，也有etcd所维护的元数据，bucket name不一样而已。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1627366394,"ip_address":"","comment_id":304017,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627184275","product_id":100069901,"comment_content":"说到幂等性时，提到了一个原子操作。执行命令的请求更新成功了，同时更新 index ，两个操作作为一个原子操作。在 boltdb 环节里面提到异步批量提交操作，这个原子操作是在异步提交时同时完成对应日志条目的入库后一起完成的吗？请教下","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523901,"discussion_content":"是的，一个boltdb事务中包含多个key-value操作，有用户的，也有etcd所维护的元数据，bucket name不一样而已。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627366394,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":302102,"user_name":"撸起袖子加油干","can_delete":false,"product_type":"c1","uid":1620279,"ip_address":"","ucode":"F35BA2C64BC5AA","user_header":"https://static001.geekbang.org/account/avatar/00/18/b9/37/87755dd8.jpg","comment_is_top":false,"comment_ctime":1626081029,"is_pvip":false,"replies":[{"id":"112705","content":"etcdctl是无法查看的子&#47;次版本号, 如果你想调试etcd，一方面你可以加日志，另一方面你可以通过etcd-dump-db工具查看,它可以打印key-value数据，不过也不直观","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1631028639,"ip_address":"","comment_id":302102,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626081029","product_id":100069901,"comment_content":"请问老师次版本号怎么查看？我用 etcdctl get key -w=fileds 只能看到主版本号。","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523181,"discussion_content":"etcdctl是无法查看的子/次版本号, 如果你想调试etcd，一方面你可以加日志，另一方面你可以通过etcd-dump-db工具查看,它可以打印key-value数据，不过也不直观","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631028639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301788,"user_name":"金时","can_delete":false,"product_type":"c1","uid":1120428,"ip_address":"","ucode":"3491B2367A7238","user_header":"https://static001.geekbang.org/account/avatar/00/11/18/ac/4d68ba46.jpg","comment_is_top":false,"comment_ctime":1625882003,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625882003","product_id":100069901,"comment_content":"如果leader 节点宕机起不来了，会造成丢失数据吗","like_count":0},{"had_liked":false,"id":288951,"user_name":"jssfy","can_delete":false,"product_type":"c1","uid":1137238,"ip_address":"","ucode":"F16353CFE607B7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/56/115c6433.jpg","comment_is_top":false,"comment_ctime":1618797631,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1618797631","product_id":100069901,"comment_content":"有wal可以避免操作产生不一致，那非稳定的raft日志和稳定的raft日志存在的必要性是什么呢?","like_count":0,"discussions":[{"author":{"id":1535604,"avatar":"https://static001.geekbang.org/account/avatar/00/17/6e/74/1bd3eef0.jpg","nickname":"夏商周","note":"","ucode":"1EBC83100FE82F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377028,"discussion_content":"unstable写了就要写wal，日志就稳定了。storage，更像一个状态机，维护raft的状态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622468583,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288752,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1618653340,"is_pvip":false,"replies":[{"id":"104898","content":"不仅仅是这个目的哈，最重要核心过程是重建treeIndex模块","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1618885617,"ip_address":"","comment_id":288752,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618653340","product_id":100069901,"comment_content":"因为 boltdb 中的 key 就包含此信息，所以 etcd 并不需要再去持久化一个全局版本号。我们只需要在启动的时候，从最小值 1 开始枚举到最大值，未读到数据的时候则结束，最后读出来的版本号即是当前 etcd 的最大版本号 currentRevision。<br>------<br>为了取得一个最大的版本号，要扫描整个db的key吗？ 这开销太大了吧？","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518727,"discussion_content":"不仅仅是这个目的哈，最重要核心过程是重建treeIndex模块","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618885617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288750,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1618653269,"is_pvip":false,"replies":[{"id":"104896","content":"嗯，这里结合上下文，是指第一次启动","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1618884976,"ip_address":"","comment_id":288750,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618653269","product_id":100069901,"comment_content":"版本号（revision）在 etcd 里面发挥着重大作用，它是 etcd 的逻辑时钟。etcd 启动的时候默认版本号是 1，随着你对 key 的增、删、改操作而全局单调递增。<br>----------<br>理解应该是第一次启动的时候，默认版本号才是1把，后续重启服务版本号应该不会重置为0吧？","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518726,"discussion_content":"嗯，这里结合上下文，是指第一次启动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618884976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288748,"user_name":"花晨少年","can_delete":false,"product_type":"c1","uid":1098987,"ip_address":"","ucode":"6AA3537A6BA10E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c4/eb/2285a345.jpg","comment_is_top":false,"comment_ctime":1618652969,"is_pvip":false,"replies":[{"id":"104899","content":"int64的哈，很难超过，目前社区是没考虑超过int64","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1618885678,"ip_address":"","comment_id":288748,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618652969","product_id":100069901,"comment_content":"这里提到很多种类的index值，都是单调递增的，比如说这个值如果是uint32，超过值范围后，是怎么处理，从0开始吗。","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518725,"discussion_content":"int64的哈，很难超过，目前社区是没考虑超过int64","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618885678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286420,"user_name":"Remember九离","can_delete":false,"product_type":"c1","uid":1237327,"ip_address":"","ucode":"97EE6E6344689F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/4f/00476b4c.jpg","comment_is_top":false,"comment_ctime":1617289962,"is_pvip":false,"replies":[{"id":"104092","content":"在etcd3中，你可以简单理解为，状态机的输入是Raft模块已提交的日志条目命令，状态机包含了MVCC等模块，使用boltdb等来保存kv数据等，负责维护整个集群的状态数据等，在04篇有个状态机相关的架构图","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1617436624,"ip_address":"","comment_id":286420,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1617289962","product_id":100069901,"comment_content":"有个问题：文中的状态机到底是啥？代表图中的哪个流程？它是干啥用的？活着谁在用它？","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517980,"discussion_content":"在etcd3中，你可以简单理解为，状态机的输入是Raft模块已提交的日志条目命令，状态机包含了MVCC等模块，使用boltdb等来保存kv数据等，负责维护整个集群的状态数据等，在04篇有个状态机相关的架构图","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617436624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2979239,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/75/a7/76ca047c.jpg","nickname":"蓝风","note":"","ucode":"6CC0E755E88247","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":583825,"discussion_content":"就是etcd的数据库","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660408923,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279668,"user_name":"tianfeiyu","can_delete":false,"product_type":"c1","uid":1157786,"ip_address":"","ucode":"E65E6841AD5D7F","user_header":"https://static001.geekbang.org/account/avatar/00/11/aa/9a/92d2df36.jpg","comment_is_top":false,"comment_ctime":1613897066,"is_pvip":false,"replies":[{"id":"101581","content":"boltdb没有一个单独的目录，它在snap目录下，db文件就是它哈","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1613904896,"ip_address":"","comment_id":279668,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1613897066","product_id":100069901,"comment_content":"老师，问一下，boltdb 的数据存储在哪，只看了 etcd 保存的数据在 member 目录下有 snap 和 wal 两个目录，没有看到 boltdb 数据的存储目录","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515821,"discussion_content":"boltdb没有一个单独的目录，它在snap目录下，db文件就是它哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613904896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277521,"user_name":"巅","can_delete":false,"product_type":"c1","uid":1363244,"ip_address":"","ucode":"18239CFA501049","user_header":"https://static001.geekbang.org/account/avatar/00/14/cd/2c/a02a8372.jpg","comment_is_top":false,"comment_ctime":1612441611,"is_pvip":false,"replies":[{"id":"104095","content":"raft模块会批量将待持久化日志条目通知给etcdserver，同时是顺序写，因此性能消耗还好","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1617438943,"ip_address":"","comment_id":277521,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1612441611","product_id":100069901,"comment_content":"【然后写入记录内容，调用 fsync 持久化到磁盘】，wal有buffer吗，不然每个日志都要半数节点写盘，这个消耗是不是太大了","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515079,"discussion_content":"raft模块会批量将待持久化日志条目通知给etcdserver，同时是顺序写，因此性能消耗还好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617438943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277243,"user_name":"lucasun","can_delete":false,"product_type":"c1","uid":1887574,"ip_address":"","ucode":"5B900BC7C36F43","user_header":"https://static001.geekbang.org/account/avatar/00/1c/cd/56/dca89081.jpg","comment_is_top":false,"comment_ctime":1612329020,"is_pvip":false,"replies":[{"id":"100601","content":"嗯，boltdb本身没限制，etcd主动限制的，原因分析实践篇会介绍，稍等哈","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1612342422,"ip_address":"","comment_id":277243,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1612329020","product_id":100069901,"comment_content":"请问限制ETCD DB max size的瓶颈在哪，我看B+树 db size可以支持到很大，boltdb应该没有这个限制","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514973,"discussion_content":"嗯，boltdb本身没限制，etcd主动限制的，原因分析实践篇会介绍，稍等哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612342422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276930,"user_name":"大远","can_delete":false,"product_type":"c1","uid":1365409,"ip_address":"","ucode":"A2421ACDD78490","user_header":"https://static001.geekbang.org/account/avatar/00/14/d5/a1/9800de2f.jpg","comment_is_top":false,"comment_ctime":1612181642,"is_pvip":false,"replies":[{"id":"104096","content":"在文中是指一个已提交的raft日志条目命令，执行多次与执行一次效果一样。在各个业务场景在中，一般它是指一个接口是否可以重复多次调用，多次调用效果与一次调用一致，接口如实现了幂等性，可以简化client复杂度。","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1617439550,"ip_address":"","comment_id":276930,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1612181642","product_id":100069901,"comment_content":"幂等性是啥","like_count":1,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514872,"discussion_content":"在文中是指一个已提交的raft日志条目命令，执行多次与执行一次效果一样。在各个业务场景在中，一般它是指一个接口是否可以重复多次调用，多次调用效果与一次调用一致，接口如实现了幂等性，可以简化client复杂度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617439550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1480362,"avatar":"https://static001.geekbang.org/account/avatar/00/16/96/aa/dd1fe788.jpg","nickname":"张张张张先森啊","note":"","ucode":"3388250093FEFA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":359105,"discussion_content":"比如页面表单提交重复点了两次，那么后台不可能去执行两次，幂等性就是保证在重复提交时只会有一次提交内容正常执行","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1616117087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1083454,"avatar":"https://static001.geekbang.org/account/avatar/00/10/88/3e/5a91d9f3.jpg","nickname":"东风","note":"","ucode":"EB0214A64B28E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348600,"discussion_content":"不懂google一下啊，基础知识","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612663903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276044,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1611757032,"is_pvip":true,"replies":[{"id":"100281","content":"嗯，压缩会删除旧版本，07 mvcc会详细介绍","user_name":"作者回复","user_name_real":"唐聪","uid":"1009582","ctime":1611845473,"ip_address":"","comment_id":276044,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611757032","product_id":100069901,"comment_content":"boltdb 会保存 key 的所有修改版本信息吗？","like_count":0,"discussions":[{"author":{"id":1009582,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/67/ae/37b492db.jpg","nickname":"唐聪","note":"","ucode":"99CB061EDF35EA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514578,"discussion_content":"嗯，压缩会删除旧版本，07 mvcc会详细介绍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611845473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}