{"id":633063,"title":"31｜CQRS（上）：实现查询功能有什么诀窍？","content":"<p>你好，我是钟敬。</p><p>前面几节课我们讲完了限界上下文。接下来的两节课，我们将学习一个和查询功能相关的模式——CQRS。虽然 《领域驱动设计》原书里没有这个模式，但近年来，CQRS 常常和 DDD 结合使用。</p><p>不过也有人对 CQRS有不同意见。这是因为，CQRS 实际上也有不同的变化，这就造成了不同的人对 CQRS 的理解也不太一样。学完这两节课，我想你就知道怎么分辨了。</p><p>CQRS 是 Command Query Responsibility Segregation 的简称，中文是 “命令查询职责分离”。这个名字乍听起来也不太好理解，咱们还是从业务需求开始，一步一步地理解。</p><h2>查询功能遇到的问题</h2><p>在第三个迭代中，在工时管理上下文，增加了更多的查询和统计需求。</p><p>我们先看一个简单的需求，给定一个工时项，要求查询出这个工时项下的所有工时记录，并显示在屏幕上。要求每条返回记录的字段包括“员工号”“员工姓名”“日期”“工时”和“备注”，并根据员工号和日期升序排序。为了简化问题，我们先不考虑“不在本级报工时”以及“父子工时项”的问题。</p><p>我们回忆一下工时项管理的领域模型。</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/66/6a7c2bd3bc372920b99f6e2a97cfbf66.jpg?wh=3118x2324\" alt=\"\"></p><p>根据之前学习的数据库设计以及上下文映射的方法，假定我们选择的是在本地建立员工表，并从“基础信息管理”上下文映射<strong>员工</strong>信息的策略。那么本地数据库会有<strong>员工</strong>（emp）表和<strong>工时记录</strong>（effort_record）表。</p><!-- [[[read_end]]] --><p>在没有学习DDD之前，其实这个需求很简单，只要一条SQL语句就可以搞定了。大概是后面这样。</p><pre><code class=\"language-sql\">select em.num, em.name, er.work_date, er.effort, er.notes\nfrom effort_record as er\n  left join emp as em\n    on er.emp_id = em.id\n       and er.tenant_id = em.tenant_id\nwhere er.tenant_id = ?\n  and er.effort_item_id = ?\n  order by em.num, er.work_date;\n</code></pre><p>这个查询是把 effort_record（工时记录表）和 emp（员工）表做了一个表连接，然后根据 effort_item_id （工时项ID）查出相应的数据。</p><p>但是，现在学了 DDD，再要实现这个功能，你可能会觉得反而更麻烦了。因为这时候要经过领域模型得到这个查询结果。我把设计层面的类图画出来，来辅助我们的思考。</p><p><img src=\"https://static001.geekbang.org/resource/image/06/96/06865f9634e4d935714dcdd1310f7896.jpg?wh=3600x3185\" alt=\"\"></p><p>我们从 EffortRecordService（也就是工时记录服务）开始看。这个服务中的方法会接收一个EffortItemID（工时项ID），最后返回一个含有所需数据的列表。每一条数据记录封装在名为 EmpEffortRecordDto 的DTO里。</p><p>具体包括三步。</p><p>第一步，工时记录服务会调用 EffortRecordRepository，根据工时项ID取得一堆 EffortRecord （工时记录）实体。</p><p>第二步，再根据每个工时记录实体中的员工ID，调用 EmpRepository ，为每个工时记录取得相应的员工实体。这里要注意避免对同一个员工实体重复查询数据库。</p><p>第三步，把所有工时记录和对应的员工实体信息拼成相应的 EmpEffortRecordDto ，排序后组装成列表返回。</p><p>顺便说一下，我在这里没有贴代码，而是给出了设计图。这个图和代码其实是一一对应的。希望你能够多练一下看着图写出代码、看着代码反推出图的技巧。</p><p>上面的做法确实符合我们之前说的“代码和模型一致”这个要求，但是你可能已经发现这么做会带来的问题了。</p><ul>\n<li>程序编写比较麻烦，原来一句 SQL 就可以解决的问题，现在要分几步实现。</li>\n<li>这样的程序可能带来性能问题。</li>\n</ul><p>那么该怎么解决呢？这里的核心问题是，查询功能是否必须经过领域模型呢？</p><p>要回答这个问题，我们首先要考虑一下为什么之前的逻辑要经过领域模型。其中一个主要原因是，如果绕过领域模型，领域逻辑和数据就可能分散在程序各个地方，无法保证数据的完整和一致性，程序也将很难理解和维护。对于增、删、改这样的逻辑，这样的原因确实说得通。但是，查询的逻辑并不会改变数据，所以并不会造成数据的不完整和不一致。</p><p>事实上，前人已经意识到了查询和其他功能的不同之处，主张采用不同的方式来处理查询逻辑，并提出了所谓 CQRS 架构。</p><p>最早提出这个说法的是 Greg Young。他把增、删、改功能称为 Command（命令），把查询称为 Query，这两种功能的职责不同，应该采用不同的方式来处理，因此叫做“命令查询职责分离”（Command Query Responsibility Segregation ），简称 CQRS。我们可以先粗放一点来理解，一共是两条规则。</p><p><strong>第一，命令要走领域模型。</strong></p><p><strong>第二，查询不走领域模型，直接用 SQL 和 DTO。</strong></p><p>后来，业界对 CQRS 又形成了一些不太一样的理解。这是因为，CQRS 其实可从几个不同的层面来考虑，我们分别来看看。</p><h2>代码结构分离</h2><p>第一个层面是代码结构的分离。为了说明这个问题，咱们先看图。</p><p><img src=\"https://static001.geekbang.org/resource/image/17/15/1781a13a29f5624e0e54c8e46e437d15.jpg?wh=3791x3584\" alt=\"\"></p><p>在这个图里，代码首先分成了两个包，一个是 command processor（命令处理器），另一个是 query processor（查询处理器）。其中，命令处理器采用的就是之前基于领域模型的分层架构。</p><p>关键看<strong>查询处理器</strong>，你会发现里面根本就没有领域层了，当然也就没有领域对象了。这里直接用 EmpEffortRecordDto 来表示数据。应用服务调用仓库，仓库里用 SQL 语句进行连表查询，得到的数据直接填到 DTO 里。应用服务可能还要对DTO再做少许加工，就可以直接返回了。</p><p>由于 EmpEffortRecordDto 表示的是要查询的数据的结构，所以，也有人把由这些对象组成的模型称为“查询模型”（query model）或者“读模型”（read model）。在命名上，如果简洁一些，也可以不用 Dto 这个后缀。</p><p>最后，在图里我们把数据库也看做组件，用组件图来表示，它对外暴露的接口就是 SQL。</p><p>这种代码结构的分离，是最简单的 CQRS，多数采用了 DDD 分层架构的程序都可以尝试使用。</p><p>除了这种最简单的用法，我们再来看看其他几种策略，它们在带来收益的同时，也会有比较明显的代价，这时我们就要多权衡一下了。</p><h2>数据库结构分离</h2><p>前面程序里的 SQL 用了连表查询，有时候会造成性能问题。</p><p>本质原因是，程序里的查询模型和数据库里的表架构不一致。这是因为，数据库里的表结构，或者说物理数据模型，是根据领域模型，而不是查询模型设计的。从物理数据模型到程序中的查询模型的转换，是通过 SQL完成的。而这种转换需要表连接，就可能造成性能问题。</p><p>那怎么解决这种性能问题呢？</p><p>一种解决思路是为查询单独创建一套表，其中采用“反规范化设计”，也就是引入冗余字段，使表结构和查询模型吻合，从而避免或减少表连接。</p><p>我画出了这种设计的架构图，供你参考。</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/6b/b7e1d8a47336ceafe40abe34913cb16b.jpg?wh=3600x3956\" alt=\"\"></p><p>由于包内部的结构是类似的，所以这张图忽略了内部细节，只包含外层的包结构。</p><p>数据库里的表分成了两套——命令模型（command model）和查询模型（query model），分别由命令处理器和查询处理器访问。其中命令模型中的表是根据领域模型设计的，查询模型部分的表就是根据查询需求进行了反规范化设计。</p><p>命令处理器对命令模型里的表进行操作后，要把数据同步给查询模型。有多种同步方案可供选择，比如说，命令模型中的仓库，同时写两边的数据表，或者使用触发器，还可以用同步或异步的事件驱动机制。</p><h2>反规范化设计</h2><p>为了实现数据库结构分离，需要进行反规范化设计。为了帮你深入了解这一点，我给你</p><p>举例说明一下反规范化的表结构设计。</p><p>命令模型里的<strong>工时记录</strong>表是后面这样。<br>\n<img src=\"https://static001.geekbang.org/resource/image/b0/00/b02654yy4bf7e1f64534a51c6d025800.jpg?wh=3600x2260\" alt=\"\"></p><p>这个表我们在迭代一见过类似的，现在唯一的不同是原来的 project_id （项目ID）换成了现在的 effort_item_id（工时项ID）。这是因为最初的需求只是为项目报工时，而现在要为更广义的工时项报工时了。</p><p>查询模型里的<strong>员工工时记录</strong>表是后面这样。</p><p><img src=\"https://static001.geekbang.org/resource/image/0f/a0/0f98102d7bffd82b823cea6b78d55ea0.jpg?wh=3600x2179\" alt=\"\"></p><p>其实表设计的变化很简单，我们只是在表里增加了 emp_num（员工号）和 emp_name（员工姓名）两个字段。同时在原来的表名前面增加了 emp ，表示是员工表和工时记录表合并的表。</p><p>为什么说这样就“反规范化”了呢？</p><p>这是因为在这个表里，emp_num 和 emp_name 是可以由emp_id 唯一确定的。这种情况在数据库设计术语上叫做 “emp_num 和 emp_name 函数依赖于 emp_id”，简称 “emp_num 和 emp_name 依赖于 emp_id”。注意，这里说的数据库设计意义上的依赖，和 UML 里的依赖不是一个概念。</p><p>另一方面，emp_id 又是依赖于这个表的 id 的。这时就可以说，emp_num 和 emp_name 传递依赖于 id 。凡是一个表里有传递依赖关系的，这个表就违反了第三范式（3NF）。</p><p>至于第二范式是怎么回事，你有兴趣的话，找一本数据库设计的书看看就可以了。我这里只说一句，如果一个表里只有一个字段（例如 id）做主键，那么在原理上就是不可能违反第二范式的。</p><p>在命令模型里，一般是不主张违反范式的，这是因为违反范式必然造成数据冗余，数据冗余就会造成潜在的数据不一致风险。而在查询模型中，不仅允许，甚至是鼓励反规范化设计。这是因为，对于查询模型，反规范化的风险是可控的。就算数据发生了不一致，总可以从命令模型里按正确的逻辑重新生成一遍。</p><p>如果你不满足于仅仅在物理数据模型上表示出查询模型，还想在领域模型层面把命令模型和查询模型的关系表示得更清楚，可以把图画成这样。</p><p><img src=\"https://static001.geekbang.org/resource/image/c1/80/c151bbe9021c2ayy412c562c72ac5880.jpg?wh=3600x2179\" alt=\"\"></p><p>在这个图里，<strong>工时记录</strong>和<strong>员工</strong>是原来领域模型里的实体，没有变化。而<strong>员工工时记录</strong>则是查询模型中的“查询实体”（我们姑且这么命名吧）。我们用自定义的&lt;&lt;query model&gt;&gt;衍型来表示这是一个查询模型里的查询实体。</p><p><strong>员工工时记录</strong>中的数据是来源于<strong>工时记录</strong>和<strong>员工</strong>的，所以对这两个实体有依赖关系。另外，我们在依赖关系上加了&lt;&lt;trace&gt;&gt;。这是 UML 里的标准衍型，表示“追溯”的意思。这是因为，<strong>员工工时记录</strong>里的信息，总能追溯回<strong>工时记录</strong>和<strong>员工</strong>，从而知道数据的来源。</p><p>顺便说一句，我们原来说过领域模型和设计模型的区别，如果你愿意的话，领域模型里的一个实体和设计模型里的对应实体，也可以用 &lt;&lt;trace&gt;&gt; 依赖来关联起来，表示两者之间的来源关系。</p><p>我把这种图称为“查询模型图”，一般会单独画出来，只保留和查询模型有关的实体和关联。如果都画在领域模型图里，就太混乱了。当查询模型里的表比较多的时候，如果靠拍脑袋设计，就可能设计出混乱重复的表结构，最终导致设计失控。有了查询模型图，我们就可以用一种受控的方式进行反规范化的模型设计了。</p><p>数据库结构分离策略的好处是提高了性能。但这么做也有明显代价，包括后面三个方面。</p><p>1.增加了两种数据模型同步的复杂性和出错的可能性。<br>\n2.数据同步可能带来性能损失。<br>\n3.会占用额外的存储空间。</p><h2>总结</h2><p>好，这节课先讲到这，下面来总结一下。</p><p>今天我们学习了 CQRS （Command Query Responsibility Segregation），也就是“命令和查询职责分离”模式。</p><p>尽管通过 DDD 的领域模型完成增、删、改等功能是很适合的，但是通过领域模型来实现查询功能，常常是比较繁琐的，而且性能也不高。因此， CQRS 就成了 DDD 的有力补充。</p><p>根据 CQRS ，命令（也就是增、删、改功能）和查询功能的实现逻辑应该是不一样的。为了处理这种不一样的逻辑，我们今天讲了两种策略：代码结构分离和数据库结构分离。</p><p>为了实现数据库结构分离，我们也讨论了怎样进行反规范化设计，以及这种设计是怎样违反第三范式的，从而让你了解背后的所以然。</p><p>另外，我们还介绍了“查询模型图”，有了它，我们就可以在更高的层面，对查询模型进行系统化的设计。</p><h2>思考题</h2><p>最后给你留两道思考题。</p><p>1.今天课程中的需求其实做了简化，没有考虑“父子工时项”以及“不在本级报工时”的情况，如果考虑了这两种情况，甚至本级和下级子工时项都能报工时，那么 SQL 语句就不太好写了。这时候，你觉得可以用什么办法处理呢？</p><p>2.我们今天谈反规范化的时候，是另外建立了一套表。还有一种策略，是直接在原来为领域模型建的表上进行反规范化。你觉得这两种策略各自的利弊是什么？</p><p>好，今天的课程结束了，有什么问题欢迎你在评论区留言。下节课，我再带你了解实现 CQRS 的另外几种策略，敬请期待。</p>","comments":[{"had_liked":false,"id":369186,"user_name":"虚竹","can_delete":false,"product_type":"c1","uid":1691109,"ip_address":"北京","ucode":"8D8C96C793724E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJIocn8OMjfSGqyeSJEV3ID2rquLR0S6xo0ibdNYQgzicib6L6VlqWjhgxOqD2iaicX1KhbWXWCsmBTskA/132","comment_is_top":false,"comment_ctime":1677211021,"is_pvip":false,"replies":[{"id":134797,"content":"是的","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1677939378,"ip_address":"广东","comment_id":369186,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"还有一种常用方式，是写到mysql里，异构到mongo里一份用来查询，","like_count":6,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607560,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677939378,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3326979,"avatar":"https://static001.geekbang.org/account/avatar/00/32/c4/03/511aa353.jpg","nickname":"H","note":"","ucode":"06D57447BF1A47","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608675,"discussion_content":"请问为什么不直接用mongo？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1678600447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3506330,"avatar":"https://static001.geekbang.org/account/avatar/00/35/80/9a/692637f6.jpg","nickname":"曹坤明","note":"","ucode":"23B55F5F10881E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":609741,"discussion_content":"是不是说反了呀，用mongoDB作为写数据库（没有阻抗适配问题），然后用关系数据库作为读数据库，提高查询的灵活性，是不是更好？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1679153366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"中国台湾","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1129601,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/81/7ccdb399.jpg","nickname":"+ 糠","note":"","ucode":"2D5A91900FCA43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3506330,"avatar":"https://static001.geekbang.org/account/avatar/00/35/80/9a/692637f6.jpg","nickname":"曹坤明","note":"","ucode":"23B55F5F10881E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":634885,"discussion_content":"写还是以关系型数据库为主","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1704180420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":609741,"ip_address":"广东","group_id":0},"score":634885,"extra":""}]}]},{"had_liked":false,"id":370115,"user_name":"赵晏龙","can_delete":false,"product_type":"c1","uid":2673605,"ip_address":"湖南","ucode":"F15730BCA97EE0","user_header":"https://static001.geekbang.org/account/avatar/00/28/cb/c5/c1d7ca5e.jpg","comment_is_top":false,"comment_ctime":1678410634,"is_pvip":false,"replies":[{"id":134939,"content":"CQRS的本质，除了冗余，还有一个是否绕过领域模型的问题，或者说，在领域模型之外，是否专门考虑“查询模型”的问题。\n\n第一题，是个不错的思路\n第二题，还有一个角度供您参考，如果分开两套表，由于各自比较单纯，是否反而降低了认知负载？","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1678506867,"ip_address":"广东","comment_id":370115,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"好多人都觉得CQRS就一定是EventSourcing，就一定是两个库。我也是去年的时候突然顿悟，其实CQRS的本质就是冗余。\n1、我会考虑进一步抽象，甚至查询模型直接记录统计的最终数据。\n2、分表能够分离变与不变的东西，但会增加额外的数据同步开发工作和认知负载，如果加上历史数据的迁移，工作量会越来越多。不分表会影响领域的相对不变性，但是认知负载可能会相对较低。这将会是一个权衡，没有银弹。","like_count":4,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":608540,"discussion_content":"CQRS的本质，除了冗余，还有一个是否绕过领域模型的问题，或者说，在领域模型之外，是否专门考虑“查询模型”的问题。\n\n第一题，是个不错的思路\n第二题，还有一个角度供您参考，如果分开两套表，由于各自比较单纯，是否反而降低了认知负载？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1678506867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2673605,"avatar":"https://static001.geekbang.org/account/avatar/00/28/cb/c5/c1d7ca5e.jpg","nickname":"赵晏龙","note":"","ucode":"F15730BCA97EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":608798,"discussion_content":"确实有更低的可能。我再想想","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1678668269,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":608540,"ip_address":"湖南","group_id":0},"score":608798,"extra":""}]},{"author":{"id":1177832,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f8/e8/bbd1b66d.jpg","nickname":"🏄🏻米兰的大铁匠🎤🎈","note":"","ucode":"704DB6905F96D1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620221,"discussion_content":"这个问题阿里开发规范上好像提到过，不提倡冗余的方式，建议用&#34;子查询&#34;的方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685958473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"天津","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369756,"user_name":"南山","can_delete":false,"product_type":"c1","uid":1119593,"ip_address":"江苏","ucode":"94656FE4A6C378","user_header":"https://static001.geekbang.org/account/avatar/00/11/15/69/187b9968.jpg","comment_is_top":false,"comment_ctime":1677890490,"is_pvip":false,"replies":[{"id":134722,"content":"首先，课程里没有说查询代码的repository依赖DTO。\n其次，查询的repository用来直接查出客户端需要的DTO，领域层的查出聚合，这一点是不同的。两者的名字一样，只是为了方便。也可以起不同的名字。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1677918319,"ip_address":"广东","comment_id":369756,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"查询的代码中 repository放在了application层，依赖dto，这里的repository跟领域层的那个是什么关系？或者是两个吗？","like_count":3,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607470,"discussion_content":"首先，课程里没有说查询代码的repository依赖DTO。\n其次，查询的repository用来直接查出客户端需要的DTO，领域层的查出聚合，这一点是不同的。两者的名字一样，只是为了方便。也可以起不同的名字。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677918319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369610,"user_name":"Fredo","can_delete":false,"product_type":"c1","uid":1438470,"ip_address":"广东","ucode":"681D6692617DAB","user_header":"https://static001.geekbang.org/account/avatar/00/15/f3/06/8da1bf0c.jpg","comment_is_top":false,"comment_ctime":1677725274,"is_pvip":false,"replies":[{"id":134730,"content":"不错","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1677919783,"ip_address":"广东","comment_id":369610,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"1. 单独搞一张宽表，冗余存用来查询呢。如果是报表可能会这样做\n2. 直接在原先的表上弄会有一定的风险，数据一致性要特别关注；维护两套的话，关注点分离，职责清晰，但维护成本上去了。","like_count":2,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607481,"discussion_content":"不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677919783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1803623,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/85/67/0d121bc4.jpg","nickname":"神经蛙","note":"","ucode":"2D71FC12E420AB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607430,"discussion_content":"数据量一大一update锁一堆记录。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677856950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369513,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"浙江","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1677633135,"is_pvip":false,"replies":[{"id":134734,"content":"是的，这已经是CQRS思想的运用了。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1677920326,"ip_address":"广东","comment_id":369513,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"我们大部分让人头疼的统计数据，就是独立一张表存储的，单表查询出结果，遇到数据有问题时，重新计算一遍。\n相比复杂的连表查询，这种方式轻松愉快，实现简单，额外支出的存储空间值了：空间换时间","like_count":1,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607485,"discussion_content":"是的，这已经是CQRS思想的运用了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1677920327,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":393114,"user_name":"樱花","can_delete":false,"product_type":"c1","uid":1057456,"ip_address":"广东","ucode":"432F43127D847A","user_header":"https://static001.geekbang.org/account/avatar/00/10/22/b0/050676f5.jpg","comment_is_top":false,"comment_ctime":1722913251,"is_pvip":false,"replies":[{"id":143639,"content":"不是同一个聚合。跨聚合查询，对于“C”而言不可以，对于&quot;Q&quot;而言可以。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1731400307,"ip_address":"广东","comment_id":393114,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"emp和emp_effort_record算一个聚合里的对象吗？\n或者说一个repo可以跨聚合查询吗","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653696,"discussion_content":"不是同一个聚合。跨聚合查询，对于“C”而言不可以，对于&#34;Q&#34;而言可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731400308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":391365,"user_name":"InfoQ_小汤","can_delete":false,"product_type":"c1","uid":1739070,"ip_address":"江苏","ucode":"E4C30DB7A9B54C","user_header":"https://static001.geekbang.org/account/avatar/00/1a/89/3e/0dd8e96b.jpg","comment_is_top":false,"comment_ctime":1718117343,"is_pvip":false,"replies":[{"id":143667,"content":"这里有一个微妙的地方：其实查询有两种，一种是为了实现增删改逻辑而查，客户端的目的是增删改，而不是“查”，尽管在增删改逻辑内部确实要查一下；另一种是纯粹的查，客户端的目的就是查询本身。\nCQRS中的 Q 实际上指第二种纯粹的查。而第一种查询不是CQRS意义上的 Q。\n两种查询一般分别实现，第一种查询返回领域对象本身，第二种返回DTO。这样，就不存在你说的转换问题了。\n当然，这又引出另一个问题，可能会有逻辑重复的问题，这就要权衡了。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1731490103,"ip_address":"广东","comment_id":391365,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"如果执行cqrs拆封 这个时候某些增删改的逻辑是需要查询作为辅助的 这个时候做领域逻辑 是不是还会涉及到查询dto跟领域对象的转换处理场景","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":653870,"discussion_content":"这里有一个微妙的地方：其实查询有两种，一种是为了实现增删改逻辑而查，客户端的目的是增删改，而不是“查”，尽管在增删改逻辑内部确实要查一下；另一种是纯粹的查，客户端的目的就是查询本身。\nCQRS中的 Q 实际上指第二种纯粹的查。而第一种查询不是CQRS意义上的 Q。\n两种查询一般分别实现，第一种查询返回领域对象本身，第二种返回DTO。这样，就不存在你说的转换问题了。\n当然，这又引出另一个问题，可能会有逻辑重复的问题，这就要权衡了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1731490103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":388194,"user_name":"周昌武","can_delete":false,"product_type":"c1","uid":1115521,"ip_address":"广东","ucode":"BA1408541DBAF9","user_header":"https://static001.geekbang.org/account/avatar/00/11/05/81/22fdfc58.jpg","comment_is_top":false,"comment_ctime":1709607211,"is_pvip":false,"replies":[{"id":141401,"content":"第二种比较好","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1709973466,"ip_address":"广东","comment_id":388194,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"如果后续查询需求变化，需要新增显示字段，冗余的 emp_effort_record是不是就变得鸡肋了？这种情况有哪些解决方案？\n1. 提前考虑emp_effort_record表多冗余些字段（存在未来变化不确定性，虽然是降低了）\n2. 需求变化时emp_effort_record添加新字段，同时修改同步方案（可能需要补历史数据，根据对历史数据显示要求而定）\n\n钟老师还有其他好的方案吗","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":638830,"discussion_content":"第二种比较好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1709973466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382241,"user_name":"无问","can_delete":false,"product_type":"c1","uid":1546586,"ip_address":"上海","ucode":"F841A16374CC84","user_header":"https://static001.geekbang.org/account/avatar/00/17/99/5a/32f3df3c.jpg","comment_is_top":false,"comment_ctime":1696928701,"is_pvip":false,"replies":[{"id":139702,"content":"不太理解您的问题，您说的模型转换指什么？","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1699078512,"ip_address":"广东","comment_id":382241,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"cqrs的模型转换要另外在弄一套builder了嘛","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630931,"discussion_content":"不太理解您的问题，您说的模型转换指什么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699078512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":377230,"user_name":"+ 糠","can_delete":false,"product_type":"c1","uid":1129601,"ip_address":"广东","ucode":"2D5A91900FCA43","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/81/7ccdb399.jpg","comment_is_top":false,"comment_ctime":1688106492,"is_pvip":false,"replies":[{"id":137719,"content":"服务不应该根据聚合拆分，应该根据限界上下文拆分。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1689499149,"ip_address":"","comment_id":377230,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100311801,"comment_content":"\ncqrs没有领域层，会不会以后服务根据聚合拆分，改起来也比较麻烦？","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":623448,"discussion_content":"服务不应该根据聚合拆分，应该根据限界上下文拆分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689499149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":1129601,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/81/7ccdb399.jpg","nickname":"+ 糠","note":"","ucode":"2D5A91900FCA43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":623449,"discussion_content":"一个限界上下文的多个聚合，可能根据后期业务发展，每个聚合成为一个限界上下文，那读模型拆起来不是很麻烦么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1689499321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":623448,"ip_address":"广东","group_id":0},"score":623449,"extra":""},{"author":{"id":1588683,"avatar":"https://static001.geekbang.org/account/avatar/00/18/3d/cb/791d0f5e.jpg","nickname":"猴哥","note":"","ucode":"63A1BFDF13D85D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1129601,"avatar":"https://static001.geekbang.org/account/avatar/00/11/3c/81/7ccdb399.jpg","nickname":"+ 糠","note":"","ucode":"2D5A91900FCA43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":650100,"discussion_content":"为了查询性能嘛，总要付出代价。真能拆的出去了，再投入呗。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1724370776,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":623449,"ip_address":"浙江","group_id":0},"score":650100,"extra":""}]}]},{"had_liked":false,"id":374626,"user_name":"雨","can_delete":false,"product_type":"c1","uid":1088488,"ip_address":"北京","ucode":"FCBA5DE66F07A7","user_header":"","comment_is_top":false,"comment_ctime":1684240114,"is_pvip":false,"replies":[{"id":137145,"content":"问题1:也可以单独建一个符合查询架构的表，预先把数据处理好，之后直接查询。\n问题2: 补充一点，如果一套表的话，设计更容易腐化。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1685969490,"ip_address":"广东","comment_id":374626,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"问题1：先查询出符合条件的父子工时项id，再用多个工时项id进行查询\n问题2：原来领域模型表反规范化的方式避免了2套数据源同步的复杂度，增加了写逻辑的复杂度，另外一套表的方式关注点清晰，能实现业务层的读写分离，但需要保证数据同步的稳定性及时效性\n还请老师答疑，谢谢","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":620244,"discussion_content":"问题1:也可以单独建一个符合查询架构的表，预先把数据处理好，之后直接查询。\n问题2: 补充一点，如果一套表的话，设计更容易腐化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1685969490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":369745,"user_name":"神经蛙","can_delete":false,"product_type":"c1","uid":1803623,"ip_address":"广东","ucode":"2D71FC12E420AB","user_header":"https://static001.geekbang.org/account/avatar/00/1b/85/67/0d121bc4.jpg","comment_is_top":false,"comment_ctime":1677856833,"is_pvip":false,"replies":[{"id":134720,"content":"假如觉得CQRS带来的麻烦大于收益，就不要用。直到某一天发现情况逆转，再用。","user_name":"作者回复","user_name_real":"编辑","uid":1288110,"ctime":1677917973,"ip_address":"广东","comment_id":369745,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100311801,"comment_content":"除了博主这篇文章的观点之外，我还有一种理解，修改会对一个对象产生影响，属于业务。而查询没有业务属性，它只是查询出某一时刻内某个领域实体对象的状态。所以把他们分离能更好的让开发关注到业务上去。但是我觉得cqrs这样拆好繁琐。ddd本身落地就够繁琐的了。。","like_count":0,"discussions":[{"author":{"id":1288110,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/VBLEAcychgbs5CicUczSYcibicoicZmyk1JHHFiae94KuvVsibAKtcQAvnOPWp0C4yvia8mzvQAORiazjWSoc1XQ9QkLrQ/132","nickname":"钟敬","note":"","ucode":"20B3D31A2C8C86","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":607468,"discussion_content":"假如觉得CQRS带来的麻烦大于收益，就不要用。直到某一天发现情况逆转，再用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677917973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}