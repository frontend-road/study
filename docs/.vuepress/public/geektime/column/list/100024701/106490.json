{"id":106490,"title":"45 | 发送网络包（上）：如何表达我们想让合作伙伴做什么？","content":"<p>上一节，我们通过socket函数、bind函数、listen函数、accept函数以及connect函数，在内核建立好了数据结构，并完成了TCP连接建立的三次握手过程。</p><p>这一节，我们接着来分析，发送一个网络包的过程。</p><h2>解析socket的Write操作</h2><p>socket对于用户来讲，是一个文件一样的存在，拥有一个文件描述符。因而对于网络包的发送，我们可以使用对于socket文件的写入系统调用，也就是write系统调用。</p><p>write系统调用对于一个文件描述符的操作，大致过程都是类似的。在文件系统那一节，我们已经详细解析过，这里不再多说。对于每一个打开的文件都有一个struct file结构，write系统调用会最终调用stuct file结构指向的file_operations操作。</p><p>对于socket来讲，它的file_operations定义如下：</p><pre><code>static const struct file_operations socket_file_ops = {\n\t.owner =\tTHIS_MODULE,\n\t.llseek =\tno_llseek,\n\t.read_iter =\tsock_read_iter,\n\t.write_iter =\tsock_write_iter,\n\t.poll =\t\tsock_poll,\n\t.unlocked_ioctl = sock_ioctl,\n\t.mmap =\t\tsock_mmap,\n\t.release =\tsock_close,\n\t.fasync =\tsock_fasync,\n\t.sendpage =\tsock_sendpage,\n\t.splice_write = generic_splice_sendpage,\n\t.splice_read =\tsock_splice_read,\n};\n</code></pre><p>按照文件系统的写入流程，调用的是sock_write_iter。</p><pre><code>static ssize_t sock_write_iter(struct kiocb *iocb, struct iov_iter *from)\n{\n\tstruct file *file = iocb-&gt;ki_filp;\n\tstruct socket *sock = file-&gt;private_data;\n\tstruct msghdr msg = {.msg_iter = *from,\n\t\t\t     .msg_iocb = iocb};\n\tssize_t res;\n......\n\tres = sock_sendmsg(sock, &amp;msg);\n\t*from = msg.msg_iter;\n\treturn res;\n}\n</code></pre><p>在sock_write_iter中，我们通过VFS中的struct file，将创建好的socket结构拿出来，然后调用sock_sendmsg。而sock_sendmsg会调用sock_sendmsg_nosec。</p><!-- [[[read_end]]] --><pre><code>static inline int sock_sendmsg_nosec(struct socket *sock, struct msghdr *msg)\n{\n\tint ret = sock-&gt;ops-&gt;sendmsg(sock, msg, msg_data_left(msg));\n......\n}\n</code></pre><p>这里调用了socket的ops的sendmsg，我们在上一节已经遇到它好几次了。根据inet_stream_ops的定义，我们这里调用的是inet_sendmsg。</p><pre><code>int inet_sendmsg(struct socket *sock, struct msghdr *msg, size_t size)\n{\n\tstruct sock *sk = sock-&gt;sk;\n......\n\treturn sk-&gt;sk_prot-&gt;sendmsg(sk, msg, size);\n}\n</code></pre><p>这里面，从socket结构中，我们可以得到更底层的sock结构，然后调用sk_prot的sendmsg方法。这个我们同样在上一节遇到好几次了。</p><h2>解析tcp_sendmsg函数</h2><p>根据tcp_prot的定义，我们调用的是tcp_sendmsg。</p><pre><code>int tcp_sendmsg(struct sock *sk, struct msghdr *msg, size_t size)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\tint flags, err, copied = 0;\n\tint mss_now = 0, size_goal, copied_syn = 0;\n\tlong timeo;\n......\n\t/* Ok commence sending. */\n\tcopied = 0;\nrestart:\n\tmss_now = tcp_send_mss(sk, &amp;size_goal, flags);\n\n\twhile (msg_data_left(msg)) {\n\t\tint copy = 0;\n\t\tint max = size_goal;\n\n\t\tskb = tcp_write_queue_tail(sk);\n\t\tif (tcp_send_head(sk)) {\n\t\t\tif (skb-&gt;ip_summed == CHECKSUM_NONE)\n\t\t\t\tmax = mss_now;\n\t\t\tcopy = max - skb-&gt;len;\n\t\t}\n\n\t\tif (copy &lt;= 0 || !tcp_skb_can_collapse_to(skb)) {\n\t\t\tbool first_skb;\n\nnew_segment:\n\t\t\t/* Allocate new segment. If the interface is SG,\n\t\t\t * allocate skb fitting to single page.\n\t\t\t */\n\t\t\tif (!sk_stream_memory_free(sk))\n\t\t\t\tgoto wait_for_sndbuf;\n......\n\t\t\tfirst_skb = skb_queue_empty(&amp;sk-&gt;sk_write_queue);\n\t\t\tskb = sk_stream_alloc_skb(sk,\n\t\t\t\t\t\t  select_size(sk, sg, first_skb),\n\t\t\t\t\t\t  sk-&gt;sk_allocation,\n\t\t\t\t\t\t  first_skb);\n......\n\t\t\tskb_entail(sk, skb);\n\t\t\tcopy = size_goal;\n\t\t\tmax = size_goal;\n......\n\t\t}\n\n\t\t/* Try to append data to the end of skb. */\n\t\tif (copy &gt; msg_data_left(msg))\n\t\t\tcopy = msg_data_left(msg);\n\n\t\t/* Where to copy to? */\n\t\tif (skb_availroom(skb) &gt; 0) {\n\t\t\t/* We have some space in skb head. Superb! */\n\t\t\tcopy = min_t(int, copy, skb_availroom(skb));\n\t\t\terr = skb_add_data_nocache(sk, skb, &amp;msg-&gt;msg_iter, copy);\n......\n\t\t} else {\n\t\t\tbool merge = true;\n\t\t\tint i = skb_shinfo(skb)-&gt;nr_frags;\n\t\t\tstruct page_frag *pfrag = sk_page_frag(sk);\n......\n\t\t\tcopy = min_t(int, copy, pfrag-&gt;size - pfrag-&gt;offset);\n......\n\t\t\terr = skb_copy_to_page_nocache(sk, &amp;msg-&gt;msg_iter, skb,\n\t\t\t\t\t\t       pfrag-&gt;page,\n\t\t\t\t\t\t       pfrag-&gt;offset,\n\t\t\t\t\t\t       copy);\n......\n\t\t\tpfrag-&gt;offset += copy;\n\t\t}\n\n......\n\t\ttp-&gt;write_seq += copy;\n\t\tTCP_SKB_CB(skb)-&gt;end_seq += copy;\n\t\ttcp_skb_pcount_set(skb, 0);\n\n\t\tcopied += copy;\n\t\tif (!msg_data_left(msg)) {\n\t\t\tif (unlikely(flags &amp; MSG_EOR))\n\t\t\t\tTCP_SKB_CB(skb)-&gt;eor = 1;\n\t\t\tgoto out;\n\t\t}\n\n\t\tif (skb-&gt;len &lt; max || (flags &amp; MSG_OOB) || unlikely(tp-&gt;repair))\n\t\t\tcontinue;\n\n\t\tif (forced_push(tp)) {\n\t\t\ttcp_mark_push(tp, skb);\n\t\t\t__tcp_push_pending_frames(sk, mss_now, TCP_NAGLE_PUSH);\n\t\t} else if (skb == tcp_send_head(sk))\n\t\t\ttcp_push_one(sk, mss_now);\n\t\tcontinue;\n......\n\t}\n......\n}\n</code></pre><p>tcp_sendmsg的实现还是很复杂的，这里面做了这样几件事情。</p><p>msg是用户要写入的数据，这个数据要拷贝到内核协议栈里面去发送；在内核协议栈里面，网络包的数据都是由struct sk_buff维护的，因而第一件事情就是找到一个空闲的内存空间，将用户要写入的数据，拷贝到struct sk_buff的管辖范围内。而第二件事情就是发送struct sk_buff。</p><p>在tcp_sendmsg中，我们首先通过强制类型转换，将sock结构转换为struct tcp_sock，这个是维护TCP连接状态的重要数据结构。</p><p>接下来是tcp_sendmsg的第一件事情，把数据拷贝到struct sk_buff。</p><p>我们先声明一个变量copied，初始化为0，这表示拷贝了多少数据。紧接着是一个循环，while (msg_data_left(msg))，也即如果用户的数据没有发送完毕，就一直循环。循环里声明了一个copy变量，表示这次拷贝的数值，在循环的最后有copied += copy，将每次拷贝的数量都加起来。</p><p>我们这里只需要看一次循环做了哪些事情。</p><p><strong>第一步</strong>，tcp_write_queue_tail从TCP写入队列sk_write_queue中拿出最后一个struct sk_buff，在这个写入队列中排满了要发送的struct sk_buff，为什么要拿最后一个呢？这里面只有最后一个，可能会因为上次用户给的数据太少，而没有填满。</p><p><strong>第二步</strong>，tcp_send_mss会计算MSS，也即Max Segment Size。这是什么呢？这个意思是说，我们在网络上传输的网络包的大小是有限制的，而这个限制在最底层开始就有。</p><p><strong>MTU</strong>（Maximum Transmission Unit，最大传输单元）是二层的一个定义。以以太网为例，MTU为1500个Byte，前面有6个Byte的目标MAC地址，6个Byte的源MAC地址，2个Byte的类型，后面有4个Byte的CRC校验，共1518个Byte。</p><p>在IP层，一个IP数据报在以太网中传输，如果它的长度大于该MTU值，就要进行分片传输。</p><p>在TCP层有个<strong>MSS</strong>（Maximum Segment Size，最大分段大小），等于MTU减去IP头，再减去TCP头。也就是，在不分片的情况下，TCP里面放的最大内容。</p><p>在这里，max是struct sk_buff的最大数据长度，skb-&gt;len是当前已经占用的skb的数据长度，相减得到当前skb的剩余数据空间。</p><p><strong>第三步</strong>，如果copy小于0，说明最后一个struct sk_buff已经没地方存放了，需要调用sk_stream_alloc_skb，重新分配struct sk_buff，然后调用skb_entail，将新分配的sk_buff放到队列尾部。</p><p>struct sk_buff是存储网络包的重要的数据结构，在应用层数据包叫data，在TCP层我们称为segment，在IP层我们叫packet，在数据链路层称为frame。在struct sk_buff，首先是一个链表，将struct sk_buff结构串起来。</p><p>接下来，我们从headers_start开始，到headers_end结束，里面都是各层次的头的位置。这里面有二层的mac_header、三层的network_header和四层的transport_header。</p><pre><code>struct sk_buff {\n\tunion {\n\t\tstruct {\n\t\t\t/* These two members must be first. */\n\t\t\tstruct sk_buff\t\t*next;\n\t\t\tstruct sk_buff\t\t*prev;\n......\n\t\t};\n\t\tstruct rb_node\trbnode; /* used in netem &amp; tcp stack */\n\t};\n......\n\t/* private: */\n\t__u32\t\t\theaders_start[0];\n\t/* public: */\n......\n\t__u32\t\t\tpriority;\n\tint\t\t\tskb_iif;\n\t__u32\t\t\thash;\n\t__be16\t\t\tvlan_proto;\n\t__u16\t\t\tvlan_tci;\n......\n\tunion {\n\t\t__u32\t\tmark;\n\t\t__u32\t\treserved_tailroom;\n\t};\n\n\tunion {\n\t\t__be16\t\tinner_protocol;\n\t\t__u8\t\tinner_ipproto;\n\t};\n\n\t__u16\t\t\tinner_transport_header;\n\t__u16\t\t\tinner_network_header;\n\t__u16\t\t\tinner_mac_header;\n\n\t__be16\t\t\tprotocol;\n\t__u16\t\t\ttransport_header;\n\t__u16\t\t\tnetwork_header;\n\t__u16\t\t\tmac_header;\n\n\t/* private: */\n\t__u32\t\t\theaders_end[0];\n\t/* public: */\n\n\t/* These elements must be at the end, see alloc_skb() for details.  */\n\tsk_buff_data_t\t\ttail;\n\tsk_buff_data_t\t\tend;\n\tunsigned char\t\t*head,\n\t\t\t\t*data;\n\tunsigned int\t\ttruesize;\n\trefcount_t\t\tusers;\n};\n</code></pre><p>最后几项， head指向分配的内存块起始地址。data这个指针指向的位置是可变的。它有可能随着报文所处的层次而变动。当接收报文时，从网卡驱动开始，通过协议栈层层往上传送数据报，通过增加 skb-&gt;data 的值，来逐步剥离协议首部。而要发送报文时，各协议会创建 sk_buff{}，在经过各下层协议时，通过减少 skb-&gt;data的值来增加协议首部。tail指向数据的结尾，end指向分配的内存块的结束地址。</p><p>要分配这样一个结构，sk_stream_alloc_skb会最终调用到__alloc_skb。在这个函数里面，除了分配一个sk_buff结构之外，还要分配sk_buff指向的数据区域。这段数据区域分为下面这几个部分。</p><p>第一部分是连续的数据区域。紧接着是第二部分，一个struct skb_shared_info结构。这个结构是对于网络包发送过程的一个优化，因为传输层之上就是应用层了。按照TCP的定义，应用层感受不到下面的网络层的IP包是一个个独立的包的存在的。反正就是一个流，往里写就是了，可能一下子写多了，超过了一个IP包的承载能力，就会出现上面MSS的定义，拆分成一个个的Segment放在一个个的IP包里面，也可能一次写一点，一次写一点，这样数据是分散的，在IP层还要通过内存拷贝合成一个IP包。</p><p>为了减少内存拷贝的代价，有的网络设备支持<strong>分散聚合</strong>（Scatter/Gather）I/O，顾名思义，就是IP层没必要通过内存拷贝进行聚合，让散的数据零散的放在原处，在设备层进行聚合。如果使用这种模式，网络包的数据就不会放在连续的数据区域，而是放在struct skb_shared_info结构里面指向的离散数据，skb_shared_info的成员变量skb_frag_t frags[MAX_SKB_FRAGS]，会指向一个数组的页面，就不能保证连续了。</p><p><img src=\"https://static001.geekbang.org/resource/image/9a/b8/9ad34c3c748978f915027d5085a858b8.png\" alt=\"\"></p><p>于是我们就有了<strong>第四步</strong>。在注释/* Where to copy to? */后面有个if-else分支。if分支就是skb_add_data_nocache将数据拷贝到连续的数据区域。else分支就是skb_copy_to_page_nocache将数据拷贝到struct skb_shared_info结构指向的不需要连续的页面区域。</p><p><strong>第五步</strong>，就是要发生网络包了。第一种情况是积累的数据报数目太多了，因而我们需要通过调用__tcp_push_pending_frames发送网络包。第二种情况是，这是第一个网络包，需要马上发送，调用tcp_push_one。无论__tcp_push_pending_frames还是tcp_push_one，都会调用tcp_write_xmit发送网络包。</p><p>至此，tcp_sendmsg解析完了。</p><h2>解析tcp_write_xmit函数</h2><p>接下来我们来看，tcp_write_xmit是如何发送网络包的。</p><pre><code>static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle, int push_one, gfp_t gfp)\n{\n\tstruct tcp_sock *tp = tcp_sk(sk);\n\tstruct sk_buff *skb;\n\tunsigned int tso_segs, sent_pkts;\n\tint cwnd_quota;\n......\n\tmax_segs = tcp_tso_segs(sk, mss_now);\n\twhile ((skb = tcp_send_head(sk))) {\n\t\tunsigned int limit;\n......\n\t\ttso_segs = tcp_init_tso_segs(skb, mss_now);\n......\n\t\tcwnd_quota = tcp_cwnd_test(tp, skb);\n......\n\t\tif (unlikely(!tcp_snd_wnd_test(tp, skb, mss_now))) {\n\t\t\tis_rwnd_limited = true;\n\t\t\tbreak;\n\t\t}\n......\n\t\tlimit = mss_now;\n        if (tso_segs &gt; 1 &amp;&amp; !tcp_urg_mode(tp))\n            limit = tcp_mss_split_point(sk, skb, mss_now, min_t(unsigned int, cwnd_quota, max_segs), nonagle);\n\n\t\tif (skb-&gt;len &gt; limit &amp;&amp;\n\t\t    unlikely(tso_fragment(sk, skb, limit, mss_now, gfp)))\n\t\t\tbreak;\n......\n\t\tif (unlikely(tcp_transmit_skb(sk, skb, 1, gfp)))\n\t\t\tbreak;\n\nrepair:\n\t\t/* Advance the send_head.  This one is sent out.\n\t\t * This call will increment packets_out.\n\t\t */\n\t\ttcp_event_new_data_sent(sk, skb);\n\n\t\ttcp_minshall_update(tp, mss_now, skb);\n\t\tsent_pkts += tcp_skb_pcount(skb);\n\n\t\tif (push_one)\n\t\t\tbreak;\n\t}\n......\n}\n</code></pre><p>这里面主要的逻辑是一个循环，用来处理发送队列，只要队列不空，就会发送。</p><p>在一个循环中，涉及TCP层的很多传输算法，我们来一一解析。</p><p>第一个概念是<strong>TSO</strong>（TCP Segmentation Offload）。如果发送的网络包非常大，就像上面说的一样，要进行分段。分段这个事情可以由协议栈代码在内核做，但是缺点是比较费CPU，另一种方式是延迟到硬件网卡去做，需要网卡支持对大数据包进行自动分段，可以降低CPU负载。</p><p>在代码中，tcp_init_tso_segs会调用tcp_set_skb_tso_segs。这里面有这样的语句：DIV_ROUND_UP(skb-&gt;len, mss_now)。也就是sk_buff的长度除以mss_now，应该分成几个段。如果算出来要分成多个段，接下来就是要看，是在这里（协议栈的代码里面）分好，还是等待到了底层网卡再分。</p><p>于是，调用函数tcp_mss_split_point，开始计算切分的limit。这里面会计算max_len = mss_now * max_segs，根据现在不切分来计算limit，所以下一步的判断中，大部分情况下tso_fragment不会被调用，等待到了底层网卡来切分。</p><p>第二个概念是<strong>拥塞窗口</strong>的概念（cwnd，congestion window），也就是说为了避免拼命发包，把网络塞满了，定义一个窗口的概念，在这个窗口之内的才能发送，超过这个窗口的就不能发送，来控制发送的频率。</p><p>那窗口大小是多少呢？就是遵循下面这个著名的拥塞窗口变化图。</p><p><img src=\"https://static001.geekbang.org/resource/image/40/1f/404a6c5041452c0641ae3cba5319dc1f.png\" alt=\"\"></p><p>一开始的窗口只有一个mss大小叫作slow start（慢启动）。一开始的增长速度的很快的，翻倍增长。一旦到达一个临界值ssthresh，就变成线性增长，我们就称为<strong>拥塞避免</strong>。什么时候算真正拥塞呢？就是出现了丢包。一旦丢包，一种方法是马上降回到一个mss，然后重复先翻倍再线性对的过程。如果觉得太过激进，也可以有第二种方法，就是降到当前cwnd的一半，然后进行线性增长。</p><p>在代码中，tcp_cwnd_test会将当前的snd_cwnd，减去已经在窗口里面尚未发送完毕的网络包，那就是剩下的窗口大小cwnd_quota，也即就能发送这么多了。</p><p>第三个概念就是<strong>接收窗口</strong>rwnd的概念（receive window），也叫滑动窗口。如果说拥塞窗口是为了怕把网络塞满，在出现丢包的时候减少发送速度，那么滑动窗口就是为了怕把接收方塞满，而控制发送速度。</p><p><img src=\"https://static001.geekbang.org/resource/image/97/65/9791e2f9ff63a9d8f849df7cd55fe965.png\" alt=\"\"></p><p>滑动窗口，其实就是接收方告诉发送方自己的网络包的接收能力，超过这个能力，我就受不了了。因为滑动窗口的存在，将发送方的缓存分成了四个部分。</p><ul>\n<li>第一部分：发送了并且已经确认的。这部分是已经发送完毕的网络包，这部分没有用了，可以回收。</li>\n<li>第二部分：发送了但尚未确认的。这部分，发送方要等待，万一发送不成功，还要重新发送，所以不能删除。</li>\n<li>第三部分：没有发送，但是已经等待发送的。这部分是接收方空闲的能力，可以马上发送，接收方收得了。</li>\n<li>第四部分：没有发送，并且暂时还不会发送的。这部分已经超过了接收方的接收能力，再发送接收方就收不了了。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/b6/31/b62eea403e665bb196dceba571392531.png\" alt=\"\"></p><p>因为滑动窗口的存在，接收方的缓存也要分成了三个部分。</p><ul>\n<li>第一部分：接受并且确认过的任务。这部分完全接收成功了，可以交给应用层了。</li>\n<li>第二部分：还没接收，但是马上就能接收的任务。这部分有的网络包到达了，但是还没确认，不算完全完毕，有的还没有到达，那就是接收方能够接受的最大的网络包数量。</li>\n<li>第三部分：还没接收，也没法接收的任务。这部分已经超出接收方能力。</li>\n</ul><p>在网络包的交互过程中，接收方会将第二部分的大小，作为AdvertisedWindow发送给发送方，发送方就可以根据他来调整发送速度了。</p><p>在tcp_snd_wnd_test函数中，会判断sk_buff中的end_seq和tcp_wnd_end(tp)之间的关系，也即这个sk_buff是否在滑动窗口的允许范围之内。如果不在范围内，说明发送要受限制了，我们就要把is_rwnd_limited设置为true。</p><p>接下来，tcp_mss_split_point函数要被调用了。</p><pre><code>static unsigned int tcp_mss_split_point(const struct sock *sk,\n                                        const struct sk_buff *skb,\n                                        unsigned int mss_now,\n                                        unsigned int max_segs,\n                                        int nonagle)\n{\n        const struct tcp_sock *tp = tcp_sk(sk);\n        u32 partial, needed, window, max_len;\n\n        window = tcp_wnd_end(tp) - TCP_SKB_CB(skb)-&gt;seq;\n        max_len = mss_now * max_segs;\n\n        if (likely(max_len &lt;= window &amp;&amp; skb != tcp_write_queue_tail(sk)))\n                return max_len;\n\n        needed = min(skb-&gt;len, window);\n\n        if (max_len &lt;= needed)\n                return max_len;\n......\n        return needed;\n}\n</code></pre><p>这里面除了会判断上面讲的，是否会因为超出mss而分段，还会判断另一个条件，就是是否在滑动窗口的运行范围之内，如果小于窗口的大小，也需要分段，也即需要调用tso_fragment。</p><p>在一个循环的最后，是调用tcp_transmit_skb，真的去发送一个网络包。</p><pre><code>static int tcp_transmit_skb(struct sock *sk, struct sk_buff *skb, int clone_it,\n                gfp_t gfp_mask)\n{\n    const struct inet_connection_sock *icsk = inet_csk(sk);\n    struct inet_sock *inet;\n    struct tcp_sock *tp;\n    struct tcp_skb_cb *tcb;\n    struct tcphdr *th;\n    int err;\n\n    tp = tcp_sk(sk);\n\n    skb-&gt;skb_mstamp = tp-&gt;tcp_mstamp;\n    inet = inet_sk(sk);\n    tcb = TCP_SKB_CB(skb);\n    memset(&amp;opts, 0, sizeof(opts));\n\n    tcp_header_size = tcp_options_size + sizeof(struct tcphdr);\n    skb_push(skb, tcp_header_size);\n\n    /* Build TCP header and checksum it. */\n    th = (struct tcphdr *)skb-&gt;data;\n    th-&gt;source      = inet-&gt;inet_sport;\n    th-&gt;dest        = inet-&gt;inet_dport;\n    th-&gt;seq         = htonl(tcb-&gt;seq);\n    th-&gt;ack_seq     = htonl(tp-&gt;rcv_nxt);\n    *(((__be16 *)th) + 6)   = htons(((tcp_header_size &gt;&gt; 2) &lt;&lt; 12) |\n                    tcb-&gt;tcp_flags);\n\n    th-&gt;check       = 0;\n    th-&gt;urg_ptr     = 0;\n......\n    tcp_options_write((__be32 *)(th + 1), tp, &amp;opts);\n    th-&gt;window  = htons(min(tp-&gt;rcv_wnd, 65535U));\n......\n    err = icsk-&gt;icsk_af_ops-&gt;queue_xmit(sk, skb, &amp;inet-&gt;cork.fl);\n......\n}\n</code></pre><p>tcp_transmit_skb这个函数比较长，主要做了两件事情，第一件事情就是填充TCP头，如果我们对着TCP头的格式。</p><p><img src=\"https://static001.geekbang.org/resource/image/be/0e/be225a97816a664367f29be9046aa30e.png\" alt=\"\"></p><p>这里面有源端口，设置为inet_sport，有目标端口，设置为inet_dport；有序列号，设置为tcb-&gt;seq；有确认序列号，设置为tp-&gt;rcv_nxt。我们把所有的flags设置为tcb-&gt;tcp_flags。设置选项为opts。设置窗口大小为tp-&gt;rcv_wnd。</p><p>全部设置完毕之后，就会调用icsk_af_ops的queue_xmit方法，icsk_af_ops指向ipv4_specific，也即调用的是ip_queue_xmit函数。</p><pre><code>const struct inet_connection_sock_af_ops ipv4_specific = {\n        .queue_xmit        = ip_queue_xmit,\n        .send_check        = tcp_v4_send_check,\n        .rebuild_header    = inet_sk_rebuild_header,\n        .sk_rx_dst_set     = inet_sk_rx_dst_set,\n        .conn_request      = tcp_v4_conn_request,\n        .syn_recv_sock     = tcp_v4_syn_recv_sock,\n        .net_header_len    = sizeof(struct iphdr),\n        .setsockopt        = ip_setsockopt,\n        .getsockopt        = ip_getsockopt,\n        .addr2sockaddr     = inet_csk_addr2sockaddr,\n        .sockaddr_len      = sizeof(struct sockaddr_in),\n        .mtu_reduced       = tcp_v4_mtu_reduced,\n};\n</code></pre><h2>总结时刻</h2><p>这一节，我们解析了发送一个网络包的一部分过程，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/dc/44/dc66535fa7e1a10fd6d728865f6c9344.png\" alt=\"\"></p><p>这个过程分成几个层次。</p><ul>\n<li>VFS层：write系统调用找到struct file，根据里面的file_operations的定义，调用sock_write_iter函数。sock_write_iter函数调用sock_sendmsg函数。</li>\n<li>Socket层：从struct file里面的private_data得到struct socket，根据里面ops的定义，调用inet_sendmsg函数。</li>\n<li>Sock层：从struct socket里面的sk得到struct sock，根据里面sk_prot的定义，调用tcp_sendmsg函数。</li>\n<li>TCP层：tcp_sendmsg函数会调用tcp_write_xmit函数，tcp_write_xmit函数会调用tcp_transmit_skb，在这里实现了TCP层面向连接的逻辑。</li>\n<li>IP层：扩展struct sock，得到struct inet_connection_sock，根据里面icsk_af_ops的定义，调用ip_queue_xmit函数。</li>\n</ul><h2>课堂练习</h2><p>如果你对TCP协议的结构不太熟悉，可以使用tcpdump命令截取一个TCP的包，看看里面的结构。</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><p></p>","neighbors":{"left":{"article_title":"44 | Socket内核数据结构：如何成立特大项目合作部？","id":105980},"right":{"article_title":"46 | 发送网络包（下）：如何表达我们想让合作伙伴做什么？","id":107209}},"comments":[]}