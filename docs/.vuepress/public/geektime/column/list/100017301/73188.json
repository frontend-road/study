{"id":73188,"title":"37 | 贪心算法：如何用贪心算法实现Huffman压缩编码？","content":"<p>基础的数据结构和算法我们基本上学完了，接下来几节，我会讲几种更加基本的算法。它们分别是贪心算法、分治算法、回溯算法、动态规划。更加确切地说，它们应该是算法思想，并不是具体的算法，常用来指导我们设计具体的算法和编码等。</p><p>贪心、分治、回溯、动态规划这4个算法思想，原理解释起来都很简单，但是要真正掌握且灵活应用，并不是件容易的事情。所以，接下来的这4个算法思想的讲解，我依旧不会长篇大论地去讲理论，而是结合具体的问题，让你自己感受这些算法是怎么工作的，是如何解决问题的，带你在问题中体会这些算法的本质。我觉得，这比单纯记忆原理和定义要更有价值。</p><p>今天，我们先来学习一下贪心算法（greedy algorithm）。贪心算法有很多经典的应用，比如霍夫曼编码（Huffman Coding）、Prim和Kruskal最小生成树算法、还有Dijkstra单源最短路径算法。最小生成树算法和最短路径算法我们后面会讲到，所以我们今天讲下霍夫曼编码，看看<strong>它是如何利用贪心算法来实现对数据压缩编码，有效节省数据存储空间的</strong>。</p><h2>如何理解“贪心算法”？</h2><p>关于贪心算法，我们先看一个例子。</p><p>假设我们有一个可以容纳100kg物品的背包，可以装各种物品。我们有以下5种豆子，每种豆子的总量和总价值都各不相同。为了让背包中所装物品的总价值最大，我们如何选择在背包中装哪些豆子？每种豆子又该装多少呢？</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/f9/c7/f93f4567168d3bc65688a785b76753c7.jpg?wh=1142*558\" alt=\"\"></p><p>实际上，这个问题很简单，我估计你一下子就能想出来，没错，我们只要先算一算每个物品的单价，按照单价由高到低依次来装就好了。单价从高到低排列，依次是：黑豆、绿豆、红豆、青豆、黄豆，所以，我们可以往背包里装20kg黑豆、30kg绿豆、50kg红豆。</p><p>这个问题的解决思路显而易见，它本质上借助的就是贪心算法。结合这个例子，我总结一下贪心算法解决问题的步骤，我们一起来看看。</p><p><strong>第一步，当我们看到这类问题的时候，首先要联想到贪心算法</strong>：针对一组数据，我们定义了限制值和期望值，希望从中选出几个数据，在满足限制值的情况下，期望值最大。</p><p>类比到刚刚的例子，限制值就是重量不能超过100kg，期望值就是物品的总价值。这组数据就是5种豆子。我们从中选出一部分，满足重量不超过100kg，并且总价值最大。</p><p><strong>第二步，我们尝试看下这个问题是否可以用贪心算法解决</strong>：每次选择当前情况下，在对限制值同等贡献量的情况下，对期望值贡献最大的数据。</p><p>类比到刚刚的例子，我们每次都从剩下的豆子里面，选择单价最高的，也就是重量相同的情况下，对价值贡献最大的豆子。</p><p><strong>第三步，我们举几个例子看下贪心算法产生的结果是否是最优的</strong>。大部分情况下，举几个例子验证一下就可以了。严格地证明贪心算法的正确性，是非常复杂的，需要涉及比较多的数学推理。而且，从实践的角度来说，大部分能用贪心算法解决的问题，贪心算法的正确性都是显而易见的，也不需要严格的数学推导证明。</p><p>实际上，用贪心算法解决问题的思路，并不总能给出最优解。</p><p>我来举一个例子。在一个有权图中，我们从顶点S开始，找一条到顶点T的最短路径（路径中边的权值和最小）。贪心算法的解决思路是，每次都选择一条跟当前顶点相连的权最小的边，直到找到顶点T。按照这种思路，我们求出的最短路径是S-&gt;A-&gt;E-&gt;T，路径长度是1+4+4=9。</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/42/2de91c0afb0912378c5acf32a173f642.jpg?wh=1142*534\" alt=\"\"></p><p>但是，这种贪心的选择方式，最终求的路径并不是最短路径，因为路径S-&gt;B-&gt;D-&gt;T才是最短路径，因为这条路径的长度是2+2+2=6。为什么贪心算法在这个问题上不工作了呢？</p><p>在这个问题上，贪心算法不工作的主要原因是，前面的选择，会影响后面的选择。如果我们第一步从顶点S走到顶点A，那接下来面对的顶点和边，跟第一步从顶点S走到顶点B，是完全不同的。所以，即便我们第一步选择最优的走法（边最短），但有可能因为这一步选择，导致后面每一步的选择都很糟糕，最终也就无缘全局最优解了。</p><h2>贪心算法实战分析</h2><p>对于贪心算法，你是不是还有点懵？如果死抠理论的话，确实很难理解透彻。掌握贪心算法的关键是多练习。只要多练习几道题，自然就有感觉了。所以，我带着你分析几个具体的例子，帮助你深入理解贪心算法。</p><h3>1.分糖果</h3><p>我们有m个糖果和n个孩子。我们现在要把糖果分给这些孩子吃，但是糖果少，孩子多（m&lt;n），所以糖果只能分配给一部分孩子。</p><p>每个糖果的大小不等，这m个糖果的大小分别是s1，s2，s3，……，sm。除此之外，每个孩子对糖果大小的需求也是不一样的，只有糖果的大小大于等于孩子的对糖果大小的需求的时候，孩子才得到满足。假设这n个孩子对糖果大小的需求分别是g1，g2，g3，……，gn。</p><p>我的问题是，如何分配糖果，能尽可能满足最多数量的孩子？</p><p>我们可以把这个问题抽象成，从n个孩子中，抽取一部分孩子分配糖果，让满足的孩子的个数（期望值）是最大的。这个问题的限制值就是糖果个数m。</p><p>我们现在来看看如何用贪心算法来解决。对于一个孩子来说，如果小的糖果可以满足，我们就没必要用更大的糖果，这样更大的就可以留给其他对糖果大小需求更大的孩子。另一方面，对糖果大小需求小的孩子更容易被满足，所以，我们可以从需求小的孩子开始分配糖果。因为满足一个需求大的孩子跟满足一个需求小的孩子，对我们期望值的贡献是一样的。</p><p>我们每次从剩下的孩子中，找出对糖果大小需求最小的，然后发给他剩下的糖果中能满足他的最小的糖果，这样得到的分配方案，也就是满足的孩子个数最多的方案。</p><h3>2.钱币找零</h3><p>这个问题在我们的日常生活中更加普遍。假设我们有1元、2元、5元、10元、20元、50元、100元这些面额的纸币，它们的张数分别是c1、c2、c5、c10、c20、c50、c100。我们现在要用这些钱来支付K元，最少要用多少张纸币呢？</p><p>在生活中，我们肯定是先用面值最大的来支付，如果不够，就继续用更小一点面值的，以此类推，最后剩下的用1元来补齐。</p><p>在贡献相同期望值（纸币数目）的情况下，我们希望多贡献点金额，这样就可以让纸币数更少，这就是一种贪心算法的解决思路。直觉告诉我们，这种处理方法就是最好的。实际上，要严谨地证明这种贪心算法的正确性，需要比较复杂的、有技巧的数学推导，我不建议你花太多时间在上面，不过如果感兴趣的话，可以自己去研究下。</p><h3>3.区间覆盖</h3><p>假设我们有n个区间，区间的起始端点和结束端点分别是[l1, r1]，[l2, r2]，[l3, r3]，……，[ln, rn]。我们从这n个区间中选出一部分区间，这部分区间满足两两不相交（端点相交的情况不算相交），最多能选出多少个区间呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/f0/cd/f0a1b7978711651d9f084d19a70805cd.jpg?wh=1142*369\" alt=\"\"></p><p>这个问题的处理思路稍微不是那么好懂，不过，我建议你最好能弄懂，因为这个处理思想在很多贪心算法问题中都有用到，比如任务调度、教师排课等等问题。</p><p>这个问题的解决思路是这样的：我们假设这n个区间中最左端点是lmin，最右端点是rmax。这个问题就相当于，我们选择几个不相交的区间，从左到右将[lmin, rmax]覆盖上。我们按照起始端点从小到大的顺序对这n个区间排序。</p><p>我们每次选择的时候，左端点跟前面的已经覆盖的区间不重合的，右端点又尽量小的，这样可以让剩下的未覆盖区间尽可能的大，就可以放置更多的区间。这实际上就是一种贪心的选择方法。</p><p><img src=\"https://static001.geekbang.org/resource/image/ef/b5/ef2d0bd8284cb6e69294566a45b0e2b5.jpg?wh=1142*693\" alt=\"\"></p><h2>解答开篇</h2><p>今天的内容就讲完了，我们现在来看开篇的问题，如何用贪心算法实现霍夫曼编码？</p><p>假设我有一个包含1000个字符的文件，每个字符占1个byte（1byte=8bits），\u001b存储这1000个字符就一共需要8000bits，那有没有更加节省空间的存储方式呢？</p><p>假设我们通过统计分析发现，这1000个字符中只包含6种不同字符，假设它们分别是a、b、c、d、e、f。而3个二进制位（bit）就可以表示8个不同的字符，所以，为了尽量减少存储空间，每个字符我们用3个二进制位来表示。那存储这1000个字符只需要3000bits就可以了，比原来的存储方式节省了很多空间。不过，还有没有更加节省空间的存储方式呢？</p><pre><code>a(000)、b(001)、c(010)、d(011)、e(100)、f(101)\n</code></pre><p>霍夫曼编码就要登场了。霍夫曼编码是一种十分有效的编码方法，广泛用于数据压缩中，其压缩率通常在20%～90%之间。</p><p>霍夫曼编码不仅会考察文本中有多少个不同字符，还会考察每个字符出现的频率，根据频率的不同，选择不同长度的编码。霍夫曼编码试图用这种不等长的编码方法，来进一步增加压缩的效率。如何给不同频率的字符选择不同长度的编码呢？根据贪心的思想，我们可以把出现频率比较多的字符，用稍微短一些的编码；出现频率比较少的字符，用稍微长一些的编码。</p><p>对于等长的编码来说，我们解压缩起来很简单。比如刚才那个例子中，我们用3个bit表示一个字符。在解压缩的时候，我们每次从文本中读取3位二进制码，然后翻译成对应的字符。但是，霍夫曼编码是不等长的，每次应该读取1位还是2位、3位等等来解压缩呢？这个问题就导致霍夫曼编码解压缩起来比较复杂。为了避免解压缩过程中的歧义，霍夫曼编码要求各个字符的编码之间，不会出现某个编码是另一个编码前缀的情况。</p><p><img src=\"https://static001.geekbang.org/resource/image/02/29/02ad3e02429b294412fb1cff1b3d3829.jpg?wh=1142*320\" alt=\"\"></p><p>假设这6个字符出现的频率从高到低依次是a、b、c、d、e、f。我们把它们编码下面这个样子，任何一个字符的编码都不是另一个的前缀，在解压缩的时候，我们每次会读取尽可能长的可解压的二进制串，所以在解压缩的时候也不会歧义。经过这种编码压缩之后，这1000个字符只需要2100bits就可以了。</p><p><img src=\"https://static001.geekbang.org/resource/image/83/45/83921e609c8a4dc81ca5b90c8b4cd745.jpg?wh=1142*652\" alt=\"\"></p><p>尽管霍夫曼编码的思想并不难理解，但是如何根据字符出现频率的不同，给不同的字符进行不同长度的编码呢？这里的处理稍微有些技巧。</p><p>我们把每个字符看作一个节点，并且附带着把频率放到优先级队列中。我们从队列中取出频率最小的两个节点A、B，然后新建一个节点C，把频率设置为两个节点的频率之和，并把这个新节点C作为节点A、B的父节点。最后再把C节点放入到优先级队列中。重复这个过程，直到队列中没有数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/7b/7a/7b6a08e7df45eac66820b959c64f877a.jpg?wh=1142*842\" alt=\"\"></p><p>现在，我们给每一条边加上画一个权值，指向左子节点的边我们统统标记为0，指向右子节点的边，我们统统标记为1，那从根节点到叶节点的路径就是叶节点对应字符的霍夫曼编码。</p><p><img src=\"https://static001.geekbang.org/resource/image/cc/ed/ccf15d048be005924a409574dce143ed.jpg?wh=1142*570\" alt=\"\"></p><h2>内容小结</h2><p>今天我们学习了贪心算法。</p><p>实际上，贪心算法适用的场景比较有限。这种算法思想更多的是指导设计基础算法。比如最小生成树算法、单源最短路径算法，这些算法都用到了贪心算法。<strong>从我个人的学习经验来讲，不要刻意去记忆贪心算法的原理，多练习才是最有效的学习方法。</strong></p><p>贪心算法的最难的一块是如何将要解决的问题抽象成贪心算法模型，只要这一步搞定之后，贪心算法的编码一般都很简单。贪心算法解决问题的正确性虽然很多时候都看起来是显而易见的，但是要严谨地证明算法能够得到最优解，并不是件容易的事。所以，很多时候，我们只需要多举几个例子，看一下贪心算法的解决方案是否真的能得到最优解就可以了。</p><h2>课后思考</h2><ol>\n<li>\n<p>在一个非负整数a中，我们希望从中移除k个数字，让剩下的数字值最小，如何选择移除哪k个数字呢？</p>\n</li>\n<li>\n<p>假设有n个人等待被服务，但是服务窗口只有一个，每个人需要被服务的时间长度是不同的，如何安排被服务的先后顺序，才能让这n个人总的等待时间最短？</p>\n</li>\n</ol><p>欢迎留言和我分享，也欢迎点击“<span class=\"orange\">请朋友读</span>”，把今天的内容分享给你的好友，和他一起讨论、学习。</p>","comments":[{"had_liked":false,"id":50605,"user_name":"cirno","can_delete":false,"product_type":"c1","uid":1299368,"ip_address":"","ucode":"B6C1A7BEDD8F02","user_header":"https://static001.geekbang.org/account/avatar/00/13/d3/a8/fedf0141.jpg","comment_is_top":false,"comment_ctime":1545015871,"is_pvip":false,"discussion_count":41,"race_medal":0,"score":"1414589256255","product_id":100017301,"comment_content":"1、由最高位开始，比较低一位数字，如高位大，移除，若高位小，则向右移一位继续比较两个数字，直到高位大于低位则移除，循环k次，如：<br>4556847594546移除5位-》455647594546-》45547594546-》4547594546-》4447594546-》444594546<br><br>2、由等待时间最短的开始服务","like_count":330,"discussions":[{"author":{"id":1718881,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/3a/61/d276a71a.jpg","nickname":"よほ-キルア","note":"","ucode":"383C991F8BAECE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":50411,"discussion_content":"可以借助一个栈，从高位数据开始入栈，如果次地位大于栈顶元素入栈，如果小于，弹出栈顶元素直到栈顶元素小于入栈元素，同时计数k减1，判断k不为0继续重复操作，如果k已经减到0，还有元素，将剩余的入栈。如果元素已经入完栈，k不为0，则弹出相应的个元素。最后栈内元素及为结果。","likes_number":71,"is_delete":false,"is_hidden":false,"ctime":1573718211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":7,"child_discussions":[{"author":{"id":1038449,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d8/71/d6f79534.jpg","nickname":"一个工匠","note":"","ucode":"2168BA6F926074","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1718881,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/3a/61/d276a71a.jpg","nickname":"よほ-キルア","note":"","ucode":"383C991F8BAECE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":243434,"discussion_content":"这个是对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587540470,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":50411,"ip_address":""},"score":243434,"extra":""},{"author":{"id":1972505,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/19/19/d82e24fb.jpg","nickname":"李润东","note":"","ucode":"65CFEA3C8B27C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1718881,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/3a/61/d276a71a.jpg","nickname":"よほ-キルア","note":"","ucode":"383C991F8BAECE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263896,"discussion_content":"厉害厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589262904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":50411,"ip_address":""},"score":263896,"extra":""},{"author":{"id":1114093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/ed/b2fc0e7c.jpg","nickname":"7","note":"","ucode":"10A6E57A027D42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1718881,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/3a/61/d276a71a.jpg","nickname":"よほ-キルア","note":"","ucode":"383C991F8BAECE","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265193,"discussion_content":"如果等于的话，也要移除","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1589379260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":50411,"ip_address":""},"score":265193,"extra":""}]},{"author":{"id":1085207,"avatar":"https://static001.geekbang.org/account/avatar/00/10/8f/17/aa66313a.jpg","nickname":"Shaw","note":"","ucode":"CE382F300EFF19","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":294807,"discussion_content":"我来一个Leetcode的传送门，大家可以自己动手写下：\nhttps://leetcode-cn.com/problems/remove-k-digits/","likes_number":19,"is_delete":false,"is_hidden":false,"ctime":1596005616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026448,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a9/90/0c5ed3d9.jpg","nickname":"颇忒妥","note":"","ucode":"AA86AD1049BC2E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":262963,"discussion_content":"如果是12345里移掉2个数字，那么肯定是移掉45变成123。楼主的算法还得加上两个逻辑：\n1. 如果扫描到末尾还没有发现高位>低位的情况，那么直接移掉末尾。\n2. 如果发现移掉掉位数不足k，那么得再循环来一次直到移掉k个数字","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1589159030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1834181,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/fc/c5/ff8b770e.jpg","nickname":"BugBean","note":"","ucode":"B51232281AD9BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026448,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a9/90/0c5ed3d9.jpg","nickname":"颇忒妥","note":"","ucode":"AA86AD1049BC2E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276234,"discussion_content":"还有比123小的吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590844438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":262963,"ip_address":""},"score":276234,"extra":""},{"author":{"id":1221604,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a3/e4/50266292.jpg","nickname":"库博","note":"","ucode":"0D5DD558C9EB25","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1026448,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a9/90/0c5ed3d9.jpg","nickname":"颇忒妥","note":"","ucode":"AA86AD1049BC2E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":395399,"discussion_content":"第2步太低效，一趟循环就够了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632299942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":262963,"ip_address":""},"score":395399,"extra":""}]},{"author":{"id":1106109,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/bd/3abd26fd.jpg","nickname":"豪曹","note":"","ucode":"93C1CE47B74899","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289457,"discussion_content":"逻辑基本是对的，但是没考虑极限情况，即高位总是小于低位时，怎么处理，此时应当从低位开始移除，还有例子写错了，多了一个4","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1594106612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1186807,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1b/f7/45e8b64a.jpg","nickname":"Fire","note":"","ucode":"4A2C50B77EDB2C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1106109,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/bd/3abd26fd.jpg","nickname":"豪曹","note":"","ucode":"93C1CE47B74899","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":290333,"discussion_content":"这个是没问题的，不需要单独为这种情况改变算法逻辑，还是从高位开始，某次循环遍历到末尾时删除末尾就好了。层主只需说个思路，涉及到具体代码实现细节要自己考虑就好","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1594433063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":289457,"ip_address":""},"score":290333,"extra":""},{"author":{"id":1284088,"avatar":"https://static001.geekbang.org/account/avatar/00/13/97/f8/b6fb9567.jpg","nickname":"ch_test","note":"","ucode":"0BD681C1D39B39","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1106109,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e0/bd/3abd26fd.jpg","nickname":"豪曹","note":"","ucode":"93C1CE47B74899","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358358,"discussion_content":"我的天，遇到同名同姓的...","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615971574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":289457,"ip_address":""},"score":358358,"extra":""}]},{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87951,"discussion_content":"单调栈的思想，完美","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1576681413,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1100041,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c9/09/0be94d31.jpg","nickname":"咬咬","note":"","ucode":"73097B9BEECC0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":186879,"discussion_content":"正序排的数字是最小的，而且小的数在高位比大数在高位要小，在移除有限个数字的时候，让高位越小整体越小，所以楼主的措施是正确的","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1582719527,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1519362,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2f/02/e7289586.jpg","nickname":"Roger","note":"","ucode":"4CDEEA3B1C074B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41423,"discussion_content":"需要考虑数据中含有0的特殊情况，位于第一个0前面的数字串和后面的数字串均按如上处理，这个算法就完备了。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1572423406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1064423,"avatar":"https://static001.geekbang.org/account/avatar/00/10/3d/e7/d04bf0cf.jpg","nickname":"wod.Y","note":"","ucode":"CFAFCE8BA59862","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1519362,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2f/02/e7289586.jpg","nickname":"Roger","note":"","ucode":"4CDEEA3B1C074B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":100353,"discussion_content":"0既然是一样处理，还叫什么特殊情况？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577253057,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41423,"ip_address":""},"score":100353,"extra":""}]},{"author":{"id":1634260,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ef/d4/292132f9.jpg","nickname":"fxlego","note":"","ucode":"32B09E5B542BBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331258,"discussion_content":"为什么不是每次捡最大的移除？比如3298，移除9","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1606816684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":3,"child_discussions":[{"author":{"id":2007489,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaSLzlzBvESwqNTtgatpqYUsFibm1I5lh0iaiaBGGq6zYywIrOnClqeIDNDticXKuSBL39ZedxaHuImjmuwBF3rFZrA/132","nickname":"Geek_e8b7c7","note":"","ucode":"BDC9E7E9FC461D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1634260,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ef/d4/292132f9.jpg","nickname":"fxlego","note":"","ucode":"32B09E5B542BBA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":341186,"discussion_content":"因为需要考虑位数，比如a = 3819, k = 1，移除9-->381，移除8-->319，结果381 > 319","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1610344345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331258,"ip_address":""},"score":341186,"extra":""},{"author":{"id":1847319,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/30/17/e54d1967.jpg","nickname":"胖三斤","note":"","ucode":"F20633545E551E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1634260,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ef/d4/292132f9.jpg","nickname":"fxlego","note":"","ucode":"32B09E5B542BBA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":343630,"discussion_content":"328小还是298小？","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1611114662,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331258,"ip_address":""},"score":343630,"extra":""},{"author":{"id":1151796,"avatar":"https://static001.geekbang.org/account/avatar/00/11/93/34/5e5b958e.jpg","nickname":"How2Go","note":"","ucode":"A2242F1C832D36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1634260,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ef/d4/292132f9.jpg","nickname":"fxlego","note":"","ucode":"32B09E5B542BBA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364969,"discussion_content":"问了我想问的😏","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617673315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":331258,"ip_address":""},"score":364969,"extra":""}]},{"author":{"id":1518041,"avatar":"https://static001.geekbang.org/account/avatar/00/17/29/d9/4358d6fb.jpg","nickname":"猫猫","note":"","ucode":"46E5356348DA36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1340,"discussion_content":"最后两个数字开头都多了个4","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1562567579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1232156,"avatar":"https://static001.geekbang.org/account/avatar/00/12/cd/1c/98b32e26.jpg","nickname":"雷大鸡","note":"","ucode":"54B3525C199749","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41860,"discussion_content":"不够快，因为遍历太多次，可以转为字符串，遍历一次建立哈希表，取最大的k个数字对应的字符串下标，清除这些下标对应的字符，将剩余字符串转回数字即可。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1572524625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1518173,"avatar":"https://static001.geekbang.org/account/avatar/00/17/2a/5d/8abcdefc.jpg","nickname":"清辉夜凝","note":"","ucode":"52BD800B45E058","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1232156,"avatar":"https://static001.geekbang.org/account/avatar/00/12/cd/1c/98b32e26.jpg","nickname":"雷大鸡","note":"","ucode":"54B3525C199749","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46106,"discussion_content":"感觉你说的不对，比如7639428这个数字，移除3个数字。按你说的就是去掉最大的3个数字7 8 9，则得到6342，而按层主的方法得到3428才是正确的答案","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1573121155,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41860,"ip_address":""},"score":46106,"extra":""},{"author":{"id":1241770,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","nickname":"失火的夏天","note":"","ucode":"10C6E66EB2A65F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1232156,"avatar":"https://static001.geekbang.org/account/avatar/00/12/cd/1c/98b32e26.jpg","nickname":"雷大鸡","note":"","ucode":"54B3525C199749","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":87956,"discussion_content":"人家就遍历了一次啊，哪里慢了，你这个算法错了不说，构造哈希表也要遍历一次吧，你也没优势","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1576681511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":41860,"ip_address":""},"score":87956,"extra":""}]},{"author":{"id":1428828,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","nickname":"岁月如歌","note":"","ucode":"1AEBD6F79941B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2261,"discussion_content":"解法方式不错  楼上说的对 数据写错了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1563417507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2637680,"avatar":"https://static001.geekbang.org/account/avatar/00/28/3f/70/335c8478.jpg","nickname":"Artia Deng.","note":"","ucode":"284EE9B3AF6E29","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386143,"discussion_content":"单调栈来解这题就很NICE。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627440989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1194572,"avatar":"https://static001.geekbang.org/account/avatar/00/12/3a/4c/b6200773.jpg","nickname":"一步","note":"","ucode":"FBFAE23E8E48B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":284535,"discussion_content":"嗯，1，由高到底取前k+1位，找出最小的数字，剩下都移除，有相等时再往后移相应的剩下的位数，找最小。\n2，让人数最多时，每个人等待时间最短，人数最少时，等待时间最长，那就应该从服务时间最短的开始","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1592550890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1328142,"avatar":"https://static001.geekbang.org/account/avatar/00/14/44/0e/ce14b7d3.jpg","nickname":"-_-|||","note":"","ucode":"94B21594658BF9","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218917,"discussion_content":"都错","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1585713967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1205036,"avatar":"","nickname":"Dym","note":"","ucode":"7E521F01A4D823","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":33235,"discussion_content":"每次移除都是高位较比低位大的数字","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1571111421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1317847,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1b/d7/868d26ce.jpg","nickname":"songhyunmin","note":"","ucode":"D5A98668CD8532","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":369814,"discussion_content":"冒泡排序原理吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619163956,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1618072,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b0/98/26de1ee8.jpg","nickname":"CHuAN","note":"","ucode":"9C4E798C42A1B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340060,"discussion_content":"好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609895778,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1858552,"avatar":"","nickname":"Geek_c359d5","note":"","ucode":"1C3B7F9E625A48","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303315,"discussion_content":"第一个问题从大到小排序，然后再移除k位不就行了嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599210722,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1690660,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cc/24/28158cb9.jpg","nickname":"Don","note":"","ucode":"1B406E226E17B1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1858552,"avatar":"","nickname":"Geek_c359d5","note":"","ucode":"1C3B7F9E625A48","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310940,"discussion_content":"不行的，除在优先级问题，381移除一位，按你的方法结果是38，实际结果为81","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602147501,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":303315,"ip_address":""},"score":310940,"extra":""},{"author":{"id":1072658,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5e/12/c0c4d6f2.jpg","nickname":"Qiubh","note":"","ucode":"3BC33EC44F2FDE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1690660,"avatar":"https://static001.geekbang.org/account/avatar/00/19/cc/24/28158cb9.jpg","nickname":"Don","note":"","ucode":"1B406E226E17B1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387538,"discussion_content":"381移除一位，实际结果是31.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628237396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":310940,"ip_address":""},"score":387538,"extra":""}]},{"author":{"id":1201054,"avatar":"https://static001.geekbang.org/account/avatar/00/12/53/9e/e932c1a8.jpg","nickname":"jing","note":"","ucode":"C0186996EBD25A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":231872,"discussion_content":"赞同楼主解法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586834675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":110758,"discussion_content":"同意，见思的方法，多举几个例子，分别移除1位、2位、3位等，就能找到规律","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577754929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068361,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","nickname":"明翼","note":"","ucode":"E77F86BEB3D5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9373,"discussion_content":"为什么不是直接移出最高位那，这样对。？？？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568162473,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":4,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1595921,"avatar":"https://static001.geekbang.org/account/avatar/00/18/5a/11/56397685.jpg","nickname":"见思","note":"","ucode":"26F4428210F168","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1068361,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","nickname":"明翼","note":"","ucode":"E77F86BEB3D5C1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24801,"discussion_content":"其实你随便举个例子都能明白, 49 移除一位, 单纯移除高位就是 9, 而如果移除9 就是 4","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1570266651,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":9373,"ip_address":""},"score":24801,"extra":""}]}]},{"had_liked":false,"id":55512,"user_name":"开心小毛","can_delete":false,"product_type":"c1","uid":1023762,"ip_address":"","ucode":"9D57A2773759F3","user_header":"","comment_is_top":false,"comment_ctime":1546221670,"is_pvip":false,"replies":[{"id":"20198","content":"是的 👍","user_name":"作者回复","comment_id":55512,"uid":"1190123","ip_address":"","utype":1,"ctime":1546394805,"user_name_real":"gg"}],"discussion_count":12,"race_medal":0,"score":"920669223014","product_id":100017301,"comment_content":"找零问题不能用贪婪算法，即使有面值为一元的币值也不行：考虑币值为100，99和1的币种，每种各一百张，找396元。<br> 动态规划可求出四张99元，但贪心算法解出需三张一百和96张一元。","like_count":215,"discussions":[{"author":{"id":1609624,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/98/7d1287d9.jpg","nickname":"韩 * *","note":"","ucode":"4F08BE3D081FFC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3141,"discussion_content":"可以验证一下人民币币值设计本身是否就是能够保证贪婪算法的最优性","likes_number":19,"is_delete":false,"is_hidden":false,"ctime":1564217577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1444483,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","nickname":"风","note":"","ucode":"E1CE0825AAF805","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141670,"discussion_content":"区别在于，目标值是一个范围，还是一个值。如果给的是一个范围，比如找的钱不少于396元，这就是个贪婪问题。如果要求找的钱就是396元，这就相当于一个排列组合的问题了，可以用动态规划。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1579437296,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1861945,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/4nRUmVqj6g59wwDwPvNiafK5wRPJY9YB6GUKFXV6qdicIVtjvlricF0dbpvFmV8TyNsw9ciak5LLVbxDQBYl3UYILQ/132","nickname":"HCY","note":"","ucode":"D779EDF89EE6B5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1444483,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","nickname":"风","note":"","ucode":"E1CE0825AAF805","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":237984,"discussion_content":"感觉关键不是目标值是范围or值，关键在于币值的设定，是否能够使用贪心算法","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1587203014,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":141670,"ip_address":""},"score":237984,"extra":""}]},{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":24804,"discussion_content":"文章中举的例子用贪心没有问题，因为最终一定可以找开。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1570267422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434790,"discussion_content":"是的 👍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1546394805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1152743,"avatar":"https://static001.geekbang.org/account/avatar/00/11/96/e7/57cf6b75.jpg","nickname":"明光村小队长","note":"","ucode":"F6088DAD9D9E37","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391561,"discussion_content":"主要是前一张选择的币，可能会影响后面币种的选择，就和最短路径一样，第一步最佳，可能整体就不最佳了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1630510366,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1478851,"avatar":"https://static001.geekbang.org/account/avatar/00/16/90/c3/abad22d8.jpg","nickname":"berryjam","note":"","ucode":"E9DBF81D977DC0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":5430,"discussion_content":"这种情况就变成背包问题，用动态规划求解了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566263420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2332598,"avatar":"https://static001.geekbang.org/account/avatar/00/23/97/b6/95263edc.jpg","nickname":"看，天空","note":"","ucode":"E9AF87587A8005","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337624,"discussion_content":"没看懂￣□￣｜｜","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608993094,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1735002,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/loOqiajRMDoBmMs8bLeIjfhwYN0DNf3ic7x92hw6mW5GWG3mVkw7ub52cqjvkVqt4Fq3fU0A2C7WcsS3icIlOd1fg/132","nickname":"Geek_宋","note":"","ucode":"B050CEE1BE9221","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300936,"discussion_content":"厉害了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598327689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2036705,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/13/e1/6939ae4f.jpg","nickname":"knight劉先生","note":"","ucode":"CEE9BFC8D3D969","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":291027,"discussion_content":"厉害三连","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594686335,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1749228,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/b0/ec/78be126d.jpg","nickname":"迈克糖","note":"","ucode":"A55D3DB2B20C4B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276592,"discussion_content":"佩服佩服，厉害厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590908862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1336634,"avatar":"https://static001.geekbang.org/account/avatar/00/14/65/3a/bc801fb2.jpg","nickname":"mqray","note":"","ucode":"15664507AD7033","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":267233,"discussion_content":"不太懂动态规划啊。开心小毛的设定中，币值的面值为100，99，1 ，动态规划可以找4张99，而贪心找3张100和96张1。那如果就是现实生活中人民币面值，找396，哪种方式更靠谱呢？看完动态规划我过来还愿","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589618474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50523,"user_name":"Jalyn","can_delete":false,"product_type":"c1","uid":1324026,"ip_address":"","ucode":"3878192B80FCC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/33/fa/8a5167cd.jpg","comment_is_top":false,"comment_ctime":1545006885,"is_pvip":false,"replies":[{"id":"18159","content":"慢慢学 不着急😄","user_name":"作者回复","comment_id":50523,"uid":"1190123","ip_address":"","utype":1,"ctime":1545010059,"user_name_real":"gg"}],"discussion_count":10,"race_medal":0,"score":"306487684901","product_id":100017301,"comment_content":"想知道目前没掉队的有多少 哈哈","like_count":72,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433009,"discussion_content":"慢慢学 不着急😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545010059,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1412163,"avatar":"https://static001.geekbang.org/account/avatar/00/15/8c/43/af33659f.jpg","nickname":"亲斤弓虽😈","note":"","ucode":"575893ECF0B7AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4238,"discussion_content":"傻坚持,一遍不行多看几遍.算法和数据结构不是速成的事.掉队或者进行不下去是再正常不过了.咬牙坚持看,总能看懂.只要肯花时间,超越老师不是问题","likes_number":17,"is_delete":false,"is_hidden":false,"ctime":1565246300,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":81111,"discussion_content":"先驱们，加油\n我20191127开始追你们的进度，今天20191213了，追到这儿了，\n中间 红黑树、BM 、KMP、 AC自动机都让我难过，后面三个 每次都花了好几个小时看懂；红黑树 暂时没搞懂，回头在研究把。。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1576223895,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1238166,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e4/96/a5d775e9.jpg","nickname":"牧凉","note":"","ucode":"1F57A16E37C668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1330065,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/N0NACGUr8dNAbN6BdiagPHBaB0EnyDsI9zWpwJteqTY38apOEnTOA7JkBAQnzYKJBgxu3Q8YMUILwLAB6camn4w/132","nickname":"Swing","note":"","ucode":"55FCA9ECEFBBEB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":383388,"discussion_content":"红黑树我死磕了几周把代码写出来了，还是照着博客的思路一边看一边写的","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1626076215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":81111,"ip_address":""},"score":383388,"extra":""}]},{"author":{"id":1973346,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM6ssNfBGQXiafTSCBHtl4L7ykIBjqZMMpWU3v4ibwP0APYzWk88zELRaJXUNMIVcuWpkb0Q3x0CicYxg/132","nickname":"林海俭","note":"","ucode":"403020C3201C90","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560532,"discussion_content":"掉队厉害了，继续加油吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649382011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1292349,"avatar":"https://static001.geekbang.org/account/avatar/00/13/b8/3d/a3e290b0.jpg","nickname":"Nucky","note":"","ucode":"62783A339C61B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312880,"discussion_content":"我已经掉队了，然后找工作机试抽到第一题的编程题就是动态规划，第二天又去面试另一家公司还问我动态规划，我就滚回来从新从贪心开始看起。。。。。。。哎。。我这悲惨的命。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1602842783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1292087,"avatar":"https://static001.geekbang.org/account/avatar/00/13/b7/37/0290ff6e.jpg","nickname":"Veitor","note":"","ucode":"3397AC6D239195","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1292349,"avatar":"https://static001.geekbang.org/account/avatar/00/13/b8/3d/a3e290b0.jpg","nickname":"Nucky","note":"","ucode":"62783A339C61B7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":321234,"discussion_content":"这么高级，都是啥岗位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604551306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312880,"ip_address":""},"score":321234,"extra":""},{"author":{"id":2249227,"avatar":"https://static001.geekbang.org/account/avatar/00/22/52/0b/50bf0f05.jpg","nickname":"橙子橙","note":"","ucode":"CD51367A14D955","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1292349,"avatar":"https://static001.geekbang.org/account/avatar/00/13/b8/3d/a3e290b0.jpg","nickname":"Nucky","note":"","ucode":"62783A339C61B7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":322899,"discussion_content":"哈哈哈 哪个厂 头条?","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604839941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":312880,"ip_address":""},"score":322899,"extra":""}]},{"author":{"id":2221077,"avatar":"https://static001.geekbang.org/account/avatar/00/21/e4/15/80bf9ee3.jpg","nickname":"roman","note":"","ucode":"74F66DCB14DA22","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568684,"discussion_content":"磕磕绊绊的走到了这里🤯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651198049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1136352,"avatar":"https://static001.geekbang.org/account/avatar/00/11/56/e0/91e485b9.jpg","nickname":"弋言","note":"","ucode":"507418B211EC07","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218988,"discussion_content":"树那里就掉了😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585720872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":61991,"user_name":"qinggeouye","can_delete":false,"product_type":"c1","uid":1251536,"ip_address":"","ucode":"5B53EEDD7BEC9C","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/d0/49b06424.jpg","comment_is_top":false,"comment_ctime":1547874827,"is_pvip":false,"discussion_count":10,"race_medal":0,"score":"254950945291","product_id":100017301,"comment_content":"1、在一个非负整数 a 中，希望从中移除 k 个数字，让剩下的数字值最小，如何选择移除哪 k 个数字呢？<br><br>整数 a，由若干位数字组成，移除 k 个数字后的值最小。从高位开始移除：移除高位数字比它低位数字大的那个；K 次循环。<br><br>也可以用 Top K 排序，求出 K 个最大的数字，移除。<br><br>2、假设有 n 个人等待被服务，但是窗口只有一个，每个需要被服务的时间长度是不同的，如何安排被服务的先后顺序，才能让这 n 个人总的等待时间最短？<br><br>每个人需要被服务的时间不一样，但所有人加起来总的被服务时间是固定的。<br><br>题意是求 n 个人总的等待时间，每个人在被服务之前，所经过的等待时间是不同的。<br><br>而当前被服务的人所需的服务时间，会累加到剩下的那些等待被服务人的等待时间上。<br><br>要使 n 个人总的等待时间最短，那么每次安排服务时间最短的那个人被服务：堆排序（小顶堆）。<br><br><br>另外，@Alexis何春光 的留言，第一句话表示赞同。","like_count":59,"discussions":[{"author":{"id":1636167,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Y5U2ADUvruWhziaB4tSyiaADbmIcWX3kgEjKCOWkHYsjibdjzCEKooRoIxKZekymzzIGCW5MrLVicKd4c1EbFRZfkA/132","nickname":"Geek_3c2128","note":"","ucode":"7C079FC032285C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93307,"discussion_content":"TopK的方式是不对,举个例子:3255155,删除4位,用topK最后结果是321,但实际最小是155.","likes_number":22,"is_delete":false,"is_hidden":false,"ctime":1576920048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1014550,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/16/ca250e8c.jpg","nickname":"王木公","note":"","ucode":"F049AEBFA0338D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":274159,"discussion_content":"不能用topk\n\n1. 先算出移除k个数字，还剩下几位，比如剩下3位\n2. 然后根据从高位到低位（百位到个位），在整个中选数字即可\n3. 每次在可选范围内选最小的","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1590548542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1476862,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/fe/c18a85fe.jpg","nickname":"随风","note":"","ucode":"037CE3554D8AB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365674,"discussion_content":"topK方式不对，从高位判断也不对，老师不给个正确答案吗？比如1251移除一位最小的应该是121.","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617865101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2456502,"avatar":"https://static001.geekbang.org/account/avatar/00/25/7b/b6/6139258e.jpg","nickname":"I","note":"","ucode":"6828DD20BA208E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1476862,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/fe/c18a85fe.jpg","nickname":"随风","note":"","ucode":"037CE3554D8AB9","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587188,"discussion_content":"删除逆序的数即可，剩下的从大到小删除，例如1251， 5，1逆序，删除5。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662878608,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":365674,"ip_address":"江苏"},"score":587188,"extra":""}]},{"author":{"id":2304810,"avatar":"https://static001.geekbang.org/account/avatar/00/23/2b/2a/51e51255.jpg","nickname":"Superh","note":"","ucode":"B6394479A3AB1E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":362659,"discussion_content":"这问题肯定需要用到高位优先的贪心思想啊，topk个鬼啊topk","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617001404,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438860,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f4/8c/0866b228.jpg","nickname":"子房","note":"","ucode":"CB05938C248BB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":358203,"discussion_content":"类比操作系统的短作业优先","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615946402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1377467,"avatar":"https://static001.geekbang.org/account/avatar/00/15/04/bb/5e5c37c1.jpg","nickname":"Angus","note":"","ucode":"7CC3BA1550FB5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269891,"discussion_content":"看了这么多，我发现都不够严谨，不考虑边界情况的吗就重复K次?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589959188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1016134,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/81/46/7d39bbf6.jpg","nickname":"晨雨零稀","note":"","ucode":"CD95487482F634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":214936,"discussion_content":"说了这么多，没人说个原理？为何这么做接下的就是最小了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585245112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1625233,"avatar":"https://static001.geekbang.org/account/avatar/00/18/cc/91/d56a81af.jpg","nickname":"CoderArthur","note":"","ucode":"5B591914F0F67C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1016134,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/81/46/7d39bbf6.jpg","nickname":"晨雨零稀","note":"","ucode":"CD95487482F634","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":307429,"discussion_content":"只是个思想，没保证最小吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600649066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214936,"ip_address":""},"score":307429,"extra":""},{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1016134,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/81/46/7d39bbf6.jpg","nickname":"晨雨零稀","note":"","ucode":"CD95487482F634","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345022,"discussion_content":"(1)最高位对数的大小影响最大，所以从最高位开始判断；\n(2)移除k个数后最小，相当于每次移除一个数后保持最小，进行k次；\n(3)当移除一个数后(假设非末尾数)，它的下一位会顶上来，如果顶上来的数比移除的还大，当前这个高位数就变大了(因为不移除的话该高位数更小)。所以要移除高位大于次高位的数。如果走到末尾移除尾巴就行了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1611641063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":214936,"ip_address":""},"score":345022,"extra":""}]}]},{"had_liked":false,"id":69814,"user_name":"bingo","can_delete":false,"product_type":"c1","uid":1341276,"ip_address":"","ucode":"DD96820EC8871D","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/5c/8d53165e.jpg","comment_is_top":false,"comment_ctime":1550850046,"is_pvip":false,"replies":[{"id":"25060","content":"👍啊 就喜欢你这么极致的人！","user_name":"作者回复","comment_id":69814,"uid":"1190123","ip_address":"","utype":1,"ctime":1551061590,"user_name_real":"gg"}],"discussion_count":5,"race_medal":0,"score":"216299214846","product_id":100017301,"comment_content":"@吴：wiki上的哈夫曼树是标准的生成步骤，老师这里举的例子是一种特殊情况，哈夫曼树构建的一般性方法在本科的教程上就写的很通俗了。<br>我用wiki里的值举个例子吧：原始集合的值是[2,3,4,4,5,7]<br>第一步：从原始集合中取出最小的两个值并将这两个值从原始集合中剔除，这两个最小的值相加得到一个新的值并加入原始集合，这两个小值作为这个新值的树叶，新值当然就是树根了。这一步执行之后原始集合就变成了这样：<br>       [ ⑤,  4,4,5,7]<br>\t&#47; \\<br>      2   3<br><br>第二步：从更新后的集合中再取最小的两个值并剔除，同样相加得到新值加入到集合。这一步执行之后集合就变成了<br>       [⑤,          ⑧  ,5,7]<br>\t&#47; \\          &#47;\\<br>      2   3       4  4<br><br>第三步，重复以上步骤，你懂得。结果是：<br>       [ ⑩,          ⑧,    7]<br>\t &#47; \\          &#47; \\<br>        5   ⑤       4  4<br>\t    &#47; \\  <br>\t   2  3<br>第四步，结果是：<br>       [ ⑩,          15,]<br>\t&#47; \\            &#47; \\<br>      5   ⑤         7   ⑧<br>\t   &#47;\\              &#47; \\<br>\t  2 3           4  4<br>最后一步，结果是：<br>               (25)           (打不出圆圈了，用这个代替，应该不难理解，嗯)<br>              &#47;    \\<br>         ⑩          15<br>\t&#47; \\           &#47; \\<br>      5   ⑤        7   ⑧<br>\t  &#47;\\              &#47; \\<br>\t  2 3           4  4<br><br>wiki哈夫曼树链接：https:&#47;&#47;zh.wikipedia.org&#47;wiki&#47;%E9%9C%8D%E5%A4%AB%E6%9B%BC%E7%BC%96%E7%A0%81<br>ps:大半夜手打，排版扎心","like_count":51,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440299,"discussion_content":"👍啊 就喜欢你这么极致的人！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551061590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1324122,"avatar":"https://static001.geekbang.org/account/avatar/00/14/34/5a/723311cd.jpg","nickname":"句子","note":"","ucode":"C0C20F466DF9D0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384726,"discussion_content":"这个第三部44在上一层，第四部为啥又和23在同一层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626714444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1114093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/ed/b2fc0e7c.jpg","nickname":"7","note":"","ucode":"10A6E57A027D42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265209,"discussion_content":"第三步有点小瑕疵，4，4应该和2，3同一层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589379798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1318394,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1d/fa/b81c89c3.jpg","nickname":"isobelar","note":"","ucode":"58CE4061984B43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263180,"discussion_content":"看完感觉作者讲解的Huffman编码算法并未将贪心算法思想运用到极致，还有很大的优化空间。编码算法按照字符出现频率大小分别设计为前缀不重复的二进制编码：01, 001, 0001...随着字符个数的增加，编码长度按照O(n)递增，这种编码方式压缩率其实并不高。如果按照Huffman树的方式编码，从Huffman树根到叶子结点，左边的节点编码字符+&#39;0&#39;， 右边节点编码字符+&#39;1&#39;，这种编码方式能够在保证任意字符在编码前缀不重复的情况下，能节省更多的空间，和增加压缩率。例如， 11, 00, 101, 011, 010, 1001, 1000.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589184738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1341276,"avatar":"https://static001.geekbang.org/account/avatar/00/14/77/5c/8d53165e.jpg","nickname":"bingo","note":"","ucode":"DD96820EC8871D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1318394,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1d/fa/b81c89c3.jpg","nickname":"isobelar","note":"","ucode":"58CE4061984B43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":263438,"discussion_content":"嗯，收到你的回复来回答。先指出问题吧：你这个编码方案没有把每个字符的出现频率(权值)考虑进去。\n\n哈夫曼树是根据权值来构建的，不同的权值构建的哈夫曼树是不一样的(即使相同的权值也可能不一样)。老师的那棵树是根据他的权值构建的，如果其中字符的权值改变一下也是可以构建出你的这种树哈夫曼树的。\n\n我们可以通过计算最终的编码加权长度来判断哪种编码方式最优。Σ(出现频率 * 编码长度)\n\n老师的编码加权长度是: 450*1 + 350*2 + 90 *3 + 60*4 +30*5 + 20*5 = 1910\n你的编码加权长度是: 450*2 + 350*2 + 90 *3 + 60*3 +30*3 + 20*4 = 2220\n所以老师的那个是正确的。\n\nTips：\n另外，你这种 哈夫曼树 是不存在，比较类似的构造方案可以是如下的：\n字符和对应出现频率：{a: 130, b: 70, c: 65, d: 50, e: 40, f: 55}，\n构造成哈夫曼树的编码：{a: 11, b: 00, c: 100, d: 011, e: 010, f: 101}\n\n如果有疑问可以留言，但是我最近不怎么上号，可能会晚点回复你","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1589207036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":263180,"ip_address":""},"score":263438,"extra":""}]}]},{"had_liked":false,"id":58896,"user_name":"Alexis何春光","can_delete":false,"product_type":"c1","uid":1181149,"ip_address":"","ucode":"614570FAE3B56A","user_header":"https://static001.geekbang.org/account/avatar/00/12/05/dd/b201cf13.jpg","comment_is_top":false,"comment_ctime":1547229894,"is_pvip":false,"discussion_count":12,"race_medal":0,"score":"164755987142","product_id":100017301,"comment_content":"留言里feifei说的两种解决思路都是错的，给的链接也失效了.... 老师可以回复一下防止误导后来的同学呀！<br>以及没有看出来霍夫曼算法和贪心算法有什么联系，求详细讲解","like_count":38,"discussions":[{"author":{"id":1336430,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/6e/e5ecc1d2.jpg","nickname":"水手","note":"","ucode":"536BB54E1E3617","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":62256,"discussion_content":"数据结构与算法分析 书中是这样说的，“该算法是贪婪算法的原因在于，在每一阶段我们都进行一次合并而没有进行全局的考虑。我们只是选择两颗最小的树。”","likes_number":17,"is_delete":false,"is_hidden":false,"ctime":1574828095,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1829090,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/e8/e2/2bcaef68.jpg","nickname":"王瑞强","note":"","ucode":"DEE4EB5E23433F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1336430,"avatar":"https://static001.geekbang.org/account/avatar/00/14/64/6e/e5ecc1d2.jpg","nickname":"水手","note":"","ucode":"536BB54E1E3617","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285123,"discussion_content":"这是正解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592747373,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":62256,"ip_address":""},"score":285123,"extra":""}]},{"author":{"id":1516010,"avatar":"https://static001.geekbang.org/account/avatar/00/17/21/ea/2cfb9144.jpg","nickname":"auko","note":"","ucode":"7E3AA25B2D250F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":164965,"discussion_content":"文章里有说 : &#34;根据贪心的思想，我们可以把出现频率比较多的字符，用稍微短一些的编码；出现频率比较少的字符，用稍微长一些的编码。&#34;\n\n我的理解 : \n限制值 : 1. 压缩后信息不丢失\n             2. 易解压缩\n期望值 : 尽可能地压缩\n↓\n用长短不一的编码来标识唯一字符 , 保证信息不丢失 , 同时解压缩时可识别\n此时根据贪心 , 满足限制值 , 要想期望值更高 , 需要短的编码更经常地&#34;被使用&#34; , 所以高频字符用短的编码\n↓\n霍夫曼编码","likes_number":11,"is_delete":false,"is_hidden":false,"ctime":1581243452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1662149,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyoRtwfbJmS5XdfSWHZibzsWXvdOI2RdPkXaERn5mRU34M8I1ETYSPnusDvnicyiabwzhBrMPc8Uo8g/132","nickname":"驹哥","note":"","ucode":"F3C983958A753C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102399,"discussion_content":"哈夫曼编码最重要的一步就是构造哈夫曼树，构造了哈夫曼树之后，则哈夫曼编码就呼之欲出了。\n\n而构造哈夫曼树的过程，采用了贪心算法的思想：每次只选择值(出现频率)最小的2个元素作为左右孩子，这俩孩子的父节点的值，就等于这俩孩子之和；它俩的父节点作为下一轮参选的元素之一，如此循环，直到根节点被构造出来，则哈夫曼树构建完毕。\n\n至于为什么每次都选择最小的俩节点就是最优解呢？可以借鉴 2-way merge sort的过程。\n举例，有4个队列，分别有1、2、3、4个元素。先合并1、2需操作3次，得到3、3、4，然后合并3、3需操作6次，得到6、4，然后合并6、4需操作10次，一共操作3+6+10=19次，得到一个10元素的数组。\n\n另一种做法，如果先合并3、4操作7次，得到7、2、1，再合并7、2操作9次，得到9、1，再合并9、1操作10次，一共操作7+9+10=26次后，得到一个10元素数组。\n\n可见，每次合并最小的两个有序数组是归并排序的最优做法。而哈夫曼树的构造，这些“操作次数”就变成了树的内节点的值，哈夫曼树的目的是为了压缩空间占用，那么当然是树的所有节点之和越小越好。","likes_number":8,"is_delete":false,"is_hidden":false,"ctime":1577343758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2333,"discussion_content":"核心是这句话: “出现频率高的字符使用较短的编码，出现频率低的字符使用较长的编码，从而保证整体编码最短” ","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1563495811,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1250807,"avatar":"https://static001.geekbang.org/account/avatar/00/13/15/f7/744720a2.jpg","nickname":"DriveMan_邱佳源","note":"","ucode":"A4C83BF07DEE7A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1008404,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","nickname":"Jerry银银","note":"","ucode":"80DA1172A2360A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8839,"discussion_content":"又在这里碰见了你","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568081000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":2333,"ip_address":""},"score":8839,"extra":""}]},{"author":{"id":1444483,"avatar":"https://static001.geekbang.org/account/avatar/00/16/0a/83/f916f903.jpg","nickname":"风","note":"","ucode":"E1CE0825AAF805","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141684,"discussion_content":"个人觉得，教程里从贪心算法，引导读者接受huffman树，是不合适的。正确的顺序我建议是：\n二进制编码，前缀编码最省空间，以编码目标为叶子结点的一个二叉树代表了一种前缀编码方案，带权路径长度，贪心，huffman树。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1579437766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1662149,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyoRtwfbJmS5XdfSWHZibzsWXvdOI2RdPkXaERn5mRU34M8I1ETYSPnusDvnicyiabwzhBrMPc8Uo8g/132","nickname":"驹哥","note":"","ucode":"F3C983958A753C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102455,"discussion_content":"用一个实际例子来说，假设字符串为“ABBCCCDDDDEEEEEFFFFFFGGGGGGGHHHHHHHH”，出现频率分别为A1B2C3D4E5F6G7H8：\n\n如果按照每次合并最小两节点来构造哈夫曼树，那么最终树的高度为5，最常出现的字符H的编码为11，最不常出现的字符A的编码为00000。\n\n如果按照每次合并最大两节点来构造哈夫曼树，则最终树的高度为7，最常出现的H编码为1111111，最不常出现的A的编码为0。\n\n现在知道哈夫曼编码和贪心算法的关系了吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577347349,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1348185,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/jTy0rkRfPkgKYbGWjPVALx478Emy9ue5OdDGicnFrOD1LJ7oLLs8pRQzO5oNBGZwL6WRyKGjbnl9AVARRACVWJQ/132","nickname":"Geek_99da8a","note":"","ucode":"2B59DAC0D254E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1662149,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyoRtwfbJmS5XdfSWHZibzsWXvdOI2RdPkXaERn5mRU34M8I1ETYSPnusDvnicyiabwzhBrMPc8Uo8g/132","nickname":"驹哥","note":"","ucode":"F3C983958A753C","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":375598,"discussion_content":"我怎么觉得您举得这个例子的哈夫曼树高不太对啊，下面是我刚学的理解，如果不对请指教哈~\n构建哈夫曼树时，两子节点频率之和生成的新节点C，放入到队列后是需要重新排序的，所以我觉得关于您举得这个例子：\n\n“字符串为ABBCCCDDDDEEEEEFFFFFFGGGGGGGHHHHHHHH，出现频率分别为A1B2C3D4E5F6G7H8”\n\n，我得到的树高为5，不是7。具体编码是A：00000，B:00001, C:0001, D:010, E:011, F:001, G:10, H:11。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621763060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":102455,"ip_address":""},"score":375598,"extra":""},{"author":{"id":1662149,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyoRtwfbJmS5XdfSWHZibzsWXvdOI2RdPkXaERn5mRU34M8I1ETYSPnusDvnicyiabwzhBrMPc8Uo8g/132","nickname":"驹哥","note":"","ucode":"F3C983958A753C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1348185,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/jTy0rkRfPkgKYbGWjPVALx478Emy9ue5OdDGicnFrOD1LJ7oLLs8pRQzO5oNBGZwL6WRyKGjbnl9AVARRACVWJQ/132","nickname":"Geek_99da8a","note":"","ucode":"2B59DAC0D254E2","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":384867,"discussion_content":"请看一下我说了两种情况，分别说明了正确姿势和错误姿势。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626776491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":375598,"ip_address":""},"score":384867,"extra":""}]},{"author":{"id":1127175,"avatar":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","nickname":"JustDoDT","note":"","ucode":"6AF0B80F00EAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23889,"discussion_content":"谢谢提醒","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569935084,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1221991,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","nickname":"AllenGFLiu","note":"","ucode":"90FA8A619A2629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6033,"discussion_content":"霍夫曼编码的目的是为了减少编码占用的空间大小，通过让出现频率最高的字符使用最短编码的形式来达成","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566626666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":57284,"user_name":"Geek_41d472","can_delete":false,"product_type":"c1","uid":1247965,"ip_address":"","ucode":"DEC2B6329460CF","user_header":"https://static001.geekbang.org/account/avatar/00/13/0a/dd/88fa7b52.jpg","comment_is_top":false,"comment_ctime":1546707506,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"164755464754","product_id":100017301,"comment_content":"霍夫曼编码，用一个树来避免某个字符的编码是另一个字符编码的前缀，真的是好巧妙","like_count":38},{"had_liked":false,"id":51804,"user_name":"feifei","can_delete":false,"product_type":"c1","uid":1105431,"ip_address":"","ucode":"B1F8AE3AD82C51","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/17/75e2b624.jpg","comment_is_top":false,"comment_ctime":1545265206,"is_pvip":false,"discussion_count":13,"race_medal":0,"score":"147574153270","product_id":100017301,"comment_content":"1，在一个非负整数 a 中，我们希望从中移除 k 个数字，让剩下的数字值最小，如何选择移除哪 k 个数字呢？<br>对于此题，我的求解思路是每次选择数据的最高位的数据值进行移除，这样我们每次选择的移除的数值都是最大的，剩下的数值也是最小的。<br>比如，数据5892，将数据拆成5000,800,90,2，然后使用大顶堆来进行存储，然后每次移除大顶堆中堆顶最大的元素。<br><br>2，假设有 n 个人等待被服务，但是服务窗口只有一个，每个人需要被服务的时间长度是不同的，如何安排被服务的先后顺序，才能让这 n 个人总的等待时间最短？<br>对于此问题，我的求解思路是让待时间最长的来安排先后顺序<br>比如，现在有3个人，a、b、c,a等待了10分钟，b待待了20分钟，c待待了30分钟<br>同样使用大顶堆来进行存储等待时间，堆顶的元素就是当前等待时间最长的人<br>然后每次从堆拿出堆顶元素的人来进行服务，这样就可以让这n个人的总的等待时间最短。<br><br><br><br><br>对于学习的贪心算法，老师虽然只进行了理论讲解，但我看完了老师所讲的，我对贪心算法的理解有了一定的认识，我就试着把贪心算法的内容中涉及的东西，都翻译成了代码，<br>感觉收获良多，也把这个分享给童鞋，希望对他们有帮助。<br>1，这是第一个示例，背包中豆子的最大价值的问题<br>https:&#47;&#47;github.com&#47;kkzfl22&#47;datastruct&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;liujun&#47;algorithm&#47;greedyAlgorithm&#47;case1<br>2，这是孩子分糖果的问题<br>https:&#47;&#47;github.com&#47;kkzfl22&#47;datastruct&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;liujun&#47;algorithm&#47;greedyAlgorithm&#47;case2<br>3，这是钱币支付的问题<br>https:&#47;&#47;github.com&#47;kkzfl22&#47;datastruct&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;liujun&#47;algorithm&#47;greedyAlgorithm&#47;case3<br>4，这是区间覆盖的问题<br>https:&#47;&#47;github.com&#47;kkzfl22&#47;datastruct&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;liujun&#47;algorithm&#47;greedyAlgorithm&#47;case4<br>5，这是霍夫漫编码的实现<br>https:&#47;&#47;github.com&#47;kkzfl22&#47;datastruct&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;liujun&#47;algorithm&#47;greedyAlgorithm&#47;huffman<br><br>欢迎大家与我交流，也欢迎老师给我指正，谢谢","like_count":34,"discussions":[{"author":{"id":1392846,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLCQX614vYChuhGrYJSichTb5gpEPnb5YdSpeBicFician56GRDaQT6Jfg4cax8MR8gvtw0E9fHwrGXjA/132","nickname":"Mr.Ren","note":"","ucode":"5FDD50CFB1CBBF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34265,"discussion_content":"@feifei 我认为第一题你的解法有问题，大根堆中移除大数并没有满足到题目要求。我的思路是这样的：移除n个数，要达到最小数需要进行n次循环。每次从头开始比较，只要高位比下一位大那么移除高位如果高位比下一位小向后滑动，再比较。举个例：86397647365 移除3位。：\n初始：86397647365\n1: 因为8大于6 移除8 \n6397647365\n2 ：因为6大于3 移除6\n397647365\n3: 因为3小于9 向后滑动继续比较 9大于7 移除9\n37647365","likes_number":10,"is_delete":false,"is_hidden":false,"ctime":1571188990,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1476862,"avatar":"https://static001.geekbang.org/account/avatar/00/16/88/fe/c18a85fe.jpg","nickname":"随风","note":"","ucode":"037CE3554D8AB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1392846,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLCQX614vYChuhGrYJSichTb5gpEPnb5YdSpeBicFician56GRDaQT6Jfg4cax8MR8gvtw0E9fHwrGXjA/132","nickname":"Mr.Ren","note":"","ucode":"5FDD50CFB1CBBF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":365686,"discussion_content":"没考虑到从小到大排列的比如12345.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617866879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":34265,"ip_address":""},"score":365686,"extra":""}]},{"author":{"id":1504652,"avatar":"https://static001.geekbang.org/account/avatar/00/16/f5/8c/82fb5890.jpg","nickname":"抱小星","note":"","ucode":"BA7B0DAFDA4AF5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174170,"discussion_content":"看见道友走火入魔，我就放心了","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1581895151,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1557453,"avatar":"https://static001.geekbang.org/account/avatar/00/17/c3/cd/9a1397bd.jpg","nickname":"半壶浊酒","note":"","ucode":"28505DE98AA64A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":132409,"discussion_content":"都是错的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578906050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1282813,"avatar":"https://static001.geekbang.org/account/avatar/00/13/92/fd/6b0e58fe.jpg","nickname":"文刂 氵共 超","note":"","ucode":"C2CE1512D23012","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2479,"discussion_content":"两个答案都是错的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1563700817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":352311,"discussion_content":"一顿操作猛如虎，....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614679034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1134861,"avatar":"https://static001.geekbang.org/account/avatar/00/11/51/0d/fc1652fe.jpg","nickname":"James","note":"","ucode":"48B0F2A334D1C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":42448,"discussion_content":"无法理解错误的答案,老师还是放上来.导致后来人觉得是对的...还好有各位大哥的评论","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572672210,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1366505,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d9/e9/eaa1222d.jpg","nickname":"qazwsx","note":"","ucode":"E8F6D7FD26C34F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34408,"discussion_content":"。。。。 都是错的吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571197353,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1068361,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4d/49/28e73b9c.jpg","nickname":"明翼","note":"","ucode":"E77F86BEB3D5C1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":9375,"discussion_content":"第二题的思路是错的应该按照线段的覆盖思路来看总体时间才最小，也就是同样的时间服务更多的人","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568162659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1638331,"avatar":"https://static001.geekbang.org/account/avatar/00/18/ff/bb/84304a1d.jpg","nickname":"最爱小汤包","note":"","ucode":"5F6FB7ED4459DD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8199,"discussion_content":"请层主认真读题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567826652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1127742,"avatar":"https://static001.geekbang.org/account/avatar/00/11/35/3e/ce183821.jpg","nickname":"yanglas","note":"","ucode":"7D196091E194A8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2739,"discussion_content":"592和892谁大？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563890572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1428828,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","nickname":"岁月如歌","note":"","ucode":"1AEBD6F79941B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2262,"discussion_content":"两个题目解法很有争议  排队等待服务的解法不一定是最优解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563417579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1301558,"avatar":"https://static001.geekbang.org/account/avatar/00/13/dc/36/ca9374e8.jpg","nickname":"Tianyi Liu","note":"","ucode":"9C4D0606F138DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1967,"discussion_content":"因为5000比800大，所以582大于892，要移除5吗…","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563154674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50665,"user_name":"🐱您的好友William🐱","can_delete":false,"product_type":"c1","uid":1215456,"ip_address":"","ucode":"427786DB178965","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/e0/9a79ddac.jpg","comment_is_top":false,"comment_ctime":1545026692,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"96034307204","product_id":100017301,"comment_content":"给大家提个醒，货币找零问题如果没有C1货币的话得用动态规划去解，如果出现{C2，C7，C10}货币找零11块的时候使用greedy就会出现找不开的情况。。。。有C1就不会出现找不开的情况且多个C1可以构成任何面值，所以这种情况下使用greedy是对的！（leetcode322题调了一下午的路过。。。）","like_count":22},{"had_liked":false,"id":51428,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1545182376,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"83149561000","product_id":100017301,"comment_content":"打个卡，我还在","like_count":19},{"had_liked":false,"id":119096,"user_name":"CathyLin","can_delete":false,"product_type":"c1","uid":1240546,"ip_address":"","ucode":"F7CDFF5E1A235F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ed/e2/0e1c6c5a.jpg","comment_is_top":false,"comment_ctime":1564502829,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"74578946861","product_id":100017301,"comment_content":"课后思考：<br>1. 第一道题一开始没有想到...以为直接删除最大的那 k 个数字就好了，后来举了几个样例发现是错的。然后看了评论区小伙伴们的留言，太奇妙了！！！我是真的没有想到这种思路😫 <br>1) 从高位往低位走，删掉高位比低位大的数；为什么这样子是好的呢？试想:<br>4596743 如果我们只能删一位，我们会删第三位的 9，因为这样就相当于是把高位给减少了，变成了456743，但是如果删 6，变成了 459743 则没有之前那个优。删后面的数更起不到高位的那种作用。<br>2) 如果所有数字都是递增的，那么我们删除倒数 \rk 个数字就好了。<br><br>2. 想让所有人的等待时间最短，那么我们得先处理服务时间短的，尽快把他们处理完了才能够处理后面的人！<br><br>贪心反思：有些时候思路还是难以打开，可能还是跟老师说的那样，多练习、多积累才是最好的学习方法！","like_count":17},{"had_liked":false,"id":62819,"user_name":"睡痴儿😑","can_delete":false,"product_type":"c1","uid":1187204,"ip_address":"","ucode":"750EF858EF2042","user_header":"https://static001.geekbang.org/account/avatar/00/12/1d/84/d0ec0064.jpg","comment_is_top":false,"comment_ctime":1548165445,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"74562609477","product_id":100017301,"comment_content":"第一个题，可以反着来想。给定另一个数组，怎么从中原本的中挑出n-k个，使其值最小。<br>首先第一位必须要是最小的一个，但是因为有顺序，所以只能是从0到n-1-k个中挑一个最小的，下标为m。以后依次类推，从m到n-k中挑一个最小的。如果有相等的情况，以下标小的为准。<br>第二个，就是从小到大排序即可。","like_count":17},{"had_liked":false,"id":86213,"user_name":"coder","can_delete":false,"product_type":"c1","uid":1399673,"ip_address":"","ucode":"929E3FFD14EFC8","user_header":"https://static001.geekbang.org/account/avatar/00/15/5b/79/d55044ac.jpg","comment_is_top":false,"comment_ctime":1555325837,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"65979835277","product_id":100017301,"comment_content":"区间覆盖问题，把区间按照结束时刻排序，每次选择最早结束且没有冲突的区间即可","like_count":15,"discussions":[{"author":{"id":2459923,"avatar":"https://static001.geekbang.org/account/avatar/00/25/89/13/0d3c5008.jpg","nickname":"最好不过","note":"","ucode":"C7DBCD08402DF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370047,"discussion_content":"的确应该先按照结束时刻进行排序,不然按照作者说的按照起始时刻进行排序反而不好求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619267146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50610,"user_name":"luxinfeng","can_delete":false,"product_type":"c1","uid":1259853,"ip_address":"","ucode":"51D0046C4D31AD","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/4d/9ce28826.jpg","comment_is_top":false,"comment_ctime":1545016374,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"65969525814","product_id":100017301,"comment_content":"老师能详细讲讲区间覆盖这个问题的选择过程么？","like_count":15,"discussions":[{"author":{"id":1264307,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/b3/6c37e584.jpg","nickname":"ppqq","note":"","ucode":"F4731465E63E3E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":141579,"discussion_content":"1：按结束时间从小到大排序。\n2：遍历所有时间段，\n3：取出当前的时间段，如果起始时间大于endtime，表示没有重叠，又因为这个时间段是最早结束的，所以剩余空间最大的，所以这个是结果之一，结果总数加1。\n4：更新endtime = 当前时间段的.end，再次循环。\n5：返回结果总数","likes_number":9,"is_delete":false,"is_hidden":false,"ctime":1579432474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1532891,"avatar":"https://static001.geekbang.org/account/avatar/00/17/63/db/e562c15b.jpg","nickname":"依斯特","note":"","ucode":"40C7E079723DD5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1264307,"avatar":"https://static001.geekbang.org/account/avatar/00/13/4a/b3/6c37e584.jpg","nickname":"ppqq","note":"","ucode":"F4731465E63E3E","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336979,"discussion_content":"再按开始时间从小到大排序\n\n结束时间最早，剩余空间最大；\n下一个结束时间又是最早，并且开始时间能够晚于end time,就用它。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608737479,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":141579,"ip_address":""},"score":336979,"extra":""},{"author":{"id":2459923,"avatar":"https://static001.geekbang.org/account/avatar/00/25/89/13/0d3c5008.jpg","nickname":"最好不过","note":"","ucode":"C7DBCD08402DF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1532891,"avatar":"https://static001.geekbang.org/account/avatar/00/17/63/db/e562c15b.jpg","nickname":"依斯特","note":"","ucode":"40C7E079723DD5","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370051,"discussion_content":"不需要按照开始时间进行排序的吧，可以看LeetCode435题","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619267742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":336979,"ip_address":""},"score":370051,"extra":""}]}]},{"had_liked":false,"id":50594,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1545013961,"is_pvip":false,"replies":[{"id":"18338","content":"24让剩下的没有被覆盖的区间最大   如果你选15 那我完全可以用24替代15 这样子 只有更好 不会更差","user_name":"作者回复","comment_id":50594,"uid":"1190123","ip_address":"","utype":1,"ctime":1545098564,"user_name_real":"gg"}],"discussion_count":7,"race_medal":0,"score":"57379588809","product_id":100017301,"comment_content":"老师 区间覆盖的问题， (1-5) 和 (2-4) 中为什么选(2-4)  方便老师解释下吗， 贪心不能全局最优 用贪心 如何在这个问题上全局最优呢","like_count":13,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433035,"discussion_content":"24让剩下的没有被覆盖的区间最大   如果你选15 那我完全可以用24替代15 这样子 只有更好 不会更差","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1545098564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1036902,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/d2/66/811970de.jpg","nickname":"OP_未央","note":"","ucode":"571C9E0C4E84CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223328,"discussion_content":"按照结束点从小到大试试，尽可能留下更多空间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586217257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239546,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKWiaZb7a2JAcIVlXYuZ3iaPfSF6vBbg3yUps6LKpsZarftyXufMHYKJmMKzH3bIpVkDAVNXE9q0oOw/132","nickname":"Mr_scx","note":"","ucode":"28B5CE68A5A339","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":148180,"discussion_content":"为什么不选(3-5)呢，一样可以得到最多的3个区间","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579693700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1514305,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","nickname":"xk_","note":"","ucode":"DFE1AC38EA78A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1239546,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKWiaZb7a2JAcIVlXYuZ3iaPfSF6vBbg3yUps6LKpsZarftyXufMHYKJmMKzH3bIpVkDAVNXE9q0oOw/132","nickname":"Mr_scx","note":"","ucode":"28B5CE68A5A339","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":258395,"discussion_content":"这只是个例子，如果这个（3-5）是（3-6），那么选（3-6）是正确答案了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588684396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":148180,"ip_address":""},"score":258395,"extra":""},{"author":{"id":1114093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/ed/b2fc0e7c.jpg","nickname":"7","note":"","ucode":"10A6E57A027D42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1514305,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","nickname":"xk_","note":"","ucode":"DFE1AC38EA78A7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":265543,"discussion_content":"不对，还是选择24，选择24后让可选择的区间更大。要选择右端点更小的。\n举个例子，我有24，也有56，还有36。肯定选择24，56","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589416625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":258395,"ip_address":""},"score":265543,"extra":""},{"author":{"id":1514305,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1b/41/dbb7d785.jpg","nickname":"xk_","note":"","ucode":"DFE1AC38EA78A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1114093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/ed/b2fc0e7c.jpg","nickname":"7","note":"","ucode":"10A6E57A027D42","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":266230,"discussion_content":"\n那你2,4后面只有个(4,8)呢。但3,5后面有5,6和6,7也就是说当你选2,4并不是最优解，那你怎么选呢？这就是个贪心的例子，能理解就行了，并不能保证这就是正确答案。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589472705,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":265543,"ip_address":""},"score":266230,"extra":""}]}]},{"had_liked":false,"id":71317,"user_name":"发飙的蜗牛","can_delete":false,"product_type":"c1","uid":1248579,"ip_address":"","ucode":"15D5E6C956F27F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/43/223c5435.jpg","comment_is_top":false,"comment_ctime":1551319388,"is_pvip":false,"replies":[{"id":"25743","content":"哈哈，你很细心，是的，一个孩子最多一个糖果","user_name":"作者回复","comment_id":71317,"uid":"1190123","ip_address":"","utype":1,"ctime":1551405761,"user_name_real":"gg"}],"discussion_count":1,"race_medal":0,"score":"40206025052","product_id":100017301,"comment_content":"个人觉得分糖果不能使用贪心算法，如果使用可以加个条件一个孩子只能分一个糖果，因为可能存在孩子的满意度大于最小的糖果，但是最小的两个的和刚好满足。这个情况贪心就无法满足了。","like_count":9,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":441106,"discussion_content":"哈哈，你很细心，是的，一个孩子最多一个糖果","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551405761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58749,"user_name":"Ying","can_delete":false,"product_type":"c1","uid":1307466,"ip_address":"","ucode":"FAE36C852765F2","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/4a/4874b350.jpg","comment_is_top":false,"comment_ctime":1547188231,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"27316992007","product_id":100017301,"comment_content":"经过这种编码压缩之后，这 1000 个字符只需要 2100bits 就可以了------- ,这个位置 我算了一下各个和相加，结果是1910bits吧， 是我算的不对吗 ？","like_count":6,"discussions":[{"author":{"id":1310388,"avatar":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","nickname":"Allan","note":"","ucode":"8DA4DBECC2C45C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345983,"discussion_content":"我也加了一下是1910","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611829067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2358822,"avatar":"https://static001.geekbang.org/account/avatar/00/23/fe/26/feda16aa.jpg","nickname":"Herbert","note":"","ucode":"BB16C81CD0282C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":338009,"discussion_content":"我为啥针对里面的例子算的是1001个bits","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609152628,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1241567,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f1/df/8ba04bec.jpg","nickname":"Joker","note":"","ucode":"C42E11098E1B38","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332307,"discussion_content":"我觉得也是1910，而不是2100","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607155276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50645,"user_name":"白若","can_delete":false,"product_type":"c1","uid":1276533,"ip_address":"","ucode":"461CD01E47DC8B","user_header":"","comment_is_top":false,"comment_ctime":1545022240,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27314826016","product_id":100017301,"comment_content":"思考题(自己的想法，不知道对不对，希望老师能给我评论。)<br><br>1.从前往后两两比较，若前数大于等于后数，选择移除。如果一轮下来没达到k个数，就移除最后的m个数，m为k-已选出个数。<br>2.时间越短位置越靠前。","like_count":6},{"had_liked":false,"id":152529,"user_name":"Chris","can_delete":false,"product_type":"c1","uid":1689346,"ip_address":"","ucode":"50A51AE2110A7A","user_header":"https://static001.geekbang.org/account/avatar/00/19/c7/02/8346ebf6.jpg","comment_is_top":false,"comment_ctime":1574039555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"23048876035","product_id":100017301,"comment_content":"贪心算法的思想基础是将问题划分成多个阶段，假设每个阶段都取最优解，那么结果就是最优的。在求每个阶段中的局部最优时候，要先关注与主要矛盾，一般可以选取对目标贡献值最大，或者相同贡献值的情况下，花费的资源最少的，这样逐一解决小问题，得到最终解。<br>所以贪心算法是适用于打网球的情况，每步取最优，但是下围棋就不适用了","like_count":5},{"had_liked":false,"id":50570,"user_name":"蒋礼锐","can_delete":false,"product_type":"c1","uid":1248897,"ip_address":"","ucode":"25E042066A1427","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/gM1ibHKPkrs5DSIp4aIuQ9jnYtNicc2tdG244PbaSvKw5jO9DWrhWghcVM1Y5Iq2QSpzLBUeWZQLhARst51z35mA/132","comment_is_top":false,"comment_ctime":1545010332,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23019846812","product_id":100017301,"comment_content":"第一个问题不知道0可不可以被保留在最高位，如果可以的话那么应该每次移除该整数的非零最高位，比如909090，k为2的话，最小的值应该是0090，如果0不能在最高位，就贪心算法就不能得到最优解了，跟之前的加权图一样，因为决策会相互影响。<br><br>第二个问题假设5个人，时间分别是1-5-3-4-2分钟，等待的时间是每个人等待时间的总和即单个服务时间*剩余等待人数。不管现在服务的是谁，剩余等待的人数是不会变的，所以只需要找单个服务时间最小的，即按服务时间数升序服务即1-2-3-4-5，总的时间为1*4+2*3+3*2+4*1=20<br><br>就像春运取票，你如果是去取售票机上买票的话，后面排队着急的人会说，让我先取吧，我直接取很快。这样集体时间效率最高，但是对单个个体来说就不一定了，比如之前那个要买票的。","like_count":5,"discussions":[{"author":{"id":1491871,"avatar":"https://static001.geekbang.org/account/avatar/00/16/c3/9f/2dd26fee.jpg","nickname":"キッド","note":"","ucode":"0773BDAD4ACCEF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":53469,"discussion_content":"第一个问题，0不能再最高位的时候，按照从左到右两两比较，当左边的数字大于右边的数字时，删除左边的数字，这样删除2位的时候909090从左到右删除了前两个9，剩下的还是90 依然是最小的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574170937,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":171437,"user_name":"注定非凡","can_delete":false,"product_type":"c1","uid":1113597,"ip_address":"","ucode":"80673056E131B7","user_header":"https://static001.geekbang.org/account/avatar/00/10/fd/fd/326be9bb.jpg","comment_is_top":false,"comment_ctime":1578923179,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"18758792363","product_id":100017301,"comment_content":"四种基本的算法思想：贪心算法，分治算法，回溯算法，动态规划，他们不是具体算法，常用来指导我们设计具体的算法和编码等。<br><br>一：贪心算法有很多经典应用：霍夫曼编码（Huffman Coding）,Prim和Kruskal最小生成数算法，Dijkstra单源最短路径算法。<br><br>二：如何理解“贪心算法”<br> <br>\t假设我们有一个可容纳100kg物品的背包，可以装下各种物品，我们有以下5中豆子，每种豆子的总量和总价值都各不相同。为了让背包中所装物品的总价最大，该如何？\t<br><br>第一步：当我们看到这类问题时，首先要联想到贪心算法：针对一组数据，定义了限制值和期望值，系统从中选出几个数据，在满足限制值的情况下，期望值最大。<br>第二步：尝试看这个问题是否可以用贪心算法解决：每次选择当前情况下，在对限制值同等贡献量的情况下，对期望值贡献最大的数据。<br>第三步：举几个例子看下贪心算法产生的结果是否最优的。大部分情况下，举几个例子验证一下就可以了。严格的证明贪心算法的正确性，非常复杂，需要涉及较多的数学推理。并且，从实践的角度来说，大部分能用贪心算法的问题，贪心算法的正确性都是显而易见的，月不需要严格的数学推导证明。<br><br>\t贪心算法，专注于当下最优，但可能无法取得全局最优。<br><br>贪心算法实战分析<br><br>一：分糖果<br>\t有m个糖果和n个孩子，但m&lt;n，所以糖果只能分配给一部分孩子。<br>\t每个糖果的大小不等，分为s1，s2……sm。除此之外，每个孩子对糖果大小的需求也是不一样的，只有糖果的大小&gt;=孩子对糖果大小的需求分别是g1，g2，g3……gn。<br>\t如何分配才可能满足最多数量的孩子？<br>\t<br>\t可将这个问题抽象成：从n个孩子中抽取一部分孩子分配糖果，让满足的孩子个数（期望值）是最大的。这个问题的限制值就是糖果个数m。<br>\t<br>\t对于一个孩子而言，如果小的糖果可以满足，我们就没必要用更大的糖果，这样更大的就可以留给其他对糖果大小需求更大的孩子。另一方面，对糖果大小需求小的孩子更容易被满足，所以，我们可以从需求小的孩子开始分配他糖果。因为满足一个需求大的孩子跟满足一个需求小的孩子，对我们期望值贡献是一样的。<br><br>二：钱币找零<br>\t假设有1元，2元，5元，10元，50元，100元这些面额的纸币，他们的张数分别是c1，c2，c5，c10，c20，c50，c100。我们要有支付k元，最少要用多少张纸币呢？<br><br>\t在贡献相同期望值（纸币数目）的情况下，我们希望多贡献点金额，这样就可以让纸币数更少。这就是一种贪心算法的解决思路。<br><br>三：区间覆盖<br>\t假设有n个区间，区间的起始端点和结束端点分分别是[l1,r1]，[l2，r2]，[l3,r3]……，从n个区间中选出一部分区间，这部分区间满足两两不相交（端点相交的情况不算相交），最多能选出多少个区间？<br> <br><br>四：如何用贪心算法实现霍夫曼编码？<br>\t假设有一个包含1000个字符的文件，每个字符占1个byte（1byte=8bits），存储这1000个字符就一共需要8000bits。<br>\t但使用霍夫曼编码，可实现压缩率在20%~90%之间。<br>\t霍夫曼编码不仅会考察文本汇总有多少个不同字符，还会考察每个字符出现的频率，根据频率的不同，选择不同长度的编码。霍夫曼编码试图用这种不等长的编码方法，来进一步增加压缩的效率。<br>\t根据贪心的思想，可以把出现频率比较多的字符，用稍微短一些的编码；出现频率比较少的字符，用稍微长一些的编码。<br>\t由于霍夫曼编码是不等长的，每次应该读取1为还是2位，3位等来解压缩是个问题，这个问题导致霍夫曼编码解压缩比较复杂。<br>\t为了避免解压缩过程中的歧义，霍夫曼编码要求各个字符的编码之间，不会出现某个编码是另一个编码前缀的情况。<br> <br>\t假设这6个字符出现的频率从高到低依次是a，b，c，d，e，f。我们把它们编码下面这个样子，任何一个字符的编码都不是另一个的前缀，在解压缩的时候，我们每次会读取尽可能长的可解压缩的二进制，所以在解压缩的时候也不歧义。<br> <br><br>\t根据字符出现频率的不同，给不同的字符进行不同长度的编码的实现方式<br>\t 把每个字符看作一个节点，并且辅带着把频率放到优先级队列中。从队列中取出频率最小的两个节点A,B，然后新建一个节点C，把频率设置为两个节点的频率之和，并把这个新节点C作为节点A,B的父节点。最后再把C节点放入到优先级队列中。重复这个过程，直到队列中没有数据。<br><br> <br><br>\t給每一条边画上一个权值，指向左子节点的边，我们统统标记为0，指向右子节点的边，我们统统标记为1，那从根节点到叶节点的路径就是叶节点对应字符的霍夫曼编码<br> <br><br>","like_count":4},{"had_liked":false,"id":215980,"user_name":"小阳","can_delete":false,"product_type":"c1","uid":1296135,"ip_address":"","ucode":"97A162992E6A81","user_header":"https://static001.geekbang.org/account/avatar/00/13/c7/07/5798c17e.jpg","comment_is_top":false,"comment_ctime":1589162521,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14474064409","product_id":100017301,"comment_content":"课后思考题:<br>    1. 非负整数，移除固定个数的数字，不管怎么移动最后剩下的位数都是固定的，只要我们保证最高位尽可能的小，就能让最后的数值最小。 那么思路如下：<br>      每次比较最高位和次高位，移除最大的那个数。这样最后的最高位总是最小的，值也就是最小的。<br>  <br>2.  对每个人的服务时间进行排序，每次服务需要的服务时间最小的。 原因如下，不管先服务谁，后面等待的人数都是固定的，每服务完一个人剩下等待的人就少一个，那么我们只需保证最少服务时间去匹配最大等待人数，就可以保证最终总服务时间最小<br>","like_count":3,"discussions":[{"author":{"id":1237691,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e2/bb/c03b3087.jpg","nickname":"拼命三郎","note":"","ucode":"C77F0FE9EC8893","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":331996,"discussion_content":"126789, k = 3, 最终是189？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607042945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155588,"user_name":"温柔的贪婪","can_delete":false,"product_type":"c1","uid":1026724,"ip_address":"","ucode":"BA2BCFDC8FDE5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/aa/a4/a1111483.jpg","comment_is_top":false,"comment_ctime":1574721968,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14459623856","product_id":100017301,"comment_content":"贪心算法：着眼于当下最优解，寻求整体最优或近似最优解。虽然最终的解未必是最优解，但也提供了一种可行的思考方法。<br><br>背包：寻找当前，单位质量价值最大的豆子<br>分糖：寻找当前，单位大小能满足最多孩子的糖果<br>找零：寻找当前，单位张数价值最大的纸币<br>霍夫曼编码：寻找当前，单位长度所能表示最多信息的字符。<br><br>","like_count":3},{"had_liked":false,"id":134508,"user_name":"晓杉","can_delete":false,"product_type":"c1","uid":1209336,"ip_address":"","ucode":"19E634BB61A165","user_header":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","comment_is_top":false,"comment_ctime":1568856846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14453758734","product_id":100017301,"comment_content":"我理解贪心算法的本质就是&quot;在满足限制条件下，只考虑当前最优的步骤，而不顾全大局&quot;，这也是其可能出现局部最优解的原因。<br><br>以思考题第一题为例，我们移除k个数字，则需要k个步骤，只考虑每步最优。<br>第一步：一定是移除1和数字使得剩余数字最小，因此要从高位到低位，选择相邻两个高位大于低位的移除。比如123654，选到6移除得12354。<br>第二步：在得到的12354，递归使用第一步思路。选到5，得1234。<br>依次类推，直到k步。","like_count":3},{"had_liked":false,"id":78758,"user_name":"Neil","can_delete":false,"product_type":"c1","uid":1206345,"ip_address":"","ucode":"909A2103DFEE1B","user_header":"https://static001.geekbang.org/account/avatar/00/12/68/49/418a9486.jpg","comment_is_top":false,"comment_ctime":1553232950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14438134838","product_id":100017301,"comment_content":"通过局部最优，达到全局最优","like_count":3},{"had_liked":false,"id":249721,"user_name":"云之崖","can_delete":false,"product_type":"c1","uid":1003366,"ip_address":"","ucode":"724C0614F40EC1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/66/1f8fccfb.jpg","comment_is_top":false,"comment_ctime":1600769952,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10190704544","product_id":100017301,"comment_content":"写了一个构造霍夫曼编码的示例：https:&#47;&#47;www.jianshu.com&#47;p&#47;ebe1f93f6fcc<br>构造过程中，采取了前面学过的小顶堆的知识，怎么构造小顶堆，怎么取出最小元素，怎么插入元素，顺便都复习了一遍。","like_count":2},{"had_liked":false,"id":157129,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1575038119,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10164972711","product_id":100017301,"comment_content":"老师你好，一点点的硬是跟到了这一章，虽然前面的有些知识点还是模糊，但是真的学到了很多东西，我今年大二，感谢您的这个课程！<br>今天的课后思考<br>第一题——<br>这个题目应该是首先从高位开始，依次的比较比高位低的一位数字，如果高位的大，那么就将高位的移除，如果高位的小，那么就继续往右边移动一位在比较两位数字，根据前面的比较规则来移除，需要循环k次，<br><br>第二题——<br>首先看到这一题之后，我想到的是操作系统原理里面的调度算法，因为其本质好像是一样的，不知道对不对，那我就来对比一下几种调度算法<br><br>1、先来先服务<br>很明显这一题如果使用先来先服务的思想的话，虽然容易实现，但是效率极低，时间也不可能是最低的，因为它没有考虑到当前被服务对象的服务时间是多少<br><br>2,、短作业优先调度算法<br>短作业优先调度算法首选选取需要办理业务的时间最短的人来作为服务的对象，但是这样会导致一个问题，那就是早来且需要办理业务时间比较长的人一直得不到服务，需要等待很长的时间，容易出现一些不必要的纠纷，<br><br>3、响应比高者优先调度<br>这个思想需要估算出每个人的等待的时间以及运行的时间，然后计算出响应比，响应比 = （等待时间 + 运行时间） &#47; 运行时间，显然这是不现实的！<br><br>还有两种，分别是 优先数调度算法，循环轮转调度算法，这里就不说了<br><br>综合上面的三种思想，很明显“短作业优先调度”是最省时间的！所以就从等待时间最短的开始服务！<br><br>本人能力有限，不知道说的对不对，如有不对，还望老师指正！","like_count":2,"discussions":[{"author":{"id":1114093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/ed/b2fc0e7c.jpg","nickname":"7","note":"","ucode":"10A6E57A027D42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268528,"discussion_content":"第三个响应比高者优先调度；这个在微服务里面会使用到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589797073,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150942,"user_name":"燃点丶","can_delete":false,"product_type":"c1","uid":1106277,"ip_address":"","ucode":"01E91FB4287535","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/65/0dd1abf7.jpg","comment_is_top":false,"comment_ctime":1573632638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10163567230","product_id":100017301,"comment_content":"这是第二次看了。这次因为去了解Gzip压缩用到了霍夫曼编码赶紧过来看看。豁然开朗。","like_count":2},{"had_liked":false,"id":131726,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1567865451,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"10157800043","product_id":100017301,"comment_content":"王峥老师说Kruskal 最小生成树算法后面会讲，我找了几遍没见到，是不是课程里没有？","like_count":2,"discussions":[{"author":{"id":1662149,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyoRtwfbJmS5XdfSWHZibzsWXvdOI2RdPkXaERn5mRU34M8I1ETYSPnusDvnicyiabwzhBrMPc8Uo8g/132","nickname":"驹哥","note":"","ucode":"F3C983958A753C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102856,"discussion_content":"Kruskal 算法很简单，就是贪心算法在计算最小生成树中的一种应用。\n算法步骤：\n1. 把原带权图所有的边放入集合A中；\n2. 初始化一个空集合B；\n3. 从A中取出权值最小的一条边，然后判断：放入B后，B中所有的边构成的图中，是否存在环？\n    3.1 若不存在环，则放入集合B；\n    3.2 反之，若存在环，则丢弃之；\n4. 重复第3个步骤及其子步骤，直到B中的边所包含的顶点囊括了原图的所有顶点。\n\n最终，B集合中所有的边构成的图，就是原图的最小生成树之一。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577366098,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1662149,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyoRtwfbJmS5XdfSWHZibzsWXvdOI2RdPkXaERn5mRU34M8I1ETYSPnusDvnicyiabwzhBrMPc8Uo8g/132","nickname":"驹哥","note":"","ucode":"F3C983958A753C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102893,"discussion_content":"还有一种计算最小生成树的算法，叫 Prim-Jarnik 算法：\n\n1. 选择原图（所有顶点和边默认为黑色）中任意一个顶点作为起点，我们将之标记为“红色”；\n2. 以任意红色顶点为出发点，选择权值最小的黑色边；\n3. 如果被选中的黑色边和它另一端顶点也被涂为红色后，红色部分子图不会构成环，则将被选中的黑边标记为红色、并将另一端黑色顶点也涂红；\n4. 如果被选中黑色边和它另一端顶点被涂红之后，红色部分子图中包含环，则擦除该黑边（不要擦除顶点）；\n5. 重复2~4步，直到所有顶点刚好都被涂为红色，此时，所有的红色顶点和所有红色的边，就是原图的最小生成树。\n\n上述解释中“红色”、“黑色”是我借鉴红黑树的做法，方便文字表述。评论区不能带图，就得形象些才容易想象。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577367181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1689380,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c7/24/19d0683e.jpg","nickname":"crossing","note":"","ucode":"3B66CFFF38BA67","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":93498,"discussion_content":"是的，确实没有，不懂最小生成树是啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576929730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1662149,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyoRtwfbJmS5XdfSWHZibzsWXvdOI2RdPkXaERn5mRU34M8I1ETYSPnusDvnicyiabwzhBrMPc8Uo8g/132","nickname":"驹哥","note":"","ucode":"F3C983958A753C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1689380,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c7/24/19d0683e.jpg","nickname":"crossing","note":"","ucode":"3B66CFFF38BA67","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102802,"discussion_content":"一个具有N个顶点的带权图(weighted graph)中，可以找到一些子图，这些子图恰好使用N-1条边(edge)把原图所有顶点全部连接起来，由于各边是带权重的，尽管都这些子图都是N-1条边串联完了原图所有顶点，但它们各边权值之和却有大有小。在这些子图中，各边权值之和最小的子图（可能是1个或多个），则称为是原图的最小生成树。\n\n为什么带权图的某种特别子图，会称为是原带权图的“最小生成树”呢？“最小”上面已经说了，是权值之和最小；而“树”，是因为这些子图里面无环，无环的图就是树。至于“生成”二字，可能是因为把原图比作妈妈，这种特殊子图比作儿子，“生”出来的吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577364948,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":93498,"ip_address":""},"score":102802,"extra":""},{"author":{"id":1662149,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyoRtwfbJmS5XdfSWHZibzsWXvdOI2RdPkXaERn5mRU34M8I1ETYSPnusDvnicyiabwzhBrMPc8Uo8g/132","nickname":"驹哥","note":"","ucode":"F3C983958A753C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1689380,"avatar":"https://static001.geekbang.org/account/avatar/00/19/c7/24/19d0683e.jpg","nickname":"crossing","note":"","ucode":"3B66CFFF38BA67","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102818,"discussion_content":"最小生成树可以解决一些现实问题，比如路网的修建，每个顶点就相当城镇，而边就是路，权值就是修路的长度或成本。如何使用最低的成本把各个城镇串联起来？（这个例子是现实生活的简化版，现实生活中的路网修建约束更复杂，比如某两城镇为了某个经济规划，之间不管多大代价都一定要修路连接）\n\n还有比如学校和医院修建的选址，也可以用最小生成树算法作为参考。让住在各个顶点（城镇或小区）的人，抵达医院/学校所需的总成本最低，这样有效降低整体社会运转成本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577365359,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":93498,"ip_address":""},"score":102818,"extra":""}]}]},{"had_liked":false,"id":105616,"user_name":"天，很蓝 ～","can_delete":false,"product_type":"c1","uid":1339242,"ip_address":"","ucode":"081D57F7CECC37","user_header":"https://static001.geekbang.org/account/avatar/00/14/6f/6a/b0d7987b.jpg","comment_is_top":false,"comment_ctime":1561042341,"is_pvip":false,"replies":[{"id":"38643","content":"用霍夫曼编码也是00、01、10、11的，你再看下霍夫曼编码的原理吧","user_name":"作者回复","comment_id":105616,"uid":"1190123","ip_address":"","utype":1,"ctime":1561419953,"user_name_real":"王争"}],"discussion_count":5,"race_medal":0,"score":"10150976933","product_id":100017301,"comment_content":"如果文档中只有4个字符，分别是a，b，c，d出现的频率相等，都是100次。如果用00，01，10，11分别表示a，b，c，d的话，总共需要800bit就可以了。但是如果用霍夫曼编码的话，用1，01，001，000分别表示a，b，c，d的话反而需要900bit。这个是不是说明霍夫曼编码有时候是起不到压缩作用的？望老师解答","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454741,"discussion_content":"用霍夫曼编码也是00、01、10、11的，你再看下霍夫曼编码的原理吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561419953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1221991,"avatar":"https://static001.geekbang.org/account/avatar/00/12/a5/67/bf286335.jpg","nickname":"AllenGFLiu","note":"","ucode":"90FA8A619A2629","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6035,"discussion_content":"看 @bingo 写的那个完整评论就明白了，你的这个举例【100， 100， 100， 100】生成的哈夫曼树应该是长这个样子\n            [400]\n          /       \\\n     [200]      [200]\n      / \\        /  \\\n100 100 100 100\n而不是你以为的1 01 001 000","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1566628062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2786997,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/86/b5/6d91d231.jpg","nickname":"陈陶","note":"","ucode":"B0B4A0A9FEC445","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568998,"discussion_content":"没懂老师的解答，这算法不是1，01，001，0001么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651287661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1686257,"avatar":"https://static001.geekbang.org/account/avatar/00/19/ba/f1/b01034e3.jpg","nickname":"Monica","note":"","ucode":"B09BC6EEBD81BD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46775,"discussion_content":"是的，你可能忘了，两个节点合并后他们的跟节点上的频率是二者之和，所以正确构造出来是AllenGFLiu画的那样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573205683,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239200,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e8/a0/c2daafdb.jpg","nickname":"A_阿海","note":"","ucode":"5594C992D7E6E9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":23368,"discussion_content":"对，不能想当然，画个图理解一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569808386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78475,"user_name":"乐凡","can_delete":false,"product_type":"c1","uid":1239260,"ip_address":"","ucode":"918C9997EB6537","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/dc/32e78f02.jpg","comment_is_top":false,"comment_ctime":1553155660,"is_pvip":false,"replies":[{"id":"28617","content":"给个你的测试用例我看看","user_name":"作者回复","comment_id":78475,"uid":"1190123","ip_address":"","utype":1,"ctime":1553217950,"user_name_real":"gg"}],"discussion_count":3,"race_medal":0,"score":"10143090252","product_id":100017301,"comment_content":"老师，我觉得那个霍夫曼编码可能有点缺陷，就是不同字符在字符串中出现的频率很接近，那如果还是按照给每个字符用不同长度的二进制码表示，很有可能会比前面用相同二进制码表示耗费的空间多（亲自测过）。我觉得每一个字符在字符串中出现的频率需要满足一定的大小差距，这样使用空间才会比使用相同数量的二进制码更少。这个大小差距点的公式不太好算，笨一点的办法就是用两种方式比较下占用空间大小。","like_count":2,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444109,"discussion_content":"给个你的测试用例我看看","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553217950,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1114093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ff/ed/b2fc0e7c.jpg","nickname":"7","note":"","ucode":"10A6E57A027D42","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":268526,"discussion_content":"如果是完全二叉树，huffman是5*3+6*4=39；不是44；\n有5个节点是在第三层，6个节点在第四层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589796942,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1448864,"avatar":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","nickname":"徐帅","note":"","ucode":"BDF904280E2330","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":111055,"discussion_content":"应该是不存在缺陷的，搞个测试例子：ABCDEFGHIJK，出现的频率都是1次，huffman结果是完全二叉树，算完是44，用固定长度算也是44，这是极端例子。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577776050,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278795,"user_name":"宁悦","can_delete":false,"product_type":"c1","uid":1901403,"ip_address":"","ucode":"68844C314FEEF8","user_header":"https://static001.geekbang.org/account/avatar/00/1d/03/5b/3cdbc9fa.jpg","comment_is_top":false,"comment_ctime":1613353377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5908320673","product_id":100017301,"comment_content":"区间覆盖题，https:&#47;&#47;leetcode-cn.com&#47;problems&#47;non-overlapping-intervals&#47;submissions&#47;","like_count":1},{"had_liked":false,"id":274287,"user_name":"Jerry","can_delete":false,"product_type":"c1","uid":1421728,"ip_address":"","ucode":"050DCB3F5511A8","user_header":"https://static001.geekbang.org/account/avatar/00/15/b1/a0/769ab3a7.jpg","comment_is_top":false,"comment_ctime":1610955696,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5905922992","product_id":100017301,"comment_content":"贪心算法（英语：greedy algorithm），是用计算机来模拟一个“贪心”的人做出决策的过程。这个人十分贪婪，每一步行动总是按某种指标选取最优的操作。而且他目光短浅，总是只看眼前，并不考虑以后可能造成的影响， 来自 OL Wiki。这个解释，很好理解贪心算法的思想。","like_count":1},{"had_liked":false,"id":235972,"user_name":"Monday","can_delete":false,"product_type":"c1","uid":1250907,"ip_address":"","ucode":"77B9BACC783598","user_header":"https://static001.geekbang.org/account/avatar/00/13/16/5b/83a35681.jpg","comment_is_top":false,"comment_ctime":1595258421,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5890225717","product_id":100017301,"comment_content":"面试前，再撸一遍","like_count":1},{"had_liked":false,"id":234820,"user_name":"Javatar","can_delete":false,"product_type":"c1","uid":2032840,"ip_address":"","ucode":"E216645CDF632C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/04/c8/3c7af100.jpg","comment_is_top":false,"comment_ctime":1594804432,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5889771728","product_id":100017301,"comment_content":"        找零问题能否用贪心算法得看具体情况。<br>        就现有人民币的币额划分来看（1，2，5，10，20，50，100），对于任意数额，采用贪心算法的结果是正确的。（可以随意验证）<br>       有同学说比如只有1元和99元两种币额，这种贪心算法当然不对了。<br>       但找零问题的迷人之处就在于，为什么（1，2，5。。。100）这种划分，可以让贪心算法得到正确的结果，而其他的不行。或者换言之，有没有其他币额的划分，让贪心算法得到的结果也是正确的？<br>       欢迎交流沟通😄","like_count":1},{"had_liked":false,"id":223680,"user_name":"唯心主义蠢货🍁","can_delete":false,"product_type":"c1","uid":1941034,"ip_address":"","ucode":"836B09E0459953","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9e/2a/f1d8913f.jpg","comment_is_top":false,"comment_ctime":1591155026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5886122322","product_id":100017301,"comment_content":"贪心算法，无重叠区间，leetcode 435<br>将记录left和right，初始化right为-MAX，left为MAX，<br>两个判断 if(当前区间左端点大于right) 则说明当前的left和right我们要保留，所以sum++，然后更新left和right，<br>else if(当前区间在left和right内）则说明我们需要缩小区间，则更新left和right<br>缩小区间即贪心，每次我们选择区间最小的那个部分","like_count":1},{"had_liked":false,"id":218869,"user_name":"kaiser","can_delete":false,"product_type":"c1","uid":1390375,"ip_address":"","ucode":"F9438786E9A57B","user_header":"https://static001.geekbang.org/account/avatar/00/15/37/27/b023ada7.jpg","comment_is_top":false,"comment_ctime":1589889279,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5884856575","product_id":100017301,"comment_content":"我把本节课所讲的实例写成了代码，欢迎大家指点https:&#47;&#47;github.com&#47;kaisesai&#47;datastructures_algorithm&#47;tree&#47;master&#47;src&#47;main&#47;java&#47;com&#47;liukai&#47;datastructure&#47;ch_37_greedy","like_count":1},{"had_liked":false,"id":166480,"user_name":"宇飞","can_delete":false,"product_type":"c1","uid":1105513,"ip_address":"","ucode":"D64C53CD189164","user_header":"https://static001.geekbang.org/account/avatar/00/10/de/69/113da382.jpg","comment_is_top":false,"comment_ctime":1577456965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872424261","product_id":100017301,"comment_content":"霍夫曼编码大学学过，看着熟悉，要是上下文，估计会记得很深","like_count":1},{"had_liked":false,"id":149302,"user_name":"Harvey","can_delete":false,"product_type":"c1","uid":1254112,"ip_address":"","ucode":"164D1178DA091A","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/e0/6295a753.jpg","comment_is_top":false,"comment_ctime":1573185827,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"5868153123","product_id":100017301,"comment_content":"分糖果问题好像和孩子取糖果顺序无关，不用从对糖果需求最小的孩子开始发糖果，只要保证每次从能满足孩子需求的最小糖果中选一个给孩子就可以了，我想不到这样有什么反例。","like_count":1,"discussions":[{"author":{"id":1205036,"avatar":"","nickname":"Dym","note":"","ucode":"7E521F01A4D823","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102636,"discussion_content":"前提条件是 从这批孩子中选择一部分孩子，那么选择这一部分孩子当中当然是需求最小的孩子越先被选择最好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577357903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1254112,"avatar":"https://static001.geekbang.org/account/avatar/00/13/22/e0/6295a753.jpg","nickname":"Harvey","note":"","ucode":"164D1178DA091A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1205036,"avatar":"","nickname":"Dym","note":"","ucode":"7E521F01A4D823","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":143115,"discussion_content":"是从分完糖果效率角度考虑的吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579490874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":102636,"ip_address":""},"score":143115,"extra":""}]}]},{"had_liked":false,"id":137950,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1569935383,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5864902679","product_id":100017301,"comment_content":"答案里可以加个标签什么的：<br>例如<br>feifei 的留言 标注 错误示例 😏<br>qinggeouye 的留言 标注 正确","like_count":1},{"had_liked":false,"id":133617,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1568621843,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5863589139","product_id":100017301,"comment_content":"贪婪就是一根筋，<br>思考<br>相邻两个数，前面比后面大就直接干掉，如果遍历完还不足k个，那就从尾巴上去掉剩余部分！","like_count":1},{"had_liked":false,"id":89307,"user_name":"Zhang张","can_delete":false,"product_type":"c1","uid":1236921,"ip_address":"","ucode":"61CEF33BF4FE67","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/b9/b73cebf5.jpg","comment_is_top":false,"comment_ctime":1556152830,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5851120126","product_id":100017301,"comment_content":"霍夫曼编码视图图那个地方感觉有问题：<br>“按照频率取出最小的两个节点A、B，然后新建一个节点C，把频率设置为两节点之和，作为A、B的父节点，然后把C放入优先级队列中，重复上述过程...”；<br>这个地方两个节点之和是不是有问题，样例数据是没有问题，但比如a=10,b=20,c=30,d=40,e=50f=60的情况，(a+b)+c=60之后，再次取出的频率最小的两个节点就是d和e了，这样就会出现一个字符是另外一个字符编码的前缀。","like_count":1,"discussions":[{"author":{"id":1188793,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/b9/8d182f13.jpg","nickname":"起风了","note":"","ucode":"9A8A2E51E198EE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":279257,"discussion_content":"我的理解是编码里前缀的0是不能省略的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591317260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":85272,"user_name":"clip","can_delete":false,"product_type":"c1","uid":1019244,"ip_address":"","ucode":"D0E142605A5BD5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/6c/0c2a26c7.jpg","comment_is_top":false,"comment_ctime":1555029927,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"5849997223","product_id":100017301,"comment_content":"说 99 面值的那个同学举得例子不太好。<br>现实中的钱币是 1、2、5、10 这样的配置，小金额必须用大于等于两张才有机会凑齐大金额，从设置的时候应该就是为了避免出现那种情况。","like_count":1,"discussions":[{"author":{"id":1662149,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyoRtwfbJmS5XdfSWHZibzsWXvdOI2RdPkXaERn5mRU34M8I1ETYSPnusDvnicyiabwzhBrMPc8Uo8g/132","nickname":"驹哥","note":"","ucode":"F3C983958A753C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102926,"discussion_content":"举例99那位同学，是考虑了“钱币”的所有可能的组合形式，包括还没造出来，甚至是永远不会造出来的钱币组合。这就是抽象思维，因为我们学习算法、做计算机程序设计，总是希望一套程序能够搞定尽量多的情况，也就是说模型的泛化能力要强。\n\n那么，思虑那么多的意义何在？即便我们现实生活中最终采取的方案只是N种备选方案中的1、2种具象方案，但如果我们不能够提前评估所有的可能性，就无法肯定地评判最终选择的那一两种是否是最优解。\n\n而你，只考虑了现实生活中已经见到的具象的组合方案。就好比解多项式方程，他的思维考虑了每个变量的定义域以及方程的值域的所有可能性，在后续工作中，他可以随心所欲选择想要的某一个或某一种解。而你，只考虑了方程时的某一个特例解，在后续工作中，你也只有这一种解可选，当遇到该特例解不能搞定你所面临的难题时，你就束手无策了。\n\n比抽象思维和对程序设计的理解，你输他一筹。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577367867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1397031,"avatar":"https://static001.geekbang.org/account/avatar/00/15/51/27/f0dd6f19.jpg","nickname":"老白","note":"","ucode":"39881175152D49","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":273005,"discussion_content":"“小金额必须用大于等于两张才有机会凑齐大金额”这个描述不太对吧？\n\n例如：1，2，5，6 是不是满足这个条件？但是找零 10 块，用贪心不是最优解。\n\n如果你说的 “大于等于” 不包括大于1小于2的小数，那 1，2，3，5 应该是不满足你说的条件的，但贪心是可以拿到最优解的。\n\n事实上，只要 a[i+1] 是 a[i] 的整数倍，应该都可以用贪心，这是个充分条件。除了这种情况，还有其他情况也可以用贪心求最优解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590390680,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":71188,"user_name":"吴昊","can_delete":false,"product_type":"c1","uid":1248635,"ip_address":"","ucode":"CB4F6A46930873","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/7b/e574577a.jpg","comment_is_top":false,"comment_ctime":1551279667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5846246963","product_id":100017301,"comment_content":"思考第一题：<br>     首先确定几个准则：<br>    1、数的大小只取决于高位，如果最高位相同则比较次高位<br>    2、移除操作的本质实际上是移除数字的下一位成为高位。<br>   所以要实现移除数字后整体变小，只要保证从高位开始移除，并且移除数字的下一位小于移除的数字。<br>思考第二题：<br>      服务过的人的服务时间 = 剩下的人的等待时间。所以只要保证前n个人的总服务时间是最短的（n=1....N）。","like_count":1},{"had_liked":false,"id":69799,"user_name":"bingo","can_delete":false,"product_type":"c1","uid":1341276,"ip_address":"","ucode":"DD96820EC8871D","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/5c/8d53165e.jpg","comment_is_top":false,"comment_ctime":1550847139,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5845814435","product_id":100017301,"comment_content":"@spark。贪心算法是利用局部最优求解全局最优（求出来的是否正确要靠自己判断，所以适合那些局部最优加起来就是全局最优的问题）<br>本例中霍夫曼编码要解决的问题就是让总文本使用编码后变得占内存最小，你看，求最值，这不就是求全局最优解嘛！<br>下面就用我这不太靠谱的语言表达能力再写写老师的“这 1000 个字符只需要 2100bits&quot;这个是怎么算出来的。<br>答:其实2100是利用加权求和算出来的：<br>∑(字符出现的频率  *  对应哈夫曼编码的长度)，其中字符出现的频率就是树叶子节点的值，编码长度就是当前叶子距离根节点的距离（隔了多少条线段的数量，即是高度），对应于老师倒数第二幅图中的最后一棵树：<br>2100bits = (字符a出现的频率 * 1  + b出现的频率 * 2 + ... + f出现的频率*1 + e出现的频率 * 1)<br>             = 450*1 + 350*2 + ... + 30*1 + 20*1<br>             = 2100<br>当然也可以这样算：把树的非叶子节点的值全加起来。（思想和上面的公式一样的）<br>第二题也可以用这个思想。<br><br>组织语言还是做得不好，大家就体谅下，，，","like_count":1},{"had_liked":false,"id":63935,"user_name":"0:o2","can_delete":false,"product_type":"c1","uid":1204254,"ip_address":"","ucode":"C72C5D569E012A","user_header":"https://static001.geekbang.org/account/avatar/00/12/60/1e/31ab7c18.jpg","comment_is_top":false,"comment_ctime":1548602891,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5843570187","product_id":100017301,"comment_content":"1.既然移除k个数字，不管移除哪个，剩余的长度应该都是最小的。<br>从高位向低位，依次移除9-&gt;8-&gt;7......<br>例如 98975432，第一次移除后是8975432，第二次移除后是875432，第三次移除后是75432。。。<br>2.从等待时间最短的开始，依次递增","like_count":1,"discussions":[{"author":{"id":1014665,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7b/89/34f2cbcc.jpg","nickname":"杨宇","note":"","ucode":"EB74DF6E269F03","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560123,"discussion_content":"目的不是长度最小，而是算术值最小","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649209000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":58757,"user_name":"Ying","can_delete":false,"product_type":"c1","uid":1307466,"ip_address":"","ucode":"FAE36C852765F2","user_header":"https://static001.geekbang.org/account/avatar/00/13/f3/4a/4874b350.jpg","comment_is_top":false,"comment_ctime":1547189366,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5842156662","product_id":100017301,"comment_content":"我们从队列中取出频率最小的两个节点 A、B，然后新建一个节点 C，把频率设置为两个节点的频率之和，<br>并把这个新节点 C 作为节点 A、B 的父节点。最后再把 C 节点放入到优先级队列中。 ----<br><br>这句话应该是<br>我们从队列中取出频率最小的两个节点 F、E，然后新建一个节点 X，把频率设置为两个节点的频率之和，<br>并把这个新节点 X 作为节点 F、E 的父节点。最后再把 X 节点放入到优先级队列中。","like_count":1},{"had_liked":false,"id":56636,"user_name":"观弈道人","can_delete":false,"product_type":"c1","uid":1016905,"ip_address":"","ucode":"F3BB619A33C605","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/49/47d48fd0.jpg","comment_is_top":false,"comment_ctime":1546512716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5841480012","product_id":100017301,"comment_content":"感觉追求最优解的算法都可以称为贪心算法了，比如哈夫曼编码","like_count":1},{"had_liked":false,"id":51672,"user_name":"新丁","can_delete":false,"product_type":"c1","uid":1244860,"ip_address":"","ucode":"AC72010AE8DF45","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/bc/e2a4efba.jpg","comment_is_top":false,"comment_ctime":1545221259,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5840188555","product_id":100017301,"comment_content":"贪心算法并不一定能获得最优解！学习做事也一样不能总看眼前的最优选择，坚定目标，踏踏实实的往下学，只有回过头来总结才能证明你是否获得了最优解😁","like_count":1,"discussions":[{"author":{"id":1662149,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKyoRtwfbJmS5XdfSWHZibzsWXvdOI2RdPkXaERn5mRU34M8I1ETYSPnusDvnicyiabwzhBrMPc8Uo8g/132","nickname":"驹哥","note":"","ucode":"F3C983958A753C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102943,"discussion_content":"如果把问题转化为函数图像，若函数图像中只包含一个极值点，那么贪心算法总能找到最优解。\n如果函数图像包括多个极值点，若有办法确定极大值或极小值的定义域范围，那么也能够总找到最优解。\n如果包含最优解的定义域范围能大概率估计，那么贪心算法可以大概率找到最优解。\n如果最优解所在的定义域范围不可有效估计，则贪心算法失效。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577368254,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50602,"user_name":"luxinfeng","can_delete":false,"product_type":"c1","uid":1259853,"ip_address":"","ucode":"51D0046C4D31AD","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/4d/9ce28826.jpg","comment_is_top":false,"comment_ctime":1545015405,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5839982701","product_id":100017301,"comment_content":"思考题第一题：从非负整数a的第一位开始，如果这个位置上的数比后k个位置上的数小，则保留，否则删除该数并令k=k-1；到非负整数的第二位时，如果该位置上的数比后k个位置上的数小，则保留，否则删除该数并令k=k-1，以此类推.....至k=0时结束。<br>思考题第二题：按照所需服务时间由小到大的序列进行服务。<br>","like_count":1},{"had_liked":false,"id":50541,"user_name":"Stalary","can_delete":false,"product_type":"c1","uid":1101749,"ip_address":"","ucode":"F69AFF7C958D31","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/b5/d1ec6a7d.jpg","comment_is_top":false,"comment_ctime":1545008374,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5839975670","product_id":100017301,"comment_content":"第一个问题可以每次移除数字最大的，第二个问题则是每次先服务等待时间最短的","like_count":1,"discussions":[{"author":{"id":1209336,"avatar":"https://static001.geekbang.org/account/avatar/00/12/73/f8/dbd2fa50.jpg","nickname":"晓杉","note":"","ucode":"19E634BB61A165","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":15864,"discussion_content":"你的第一个问题思路不对，参考留言置顶的回答","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568856945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352974,"user_name":"邵光泽","can_delete":false,"product_type":"c1","uid":1985537,"ip_address":"陕西","ucode":"45088A0F5DF384","user_header":"https://static001.geekbang.org/account/avatar/00/1e/4c/01/72203f00.jpg","comment_is_top":false,"comment_ctime":1659061103,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659061103","product_id":100017301,"comment_content":"我有个问题，1，01，001，0001 这样不重复前缀，也放不了多少字符呀？<br>160个字符，最后那个就要用20bytes存储？","like_count":0},{"had_liked":false,"id":351094,"user_name":"梦北飞","can_delete":false,"product_type":"c1","uid":1435605,"ip_address":"","ucode":"D7CAC5359D5AC9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJcrsd2TcCfqKKC3OACnBmtlftQfrCcjjm4eCgwoDGZOuGWatMz8p7H3eYibTibubCSQybEaDdx1Aicg/132","comment_is_top":false,"comment_ctime":1657525255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1657525255","product_id":100017301,"comment_content":"第一题思路，代码实现如下，（代码水平有限，看思路就行，自测可行，欢迎指正）：<br>private static String getMinNumber(String number, int k) {<br>        String[] split = number.split(&quot;&quot;);<br>        List&lt;Integer&gt; chars1 = Arrays.asList(split).stream().map(Integer::parseInt).collect(<br>                Collectors.toList());<br>        int num = 0;<br>        boolean isremove = false;<br>        while(num &lt; k){<br>            isremove = false;<br>            &#47;&#47;如果第二位为0，则前两位不变，从第三位开始判断<br>            int i= 0;<br>            if(chars1.size() &gt; 1 &amp;&amp; chars1.get(1) == 0){<br>                i = 1;<br>            }<br>            &#47;&#47;比较第一个逆序的位置，移除数据，<br>            for(;i&lt; chars1.size()-1;i++){<br>                if(chars1.get(i) &gt; chars1.get(i+1)){<br>                    chars1.remove(i);<br>                    isremove = true;<br>                    break;<br>                }<br>            }<br>            &#47;&#47;全部正序则移除最后一位<br>            if(!isremove){<br>                chars1.remove(chars1.size()-1);<br>            }<br>            num ++ ;<br>        }<br>        StringBuilder sb = new StringBuilder();<br>        for (Integer integer : chars1) {<br>            sb.append(integer);<br>        }<br>        return sb.toString();<br>    }","like_count":0},{"had_liked":false,"id":346273,"user_name":"晨遥","can_delete":false,"product_type":"c1","uid":2971870,"ip_address":"","ucode":"C3972A1FE5E021","user_header":"https://static001.geekbang.org/account/avatar/00/2d/58/de/dad844b1.jpg","comment_is_top":false,"comment_ctime":1652964964,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652964964","product_id":100017301,"comment_content":"第二个问题<br><br>每次服务一个人的等待时间 = n * x<br><br>总时间 = n * a + (n-1) * b + (n-2) * c + ... + 1 * x<br><br>第一个人, 单位时间对总时间的贡献是n, 第二个人是n-1...<br><br>所以我们要让总时间最短, 恰巧是贪心算法的逆向思路<br><br>就是每次要让服务时间最短的人先被服务。","like_count":0},{"had_liked":false,"id":345730,"user_name":"陈波","can_delete":false,"product_type":"c1","uid":1276472,"ip_address":"","ucode":"E0C3B4B79C8709","user_header":"https://static001.geekbang.org/account/avatar/00/13/7a/38/5ced9666.jpg","comment_is_top":false,"comment_ctime":1652529932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652529932","product_id":100017301,"comment_content":"对于第一题，最坏时间复杂度应该是O（n*k）,其中k是删除数的个数，n是数字总个数。<br>比如数字：1234，删掉一个数字，剩余数字最小值是123。<br>计算过程：<br>用高位和后面的所有低位依次比较，如果高位数字大则删除，否则到达最后一位时还没有删除一个数字则把最后一位删除。<br>比较过程：<br>1&lt;2，&lt;3，&lt;4       3次比较，<br>2&lt;3，&lt;4             2次比较，<br>3&lt;4                    1次比较，<br>4                        0次比较，删除<br><br>O（（3+2+1）*1）<br>可以推出，n个数字，移除k个数字的最坏时间复杂度为：O（n*k）","like_count":0},{"had_liked":false,"id":344254,"user_name":"👿","can_delete":false,"product_type":"c1","uid":2614279,"ip_address":"","ucode":"AA3D367FE7834D","user_header":"https://static001.geekbang.org/account/avatar/00/27/e4/07/1cb174bf.jpg","comment_is_top":false,"comment_ctime":1651398982,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651398982","product_id":100017301,"comment_content":"1. 相同的位数 高位越小数值越小。 可以用一个堆栈解决, 将a从高位到低位放入堆栈中, 放的过程中, 如果发现栈中元素比当前元素大, 栈顶元素就是优先应该被移除的数, 堆栈构造完成后离栈顶越近越应该被优先移除。<br>2.服务时间短人的在更前面","like_count":0},{"had_liked":false,"id":338233,"user_name":"Today","can_delete":false,"product_type":"c1","uid":1235000,"ip_address":"","ucode":"4FA397F0BD8C6E","user_header":"https://static001.geekbang.org/account/avatar/00/12/d8/38/41027bda.jpg","comment_is_top":false,"comment_ctime":1647386458,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647386458","product_id":100017301,"comment_content":"本节学习到了，面对求最优解问题时，可以联想到 “贪心算法模型”，抽象出限制值，期望值；结合生活场景模拟不同的选择情况，选择代价最小贡献相对较大的一种方式","like_count":0},{"had_liked":false,"id":327819,"user_name":"Wilson","can_delete":false,"product_type":"c1","uid":1007140,"ip_address":"","ucode":"3ADBE962C67B8D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5e/24/040855d3.jpg","comment_is_top":false,"comment_ctime":1640316509,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1640316509","product_id":100017301,"comment_content":"第一题：<br>理解就是题目就是去除数组中第K大的值，剩下的加起来就是最小的。我想到的是用快排把数组排序，然后删除第K大的值。<br>时间复杂度0(nlogn),空间复杂度0(1)<br>第二题：<br>第二题应该题意有点问题，如果是一个窗口，怎么变化总等待时间是不变。应该是题意改为2个窗口以上都可以，<br>如果改成2个窗口，有N个人排队，如何让这个N个人处理总时长最短。那主要考虑哪些人可以并行处理，这样共用时间就多，时间最短。","like_count":0},{"had_liked":false,"id":319200,"user_name":"Shinran.","can_delete":false,"product_type":"c1","uid":1240937,"ip_address":"","ucode":"E28AF157D1A93E","user_header":"https://static001.geekbang.org/account/avatar/00/12/ef/69/25ea2d67.jpg","comment_is_top":false,"comment_ctime":1635669752,"is_pvip":false,"discussion_count":0,"race_medal":2,"score":"1635669752","product_id":100017301,"comment_content":"思考题完全想不到思路，怎么办<br>","like_count":0},{"had_liked":false,"id":315991,"user_name":"walter","can_delete":false,"product_type":"c1","uid":2425841,"ip_address":"","ucode":"C45C93E3DFFAF3","user_header":"https://static001.geekbang.org/account/avatar/00/25/03/f1/69e111f0.jpg","comment_is_top":false,"comment_ctime":1634096312,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634096312","product_id":100017301,"comment_content":"局部最优推导全局最优，对于前面的选择影响后面的选择，不考虑使用贪心。遇到一个问题，应优先考虑动归，贪心。","like_count":0},{"had_liked":false,"id":312184,"user_name":"身负山河","can_delete":false,"product_type":"c1","uid":2660822,"ip_address":"","ucode":"7244274E67B0D5","user_header":"https://static001.geekbang.org/account/avatar/00/28/99/d6/720f7108.jpg","comment_is_top":false,"comment_ctime":1631675117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631675117","product_id":100017301,"comment_content":"个人理解：<br>贪心算法考虑的是局部最优解。求两点间最短路径，用贪心可能会无法得到。除了步数最少外，还有隐含条件可以达到。而其他问题更像是资源调度，即使每一步都是最优，最后也一定可以实现要求。<br>像最短路径那种，局部最优可能导致无法满足要求的问题，就不能用贪心算法","like_count":0},{"had_liked":false,"id":312172,"user_name":"時浚瑞","can_delete":false,"product_type":"c1","uid":2634551,"ip_address":"","ucode":"1ADE44A9557676","user_header":"https://static001.geekbang.org/account/avatar/00/28/33/37/65a7bd9d.jpg","comment_is_top":false,"comment_ctime":1631671536,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1631671536","product_id":100017301,"comment_content":"1. 先按大小排序所有的数字，然后再从大的开始移除；<br>2.先按照服务需求时间排序，然后从需求时间最短的开始服务；","like_count":0},{"had_liked":false,"id":304357,"user_name":"放飞心情","can_delete":false,"product_type":"c1","uid":1244845,"ip_address":"","ucode":"75A2192D91D86C","user_header":"https://static001.geekbang.org/account/avatar/00/12/fe/ad/7fa85a7d.jpg","comment_is_top":false,"comment_ctime":1627371047,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627371047","product_id":100017301,"comment_content":"好像是2018年购买的课程，最近一直在学。这个课程体系、内容、案例都非常不错，唯一的小遗憾：每次课后思考题老师没有进行剖析","like_count":0},{"had_liked":false,"id":299042,"user_name":"Geek_83908e","can_delete":false,"product_type":"c1","uid":1516654,"ip_address":"","ucode":"FECC0BD40EA5D7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIacibe477chWI4IleDDZpj3Md6Gb3bF8SUHIRqfYanTPZddUmJH2IVDeNOVKMNctad26fk3Wu2zWw/132","comment_is_top":false,"comment_ctime":1624434531,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624434531","product_id":100017301,"comment_content":"贪心算法的核心就是每一步选择最有方案，同时这些方案相互独立，互不影响","like_count":0},{"had_liked":false,"id":298057,"user_name":"海崖","can_delete":false,"product_type":"c1","uid":2552745,"ip_address":"","ucode":"9D42E0B0D30A56","user_header":"https://static001.geekbang.org/account/avatar/00/26/f3/a9/bb9d8450.jpg","comment_is_top":false,"comment_ctime":1623898133,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623898133","product_id":100017301,"comment_content":"叮~打卡","like_count":0},{"had_liked":false,"id":296738,"user_name":"o my love","can_delete":false,"product_type":"c1","uid":1243331,"ip_address":"","ucode":"307601ACAC5DCC","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/c3/1d557354.jpg","comment_is_top":false,"comment_ctime":1623140137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623140137","product_id":100017301,"comment_content":"public static String removeKdigits(String num, int k) {<br>        Deque&lt;Character&gt; deque = new LinkedList&lt;Character&gt;();<br>        int length = num.length();<br>        for(int i = 0; i &lt; length;i++){<br>            Character ch = num.charAt(i);<br>            while(!deque.isEmpty() &amp;&amp; k &gt; 0 &amp;&amp; deque.peekLast() &gt; ch){<br>                deque.pollLast();<br>                k--;<br>            }<br>            deque.offerLast(ch);<br>        }<br><br>        for(int i =0;i &lt; k ; i++){<br>            deque.pollLast();<br>        }<br><br>        while(deque.peekFirst() == &#39;0&#39;){<br>            deque.pollFirst();<br>        }<br>        StringBuffer stringBuffer = new StringBuffer();<br>        deque.stream().forEach(item -&gt; {<br>            System.out.println(item);<br>            stringBuffer.append(item);<br>        });<br><br>        return stringBuffer.length() == 0 ? &quot;0&quot; :stringBuffer.toString();<br>    }","like_count":0},{"had_liked":false,"id":291811,"user_name":"小福","can_delete":false,"product_type":"c1","uid":1899911,"ip_address":"","ucode":"C5D78EAD860498","user_header":"https://static001.geekbang.org/account/avatar/00/1c/fd/87/24a3553c.jpg","comment_is_top":false,"comment_ctime":1620526337,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620526337","product_id":100017301,"comment_content":"问题1:依次删除存在逆序的数字，如果逆序数小于需要删除数量，再依次删除数值最大的几位数字","like_count":0},{"had_liked":false,"id":282556,"user_name":"KangShan","can_delete":false,"product_type":"c1","uid":1082000,"ip_address":"","ucode":"07497A7AC92238","user_header":"https://static001.geekbang.org/account/avatar/00/10/82/90/e4a08b0e.jpg","comment_is_top":false,"comment_ctime":1615300250,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1615300250","product_id":100017301,"comment_content":"贪心算法要求局部每一个步骤最优总和在一起就是全局最优,如果不能做到这点就需要将每种可能的多个步骤汇总在一起成为单步骤,让单步骤来找最优.","like_count":0},{"had_liked":false,"id":281062,"user_name":"罗耀龙@坐忘","can_delete":false,"product_type":"c1","uid":1917663,"ip_address":"","ucode":"3CEA258DE7F3C7","user_header":"https://static001.geekbang.org/account/avatar/00/1d/42/df/a034455d.jpg","comment_is_top":false,"comment_ctime":1614568310,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1614568310","product_id":100017301,"comment_content":"茶艺师学编程<br><br>思考题<br>1、背包问题的变形，“K个数字”就是背包，在往这个背包塞尽可能大的数字，剩下的就是小数字<br>2、背包问题的变形，先把来客的服务时间从小到大排序，然后分几个背包，先把时间少的“装”起来的服务了，然后把时间久一点的“装”起来服务了，最后把时间很久的服务了。","like_count":0},{"had_liked":false,"id":278595,"user_name":"骑着驴读着书的谢小夕","can_delete":false,"product_type":"c1","uid":1625340,"ip_address":"","ucode":"56F0A469B630A2","user_header":"https://static001.geekbang.org/account/avatar/00/18/cc/fc/92646317.jpg","comment_is_top":false,"comment_ctime":1613120486,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1613120486","product_id":100017301,"comment_content":"最终让数字尽可能升序排列即可。 ","like_count":0},{"had_liked":false,"id":274342,"user_name":"young","can_delete":false,"product_type":"c1","uid":1613159,"ip_address":"","ucode":"1DF149FB0BF34B","user_header":"https://static001.geekbang.org/account/avatar/00/18/9d/67/556c73a2.jpg","comment_is_top":false,"comment_ctime":1610972669,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610972669","product_id":100017301,"comment_content":"Q: 在一个非负整数 a 中，我们希望从中移除 k 个数字，让剩下的数字值最小，如何选择移除哪 k 个数字呢？<br>A: 剩下数字是一个确定长度位，所以前面的数字要尽可能小，从下一位开始查到有没有比当前位小的数字，有且剩余位加前面已经确定的位长度大于k，则直接跳到该位，否则不操作。随后后移一位继续之前的操作。","like_count":0},{"had_liked":false,"id":270535,"user_name":"Herbert","can_delete":false,"product_type":"c1","uid":2358822,"ip_address":"","ucode":"BB16C81CD0282C","user_header":"https://static001.geekbang.org/account/avatar/00/23/fe/26/feda16aa.jpg","comment_is_top":false,"comment_ctime":1609152561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609152561","product_id":100017301,"comment_content":"如何理解。经过这种编码压缩之后，这 1000 个字符只需要 2100bits 就可以了。看文中的例子1000个只需要1001bit就可以啊","like_count":0},{"had_liked":false,"id":266543,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1607390124,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1607390124","product_id":100017301,"comment_content":"有一个疑问，我们在计算机中存储数据，是以字节为单位，比如平时java中的基本数据类型都是占几个字节。如果切分为三位，比如上面的a(001) ,b(010) 在计算机中该如何取存储它们？","like_count":0},{"had_liked":false,"id":261524,"user_name":"空藍性忘","can_delete":false,"product_type":"c1","uid":1905574,"ip_address":"","ucode":"050244F4F74723","user_header":"https://static001.geekbang.org/account/avatar/00/1d/13/a6/793b8505.jpg","comment_is_top":false,"comment_ctime":1605372671,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605372671","product_id":100017301,"comment_content":"注意哈夫曼树实现逻辑那里，用的是优先级队列，我理解成队列了，还在想依次出队的话没法保证每次出权最小的两个。。。<br>优先级队列：在优先队列中，元素被赋予优先级，当访问元素时，不是先进先出，而是具有最高优先级的元素最先出队","like_count":0},{"had_liked":false,"id":259908,"user_name":"Leslie","can_delete":false,"product_type":"c1","uid":2184832,"ip_address":"","ucode":"E703C3637A740D","user_header":"https://static001.geekbang.org/account/avatar/00/21/56/80/ea47a7ba.jpg","comment_is_top":false,"comment_ctime":1604885934,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1604885934","product_id":100017301,"comment_content":"评论都这么强 还来学啥呢","like_count":0},{"had_liked":false,"id":254642,"user_name":"吉法师","can_delete":false,"product_type":"c1","uid":2232546,"ip_address":"","ucode":"F1E3F4F526CA13","user_header":"https://static001.geekbang.org/account/avatar/00/22/10/e2/35f2fc23.jpg","comment_is_top":false,"comment_ctime":1603161268,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603161268","product_id":100017301,"comment_content":"主要问题是我都不知道什么是哈夫曼编码。。","like_count":0},{"had_liked":false,"id":253856,"user_name":"他二哥","can_delete":false,"product_type":"c1","uid":1049309,"ip_address":"","ucode":"549C48137F6042","user_header":"https://static001.geekbang.org/account/avatar/00/10/02/dd/31d60be7.jpg","comment_is_top":false,"comment_ctime":1602920499,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1602920499","product_id":100017301,"comment_content":"糖果问题，只要给每个小孩分配满足其需求的最小糖果即可，不需要优先分配给需求小的小孩。<br><br>题目：有m个糖果，n个小孩，m&lt;n，且每个小孩只能分到最多一个糖果，要求满足数量最多的小孩。<br><br>贪心算法：随机“取”一个小孩，从糖果中找到一个满足他需求的最小的糖果分给他，找不到则分配失败，直至小孩或者糖果“用完”。<br><br>证明贪心算法可以work：<br>分配结果有2种：<br>1）糖果全部分出去了，这个是所有算法能达到的最好结果的上限，这种情况不需要讨论；<br>2）还有糖果剩下，设已经分到糖果的小孩集合为A，分出去的糖果集合为A&#39;，没有分到的小孩集合为B，未分出去的糖果集合为B&#39;。我们假设算法不work，这意味着A中一定存在一个小孩x，把自己手中的糖果让出来给B中的一个小孩，并且小孩x可以从B&#39;中拿到一个更小的、满足自己需求的糖果，只有这种情况能使分到糖果的人数增加，但【小孩x能从B&#39;中拿到一个更小的、满足自己需求的糖果】这个和我们执行的贪心策略矛盾，因此贪心算法能找到最大的人数，并且这个过程和给小孩分配的顺序无关。<br>","like_count":0},{"had_liked":false,"id":251871,"user_name":"jack","can_delete":false,"product_type":"c1","uid":1898292,"ip_address":"","ucode":"A2253AC8570C5E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/jibauP3icEFic4w56L2ddVghL7h2gGKhFdW8lBfE9rpwwRgzUKkLFY9wb4w70AXz7retME96a6EBRTA0LvSLn0ib8A/132","comment_is_top":false,"comment_ctime":1601941506,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1601941506","product_id":100017301,"comment_content":"1.统计a的长度len，若k大于等于len，则直接输出最后的结果为0；若len&gt;k，则提取出a的每一位的数字并乘上每一位的权重，依照每一位的乘积进行堆排序选出前k大的数字并移除之即可。<br>2.按照每个人需要办理的业务所需被服务时间进行排序，优先服务当前正在等待被服务的人群当中所需服务时间“最小”的，则可使n个人总的等待时间最短。","like_count":0},{"had_liked":false,"id":250679,"user_name":"白小墨","can_delete":false,"product_type":"c1","uid":1093460,"ip_address":"","ucode":"11D98815DE50FB","user_header":"https://static001.geekbang.org/account/avatar/00/10/af/54/5e53ab93.jpg","comment_is_top":false,"comment_ctime":1601194303,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1601194303","product_id":100017301,"comment_content":"在一个非负整数 a 中，我们希望从中移除 k 个数字，让剩下的数字值最小，如何选择移除哪 k 个数字呢？<br>这个问题我有一些思考<br>每次移除基于1个条件：<br>从左到右的高位，在接下来k个数字中能达到最小。<br>就演化成了整数位，从左到右挑选n-k个数字，让结果最小的问题<br>比如说 <br>整数4156，将要移除2位数字<br>移除之后还剩两位整数，<br>首位的范围是（415）能达到的最小是1，所以我们挑选1出来，还剩456<br>第二位的范围是（156），1已经被挑走了，只能从56选出最小的数字5<br>所以结果就是15 是最小的。<br>老师你觉得这个想法怎么样。<br>","like_count":0},{"had_liked":false,"id":249598,"user_name":"石*远","can_delete":false,"product_type":"c1","uid":1947613,"ip_address":"","ucode":"500BEC11AFC7FF","user_header":"https://static001.geekbang.org/account/avatar/00/1d/b7/dd/bd99be05.jpg","comment_is_top":false,"comment_ctime":1600700494,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600700494","product_id":100017301,"comment_content":"看来人民币值设置的很科学呀，1,2,5,10,20,50,100。性质1：当前值 &gt;=（前1+前二）；性质2：当前值&gt;=前1两倍。所以在中国目前人民币面值情况是可以利用贪心算法找零的 吧。到时用“开心小毛”同学提到的动态规划看能不能找一个特例使得真实环境中不能利用贪心算法的特例","like_count":0},{"had_liked":false,"id":249241,"user_name":"连长","can_delete":false,"product_type":"c1","uid":2047980,"ip_address":"","ucode":"555BD3DE57887F","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3f/ec/00904faa.jpg","comment_is_top":false,"comment_ctime":1600519996,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1600519996","product_id":100017301,"comment_content":"这里的霍夫曼编码给的例子是特定筛选的，与真实霍夫曼编码有很大区别，真实情况不会是“任何一个字符的编码都不是另一个的前缀”。","like_count":0,"discussions":[{"author":{"id":1939316,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/97/74/a933d664.jpg","nickname":"莜戏","note":"","ucode":"C3488A2BB44359","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":381768,"discussion_content":"若非如此，就得另加标记区分前缀相同的字符了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625206100,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":247900,"user_name":"JerryZhu","can_delete":false,"product_type":"c1","uid":1591223,"ip_address":"","ucode":"76850CD45786C1","user_header":"https://static001.geekbang.org/account/avatar/00/18/47/b7/b30472fd.jpg","comment_is_top":false,"comment_ctime":1599908623,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1599908623","product_id":100017301,"comment_content":"1. 移除尽可能大的<br>2. 服务尽可能小的","like_count":0},{"had_liked":false,"id":245514,"user_name":"小时候可鲜啦","can_delete":false,"product_type":"c1","uid":1050777,"ip_address":"","ucode":"C88B3EDF758230","user_header":"https://static001.geekbang.org/account/avatar/00/10/08/99/6ab45a2f.jpg","comment_is_top":false,"comment_ctime":1598965026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598965026","product_id":100017301,"comment_content":" 课后思考<br><br>1、在一个非负整数 a 中，我们希望从中移除 k 个数字，让剩下的数字值最小，如何选择移除哪 k 个数字呢？<br><br>移除k个数字是的剩下数字值最小等效于每次移除一个数字使得剩下数字最小，共移除k次。那么，我们在比较数字大小的时候都是从最高项开始比起的，所以在移除数字的时候首先考虑移除数字后最高项能否变小，这就需要比较最高项和次高项数字的大小，如果次高项数值大于最高项，则考虑移除数字后使得次高项数值最小，开始比较次高项和其右边相邻数字，以此类推。<br><br>2、假设有 n 个人等待被服务，但是服务窗口只有一个，每个人需要被服务的时间长度是不同的，如何安排被服务的先后顺序，才能让这 n 个人总的等待时间最短？<br><br>对于每一个人来说，其等待总时长是其前面所有人办理业务时常的总和，而第一个人无需等待。假设第一个人至最后一个人的办事时长依次为T1~Tn，那么总等待时长为TS有：<br><br>TS=(n-1)T1+(n-2)T2+..+2Tn-2+Tn-1<br><br>因此要使TS最小，越靠前的人其办事的时长也应该越小，即办事时长应该满足非递减的顺序。<br>","like_count":0},{"had_liked":false,"id":244452,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1598520533,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1598520533","product_id":100017301,"comment_content":"1 哈夫曼编码：建小顶堆，构建出二叉树。然后递归遍历树，获取各个叶子节点的编码，即为对应的哈夫曼编码<br>2 取最大的k个值<br>3 让用时最短的人先得到服务","like_count":0},{"had_liked":false,"id":240260,"user_name":"多选参数","can_delete":false,"product_type":"c1","uid":1248326,"ip_address":"","ucode":"B2294D80AB075F","user_header":"https://static001.geekbang.org/account/avatar/00/13/0c/46/dfe32cf4.jpg","comment_is_top":false,"comment_ctime":1596812871,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596812871","product_id":100017301,"comment_content":"想讲一下思考的想法：<br><br>1. @cirno 的方法是对的。我们可以假设这串数字为 abcdTefg，那么T &gt; e（此时abcd都是小于 T 的），假设我们不删除 T，删除的是 T 之前的数，那么比如删除 b 好了 acdTefg 和 abcdefg，这明显是前者大。假设我们删除 T 之后的数，T 后面的数可能比 T 大，比如删除 f 好了，那么 abcdefg 和 abcdTeg 明显后者大，所以删除 T 之后这个数此时是最小的。然后贪心算法开始了，既然我删除一位之后的数是最小，那么这么从头再删除一位，那么还是最小。当这样删除 k 位之后，肯定是最小的。<br><br>   至于为什么能想到的，我暂时想到的是要想把数变得最小，那么肯定是要删除靠近最高位最大的数，假如画成函数图像的话就是将遇到的第一个局部最大值删除。那么怎么选择这个局部最大值呢，两两比较下，如果高位的数比低位的数小则表示后头可能还会有数会更大也就是函数可能还会上升，但是当遇到高位的数比低位的数大，那么就表示这个高位的数是目前最大的了，也就是局部最大值了。想想你怎么找一个二维图像的局部最大值，就是后者函数点比当前函数点大那我则继续移动，如果后者函数点比当前函数点小，那么这个值就是了。<br><br>2. 为什么使用短作业优先算法。其实你假设 1、2、3 三个进程的时间为 t1、t2、t3，那么假设进程 1、2、3 依次运行，那么进程所有的等待时间应该是 0 + t1 + t1 + t2，平均等待时间是 2&#47;3*t1 +1&#47;3 t2，想要这个时间最小，显然 t2 和 t1 中 t1 要小一点，这样等待时间才最小。也就相当于选择最小的那个进程先运行。<br><br>动态规划和贪心算法的区别在于：<br><br>1. 贪心算法相当于只有一条路，比如我必须要删除 k 个数，并且每次只删除一个数，那么从删除 0 个数到删除 k 个数，我们只能一个个删，那么只有一条路（别说折线巴拉巴拉的），对 n 个进程也是类似的。那么我们必要经过这 k 次，只要每次取最优，最后肯定是最优。这就是贪心！<br>2. 动态规划，相当于有多条路，从起点到终点有多条路。比如老师自己课程中提到的那个图。假如将老师这个图中从起点到终点经过的点的个数进行统一，都必须经过同样数量的点。那么其实这个问题就相当于变成了贪心算法（变成同样数量的点之后，路只有一条），我每次选择路径最短的，最后肯定是路径最短的。","like_count":0},{"had_liked":false,"id":239682,"user_name":"渊จุ๊บ","can_delete":false,"product_type":"c1","uid":1530295,"ip_address":"","ucode":"E3A2C1E89EB576","user_header":"https://static001.geekbang.org/account/avatar/00/17/59/b7/9db9c657.jpg","comment_is_top":false,"comment_ctime":1596615054,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596615054","product_id":100017301,"comment_content":"golang语言<br>题1根据比较高位与次高位数字大小滑动索引来计算，以切片做每位数字存储，时间复杂度在O(n)~O(k^2)之间<br>func gaTest01(a, k int) int {<br>\tif a &lt; 0 {<br>\t\treturn -1<br>\t}<br>\ts := make([]int, 0)<br>\t&#47;&#47; 根据数字位数n做时间复杂度O(n)，额外指针切片空间复杂度O(n)<br>\tfor a &gt; 0 {<br>\t\ts = append(s, a%10)<br>\t\ta = a &#47; 10<br>\t}<br>\tif k &gt;= len(s) {<br>\t\treturn -1<br>\t}<br>\t&#47;&#47; k最大为n-1，最坏情况2k+2(k-1)+...+2=(2k+2)k&#47;2次，最坏时间复杂度为O(k^2)；最好情况为k次，最好时间复杂度为O(k)<br>\tfor i := 0; i &lt; k; i++ {<br>\t\ttmp := 0<br>\t\t&#47;&#47; n-i<br>\t\tfor len(s)-tmp-2 &gt;= 0 &amp;&amp; s[len(s)-tmp-1] &lt;= s[len(s)-tmp-2] {<br>\t\t\ttmp++<br>\t\t}<br>\t\t&#47;&#47; n-i<br>\t\tif tmp &gt; 0 {<br>\t\t\ts = append(s[:len(s)-tmp-1], s[len(s)-tmp:]...)<br>\t\t} else {<br>\t\t\ts = s[:len(s)-1]<br>\t\t}<br>\t}<br>\tx := 1<br>\ty := 0<br>\tfor _, i := range s {<br>\t\ty = y + i*x<br>\t\tx*=10<br>\t}<br>\treturn y<br>}<br><br>还在思考有没有降低时间复杂度的算法<br><br>题二，优先处理服务时间较低的人，举例，分别3人，所需时间1,2,3小时<br>1）优先处理时间低<br>3个人总共所需耗时为1+(1+2)+(1+2+3)=10小时<br>2）优先处理时间高<br>总共耗时为3+(3+2)+(3+2+1)=14小时","like_count":0},{"had_liked":false,"id":238783,"user_name":"Merry","can_delete":false,"product_type":"c1","uid":1024036,"ip_address":"","ucode":"E2A114E10814BA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/24/68c679c8.jpg","comment_is_top":false,"comment_ctime":1596294156,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596294156","product_id":100017301,"comment_content":"1.利用类似于快排的算法对a进行划分，若一次划分后的数的位置等于n-k+1，则将此位置及以后的数据删除即可；否则若大于，则在右区间查找，若小于，则在左区间查找","like_count":0},{"had_liked":false,"id":238490,"user_name":"Nullptr","can_delete":false,"product_type":"c1","uid":1911665,"ip_address":"","ucode":"8EC72438680F8D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLpCwvSDHKuwJklN3gosIbJh0AX97ULSXw4cgopjU28eQHR7DxcCWDFSBv7ZQJElBuCFu58xoWaTg/132","comment_is_top":false,"comment_ctime":1596182819,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1596182819","product_id":100017301,"comment_content":"对于第一题我认为维持一个大顶堆然后每次移除根顶元素，然后移除k次","like_count":0},{"had_liked":false,"id":232603,"user_name":"Kennedy","can_delete":false,"product_type":"c1","uid":1049022,"ip_address":"","ucode":"C50627007E5ED0","user_header":"https://static001.geekbang.org/account/avatar/00/10/01/be/be358cab.jpg","comment_is_top":false,"comment_ctime":1594046854,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1594046854","product_id":100017301,"comment_content":"<br>&#47;**<br>背包<br>*&#47;<br>type Bean struct {<br>\tW int&#47;&#47;重量<br>\tV int &#47;&#47;价值<br>\tD int &#47;&#47;单价<br>}<br>&#47;**<br>beas 多种豆子<br>maxWeight 最大重量<br> *&#47;<br>func backpack(beans map[string]Bean,maxWeight int) map[string]int {<br>\t&#47;&#47;放入单价最大的，可以在固定容量情况下，包内物品价值最大<br>\tchooseBeans := make(map[string]int)&#47;&#47;放入豆子，key是豆子名称，value是重量<br>\t&#47;&#47;从没有放入背包的豆子中取单价最大的,返回值是豆子名称,可放入重量<br>\tgetBean := func(w int)(string,int) {<br>\t\tmaxD := 0;<br>\t\tname := &quot;&quot;<br>\t\tfor k,v := range beans{<br>\t\t\tif _,ok := chooseBeans[k];ok{<br>\t\t\t\tcontinue<br>\t\t\t}<br>\t\t\tif v.D &gt; maxD{<br>\t\t\t\tname = k<br>\t\t\t\tmaxD = v.D<br>\t\t\t}<br>\t\t}<br><br>\t\t&#47;&#47;当前豆子不能全部取出<br>\t\tif beans[name].W &gt; w {<br>\t\t\treturn name,w<br>\t\t}<br>\t\treturn name,beans[name].W<br>\t}<br>\tcurrentWeight := 0<br>\t&#47;&#47;基于for循环实现<br>\tfor ;;{<br>\t\tname,weight := getBean(maxWeight-currentWeight)<br>\t\tfmt.Println(name)<br>\t\tcurrentWeight = currentWeight + weight<br>\t\tif currentWeight == maxWeight{<br>\t\t\tchooseBeans[name] = weight<br>\t\t\tbreak<br>\t\t}<br>\t\tchooseBeans[name] = weight<br>\t}<br>\treturn chooseBeans<br>}<br><br>&#47;**<br>区间覆盖<br> *&#47;<br>type Extend struct {<br>\tMin int<br>\tMax int<br>}<br>&#47;**<br>extends := []Extend{<br>\t{Min: 6,Max: 8},<br>\t{Min: 2,Max: 4},<br>\t{Min: 3,Max: 5},<br>\t{Min: 1,Max: 5},<br>\t{Min: 5,Max: 9},<br>\t{Min: 8,Max: 10},<br>}<br> *&#47;<br>func findNoMeetExtend(extends []Extend) []Extend{<br>\t&#47;&#47;对extends按照区间的起始值，小到大排序。加入区间比较少，排序选择冒泡,<br>\tfor i:=0;i&lt;len(extends);i++{<br>\t\tsorted := true<br>\t\tfor j:=0;j&lt;len(extends)-i-1;j++{<br>\t\t\tif extends[j].Min &gt; extends[j+1].Min{<br>\t\t\t\textends[j] ,extends[j+1] = extends[j+1],extends[j]<br>\t\t\t\tsorted = false<br>\t\t\t}<br>\t\t}<br>\t\tif sorted {<br>\t\t\tbreak<br>\t\t}<br>\t}<br>\tchooseExtends := []Extend{Extend{Min: 0,Max: 0}}&#47;&#47;已取区间，第一个值默认值都是0,作为哨兵<br>\t&#47;&#47;找出最小值大于已选区间，切区间最短的一个<br>\tfor ;;{<br>\t\tminDiff := math.MaxInt64 &#47;&#47;最小区间<br>\t\tvar chooseExtend Extend<br>\t\tfor i:=0;i&lt;len(extends);i++{<br>\t\t\tif extends[i].Min&gt;=chooseExtends[len(chooseExtends)-1].Max &amp;&amp; (extends[i].Max - extends[i].Min) &lt; minDiff{<br>\t\t\t\tchooseExtend = extends[i]<br>\t\t\t\tminDiff = extends[i].Max - extends[i].Min<br>\t\t\t}<br>\t\t}<br>\t\tif minDiff == math.MaxInt64{<br>\t\t\tbreak<br>\t\t}<br>\t\tchooseExtends = append(chooseExtends,chooseExtend)<br>\t}<br>\treturn chooseExtends[1:] &#47;&#47;去掉哨兵<br>}","like_count":0},{"had_liked":false,"id":232500,"user_name":"Mike Zheng","can_delete":false,"product_type":"c1","uid":2039829,"ip_address":"","ucode":"D7F062DDE2A93A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Ccdlzibsv0umJB4QeX0K6JBAas41F3Xobib8rudwic6vNgNYVa4WUdhU9vMKfKRuU3P0u3V0flrn2tlOrDdlCBFmQ/132","comment_is_top":false,"comment_ctime":1594020561,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594020561","product_id":100017301,"comment_content":"1、分糖果使用贪心算法无法获得最优解，反例（随便举的例子）：糖果大小 [5, 6, 10, 13, 20]，孩子需求 [2, 5, 11, 22, 33]。<br>2、找零钱问题如果总价为 120，纸币面额改为 [1, 2, 5, 10, 50, 60, 100]，那么最优解为 2×60，非 100+10×2。<br>似乎贪心算法求最优解对「可选择的数据」有要求？","like_count":0},{"had_liked":false,"id":229815,"user_name":"亢（知行合一的路上）","can_delete":false,"product_type":"c1","uid":1347013,"ip_address":"","ucode":"958AF7C96EB9E8","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/c5/898b13b4.jpg","comment_is_top":false,"comment_ctime":1593154737,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593154737","product_id":100017301,"comment_content":"贪心算法感觉是解决最重要的问题，然后是次要的问题😄","like_count":0},{"had_liked":false,"id":228707,"user_name":"o0oi1i","can_delete":false,"product_type":"c1","uid":1132312,"ip_address":"","ucode":"D1F6AD4AAEAFBE","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/18/293cd24d.jpg","comment_is_top":false,"comment_ctime":1592790775,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592790775","product_id":100017301,"comment_content":"打卡37","like_count":0},{"had_liked":false,"id":228483,"user_name":"西部哥哥","can_delete":false,"product_type":"c1","uid":1731953,"ip_address":"","ucode":"90969C2F879EC1","user_header":"https://static001.geekbang.org/account/avatar/00/1a/6d/71/2cccc33c.jpg","comment_is_top":false,"comment_ctime":1592708329,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1592708329","product_id":100017301,"comment_content":"1.需要移除的数字K，首先得在非负整数a中前K+1个数字中找出最小的一个，判断最小的数字所在的位置，如果是K+1,那么直接将前K个数字移除，留下的数字组合最小；如果位置不在K+1，那就是在前K个里面，最小的这个数字一定要作为留下数字的首个数字才能保证留下数字的最小，那么将所在最小的位置前面的数字全部移除，移除个数是m<br>按照上面的办法递归找第二个最小数字，递归公式是K=K-m，最小数字之后的数字赋值给a，直到移除的数字=K<br>2.第二个问题设每个人服务时间为a[i]，每一个人等待的时间都是它前面所有人的服务时间之和，很明显所有人的等待时间总和为a[1]+(a[1]+a[2])+(a[1]+a[2]+a[3])+.....+(a[1]+a[2]+a[3]+....+a[n])，将所有人服务时间按从小到大排序即可，总等待时间最短","like_count":0},{"had_liked":false,"id":227227,"user_name":"Sudouble","can_delete":false,"product_type":"c1","uid":1365574,"ip_address":"","ucode":"B369B09DAF8D20","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/46/5eb5261b.jpg","comment_is_top":false,"comment_ctime":1592318571,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592318571","product_id":100017301,"comment_content":"1. 先选最高位，从前k个数字中选，假设选到了第a个；再选次高位，从a之后k之前选，以此类推。<br><br>2. 最短任务优先——操作系统调度算法","like_count":0},{"had_liked":false,"id":226393,"user_name":"Geek_69cfd7","can_delete":false,"product_type":"c1","uid":2007777,"ip_address":"","ucode":"BFC4B586FA65F7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/orTaVwTib3ribTl5wibBQPniclzNVJMXCDw4ic4P2Q3A6MBEyuqg5AY46o4SPmIKm8vgIqnUzzqbEhIfQRQBtY7q6JQ/132","comment_is_top":false,"comment_ctime":1592061818,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1592061818","product_id":100017301,"comment_content":"霍夫曼编码看起还可以从大顶堆来求","like_count":0},{"had_liked":false,"id":225666,"user_name":"TheStarBoys","can_delete":false,"product_type":"c1","uid":2009311,"ip_address":"","ucode":"9A6D70482F9212","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/SiciaNKibn60SjA50TsTEtO09DoRA57UozylHmKckZXkJmNiaShSC0BIP6TdZC6cAphuEzmuxMHWwvpYN8P7kKb8eA/132","comment_is_top":false,"comment_ctime":1591809492,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1591809492","product_id":100017301,"comment_content":"今天的思考题做了一晚上，我人傻了，第一题比较简单。回溯和贪心都可以做。第二题，赫夫曼编码的实现是真的蓝瘦，不过收获颇丰，完善了我的代码库","like_count":0},{"had_liked":false,"id":224830,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1591554255,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591554255","product_id":100017301,"comment_content":"争哥，Huffman 编码中的 a 节点应该在 p 节点的左边呢，因为a(450)比 550 要小啦。<br><br>另外，对于实现 Huffman 编码是不是需要基于小顶堆来实现呢？","like_count":0},{"had_liked":false,"id":224669,"user_name":"曙光","can_delete":false,"product_type":"c1","uid":1476450,"ip_address":"","ucode":"04D65BF7F19845","user_header":"https://static001.geekbang.org/account/avatar/00/16/87/62/f99b5b05.jpg","comment_is_top":false,"comment_ctime":1591501705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591501705","product_id":100017301,"comment_content":"感觉实现一个霍夫曼编码算法，1 分词算法，扫描完一篇文章，能够合理分词，如果词分的过细，如01二进制，就退化为二进制编码了；2 需要使用多模式串匹配算法，用于解码；3 顺序解码，或者有头标记，实现多条链的顺序解码；","like_count":0},{"had_liked":false,"id":223909,"user_name":"风，大风","can_delete":false,"product_type":"c1","uid":1811611,"ip_address":"","ucode":"1A0F4D461BBC77","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/9b/0967f397.jpg","comment_is_top":false,"comment_ctime":1591231831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591231831","product_id":100017301,"comment_content":"1.每次移除最大的数字就可以了。<br>","like_count":0},{"had_liked":false,"id":223710,"user_name":"Run","can_delete":false,"product_type":"c1","uid":1371941,"ip_address":"","ucode":"6738D2F36ACFF6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLMDBq7lqg9ZasC4f21R0axKJRVCBImPKlQF8yOicLLXIsNgsZxsVyN1mbvFOL6eVPluTNgJofwZeA/132","comment_is_top":false,"comment_ctime":1591162650,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591162650","product_id":100017301,"comment_content":"毕业三年了,感觉比学校教的多","like_count":0},{"had_liked":false,"id":223551,"user_name":"唯心主义蠢货🍁","can_delete":false,"product_type":"c1","uid":1941034,"ip_address":"","ucode":"836B09E0459953","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9e/2a/f1d8913f.jpg","comment_is_top":false,"comment_ctime":1591113070,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591113070","product_id":100017301,"comment_content":"第二题可以抽象为 for(let i = 0; i &lt; n; i++) sum += cur[i] * ( n - i - 1) <br>因为每次(n-i-1)都是固定的，所以sum的大小至于cur[i]有关，所以当i小的时候需要尽量让cur[i]小，因此从时间最短的开始服务","like_count":0},{"had_liked":false,"id":222856,"user_name":"刘易之","can_delete":false,"product_type":"c1","uid":1909024,"ip_address":"","ucode":"1CDC3E98B92CE3","user_header":"https://static001.geekbang.org/account/avatar/00/1d/21/20/d7f5bb18.jpg","comment_is_top":false,"comment_ctime":1590931429,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590931429","product_id":100017301,"comment_content":"1.对a中所有的数字进行倒叙排序,按照先后顺序进行 删除K个数字<br>2.按照需服务的时长进行顺序排序,然后依次进行服务","like_count":0},{"had_liked":false,"id":222678,"user_name":"拉普达","can_delete":false,"product_type":"c1","uid":1930686,"ip_address":"","ucode":"0E524C0D99B2A0","user_header":"https://static001.geekbang.org/account/avatar/00/1d/75/be/6f3ab95e.jpg","comment_is_top":false,"comment_ctime":1590891555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1590891555","product_id":100017301,"comment_content":"1.每次选择最大的数去除。<br>2.短作业优先。","like_count":0},{"had_liked":false,"id":220392,"user_name":"李孟","can_delete":false,"product_type":"c1","uid":1006768,"ip_address":"","ucode":"AD2349CB12F130","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5c/b0/77e5f8c8.jpg","comment_is_top":false,"comment_ctime":1590233297,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1590233297","product_id":100017301,"comment_content":"区间调度<br>public  void interval(){<br>         int tl=10;&#47;&#47;整个区间长度<br>         int n = 6; &#47;&#47;区间节点<br>         Job[] jobs=new Job[6];<br>         jobs[0] = new Job(6,8);<br>         jobs[1] = new Job(2,4);<br>         jobs[2] = new Job(3,5);<br>         jobs[3] = new Job(1,5);<br>         jobs[4] = new Job(5,9);<br>         jobs[5] = new Job(8,10);<br><br>         Arrays.sort(jobs);<br>         int start =1;<br>         int end = 1;&#47;&#47;要覆盖的目标点，end覆盖该点的所有区间中右端点最右<br>         int ans = 1;<br>         for (int i = 0; i &lt; n; i++) {<br>            int s = jobs[i].s;<br>            int t = jobs[i].t;<br>            if(i==0 &amp;&amp; s&gt;1) break;<br>            <br>            if(s &lt;= start){<br>                end = Math.max(t,end);<br>            }else{<br>                start = end +1;<br>                if(s &lt;= start){<br>                    end = Math.max(t,end);<br>                }else{<br>                    break;<br>                }<br>            }<br>            if(end &gt; tl) break;<br>            else System.out.println(jobs[i].toString());<br>         }<br>     }<br><br>     private class Job implements Comparable&lt;Job&gt;{<br>        int s;<br>        int t;<br><br>         public Job(int s, int t) {<br>             this.s = s;<br>             this.t = t;<br>         }<br><br>         &#47;**<br>          * 按照区间起点排序<br>          * @param o<br>          * @return<br>          *&#47;<br>         @Override<br>         public int compareTo(Job o) {<br>             int x = this.s - o.s;<br>             if(x == 0){<br>                 return this.t - o.t;<br>             }else{<br>                 return x;<br>             }<br>         }<br><br>         @Override<br>         public String toString() {<br>             return &quot;Job{&quot; +<br>                     &quot;s=&quot; + s +<br>                     &quot;, t=&quot; + t +<br>                     &#39;}&#39;;<br>         }<br>     }","like_count":0},{"had_liked":false,"id":219414,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1590024022,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"1590024022","product_id":100017301,"comment_content":"对于一组数据，希望在满足限制值的情况下，期望值最大或者最小，那么就可以考虑贪心算法。<br><br>如果前面的选择会影响后面的选择，那么就可能导致贪心算法不工作。<br><br>在区间覆盖的例子上，可以选 [2,4]、[6,8]、[8,10]，也可以选  [3,5]、[6,8]、[8,10]，甚至也可以选  [1,5]、[6,8]、[8,10]，虽然都是三个，但显然选择不太一样。<br><br>很早以前学习哈夫曼编码的时候就有点好奇，如果左子树是 1 而右字数是 0 呢？似乎也不影响。不过这样的话，a 用“0”来表示，似乎有点悖于常理。<br><br>对于课后思考题：<br><br>非负整数中移除 k 个数字，好像比较容易想到的是移除最大的那个数字，而且是最左边的那个。<br><br>n 个人服务时间最短，似乎应该是所需服务时间短的先服务？仔细想想，可能和窗口数目有关，如果只有一个窗口，那么就按照服务所需时长，短的优先；如果是多个窗口呢？<br><br>看到 @cirno 的留言，发现自己的第一题想的简单了，的确应该是比较非负整数中数字的相对大小，然后移除高位大于低位的那个高位。<br><br>以下代码来自于 漫画算法 的作者程序员小灰，其中栈的使用，非常巧妙。也是 LeetCode.402 Remove K Digits<br><br>&#47;**<br> * 删除整数的 k 个数字，获得删除后的最小值<br>* author: 程序员小灰<br> * @param num 原整数<br> * @param k 删除数量<br> * @return 删除后的得到的数字<br> *&#47;<br>public static String removeKDigits(String num, int k) {<br>    &#47;&#47; 新整数的最终长度 = 原整数长度 - k<br>    int newLength = num.length() - k;<br>    &#47;&#47; 创建一个栈，用于接收所有的数字<br>    char[] stack = new char[num.length()];<br>    int top = 0;<br>    for (int i = 0; i &lt; num.length(); ++i) {<br>        &#47;&#47; 遍历当前数字<br>        char c = num.charAt(i);<br>        &#47;&#47; 当栈顶数字大于遍历到的当前数字<br>        &#47;&#47; 栈顶数字出栈（相当于删除数字）<br>        while (top &gt; 0 &amp;&amp; stack[top - 1] &gt; c &amp;&amp; k &gt; 0) {<br>            top -= 1;<br>            k -= 1;<br>        }<br>        &#47;&#47; 遍历到的当前数字入栈<br>        stack[top++] = c;<br>    }<br>    &#47;&#47; 找到栈中第 1 个非领数字的位置，以此构建新的整数字符串<br>    int offset = 0;<br>    while (offset &lt; newLength &amp;&amp; stack[offset] == &#39;0&#39;) {<br>        offset++;<br>    }<br>    return offset == newLength ? &quot;0&quot; : new String(stack, offset, newLength - offset);<br>}<br><br>从留言里面找到了 LeetCode 322. Coin Change，有时间可以搞一下。另外，在 LeetCode 上打着 Greedy 标签的大概有 80 道题，而且以中高难度为主。","like_count":0},{"had_liked":false,"id":218605,"user_name":"RedDevil","can_delete":false,"product_type":"c1","uid":1131128,"ip_address":"","ucode":"F8F5DC209BB3B9","user_header":"https://static001.geekbang.org/account/avatar/00/11/42/78/7ba89c75.jpg","comment_is_top":false,"comment_ctime":1589842955,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1589842955","product_id":100017301,"comment_content":"老师分糖果问题，如果从最大的糖果开始分，并且挑选最大需求的孩子也是一样的吧？","like_count":0,"discussions":[{"author":{"id":2459923,"avatar":"https://static001.geekbang.org/account/avatar/00/25/89/13/0d3c5008.jpg","nickname":"最好不过","note":"","ucode":"C7DBCD08402DF8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380656,"discussion_content":"也可以从大的开始进行分配，LeetCode455\n\nclass Solution {\n    public int findContentChildren(int[] g, int[] s) {\n        if(0==s.length) return 0;\n        Arrays.sort(g);\n        Arrays.sort(s);\n        int gIndex=g.length-1,sIndex=s.length-1;\n        int result=0;\n        for(int i=sIndex;i>=0&amp;&amp; gIndex>=0;i--){\n            while(gIndex>=0 &amp;&amp; s[i]<g[gIndex] ) gIndex--;\n            if(gIndex>=0){\n                result+=1;\n            }\n            // 分配完一个孩子之后需要减一，移动到下一个孩子进行分配\n            gIndex--;\n        }\n        return result;\n    }\n}\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624617986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217812,"user_name":"mqray","can_delete":false,"product_type":"c1","uid":1336634,"ip_address":"","ucode":"15664507AD7033","user_header":"https://static001.geekbang.org/account/avatar/00/14/65/3a/bc801fb2.jpg","comment_is_top":false,"comment_ctime":1589618152,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589618152","product_id":100017301,"comment_content":"第一个问题：删除k个元素：总共有k次外层循环，每一次都要删除一位数，内循环中，对当前的整个数字，从前往后遍历，如果高位比低位大，则直接删除高位数字；如果高位比低位小，continue。如果能遍历整个数字，就删除最末尾的那一位（因为此时该数是逆序对为0）；如果出现类似567421这样的数，continue会使得会删除7这个数字，因为74高位比低位大。<br>第二题，是操作系统里的概念，为了使整体的等待时间最短，做法是，最短时间优先。可以这样想，假设某时刻A，同时有一批任务，其处理时间分别是1，100，如果先处理100，那么等待时间会是100，而如果按照最短时间优先，等待时间是1。这样应该好理解一些","like_count":0},{"had_liked":false,"id":217251,"user_name":"Geek_ac7784","can_delete":false,"product_type":"c1","uid":1981613,"ip_address":"","ucode":"62F0E5E6D6F4BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/8Dj4ugujXwY24G8pcpgDFGiciarXetG3ItQ4M9mSQMLyRdRRXEXXJVfib48mGUQAu87QcvImwyJIVJlEFeEguV44w/132","comment_is_top":false,"comment_ctime":1589449179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589449179","product_id":100017301,"comment_content":"学习笔记:<br>贪心算法是个思想，通常用来指导设计基础算法。<br>学习贪心算法的方法时多练，最难的是讲问题抽象成贪心模型。<br>练习<br>1. 背包问题<br>2. 分糖果问题(有面试给包装成打怪兽问题)<br>3. 区间覆盖问题<br>4. 哈夫曼编码问题(优先队列)<br>思考题：<br>1. 移除k个数字，使得数字变得最小<br>移除掉k个数字，剩下的数字位数是相同的。所以只要每次移除最大的数字就行了。<br>但还有中可能，使剩下的数字，前面是0.这样便能少一位。然后就不会分析了。<br>看答案：遍历数字，如果数字比下一位大，则移除，如果小则向后遍历。<br>怎么想的不知道，记住吧。<br>4556847594546移除5位-》455647594546-》45547594546-》4547594546-》4447594546-》444<br>594546。这种还有个bug，如果从小到大排列则没有删除。解决方法：最后一位放一个哨兵0，即可。<br>2. 安排n个人排队，使n个人总等待时间最小。<br>第i个人的等待时间是前几个人的服务时间之和。所以我们只要让所有人按服务时间最小排队就行了。","like_count":0},{"had_liked":false,"id":216080,"user_name":"isobelar","can_delete":false,"product_type":"c1","uid":1318394,"ip_address":"","ucode":"58CE4061984B43","user_header":"https://static001.geekbang.org/account/avatar/00/14/1d/fa/b81c89c3.jpg","comment_is_top":false,"comment_ctime":1589184715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589184715","product_id":100017301,"comment_content":"看完感觉作者讲解的Huffman编码算法并未将贪心算法思想运用到极致，还有很大的优化空间。编码算法按照字符出现频率大小分别设计为前缀不重复的二进制编码：01, 001, 0001...随着字符个数的增加，编码长度按照O(n)递增，这种编码方式压缩率其实并不高。如果按照Huffman树的方式编码，从Huffman树根到叶子结点，左边的节点编码字符+&#39;0&#39;， 右边节点编码字符+&#39;1&#39;，这种编码方式能够在保证任意字符在编码前缀不重复的情况下，能节省更多的空间，和增加压缩率。例如， 11, 00, 101, 011, 010, 1001, 1000.","like_count":0},{"had_liked":false,"id":216068,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1589180837,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589180837","product_id":100017301,"comment_content":"第一题，在移除同等贡献量的限制值（k=1）的情况下，要对期望值（剩余数字最小）贡献最大，那就需要每次从高位数字最大值开始移除","like_count":0},{"had_liked":false,"id":216014,"user_name":"Allan","can_delete":false,"product_type":"c1","uid":1310388,"ip_address":"","ucode":"8DA4DBECC2C45C","user_header":"https://static001.geekbang.org/account/avatar/00/13/fe/b4/295338e7.jpg","comment_is_top":false,"comment_ctime":1589167954,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1589167954","product_id":100017301,"comment_content":"60天攻克算法打卡行动第29天<br><br>学习内容 :贪心算法：如何用贪心算法实现Huffman压缩编码？<br><br>贪心算法是一种经典的算法思想。掌握了它的基础概念和应用，就能利用贪心算法来实现数据压缩编码，有效节省数据存储空间。<br><br>1.如何理解贪心算法？<br>一、限制值和期望值<br>二、价值贡献最大的<br>三、实际情况，贪心算法解决问题的思路，并不总能给出最优解<br><br>2.贪心算法实战分析<br><br>一、粉糖果<br>每次挑选需求最小的孩子，给他最小的糖果<br>二、钱币找零<br>不建议花太多时间<br>三、区间覆盖<br>比如：任务调度、教师排课等问题<br>文章中的图看的很迷糊，为什么说的是不重合，但是【2，4】之后又选择【3，5】岂不是重合覆盖了吗？难道重合的意思是左右端点都一直就是重合了？<br><br>解题开篇<br>说实话讲的我很迷糊，之前看别的课程上讲哈夫曼编码很明白（基本都是考研的视频，讲的很容易理解），但是看这个文章看的不清楚。老师方式的不同对于不同水平的人接受不一样吧。<br><br>课后思考<br>1、排序后，最左边min，最右边max。那么移除最后边剩下的就是最小的<br>排序服务时间长短，然后覆盖。","like_count":0},{"had_liked":false,"id":214567,"user_name":"鱼丸粗面","can_delete":false,"product_type":"c1","uid":1785016,"ip_address":"","ucode":"B2F3F75B0D1422","user_header":"https://static001.geekbang.org/account/avatar/00/1b/3c/b8/9489387c.jpg","comment_is_top":false,"comment_ctime":1588766467,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588766467","product_id":100017301,"comment_content":"第一个问题可以用堆或快排的分区去掉最大的k个数","like_count":0},{"had_liked":false,"id":213890,"user_name":"Movan","can_delete":false,"product_type":"c1","uid":1514292,"ip_address":"","ucode":"D5A2E9E2E7A439","user_header":"https://static001.geekbang.org/account/avatar/00/17/1b/34/4d8c5694.jpg","comment_is_top":false,"comment_ctime":1588585203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588585203","product_id":100017301,"comment_content":"本节课关键词：期望值，贡献值","like_count":0},{"had_liked":false,"id":212824,"user_name":"leahchuan","can_delete":false,"product_type":"c1","uid":1239760,"ip_address":"","ucode":"585294EF903227","user_header":"https://static001.geekbang.org/account/avatar/00/12/ea/d0/3ed2dd26.jpg","comment_is_top":false,"comment_ctime":1588216802,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1588216802","product_id":100017301,"comment_content":"感觉霍夫曼编码在各个字符出现频率比较平均的时候，还不如用3bit直接表示一个字符省空间","like_count":0},{"had_liked":false,"id":212322,"user_name":"简单猫","can_delete":false,"product_type":"c1","uid":1866485,"ip_address":"","ucode":"EA027D4C344E25","user_header":"https://static001.geekbang.org/account/avatar/00/1c/7a/f5/54a5084b.jpg","comment_is_top":false,"comment_ctime":1588086117,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1588086117","product_id":100017301,"comment_content":"第一题。首先要明白，2位数字，59，如果要删除一位数，无论删除5或9 剩下的就是个位数，5和9比较自然最小的个位数是5，删除的是2个数中最大的。同理 351，3百位数，5十位数，1个位数，最高两位删除一位，这两位无论删除那一位，剩下的数字都是十位数，删除这两个数最大的，剩下的自然是最小的十位数。  <br>  一个非负数129687593451，从右(也就是最高位数与次高位比较)移除最大的数字 也就是2，12687593451，然后在剩下的数字从高位到低位中移除最大也就是6，1287593451。    127593451，12593451，1293451。<br><br>第二题  第一个人要服务时间t,后面所有等待时间(n-1)*t，第二个人 时间t2，后面所有人等待时间(n-2)*t2。等待人数是递减的，服务时间递减 ，总等待时间最短。说以有限处理需要服务时间短的，最优<br>","like_count":0},{"had_liked":false,"id":209358,"user_name":"一个工匠","can_delete":false,"product_type":"c1","uid":1038449,"ip_address":"","ucode":"2168BA6F926074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d8/71/d6f79534.jpg","comment_is_top":false,"comment_ctime":1587540649,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1587540649","product_id":100017301,"comment_content":"问题1的正确答案是cirno留言里面的最高点赞的那位。","like_count":0},{"had_liked":false,"id":207053,"user_name":"梅端","can_delete":false,"product_type":"c1","uid":1525335,"ip_address":"","ucode":"FEC08731457770","user_header":"https://static001.geekbang.org/account/avatar/00/17/46/57/fe38a6db.jpg","comment_is_top":false,"comment_ctime":1587000411,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1587000411","product_id":100017301,"comment_content":"多多练习才是王道","like_count":0},{"had_liked":false,"id":203179,"user_name":"落","can_delete":false,"product_type":"c1","uid":1240710,"ip_address":"","ucode":"EA306D36D818BC","user_header":"https://static001.geekbang.org/account/avatar/00/12/ee/86/9f47c0dc.jpg","comment_is_top":false,"comment_ctime":1586150630,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1586150630","product_id":100017301,"comment_content":"问题１：<br>假设整数a有n位，移除k位（k&lt;n）,剩余数b（n-k位数）。<br>则b应从高位到低位找，有先找小的数。<br><br>假设a为７４８６５４（n位），移除３（k位）个数，得到最小数b（n-k位数）。<br>b从高到低位赋值，<br>b的第一位数，即在７４８６５４中的７～６之间找最小的【高位~(低k-1位)之间找最小】,最小为４。数字b最高位为４。数字a剩余８６５４．<br>b的第二位数，即在８６５４中的８～５之间找最小的【高位~(低k-2位)之间找最小】,最小为6位置定位n2。数字b变为最高二位４５。数字a剩余４．<br>数字b为４５４","like_count":0},{"had_liked":false,"id":201591,"user_name":"蜗牛","can_delete":false,"product_type":"c1","uid":1086220,"ip_address":"","ucode":"01CC18F12E556D","user_header":"https://static001.geekbang.org/account/avatar/00/10/93/0c/0a6a0d5e.jpg","comment_is_top":false,"comment_ctime":1585808981,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585808981","product_id":100017301,"comment_content":"1. 从高位往地位遍历，如果当前位&gt;=下一位就不删除，否则就删除当前位<br>2. 服务长度排升序，服务需要时间最小的","like_count":0},{"had_liked":false,"id":196949,"user_name":"kittyfall","can_delete":false,"product_type":"c1","uid":1358896,"ip_address":"","ucode":"85227856436E39","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIXM2DPQuHichARCmVdbb0qPTTFvnlGOGDvLghGahTM2uHUaAlGJTmQHibOAOt66UuoDicvwVo3PfdNg/132","comment_is_top":false,"comment_ctime":1585324808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585324808","product_id":100017301,"comment_content":"对于分糖果问题，每个孩子只能给一个糖果么？可以两个凑在一起满足孩子么？","like_count":0},{"had_liked":false,"id":196598,"user_name":"小谢","can_delete":false,"product_type":"c1","uid":1879476,"ip_address":"","ucode":"82D54A61D2FDB9","user_header":"https://static001.geekbang.org/account/avatar/00/1c/ad/b4/e4dcd4d7.jpg","comment_is_top":false,"comment_ctime":1585296125,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585296125","product_id":100017301,"comment_content":"一开始的思路是删除TopK，看了评论之后发现删除TopK实际上并不是最优，应该采用第一条留言的做法","like_count":0},{"had_liked":false,"id":196105,"user_name":"jianhuang_zou","can_delete":false,"product_type":"c1","uid":1895439,"ip_address":"","ucode":"B43F1D59C67F48","user_header":"https://static001.geekbang.org/account/avatar/00/1c/ec/0f/555aa881.jpg","comment_is_top":false,"comment_ctime":1585235846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585235846","product_id":100017301,"comment_content":"其实显示生活中会先把一块钱花出去，然后在花一百块钱。","like_count":0},{"had_liked":false,"id":194062,"user_name":"SkillIP","can_delete":false,"product_type":"c1","uid":1744250,"ip_address":"","ucode":"60EAEB93EC6858","user_header":"https://static001.geekbang.org/account/avatar/00/1a/9d/7a/fb762fea.jpg","comment_is_top":false,"comment_ctime":1585020220,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1585020220","product_id":100017301,"comment_content":"如果把问题变添加一个条件：包必须刚好装满。这就得使用动态规划了吧？","like_count":0},{"had_liked":false,"id":188024,"user_name":"小康","can_delete":false,"product_type":"c1","uid":1129743,"ip_address":"","ucode":"C178094056F8F8","user_header":"https://static001.geekbang.org/account/avatar/00/11/3d/0f/89db40b7.jpg","comment_is_top":false,"comment_ctime":1584314119,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584314119","product_id":100017301,"comment_content":"每天早晨5点多起来刷算法 加油","like_count":0},{"had_liked":false,"id":186308,"user_name":"雷刚","can_delete":false,"product_type":"c1","uid":1655725,"ip_address":"","ucode":"115FE2BE1AAB61","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/pTD8nS0SsORKiaRD3wB0NK9Bpd0wFnPWtYLPfBRBhvZ68iaJErMlM2NNSeEibwQfY7GReILSIYZXfT9o8iaicibcyw3g/132","comment_is_top":false,"comment_ctime":1583823374,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583823374","product_id":100017301,"comment_content":"听了老师的课，再对着教材看一遍就清晰多了","like_count":0},{"had_liked":false,"id":186122,"user_name":"wyf2317","can_delete":false,"product_type":"c1","uid":1236837,"ip_address":"","ucode":"7F3E61A6188B39","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ub4icibeRLzff8Nf6ORsolib9KHtmeu3d4cCCAFd3Xgah3v78WfDYQB7WKq9iaIPXPwHBxw7mkBP9wYxDGMT9m1Rbw/132","comment_is_top":false,"comment_ctime":1583761731,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1583761731","product_id":100017301,"comment_content":"1. 从最大开始删除<br>2. 从耗时最短的开始","like_count":0},{"had_liked":false,"id":185292,"user_name":"D","can_delete":false,"product_type":"c1","uid":1493885,"ip_address":"","ucode":"02D70D1317B1B6","user_header":"https://static001.geekbang.org/account/avatar/00/16/cb/7d/2a65ded5.jpg","comment_is_top":false,"comment_ctime":1583554270,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583554270","product_id":100017301,"comment_content":"老师，压缩时英文字符很多，如何用二进制编码全部表示出来？","like_count":0},{"had_liked":false,"id":185069,"user_name":"1yx","can_delete":false,"product_type":"c1","uid":1547582,"ip_address":"","ucode":"190E387E00C12A","user_header":"https://static001.geekbang.org/account/avatar/00/17/9d/3e/0b9d0cb6.jpg","comment_is_top":false,"comment_ctime":1583477005,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583477005","product_id":100017301,"comment_content":"我对贪心算法的理解就是能用“越…越…”造句的解法，比如课后第一题，越是位高的越先移除；第二题越是解决时间短的越先解决。","like_count":0},{"had_liked":false,"id":184445,"user_name":"融梨","can_delete":false,"product_type":"c1","uid":1033405,"ip_address":"","ucode":"66D0A4054612C6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c4/bd/72180435.jpg","comment_is_top":false,"comment_ctime":1583316492,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583316492","product_id":100017301,"comment_content":"我测试了一下，定了一个钟学习，这篇文章要懂可不止一个钟的事哦。看了四遍的区间覆盖解题思路，没完全懂，看来我还没有理解贪心算法，要回到头部去看。","like_count":0},{"had_liked":false,"id":184338,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1583293179,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1583293179","product_id":100017301,"comment_content":"回答思考题之前 先总结一下贪心算法的内容<br>适用条件 针对一组数据 在有限制情况和期望情况的条件下  求出最大值或者最小值<br>贪心算法的缺陷 因为之前的选择(操作)结果 会影响下一次的选择 所以会出现得出的不是最优解(最大值或者最小值) 举例 求有权图中最短距离，正因为有这种缺陷 所以要多用测试用例测试其正确性<br>思考题 回答如下<br>1. 这个题很符合贪心算法的使用条件<br>    所以一共移除k轮 每一轮都移除一个数字让其成为最小值<br>2. 要让每个人总得等待时间最短  有点类似 分糖果的例子 也是有限制值和期望值<br>    要让总得等待时间最小 那么久得让每一个人的等待时间最少<br>    所以我觉得应该从时间最短的开始服务<br>   ","like_count":0},{"had_liked":false,"id":183130,"user_name":"D","can_delete":false,"product_type":"c1","uid":1493885,"ip_address":"","ucode":"02D70D1317B1B6","user_header":"https://static001.geekbang.org/account/avatar/00/16/cb/7d/2a65ded5.jpg","comment_is_top":false,"comment_ctime":1582957705,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582957705","product_id":100017301,"comment_content":"老师，我是菜鸟，可以把010写进二进制文件吗？写进去的二进制文件二进制内容就是010，怎么写？","like_count":0},{"had_liked":false,"id":179677,"user_name":"兰柯","can_delete":false,"product_type":"c1","uid":1850499,"ip_address":"","ucode":"6D7230B3CE8722","user_header":"https://static001.geekbang.org/account/avatar/00/1c/3c/83/93e7af9e.jpg","comment_is_top":false,"comment_ctime":1582077211,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1582077211","product_id":100017301,"comment_content":"第二问就是操作系统里面的进程调度问题。最短作业优先（SJF）平均等待时间最短。","like_count":0},{"had_liked":false,"id":179029,"user_name":"抱小星","can_delete":false,"product_type":"c1","uid":1504652,"ip_address":"","ucode":"BA7B0DAFDA4AF5","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/8c/82fb5890.jpg","comment_is_top":false,"comment_ctime":1581895234,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1581895234","product_id":100017301,"comment_content":"1.从左到右移除前k大的数字即可<br><br>2.最短的先上","like_count":0},{"had_liked":false,"id":176253,"user_name":"发霉的宅大人","can_delete":false,"product_type":"c1","uid":1738243,"ip_address":"","ucode":"6757E30FE5E48D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/86/03/95004954.jpg","comment_is_top":false,"comment_ctime":1581001978,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1581001978","product_id":100017301,"comment_content":"思考题<br>第一题<br>由最高位开始，与下一位比较，如果高位大则移除。高位移除时候，保持下标&gt;=0时左移一位。<br>如果高位小，则下标右移一位，继续比较。<br>举个例子:3255155,移除4位。<br>下标为0，3比2大，下标为0，移除3后变为255155，下标已经是0，不能左移<br>下标为0，2和5比，2小，右移一位，下标为1，指向5；<br>下标为1，5和5比，继续右移一位，下标为2，指向5；<br>下标位2，5和1比，5大，删除，结果为25155，下标左移为1，指向5；<br>下标为1，5和1比，5大，删除，结果为2155，下标左移为0，指向2；<br>下标为2，2和1比，2大，删除，结果为2155。<br><br>第二题：<br>按时间排序，时间最小的先服务","like_count":0},{"had_liked":false,"id":173118,"user_name":"夜空咏叹调","can_delete":false,"product_type":"c1","uid":1189074,"ip_address":"","ucode":"CC9350BCF218CD","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/d2/a5e272ce.jpg","comment_is_top":false,"comment_ctime":1579426988,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579426988","product_id":100017301,"comment_content":"贪心算法：1、适用于给定限制和期望条件的情形，当在限制值内，期望最大的最优解。<br>2、需要在得到数据之后验证是否适用。<br>3、贪心算法不适用前后选择有连带关系的案例，如计算最短路。<br>贪心算法主要是一种思路，我们需要判断当前场景是否适用于贪心算法，这个是最重要的。","like_count":0},{"had_liked":false,"id":172033,"user_name":"半壶浊酒","can_delete":false,"product_type":"c1","uid":1557453,"ip_address":"","ucode":"28505DE98AA64A","user_header":"https://static001.geekbang.org/account/avatar/00/17/c3/cd/9a1397bd.jpg","comment_is_top":false,"comment_ctime":1579075885,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579075885","product_id":100017301,"comment_content":"第一个问题应该是在非负整数a中删除前k位中最大的数，再重新生成一个新的整数，继续删除前k位中最大的数，以上循环k次。","like_count":0},{"had_liked":false,"id":169380,"user_name":"走","can_delete":false,"product_type":"c1","uid":1116942,"ip_address":"","ucode":"8D032A9BE21179","user_header":"https://static001.geekbang.org/account/avatar/00/11/0b/0e/eb620794.jpg","comment_is_top":false,"comment_ctime":1578323941,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578323941","product_id":100017301,"comment_content":"第一题，可以换个思路，从给定的数中选取m(m=给定的总位数-k)个数,来获得最小的数值。","like_count":0},{"had_liked":false,"id":169217,"user_name":"Three","can_delete":false,"product_type":"c1","uid":1039568,"ip_address":"","ucode":"B42B4763DAB427","user_header":"https://static001.geekbang.org/account/avatar/00/0f/dc/d0/2d53c369.jpg","comment_is_top":false,"comment_ctime":1578295059,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578295059","product_id":100017301,"comment_content":"课后思考第一题思路是有，但是还是没办法和「贪心算法」联系起来","like_count":0},{"had_liked":false,"id":169189,"user_name":"SteveYang","can_delete":false,"product_type":"c1","uid":1754829,"ip_address":"","ucode":"C42BCA4F40A9EF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKCbnOvEatUN4ysE2cl6zJNoAJVXXuQVhicQ1jxh6Z2Towrmmc1I6PndaicuQQ0RyyJPyJQicv4tSib9Q/132","comment_is_top":false,"comment_ctime":1578288939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578288939","product_id":100017301,"comment_content":"1.找出k个最大数字移除。2.服务时间小的先排序按服务时间有小到大排序。","like_count":0},{"had_liked":false,"id":168725,"user_name":"朱坤","can_delete":false,"product_type":"c1","uid":1098637,"ip_address":"","ucode":"65224DA2456EAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/c3/8d/214ad614.jpg","comment_is_top":false,"comment_ctime":1578146491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1578146491","product_id":100017301,"comment_content":"问题1： 先从a的 最高的k+1 位中，找出除0外的最小数字，移出该位数字前的 x 个，保留该位数字，然后假设还可以再移出 k-x位，另 k = k-x, 重复刚才的步骤 直到k=0<br><br>问题2： 按服务时间从小到大排序。","like_count":0},{"had_liked":false,"id":165486,"user_name":"Panda🐟","can_delete":false,"product_type":"c1","uid":1002401,"ip_address":"","ucode":"C6007A3192516A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/a1/c2719a5a.jpg","comment_is_top":false,"comment_ctime":1577243667,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577243667","product_id":100017301,"comment_content":"思考:<br>1. 按顺序0~9依次移除直到移除k个数字<br>2. 按要求被服务时间从短到长排队","like_count":0},{"had_liked":false,"id":165325,"user_name":"逍遥思","can_delete":false,"product_type":"c1","uid":1015512,"ip_address":"","ucode":"340F05C786730F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7e/d8/92a98fb6.jpg","comment_is_top":false,"comment_ctime":1577200550,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577200550","product_id":100017301,"comment_content":"如果是a~p这16个字符，用定长编码只有4位，用霍夫曼编码，从e开始就有5位，最后有很大概率用掉的空间反而更多啊。<br>这是我定性分析的，二刷的时候，我要用代码验证一下","like_count":0},{"had_liked":false,"id":165302,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1577197096,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577197096","product_id":100017301,"comment_content":"1、从高位移除<br>2、从需要被服务最少时间的人开始服务","like_count":0},{"had_liked":false,"id":164987,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1577138238,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577138238","product_id":100017301,"comment_content":"贪心算法是用局部的最优选择去逼近全局最优解，局部选择之后，问题规模变小，然后进入新一轮选择。","like_count":0},{"had_liked":false,"id":164654,"user_name":"梦想的优惠券","can_delete":false,"product_type":"c1","uid":1257418,"ip_address":"","ucode":"D3B44F6C618CA7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/ca/cbce6e94.jpg","comment_is_top":false,"comment_ctime":1577066375,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"1577066375","product_id":100017301,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":163310,"user_name":"失火的夏天","can_delete":false,"product_type":"c1","uid":1241770,"ip_address":"","ucode":"10C6E66EB2A65F","user_header":"https://static001.geekbang.org/account/avatar/00/12/f2/aa/32fc0d54.jpg","comment_is_top":false,"comment_ctime":1576683514,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576683514","product_id":100017301,"comment_content":"单调栈的使用正好也是利用了贪心选择原理","like_count":0},{"had_liked":false,"id":162914,"user_name":"LJK","can_delete":false,"product_type":"c1","uid":1199213,"ip_address":"","ucode":"12B2441099FF1D","user_header":"https://static001.geekbang.org/account/avatar/00/12/4c/6d/c20f2d5a.jpg","comment_is_top":false,"comment_ctime":1576630965,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1576630965","product_id":100017301,"comment_content":"感觉思考题的第二题像操作系统的SJF优化turnaround time","like_count":0},{"had_liked":false,"id":159767,"user_name":"freesocean","can_delete":false,"product_type":"c1","uid":1529210,"ip_address":"","ucode":"CAD4C80CF569D3","user_header":"https://static001.geekbang.org/account/avatar/00/17/55/7a/d44df1d6.jpg","comment_is_top":false,"comment_ctime":1575783521,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575783521","product_id":100017301,"comment_content":"思路题第二题：服务时间长的人，如果最开始被服务，后边的所有人都要等待这个最长的时间，影响范围是最广的，所以应该把耗时长的人放在最后一个，随着人越来越少，对整体的影响就会越来越小。","like_count":0},{"had_liked":false,"id":159437,"user_name":"百里","can_delete":false,"product_type":"c1","uid":1212873,"ip_address":"","ucode":"2CE96129AA7F78","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/c9/9194612b.jpg","comment_is_top":false,"comment_ctime":1575623431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575623431","product_id":100017301,"comment_content":"1. 将整数转为字符数组, 然后循环K次,每一次查找到最小值, 从数组中移除掉, 然后再将数组转换成整数即可<br>golang代码实现: https:&#47;&#47;github.com&#47;yezihack&#47;algo&#47;blob&#47;master&#47;greedy&#47;01.int_get_max.go<br><br>2. 从小到大排序,即可.","like_count":0},{"had_liked":false,"id":157568,"user_name":"建强","can_delete":false,"product_type":"c1","uid":1397126,"ip_address":"","ucode":"62B03D0E0C64EC","user_header":"https://static001.geekbang.org/account/avatar/00/15/51/86/b5fd8dd8.jpg","comment_is_top":false,"comment_ctime":1575196564,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575196564","product_id":100017301,"comment_content":"思考题1：可以把这K个数字按从大到小的顺序依次移出，剩余的数字值就是最小的。<br>思考题2：n个人中，按服务时间从小到大依次进行服务，总的等待时间最短，这好像也是操作系统调度作业的一种算法吧","like_count":0},{"had_liked":false,"id":157161,"user_name":"jackji","can_delete":false,"product_type":"c1","uid":1464086,"ip_address":"","ucode":"4DDD9A286A785B","user_header":"https://static001.geekbang.org/account/avatar/00/16/57/16/eef7c4ac.jpg","comment_is_top":false,"comment_ctime":1575049259,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575049259","product_id":100017301,"comment_content":"哈夫曼树忽略了一个问题，没有计算树的大小。这种编码实际应用效果如何不好说","like_count":0},{"had_liked":false,"id":155219,"user_name":"even","can_delete":false,"product_type":"c1","uid":1249431,"ip_address":"","ucode":"C976CFB2A0EBBF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Cwkic25ndkExxY3HvVjAaYKVzFRicv2X6TE2sjdqTBBmqeh7X8crIQe3SHPichvcayOCqI3PJ88yVuMNlD8VvkE3A/132","comment_is_top":false,"comment_ctime":1574665882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574665882","product_id":100017301,"comment_content":"看了这门课我花了几天研究了下哈夫曼编解码的内容，并用C++用哈夫曼编解码实现文件压缩和解压的功能，有兴趣的同学可以看看，代码在github上：https:&#47;&#47;github.com&#47;evenleo&#47;huffman","like_count":0},{"had_liked":false,"id":153839,"user_name":"苦行僧","can_delete":false,"product_type":"c1","uid":1055334,"ip_address":"","ucode":"726024A9A9CF44","user_header":"https://static001.geekbang.org/account/avatar/00/10/1a/66/2d9db9ed.jpg","comment_is_top":false,"comment_ctime":1574315426,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574315426","product_id":100017301,"comment_content":"所有数据排序, 然后根据排序依次移除","like_count":0},{"had_liked":false,"id":149637,"user_name":"Monica","can_delete":false,"product_type":"c1","uid":1686257,"ip_address":"","ucode":"B09BC6EEBD81BD","user_header":"https://static001.geekbang.org/account/avatar/00/19/ba/f1/b01034e3.jpg","comment_is_top":false,"comment_ctime":1573297831,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573297831","product_id":100017301,"comment_content":"课后思考题2可以看作是霍夫曼编码等价问题，频率高的编码短，那么等待人数多的服务等待时间短，就是由服务时间最短的开始服务。","like_count":0},{"had_liked":false,"id":149247,"user_name":"Hwan","can_delete":false,"product_type":"c1","uid":1205627,"ip_address":"","ucode":"A728C6790511BD","user_header":"https://static001.geekbang.org/account/avatar/00/12/65/7b/66b9befd.jpg","comment_is_top":false,"comment_ctime":1573178477,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573178477","product_id":100017301,"comment_content":"第二个问题大概就是去办事的时候，工作人员说整得快的先办的道理吧😋","like_count":0},{"had_liked":false,"id":146697,"user_name":"徐文锋","can_delete":false,"product_type":"c1","uid":1706966,"ip_address":"","ucode":"CC45BAE23CA065","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaEJO1Savx83xQc5xc8D6adlvhR7mLCe1Cm7jXJPhIpa4pKQo0RGTEuFCaJYkdq2R7RnKiaiaGYicxyD3A/132","comment_is_top":false,"comment_ctime":1572608611,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572608611","product_id":100017301,"comment_content":"1- 建一个大小为K的最小堆，遍历一边遍集合，大于堆顶数据加入堆，遍历完成之后，堆里的K个数据就是需要删除的数据。时间复杂度O（n）<br><br>2- 先按等待时间从小到大排序n个任务，再从最小等待时间任务开始执行。时间复杂度为O(log n)","like_count":0},{"had_liked":false,"id":146466,"user_name":"少刷票圈多读书","can_delete":false,"product_type":"c1","uid":1514673,"ip_address":"","ucode":"98147AEA7B61DE","user_header":"https://static001.geekbang.org/account/avatar/00/17/1c/b1/12edee24.jpg","comment_is_top":false,"comment_ctime":1572529897,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1572529897","product_id":100017301,"comment_content":"练习题1：在一个非负整数a中移除k个数字，使得剩下的数字最小，如何选择移除哪k个数字？<br>思路：在数字位数相同的情况下，数字的大小由最高位决定，最高位相同时由次高位决定。从数字a首位开始，若第一位大于第二位，则删除第一位，否则将当前位数移到第二位；比较第二位和第三位，若第二位大于第三位，则删除第二位。若移动到数字a末尾还没有删除够k个数字，则从数字a末尾删除还没删除的位数。<br>练习题2：假设有 n 个人等待被服务，但是服务窗口只有一个，每个人需要被服务的时间长度是不同的，如何安排被服务的先后顺序，才能让这 n 个人总的等待时间最短？<br>思路：总等待时间=(n-1)*第一个人的服务时间+(n-2)*第二个人的服务时间+...+1*倒数第二个人的服务时间。所以应该按照服务时间从短到长依次进行服务。","like_count":0},{"had_liked":false,"id":140769,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1575571,"ip_address":"","ucode":"7EB511C384BD7B","user_header":"https://static001.geekbang.org/account/avatar/00/18/0a/93/a189ec16.jpg","comment_is_top":false,"comment_ctime":1571045873,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571045873","product_id":100017301,"comment_content":"第一道思考题，我的思路不知道对不对，望老师帮忙看一下<br><br>假设我们要移除n位。<br>取所有位中的最小值，如果有多位相同的最小值，则取最高位的那一个，我们记作m。<br>计算从最高位的数字到m有多少个数字，记作z。<br><br>如果z&gt;n，则移除这z个数字中前n大的数字，结束。<br>如果z&lt;n，则移除全部这z个数字，并且n = n-z然后查找下一个所有位中的最小值，继续这样的操作，一直到n = 0<br>","like_count":0},{"had_liked":false,"id":138315,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1570160689,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570160689","product_id":100017301,"comment_content":"又来刷了一遍~啦啦啦~","like_count":0},{"had_liked":false,"id":135333,"user_name":"Magic","can_delete":false,"product_type":"c1","uid":1272047,"ip_address":"","ucode":"FD9CEDAA419EB0","user_header":"https://static001.geekbang.org/account/avatar/00/13/68/ef/6264ca3d.jpg","comment_is_top":false,"comment_ctime":1569130681,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1569130681","product_id":100017301,"comment_content":"1 比较最高位和次高位，如果最高位大于次高位则移除最高位。否则比较次高位和次次高位，如果次高位大则移除次高位，否则移除次次高位。循环k次<br>2 将个人用餐时间升序排列，依次服务","like_count":0},{"had_liked":false,"id":134291,"user_name":"PanGan","can_delete":false,"product_type":"c1","uid":1507895,"ip_address":"","ucode":"15C86E647EB69E","user_header":"https://static001.geekbang.org/account/avatar/00/17/02/37/aff3bff0.jpg","comment_is_top":false,"comment_ctime":1568796422,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568796422","product_id":100017301,"comment_content":"Leetcode 435 (https:&#47;&#47;leetcode-cn.com&#47;problems&#47;non-overlapping-intervals) 无重叠区间<br>将所有区间按右边界非递减排序，然后依次选取区间，满足当前选取区间的左边界不小于前一区间的右边界即可。<br><br>```python<br>class Solution:<br>    def eraseOverlapIntervals(self, intervals: List[List[int]]) -&gt; int:<br>        if not intervals:<br>            return 0<br>        intervals = sorted(intervals, key=lambda x: x[1])<br>        start, end = intervals[0]<br>        pick = 1<br>        for a, b in intervals[1:]:<br>            if a &gt;= end:<br>                start = a<br>                end = b<br>                pick += 1<br>        return len(intervals) - pick<br>            <br>```","like_count":0},{"had_liked":false,"id":130556,"user_name":"Edward Lee","can_delete":false,"product_type":"c1","uid":1228518,"ip_address":"","ucode":"156223F1D7E94A","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/e6/7808520d.jpg","comment_is_top":false,"comment_ctime":1567482428,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567482428","product_id":100017301,"comment_content":"贪心算法，我的总结是找到合理排序再依次处理即可有解。<br><br>思考题 1 <br>    将非负整数组 a，从大到小排序，从下标 k 开始之后的数值最小<br>思考题 2<br>    按服务时间从短到长依次排列并进行服务即可<br><br>对应练习 leetcode 455<br>https:&#47;&#47;leetcode.com&#47;problems&#47;assign-cookies&#47;","like_count":0},{"had_liked":false,"id":127360,"user_name":"王小念","can_delete":false,"product_type":"c1","uid":1057147,"ip_address":"","ucode":"2062E25909B8E0","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/7b/53a325d1.jpg","comment_is_top":false,"comment_ctime":1566664230,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566664230","product_id":100017301,"comment_content":"课后练习第1题：<br>Leetcode: 402. Remove K Digits(https:&#47;&#47;leetcode.com&#47;problems&#47;remove-k-digits)<br><br>Solution：https:&#47;&#47;github.com&#47;artekr&#47;LeetCode&#47;blob&#47;master&#47;algorithms&#47;python&#47;RemoveKDigits&#47;RemoveKDigits.py<br>class Solution:<br>    def removeKdigits(self, num: str, k: int) -&gt; str:<br>        if k == 0:<br>            return num<br>        if int(num) == 0 or len(num) == k:<br>            return &#39;0&#39;<br>        result = []<br>        for n in num:<br>            while k &gt; 0 and result and result[-1] &gt; n:<br>                result.pop()<br>                k -= 1<br>            result.append(n)<br>        # After we went through the whole num string, if k stil greater than 0,<br>        # meaning we still need to remove k more digits from the stack<br>        # Since our stack already ordered, we just need to remove last k digits from the stack<br>        if k &gt; 0:<br>            result = result[:-k]<br>        return &#39;&#39;.join(result).lstrip(&#39;0&#39;) or &#39;0&#39;<br><br><br>a = Solution().removeKdigits(&quot;1432219&quot;, 3)<br>print(a)<br># expected: &#39;1219&#39;<br><br>a = Solution().removeKdigits(&quot;10200&quot;, 1)<br>print(a)<br># expected: &#39;200&#39;<br><br>a = Solution().removeKdigits(&quot;1234506789&quot;, 9)<br>print(a)<br># expected: &#39;0&#39;","like_count":0},{"had_liked":false,"id":126966,"user_name":"大大大侠饶命","can_delete":false,"product_type":"c1","uid":1253975,"ip_address":"","ucode":"9C59655D514AA2","user_header":"https://static001.geekbang.org/account/avatar/00/13/22/57/0ecc24e8.jpg","comment_is_top":false,"comment_ctime":1566526510,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566526510","product_id":100017301,"comment_content":"贪心算法，能工作的前提是f(n)取最优解的operation,不会影响f(n+1)取最优解的operation,另外考虑限制函数的影响。","like_count":0},{"had_liked":false,"id":125238,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1566129338,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566129338","product_id":100017301,"comment_content":"2019-6-10开始的，学到这里了，算是没有掉队吧！","like_count":0},{"had_liked":false,"id":123123,"user_name":"J.Smile","can_delete":false,"product_type":"c1","uid":1336475,"ip_address":"","ucode":"C4D98DFDBF7584","user_header":"https://static001.geekbang.org/account/avatar/00/14/64/9b/0b578b08.jpg","comment_is_top":false,"comment_ctime":1565610629,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565610629","product_id":100017301,"comment_content":"还在哈😄ཽ","like_count":0},{"had_liked":false,"id":121037,"user_name":"徐帅","can_delete":false,"product_type":"c1","uid":1448864,"ip_address":"","ucode":"BDF904280E2330","user_header":"https://static001.geekbang.org/account/avatar/00/16/1b/a0/7c7d1b4a.jpg","comment_is_top":false,"comment_ctime":1565052402,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565052402","product_id":100017301,"comment_content":"贪心算法：对问题求解时，总是当前看来最好的选择，而不从整体最优上加以考虑。选择的贪心策略的前提必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。","like_count":0},{"had_liked":false,"id":119642,"user_name":"William","can_delete":false,"product_type":"c1","uid":1346215,"ip_address":"","ucode":"55F5D9DEE485B1","user_header":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","comment_is_top":false,"comment_ctime":1564644131,"is_pvip":true,"replies":[{"id":"43948","content":"没这个要求啊","user_name":"作者回复","comment_id":119642,"uid":"1190123","ip_address":"","utype":1,"ctime":1564703854,"user_name_real":"王争"}],"discussion_count":2,"race_medal":0,"score":"1564644131","product_id":100017301,"comment_content":"霍夫曼编码原理 , 不是要求左子树小于右子树么, 按照您的写法, 都依次排列在了右子树啊. <br><br>","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460993,"discussion_content":"没这个要求啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564703854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1346215,"avatar":"https://static001.geekbang.org/account/avatar/00/14/8a/a7/674c1864.jpg","nickname":"William","note":"","ucode":"55F5D9DEE485B1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3684,"discussion_content":"那就是只要保证，\n我们节点都在叶子结点就可以了哈.","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564708216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117260,"user_name":"一个正经的名字","can_delete":false,"product_type":"c1","uid":1452842,"ip_address":"","ucode":"6C80AD92DE4129","user_header":"https://static001.geekbang.org/account/avatar/00/16/2b/2a/f0b5d73a.jpg","comment_is_top":false,"comment_ctime":1564016622,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1564016622","product_id":100017301,"comment_content":"置顶第一的留言，按他那种算法，他从最高位开始比较低一位是不是比他小，小的话才移出，那如果数字是456789，移出5位，按他那样算不是一个都移出不了吗","like_count":0,"discussions":[{"author":{"id":1193468,"avatar":"https://static001.geekbang.org/account/avatar/00/12/35/fc/6d3e0035.jpg","nickname":"saber","note":"","ucode":"D02F8D129DB41C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":11913,"discussion_content":"这样情况下就会在移除最后 5 位即可","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568447225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117014,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1563955076,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563955076","product_id":100017301,"comment_content":"思考题2<br>后面的人必须等待前面的，如果让最快的人先处理会减少总的等待时间。","like_count":0},{"had_liked":false,"id":117008,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1563954094,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563954094","product_id":100017301,"comment_content":"思考题1<br>目标是高位最小，从最高位开始考察，看最少删除多少位能让其变小，如果可能在能变小的所有选择中选择值最小的，这样处理完最高位就用类似的方法处理第二位，递归进行。","like_count":0},{"had_liked":false,"id":114859,"user_name":"岁月如歌","can_delete":false,"product_type":"c1","uid":1428828,"ip_address":"","ucode":"1AEBD6F79941B7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/QFE00aXGzaS6ibbfJSJsDrpIkqs0OrIYjzZv6L9vZmMhOlut2j24iaeZb0MCQazToE6FRXN960nNiaTrsmw09YjGw/132","comment_is_top":false,"comment_ctime":1563419299,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563419299","product_id":100017301,"comment_content":"在区间覆盖中 实质上【[2-4]、[6-8]、[8-10]】【[3-5]、[6-8]、[8-10]】都是满足的。 题目应该再添加开始和结束范围最广的话，答案只能是第一种","like_count":0},{"had_liked":false,"id":113589,"user_name":"sprzhing","can_delete":false,"product_type":"c1","uid":1218617,"ip_address":"","ucode":"5C58ADB2A10CF6","user_header":"https://wx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELheoqTu05oOnCW3FdxiaIzYvmMMMNmKXDtwtdvtNdeuj8mgAWB9zibubHcPE5K8KPGX53GzxlibBRNg/132","comment_is_top":false,"comment_ctime":1563088026,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1563088026","product_id":100017301,"comment_content":"第一个题可以再严谨一点，剩下n-k位数字最小，或者剩下数字中不能0开头","like_count":0},{"had_liked":false,"id":111826,"user_name":"静水流深","can_delete":false,"product_type":"c1","uid":1339724,"ip_address":"","ucode":"644F05EFBD2E7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/4c/2cefec07.jpg","comment_is_top":false,"comment_ctime":1562627856,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562627856","product_id":100017301,"comment_content":"阴阳平衡","like_count":0},{"had_liked":false,"id":109867,"user_name":"Geek_cf29f0","can_delete":false,"product_type":"c1","uid":1337800,"ip_address":"","ucode":"F635968AE2656C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bWpFdAQwTzBg70ib6QTQomfQV3Ak1CFQPXun20w2Kz3PCLtsV75nNrqBuDEvehtlCoTkyT3icNWnvO7nPMc1RFfg/132","comment_is_top":false,"comment_ctime":1562123040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1562123040","product_id":100017301,"comment_content":"第一题：<br>1)移出8<br>2）移出7<br>3）移出9<br>4556454546<br>4）移出6<br>5）移出5<br>45544546<br>顺序依次从高位相邻两两比较，移出较大元素，记录移出元素个数，如果第一轮元素遍历比较结束后，移出元素个数未达到5，则继续在上一轮结果下，进行第二轮的遍历比较，依次循环处理，直到移出元素个数达到5为止<br><br>第二题：<br>按照办理时间顺序从小到大排序，就是n个人的排队顺序，这样使得总的排序时间最短。","like_count":0},{"had_liked":false,"id":105487,"user_name":"likun","can_delete":false,"product_type":"c1","uid":1030816,"ip_address":"","ucode":"9145ED059CCC6D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/a0/f03d20cd.jpg","comment_is_top":false,"comment_ctime":1561014101,"is_pvip":false,"replies":[{"id":"38639","content":"😁，你观察的很仔细，因为给出的钱币面值有特点，所以可以用贪心来解决。你可以网上搜下，钱币找零问题，有一大堆不同的场景和解法。","user_name":"作者回复","comment_id":105487,"uid":"1190123","ip_address":"","utype":1,"ctime":1561419769,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1561014101","product_id":100017301,"comment_content":"老师 你给的钱币找零的例子是可以用贪心回去到最优解 但存在其他面额的例子对于贪心是获取不到最优解的 为什么你给的例子用贪心就能获取到最优解呢？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454701,"discussion_content":"😁，你观察的很仔细，因为给出的钱币面值有特点，所以可以用贪心来解决。你可以网上搜下，钱币找零问题，有一大堆不同的场景和解法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1561419769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105190,"user_name":"康斯坦丁","can_delete":false,"product_type":"c1","uid":1368096,"ip_address":"","ucode":"C130E800E8D5C9","user_header":"https://static001.geekbang.org/account/avatar/00/14/e0/20/003190c1.jpg","comment_is_top":false,"comment_ctime":1560935069,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1560935069","product_id":100017301,"comment_content":"1 循环k次，每次移除 剩下的数字值最小 那位数字.<br>2 优先服务被服务时间短的人.","like_count":0},{"had_liked":false,"id":101354,"user_name":"chengzise","can_delete":false,"product_type":"c1","uid":1006070,"ip_address":"","ucode":"1C27D216359894","user_header":"https://static001.geekbang.org/account/avatar/00/0f/59/f6/ed66d1c1.jpg","comment_is_top":false,"comment_ctime":1559786939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559786939","product_id":100017301,"comment_content":"哈夫曼编码的结果不一定会和老师举例的那么规则。例如：a个数10， b个数20， c个数23， d个数25， e个数40 ， f个数50，编码完：a=000，b=001，c=100，d=101，e=01，f=11","like_count":0},{"had_liked":false,"id":98651,"user_name":"Geek_0ef80d","can_delete":false,"product_type":"c1","uid":1440977,"ip_address":"","ucode":"3EB0CFE7E40176","user_header":"","comment_is_top":false,"comment_ctime":1559049950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559049950","product_id":100017301,"comment_content":"已经有排序，不能循环填充0么？为啥还要堆化，不是很明白，虽然看起来很厉害😂","like_count":0},{"had_liked":false,"id":97146,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1558596786,"is_pvip":false,"replies":[{"id":"34784","content":"是的","user_name":"作者回复","comment_id":97146,"uid":"1190123","ip_address":"","utype":1,"ctime":1558657414,"user_name_real":"王争"}],"discussion_count":1,"race_medal":0,"score":"1558596786","product_id":100017301,"comment_content":"上面霍夫曼编码构造出的那个树形结构，是不是解码也可以用？？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":451154,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1558657414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":97138,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1558595850,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558595850","product_id":100017301,"comment_content":"1、可以先考虑移除一个数字，使剩下的数字最小？从高位开始，移除大于下一位的那位数字","like_count":0},{"had_liked":false,"id":97136,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1558595233,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1558595233","product_id":100017301,"comment_content":"2、一个人等待的时间是前面所有人服务时间的总和，要让n个人总的等待时间最小，那么只要让排在前面的人的服务时间足够短就可以了，所以被服务的顺序就是按照被服务时间的长度从小到大的排列顺序","like_count":0},{"had_liked":false,"id":92751,"user_name":"咸鱼浪子心","can_delete":false,"product_type":"c1","uid":1239309,"ip_address":"","ucode":"344A0104956535","user_header":"https://static001.geekbang.org/account/avatar/00/12/e9/0d/605b409e.jpg","comment_is_top":false,"comment_ctime":1557321138,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1557321138","product_id":100017301,"comment_content":"1  前k+1个中保留一个最小的<br>2 服务时间从小到大排序","like_count":0},{"had_liked":false,"id":88313,"user_name":"yshnb!","can_delete":false,"product_type":"c1","uid":1488301,"ip_address":"","ucode":"E93A9132532492","user_header":"https://static001.geekbang.org/account/avatar/00/16/b5/ad/587a45dc.jpg","comment_is_top":false,"comment_ctime":1555903633,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555903633","product_id":100017301,"comment_content":"1、从数字最高位开始，比较高位和它的下一位，如果高位大，则移除，如果低位大，则继续向下比较，直到高位大于低位则移除。如果比较到最后也没有低位大于高位则一处最后一位。循环k次。<br><br>可以将问题理解为，每次移除一位，移除k次，每一次都要保证移除后的数字最小。<br><br>2、服务时间从低到高排列，然后从时间短的开始服务","like_count":0},{"had_liked":false,"id":86645,"user_name":"小新村小学扛霸子","can_delete":false,"product_type":"c1","uid":1250309,"ip_address":"","ucode":"BECFAB70A68C9F","user_header":"https://static001.geekbang.org/account/avatar/00/13/14/05/5f46ffa6.jpg","comment_is_top":false,"comment_ctime":1555417783,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555417783","product_id":100017301,"comment_content":"huffman编码用了5个小时终于写完了。。。","like_count":0},{"had_liked":false,"id":85842,"user_name":"悄敲","can_delete":false,"product_type":"c1","uid":1346875,"ip_address":"","ucode":"A6A14EF445180C","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/3b/686939db.jpg","comment_is_top":false,"comment_ctime":1555254555,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1555254555","product_id":100017301,"comment_content":"上周高德二面，就被问到了霍夫曼编码，可惜我当初虽然看了老师的这节课，还惊觉算法处理之巧妙，但没有自己动手实现，时隔几个月就淡忘了。纸上得来终觉浅，绝知此事要躬行。","like_count":0},{"had_liked":false,"id":83960,"user_name":"刘涛涛","can_delete":false,"product_type":"c1","uid":1396130,"ip_address":"","ucode":"D2EE76FA0BB1C5","user_header":"https://static001.geekbang.org/account/avatar/00/15/4d/a2/9450ef89.jpg","comment_is_top":false,"comment_ctime":1554739042,"is_pvip":false,"replies":[{"id":"31015","content":"是的","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1555381171,"ip_address":"","comment_id":83960,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1554739042","product_id":100017301,"comment_content":"请问老师，区间覆盖那道题是不是应该每次选取剩余区间最大的呢，也就是每次排序需要按照end由小到大，然后在判断他是否和前面有重叠呢","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":446192,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1555381171,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82958,"user_name":"闲着也是贤者","can_delete":false,"product_type":"c1","uid":1451837,"ip_address":"","ucode":"DFADE250BA8E16","user_header":"https://static001.geekbang.org/account/avatar/00/16/27/3d/48340c0b.jpg","comment_is_top":false,"comment_ctime":1554359351,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554359351","product_id":100017301,"comment_content":"分区间问题我认为是按照区间尾部大小进行排序 在进行处理 希望老师指正","like_count":0},{"had_liked":false,"id":82420,"user_name":"好人","can_delete":false,"product_type":"c1","uid":1439552,"ip_address":"","ucode":"8BA995A57F7E1A","user_header":"https://static001.geekbang.org/account/avatar/00/15/f7/40/cba812dc.jpg","comment_is_top":false,"comment_ctime":1554207386,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1554207386","product_id":100017301,"comment_content":"我的天，看到这节，感觉自己智商在线了，前面几节平均一节啃七八个小时，还是没啃好，希望在下次再看的时候能更好的迈过去。","like_count":0},{"had_liked":false,"id":81416,"user_name":"GJ","can_delete":false,"product_type":"c1","uid":1258212,"ip_address":"","ucode":"0A55420B9B88F2","user_header":"https://static001.geekbang.org/account/avatar/00/13/32/e4/a79531ad.jpg","comment_is_top":false,"comment_ctime":1553909094,"is_pvip":false,"replies":[{"id":"29572","content":"不对 再想下","user_name":"作者回复","user_name_real":"王争","uid":"1190123","ctime":1553993367,"ip_address":"","comment_id":81416,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1553909094","product_id":100017301,"comment_content":"分糖果：从最大的开始，分配给需求最大的小孩，也可以满足最多的小孩数。这逻辑没错吧","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445188,"discussion_content":"不对 再想下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553993367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":81415,"user_name":"GJ","can_delete":false,"product_type":"c1","uid":1258212,"ip_address":"","ucode":"0A55420B9B88F2","user_header":"https://static001.geekbang.org/account/avatar/00/13/32/e4/a79531ad.jpg","comment_is_top":false,"comment_ctime":1553908987,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1553908987","product_id":100017301,"comment_content":"分糖果从最大的开始，分配给需求最大的小孩，效果是一样的吧。","like_count":0},{"had_liked":false,"id":79022,"user_name":"ddsoma","can_delete":false,"product_type":"c1","uid":1326091,"ip_address":"","ucode":"E3FC4D2E3A93F9","user_header":"https://wx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqPn4U0Ix3eB0Cguuw5qmDPGDQODMXH5BcoJEBe1QHJ1709xBfK7q9JePCXdHhvuMAicBAh3GpPe3A/132","comment_is_top":false,"comment_ctime":1553325497,"is_pvip":false,"replies":[{"id":"28967","content":"不行的","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1553477412,"ip_address":"","comment_id":79022,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1553325497","product_id":100017301,"comment_content":"老师关于这个区间覆盖“我们按照起始端点从小到大的顺序对这 n 个区间排序。”<br><br>能不能按照终点从小到大来排序，然后检查的活动i的开始时间starti小于最近选择的活动j的结束时间endj，则不选择活动i，否则选择活动i加入集合中。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":444329,"discussion_content":"不行的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553477412,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043668,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/d4/8f877895.jpg","nickname":"Geek.Kwok","note":"","ucode":"80D38825D990F9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":155166,"discussion_content":"经验证，是可以的，思路是一致的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580219231,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":69802,"user_name":"bingo","can_delete":false,"product_type":"c1","uid":1341276,"ip_address":"","ucode":"DD96820EC8871D","user_header":"https://static001.geekbang.org/account/avatar/00/14/77/5c/8d53165e.jpg","comment_is_top":false,"comment_ctime":1550847489,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550847489","product_id":100017301,"comment_content":"@frogoscar Oscar老师你好，在这里遇到真是缘分啊！！","like_count":0},{"had_liked":false,"id":69465,"user_name":"ferry","can_delete":false,"product_type":"c1","uid":1255187,"ip_address":"","ucode":"0A848FA96C3AD8","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJGOSxM1GIHX9Y2JIe7vGQ87rK8xpo5F03KmiaGyXeKnozZsicHeSZrbSlzUVhTOdDlXCkTrcYNIVJg/132","comment_is_top":false,"comment_ctime":1550751433,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550751433","product_id":100017301,"comment_content":"第一题：将每一个位数按照从高到低的位置放到数组A中，然后使用快速排序算法将排序结果放在另一个数组B，前K个即为要去除的数字，取出A中对应的数组的前K个数，剩下的按顺序取出，计算成整数后就是所求的最小值，时间复杂度为O(n）,空间复杂度则需要两个数组，也为O（n）。这样是不是比贪心算法得到的结果更准确,时间复杂度也更低呢？","like_count":0},{"had_liked":false,"id":69073,"user_name":"郭星志","can_delete":false,"product_type":"c1","uid":1257021,"ip_address":"","ucode":"0FA040B955CEE7","user_header":"https://static001.geekbang.org/account/avatar/00/13/2e/3d/58242861.jpg","comment_is_top":false,"comment_ctime":1550655894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1550655894","product_id":100017301,"comment_content":"签到，读到这里了","like_count":0},{"had_liked":false,"id":65815,"user_name":"zzz","can_delete":false,"product_type":"c1","uid":1194253,"ip_address":"","ucode":"6A5752C924D917","user_header":"https://static001.geekbang.org/account/avatar/00/12/39/0d/80ae66d7.jpg","comment_is_top":false,"comment_ctime":1549681044,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1549681044","product_id":100017301,"comment_content":"找零问题可以用贪婪算法，不能离开问题本身的特点分析问题，大面值的至少是小面值的两倍。而这个反例只是一倍多一点<br><br>&#47;&#47;找零问题不能用贪婪算法，即使有面值为一元的币值也不行：考虑币值为100，99和1的币种，每种各一百张，找396元。<br> 动态规划可求出四张99元，但贪心算法解出需三张一百和96张一元。","like_count":0},{"had_liked":false,"id":64825,"user_name":"金龟","can_delete":false,"product_type":"c1","uid":1228500,"ip_address":"","ucode":"1C7D35C8AE8D9D","user_header":"https://static001.geekbang.org/account/avatar/00/12/be/d4/ff1c1319.jpg","comment_is_top":false,"comment_ctime":1548919825,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548919825","product_id":100017301,"comment_content":"这个哈夫曼编码是否可以平衡一下","like_count":0},{"had_liked":false,"id":64647,"user_name":"若星","can_delete":false,"product_type":"c1","uid":1247442,"ip_address":"","ucode":"D92DC0D777724E","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/d2/83bdc5dd.jpg","comment_is_top":false,"comment_ctime":1548841281,"is_pvip":false,"replies":[{"id":"22882","content":"有道理，我和作者商量下。","user_name":"编辑回复","user_name_real":"郭蕾","uid":"1000473","ctime":1548843215,"ip_address":"","comment_id":64647,"utype":2}],"discussion_count":1,"race_medal":0,"score":"1548841281","product_id":100017301,"comment_content":"不能在留言下回复，就整个踩的功能，让点赞数减去踩的数，决定排序。现在，错的答案，误导大家，都可以审核通过😒","like_count":0,"discussions":[{"author":{"id":1000473,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/19/17fadc62.jpg","nickname":"郭蕾","note":"","ucode":"34F4C07D1C5FE8","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":438118,"discussion_content":"有道理，我和作者商量下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1548843215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":64347,"user_name":"鹏程万里","can_delete":false,"product_type":"c1","uid":1114675,"ip_address":"","ucode":"5E23BBEC9E8209","user_header":"https://static001.geekbang.org/account/avatar/00/11/02/33/57678ea3.jpg","comment_is_top":false,"comment_ctime":1548750762,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548750762","product_id":100017301,"comment_content":"贪心算法：就是每一步操作对想要的结果“贡献”最大！","like_count":0},{"had_liked":false,"id":61665,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1547771182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547771182","product_id":100017301,"comment_content":"贪心，每一步都选择目前最优的选择<br>问题1；在前2k中，每次都从数字中拿出最大值，直到取了k次<br>问题2: 被服务者需要时间优先","like_count":0},{"had_liked":false,"id":60629,"user_name":"luo","can_delete":false,"product_type":"c1","uid":1148742,"ip_address":"","ucode":"00FBDC12101419","user_header":"https://static001.geekbang.org/account/avatar/00/11/87/46/2850b4a9.jpg","comment_is_top":false,"comment_ctime":1547520617,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547520617","product_id":100017301,"comment_content":"贪心算法思考题：<br>1.数字去除k位使数值最小<br>146579238  移除4个数据 14657<br>\t\t\t\t   14523 移除最大？<br>416723897\t  \t\t4必须移除<br>\t\t\t\t16723<br>\t\t\t\t12389<br>\t\t\t\t12387 位数越高数据要求越小,限定条件是移除k位数字，期望值移除后后去数值最小，前k+1位必须是获取最小的放在第一位，比如移除4位则前四位最小的是1，一之前有几位数据则移除几位，下标从最小的这个数据开始+1，在比较剩余移除位数 比如现在移除4剩余移除3位，在6723比较最小为2,2前面需要移除2位，剩余移除位数为1,38中3最小不移除，89 8最小不移除，97 7最小移除 剩余为12387 位最小数据。","like_count":0},{"had_liked":false,"id":59243,"user_name":"cw","can_delete":false,"product_type":"c1","uid":1264296,"ip_address":"","ucode":"82A6B50462F9F9","user_header":"https://static001.geekbang.org/account/avatar/00/13/4a/a8/b7e36dd2.jpg","comment_is_top":false,"comment_ctime":1547342966,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547342966","product_id":100017301,"comment_content":"1.从高位开始，如果高位小于低位则比对低位，如果高位大则直接删除高位。<br>2.等待时间短开始服务","like_count":0},{"had_liked":false,"id":58140,"user_name":"Geek_aba007","can_delete":false,"product_type":"c1","uid":1256521,"ip_address":"","ucode":"CFF2A814DAFE84","user_header":"https://static001.geekbang.org/account/avatar/00/13/2c/49/49282591.jpg","comment_is_top":false,"comment_ctime":1547001745,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1547001745","product_id":100017301,"comment_content":"思考题第一题：位数相同的情况下，数列单调递增是最小的，所以从高位向低位删掉递减的情况，是当前的最优解 ","like_count":0},{"had_liked":false,"id":57347,"user_name":"blank","can_delete":false,"product_type":"c1","uid":1237868,"ip_address":"","ucode":"4ACC74D26F66F2","user_header":"https://static001.geekbang.org/account/avatar/00/12/e3/6c/4cbb033e.jpg","comment_is_top":false,"comment_ctime":1546758569,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1546758569","product_id":100017301,"comment_content":"这两个课后问题跟现在四年级小学生遇到的数学题是一样的，不过在这里就是用贪心算法去解释问题的实质。<br>1、从前往后，相邻两个数进行比较，如果高位比低位大，那么就该移除高位。<br>2、把每个人的等待时间长短做一个排序，然后等待时间短的先进行服务，等待时间长的后进行服务。","like_count":0},{"had_liked":false,"id":53844,"user_name":"zj","can_delete":false,"product_type":"c1","uid":1100064,"ip_address":"","ucode":"E3329CCF694AC2","user_header":"https://static001.geekbang.org/account/avatar/00/10/c9/20/e4f1b17c.jpg","comment_is_top":false,"comment_ctime":1545740171,"is_pvip":false,"replies":[{"id":"19657","content":"不是的 总处理时间一样 但是总等待时间不同","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545826176,"ip_address":"","comment_id":53844,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545740171","product_id":100017301,"comment_content":"表示第二个思考题怎么安排都是一样的吧，一个窗口是串行的，只能一个个的服务","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434263,"discussion_content":"不是的 总处理时间一样 但是总等待时间不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545826176,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":53671,"user_name":"任悦","can_delete":false,"product_type":"c1","uid":1241960,"ip_address":"","ucode":"9D2F99C058056B","user_header":"https://static001.geekbang.org/account/avatar/00/12/f3/68/726a8c3d.jpg","comment_is_top":false,"comment_ctime":1545708440,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545708440","product_id":100017301,"comment_content":"王老师，不重叠区间选3 5 6 8 8 10 也可以吧？<br>还有一个小问题，在处理海量数据的时候，排序是最慢的操作吗？比如说有1T的数据，把所有数据和数字10比较，需要1分钟，但是如果对这些数据排序，就需要1小时，所以我们可以先和10，20，30，40比较，分成5个区间，分别排序，最后再汇总？","like_count":0},{"had_liked":false,"id":52937,"user_name":"程序员大天地","can_delete":false,"product_type":"c1","uid":1249001,"ip_address":"","ucode":"7A21F15FEE2D5B","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/e9/98b6ea61.jpg","comment_is_top":false,"comment_ctime":1545554688,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545554688","product_id":100017301,"comment_content":"哈夫曼建树的不同，我自己验证了下是可以的，不会出现一个字符的编码是某一个字符编码的前缀的情况。","like_count":0},{"had_liked":false,"id":52932,"user_name":"程序员大天地","can_delete":false,"product_type":"c1","uid":1249001,"ip_address":"","ucode":"7A21F15FEE2D5B","user_header":"https://static001.geekbang.org/account/avatar/00/13/0e/e9/98b6ea61.jpg","comment_is_top":false,"comment_ctime":1545554073,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545554073","product_id":100017301,"comment_content":"老师，这个哈夫曼树的构造方法是不是可以不同？如果我以总是左子树小于右子树构建树，结果是一样的吗？","like_count":0},{"had_liked":false,"id":52600,"user_name":"insist","can_delete":false,"product_type":"c1","uid":1054536,"ip_address":"","ucode":"1EE2800A900BA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/17/48/3ab39c86.jpg","comment_is_top":false,"comment_ctime":1545450300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545450300","product_id":100017301,"comment_content":"贪心算法核心思想：对一组数据，在限制条件下，获得的期望值最大","like_count":0},{"had_liked":false,"id":52331,"user_name":"星星","can_delete":false,"product_type":"c1","uid":1126460,"ip_address":"","ucode":"013714D9EF1847","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/3c/c2c72e28.jpg","comment_is_top":false,"comment_ctime":1545363525,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545363525","product_id":100017301,"comment_content":"置顶最高的算法，例子中写的不对，倒数第二个是44  不是444","like_count":0},{"had_liked":false,"id":51614,"user_name":"来碗绿豆汤","can_delete":false,"product_type":"c1","uid":1070051,"ip_address":"","ucode":"B0AB63B8D9729F","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/e3/39dcfb11.jpg","comment_is_top":false,"comment_ctime":1545208479,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545208479","product_id":100017301,"comment_content":"问题一，数字a中移除k个数字。 假设a中共有m个数字，那么这个问题就可以转换成功m个数字中保留n=m-k个数字，使其组成的数值最小。那么我们就可以从前m-n个数字里面选一个最小的（不能是0）作为最高位（假设是第i为）；然后从i+1到m-i-(n-1)中选择最小的一个作为次高位数字，依次类推，即可达到最大值；<br>问题二，服务时间越长，大家等等时间也就越长，根据贪心算法，在服务人数贡献相同的情况下（服务一人），让其他人等的时间越少越好，所以就是有先服务需要服务时间短的人。","like_count":0},{"had_liked":false,"id":51015,"user_name":"色即是空","can_delete":false,"product_type":"c1","uid":1189638,"ip_address":"","ucode":"46B8975ED087B8","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/06/7ab75a5b.jpg","comment_is_top":false,"comment_ctime":1545099315,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545099315","product_id":100017301,"comment_content":"贪心、分治、回溯、动态规划；都是算法思想<br>贪心，每次都要最优<br>列举了贪心算法的错误使用场景：但并没有指出一般规律，那种场景适合使用贪心算法；<br>用例：区间覆盖、钱币找零、分糖果等应用场景，且贪心算法不一定能获得最优解<br><br>霍夫曼变慢考察文本有多少个不同的字符，还考察字符出现的频次<br>霍夫曼编码要求各个字符的编码之间，不会出现摸个编码是另一个编码前缀的情况<br><br>贪心算法，这种算法思想更多的是指导设计基础算法。<br>思考题：1、从前往后依次移除非0数字；或者选择最大的数字（9最大，0最小）<br>2、典型的贪心算法问题，为了让更多的人少等，优先服务服务时间最短的人；这样也有个问题是需要长时间服务的人迟迟得不到服务；","like_count":0},{"had_liked":false,"id":50927,"user_name":"程序员联盟","can_delete":false,"product_type":"c1","uid":1018781,"ip_address":"","ucode":"5BB1E4050BBFF2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8b/9d/30c79c4b.jpg","comment_is_top":false,"comment_ctime":1545085107,"is_pvip":false,"replies":[{"id":"18323","content":"不会的 比较高级的数据结构","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545096979,"ip_address":"","comment_id":50927,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545085107","product_id":100017301,"comment_content":"请问老师会不会有关于“并查集”（Union-Find）的课？谢谢。LeetCode好多题目用到这个","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433184,"discussion_content":"不会的 比较高级的数据结构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545096979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50872,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1545058702,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545058702","product_id":100017301,"comment_content":"课后思考题 一<br>方法1 不知道算不算贪心算法 可以把整数的所有数字进行排序 然后从最大的移除走 剩下的就是最小的<br><br>方法2 维护一个大小为k的小顶堆 把比较大的数字放在小顶堆里 最后把小顶堆里面保留的数字移除 就会留下最小的<br><br>思考题 二 <br>按时间最短的排序 先服务时间短的","like_count":0},{"had_liked":false,"id":50799,"user_name":"guozc","can_delete":false,"product_type":"c1","uid":1024590,"ip_address":"","ucode":"7490B01D3D0EB8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/4e/c02e3009.jpg","comment_is_top":false,"comment_ctime":1545048349,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545048349","product_id":100017301,"comment_content":"求助个问题： <br>工作时间段 09:00-12:00  14:00-17:30 18:00-19:30 休息时间段 12:00-14:00  17:30-18:00 19:30-第二天09:00<br><br>现有2个输入：<br> 1)在工作时间段的某个时间点，<br> 2)处理时间（范围0-24h）<br>求输出:什么时候完成<br><br>各位有什么好的算法或思路吗？","like_count":0},{"had_liked":false,"id":50787,"user_name":"TryTs","can_delete":false,"product_type":"c1","uid":1036276,"ip_address":"","ucode":"1DD1E974D461A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cf/f4/26b95f0b.jpg","comment_is_top":false,"comment_ctime":1545046177,"is_pvip":false,"replies":[{"id":"18330","content":"这个跟字符的频率有关系的。我记得例子有点特殊 所以生成的树才如你所说。","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545097700,"ip_address":"","comment_id":50787,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545046177","product_id":100017301,"comment_content":"老师，我也不知道怎么描述，其实这个哈夫曼编码困惑了我许久，我也不知到怎么描述，现在您描述的这种状态是一直在原有基础上叠加，没有与一个节点跟两个节点组成的新节点在同一层的，维基百科上有个动图描述2，3，4，4，5，7这几个节点，恩 感觉构建有点不一样，这最后虽然编码结果不一样，效果一样吗？","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433101,"discussion_content":"这个跟字符的频率有关系的。我记得例子有点特殊 所以生成的树才如你所说。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545097700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50775,"user_name":"纯洁的憎恶","can_delete":false,"product_type":"c1","uid":1130512,"ip_address":"","ucode":"5E9757DE6F45DF","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/10/b6bf3c3c.jpg","comment_is_top":false,"comment_ctime":1545043491,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1545043491","product_id":100017301,"comment_content":"贪心算法用不好就很容易陷入线性思维。而贪心算法不工作的主要原因是，前面的选择，会影响后面的选择。所以在这种场景下要谨慎。我的理解对么？<br><br>1.首先从最高k位里选出最小的s1（如果有重复则选择最高位的），把s1前面的去掉（假设为m个），因为无论怎么移除也不可能让k后面的位数变成最高位。然后s1的次高位开始，在最高的k-m位里找出最小的然后把前面的剔除。以此类推直到移出了k位。<br>2.由等待时间最短的开始服务。","like_count":0,"discussions":[{"author":{"id":1263121,"avatar":"https://static001.geekbang.org/account/avatar/00/13/46/11/dbfe5f71.jpg","nickname":"contract","note":"","ucode":"74E4271DB02E73","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3383,"discussion_content":"哥们，贪心算法不工作的主要原因是，后面的选择可能会影响前面的选择吧，动态规划中就是后面的选择可能影响前面的选择\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564449093,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50695,"user_name":"老杨同志","can_delete":false,"product_type":"c1","uid":1246199,"ip_address":"","ucode":"3F334F0CFD3DE6","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/f7/3a493bec.jpg","comment_is_top":false,"comment_ctime":1545030701,"is_pvip":false,"replies":[{"id":"18332","content":"我讲完整了。不会的 你可以自己举几个例子看看 ","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545097975,"ip_address":"","comment_id":50695,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545030701","product_id":100017301,"comment_content":"老师的霍夫曼编码是不是不完整，只是一个简介？感觉多一种字符，编码就多一位，如果一个文档里字符种类比较多，出现概率又相当，压缩效果是不是不太好。","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433062,"discussion_content":"我讲完整了。不会的 你可以自己举几个例子看看 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545097975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50678,"user_name":"🐱您的好友William🐱","can_delete":false,"product_type":"c1","uid":1215456,"ip_address":"","ucode":"427786DB178965","user_header":"https://static001.geekbang.org/account/avatar/00/12/8b/e0/9a79ddac.jpg","comment_is_top":false,"comment_ctime":1545028679,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545028679","product_id":100017301,"comment_content":"@cirno方法应该是对的，但是那个结果错了，结果里面多写了一个4，应该是：44594546，如果单纯使用移除topk数组的方法的话是：45545454。","like_count":0},{"had_liked":false,"id":50624,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1545017474,"is_pvip":false,"replies":[{"id":"18335","content":"意图是找一个结束端点最小的 这样能让剩下的没有覆盖的区间最大","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545098323,"ip_address":"","comment_id":50624,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545017474","product_id":100017301,"comment_content":"区间覆盖那个例子 是不是应该取的是 startIndex + range 的最小值，而不是单纯的区间最小","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433040,"discussion_content":"意图是找一个结束端点最小的 这样能让剩下的没有覆盖的区间最大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545098323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50603,"user_name":"Harry","can_delete":false,"product_type":"c1","uid":1238524,"ip_address":"","ucode":"EA6550F9EE0B4E","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/fc/28b51788.jpg","comment_is_top":false,"comment_ctime":1545015431,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545015431","product_id":100017301,"comment_content":"1. 从大到小排序，移除K个数据<br>2. 按服务时间越短越先服务","like_count":0},{"had_liked":false,"id":50568,"user_name":"三又木","can_delete":false,"product_type":"c1","uid":1015605,"ip_address":"","ucode":"B9D3F7CE2D2A62","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7f/35/26db4185.jpg","comment_is_top":false,"comment_ctime":1545010210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545010210","product_id":100017301,"comment_content":"1. 从大到小 删除k个数字<br>2. 从服务时间最少的开始，这样最后一个服务时间最长的就不算在等待时间中。","like_count":0},{"had_liked":false,"id":50565,"user_name":"王楚然","can_delete":false,"product_type":"c1","uid":1238608,"ip_address":"","ucode":"E0C8184C34908E","user_header":"https://static001.geekbang.org/account/avatar/00/12/e6/50/656a0012.jpg","comment_is_top":false,"comment_ctime":1545009892,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545009892","product_id":100017301,"comment_content":"老师讲的通俗易懂深入浅出。有些提过但是没有完全看懂的部分，又参考了一些网上资料查缺补漏。很多次遇到太难的问题想放弃，如今回头看过去，其实不是太难，是当时的自己太心浮气躁没有仔细思考。跟到现在发现即使数学基础很不好的自己也能学个七七八八很是开心，给了一直认为自己很笨的我很大信心","like_count":0},{"had_liked":false,"id":50562,"user_name":"安龙","can_delete":false,"product_type":"c1","uid":1238285,"ip_address":"","ucode":"1467E056FA89F3","user_header":"https://static001.geekbang.org/account/avatar/00/12/e5/0d/a8b0eb81.jpg","comment_is_top":false,"comment_ctime":1545009649,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545009649","product_id":100017301,"comment_content":"贪心算法给人这种感觉，每次决策最优，最终结果未必最优，或者组织内的个体都为了自己的利益最优，组织整体未必最优，而且还容易陷入僵局。这有些类似博弈论中的囚徒困境","like_count":0},{"had_liked":false,"id":50544,"user_name":"Stalary","can_delete":false,"product_type":"c1","uid":1101749,"ip_address":"","ucode":"F69AFF7C958D31","user_header":"https://static001.geekbang.org/account/avatar/00/10/cf/b5/d1ec6a7d.jpg","comment_is_top":false,"comment_ctime":1545008512,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545008512","product_id":100017301,"comment_content":"第一个问题可以每次移除数字最大的，第二个问题则是每次服务用时最短的","like_count":0},{"had_liked":false,"id":50543,"user_name":"longer","can_delete":false,"product_type":"c1","uid":1105881,"ip_address":"","ucode":"5D275DE2034E4D","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/d9/d99c871d.jpg","comment_is_top":false,"comment_ctime":1545008472,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1545008472","product_id":100017301,"comment_content":"1从a中选最大的k个数值，剩下的数字值最小。<br>2将n个人各自所需服务时间排序，按所需服务时间从小到大顺序服务，总需要等待时间最短。","like_count":0},{"had_liked":false,"id":50542,"user_name":"smarttime","can_delete":false,"product_type":"c1","uid":1140144,"ip_address":"","ucode":"460ED32D6165ED","user_header":"https://static001.geekbang.org/account/avatar/00/11/65/b0/9d11054a.jpg","comment_is_top":false,"comment_ctime":1545008397,"is_pvip":false,"replies":[{"id":"18152","content":"最优子结构会在动态规划中讲 会对比一下动态规划和贪心在求解问题上的不同。你说的最优子结构和贪心选择实际上是证明贪心算法正确性用的。不怎么能指导解题目 你可以看看算法导论 涉及到这块的 都会涉及很多数学推导","user_name":"作者回复","user_name_real":"gg","uid":"1190123","ctime":1545009646,"ip_address":"","comment_id":50542,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1545008397","product_id":100017301,"comment_content":"希望老师在理论方面还是深入些，在掌握多个案例后理解理论，指导解决更多的问题。既然贪心选择不能总得出最优解，满足什么特征的问题可以什么样的不可以，不能全靠题目量凭经验感觉吧！最优子结构和贪心选择性质拿一个案例介绍一下总是好的，另外希望老师多讲讲自己在知识上的理解！","like_count":0,"discussions":[{"author":{"id":1190123,"avatar":"https://static001.geekbang.org/account/avatar/00/12/28/eb/af064421.jpg","nickname":"王争","note":"","ucode":"2B611BE0E0EDD4","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":433016,"discussion_content":"最优子结构会在动态规划中讲 会对比一下动态规划和贪心在求解问题上的不同。你说的最优子结构和贪心选择实际上是证明贪心算法正确性用的。不怎么能指导解题目 你可以看看算法导论 涉及到这块的 都会涉及很多数学推导","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545009646,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":50540,"user_name":"芜风","can_delete":false,"product_type":"c1","uid":1326892,"ip_address":"","ucode":"2416648949BEA2","user_header":"https://static001.geekbang.org/account/avatar/00/14/3f/2c/ae8a5968.jpg","comment_is_top":false,"comment_ctime":1545008317,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1545008317","product_id":100017301,"comment_content":"虽然还没学到贪心算法，但在看了老师讲解后很迅速就理解了，这种算法思想正是被许多数据结构所采用，以及在日常生活中人们摸索出来的方法。","like_count":0}]}