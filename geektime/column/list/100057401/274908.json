{"id":274908,"title":"05 | 全局时钟：物理时钟和逻辑时钟你Pick谁？","content":"<p>你好，我是王磊，你也可以叫我Ivan。</p><p>今天，我想和你聊聊时间的话题。</p><p>“时光一去永不回，往事只能回味”，这种咏叹时光飞逝的歌曲，你一定听过很多。但是，在计算机的世界里，时间真的是一去不回吗？还真不一定。</p><p>还记得我在<a href=\"https://time.geekbang.org/column/article/272104\">第2讲</a>提到的TrueTime吗？作为全局时钟的一种实现形式，它是Google通过 GPS和原子钟两种方式混合提供的授时机制，误差可以控制在7毫秒以内。正是在这7毫秒内，时光是可能倒流的。</p><p>为什么我们这么关注时间呢？是穿越剧看多了吗？其实，这是因为分布式数据库的很多设计都和时间有关，更确切地说是和全局时钟有关。比如，我们在第2讲提到的线性一致性，它的基础就是全局时钟，还有后面会讲到的多版本并发控制（MVCC）、快照、乐观协议与悲观协议，都和时间有关。</p><h2>常见授时方案</h2><p>那既然有这么多分布式数据库，授时机制是不是也很多，很复杂呢？其实，要区分授时机制也很简单，抓住三个要素就可以了。</p><ol>\n<li>时间源：单个还是多个</li>\n<li>使用的时钟类型：物理时钟还是混合逻辑时钟</li>\n<li>授时点：一个还是多个</li>\n</ol><p>根据排列组合，一共产生了8种可能性，其中NTP（Network Time Protocol）误差大，也不能保证单调递增，所以就没有单独使用NTP的产品；还有一些方案在实践中则是不适用的（N/A）。因此常见的方案主要只有4类，我画了张表格，总结了一下。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/85/f4/85d161f3cbf5a162b78ayydf318cbdf4.jpg?wh=2700*1042\" alt=\"\"></p><h3>1. TrueTime</h3><p>Spanner采用的方案是TrueTime。它的时间源是GPS和原子钟，所以属于多时间源和物理时钟，同时它也采用了多点授时机制，就是说集群内有多个时间服务器都可以提供授时服务。</p><p>就像这一讲开头说的，TrueTime是会出现时光倒流的。例如，A、B两个进程先后调用TrueTime服务，各自拿到一个时间区间，如果在其中随机选择，则可能出现B的时间早于A的时间。不只是TrueTime，任何物理时钟都会存在时钟偏移甚至回拨。</p><p>单个物理时钟会产生误差，而多点授时又会带来整体性的误差，那TrueTime为什么还要这么设计呢？</p><p>因为它也有两个显著的优势：首先是高可靠高性能，多时间源和多授时点实现了完全的去中心化设计，不存在单点；其次是支持全球化部署，客户端与时间服务器的距离也是可控的，不会因为两者通讯延迟过长导致时钟失效。</p><h3>2. HLC</h3><p>CockroachDB和YugabyteDB也是以高性能高可靠和全球化部署为目标，不过Truetime是Google的独门绝技，它依赖于特定硬件设备的思路，不适用于开源软件。所以，它们使用了混合逻辑时钟（Hybrid Logical Clock，HLC），同样是多时间源、多点授时，但时钟采用了物理时钟与逻辑时钟混合的方式。HLC在实现机制上也是蛮复杂的，而且和TrueTime同样有整体性的时间误差。</p><p>对于这个共性问题，Spanner和CockroachDB都会通过一些容错设计来消除时间误差，我会在第12讲中具体介绍相关内容。</p><h3>3. TSO</h3><p>其他的分布式数据库大多选择了单时间源、单点授时的方式，承担这个功能的组件在NewSQL风格架构中往往被称为TSO（Timestamp Oracle），而在PGXC风格架构中被称为全局事务管理器（Golobal Transcation Manager，GTM）。这就是说一个单点递增的时间戳和全局事务号基本是等效的。这种授时机制的最大优点就是实现简便，如果能够保证时钟单调递增，还可以简化事务冲突时的设计。但缺点也很明显，集群不能大范围部署，同时性能也有上限。TiDB、OceanBase、GoldenDB和TBase等选择了这个方向。</p><h3>4. STP</h3><p>最后，还有一些小众的方案，比如巨杉的STP(SequoiaDB Time Protoco)。它采用了单时间源、多点授时的方式，优缺点介于HLC和TSO之间。</p><p>到这里，我已经介绍了4种方案在技术路线上大致的区别。其中TrueTime是基于物理设备的外部授时方案，所以Spanner直接使用就可以了，自身不需要做专门的设计。而对于其他3种方案，如果我们想要深入理解，那么还得结合具体的产品来看。</p><h2>中心化授时：TSO（TiDB）</h2><p>首先，我们从最简单的TSO开始。</p><p>最早提出TSO的，大概是Google的论文“ <a href=\"https://www.cs.princeton.edu/courses/archive/fall10/cos597B/papers/percolator-osdi10.pdf\">Large-scale Incremental Processing Using Distributed Transactions and Notifications</a>”。这篇论文主要是介绍分布式存储系统Percolator的实现机制，其中提到通过一台Oracle为集群提供集中授时服务，称为Timestamp Oracle。所以，后来的很多分布式系统也用它的缩写来命名自己的单点授时机制，比如TiDB和Yahoo的Omid。</p><p>考虑到TiDB的使用更广泛些，这里主要介绍TiDB的实现方式。</p><p>TiDB的全局时钟是一个数值，它由两部分构成，其中高位是物理时间，也就是操作系统的毫秒时间；低位是逻辑时间，是一个18位的数值。那么从存储空间看，1毫秒最多可以产生262,144个时间戳（2^18），这已经是一个很大的数字了，一般来说足够使用了。</p><p>单点授时首先要解决的肯定是单点故障问题。TiDB中提供授时服务的节点被称为Placement Driver，简称PD。多个PD节点构成一个Raft组，这样通过共识算法可以保证在主节点宕机后马上选出新主，在短时间内恢复授时服务。</p><p>那问题来了，如何保证新主产生的时间戳一定大于旧主呢？那就必须将旧主的时间戳存储起来，存储也必须是高可靠的，所以TiDB使用了etcd。但是，每产生一个时间戳都要保存吗？显然不行，那样时间戳的产生速度直接与磁盘I/O能力相关，会存在瓶颈的。</p><p>如何解决性能问题呢？TiDB采用预申请时间窗口的方式，我画了张图来表示这个过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/3c/d6/3c9703cafb44f53596b673d9293e12d6.jpg?wh=2700*1253\" alt=\"\"></p><p>当前PD（主节点）的系统时间是103毫秒，PD向etcd申请了一个“可分配的时间窗口”。要知道时间窗口的跨度是可以通过参数指定的，系统的默认配置是3毫秒，示例采用了默认配置，所以这个窗口的起点是PD当前时间103，时间窗口的终点就在106毫秒处。。写入etcd成功后，PD将得到一个从103到106的“可分配时间窗口”，在这个时间窗口内PD可以使用系统的物理时间作为高位，拼接自己在内存中累加的逻辑时间，对外分配时间戳。</p><p>上述设计意味着，所有PD已分配时间戳的高位，也就是物理时间，永远小于etcd存储的最大值。那么，如果PD主节点宕机，新主就可以读取etcd中存储的最大值，在此基础上申请新的“可分配时间窗口”，这样新主分配的时间戳肯定会大于旧主了。</p><p>此外，为了降低通讯开销，每个客户端一次可以申请多个时间戳，时间戳数量作为参数，由客户端传给PD。但要注意的是，一旦在客户端缓存，多个客户端之间时钟就不再是严格单调递增的，这也是追求性能需要付出的代价。</p><h2>分布式授时：HLC（CockroachDB）</h2><p>前面已经说过TrueTime依赖Google强大的工程能力和特殊硬件，不具有普适性。相反，HLC作为一种纯软的实现方式，更加灵活，所以在CockroachDB、YugabyteDB和很多分布式存储系统得到了广泛使用。</p><p>HLC不只是字面上的意思， TiDB的TSO也混合了物理时钟与逻辑时钟，但两者截然不同。HLC代表了一种计时机制，它的首次提出是在论文“<a href=\"https://cse.buffalo.edu/~demirbas/publications/hlc.pdf\">Logical Physical Clocks and Consistent Snapshots in Globally Distributed Databases</a>”中，CockroachDB和YugabyteDB的设计灵感都来自于这篇论文。下面，我们结合图片介绍一下这个机制。</p><p><img src=\"https://static001.geekbang.org/resource/image/1c/6b/1c40af51f993yyc296635ef27de7e26b.jpg?wh=2700*1461\" alt=\"\"></p><p>假如我们有ABCD四个节点，方框是节点上发生的事件，方框内的三个数字依次是节点的本地物理时间（简称本地时间，Pt）、HLC的高位（简称L值）和HLC的低位（简称C值）。</p><p>A节点的本地时间初始值为10，其他节点的本地时间初始值都是0。四个节点的第一个事件都是在节点刚启动的一刻发生的。首先看A1，它的HLC应该是(10,0)，其中高位直接取本地时间，低位从0开始。同理，其他事件的HLC都是(0,0)。</p><p>然后我们再看一下，随着时间的推移，接下来的事件如何计时。</p><p>事件D2发生时，首先取上一个事件D1的L值和本地时间比较。L值等于0，本地时间已经递增变为1，取最大值，那么用本地时间作为D2的L值。高位变更了，低位要归零，所以D2的HLC就是(1,0)。</p><p><img src=\"https://static001.geekbang.org/resource/image/7b/52/7b34a1c812284bc7049f9ece2323bd52.jpg?wh=2700*650\" alt=\"\"></p><p>如果你看懂了D2的计时逻辑就会发现，D1其实是一样的，只不过D1没有上一个事件的L值，只能用0代替，是一种特殊情况。</p><p>如果节点间有调用关系，计时逻辑会更复杂一点。我们看事件B2，要先判断B2的L值，就有三个备选：</p><ol>\n<li>本节点上前一个事件B1的L值</li>\n<li>当前本地时间</li>\n<li>调用事件A1的L值，A1的HLC是随着函数调用传给B节点的</li>\n</ol><p>这三个值分别是0、1和10。按照规则取最大值，所以B2的L值是10，也就是A1的L值，而C值就在A1的C值上加1，最终B2的HLC就是(10,1)。</p><p><img src=\"https://static001.geekbang.org/resource/image/e6/a4/e6de74cb1b9d2a92cb3bcb711120c3a4.jpg?wh=2700*1010\" alt=\"\"></p><p>B3事件发生时，发现当前本地时间比B2的L值还要小，所以沿用了B2的L值，而C值是在B2的C值上加一，最终B3的HLC就是(10,2)。</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/55/d0473eb6c84a264d2be5104a62d77655.jpg?wh=2700*438\" alt=\"\"></p><p>论文中用伪码表述了完整的计时逻辑，我把它们复制在下面，你可以仔细研究。</p><pre><code>Initially l:j := 0; c:j := 0\nSend or local event\nl’:j := l:j;\nl:j := max(l’:j; pt:j);\nIf (l:j=l’:j) then c:j := c:j + 1\nElse c:j := 0;\nTimestamp with l:j; c:j\nReceive event of message m\nl’:j := l:j;\nl:j := max(l’:j; l:m; pt:j);\nIf (l:j=l’:j=l:m) then c:j := max(c:j; c:m)+1\nElseif (l:j=l’:j) then c:j := c:j + 1\nElseif (l:j=l:m) then c:j := c:m + 1\nElse c:j := 0\nTimestamp with l:j; c:j\n</code></pre><p>其中，对于节点J，l.j表示L值，c.j表示C值，pt.j表示本地物理时间。</p><p>在HLC机制下，每个节点会使用本地时钟作为参照，但不受到时钟回拨的影响，可以保证单调递增。本质上，HLC还是Lamport逻辑时钟的变体，所以对于不同节点上没有调用关系的两个事件，是无法精确判断先后关系的。比如，上面例子中的C2和D2有同样的HLC，但从上帝视角看，C2是早于D2发生的，因为两个节点的本地时钟有差异，就没有体现这种先后关系。HLC是一种松耦合的设计，所以不会去校正节点的本地时钟，本地时钟是否准确，还要靠NTP或类似的协议来保证。</p><h2>多层级中心化授时：STP（巨杉）</h2><p>巨杉采用了单时间源、多点授时机制，它有自己的全局时间协议，称为STP（Serial Time Protocol），是内部逻辑时间同步的协议，并不依赖于NTP协议。</p><p>下面是STP体系下各角色节点的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/c4/ca/c463c3aa47d625a964422yy3df7d2cca.jpg?wh=2700*1252\" alt=\"\"></p><p>STP是独立于分布式数据库的授时方案，该体系下的各角色节点与巨杉的其他角色节点共用机器，但没有必然的联系。</p><p>STP下的所有角色统称为STP Node，具体分为两类：</p><ol>\n<li><strong>STP Server。</strong>多个STP Server构成STP Server组，组内根据协议进行选主，主节点被称为Primary，对外提供服务。</li>\n<li><strong>STP Client。</strong>按照固定的时间间隔，从Primary Server 同步时间。</li>\n</ol><p>巨杉数据库的其他角色节点，如编目节点（CATALOG）、协调节点（COORD）和数据节点（DATA）等，都从本地的STP Node节点获得时间。</p><p>STP与 TSO一样都是单时间源，但通过增加更多的授时点，避免了单点性能瓶颈，而负副作用是多点授时就会造成全局性的时间误差，因此和HLC一样需要做针对性设计。</p><h2>小结</h2><p>好了，今天的内容就到这里了，我们一起回顾下这节课的重点。</p><ol>\n<li>分布式数据库有多种授时机制，它们的区别主要看三个维度。一，是单时间源还是多时间源；二，时间源采用的是物理时钟还是混合逻辑时钟；三，授时点是一个还是多个。</li>\n<li>TrueTime是多时间源、多授时点方案，虽然仍存在时间误差的问题，但实现了高可靠高性能，能够支持Spanner做到全球化部署，是一种非常强悍的设计方案。TrueTime是GPS加原子钟的整合方案，可以看作为一种物理时钟，它完全独立于Spanner的授时服务，不需要Spanner做专门的设计。</li>\n<li>HLC同样是多时间源、多授时点，由于是纯软方案，所以具有更好的通用性。CockroachDB和YugabyteDB都采用了这种方案，也都具备全球化部署能力。HLC的设计基础是Lamport逻辑时钟，对NTP的时间偏移有一定的依赖。</li>\n<li>TSO是典型的单时间源、单点授时方案，实现简便，所以成为多数分布式数据库的选择。如果TSO能够做到单调递增，会简化读写冲突时候的处理过程，但缺点是集群部署范围受到极大的限制。</li>\n<li>还有一些小众的方案，比如巨杉的STP，也试图在寻求新的平衡点。</li>\n</ol><p>有关时间的话题我们就聊到这了。时间误差是普遍存在的，只不过长期在单体应用系统下开发，思维惯性让我们忽略了它，但随着分布式架构的普及，我相信更多的架构设计中都要考虑这个因素。我建议你收藏今天的内容，因为即使抛开分布式数据库不谈，这些设计依然是值得借鉴的。</p><p><img src=\"https://static001.geekbang.org/resource/image/1a/b1/1a6ccbf7fa3801216468c311363a9fb1.jpg?wh=2700*3787\" alt=\"\"></p><h2>思考题</h2><p>最后，今天留给你的思考题还是关于时间的。在后续课程没有展开之前，我们不妨先来开放式地讨论一下，你觉得时间对于分布式数据库的影响是什么？或者你也可以谈谈在其他分布式系统中曾经遇到的关于时间的问题。</p><p>欢迎你在评论区留言和我一起讨论，我会在答疑篇回复这个问题。如果你身边的朋友也对全局时钟或者分布式架构下如何同步时间这个话题感兴趣，你也可以把今天这一讲分享给他，我们一起讨论。</p><h2>学习资料</h2><p>Daniel Peng and Frank Dabek: <a href=\"https://www.cs.princeton.edu/courses/archive/fall10/cos597B/papers/percolator-osdi10.pdf\"><em>Large-scale Incremental Processing Using Distributed Transactions and Notifications</em></a><br>\nSandeep S. Kulkarni et al.: <a href=\"https://cse.buffalo.edu/~demirbas/publications/hlc.pdf\"><em>Logical Physical Clocks and Consistent Snapshots in Globally Distributed Databases</em></a></p>","comments":[{"had_liked":false,"id":243400,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1598088804,"is_pvip":false,"replies":[{"id":"89750","content":"你好，第一个问题，TiDB的PD虽然是高可靠的，但工作的只是主节点，所以还是单点授时。第二个问题，多时间源，是说多个独立提供时间的实例，比如部分原子钟和GPS坏掉了，其他的原子钟可以照常提供时间不受影响。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598225569,"ip_address":"","comment_id":243400,"utype":1}],"discussion_count":2,"race_medal":0,"score":"40252794468","product_id":100057401,"comment_content":"老师能不能再多解释一下关于多时间源的意思？<br>１. 我理解多授时点应该是指当前集群有多个可以获取时间的服务器。TiDB的PD是通过集群化来做到高可用的，那么这为什么还被归于单授时点呢？<br>2. 多时间源怎么理解？文中提到Spanner是GPS＋物理时钟，是说最终的时间计算会通过这２个指标计算的意思吗？如果是单时间源的话，获取的时间只取决于一个因素？","like_count":9,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504275,"discussion_content":"你好，第一个问题，TiDB的PD虽然是高可靠的，但工作的只是主节点，所以还是单点授时。第二个问题，多时间源，是说多个独立提供时间的实例，比如部分原子钟和GPS坏掉了，其他的原子钟可以照常提供时间不受影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598225569,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2250114,"avatar":"https://static001.geekbang.org/account/avatar/00/22/55/82/985411a8.jpg","nickname":"xyx","note":"","ucode":"1AECC9DDAC3D11","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351257,"discussion_content":"就是单主和双主架构的区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614217106,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242599,"user_name":"朱海昆","can_delete":false,"product_type":"c1","uid":1047293,"ip_address":"","ucode":"73E49C17A0314E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fa/fd/3a6d013a.jpg","comment_is_top":false,"comment_ctime":1597795110,"is_pvip":true,"replies":[{"id":"89775","content":"说的不错，而且我认为分布式数据库已经进入了规模化商用阶段，应用会逐渐多起来的。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598234520,"ip_address":"","comment_id":242599,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40252500774","product_id":100057401,"comment_content":"工作中分布式数据库落地的还是相对少。目前项目各种分布式服务，一般都依赖于一个序列号生成器，一般采用雪花或者雪花变种的一些算法实现。为了保证序列号的唯一或者进一步保证递增，依赖于时钟的同步。现在的做法一般都是结合业务场景，对时钟进行一定的校验，同时对于时钟回拨做一些容错等处理解决问题。<br>目前主流还是用应用层的方案来解决分布式的各种问题，如果将来分布式数据库成熟了，应用解决方案会大大简化。","like_count":10,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504045,"discussion_content":"说的不错，而且我认为分布式数据库已经进入了规模化商用阶段，应用会逐渐多起来的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598234520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285456,"user_name":"KayGuoWhu","can_delete":false,"product_type":"c1","uid":1032375,"ip_address":"","ucode":"7C5BCFEA6ECF3F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c0/b7/b518912b.jpg","comment_is_top":false,"comment_ctime":1616823388,"is_pvip":false,"replies":[{"id":"103628","content":"时钟的本质是用于比较事件发生的先后次序，不具有唯一性，但逻辑时钟可以弥补唯一性的问题。而唯一ID只具有唯一性，无法比较次序。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1616918724,"ip_address":"","comment_id":285456,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35976561756","product_id":100057401,"comment_content":"全局时钟的目的是，生成全局唯一的时间戳。和全局唯一ID的区别和作用，有什么差异？","like_count":9,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517679,"discussion_content":"时钟的本质是用于比较事件发生的先后次序，不具有唯一性，但逻辑时钟可以弥补唯一性的问题。而唯一ID只具有唯一性，无法比较次序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616918724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242699,"user_name":"开心哥","can_delete":false,"product_type":"c1","uid":1705468,"ip_address":"","ucode":"D44C1F03B23C5A","user_header":"https://static001.geekbang.org/account/avatar/00/1a/05/fc/bceb3f2b.jpg","comment_is_top":false,"comment_ctime":1597819660,"is_pvip":false,"replies":[{"id":"89523","content":"这大概就是学术研究的乐趣，突然发现自己关注的东西，跃升到了更高的维度，哈哈。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1597829350,"ip_address":"","comment_id":242699,"utype":1}],"discussion_count":1,"race_medal":0,"score":"31662590732","product_id":100057401,"comment_content":"从牛顿力学进入爱因斯坦的相相对论时空！","like_count":7,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504076,"discussion_content":"这大概就是学术研究的乐趣，突然发现自己关注的东西，跃升到了更高的维度，哈哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597829350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272141,"user_name":"wy","can_delete":false,"product_type":"c1","uid":1064681,"ip_address":"","ucode":"41C1B304E7F032","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e9/116f1dee.jpg","comment_is_top":false,"comment_ctime":1609945733,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18789814917","product_id":100057401,"comment_content":"单体数据库时代,我们一般都会忽略时间问题，因为即使时间是错的，但是起码它是递增的。但是在分布式数据库中，多个分片可能分布在不同的机房里面，这些机房甚至可能在不同的国家，可能会出现时间倒退的现象，对于分布式数据库的数据一致性的实现来说是影响很大的","like_count":4},{"had_liked":false,"id":243462,"user_name":"piboye","can_delete":false,"product_type":"c1","uid":1066752,"ip_address":"","ucode":"7CFD8712857A85","user_header":"https://static001.geekbang.org/account/avatar/00/10/47/00/3202bdf0.jpg","comment_is_top":false,"comment_ctime":1598140905,"is_pvip":true,"replies":[{"id":"89711","content":"你好，还是比较本地时间的，否则就是纯粹的逻辑时钟了，那样无关事件的时钟偏差就太大了。有兴趣的话，也可以研究下课程中的论文，有疑问我们再一起讨论。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598147762,"ip_address":"","comment_id":243462,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18778010089","product_id":100057401,"comment_content":"hlc判断大小是先 高位，再低位，判断的时候本地时间可以忽略吧？","like_count":5,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504293,"discussion_content":"你好，还是比较本地时间的，否则就是纯粹的逻辑时钟了，那样无关事件的时钟偏差就太大了。有兴趣的话，也可以研究下课程中的论文，有疑问我们再一起讨论。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598147762,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318468,"user_name":"Tzen","can_delete":false,"product_type":"c1","uid":1270838,"ip_address":"","ucode":"341F08152EFC0C","user_header":"https://static001.geekbang.org/account/avatar/00/13/64/36/f14efbe7.jpg","comment_is_top":false,"comment_ctime":1635304782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10225239374","product_id":100057401,"comment_content":"老师，TiDB的TSO时间窗口tso-save-interval默认值好像是3秒","like_count":2},{"had_liked":false,"id":291430,"user_name":"大汉_客家族_数据工程_曾院士","can_delete":false,"product_type":"c1","uid":1215758,"ip_address":"","ucode":"AD73C36D617CA1","user_header":"https://static001.geekbang.org/account/avatar/00/12/8d/0e/1f49ade9.jpg","comment_is_top":false,"comment_ctime":1620285203,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5915252499","product_id":100057401,"comment_content":"全局时间是解决在分布式环境下DML操作顺序，并且是唯一性。<br><br>全球化部暑时间会成为24个时区。<br><br>若统一使用格林唯志时间，那么是不是简单多了？","like_count":1},{"had_liked":false,"id":248765,"user_name":"Lukia","can_delete":false,"product_type":"c1","uid":1028698,"ip_address":"","ucode":"C19472337BCCC6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b2/5a/574f5bb0.jpg","comment_is_top":false,"comment_ctime":1600306077,"is_pvip":false,"replies":[{"id":"91336","content":"是的，已经分配的时间窗口就舍弃了，这样保证不会时间戳不会重叠","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1600326797,"ip_address":"","comment_id":248765,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5895273373","product_id":100057401,"comment_content":"“103 到 106 的“可分配时间窗口”，在这个时间窗口内 PD 可以使用系统的物理时间作为高位，拼接自己在内存中累加的逻辑时间，对外分配时间戳。 ” 如果主PD在104发生了故障，切换新主PD之后岂不是105和106的时间窗口都不可用了？","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505734,"discussion_content":"是的，已经分配的时间窗口就舍弃了，这样保证不会时间戳不会重叠","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600326797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":243114,"user_name":"真名不叫黄金","can_delete":false,"product_type":"c1","uid":1174066,"ip_address":"","ucode":"FB611FC98F5BA7","user_header":"https://static001.geekbang.org/account/avatar/00/11/ea/32/1fd102ec.jpg","comment_is_top":false,"comment_ctime":1597971418,"is_pvip":false,"replies":[{"id":"89609","content":"说的对，点赞。我在第12讲会详细谈这个问题。","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1597973614,"ip_address":"","comment_id":243114,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5892938714","product_id":100057401,"comment_content":"感谢老师分享～<br>顺便说下我对Spanner的理解:<br>Spanner解决True Time回拨的问题，应该是使用等待～ True Time会返回一个时间区间，保证真实时间是在这个区间内的，那么Spanner会等待这个时间过去，以此保证时钟不会回拨","like_count":1,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504183,"discussion_content":"说的对，点赞。我在第12讲会详细谈这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597973614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356460,"user_name":"刘章","can_delete":false,"product_type":"c1","uid":1009693,"ip_address":"浙江","ucode":"7608C518D49AE4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLxEbhSEziblPNVkr9XFIAzPCib0TQvBxHYwiaKiaib7ExZ8dmUWyqWoibSedACTHCf52INMib80ic92G6wQ/132","comment_is_top":false,"comment_ctime":1662342882,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662342882","product_id":100057401,"comment_content":"看的比较费劲，有没有分布式数据库入门级别的教程推荐","like_count":0},{"had_liked":false,"id":347418,"user_name":"jie","can_delete":false,"product_type":"c1","uid":1621432,"ip_address":"","ucode":"E93A1818AB2459","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/WxLKJlXCibwqO92vB8XTicLQiahrhuUEqP7yT9dearZxLzbia7oMdsLmon5J4LJyTfIWchHY3bKfibm1lS1aZarZs4Q/132","comment_is_top":false,"comment_ctime":1654003629,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1654003629","product_id":100057401,"comment_content":"hlc 是矢量时钟吗","like_count":0,"discussions":[{"author":{"id":1144495,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/af/c4e518ff.jpg","nickname":"布衣不舍","note":"","ucode":"7576087DC22F3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580807,"discussion_content":"混合逻辑时钟，和vector clock是不同的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658381025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336849,"user_name":"张可夫斯基","can_delete":false,"product_type":"c1","uid":1076487,"ip_address":"","ucode":"3B8DF6D98583F2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIKoEicqUZTJly55qoUXRmK4wia7YbnibsMncJaO6tKgKAQNJRfpMsibvfeiaukIibsCsuaic8QjQ3gOoTGA/132","comment_is_top":false,"comment_ctime":1646397360,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1646397360","product_id":100057401,"comment_content":"----原文<br>这三个值分别是 0、1 和 10。按照规则取最大值，所以 B2 的 L 值是 10，也就是 A1 的 L 值，而 C 值就在 A1 的 C 值上加 1，最终 B2 的 HLC 就是 (10,1)。<br><br>---问题<br>    （这里如果B1的L值是最大的，那么B2的L值取B1的L值，B2的C值是在B1的C值上加1吗?（谁的L值大就以谁为基准？","like_count":0},{"had_liked":false,"id":336846,"user_name":"张可夫斯基","can_delete":false,"product_type":"c1","uid":1076487,"ip_address":"","ucode":"3B8DF6D98583F2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIKoEicqUZTJly55qoUXRmK4wia7YbnibsMncJaO6tKgKAQNJRfpMsibvfeiaukIibsCsuaic8QjQ3gOoTGA/132","comment_is_top":false,"comment_ctime":1646396485,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1646396485","product_id":100057401,"comment_content":"问题：如果PD写ETCD延迟时间大于窗口大小，PD将最大窗口时间（当前时间+窗口大小）写入ETCD后，PD的系统时间又大于了最大窗口时间，那么PD是不是又要重新申请写入？如果这种延迟一直存在，那就会一直生成不了ID。","like_count":0,"discussions":[{"author":{"id":1144495,"avatar":"https://static001.geekbang.org/account/avatar/00/11/76/af/c4e518ff.jpg","nickname":"布衣不舍","note":"","ucode":"7576087DC22F3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580808,"discussion_content":"不需要吧，虽然已经小于系统时间了，但还是可以用的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658381087,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290895,"user_name":"冯磊","can_delete":false,"product_type":"c1","uid":1855112,"ip_address":"","ucode":"4FFB8B984269FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIYj6Zv3ibicLebxo7lsPMEwpBynHkYp8pLc3FcltUfmOBSRxpmicEwIAgP9OvSKnGGdaxwsZ7yiciaSsQ/132","comment_is_top":false,"comment_ctime":1619841126,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619841126","product_id":100057401,"comment_content":"理论性好强，但都是偏OLTP系统，至于OLAP还要自己消化下。有没有交流群，有的话希望加下。或者组织一个，VX：aacc6688521","like_count":0},{"had_liked":false,"id":242860,"user_name":"游弋云端","can_delete":false,"product_type":"c1","uid":1208637,"ip_address":"","ucode":"A960E8F5AA25B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/71/3d/da8dc880.jpg","comment_is_top":false,"comment_ctime":1597856738,"is_pvip":false,"replies":[{"id":"89773","content":"嗯，这个还是蛮重要的","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598234192,"ip_address":"","comment_id":242860,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597856738","product_id":100057401,"comment_content":"期待老师后续的时钟应用场景恩讲解！","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504116,"discussion_content":"嗯，这个还是蛮重要的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598234192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242810,"user_name":"南国","can_delete":false,"product_type":"c1","uid":1897062,"ip_address":"","ucode":"0D8D3C5F4EB8AE","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","comment_is_top":false,"comment_ctime":1597847735,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1597847735","product_id":100057401,"comment_content":"才疏学浅，感觉时间对于分布式的影响就是事件的顺序了。这也许也是分布式关系型数据库这么看重全局时钟（跨节点的事务需要区分多节点并发事件的顺序），而大多数nosql（我知道的大多数）却不需要的原因吧。","like_count":0,"discussions":[{"author":{"id":1897062,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/f2/66/b16f9ca9.jpg","nickname":"南国","note":"","ucode":"0D8D3C5F4EB8AE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":299932,"discussion_content":"上面描述的有点问题，不是跨结点的事务，而是不同结点写入，这在无主架构时是个问题，当然单点架构事件顺序遵循主节点即可，这就不需要全局时钟了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597882806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242635,"user_name":"myrfy","can_delete":false,"product_type":"c1","uid":1169401,"ip_address":"","ucode":"2814BAE5D70098","user_header":"","comment_is_top":false,"comment_ctime":1597801239,"is_pvip":false,"replies":[{"id":"89879","content":"这个理解有点小问题，复制的顺序并不影响操作的顺序和数据的可见性，还是要看操作的全局时间。推荐关注一下第12讲","user_name":"作者回复","user_name_real":"王磊(Ivan)","uid":"1602401","ctime":1598409344,"ip_address":"","comment_id":242635,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597801239","product_id":100057401,"comment_content":"时间决定了数据库系统看到的事件发生顺序。对于对同一条记录进行操作的oplog在不同节点之间复制，然后在不同节点apply的时候，决定了谁在谁之前操作","like_count":0,"discussions":[{"author":{"id":1602401,"avatar":"https://static001.geekbang.org/account/avatar/00/18/73/61/3059679f.jpg","nickname":"王磊(Ivan)","note":"","ucode":"CF0B955A06FE2A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504056,"discussion_content":"这个理解有点小问题，复制的顺序并不影响操作的顺序和数据的可见性，还是要看操作的全局时间。推荐关注一下第12讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598409344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}