{"id":166001,"title":"16 | 环境管理：一切皆代码是一种什么样的体验？","content":"<p>你好，我是石雪峰。</p><p>网上经常流传着一些有关偏见地图的段子，通俗点说，“偏见地图”就是说网友对世界其他地方的印象，比如很多人认为天津人都会说相声。</p><p>如果软件开发中也有偏见地图的话，那么，对不熟悉运维的人来说，提到运维团队，可能就觉得是维护环境的那帮人。于是，环境就成了软件行业的“头号背锅侠”。比如，线上出故障了，可以是环境配置错误；测试有些功能没测到，可以是没有测试环境；开发出Bug了，也不管三七二十一，先甩给环境再说……所以你看，好像什么问题都可能跟环境相关。这种没来由的偏见，也加剧了开发和运维之间的不信任。</p><h2>环境管理的挑战</h2><p>那么，为啥环境总是让人这么不放心呢？其实，这是因为，现代企业所面对的业务复杂性，很大程度上都可以直观地体现在环境管理的方方面面上。总结起来，我认为一共有5点：</p><p>1.<strong>环境种类繁多</strong></p><p>首先，软件关联的环境种类越来越多，比如开发环境、测试环境、UAT用户验收测试环境、预发布环境、灰度环境、生产环境等。光是分清这些环境的名字和作用，就不是件容易的事情。</p><p>2.<strong>环境复杂性上升</strong></p><p>现代应用的架构逐渐从单体应用向微服务应用转变。随着服务的拆分，各种缓存、路由、消息、通知等服务缺一不可，任何一个地方配置出错，应用都有可能无法正常运行。这还不包括各种服务之间的依赖和调用关系，这就导致很多企业部署一套完整环境的代价极高，甚至变成了不可能完成的任务。</p><!-- [[[read_end]]] --><p>3.<strong>环境一致性难以保证</strong></p><p>比如，那句经典的甩锅名言“在我的机器上没问题”说的就是环境不一致的问题。如果无法保证各种环境配置的一致性，那么类似的问题就会无休止地发生。实际上，在很多企业中，生产环境由专门的团队管理维护，管理配置还算受控。但是对于开发环境来说，基本都属于一个黑盒子，毕竟是研发本地的电脑，即便想管也管不到。</p><p>4.<strong>环境交付速度慢</strong></p><p>由于职责分离，环境的申请流程一般都比较冗长，从提起申请到交付可用的环境，往往需要2周甚至更长的时间。</p><p>一方面，这跟公司内部的流程审批有关。我见过一家企业申请一套环境需要5级审批，想象一下，于一家扁平化组织的公司，从员工到CEO之间的层级可能也没有5级。另一方面，环境配置过程依赖手动完成，过程繁琐，效率也不高，大多数情况下，环境配置文档都属于过时状态，并不会根据应用升级而动态调整，这么一来二去，几天就过去了。</p><p>5.<strong>环境变更难以追溯</strong></p><p>产品上线以后出现问题，查了半天才发现，原来是某个环境参数的配置导致的。至于这个配置是谁改的，什么时间改的，为什么修改，经过了哪些评审，一概不知，这就给线上环境的稳定性带来了极大的挑战和潜在的风险。要知道，<strong>环境配置变更的重要性，一点也不亚于代码变更，通常都需要严格管控</strong>。</p><h2>基础设施即代码</h2><p>你可能会问，有没有一种方法，可以用来解决这些问题呢？还真有！这就是基础设施即代码。可以这么说，如果没有采用基础设施即代码的实践，DevOps一定走不远。那么，到底什么是基础设施即代码呢？</p><p><strong>基础设施即代码就是用一种描述性的语言，通过文本管理环境配置，并且自动化完成环境配置的方式。典型的就是以CAPS为代表的自动化环境配置管理工具</strong>，也就是Chef、Ansible、Puppet和Saltstacks四个开源工具的首字母缩写。</p><p>这个概念听起来比较抽象，那么，所谓基础设施即代码，这个描述基础设施的代码长什么样子呢？我给你分享一段Ansible的配置示例，你可以参考一下。</p><pre><code>---\n  - name: Playbook\n    hosts: webservers\n    become: yes\n    become_user: root\n    tasks:\n      - name: ensure apache is at the latest version\n        yum:\n          name: httpd\n          state: latest\n      - name: ensure apache is running\n        service:\n          name: httpd\n          state: started\n</code></pre><p>无论你是否了解Ansible，单就这段代码而言，即便你不是专业运维或者工具专家，在注释的帮助下，你也大概能理解这个环境配置过程。实际上，这段代码就做了两件事：安装http的软件包，并启动相关服务。</p><p>为什么基础设施即代码能够解决以上问题呢？</p><p>首先，对于同一个应用来说，各种环境的配置过程大同小异，只是在一些配置参数和依赖服务方面有所差别。<strong>通过将所有环境的配置过程代码化，每个环境都对应一份配置文件，可以实现公共配置的复用</strong>。当环境发生变更时，就不再需要登录机器，而是直接修改环境的配置文件。这样一来，环境配置就成了一份活的文档，再也不会因为更新不及时而失效了。</p><p>其次，<strong>环境的配置过程，完全可以使用工具自动化批量完成</strong>。你只需要引用对应环境的配置文件即可，剩下的事情都交给工具。而且，即便各台机器的初始配置不一样，工具也可以保证环境的最终一致性。由于现代工具普遍支持幂等性原则，即便执行完整的配置过程，工具也会自动检测哪些步骤已经配置过了，然后跳过这个步骤继续后面的操作。这样一来，大批量环境的配置效率就大大提升了。</p><p>最后，既然环境配置变成了代码，自然可以直接纳入版本控制系统中进行管理，享受版本控制的福利。任何环境的配置变更都可以通过类似Git命令的方式来实现，不仅收敛了环境配置的入口，还让所有的环境变更都完全可追溯。</p><p>基础设施即代码的实践，通过人人可以读懂的代码将原本复杂的技术简单化，这样一来，即便是团队中不懂运维的角色，也能看懂和修改这个过程。这不仅让团队成员有了一种共同的语言，还大大减少了不同角色之间的依赖，降低了沟通协作成本。这也是基础设施即代码的隐形价值所在，特别符合DevOps所倡导的协作原则。</p><p>看到这儿，你可能会说，这不就是一种自动化手段吗？好像也没什么特别的呀。回头想想，DevOps的初衷就是打破开发和运维的隔阂，但究竟要如何打通呢？</p><p>在大多数公司，部署上线的工作都是由专职的运维团队来负责，开发团队只要将测试通过的软件包提供给运维团队就行了。所以，<strong>开发和运维的自然边界就在于软件包交付的环节，只有打通开发环节的软件集成验收的CI流水线和运维环节的应用部署CD流水线上线，才能真正实现开发运维的一体化</strong>。而当版本控制系统遇上基础设施即代码，就形成了一种绝妙的组合，那就是<strong>GitOps</strong>。</p><h3>开发运维打通的GitOps实践</h3><p>顾名思义，GitOps就是基于版本控制系统Git来实现的一套解决方案，核心在于基于Git这样一个统一的数据源，通过类似代码提交过程中的拉取请求的方式，也就是Pull Request，来完成应用从开发到运维的交付过程，让开发和运维之间的协作可以基于Git来实现。</p><p>虽然GitOps最初是基于容器技术和Kubernetes平台来实现的，但它的理念并不局限于使用容器技术，实际上，<strong>它的核心在于通过代码化的方式来描述应用部署的环境和部署过程</strong>。</p><p>在GitOps中，每一个环境对应一个环境配置仓库，这个仓库中包含了应用部署所需要的一切过程。比如，使用Kubernetes的时候，就是应用的一组资源描述文件，比如部署哪个版本，开放哪些端口，部署过程是怎样的。</p><p>当然，你也可以使用Helm工具来统一管理这些资源文件。如果你还不太熟悉Kubernetes，可以简单地把它理解为云时代的Linux，而Helm就是RPM或者APT这些包管理工具，通过应用打包的方式，来简化应用的部署过程。</p><p>除了基于Kubernetes的应用，你也可以使用类似Ansible Playbook的方式。只不过与现成的Helm工具相比，使用Ansible时，需要自己实现一些部署脚本，不过这也不是一件复杂的事情。</p><p>你可以看看下面的这段配置文件示例。这些配置文件采用了yml格式，它描述了应用部署的主要信息，其中，镜像名称使用参数形式，会有一个独立的文件来统一管理这些变量，你可以根据应用的实际版本进行替换，以达到部署不同应用的目标。</p><pre><code>apiVersion: extensions/v1beta1\nkind: Deployment\nspec:\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: demo \n    spec:\n      containers:\n      - name: demo\n        image: &quot;{{ .Values.image.tag }}&quot;\n        imagePullPolicy: IfNotPresent\n        ports:\n        - containerPort: 80\n</code></pre><p>现在，我们来看看这个方案是如何实现的。</p><p>首先，开发人员提交新的代码改动到Git仓库，这会自动触发持续集成流水线，对于常见的版本控制系统来说，配置钩子就可以实现。当代码经过一系列的构建、测试和检查环节，并最终通过持续集成流水线之后，就会生成一个新版本的应用，并上传到制品库中，典型的就是Docker镜像文件或者war包的形式。</p><p>以上面的配置为例，假如生成了应用的1.0版本镜像，接下来，会自动针对测试环境的配置仓库创建一个代码合并请求，变更的内容就是修改镜像名称的版本号为1.0。这个时候，开发或者测试人员可以通过接受合并的方式，将这段环境变更配置合入主干，并再一次自动化地触发部署流水线，将新版本的应用部署到测试环境中。每次应用的部署采用相同的过程，一般就是将最新版本的应用制品拷贝到服务器并且重启，或者更新容器镜像并触发滚动升级。</p><p>这个时候，测试环境就部署完成了，当然，如果使用Kubernetes，可以利用<strong>命名空间的特性</strong>，快速创建出一套独立的环境，这是使用传统部署的应用所不具备的优势。在测试环境验收通过后，可以将代码合并到主分支，再一次触发完整的集成流水线环节，进行更加全面的测试工作。</p><p>当流水线执行成功后，可以自动针对预发布环境的配置仓库创建一个合并请求，当评审通过后，系统自动完成预发布环境的部署。如果职责分离要求预发布环境的部署必须由运维人员来操作，把合并代码的权限只开放给运维人员就行了。当运维人员收到通知后，可以登录版本控制系统，查看本次变更的范围，评估影响，并按照部署节奏完成部署。而这个操作，只需要在界面点击按钮就可以实现了。这样一来，开发和运维团队的协作就不再是一个黑盒子了。大家基于代码提交评审的方式完成应用的交付部署，整个过程中的配置过程和参数信息都是透明共享的。</p><p>我跟你分享一幅流程图，希望可以帮你充分地理解这个分层部署的过程。</p><p><img src=\"https://static001.geekbang.org/resource/image/2d/fc/2de091bea58d1c4f376a26fa61c8f0fc.png?wh=1496*962\" alt=\"\"></p><p>那么，GitOps的好处究竟有哪些呢？</p><p>首先，就是<strong>环境配置的共享和统一管理</strong>。原本复杂的环境配置过程通过代码化的方式管理起来，每个人都能看懂。这对于开发自运维来说，大大地简化了部署的复杂度。</p><p>另外，所有最新的环境配置都以Git仓库中为准，每一次的变更和部署过程也同样由版本控制系统进行记录。即便仅仅是环境工具的升级，也需要经过以上的完整流程，从而实现了环境和工具升级的层层验证。所以，这和基础设施即代码的理念可以说有异曲同工之妙。</p><h3>开发环境的治理实践</h3><p>关于开发环境的治理，我再给你举一个实际的案例。对于智能硬件产品开发来说，最大的痛点就是各种环境和工具的配置非常复杂，每个新员工入职，配置环境就要花上几天时间。另外，由于工具升级频繁和多平台并行开发的需要，开发经常需要在多种工具之间进行来回切换，管理成本很高。</p><p>关于这个问题，同样<strong>可以采用基础设施即代码的方法，生成一个包含全部工具依赖的Docker镜像，并分发给开发团队</strong>。在开发时仅需要拉起一个容器，将代码目录挂载进去，就可以生成一个完全标准化的研发环境。当工具版本升级时，可以重新制作一个新的镜像，开发本地拉取后，所有的工具就升级完成了，这大大简化了研发环境的维护成本。</p><p>其实，我们也可以发挥创新能力，<strong>把多种工具结合起来使用，以解决实际问题</strong>。比如，我们团队之前要同时支持虚拟化设备和容器化两种环境，虚拟化可以采用传统的Ansible方式完成环境部署，但容器化依赖于镜像的Dockerfile。这就存在一个问题：要同时维护两套配置，每次升级的时候也要同时修改虚拟化和容器化的配置文件。于是，为了简化这个过程，就可以把两者的优势结合起来，使用单一数据源维护标准环境。</p><p>具体来说，在Dockerfile中，除了基础环境和启动脚本，环境配置部分同样采用Ansible的方式完成，这样每次在生成一个新的镜像时，就可以使用相同的方式完成环境的初始化过程，配置示例如下：</p><pre><code>FROM  harbor.devops.com:5000/test:ansible \nMAINTAINER XX &lt;xx@devops.com&gt;\nADD ./docker  /docker\nWORKDIR /docker\nRUN export TMPDIR=/var/tmp &amp;&amp; ansible-playbook -v -i playbooks/inventories/docker playbooks/docker_container.yml\n</code></pre><h3>开发本地测试的实践</h3><p>其实，我始终认为，环境管理是DevOps推行过程中的一个潜在“大坑”。为了提升开发者的效率，业界也在探索很多新的实践方向。我在前面也给你介绍过快速失败的理念，只有在第一时间反馈失败，才能最小化问题修复成本。而对于研发来说，由于测试环境的缺失，往往要等到代码提交并部署完成之后才能获取反馈，这个周期显然是可以优化的。关于如何解决开发本地测试的问题，在Jenkins社区也有一些相关的实践。</p><p>比如，你基于Kubernetes创建了一套最小测试环境，按照正常过程来说，如果改动一行代码，你需要经过代码提交、打包镜像、上传制品、更新服务器镜像等，才能开始调试。但如果你使用<a href=\"https://github.com/ksync/ksync\">KSync</a>工具，这些过程统统可以省略。KSync可以帮你建立本地工作空间和远端容器目录的关联，并自动同步代码。也就是说，只要在本地IDE里面修改了一行代码，保存之后，KSync就可以帮你把本地代码传到线上的容器中，对于类似Python这样的解释型语言来说特别省事。</p><p>谷歌也开源了一套基于容器开发自动部署工具<a href=\"https://github.com/GoogleContainerTools/skaffold\">Skaffold</a>，跟KSync类似，使用Skaffold命令就可以创建一套Kubernetes环境。当本地修改一行代码之后，Skaffold会自动帮你重新生成镜像文件，推送远端，并部署生效，让代码开发变得所见即所得。研发只需要专注于写代码这件事情，其余的全部自动化，这也是未来DevOps工程实践的一个发展方向。</p><h2>总结</h2><p>今天，我给你介绍了企业环境管理的五个难题：种类多，复杂性，一致性，交付速度和变更追溯，并解释了为什么基础设施即代码是解决环境管理问题的最佳实践，还跟你分享了三个基础设施即代码的案例，希望能够帮助你理解这个过程。</p><p>如果你不太了解Kubernetes和容器，可能会有些内容难以消化。我想跟你说的是，<strong>无论采用什么技术，代码化管理的方式都是未来的发展趋势</strong>，建议你结合文章中的代码和流程图仔细梳理一下，并且尝试使用CAPS工具重新定义环境部署过程，将环境配置过程实现代码化。如果有问题，可以及时在留言区提问。</p><h2>思考题</h2><p>你认为推行开发自运维的最大难点是什么？关于解决这些难点，你有什么建议吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起讨论，共同学习进步。如果你觉得这篇文章对你有所帮助，欢迎你把文章分享给你的朋友。</p><p></p>","neighbors":{"left":{"article_title":"15 | 技术债务：那些不可忽视的潜在问题","id":165480},"right":{"article_title":"17 | 部署管理：低风险的部署发布策略","id":167353}},"comments":[{"had_liked":false,"id":152809,"user_name":"陈斯佳","can_delete":false,"product_type":"c1","uid":1259323,"ip_address":"","ucode":"C236F874FC767A","user_header":"https://static001.geekbang.org/account/avatar/00/13/37/3b/495e2ce6.jpg","comment_is_top":false,"comment_ctime":1574082885,"is_pvip":false,"replies":[{"id":"58697","content":"你好，的确很多人关心这个话题，所以我会在27讲把这些工具串联起来，搭建一个小型的持续交付流水线，通过案例给大家介绍这些工具方面的内容哈。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1574116818,"ip_address":"","comment_id":152809,"utype":1}],"discussion_count":1,"race_medal":0,"score":"44523755845","product_id":100036601,"comment_content":"老师，您以后会有专门一章来讲解K8S、Docker或Jenkins吗？或者您会提供一些资料或网站啥的让大家可以学习的吗？我感觉这几个软件的运用好重要，而对于一些实际工作业务中没有用到这些工具的同学有时候缺少一个实际的抓手来上手…","like_count":10,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474948,"discussion_content":"你好，的确很多人关心这个话题，所以我会在27讲把这些工具串联起来，搭建一个小型的持续交付流水线，通过案例给大家介绍这些工具方面的内容哈。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574116818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152183,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1573904713,"is_pvip":false,"replies":[{"id":"58572","content":"你好，我也有同感哈，之前在小公司是全套基于Kubernetes的研发环境，但是大公司基础设施不在控制范围内，反而有些倒退。所以还是看业务倒逼上云的节奏，毕竟上云还是有不可取代的优势，目前的话已经有不少业务跑在云上啦，之前在小公司的经验就发挥了作用。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1574031977,"ip_address":"","comment_id":152183,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27343708489","product_id":100036601,"comment_content":"老师讲得好，kubernetes我很早就在用了，在小公司很好推行，大公司却很难推动。","like_count":7,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474742,"discussion_content":"你好，我也有同感哈，之前在小公司是全套基于Kubernetes的研发环境，但是大公司基础设施不在控制范围内，反而有些倒退。所以还是看业务倒逼上云的节奏，毕竟上云还是有不可取代的优势，目前的话已经有不少业务跑在云上啦，之前在小公司的经验就发挥了作用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574031977,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1119490,"avatar":"https://static001.geekbang.org/account/avatar/00/11/15/02/66f65388.jpg","nickname":"雷霹雳的爸爸","note":"","ucode":"99BBA6D83DD11F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":51647,"discussion_content":"大公司都有一套成型的玩意，确实反倒成为一种障碍，但关键在于是不是能理解持续改进并付诸行动，大公司这时的人力资源储备优势还是很明显的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573912677,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":294377,"user_name":"BertGeek","can_delete":false,"product_type":"c1","uid":1452799,"ip_address":"","ucode":"8E1D72C9F9778C","user_header":"https://static001.geekbang.org/account/avatar/00/16/2a/ff/a9d72102.jpg","comment_is_top":false,"comment_ctime":1621919657,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1621919657","product_id":100036601,"comment_content":"标准项目，如互联网产品，企业自由平台，可以推行devops，甚至k8s高效率上线<br>我们公司，基本私有环境，客户要求、网络限制等。<br>有的容器都不让用。<br>所以，大多数企业平台产品，还是很有实施价值","like_count":1},{"had_liked":false,"id":265415,"user_name":"Tron","can_delete":false,"product_type":"c1","uid":1130053,"ip_address":"","ucode":"2C4FC68C80A7DD","user_header":"https://static001.geekbang.org/account/avatar/00/11/3e/45/3879f334.jpg","comment_is_top":false,"comment_ctime":1606893165,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606893165","product_id":100036601,"comment_content":"我们公司的困难点是： 传统软件，比较重，容器化的成本非常高，只能通过vm ova安装，导致打包，编译，安装时间比较长。我们能做的只是通过jenkins + k8s 运行我们安装，编译流程，跑测试等等，没有办法做到把产品安装到k8s集群中，用集群管理资源。这会带来额外的开销和工作，比如ip esxi资源分配等等，老师 对这种vm +容器混合环境有没有什么建议呢？","like_count":0},{"had_liked":false,"id":262928,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1402511,"ip_address":"","ucode":"6E31908EFE1107","user_header":"https://static001.geekbang.org/account/avatar/00/15/66/8f/02be926d.jpg","comment_is_top":false,"comment_ctime":1605886610,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605886610","product_id":100036601,"comment_content":"老师，如果我是windows开发环境，可以把开发环境打成一个镜像给新人使用吗","like_count":0},{"had_liked":false,"id":261504,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1402511,"ip_address":"","ucode":"6E31908EFE1107","user_header":"https://static001.geekbang.org/account/avatar/00/15/66/8f/02be926d.jpg","comment_is_top":false,"comment_ctime":1605365036,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1605365036","product_id":100036601,"comment_content":"石老师好，比如我是windows的环境，可以把依赖的服务都打包成docker镜像给新来的同事使用？比如idea也打包进去？","like_count":0},{"had_liked":false,"id":231065,"user_name":"Robert小七","can_delete":false,"product_type":"c1","uid":1165254,"ip_address":"","ucode":"6BBF4674673AF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","comment_is_top":false,"comment_ctime":1593573234,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593573234","product_id":100036601,"comment_content":"gitops流程图的最后一步--manual promote,这步的实际流程是怎么样的？我可以理解为手动修改制品的版本，然后再次提交MR到环境配置仓库，触发CD流水线吗？然后环境配置仓库是不是根据分支来对不同的环境进行划分？","like_count":0},{"had_liked":false,"id":227501,"user_name":"damon","can_delete":false,"product_type":"c1","uid":1200529,"ip_address":"","ucode":"E238A8B3449458","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/91/7b85d63a.jpg","comment_is_top":false,"comment_ctime":1592393039,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1592393039","product_id":100036601,"comment_content":"我们在统一维护一套物理机环境，有时候为了满足某个业务方的需求，在升级某个软件版本的时候经常会附带升级一些底层的依赖软件，而这可能导致其他服务由于底层依赖升级而无法正常运行，请问老师有什么建议吗？","like_count":0,"discussions":[{"author":{"id":1676074,"avatar":"https://static001.geekbang.org/account/avatar/00/19/93/2a/08675e68.jpg","nickname":"skywalk_jk","note":"","ucode":"329D3E71E613F0","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389742,"discussion_content":"做隔离，虚拟化或者容器化，两类方式的隔离成都不一样，可以查查具体的区别","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629420661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223789,"user_name":"Robert小七","can_delete":false,"product_type":"c1","uid":1165254,"ip_address":"","ucode":"6BBF4674673AF5","user_header":"https://static001.geekbang.org/account/avatar/00/11/c7/c6/35cc7c7c.jpg","comment_is_top":false,"comment_ctime":1591181620,"is_pvip":false,"replies":[{"id":"86984","content":"是分开的哈，代码是代码，配置是配置，实际上也要看你的项目实际情况，这个案例里面，之所以分开的原因还在于，希望通过独立的仓库来管控上线发布哈","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1595053232,"ip_address":"","comment_id":223789,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1591181620","product_id":100036601,"comment_content":"gitops 的代码仓库和配置仓库是分开的还是同一个仓库中","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497240,"discussion_content":"是分开的哈，代码是代码，配置是配置，实际上也要看你的项目实际情况，这个案例里面，之所以分开的原因还在于，希望通过独立的仓库来管控上线发布哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595053232,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":199883,"user_name":"Pyel","can_delete":false,"product_type":"c1","uid":1000293,"ip_address":"","ucode":"7551BD8A7AC5F1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/43/65/bf57c323.jpg","comment_is_top":false,"comment_ctime":1585497421,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1585497421","product_id":100036601,"comment_content":"企业环境管理的五个难题：种类多，复杂性，一致性，交付速度和变更追溯。代码化管理的方式都是未来的发展趋势","like_count":1},{"had_liked":false,"id":169239,"user_name":"牧野静风","can_delete":false,"product_type":"c1","uid":1311629,"ip_address":"","ucode":"FB5963F97C23AA","user_header":"https://static001.geekbang.org/account/avatar/00/14/03/8d/38a98dc6.jpg","comment_is_top":false,"comment_ctime":1578300020,"is_pvip":false,"replies":[{"id":"67638","content":"这就是比较尴尬的事情了，我见过一些企业在做DevOps，但是每次迭代排期的时候DevOps相关改进的需求都是优先级最低的，导致改进类工作形同虚设，所以在国内的现状下，还是自上而下的项目制驱动，目标明确的效果好的多，单纯自发的改进，的确太难了。","user_name":"作者回复","user_name_real":"石雪峰","uid":"1117795","ctime":1579851388,"ip_address":"","comment_id":169239,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578300020","product_id":100036601,"comment_content":"对于项目多的一个中型公司，想要改变现有的技术架构，确实比较困难，现行的需求都是急忙上线，何谈迁移旧框架，只能一步步来推行。","like_count":0,"discussions":[{"author":{"id":1117795,"avatar":"https://static001.geekbang.org/account/avatar/00/11/0e/63/cef8f0f4.jpg","nickname":"石雪峰","note":"","ucode":"2B3EA5B86D9A0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480476,"discussion_content":"这就是比较尴尬的事情了，我见过一些企业在做DevOps，但是每次迭代排期的时候DevOps相关改进的需求都是优先级最低的，导致改进类工作形同虚设，所以在国内的现状下，还是自上而下的项目制驱动，目标明确的效果好的多，单纯自发的改进，的确太难了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579851388,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}