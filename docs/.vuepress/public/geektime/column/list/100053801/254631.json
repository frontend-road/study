{"id":254631,"title":"04 | GPU与渲染管线：如何用WebGL绘制最简单的几何图形？","content":"<p>你好，我是月影。今天，我们要讲WebGL。</p><p>WebGL是最后一个和可视化有关的图形系统，也是最难学的一个。为啥说它难学呢？我觉得这主要有两个原因。第一，WebGL这种技术本身就是用来解决最复杂的视觉呈现的。比如说，大批量绘制复杂图形和3D模型，这类比较有难度的问题就适合用WebGL来解决。第二，WebGL相对于其他图形系统来说，是一个更“开放”的系统。</p><p>我说的“开放”是针对于底层机制而言的。因为，不管是HTML/CSS、SVG还是Canvas，都主要是使用其API来绘制图形的，所以我们不必关心它们具体的底层机制。也就是说，我们只要理解创建SVG元素的绘图声明，学会执行Canvas对应的绘图指令，能够将图形输出，这就够了。但是，要使用WebGL绘图，我们必须要深入细节里。换句话说就是，我们必须要和内存、GPU打交道，真正控制图形输出的每一个细节。</p><p>所以，想要学好WebGL，我们必须先理解一些基本概念和原理。那今天这一节课，我会从图形系统的绘图原理开始讲起，主要来讲WebGL最基础的概念，包括GPU、渲染管线、着色器。然后，我会带你用WebGL绘制一个简单的几何图形。希望通过这个可视化的例子，能够帮助你理解WebGL绘制图形的基本原理，打好绘图的基础。</p><!-- [[[read_end]]] --><h2>图形系统是如何绘图的？</h2><p>首先，我们来说说计算机图形系统的主要组成部分，以及它们在绘图过程中的作用。知道了这些，我们就能很容易理解计算机图形系统绘图的基本原理了。</p><p>一个通用计算机图形系统主要包括6个部分，分别是输入设备、中央处理单元、图形处理单元、存储器、帧缓存和输出设备。虽然我下面给出了绘图过程的示意图，不过这些设备在可视化中的作用，我要再跟你多啰嗦几句。</p><ul>\n<li><strong>光栅</strong>（Raster）：几乎所有的现代图形系统都是基于光栅来绘制图形的，光栅就是指构成图像的像素阵列。</li>\n<li><strong>像素</strong>（Pixel）：一个像素对应图像上的一个点，它通常保存图像上的某个具体位置的颜色等信息。</li>\n<li><strong>帧缓存</strong>（Frame Buffer）：在绘图过程中，像素信息被存放于帧缓存中，帧缓存是一块内存地址。</li>\n<li><strong>CPU</strong>（Central Processing Unit）：中央处理单元，负责逻辑计算。</li>\n<li><strong>GPU</strong>（Graphics Processing Unit）：图形处理单元，负责图形计算。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/b5/56/b5e4f37e1c4fbyy6a2ea10624d143356.jpg?wh=1920*825\" alt=\"\"></p><p>知道了这些概念，我带你来看一个典型的绘图过程，帮你来明晰一下这些概念的实际用途。</p><p>首先，数据经过CPU处理，成为具有特定结构的几何信息。然后，这些信息会被送到GPU中进行处理。在GPU中要经过两个步骤生成光栅信息。这些光栅信息会输出到帧缓存中，最后渲染到屏幕上。</p><p><img src=\"https://static001.geekbang.org/resource/image/9f/46/9f7d76cc9126036ef966dc236df01c46.jpeg?wh=1920*1080\" alt=\"\" title=\"图形数据经过GPU处理最终输出到屏幕上\"></p><p>这个绘图过程是现代计算机中任意一种图形系统处理图形的通用过程。它主要做了两件事，一是对给定的数据结合绘图的场景要素（例如相机、光源、遮挡物体等等）进行计算，最终将图形变为屏幕空间的2D坐标。二是为屏幕空间的每个像素点进行着色，把最终完成的图形输出到显示设备上。这整个过程是一步一步进行的，前一步的输出就是后一步的输入，所以我们也把这个过程叫做<strong>渲染管线</strong>（RenderPipelines）。</p><p>在这个过程中，CPU与GPU是最核心的两个处理单元，它们参与了计算的过程。CPU我相信你已经比较熟悉了，但是GPU又是什么呢？别着急，听我慢慢和你讲。</p><h2>GPU是什么？</h2><p>CPU和GPU都属于处理单元，但是结构不同。形象点来说，CPU就像个大的工业管道，等待处理的任务就像是依次通过这个管道的货物。一条CPU流水线串行处理这些任务的速度，取决于CPU（管道）的处理能力。</p><p>实际上，一个计算机系统会有很多条CPU流水线，而且任何一个任务都可以随机地通过任意一个流水线，这样计算机就能够并行处理多个任务了。这样的一条流水线就是我们常说的<strong>线程</strong>（Thread）。</p><p><a href=\"https://thebookofshaders.com/\"><img src=\"https://static001.geekbang.org/resource/image/1e/80/1e6479ef37138f051b7a6e5de6977580.jpeg?wh=1920*615\" alt=\"\" title=\"CPU\"></a></p><p>这样的结构用来处理大型任务是足够的，但是要处理图像应用就不太合适了。这是因为，处理图像应用，实际上就是在处理计算图片上的每一个像素点的颜色和其他信息。每处理一个像素点就相当于完成了一个简单的任务，而一个图片应用又是由成千上万个像素点组成的，所以，我们需要在同一时间处理成千上万个小任务。</p><p>要处理这么多的小任务，比起使用若干个强大的CPU，使用更小、更多的处理单元，是一种更好的处理方式。而GPU就是这样的处理单元。</p><p><a href=\"https://thebookofshaders.com/\"><img src=\"https://static001.geekbang.org/resource/image/1a/e7/1ab1116e3742611f5cb26c942d67d5e7.jpeg?wh=1920*1080\" alt=\"\" title=\"GPU\"></a></p><p>GPU是由大量的小型处理单元构成的，它可能远远没有CPU那么强大，但胜在数量众多，可以保证每个单元处理一个简单的任务。即使我们要处理一张800 * 600大小的图片，GPU也可以保证这48万个像素点分别对应一个小单元，这样我们就可以<strong>同时</strong>对每个像素点进行计算了。</p><p>那GPU究竟是怎么完成像素点计算的呢？这就必须要和WebGL的绘图过程结合起来说了。</p><h2>如何用WebGL绘制三角形？</h2><p>浏览器提供的WebGL API是OpenGL ES的JavaScript绑定版本，它赋予了开发者操作GPU的能力。这一特点也让WebGL的绘图方式和其他图形系统的“开箱即用”（直接调用绘图指令或者创建图形元素就可以完成绘图）的绘图方式完全不同，甚至要复杂得多。我们可以总结为以下5个步骤：</p><ol>\n<li>创建WebGL上下文</li>\n<li>创建WebGL程序（WebGL Program）</li>\n<li>将数据存入缓冲区</li>\n<li>将缓冲区数据读取到GPU</li>\n<li>GPU执行WebGL程序，输出结果</li>\n</ol><p>别看这些步骤看起来很简单，但其中会涉及许多你没听过的新概念、方法以及各种参数。不过，这也不用担心，我们今天的重点还是放在理解WebGL的基本用法和绘制原理上，对于新的方法具体怎么用，参数如何设置，这些我们都会在后面的课程中详细来讲。</p><p>接下来，我们就用一个绘制三角形的例子，来讲一下这些步骤的具体操作过程。</p><h3>步骤一：创建WebGL上下文</h3><p>创建WebGL上下文这一步和Canvas2D的使用几乎一样，我们只要调用canvas元素的getContext即可，区别是将参数从’2d’换成’webgl’。</p><pre><code>const canvas = document.querySelector('canvas');\nconst gl = canvas.getContext('webgl');\n</code></pre><p>不过，有了WebGL上下文对象之后，我们并不能像使用Canvas2D的上下文那样，调用几个绘图指令就把图形画出来，还需要做很多工作。别着急，让我们一步一步来。</p><h3>步骤二：创建WebGL程序</h3><p>接下来，我们要创建一个WebGL程序。你可能会觉得奇怪，我们不是正在写一个绘制三角形的程序吗？为什么这里又要创建一个WebGL程序呢？实际上，这里的WebGL程序是一个WebGLProgram对象，它是给GPU最终运行着色器的程序，而不是我们正在写的三角形的JavaScript程序。好了，解决了这个疑问，我们就正式开始创建一个WebGL程序吧！</p><p>首先，要创建这个WebGL程序，我们需要编写两个<strong>着色器</strong>（Shader）。着色器是用GLSL这种编程语言编写的代码片段，这里我们先不用过多纠结于GLSL语言，在后续的课程中我们会详细讲解。那在这里，我们只需要理解绘制三角形的这两个着色器的作用就可以了。</p><pre><code>const vertex = `\n  attribute vec2 position;\n\n  void main() {\n    gl_PointSize = 1.0;\n    gl_Position = vec4(position, 1.0, 1.0);\n  }\n`;\n\n\nconst fragment = `\n  precision mediump float;\n\n  void main()\n  {\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n  }    \n`;\n</code></pre><p>那我们为什么要创建两个着色器呢？这就需要我们先来理解<strong>顶点和图元</strong>这两个基本概念了。在绘图的时候，WebGL是以顶点和图元来描述图形几何信息的。顶点就是几何图形的顶点，比如，三角形有三个顶点，四边形有四个顶点。图元是WebGL可直接处理的图形单元，由WebGL的绘图模式决定，有点、线、三角形等等。</p><p>所以，顶点和图元是绘图过程中必不可少的。因此，WebGL绘制一个图形的过程，一般需要用到两段着色器，一段叫<strong>顶点着色器</strong>（Vertex Shader）负责处理图形的顶点信息，另一段叫<strong>片元着色器</strong>（Fragment Shader）负责处理图形的像素信息。</p><p>更具体点来说，我们可以把<strong>顶点着色器理解为处理顶点的GPU程序代码。它可以改变顶点的信息</strong>（如顶点的坐标、法线方向、材质等等），从而改变我们绘制出来的图形的形状或者大小等等。</p><p>顶点处理完成之后，WebGL就会根据顶点和绘图模式指定的图元，计算出需要着色的像素点，然后对它们执行片元着色器程序。简单来说，就是对指定图元中的像素点着色。</p><p>WebGL从顶点着色器和图元提取像素点给片元着色器执行代码的过程，就是我们前面说的生成光栅信息的过程，我们也叫它光栅化过程。所以，<strong>片元着色器的作用，就是处理光栅化后的像素信息。</strong></p><p>这么说可能比较抽象，我 来举个例子。我们可以将图元设为线段，那么片元着色器就会处理顶点之间的线段上的像素点信息，这样画出来的图形就是空心的。而如果我们把图元设为三角形，那么片元着色器就会处理三角形内部的所有像素点，这样画出来的图形就是实心的。</p><p><img src=\"https://static001.geekbang.org/resource/image/6c/6e/6c4390eb21e653274db092a9ba71946e.jpg?wh=1726*904\" alt=\"\"></p><p>这里你要注意一点，因为图元是WebGL可以直接处理的图形单元，所以其他非图元的图形最终必须要转换为图元才可以被WebGL处理。举个例子，如果我们要绘制实心的四边形，我们就需要将四边形拆分成两个三角形，再交给WebGL分别绘制出来。</p><p>好了，那让我们回到片元着色器对像素点着色的过程。你还要注意，这个过程是并行的。也就是说，<strong>无论有多少个像素点，片元着色器都可以同时处理。</strong>这也是片元着色器一大特点。</p><p>以上就是片元着色器的作用和使用特点了，关于顶点着色器的作用我们一会儿再说。说了这么多，你可别忘了，创建着色器的目的是为了创建WebGL程序，那我们应该如何用顶点着色器和片元着色器代码，来创建WebGL程序呢？</p><p>首先，因为在JavaScript中，顶点着色器和片元着色器只是一段代码片段，所以我们要将它们分别创建成shader对象。代码如下所示：</p><pre><code>const vertexShader = gl.createShader(gl.VERTEX_SHADER);\ngl.shaderSource(vertexShader, vertex);\ngl.compileShader(vertexShader);\n\n\nconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\ngl.shaderSource(fragmentShader, fragment);\ngl.compileShader(fragmentShader);\n</code></pre><p>接着，我们创建WebGLProgram对象，并将这两个shader关联到这个WebGL程序上。WebGLProgram对象的创建过程主要是添加vertexShader和fragmentShader，然后将这个WebGLProgram对象链接到WebGL上下文对象上。代码如下：</p><pre><code>const program = gl.createProgram();\ngl.attachShader(program, vertexShader);\ngl.attachShader(program, fragmentShader);\ngl.linkProgram(program);\n</code></pre><p>最后，我们要通过useProgram选择启用这个WebGLProgram对象。这样，当我们绘制图形时，GPU就会执行我们通过WebGLProgram设定的 两个shader程序了。</p><pre><code>gl.useProgram(program);\n</code></pre><p>好了，现在我们已经创建并完成WebGL程序的配置。接下来， 我们只要将三角形的数据存入缓冲区，也就能将这些数据送入GPU了。那实现这一步之前呢，我们先来认识一下WebGL的坐标系。</p><h3>步骤三：将数据存入缓冲区</h3><p>我们要知道WebGL的坐标系是一个三维空间坐标系，坐标原点是（0,0,0）。其中，x轴朝右，y轴朝上，z轴朝外。这是一个右手坐标系。</p><p><img src=\"https://static001.geekbang.org/resource/image/yy/b1/yy3e873beb7743096e3cc7b641e718b1.jpeg?wh=1920*1080\" alt=\"\"></p><p>假设，我们要在这个坐标系上显示一个顶点坐标分别是（-1, -1）、（1, -1）、（0, 1）的三角形，如下图所示。因为这个三角形是二维的，所以我们可以直接忽略z轴。下面，我们来一起绘图。</p><p><img src=\"https://static001.geekbang.org/resource/image/83/c3/8311b485131497ce59cd1600b9a7f7c3.jpeg?wh=1920*1080\" alt=\"\"></p><p><strong>首先，我们要定义这个三角形的三个顶点</strong>。WebGL使用的数据需要用类型数组定义，默认格式是Float32Array。Float32Array是JavaScript的一种类型化数组（TypedArray），JavaScript通常用类型化数组来处理二进制缓冲区。</p><p>因为平时我们在Web前端开发中，使用到类型化数组的机会并不多，你可能还不大熟悉，不过没关系，类型化数组的使用并不复杂，定义三角形顶点的过程，你直接看我下面给出的代码就能理解。不过，如果你之前完全没有接触过它，我还是建议你阅读<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">MDN文档</a>，去详细了解一下类型化数组的使用方法。</p><pre><code>const points = new Float32Array([\n  -1, -1,\n  0, 1,\n  1, -1,\n]);\n\n</code></pre><p><strong>接着，我们要将定义好的数据写入WebGL的缓冲区</strong>。这个过程我们可以简单总结为三步，分别是创建一个缓存对象，将它绑定为当前操作对象，再把当前的数据写入缓存对象。这三个步骤主要是利用createBuffer、bindBuffer、bufferData方法来实现的，过程很简单你可以看一下我下面给出的实现代码。</p><pre><code>const bufferId = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, bufferId);\ngl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);\n</code></pre><h3>步骤四：将缓冲区数据读取到GPU</h3><p>现在我们已经把数据写入缓存了，但是我们的shader现在还不能读取这个数据，还需要把数据绑定给顶点着色器中的position变量。</p><p>还记得我们的顶点着色器是什么样的吗？它是按如下的形式定义的：</p><pre><code>attribute vec2 position;\n\nvoid main() {\n  gl_PointSize = 1.0;\n  gl_Position = vec4(position, 1.0, 1.0);\n}\n</code></pre><p>在GLSL中，attribute表示声明变量，vec2是变量的类型，它表示一个二维向量，position是变量名。接下来我们将buffer的数据绑定给顶点着色器的position变量。</p><pre><code>const vPosition = gl.getAttribLocation(program, 'position');获取顶点着色器中的position变量的地址\ngl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);给变量设置长度和类型\ngl.enableVertexAttribArray(vPosition);激活这个变量\n</code></pre><p>经过这样的处理，在顶点着色器中，我们定义的points类型数组中对应的值，就能通过变量position读到了。</p><h3>步骤五：执行着色器程序完成绘制</h3><p>现在，我们把数据传入缓冲区以后，GPU也可以读取绑定的数据到着色器变量了。接下来，我们只需要调用绘图指令，就可以执行着色器程序来完成绘制了。</p><p>我们先调用gl.clear将当前画布的内容清除，然后调用gl.drawArrays传入绘制模式。这里我们选择gl.TRIANGLES表示以三角形为图元绘制，再传入绘制的顶点偏移量和顶点数量，WebGL就会将对应的buffer数组传给顶点着色器，并且开始绘制。代码如下：</p><pre><code>gl.clear(gl.COLOR_BUFFER_BIT);\ngl.drawArrays(gl.TRIANGLES, 0, points.length / 2);\n</code></pre><p>这样，我们就在Canvas画布上画出了一个红色三角形。</p><p><img src=\"https://static001.geekbang.org/resource/image/cc/61/ccdd298c45f80a9a00d23082cf637d61.jpeg?wh=1920*1080\" alt=\"\"></p><p>为什么是红色三角形呢？因为我们在片元着色器中定义了像素点的颜色，代码如下：</p><pre><code>precision mediump float;\n\nvoid main()\n{\n  gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n</code></pre><p>在<strong>片元着色器</strong>里，我们可以通过设置gl_FragColor的值来定义和改变图形的颜色。gl_FragColor是WebGL片元着色器的内置变量，表示当前像素点颜色，它是一个用RGBA色值表示的四维向量数据。在上面的代码中，因为我们写入vec4(1.0, 0.0, 0.0, 1.0)对应的是红色，所以三角形是红色的。如果我们把这个值改成vec4(0.0, 0.0, 1.0, 1.0)，那三角形就是蓝色。</p><p>我为什么会强调颜色这个事儿呢？你会发现，刚才我们只更改了一个值，就把整个图片的所有像素颜色都改变了。所以，我们必须要认识到一点，WebGL可以并行地对整个三角形的所有像素点同时运行片元着色器。并行处理是WebGL程序非常重要的概念，所以我就多强调一下。</p><p>我们要记住，不论这个三角形是大还是小，有几十个像素点还是上百万个像素点，GPU都是<strong>同时处理</strong>每个像素点的。也就是说，图形中有多少个像素点，着色器程序在GPU中就会被同时执行多少次。</p><p>到这里，WebGL绘制三角形的过程我们就讲完了。借助这个过程，我们加深了对顶点着色器和片元着色器在使用上的理解。不过，因为后面我们会更多地讲解片元着色器的绘图方法，那今天，我们正好可以借着这个机会，多讲讲顶点着色器的应用，我希望你也能掌握好它。</p><h2>顶点着色器的作用</h2><p>顶点着色器大体上可以总结为两个作用：一是通过gl_Position设置顶点，二是通过定义varying变量，向片元着色器传递数据。这么说还是有点抽象，我们还是通过三角形的例子来具体理解一下。</p><h3>1. 通过gl_Position设置顶点</h3><p>假如，我想把三角形的周长缩小为原始大小的一半，有两种处理方式法：一种是修改points数组的值，另一种做法是直接对顶点着色器数据进行处理。第一种做法很简单，我就不讲了，如果不懂你可以在留言区提问。我们来详细说说第二种做法。</p><p>我们不需要修改points数据，只需要在顶点着色器中，将 gl_Position = vec4(position, 1.0, 1.0);修改为 gl_Position = vec4(position * 0.5, 1.0, 1.0);，代码如下所示。</p><pre><code>attribute vec2 position;\n\nvoid main() {\n  gl_PointSize = 1.0;\n  gl_Position = vec4(position * 0.5, 1.0, 1.0);\n}\n</code></pre><p>这样，三角形的周长就缩小为原来的一半了。在这个过程中，我们不需要遍历三角形的每一个顶点，只需要是利用GPU的并行特性，在顶点着色器中同时计算所有的顶点就可以了。在后续课程中，我们还会遇到更加复杂的例子，但在那之前，你一定要理解并牢记WebGL可以<strong>并行计算</strong>这一特点。</p><h3>2. 向片元着色器传递数据</h3><p>除了计算顶点之外，顶点着色器还可以将数据通过varying变量传给片元着色器。然后，这些值会根据片元着色器的像素坐标与顶点像素坐标的相对位置做<strong>线性插值</strong>。这是什么意思呢？其实这很难用文字描述，我们还是来看一段代码：</p><pre><code>attribute vec2 position;\nvarying vec3 color;\n\nvoid main() {\n  gl_PointSize = 1.0;\n  color = vec3(0.5 + position * 0.5, 0.0);\n  gl_Position = vec4(position * 0.5, 1.0, 1.0);\n}\n</code></pre><p>在这段代码中，我们修改了顶点着色器，定义了一个color变量，它是一个三维的向量。我们通过数学技巧将顶点的值映射为一个RGB颜色值（关于顶点映射RGB颜色值的方法，在后续的课程中会有详细介绍），映射公式是 vec3(0.5 + position * 0.5, 0.0)。</p><p>这样一来，顶点[-1,-1]被映射为[0,0,0]也就是黑色，顶点[0,1]被映射为[0.5, 1, 0]也就是浅绿色，顶点[1,-1]被映射为[1,0,0]也就是红色。这样一来，三个顶点就会有三个不同的颜色值。</p><p>然后我们将color通过varying变量传给片元着色器。片元着色器中的代码如下：</p><pre><code>precision mediump float;\nvarying vec3 color;\n\nvoid main()\n{\n  gl_FragColor = vec4(color, 1.0);\n}  \n</code></pre><p>我们将gl_FragColor的rgb值设为变量color的值，这样我们就能得到下面这个三角形：</p><p><img src=\"https://static001.geekbang.org/resource/image/5c/21/5c4c718eca069be33d8a1d5d1eb77821.jpeg?wh=1920*1080\" alt=\"\"></p><p>我们可以看到，这个三角形是一个颜色均匀（线性）渐变的三角形，它的三个顶点的色值就是我们通过顶点着色器来设置的。而且你会发现，中间像素点的颜色是均匀过渡的。这就是因为WebGL在执行片元着色器程序的时候，顶点着色器传给片元着色器的变量，会根据片元着色器的像素坐标对变量进行线性插值。利用线性插值可以让像素点的颜色均匀渐变这一特点，我们就能绘制出颜色更丰富的图形了。</p><p>好了，到这里，我们就在Canvas画布上用WebGL绘制出了一个三角形。绘制三角形的过程，就像我们初学编程时去写出一个Hello World程序一样，按道理来说，应该非常简单才对。但事实上，用WebGL完成这个程序，我们一共用了好几十行代码。而如果我们用Canvas2D或者SVG实现类似的功能，只需要几行代码就可以了。</p><p>那我们为什么非要这么做呢？而且我们费了很大的劲，就只绘制出了一个最简单的三角形，这似乎离我们用WebGL实现复杂的可视化效果还非常遥远。我想告诉你的是，别失落，想要利用WebGL绘制更有趣、更复杂的图形，我们就必须要学会绘制三角形这个图元。还记得我们前面说过的，要在WebGL中绘制非图元的其他图形时，我们必须要把它们划分成三角形才行。学习了后面的课程之后，你就会对这一点有更深刻的理解了。</p><p>而且，用WebGL可以实现的视觉效果，远远超越其他三个图形系统。如果用驾驶技术来比喻的话，使用SVG和Canvas2D时，就像我们在开一辆自动挡的汽车，那么使用WebGL的时候，就像是在开战斗机！所以，千万别着急，随着对WebGL的不断深入理解，我们就能用它来实现更多有趣的实例了。</p><h2>要点总结</h2><p>在这一节课，我们讲了WebGL的绘图过程以及顶点着色器和片元着色器的作用。</p><p>WebGL图形系统与用其他图形系统不同，它的API非常底层，使用起来比较复杂。想要学好WebGL，我们必须要从基础概念和原理学起。</p><p>一般来说，在WebGL中要完成图形的绘制，需要创建WebGL程序，然后将图形的几何数据存入数据缓冲区，在绘制过程中让WebGL从缓冲区读取数据，并且执行着色器程序。</p><p>WebGL的着色器程序有两个。一个是顶点着色器，负责处理图形的顶点数据。另一个是片元着色器，负责处理光栅化后的像素信息。此外，我们还要牢记，WebGL程序有一个非常重要的特点就是能够并行处理，无论图形中有多少个像素点，都可以通过着色器程序在GPU中被同时执行。</p><p>WebGL完整的绘图过程实在比较复杂，为了帮助你理解，我总结一个流程图，供你参考。</p><p><a href=\"https://juejin.im/post/5e7a042e6fb9a07cb96b1627\"><img src=\"https://static001.geekbang.org/resource/image/d3/30/d31e6c50b55872f81aa70625538fb930.jpg?wh=1196*960\" alt=\"\" title=\"WebGL绘图流程\"></a></p><p>那到这里，可视化的四个图形系统我们就介绍完了。但是，好戏才刚刚开始哦，在后续的文章中我们会围绕着这四个图形系统，尤其是Canvas2D和WebGL逐渐深入，来实现更多有趣的图形。</p><h2>小试牛刀</h2><ol>\n<li>\n<p>WebGL通过顶点和图元来绘制图形，我们在上面的例子中，调用gl.TRIANGLES 绘制出了实心的三角形。如果要绘制空心三角形，我们又应该怎么做呢？有哪些图元类型可以帮助我们完成这个绘制？</p>\n</li>\n<li>\n<p>三角形是最简单的几何图形，如果我们要绘制其他的几何图形，我们可以通过用多个三角形拼接来实现。试着用WebGL绘制正四边形、正五边形和正六角星吧！</p>\n</li>\n</ol><p>欢迎在留言区和我讨论，分享你的答案和思考，也欢迎你把这一节课分享给你的朋友，我们下节课再见！</p><hr><h2><span class=\"reference\">源码</span></h2><p><span class=\"reference\"> <a href=\"https://github.com/akira-cn/graphics/tree/master/webgl\">WebGL绘制三角形示例代码</a></span></p><h2><span class=\"reference\">推荐阅读</span></h2><p><span class=\"reference\">[1] <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray\">类型化数组 MDN 文档</a></span><br>\n<span class=\"reference\">[2]  <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API\">WebGL 的 MDN 文档</a></span></p>","neighbors":{"left":{"article_title":"03 | 声明式图形系统：如何用SVG图形元素绘制可视化图表？","id":252710},"right":{"article_title":"05 | 如何用向量和坐标系描述点和线段？","id":255584}},"comments":[{"had_liked":false,"id":230813,"user_name":"筑梦师刘渊","can_delete":false,"product_type":"c1","uid":1026867,"ip_address":"","ucode":"35C309A266AC02","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ab/33/75b1f724.jpg","comment_is_top":false,"comment_ctime":1593501146,"is_pvip":false,"replies":[{"id":"85303","content":"很棒！","user_name":"作者回复","comment_id":230813,"uid":"1159792","ip_address":"","utype":1,"ctime":1593562809,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"190572062170","product_id":100053801,"comment_content":"作业一   <br>查了下资料，webgl支持的图元类型有七种，分别是 gl.POINTS(点), gl.LINES(线段), gl.LINE_STRIP(线条), gl.LINE_LOOP(回路), gl.TRIANGLES(三角形), gl.TRIANGLE_STRIP(三角带), gl.TRIANGLE_FAN(三角扇)。<br>要绘制空心三角形，gl.LINE_STRIP(线条)、gl.LINES(线段)、 gl.LINE_LOOP(回路)都可以实现。 但是gl.LINES(线段)需要写入六个顶点([-1, -1, 0, 1,   0, 1, 1, -1,   1, -1,-1, -1]), gl.LINE_STRIP(线条)也需要写入四个顶点([-1, -1, 0, 1, 1, -1,-1, -1]),而gl.LINE_LOOP(回路)，只需要是三个顶点([-1, -1, 0, 1, 1, -1])，因此gl.LINE_LOOP(回路)是最佳选择<br><br>作业二<br>a. 先封装一个生成多边形顶点坐标数组的函数<br>function createCircleVertex(x, y, r, n) {<br>    const sin = Math.sin;<br>    const cos = Math.cos;<br>    const perAngel = (2 * Math.PI) &#47; n;<br>    const positionArray = [];<br>    for (let i = 0; i &lt; n; i++) {<br>        const angel = i * perAngel;<br>        const nx = x + r * cos(angel);<br>        const ny = y + r * sin(angel);<br>        positionArray.push(nx, ny);<br>    }<br>    return new Float32Array(positionArray);<br>}<br>b. 封装一个生成正多角星顶点的数组函数<br>function create2CircleVertex(x, y, r, R, n) {<br>    const sin = Math.sin;<br>    const cos = Math.cos;<br>    const perAngel = Math.PI &#47; n;<br>    const positionArray = [];<br>    for (let i = 0; i &lt; 2 * n; i++) {<br>        const angel = i * perAngel;<br>        if (i % 2 !== 0) {<br>            const Rx = x + R * cos(angel);<br>            const Ry = y + R * sin(angel);<br>            positionArray.push(Rx, Ry);<br>        } else {<br>            const rx = x + r * cos(angel);<br>            const ry = y + r * sin(angel);<br>            positionArray.push(rx, ry);<br>        }<br>    }<br>    return new Float32Array(positionArray);<br>}<br>1. 正四边形  const points = createCircleVertex(0, 0, 0.5, 4); <br>2. 正五边形  const points = createCircleVertex(0, 0, 0.5, 5); <br>3. 正六角星 const points = create2CircleVertex(0, 0, 0.3, 0.6, 6);<br><br>以上要绘制空心用gl.LINE_LOOP图元，实心用gl.TRIANGLE_FAN图元   <br>1)空心:gl.drawArrays(gl.LINE_LOOP, 0, points.length &#47; 2);<br>2)实心:gl.drawArrays(gl.TRIANGLE_FAN, 0, points.length &#47; 2);<br>","like_count":45,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500046,"discussion_content":"很棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593562809,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1073601,"avatar":"https://static001.geekbang.org/account/avatar/00/10/61/c1/93031a2a.jpg","nickname":"Aaaaaaaaaaayou","note":"","ucode":"67BA315B87587D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":357116,"discussion_content":"极坐标系，妙呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615733986,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230512,"user_name":"Cailven","can_delete":false,"product_type":"c1","uid":1381478,"ip_address":"","ucode":"4F80DC0E86066A","user_header":"https://static001.geekbang.org/account/avatar/00/15/14/66/57b04294.jpg","comment_is_top":false,"comment_ctime":1593406056,"is_pvip":false,"replies":[{"id":"85204","content":"VAO是一种组织顶点数据的方式，也是webgl里面常用的方式，它的好处之一是不用每次操作都一一绑定每一组不同的顶点数据。这些属于具体webgl使用上的问题，随着专栏的课程内容深度会有更多介绍。shadertoy很不错的平台，在后面介绍像素处理的课程里会看到一部分shadertoy上比较有趣的例子。","user_name":"作者回复","comment_id":230512,"uid":"1159792","ip_address":"","utype":1,"ctime":1593485279,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"70312882792","product_id":100053801,"comment_content":"补充：vs不仅仅只有postion值，一般通过attribute 进行属性赋值。在图形学管顶点操作叫做VAO(vertex array object)，而vao操作的float数据底层是vbo。不过如果用了threejs后很多图元操作就依赖引擎直接就解决了，但在Threejs中依然可以通过shaderMatiral通过setAttribute给bufferGeometry的顶点赋值。<br><br>不过个人在这几年的图形学学习中觉得vs相对还是简单的，fs对于像素的操作很像当年给photoshop写滤镜的过程。不过如果真的是玩片元着色炫技可以看看shadertoy里关于用remaching技术构建距离场用体素算法在片元里构建另一个三维引擎的效果。希望月影大大回头可以针对这方面有所加餐。感谢！<br><br>不过这课程来的太晚，如果几年前能早点接触到这门课，估计会在图形学方面少走很多弯路，谢谢月影大大。","like_count":16,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499918,"discussion_content":"VAO是一种组织顶点数据的方式，也是webgl里面常用的方式，它的好处之一是不用每次操作都一一绑定每一组不同的顶点数据。这些属于具体webgl使用上的问题，随着专栏的课程内容深度会有更多介绍。shadertoy很不错的平台，在后面介绍像素处理的课程里会看到一部分shadertoy上比较有趣的例子。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593485279,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":232471,"user_name":"xiao豪","can_delete":false,"product_type":"c1","uid":1026417,"ip_address":"","ucode":"F7969A9785E37B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a9/71/78796fd5.jpg","comment_is_top":false,"comment_ctime":1594013623,"is_pvip":false,"replies":[{"id":"85868","content":"因为webgl实际上是JS与GPU进行交互，所以要先将JS的数据存入缓存，在webgl程序运行的时候底层从缓存中读取数据给shader，在shader中完成图形绘制。所以是一读一写的过程","user_name":"作者回复","comment_id":232471,"uid":"1159792","ip_address":"","utype":1,"ctime":1594080681,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"27363817399","product_id":100053801,"comment_content":"老师，将数据存入缓存再拿出来是有什么意义呢？","like_count":6,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500659,"discussion_content":"因为webgl实际上是JS与GPU进行交互，所以要先将JS的数据存入缓存，在webgl程序运行的时候底层从缓存中读取数据给shader，在shader中完成图形绘制。所以是一读一写的过程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594080681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2046371,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/39/a3/3728faa6.jpg","nickname":"天空","note":"","ucode":"B35BF535A0C78E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302125,"discussion_content":"老师，js与GPU直接打交道了，还要通过CPU么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598795899,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230595,"user_name":"宁康","can_delete":false,"product_type":"c1","uid":1044760,"ip_address":"","ucode":"B7FB9DDFFF3F69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f1/18/63b9bd3c.jpg","comment_is_top":false,"comment_ctime":1593425172,"is_pvip":false,"replies":[{"id":"85199","content":"赞～","user_name":"作者回复","comment_id":230595,"uid":"1159792","ip_address":"","utype":1,"ctime":1593484557,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"23068261652","product_id":100053801,"comment_content":"正n边型，r是外接圆半径<br><br>getPolygonPoints( n, r ){<br>      const stepAngle = 2*Math.PI &#47; n<br>      let initAngle = 0<br>      const pointArray = []<br>      for(let i = 0; i &lt; n; i++) {<br>        &#47;&#47; 存储x坐标<br>        pointArray.push(r * Math.cos(initAngle))<br>        &#47;&#47; 存储y坐标<br>        pointArray.push(r * Math.sin(initAngle))<br><br>        initAngle += stepAngle<br>      }<br><br>      return pointArray<br>    }<br><br>&#47;&#47; 正十边型坐标点<br>const ponitsArray = getPolygonPoints(10, 1)<br><br>const ponits = new Float32Array(ponitsArray)<br><br>gl.drawArrays(gl.TRIANGLE_FAN, 0, ponits.length &#47; 2)","like_count":5,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499953,"discussion_content":"赞～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593484557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230582,"user_name":"宁康","can_delete":false,"product_type":"c1","uid":1044760,"ip_address":"","ucode":"B7FB9DDFFF3F69","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f1/18/63b9bd3c.jpg","comment_is_top":false,"comment_ctime":1593423034,"is_pvip":false,"replies":[{"id":"85200","content":"不错～","user_name":"作者回复","comment_id":230582,"uid":"1159792","ip_address":"","utype":1,"ctime":1593484631,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"14478324922","product_id":100053801,"comment_content":"1、gl_Position 设置顶点，这个我查了一下，第四个值设置为2.0也可以实现缩小一倍。<br>gl_Position = vec4(position, 0.0, 2.0);<br><br>2、空心三角形：<br>gl.drawArrays(gl. LINE_LOOP, 0, ponits.length &#47; 2)<br><br>3、绘制多边形<br>a.定义多边形的(x, y)坐标<br>const ponits = new Float32Array([<br>        -1, -1,<br>        0, -2,<br>        1, -1,<br>        1, 1,<br>        -1, 1<br>      ])<br>b.绘制多边形<br>gl.drawArrays(gl.TRIANGLE_FAN, 0, ponits.length &#47; 2)<br>","like_count":3,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499945,"discussion_content":"不错～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593484631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235020,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1923859,"ip_address":"","ucode":"89EA5FCF036C42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/5b/13/6db9ba58.jpg","comment_is_top":false,"comment_ctime":1594870639,"is_pvip":true,"replies":[{"id":"87178","content":"赞","user_name":"作者回复","comment_id":235020,"uid":"1159792","ip_address":"","utype":1,"ctime":1595292928,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"10184805231","product_id":100053801,"comment_content":"实现了一个正多边形的样例，动态修改边数。<br>https:&#47;&#47;codesandbox.io&#47;s&#47;practice-canvas-vme4k?file=&#47;src&#47;pages&#47;RegularPolygonWebGL.vue","like_count":2,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501580,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595292928,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234834,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":1923859,"ip_address":"","ucode":"89EA5FCF036C42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/5b/13/6db9ba58.jpg","comment_is_top":false,"comment_ctime":1594806834,"is_pvip":true,"replies":[{"id":"87181","content":"嗯嗯","user_name":"作者回复","comment_id":234834,"uid":"1159792","ip_address":"","utype":1,"ctime":1595292959,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"10184741426","product_id":100053801,"comment_content":"问题一：<br>绘制空心三角形使用回路线条：gl.LINE_LOOP<br>    gl.drawArrays(gl.LINE_LOOP, 0, points.length &#47; 2);<br><br>WebGL可绘制的图元有以下7种，来源网络查找：https:&#47;&#47;www.jianshu.com&#47;p&#47;1e750f20ec23<br><br>点\tgl.POINTS\t<br>线段\tgl.LINES\t<br>线条\tgl.LINE_STRIP<br>回路线条\tgl.LINE_LOOP<br>三角形\tgl.TRIANGLES<br>三角带\tgl.TRIANGLE_STRIP\t<br>三角扇\tgl.TRIANGLE_FAN ","like_count":2,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501523,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595292959,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323628,"user_name":"浩荡如空气","can_delete":false,"product_type":"c1","uid":2816734,"ip_address":"","ucode":"8973FCC46D3CA1","user_header":"https://static001.geekbang.org/account/avatar/00/2a/fa/de/e927c333.jpg","comment_is_top":false,"comment_ctime":1638030724,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5932998020","product_id":100053801,"comment_content":"请问JS数据存入的Buffer和FrameBuffer是什么关系啊","like_count":1,"discussions":[{"author":{"id":1915533,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3a/8d/f5e7a20d.jpg","nickname":"何以解忧","note":"","ucode":"4DFE2BDBAF4919","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538233,"discussion_content":"同问， 存顶点数据的buffer 是在内存里还是显存里，还是说存在内存和显存的交换。\nFrameBuffer, 是内存中的一片区域还是显存的一片区域，还是说都有可能是一个软件层次的概念，被操作系统整合映射的一个概念？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639376960,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293898,"user_name":"彧豪","can_delete":false,"product_type":"c1","uid":1161233,"ip_address":"","ucode":"8979F477E0BC5B","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/11/26838646.jpg","comment_is_top":false,"comment_ctime":1621590948,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5916558244","product_id":100053801,"comment_content":"话说月影大大, 这个缓冲区和内存有什么关系?是一回事吗?那缓存呢, 缓冲区 内存 缓存这三者怎么理解呢?页面仔表示对这些计算机结构 原理方面的东西不是太了解, 求解答","like_count":1,"discussions":[{"author":{"id":1915533,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3a/8d/f5e7a20d.jpg","nickname":"何以解忧","note":"","ucode":"4DFE2BDBAF4919","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538234,"discussion_content":"同问， 存顶点数据的buffer 是在内存里还是显存里，还是说存在内存和显存的交换。\nFrameBuffer, 是内存中的一片区域还是显存的一片区域，还是说都有可能是一个软件层次的概念，被操作系统整合映射的一个概念？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639376991,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249839,"user_name":"国旗","can_delete":false,"product_type":"c1","uid":1346964,"ip_address":"","ucode":"09BA50A445F81D","user_header":"https://static001.geekbang.org/account/avatar/00/14/8d/94/a04cf407.jpg","comment_is_top":false,"comment_ctime":1600828154,"is_pvip":false,"replies":[{"id":"94961","content":"就是一个代表状态常量的数值，设计的时候定下来的。","user_name":"作者回复","comment_id":249839,"uid":"1159792","ip_address":"","utype":1,"ctime":1605493066,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"5895795450","product_id":100053801,"comment_content":"老师问下MDN文档里WebGL常数这儿，表格里十六进制的‘Value’表示的意思是类似于CPU指令寄存器么？<br>Getting GL parameter information这节BLEND_EQUATION，BLEND_EQUATION_RGB的value都是0x8009，也有点不理解<br>https:&#47;&#47;developer.mozilla.org&#47;en-US&#47;docs&#47;Web&#47;API&#47;WebGL_API&#47;Constants","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506030,"discussion_content":"就是一个代表状态常量的数值，设计的时候定下来的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605493066,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244728,"user_name":"不见飞刀","can_delete":false,"product_type":"c1","uid":1221078,"ip_address":"","ucode":"2490E8D608CECA","user_header":"https://static001.geekbang.org/account/avatar/00/12/a1/d6/9d99e5ef.jpg","comment_is_top":false,"comment_ctime":1598634366,"is_pvip":false,"replies":[{"id":"94977","content":"是的，顶点着色器执行次数和顶点数量有关。插值发生在光栅化的时候。","user_name":"作者回复","comment_id":244728,"uid":"1159792","ip_address":"","utype":1,"ctime":1605493599,"user_name_real":"月影"}],"discussion_count":3,"race_medal":0,"score":"5893601662","product_id":100053801,"comment_content":"&quot;图形中有多少个像素点，着色器程序在 GPU 中就会被同时执行多少次。&quot;<br><br>顶点着色器是否一样还是有几个顶点就执行多少次呢？<br>传给片元的varying变量会线性差值，那么插值这一步发生在哪呢？","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504682,"discussion_content":"是的，顶点着色器执行次数和顶点数量有关。插值发生在光栅化的时候。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605493599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1374463,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f8/ff/ae800f6b.jpg","nickname":"我叫张小咩²⁰¹⁹","note":"","ucode":"68A8C87EB09D26","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350155,"discussion_content":"顶点是一个像素点吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613727984,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1915533,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3a/8d/f5e7a20d.jpg","nickname":"何以解忧","note":"","ucode":"4DFE2BDBAF4919","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1374463,"avatar":"https://static001.geekbang.org/account/avatar/00/14/f8/ff/ae800f6b.jpg","nickname":"我叫张小咩²⁰¹⁹","note":"","ucode":"68A8C87EB09D26","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538236,"discussion_content":"这时候应该不强调像素点，就是坐标点，光珊化后面，才有整个屏幕的像素点，自然包括之前的顶点","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639377170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":350155,"ip_address":""},"score":538236,"extra":""}]}]},{"had_liked":false,"id":238653,"user_name":"莫轩竹","can_delete":false,"product_type":"c1","uid":1106341,"ip_address":"","ucode":"A41052665E3F16","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/a5/dfdb4144.jpg","comment_is_top":false,"comment_ctime":1596249924,"is_pvip":false,"replies":[{"id":"88829","content":"vscode有插件，商店里搜一下就有","user_name":"作者回复","comment_id":238653,"uid":"1159792","ip_address":"","utype":1,"ctime":1597022572,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"5891217220","product_id":100053801,"comment_content":"请问编写glsl有什么智能提示插吗，我用的vscode？","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502815,"discussion_content":"vscode有插件，商店里搜一下就有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597022572,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231749,"user_name":"我母鸡啊！","can_delete":false,"product_type":"c1","uid":1633705,"ip_address":"","ucode":"7BFB14BC99E978","user_header":"https://static001.geekbang.org/account/avatar/00/18/ed/a9/662318ab.jpg","comment_is_top":false,"comment_ctime":1593764420,"is_pvip":false,"replies":[{"id":"85602","content":"嗯嗯","user_name":"作者回复","comment_id":231749,"uid":"1159792","ip_address":"","utype":1,"ctime":1593822493,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"5888731716","product_id":100053801,"comment_content":"作业1 ： gl.drawArrays传入gl.LINE_LOOP","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500426,"discussion_content":"嗯嗯","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593822493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231710,"user_name":"我母鸡啊！","can_delete":false,"product_type":"c1","uid":1633705,"ip_address":"","ucode":"7BFB14BC99E978","user_header":"https://static001.geekbang.org/account/avatar/00/18/ed/a9/662318ab.jpg","comment_is_top":false,"comment_ctime":1593756138,"is_pvip":false,"replies":[{"id":"85603","content":"点、线段和三角形","user_name":"作者回复","comment_id":231710,"uid":"1159792","ip_address":"","utype":1,"ctime":1593822520,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"5888723434","product_id":100053801,"comment_content":"所以在webgl中最小的图元是三角形？","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500420,"discussion_content":"点、线段和三角形","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593822520,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231696,"user_name":"miaomiao","can_delete":false,"product_type":"c1","uid":2053756,"ip_address":"","ucode":"F44AA0E14CCD1A","user_header":"","comment_is_top":false,"comment_ctime":1593751101,"is_pvip":false,"replies":[{"id":"85606","content":"这种canvas和webgl都行，spritejs可以根据数据变化自动重绘，你可以试试。有什么问题直接问我或者仓库提issue","user_name":"作者回复","comment_id":231696,"uid":"1159792","ip_address":"","utype":1,"ctime":1593822657,"user_name_real":"月影"}],"discussion_count":4,"race_medal":0,"score":"5888718397","product_id":100053801,"comment_content":"月影老师，你好，有个问题想请教下，如果我想实现12条心电波形折线图，每条波形图的每个脉搏段会依据脉搏类型展示不同的颜色，用户交互：用户可以选择特定的脉搏段，统一修改这个脉搏段类型，这样类型变化，12条心电图的对应脉搏段颜色也变化。这种用canvas好还是webgl好？用canvas的话，需要去获取用户选定的范围，对画布元素进行局部重绘，目前有没有可以只通过更改数据，根据数据变化进行自动重绘的图形库？","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500413,"discussion_content":"这种canvas和webgl都行，spritejs可以根据数据变化自动重绘，你可以试试。有什么问题直接问我或者仓库提issue","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593822657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1152398,"avatar":"https://static001.geekbang.org/account/avatar/00/11/95/8e/e63c91ed.jpg","nickname":"DasonCheng","note":"","ucode":"7DCDE61548522D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":312557,"discussion_content":"做心电图的欢迎来交流，微信：slipware","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1602732684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2053756,"avatar":"","nickname":"miaomiao","note":"","ucode":"F44AA0E14CCD1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289159,"discussion_content":"好的，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594009892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1447696,"avatar":"https://static001.geekbang.org/account/avatar/00/16/17/10/ff08859a.jpg","nickname":"躺着看云飘","note":"","ucode":"D7A7A607D8BD97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2053756,"avatar":"","nickname":"miaomiao","note":"","ucode":"F44AA0E14CCD1A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":301680,"discussion_content":"同学你好, 我也在做心电图的, 遇到一些性能上的问题 能否请教一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598606703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":289159,"ip_address":""},"score":301680,"extra":""}]}]},{"had_liked":false,"id":231112,"user_name":"王子晨","can_delete":false,"product_type":"c1","uid":1390005,"ip_address":"","ucode":"4A207E2AB34253","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/b5/a139a821.jpg","comment_is_top":false,"comment_ctime":1593587715,"is_pvip":false,"replies":[{"id":"85410","content":"会创建多个webgl program 对象，每个对象对应一个顶点着色器和一个片元着色器。只要切换 webgl program 就行","user_name":"作者回复","comment_id":231112,"uid":"1159792","ip_address":"","utype":1,"ctime":1593654659,"user_name_real":"月影"}],"discussion_count":2,"race_medal":0,"score":"5888555011","product_id":100053801,"comment_content":"老师请问用webGL绘制复杂的图形，会不会设置多个顶点和片元着色程序？还是说一直在修改一个顶点和片元着色程序？","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500164,"discussion_content":"会创建多个webgl program 对象，每个对象对应一个顶点着色器和一个片元着色器。只要切换 webgl program 就行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593654659,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1390005,"avatar":"https://static001.geekbang.org/account/avatar/00/15/35/b5/a139a821.jpg","nickname":"王子晨","note":"","ucode":"4A207E2AB34253","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288524,"discussion_content":"明白了，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593773672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230892,"user_name":"量子蔷薇","can_delete":false,"product_type":"c1","uid":1999274,"ip_address":"","ucode":"EFD71A65DF2262","user_header":"https://static001.geekbang.org/account/avatar/00/1e/81/aa/1f7a8e88.jpg","comment_is_top":false,"comment_ctime":1593515826,"is_pvip":false,"replies":[{"id":"85301","content":"很棒，六角星这么实现是不错的思路。另一种思路是把顶点计算出来之后做三角剖分，在后续课程中很快就会学习到啦。","user_name":"作者回复","comment_id":230892,"uid":"1159792","ip_address":"","utype":1,"ctime":1593562770,"user_name_real":"月影"}],"discussion_count":1,"race_medal":0,"score":"5888483122","product_id":100053801,"comment_content":"我在codepen写了作业，https:&#47;&#47;codepen.io&#47;quantum-rose&#47;pen&#47;QWyqexL<br>不确定自己对WebGL绘图的机制理解对了没，关于封装复用代码那部分，感觉我可能复用了一些不需要复用的代码。期待之后的学习！<br>我的六角星只有描边，本质是在不清空画布的情况下画了两个三角形，不知道有没有更好的做法，如果是实心六角星，把我的代码中drawStar函数里的LINE_LOOP换成TRIANGLE_FAN就能画出来，但是其他n角星并不能正确画出来。","like_count":1,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500063,"discussion_content":"很棒，六角星这么实现是不错的思路。另一种思路是把顶点计算出来之后做三角剖分，在后续课程中很快就会学习到啦。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593562770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352333,"user_name":"段帅帅","can_delete":false,"product_type":"c1","uid":1249969,"ip_address":"","ucode":"2675BC0BE154E8","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/b1/3a112b27.jpg","comment_is_top":false,"comment_ctime":1658562040,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1658562040","product_id":100053801,"comment_content":"```js<br>&#47;&#47; 步骤1<br>const bufferId = gl.createBuffer();<br>gl.bindBuffer(gl.ARRAY_BUFFER, bufferId);<br>gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);<br>&#47;&#47; 步骤2<br>const vPosition = gl.getAttribLocation(program, &#39;position&#39;);获取顶点着色器中的position变量的地址gl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);给变量设置长度和类型gl.enableVertexAttribArray(vPosition);激活这个变量<br>```<br>搞不懂为啥这样就把points赋值给了position变量？或者position字段与points字段关联到一起？<br>","like_count":0},{"had_liked":false,"id":339466,"user_name":"、轻","can_delete":false,"product_type":"c1","uid":1625453,"ip_address":"","ucode":"30713196ED1AA6","user_header":"https://static001.geekbang.org/account/avatar/00/18/cd/6d/928b0ffd.jpg","comment_is_top":false,"comment_ctime":1648115507,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648115507","product_id":100053801,"comment_content":"这节课脑容量拉满","like_count":0},{"had_liked":false,"id":326873,"user_name":"城南花已开","can_delete":false,"product_type":"c1","uid":2667591,"ip_address":"","ucode":"07BD0F0D51A512","user_header":"https://static001.geekbang.org/account/avatar/00/28/b4/47/8cdd9ee6.jpg","comment_is_top":false,"comment_ctime":1639729532,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1639729532","product_id":100053801,"comment_content":"老师，webgl在vue项目中要怎么使用，我用.frag为后缀的文件写glsl语法，引入到vue组件，不起效果","like_count":0},{"had_liked":false,"id":326099,"user_name":"何以解忧","can_delete":false,"product_type":"c1","uid":1915533,"ip_address":"","ucode":"4DFE2BDBAF4919","user_header":"https://static001.geekbang.org/account/avatar/00/1d/3a/8d/f5e7a20d.jpg","comment_is_top":false,"comment_ctime":1639378292,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1639378292","product_id":100053801,"comment_content":"看了一下，推荐的shader book ,还有后面的内容，似乎很多操作都是在片元着色器中进行的，一版顶点着色器，我们只要传入顶点数据，不进行其他的处理么","like_count":0},{"had_liked":false,"id":325174,"user_name":"Leon two✌🏻","can_delete":false,"product_type":"c1","uid":1962497,"ip_address":"","ucode":"871CDB528384FB","user_header":"https://static001.geekbang.org/account/avatar/00/1d/f2/01/fc1aad31.jpg","comment_is_top":false,"comment_ctime":1638849273,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1638849273","product_id":100053801,"comment_content":"老师你好，下面的 buffer 的数据绑定给顶点着色器的 position 变量这一步有些疑问<br><br>const bufferId = gl.createBuffer();<br>gl.bindBuffer(gl.ARRAY_BUFFER, bufferId);<br>gl.bufferData(gl.ARRAY_BUFFER, points, gl.STATIC_DRAW);<br><br>const vPosition = gl.getAttribLocation(program, &#39;position&#39;);获取顶点着色器中的position变量的地址<br>gl.vertexAttribPointer(vPosition, 2, gl.FLOAT, false, 0, 0);给变量设置长度和类型<br>gl.enableVertexAttribArray(vPosition);激活这个变量<br><br>获取position变量之后，好像也没有看到具体的赋值操作，他是怎么关联到 points 的buffer数据呢，而且如果我之前创建了多个 buffer，position变量又是指向的哪个呢<br><br>","like_count":0,"discussions":[{"author":{"id":2897994,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/38/4a/4375285f.jpg","nickname":"刘体耀","note":"","ucode":"347F8E7FD95DF6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582613,"discussion_content":"同疑问，怎么就关联在一起了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659527127,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315121,"user_name":"DARLY","can_delete":false,"product_type":"c1","uid":2356352,"ip_address":"","ucode":"FB3E63C0FEA5AD","user_header":"https://static001.geekbang.org/account/avatar/00/23/f4/80/ed4f3bd9.jpg","comment_is_top":false,"comment_ctime":1633694258,"is_pvip":false,"replies":[{"id":"114126","content":"课程中会介绍部分webGL的基础，以确保零基础也能跟上，当然如果能系统地学一下更好了。","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1633749891,"ip_address":"","comment_id":315121,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633694258","product_id":100053801,"comment_content":"还需要另外再学一下webGL的基础应用吗？或者在课程中会带着我们慢慢熟悉？","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527873,"discussion_content":"课程中会介绍部分webGL的基础，以确保零基础也能跟上，当然如果能系统地学一下更好了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1633749891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":307595,"user_name":"我最爱吃大西瓜","can_delete":false,"product_type":"c1","uid":2411399,"ip_address":"","ucode":"8055507BE42465","user_header":"https://static001.geekbang.org/account/avatar/00/24/cb/87/0b727d00.jpg","comment_is_top":false,"comment_ctime":1629168716,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629168716","product_id":100053801,"comment_content":"老师我想请教一个问题，就是web端，移动端，他们这些地图到底是怎么去绘制的呢，好像是加载的什么资源，直接就渲染出来了，我不知道它底层和原理到底是什么，如果我自己想做一个地图，是不是要用C++去开发引擎呢","like_count":0},{"had_liked":false,"id":287004,"user_name":"Gyrate","can_delete":false,"product_type":"c1","uid":2074062,"ip_address":"","ucode":"0F799A139826EB","user_header":"https://static001.geekbang.org/account/avatar/00/1f/a5/ce/e4fae1bb.jpg","comment_is_top":false,"comment_ctime":1617723327,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1617723327","product_id":100053801,"comment_content":"老师，请问GLSL有什么方法可以debug吗？","like_count":0},{"had_liked":false,"id":286882,"user_name":"馒头爱学习","can_delete":false,"product_type":"c1","uid":1402625,"ip_address":"","ucode":"003DDBB8A61C01","user_header":"https://static001.geekbang.org/account/avatar/00/15/67/01/313652c2.jpg","comment_is_top":false,"comment_ctime":1617668514,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1617668514","product_id":100053801,"comment_content":"月影老师好，文中提到“无论图形中有多少个像素点，都可以通过着色器程序在 GPU 中被同时执行。” GPU的硬件基础是什么，为什么无论多少像素都可以同时执行？","like_count":0,"discussions":[{"author":{"id":1915533,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/3a/8d/f5e7a20d.jpg","nickname":"何以解忧","note":"","ucode":"4DFE2BDBAF4919","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538238,"discussion_content":"和cpu 一样的计算核心，计算能力相比cpu 弱很多，但是核心特别多，所以能同时执行","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639377375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265138,"user_name":"某小浩","can_delete":false,"product_type":"c1","uid":1511556,"ip_address":"","ucode":"F0A65F516B17BB","user_header":"","comment_is_top":false,"comment_ctime":1606790191,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606790191","product_id":100053801,"comment_content":"要绘制空心的三角形，有三种mode可以选择，LINE_STRIP，LINE_LOOP，LINES，三种分别需要接受4个点坐标，3个点坐标，6个点坐标来完成相关图形绘制","like_count":0},{"had_liked":false,"id":264588,"user_name":"很好吃","can_delete":false,"product_type":"c1","uid":1562972,"ip_address":"","ucode":"470F126124D05D","user_header":"https://static001.geekbang.org/account/avatar/00/17/d9/5c/4f8732e8.jpg","comment_is_top":false,"comment_ctime":1606534008,"is_pvip":false,"replies":[{"id":"101106","content":"坚持","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1612876436,"ip_address":"","comment_id":264588,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1606534008","product_id":100053801,"comment_content":"哈哈哈，太枯燥了，大大我学不下去了。","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510614,"discussion_content":"坚持","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612876436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244455,"user_name":"不见飞刀","can_delete":false,"product_type":"c1","uid":1221078,"ip_address":"","ucode":"2490E8D608CECA","user_header":"https://static001.geekbang.org/account/avatar/00/12/a1/d6/9d99e5ef.jpg","comment_is_top":false,"comment_ctime":1598521523,"is_pvip":false,"replies":[{"id":"94999","content":"坐标系不一样的，仔细看课程内容","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1605515573,"ip_address":"","comment_id":244455,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1598521523","product_id":100053801,"comment_content":"webgl的坐标系跟canvas的坐标系不一样嘛？ canvas的长宽设置的300，为什么points的坐标是1和-1","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504588,"discussion_content":"坐标系不一样的，仔细看课程内容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605515573,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2064214,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/7f/56/1ab5931f.jpg","nickname":"Herve","note":"","ucode":"25941E69C75D16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349366,"discussion_content":"WebGL最终使用的是裁剪空间坐标系，三个维度的范围都是[-1 ~ 1]","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613137208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237972,"user_name":"Rexxar","can_delete":false,"product_type":"c1","uid":1543460,"ip_address":"","ucode":"86D0238F0F0C55","user_header":"https://static001.geekbang.org/account/avatar/00/17/8d/24/a2f886d3.jpg","comment_is_top":false,"comment_ctime":1596016971,"is_pvip":false,"replies":[{"id":"87975","content":"因为是齐次坐标，所以w是1","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1596074137,"ip_address":"","comment_id":237972,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596016971","product_id":100053801,"comment_content":"请问老师:<br>gl_Position = vec4(position, 1.0, 1.0);<br>在一个三维坐标系中用一个四维向量描述位置?<br>这思维向量里的三个参数position, 1.0, 1.0应该怎么理解?","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502604,"discussion_content":"因为是齐次坐标，所以w是1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1596074137,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231735,"user_name":"我母鸡啊！","can_delete":false,"product_type":"c1","uid":1633705,"ip_address":"","ucode":"7BFB14BC99E978","user_header":"https://static001.geekbang.org/account/avatar/00/18/ed/a9/662318ab.jpg","comment_is_top":false,"comment_ctime":1593761529,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593761529","product_id":100053801,"comment_content":"冲冲冲！！！ 快更新吧！","like_count":0},{"had_liked":false,"id":230500,"user_name":"ailan","can_delete":false,"product_type":"c1","uid":1389917,"ip_address":"","ucode":"31931F680667EA","user_header":"https://static001.geekbang.org/account/avatar/00/15/35/5d/be04d914.jpg","comment_is_top":false,"comment_ctime":1593400947,"is_pvip":false,"replies":[{"id":"85305","content":"可以，因为默认的canvas样式宽高是300*150，所以就变成2:1","user_name":"作者回复","user_name_real":"月影","uid":"1159792","ctime":1593563341,"ip_address":"","comment_id":230500,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1593400947","product_id":100053801,"comment_content":"老师，您好。我一开始未设置画布大小，画出的是等腰直角三角形；设置宽高相等时才能画出与示例相同的等腰三角形。那我是否可以这样理解，X轴的1单位长度 &#47; Y轴的1单位长度 = 画布的宽 &#47; 画布的高？","like_count":0,"discussions":[{"author":{"id":1159792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/b2/70/ba9cecc6.jpg","nickname":"月影","note":"","ucode":"298582FA7DBF27","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499912,"discussion_content":"可以，因为默认的canvas样式宽高是300*150，所以就变成2:1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593563341,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}