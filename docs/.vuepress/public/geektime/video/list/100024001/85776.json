{"id":85776,"title":"17 | 扩展与复用","content":"<h1>课件及源代码地址</h1><p><a href=\"https://gitee.com/geektime-geekbang/go_learning\">https://gitee.com/geektime-geekbang/go_learning</a></p><h2>书目推荐</h2><p><a href=\"time://mall?url=https%3A%2F%2Fh5.youzan.com%2Fv2%2Fgoods%2F1ycmk3uob0ryw\">《计算机程序的构造和解释》</a></p>","comments":[{"had_liked":false,"id":100529,"user_name":"风吹过","can_delete":false,"product_type":"c3","uid":1068817,"ip_address":"","ucode":"5BDE444ECFE6B5","user_header":"https://static001.geekbang.org/account/avatar/00/10/4f/11/b5044abb.jpg","comment_is_top":false,"comment_ctime":1559571562,"is_pvip":false,"replies":[{"id":36526,"content":"有好的文档给同学们一起推荐一下吧","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1559785395,"ip_address":"","comment_id":100529,"utype":1}],"discussion_count":5,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"一个简单的例子，绕得云里雾里，自己的思路都不清晰，还真不如看文档","like_count":16,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452586,"discussion_content":"有好的文档给同学们一起推荐一下吧","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1559785395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1429336,"avatar":"https://static001.geekbang.org/account/avatar/00/15/cf/58/dabb0f73.jpg","nickname":"Super Ollie","note":"","ucode":"4F30DE41673C97","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405649,"discussion_content":"确实，明明是go语言的入门课，讲的真是无语。这是我买的最失败的一个课了。。。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1634612567,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2834523,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/gC0ujfu46rHmBPJDQrbafIhFfjFeTehQehKw3DpxwGSUnlfy5k6qWbKN9gCHSwF2uhIWSbVfZbo790EpNKleKA/132","nickname":"funtrin","note":"","ucode":"6C73FE32EDF0F4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545858,"discussion_content":"老师确实讲的不清晰，但是写的很清晰","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642067280,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2459544,"avatar":"","nickname":"Geek_2416a4","note":"","ucode":"754BF7B56D4A80","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392079,"discussion_content":"这很清晰啊，不明白为啥你会觉得不清晰","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630817842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1143363,"avatar":"https://static001.geekbang.org/account/avatar/00/11/72/43/46566245.jpg","nickname":"王小涛","note":"","ucode":"03C57BCD6AE684","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":39619,"discussion_content":"美国不缴联合国会费，你去要","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571967897,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":239894,"user_name":"卜凌峰","can_delete":false,"product_type":"c3","uid":2091390,"ip_address":"","ucode":"849C3C3ED367E8","user_header":"https://static001.geekbang.org/account/avatar/00/1f/e9/7e/5d02769c.jpg","comment_is_top":false,"comment_ctime":1596686436,"is_pvip":false,"replies":[{"id":89171,"content":"区别还是很多的，由于第一个传递的是指针\n1. 第一个可以传入 nil，而第二个不行\n2. 在hi中修改传入的指针指向的字符串的值，调用者的值也会受影响\n3. 当传入的字符串很大的时候，第一个可以有效的避免大量的值复制\n","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1597306907,"ip_address":"","comment_id":239894,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"老师 既然go中的方法都是值传递，那么hi(word *string)和hi(word string)有什么区别","like_count":3,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":503268,"discussion_content":"区别还是很多的，由于第一个传递的是指针\n1. 第一个可以传入 nil，而第二个不行\n2. 在hi中修改传入的指针指向的字符串的值，调用者的值也会受影响\n3. 当传入的字符串很大的时候，第一个可以有效的避免大量的值复制\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597306907,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1939363,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL212ET0q3e8U5xXuYe7LCBlrpdBFkrgedibfdao2fMUKnCWwxm2I05RB7EyDcgeL0g60ib88cn2dmQ/132","nickname":"Clark Chen","note":"","ucode":"C0E5AECA4CE7C5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":627702,"discussion_content":"1. word *string 的值传递 相当于是地址值的传递， 这种传递方式和java 中的 实参传递给形参的方式相同（core java 中描述，java 中都是值传递，没有引用传递是一个意思）\nword string 是真的值传递， 新开辟出一块地址， 并将实参对象的每个属性都一一复制过去。 可以想象成java 中在传值之前，先深clone 出一份对象，在把这个clone的对象传过去。有点不太贴切，但是意思差不多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1694446163,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"辽宁","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":252309,"user_name":"刘卓","can_delete":false,"product_type":"c3","uid":1105891,"ip_address":"","ucode":"61516B6CAF5826","user_header":"https://static001.geekbang.org/account/avatar/00/10/df/e3/937486d6.jpg","comment_is_top":false,"comment_ctime":1602231201,"is_pvip":false,"replies":[{"id":94378,"content":"在Go中不能通过继承或Override的方式来完成这样的工作，要改为使用接口来实现","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1604817252,"ip_address":"","comment_id":252309,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"老师，这样的 override 机制是不是就导致我们常用的模板方法失效了，“父类”的方法里钩不到子类重载后的方法。那模板方法怎样实现或者替代呢？","like_count":2,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":506746,"discussion_content":"在Go中不能通过继承或Override的方式来完成这样的工作，要改为使用接口来实现","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604817252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146413,"user_name":"张帅","can_delete":false,"product_type":"c3","uid":1718621,"ip_address":"","ucode":"9772D52D7BC1C6","user_header":"","comment_is_top":false,"comment_ctime":1572515434,"is_pvip":false,"replies":[{"id":56721,"content":"GO语言是不支持继承的，所以也就无法对父类方法override","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1572659648,"ip_address":"","comment_id":146413,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"所以是没办法重载Pet的Speak方法？","like_count":1,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472851,"discussion_content":"GO语言是不支持继承的，所以也就无法对父类方法override","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572659648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":233823,"user_name":"Aprelude","can_delete":false,"product_type":"c3","uid":1658796,"ip_address":"","ucode":"840D3F7A35AEEF","user_header":"https://static001.geekbang.org/account/avatar/00/19/4f/ac/80439ba7.jpg","comment_is_top":false,"comment_ctime":1594464559,"is_pvip":false,"replies":[{"id":86855,"content":"这是Go的“匿名类型嵌⼊”的特殊语法。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1594948559,"ip_address":"","comment_id":233823,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"new了dog 但是没有new里面的成员pet，这个为啥不会报空指针异常啊","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501178,"discussion_content":"这是Go的“匿名类型嵌⼊”的特殊语法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594948559,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180004,"user_name":"Remember九离","can_delete":false,"product_type":"c3","uid":1237327,"ip_address":"","ucode":"97EE6E6344689F","user_header":"https://static001.geekbang.org/account/avatar/00/12/e1/4f/00476b4c.jpg","comment_is_top":false,"comment_ctime":1582163722,"is_pvip":false,"replies":[{"id":71763,"content":"正如我在课件中提到的Go语言是不支持继承的。这个只是通过匿名嵌套实现的复合。所以，Dog中实际都是pet中的方法，并且由于pet并不是继承中的父类，所以也不能访问Dog中的方法或成员。","user_name":"作者回复","user_name_real":"ChaoCai2010","uid":1008262,"ctime":1583672639,"ip_address":"","comment_id":180004,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"最后一个示例不是很明白 ,Dog 自己实现了 Speak 方法， 但是再调用   dog.SpeakTo(&quot;xxx&quot;) ，因为dog 自己没有实现 SpeakTo ，所以调用了  Pet 的 SpeakTo ，Pet 的 SpeakTo 里调用了自己的 Speak () 所以显示 ... ， 为什么这里会说没有去调用 Dog 里重写的 Speak ，所以这和go语言没关系吧   如果是 dog.Speak() 那dog重写了Speak 就调用自己的  没有写还是调用的 Pet.Speak()\n","like_count":0,"discussions":[{"author":{"id":1008262,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/62/86/632ad029.jpg","nickname":"蔡超","note":"","ucode":"4C281BBF511238","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484488,"discussion_content":"正如我在课件中提到的Go语言是不支持继承的。这个只是通过匿名嵌套实现的复合。所以，Dog中实际都是pet中的方法，并且由于pet并不是继承中的父类，所以也不能访问Dog中的方法或成员。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583672639,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2890901,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/1c/95/3d8920c9.jpg","nickname":"abcdabcd999","note":"","ucode":"E1D9902737F544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600292,"discussion_content":"我觉得这节课的结论是不对的，golang 实现了继承，需要完全 override 所有的方法 才能表现出继承特性，这节课的内容只能证明 golang 没有虚函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674188494,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364549,"discussion_content":"func (d *Dog) Speak() {\n\tfmt.Print(&#34;Wang!&#34;)\n}\n\nfunc (d *Dog) SpeakTo(host string) {\n\tfmt.Print(&#34; dog &#34;, host)\n}\n\nfunc TestDog(t *testing.T) {\n\tdog := new(NewDog)\n\tdog.SpeakTo(&#34;Chao&#34;)\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617514855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":99394,"user_name":"stopper","can_delete":false,"product_type":"c3","uid":1231840,"ip_address":"","ucode":"A049638521D6DF","user_header":"https://static001.geekbang.org/account/avatar/00/12/cb/e0/30b70102.jpg","comment_is_top":false,"comment_ctime":1559205476,"is_pvip":false,"replies":null,"discussion_count":10,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"为什么总有一种，看文档比视频更好的感觉，不合理","like_count":46,"discussions":[{"author":{"id":1241757,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/9d/26ea1126.jpg","nickname":"Jesse Rau","note":"","ucode":"9BDA1552A57010","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300511,"discussion_content":"只能说 ... 你不孤独。我在极客时间买了许多课程。只好安慰自己 ... 买多了，迟早会踩一次雷。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1598153795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1334762,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5d/ea/09ad57d5.jpg","nickname":"wangzhen","note":"","ucode":"1396C2F2192D17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":315878,"discussion_content":"看到这，觉得这家伙就是来混钱的，课程便宜也不能这样应付，真不如看文档。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1603333869,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":4,"child_discussions":[{"author":{"id":1083312,"avatar":"https://static001.geekbang.org/account/avatar/00/10/87/b0/5a1c782a.jpg","nickname":"miki","note":"","ucode":"88FF747656A271","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1334762,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5d/ea/09ad57d5.jpg","nickname":"wangzhen","note":"","ucode":"1396C2F2192D17","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374355,"discussion_content":"口德啊，讲课的是他，听课的是你，所以必有比你强的地方。  宽容换位的心都没有，不知道什么团队会喜欢你这种人","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1621149309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":315878,"ip_address":"","group_id":0},"score":374355,"extra":""},{"author":{"id":1702255,"avatar":"https://static001.geekbang.org/account/avatar/00/19/f9/6f/32268611.jpg","nickname":"Mr.Robot","note":"","ucode":"4CA84795F59339","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1083312,"avatar":"https://static001.geekbang.org/account/avatar/00/10/87/b0/5a1c782a.jpg","nickname":"miki","note":"","ucode":"88FF747656A271","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543054,"discussion_content":"书的好坏 读者没资格评价？ 我评价必须要能写书？ 神逻辑。好就是好不好就是不好。 也没人喊着退钱。何必这么积极洗地呢","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640940103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374355,"ip_address":"","group_id":0},"score":543054,"extra":""},{"author":{"id":2110585,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKfxYdHJ3NNnOzBFu2N6oNPXhfMRibh3nMjneJLN6WCfVStQKLaJNVehUDmcpsj1mIfFegiauToaxbQ/132","nickname":"Geek_640f2c","note":"","ucode":"176EEFFF27723A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1083312,"avatar":"https://static001.geekbang.org/account/avatar/00/10/87/b0/5a1c782a.jpg","nickname":"miki","note":"","ucode":"88FF747656A271","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":543513,"discussion_content":"别人花钱买了这门课，好歹买个教训，你花钱买了课，连课程好坏都听不出来。还搁这口德宽容普渡众生呢。不过肯定有团队喜欢你这样的大聪明，为什么呢，好糊弄呗，给套儿就上，画饼就吃，不用pua，您自己上赶着受骗，怀疑你到底懂不懂技术，不行就早点转行，程序员这行不好混着呢。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1641190140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":374355,"ip_address":"","group_id":0},"score":543513,"extra":""}]},{"author":{"id":1313831,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ibbEWWUTH7964UOnwpBPC8Lhb1TS4s7XMEXTPKHPUBlj58GVkdRQRqa6EydIRL2I1uJDzeichLj86gJfTpzcgcCA/132","nickname":"Vincent_","note":"","ucode":"0904F7CE04E788","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":303778,"discussion_content":"敲了代码自己都能楞几秒的老师，我是真的没话说","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1599379626,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1003327,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/4f/3f/6f62f982.jpg","nickname":"王坤祥","note":"","ucode":"FB988B9F381A33","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":394001,"discussion_content":"我觉得我也踩雷了。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1631685219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1666659,"avatar":"https://static001.geekbang.org/account/avatar/00/19/6e/63/b15d1d87.jpg","nickname":"🍒古刹飞鹰🍒","note":"","ucode":"375F9FCF925CA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":276098,"discussion_content":"同感","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1590816523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2419502,"avatar":"https://static001.geekbang.org/account/avatar/00/24/eb/2e/90fea784.jpg","nickname":"柒","note":"","ucode":"D41241629321A1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587284,"discussion_content":"同感，讲得是真的差，无语了都。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662959962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":77199,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c3","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1552883110,"is_pvip":false,"replies":null,"discussion_count":5,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"重载（overload）是指同一个类里有函数名相同但是参数不同的函数，重写（override）指子类重新实现父类已有的方法","like_count":20,"discussions":[{"author":{"id":1904131,"avatar":"","nickname":"小火龙","note":"","ucode":"B6C4F22B1A6D51","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":211951,"discussion_content":"这老师有时候感觉还挺专业，有时候让人觉得很业余。。。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584901912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1314651,"avatar":"https://static001.geekbang.org/account/avatar/00/14/0f/5b/85054205.jpg","nickname":"桥翠迪","note":"","ucode":"3ECD7A526BD987","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1904131,"avatar":"","nickname":"小火龙","note":"","ucode":"B6C4F22B1A6D51","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292481,"discussion_content":"看来不止我一个人这么觉得","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595240773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":211951,"ip_address":"","group_id":0},"score":292481,"extra":""}]},{"author":{"id":1131208,"avatar":"https://static001.geekbang.org/account/avatar/00/11/42/c8/7284c2d7.jpg","nickname":"追忆失去的心","note":"","ucode":"EE772F43A3D54A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":351719,"discussion_content":"架构师应该很少写代码了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614413081,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189009,"discussion_content":"对，你说的是对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582848164,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1105161,"avatar":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","nickname":"helloworld","note":"","ucode":"1EECCA0F43E278","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47235,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573300880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80874,"user_name":"Geek_56ba03","can_delete":false,"product_type":"c3","uid":1448310,"ip_address":"","ucode":"A90E27958D1268","user_header":"https://static001.geekbang.org/account/avatar/00/16/19/76/0bdc18ce.jpg","comment_is_top":false,"comment_ctime":1553747069,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"不一定非要走 面向对象的路数。新的语言，新的编程习惯。","like_count":14},{"had_liked":false,"id":175198,"user_name":"147258","can_delete":false,"product_type":"c3","uid":1387033,"ip_address":"","ucode":"78C836844011F8","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epxEZHe5LI1qMYTqDWwbFkCsT07Etx5Wib1hg326mPGkeslv13egvmDYXyayuCsx76AbnUicF2rCg1g/132","comment_is_top":false,"comment_ctime":1580613588,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100024001,"comment_content":"感觉，代码逻辑，代码编写，讲课的流程度，都是磕磕绊绊的， 看的好痛苦~~","like_count":13,"discussions":[{"author":{"id":1241757,"avatar":"https://static001.geekbang.org/account/avatar/00/12/f2/9d/26ea1126.jpg","nickname":"Jesse Rau","note":"","ucode":"9BDA1552A57010","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300510,"discussion_content":"只能说 ... 你不孤独。我在极客时间买了许多课程。只好安慰自己 ... 买多了，迟早会踩一次雷。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598153779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":231794,"user_name":"EricJones","can_delete":false,"product_type":"c3","uid":1207580,"ip_address":"","ucode":"0A80B609400D6B","user_header":"https://static001.geekbang.org/account/avatar/00/12/6d/1c/d9746372.jpg","comment_is_top":false,"comment_ctime":1593770587,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"看来不只我一个人感觉不清晰。","like_count":11},{"had_liked":false,"id":270123,"user_name":"小寞子。(≥3≤)","can_delete":false,"product_type":"c3","uid":1206545,"ip_address":"","ucode":"6D978BDCBB2862","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/11/831cec7d.jpg","comment_is_top":false,"comment_ctime":1608943459,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"适合有编程基础和经验的看。。。。我基本上看几分钟就明白go的核心了。  &quot;Duck Type&quot; 虽然不支持继承 不支持扩展 甚至成员函数其实都不是成员函数。。 但是用起来最后达到的效果一样  他就是继承。 。\ngolang的这种实现也比较好 因为这样阅读代码不会让你奇怪 产生“我这个object到底是他妈子类还是父类”这种问题。 aggregation over inheritance. 强制程序员把类型表达的非常明确。 ","like_count":5},{"had_liked":false,"id":76909,"user_name":"kaixiao7","can_delete":false,"product_type":"c3","uid":1242577,"ip_address":"","ucode":"505EC4AFB5E656","user_header":"https://static001.geekbang.org/account/avatar/00/12/f5/d1/cc6f82eb.jpg","comment_is_top":false,"comment_ctime":1552747572,"is_pvip":false,"replies":null,"discussion_count":3,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"老师, 在Java的例子中 Dog extends Pet 并重写了Speak()方法, 这应该不叫重载而是方法覆盖或者重写吧?","like_count":5,"discussions":[{"author":{"id":1113733,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/85/9ab352a7.jpg","nickname":"iMARS","note":"","ucode":"10C5C31908AA09","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":17282,"discussion_content":"重载也可以的吧，英文应该都是 override","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568965967,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1356077,"avatar":"https://static001.geekbang.org/account/avatar/00/14/b1/2d/661132f3.jpg","nickname":"佚名","note":"","ucode":"A4E35B21AC3C31","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1113733,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/85/9ab352a7.jpg","nickname":"iMARS","note":"","ucode":"10C5C31908AA09","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":102421,"discussion_content":"重写是override，重载是overload","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577345204,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":17282,"ip_address":"","group_id":0},"score":102421,"extra":""},{"author":{"id":1005391,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","nickname":"奕","note":"","ucode":"73CEA468CE70C3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1113733,"avatar":"https://static001.geekbang.org/account/avatar/00/10/fe/85/9ab352a7.jpg","nickname":"iMARS","note":"","ucode":"10C5C31908AA09","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":189024,"discussion_content":"在 java 中 重载和重写是不同的意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582848749,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":17282,"ip_address":"","group_id":0},"score":189024,"extra":""}]}]},{"had_liked":false,"id":286703,"user_name":"escray","can_delete":false,"product_type":"c3","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1617515350,"is_pvip":true,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"先看了留言，感觉大家对老师的怨念颇深，不过我觉的还好，打算听完这个课程，然后再到隔壁的《Go 语言核心36讲》去看看。\n\n我觉得极客时间的课程整体质量还不错，如果有其他平台好的课程，或者好书（文档），不妨也推荐一下。\n\n我是一边看视频一遍敲代码，不明白的地方看代码一般就能理解，或者看一下留言里面其他同学的代码。","like_count":3,"discussions":[{"author":{"id":2853200,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/89/50/aee9fdab.jpg","nickname":"小杰","note":"","ucode":"BBDF8E9F348F65","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":544682,"discussion_content":"是呀，我也觉得老师讲得很好，一边看，一边敲代码。不懂得，停下来去思考，去查阅，如果实在不懂，要么跳过，要么搞明白。从无知变为有知本来就是一段很痛苦的过程。尤其是看算法原理","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1641635770,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303017,"user_name":"geek_5624","can_delete":false,"product_type":"c3","uid":2683029,"ip_address":"","ucode":"A490D00BF717BE","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/cabLXAUXiavUplEOz3rdXFs6ib1CuNFD3YDjVybSe2hTwicLAWJuQjkx8HcfzPuyypeTnUibwKI8D3THIicgnzw3dFg/132","comment_is_top":false,"comment_ctime":1626518997,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"所以这节课老师您讲了个啥？逻辑不清晰，绕得云里雾里，真忍不住要吐槽一波......","like_count":2},{"had_liked":false,"id":239497,"user_name":"koushr","can_delete":false,"product_type":"c3","uid":1600225,"ip_address":"","ucode":"76AEAF2BC3D05D","user_header":"https://static001.geekbang.org/account/avatar/00/18/6a/e1/04b9d75e.jpg","comment_is_top":false,"comment_ctime":1596549223,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"java里面叫重写，不是重载，这是两个完全不同的概念。","like_count":2},{"had_liked":false,"id":175430,"user_name":"xinsuonline","can_delete":false,"product_type":"c3","uid":1118322,"ip_address":"","ucode":"F50BEFBFD390C6","user_header":"https://static001.geekbang.org/account/avatar/00/11/10/72/c464174e.jpg","comment_is_top":false,"comment_ctime":1580717937,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"我觉得老师思路挺清晰的，这节课下来听明白了","like_count":2},{"had_liked":false,"id":170377,"user_name":"海盗船长","can_delete":false,"product_type":"c3","uid":1363634,"ip_address":"","ucode":"ECB28BA21A4113","user_header":"https://static001.geekbang.org/account/avatar/00/14/ce/b2/1f914527.jpg","comment_is_top":false,"comment_ctime":1578582304,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"这一课确实有点绕 也看出老师费心了 ","like_count":2},{"had_liked":false,"id":142223,"user_name":"碧雪天虹","can_delete":false,"product_type":"c3","uid":1258359,"ip_address":"","ucode":"313CC048C7E341","user_header":"https://static001.geekbang.org/account/avatar/00/13/33/77/0c593044.jpg","comment_is_top":false,"comment_ctime":1571314516,"is_pvip":false,"replies":null,"discussion_count":2,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"父类: \n1. 把要重载的方法用函数式参数存起来(充当虚表)\n2. 调用方法从虚表查找实现, 没有的话就给个默认实现\n3. 调用实现方法\n\n子类:\n1. 继承父类方法\n2. 新增一个构造函数, 用于修改虚表, 覆盖父类实现\n3. 创建对象并调用构造函数, 就可以愉快地玩耍了\n\npackage extension\n\nimport (\n\t&quot;fmt&quot;\n\t&quot;testing&quot;\n)\n\ntype Pet struct {\n\tspeakHandle   func()\n\tspeakToHandle func(string)\n}\n\nfunc (p *Pet) Speak() {\n\tif p.speakHandle == nil {\n\t\tp.speakHandle = func() {\n\t\t\tfmt.Print(&quot;...&quot;)\n\t\t}\n\t}\n\tp.speakHandle()\n}\n\nfunc (p *Pet) SpeakTo(host string) {\n\tif p.speakToHandle == nil {\n\t\tp.speakToHandle = func(_host string) {\n\t\t\tp.Speak()\n\t\t\tfmt.Println(_host)\n\t\t}\n\t}\n\tp.speakToHandle(host)\n}\n\ntype Dog struct {\n\tPet\n}\n\nfunc (d *Dog) Ctor() *Dog {\n\toverrideSpeakHandle(d)\n\t&#47;&#47;overrideSpeakToHandle(d)\n\treturn d\n}\n\nfunc overrideSpeakHandle(d *Dog) {\n\tif d.speakHandle == nil {\n\t\td.speakHandle = func() {\n\t\t\tfmt.Print(&quot;Wang!&quot;)\n\t\t}\n\t}\n}\n\nfunc overrideSpeakToHandle(d *Dog) {\n\tif d.speakToHandle == nil {\n\t\td.speakToHandle = func(_host string) {\n\t\t\td.Speak()\n\t\t\tfmt.Println(_host + &quot;...&quot;)\n\t\t}\n\t}\n}\n\nfunc TestDog(t *testing.T) {\n\tpet := Pet{}\n\tdog := new(Dog).Ctor()\n\tpet.SpeakTo(&quot;Xu&quot;)\n\tdog.SpeakTo(&quot;Xu&quot;)\n}\n\n","like_count":1,"discussions":[{"author":{"id":2890901,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/1c/95/3d8920c9.jpg","nickname":"abcdabcd999","note":"","ucode":"E1D9902737F544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600289,"discussion_content":"这个思路不错，Dog 继承来的 Pet 的行为，由于一开始 Dog 没有初始化 SpeakXXX 方法，然后强行调用 ctor 构造好 SpeakXXX 方法，修改了它的默认行为，👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674185425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1020525,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","nickname":"escray","note":"","ucode":"1F4204930E47C4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":364550,"discussion_content":"不明觉厉，感觉这段代码类似于用 C 语言硬性实现了一下面向对象？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617515111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":395568,"user_name":"一秒","can_delete":false,"product_type":"c3","uid":1311001,"ip_address":"山东","ucode":"F149B7F60620BD","user_header":"https://static001.geekbang.org/account/avatar/00/14/01/19/f4da2829.jpg","comment_is_top":false,"comment_ctime":1731251642,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100024001,"comment_content":"type Pet struct {\n}\nfunc (p *Pet) Speak() {\n\tfmt.Print(&quot;...&quot;)\n}\n\nfunc (p *Pet) SpeakTo(host string) {\n\tp.Speak()\n\tfmt.Println(&quot; &quot;, host)\n}\n&#47;*\ntype Dog struct {\n\tName Pet  &#47;&#47; 当然也可以将匿名字段换成具名字段\n}\n*&#47;\ntype Dog struct {\n\tPet &#47;&#47; 匿名嵌入，实际上 go 内部是  Pet Pet ，即 名字为 Pet，类型为 Pet\n}\n\nfunc TestDog(t *testing.T) {\n\tdog := new(Dog)     &#47;&#47;dog 类型是 *Dog\n\tdog.SpeakTo(&quot;Chao&quot;) &#47;&#47;简写，平常习惯写法;可直接调用 Pet 上的方法\n\t&#47;&#47;dog.Name.SpeakTo(&quot;chao&quot;)\n\tdog.Pet.SpeakTo(&quot;Chao&quot;) &#47;&#47; 显式的访问，也就是实际上是这样调用的\n}","like_count":0},{"had_liked":false,"id":366770,"user_name":"abcdabcd999","can_delete":false,"product_type":"c3","uid":2890901,"ip_address":"山西","ucode":"E1D9902737F544","user_header":"https://static001.geekbang.org/account/avatar/00/2c/1c/95/3d8920c9.jpg","comment_is_top":false,"comment_ctime":1674188009,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"我觉得这节课得出了一个错误的结论。正确的结论应该是： golang 通过组合实现了继承。而不是文中说的 golang 不支持继承。\n\n我们看两段代码：\n\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\td := new(Dog)\n\t&#47;&#47; d := Dog{}\n\td.Speak()\n\td.SpeakTo(&quot;wangwang&quot;)\n}\n\ntype Pet struct {\n}\n\nfunc (p *Pet) Speak() {\n\tfmt.Print(&quot;...&quot;)\n}\n\nfunc (p *Pet) SpeakTo(host string) {\n\tp.Speak()\n\tfmt.Println(&quot; &quot;, host)\n}\n\n&#47;&#47; 组合优于继承，在其他语言中也认为继承是万恶之源，因此\n&#47;&#47; 在 golang 中直接不支持继承\ntype Dog struct {\n\tPet &#47;&#47; 组合了匿名字段\n}\n\n&#47;&#47; 我们说，如果上面这是 golang 中的继承，那么继承就能 override 父类的方法\n&#47;&#47; 全部 override 父类所有的方法才叫继承\nfunc (d *Dog) Speak() {\n\tfmt.Println(&quot;Wang!&quot;)\n}\n\n&#47;&#47; func (d *Dog) SpeakTo(host string) {\n&#47;&#47; \td.Speak()\n&#47;&#47; \tfmt.Println(&quot;Wang!&quot;, host)\n&#47;&#47; }\n\n\n和\n\npackage main\n\nimport &quot;fmt&quot;\n\nfunc main() {\n\td := new(Dog)\n\t&#47;&#47; d := Dog{}\n\td.Speak()\n\td.SpeakTo(&quot;wangwang&quot;)\n}\n\ntype Pet struct {\n}\n\nfunc (p *Pet) Speak() {\n\tfmt.Print(&quot;...&quot;)\n}\n\nfunc (p *Pet) SpeakTo(host string) {\n\tp.Speak()\n\tfmt.Println(&quot; &quot;, host)\n}\n\n&#47;&#47; 组合优于继承，在其他语言中也认为继承是万恶之源，因此\n&#47;&#47; 在 golang 中直接不支持继承\ntype Dog struct {\n\tPet &#47;&#47; 组合了匿名字段\n}\n\n&#47;&#47; 我们说，如果上面这是 golang 中的继承，那么继承就能 override 父类的方法\n&#47;&#47; 全部 override 父类所有的方法才叫继承\nfunc (d *Dog) Speak() {\n\tfmt.Println(&quot;Wang!&quot;)\n}\n\nfunc (d *Dog) SpeakTo(host string) {\n\td.Speak()\n\tfmt.Println(&quot;Wang!&quot;, host)\n}\n\n这两段代码唯一的区别是：\n\nDog 重写了 \n\nfunc (d *Dog) SpeakTo(host string) {\n\td.Speak()\n\tfmt.Println(&quot;Wang!&quot;, host)\n}\n\n\n我们执行第二段代码发现它会是正确的调用, 第一段代码由于 Dog 根本没有重写 SpeakTo 方法，所以它调用了 Pet 的 SpeakTo 方法，这个 Dog 对象实际上只是一个 Pet 对象而已，因为 Dog 没有完全覆盖 Pet。这只能说 golang 没有实现虚函数，所以 SpeakTo 找不到合适的 Speak 方法 (如果找到了反而很混乱，万恶之源出现了)，这不等同于没有实现继承","like_count":0},{"had_liked":false,"id":365437,"user_name":"赵*建","can_delete":false,"product_type":"c3","uid":3246919,"ip_address":"山东","ucode":"2C1F8F844572F6","user_header":"https://static001.geekbang.org/account/avatar/00/31/8b/47/8c17a869.jpg","comment_is_top":false,"comment_ctime":1672548109,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"讲课方式，对初学者，不友好","like_count":0},{"had_liked":false,"id":355854,"user_name":"Geek_ho29lt","can_delete":false,"product_type":"c3","uid":1411006,"ip_address":"上海","ucode":"864FE1DEB7E02B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eq7pdTvibngu84q6rU7FUtOP92RWTuzwiamPr5jQHovTWcLC0PtFbE2UKacsLm3vPLJapuLeFf68p3A/132","comment_is_top":false,"comment_ctime":1661786037,"is_pvip":true,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"type Dog struct {\n\tp Pet\n}\n我这里Dog需要这样定义，如果Pet加星号，打印出来Dog的实例是个 &amp;{&lt;nil&gt;}，无法调用p的方法，是我go版本的问题（go1.19）吗","like_count":0,"discussions":[{"author":{"id":2890901,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/1c/95/3d8920c9.jpg","nickname":"abcdabcd999","note":"","ucode":"E1D9902737F544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600264,"discussion_content":"Pet 本身就是一个指针了 不需要再加额外的 *","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674140877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336158,"user_name":"Return12321","can_delete":false,"product_type":"c3","uid":1134694,"ip_address":"","ucode":"F7A3C5ED02E1D9","user_header":"https://static001.geekbang.org/account/avatar/00/11/50/66/047ee060.jpg","comment_is_top":false,"comment_ctime":1645960358,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"这节课讲的确实不行，其实就是struct类型的内嵌，推荐去看《Go程序设计语言》的“结构体内嵌组成”，，以及文章：https:&#47;&#47;hackthology.com&#47;golangzhong-de-mian-xiang-dui-xiang-ji-cheng.html","like_count":0},{"had_liked":false,"id":330608,"user_name":"funtrin","can_delete":false,"product_type":"c3","uid":2834523,"ip_address":"","ucode":"6C73FE32EDF0F4","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/gC0ujfu46rHmBPJDQrbafIhFfjFeTehQehKw3DpxwGSUnlfy5k6qWbKN9gCHSwF2uhIWSbVfZbo790EpNKleKA/132","comment_is_top":false,"comment_ctime":1642067598,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"感觉内嵌写法就是老师一开始的保留一个指针的写法的简化写法，有点语法糖的感觉。老师讲的确实不清晰，但写的很清晰","like_count":0},{"had_liked":false,"id":329904,"user_name":"小杰","can_delete":false,"product_type":"c3","uid":2853200,"ip_address":"","ucode":"BBDF8E9F348F65","user_header":"https://static001.geekbang.org/account/avatar/00/2b/89/50/aee9fdab.jpg","comment_is_top":false,"comment_ctime":1641635562,"is_pvip":true,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"对于说老师将的不好的那些人，可以去看下其他平台和B站那些所谓“无敌的视频”，才会发到极客时间的老师，讲得多么有含金量。我是一个只用C刷过一部分算法的人，我觉得讲得很好，推荐大家一个方法，如果想要继续往下学习而遇到了自己不认识的东西，认为这个已经明白了并跳过。老师选择java是因为用户量大。毕竟极客时间的老师实力都是实打实的。","like_count":0},{"had_liked":false,"id":329158,"user_name":"Geek_640f2c","can_delete":false,"product_type":"c3","uid":2110585,"ip_address":"","ucode":"176EEFFF27723A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKfxYdHJ3NNnOzBFu2N6oNPXhfMRibh3nMjneJLN6WCfVStQKLaJNVehUDmcpsj1mIfFegiauToaxbQ/132","comment_is_top":false,"comment_ctime":1641188495,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"我理解本章作者想讲述的是go语言里如何实现继承的相关特性，以及与传统语言有何差异。但视频里作者只列举了反例，没有示范正确的例子，并且敲代码演示的过程中逻辑明显不流畅，让很多学习这门课的同学更加找不到思路。感觉这节课是仓促录下的。\n我搜到一篇文章，文章中以java为例讲述了go和传统语言实现继承的异同处，并给出了正确示例，感觉作者视频中的演示也是从这个文章里简化而来的，大家可以参考下：https:&#47;&#47;hackthology.com&#47;golangzhong-de-mian-xiang-dui-xiang-ji-cheng.html","like_count":0,"discussions":[{"author":{"id":2890901,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/1c/95/3d8920c9.jpg","nickname":"abcdabcd999","note":"","ucode":"E1D9902737F544","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":600291,"discussion_content":"这个文章非常好 感谢推荐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1674188320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"山西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328926,"user_name":"Mr.Robot","can_delete":false,"product_type":"c3","uid":1702255,"ip_address":"","ucode":"4CA84795F59339","user_header":"https://static001.geekbang.org/account/avatar/00/19/f9/6f/32268611.jpg","comment_is_top":false,"comment_ctime":1640939388,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"看醉了。。。","like_count":0},{"had_liked":false,"id":324803,"user_name":"Hugo","can_delete":false,"product_type":"c3","uid":1067050,"ip_address":"","ucode":"ABD4B55F8DE278","user_header":"https://static001.geekbang.org/account/avatar/00/10/48/2a/28af04d5.jpg","comment_is_top":false,"comment_ctime":1638632090,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"这节课其实比较适合有一定面向对象基础的人来看，否则就会有那么多吐槽了。。\n其实是很费心的一个例子了。\n这个其实挺重要的。\n但是，老师可能也发现了。我朝目前面向对象其实能明白的人就不多。。","like_count":0},{"had_liked":false,"id":233617,"user_name":"郭星","can_delete":false,"product_type":"c3","uid":1182219,"ip_address":"","ucode":"8A0F5DF80E0C61","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/0b/985d3800.jpg","comment_is_top":false,"comment_ctime":1594367764,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100024001,"comment_content":"可以重写匿名嵌套的方法,但子类实例化只能由子类型参数接收,因此实际上子类还是调用的子类自己的方法,并没有实现类似oop多态的效果","like_count":0},{"had_liked":false,"id":119682,"user_name":"XxxxxxxMr","can_delete":false,"product_type":"c3","uid":1418862,"ip_address":"","ucode":"F28FAFF2FEDD1A","user_header":"https://static001.geekbang.org/account/avatar/00/15/a6/6e/0ffa1ff6.jpg","comment_is_top":false,"comment_ctime":1564651371,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100024001,"comment_content":"老师可以帮忙指导指导一下吗？万分感谢，看看我这么理解有问题没得。\nhttps:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;76206479 ","like_count":0},{"had_liked":false,"id":93151,"user_name":"Bug总是难免的","can_delete":false,"product_type":"c3","uid":1324340,"ip_address":"","ucode":"2601659AB2AAB5","user_header":"https://static001.geekbang.org/account/avatar/00/14/35/34/294684ab.jpg","comment_is_top":false,"comment_ctime":1557408230,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":5,"product_id":100024001,"comment_content":"kaixiao7说的对","like_count":0}]}