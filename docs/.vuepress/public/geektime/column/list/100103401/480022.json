{"id":480022,"title":"10 | 泛型：逆变or协变，傻傻分不清？","content":"<p>你好，我是朱涛。这节课我们来学习Kotlin的泛型（Generics），包括泛型基础、使用处型变、声明处型变以及星投影。</p><p>泛型，这个概念在很多编程语言里面都存在。在中大型软件开发当中，我们对泛型的使用也十分频繁，因为它可以让我们<strong>在不同类型之间复用相似的逻辑代码</strong>。</p><p>不管是Android领域，还是后端领域，泛型在软件的架构当中都有着举足轻重的地位。只有透彻理解了泛型，我们才能理解各种设计模式，进而才可能设计出合理的软件架构。</p><p>然而，想要学好泛型却不是一件容易的事情。这是因为，泛型实在太抽象了。</p><p>我们都知道，程序其实是对真实世界的抽象，比如我们在前面实战课里写的计算器程序，现实生活当中就有计算器这个东西，我们想要在电脑里写一个抽象的计算器程序，也不会那么难理解，因为它和现实生活相关。可是泛型，它是<strong>对程序的抽象</strong>。程序本来就已经够抽象了，我们还要在它的基础上再做一次抽象。</p><p>这样一来，泛型和我们真实的物理世界差了两层抽象，因此，泛型对于我们人类来说，会显得尤为虚无缥缈。</p><p><img src=\"https://static001.geekbang.org/resource/image/14/d0/14f371f5352321cb32d085d7ab25dbd0.jpg?wh=2000x797\" alt=\"\"></p><p>不过，程序其实也是源自于生活的。所以在这节课里，我会尽量用生活中的例子来给你解释下Kotlin的泛型概念，让你能更直观、更立体地感知到泛型与现实生活的联系，然后，你也能够从这些生活的场景中，更深刻地理解并掌握Kotlin的泛型，从而为你将来构建大型软件打好基础。</p><!-- [[[read_end]]] --><p>好，那么下面，我们就拿“遥控器”这个生活中常见的物件儿，来聊聊它跟“泛型”之间，都能产生哪些联系。</p><h2>掌握泛型基础</h2><p>在现实生活中，我们能看到各式各样的电视机遥控器，比如小米就有1S、2S、3S、4S电视遥控器。</p><p>那么，如果我们将遥控器的概念迁移到程序的世界，我们就需要定义各种各样的“遥控器类”，比如说：</p><pre><code class=\"language-plain\">// 小米1S电视机遥控\nclass TvMi1SController {\n    fun turnOn() {}\n    fun turnOff() {}\n}\n\n// 小米2S电视机遥控\nclass TvMi2SController {\n    fun turnOn() {}\n    fun turnOff() {}\n}\n\n// 小米3S电视机遥控\nclass TvMi3SController {\n    fun turnOn() {}\n    fun turnOff() {}\n}\n\n// 小米4S电视机遥控\nclass TvMi4SController {\n    fun turnOn() {}\n    fun turnOff() {}\n}\n\n...\n省略几千种不同的遥控器\n</code></pre><p>从上面的代码我们可以看到，如果我们为每一个型号的电视机都创建一个对应的遥控器类，然后在里面重复编写“开机”“关机”的方法，我们的工作量会很大，而且没有意义。</p><p>这个时候，我们其实需要一个<strong>万能遥控器</strong>，而借助Kotlin的<strong>泛型</strong>，我们就可以很容易地实现了。</p><pre><code class=\"language-plain\">//          T代表泛型的形参\n//               ↓\nclass Controller&lt;T&gt; {\n    fun turnOn(tv: T) {}\n    fun turnOff(tv: T) {}\n}\n\nfun main() {\n//                                泛型的实参\n//                                   ↓\n    val mi1Controller = Controller&lt;XiaoMiTV1&gt;()\n    mi1Controller.turnOn()\n\n//                                  泛型的实参\n//                                     ↓\n    val mi2Controller = Controller&lt;XiaoMiTV2&gt;()\n    mi2Controller.turnOn()\n}\n</code></pre><p>在这段代码里，我们定义了一个“万能遥控器类”<code>Controller&lt;T&gt;</code>，它当中的字母T代表了，这个遥控器可以控制很多种型号的电视，至于我们到底想要控制哪种型号，在使用的时候，只需要把T替换成实际的电视机型号即可。在上面的main函数当中，我们是传入了“XiaoMi1S”“XiaoMi2S”这两个型号。</p><p>可见，使用泛型的好处就在于，我们可以复用程序代码的逻辑，借助这个特性，我们可以在程序的基础上再做一次抽象。这样，通过这个<code>Controller&lt;T&gt;</code>，<strong>不管将来有多少型号的电视机，我们都可以用这一个类来搞定。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/c1/e7/c1248f3042f62b3ddb74618bb43e38e7.jpg?wh=2000x856\" alt=\"\"></p><p>另外，我们在定义泛型的时候，其实还可以为它的泛型参数增加一些<strong>边界限制</strong>，比如说，强制要求传入的泛型参数，必须是TV或者是它的子类。这叫做泛型的<strong>上界</strong>。</p><pre><code class=\"language-plain\">//               差别在这里\n//                   ↓\nclass Controller&lt;T: TV&gt; {\n    fun turnOn(tv: T) {}\n    fun turnOff(tv: T) {}\n}\n</code></pre><p>和Kotlin的<a href=\"https://time.geekbang.org/column/article/473349\">继承语法</a>一样，我们是使用冒号来表示泛型的边界。注意，当我们定义了边界之后，如果我们传入Controller的类型不是TV的子类，那么编译器是会报错的。</p><pre><code class=\"language-plain\">fun main() {\n    // 报错，因为Car不是TV的子类\n    val controller = Controller&lt;Car&gt;()\n}\n</code></pre><p>还有一点你也需要注意，由于函数是Kotlin当中的一等公民，所以你也可以用两个简单的函数turnOn()和turnOff()，来解决前面所说的“遥控器的问题”：</p><pre><code class=\"language-plain\">//     函数的泛型参数\n//   ↓             ↓\nfun &lt;T&gt; turnOn(tv: T){ ... }\nfun &lt;T&gt; turnOff(tv: T){ ... }\n\nfun turnOnAll(mi1: XiaoMiTV1, mi2: XiaoMiTV2) {\n//      泛型实参自动推导\n//          ↓\n    turnOn(mi1)\n    turnOn(mi2)\n}\n</code></pre><p>从上面的代码里我们可以看到，我们直接在fun关键字的后面加上用尖括号包起来的T，就可以为函数增加泛型支持。这里我们选择用字母“T”，完全是因为约定俗成，你将T改为其他英文字母也是不会影响编译的。</p><p>好了，泛型是什么、使用的好处、如何表示等问题，现在我们就都搞清楚了。下面我们再来看看学习泛型的一大难点：型变。</p><h2>型变（Variance）</h2><p>首先，型变是什么呢？</p><p>简单来说，它就是为了解决泛型的<strong>不变性</strong>问题。事实上，型变讨论的是：在已知Cat是Animal的子类的情况下，<code>MutableList&lt;Cat&gt;</code>与<code>MutableList&lt;Animal&gt;</code>之间是什么关系。</p><p>在正常情况下，编译器会认为它们两者是没有任何关系的。换句话，也就是说，<strong>泛型是不变的</strong>。Kotlin编译器会这样处理的原因也很简单，这里我们可以先来假设一下：如果编译器不阻止我们用<code>MutableList&lt;Cat&gt;</code>来替代<code>MutableList&lt;Animal&gt;</code>，代码会出什么问题呢？</p><pre><code class=\"language-plain\">// 需要父类集合，传入子类集合\n\nfoo(list: MutableList&lt;Animal&gt;) {\n    // 出错，Cat集合不能存Dog对象\n    list.add(Dog())\n    // 通过\n    val animal: Animal = list[0] // 取出的Cat对象\n}\n\nfun main() {\n    // 需要MutableList&lt;Animal&gt;，实际传MutableList&lt;Cat&gt;\n    foo(mutableListOf&lt;Cat&gt;(Cat()))\n    // 实际上，编译器在这里就会提示错误，我们现在假设编译器不阻止我们，会出什么问题\n}\n</code></pre><p>从这段代码的注释中，我们能看到，当程序需要Animal的集合时，如果我们传入的是Cat的集合，<strong>我们就可以往list里添加其他类型的动物</strong>，比如Dog。然而，Dog是无法存入Cat的集合的。</p><p>那么如果我们反过来呢？</p><pre><code class=\"language-plain\">// 需要子类集合，传入父类集合\n\nfoo(list: MutableList&lt;Cat&gt;) {\n    // 通过\n    list.add(Cat())\n    // 出错\n    val cat\u0010\u0010\u0010\u0010\u0010\u0010: Cat = list[0] // 实际取出来的是Animal对象\n}\n\nfun main() {\n    // 需要MutableList&lt;Cat&gt;，实际传MutableList&lt;Animal&gt;\n    foo(mutableListOf(Animal()))\n    // 实际上，编译器在这里就会提示错误，我们现在假设编译器不阻止我们，会出什么问题\n}\n</code></pre><p>我们会发现，反过来之后，当需要子类集合传入父类集合的时候，我们在函数体内部存储的行为是不会受到影响的，存储Cat、Animal类型都没问题。可是，一旦我们想从集合当中取出Cat对象的时候，会发现取出来的是Animal对象，这时候又错了。</p><p>所以，在默认情况下，编译器会认为<code>MutableList&lt;Cat&gt;</code>与<code>MutableList&lt;Animal&gt;</code>之间不存在任何继承关系，它们也无法互相替代，这样就不会出现前面提到的两种问题。这就是泛型的<strong>不变性</strong>。</p><p>但是啊，在某些特定场景下，编译器这种行为还是会给我们带来麻烦的。而这个时候，就需要泛型的<strong>逆变与协变</strong>了。具体是什么特定场景呢？别着急，下面我带你来看个例子。</p><h3>逆变（Contravariant）</h3><p>让我们继续以前面的遥控器为例：</p><pre><code class=\"language-plain\">open class TV {\n    open fun turnOn() {}\n}\n\nclass XiaoMiTV1: TV() {\n    override fun turnOn() {}\n}\n\nclass Controller&lt;T&gt; {\n    fun turnOn(tv: T)\n}\n</code></pre><p>在这里，我们有一个电视机的父类，叫做TV，另外还有一个子类，叫做XiaoMiTV1。它们两者是继承关系。由于它们是父子的关系，当函数的参数需要TV这个父类的时候，我们是可以传入子类作为参数的。这很好理解，我们接着往下看：</p><pre><code class=\"language-plain\">fun foo(tv: TV) {}\n\nfun main() {\n// 要求父类，可以传入子类\n    foo(XiaoMiTV1())\n}\n</code></pre><p>现在问题来了，<code>Controller&lt;XiaoMiTV1&gt;</code>和<code>Controller&lt;TV&gt;</code>之间是什么关系呢？让我们来设想一个<strong>买遥控器的场景</strong>：</p><pre><code class=\"language-plain\">//                      需要一个小米电视1的遥控器\n//                                ↓\nfun buy(controller: Controller&lt;XiaoMiTV1&gt;) {\n    val xiaoMiTV1 = XiaoMiTV1()\n    // 打开小米电视1\n    controller.turnOn(xiaoMiTV1)\n}\n</code></pre><p>在上面的代码中，我们的函数需要一个“小米电视1的遥控器”，在函数的内部，我们需要打开一台小米电视机。那么，当我们需要打开一台小米电视机的时候，我们是否可以用一个“万能的遥控器”呢？当然可以！所以，我们可以写出下面这样的代码：</p><pre><code class=\"language-plain\">fun main() {\n//                             实参\n//                              ↓\n    val controller = Controller&lt;TV&gt;()\n    // 传入万能遥控器，报错\n    buy(controller)\n}\n</code></pre><p>在这段代码中，由于我们传入的泛型实参是TV，它是所有电视机的父类。因此，Controller内部将会处理所有电视机型号的开机、关机。这时候，<strong>它就相当于一个万能遥控器</strong>，万能遥控器当然也可以打开小米电视1。</p><p>从道理上来讲，我们的推理是没有错的，不过Kotlin编译器会报错，报错的内容是说“类型不匹配”，需要的是小米遥控器<code>Controller&lt;XiaoMiTV1&gt;</code>，你却买了个万能遥控器<code>Controller&lt;TV&gt;</code>。在默认情况下，Kotlin编译器就是这么认死理。</p><p>所以，为了让我们的代码通过编译，我们需要主动告诉编译器一些额外的信息，具体的做法有两种。</p><p><strong>第一种做法</strong>，是修改泛型参数的使用处代码，它叫做<strong>使用处型变</strong>。具体做法就是修改buy函数的声明，在XiaoMiTV1的前面增加一个in关键字：</p><pre><code class=\"language-plain\">//                         变化在这里\n//                             ↓\nfun buy(controller: Controller&lt;in XiaoMiTV1&gt;) {\n    val xiaoMiTV1 = XiaoMiTV1()\n    // 打开小米电视1\n    controller.turnOn(xiaoMiTV1)\n}\n</code></pre><p><strong>第二种做法</strong>，是修改Controller的源代码，这叫<strong>声明处型变</strong>。具体做法就是，在泛型形参T的前面增加一个关键字in：</p><pre><code class=\"language-plain\">//            变化在这里\n//               ↓\nclass Controller&lt;in T&gt; {\n    fun turnOn(tv: T)\n}\n</code></pre><p>我们使用以上任意一种方式修改后，代码就能够通过Kotlin编译了。这样修改之后，我们就可以使用<code>Controller&lt;TV&gt;</code>来替代<code>Controller&lt;XiaoMiTV1&gt;</code>，也就是说，<code>Controller&lt;TV&gt;</code>是<code>Controller&lt;XiaoMiTV1&gt;</code>的子类。</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/22/6acd7ea7c06df0fd2f25626965ac6022.jpg?wh=2000x517\" alt=\"\"></p><p>如果你足够细心，你会发现：在这个场景下，遥控器与电视机之间的父子关系颠倒了。“小米电视”是“电视”的子类，但是，“万能遥控”成了“小米遥控”的子类。这种父子关系颠倒的现象，我们就叫做“<strong>泛型的逆变</strong>”。上面这两种修改方式，就分别叫做<strong>使用处逆变</strong>和<strong>声明处逆变</strong>。</p><p>而除了父子关系颠倒的现象，泛型当中还存在一种父子关系一致的现象，也就是<strong>泛型的协变</strong>。</p><h3>协变（Covariant）</h3><p>这次，我们仍然以一个生活中的场景来做分析。现在，<strong>请你想象一个点外卖的场景</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/37/68/37fd3346e8de26327b0e09768378fa68.png?wh=1280x765\" alt=\"图片\"></p><p>为了模拟这个场景，我们需要用代码来描述其中的几个角色：普通的食物、肯德基的食物，它们两者之间是父子关系。</p><pre><code class=\"language-plain\">open class Food {}\n\nclass KFC: Food() {}\n</code></pre><p>除此之外呢，我们还有一个饭店的角色：</p><pre><code class=\"language-plain\">class Restaurant&lt;T&gt; {\n    fun orderFood(): T { /*..*/ }\n}\n</code></pre><p>在上面的Restaurant泛型参数处，我们传入不同的食物类型，就代表了不同类型的饭店。接下来，就是我们的点外卖方法了：</p><pre><code class=\"language-plain\">//                      这里需要一家普通的饭店，随便什么饭店都行\n//                                     ↓\nfun orderFood(restaurant: Restaurant&lt;Food&gt;) {\n    // 从这家饭店，点一份外卖\n    val food = restaurant.orderFood()\n}\n\nfun main() {\n//                  找到一家肯德基\n//                        ↓\n    val kfc = Restaurant&lt;KFC&gt;()\n// 需要普通饭店，传入了肯德基，编译器报错\n    orderFood(kfc)\n}\n</code></pre><p>如果我们直接运行上面的代码，会发现编译器提示最后一行代码报错，报错的原因同样是：“类型不匹配”，我们需要的是一家随便类型的饭店<code>Restaurant&lt;Food&gt;</code>，而传入的是肯德基<code>Restaurant&lt;KFC&gt;</code>，不匹配。</p><p>是不是觉得很荒谬？既然随便找一家饭店就能点外卖，为什么肯德基不可以呢？</p><p>不过，有了上次的经验，这次我们就轻车熟路了，由于编译器认死理，我们必须额外提供一些信息给编译器，让它知道我们是在特殊场景使用泛型。具体的做法呢，还是有两种\u0010。</p><p><strong>第一种做法</strong>，还是修改泛型参数的使用处，也就是使用处型变。具体的做法就是修改orderFood()函数的声明，在Food的前面增加一个out关键字：</p><pre><code class=\"language-plain\">//                                变化在这里\n//                                    ↓\nfun orderFood(restaurant: Restaurant&lt;out Food&gt;) {\n    // 从这家饭店，点一份外卖\n    val food = restaurant.orderFood()\n}\n</code></pre><p><strong>第二种做法</strong>，是修改Restaurant的源代码，也就是声明处型变。具体做法就是，在它泛型形参T的前面增加一个关键字out：</p><pre><code class=\"language-plain\">//            变化在这里\n//                ↓\nclass Restaurant&lt;out T&gt; {\n    fun orderFood(): T { /*..*/ }\n}\n</code></pre><p>在做完以上任意一种修改以后，代码就可以通过编译了。这也就意味着，在这种情况下，我们可以使用<code>Restaurant&lt;KFC&gt;</code>替代<code>Restaurant&lt;Food&gt;</code>，也就意味着<code>Restaurant&lt;KFC&gt;</code>可以看作是<code>Restaurant&lt;Food&gt;</code>的子类。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/c0/8f9yyb56537bf5f5248b9a484e26b6c0.jpg?wh=2000x533\" alt=\"\"></p><p>到了这时候，你会发现，食物与饭店它们之间的父子关系一致了。这种现象，我们称之为“<strong>泛型的协变</strong>”。上面两种修改的方式，就分别叫做<strong>使用处协变</strong>和<strong>声明处协变</strong>。</p><p>需要特别注意的是，虽然Java当中也有型变的概念，但是呢，Java当中是没有声明处型变的。Java里面只有使用处型变，下面是它们的语法对比：</p><p><img src=\"https://static001.geekbang.org/resource/image/3d/ca/3d3a24ffff462a6019c42e43b7e4f3ca.jpg?wh=2000x622\" alt=\"\"></p><p>而通过对比，你也会发现，Java的型变语法十分抽象，远不如Kotlin来得简洁。</p><p>好了，到这里，我们就差不多把Kotlin的泛型这个特性理解清楚了，那么是不是就说明，我们可以开始实战了呢？其实还不行，我们还需要了解另一个跟泛型相关的概念，也就是星投影。</p><h2>星投影（Star-Projections）</h2><p>Kotlin当中还有一个概念叫做“星投影”。虽然你听起来可能会觉得这个词很吓人，但其实它的概念很简单。所谓的星投影，其实就是<strong>用“星号”作为泛型的实参</strong>。</p><p>那么，什么情况下，我们需要用星号作为泛型实参呢？答案其实也很简单，<strong>当我们不关心实参到底是什么的时候</strong>。</p><p>举个例子，我们现在需要开发一个“找饭店”的功能，借助泛型，我们可以写出这样的代码：</p><pre><code class=\"language-plain\">fun &lt;T&gt; findRestaurant(): Restaurant&lt;T&gt; {}\n</code></pre><p>不过，如果我们并不关心找到的饭店到底是什么类型，不管它是肯德基还是麦当劳的话，那么，我们就完全可以把“星号”作为泛型的实参，比如这样：</p><pre><code class=\"language-plain\">class Restaurant&lt;out T&gt; {\n    fun orderFood(): T {}\n}\n\n//                        把星号作为泛型实参\n//                               ↓\nfun findRestaurant(): Restaurant&lt;*&gt; {}\n\nfun main() {\n    val restaurant = findRestaurant()\n    // 注意这里\n    val food: Any? = restaurant.orderFood() // 返回值可能是：任意类型\n}\n</code></pre><p>在上面的代码当中，我们没有传递任何具体的类型给Restaurant，而是使用了“星号”作为Restaurant的泛型实参，因此，我们就无法知道饭店到底是什么类型。</p><p>相应的，当我们调用restaurant.orderFood()的时候，就无法确定它返回的值到底是什么类型。这时候，变量food的实际类型可能是任意的，比如String、Int、Food、KFC，甚至可能是null，因此，在这里我们只能将其看作是“Any?”类型。</p><p>那么，对于上面的这种food可能是任意类型的情况，我们有没有办法让food的类型更加精确一些呢？当然是有的。如果我们为Restaurant的泛型类型加上边界的话，food的类型就可以更精确一些。</p><pre><code class=\"language-plain\">//                   区别在这里\n//                       ↓\nclass Restaurant&lt;out T: Food&gt; {\n    fun orderFood(): T {}\n}\n\nfun findRestaurant(): Restaurant&lt;*&gt; {}\n\nfun main() {\n    val restaurant = findRestaurant()\n    //       注意这里\n    //          ↓\n    val food: Food = restaurant.orderFood() // 返回值是：Food或其子类\n}\n</code></pre><p>从这个例子我们能看到，当我们为Restaurant泛型类型增加了上界Food以后，即使我们使用了“星投影”，也仍然可以通过调用restaurant.orderFood()，来拿到Food类型的变量。在这里，food的实际类型肯定是Food或者是Food的子类，因此我们可以将其看作是Food类型。</p><p>泛型虽然很抽象，但它存在的目的，仍然是为了解决我们生活的实际问题。所以，当我们将泛型应用到实际的生活场景时，它就显得不是那么抽象了。</p><h2>实战与思考</h2><p>在学完型变以后，也许你会有点迷惑：<strong>到底什么时候用逆变，什么时候用协变</strong>？如果你看过Kotlin的官方文档，你会看到一句这样的话：</p><blockquote>\n<p>Consumer in, Producer out !</p>\n</blockquote><p>直译的话，大概意思就是：消费者in，生产者out。不过，这个对我们中国人的说话语境而言，不是那么好理解。让我们继续根据前面的遥控器、点外卖两个场景，来做个说明。</p><pre><code class=\"language-plain\">//              逆变\n//               ↓\nclass Controller&lt;in T&gt; {\n//                 ①\n//                 ↓\n    fun turnOn(tv: T)\n}\n\n//               协变\n//                ↓\nclass Restaurant&lt;out T&gt; {\n//                   ②\n//                   ↓\n    fun orderFood(): T { /*..*/ }\n}\n</code></pre><p>在这段代码中，分别是我们前面提到的逆变、协变的例子。把它们两个放到一起后，你应该就能很容易地发现它们两个的差别了。需要特别留意的地方，我都在注释当中标记出来了，让我来解释给你听：</p><ul>\n<li>对于逆变的情况，我们模拟的是买遥控器的场景。请注意注释①的地方，我们的泛型T，它最终会以函数的参数的形式，被<strong>传入</strong>函数的<strong>里面</strong>，这往往是一种<strong>写入</strong>行为，这时候，我们使用关键字<strong>in</strong>。</li>\n<li>对于协变的情况，我们模拟的是点外卖的场景。请注意注释②的地方，我们的泛型T，它最终会以返回值的形式，被<strong>传出</strong>函数的<strong>外面</strong>，这往往是一种<strong>读取</strong>行为，这时候，我们使用关键字<strong>out</strong>。</li>\n</ul><p>所以，如果要以更加通俗的语言来解释逆变与协变的使用场景的话，我们可以将其总结为：<strong>传入in，传出out</strong>。或者，我们也可以说：泛型作为<strong>参数</strong>的时候，用in，泛型作为<strong>返回值</strong>的时候，用out。</p><p>我们再来看一下Kotlin源码当中型变的应用。首先，是逆变的应用。</p><pre><code class=\"language-plain\">//                          逆变\n//                           ↓\npublic interface Comparable&lt;in T&gt; {\n//                                   泛型作为参数\n//                                       ↓\n    public operator fun compareTo(other: T): Int\n}\n</code></pre><p>在以上代码中，由于泛型是作为了compareTo方法的<strong>参数</strong>传入的，因此，对于Comparable的泛型T，我们应该使用<strong>in</strong>来修饰，这就是<strong>逆变</strong>的实际应用。</p><p>我们再来看看协变在Kotlin源码当中的应用。</p><pre><code class=\"language-plain\">//                        协变\n//                         ↓\npublic interface Iterator&lt;out T&gt; {\n//                         泛型作为返回值\n//                              ↓    \n    public operator fun next(): T\n    \n    public operator fun hasNext(): Boolean\n}\n</code></pre><p>从上面的代码里我们可以看到，由于泛型是作为next方法的<strong>返回值</strong>的，因此，对于Iterator的泛型T，我们应该使用<strong>out</strong>来修饰，这就是<strong>协变</strong>的应用。</p><p>我们再来看看<a href=\"https://time.geekbang.org/column/article/473349\">第2讲</a>当中密封类的代码案例，一起回顾下当中的泛型细节：</p><pre><code class=\"language-plain\">sealed class Result&lt;out R&gt; {\n//                     协变    ①\n//                      ↓      ↓\n    data class Success&lt;out T&gt;(val data: T, val message: String = \"\") : Result&lt;T&gt;()\n\n    data class Error(val exception: Exception) : Result&lt;Nothing&gt;()\n\n    data class Loading(val time: Long = System.currentTimeMillis()) : Result&lt;Nothing&gt;()\n}\n</code></pre><p>这段代码里，我们对Success这个数据类的泛型参数使用了out来修饰，这就代表了协变。看到这里，如果你足够细心，就会觉得奇怪：这里为什么可以使用协变呢？前面我们不是说过：“泛型作为参数，用in；泛型作为返回值，用out”吗？<strong>这里并没有任何函数参数或者返回值啊？</strong></p><p>其实，这里就又体现出了我们<strong>对Kotlin底层理解的重要性</strong>了。请注意我在上面标记的注释①，val在Kotlin当中，代表不可变的变量，当它修饰类成员属性的时候，代表它只有getter，没有setter。当我们看到这样的代码时，我们要能自动脑补出Success反编译后的Java结构：</p><pre><code class=\"language-plain\">public static final class Success extends Result {\n   private final Object data;\n   \n// Success 这个类当中，是会有getter方法的\n   public final Object getData() {\n      return this.data;\n   }\n   \n// 省略其他代码\n}\n</code></pre><p>所以，我们可以用out修饰Success泛型的原因，是因为data的getter方法，它本质上是一个返回T类型的方法。这时候，如果我们将注释①处的val改为var，那么代码就会立马报错。</p><pre><code class=\"language-plain\">sealed class Result&lt;out R&gt; {\n//                 改为var后，编译器就会立马报错\n//                             ↓\n    data class Success&lt;out T&gt;(var data: T, val message: String = \"\") : Result&lt;T&gt;()\n\n    data class Error(val exception: Exception) : Result&lt;Nothing&gt;()\n\n    data class Loading(val time: Long = System.currentTimeMillis()) : Result&lt;Nothing&gt;()\n}\n</code></pre><p>到这里，有了前面的铺垫，我想你应该很快就能反应过来，编译器报错的原因是由于var修饰的成员属性，Kotlin编译器会在背后生成对应getter和setter，这个时候泛型参数<strong>既是“参数”也是“返回值”</strong>。所以，如果此时我们还用out修饰泛型T，编译器就会报错了。</p><p>也就是说，如果泛型的T，既是函数的参数类型，又是函数的返回值类型，那么，我们就无法直接使用in或者out来修饰泛型T。</p><p>不过，<strong>函数传入参数的时候，并不一定就意味着写入</strong>，这时候，即使泛型T是作为参数类型，我们也仍然要想一些办法来用out修饰泛型。让我们拿一段官方源码来举例说明一下：</p><pre><code class=\"language-plain\">//                   协变    \n//                    ↓      \npublic interface List&lt;out E&gt; : Collection&lt;E&gt; {\n//                                泛型作为返回值\n//                                       ↓    \n    public operator fun get(index: Int): E\n//                                           泛型作为参数\n//                                                 ↓    \n    override fun contains(element: @UnsafeVariance E): Boolean\n//                                        泛型作为参数\n//                                              ↓   \n    public fun indexOf(element: @UnsafeVariance E): Int\n}\n</code></pre><p>Kotlin官方源码当中的List，也就是这里的泛型E，它既作为了返回值类型，又作为了参数类型。在正常情况下，如果我们用out修饰E，那编译器是会报错的。但我们其实很清楚，对于contains、indexOf这样的方法，它们虽然以E作为参数类型，但本质上并没有产生写入的行为。所以，我们用out修饰E并不会带来实际的问题。</p><p>所以这个时候，我们就可以通过@UnsafeVariance这样的注解，来让编译器忽略这个型变冲突的问题。</p><p>另外，让我们再来看看<a href=\"https://time.geekbang.org/column/article/475058\">第5讲</a>当中提到过的单例抽象模板，一起回顾下当中的泛型细节：</p><pre><code class=\"language-plain\">//                           逆变   协变\n//                            ↓     ↓\nabstract class BaseSingleton&lt;in P, out T&gt; {\n//                        ①\n    @Volatile//           ↓\n    private var instance: T? = null\n    //                              参数  返回值\n    //                               ↓    ↓\n    protected abstract val creator: (P)-&gt; T\n\n    //                    参数 返回值\n    //                     ↓   ↓\n    fun getInstance(param: P): T =\n        instance ?: synchronized(this) {\n            instance ?: creator(param).also { instance = it }\n    }\n}\n</code></pre><p>在这个单例模板的例子当中，P一直作为参数，而T则是作为返回值。因此我们用in来修饰P，这就是逆变；对应的我们用out修饰T，这就是协变。</p><p>不过，如果你足够细心的话，会发现注释①处还有一个instance是用泛型T修饰的。而它是var定义的成员变量，这就意味着，它既有getter，又有setter。那它为什么可以用协变的泛型T呢？其实，<strong>这是因为它是private的</strong>，如果你把private关键字删掉的话，上面的代码就会报错了。</p><h2>小结</h2><p>最后，让我们来做一个总结吧。</p><ul>\n<li><strong>泛型，是对程序的一种抽象</strong>。通过泛型，我们可以实现代码逻辑复用的目的，Kotlin标准库当中很多源代码也都是借助泛型来实现的。</li>\n<li>从<strong>型变的位置</strong>来分类的话，分为使用处型变和声明处型变。</li>\n<li>从<strong>型变的父子关系</strong>来分类的话，分为逆变和协变。逆变表示父子关系颠倒了，而协变表示父子关系和原来一致。</li>\n<li>型变的口诀：<strong>泛型作为参数，用in；泛型作为返回值，用out</strong>。在特殊场景下，同时作为参数和返回值的泛型参数，我们可以用<strong>@UnsafeVariance</strong>来解决型变冲突。</li>\n<li><strong>星投影</strong>，就是当我们对泛型的具体类型不感兴趣的时候，直接传入一个“星号”作为泛型的实参。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/0e/2c/0e115b3b553ddf6c0bb3yyf7827fe42c.jpg?wh=2000x1528\" alt=\"\"></p><p>最后，我还想和你分享一下我学习Kotlin泛型的方法论。正如开头我提到的：程序是对真实世界的抽象，而泛型是对程序的抽象。由于泛型与我们真实世界差了两层抽象，这就导致我们很难理解泛型的本质。</p><p>所以，为了让泛型更加易懂，我的思路就是让泛型与我们的真实世界建立一种关联：<strong>直接拿泛型来模拟真实世界的场景，建立类比的关系。</strong>就比如我们今天所讲的：</p><ul>\n<li>用万能遥控器，类比泛型；</li>\n<li>用买遥控器的场景，类比逆变；</li>\n<li>用点外卖的场景，类比协变、星投影。</li>\n</ul><p><img src=\"https://static001.geekbang.org/resource/image/10/7a/102062dfdc96a48ae4f8c4671ff42e7a.jpg?wh=2000x808\" alt=\"\"></p><p>希望我的学习方法可以对你有所启发。</p><h2>思考题</h2><p>请你思考一下，“使用处型变”和“声明处型变”，它们有什么区别呢？ 欢迎在留言区分享你的答案，也欢迎你把今天的内容分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"09 | 委托：你为何总是被低估？","id":479112},"right":{"article_title":"11 | 注解与反射：进阶必备技能","id":481037}},"comments":[{"had_liked":false,"id":331579,"user_name":"白乾涛","can_delete":false,"product_type":"c1","uid":1339841,"ip_address":"","ucode":"0C704B0B90C8D7","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","comment_is_top":false,"comment_ctime":1642661937,"is_pvip":false,"replies":[{"id":"121179","content":"也许是角度不一样。这里，我觉得抽象的原因是这样的：Kotlin的in out，我一下就能反应过来，in是参数，out是返回值。但&lt;? extends T&gt; &lt;? super Object&gt;就会让我有点懵，不知道哪个该用在什么地方。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1642756969,"ip_address":"","comment_id":331579,"utype":1}],"discussion_count":4,"race_medal":0,"score":"57477236785","product_id":100103401,"comment_content":"我觉得Java的 &lt;? extends T&gt; &lt;? super Object&gt; 语法不抽象呀，相比 kotlin 中的 in out 反而更清晰","like_count":13,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547583,"discussion_content":"也许是角度不一样。这里，我觉得抽象的原因是这样的：Kotlin的in out，我一下就能反应过来，in是参数，out是返回值。但&lt;? extends T&gt; &lt;? super Object&gt;就会让我有点懵，不知道哪个该用在什么地方。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642756969,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2884743,"avatar":"","nickname":"20220106","note":"","ucode":"DC9E91125B21C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":548412,"discussion_content":"确实","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643186854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547583,"ip_address":""},"score":548412,"extra":""}]},{"author":{"id":1329923,"avatar":"https://static001.geekbang.org/account/avatar/00/14/4b/03/090ca0b6.jpg","nickname":"Y  ","note":"","ucode":"874503F8B1E6CD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580056,"discussion_content":"我也是同意&lt;? extends T&gt; &lt;? super Object&gt;这个比较好理解，本身就是理解成上界和下界 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657853209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234319,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d5/8f/d0874a01.jpg","nickname":"曾帅","note":"","ucode":"322F049DA9284D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547482,"discussion_content":"一样，哈哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642693180,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331498,"user_name":"A Lonely Cat","can_delete":false,"product_type":"c1","uid":2885349,"ip_address":"","ucode":"382EBFDD8E5115","user_header":"https://static001.geekbang.org/account/avatar/00/2c/06/e5/51ef9735.jpg","comment_is_top":false,"comment_ctime":1642606156,"is_pvip":false,"replies":[{"id":"121124","content":"感谢这位同学的补充~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1642646534,"ip_address":"","comment_id":331498,"utype":1}],"discussion_count":2,"race_medal":0,"score":"48887246412","product_id":100103401,"comment_content":"Java中的协变：&lt;? extends T&gt;<br>Java中的逆变：&lt;? super Object&gt;<br>Java中的“星投影”：&lt;?&gt;","like_count":11,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547357,"discussion_content":"感谢这位同学的补充~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642646534,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1342000,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7a/30/23fc4089.jpg","nickname":"24隋心所欲","note":"","ucode":"1B8B2789F68C94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591865,"discussion_content":"Java 中有这样的实现，但是没有这样的概念","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666878953,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331476,"user_name":"$Kotlin","can_delete":false,"product_type":"c1","uid":2148188,"ip_address":"","ucode":"098E9C8F60D865","user_header":"https://static001.geekbang.org/account/avatar/00/20/c7/5c/94cb3a1a.jpg","comment_is_top":false,"comment_ctime":1642598519,"is_pvip":false,"replies":[{"id":"121123","content":"赞~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1642646493,"ip_address":"","comment_id":331476,"utype":1}],"discussion_count":2,"race_medal":0,"score":"40297304183","product_id":100103401,"comment_content":"声明处型变无法支持又有in又有out，只能在使用处根据情况型变。","like_count":9,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547356,"discussion_content":"赞~","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1642646493,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1169063,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d6/a7/ac23f5a6.jpg","nickname":"better","note":"","ucode":"AF1DB566EBB8A5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547436,"discussion_content":"原来如此~ ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642673109,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333550,"user_name":"白乾涛","can_delete":false,"product_type":"c1","uid":1339841,"ip_address":"","ucode":"0C704B0B90C8D7","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","comment_is_top":false,"comment_ctime":1644402228,"is_pvip":false,"replies":[{"id":"121886","content":"很好的总结，赞~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1644460463,"ip_address":"","comment_id":333550,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27414206004","product_id":100103401,"comment_content":"协变：&lt;? extends T&gt;  out-作为返回值-可以读取，不可以写入<br>逆变：&lt;? super T&gt;  in-作为参数-可以写入，不可以读取(只能以Object读取)","like_count":6,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550256,"discussion_content":"很好的总结，赞~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644460463,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":333551,"user_name":"白乾涛","can_delete":false,"product_type":"c1","uid":1339841,"ip_address":"","ucode":"0C704B0B90C8D7","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","comment_is_top":false,"comment_ctime":1644402270,"is_pvip":false,"replies":[{"id":"121883","content":"嗯……确实，编译器把子类又推导成父类集合了。这里应该限定泛型实参的：mutableListOf&lt;Cat&gt;(Cat())<br><br>感谢纠正~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1644460326,"ip_address":"","comment_id":333551,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10234336862","product_id":100103401,"comment_content":"老师，文稿中说下面的代码会报错，实际上并不会报错呀<br><br>open class Animal()<br>class Dog : Animal()<br>class Cat : Animal()<br><br>fun foo(list: MutableList&lt;Animal&gt;) {<br>    list.add(Dog())<br>    val animal: Animal = list[0]<br>}<br><br>fun main() {<br>    foo(mutableListOf(Cat())) &#47;&#47; 需要父类集合，传入子类集合<br>}","like_count":2,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550253,"discussion_content":"嗯……确实，编译器把子类又推导成父类集合了。这里应该限定泛型实参的：mutableListOf&lt;Cat&gt;(Cat())\n\n感谢纠正~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644460326,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356289,"user_name":"yvanbu","can_delete":false,"product_type":"c1","uid":1474816,"ip_address":"广东","ucode":"49294808179081","user_header":"https://static001.geekbang.org/account/avatar/00/16/81/00/1df7bb5d.jpg","comment_is_top":false,"comment_ctime":1662110780,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5957078076","product_id":100103401,"comment_content":"「这是因为它是 private 的，如果你把 private 关键字删掉的话，上面的代码就会报错了。」这句话如何理解，为什么 private 会影响是否能使用协变和逆变","like_count":1},{"had_liked":false,"id":342442,"user_name":"张春亮","can_delete":false,"product_type":"c1","uid":1045303,"ip_address":"","ucode":"3921D2A256B2C9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f3/37/15baf151.jpg","comment_is_top":false,"comment_ctime":1650265695,"is_pvip":false,"replies":[{"id":"125109","content":"符合条件的话，可以用：@UnsafeVariance。如果泛型真的同时存在读取和写入的话，那么就属于泛型不变性的范畴了，也就是说，它无法支持逆变和协变。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1650296298,"ip_address":"","comment_id":342442,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5945232991","product_id":100103401,"comment_content":"从型变的父子关系来分类的话，分为逆变和协变<br>泛型作为参数，用 in；泛型作为返回值，用 out<br>这两个条规则有冲突的时候应该怎么办呢","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564690,"discussion_content":"符合条件的话，可以用：@UnsafeVariance。如果泛型真的同时存在读取和写入的话，那么就属于泛型不变性的范畴了，也就是说，它无法支持逆变和协变。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650296298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332036,"user_name":"Renext","can_delete":false,"product_type":"c1","uid":1020838,"ip_address":"","ucode":"3C4418F7E86CD6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/a6/679b3c6b.jpg","comment_is_top":false,"comment_ctime":1642992019,"is_pvip":false,"replies":[{"id":"121313","content":"加油~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1643010364,"ip_address":"","comment_id":332036,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5937959315","product_id":100103401,"comment_content":"打卡","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":548046,"discussion_content":"加油~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1643010364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331967,"user_name":"阶前听雨","can_delete":false,"product_type":"c1","uid":1023236,"ip_address":"","ucode":"CFA211A7A15DB6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9d/04/a557d4f0.jpg","comment_is_top":false,"comment_ctime":1642928304,"is_pvip":false,"replies":[{"id":"121304","content":"泛型确实比较抽象，要多体会，加油哈~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1642989962,"ip_address":"","comment_id":331967,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5937895600","product_id":100103401,"comment_content":"很赞，基本能分清了，再多看几遍以加深理解。","like_count":1,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547990,"discussion_content":"泛型确实比较抽象，要多体会，加油哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642989963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360823,"user_name":"24隋心所欲","can_delete":false,"product_type":"c1","uid":1342000,"ip_address":"河北","ucode":"1B8B2789F68C94","user_header":"https://static001.geekbang.org/account/avatar/00/14/7a/30/23fc4089.jpg","comment_is_top":false,"comment_ctime":1666879295,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666879295","product_id":100103401,"comment_content":"没讲 reified 和 where 关键字~","like_count":0},{"had_liked":false,"id":359808,"user_name":"Geek_518c5c","can_delete":false,"product_type":"c1","uid":1298230,"ip_address":"北京","ucode":"83B79CE18EF920","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqT3pba9RQEXAOHiaOMm3ibSicngJj3LAHaAQ9pa5N1I6A4RwNQ97LQeFAnLkQgaXBjHpW9xPYQVTaIA/132","comment_is_top":false,"comment_ctime":1665924604,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665924604","product_id":100103401,"comment_content":"有可以下载的demo代码吗，老师","like_count":0},{"had_liked":false,"id":359684,"user_name":"黑矮人","can_delete":false,"product_type":"c1","uid":1019379,"ip_address":"上海","ucode":"96154A2CFEC3F2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/33dVHfOPRwHGLtbsxS6GP3cjlB27QSlTQ9twmNMSx8dFTjnoOOtJY3Pq1INF3peB38k6XgB4uRjvBGvkxduRuw/132","comment_is_top":false,"comment_ctime":1665747976,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665747976","product_id":100103401,"comment_content":"大佬，可以讲讲，Kotlin的泛型的类型擦除？","like_count":0},{"had_liked":false,"id":359615,"user_name":"黑矮人","can_delete":false,"product_type":"c1","uid":1019379,"ip_address":"上海","ucode":"96154A2CFEC3F2","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/33dVHfOPRwHGLtbsxS6GP3cjlB27QSlTQ9twmNMSx8dFTjnoOOtJY3Pq1INF3peB38k6XgB4uRjvBGvkxduRuw/132","comment_is_top":false,"comment_ctime":1665686067,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665686067","product_id":100103401,"comment_content":"Kotlin相比java，增加了 out T in T的修饰，在类和接口的声明处使用处就 限制使用，<br>这样在使用的时候不用每次都写","like_count":0},{"had_liked":false,"id":354467,"user_name":"小江爱学术","can_delete":false,"product_type":"c1","uid":2628601,"ip_address":"四川","ucode":"554F40C6627AF4","user_header":"https://static001.geekbang.org/account/avatar/00/28/1b/f9/018197f1.jpg","comment_is_top":false,"comment_ctime":1660445890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1660445890","product_id":100103401,"comment_content":"这段代码里，我们对 Success 这个数据类的泛型参数使用了 out 来修饰，这就代表了协变。看到这里，如果你足够细心，就会觉得奇怪：这里为什么可以使用协变呢？前面我们不是说过：“泛型作为参数，用 in；泛型作为返回值，用 out”吗？这里并没有任何函数参数或者返回值啊？<br><br>最后句话是啥意思呀，应该是 这里的方法既把范型参数作为函数参数，又将其作为返回值吧","like_count":0},{"had_liked":false,"id":352669,"user_name":"郑峰","can_delete":false,"product_type":"c1","uid":1112517,"ip_address":"","ucode":"4D4C0C020E507C","user_header":"https://static001.geekbang.org/account/avatar/00/10/f9/c5/95b97dfa.jpg","comment_is_top":false,"comment_ctime":1658849354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658849354","product_id":100103401,"comment_content":"来个类比<br><br>声明处型变 -&gt; 修改类定义<br>使用处型变 -&gt; 修改对象定义<br>","like_count":0},{"had_liked":false,"id":351498,"user_name":"Y  ","can_delete":false,"product_type":"c1","uid":1329923,"ip_address":"","ucode":"874503F8B1E6CD","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/03/090ca0b6.jpg","comment_is_top":false,"comment_ctime":1657852554,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1657852554","product_id":100103401,"comment_content":"大佬，感觉你这里说的协变跟逆变不是很明确，其实就相当于java得extends和super，不需要去记什么in作为参数，out是作为输出，直接用类比到java中简单明了，因为在java里面，&lt;? extends T&gt; &lt;? super Object&gt; 直接表达上届和下界就可以了，&lt;? extends T&gt; 代表的是传入的参数是继承T以及T，&lt;? super T&gt;代表的是传入的参数是T以及T的父类","like_count":0,"discussions":[{"author":{"id":1342000,"avatar":"https://static001.geekbang.org/account/avatar/00/14/7a/30/23fc4089.jpg","nickname":"24隋心所欲","note":"","ucode":"1B8B2789F68C94","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591866,"discussion_content":"有点先入为主了，个人觉得，其实还是in、out更友好一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666879067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348946,"user_name":"Cappuccino不加奶","can_delete":false,"product_type":"c1","uid":3018632,"ip_address":"","ucode":"E053DF8BA21ED7","user_header":"https://static001.geekbang.org/account/avatar/00/2e/0f/88/08f09505.jpg","comment_is_top":false,"comment_ctime":1655605664,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655605664","product_id":100103401,"comment_content":"给Restaurant加了上边界，fun findRestaurant(): Restaurant&lt;*&gt; {}也可以写成fun findRestaurant(): Restaurant&lt;Food&gt; {}吧？","like_count":0},{"had_liked":false,"id":344170,"user_name":"louc","can_delete":false,"product_type":"c1","uid":2728241,"ip_address":"","ucode":"08FB5A46314B2B","user_header":"https://static001.geekbang.org/account/avatar/00/29/a1/31/ca97e229.jpg","comment_is_top":false,"comment_ctime":1651321293,"is_pvip":false,"replies":[{"id":"125934","content":"看到你的回复我真的很高兴，希望你继续坚持学习下去~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1652025797,"ip_address":"","comment_id":344170,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651321293","product_id":100103401,"comment_content":"历史上最好的讲泛型，通俗易懂","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571009,"discussion_content":"看到你的回复我真的很高兴，希望你继续坚持学习下去~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652025797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338659,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1647650287,"is_pvip":false,"replies":[{"id":"124018","content":"使用处，声明处的总结很棒！星投影的使用场景，往往是我们不需要范型的时候。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1648031043,"ip_address":"","comment_id":338659,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647650287","product_id":100103401,"comment_content":"使用处的型变,可以使用星投影，更灵活，但是范围比较小。声明处的型变,解决的是泛型类本身的约束，一次定义，所有使用的地方都受到相应影响，星投影处也不例外，使用处不得修改。个人觉得优先使用声明处的型变，使用处的型变会导致不同的使用处，型变不同的情况，带来额外的复杂性。星投影我在实际中基本没用过，老师能否举一个实际中用星投影能很好解决问题的场景。<br>","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557964,"discussion_content":"使用处，声明处的总结很棒！星投影的使用场景，往往是我们不需要范型的时候。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648031043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337213,"user_name":"阿翔","can_delete":false,"product_type":"c1","uid":1174535,"ip_address":"","ucode":"6DA5FB7D342331","user_header":"https://static001.geekbang.org/account/avatar/00/11/ec/07/cceffc14.jpg","comment_is_top":false,"comment_ctime":1646702898,"is_pvip":false,"replies":[{"id":"123273","content":"这块的逻辑确实比较乱，容易绕晕。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1646753760,"ip_address":"","comment_id":337213,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1646702898","product_id":100103401,"comment_content":"需要子类集合，传入父类集合的代码有乱码","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555124,"discussion_content":"这块的逻辑确实比较乱，容易绕晕。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646753760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334945,"user_name":"白乾涛","can_delete":false,"product_type":"c1","uid":1339841,"ip_address":"","ucode":"0C704B0B90C8D7","user_header":"https://static001.geekbang.org/account/avatar/00/14/71/c1/cbc55e06.jpg","comment_is_top":false,"comment_ctime":1645193769,"is_pvip":false,"replies":[{"id":"122410","content":"我这么做其实是为了突出泛型这个重点吧，方法内部怎么实现，其实没太大关系的。<br><br>对于这个例子来说，因为返回值类型是T，它也没办法直接写返回值的，如果你希望找到完整的代码，可以去参考一下Kotlin集合里泛型的源代码。","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1645370254,"ip_address":"","comment_id":334945,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645193769","product_id":100103401,"comment_content":"老师，文稿中的很多代码都不符合语法，能不能把代码完善一下呀<br><br>比如，星投影那里的代码  fun orderFood(): T {}<br><br>为啥这个方法不写返回值呢？<br>返回值 T 改怎么写呢？<br><br>","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552269,"discussion_content":"我这么做其实是为了突出泛型这个重点吧，方法内部怎么实现，其实没太大关系的。\n\n对于这个例子来说，因为返回值类型是T，它也没办法直接写返回值的，如果你希望找到完整的代码，可以去参考一下Kotlin集合里泛型的源代码。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645370255,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331621,"user_name":"better","can_delete":false,"product_type":"c1","uid":1169063,"ip_address":"","ucode":"AF1DB566EBB8A5","user_header":"https://static001.geekbang.org/account/avatar/00/11/d6/a7/ac23f5a6.jpg","comment_is_top":false,"comment_ctime":1642673065,"is_pvip":false,"replies":[{"id":"121184","content":"加油哈~","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1642757344,"ip_address":"","comment_id":331621,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642673065","product_id":100103401,"comment_content":"收货满满，感谢分享~ ","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547590,"discussion_content":"加油哈~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642757344,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331545,"user_name":"阿康","can_delete":false,"product_type":"c1","uid":2697815,"ip_address":"","ucode":"DF20E1E33A8A34","user_header":"https://static001.geekbang.org/account/avatar/00/29/2a/57/6629c858.jpg","comment_is_top":false,"comment_ctime":1642647603,"is_pvip":false,"replies":[{"id":"121183","content":"你再想想？声明处的泛型，它可是形参，我们应该用T。<br><br><br>&#47;&#47;              变化在这里<br>&#47;&#47;                    ↓<br>class Controller&lt;in T&gt; {<br>    fun turnOn(tv: T)<br>}","user_name":"作者回复","user_name_real":"编辑","uid":"1180670","ctime":1642757324,"ip_address":"","comment_id":331545,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1642647603","product_id":100103401,"comment_content":"第二种做法，是修改 Controller 的源代码，这叫声明处型变。具体做法就是，在泛型形参 T 的前面增加一个关键字 in：示例代码错了吧？应该是这样吧？<br><br>&#47;&#47;            变化在这里<br>&#47;&#47;               ↓<br>class Controller&lt;in TV&gt; {<br>    fun turnOn(tv: TV)<br>}","like_count":0,"discussions":[{"author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":547589,"discussion_content":"你再想想？声明处的泛型，它可是形参，我们应该用T。\n\n\n//              变化在这里\n//                    ↓\nclass Controller&lt;in T&gt; {\n    fun turnOn(tv: T)\n}","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642757324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2697815,"avatar":"https://static001.geekbang.org/account/avatar/00/29/2a/57/6629c858.jpg","nickname":"阿康","note":"","ucode":"DF20E1E33A8A34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1180670,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/fe/0f43ef35.jpg","nickname":"朱涛","note":"","ucode":"5AB5AFE32B8008","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":547914,"discussion_content":"想错了。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642931118,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":547589,"ip_address":""},"score":547914,"extra":""}]}]}]}