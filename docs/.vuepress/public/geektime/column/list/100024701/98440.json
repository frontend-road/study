{"id":98440,"title":"28 | 硬盘文件系统：如何最合理地组织档案库的文档？","content":"<p>上一节，我们按照图书馆的模式，规划了档案库，也即文件系统应该有的样子。这一节，我们将这个模式搬到硬盘上来看一看。</p><p><img src=\"https://static001.geekbang.org/resource/image/2e/d2/2ea68b40d928e6469233fcb4948c7cd2.jpg?wh=1280*720\" alt=\"\"></p><p>我们常见的硬盘是上面这幅图左边的样子，中间圆的部分是磁盘的盘片，右边的图是抽象出来的图。每一层里分多个磁道，每个磁道分多个扇区，每个扇区是512个字节。</p><p>文件系统就是安装在这样的硬盘之上。这一节我们重点目前Linux下最主流的文件系统格式——<strong>ext系列</strong>的文件系统的格式。</p><h2>inode与块的存储</h2><p>就像图书馆的书架都要分成大小相同的格子，硬盘也是一样的。硬盘分成相同大小的单元，我们称为<strong>块</strong>（Block）。一块的大小是扇区大小的整数倍，默认是4K。在格式化的时候，这个值是可以设定的。</p><p>一大块硬盘被分成了一个个小的块，用来存放文件的数据部分。这样一来，如果我们像存放一个文件，就不用给他分配一块连续的空间了。我们可以分散成一个个小块进行存放。这样就灵活得多，也比较容易添加、删除和插入数据。</p><p>但是这也带来一个新的问题，那就是文件的数据存放得太散，找起来就比较困难。有什么办法解决呢？我们是不是可以像图书馆那样，也设立一个索引区域，用来维护“某个文件分成几块、每一块在哪里”等等这些<strong>基本信息</strong>?</p><p>另外，文件还有<strong>元数据</strong>部分，例如名字、权限等，这就需要一个结构<strong>inode</strong>来存放。</p><!-- [[[read_end]]] --><p>什么是inode呢？inode的“i”是index的意思，其实就是“索引”，类似图书馆的索引区域。既然如此，我们每个文件都会对应一个inode；一个文件夹就是一个文件，也对应一个inode。</p><p>至于inode里面有哪些信息，其实我们在内核中就有定义。你可以看下面这个数据结构。</p><pre><code>struct ext4_inode {\n\t__le16\ti_mode;\t\t/* File mode */\n\t__le16\ti_uid;\t\t/* Low 16 bits of Owner Uid */\n\t__le32\ti_size_lo;\t/* Size in bytes */\n\t__le32\ti_atime;\t/* Access time */\n\t__le32\ti_ctime;\t/* Inode Change time */\n\t__le32\ti_mtime;\t/* Modification time */\n\t__le32\ti_dtime;\t/* Deletion Time */\n\t__le16\ti_gid;\t\t/* Low 16 bits of Group Id */\n\t__le16\ti_links_count;\t/* Links count */\n\t__le32\ti_blocks_lo;\t/* Blocks count */\n\t__le32\ti_flags;\t/* File flags */\n......\n\t__le32\ti_block[EXT4_N_BLOCKS];/* Pointers to blocks */\n\t__le32\ti_generation;\t/* File version (for NFS) */\n\t__le32\ti_file_acl_lo;\t/* File ACL */\n\t__le32\ti_size_high;\n......\n};\n</code></pre><p>从这个数据结构中，我们可以看出，inode里面有文件的读写权限i_mode，属于哪个用户i_uid，哪个组i_gid，大小是多少i_size_io，占用多少个块i_blocks_io。咱们讲ls命令行的时候，列出来的权限、用户、大小这些信息，就是从这里面取出来的。</p><p>另外，这里面还有几个与文件相关的时间。i_atime是access time，是最近一次访问文件的时间；i_ctime是change time，是最近一次更改inode的时间；i_mtime是modify time，是最近一次更改文件的时间。</p><p>这里你需要注意区分几个地方。首先，访问了，不代表修改了，也可能只是打开看看，就会改变access time。其次，修改inode，有可能修改的是用户和权限，没有修改数据部分，就会改变change time。只有数据也修改了，才改变modify time。</p><p>我们刚才说的“某个文件分成几块、每一块在哪里”，这些在inode里面，应该保存在i_block里面。</p><p>具体如何保存的呢？EXT4_N_BLOCKS有如下的定义，计算下来一共有15项。</p><pre><code>#define\tEXT4_NDIR_BLOCKS\t\t12\n#define\tEXT4_IND_BLOCK\t\t\tEXT4_NDIR_BLOCKS\n#define\tEXT4_DIND_BLOCK\t\t\t(EXT4_IND_BLOCK + 1)\n#define\tEXT4_TIND_BLOCK\t\t\t(EXT4_DIND_BLOCK + 1)\n#define\tEXT4_N_BLOCKS\t\t\t(EXT4_TIND_BLOCK + 1)\n</code></pre><p>在ext2和ext3中，其中前12项直接保存了块的位置，也就是说，我们可以通过i_block[0-11]，直接得到保存文件内容的块。</p><p><img src=\"https://static001.geekbang.org/resource/image/73/e2/73349c0fab1a92d4e1ae0c684cfe06e2.jpeg?wh=1573*2263\" alt=\"\"></p><p>但是，如果一个文件比较大，12块放不下。当我们用到i_block[12]的时候，就不能直接放数据块的位置了，要不然i_block很快就会用完了。这该怎么办呢？我们需要想个办法。我们可以让i_block[12]指向一个块，这个块里面不放数据块，而是放数据块的位置，这个块我们称为<strong>间接块</strong>。也就是说，我们在i_block[12]里面放间接块的位置，通过i_block[12]找到间接块后，间接块里面放数据块的位置，通过间接块可以找到数据块。</p><p>如果文件再大一些，i_block[13]会指向一个块，我们可以用二次间接块。二次间接块里面存放了间接块的位置，间接块里面存放了数据块的位置，数据块里面存放的是真正的数据。如果文件再大一些，i_block[14]会指向三次间接块。原理和上面都是一样的，就像一层套一层的俄罗斯套娃，一层一层打开，才能拿到最中心的数据块。</p><p>如果你稍微有点经验，现在你应该能够意识到，这里面有一个非常显著的问题，对于大文件来讲，我们要多次读取硬盘才能找到相应的块，这样访问速度就会比较慢。</p><p>为了解决这个问题，ext4做了一定的改变。它引入了一个新的概念，叫做<strong>Extents</strong>。</p><p>我们来解释一下Extents。比方说，一个文件大小为128M，如果使用4k大小的块进行存储，需要32k个块。如果按照ext2或者ext3那样散着放，数量太大了。但是Extents可以用于存放连续的块，也就是说，我们可以把128M放在一个Extents里面。这样的话，对大文件的读写性能提高了，文件碎片也减少了。</p><p>Exents如何来存储呢？它其实会保存成一棵树。</p><p><img src=\"https://static001.geekbang.org/resource/image/b8/2a/b8f184696be8d37ad6f2e2a4f12d002a.jpeg?wh=2023*1363\" alt=\"\"></p><p>树有一个个的节点，有叶子节点，也有分支节点。每个节点都有一个头，ext4_extent_header可以用来描述某个节点。</p><pre><code>struct ext4_extent_header {\n\t__le16\teh_magic;\t/* probably will support different formats */\n\t__le16\teh_entries;\t/* number of valid entries */\n\t__le16\teh_max;\t\t/* capacity of store in entries */\n\t__le16\teh_depth;\t/* has tree real underlying blocks? */\n\t__le32\teh_generation;\t/* generation of the tree */\n};\n</code></pre><p>我们仔细来看里面的内容。eh_entries表示这个节点里面有多少项。这里的项分两种，如果是叶子节点，这一项会直接指向硬盘上的连续块的地址，我们称为数据节点ext4_extent；如果是分支节点，这一项会指向下一层的分支节点或者叶子节点，我们称为索引节点ext4_extent_idx。这两种类型的项的大小都是12个byte。</p><pre><code>/*\n * This is the extent on-disk structure.\n * It's used at the bottom of the tree.\n */\nstruct ext4_extent {\n\t__le32\tee_block;\t/* first logical block extent covers */\n\t__le16\tee_len;\t\t/* number of blocks covered by extent */\n\t__le16\tee_start_hi;\t/* high 16 bits of physical block */\n\t__le32\tee_start_lo;\t/* low 32 bits of physical block */\n};\n/*\n * This is index on-disk structure.\n * It's used at all the levels except the bottom.\n */\nstruct ext4_extent_idx {\n\t__le32\tei_block;\t/* index covers logical blocks from 'block' */\n\t__le32\tei_leaf_lo;\t/* pointer to the physical block of the next *\n\t\t\t\t * level. leaf or next index could be there */\n\t__le16\tei_leaf_hi;\t/* high 16 bits of physical block */\n\t__u16\tei_unused;\n};\n</code></pre><p>如果文件不大，inode里面的i_block中，可以放得下一个ext4_extent_header和4项ext4_extent。所以这个时候，eh_depth为0，也即inode里面的就是叶子节点，树高度为0。</p><p>如果文件比较大，4个extent放不下，就要分裂成为一棵树，eh_depth&gt;0的节点就是索引节点，其中根节点深度最大，在inode中。最底层eh_depth=0的是叶子节点。</p><p>除了根节点，其他的节点都保存在一个块4k里面，4k扣除ext4_extent_header的12个byte，剩下的能够放340项，每个extent最大能表示128MB的数据，340个extent会使你表示的文件达到42.5GB。这已经非常大了，如果再大，我们可以增加树的深度。</p><h2>inode位图和块位图</h2><p>到这里，我们知道了，硬盘上肯定有一系列的inode和一系列的块排列起来。</p><p>接下来的问题是，如果我要保存一个数据块，或者要保存一个inode，我应该放在硬盘上的哪个位置呢？难道需要将所有的inode列表和块列表扫描一遍，找个空的地方随便放吗？</p><p>当然，这样效率太低了。所以在文件系统里面，我们专门弄了一个块来保存inode的位图。在这4k里面，每一位对应一个inode。如果是1，表示这个inode已经被用了；如果是0，则表示没被用。同样，我们也弄了一个块保存block的位图。</p><p>上海虹桥火车站的厕位智能引导系统，不知道你有没有见过？这个系统很厉害，我们要想知道哪个位置有没有被占用，不用挨个拉门，从这样一个电子版上就能看到了。</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/25/d790fb19b76d7504985639aceac43c25.jpeg?wh=536*405\" alt=\"\"></p><p>接下来，我们来看位图究竟是如何在Linux操作系统里面起作用的。前一节我们讲过，如果创建一个新文件，会调用open函数，并且参数会有O_CREAT。这表示当文件找不到的时候，我们就需要创建一个。open是一个系统调用，在内核里面会调用sys_open，定义如下：</p><pre><code>SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t, mode)\n{\n\tif (force_o_largefile())\n\t\tflags |= O_LARGEFILE;\n\n\n\treturn do_sys_open(AT_FDCWD, filename, flags, mode);\n}\n</code></pre><p>这里我们还是重点看对于inode的操作。其实open一个文件很复杂，下一节我们会详细分析整个过程。</p><p>我们来看接下来的调用链：do_sys_open-&gt; do_filp_open-&gt;path_openat-&gt;do_last-&gt;lookup_open。这个调用链的逻辑是，要打开一个文件，先要根据路径找到文件夹。如果发现文件夹下面没有这个文件，同时又设置了O_CREAT，就说明我们要在这个文件夹下面创建一个文件，那我们就需要一个新的inode。</p><pre><code>static int lookup_open(struct nameidata *nd, struct path *path,\n\t\t\tstruct file *file,\n\t\t\tconst struct open_flags *op,\n\t\t\tbool got_write, int *opened)\n{\n......\n\tif (!dentry-&gt;d_inode &amp;&amp; (open_flag &amp; O_CREAT)) {\n......\n\t\terror = dir_inode-&gt;i_op-&gt;create(dir_inode, dentry, mode,\n\t\t\t\t\t\topen_flag &amp; O_EXCL);\n......\n\t}\n......\n}\n</code></pre><p>想要创建新的inode，我们就要调用dir_inode，也就是文件夹的inode的create函数。它的具体定义是这样的：</p><pre><code>const struct inode_operations ext4_dir_inode_operations = {\n\t.create\t\t= ext4_create,\n\t.lookup\t\t= ext4_lookup,\n\t.link\t\t= ext4_link,\n\t.unlink\t\t= ext4_unlink,\n\t.symlink\t= ext4_symlink,\n\t.mkdir\t\t= ext4_mkdir,\n\t.rmdir\t\t= ext4_rmdir,\n\t.mknod\t\t= ext4_mknod,\n\t.tmpfile\t= ext4_tmpfile,\n\t.rename\t\t= ext4_rename2,\n\t.setattr\t= ext4_setattr,\n\t.getattr\t= ext4_getattr,\n\t.listxattr\t= ext4_listxattr,\n\t.get_acl\t= ext4_get_acl,\n\t.set_acl\t= ext4_set_acl,\n\t.fiemap         = ext4_fiemap,\n};\n</code></pre><p>这里面定义了，如果文件夹inode要做一些操作，每个操作对应应该调用哪些函数。这里create操作调用的是ext4_create。</p><p>接下来的调用链是这样的：ext4_create-&gt;ext4_new_inode_start_handle-&gt;__ext4_new_inode。在__ext4_new_inode函数中，我们会创建新的inode。</p><pre><code>struct inode *__ext4_new_inode(handle_t *handle, struct inode *dir,\n\t\t\t       umode_t mode, const struct qstr *qstr,\n\t\t\t       __u32 goal, uid_t *owner, __u32 i_flags,\n\t\t\t       int handle_type, unsigned int line_no,\n\t\t\t       int nblocks)\n{\n......\ninode_bitmap_bh = ext4_read_inode_bitmap(sb, group);\n......\nino = ext4_find_next_zero_bit((unsigned long *)\n\t\t\t\t\t      inode_bitmap_bh-&gt;b_data,\n\t\t\t\t\t      EXT4_INODES_PER_GROUP(sb), ino);\n......\n}\n</code></pre><p>这里面一个重要的逻辑就是，从文件系统里面读取inode位图，然后找到下一个为0的inode，就是空闲的inode。</p><p>对于block位图，在写入文件的时候，也会有这个过程，我就不展开说了。感兴趣的话，你可以自己去找代码看。</p><h2>文件系统的格式</h2><p>看起来，我们现在应该能够很顺利地通过inode位图和block位图创建文件了。如果仔细计算一下，其实还是有问题的。</p><p>数据块的位图是放在一个块里面的，共4k。每位表示一个数据块，共可以表示$4 * 1024 * 8 = 2^{15}$个数据块。如果每个数据块也是按默认的4K，最大可以表示空间为$2^{15} * 4 * 1024 = 2^{27}$个byte，也就是128M。</p><p>也就是说按照上面的格式，如果采用“<strong>一个块的位图+一系列的块</strong>”，外加“<strong>一个块的inode的位图+一系列的inode的结构</strong>”，最多能够表示128M。是不是太小了？现在很多文件都比这个大。我们先把这个结构称为一个<strong>块组</strong>。有N多的块组，就能够表示N大的文件。</p><p>对于块组，我们也需要一个数据结构来表示为ext4_group_desc。这里面对于一个块组里的inode位图bg_inode_bitmap_lo、块位图bg_block_bitmap_lo、inode列表bg_inode_table_lo，都有相应的成员变量。</p><p>这样一个个块组，就基本构成了我们整个文件系统的结构。因为块组有多个，块组描述符也同样组成一个列表，我们把这些称为<strong>块组描述符表</strong>。</p><p>当然，我们还需要有一个数据结构，对整个文件系统的情况进行描述，这个就是<strong>超级块</strong>ext4_super_block。这里面有整个文件系统一共有多少inode，s_inodes_count；一共有多少块，s_blocks_count_lo，每个块组有多少inode，s_inodes_per_group，每个块组有多少块，s_blocks_per_group等。这些都是这类的全局信息。</p><p>对于整个文件系统，别忘了咱们讲系统启动的时候说的。如果是一个启动盘，我们需要预留一块区域作为引导区，所以第一个块组的前面要留1K，用于启动引导区。</p><p>最终，整个文件系统格式就是下面这个样子。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/1b/e3718f0af6a2523a43606a0c4003631b.jpeg?wh=2263*823\" alt=\"\"></p><p>这里面我还需要重点说一下，超级块和块组描述符表都是全局信息，而且这些数据很重要。如果这些数据丢失了，整个文件系统都打不开了，这比一个文件的一个块损坏更严重。所以，这两部分我们都需要备份，但是采取不同的策略。</p><p>默认情况下，超级块和块组描述符表都有副本保存在每一个块组里面。</p><p>如果开启了sparse_super特性，超级块和块组描述符表的副本只会保存在块组索引为0、3、5、7的整数幂里。除了块组0中存在一个超级块外，在块组1（$3^0=1$）的第一个块中存在一个副本；在块组3（$3^1=3$）、块组5（$5^1=5$）、块组7（$7^1=7$）、块组9（$3^2=9$）、块组25（$5^2=25$）、块组27（$3^3=27$）的第一个block处也存在一个副本。</p><p>对于超级块来讲，由于超级块不是很大，所以就算我们备份多了也没有太多问题。但是，对于块组描述符表来讲，如果每个块组里面都保存一份完整的块组描述符表，一方面很浪费空间；另一个方面，由于一个块组最大128M，而块组描述符表里面有多少项，这就限制了有多少个块组，128M * 块组的总数目是整个文件系统的大小，就被限制住了。</p><p>我们的改进的思路就是引入<strong>Meta Block Groups特性</strong>。</p><p>首先，块组描述符表不会保存所有块组的描述符了，而是将块组分成多个组，我们称为元块组（Meta Block Group）。每个元块组里面的块组描述符表仅仅包括自己的，一个元块组包含64个块组，这样一个元块组中的块组描述符表最多64项。我们假设一共有256个块组，原来是一个整的块组描述符表，里面有256项，要备份就全备份，现在分成4个元块组，每个元块组里面的块组描述符表就只有64项了，这就小多了，而且四个元块组自己备份自己的。</p><p><img src=\"https://static001.geekbang.org/resource/image/b0/b9/b0bf4690882253a70705acc7368983b9.jpeg?wh=2149*1543\" alt=\"\"></p><p>根据图中，每一个元块组包含64个块组，块组描述符表也是64项，备份三份，在元块组的第一个，第二个和最后一个块组的开始处。</p><p>这样化整为零，我们就可以发挥出ext4的48位块寻址的优势了，在超级块ext4_super_block的定义中，我们可以看到块寻址分为高位和低位，均为32位，其中有用的是48位，2^48个块是1EB，足够用了。</p><pre><code>struct ext4_super_block {\n......\n\t__le32\ts_blocks_count_lo;\t/* Blocks count */\n\t__le32\ts_r_blocks_count_lo;\t/* Reserved blocks count */\n\t__le32\ts_free_blocks_count_lo;\t/* Free blocks count */\n......\n\t__le32\ts_blocks_count_hi;\t/* Blocks count */\n\t__le32\ts_r_blocks_count_hi;\t/* Reserved blocks count */\n\t__le32\ts_free_blocks_count_hi;\t/* Free blocks count */\n......\n}\n</code></pre><h2>目录的存储格式</h2><p>通过前面的描述，我们现在知道了一个普通的文件是如何存储的。有一类特殊的文件，我们会经常用到，就是目录，它是如何保存的呢？</p><p>其实目录本身也是个文件，也有inode。inode里面也是指向一些块。和普通文件不同的是，普通文件的块里面保存的是文件数据，而目录文件的块里面保存的是目录里面一项一项的文件信息。这些信息我们称为ext4_dir_entry。从代码来看，有两个版本，在成员来讲几乎没有差别，只不过第二个版本ext4_dir_entry_2是将一个16位的name_len，变成了一个8位的name_len和8位的file_type。</p><pre><code>struct ext4_dir_entry {\n\t__le32\tinode;\t\t\t/* Inode number */\n\t__le16\trec_len;\t\t/* Directory entry length */\n\t__le16\tname_len;\t\t/* Name length */\n\tchar\tname[EXT4_NAME_LEN];\t/* File name */\n};\nstruct ext4_dir_entry_2 {\n\t__le32\tinode;\t\t\t/* Inode number */\n\t__le16\trec_len;\t\t/* Directory entry length */\n\t__u8\tname_len;\t\t/* Name length */\n\t__u8\tfile_type;\n\tchar\tname[EXT4_NAME_LEN];\t/* File name */\n};\n</code></pre><p>在目录文件的块中，最简单的保存格式是列表，就是一项一项地将ext4_dir_entry_2列在哪里。</p><p>每一项都会保存这个目录的下一级的文件的文件名和对应的inode，通过这个inode，就能找到真正的文件。第一项是“.”，表示当前目录，第二项是“…”，表示上一级目录，接下来就是一项一项的文件名和inode。</p><p>有时候，如果一个目录下面的文件太多的时候，我们想在这个目录下找一个文件，按照列表一个个去找，太慢了，于是我们就添加了索引的模式。</p><p>如果在inode中设置EXT4_INDEX_FL标志，则目录文件的块的组织形式将发生变化，变成了下面定义的这个样子：</p><pre><code>struct dx_root\n{\n\tstruct fake_dirent dot;\n\tchar dot_name[4];\n\tstruct fake_dirent dotdot;\n\tchar dotdot_name[4];\n\tstruct dx_root_info\n\t{\n\t\t__le32 reserved_zero;\n\t\tu8 hash_version;\n\t\tu8 info_length; /* 8 */\n\t\tu8 indirect_levels;\n\t\tu8 unused_flags;\n\t}\n\tinfo;\n\tstruct dx_entry\tentries[0];\n};\n</code></pre><p>当然，首先出现的还是差不多的，第一项是“.”，表示当前目录；第二项是“…”，表示上一级目录，这两个不变。接下来就开始发生改变了。是一个dx_root_info的结构，其中最重要的成员变量是indirect_levels，表示间接索引的层数。</p><p>接下来我们来看索引项dx_entry。这个也很简单，其实就是文件名的哈希值和数据块的一个映射关系。</p><pre><code>struct dx_entry\n{\n\t__le32 hash;\n\t__le32 block;\n};\n</code></pre><p>如果我们要查找一个目录下面的文件名，可以通过名称取哈希。如果哈希能够匹配上，就说明这个文件的信息在相应的块里面。然后打开这个块，如果里面不再是索引，而是索引树的叶子节点的话，那里面还是ext4_dir_entry_2的列表，我们只要一项一项找文件名就行。通过索引树，我们可以将一个目录下面的N多的文件分散到很多的块里面，可以很快地进行查找。</p><p><img src=\"https://static001.geekbang.org/resource/image/3e/6d/3ea2ad5704f20538d9c911b02f42086d.jpeg?wh=3253*2548\" alt=\"\"></p><h2>软链接和硬链接的存储格式</h2><p>还有一种特殊的文件格式，硬链接（Hard Link）和软链接（Symbolic Link）。在讲操作文件的命令的时候，我们讲过软链接的概念。所谓的链接（Link），我们可以认为是文件的别名，而链接又可分为两种，硬链接与软链接。通过下面的命令可以创建。</p><pre><code> ln [参数][源文件或目录][目标文件或目录]\n</code></pre><p>ln -s创建的是软链接，不带-s创建的是硬链接。它们有什么区别呢？在文件系统里面是怎么保存的呢？</p><p><img src=\"https://static001.geekbang.org/resource/image/45/7b/45a6cfdd9d45e30dc2f38f0d2572be7b.jpeg?wh=2188*2176\" alt=\"\"></p><p>如图所示，硬链接与原始文件共用一个inode的，但是inode是不跨文件系统的，每个文件系统都有自己的inode列表，因而硬链接是没有办法跨文件系统的。</p><p>而软链接不同，软链接相当于重新创建了一个文件。这个文件也有独立的inode，只不过打开这个文件看里面内容的时候，内容指向另外的一个文件。这就很灵活了。我们可以跨文件系统，甚至目标文件被删除了，链接文件还是在的，只不过指向的文件找不到了而已。</p><h2>总结时刻</h2><p>这一节，我们描述了复杂的硬盘上的文件系统，但是对于咱们平时的应用来讲，用的最多的是两个概念，一个是inode，一个是数据块。</p><p>这里我画了一张图，来总结一下inode和数据块在文件系统上的关联关系。</p><p>为了表示图中上半部分的那个简单的树形结构，在文件系统上的布局就像图的下半部分一样。无论是文件夹还是文件，都有一个inode。inode里面会指向数据块，对于文件夹的数据块，里面是一个表，是下一层的文件名和inode的对应关系，文件的数据块里面存放的才是真正的数据。</p><p><img src=\"https://static001.geekbang.org/resource/image/f8/38/f81bf3e5a6cd060c3225a8ae1803a138.png?wh=3823*1876\" alt=\"\"></p><h2>课堂练习</h2><p>你知道如何查看inode的内容和文件夹的内容吗？</p><p>欢迎留言和我分享你的疑惑和见解 ，也欢迎可以收藏本节内容，反复研读。你也可以把今天的内容分享给你的朋友，和他一起学习和进步。</p><p><img src=\"https://static001.geekbang.org/resource/image/8c/37/8c0a95fa07a8b9a1abfd394479bdd637.jpg?wh=1110*659\" alt=\"\"></p>","neighbors":{"left":{"article_title":"27 | 文件系统：项目成果要归档，我们就需要档案库","id":97876},"right":{"article_title":"29 | 虚拟文件系统：文件多了就需要档案管理系统","id":98855}},"comments":[{"had_liked":false,"id":100516,"user_name":"why","can_delete":false,"product_type":"c1","uid":1012937,"ip_address":"","ucode":"C9E796E53F6F5E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/c9/d3439ca4.jpg","comment_is_top":false,"comment_ctime":1559568842,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"233487802826","product_id":100024701,"comment_content":"- 磁盘→盘片→磁道→扇区(每个 512 字节)<br>- ext* 定义文件系统的格式<br>- inode 与数据块<br>    - 硬盘分为大小相同的单元→块 ( block ), 大小 4K, 扇区的整数倍, 大小在格式化时可配置<br>    - 因此, 存放文件时不用分配连续的空间<br>    - 也因此要为文件建立块索引 + 元数据(名字, 权限, 所属) 信息, 存放于 inode 中<br>    - inode 还维护三个时间: i_atime 访问时间; i_ctime 更改 inode 时间; i_mtime 更改文件时间<br>    - 文件分为多个块, 每个块的位置存放在 inode 的 i_block 中, 共 15 项<br>        - ext2 和 ext3 中, 前 12 项保存块的位置, 若文件较大, 则第十三项指向间接块, 间接块存放剩余数据块的位置; 文件再大, 第 14 项指向两级间接块, 以此类推<br>        - 但上述, 大文件需要访问多个块才能读取到数据<br>        - ext4 引入 Extents 概念, 可以用于存放连续的数据块<br>        - Extents 是树形结构, 每个节点由一个头 ext4_extend_header 来描述节点<br>            - 节点有多个项, 对于叶子节点: 每项直接指向硬盘上的连续块的地址; 分支节点: 每项指向下一层节点<br>            - 文件不大: inode 可放下一个头 + 4 个数据项, eh_depth = 0 表示数据节点<br>            - 文件较大: 除了根节点(存于 inode.i_block 中) , 其他节点都存于一个块中, 4K 能存 340 项, 每项可放 128MB, 总 42.5GB<br>- inode 位图与块位图<br>    - 要保存数据是, 应放在哪? 全扫一遍效率低<br>    - 用一个块保存 inode 位图, 每一位对应一个 inode, 1→被占用; 同样用一个块保存块位图<br>    - open 再空文件夹下创建文件: do_sys_open→...→lookup_open 再调用 dir_node→i_op_create(ext4_create) 创建文件夹 inode<br>        - 调用 ext4_create→...→__ext4_new_inode 读取 inode 位图, 找到下一个空闲 inode<br>        - 同样用块位图找空闲块<br>- 文件系统格式<br>    - 一个位图只能表示 2^15 个数据块, 即 128MB<br>    - 一个 inode 位图 + 一个 block 位图, 称为块组, 用数据结构 ext4_group_desc 表示, 里面包含 inode 位图, block 位图和 inode 列表<br>    - 这些块组描述符构成列表, 另外用超级块 ext4_super_block 描述整个文件系统; 第一个块组前 1k 用于启动引导<br>    - 文件系统由引导块 + N 个块组组成; 每个块组由: 超级块 + 块组描述符表 + 块位图 + inode 位图 + inode 列表 + 数据块构成<br>    - 超级块和块组描述符表都是全局信息; 默认超级块和块组描述符表再灭个租客都有备份; 若开启 sparse_super, 则只在固定块组中备份<br>    - 采用 Meta Block Groups 特性, 避免块组表浪费空间, 或限制文件系统的大小<br>        - 将块组分成多个组(元块组) 块组描述符表只保存当前元块组中块组的信息, 并在元块组内备份<br>- 目录存储格式<br>    - 目录也是文件, 也有 inode, inode 指向一个块, 块中保存各个文件信息, ext4_dir_entry 包括文件名和 inode, 默认按列表存<br>    - 第一项 &quot;.&quot; 当前目录; 第二项 &quot;..&quot; 上一级目录<br>    - 可添加索引, 加快文件查找<br>        - 需要改变目录块格式, 加入索引树: 用索引项 dx_entry 保存文件名哈希和块的映射, 若该块不是索引, 则里面保存 ext4_dir_enry 列表, 逐项查找<br>- 软连接&#47;硬链接的存储<br>    - 链接即文件的别名: ln -s 创建软链接; ln 创建硬链接<br>    - 硬链接与原始文件共用一个 inode, 但不能跨文件系统<br>    - 软链接是一个文件, 有自己的 inode, 该文件内容指向另一个文件, 可跨文件系统","like_count":54,"discussions":[{"author":{"id":1398824,"avatar":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","nickname":"达文西","note":"","ucode":"01C1063F23D634","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":332709,"discussion_content":"课代表","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607321516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1203563,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5d/6b/3d42593f.jpg","nickname":"聪少","note":"","ucode":"AB8301B752AC30","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304156,"discussion_content":"秀儿，直接看您这总结的即可了\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599482973,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":102116,"user_name":"二三子也","can_delete":false,"product_type":"c1","uid":1245787,"ip_address":"","ucode":"69C7D86583277D","user_header":"https://static001.geekbang.org/account/avatar/00/13/02/5b/ce326cfc.jpg","comment_is_top":false,"comment_ctime":1560139672,"is_pvip":false,"replies":[{"id":"36999","content":"赞","user_name":"作者回复","comment_id":102116,"uid":"1001590","ip_address":"","utype":1,"ctime":1560241068,"user_name_real":"刘超@网易云"}],"discussion_count":3,"race_medal":0,"score":"134704125848","product_id":100024701,"comment_content":"&gt;&gt;每个 extent 最大能表示 128MB 的数据。<br>疑问：ee_len大小为16bit，最大能表示2^16 - 1,如果块大小为4K，则一个extent能表示256MB<br>解惑：ee_len为一个16bit的无符号整数，但是其最高位在预分配特性中用来标识这个extent是否被初始化过了，所有ee_len中可用的位为15bit，最大可表示2^15个连续的块，如果块大小为4K，则一个extent最大能表示128MB","like_count":31,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":453268,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560241068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2035956,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ecruTrMgzvqIs5iaWVibZw4Rxic42ZXGTflvOFHiaZEkf32Su01gDCWT8tdIcEoybg0ibAYU2Q8f9bleL7Q37fKguxQ/132","nickname":"做一个积极的跳蚤","note":"","ucode":"BBE367BBCB6C28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297941,"discussion_content":"我看两遍教程 ，也没找到老师的教程，还是你解答了我的疑惑。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1597115126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1500498,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e5/52/35bc9c07.jpg","nickname":"Musisan","note":"","ucode":"A9A9FE56AABEBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2035956,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ecruTrMgzvqIs5iaWVibZw4Rxic42ZXGTflvOFHiaZEkf32Su01gDCWT8tdIcEoybg0ibAYU2Q8f9bleL7Q37fKguxQ/132","nickname":"做一个积极的跳蚤","note":"","ucode":"BBE367BBCB6C28","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304730,"discussion_content":"官方文档有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599649045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":297941,"ip_address":""},"score":304730,"extra":""}]}]},{"had_liked":false,"id":133678,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1568633888,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"104647848992","product_id":100024701,"comment_content":"别人的课程是一天能看好几节课，刘老师的课是好几天看一篇，哈哈","like_count":24,"discussions":[{"author":{"id":2035956,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/ecruTrMgzvqIs5iaWVibZw4Rxic42ZXGTflvOFHiaZEkf32Su01gDCWT8tdIcEoybg0ibAYU2Q8f9bleL7Q37fKguxQ/132","nickname":"做一个积极的跳蚤","note":"","ucode":"BBE367BBCB6C28","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":297942,"discussion_content":"我觉得是因为他很多地方只是提了一下，然后要自己去总结。本来也就是就是块钱的课程，不必要求给你讲的很清楚，再说操作系统很多地方估计他都没理解到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597115212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181661,"user_name":"罗辑思维","can_delete":false,"product_type":"c1","uid":1318941,"ip_address":"","ucode":"D257A06EDE928E","user_header":"https://static001.geekbang.org/account/avatar/00/14/20/1d/0c1a184c.jpg","comment_is_top":false,"comment_ctime":1582607953,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"78892019281","product_id":100024701,"comment_content":"[课后作业]<br>查看文件inode:stat filename<br>查看目录inode:stat dirname<br>查看磁盘inode:df -i","like_count":18},{"had_liked":false,"id":120880,"user_name":"江山未","can_delete":false,"product_type":"c1","uid":1090196,"ip_address":"","ucode":"5293DD9482717F","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/94/ae0a60d8.jpg","comment_is_top":false,"comment_ctime":1565008888,"is_pvip":false,"replies":[{"id":"46358","content":"块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块，哈哈哈","user_name":"作者回复","comment_id":120880,"uid":"1001590","ip_address":"","utype":1,"ctime":1566297020,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"61694551032","product_id":100024701,"comment_content":"看完已经不认识&quot;块&quot;这个字了","like_count":14,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461513,"discussion_content":"块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块块，哈哈哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566297020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2769183,"avatar":"","nickname":"Geek_ad1659","note":"","ucode":"00E216AC341A8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538463,"discussion_content":"老师你太狠了。。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639408364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113402,"user_name":"嘉木","can_delete":false,"product_type":"c1","uid":1317999,"ip_address":"","ucode":"AF4877693782C0","user_header":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","comment_is_top":false,"comment_ctime":1562996003,"is_pvip":false,"replies":[{"id":"46671","content":"对的","user_name":"作者回复","comment_id":113402,"uid":"1001590","ip_address":"","utype":1,"ctime":1566378221,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"40217701667","product_id":100024701,"comment_content":"每次ls的时候，文件夹大小都显示4096，原来是一个块的大小，4k<br>vim 文件夹   能看到文件夹下的文件列表","like_count":9,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458202,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566378221,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100025,"user_name":"W.jyao","can_delete":false,"product_type":"c1","uid":1422582,"ip_address":"","ucode":"C57B3A78B6A795","user_header":"https://static001.geekbang.org/account/avatar/00/15/b4/f6/735673f7.jpg","comment_is_top":false,"comment_ctime":1559395359,"is_pvip":false,"replies":[{"id":"49212","content":"是的是的","user_name":"作者回复","comment_id":100025,"uid":"1001590","ip_address":"","utype":1,"ctime":1567603471,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"23034231839","product_id":100024701,"comment_content":"每篇文章有点收获就可以","like_count":5,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452376,"discussion_content":"是的是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567603471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1514157,"avatar":"https://static001.geekbang.org/account/avatar/00/17/1a/ad/faf1bf19.jpg","nickname":"windcaller","note":"","ucode":"1CA3E849805770","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1648,"discussion_content":"随缘学习~\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562761298,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":133863,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1568685734,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18748554918","product_id":100024701,"comment_content":"还是不太理解 ext4 的 extends 特性，是文件的数据就存在 extends 的叶子结点中吗？extends 是如何提高文件读取效率的？还有请老师和各位同仁赐教。","like_count":4},{"had_liked":false,"id":99879,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1559351503,"is_pvip":false,"replies":[{"id":"49216","content":"这个不是的，这个是硬盘上的。","user_name":"作者回复","comment_id":99879,"uid":"1001590","ip_address":"","utype":1,"ctime":1567603600,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"18739220687","product_id":100024701,"comment_content":"老师，Exents的存储结构的树是红黑树吧","like_count":4,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452307,"discussion_content":"这个不是的，这个是硬盘上的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567603600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152903,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1574121801,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14459023689","product_id":100024701,"comment_content":"请问老师：<br>1, iops中的每次io操作最大读取的字节数一般是多少呢？<br>2, 如果一段连续存储的数据，是不是就可以通过一次io就读完呢？<br>3, 用户态又怎么保证保存数据时效率是最高的呢？","like_count":3},{"had_liked":false,"id":99723,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1559285464,"is_pvip":false,"replies":[{"id":"49220","content":"我当时看了，也是灵机一动","user_name":"作者回复","comment_id":99723,"uid":"1001590","ip_address":"","utype":1,"ctime":1567604124,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"14444187352","product_id":100024701,"comment_content":"前几天刚在虹桥关注到这个厕位导航系统, 结果今天就在课上看到了, 有趣有趣!!","like_count":3,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452238,"discussion_content":"我当时看了，也是灵机一动","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567604124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337832,"user_name":"河西","can_delete":false,"product_type":"c1","uid":1014075,"ip_address":"","ucode":"33EF181AF6AA18","user_header":"https://static001.geekbang.org/account/avatar/00/0f/79/3b/effc81b6.jpg","comment_is_top":false,"comment_ctime":1647084119,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"10237018711","product_id":100024701,"comment_content":"看两遍以上还蒙的朋友，看看这篇文章吧。非常清晰：https:&#47;&#47;www.cnblogs.com&#47;f-ck-need-u&#47;p&#47;7016077.html#auto_id_26","like_count":2},{"had_liked":false,"id":273922,"user_name":"Mark","can_delete":false,"product_type":"c1","uid":2324313,"ip_address":"","ucode":"686DE4235B97DF","user_header":"https://static001.geekbang.org/account/avatar/00/23/77/59/79afb654.jpg","comment_is_top":false,"comment_ctime":1610723975,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10200658567","product_id":100024701,"comment_content":"老师可以贴一些操作系统磁盘管理的基础概念方便理解，比如这个讲索引存储https:&#47;&#47;blog.csdn.net&#47;liushengxi_root&#47;article&#47;details&#47;80962979<br><br>还有这个讲超级块比较清楚一些，超级块就是可用块集，可以分级，和内存管理多级页表类似，用来分配空闲块https:&#47;&#47;blog.csdn.net&#47;dyw_666666&#47;article&#47;details&#47;107251134<br>我没找到合适的完整文档","like_count":2},{"had_liked":false,"id":248415,"user_name":"garlic","can_delete":false,"product_type":"c1","uid":1019579,"ip_address":"","ucode":"FEB147EDB5774E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8e/bb/c039dc11.jpg","comment_is_top":false,"comment_ctime":1600155712,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"10190090304","product_id":100024701,"comment_content":"针对ext2&#47;ext3&#47;ext4， 可以通过以下命令查看inode信息<br>1.  ls -i  文件名或目录名<br>2. sudo debugfs -R &quot;stat 文件名或目录名&quot; &#47;dev&#47;sdb2<br>3. stat 文件名或目录名","like_count":2},{"had_liked":false,"id":105228,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1560942216,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10150876808","product_id":100024701,"comment_content":"stat - display file or file system status","like_count":2},{"had_liked":false,"id":99992,"user_name":"刘強","can_delete":false,"product_type":"c1","uid":1035612,"ip_address":"","ucode":"B2E41BB894A727","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cd/5c/e09eac13.jpg","comment_is_top":false,"comment_ctime":1559381455,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10149316047","product_id":100024701,"comment_content":"为了让人能够保持吃饭、睡觉、思考、劳动这个简单的抽象，需要如此复杂的人体组织结构来支撑。","like_count":2},{"had_liked":false,"id":99632,"user_name":"Mr.差不多","can_delete":false,"product_type":"c1","uid":1437292,"ip_address":"","ucode":"946555FCAE710B","user_header":"https://static001.geekbang.org/account/avatar/00/15/ee/6c/246fa0d1.jpg","comment_is_top":false,"comment_ctime":1559270731,"is_pvip":false,"replies":[{"id":"49223","content":"创建的顺序也不一样呀。ls没有访问文件的Inode，仅仅访问了文件夹的内容","user_name":"作者回复","comment_id":99632,"uid":"1001590","ip_address":"","utype":1,"ctime":1567604248,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"10149205323","product_id":100024701,"comment_content":"老师，您好。相同的文件夹在不同Linux机器上用ls -U得到的顺序也不一样。这是什么原因呢？文件系统如何确定文件夹中不同文件iNode的存储顺序的？","like_count":2,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452197,"discussion_content":"创建的顺序也不一样呀。ls没有访问文件的Inode，仅仅访问了文件夹的内容","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567604248,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2961073,"avatar":"","nickname":"Geek_62e44e","note":"","ucode":"99A92B4233F53A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":570010,"discussion_content":"不对了。ls -l也访问了inode","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651636546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267056,"user_name":"达文西","can_delete":false,"product_type":"c1","uid":1398824,"ip_address":"","ucode":"01C1063F23D634","user_header":"https://static001.geekbang.org/account/avatar/00/15/58/28/c86340ca.jpg","comment_is_top":false,"comment_ctime":1607584147,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5902551443","product_id":100024701,"comment_content":"这一遍看了好几天总算看明白一点了。","like_count":1},{"had_liked":false,"id":148571,"user_name":"darren","can_delete":false,"product_type":"c1","uid":1151837,"ip_address":"","ucode":"4726076845920B","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/5d/91f1d849.jpg","comment_is_top":false,"comment_ctime":1573032241,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5867999537","product_id":100024701,"comment_content":"老师，有几个疑惑的地方，希望解答:1.是不是整个文件系统的根目录的inode是在一个固定的地方，每次查找一个绝对路径文件都是从根目录开始的。2.每个块组里面的inode是存放在inode位图块后面的一个list。这个list长度是固定的吗？因为如果不是固定的，那个inode位图某一位对应的就可能是数据块，而不是inode了，创建新的inode就可能覆盖数据。如果是固定的，那么如果inode少的时候是不是完成空间浪费？3.一个exents中的节点项是否可以指向另一个不同元块组中的节点4.目录里面使用索引的时候，如果不同的inode哈希值都不一样，岂不是会白白占用很多块来存储inode，每个块就一个inode列表，空间浪费极大？","like_count":1},{"had_liked":false,"id":116304,"user_name":"超超","can_delete":false,"product_type":"c1","uid":1476077,"ip_address":"","ucode":"D0751F29553481","user_header":"https://static001.geekbang.org/account/avatar/00/16/85/ed/905b052f.jpg","comment_is_top":false,"comment_ctime":1563839339,"is_pvip":false,"replies":[{"id":"46429","content":"赞","user_name":"作者回复","comment_id":116304,"uid":"1001590","ip_address":"","utype":1,"ctime":1566300021,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"5858806635","product_id":100024701,"comment_content":"df -i 文件","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459476,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566300021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":104444,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1560755934,"is_pvip":false,"replies":[{"id":"49029","content":"有的，缓存的时候好弄","user_name":"作者回复","comment_id":104444,"uid":"1001590","ip_address":"","utype":1,"ctime":1567581400,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"5855723230","product_id":100024701,"comment_content":"偷偷地问一句，4K对齐是不是就跟一个block默认大小是4K有关？","like_count":1,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454273,"discussion_content":"有的，缓存的时候好弄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567581400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360868,"user_name":"zixuan","can_delete":false,"product_type":"c1","uid":1131300,"ip_address":"广东","ucode":"C72920DD05B074","user_header":"https://static001.geekbang.org/account/avatar/00/11/43/24/3f9f7c70.jpg","comment_is_top":false,"comment_ctime":1666925673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666925673","product_id":100024701,"comment_content":"ln [参数][源文件或目录][目标文件或目录]<br>后面2个反了","like_count":0},{"had_liked":false,"id":353500,"user_name":"涛子","can_delete":false,"product_type":"c1","uid":2647122,"ip_address":"浙江","ucode":"8B9830B2B3C6FD","user_header":"https://static001.geekbang.org/account/avatar/00/28/64/52/e4536e9c.jpg","comment_is_top":false,"comment_ctime":1659503519,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659503519","product_id":100024701,"comment_content":"这一章非常棒！","like_count":0},{"had_liked":false,"id":345474,"user_name":"小鳄鱼","can_delete":false,"product_type":"c1","uid":1178888,"ip_address":"","ucode":"9C30CAFB41A263","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/08/c039f840.jpg","comment_is_top":false,"comment_ctime":1652317776,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652317776","product_id":100024701,"comment_content":"刷第三遍：block跟扇区是存储层面的概念，是用来管理空间的。inode是文件管理的概念，用来索引文件的。因为一个文件可能需要多个block才能完全存储下来","like_count":0},{"had_liked":false,"id":334101,"user_name":"凉凉","can_delete":false,"product_type":"c1","uid":1325256,"ip_address":"","ucode":"FCCF976E41EF71","user_header":"https://static001.geekbang.org/account/avatar/00/14/38/c8/972a5024.jpg","comment_is_top":false,"comment_ctime":1644745750,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1644745750","product_id":100024701,"comment_content":"如果采用“一个块的位图 + 一系列的块”，外加“一个块的 inode 的位图 + 一系列的 inode 的结构”。这句话不太理解啊， inode 不应该是跟文件绑定么，一个文件一个 inode，， 这里说一个块的 inode 是指什么？？每个块也有一个 inode ??","like_count":0},{"had_liked":false,"id":319414,"user_name":"全力以赴@","can_delete":false,"product_type":"c1","uid":1979876,"ip_address":"","ucode":"4F3D26318DCB19","user_header":"https://static001.geekbang.org/account/avatar/00/1e/35/e4/bb5ddaef.jpg","comment_is_top":false,"comment_ctime":1635784043,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635784043","product_id":100024701,"comment_content":"ext2&#47;ext3:<br>i_block[0-11]: 12 x 4k = 48k （&lt; 48k）<br>i_block[12]: 4k x 4k = 16M (&gt;48k &amp;&amp; &lt; （16M+48k） 需要用到)<br>i_block[13]:4k x 4k x 4k = 64G(&gt;（16M+48k） &amp;&amp; &lt; （64G+16M+48k） 一般也最多用到这一级)<br>ext4:<br>i_block:4 x 128M = 512M<br>depth = 1: 340 x 128 = 42.5G (一般也就用到这里，2个header + 344个extent)<br>对于大文件：<br>ext2&#47;ext3:每多读4K，需要一次或多次硬盘io？<br>ext4:每多读128M，需要一次或多次硬盘io？<br>","like_count":0},{"had_liked":false,"id":313981,"user_name":"WANGYISONG.","can_delete":false,"product_type":"c1","uid":2769042,"ip_address":"","ucode":"35E274F9CFA6ED","user_header":"https://static001.geekbang.org/account/avatar/00/2a/40/92/3fbd9e53.jpg","comment_is_top":false,"comment_ctime":1632789890,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632789890","product_id":100024701,"comment_content":"ext4完全放弃了原来的inode的可以三次间接寻址吗","like_count":0},{"had_liked":false,"id":313704,"user_name":"润豪","can_delete":false,"product_type":"c1","uid":1125122,"ip_address":"","ucode":"0946575790EFAF","user_header":"https://static001.geekbang.org/account/avatar/00/11/2b/02/7ef138a0.jpg","comment_is_top":false,"comment_ctime":1632624838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632624838","product_id":100024701,"comment_content":"间接块SIB指向的是连续的块吗?","like_count":0},{"had_liked":false,"id":313456,"user_name":"马振","can_delete":false,"product_type":"c1","uid":1136329,"ip_address":"","ucode":"94234F533219C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/56/c9/7b3cd3e0.jpg","comment_is_top":false,"comment_ctime":1632449774,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632449774","product_id":100024701,"comment_content":"块组描述符在每个块组里面都有一个吗","like_count":0},{"had_liked":false,"id":313453,"user_name":"马振","can_delete":false,"product_type":"c1","uid":1136329,"ip_address":"","ucode":"94234F533219C1","user_header":"https://static001.geekbang.org/account/avatar/00/11/56/c9/7b3cd3e0.jpg","comment_is_top":false,"comment_ctime":1632449186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1632449186","product_id":100024701,"comment_content":"是一个块组对应成一个文件吗？","like_count":0},{"had_liked":false,"id":307192,"user_name":"skye","can_delete":false,"product_type":"c1","uid":1027840,"ip_address":"","ucode":"C55C9F52C78A00","user_header":"https://static001.geekbang.org/account/avatar/00/0f/af/00/9b49f42b.jpg","comment_is_top":false,"comment_ctime":1628927932,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1628927932","product_id":100024701,"comment_content":"文件名和对应的哈希值是一一对应的吗？如果是，为啥可以提高查找速度？","like_count":0},{"had_liked":false,"id":301008,"user_name":"陈孝松","can_delete":false,"product_type":"c1","uid":1332101,"ip_address":"","ucode":"DE535607AEEF61","user_header":"https://static001.geekbang.org/account/avatar/00/14/53/85/845d73b9.jpg","comment_is_top":false,"comment_ctime":1625483018,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625483018","product_id":100024701,"comment_content":"最新的内核代码，open系统调用里使用的接口都已经和你给的示例代码不一样了","like_count":0},{"had_liked":false,"id":301002,"user_name":"陈孝松","can_delete":false,"product_type":"c1","uid":1332101,"ip_address":"","ucode":"DE535607AEEF61","user_header":"https://static001.geekbang.org/account/avatar/00/14/53/85/845d73b9.jpg","comment_is_top":false,"comment_ctime":1625481237,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1625481237","product_id":100024701,"comment_content":"老师，就算示例代码再简单，也应该给出使用的是内核哪个版本的代码","like_count":0,"discussions":[{"author":{"id":1180460,"avatar":"https://static001.geekbang.org/account/avatar/00/12/03/2c/33ba4d12.jpg","nickname":"山中无老虎 😪","note":"","ucode":"594247C3A976DE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382318,"discussion_content":"你前面的课程是不是没看，前面有说过基于4.13.16","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625531132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297849,"user_name":"程序员老王","can_delete":false,"product_type":"c1","uid":1025340,"ip_address":"","ucode":"28577A15F064CF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a5/3c/7c0d2e57.jpg","comment_is_top":false,"comment_ctime":1623811927,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1623811927","product_id":100024701,"comment_content":"stat","like_count":0},{"had_liked":false,"id":291359,"user_name":"懒猫","can_delete":false,"product_type":"c1","uid":2538092,"ip_address":"","ucode":"094F30C802C0F6","user_header":"","comment_is_top":false,"comment_ctime":1620226144,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1620226144","product_id":100024701,"comment_content":"老师，超级块中保存的是整个文件系统的描述信息，那么超级块更新的时候，是不是所有块组中的超级块都要一起更新？","like_count":0},{"had_liked":false,"id":274987,"user_name":"吃饭睡觉打酱油","can_delete":false,"product_type":"c1","uid":1071668,"ip_address":"","ucode":"95EC98C2B5045B","user_header":"https://static001.geekbang.org/account/avatar/00/10/5a/34/4cbadca6.jpg","comment_is_top":false,"comment_ctime":1611242654,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1611242654","product_id":100024701,"comment_content":"老师，链接这种文件，如果是引用了一个inode，那么这个链接文件的名称信息是存储在哪儿呢？","like_count":0,"discussions":[{"author":{"id":1385204,"avatar":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","nickname":"核桃","note":"","ucode":"7AB05270CBCCCB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371841,"discussion_content":"这个是看软硬链接吧，如果共用一套inode的话，那是在真正的文件所在的文件系统里面，如果不是的话，那么各自都会有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620014027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260574,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1605063809,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1605063809","product_id":100024701,"comment_content":"请教老师关于文件时间的两个问题：<br>1、文件或目录的创建时间用哪个字段表示？是ctime还是mtime?<br>2、ctime和mtime都是改变文件，那两个时间有什么区别吗？","like_count":0},{"had_liked":false,"id":237444,"user_name":"stackWarn","can_delete":false,"product_type":"c1","uid":1002005,"ip_address":"","ucode":"89672E452DEBA5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/15/106eaaa8.jpg","comment_is_top":false,"comment_ctime":1595832767,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1595832767","product_id":100024701,"comment_content":"为啥系统块大小是4096但是stat出来的blocks按照512b算呢，显示8个blocks？","like_count":0,"discussions":[{"author":{"id":1500498,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e5/52/35bc9c07.jpg","nickname":"Musisan","note":"","ucode":"A9A9FE56AABEBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304694,"discussion_content":"512字节那个是扇区的大小，4096是文件系统的一个存储块的大小，一个块=8*扇区","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599644223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":237391,"user_name":"ming","can_delete":false,"product_type":"c1","uid":2084718,"ip_address":"","ucode":"FF2C74CBA5E7BC","user_header":"https://static001.geekbang.org/account/avatar/00/1f/cf/6e/366a8247.jpg","comment_is_top":false,"comment_ctime":1595816611,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1595816611","product_id":100024701,"comment_content":"为什么每个extent是128MB呢？","like_count":0,"discussions":[{"author":{"id":1500498,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e5/52/35bc9c07.jpg","nickname":"Musisan","note":"","ucode":"A9A9FE56AABEBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304695,"discussion_content":"上面不是有人说了吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599644252,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235359,"user_name":"Geek_29c23f","can_delete":false,"product_type":"c1","uid":2062612,"ip_address":"","ucode":"921FD498B55D50","user_header":"https://static001.geekbang.org/account/avatar/00/1f/79/14/dc3e49d1.jpg","comment_is_top":false,"comment_ctime":1594981973,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1594981973","product_id":100024701,"comment_content":"超总，请教个硬链接的问题，一个inode对应一个文件，一个文件硬链接出另外一个文件。当删除一个文件的时候，inode 还有效？那inode什么时候无效？","like_count":0,"discussions":[{"author":{"id":1500498,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e5/52/35bc9c07.jpg","nickname":"Musisan","note":"","ucode":"A9A9FE56AABEBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304696,"discussion_content":"有效，除非这个inode没有对应任何文件才会被系统清理掉","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599644303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":225629,"user_name":"八台上","can_delete":false,"product_type":"c1","uid":1391143,"ip_address":"","ucode":"FB3D74B522C720","user_header":"https://static001.geekbang.org/account/avatar/00/15/3a/27/5d218272.jpg","comment_is_top":false,"comment_ctime":1591801822,"is_pvip":false,"replies":[{"id":"83469","content":"dentry不止表示目录项，后面讲内存中结构的时候会讲","user_name":"作者回复","comment_id":225629,"uid":"1001590","ip_address":"","utype":1,"ctime":1592186272,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1591801822","product_id":100024701,"comment_content":"目录文件和后边讲的目录项（dentry）的关系是什么呢？<br>我理解目录文件里边的内容就是 目录项列表（即目录文件下边的每一个普通文件和目录文件的目录项集合）","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497920,"discussion_content":"dentry不止表示目录项，后面讲内存中结构的时候会讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592186272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":195187,"user_name":"是Coding少女啊","can_delete":false,"product_type":"c1","uid":1915322,"ip_address":"","ucode":"BFBDCE002D0E86","user_header":"https://static001.geekbang.org/account/avatar/00/1d/39/ba/631a128a.jpg","comment_is_top":false,"comment_ctime":1585145290,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1585145290","product_id":100024701,"comment_content":"请教老师课程中提到的340项是如何计算出来的？","like_count":0,"discussions":[{"author":{"id":1145624,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/18/6e44e6e0.jpg","nickname":"恺撒之剑","note":"","ucode":"18F55D253647E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221228,"discussion_content":"(4096-12) / 12 = 340 \n【一块4096字节】\n【ext4_extend_header 12字节】\n【ext4_extend或者ext4_extend_idx 12字节】","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585991817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1915322,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/39/ba/631a128a.jpg","nickname":"是Coding少女啊","note":"","ucode":"BFBDCE002D0E86","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1145624,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/18/6e44e6e0.jpg","nickname":"恺撒之剑","note":"","ucode":"18F55D253647E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":221999,"discussion_content":"谢谢你呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586092402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":221228,"ip_address":""},"score":221999,"extra":""},{"author":{"id":1500498,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e5/52/35bc9c07.jpg","nickname":"Musisan","note":"","ucode":"A9A9FE56AABEBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1145624,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7b/18/6e44e6e0.jpg","nickname":"恺撒之剑","note":"","ucode":"18F55D253647E6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304698,"discussion_content":"这是约等于，不是全等","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599644371,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":221228,"ip_address":""},"score":304698,"extra":""}]}]},{"had_liked":false,"id":189993,"user_name":"Summer","can_delete":false,"product_type":"c1","uid":1793589,"ip_address":"","ucode":"DA2683248EA698","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epxppZUun6eqVDbbuyIzSZibcydqnDkdZ96NBDmNYHun484FUcdj3vdaJmuxia9wqEChMRkhj8IpfaA/132","comment_is_top":false,"comment_ctime":1584589926,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1584589926","product_id":100024701,"comment_content":"除了根节点，其他的节点都保存在一个块 4k 里面，4k 扣除 ext4_extent_header 的 12 个 byte，剩下的能够放 340 项，<br><br>这个340是如何计算出来的？","like_count":0,"discussions":[{"author":{"id":2769042,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/40/92/3fbd9e53.jpg","nickname":"WANGYISONG.","note":"","ucode":"35E274F9CFA6ED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403536,"discussion_content":"下取整","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634102764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1510683,"avatar":"https://static001.geekbang.org/account/avatar/00/17/0d/1b/854f3e8b.jpg","nickname":"KOBE","note":"","ucode":"A7E172ACD5778E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":318869,"discussion_content":"（4*1024-12  ）/12","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603870197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1655940,"avatar":"https://static001.geekbang.org/account/avatar/00/19/44/84/4da14994.jpg","nickname":"呆瓜","note":"","ucode":"C98C7B224D0640","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305654,"discussion_content":"(4KB * 1024 - 12 )/12 = 340","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600047940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":180944,"user_name":"李俊君","can_delete":false,"product_type":"c1","uid":1251408,"ip_address":"","ucode":"C2CDBBB97315E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/50/066aa4f8.jpg","comment_is_top":false,"comment_ctime":1582447370,"is_pvip":false,"replies":[{"id":"70208","content":"李俊君同学你好，跟超哥确认了下，这个就是Exents哈，你再看下～","user_name":"编辑回复","comment_id":180944,"uid":"1058895","ip_address":"","utype":2,"ctime":1582447454,"user_name_real":"王锦"}],"discussion_count":2,"race_medal":0,"score":"1582447370","product_id":100024701,"comment_content":"Exents 拼写错里吗？ 是不是该为 Extends ","like_count":0,"discussions":[{"author":{"id":1058895,"avatar":"https://static001.geekbang.org/account/avatar/00/10/28/4f/48e48553.jpg","nickname":"@阿锦啊","note":"","ucode":"3C5F00333D7174","race_medal":0,"user_type":4,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":484857,"discussion_content":"李俊君同学你好，跟超哥确认了下，这个就是Exents哈，你再看下～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582447454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1500498,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e5/52/35bc9c07.jpg","nickname":"Musisan","note":"","ucode":"A9A9FE56AABEBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304700,"discussion_content":"这个编辑是搞笑的么，去看看kernel官网，是extents，真是服了，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599644431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174758,"user_name":"程序水果宝","can_delete":false,"product_type":"c1","uid":1371633,"ip_address":"","ucode":"1700DDFE073A56","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqyicZYyW7ahaXgXUD8ZAS8x0t8jx5rYLhwbUCJiawRepKIZfsLdkxdQ9XQMo99c1UDibmNVfFnAqwPg/132","comment_is_top":false,"comment_ctime":1580372927,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1580372927","product_id":100024701,"comment_content":"除了根节点，其他的节点都保存在一个块 4k 里面，4k 扣除 ext4_extent_header 的 12 个 byte，剩下的能够放 340 项。求大佬指教这340是怎么算出来的？","like_count":0,"discussions":[{"author":{"id":1655940,"avatar":"https://static001.geekbang.org/account/avatar/00/19/44/84/4da14994.jpg","nickname":"呆瓜","note":"","ucode":"C98C7B224D0640","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305655,"discussion_content":"(4KB * 1024 - 12 )/12 = 340","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600047963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1683400,"avatar":"https://static001.geekbang.org/account/avatar/00/19/af/c8/2a6316cd.jpg","nickname":"K.I.S.S","note":"","ucode":"AF185288E89A58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":202109,"discussion_content":"4K= 4096Byte, 4096/12 - 1 = 340, header, idx, extent都是12byte","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1583860456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":166746,"user_name":"Hector","can_delete":false,"product_type":"c1","uid":1496889,"ip_address":"","ucode":"110CAF87ADDC01","user_header":"https://static001.geekbang.org/account/avatar/00/16/d7/39/6698b6a9.jpg","comment_is_top":false,"comment_ctime":1577585377,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577585377","product_id":100024701,"comment_content":"git的底层文件设计，是不是也借鉴了ex4的inode和块","like_count":0},{"had_liked":false,"id":166534,"user_name":"Paul Shan","can_delete":false,"product_type":"c1","uid":1593140,"ip_address":"","ucode":"32D99989028284","user_header":"","comment_is_top":false,"comment_ctime":1577487658,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577487658","product_id":100024701,"comment_content":"请问老师，文件系统的格式那一部分配图中关于Meta Block Group：<br>Block Group 2 没有块位图<br>Block Group 63没有超级块，是否刻意这样，多谢！<br>","like_count":0},{"had_liked":false,"id":161960,"user_name":"Doubleuhy","can_delete":false,"product_type":"c1","uid":1259681,"ip_address":"","ucode":"33004DBF105277","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/66KHl74Hghp6pb2FLKoLbhmz2hnA9iasxxJl0uN88RBicI06y8Fkiatuu6YFEwFuR94ia02dmmDqYnnfugka32EyCQ/132","comment_is_top":false,"comment_ctime":1576415313,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1576415313","product_id":100024701,"comment_content":"查看了inode结构  里面没有文件名字字段哇","like_count":0,"discussions":[{"author":{"id":1500498,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e5/52/35bc9c07.jpg","nickname":"Musisan","note":"","ucode":"A9A9FE56AABEBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304701,"discussion_content":"文件名是可变化的，inode为了抽象层的设计，里面没有文件名","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599644482,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":151936,"user_name":"extraterrestrial！！","can_delete":false,"product_type":"c1","uid":1017987,"ip_address":"","ucode":"74AE07CA68F6B6","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/GDYkD2X7pXSKUSaUFC8u3TBPaakaibnOBV2NYDc2TNfb8Su9icFMwSod6iaQX5iaGU2gT6xkPuhXeWvY8KaVEZAYzg/132","comment_is_top":false,"comment_ctime":1573817917,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1573817917","product_id":100024701,"comment_content":"硬链接既然inode是相同的，那么创建硬链接文件系统做了啥工作呢？","like_count":0,"discussions":[{"author":{"id":1500498,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e5/52/35bc9c07.jpg","nickname":"Musisan","note":"","ucode":"A9A9FE56AABEBA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304702,"discussion_content":"仅仅是在对应的目录下面，加了一行记录，也就是文件名与inode的那一行，只不过inode是相同的，文件名不同的而已","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599644537,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":148585,"user_name":"darren","can_delete":false,"product_type":"c1","uid":1151837,"ip_address":"","ucode":"4726076845920B","user_header":"https://static001.geekbang.org/account/avatar/00/11/93/5d/91f1d849.jpg","comment_is_top":false,"comment_ctime":1573033990,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1573033990","product_id":100024701,"comment_content":"老师，我还有个问题:不管软链接还是硬链接，对于跨磁盘是怎么存储的？会存储硬盘相关信息吗？比如我的服务器有三块硬盘1.2.3，每块硬盘一个区，系统在硬盘1里面。现在我有一个软链接和一个硬链接由硬盘1里面的文件指向硬盘2里面的文件。现由于主板硬盘2的插槽损坏，将硬盘3取下不用了，将硬盘2移动到原硬盘3对应的插槽上。原来的两个链接还有效吗？系统是怎么处理这类情况的。","like_count":0},{"had_liked":false,"id":142626,"user_name":"路道有贵","can_delete":false,"product_type":"c1","uid":1073418,"ip_address":"","ucode":"9D9D081D9CAF2A","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/0a/205a0c54.jpg","comment_is_top":false,"comment_ctime":1571418720,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571418720","product_id":100024701,"comment_content":"上级目录应该是2个点吧？..","like_count":0},{"had_liked":false,"id":138538,"user_name":"坤","can_delete":false,"product_type":"c1","uid":1010922,"ip_address":"","ucode":"74E6838226A405","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6c/ea/ce9854a5.jpg","comment_is_top":false,"comment_ctime":1570325746,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1570325746","product_id":100024701,"comment_content":"inode中并不包含文件名。","like_count":0},{"had_liked":false,"id":133573,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1568611651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568611651","product_id":100024701,"comment_content":"最近要面试，来温习一遍，收获很大。极客时间的专栏，满满看，多思考，都能有额外的收获。","like_count":0},{"had_liked":false,"id":128633,"user_name":"赵国辉","can_delete":false,"product_type":"c1","uid":1166280,"ip_address":"","ucode":"390196BD3082B8","user_header":"https://static001.geekbang.org/account/avatar/00/11/cb/c8/ff9f3ffb.jpg","comment_is_top":false,"comment_ctime":1566917726,"is_pvip":false,"replies":[{"id":"48760","content":"在同一个块组中","user_name":"作者回复","comment_id":128633,"uid":"1001590","ip_address":"","utype":1,"ctime":1567494579,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"1566917726","product_id":100024701,"comment_content":"老是，麻烦解惑一下，会出现一个文件的inode在一个块组中，而其数据块在另一个块组中吗？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465030,"discussion_content":"在同一个块组中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567494579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1609871,"avatar":"https://static001.geekbang.org/account/avatar/00/18/90/8f/9c691a5f.jpg","nickname":"奔跑的码仔","note":"","ucode":"AB3B02B07B8B8C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":7775,"discussion_content":"同一个文件的inode和数据块必须在同一个块组吗？一个块组能最大表示128M字节数据，那如何存储大于128M的文件呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567670887,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105933,"user_name":"HF","can_delete":false,"product_type":"c1","uid":1060150,"ip_address":"","ucode":"EA504931C0B932","user_header":"https://static001.geekbang.org/account/avatar/00/10/2d/36/d3c8d272.jpg","comment_is_top":false,"comment_ctime":1561106138,"is_pvip":false,"replies":[{"id":"48878","content":"是的","user_name":"作者回复","comment_id":105933,"uid":"1001590","ip_address":"","utype":1,"ctime":1567504126,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1561106138","product_id":100024701,"comment_content":"老师，系统启动时是先挂载到内存等磁盘驱动程序完成后，再把根目录挂载到磁盘嘛？初始挂载得目录是什么时候生成的？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454877,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567504126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":105622,"user_name":"木 易","can_delete":false,"product_type":"c1","uid":1033212,"ip_address":"","ucode":"5C3BBB5958A4B5","user_header":"","comment_is_top":false,"comment_ctime":1561043585,"is_pvip":false,"replies":[{"id":"48888","content":"是的，没有","user_name":"作者回复","comment_id":105622,"uid":"1001590","ip_address":"","utype":1,"ctime":1567504546,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1561043585","product_id":100024701,"comment_content":"老师，之前的机械硬盘存储架构和原理，跟现在的ssd硬盘存储的原理，ssd硬盘没有磁头、盘片、磁道这些物理概念了吧，他们之前的技术演进，可以谈谈吗","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":454743,"discussion_content":"是的，没有","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567504546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":101448,"user_name":"尚墨","can_delete":false,"product_type":"c1","uid":1300116,"ip_address":"","ucode":"114EE139168CB9","user_header":"http://thirdwx.qlogo.cn/mmopen/uqaRIfRCAhJ6t1z92XYEzXpqpgpS1veBc5DNGhfRHFsHgE19qHqG0cevcIJRRsjIKxsSEcIPVP1nOkaVKLibb2xFq04A4KMY3/132","comment_is_top":false,"comment_ctime":1559810785,"is_pvip":false,"replies":[{"id":"37030","content":"网上很多资料可以查，我也没有研究过","user_name":"作者回复","comment_id":101448,"uid":"1001590","ip_address":"","utype":1,"ctime":1560255398,"user_name_real":"刘超@网易云"}],"discussion_count":1,"race_medal":0,"score":"1559810785","product_id":100024701,"comment_content":"老师能扩展一下内容，大概讲下 xfs 文件系统吗？","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452967,"discussion_content":"网上很多资料可以查，我也没有研究过","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1560255398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100840,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1559651337,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559651337","product_id":100024701,"comment_content":"果然很复杂，感谢老师","like_count":0},{"had_liked":false,"id":100642,"user_name":"Geeker1992","can_delete":false,"product_type":"c1","uid":1003475,"ip_address":"","ucode":"459F3CEB0491A1","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4f/d3/897fc6df.jpg","comment_is_top":false,"comment_ctime":1559609960,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559609960","product_id":100024701,"comment_content":"stat 文件名&#47;文件夹名<br>查看文件或者文件夹的 inode 信息","like_count":0},{"had_liked":false,"id":100376,"user_name":"Ethan Liu","can_delete":false,"product_type":"c1","uid":1070043,"ip_address":"","ucode":"231F944F7CD56A","user_header":"https://static001.geekbang.org/account/avatar/00/10/53/db/858337e3.jpg","comment_is_top":false,"comment_ctime":1559540913,"is_pvip":true,"replies":[{"id":"49200","content":"大小和原来的不一样了，看一下一个extent占用的字节数","user_name":"作者回复","comment_id":100376,"uid":"1001590","ip_address":"","utype":1,"ctime":1567602912,"user_name_real":"刘超@网易云"}],"discussion_count":2,"race_medal":0,"score":"1559540913","product_id":100024701,"comment_content":"老师，inode里面的i_block不是有15项吗，为什么说超过4项ext4_extent就要分裂成树呢？<br>","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452524,"discussion_content":"大小和原来的不一样了，看一下一个extent占用的字节数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567602912,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1317999,"avatar":"https://static001.geekbang.org/account/avatar/00/14/1c/6f/3ea2a599.jpg","nickname":"嘉木","note":"","ucode":"AF4877693782C0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":1849,"discussion_content":"一个i_block32位，4字节，一个ext4_extent占12字节，i_block[15]只能放15*4/12=5个ext4_extent，第一个是头结点，后面4项放数据节点，超过4就要分裂了啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1562995513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100328,"user_name":"烈日融雪","can_delete":false,"product_type":"c1","uid":1131925,"ip_address":"","ucode":"E462E30FB0AFC0","user_header":"https://static001.geekbang.org/account/avatar/00/11/45/95/968fd89f.jpg","comment_is_top":false,"comment_ctime":1559529449,"is_pvip":false,"replies":[{"id":"49201","content":"应该是io，可能是编辑器的问题","user_name":"作者回复","user_name_real":"刘超@网易云","uid":"1001590","ctime":1567602946,"ip_address":"","comment_id":100328,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1559529449","product_id":100024701,"comment_content":"从这个数据结构中，我们可以看出，inode 里面有文件的读写...<br>这里面的几个字段  都是_lo 而文章里好像写成了 _io ","like_count":0,"discussions":[{"author":{"id":1001590,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/48/76/0c7d4d23.jpg","nickname":"刘超","note":"","ucode":"196BF3F499E8FE","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":452502,"discussion_content":"应该是io，可能是编辑器的问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567602946,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":100111,"user_name":"Sharry","can_delete":false,"product_type":"c1","uid":1239293,"ip_address":"","ucode":"045DDB864659F6","user_header":"https://static001.geekbang.org/account/avatar/00/12/e8/fd/035f4c94.jpg","comment_is_top":false,"comment_ctime":1559446586,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1559446586","product_id":100024701,"comment_content":"**文件在文件系统中使用 inode 来描述, 每个 inode 中都含有一些列的数据块**<br>- 对于普通文件: 数据块中保存的是文件数据<br>- 对于文件夹: 数据块中保存的是子文件的文件项<br>   - 为了加快文件夹中文件的搜索速度, Linux 通过索引模式, 可以使用文件名的散列快速定位到文件的位置<br><br>**软链接与硬链接**<br>- 软链接: 在链接目标文件之前, 会创建自己的 inode 和数据块, 然后其数据块中的内容指向目标文件<br>  - 可跨系统链接<br>- 硬链接: 即为一个文件创建了一个别名, 这个别名会指向真实文件的 inode 结构体<br>  - 因为直接指向源文件结构体, 因此他无法跨文件系统进行链接<br><br>**文件的组织**<br>- Linux 中将磁盘的块分成一个个的块组, 每个块组由一个块组的位图和对应的数据块描述, 最大可描述 128M 的空间<br>- 每个块组有其对应的块组描述符, 描述符之间形成一个链表<br>- 为了更好地管理块组, Linux 通过元块组来描述块组<br>  - 一个元块组中由 64 个块组组成, 其中的块组描述符一共 64 项, 分别在 0, 1, 63 的位置的块组上备份三份<br>- 整个文件系统通过超级块来描述","like_count":0}]}