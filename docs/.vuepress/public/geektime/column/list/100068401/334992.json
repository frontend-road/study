{"id":334992,"title":"10 | 变量声明与赋值分离：普通的变量声明，怎么也有坏味道？","content":"<p>你好，我是郑晔。</p><p>我们已经用连续几讲的篇幅在挑战很多人固有的编程习惯了，从各种控制语句，到 getter 和 setter，甚至连直接使用基本类型都已经成了坏味道，这一讲，我们再来挑战一个很多人习以为常的编程习惯：变量的声明与赋值。</p><p>我估计有人已经露出了惊讶的表情。你可能会想：要说前面几种坏味道可能确实是编码没有做好，该封装没封装，该返回没返回，一个变量声明怎么还会有坏味道啊？难道是变量声明都不让用了吗？</p><p>诚然，变量声明是写程序不可或缺的一部分，我并不打算让你戒掉变量声明，严格地说，我们是要把变量初始化这件事做好。</p><h2>变量的初始化</h2><p>我们先来看一段代码：</p><pre><code>EpubStatus status = null;\nCreateEpubResponse response = createEpub(request);\nif (response.getCode() == 201) {\n  status = EpubStatus.CREATED;\n} else {\n  status = EpubStatus.TO_CREATE;\n}\n</code></pre><p>这段代码在做的事情是向另外一个服务发请求创建 EPUB（一种电子书格式），如果创建成功，返回值是 HTTP 的 201，也就表示创建成功，然后就把状态置为 CREATED；而如果没有成功，则把状态置为 TO_CREATE。后面对于 TO_CREATE 状态的作品，还需要再次尝试创建。</p><p>这里，我们暂且把是否要写 else 放下，这是我们在前面已经讨论过的一个坏味道。</p><p>我们这次的重点在 status 这个变量上，虽然 status 这个变量在声明的时候，就赋上了一个null 值，但实际上，这个值并没有起到任何作用，因为status 的变量值，其实是在经过后续处理之后，才有了真正的值。换言之，从语义上说，第一行的变量初始化其实是没有用的，这是一次假的初始化。</p><!-- [[[read_end]]] --><p>按照我们通常的理解，一个变量的初始化是分成了声明和赋值两个部分，而我这里要说的就是，<strong>变量初始化最好一次性完成</strong>。这段代码里的变量赋值是在声明很久之后才完成的，也就是说，变量初始化没有一次性完成。</p><p><strong>这种代码真正的问题就是不清晰，变量初始化与业务处理混在在一起</strong>。通常来说，这种代码后面紧接着就是一大堆更复杂的业务处理。当代码混在一起的时候，我们必须小心翼翼地从一堆业务逻辑里抽丝剥茧，才能把逻辑理清，知道变量到底是怎么初始化的。很多代码难读，一个重要的原因就是把不同层面的代码混在了一起。</p><p>这种代码在实际的代码库中出现的频率非常高，只不过，它会以各种变形的方式呈现出来。有的变量甚至是在相隔很远的地方才做了真正的赋值，完成了初始化，这中间已经夹杂了很多的业务代码在其中，进一步增加了理解的复杂度。</p><p>所以，我们编程时要有一个基本原则：<strong>变量一次性完成初始化</strong>。</p><p>有了这个理解，我们可以这样来修改上面这段代码：</p><pre><code>final CreateEpubResponse response = createEpub(request);\nfinal EpubStatus status = toEpubStatus(response);\n\n\nprivate EpubStatus toEpubStatus(final CreateEpubResponse response) {\n  if (response.getCode() == 201) {\n    return EpubStatus.CREATED;\n  }\n\n\n  return EpubStatus.TO_CREATE;\n}\n</code></pre><p>在这段改进的代码中，我们提取出了一个函数，将 response 转成对应的内部的 EPUB状态。</p><p>其实，很多人之所以这样写代码，一个重要的原因是很多人的编程习惯是从 C 语言来的。C 语言在早期的版本中，一个函数用到的变量必须在整个函数的一开始就声明出来。</p><p>在 C 语言诞生的年代，当时计算机能力有限内存小，编译器技术也处于刚刚起步的阶段，把变量放在前面声明出来，有助于减小编译器编写的难度。到了 C++产生的年代，这个限制就逐步放开了，所以，C++程序是支持变量随用随声明的。对于今天的大多数程序设计语言来说，这个限制早就不存在了，但<strong>很多人的编程习惯却留在了那个古老的年代</strong>。</p><p>还有一点不知道你注意到了没有，在新的变量声明中，我加上了 final，在 Java 的语义中，一个变量加上了 final，也就意味着这个变量不能再次赋值。对，我们需要的正是这样的限制。</p><p>上一讲，我们讲了可变的数据会带来怎样的影响，其中的一个结论是，尽可能编写不变的代码。这里其实是这个话题的延伸，<strong>尽可能使用不变的量</strong>。</p><p>如果我们能够按照使用场景做一个区分，把变量初始化与业务处理分开，你会发现，在很多情况下，变量只在初始化完成之后赋值，就足以满足我们的需求了，在一段代码中，需要使用可变量的场景并不多。</p><p>这个原则其实可以推广一下，<strong>在能够使用 final 的地方尽量使用 final</strong>，限制变量的赋值。</p><p>这里说的“能够使用”，不仅包括普通的变量声明，还包含参数声明，还有类字段的声明，甚至还可以包括类和方法的声明。当然，我们这里改进的考量主要还是在变量上。你可以尝试着调整自己现有的代码，给变量声明都加上 final，你就会发现许多值得改进的代码。</p><p>对于 Java 程序员来说，还有一个特殊的场景，就是异常处理的场景，强迫你把变量的声明与初始化分开，就像下面这段代码：</p><pre><code>InputStream is = null;\n\n\ntry {\n  is = new FileInputStream(...);\n  ...\n} catch (IOException e) {\n  ...\n} finally {\n  if (is != null) {\n    is.close(); \n  }\n}\n</code></pre><p>之所以要把 InputStream 变量 is 单独声明，是为了能够在 finanlly 块里面访问到。其实，这段代码写成这样，一个重要的原因是 Java 早期的版本只能写成这样，而如果采用 Java 7 之后的版本，采用 try-with-resource 的写法，代码就可以更简洁了：</p><pre><code>try (InputStream is = new FileInputStream(...)) {\n  ...\n}\n</code></pre><p>这样一来，InputStream 变量的初始化就一次性完成了，我们的原则就统一了，不需要在这种特殊的场景下纠结了。</p><h2>集合初始化</h2><p>接下来，我们在来看一段代码：</p><pre><code>List&lt;Permission&gt; permissions = new ArrayList&lt;&gt;();\npermissions.add(Permission.BOOK_READ);\npermissions.add(Permission.BOOK_WRITE);\ncheck.grantTo(Role.AUTHOR, permissions);\n</code></pre><p>这是一段给作者赋予作品读写权限的代码，逻辑比较简单，但这段代码中也存在一些坏味道。我们把注意力放在 permissions 这个集合上。之所以要声明这样一个 List，是因为 grantTo 方法要用到一个 List 作为参数。</p><p>我们来看这个 List 是怎样生成的。这里先给 permission 初始化成了一个 ArrayList，这个时候，permissions 虽然存在了，但我们并不会把它传给 grantTo 方法，它还不能直接使用，因为它还缺少必要的信息。然后，我们将 BOOK_READ 和 BOOK_WRITE 两个枚举对象添加了进去，这样，这个 permissions 对象才是我们真正需要的那个对象。</p><p>这种代码是非常常见的，声明一个集合，然后，调用一堆添加的方法，将所需的对象添加进去。</p><p>我们不难发现，其实 permissions 对象一开始的变量声明，并没有完成这个集合真正的初始化，只有当集合所需的对象添加完毕之后，这个集合才是它应有的样子。换言之，只有添加了元素的集合才是我们需要的。</p><p>这样解释这段代码，你是不是就发现了，这和我们前面所说的变量先声明后赋值，本质上是一回事，都是从一个变量的声明到初始化成一个可用的状态，中间隔了太远的距离。</p><p>之所以很多人习惯这么写，一个原因就是在早期的 Java 版本中，没有提供很好的集合初始化的方法。像这种代码，也是很多动态语言的支持者调侃 Java 啰嗦的一个靶子。</p><p>现如今，Java在这方面早已经改进了许多，各种程序库已经提供了一步到位的写法，我们先来看看 Java 9 之后的写法：</p><pre><code>List&lt;Permission&gt; permissions = List.of(\n  Permission.BOOK_READ, \n  Permission.BOOK_WRITE\n);\ncheck.grantTo(Role.AUTHOR, permissions);\n</code></pre><p>如果你的项目还没有升级 Java 9 之后的版本，使用 Guava（Google 提供的一个 Java 库）也是可以做成类似的效果：</p><pre><code>List&lt;Permission&gt; permissions = ImmutableList.of(\n  Permission.BOOK_READ, \n  Permission.BOOK_WRITE\n);\ncheck.grantTo(Role.AUTHOR, permissions);\n</code></pre><p>经过改进，这段代码是不是看上去就清爽多了！</p><p>不知道你注意到没有，第二段代码里的 List 用的是一个 ImmutableList，也就是一个不可变的 List，实际上，你查看第一段代码的实现就会发现，它也是一个不变的 List。这是什么意思呢？也就是说，这个 List 一旦创建好了，就是不能修改了，对应的实现就是各种添加、删除之类的方法全部都禁用了。</p><p>初看起来，这是限制了我们的能力，但我们对比一下代码就不难发现，很多时候，我们对于一个集合的使用，除了声明时添加元素之外，后续就只是把它当作一个只读的集合。所以，在很多情况下，一个不变集合对我们来说就够用了。</p><p>其实，这段代码，相对来说还是比较清晰的，稍微再复杂一些的，集合的声明和添加元素之间隔了很远，不注意的话，甚至不觉得它们是在完成一次初始化。</p><pre><code>private static Map&lt;Locale, String&gt; CODE_MAPPING = new HashMap&lt;&gt;();\n...\n\n\nstatic {\n  CODE_MAPPING.put(LOCALE.ENGLISH, &quot;EN&quot;);\n  CODE_MAPPING.put(LOCALE.CHINESE, &quot;CH&quot;);\n}\n</code></pre><p>这是一个传输时的映射方案，将不同的语言版本映射为不同的代码。这里 CODE_MAPPING 是一个类的 static 变量，而这个类的声明里还有其它一些变量。所以，隔了很远之后，才有一个 static 块向这个集合添加元素。</p><p>如果我们能够用一次性声明的方式，这个单独的 static 块就是不需要的：</p><pre><code>private static Map&lt;Locale, String&gt; CODE_MAPPING = ImmutableMap.of(\n  LOCALE.ENGLISH, &quot;EN&quot;,\n  LOCALE.CHINESE, &quot;CH&quot;\n);\n</code></pre><p>对比我们改造前后的代码，二者之间还有一个更关键的区别：前面的代码是命令式的代码，而后面的代码是声明式的代码。</p><p>命令式的代码，就是告诉你“怎么做”的代码，就像改造前的代码，声明一个集合，然后添加一个元素，再添加一个元素。而声明式的代码，是告诉你“做什么”的代码，改造后就是，我要一个包含了这两个元素的集合。</p><p>我在《软件设计之美》专栏中讲 <a href=\"https://time.geekbang.org/column/article/248638\">DSL</a> 时，曾经讲过二者的区别，声明式的代码体现的意图，是更高层面的抽象，把意图和实现分开，从某种意义上来说，也是一种分离关注点。</p><p>所以，<strong>用声明式的标准来看代码，是一个发现代码坏味道的重要参考</strong>。</p><p>回想一下今天讲的坏味道，无论是变量的声明与赋值分离，还是初始化一个集合的分步骤，其实反映的都是不同时代编程风格的烙印。变量的声明是 C 早期的编程风格，异常处理是 Java 早期的风格，而集合声明也体现出不同版本 Java 的影子。</p><p><strong>我们学习编程不仅仅是要学习实现功能，编程的风格也要与时俱进。</strong></p><h2>总结时刻</h2><p>今天我们继续挑战着很多人习惯的编程方式，讲了变量初始化带来的问题。变量的初始化包含变量的声明和赋值两个部分，一个编程的原则是“变量要一次性完成初始化”。</p><p>这就衍生出一个坏味道：变量的声明和赋值是分离的。二者分离带来的问题就是，把赋值的过程与业务处理混杂在一起。发现变量声明与赋值分离一个做法就是在声明前面加上 final，用“不变性”约束代码。</p><p>我们还谈到了集合的初始化，传统的集合初始化方式是命令式的，而今天我们完全可以用声明式的方式进行集合的初始化，让初始化的过程一次性完成。再进一步，以声明式的标准来看代码，会帮助我们发现许多的坏味道。</p><p>如果今天的内容你只能记住一件事，那请记住：<strong>一次性完成变量的初始化</strong>。</p><p><img src=\"https://static001.geekbang.org/resource/image/0e/3d/0e2e427e6f37a99877d105a05573843d.jpg?wh=2284*3156\" alt=\"\"></p><h2>思考题</h2><p>变量初始化可能是一个很多人都没有注意过的坏味道，你可以回去翻翻自己的代码，用这个标准衡量一下，你能发现什么问题吗？欢迎在留言区分享你的发现。</p><p><span class=\"reference\">参考资料：</span></p><p><a href=\"https://time.geekbang.org/column/article/248638\">DSL：你也可以设计一门自己的语言</a></p><p><a href=\"https://time.geekbang.org/column/article/325594\"><img src=\"https://static001.geekbang.org/resource/image/5d/6b/5d6600a2769c6924d732d80eb365206b.jpg?wh=1142*867\" alt=\"\"></a></p>","neighbors":{"left":{"article_title":"09 | 可变的数据：不要让你的代码“失控”","id":334390},"right":{"article_title":"11 | 依赖混乱：你可能还没发现问题，代码就已经无法挽救了","id":336166}},"comments":[{"had_liked":false,"id":274815,"user_name":"桃子-夏勇杰","can_delete":false,"product_type":"c1","uid":1158436,"ip_address":"","ucode":"5D5F38AABA980F","user_header":"https://static001.geekbang.org/account/avatar/00/11/ad/24/c6b763b4.jpg","comment_is_top":false,"comment_ctime":1611186924,"is_pvip":true,"replies":[{"id":"99718","content":"这个比喻，我很欣慰。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611192979,"ip_address":"","comment_id":274815,"utype":1}],"discussion_count":2,"race_medal":0,"score":"117575303916","product_id":100068401,"comment_content":"有一种当年读Effective系列从书的感觉","like_count":27,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514134,"discussion_content":"这个比喻，我很欣慰。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611192979,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536456,"discussion_content":"这个系列这么神奇？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638787761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274856,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1611196689,"is_pvip":true,"replies":[{"id":"99732","content":"恭喜你，又进阶了。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611209419,"ip_address":"","comment_id":274856,"utype":1}],"discussion_count":1,"race_medal":0,"score":"61740738833","product_id":100068401,"comment_content":"刷新了认知，给我植入了&quot;声明式”和&quot;做什么”两个思想","like_count":14,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514145,"discussion_content":"恭喜你，又进阶了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611209419,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274868,"user_name":"huaweichen","can_delete":false,"product_type":"c1","uid":1249907,"ip_address":"","ucode":"974917DE2AE92E","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/73/2183839d.jpg","comment_is_top":false,"comment_ctime":1611200488,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31675971560","product_id":100068401,"comment_content":"非常喜欢作者有理、有据、有例的分析。非常好。","like_count":7},{"had_liked":false,"id":284626,"user_name":"Chen","can_delete":false,"product_type":"c1","uid":2529422,"ip_address":"","ucode":"9A7EF7CDB7CAF0","user_header":"https://static001.geekbang.org/account/avatar/00/26/98/8e/18098233.jpg","comment_is_top":false,"comment_ctime":1616393568,"is_pvip":true,"replies":[{"id":"110748","content":"嗯，不同版本的JDK","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1628319539,"ip_address":"","comment_id":284626,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23091230048","product_id":100068401,"comment_content":"<br>List&lt;Permission&gt; permissions = List.of(<br>  Permission.BOOK_READ, <br>  Permission.BOOK_WRITE<br>);<br>check.grantTo(Role.AUTHOR, permissions);<br>使用Arrays.asList 方式同样可以达到相同的效果","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517409,"discussion_content":"嗯，不同版本的JDK","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628319539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274905,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1611215255,"is_pvip":false,"replies":[{"id":"99790","content":"学到一招，就可以用起来。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611301517,"ip_address":"","comment_id":274905,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23086051735","product_id":100068401,"comment_content":"说来惭愧，项目中从来没有一个同事用过final。<br>学到了用声明式的标准来看代码","like_count":5,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514154,"discussion_content":"学到一招，就可以用起来。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611301517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274867,"user_name":"huaweichen","can_delete":false,"product_type":"c1","uid":1249907,"ip_address":"","ucode":"974917DE2AE92E","user_header":"https://static001.geekbang.org/account/avatar/00/13/12/73/2183839d.jpg","comment_is_top":false,"comment_ctime":1611200446,"is_pvip":false,"replies":[{"id":"99731","content":"没白学就好","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611209396,"ip_address":"","comment_id":274867,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18791069630","product_id":100068401,"comment_content":"看了这一篇，觉得现存的代码，好多地方要改。。。","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514149,"discussion_content":"没白学就好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611209396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274843,"user_name":"adang","can_delete":false,"product_type":"c1","uid":1143712,"ip_address":"","ucode":"0F2ECF8B92D46B","user_header":"https://static001.geekbang.org/account/avatar/00/11/73/a0/7dcc9212.jpg","comment_is_top":false,"comment_ctime":1611194503,"is_pvip":false,"replies":[{"id":"99788","content":"可以是可以，就是通常来说，三目运算符写出来的代码不算清晰。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611301433,"ip_address":"","comment_id":274843,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18791063687","product_id":100068401,"comment_content":"第一个例子，会尽量用三目运算符的写法，类似于这样<br>```<br>CreateEpubResponse response = createEpub(request);<br>EpubStatus status = (response.getCode() == 201) ? EpubStatus.CREATED : EpubStatus.TO_CREATE;<br>```<br>老师，不知道这样算是取巧吗？","like_count":4,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514140,"discussion_content":"可以是可以，就是通常来说，三目运算符写出来的代码不算清晰。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611301433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1633308,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIDFo5d0p9V2D2XyPjJYU3CcFROe0YeBMN8BTelJ4NwTznb5ezqibUr1paKL68CKQwiboVOtrcZHPIg/132","nickname":"子铭","note":"","ucode":"EE4447076A4DB2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555993,"discussion_content":"我个人认为三目运算符对于程序的拓展也不好，就如郑老师所列举的例子，再有一个中间状态的判断，三目运算符对于其拓展性就显得有些捉襟见肘了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647159943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276245,"user_name":"Geek_3b1096","can_delete":false,"product_type":"c1","uid":1549364,"ip_address":"","ucode":"A6BD92B79B3632","user_header":"","comment_is_top":false,"comment_ctime":1611845023,"is_pvip":false,"replies":[{"id":"100406","content":"于是，代码就好了一点点。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612090845,"ip_address":"","comment_id":276245,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14496746911","product_id":100068401,"comment_content":"List.of今天就用上了!","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514638,"discussion_content":"于是，代码就好了一点点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612090845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2028948,"avatar":"","nickname":"Geek2808","note":"","ucode":"835C9691723163","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":346795,"discussion_content":"厉害，java9 都用上了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612065906,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276107,"user_name":"明星","can_delete":false,"product_type":"c1","uid":1336838,"ip_address":"","ucode":"FE7B4033DDCFEF","user_header":"https://static001.geekbang.org/account/avatar/00/14/66/06/c983b547.jpg","comment_is_top":false,"comment_ctime":1611795843,"is_pvip":false,"replies":[{"id":"100272","content":"不用考虑什么情况下会改变，设置成 final 就是告诉别人，它不会变。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611837555,"ip_address":"","comment_id":276107,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14496697731","product_id":100068401,"comment_content":"老师示例中的<br><br><br>final CreateEpubResponse response = createEpub(request);<br>final EpubStatus status = toEpubStatus(response);<br><br><br>private EpubStatus toEpubStatus(final CreateEpubResponse response) {<br>  if (response.getCode() == 201) {<br>    return EpubStatus.CREATED;<br>  }<br><br><br>  return EpubStatus.TO_CREATE;<br>}<br><br>response和status 没想明白在什么情况下会被改变，final 防止改变这两个变量的意图可以理解，但是是防止程序运行过程中被其他线程误改变值？还是防止其他开发的同事调用或修改这段代码的时候一不小心对变量进行了赋值？","like_count":3,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514601,"discussion_content":"不用考虑什么情况下会改变，设置成 final 就是告诉别人，它不会变。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1611837555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287390,"user_name":"请叫我和尚","can_delete":false,"product_type":"c1","uid":1703256,"ip_address":"","ucode":"33A8A1CDA103F9","user_header":"https://static001.geekbang.org/account/avatar/00/19/fd/58/1af629c7.jpg","comment_is_top":false,"comment_ctime":1617929574,"is_pvip":false,"replies":[{"id":"104453","content":"学以致用","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1618063717,"ip_address":"","comment_id":287390,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10207864166","product_id":100068401,"comment_content":"这几天早上起床就来刷这个课，之前一直没有留言，但是昨天看了之前的一个代码，然后发现了很多前面几章讲的坏味道(比如过长的消息链等)，今天又学到了变量声明，记起来之前代码也有这样的问题，今天就立马去改了，点赞这门课","like_count":2,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518286,"discussion_content":"学以致用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618063717,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345361,"user_name":"java小霸王","can_delete":false,"product_type":"c1","uid":1168540,"ip_address":"","ucode":"7094BCD9F25E1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/d4/9c/030e80d3.jpg","comment_is_top":false,"comment_ctime":1652233977,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5947201273","product_id":100068401,"comment_content":"之前给集合初始化，因为发现先new再赋值，这个操作很繁琐，代码看起来很臃肿，就自己封装了一下工具类，后面发现guava，高版本jdk的支持，就开心的用起来，及其舒适","like_count":1},{"had_liked":false,"id":300118,"user_name":"Aprelude","can_delete":false,"product_type":"c1","uid":1658796,"ip_address":"","ucode":"840D3F7A35AEEF","user_header":"https://static001.geekbang.org/account/avatar/00/19/4f/ac/80439ba7.jpg","comment_is_top":false,"comment_ctime":1625014915,"is_pvip":false,"replies":[{"id":"109370","content":"这取决于我们认为决定状态的是什么，可能是状态码，也可能从内容中取出来。这个例子里面目前只用到了状态码，其实是可以只传状态码的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1626186689,"ip_address":"","comment_id":300118,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5919982211","product_id":100068401,"comment_content":"response状态的那个方法参数为什么不传reponse.getcode而要把整个reponse传进去","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522646,"discussion_content":"这取决于我们认为决定状态的是什么，可能是状态码，也可能从内容中取出来。这个例子里面目前只用到了状态码，其实是可以只传状态码的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626186689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1759325,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","nickname":"杯莫停","note":"","ucode":"4FA1D5CBBEF702","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578433,"discussion_content":"我觉得只传状态码更符合封装的特性，处理状态的函数不应该和reponse对象发生联系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656740439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275615,"user_name":"安迪密恩","can_delete":false,"product_type":"c1","uid":1331611,"ip_address":"","ucode":"A6F3F67CF8E6F8","user_header":"https://static001.geekbang.org/account/avatar/00/14/51/9b/ccea47d9.jpg","comment_is_top":false,"comment_ctime":1611621743,"is_pvip":false,"replies":[{"id":"100047","content":"多谢多谢！","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1611645579,"ip_address":"","comment_id":275615,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5906589039","product_id":100068401,"comment_content":"我有来了，第二个代码块，少了一些右花括号。类没有闭合。","like_count":1,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514418,"discussion_content":"多谢多谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611645579,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360093,"user_name":"Asia","can_delete":false,"product_type":"c1","uid":1230860,"ip_address":"陕西","ucode":"215A7213BE221E","user_header":"https://static001.geekbang.org/account/avatar/00/12/c8/0c/0b4b7d93.jpg","comment_is_top":false,"comment_ctime":1666171935,"is_pvip":true,"replies":[{"id":"131097","content":"学以致用","user_name":"作者回复","user_name_real":"编辑","uid":"1258861","ctime":1666579772,"ip_address":"陕西","comment_id":360093,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1666171935","product_id":100068401,"comment_content":"看完就把昨天提交代码中的 变量初始化为 null 的地方重构了一下。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591393,"discussion_content":"学以致用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666579772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"陕西"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350491,"user_name":"Geek_b1a16a","can_delete":false,"product_type":"c1","uid":3046128,"ip_address":"","ucode":"A58E612D37CE67","user_header":"","comment_is_top":false,"comment_ctime":1656945123,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1656945123","product_id":100068401,"comment_content":"老师，您好，如果有两个变量需要初始化，但这2个变量是通过一个list变量生成的，如何写呢？<br>Int a;<br>Int b;<br>For(Int item:alist){<br>If(item==1){<br>   a=xxx;<br>}<br>If(item==2){<br>  b=xxxxxx;<br>}<br>}<br><br>像这种逻辑，我怎么一次性给变量a和b设置值呢？","like_count":0,"discussions":[{"author":{"id":3179334,"avatar":"","nickname":"Geek_aa483d","note":"","ucode":"D8AC77CEB8E4EB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588341,"discussion_content":"拆分成两个独立的函数，拆分一次循环要做的任务，这个在重构2中有讲到过。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663678045,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1479120,"avatar":"https://static001.geekbang.org/account/avatar/00/16/91/d0/35bc62b1.jpg","nickname":"无咎","note":"","ucode":"B9759B5646F3AB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580572,"discussion_content":"提取成独立的函数来赋值给变量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658276140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350270,"user_name":"杯莫停","can_delete":false,"product_type":"c1","uid":1759325,"ip_address":"","ucode":"4FA1D5CBBEF702","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d8/5d/07dfb3b5.jpg","comment_is_top":false,"comment_ctime":1656740146,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656740146","product_id":100068401,"comment_content":"变量声明后赋值其实是一个平铺直述的编程方式，实现比较杂乱。变量一次性初始化的方式C#就做的很好，我还说java为什么不能这么操作多简洁，原来是我书读得少，看来还是要经常学习啊。","like_count":0},{"had_liked":false,"id":347300,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1653909922,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653909922","product_id":100068401,"comment_content":"一次性完成变量的初始化--记下来","like_count":0},{"had_liked":false,"id":338191,"user_name":"许良顺","can_delete":false,"product_type":"c1","uid":2664238,"ip_address":"","ucode":"A0CE7650E69141","user_header":"","comment_is_top":false,"comment_ctime":1647346580,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647346580","product_id":100068401,"comment_content":"这个变量赋值的例子，真是对“命令式”和“声明式”这两个概念的完美诠释。简单又具体。","like_count":0},{"had_liked":false,"id":325052,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1638787854,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1638787854","product_id":100068401,"comment_content":"原来赋值也能写成：做什么！","like_count":0},{"had_liked":false,"id":306226,"user_name":"江鑫","can_delete":false,"product_type":"c1","uid":1807196,"ip_address":"","ucode":"2BDC781F6AE7EB","user_header":"https://static001.geekbang.org/account/avatar/00/1b/93/5c/5dae406f.jpg","comment_is_top":false,"comment_ctime":1628440651,"is_pvip":true,"replies":[{"id":"110836","content":"向前一步","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1628476834,"ip_address":"","comment_id":306226,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628440651","product_id":100068401,"comment_content":"看到老师Todo的开源练习项目，一开始还觉得很奇怪，怎么都是搞final ，代码检查工具还对这个进行了专门的检查。就觉得非常奇怪，听完老师这课，终于明白了。","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524671,"discussion_content":"向前一步","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628476834,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":277247,"user_name":"AFlymamba","can_delete":false,"product_type":"c1","uid":1359224,"ip_address":"","ucode":"FAEAF3BD3E5146","user_header":"https://static001.geekbang.org/account/avatar/00/14/bd/78/be976ab3.jpg","comment_is_top":false,"comment_ctime":1612330834,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1612330834","product_id":100068401,"comment_content":"看来对编程风格的学习确实不能落伍，得与时俱进","like_count":0},{"had_liked":false,"id":277041,"user_name":"LiuTianyou","can_delete":false,"product_type":"c1","uid":1354897,"ip_address":"","ucode":"6367FD44F50E79","user_header":"https://static001.geekbang.org/account/avatar/00/14/ac/91/a6c0a413.jpg","comment_is_top":false,"comment_ctime":1612245670,"is_pvip":true,"replies":[{"id":"100538","content":"是可以的。","user_name":"作者回复","user_name_real":"郑晔","uid":"1258861","ctime":1612255841,"ip_address":"","comment_id":277041,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1612245670","product_id":100068401,"comment_content":"老师您好，对list的初始化使用Arrays.asList 是否也是可行的？","like_count":0,"discussions":[{"author":{"id":1258861,"avatar":"https://static001.geekbang.org/account/avatar/00/13/35/6d/07a42f81.jpg","nickname":"郑晔","note":"","ucode":"1EBD5AA5D4FC89","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514911,"discussion_content":"是可以的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612255841,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}