{"id":285888,"title":"02 | 暴力递归：当贪心失效了怎么办？","content":"<p>你好，我是卢誉声。</p><p>上一课我们学习了贪心算法，提出了硬币找零的问题，发现了贪心算法的局限性。与此同时，我还提出了一个重要概念，那就是局部最优与整体最优的概念，即最优化问题。今天，我们就从最优化问题开始聊起，引出学习动态规划时的另一重要概念：递归。</p><p>我们之前说过，贪心算法是求解整体最优的真正思路源头，这是为什么我们要在这门课程的一开始从贪心算法讲起。现在，你应该已经意识到贪心算法是有局限性的，它只能在局部最优的思想下工作，<strong>那么当贪心算法失效了怎么办？</strong></p><p>接下来我们就带着这个问题，开始学习今天的内容：递归！看看它能否更进一步地解决我们遇到的棘手问题，从整体最优的角度来解决算法问题。</p><h2>从最优化问题到递归</h2><p>贪心算法失效的很大一个原因在于它明显的局限性：它几乎只考虑局部最优解。所谓局部最优，就是只考虑当前的最大利益，既不向前多看一步，也不向后多看一步，导致每次都只用当前阶段的最优解。</p><p>因此在绝大多数情况下，贪心算法不能得到整体最优解，但它的解是最优解的一个很好近似。同时，也是所有讨论最优化问题的核心基础。</p><p>既然无法通过贪心算法达到整体最优，我们就得换一个思路了：我们得从整体最优的层面上解决这个难缠的算法问题。那么从何说起呢？我认为你应该先理解最优化问题的本质，然后再把这个思考扩展到递归问题上。话不多说，我们这就开始吧！</p><!-- [[[read_end]]] --><h3>最优化问题的本质</h3><p>所谓最优化问题，就是指在某些约束条件下，决定可选择的变量应该取何值，使所选定的目标函数达到最优的问题。</p><p>从数学意义上说，最优化方法是一种求极值的方法，即在一组约束为等式或不等式的条件下，使系统的目标函数达到极值，即最大值或最小值。</p><p>如果只是从概念上来看最优化问题真的是玄而又玄，所以在上一课中我用了硬币找零的例子，引出了最优化的概念，以便你理解。</p><p>在数学里一切都是函数，现在我们先把这个问题用函数形式来表示。为了易于理解，下面我们不会使用向量。</p><p>我们假定需要给出$y$元硬币，硬币面额是5元和3元，求出需要的最少硬币数量。所谓的最少硬币数量就是5元硬币和3元硬币的总数，假定5元硬币数量为$x_{0}$，3元硬币数量为$x_{1}$，那么用函数表示就是：</p><p>$$f(x_{0}, x_{1})=x_{0}+x_{1}$$</p><p>这就是所谓的“目标函数”。</p><p>但是这个函数现在是没有任何限制的，我们希望对此进行约束，使得5元硬币和3元硬币的面值综合为$y$。为此我们需要给出一个约束：</p><p>$$5x_{0}+3x_{1}=y$$</p><p>这个时候我们的问题就变成了，当满足这个约束条件的时候，求解函数中的变量$x_{0}$和$x_{1}$，使得目标函数$f(x_{0}, x_{1})$的取值最小。如果用数学的描述方法来说的话，就是下面这样：</p><p>$${\\arg\\min}_{(x_0,x_1)\\in S} (x_0+x_1)$$</p><p>这个就是我们常见的$argmin$表示方式。它的意思是：当$(x_{0}, x_{1})$属于$S$这个集合的时候，希望知道$x_{0} + x_{1}$的最小值是多少。其中$S$集合的条件就是上面的约束。</p><p>所以最优化问题在我们生活中是非常普遍的，只不过大多数问题可能都像硬币找零问题这样看起来普普通通，概念其实是不难理解的。</p><p>回到硬币找零这个问题上。由于$(x_{0}, x_{1})$都是离散的值，因此所有满足上述约束的$(x_{0}, x_{1})$组合，就是我们最终所求的集合！而这个最优化问题的本质就是：从所有满足条件的组合$(x_{0},x_{1})$中找出一个组合，使得$x_{0}+x_{1}$的值最小。</p><p>所以，你会发现在这种离散型的最优化问题中，本质就是从所有满足条件的组合（能够凑出$y$元）中选择出使得我们的目标函数（所有硬币数量之和）最小的那个组合。而这个所谓满足条件的组合不就是$argmin$公式中的那个集合$S$吗？</p><p>因此，这种离散型的最优化问题就是去所有满足条件的组合里找出最优解的组合。我曾多次提到的<strong>局部最优</strong>就是在一定条件下的最优解，而<strong>整体最优</strong>就是我们真正希望得到的最优解。</p><p>那么我们的视角就转到另一边了：如何去找到这个最优解呢？</p><h3>枚举与递归：最优组合的求解策略</h3><p>如果想得到最优组合，那么最简单直接的方法肯定就是<strong>枚举</strong>。枚举就是直接求出所有满足条件的组合，然后看看这些组合是否能得到最大值或者最小值。</p><p>在硬币找零问题中，假设现在需要给出25元的硬币，有两种组合，分别是(5, 0)和(2, 5)，也就是5个5元硬币，或者2个5元硬币加上5个3元硬币，那么硬币数量最小的组合肯定就是(5, 0)。</p><p>所以最简单的方法就是找出所有满足条件的组合，也就是上面两个组合，然后去看这些组合中的最优解。</p><p>枚举本身很简单，就是把所有组合都遍历一遍即可。可现在问题就是，<strong>如何得到这些组合呢？</strong></p><p>这就需要我们通过一些策略来生成所有满足条件的组合。而<strong>递归</strong>正是得到这些组合的方法。在解决问题前，我们先回顾一下递归问题的本质。</p><h2>递归与问题表达</h2><p>我们可以看出，其实最优化问题使用递归来处理是非常清晰的，递归是搜索组合的一种非常直观的思路。</p><p>当我在稍后的课程里讨论动态规划时，你就会发现所有问题都需要被描述成递归的形式来讨论。</p><p>所以我们有必要先巩固一下递归的概念。首先是在数学中我们怎么去用递归描述一个问题，然后是如何用递归描述最优化问题的解法。</p><h3>从斐波那契数列说起</h3><p>严格来说，斐波那契数列问题不是最优化问题，但它能很好地展示递归的概念。我们先来看一下斐波那契数列的问题描述。</p><p>问题：斐波那契数通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和：</p><p>$$F(n)=\\left\\{\\begin{array}{c}<br>\n0,n=0\\\\\\<br>\n1,n=1\\\\\\<br>\nF(n-1)+F(n-2),n&gt;1<br>\n\\end{array}\\right.$$</p><pre><code>示例 1：\n\n输入：2\n输出：1\n解释：F(2) = F(1) + F(0) = 1 + 0 = 1。\n</code></pre><pre><code>示例 2：\n\n输入：3\n输出：2\n解释：F(3) = F(2) + F(1) = 1 + 1 = 2.\n</code></pre><p>很多人在解算法面试问题的时候有一种倾向性，那就是使用迭代而非递归来求解问题。我先不说这样的倾向性正确与否，那么我们就按照这个偏好来解一下（即斐波那契数列的循环解法）。</p><p>Java实现：</p><pre><code>int fibonacci(int n) {\n    int[] resolution = {0, 1}; // 解的数组\n    if(n &lt; 2) { return resolution[n]; }\n\n    int i = 1;\n    int fib1 = 0, fib2 = 1, fib = 0;\n    while(i &lt; n) {\n        fib = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = fib;\n        i++;\n    }\n\n    return fib; // 输出答案\n}\n</code></pre><p>C++实现：</p><pre><code>int Fibonacci(int n) {\n    std::vector&lt;int&gt; resolution = {0, 1}; // 解的数组\n    if(n &lt; 2) { return resolution[n]; }\n    \n    int i = 1;\n    int fib1 = 0, fib2 = 1, fib = 0;\n    while(i &lt; n) {\n    \tfib = fib1 + fib2;\n    \tfib1 = fib2;\n    \tfib2 = fib;\n    \ti++;\n    }\n    \n    return fib; // 输出答案\n} \n</code></pre><p>嗯，这样的解法固然没错，但是它几乎脱离了题设的数学表达形式。在这道题目中，出题者“刻意”地写出了求解斐波那契数列的函数表达式，这其中有没有什么别的含义或原因呢？</p><p>当然有了，这个函数表达式很好地反应出了计算机科学中常见的算法形式：递归。 下面，就让我们来看看斐波那契数列与递归之间的关系。</p><h3>使用递归求解斐波那契数列</h3><p>事实上，斐波那契数列的数学形式就是递归的，我在这里直接贴出其递归形式的算法代码，你就能很清楚地看出这一点。</p><pre><code>int Fibonacci(int n) {\n  if (0 == n || 1 == n) { return n; }\n  if(n &gt; 1) { return Fibonacci(n - 1) + Fibonacci(n - 2); }\n\n  return 0; // 如果输入n有误，则返回默认值\n}\n</code></pre><p>递归形式的求解几乎就是简单的把题设中的函数表达式照搬过来，因此我们说从数学意义上讲，递归更直观，且易于理解。</p><h3>使用递归求解硬币问题</h3><p>你可以看出，理解递归并不难，现在我们要把这种思路套用到求解硬币的问题上来。话不多说，我在这里直接贴出使用递归求解硬币问题的代码实现。</p><p>Java实现：</p><pre><code>void getMinCountsHelper(int total, int[] values, ArrayList&lt;Integer&gt; currentCounts, ArrayList&lt;ArrayList&lt;Integer&gt;&gt; combinations) {\n    if (0 == total) { // 如果余额为0，说明当前组合成立，将组合加入到待选数组中\n        combinations.add(new ArrayList&lt;Integer&gt;(currentCounts));\n        return;\n    }\n\n    int valueLength = values.length;\n    for (int i = 0;  i &lt; valueLength; i ++) { // 遍历所有面值\n        int currentValue = values[i];\n        if (currentValue &gt; total) { // 如果面值大于当前总额，直接跳过\n            continue;\n        }\n\n        // 否则在当前面值数量组合上的对应位置加1\n        ArrayList&lt;Integer&gt; newCounts = new ArrayList&lt;Integer&gt;(currentCounts);\n        newCounts.set(i, newCounts.get(i)+1);\n        int rest = total - currentValue;\n\n        getMinCountsHelper(rest, values, newCounts, combinations); // 求解剩余额度所需硬币数量\n    }\n}\n\nint getMinimumHelper(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; combinations) {\n    // 如果没有可用组合，返回-1\n    if (0 == combinations.size()) { return -1; }\n\n    int minCount = Integer.MAX_VALUE;\n    for (ArrayList&lt;Integer&gt; counts : combinations) {\n        int total = 0; // 求当前组合的硬币总数\n        for (int count : counts) { total += count; }\n\n        // 保留最小的\n        if (total &lt; minCount) { minCount = total; }\n    }\n\n    return minCount;\n}\n\nint getMinCountOfCoins() {\n    int[] values = { 5, 3 }; // 硬币面值的数组\n    int total = 11; // 总值\n\n    ArrayList&lt;Integer&gt; initialCounts = new ArrayList&lt;&gt;(Collections.nCopies(values.length, 0)); // 初始值(0,0)\n\n    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; coinCombinations = new ArrayList&lt;&gt;(); // 存储所有组合\n    getMinCountsHelper(total, values, initialCounts, coinCombinations); // 求解所有组合（不去重）\n    \n    return getMinimumHelper(coinCombinations); // 输出答案\n}\n</code></pre><p>C++实现：</p><pre><code>void GetMinCountsHelper(int total, const std::vector&lt;int&gt;&amp; values, std::vector&lt;int&gt; currentCounts, std::vector&lt;std::vector&lt;int&gt;&gt;&amp; combinations) {\n    if (!total) { // 如果余额为0，说明当前组合成立，将组合加入到待选数组中\n        combinations.push_back(currentCounts);\n        return;\n    }\n\n    int valueLength = values.size();\n    for (int i = 0;  i &lt; valueLength; i ++) { // 遍历所有面值\n        int currentValue = values[i];\n        if (currentValue &gt; total) { // 如果面值大于当前总额，直接跳过\n            continue;\n        }\n\n        // 否则在当前面值数量组合上的对应位置加1\n        std::vector&lt;int&gt; newCounts = currentCounts;\n        newCounts[i] ++;\n        int rest = total - currentValue;\n        \n        GetMinCountsHelper(rest, values, newCounts, combinations); // 求解剩余额度所需硬币数量\n    }\n}\n\nint GetMinimumHelper(const std::vector&lt;std::vector&lt;int&gt;&gt;&amp; combinations) {\n    // 如果没有可用组合，返回-1\n    if (!combinations.size()) { return -1; }\n\n    int minCount = INT_MAX;\n    for (const std::vector&lt;int&gt;&amp; counts : combinations) {\n        int total = 0; // 求当前组合的硬币总数\n        for (int count : counts) { total += count; }\n\n        // 保留最小的\n        if (total &lt; minCount) { minCount = total; }\n    }\n\n    return minCount;\n}\n\nint GetMinCountOfCoins() {\n    std::vector&lt;int&gt; values = { 5, 3 }; // 硬币面值的数组\n    int total = 11; // 总值\n\n    std::vector&lt;int&gt; initialCounts(values.size(), 0); // 初始值(0,0)\n    std::vector&lt;std::vector&lt;int&gt;&gt; coinCombinations; // 存储所有组合\n    GetMinCountsHelper(total, values, initialCounts, coinCombinations); // 求解所有组合（不去重）\n\n    return GetMinimumHelper(coinCombinations); // 输出答案\n}\n</code></pre><p>你从代码里可以看出，这里的操作被明确分成了两步：</p><ol>\n<li>求解所有满足条件的组合；</li>\n<li>从组合中选出总和最小的组合。如果找不到满足条件的组合那么就返回-1。</li>\n</ol><p>我们也可以将这两步合并成一步来解决，就像下面这段代码。</p><p>Java实现：</p><pre><code>int getMinCountsHelper(int total, int[] values) {\n    // 如果余额为0，说明当前组合成立，将组合加入到待选数组中\n    if (0 == total) { return 0; }\n\n    int valueLength = values.length;\n    int minCount = Integer.MAX_VALUE;\n    for (int i = 0;  i &lt; valueLength; i ++) { // 遍历所有面值\n        int currentValue = values[i];\n\n        // 如果当前面值大于硬币总额，那么跳过\n        if (currentValue &gt; total) { continue; }\n\n        int rest = total - currentValue; // 使用当前面值，得到剩余硬币总额\n        int restCount = getMinCountsHelper(rest, values);\n\n        // 如果返回-1，说明组合不可信，跳过\n        if (restCount == -1) { continue; }\n\n        int totalCount = 1 + restCount; // 保留最小总额\n        if (totalCount &lt; minCount) { minCount = totalCount; }\n    }\n\n    // 如果没有可用组合，返回-1\n    if (minCount == Integer.MAX_VALUE) { return -1; }\n\n    return minCount; // 返回最小硬币数量\n}\n\nint getMinCountOfCoinsAdvance() {\n    int[] values = { 3, 5 }; // 硬币面值的数组\n    int total = 11; // 总值\n\n    return getMinCountsHelper(total, values); // 输出答案\n}\n</code></pre><p>C++实现：</p><pre><code>int GetMinCountsHelper(int total, const std::vector&lt;int&gt;&amp; values) {\n    // 如果余额为0，说明当前组合成立，将组合加入到待选数组中\n    if (!total) { return 0; }\n\n    int valueLength = values.size();\n    int minCount = INT_MAX;\n    for (int i = 0;  i &lt; valueLength; i ++) { // 遍历所有面值\n        int currentValue = values[i];\n\n        // 如果当前面值大于硬币总额，那么跳过\n        if (currentValue &gt; total) { continue; }\n\n        int rest = total - currentValue; // 使用当前面值，得到剩余硬币总额\n        int restCount = GetMinCountsHelper(rest, values);\n\n        // 如果返回-1，说明组合不可信，跳过\n        if (restCount == -1) { continue; }\n\n        int totalCount = 1 + restCount; // 保留最小总额\n        if (totalCount &lt; minCount) { minCount = totalCount; }\n    }\n\n    // 如果没有可用组合，返回-1\n    if (minCount == INT_MAX) { return -1; }\n\n    return minCount; // 返回最小硬币数量\n}\n\nint GetMinCountOfCoinsAdvance() {\n    std::vector&lt;int&gt; values = { 5, 3 }; // 硬币面值的数组\n    int total = 11; // 总值\n\n    return GetMinCountsHelper(total, values); // 输出答案\n}\n</code></pre><p>在这段代码中，每一次递归返回的值，都是后续组合之和的最小值。它不再存储所有的组合，直到回退到递归的顶层。</p><p>这样可以极大节省存储空间，这是处理递归问题的通用方法。一般来说，你都应该用这种算法处理方式来解递归问题。</p><h2>深入理解递归</h2><p>在了解了递归的概念、问题的描述方式和解决问题方法后，我想让你来思考这样一个问题：<strong>为什么递归能帮助我们解决最优化问题？</strong></p><h3>堆栈与递归的状态存储</h3><p>在计算机中，实现递归必须建立在堆栈的基础上，这是因为每次递归调用的时候我们都需要把当前函数调用中的局部变量保存在某个特定的地方，等到函数返回的时候再把这些局部变量取出来。</p><p>而用于保存这些局部变量的地方也就是堆栈了。</p><p>因此，你可以看到递归可以不断保存当前求解状态并进入下一层次的求解，并在得到后续阶段的解之后，将当前求解状态恢复并与后续求解结果进行合并。</p><p>在硬币找零问题中，我们可以放心的在函数中用循环不断遍历，找出当前面值硬币的可能数量。而无需用其它方法来存储当前或之前的数据。</p><p>得益于递归，我们通过堆栈实现了状态存储，这样的代码看起来简单、清晰明了。在本节课稍后的内容中，在我讲到递归树的求解组合空间时，你会更清晰地认识到堆栈和状态存储带来的价值！</p><h3>递归与回溯</h3><p>在求解最优化问题的时候，我们经常会用到<strong>回溯</strong>这个策略。</p><p>上一课中，我们已经提到过回溯的思想。在硬币找零这个问题里，具体说就是如果遇到已经无法求解的组合，那么我们就往回退一步，修改上一个面值的硬币数量，然后再尝试新的组合。</p><p>递归这种形式，正是赋予了回溯这种可以回退一步的能力：它通过堆栈保存了上一步的当前状态。</p><p>因此，如果想要用回溯的策略来解决问题，那么递归应该是你的首选方法。所以说，回溯在最优化问题中有多么重要，递归也就有多么重要。</p><h3>树形结构与深度优先搜索</h3><p>为了理解递归，我在这里用合适的结构来描述递归的求解过程。这种结构正是计算机数据结构中的树。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/15/70/154a4b0fdb8e467428fb3e06b14a3d70.jpg?wh=1920*2150\" alt=\"\"></p><p>你可以从中看到形象的递归求解过程，每个节点的 /（斜线）左边表示当前节点使用的硬币面值，右边表示使用面值后的余额。图中的蓝色节点就表示我们目前得到的解。</p><p>递归的过程的确就是一个树形结构，而递归也就是一个深度优先搜索的过程，先找到下一步的解，然后再回退，如此往复。</p><p>所以我们可以这样理解递归：作为一个算法解决方案，它采用了深度优先搜索的策略，去搜索所有可能的组合，并得到最优解的最优化问题。</p><p>如果在每个节点上加上当前这个节点求得的组合结果，就可以用递归树表示<strong>求解的组合空间</strong>：</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/63/e721d6a000637746a8d0ea223151b563.jpg?wh=1920*2903\" alt=\"\"></p><h3>通过穷举法从所有的解中得到最优解</h3><p>从上图中我们可以发现，每个节点都存储了一个当前求解过程中的组合，和后续节点的组合合并到一起形成完整的答案。</p><p>而真正的求解组合，就是把所有余额为0的组合拿出来，经过去重之后得到的结果。</p><p>所以，你可以看到求解的组合就蕴含在这个递归的树形结算的节点空间中，这也就是为什么递归策略是行之有效的：我们可以通过穷举法从所有的解中得到最优解！</p><h2>暴力递归的问题与优化</h2><p>从上一课介绍的贪心算法，到我在这里跟你讲的暴力递归法，看起来硬币找零问题有了一个稳定且行之有效的解题思路。</p><p>但这就足够了吗？哈哈，显然不是。因为这样的穷举法效率实在低下，不仅如此，这样的代码可读性低且调试困难。我在这里给你具体分析一下。</p><h3>性能问题</h3><p>暴力递归的最后一个特点就是穷举（都叫暴力，你说是不是）。如果我们只使用朴素的递归思路解题，就需要通过递归来暴力穷举出所有的组合，而且我们穷举的不只是组合，还是所有可能得到目标组合的组成路径！</p><p>这个在上面的图中我们可以看到，同样是求解(2, 5)这个组合，图中有多少种路径？这还只是25元和两种面值的情况。如果求解的金额和面值数量增加，那么我们可以看到这个树会以非常难以置信的方式增长，那么带来的性能问题就是灾难性的。</p><p>如果你仔细观察一下，就会发现这个树会随着总额的增加呈现指数形式的增长。对于这种事情，我们难以接受。</p><p>因此，递归只是让问题可以求解，但是如果数据规模过大的时候暴力递归会引发极大的性能问题。</p><h3>可读性与调试问题</h3><p>虽然递归在数学意义上非常直观，但是如果问题过于复杂，一般是无法直接画出上面我画的那棵求解树的。</p><p>有画求解树的时候，我们可以想出我们的求解过程是怎么进行的，但如果求解树的分支极多，那么很多人就很难继续在脑海中模拟出整个求解过程了。</p><p>因此，一旦程序出现bug，当你想尝试去调试的时候，就会发现这样的代码几乎没有调试的可能性。这种问题在数据规模很大的情况下尤为明显。</p><p>那么针对性能低下、代码可读性降低和调试问题，我们有什么办法去解决吗？有，听我给你讲下面的内容。</p><h3>优化暴力递归：剪枝与优化</h3><p>你可以从前面的图中看到，这棵树中有很多分支是完全相同的：起码从理论上讲最终只有两个组合。但是这棵树到达同一种组合的路径却非常多，所以优化递归的思路其实就是如何减少搜索的分支数量。</p><p>分支数量减少了，递归效率也就高了。这就是所谓的<strong>剪枝</strong>优化。对于优化方法，这里我提供两种思路给你。</p><p><strong>1. 参考贪心算法</strong></p><p>第一种思路是仿照贪心算法，从整个搜索策略上来调整。也就是说，你要考虑这个问题的性质，即面值大的硬币用得足够多，那么这个组合的硬币总数肯定就最小。</p><p>所以在每一次递归时，我们不应该暴力地搜索所有的面值，而应该从面值最大的硬币着手，不断尝试大面值硬币的最大情况。</p><p>如果无法满足条件再减少一个，再递归搜索。最后的代码就跟我在上一课中写给你的回溯代码一样，即通过贪心这种思路结合递归实现一种组合搜索。</p><p>殊途同归啊！我们从递归的角度重新解释了这个算法问题，而且代码实现也是一样的。</p><p><strong>2. 从解空间图解释</strong></p><p>除了参考贪心算法的思想，我们还可以从解空间的角度来解释这个问题。</p><p>请你注意观察一下：在解空间的图中，只要是余额相同的情况下，后面的搜索路径是完全一致的！</p><p><img src=\"https://static001.geekbang.org/resource/image/77/d0/776fe3739110beba2a538103775e3ed0.jpg?wh=1920*2899\" alt=\"\"></p><p>我在图中圈出的两个部分就是重复的搜索路径。因为余额都是12元，所以后续的求解路径和结果完全相同。</p><p>这是一个重要线索，在这个硬币求解问题中，当余额相同的时候，最优解是确定的。那么你想想看，如果能够避免相同余额下的重复搜索过程，那么算法执行速度是不是可以加快了？</p><p>这就是我在上一课中提到过的<strong>重叠子问题</strong>。</p><p>你可以把求解12元的硬币数量理解成求解25元的硬币数量的一个子问题。在求解25元硬币过程中，会有很多种情况都要求解12元硬币的最优解。我们把这类会出现重复求解的子问题称之为重叠子问题。</p><p>显然，这就是我们可以优化的出发点。至于如何进行优化，则需要用比较多的篇幅讨论，在下一节课中，我会跟你细谈这个问题。</p><h2>课程总结</h2><p>今天我们学习了最优化问题的本质，即从所有满足条件的组合里找出最优解的组合。贪心算法只能解决<strong>局部最优</strong>问题，而我们的最终目标是解决<strong>整体最优</strong>问题（即最优解）。</p><p>自然地，<strong>枚举</strong>是获得最优解的理想方法。而<strong>递归</strong>可以帮助我们获得所有可能答案的组合。递归形式的求解几乎就是简单地把题设中的函数表达式照搬过来，它相较于迭代来说更直观，且易于理解。</p><p>但暴力递归有着十分明显的缺陷，存在性能低下、可读性低和调试困难等问题。为此，我们提出了剪枝与优化这两种方法：</p><ol>\n<li>利用预设条件减少搜索路径，优化最优组合搜索方案（硬币的优化）；</li>\n<li>利用重叠子问题，避免重叠子问题的计算。</li>\n</ol><p>因此，在面试问题中，考虑贪心算法和递归是我们求解问题时思考的重要方向。很多面试问题已经可以使用这两种算法来解决了。</p><p>但在稍复杂的面试问题面前，我们还需要借助于更高级的手段：备忘录和动态规划。而重叠子问题是理解这些高级手段的基础，下节课我会具体来讲。</p><h2>课后思考</h2><p>今天我讲了递归求解最优解问题的思路，并强调了回溯的重要性。那如何通过编程，求出所有有效的括号组合呢？（设输入是有几组括号，输出是所有有效的括号组合）</p><p>欢迎留言和我分享你的答案，我会第一时间给你反馈。如果今天的内容对你有所启发，也欢迎把它分享给你身边的朋友，邀请他一起学习！</p>","neighbors":{"left":{"article_title":"01 | 硬币找零问题：从贪心算法说起","id":285230},"right":{"article_title":"03 | 备忘录：如何避免递归中的重复计算？","id":287199}},"comments":[{"had_liked":false,"id":248713,"user_name":"卢誉声","can_delete":false,"product_type":"c1","uid":1006976,"ip_address":"","ucode":"93C5EFC39EB9C6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","comment_is_top":true,"comment_ctime":1600268941,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"9.2233720642248008e+18","product_id":100060501,"comment_content":"这里给出一种解决括号生成的解法，用C++语言描述，供大家参考：<br><br>class Solution {<br>public:<br>    vector&lt;string&gt; generateParenthesis(int n) {<br>        std::vector&lt;string&gt; v;<br>        backtrace(&quot;&quot;, 0, 0, n, v);<br>        return v;<br>    }<br><br>    void backtrace(std::string cur, int left, int right, int n, std::vector&lt;string&gt;&amp; v) {<br>        if (left + right == 2*n) {<br>            v.push_back(cur);<br>            return;<br>        }<br><br>        if (left &lt; n) backtrace(cur + &quot;(&quot;, left+1, right, n, v);<br>        if (right &lt; left) backtrace(cur + &quot;)&quot;, left, right+1, n, v);<br>    }<br>};<br>","like_count":6,"discussions":[{"author":{"id":1656804,"avatar":"https://static001.geekbang.org/account/avatar/00/19/47/e4/17cb3df1.jpg","nickname":"BBQ","note":"","ucode":"683BBF7F7AE370","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353107,"discussion_content":"LC 22: https://leetcode-cn.com/problems/generate-parentheses/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615009918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153792,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9b/00/8c1b9631.jpg","nickname":"王建","note":"","ucode":"68000818D8AA41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":310315,"discussion_content":"没看懂题目，可否举个例子！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601771504,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248554,"user_name":"郑童文","can_delete":false,"product_type":"c1","uid":1030733,"ip_address":"","ucode":"3D193715CB8549","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/4d/7ba09ff0.jpg","comment_is_top":false,"comment_ctime":1600221290,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"74614665322","product_id":100060501,"comment_content":"麻烦老师以后能把函数的形参加上注释，这样能更快明白每个形参代表什么。 谢谢！","like_count":18,"discussions":[{"author":{"id":1914504,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/36/88/20b6a6ee.jpg","nickname":"Simon","note":"","ucode":"A8A2E3E57BD029","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":565280,"discussion_content":"如果需要注释，那说明命名还不够好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650425391,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2193752,"avatar":"","nickname":"Geek_b302cc","note":"","ucode":"DB06F7C13C9748","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":393371,"discussion_content":"太对了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631376766,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2012972,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/USkFhT0Xa3qZIn8ib4t5Iu4jk23lImHpwlKoerBNYWficfnEcPG24aE2FBrE5NLWGAVwHCxzJMc78xtCaOlkIQbA/132","nickname":"12354","note":"","ucode":"E0165D751BBEB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387956,"discussion_content":"函数命名就已经很清晰了呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628508601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274586,"user_name":"小熊","can_delete":false,"product_type":"c1","uid":1336710,"ip_address":"","ucode":"0F7E7719901941","user_header":"https://static001.geekbang.org/account/avatar/00/14/65/86/633b1bac.jpg","comment_is_top":false,"comment_ctime":1611072089,"is_pvip":false,"replies":[{"id":"101325","content":"理解没有问题。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1613370338,"ip_address":"","comment_id":274586,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14495973977","product_id":100060501,"comment_content":"第二讲暴力递归<br><br>要得到整体最优解需要找出所有符合的情况，选出其中一个最优组合，符合整体最优。<br><br>全部跑出结果再判断，这会浪费很多空间来存储结果组合<br><br>所以在递归过程中，进入最内层返回得到结果时舍弃不符合的，保留更符合的，直到退回递归的顶层，就可以得到唯一的结果。<br><br>递归的方法是为了保存之前的状态，回退时使用，这其实就是栈的数据结构，可以改为非递归的方式。<br><br>使用递归，失败了可以回退，这种回退找正确答案的思路就是回溯，每次都找到树型结构的底部就叫深度优先的思路。<br><br>这种全部结果都遍历出来，取最优解的做法是暴力递归，性能差难以调试，效率低，可读性差，可以使用剪枝优化。<br><br>贪心算法是动态规划的源头，但是他局限于求局部最优解，但是用到暴力递归里，就可以达到剪枝的效果。<br><br>第二种优化策略，重叠子问题，余额相同的时候搜索路径是完全一致。所以可以把大问题拆分为小问题，这就是备忘录和动态规划的基础。","like_count":4,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514064,"discussion_content":"理解没有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613370338,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256939,"user_name":"AshinInfo","can_delete":false,"product_type":"c1","uid":1299511,"ip_address":"","ucode":"098F5C74A37009","user_header":"https://static001.geekbang.org/account/avatar/00/13/d4/37/aa152ddb.jpg","comment_is_top":false,"comment_ctime":1603789680,"is_pvip":false,"replies":[{"id":"94429","content":"上一课一开始是假定从大到小排列，这种情况只能获得这种假设下的局部最优解。但当我们后面求全组合之后（调整尝试硬币的顺序），就能得到全局最优解了。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1604900514,"ip_address":"","comment_id":256939,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10193724272","product_id":100060501,"comment_content":"第一种思路是仿照贪心算法，从整个搜索策略上来调整。也就是说，你要考虑这个问题的性质，即面值大的硬币用得足够多，那么这个组合的硬币总数肯定就最小。<br><br>这句话我想了下，不是很同意这个说法。比如 硬币 10 7 1，金额 14。按照上面所说<br>那么他得到的解 10， 1， 1， 1， 1，这个时候就结束了。但其实最有解是7,7。老师您，上一课的代码只能获得一个解，并不能获取最优解","like_count":2,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508169,"discussion_content":"上一课一开始是假定从大到小排列，这种情况只能获得这种假设下的局部最优解。但当我们后面求全组合之后（调整尝试硬币的顺序），就能得到全局最优解了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604900514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249192,"user_name":"HoSalt","can_delete":false,"product_type":"c1","uid":1156074,"ip_address":"","ucode":"610B03E2A002D1","user_header":"https://static001.geekbang.org/account/avatar/00/11/a3/ea/53333dd5.jpg","comment_is_top":false,"comment_ctime":1600497518,"is_pvip":false,"replies":[{"id":"91503","content":"如果要用贪心达到优化的作用，往往是利用贪心策略进行剪枝。在本问题中，主要是为了说明在有些情况下，贪心本身并不能直接解决问题。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1600699140,"ip_address":"","comment_id":249192,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5895464814","product_id":100060501,"comment_content":"参照贪心算法的优化，起不到优化的作用吧，前面就有评论也说过，需要对比所有的结果才知道是不是最优，除非只是想得到一个结果，而这个结果要尽可能的好。<br><br>或者是基于前面得到的解作为其它递归的剪枝条件之一","like_count":2,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505860,"discussion_content":"如果要用贪心达到优化的作用，往往是利用贪心策略进行剪枝。在本问题中，主要是为了说明在有些情况下，贪心本身并不能直接解决问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600699140,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248924,"user_name":"憨才好运","can_delete":false,"product_type":"c1","uid":1889034,"ip_address":"","ucode":"760E3065E1FFF8","user_header":"https://static001.geekbang.org/account/avatar/00/1c/d3/0a/ebe69b0e.jpg","comment_is_top":false,"comment_ctime":1600359179,"is_pvip":false,"replies":[{"id":"91496","content":"感谢你指出，这里使用了 ArrayList&lt;Integer&gt; initialCounts = new ArrayList&lt;&gt;(Collections.nCopies(values.length, 0));<br><br>修正了问题。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1600698458,"ip_address":"","comment_id":248924,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5895326475","product_id":100060501,"comment_content":"这里要说明一下Java和C++的区别：<br>&#47;&#47; List&lt;Integer&gt; initialCounts = new ArrayList&lt;&gt;(2);<br>&#47;&#47; Collections.fill(initialCounts, 0);<br>List&lt;Integer&gt; initialCounts = Arrays.stream(new int[values.length])<br>                .boxed().collect(Collectors.toList());<br>初始化之后的initialCounts依然是0，直接访问修改会发生越界错误的，所以采用lamda的方式初始化initialCounts<br><br>You&#39;re confusing the size of the array list with its capacity:<br><br>the size is the number of elements in the list;<br>the capacity is how many elements the list can potentially accommodate without reallocating its internal structures.<br>When you call new ArrayList&lt;Integer&gt;(10), you are setting the list&#39;s initial capacity, not its size. In other words, when constructed in this manner, the array list starts its life empty.<br><br>One way to add ten elements to the array list is by using a loop:<br>initialCounts.add(0);","like_count":1,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505778,"discussion_content":"感谢你指出，这里使用了 ArrayList&amp;lt;Integer&amp;gt; initialCounts = new ArrayList&amp;lt;&amp;gt;(Collections.nCopies(values.length, 0));\n\n修正了问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600698458,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248588,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1600232501,"is_pvip":true,"replies":[{"id":"91300","content":"这个解法是可以工作的，代码中通过深度优先（DFS） 生成括号，再通过check 函数来监测括号组合是否有效。但其实更进一步的利用回溯来简化执行流程，以及降低执行时间。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1600269139,"ip_address":"","comment_id":248588,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5895199797","product_id":100060501,"comment_content":"```java<br>    public List&lt;String&gt; genParenthesis(int n) {<br>        List&lt;String&gt; res = new ArrayList&lt;&gt;();<br>        dfs(0,0,n,&quot;&quot;,res);<br>        return res;<br>    }<br><br>    private void dfs(int l,int r,int n,String s,List&lt;String&gt; res){<br>        if(l == r &amp;&amp; l == n){<br>            if(check(s)){<br>                res.add(s);<br>            }            <br>            return;<br>        }<br><br>        if(l &lt; n){<br>            dfs(l+1,r,n,s + &quot;(&quot;,res);<br>        }<br>        <br>        if(r &lt; n){<br>            dfs(l,r+1,n,s + &quot;)&quot;,res);<br>        }        <br>    }<br><br>    private boolean check(String s){<br>        Stack&lt;Character&gt; stack = new Stack&lt;&gt;();<br>        for(char c : s.toCharArray()){<br>            if(c == &#39;(&#39;) {<br>                stack.push(c);<br>                continue;<br>            }<br><br>            if(stack.isEmpty()){<br>                return false;<br>            }<br>            stack.pop();<br>        }<br>        return stack.isEmpty();<br>    }<br>```","like_count":1,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505695,"discussion_content":"这个解法是可以工作的，代码中通过深度优先（DFS） 生成括号，再通过check 函数来监测括号组合是否有效。但其实更进一步的利用回溯来简化执行流程，以及降低执行时间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600269139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1166969,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ce/79/673f4268.jpg","nickname":"小杰","note":"","ucode":"09E29168D53178","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":306504,"discussion_content":"大神不要光写代码 解题思路也写一写嘛😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600305070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314249,"user_name":"阳仔","can_delete":false,"product_type":"c1","uid":1046920,"ip_address":"","ucode":"79F73D85EDF3E2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/88/cdda9e6f.jpg","comment_is_top":false,"comment_ctime":1632913731,"is_pvip":false,"replies":[{"id":"118241","content":"代码中已经有了详细的备注，建议可以自己写一下代码，Practice makes it perfect，去可以理解这里的示例代码了。","user_name":"作者回复","user_name_real":"编辑","uid":"1006976","ctime":1639321599,"ip_address":"","comment_id":314249,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632913731","product_id":100060501,"comment_content":"关键代码解释得不是很清楚，看文本都懂，看这个代码真的懵了","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538084,"discussion_content":"代码中已经有了详细的备注，建议可以自己写一下代码，Practice makes it perfect，去可以理解这里的示例代码了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639321599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292061,"user_name":"3.141516","can_delete":false,"product_type":"c1","uid":1013309,"ip_address":"","ucode":"34AF71B02692F3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/76/3d/8120438b.jpg","comment_is_top":false,"comment_ctime":1620658771,"is_pvip":true,"replies":[{"id":"108598","content":"恩，这个没有问题。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1624693512,"ip_address":"","comment_id":292061,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1620658771","product_id":100060501,"comment_content":"老师留的作业是 leetcode 22 题。<br><br>主要思路当然还是递归，每次递归加一个括号。递归终止是左右括号剩余为 0。<br><br>剪枝：通过剪枝，只剩下两种情况继续递归：<br>1. 左括号还有剩余，直接添加，因为后续可以添加右括号进行匹配；<br>2. 右括号数量多余左括号，只有这样才能继续添加右括号，否则肯定不匹配。<br><br>https:&#47;&#47;leetcode-cn.com&#47;problems&#47;generate-parentheses&#47;<br><br>class Solution:<br>    def generateParenthesis(self, n: int) -&gt; [str]:<br><br>        result = []<br><br>        leftCount = n<br>        rightCount = n<br><br>        def recursion(curStr, leftCount, rightCount):<br>            if leftCount == 0 and rightCount == 0:<br>                result.append(curStr)<br>                return<br>            if leftCount &gt; 0:<br>                recursion(curStr + &quot;(&quot;, leftCount - 1, rightCount)<br>            if leftCount &lt; rightCount: <br>                recursion(curStr + &quot;)&quot;, leftCount, rightCount - 1)<br><br>        recursion(&quot;&quot;, leftCount, rightCount)<br>        return result","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519661,"discussion_content":"恩，这个没有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624693512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288670,"user_name":"Novmbrain","can_delete":false,"product_type":"c1","uid":2144376,"ip_address":"","ucode":"06FB7D329ECC1E","user_header":"https://static001.geekbang.org/account/avatar/00/20/b8/78/ab0c798a.jpg","comment_is_top":false,"comment_ctime":1618605922,"is_pvip":false,"replies":[{"id":"108602","content":"这个应该没有问题。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1624693549,"ip_address":"","comment_id":288670,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618605922","product_id":100060501,"comment_content":"思路：这道题判断所生成的括号序列是否合法，时刻检查左括号的数目是否大于等于右括号的数目 || 左括号数大于n<br><br>1. 利用上面这个判断方法，可以遍历出所有可能的序号组合，然后再进行判断<br>2. 同样利用上面这个判断方法，可以使用回溯，边遍历边判断，减少时间复杂度。<br><br>class Solution {<br>    &#47;&#47;最后返回的结果<br>    LinkedList&lt;String&gt; returnList = new LinkedList&lt;&gt;();<br>    &#47;&#47;用于储存中间路径<br>    StringBuffer path = new StringBuffer();<br>    public List&lt;String&gt; generateParenthesis(int n) {<br><br>        backTacking(n, 0, 0);<br>        return returnList;<br>    }<br>    &#47;*<br>    leftCount:左括号的数目<br>    rightCount：右括号数目<br>    *&#47;<br>    public void backTacking(int n, int leftCount, int rightCount){<br>        &#47;&#47;进行括号合法性检查<br>        if(leftCount &lt; rightCount || leftCount &gt; n) return;<br>        &#47;&#47;递归结束条件<br>        if(path.length() == 2*n){<br>            returnList.add(path.toString());<br>            return;<br>        }<br><br>        &#47;&#47;其实就是一个二叉树<br>        for(int i = 0; i &lt; 2; i++){<br>            if(i == 1){<br>                path.append(&#39;(&#39;);<br>                backTacking(n, leftCount + 1, rightCount);<br>                path.deleteCharAt(path.length() - 1);<br>            }else{<br>                path.append(&#39;)&#39;);<br>                backTacking(n, leftCount, rightCount + 1);    <br>                path.deleteCharAt(path.length() - 1);            <br>            }<br>        }<br>    }<br>}","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518704,"discussion_content":"这个应该没有问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624693549,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285076,"user_name":"北顾-岛城","can_delete":false,"product_type":"c1","uid":1433568,"ip_address":"","ucode":"54ECB3E5E4073A","user_header":"https://static001.geekbang.org/account/avatar/00/15/df/e0/ce671992.jpg","comment_is_top":false,"comment_ctime":1616599969,"is_pvip":false,"replies":[{"id":"104558","content":"嗯嗯，可以参考。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1618231037,"ip_address":"","comment_id":285076,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1616599969","product_id":100060501,"comment_content":"课后思考题指路：leetcode 22 括号生成","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517578,"discussion_content":"嗯嗯，可以参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618231037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285073,"user_name":"北顾-岛城","can_delete":false,"product_type":"c1","uid":1433568,"ip_address":"","ucode":"54ECB3E5E4073A","user_header":"https://static001.geekbang.org/account/avatar/00/15/df/e0/ce671992.jpg","comment_is_top":false,"comment_ctime":1616599089,"is_pvip":false,"replies":[{"id":"104559","content":"正确，mua～","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1618231048,"ip_address":"","comment_id":285073,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1616599089","product_id":100060501,"comment_content":"硬币问题的优化：<br>class Solution {<br>    private int[] coins;<br>    private int ans;<br>    public int coinChange(int[] coins, int amount) {<br>        this.coins = coins;<br>        Arrays.sort(this.coins);    &#47;&#47; 先排序<br>        ans = amount + 1;<br>        dfs(this.coins.length - 1, amount, 0);  &#47;&#47; 从价值最大的硬币开始深搜<br>        return ans == (amount + 1) ? -1 : ans;<br>    }<br><br>    private void dfs(int index, int amount, int cnt) {<br>        if (amount == 0) {<br>            ans = Math.min(ans, cnt);<br>            return;<br>        }<br>        for (int i = index; i &gt;= 0; --i) {<br>            if ((ans - cnt) * coins[index] &lt; amount) break; &#47;&#47; 剪枝<br>            if (coins[i] &lt;= amount)<br>                dfs(i, amount - coins[i], cnt + 1);<br>        }<br>    }<br>}","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517576,"discussion_content":"正确，mua～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618231048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284429,"user_name":"张金磊","can_delete":false,"product_type":"c1","uid":1265537,"ip_address":"","ucode":"2F781061558502","user_header":"https://static001.geekbang.org/account/avatar/00/13/4f/81/3c228f3a.jpg","comment_is_top":false,"comment_ctime":1616245256,"is_pvip":false,"replies":[{"id":"104565","content":"嗯，这个版本没问题。顶一顶，让需要的同学能看到。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1618231122,"ip_address":"","comment_id":284429,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1616245256","product_id":100060501,"comment_content":"按照老师的思路，写了一个python版的<br><br>```python<br>def get_min_count_helper(total, values):<br>    if total == 0:<br>        return 0<br><br>    value_length = len(values)<br>    min_count = sys.maxsize<br>    for i in range(value_length):<br>        current_value = values[i]<br>        if current_value &gt; total:<br>            continue<br>        rest = total - current_value<br>        rest_count = get_min_count_helper(rest, values)<br>        if rest_count == -1:<br>            continue<br>        total_count = 1 + rest_count<br>        if total_count &lt; min_count:<br>            min_count = total_count<br>    if min_count == sys.maxsize:<br>        return -1<br><br>    return min_count<br><br><br>def get_min_count_of_coins_advance():<br>    values = [5, 3]<br>    total = 8<br>    return get_min_count_helper(total, values)<br>```","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517346,"discussion_content":"嗯，这个版本没问题。顶一顶，让需要的同学能看到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618231122,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266709,"user_name":"飞跃疯人院","can_delete":false,"product_type":"c1","uid":1076069,"ip_address":"","ucode":"7A9BDE2CED0939","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/65/88a22c23.jpg","comment_is_top":false,"comment_ctime":1607446760,"is_pvip":false,"replies":[{"id":"101344","content":"这个递归的代码思路没问题。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1613398062,"ip_address":"","comment_id":266709,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1607446760","product_id":100060501,"comment_content":"JavaScript:<br>```<br>var generateParenthesis = function (n) {<br>    const ret = []<br>    const _helper = (left, right, parenthesi) =&gt; {<br>        if (left === 0 &amp;&amp; right === 0) {<br>            ret.push(parenthesi)<br>        }<br>        if (left &gt; 0) {<br>            _helper(left - 1, right, parenthesi + &#39;(&#39;)<br>        }<br>        if (right &gt; left) {<br>            _helper(left, right - 1, parenthesi + &#39;)&#39;)<br>        }<br>    }<br>    _helper(n, n, &#39;&#39;)<br>    return ret<br>};<br>```","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511356,"discussion_content":"这个递归的代码思路没问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613398062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254827,"user_name":"落曦","can_delete":false,"product_type":"c1","uid":1475039,"ip_address":"","ucode":"C70F7E2EDC3FD7","user_header":"https://static001.geekbang.org/account/avatar/00/16/81/df/066ffab3.jpg","comment_is_top":false,"comment_ctime":1603195303,"is_pvip":false,"replies":[{"id":"93116","content":"这段总结没有错，理解的很到位！继续加油。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1603380306,"ip_address":"","comment_id":254827,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603195303","product_id":100060501,"comment_content":"这次跟着老师学习了暴力递归，暴力的话，就是把所有的可能性都检索一遍，根据递归搜索树，可发现有些节点进行了重复计算，可以通过减脂的手法，将这些重复计算的点给删掉，从而进一步优化算法。","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507527,"discussion_content":"这段总结没有错，理解的很到位！继续加油。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603380306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254492,"user_name":"宋不肥","can_delete":false,"product_type":"c1","uid":1240126,"ip_address":"","ucode":"32B34AF579C91C","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/3e/885ec1d2.jpg","comment_is_top":false,"comment_ctime":1603120304,"is_pvip":false,"replies":[{"id":"93121","content":"哈哈，这也是循序渐进而刻意为之的。在真正面试中，我强烈推荐直接使用vector及其对应的工具函数，这在技术面试中是完全允许而且推荐的。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1603380681,"ip_address":"","comment_id":254492,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1603120304","product_id":100060501,"comment_content":"换了vector之后代码可读性好了好多，上一篇那个数组，看了好久。。。。。。<br>","like_count":1,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507416,"discussion_content":"哈哈，这也是循序渐进而刻意为之的。在真正面试中，我强烈推荐直接使用vector及其对应的工具函数，这在技术面试中是完全允许而且推荐的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603380681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249370,"user_name":"码农Kevin亮","can_delete":false,"product_type":"c1","uid":1116630,"ip_address":"","ucode":"D34562461CA0A1","user_header":"https://static001.geekbang.org/account/avatar/00/11/09/d6/5f366427.jpg","comment_is_top":false,"comment_ctime":1600612742,"is_pvip":false,"replies":[{"id":"91938","content":"赞，感谢你的肯定！也欢迎把课程分享给更多朋友。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1601567815,"ip_address":"","comment_id":249370,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600612742","product_id":100060501,"comment_content":"老师把动规的基础概念串成结构化，非常易于理解👍这些概念我之前一直没理解原来是没搞清楚这些基础概念之间的关系","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505908,"discussion_content":"赞，感谢你的肯定！也欢迎把课程分享给更多朋友。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601567815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249060,"user_name":"AshinInfo","can_delete":false,"product_type":"c1","uid":1299511,"ip_address":"","ucode":"098F5C74A37009","user_header":"https://static001.geekbang.org/account/avatar/00/13/d4/37/aa152ddb.jpg","comment_is_top":false,"comment_ctime":1600417375,"is_pvip":false,"replies":[{"id":"91933","content":"解法没有问题，可能生成所有的组合。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1601566169,"ip_address":"","comment_id":249060,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600417375","product_id":100060501,"comment_content":"个人提供的另外一种写法，仅供参考<br><br>&#47;**<br> * 1. 明确函数功能<br> * List&lt;List&lt;Integer&gt;&gt; change(int total, int[] coins)<br> * 2. 明确递推公式<br> * 如果使用一个币种coins[i]后，剩下的total-coins[i]的金额如何找零<br> * 以此类推需要循环coins数组得到所有解<br> * 要寻找最终不可再分解的子问题的解，即（临界条件），确保子问题不会无限分解下去 即total等于0的时候<br> *<br> * @Author: Ashin<br> * @Date: 2020&#47;9&#47;17<br> * @Version: 1.0.0<br> *&#47;<br>public class Change {<br><br><br>    public static void main(String[] args) {<br>        int[] values = {7, 10, 1};<br>        int total = 14;<br>        List&lt;List&lt;Integer&gt;&gt; all = change(total, values);<br>        System.out.println(all);<br>    }<br><br>    &#47;**<br>     * 递归需要符合两个条件<br>     * 1. 有终止条件<br>     * 2. 规模递减<br>     *<br>     * @param total 金额<br>     * @param coins 币值种类数组，可以无序<br>     * @return<br>     *&#47;<br>    private static List&lt;List&lt;Integer&gt;&gt; change(int total, int[] coins) {<br>        &#47;&#47;终止条件，且返回一个空列表<br>        if (total == 0) {<br>            List emptyList = new ArrayList&lt;&gt;();<br>            emptyList.add(new ArrayList&lt;&gt;());<br>            return emptyList;<br>        }<br><br>        &#47;&#47;所有解的集合<br>        List&lt;List&lt;Integer&gt;&gt; allResultList = new ArrayList&lt;&gt;();<br><br>        &#47;&#47;循环币种，每种币种都有可能有解<br>        for (int coinIdx = 0; coinIdx &lt; coins.length; coinIdx++) {<br>            &#47;&#47;规模递减<br>            int restTotal = total - coins[coinIdx];<br>            if (restTotal &lt; 0) {<br>                continue;<br>            }<br><br>            &#47;&#47;子问题的解 对应restTotal的找零问题<br>            List&lt;List&lt;Integer&gt;&gt; subResultList = change(restTotal, coins);<br><br>            for (List&lt;Integer&gt; oneResult : subResultList) {<br>                oneResult.add(coins[coinIdx]);<br>            }<br><br>            allResultList.addAll(subResultList);<br>        }<br><br><br>        return allResultList;<br>    }<br>}","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505814,"discussion_content":"解法没有问题，可能生成所有的组合。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601566169,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":249057,"user_name":"AshinInfo","can_delete":false,"product_type":"c1","uid":1299511,"ip_address":"","ucode":"098F5C74A37009","user_header":"https://static001.geekbang.org/account/avatar/00/13/d4/37/aa152ddb.jpg","comment_is_top":false,"comment_ctime":1600416521,"is_pvip":false,"replies":[{"id":"91932","content":"是的，感谢你的反馈！看的非常仔细，问题已经得到修复，目前使用的方法是：ArrayList initialCounts = new ArrayList&lt;&gt;(Collections.nCopies(values.length, 0)); &#47;&#47; 初始值(0,0)<br><br>当然了，你提供的解决方法也完全正确，可供参考。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1601562483,"ip_address":"","comment_id":249057,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600416521","product_id":100060501,"comment_content":"ArrayList&lt;Integer&gt; initialCounts = new ArrayList&lt;&gt;(values.length);    <br>Collections.fill(initialCounts, 0); &#47;&#47; 初始值(0,0)<br>这里要改成<br>ArrayList&lt;Integer&gt; initialCounts = new ArrayList&lt;&gt;(values.length);<br>initialCounts.add(0);<br>initialCounts.add(0);<br>不然会报错","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505813,"discussion_content":"是的，感谢你的反馈！看的非常仔细，问题已经得到修复，目前使用的方法是：ArrayList initialCounts = new ArrayList&amp;lt;&amp;gt;(Collections.nCopies(values.length, 0)); // 初始值(0,0)\n\n当然了，你提供的解决方法也完全正确，可供参考。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601562483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248892,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1600348876,"is_pvip":true,"replies":[{"id":"91935","content":"这种深度优先搜索的方法思路是正确的。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1601566208,"ip_address":"","comment_id":248892,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600348876","product_id":100060501,"comment_content":"```java<br>    public List&lt;String&gt; generateParenthesis(int n) {<br>        List&lt;String&gt; res = new ArrayList&lt;&gt;();<br>        dfs(0,0,n,new char[2 * n],res);<br>        return res;<br>    }<br><br>    private void dfs(int l,int r,int n,char[] s,List&lt;String&gt; res){<br>        &#47;&#47;有效的()需要成对出现，所以左括号数加右括号数等于2 * n时括号生成完成<br>        if(2 * n == l + r){<br>            res.add(String.valueOf(s));<br>            return;<br>        }<br>        <br>        &#47;&#47;下一轮前进一位，且覆盖掉前一轮走过地方，有回溯的效果<br>        if(l &lt; n){            <br>            s[l+r] = &#39;(&#39;;<br>            dfs(l+1,r,n,s,res);<br>        }<br>        <br>        if(r &lt; l){<br>            s[l+r] = &#39;)&#39;;<br>            dfs(l,r+1,n,s,res);<br>        }        <br>    }<br>```","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505769,"discussion_content":"这种深度优先搜索的方法思路是正确的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601566208,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248556,"user_name":"群","can_delete":false,"product_type":"c1","uid":1843313,"ip_address":"","ucode":"F8A363F19DAB9B","user_header":"https://static001.geekbang.org/account/avatar/00/1c/20/71/ad3465c0.jpg","comment_is_top":false,"comment_ctime":1600221387,"is_pvip":false,"replies":[{"id":"91301","content":"赞，这种解法虽然没有使用回溯， 但是有效的避免了重复计算。可以解决问题。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1600269431,"ip_address":"","comment_id":248556,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600221387","product_id":100060501,"comment_content":"#include &lt;iostream&gt;<br>#include &lt;vector&gt;<br>#include &lt;string&gt;<br><br>using namespace std;<br><br>vector&lt;string&gt; res;<br>void validSolu(int left, int right, string s)<br>{ &#47;&#47; 当前剩下左括号数left,右括号数right<br>    if (left == 0 &amp;&amp; right == 0) <br>    {<br>        res.push_back(s);<br>        return;<br>    }<br>    if (left &lt; 0 || right &lt; 0) return;<br>    if (left &gt; right) return;<br>    &#47;&#47; 1)先放左括号<br>    --left;<br>    s += &#39;(&#39;;<br>    validSolu(left, right, s);<br>    ++left;<br>    s.pop_back();<br>    &#47;&#47; 2)复原后，再放右括号<br>    --right;<br>    s += &#39;)&#39;;<br>    validSolu(left, right, s);<br>    ++right;<br>    s.pop_back();<br>}<br><br>int main()<br>{<br>    int n = 3; &#47;&#47; 输入有几组括号<br>    string s;<br>    validSolu(n, n, s);<br>    for (auto elem : res)<br>        cout &lt;&lt; elem &lt;&lt; endl;<br>    return 0;<br>}","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505682,"discussion_content":"赞，这种解法虽然没有使用回溯， 但是有效的避免了重复计算。可以解决问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1600269431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248553,"user_name":"廖熊猫","can_delete":false,"product_type":"c1","uid":1141444,"ip_address":"","ucode":"8E8C475CD11FBC","user_header":"https://static001.geekbang.org/account/avatar/00/11/6a/c4/8679ca8a.jpg","comment_is_top":false,"comment_ctime":1600221078,"is_pvip":false,"replies":[{"id":"91934","content":"枚举了所有新增括号的方式，可以作为一种递归的解法。","user_name":"作者回复","user_name_real":"卢誉声","uid":"1006976","ctime":1601566194,"ip_address":"","comment_id":248553,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1600221078","product_id":100060501,"comment_content":"let set = new Set();<br>function parentheses(num, result, left = &#39;&#39;, right = &#39;&#39;) {<br>    if (!num) {<br>        result.add(left + right);<br>        return;<br>    }<br><br>    parentheses(num - 1, result, left + &#39;(&#39;, right + &#39;)&#39;);<br>    parentheses(num - 1, result, left + &#39;()&#39;, right);<br>    parentheses(num - 1, result, &#39;()&#39; + left , right);<br>    parentheses(num - 1, result, left , &#39;()&#39; + right);<br>    parentheses(num - 1, result, left , right + &#39;()&#39;);<br>}<br><br>parentheses(4, set);<br><br>for(let p of set) {<br>    console.log(p);<br>}<br>（以上为JS）<br>把括号分为左还有右两部分，然后每次递归的时候枚举所有新增括号的方式：<br>  1. 左右各一半。<br>  2. 整个放在左边部分的右边。<br>  3. 整个放在左边部分的左边。<br>  4. 整个放在右边部分的左边。<br>  5. 整个放在右边部分的右边。<br>剩余括号组数 -1。<br><br>当没有剩余组数的时候，合并左右两边加入到结果中（因为会出现重复的情况，使用了一个set[偷懒](划掉))， 最后打印出来所有的组合结果。<br>","like_count":0,"discussions":[{"author":{"id":1006976,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5d/80/0c52be53.jpg","nickname":"卢誉声","note":"","ucode":"93C5EFC39EB9C6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505681,"discussion_content":"枚举了所有新增括号的方式，可以作为一种递归的解法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1601566194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}