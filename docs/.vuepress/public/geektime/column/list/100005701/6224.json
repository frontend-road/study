{"id":6224,"title":"第15讲 | 深入区块链技术（七）：哈希与加密算法","content":"<p>区块链最核心的两个技术点是共识机制和密码学，由于共识机制是公链的基础，所以这部分内容我已经在前面的内容中优先讲解了。</p>\n<p>接下来，我来讲一讲区块链的密码学基础，有关区块链密码学你只需要了解它的基本原理和优劣即可。</p>\n<p>另外，区块链的密码学中文资料也十分丰富，如果你感兴趣的话，可以在学有余力的基础上酌情深入。</p>\n<p>区块链中主要应用了两类密码学算法，第一类是哈希算法，第二类是非对称加密算法。</p>\n<p>我们先来看看哈希算法。</p>\n<h2 id=\"1-\">1.哈希算法</h2>\n<p>哈希算法是一类数学函数算法，又称散列算法，它是一种数据映射关系。</p>\n<p>为了方便举例，我们假设 h = HASH( X | z )，你输入一个任意长的数据z，经过哈希运算后，返回给你固定长度的数据h，z叫做原像，h是哈希结果，又称作“数据指纹”，z可选的数据集合构成了X。</p>\n<p>哈希算法具有下面的4种特性。</p>\n<ol>\n<li><strong>原像不可逆。</strong>原像不可逆是指对于任意给定的h，都无法依据h自身的信息推导出z。</li>\n<li><strong>难题友好性。</strong>难题友好性通俗的理解就是如果要得到难题答案，你只能暴力枚举，没有比这更好的方法。在h = HASH( X | z )中，从h无法推导出z，只能不断地计算尝试，那么z所在的数值集合构成了X，X的大小是哈希算法的安全因子之一。</li>\n<li><strong>发散性。</strong>发散性是指对于任意的z，即使我们只改动非常少的信息量，例如改动1个比特位生成z&#39;，那么HASH(z) 与 HASH(z&#39;) 就是两个大相径庭的结果，完全不相似。</li>\n<li><strong>抗碰撞性。</strong>抗碰撞性是指对于任意两个不相同的z，那么他们对应的h值也不同。如果对于任意的 y 不等于 z，则  HASH(y) 不等于 HASH(z)；满足上述定义哈希特性的算法，我们也称作具有严格抗碰撞性。如果我们任意给定一个z，你都无法找到另外一个z&#39;，使得其值也等于h，满足这样的哈希特性的算法就有弱抗碰撞性。</li>\n</ol>\n<p>目前流行的 Hash 算法包括了MD5、SHA-1 和 SHA-2，其中MD5被证明不具有强抗碰撞性。SHA （Secure Hash Algorithm）是一个 Hash 函数族，分为SHA-1、SHA-2、SHA-3，代表了三代哈希标准，目前使用比较多的是SHA-2系列。</p>\n<p>第一代的SHA-1 基于 MD4设计，并且模仿了该算法，SHA-1 已被证明了不具备“强抗碰撞性”，所以安全性不够高。</p>\n<p>为了提高安全性，第二代 SHA-2一共包含了 SHA-224、SHA-256、SHA-384，和 SHA-512 算法（统称为 SHA-2），它们跟 SHA-1 算法原理类似。SHA-3 相关算法也已被提出，它的出现并不是要取代SHA-2，因为SHA-2目前并没有出现明显的弱点。</p>\n<p>由于对MD5、和SHA-1出现成功的破解，我们需要一个不同与之前算法，可替换的加密散列算法，也就是现在的 SHA-3。</p>\n<h3 id=\"1-1-\">1.1 区块链上的哈希算法</h3>\n<p>哈希算法被广泛地使用在构造和验证区块、交易的完整性上，由于哈希算法的四个特性，使得我们可以把任意的交易数据做成数据摘要，然后再一个一个链接起来，形成数据块的链式结构。</p>\n<p>这样我们可以通过验证每个区块间接地验证交易，然后每个交易原数据也可以做成哈希数据摘要，用于验证交易数据的完整性。</p>\n<p>我们借用比特币开发者文档中的图，这个图表达了区块链的基本数据结构，</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/0c/03/0c4e65db96ced396a61f6f4a17efe803.png?wh=1252*684\" alt=\"\"></p>\n<p>在图中可以看出，当前区块里面包含上一个区块的哈希，形成一个哈希指针链表，由于哈希的发散性，所以这个链表也有极大的发散性。</p>\n<p>我们可以用代码模拟一遍，我们先列表构造5个简化的区块，其中第一个块是创世区块，我们规定它指向的前向区块的哈希全为零；</p>\n<p>后面第2个块，第3个块中content分别记录了两笔交易，这里为了方便理解，我使用了文字表述交易的内容，实际上，区块链上的交易是二进制格式化的数据，而不是文本数据。代码中并没有填充哈希，是在运行时填充的。</p>\n<pre><code>#!/usr/bin/env python\nimport hashlib\n\ndef main():\n# example:\nblock_headers = [\n        {&quot;prev_block_hash&quot;:&quot;0000000000000000000000000000000000000000000000000000000000000000&quot;, &quot;content&quot;:&quot;genesis block:A pay C 12.3 BTC&quot;},\n        {&quot;prev_block_hash&quot;:&quot;to_be_hashed&quot;, &quot;content&quot;:&quot;2nd block:C pay B 2.0 BTC&quot;},\n        {&quot;prev_block_hash&quot;:&quot;to_be_hashed&quot;, &quot;content&quot;:&quot;3th block:transactions...&quot;},\n        {&quot;prev_block_hash&quot;:&quot;to_be_hashed&quot;, &quot;content&quot;:&quot;4th block:transactions...j&quot;},\n        {&quot;prev_block_hash&quot;:&quot;to_be_hashed&quot;, &quot;content&quot;:&quot;5th block:transactions...&quot;}\n        ]\n\n# hash prev block header\nindex = 0\nfor header in block_headers:\n    # genesis block, ignore\n    if index == 0:\n        print header\n        index = index + 1\n        continue\n\n    # generate hash chain\n    prev_block_header = block_headers[index - 1]\n    target_buffer = prev_block_header[&quot;content&quot;] + prev_block_header[&quot;prev_block_hash&quot;]\n    header[&quot;prev_block_hash&quot;] = hashlib.sha256(target_buffer).hexdigest()\n    print header\n    index = index + 1\nif __name__ == &#39;__main__&#39;:\nmain()\n</code></pre><p>我们可以直接得到结果，这是一个典型的哈希指针链表，每一个区块的prev_block_hash域指向上一个区块哈希。</p>\n<pre><code>{&#39;content&#39;: &#39;genesis block:A pay C 12.3 BTC&#39;, &#39;prev_block_hash&#39;: &#39;0000000000000000000000000000000000000000000000000000000000000000&#39;}\n\n{&#39;content&#39;: &#39;2nd block:C pay B 2.1 BTC&#39;, &#39;prev_block_hash&#39;: &#39;01279c1208a8eca3d4a47a123119b04f1dcc592c818aace2715b2c418b38822a&#39;}\n\n{&#39;content&#39;: &#39;3th block:transactions...&#39;, &#39;prev_block_hash&#39;: &#39;6d96c220b22371dc1d2b3549da42bd3ea2191f07f18112bf195bc6675bbc6b97&#39;}\n\n{&#39;content&#39;: &#39;4th block:transactions...j&#39;, &#39;prev_block_hash&#39;: &#39;9e41c61fa151320145a56a38e85c01b8c025729614f4c10596d99068ea0b3395&#39;}\n\n{&#39;content&#39;: &#39;5th block:transactions...&#39;, &#39;prev_block_hash&#39;: &#39;34f002b445a38fa7402e590629e76943060ffc4de96b1b9bc6b0f564e5a7bc72&#39;}\n</code></pre><p>如果我们将第二块中的content从&quot;C pay B 2.1 BTC&quot; 修改为 &quot;C pay B 2.0 BTC&quot;，那么我们将得到如下结果，我们可以发现从第三个块往后所有的块指向的前一个区块的哈希都不再与上面的一致。</p>\n<pre><code>{&#39;content&#39;: &#39;genesis block:A pay C 12.3 BTC&#39;, &#39;prev_block_hash&#39;: &#39;0000000000000000000000000000000000000000000000000000000000000000&#39;}\n\n{&#39;content&#39;: &#39;2nd block:C pay B 2.0 BTC&#39;, &#39;prev_block_hash&#39;: &#39;01279c1208a8eca3d4a47a123119b04f1dcc592c818aace2715b2c418b38822a&#39;}\n\n{&#39;content&#39;: &#39;3th block:transactions...&#39;, &#39;prev_block_hash&#39;: &#39;f91faad6b874fb97a20ad9cbc57ef1302a431a2cce4ac5efe28a64b353526849&#39;}\n\n{&#39;content&#39;: &#39;4th block:transactions...j&#39;, &#39;prev_block_hash&#39;: &#39;99d17dfe9a9fab68cffd6a82bc3786fe3c2d3165f1fba30b3f2ffc418c97fc8b&#39;}\n\n{&#39;content&#39;: &#39;5th block:transactions...&#39;, &#39;prev_block_hash&#39;: &#39;d2f42291ef0811e5babc1d38ca8019ee457f84b323a3d549a04b6a4535357d7f&#39;}\n</code></pre><p>以上我们构造了一个极简的区块链的基本结构，区块头描述了一个区块的基本信息，在实际应用中，里面通常包含了下面的几个内容。 </p>\n<p><img src=\"https://static001.geekbang.org/resource/image/73/37/73e78324c6c1e360afab9eb8f051d937.png?wh=1776*664\" alt=\"\"></p>\n<p>图中有当前区块高度、本区块的哈希、前一区块哈希、nonce值等等。</p>\n<p>所以前一区块哈希是一个区块头必备的数据域，这种链式结构具备发散传导性，越往历史以前的篡改，越容易导致大面积的影响，这也叫做历史逆向修改困难。</p>\n<p>在PoW共识机制的情况下，这种逆向修改的难度会随着当前全网算力线性增长。</p>\n<h3 id=\"1-2-merkle-tree-\">1.2 默克尔树（Merkle tree）</h3>\n<p>哈希算法的一个重要应用是默克尔树（Merkle tree），默克尔树是一种数据结构，通常是一个二叉树，也有可能是多叉树，它以特定的方式逐层向上计算，直到顶部，最顶层叫做默克尔根，默克尔树最为常见和最简单的是二叉默克尔树。</p>\n<p>默克尔树的基本结构如下图。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/91/2e/91a74bdc394f2f79a202c49a2f0c722e.png?wh=1055*633\" alt=\"\">\n（图片来自维基百科）</p>\n<p>比特币和以太坊都使用了默克尔树这种数据结构，只不过里面存放的数据都是哈希。我们在比特币的核心版本源码中可以发现注释中有介绍。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/d1/21/d114ccc1d247e41b18d9af5c3b819321.png?wh=1080*1370\" alt=\"\"></p>\n<p>（图片来自比特币Core源码）</p>\n<p>以太坊中针对比特币的设计做了改进，叫做默克尔帕特里夏树(Merkle Patricia tree），相对于比特币在块头中只有一棵树，以太坊有三棵树。</p>\n<p>区块链的挖矿算法也应用了哈希算法，挖矿算法利用的是其难题友好性，我们在PoW共识机制中讲解过，这里不再赘述。</p>\n<!-- [[[read_end]]] -->\n<h2 id=\"2-\">2.非对称加密算法</h2>\n<p>非对称加密算法是相对于对称算法而言的，这两者组成了密码学的核心内容。</p>\n<p>这两者的使用区别体现在密钥是否可以公开，对称密钥要求加解密过程均使用相同的密钥，而非对称加密可以提供一对钥匙，私钥自己保管，公钥可以公开。</p>\n<p>常见的对称加密算法有 DES、3DES、AES、IDEA， 常见的非对称加密算法有RSA、ECC等。</p>\n<p>在比特币等众多数字货币的项目中，在账户层面主要使用的是非对称加密算法。</p>\n<p>在对称加密算法里，由于双方需要提前共享密钥，在使用过程中有诸多不便，非对称算法的出现解决了这一难题。</p>\n<p>在非对称算法中，私钥一般是通过一个随机数产生的，这个随机数我们也叫做种子，从这个角度来说，知道了这个随机数也就等于知道了私钥，不过私钥的产生范围非常大，在比特币中是2的256次方，差不多在10的70方数量级上。</p>\n<p>如果你产生随机数的算法足够均匀分布，私钥碰撞的可能性比中了1亿大奖同时被雷劈中的概率还要小数亿倍。所以区块链对产生随机数的算法要求比较高，它要求真实的均匀随机分布，而不是计算机伪随机数。</p>\n<p>如果我们有了私钥，接下来就如图所示：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/c7/f9/c701e41eb73354a7ee241e9869b041f9.png?wh=209*590\" alt=\"\"></p>\n<p>我们从私钥到公钥，是由非对称加密算法保证的，这种算法在比特币中选择的是ECDSA算法，ECDSA算法中选择的椭圆曲线名为secp256k1。</p>\n<p>而从公钥到地址，是由哈希算法保证的，在这一步使用了SHA256和RIPEMD160。椭圆曲线加密算法ECC利用了“寻找离散对数”的难解性提供了单向不可逆性，具体原理你可以找资料了解一下。</p>\n<p>在区块链上，一个比特币交易的产生由两部分组成，第一部分是签名加锁，对应到的是交易的输出、第二部分是解锁花费，对应到的是交易的输入，当我们构造一笔交易的时候必然会用到私钥，这是所有数字货币资产控制权由私钥保证的根本原因。具体逻辑我们留到下篇讲解UTXO的时候讨论。</p>\n<p>最后来谈谈量子威胁的内容。我在讨论比特币等众多数字货币项目的时候，很多人会问我如何看待量子计算的威胁问题，大家认为量子计算的强大计算力威胁到了哈希的抗碰撞性。其实这不是一个设计缺陷，而是一个发展问题，是可以在区块链的发展过程中解决的。</p>\n<p>我对于量子计算的威胁论有以下的看法。</p>\n<ol>\n<li>即使出现了量子计算攻破非对称加密算法的问题，那么首先要看是什么算法，例如是RSA，还是ECC。</li>\n<li>其次要看攻击成本是否足够低，因为理论上的可行性并不代表工程可行性，这是两码事。例如持续攻击比特币要花费1亿美金，持续攻击时间超过20年才能生效，那么这笔买卖很明显不划算。</li>\n<li>量子计算威胁的对象不止加密货币，而是整个密码学体系，如果发生破解事件，很可能是银行、互联网后端系统，目前整个互联网应用都基于HTTPS，如果HTTPS被破解，在量子计算面前传统的账号密码几乎不可用。</li>\n<li>量子计算目前发展虽然看起来喜人，但是离实际应用还很远，很多计算其实并非是通用计算，而是专用计算，也就是说一个量子计算机写入的算法只能解决一个特定问题，而且还是概率解，可用性易用性还需要较长时间转化。</li>\n</ol>\n<h2 id=\"-\">总结</h2>\n<p>今天我向你介绍了哈希算法，讲解了区块链哪些地方使用了哈希算法，并介绍了非对称加密算法，最后还谈了一下我对量子计算威胁论的看法。</p>\n<p>密码学是所有区块链的基础，可以说如果没有密码学的支撑，区块链将会退化成普通的分布式日志系统。</p>\n<p>那么亲爱的读者，比特币地址有哪些类型呢？以太坊的地址又是如何生成的呢？你可以给我留言，我们一起讨论。感谢你的收听，我们下次再见。</p>\n<p>参考阅读：</p>\n<ol>\n<li>《区块链技术指南》</li>\n<li>《精通比特币》</li>\n<li><a href=\"https://yeasy.gitbooks.io/blockchain_guide/content/crypto/\">https://yeasy.gitbooks.io/blockchain_guide/content/crypto/</a></li>\n</ol>\n<p></p>\n","comments":[{"had_liked":false,"id":6652,"user_name":"我才是二亮","can_delete":false,"product_type":"c1","uid":1000561,"ip_address":"","ucode":"B7D27D05107C2F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/71/586fb0c8.jpg","comment_is_top":false,"comment_ctime":1524881229,"is_pvip":false,"replies":[{"id":"1898","content":"赞，打call","user_name":"作者回复","comment_id":6652,"uid":"1075874","ip_address":"","utype":1,"ctime":1524891322,"user_name_real":"betachen"}],"discussion_count":1,"race_medal":0,"score":"87424227149","product_id":100005701,"comment_content":"比特币有三种地址类型：<br>1、以数字1开头的P2PKH类型<br>2、以数字3开头的P2SH类型<br>3、以bc1开头的Bech32类型<br><br>其中：<br>1、P2PKH是支付对PubkeyHash<br>2、P2SH是支付对脚本散列(Pay-to-script-hash)<br>3、Bech32是由BIP 0173指定的segwit 地址格式。","like_count":21,"discussions":[{"author":{"id":1075874,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Tm6wv99GcGd6n5qLQHNRzdL7w3yBEWPKQkQy5otblQTrh0P6OV1nlMd1FKm5YSCBCXVKtT2GdFaJZxRw7VvvUQ/132","nickname":"陈浩","note":"","ucode":"F906AED9E2AC2F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417112,"discussion_content":"赞，打call","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1524891322,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":6900,"user_name":"朱显杰","can_delete":false,"product_type":"c1","uid":1072683,"ip_address":"","ucode":"F7B8258B941D9D","user_header":"https://static001.geekbang.org/account/avatar/00/10/5e/2b/df3983e2.jpg","comment_is_top":false,"comment_ctime":1525136618,"is_pvip":false,"replies":[{"id":"2248","content":"谢谢补充","user_name":"作者回复","comment_id":6900,"uid":"1075874","ip_address":"","utype":1,"ctime":1525745647,"user_name_real":"betachen"}],"discussion_count":1,"race_medal":0,"score":"61654678762","product_id":100005701,"comment_content":"文中没有提到，哈希算法和非对称加密相结合可以作为数字签名，这在区块链交易中应用的非常广泛","like_count":15,"discussions":[{"author":{"id":1075874,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Tm6wv99GcGd6n5qLQHNRzdL7w3yBEWPKQkQy5otblQTrh0P6OV1nlMd1FKm5YSCBCXVKtT2GdFaJZxRw7VvvUQ/132","nickname":"陈浩","note":"","ucode":"F906AED9E2AC2F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417172,"discussion_content":"谢谢补充","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525745647,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":8419,"user_name":"寄意兰舟","can_delete":false,"product_type":"c1","uid":1073137,"ip_address":"","ucode":"608AD043230EB8","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/f1/c89b209b.jpg","comment_is_top":false,"comment_ctime":1526201088,"is_pvip":false,"replies":[{"id":"2629","content":"github上搜bitcoin","user_name":"作者回复","comment_id":8419,"uid":"1075874","ip_address":"","utype":1,"ctime":1526489308,"user_name_real":"betachen"}],"discussion_count":1,"race_medal":0,"score":"23001037568","product_id":100005701,"comment_content":"比特币核心版本源码在哪里可以看到啊？能给个链接？","like_count":6,"discussions":[{"author":{"id":1075874,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Tm6wv99GcGd6n5qLQHNRzdL7w3yBEWPKQkQy5otblQTrh0P6OV1nlMd1FKm5YSCBCXVKtT2GdFaJZxRw7VvvUQ/132","nickname":"陈浩","note":"","ucode":"F906AED9E2AC2F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417708,"discussion_content":"github上搜bitcoin","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1526489308,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":6693,"user_name":"四正","can_delete":false,"product_type":"c1","uid":1082744,"ip_address":"","ucode":"EE28B8FB17E4D3","user_header":"https://static001.geekbang.org/account/avatar/00/10/85/78/20df8694.jpg","comment_is_top":false,"comment_ctime":1524900197,"is_pvip":false,"replies":[{"id":"2247","content":"是的","user_name":"作者回复","comment_id":6693,"uid":"1075874","ip_address":"","utype":1,"ctime":1525745584,"user_name_real":"betachen"}],"discussion_count":1,"race_medal":0,"score":"18704769381","product_id":100005701,"comment_content":"其实，哈希函数本质上就是把无限的信息映射到有限的空间中。无论摘要用多少个比特存储，终究是有限的。那么就必然存在碰撞的情况。当然，实际应用中这个概率可以忽略不计","like_count":5,"discussions":[{"author":{"id":1075874,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Tm6wv99GcGd6n5qLQHNRzdL7w3yBEWPKQkQy5otblQTrh0P6OV1nlMd1FKm5YSCBCXVKtT2GdFaJZxRw7VvvUQ/132","nickname":"陈浩","note":"","ucode":"F906AED9E2AC2F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417127,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1525745584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":279268,"user_name":"A君","can_delete":false,"product_type":"c1","uid":1940105,"ip_address":"","ucode":"FE96F089C2312C","user_header":"https://static001.geekbang.org/account/avatar/00/1d/9a/89/babe8b52.jpg","comment_is_top":false,"comment_ctime":1613701430,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5908668726","product_id":100005701,"comment_content":"区块链上的节点会对它上一个节点的内容+对上上节点内容的哈希再做一次（或多次）哈希并作为上一个节点的哈希，因此链上一个节点的内容更新后，它的后续所有节点的区块头都会改变，这个改动成本非常大，因此这也是区块链不可被更改的由来。","like_count":2},{"had_liked":false,"id":148836,"user_name":"iusugar","can_delete":false,"product_type":"c1","uid":1485845,"ip_address":"","ucode":"1372E5AD2068D0","user_header":"https://static001.geekbang.org/account/avatar/00/16/ac/15/935acedb.jpg","comment_is_top":false,"comment_ctime":1573093353,"is_pvip":false,"replies":[{"id":"58356","content":"前者是充分条件<br>后者是必要条件<br><br>破解是一个逆向过程，逆向过程满足必要条件即可，而我们在定义时规定的是充分条件。","user_name":"作者回复","comment_id":148836,"uid":"1075874","ip_address":"","utype":1,"ctime":1573786738,"user_name_real":"betachen"}],"discussion_count":1,"race_medal":0,"score":"5868060649","product_id":100005701,"comment_content":"“如果对于任意的 y 不等于 z，则 HASH(y) 不等于 HASH(z)；如果我们任意给定一个 z，你都无法找到另外一个 z&#39;，使得其值也等于 h”，老师这两句话难道不是一个意思吗？","like_count":2,"discussions":[{"author":{"id":1075874,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Tm6wv99GcGd6n5qLQHNRzdL7w3yBEWPKQkQy5otblQTrh0P6OV1nlMd1FKm5YSCBCXVKtT2GdFaJZxRw7VvvUQ/132","nickname":"陈浩","note":"","ucode":"F906AED9E2AC2F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":473630,"discussion_content":"前者是充分条件\n后者是必要条件\n\n破解是一个逆向过程，逆向过程满足必要条件即可，而我们在定义时规定的是充分条件。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573786738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":80531,"user_name":"朱月俊","can_delete":false,"product_type":"c1","uid":1017707,"ip_address":"","ucode":"4DA0728B862FBD","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/6b/0b6cd39a.jpg","comment_is_top":false,"comment_ctime":1553677256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5848644552","product_id":100005701,"comment_content":"请教一个问题：公钥和地址是客户互相转换的？","like_count":2},{"had_liked":false,"id":7829,"user_name":"teletime","can_delete":false,"product_type":"c1","uid":1073336,"ip_address":"","ucode":"7EE6FFD1C0DE5A","user_header":"https://static001.geekbang.org/account/avatar/00/10/60/b8/82acc94d.jpg","comment_is_top":false,"comment_ctime":1525741756,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5820709052","product_id":100005701,"comment_content":"公钥转为地址不可逆，那节点如何得到公钥？来进行交易验证","like_count":2,"discussions":[{"author":{"id":1610185,"avatar":"https://static001.geekbang.org/account/avatar/00/18/91/c9/af07f225.jpg","nickname":"欢哥","note":"","ucode":"4246C18DCFE4DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":65161,"discussion_content":"发起交易的人要带着签名+公钥作为一笔输入进行支付的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1574986998,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":179096,"user_name":"sun留白","can_delete":false,"product_type":"c1","uid":1531348,"ip_address":"","ucode":"53FEEA5E244C9A","user_header":"https://static001.geekbang.org/account/avatar/00/17/5d/d4/e5ea1c25.jpg","comment_is_top":false,"comment_ctime":1581913126,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1581913126","product_id":100005701,"comment_content":"感觉区块的追溯有点像链表，如果中间打断加入一个，改前一个和后一个补救篡改了吗？除非后一块的哈市输入值还包括前一块的hash结果。有同学可以讨论一下吗？<br>","like_count":0,"discussions":[{"author":{"id":1343480,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL23Wicb0gO9RIYCXOiajnCf92RDd0MOOGuFxx4ZKQpDDlMgLbZecMDdnfCEIPQkbebgBuic2SXfm0Gw/132","nickname":"江流","note":"","ucode":"D1FDC0777BF88B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":350240,"discussion_content":"新加一个HASH值就变了，后面计算HASH的内容也会跟着变","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613783166,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172556,"user_name":"杨家荣","can_delete":false,"product_type":"c1","uid":1259241,"ip_address":"","ucode":"3DA65396C7F002","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/g1icQRbcv1QvJ5U8Cqk0ZqMH5PcMTXcZ8TpS5utE4SUzHcnJA3FYGelHykpzTfDh55ehE8JO9Zg9VGSJW7Wxibxw/132","comment_is_top":false,"comment_ctime":1579223393,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1579223393","product_id":100005701,"comment_content":"极客时间第二期<br>21天打卡行动 13&#47;21<br>&lt;&lt;深入浅出区块链15&gt;&gt;哈希与加密算法<br>回答老师问题<br>比特币地址有哪些类型呢？以太坊的地址又是如何生成的呢？<br>在比特币中，大多数需要向用户展示的数据都使用Base58Check编码，可以实现数据压缩，易读而且有错误检验。Base58Check编码中的版本前缀是数据的格式易于辨别，编码之后的数据头包含了明确的属性。这些属性使用户可以轻松明确被编码的数据的类型以及如何使用它们。例如我们可以看到他们的不同，Base58Check编码的比特币地址是以1开头的，而Base58Check编码的私钥WIF是以5开头的<br>[来源:https:&#47;&#47;www.jianshu.com&#47;p&#47;739903a5587b]<br>以太坊地址生成过程如下：<br>\t1. 生成 256 位随机数作为私钥。<br>\t2. 将私钥转化为 secp256k1 非压缩格式的公钥，即 512 位的公钥。<br>\t3. 使用散列算法 Keccak256 计算公钥的哈希值，转化为十六进制字符串。<br>\t4. 取十六进制字符串的后 40 个字母，开头加上 0x 作为地址。<br>[来源:https:&#47;&#47;blog.csdn.net&#47;u013137970&#47;article&#47;details&#47;87821243]<br>今日所学:<br>1,哈希算法是一类数学函数算法，又称散列算法，它是一种数据映射关系;<br>2,哈希算法具有下面的 4 种特性:原像不可逆,难题友好性,发散性,抗碰撞性。<br>3,区块链上的哈希算法:哈希算法被广泛地使用在构造和验证区块、交易的完整性上，由于哈希算法的四个特性，使得我们可以把任意的交易数据做成数据摘要，然后再一个一个链接起来，形成数据块的链式结构<br>4,哈希算法的一个重要应用是默克尔树（Merkle tree），默克尔树是一种数据结构，通常是一个二叉树，也有可能是多叉树，它以特定的方式逐层向上计算，直到顶部，最顶层叫做默克尔根，默克尔树最为常见和最简单的是二叉默克尔树。<br>5,非对称加密算法:非对称加密可以提供一对钥匙，私钥自己保管，公钥可以公开。<br>6,量子威胁可能不成立;<br>","like_count":0},{"had_liked":false,"id":160249,"user_name":"小老鼠","can_delete":false,"product_type":"c1","uid":1257460,"ip_address":"","ucode":"C663A0C863A515","user_header":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","comment_is_top":false,"comment_ctime":1575898796,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575898796","product_id":100005701,"comment_content":"私钥生成公钥，公钥生成地址，反向不成立。","like_count":0},{"had_liked":false,"id":159058,"user_name":"xfan","can_delete":false,"product_type":"c1","uid":1315147,"ip_address":"","ucode":"48ED8D498D7F56","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","comment_is_top":false,"comment_ctime":1575528604,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1575528604","product_id":100005701,"comment_content":"矿工怎么拿到对方的公钥呢，","like_count":0,"discussions":[{"author":{"id":1257460,"avatar":"https://static001.geekbang.org/account/avatar/00/13/2f/f4/2dede51a.jpg","nickname":"小老鼠","note":"","ucode":"C663A0C863A515","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":77273,"discussion_content":"公钥是对任何人公开的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575898716,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":159034,"user_name":"xfan","can_delete":false,"product_type":"c1","uid":1315147,"ip_address":"","ucode":"48ED8D498D7F56","user_header":"https://static001.geekbang.org/account/avatar/00/14/11/4b/fa64f061.jpg","comment_is_top":false,"comment_ctime":1575517998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575517998","product_id":100005701,"comment_content":"真实的均匀的 随机数 有没有什么解决方案呢","like_count":0},{"had_liked":false,"id":6624,"user_name":"良辰美景","can_delete":false,"product_type":"c1","uid":1074803,"ip_address":"","ucode":"B36E6955A2872D","user_header":"https://static001.geekbang.org/account/avatar/00/10/66/73/fd1e37a2.jpg","comment_is_top":false,"comment_ctime":1524877736,"is_pvip":false,"replies":[{"id":"1899","content":"为了方便解释，举的例子。<br>扫描器即是交易验证，又是交易解锁逻辑的实现。","user_name":"作者回复","comment_id":6624,"uid":"1075874","ip_address":"","utype":1,"ctime":1524891577,"user_name_real":"betachen"}],"discussion_count":1,"race_medal":0,"score":"1524877736","product_id":100005701,"comment_content":"第二节你有个链接文章说的。每个用户都有个保密印章和印章扫描器。保密印章就是私钥么，印章扫描器又是怎么实现的","like_count":0,"discussions":[{"author":{"id":1075874,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Tm6wv99GcGd6n5qLQHNRzdL7w3yBEWPKQkQy5otblQTrh0P6OV1nlMd1FKm5YSCBCXVKtT2GdFaJZxRw7VvvUQ/132","nickname":"陈浩","note":"","ucode":"F906AED9E2AC2F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":417108,"discussion_content":"为了方便解释，举的例子。\n扫描器即是交易验证，又是交易解锁逻辑的实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1524891577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":6561,"user_name":"花子翁","can_delete":false,"product_type":"c1","uid":1073674,"ip_address":"","ucode":"A687441DC6894F","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/0a/26d00cb9.jpg","comment_is_top":false,"comment_ctime":1524832174,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1524832174","product_id":100005701,"comment_content":"老师给的课后读物很赞","like_count":0}]}