{"id":301739,"title":"12 | 局部敏感哈希：如何在常数时间内搜索Embedding最近邻？","content":"<p>你好，我是王喆。</p><p>在深度学习推荐系统中，我们经常采用Embedding召回这一准确又便捷的方法。但是，在面对百万甚至更高量级的候选集时，线性地逐一计算Embedding间的相似度，往往会造成极大的服务延迟。</p><p>这个时候，我们要解决的问题就是，<strong>如何快速找到与一个Embedding最相似的Embedding？</strong>这直接决定了召回层的执行速度，进而会影响推荐服务器的响应延迟。</p><p>今天，我们就一起来学习一下业界解决近似Embedding搜索的主要方法，局部敏感哈希。</p><h2>推荐系统中的“快速”Embedding最近邻搜索问题</h2><p>在深度学习推荐系统中，我们经常会使用Embedding方法对物品和用户进行向量化。在训练物品和用户的Embedding向量时，如果二者的Embedding在同一个向量空间内（如图1），我们就可以通过内积、余弦、欧式距离等相似度计算方法，来计算它们之间的相似度，从而通过用户-物品相似度进行个性化推荐，或者通过物品-物品相似度进行相似物品查找。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/54/7f7f9647565848d0d530d27d96927654.jpeg?wh=1920*1080\" alt=\"\" title=\"图1 用户和电影的Embedding向量空间\"></p><p>假设，用户和物品的Embeding都在一个$k$维的Embedding空间中，物品总数为$n$，那么遍历计算一个用户和所有物品向量相似度的时间复杂度是多少呢？不难算出是$O(k×n)$。虽然这一复杂度是线性的，但物品总数$n$达到百万甚至千万量级时，线性的时间复杂度也是线上服务不能承受的。</p><!-- [[[read_end]]] --><p>换一个角度思考这个问题，由于用户和物品的Embedding同处一个向量空间内，因此<strong>召回与用户向量最相似的物品Embedding向量这一问题，其实就是在向量空间内搜索最近邻的过程</strong>。如果我们能够找到高维空间快速搜索最近邻点的方法，那么相似Embedding的快速搜索问题就迎刃而解了。</p><h2>使用“聚类”还是“索引”来搜索最近邻？</h2><p>遇到最近邻搜索的问题，我想大部分同学直觉上肯定会想到两种解决方案，<strong>一种是聚类</strong>，我们把相似的点聚类到一起，不就可以快速地找到彼此间的最近邻了吗？<strong>另一种是索引</strong>，比如，我们通过某种数据结构建立基于向量距离的索引，在查找最近邻的时候，通过索引快速缩小范围来降低复杂度。这两种想法可不可行呢？我们一一尝试一下。</p><p>对于聚类问题，我想最经典的算法当属K-means。它完成聚类的过程主要有以下几步：</p><ol>\n<li>随机指定k个中心点；</li>\n<li>每个中心点代表一个类，把所有的点按照距离的远近指定给距离最近的中心点代表的类；</li>\n<li>计算每个类包含点的平均值作为新的中心点位置；</li>\n<li>确定好新的中心点位置后，迭代进入第2步，直到中心点位置收敛，不再移动。</li>\n</ol><p>到这里，整个K-means的迭代更新过程就完成了，你可以看下图2。</p><p><img src=\"https://static001.geekbang.org/resource/image/5d/90/5d93557a390be7dabc82ffdd6baebc90.jpeg?wh=1920*1080\" alt=\"\" title=\"图2 三中心点的K-means算法迭代过程\"></p><p>如果我们能够在离线计算好每个Embedding向量的类别，在线上我们只需要在同一个类别内的Embedding向量中搜索就可以了，这会大大缩小了Embedding的搜索范围，时间复杂度自然就下降了。</p><p>但这个过程还是存在着一些边界情况。比如，聚类边缘的点的最近邻往往会包括相邻聚类的点，如果我们只在类别内搜索，就会遗漏这些近似点。此外，中心点的数量k也不那么好确定，k选得太大，离线迭代的过程就会非常慢，k选得太小，在线搜索的范围还是很大，并没有减少太多搜索时间。所以基于聚类的搜索还是有一定局限性的，解决上面的问题也会增加过多冗余过程，得不偿失。</p><p>既然聚类有局限性，那索引能不能奏效呢？我们这里可以尝试一下经典的向量空间索引方法Kd-tree（K-dimension tree）。与聚类不同，它是为空间中的点/向量建立一个索引。这该怎么理解呢？</p><p>举个例子，你可以看下图3中的点云，我们先用红色的线把点云一分为二，再用深蓝色的线把各自片区的点云一分为二，以此类推，直到每个片区只剩下一个点，这就完成了空间索引的构建。如果我们能够把这套索引“搬”到线上，就可以利用二叉树的结构快速找到邻接点。比如，希望找到点q的m个邻接点，我们就可以先搜索它相邻子树下的点，如果数量不够，我们可以向上回退一个层级，搜索它父片区下的其他点，直到数量凑够m个为止。</p><p><img src=\"https://static001.geekbang.org/resource/image/df/3f/dfb2c271d9eaa3a29054d2aea24b5e3f.jpeg?wh=1920*1080\" alt=\"\" title=\"图3 Kd-tree索引\"></p><p>听上去Kd-tree索引似乎是一个完美的方案，但它还是无法完全解决边缘点最近邻的问题。对于点q来说，它的邻接片区是右上角的片区，但是它的最近邻点却是深蓝色切分线下方的那个点。所以按照Kd-tree的索引方法，我们还是会遗漏掉最近邻点，它只能保证快速搜索到近似的最近邻点集合。而且Kd-tree索引的结构并不简单，离线和在线维护的过程也相对复杂，这些都是它的弊端。那有没有更“完美”的解决方法呢？</p><h2>局部敏感哈希的基本原理及多桶策略</h2><p>为了“拯救”我们推荐系统的召回层，“局部敏感哈希”（Locality Sensitive Hashing,LSH）这一方法横空出世，它用简洁而高效的方法几乎完美地解决了这一问题。那它是怎么做到的呢？</p><h3>1. 局部敏感哈希的基本原理</h3><p>局部敏感哈希的基本思想是希望让相邻的点落入同一个“桶”，这样在进行最近邻搜索时，我们仅需要在一个桶内，或相邻几个桶内的元素中进行搜索即可。如果保持每个桶中的元素个数在一个常数附近，我们就可以把最近邻搜索的时间复杂度降低到常数级别。</p><p>那么，如何构建局部敏感哈希中的“桶”呢？下面，我们以基于欧式距离的最近邻搜索为例，来解释构建局部敏感哈希“桶”的过程。</p><p>首先，我们要弄清楚一个问题，如果将高维空间中的点向低维空间进行映射，其欧式相对距离是不是会保持不变呢？以图4为例，图4中间的彩色点处在二维空间中，当我们把二维空间中的点通过不同角度映射到a、b、c这三个一维空间时，可以看到原本相近的点，在一维空间中都保持着相近的距离。而原本远离的绿色点和红色点在一维空间a中处于接近的位置，却在空间b中处于远离的位置。</p><p>因此我们可以得出一个定性的结论：<strong>欧式空间中，将高维空间的点映射到低维空间，原本接近的点在低维空间中肯定依然接近，但原本远离的点则有一定概率变成接近的点。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/d9/55/d9476e92e9a6331274e18abc416db955.jpeg?wh=1920*1080\" alt=\"\" title=\"图4 高维空间点向低维空间映射\"></p><p>利用低维空间可以保留高维空间相近距离关系的性质，我们就可以构造局部敏感哈希“桶”。对于Embedding向量来说，由于Embedding大量使用内积操作计算相似度，因此我们也可以用内积操作来构建局部敏感哈希桶。假设$v$是高维空间中的k维Embedding向量，$x$是随机生成的k维映射向量。那我们利用内积操作可以将$v$映射到一维空间，得到数值$h(v)=v·x$。</p><p>而且，我们刚刚说了，一维空间也会部分保存高维空间的近似距离信息。因此，我们可以使用哈希函数$h(v)$进行分桶，公式为：$h^{x, b}(v)=\\left\\lfloor\\frac{x \\cdot v+b}{w}\\right]$ 。其中， ⌊⌋ 是向下取整操作， $w$是分桶宽度，$b$是0到w间的一个均匀分布随机变量，避免分桶边界固化。</p><p>不过，映射操作会损失部分距离信息，如果我们仅采用一个哈希函数进行分桶，必然存在相近点误判的情况，因此，我们可以采用m个哈希函数同时进行分桶。如果两个点同时掉进了m个桶，那它们是相似点的概率将大大增加。通过分桶找到相邻点的候选集合后，我们就可以在有限的候选集合中通过遍历找到目标点真正的K近邻了。</p><p>刚才我们讲的哈希策略是基于内积操作来制定的，内积相似度也是我们经常使用的相似度度量方法，事实上距离的定义有很多种，比如“曼哈顿距离”“切比雪夫距离”“汉明距离”等等。针对不同的距离定义，分桶函数的定义也有所不同，但局部敏感哈希通过分桶方式保留部分距离信息，大规模降低近邻点候选集的本质思想是通用的。</p><h3>2. 局部敏感哈希的多桶策略</h3><p>刚才我们讲到了可以使用多个分桶函数的方式来增加找到相似点的概率。那你可能有疑问，如果有多个分桶函数的话，具体应该如何处理不同桶之间的关系呢？这就涉及局部敏感哈希的多桶策略。</p><p>假设有A、B、C、D、E五个点，有h<sub>1</sub>和h<sub>2</sub>两个分桶函数。使用h<sub>1</sub>来分桶时，A和B掉到了一个桶里，C、D、E掉到了一个桶里；使用h<sub>2</sub>来分桶时，A、C、D掉到了一个桶里，B、E在一个桶。那么请问如果我们想找点C的最近邻点，应该怎么利用两个分桶结果来计算呢？</p><p>如果我们用“且”（And）操作来处理两个分桶结果之间的关系，那么结果是这样的，找到与点C在h<sub>1</sub>函数下同一个桶的点，且在h<sub>2</sub>函数下同一个桶的点，作为最近邻候选点。我们可以看到，满足条件的点只有一个，那就是点D。也就是说，点D最有可能是点C的最近邻点。</p><p>用“且”操作作为多桶策略，可以最大程度地减少候选点数量。但是，由于哈希分桶函数不是一个绝对精确的操作，点D也只是最有可能的最近邻点，不是一定的最近邻点，因此，“且”操作其实也增大了漏掉最近邻点的概率。</p><p>那如果我们采用“或”（Or）操作作为多桶策略，又会是什么情况呢？具体操作就是，我们找到与点C在h<sub>1</sub>函数下同一个桶的点，或在h<sub>2</sub>函数下同一个桶的点。这个时候，我们可以看到候选集中会有三个点，分别是A、D、E。这样一来，虽然我们增大了候选集的规模，减少了漏掉最近邻点的可能性，但增大了后续计算的开销。</p><p>当然，局部敏感哈希的多桶策略还可以更加复杂，比如使用3个分桶函数分桶，把同时落入两个桶的点作为最近邻候选点等等。</p><p>那么，我们到底应该选择“且”操作还是“或”操作，以及到底该选择使用几个分桶函数，每个分桶函数分几个桶呢？这些都还是工程上的权衡问题。我虽然不能给出具体的最佳数值，但可以给你一些取值的建议：</p><ol>\n<li>点数越多，我们越应该增加每个分桶函数中桶的个数；相反，点数越少，我们越应该减少桶的个数；</li>\n<li>Embedding向量的维度越大，我们越应该增加哈希函数的数量，尽量采用且的方式作为多桶策略；相反，Embedding向量维度越小，我们越应该减少哈希函数的数量，多采用或的方式作为分桶策略。</li>\n</ol><p>最后，我们再回头来解决课程开头提出的问题，局部敏感哈希能在常数时间得到最近邻的结果吗？答案是可以的，如果我们能够精确地控制每个桶内的点的规模是$C$，假设每个Embedding的维度是$N$，那么找到最近邻点的时间开销将永远在$O(C·N)$量级。采用多桶策略之后，假设分桶函数数量是$K$，那么时间开销也在$O(K·C·N)$量级，这仍然是一个常数。</p><h2>局部敏感哈希实践</h2><p>现在，我们已经知道了局部敏感哈希的基本原理和多桶策略，接下来我们一起进入实践环节，利用Sparrow Recsys训练好的物品Embedding，来实现局部敏感哈希的快速搜索吧。为了保证跟Embedding部分的平台统一，这一次我们继续使用Spark MLlib完成LSH的实现。</p><p>在将电影Embedding数据转换成dense Vector的形式之后，我们使用Spark MLlib自带的LSH分桶模型BucketedRandomProjectionLSH（我们简称LSH模型）来进行LSH分桶。其中最关键的部分是设定LSH模型中的BucketLength和NumHashTables这两个参数。其中，BucketLength指的就是分桶公式中的分桶宽度w，NumHashTables指的是多桶策略中的分桶次数。</p><p>清楚了模型中的关键参数，执行的过程就跟我们讲过的其他Spark MLlib模型一样了，都是先调用fit函数训练模型，再调用transform函数完成分桶的过程，具体的实现你可以参考下面的代码。</p><pre><code>def embeddingLSH(spark:SparkSession, movieEmbMap:Map[String, Array[Float]]): Unit ={\n  //将电影embedding数据转换成dense Vector的形式，便于之后处理\n  val movieEmbSeq = movieEmbMap.toSeq.map(item =&gt; (item._1, Vectors.dense(item._2.map(f =&gt; f.toDouble))))\n  val movieEmbDF = spark.createDataFrame(movieEmbSeq).toDF(&quot;movieId&quot;, &quot;emb&quot;)\n\n\n  //利用Spark MLlib创建LSH分桶模型\n  val bucketProjectionLSH = new BucketedRandomProjectionLSH()\n    .setBucketLength(0.1)\n    .setNumHashTables(3)\n    .setInputCol(&quot;emb&quot;)\n    .setOutputCol(&quot;bucketId&quot;)\n  //训练LSH分桶模型\n  val bucketModel = bucketProjectionLSH.fit(movieEmbDF)\n  //进行分桶\n  val embBucketResult = bucketModel.transform(movieEmbDF)\n  \n  //打印分桶结果\n  println(&quot;movieId, emb, bucketId schema:&quot;)\n  embBucketResult.printSchema()\n  println(&quot;movieId, emb, bucketId data result:&quot;)\n  embBucketResult.show(10, truncate = false)\n  \n  //尝试对一个示例Embedding查找最近邻\n  println(&quot;Approximately searching for 5 nearest neighbors of the sample embedding:&quot;)\n  val sampleEmb = Vectors.dense(0.795,0.583,1.120,0.850,0.174,-0.839,-0.0633,0.249,0.673,-0.237)\n  bucketModel.approxNearestNeighbors(movieEmbDF, sampleEmb, 5).show(truncate = false)\n}\n\n</code></pre><p>为了帮助你更加直观的看到分桶操作的效果，我把使用LSH模型对电影Embedding进行分桶得到的五个结果打印了出来，如下所示：</p><pre><code>+-------+-----------------------------+------------------+\n|movieId|emb                          |bucketId          |\n+-------+-----------------------------+------------------------+\n|710    |[0.04211471602320671,..]     |[[-2.0], [14.0], [8.0]] |\n|205    |[0.6645985841751099,...]     |[[-4.0], [3.0], [5.0]]  |\n|45     |[0.4899883568286896,...]     |[[-6.0], [-1.0], [2.0]] |\n|515    |[0.6064003705978394,...]     |[[-3.0], [-1.0], [2.0]] |\n|574    |[0.5780771970748901,...]     |[[-5.0], [2.0], [0.0]]  |\n+-------+-----------------------------+------------------------+\n\n</code></pre><p>你可以看到在BucketId这一列，因为我们之前设置了NumHashTables参数为3，所以每一个Embedding对应了3个BucketId。在实际的最近邻搜索过程中，我们就可以利用刚才讲的多桶策略进行搜索了。</p><p>事实上，在一些超大规模的最近邻搜索问题中，索引、分桶的策略还能进一步复杂。如果你有兴趣深入学习，我推荐你去了解一下<a href=\"https://github.com/facebookresearch/faiss\">Facebook的开源向量最近邻搜索库FAISS</a>，这是一个在业界广泛应用的开源解决方案。</p><h2>小结</h2><p>本节课，我们一起解决了“Embedding最近邻搜索”问题。</p><p>事实上，对于推荐系统来说，我们可以把召回最相似物品Embedding的问题，看成是在高维的向量空间内搜索最近邻点的过程。遇到最近邻问题，我们一般会采用聚类和索引这两种方法。但是聚类和索引都无法完全解决边缘点最近邻的问题，并且对于聚类来说，中心点的数量k也并不好确定，而对于Kd-tree索引来说，Kd-tree索引的结构并不简单，离线和在线维护的过程也相对复杂。</p><p>因此，解决最近邻问题最“完美”的办法就是使用局部敏感哈希，在每个桶内点的数量接近时，它能够把最近邻查找的时间控制在常数级别。为了进一步提高最近邻搜索的效率或召回率，我们还可以采用多桶策略，首先是基于“且”操作的多桶策略能够进一步减少候选集规模，增加计算效率，其次是基于“或”操作的多桶策略则能够提高召回率，减少漏掉最近邻点的可能性。</p><p>最后，我在下面列出了各种方法的优缺点，希望能帮助你做一个快速的复盘。</p><p><img src=\"https://static001.geekbang.org/resource/image/40/b1/40yy632948cdd9090fe34d3957307eb1.jpeg?wh=1920*878\" alt=\"\"></p><h2>课后思考</h2><p>如果让你在推荐服务器内部的召回层实现最近邻搜索过程，你会怎样存储和使用我们在离线产生的分桶数据，以及怎样设计线上的搜索过程呢？</p><p>欢迎你在留言区写出你的答案，更欢迎你把这一过程的实现提交Pull Request到Sparrow Resys项目，如果能够被采纳，你将成为这一开源项目的贡献者之一。我们下节课再见！</p>","neighbors":{"left":{"article_title":"11 | 召回层：如何快速又准确地筛选掉不相关物品？","id":299494},"right":{"article_title":"13 | 模型服务：怎样把你的离线模型部署到线上？","id":303430}},"comments":[{"had_liked":false,"id":257986,"user_name":"Dikiwi","can_delete":false,"product_type":"c1","uid":2198644,"ip_address":"","ucode":"F6E4C2008C7F7B","user_header":"https://static001.geekbang.org/account/avatar/00/21/8c/74/2bbd132d.jpg","comment_is_top":false,"comment_ctime":1604235586,"is_pvip":false,"replies":[{"id":"94056","content":"这是个好问题，推荐其他同学也关注。<br><br>因为如果总是固定边界，很容易让边界两边非常接近的点总是被分到两个桶里。这是我们不想看到的。<br><br>所以随机调整b，生成多个hash函数，并且采用或的方式组合，就可以一定程度避免这些边界点的问题。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1604365963,"ip_address":"","comment_id":257986,"utype":1}],"discussion_count":1,"race_medal":0,"score":"259302273346","product_id":100060801,"comment_content":"b 是 0 到 w 间的一个均匀分布随机变量，避免分桶边界固化。这是什么意思呢？是说可以通过调整b来形成另外一个一个hash函数？","like_count":61,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508519,"discussion_content":"这是个好问题，推荐其他同学也关注。\n\n因为如果总是固定边界，很容易让边界两边非常接近的点总是被分到两个桶里。这是我们不想看到的。\n\n所以随机调整b，生成多个hash函数，并且采用或的方式组合，就可以一定程度避免这些边界点的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604365963,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257854,"user_name":"kaijien","can_delete":false,"product_type":"c1","uid":1499156,"ip_address":"","ucode":"1192E5E3AEED2E","user_header":"https://static001.geekbang.org/account/avatar/00/16/e0/14/72a484d8.jpg","comment_is_top":false,"comment_ctime":1604156424,"is_pvip":false,"replies":[{"id":"93889","content":"1、每个桶取多少点跟你在线上想寻找top N的规模有关系。比如召回层想召回1000个物品，那么N就是1000，那么桶内点数的规模就维持在1000-5000的级别是比较合适的。当然了点数还跟你想取且还是或，有多少个哈希函数有关系，但基本上需要跟N在一个量级且高于N。<br><br>2、Embedding在实践中其实很少取768那么高的维度，我们训练模型时候的经验是，超过100维后，增加维度的作用就没那么明显了，通常取10-50维就足够了。比如说50维，这其实已经是非常高维的embedding了，我推荐用比较复杂一点的操作，比如取5个哈希函数，同时落在3+个桶里的点作为候选点。<br><br>但还是那句话，要自己观察数据，观察LSH的召回率如何，因为每家的数据都不一样，从别人那得来的经验经常不奏效是很正常的。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1604208406,"ip_address":"","comment_id":257854,"utype":1}],"discussion_count":2,"race_medal":0,"score":"151928011784","product_id":100060801,"comment_content":"老师您好，您提到点数越多越应该增加桶的个数，还有Embedding维度越大越应该增加哈希函数并多用且的方式，那从您的经验上:<br>1 每个桶维持多少个点比较好？<br>2 Embedding一般多少算大？比如768维是否应该用且的方式？应该用多少哈希函数比较好？","like_count":36,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508475,"discussion_content":"1、每个桶取多少点跟你在线上想寻找top N的规模有关系。比如召回层想召回1000个物品，那么N就是1000，那么桶内点数的规模就维持在1000-5000的级别是比较合适的。当然了点数还跟你想取且还是或，有多少个哈希函数有关系，但基本上需要跟N在一个量级且高于N。\n\n2、Embedding在实践中其实很少取768那么高的维度，我们训练模型时候的经验是，超过100维后，增加维度的作用就没那么明显了，通常取10-50维就足够了。比如说50维，这其实已经是非常高维的embedding了，我推荐用比较复杂一点的操作，比如取5个哈希函数，同时落在3+个桶里的点作为候选点。\n\n但还是那句话，要自己观察数据，观察LSH的召回率如何，因为每家的数据都不一样，从别人那得来的经验经常不奏效是很正常的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604208406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1579494,"avatar":"https://static001.geekbang.org/account/avatar/00/18/19/e6/2a7be4dd.jpg","nickname":"杰西","note":"","ucode":"22BCC2644B69D8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":390895,"discussion_content":"老师好，想问下，如何可以看到每个桶点数的真实数据量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630122319,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281436,"user_name":"Alan","can_delete":false,"product_type":"c1","uid":2115316,"ip_address":"","ucode":"591A28E310A8F5","user_header":"https://static001.geekbang.org/account/avatar/00/20/46/f4/93b1275b.jpg","comment_is_top":false,"comment_ctime":1614750879,"is_pvip":false,"replies":[{"id":"102383","content":"赞，这个我也不知道，非常感谢分享！","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1615024070,"ip_address":"","comment_id":281436,"utype":1}],"discussion_count":4,"race_medal":0,"score":"143348671647","product_id":100060801,"comment_content":"悄悄告诉大家：embedding层K值的初始判断，有个经验公式:K= Embedding维数开4次方 ,x=初始的维度数；<br>后续，K值调参按照2的倍数进行调整，例如：2，4，8，16；","like_count":34,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516398,"discussion_content":"赞，这个我也不知道，非常感谢分享！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615024070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2206796,"avatar":"","nickname":"Geek1963","note":"","ucode":"241D1837F792E2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534639,"discussion_content":"x是啥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638247323,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2705003,"avatar":"https://static001.geekbang.org/account/avatar/00/29/46/6b/16237b5a.jpg","nickname":"Someone you loved","note":"","ucode":"CA86C3020E73F6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388215,"discussion_content":"请问，这里的K值是指什么","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628657395,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2735592,"avatar":"","nickname":"WJing","note":"","ucode":"391A148418523B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2705003,"avatar":"https://static001.geekbang.org/account/avatar/00/29/46/6b/16237b5a.jpg","nickname":"Someone you loved","note":"","ucode":"CA86C3020E73F6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391895,"discussion_content":"上文中K是分桶的数量","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1630677748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":388215,"ip_address":""},"score":391895,"extra":""}]}]},{"had_liked":false,"id":269983,"user_name":"Alr","can_delete":false,"product_type":"c1","uid":1367146,"ip_address":"","ucode":"A08011E911E946","user_header":"","comment_is_top":false,"comment_ctime":1608867350,"is_pvip":false,"replies":[{"id":"97892","content":"对的。就是建立倒排索引的思路。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1608958970,"ip_address":"","comment_id":269983,"utype":1}],"discussion_count":1,"race_medal":0,"score":"96098147862","product_id":100060801,"comment_content":"课后思考问题：以item_id作为key， item_id对应的BucketId作为value存储在redis， 再以每个BucketId作为key， item_id作为value存储在redis， 在召回的时候遍历item_id的所有BucketId，获取BucketId对应的item_id就是需要召回的item， 请问老师这个思路对吗 ","like_count":23,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512475,"discussion_content":"对的。就是建立倒排索引的思路。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608958970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257719,"user_name":"浣熊当家","can_delete":false,"product_type":"c1","uid":1952248,"ip_address":"","ucode":"939F06050423E4","user_header":"https://static001.geekbang.org/account/avatar/00/1d/c9/f8/72955ef9.jpg","comment_is_top":false,"comment_ctime":1604096222,"is_pvip":false,"replies":[{"id":"93875","content":"好问题。在咱们的项目里，用户embedding就是通过平均这个用户评论过的高分电影的embedding得到的。<br>所以他们肯定是在一个向量空间里。<br><br>只要是利用用户历史的item embedding生成的用户embedding，可以说都是在一个向量空间内，这些生成方式包括但不限于average pooling，sum pooling，attention等等。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1604185398,"ip_address":"","comment_id":257719,"utype":1}],"discussion_count":2,"race_medal":0,"score":"66028605662","product_id":100060801,"comment_content":"请问老师关于这句话 “在训练物品和用户的 Embedding 向量时，如果二者的 Embedding 在同一个向量空间内”， 我们在之前6-7节embedding的中，讲了怎么把物品序列信息转化为embedding， 想知道，用户的embedding是怎么生成的呢？ 然后，物品和用户在同一个向量空间，这个是怎么得到的呢？","like_count":15,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508428,"discussion_content":"好问题。在咱们的项目里，用户embedding就是通过平均这个用户评论过的高分电影的embedding得到的。\n所以他们肯定是在一个向量空间里。\n\n只要是利用用户历史的item embedding生成的用户embedding，可以说都是在一个向量空间内，这些生成方式包括但不限于average pooling，sum pooling，attention等等。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604185398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2598647,"avatar":"https://static001.geekbang.org/account/avatar/00/27/a6/f7/e434c375.jpg","nickname":"Sean","note":"","ucode":"E35C2300971FA2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":371420,"discussion_content":"借这串再问一下，针对冷启动的用户，我们可能会使用年龄、性别、职业等特徵作为初始的embedding，这样在没有任何浏览纪录的情况下，如何保证用户和物品在同一个向量空间内呢？\n或是除了观看纪录之外，我也想加入一些额外的特徵来做用户embedding，这样又该如何保证是和物品在同一个向量空间呢？谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619765351,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265294,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1606840290,"is_pvip":false,"replies":[{"id":"96528","content":"没有magic嘛，各种方法都有优势，适用的数据量也不同。所以facebook在faiss里面其实是融合了多种索引方式，大家有兴趣还是推荐深入去看一下faiss的原理。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1606940759,"ip_address":"","comment_id":265294,"utype":1}],"discussion_count":1,"race_medal":0,"score":"53146447842","product_id":100060801,"comment_content":"LSH也有自己的问题。数据量太大的时候，hash的个数不好选择，另外存在hash冲突，容易降低召回率。<br><br>同基于树的，基于量化的，基于的图的方法来比，在召回率，速度和内存使用上都不占优势。","like_count":12,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510865,"discussion_content":"没有magic嘛，各种方法都有优势，适用的数据量也不同。所以facebook在faiss里面其实是融合了多种索引方式，大家有兴趣还是推荐深入去看一下faiss的原理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606940759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":259447,"user_name":"haydenlo","can_delete":false,"product_type":"c1","uid":1594293,"ip_address":"","ucode":"D9EEF8226C3D81","user_header":"","comment_is_top":false,"comment_ctime":1604729330,"is_pvip":false,"replies":[{"id":"95607","content":"根据你训练embedding时候选择的相似度来确定。<br><br>比如你训练embedding模型时就采用了欧式距离，那么这里就用欧式距离。训练模型时用了内积，这里就用内积。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1606168601,"ip_address":"","comment_id":259447,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35964467698","product_id":100060801,"comment_content":"请问对于计算距离，欧几里得距离和余弦距离等应该怎么选择？","like_count":9,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508940,"discussion_content":"根据你训练embedding时候选择的相似度来确定。\n\n比如你训练embedding模型时就采用了欧式距离，那么这里就用欧式距离。训练模型时用了内积，这里就用内积。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606168601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257866,"user_name":"JustDoDT","can_delete":false,"product_type":"c1","uid":1127175,"ip_address":"","ucode":"6AF0B80F00EAEF","user_header":"https://static001.geekbang.org/account/avatar/00/11/33/07/8f351609.jpg","comment_is_top":false,"comment_ctime":1604161231,"is_pvip":false,"replies":[{"id":"93888","content":"很难精确控制每个桶内的规模是C，但能通过控制桶的宽度w，来大概控制桶的规模在C附近。去掉一些噪声点后，如果点的分布比较均匀，那么每个桶的规模就比较稳定。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1604207934,"ip_address":"","comment_id":257866,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23078997711","product_id":100060801,"comment_content":"如何精确的控制每个桶内的点的规模是 C？","like_count":5,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508481,"discussion_content":"很难精确控制每个桶内的规模是C，但能通过控制桶的宽度w，来大概控制桶的规模在C附近。去掉一些噪声点后，如果点的分布比较均匀，那么每个桶的规模就比较稳定。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604207934,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303454,"user_name":"Yang Hong","can_delete":false,"product_type":"c1","uid":2664414,"ip_address":"","ucode":"B92C87587CE9E1","user_header":"","comment_is_top":false,"comment_ctime":1626794013,"is_pvip":false,"replies":[{"id":"109853","content":"user emb不用预存分桶，保存hash函数在线算就可以","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1626843179,"ip_address":"","comment_id":303454,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18806663197","product_id":100060801,"comment_content":"课后思考：<br>离线训练：LSH model为每个item embedding生成m个分桶，同时为每个user embedding生成m个分桶。<br><br>离线存储：1）在redis中存储item的分桶结果，key为item_id， value为item对应的BucketId；建立倒排索引，再以每个BucketId作为key， value为对应的item_id；2）在redis中存储user的分桶结果，key为user_id， value为user对应的BucketId；<br><br>在线召回：1）取出目标user的user embedding，和user对应的BucketId；2）查询redis分别获取m个BucketId对应的item_id，用且&#47;或的多桶策略找到需要召回的item。<br><br>不知道这个思路对不对。","like_count":5,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523685,"discussion_content":"user emb不用预存分桶，保存hash函数在线算就可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626843179,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275983,"user_name":"梁栋💝","can_delete":false,"product_type":"c1","uid":1067594,"ip_address":"","ucode":"16EEF0DD596A80","user_header":"https://static001.geekbang.org/account/avatar/00/10/4a/4a/fdae1e16.jpg","comment_is_top":false,"comment_ctime":1611736526,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"18791605710","product_id":100060801,"comment_content":"分桶宽度怎么决定的，非常迷惑。","like_count":4},{"had_liked":false,"id":257569,"user_name":"那时刻","can_delete":false,"product_type":"c1","uid":1150927,"ip_address":"","ucode":"B0D150856C3A4A","user_header":"https://static001.geekbang.org/account/avatar/00/11/8f/cf/890f82d6.jpg","comment_is_top":false,"comment_ctime":1604029055,"is_pvip":false,"replies":[{"id":"93837","content":"这是个好问题，但我觉得自己思考不难得出结论。minhash和simhash主要用在文档去重这样的场景，你觉得能不能把minhash和simhash应用在embedding的分桶过程中？如果可以的话，应用过程是什么呢？","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1604092653,"ip_address":"","comment_id":257569,"utype":1}],"discussion_count":2,"race_medal":1,"score":"18783898239","product_id":100060801,"comment_content":"请问老师局部敏感哈希里的minhash和simhash是否有应用呢？","like_count":4,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508379,"discussion_content":"这是个好问题，但我觉得自己思考不难得出结论。minhash和simhash主要用在文档去重这样的场景，你觉得能不能把minhash和simhash应用在embedding的分桶过程中？如果可以的话，应用过程是什么呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604092653,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2413045,"avatar":"https://static001.geekbang.org/account/avatar/00/24/d1/f5/efe2175a.jpg","nickname":"Alvin","note":"","ucode":"6F5E9AFAD16FB6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387160,"discussion_content":"应用在分桶去掉以前看过的电影吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628014039,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304168,"user_name":"Infp","can_delete":false,"product_type":"c1","uid":2687465,"ip_address":"","ucode":"17467CFFB40E6B","user_header":"","comment_is_top":false,"comment_ctime":1627283030,"is_pvip":false,"replies":[{"id":"110098","content":"LSH只是ANN的一种解决方法，Faiss采用了多种索引的结构，可以扩展学习一下。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1627333983,"ip_address":"","comment_id":304168,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14512184918","product_id":100060801,"comment_content":"本人用过faiss，LSH无论是召回率还是速度方面都不是很好。基于图的HNSW或者HNSWSQ是比较好的索引方式，当然缺点是会占用较大的存储空间，还有很多其他索引方式，可参考faiss的GitHub介绍。另外，faiss的wiki里面有关于如何选择索引的指南，有需要的同学可以去了解一下：https:&#47;&#47;github.com&#47;facebookresearch&#47;faiss&#47;wiki&#47;Guidelines-to-choose-an-index。","like_count":4,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523958,"discussion_content":"LSH只是ANN的一种解决方法，Faiss采用了多种索引的结构，可以扩展学习一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627333983,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261407,"user_name":"马龙流","can_delete":false,"product_type":"c1","uid":1087792,"ip_address":"","ucode":"16F9CE022297FF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erUKWZy1fBBcJncWRNh9M3TkjThqgsIIpmGOTCyg2IN80IDf3COkeWyTLHliczAppIkfBgCJTsUn1g/132","comment_is_top":false,"comment_ctime":1605323969,"is_pvip":false,"replies":[{"id":"94860","content":"LSH是Faiss index选择的一种，Faiss的详细细节太多，选择也比较多，需要参照开源项目展开学习。<br><br>Embedding向量的维度越大，单个LSH分桶错误的概率就越大，多个分桶联合才更容易找到相似物品。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1605338387,"ip_address":"","comment_id":261407,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14490225857","product_id":100060801,"comment_content":"Embedding 向量的维度越大，我们越应该增加哈希函数的数量，尽量采用且的方式作为多桶策略；这话怎么理解呢？还有就是faiss这种，里面用到的就是局部哈希原理?","like_count":3,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509476,"discussion_content":"LSH是Faiss index选择的一种，Faiss的详细细节太多，选择也比较多，需要参照开源项目展开学习。\n\nEmbedding向量的维度越大，单个LSH分桶错误的概率就越大，多个分桶联合才更容易找到相似物品。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605338387,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301324,"user_name":"魔法海","can_delete":false,"product_type":"c1","uid":2015537,"ip_address":"","ucode":"ACC78501A9980F","user_header":"https://static001.geekbang.org/account/avatar/00/1e/c1/31/e991c364.jpg","comment_is_top":false,"comment_ctime":1625634568,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10215569160","product_id":100060801,"comment_content":"老师，遇到个问题，在使用faiss的时候，cpu占用率在train的时候一直是100%。网上设置的两个参数：<br>1. export OMP_WAIT_POLICY=PASSIVE已经加入了环境变量<br>2. faiss.omp_set_num_threads(4)<br>其他过程都ok，就是在train和add的时候一直是100%。这个需要怎么修复？<br>","like_count":2},{"had_liked":false,"id":271150,"user_name":"杨佳亦","can_delete":false,"product_type":"c1","uid":2046547,"ip_address":"","ucode":"D2009DAC396F25","user_header":"https://static001.geekbang.org/account/avatar/00/1f/3a/53/ec2c6c55.jpg","comment_is_top":false,"comment_ctime":1609416929,"is_pvip":false,"replies":[{"id":"98331","content":"是这样，Embedding维度大计算量大是肯定的。这本身就是一个tradeoff，有时候，为了线上过程更高效，减少emb的维度也是可以牺牲的选择。一切工程问题都是取舍的问题。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1609475624,"ip_address":"","comment_id":271150,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10199351521","product_id":100060801,"comment_content":"请问老师，为什么：<br><br>Embedding 向量维度越大，越应增加哈希函数的数量，用“且”分桶；相反，Embedding 向量维度越小，我们越应减少哈希函数的数量，用“或”分桶？<br><br>我的理解是，Embedding维度较大，特征密集不好分，采用多个哈希函数做映射再取交的确可以找到相似的Embedding；Embedding维度较小，特征分散，需要的桶不多，用或可以增加结果数量。<br><br>但是疑虑在于，Embedding大，需要的桶也多，计算量岂不是会变得非常大？","like_count":2,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":512848,"discussion_content":"是这样，Embedding维度大计算量大是肯定的。这本身就是一个tradeoff，有时候，为了线上过程更高效，减少emb的维度也是可以牺牲的选择。一切工程问题都是取舍的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609475624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1489525,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI9X140JXPuaDB8PibXpwFWds6mZvg1w7THkyB6NjBkP7x4HqSk2wuUvcmDb9O2l0fCkxvB3ibL0L2A/132","nickname":"科学养牛","note":"","ucode":"B205209A814AC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":403144,"discussion_content":"高维空间应该更紫稀疏而不是更密集","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634016580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":264615,"user_name":"follow-fate","can_delete":false,"product_type":"c1","uid":2302995,"ip_address":"","ucode":"EF5C9BA5A77979","user_header":"https://static001.geekbang.org/account/avatar/00/23/24/13/8fb0424b.jpg","comment_is_top":false,"comment_ctime":1606547574,"is_pvip":false,"replies":[{"id":"96252","content":"可以。faiss是业界主流解决方案，LSH是它的原理之一，这里LSH主要是为了大家学习原理。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1606787711,"ip_address":"","comment_id":264615,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10196482166","product_id":100060801,"comment_content":"facebook开源的faiss是不是可以替代LSH了？","like_count":2,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510623,"discussion_content":"可以。faiss是业界主流解决方案，LSH是它的原理之一，这里LSH主要是为了大家学习原理。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606787711,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1697075,"avatar":"","nickname":"Sanders","note":"","ucode":"3D460FEEDCDF34","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348040,"discussion_content":"Faiss适合大规模库向量的查找，Lsh适合小规模的查找，效果上，Faiss召回比Lsh低","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612410007,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262610,"user_name":"。LEAF","can_delete":false,"product_type":"c1","uid":2304080,"ip_address":"","ucode":"99C30EBBBBADC1","user_header":"https://static001.geekbang.org/account/avatar/00/23/28/50/c8cb0c3b.jpg","comment_is_top":false,"comment_ctime":1605778721,"is_pvip":false,"replies":[{"id":"95326","content":"是这样的。<br><br>如果觉得不保险，还可以在临近桶找，这里面还是一个召回率和准确率之间权衡的问题。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1605832978,"ip_address":"","comment_id":262610,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10195713313","product_id":100060801,"comment_content":"老师好，最后得到 每个电影的 分桶，比如[-2.0], [14.0], [8.0]]，相当于再做召回的时候，比如使用“或”策略，就直接再剩余所有电影里找到 在[-2.0], [14.0], [8.0] 3个桶里的电影就可以了吧","like_count":2,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509895,"discussion_content":"是这样的。\n\n如果觉得不保险，还可以在临近桶找，这里面还是一个召回率和准确率之间权衡的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605832978,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257502,"user_name":"ALAN","can_delete":false,"product_type":"c1","uid":1240164,"ip_address":"","ucode":"70E3B1C730E63F","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/64/7403c694.jpg","comment_is_top":false,"comment_ctime":1604016608,"is_pvip":false,"replies":[{"id":"93836","content":"是的，所以得到了三个bucketid","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1604092432,"ip_address":"","comment_id":257502,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10193951200","product_id":100060801,"comment_content":"老师，numhashtable为3，是指使用了3个分桶函数吗？","like_count":2,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508353,"discussion_content":"是的，所以得到了三个bucketid","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604092432,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":297671,"user_name":"挖掘机","can_delete":false,"product_type":"c1","uid":2371003,"ip_address":"","ucode":"B604CF78054E25","user_header":"https://static001.geekbang.org/account/avatar/00/24/2d/bb/8bd1b6e1.jpg","comment_is_top":false,"comment_ctime":1623721763,"is_pvip":false,"replies":[{"id":"108161","content":"用户和物品向量直接dot prodcut或者cosin similarity交叉，那么在一个空间内，如果经过了concat层，或者MLP进行交叉，那么不在一个空间内","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1623876598,"ip_address":"","comment_id":297671,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5918689059","product_id":100060801,"comment_content":"如何判断用户和物品是否在一个向量空间呢？我看后面双塔的时候又说物品和向量不在一个空间，这是如何判断的呢？","like_count":2,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":521900,"discussion_content":"用户和物品向量直接dot prodcut或者cosin similarity交叉，那么在一个空间内，如果经过了concat层，或者MLP进行交叉，那么不在一个空间内","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1623876598,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":272089,"user_name":"梁栋💝","can_delete":false,"product_type":"c1","uid":1067594,"ip_address":"","ucode":"16EEF0DD596A80","user_header":"https://static001.geekbang.org/account/avatar/00/10/4a/4a/fdae1e16.jpg","comment_is_top":false,"comment_ctime":1609929668,"is_pvip":false,"replies":[{"id":"98665","content":"过程基本正确。但难点2不太成立，就是把每个item和user emb的桶id存到redis就可以了，或者建立倒排索引，这个过程是比较直接的。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1609971917,"ip_address":"","comment_id":272089,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5904896964","product_id":100060801,"comment_content":"课后思考：<br>1）首先user embedding是基于历史浏览item embedding平均后生成的，这个一般是online实时计算的。<br>2）当拿到user embedding后，我们需要离线训练好的LSH model对这个emb向量求出3个分桶。<br>3）拿到3个分桶，我们需要召回3个桶内的item embedding到内存，再进行Online计算求最近距离。<br><br>那么难点在于：<br>1）冷启动用户没有历史行为，无法用。<br>2）LSH model怎么导出到online服务使用。","like_count":2,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513149,"discussion_content":"过程基本正确。但难点2不太成立，就是把每个item和user emb的桶id存到redis就可以了，或者建立倒排索引，这个过程是比较直接的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609971917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2403705,"avatar":"","nickname":"Wa","note":"","ucode":"96E28E50FCA96C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342286,"discussion_content":"同追问一下老师难点二，所以online服务并不能利用用户的实时行为数据进行实时计算吗？比如用户产生新行为会更新user emb，那就需要离线保存的LSH的x和b、w参数来计算新的user桶id啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610626917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1067594,"avatar":"https://static001.geekbang.org/account/avatar/00/10/4a/4a/fdae1e16.jpg","nickname":"梁栋💝","note":"","ucode":"16EEF0DD596A80","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340342,"discussion_content":"我以为user emb是online实时根据近期浏览历史的item emb平均而来的，所以觉得需要lsh放到线上使用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609983131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265410,"user_name":"Geek_91c50b","can_delete":false,"product_type":"c1","uid":2281331,"ip_address":"","ucode":"AA6F9A01B84406","user_header":"","comment_is_top":false,"comment_ctime":1606892239,"is_pvip":false,"replies":[{"id":"96518","content":"embedding那几讲跳过了吗？后续推荐模型的课程也会涉及。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1606940170,"ip_address":"","comment_id":265410,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5901859535","product_id":100060801,"comment_content":"请问，用户的embading和物品embading是通过哪些特征进行处理的，例如性别、年龄？怎样处理成数字的，这一块的代码有在工程里吗？","like_count":1,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510922,"discussion_content":"embedding那几讲跳过了吗？后续推荐模型的课程也会涉及。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606940170,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2403705,"avatar":"","nickname":"Wa","note":"","ucode":"96E28E50FCA96C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342257,"discussion_content":"应该是跳过了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610625525,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262199,"user_name":"傻","can_delete":false,"product_type":"c1","uid":1136426,"ip_address":"","ucode":"099D3EFDAF12EF","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Y5U2ADUvruWhziaB4tSyiaAN7h9OcHMGj6X6nAeqJyJvrqWs8JmyO6yOTBziatAEIG6gHRic0jvT3d0hxNhiaAUVYkw/132","comment_is_top":false,"comment_ctime":1605663100,"is_pvip":false,"replies":[{"id":"95231","content":"不在一个向量空间内就没法使用用户和物品之间的LSH的方法，因为他们根本没有近邻关系。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1605747361,"ip_address":"","comment_id":262199,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5900630396","product_id":100060801,"comment_content":"想问下老师，关于“在训练物品和用户的向量时，如果二者在同一个向量空间内”，那如果用户的向量空间（比如用户id的embedding向量）和物品的向量不在同一个向量空间该如何处理呢，谢谢老师～","like_count":1,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509731,"discussion_content":"不在一个向量空间内就没法使用用户和物品之间的LSH的方法，因为他们根本没有近邻关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605747361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1136426,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Y5U2ADUvruWhziaB4tSyiaAN7h9OcHMGj6X6nAeqJyJvrqWs8JmyO6yOTBziatAEIG6gHRic0jvT3d0hxNhiaAUVYkw/132","nickname":"傻","note":"","ucode":"099D3EFDAF12EF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327101,"discussion_content":"是的，那想问下老师，这种一般用什么方法来处理呢？还是说，一般都会在同一个空间里呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605748283,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1136426,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Y5U2ADUvruWhziaB4tSyiaAN7h9OcHMGj6X6nAeqJyJvrqWs8JmyO6yOTBziatAEIG6gHRic0jvT3d0hxNhiaAUVYkw/132","nickname":"傻","note":"","ucode":"099D3EFDAF12EF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":327684,"discussion_content":"这跟你的模型设计有关，比如你的user emb是通过item emb取平均生成的，那么他们自然在一个向量空间里。再比如，user emb和item emb分别是在模型两个不同的embedding层中生成的，而且这两个embedding层之间又没有交互，他们就不在一个向量空间内。\n\n这不是一个怎么处理的问题，是如果你想让他们在一个向量空间内，设计模型和方案的时候就要用相应的方式生成。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1605913643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":327101,"ip_address":""},"score":327684,"extra":""}]}]},{"had_liked":false,"id":257658,"user_name":"超~~","can_delete":false,"product_type":"c1","uid":2198718,"ip_address":"","ucode":"F259C26BD1E2CC","user_header":"https://static001.geekbang.org/account/avatar/00/21/8c/be/f3661bb0.jpg","comment_is_top":false,"comment_ctime":1604050228,"is_pvip":false,"replies":[{"id":"93839","content":"没有配置scala时能启动是因为online部分不会使用scala代码。<br><br>这个问题确实比较不好复现。不过肯定是scala的问题。我推荐你再安装一遍scala环境，比如换一个2.11的小版本，换一个新的安装路径，看看行不行。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1604093051,"ip_address":"","comment_id":257658,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5899017524","product_id":100060801,"comment_content":"你好老师，我clone下来的代码，环境中没有配置scala 时，可以正常启动，但指定scala2. 11后，启动报错Error:scalac: Token not found: &#47;Users&#47;edz&#47;.idea-build&#47;tokens&#47;3200  谷歌也没有找到答案，谢谢","like_count":1,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508406,"discussion_content":"没有配置scala时能启动是因为online部分不会使用scala代码。\n\n这个问题确实比较不好复现。不过肯定是scala的问题。我推荐你再安装一遍scala环境，比如换一个2.11的小版本，换一个新的安装路径，看看行不行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604093051,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2198718,"avatar":"https://static001.geekbang.org/account/avatar/00/21/8c/be/f3661bb0.jpg","nickname":"超~~","note":"","ucode":"F259C26BD1E2CC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320681,"discussion_content":"谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604451672,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339322,"user_name":"小博","can_delete":false,"product_type":"c1","uid":1078829,"ip_address":"","ucode":"4DB860A0D35BA0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U6Y6xwm9BryshBqapb8iaQCf3P4RUxIxiakfEdEzDEPy5QR6sjCjqj7CNgz6Lyj8rPYA/132","comment_is_top":false,"comment_ctime":1648036211,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648036211","product_id":100060801,"comment_content":"我看spark的ml包里面找k近邻的api必须已经固定要target向量，如果我就想找100w个向量中，他们每个最近邻的topk呢？这个api是否就不能用了呢","like_count":0},{"had_liked":false,"id":326735,"user_name":"静心","can_delete":false,"product_type":"c1","uid":1335457,"ip_address":"","ucode":"EB264FA6519FDA","user_header":"https://static001.geekbang.org/account/avatar/00/14/60/a1/8f003697.jpg","comment_is_top":false,"comment_ctime":1639649746,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1639649746","product_id":100060801,"comment_content":"这节课对于做出一个高性能的推荐系统至关重要呀，收藏了！<br>以前在使用ElasticSearch做空间搜索的时候了解过，好像ES中的空间索引也是类似的实现算法。<br>对想出来这套算法的人佩服的真是五体投地呀！","like_count":0},{"had_liked":false,"id":317750,"user_name":"deepX","can_delete":false,"product_type":"c1","uid":2674181,"ip_address":"","ucode":"1040F5AC6DEC06","user_header":"https://static001.geekbang.org/account/avatar/00/28/ce/05/da3e7c63.jpg","comment_is_top":false,"comment_ctime":1634925354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1634925354","product_id":100060801,"comment_content":"reformer 用到了LSH","like_count":0},{"had_liked":false,"id":304656,"user_name":"陈威洋","can_delete":false,"product_type":"c1","uid":2264679,"ip_address":"","ucode":"DCF84B4D3A7354","user_header":"https://static001.geekbang.org/account/avatar/00/22/8e/67/afb412fb.jpg","comment_is_top":false,"comment_ctime":1627539961,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627539961","product_id":100060801,"comment_content":"喆哥，好！~  请问个问题：<br><br> Jaccard距离(杰卡德距离) 是用来衡量两个集合之间的相似性，在模型应用中，使用离散向量数据会比较快，但是它是适用于什么场景的？","like_count":0},{"had_liked":false,"id":303679,"user_name":"东波","can_delete":false,"product_type":"c1","uid":1133870,"ip_address":"","ucode":"AD99D9EFBE7C05","user_header":"https://static001.geekbang.org/account/avatar/00/11/4d/2e/eaf81624.jpg","comment_is_top":false,"comment_ctime":1626925894,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1626925894","product_id":100060801,"comment_content":"这个多hash分桶，有些bloom过滤器的味道","like_count":0},{"had_liked":false,"id":303288,"user_name":"Yang Hong","can_delete":false,"product_type":"c1","uid":2664414,"ip_address":"","ucode":"B92C87587CE9E1","user_header":"","comment_is_top":false,"comment_ctime":1626702493,"is_pvip":false,"replies":[{"id":"109823","content":"随机调整b和随机调整向量都可以生成多个hash函数，这两个不矛盾。在实际使用中我们往往会结合使用这两种方法。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1626818448,"ip_address":"","comment_id":303288,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626702493","product_id":100060801,"comment_content":"老师，你好，我对不同hash函数之间如何确定有点不清楚。我一开始理解的是不同的hash函数是通过随机调整x生成的，通过生成不同的x向量和v之间投影，来捕获点之间在不同投影方向上的距离关系；后来看评论您提到是通过随机调整b来生成多个hash函数。<br><br>我疑惑的点是，如果通过随机调整b来生成hash函数，是否hash间共用一个x向量呢？（如果hash函数之间用的一个x向量应该会有问题吧，就像您在课中提到的“原本远离的点会有一定概率变成接近的点”，如果选的这个x向量恰好让原本远离的点投影后距离变近了那么候选集就不准确了）","like_count":0,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523617,"discussion_content":"随机调整b和随机调整向量都可以生成多个hash函数，这两个不矛盾。在实际使用中我们往往会结合使用这两种方法。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1626818448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299278,"user_name":"Ricardo","can_delete":false,"product_type":"c1","uid":1846121,"ip_address":"","ucode":"6FD382958FFD31","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIacvl2hoQU11kU97wDuKPKP418MNYrnPU8vA4ibXf2a2wvRh5dkb2h28T5yqW3a05yBSxx75IDhtQ/132","comment_is_top":false,"comment_ctime":1624542494,"is_pvip":false,"replies":[{"id":"109378","content":"只是一个索引id","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1626215018,"ip_address":"","comment_id":299278,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1624542494","product_id":100060801,"comment_content":"一个bucketId就是一个分桶结果的索引，只是我比较少看到有负数做索引值的，想问下老师这里的负数没有什么特殊含义吧？也只是代表一个索引而已对吧？","like_count":0,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522384,"discussion_content":"只是一个索引id","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626215018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298937,"user_name":"抱小星","can_delete":false,"product_type":"c1","uid":1504652,"ip_address":"","ucode":"BA7B0DAFDA4AF5","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/8c/82fb5890.jpg","comment_is_top":false,"comment_ctime":1624385980,"is_pvip":true,"replies":[{"id":"109375","content":"这个理解应该是有点问题。user embedding生成好了就通过它计算出所在的桶，然后取出桶中所有的item就可以了","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1626214874,"ip_address":"","comment_id":298937,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1624385980","product_id":100060801,"comment_content":"老师，我想请问一下，假设对item已经做好了分桶，在针对某一用户进行召回时，用户的embedding是根据用户喜爱的多个item的embedding取均值得到。用户embedding不一定会有对应的itemId，那么如何根据用户的信息去取对应item的对应bucket里的其他item呢？是把用户embedding计算过程中的每一个item都拿出来查找bucket再进行召回吗？","like_count":1,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522283,"discussion_content":"这个理解应该是有点问题。user embedding生成好了就通过它计算出所在的桶，然后取出桶中所有的item就可以了","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1626214874,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298112,"user_name":"Ricardo","can_delete":false,"product_type":"c1","uid":1846121,"ip_address":"","ucode":"6FD382958FFD31","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIacvl2hoQU11kU97wDuKPKP418MNYrnPU8vA4ibXf2a2wvRh5dkb2h28T5yqW3a05yBSxx75IDhtQ/132","comment_is_top":false,"comment_ctime":1623916157,"is_pvip":false,"replies":[{"id":"108419","content":"bucketid可以是负数吗？学完这节课应该不难回答。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1624387760,"ip_address":"","comment_id":298112,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1623916157","product_id":100060801,"comment_content":"最后得到的bucketId是什么含义呢？为什么还会有负数？","like_count":0,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522019,"discussion_content":"bucketid可以是负数吗？学完这节课应该不难回答。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624387760,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290795,"user_name":"MutouMan","can_delete":false,"product_type":"c1","uid":2454131,"ip_address":"","ucode":"E2E78C6EE25E80","user_header":"https://static001.geekbang.org/account/avatar/00/25/72/73/d707c8be.jpg","comment_is_top":false,"comment_ctime":1619754089,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619754089","product_id":100060801,"comment_content":"对复杂度的分析还是有些糊涂，假设只有一个桶，特征向量维度是N，因为从N维要投影到1维，这个操作是O(N)，我们有C个点，所以复杂度是O(NC). 每一个桶对应一个不同的一维，所以是O(KNC). 请问我的理解对吗？谢谢","like_count":0},{"had_liked":false,"id":290791,"user_name":"MutouMan","can_delete":false,"product_type":"c1","uid":2454131,"ip_address":"","ucode":"E2E78C6EE25E80","user_header":"https://static001.geekbang.org/account/avatar/00/25/72/73/d707c8be.jpg","comment_is_top":false,"comment_ctime":1619753597,"is_pvip":false,"replies":[{"id":"105446","content":"相互独立的。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1620010944,"ip_address":"","comment_id":290791,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1619753597","product_id":100060801,"comment_content":"桶的宽度和桶数是互相独立吗？我的理解是桶数少，宽度就大。类似quantile transfomer。谢谢！","like_count":0,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519289,"discussion_content":"相互独立的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620010944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":290789,"user_name":"MutouMan","can_delete":false,"product_type":"c1","uid":2454131,"ip_address":"","ucode":"E2E78C6EE25E80","user_header":"https://static001.geekbang.org/account/avatar/00/25/72/73/d707c8be.jpg","comment_is_top":false,"comment_ctime":1619753501,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1619753501","product_id":100060801,"comment_content":"推荐系统新手分享下自己的想法：<br>线下分好桶后，把物品、用户和桶、桶和物品、用户分别作为key-value pair存到线上。当用户访问时，提通过用户id找到相关的桶id，然后进行多桶搜索召回。","like_count":0},{"had_liked":false,"id":289285,"user_name":"Geek1591","can_delete":false,"product_type":"c1","uid":2028942,"ip_address":"","ucode":"A65CFAE8B3F857","user_header":"https://static001.geekbang.org/account/avatar/00/1e/f5/8e/1d68db9a.jpg","comment_is_top":false,"comment_ctime":1618968929,"is_pvip":false,"replies":[{"id":"105066","content":"采用不同的b可以对应同一个hash函数，是为了解决同一个hash函数分桶时的边界固化问题。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1619112535,"ip_address":"","comment_id":289285,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618968929","product_id":100060801,"comment_content":"老师您好，为了避免边界固化，采用不同的b，意味着是不同hash函数对么，每个hash函数对应一个分桶，那么实践上说设置三个桶，是优先选择不同的x（投影向量），还是会选择不同的b，或者每个x选择若干个b？","like_count":0,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518876,"discussion_content":"采用不同的b可以对应同一个hash函数，是为了解决同一个hash函数分桶时的边界固化问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619112535,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284436,"user_name":"pop","can_delete":false,"product_type":"c1","uid":1381733,"ip_address":"","ucode":"9D81F3ED54321C","user_header":"https://static001.geekbang.org/account/avatar/00/15/15/65/37d05463.jpg","comment_is_top":false,"comment_ctime":1616249026,"is_pvip":false,"replies":[{"id":"103427","content":"numhashtables是做几次hash分桶，而不是分桶的个数。bucketlength可以控制分桶个数，所以这里并没有一个变量是控制分桶个数的。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1616637436,"ip_address":"","comment_id":284436,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1616249026","product_id":100060801,"comment_content":"老师我这样理解对不对：numhashtables是代表分桶个数，分桶越多分桶宽度bucketlength应该要小。然后假设对10万条10维数据召回100条，落在每个桶内数据应该在100到500左右，那么numhashtables应该设为200到1000？（感觉和例子里的4差的好多，我是不是理解错了）","like_count":0,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517348,"discussion_content":"numhashtables是做几次hash分桶，而不是分桶的个数。bucketlength可以控制分桶个数，所以这里并没有一个变量是控制分桶个数的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616637436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280716,"user_name":"十年","can_delete":false,"product_type":"c1","uid":2203446,"ip_address":"","ucode":"C26A0A3FC64960","user_header":"https://static001.geekbang.org/account/avatar/00/21/9f/36/b534ff31.jpg","comment_is_top":false,"comment_ctime":1614326124,"is_pvip":false,"replies":[{"id":"101935","content":"我感觉我讲的还比较明白。如果不明白就针对关键词再搜一下相关文章吧。","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1614390286,"ip_address":"","comment_id":280716,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1614326124","product_id":100060801,"comment_content":"局部敏感哈希看了好多帖子还是没弄明白，老师有没有好的相关资料推介下","like_count":0,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516191,"discussion_content":"我感觉我讲的还比较明白。如果不明白就针对关键词再搜一下相关文章吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614390286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":257876,"user_name":"浣熊当家","can_delete":false,"product_type":"c1","uid":1952248,"ip_address":"","ucode":"939F06050423E4","user_header":"https://static001.geekbang.org/account/avatar/00/1d/c9/f8/72955ef9.jpg","comment_is_top":false,"comment_ctime":1604172556,"is_pvip":false,"replies":[{"id":"93890","content":"不是特别清楚你的问题，LSH的降维就是通过分桶函数实现的吧？你说的降维是应用了那种算法是什么意思？","user_name":"作者回复","user_name_real":"王喆","uid":"1662192","ctime":1604208457,"ip_address":"","comment_id":257876,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1604172556","product_id":100060801,"comment_content":"还有个关于局部敏感哈希的问题想问老师， 我的理解是LSH也是通过降维的手段来提高搜索top n个点的时间复杂度的。 那具体的降维是应用了那种算法呢？我尝试着搜了下没有找到更细节的资料，也想请老师或者大家推荐好的学习资料。","like_count":0,"discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":508485,"discussion_content":"不是特别清楚你的问题，LSH的降维就是通过分桶函数实现的吧？你说的降维是应用了那种算法是什么意思？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604208457,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1952248,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/c9/f8/72955ef9.jpg","nickname":"浣熊当家","note":"","ucode":"939F06050423E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320346,"discussion_content":"不好意思老师我没有表达清楚，根据文章里LSH的图示，我的理解是我们把高维向量通过不同的角度方向，映射到了一个低维向量上（图四中是二维到一维）， 所以我的问题是，1）这个映射的过程是通过什么算法做到的？是有相关的矩阵运算可以直接得到吗？ 2）现实工作中， 每个桶应用的向量是一维的吗（如图4那种），还是会有更高维， 基于原始向量的维数？ 3）如何选取高维向低维投影的方向呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604324815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":1952248,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/c9/f8/72955ef9.jpg","nickname":"浣熊当家","note":"","ucode":"939F06050423E4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320508,"discussion_content":"1. 映射函数就是文中的分桶函数\n2. 一般需要映射到一个桶的id上，所以是一维的\n3.随机选取投影方向","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604386469,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320346,"ip_address":""},"score":320508,"extra":""},{"author":{"id":1952248,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/c9/f8/72955ef9.jpg","nickname":"浣熊当家","note":"","ucode":"939F06050423E4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1662192,"avatar":"https://static001.geekbang.org/account/avatar/00/19/5c/f0/46214d29.jpg","nickname":"王喆","note":"","ucode":"2EDC616F905F3F","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":321225,"discussion_content":"明白了！感谢老师的解答！","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604550533,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320508,"ip_address":""},"score":321225,"extra":""}]}]}]}