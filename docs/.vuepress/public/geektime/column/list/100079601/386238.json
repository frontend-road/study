{"id":386238,"title":"11 | 设计模式：Go常用设计模式概述","content":"<p>你好，我是孔令飞，今天我们来聊聊Go项目开发中常用的设计模式。</p><p>在软件开发中，经常会遇到各种各样的编码场景，这些场景往往重复发生，因此具有典型性。针对这些典型场景，我们可以自己编码解决，也可以采取更为省时省力的方式：直接采用设计模式。</p><p>设计模式是啥呢？简单来说，就是将软件开发中需要重复性解决的编码场景，按最佳实践的方式抽象成一个模型，模型描述的解决方法就是设计模式。使用设计模式，可以使代码更易于理解，保证代码的重用性和可靠性。</p><p>在软件领域，GoF（四人帮，全拼 Gang of Four）首次系统化提出了3大类、共25种可复用的经典设计方案，来解决常见的软件设计问题，为可复用软件设计奠定了一定的理论基础。</p><p>从总体上说，这些设计模式可以分为创建型模式、结构型模式、行为型模式3大类，用来完成不同的场景。这一讲，我会介绍几个在Go项目开发中比较常用的设计模式，帮助你用更加简单快捷的方法应对不同的编码场景。其中，简单工厂模式、抽象工厂模式和工厂方法模式都属于工厂模式，我会把它们放在一起讲解。</p><p><img src=\"https://static001.geekbang.org/resource/image/98/20/98fb0ecb8ba65bc83f25bb2504e51d20.png?wh=3142x1613\" alt=\"\"></p><h2>创建型模式</h2><p>首先来看创建型模式（Creational Patterns），它提供了一种<strong>在创建对象的同时隐藏创建逻辑</strong>的方式，而不是使用 new 运算符直接实例化对象。</p><!-- [[[read_end]]] --><p>这种类型的设计模式里，单例模式和工厂模式（具体包括简单工厂模式、抽象工厂模式和工厂方法模式三种）在Go项目开发中比较常用。我们先来看单例模式。</p><h3>单例模式</h3><p>单例模式（Singleton Pattern），是<strong>最简单的一个模式</strong>。在Go中，单例模式指的是全局只有一个实例，并且它负责创建自己的对象。单例模式不仅有利于减少内存开支，还有减少系统性能开销、防止多个实例产生冲突等优点。</p><p>因为单例模式保证了实例的全局唯一性，而且只被初始化一次，所以比较适合<strong>全局共享一个实例，且只需要被初始化一次的场景</strong>，例如数据库实例、全局配置、全局任务池等。</p><p>单例模式又分为<strong>饿汉方式</strong>和<strong>懒汉方式</strong>。饿汉方式指全局的单例实例在包被加载时创建，而懒汉方式指全局的单例实例在第一次被使用时创建。你可以看到，这种命名方式非常形象地体现了它们不同的特点。</p><p>接下来，我就来分别介绍下这两种方式。先来看<strong>饿汉方式</strong>。</p><p>下面是一个饿汉方式的单例模式代码：</p><pre><code>package singleton\n\ntype singleton struct {\n}\n\nvar ins *singleton = &amp;singleton{}\n\nfunc GetInsOr() *singleton {\n    return ins\n}\n</code></pre><p>你需要注意，因为实例是在包被导入时初始化的，所以如果初始化耗时，会导致程序加载时间比较长。</p><p><strong>懒汉方式是开源项目中使用最多的</strong>，但它的缺点是非并发安全，在实际使用时需要加锁。以下是懒汉方式不加锁的一个实现：</p><pre><code>package singleton\n\ntype singleton struct {\n}\n\nvar ins *singleton\n\nfunc GetInsOr() *singleton {\n    if ins == nil {\n        ins = &amp;singleton{}\n    }\n    \n    return ins\n}\n</code></pre><p>可以看到，在创建ins时，如果 <code>ins==nil</code>，就会再创建一个ins实例，这时候单例就会有多个实例。</p><p>为了解决懒汉方式非并发安全的问题，需要对实例进行加锁，下面是带检查锁的一个实现：</p><pre><code>import &quot;sync&quot;\n\ntype singleton struct {\n}\n\nvar ins *singleton\nvar mu sync.Mutex\n\nfunc GetIns() *singleton {\n\tif ins == nil {\n\t\tmu.Lock()\n\t\tif ins == nil {\n\t\t\tins = &amp;singleton{}\n\t\t}\n        mu.Unlock()\n\t}\n\treturn ins\n}\n</code></pre><p>上述代码只有在创建时才会加锁，既提高了代码效率，又保证了并发安全。</p><p>除了饿汉方式和懒汉方式，在Go开发中，还有一种更优雅的实现方式，我建议你采用这种方式，代码如下：</p><pre><code>package singleton\n\nimport (\n    &quot;sync&quot;\n)\n\ntype singleton struct {\n}\n\nvar ins *singleton\nvar once sync.Once\n\nfunc GetInsOr() *singleton {\n    once.Do(func() {\n        ins = &amp;singleton{}\n    })\n    return ins\n}\n</code></pre><p>使用<code>once.Do</code>可以确保ins实例全局只被创建一次，once.Do函数还可以确保当同时有多个创建动作时，只有一个创建动作在被执行。</p><p>另外，IAM应用中大量使用了单例模式，如果你想了解更多单例模式的使用方式，可以直接查看IAM项目代码。IAM中单例模式有 <a href=\"https://github.com/colin404test/iam/blob/IAMTAG/internal/authzserver/store/store.go#L45\">GetStoreInsOr</a>、<a href=\"https://github.com/colin404test/iam/blob/IAMTAG/internal/apiserver/store/etcd/etcd.go#L83\">GetEtcdFactoryOr</a>、<a href=\"https://github.com/colin404test/iam/blob/IAMTAG/internal/apiserver/store/mysql/mysql.go#L55\">GetMySQLFactoryOr</a>、<a href=\"https://github.com/colin404test/iam/blob/IAMTAG/internal/apiserver/api/v1/cache/cache.go#L33\">GetCacheInsOr</a>等。</p><h3>工厂模式</h3><p>工厂模式（Factory Pattern）是面向对象编程中的常用模式。在Go项目开发中，你可以通过使用多种不同的工厂模式，来使代码更简洁明了。Go中的结构体，可以理解为面向对象编程中的类，例如 Person结构体（类）实现了Greet方法。</p><pre><code>type Person struct {\n  Name string\n  Age int\n}\n\nfunc (p Person) Greet() {\n  fmt.Printf(&quot;Hi! My name is %s&quot;, p.Name)\n}\n</code></pre><p>有了Person“类”，就可以创建Person实例。我们可以通过简单工厂模式、抽象工厂模式、工厂方法模式这三种方式，来创建一个Person实例。</p><p>这三种工厂模式中，<strong>简单工厂模式</strong>是最常用、最简单的。它就是一个接受一些参数，然后返回Person实例的函数：</p><pre><code>type Person struct {\n  Name string\n  Age int\n}\n\nfunc (p Person) Greet() {\n  fmt.Printf(&quot;Hi! My name is %s&quot;, p.Name)\n}\n\nfunc NewPerson(name string, age int) *Person {\n  return &amp;Person{\n    Name: name,\n    Age: age,\n  }\n}\n</code></pre><p>和<code>p：=＆Person {}</code>这种创建实例的方式相比，简单工厂模式可以确保我们创建的实例具有需要的参数，进而保证实例的方法可以按预期执行。例如，通过<code>NewPerson</code>创建Person实例时，可以确保实例的name和age属性被设置。</p><p>再来看<strong>抽象工厂模式，</strong>它和简单工厂模式的唯一区别，就是它返回的是接口而不是结构体。</p><p>通过返回接口，可以<strong>在你不公开内部实现的情况下，让调用者使用你提供的各种功能</strong>，例如：</p><pre><code>type Person interface {\n  Greet()\n}\n\ntype person struct {\n  name string\n  age int\n}\n\nfunc (p person) Greet() {\n  fmt.Printf(&quot;Hi! My name is %s&quot;, p.name)\n}\n\n// Here, NewPerson returns an interface, and not the person struct itself\nfunc NewPerson(name string, age int) Person {\n  return person{\n    name: name,\n    age: age,\n  }\n}\n</code></pre><p>上面这个代码，定义了一个不可导出的结构体<code>person</code>，在通过NewPerson创建实例的时候返回的是接口，而不是结构体。</p><p>通过返回接口，我们还可以<strong>实现多个工厂函数，来返回不同的接口实现</strong>，例如：</p><pre><code>// We define a Doer interface, that has the method signature\n// of the `http.Client` structs `Do` method\ntype Doer interface {\n\tDo(req *http.Request) (*http.Response, error)\n}\n\n// This gives us a regular HTTP client from the `net/http` package\nfunc NewHTTPClient() Doer {\n\treturn &amp;http.Client{}\n}\n\ntype mockHTTPClient struct{}\n\nfunc (*mockHTTPClient) Do(req *http.Request) (*http.Response, error) {\n\t// The `NewRecorder` method of the httptest package gives us\n\t// a new mock request generator\n\tres := httptest.NewRecorder()\n\n\t// calling the `Result` method gives us\n\t// the default empty *http.Response object\n\treturn res.Result(), nil\n}\n\n// This gives us a mock HTTP client, which returns\n// an empty response for any request sent to it\nfunc NewMockHTTPClient() Doer {\n\treturn &amp;mockHTTPClient{}\n}\n</code></pre><p><code>NewHTTPClient</code>和<code>NewMockHTTPClient</code>都返回了同一个接口类型Doer，这使得二者可以互换使用。当你想测试一段调用了Doer接口Do方法的代码时，这一点特别有用。因为你可以使用一个Mock的HTTP客户端，从而避免了调用真实外部接口可能带来的失败。</p><p>来看个例子，假设我们想测试下面这段代码：</p><pre><code>func QueryUser(doer Doer) error {\n\treq, err := http.NewRequest(&quot;Get&quot;, &quot;http://iam.api.marmotedu.com:8080/v1/secrets&quot;, nil)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t_, err := doer.Do(req)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n</code></pre><p>其测试用例为：</p><pre><code>func TestQueryUser(t *testing.T) {\n\tdoer := NewMockHTTPClient()\n\tif err := QueryUser(doer); err != nil {\n\t\tt.Errorf(&quot;QueryUser failed, err: %v&quot;, err)\n\t}\n}\n</code></pre><p>另外，在使用简单工厂模式和抽象工厂模式返回实例对象时，都可以返回指针。例如，简单工厂模式可以这样返回实例对象：</p><pre><code>return &amp;Person{\n  Name: name,\n  Age: age\n}\n</code></pre><p>抽象工厂模式可以这样返回实例对象：</p><pre><code>return &amp;person{\n  name: name,\n  age: age\n}\n</code></pre><p>在实际开发中，我建议返回非指针的实例，因为我们主要是想通过创建实例，调用其提供的方法，而不是对实例做更改。如果需要对实例做更改，可以实现<code>SetXXX</code>的方法。通过返回非指针的实例，可以确保实例的属性，避免属性被意外/任意修改。</p><p>在<strong>简单工厂模式</strong>中，依赖于唯一的工厂对象，如果我们需要实例化一个产品，就要向工厂中传入一个参数，获取对应的对象；如果要增加一种产品，就要在工厂中修改创建产品的函数。这会导致耦合性过高，这时我们就可以使用<strong>工厂方法模式</strong>。</p><p>在<strong>工厂方法模式</strong>中，依赖工厂函数，我们可以通过实现工厂函数来创建多种工厂，将对象创建从由一个对象负责所有具体类的实例化，变成由一群子类来负责对具体类的实例化，从而将过程解耦。</p><p>下面是<strong>工厂方法模式</strong>的一个代码实现：</p><pre><code>type Person struct {\n\tname string\n\tage int\n}\n\nfunc NewPersonFactory(age int) func(name string) Person {\n\treturn func(name string) Person {\n\t\treturn Person{\n\t\t\tname: name,\n\t\t\tage: age,\n\t\t}\n\t}\n}\n</code></pre><p>然后，我们可以使用此功能来创建具有默认年龄的工厂：</p><pre><code>newBaby := NewPersonFactory(1)\nbaby := newBaby(&quot;john&quot;)\n\nnewTeenager := NewPersonFactory(16)\nteen := newTeenager(&quot;jill&quot;)\n</code></pre><h2>结构型模式</h2><p>我已经向你介绍了单例模式、工厂模式这两种创建型模式，接下来我们来看结构型模式（Structural Patterns），它的特点是<strong>关注类和对象的组合</strong>。这一类型里，我想详细讲讲策略模式和模板模式。</p><h3>策略模式</h3><p>策略模式（Strategy Pattern）定义一组算法，将每个算法都封装起来，并且使它们之间可以互换。</p><p>在什么时候，我们需要用到策略模式呢？</p><p>在项目开发中，我们经常要根据不同的场景，采取不同的措施，也就是不同的<strong>策略</strong>。比如，假设我们需要对a、b 这两个整数进行计算，根据条件的不同，需要执行不同的计算方式。我们可以把所有的操作都封装在同一个函数中，然后通过 <code>if ... else ...</code> 的形式来调用不同的计算方式，这种方式称之为<strong>硬编码</strong>。</p><p>在实际应用中，随着功能和体验的不断增长，我们需要经常添加/修改策略，这样就需要不断修改已有代码，不仅会让这个函数越来越难维护，还可能因为修改带来一些bug。所以为了解耦，需要使用策略模式，定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法（即策略）。</p><p>下面是一个实现策略模式的代码：</p><pre><code>package strategy\n\n// 策略模式\n\n// 定义一个策略类\ntype IStrategy interface {\n\tdo(int, int) int\n}\n\n// 策略实现：加\ntype add struct{}\n\nfunc (*add) do(a, b int) int {\n\treturn a + b\n}\n\n// 策略实现：减\ntype reduce struct{}\n\nfunc (*reduce) do(a, b int) int {\n\treturn a - b\n}\n\n// 具体策略的执行者\ntype Operator struct {\n\tstrategy IStrategy\n}\n\n// 设置策略\nfunc (operator *Operator) setStrategy(strategy IStrategy) {\n\toperator.strategy = strategy\n}\n\n// 调用策略中的方法\nfunc (operator *Operator) calculate(a, b int) int {\n\treturn operator.strategy.do(a, b)\n}\n</code></pre><p>在上述代码中，我们定义了策略接口 IStrategy，还定义了 add 和 reduce 两种策略。最后定义了一个策略执行者，可以设置不同的策略，并执行，例如：</p><pre><code>func TestStrategy(t *testing.T) {\n\toperator := Operator{}\n\n\toperator.setStrategy(&amp;add{})\n\tresult := operator.calculate(1, 2)\n\tfmt.Println(&quot;add:&quot;, result)\n\n\toperator.setStrategy(&amp;reduce{})\n\tresult = operator.calculate(2, 1)\n\tfmt.Println(&quot;reduce:&quot;, result)\n}\n</code></pre><p>可以看到，我们可以随意更换策略，而不影响Operator的所有实现。</p><h3>模版模式</h3><p>模版模式 (Template Pattern)定义一个操作中算法的骨架，而将一些步骤延迟到子类中。这种方法让子类在不改变一个算法结构的情况下，就能重新定义该算法的某些特定步骤。</p><p>简单来说，模板模式就是将一个类中能够公共使用的方法放置在抽象类中实现，将不能公共使用的方法作为抽象方法，强制子类去实现，这样就做到了将一个类作为一个模板，让开发者去填充需要填充的地方。</p><p>以下是模板模式的一个实现：</p><pre><code>package template\n\nimport &quot;fmt&quot;\n\ntype Cooker interface {\n\tfire()\n\tcooke()\n\toutfire()\n}\n\n// 类似于一个抽象类\ntype CookMenu struct {\n}\n\nfunc (CookMenu) fire() {\n\tfmt.Println(&quot;开火&quot;)\n}\n\n// 做菜，交给具体的子类实现\nfunc (CookMenu) cooke() {\n}\n\nfunc (CookMenu) outfire() {\n\tfmt.Println(&quot;关火&quot;)\n}\n\n// 封装具体步骤\nfunc doCook(cook Cooker) {\n\tcook.fire()\n\tcook.cooke()\n\tcook.outfire()\n}\n\ntype XiHongShi struct {\n\tCookMenu\n}\n\nfunc (*XiHongShi) cooke() {\n\tfmt.Println(&quot;做西红柿&quot;)\n}\n\ntype ChaoJiDan struct {\n\tCookMenu\n}\n\nfunc (ChaoJiDan) cooke() {\n\tfmt.Println(&quot;做炒鸡蛋&quot;)\n}\n</code></pre><p>这里来看下测试用例：</p><pre><code>func TestTemplate(t *testing.T) {\n\t// 做西红柿\n\txihongshi := &amp;XiHongShi{}\n\tdoCook(xihongshi)\n\n\tfmt.Println(&quot;\\n=====&gt; 做另外一道菜&quot;)\n\t// 做炒鸡蛋\n\tchaojidan := &amp;ChaoJiDan{}\n\tdoCook(chaojidan)\n\n}\n</code></pre><h2>行为型模式</h2><p>然后，让我们来看最后一个类别，行为型模式（Behavioral Patterns），它的特点是关注<strong>对象之间的通信</strong>。这一类别的设计模式中，我们会讲到代理模式和选项模式。</p><h3>代理模式</h3><p>代理模式 (Proxy Pattern)，可以为另一个对象提供一个替身或者占位符，以控制对这个对象的访问。</p><p>以下代码是一个代理模式的实现：</p><pre><code>package proxy\n\nimport &quot;fmt&quot;\n\ntype Seller interface {\n\tsell(name string)\n}\n\n// 火车站\ntype Station struct {\n\tstock int //库存\n}\n\nfunc (station *Station) sell(name string) {\n\tif station.stock &gt; 0 {\n\t\tstation.stock--\n\t\tfmt.Printf(&quot;代理点中：%s买了一张票,剩余：%d \\n&quot;, name, station.stock)\n\t} else {\n\t\tfmt.Println(&quot;票已售空&quot;)\n\t}\n\n}\n\n// 火车代理点\ntype StationProxy struct {\n\tstation *Station // 持有一个火车站对象\n}\n\nfunc (proxy *StationProxy) sell(name string) {\n\tif proxy.station.stock &gt; 0 {\n\t\tproxy.station.stock--\n\t\tfmt.Printf(&quot;代理点中：%s买了一张票,剩余：%d \\n&quot;, name, proxy.station.stock)\n\t} else {\n\t\tfmt.Println(&quot;票已售空&quot;)\n\t}\n}\n</code></pre><p>上述代码中，StationProxy代理了Station，代理类中持有被代理类对象，并且和被代理类对象实现了同一接口。</p><h3>选项模式</h3><p>选项模式（Options Pattern）也是Go项目开发中经常使用到的模式，例如，grpc/grpc-go的<a href=\"https://github.com/grpc/grpc-go/blob/v1.37.0/server.go#L514\">NewServer</a>函数，uber-go/zap包的<a href=\"https://github.com/uber-go/zap/blob/v1.16.0/logger.go#L65\">New</a>函数都用到了选项模式。使用选项模式，我们可以创建一个带有默认值的struct变量，并选择性地修改其中一些参数的值。</p><p>在Python语言中，创建一个对象时，可以给参数设置默认值，这样在不传入任何参数时，可以返回携带默认值的对象，并在需要时修改对象的属性。这种特性可以大大简化开发者创建一个对象的成本，尤其是在对象拥有众多属性时。</p><p>而在Go语言中，因为不支持给参数设置默认值，为了既能够创建带默认值的实例，又能够创建自定义参数的实例，不少开发者会通过以下两种方法来实现：</p><p>第一种方法，我们要分别开发两个用来创建实例的函数，一个可以创建带默认值的实例，一个可以定制化创建实例。</p><pre><code>package options\n\nimport (\n\t&quot;time&quot;\n)\n\nconst (\n\tdefaultTimeout = 10\n\tdefaultCaching = false\n)\n\ntype Connection struct {\n\taddr    string\n\tcache   bool\n\ttimeout time.Duration\n}\n\n// NewConnect creates a connection.\nfunc NewConnect(addr string) (*Connection, error) {\n\treturn &amp;Connection{\n\t\taddr:    addr,\n\t\tcache:   defaultCaching,\n\t\ttimeout: defaultTimeout,\n\t}, nil\n}\n\n// NewConnectWithOptions creates a connection with options.\nfunc NewConnectWithOptions(addr string, cache bool, timeout time.Duration) (*Connection, error) {\n\treturn &amp;Connection{\n\t\taddr:    addr,\n\t\tcache:   cache,\n\t\ttimeout: timeout,\n\t}, nil\n}\n</code></pre><p>使用这种方式，创建同一个Connection实例，却要实现两个不同的函数，实现方式很不优雅。</p><p>另外一种方法相对优雅些。我们需要创建一个带默认值的选项，并用该选项创建实例：</p><pre><code>package options\n\nimport (\n\t&quot;time&quot;\n)\n\nconst (\n\tdefaultTimeout = 10\n\tdefaultCaching = false\n)\n\ntype Connection struct {\n\taddr    string\n\tcache   bool\n\ttimeout time.Duration\n}\n\ntype ConnectionOptions struct {\n\tCaching bool\n\tTimeout time.Duration\n}\n\nfunc NewDefaultOptions() *ConnectionOptions {\n\treturn &amp;ConnectionOptions{\n\t\tCaching: defaultCaching,\n\t\tTimeout: defaultTimeout,\n\t}\n}\n\n// NewConnect creates a connection with options.\nfunc NewConnect(addr string, opts *ConnectionOptions) (*Connection, error) {\n\treturn &amp;Connection{\n\t\taddr:    addr,\n\t\tcache:   opts.Caching,\n\t\ttimeout: opts.Timeout,\n\t}, nil\n}\n</code></pre><p>使用这种方式，虽然只需要实现一个函数来创建实例，但是也有缺点：为了创建Connection实例，每次我们都要创建ConnectionOptions，操作起来比较麻烦。</p><p>那么有没有更优雅的解决方法呢？答案当然是有的，就是使用选项模式来创建实例。以下代码通过选项模式实现上述功能：</p><pre><code>package options\n\nimport (\n\t&quot;time&quot;\n)\n\ntype Connection struct {\n\taddr    string\n\tcache   bool\n\ttimeout time.Duration\n}\n\nconst (\n\tdefaultTimeout = 10\n\tdefaultCaching = false\n)\n\ntype options struct {\n\ttimeout time.Duration\n\tcaching bool\n}\n\n// Option overrides behavior of Connect.\ntype Option interface {\n\tapply(*options)\n}\n\ntype optionFunc func(*options)\n\nfunc (f optionFunc) apply(o *options) {\n\tf(o)\n}\n\nfunc WithTimeout(t time.Duration) Option {\n\treturn optionFunc(func(o *options) {\n\t\to.timeout = t\n\t})\n}\n\nfunc WithCaching(cache bool) Option {\n\treturn optionFunc(func(o *options) {\n\t\to.caching = cache\n\t})\n}\n\n// Connect creates a connection.\nfunc NewConnect(addr string, opts ...Option) (*Connection, error) {\n\toptions := options{\n\t\ttimeout: defaultTimeout,\n\t\tcaching: defaultCaching,\n\t}\n\n\tfor _, o := range opts {\n\t\to.apply(&amp;options)\n\t}\n\n\treturn &amp;Connection{\n\t\taddr:    addr,\n\t\tcache:   options.caching,\n\t\ttimeout: options.timeout,\n\t}, nil\n}\n</code></pre><p>在上面的代码中，首先我们定义了<code>options</code>结构体，它携带了timeout、caching两个属性。接下来，我们通过<code>NewConnect</code>创建了一个连接，<code>NewConnect</code>函数中先创建了一个带有默认值的<code>options</code>结构体变量，并通过调用</p><pre><code>for _, o := range opts {\n    o.apply(&amp;options)\n}\n</code></pre><p>来修改所创建的<code>options</code>结构体变量。</p><p>需要修改的属性，是在<code>NewConnect</code>时，通过Option类型的选项参数传递进来的。可以通过<code>WithXXX</code>函数来创建Option类型的选项参数：WithTimeout、WithCaching。</p><p>Option类型的选项参数需要实现<code>apply(*options)</code>函数，结合WithTimeout、WithCaching函数的返回值和optionFunc的apply方法实现，可以知道<code>o.apply(&amp;options)</code>其实就是把WithTimeout、WithCaching传入的参数赋值给options结构体变量，以此动态地设置options结构体变量的属性。</p><p>这里还有一个好处：我们可以在apply函数中自定义赋值逻辑，例如<code>o.timeout = 100 * t</code>。通过这种方式，我们会有更大的灵活性来设置结构体的属性。</p><p>选项模式有很多优点，例如：支持传递多个参数，并且在参数发生变化时保持兼容性；支持任意顺序传递参数；支持默认值；方便扩展；通过WithXXX的函数命名，可以使参数意义更加明确，等等。</p><p>不过，为了实现选项模式，我们增加了很多代码，所以在开发中，要根据实际场景选择是否使用选项模式。选项模式通常适用于以下场景：</p><ul>\n<li>结构体参数很多，创建结构体时，我们期望创建一个携带默认值的结构体变量，并选择性修改其中一些参数的值。</li>\n<li>结构体参数经常变动，变动时我们又不想修改创建实例的函数。例如：结构体新增一个retry参数，但是又不想在NewConnect入参列表中添加<code>retry int</code>这样的参数声明。</li>\n</ul><p>如果结构体参数比较少，可以慎重考虑要不要采用选项模式。</p><h2>总结</h2><p>设计模式，是业界沉淀下来的针对特定场景的最佳解决方案。在软件领域，GoF首次系统化提出了3大类设计模式：创建型模式、结构型模式、行为型模式。</p><p>这一讲，我介绍了Go项目开发中6种常用的设计模式。每种设计模式解决某一类场景，我给你总结成了一张表格，你可以根据自己的需要进行选择。</p><p><img src=\"https://static001.geekbang.org/resource/image/1e/01/1e32f9d8318c8968b50e9ea7e89bbe01.png?wh=1455x1015\" alt=\"\"></p><h2>课后练习</h2><ol>\n<li>你当前开发的项目中，哪些可以用单例模式、工厂模式、选项模式来重新实现呢？如果有的话，我建议你试着重写下这部分代码。</li>\n<li>除了这一讲我们学习的 6 种设计模式之外，你还用过其他的设计模式吗？欢迎你在留言区和我分享下你的经验，或者你踩过的坑。</li>\n</ol><p>欢迎你在留言区与我交流讨论，我们下一讲见。</p>","neighbors":{"left":{"article_title":"10 | 设计方法：怎么写出优雅的 Go 项目？","id":384648},"right":{"article_title":"12 | API 风格（上）：如何设计RESTful API？","id":386970}},"comments":[{"had_liked":false,"id":298375,"user_name":"Geek_947b62","can_delete":false,"product_type":"c1","uid":2229351,"ip_address":"","ucode":"016090F0242A35","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/2R88m4sKyHTTFQF8js2NCK57S56f3vHCWt27B46wrSzdSyHTndqQw0JatNXHrSm27H8lmX6icJdiaS0TQ8qvH7Vg/132","comment_is_top":false,"comment_ctime":1624069578,"is_pvip":false,"replies":[{"id":"108310","content":"是的，文章有问题，我找编辑修改下，感谢反馈!","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624208636,"ip_address":"","comment_id":298375,"utype":1}],"discussion_count":4,"race_medal":0,"score":"100408317386","product_id":100079601,"comment_content":"func GetIns() *singleton { if ins == nil { mu.Lock() defer mu.Unlock() ins = &amp;singleton{} } return ins}   这里有可能两个线程同时进入到if判断的，会出现多次实例化的。所以应该在加锁之后再判断一次才行。<br>func GetIns() *singleton { <br>\tif ins == nil { <br>\t\tmu.Lock() <br>\t\tdefer mu.Unlock()<br>\t\tif ins == nil {<br>\t\t\tins = &amp;singleton{} <br>\t\t} <br>\t\t<br>\t} <br>\treturn ins<br>}","like_count":23,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522118,"discussion_content":"是的，文章有问题，我找编辑修改下，感谢反馈!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624208636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026502,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/a9/c6/30b29c22.jpg","nickname":"那风在极客","note":"","ucode":"132B9263006BB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379996,"discussion_content":"go 的双重检测没有 java 的问题吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624275761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2054328,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/58/b8/c5468187.jpg","nickname":"despacito","note":"","ucode":"84C9AD52215B13","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379726,"discussion_content":"这才是go源码的实现方式, 双重检测,这课程那模式就是错的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624094798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1200704,"avatar":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","nickname":"pedro","note":"","ucode":"F40C839DDFD599","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379719,"discussion_content":"双重检测","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624092301,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301264,"user_name":"ppd0705","can_delete":false,"product_type":"c1","uid":1155646,"ip_address":"","ucode":"EB63D4E3FD1E9A","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKotsBr2icbYNYlRSlicGUD1H7lulSTQUAiclsEz9gnG5kCW9qeDwdYtlRMXic3V6sj9UrfKLPJnQojag/132","comment_is_top":false,"comment_ctime":1625616345,"is_pvip":false,"replies":[{"id":"109221","content":"OrDie，OrPanic，OrXxx类似这种缩写，省略掉Die、Panic、Xxx说明这个函数可能会Die、Panic、Xxx，总之意思是当条件不满足时，会发生一些不一样的事情。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1625851162,"ip_address":"","comment_id":301264,"utype":1}],"discussion_count":1,"race_medal":0,"score":"66050125785","product_id":100079601,"comment_content":"请问`GetCacheInsOr`里面的 “Or”是什么的缩写？","like_count":15,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522948,"discussion_content":"OrDie，OrPanic，OrXxx类似这种缩写，省略掉Die、Panic、Xxx说明这个函数可能会Die、Panic、Xxx，总之意思是当条件不满足时，会发生一些不一样的事情。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625851162,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299504,"user_name":"serverless","can_delete":false,"product_type":"c1","uid":1060695,"ip_address":"","ucode":"1D906FE31FC912","user_header":"https://static001.geekbang.org/account/avatar/00/10/2f/57/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1624684717,"is_pvip":false,"replies":[{"id":"108617","content":"老哥名字起得很屌，建议也很专业！我让老师改下。一种是函数级别的锁，一种是变量级别的锁。这里确实没必要用到函数级别的锁，只锁变量及其初始化就可以了。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624704614,"ip_address":"","comment_id":299504,"utype":1}],"discussion_count":3,"race_medal":0,"score":"44574357677","product_id":100079601,"comment_content":"func GetIns() *singleton {<br>\tif ins == nil {<br>\t\tmu.Lock()<br>\t\tdefer mu.Unlock()<br>\t\tif ins == nil {<br>\t\t\tins = &amp;singleton{}<br>\t\t}<br>\t}<br>\treturn ins<br>}<br>滥用 defer 嫌疑，建议改成<br>func GetIns() *singleton {<br>\tif ins == nil {<br>\t\tmu.Lock()<br>\t\tif ins == nil {<br>\t\t\tins = &amp;singleton{}<br>\t\t}<br>\t\tmu.Unlock()<br>\t}<br>\treturn ins<br>}","like_count":11,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522459,"discussion_content":"老哥名字起得很屌，建议也很专业！我让老师改下。一种是函数级别的锁，一种是变量级别的锁。这里确实没必要用到函数级别的锁，只锁变量及其初始化就可以了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624704614,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556119,"discussion_content":"大佬！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647225462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2127810,"avatar":"","nickname":"Geek_ee66bf","note":"","ucode":"CE827D43ED7DEA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391806,"discussion_content":"如果变量初始化报异常，mu不是就不会unlock了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630638000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298970,"user_name":"Dpp的小跟班儿","can_delete":false,"product_type":"c1","uid":1566294,"ip_address":"","ucode":"4AF5F9892C575E","user_header":"https://static001.geekbang.org/account/avatar/00/17/e6/56/020f2209.jpg","comment_is_top":false,"comment_ctime":1624412129,"is_pvip":false,"replies":[{"id":"108643","content":"感谢反馈，我们更新下","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624710070,"ip_address":"","comment_id":298970,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18804281313","product_id":100079601,"comment_content":"简单工厂模式的示例代码那里，最后返回应该是 return &amp;Person{XXX,XXX,}，NewPerson方法的返回值类型是指针","like_count":4,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522296,"discussion_content":"感谢反馈，我们更新下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624710070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298462,"user_name":"Vackine","can_delete":false,"product_type":"c1","uid":1139588,"ip_address":"","ucode":"8E412EE82D3B59","user_header":"https://static001.geekbang.org/account/avatar/00/11/63/84/f45c4af9.jpg","comment_is_top":false,"comment_ctime":1624118884,"is_pvip":false,"replies":[{"id":"108311","content":"是的哈，更新了，感谢反馈","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624208719,"ip_address":"","comment_id":298462,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18803988068","product_id":100079601,"comment_content":"单例模式的实现里面是不是还要加一个只读的逻辑啊，万一获取了之后，对其修改了不就不一样了？","like_count":4,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522149,"discussion_content":"是的哈，更新了，感谢反馈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624208719,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348510,"user_name":"Ryoma","can_delete":false,"product_type":"c1","uid":1130590,"ip_address":"","ucode":"7F692369239692","user_header":"https://static001.geekbang.org/account/avatar/00/11/40/5e/b8fada94.jpg","comment_is_top":false,"comment_ctime":1655163917,"is_pvip":true,"discussion_count":1,"race_medal":2,"score":"14540065805","product_id":100079601,"comment_content":"咱就是说，行为型和结构型有没有可能弄反了= =","like_count":3,"discussions":[{"author":{"id":2894734,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/2b/8e/4d24c872.jpg","nickname":"season","note":"","ucode":"1CBBFCC58A245E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579388,"discussion_content":"+1","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657421845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306705,"user_name":"Hector","can_delete":false,"product_type":"c1","uid":1496889,"ip_address":"","ucode":"110CAF87ADDC01","user_header":"https://static001.geekbang.org/account/avatar/00/16/d7/39/6698b6a9.jpg","comment_is_top":false,"comment_ctime":1628673258,"is_pvip":false,"replies":[{"id":"111430","content":"通过接口强制要求optionFunc都要有apply方法","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1629251498,"ip_address":"","comment_id":306705,"utype":1}],"discussion_count":6,"race_medal":0,"score":"14513575146","product_id":100079601,"comment_content":"请问老师，在选项模式中，使用了Option接口的意义是为了什么，这样做增加了代码的复杂度，为什么不在WithTimeout函数中直接返回optionFunc？","like_count":3,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524880,"discussion_content":"通过接口强制要求optionFunc都要有apply方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629251498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1252164,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1b/44/82acaafc.jpg","nickname":"无为","note":"","ucode":"81D7AF5E1FDD30","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":552367,"discussion_content":"不知道这个行不行? \n\n把 optionFunc 去掉, 直接定义 type Option func(*options)\n把 options 去掉也行, 代码就更简省子, 不过有 options 好处是可以修改的属性更集中清晰.\n\npackage options\n\nimport (\n\t&#34;time&#34;\n)\n\ntype Connection struct {\n\taddr    string\n\tcache   bool\n\ttimeout time.Duration\n}\n\nconst (\n\tdefaultTimeout = 10\n\tdefaultCaching = false\n)\n\ntype Option func(*Connection)\n\nfunc WithTimeout(t time.Duration) Option {\n\treturn func(o *Connection) {\n\t\to.timeout = t\n\t}\n}\n\nfunc WithCaching(cache bool) Option {\n\treturn func(o *Connection) {\n\t\to.cache = cache\n\t}\n}\n\n// Connect creates a connection.\nfunc NewConnect(addr string, opts ...Option) (*Connection, error) {\n\tconn := &amp;Connection{\n\t\taddr:    addr,\n\t\tcache:   defaultCaching,\n\t\ttimeout: defaultTimeout,\n\t}\n\n\tfor _, o := range opts {\n\t\to(conn)\n\t}\n\n\treturn conn, nil\n}","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1645432188,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":524880,"ip_address":""},"score":552367,"extra":""}]},{"author":{"id":2005513,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/9a/09/af250bf8.jpg","nickname":"熊@熊","note":"","ucode":"2A792BA769348E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575267,"discussion_content":"应该是为了防止误传其它也是以配置为入参的函数","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654694896,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1071974,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5b/66/ad35bc68.jpg","nickname":"党","note":"","ucode":"EE531DB3EA124D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558207,"discussion_content":"这里的接口很专的 在别处根本用不上 没必须要非要为了接口而接口 相反不用接口更加清晰明了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648134271,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2676077,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJObaUyY2wD0l1dvw72MHHEZTyse5zQicr7QmOpc9ydNg73yseUICfUMQ5libfkHcDriaslnh6nB1LZw/132","nickname":"Geek_d63f2e","note":"","ucode":"697E05E20C4AA1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556105,"discussion_content":"这种也是一种比较好的实现方法","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647219174,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1860466,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/63/72/a85661ee.jpg","nickname":"船长","note":"","ucode":"7CFEAA6C3189F0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":539973,"discussion_content":"不实现apply方法不是也可以吗？实现apply方法也是调用optionFunc","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639906436,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298618,"user_name":"EvanSung","can_delete":false,"product_type":"c1","uid":1542472,"ip_address":"","ucode":"0945F016568422","user_header":"https://static001.geekbang.org/account/avatar/00/17/89/48/7c849f0d.jpg","comment_is_top":false,"comment_ctime":1624239218,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14509141106","product_id":100079601,"comment_content":"厉害了，每篇质量都这么高，强哦！！！","like_count":3},{"had_liked":false,"id":323007,"user_name":"yandongxiao","can_delete":false,"product_type":"c1","uid":1017700,"ip_address":"","ucode":"D397F4DB0109C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/64/3882d90d.jpg","comment_is_top":false,"comment_ctime":1637685845,"is_pvip":false,"replies":[{"id":"117682","content":"6666","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1638362584,"ip_address":"","comment_id":323007,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10227620437","product_id":100079601,"comment_content":"总结：<br>    1. 设计模式共计25种，分为三类：创建型模式、结构性模式、行为模式<br>    2. 创建型模式包括：单例模式（懒汉模式、饿汉模式、并发安全）、工厂模式（简单工厂、抽象工厂、工厂方法）<br>    3. 结构性模式：策略模式和模板模式。隐含了对扩展开放、对修改关闭的原则。<br>    4. 行为模式：代理模式、选项模式。","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535163,"discussion_content":"6666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638362584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306001,"user_name":"Sch0ng","can_delete":false,"product_type":"c1","uid":1145554,"ip_address":"","ucode":"73F6113931B1AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","comment_is_top":false,"comment_ctime":1628266303,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10218200895","product_id":100079601,"comment_content":"学习设计模式一方面可以指导自己写出优雅的代码，另一方面阅读别人代码的时候可以通过模式匹配快速领悟核心思想。理解不到位的时候尽量不要用，团队水平方差太大的时候尽量少用。","like_count":2,"discussions":[{"author":{"id":1145554,"avatar":"https://static001.geekbang.org/account/avatar/00/11/7a/d2/4ba67c0c.jpg","nickname":"Sch0ng","note":"","ucode":"73F6113931B1AC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":399558,"discussion_content":"把这6个设计模式敲一遍的愿望，今天实现了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632990893,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303353,"user_name":"姚力晓","can_delete":false,"product_type":"c1","uid":2447778,"ip_address":"","ucode":"64DE7980555B88","user_header":"https://static001.geekbang.org/account/avatar/00/25/59/a2/b28b1ffb.jpg","comment_is_top":false,"comment_ctime":1626746667,"is_pvip":false,"replies":[{"id":"110235","content":"因为不涉及到更新person中的字段，所以没有用指针。<br><br>如果你需要在方法中更新person中的值，是可以改成指针的","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1627600168,"ip_address":"","comment_id":303353,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10216681259","product_id":100079601,"comment_content":"抽象工厂模式，func（p person）Greet()  为什么没有用指针呢？","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523644,"discussion_content":"因为不涉及到更新person中的字段，所以没有用指针。\n\n如果你需要在方法中更新person中的值，是可以改成指针的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627600168,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1252164,"avatar":"https://static001.geekbang.org/account/avatar/00/13/1b/44/82acaafc.jpg","nickname":"无为","note":"","ucode":"81D7AF5E1FDD30","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":552360,"discussion_content":"\n返回指针还是值, 不仅仅考虑的是改不改属性吧.\n返回值, 会有一个复制的行为. 既然属性是私有的, 包以外正常途径是改不了的, 返回指针会不会省点.\n\n不知道这么理解对不对","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645430134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":523644,"ip_address":""},"score":552360,"extra":""}]}]},{"had_liked":false,"id":299861,"user_name":"Geek_c9a012","can_delete":false,"product_type":"c1","uid":1315231,"ip_address":"","ucode":"839BD7B5D348E7","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJPZN07CicHGCjkv5FuD013mpLxHN3y78UZA8FhvYkuNyqzqyA7A2XxxkUC1ax3V2JfdfJWWZgkVmg/132","comment_is_top":false,"comment_ctime":1624888082,"is_pvip":true,"replies":[{"id":"108965","content":"感谢老哥反馈！我们更新下，老哥，我发现你看的真的很仔细！！！给个大大的赞！！！","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1625390126,"ip_address":"","comment_id":299861,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10214822674","product_id":100079601,"comment_content":"抓Bug：<br>1. 简单工厂模式的实例代码（13行）和抽象工厂模式的实例代码（18行）行末均少了一个 &quot;,&quot; 在Go 1.16.3 下提示错误<br>2. 选项模式的实例代码中，47行的函数名错了，应该是 NewConnect<br><br>这几个结合Golang自身特色的设计模式介绍很有价值，感谢作者提供这么好的课程","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522565,"discussion_content":"感谢老哥反馈！我们更新下，老哥，我发现你看的真的很仔细！！！给个大大的赞！！！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625390126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298358,"user_name":"helloworld","can_delete":false,"product_type":"c1","uid":1105161,"ip_address":"","ucode":"1EECCA0F43E278","user_header":"https://static001.geekbang.org/account/avatar/00/10/dd/09/feca820a.jpg","comment_is_top":false,"comment_ctime":1624038736,"is_pvip":false,"replies":[{"id":"108319","content":"这里的接口指的是函数，我更新下文章哈","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624209920,"ip_address":"","comment_id":298358,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10213973328","product_id":100079601,"comment_content":"“在工厂方法模式中，依赖工厂接口，我们可以通过实现工厂接口来创建多种工厂”，这里说依赖工厂接口，但是下面给的对应栗子中为什么没有接口呢","like_count":2,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522110,"discussion_content":"这里的接口指的是函数，我更新下文章哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624209920,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338013,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":false,"comment_ctime":1647235227,"is_pvip":false,"replies":[{"id":"123602","content":"6666","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1647260303,"ip_address":"","comment_id":338013,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5942202523","product_id":100079601,"comment_content":"适用选项模式的场景也适用于建造者模式（Builder），对比代码如下<br><br>选项模式创建对象<br><br>```go<br>func main() {<br>\tconn, err := options.NewConnect(&quot;http:&#47;&#47;localhost:8080&quot;,<br>\t\toptions.WithTimeout(time.Second*10),<br>\t\toptions.WithCaching(true))<br>\tif err != nil {<br>\t\tlog.Fatal(err)<br>\t}<br>\tfmt.Println(&quot;conn:&quot;, conn)<br>}<br>```<br><br>建造者模式创建对象<br><br>```go<br>package main<br><br>import (<br>\t&quot;fmt&quot;<br>\t&quot;time&quot;<br>)<br><br>type Connection struct {<br>\taddr    string<br>\tcache   bool<br>\ttimeout time.Duration<br>}<br><br>type ConnectionBuilder struct {<br>\tconnection *Connection<br>}<br><br>func Builder() *ConnectionBuilder {<br>\treturn &amp;ConnectionBuilder{&amp;Connection{}}<br>}<br><br>func (c *ConnectionBuilder) WithAddr(addr string) *ConnectionBuilder {<br>\tc.connection.addr = addr<br>\treturn c<br>}<br><br>func (c *ConnectionBuilder) WithCaching(cache bool) *ConnectionBuilder {<br>\tc.connection.cache = cache<br>\treturn c<br>}<br><br>func (c *ConnectionBuilder) WithTimeout(t time.Duration) *ConnectionBuilder {<br>\tc.connection.timeout = t<br>\treturn c<br>}<br><br>func (c *ConnectionBuilder) Build() Connection {<br>\treturn *c.connection<br>}<br><br>func main() {<br>\tconnBuilder := Builder()<br>\tconnBuilder.<br>\t\tWithAddr(&quot;http:&#47;&#47;localhost:8080&quot;).<br>\t\tWithCaching(true).<br>\t\tWithTimeout(time.Second * 10)<br><br>\tconn := connBuilder.Build()<br>\tfmt.Println(&quot;conn:&quot;, conn)<br>}<br>```","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556239,"discussion_content":"6666","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647260303,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":336211,"user_name":"reboot","can_delete":false,"product_type":"c1","uid":1462758,"ip_address":"","ucode":"83B79D1F6255F3","user_header":"https://static001.geekbang.org/account/avatar/00/16/51/e6/387f5243.jpg","comment_is_top":false,"comment_ctime":1646011338,"is_pvip":true,"replies":[{"id":"123432","content":"感谢反馈，我找编辑更正回来","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1647038712,"ip_address":"","comment_id":336211,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5940978634","product_id":100079601,"comment_content":"分类错了吧？<br><br>行为模式：策略、模版<br>结构模式：代理","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555692,"discussion_content":"感谢反馈，我找编辑更正回来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647038712,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2415188,"avatar":"https://static001.geekbang.org/account/avatar/00/24/da/54/feb32c3f.jpg","nickname":"Barry Yan","note":"","ucode":"739F505066AFE0","race_medal":5,"user_type":1,"is_pvip":false},"reply_author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":585443,"discussion_content":"图片还没更新","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661573272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":555692,"ip_address":"北京"},"score":585443,"extra":""}]},{"author":{"id":1856981,"avatar":"","nickname":"互联网砖瓦匠","note":"","ucode":"7A70CFADCBEEC4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591488,"discussion_content":"细节决定成败，这细节。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666598498,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318751,"user_name":"Derek","can_delete":false,"product_type":"c1","uid":1146983,"ip_address":"","ucode":"A4D5DED1E00F60","user_header":"https://static001.geekbang.org/account/avatar/00/11/80/67/4e381da5.jpg","comment_is_top":false,"comment_ctime":1635411954,"is_pvip":false,"replies":[{"id":"115964","content":"正常现象，设计模式，看起来不好理解，使用起来，更是有种很陌生的感觉。多写，多练，没有太多技巧","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1636004237,"ip_address":"","comment_id":318751,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5930379250","product_id":100079601,"comment_content":"我感觉工厂方法模式那块我看不懂。。。我好菜  = =！","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529370,"discussion_content":"正常现象，设计模式，看起来不好理解，使用起来，更是有种很陌生的感觉。多写，多练，没有太多技巧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636004237,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3010811,"avatar":"","nickname":"jayqiyoung","note":"","ucode":"344AC280A3DBED","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590668,"discussion_content":"同感，有点抽象和网上说的不太一样\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665988398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312128,"user_name":"Geek8292","can_delete":false,"product_type":"c1","uid":2328983,"ip_address":"","ucode":"3F233DA2926759","user_header":"","comment_is_top":false,"comment_ctime":1631632154,"is_pvip":false,"replies":[{"id":"113684","content":"后来新增了2种","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1632759777,"ip_address":"","comment_id":312128,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5926599450","product_id":100079601,"comment_content":"我看gof官方是23种设计模式","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":526871,"discussion_content":"后来新增了2种","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632759777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308599,"user_name":"charming-kamly","can_delete":false,"product_type":"c1","uid":1226457,"ip_address":"","ucode":"B68981240BCB2C","user_header":"https://static001.geekbang.org/account/avatar/00/12/b6/d9/09d9c35c.jpg","comment_is_top":false,"comment_ctime":1629695626,"is_pvip":false,"replies":[{"id":"112022","content":"火车站代售点就是一个场景","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1630113173,"ip_address":"","comment_id":308599,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5924662922","product_id":100079601,"comment_content":"求问  代理模式 在哪些场景可以使用？ 可以举一下具体例子么","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525556,"discussion_content":"火车站代售点就是一个场景","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630113173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556121,"discussion_content":"vpn 是一个经典案例","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647225577,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304065,"user_name":"Geek_a4cca6","can_delete":false,"product_type":"c1","uid":2136813,"ip_address":"","ucode":"68B3E4FDECFFF0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5GQZCecntmOibVjWkMWVnibqXEZhAYnFiaRkgfAUGdrQBWzfXjqsYteLee6afDEjvBLBVa5uvtWYTTicwO2jKia0zOw/132","comment_is_top":false,"comment_ctime":1627217823,"is_pvip":false,"replies":[{"id":"110224","content":"是的，单例模式、选项模式用的也挺多的","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1627598468,"ip_address":"","comment_id":304065,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5922185119","product_id":100079601,"comment_content":"实际我们一般用得比较多的还是工厂模式和模板模式、策略模式这几种感觉","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523919,"discussion_content":"是的，单例模式、选项模式用的也挺多的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627598468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304063,"user_name":"Geek_a4cca6","can_delete":false,"product_type":"c1","uid":2136813,"ip_address":"","ucode":"68B3E4FDECFFF0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5GQZCecntmOibVjWkMWVnibqXEZhAYnFiaRkgfAUGdrQBWzfXjqsYteLee6afDEjvBLBVa5uvtWYTTicwO2jKia0zOw/132","comment_is_top":false,"comment_ctime":1627216939,"is_pvip":false,"replies":[{"id":"110225","content":"老哥说的非常对！要结合具体的代码和场景。可以看看IAM项目的代码，再将IAM组件源码时间时有提到的。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1627598510,"ip_address":"","comment_id":304063,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5922184235","product_id":100079601,"comment_content":"这些设置模式通过实例来讲感觉受益匪浅，可能还是要结合实际的场景多运用才行，看似明白可能实际用时还是不会，希望后面可以结合这些模式在项目中使用，真正让大家理解和明白。","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523918,"discussion_content":"老哥说的非常对！要结合具体的代码和场景。可以看看IAM项目的代码，再将IAM组件源码时间时有提到的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627598510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303870,"user_name":"哈哈","can_delete":false,"product_type":"c1","uid":2103346,"ip_address":"","ucode":"36FA6523C6295C","user_header":"https://static001.geekbang.org/account/avatar/00/20/18/32/31fc3811.jpg","comment_is_top":false,"comment_ctime":1627035577,"is_pvip":false,"replies":[{"id":"110229","content":"是的哈，我修复下，感谢反馈！","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1627599032,"ip_address":"","comment_id":303870,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5922002873","product_id":100079601,"comment_content":"结构型模式和行为型模式是不是弄反了？","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523853,"discussion_content":"是的哈，我修复下，感谢反馈！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627599032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299819,"user_name":"dll","can_delete":false,"product_type":"c1","uid":1264401,"ip_address":"","ucode":"5773CBC8BFB91F","user_header":"https://static001.geekbang.org/account/avatar/00/13/4b/11/d7e08b5b.jpg","comment_is_top":false,"comment_ctime":1624871183,"is_pvip":true,"replies":[{"id":"108757","content":"目前都比较零散，系统性讲解25种设计模式的还没有。有些目标是讲25种设计模式，但目前只讲了其中一部分。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624930159,"ip_address":"","comment_id":299819,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5919838479","product_id":100079601,"comment_content":"老师，有没有系统的讲go语言设计模式的书籍或者资料推进啊","like_count":1,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522550,"discussion_content":"目前都比较零散，系统性讲解25种设计模式的还没有。有些目标是讲25种设计模式，但目前只讲了其中一部分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624930159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556122,"discussion_content":"《Head First 设计模式》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647225634,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2084425,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/ce/49/531ceb0a.jpg","nickname":"Jeremy","note":"","ucode":"6CB107B929A9BE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530418,"discussion_content":"Hands-On Software Architecture with Golang的第三章&#34;Design Patterns&#34;中有讲到一些","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637071225,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":360186,"user_name":"sugar","can_delete":false,"product_type":"c1","uid":2184057,"ip_address":"江苏","ucode":"491906283FC13B","user_header":"https://static001.geekbang.org/account/avatar/00/21/53/79/327ef30e.jpg","comment_is_top":false,"comment_ctime":1666258757,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1666258757","product_id":100079601,"comment_content":"为啥我的 vscode import  &quot;sync&quot; 自动给去掉了","like_count":0},{"had_liked":false,"id":359895,"user_name":"鸿溟","can_delete":false,"product_type":"c1","uid":1037940,"ip_address":"北京","ucode":"C8FC4C3DB6161E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/d6/74/6f04af6f.jpg","comment_is_top":false,"comment_ctime":1666022044,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1666022044","product_id":100079601,"comment_content":"单例模式中的 once.Do 方式，也属于懒汉式吧","like_count":0},{"had_liked":false,"id":357676,"user_name":"穿山乙","can_delete":false,"product_type":"c1","uid":2127125,"ip_address":"广东","ucode":"4C3078289D5596","user_header":"https://static001.geekbang.org/account/avatar/00/20/75/15/7b22b6c1.jpg","comment_is_top":false,"comment_ctime":1663555688,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1663555688","product_id":100079601,"comment_content":"这几种都挺常用的","like_count":0},{"had_liked":false,"id":357394,"user_name":"jack","can_delete":false,"product_type":"c1","uid":1254562,"ip_address":"浙江","ucode":"040741A40A47B9","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/a2/d61e4e28.jpg","comment_is_top":false,"comment_ctime":1663222570,"is_pvip":true,"discussion_count":0,"race_medal":1,"score":"1663222570","product_id":100079601,"comment_content":"实际工作中，个人觉得选项模式的接口可以取消掉，虽然扩展性会好一些，封装起来倒是更复杂了<br><br>type Connection struct {<br>\taddr  string<br>\tage   int<br>}<br><br>&#47;&#47; 定义返回当前对象修改的指针方法<br>type Option func(*Connection)<br><br>func withAge(age int) Option {<br>\treturn func(c *Connection) {<br>\t\tc.age = age<br>\t}<br>}<br><br>func newConnection(addr string, opts ...Option) *Connection {<br>\tconnection := &amp;Connection{<br>\t\taddr:  addr,<br>\t\tage:   666,<br>\t}<br><br>\tfor _, apply := range opts {<br>\t\tapply(connection)<br>\t}<br><br>\treturn connection<br>}","like_count":1},{"had_liked":false,"id":352346,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1658566567,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658566567","product_id":100079601,"comment_content":"策略模式，应用场景：抖音算法推送，封装好算法，然后选择哪种算法。","like_count":0},{"had_liked":false,"id":352341,"user_name":"顺势而为","can_delete":false,"product_type":"c1","uid":2757858,"ip_address":"","ucode":"FE7D688D24823E","user_header":"https://static001.geekbang.org/account/avatar/00/2a/14/e2/f6f1627c.jpg","comment_is_top":false,"comment_ctime":1658565799,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658565799","product_id":100079601,"comment_content":"你当前开发的项目中，哪些可以用单例模式、工厂模式、选项模式来重新实现呢？<br>答：1.平时写OSS、OBS实例，数据库连接，调用一些远程实例的时候，就会用到单例模式。<br>2.工厂模式，为了解决一些函数复用，封装。<br>3.选项模式，为了解决一些版本兼容问题。","like_count":0},{"had_liked":false,"id":346812,"user_name":"胡小涵","can_delete":false,"product_type":"c1","uid":2004538,"ip_address":"","ucode":"2E750C65EC282C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/96/3a/e06f8367.jpg","comment_is_top":false,"comment_ctime":1653450040,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653450040","product_id":100079601,"comment_content":"我们写代码时，是不可以出现汉语拼音的！不然口水滴到键盘上你可能赔不起。","like_count":0},{"had_liked":false,"id":345469,"user_name":"G.T","can_delete":false,"product_type":"c1","uid":2178458,"ip_address":"","ucode":"A56BD66ABE8CD6","user_header":"https://static001.geekbang.org/account/avatar/00/21/3d/9a/23acef0b.jpg","comment_is_top":false,"comment_ctime":1652314999,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652314999","product_id":100079601,"comment_content":"这篇文章让策略模式的应用更接地气，真有你的哈","like_count":0},{"had_liked":false,"id":342001,"user_name":"Geek_f23c82","can_delete":false,"product_type":"c1","uid":2725008,"ip_address":"","ucode":"40BABEF7078F37","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIW5xLKMIwlibBXdP5sGVqhXAGuLYk7XFBrhzkFytlKicjNpSHIKXQclDUlSbD9s2HDuOiaBXslCqVbg/132","comment_is_top":false,"comment_ctime":1649946836,"is_pvip":false,"replies":[{"id":"125535","content":"我找编辑更新下，感谢！","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1651079003,"ip_address":"","comment_id":342001,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1649946836","product_id":100079601,"comment_content":"结构模式和行为模式分类返回了","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568226,"discussion_content":"我找编辑更新下，感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651079004,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2894734,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/2b/8e/4d24c872.jpg","nickname":"season","note":"","ucode":"1CBBFCC58A245E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":579391,"discussion_content":"好像还没有修复？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657422121,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":568226,"ip_address":""},"score":579391,"extra":""}]}]},{"had_liked":false,"id":340651,"user_name":"Geek_7bdc67","can_delete":false,"product_type":"c1","uid":2702988,"ip_address":"","ucode":"7E29A29D758E82","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eotYI6qs5aGXzxUO8NS2ibT7kDQPlUxibY7CT8zQozHM0xlnrVagMDbGwL6U0ZSNc1ckr33jW1Gy25g/132","comment_is_top":false,"comment_ctime":1648995226,"is_pvip":true,"replies":[{"id":"125549","content":"没错，这里返回值类型是接口类型，而非具体的类型","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1651079700,"ip_address":"","comment_id":340651,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648995226","product_id":100079601,"comment_content":"func WithTimeout(t time.Duration) Option {  return optionFunc(func(o *options) {    o.timeout = t  })}<br>这里写错了吧？<br>应该是：<br>func WithTimeout(t time.Duration) optionFunc {<br>\treturn func(o *options) {<br>\t\to.timeout = t<br>\t}<br>}<br>","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":568245,"discussion_content":"没错，这里返回值类型是接口类型，而非具体的类型","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651079700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339499,"user_name":"党","can_delete":false,"product_type":"c1","uid":1071974,"ip_address":"","ucode":"EE531DB3EA124D","user_header":"https://static001.geekbang.org/account/avatar/00/10/5b/66/ad35bc68.jpg","comment_is_top":false,"comment_ctime":1648135478,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1648135478","product_id":100079601,"comment_content":"这里好多模式平常都用到了 只是不知道叫这些名字 像工厂模式 选项模式 单例模式 代码里用的很多，唯一有个模板模式因为golang语言特性，这种模式不如在python中用的威力大，宿主结构体内嵌模板结构体，模板结构体根本获取不到宿主结构体任何的属性和方法，所以模板结构体只能定义与宿主属性无关的方法，但是非要用的话只能模仿python把模板结构体第一个参数搞成宿主结构体实现的接口，非常的不优雅。<br>除了这些设计模式，还有种方式我觉得很重要，资源注入方式，比如一个web框架 调用db对象可以有两种模式，一种是全局定义一个，需要的时候直接通过包引入使用，还有种方式，定一个类似context的对象，把db对象注入这个类Context里，这个对象最终传给control层使用，第一种方式编码很零乱，各个模块强耦合这个对象，资源注入方式代码就很有层次。go-zero框架就是搞了一个svc注入各种资源<br>","like_count":0},{"had_liked":false,"id":329658,"user_name":"iiskee","can_delete":false,"product_type":"c1","uid":1315450,"ip_address":"","ucode":"475BF76CEA67D2","user_header":"https://static001.geekbang.org/account/avatar/00/14/12/7a/516d5396.jpg","comment_is_top":false,"comment_ctime":1641460358,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641460358","product_id":100079601,"comment_content":"选项模式有点复杂哦，和Builder有什么差别吗","like_count":0},{"had_liked":false,"id":326602,"user_name":"脱缰小野马","can_delete":false,"product_type":"c1","uid":1358825,"ip_address":"","ucode":"D65D18BDB8E005","user_header":"https://static001.geekbang.org/account/avatar/00/14/bb/e9/ae1fbbaf.jpg","comment_is_top":false,"comment_ctime":1639578637,"is_pvip":false,"replies":[{"id":"119695","content":"感谢分享，我后面有时间加上","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1640824838,"ip_address":"","comment_id":326602,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639578637","product_id":100079601,"comment_content":"我发现作者行文语言挺好懂的. <br><br>可以讲一讲管道模式吗?以及Timeout、Pipeline、Cancellation、Fanout、errgroup 等模式","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542638,"discussion_content":"感谢分享，我后面有时间加上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640824838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325693,"user_name":"ArtistLu","can_delete":false,"product_type":"c1","uid":1166373,"ip_address":"","ucode":"2E641A3EB4F9AC","user_header":"https://static001.geekbang.org/account/avatar/00/11/cc/25/8c6eab2c.jpg","comment_is_top":false,"comment_ctime":1639099662,"is_pvip":true,"replies":[{"id":"118334","content":"两种不同的方式。效果是一样的，可以根据喜好选择，没有好坏之分。","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1639398706,"ip_address":"","comment_id":325693,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639099662","product_id":100079601,"comment_content":"选项模式比项目中的多一个apply更复杂有必要吗？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538324,"discussion_content":"两种不同的方式。效果是一样的，可以根据喜好选择，没有好坏之分。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639398706,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323417,"user_name":"左耳朵东","can_delete":false,"product_type":"c1","uid":1160678,"ip_address":"","ucode":"60134ACF12BB52","user_header":"https://static001.geekbang.org/account/avatar/00/11/b5/e6/c67f12bd.jpg","comment_is_top":false,"comment_ctime":1637895245,"is_pvip":false,"replies":[{"id":"117697","content":"增加一种产品，其实就是创建一个新的实例。","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1638363336,"ip_address":"","comment_id":323417,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637895245","product_id":100079601,"comment_content":"&quot;在简单工厂模式中，依赖于唯一的工厂对象，如果我们需要实例化一个产品，就要向工厂中传入一个参数，获取对应的对象；如果要增加一种产品，就要在工厂中修改创建产品的函数。这会导致耦合性过高&quot;<br>这里没懂，什么是“增加一种产品”，要在工厂中怎样修改，可以给个示例吗？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535181,"discussion_content":"增加一种产品，其实就是创建一个新的实例。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638363336,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323284,"user_name":"dairongpeng","can_delete":false,"product_type":"c1","uid":1624416,"ip_address":"","ucode":"CDC889B7ECB53E","user_header":"https://static001.geekbang.org/account/avatar/00/18/c9/60/2f7eb4b5.jpg","comment_is_top":false,"comment_ctime":1637818754,"is_pvip":false,"replies":[{"id":"117693","content":"专栏后面源码解析的时候，会提到的","user_name":"作者回复","user_name_real":"编辑","uid":"1167883","ctime":1638362965,"ip_address":"","comment_id":323284,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637818754","product_id":100079601,"comment_content":"老师能大概列一些这些设计模式在iam中的应用场景么，这样的话可以帮助读者更好的阅读iam的源码","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":535176,"discussion_content":"专栏后面源码解析的时候，会提到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638362965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":316161,"user_name":"andox","can_delete":false,"product_type":"c1","uid":1312987,"ip_address":"","ucode":"28C037A0F82E7D","user_header":"","comment_is_top":false,"comment_ctime":1634185540,"is_pvip":false,"replies":[{"id":"114930","content":"根据需要选择即可","user_name":"作者回复","user_name_real":"孔令飞","uid":"1167883","ctime":1634741406,"ip_address":"","comment_id":316161,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1634185540","product_id":100079601,"comment_content":"选项模式来构造对象，是不是链式更简单便捷解决不定参数赋值","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528286,"discussion_content":"根据需要选择即可","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634741406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":314041,"user_name":"Juniper","can_delete":false,"product_type":"c1","uid":1174794,"ip_address":"","ucode":"1BC24554034BD3","user_header":"https://static001.geekbang.org/account/avatar/00/11/ed/0a/18201290.jpg","comment_is_top":false,"comment_ctime":1632815469,"is_pvip":false,"replies":[{"id":"113772","content":"后面会慢慢补齐，作为加餐项添加进来","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1632846842,"ip_address":"","comment_id":314041,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632815469","product_id":100079601,"comment_content":"对于设计模式，作者讲的通俗易懂，希望作者把剩下的设计模式都讲完","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527554,"discussion_content":"后面会慢慢补齐，作为加餐项添加进来","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632846842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":312624,"user_name":"cshzet","can_delete":false,"product_type":"c1","uid":2593667,"ip_address":"","ucode":"A343CCB6E5D519","user_header":"https://static001.geekbang.org/account/avatar/00/27/93/83/cb37c46e.jpg","comment_is_top":false,"comment_ctime":1631895147,"is_pvip":true,"replies":[{"id":"113691","content":"是的，感觉老哥反馈，已经找编辑修正了","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1632760126,"ip_address":"","comment_id":312624,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1631895147","product_id":100079601,"comment_content":"<br>第一个if里面应该是返回error而不是req吧<br><br>func QueryUser(doer Doer) error {<br>  req, err := http.NewRequest(&quot;Get&quot;, &quot;http:&#47;&#47;iam.api.marmotedu.com:8080&#47;v1&#47;secrets&quot;, nil)<br>  if err != nil {<br>    return req<br>  }<br><br>  _, err := doer.Do(req)<br>  if err != nil {<br>    return err<br>  }<br><br>  return nil<br>}","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527051,"discussion_content":"是的，感觉老哥反馈，已经找编辑修正了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632760126,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304068,"user_name":"Geek_a4cca6","can_delete":false,"product_type":"c1","uid":2136813,"ip_address":"","ucode":"68B3E4FDECFFF0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/5GQZCecntmOibVjWkMWVnibqXEZhAYnFiaRkgfAUGdrQBWzfXjqsYteLee6afDEjvBLBVa5uvtWYTTicwO2jKia0zOw/132","comment_is_top":false,"comment_ctime":1627219764,"is_pvip":false,"replies":[{"id":"110223","content":"老哥参考下这里：https:&#47;&#47;github.com&#47;xiaomeng79&#47;go-design-pattern&#47;tree&#47;master&#47;options","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1627598440,"ip_address":"","comment_id":304068,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1627219764","product_id":100079601,"comment_content":"老师，最后的选项模式该怎么测试呢，我这样写有问题：<br><br>func TestOptions(t *testing.T) {<br><br>\tvar of optionFunc<br>\tvar o = options{<br>\t\ttimeout: time.Second * 10,<br>\t\tcaching: false,<br>\t}<br>\t<br>\tof.apply(&amp;o)<br>\t<br>\tn, err := NewConnect(&quot;ZhuHai&quot;, of)<br>\tif err != nil {<br>\t\tpanic(err)<br>\t}<br>\tfmt.Println(n)<br>}","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523920,"discussion_content":"老哥参考下这里：https://github.com/xiaomeng79/go-design-pattern/tree/master/options","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627598440,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1234929,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d7/f1/ce10759d.jpg","nickname":"wei 丶","note":"","ucode":"331DE893F75B95","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388382,"discussion_content":"// 可以这样写\npackage options\n\nimport (\n\t&#34;fmt&#34;\n\t&#34;testing&#34;\n)\n\nfunc TestNewLog(t *testing.T) {\n\to := WithCaching(false)\n\to2 := WithTimeout(2)\n\tc, err := NewConnect(&#34;127.0.0.1&#34;, o, o2)\n\tif err != nil {\n\t\tfmt.Println(&#34;err&#34;, err)\n\t}\n\tfmt.Println(c)\n}\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628740027,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303456,"user_name":"greatliu","can_delete":false,"product_type":"c1","uid":1137386,"ip_address":"","ucode":"267832F4BD10CA","user_header":"https://static001.geekbang.org/account/avatar/00/11/5a/ea/70589340.jpg","comment_is_top":false,"comment_ctime":1626795271,"is_pvip":false,"replies":[{"id":"109985","content":"后面会放在加餐项中哈","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1627031361,"ip_address":"","comment_id":303456,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1626795271","product_id":100079601,"comment_content":"其他模式能否再多分享一些，讲的很通俗易懂，学到了","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523687,"discussion_content":"后面会放在加餐项中哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627031361,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298425,"user_name":"demon","can_delete":false,"product_type":"c1","uid":2646309,"ip_address":"","ucode":"ACD3F3C694E02E","user_header":"https://static001.geekbang.org/account/avatar/00/28/61/25/b646d049.jpg","comment_is_top":false,"comment_ctime":1624095724,"is_pvip":false,"replies":[{"id":"108312","content":"可以不加的，go会自动中转换。<br><br>不过这里建议加上，跟：<br><br>func (*add) do(a, b int) int { return a + b}保持一致，因为是*add提供了do方法，而不是add提供了do方法。","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624208872,"ip_address":"","comment_id":298425,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1624095724","product_id":100079601,"comment_content":"你好，请问 ：operator.setStrategy(&amp;add{}) 可以不加 &amp; 嘛？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522135,"discussion_content":"可以不加的，go会自动中转换。\n\n不过这里建议加上，跟：\n\nfunc (*add) do(a, b int) int { return a + b}保持一致，因为是*add提供了do方法，而不是add提供了do方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624208872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2359008,"avatar":"https://static001.geekbang.org/account/avatar/00/23/fe/e0/5b0db40e.jpg","nickname":"小然","note":"","ucode":"D0D85AAA1246BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382156,"discussion_content":"这里是必须加上吧，指针类型作为接受者的时候不是只有指针才实现了接口么？然后值类型作为接受者的时候才是值和指针都实现了接口，会自动转换。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1625453203,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1175507,"avatar":"https://static001.geekbang.org/account/avatar/00/11/ef/d3/d4358103.jpg","nickname":"H-NL2724","note":"","ucode":"25DB114677EF58","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578317,"discussion_content":"这里有两个问题：一个是“用T类型调用*T类型的方法（或者相反）”，这里存在go编译器自动转换的问题（将T类型转换为*T类型）；第二是，方法集合的问题（就是*T的方法集合包含T的方法集合），所以如果T的方法集合不是接口方法的超集也就是没有实现该接口，应该是不能赋值给接口的（实参赋值给形参，这个场景，应该不涉及“go编译器自动转换”这个语法糖吧？？）；","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656656989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298371,"user_name":"SMTCode","can_delete":false,"product_type":"c1","uid":1109038,"ip_address":"","ucode":"0D837A753E4FAB","user_header":"https://static001.geekbang.org/account/avatar/00/10/ec/2e/49d13bd2.jpg","comment_is_top":false,"comment_ctime":1624066806,"is_pvip":true,"replies":[{"id":"108316","content":"要加的，已经更新，感谢反馈！","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624209324,"ip_address":"","comment_id":298371,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1624066806","product_id":100079601,"comment_content":"单例加锁代码，是不是要在defer后再加一个判空语句？","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522116,"discussion_content":"要加的，已经更新，感谢反馈！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624209324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298366,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1624062665,"is_pvip":false,"replies":[{"id":"108298","content":"感谢老哥反馈，回头补上","user_name":"作者回复","user_name_real":"CK1.0","uid":"1167883","ctime":1624181642,"ip_address":"","comment_id":298366,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1624062665","product_id":100079601,"comment_content":"责任链模式用的也很多","like_count":0,"discussions":[{"author":{"id":1167883,"avatar":"https://static001.geekbang.org/account/avatar/00/11/d2/0b/cdd0787a.jpg","nickname":"孔令飞","note":"","ucode":"8363EA4BD0AAF0","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522114,"discussion_content":"感谢老哥反馈，回头补上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624181642,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":298365,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":false,"comment_ctime":1624062647,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624062647","product_id":100079601,"comment_content":"写的好！！！","like_count":0},{"had_liked":false,"id":298352,"user_name":"阿璐4r","can_delete":false,"product_type":"c1","uid":1504590,"ip_address":"","ucode":"AF711CD4B24236","user_header":"https://static001.geekbang.org/account/avatar/00/16/f5/4e/87f4faee.jpg","comment_is_top":false,"comment_ctime":1624033646,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1624033646","product_id":100079601,"comment_content":"学到了学到了","like_count":0}]}