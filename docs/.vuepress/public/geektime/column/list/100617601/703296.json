{"id":703296,"title":"08｜链（上）：写一篇完美鲜花推文？用SequencialChain链接不同的组件","content":"<p>你好，我是黄佳。欢迎来到LangChain实战课！</p><p>到这节课，我们已经学到了不少LangChain的应用，也体会到了LangChain功能的强大。但也许你心里开始出现了一个疑问：LangChain，其中的 <strong>Chain</strong> 肯定是关键组件，为什么我们还没有讲到呢？</p><p>这的确是个好问题。对于简单的应用程序来说，直接调用LLM就已经足够了。因此，在前几节课的示例中，我们主要通过LangChain中提供的提示模板、模型接口以及输出解析器就实现了想要的功能。</p><h2>什么是 Chain</h2><p>但是，如果你想开发更复杂的应用程序，那么就需要通过 “Chain” 来链接LangChain的各个组件和功能——模型之间彼此链接，或模型与其他组件链接。</p><p><img src=\"https://static001.geekbang.org/resource/image/e2/de/e26993dd3957bfd2947424abb9de7cde.png?wh=1965x1363\" alt=\"\"></p><p>这种将多个组件相互链接，组合成一个链的想法简单但很强大。它简化了复杂应用程序的实现，并使之更加模块化，能够创建出单一的、连贯的应用程序，从而使调试、维护和改进应用程序变得容易。</p><p><strong>说到链的实现和使用，也简单。</strong></p><ul>\n<li>首先LangChain通过设计好的接口，实现一个具体的链的功能。例如，LLM链（LLMChain）能够接受用户输入，使用 PromptTemplate 对其进行格式化，然后将格式化的响应传递给 LLM。这就相当于把整个Model I/O的流程封装到链里面。</li>\n<li>实现了链的具体功能之后，我们可以通过将多个链组合在一起，或者将链与其他组件组合来构建更复杂的链。</li>\n</ul><!-- [[[read_end]]] --><p>所以你看，链在内部把一系列的功能进行封装，而链的外部则又可以组合串联。<strong>链其实可以被视为LangChain中的一种基本功能单元。</strong></p><p>LangChain中提供了很多种类型的预置链，目的是使各种各样的任务实现起来更加方便、规范。</p><p><img src=\"https://static001.geekbang.org/resource/image/8b/c3/8b580b2b8e0fc8515d271165a46101c3.jpg?wh=1702x861\" alt=\"\"></p><p>我们先使用一下最基础也是最常见的LLMChain。</p><h2>LLMChain：最简单的链</h2><p>LLMChain围绕着语言模型推理功能又添加了一些功能，整合了PromptTemplate、语言模型（LLM或聊天模型）和 Output Parser，相当于把Model I/O放在一个链中整体操作。它使用提示模板格式化输入，将格式化的字符串传递给 LLM，并返回 LLM 输出。</p><p>举例来说，如果我想让大模型告诉我某种花的花语，如果不使用链，代码如下：</p><pre><code class=\"language-plain\">#----第一步 创建提示\n# 导入LangChain中的提示模板\nfrom langchain import PromptTemplate\n# 原始字符串模板\ntemplate = \"{flower}的花语是?\"\n# 创建LangChain模板\nprompt_temp = PromptTemplate.from_template(template) \n# 根据模板创建提示\nprompt = prompt_temp.format(flower='玫瑰')\n# 打印提示的内容\nprint(prompt)\n\n#----第二步 创建并调用模型 \n# 导入LangChain中的OpenAI模型接口\nfrom langchain import OpenAI\n# 创建模型实例\nmodel = OpenAI(temperature=0)\n# 传入提示，调用模型，返回结果\nresult = model(prompt)\nprint(result)\n</code></pre><p>输出：</p><pre><code class=\"language-plain\">玫瑰的花语是?\n爱情、浪漫、美丽、永恒、誓言、坚贞不渝。\n</code></pre><p>此时Model I/O的实现分为两个部分，提示模板的构建和模型的调用独立处理。</p><p>如果使用链，代码结构则显得更简洁。</p><pre><code class=\"language-plain\"># 导入所需的库\nfrom langchain import PromptTemplate, OpenAI, LLMChain\n# 原始字符串模板\ntemplate = \"{flower}的花语是?\"\n# 创建模型实例\nllm = OpenAI(temperature=0)\n# 创建LLMChain\nllm_chain = LLMChain(\n&nbsp; &nbsp; llm=llm,\n&nbsp; &nbsp; prompt=PromptTemplate.from_template(template))\n# 调用LLMChain，返回结果\nresult = llm_chain(\"玫瑰\")\nprint(result)\n</code></pre><p>输出：</p><pre><code class=\"language-plain\">{'flower': '玫瑰', 'text': '\\n\\n爱情、浪漫、美丽、永恒、誓言、坚贞不渝。'}\n</code></pre><p>在这里，我们就把提示模板的构建和模型的调用封装在一起了。</p><h2>链的调用方式</h2><p>链有很多种调用方式。</p><h3>直接调用</h3><p>刚才我们是直接调用的链对象。当我们像函数一样调用一个对象时，它实际上会调用该对象内部实现的__call__方法。</p><p>如果你的提示模板中包含多个变量，在调用链的时候，可以使用字典一次性输入它们。</p><pre><code class=\"language-plain\">prompt = PromptTemplate(\n&nbsp; &nbsp; input_variables=[\"flower\", \"season\"],\n&nbsp; &nbsp; template=\"{flower}在{season}的花语是?\",\n)\nllm_chain = LLMChain(llm=llm, prompt=prompt)\nprint(llm_chain({\n&nbsp; &nbsp; 'flower': \"玫瑰\",\n&nbsp; &nbsp; 'season': \"夏季\" }))\n</code></pre><p>输出：</p><pre><code class=\"language-plain\">{'flower': '玫瑰', 'season': '夏季', 'text': '\\n\\n玫瑰在夏季的花语是爱的誓言，热情，美丽，坚定的爱情。'}\n</code></pre><h3>通过run方法</h3><p>通过run方法，也等价于直接调用_call_函数。</p><p>语句：</p><pre><code class=\"language-plain\">llm_chain(\"玫瑰\")\n</code></pre><p>等价于：</p><pre><code class=\"language-plain\">llm_chain.run(\"玫瑰\")\n</code></pre><h3>通过predict方法</h3><p>predict方法类似于run，只是输入键被指定为关键字参数而不是 Python 字典。</p><pre><code class=\"language-plain\">result = llm_chain.predict(flower=\"玫瑰\")\nprint(result)\n</code></pre><h3>通过apply方法</h3><p>apply方法允许我们针对输入列表运行链，一次处理多个输入。</p><p>示例如下：</p><pre><code class=\"language-plain\"># apply允许您针对输入列表运行链\ninput_list = [\n&nbsp; &nbsp; {\"flower\": \"玫瑰\",'season': \"夏季\"},\n&nbsp; &nbsp; {\"flower\": \"百合\",'season': \"春季\"},\n&nbsp; &nbsp; {\"flower\": \"郁金香\",'season': \"秋季\"}\n]\nresult = llm_chain.apply(input_list)\nprint(result)\n</code></pre><p>输出：</p><pre><code class=\"language-plain\">'''[{'text': '\\n\\n玫瑰在夏季的花语是“恋爱”、“热情”和“浪漫”。'}, \n{'text': '\\n\\n百合在春季的花语是“爱情”和“友谊”。'},\n&nbsp;{'text': '\\n\\n郁金香在秋季的花语表达的是“热情”、“思念”、“爱恋”、“回忆”和“持久的爱”。'}]'''\n</code></pre><h3>通过generate方法</h3><p>generate方法类似于apply，只不过它返回一个LLMResult对象，而不是字符串。LLMResult通常包含模型生成文本过程中的一些相关信息，例如令牌数量、模型名称等。</p><pre><code class=\"language-plain\">result = llm_chain.generate(input_list)\nprint(result)\n</code></pre><p>输出：</p><pre><code class=\"language-plain\">generations=[[Generation(text='\\n\\n玫瑰在夏季的花语是“热情”、“爱情”和“幸福”。', \ngeneration_info={'finish_reason': 'stop', 'logprobs': None})], \n[Generation(text='\\n\\n春季的花语是爱情、幸福、美满、坚贞不渝。', \ngeneration_info={'finish_reason': 'stop', 'logprobs': None})], \n[Generation(text='\\n\\n秋季的花语是“思念”。银色的百合象征着“真爱”，而淡紫色的郁金香则象征着“思念”，因为它们在秋天里绽放的时候，犹如在思念着夏天的温暖。', \ngeneration_info={'finish_reason': 'stop', 'logprobs': None})]] \nllm_output={'token_usage': {'completion_tokens': 243, 'total_tokens': 301, 'prompt_tokens': 58}, 'model_name': 'gpt-3.5-turbo-instruct'} \nrun=[RunInfo(run_id=UUID('13058cca-881d-4b76-b0cf-0f9c831af6c4')), \nRunInfo(run_id=UUID('7f38e33e-bab5-4d03-b77c-f50cd195affb')), \nRunInfo(run_id=UUID('7a1e45fd-77ee-4133-aab0-431147186db8'))]\n</code></pre><h2>Sequential Chain：顺序链</h2><p>好，到这里，你已经掌握了最基本的LLMChain的用法。下面，我要带着你用Sequential Chain 把几个LLMChain串起来，形成一个顺序链。</p><p><img src=\"https://static001.geekbang.org/resource/image/48/36/48f3f524ecf2d2yyeb11fd54yyf99f36.png?wh=665x360\" alt=\"\"></p><p>这个示例中，我们的目标是这样的：</p><ul>\n<li>第一步，我们假设大模型是一个植物学家，让他给出某种特定鲜花的知识和介绍。</li>\n<li>第二步，我们假设大模型是一个鲜花评论者，让他参考上面植物学家的文字输出，对鲜花进行评论。</li>\n<li>第三步，我们假设大模型是易速鲜花的社交媒体运营经理，让他参考上面植物学家和鲜花评论者的文字输出，来写一篇鲜花运营文案。</li>\n</ul><p>下面我们就来一步步地实现这个示例。</p><p>首先，导入所有需要的库。</p><pre><code class=\"language-plain\"># 设置OpenAI API密钥\nimport os\nos.environ[\"OPENAI_API_KEY\"] = '你的OpenAI API Key'\n\nfrom langchain.llms import OpenAI\nfrom langchain.chains import LLMChain\nfrom langchain.prompts import PromptTemplate\nfrom langchain.chains import SequentialChain\n</code></pre><p>然后，添加第一个LLMChain，生成鲜花的知识性说明。</p><pre><code class=\"language-plain\"># 这是第一个LLMChain，用于生成鲜花的介绍，输入为花的名称和种类\nllm = OpenAI(temperature=.7)\ntemplate = \"\"\"\n你是一个植物学家。给定花的名称和类型，你需要为这种花写一个200字左右的介绍。\n\n花名: {name}\n颜色: {color}\n植物学家: 这是关于上述花的介绍:\"\"\"\nprompt_template = PromptTemplate(input_variables=[\"name\", \"color\"], template=template)\nintroduction_chain = LLMChain(llm=llm, prompt=prompt_template, output_key=\"introduction\")\n</code></pre><p>接着，添加第二个LLMChain，根据鲜花的知识性说明生成评论。</p><pre><code class=\"language-plain\"># 这是第二个LLMChain，用于根据鲜花的介绍写出鲜花的评论\nllm = OpenAI(temperature=.7)\ntemplate = \"\"\"\n你是一位鲜花评论家。给定一种花的介绍，你需要为这种花写一篇200字左右的评论。\n\n鲜花介绍:\n{introduction}\n花评人对上述花的评论:\"\"\"\nprompt_template = PromptTemplate(input_variables=[\"introduction\"], template=template)\nreview_chain = LLMChain(llm=llm, prompt=prompt_template, output_key=\"review\")\n</code></pre><p>接着，添加第三个LLMChain，根据鲜花的介绍和评论写出一篇自媒体的文案。</p><pre><code class=\"language-plain\"># 这是第三个LLMChain，用于根据鲜花的介绍和评论写出一篇自媒体的文案\ntemplate = \"\"\"\n你是一家花店的社交媒体经理。给定一种花的介绍和评论，你需要为这种花写一篇社交媒体的帖子，300字左右。\n\n鲜花介绍:\n{introduction}\n花评人对上述花的评论:\n{review}\n\n社交媒体帖子:\n\"\"\"\nprompt_template = PromptTemplate(input_variables=[\"introduction\", \"review\"], template=template)\nsocial_post_chain = LLMChain(llm=llm, prompt=prompt_template, output_key=\"social_post_text\")\n</code></pre><p>最后，添加SequentialChain，把前面三个链串起来。</p><pre><code class=\"language-plain\"># 这是总的链，我们按顺序运行这三个链\noverall_chain = SequentialChain(\n    chains=[introduction_chain, review_chain, social_post_chain],\n    input_variables=[\"name\", \"color\"],\n    output_variables=[\"introduction\",\"review\",\"social_post_text\"],\n    verbose=True)\n\n# 运行链，并打印结果\nresult = overall_chain({\"name\":\"玫瑰\", \"color\": \"黑色\"})\nprint(result)\n</code></pre><p>最终的输出如下：</p><pre><code class=\"language-plain\">&gt; Entering new&nbsp; chain...\n\n&gt; Finished chain.\n{'name': '玫瑰', 'color': '黑色', \n'introduction': '\\n\\n黑色玫瑰，这是一种对传统玫瑰花的独特颠覆，它的出现挑战了我们对玫瑰颜色的固有认知。它的花瓣如煤炭般黑亮，反射出独特的微光，而花蕊则是金黄色的，宛如夜空中的一颗星，强烈的颜色对比营造出一种前所未有的视觉效果。在植物学中，黑色玫瑰的出现无疑提供了一种新的研究方向，对于我们理解花朵色彩形成的机制有着重要的科学价值。', \n'review': '\\n\\n黑色玫瑰，这不仅仅是一种花朵，更是一种完全颠覆传统的艺术表现形式。黑色的花瓣仿佛在诉说一种不可言喻的悲伤与神秘，而黄色的蕊瓣犹如漆黑夜空中的一抹亮色，给人带来无尽的想象。它将悲伤与欢乐，神秘与明亮完美地结合在一起，这是一种全新的视觉享受，也是一种对生活理解的深度表达。', \n'social_post_text': '\\n欢迎来到我们的自媒体平台，今天，我们要向您展示的是我们的全新产品——黑色玫瑰。这不仅仅是一种花，这是一种对传统观念的挑战，一种视觉艺术的革新，更是一种生活态度的象征。\n这种别样的玫瑰花，其黑色花瓣宛如漆黑夜空中闪烁的繁星，富有神秘的深度感，给人一种前所未有的视觉冲击力。这种黑色，它不是冷酷、不是绝望，而是充满着独特的魅力和力量。而位于黑色花瓣之中的金黄色花蕊，则犹如星星中的灵魂，默默闪烁，给人带来无尽的遐想，充满活力与生机。\n黑色玫瑰的存在，不仅挑战了我们对于玫瑰传统颜色的认知，它更是一种生动的生命象征，象征着那些坚韧、独特、勇敢面对生活的人们。黑色的花瓣中透露出一种坚韧的力量，而金黄的花蕊则是生活中的希望，二者的结合恰好象征了生活中的喜怒哀乐，体现了人生的百态。'}\n</code></pre><p>至此，我们就通过两个LLM链和一个顺序链，生成了一篇完美的文案。</p><h2>总结时刻</h2><p>LangChain为我们提供了好用的“链”，帮助我们把多个组件像链条一样连接起来。这个“链条”其实就是一系列组件的调用顺序，这个顺序里还可以包括其他的“链条”。</p><p>我们可以使用多种方法调用链，也可以根据开发时的需求选择各种不同的链。</p><p><img src=\"https://static001.geekbang.org/resource/image/5f/38/5fe2366c3e8294a61cb44d33b9d79638.png?wh=1741x1327\" alt=\"\"></p><p>除去最常见的LLMChain和SequenceChain之外，LangChain中还自带大量其他类型的链，封装了各种各样的功能。你可以看一看这些链的实现细节，并尝试着使用它们。</p><p>下一节课，我们会继续介绍另外一种好用的链，RouterChain。</p><h2>思考题</h2><ol>\n<li>在<a href=\"https://time.geekbang.org/column/article/699451\">第3课</a>中，我们曾经用提示模板生成过一段鲜花的描述，代码如下：</li>\n</ol><pre><code class=\"language-plain\">for flower, price in zip(flowers, prices):\n&nbsp; &nbsp; # 根据提示准备模型的输入\n&nbsp; &nbsp; input = prompt.format(flower_name=flower, price=price)\n&nbsp; &nbsp; # 获取模型的输出\n&nbsp; &nbsp; output = model(input)&nbsp; &nbsp; \n&nbsp; &nbsp; # 解析模型的输出\n&nbsp; &nbsp; parsed_output = output_parser.parse(output)\n</code></pre><p>请你使用LLMChain重构提示的format和获取模型输出部分，完成相同的功能。</p><p><span class=\"orange\">提示：</span></p><pre><code class=\"language-plain\">&nbsp; &nbsp; llm_chain = LLMChain(\n&nbsp; &nbsp; &nbsp; &nbsp; llm=model,\n&nbsp; &nbsp; &nbsp; &nbsp; prompt=prompt)\n</code></pre><ol start=\"2\">\n<li>上一道题目中，我要求你把提示的format和获取模型输出部分整合到LLMChain中，其实你还可以更进一步，把output_parser也整合到LLMChain中，让程序结构进一步简化，请你尝试一下。</li>\n</ol><p><span class=\"orange\">提示：</span></p><pre><code class=\"language-plain\">&nbsp; &nbsp; llm_chain = LLMChain(\n&nbsp; &nbsp; &nbsp; &nbsp; llm=model,\n&nbsp; &nbsp; &nbsp; &nbsp; prompt=prompt,\n&nbsp; &nbsp; &nbsp; &nbsp; output_parser=output_parser)\n</code></pre><ol start=\"3\">\n<li>选择一个LangChain中的链（我们没用到的类型），尝试使用它解决一个问题，并分享你的用例和代码。</li>\n</ol><p>题目较多，可以选择性思考，期待在留言区看到你的分享。如果你觉得内容对你有帮助，也欢迎分享给有需要的朋友！最后如果你学有余力，可以进一步学习下面的延伸阅读。</p><h2>延伸阅读</h2><ol>\n<li>GitHub上各种各样的<a href=\"https://github.com/langchain-ai/langchain/tree/master/libs/langchain/langchain/chains\">链</a></li>\n<li>代码，<a href=\"https://github.com/langchain-ai/langchain/blob/master/libs/langchain/langchain/chains/llm.py\">LLMChain</a> 的实现细节</li>\n</ol>","comments":[{"had_liked":false,"id":381504,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1402511,"ip_address":"广东","ucode":"6E31908EFE1107","user_header":"https://static001.geekbang.org/account/avatar/00/15/66/8f/02be926d.jpg","comment_is_top":false,"comment_ctime":1695299465,"is_pvip":false,"replies":[{"id":138982,"content":"非常棒的思考!!! 也总结的很精辟！\nMemory - 让对话拥有了状态\nSequentialChain - 可以组合一系列的链\nCallback - 提供了回调机制，可以生成Log","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1695400067,"ip_address":"新加坡","comment_id":381504,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"Chain有三个能力，有状态，可观测，可组合。\n有状态：Chain类定义了memory: Optional[BaseMemory]成员变量，记录了chain执行过程的状态。调用chain._call(inputs)可得到输出对象outputs，之后会调用chain.prep_outputs(inputs, outputs)加输入和输出对象成对放入memory对象。\n可观测：Chain类定义了callbacks: Callbacks成员变量，在chain执行过程中回调on_xxx()方法。\n可组合：比如SequentialChain类定义了chains: List[Chain]成员变量，会遍历chains列表调用，将初始输入inputs和已调用的chain的outputs合并到一个字典，作为当前chain的inputs，具体可阅读SequentialChain._call()。","like_count":9,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628517,"discussion_content":"非常棒的思考!!! 也总结的很精辟！\nMemory - 让对话拥有了状态\nSequentialChain - 可以组合一系列的链\nCallback - 提供了回调机制，可以生成Log","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695400067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381953,"user_name":"Nikola","can_delete":false,"product_type":"c1","uid":1536844,"ip_address":"上海","ucode":"DB18756EBE7032","user_header":"https://static001.geekbang.org/account/avatar/00/17/73/4c/f743ac7c.jpg","comment_is_top":false,"comment_ctime":1696315610,"is_pvip":false,"replies":[{"id":139185,"content":"当然可以通过思维链实现。不管黑猫白猫，能够激发LLM的思考，让LLM完成你的需求就是好猫。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1696691364,"ip_address":"瑞士","comment_id":381953,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"上面的例子是不是也可以用思维链来实现？这样可以只调用一次模型。\n思维链和langChain的chain组件的使用场景上有区别？","like_count":2,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629127,"discussion_content":"当然可以通过思维链实现。不管黑猫白猫，能够激发LLM的思考，让LLM完成你的需求就是好猫。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1696691364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381502,"user_name":"在路上","can_delete":false,"product_type":"c1","uid":1402511,"ip_address":"广东","ucode":"6E31908EFE1107","user_header":"https://static001.geekbang.org/account/avatar/00/15/66/8f/02be926d.jpg","comment_is_top":false,"comment_ctime":1695298479,"is_pvip":false,"replies":[{"id":138983,"content":"🈵","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1695400133,"ip_address":"新加坡","comment_id":381502,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"# -*- coding: utf-8 -*-\nimport os\n\n# 设置网络代理\nos.environ[&quot;http_proxy&quot;] = &quot;http:&#47;&#47;127.0.0.1:7890&quot;\nos.environ[&quot;https_proxy&quot;] = &quot;http:&#47;&#47;127.0.0.1:7890&quot;\n\n# 通过.env管理api_token\nfrom dotenv import load_dotenv\nload_dotenv()\n\nfrom langchain.llms import OpenAI\nfrom langchain.chains import LLMChain\nfrom langchain.prompts import PromptTemplate\n\nllm = OpenAI(temperature=.7, verbose=True)\n\n# 导入结构化输出解析器和ResponseSchema\nfrom langchain.output_parsers import StructuredOutputParser, ResponseSchema\n# 定义我们想要接收的响应模式\nresponse_schemas = [\n    ResponseSchema(name=&quot;description&quot;, description=&quot;鲜花的描述文案&quot;),\n    ResponseSchema(name=&quot;reason&quot;, description=&quot;问什么要这样写这个文案&quot;)\n]\n# 创建输出解析器\noutput_parser = StructuredOutputParser.from_response_schemas(response_schemas)\nprint(output_parser.get_format_instructions())\n\n# 创建原始提示模板\nprompt_template = &quot;&quot;&quot;\n您是一位专业的鲜花店文案撰写员。\n对于售价为 {price} 元的 {flower} ，您能提供一个吸引人的简短描述吗？\n输出格式：\n{format_instructions}\n&quot;&quot;&quot;\nprompt = PromptTemplate(\n    template=prompt_template,\n    input_variables=[&quot;flower&quot;, &quot;price&quot;],\n    partial_variables={&quot;format_instructions&quot;: output_parser.get_format_instructions()},\n    output_parser=output_parser)\n\nchain = LLMChain(llm=llm, prompt=prompt)\n\n# 数据准备\nflowers = [&quot;玫瑰&quot;, &quot;百合&quot;, &quot;康乃馨&quot;]\nprices = [&quot;50&quot;, &quot;30&quot;, &quot;20&quot;]\n\nfor flower, price in zip(flowers, prices):\n    result = chain.run({\n        &quot;flower&quot;: flower,\n        &quot;price&quot;: price\n    })\n    print(result)\n","like_count":2,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628518,"discussion_content":"🈵","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695400133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1472739,"avatar":"https://static001.geekbang.org/account/avatar/00/16/78/e3/f5305ed0.jpg","nickname":"超超","note":"","ucode":"9F8F7E78788A12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":640133,"discussion_content":"input_list = [{&#34;flower_name&#34;:flower, &#34;price&#34;:price} for flower, price in zip(flowers, prices)]\nresult = llm_chain.apply(input_list)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1711196002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383726,"user_name":"悟尘","can_delete":false,"product_type":"c1","uid":2189310,"ip_address":"北京","ucode":"4E7E854340D3A4","user_header":"https://static001.geekbang.org/account/avatar/00/21/67/fe/5d17661a.jpg","comment_is_top":false,"comment_ctime":1699520304,"is_pvip":false,"replies":[{"id":140194,"content":"因为LangChain觉得以后它不想从根目录直接支持内部模块的导入了！","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1700583149,"ip_address":"瑞士","comment_id":383726,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"from langchain import PromptTemplate, OpenAI, LLMChain \n这行代码，为什么会有warning呢？\n换成下面的import后，就没有告警了\nfrom langchain.prompts import PromptTemplate\nfrom langchain.llms import OpenAI\nfrom langchain.chains import LLMChain\n","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":632243,"discussion_content":"因为LangChain觉得以后它不想从根目录直接支持内部模块的导入了！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1700583149,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1233947,"avatar":"https://static001.geekbang.org/account/avatar/00/12/d4/1b/6444e933.jpg","nickname":"Liberalism","note":"","ucode":"BD0A293B928668","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":631612,"discussion_content":"因为 Langchian 版本更新，后续不再支持上面的调用方式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1699844288,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":382512,"user_name":"一面湖水","can_delete":false,"product_type":"c1","uid":1193473,"ip_address":"四川","ucode":"6339F033312FB2","user_header":"https://static001.geekbang.org/account/avatar/00/12/36/01/eb3ba274.jpg","comment_is_top":false,"comment_ctime":1697507344,"is_pvip":false,"replies":[{"id":139340,"content":"具体是哪个程序啊？有没有具体代码？有几个可能的原因:\n1. 生成的文本超过了字符限制,被强制截断。可以尝试增加字符限制。max_tokens --- 这个是OpenAI API最大Token数限制的参数。\n2. 或者是输出解析器配置错误,截断了内容。可以检查输出解析器的实现。\n3. 可以在提示语里面要求模型说话简短一点点。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1697617460,"ip_address":"瑞士","comment_id":382512,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"为什么生成的文案不完整呢？看起来是被截断了。","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":629771,"discussion_content":"具体是哪个程序啊？有没有具体代码？有几个可能的原因:\n1. 生成的文本超过了字符限制,被强制截断。可以尝试增加字符限制。max_tokens --- 这个是OpenAI API最大Token数限制的参数。\n2. 或者是输出解析器配置错误,截断了内容。可以检查输出解析器的实现。\n3. 可以在提示语里面要求模型说话简短一点点。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1697617461,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"瑞士","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381488,"user_name":"赤色闪电","can_delete":false,"product_type":"c1","uid":1144765,"ip_address":"北京","ucode":"B5FAA29E62132C","user_header":"https://static001.geekbang.org/account/avatar/00/11/77/bd/e7ff842c.jpg","comment_is_top":false,"comment_ctime":1695278071,"is_pvip":true,"replies":[{"id":138972,"content":"好的，同学。谢谢你提出的问题，目前代码中，经过了三轮LLM的构建，social_post_chain也已经构建出来了。最后的顺序链把它们串在一起输出。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1695284779,"ip_address":"新加坡","comment_id":381488,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师，您好！在文中构造顺序链的过程中，chains=[introduction_chain, review_chain, social_post_chain]中的social_post_chain是从哪里定义的？","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628430,"discussion_content":"好的，同学。谢谢你提出的问题，目前代码中，经过了三轮LLM的构建，social_post_chain也已经构建出来了。最后的顺序链把它们串在一起输出。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695284779,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1144765,"avatar":"https://static001.geekbang.org/account/avatar/00/11/77/bd/e7ff842c.jpg","nickname":"赤色闪电","note":"","ucode":"B5FAA29E62132C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":628432,"discussion_content":"在文章中现在已经可以看到了，感谢老师的回复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695286502,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":628430,"ip_address":"北京","group_id":0},"score":628432,"extra":""}]}]},{"had_liked":false,"id":381469,"user_name":".。。。","can_delete":false,"product_type":"c1","uid":1800836,"ip_address":"陕西","ucode":"C51083CF9A4CD1","user_header":"https://static001.geekbang.org/account/avatar/00/1b/7a/84/fe247aff.jpg","comment_is_top":false,"comment_ctime":1695258026,"is_pvip":false,"replies":[{"id":138949,"content":"当你得到了模型的返回结果之后，模型就自动停止了，这好像SaaS一样。模型给你提供的是云端服务。本地模型也是一样。随着你的调用结束，模型就不再一直倾听你了，因此，模型自己没有Memory！它不是一个一直侦听响应的进程，没有状态。这就是为什么，我们在应用程序设计的时候，要增加Memory这个内容，你可以把Memory视为记忆或者内存。\n对于模型调用来说，它在乎的是你一次Pass给他多少个Token，以及你一分钟调用它多少次。太多Token不行，过多次也不行。","user_name":"作者回复","user_name_real":"编辑","uid":1809833,"ctime":1695268513,"ip_address":"新加坡","comment_id":381469,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"老师，您好！学习了langchain后，实现了咱们课程中讲的case,但是有个疑问请假下，通过langchain框架调用的模型，如何对正在运行的模型进行停止呢？","like_count":0,"discussions":[{"author":{"id":1809833,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/9d/a9/4602808f.jpg","nickname":"黄佳","note":"","ucode":"8EC41D2EAB0E3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":628383,"discussion_content":"当你得到了模型的返回结果之后，模型就自动停止了，这好像SaaS一样。模型给你提供的是云端服务。本地模型也是一样。随着你的调用结束，模型就不再一直倾听你了，因此，模型自己没有Memory！它不是一个一直侦听响应的进程，没有状态。这就是为什么，我们在应用程序设计的时候，要增加Memory这个内容，你可以把Memory视为记忆或者内存。\n对于模型调用来说，它在乎的是你一次Pass给他多少个Token，以及你一分钟调用它多少次。太多Token不行，过多次也不行。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1695268513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"新加坡","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":381478,"user_name":"冬青","can_delete":false,"product_type":"c1","uid":1356014,"ip_address":"北京","ucode":"14576781B499FB","user_header":"https://static001.geekbang.org/account/avatar/00/14/b0/ee/7409a0d3.jpg","comment_is_top":false,"comment_ctime":1695262547,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"今日加更，快冲快冲！！！","like_count":2},{"had_liked":false,"id":392898,"user_name":"yanyu-xin","can_delete":false,"product_type":"c1","uid":1899757,"ip_address":"广东","ucode":"3AA389F9E4C236","user_header":"","comment_is_top":false,"comment_ctime":1722091189,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"# 导入LangChain\nfrom langchain import LLMChain \n# 导入LangChain中的提示模板\nfrom langchain import PromptTemplate\n# 创建原始模板\ntemplate = &quot;&quot;&quot;您是一位专业的鲜花店文案撰写员。\\n\n对于售价为 {price} 元的 {flower} ，您能提供一个吸引人的简短描述吗？\\n\n            \n请以JSON格式返回，包含以下字段：\\n\n- flower_type: 鲜花的种类\n- price: 鲜花的价格\n- description: 鲜花的描述文案\n- reason: 为什么要这样写这个文案\n&quot;&quot;&quot;\n# 根据原始模板创建LangChain提示模板\nprompt = PromptTemplate.from_template(template)\n\n# 定义我们想要接收的数据格式\nfrom pydantic import BaseModel, Field\nclass FlowerDescription(BaseModel):    \n    flower_type: str = Field(description=&quot;鲜花的种类&quot;)    \n    price: int = Field(description=&quot;鲜花的价格&quot;)    \n    description: str = Field(description=&quot;鲜花的描述文案&quot;)    \n    reason: str = Field(description=&quot;为什么要这样写这个文案&quot;)\n\n\n# 创建输出解析器\nfrom langchain.output_parsers import PydanticOutputParser\noutput_parser = PydanticOutputParser(pydantic_object=FlowerDescription)\n\n\n# 用阿里云的大语言模型\nfrom langchain_community.llms import Tongyi\n# 直接在代码中设置API密钥\nDASHSCOPE_API_KEY = &quot;XXX&quot; # 请替换为您的阿里云通义千问模型API密钥\nllm = Tongyi(dashscope_api_key=DASHSCOPE_API_KEY)\n\n# apply允许您针对输入列表运行链\ninput_list = [\n    {&quot;flower&quot;: &quot;玫瑰&quot;,&#39;price&#39;: &quot;50&quot;},\n    {&quot;flower&quot;: &quot;百合&quot;,&#39;price&#39;: &quot;30&quot;},\n    {&quot;flower&quot;: &quot;郁金香&quot;,&#39;price&#39;: &quot;20&quot;}\n]\nllm_chain = LLMChain( # 创建链\n    llm=llm, \n    prompt=prompt,\n    output_parser=output_parser) \nresult = llm_chain.apply(input_list)      # 运行链\nprint(result)","like_count":1},{"had_liked":false,"id":392400,"user_name":"eagle","can_delete":false,"product_type":"c1","uid":1129632,"ip_address":"江苏","ucode":"D7601A2AFC1D17","user_header":"https://static001.geekbang.org/account/avatar/00/11/3c/a0/8b9d5aca.jpg","comment_is_top":false,"comment_ctime":1720800233,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":2,"product_id":100617601,"comment_content":"LangChainDeprecationWarning: The class `LLMChain` was deprecated in LangChain 0.1.17 and will be removed in 0.3.0. Use RunnableSequence, e.g., `prompt | llm` instead.","like_count":1,"discussions":[{"author":{"id":3692736,"avatar":"https://static001.geekbang.org/account/avatar/00/38/58/c0/d1d488b0.jpg","nickname":"chenyang","note":"","ucode":"3E56A8A605C619","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":648039,"discussion_content":"from langchain_openai import ChatOpenAI\nfrom langchain_core.prompts import PromptTemplate\n# 原始字符串模板\ntemplate = &#34;{flower}的花语是?&#34;\n# 创建模型实例\nllm = ChatOpenAI(temperature=0)\n# 创建LLMChain\nprompt=PromptTemplate.from_template(template)\n\nllm_chain = prompt | llm\n# 调用LLMChain，返回结果\nresult = llm_chain.invoke(&#34;玫瑰&#34;)\nprint(result)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1720967833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394371,"user_name":"刘双荣","can_delete":false,"product_type":"c1","uid":3870283,"ip_address":"北京","ucode":"FB42C207F24A18","user_header":"https://static001.geekbang.org/account/avatar/00/3b/0e/4b/ff4a21de.jpg","comment_is_top":false,"comment_ctime":1726650606,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"多个提示链完成完整的业务生成","like_count":0},{"had_liked":false,"id":392416,"user_name":"张申傲","can_delete":false,"product_type":"c1","uid":1182372,"ip_address":"北京","ucode":"22D46BC529BA8A","user_header":"https://static001.geekbang.org/account/avatar/00/12/0a/a4/828a431f.jpg","comment_is_top":false,"comment_ctime":1720859711,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":2,"score":3,"product_id":100617601,"comment_content":"第8讲打卡~","like_count":0},{"had_liked":false,"id":388282,"user_name":"黎楚萱","can_delete":false,"product_type":"c1","uid":3730534,"ip_address":"泰国","ucode":"58455B73AD7297","user_header":"","comment_is_top":false,"comment_ctime":1709796789,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100617601,"comment_content":"为什么我的result会把所有的prompt都拼接在一起？有谁遇到同样的情况吗\n我的输出是这样的：\nintroduction：\\n你是一个植物学家，给定花的名称和类型，你需要为这种花写一个100字左右的介绍。\\n花名：玫瑰\\n颜色：red\\n植物学家：这是关于上述花的介绍：\\n玫瑰是一种美丽的花卉，通常被种植在花园或庭院中。它们通常有红色的花朵，通常有五到六片花瓣。玫瑰花的花瓣通常有五到六片，它们通常有红色的花粉，这使得它们成为一种非常受欢迎的花卉。玫瑰花通常需要充足的阳光和水分，以保持其健康和美丽。\nreview:\\n你是一个鲜花评论家，给定一种花的介绍，你需要为这种花写一个200字左右的评论。\\n鲜花介绍：\\n\\n你是一个植物学家，给定花的名称和类型，你需要为这种花写一个100字左右的介绍。\\n花名：玫瑰\\n颜色：red\\n植物学家：这是关于上述花的介绍：\\n玫瑰是一种美丽的花卉，通常被种植在花园或庭院中。它们通常有红色的花朵，通常有五到六片花瓣。玫瑰花的花瓣通常有五到六片，它们通常有红色的花粉，这使得它们成为一种非常受欢迎的花卉。玫瑰花通常需要充足的阳光和水分，以保持其健康和美丽。\\n花评人对上述花的评论：\\n玫瑰是一种非常美丽的花卉，它们通常有红色的花朵，通常有五到六片花瓣。玫瑰花的花瓣通常有五到六片，它们通常有红色的花粉，这使得它们成为一种非常受欢迎的花卉。玫瑰花通常需要充足的阳光和水分，以保持其健康和美丽。\n...\n","like_count":0}]}