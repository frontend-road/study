{"id":493780,"title":"11 | 反应式编程框架设计：如何使方法调用无阻塞等待？","content":"<p>你好，我是李智慧。</p><p>反应式编程本质上是一种异步编程方案，在多线程（协程）、异步方法调用、异步I/O访问等技术基础之上，提供了一整套与异步调用相匹配的编程模型，从而实现程序调用非阻塞、即时响应等特性，即开发出一个反应式的系统，以应对编程领域越来越高的并发处理需求。</p><p>反应式系统应该具备如下的4个特质。</p><ul>\n<li><strong>即时响应</strong>：应用的调用者可以即时得到响应，无需等到整个应用程序执行完毕。也就是说应用调用是非阻塞的。</li>\n<li><strong>回弹性</strong>：当应用程序部分功能失效的时候，应用系统本身能够进行自我修复，保证正常运行，保证响应，不会出现系统崩溃和宕机的情况。</li>\n<li><strong>弹性</strong>：系统能够对应用负载压力做出响应，能够自动伸缩以适应应用负载压力，根据压力自动调整自身的处理能力，或者根据自身的处理能力，调整进入系统中的访问请求数量。</li>\n<li><strong>消息驱动</strong>：功能模块之间、服务之间通过消息进行驱动，以完成服务的流程。</li>\n</ul><p>目前主流的反应式编程框架有RxJava、Reactor等，它们的主要特点是基于<strong>观察者设计模式</strong>的异步编程方案，编程模型采用函数式编程。</p><p>观察者模式和函数式编程有自己的优势，但是反应式编程并不是必须用观察者模式和函数式编程。我们准备开发一个纯消息驱动，完全异步，支持命令式编程的反应式编程框架，框架名称为“Flower”。</p><!-- [[[read_end]]] --><h2>需求分析</h2><p>互联网及物联网场景下的应用系统开发，基本上都是高并发系统开发。也就是说，在同一个时刻，会有大量的用户或设备请求到达系统，进行计算处理。但是传统的编程模型都是阻塞式编程，阻塞式编程有什么特点，会产生什么问题呢？我们来看一段代码示例。</p><pre><code class=\"language-plain\">void a(){\n  ....\n  int x = m();\n  int y = n();\n  return x + y;\n}\n</code></pre><p>在方法a中调用了方法m，那么在方法m返回之前，就不会调用方法n，即方法a被方法m阻塞了。这种编程模型下，方法m和方法n不能同时执行，系统的运行速度就不会快，并发处理能力就不会很高。</p><p>还有更严重的情况。服务器通常为每个用户请求创建一个线程，而创建的总线程数是有限的，每台服务器通常几百个。如果方法m是一个远程调用，处理比较慢，当方法a调用方法m时，执行方法a的线程就会被长期挂起，无法释放。如果所有线程都因为方法m而无法释放，导致服务器线程耗尽，就会使服务器陷入假死状态，外部表现就是服务器宕机，失去响应，系统严重故障。</p><p>Flower框架应该满足如下典型Web应用的线程特性。</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/77/e3f2706fbf015cc81224d5c8cb3c9577.jpg?wh=1920x562\" alt=\"图片\"></p><p>当并发用户请求到达应用服务器时，Web容器线程不需要执行应用程序代码，它只是将用户的HTTP请求变为请求对象，将请求对象异步交给Flower框架的Service去处理，而Web容器线程自身立刻就返回。</p><p>如果是传统的阻塞式编程，Web容器线程要完成全部的请求处理操作，直到返回响应结果才能释放线程，所以需要很多Web容器线程。但使用Flower框架只需要极少的容器线程就可以处理较多的并发用户请求，而且容器线程不会阻塞。</p><p>同样，在Flower框架中，用户请求交给业务Service对象以后，Service之间依然是使用异步消息通讯而非阻塞式的调用。一个Service完成业务逻辑处理计算以后，会返回一个处理结果，这个结果会以消息的方式异步发送给下一个Service。</p><h2>概要设计</h2><p>Flower框架实现异步无阻塞，一方面是利用了Java Web容器的异步特性，主要是Servlet3.0以后提供的AsyncContext，快速释放容器线程；另一方面则利用了异步的数据库驱动和异步的网络通信，主要是HttpAsyncClient等异步通信组件。而Flower框架内，核心应用代码之间的异步无阻塞调用，则是利用了Akka 的Actor模型。</p><p>Akka Actor的异步消息驱动实现如下。</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/72/f4c3e72dyyf6876064d11yyba3168f72.png?wh=755x228\" alt=\"图片\"></p><p>一个Actor向另一个Actor发起通讯时，当前Actor就是一个消息的发送者Sender，它需要获得另一个Actor的ActorRef，也就是一个引用，通过引用进行消息通信。而ActorRef收到消息以后，会将这个消息放到目标Actor的Mailbox里面，然后就立即返回了。</p><p>也就是说，一个Actor向另一个Actor发送消息时，不需要等待对方真正地处理这个消息，只需要将消息发送到目标Actor的Mailbox里面就可以了。Sender不会被阻塞，可以继续执行自己的其他操作。而目标Actor检查自己的Mailbox中是否有消息，如果有，则从Mailbox里面获取消息，并进行异步的处理。而所有的Actor会共享线程，这些线程不会有任何的阻塞。</p><p>但是Actor编程模型无法满足人们日常的编程习惯以及Flower的命令式编程需求，所以我们需要将Akka Actor封装到一个Flower的编程框架中，并通过Flower提供一个新的编程模型。</p><p>Flower基于Akka的Actor进行开发，将Service封装到Actor里面，并且将Actor收到的消息作为参数传入Service进行调用。</p><p>Flower框架的主要元素包括：Flower Service（服务）、Flower 流程和Flower容器。其中，Service实现一个细粒度的服务功能，Service之间会通过Message关联，前一个Service的返回值（Message），必须是后一个Service的输入参数（Message）。而Flower容器就负责在Service间传递Massage，从而使Service按照业务逻辑编辑成一个Flow（流程）。</p><p>在Flower内部，消息是一等公民，基于Flower开发的应用系统是面向消息的应用系统。消息由Service产生，是Service的返回值；同时消息也是Service的输入。前一个Service的返回消息是下一个Service的输入消息，<strong>没有耦合</strong>的Service正是通过消息关联起来，组成一个Service流程，并最终构建出一个拥有完整处理能力的应用系统。流程举例：</p><pre><code class=\"language-plain\">// -&gt; service1 -&gt; service2 -&gt; service5 -&gt; service4\n//&nbsp; &nbsp; &nbsp; ^&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;^&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |\n//&nbsp; &nbsp; &nbsp; |&nbsp; &nbsp; &nbsp; &nbsp;-&gt; service3 -|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |\n//&nbsp; &nbsp; &nbsp; |___________________________________|\n</code></pre><h2>详细设计</h2><p>Flower核心类图如下。</p><p><img src=\"https://static001.geekbang.org/resource/image/7f/91/7fd7c49659117bb164bc616e24ee9891.jpg?wh=2000x1500\" alt=\"\"></p><p>Flower框架核心关键类及其职责如下：</p><ol>\n<li>Service以及HttpService接口是框架的编程核心，开发者开发的Service需要实现Service或者HttpService接口。HttpService与Service的不同在于HttpService在接口方法中传递Web参数，开发者利用Web接口可以将计算结果直接print到HTTP客户端；</li>\n<li>ServiceFactory负责用户以及框架内置的service实例管理（加载*.services文件）；</li>\n<li>ServiceFlow负责流程管理（加载*.flow文件）；</li>\n<li>ServiceActor将Service封装到Actor。</li>\n</ol><p>Flower初始化及调用时序图如下。</p><p><img src=\"https://static001.geekbang.org/resource/image/d0/f7/d0e3a161a016467242bb96aa685bc6f7.jpg?wh=1920x1532\" alt=\"图片\"></p><p>图中包含两个过程，第一个过程是<strong>服务流程初始化</strong>过程。首先，开发者通过ServiceFacade调用已经定义好的服务流程。然后，ServiceFacade根据传入的flow名和service名，创建第一个ServiceActor。这个ServiceActor将通过ServiceFactory来装载Service实例，并通过ServiceFlow获得当前Service在流程中所配置的后续Service（可能有多个）。依此递归，创建后续Service的ServiceActor，并记录其对应的ActorRef。</p><p>时序图中的第二个过程是<strong>消息流处理</strong>过程。调用者发送给ServiceFacade的消息，会被flow流程中的第一个ServiceActor处理，这个ServiceActor会调用对应的Service实例，并将Service实例的返回值作为消息发送给流程定义的后续ServiceActor。</p><p>使用Flower框架开发应用程序，就是开发各种Service，开发服务Service类必须实现Flower框架的Service接口或者HTTP接口，在process方法内完成服务业务逻辑处理。Service代码示例如下。</p><pre><code class=\"language-plain\">public class UserServiceA implements Service&lt;User, User&gt; {\n&nbsp; static final Logger logger = LoggerFactory.getLogger(UserServiceA.class);\n&nbsp; @Override\n&nbsp; public User process(User message, ServiceContext context) throws Throwable {\n&nbsp; &nbsp; message.setDesc(message.getDesc() + \" --&gt; \" + getClass().getSimpleName());\n&nbsp; &nbsp; message.setAge(message.getAge() + 1);\n&nbsp; &nbsp; logger.info(\"结束处理消息, message : {}\", message);\n&nbsp; &nbsp; return message;\n&nbsp; }\n}\n</code></pre><h4>服务注册</h4><p>开发者开发的服务需要在Flower中注册才可以调用，Flower提供两种服务注册方式：配置文件方式和编程方式。</p><p>编程方式示例如下。</p><pre><code class=\"language-plain\"> ServiceFactory serviceFactory = flowerFactory.getServiceFactory();\n serviceFactory.registerService(UserServiceA.class.getSimpleName(), UserServiceA.class);\n serviceFactory.registerService(UserServiceB.class.getSimpleName(), UserServiceB.class);\n serviceFactory.registerService(UserServiceC1.class.getSimpleName(), UserServiceC1.class);\n</code></pre><p>配置文件方式支持用配置文件进行注册，服务定义配置文件扩展名: .services，放在classpath下，Flower框架自动加载注册，比如flower_test.services。配置文件内容如下。</p><pre><code class=\"language-plain\">UserServiceA = com.ly.train.flower.base.service.user.UserServiceA\nUserServiceB = com.ly.train.flower.base.service.user.UserServiceB\nUserServiceC1 = com.ly.train.flower.base.service.user.UserServiceC1\n</code></pre><h4>流程编排</h4><p>在Flower中，服务之间的依赖关系不能通过传统的服务之间依赖调用实现，如开头的方法a调用方法m那样。而需要通过流程编排方式，实现服务间依赖。服务编排方式也有两种，配置文件方式和编程方式。</p><p>下面的例子演示的是以<strong>编程方式</strong>编排流程。</p><pre><code class=\"language-plain\">// UserServiceA -&gt; UserServiceB -&gt; UserServiceC1\nfinal String flowName = \"flower_test\";\nServiceFlow serviceFlow = serviceFactory.getOrCreateServiceFlow(flowName);\nserviceFlow.buildFlow(UserServiceA.class, UserServiceB.class);\nserviceFlow.buildFlow(UserServiceB.class, UserServiceC1.class);\nserviceFlow.build();\n</code></pre><p>而流程<strong>配置文件方式</strong>则使用扩展名: .flow，放在classpath下，Flower框架会自动加载编排流程。 比如flower_test.flow，文件名flower_test就是流程的名字，流程执行时需要指定流程名。配置文件内容示例如下。</p><pre><code class=\"language-plain\">UserServiceA -&gt; UserServiceB\nUserServiceB -&gt; UserServiceC1\n</code></pre><p>我们将服务Service代码开发好，注册到了Flower框架中，并通过流程编排的方式编排了这几个Service的依赖关系，后面就可以用流程名称进行调用了。调用代码示例如下，其中flowName是流程的名字，user是流程中的一个Service名，是流程开始的Service。</p><pre><code class=\"language-plain\">final FlowRouter flowRouter = flowerFactory.buildFlowRouter(flowName, 16);\nflowRouter.asyncCallService(user);\n</code></pre><p>Flower框架源代码及更多资料可参考 <a href=\"https://github.com/zhihuili/flower\">https://github.com/zhihuili/flower</a>。</p><h2>小结</h2><p>架构师是一个技术权威，他应该是团队中最有技术影响力的那个人。所以，架构师需要具备卓越的代码能力，否则就会沦为PPT架构师。PPT架构师可以一时成为团队的焦点，但是无法长远让大家信服。</p><p>那么架构师应该写什么样的代码？架构师如果写的代码和其他开发工程师的代码一样，又何以保持自己的技术权威，实现技术领导？简单来说，代码可以分成两种，一种代码是给最终用户使用的，处理用户请求，产生用户需要的结果；另一种是给开发工程师使用的，各种编程语言、数据库、编译器、编程框架、技术工具等等。</p><p>编程语言、数据库这些是业界通用的，但是编程框架、技术工具，每个公司都可以依据自身的业务特点，开发自己的框架和工具。而架构师应该是开发框架的那个人，每个开发工程师都使用架构师的开发框架以及约定的编程规范开发代码。架构师通过这种方式落地自己的架构设计，保持自己的技术影响。</p><p>也许你的开发中不会用到反应式编程，你可能也不需要深入学习Flower框架如何设计、如何使用。但是希望你能通过本文学习到如何设计一个编程框架，结合你所在公司的业务场景，将来开发一个你自己的编程框架。</p><h2>思考题</h2><p>Flower纯消息驱动、异步无阻塞的优良特点，适合许多对并发处理要求高，需要快速、及时响应的场景，你能想到的现实应用场景有哪些呢？</p><p>欢迎在评论区分享你的思考，我们共同进步。</p>","neighbors":{"left":{"article_title":"10 | 搜索引擎设计：信息搜索怎么避免大海捞针？","id":493019},"right":{"article_title":"12 | 高性能架构的三板斧：分析系统性能问题从哪里入手？","id":494490}},"comments":[{"had_liked":false,"id":338213,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1647354878,"is_pvip":false,"replies":[{"id":"123664","content":"很赞，确实，Akka的很多应用案例都出自金融行业。<br>","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1647409428,"ip_address":"","comment_id":338213,"utype":1}],"discussion_count":2,"race_medal":0,"score":"27417158654","product_id":100105701,"comment_content":"<br>因为异步，无阻塞。我觉得其实最主要解决的是io访问和网络请求。其基本原理是，CPU的运算速度远远高于IO访问（比如磁盘访问，外设访问），更远高于网络请求（局域网内的数据库，或者微服务下的服务间通信）<br><br>传统串行化，就好像，我要组装一台电脑，我拿到图纸以后，图纸第一步是组装机箱，我订购了一个机箱3天到货，然后机箱里要放主板，我又定了一个主板2天到货，主板上要放cpu，我又定了一个CPU半个月到货。。。最终一台电脑组装好，两个月过去了。组装时间取决于所有产品订购到货的总时间。<br><br>我理解的响应式就是，我收到图纸，发现图纸要CPU，主板，内存，硬盘，机箱。。。我全部发起订购。然后都开始送货，等货全到齐了之后，开始组装。这个时候，组装时间取决于最长到货的那个配件。所以大幅提升了性能。<br><br>反过来说，如果你本身不需要io访问，网络调用之类的操作。响应式对于性能的提升其实是很有限的。<br><br><br>应用场景的话，我觉得可以有金融领域的风控。因为风控其实是一整串校验，而且这一串校验服务很可能是独立的。甚至部分服务是由不同的供应商提供的。如果这种业务场景，走串行化之行，执行效率肯定是不可接受的。使用响应式，可以很大程度缓解这个问题。只需要保证，我的每一个风控校验的服务，或者提供商，响应时间控制在一个范围内，就能保证整个请求的执行时间不会太离谱。<br>","like_count":7,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556528,"discussion_content":"很赞，确实，Akka的很多应用案例都出自金融行业。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647409428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000519,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","nickname":"javaadu","note":"","ucode":"8C0B140F1C8992","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558459,"discussion_content":"我在做策略引擎的时候，确实发现比较适合响应式编程模式，这样就可以异步并发调用底层的算法模型和数据特征，最后再统一决策","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648308429,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340084,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1648599435,"is_pvip":false,"replies":[{"id":"124363","content":"Akka","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1648605369,"ip_address":"","comment_id":340084,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10238534027","product_id":100105701,"comment_content":"老师有推荐的反应式框架吗？最近想学习一下。","like_count":2,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559079,"discussion_content":"Akka","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648605370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337649,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1646957336,"is_pvip":true,"replies":[{"id":"123383","content":"<br>1 其一，最佳线程数不止和CPU数目有关，还有IO等待时间有关，这正是Flower关注的，线程公式如下：<br>最佳线程数=[任务执行时间&#47;(任务执行时间 - IO 等待时间)] * CPU 内核数<br>其二，应用程序开启多少线程，和以上指标都没关系，想开多少开多少。<br><br>2 https:&#47;&#47;akka.io&#47; <br><br>3 文中提到两种反应式编程框架，都是Java框架<br>A Java Streaming<br>B Flutter，另外，Flower也是一个反应式微服务框架，更彻底的反应式微服务，具体可以看github文档<br>C 没有，反应式编程和这些没关系<br><br>4 利用Akka Actor传递消息<br><br>5不是<br><br>6 第一个版本，一个人一个月，具体可以看git log<br><br>","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1646973637,"ip_address":"","comment_id":337649,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10236891928","product_id":100105701,"comment_content":"请教老师几个问题啊：<br>Q1：服务器创建几百个线程与线程公式的矛盾问题。<br>记得有一个公式，线程数等于CPU核数的2倍。假设CPU有二十个核，则线程数是40。服务器创建几百个线程，有什么用？与这个公式不矛盾吗？<br>Q2：akka是什么意思？<br>Q3：目前的主流JAVA开发中有响应式开发框架吗？<br>   A JDK中有响应式开发的东西吗？<br>   B 目前微服务一般用SpringBoot&#47;SpringCloud，这两个部分有响应式开发的东西吗？<br>   C 后端架构，常见的组件:Nginx、Redis、MQ(e.g,RocketMQ)、ES,这几个组件有响应式开发的东西吗？<br>Q4：Flower的消息部分是怎么实现的？队列吗？<br>Q5：RxJava也是封装Actor、消息驱动吗？<br>Q6：这个框架开发难度大吗？老师一个人多长时间能完成开发？","like_count":2,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555559,"discussion_content":"\n1 其一，最佳线程数不止和CPU数目有关，还有IO等待时间有关，这正是Flower关注的，线程公式如下：\n最佳线程数=[任务执行时间/(任务执行时间 - IO 等待时间)] * CPU 内核数\n其二，应用程序开启多少线程，和以上指标都没关系，想开多少开多少。\n\n2 https://akka.io/ \n\n3 文中提到两种反应式编程框架，都是Java框架\nA Java Streaming\nB Flutter，另外，Flower也是一个反应式微服务框架，更彻底的反应式微服务，具体可以看github文档\nC 没有，反应式编程和这些没关系\n\n4 利用Akka Actor传递消息\n\n5不是\n\n6 第一个版本，一个人一个月，具体可以看git log\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646973637,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344960,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1651898045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5946865341","product_id":100105701,"comment_content":"最佳线程数=[任务执行时间&#47;(任务执行时间 - IO 等待时间)] * CPU 内核数","like_count":1},{"had_liked":false,"id":339720,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1648308711,"is_pvip":true,"replies":[{"id":"124200","content":"赞，学习了~","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1648432097,"ip_address":"","comment_id":339720,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5943276007","product_id":100105701,"comment_content":"我是做风控策略引擎的，在策略引擎中，同一个事件过来，需要并行跑很多模型、特征，然后统一决策。这些模型和特征都是外部的系统，对于io并发的要求很高，使用响应式编程有助于减少阻塞环节。<br><br>其他的场景，暂时没想到，看看其他同学的回答","like_count":1,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558651,"discussion_content":"赞，学习了~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648432097,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350466,"user_name":"`¿`","can_delete":false,"product_type":"c1","uid":2409167,"ip_address":"","ucode":"A39CD00CD618DF","user_header":"https://static001.geekbang.org/account/avatar/00/24/c2/cf/f64d6c9d.jpg","comment_is_top":false,"comment_ctime":1656928458,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1656928458","product_id":100105701,"comment_content":"还是得多听几遍，可能基础太差了，有些听不太懂；<br>但是感觉很厉害","like_count":0},{"had_liked":false,"id":346646,"user_name":"名字真难想","can_delete":false,"product_type":"c1","uid":2693769,"ip_address":"","ucode":"C0E2887E1EA67A","user_header":"https://static001.geekbang.org/account/avatar/00/29/1a/89/11136b10.jpg","comment_is_top":false,"comment_ctime":1653313770,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1653313770","product_id":100105701,"comment_content":"老师，应用 Reactive 模式，每个 compose 方法异步调用，结束后都会自动回调下一个 compose-   ----这个不就变成同步调用了吗？ 在保险风控里面，有很多调用逻辑，最后告诉客户能不能投保，如果用响应式编程，客户能实时拿到风控结果吗？","like_count":0},{"had_liked":false,"id":346213,"user_name":"雪碧心拔凉","can_delete":false,"product_type":"c1","uid":1161522,"ip_address":"","ucode":"D13EEBAA0F443B","user_header":"https://static001.geekbang.org/account/avatar/00/11/b9/32/84346d4a.jpg","comment_is_top":false,"comment_ctime":1652920988,"is_pvip":false,"replies":[{"id":"126355","content":"Flower不需要通过入口 返回响应结果给用户，可以在任何一个或多个Service返回。","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1653025063,"ip_address":"","comment_id":346213,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1652920988","product_id":100105701,"comment_content":"妙啊，一直没明白响应式怎么响应信息给客户端的，看到这里终于有点眉目了。类似httpsevice,每次都将web请求传递下去，这样就能达到在最后一个service调用web请求并写响应信息回客户端。<br>也就是用户-&gt;入口-&gt;service1-&gt;service2-&gt;.....-&gt;serviceN-&gt;入口-&gt;用户。    不知道这样理解有问题不","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572874,"discussion_content":"Flower不需要通过入口 返回响应结果给用户，可以在任何一个或多个Service返回。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653025063,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344793,"user_name":"fomy","can_delete":false,"product_type":"c1","uid":1125834,"ip_address":"","ucode":"CD87EA03B1F327","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/ca/02b0e397.jpg","comment_is_top":false,"comment_ctime":1651794182,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651794182","product_id":100105701,"comment_content":"网关应用就是比较典型的高并发，非阻塞的异步编程。","like_count":0},{"had_liked":false,"id":340282,"user_name":"学而不思则惘","can_delete":false,"product_type":"c1","uid":1668117,"ip_address":"","ucode":"8ED2B08AA5A755","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJLgibqHsl97Oq3nvnEVz7V3kaGKLmia0Ja8c4yXO7QeLKiakganRJomNGgYToW4RnFs60zibDTHicjE5w/132","comment_is_top":false,"comment_ctime":1648718135,"is_pvip":false,"replies":[{"id":"124452","content":"并不是，flower可以做到用一个线程执行（看起来）并发执行数百个方法，并发处理数百个请求","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1648776870,"ip_address":"","comment_id":340282,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1648718135","product_id":100105701,"comment_content":"看下来我理解是一个countdownLatch的作用？","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":559441,"discussion_content":"并不是，flower可以做到用一个线程执行（看起来）并发执行数百个方法，并发处理数百个请求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648776870,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578154,"discussion_content":"我理解。。目前tomcat这种容器底层是nio2 其实是aio  基本也是这个路子，这里可以自问一下为啥tomcat底层不用netty。。最根本是底层计算或者io阻塞时间【servlet规范】，默认一个容器接1w的请求但是计算或者io阻塞住了也没啥法子啊。。以我之前维护过的大型风控，可能由于历史原因，其实底层是入口一个，然后不停的多线程分散，当然http效率低一些，所以是dubbo调用。。因为最后一般的阻塞大部分是外部系统 复杂的io计算【例如一个用户一定时间的行为统计】  入口那边本来就不重，重的是后边那一系列的规则 指标","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656548462,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339701,"user_name":"201","can_delete":false,"product_type":"c1","uid":1048264,"ip_address":"","ucode":"C49ABFCDBDB93C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/fe/c8/715ce68f.jpg","comment_is_top":false,"comment_ctime":1648300873,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1648300873","product_id":100105701,"comment_content":"有点晕，只能多刷几次理解了。","like_count":0},{"had_liked":false,"id":338944,"user_name":"HappyHasson","can_delete":false,"product_type":"c1","uid":2911084,"ip_address":"","ucode":"B84CC43E349CFA","user_header":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","comment_is_top":false,"comment_ctime":1647825127,"is_pvip":true,"replies":[{"id":"123870","content":"可以参考github里的文档哈，https:&#47;&#47;github.com&#47;zhihuili&#47;flower。","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1647829245,"ip_address":"","comment_id":338944,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647825127","product_id":100105701,"comment_content":"首先，对java不熟悉，所以这里面的有些概念不清楚，导致理解困难。 <br>  <br>作者能不能画一张示例图，说明各个service怎么并行处理，然后综合结果给到请求端的。 <br>我是看着看着被绕晕了，文中的概念名词很像","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557459,"discussion_content":"可以参考github里的文档哈，https://github.com/zhihuili/flower。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647829245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337750,"user_name":"Geek_7347cf","can_delete":false,"product_type":"c1","uid":2343516,"ip_address":"","ucode":"2E25574FAB1B3B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/mmTEibMibic5ibsVpNZkR3HBlpPpZYt0gHGdIqOduLGxRHZpTWRG3q56CT1eejoLgNsdaW5aQGWXfyibN4vm9CicYb3w/132","comment_is_top":false,"comment_ctime":1647008350,"is_pvip":false,"replies":[{"id":"123573","content":"HttpService接口提供web参数，调用web.print()返回响应结果。","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1647226358,"ip_address":"","comment_id":337750,"utype":1}],"discussion_count":3,"race_medal":0,"score":"1647008350","product_id":100105701,"comment_content":"非http异步调用 怎么获取执行service的返回值，感觉flow原理和netty框架比较像","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556126,"discussion_content":"HttpService接口提供web参数，调用web.print()返回响应结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647226358,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1019744,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8f/60/be0a8805.jpg","nickname":"陈迪","note":"","ucode":"1A64122CC47337","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":560629,"discussion_content":"类似疑问。HTTP请求是如何被Hang住，等待整个框架的处理结果的咧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649407618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":556126,"ip_address":""},"score":560629,"extra":""}]},{"author":{"id":2343516,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/mmTEibMibic5ibsVpNZkR3HBlpPpZYt0gHGdIqOduLGxRHZpTWRG3q56CT1eejoLgNsdaW5aQGWXfyibN4vm9CicYb3w/132","nickname":"Geek_7347cf","note":"","ucode":"2E25574FAB1B3B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556146,"discussion_content":"也就是说 不是http的就拿不到返回值了？  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647230817,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337744,"user_name":"Geek_7347cf","can_delete":false,"product_type":"c1","uid":2343516,"ip_address":"","ucode":"2E25574FAB1B3B","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/mmTEibMibic5ibsVpNZkR3HBlpPpZYt0gHGdIqOduLGxRHZpTWRG3q56CT1eejoLgNsdaW5aQGWXfyibN4vm9CicYb3w/132","comment_is_top":false,"comment_ctime":1647003892,"is_pvip":false,"replies":[{"id":"123572","content":"方法的返回值和请求的返回值不是一回事，Service可以在方法内部调用web.print(), 直接返回请求的响应结果。<br>计算请求的响应结果，需要多个Service异步计算得到的，这些Service之间异步无阻塞，通常在流程的最后一个Service调用web.print()，返回请求处理结果。","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1647226291,"ip_address":"","comment_id":337744,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647003892","product_id":100105701,"comment_content":"文中提到执行service方法有异步和同步 同步有返回值 是阻塞的，异步没有返回值 ，但是大多数情况下是需要返回值的 否则搞成生产者消费者不更简单吗","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556125,"discussion_content":"方法的返回值和请求的返回值不是一回事，Service可以在方法内部调用web.print(), 直接返回请求的响应结果。\n计算请求的响应结果，需要多个Service异步计算得到的，这些Service之间异步无阻塞，通常在流程的最后一个Service调用web.print()，返回请求处理结果。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647226291,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}