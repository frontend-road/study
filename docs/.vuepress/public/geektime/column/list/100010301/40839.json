{"id":40839,"title":"32 | JNI的运行机制","content":"<p>我们经常会遇见Java语言较难表达，甚至是无法表达的应用场景。比如我们希望使用汇编语言（如X86_64的SIMD指令）来提升关键代码的性能；再比如，我们希望调用Java核心类库无法提供的，某个体系架构或者操作系统特有的功能。</p><p>在这种情况下，我们往往会牺牲可移植性，在Java代码中调用C/C++代码（下面简述为C代码），并在其中实现所需功能。这种跨语言的调用，便需要借助Java虚拟机的Java Native Interface（JNI）机制。</p><p>关于JNI的例子，你应该特别熟悉Java中标记为<code>native</code>的、没有方法体的方法（下面统称为native方法）。当在Java代码中调用这些native方法时，Java虚拟机将通过JNI，调用至对应的C函数（下面将native方法对应的C实现统称为C函数）中。</p><pre><code>public class Object {\n  public native int hashCode();\n}\n</code></pre><p>举个例子，<code>Object.hashCode</code>方法便是一个native方法。它对应的C函数将计算对象的哈希值，并缓存在对象头、栈上锁记录（轻型锁）或对象监视锁（重型锁所使用的monitor）中，以确保该值在对象的生命周期之内不会变更。</p><h2>native方法的链接</h2><p>在调用native方法前，Java虚拟机需要将该native方法链接至对应的C函数上。</p><!-- [[[read_end]]] --><p>链接方式主要有两种。第一种是让Java虚拟机自动查找符合默认命名规范的C函数，并且链接起来。</p><p>事实上，我们并不需要记住所谓的命名规范，而是采用<code>javac -h</code>命令，便可以根据Java程序中的native方法声明，自动生成包含符合命名规范的C函数的头文件。</p><p>举个例子，在下面这段代码中，<code>Foo</code>类有三个native方法，分别为静态方法<code>foo</code>以及两个重载的实例方法<code>bar</code>。</p><pre><code>package org.example;\n\npublic class Foo {\n  public static native void foo();\n  public native void bar(int i, long j);\n  public native void bar(String s, Object o);\n}\n</code></pre><p>通过执行<code>javac -h . org/example/Foo.java</code>命令，我们将在当前文件夹（对应<code>-h</code>后面跟着的<code>.</code>）生成名为<code>org_example_Foo.h</code>的头文件。其内容如下所示：</p><pre><code>/* DO NOT EDIT THIS FILE - it is machine generated */\n#include &lt;jni.h&gt;\n/* Header for class org_example_Foo */\n\n#ifndef _Included_org_example_Foo\n#define _Included_org_example_Foo\n#ifdef __cplusplus\nextern &quot;C&quot; {\n#endif\n/*\n * Class:     org_example_Foo\n * Method:    foo\n * Signature: ()V\n */\nJNIEXPORT void JNICALL Java_org_example_Foo_foo\n  (JNIEnv *, jclass);\n\n/*\n * Class:     org_example_Foo\n * Method:    bar\n * Signature: (IJ)V\n */\nJNIEXPORT void JNICALL Java_org_example_Foo_bar__IJ\n  (JNIEnv *, jobject, jint, jlong);\n\n/*\n * Class:     org_example_Foo\n * Method:    bar\n * Signature: (Ljava/lang/String;Ljava/lang/Object;)V\n */\nJNIEXPORT void JNICALL Java_org_example_Foo_bar__Ljava_lang_String_2Ljava_lang_Object_2\n  (JNIEnv *, jobject, jstring, jobject);\n\n#ifdef __cplusplus\n}\n#endif\n#endif\n</code></pre><p>这里我简单讲解一下该命名规范。</p><p>首先，native方法对应的C函数都需要以<code>Java_</code>为前缀，之后跟着完整的包名和方法名。由于C函数名不支持<code>/</code>字符，因此我们需要将<code>/</code>转换为<code>_</code>，而原本方法名中的<code>_</code>符号，则需要转换为<code>_1</code>。</p><p>举个例子，<code>org.example</code>包下<code>Foo</code>类的<code>foo</code>方法，Java虚拟机会将其自动链接至名为<code>Java_org_example_Foo_foo</code>的C函数中。</p><p>当某个类出现重载的native方法时，Java虚拟机还会将参数类型纳入自动链接对象的考虑范围之中。具体的做法便是在前面C函数名的基础上，追加<code>__</code>以及方法描述符作为后缀。</p><p>方法描述符的特殊符号同样会被替换掉，如引用类型所使用的<code>;</code>会被替换为<code>_2</code>，数组类型所使用的<code>[</code>会被替换为<code>_3</code>。</p><p>基于此命名规范，你可以手动拼凑上述代码中，<code>Foo</code>类的两个<code>bar</code>方法所能自动链接的C函数名，并用<code>javac -h</code>命令所生成的结果来验证一下。</p><p>第二种链接方式则是在C代码中主动链接。</p><p>这种链接方式对C函数名没有要求。通常我们会使用一个名为<code>registerNatives</code>的native方法，并按照第一种链接方式定义所能自动链接的C函数。在该C函数中，我们将手动链接该类的其他native方法。</p><p>举个例子，<code>Object</code>类便拥有一个<code>registerNatives</code>方法，所对应的C代码如下所示：</p><pre><code>// 注：Object类的registerNatives方法的实现位于java.base模块里的C代码中\nstatic JNINativeMethod methods[] = {\n    {&quot;hashCode&quot;,    &quot;()I&quot;,                    (void *)&amp;JVM_IHashCode},\n    {&quot;wait&quot;,        &quot;(J)V&quot;,                   (void *)&amp;JVM_MonitorWait},\n    {&quot;notify&quot;,      &quot;()V&quot;,                    (void *)&amp;JVM_MonitorNotify},\n    {&quot;notifyAll&quot;,   &quot;()V&quot;,                    (void *)&amp;JVM_MonitorNotifyAll},\n    {&quot;clone&quot;,       &quot;()Ljava/lang/Object;&quot;,   (void *)&amp;JVM_Clone},\n};\n\nJNIEXPORT void JNICALL\nJava_java_lang_Object_registerNatives(JNIEnv *env, jclass cls)\n{\n    (*env)-&gt;RegisterNatives(env, cls,\n                            methods, sizeof(methods)/sizeof(methods[0]));\n}\n</code></pre><p>我们可以看到，上面这段代码中的C函数将调用<code>RegisterNatives</code> API，注册<code>Object</code>类中其他native方法所要链接的C函数。并且，这些C函数的名字并不符合默认命名规则。</p><p>当使用第二种方式进行链接时，我们需要在其他native方法被调用之前完成链接工作。因此，我们往往会在类的初始化方法里调用该<code>registerNatives</code>方法。具体示例如下所示：</p><pre><code>public class Object {\n    private static native void registerNatives();\n    static {\n        registerNatives();\n    }\n}\n</code></pre><p>下面我们采用第一种链接方式，并且实现其中的<code>bar(String, Object)</code>方法。如下所示：</p><pre><code>// foo.c\n#include &lt;stdio.h&gt;\n#include &quot;org_example_Foo.h&quot;\n\nJNIEXPORT void JNICALL Java_org_example_Foo_bar__Ljava_lang_String_2Ljava_lang_Object_2\n  (JNIEnv *env, jobject thisObject, jstring str, jobject obj) {\n  printf(&quot;Hello, World\\n&quot;);\n  return;\n}\n</code></pre><p>然后，我们可以通过gcc命令将其编译成为动态链接库：</p><pre><code># 该命令仅适用于macOS\n$ gcc -I$JAVA_HOME/include -I$JAVA_HOME/include/darwin -o libfoo.dylib -shared foo.c\n</code></pre><p>这里需要注意的是，动态链接库的名字须以<code>lib</code>为前缀，以<code>.dylib</code>(或Linux上的<code>.so</code>）为扩展名。在Java程序中，我们可以通过<code>System.loadLibrary(\"foo\")</code>方法来加载<code>libfoo.dylib</code>，如下述代码所示：</p><pre><code>package org.example;\n\npublic class Foo {\n  public static native void foo();\n  public native void bar(int i, long j);\n  public native void bar(String s, Object o);\n\n  int i = 0xDEADBEEF;\n\n  public static void main(String[] args) {\n    try {\n      System.loadLibrary(&quot;foo&quot;);\n    } catch (UnsatisfiedLinkError e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n    new Foo().bar(&quot;&quot;, &quot;&quot;);\n  }\n}\n</code></pre><p>如果<code>libfoo.dylib</code>不在当前路径下，我们可以在启动Java虚拟机时配置<code>java.library.path</code>参数，使其指向包含<code>libfoo.dylib</code>的文件夹。具体命令如下所示：</p><pre><code>$ java -Djava.library.path=/PATH/TO/DIR/CONTAINING/libfoo.dylib org.example.Foo\nHello, World\n</code></pre><h2>JNI的API</h2><p>在C代码中，我们也可以使用Java的语言特性，如instanceof测试等。这些功能都是通过特殊的JNI函数（<a href=\"https://docs.oracle.com/en/java/javase/11/docs/specs/jni/functions.html\">JNI Functions</a>）来实现的。</p><p>Java虚拟机会将所有JNI函数的函数指针聚合到一个名为<code>JNIEnv</code>的数据结构之中。</p><p>这是一个线程私有的数据结构。Java虚拟机会为每个线程创建一个<code>JNIEnv</code>，并规定C代码不能将当前线程的<code>JNIEnv</code>共享给其他线程，否则JNI函数的正确性将无法保证。</p><p>这么设计的原因主要有两个。一是给JNI函数提供一个单独命名空间。二是允许Java虚拟机通过更改函数指针替换JNI函数的具体实现，例如从附带参数类型检测的慢速版本，切换至不做参数类型检测的快速版本。</p><p>在HotSpot虚拟机中，<code>JNIEnv</code>被内嵌至Java线程的数据结构之中。部分虚拟机代码甚至会从<code>JNIEnv</code>的地址倒推出Java线程的地址。因此，如果在其他线程中使用当前线程的<code>JNIEnv</code>，会使这部分代码错误识别当前线程。</p><p>JNI会将Java层面的基本类型以及引用类型映射为另一套可供C代码使用的数据结构。其中，基本类型的对应关系如下表所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/cb/ca/cb2c806532449f2c1edfe821990ac9ca.png?wh=412*371\" alt=\"\"></p><p>引用类型对应的数据结构之间也存在着继承关系，具体如下所示：</p><pre><code>jobject\n|- jclass (java.lang.Class objects)\n|- jstring (java.lang.String objects)\n|- jthrowable (java.lang.Throwable objects)\n|- jarray (arrays)\n   |- jobjectArray (object arrays)\n   |- jbooleanArray (boolean arrays)\n   |- jbyteArray (byte arrays)\n   |- jcharArray (char arrays)\n   |- jshortArray (short arrays)\n   |- jintArray (int arrays)\n   |- jlongArray (long arrays)\n   |- jfloatArray (float arrays)\n   |- jdoubleArray (double arrays)\n</code></pre><p>我们回头看看<code>Foo</code>类3个native方法对应的C函数的参数。</p><pre><code>JNIEXPORT void JNICALL Java_org_example_Foo_foo\n  (JNIEnv *, jclass);\n\nJNIEXPORT void JNICALL Java_org_example_Foo_bar__IJ\n  (JNIEnv *, jobject, jint, jlong);\n\nJNIEXPORT void JNICALL Java_org_example_Foo_bar__Ljava_lang_String_2Ljava_lang_Object_2  (JNIEnv *, jobject, jstring, jobject);\n</code></pre><p>静态native方法<code>foo</code>将接收两个参数，分别为存放JNI函数的<code>JNIEnv</code>指针，以及一个<code>jclass</code>参数，用来指代定义该native方法的类，即<code>Foo</code>类。</p><p>两个实例native方法<code>bar</code>的第二个参数则是<code>jobject</code>类型的，用来指代该native方法的调用者，也就是<code>Foo</code>类的实例。</p><p>如果native方法声明了参数，那么对应的C函数将接收这些参数。在我们的例子中，第一个<code>bar</code>方法声明了int型和long型的参数，对应的C函数则接收jint和jlong类型的参数；第二个<code>bar</code>方法声明了String类型和Object类型的参数，对应的C函数则接收jstring和jobject类型的参数。</p><p>下面，我们继续修改上一小节中的<code>foo.c</code>，并在C代码中获取<code>Foo</code>类实例的<code>i</code>字段。</p><pre><code>// foo.c\n#include &lt;stdio.h&gt;\n#include &quot;org_example_Foo.h&quot;\n\nJNIEXPORT void JNICALL Java_org_example_Foo_bar__Ljava_lang_String_2Ljava_lang_Object_2\n  (JNIEnv *env, jobject thisObject, jstring str, jobject obj) {\n  jclass cls = (*env)-&gt;GetObjectClass(env, thisObject);\n  jfieldID fieldID = (*env)-&gt;GetFieldID(env, cls, &quot;i&quot;, &quot;I&quot;);\n  jint value = (*env)-&gt;GetIntField(env, thisObject, fieldID);\n  printf(&quot;Hello, World 0x%x\\n&quot;, value);\n  return;\n}\n</code></pre><p>我们可以看到，在JNI中访问字段类似于反射API：我们首先需要通过类实例获得<code>FieldID</code>，然后再通过<code>FieldID</code>获得某个实例中该字段的值。不过，与Java代码相比，上述代码貌似不用处理异常。事实果真如此吗？</p><p>下面我就尝试获取了不存在的字段<code>j</code>，运行结果如下所示：</p><pre><code>$ java org.example.Foo\nHello, World 0x5\nException in thread &quot;main&quot; java.lang.NoSuchFieldError: j\n at org.example.Foo.bar(Native Method)\n at org.example.Foo.main(Foo.java:20)\n</code></pre><p>我们可以看到，<code>printf</code>语句照常执行并打印出<code>Hello, World 0x5</code>，但这个数值明显是错误的。当从C函数返回至main方法时，Java虚拟机又会抛出<code>NoSuchFieldError</code>异常。</p><p>实际上，当调用JNI函数时，Java虚拟机便已生成异常实例，并缓存在内存中的某个位置。与Java编程不一样的是，它并不会显式地跳转至异常处理器或者调用者中，而是继续执行接下来的C代码。</p><p>因此，当从可能触发异常的JNI函数返回时，我们需要通过JNI函数<code>ExceptionOccurred</code>检查是否发生了异常，并且作出相应的处理。如果无须抛出该异常，那么我们需要通过JNI函数<code>ExceptionClear</code>显式地清空已缓存的异常。</p><p>具体示例如下所示（为了控制代码篇幅，我仅在第一个<code>GetFieldID</code>后检查异常以及清空异常）：</p><pre><code>// foo.c\n#include &lt;stdio.h&gt;\n#include &quot;org_example_Foo.h&quot;\n\nJNIEXPORT void JNICALL Java_org_example_Foo_bar__Ljava_lang_String_2Ljava_lang_Object_2\n  (JNIEnv *env, jobject thisObject, jstring str, jobject obj) {\n  jclass cls = (*env)-&gt;GetObjectClass(env, thisObject);\n  jfieldID fieldID = (*env)-&gt;GetFieldID(env, cls, &quot;j&quot;, &quot;I&quot;);\n  if((*env)-&gt;ExceptionOccurred(env)) {\n    printf(&quot;Exception!\\n&quot;);\n    (*env)-&gt;ExceptionClear(env);\n  }\n  fieldID = (*env)-&gt;GetFieldID(env, cls, &quot;i&quot;, &quot;I&quot;);\n  jint value = (*env)-&gt;GetIntField(env, thisObject, fieldID);\n  // we should put an exception guard here as well.\n  printf(&quot;Hello, World 0x%x\\n&quot;, value);\n  return;\n}\n</code></pre><h2>局部引用与全局引用</h2><p>在C代码中，我们可以访问所传入的引用类型参数，也可以通过JNI函数创建新的Java对象。</p><p>这些Java对象显然也会受到垃圾回收器的影响。因此，Java虚拟机需要一种机制，来告知垃圾回收算法，不要回收这些C代码中可能引用到的Java对象。</p><p>这种机制便是JNI的局部引用（Local Reference）和全局引用（Global Reference）。垃圾回收算法会将被这两种引用指向的对象标记为不可回收。</p><p>事实上，无论是传入的引用类型参数，还是通过JNI函数（除<code>NewGlobalRef</code>及<code>NewWeakGlobalRef</code>之外）返回的引用类型对象，都属于局部引用。</p><p>不过，一旦从C函数中返回至Java方法之中，那么局部引用将失效。也就是说，垃圾回收器在标记垃圾时不再考虑这些局部引用。</p><p>这就意味着，我们不能缓存局部引用，以供另一C线程或下一次native方法调用时使用。</p><p>对于这种应用场景，我们需要借助JNI函数<code>NewGlobalRef</code>，将该局部引用转换为全局引用，以确保其指向的Java对象不会被垃圾回收。</p><p>相应的，我们还可以通过JNI函数<code>DeleteGlobalRef</code>来消除全局引用，以便回收被全局引用指向的Java对象。</p><p>此外，当C函数运行时间极其长时，我们也应该考虑通过JNI函数<code>DeleteLocalRef</code>，消除不再使用的局部引用，以便回收被引用的Java对象。</p><p>另一方面，由于垃圾回收器可能会移动对象在内存中的位置，因此Java虚拟机需要另一种机制，来保证局部引用或者全局引用将正确地指向移动过后的对象。</p><p>HotSpot虚拟机是通过句柄（handle）来完成上述需求的。这里句柄指的是内存中Java对象的指针的指针。当发生垃圾回收时，如果Java对象被移动了，那么句柄指向的指针值也将发生变动，但句柄本身保持不变。</p><p>实际上，无论是局部引用还是全局引用，都是句柄。其中，局部引用所对应的句柄有两种存储方式，一是在本地方法栈帧中，主要用于存放C函数所接收的来自Java层面的引用类型参数；另一种则是线程私有的句柄块，主要用于存放C函数运行过程中创建的局部引用。</p><p>当从C函数返回至Java方法时，本地方法栈帧中的句柄将会被自动清除。而线程私有句柄块则需要由Java虚拟机显式清理。</p><p>进入C函数时对引用类型参数的句柄化，和调整参数位置（C调用和Java调用传参的方式不一样），以及从C函数返回时清理线程私有句柄块，共同造就了JNI调用的额外性能开销（具体可参考该stackoverflow上的<a href=\"https://stackoverflow.com/questions/24746776/what-does-a-jvm-have-to-do-when-calling-a-native-method/24747484#24747484\">回答</a>）。</p><h2>总结与实践</h2><p>今天我介绍了JNI的运行机制。</p><p>Java中的native方法的链接方式主要有两种。一是按照JNI的默认规范命名所要链接的C函数，并依赖于Java虚拟机自动链接。另一种则是在C代码中主动链接。</p><p>JNI提供了一系列API来允许C代码使用Java语言特性。这些API不仅使用了特殊的数据结构来表示Java类，还拥有特殊的异常处理模式。</p><p>JNI中的引用可分为局部引用和全局引用。这两者都可以阻止垃圾回收器回收被引用的Java对象。不同的是，局部引用在native方法调用返回之后便会失效。传入参数以及大部分JNI API函数的返回值都属于局部引用。</p><hr></hr><p>今天的实践环节，请阅读<a href=\"https://www.ibm.com/developerworks/java/library/j-jni/index.html\">该文档</a>中的Performance pitfalls以及Correctness pitfalls两节。</p><p></p>","neighbors":{"left":{"article_title":"31 | Java虚拟机的监控及诊断工具（GUI篇）","id":40821},"right":{"article_title":"33 | Java Agent与字节码注入","id":41186}},"comments":[{"had_liked":false,"id":238027,"user_name":"L","can_delete":false,"product_type":"c1","uid":1357311,"ip_address":"","ucode":"5B847B2378854E","user_header":"https://static001.geekbang.org/account/avatar/00/14/b5/ff/d1f205b0.jpg","comment_is_top":false,"comment_ctime":1596031140,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31660802212","product_id":100010301,"comment_content":"JNI 的运行机制：<br><br>    1. Java 中的 native 方法的链接方式主要有两种：<br>        1、自动链接<br>            按照 JNI 的默认规范命名所要链接的 C 函数，并依赖于 Java 虚拟机自动链接。<br><br>        2、主动链接<br>            另一种则是在 C 代码中主动链接。<br><br>    2. JNI 提供了一系列 API 来允许 C 代码使用 Java 语言特性。<br>        1、映射了 Java ⇋ C 的 基本数据类型 和 引用数据类型          int -&gt; jint ...<br>        2、异常处理<br><br>    3. 防止 C代码 中 引用到的 Java对象被 JVM GC<br>        在C代码中，可以访问传入的引用类型参数，也可以 通过 JNI API 创建新的 Java 对象。<br>        Java 虚拟机需要一种机制，来告知垃圾回收算法，不要回收这些 C 代码中可能引用到的 Java 对象。<br>            -- JNI 的 局部引用（Local Reference）和 全局引用（Global Reference）<br>            这两者都可以 阻止垃圾回收器 回收 被引用的 Java对象。<br>            不同的是，局部引用 在 native 方法调用返回之后便会失效。传入参数 以及大部分 JNI API 函数的返回值 都属于 局部引用。<br><br>    4. JNI 的额外性能开销<br>        1、进入 C 函数时，对引用类型参数的句柄化，和调整参数位置（C 调用和 Java 调用传参的方式不一样）<br>        2、从 C 函数返回时，清理线程私有句柄块","like_count":8},{"had_liked":false,"id":29789,"user_name":"libbylg","can_delete":false,"product_type":"c1","uid":1122939,"ip_address":"","ucode":"0F496A55E114D5","user_header":"https://static001.geekbang.org/account/avatar/00/11/22/7b/be15e8a2.jpg","comment_is_top":false,"comment_ctime":1538541852,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"27308345628","product_id":100010301,"comment_content":"据说JNI的性能很差，请问这个是否是事实，如果有这个问题，那么是否有提高性能的方法","like_count":6},{"had_liked":false,"id":30213,"user_name":"Scott","can_delete":false,"product_type":"c1","uid":1014800,"ip_address":"","ucode":"7E57FDCB5E5D49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg","comment_is_top":false,"comment_ctime":1538727729,"is_pvip":false,"replies":[{"id":"11051","content":"多谢指出！","user_name":"作者回复","comment_id":30213,"uid":"1176688","ip_address":"","utype":1,"ctime":1538987674,"user_name_real":"郑雨迪"}],"discussion_count":3,"race_medal":0,"score":"23013564209","product_id":100010301,"comment_content":"$ java -Djava.library.path=&#47;PATH&#47;TO&#47;DIR&#47;CONTAINING&#47;libfoo.dylib org.example.Foo<br>Hello, World<br>这个地方应该是只写路径，不要把文件名加上","like_count":5,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425899,"discussion_content":"多谢指出！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538987674,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026818,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ab/02/8688abed.jpg","nickname":"nightn","note":"","ucode":"39FC4FF0281637","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344659,"discussion_content":"作者原意就是只包含路径，不包含文件名。PATH TO DIR CONTAINING your file。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611548810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1097836,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","nickname":"随心而至","note":"","ucode":"31866865255101","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41793,"discussion_content":"确实是这样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572506132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146363,"user_name":"随心而至","can_delete":false,"product_type":"c1","uid":1097836,"ip_address":"","ucode":"31866865255101","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/6c/29be1864.jpg","comment_is_top":false,"comment_ctime":1572505785,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14457407673","product_id":100010301,"comment_content":" linux下生成文中对应libfoo.so命令如下：<br> gcc -I$JAVA_HOME&#47;include -I$JAVA_HOME&#47;include&#47;linux -fPIC -o libfoo.so -shared foo.c<br>另外：System.load和System.loadLibrary 可以互换。<br>动手做一下，就明白了。","like_count":3},{"had_liked":false,"id":30216,"user_name":"Scott","can_delete":false,"product_type":"c1","uid":1014800,"ip_address":"","ucode":"7E57FDCB5E5D49","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7c/10/165cb374.jpg","comment_is_top":false,"comment_ctime":1538728667,"is_pvip":false,"replies":[{"id":"11050","content":"JNI里每次访问都要通过句柄，理论上你可以解引用拿到oop，但是不安全，一旦垃圾回收在你用oop时移动了对象，你就会操作一个实际上已经失效了的oop","user_name":"作者回复","comment_id":30216,"uid":"1176688","ip_address":"","utype":1,"ctime":1538987658,"user_name_real":"郑雨迪"}],"discussion_count":1,"race_medal":0,"score":"14423630555","product_id":100010301,"comment_content":"HotSpot 虚拟机是通过句柄（handle）来完成上述需求的。<br><br>句柄是不是只是移动对象时使用，如果每次访问引用都要读内存两次，那性能影响严重","like_count":3,"discussions":[{"author":{"id":1176688,"avatar":"https://static001.geekbang.org/account/avatar/00/11/f4/70/2f61fa20.jpg","nickname":"郑雨迪","note":"","ucode":"F7CA1AE501EAFF","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425900,"discussion_content":"JNI里每次访问都要通过句柄，理论上你可以解引用拿到oop，但是不安全，一旦垃圾回收在你用oop时移动了对象，你就会操作一个实际上已经失效了的oop","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1538987658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":183989,"user_name":"德惠先生","can_delete":false,"product_type":"c1","uid":1178969,"ip_address":"","ucode":"FD8AEBEC32085F","user_header":"https://static001.geekbang.org/account/avatar/00/11/fd/59/4416b40f.jpg","comment_is_top":false,"comment_ctime":1583197704,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10173132296","product_id":100010301,"comment_content":"老师好像没有提到GC_LOCKER机制，并不是所有引用都会被gc直接略过","like_count":2},{"had_liked":false,"id":199000,"user_name":"小陈","can_delete":false,"product_type":"c1","uid":1009385,"ip_address":"","ucode":"A03A299310AD18","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/e9/814d057a.jpg","comment_is_top":false,"comment_ctime":1585475760,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5880443056","product_id":100010301,"comment_content":"不错，之前不懂的懂了","like_count":1},{"had_liked":false,"id":166631,"user_name":"饭粒","can_delete":false,"product_type":"c1","uid":1153455,"ip_address":"","ucode":"4C3220B0D43997","user_header":"https://static001.geekbang.org/account/avatar/00/11/99/af/d29273e2.jpg","comment_is_top":false,"comment_ctime":1577525242,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5872492538","product_id":100010301,"comment_content":"Linux:<br># javac -h . org&#47;example&#47;Foo.java<br># <br># gcc -I$JAVA_HOME&#47;include -I$JAVA_HOME&#47;include&#47;linux -fPIC -o libfoo.so -shared foo.c<br># <br># tree .&#47;<br>.&#47;<br>├── foo.c<br>├── libfoo.so<br>├── org<br>│   └── example<br>│       ├── Foo.class<br>│       └── Foo.java<br>└── org_example_Foo.h<br><br>2 directories, 5 files<br># java -Djava.library.path=. org.example.Foo<br>Hello, World","like_count":1},{"had_liked":false,"id":55021,"user_name":"未知","can_delete":false,"product_type":"c1","uid":1312918,"ip_address":"","ucode":"DB389CEBEEE9E1","user_header":"https://static001.geekbang.org/account/avatar/00/14/08/96/231fdd9e.jpg","comment_is_top":false,"comment_ctime":1546002132,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5840969428","product_id":100010301,"comment_content":"在《深入理解jvm》第二版一书中，2.3.3章节讲述对象访问定位时提到，Hotspot是使用直接指针而不是句柄去访问对象的。是否是Java内部访问时使用的直接指针而native时使用的句柄？？","like_count":1},{"had_liked":false,"id":34815,"user_name":"javaadu","can_delete":false,"product_type":"c1","uid":1000519,"ip_address":"","ucode":"8C0B140F1C8992","user_header":"https://static001.geekbang.org/account/avatar/00/0f/44/47/3ddb94d0.jpg","comment_is_top":false,"comment_ctime":1540308333,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5835275629","product_id":100010301,"comment_content":"（1）JNI中也需要考虑对异常的处理<br>（2）JNI中通过句柄引用java对象，<br>（3）垃圾回收器会忽略jni中的局部引用和全局引用","like_count":1},{"had_liked":false,"id":352598,"user_name":"Jerry银银","can_delete":false,"product_type":"c1","uid":1008404,"ip_address":"","ucode":"80DA1172A2360A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/14/06eff9a4.jpg","comment_is_top":false,"comment_ctime":1658800330,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658800330","product_id":100010301,"comment_content":"两种链接方法分别适用于什么场景？","like_count":0},{"had_liked":false,"id":131646,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1567833210,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567833210","product_id":100010301,"comment_content":"老师，请问一下，使用JNI的时候，要考虑JDK版本与编译器版本的问题吗？我曾经在Windows下用JNI写过一些库，都是静态编译的，但实际测试时，发现不同版本的JDK，有时候要用不同版本的编译器。没法做到一个lib完全通用，感觉很奇怪。（不是32或64，而是vs2010，vs2015，vs2017这些。）","like_count":0},{"had_liked":false,"id":83223,"user_name":"东方","can_delete":false,"product_type":"c1","uid":1329945,"ip_address":"","ucode":"50FDAA2D95170C","user_header":"https://static001.geekbang.org/account/avatar/00/14/4b/19/6f037647.jpg","comment_is_top":false,"comment_ctime":1554472386,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1554472386","product_id":100010301,"comment_content":"老师: A类的方法a()调用C++ ，fork一个进程后，在子进程回调A#a()。a()打印了类的id，前后两个进程打印id是一样的。我的问题是，fork进程后，JVM还是同一个实例？<br><br>","like_count":0,"discussions":[{"author":{"id":1090798,"avatar":"https://static001.geekbang.org/account/avatar/00/10/a4/ee/cffd8ee6.jpg","nickname":"魏全运","note":"","ucode":"3FED702C724E2A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531296,"discussion_content":"不是很懂，但我的推断是c ++里fork 进程后，子进程继承了父进程的资源，所以也持有了jvm ，而这个jvm 不受c ++进程的影响","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637283364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44343,"user_name":"平淡","can_delete":false,"product_type":"c1","uid":1183970,"ip_address":"","ucode":"E914A6B70347AF","user_header":"https://static001.geekbang.org/account/avatar/00/12/10/e2/28c09cf5.jpg","comment_is_top":false,"comment_ctime":1543411759,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1543411759","product_id":100010301,"comment_content":"请问这个JNIENV的参数，是当前执行native函数线程的JNIENV吗？线程的JNIENV是什么时候赋值的呢，找了好久也没找到，谢谢！","like_count":0}]}