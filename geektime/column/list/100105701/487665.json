{"id":487665,"title":"02 | 高并发架构设计方法：面对高并发，怎么对症下药？","content":"<p>你好，我是李智慧。</p><p>我们知道，“高并发”是现在系统架构设计的核心关键词。一个架构师如果设计、开发的系统不支持高并发，那简直不好意思跟同行讨论。但事实上，在架构设计领域，高并发的历史非常短暂，这一架构特性是随着互联网，特别是移动互联网的发展才逐渐变得重要起来的。</p><p>现在有很多大型互联网应用系统，其用户是面向全球的普通大众，用户体量动辄十几亿。这些用户即使只有万分之一同时访问系统，也会产生十几万的并发访问量。</p><p>因此，高并发是现在的大型互联网系统必须面对的挑战，当同时访问系统的用户不断增加时，要消耗的系统计算资源也不断增加。所以系统需要<strong>更多的CPU和内存</strong>去处理用户的计算请求，需要<strong>更多的网络带宽</strong>去传输用户的数据，也需要<strong>更多的硬盘空间</strong>去存储用户的数据。而当消耗的资源超过了服务器资源极限的时候，服务器就会崩溃，整个系统将无法正常使用。</p><p>今天我将基于高并发系统的技术挑战，来为你介绍典型的分布式解决方案。这节课的内容，会被应用到后面的大部分实战案例中。所以我希望通过这节课，带你做个简单的预习，同时你也能对自己学过的高并发技术做个简单回顾。</p><p>我要先说明一点，今天的高并发系统架构方法比较多，但它们是殊途同归的，都要遵循一个相同的高并发应对思路。所以我们今天的首要目标就是明确这个思路到底是什么，也就是要搞清楚高并发系统架构的方法论。</p><!-- [[[read_end]]] --><h3>高并发系统架构的方法论</h3><p>高并发的技术挑战，核心就是为了满足用户的高并发访问，系统需要提供更多的计算资源。那么如何提供这些计算资源，也就是说，如何使系统的计算资源随着并发的增加而增加？</p><p>对此，人们提出各种技术解决方案，这些解决方案大致可以分成两类，一类是传统大型软件系统的技术方案，被称作垂直伸缩方案。<strong>所谓的垂直伸缩就是提升单台服务器的处理能力</strong>，比如用更快频率的CPU、更多核的CPU、更大的内存、更快的网卡、更多的磁盘组成一台服务器，从普通服务器升级到小型机，从小型机提升到中型机，从中型机提升到大型机，从而使单台服务器的处理能力得到提升。通过这种手段提升系统的处理能力。</p><p>当业务增长，用户增多，服务器计算能力无法满足要求的时候，就会用更强大的计算机。计算机越强大，处理能力越强大，当然价格也越昂贵，技术越复杂，运维越困难。</p><p>由于垂直伸缩固有的这些问题，人们又提出另一类解决方案，被称作<strong>水平伸缩方案</strong>。所谓的水平伸缩，指的是不去提升单机的处理能力，不使用更昂贵更快更厉害的硬件，而是使用<strong>更多的服务器</strong>，将这些服务器构成一个<strong>分布式集群</strong>，通过这个集群，对外统一提供服务，以此来提高系统整体的处理能力。</p><p>水平伸缩除了可以解决垂直伸缩的各种问题，还有一个天然的好处，那就是随着系统并发的增加，可以一台服务器一台服务器地添加资源，也就是说，具有更好的弹性。而这种弹性是大多数互联网应用场景所必须的。因为我们很难正确估计一个互联网应用系统究竟会有多少用户来访问，以及这些用户会在什么时候来访问。而水平伸缩的弹性可以保证不管有多少用户，不管用户什么时候来访问，只要随时添加服务器就可以了。</p><p>因此现在的大型互联网系统多采取水平伸缩方案，来应对用户的高并发访问。</p><h3>高并发系统架构的方法</h3><p>我们知道了分布式集群优势明显，但是将一堆服务器放在一起，用网线连起来，并不能天然地使它们构成一个系统。要想让很多台服务器构成一个整体，就需要在架构上进行设计，使用各种技术，让这些服务器成为整体系统的一个部分，将这些服务器有效地组织起来，统一提升系统的处理能力。</p><p>这些相关的技术就是高并发系统架构的主要技术方法，其核心是各种<strong>分布式技术</strong>。</p><h4>分布式应用</h4><p>应用服务器是处理用户请求的主要服务器，工程师开发的代码就部署在这些服务器上。在系统运行期间，每个用户请求都需要分配一个线程去处理，而每个线程又需要占用一定的CPU和内存资源。所以当高并发的用户请求到达的时候，应用服务器需要创建大量线程，消耗大量计算机资源，当这些资源不足的时候，系统就会崩溃。</p><p>解决这个问题的主要手段就是使用<strong>负载均衡服务器</strong>，将多台应用服务器构成一个分布式集群，用户请求首先到达负载均衡服务器，然后由负载均衡服务器将请求分发到不同的应用服务器上。当高并发的用户请求到达时，请求将被分摊到不同的服务器上。这样一来，每台服务器创建的线程都不会太多，占用的资源也在合理范围内，系统就会保持正常运行。</p><p>通过负载均衡服务器构建分布式应用集群如下图。</p><p><img src=\"https://static001.geekbang.org/resource/image/9d/b2/9d52974c88c9141f13d278222fe9a0b2.jpg?wh=1920x1068\" alt=\"图片\"></p><h4>分布式缓存</h4><p>系统在运行期需要获取很多数据，而这些数据主要存储在数据库中，如果每次获取数据都要到数据库访问，会给数据库造成极大的负载压力。同时数据库的数据存储在硬盘中，每次查询数据都要进行多次硬盘访问，性能也比较差。</p><p>目前常用的解决办法就是使用<strong>缓存</strong>。我们可以将数据缓存起来，每次访问数据的时候先从缓存中读取，如果缓存中没有需要的数据，才去数据库中查找。这样可以极大降低数据库的负载压力，也有效提高了获取数据的速度。同样，缓存可以通过将多台服务器够构成一个分布式集群，提升数据处理能力，如下图。</p><p><img src=\"https://static001.geekbang.org/resource/image/e8/6b/e8095a7b1ae1bfe0b942ff071a343f6b.jpg?wh=1920x372\" alt=\"图片\"></p><p>首先应用程序调用分布式缓存的客户端SDK，SDK会根据应用程序传入的key进行路由选择，从分布式缓存集群中选择一台缓存服务器进行访问。如果分布式缓存中不存在要访问的数据，应用程序就直接访问数据库，从数据库中获取数据，然后将该数据写入到缓存中。这样，下次再需要访问该数据的时候，就可以直接从缓存中得到了。</p><h4>分布式消息队列</h4><p>分布式消息队列是<strong>解决突发的高并发写操作问题和实现更简单的集群伸缩</strong>的一种常用技术方案。消息队列架构主要包含三个角色：消息生产者、消息队列、消息消费者，如下图。</p><p><img src=\"https://static001.geekbang.org/resource/image/c2/4e/c24377a57d8a107f936aaedf22eb2a4e.jpg?wh=1920x645\" alt=\"图片\"></p><p>比如我们要写数据库，可以直接由应用程序写入数据库，但是如果有突发的高并发写入请求，就会导致数据库瞬间负载压力过大，响应超时甚至数据库崩溃。</p><p>但是如果我们使用消息队列，应用程序（消息生产者）就可以将写数据库的操作，写入到消息队列中，然后由消息消费者服务器从消息队列中消费消息，根据取出来的消息将数据写入到数据库中。当有突发的高并发写入的时候，只要控制消息消费者的消费速度，就可以保证数据库的负载压力不会太大。</p><p>同时，由于消息生产者和消息消费者没有调用耦合，当我们需要增强系统的处理能力，只需要增加消息生产者或者消息消费者服务器就可以了，不需要改动任何代码，实现伸缩更加简单。</p><h4>分布式关系数据库</h4><p>关系数据库本身并不支持伸缩性，但是关系数据库又是存储数据最传统的手段。为了<strong>解决关系数据库存储海量数据以及提供高并发读写的问题</strong>，人们提出了将数据进行分片，再将不同分片写入到不同数据库服务器的方法。</p><p>通过这种方法，我们可以将多台服务器构建成一个分布式的关系数据库集群，从而实现数据库的伸缩性，如下图。</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/ac/f46f243c02677e4042a7a3c8653f8bac.jpg?wh=1920x1068\" alt=\"图片\"></p><h4>分布式微服务</h4><p>我们前面提到的分布式应用，是<strong>在一个应用程序内部完成大部分的业务逻辑处理</strong>，然后将这个应用程序部署到一个分布式服务器集群中对外提供服务，这种架构方案被称作单体架构。与此相对应的是分布式微服务架构，这是一种目前更广为使用的架构方案，如下图。</p><p><img src=\"https://static001.geekbang.org/resource/image/fd/7e/fd161ed1325d874c537a4bcf670a977e.jpg?wh=1920x645\" alt=\"图片\"></p><p>微服务的核心思想是<strong>将单体架构中庞大的业务逻辑拆分成一些更小、更低耦合的服务，然后通过服务间的调用完成业务的处理。</strong></p><p>具体处理过程是：用户请求通过负载均衡服务器分发给一个微服务网关集群，在网关内开发一个简单的微服务客户端，客户端调用一个或多个微服务完成业务处理，并将处理结果构造成最后的响应结果返回给用户。</p><p>微服务架构的实现需要依赖一个微服务框架，这个框架包括一个微服务注册中心和一个RPC远程调用框架。微服务客户端通过注册中心得到要调用的微服务具体的地址列表，然后通过一个软负载均衡算法选择其中一个服务器地址，再通过PRC进行远程调用。</p><p>此外，除了以上这些分布式技术，高并发系统中常用的还有大数据、分布式文件、区块链、搜索引擎、NoSQL、CDN、反向代理等技术，也都是一些非常经典的分布式技术。如果你对这些技术感兴趣，想要更详细地了解它们，那么你可以阅读我在极客时间的另两个专栏，分别是<a href=\"https://time.geekbang.org/column/intro/100020201?tab=intro\">《从0开始学大数据》</a>和<a href=\"https://time.geekbang.org/column/intro/100040201?tab=intro\">《后端技术面试38讲》</a>。</p><h3>系统并发指标</h3><p>我们这个专栏大部分案例都是关于高并发系统的，那么和并发相关的指标有哪些？并发量又该如何估算？首先，我们来看和并发相关的指标，主要有以下这些。</p><p><strong>目标用户数</strong></p><p>目标用户数是所有可能访问我们系统的潜在用户的总和，比如微信的目标用户是所有中国人，那么微信的目标用户数就是13亿。目标用户数可以反映潜在的市场规模。</p><p><strong>系统用户数</strong></p><p>并不是所有的目标用户都会来访问我们的系统，只有那些真正访问过我们系统的用户才被称作系统用户。越是成功的系统，系统用户数和目标用户数越接近。</p><p><strong>活跃用户数</strong></p><p>同样地，访问过我们系统的用户可能只是偶尔过来访问一下，甚至只访问一次就永不再来。所以我们还需要关注用户的活跃度，也就是经常来访问的用户规模有多大。如果以一个月为单位，那么一个月内只要来访问过一次，就会被统计为活跃用户，这个数目被称为月活用户数。同样地，一天内访问过的总用户数被称为日活用户数。</p><p><strong>在线用户数</strong></p><p>当活跃用户登录我们的系统的时候，就成为在线用户了。在线用户数就是正在使用我们系统的用户总数。</p><p><strong>并发用户数</strong></p><p>但在线用户也并不总是在点击App，请求我们的系统服务，他可能搜索得到一个页面，然后就在自己的手机端浏览。只有发起请求，在服务器正在处理这个请求的用户才是并发用户。事实上，高并发架构主要关注的就是用户发起请求，服务器处理请求时需要消耗的计算资源。所以并发用户数是架构设计时主要关注的指标。</p><p>在我们后续的案例分析中，我都是根据市场规模估计一个目标用户数，然后再根据产品特点、竞品数据等，逐步估算其他的用户数指标。</p><p>有了上面这些用户数指标，我们就可以进一步估算架构设计需要考虑的其他一些技术指标，比如每天需要新增的<strong>文件存储空间</strong>，存储总系统用户需要的<strong>数据库规模</strong>，<strong>总网络带宽</strong>，<strong>每秒处理的请求数</strong>等等。</p><p>技术指标估算能力是架构师的一个重要能力，有了这个能力，你才有信心用技术解决未来的问题，也会因此对未来充满信心。这个估算过程，我们会在后面的案例课中不断重复，你也可以根据你的判断，分析这些估算是否合理，还有哪些没有考虑到的、影响架构设计的指标。</p><h3>小结</h3><p>高并发架构的主要挑战就是<strong>大量用户请求需要使用大量的计算资源</strong>。至于如何增加计算资源，互联网应用走出了一条水平伸缩的发展道路，也就是通过<strong>构建分布式集群架构</strong>，不断向集群中添加服务器，以此来增加集群的计算资源。</p><p>那如何增加服务器呢？对此，又诞生了各种各样的分布式技术方案。我们掌握了这些分布式技术，就算是掌握了高并发系统架构设计的核心。具体这些技术如何应用在高并发系统的架构实践中，我们在后面的案例中会不断进行展示。</p><h3>思考题</h3><p>我们在前面提到过，分布式缓存客户端SDK会根据应用程序传入的key，从分布式缓存集群中选择一台服务器进行访问，那么这个客户端SDK如何选择服务器呢？它怎么知道自己要访问的key在哪台服务器上？你可以尝试说说自己知道几种方法（算法），它们各有什么优缺点。</p><p>欢迎在评论区分享你的思考，也欢迎把这节课分享给更多对高并发架构设计感兴趣的朋友，我们共同进步。</p>","comments":[{"had_liked":false,"id":335196,"user_name":"👽","can_delete":false,"product_type":"c1","uid":1274117,"ip_address":"","ucode":"D313AF941B412D","user_header":"https://static001.geekbang.org/account/avatar/00/13/71/05/db554eba.jpg","comment_is_top":false,"comment_ctime":1645401841,"is_pvip":false,"replies":[{"id":"122480","content":"是的，这是两种目前使用比较广泛的方法，1的算法主流是一致性Hash，主要是解决扩容的问题。","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1645499158,"ip_address":"","comment_id":335196,"utype":1}],"discussion_count":2,"race_medal":0,"score":"61774943985","product_id":100105701,"comment_content":"hash和分段<br><br>hash，根据key的hash值定位目标所在地址。hash值1结尾的key在node1，2结尾的在node2等。<br>数据分布比较平均，但是不方便扩容。因为扩容的话，就要重新编辑hash到node的映射逻辑。<br><br>分段，每个node值存储一个范围内的数据。id 100万到101万，在node1，101-102万在node2。<br>方便扩容，但是数据热点分布可能不均匀。<br>比如现在分配到node11了id值是111万，数据增加1万增加一个node就好。不需要重新处理映射逻辑。 但问题是，数据热点可能不均匀。比如101-110万都是老用户，现在已经不活跃了。热点用户都在最新的1万个用户。带来的结果就是，处理前10万个用户的node饿死了，而最新的node11可能都已经撑死了。<br><br>还是要根据实际业务来决定方案。<br><br>另外，以上数据只是随便列一下，实际node存储的数据量肯定远超这个数据量。不要太较真。","like_count":15,"discussions":[{"author":{"id":2927904,"avatar":"","nickname":"Geek9382","note":"","ucode":"638288F553332F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557980,"discussion_content":"类似redis cluster这种。。哈希槽","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648034955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552519,"discussion_content":"是的，这是两种目前使用比较广泛的方法，1的算法主流是一致性Hash，主要是解决扩容的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645499158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334870,"user_name":"潘政宇","can_delete":false,"product_type":"c1","uid":1254758,"ip_address":"","ucode":"9A6658EE862D95","user_header":"https://static001.geekbang.org/account/avatar/00/13/25/66/4835d92e.jpg","comment_is_top":false,"comment_ctime":1645161912,"is_pvip":true,"replies":[{"id":"122319","content":"这正是消息队列的一个作用：削峰填谷，用消息队列适配生产速度和消费速度不匹配的问题。<br><br>至于长期不匹配，搞的消息队列崩溃，那是数据库设计出了问题了。","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1645172797,"ip_address":"","comment_id":334870,"utype":1}],"discussion_count":7,"race_medal":0,"score":"27414965688","product_id":100105701,"comment_content":"由于数据库的性能瓶颈，会不会造成消息队列的消费速度远低于生产速度，导致消息队列崩溃？","like_count":7,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551912,"discussion_content":"这正是消息队列的一个作用：削峰填谷，用消息队列适配生产速度和消费速度不匹配的问题。\n\n至于长期不匹配，搞的消息队列崩溃，那是数据库设计出了问题了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645172797,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2927904,"avatar":"","nickname":"Geek9382","note":"","ucode":"638288F553332F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557981,"discussion_content":"正常而言主流的消息队列抗积压能力都很强。。约等于N台机器的磁盘容量。。比如 kafka rocketmq等。。但是rabbitmq 确实是 抗积压能力弱不少。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648035021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1074734,"avatar":"https://static001.geekbang.org/account/avatar/00/10/66/2e/527b73c9.jpg","nickname":"骑着🚀看银河","note":"","ucode":"8706A99A89F0CE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2927904,"avatar":"","nickname":"Geek9382","note":"","ucode":"638288F553332F","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578831,"discussion_content":"有测试数据论证吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657035833,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":557981,"ip_address":""},"score":578831,"extra":""},{"author":{"id":1062848,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83ersGSic8ib7OguJv6CJiaXY0s4n9C7Z51sWxTTljklFpq3ZAIWXoFTPV5oLo0GMTkqW5sYJRRnibNqOJQ/132","nickname":"walle斌","note":"","ucode":"0DB3243004951F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1074734,"avatar":"https://static001.geekbang.org/account/avatar/00/10/66/2e/527b73c9.jpg","nickname":"骑着🚀看银河","note":"","ucode":"8706A99A89F0CE","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":580445,"discussion_content":"我理解 直接找 团队内压测人员 部署同样cpu 内存 硬盘下，3个mq的发送消费以及不同场景的测试。。还有就是逐步加大cpu 内存 硬盘 以及扩容其集群情况下的表现，只要有对应的服务器资源这个很简单，像kafka rocketmq的shell都有主动提供测试脚本的功能","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658189993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":578831,"ip_address":""},"score":580445,"extra":""}]},{"author":{"id":1001152,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/46/c0/bf880bda.jpg","nickname":"Sam_Deep_Thinking","note":"","ucode":"8E4EF6F24B821B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554041,"discussion_content":"如果是突然情况，消费者的应用代码出问题了。要么是控制生产者速度（比如说限流），要么将消息空消费（前提是消息允许丢失）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646193965,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005813,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/58/f5/abb7bfe3.jpg","nickname":"Tianium","note":"","ucode":"06E2D3A0246546","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552014,"discussion_content":"这个问题其实也是很常见的。很多崩溃不是因为没有用消息队列，而恰恰是消息队列溢出导致的。消息队列本身也是一个分布式系统，会有监控指标，当指标如平均队列长度到达一定阀值时，就需要扩展消息队列容量了。当然，对于突然的大量请求，扩展可能来不及，那底线就是抛弃溢出的消息，前台表现为操作失败。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645235460,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1087879,"avatar":"https://static001.geekbang.org/account/avatar/00/10/99/87/98ebb20e.jpg","nickname":"dao","note":"","ucode":"4181FB270462CF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551921,"discussion_content":"消息积压。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645174212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340621,"user_name":"国大霞","can_delete":false,"product_type":"c1","uid":2935487,"ip_address":"","ucode":"88CE0BDB1473D0","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJwfrCvStFibsKFGzREM8IdcjAia1IgO0voAopVXsANEhmC6zVHgJBGx51xxfhOp0A1uUe9ibEjHrNUg/132","comment_is_top":false,"comment_ctime":1648974983,"is_pvip":true,"replies":[{"id":"124616","content":"赞","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1649210250,"ip_address":"","comment_id":340621,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23123811463","product_id":100105701,"comment_content":"一致性Hash算法 + 虚拟节点<br>还有Redis集群用的哈希槽的方式","like_count":6,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560132,"discussion_content":"赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649210250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335070,"user_name":"Mark C. Mu","can_delete":false,"product_type":"c1","uid":1076999,"ip_address":"","ucode":"89E71EB7BA48F2","user_header":"https://static001.geekbang.org/account/avatar/00/10/6f/07/859551ad.jpg","comment_is_top":false,"comment_ctime":1645283956,"is_pvip":false,"replies":[{"id":"122484","content":"是的。不过Redis还有另一种解决办法~","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1645499400,"ip_address":"","comment_id":335070,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18825153140","product_id":100105701,"comment_content":"首先，我想到的是通过计算key的hash值并取余来找到缓存集群的位置，这个办法简单粗暴，但带来的问题就是当缓存集群进行扩缩容的时候需要将缓存中的所有数据的key重新计算hash值并根据结果迁移数据，这带来了很高的迁移成本。<br>Redis集群应该是使用一致性哈希算法，将服务器和缓存key全放在一个哈希环上，缓存保存在顺时针找到的最近的服务器上，当扩容时只会损失一台服务器中大约一半的缓存数据，扩展性好很多，哈希不均匀也可以通过虚拟节点的方式得到很大程度的解决。","like_count":5,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552523,"discussion_content":"是的。不过Redis还有另一种解决办法~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645499400,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1786998,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/WkXOqIZeJusTrjkKznia5rHlIlCI1quFrnAHjzuazuLSQzUGwe2RGVJhOMwtfTMibkocZ6RTPcH7qXdhDyWBxQzA/132","nickname":"Geek_b88889","note":"","ucode":"EC0349644BFE88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558592,"discussion_content":"你理解得有问题 redis集群是slot分片 16384 你说得一致性hash是mecache得 ","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1648391806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339893,"user_name":"黄小咸","can_delete":false,"product_type":"c1","uid":1324680,"ip_address":"","ucode":"FBEA89F7E7D556","user_header":"https://static001.geekbang.org/account/avatar/00/14/36/88/7ed30552.jpg","comment_is_top":false,"comment_ctime":1648452670,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"14533354558","product_id":100105701,"comment_content":"key 的分片算法：常用两种，range或hash","like_count":2},{"had_liked":false,"id":334810,"user_name":"Alex","can_delete":false,"product_type":"c1","uid":1024763,"ip_address":"","ucode":"F6B5C64BC99FB7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/fb/94af9cf1.jpg","comment_is_top":false,"comment_ctime":1645145846,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14530047734","product_id":100105701,"comment_content":"期待后面精彩的课程","like_count":3},{"had_liked":false,"id":334873,"user_name":"LRG-","can_delete":false,"product_type":"c1","uid":1090110,"ip_address":"","ucode":"497C983B36A4A2","user_header":"https://static001.geekbang.org/account/avatar/00/10/a2/3e/7d9812f2.jpg","comment_is_top":false,"comment_ctime":1645164101,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10235098693","product_id":100105701,"comment_content":"我只想到用hash，或者分段","like_count":2},{"had_liked":false,"id":354637,"user_name":"Geek_892aa5","can_delete":false,"product_type":"c1","uid":2412292,"ip_address":"湖北","ucode":"8AFBDCD2D06FA9","user_header":"","comment_is_top":false,"comment_ctime":1660633920,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5955601216","product_id":100105701,"comment_content":"希望可以开一篇详细分析 xx流量下 使用 xx机器x台 xx中间件 的系统架构选择","like_count":1},{"had_liked":false,"id":335062,"user_name":"peter","can_delete":false,"product_type":"c1","uid":1058183,"ip_address":"","ucode":"261C3FC001DE2D","user_header":"https://static001.geekbang.org/account/avatar/00/10/25/87/f3a69d1b.jpg","comment_is_top":false,"comment_ctime":1645280679,"is_pvip":true,"replies":[{"id":"122485","content":"1 可以<br>2 可以<br>3 MySQL不是分布式数据库，我们可以在MySQL上进行分片，实现分布式数据库。<br>4 这里微服务调用者被定义为微服务客户端，你需要在Spring Gateway里写调用微服务的代码，网关就是微服务客户端。<br>5 看怎么理解RPC，远程过程调用，HTTP也是一种RPC","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1645499724,"ip_address":"","comment_id":335062,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5940247975","product_id":100105701,"comment_content":"请教老师几个问题：<br>Q1：Nginx可以认为是一个负载均衡服务器吗？<br>Nginx一般的用途是“反向代理服务器”，但它也有负载均衡功能，那么，Nginx也可以认为是一个负载均衡服务器吗？<br>Q2：消息队列可以用在请求和应用服务器之间吗？<br>文中消息队列是用在应用服务器和数据库之间，但是，如果请求过多，应用服务器也会处理不过来。请问：消息队列可以用在请求和应用服务器之间吗？比如请求先到外部网关Nginx，那么，Nginx和应用服务器之间，如果请求太多，会引入消息队列吗？<br>Q3：Mysql是分布式数据库吗？<br>Q4：微服务网关中怎么会有微服务客户端呢？<br>A 在“分布式微服务”章节中，微服务网关中有“微服务客户端”。现在流行的SpringCloud体系中，微服务网关是Spring Gateway。Spring Gateway是个独立的组件，它的内部怎么会有各个具体微服务的客户端呢？<br>B “并将处理结果构造成最后的响应结果返回给用户”，响应结果会是在微服务网关内完成的吗？应该是微服务构造响应，然后微服务网关转发吧。<br>Q5：微服务架构中不一定是RPC吧。<br>SpringCloud是用Rest API，不是用RPC吧。","like_count":2,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552524,"discussion_content":"1 可以\n2 可以\n3 MySQL不是分布式数据库，我们可以在MySQL上进行分片，实现分布式数据库。\n4 这里微服务调用者被定义为微服务客户端，你需要在Spring Gateway里写调用微服务的代码，网关就是微服务客户端。\n5 看怎么理解RPC，远程过程调用，HTTP也是一种RPC","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645499724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334871,"user_name":"_#","can_delete":false,"product_type":"c1","uid":1667141,"ip_address":"","ucode":"CA891A603647C9","user_header":"https://static001.geekbang.org/account/avatar/00/19/70/45/fd84cfa1.jpg","comment_is_top":false,"comment_ctime":1645163767,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5940131063","product_id":100105701,"comment_content":"比较常见的应该是hash吧，还可以从key上去表达最终指向哪里吧，也可以做一个映射吧我猜","like_count":1,"discussions":[{"author":{"id":1005813,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/58/f5/abb7bfe3.jpg","nickname":"Tianium","note":"","ucode":"06E2D3A0246546","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552012,"discussion_content":"Hash 也有不同的方案，普通的hash在某台服务器停止服务时，会导致绝大多数对象被hash到另一个服务器上去，结果是一个服务器的奔溃和整个集群奔溃差不多了，因为大多数缓存的数据都无效了。实际上会用到consistent hash 来改善这个问题，而 consistent hash 还会利用到virtual node等技术来进一步改进。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1645235053,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359051,"user_name":"小杨","can_delete":false,"product_type":"c1","uid":1252598,"ip_address":"北京","ucode":"C7C07AF005507C","user_header":"https://static001.geekbang.org/account/avatar/00/13/1c/f6/b5394713.jpg","comment_is_top":false,"comment_ctime":1665206691,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665206691","product_id":100105701,"comment_content":"cluster集群是在客户端对key % 16384得到槽，在通话槽和节点映射找到对应的节点。<br>codis客户端直接与代理服务器连接，代理服务器对key%1024得到槽，在找到对应的节点。","like_count":0},{"had_liked":false,"id":354390,"user_name":"🐺 🐶","can_delete":false,"product_type":"c1","uid":2704444,"ip_address":"四川","ucode":"84712B0436EC6F","user_header":"https://static001.geekbang.org/account/avatar/00/29/44/3c/8bb9e8b4.jpg","comment_is_top":false,"comment_ctime":1660353590,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1660353590","product_id":100105701,"comment_content":"可能大家都一个反应就是一致性hash，可以解决系统伸缩时，大量的数据迁移","like_count":0},{"had_liked":false,"id":352808,"user_name":"韩能放","can_delete":false,"product_type":"c1","uid":1235459,"ip_address":"","ucode":"AB7B32A4BCE783","user_header":"https://static001.geekbang.org/account/avatar/00/12/da/03/95d2a9b3.jpg","comment_is_top":false,"comment_ctime":1658939618,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1658939618","product_id":100105701,"comment_content":"能否分段划定范围，方便扩展，同时在每段中使用再分段进行然后取模","like_count":0},{"had_liked":false,"id":345059,"user_name":"雪碧心拔凉","can_delete":false,"product_type":"c1","uid":1161522,"ip_address":"","ucode":"D13EEBAA0F443B","user_header":"https://static001.geekbang.org/account/avatar/00/11/b9/32/84346d4a.jpg","comment_is_top":false,"comment_ctime":1651993575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651993575","product_id":100105701,"comment_content":"1.范围法，如1-1千万，1千万-2千万等<br>优点：数据库维护相对，扩容简单<br>缺点：热点数据不均匀，数据库实例请求不均匀<br>2.取模法，根据实例数取模<br>优点：数据均匀分布，请求量相对均匀<br>缺点：扩容不方便，涉及数据迁移<br>3.路由表<br>优点：扩容相对简单<br>缺点：维护路由表需要成本","like_count":0},{"had_liked":false,"id":344691,"user_name":"Gundy","can_delete":false,"product_type":"c1","uid":1003852,"ip_address":"","ucode":"7625140E88ACAA","user_header":"https://static001.geekbang.org/account/avatar/00/0f/51/4c/4dc1dea4.jpg","comment_is_top":false,"comment_ctime":1651725145,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1651725145","product_id":100105701,"comment_content":" hash ，分段<br>hash，分配均匀，但是不方便扩容<br>分段，方便扩容，但是会导师数据分布不均匀","like_count":0},{"had_liked":false,"id":342359,"user_name":"程舰同学","can_delete":false,"product_type":"c1","uid":2976467,"ip_address":"","ucode":"B8430180FD8C26","user_header":"https://static001.geekbang.org/account/avatar/00/2d/6a/d3/0fda8ad7.jpg","comment_is_top":false,"comment_ctime":1650206508,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650206508","product_id":100105701,"comment_content":"用的阿里云k8s集群部署服务，这个请求到哪个pod都是平均分配的吧，怎么能够拿着这个key到有本地没错的pod呢，我觉得同步所有pod本地内存是一个途径","like_count":0},{"had_liked":false,"id":342354,"user_name":"再见理想","can_delete":false,"product_type":"c1","uid":1245999,"ip_address":"","ucode":"FAC88B3F6F6DFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/2f/0a5e0751.jpg","comment_is_top":false,"comment_ctime":1650205873,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650205873","product_id":100105701,"comment_content":"思考题 使用一致性哈希算法  通过将服务器id和key进行hash后取模之后的值进行匹配。","like_count":0},{"had_liked":false,"id":342353,"user_name":"再见理想","can_delete":false,"product_type":"c1","uid":1245999,"ip_address":"","ucode":"FAC88B3F6F6DFD","user_header":"https://static001.geekbang.org/account/avatar/00/13/03/2f/0a5e0751.jpg","comment_is_top":false,"comment_ctime":1650205721,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650205721","product_id":100105701,"comment_content":"渐进式演化的应对高并发系统<br>1.服务器垂直伸缩，提升单机的硬件性能以提高单机处理效率。<br>2.服务器水平伸缩，通过负载均衡技术将请求分散到多台服务器处理，使用keepalive+nginx<br>3.使用分布式缓存做数据库的前置缓存，提示系统读性能，同时防止高并发读对数据库引发的宕机风险。redis <br>4.使用消息队列减轻写操作对数据库的风险，服务解耦，削峰填谷。<br>5.服务拆分，应用程序按业务区分为多个领域，领域之间高内聚低耦合。服务之间通过接口或rpc调用。<br>6.数据库分库分表。","like_count":1},{"had_liked":false,"id":341863,"user_name":"AtomicCut","can_delete":false,"product_type":"c1","uid":2849370,"ip_address":"","ucode":"AA1F9666DA7039","user_header":"https://static001.geekbang.org/account/avatar/00/2b/7a/5a/c326bf1e.jpg","comment_is_top":false,"comment_ctime":1649868106,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649868106","product_id":100105701,"comment_content":"第一个想到的就是一致性哈希了，看了评论说Redis还有办法就看了看Redis的书，发现Redis有个类似于Kafka发布订阅的功能，就是通过计算key位于集群中‘槽‘的位置来定位到具体的集群节点，但如果当前请求节点不是槽对应的节点会返回错误并重新定向到存储了key的节点中","like_count":0},{"had_liked":false,"id":338138,"user_name":"小锅米线","can_delete":false,"product_type":"c1","uid":1937070,"ip_address":"","ucode":"2D8E58F5C56C14","user_header":"https://static001.geekbang.org/account/avatar/00/1d/8e/ae/45b78d58.jpg","comment_is_top":false,"comment_ctime":1647320006,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647320006","product_id":100105701,"comment_content":"关于思考题，Redis cluster本身就有分片策略。另外一种方式就是自己使用一致性哈希算法来实现。","like_count":0},{"had_liked":false,"id":337903,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1434144,"ip_address":"","ucode":"405CB9F42ADD65","user_header":"https://static001.geekbang.org/account/avatar/00/15/e2/20/c21c03fb.jpg","comment_is_top":false,"comment_ctime":1647154002,"is_pvip":false,"replies":[{"id":"123576","content":"有的消息队列产品会提供顺序性保障，但是更重要的是，尽量在设计上不依赖消息顺序性。用户的请求是独立的，以请求为单位构造的消息不需要保证顺序性。","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1647228393,"ip_address":"","comment_id":337903,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1647154002","product_id":100105701,"comment_content":"用多个消息队列消费者去消费队列里面的信息时候保存至数据库时，该如何保证消息先后顺序","like_count":1,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556137,"discussion_content":"有的消息队列产品会提供顺序性保障，但是更重要的是，尽量在设计上不依赖消息顺序性。用户的请求是独立的，以请求为单位构造的消息不需要保证顺序性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647228393,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":335213,"user_name":"Broce","can_delete":false,"product_type":"c1","uid":1028968,"ip_address":"","ucode":"394A7268D44982","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b3/68/02ea47e3.jpg","comment_is_top":false,"comment_ctime":1645412098,"is_pvip":false,"replies":[{"id":"122476","content":"谢谢，一起学习~","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1645498506,"ip_address":"","comment_id":335213,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645412098","product_id":100105701,"comment_content":"期待后面的精彩课程","like_count":0,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552513,"discussion_content":"谢谢，一起学习~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645498506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334920,"user_name":"叔辉 Shuhey","can_delete":false,"product_type":"c1","uid":1521128,"ip_address":"","ucode":"40567C64CD6AD5","user_header":"https://static001.geekbang.org/account/avatar/00/17/35/e8/03ae2f6f.jpg","comment_is_top":false,"comment_ctime":1645182421,"is_pvip":false,"replies":[{"id":"122488","content":"应用中常用的有ActiveMQ，RocketMQ，大数据相关常用Kafka。","user_name":"作者回复","user_name_real":"编辑","uid":"1007349","ctime":1645499802,"ip_address":"","comment_id":334920,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1645182421","product_id":100105701,"comment_content":"一般用什么消息队列来接api数据？我想先保存 。其它程序慢慢来获取，然后保存到数据库。 可能有少部分高峰api数据情况","like_count":1,"discussions":[{"author":{"id":1007349,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/5e/f5/018907ac.jpg","nickname":"李智慧","note":"","ucode":"8C9980C438AFD1","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552527,"discussion_content":"应用中常用的有ActiveMQ，RocketMQ，大数据相关常用Kafka。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645499802,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005813,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/58/f5/abb7bfe3.jpg","nickname":"Tianium","note":"","ucode":"06E2D3A0246546","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552016,"discussion_content":"要实现后发的请求先保存，先发的请求后读取，除了消息队列要分成多个队列分别处理高优先度的请求（如写操作）和低优先度的请求（如读操作）。还要设计版本功能来让后到先发的读请求可以读到已经被修改了的数据对象的历史版本。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645236028,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}