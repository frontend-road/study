{"id":430073,"title":"01｜虚拟内存：为什么可用内存会远超物理内存？","content":"<p>你好，我是海纳。</p><p>今天是我们的第1节课，我想用一个比较有趣的、很多人都遇到过的问题作为我们这门课的开场，带你正式迈入计算机内存的学习课堂。</p><p>我不知道在你刚接触计算机的时候，有没有这么一个疑问：“为什么我的机器上只有两个G的物理内存，但我却可以使用比这大得多的内存，比如256T？”</p><p>反正我当时还是挺疑惑的，不过现在我可以来告诉你这个答案了。这个问题背后的机制是十分复杂的，但它的核心是计算机中物理内存和虚拟内存的关系，尤其是虚拟内存的运行原理。只要你搞懂了它们，这个问题也就迎刃而解了。</p><p>不止如此，虚拟内存的运行原理还是打开计算机底层知识大门的钥匙，只有掌握好它，我们才能继续学习更多的底层原理。我们整个课程的目的，就是让你在遇到进程崩溃、内存访问错误、SIGSEGV、double free、内存泄漏等与内存相关的错误时，可以有的放矢，把握分析问题的方向。而今天的第一课就是把打开这扇门的钥匙交到你手上。</p><p>在回答虚拟内存的相关问题之前，我们需要先看看物理内存的含义。</p><h2>物理内存</h2><p>计算机的物理内存，简单说就是那根内存条，你的内存条是1G的，那计算机可用的物理内存就是1G。这个内存条加电以后就可以存储数据了，CPU运算的数据都是存储在主存里的。</p><!-- [[[read_end]]] --><p>计算机的主存是由多个连续的单元组成的，每个单元称为一个字节，每个字节都有一个唯一的物理地址(Physical Address， PA)，地址编码是从0开始的。所以，如果计算机上配有2G的内存，那么，这个计算机可用的物理内存空间就是0到2G。</p><p>在早期的CPU指令集里，从内存中加载数据，向内存中写入数据都是直接操作物理内存的。也就是说每一个数据存储在内存的什么位置，都由程序员自己负责。例如，8086这款40年前的CPU的mov指令就可以直接访问物理内存。至今，X86架构的CPU在上电以后，为了与8086保持兼容，还是运行在16位实模式下，实模式的特点是所有访存指令访问的都是物理内存地址。你可以先看看这条代码：</p><pre><code>movb ($0x10), %ax\n</code></pre><p>这条汇编代码的作用，就是将物理地址为0x10的那个字节里的内容送入到ax寄存器。（实际上，这里默认使用了数据段寄存器，但并不影响我们理解物理地址（内存）的概念。关于段寄存器，我们下节课会讲解）。不过这里你要注意，上面这句代码是AT&amp;T风格的汇编代码，与Intel风格的汇编不同，其目标操作数和源操作数的位置是相反的。</p><p>但是直接访问物理内存，存在着一个很大的问题。</p><p>因为这种模式下，必然要求程序员手动对数据进行布局，那么内存不够用怎么办呢？而且，每个进程分配多少内存、如何保证指令中访存地址的正确性，这些问题都全部要程序员来负责。</p><p>这是难以忍受的。随着我们后面的讲解，你会发现，如果上面这些工作都全部交由开发者手动来做的话，就相当于每一个开发者要把linker和loader的事情从头做一遍，效率会非常低。</p><p>那既然直接访问物理内存效率那么低，现在还有开发人员用这种模式吗？</p><p>其实也还是有的。在嵌入式设备中，手动管理内存的操作还是广泛存在的。这是因为在嵌入式开发中，往往没有进程的概念，也就是说整个应用独享全部内存，所以手动管理内存才有可能性。在单进程的系统中，所有的物理资源都是单一进程在管理，直接管理物理内存的操作复杂度还可以接受。尽管如此，嵌入式开发中手动管理内存仍然是一项对程序员要求极高的工作。</p><p>不过，对于我们普通软件工程师来说，系统中经常有多个进程，多进程之间的协同分配内存和释放内存就没那么容易了，这个时候我们要怎么办呢？</p><p>幸好，局部性原理成了我们的救命稻草。基于局部性原理，CPU为程序员虚拟化了一层内存，我们只需要与虚拟内存打交道就可以了。所以接下来，我们就来讨论局部性原理说的是什么，聪明的CPU设计人员又是如何将这个原理完美应用的。</p><h2>局部性原理</h2><p>在绝大多数程序的运行过程中，当前指令大概率都会引用最近访问过的数据。也就是说，程序的数据访问会表现出明显的倾向性。这种倾向性，我们就称之为局部性原理(Principle of locality)。</p><p>我们可以从两个方面来理解局部性原理。第一个方面是时间局部性，也就是说被访问过一次的内存位置很可能在不远的将来会被再次访问；另一方面是空间局部性，说的是如果一个内存位置被引用过，那么它邻近的位置在不远的将来也有很大概率会被访问。</p><p>基于这个原理，我们可以做出一个合理的推论：<strong>无论一个进程占用的内存资源有多大，在任一时刻，它需要的物理内存都是很少的</strong>。在这个推论的基础上，CPU为每个进程只需要保留很少的物理内存就可以保证进程的正常执行了。</p><p>而且，为了让程序员编程方便，CPU和操作系统还联手编织了一个假象：<strong>每个进程都独享128T的虚拟内存空间，并且每个进程的地址空间都是相互隔离的</strong>。什么意思呢？比如说，现在进程A中有个变量a，它的地址是0x100，但是进程B中也有个变量b，它的地址也是0x100。但这并不会造成冲突，因为进程A的地址空间与进程B的地址空间是独立的，相互不影响。</p><p>这就极大地解放了程序员的生产力。我们可以对比一下直接操作物理内存和操作虚拟内存，程序员要关心的事情都有哪些。</p><p>在直接操作物理内存的情况下，你需要知道每一个变量的位置都安排在了哪里，而且还要注意和当前这个进程同时工作的进程，不能共用同一个地址，否则就会造成地址冲突。你想，一个项目中会有成百万的变量和函数，我们都要给它计算一个合理的位置，还不能与其他进程冲突，这是根本不可能完成的任务。</p><p>而直接操作虚拟内存的情况就变得简单多了。你可以独占128T内存，任意地使用，系统上还运行了哪些进程已经与我们完全没有关系了。为变量和函数分配地址的活，我们交给链接器去自动安排就可以了。这一切都是因为虚拟内存能够提供内存地址空间的隔离，极大地扩展了可用空间。</p><p>这是什么意思呢？就是说虚拟内存不仅让每个进程都有独立的、私有的内存空间，而且这个地址空间比可用的物理内存要大得多。不过，任何一个虚拟内存里所存储的数据，还是保存在真实的物理内存里的。换句话说，<strong>任何虚拟内存最终都要映射到物理内存，但虚拟内存的大小又远超真实的物理内存的大小</strong>。</p><p>那虚拟内存具体是怎么做到的呢？</p><h2>虚拟内存与程序局部性原理</h2><p>答案很简单，就是CPU充分利用程序局部性原理，提出了虚拟内存和物理内存的映射(Mapping)机制。这也是我们开头那个问题的答案，更具体的原理，我们接着往下看。</p><p>操作系统管理着这种映射关系，所以你在写代码的时候，就不用再操心物理内存的使用情况了，你看到的内存就是虚拟内存。</p><p>这种映射关系是以页为单位的。你看看下面这张图就很好理解了，多个进程的虚拟内存中的页都被映射到物理内存页上。</p><p><img src=\"https://static001.geekbang.org/resource/image/4b/48/4bae735761c77bd0efa26974c8f53548.jpg?wh=2284x1238\" alt=\"\"></p><p>我希望你可以从图中看到这两点。第一，虽然虚拟内存提供了很大的空间，但实际上进程启动之后，这些空间并不是全部都能使用的。开发者必须要使用malloc等分配内存的接口才能将内存从待分配状态变成已分配状态。</p><p>在你得到一块虚拟内存以后，这块内存就是未映射状态，因为它并没有被映射到相应的物理内存，直到对该块内存进行读写时，操作系统才会真正地为它分配物理内存。然后这个页面才能成为正常页面。</p><p>第二，在虚拟内存中连续的页面，在物理内存中不必是连续的。只要维护好从虚拟内存页到物理内存页的映射关系，你就能正确地使用内存了。这种映射关系是操作系统通过页表来自动维护的，不必你操心。</p><p>不过你还要注意一点，计算机的虚拟内存大小是不一样的。虚拟地址空间往往与机器字宽有关系。例如32位机器上，指向内存的指针是32位的，所以它的虚拟地址空间是2的32次方，也就是4G。在64位机器上，指向内存的指针就是64位的，但在64位系统里只使用了低48位，所以它的虚拟地址空间是2的48次方，也就是256T。</p><h3>页表的结构</h3><p>不过，虽然大多数情况下，CPU和操作系统会一起完成页面的自动映射，不需要你关心其中的机制。但是当我们在做系统性能优化的时候，理解内存映射的过程就是十分必要的了。</p><p>例如，我就曾经遇到过一个性能很差的程序，经过perf工具分析后，我发现是因为缺页中断过多导致的。这个时候，那么掌握页的结构和映射过程的知识就非常有必要了。所以我也想跟你来探讨一下这方面的内容。</p><p>我们刚才也说了，映射的过程，是由CPU的内存管理单元(Memory Management Unit, MMU)自动完成的，但它依赖操作系统设置的页表。</p><p>页表的本质是页表项(Page Table Entry, PTE)的数组，虚拟空间中的每一个页在页表中都有一个PTE与之对应，PTE中会记录这个虚拟内存页所对应的实际物理页的起始地址。为方便理解，我这举了个例子，下面这张图描述的是i7处理器中的页面映射机制。</p><p><img src=\"https://static001.geekbang.org/resource/image/53/ef/534bf413b66765e1a9cc8d79b62b75ef.jpg?wh=2000x1062\" alt=\"\"></p><p>你可以看到，i7处理器的页表也是存储在内存页里的，每个页表项都是4字节。所以，人们就将1024个页表项组成一张页表。这样一张页表的大小就刚好是4K，占据一个内存页，这样就更加方便管理。而且，当前市场上主流的处理器也都选择将页大小定为4K。</p><p>一个页表项对应着一个大小为4K的页，所以1024个页表项所能支持的空间就是4M。那为了编码更多地址，我们必须使用更多的页表。而且，为了管理这些页表，我们还可以继续引入页表的数组：<strong>页目录表</strong>。</p><p>页目录表中的每一项叫做页目录项(Page Directory Entry, PDE)，每个PDE都对应一个页表，它记录了页表开始处的物理地址，这就是多级页表结构。现代的64位处理器上，为了编码更大的空间，还存在更多级的页表。</p><p><img src=\"https://static001.geekbang.org/resource/image/38/34/388b34c8942f87ef87c51fyy99fd6d34.jpg?wh=2000x1062\" alt=\"\"></p><p>好了，我们现在已经搞清楚页面映射的机制原理了，那接下来，我们再用一个例子让你更具体地感受一下页面映射的过程。为了论述方便，我们以32位操作系统为例，看看CPU是如何通过一个虚拟地址找到物理内存中的真实位置的。</p><h3>一个CPU怎么找到真实地址？</h3><p>一个CPU要通过虚拟地址，找到物理地址需要几个步骤呢？大概是下面这四个。</p><p><img src=\"https://static001.geekbang.org/resource/image/9e/57/9eed9b0e3e7823c28d80c36e535e5d57.jpg?wh=2000x1266\" alt=\"\"></p><p><strong>第一步是确定页目录基址</strong>。每个CPU都有一个页目录基址寄存器，最高级页表的基地址就存在这个寄存器里。在X86上，这个寄存器是CR3。每一次计算物理地址时，MMU都会从CR3寄存器中取出页目录所在的物理地址。</p><p><strong>第二步是定位页目录项（PDE）</strong>。一个32位的虚拟地址可以拆成10位，10位和12位三段，上一步找到的页目录表基址加上高10位的值乘以4，就是页目录项的位置。这是因为，一个页目录项正好是4字节，所以1024个页目录项共占据4096字节，刚好组成一页，而1024个页目录项需要10位进行编码。这样，我们就可以通过最高10位找到该地址所对应的PDE了。</p><p><strong>第三步是定位页表项（PTE）</strong>。页目录项里记录着页表的位置，CPU通过页目录项找到页表的位置以后，再用中间10位计算页表中的偏移，可以找到该虚拟地址所对应的页表项了。页表项也是4字节的，所以一页之内刚好也是1024项，用10位进行编码。所以计算公式与上一步相似，用页表基址加上中间10位乘以4，可以得到页表项的地址。</p><p><strong>最后一步是确定真实的物理地址</strong>。上一步CPU已经找到页表项了，这里存储着物理地址，<strong>这才真正找到该虚拟地址所对应的物理页</strong>。虚拟地址的低12位，刚好可以对一页内的所有字节进行编码，所以我们用低12位来代表页内偏移。计算的公式是物理页的地址直接加上低12位。</p><p>前面我们分析的是32位操作系统，那对于64位机器是不是有点不同呢？在64位的机器上，使用了48位的虚拟地址，所以它需要使用4级页表。它的结构与32位的3级页表是相似的，只是多了一级页目录，定位的过程也从32位的4步变成了5步。这个你可以课后自己去分析一下。</p><h3>页面的换入换出</h3><p>不过我们前面也说到，由于程序运行符合局部性原理，CPU访问内存会有很明显的重复访问的倾向性。那对于那些没有被经常使用到的内存，我们可以把它换出到主存之外，比如硬盘上的swap区域。新的虚拟内存页可以被映射到刚腾出来的这个物理页。这就涉及到了页面换入换出的调度问题。</p><p>我们举个例子来说明一下。假如进程A一开始将虚拟内存的0至4K，映射到物理内存的0至4K空间。基于局部性原理，4K以后的虚拟地址大概率是不会被访问的，我们可以让程序一直运行。</p><p>直到程序开始访问4K ~ 8K之间的虚拟地址了，我们就可以将现在的物理地址里的内容换出到磁盘的swap区域，然后再将虚拟内存的4K ~ 8K这一个区域映射到0~4K的这一块物理内存。在理想情况下，虽然进程A的虚拟内存非常大，比如256T，但CPU只需要一个4K大小的物理内存页就能满足它的需求了。</p><p>当然在实际情况中肯定不会这么理想，所以一个进程所占用的物理内存不可能只有一个页。从效率的角度看，当物理内存足够时，操作系统也会尽量让尽可能多的页驻留在物理内存中。毕竟将内存中的数据写到磁盘里是非常耗时的操作。</p><p>如何能最大化地在空间和时间上都取得平衡，这就要精心地设计页面的调度算法。我们会在第9节课讲解如何通过缺页中断来进行页的分配回收和调度。</p><h2>总结</h2><p>好了，到这里我们今天这节课的内容讲完了，我们再来简单回顾一下。</p><p>虚拟内存是软硬件一体化设计的一个典型代表。围绕虚拟内存这个核心概念，CPU，操作系统，编译器等所有的软硬件都在不断地进化。举个例子，我们遇到进程coredump的时候，使用gdb去查看内存时，看到的地址全都是虚拟内存的，如果你没有掌握虚拟内存这个概念的话，在排查一些隐藏得很深的BUG时，就会无从下手。</p><p>虚拟内存的出现，是为了解决直接操作物理内存的系统无法支持多进程的问题。这里的难点主要是进程的地址空间非常小，而且多个进程的地址很容易发生冲突。所以在局部性原理的基础上，CPU设计者提出虚拟内存的方案将多个进程的地址空间隔离开，并且提供了巨大的内存空间。</p><p>我们可以总结一下，虚拟内存主要有下面两个特点：</p><p>第一，由于每个进程都有自己的页表，所以每个进程的虚拟内存空间就是相互独立的。进程也没有办法访问其他进程的页表，所以这些页表是私有的。这就解决了多进程之间地址冲突的问题。</p><p>第二，PTE中除了物理地址之外，还有一些标记属性的比特，比如控制一个页的读写权限，标记该页是否存在等。在内存访问方面，操作系统提供了更好的安全性。</p><p>另外，虚拟内存可以充分使用CPU提供的机制来完成很多重要的任务。例如，fork借用写保护来实现写时复制，JVM中借用改变某一个页的读权限来实现safepoint查询等等。这些内容我们都会在以后的课程加以介绍。</p><p>由于CPU对内存提供了更多保护的能力，所以X86架构的CPU把这种工作模式称为<strong>保护模式</strong>，与可以直接访问物理内存的<strong>实模式</strong>形成了对比。除此之外，虚拟内存还有很多的好处在我们后面的课程中都会慢慢展开，你可以先自己思考一下。</p><h2>思考题</h2><p>Linux操作系统会为每一个进程都在/proc目录下创建一个目录，目录名就是进程号。我们可以通过打开这个目录下的一些文件来查看该进程的内存使用情况，例如：</p><pre><code>$ cat /proc/1464/maps\n</code></pre><p>上述命令就是查看1464号进程的内存映射的情况。</p><ol>\n<li>请你仿照上述例子自己创建一个进程，并查看该进程的maps和smaps文件。</li>\n<li>查找资料，确认这个目录下面各个文件的作用。<br>\n欢迎你在留言区和我交流你的想法，我在留言区等你。</li>\n</ol><p><img src=\"https://static001.geekbang.org/resource/image/20/dc/205d4e678f9acfba4d92cecb618dcddc.jpg?wh=2284x1361\" alt=\"\"></p><p>好啦，这节课到这就结束啦。欢迎你把这节课分享给更多对计算机内存感兴趣的朋友。我是海纳，我们下节课再见！</p>","neighbors":{"left":{"article_title":"导学（三）| 一个CPU是怎么寻址的？","id":431373},"right":{"article_title":"02｜聊聊x86体系架构中的实模式和保护模式","id":431400}},"comments":[{"had_liked":false,"id":318424,"user_name":"郑童文","can_delete":false,"product_type":"c1","uid":1030733,"ip_address":"","ucode":"3D193715CB8549","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ba/4d/7ba09ff0.jpg","comment_is_top":false,"comment_ctime":1635297503,"is_pvip":false,"replies":[{"id":"115484","content":"你思考得非常深入！<br>1. 所有进程的页表都是关键数据，只有内核才有权限修改，所以页表都是存在内核空间的。每个进程的管理结构里（也在内核空间）都会记录自己的页表。<br>2. 进程切换时会把目标进程的页表起始地址送进cr3寄存器，这样目标进程页表就可以起作用了。显然这个也只能在内核里才能做。<br>3. 我们后面的课程会详细地回答这个问题。<br>","user_name":"作者回复","user_name_real":"氦钠锶","uid":"1360512","ctime":1635308512,"ip_address":"","comment_id":318424,"utype":1}],"discussion_count":5,"race_medal":0,"score":"78944708831","product_id":100094901,"comment_content":"请问老师，每个进程的页表是保存在操作系统所占的内存地址空间还是该进程自己的地址空间？进程切换将对页表产生什么影响？关于每个进程的堆和栈的起始和终止地址又是保存在哪儿的呢？ 谢谢！","like_count":18,"discussions":[{"author":{"id":2877242,"avatar":"","nickname":"Geek_3d5648","note":"","ucode":"8183BC684CF3DA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542208,"discussion_content":"进程切换的过程可以说成是把相应进程的一级页表起始位置装载到cr3控制寄存器以此来切换到不同进程的虚拟地址空间的过程","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1640683102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529234,"discussion_content":"你思考得非常深入！\n1. 所有进程的页表都是关键数据，只有内核才有权限修改，所以页表都是存在内核空间的。每个进程的管理结构里（也在内核空间）都会记录自己的页表。\n2. 进程切换时会把目标进程的页表起始地址送进cr3寄存器，这样目标进程页表就可以起作用了。显然这个也只能在内核里才能做。\n3. 我们后面的课程会详细地回答这个问题。\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635308512,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2837328,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/4b/50/fae00aff.jpg","nickname":"HollyWong","note":"","ucode":"03A66A2BCC0A58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413727,"discussion_content":"每个进程的栈和堆都属于进程自己程序空间，x86的栈是由高地址往低地址用，堆是由低地址往高地址用（两头消耗），栈是你用，但是系统分配和回收（你的程序定逻辑，编译器和连接器定虚虚拟地址，OS的装载器定物理地址（建立段表、页表映射过程））,堆是系统给程序员使用内存的机制，由你申请，申请通过，系统给你，但是不用了要程序员负责回收。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636549661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026921,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ab/69/5f1f0d1c.jpg","nickname":"支离书","note":"","ucode":"AD2570AC5EF7BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530772,"discussion_content":"多核处理器会同时执行多个进程吗？会的话CR3寄存器存储哪个进程的页表起始地址呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637145196,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":1,"child_discussions":[{"author":{"id":2150023,"avatar":"https://static001.geekbang.org/account/avatar/00/20/ce/87/41c44923.jpg","nickname":"会爆炸的小米Note","note":"","ucode":"1DA0B740A7C7B7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1026921,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ab/69/5f1f0d1c.jpg","nickname":"支离书","note":"","ucode":"AD2570AC5EF7BB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581302,"discussion_content":"每个cpu核都有自己的那一套tlb cr3寄存器 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658718209,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530772,"ip_address":""},"score":581302,"extra":""}]}]},{"had_liked":false,"id":320333,"user_name":"niucheng","can_delete":false,"product_type":"c1","uid":1129348,"ip_address":"","ucode":"54FDBE14D2296D","user_header":"https://static001.geekbang.org/account/avatar/00/11/3b/84/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1636257925,"is_pvip":true,"replies":[{"id":"116176","content":"不能一概而论哈。数据结构的时间复杂度的损失不是缺页中断能够弥补的。举个例子，使用二叉搜索树查找数据，假设数据总量是1’000’000，时间复杂度是O(log n)，所以查找的效率是平均20次查找。但数组从0开始向后找，时间复杂度是O(n)，所以查找次数的平均值是500&#39;000。虽然二叉树大概率每次访问子结点都会出现缓存不命中的情况，但这种损失与时间复杂度的优势相比，完全微不足道。所以讨论缓存应该是在算法和数据结构已经做到最优的情况下，再去扣它。而不是为了缓存命中而使用更差的数据结构。","user_name":"作者回复","user_name_real":"海纳","uid":"1360512","ctime":1636340885,"ip_address":"","comment_id":320333,"utype":1}],"discussion_count":2,"race_medal":0,"score":"74650701957","product_id":100094901,"comment_content":"后面的面试题目中，服务程序内部使用的数据存储格式，尽可能使用数组类型、或者压缩列表这类内存紧凑的数据结构，因为数组对CPU告诉缓存支持更友好，缓存命中率会更高，这样会提高数据访问速度？如果使用链式或者树形的数据结构来存储数据，会不会更容易触发缺页中断？","like_count":17,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529959,"discussion_content":"不能一概而论哈。数据结构的时间复杂度的损失不是缺页中断能够弥补的。举个例子，使用二叉搜索树查找数据，假设数据总量是1’000’000，时间复杂度是O(log n)，所以查找的效率是平均20次查找。但数组从0开始向后找，时间复杂度是O(n)，所以查找次数的平均值是500&amp;#39;000。虽然二叉树大概率每次访问子结点都会出现缓存不命中的情况，但这种损失与时间复杂度的优势相比，完全微不足道。所以讨论缓存应该是在算法和数据结构已经做到最优的情况下，再去扣它。而不是为了缓存命中而使用更差的数据结构。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1636340885,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1320487,"avatar":"https://static001.geekbang.org/account/avatar/00/14/26/27/eba94899.jpg","nickname":"罗杰","note":"","ucode":"96BAFAA147341F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556655,"discussion_content":"这个例子举的是不是有点太不恰当了，恁什么我的数据就不能是有序数据呀。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647438355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319571,"user_name":"压根就是咯","can_delete":false,"product_type":"c1","uid":2718036,"ip_address":"","ucode":"7C5E655CF06D5F","user_header":"https://static001.geekbang.org/account/avatar/00/29/79/54/42528d8c.jpg","comment_is_top":false,"comment_ctime":1635853024,"is_pvip":false,"replies":[{"id":"115866","content":"举一个形象点的例子：你把物理内存页看成酒店房间，把虚拟内存页看成旅客。虽然旅客人数远多于酒店房间，但是因为旅客不是同一天入住。所以我们就可以通过调度来实现旅客和房间的动态映射了。从外界看起来，就是酒店用了100个房间在100天里满足了一万个旅客入住。","user_name":"作者回复","user_name_real":"海纳","uid":"1360512","ctime":1635924710,"ip_address":"","comment_id":319571,"utype":1}],"discussion_count":2,"race_medal":0,"score":"48880493280","product_id":100094901,"comment_content":"为什么虚拟内存远超物理内存，却能正常映射存储，没太看懂？","like_count":11,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529676,"discussion_content":"举一个形象点的例子：你把物理内存页看成酒店房间，把虚拟内存页看成旅客。虽然旅客人数远多于酒店房间，但是因为旅客不是同一天入住。所以我们就可以通过调度来实现旅客和房间的动态映射了。从外界看起来，就是酒店用了100个房间在100天里满足了一万个旅客入住。","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1635924710,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1001832,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/49/68/bef5f7d3.jpg","nickname":"metalmac.kyle","note":"","ucode":"74795A8825FCAA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":542864,"discussion_content":"这个举例太精妙了！一下豁然开朗，还是结合实际理解清楚呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640867297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":529676,"ip_address":""},"score":542864,"extra":""}]}]},{"had_liked":false,"id":318208,"user_name":"一粒","can_delete":false,"product_type":"c1","uid":1582813,"ip_address":"","ucode":"FB5F583CC6AE3C","user_header":"https://static001.geekbang.org/account/avatar/00/18/26/dd/d58156b1.jpg","comment_is_top":false,"comment_ctime":1635208065,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"40289913729","product_id":100094901,"comment_content":"&#47;proc&#47;{pid}&#47;maps文件各字段含义：地址范围、访问权限、文件等中的偏移量、设备、inode、支持映射的文件路径名；<br>&#47;proc&#47;{pid}&#47;smaps文件记录的是内存映射的详细信息：第一行同maps文件，其余行表示：内存大小、Rss、Pss、Shared_Clean、Shared_Dirty、Private_Clean、Private_Dirty、Referenced、Anonymous、AnonHugePages、ShmemHugePages、ShmemPmdMapped、Swap、KernelPageSize、MMUPageSize、Locked、ProtectionKey、VmFlags等。","like_count":9,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408774,"discussion_content":"调研得很详实。真的自己动手看过一遍它的具体取值，你会有不一样的收获。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635322297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318352,"user_name":"MetMan","can_delete":false,"product_type":"c1","uid":1306516,"ip_address":"","ucode":"70BB90A169F92B","user_header":"https://static001.geekbang.org/account/avatar/00/13/ef/94/968c937f.jpg","comment_is_top":false,"comment_ctime":1635254660,"is_pvip":false,"replies":[{"id":"115487","content":"因为虚拟地址也有耗尽的可能呀。物理内存不够了，可以把不活跃页面往磁盘的swap区域放，但swap区域也有不够用的可能，这就是物理内存耗尽的情况。3G的用户空间，一次性要申请4G的空间，虚拟地址就不够用了。所以说，虚拟地址只是编织了一个很大地址的假象，其物理空间该耗尽的还是会耗尽。所以要记住不管什么时候，能释放的内存尽量释放总是一个好习惯。","user_name":"作者回复","user_name_real":"氦钠锶","uid":"1360512","ctime":1635309219,"ip_address":"","comment_id":318352,"utype":1}],"discussion_count":1,"race_medal":0,"score":"27405058436","product_id":100094901,"comment_content":"海老师，请教既然有虚拟内存机制，为何程序仍然可能出现out of memory运行错误，是因为物理内存不够了，但能利用局部性原理在物理内存中只放入一定数据不超出限制吗","like_count":6,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529202,"discussion_content":"因为虚拟地址也有耗尽的可能呀。物理内存不够了，可以把不活跃页面往磁盘的swap区域放，但swap区域也有不够用的可能，这就是物理内存耗尽的情况。3G的用户空间，一次性要申请4G的空间，虚拟地址就不够用了。所以说，虚拟地址只是编织了一个很大地址的假象，其物理空间该耗尽的还是会耗尽。所以要记住不管什么时候，能释放的内存尽量释放总是一个好习惯。","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1635309219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":324676,"user_name":"dog_brother","can_delete":false,"product_type":"c1","uid":1619597,"ip_address":"","ucode":"9F64D3C6D815FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er6OV33jHia3U9LYlZEx2HrpsELeh3KMlqFiaKpSAaaZeBttXRAVvDXUgcufpqJ60bJWGYGNpT7752w/132","comment_is_top":false,"comment_ctime":1638538839,"is_pvip":true,"replies":[{"id":"117859","content":"是的。每个进程都有自己的页表。进程有自己的进程控制块，这是一个结构体，它里面记录了进程的页目录表的地址。当进程切换的时候，就会把目标进程的页目录表送到cr3寄存器。所以在任一时刻，只有一个进程页表是活跃的。","user_name":"作者回复","user_name_real":"编辑","uid":"1360512","ctime":1638719908,"ip_address":"","comment_id":324676,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18818408023","product_id":100094901,"comment_content":"老师好，每个进程都有页目录表和页表，每个 CPU 都有一个页目录基址寄存器。我的问题是，页目录基址寄存器可以保存多少个页目录基址呀？","like_count":4,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536239,"discussion_content":"是的。每个进程都有自己的页表。进程有自己的进程控制块，这是一个结构体，它里面记录了进程的页目录表的地址。当进程切换的时候，就会把目标进程的页目录表送到cr3寄存器。所以在任一时刻，只有一个进程页表是活跃的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1638719908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319562,"user_name":"Linuxer","can_delete":false,"product_type":"c1","uid":1153978,"ip_address":"","ucode":"272D9D8089C3D6","user_header":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","comment_is_top":false,"comment_ctime":1635850530,"is_pvip":false,"replies":[{"id":"115867","content":"1. 每个进程都有一个管理结构，在linux中就是task_struct，它会记录页表的起始地址:pgdir，然后每次进程切换时都会把目标的页表起始地址送入CR3寄存器。<br>2. 进程自己是不知道的，但是内核知道。内核管理着全部的物理内存，哪一块分配给谁，它是非常清楚的。用于管理物理内存的结构叫做mem_map，如果有兴趣的话可以自己查一下。","user_name":"作者回复","user_name_real":"海纳","uid":"1360512","ctime":1635924854,"ip_address":"","comment_id":319562,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18815719714","product_id":100094901,"comment_content":"有两个问题请教:<br>1. 不同进程页表起始地址存哪呢？<br>2. 一个物理页面分配给了一个进程，另一个进程怎么掌握这个信息呢？","like_count":4,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529673,"discussion_content":"1. 每个进程都有一个管理结构，在linux中就是task_struct，它会记录页表的起始地址:pgdir，然后每次进程切换时都会把目标的页表起始地址送入CR3寄存器。\n2. 进程自己是不知道的，但是内核知道。内核管理着全部的物理内存，哪一块分配给谁，它是非常清楚的。用于管理物理内存的结构叫做mem_map，如果有兴趣的话可以自己查一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635924854,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1153978,"avatar":"https://static001.geekbang.org/account/avatar/00/11/9b/ba/333b59e5.jpg","nickname":"Linuxer","note":"","ucode":"272D9D8089C3D6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411864,"discussion_content":"感谢老师回复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636021689,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318705,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1635398065,"is_pvip":true,"replies":[{"id":"115529","content":"因为虚拟地址是程序员要打交道的地址。程序员操作寄存器，寄存器的位宽能放32位的指针，这就表示能表示的范围是0到4G。也就是32位机器上，最大能表示的地址是4G。这不就是位宽决定了空间大小么？","user_name":"作者回复","user_name_real":"氦钠锶","uid":"1360512","ctime":1635401769,"ip_address":"","comment_id":318705,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18815267249","product_id":100094901,"comment_content":"虚拟地址空间往往与机器字宽有关系<br>-----------------<br>为什么要有这一层关系呢？","like_count":4,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529352,"discussion_content":"因为虚拟地址是程序员要打交道的地址。程序员操作寄存器，寄存器的位宽能放32位的指针，这就表示能表示的范围是0到4G。也就是32位机器上，最大能表示的地址是4G。这不就是位宽决定了空间大小么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635401769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2837328,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/4b/50/fae00aff.jpg","nickname":"HollyWong","note":"","ucode":"03A66A2BCC0A58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413688,"discussion_content":"地址每增加一位，寻址能力增加一倍（二进制世界）。所以地址空间和字宽有关吗，是2^n关系，68位机器并没有全用，理论上他有2^64虚拟地址空间，但目前只用了后48位来映射。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636544511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318219,"user_name":"小北","can_delete":false,"product_type":"c1","uid":1282648,"ip_address":"","ucode":"3A23079E4AA92E","user_header":"https://static001.geekbang.org/account/avatar/00/13/92/58/b4f6365d.jpg","comment_is_top":false,"comment_ctime":1635209915,"is_pvip":false,"replies":[{"id":"115751","content":"后边的已经在慢慢调整了：）","user_name":"作者回复","user_name_real":"海纳","uid":"1360512","ctime":1635737023,"ip_address":"","comment_id":318219,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18815079099","product_id":100094901,"comment_content":"语速稍微快了点","like_count":4,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529141,"discussion_content":"后边的已经在慢慢调整了：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635737023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1012163,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/71/c3/09e22c1d.jpg","nickname":"大卫李","note":"","ucode":"CFEB849481BCB3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408428,"discussion_content":"同意，忍不住想暂停想一会","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635246985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318197,"user_name":"牧野","can_delete":false,"product_type":"c1","uid":1372185,"ip_address":"","ucode":"8F3B90C4462DE0","user_header":"https://static001.geekbang.org/account/avatar/00/14/f0/19/9d754804.jpg","comment_is_top":false,"comment_ctime":1635180377,"is_pvip":false,"replies":[{"id":"115386","content":"不是，程序是按需加载的。尚未用到的和已经用不到了的，就会被换出去。虚拟内存可以帮你做出一个假象：你感觉虚拟内存空间随时可以访问，但真实数据可能不在物理内存里，你需要的时候才重新做虚拟内存到物理内存的映射。","user_name":"作者回复","user_name_real":"氦钠锶","uid":"1360512","ctime":1635216526,"ip_address":"","comment_id":318197,"utype":1}],"discussion_count":2,"race_medal":0,"score":"18815049561","product_id":100094901,"comment_content":"&lt;无论一个进程占用的内存资源有多大，在任一时刻，它需要的物理内存都是很少的&gt;   这句话没看懂,进程程序本身不就在内存中吗","like_count":4,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529136,"discussion_content":"不是，程序是按需加载的。尚未用到的和已经用不到了的，就会被换出去。虚拟内存可以帮你做出一个假象：你感觉虚拟内存空间随时可以访问，但真实数据可能不在物理内存里，你需要的时候才重新做虚拟内存到物理内存的映射。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1635216526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2837328,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/4b/50/fae00aff.jpg","nickname":"HollyWong","note":"","ucode":"03A66A2BCC0A58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413690,"discussion_content":"就是内存扩展里面的不分装入，用那装那。不用的换出去，留给要用的（swap in/out）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636544703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318392,"user_name":"D","can_delete":false,"product_type":"c1","uid":1027596,"ip_address":"","ucode":"5BB4D16FE39BFF","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ae/0c/f39f847a.jpg","comment_is_top":false,"comment_ctime":1635289156,"is_pvip":false,"replies":[{"id":"115485","content":"你说得非常对。我们会在第14课详细地介绍存储体系结构，就把这个问题说清楚了。在这之前，我们不会引入这些概念，是为了让大家关注虚拟地址这个概念就好了，过多的概念会给大家造成困扰。在必要的时刻我们肯定会细化修正概念的，就像从相对论的角度看，牛顿力学的表述也有很多不严谨的地方。学习的过程就是从不全面到全面的过程。非常感谢！","user_name":"作者回复","user_name_real":"氦钠锶","uid":"1360512","ctime":1635308880,"ip_address":"","comment_id":318392,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14520191044","product_id":100094901,"comment_content":"“CPU 运算的数据都是存储在主存里的。”， 这句话不是太准确啊，CPU 不是直接从主存拿数据啊，中间还有寄存器，高速缓存啊。","like_count":3,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529222,"discussion_content":"你说得非常对。我们会在第14课详细地介绍存储体系结构，就把这个问题说清楚了。在这之前，我们不会引入这些概念，是为了让大家关注虚拟地址这个概念就好了，过多的概念会给大家造成困扰。在必要的时刻我们肯定会细化修正概念的，就像从相对论的角度看，牛顿力学的表述也有很多不严谨的地方。学习的过程就是从不全面到全面的过程。非常感谢！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635308880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1934802,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/85/d2/045c63fb.jpg","nickname":"王建新","note":"","ucode":"E3151DDC0EEF0D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411264,"discussion_content":"难道你觉得老师可能不知道吗？大哥 这问题大一学生也知道吧，你在显摆你吗","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1635868538,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1027596,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ae/0c/f39f847a.jpg","nickname":"D","note":"","ucode":"5BB4D16FE39BFF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408809,"discussion_content":"谢谢老师的回复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635326635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332235,"user_name":"Insomnia","can_delete":false,"product_type":"c1","uid":1751214,"ip_address":"","ucode":"5986A48988D6E3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/ae/085484e7.jpg","comment_is_top":false,"comment_ctime":1643102621,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10233037213","product_id":100094901,"comment_content":"老师，请教一个问题，kafka 中使用顺序写，这样消费者在读的时候充分利用了PageCache红利以提高机械盘的读写能力。<br>我在看它写文件的源码时，它使用了Java 的filechannel的write 底层使用了OS 的pwrite来写，但我不理解的是数据落到pagecache后，是由OS来控制落盘的，怎么能确保在磁盘上是一定落在连续的扇区的呢？如果不连续，那么读的时候不还是会发生缺页中断么？","like_count":2,"discussions":[{"author":{"id":2019536,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/d0/d0/a6c6069d.jpg","nickname":"坚","note":"","ucode":"C02AB1CDE39D1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555891,"discussion_content":"大哥，内存空间是否连续和磁盘空间是否连续是没有关联的，写文件写在连续的磁盘空间是由文件系统决定的，比如ext4等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647093449,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320290,"user_name":"张Dave","can_delete":false,"product_type":"c1","uid":2440338,"ip_address":"","ucode":"0E8B6FDEB7505B","user_header":"https://static001.geekbang.org/account/avatar/00/25/3c/92/81fa306d.jpg","comment_is_top":false,"comment_ctime":1636203620,"is_pvip":true,"replies":[{"id":"116154","content":"64位的PDE和PTE都是8字节的，所以一页之中，只能存放512页，只需要9位就可以编码了。所以它的地址会被分割成9位，9位，9位和12位四段。一共是48位。因为当前的64位系统也只使用了低48位。未来也有可能还会继续扩展。","user_name":"作者回复","user_name_real":"海纳","uid":"1360512","ctime":1636279687,"ip_address":"","comment_id":320290,"utype":1}],"discussion_count":3,"race_medal":0,"score":"10226138212","product_id":100094901,"comment_content":"一个 32 位的虚拟地址可以拆成 10 位，10 位和 12 位三段。<br>那64位系统的4级分段，这个位数是怎么分配的呢？","like_count":2,"discussions":[{"author":{"id":1299694,"avatar":"https://static001.geekbang.org/account/avatar/00/13/d4/ee/92b9bd3d.jpg","nickname":"深云","note":"","ucode":"1F17ADF551A87D","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":414689,"discussion_content":"是不是应该分为5段? 9 9 9 9 12","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1636859654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529941,"discussion_content":"64位的PDE和PTE都是8字节的，所以一页之中，只能存放512页，只需要9位就可以编码了。所以它的地址会被分割成9位，9位，9位和12位四段。一共是48位。因为当前的64位系统也只使用了低48位。未来也有可能还会继续扩展。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636279687,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1289305,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ac/59/ca3fbc72.jpg","nickname":"学习一下","note":"","ucode":"21BE7E62CECD44","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":583065,"discussion_content":"64位机器上是分为9+9+9+9+12，这5段嘛？那按照文章查找物理内存步骤，算上第一步确认基地址，不是要查6次嘛？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659893201,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":529941,"ip_address":"广东"},"score":583065,"extra":""}]}]},{"had_liked":false,"id":318283,"user_name":"Geek_fd760d","can_delete":false,"product_type":"c1","uid":1453388,"ip_address":"","ucode":"03382EF49D900F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eorbckvhLliahdDbuorLB5E1NhQddskOybChBic2Kf9FmF3Vr0aQnrmCT2JwVADWY3iapkRbXDmKI6gQ/132","comment_is_top":false,"comment_ctime":1635229982,"is_pvip":false,"replies":[{"id":"115430","content":"在第三节课我们会介绍堆和栈的区别，然后分开介绍这两块内存区域。栈上的变量会“回收”，堆上的则不会。自己申请的要自己释放。这里只能这么简短地回答你。更详细的答案你可以在后面的课程里找到的。","user_name":"作者回复","user_name_real":"氦钠锶","uid":"1360512","ctime":1635238187,"ip_address":"","comment_id":318283,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10225164574","product_id":100094901,"comment_content":"如果一个程序在运行中因为调用一个函数需要分配很大的虚拟内存，函数运行结束后，这些分配的虚拟内存也会回收吗？什么时候回收？","like_count":2,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529169,"discussion_content":"在第三节课我们会介绍堆和栈的区别，然后分开介绍这两块内存区域。栈上的变量会“回收”，堆上的则不会。自己申请的要自己释放。这里只能这么简短地回答你。更详细的答案你可以在后面的课程里找到的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635238187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318205,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1635206516,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10225141108","product_id":100094901,"comment_content":"吊打面试官，很喜欢","like_count":2},{"had_liked":false,"id":329151,"user_name":"牙齿天天晒太阳","can_delete":false,"product_type":"c1","uid":2817633,"ip_address":"","ucode":"319289611BE05B","user_header":"https://static001.geekbang.org/account/avatar/00/2a/fe/61/2ee87c68.jpg","comment_is_top":false,"comment_ctime":1641183157,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5936150453","product_id":100094901,"comment_content":"你可以看到，i7 处理器的页表也是存储在内存页里的，每个页表项都是 4 字节。所以，人们就将 1024 个页表项组成一张页表。这样一张页表的大小就刚好是 4K，占据一个内存页，这样就更加方便管理。而且，当前市场上主流的处理器也都选择将页大小定为 4K。<br>=======================<br>为什么每个页表项都是 4 字节？","like_count":1},{"had_liked":false,"id":320627,"user_name":"小苗晓雪","can_delete":false,"product_type":"c1","uid":1334583,"ip_address":"","ucode":"B15FDF455853D2","user_header":"https://static001.geekbang.org/account/avatar/00/14/5d/37/061e7fac.jpg","comment_is_top":false,"comment_ctime":1636427154,"is_pvip":true,"replies":[{"id":"116321","content":"这样吧，我们考虑一个极端情况：每一条指令访问的内存都相隔很远。计算机一样能处理这种情况的。它只要把当前页面换出到磁盘的swap区域，然后再把要访问的内存加载进来就行了。那我们就观察到了计算机只用了一页物理内存支撑了所有的程序。只不过每一条指令都要执行换页，性能太差而已。但实际上，因为时间局部性的空间局部性，相邻指令往往访问的内存地址都不会相隔很远。所以换页也就没有那么频繁。你最后举的那个例子就是这样的。因为不可能有哪一条指令一次访问16G内存的。它访问到哪里，再把哪里调入物理内存就行了。其他用不到的地方就可以先放在磁盘里存着。","user_name":"作者回复","user_name_real":"海纳","uid":"1360512","ctime":1636507725,"ip_address":"","comment_id":320627,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5931394450","product_id":100094901,"comment_content":"1.请问老师是如何从空间局部性与时间局部性得到 &quot;无论一个进程占用的内存资源有多大，在任一时刻，它需要的物理内存都是很少的&quot; 这个结论的啊?  <br>是不是任意时刻体现了时间局部性 , 那凭什么说某个进程访问一段内存 那么他附近的位置也很可能即将被访问就可以得到这个进程所需的物理内存很少这个结论啊?<br>难道说一段内存 0x100到0x200 这段内存能反复被一个进程访问啊? 一个进程 所需 4 个 G 那难道这 4 个 G 能反复映射到 0x100 到 0x200 这段位置啊? <br>我有点不太理解 , 比如我运行某个代码编辑器 , 这个 编辑器 占用了 16 个 G 的内存 , 难道我电脑内存只有 8 个 G 也能让它跑起来么? 如果真是能跑起来是不是就说这个内存的某些区段是反复被我的这个编辑器使用的? ","like_count":1,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530068,"discussion_content":"这样吧，我们考虑一个极端情况：每一条指令访问的内存都相隔很远。计算机一样能处理这种情况的。它只要把当前页面换出到磁盘的swap区域，然后再把要访问的内存加载进来就行了。那我们就观察到了计算机只用了一页物理内存支撑了所有的程序。只不过每一条指令都要执行换页，性能太差而已。但实际上，因为时间局部性的空间局部性，相邻指令往往访问的内存地址都不会相隔很远。所以换页也就没有那么频繁。你最后举的那个例子就是这样的。因为不可能有哪一条指令一次访问16G内存的。它访问到哪里，再把哪里调入物理内存就行了。其他用不到的地方就可以先放在磁盘里存着。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1636507725,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1334583,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5d/37/061e7fac.jpg","nickname":"小苗晓雪","note":"","ucode":"B15FDF455853D2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413612,"discussion_content":"谢谢老师的回复 , 我看到最后了解了 , 看到中间的时候看不下去了 , 卡住了就老自己琢磨 , 我下次应该看完一章再提问;\n原来是通过 临时的 swap 区域来进行页面的换入换出 , 从而让256T 的虚拟内存都能在当时用到的那一刻及时映射到那块对应的区域~","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636526011,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318737,"user_name":"流浪地球","can_delete":false,"product_type":"c1","uid":1498137,"ip_address":"","ucode":"25210DCD353F97","user_header":"https://static001.geekbang.org/account/avatar/00/16/dc/19/c058bcbf.jpg","comment_is_top":false,"comment_ctime":1635408169,"is_pvip":false,"replies":[{"id":"115582","content":"今天晚上更新第三节课就清楚了。应该是256T。但是其中高128T被操作系统内核占用了。所以用户可用的就剩下低128T了。","user_name":"作者回复","user_name_real":"氦钠锶","uid":"1360512","ctime":1635431617,"ip_address":"","comment_id":318737,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5930375465","product_id":100094901,"comment_content":"请问老师每个进程可以使用的虚拟内存空间是128T还是256T呢？课程中一开始讲是128t，后面讲64位寻址空间是256t，有点迷惑","like_count":1,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529363,"discussion_content":"今天晚上更新第三节课就清楚了。应该是256T。但是其中高128T被操作系统内核占用了。所以用户可用的就剩下低128T了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635431617,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318135,"user_name":"李二木","can_delete":false,"product_type":"c1","uid":1103091,"ip_address":"","ucode":"30E03BB84ADB27","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/f3/129d6dfe.jpg","comment_is_top":false,"comment_ctime":1635159762,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5930127058","product_id":100094901,"comment_content":"虚拟内存是为了解决直接操作物理内存的系统无法支持多进程的问题","like_count":1,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408140,"discussion_content":"Good，其实作用很多，这是其中一个重要的好处，还包括了很好的安全性，更大的可用空间等等。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1635176795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359393,"user_name":"月歌","can_delete":false,"product_type":"c1","uid":1144218,"ip_address":"江苏","ucode":"EC46401A1F91FC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/D4KnXmgkeITtk6ibZvIKDMD0ga7aVibNyaQbYicqJZRNtibrQnMEmKsCttEPLA6oJl0qlBMhvZb4PticpKOOibOL5oibQ/132","comment_is_top":false,"comment_ctime":1665492948,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1665492948","product_id":100094901,"comment_content":"老师可以留个邮箱嘛 有问题想发邮件请教下","like_count":0},{"had_liked":false,"id":353890,"user_name":"学习一下","can_delete":false,"product_type":"c1","uid":1289305,"ip_address":"广东","ucode":"21BE7E62CECD44","user_header":"https://static001.geekbang.org/account/avatar/00/13/ac/59/ca3fbc72.jpg","comment_is_top":false,"comment_ctime":1659893723,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1659893723","product_id":100094901,"comment_content":"请问有程序局部性的相关资料嘛？程序局部性是一个现象，是统计得出的结论，还是推理得出的结论呢？想了解一下这个基础论据的更多信息 ，谢谢。","like_count":0},{"had_liked":false,"id":347744,"user_name":"edward","can_delete":false,"product_type":"c1","uid":1604798,"ip_address":"","ucode":"09F7A5B8D2E7BD","user_header":"","comment_is_top":false,"comment_ctime":1654393444,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1654393444","product_id":100094901,"comment_content":"这个设计真是巧妙！","like_count":0},{"had_liked":false,"id":341026,"user_name":"程序员班吉","can_delete":false,"product_type":"c1","uid":1478098,"ip_address":"","ucode":"BD48CF7649609A","user_header":"https://static001.geekbang.org/account/avatar/00/16/8d/d2/8a6be8d8.jpg","comment_is_top":false,"comment_ctime":1649300800,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1649300800","product_id":100094901,"comment_content":"一直有一个困惑，golang的协程被调度到不同进程的时候，堆上的内存是如何在多个协程之间扭转的？","like_count":0},{"had_liked":false,"id":341022,"user_name":"炮灰","can_delete":false,"product_type":"c1","uid":1622007,"ip_address":"","ucode":"45A24460D8D195","user_header":"https://static001.geekbang.org/account/avatar/00/18/bf/f7/691a9200.jpg","comment_is_top":false,"comment_ctime":1649299852,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649299852","product_id":100094901,"comment_content":"老师，请问x86架构为什么还要保证与8086的兼容呢？我知道后面是会进入保护模式，运行的是新架构下的指令集，那么为什么要一上电还是运行16位字长的指令呢？","like_count":0},{"had_liked":false,"id":338519,"user_name":"Geek2251","can_delete":false,"product_type":"c1","uid":2845608,"ip_address":"","ucode":"DD24A30F5FC57D","user_header":"","comment_is_top":false,"comment_ctime":1647535267,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1647535267","product_id":100094901,"comment_content":"请问老师，关于页面换出的描述:”那对于那些没有被经常使用到的内存，我们可以把它换出到主存之外，比如硬盘上的 swap 区域”。这里所说的”没有经常使用到的内存”是怎么界定的？是操作系统的一种算法？还是进程映射的page超过一定数量后把老的page换出？","like_count":0},{"had_liked":false,"id":331748,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1642748918,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"1642748918","product_id":100094901,"comment_content":"老师和各位大神，这块点想不明白，“上一步找到的页目录表基址加上高 10 位的值乘以 4”，为什么要乘以4，能解释下或者举个例子不😂","like_count":0,"discussions":[{"author":{"id":1107484,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/1c/9d3744ee.jpg","nickname":"小李讲源码","note":"","ucode":"2573037D7C82C8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558475,"discussion_content":"其实你理解为左移两位就好了，因为一页是4k，每个页中存4个字节，也就是2的12次方➗2的2次方，就是2的10次方，对应的就是高10位或者中间的10位。逆向操作就获取到10位，然后左移两位，就能确定对应页表中的位置了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648340955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2150023,"avatar":"https://static001.geekbang.org/account/avatar/00/20/ce/87/41c44923.jpg","nickname":"会爆炸的小米Note","note":"","ucode":"1DA0B740A7C7B7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":554561,"discussion_content":"把它当成int类型的数组就好了 页表项就相当于数组中的元素 每个大小是4个字节 如果你想找到a[n]的地址 就是起始地址a+n*sizeof(int)  ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646466999,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1930406,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/74/a6/734d77e8.jpg","nickname":"Xing","note":"","ucode":"1D6D058FA2E1DE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550586,"discussion_content":"PDE的位置(PA) = base address(PA) + index(VA中高10位的值, 代表是page dir中的第几项) * 4 byte(每一个PDE大小为4byte)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644624556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330947,"user_name":"幼儿园的风车","can_delete":false,"product_type":"c1","uid":1076113,"ip_address":"","ucode":"1077C7BE3DC832","user_header":"https://static001.geekbang.org/account/avatar/00/10/6b/91/c7f1f0a2.jpg","comment_is_top":false,"comment_ctime":1642321354,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642321354","product_id":100094901,"comment_content":"手机操作系统没有swap吧？","like_count":0},{"had_liked":false,"id":330876,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1642239909,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642239909","product_id":100094901,"comment_content":"记录：<br><br>1. 不同进程页表起始地址存哪呢？<br>2. 一个物理页面分配给了一个进程，另一个进程怎么掌握这个信息呢？<br>作者回复: 1. 每个进程都有一个管理结构，在 linux 中就是 task_struct，它会记录页表的起始地址:pgdir，然后每次进程切换时都会把目标的页表起始地址送入 CR3 寄存器。<br>2. 进程自己是不知道的，但是内核知道。内核管理着全部的物理内存，哪一块分配给谁，它是非常清楚的。用于管理物理内存的结构叫做 mem_map，如果有兴趣的话可以自己查一下。","like_count":0},{"had_liked":false,"id":330874,"user_name":"黑色毛衣","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/31b0cf2f.jpg","comment_is_top":false,"comment_ctime":1642239808,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642239808","product_id":100094901,"comment_content":"记录：一个 32 位的虚拟地址可以拆成 10 位，10 位和 12 位三段。<br>那 64 位系统的 4 级分段，这个位数是怎么分配的呢？<br><br>作者回复: 64 位的 PDE 和 PTE 都是 8 字节的，所以一页之中，只能存放 512 页，只需要 9 位就可以编码了。所以它的地址会被分割成 9 位，9 位，9 位和 12 位四段。一共是 48 位。因为当前的 64 位系统也只使用了低 48 位。未来也有可能还会继续扩展。","like_count":0},{"had_liked":false,"id":330599,"user_name":"ChenJZ","can_delete":false,"product_type":"c1","uid":1123518,"ip_address":"","ucode":"50DF1CFB41C90D","user_header":"https://static001.geekbang.org/account/avatar/00/11/24/be/19c9d3e1.jpg","comment_is_top":false,"comment_ctime":1642064676,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1642064676","product_id":100094901,"comment_content":"为什么共享库分成了三个<br>0034b000-004ae000 r-xp 00000000 fd:00 852734     &#47;lib&#47;libc-2.8.so<br>004ae000-004b0000 r--p 00163000 fd:00 852734     &#47;lib&#47;libc-2.8.so<br>004b0000-004b1000 rw-p 00165000 fd:00 852734     &#47;lib&#47;libc-2.8.so<br>其中的004ae000-004b0000 r--p 00163000 fd:00 852734     &#47;lib&#47;libc-2.8.so还是不能理解","like_count":0,"discussions":[{"author":{"id":2019536,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/d0/d0/a6c6069d.jpg","nickname":"坚","note":"","ucode":"C02AB1CDE39D1A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555893,"discussion_content":"看看首尾地址就知道了，虚拟地址还是连续的，为什么不写成一个就不知道了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647093675,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330108,"user_name":"=","can_delete":false,"product_type":"c1","uid":2600127,"ip_address":"","ucode":"104232A8292220","user_header":"https://static001.geekbang.org/account/avatar/00/27/ac/bf/f549183e.jpg","comment_is_top":false,"comment_ctime":1641800371,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641800371","product_id":100094901,"comment_content":"这节课让我理解了虚拟内存到物理内存的多级页表映射，之前也看过多级页表映射，但是一直没搞清楚，海老师的这节课让我明白了原理。感谢老师的这篇文章。","like_count":0},{"had_liked":false,"id":327071,"user_name":"Insomnia","can_delete":false,"product_type":"c1","uid":1751214,"ip_address":"","ucode":"5986A48988D6E3","user_header":"https://static001.geekbang.org/account/avatar/00/1a/b8/ae/085484e7.jpg","comment_is_top":false,"comment_ctime":1639902151,"is_pvip":false,"replies":[{"id":"118967","content":"这个不一定哦。这个要看编译器是怎么优化的，有可能完全不写入的。","user_name":"作者回复","user_name_real":"编辑","uid":"1360512","ctime":1639928433,"ip_address":"","comment_id":327071,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639902151","product_id":100094901,"comment_content":"老师，val a=f(x), val b=f(a) 和 val b=f(f(x)) ，在操作系统层面，后面链式调用的函数中的中间结果a会被写入主存么？","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540057,"discussion_content":"这个不一定哦。这个要看编译器是怎么优化的，有可能完全不写入的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639928433,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326693,"user_name":"Zombie","can_delete":false,"product_type":"c1","uid":1811297,"ip_address":"","ucode":"1102FB31E2096E","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a3/61/5fbfe632.jpg","comment_is_top":false,"comment_ctime":1639632421,"is_pvip":false,"replies":[{"id":"118964","content":"有一些服务端开发的经验会是最合适的。或者是科班的同学，在学习完计算机组成，操作系统课以后再学习这个专栏会更容易形成体系。","user_name":"作者回复","user_name_real":"编辑","uid":"1360512","ctime":1639928133,"ip_address":"","comment_id":326693,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1639632421","product_id":100094901,"comment_content":"完了 听不大懂   需要先去看点什么 再来看这个课程","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540054,"discussion_content":"有一些服务端开发的经验会是最合适的。或者是科班的同学，在学习完计算机组成，操作系统课以后再学习这个专栏会更容易形成体系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639928133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1107484,"avatar":"https://static001.geekbang.org/account/avatar/00/10/e6/1c/9d3744ee.jpg","nickname":"小李讲源码","note":"","ucode":"2573037D7C82C8","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558478,"discussion_content":"可以看一下陈莉君的linux操作系统原理与应用的第二章，再回头看老师这篇文章就很透彻了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648341253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326466,"user_name":"稽山的柚子","can_delete":false,"product_type":"c1","uid":1546579,"ip_address":"","ucode":"E19BCF4604CBB9","user_header":"","comment_is_top":false,"comment_ctime":1639535810,"is_pvip":false,"replies":[{"id":"118969","content":"可能是在硬盘上，比如文件。也可能是申请了，还没访问过，比如new一个大数组，但还没初始化之前。","user_name":"作者回复","user_name_real":"编辑","uid":"1360512","ctime":1639928580,"ip_address":"","comment_id":326466,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639535810","product_id":100094901,"comment_content":"老师  还有一个问题请教，虚拟内存有未映射页面的概念，那未映射的页面内的数据存放在哪里呢？","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540060,"discussion_content":"可能是在硬盘上，比如文件。也可能是申请了，还没访问过，比如new一个大数组，但还没初始化之前。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639928580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326326,"user_name":"稽山的柚子","can_delete":false,"product_type":"c1","uid":1546579,"ip_address":"","ucode":"E19BCF4604CBB9","user_header":"","comment_is_top":false,"comment_ctime":1639471064,"is_pvip":false,"replies":[{"id":"118503","content":"以32位举例吧，虚拟空间的地址范围是0~4G。那么这一段空间中的每一个4K页都是一个虚拟页。","user_name":"作者回复","user_name_real":"编辑","uid":"1360512","ctime":1639488276,"ip_address":"","comment_id":326326,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1639471064","product_id":100094901,"comment_content":"页表的本质是页表项 (Page Table Entry, PTE) 的数组，虚拟空间中的每一个页在页表中都有一个 PTE 与之对应<br><br>请问老师，&quot;虚拟空间中的每一个页&quot; 这里的页是指什么页呢？","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538694,"discussion_content":"以32位举例吧，虚拟空间的地址范围是0~4G。那么这一段空间中的每一个4K页都是一个虚拟页。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639488276,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1546579,"avatar":"","nickname":"稽山的柚子","note":"","ucode":"E19BCF4604CBB9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":538701,"discussion_content":"那这个和物理内存中的内存页4k能理解成都是分页管理所需要用到的么？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639488812,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":538694,"ip_address":""},"score":538701,"extra":""}]}]},{"had_liked":false,"id":325804,"user_name":"Geek_091ae4","can_delete":false,"product_type":"c1","uid":2839882,"ip_address":"","ucode":"5F27328083DA9D","user_header":"","comment_is_top":false,"comment_ctime":1639139421,"is_pvip":false,"replies":[{"id":"118511","content":"是的。内核会保证这一点。每个进程的控制块里都会记录自己的页目录的地址，切换进程时，把目标进程的录目录基址送入CR3寄存器即可。","user_name":"作者回复","user_name_real":"编辑","uid":"1360512","ctime":1639489182,"ip_address":"","comment_id":325804,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639139421","product_id":100094901,"comment_content":"请问老师，每个进程的页表不一致，是由内核保证的吗，它们如何做到不同进程间的页表不一致呢？","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":538703,"discussion_content":"是的。内核会保证这一点。每个进程的控制块里都会记录自己的页目录的地址，切换进程时，把目标进程的录目录基址送入CR3寄存器即可。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639489182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325659,"user_name":"ZR2021","can_delete":false,"product_type":"c1","uid":1707352,"ip_address":"","ucode":"4F685C7516F057","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","comment_is_top":false,"comment_ctime":1639064068,"is_pvip":false,"replies":[{"id":"118161","content":"1. 是的，要打开swap区域才行，swap和内存泄漏没有关系啊，这是操作系统的能力，不用你操心。<br>2. 是的，每个进程都有自己的页表。所以进程切换要把自己的页目录基址送到CR3寄存器。","user_name":"作者回复","user_name_real":"编辑","uid":"1360512","ctime":1639106562,"ip_address":"","comment_id":325659,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1639064068","product_id":100094901,"comment_content":"老师，那个换入换出的前提是得开swap分区的吧，但是swap分区开的一般比较少吧，就怕有内存泄漏问题;还有，不同进程的虚拟地址范围都一样，所以不同进程的页表实际上只有那个cr3的页目录基址不一样吧？","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537571,"discussion_content":"1. 是的，要打开swap区域才行，swap和内存泄漏没有关系啊，这是操作系统的能力，不用你操心。\n2. 是的，每个进程都有自己的页表。所以进程切换要把自己的页目录基址送到CR3寄存器。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639106562,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1707352,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKwGurTWOiaZ2O2oCdxK9kbF4PcwGg0ALqsWhNq87hWvwPy8ZU9cxRzmcGOgdIeJkTOoKfbxgEKqrg/132","nickname":"ZR2021","note":"","ucode":"4F685C7516F057","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":537591,"discussion_content":"好的，谢谢老师，还有个问题，就是进程切换分为用户态切换和内核态切换，我理解的用户态切换实际上就是切换下用户态内存空间，如果只是赋值一个寄存器的值，应该消耗性能不大的吧？难道是新进程的页表在内存里要加载到tlb 中，所以性能低吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639108888,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":537571,"ip_address":""},"score":537591,"extra":""}]},{"author":{"id":2839104,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/52/40/1fe5be2b.jpg","nickname":"联通","note":"","ucode":"EAA1331CFAFDA3","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550634,"discussion_content":"打开swap交换不利于对计算机内存资源的控制，例如在容器中利用mem cgroup控制一个进程的内存资源","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644648892,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2839882,"avatar":"","nickname":"Geek_091ae4","note":"","ucode":"5F27328083DA9D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537676,"discussion_content":"mark","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639139135,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":325249,"user_name":"侠客行","can_delete":false,"product_type":"c1","uid":2863458,"ip_address":"","ucode":"7474E534F6D556","user_header":"https://static001.geekbang.org/account/avatar/00/2b/b1/62/c00ccbb5.jpg","comment_is_top":false,"comment_ctime":1638878567,"is_pvip":false,"replies":[{"id":"118072","content":"耐心学到第10课，理解了fork的原理以后，这个问题你就会了。","user_name":"作者回复","user_name_real":"编辑","uid":"1360512","ctime":1638952001,"ip_address":"","comment_id":325249,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638878567","product_id":100094901,"comment_content":"请问老师，我们的进程是如何提交给操作系统让它进行映射的呢？谢谢老师！","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537084,"discussion_content":"耐心学到第10课，理解了fork的原理以后，这个问题你就会了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638952001,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":323878,"user_name":"*回眸*·wdlcoke","can_delete":false,"product_type":"c1","uid":1499362,"ip_address":"","ucode":"8D5ECCD274601F","user_header":"https://static001.geekbang.org/account/avatar/00/16/e0/e2/6054de3f.jpg","comment_is_top":false,"comment_ctime":1638191853,"is_pvip":true,"replies":[{"id":"117638","content":"呃。这个说法问题太多了。他把虚拟内存和swap混为一谈。这是两种不同的机制。我们的课程里并没有对页面换出着墨过多。我觉得先搞明白虚拟内存，然后再去看换页机制吧。","user_name":"作者回复","user_name_real":"编辑","uid":"1360512","ctime":1638327514,"ip_address":"","comment_id":323878,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1638191853","product_id":100094901,"comment_content":" 我是小白：请问老师这种说法对？<br>     电脑中所运行的程序均需经由内存执行，若执行的程序占用内存很大或很多，则会导致内存消耗殆尽。为解决该问题，Windows中运用了虚拟内存技术，即匀出一部分硬盘空间来充当内存使用。当内存耗尽时，电脑就会自动调用硬盘来充当内存，以缓解内存的紧张","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":534981,"discussion_content":"呃。这个说法问题太多了。他把虚拟内存和swap混为一谈。这是两种不同的机制。我们的课程里并没有对页面换出着墨过多。我觉得先搞明白虚拟内存，然后再去看换页机制吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638327514,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319664,"user_name":"kylin","can_delete":false,"product_type":"c1","uid":1351248,"ip_address":"","ucode":"3588B62A4F9534","user_header":"https://static001.geekbang.org/account/avatar/00/14/9e/50/21e0beca.jpg","comment_is_top":false,"comment_ctime":1635904725,"is_pvip":true,"replies":[{"id":"115854","content":"首先你理解页表就是个数组，对吧？那每个进程有自己的数组不就解决问题了吗？进程只要记住自己的页表的起始地址就行了。","user_name":"作者回复","user_name_real":"海纳","uid":"1360512","ctime":1635920988,"ip_address":"","comment_id":319664,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635904725","product_id":100094901,"comment_content":"感谢海纳老师的分享，刚刚在分析CPU如何利用MMU根据页表通过虚拟内存计算物理内存的过程中，有一个疑惑，就是如果两个进程的虚拟内存地址一样，那不就映射到相同的物理内存了吗？后面看了评论才清楚原来每个进程都会在自己的内存空间维护一个多级页表，不同进程的页表是独立且不同的。那请问海纳老师，进程是怎样在建立页表的时候保证独立于其它进程的页表呢？","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529713,"discussion_content":"首先你理解页表就是个数组，对吧？那每个进程有自己的数组不就解决问题了吗？进程只要记住自己的页表的起始地址就行了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635920988,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2837328,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/4b/50/fae00aff.jpg","nickname":"HollyWong","note":"","ucode":"03A66A2BCC0A58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413698,"discussion_content":"段表和页表对用户进程是透明的，不可见的，他是有OS维护的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636545453,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319578,"user_name":"我是内存","can_delete":false,"product_type":"c1","uid":1711838,"ip_address":"","ucode":"3D763D4F434D50","user_header":"https://static001.geekbang.org/account/avatar/00/1a/1e/de/cdee1780.jpg","comment_is_top":false,"comment_ctime":1635856152,"is_pvip":false,"replies":[{"id":"115865","content":"因为你不是同时在访问0-4k和4-8k这两个虚拟地址呀。就因为不是同时的，我们就在这里“投机取巧”了。为了方便，我们把0-4k称为第一页，4-8k称为第二页，假设我们只有一个物理页。在T1时间，你要访问第一页，那我们就把第一页放到物理内存里，接下来，在T2时刻，你要访问第二页，这时我们就能把第一页换到磁盘上，然后把第二页放到物理内存里。再举一个形象点的例子：你把物理内存页看成酒店房间，把虚拟内存页看成旅客。虽然旅客人数远多于酒店房间，但是因为旅客不是同一天入住。所以我们就可以通过调度来实现旅客和房间的动态映射了。","user_name":"作者回复","user_name_real":"海纳","uid":"1360512","ctime":1635924615,"ip_address":"","comment_id":319578,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1635856152","product_id":100094901,"comment_content":"假如进程 A 一开始将虚拟内存的 0 至 4K，映射到物理内存的 0 至 4K 空间。基于局部性原理，4K 以后的虚拟地址大概率是不会被访问的，我们可以让程序一直运行。直到程序开始访问 4K ~ 8K 之间的虚拟地址了，我们就可以将现在的物理地址里的内容换出到磁盘的 swap 区域，然后再将虚拟内存的 4K ~ 8K 这一个区域映射到 0~4K 的这一块物理内存。<br>------请问一下，这里在第一次使用虚拟地址0-4k时，它映射的是4k-8k的物理地址空间。然后访问虚拟地址空间4k-8k的地址时，怎么还是访问被映射到0-4k的物理呢？不是应该改成其他的物理地址范围吗？这样是不是有两个不同的虚拟地址映射到了同一块物理地址范围里面了呢？","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529679,"discussion_content":"因为你不是同时在访问0-4k和4-8k这两个虚拟地址呀。就因为不是同时的，我们就在这里“投机取巧”了。为了方便，我们把0-4k称为第一页，4-8k称为第二页，假设我们只有一个物理页。在T1时间，你要访问第一页，那我们就把第一页放到物理内存里，接下来，在T2时刻，你要访问第二页，这时我们就能把第一页换到磁盘上，然后把第二页放到物理内存里。再举一个形象点的例子：你把物理内存页看成酒店房间，把虚拟内存页看成旅客。虽然旅客人数远多于酒店房间，但是因为旅客不是同一天入住。所以我们就可以通过调度来实现旅客和房间的动态映射了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635924615,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1677690,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo9TjyI8CJdticKibsCAchnWr25icOF6Ycb562ibh5MKZ18QYDxfvQg2ibtMSoNjyibRWrjJALuk7wZtLKA/132","nickname":"大河马","note":"","ucode":"D612F5F34BA655","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":580111,"discussion_content":"请问下，如果把swap设置为0会怎么样呢？是不是就不能把物理内存上的内容换到swap上了，这样就不能“投机取巧”了？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657875783,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":529679,"ip_address":""},"score":580111,"extra":""}]},{"author":{"id":1825339,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/da/3b/5a1c3ffd.jpg","nickname":"bigbug","note":"","ucode":"D76F307F8FCA75","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531056,"discussion_content":"旅客酒店的例子不错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637214904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1711838,"avatar":"https://static001.geekbang.org/account/avatar/00/1a/1e/de/cdee1780.jpg","nickname":"我是内存","note":"","ucode":"3D763D4F434D50","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":412186,"discussion_content":"明白了，多谢了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636097260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319264,"user_name":"小苗晓雪","can_delete":false,"product_type":"c1","uid":1334583,"ip_address":"","ucode":"B15FDF455853D2","user_header":"https://static001.geekbang.org/account/avatar/00/14/5d/37/061e7fac.jpg","comment_is_top":false,"comment_ctime":1635727380,"is_pvip":true,"replies":[{"id":"115750","content":"请看第三节课。里面有更详细的解释。","user_name":"作者回复","user_name_real":"海纳","uid":"1360512","ctime":1635736987,"ip_address":"","comment_id":319264,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635727380","product_id":100094901,"comment_content":"请问老师，64位操作系统指向内存的只有48位，另外16位指向了其他什么位置或者操作去了？！","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529562,"discussion_content":"请看第三节课。里面有更详细的解释。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635736987,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1334583,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5d/37/061e7fac.jpg","nickname":"小苗晓雪","note":"","ucode":"B15FDF455853D2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":410608,"discussion_content":"了解，谢谢老师的回复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635738557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318920,"user_name":"云会宾","can_delete":false,"product_type":"c1","uid":2696335,"ip_address":"","ucode":"8DFC2DD03D7E51","user_header":"https://static001.geekbang.org/account/avatar/00/29/24/8f/77140e34.jpg","comment_is_top":false,"comment_ctime":1635482552,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1635482552","product_id":100094901,"comment_content":"cpu、编译器、程序员等看到的都是虚拟地址，MMU和OS看到的是物理地址。","like_count":0},{"had_liked":false,"id":318671,"user_name":"小陈","can_delete":false,"product_type":"c1","uid":1009385,"ip_address":"","ucode":"A03A299310AD18","user_header":"https://static001.geekbang.org/account/avatar/00/0f/66/e9/814d057a.jpg","comment_is_top":false,"comment_ctime":1635386682,"is_pvip":false,"replies":[{"id":"115528","content":"好的，建议很好。这里因为前边说到地址都是以字节为单位进行编码的，所以这里就都省略了。以后再遇到大小的话，都会加以注意。","user_name":"作者回复","user_name_real":"氦钠锶","uid":"1360512","ctime":1635391929,"ip_address":"","comment_id":318671,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635386682","product_id":100094901,"comment_content":"老师，一个页表项对应着一个大小为 4K 的页，所以 1024 个页表项所能支持的空间就是 4M。这种最好有个单位，不然看起来就是一个数量","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529338,"discussion_content":"好的，建议很好。这里因为前边说到地址都是以字节为单位进行编码的，所以这里就都省略了。以后再遇到大小的话，都会加以注意。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635391929,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2837328,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/4b/50/fae00aff.jpg","nickname":"HollyWong","note":"","ucode":"03A66A2BCC0A58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413701,"discussion_content":"确实，内存也可以以字编址的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636545904,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318582,"user_name":"李","can_delete":false,"product_type":"c1","uid":1119312,"ip_address":"","ucode":"5C0FAA211F2E26","user_header":"https://static001.geekbang.org/account/avatar/00/11/14/50/c23cf47d.jpg","comment_is_top":false,"comment_ctime":1635339799,"is_pvip":true,"replies":[{"id":"115524","content":"是的。页表的结构虽然是cpu规定的，但内容是操作系统设置的。是软硬件都遵守同一个契约，联手打造的","user_name":"作者回复","user_name_real":"氦钠锶","uid":"1360512","ctime":1635386056,"ip_address":"","comment_id":318582,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1635339799","product_id":100094901,"comment_content":"页表的数据是不是还是要存在物理内存里？","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529308,"discussion_content":"是的。页表的结构虽然是cpu规定的，但内容是操作系统设置的。是软硬件都遵守同一个契约，联手打造的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635386056,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318168,"user_name":"送过快递的码农","can_delete":false,"product_type":"c1","uid":1587666,"ip_address":"","ucode":"66EA81B3BADC73","user_header":"https://static001.geekbang.org/account/avatar/00/18/39/d2/845c0e39.jpg","comment_is_top":false,"comment_ctime":1635169378,"is_pvip":false,"discussion_count":3,"race_medal":0,"score":"1635169378","product_id":100094901,"comment_content":"老师，我问个问题。我们不是有多种cpu架构，比如x86，arm，mips，loogarch等架构。为啥这些架构和软件生态有关系呢？我们不是有操作系统么，我们如果做应用软件，不都是调用操作系统暴露出来的接口进行开发的么。既然操作系统作为一个上管软件，下接硬件这样一个中间层，他不应该把各架构的区别都屏蔽了么？而且别说不同指令集了，就算arm，外部也在说，如果华为无法获得更高级别的arm授权，对华为的软件生态也会有影响呢？还有就是华为有考虑基于loogarch 也进行一些芯片设计，避免被卡脖子呢？","like_count":0,"discussions":[{"author":{"id":2837328,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/4b/50/fae00aff.jpg","nickname":"HollyWong","note":"","ucode":"03A66A2BCC0A58","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":413710,"discussion_content":"纵向看CPU-汇编器-编译器-链接器-OS-应用软件，横向看，每个点都有配套的开发、测试工具、开发者、使用者，这些都是大生态。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636546345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1587666,"avatar":"https://static001.geekbang.org/account/avatar/00/18/39/d2/845c0e39.jpg","nickname":"送过快递的码农","note":"","ucode":"66EA81B3BADC73","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408282,"discussion_content":"谢谢大佬指点，我一直站在语言上思考问题，没有想到可执行文件不同这个问题上","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635217068,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408146,"discussion_content":"应用程序要被编译器翻译成相应cpu上的二进制文件的呀。咱们的前导课里反汇编一个二进制文件的时候看得很清楚，x86上面是x86指令，arm上面是arm指令。总得来说为x86服务器写代码的人多，为arm服务器写代码的人少。这就是生态咯。所以操作系统和编译器都只能管一部分，没办法覆盖全部","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635177111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318142,"user_name":"明","can_delete":false,"product_type":"c1","uid":1607502,"ip_address":"","ucode":"34FF545704EA8A","user_header":"https://static001.geekbang.org/account/avatar/00/18/87/4e/98173974.jpg","comment_is_top":false,"comment_ctime":1635161982,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1635161982","product_id":100094901,"comment_content":"关于虚拟内存和物理内存的映射关系，是不是 <br>1.没有调用malloc之前 虚拟内存页处于“未映射页面”状态<br>2.调用了malloc函数后，没有对该内存进行读写前，虚拟内存页处于“未分配页面”状态<br>3.对虚拟内存进行读写后，虚拟内存页变成 “正常页面”状态<br>不知道理解的对不对","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408137,"discussion_content":"理解得挺好的，就是1和2的说法反了，调过来就好了。页面先是未分配，被分配了以后就是未映射，被访问以后操作系统再把它映射到真正的物理内存，这时才变成正常页面。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635176703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1607502,"avatar":"https://static001.geekbang.org/account/avatar/00/18/87/4e/98173974.jpg","nickname":"明","note":"","ucode":"34FF545704EA8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":408198,"discussion_content":"嗯嗯嗯 谢谢不吝指教😄😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635206825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":408137,"ip_address":""},"score":408198,"extra":""}]}]},{"had_liked":false,"id":318140,"user_name":"大豆","can_delete":false,"product_type":"c1","uid":1350130,"ip_address":"","ucode":"BC78EF2336DBD0","user_header":"https://static001.geekbang.org/account/avatar/00/14/99/f2/c74d24d7.jpg","comment_is_top":false,"comment_ctime":1635161685,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1635161685","product_id":100094901,"comment_content":"老师，我有个问题。我认为通过brk分配的是虚拟内存，那么通过mmap来进行内存分配时，会分配物理内存吗？会的话，物理内存的大小跟虚拟内存大小一样吗？mmap的文件映射与匿名映射的策略是一样的吧？","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408134,"discussion_content":"你好。我们这个专栏会循序渐进地慢慢讲到mmap和brk。这一节课我先没有涉及这两个系统调用。你的问题无法简短回答，具体的会在第三和第十节课详细解释，请继续关注专栏。谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635176566,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":318132,"user_name":"九夏对三冬","can_delete":false,"product_type":"c1","uid":1016797,"ip_address":"","ucode":"6010C1DE53EF3E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/83/dd/86468048.jpg","comment_is_top":false,"comment_ctime":1635159077,"is_pvip":false,"replies":[{"id":"115387","content":"sorry，图片文字识别问题，已修复。","user_name":"作者回复","user_name_real":"氦钠锶","uid":"1360512","ctime":1635216594,"ip_address":"","comment_id":318132,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1635159077","product_id":100094901,"comment_content":"上面图片：128B&#47;TS是啥啊","like_count":0,"discussions":[{"author":{"id":1360512,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/80/6ebf32e8.jpg","nickname":"海纳","note":"","ucode":"AB9F7ADB1428D2","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529114,"discussion_content":"sorry，图片文字识别问题，已修复。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635216594,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1618828,"avatar":"","nickname":"面向工资编程","note":"","ucode":"07F797F021BDD0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408220,"discussion_content":"是不是 BITS 比特的意思呀？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635210130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}