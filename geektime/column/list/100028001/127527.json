{"id":127527,"title":"42 | 电商系统的分布式事务调优","content":"<p>你好，我是刘超。</p><p>今天的分享也是从案例开始。我们团队曾经遇到过一个非常严重的线上事故，在一次DBA完成单台数据库线上补丁后，系统偶尔会出现异常报警，我们的开发工程师很快就定位到了数据库异常问题。</p><p>具体情况是这样的，当玩家购买道具之后，扣除通宝时出现了异常。这种异常在正常情况下发生之后，应该是整个购买操作都需要撤销，然而这次异常的严重性就是在于玩家购买道具成功后，没有扣除通宝。</p><p>究其原因是由于购买的道具更新的是游戏数据库，而通宝是在用户账户中心数据库，在一次购买道具时，存在同时操作两个数据库的情况，属于一种分布式事务。而我们的工程师在完成玩家获得道具和扣除余额的操作时，没有做到事务的一致性，即在扣除通宝失败时，应该回滚已经购买的游戏道具。</p><p><strong>从这个案例中，我想你应该意识到了分布式事务的重要性。</strong></p><p>如今，大部分公司的服务基本都实现了微服务化，首先是业务需求，为了解耦业务；其次是为了减少业务与业务之间的相互影响。</p><p>电商系统亦是如此，大部分公司的电商系统都是分为了不同服务模块，例如商品模块、订单模块、库存模块等等。事实上，分解服务是一把双刃剑，可以带来一些开发、性能以及运维上的优势，但同时也会增加业务开发的逻辑复杂度。其中最为突出的就是分布式事务了。</p><!-- [[[read_end]]] --><p>通常，存在分布式事务的服务架构部署有以下两种：同服务不同数据库，不同服务不同数据库。我们以商城为例，用图示说明下这两种部署：</p><p><img src=\"https://static001.geekbang.org/resource/image/11/5a/111f44892deb9919a1310d636a538f5a.jpg?wh=992*752\" alt=\"\"></p><p><img src=\"https://static001.geekbang.org/resource/image/48/6c/48d448543aeac5eba4b9edd24e1bcf6c.jpg?wh=1038*1029\" alt=\"\"></p><p>通常，我们都是基于第二种架构部署实现的，那我们应该如何实现在这种服务架构下，有关订单提交业务的分布式事务呢？</p><h2>分布式事务解决方案</h2><p>我们讲过，在单个数据库的情况下，数据事务操作具有ACID四个特性，但如果在一个事务中操作多个数据库，则无法使用数据库事务来保证一致性。</p><p>也就是说，当两个数据库操作数据时，可能存在一个数据库操作成功，而另一个数据库操作失败的情况，我们无法通过单个数据库事务来回滚两个数据操作。</p><p>而分布式事务就是为了解决在同一个事务下，不同节点的数据库操作数据不一致的问题。在一个事务操作请求多个服务或多个数据库节点时，要么所有请求成功，要么所有请求都失败回滚回去。通常，分布式事务的实现有多种方式，例如XA协议实现的二阶提交（2PC）、三阶提交(3PC)，以及TCC补偿性事务。</p><p>在了解2PC和3PC之前，我们有必要先来了解下XA协议。XA协议是由X/Open组织提出的一个分布式事务处理规范，目前MySQL中只有InnoDB存储引擎支持XA协议。</p><h3>1. XA规范</h3><p>在XA规范之前，存在着一个DTP模型，该模型规范了分布式事务的模型设计。</p><p>DTP规范中主要包含了AP、RM、TM三个部分，其中AP是应用程序，是事务发起和结束的地方；RM是资源管理器，主要负责管理每个数据库的连接数据源；TM是事务管理器，负责事务的全局管理，包括事务的生命周期管理和资源的分配协调等。</p><p><img src=\"https://static001.geekbang.org/resource/image/dc/67/dcbb483b62b1e0a51d03c7edfcf89767.jpg?wh=1086*676\" alt=\"\"></p><p>XA则规范了TM与RM之间的通信接口，在TM与多个RM之间形成一个双向通信桥梁，从而在多个数据库资源下保证ACID四个特性。</p><p>这里强调一下，JTA是基于XA规范实现的一套Java事务编程接口，是一种两阶段提交事务。我们可以通过<a href=\"https://github.com/nickliuchao/jta\">源码</a>简单了解下JTA实现的多数据源事务提交。</p><h3>2. 二阶提交和三阶提交</h3><p>XA规范实现的分布式事务属于二阶提交事务，顾名思义就是通过两个阶段来实现事务的提交。</p><p>在第一阶段，应用程序向事务管理器（TM）发起事务请求，而事务管理器则会分别向参与的各个资源管理器（RM）发送事务预处理请求（Prepare），此时这些资源管理器会打开本地数据库事务，然后开始执行数据库事务，但执行完成后并不会立刻提交事务，而是向事务管理器返回已就绪（Ready）或未就绪（Not Ready）状态。如果各个参与节点都返回状态了，就会进入第二阶段。</p><p><img src=\"https://static001.geekbang.org/resource/image/2a/95/2a1cf8f45675acac6fe07c172a36ec95.jpg?wh=2224*746\" alt=\"\"></p><p>到了第二阶段，如果资源管理器返回的都是就绪状态，事务管理器则会向各个资源管理器发送提交（Commit）通知，资源管理器则会完成本地数据库的事务提交，最终返回提交结果给事务管理器。</p><p><img src=\"https://static001.geekbang.org/resource/image/59/d5/59734e1a229ceee9df4295d0901ce2d5.jpg?wh=2212*688\" alt=\"\"></p><p>在第二阶段中，如果任意资源管理器返回了未就绪状态，此时事务管理器会向所有资源管理器发送事务回滚（Rollback）通知，此时各个资源管理器就会回滚本地数据库事务，释放资源，并返回结果通知。</p><p><img src=\"https://static001.geekbang.org/resource/image/87/2f/8791dfe19fce916f77b6c5740bc32e2f.jpg?wh=2202*760\" alt=\"\"></p><p>但事实上，二阶事务提交也存在一些缺陷。</p><p>第一，在整个流程中，我们会发现各个资源管理器节点存在阻塞，只有当所有的节点都准备完成之后，事务管理器才会发出进行全局事务提交的通知，这个过程如果很长，则会有很多节点长时间占用资源，从而影响整个节点的性能。</p><p>一旦资源管理器挂了，就会出现一直阻塞等待的情况。类似问题，我们可以通过设置事务超时时间来解决。</p><p>第二，仍然存在数据不一致的可能性，例如，在最后通知提交全局事务时，由于网络故障，部分节点有可能收不到通知，由于这部分节点没有提交事务，就会导致数据不一致的情况出现。</p><p><strong>而三阶事务（3PC）的出现就是为了减少此类问题的发生。</strong></p><p>3PC把2PC的准备阶段分为了准备阶段和预处理阶段，在第一阶段只是询问各个资源节点是否可以执行事务，而在第二阶段，所有的节点反馈可以执行事务，才开始执行事务操作，最后在第三阶段执行提交或回滚操作。并且在事务管理器和资源管理器中都引入了超时机制，如果在第三阶段，资源节点一直无法收到来自资源管理器的提交或回滚请求，它就会在超时之后，继续提交事务。</p><p>所以3PC可以通过超时机制，避免管理器挂掉所造成的长时间阻塞问题，但其实这样还是无法解决在最后提交全局事务时，由于网络故障无法通知到一些节点的问题，特别是回滚通知，这样会导致事务等待超时从而默认提交。</p><h3>3. 事务补偿机制（TCC）</h3><p>以上这种基于XA规范实现的事务提交，由于阻塞等性能问题，有着比较明显的低性能、低吞吐的特性。所以在抢购活动中使用该事务，很难满足系统的并发性能。</p><p>除了性能问题，JTA只能解决同一服务下操作多数据源的分布式事务问题，换到微服务架构下，可能存在同一个事务操作，分别在不同服务上连接数据源，提交数据库操作。</p><p>而TCC正是为了解决以上问题而出现的一种分布式事务解决方案。TCC采用最终一致性的方式实现了一种柔性分布式事务，与XA规范实现的二阶事务不同的是，TCC的实现是基于服务层实现的一种二阶事务提交。</p><p>TCC分为三个阶段，即Try、Confirm、Cancel三个阶段。</p><p><img src=\"https://static001.geekbang.org/resource/image/23/a9/23f68980870465ba6c00c0f2619fcfa9.jpg?wh=1892*1300\" alt=\"\"></p><ul>\n<li>Try阶段：主要尝试执行业务，执行各个服务中的Try方法，主要包括预留操作；</li>\n<li>Confirm阶段：确认Try中的各个方法执行成功，然后通过TM调用各个服务的Confirm方法，这个阶段是提交阶段；</li>\n<li>Cancel阶段：当在Try阶段发现其中一个Try方法失败，例如预留资源失败、代码异常等，则会触发TM调用各个服务的Cancel方法，对全局事务进行回滚，取消执行业务。</li>\n</ul><p>以上执行只是保证Try阶段执行时成功或失败的提交和回滚操作，你肯定会想到，如果在Confirm和Cancel阶段出现异常情况，那TCC该如何处理呢？此时TCC会不停地重试调用失败的Confirm或Cancel方法，直到成功为止。</p><p>但TCC补偿性事务也有比较明显的缺点，那就是对业务的侵入性非常大。</p><p>首先，我们需要在业务设计的时候考虑预留资源；然后，我们需要编写大量业务性代码，例如Try、Confirm、Cancel方法；最后，我们还需要为每个方法考虑幂等性。这种事务的实现和维护成本非常高，但综合来看，这种实现是目前大家最常用的分布式事务解决方案。</p><h3>4. 业务无侵入方案——Seata(Fescar)</h3><p>Seata是阿里去年开源的一套分布式事务解决方案，开源一年多已经有一万多star了，可见受欢迎程度非常之高。</p><p>Seata的基础建模和DTP模型类似，只不过前者是将事务管理器分得更细了，抽出一个事务协调器（Transaction Coordinator 简称TC），主要维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚。而TM则负责开启一个全局事务，并最终发起全局提交或全局回滚的决议。如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/6a/83/6ac3de014819c54fe6904c938240b183.jpg?wh=1086*896\" alt=\"\"></p><p>按照<a href=\"https://github.com/seata/seata\">Github</a>中的说明介绍，整个事务流程为：</p><ul>\n<li>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID；</li>\n<li>XID 在微服务调用链路的上下文中传播；</li>\n<li>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖；</li>\n<li>TM 向 TC 发起针对 XID 的全局提交或回滚决议；</li>\n<li>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</li>\n</ul><p>Seata与其它分布式最大的区别在于，它在第一提交阶段就已经将各个事务操作commit了。Seata认为在一个正常的业务下，各个服务提交事务的大概率是成功的，这种事务提交操作可以节约两个阶段持有锁的时间，从而提高整体的执行效率。</p><p>那如果在第一阶段就已经提交了事务，那我们还谈何回滚呢？</p><p>Seata将RM提升到了服务层，通过JDBC数据源代理解析SQL，把业务数据在更新前后的数据镜像组织成回滚日志，利用本地事务的 ACID 特性，将业务数据的更新和回滚日志的写入在同一个本地事务中提交。</p><p>如果TC决议要全局回滚，会通知RM进行回滚操作，通过XID找到对应的回滚日志记录，通过回滚记录生成反向更新SQL，进行更新回滚操作。</p><p>以上我们可以保证一个事务的原子性和一致性，但隔离性如何保证呢？</p><p>Seata设计通过事务协调器维护的全局写排它锁，来保证事务间的写隔离，而读写隔离级别则默认为未提交读的隔离级别。</p><h2>总结</h2><p>在同服务多数据源操作不同数据库的情况下，我们可以使用基于XA规范实现的分布式事务，在Spring中有成熟的JTA框架实现了XA规范的二阶事务提交。事实上，二阶事务除了性能方面存在严重的阻塞问题之外，还有可能导致数据不一致，我们应该慎重考虑使用这种二阶事务提交。</p><p>在跨服务的分布式事务下，我们可以考虑基于TCC实现的分布式事务，常用的中间件有TCC-Transaction。TCC也是基于二阶事务提交原理实现的，但TCC的二阶事务提交是提到了服务层实现。TCC方式虽然提高了分布式事务的整体性能，但也给业务层带来了非常大的工作量，对应用服务的侵入性非常强，但这是大多数公司目前所采用的分布式事务解决方案。</p><p>Seata是一种高效的分布式事务解决方案，设计初衷就是解决分布式带来的性能问题以及侵入性问题。但目前Seata的稳定性有待验证，例如，在TC通知RM开始提交事务后，TC与RM的连接断开了，或者RM与数据库的连接断开了，都不能保证事务的一致性。</p><h2>思考题</h2><p>Seata在第一阶段已经提交了事务，那如果在第二阶段发生了异常要回滚到Before快照前，别的线程若是更新了数据，且业务走完了，那么恢复的这个快照不就是脏数据了吗？但事实上，Seata是不会出现这种情况的，你知道它是怎么做到的吗？</p><p>期待在留言区看到你的答案。也欢迎你点击“请朋友读”，把今天的内容分享给身边的朋友，邀请他一起讨论。</p><p><span class=\"reference\"></span></p>","comments":[{"had_liked":false,"id":134410,"user_name":"G","can_delete":false,"product_type":"c1","uid":1206873,"ip_address":"","ucode":"35A3A0CD1FF675","user_header":"https://static001.geekbang.org/account/avatar/00/12/6a/59/ba3cad16.jpg","comment_is_top":false,"comment_ctime":1568820341,"is_pvip":false,"replies":[{"id":"51653","content":"MQ实现的分布式事务也是TCC的一种实现方式，也是主流的一种分布式解决方案","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1568895678,"ip_address":"","comment_id":134410,"utype":1}],"discussion_count":6,"race_medal":0,"score":"121827904629","product_id":100028001,"comment_content":"目前主流的做法不是通过异步消息来实现的吗。下单同步调用扣减库存接口。然后业务线监听订单状态接口实现业务。对于扣减库存如果发生超时，下单失败。商品中心监听费单消息，加回库存。来实现最终一致性。其他业务类同","like_count":29,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467732,"discussion_content":"MQ实现的分布式事务也是TCC的一种实现方式，也是主流的一种分布式解决方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568895678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1229566,"avatar":"https://static001.geekbang.org/account/avatar/00/12/c2/fe/038a076e.jpg","nickname":"阿卧","note":"","ucode":"68C0CC25E57707","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":208663,"discussion_content":"mq的事务性消息属于消息最终一致性通知吗？消息最终一致性和tcc有什么区别？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584574320,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1297630,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","nickname":"剑八","note":"","ucode":"0A09F41DB8A4E7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558067,"discussion_content":"这里库存扣失败怎么通知用户？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648083584,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1297630,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","nickname":"剑八","note":"","ucode":"0A09F41DB8A4E7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558065,"discussion_content":"这里库存异步，失败如何通知用户？用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648083552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2532285,"avatar":"","nickname":"Geek_926921","note":"","ucode":"51C3B0178D77E1","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382886,"discussion_content":"大佬，面试时候别人问用MQ实现分布式事务的时候长时间等待状态返回，怎么提高系统的响应速度。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625755215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1142335,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/3f/49e5079f.jpg","nickname":"楞伽山人","note":"","ucode":"5859C06DAC790D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2532285,"avatar":"","nickname":"Geek_926921","note":"","ucode":"51C3B0178D77E1","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542634,"discussion_content":"自己主动去拉取 这种是否可行？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640824565,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":382886,"ip_address":""},"score":542634,"extra":""}]}]},{"had_liked":false,"id":174679,"user_name":"asura","can_delete":false,"product_type":"c1","uid":1105148,"ip_address":"","ucode":"4AF66C19B4AE65","user_header":"https://static001.geekbang.org/account/avatar/00/10/dc/fc/5c3ad841.jpg","comment_is_top":false,"comment_ctime":1580346849,"is_pvip":false,"replies":[{"id":"69016","content":"最新版本的Seata其实已经做的很全面了，包括数据一致性问题，单点问题，也是牺牲了性能来换取的。<br><br>你们项目中这种做法没问题，不过很多实际项目中的分布式事务是这样实现的：在保证主订单提交成功之后，其他服务调用就会通过重试机制来保证这些调用必须成功，这种方式在并发性能上会好一些。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1581507340,"ip_address":"","comment_id":174679,"utype":1}],"discussion_count":2,"race_medal":0,"score":"44530019809","product_id":100028001,"comment_content":"老师好，分布事务在稳定性上还存有一些问题，可能导致数据不一致。从文章中来看老师是更推荐Seata吗？如果出现问题是要人工处理吗还是？我们在实际项目实战中采用 如:下单请求调用订单服务，同一个请求中还会调用:扣减库存（商品服务）、用券或者红包（促销服务）等其他服务。在整个方法体中做控制，如果调用的其他微服务接口返回失败就抛异常回滚整个请求来保证一致性，这种老师怎么看？","like_count":11,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482486,"discussion_content":"最新版本的Seata其实已经做的很全面了，包括数据一致性问题，单点问题，也是牺牲了性能来换取的。\n\n你们项目中这种做法没问题，不过很多实际项目中的分布式事务是这样实现的：在保证主订单提交成功之后，其他服务调用就会通过重试机制来保证这些调用必须成功，这种方式在并发性能上会好一些。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581507340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1297630,"avatar":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","nickname":"剑八","note":"","ucode":"0A09F41DB8A4E7","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558072,"discussion_content":"是的，一般设计是以某一个业务操作成功为主，然后后面可以做事务消息去做","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648084067,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":155838,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1574764530,"is_pvip":true,"replies":[{"id":"60146","content":"是的","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1574943250,"ip_address":"","comment_id":155838,"utype":1}],"discussion_count":1,"race_medal":0,"score":"35934502898","product_id":100028001,"comment_content":"老师您好，是不是可以这样理解，Seata是通过TM管理全局事务，所有用Seata的AP都可以实现写的隔离，也就是对同一行数据有影响的时候，并不存在分布的A事务没有操作完毕，B事务就开始操作的情况。<br><br>Seata默认采用了很乐观的分布式策略，CAP里面优先保证了A，并没有彻底解决脏读的问题。<br><br>而如果设置为读“已提交”，那就要Seata在内存记录额外的数据，用于返回已提交的&quot;正确数据&quot;？而这个就又扯出内存管理或崩溃时这些&quot;正确数据&quot;持久化的问题，导致系统复杂度上升？这样理解对吗？","like_count":8,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475893,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574943250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128645,"user_name":"QQ怪","can_delete":false,"product_type":"c1","uid":1211223,"ip_address":"","ucode":"1A39B8433D9208","user_header":"https://static001.geekbang.org/account/avatar/00/12/7b/57/a9b04544.jpg","comment_is_top":false,"comment_ctime":1566921713,"is_pvip":false,"replies":[{"id":"47763","content":"默认情况下，seata认为大多数分布式业务涉及到脏读的可能性比较小，所以保证了大多数场景下的高效性。<br><br>如果需要达到全局的 读已提交，seata也提供了相应的机制来达到目的。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566956264,"ip_address":"","comment_id":128645,"utype":1}],"discussion_count":2,"race_medal":0,"score":"31631692785","product_id":100028001,"comment_content":"不太理解seata默认隔离级别为啥是未提交读，不怕脏读？还是为了保证性能才做的妥协？","like_count":8,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465037,"discussion_content":"默认情况下，seata认为大多数分布式业务涉及到脏读的可能性比较小，所以保证了大多数场景下的高效性。\n\n如果需要达到全局的 读已提交，seata也提供了相应的机制来达到目的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566956264,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2045659,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/36/db/03a41c33.jpg","nickname":"doosheng","note":"","ucode":"A4CDACDBEF855A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530974,"discussion_content":"补充一下老师所说的“相应的机制”，目前 Seata 的方式是通过 SELECT FOR UPDATE 语句的代理。SELECT FOR UPDATE 语句的执行会申请 全局锁 ，如果 全局锁 被其他事务持有，则释放本地锁（回滚 SELECT FOR UPDATE 语句的本地执行）并重试。这个过程中，查询是被 block 住的，直到 全局锁 拿到，即读取的相关数据是 已提交 的，才返回。出于总体性能上的考虑，Seata 目前的方案并没有对所有 SELECT 语句都进行代理，仅针对 FOR UPDATE 的 SELECT 语句。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637198806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128488,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1566888816,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"31631659888","product_id":100028001,"comment_content":"分页式事务中常用的方法：<br>1.二阶段提交<br>2.三阶段提交<br>3.TCC事务<br>4.Seata（有待验证）","like_count":6},{"had_liked":false,"id":128223,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1566864505,"is_pvip":false,"replies":[{"id":"47780","content":"赞，全局写排它锁是根据resourceId + table + pks实现。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566957377,"ip_address":"","comment_id":128223,"utype":1}],"discussion_count":2,"race_medal":0,"score":"23041700985","product_id":100028001,"comment_content":"老师好!<br>Seata 设计通过事务协调器维护的全局写排它锁，来保证事务间的写隔离，而读写隔离级别则默认为未提交读的隔离级别。<br>这个全局写排他锁支持那几种锁啊?<br>行锁，表锁，间隙锁，元数据锁别的记不起来了<br>如果支持的锁粒度不够吞吐量也会降低很多吧。","like_count":5,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464853,"discussion_content":"赞，全局写排它锁是根据resourceId + table + pks实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566957377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1367031,"avatar":"https://static001.geekbang.org/account/avatar/00/14/db/f7/29e1a022.jpg","nickname":"seustones","note":"","ucode":"66B8D7754BDB4D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":46840,"discussion_content":"是行锁","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573215936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130643,"user_name":"任鹏斌","can_delete":false,"product_type":"c1","uid":1104086,"ip_address":"","ucode":"34319B05EA6E74","user_header":"https://static001.geekbang.org/account/avatar/00/10/d8/d6/47da34bf.jpg","comment_is_top":false,"comment_ctime":1567500549,"is_pvip":false,"replies":[{"id":"49143","content":"会的，我在文中已经提到了","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567596638,"ip_address":"","comment_id":130643,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18747369733","product_id":100028001,"comment_content":"老师有个问题阿里的开源分布式方案是事务管理器是单点的，如果挂掉了会不会引起事务不一致？","like_count":4,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466046,"discussion_content":"会的，我在文中已经提到了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567596638,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":172013,"user_name":"Alsace","can_delete":false,"product_type":"c1","uid":1702972,"ip_address":"","ucode":"2B83ACE05B688B","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIFr9x9UtgJEpiaUMWxO9GOrlARIhSCAiaZe4npv4ricWYJowgl5eO3s19yZ7ibOjfGyDicfxPD6Yc8beA/132","comment_is_top":false,"comment_ctime":1579070909,"is_pvip":false,"replies":[{"id":"67217","content":"常规做法是，主业务事务完成之后，其他业务通过mq通知，我们不做回滚操作，通过重试机制或者mq的内部ack机制要保证mq的消息能成功被消费掉。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1579523316,"ip_address":"","comment_id":172013,"utype":1}],"discussion_count":2,"race_medal":0,"score":"14463972797","product_id":100028001,"comment_content":"我一直有个问题想请问一下，如果是基于MQ实现的最终一致性，如果需要回滚，要怎么操作？","like_count":4,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481584,"discussion_content":"常规做法是，主业务事务完成之后，其他业务通过mq通知，我们不做回滚操作，通过重试机制或者mq的内部ack机制要保证mq的消息能成功被消费掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579523316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1053914,"avatar":"https://static001.geekbang.org/account/avatar/00/10/14/da/0a012c26.jpg","nickname":"孤帆","note":"","ucode":"8CC9AAF28944EB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":174876,"discussion_content":"如果消费失败了呢？\n之前的要怎么做自动回滚呢？提供一个接口么，感觉有点累啊","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1581944769,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128367,"user_name":"拒绝","can_delete":false,"product_type":"c1","uid":1335155,"ip_address":"","ucode":"CB0264C4D3FE17","user_header":"https://static001.geekbang.org/account/avatar/00/14/5f/73/bb3dc468.jpg","comment_is_top":false,"comment_ctime":1566875687,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14451777575","product_id":100028001,"comment_content":"一阶段本地事务提交前，需要确保先拿到 全局锁 。<br>拿不到 全局锁 ，不能提交本地事务。<br>拿 全局锁 的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁。<br>以一个示例来说明：<br><br>两个全局事务 tx1 和 tx2，分别对 a 表的 m 字段进行更新操作，m 的初始值 1000。<br><br>tx1 先开始，开启本地事务，拿到本地锁，更新操作 m = 1000 - 100 = 900。本地事务提交前，先拿到该记录的 全局锁 ，本地提交释放本地锁。 tx2 后开始，开启本地事务，拿到本地锁，更新操作 m = 900 - 100 = 800。本地事务提交前，尝试拿该记录的 全局锁 ，tx1 全局提交前，该记录的全局锁被 tx1 持有，tx2 需要重试等待 全局锁 。","like_count":3},{"had_liked":false,"id":277838,"user_name":"Geek_1c3897","can_delete":false,"product_type":"c1","uid":2353847,"ip_address":"","ucode":"C0D130DE847016","user_header":"","comment_is_top":false,"comment_ctime":1612616970,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5907584266","product_id":100028001,"comment_content":"老师好，分布式事务通常都会对系统性能造成较大的影响，实际项目中当不得不使用分布式事务时，如何避免对性能造成较大影响？","like_count":1},{"had_liked":false,"id":181686,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1582616381,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5877583677","product_id":100028001,"comment_content":"https:&#47;&#47;github.com&#47;nickliuchao&#47;jta&#47;blob&#47;master&#47;src&#47;main&#47;java&#47;com&#47;example&#47;demo&#47;config&#47;MyDataSourceAutoConfiguration.java <br>老师，你的这个例子，AtomikosDataSourceBean 这个类创建的对象没有找到#setXaDataSource 这个方法，但是我看它是集成了com.atomikos.jdbc.AtomikosDataSourceBean，这个方法里，里面有提示有的#setXaDataSource 这个方法，是因为什么导致是用不了的，是因我的spring boot的版太新了么，2.2.4 的","like_count":1},{"had_liked":false,"id":128711,"user_name":"灿烂明天","can_delete":false,"product_type":"c1","uid":1322455,"ip_address":"","ucode":"07DA56B0680D0C","user_header":"https://static001.geekbang.org/account/avatar/00/14/2d/d7/74fc8f38.jpg","comment_is_top":false,"comment_ctime":1566953564,"is_pvip":false,"replies":[{"id":"47767","content":"可以的，目前很多团队用过MQ实现分布式事务，也是基于TCC的思想实现。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566956510,"ip_address":"","comment_id":128711,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5861920860","product_id":100028001,"comment_content":"老师好，我看网上有些是用mq消息中间件来解决分布式事务的，其实这个方案能不能解决分布式事务问题的？他的思想是基于tcc的吗？","like_count":2,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465072,"discussion_content":"可以的，目前很多团队用过MQ实现分布式事务，也是基于TCC的思想实现。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566956510,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128219,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1566864312,"is_pvip":false,"replies":[{"id":"47784","content":"对的，我们首先要使用重试机制，其次保证记录日志。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566957807,"ip_address":"","comment_id":128219,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5861831608","product_id":100028001,"comment_content":"课后习题:全局写锁，第一阶段没有准确的提交或者回滚前，后续业务无法持有锁。我本来还想问下老师这个是怎么做到的，不过老师最后写了嘿嘿省的问了。默认读为提交，不怕脏读么?<br>TCC协议具体每一步怎么做讲一下么老师?<br>已订单支付为例，<br>try:尝试预扣处理,怎么预扣呢。用redis锁库存还是直接怎么锁。(抢购装备，游戏币和装备都在try阶段锁定。冲突大的后try，提交的时候冲突大的先commit?)。<br>try阶段，如果同时有多个事务进行try操作都能try成功么?如果支持try成功感觉有可能出现课后问题的情况。try这一步很重要啊，需要保证try以后，一定能提交成功，也一定能回滚。会不会有万一的?万一兜底解决是人工处理么?<br>","like_count":1,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464852,"discussion_content":"对的，我们首先要使用重试机制，其次保证记录日志。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566957807,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":331940,"user_name":"曾文峰","can_delete":false,"product_type":"c1","uid":2722962,"ip_address":"","ucode":"FCA525F93CE115","user_header":"","comment_is_top":false,"comment_ctime":1642911256,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1642911256","product_id":100028001,"comment_content":"想问问这种造成公司资产损失的生产环境事故要承担怎么样的责任","like_count":0},{"had_liked":false,"id":301927,"user_name":"平民人之助","can_delete":false,"product_type":"c1","uid":2658705,"ip_address":"","ucode":"5CCEC0BAC08AEC","user_header":"https://static001.geekbang.org/account/avatar/00/28/91/91/428a27a3.jpg","comment_is_top":false,"comment_ctime":1625977334,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1625977334","product_id":100028001,"comment_content":"为啥不讲用队列来实现事务的原理","like_count":0},{"had_liked":false,"id":291754,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1620464281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620464281","product_id":100028001,"comment_content":"读未提交，最低的隔离级别。更新后的值，其他线程就能读取到。<br><br>读未提交的隔离级别，有点像 Java 并发（原子性，可见性，有序性）中的可见性。保证了可见性，不存在有序性问题，剩下的就是原子性。<br>解决原子性问题，悲观锁或者乐观锁，应该是需要获取到某一把全局锁（不能是多把锁，无法保证多把锁的原子操作），才能更新数据。","like_count":0},{"had_liked":false,"id":291731,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1620452657,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1620452657","product_id":100028001,"comment_content":"原文：<br>3PC 在第一阶段只是询问各个资源节点是否可以执行事务，而在第二阶段，所有的节点反馈可以执行事务，才开始执行事务操作，最后在第三阶段执行提交或回滚操作。<br><br>问题：<br>第一阶段询问之后，得到肯定的回复，再执行第二阶段事务操作。那第一阶段的询问逻辑，代码要怎么实现？如扣库存：<br><br>方案一：<br>第一阶段：只查询库存，如果大于需求则回复成功。<br>第二阶段：直接执行扣减库存的 sql。<br>第三阶段：提交事务；或回滚事务，归还库存。<br>该方案的第一阶段存在“假”成功的情况，如库存为 1，多个不同用户的线程同时询问该库存，都需要 1 个，第一阶段成功而第二阶段只有一个用户线程能成功，其余用户线程失败。<br><br>方案二：<br>第一阶段：冻结库存，冻结成功则返回成功。<br>第二阶段：执行从『冻结库存』字段扣减库存的 sql。<br>第三阶段：提交事务；或回滚事务，归还冻结库存到主库存字段。<br>该不会出现方案一的“假”成功的情况，但是引入了归还冻结库存的操作，需要保证异常时，能成功归还冻给库存。<br><br>或者还有其他的方案么？谢谢老师","like_count":0,"discussions":[{"author":{"id":1142335,"avatar":"https://static001.geekbang.org/account/avatar/00/11/6e/3f/49e5079f.jpg","nickname":"楞伽山人","note":"","ucode":"5859C06DAC790D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542645,"discussion_content":"我看很多问题好像都没有回","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640825195,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291723,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1620449980,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620449980","product_id":100028001,"comment_content":"TM 事务管理器，负责资源的分配协调等，TM 存在单点问题。如果部署多台 TM，如一主多从，解决了单点问题，但是又引入了当数据同步不及时，中间状态数据丢失的问题。例如：TM master 需要通知 5 台 RM，只通知了 3 台 RM，此时 TM master 宕机，数据未同步到 TM slave。从 slave 选举新的 master，新 TM master 却不知道已经通知了多少 RM，无法继续后续操作。<br><br>老师，请问一下，是不是所有的分布式技术方案中，如果需要事务协调者节点，都会存在上述问题：单点，或多节点数据延迟导致状态丢失问题。<br><br>谢谢老师！","like_count":0},{"had_liked":false,"id":270911,"user_name":"惘 闻","can_delete":false,"product_type":"c1","uid":1181650,"ip_address":"","ucode":"C5909F034BF072","user_header":"https://static001.geekbang.org/account/avatar/00/12/07/d2/0d7ee298.jpg","comment_is_top":false,"comment_ctime":1609316636,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1609316636","product_id":100028001,"comment_content":"并且在事务管理器和资源管理器中都引入了超时机制，如果在第三阶段，资源节点一直无法收到来自资源管理器的提交或回滚请求，它就会在超时之后，继续提交事务。<br>没收到就绪请求还继续提交那不是很容易造成不一致吗?","like_count":0},{"had_liked":false,"id":256740,"user_name":"torres","can_delete":false,"product_type":"c1","uid":1108761,"ip_address":"","ucode":"34DABCFC7B74EA","user_header":"https://static001.geekbang.org/account/avatar/00/10/eb/19/76b0b98c.jpg","comment_is_top":false,"comment_ctime":1603720820,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603720820","product_id":100028001,"comment_content":"请问一下老师，对于TCC模式，如果最后提交阶段 TM 挂掉了，重启之后，还会继续调用各个comfirm或者cancel方法吗？ 这种情况还能保证数据的一致性吗？<br><br>另外，XA模式为什么不能进行重试来保证数据的最终一致性？如果TM给RM发送commit或者rollback指令的时候，有网络问题，那么完全可以通过稍后重试来保证最终一致性哈？  这个地方不是很明白，请老师指点","like_count":0},{"had_liked":false,"id":253724,"user_name":"FuriousEric","can_delete":false,"product_type":"c1","uid":1138576,"ip_address":"","ucode":"0A66DA938976F7","user_header":"https://static001.geekbang.org/account/avatar/00/11/5f/90/711efc88.jpg","comment_is_top":false,"comment_ctime":1602844239,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1602844239","product_id":100028001,"comment_content":"老师，能否讲讲最后你们这个线上故障怎么解决的？全文都在介绍分布式方案，但是前面提到的你们遇到的问题又没说用哪种解决方案，怎么实现的😂","like_count":0,"discussions":[{"author":{"id":1024294,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","nickname":"null","note":"","ucode":"F9039EFED6B55D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":372794,"discussion_content":"说不定是虚拟的场景，只为引出话题。\n《我的朋友系列之分布式事务》🌝🌝","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1620464582,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":248112,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1600012437,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600012437","product_id":100028001,"comment_content":"老师 文章里的分布式部署图 第一张是单服务的分布式事务，第二张是tcc适用的多个服务的那种,是这样吗?","like_count":0},{"had_liked":false,"id":232350,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1593963749,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1593963749","product_id":100028001,"comment_content":"1.未提交读感觉挺多场景都不适用。<br>2.seata如果是读提交级别，那么会因为有写锁拋异常。还是实现了分布式的mvcc。","like_count":0},{"had_liked":false,"id":225533,"user_name":"小天狼星","can_delete":false,"product_type":"c1","uid":1055801,"ip_address":"","ucode":"555DFE4CF0A994","user_header":"https://static001.geekbang.org/account/avatar/00/10/1c/39/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1591780137,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1591780137","product_id":100028001,"comment_content":"想问下，seata在事务提交或回滚前，对应的资源还是要被锁住的，那相对2PC提升的性能在哪里呢？","like_count":0},{"had_liked":false,"id":219005,"user_name":"f(x)","can_delete":false,"product_type":"c1","uid":1224568,"ip_address":"","ucode":"3680BBD50AFAE4","user_header":"https://static001.geekbang.org/account/avatar/00/12/af/78/07d3e282.jpg","comment_is_top":false,"comment_ctime":1589932103,"is_pvip":false,"replies":[{"id":"82343","content":"我们可以理解为一个单独的服务。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1591101416,"ip_address":"","comment_id":219005,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1589932103","product_id":100028001,"comment_content":"没太明白事物管理器具体是什么，是单独的服务还是中间件？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":495647,"discussion_content":"我们可以理解为一个单独的服务。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591101416,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189077,"user_name":"Evan","can_delete":false,"product_type":"c1","uid":1344281,"ip_address":"","ucode":"B877ABD0CF4661","user_header":"https://static001.geekbang.org/account/avatar/00/14/83/19/0a3fe8c1.jpg","comment_is_top":false,"comment_ctime":1584453757,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"1584453757","product_id":100028001,"comment_content":"Saga 事务有那位同事介绍过？","like_count":0},{"had_liked":false,"id":181736,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1156592,"ip_address":"","ucode":"126AF848001A1E","user_header":"https://static001.geekbang.org/account/avatar/00/11/a5/f0/8648c464.jpg","comment_is_top":false,"comment_ctime":1582625707,"is_pvip":false,"replies":[{"id":"70507","content":"给你解决问题能力点个赞","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1582719427,"ip_address":"","comment_id":181736,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582625707","product_id":100028001,"comment_content":"老师，我试了一下，是版本的问题， 如果换成spring-boot-parent 1.5.6 的就可以了，我看了源码，英文Ispring-boot2.2.4 的引入的com.automikos 的版本不对，是4.0.6 的导致的问题.","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485100,"discussion_content":"给你解决问题能力点个赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582719427,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":176721,"user_name":"大象蚂蚁","can_delete":false,"product_type":"c1","uid":1255382,"ip_address":"","ucode":"0066D9CD979C39","user_header":"https://static001.geekbang.org/account/avatar/00/13/27/d6/30456009.jpg","comment_is_top":false,"comment_ctime":1581150069,"is_pvip":false,"replies":[{"id":"69014","content":"我们也计划在部分生产业务中使用了。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1581506871,"ip_address":"","comment_id":176721,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581150069","product_id":100028001,"comment_content":"我司分布分布系统面临分布式事务的问题,也是打算使用TCC来解决，看了老师提到阿里开源的Seata，有必要试一下","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483190,"discussion_content":"我们也计划在部分生产业务中使用了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581506871,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145853,"user_name":"天涯xj","can_delete":false,"product_type":"c1","uid":1312059,"ip_address":"","ucode":"55FC1FE3B30A70","user_header":"https://static001.geekbang.org/account/avatar/00/14/05/3b/590ae4ea.jpg","comment_is_top":false,"comment_ctime":1572395352,"is_pvip":false,"replies":[{"id":"56516","content":"适用，不同的分布式事务各有自己的优缺点，可以根据自己的需求来选择最适合自己的分布式事务的实现方式。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1572518554,"ip_address":"","comment_id":145853,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1572395352","product_id":100028001,"comment_content":"为什么JTA不能适合单一数据源的分布式事务？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472600,"discussion_content":"适用，不同的分布式事务各有自己的优缺点，可以根据自己的需求来选择最适合自己的分布式事务的实现方式。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572518554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":135367,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1569139751,"is_pvip":false,"replies":[{"id":"52260","content":"是的，seata的RM提升到了服务层","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1569415803,"ip_address":"","comment_id":135367,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1569139751","product_id":100028001,"comment_content":"TCC 也是基于二阶事务提交原理实现的，但 TCC 的二阶事务提交是提到了服务层实现。<br>Seata将RM也提升到了服务层实现。<br>--------老师，这两种服务层实现，应该不是一回事吧<br>","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468158,"discussion_content":"是的，seata的RM提升到了服务层","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569415803,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134399,"user_name":"Gred","can_delete":false,"product_type":"c1","uid":1442929,"ip_address":"","ucode":"F68068880E348B","user_header":"https://static001.geekbang.org/account/avatar/00/16/04/71/853b2292.jpg","comment_is_top":false,"comment_ctime":1568819180,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568819180","product_id":100028001,"comment_content":"思考题：为什么SeaTac不会产生脏数据，第一点因为全局排它锁，全局排它锁的结构是【resourceId + table + pks】，精确到某个资源某张表的某个条数据。第二点，如果A事务对于【Select * from table where id = pks for update】数据执行失败，且未回滚【resourceId+table+pk】，这时全局锁尚未释放。B事务申请相同资源的全局锁会失败。该条数据只能看不能处理，也说不上产生脏数据了。","like_count":0},{"had_liked":false,"id":130829,"user_name":"再续啸傲","can_delete":false,"product_type":"c1","uid":1360184,"ip_address":"","ucode":"912987A17DCA92","user_header":"https://static001.geekbang.org/account/avatar/00/14/c1/38/e45bbb6b.jpg","comment_is_top":false,"comment_ctime":1567557864,"is_pvip":false,"replies":[{"id":"49126","content":"对的，已修正","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567596111,"ip_address":"","comment_id":130829,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567557864","product_id":100028001,"comment_content":"文中“如果 RM 决议要全局回滚，会通知 RM 进行回滚操作”，按照学习后的理解，应该是TC决定是否要进行全局回滚，不知道我理解的是否有偏差，忘老师指正","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466144,"discussion_content":"对的，已修正","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567596111,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":130763,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1567528300,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1567528300","product_id":100028001,"comment_content":"1.第一次听到TCC,感觉也是两阶段提交的思想，只是把询问变成try操作。<br>2.至于补偿，感觉mq的方式更像是在补偿。（在这里，因为mq是最终一致所以个人觉得更像补偿）<br>3.分布式事务框架还有个lcn，事务的搬运工。","like_count":0},{"had_liked":false,"id":130005,"user_name":"N","can_delete":false,"product_type":"c1","uid":1133657,"ip_address":"","ucode":"3791619172D64F","user_header":"https://static001.geekbang.org/account/avatar/00/11/4c/59/c75cb36d.jpg","comment_is_top":false,"comment_ctime":1567350016,"is_pvip":false,"replies":[{"id":"48615","content":"可以的，Seata中有个基于dubbo实现的分布式事务的例子，有兴趣可以自己参考手动实践一下","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567424723,"ip_address":"","comment_id":130005,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1567350016","product_id":100028001,"comment_content":"老师您好，微服务间在事务中通过dubbo调用的方式是不是也可以实现分布式事务？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":465759,"discussion_content":"可以的，Seata中有个基于dubbo实现的分布式事务的例子，有兴趣可以自己参考手动实践一下","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567424723,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128478,"user_name":"晓杰","can_delete":false,"product_type":"c1","uid":1441546,"ip_address":"","ucode":"1174C88EEBF8A6","user_header":"https://static001.geekbang.org/account/avatar/00/15/ff/0a/12faa44e.jpg","comment_is_top":false,"comment_ctime":1566886350,"is_pvip":false,"replies":[{"id":"47768","content":"默认情况下，seata认为大多数分布式业务涉及到脏读的可能性比较小，所以保证了大多数场景下的高效性。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566956521,"ip_address":"","comment_id":128478,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566886350","product_id":100028001,"comment_content":"全局写锁，如果线程还没有提交或者回滚事务，其他线程无法获得锁<br>老师，默认的隔离级别是读未提交，不是会发生脏读吗，这里是不是有问题","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464966,"discussion_content":"默认情况下，seata认为大多数分布式业务涉及到脏读的可能性比较小，所以保证了大多数场景下的高效性。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566956521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128468,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1566884552,"is_pvip":false,"replies":[{"id":"48191","content":"可以考虑加餐","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1567130648,"ip_address":"","comment_id":128468,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566884552","product_id":100028001,"comment_content":"老师，会讲Paxos算法么，面试经常会问道","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464959,"discussion_content":"可以考虑加餐","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567130648,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128462,"user_name":"尔冬橙","can_delete":false,"product_type":"c1","uid":1225224,"ip_address":"","ucode":"0B013A49BC18DA","user_header":"https://static001.geekbang.org/account/avatar/00/12/b2/08/92f42622.jpg","comment_is_top":false,"comment_ctime":1566883840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566883840","product_id":100028001,"comment_content":"老师是全能！","like_count":0},{"had_liked":false,"id":128371,"user_name":"拒绝","can_delete":false,"product_type":"c1","uid":1335155,"ip_address":"","ucode":"CB0264C4D3FE17","user_header":"https://static001.geekbang.org/account/avatar/00/14/5f/73/bb3dc468.jpg","comment_is_top":false,"comment_ctime":1566875902,"is_pvip":false,"replies":[{"id":"47773","content":"这句话在哪看到的呢，没有太理解。seata是根据一个全局事务ID进行上下文传播的。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566956868,"ip_address":"","comment_id":128371,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566875902","product_id":100028001,"comment_content":"seata一阶段提交拿 全局锁 尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁。<br>这句话不理解，麻烦老师解答一下！","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464925,"discussion_content":"这句话在哪看到的呢，没有太理解。seata是根据一个全局事务ID进行上下文传播的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566956868,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1335155,"avatar":"https://static001.geekbang.org/account/avatar/00/14/5f/73/bb3dc468.jpg","nickname":"拒绝","note":"","ucode":"CB0264C4D3FE17","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6709,"discussion_content":"在seata的github上看到的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1567064758,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128356,"user_name":"LW","can_delete":false,"product_type":"c1","uid":1325297,"ip_address":"","ucode":"89820332658E98","user_header":"https://static001.geekbang.org/account/avatar/00/14/38/f1/996a070d.jpg","comment_is_top":false,"comment_ctime":1566873821,"is_pvip":false,"replies":[{"id":"47774","content":"对的，赞","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566956891,"ip_address":"","comment_id":128356,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566873821","product_id":100028001,"comment_content":"思考题：全局事务ID，应该是参照数据库的事务ID来实现一致性的吧","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464917,"discussion_content":"对的，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566956891,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":128245,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1566865616,"is_pvip":false,"replies":[{"id":"47779","content":"差不多，由事务协调器维护的全局写排他锁，来保证事务间的写隔离。","user_name":"作者回复","user_name_real":"刘超","uid":"1228576","ctime":1566957159,"ip_address":"","comment_id":128245,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1566865616","product_id":100028001,"comment_content":"通过查询未提交读的事务版本号？","like_count":0,"discussions":[{"author":{"id":1228576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bf/20/19d42715.jpg","nickname":"刘超","note":"","ucode":"CD56F93596E818","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464863,"discussion_content":"差不多，由事务协调器维护的全局写排他锁，来保证事务间的写隔离。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566957159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1186115,"avatar":"https://static001.geekbang.org/account/avatar/00/12/19/43/226ca347.jpg","nickname":"Michael 🛡YZY","note":"","ucode":"F1D2BF8489A7D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":44184,"discussion_content":"这种全局锁有没有相应的性能问题呢？还是可以忽略 个人对数据库锁这方面还需要反复消化","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572938918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}