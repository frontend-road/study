{"id":39858,"title":"18 | if语句、for语句和switch语句","content":"<p>在上两篇文章中，我主要为你讲解了与<code>go</code>语句、goroutine和Go语言调度器有关的知识和技法。</p><p>内容很多，你不用急于完全消化，可以在编程实践过程中逐步理解和感悟，争取夯实它们。</p><hr></hr><p>现在，让我们暂时走下神坛，回归民间。我今天要讲的<code>if</code>语句、<code>for</code>语句和<code>switch</code>语句都属于Go语言的基本流程控制语句。它们的语法看起来很朴素，但实际上也会有一些使用技巧和注意事项。我在本篇文章中会以一系列面试题为线索，为你讲述它们的用法。</p><p>那么，<strong>今天的问题是：使用携带<code>range</code>子句的<code>for</code>语句时需要注意哪些细节？</strong> 这是一个比较笼统的问题。我还是通过编程题来讲解吧。</p><blockquote>\n<p><span class=\"reference\">本问题中的代码都被放在了命令源码文件demo41.go的<code>main</code>函数中的。为了专注问题本身，本篇文章中展示的编程题会省略掉一部分代码包声明语句、代码包导入语句和<code>main</code>函数本身的声明部分。</span></p>\n</blockquote><pre><code>numbers1 := []int{1, 2, 3, 4, 5, 6}\nfor i := range numbers1 {\n\tif i == 3 {\n\t\tnumbers1[i] |= i\n\t}\n}\nfmt.Println(numbers1)\n</code></pre><p>我先声明了一个元素类型为<code>int</code>的切片类型的变量<code>numbers1</code>，在该切片中有6个元素值，分别是从<code>1</code>到<code>6</code>的整数。我用一条携带<code>range</code>子句的<code>for</code>语句去迭代<code>numbers1</code>变量中的所有元素值。</p><p>在这条<code>for</code>语句中，只有一个迭代变量<code>i</code>。我在每次迭代时，都会先去判断<code>i</code>的值是否等于<code>3</code>，如果结果为<code>true</code>，那么就让<code>numbers1</code>的第<code>i</code>个元素值与<code>i</code>本身做按位或的操作，再把操作结果作为<code>numbers1</code>的新的第<code>i</code>个元素值。最后我会打印出<code>numbers1</code>的值。</p><!-- [[[read_end]]] --><p>所以具体的问题就是，这段代码执行后会打印出什么内容？</p><p>这里的<strong>典型回答</strong>是：打印的内容会是<code>[1 2 3 7 5 6]</code>。</p><h2>问题解析</h2><p>你心算得到的答案是这样吗？让我们一起来复现一下这个计算过程。</p><p>当<code>for</code>语句被执行的时候，在<code>range</code>关键字右边的<code>numbers1</code>会先被求值。</p><p>这个位置上的代码被称为<code>range</code>表达式。<code>range</code>表达式的结果值可以是数组、数组的指针、切片、字符串、字典或者允许接收操作的通道中的某一个，并且结果值只能有一个。</p><p>对于不同种类的<code>range</code>表达式结果值，<code>for</code>语句的迭代变量的数量可以有所不同。</p><p>就拿我们这里的<code>numbers1</code>来说，它是一个切片，那么迭代变量就可以有两个，右边的迭代变量代表当次迭代对应的某一个元素值，而左边的迭代变量则代表该元素值在切片中的索引值。</p><p>那么，如果像本题代码中的<code>for</code>语句那样，只有一个迭代变量的情况意味着什么呢？这意味着，该迭代变量只会代表当次迭代对应的元素值的索引值。</p><p>更宽泛地讲，当只有一个迭代变量的时候，数组、数组的指针、切片和字符串的元素值都是无处安放的，我们只能拿到按照从小到大顺序给出的一个个索引值。</p><p>因此，这里的迭代变量<code>i</code>的值会依次是从<code>0</code>到<code>5</code>的整数。当<code>i</code>的值等于<code>3</code>的时候，与之对应的是切片中的第4个元素值<code>4</code>。对<code>4</code>和<code>3</code>进行按位或操作得到的结果是<code>7</code>。这就是答案中的第4个整数是<code>7</code>的原因了。</p><p><strong>现在，我稍稍修改一下上面的代码。我们再来估算一下打印内容。</strong></p><pre><code>numbers2 := [...]int{1, 2, 3, 4, 5, 6}\nmaxIndex2 := len(numbers2) - 1\nfor i, e := range numbers2 {\n\tif i == maxIndex2 {\n\t\tnumbers2[0] += e\n\t} else {\n\t\tnumbers2[i+1] += e\n\t}\n}\nfmt.Println(numbers2)\n</code></pre><p>注意，我把迭代的对象换成了<code>numbers2</code>。<code>numbers2</code>中的元素值同样是从<code>1</code>到<code>6</code>的6个整数，并且元素类型同样是<code>int</code>，但它是一个数组而不是一个切片。</p><p>在<code>for</code>语句中，我总是会对紧挨在当次迭代对应的元素后边的那个元素，进行重新赋值，新的值会是这两个元素的值之和。当迭代到最后一个元素时，我会把此<code>range</code>表达式结果值中的第一个元素值，替换为它的原值与最后一个元素值的和，最后，我会打印出<code>numbers2</code>的值。</p><p><strong>对于这段代码，我的问题依旧是：打印的内容会是什么？你可以先思考一下。</strong></p><p>好了，我要公布答案了。打印的内容会是<code>[7 3 5 7 9 11]</code>。我先来重现一下计算过程。当<code>for</code>语句被执行的时候，在<code>range</code>关键字右边的<code>numbers2</code>会先被求值。</p><p>这里需要注意两点：</p><ol>\n<li><code>range</code>表达式只会在<code>for</code>语句开始执行时被求值一次，无论后边会有多少次迭代；</li>\n<li><code>range</code>表达式的求值结果会被复制，也就是说，被迭代的对象是<code>range</code>表达式结果值的副本而不是原值。</li>\n</ol><p>基于这两个规则，我们接着往下看。在第一次迭代时，我改变的是<code>numbers2</code>的第二个元素的值，新值为<code>3</code>，也就是<code>1</code>和<code>2</code>之和。</p><p>但是，被迭代的对象的第二个元素却没有任何改变，毕竟它与<code>numbers2</code>已经是毫不相关的两个数组了。因此，在第二次迭代时，我会把<code>numbers2</code>的第三个元素的值修改为<code>5</code>，即被迭代对象的第二个元素值<code>2</code>和第三个元素值<code>3</code>的和。</p><p>以此类推，之后的<code>numbers2</code>的元素值依次会是<code>7</code>、<code>9</code>和<code>11</code>。当迭代到最后一个元素时，我会把<code>numbers2</code>的第一个元素的值修改为<code>1</code>和<code>6</code>之和。</p><p>好了，现在该你操刀了。你需要把<code>numbers2</code>的值由一个数组改成一个切片，其中的元素值都不要变。为了避免混淆，你还要把这个切片值赋给变量<code>numbers3</code>，并且把后边代码中所有的<code>numbers2</code>都改为<code>numbers3</code>。</p><p>问题是不变的，执行这段修改版的代码后打印的内容会是什么呢？如果你实在估算不出来，可以先实际执行一下，然后再尝试解释看到的答案。提示一下，切片与数组是不同的，前者是引用类型的，而后者是值类型的。</p><p>我们可以先接着讨论后边的内容，但是我强烈建议你一定要回来，再看看我留给你的这个问题，认真地思考和计算一下。</p><p><strong>知识扩展</strong></p><p><strong>问题1：<code>switch</code>语句中的<code>switch</code>表达式和<code>case</code>表达式之间有着怎样的联系？</strong></p><p>先来看一段代码。</p><pre><code>value1 := [...]int8{0, 1, 2, 3, 4, 5, 6}\nswitch 1 + 3 {\ncase value1[0], value1[1]:\n\tfmt.Println(&quot;0 or 1&quot;)\ncase value1[2], value1[3]:\n\tfmt.Println(&quot;2 or 3&quot;)\ncase value1[4], value1[5], value1[6]:\n\tfmt.Println(&quot;4 or 5 or 6&quot;)\n}\n</code></pre><p>我先声明了一个数组类型的变量<code>value1</code>，该变量的元素类型是<code>int8</code>。在后边的<code>switch</code>语句中，被夹在<code>switch</code>关键字和左花括号<code>{</code>之间的是<code>1 + 3</code>，这个位置上的代码被称为<code>switch</code>表达式。这个<code>switch</code>语句还包含了三个<code>case</code>子句，而每个<code>case</code>子句又各包含了一个<code>case</code>表达式和一条打印语句。</p><p>所谓的<code>case</code>表达式一般由<code>case</code>关键字和一个表达式列表组成，表达式列表中的多个表达式之间需要有英文逗号<code>,</code>分割，比如，上面代码中的<code>case value1[0], value1[1]</code>就是一个<code>case</code>表达式，其中的两个子表达式都是由索引表达式表示的。</p><p>另外的两个<code>case</code>表达式分别是<code>case value1[2], value1[3]</code>和<code>case value1[4], value1[5], value1[6]</code>。</p><p>此外，在这里的每个<code>case</code>子句中的那些打印语句，会分别打印出不同的内容，这些内容用于表示<code>case</code>子句被选中的原因，比如，打印内容<code>0 or 1</code>表示当前<code>case</code>子句被选中是因为<code>switch</code>表达式的结果值等于<code>0</code>或<code>1</code>中的某一个。另外两条打印语句会分别打印出<code>2 or 3</code>和<code>4 or 5 or 6</code>。</p><p>现在问题来了，拥有这样三个<code>case</code>表达式的<code>switch</code>语句可以成功通过编译吗？如果不可以，原因是什么？如果可以，那么该<code>switch</code>语句被执行后会打印出什么内容。</p><p>我刚才说过，只要<code>switch</code>表达式的结果值与某个<code>case</code>表达式中的任意一个子表达式的结果值相等，该<code>case</code>表达式所属的<code>case</code>子句就会被选中。</p><p>并且，一旦某个<code>case</code>子句被选中，其中的附带在<code>case</code>表达式后边的那些语句就会被执行。与此同时，其他的所有<code>case</code>子句都会被忽略。</p><p>当然了，如果被选中的<code>case</code>子句附带的语句列表中包含了<code>fallthrough</code>语句，那么紧挨在它下边的那个<code>case</code>子句附带的语句也会被执行。</p><p>正因为存在上述判断相等的操作（以下简称判等操作），<code>switch</code>语句对<code>switch</code>表达式的结果类型，以及各个<code>case</code>表达式中子表达式的结果类型都是有要求的。毕竟，在Go语言中，只有类型相同的值之间才有可能被允许进行判等操作。</p><p>如果<code>switch</code>表达式的结果值是无类型的常量，比如<code>1 + 3</code>的求值结果就是无类型的常量<code>4</code>，那么这个常量会被自动地转换为此种常量的默认类型的值，比如整数<code>4</code>的默认类型是<code>int</code>，又比如浮点数<code>3.14</code>的默认类型是<code>float64</code>。</p><p>因此，由于上述代码中的<code>switch</code>表达式的结果类型是<code>int</code>，而那些<code>case</code>表达式中子表达式的结果类型却是<code>int8</code>，它们的类型并不相同，所以这条<code>switch</code>语句是无法通过编译的。</p><p>再来看一段很类似的代码：</p><pre><code>value2 := [...]int8{0, 1, 2, 3, 4, 5, 6}\nswitch value2[4] {\ncase 0, 1:\n\tfmt.Println(&quot;0 or 1&quot;)\ncase 2, 3:\n\tfmt.Println(&quot;2 or 3&quot;)\ncase 4, 5, 6:\n\tfmt.Println(&quot;4 or 5 or 6&quot;)\n}\n</code></pre><p>其中的变量<code>value2</code>与<code>value1</code>的值是完全相同的。但不同的是，我把<code>switch</code>表达式换成了<code>value2[4]</code>，并把下边那三个<code>case</code>表达式分别换为了<code>case 0, 1</code>、<code>case 2, 3</code>和<code>case 4, 5, 6</code>。</p><p>如此一来，<code>switch</code>表达式的结果值是<code>int8</code>类型的，而那些<code>case</code>表达式中子表达式的结果值却是无类型的常量了。这与之前的情况恰恰相反。那么，这样的<code>switch</code>语句可以通过编译吗？</p><p>答案是肯定的。因为，如果<code>case</code>表达式中子表达式的结果值是无类型的常量，那么它的类型会被自动地转换为<code>switch</code>表达式的结果类型，又由于上述那几个整数都可以被转换为<code>int8</code>类型的值，所以对这些表达式的结果值进行判等操作是没有问题的。</p><p>当然了，如果这里说的自动转换没能成功，那么<code>switch</code>语句照样通不过编译。</p><p><img src=\"https://static001.geekbang.org/resource/image/91/1c/91add0a66b9956f81086285aabc20c1c.png?wh=1402*631\" alt=\"\"></p><p>（switch语句中的自动类型转换）</p><p>通过上面这两道题，你应该可以搞清楚<code>switch</code>表达式和<code>case</code>表达式之间的联系了。由于需要进行判等操作，所以前者和后者中的子表达式的结果类型需要相同。</p><p><code>switch</code>语句会进行有限的类型转换，但肯定不能保证这种转换可以统一它们的类型。还要注意，如果这些表达式的结果类型有某个接口类型，那么一定要小心检查它们的动态值是否都具有可比性（或者说是否允许判等操作）。</p><p>因为，如果答案是否定的，虽然不会造成编译错误，但是后果会更加严重：引发panic（也就是运行时恐慌）。</p><p><strong>问题2：<code>switch</code>语句对它的<code>case</code>表达式有哪些约束？</strong></p><p>我在上一个问题的阐述中还重点表达了一点，不知你注意到了没有，那就是：<code>switch</code>语句在<code>case</code>子句的选择上是具有唯一性的。</p><p>正因为如此，<code>switch</code>语句不允许<code>case</code>表达式中的子表达式结果值存在相等的情况，不论这些结果值相等的子表达式，是否存在于不同的<code>case</code>表达式中，都会是这样的结果。具体请看这段代码：</p><pre><code>value3 := [...]int8{0, 1, 2, 3, 4, 5, 6}\nswitch value3[4] {\ncase 0, 1, 2:\n\tfmt.Println(&quot;0 or 1 or 2&quot;)\ncase 2, 3, 4:\n\tfmt.Println(&quot;2 or 3 or 4&quot;)\ncase 4, 5, 6:\n\tfmt.Println(&quot;4 or 5 or 6&quot;)\n}\n</code></pre><p>变量<code>value3</code>的值同<code>value1</code>，依然是由从<code>0</code>到<code>6</code>的7个整数组成的数组，元素类型是<code>int8</code>。<code>switch</code>表达式是<code>value3[4]</code>，三个<code>case</code>表达式分别是<code>case 0, 1, 2</code>、<code>case 2, 3, 4</code>和<code>case 4, 5, 6</code>。</p><p>由于在这三个<code>case</code>表达式中存在结果值相等的子表达式，所以这个<code>switch</code>语句无法通过编译。不过，好在这个约束本身还有个约束，那就是只针对结果值为常量的子表达式。</p><p>比如，子表达式<code>1+1</code>和<code>2</code>不能同时出现，<code>1+3</code>和<code>4</code>也不能同时出现。有了这个约束的约束，我们就可以想办法绕过这个对子表达式的限制了。再看一段代码：</p><pre><code>value5 := [...]int8{0, 1, 2, 3, 4, 5, 6}\nswitch value5[4] {\ncase value5[0], value5[1], value5[2]:\n\tfmt.Println(&quot;0 or 1 or 2&quot;)\ncase value5[2], value5[3], value5[4]:\n\tfmt.Println(&quot;2 or 3 or 4&quot;)\ncase value5[4], value5[5], value5[6]:\n\tfmt.Println(&quot;4 or 5 or 6&quot;)\n}\n</code></pre><p>变量名换成了<code>value5</code>，但这不是重点。重点是，我把<code>case</code>表达式中的常量都换成了诸如<code>value5[0]</code>这样的索引表达式。</p><p>虽然第一个<code>case</code>表达式和第二个<code>case</code>表达式都包含了<code>value5[2]</code>，并且第二个<code>case</code>表达式和第三个<code>case</code>表达式都包含了<code>value5[4]</code>，但这已经不是问题了。这条<code>switch</code>语句可以成功通过编译。</p><p>不过，这种绕过方式对用于类型判断的<code>switch</code>语句（以下简称为类型<code>switch</code>语句）就无效了。因为类型<code>switch</code>语句中的<code>case</code>表达式的子表达式，都必须直接由类型字面量表示，而无法通过间接的方式表示。代码如下：</p><pre><code>value6 := interface{}(byte(127))\nswitch t := value6.(type) {\ncase uint8, uint16:\n\tfmt.Println(&quot;uint8 or uint16&quot;)\ncase byte:\n\tfmt.Printf(&quot;byte&quot;)\ndefault:\n\tfmt.Printf(&quot;unsupported type: %T&quot;, t)\n}\n</code></pre><p>变量<code>value6</code>的值是空接口类型的。该值包装了一个<code>byte</code>类型的值<code>127</code>。我在后面使用类型<code>switch</code>语句来判断<code>value6</code>的实际类型，并打印相应的内容。</p><p>这里有两个普通的<code>case</code>子句，还有一个<code>default case</code>子句。前者的<code>case</code>表达式分别是<code>case uint8, uint16</code>和<code>case byte</code>。你还记得吗？<code>byte</code>类型是<code>uint8</code>类型的别名类型。</p><p>因此，它们两个本质上是同一个类型，只是类型名称不同罢了。在这种情况下，这个类型<code>switch</code>语句是无法通过编译的，因为子表达式<code>byte</code>和<code>uint8</code>重复了。好了，以上说的就是<code>case</code>表达式的约束以及绕过方式，你学会了吗。</p><p><strong>总结</strong></p><p>我们今天主要讨论了<code>for</code>语句和<code>switch</code>语句，不过我并没有说明那些语法规则，因为它们太简单了。我们需要多加注意的往往是那些隐藏在Go语言规范和最佳实践里的细节。</p><p>这些细节其实就是我们很多技术初学者所谓的“坑”。比如，我在讲<code>for</code>语句的时候交代了携带<code>range</code>子句时只有一个迭代变量意味着什么。你必须知道在迭代数组或切片时只有一个迭代变量的话是无法迭代出其中的元素值的，否则你的程序可能就不会像你预期的那样运行了。</p><p>还有，<code>range</code>表达式的结果值是会被复制的，实际迭代时并不会使用原值。至于会影响到什么，那就要看这个结果值的类型是值类型还是引用类型了。</p><p>说到<code>switch</code>语句，你要明白其中的<code>case</code>表达式的所有子表达式的结果值都是要与<code>switch</code>表达式的结果值判等的，因此它们的类型必须相同或者能够都统一到<code>switch</code>表达式的结果类型。如果无法做到，那么这条<code>switch</code>语句就不能通过编译。</p><p>最后，同一条<code>switch</code>语句中的所有<code>case</code>表达式的子表达式的结果值不能重复，不过好在这只是对于由字面量直接表示的子表达式而言的。</p><p>请记住，普通<code>case</code>子句的编写顺序很重要，最上边的<code>case</code>子句中的子表达式总是会被最先求值，在判等的时候顺序也是这样。因此，如果某些子表达式的结果值有重复并且它们与<code>switch</code>表达式的结果值相等，那么位置靠上的<code>case</code>子句总会被选中。</p><p><strong>思考题</strong></p><ol>\n<li>在类型<code>switch</code>语句中，我们怎样对被判断类型的那个值做相应的类型转换？</li>\n<li>在<code>if</code>语句中，初始化子句声明的变量的作用域是什么？</li>\n</ol><p><a href=\"https://github.com/hyper0x/Golang_Puzzlers\">戳此查看Go语言专栏文章配套详细代码。</a></p><p></p>","neighbors":{"left":{"article_title":"17 | go语句及其执行规则（下）","id":39844},"right":{"article_title":"19 | 错误处理（上）","id":40311}},"comments":[{"had_liked":false,"id":25884,"user_name":"咖啡色的羊驼","can_delete":false,"product_type":"c1","uid":1112900,"ip_address":"","ucode":"84E288A5665A3A","user_header":"https://static001.geekbang.org/account/avatar/00/10/fb/44/8b2600fd.jpg","comment_is_top":false,"comment_ctime":1537460475,"is_pvip":false,"replies":[{"id":"9672","content":"好，继续加油吧。","user_name":"作者回复","comment_id":25884,"uid":"1026643","ip_address":"","utype":1,"ctime":1537690918,"user_name_real":"郝林"}],"discussion_count":1,"race_medal":0,"score":"113206610171","product_id":100013101,"comment_content":"好久没留言了，<br><br>1.断言判断value.(type)<br>2.if的判断的域和后面跟着的花括号里头的域。和函数雷同，参数和花括号里头的域同一个","like_count":27,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424442,"discussion_content":"好，继续加油吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537690918,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":94844,"user_name":"Zzz","can_delete":false,"product_type":"c1","uid":1116272,"ip_address":"","ucode":"4AA47797F48315","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIu1n1DhUGGKTjelrQaLYOSVK2rsFeia0G8ASTIftib5PTOx4pTqdnfwb0NiaEFGRgS661nINyZx9sUg/132","comment_is_top":false,"comment_ctime":1557908942,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"100342156750","product_id":100013101,"comment_content":"个人理解： for .. range ..  实际上可以认为是方法调用的语法糖，range后面的变量就是方法参数，对于数组类型的变量，传入的参数是数组的副本，更新的是原数组的元素，取的是副本数组的元素；对于切片类型的变量，传入的参数是切片的副本，但是它指向的底层数组与原切片相同，所以取的元素和更新的元素都是同一个数组的元素。","like_count":23},{"had_liked":false,"id":132082,"user_name":"大王叫我来巡山","can_delete":false,"product_type":"c1","uid":1099513,"ip_address":"","ucode":"1B8D0C701BC95E","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","comment_is_top":false,"comment_ctime":1568020025,"is_pvip":false,"replies":[{"id":"50623","content":"这些语法细节你要是不注意的话，说不定什么时候就会“踩坑”。文章中的代码是为了演示原理而设计的，因此不一定适用于生产。<br><br>你可以去看看哪些热门开源项目的代码，里面仍然会有体现这些知识点的代码。所以不充分理解这些，可能看复杂些的项目源码都费劲。","user_name":"作者回复","comment_id":132082,"uid":"1026643","ip_address":"","utype":1,"ctime":1568095212,"user_name_real":"郝林"}],"discussion_count":2,"race_medal":0,"score":"65992529465","product_id":100013101,"comment_content":"了解这些只能证明您对这个语言足够的了解，但是实际中谁会写这么蛋疼的代码呢，这一篇通篇其实说明的还是go语言中关于类型转换的内容","like_count":15,"discussions":[{"author":{"id":1099513,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c6/f9/caf27bd3.jpg","nickname":"大王叫我来巡山","note":"","ucode":"1B8D0C701BC95E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":8912,"discussion_content":"谢谢老师指导","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1568098883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":466753,"discussion_content":"这些语法细节你要是不注意的话，说不定什么时候就会“踩坑”。文章中的代码是为了演示原理而设计的，因此不一定适用于生产。\n\n你可以去看看哪些热门开源项目的代码，里面仍然会有体现这些知识点的代码。所以不充分理解这些，可能看复杂些的项目源码都费劲。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1568095212,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":44634,"user_name":"澎湃哥","can_delete":false,"product_type":"c1","uid":1016940,"ip_address":"","ucode":"A8D9A857AAB879","user_header":"https://static001.geekbang.org/account/avatar/00/0f/84/6c/effc3a5a.jpg","comment_is_top":false,"comment_ctime":1543467473,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57378042321","product_id":100013101,"comment_content":"好像还没有人回答数组变切片的问题，贴一下运行结果吧：<br>i:0, e:1<br>i:1, e:3<br>i:2, e:6<br>i:3, e:10<br>i:4, e:15<br>i:5, e:21<br>[22 3 6 10 15 21]<br><br>每次循环打印了一个索引和值，看起来 range 切片的话，是会每次取 slice[i] 的值，但是应该还是发生了拷贝，不能通过 e 直接修改原值。","like_count":13},{"had_liked":false,"id":160143,"user_name":"Felix","can_delete":false,"product_type":"c1","uid":1317899,"ip_address":"","ucode":"9318688F3C5419","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJAWUhO0xSjD6wbGScY5WOujAE94vNYWlWmsVdibb0IWbXzSSNXJHp0lqfWVq8ZicKBsEY1EuAWArew/132","comment_is_top":false,"comment_ctime":1575879386,"is_pvip":true,"replies":[{"id":"61211","content":"对，所以我们才称切片为引用类型。它本身只是底层数组及其存储状态的一种描述。","user_name":"作者回复","comment_id":160143,"uid":"1026643","ip_address":"","utype":1,"ctime":1575948423,"user_name_real":"郝林"}],"discussion_count":1,"race_medal":0,"score":"31640650458","product_id":100013101,"comment_content":"关于数组变切片那个地方。我理解如下：切片自己不拥有任何数据，它只是底层数组的一种表示，对切片的任何操作都会被反映到底层数组中去。 <br>package main<br><br>import &quot;fmt&quot;<br><br>func main() {<br><br>\tnumbers3 := []int{1, 2, 3, 4, 5, 6}<br>\tmaxIndex3 := len(numbers2) - 1 &#47;&#47;6-1= 5<br>\tfor i, e := range numbers3 {  &#47;&#47; 0:1 1:2 2:3 3:4 4:5 5:6<br>\t\tif i == maxIndex3 {   &#47;&#47; 5<br>\t\t\tnumbers3[0] += e  &#47;&#47; 0,7<br>\t\t} else {<br>\t\t\tnumbers3[i+1] += e  &#47;&#47; 1:3<br>\t\t}<br>\t\t&#47;&#47; 0:1 1:(1+2)3 2:3 3:4 4:5 5:6<br>\t\t&#47;&#47; 0:1 1:3 2:(3+3)6 3:4 4:5 5:6<br>\t\t&#47;&#47; 0:1 1:3 2:6 3:(6+4)10 4:5 5:6<br>\t\t&#47;&#47; 0:1 1:3 2:6 3:10 4:(10+5)15 5:6<br>\t\t&#47;&#47; 0:1 1:3 2:6 3:10 4:15 5:(15+6)21<br>\t\t&#47;&#47; 0:(21+1)22 1:3 2:6 3:10 4:15 5:21<br>\t\t&#47;&#47; 22 3 6 10 15 21<br>\t}<br>\tfmt.Println(numbers3)<br>}","like_count":7,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477269,"discussion_content":"对，所以我们才称切片为引用类型。它本身只是底层数组及其存储状态的一种描述。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575948423,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":34517,"user_name":"Leon📷","can_delete":false,"product_type":"c1","uid":1219496,"ip_address":"","ucode":"B9BBD1EFAAE5A2","user_header":"https://static001.geekbang.org/account/avatar/00/12/9b/a8/6a391c66.jpg","comment_is_top":false,"comment_ctime":1540197695,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"31604968767","product_id":100013101,"comment_content":"val.(type)需要提前将类型转换成interface{},一楼的留言有点问题","like_count":8,"discussions":[{"author":{"id":1657948,"avatar":"https://static001.geekbang.org/account/avatar/00/19/4c/5c/9ea0f752.jpg","nickname":"程序猿不圆","note":"","ucode":"BC8926A84A07C8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370677,"discussion_content":"大哥，我至少在4个专栏下面里的留言看到你。。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1619507405,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":25881,"user_name":"Dr.Li","can_delete":false,"product_type":"c1","uid":1025671,"ip_address":"","ucode":"A26A4183504B6B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a6/87/e802a33e.jpg","comment_is_top":false,"comment_ctime":1537460348,"is_pvip":false,"replies":[{"id":"9673","content":"要包容：）工具而已。","user_name":"作者回复","comment_id":25881,"uid":"1026643","ip_address":"","utype":1,"ctime":1537690966,"user_name_real":"郝林"}],"discussion_count":2,"race_medal":0,"score":"27307264124","product_id":100013101,"comment_content":"感觉go的语法有点变态啊","like_count":7,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424440,"discussion_content":"要包容：）工具而已。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537690966,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2806043,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLBFkSq1oiaEMRjtyyv4ZpCI0OuaSsqs04ODm0OkZF6QhsAh3SvqhxibS2n7PLAVZE3QRSn5Hic0DyXg/132","nickname":"ddh","note":"","ucode":"8E852375365F16","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541044,"discussion_content":"哪里变态了呀\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640241390,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116470,"user_name":"博博","can_delete":false,"product_type":"c1","uid":1490403,"ip_address":"","ucode":"79FF6249DFC047","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/GBU53SA3W8GNRAwZIicc3gTEc0nSvfPJw7iboAMicjicmP6egDcibib28DkUfTYOjMd31DIznmofdRZrpIXvmXvjV1PQ/132","comment_is_top":false,"comment_ctime":1563853793,"is_pvip":false,"replies":[{"id":"42643","content":"你看的是 Go 的源码吗？我没找到这段代码。不过我看了下 mapiterinit 函数的代码。其中还是有复制的。只不过，对于这些引用类型的值来说，即使有复制也只会复制一些指针而已，底层数据结构是不会被赋值的。","user_name":"作者回复","comment_id":116470,"uid":"1026643","ip_address":"","utype":1,"ctime":1563890468,"user_name_real":"郝林"}],"discussion_count":1,"race_medal":0,"score":"23038690273","product_id":100013101,"comment_content":"老师遇到一个问题，希望能帮忙解答下！<br>您在文章中说range表达式的结果值是会被复制的，那么是所有的都会被复制么？ 我看了资料，发现字典和通道类型好像没有发生复制！<br><br>&#47;&#47; Lower a for range over a map.<br>&#47;&#47; The loop we generate:<br>&#47;&#47;   var hiter map_iteration_struct<br>&#47;&#47;   for mapiterinit(type, range, &amp;hiter); hiter.key != nil; mapiternext(&amp;hiter) {<br>&#47;&#47;           index_temp = *hiter.key<br>&#47;&#47;           value_temp = *hiter.val<br>&#47;&#47;           index = index_temp<br>&#47;&#47;           value = value_temp<br>&#47;&#47;           original body<br>&#47;&#47;   }<br>很是疑惑，希望能得到指点！谢谢","like_count":5,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459557,"discussion_content":"你看的是 Go 的源码吗？我没找到这段代码。不过我看了下 mapiterinit 函数的代码。其中还是有复制的。只不过，对于这些引用类型的值来说，即使有复制也只会复制一些指针而已，底层数据结构是不会被赋值的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563890468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":52998,"user_name":"hiyanxu","can_delete":false,"product_type":"c1","uid":1221750,"ip_address":"","ucode":"FA46A318154812","user_header":"https://static001.geekbang.org/account/avatar/00/12/a4/76/585dc6b3.jpg","comment_is_top":false,"comment_ctime":1545566853,"is_pvip":false,"replies":[{"id":"19216","content":"迭代变量是副本。另外在Go程序里的变量地址是不能完全说明问题的，因为goroutine的栈空间有可能会被优化。","user_name":"作者回复","comment_id":52998,"uid":"1026643","ip_address":"","utype":1,"ctime":1545575814,"user_name_real":"郝林"}],"discussion_count":3,"race_medal":0,"score":"23020403333","product_id":100013101,"comment_content":"老师，我想问一下，range的副本，是说k、v是副本，还是被迭代的数组是副本？<br>我自己测试在for的里面和外面数组地址是一样的","like_count":5,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":434013,"discussion_content":"迭代变量是副本。另外在Go程序里的变量地址是不能完全说明问题的，因为goroutine的栈空间有可能会被优化。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1545575814,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2621412,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ff/e4/927547a9.jpg","nickname":"无名无姓","note":"","ucode":"487BD5AA2CD305","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":532122,"discussion_content":"三年多了，老师还在进行回复，给老师点个👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637542755,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":434013,"ip_address":""},"score":532122,"extra":"{\"user_type\":1}"}]},{"author":{"id":1524242,"avatar":"https://static001.geekbang.org/account/avatar/00/17/42/12/928fa044.jpg","nickname":"杨阳","note":"","ucode":"88FA5140EEE153","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":323781,"discussion_content":"老师的意思被迭代的数组是副本？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604995483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":30678,"user_name":"江山如画","can_delete":false,"product_type":"c1","uid":1188280,"ip_address":"","ucode":"BEB6228E6135B5","user_header":"https://static001.geekbang.org/account/avatar/00/12/21/b8/aca814dd.jpg","comment_is_top":false,"comment_ctime":1538971882,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"23013808362","product_id":100013101,"comment_content":"第一个问题，在类型switch语句中，如何对被判断类型的那个值做类型转换，尝试在 switch 语句中重新定义了一个 uint8 类型的变量和被判断类型的值做加法操作，一共尝试了三种方法，发现需要使用 type assertion 才可以，强转或者直接相加都会出错。<br><br>转换语句是：val.(uint8)<br><br>完整验证代码：<br><br>val := interface{}(byte(1))<br>switch t := val.(type) {<br>case uint8:<br>\tvar c uint8 = 2<br><br>\t&#47;&#47;use type assertion<br>\tfmt.Println(c + val.(uint8))<br><br>\t&#47;&#47;invalid operation: c + val (mismatched types uint8 and interface {})<br>\t&#47;&#47;fmt.Println(c + val)<br><br>\t&#47;&#47;cannot convert val (type interface {}) to type uint8: need type assertion<br>\t&#47;&#47;fmt.Println(c + uint8(val))<br><br>default:<br>\tfmt.Printf(&quot;unsupported type: %T&quot;, t)<br>}<br><br>第二个问题，在if语句中，初始化子句声明的变量的作用域是在该if语句之内，if语句之外使用该变量会提示 “undefined”。<br><br>验证代码：<br><br>m := make(map[int]bool)<br>if _, ok := m[1]; ok {<br>\tfmt.Printf(&quot;exist: %v\\n&quot;, ok)<br>} else {<br>\tfmt.Printf(&quot;not exist: %v\\n&quot;, ok)<br>}<br><br>&#47;&#47;fmt.Println(ok)  &#47;&#47;报错，提示 undefined: ok","like_count":6,"discussions":[{"author":{"id":1260026,"avatar":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","nickname":"安排","note":"","ucode":"F78CFA9624CAEF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":130951,"discussion_content":"go 1.10.4没有报错","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578812099,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28312,"user_name":"yandongxiao","can_delete":false,"product_type":"c1","uid":1017700,"ip_address":"","ucode":"D397F4DB0109C8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/87/64/3882d90d.jpg","comment_is_top":false,"comment_ctime":1538048219,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14422950107","product_id":100013101,"comment_content":"咖啡色的羊驼的答案貌似是错误的吧？<br>1. 在类型switch语句中，t := value6.(type)；匹配到哪个case表达式，t就会是哪种具体的数据类型；<br>2. 在if语句中，子句声明的变量的作用域  比 随后的花括号内的变量的的作用域  更大<br>\tif a := 10; a &gt; 0 {<br>\t\ta := 20<br>\t\tprintln(a)<br>\t}<br>反证法：如果咖啡色的羊驼说的对，上面的语句不应该编译通过才对。<br><br>关于2这个细微的差异，也适用于for i:=0; i&lt;10; i++ 语句。<br>在for语句中的使用匿名函数，很可能出现“loop variable capture”问题。根本原因也是i的作用域与{}中的变量的作用域是不同的。","like_count":4,"discussions":[{"author":{"id":1217554,"avatar":"https://static001.geekbang.org/account/avatar/00/12/94/12/15558f28.jpg","nickname":"Jason","note":"","ucode":"C5A540BC5A60B9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210186,"discussion_content":"我也同意你得观点，在if语句里初始化的变量的作用域更大，而在大括号里的a其实和if是两个作用域，a:=20通过打印地址其实和上面的是两个变量","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584713219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":26540,"user_name":"茶底","can_delete":false,"product_type":"c1","uid":1188926,"ip_address":"","ucode":"687DD3686A84D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/24/3e/692a93f7.jpg","comment_is_top":false,"comment_ctime":1537661578,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14422563466","product_id":100013101,"comment_content":"老师什么时候讲逃逸分析啊","like_count":3},{"had_liked":false,"id":291863,"user_name":"while (1)等;","can_delete":false,"product_type":"c1","uid":1061991,"ip_address":"","ucode":"BAEC7258D65B69","user_header":"https://static001.geekbang.org/account/avatar/00/10/34/67/06a7f9be.jpg","comment_is_top":false,"comment_ctime":1620554628,"is_pvip":true,"replies":[{"id":"105708","content":"不是指针的副本，是切片结构体的副本，切片结构体中有指向底层数组的指针。这个副本与原本会指向同一个底层数组。","user_name":"作者回复","comment_id":291863,"uid":"1026643","ip_address":"","utype":1,"ctime":1620624175,"user_name_real":"郝林"}],"discussion_count":1,"race_medal":0,"score":"10210489220","product_id":100013101,"comment_content":"文中说“被迭代的对象是range表达式结果值的副本而不是原值。”，那被迭代的对象是切片时，可以理解为指针的副本吗？也就是指针和指针的副本指向同一地址？","like_count":3,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":519586,"discussion_content":"不是指针的副本，是切片结构体的副本，切片结构体中有指向底层数组的指针。这个副本与原本会指向同一个底层数组。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1620624175,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282263,"user_name":"Rico","can_delete":false,"product_type":"c1","uid":2040512,"ip_address":"","ucode":"9EFA5A95F78CCB","user_header":"https://static001.geekbang.org/account/avatar/00/1f/22/c0/177d6750.jpg","comment_is_top":false,"comment_ctime":1615177692,"is_pvip":false,"replies":[{"id":"102515","content":"第二个回答不太严谨，应该是：if语句块内，因为 else 的 {} 也是包含其中的。","user_name":"作者回复","comment_id":282263,"uid":"1026643","ip_address":"","utype":1,"ctime":1615204441,"user_name_real":"郝林"}],"discussion_count":2,"race_medal":0,"score":"10205112284","product_id":100013101,"comment_content":"在类型switch语句中，我们怎样对被判断类型的那个值做相应的类型转换？<br>------val.(type)<br><br>在if语句中，初始化子句声明的变量的作用域是什么？<br>-------变量作用域为if语句{}内部的范围<br>","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516682,"discussion_content":"第二个回答不太严谨，应该是：if语句块内，因为 else 的 {} 也是包含其中的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615204441,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2040512,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/22/c0/177d6750.jpg","nickname":"Rico","note":"","ucode":"9EFA5A95F78CCB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":355288,"discussion_content":"if语句块内\n\n谢谢老师的指正！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615393425,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":26253,"user_name":"hua","can_delete":false,"product_type":"c1","uid":1109252,"ip_address":"","ucode":"5FF4D4C346EC86","user_header":"https://static001.geekbang.org/account/avatar/00/10/ed/04/a63ed1e3.jpg","comment_is_top":false,"comment_ctime":1537527838,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10127462430","product_id":100013101,"comment_content":"把总结结论放在最前面再看主体内容会容易理解得多。","like_count":2},{"had_liked":false,"id":26150,"user_name":"后端进阶","can_delete":false,"product_type":"c1","uid":1125656,"ip_address":"","ucode":"480F48F5378307","user_header":"https://static001.geekbang.org/account/avatar/00/11/2d/18/918eaecf.jpg","comment_is_top":false,"comment_ctime":1537506282,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10127440874","product_id":100013101,"comment_content":"真的很喜欢go的语法与简洁的哲学","like_count":2},{"had_liked":false,"id":26072,"user_name":"My dream","can_delete":false,"product_type":"c1","uid":1077733,"ip_address":"","ucode":"2FEFB344230C17","user_header":"https://static001.geekbang.org/account/avatar/00/10/71/e5/bcdc382a.jpg","comment_is_top":false,"comment_ctime":1537495948,"is_pvip":false,"replies":[{"id":"9671","content":"主要是写Web端的时候有些用，不过我不觉得用处很大，因为现在大型网站都是前后端分离的。最后我视情况而定吧。","user_name":"作者回复","comment_id":26072,"uid":"1026643","ip_address":"","utype":1,"ctime":1537690877,"user_name_real":"郝林"}],"discussion_count":1,"race_medal":0,"score":"10127430540","product_id":100013101,"comment_content":"Go1.11已经正式发布，最大的一个亮点是增加了对WebAssembly的实验性支持。老师要讲一下不？我们都不懂这个有什么意义","like_count":2,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":424517,"discussion_content":"主要是写Web端的时候有些用，不过我不觉得用处很大，因为现在大型网站都是前后端分离的。最后我视情况而定吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1537690877,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352012,"user_name":"jack","can_delete":false,"product_type":"c1","uid":1254562,"ip_address":"","ucode":"040741A40A47B9","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/a2/d61e4e28.jpg","comment_is_top":false,"comment_ctime":1658325747,"is_pvip":true,"replies":[{"id":"128059","content":"功能上可以，性能上还有待进一步推敲。比如：不用锁。","user_name":"作者回复","comment_id":352012,"uid":"1026643","ip_address":"","utype":1,"ctime":1658390472,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":1,"score":"1658325747","product_id":100013101,"comment_content":"        index := 0<br>\tvar mu sync.Mutex<br>\tfp := func(i int, fn func()) {<br>\t\tfor {<br>\t\t\tmu.Lock()<br>\t\t\tif index == i {<br>\t\t\t\tfn()<br>\t\t\t\tindex++<br>\t\t\t\tmu.Unlock()<br>\t\t\t\tbreak<br>\t\t\t}<br>\t\t\tmu.Unlock()<br>\t\t\ttime.Sleep(time.Nanosecond)<br>\t\t}<br>\t}<br>\tfor i := 0; i &lt; 10; i++ {<br>\t\tgo func(i int) {<br>\t\t\tfn := func() {<br>\t\t\t\tfmt.Println(i)<br>\t\t\t}<br>\t\t\tfp(i, fn)<br>\t\t}(i)<br>\t}<br>\t&#47;&#47; 这里就简单点了，不用 sync.WaitGroup 等那些结束了<br>\ttime.Sleep(time.Second)","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580852,"discussion_content":"功能上可以，性能上还有待进一步推敲。比如：不用锁。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658390472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346697,"user_name":"Jason","can_delete":false,"product_type":"c1","uid":1217554,"ip_address":"","ucode":"C5A540BC5A60B9","user_header":"https://static001.geekbang.org/account/avatar/00/12/94/12/15558f28.jpg","comment_is_top":false,"comment_ctime":1653364950,"is_pvip":false,"replies":[{"id":"126630","content":"你的最后一句话其实已经带出了答案。这也是为了安全考虑。","user_name":"作者回复","comment_id":346697,"uid":"1026643","ip_address":"","utype":1,"ctime":1653892025,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1653364950","product_id":100013101,"comment_content":"老师，我在Go编译器源码的statements.cc里找到了range的原型，其实是对数组本身做了整体拷贝，后面的循环都是基于这个副本。我想问问老师，为什么range表达式要去做拷贝呢，明明代价更高了。还是说go设计range的初衷就是读取，真要修改就使用传统的for循环，期待老师的回答<br>&#47;&#47; Arrange to do a loop appropriate for the type.  We will produce<br>&#47;&#47;   for INIT ; COND ; POST {<br>&#47;&#47;           ITER_INIT<br>&#47;&#47;           INDEX = INDEX_TEMP<br>&#47;&#47;           VALUE = VALUE_TEMP &#47;&#47; If there is a value<br>&#47;&#47;           original statements<br>&#47;&#47;   }<br>针对数组<br>&#47;&#47; The loop we generate:<br>&#47;&#47;   len_temp := len(range)<br>&#47;&#47;   range_temp := range<br>&#47;&#47;   for index_temp = 0; index_temp &lt; len_temp; index_temp++ {<br>&#47;&#47;           value_temp = range_temp[index_temp]<br>&#47;&#47;           index = index_temp<br>&#47;&#47;           value = value_temp<br>&#47;&#47;           original body<br>&#47;&#47;   }","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574187,"discussion_content":"你的最后一句话其实已经带出了答案。这也是为了安全考虑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653892025,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":311888,"user_name":"无名无姓","can_delete":false,"product_type":"c1","uid":2621412,"ip_address":"","ucode":"487BD5AA2CD305","user_header":"https://static001.geekbang.org/account/avatar/00/27/ff/e4/927547a9.jpg","comment_is_top":false,"comment_ctime":1631523103,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1631523103","product_id":100013101,"comment_content":"package main<br>import(<br>\t&quot;fmt&quot;<br>)<br>func main() {<br>\tarr:=[]int{1,2,3,4,5,6}<br>\tarrlen:=len(arr)-1<br>\tfor i,e:= range arr {<br>\t\tif i==arrlen{<br>\t\t\tarr[0]+=e<br>\t\t}else{<br>\t\t\tarr[i+1]+=e<br>\t\t}<br>\t}<br>\tfmt.Println(arr)<br>}<br>========================","like_count":0},{"had_liked":false,"id":296334,"user_name":"罗峰","can_delete":false,"product_type":"c1","uid":1218501,"ip_address":"","ucode":"5F3D6AF8F28322","user_header":"https://static001.geekbang.org/account/avatar/00/12/97/c5/84491beb.jpg","comment_is_top":false,"comment_ctime":1622902912,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1622902912","product_id":100013101,"comment_content":"Switch是匹配每个case，找到相等的那个case，包含常量类型转换，唯一值检验。select是先对多个case求值，然后随机选一个执行","like_count":0},{"had_liked":false,"id":283954,"user_name":"MClink","can_delete":false,"product_type":"c1","uid":1435733,"ip_address":"","ucode":"F479190923355C","user_header":"https://static001.geekbang.org/account/avatar/00/15/e8/55/92f82281.jpg","comment_is_top":false,"comment_ctime":1615994542,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1615994542","product_id":100013101,"comment_content":"都是坑点，一不小心在生产就是隐患","like_count":0},{"had_liked":false,"id":243530,"user_name":"鸠摩·智","can_delete":false,"product_type":"c1","uid":1211909,"ip_address":"","ucode":"6CD93CD1DB6955","user_header":"https://static001.geekbang.org/account/avatar/00/12/7e/05/431d380f.jpg","comment_is_top":false,"comment_ctime":1598171853,"is_pvip":false,"discussion_count":0,"race_medal":5,"score":"1598171853","product_id":100013101,"comment_content":"本节第一个numbers1的例子，只有一个迭代变量的range，我本来理解的是变量里就是切片的元素值，自己心算的和老师的答案还一样的，心里有点沾沾自喜的，后来发现自己理解错了😂","like_count":0},{"had_liked":false,"id":190864,"user_name":"Cyril","can_delete":false,"product_type":"c1","uid":1024693,"ip_address":"","ucode":"29FFFAC32F911B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a2/b5/4dc0c109.jpg","comment_is_top":false,"comment_ctime":1584700782,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584700782","product_id":100013101,"comment_content":"这个 switch case 的用法很灵活","like_count":0},{"had_liked":false,"id":190781,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1584691911,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584691911","product_id":100013101,"comment_content":"总结 <br>今天主要是讲了如下内容<br>1. range range表达主要是返回了一个对象的副本  并且只会执行一次<br>2. switch 主要注意的是<br>   2.1 不能有结果值相同的case表达式(当然变量除外) 如果有 则会编译不通过<br>   2.2 fallthrough 如果某个满足条件的case语句后面有fallthrough则会执行后面一个case语句<br>   2.3 类型自动转换 如果switch表达式后面的是无类型的值,它不会发生自动转换类型 但是如果case后面的是无类型的值的话 会被自动转换成 switch后面的类型<br>   2.4 如果表达式中含有接口类型  一定要注意 接口类型的实际动态类型 是否支持判等操作 因为会绕过编译器的检查 但是在运行时引起恐慌<br>关于思考题<br>1. 通过value.(type)表达式获取类型操作<br>2. 整个if语句范围内","like_count":0},{"had_liked":false,"id":188221,"user_name":"Geek_0ed632","can_delete":false,"product_type":"c1","uid":1642241,"ip_address":"","ucode":"A327A81D0F5475","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iajicahVUQORTadFz4gJvicaiciaxicUI3VcTDVrPOBOpCvXibtPLyjvMCaoHiaOcnuBJOpShj6eRtsrKaOXBianDiaWcxKg/132","comment_is_top":false,"comment_ctime":1584328716,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1584328716","product_id":100013101,"comment_content":"个人感觉go的作用域的设置比其他语言要好","like_count":0},{"had_liked":false,"id":100754,"user_name":"benying","can_delete":false,"product_type":"c1","uid":1247522,"ip_address":"","ucode":"DEBAB485F381CC","user_header":"https://static001.geekbang.org/account/avatar/00/13/09/22/22c0c4fa.jpg","comment_is_top":false,"comment_ctime":1559632986,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1559632986","product_id":100013101,"comment_content":"学习到一些平时没注意的细节，学习老师","like_count":0},{"had_liked":false,"id":70757,"user_name":"Geek_1ed70f","can_delete":false,"product_type":"c1","uid":1394112,"ip_address":"","ucode":"B9A1928A6967B1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erNhKGpqicibpQO3tYvl9vwiatvBzn27ut9y5lZ8hPgofPCFC24HX3ko7LW5mNWJficgJncBCGKpGL2jw/132","comment_is_top":false,"comment_ctime":1551176129,"is_pvip":false,"replies":[{"id":"25234","content":"这就是按位或啊","user_name":"作者回复","user_name_real":"郝林","uid":"1026643","ctime":1551180032,"ip_address":"","comment_id":70757,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1551176129","product_id":100013101,"comment_content":"按位或<br><br>有错别字  += 写成了  |=","like_count":0,"discussions":[{"author":{"id":1026643,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/aa/53/768aec0a.jpg","nickname":"郝林","note":"","ucode":"F66BA62BA56FFA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":440813,"discussion_content":"这就是按位或啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1551180032,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":62385,"user_name":"虢國技醬","can_delete":false,"product_type":"c1","uid":1056807,"ip_address":"","ucode":"5A192262AA037E","user_header":"https://static001.geekbang.org/account/avatar/00/10/20/27/a6932fbe.jpg","comment_is_top":false,"comment_ctime":1548042863,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1548042863","product_id":100013101,"comment_content":"打卡","like_count":0},{"had_liked":false,"id":34898,"user_name":"jacke","can_delete":false,"product_type":"c1","uid":1161209,"ip_address":"","ucode":"05F355E1FF88C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/b7/f9/a8f26b10.jpg","comment_is_top":false,"comment_ctime":1540348682,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1540348682","product_id":100013101,"comment_content":"switch进行有限的转化不是很明白？value1里面switch的语句不能从int转换为int8、那value2里面case语句又可以从int转换为int8？还有借口转换如何判定呢？","like_count":0,"discussions":[{"author":{"id":1019568,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","nickname":"CcczzZ","note":"","ucode":"5F46DA5053D2BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":125834,"discussion_content":"在switch表达式值类型和case表达式值类型判等的时候，需要保证两个类型一致。是分两种情况吧：\n1、如果在 switch 值是不确定的，会转为该值类型的默认类型，比如 1 转为 int类型，此时用case 的类型和 switch 类型做对比，类型不同的话是不能判等。\n2、而当 switch 类型确认情况，比如是 int8 类型，case 表达式结果值是无类型的1，那么 case 结果值类型会自动转换为 switch 的结果值类型。（这个转换感觉可以理解为 Go 语言在 switch 这里的一个特殊特性吧）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1578494133,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2621412,"avatar":"https://static001.geekbang.org/account/avatar/00/27/ff/e4/927547a9.jpg","nickname":"无名无姓","note":"","ucode":"487BD5AA2CD305","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1019568,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8e/b0/ef201991.jpg","nickname":"CcczzZ","note":"","ucode":"5F46DA5053D2BB","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532132,"discussion_content":"这个细节很不容易注意到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637543521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":125834,"ip_address":""},"score":532132,"extra":"{\"user_type\":1}"}]}]}]}