{"id":210893,"title":"11 | 负载均衡：节点负载差距这么大，为什么收到的流量还一样？","content":"<p>你好，我是何小锋。上一讲我讲解了“多场景的路由选择”，其核心就是“如何根据不同的场景控制选择合适的目标机器”。今天我们来聊一个新的话题，看看在RPC中如何实现负载均衡。</p><h2>一个需求</h2><p>在进入主题之前，我想先和你分享一个需求，这是我们公司的业务部门给我们提的。</p><p>他们反馈的问题是这样的：有一次碰上流量高峰，他们突然发现线上服务的可用率降低了，经过排查发现，是因为其中有几台机器比较旧了。当时最早申请的一批容器配置比较低，缩容的时候留下了几台，当流量达到高峰时，这几台容器由于负载太高，就扛不住压力了。业务问我们有没有好的服务治理策略？</p><p><img src=\"https://static001.geekbang.org/resource/image/a9/f7/a9dfb6a37f8587851a5288b5d6cbf1f7.jpg?wh=2602*1325\" alt=\"\" title=\"业务部门问题示意图\"></p><p>这个问题其实挺好解决的，我们当时给出的方案是：在治理平台上调低这几台机器的权重，这样的话，访问的流量自然就减少了。</p><p>但业务接着反馈了，说：当他们发现服务可用率降低的时候，业务请求已经受到影响了，这时再如此解决，需要时间啊，那这段时间里业务可能已经有损失了。紧接着他们就提出了需求，问：<strong>RPC框架有没有什么智能负载的机制？能否及时地自动控制服务节点接收到的访问量？</strong></p><p>这个需求其实很合理，这也是一个比较普遍的问题。确实，虽说我们的服务治理平台能够动态地控制线上服务节点接收的访问量，但当业务方发现部分机器负载过高或者响应变慢的时候再去调整节点权重，真的很可能已经影响到线上服务的可用率了。</p><!-- [[[read_end]]] --><p>看到这儿，你有没有想到什么好的处理方案呢？接下来，我们就以这个问题为背景，一起看看RPC框架的负载均衡。</p><h2>什么是负载均衡？</h2><p>我先来简单地介绍下负载均衡。当我们的一个服务节点无法支撑现有的访问量时，我们会部署多个节点，组成一个集群，然后通过负载均衡，将请求分发给这个集群下的每个服务节点，从而达到多个服务节点共同分担请求压力的目的。</p><p><img src=\"https://static001.geekbang.org/resource/image/f4/b8/f48704443b33df17fc490778c00c71b8.jpg?wh=3345*1443\" alt=\"\" title=\"负载均衡示意图\"></p><p>负载均衡主要分为软负载和硬负载，软负载就是在一台或多台服务器上安装负载均衡的软件，如LVS、Nginx等，硬负载就是通过硬件设备来实现的负载均衡，如F5服务器等。负载均衡的算法主要有随机法、轮询法、最小连接法等。</p><p>我刚才介绍的负载均衡主要还是应用在Web服务上，Web服务的域名绑定负载均衡的地址，通过负载均衡将用户的请求分发到一个个后端服务上。</p><h2>RPC框架中的负载均衡</h2><p>那RPC框架中的负载均衡是不是也是如此呢？和我上面讲的负载均衡，你觉得会有区别吗？</p><p>我们可以回想下<a href=\"https://time.geekbang.org/column/article/208171\">[第 08 讲]</a> 的开头：我讲到为什么不通过DNS来实现“服务发现”，之后我又讲解了为什么不采用添加负载均衡设备或者TCP/IP四层代理，域名绑定负载均衡设备的IP或者四层代理IP的方式。</p><p>我的回答是这种方式会面临这样几个问题：</p><ol>\n<li>搭建负载均衡设备或TCP/IP四层代理，需要额外成本；</li>\n<li>请求流量都经过负载均衡设备，多经过一次网络传输，会额外浪费一些性能；</li>\n<li>负载均衡添加节点和摘除节点，一般都要手动添加，当大批量扩容和下线时，会有大量的人工操作，“服务发现”在操作上是个问题；</li>\n<li>我们在服务治理的时候，针对不同接口服务、服务的不同分组，我们的负载均衡策略是需要可配的，如果大家都经过这一个负载均衡设备，就不容易根据不同的场景来配置不同的负载均衡策略了。</li>\n</ol><p>我相信看到这儿，你应该已经知道了RPC实现的负载均衡所采用的策略与传统的Web服务实现负载均衡所采用策略的不同之处了。</p><p>RPC的负载均衡完全由RPC框架自身实现，RPC的服务调用者会与“注册中心”下发的所有服务节点建立长连接，在每次发起RPC调用时，服务调用者都会通过配置的负载均衡插件，自主选择一个服务节点，发起RPC调用请求。</p><p><img src=\"https://static001.geekbang.org/resource/image/5e/1c/5e294378a3d86e7d279507f62fe5ee1c.jpg?wh=4175*1969\" alt=\"\" title=\"RPC框架负载均衡示意图\"></p><p>RPC负载均衡策略一般包括随机权重、Hash、轮询。当然，这还是主要看RPC框架自身的实现。其中的随机权重策略应该是我们最常用的一种了，通过随机算法，我们基本可以保证每个节点接收到的请求流量是均匀的；同时我们还可以通过控制节点权重的方式，来进行流量控制。比如我们默认每个节点的权重都是100，但当我们把其中的一个节点的权重设置成50时，它接收到的流量就是其他节点的1/2。</p><p>这几种负载均衡算法的实现还是很简单的，网上资料也非常多，在这我就不过多介绍了。有什么问题，咱们可以在留言区交流。</p><p>由于负载均衡机制完全是由RPC框架自身实现的，所以它不再需要依赖任何负载均衡设备，自然也不会发生负载均衡设备的单点问题，服务调用方的负载均衡策略也完全可配，同时我们可以通过控制权重的方式，对负载均衡进行治理。</p><p>了解完RPC框架的负载均衡，现在我们就可以回到这讲最开头业务提的那个需求：有没有什么办法可以动态地、智能地控制线上服务节点所接收到的请求流量？</p><p>现在答案是不是就显而易见了，解决问题的关键就在于RPC框架的负载均衡上。对于这个问题，我们当时的方案就是，设计一种自适应的负载均衡策略。</p><h2>如何设计自适应的负载均衡？</h2><p>我刚才讲过，RPC的负载均衡完全由RPC框架自身实现，服务调用者发起请求时，会通过配置的负载均衡插件，自主地选择服务节点。那是不是只要调用者知道每个服务节点处理请求的能力，再根据服务处理节点处理请求的能力来判断要打给它多少流量就可以了？当一个服务节点负载过高或响应过慢时，就少给它发送请求，反之则多给它发送请求。</p><p>这就有点像日常工作中的分配任务，要多考虑实际情况。当一位下属身体欠佳，就少给他些工作；若刚好另一位下属状态很好，手头工作又不是很多，就多分给他一点。</p><p><strong>那服务调用者节点又该如何判定一个服务节点的处理能力呢？</strong></p><p>这里我们可以采用一种打分的策略，服务调用者收集与之建立长连接的每个服务节点的指标数据，如服务节点的负载指标、CPU核数、内存大小、请求处理的耗时指标（如请求平均耗时、TP99、TP999）、服务节点的状态指标（如正常、亚健康）。通过这些指标，计算出一个分数，比如总分10分，如果CPU负载达到70%，就减它3分，当然了，减3分只是个类比，需要减多少分是需要一个计算策略的。</p><p><strong>我们又该如果根据这些指标来打分呢？</strong></p><p>这就有点像公司对员工进行年终考核。假设我是老板，我要考核专业能力、沟通能力和工作态度，这三项的占比分别是30%、30%、40%，我给一个员工的评分是10、8、8，那他的综合分数就是这样计算的：10*30%+8*30%+8*40%=8.6分。</p><p>给服务节点打分也一样，我们可以为每个指标都设置一个指标权重占比，然后再根据这些指标数据，计算分数。</p><p><strong>服务调用者给每个服务节点都打完分之后，会发送请求，那这时候我们又该如何根据分数去控制给每个服务节点发送多少流量呢？</strong></p><p>我们可以配合随机权重的负载均衡策略去控制，通过最终的指标分数修改服务节点最终的权重。例如给一个服务节点综合打分是8分（满分10分），服务节点的权重是100，那么计算后最终权重就是80（100*80%）。服务调用者发送请求时，会通过随机权重的策略来选择服务节点，那么这个节点接收到的流量就是其他正常节点的80%（这里假设其他节点默认权重都是100，且指标正常，打分为10分的情况）。</p><p>到这儿，一个自适应的负载均衡我们就完成了，整体的设计方案如下图所示：</p><p><img src=\"https://static001.geekbang.org/resource/image/00/af/00065674063f30c98caaa58bb4cd7baf.jpg?wh=4085*2365\" alt=\"\" title=\"RPC自适应负载均衡示意图\"></p><p>关键步骤我来解释下：</p><ol>\n<li>添加服务指标收集器，并将其作为插件，默认有运行时状态指标收集器、请求耗时指标收集器。</li>\n<li>运行时状态指标收集器收集服务节点CPU核数、CPU负载以及内存等指标，在服务调用者与服务提供者的心跳数据中获取。</li>\n<li>请求耗时指标收集器收集请求耗时数据，如平均耗时、TP99、TP999等。</li>\n<li>可以配置开启哪些指标收集器，并设置这些参考指标的指标权重，再根据指标数据和指标权重来综合打分。</li>\n<li>通过服务节点的综合打分与节点的权重，最终计算出节点的最终权重，之后服务调用者会根据随机权重的策略，来选择服务节点。</li>\n</ol><h2>总结</h2><p>今天我们详细讲解了RPC框架的负载均衡，它与Web服务的负载均衡的不同之处在于：RPC框架并不是依赖一个负载均衡设备或者负载均衡服务器来实现负载均衡的，而是由RPC框架本身实现的，服务调用者可以自主选择服务节点，发起服务调用。</p><p>这样的好处是，RPC框架不再需要依赖专门的负载均衡设备，可以节约成本；还减少了与负载均衡设备间额外的网络传输，提升了传输效率；并且均衡策略可配，便于服务治理。</p><p>除此之外，我们今天的重点还涉及到“如何设计一个自适应的负载均衡”，通过它，我们可以就能根据服务调用者依赖的服务集群中每个节点的自身状态，智能地控制发送给每个服务节点的请求流量，防止因某个服务节点负载过高、请求处理过慢而影响到整个服务集群的可用率。</p><p>这个自适应负载均衡的实现方案，其实不只是应用于RPC框架中的负载均衡，它本身便是一个智能负载的解决方案，如果你在工作中需要设计一个智能的负载均衡服务，那么完全可以参考。</p><h2>课后思考</h2><p>你知道RPC框架中还有哪些负载均衡策略吗？它们的优缺点是什么？期待你能在留言区中分享实现方法，与我共同探讨。</p><p>也欢迎你把文章分享给你的朋友，邀请他加入学习。我们下节课再见！</p>","neighbors":{"left":{"article_title":"10 | 路由策略：怎么让请求按照设定的规则发到不同的节点上？","id":209732},"right":{"article_title":"12 | 异常重试：在约定时间内安全可靠地重试","id":211261}},"comments":[{"had_liked":false,"id":187303,"user_name":"楼下小黑哥","can_delete":false,"product_type":"c1","uid":1014680,"ip_address":"","ucode":"453B099B0EE52E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7b/98/8f1aecf4.jpg","comment_is_top":false,"comment_ctime":1584079707,"is_pvip":false,"replies":[{"id":"72553","content":"课代表👍","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1584284761,"ip_address":"","comment_id":187303,"utype":1}],"discussion_count":2,"race_medal":0,"score":"237807280987","product_id":100046201,"comment_content":"以 Dubbo 为例，常用的负载均衡方法有：<br>1.基于权重随机算法<br>2.基于最少活跃调用数算法<br>3.基于 hash 一致性<br>4.基于加权轮询算法<br><br>Dubbo 默认使用基于权重随机算法。<br><br>轮询算法与随机算法相对来说编码比较简单，适用于集群中各个节点提供服务能力等同且无状态的场景。两个方法将服务节点性能当成一样，但是实际复杂环境，服务节点处能力不一样。这就需要我们有比重分发请求，于是加入权重属性，就有了权重的随机算法与加权轮询算法。<br><br>另外如果某个服务节点出现问题，服务处理缓慢。轮询算法与随机算法还会持续的将请求发分到服务节点，进一步加重服务节点情况。这是一个比较大的缺点。<br><br>最少活跃调用数算法，将会记录服务节点的活跃数，活跃数越少，表明该服务提供者效率越高，单位时间内可处理更多的请求，可以有效改善上面说的情况。<br><br>hash 一致性算法，适用于服务有状态的的场景，但是实很少需要有状态的场景，该算法比较少使用。","like_count":56,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487068,"discussion_content":"课代表👍","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1584284761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2027645,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/f0/7d/2e0eda9a.jpg","nickname":"默念、幸福","note":"","ucode":"C98EFAE3DB818A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376883,"discussion_content":"为什么Dubbo 默认不使用 LeastActive 算法呢?","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622390120,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187580,"user_name":"雨霖铃声声慢","can_delete":false,"product_type":"c1","uid":1052607,"ip_address":"","ucode":"656D98310C6DA3","user_header":"https://static001.geekbang.org/account/avatar/00/10/0f/bf/ee93c4cf.jpg","comment_is_top":false,"comment_ctime":1584163081,"is_pvip":false,"replies":[{"id":"72552","content":"很棒！","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1584284728,"ip_address":"","comment_id":187580,"utype":1}],"discussion_count":1,"race_medal":0,"score":"78893574409","product_id":100046201,"comment_content":"谈谈GRPC的负载均衡策略，grpc官方并未提供服务发现注册的功能实现，但是为不同语言的gRPC代码实现提供了可扩展的命名解析和负载均衡接口。其基本原理是：服务启动后grpc客户端向命名服务器发出名称解析请求，名称会解析为一个或多个ip地址，每个ip地址会标识它是服务器地址还是负载均衡地址，以及标识要使用的那个客户端的负载均衡策略或服务配置。客户端实例化负载均衡策略，如果解析返回的地址是负载均衡器的地址，则客户端将使用扩展的负载均衡策略，反之客户端使用服务器配置请求的负载均衡策略。负载均衡策略为每个服务器地址创建一个子通道，当有rpc请求时，负载均衡策略决定那个子通道即grpc服务器将接收请求，当可用服务器为空时客户端的请求将被阻塞。<br>这种方式好处是灵活，支持扩展，可以扩展满足自己需求的策略，缺点是需要自己集成，需要一定的工作量，对技术人员有一定的要求。","like_count":18,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487153,"discussion_content":"很棒！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584284728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187391,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1584098004,"is_pvip":false,"replies":[{"id":"72433","content":"路由一般是规则设定，一般都是路由之后，负载再生效","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1584232047,"ip_address":"","comment_id":187391,"utype":1}],"discussion_count":9,"race_medal":0,"score":"35943836372","product_id":100046201,"comment_content":"有点疑惑，路由策略和负载均衡的结果都是选择一个合适的服务节点，那这两个有什么区别呢？","like_count":8,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487093,"discussion_content":"路由一般是规则设定，一般都是路由之后，负载再生效","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584232047,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1005042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/55/f2/ba68d931.jpg","nickname":"有米","note":"","ucode":"C9A10B7A67BC12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257573,"discussion_content":"这也是我的疑问🤔️按照老师的回答-，我理解就是规则跟策略。规则就是筛选符合条件的节点，策略就是在符合条件的节点中选一个目标节点。","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1588590134,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1438037,"avatar":"https://static001.geekbang.org/account/avatar/00/15/f1/55/8ac4f169.jpg","nickname":"陈国林","note":"","ucode":"83D12F3E79F197","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":204796,"discussion_content":"斗胆来回答一下。路由策略使用的场景是流量隔离，比如在灰度验证过程。负载均衡使用的场景则是请求智能调度，尽可能保证选择一个最合适的节点来调用","likes_number":4,"is_delete":false,"is_hidden":false,"ctime":1584205360,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1629842,"avatar":"https://static001.geekbang.org/account/avatar/00/18/de/92/f867b68c.jpg","nickname":"武装到牙齿","note":"","ucode":"66F549E9C225A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210209,"discussion_content":"负载均衡是目的吧，路由策略是为实现目的而选择的策略","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1584713972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1302798,"avatar":"https://static001.geekbang.org/account/avatar/00/13/e1/0e/9ce05946.jpg","nickname":"distdev","note":"","ucode":"22AA05788627C6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305468,"discussion_content":"我的理解是实现方法相同， 但是目的不同。实现上都是把请求分发到后台的服务。负载平衡的目的不需解释 后面的服务功能都一样。路由可以把请求分发到不同功能 版本的服务","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599941629,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1385204,"avatar":"https://static001.geekbang.org/account/avatar/00/15/22/f4/9fd6f8f0.jpg","nickname":"核桃","note":"","ucode":"7AB05270CBCCCB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550605,"discussion_content":"从k8s的调度框架来理解一下，所谓路由，就是先筛选出哪些节点可以访问的，而负载均衡就是这些可用的节点中，再挑选出一个适合的，也就是一个二次筛选的过程了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644637107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1341619,"avatar":"https://static001.geekbang.org/account/avatar/00/14/78/b3/6950a52d.jpg","nickname":"胡汇鑫","note":"","ucode":"6DEBEA194720A4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531914,"discussion_content":"负载均衡仅仅是路由的目的之一","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637467439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2330905,"avatar":"https://static001.geekbang.org/account/avatar/00/23/91/19/6a3e7efc.jpg","nickname":"程序员9527","note":"","ucode":"1A1609F6BEAD84","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377804,"discussion_content":"服务路由是很局配置的路由规则路由请求，负载均衡是将请求发送到负载低的机器","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622870131,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1963471,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJ7II1e9tbUxZ3ialj44Vrw3w0jRlYrVWRyE2KveffALStawaiciaspatdweu7iaic96Yx9LV5WVPnVqAA/132","nickname":"零蛋大师(-_-)","note":"","ucode":"132A3779F9FA41","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":376927,"discussion_content":"个人理解:路由策略负责定位目标，负载均衡负责开枪扫射","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622428119,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":216705,"user_name":"密码123456","can_delete":false,"product_type":"c1","uid":1126593,"ip_address":"","ucode":"9889463CC0EA71","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/c1/2dde6700.jpg","comment_is_top":false,"comment_ctime":1589330638,"is_pvip":false,"replies":[{"id":"80441","content":"“冷暖自知”，调用方比第三方更准确知道对方状态","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1589500452,"ip_address":"","comment_id":216705,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23064167118","product_id":100046201,"comment_content":"从心跳检测，到路由策略，再到本节。有个问题。心跳检测我理解，让服务提供方消耗少量的性能，来评估性能并判定是健康还是亚健康。后来说到有一个检测服务专门做这件事，然后推给服务调用方。这里又说是服务调用方，直接心跳检测。如果调用方直接调用心跳检测，对服务调用方来说检测及时。但对于提供方来说，随着调用方的增多会增加性能的损耗，如果用注册中心，感知不及时。怎么处理比较好呢？一般都是怎么做？","like_count":5,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":494919,"discussion_content":"“冷暖自知”，调用方比第三方更准确知道对方状态","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1589500452,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2826205,"avatar":"","nickname":"hillwater","note":"","ucode":"FB16D5FCE8C7E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590061,"discussion_content":"我也一直想问是注册中心发起心跳，还是调用方发起心跳，调用方发起感觉量会比较大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665493738,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1595002,"avatar":"https://static001.geekbang.org/account/avatar/00/18/56/7a/60c3d6a5.jpg","nickname":"STAND ALONE COMPLEX","note":"","ucode":"2AC2F9B0A6D823","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292009,"discussion_content":"感觉可以区别对待，一些基础的服务，由第三方来检测，组合的服务调用方检测，因为基础服务调用方比较多。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595048737,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":204866,"user_name":"邦","can_delete":false,"product_type":"c1","uid":1196539,"ip_address":"","ucode":"01E0E7BF54F741","user_header":"https://static001.geekbang.org/account/avatar/00/12/41/fb/3e59bcb3.jpg","comment_is_top":false,"comment_ctime":1586484358,"is_pvip":false,"replies":[{"id":"76814","content":"可以考虑背压","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1586690993,"ip_address":"","comment_id":204866,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23061320838","product_id":100046201,"comment_content":"第一次提问，如果系统包含一些处理时间较长的请求，例如下载一个大数据量的报表，这种请求会大大提高该服务提供者的平均请求耗时，而发现这种耗时会存在时延，调用者仍然发送了很多请求到该服务器，这种情况怎么看?","like_count":5,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491310,"discussion_content":"可以考虑背压","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586690993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":208920,"user_name":"忆水寒","can_delete":false,"product_type":"c1","uid":1147453,"ip_address":"","ucode":"E3F86BD8AA8903","user_header":"https://static001.geekbang.org/account/avatar/00/11/82/3d/356fc3d6.jpg","comment_is_top":false,"comment_ctime":1587465097,"is_pvip":false,"replies":[{"id":"78558","content":"周期性实现起来最简单","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1587951092,"ip_address":"","comment_id":208920,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18767334281","product_id":100046201,"comment_content":"老师， CPU 核数、CPU 负载以及内存等指标 有什么比较好的获取方式吗？<br>计算 每个服务节点的权重 这个是周期性统计计算然后在负载均衡器中更新吗？","like_count":4,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":492672,"discussion_content":"周期性实现起来最简单","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587951092,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":187195,"user_name":"安排","can_delete":false,"product_type":"c1","uid":1260026,"ip_address":"","ucode":"F78CFA9624CAEF","user_header":"https://static001.geekbang.org/account/avatar/00/13/39/fa/a7edbc72.jpg","comment_is_top":false,"comment_ctime":1584058255,"is_pvip":false,"replies":[{"id":"72542","content":"负载均衡一般都需要内置在rpc里面，用于也可以进行扩展","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1584284080,"ip_address":"","comment_id":187195,"utype":1}],"discussion_count":7,"race_medal":0,"score":"18763927439","product_id":100046201,"comment_content":"是不是每个rpc调用方，也就是客户端都存在一个智能负载均衡？那就是每个rpc调用方都能掌握全局的负载信息了，要不然无法做负载均衡？其实还是对&quot;负载均衡由rpc框架来做&quot;不理解，这个rpc框架是每个rpc调用方都会有一份吗？","like_count":4,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487025,"discussion_content":"负载均衡一般都需要内置在rpc里面，用于也可以进行扩展","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584284080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1041680,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/e5/10/0a94311f.jpg","nickname":"joker","note":"","ucode":"DA1FD164B64083","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":269700,"discussion_content":"我理解的，其实是客户端的每次rpc调用都会经历路由和负载均衡，最终会选择一个最合适的服务节点发起请求。而且负载是在路由之后的。\n其他：我感觉这里老师讲解的路由并不是我们寻常理解的路由，前端开发也有路由的概念，那个是更像是一个转发路径，这里的路由更像是通过得到符合规则的目标集合，然后通过负载均衡从这些目标集合中选择最合适的目标发起请求\n而且在rpc框架里面，路由的功能是在灰度发布的场景下作用较多，在正常情况下，路由规则不会过滤掉目标节点","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1589938790,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1219172,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9a/64/ad837224.jpg","nickname":"Christmas","note":"","ucode":"F48F6BE4A7595B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":280633,"discussion_content":"在客户端实现最终的选择吗？还是每次rpc都询问服务发现服务器端？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591581158,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2826205,"avatar":"","nickname":"hillwater","note":"","ucode":"FB16D5FCE8C7E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1219172,"avatar":"https://static001.geekbang.org/account/avatar/00/12/9a/64/ad837224.jpg","nickname":"Christmas","note":"","ucode":"F48F6BE4A7595B","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590063,"discussion_content":"客户端缓存的，不需要每次请求","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665493864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":280633,"ip_address":"上海"},"score":590063,"extra":""}]},{"author":{"id":1005042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/55/f2/ba68d931.jpg","nickname":"有米","note":"","ucode":"C9A10B7A67BC12","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":257574,"discussion_content":"应该是框架里的公共模块","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588590272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1629842,"avatar":"https://static001.geekbang.org/account/avatar/00/18/de/92/f867b68c.jpg","nickname":"武装到牙齿","note":"","ucode":"66F549E9C225A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210203,"discussion_content":"“负载均衡由rpc框架做”的意思就是区别于以前的负载均衡环境由运维搭建，现在是有中间件开发者来开发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584713806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1877904,"avatar":"https://static001.geekbang.org/account/avatar/00/1c/a7/90/9a0da433.jpg","nickname":"小哇","note":"","ucode":"1C2C1FE3FCB9CE","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":203865,"discussion_content":"同一个框架的，而且调用方往往也是提供方","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584094219,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":246661,"user_name":"长脖子树","can_delete":false,"product_type":"c1","uid":1182802,"ip_address":"","ucode":"D9090EF67EEB1B","user_header":"https://static001.geekbang.org/account/avatar/00/12/0c/52/f25c3636.jpg","comment_is_top":false,"comment_ctime":1599448281,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"14484350169","product_id":100046201,"comment_content":"rpc 服务提供者需要和所有服务调用者建立长连接, 但这种方式在服务调用者多的情况下, 会给服务提供者带来很大负担的吧?<br>","like_count":3,"discussions":[{"author":{"id":2826205,"avatar":"","nickname":"hillwater","note":"","ucode":"FB16D5FCE8C7E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590064,"discussion_content":"netty实现不耗资源的，10个和1000个差别不大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665493980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242338,"user_name":"xuanyuan","can_delete":false,"product_type":"c1","uid":1113737,"ip_address":"","ucode":"1EC79B9372868F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI2icbib62icXtibTkThtyRksbuJLoTLMts7zook2S30MiaBtbz0f5JskwYicwqXkhpYfvCpuYkcvPTibEaQ/132","comment_is_top":false,"comment_ctime":1597675131,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10187609723","product_id":100046201,"comment_content":"负载均衡放在rpc里面也带来了不少问题吧，<br>1. 升级难<br>2. 客户端复杂均衡适合服务内部间<br>3. 负载均衡放到服务内部加重服务负载","like_count":2,"discussions":[{"author":{"id":1246875,"avatar":"https://static001.geekbang.org/account/avatar/00/13/06/9b/35e90ecc.jpg","nickname":"dqw","note":"","ucode":"B95928C35DBC5B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542274,"discussion_content":"所以有了service mesh","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1640697933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217455,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1589507817,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10179442409","product_id":100046201,"comment_content":"负载均衡策略，了解一些，不过能够非常及时准确的分发流量还是老师文中提及的全面——智能负载均衡策略。<br>1：随机<br>2：轮询（又分一般轮询、加权轮询、动态加权轮询）<br>3：哈希（又分一般哈希，一致性哈希、加虚拟节点的一致性哈希）<br>4：能力负载（根据响应时间，根据可用率等来动态智能调节）<br>5：老师的智能负载均衡策略，这个最核心的点在于及时","like_count":2},{"had_liked":false,"id":265389,"user_name":"codewor","can_delete":false,"product_type":"c1","uid":2343990,"ip_address":"","ucode":"2715765269385B","user_header":"https://static001.geekbang.org/account/avatar/00/23/c4/36/4f7239de.jpg","comment_is_top":false,"comment_ctime":1606886818,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5901854114","product_id":100046201,"comment_content":"牛逼哦，高屋建瓴，有种一览无余的感觉。","like_count":1},{"had_liked":false,"id":359735,"user_name":"Geek_757cbc","can_delete":false,"product_type":"c1","uid":2943897,"ip_address":"上海","ucode":"ECE10235F88FEA","user_header":"","comment_is_top":false,"comment_ctime":1665823889,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1665823889","product_id":100046201,"comment_content":"轮循(Round Robin)<br>这种方法会将收到的请求循环分配到服务器集群中的每台机器，即有效服务器。如果使用这种方式，所有的标记进入虚拟服务的服务器应该有相近的资源容量以及负载形同的应用程序。如果所有的服务器有相同或者相近的性能那么选择这种方式会使服务器负载形同。基于这个前提，轮循调度是一个简单而有效的分配请求的方式。然而对于服务器不同的情况，选择这种方式就意味着能力比较弱的服务器也会在下一轮循环中接受轮循，即使这个服务器已经不能再处理当前这个请求了。这可能导致能力较弱的服务器超载。<br><br>加权轮循(Weighted Round Robin)<br>这种算法解决了简单轮循调度算法的缺点：传入的请求按顺序被分配到集群中服务器，但是会考虑提前为每台服务器分配的权重。管理员只是简单的通过服务器的处理能力来定义各台服务器的权重。例如，能力最强的服务器A给的权重是100，同时能力最低的服务器给的权重是50。这意味着在服务器B接收到第一个请求之前前，服务器A会连续的接受到2个请求，以此类推。<br><br>最少连接数(Least Connection)<br>以上两种方法都没有考虑的是系统不能识别在给定的时间里保持了多少连接。因此可能发生，服务器B服务器收到的连接比服务器A少但是它已经超载，因为服务器B上的用户打开连接持续的时间更长。这就是说连接数即服务器的负载是累加的。这种潜在的问题可以通过&quot;最少连接数&quot;算法来避免：传入的请求是根据每台服务器当前所打开的连接数来分配的。即活跃连接数最少的服务器会自动接收下一个传入的请求。接本上和简单轮询的原则相同：所有拥有虚拟服务的服务器资源容量应该相近。值得注意的是，在流量率低的配置环境中，各服务器的流量并不是相同的，会优先考虑第一台服务器。这是因为，如果所有的服务器是相同的，那么第一个服务器优先，直到第一台服务器有连续的活跃流量，否则总是会优先选择第一台服务器。<br><br>","like_count":0},{"had_liked":false,"id":256884,"user_name":"Alvin","can_delete":false,"product_type":"c1","uid":1284900,"ip_address":"","ucode":"8CF85DA34B3CEC","user_header":"https://static001.geekbang.org/account/avatar/00/13/9b/24/a131714e.jpg","comment_is_top":false,"comment_ctime":1603775515,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603775515","product_id":100046201,"comment_content":"想问下，是每一个rpc客户端都维护一个负载均衡然后各个客户端的负载均衡数据不同步。<br>还是在注册中心维护这个负载均衡？然后调用方从注册中心同步负载均衡的数据？","like_count":0},{"had_liked":false,"id":248994,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1600397715,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1600397715","product_id":100046201,"comment_content":"对自适应的负载均衡有些疑问:<br>1.打分系统收集与建立长连接的每个服务节点的指标数据，这听起来应该是后台线程异步完成的。<br>2.如果是异步完成，那么拉取的间隔多长合适？可是哪怕间隔再小也是会有延迟的（拉取间隔+请求链路耗时）。<br>3.如果当前负载均衡的策略存在滞后。那么在一个高并发下来后，一个原本空闲的服务方节点可能直接被打满资源(因为原本较空闲所以优先级较高，拿到的请求较多)。<br>4.假设请求是cpu密集类型的，服务节点被打满的资源是cpu。那么就可能会有连锁反应。因为节点cpu打满，无法及时响应调用方计分服务过来拉取最新的资源指标。进而调用方就一直认为这个节点空闲，往死里推请求。","like_count":0},{"had_liked":false,"id":196133,"user_name":"一只苦逼","can_delete":false,"product_type":"c1","uid":1185288,"ip_address":"","ucode":"5DBE0D8F2F26E3","user_header":"https://static001.geekbang.org/account/avatar/00/12/16/08/6f9bf74b.jpg","comment_is_top":false,"comment_ctime":1585238043,"is_pvip":true,"replies":[{"id":"74786","content":"收到。","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1585529742,"ip_address":"","comment_id":196133,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1585238043","product_id":100046201,"comment_content":"打卡","like_count":0,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489232,"discussion_content":"收到。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585529742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192682,"user_name":"桂冠远航","can_delete":false,"product_type":"c1","uid":1155463,"ip_address":"","ucode":"5959E1A1DAA05D","user_header":"https://static001.geekbang.org/account/avatar/00/11/a1/87/259ab5a3.jpg","comment_is_top":false,"comment_ctime":1584867959,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1584867959","product_id":100046201,"comment_content":"讲的很清楚。","like_count":0},{"had_liked":false,"id":188770,"user_name":"FATMAN89","can_delete":false,"product_type":"c1","uid":1175430,"ip_address":"","ucode":"48A67FB47B3C5D","user_header":"https://static001.geekbang.org/account/avatar/00/11/ef/86/12f95d66.jpg","comment_is_top":false,"comment_ctime":1584413847,"is_pvip":false,"replies":[{"id":"74961","content":"在文章里面输入太多代码会影响阅读和理解","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1585571483,"ip_address":"","comment_id":188770,"utype":1}],"discussion_count":4,"race_medal":0,"score":"1584413847","product_id":100046201,"comment_content":"请问老师再后续的课程中，是否会增加更多的代码实现，比如实现一个mini的rpc framework，当然老师对理论的讲解是非常精彩的","like_count":0,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487515,"discussion_content":"在文章里面输入太多代码会影响阅读和理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585571483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1063307,"avatar":"https://static001.geekbang.org/account/avatar/00/10/39/8b/af74591f.jpg","nickname":"chun1123","note":"","ucode":"413C3A8722699F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210841,"discussion_content":"我觉着不可能有代码的，有的话肯定也在下一门课程《从零构建自己的rpc框架》中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584781031,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1708928,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Nje008jRWXgDEibeU6Rv6YTLDI7HbMRoxwHc1HBo3WahIKoI1kmx6fIm75JNK1AyN394DzNR4dILria792icPziaRA/132","nickname":"Geek_156876","note":"","ucode":"4B1D31D6A320BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":207953,"discussion_content":"同样的期盼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584527392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1629842,"avatar":"https://static001.geekbang.org/account/avatar/00/18/de/92/f867b68c.jpg","nickname":"武装到牙齿","note":"","ucode":"66F549E9C225A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1708928,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Nje008jRWXgDEibeU6Rv6YTLDI7HbMRoxwHc1HBo3WahIKoI1kmx6fIm75JNK1AyN394DzNR4dILria792icPziaRA/132","nickname":"Geek_156876","note":"","ucode":"4B1D31D6A320BA","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":210204,"discussion_content":"同样期盼","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584713826,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":207953,"ip_address":""},"score":210204,"extra":""}]}]},{"had_liked":false,"id":187857,"user_name":"小鱼儿","can_delete":false,"product_type":"c1","uid":1053492,"ip_address":"","ucode":"989EC453936B91","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/34/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1584260611,"is_pvip":false,"replies":[{"id":"72551","content":"选择一些支持自定义扩展的","user_name":"作者回复","user_name_real":"何小锋","uid":"1541007","ctime":1584284678,"ip_address":"","comment_id":187857,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1584260611","product_id":100046201,"comment_content":"老师，你好。 请问，有没有具体的框架可供实施呢？比如：consul，nginx，gRPC这些。","like_count":0,"discussions":[{"author":{"id":1541007,"avatar":"https://static001.geekbang.org/account/avatar/00/17/83/8f/8471d633.jpg","nickname":"何小锋","note":"","ucode":"E9B3B4A1B75D8B","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487271,"discussion_content":"选择一些支持自定义扩展的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584284678,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}