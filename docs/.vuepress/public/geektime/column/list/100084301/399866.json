{"id":399866,"title":"01 | 带你快速攻略Redis源码的整体架构","content":"<p>你好，我是蒋德钧。从今天这节课开始，我们将开启“Redis代码之旅”，一起来掌握Redis的核心设计思想。</p><p>不过，在正式开始我们的旅程之前，还需要先做个“攻略”，也就是要了解和掌握Redis代码的整体架构。</p><p>这是因为，一旦掌握了Redis代码的整体架构，就相当于给Redis代码画了张全景图。有了这张图，我们再去学习Redis不同功能模块的设计与实现时，就可以从图上快速查找和定位这些功能模块对应的代码文件。而且，有了代码的全景图之后，我们还可以对Redis各方面的功能特性有个全面了解，这样也便于更加全面地掌握Redis的功能，而不会遗漏某一特性。</p><p>那么，我们究竟该如何学习Redis的代码架构呢？我的建议是要掌握以下两方面内容：</p><ul>\n<li><strong>代码的目录结构和作用划分</strong>，目的是理解Redis代码的整体架构，以及所包含的代码功能类别；</li>\n<li><strong>系统功能模块与对应代码文件</strong>，目的是了解Redis实例提供的各项功能及其相应的实现文件，以便后续深入学习。</li>\n</ul><p>实际上，当你掌握了以上两方面的内容之后，即使你要去了解和学习其他软件系统的代码架构，你都可以按照“先面后点”的方法来推进。也就是说，先了解目录结构与作用类别，再对应功能模块与实现文件，这样可以帮助你快速地掌握一个软件系统的代码全景。</p><!-- [[[read_end]]] --><p>所以，在后续的学习过程中，你要仔细跟住我的脚步，并且手边最好能备着一台可以方便查看源码的电脑，针对我提到的源码文件、关键模块或是代码运行，一定要实际阅读一遍或是实操一遍，这样你就能对Redis的代码架构建立更深刻的认识。</p><p>好了，话不多说，下面我们就一起来完成Redis代码之旅的攻略吧。</p><h2>Redis目录结构</h2><p>首先，我们来了解下Redis的目录结构。</p><p>为什么要从目录结构开始了解呢？其实，这是我自己<strong>阅读代码的一个小诀窍</strong>：在学习一个大型系统软件的代码时，要想快速地对代码有个初步认知，了解系统源码的整体目录结构就是一个行之有效的方法。这是因为，系统开发者通常会把完成同一或相近功能的代码文件，按目录结构来组织。能划归到同一个目录下的代码文件，一般都是具有相近功能目标的。</p><p>所以，从代码的目录结构开始学习，可以让我们从目录命名和目录层次结构中，直接了解到一个系统的主要组成部分。</p><p>那么对于Redis来说，在它的源码总目录下，一共包含了<a href=\"https://github.com/redis/redis/tree/5.0/deps\">deps</a>、<a href=\"https://github.com/redis/redis/tree/5.0/src\">src</a>、<a href=\"https://github.com/redis/redis/tree/5.0/tests\">tests</a>、<a href=\"https://github.com/redis/redis/tree/5.0/utils\">utils</a>四个子目录，这四个子目录分别对应了Redis中发挥不同作用的代码，下面我们具体来看看。</p><h3>deps目录</h3><p>这个目录主要<strong>包含了Redis依赖的第三方代码库</strong>，包括Redis的C语言版本客户端代码hiredis、jemalloc内存分配器代码、readline功能的替代代码linenoise，以及lua脚本代码。</p><p>这部分代码的一个显著特点，就是<strong>它们可以独立于Redis src目录下的功能源码进行编译</strong>，也就是说，它们可以独立于Redis存在和发展。下面这张图显示了deps目录下的子目录内容。</p><p><img src=\"https://static001.geekbang.org/resource/image/42/c7/4278463fb96f165bf41d6a97ff3216c7.jpg?wh=1945x726\" alt=\"\"></p><p>那么，为什么在Redis源码结构中会有第三方代码库目录呢？其实主要有两方面的原因。</p><p><strong>一方面</strong>，Redis作为一个用C语言写的用户态程序，它的不少功能是依赖于标准的glibc库提供的，比如内存分配、行读写（readline）、文件读写、子进程/线程创建等。但是，glibc库提供的某些功能实现，效率并不高。</p><p>我举个简单的例子，glibc库中实现的内存分配器的性能就不是很高，它的内存碎片化情况也比较严重。因此为了避免对系统性能产生影响，Redis使用了jemalloc库替换了glibc库的内存分配器。可是，jemalloc库本身又不属于Redis系统自身的功能，把它和Redis功能源码放在一个目录下并不合适，所以，Redis使用了专门的deps目录来保存这部分代码。</p><p><strong>另一方面</strong>，有些功能是Redis运行所需要的，但是这部分功能又会独立于Redis进行开发和演进。这种类型最为典型的功能代码，就是Redis的客户端代码。</p><p>Redis作为Client-Server架构的系统，访问Redis离不开客户端的支撑。此外，Redis自身功能中的命令行redis-cli、基准测试程序redis-benchmark以及哨兵，都需要用到客户端来访问Redis实例。</p><p>不过你应该也清楚，针对客户端的开发，只要保证客户端和实例交互的过程满足RESP协议就行，客户端和实例的功能可以各自迭代演进。所以在Redis源码结构中，C语言版本的客户端hiredis，就被放到了deps目录中，以便开发人员自行开发和改进客户端功能。</p><p>好了，总而言之，对于deps目录来说，你只需要记住它主要存放了三类代码：一是Redis依赖的、实现更加高效的功能库，如内存分配；二是独立于Redis开发演进的代码，如客户端；三是lua脚本代码。后续你在学习这些功能的设计实现时，就可以在deps目录找到它们。</p><h3>src目录</h3><p>这个目录里面<strong>包含了Redis所有功能模块的代码文件，也是Redis源码的重要组成部分</strong>。同样，我们先来看下src目录下的子目录结构。</p><p><img src=\"https://static001.geekbang.org/resource/image/d7/26/d7ac6b01af49047409db5d9e16b6e826.jpg?wh=2187x487\" alt=\"\"></p><p>我们会发现，src目录下只有一个modules子目录，其中包含了一个实现Redis module的示例代码。剩余的源码文件都是在src目录下，没有再分下一级子目录。</p><p>因为Redis的功能模块实现是典型的C语言风格，不同功能模块之间不再设置目录分隔，而是通过头文件包含来相互调用。这样的代码风格在基于C语言开发的系统软件中，也比较常见，比如Memcached的源码文件也是在同一级目录下。</p><p>所以，当你使用C语言来开发软件系统时，就可以参考Redis的功能源码结构，用一个扁平的目录组织所有的源码文件，这样模块相互间的引用也会很方便。</p><h3>tests目录</h3><p>在软件产品的开发过程中，除了第三方依赖库和功能模块源码以外，我们通常还需要在系统源码中，添加用于功能模块测试和单元测试的代码。而在Redis的代码目录中，就将这部分代码用一个tests目录统一管理了起来。</p><p>Redis实现的测试代码可以分成四部分，分别是<strong>单元测试</strong>（对应unit子目录），<strong>Redis Cluster功能测试</strong>（对应cluster子目录）、<strong>哨兵功能测试</strong>（对应sentinel子目录）、<strong>主从复制功能测试</strong>（对应integration子目录）。这些子目录中的测试代码使用了Tcl语言（通用的脚本语言）进行编写，主要目的就是方便进行测试。</p><p>另外，每一部分的测试都是一个测试集合，覆盖了相应功能模块中的多项子功能测试。比如，在单元测试的目录中，我们可以看到有针对过期key的测试（expire.tcl）、惰性删除的测试（lazyfree.tcl），以及不同数据类型操作的测试（type子目录）等。而在Redis Cluster功能测试的目录中，我们可以看到有针对故障切换的测试（failover.tcl）、副本迁移的测试（replica-migration.tcl）等。</p><p>不过在tests目录中，除了有针对特定功能模块的测试代码外，还有一些代码是<strong>用来支撑测试功能</strong>的，这些代码在assets、helpers、modules、support四个目录中。这里我画了这张图，展示了tests目录下的代码结构和层次，你可以参考下。</p><p><img src=\"https://static001.geekbang.org/resource/image/cc/5e/ccb2feae193e4911cc68a0ccb755ac5e.jpg?wh=2250x1111\" alt=\"\"></p><h3>utils目录</h3><p>在Redis开发过程中，还有一些功能属于辅助性功能，包括用于创建Redis Cluster的脚本、用于测试LRU算法效果的程序，以及可视化rehash过程的程序。在Redis代码结构中，这些功能代码都被归类到了utils目录中统一管理。下图展示了utils目录下的主要子目录，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/3b/b2/3b7933e5f1740ccdc3870ee554faf4b2.jpg?wh=2250x1039\" alt=\"\"></p><p>所以，当我们在开发系统时，就可以学习Redis的代码结构，也把和系统相关的辅助性功能划归到utils目录中统一管理。</p><p>好，除了deps、src、tests、utils四个子目录以外，Redis源码总目录下其实还包含了两个重要的配置文件，一个是<strong>Redis实例的配置文件redis.conf</strong>，另一个是<strong>哨兵的配置文件sentinel.conf</strong>。当你需要查找或修改Redis实例或哨兵的配置时，就可以直接定位到源码总目录下。</p><p>最后呢，你也可以再次整体回顾下Redis源码的总体结构层次，如下图所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/59/35/5975c57d9ac404fe3a774ea28a7ac935.jpg?wh=2238x811\" alt=\"\"></p><p>好，在了解了Redis的代码目录和层次以后，接下来，我们还需要重点学习下功能模块的源码文件（即src目录下的文件内容），这有助于我们在后续课程中学习Redis的相关设计思想时，能够快速找到对应的源码文件。</p><h2>Redis功能模块与源码对应</h2><p>Redis代码结构中的src目录，包含了实现功能模块的123个代码文件。在这123个代码文件中，对于某个功能来说，一般包括了实现该功能的 <strong>C语言文件（.c文件）</strong> 和对应的<strong>头文件（.h文件）</strong>。比如，dict.c和dict.h就是用于实现哈希表的C文件和头文件。</p><blockquote>\n<p>注意：在课程中，如果没有特殊说明，我介绍的源码都是基于Redis 5.0.8版本的。</p>\n</blockquote><p>那么，我们该如何将这123个文件和Redis的主要功能对应上呢？</p><p>其实，<strong>Redis代码文件的命名非常规范，文件名中就体现了该文件实现的主要功能。</strong>比如，对于rdb.h和rdb.c这两个代码文件来说，从文件名上，你就可以看出来它们是实现内存快照RDB的对应代码。</p><p>所以这里，为了让你能快速定位源码，我分别按照Redis的服务器实例、数据库操作、可靠性和可扩展性保证、辅助功能四个维度，把Redis功能源码梳理成了四条代码路径。你可以根据自己想要了解的功能维度，对应地学习相关代码。</p><h3>服务器实例</h3><p>首先我们知道，Redis在运行时是一个网络服务器实例，因此相应地就需要有代码实现服务器实例的初始化和主体控制流程，而这是由server.h/server.c实现的，Redis整个代码的main入口函数也是在server.c中。<strong>如果你想了解Redis是如何开始运行的，那么就可以从server.c的main函数开始看起。</strong></p><p>当然，对于一个网络服务器来说，它还需要提供网络通信功能。Redis使用了<strong>基于事件驱动机制的网络通信框架</strong>，涉及的代码文件包括ae.h/ae.c，ae_epoll.c，ae_evport.c，ae_kqueue.c，ae_select.c。关于事件驱动框架的具体设计思路与实现方法，我会在第10讲中给你详细介绍。</p><p>而除了事件驱动网络框架以外，与网络通信相关的功能还包括<strong>底层TCP网络通信</strong>和<strong>客户端实现</strong>。</p><p>Redis对TCP网络通信的Socket连接、设置等操作进行了封装，这些封装后的函数实现在anet.h/anet.c中。这些函数在Redis Cluster创建和主从复制的过程中，会被调用并用于建立TCP连接。</p><p>除此之外，客户端在Redis的运行过程中也会被广泛使用，比如实例返回读取的数据、主从复制时在主从库间传输数据、Redis Cluster的切片实例通信等，都会用到客户端。Redis将客户端的创建、消息回复等功能，实现在了networking.c文件中，如果你想了解客户端的设计与实现，可以重点看下这个代码文件。</p><p>这里我也给你总结了与服务器实例相关的功能模块及对应的代码文件，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/51/df/514e63ce6947d382fe7a3152c1c989df.jpg?wh=2250x882\" alt=\"\"></p><p>那么，在了解了Redis服务器实例的主要功能代码之后，我们再从Redis内存数据库这一特性维度，来梳理下与它相关的代码文件。</p><h3>数据库数据类型与操作</h3><p>Redis数据库提供了丰富的键值对类型，其中包括了String、List、Hash、Set和Sorted Set这五种基本键值类型。此外，Redis还支持位图、HyperLogLog、Geo等扩展数据类型。</p><p>而为了支持这些数据类型，Redis就使用了多种数据结构来作为这些类型的底层结构。比如，String类型的底层数据结构是SDS，而Hash类型的底层数据结构包括哈希表和压缩列表。</p><p>不过，因为Redis实现的底层数据结构非常多，所以这里我把这些底层结构和它们对应的键值对类型，以及相应的代码文件列在了下表中，你可以用这张表来快速定位代码文件。</p><p><img src=\"https://static001.geekbang.org/resource/image/0b/57/0be4769a748a22dae5760220d9c05057.jpg?wh=2000x1125\" alt=\"\"></p><p>除了实现了诸多的数据类型以外，Redis作为数据库，还实现了对键值对的新增、查询、修改和删除等操作接口，这部分功能是在<strong>db.c文件</strong>实现的。</p><p>当然，Redis作为内存数据库，其保存的数据量受限于内存大小。因此，内存的高效使用对于Redis来说就非常重要。</p><p>那么你可能就要问了：<strong>Redis是如何优化内存使用的呢？</strong></p><p>实际上，Redis是从三个方面来优化内存使用的，分别是内存分配、内存回收，以及数据替换。</p><p>首先，在<strong>内存分配</strong>方面，Redis支持使用不同的内存分配器，包括glibc库提供的默认分配器tcmalloc、第三方库提供的jemalloc。Redis把对内存分配器的封装实现在了zmalloc.h/zmalloc.c。</p><p>其次，在<strong>内存回收</strong>上，Redis支持设置过期key，并针对过期key可以使用不同删除策略，这部分代码实现在expire.c文件中。同时，为了避免大量key删除回收内存，会对系统性能产生影响，Redis在lazyfree.c中实现了异步删除的功能，所以这样，我们就可以使用后台IO线程来完成删除，以避免对Redis主线程的影响。</p><p>最后，针对<strong>数据替换</strong>，如果内存满了，Redis还会按照一定规则清除不需要的数据，这也是Redis可以作为缓存使用的原因。Redis实现的<a href=\"https://time.geekbang.org/column/article/294640\">数据替换策略</a>有很多种，包括LRU、LFU等经典算法。这部分的代码实现在了evict.c中。</p><p>同样，这里我也把和Redis数据库数据类型与操作相关的功能模块及代码文件，总结成了一张图，你可以看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/15/f0/158fa224d6a49c7d4702ce3f07dbeff0.jpg?wh=1938x768\" alt=\"\"></p><h3>高可靠性和高可扩展性</h3><p>首先，虽然Redis一般是作为内存数据库来使用的，但是它也提供了可靠性保证，这主要体现在Redis可以对数据做持久化保存，并且它还实现了主从复制机制，从而可以提供故障恢复的功能。</p><p>这部分的代码实现比较集中，主要包括以下两个部分。</p><ul>\n<li><strong>数据持久化实现</strong></li>\n</ul><p>Redis的数据持久化实现有两种方式：<strong>内存快照RDB</strong> 和 <strong>AOF日志</strong>，分别实现在了 <strong>rdb.h/rdb.c</strong> 和 <strong>aof.c</strong> 中。</p><p>注意，在使用RDB或AOF对数据库进行恢复时，RDB和AOF文件可能会因为Redis实例所在服务器宕机，而未能完整保存，进而会影响到数据库恢复。因此针对这一问题，Redis还实现了<strong>对这两类文件的检查功能</strong>，对应的代码文件分别是redis-check-rdb.c和redis-check-aof.c。</p><ul>\n<li><strong>主从复制功能实现</strong></li>\n</ul><p>Redis把主从复制功能实现在了<strong>replication.c文件</strong>中。另外你还需要知道的是，Redis的主从集群在进行恢复时，主要是依赖于哨兵机制，而这部分功能则直接实现在了sentinel.c文件中。</p><p>其次，与Redis实现高可靠性保证的功能类似，Redis高可扩展性保证的功能，是通过<strong>Redis Cluster</strong>来实现的，这部分代码也非常集中，就是在<strong>cluster.h/cluster.c代码文件</strong>中。所以这样，我们在学习Redis Cluster的设计与实现时，就会非常方便，不用在不同的文件之间来回跳转了。</p><h3>辅助功能</h3><p>Redis还实现了一些用于支持系统运维的辅助功能。比如，为了便于运维人员查看分析不同操作的延迟产生来源，Redis在latency.h/latency.c中实现了操作延迟监控的功能；为了便于运维人员查找运行过慢的操作命令，Redis在slowlog.h/slowlog.c中实现了慢命令的记录功能，等等。</p><p>此外，运维人员有时还需要了解Redis的性能表现，为了支持这一目标，Redis实现了对系统进行性能评测的功能，这部分代码在redis-benchmark.c中。如果你想要了解如何对Redis开展性能测试，这个代码文件也值得一读。</p><h2>小结</h2><p>今天是我们了解Redis源码架构和设计思想的“热身课”，这里我们需要先明确一点，就是理解代码结构，可以为我们提供Redis功能模块的全景图，并方便我们快速查找和定位某个具体功能模块的实现源码，这样也有助于提升代码阅读的效率。</p><p>我在一开始，先给你介绍了一个<strong>小诀窍</strong>：通过目录命名和层次，来快速掌握一个系统软件的代码结构。而通过学习Redis的目录结构，我们也学到了一个<strong>重要的编程规范</strong>：在开发系统软件时，使用不同的目录对代码进行划分。</p><p>常见的目录包括保存第三方库的deps目录、保存测试用例的tests目录，以及辅助功能和工具的常用目录utils目录。按照这个规范来组织你的代码，就可以提升代码的可读性和可维护性。</p><p>另外，在学习Redis功能模块的代码结构时，面对123个代码文件，我也给你分享了一种我一直比较推崇的方法：<strong>分门别类</strong>。也就是说，按照一定的维度将所要学习的内容进行分类描述或总结。</p><p>在课程中，我是按照服务器实例、数据库数据类型与操作、高可靠与高可扩展保证，以及辅助功能四个维度，给你梳理了四条代码路径。这四条代码路径也基本涵盖了Redis的主要功能代码，可以方便你去有逻辑、有章法地学习掌握Redis源码，不至于遗漏重要代码。</p><p>那么在最后，我还想说一点，就是在你学习了Redis源码结构的同时，也希望你能把这个方法应用到其他的代码学习中，提高学习效率。</p><h2>每课一问</h2><p>Redis从4.0版本开始，能够支持后台异步执行任务，比如异步删除数据，你能在Redis功能源码中，找到实现后台任务的代码文件么？</p><p>欢迎在留言区分享你的思考和操作过程，我们一起交流讨论。如果觉得有收获的话，也欢迎你把今天的内容分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"开篇词 | 阅读Redis源码能给你带来什么？","id":399839},"right":{"article_title":"02 | 键值对中字符串的实现，用char*还是结构体？","id":400314}},"comments":[{"had_liked":false,"id":304435,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1627404481,"is_pvip":true,"discussion_count":10,"race_medal":0,"score":"568563087553","product_id":100084301,"comment_content":"重新看了一下源码目录，结合这篇文章的内容，整理了一下代码分类（忽略.h头文件），这也更清晰一些：<br><br>数据类型：<br>- String（t_string.c、sds.c、bitops.c）<br>- List（t_list.c、ziplist.c）<br>- Hash（t_hash.c、ziplist.c、dict.c）<br>- Set（t_set.c、intset.c）<br>- Sorted Set（t_zset.c、ziplist.c、dict.c）<br>- HyperLogLog（hyperloglog.c）<br>- Geo（geo.c、geohash.c、geohash_helper.c）<br>- Stream（t_stream.c、rax.c、listpack.c）<br><br>全局：<br>- Server（server.c、anet.c）<br>- Object（object.c）<br>- 键值对（db.c）<br>- 事件驱动（ae.c、ae_epoll.c、ae_kqueue.c、ae_evport.c、ae_select.c、networking.c）<br>- 内存回收（expire.c、lazyfree.c）<br>- 数据替换（evict.c）<br>- 后台线程（bio.c）<br>- 事务（multi.c）<br>- PubSub（pubsub.c）<br>- 内存分配（zmalloc.c）<br>- 双向链表（adlist.c）<br><br>高可用&amp;集群：<br>- 持久化：RDB（rdb.c、redis-check-rdb.c)、AOF（aof.c、redis-check-aof.c）<br>- 主从复制（replication.c）<br>- 哨兵（sentinel.c）<br>- 集群（cluster.c）<br><br>辅助功能：<br>- 延迟统计（latency.c）<br>- 慢日志（slowlog.c）<br>- 通知（notify.c）<br>- 基准性能（redis-benchmark.c）<br><br>下面解答课后问题：<br><br>Redis 从 4.0 版本开始，能够支持后台异步执行任务，比如异步删除数据，你能在 Redis 功能源码中，找到实现后台任务的代码文件么？<br><br>后台任务的代码在 bio.c 中。<br><br>Redis Server 在启动时，会在 server.c 中调用 bioInit 函数，这个函数会创建 3 类后台任务（类型定义在 bio.h 中）：<br><br>#define BIO_CLOSE_FILE    0 &#47;&#47; 后台线程关闭 fd<br>#define BIO_AOF_FSYNC     1 &#47;&#47; AOF 配置为 everysec，后台线程刷盘<br>#define BIO_LAZY_FREE     2 &#47;&#47; 后台线程释放 key 内存<br><br>这 3 类后台任务，已经注册好了执行固定的函数（消费者）：<br><br>- BIO_CLOSE_FILE 对应执行 close(fd)<br>- BIO_AOF_FSYNC 对应执行 fsync(fd)<br>- BIO_LAZY_FREE 根据参数不同，对应 3 个函数（freeObject&#47;freeDatabase&#47;freeSlowsMap）<br><br>之后，主线程凡是需要把一个任务交给后台线程处理时，就会调用 bio.c 的 bioCreateBackgroundJob 函数（相当于发布异步任务的函数），并指定该任务是上面 3 个的哪一类，把任务挂到对应类型的「链表」下（bio_jobs[type]），任务即发布成功（生产者任务完成）。<br><br>消费者从链表中拿到生产者发过来的「任务类型 + 参数」，执行上面任务对应的方法即可。当然，由于是「多线程」读写链表数据，这个过程是需要「加锁」操作的。<br><br>如果要找「异步删除数据」的逻辑，可以从 server.c 的 unlink 命令为起点，一路跟代码进去，就会看到调用了 lazyfree.c 的 dbAsyncDelete 函数，这个函数最终会调到上面提到的发布异步任务函数 bioCreateBackgroundJob，整个链条就串起来了。","like_count":133,"discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386135,"discussion_content":"补充：其实 Redis 在 2.8 版本就已支持了「后台线程」，但当时只有 2 类：异步关闭fd、AOF 后台刷盘。\n\n直到 4.0 版本，又加入了 lazy-free 后台线程。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1627438591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1043475,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","nickname":"neohope","note":"","ucode":"C0268F6E7E2B6E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545867,"discussion_content":"补充几个：\n\n数据结构：\n- 字符串（t_string.c、sds.c、sdsalloc.h）\n- 位运算（bitops.c）\n- 链表（t_list.c、ziplist.c）\n- 双向链表（adlist.c、quicklist.c）\n- 哈希表（t_hash.c、ziplist.c、dict.c、zipmap.c）\n- 集合（t_set.c、intset.c）\n- 有序集合（t_zset.c、ziplist.c、dict.c）\n- 基数树（rax.c）\n- HyperLogLog（hyperloglog.c）\n- 经纬度（geo.c、geohash.c、geohash_helper.c）\n- 流（t_stream.c、rax.c、listpack.c）\n- Redis对象（object.c）\n\n算法：\n- 排序（Sort.c、pqsort.c）\n- 哈希（spihash.c）\n- SHA（sha1.c、sha256.c）\n- CRC（crc16.c、crc16_slottable.h、crc64.c、crcspeed.c）\n- 随机数（rand.c、mt19937-64.c）\n- 压缩（lzf_c.c、lzf_d.c、lzf_h.c）\n- 微线图（sparkline.c）\n\n全局功能：\n- Server入口（server.c、anet.c）\n- CLI（cli-common.c、reids-cli.c、help.h、setproctitle.c）\n- 事件驱动（ae.c、ae_epoll.c、ae_kqueue.c、ae_evport.c、ae_select.c、networking.c）\n- 事务（multi.c）\n- IO（syncio.c、rio.c）\n- 后台IO线程（bio.c）\n- 阻塞操作（blocked.c）\n- DB API（db.c）\n- 时钟管理（monotonic.c、localtime.c）\n- 传输管理（anet.c、networking.c、connection.c、connhelpers.h、gopher.c、tls.c、timeout.c）\n- 权限管理（acl.c）\n- 配置管理（config.c）\n- 模块管理（module.c）\n- 客户端缓存支持（tracking.c）\n\n内存与CPU：\n- 内存分配（zmalloc.c）\n- 内存回收（expire.c、lazyfree.c）\n- 内存碎片整理（defrag.c）\n- 大小端转换（endinconv.c）\n- 内存配额（evict.c）\n- 原子操作（atomicvar.h）\n- CPU绑定（setcpuaffinity.c）\n\n高可用&amp;集群：\n- 内存快照RDB（rdb.c、redis-check-rdb.c)\n- AOF日志（aof.c、redis-check-aof.c）\n- 主从复制（replication.c）\n- 订阅发布PubSub（pubsub.c）\n- 集群（cluster.c）\n- 哨兵（sentinel.c）\n\n辅助功能：\n- 延迟统计（latency.c）\n- 慢日志（slowlog.c）\n- 通知（notify.c）\n- 基准性能（redis-benchmark.c）\n- 调试工具（memtest.c、testhelper.c、redisassert.h、debug.c、debugmacro.h）","likes_number":5,"is_delete":false,"is_hidden":false,"ctime":1642067757,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3010843,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/f1/1b/0957d4c5.jpg","nickname":"王飞","note":"","ucode":"5F029E870B200F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585358,"discussion_content":"大佬，从你这学习到了很多，赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661499294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2109213,"avatar":"https://static001.geekbang.org/account/avatar/00/20/2f/1d/7793e233.jpg","nickname":"gzh4869","note":"","ucode":"C7472DB064C3B4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584125,"discussion_content":"优秀啊老哥","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660635293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"辽宁"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1430524,"avatar":"https://static001.geekbang.org/account/avatar/00/15/d3/fc/e1b29953.jpg","nickname":"慢走夜街","note":"","ucode":"CB7B760604428D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388247,"discussion_content":"又看到大佬了。。第一季就从你这学习很多，真的nice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628667161,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1305172,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ea/54/b4f0a77b.jpg","nickname":"lizy","note":"","ucode":"2DB56C2F4D7D39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387539,"discussion_content":"大佬，真棒👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628237484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1365206,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d4/d6/1d4543ac.jpg","nickname":"云海","note":"","ucode":"0C6CA0BE58EA21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386795,"discussion_content":"补充下，List 数据类型 里遗漏了 一个 quicklist.c","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627805193,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1365206,"avatar":"https://static001.geekbang.org/account/avatar/00/14/d4/d6/1d4543ac.jpg","nickname":"云海","note":"","ucode":"0C6CA0BE58EA21","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386845,"discussion_content":"确实，感谢补充！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627835827,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386795,"ip_address":""},"score":386845,"extra":""}]},{"author":{"id":1131135,"avatar":"","nickname":"Ivy","note":"","ucode":"78156E0D5DEC52","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386282,"discussion_content":"大佬你是真的厉害！跟着你学习到很多！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627496380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1131135,"avatar":"","nickname":"Ivy","note":"","ucode":"78156E0D5DEC52","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386322,"discussion_content":"一起学习😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627526593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386282,"ip_address":""},"score":386322,"extra":""}]}]},{"had_liked":false,"id":304290,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1627317270,"is_pvip":true,"discussion_count":5,"race_medal":0,"score":"44576990230","product_id":100084301,"comment_content":"回答每课一问：<br>Redis 从 4.0 版本开始，能够支持后台异步执行任务，比如异步删除数据，你能在 Redis 功能源码中，找到实现后台任务的代码文件么？<br><br>我翻看了 3.0 的源码，发现 3.0 就支持后台任务了。在文件 src\\bio.c 里面有一个后台任务的函数：<br>bioProcessBackgroundJobs，支持两种后台任务：关闭文件和 AOF 文件的 fsync 也是放到后台执行的。<br><br>（fsync 就是执行命令后将命令写到日志中，提供了三种策略：Always，同步写回，Everysec，每秒写回，No，操作系统控制的写回。）<br><br>疑问：根据 3.0 源码，Redis 3.0 其实就已经有后台任务了，老师在文中说的 4.0 才开始支持后台任务，我没理解。<br><br>然后我又去翻了下 4.0 的源码，增加一种后台任务：BIO_LAZY_FREE。<br><br>当任务类型等于 BIO_LAZY_FREE 时，针对不同的传参，可以释放对象、数据库、跳跃表。<br><br>对于释放可以稍微说一下，释放的源码在这个文件里面：\\src\\lazyfree.c，相对 3.0 来说，这个文件是新增加的。<br><br>关于对象的释放，我们可以联想到 Java 的垃圾回收算法：可达性分析算法，但是 Redis 的垃圾回收算法用的是引用计数算法，另外 PHP 的垃圾回收算法用的也是引用计数（扩展下：用了多色标记的方式，来识别垃圾，详细参考这里：https:&#47;&#47;mp.weixin.qq.com&#47;s&#47;n6PGIgfZ8vXUZ1rkU5Otog），所以别再说引用计数不能用做垃圾回收了哦。<br><br>而对于 Redis 释放对象来说，会减少引用的次数，调用的是这个函数：decrRefCount(o); 根据函数的名字也容易理解。<br><br>吐槽下：Github 上下载源码总是下载失败，为了其他同学们方便下载，我整理了多套源码的下载地址，都是国内的网盘链接，只有几MB 大小，下载比较快的。<br><br>http:&#47;&#47;www.passjava.cn&#47;#&#47;12.Redis&#47;00.DownloadRedis","like_count":11,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385978,"discussion_content":"见到大佬本尊了，向大佬学习","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1627370980,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2032790,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/9o4qQVZB2FjiaDxwLYZhL3E7HpvRIvETvZKGtF7Wiasc3jNIvTODQ6utnbQFQDYzzicqfwGM2MjNOblIBLLUmWFMQ/132","nickname":"Geek_adf04b","note":"","ucode":"CD709E278D979B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575923,"discussion_content":"厉害","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655190381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1162791,"avatar":"https://static001.geekbang.org/account/avatar/00/11/be/27/f6f45877.jpg","nickname":"树猫","note":"","ucode":"F6B18589A30AA8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":387120,"discussion_content":"课代表2.0！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627996355,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2397850,"avatar":"https://static001.geekbang.org/account/avatar/00/24/96/9a/0bd88255.jpg","nickname":"飞羽","note":"","ucode":"9CDC1A2D060320","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386037,"discussion_content":"多套源码有多多，我要打十个","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627385853,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1123163,"avatar":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","nickname":"悟空聊架构","note":"","ucode":"C2F482A0CF8AF1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2397850,"avatar":"https://static001.geekbang.org/account/avatar/00/24/96/9a/0bd88255.jpg","nickname":"飞羽","note":"","ucode":"9CDC1A2D060320","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":386100,"discussion_content":"配套源码可以先下载下来看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627398926,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386037,"ip_address":""},"score":386100,"extra":""}]}]},{"had_liked":false,"id":304526,"user_name":"Ethan New","can_delete":false,"product_type":"c1","uid":2063962,"ip_address":"","ucode":"9CA2EF39E58030","user_header":"https://static001.geekbang.org/account/avatar/00/1f/7e/5a/da39f489.jpg","comment_is_top":false,"comment_ctime":1627465601,"is_pvip":true,"discussion_count":0,"race_medal":4,"score":"35987203969","product_id":100084301,"comment_content":"评论区也太强了吧，瑟瑟发抖","like_count":8},{"had_liked":false,"id":304214,"user_name":"可怜大灰狼","can_delete":false,"product_type":"c1","uid":1928373,"ip_address":"","ucode":"6CA9D6D460B967","user_header":"https://static001.geekbang.org/account/avatar/00/1d/6c/b5/32374f93.jpg","comment_is_top":false,"comment_ctime":1627294420,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23102130900","product_id":100084301,"comment_content":"我的第一反应应该是从unlink命令入手查找。首先肯定是server.c中redisCommandTable[]中的unlinkCommand，找到了lazyfree.c中dbAsyncDelete方法，然后找到了bio.c中bioCreateBackgroundJob方法，很显然bio.h中加了一种后台IO任务类型：BIO_LAZY_FREE=2。我记得我看3.0代码还只有BIO_CLOSE_FILE和BIO_AOF_FSYNC","like_count":5},{"had_liked":false,"id":304210,"user_name":"Darren","can_delete":false,"product_type":"c1","uid":1254968,"ip_address":"","ucode":"CCD2B2C492BE9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/26/38/ef063dc2.jpg","comment_is_top":false,"comment_ctime":1627293512,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"23102129992","product_id":100084301,"comment_content":"bio.c<br>在5.x的源码中，后台异步执行又3个子线程<br>#define BIO_NUM_OPS       3<br>#define BIO_CLOSE_FILE    0 &#47;* Deferred close(2) syscall. *&#47;<br>#define BIO_AOF_FSYNC     1 &#47;* Deferred AOF fsync. *&#47;<br>#define BIO_LAZY_FREE     2 &#47;* Deferred objects freeing. *&#47;<br><br>bioInit方法中通过pthread_create创建BIO_NUM_OPS子线程，不同线程的任务在static list *bio_jobs[BIO_NUM_OPS]中存储。","like_count":5},{"had_liked":false,"id":304708,"user_name":"陌","can_delete":false,"product_type":"c1","uid":1152678,"ip_address":"","ucode":"13FF1D4B3181F0","user_header":"https://static001.geekbang.org/account/avatar/00/11/96/a6/aac2a550.jpg","comment_is_top":false,"comment_ctime":1627559648,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"14512461536","product_id":100084301,"comment_content":"关于作业，如果一开始对 Redis 源码不熟悉的话，我们可以借用 GDB 工具来回答 Redis 有哪些后台任务:<br><br>1) 添加 -g 的编码参数，向编译文件中添加调试信息，以便使用 GDB：<br><br>make CFLAGS=&quot;-g -O0&quot;<br><br>2) cd src &amp;&amp; gdb redis-server<br><br>3) 在 aeMain 函数处打一个断点，然后再使得程序运行至此处:<br>break aeMain<br>run<br><br>4) 查看线程信息:<br>info threads<br><br>这时候我们就能够看到 4 个线程的相关信息，分别是 redis-server、bio_close_file、bio_aof_fsync、bio_lazy_free，然后就可以按线程名称再去源码中查找了。","like_count":4,"discussions":[{"author":{"id":1363671,"avatar":"https://static001.geekbang.org/account/avatar/00/14/ce/d7/5315f6ce.jpg","nickname":"不负青春不负己🤘","note":"","ucode":"A6DD8E8B20EA6E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575158,"discussion_content":"M","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654617575,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304218,"user_name":"Kang","can_delete":false,"product_type":"c1","uid":1237655,"ip_address":"","ucode":"088A8DA0A16BDE","user_header":"https://static001.geekbang.org/account/avatar/00/12/e2/97/dfadcc92.jpg","comment_is_top":false,"comment_ctime":1627295061,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"14512196949","product_id":100084301,"comment_content":"请问下老师，各个源码目录的作用是从那里获取到的，mysql的话也会有相应解释吗","like_count":3,"discussions":[{"author":{"id":2542376,"avatar":"https://static001.geekbang.org/account/avatar/00/26/cb/28/21a8a29e.jpg","nickname":"夏天","note":"","ucode":"5F224DDAC94DFF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":550886,"discussion_content":"GitHub readme 就有呀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1644779574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304348,"user_name":"小五","can_delete":false,"product_type":"c1","uid":1411419,"ip_address":"","ucode":"B7B1F121837CD9","user_header":"https://static001.geekbang.org/account/avatar/00/15/89/5b/b014ce14.jpg","comment_is_top":false,"comment_ctime":1627362722,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10217297314","product_id":100084301,"comment_content":"1 Redis 支持 3 大类型的后台任务，它们定义在 bio.h 文件中：<br>&#47;* Background job opcodes 后台作业操作码<br> * 1 处理关闭文件<br> * 2 AOF 异步刷盘<br> * 3 lazyfree<br> *&#47;<br>#define BIO_CLOSE_FILE    0 &#47;* Deferred close(2) syscall. *&#47;<br>#define BIO_AOF_FSYNC     1 &#47;* Deferred AOF fsync. *&#47;<br>#define BIO_LAZY_FREE     2 &#47;* Deferred objects freeing. *&#47;<br><br>在 Redis 服务器启动时，会创建以上三类后台线程，然后阻塞等待任务的到来。处理关闭文件和 AOF 异步刷盘异步任务比较好理解，lazyfree 类型的异步任务场景就比较多了，比如下面几种情况：<br>1）删除数据：配置 lazyfree_lazy_user_del ，使用 unlink , 都可能将删除封装成任务放到 bio_jobs 任务队列中<br>2) 定期删除时，如果配置 lazyfree_lazy_expire ，那么可能将删除封装成任务放到 bio_jobs 任务队列中<br><br>2 后台创建的以上三种 bio 后台线程会不断轮询 bio_jobs 任务队列中的任务，并分门别类的处理对应的任务。逻辑操作定义在 bio.c 文件中<br><br>3 在 Redis 6.0 中增加了 io 多线程，在 networking.c 中定义了 io 线程的任务队列，以及创建 io_threads_num 个 io 线程，这些 io 线程会不断轮询 IO 读写任务。","like_count":2},{"had_liked":false,"id":304235,"user_name":"lison","can_delete":false,"product_type":"c1","uid":1225040,"ip_address":"","ucode":"900FCD4BD518D6","user_header":"https://static001.geekbang.org/account/avatar/00/12/b1/50/678a529b.jpg","comment_is_top":false,"comment_ctime":1627300169,"is_pvip":false,"replies":[{"id":"110489","content":"咱们这次专栏阅读的源码版本是Redis 5.0.8，源码文件可以在 https:&#47;&#47;github.com&#47;redis&#47;redis&#47;tree&#47;5.0&#47;src 上下载<br><br>编译可以就用gcc。<br><br>如果同步有问题，可以留言哈","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1628040786,"ip_address":"","comment_id":304235,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5922267465","product_id":100084301,"comment_content":"老师，有幸听了您的集训班，想咨询下 后续章节是否有具体版本和编译工具的介绍，后续好和您保持同步","like_count":1,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523987,"discussion_content":"咱们这次专栏阅读的源码版本是Redis 5.0.8，源码文件可以在 https://github.com/redis/redis/tree/5.0/src 上下载\n\n编译可以就用gcc。\n\n如果同步有问题，可以留言哈","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1628040786,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348857,"user_name":"汤小高","can_delete":false,"product_type":"c1","uid":1555565,"ip_address":"","ucode":"D4AB7766273D52","user_header":"https://static001.geekbang.org/account/avatar/00/17/bc/6d/f6f0a442.jpg","comment_is_top":false,"comment_ctime":1655467375,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1655467375","product_id":100084301,"comment_content":"老师，能不能提供完整调试的搭建环境方案呀，看源码应该需要调试的","like_count":0},{"had_liked":false,"id":346580,"user_name":"Geek_25565b","can_delete":false,"product_type":"c1","uid":1592987,"ip_address":"","ucode":"0C3A01C4B0AB66","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/CV9kk5M26pdIuAxwdXvj90ewKECzdSmzO4ibP6iaLXY50hICibefmib4qGvu1wCSfXuRobFC86z7W3OcfncpV8Uevw/132","comment_is_top":false,"comment_ctime":1653257174,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1653257174","product_id":100084301,"comment_content":"用什么工具看源码？","like_count":0,"discussions":[{"author":{"id":2675181,"avatar":"","nickname":"Geek_66617b","note":"","ucode":"D5B468568B8F39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575783,"discussion_content":"使用CLion在Windows下调试Redis详细教程\nhttps://www.maoyingdong.com/redis/debug_redis/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655107101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":309940,"user_name":"z","can_delete":false,"product_type":"c1","uid":2753288,"ip_address":"","ucode":"7FE4B1CFB688F1","user_header":"https://static001.geekbang.org/account/avatar/00/2a/03/08/eacfce6a.jpg","comment_is_top":false,"comment_ctime":1630401395,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630401395","product_id":100084301,"comment_content":"bioCreateBackgroundJob 这个就是异步执行逻辑吗？","like_count":0},{"had_liked":false,"id":305960,"user_name":"肖鹏","can_delete":false,"product_type":"c1","uid":1302602,"ip_address":"","ucode":"BE1B8BD7053B9A","user_header":"https://static001.geekbang.org/account/avatar/00/13/e0/4a/c0a3cb3f.jpg","comment_is_top":false,"comment_ctime":1628243681,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1628243681","product_id":100084301,"comment_content":"希望了解一下redis 外部数据结构到内部数据结构中间是怎么转换的","like_count":0,"discussions":[{"author":{"id":1671992,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/grNrH2wy17bM79B45U5VicTWWgk6kicaX6M5a98tNXg4jC52EvQn3DSLicwgrIYCImCaviaVIiak5ANJc3uvhafBraQ/132","nickname":"Frlyh","note":"","ucode":"E40E475073C451","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391818,"discussion_content":"redisobject","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630643350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305521,"user_name":"结冰的水滴","can_delete":false,"product_type":"c1","uid":1350505,"ip_address":"","ucode":"088108D4848353","user_header":"https://static001.geekbang.org/account/avatar/00/14/9b/69/b844df30.jpg","comment_is_top":false,"comment_ctime":1628008145,"is_pvip":true,"discussion_count":3,"race_medal":0,"score":"1628008145","product_id":100084301,"comment_content":"看redis源码，有好用的IDE么，老师能给推荐一个么","like_count":0,"discussions":[{"author":{"id":2675181,"avatar":"","nickname":"Geek_66617b","note":"","ucode":"D5B468568B8F39","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575784,"discussion_content":"使用CLion在Windows下调试Redis详细教程\nhttps://www.maoyingdong.com/redis/debug_redis/","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655107112,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1224546,"avatar":"https://static001.geekbang.org/account/avatar/00/12/af/62/5eeb9041.jpg","nickname":"里咯破","note":"","ucode":"2DA41A6D44B3C4","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":392417,"discussion_content":"现在clion可以很好的调试了,以前得用cmake编译,现在能直接编译makefile了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1631000070,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1349358,"avatar":"https://static001.geekbang.org/account/avatar/00/14/96/ee/9b21c199.jpg","nickname":"咸","note":"","ucode":"1F189A2B1A6A71","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388143,"discussion_content":"您这边有好的调试方法吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628608943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305015,"user_name":"lzh2nix","can_delete":false,"product_type":"c1","uid":1066191,"ip_address":"","ucode":"2B9AC282082F7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/cf/a0315a85.jpg","comment_is_top":false,"comment_ctime":1627770939,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627770939","product_id":100084301,"comment_content":"另外你还需要知道的是，Redis 的主从集群在进行恢复时，主要是依赖于哨兵机制，而这部分功能则直接实现在了 sentinel.c 文件中。<br><br>老师这里的描述是不是有问题，redis的高可用有两种方式sentinel模式和cluster模式，这里在cluster模式下的主从复制不依赖哨兵机制吧？","like_count":1},{"had_liked":false,"id":305014,"user_name":"lzh2nix","can_delete":false,"product_type":"c1","uid":1066191,"ip_address":"","ucode":"2B9AC282082F7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/cf/a0315a85.jpg","comment_is_top":false,"comment_ctime":1627770491,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627770491","product_id":100084301,"comment_content":"redis模块化做的特别好，如果想看一个模块我都先看下对应模块.h文件， 在.h中可以看到外提供里那些能力，再去看具体的实现。最后回答以下每日一问里的问题，后台异步相关的的都是再bio.h&#47;bio.c中，我们可以看下bio.h中提供了个那些能力。<br><br>void bioInit(void);<br>void bioCreateBackgroundJob(int type, void *arg1, void *arg2, void *arg3);<br>unsigned long long bioPendingJobsOfType(int type);<br>unsigned long long bioWaitStepOfType(int type);<br>time_t bioOlderJobOfType(int type);<br>void bioKillThreads(void);<br><br>&#47;* Background job opcodes *&#47;<br>#define BIO_CLOSE_FILE    0 &#47;* Deferred close(2) syscall. *&#47;<br>#define BIO_AOF_FSYNC     1 &#47;* Deferred AOF fsync. *&#47;<br>#define BIO_LAZY_FREE     2 &#47;* Deferred objects freeing. *&#47;<br>#define BIO_NUM_OPS       3<br><br>在种类定义对外的API(管理BIO相关的任务)， 已经有三种backgroup jop，然后再去看这个三种job的具体实现。在bio.c中我们可以看到pthread的经典用法。","like_count":0},{"had_liked":false,"id":304960,"user_name":"lzh2nix","can_delete":false,"product_type":"c1","uid":1066191,"ip_address":"","ucode":"2B9AC282082F7D","user_header":"https://static001.geekbang.org/account/avatar/00/10/44/cf/a0315a85.jpg","comment_is_top":false,"comment_ctime":1627717981,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1627717981","product_id":100084301,"comment_content":"&quot;包括 glibc 库提供的默认分配器 tcmalloc&quot;<br><br>老师这里描述是不是有问题， glibc使用的是ptmalloc(参考 https:&#47;&#47;www.gnu.org&#47;software&#47;libc&#47;manual&#47;html_node&#47;The-GNU-Allocator.html)，tcmalloc是google搞出来的，golang默认采用的是tcmalloc。","like_count":0,"discussions":[{"author":{"id":1188710,"avatar":"https://static001.geekbang.org/account/avatar/00/12/23/66/413c0bb5.jpg","nickname":"LDxy","note":"","ucode":"956432CE7B7761","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":391386,"discussion_content":"这个的效率很低吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630426640,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304452,"user_name":"冯磊","can_delete":false,"product_type":"c1","uid":1855112,"ip_address":"","ucode":"4FFB8B984269FB","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIYj6Zv3ibicLebxo7lsPMEwpBynHkYp8pLc3FcltUfmOBSRxpmicEwIAgP9OvSKnGGdaxwsZ7yiciaSsQ/132","comment_is_top":false,"comment_ctime":1627433348,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627433348","product_id":100084301,"comment_content":"等我复习下c语言，马上回来！","like_count":0},{"had_liked":false,"id":304390,"user_name":"曾轼麟","can_delete":false,"product_type":"c1","uid":1451391,"ip_address":"","ucode":"D418371AC11270","user_header":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","comment_is_top":false,"comment_ctime":1627380802,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627380802","product_id":100084301,"comment_content":"以unlink为例子，其实是有几个步骤的：<br>    1、首先在redis启动的时候会调用bioInit初始化异步执行的线程，等待注册任务执行（截至到6.x版本目前只初始化三个线程，对应三种异步类型，每个线程只处理指定类型的任务，概念上和线程池不一样）<br>    2、当执行unlink的时候，先删除key在字典上的指针，如果不需要异步直接使用dictFreeUnlinkedEntry释放内存，如果需要直接跳过释放步骤<br>    3、通过lazyfreeGetFreeEffort函数计算删除key的代价，如果代价超过阈值则注册一个bioCreateLazyFreeJob 并标记类型为BIO_LAZY_FREE等待异步执行<br>    4、异步线程执行job释放内存<br><br><br><br>实际代码流程如下所示：<br>    1、unlink主流程（允许异步）：unlinkCommand -&gt; delGenericCommand -&gt; dbAsyncDelete -&gt; dictUnlink -&gt; 注册bioCreateBackgroundJob<br>    2、unlink主流程（不用异步）：unlinkCommand -&gt; delGenericCommand -&gt; dbAsyncDelete -&gt; dictUnlink -&gt; dictFreeUnlinkedEntry(直接释放内存)<br><br>对应的代码在lazyfree.c和bio.c文件中，此外异步执行一共支持三种类型 BIO_CLOSE_FILE（异步关闭文件）BIO_AOF_FSYNC（AOF异步同步） BIO_LAZY_FREE（懒删除）","like_count":0},{"had_liked":false,"id":304346,"user_name":"sljoai","can_delete":false,"product_type":"c1","uid":1018071,"ip_address":"","ucode":"FF88C4BA265DE0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/88/d7/07f8bc6c.jpg","comment_is_top":false,"comment_ctime":1627362294,"is_pvip":false,"discussion_count":5,"race_medal":0,"score":"1627362294","product_id":100084301,"comment_content":"没什么C语言开发经验，请问一下大家都是采用哪种开发工具来查看及调试Redis源码的?","like_count":0,"discussions":[{"author":{"id":2187697,"avatar":"https://static001.geekbang.org/account/avatar/00/21/61/b1/8bacdc31.jpg","nickname":"当当当当","note":"","ucode":"A5210F5EC47F74","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386142,"discussion_content":"InteliJ的Clion，感觉idea用习惯了用这个非常舒服的","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1627440855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1271258,"avatar":"https://static001.geekbang.org/account/avatar/00/13/65/da/0bcc39eb.jpg","nickname":"高进","note":"","ucode":"BB78F1E377A82D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2187697,"avatar":"https://static001.geekbang.org/account/avatar/00/21/61/b1/8bacdc31.jpg","nickname":"当当当当","note":"","ucode":"A5210F5EC47F74","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":391567,"discussion_content":"我这个javaer 用clion  ，手到擒来 和idea一样","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1630513910,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":386142,"ip_address":""},"score":391567,"extra":""}]},{"author":{"id":1082412,"avatar":"https://static001.geekbang.org/account/avatar/00/10/84/2c/37064b41.jpg","nickname":"wuyue8hao","note":"","ucode":"6D0FA21784A99B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587077,"discussion_content":"sourceinsight","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662743456,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1271812,"avatar":"https://static001.geekbang.org/account/avatar/00/13/68/04/a5d81cb1.jpg","nickname":"尹政","note":"","ucode":"D98663ABE1723C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386160,"discussion_content":"understand","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627454049,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1451391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/25/7f/473d5a77.jpg","nickname":"曾轼麟","note":"","ucode":"D418371AC11270","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":386035,"discussion_content":"GDB","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627385576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304270,"user_name":"Leven","can_delete":false,"product_type":"c1","uid":1701728,"ip_address":"","ucode":"0915094BC4C0C5","user_header":"https://static001.geekbang.org/account/avatar/00/19/f7/60/31c5873e.jpg","comment_is_top":false,"comment_ctime":1627310845,"is_pvip":false,"replies":[{"id":"110491","content":"建议要有些C语言的语法基础，例如基本数据类型、结构体、联合体、宏定义、控制分支、函数调用、指针等这些概念要有。<br><br>否则读起来会有些辛苦的","user_name":"作者回复","user_name_real":"蒋德钧","uid":"1609687","ctime":1628041030,"ip_address":"","comment_id":304270,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1627310845","product_id":100084301,"comment_content":"请问老师，没有c语言基础适合吗","like_count":0,"discussions":[{"author":{"id":1609687,"avatar":"https://static001.geekbang.org/account/avatar/00/18/8f/d7/fb60129d.jpg","nickname":"蒋德钧","note":"","ucode":"833985C2C37C0A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523998,"discussion_content":"建议要有些C语言的语法基础，例如基本数据类型、结构体、联合体、宏定义、控制分支、函数调用、指针等这些概念要有。\n\n否则读起来会有些辛苦的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628041030,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":304227,"user_name":"夜空中最亮的星","can_delete":false,"product_type":"c1","uid":1267566,"ip_address":"","ucode":"ADC3E7B6789955","user_header":"https://static001.geekbang.org/account/avatar/00/13/57/6e/b6795c44.jpg","comment_is_top":false,"comment_ctime":1627298193,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1627298193","product_id":100084301,"comment_content":"一讲这么长，必须买","like_count":0}]}