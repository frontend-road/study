{"id":113669,"title":"25丨Hash索引的底层原理是什么？","content":"<p>我们上节课讲解了B+树的原理，今天我们来学习下Hash的原理和使用。Hash本身是一个函数，又被称为散列函数，它可以帮助我们大幅提升检索数据的效率。打个比方，Hash就好像一个智能前台，你只要告诉它想要查找的人的姓名，它就会告诉你那个人坐在哪个位置，只需要一次交互就可以完成查找，效率非常高。大名鼎鼎的MD5就是Hash函数的一种。</p><p>Hash算法是通过某种确定性的算法（比如MD5、SHA1、SHA2、SHA3）将输入转变为输出。相同的输入永远可以得到相同的输出，假设输入内容有微小偏差，在输出中通常会有不同的结果。如果你想要验证两个文件是否相同，那么你不需要把两份文件直接拿来比对，只需要让对方把Hash函数计算得到的结果告诉你即可，然后在本地同样对文件进行Hash函数的运算，最后通过比较这两个Hash函数的结果是否相同，就可以知道这两个文件是否相同。</p><p>Hash可以高效地帮我们完成验证的工作，它在数据库中有广泛的应用。今天的课程主要包括下面几个部分：</p><ol>\n<li>动手写程序统计一下Hash检索的效率。</li>\n<li>了解MySQL中的Hash索引，理解使用它的优点和不足。</li>\n<li>Hash索引和B+树索引的区别以及使用场景。</li>\n</ol><h2>动手统计Hash检索效率</h2><!-- [[[read_end]]] --><p>我们知道Python的数据结构中有数组和字典两种，其中数组检索数据类似于全表扫描，需要对整个数组的内容进行检索；而字典是由Hash表实现的，存储的是key-value值，对于数据检索来说效率非常快。</p><p>对于Hash的检索效率，我们来个更直观的认知。下面我们分别看一下采用数组检索数据和采用字典（Hash）检索数据的效率到底有怎样的差别。</p><p>实验1：在数组中添加10000个元素，然后分别对这10000个元素进行检索，最后统计检索的时间。</p><p>代码如下：</p><pre><code>import time\n# 插入数据\nresult = []\nfor i in range(10000):\n       result.append(i)\n# 检索数据\ntime_start=time.time()\nfor i in range(10000):\n       temp = result.index(i)\ntime_end=time.time()\nprint('检索时间', time_end-time_start)\n</code></pre><p>运行结果：</p><p>检索时间为1.2436728477478027秒</p><p>实验2：采用Hash表的形式存储数据，即在Python中采用字典方式添加10000个元素，然后检索这10000个数据，最后再统计一下时间。代码如下：</p><pre><code>import time\n# 插入数据\nresult = {}\nfor i in range(1000000):\n       result[i] = i\n# 检索数据\ntime_start=time.time()\nfor i in range(10000):\n       temp = result[i]\ntime_end=time.time()\nprint('检索时间：',time_end-time_start)\n</code></pre><p>运行结果：</p><p>检索时间为0.0019941329956054688秒。</p><p>你能看到Hash方式检索差不多用了2毫秒的时间，检索效率提升得非常明显。这是因为Hash只需要一步就可以找到对应的取值，算法复杂度为O(1)，而数组检索数据的算法复杂度为O(n)。</p><h2>MySQL中的Hash索引</h2><p>采用Hash进行检索效率非常高，基本上一次检索就可以找到数据，而B+树需要自顶向下依次查找，多次访问节点才能找到数据，中间需要多次I/O操作，从效率来说Hash比B+树更快。</p><p>我们来看下Hash索引的示意图：</p><p><img src=\"https://static001.geekbang.org/resource/image/d8/b6/d8ef0bc1ea85b9e5408fcf0126b2a2b6.png?wh=832*742\" alt=\"\"><br>\n键值key通过Hash映射找到桶bucket。在这里桶（bucket）指的是一个能存储一条或多条记录的存储单位。一个桶的结构包含了一个内存指针数组，桶中的每行数据都会指向下一行，形成链表结构，当遇到Hash冲突时，会在桶中进行键值的查找。</p><p>那么什么是Hash冲突呢？</p><p>如果桶的空间小于输入的空间，不同的输入可能会映射到同一个桶中，这时就会产生Hash冲突，如果Hash冲突的量很大，就会影响读取的性能。</p><p>通常Hash值的字节数比较少，简单的4个字节就够了。在Hash值相同的情况下，就会进一步比较桶（Bucket）中的键值，从而找到最终的数据行。</p><p>Hash值的字节数多的话可以是16位、32位等，比如采用MD5函数就可以得到一个16位或者32位的数值，32位的MD5已经足够安全，重复率非常低。</p><p>我们模拟一下Hash索引。关键字如下所示，每个字母的内部编码为字母的序号，比如A为01，Y为25。我们统计内部编码平方的第8-11位（从前向后）作为Hash值：</p><p><img src=\"https://static001.geekbang.org/resource/image/6b/3d/6bff085844127931e59e6faa368e223d.png?wh=1086*352\" alt=\"\"></p><h2>Hash索引与B+树索引的区别</h2><p>我们之前讲到过B+树索引的结构，Hash索引结构和B+树的不同，因此在索引使用上也会有差别。</p><ol>\n<li>Hash索引不能进行范围查询，而B+树可以。这是因为Hash索引指向的数据是无序的，而B+树的叶子节点是个有序的链表。</li>\n<li>Hash索引不支持联合索引的最左侧原则（即联合索引的部分索引无法使用），而B+树可以。对于联合索引来说，Hash索引在计算 Hash 值的时候是将索引键合并后再一起计算 Hash 值，所以不会针对每个索引单独计算Hash值。因此如果用到联合索引的一个或者几个索引时，联合索引无法被利用。</li>\n<li>Hash索引不支持ORDER BY排序，因为Hash索引指向的数据是无序的，因此无法起到排序优化的作用，而B+树索引数据是有序的，可以起到对该字段ORDER BY排序优化的作用。同理，我们也无法用Hash索引进行模糊查询，而B+树使用LIKE进行模糊查询的时候，LIKE后面前模糊查询（比如%开头）的话就可以起到优化作用。</li>\n</ol><p>对于等值查询来说，通常Hash索引的效率更高，不过也存在一种情况，就是索引列的重复值如果很多，效率就会降低。这是因为遇到Hash冲突时，需要遍历桶中的行指针来进行比较，找到查询的关键字，非常耗时。所以，Hash索引通常不会用到重复值多的列上，比如列为性别、年龄的情况等。</p><h2>总结</h2><p>我今天讲了Hash索引的底层原理，你能看到Hash索引存在着很多限制，相比之下在数据库中B+树索引的使用面会更广，不过也有一些场景采用Hash索引效率更高，比如在键值型（Key-Value）数据库中，Redis存储的核心就是Hash表。</p><p>另外MySQL中的Memory存储引擎支持Hash存储，如果我们需要用到查询的临时表时，就可以选择Memory存储引擎，把某个字段设置为Hash索引，比如字符串类型的字段，进行Hash计算之后长度可以缩短到几个字节。当字段的重复度低，而且经常需要进行等值查询的时候，采用Hash索引是个不错的选择。</p><p>另外MySQL的InnoDB存储引擎还有个“自适应Hash索引”的功能，就是当某个索引值使用非常频繁的时候，它会在B+树索引的基础上再创建一个Hash索引，这样让B+树也具备了Hash索引的优点。</p><p><img src=\"https://static001.geekbang.org/resource/image/88/90/8893fcfee2c8c374e9c7ae7e66f2cf90.jpg?wh=3341*2302\" alt=\"\"><br>\n今天的内容到这里就结束了，我留两道思考题吧。查找某个固定值时Hash索引比B+树更快，为什么MySQL还要采用B+树的存储索引呢？另外，当两个关键字的Hash值相同时会发生什么？</p><p>欢迎你在评论区写下你的思考，我会和你一起交流，也欢迎把这篇文章分享给你的朋友或者同事，一起交流一下。</p>","neighbors":{"left":{"article_title":"24丨索引的原理：我们为什么用B+树来做索引？","id":112298},"right":{"article_title":"26丨索引的使用原则：如何通过索引让SQL查询效率最大化？","id":116031}},"comments":[{"had_liked":false,"id":126645,"user_name":"吴小智","can_delete":false,"product_type":"c1","uid":1310798,"ip_address":"","ucode":"C7C9F58B5C9F7B","user_header":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","comment_is_top":false,"comment_ctime":1566440411,"is_pvip":false,"replies":[{"id":"47090","content":"我们先回顾下B+树索引和Hash索引：<br>B+树索引是MySQL的默认索引机制，也是大部分<br>因为可以使用范围搜索，可以很容易对数据进行排序操作，在联合索引中也可以利用部分索引建进行查询。这些情况下，我们都没法使用Hash索引，是因为Hash索引仅能满足=, &lt;&gt;, IN查询，不能使用范围查询，同时因为数据的存储是没有顺序的，所以在ORDER BY的情况下，还需要对数据重新进行排序。而对于联合索引的情况，Hash值是针对联合索引建合并后一起来计算Hash值，因此无法对单独的一个键或者几个索引键进行查询。<br><br>好了，默认使用B+树作为索引是因为B+树存在着以上的优点，那为什么还需要自适当Hash索引呢？这里，需要了解Hash索引的特点，因为Hash索引结构的特点，导致它的检索数据效率非常高，通常只需要O(1)的复杂度，也就是一次就可以完成数据的检索。虽然Hash索引的使用场景有很多限制，但是优点也很明显，所以MySQL提供了一个自适当Hash索引的功能（Adaptive Hash index）。注意，这里的自适应指的是不需要人工来制定，而是系统根据情况来自动完成的。<br>那什么情况下才会使用自适应Hash索引呢？如果某个数据经常会访问到，当满足一定条件的时候，就会将这个数据页的地址存放到Hash表中。这样下次查询的时候，就可以直接找到这个页面的所在位置。需要说明的是：<br>1）自适应哈希索引只保存热数据（经常被使用到的数据），并非全表数据。因此数据量并不会很大，可以让自适应Hash放到缓冲池中，也就是InnoDB buffer pool，进一步提升查找效率。<br><br>2）InnoDB中的自适应Hash相当于是“索引的索引”，采用Hash索引存储的是B+树索引中的页面的地址。这也就是为什么可以称自适应Hash为索引的索引。<br>采用自适应Hash索引目的是可以根据SQL的查询条件加速定位到叶子节点，特别是当B+树比较深的时候，通过自适应Hash索引可以提高数据的检索效率。<br><br>3）自适应Hash采用Hash函数映射到一个哈希表中，所以对于字典类型的数据查找非常方便<br>哈希表是数组+链表的形式。通过Hash函数可以计算索引键值所对应的bucket（桶）的位置，如果产生Hash冲突，如果产生哈希冲突，就需要遍历链表来解决。<br><br>4）是否开启了自适应Hash，可以通过innodb_adaptive_hash_index变量来查看，比如：mysql&gt; show variables like &#39;%adaptive_hash_index&#39;;<br><br><br>所以，总结下InnoDB本身不支持Hash，但是提供自适应Hash索引，不需要用户来操作，而是存储引擎自动完成的。自适应Hash也是InnoDB三大关键特性之一，另外两个分别是插入缓冲（Insert Buffer）和二次写(Double Write)。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1566629693,"ip_address":"","comment_id":126645,"utype":1}],"discussion_count":4,"race_medal":0,"score":"319394020315","product_id":100029501,"comment_content":"所以老师能在稍微解释一下“自适应 Hash 索引”吗？自己查了一些资料，不是很懂。","like_count":75,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464101,"discussion_content":"我们先回顾下B+树索引和Hash索引：\nB+树索引是MySQL的默认索引机制，也是大部分\n因为可以使用范围搜索，可以很容易对数据进行排序操作，在联合索引中也可以利用部分索引建进行查询。这些情况下，我们都没法使用Hash索引，是因为Hash索引仅能满足=, &amp;lt;&amp;gt;, IN查询，不能使用范围查询，同时因为数据的存储是没有顺序的，所以在ORDER BY的情况下，还需要对数据重新进行排序。而对于联合索引的情况，Hash值是针对联合索引建合并后一起来计算Hash值，因此无法对单独的一个键或者几个索引键进行查询。\n\n好了，默认使用B+树作为索引是因为B+树存在着以上的优点，那为什么还需要自适当Hash索引呢？这里，需要了解Hash索引的特点，因为Hash索引结构的特点，导致它的检索数据效率非常高，通常只需要O(1)的复杂度，也就是一次就可以完成数据的检索。虽然Hash索引的使用场景有很多限制，但是优点也很明显，所以MySQL提供了一个自适当Hash索引的功能（Adaptive Hash index）。注意，这里的自适应指的是不需要人工来制定，而是系统根据情况来自动完成的。\n那什么情况下才会使用自适应Hash索引呢？如果某个数据经常会访问到，当满足一定条件的时候，就会将这个数据页的地址存放到Hash表中。这样下次查询的时候，就可以直接找到这个页面的所在位置。需要说明的是：\n1）自适应哈希索引只保存热数据（经常被使用到的数据），并非全表数据。因此数据量并不会很大，可以让自适应Hash放到缓冲池中，也就是InnoDB buffer pool，进一步提升查找效率。\n\n2）InnoDB中的自适应Hash相当于是“索引的索引”，采用Hash索引存储的是B+树索引中的页面的地址。这也就是为什么可以称自适应Hash为索引的索引。\n采用自适应Hash索引目的是可以根据SQL的查询条件加速定位到叶子节点，特别是当B+树比较深的时候，通过自适应Hash索引可以提高数据的检索效率。\n\n3）自适应Hash采用Hash函数映射到一个哈希表中，所以对于字典类型的数据查找非常方便\n哈希表是数组+链表的形式。通过Hash函数可以计算索引键值所对应的bucket（桶）的位置，如果产生Hash冲突，如果产生哈希冲突，就需要遍历链表来解决。\n\n4）是否开启了自适应Hash，可以通过innodb_adaptive_hash_index变量来查看，比如：mysql&amp;gt; show variables like &amp;#39;%adaptive_hash_index&amp;#39;;\n\n\n所以，总结下InnoDB本身不支持Hash，但是提供自适应Hash索引，不需要用户来操作，而是存储引擎自动完成的。自适应Hash也是InnoDB三大关键特性之一，另外两个分别是插入缓冲（Insert Buffer）和二次写(Double Write)。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1566629693,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3023126,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/21/16/47fa109e.jpg","nickname":"铁马冰河入梦来","note":"","ucode":"48EDA86C9CB47B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":584542,"discussion_content":"。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1660902880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"辽宁"},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":3175551,"avatar":"","nickname":"张兴","note":"","ucode":"6BE80A3C026E36","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":3023126,"avatar":"https://static001.geekbang.org/account/avatar/00/2e/21/16/47fa109e.jpg","nickname":"铁马冰河入梦来","note":"","ucode":"48EDA86C9CB47B","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":588657,"discussion_content":"楼上的我也懵了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663936805,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":584542,"ip_address":"上海"},"score":588657,"extra":""}]},{"author":{"id":1310798,"avatar":"https://static001.geekbang.org/account/avatar/00/14/00/4e/be2b206b.jpg","nickname":"吴小智","note":"","ucode":"C7C9F58B5C9F7B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":11057,"discussion_content":"明白了，谢谢老师","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568355684,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121960,"user_name":"用0和1改变自己","can_delete":false,"product_type":"c1","uid":1527530,"ip_address":"","ucode":"42B8F6ECF6BDD0","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/lfMbV8RibrhFxjILg4550cZiaay64mTh5Zibon64TiaicC8jDMEK7VaXOkllHSpS582Jl1SUHm6Jib2AticVlHibiaBvUOA/132","comment_is_top":false,"comment_ctime":1565257977,"is_pvip":false,"replies":[{"id":"44842","content":"对的","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1565311102,"ip_address":"","comment_id":121960,"utype":1}],"discussion_count":1,"race_medal":0,"score":"65989767417","product_id":100029501,"comment_content":"1，Hash索引有很大的限制，如联合索引、模糊查询、范围查询，以及列里有重复值多。<br>2，需要遍历链表中所有行指针，逐一进行比较，直到找到所有符合条件的","like_count":16,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462027,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565311102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121484,"user_name":"TKbook","can_delete":false,"product_type":"c1","uid":1073829,"ip_address":"","ucode":"F6E0E99CC79059","user_header":"https://static001.geekbang.org/account/avatar/00/10/62/a5/43aa0c27.jpg","comment_is_top":false,"comment_ctime":1565146008,"is_pvip":false,"replies":[{"id":"44850","content":"因为我们要找的是某个元素的值，比如我添加的元素是1，3,5,7...99 一共50个元素，如果我想要找7这个元素，你会用7作为下标进行检索，还是将7作为元素值进行查找呢？<br>这里就需要检索具体的数值，对于数组来说下标是自动分配的，所以我们需要遍历数组来找到某个数值。<br>而对于字典来说，我们就可以创建索引了","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1565312089,"ip_address":"","comment_id":121484,"utype":1}],"discussion_count":4,"race_medal":0,"score":"57399720856","product_id":100029501,"comment_content":"有个疑问，在数组中，针对下标的检索，时间复杂度是O(1)。老师的代码中用的是result.index(i)，这个函数用的应该不是下标检索。因为当我把代码改成result[i]，检索时间 0.0009975433349609375","like_count":14,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461809,"discussion_content":"因为我们要找的是某个元素的值，比如我添加的元素是1，3,5,7...99 一共50个元素，如果我想要找7这个元素，你会用7作为下标进行检索，还是将7作为元素值进行查找呢？\n这里就需要检索具体的数值，对于数组来说下标是自动分配的，所以我们需要遍历数组来找到某个数值。\n而对于字典来说，我们就可以创建索引了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565312089,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1584098,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIR9QrAn9TZOrJMSYMyN96PAuAjETVrN5SPp3hMbfUAGIWtHceWPEoQtPdXeuBn7VB7dagtxynAIA/132","nickname":"ballgod","note":"","ucode":"C20E95E98EAC43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":238938,"discussion_content":"如果按照老师刚才讲的，应该是查找具体元素在列表和字典中所在的位置，列表应该是用list.index(value)，如此来讲，是不是字典应该是根据相应的值查找对应的键呢？ 使用字典的键进行查找是不是不大合适？\n","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1587261516,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1584098,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIR9QrAn9TZOrJMSYMyN96PAuAjETVrN5SPp3hMbfUAGIWtHceWPEoQtPdXeuBn7VB7dagtxynAIA/132","nickname":"ballgod","note":"","ucode":"C20E95E98EAC43","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377202,"discussion_content":"这里的业务场景是，我知道某个值，然后要找到他的位置。\n对于数组来讲，就是老师说的那样。对于字典来讲，我现在的理解是，例子当中的那个键值，就是我们根据哈希函数算出来的哈希值，根据这个哈希值可以找到对应的存放具体数据的位置。\n不知道，我理解的对不对，但是我觉得你说，字典应该是根据相映的值查找相对应的键，我知道你是类比的老师介绍数组。但是我觉得这样理解应该是不对的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1622546554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":238938,"ip_address":""},"score":377202,"extra":""}]},{"author":{"id":1030070,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b7/b6/17103195.jpg","nickname":"Elliot","note":"","ucode":"CC58A6FD2F338C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":344017,"discussion_content":"不太合适","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611235972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121470,"user_name":"我行我素","can_delete":false,"product_type":"c1","uid":1224678,"ip_address":"","ucode":"4C69542FAB0671","user_header":"https://static001.geekbang.org/account/avatar/00/12/af/e6/9c77acff.jpg","comment_is_top":false,"comment_ctime":1565143635,"is_pvip":false,"replies":[{"id":"63572","content":"多谢分享 我行我素同学","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577518552,"ip_address":"","comment_id":121470,"utype":1}],"discussion_count":1,"race_medal":0,"score":"40219849299","product_id":100029501,"comment_content":"回复下蒙开强，如果是使用navicat创建索引的时候在后面是可以直接选择索引类型的，如果使用sql创建索引就是在穿件的使用using指定，一般默认是B+","like_count":10,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461805,"discussion_content":"多谢分享 我行我素同学","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577518552,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121412,"user_name":"蒙开强","can_delete":false,"product_type":"c1","uid":1317706,"ip_address":"","ucode":"61B3183781B9F7","user_header":"https://static001.geekbang.org/account/avatar/00/14/1b/4a/f9df2d06.jpg","comment_is_top":false,"comment_ctime":1565137745,"is_pvip":false,"replies":[{"id":"47099","content":"在MySQL的InnoDB和如果使用的是MySQL的话，我们需要了解下MySQL的存储引擎都支持哪些索引结构，可以参考https:&#47;&#47;dev.mysql.com&#47;doc&#47;refman&#47;8.0&#47;en&#47;create-index.html）<br><br>针对MySQL 默认的存储引擎InnoDB，或者使用MyISAM存储引擎都会默认使用的是B+树来进行存储，无法使用Hash索引。InnoDB提供的自适应Hash是不需要手动指定的。如果是Memory&#47;Heap，或者是NDB存储引擎，是可以进行选择的（Hash还是B+树）。","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1566634173,"ip_address":"","comment_id":121412,"utype":1}],"discussion_count":2,"race_medal":0,"score":"40219843409","product_id":100029501,"comment_content":"老师，你好，hash索引与B+树索引是在建索引的时候手动指定么","like_count":10,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461780,"discussion_content":"在MySQL的InnoDB和如果使用的是MySQL的话，我们需要了解下MySQL的存储引擎都支持哪些索引结构，可以参考https://dev.mysql.com/doc/refman/8.0/en/create-index.html）\n\n针对MySQL 默认的存储引擎InnoDB，或者使用MyISAM存储引擎都会默认使用的是B+树来进行存储，无法使用Hash索引。InnoDB提供的自适应Hash是不需要手动指定的。如果是Memory/Heap，或者是NDB存储引擎，是可以进行选择的（Hash还是B+树）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566634173,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587453,"discussion_content":"mark，https://dev.mysql.com/doc/refman/8.0/en/create-index.html","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663064103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122708,"user_name":"渴望飞的哺乳类","can_delete":false,"product_type":"c1","uid":1193958,"ip_address":"","ucode":"D16372552A2415","user_header":"https://static001.geekbang.org/account/avatar/00/12/37/e6/71bcbc93.jpg","comment_is_top":false,"comment_ctime":1565494296,"is_pvip":true,"replies":[{"id":"63541","content":"对的，like 后面需要有内容（不能直接是通配符），比如 &#39;xx%&#39; 是OK的","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577517409,"ip_address":"","comment_id":122708,"utype":1}],"discussion_count":2,"race_medal":2,"score":"35925232664","product_id":100029501,"comment_content":"老师，B+ 树使用 LIKE 进行模糊查询的时候，like ‘xx%’ 才会使用到索引吧","like_count":9,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462367,"discussion_content":"对的，like 后面需要有内容（不能直接是通配符），比如 &amp;#39;xx%&amp;#39; 是OK的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577517409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1277094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/a6/93a0f6f8.jpg","nickname":"阿拉丁灯","note":"","ucode":"59664187E74917","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91356,"discussion_content":"我也有这个疑问","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576829872,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122061,"user_name":"wusiration","can_delete":false,"product_type":"c1","uid":1104438,"ip_address":"","ucode":"A9403377054F1E","user_header":"https://static001.geekbang.org/account/avatar/00/10/da/36/ac0ff6a7.jpg","comment_is_top":false,"comment_ctime":1565277524,"is_pvip":false,"replies":[{"id":"44840","content":"对的 所以对于一般需求来说，B+树在数据库应用的场景更多，Hash适用一些特殊的需求，比如文件校验，密码学等","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1565310848,"ip_address":"","comment_id":122061,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23040114004","product_id":100029501,"comment_content":"mysql查询中存在着很多范围查询、order by的场景，在这些场景下，B+树的性能好于Hash索引；关键字出现相同Hash码时，会出现hash冲突。","like_count":6,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462080,"discussion_content":"对的 所以对于一般需求来说，B+树在数据库应用的场景更多，Hash适用一些特殊的需求，比如文件校验，密码学等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565310848,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121543,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1565157089,"is_pvip":false,"replies":[{"id":"44847","content":"感谢提问，一个数组如果有n个元素，需要遍历完所有的元素才能找到某个元素，所以是O(n)，如果是O(1)就是不需要遍历，直接找到那个元素","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1565311612,"ip_address":"","comment_id":121543,"utype":1}],"discussion_count":7,"race_medal":0,"score":"23039993569","product_id":100029501,"comment_content":"老师你好，数组检索数据的算法复杂度为 O(n)。<br>不应该也是O(1)吗？","like_count":6,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461843,"discussion_content":"感谢提问，一个数组如果有n个元素，需要遍历完所有的元素才能找到某个元素，所以是O(n)，如果是O(1)就是不需要遍历，直接找到那个元素","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565311612,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1211987,"avatar":"https://static001.geekbang.org/account/avatar/00/12/7e/53/c29c2fc9.jpg","nickname":"sdjdd","note":"","ucode":"512F2338DFF793","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4151,"discussion_content":"你说的是随机访问的复杂度是 O(1) 吧","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1565170243,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1239546,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKWiaZb7a2JAcIVlXYuZ3iaPfSF6vBbg3yUps6LKpsZarftyXufMHYKJmMKzH3bIpVkDAVNXE9q0oOw/132","nickname":"Mr_scx","note":"","ucode":"28B5CE68A5A339","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":300541,"discussion_content":"数组按给定值查找的时间复杂度是 O（n），按下标随机访问的时间复杂度是 O（1）","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1598165917,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1000060,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/42/7c/8ef14715.jpg","nickname":"🄽🄸🅇🅄🅂","note":"","ucode":"853763C229A5AA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":4386,"discussion_content":"hash的话，是因为相同hash值，会放到同一个桶bucket中，在查询的时候，直接到通过hash值找到这个桶，如果桶中有多个再进行判等，所以效率才更高吗？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1565344773,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2962599,"avatar":"https://static001.geekbang.org/account/avatar/00/2d/34/a7/52c4ea60.jpg","nickname":"年少挽滑稽世无双","note":"","ucode":"793DCBDE25A07B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587459,"discussion_content":"王争老师的数据结构与算法之美中讲到：数组是适合查找操作，但是查找的时间复杂度并不为 O(1)。即便是排好序的数组，你用二分查找，时间复杂度也是 O(logn)。所以，正确的表述应该是，数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663065381,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"四川"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1919541,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/4a/35/66caeed9.jpg","nickname":"完美坚持","note":"","ucode":"AE0261D8DDEF64","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":377204,"discussion_content":"根据下标随机访问的话，确实复杂度是O(1)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1622546845,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1584098,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIR9QrAn9TZOrJMSYMyN96PAuAjETVrN5SPp3hMbfUAGIWtHceWPEoQtPdXeuBn7VB7dagtxynAIA/132","nickname":"ballgod","note":"","ucode":"C20E95E98EAC43","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":73163,"discussion_content":"个人理解这两个是不同的检索。你说的那个是已知index查找具体的数据值，即list[index]，而教程里是查找特定值的位置，即给定具体值找到它在那个地方，所以是list.index[value]。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575554508,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121508,"user_name":"许童童","can_delete":false,"product_type":"c1","uid":1003005,"ip_address":"","ucode":"4B799C0C6BC678","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4d/fd/0aa0e39f.jpg","comment_is_top":false,"comment_ctime":1565149511,"is_pvip":false,"replies":[{"id":"44848","content":"对的","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1565311627,"ip_address":"","comment_id":121508,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14450051399","product_id":100029501,"comment_content":"查找某个固定值时 Hash 索引比 B+ 树更快，为什么 MySQL 还要采用 B+ 树的存储索引呢？另外，当两个关键字的 Hash 值相同时会发生什么？<br>因为B+ 树的一些特性像范围查询，联合索引的最左侧原则，支持 ORDER BY 排序等Hash索引没有。<br>会发生Hash冲突，然后去按key顺序在桶中等值查找。","like_count":4,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461827,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565311627,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":189832,"user_name":"汪zZ","can_delete":false,"product_type":"c1","uid":1234757,"ip_address":"","ucode":"8B93062A683902","user_header":"https://static001.geekbang.org/account/avatar/00/12/d7/45/d1621188.jpg","comment_is_top":false,"comment_ctime":1584574311,"is_pvip":true,"discussion_count":1,"race_medal":1,"score":"10174508903","product_id":100029501,"comment_content":"感觉有点抽象。原理都知道。但是不会用","like_count":3,"discussions":[{"author":{"id":1071945,"avatar":"https://static001.geekbang.org/account/avatar/00/10/5b/49/90dbe5e5.jpg","nickname":"MOSAIC","note":"","ucode":"6217B689FFC36B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":288938,"discussion_content":"用起来很简单的 几条语句 对我来说 主要是理解 理解为什么要这么做 又哪几种方式做 有什么优缺点 这样才能在其他情况（非单指 SQL）中思考的时候 能够想到这些点 很多时候限制的不是具体实现，因为大多数都是现成方案 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593936522,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178775,"user_name":"David.cui","can_delete":false,"product_type":"c1","uid":1302228,"ip_address":"","ucode":"AB46F310403612","user_header":"https://static001.geekbang.org/account/avatar/00/13/de/d4/b83c4185.jpg","comment_is_top":false,"comment_ctime":1581821673,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10171756265","product_id":100029501,"comment_content":"Hash最大的使用场景是where=的情况","like_count":3},{"had_liked":false,"id":164471,"user_name":"王加武","can_delete":false,"product_type":"c1","uid":1665471,"ip_address":"","ucode":"DDCFE578C6C428","user_header":"https://static001.geekbang.org/account/avatar/00/19/69/bf/50a824a4.jpg","comment_is_top":false,"comment_ctime":1577002575,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10166937167","product_id":100029501,"comment_content":"1、第一个问题<br>因为我们在实际的应用中遇到的情况是多种多样，等值查询只是一种而已，而hash索引存在hash冲突，并且有很多的限制，所以需要B+树，在不同的情况下适合的来选择使用！<br><br>2、第二个问题<br>发生hash冲突，然后遍历桶中的行指针来比较，这是非常耗时的一个操作，数据量很小还看不出来，数据量一大，几百万几千万，那这个效率可不是一般的差！<br><br>不存在没有hash冲突的hash函数，所以在使用hash索引的时候一定要分析清楚！","like_count":2},{"had_liked":false,"id":142882,"user_name":"爱思考的仙人球","can_delete":false,"product_type":"c1","uid":1576177,"ip_address":"","ucode":"77E31190A5B5AF","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/ic8KF0sfxicsx4F25HZrtZwP2fQEibicfibFeYIQBibxnVlHIiaqkfictJuvLCKia0p7liaQvbTzCYWLibjJK6B8kc8e194ng/132","comment_is_top":false,"comment_ctime":1571574831,"is_pvip":false,"replies":[{"id":"62779","content":"采用bucket分桶的概念都是一样的","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577092181,"ip_address":"","comment_id":142882,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10161509423","product_id":100029501,"comment_content":"hash函数里的桶（bucket）和hive里的桶（bucket）原理是一样的吗？","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471309,"discussion_content":"采用bucket分桶的概念都是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577092181,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121972,"user_name":"ABC","can_delete":false,"product_type":"c1","uid":1054958,"ip_address":"","ucode":"7501AD9C0C4A70","user_header":"https://static001.geekbang.org/account/avatar/00/10/18/ee/a1ed60d1.jpg","comment_is_top":false,"comment_ctime":1565260707,"is_pvip":false,"replies":[{"id":"44843","content":"对 原理上是一样的","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1565311345,"ip_address":"","comment_id":121972,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10155195299","product_id":100029501,"comment_content":"感觉Hash索引和Java的HashMap的Hash实现有点像，不过Java用链地址法解决了Hash冲突的问题。","like_count":3,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462034,"discussion_content":"对 原理上是一样的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565311345,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2815900,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/f7/9c/69c5c5dc.jpg","nickname":"越锋利","note":"","ucode":"63E9E3F3C7D53D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411165,"discussion_content":"不是有点像，是一模一样……不过我记得冲突比较多的时候 java 的 hashmap 会用红黑树","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635859882,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235062,"user_name":"bigliu66","can_delete":false,"product_type":"c1","uid":1627486,"ip_address":"","ucode":"9B82277755ED11","user_header":"https://static001.geekbang.org/account/avatar/00/18/d5/5e/1e09cb8b.jpg","comment_is_top":false,"comment_ctime":1594881651,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5889848947","product_id":100029501,"comment_content":"而 B+ 树使用 LIKE 进行模糊查询的时候，LIKE 后面前模糊查询（比如 % 开头）的话就可以起到优化作用。这句话不太对吧，应该是 LIKE &#39;属性%&#39; 这种后模糊才会起到优化作用吧。","like_count":1},{"had_liked":false,"id":121909,"user_name":"Ashlar","can_delete":false,"product_type":"c1","uid":1586999,"ip_address":"","ucode":"394CF8E339D5BC","user_header":"","comment_is_top":false,"comment_ctime":1565247036,"is_pvip":false,"replies":[{"id":"44837","content":"可以看下关于MySQL高性能优化的书籍，如果是数据库初学者也可以先从SQL Server开始，毕竟微软的产品在操作界面上上手简单。书籍有《21天学通SQL Server》《SQL优化最佳实践》《MySQL技术内容：SQL编程》《Oracle从入门到精通》","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1565310328,"ip_address":"","comment_id":121909,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860214332","product_id":100029501,"comment_content":"能不能请老师分别推荐一下学习MySQL，Oracle，sql Server的一些书籍或者资料呢？","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462001,"discussion_content":"可以看下关于MySQL高性能优化的书籍，如果是数据库初学者也可以先从SQL Server开始，毕竟微软的产品在操作界面上上手简单。书籍有《21天学通SQL Server》《SQL优化最佳实践》《MySQL技术内容：SQL编程》《Oracle从入门到精通》","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565310328,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121908,"user_name":"一语中的","can_delete":false,"product_type":"c1","uid":1320112,"ip_address":"","ucode":"E1A0EFCEAD83B4","user_header":"https://static001.geekbang.org/account/avatar/00/14/24/b0/a6e0b03a.jpg","comment_is_top":false,"comment_ctime":1565247026,"is_pvip":false,"replies":[{"id":"63563","content":"感谢分享","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1577518309,"ip_address":"","comment_id":121908,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5860214322","product_id":100029501,"comment_content":"来自信息安全专业，看到这一节hash索引原理中提到hash算法，hash是不可逆的，有种异常熟悉的感觉，嗯，那些年学的安全算法们AES,DES,IDEA,Hash,HMAC...","like_count":2,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462000,"discussion_content":"感谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1577518309,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121701,"user_name":"Geek_Wison","can_delete":false,"product_type":"c1","uid":1504371,"ip_address":"","ucode":"2CD880F07FDD57","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er4HlmmWfWicNmo3x3HKaOwz3ibcicDFlV5xILbILKGFCXbnaLf2fZRARfBdVBC5NhIPmXxaxA0T9Jhg/132","comment_is_top":false,"comment_ctime":1565186973,"is_pvip":false,"replies":[{"id":"44845","content":"前模糊查询就是类似 %a 这种，因为在字符串匹配的前面就是模糊查询了","user_name":"作者回复","user_name_real":"cy","uid":"1306094","ctime":1565311431,"ip_address":"","comment_id":121701,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5860154269","product_id":100029501,"comment_content":"前模糊查询具体指啥，能举一个具体的例子吗？比如是指: &#39;a%&#39; 还是指 &#39;%a&#39; ？","like_count":1,"discussions":[{"author":{"id":1306094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/ed/ee/c4779b67.jpg","nickname":"cy","note":"","ucode":"50D653399A31F6","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461910,"discussion_content":"前模糊查询就是类似 %a 这种，因为在字符串匹配的前面就是模糊查询了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565311431,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1277094,"avatar":"https://static001.geekbang.org/account/avatar/00/13/7c/a6/93a0f6f8.jpg","nickname":"阿拉丁灯","note":"","ucode":"59664187E74917","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":91362,"discussion_content":"老师，为啥是%a起到优化作用呢，根据范围查询的话应该是a%才能优化吧？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576830200,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":346086,"user_name":"Geek_dc1862","can_delete":false,"product_type":"c1","uid":1888016,"ip_address":"","ucode":"DC3B41D6BC89D4","user_header":"","comment_is_top":false,"comment_ctime":1652834281,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1652834281","product_id":100029501,"comment_content":"能说一下哈希搜索的过程吗？看的不是很明白","like_count":0},{"had_liked":false,"id":291628,"user_name":"李博","can_delete":false,"product_type":"c1","uid":2584517,"ip_address":"","ucode":"6C39BCDEEB9309","user_header":"https://static001.geekbang.org/account/avatar/00/27/6f/c5/5cbaad93.jpg","comment_is_top":false,"comment_ctime":1620393270,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1620393270","product_id":100029501,"comment_content":"老师，hash索引中的❌和点分别是什么意思，为什么后面有的点指向的内容是叉，有的叉指向内容是点","like_count":0,"discussions":[{"author":{"id":2815900,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/f7/9c/69c5c5dc.jpg","nickname":"越锋利","note":"","ucode":"63E9E3F3C7D53D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":411166,"discussion_content":"X 应该是空的意思","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635859915,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":291378,"user_name":"Joecoo丨","can_delete":false,"product_type":"c1","uid":1485645,"ip_address":"","ucode":"A5CDF7A335D224","user_header":"https://static001.geekbang.org/account/avatar/00/16/ab/4d/441e5cc3.jpg","comment_is_top":false,"comment_ctime":1620259362,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620259362","product_id":100029501,"comment_content":"b+树索引和hash索引的区别第三点有错。B+ 树使用 LIKE 进行模糊查询的时候，like ‘xx%’ 才会使用到索引，like &#39;%xx&#39;是不走索引的","like_count":0},{"had_liked":false,"id":274085,"user_name":"微信还是支付宝","can_delete":false,"product_type":"c1","uid":1731048,"ip_address":"","ucode":"E9C27DEFB6908C","user_header":"https://static001.geekbang.org/account/avatar/00/1a/69/e8/bba34199.jpg","comment_is_top":false,"comment_ctime":1610839108,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1610839108","product_id":100029501,"comment_content":"受益匪浅啊！","like_count":0},{"had_liked":false,"id":235083,"user_name":"bigliu66","can_delete":false,"product_type":"c1","uid":1627486,"ip_address":"","ucode":"9B82277755ED11","user_header":"https://static001.geekbang.org/account/avatar/00/18/d5/5e/1e09cb8b.jpg","comment_is_top":false,"comment_ctime":1594887407,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1594887407","product_id":100029501,"comment_content":"老师，能讲下联合索引在B+数中是如何存储的吗？一直不是很理解为什么mysql索引要遵从最左匹配原则。","like_count":0},{"had_liked":false,"id":170735,"user_name":"稻草人","can_delete":false,"product_type":"c1","uid":1332946,"ip_address":"","ucode":"B50BEC01C4D65B","user_header":"https://static001.geekbang.org/account/avatar/00/14/56/d2/65db8cc6.jpg","comment_is_top":false,"comment_ctime":1578696500,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1578696500","product_id":100029501,"comment_content":"老师可以再解释下输入空间大于桶空间时会hash冲突吗？从图中没看出来是怎么产生冲突的","like_count":0,"discussions":[{"author":{"id":1246178,"avatar":"https://static001.geekbang.org/account/avatar/00/13/03/e2/5768d26e.jpg","nickname":"inrtyx","note":"","ucode":"81CD18FF34ABAB","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":161279,"discussion_content":"百度下hash冲突","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580883536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":164970,"user_name":"旅途","can_delete":false,"product_type":"c1","uid":1212902,"ip_address":"","ucode":"5022477E8E9441","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","comment_is_top":false,"comment_ctime":1577117950,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1577117950","product_id":100029501,"comment_content":"老师 问一下 hash 联合索引的计算是多个 hash键合并后进行计算hash值 能起到 避免重复的效果吗 例如 布隆过滤器 一个输入使用多个算法来避免hash值的重复 ","like_count":0},{"had_liked":false,"id":153805,"user_name":"William Ning","can_delete":false,"product_type":"c1","uid":1592279,"ip_address":"","ucode":"4DB8D05E69E5F3","user_header":"https://static001.geekbang.org/account/avatar/00/18/4b/d7/f46c6dfd.jpg","comment_is_top":false,"comment_ctime":1574310185,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1574310185","product_id":100029501,"comment_content":"1. [Hash 索引不支持 ORDER BY 排序，因为 Hash 索引指向的数据是无序的，因此无法起到排序优化的作用，而 B+ 树索引数据是有序的，可以起到对该字段 ORDER BY 排序优化的作用。同理，我们也无法用 Hash 索引进行模糊查询，而 B+ 树使用 LIKE 进行模糊查询的时候，LIKE 后面前模糊查询（比如 % 开头）的话就可以起到优化作用。]  没想明白 ?<br><br>2.[hash索引的流程: 键值=&gt;桶=&gt;数据行] 没理解? <br><br>3.[自适应Hash采用Hash函数映射到一个哈希表中，所以对于字典类型的数据查找非常方便<br>哈希表是数组+链表的形式。通过Hash函数可以计算索引键值所对应的bucket（桶）的位置，如果产生Hash冲突，如果产生哈希冲突，就需要遍历链表来解决。]<br><br>老师能不能结合图之类的解释下 ? 谢谢.","like_count":0},{"had_liked":false,"id":150427,"user_name":"_你说了不算","can_delete":false,"product_type":"c1","uid":1185159,"ip_address":"","ucode":"212F890565FE5C","user_header":"https://static001.geekbang.org/account/avatar/00/12/15/87/d22d8c3e.jpg","comment_is_top":false,"comment_ctime":1573533419,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1573533419","product_id":100029501,"comment_content":"老师，b+树为什么可以使用最左前缀匹配原则可以解释一下吗？<br>","like_count":0,"discussions":[{"author":{"id":1980201,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/37/29/b3af57a7.jpg","nickname":"凯文小猪","note":"","ucode":"36D8AD0229547F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":370720,"discussion_content":"因为B树这一类搜索树都是有序的 所以查找时候自然按照先后顺序 一个个找","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619516593,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":132782,"user_name":"峻铭","can_delete":false,"product_type":"c1","uid":1106202,"ip_address":"","ucode":"63AB23BADACA88","user_header":"https://static001.geekbang.org/account/avatar/00/10/e1/1a/20977779.jpg","comment_is_top":false,"comment_ctime":1568218747,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1568218747","product_id":100029501,"comment_content":"用java代码测试下数组和map的效率呢，将元素增加到1000000，会有惊喜！！！<br>","like_count":0},{"had_liked":false,"id":123765,"user_name":"Geek_1c165d","can_delete":false,"product_type":"c1","uid":1584176,"ip_address":"","ucode":"3E1B70DCF3DF13","user_header":"https://wx.qlogo.cn/mmopen/vi_32/aianFlNnvpUaPUbYG9EjVbibgOgOCJYqgiapCbsbIhWHJG8BBm4fzo1ALNI8vqsL4mrGB9vWPWyUCct5yLp0neQDg/132","comment_is_top":false,"comment_ctime":1565753509,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1565753509","product_id":100029501,"comment_content":"老师有两个问题：<br>1、是不是创建的索引，不管是Hash索引还是B树索引都会存储在硬盘上的么？<br>2、B树索引的内容以B树的数据结构进行存储，那Hash索引是以什么数据结构进行存储的？","like_count":0,"discussions":[{"author":{"id":1212902,"avatar":"https://static001.geekbang.org/account/avatar/00/12/81/e6/6cafed37.jpg","nickname":"旅途","note":"","ucode":"5022477E8E9441","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":98053,"discussion_content":"1.索引肯定是存储在硬盘上的,不可能每次启动dbrms都重新生成索引,但是像老师讲的 自适应hash索引 是存在buffer里的\n2.数组","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1577118546,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122999,"user_name":"马哲富","can_delete":false,"product_type":"c1","uid":1107917,"ip_address":"","ucode":"D6BDDFE3CC07ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/cd/08088f14.jpg","comment_is_top":false,"comment_ctime":1565585163,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1565585163","product_id":100029501,"comment_content":"老师您好，是不同的索引结构对应不同类型的索引（比如聚集索引、非聚集索引等）吗？另外知道这些底层的索引结构对于一个普通的开发人员的价值点（或者说判断依据）在哪儿呢？","like_count":0}]}