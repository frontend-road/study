{"id":5610,"title":"18 | 如何将Bandit算法与协同过滤结合使用","content":"<p>推荐系统中最经典的算法是什么？对，是协同过滤，你已经学会抢答了。</p>\n<p>是的，协同过滤是推荐系统发展史上浓墨重彩的一笔，其背后的思想简单深刻，在万物互联的今天，协同过滤的威力更加强大。与其说协同过滤是一门技术，不如说是一种方法论，不是机器在为你推荐，而是“集体智慧”在为你推荐。</p>\n<p>协同过滤生动地诠释了什么是“物以类聚，人以群分”，你的圈子决定了你能见到的物品，这一点在前面的专栏中已经详细讲过了。但是这背后隐藏了一个重要的问题：是不是会存在信息茧房的问题？</p>\n<h2>信息茧房</h2>\n<p>其实作为一名对推荐系统略懂一二的普通海淀群众，我个人就会时常担心，是不是还能看到新的东西，是不是有惊喜。时不时乱点一通，是不是叉掉所有的推荐，让物品的推荐系统崩溃一下，这一切就是为了避免进入信息茧房，在眼前的圈子里苟且。</p>\n<p>那么作为推荐系统的开发者，是不是应该做点什么呢？是的，在技术上，Bandit算法就是一个权衡探索和利用的好方法。如果把它结合传统的协同过滤来做推荐，那么在一定程度上就可以延缓信息茧房的到来，偶遇诗和远方。</p>\n<p>我已经和你聊了两篇关于Bandit算法的内容，我介绍过普通的Bandit算法，也介绍过加入特征信息的LinUCB算法，今天，我要介绍的是一个新方法，如何结合协同过滤的群体智慧，与Bandit的走一步看一步一起，让两种思想碰撞，也许可以让你的推荐系统与众不同。</p>\n<p>这就是2016年有人提出的COFIBA算法，下面我就开始与你聊聊这种算法。</p>\n<h2>COFIBA算法</h2>\n<h3>1 思想</h3>\n<p>很多的推荐场景中都有两个规律。</p>\n<ol>\n<li>\n<p>相似的用户对同一个物品的反馈可能是一样的。也就是对一个聚类用户群体推荐同一个item，他们可能都会喜欢，也可能都不喜欢，同样的，同一个用户会对相似的物品反馈也会相同。这实际上就是基于用户的协同过滤基本思想。</p>\n</li>\n<li>\n<p>在使用推荐系统过程中，用户的决策是动态进行的，尤其是新用户。这就导致无法提前为用户准备好推荐候选，只能“走一步看一步”，是一个动态的推荐过程。这是Bandit的算法基本思想。</p>\n</li>\n</ol>\n<p>每一个推荐候选物品，都可以根据用户对其偏好的不同，将用户分成不同的群体。</p>\n<p>然后下一次，由用户所在的群体集体帮他预估可能的收益及置信区间，这个集体就有了协同的效果，然后再实时观察真实反馈，回来更新用户的个人参数用于下次调整收益和置信区间，这就有了Bandit的思想在里面。</p>\n<p>举个例子，如果你的父母给你安排了很多相亲对象，要不要见面去相一下？那需要提前看看每一个相亲对象的资料，每次大家都分成好几派，有说好的，有说再看看的，也有说不行的。</p>\n<p>你自己也会是其中一派的一员，每次都是你所属的那一派给你集体打分，因为他们是和你“三观一致的人”“诚不欺我”；这样从一堆资料中挑出分数最高的那个人，你出去见TA，回来后把实际感觉说给大家听，同时自己心里的标准也有些调整，重新再给剩下的其它对象打分，打完分再去见，</p>\n<p>如果要推荐的候选物品较多，需要对物品聚类，就不用按照每一个物品对用户聚类，而是按照每一个物品所属的类簇对用户聚类，如此一来，物品的类簇数目相对于物品数就要大大减少。</p>\n<h1>2.细节</h1>\n<p>基于上述的思想，COFIBA算法要点摘要如下。</p>\n<ol>\n<li>在时刻t，有一个用户来访问推荐系统，推荐系统需要从已有的候选池子中挑一个最佳的物品推荐给他，然后观察他的反馈，用观察到的反馈来更新挑选策略。</li>\n<li>这里的每个物品都有一个特征向量，所以这里的Bandit算法是context相关的，只不过这里虽然是给每个用户维护一套参数，但实际上是由用户所在的聚类类簇一起决定结果的。</li>\n<li>这里依然是用岭回归去拟合用户的权重向量，用于预测用户对每个物品的可能反馈（payoff），这一点和我们上一次介绍的LinUCB算法是一样的。</li>\n</ol>\n<p>对比上一次介绍的LinUCB算法，COFIBA的不同有两个：</p>\n<ol>\n<li>基于用户聚类挑选最佳的物品，即相似用户集体动态决策；</li>\n<li>基于用户的反馈情况调整用户和物品的聚类结果。</li>\n</ol>\n<p>整体算法过程如下。</p>\n<p>在针对某个用户i，在每一次推荐时做以下事情。</p>\n<ol>\n<li>首先计算用户i的Bandit参数W，做法和LinUCB算法相同，但是这个参数并不直接参与到选择决策中，注意这和LinUCB不同，只是用来更新用户聚类。</li>\n<li>遍历候选物品，每一个物品已经表示成一个向量x了。</li>\n<li>每一个物品都对应一个物品聚类类簇，每一个物品类簇对应一个全量用户聚类结果，所以遍历到每一个物品时，就可以判断出当前用户在当前物品面前，自己属于哪个用户聚类类簇，然后把对应类簇中每个用户的M矩阵(对应LinUCB里面的A矩阵)，b向量（表示收益向量，对应LinUCB里面的b向量）加起来，从而针对这个类簇求解一个岭回归参数（类似LinUCB里面单独针对每个用户所做），同时计算其收益预测值和置信区间上边界。</li>\n<li>每个待推荐的物品都得到一个预测值及置信区间上界，挑出那个上边界最大的物品作为推荐结果。</li>\n<li>观察用户的真实反馈，然后更新用户自己的M矩阵和b向量，只更新每个用户，对应类簇里其他的不更新。</li>\n</ol>\n<p>以上是COFIBA算法的一次决策过程。在收到用户真实反馈之后，还有两个计算过程：</p>\n<ol>\n<li>更新user聚类；</li>\n<li>更新item聚类。</li>\n</ol>\n<!-- [[[read_end]]] -->\n<p>如何更新user和item的聚类呢？我在这里给出了一个示意图。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/12/ed/12d5ab9b1c0ce6455ae475d0d8d923ed.jpeg?wh=1040*950\" alt=\"\" /></p>\n<p>解释一下这个图。</p>\n<p>（a） 示意图中有6个用户，8个物品，初始化时，用户和物品的类簇个数都是1。</p>\n<p>（b）在某一轮推荐时，推荐系统面对的用户是4。推荐过程就是遍历1～8每个物品，然后在面对每个物品时，用户4在哪个类簇中，把对应类簇中的用户聚合起来为这个物品集体预测收益值置信上边界。这里假设最终物品5胜出，被推荐出去了。</p>\n<p>在时刻t，物品一共有3个聚类类簇，需要更新的用户聚类是物品5对应的用户4所在类簇。</p>\n<p>更新方式：看看该类簇里面除了用户4之外的用户，对物品5的预期收益是不是和用户4相近，如果是，则保持原来的连接边，否则删除原来的连接边。删除边之后相当于就重新构建了聚类结果。</p>\n<p>这里假设新的聚类结果由原来用户4所在的类簇分裂成了两个类簇：4和5成一类，6单独自成一类。</p>\n<p>（c）更新完用户类簇后，被推荐出去的物品5，它对应的类簇也要更新。</p>\n<p>更新方式是：对于每一个和物品5还存在连接边的物品，假如叫做物品j，都有一个对这个物品j有相近收益预估值的近邻用户集合，然后看看近邻用户集合是不是和刚刚更新后的用户4所在的类簇相同。</p>\n<p>是的话，保留物品5和物品j之间的连接边，否则删除。这里示意图中是物品3和物品5之间的连接边被删除。</p>\n<p>物品3变成了孤家寡人一个，不再和任何物品有链接，独立后就给他初始化了一个全新的用户聚类结果：所有用户是一个类簇。</p>\n<p>简单来说就是这样：</p>\n<ol>\n<li>用协同过滤来少选可以参与决策的用户代表，用LinUCB算法来实际执行选择；</li>\n<li>根据用户的反馈，调整基于用户和基于物品的聚类结果，即对物品和用户的群体代表做换届选举；</li>\n<li>基于物品的聚类如果变化，又进一步改变了用户的聚类结果；</li>\n<li>不断根据用户实时动态的反馈来调整用户决策参数，从而重新划分聚类结果矩阵。</li>\n</ol>\n<p>COFIBA算法也很容易实现，GitHub上就有。原始论文也从理论和实验两方面都证明了它的有效性。</p>\n<h2>再谈EE问题</h2>\n<p>整个专栏的Bandit算法系列，主要是解决推荐系统中的冷启动和EE问题。探索和利用这一对矛盾一直客观存在，而Bandit算法是公认的一种比较好的解决EE问题的方案。</p>\n<p>除了Bandit算法之外，还有一些其他的探索兴趣的办法，比如在推荐时，随机地去掉一些用户历史行为（特征）。</p>\n<p>解决兴趣探索，势必要冒险，势必要面对用户的未知，而这显然就是可能会伤害当前用户价值的：明知道用户肯定喜欢A，你还偏偏以某个小概率给推荐非A。</p>\n<p>实际上，很少有公司会采用这些理性的办法做探索，反而更愿意用一些盲目主观的方式。究其原因，可能是因为：</p>\n<ol>\n<li>互联网产品生命周期短，而探索又是为了提升长期利益的，所以没有动力做；</li>\n<li>用户使用互联网产品时间越来越碎片化，探索的时间长，难以体现出探索的价值；</li>\n<li>同质化互联网产品多，用户选择多，稍有不慎，用户用脚投票，分分钟弃你于不顾；</li>\n<li>已经成规模的平台，红利杠杠的，其实是没有动力做探索的。</li>\n</ol>\n<p>基于这些，我们如果想在自己的推荐系统中引入探索机制，需要注意以下几点：</p>\n<ol>\n<li>用于探索兴趣的物品，要保证其本身质量，纵使用户不感兴趣，也不至于引起其反感，损失平台品牌价值；</li>\n<li>探索兴趣的地方需要产品精心设计，让用户有耐心陪你玩儿；</li>\n<li>深度思考，这样才不会做出脑残的产品，产品不会早早夭折，才有可能让探索机制有用武之地。</li>\n</ol>\n<h2>总结</h2>\n<p>今天，我介绍完成了MAB问题和推荐系统之间的千丝万缕联系。Bandit算法是一种不太常用在推荐系统的算法，究其原因，是它能同时处理的物品数量不能太多。</p>\n<p>但是，在冷启动和处理EE问题时，Bandit算法简单好用，值得一试。当然，这个专栏介绍的所有推荐算法都不是单打独斗最好，而是与其他算法结合使用才能相映生辉，Bandit算法亦是如此。</p>\n<p>今天介绍的COFIOBA算法，原理很简单，就是把协同过滤思想引入到了Bandit算法中，不再是用户独立决策，而是用户所在的群体共同决策推荐结果。</p>\n<p>这样比较问题，也可以加速收敛。不知道对你有没有启发呢？欢迎留言一起讨论。感谢你的收听，我们下次再见。</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/11/4c/112709b33b1bfe5539eb3f1aa124f54c.jpg?wh=3560*2008\" alt=\"\" /></p>\n","neighbors":{"left":{"article_title":"17 | 结合上下文信息的Bandit算法","id":5607},"right":{"article_title":"19 | 深度学习在推荐系统中的应用有哪些?","id":5843}},"comments":[{"had_liked":false,"id":5606,"user_name":"zgl","can_delete":false,"product_type":"c1","uid":1059430,"ip_address":"","ucode":"58DBD016E4A379","user_header":"https://static001.geekbang.org/account/avatar/00/10/2a/66/96df31f9.jpg","comment_is_top":false,"comment_ctime":1523608957,"is_pvip":false,"replies":[{"id":"1602","content":"过几天就有了。","user_name":"作者回复","user_name_real":"刑无刀","uid":"1005376","ctime":1524009830,"ip_address":"","comment_id":5606,"utype":1}],"discussion_count":1,"race_medal":0,"score":"18703478141","product_id":100005101,"comment_content":"请问下，除了推荐算法介绍，有没有实际推荐架构的讲解和分析？","like_count":4,"discussions":[{"author":{"id":1005376,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/57/40/777bfe30.jpg","nickname":"刑无刀","note":"","ucode":"496201BF63D49D","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":416785,"discussion_content":"过几天就有了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1524009830,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":5611,"user_name":"林彦","can_delete":false,"product_type":"c1","uid":1032615,"ip_address":"","ucode":"5094CC6ED7B40C","user_header":"https://static001.geekbang.org/account/avatar/00/0f/c1/a7/5e66d331.jpg","comment_is_top":false,"comment_ctime":1523619027,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14408520915","product_id":100005101,"comment_content":"1. 看了下周三的LinUCB文章。这么理解的，COFIBA算法中的M矩阵相当于LinUCB算法中的D矩阵，2个维度都等于内容空间的特征维度数（之前文章中的选择次数m被特征维度数d说取代）。COFIBA算法中的W矩阵相当于LinUCB算法中的西塔θ^。COFIBA算法中的b向量相当于LinUCB算法中的C向量。<br><br>2. 通过一类物品的预测来提高探索的效率和稳定度(尤其是数据量大又缺失反馈时)应该是一个实际应用中常见的解决方式。COFIOBA 算法结合了2个比较不错的算法，有更好的理论基础和准确度。","like_count":3},{"had_liked":false,"id":14413,"user_name":"虎虎","can_delete":false,"product_type":"c1","uid":1050797,"ip_address":"","ucode":"4BC11CE93BDF83","user_header":"https://static001.geekbang.org/account/avatar/00/10/08/ad/75ca60a4.jpg","comment_is_top":false,"comment_ctime":1530411712,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10120346304","product_id":100005101,"comment_content":"有个地方没搞懂，推荐的时候做物品遍历，那么物品聚类的作用是什么呢？","like_count":2,"discussions":[{"author":{"id":1258402,"avatar":"https://static001.geekbang.org/account/avatar/00/13/33/a2/6c0ffc15.jpg","nickname":"皮皮侠","note":"","ucode":"04205990C1DE1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":256335,"discussion_content":"聚类为了降低维度，为了计算简单","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588472539,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1343949,"avatar":"","nickname":"赖春苹","note":"","ucode":"1B637D46549A21","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3615,"discussion_content":"个人理解，不对商品做聚类的话，那每一个商品都要对应一个全量user的聚类划分吧……","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564641513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":285435,"user_name":"全","can_delete":false,"product_type":"c1","uid":1132314,"ip_address":"","ucode":"C478EAFACC4E3B","user_header":"https://static001.geekbang.org/account/avatar/00/11/47/1a/645ab65b.jpg","comment_is_top":false,"comment_ctime":1616813639,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616813639","product_id":100005101,"comment_content":"【【推荐系统】笔记 — Bandit 算法】https:&#47;&#47;mbd.baidu.com&#47;ma&#47;s&#47;WVXrCQvl 和这个很像","like_count":1},{"had_liked":false,"id":125417,"user_name":"zhuangzhou","can_delete":false,"product_type":"c1","uid":1389305,"ip_address":"","ucode":"F38D8F5BA8E348","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/hzgRzL39o1Zz0eWHZ4Udun9eibvxPq0jVbHDrJxWeK5U31xsXhhSZbedHfiaw2xBQCaYKt4DVLXic6YWH7z4XUvFg/132","comment_is_top":false,"comment_ctime":1566181998,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1566181998","product_id":100005101,"comment_content":"本节cofiba步骤处讲的是:维护的是用户聚类参数，上节linUCB维护的是每个物品的参数，这么理解对吗老师？","like_count":0},{"had_liked":false,"id":91502,"user_name":"shangqiu86","can_delete":false,"product_type":"c1","uid":1514817,"ip_address":"","ucode":"07D376EEC21BE4","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/qRjoqWIGC6tpmKZBGTxjQKC9cbz9XLhw2nF1c74R4icFOYOdVO4iaeQEQDqEvmbicxn6HEc4SU8kpkwVaO5nABMug/132","comment_is_top":false,"comment_ctime":1557044176,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1557044176","product_id":100005101,"comment_content":"感觉confiba算法实质上就是把linUCB算法中的当个用户，单个物品全部变成了用户簇，物品簇；信息茧房的问题，感觉真的是理论派的论文中比较多的提到，实际中好像并没有过多的去关注这个问题。不过我觉得要想不断的发展壮大，是需要对EE问题认真对待的。","like_count":0,"discussions":[{"author":{"id":1057390,"avatar":"","nickname":"withwsf","note":"","ucode":"DC7A1F79497259","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":292648,"discussion_content":"有政治学论文研究过这个问题，结论似乎是没有我们想象的那么严重。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595295444,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}