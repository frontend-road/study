{"id":176852,"title":"63 | 接口设计的准则","content":"<p>你好，我是七牛云许式伟。</p><p>上一讲 “<a href=\"https://time.geekbang.org/column/article/175236\">62 | 重新认识开闭原则 (OCP)</a>” 我们介绍了开闭原则。这一讲的内容非常非常重要，可以说是整个架构课的灵魂。总结来说，开闭原则包含以下两层含义：</p><p>第一，模块的业务要稳定。模块的业务遵循 “只读” 设计，如果需要变化不如把它归档，放弃掉。这种模块业务只读的思想，是架构治理的基础哲学。我平常和小伙伴们探讨模块边界的时候，经常会说这样一句话：</p><blockquote>\n<p>每一个模块都应该是可完成的。</p>\n</blockquote><p>这实际上是开闭原则的业务范畴 “只读” 的架构治理思想的另一种表述方式。</p><p>第二，模块业务的变化点，简单一点的，通过回调函数或者接口开放出去，交给其他的业务模块。复杂一点的，通过引入插件机制把系统分解为 “最小化的核心系统+多个彼此正交的周边系统”。事实上回调函数或者接口本质上就是一种事件监听机制，所以它是插件机制的特例。</p><p>今天，我们想聊聊怎么做接口设计。</p><p>不过在探讨这个问题前，我想和大家探讨的第一个问题是：什么是接口？</p><p>你可能会觉得这个问题挺愚蠢的。毕竟这几乎是我们嘴巴里天天会提及的术语，会不知道？但让我们用科学家的严谨作风来看待这个问题。接口在不同的语义环境下，主要有两个不同含义。</p><p>一种是模块的使用界面，也就是规格，比如公开的类或函数的原型。我们前面在这个架构课中一直强调，模块的接口应该自然体现业务需求。这里的接口，指的就是模块的使用界面。</p><!-- [[[read_end]]] --><p>另一种是模块对依赖环境的抽象。这种情况下，接口是模块与模块之间的契约。在架构设计中我们经常也会听到 “契约式设计（Design by Contract）” 这样的说法，它鼓励模块与模块的交互基于接口作为契约，而不是依赖于具体实现。</p><p>对于这两类的接口语义，我们分别进行讨论。</p><h2>模块的使用界面</h2><p>对于模块的使用界面，最重要的是 KISS 原则，让人一眼就明白这个模块在做什么样的业务。</p><p>KISS 的全称是 Keep it Simple, Stupid，直译是简单化与傻瓜化。用土话来说，就是要 “让傻子也能够看得懂”，追求简单自然，符合惯例。</p><p>这样说比较抽象，我们拿七牛开源的 mockhttp 项目作为例子进行说明。</p><p>这个项目早期的项目地址为：</p><ul>\n<li>代码主页：<a href=\"https://github.com/qiniu/mockhttp.v1\">https://github.com/qiniu/mockhttp.v1</a></li>\n<li>文档主页：<a href=\"https://godoc.org/github.com/qiniu/mockhttp.v1\">https://godoc.org/github.com/qiniu/mockhttp.v1</a></li>\n</ul><p>最新的项目地址变更为：</p><ul>\n<li>代码主页：<a href=\"https://github.com/qiniu/x/tree/master/mockhttp\">https://github.com/qiniu/x/tree/master/mockhttp</a></li>\n<li>文档主页：<a href=\"https://godoc.org/github.com/qiniu/x/mockhttp\">https://godoc.org/github.com/qiniu/x/mockhttp</a></li>\n</ul><p>mockhttp 是做什么的呢？它用于启动 HTTP 服务作为测试用途。</p><p>当然 Go 的标准库 <a href=\"https://godoc.org/net/http/httptest\">net/http/httptest </a>已经有自己的 HTTP 服务启动方法，如下：</p><pre><code>package httptest\n\ntype Server struct {\n  URL string\n  ...\n}\n\nfunc NewServer(service http.Handler) (ts *Server)\nfunc (ts *Server) Close()\n</code></pre><p>httptest.NewServer 分配一个空闲可用的 TCP 端口，并将它与传入的 HTTP 服务器关联起来。最后我们得到的 ts.URL 就是服务器的访问地址。使用样例如下：</p><pre><code>import &quot;net/http&quot;\nimport &quot;net/http/httptest&quot;\n\nfunc TestXXX(t *testing.T) {\n  service := ... // HTTP 业务服务器\n  ts := httphtest.NewServer(service)\n  defer ts.Close()\n\n  resp, err := http.Get(ts.URL + &quot;/foo/bar&quot;)\n  ...\n}\n</code></pre><p>mockhttp 有所不同，它并不真的启动 HTTP 服务，没有端口占用。这里我们不谈具体的原理，我们看接口。mockhttp.v1 版本的使用界面如下：</p><pre><code>package mockhttp\n\nvar Client rpc.Client\n\nfunc Bind(host string, service interface{})\n</code></pre><p>这里比较古怪的是 service，它并不是 http.Handler 类型。它背后做了一件事情，就是帮 service 这个 HTTP 服务器自动实现请求的路由分派能力。这有一定的好处，使用上比较便捷：</p><pre><code>import &quot;github.com/qiniu/mockhttp.v1&quot;\n\nfunc TestXXX(t *testing.T) {\n  service := ... // HTTP 业务服务器\n  mockhttp.Bind(&quot;example.com&quot;, service)\n  resp, err := mockhttp.Client.Get(&quot;http://example.com/foo/bar&quot;)\n  ...\n}\n</code></pre><p>但是它有两个问题。</p><p>一个问题是关于模块边界上的。严谨来说 mockhttp.v1 并不符合 “单一职责原则（SRP）”。它干了两个业务：</p><ul>\n<li>启动 HTTP 测试服务；</li>\n<li>实现 HTTP 服务器请求的路由分派。</li>\n</ul><p>另一个是关于接口的 KISS 原则。mockhttp.Bind 虽然听起来不错，也很简单，但实际上并不符合 Go 语言的惯例语义。另外就是 mockhttp.Client 变量。按 Go 语义的惯例它可能叫 DefaultClient 会更好一些，另外它的类型是 rpc.Client，而不是 http.Client，这样方便是方便了，但却产生了多余的依赖。</p><p>mockhttp.v1 这种业务边界和接口的随意性，一定程度上是因为它是测试用途，所以有点怎么简单怎么来的意思。但是后来的发展表明，所有的偷懒总会还回来的。于是就有了 mockhttp.v2 版本。这个版本在我们做小型的 package 合并时，把它放到了https://github.com/qiniu/x 这个package 中。接口如下：</p><pre><code>package mockhttp\n\nvar DefaultTransport *Transport\nvar DefaultClient *http.Client\n\nfunc ListenAndServe(host string, service http.Handler)\n</code></pre><p>这里暴露的方法和变量，一方面 Go 程序员一看即明其义，另一方面语义上和 Go 标准库既有的HTTP package 可自然融合。它的使用方式如下：</p><pre><code>import &quot;github.com/qiniu/x/mockhttp&quot;\n\nfunc TestXXX(t *testing.T) {\n  service := ... // HTTP 业务服务器\n  mockhttp.ListenAndServe(&quot;example.com&quot;, service)\n  resp, err := mockhttp.DefaultClient.Get(&quot;http://example.com/foo/bar&quot;)\n  ...\n}\n</code></pre><p>从上面的例子可以看出，我们说接口要 KISS，要简单自然，这里很重要的一点是符合语言和社区的惯例。如果某类业务在语言中已经有约定俗成的接口，我们尽可能沿用相同的接口语义。</p><h2>模块的环境依赖</h2><p>接口的另一种含义是模块对依赖环境的抽象，也就是模块与模块之间的契约。我们大部分情况下提到的接口，指的是这一点。</p><p>模块的环境依赖，也分两种，一种是使用界面依赖，一种是实现依赖。所谓使用界面依赖是指用户在使用该模块的使用界面时自然涉及的。所谓实现依赖则是指模块当前实现方案中涉及到的组件，它带来的依赖条件。如果我换一种实现方案，这类依赖可能就不再存在，或者变成另外的依赖。</p><p>在环境依赖上，我们遵循的是 “最小依赖原则”，或者叫 “最少知识原则（Least Knowledge Principle，LKP）”，去尽可能发现模块中多余的依赖。</p><p>具体到细节，使用界面依赖与实现依赖到处置方式往往还是有所不同。</p><p>从使用界面依赖来说，我们接口定义更多考虑的往往是对参数的泛化与抽象，以便让我们可以适应更广泛的场景。</p><p>比如，我们前面谈到 IO 系统的时候，把存盘与读盘的接口从 *.os.File 换成 io.Reader、io.Writer，以获得更强的通用性，比如对剪贴板的支持。</p><p>类似的情况还有很多，一个接口的参数类型稍加变化，就会获得更大的通用性。再比如，对于上面 mockhttp.v1 中 rpc.Client 这个接口就存在多余的依赖，改为 http.Client 会更好一些。</p><p>不过有的时候，我们看起来从接口定义似乎更加泛化，但是实际上却是场景的收紧，这需要特别注意避免的。比如上面 mockhttp.v1 的接口：</p><pre><code>func Bind(host string, service interface{})\n</code></pre><p>与 mockhttp.v2 的接口：</p><pre><code>func ListenAndServe(host string, service http.Handler)\n</code></pre><p>看似 v1 版本类型用的是 interface{}，形式上更加泛化，但实际上 v1 版本有更强的假设，它内部通过反射机制实现了 HTTP 服务器请求的路由分派。而 v2 版本对 service 则用的是 HTTP 服务器的通用接口，是更加恰如其分的描述方式。</p><p>当然，在接口参数的抽象上，也不适合过度。如果某种泛化它不会发生，那就是过度设计。不要一开始就把系统设计得非常复杂，而陷入“过度设计”的深渊。应该让系统足够的简单，而却又不失扩展性，这其中的平衡完全依赖你对业务的理解，它是一个难点。</p><p>聊完使用界面依赖，我们接着聊实现依赖。</p><p>从模块实现的角度，我们环境依赖有两个选择：一个是直接依赖所基于的组件，一个是将所依赖的组件所有被引用的方法抽象成一个接口，让模块依赖接口而不是具体的组件。</p><p>那么，这两种方式应该怎么选择？</p><p>我的建议是，大部分情况下应该选择直接依赖组件，而不必去抽象它。</p><p>如无必要，勿增实体。</p><p>如果我们大量抽象所依赖的基础组件，意味着我们系统的可配置性（Configurable）更好，但学习成本也更高。</p><p>什么时候该当考虑把依赖抽象化？</p><p>其一，在需要提供多种选择的时候。比较典型的是日志的 Logger 组件。对于绝大部分的业务模块，都并不希望绑定 Logger 的选择，把决策权交给使用方。</p><p>但是有的时候，在这一点上过度设计也会比较常见。比如，不少业务模块会选择抽象对数据库的依赖，以便于在 MySQL 和 MongoDB 之间自由切换。但这种灵活性绝大部分情况下是一种过度设计。选择数据库应该是非常谨慎严谨的行为。</p><p>其二，在需要解除一个庞大的外部系统的依赖时。有时候我们并不是需要多个选择，而是某个外部依赖过重，我们测试或其他场景可能会选择 mock 一个外部依赖，以便降低测试系统的依赖。</p><p>其三，在依赖的外部系统为可选组件时。这个时候模块会实现一个 mock 的组件，并在初始化时将接口设置为 mock 组件。这样的好处是，除非用户关心，否则客户可以当模块不存在这个可选的配置项，这降低了学习门槛。</p><p>整体来说，对模块的实现依赖进行接口抽象，本质是对模块进行配置化，增加很多配置选项，这样的配置化需要谨慎，适可而止。</p><h2>结语</h2><p>接口设计是一个老生常谈的话题。接口有分模块的使用界面和模块的环境依赖这两种理解。</p><p>对于模块的使用界面，我们推崇 KISS 原则，简单自然，符合业务表达的惯例。</p><p>对于模块的环境依赖，我们遵循的是 “最小依赖原则”，或者叫 “最少知识原则（Least Knowledge Principle，LKP）”，尽可能发现模块中多余的依赖。</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们的话题是 “不断完善的架构范式”。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","neighbors":{"left":{"article_title":"62 | 重新认识开闭原则 (OCP)","id":175236},"right":{"article_title":"64 | 不断完善的架构范式","id":177746}},"comments":[{"had_liked":false,"id":160442,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1575951739,"is_pvip":false,"replies":[{"id":"61237","content":"少用","user_name":"作者回复","comment_id":160442,"uid":"1228022","ip_address":"","utype":1,"ctime":1575956580,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":1,"race_medal":0,"score":"35935690107","product_id":100025201,"comment_content":"所以orm是否还有必要呢 ruby python go 都有挺多ORM","like_count":9,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477375,"discussion_content":"少用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575956580,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160793,"user_name":"吴","can_delete":false,"product_type":"c1","uid":1495840,"ip_address":"","ucode":"4807FB811B2EDC","user_header":"https://static001.geekbang.org/account/avatar/00/16/d3/20/95e71191.jpg","comment_is_top":false,"comment_ctime":1576033237,"is_pvip":false,"replies":[{"id":"61327","content":"就是文中说的 logger？一般在应用最外层选定 logger，可能写到一个滚动的日志文件，也可能发到一个分布式的日志收集平台。","user_name":"作者回复","comment_id":160793,"uid":"1228022","ip_address":"","utype":1,"ctime":1576035837,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":2,"race_medal":0,"score":"10165967829","product_id":100025201,"comment_content":"老师，浏览日志和操作日志怎么设计合理一些","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477479,"discussion_content":"就是文中说的 logger？一般在应用最外层选定 logger，可能写到一个滚动的日志文件，也可能发到一个分布式的日志收集平台。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576035837,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1495840,"avatar":"https://static001.geekbang.org/account/avatar/00/16/d3/20/95e71191.jpg","nickname":"吴","note":"","ucode":"4807FB811B2EDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":78950,"discussion_content":"老师，是我们的平台想记录用户的浏览轨迹了，我又不想将记录功能分布到各个模块中，有什么好的办法吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576036825,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160451,"user_name":"Jxin","can_delete":false,"product_type":"c1","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1575953033,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10165887625","product_id":100025201,"comment_content":"mock外部依赖，以实现本服务的独立测试与交付。","like_count":2},{"had_liked":false,"id":160395,"user_name":"有铭","can_delete":false,"product_type":"c1","uid":1046302,"ip_address":"","ucode":"2C7CB36CA5C04C","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/3XbCueYYVWTiclv8T5tFpwiblOxLphvSZxL4ujMdqVMibZnOiaFK2C5nKRGv407iaAsrI0CDICYVQJtiaITzkjfjbvrQ/132","comment_is_top":false,"comment_ctime":1575944529,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"10165879121","product_id":100025201,"comment_content":"我记得ORM这个东西之所以诞生的一个重要原因就是大约15年，切换关系数据库是一种刚需，当然现在已经是伪命题了","like_count":1,"discussions":[{"author":{"id":1086093,"avatar":"https://static001.geekbang.org/account/avatar/00/10/92/8d/ab469ad5.jpg","nickname":"黄强","note":"","ucode":"20231AC29CFD53","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":222534,"discussion_content":"ORM的出现不是因为切换关系数据库的刚需，而是OOP的要求，一切皆对象","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1586154447,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":282420,"user_name":"超级伪装者杰瑞","can_delete":false,"product_type":"c1","uid":1092784,"ip_address":"","ucode":"8C96F6DC40C977","user_header":"https://static001.geekbang.org/account/avatar/00/10/ac/b0/f8027471.jpg","comment_is_top":false,"comment_ctime":1615247885,"is_pvip":false,"replies":[{"id":"102566","content":"数据库本身就有标准接口，重新包一次的意义不大","user_name":"作者回复","comment_id":282420,"uid":"1228022","ip_address":"","utype":1,"ctime":1615278304,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":1,"race_medal":0,"score":"5910215181","product_id":100025201,"comment_content":"那作为基础存储的数据库是否应该抽象出来呢？","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516739,"discussion_content":"数据库本身就有标准接口，重新包一次的意义不大","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615278304,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160814,"user_name":"吴","can_delete":false,"product_type":"c1","uid":1495840,"ip_address":"","ucode":"4807FB811B2EDC","user_header":"https://static001.geekbang.org/account/avatar/00/16/d3/20/95e71191.jpg","comment_is_top":false,"comment_ctime":1576036864,"is_pvip":false,"replies":[{"id":"61359","content":"在入口去记录。比如服务端的入口进行记录，或者前端统一进行记录。","user_name":"作者回复","comment_id":160814,"uid":"1228022","ip_address":"","utype":1,"ctime":1576062382,"user_name_real":"许式伟-七牛云(已满)"}],"discussion_count":2,"race_medal":0,"score":"5871004160","product_id":100025201,"comment_content":"老师，是我们的平台想记录用户的浏览轨迹了，我又不想将记录功能分布到各个模块中，有什么好的办法吗？","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477486,"discussion_content":"在入口去记录。比如服务端的入口进行记录，或者前端统一进行记录。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576062382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1495840,"avatar":"https://static001.geekbang.org/account/avatar/00/16/d3/20/95e71191.jpg","nickname":"吴","note":"","ucode":"4807FB811B2EDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":79182,"discussion_content":"谢谢，非常感谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576066061,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160635,"user_name":"Charles","can_delete":false,"product_type":"c1","uid":1001410,"ip_address":"","ucode":"32646D78CC0389","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/c2/e9fa4cf6.jpg","comment_is_top":false,"comment_ctime":1575990439,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5870957735","product_id":100025201,"comment_content":"架构师应该站在全局高位考虑项目，所以开发效率和架构设计以及扩展之间，有时候追求的是一种平衡，没绝对是吗？","like_count":1},{"had_liked":false,"id":160453,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1575953452,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5870920748","product_id":100025201,"comment_content":"     “大部分情况下应该选择直接依赖组件，而不必去抽象”说起这个其实就像我们去提及工具或者说功能和可扩展性的取舍。用中间件存储的rabbitMQ和kafka在高并发方面来举例：<br>      rabbitMQ:rabbit在高并发场景下确实比kafka强-阿里多次双11中历经考验，不过源代码代码的空间改造性相对kafka难许多，符合老师所说的直接用，不过一旦使用其替代方案就困难；<br>      kafka：性能虽不如rabbitmq耐抗，不过其源代码思路简单改造性容易，符合老师课程中的“最少知识原则（Least Knowledge Principle，LKP）”。<br>       两种方式的取舍其实很多时候还是看场景：相辅相成可能有时更可以充分发挥特性。","like_count":1,"discussions":[{"author":{"id":1238979,"avatar":"https://static001.geekbang.org/account/avatar/00/12/e7/c3/eb820721.jpg","nickname":"libing195205","note":"","ucode":"91907BF0F5FAA9","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285530,"discussion_content":"你是说rocketmq吧？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1592872875,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160437,"user_name":"靠人品去赢","can_delete":false,"product_type":"c1","uid":1301286,"ip_address":"","ucode":"7A20F9EBE847E1","user_header":"https://static001.geekbang.org/account/avatar/00/13/db/26/54f2c164.jpg","comment_is_top":false,"comment_ctime":1575951241,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"5870918537","product_id":100025201,"comment_content":"接口其实就是一个解耦的，你别管我怎么实现的你就按着接口来传参就好了。<br>所以我觉得，所以内部其实可以少用接口，继承也要更少用，多用组合的方式。<br>对外部提供接口，尽量的设计好，不要一大堆参数，实在不行你传个对象也行，保证最简洁","like_count":1,"discussions":[{"author":{"id":1501234,"avatar":"","nickname":"Geek_88604f","note":"","ucode":"33DD1318E53814","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304301,"discussion_content":"传个对象也没啥好处，总得搞清楚对象里面都是啥吧，负担并没有降低","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599541316,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175498,"user_name":"深山小书童","can_delete":false,"product_type":"c1","uid":1079593,"ip_address":"","ucode":"6B5DD3B3D84534","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/29/a90cf777.jpg","comment_is_top":false,"comment_ctime":1580734334,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1580734334","product_id":100025201,"comment_content":"之前理解的接口一般都是第一种，第二种环境依赖描述成接口还是第一次听到。平常用消息队列都是直接用rockemq或者kafka，这就是老师说的直接依赖组件，但是如果在springboot框架下就会依赖stream，这就是老师说的依赖抽象，springboot帮我们做了抽象。这是不是意味着，只要有变更的可能就应该优先选择依赖抽象而不是依赖组件。","like_count":0},{"had_liked":false,"id":160299,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1575908858,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1575908858","product_id":100025201,"comment_content":"目读完后想听一遍，发现没有声音，睡觉。","like_count":0}]}