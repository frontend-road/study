{"id":297270,"title":"27 | 缓存被污染了，该怎么办？","content":"<p>你好，我是蒋德钧。</p><p>我们应用Redis缓存时，如果能缓存会被反复访问的数据，那就能加速业务应用的访问。但是，如果发生了缓存污染，那么，缓存对业务应用的加速作用就减少了。</p><p>那什么是缓存污染呢？在一些场景下，有些数据被访问的次数非常少，甚至只会被访问一次。当这些数据服务完访问请求后，如果还继续留存在缓存中的话，就只会白白占用缓存空间。这种情况，就是缓存污染。</p><p>当缓存污染不严重时，只有少量数据占据缓存空间，此时，对缓存系统的影响不大。但是，缓存污染一旦变得严重后，就会有大量不再访问的数据滞留在缓存中。如果这时数据占满了缓存空间，我们再往缓存中写入新数据时，就需要先把这些数据逐步淘汰出缓存，这就会引入额外的操作时间开销，进而会影响应用的性能。</p><p>今天，我们就来看看如何解决缓存污染问题。</p><h2>如何解决缓存污染问题？</h2><p>要解决缓存污染，我们也能很容易想到解决方案，那就是得把不会再被访问的数据筛选出来并淘汰掉。这样就不用等到缓存被写满以后，再逐一淘汰旧数据之后，才能写入新数据了。而哪些数据能留存在缓存中，是由缓存的淘汰策略决定的。</p><p>到这里，你还记得咱们在<a href=\"https://time.geekbang.org/column/article/294640\">第24讲</a>一起学习的8种数据淘汰策略吗？它们分别是noeviction、volatile-random、volatile-ttl、volatile-lru、volatile-lfu、allkeys-lru、allkeys-random和allkeys-lfu策略。</p><!-- [[[read_end]]] --><p>在这8种策略中，noeviction策略是不会进行数据淘汰的。所以，它肯定不能用来解决缓存污染问题。其他的7种策略，都会按照<span class=\"orange\">一定的规则</span>来淘汰数据。这里有个关键词是“一定的规则”，那么问题来了，不同的规则对于解决缓存污染问题，是否都有效呢？接下来，我们就一一分析下。</p><p>因为LRU算法是我们在缓存数据淘汰策略中广泛应用的算法，所以我们先分析其他策略，然后单独分析淘汰策略使用LRU算法的情况，最后再学习下LFU算法用于淘汰策略时，对缓存污染的应对措施。使用LRU算法和LFU算法的策略各有两种（volatile-lru和allkeys-lru，以及volatile-lfu和allkeys-lfu），为了便于理解，接下来我会统一把它们叫作LRU策略和LFU策略。</p><p>首先，我们看下<strong>volatile-random和allkeys-random</strong>这两种策略。它们都是采用随机挑选数据的方式，来筛选即将被淘汰的数据。</p><p>既然是随机挑选，那么Redis就不会根据数据的访问情况来筛选数据。如果被淘汰的数据又被访问了，就会发生缓存缺失。也就是说，应用需要到后端数据库中访问这些数据，降低了应用的请求响应速度。所以，volatile-random和allkeys-random策略，在避免缓存污染这个问题上的效果非常有限。</p><p>我给你举个例子吧。如下图所示，假设我们配置Redis缓存使用allkeys-random淘汰策略，当缓存写满时，allkeys-random策略随机选择了数据20进行淘汰。不巧的是，数据20紧接着又被访问了，此时，Redis就会发生了缓存缺失。</p><p><img src=\"https://static001.geekbang.org/resource/image/d8/c8/d8e81168d83b411524a91c2f5554e3c8.jpg?wh=1684*683\" alt=\"\"></p><p>我们继续看<strong>volatile-ttl</strong>策略是否能有效应对缓存污染。volatile-ttl针对的是设置了过期时间的数据，把这些数据中剩余存活时间最短的筛选出来并淘汰掉。</p><p>虽然volatile-ttl策略不再是随机选择淘汰数据了，但是剩余存活时间并不能直接反映数据再次访问的情况。所以，按照volatile-ttl策略淘汰数据，和按随机方式淘汰数据类似，也可能出现数据被淘汰后，被再次访问导致的缓存缺失问题。</p><p>这时，你可能会想到一种例外的情况：业务应用在给数据设置过期时间的时候，就明确知道数据被再次访问的情况，并根据访问情况设置过期时间。此时，Redis按照数据的剩余最短存活时间进行筛选，是可以把不会再被访问的数据筛选出来的，进而避免缓存污染。例如，业务部门知道数据被访问的时长就是一个小时，并把数据的过期时间设置为一个小时后。这样一来，被淘汰的数据的确是不会再被访问了。</p><p>讲到这里，我们先小结下。除了在明确知道数据被再次访问的情况下，volatile-ttl可以有效避免缓存污染。在其他情况下，volatile-random、allkeys-random、volatile-ttl这三种策略并不能应对缓存污染问题。</p><p>接下来，我们再分别分析下LRU策略，以及Redis 4.0后实现的LFU策略。LRU策略会按照数据访问的时效性，来筛选即将被淘汰的数据，应用非常广泛。在第24讲，我们已经学习了Redis是如何实现LRU策略的，所以接下来我们就重点看下它在解决缓存污染问题上的效果。</p><h2>LRU缓存策略</h2><p>我们先复习下LRU策略的核心思想：如果一个数据刚刚被访问，那么这个数据肯定是热数据，还会被再次访问。</p><p>按照这个核心思想，Redis中的LRU策略，会在每个数据对应的RedisObject结构体中设置一个lru字段，用来记录数据的访问时间戳。在进行数据淘汰时，LRU策略会在候选数据集中淘汰掉lru字段值最小的数据（也就是访问时间最久的数据）。</p><p>所以，在数据被频繁访问的业务场景中，LRU策略的确能有效留存访问时间最近的数据。而且，因为留存的这些数据还会被再次访问，所以又可以提升业务应用的访问速度。</p><p>但是，也正是<strong>因为只看数据的访问时间，使用LRU策略在处理扫描式单次查询操作时，无法解决缓存污染</strong>。所谓的扫描式单次查询操作，就是指应用对大量的数据进行一次全体读取，每个数据都会被读取，而且只会被读取一次。此时，因为这些被查询的数据刚刚被访问过，所以lru字段值都很大。</p><p>在使用LRU策略淘汰数据时，这些数据会留存在缓存中很长一段时间，造成缓存污染。如果查询的数据量很大，这些数据占满了缓存空间，却又不会服务新的缓存请求，此时，再有新数据要写入缓存的话，还是需要先把这些旧数据替换出缓存才行，这会影响缓存的性能。</p><p>为了方便你理解，我给你举个例子。如下图所示，数据6被访问后，被写入Redis缓存。但是，在此之后，数据6一直没有被再次访问，这就导致数据6滞留在缓存中，造成了污染。</p><p><img src=\"https://static001.geekbang.org/resource/image/76/75/76909482d30097da81273f7bda18b275.jpg?wh=2197*1403\" alt=\"\"></p><p>所以，对于采用了LRU策略的Redis缓存来说，扫描式单次查询会造成缓存污染。为了应对这类缓存污染问题，Redis从4.0版本开始增加了LFU淘汰策略。</p><p>与LRU策略相比，LFU策略中会从两个维度来筛选并淘汰数据：一是，数据访问的时效性（访问时间离当前时间的远近）；二是，数据的被访问次数。</p><p>那Redis的LFU策略是怎么实现的，又是如何解决缓存污染问题的呢？我们来看一下。</p><h2>LFU缓存策略的优化</h2><p>LFU缓存策略是在LRU策略基础上，为每个数据增加了一个计数器，来统计这个数据的访问次数。当使用LFU策略筛选淘汰数据时，首先会根据数据的访问次数进行筛选，把访问次数最低的数据淘汰出缓存。如果两个数据的访问次数相同，LFU策略再比较这两个数据的访问时效性，把距离上一次访问时间更久的数据淘汰出缓存。</p><p>和那些被频繁访问的数据相比，扫描式单次查询的数据因为不会被再次访问，所以它们的访问次数不会再增加。因此，LFU策略会优先把这些访问次数低的数据淘汰出缓存。这样一来，LFU策略就可以避免这些数据对缓存造成污染了。</p><p>那么，LFU策略具体又是如何实现的呢？既然LFU策略是在LRU策略上做的优化，那它们的实现必定有些关系。所以，我们就再复习下第24讲学习过的LRU策略的实现。</p><p>为了避免操作链表的开销，Redis在实现LRU策略时使用了两个近似方法：</p><ul>\n<li>Redis是用RedisObject结构来保存数据的，RedisObject结构中设置了一个lru字段，用来记录数据的访问时间戳；</li>\n<li>Redis并没有为所有的数据维护一个全局的链表，而是通过随机采样方式，选取一定数量（例如10个）的数据放入候选集合，后续在候选集合中根据lru字段值的大小进行筛选。</li>\n</ul><p>在此基础上，<strong>Redis在实现LFU策略的时候，只是把原来24bit大小的lru字段，又进一步拆分成了两部分</strong>。</p><ol>\n<li>ldt值：lru字段的前16bit，表示数据的访问时间戳；</li>\n<li>counter值：lru字段的后8bit，表示数据的访问次数。</li>\n</ol><p>总结一下：当LFU策略筛选数据时，Redis会在候选集合中，根据数据lru字段的后8bit选择访问次数最少的数据进行淘汰。当访问次数相同时，再根据lru字段的前16bit值大小，选择访问时间最久远的数据进行淘汰。</p><p>到这里，还没结束，<strong>Redis只使用了8bit记录数据的访问次数，而8bit记录的最大值是255</strong>，这样可以吗？</p><p>在实际应用中，一个数据可能会被访问成千上万次。如果每被访问一次，counter值就加1的话，那么，只要访问次数超过了255，数据的counter值就一样了。在进行数据淘汰时，LFU策略就无法很好地区分并筛选这些数据，反而还可能会把不怎么访问的数据留存在了缓存中。</p><p>我们一起来看个例子。</p><p>假设第一个数据A的累计访问次数是256，访问时间戳是202010010909，所以它的counter值为255，而第二个数据B的累计访问次数是1024，访问时间戳是202010010810。如果counter值只能记录到255，那么数据B的counter值也是255。</p><p>此时，缓存写满了，Redis使用LFU策略进行淘汰。数据A和B的counter值都是255，LFU策略再比较A和B的访问时间戳，发现数据B的上一次访问时间早于A，就会把B淘汰掉。但其实数据B的访问次数远大于数据A，很可能会被再次访问。这样一来，使用LFU策略来淘汰数据就不合适了。</p><p>的确，Redis也注意到了这个问题。因此，<strong>在实现LFU策略时，Redis并没有采用数据每被访问一次，就给对应的counter值加1的计数规则，而是采用了一个更优化的计数规则</strong>。</p><p>简单来说，LFU策略实现的计数规则是：每当数据被访问一次时，首先，用计数器当前的值乘以配置项lfu_log_factor再加1，再取其倒数，得到一个p值；然后，把这个p值和一个取值范围在（0，1）间的随机数r值比大小，只有p值大于r值时，计数器才加1。</p><p>下面这段Redis的部分源码，显示了LFU策略增加计数器值的计算逻辑。其中，baseval是计数器当前的值。计数器的初始值默认是5（由代码中的LFU_INIT_VAL常量设置），而不是0，这样可以避免数据刚被写入缓存，就因为访问次数少而被立即淘汰。</p><pre><code>double r = (double)rand()/RAND_MAX;\n...\ndouble p = 1.0/(baseval*server.lfu_log_factor+1);\nif (r &lt; p) counter++;   \n</code></pre><p>使用了这种计算规则后，我们可以通过设置不同的lfu_log_factor配置项，来控制计数器值增加的速度，避免counter值很快就到255了。</p><p>为了更进一步说明LFU策略计数器递增的效果，你可以看下下面这张表。这是Redis<a href=\"https://redis.io/topics/lru-cache\">官网</a>上提供的一张表，它记录了当lfu_log_factor取不同值时，在不同的实际访问次数情况下，计数器的值是如何变化的。</p><p><img src=\"https://static001.geekbang.org/resource/image/8e/3e/8eafa57112b01ba0yyf93034ca109f3e.jpg?wh=2572*630\" alt=\"\"></p><p>可以看到，当lfu_log_factor取值为1时，实际访问次数为100K后，counter值就达到255了，无法再区分实际访问次数更多的数据了。而当lfu_log_factor取值为100时，当实际访问次数为10M时，counter值才达到255，此时，实际访问次数小于10M的不同数据都可以通过counter值区分出来。</p><p>正是因为使用了非线性递增的计数器方法，即使缓存数据的访问次数成千上万，LFU策略也可以有效地区分不同的访问次数，从而进行合理的数据筛选。从刚才的表中，我们可以看到，当lfu_log_factor取值为10时，百、千、十万级别的访问次数对应的counter值已经有明显的区分了，所以，我们在应用LFU策略时，一般可以将lfu_log_factor取值为10。</p><p>前面我们也提到了，应用负载的情况是很复杂的。在一些场景下，有些数据在短时间内被大量访问后就不会再被访问了。那么再按照访问次数来筛选的话，这些数据会被留存在缓存中，但不会提升缓存命中率。为此，Redis在实现LFU策略时，还设计了一个counter值的衰减机制。</p><p>简单来说，LFU策略使用衰减因子配置项lfu_decay_time来控制访问次数的衰减。LFU策略会计算当前时间和数据最近一次访问时间的差值，并把这个差值换算成以分钟为单位。然后，LFU策略再把这个差值除以lfu_decay_time值，所得的结果就是数据counter要衰减的值。</p><p>简单举个例子，假设lfu_decay_time取值为1，如果数据在N分钟内没有被访问，那么它的访问次数就要减N。如果lfu_decay_time取值更大，那么相应的衰减值会变小，衰减效果也会减弱。所以，如果业务应用中有短时高频访问的数据的话，建议把lfu_decay_time值设置为1，这样一来，LFU策略在它们不再被访问后，会较快地衰减它们的访问次数，尽早把它们从缓存中淘汰出去，避免缓存污染。</p><h2>小结</h2><p>今天这节课，我们学习的是“如何解决缓存污染”这个问题。</p><p>缓存污染问题指的是留存在缓存中的数据，实际不会被再次访问了，但是又占据了缓存空间。如果这样的数据体量很大，甚至占满了缓存，每次有新数据写入缓存时，还需要把这些数据逐步淘汰出缓存，就会增加缓存操作的时间开销。</p><p>因此，要解决缓存污染问题，最关键的技术点就是能识别出这些只访问一次或是访问次数很少的数据，在淘汰数据时，优先把它们筛选出来并淘汰掉。因为noviction策略不涉及数据淘汰，所以这节课，我们就从能否有效解决缓存污染这个维度，分析了Redis的其他7种数据淘汰策略。</p><p>volatile-random和allkeys-random是随机选择数据进行淘汰，无法把不再访问的数据筛选出来，可能会造成缓存污染。如果业务层明确知道数据的访问时长，可以给数据设置合理的过期时间，再设置Redis缓存使用volatile-ttl策略。当缓存写满时，剩余存活时间最短的数据就会被淘汰出缓存，避免滞留在缓存中，造成污染。</p><p>当我们使用LRU策略时，由于LRU策略只考虑数据的访问时效，对于只访问一次的数据来说，LRU策略无法很快将其筛选出来。而LFU策略在LRU策略基础上进行了优化，在筛选数据时，首先会筛选并淘汰访问次数少的数据，然后针对访问次数相同的数据，再筛选并淘汰访问时间最久远的数据。</p><p>在具体实现上，相对于LRU策略，Redis只是把原来24bit大小的lru字段，又进一步拆分成了16bit的ldt和8bit的counter，分别用来表示数据的访问时间戳和访问次数。为了避开8bit最大只能记录255的限制，LFU策略设计使用非线性增长的计数器来表示数据的访问次数。</p><p>在实际业务应用中，LRU和LFU两个策略都有应用。LRU和LFU两个策略关注的数据访问特征各有侧重，LRU策略更加<span class=\"orange\">关注数据的时效性</span>，而LFU策略更加<span class=\"orange\">关注数据的访问频次</span>。通常情况下，实际应用的负载具有较好的时间局部性，所以LRU策略的应用会更加广泛。但是，在扫描式查询的应用场景中，LFU策略就可以很好地应对缓存污染问题了，建议你优先使用。</p><p>此外，如果业务应用中有短时高频访问的数据，除了LFU策略本身会对数据的访问次数进行自动衰减以外，我再给你个小建议：你可以优先使用volatile-lfu策略，并根据这些数据的访问时限设置它们的过期时间，以免它们留存在缓存中造成污染。</p><h2>每课一问</h2><p>按照惯例，我给你提个小问题。使用了LFU策略后，你觉得缓存还会被污染吗？</p><p>欢迎在留言区写下你的思考和答案，我们一起交流讨论。如果你觉得今天的内容对你有所帮助，也欢迎你分享给你的朋友或同事。我们下节课见。</p>","neighbors":{"left":{"article_title":"26 | 缓存异常（下）：如何解决缓存雪崩、击穿、穿透难题？","id":296586},"right":{"article_title":"28 | Pika：如何基于SSD实现大容量Redis？","id":298205}},"comments":[{"had_liked":false,"id":254190,"user_name":"Kaito","can_delete":false,"product_type":"c1","uid":1020042,"ip_address":"","ucode":"79775FA35A95F2","user_header":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","comment_is_top":false,"comment_ctime":1603079310,"is_pvip":true,"discussion_count":20,"race_medal":0,"score":"864891505806","product_id":100056701,"comment_content":"使用了 LFU 策略后，缓存还会被污染吗？<br><br>我觉得还是有被污染的可能性，被污染的概率取决于LFU的配置，也就是lfu-log-factor和lfu-decay-time参数。<br><br>1、根据LRU counter计数规则可以得出，counter递增的概率取决于2个因素：<br><br>a) counter值越大，递增概率越低<br>b) lfu-log-factor设置越大，递增概率越低<br><br>所以当访问次数counter越来越大时，或者lfu-log-factor参数配置过大时，counter递增的概率都会越来越低，这种情况下可能会导致一些key虽然访问次数较高，但是counter值却递增困难，进而导致这些访问频次较高的key却优先被淘汰掉了。<br><br>另外由于counter在递增时，有随机数比较的逻辑，这也会存在一定概率导致访问频次低的key的counter反而大于访问频次高的key的counter情况出现。<br><br>2、如果lfu-decay-time配置过大，则counter衰减会变慢，也会导致数据淘汰发生推迟的情况。<br><br>3、另外，由于LRU的ldt字段只采用了16位存储，其精度是分钟级别的，在counter衰减时可能会产生同一分钟内，后访问的key比先访问的key的counter值优先衰减，进而先被淘汰掉的情况。<br><br>可见，Redis实现的LFU策略，也是近似的LFU算法。Redis在实现时，权衡了内存使用、性能开销、LFU的正确性，通过复用并拆分lru字段的方式，配合算法策略来实现近似的结果，虽然会有一定概率的偏差，但在内存数据库这种场景下，已经做得足够好了。","like_count":202,"discussions":[{"author":{"id":1361159,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqJobg767PUeqrqQQ4B6YvMatj2SRyOicKZZ4gWTf30dMketiaj58Gc3RFTmckGxAXlL9ERSxGovq9g/132","nickname":"涛哥哥","note":"","ucode":"329A1384E3AB5E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":336605,"discussion_content":"还有一种情况，淘汰的效率比较慢，比新增的数据速度慢，也会导致缓存被污染","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1608631976,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2316070,"avatar":"","nickname":"Geek_5ba789","note":"","ucode":"BA634AB7C5C9C7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":326735,"discussion_content":"另外，课程上面有提到“随机选取一定量的数据放入集合“；如果相关数据没被选到的话，这应该也是缓存还会被污染的原因之一？","likes_number":3,"is_delete":false,"is_hidden":false,"ctime":1605670970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2316070,"avatar":"","nickname":"Geek_5ba789","note":"","ucode":"BA634AB7C5C9C7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531374,"discussion_content":"感觉会，这种就是每种策略都会产生这种情况","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637295591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":326735,"ip_address":""},"score":531374,"extra":"{\"user_type\":1}"},{"author":{"id":1811277,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/a3/4d/59390ba9.jpg","nickname":"排骨","note":"","ucode":"A413CF46211E1F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2316070,"avatar":"","nickname":"Geek_5ba789","note":"","ucode":"BA634AB7C5C9C7","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586304,"discussion_content":"对的，毕竟随机，有一定的运气成分","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662097038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":326735,"ip_address":"中国香港"},"score":586304,"extra":""}]},{"author":{"id":2041396,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","nickname":"宙斯","note":"","ucode":"80DF36BAD298AD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342391,"discussion_content":"缓存淘汰是在每次请求时同步去计算这些淘汰机制吗？","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1610671536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2041396,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/26/34/891dd45b.jpg","nickname":"宙斯","note":"","ucode":"80DF36BAD298AD","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":342478,"discussion_content":"是的，达到maxmemory后，请求进来，先淘汰数据，再写入数据。","likes_number":13,"is_delete":false,"is_hidden":false,"ctime":1610693420,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":342391,"ip_address":""},"score":342478,"extra":""}]},{"author":{"id":2028941,"avatar":"","nickname":"Geek1254","note":"","ucode":"BC2F7756A0676D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":379743,"discussion_content":" 请问为了count可以支持更大的值，lfu_log_factor岂不是越大越好，直接设置100不就行了，为什么作者要建议设置10","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1624102970,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":2028941,"avatar":"","nickname":"Geek1254","note":"","ucode":"BC2F7756A0676D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":380428,"discussion_content":"lfu-log-factor设置过大会使counter递增概率过低，导致counter递增困难，在访问量不高的场景下，很难区分出频次高和频次低的key","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1624501437,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":379743,"ip_address":""},"score":380428,"extra":""},{"author":{"id":1780797,"avatar":"https://static001.geekbang.org/account/avatar/00/1b/2c/3d/0bd58aa4.jpg","nickname":"Em","note":"","ucode":"32012A5C603C8A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2028941,"avatar":"","nickname":"Geek1254","note":"","ucode":"BC2F7756A0676D","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577971,"discussion_content":"肯定有两面性   你把10000个数分成255来表示   肯定后面数越大就越模糊   哲学问题.....","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1656436023,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":379743,"ip_address":""},"score":577971,"extra":""}]},{"author":{"id":2172420,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/r2nR7Zkl5RP7LobsNKJ6wmmtyXrh4alNSAOldx1y1PSeFB1J2I14HE4I0BCgicPhubIOibPZAENzEpHEWTFjMNqg/132","nickname":"董董","note":"","ucode":"C222E275545158","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325870,"discussion_content":"班长你好，请问下衰减因子策略是在主线程执行的还是子线程扫描执行的？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1605448890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2172420,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/r2nR7Zkl5RP7LobsNKJ6wmmtyXrh4alNSAOldx1y1PSeFB1J2I14HE4I0BCgicPhubIOibPZAENzEpHEWTFjMNqg/132","nickname":"董董","note":"","ucode":"C222E275545158","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325872,"discussion_content":"主线程，请求到的key才会触发计算。","likes_number":7,"is_delete":false,"is_hidden":false,"ctime":1605448968,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325870,"ip_address":""},"score":325872,"extra":""}]},{"author":{"id":2124243,"avatar":"https://static001.geekbang.org/account/avatar/00/20/69/d3/97510c5b.jpg","nickname":"荐哥 | 周优军","note":"","ucode":"5DDD9CC85A2E6B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590591,"discussion_content":"所以万事都不是绝对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665906414,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623409,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c5/71/f7c43b49.jpg","nickname":"风向北吹","note":"","ucode":"2FD0BC5159E1C1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589919,"discussion_content":"counter非线性递增和衰减机制，是不是也可以参考网络拥塞机制的实现，慢启动、拥塞避免、拥塞发生、快速恢复","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665396022,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1623409,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c5/71/f7c43b49.jpg","nickname":"风向北吹","note":"","ucode":"2FD0BC5159E1C1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589917,"discussion_content":"由于LRU的ldt字段只采用了16位存储，其精度是分钟级别的，比如202210101750是到分钟级，只有12位，为什么说16位不能存储到秒级精度呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665395474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1415619,"avatar":"https://static001.geekbang.org/account/avatar/00/15/99/c3/e4f408d4.jpg","nickname":"陌兮","note":"","ucode":"00CE47CAECD5CD","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":553679,"discussion_content":"4.0以上版本，mark!","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646026631,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348708,"discussion_content":"这个衰减，是有专门的定时机制进行处理吗？\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612684728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531373,"discussion_content":"请求过来，先判断内存是否超过了maxmemory,如果超了，就触发淘汰机制，淘汰机制是采样到待淘汰集合，计算后进行淘汰删除","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637295542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":348708,"ip_address":""},"score":531373,"extra":"{\"user_type\":1}"}]},{"author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":320865,"discussion_content":"班长，能否问下lfu_decay_time 这个衰减因子在哪儿配置吗？config 中没有搜索到这个参数额。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1604493698,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":3,"extra":"","child_discussion_number":2,"child_discussions":[{"author":{"id":1020042,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/90/8a/288f9f94.jpg","nickname":"Kaito","note":"","ucode":"79775FA35A95F2","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":320868,"discussion_content":"4.0以上版本才支持LFU。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1604494609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320865,"ip_address":""},"score":320868,"extra":""},{"author":{"id":1015205,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/7d/a5/930c9103.jpg","nickname":"Feng","note":"","ucode":"42DB60B7BF69D0","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":1649057,"avatar":"https://static001.geekbang.org/account/avatar/00/19/29/a1/41607383.jpg","nickname":"hello","note":"","ucode":"4F42DAA5DB5C38","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":363430,"discussion_content":"是lfu-decay-time不是lfu_decay_time","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1617193618,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":320865,"ip_address":""},"score":363430,"extra":""}]}]},{"had_liked":false,"id":254129,"user_name":"甜宝仙女的专属饲养员","can_delete":false,"product_type":"c1","uid":1443145,"ip_address":"","ucode":"6D2039BA22551F","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eozpyAUaM6ra1hqeIsd4v0fulS4zVmxDM3LQyqGo0BFM141QpQnSib6oHdQricGrRxusp5rflGn54ew/132","comment_is_top":false,"comment_ctime":1603070058,"is_pvip":true,"discussion_count":2,"race_medal":0,"score":"104682285162","product_id":100056701,"comment_content":"又刷新了对lru和lfu的认知，这种突然打开知识盲区的天窗的感觉就如同一盆冷水，把我从地铁上这种迷迷糊糊的状态给满血复活","like_count":25,"discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531375,"discussion_content":"每天堵车的时候，午睡之前，拉粑粑的时候看","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637295668,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1513825,"avatar":"https://static001.geekbang.org/account/avatar/00/17/19/61/119cbde2.jpg","nickname":"Dolly","note":"","ucode":"CC74978F393055","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":337837,"discussion_content":"我也是每天地铁看。。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1609083528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":254150,"user_name":"test","can_delete":false,"product_type":"c1","uid":1065849,"ip_address":"","ucode":"9A4973E591DD12","user_header":"https://static001.geekbang.org/account/avatar/00/10/43/79/18073134.jpg","comment_is_top":false,"comment_ctime":1603072057,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"57437646905","product_id":100056701,"comment_content":"1.选候选集：volatile前缀的是设置了过期时间的key，all前缀的是全部key；<br>2.算法：lru是最近最少使用，lfu是最近最不频繁使用，ttl是距离到期时间长短，ramdon是随机；<br>    2.1 lru是自带了访问时间<br>    2.2 lfu是带了访问次数，但是因为只有八位保存所以不是每访问一次就+1，而是每次原来访问次数乘以lfu_log_factor，加一再倒数，看是否大于随机值，大于则+1：double r = (double)rand()&#47;RAND_MAX;double p = 1.0&#47;(baseval*server.lfu_log_factor+1);if (r &lt; p) counter++;<br>还有衰减机制，由lfu_decay_time控制，已过去n个lfu_decay_time，则将idle time加n。<br>3.淘汰规则：每次sample n个key，比如10个，放到pool里面，淘汰idle时间最长的key。再次淘汰的时候，继续抽样10个key，只把小于原pool中某个idle时间的key插入进去，即如果抽样出来的key比pool中所有key的idle时间都小，则不插入。然后淘汰pool中idle小的，保持pool在10个；<br>","like_count":13},{"had_liked":false,"id":258273,"user_name":"xueyuan","can_delete":false,"product_type":"c1","uid":1128121,"ip_address":"","ucode":"3DE20A723EBAFE","user_header":"https://static001.geekbang.org/account/avatar/00/11/36/b9/3b28f67c.jpg","comment_is_top":false,"comment_ctime":1604366639,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"35964105007","product_id":100056701,"comment_content":"这篇文章就学到了很多，lfu的设计理念很有参考学习的意义。","like_count":9},{"had_liked":false,"id":254121,"user_name":"yeek","can_delete":false,"product_type":"c1","uid":1020629,"ip_address":"","ucode":"A1C71023113CB9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/d5/699384a0.jpg","comment_is_top":false,"comment_ctime":1603069186,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"14487971074","product_id":100056701,"comment_content":"偏极端情况下，数据短期内被高频访问，且计数器达到了很大值，且计数器的衰减设置的很大，导致衰减很慢，此时该数据就可能在缓存中长期驻留。<br><br>从长期来看，我觉得应该是避免频繁执行数据淘汰，否则会影响redis的效率，较好的做法应该是监控redis服务器的内存情况，以及相应的报警机制，定期统计redis中的key分布情况，交由使用方check数据合理性，以检验程序中对redis数据设置的过期时间，访问失效等是否合理。","like_count":4},{"had_liked":false,"id":301348,"user_name":"bigben","can_delete":false,"product_type":"c1","uid":1169313,"ip_address":"","ucode":"DBD15A6C8E2590","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJkeOAC8k7aPMfQZ4ickiavpfR9mTQs1wGhGtIicotzAoszE5qkLfFTabkDU2E39ovSgoibJ1IiaLXtGicg/132","comment_is_top":false,"comment_ctime":1625641294,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"10215575886","product_id":100056701,"comment_content":"未达到触发淘汰机制的阈值之前，会被污染的；淘汰时也不是所有被污染key被淘汰，所以也还是被污染的；","like_count":1},{"had_liked":false,"id":254119,"user_name":"写点啥呢","can_delete":false,"product_type":"c1","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1603069103,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"10193003695","product_id":100056701,"comment_content":"关于计数衰减想请问老师，它发生的时机是在缓存被访问到还是Redis会定时刷新所有缓存计数进行衰减呢？对这两种衰减时机感觉都有不足，再次访问时候衰减能维持较低的性能损耗但是对于短期热点数据如果不会被访问那么计数就不准确还会导致污染问题。如果是全量定时刷新那么又会带来很多性能损耗。","like_count":2,"discussions":[{"author":{"id":2172420,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/r2nR7Zkl5RP7LobsNKJ6wmmtyXrh4alNSAOldx1y1PSeFB1J2I14HE4I0BCgicPhubIOibPZAENzEpHEWTFjMNqg/132","nickname":"董董","note":"","ucode":"C222E275545158","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":325606,"discussion_content":"这也是我的一个疑问，还是说等下一次访问到这个值的时候先进行加，然后按照计数器衰减规则进行减一个值？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605361048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1676246,"avatar":"https://static001.geekbang.org/account/avatar/00/19/93/d6/040e4965.jpg","nickname":"Omer","note":"","ucode":"8EE3E531313265","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2172420,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/r2nR7Zkl5RP7LobsNKJ6wmmtyXrh4alNSAOldx1y1PSeFB1J2I14HE4I0BCgicPhubIOibPZAENzEpHEWTFjMNqg/132","nickname":"董董","note":"","ucode":"C222E275545158","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":385468,"discussion_content":"没错，就是这样的，递增和递减是同时触发的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1627053761,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":325606,"ip_address":""},"score":385468,"extra":""}]}]},{"had_liked":false,"id":288743,"user_name":"而立斋","can_delete":false,"product_type":"c1","uid":1087258,"ip_address":"","ucode":"5FED6E9E148195","user_header":"https://static001.geekbang.org/account/avatar/00/10/97/1a/389eab84.jpg","comment_is_top":false,"comment_ctime":1618652351,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5913619647","product_id":100056701,"comment_content":"这才是美妙的设计！！！那个随机数的作用也是神奇，能够有限的减缓计数器增长的速度，而且是数越大，越稳定","like_count":1},{"had_liked":false,"id":285930,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1617076685,"is_pvip":true,"discussion_count":0,"race_medal":2,"score":"5912043981","product_id":100056701,"comment_content":"有缓存过期时间和缓存淘汰机制，为什么还会出现缓存污染？<br><br>这一讲算是补上了之前留下来的一个坑——前面讲过了 LRU 算法，但是对于 LFU 一直留到这里才讲。我之前望文生义的以为 LFU，就是按照访问频次来淘汰，但是没有考虑到如果次数相同，那么还是要看访问时间；另外就是巧妙的拆分了 RedisObject 里面的 lru 字段，用 ldt 和 counter 来实现算法。<br><br>能看懂计数器规则的公式，但是不理解为什么要这么计算。还有那个 衰减因子配置项 lfu_decay_time 的相关计算也比较有意思，但是不知所以然，此处必有蹊跷。<br><br>之前看 LRU 和 LFU 比较多，忽略了 volatile-ttl 策略，这次正好补上了。<br><br>使用了 LFU 策略之后，应该还是会有缓存污染的情况，但是被污染的比例，或者说造成的影响应该小很多。假设 Redis 每次收到的请求都是全量扫描或接近于，那么 LFU 是不是就会失效，或者说缓存污染就会比较严重？","like_count":2},{"had_liked":false,"id":265042,"user_name":"zenk","can_delete":false,"product_type":"c1","uid":1013669,"ip_address":"","ucode":"B235D5EBCF49BC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/a5/c5ae871d.jpg","comment_is_top":false,"comment_ctime":1606742982,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"5901710278","product_id":100056701,"comment_content":"缓存污染还有一个实时性问题吧<br><br>越小的时间范围内准确识别的难度越大，有时业务方都无法确保数据的时效性，更别说缺少业务信息的Redis<br><br>所以，不管什么策略，都无法避免绝对的没有污染","like_count":1},{"had_liked":false,"id":261652,"user_name":"简约风丶","can_delete":false,"product_type":"c1","uid":1024128,"ip_address":"","ucode":"4F1541223C7ED5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/80/2349287c.jpg","comment_is_top":false,"comment_ctime":1605462641,"is_pvip":false,"discussion_count":0,"race_medal":1,"score":"5900429937","product_id":100056701,"comment_content":"如果有两种类型的数据，一种是波段型访问频率高，一种是一直平稳的访问频率，这种情况下，是不是LFU算法就有可能造成缓存污染","like_count":1},{"had_liked":false,"id":260804,"user_name":"小文同学","can_delete":false,"product_type":"c1","uid":1001893,"ip_address":"","ucode":"48F2AEB989C12A","user_header":"https://static001.geekbang.org/account/avatar/00/0f/49/a5/e4c1c2d4.jpg","comment_is_top":false,"comment_ctime":1605109739,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"5900077035","product_id":100056701,"comment_content":"LFU 策略需要反复再看才行。","like_count":1},{"had_liked":false,"id":254092,"user_name":"Litt1eQ","can_delete":false,"product_type":"c1","uid":2083695,"ip_address":"","ucode":"D80D0B14F3B312","user_header":"https://static001.geekbang.org/account/avatar/00/1f/cb/6f/b6693f43.jpg","comment_is_top":false,"comment_ctime":1603064940,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"5898032236","product_id":100056701,"comment_content":"感觉下面这种情况会造成缓存污染 比如说一个热点数据 短时间可能会被大量的访问 但是热点一过 访问频率就会降低 甚至不会被访问到 这样热点数据只能通过计数衰减淘汰 有可能这些数据成为污染缓存的数据","like_count":1,"discussions":[{"author":{"id":2253496,"avatar":"","nickname":"Geek_3d87cb","note":"","ucode":"F09334D60C3BC8","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":339246,"discussion_content":"这种就更适合用lru了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1609578955,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342344,"user_name":"Breeze","can_delete":false,"product_type":"c1","uid":2962899,"ip_address":"","ucode":"8B6711F5B9D112","user_header":"https://static001.geekbang.org/account/avatar/00/2d/35/d3/8de43dd5.jpg","comment_is_top":false,"comment_ctime":1650203396,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650203396","product_id":100056701,"comment_content":"缓存被污染是一个相对概念，不是绝对的，带有一定主观上的判断。LFU策略的效果跟counter值累计的灵敏度和counter的衰减快慢有关系，所以说客观上还是会存在少量污染的情况存在（当然也可以认为不存在污染）。","like_count":0},{"had_liked":false,"id":341948,"user_name":"阿昕","can_delete":false,"product_type":"c1","uid":1012906,"ip_address":"","ucode":"F3AD093B68E074","user_header":"https://static001.geekbang.org/account/avatar/00/0f/74/aa/178a6797.jpg","comment_is_top":false,"comment_ctime":1649927567,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649927567","product_id":100056701,"comment_content":"lfu在很大程度上解决了淘汰访问频率较低数据的需求，并不是绝对性的避免缓存污染","like_count":0},{"had_liked":false,"id":340772,"user_name":"Sk_Keith","can_delete":false,"product_type":"c1","uid":1312933,"ip_address":"","ucode":"C1A69DAA1A8011","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaRiaKz5VweoRNz2NibVZh6N2h1CFhExWjLYzZkg53PqdF1npyqvqEgCxUxFHUPRHib4AzYkp5675cXMmPnnaibicqUg/132","comment_is_top":false,"comment_ctime":1649130316,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1649130316","product_id":100056701,"comment_content":"看完这块内容，有个疑惑：不同的Key的访问频率，这个配置是通用的话，能保证全局适用吗？还是只针对某个库的？有实践过的大佬帮忙解惑下吗？","like_count":0},{"had_liked":false,"id":333661,"user_name":"星龙驹","can_delete":false,"product_type":"c1","uid":2112462,"ip_address":"","ucode":"4388832D912271","user_header":"https://static001.geekbang.org/account/avatar/00/20/3b/ce/9ddbcd0d.jpg","comment_is_top":false,"comment_ctime":1644462756,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1644462756","product_id":100056701,"comment_content":"有个地方不太明白，8bit最大是255，为什么16bit能表示一个很大的时间戳，如202010010909？","like_count":0,"discussions":[{"author":{"id":2911084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/6b/6c/3e80afaf.jpg","nickname":"HappyHasson","note":"","ucode":"B84CC43E349CFA","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555852,"discussion_content":"16位精确到分钟，这里作者直接翻译成年月日格式了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1647083230,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":332547,"user_name":"Vic","can_delete":false,"product_type":"c1","uid":1304572,"ip_address":"","ucode":"90EC87BFE5BFBD","user_header":"https://static001.geekbang.org/account/avatar/00/13/e7/fc/f7bbe736.jpg","comment_is_top":false,"comment_ctime":1643335056,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1643335056","product_id":100056701,"comment_content":"这个课后问题。。内存使用达到maxmemory后才触发内存淘汰机制，LRU&amp;LFU也只是针对这种情况下的Redis释放内存的行为，有效解决缓存污染还是需要给Key设置合理的有效期，有Redis的惰性删除&#47;定时删除即使释放内存","like_count":0},{"had_liked":false,"id":331330,"user_name":"剑八","can_delete":false,"product_type":"c1","uid":1297630,"ip_address":"","ucode":"0A09F41DB8A4E7","user_header":"https://static001.geekbang.org/account/avatar/00/13/cc/de/e28c01e1.jpg","comment_is_top":false,"comment_ctime":1642554810,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1642554810","product_id":100056701,"comment_content":"一定程度不会，极端情况会有，未设置衰减机制，或衰减时间较长","like_count":0},{"had_liked":false,"id":330477,"user_name":"冷山","can_delete":false,"product_type":"c1","uid":2839720,"ip_address":"","ucode":"67163D24B7FA0E","user_header":"https://static001.geekbang.org/account/avatar/00/2b/54/a8/3b334406.jpg","comment_is_top":false,"comment_ctime":1641990902,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1641990902","product_id":100056701,"comment_content":"使用了 LFU 策略后，缓存还会被污染吗？<br>LFU算法也会带来缓存污染，如果一个数据的counter值已经是255了，且这个数据以后不再访问了。那么这个数据由于counter值很大，就会导致很迟甚至一直都不被淘汰","like_count":0},{"had_liked":false,"id":322921,"user_name":"下个目标45k","can_delete":false,"product_type":"c1","uid":1066508,"ip_address":"","ucode":"193BA8C3AA9A61","user_header":"https://static001.geekbang.org/account/avatar/00/10/46/0c/773ba2f3.jpg","comment_is_top":false,"comment_ctime":1637658791,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1637658791","product_id":100056701,"comment_content":"这种工程实践出来的算法让人真兴奋啊","like_count":0},{"had_liked":false,"id":322309,"user_name":"戒酒的李白","can_delete":false,"product_type":"c1","uid":2166073,"ip_address":"","ucode":"744E1A22761647","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","comment_is_top":false,"comment_ctime":1637295891,"is_pvip":true,"discussion_count":1,"race_medal":0,"score":"1637295891","product_id":100056701,"comment_content":"lfu累加次数counter是从key生成开始算，还是只算最近一段时间的","like_count":0,"discussions":[{"author":{"id":2027435,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/ef/ab/ea3488c8.jpg","nickname":"Bijiasuo","note":"","ucode":"6DB63A899D184C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":541355,"discussion_content":"开始","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640339103,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":310895,"user_name":"鱼","can_delete":false,"product_type":"c1","uid":1487584,"ip_address":"","ucode":"89EC9CE3AD0281","user_header":"https://static001.geekbang.org/account/avatar/00/16/b2/e0/d856f5a4.jpg","comment_is_top":false,"comment_ctime":1630975997,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1630975997","product_id":100056701,"comment_content":"LFU的ldt 值和counter 值的位置为什么不颠倒过来过来，ldt 值在高8位，这样就可以直接比较了？<br>此外为了避免缓存污染问题（我们常说的挖坟问题），还可以采用MySQL中 BufferPool的分段式LRU方式，将LRU链分成两段，你可以理解为JVM的新生代和老年代。访问达到一定次数才能进入前半段（老年代）。个人觉得，实现比Redis这个优雅。","like_count":0,"discussions":[{"author":{"id":2420294,"avatar":"https://static001.geekbang.org/account/avatar/00/24/ee/46/7d65ae37.jpg","nickname":"木几丶","note":"","ucode":"FFDB958DA64F8C","race_medal":5,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":408334,"discussion_content":"1、为什么不用8位表示ldt：ldt用来表示时间，redis LFU算法是分钟粒度的，你可以算一下8位能表示几分钟；而且即使用16位表示counter，最大也仅仅只有65536，同样也是不够用的\n2、算法没有通用的，只有适合的，比较2个系统设计的优劣前可以先思考下这个系统为什么这么设计。redis为什么不像MySQL那样分代，最主要是考虑到时间和空间复杂性，说个最明显的：如果要达到分代LRU，必然要维护一个链表，那么就会有指针的开销和指针的频繁修改，这对redis来说无疑是个灾难。实际上前几节课老师讲LRU算法的时候提到了，所以才有了&#34;近似LRU算法&#34;","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1635229139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308171,"user_name":"Heaven","can_delete":false,"product_type":"c1","uid":1694207,"ip_address":"","ucode":"FA33FBCC66C911","user_header":"https://static001.geekbang.org/account/avatar/00/19/d9/ff/b23018a6.jpg","comment_is_top":false,"comment_ctime":1629439357,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1629439357","product_id":100056701,"comment_content":"LFU的使用的关键是取决于fu_log_factor配置项的配置，如果配置过小，可能出现counter达到255,而淘汰失误的.如果配置过大,可能会还处于counter为0的阶段导致淘汰","like_count":0},{"had_liked":false,"id":296236,"user_name":"悟空聊架构","can_delete":false,"product_type":"c1","uid":1123163,"ip_address":"","ucode":"C2F482A0CF8AF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/23/5b/983408b9.jpg","comment_is_top":false,"comment_ctime":1622848850,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1622848850","product_id":100056701,"comment_content":"课后题：使用了 LFU 策略后，你觉得缓存还会被污染吗？<br><br>计数递增因子和衰减因子都有可能造成缓存污染。<br><br>1、比如递增因子的配置为100时，count数相同的数据会有很多，但访问次数却可以相差很多，有可能访问次数多的会被先淘汰（因为是随机采样淘汰的方式），而访问次数少的却被留在redis中。<br><br>2、衰减因子设置过大，导致衰减太慢，驻留在redis中。<br>","like_count":0},{"had_liked":false,"id":292465,"user_name":"Young","can_delete":false,"product_type":"c1","uid":1073443,"ip_address":"","ucode":"075C0BBE20FD8C","user_header":"https://static001.geekbang.org/account/avatar/00/10/61/23/30d134cf.jpg","comment_is_top":false,"comment_ctime":1620830972,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1620830972","product_id":100056701,"comment_content":"Redis记录访问次数使用了一种近似计数算法——计数不是真实的计数，它代表的是实际计数的量级。<br><br>算法的思想：算法在需要增加计数的时候通过随机数的方式计算一个值来判断是否要增加，算法控制 在计数越大的时候，得到结果“是”的概率越小。","like_count":0},{"had_liked":false,"id":282606,"user_name":"蓝萧","can_delete":false,"product_type":"c1","uid":1227606,"ip_address":"","ucode":"DE125B56BF7818","user_header":"https://static001.geekbang.org/account/avatar/00/12/bb/56/a506a165.jpg","comment_is_top":false,"comment_ctime":1615338384,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1615338384","product_id":100056701,"comment_content":"LFU策略使用16位用于存储分钟级别的时间，45天之后也就用完了，redis如何处理这个问题？","like_count":0,"discussions":[{"author":{"id":1136218,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLHRd1Sibs5KpGtRcuMzGkpYQkP7Q6ariaxq96JY2txUs6pCHLu407lXFpbcJUH1QA2yDRojcst6WtQ/132","nickname":"seekerjie","note":"","ucode":"219621A4A41CCE","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":576864,"discussion_content":"分钟级别时间戳对2^16取模","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655819795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278175,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":false,"comment_ctime":1612788192,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1612788192","product_id":100056701,"comment_content":"1、对于低频次访问大量数据的情况，比如批量扫描，是否应该从程序角度，避免将数据存入redis呢？<br>2、对于老师提出的问题，我的答案是配置不合理的时候，还是会有污染的。就算配置合理，在一些特定情况下，还是有轻度污染。没有完美的策略，只有各方面的妥协与均衡，得到一个局部最优解就好了。","like_count":0},{"had_liked":false,"id":264007,"user_name":"Cloud_July","can_delete":false,"product_type":"c1","uid":1003699,"ip_address":"","ucode":"98646F7142CBFF","user_header":"https://wx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL8L7Am3u37GO6CWKqBbI02DZ2ss3IZb0F9OLewAS446vh3aicndQ255HjEDzIldBUhRpUbL04rnDA/132","comment_is_top":false,"comment_ctime":1606311172,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1606311172","product_id":100056701,"comment_content":"很精妙的设计，之前网上看文章，没怎么关注过LFU的实现，虽然不能完全解决缓存污染问题，但能降低很多","like_count":0},{"had_liked":false,"id":263753,"user_name":"Geek_27a248","can_delete":false,"product_type":"c1","uid":1542778,"ip_address":"","ucode":"6AC3AC42E6EEC9","user_header":"https://static001.geekbang.org/account/avatar/00/17/8a/7a/54003392.jpg","comment_is_top":false,"comment_ctime":1606262765,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1606262765","product_id":100056701,"comment_content":"对于redis的这几种淘汰策略、lfu算法是不是就可以作为常用的淘汰策略呢，还是同一个redis可以设置多个淘汰策略呢","like_count":0,"discussions":[{"author":{"id":2308075,"avatar":"","nickname":"Geek_89e362","note":"","ucode":"E596C2CFE1CFAF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":348707,"discussion_content":"每种策略都有其各自的优缺点和应用场景，具体还需要根据业务场景进行配置","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1612684513,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261601,"user_name":"Aecho1610213142","can_delete":false,"product_type":"c1","uid":2303205,"ip_address":"","ucode":"84AA9E4C110ABF","user_header":"https://static001.geekbang.org/account/avatar/00/23/24/e5/a83c0ff5.jpg","comment_is_top":false,"comment_ctime":1605437797,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"1605437797","product_id":100056701,"comment_content":"老师！你好 <br>LFU  LRU策略 是只有 redis 占用系统分配的内存 满了以后 才会触发； 还是，定时触发","like_count":0,"discussions":[{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531378,"discussion_content":"有请求到了redis，redis判断内存超过了maxmemory才会触发","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637295989,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":256996,"user_name":"dfuru","can_delete":false,"product_type":"c1","uid":2110772,"ip_address":"","ucode":"0222FADA093D95","user_header":"","comment_is_top":false,"comment_ctime":1603807993,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603807993","product_id":100056701,"comment_content":"在counter衰减期间，仍然污染","like_count":0},{"had_liked":false,"id":256657,"user_name":"小袁","can_delete":false,"product_type":"c1","uid":1811495,"ip_address":"","ucode":"3F5D8721F577D9","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a4/27/15e75982.jpg","comment_is_top":false,"comment_ctime":1603698456,"is_pvip":false,"discussion_count":2,"race_medal":0,"score":"1603698456","product_id":100056701,"comment_content":"为啥时间戳用16bits就足够了？","like_count":0,"discussions":[{"author":{"id":1203576,"avatar":"https://static001.geekbang.org/account/avatar/00/12/5d/78/f011d586.jpg","nickname":"遇见阳光","note":"","ucode":"378E5D37B3CD0E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551454,"discussion_content":"首先取系统秒值/60 unsigned long LFUGetTimeInMinutes(void) {\n    return (server.unixtime/60) &amp; 65535;\n}  接着lru = (LFUGetTimeInMinutes()&lt;&lt;8) | counter (左移8位保证后8位都为0 和count进行| 得到后8位的值)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645018815,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2166073,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/k3YD3y3BzGDSdrwRJyJY4BXsNJibfM4uzOdDVKIAlFApR2FZCLg2ibrZtJ4vuahA3LHLW9GKzH5CMGqCDhWjhZqg/132","nickname":"戒酒的李白","note":"","ucode":"744E1A22761647","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":531377,"discussion_content":"同样的疑问，难道只存时间戳最后几位？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637295930,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"user_type\":1}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255367,"user_name":"林肯","can_delete":false,"product_type":"c1","uid":1008582,"ip_address":"","ucode":"D2C97220230DE5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/c6/d6ea3df3.jpg","comment_is_top":false,"comment_ctime":1603330598,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603330598","product_id":100056701,"comment_content":"老师，请问Pika既然是基于磁盘的存储，那么他的性能相比于mysql提升了多少？","like_count":0},{"had_liked":false,"id":254852,"user_name":"大饶Raysir","can_delete":false,"product_type":"c1","uid":1589208,"ip_address":"","ucode":"0AFA191420A30D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTITcwicqBDYzXtLibUtian172tPs7rJpqG1Vab4oGjnguA9ziaYjDCILSGaS6qRiakvRdUEhdmSG0BGPKw/132","comment_is_top":false,"comment_ctime":1603199257,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603199257","product_id":100056701,"comment_content":"这一节学到了","like_count":0},{"had_liked":false,"id":254143,"user_name":"Bug? Feature!","can_delete":false,"product_type":"c1","uid":1164531,"ip_address":"","ucode":"F8FA8A0094FBA0","user_header":"https://static001.geekbang.org/account/avatar/00/11/c4/f3/92f654f1.jpg","comment_is_top":false,"comment_ctime":1603071220,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1603071220","product_id":100056701,"comment_content":"LRU 策略更加关注数据的时效性，而 LFU 策略更加关注数据的访问频次。","like_count":0}]}