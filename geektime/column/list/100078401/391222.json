{"id":391222,"title":"25 | 多个活动要安排（上）：多进程如何调度？","content":"<p>你好，我是LMOS。</p><p>上节课，我们了解了什么是进程，还一起写好了建立进程的代码。不知道你想过没有，如果在系统中只有一个进程，那我们提出进程相关的概念和实现与进程有关的功能，是不是就失去了意义呢？</p><p>显然，提出进程的目的之一，就是为了实现多个进程，使系统能运行多个应用程序。今天我们就在单进程的基础上扩展多进程，并在进程与进程之间进行调度。</p><p>“你存在，我深深的脑海里，我的梦里，我的心里，我的代码里”，我经常一边哼着歌，一边写着代码，这就是我们大脑中最典型“多进程”场景。</p><p>再来举一个例子：你在Windows上，边听音乐，边浏览网页，还能回复微信消息。Windows之所以能同时运行多个应用程序，就是因为Windows内核支持多进程机制，这就是最典型的多进程场景了。</p><p>这节课配套代码，你可以点击<a href=\"https://gitee.com/lmos/cosmos/tree/master/lesson25~26/Cosmos\">这里</a>下载。</p><h2>为什么需要多进程调度</h2><p>我们先来搞清楚多进程调度的原因是什么，我来归纳一下。</p><p>第一，CPU同一时刻只能运行一个进程，而CPU个数总是比进程个数少，这就需要让多进程共用一个CPU，每个进程在这个CPU上运行一段时间。</p><p>第二点原因，当一个进程不能获取某种资源，导致它不能继续运行时，就应该让出CPU。当然你也可以把第一点中的CPU时间，也归纳为一种资源，这样就合并为一点：<strong>进程拿不到资源就要让出CPU。</strong>我来为你画幅图就明白了，如下所示。</p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/8b/52/8b94e8daaf985262d6a83d38dbb07152.jpg?wh=4704x3110\" alt=\"\" title=\"多进程调度示意图\"></p><p>上图中，有五个进程，其中浏览器进程和微信进程依赖于网络和键盘的数据资源，如果不能满足它们，就应该通过进程调度让出CPU。</p><p>而两个科学计算进程，则更多的依赖于CPU，但是如果它们中的一个用完了自己的CPU时间，也得借助进程调度让出CPU，不然它就会长期霸占CPU，导致其它进程无法运行。需要注意的是，每个进程都会依赖一种资源，那就是CPU时间，你可以把CPU时间理解为它就是CPU，一个进程必须要有CPU才能运行。</p><p>这里我们只需要明白，多个进程为什么要进行调度，就可以了。</p><h2>管理进程</h2><p>下面我们一起来看看怎么管理进程，我们的Cosmos操作系统也支持多个进程，有了多个进程就要把它们管理起来。说白了，就是弄清楚这些进程有哪些状态，是如何组织起来的，又要从哪找到它们。</p><h3>进程的生命周期</h3><p>人有生老病死，对于一个进程来说也是一样。一个进程从建立开始，接着运行，然后因为资源问题不得不暂停运行，最后退出系统。这一过程，我们称为进程的生命周期。在系统实现中，通常用进程的状态表示进程的生命周期。进程的状态我们用几个宏来定义，如下所示。</p><pre><code>#define TDSTUS_RUN 0        //进程运行状态\n#define TDSTUS_SLEEP 3      //进程睡眠状态\n#define TDSTUS_WAIT 4       //进程等待状态\n#define TDSTUS_NEW 5        //进程新建状态\n#define TDSTUS_ZOMB 6       //进程僵死状态\n</code></pre><p>可以发现，我们的进程有5个状态。其中进程僵死状态，表示进程将要退出系统不再进行调度。那么进程状态之间是如何转换的，别急，我来给画一幅图解释，如下所示。</p><p><img src=\"https://static001.geekbang.org/resource/image/a3/7a/a3ec5e2e1c0dc6acdb50095b20e2977a.jpg?wh=3453x2630\" alt=\"\" title=\"进程状态切换示意图\"></p><p>上图中已经为你展示了，从建立进程到进程退出系统各状态之间的转换关系和需要满足的条件。</p><h3>如何组织进程</h3><p>首先我们来研究如何组织进程。由于系统中会有许多个进程，在上节课中我们用thread_t结构表示一个进程，因此会有多个thread_t结构。而根据刚才我们对进程生命周期的解读，我们又知道了进程是随时可能建立或者退出的，所以系统中会随时分配或者删除thread_t结构。</p><p>要应对这样的情况，最简单的办法就是<strong>使用链表数据结构</strong>，而且我们的进程有优先级，所以我们可以设计成<strong>每个优先级对应一个链表头</strong>。</p><p>下面我们来把设计落地成数据结构，由于这是调度器模块，所以我们要建立几个文件krlsched.h、krlsched.c，在其中写上代码，如下所示。</p><pre><code>typedef struct s_THRDLST\n{\n    list_h_t    tdl_lsth;                //挂载进程的链表头\n    thread_t*   tdl_curruntd;            //该链表上正在运行的进程\n    uint_t      tdl_nr;                  //该链表上进程个数\n}thrdlst_t;\ntypedef struct s_SCHDATA\n{\n    spinlock_t  sda_lock;                //自旋锁\n    uint_t      sda_cpuid;               //当前CPU id\n    uint_t      sda_schdflgs;            //标志\n    uint_t      sda_premptidx;           //进程抢占计数\n    uint_t      sda_threadnr;            //进程数\n    uint_t      sda_prityidx;            //当前优先级\n    thread_t*   sda_cpuidle;             //当前CPU的空转进程\n    thread_t*   sda_currtd;              //当前正在运行的进程\n    thrdlst_t   sda_thdlst[PRITY_MAX];   //进程链表数组\n}schdata_t;\ntypedef struct s_SCHEDCALSS\n{\n    spinlock_t  scls_lock;                //自旋锁\n    uint_t      scls_cpunr;               //CPU个数\n    uint_t      scls_threadnr;            //系统中所有的进程数\n    uint_t      scls_threadid_inc;        //分配进程id所用\n    schdata_t   scls_schda[CPUCORE_MAX];  //每个CPU调度数据结构\n}schedclass_t;\n</code></pre><p>从上述代码中，我们发现schedclass_t是个全局数据结构，这个结构里包含一个schdata_t结构数组，数组大小根据CPU的数量决定。在每个schdata_t结构中，又包含一个进程优先级大小的thrdlst_t结构数组。我画幅图，你就明白了。这幅图能让你彻底理清以上数据结构之间的关系。</p><p><img src=\"https://static001.geekbang.org/resource/image/51/49/5181c38bfcb42c688076daaeb3452d49.jpg?wh=4304x1933\" alt=\"\" title=\"组织进程示意图\"></p><p>好，下面我们就去定义这个schedclass_t数据结构并初始化。</p><h3>管理进程的初始化</h3><p>管理进程的初始化非常简单，就是对schedclass_t结构的变量的初始化。</p><p>通过前面的学习，你也许已经发现了，schedclass_t结构的变量应该是个全局变量，所以先得在cosmos/kernel/krlglobal.c文件中定义一个schedclass_t结构的全局变量，如下所示。</p><pre><code>KRL_DEFGLOB_VARIABLE(schedclass_t,osschedcls);\n</code></pre><p>有了schedclass_t结构的全局变量osschedcls，接着我们在cosmos/kernel/krlsched.c文件中写好初始化osschedcls变量的代码，如下所示。</p><pre><code>void thrdlst_t_init(thrdlst_t *initp)\n{\n    list_init(&amp;initp-&gt;tdl_lsth); //初始化挂载进程的链表\n    initp-&gt;tdl_curruntd = NULL; //开始没有运行进程 \n    initp-&gt;tdl_nr = 0;  //开始没有进程\n    return;\n}\nvoid schdata_t_init(schdata_t *initp)\n{\n    krlspinlock_init(&amp;initp-&gt;sda_lock);\n    initp-&gt;sda_cpuid = hal_retn_cpuid(); //获取CPU id\n    initp-&gt;sda_schdflgs = NOTS_SCHED_FLGS;\n    initp-&gt;sda_premptidx = 0;\n    initp-&gt;sda_threadnr = 0;\n    initp-&gt;sda_prityidx = 0;\n    initp-&gt;sda_cpuidle = NULL; //开始没有空转进程和运行的进程\n    initp-&gt;sda_currtd = NULL;\n    for (uint_t ti = 0; ti &lt; PRITY_MAX; ti++)\n    {//初始化schdata_t结构中的每个thrdlst_t结构\n        thrdlst_t_init(&amp;initp-&gt;sda_thdlst[ti]);\n    }\n    return;\n}\nvoid schedclass_t_init(schedclass_t *initp)\n{\n    krlspinlock_init(&amp;initp-&gt;scls_lock);\n    initp-&gt;scls_cpunr = CPUCORE_MAX;  //CPU最大个数\n    initp-&gt;scls_threadnr = 0;   //开始没有进程\n    initp-&gt;scls_threadid_inc = 0;\n    for (uint_t si = 0; si &lt; CPUCORE_MAX; si++)\n    {//初始化osschedcls变量中的每个schdata_t\n        schdata_t_init(&amp;initp-&gt;scls_schda[si]);\n    }\n    return;\n}\nvoid init_krlsched()\n{   //初始化osschedcls变量\n    schedclass_t_init(&amp;osschedcls);\n    return;\n}\n</code></pre><p>上述代码非常简单，由init_krlsched函数调用schedclass_t_init函数，对osschedcls变量进行初始化工作，但是init_krlsched函数由谁调用呢？</p><p>还记得之前学的内核功能层的入口函数吗（可回看<a href=\"https://time.geekbang.org/column/article/381810\">第13节课</a>）？它就是cosmos/kernel/krlinit.c文件中的<strong>init_krl函数</strong>，我们在这个函数中来调用init_krlsched函数，代码如下所示。</p><pre><code>void init_krl()\n{\n    init_krlsched();\n    die(0);//控制不让init_krl函数返回\n    return;\n}\n</code></pre><p>至此，管理进程的初始化就完成了，其实这也是我们进程调度器的初始化，就是这么简单吗？当然不是，还有重要的进程调度等我们搞定。</p><h2>设计实现进程调度器</h2><p>管理进程的数据结构已经初始化好了，现在我们开始设计实现进程调度器。</p><p>进程调度器是为了在合适的时间点，合适的代码执行路径上进行进程调度。说白了，就是从当前运行进程切换到另一个进程上运行，让当前进程停止运行，由CPU开始执行另一个进程的代码。这个事情说来简单，但做起来并不容易，下面我将带领你一步步实现进程调度器。</p><h3>进程调度器入口</h3><p>首先请你想象一下，进程调度器是什么样子的。其实，进程调度器不过是个函数，和其它函数并没有本质区别，你在其它很多代码执行路径上都可以调用它。只是它会从一个进程运行到下一个进程。</p><p>那这个函数的功能就能定下来了：<strong>无非是确定当前正在运行的进程，然后选择下一个将要运行的进程，最后从当前运行的进程，切换到下一个将要运行的进程。</strong>下面我们先来写好进程调度器的入口函数，如下所示。</p><pre><code>void krlschedul()\n{\n    thread_t *prev = krlsched_retn_currthread(),//返回当前运行进程\n             *next = krlsched_select_thread();//选择下一个运行的进程\n    save_to_new_context(next, prev);//从当前进程切换到下一个进程\n    return;\n}\n</code></pre><p>我们只要在任何需要调度进程的地方，调用上述代码中的函数就可以了。下面我们开始实现krlschedul函数中的其它功能逻辑。</p><h3>如何获取当前运行的进程</h3><p>获取当前正在运行的进程，目的是为了保存当前进程的运行上下文，确保在下一次调度到当前运行的进程时能够恢复运行。后面你就会看到，每次切换到下一个进程运行时，我们就会将下一个运行的进程设置为当前运行的进程。</p><p>这个获取当前运行进程的函数，它的代码是这样的。</p><pre><code>thread_t *krlsched_retn_currthread()\n{\n    uint_t cpuid = hal_retn_cpuid();\n    //通过cpuid获取当前cpu的调度数据结构\n    schdata_t *schdap = &amp;osschedcls.scls_schda[cpuid];\n    if (schdap-&gt;sda_currtd == NULL)\n    {//若调度数据结构中当前运行进程的指针为空，就出错死机\n        hal_sysdie(&quot;schdap-&gt;sda_currtd NULL&quot;);\n    }\n    return schdap-&gt;sda_currtd;//返回当前运行的进程\n}\n</code></pre><p>上述代码非常简单，如果你认真了解过前面组织进程的数据结构，就会发现，schdata_t结构中的<strong>sda_currtd字段</strong>正是保存当前正在运行进程的地址。返回这个字段的值，就能取得当前正在运行的进程。</p><h3>选择下一个进程</h3><p>根据调度器入口函数的设计，取得了当前正在运行的进程之后，下一步就是选择下个将要投入运行的进程。</p><p>在商业系统中，这个过程极为复杂。因为这个过程是<strong>进程调度算法的核心</strong>，它关乎到进程的吞吐量，能否及时响应请求，CPU的利用率，各个进程之间运行获取资源的公平性，这些问题综合起来就会影响整个操作系统的性能、可靠性。</p><p>作为初学者，我们不必搞得如此复杂，可以使用一个简单的优先级调度算法，就是始终选择优先级最高的进程，作为下一个运行的进程。</p><p>完成这个功能的代码，如下所示。</p><pre><code>thread_t *krlsched_select_thread()\n{\n    thread_t *retthd, *tdtmp;\n    cpuflg_t cufg;\n    uint_t cpuid = hal_retn_cpuid();\n    schdata_t *schdap = &amp;osschedcls.scls_schda[cpuid];\n    krlspinlock_cli(&amp;schdap-&gt;sda_lock, &amp;cufg);\n    for (uint_t pity = 0; pity &lt; PRITY_MAX; pity++)\n    {//从最高优先级开始扫描\n        if (schdap-&gt;sda_thdlst[pity].tdl_nr &gt; 0)\n        {//若当前优先级的进程链表不为空\n            if (list_is_empty_careful(&amp;(schdap-&gt;sda_thdlst[pity].tdl_lsth)) == FALSE)\n            {//取出当前优先级进程链表下的第一个进程\n                tdtmp = list_entry(schdap-&gt;sda_thdlst[pity].tdl_lsth.next, thread_t, td_list);\n                list_del(&amp;tdtmp-&gt;td_list);//脱链\n                if (schdap-&gt;sda_thdlst[pity].tdl_curruntd != NULL)\n                {//将这sda_thdlst[pity].tdl_curruntd的进程挂入链表尾\n                    list_add_tail(&amp;(schdap-&gt;sda_thdlst[pity].tdl_curruntd-&gt;td_list), &amp;schdap-&gt;sda_thdlst[pity].tdl_lsth);\n                }\n                schdap-&gt;sda_thdlst[pity].tdl_curruntd = tdtmp;\n                retthd = tdtmp;//将选择的进程放入sda_thdlst[pity].tdl_curruntd中，并返回\n                goto return_step;\n            }\n            if (schdap-&gt;sda_thdlst[pity].tdl_curruntd != NULL)\n            {//若sda_thdlst[pity].tdl_curruntd不为空就直接返回它\n                retthd = schdap-&gt;sda_thdlst[pity].tdl_curruntd;\n                goto return_step;\n            }\n        }\n    }\n    //如果最后也没有找到进程就返回默认的空转进程\n    schdap-&gt;sda_prityidx = PRITY_MIN;\n    retthd = krlsched_retn_idlethread();\nreturn_step:\n    //解锁并返回进程\n    krlspinunlock_sti(&amp;schdap-&gt;sda_lock, &amp;cufg);\n    return retthd;\n}\n</code></pre><p>上述代码的逻辑非常简单，我来给你梳理一下。</p><p>首先，从高到低扫描优先级进程链表，然后若当前优先级进程链表不为空，就取出该链表上的第一个进程，放入thrdlst_t结构中的tdl_curruntd字段中，并把之前thrdlst_t结构的tdl_curruntd字段中的进程挂入该链表的尾部，并返回。最后，当扫描到最低优先级时也没有找到进程，就返回默认的空转进程。</p><p>这个算法极其简单，但是对我们学习原理却足够了，也欢迎你举一反三，动手实现更高级的调度算法。</p><h3>获取空转进程</h3><p>在选择下一个进程的函数中，如果没有找到合适的进程，就返回默认的空转进程。</p><p>你可以想一下，为什么要有一个空转进程，直接返回NULL不行吗？</p><p>还真不行，因为调度器的功能必须完成从一个进程到下一个进程的切换，如果没有下一个进程，而上一个进程又不能运行了，调度器将无处可去，整个系统也将停止运行，这当然不是我们要的结果，所以我们要给系统留下最后一条路。</p><p>下面我们先来实现获取空转进程的函数，如下所示。</p><pre><code>thread_t *krlsched_retn_idlethread()\n{\n    uint_t cpuid = hal_retn_cpuid();\n    //通过cpuid获取当前cpu的调度数据结构\n    schdata_t *schdap = &amp;osschedcls.scls_schda[cpuid];\n    if (schdap-&gt;sda_cpuidle == NULL)\n    {//若调度数据结构中空转进程的指针为空，就出错死机\n        hal_sysdie(&quot;schdap-&gt;sda_cpuidle NULL&quot;);\n    }\n    return schdap-&gt;sda_cpuidle;//返回空转进程\n}\n</code></pre><p>上述代码非常简单，和我们之前实现的获取当前运行进程的函数如出一辙，只是使用schdata_t结构中的字段发生了改变。好，接下来我们要处理更重要的问题，那就是进程之间的切换。</p><h3>进程切换</h3><p>经过前面的流程，我们已经找到了当前运行的进程P1，和下一个将要运行的进程P2，现在就进入最重要的进程切换流程。</p><p>在进程切换前，我们还要了解另一个重要的问题：<strong>进程在内核中函数调用路径，那什么是函数调用路径。</strong></p><p>举个例子，比如进程P1调用了函数A，接着在函数A中调用函数B，然后在函数B中调用了函数C，最后在函数C中调用了调度器函数S，这个函数A到函数S就是进程P1的函数调用路径。</p><p>再比如，进程P2开始调用了函数D，接着在函数D中调用函数E，然后在函数E中又调用了函数F，最后在函数F中调用了调度器函数S，函数D、E、F到函数S就是进程P2的函数调用路径。</p><p>函数调用路径是通过栈来保存的，对于运行在内核空间中的进程，就是保存在对应的内核栈中。我为你准备了一幅图帮助理解。</p><p><img src=\"https://static001.geekbang.org/resource/image/28/d0/283efe1570a388902ae842acyyb299d0.jpg?wh=4070x2140\" alt=\"\" title=\"内核栈状态\"></p><p>以上就是进程P1，P2的函数调用路径，也是它们调用函数时各自内核栈空间状态的变化结果。说个题外话，你有没有发现。C语言栈才是最高效内存管理，而且变量的生命周期也是妥妥的，比很多高级语言的内存垃圾回收器都牛。</p><p>有了前面的基础，现在我们来动手实现进程切换的函数。在这个函数中，我们要干这几件事。</p><p>首先，我们把当前进程的通用寄存器保存到当前进程的内核栈中；然后，保存CPU的RSP寄存器到当前进程的机器上下文结构中，并且读取保存在下一个进程机器上下文结构中的RSP的值，把它存到CPU的RSP寄存器中；接着，调用一个函数切换MMU页表；最后，从下一个进程的内核栈中恢复下一个进程的通用寄存器。</p><p>这样下一个进程就开始运行了，代码如下所示。</p><pre><code>void save_to_new_context(thread_t *next, thread_t *prev)\n{\n    __asm__ __volatile__(\n        &quot;pushfq \\n\\t&quot;//保存当前进程的标志寄存器\n        &quot;cli \\n\\t&quot;  //关中断\n        //保存当前进程的通用寄存器\n        &quot;pushq %%rax\\n\\t&quot;\n        &quot;pushq %%rbx\\n\\t&quot;\n        &quot;pushq %%rcx\\n\\t&quot;\n        &quot;pushq %%rdx\\n\\t&quot;\n        &quot;pushq %%rbp\\n\\t&quot;\n        &quot;pushq %%rsi\\n\\t&quot;\n        &quot;pushq %%rdi\\n\\t&quot;\n        &quot;pushq %%r8\\n\\t&quot;\n        &quot;pushq %%r9\\n\\t&quot;\n        &quot;pushq %%r10\\n\\t&quot;\n        &quot;pushq %%r11\\n\\t&quot;\n        &quot;pushq %%r12\\n\\t&quot;\n        &quot;pushq %%r13\\n\\t&quot;\n        &quot;pushq %%r14\\n\\t&quot;\n        &quot;pushq %%r15\\n\\t&quot;\n        //保存CPU的RSP寄存器到当前进程的机器上下文结构中\n        &quot;movq %%rsp,%[PREV_RSP] \\n\\t&quot;\n        //把下一个进程的机器上下文结构中的RSP的值，写入CPU的RSP寄存器中\n        &quot;movq %[NEXT_RSP],%%rsp \\n\\t&quot;//事实上这里已经切换到下一个进程了，因为切换进程的内核栈    \n        //调用__to_new_context函数切换MMU页表\n        &quot;callq __to_new_context\\n\\t&quot;\n        //恢复下一个进程的通用寄存器\n        &quot;popq %%r15\\n\\t&quot;\n        &quot;popq %%r14\\n\\t&quot;\n        &quot;popq %%r13\\n\\t&quot;\n        &quot;popq %%r12\\n\\t&quot;\n        &quot;popq %%r11\\n\\t&quot;\n        &quot;popq %%r10\\n\\t&quot;\n        &quot;popq %%r9\\n\\t&quot;\n        &quot;popq %%r8\\n\\t&quot;\n        &quot;popq %%rdi\\n\\t&quot;\n        &quot;popq %%rsi\\n\\t&quot;\n        &quot;popq %%rbp\\n\\t&quot;\n        &quot;popq %%rdx\\n\\t&quot;\n        &quot;popq %%rcx\\n\\t&quot;\n        &quot;popq %%rbx\\n\\t&quot;\n        &quot;popq %%rax\\n\\t&quot;\n        &quot;popfq \\n\\t&quot;      //恢复下一个进程的标志寄存器\n        //输出当前进程的内核栈地址\n        : [ PREV_RSP ] &quot;=m&quot;(prev-&gt;td_context.ctx_nextrsp)\n        //读取下一个进程的内核栈地址\n        : [ NEXT_RSP ] &quot;m&quot;(next-&gt;td_context.ctx_nextrsp), &quot;D&quot;(next), &quot;S&quot;(prev)//为调用__to_new_context函数传递参数\n        : &quot;memory&quot;);\n    return;\n}\n</code></pre><p>你看，代码中的save_to_new_context函数，是不是有点偷天换日的感觉？</p><p>通过切换进程的内核栈，导致切换进程，因为进程的函数调用路径就保存在对应的内核栈中，只要调用krlschedul函数，最后的函数调用路径一定会停在save_to_new_context函数中，当save_to_new_context函数一返回，就会导致回到调用save_to_new_context函数的下一行代码开始运行，在这里就是返回到krlschedul函数中，最后层层返回。</p><p>我知道你很难理解这一过程，所以准备了一幅图辅助说明。</p><p><img src=\"https://static001.geekbang.org/resource/image/24/c4/2414600d584323034cbd383c756yybc4.jpg?wh=7865x3253\" alt=\"\" title=\"进程切换示意图\"></p><p>结合上图，你就能理解这个进程切换的原理了。同时你也会发现一个问题，就是这个切换机制能够正常运行，必须保证下一个进程已经被调度过，也就是<strong>它调用执行过krlschedul函数。</strong></p><p>那么已知新建进程绝对没有调用过krlschedul函数，所以它得进行特殊处理。我们在__to_new_context函数中完成这个特殊处理，代码如下所示。</p><pre><code>void __to_new_context(thread_t *next, thread_t *prev)\n{\n    uint_t cpuid = hal_retn_cpuid();\n    schdata_t *schdap = &amp;osschedcls.scls_schda[cpuid];\n    //设置当前运行进程为下一个运行的进程\n    schdap-&gt;sda_currtd = next;\n    //设置下一个运行进程的tss为当前CPU的tss\n    next-&gt;td_context.ctx_nexttss = &amp;x64tss[cpuid];\n    //设置当前CPU的tss中的R0栈为下一个运行进程的内核栈\n    next-&gt;td_context.ctx_nexttss-&gt;rsp0 = next-&gt;td_krlstktop;\n    //装载下一个运行进程的MMU页表\n    hal_mmu_load(&amp;next-&gt;td_mmdsc-&gt;msd_mmu);\n    if (next-&gt;td_stus == TDSTUS_NEW)\n    {   //如果是新建进程第一次运行就要进行处理\n        next-&gt;td_stus = TDSTUS_RUN;\n        retnfrom_first_sched(next);\n    }\n    return;\n}\n</code></pre><p>上面代码的注释已经很清楚了，__to_new_context负责设置当前运行的进程，处理CPU发生中断时需要切换栈的问题，又切换了一个进程的MMU页表（即使用新进程的地址空间），最后如果是新建进程第一次运行，就调用retnfrom_first_sched函数进行处理。下面我们来写好这个函数。</p><pre><code>void retnfrom_first_sched(thread_t *thrdp)\n{\n    __asm__ __volatile__(\n        &quot;movq %[NEXT_RSP],%%rsp\\n\\t&quot;  //设置CPU的RSP寄存器为该进程机器上下文结构中的RSP\n        //恢复进程保存在内核栈中的段寄存器\n        &quot;popq %%r14\\n\\t&quot;\n        &quot;movw %%r14w,%%gs\\n\\t&quot;\n        &quot;popq %%r14\\n\\t&quot;\n        &quot;movw %%r14w,%%fs\\n\\t&quot;\n        &quot;popq %%r14\\n\\t&quot;\n        &quot;movw %%r14w,%%es\\n\\t&quot;\n        &quot;popq %%r14\\n\\t&quot;\n        &quot;movw %%r14w,%%ds\\n\\t&quot;\n        //恢复进程保存在内核栈中的通用寄存器\n        &quot;popq %%r15\\n\\t&quot;\n        &quot;popq %%r14\\n\\t&quot;\n        &quot;popq %%r13\\n\\t&quot;\n        &quot;popq %%r12\\n\\t&quot;\n        &quot;popq %%r11\\n\\t&quot;\n        &quot;popq %%r10\\n\\t&quot;\n        &quot;popq %%r9\\n\\t&quot;\n        &quot;popq %%r8\\n\\t&quot;\n        &quot;popq %%rdi\\n\\t&quot;\n        &quot;popq %%rsi\\n\\t&quot;\n        &quot;popq %%rbp\\n\\t&quot;\n        &quot;popq %%rdx\\n\\t&quot;\n        &quot;popq %%rcx\\n\\t&quot;\n        &quot;popq %%rbx\\n\\t&quot;\n        &quot;popq %%rax\\n\\t&quot;\n        //恢复进程保存在内核栈中的RIP、CS、RFLAGS，（有可能需要恢复进程应用程序的RSP、SS）寄存器\n        &quot;iretq\\n\\t&quot;\n        :\n        : [ NEXT_RSP ] &quot;m&quot;(thrdp-&gt;td_context.ctx_nextrsp)\n        : &quot;memory&quot;);\n}\n</code></pre><p>retnfrom_first_sched函数不会返回到调用它的__to_new_context函数中，而是直接运行新建进程的相关代码（如果你不理解这段代码的原理，可以回顾<a href=\"https://time.geekbang.org/column/article/390674\">上一课</a>，看看建立进程时，对进程内核栈进行的初始化工作）。</p><p>好，进行到这里，我们已经设计出了我们的Cosmos的进程调度器，但我们都知道，这样的调度器还不够，我们还没有解决进程的等待和唤醒问题，这些内容下节课我再跟你详细分享。</p><h2>重点回顾</h2><p>这节课我们从了解为什么需要多进程调度开始，随后实现子调度管理多个进程，最终实现了进程调度器，这里面有很多重要的知识点，我来为你梳理一下。</p><p>1.<strong>为什么需要多进程调度？</strong>我们分析了系统中总有些资源不能满足每个进程的需求，所以一些进程必须要走走停停，这就需要不同的进程来回切换到CPU上运行，为了实现这个机制就需要多进程调度。</p><p>2.<strong>组织多个进程。</strong>为了实现进程管理，必须要组织多个进程。我们设计了调度器数据结构，在该结构中，我们使用优先级链表数组来组织多个进程，并且对这些数据结构的变量进行了初始化。</p><p>3.<strong>进程调度。</strong>有了多个进程就需要进程调度，我们的进程调度器是一个函数，在这个函数中选择了当前运行进程和下一个将要运行的进程，如果实在没有可运行的进程就选择空转进程，最后关键是进程间切换，我们是通过切换进程的内核栈来切换进程的函数调用路径，当调度器函数返回的时候已经是另一个进程了。</p><h2>思考题</h2><p>请问当调度器函数调度到一个新建进程时，为何要进入retnfrom_first_sched函数呢？</p><p>欢迎你在留言区积极分享，相信通过主动输出，你将更好地理解这节课的内容。也欢迎把这节课分享给你的朋友，和他交流探讨，</p><p>好，我是LMOS，我们下节课见！</p>","comments":[{"had_liked":false,"id":301066,"user_name":"neohope","can_delete":false,"product_type":"c1","uid":1043475,"ip_address":"","ucode":"C0268F6E7E2B6E","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ec/13/49e98289.jpg","comment_is_top":true,"comment_ctime":1625502998,"is_pvip":false,"replies":[{"id":"109059","content":"大佬  梳理总结到位","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1625538491,"ip_address":"","comment_id":301066,"utype":1}],"discussion_count":3,"race_medal":0,"score":"9.2233720857248993e+18","product_id":100078401,"comment_content":"一、数据结构<br>全局有一个osschedcls变量，其数据结构为schedclass_t，用于管理所有cpu的所有进程。<br>schedclass_t包括一个 schdata_t数组，每个cpu对应一个。schedclass_t[i]，用于管理第i个cpu的全部进程。<br>schedclass_t[i]包括一个thrdlst_t数组，每个进程优先级对应一个。schedclass_t[i].schdata_t[j]中，管理了第i个cpu的，优先级为j的全部进程。<br><br>二、初始化<br>进程结构初始化：<br>init_krl-&gt;init_krlsched-&gt;schedclass_t_init<br>-&gt;对于每个cpu，调用schdata_t_init，进行初始化<br>-&gt;对于每个cpu的每个进程优先级，调用thrdlst_t_init初始化列表<br><br>idel进程初始化：<br>init_krl-&gt;init_krlcpuidle<br>-&gt;new_cpuidle-&gt;new_cpuidle_thread-&gt;krlthread_kernstack_init【krlcpuidle_main传参】-&gt;krlschedul<br>-&gt;krlcpuidle_start-&gt;retnfrom_first_sched启动idel进程<br><br>三、进程调度<br>init_krl-&gt;init_krlcpuidle-&gt;new_cpuidle-&gt;new_cpuidle_thread-&gt;krlthread_kernstack_init【krlcpuidle_main传参】-&gt;krlschedul<br>-&gt;krlsched_retn_currthread根据当前cpuid，获取正在运行的进程<br>-&gt;krlsched_select_thread，获取下一个运行的进程<br>A、根据当前cpuid，选择优先级最高进程列表中的第一个进程<br>B、并将该优先级的当前进程，重新放回进程列表<br>C、如果没有进程要运行，则返回idel进程<br>-&gt;save_to_new_context，进行进程切换<br>A、保存当前进程的寄存器状态，到当前寄存器的栈<br>B、切换栈寄存器，指“向下一进程”的栈<br>C、调用__to_new_context<br>D、从“下一进程”的栈，恢复寄存器状态<br>E、而上面这些保存的状态，都是“下一进程”在释放CPU时保存好的<br>F、当CPU再次回到这个所谓的“下一进程”时，又会用同样的方式还原现场，继续执行<br>-&gt;-&gt;__to_new_context<br>A、更新当前运行进程为“下一个进程”<br>B、设置“下一进程”的tss为当前CPU的tss<br>C、设置“下一进程”的内核栈<br>D、装载“下一进程“的MMU页表<br>E、如果“下一个进程”没有运行过，调用retnfrom_first_sched，进行第一次运行初始化<br>-&gt;-&gt;-&gt; retnfrom_first_sched<br>设置好新进程的相关寄存器和栈，直接运行新建进程的相关代码","like_count":11,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522888,"discussion_content":"大佬  梳理总结到位","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625538491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1283965,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/TTPicMEZ5s1zKiaKYecIljicRV9dibITPM0958W3VuNHXlTQic2Dj6XYGibF7dqrG3JWr0LMx7hY9zXGzuvTDNGw8KAA/132","nickname":"阳光梦","note":"","ucode":"55BDA128D39931","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":389684,"discussion_content":"介绍这个是标准centos debian系统实现方法？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1629377842,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132389,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/65/1fd33b2f.jpg","nickname":"晴天","note":"","ucode":"54472F35078A07","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":407363,"discussion_content":"不知道是我理解错误，还是neohope大佬手误了，这里是否是这个样子的？\n\n全局有一个 osschedcls 变量，其数据结构为 schedclass_t，用于管理所有cpu的所有进程。schedclass_t 包括一个 schdata_t 数组，每个 cpu 对应一个。\n\nschdata_t[i] 用于管理第 i 个cpu的全部进程，包括一个 thtrdlst_t 数组，每个进程优先级对应一个。schdata_t[i].thtrdlst_t[j]中，管理了第i个cpu的，优先级为j的全部进程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634991311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300893,"user_name":"pedro","can_delete":false,"product_type":"c1","uid":1200704,"ip_address":"","ucode":"F40C839DDFD599","user_header":"https://static001.geekbang.org/account/avatar/00/12/52/40/e57a736e.jpg","comment_is_top":true,"comment_ctime":1625441365,"is_pvip":false,"replies":[{"id":"108989","content":"对的 铁子","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1625453730,"ip_address":"","comment_id":300893,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720513650995e+18","product_id":100078401,"comment_content":"文中已有答案: retnfrom_first_sched 函数不会返回到调用它的 __to_new_context 函数中，而是直接运行新建进程的相关代码。<br><br>新的进程暂时还没有上下文，所以也就没办法切换了，于是直接运行。","like_count":3,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522842,"discussion_content":"对的 铁子","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625453730,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":352243,"user_name":"Ziggy_aa","can_delete":false,"product_type":"c1","uid":1140762,"ip_address":"","ucode":"B8921BF0C11DDC","user_header":"https://static001.geekbang.org/account/avatar/00/11/68/1a/d9a35bc7.jpg","comment_is_top":true,"comment_ctime":1658475909,"is_pvip":false,"replies":[{"id":"128145","content":"对的","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1658487245,"ip_address":"","comment_id":352243,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720428081992e+18","product_id":100078401,"comment_content":"一刷的时候只是简单过了内容，到后面就跟不上了。现在二刷是跟着源码一步一步在看。从一开始初始化部分需要对照学习。渐渐熟悉代码风格和逻辑后，从内存中段部分开始就变成了先自己理解代码，再看文章确认了。还是推荐大家把源码读起来，学习的过程中会感觉越来越快。<br><br>这一章节最后的几个切换函数让我苦恼了一下。后来发现是自己搞蒙了两件事：<br>1. 如果你也一下子没反应过来为什么寄存器保存和复原的内容里没有 CS 和 RIP。那是因为 call 指令调用的时候自动已经把它们入栈了。别把这个搞忘了。<br>2. 我们是在调用 __to_new_context() 之前就已经切换到了新进程的栈了。这样我们在调用 __to_new_context() 的时候，已经是入栈在新进程的栈，所以，随着我们 return 回去，我们就在运行新的教程了。<br><br>至于新建进程为什么要用 retnfrom_first_sched 调转。对比代码可以发现，新建进程的 stack 和 __to_new_context() 返回后所需要的 stack 内容是不同的 （新建进程里还有 segment registers 的内容）。","like_count":2,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":581084,"discussion_content":"对的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658487245,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306562,"user_name":"菜鸟","can_delete":false,"product_type":"c1","uid":2451215,"ip_address":"","ucode":"214A61B6B3410F","user_header":"https://static001.geekbang.org/account/avatar/00/25/67/0f/3cb10900.jpg","comment_is_top":false,"comment_ctime":1628608329,"is_pvip":false,"replies":[{"id":"111024","content":"看看后面的课程","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1628649333,"ip_address":"","comment_id":306562,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5923575625","product_id":100078401,"comment_content":"我想问一下进程产生的整个过程是怎样的？即：命令行运行程序实例，是怎么初始化进程？是怎么把磁盘上的程序加载到内存？怎么确定进程的入口地址等","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524813,"discussion_content":"看看后面的课程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628649333,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301217,"user_name":"青玉白露","can_delete":false,"product_type":"c1","uid":2619436,"ip_address":"","ucode":"96FE2D4D2B94A0","user_header":"https://static001.geekbang.org/account/avatar/00/27/f8/2c/92969c48.jpg","comment_is_top":false,"comment_ctime":1625578579,"is_pvip":false,"replies":[{"id":"109108","content":"哈哈 正确的","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1625625699,"ip_address":"","comment_id":301217,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5920545875","product_id":100078401,"comment_content":"文中——“retnfrom_first_sched 函数不会返回到调用它的 __to_new_context 函数中，而是直接运行新建进程的相关代码”——就是思考题的答案了。<br>retnfrom_first_shed可以视为一个初始化的过程<br>","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522931,"discussion_content":"哈哈 正确的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625625699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301113,"user_name":"cugphoenix","can_delete":false,"product_type":"c1","uid":1474356,"ip_address":"","ucode":"80101AF04C00D3","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI3F4IdQuDZrhN8ThibP85eCiaSWTYpTrcC6QB9EoAkw3IIj6otMibb1CgrS1uzITAnJmGLXQ2tgIkAQ/132","comment_is_top":false,"comment_ctime":1625541558,"is_pvip":false,"replies":[{"id":"109111","content":"正确的 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1625625798,"ip_address":"","comment_id":301113,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5920508854","product_id":100078401,"comment_content":"新建进程初始化内核栈的时候，会给存储在内核栈中的intstkregs_t.r_rip_old，r_cs_old，r_rflgs...这些赋值，在retnfrom_first_sched里面iretq时，正好会把这些值弹出到对应寄存器中，从而实现新进程的运行。","like_count":1,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522901,"discussion_content":"正确的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625625798,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356377,"user_name":"│．Sk","can_delete":false,"product_type":"c1","uid":2453415,"ip_address":"湖北","ucode":"A2EEB2E9585A77","user_header":"https://static001.geekbang.org/account/avatar/00/25/6f/a7/565214bc.jpg","comment_is_top":false,"comment_ctime":1662217744,"is_pvip":false,"replies":[{"id":"129932","content":"是的 x86上没用到","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1662885272,"ip_address":"湖北","comment_id":356377,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1662217744","product_id":100078401,"comment_content":"老师好，请问 td_context.ctx_nextrip 这个属性是不是其实没有用到呀？ ","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":587216,"discussion_content":"是的 x86上没用到","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662885272,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"湖北"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349976,"user_name":"likejjj","can_delete":false,"product_type":"c1","uid":1285612,"ip_address":"","ucode":"005BF873B32EA1","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKy9XSxDLRibViazIs1wzhEmIQqMlhcoKhTXNvxXkaPGIveib8B9ibvpdkZxABKFIc4iaSMrkTh7EfWjtg/132","comment_is_top":false,"comment_ctime":1656479003,"is_pvip":false,"replies":[{"id":"128065","content":"那不一定","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1658390625,"ip_address":"","comment_id":349976,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1656479003","product_id":100078401,"comment_content":"除了进程自己让出cpu，进程调度是不是都是时钟中断触发的？时间片粒度的大小，是不是由时钟的频率决定的？比如1&#47;250","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580858,"discussion_content":"那不一定","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658390625,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348427,"user_name":"如果是你","can_delete":false,"product_type":"c1","uid":2333213,"ip_address":"","ucode":"C3DD7DC54EFF82","user_header":"https://static001.geekbang.org/account/avatar/00/23/9a/1d/be65c247.jpg","comment_is_top":false,"comment_ctime":1655100002,"is_pvip":true,"replies":[{"id":"128081","content":"中断 内核","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1658391263,"ip_address":"","comment_id":348427,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1655100002","product_id":100078401,"comment_content":"请问又是谁调用的进程调度器呢？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580876,"discussion_content":"中断 内核","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658391263,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344667,"user_name":"艾恩凝","can_delete":false,"product_type":"c1","uid":2950704,"ip_address":"","ucode":"F2B81BF4F0106A","user_header":"https://static001.geekbang.org/account/avatar/00/2d/06/30/c26ea06a.jpg","comment_is_top":false,"comment_ctime":1651717341,"is_pvip":false,"replies":[{"id":"125966","content":"内存很难","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1652065685,"ip_address":"","comment_id":344667,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651717341","product_id":100078401,"comment_content":"内存一过，一马平川","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571072,"discussion_content":"内存很难","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652065685,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340468,"user_name":"PAWCOOK","can_delete":false,"product_type":"c1","uid":2679422,"ip_address":"","ucode":"699230E475966A","user_header":"https://static001.geekbang.org/account/avatar/00/28/e2/7e/ffde572d.jpg","comment_is_top":false,"comment_ctime":1648827315,"is_pvip":false,"replies":[{"id":"124637","content":"在Cosmos上是没区别的 其它别的OS上不同","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1649228528,"ip_address":"","comment_id":340468,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1648827315","product_id":100078401,"comment_content":"请问进程进入睡眠状态和进入等待状态有什么区别吗？我觉得它们本质上是一样的","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560201,"discussion_content":"在Cosmos上是没区别的 其它别的OS上不同","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649228528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334863,"user_name":"if...else...","can_delete":false,"product_type":"c1","uid":2550743,"ip_address":"","ucode":"D0565908C99695","user_header":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","comment_is_top":false,"comment_ctime":1645159488,"is_pvip":false,"replies":[{"id":"122381","content":"C栈中变量占用的内存 你不用管理","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1645350663,"ip_address":"","comment_id":334863,"utype":1}],"discussion_count":2,"race_medal":4,"score":"1645159488","product_id":100078401,"comment_content":"为什么说c内核栈是比垃圾回收还要牛逼的内存管理方式呢？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552216,"discussion_content":"C栈中变量占用的内存 你不用管理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645350663,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2550743,"avatar":"https://static001.geekbang.org/account/avatar/00/26/eb/d7/90391376.jpg","nickname":"if...else...","note":"","ucode":"D0565908C99695","race_medal":4,"user_type":1,"is_pvip":false},"reply_author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":552225,"discussion_content":"栈里的内存用完了自动释放了吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645356507,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":552216,"ip_address":""},"score":552225,"extra":""}]}]},{"had_liked":false,"id":330680,"user_name":"Geek5167","can_delete":false,"product_type":"c1","uid":2811311,"ip_address":"","ucode":"1892D84F47E887","user_header":"","comment_is_top":false,"comment_ctime":1642119636,"is_pvip":false,"replies":[{"id":"120879","content":"会处理的 ","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1642382542,"ip_address":"","comment_id":330680,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642119636","product_id":100078401,"comment_content":"进程切换的时候，cs:ip寄存器不用处理吗，比如保存当前进程的cs:ip值","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546636,"discussion_content":"会处理的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642382542,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330651,"user_name":"Geek5167","can_delete":false,"product_type":"c1","uid":2811311,"ip_address":"","ucode":"1892D84F47E887","user_header":"","comment_is_top":false,"comment_ctime":1642084551,"is_pvip":false,"replies":[{"id":"120878","content":"你看课程里的实现啊","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1642382521,"ip_address":"","comment_id":330651,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1642084551","product_id":100078401,"comment_content":"如果要实现线程和线程间的切换，能提供一些思路和资料吗？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":546635,"discussion_content":"你看课程里的实现啊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1642382521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":330352,"user_name":"Geek5167","can_delete":false,"product_type":"c1","uid":2811311,"ip_address":"","ucode":"1892D84F47E887","user_header":"","comment_is_top":false,"comment_ctime":1641947927,"is_pvip":false,"replies":[{"id":"120367","content":"不是谁做的 C函数调用自动保存在栈中","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1641951624,"ip_address":"","comment_id":330352,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1641947927","product_id":100078401,"comment_content":"因为进程的函数调用路径就保存在对应的内核栈中，……<br>想问下这个保存动作是谁做的，具体是怎么做的","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":545406,"discussion_content":"不是谁做的 C函数调用自动保存在栈中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1641951624,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":322339,"user_name":"Mechanic","can_delete":false,"product_type":"c1","uid":1001295,"ip_address":"","ucode":"35437514988A44","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/4f/419c050c.jpg","comment_is_top":false,"comment_ctime":1637309449,"is_pvip":false,"replies":[{"id":"117116","content":"进程很多的 不是一个进程","user_name":"作者回复","user_name_real":"编辑","uid":"1345199","ctime":1637543649,"ip_address":"","comment_id":322339,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1637309449","product_id":100078401,"comment_content":"现在的硬件性能(至少计算资源)应该已经不是”系统中总有些资源不能满足每个进程的需求“，而是计算资源过于充沛导致如果只满足一个进程过于浪费了吧？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":532134,"discussion_content":"进程很多的 不是一个进程","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637543649,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":315648,"user_name":"paulpen","can_delete":false,"product_type":"c1","uid":2435832,"ip_address":"","ucode":"330B8F2787E232","user_header":"https://static001.geekbang.org/account/avatar/00/25/2a/f8/8d483f93.jpg","comment_is_top":false,"comment_ctime":1633935741,"is_pvip":false,"replies":[{"id":"114473","content":"要管的 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1634086654,"ip_address":"","comment_id":315648,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1633935741","product_id":100078401,"comment_content":"请问老师，进程切换时 ，段寄存器 比如 cs  要不要管？","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":528138,"discussion_content":"要管的 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634086654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":313319,"user_name":"XI","can_delete":false,"product_type":"c1","uid":2187234,"ip_address":"","ucode":"2CEBC094EA1E87","user_header":"https://static001.geekbang.org/account/avatar/00/21/5f/e2/e6d3d9bf.jpg","comment_is_top":false,"comment_ctime":1632376062,"is_pvip":false,"replies":[{"id":"113514","content":"这样的cpu可以同时支行12个线程 ","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1632445078,"ip_address":"","comment_id":313319,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1632376062","product_id":100078401,"comment_content":"请教老师： ”第一，CPU 同一时刻只能运行一个进程，而 CPU 个数总是比进程个数少，这就需要让多进程共用一个 CPU，每个进程在这个 CPU 上运行一段时间。&quot; 多核CPU比如6核是不是就可以同时运行6个进程？，另外现在的cpu 都标注 6核12线程，每个进程又可以创建很多个线程，假设操作系统中有10个进程正在运行，每个进程又创建了10个线程抢占cpu，那么操作系统中就有100个线程，这100个线程是怎么和cpu标注的6核12线程挂上联系的?","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":527314,"discussion_content":"这样的cpu可以同时支行12个线程 ","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1632445078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308784,"user_name":"进击的小学生","can_delete":false,"product_type":"c1","uid":1397065,"ip_address":"","ucode":"0D536C7B9BBD23","user_header":"","comment_is_top":false,"comment_ctime":1629796696,"is_pvip":false,"replies":[{"id":"111900","content":"只有一个线程可以写","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1629940741,"ip_address":"","comment_id":308784,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1629796696","product_id":100078401,"comment_content":"大佬，今天跟朋友讨论，有一个问题没搞明白需要请教下:在多核CPU情况下，有没有多个线程在同一个时刻抢到同一个资源，进行同一操作，比如果某个写锁?如果有的话，这个怎么解决这种问题?","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525622,"discussion_content":"只有一个线程可以写","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629940741,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":301024,"user_name":"blentle","can_delete":false,"product_type":"c1","uid":1064679,"ip_address":"","ucode":"AC092609A4942A","user_header":"https://static001.geekbang.org/account/avatar/00/10/3e/e7/261711a5.jpg","comment_is_top":false,"comment_ctime":1625487984,"is_pvip":false,"replies":[{"id":"109042","content":"哈哈，优秀课代表。","user_name":"编辑回复","user_name_real":"赵宇新","uid":"1501385","ctime":1625493764,"ip_address":"","comment_id":301024,"utype":2}],"discussion_count":4,"race_medal":0,"score":"1625487984","product_id":100078401,"comment_content":"发现每次都是这三人","like_count":0,"discussions":[{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522876,"discussion_content":"哈哈，优秀课代表。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625493764,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2098652,"avatar":"https://static001.geekbang.org/account/avatar/00/20/05/dc/b501933a.jpg","nickname":"有手也不行","note":"","ucode":"D55D23A2C4517E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382826,"discussion_content":"我怀疑他们三个是作者请来的托，狗头.jpg","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1625733935,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382340,"discussion_content":"哈哈，他来啦，已安排置顶～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625538376,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2064750,"avatar":"","nickname":"springXu","note":"","ucode":"F5DB0B963C894F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382276,"discussion_content":"还有位大神neohope呢。这几节课，少了他的留言。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625494558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":300939,"user_name":"springXu","can_delete":false,"product_type":"c1","uid":2064750,"ip_address":"","ucode":"F5DB0B963C894F","user_header":"","comment_is_top":false,"comment_ctime":1625457407,"is_pvip":true,"replies":[{"id":"109032","content":"简单吗","user_name":"作者回复","user_name_real":"LMOS","uid":"1345199","ctime":1625473295,"ip_address":"","comment_id":300939,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1625457407","product_id":100078401,"comment_content":"又是到阅读理解题。哈","like_count":0,"discussions":[{"author":{"id":1345199,"avatar":"https://static001.geekbang.org/account/avatar/00/14/86/af/99219321.jpg","nickname":"LMOS","note":"","ucode":"B037712C8B8B3C","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522855,"discussion_content":"简单吗","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625473295,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2064750,"avatar":"","nickname":"springXu","note":"","ucode":"F5DB0B963C894F","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":382273,"discussion_content":"目前来看，不难。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1625494364,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}