{"id":11610,"title":"37 | 微内核架构详解","content":"<p>微内核架构（Microkernel Architecture），也被称为插件化架构（Plug-in Architecture），是一种面向功能进行拆分的可扩展性架构，通常用于实现基于产品（原文为product-based，指存在多个版本、需要下载安装才能使用，与web-based相对应）的应用。例如Eclipse这类IDE软件、UNIX这类操作系统、淘宝App这类客户端软件等，也有一些企业将自己的业务系统设计成微内核的架构，例如保险公司的保险核算逻辑系统，不同的保险品种可以将逻辑封装成插件。</p><p>今天我将为你详细介绍<span class=\"orange\">常见的微内核架构及其实现</span>。</p><h2>基本架构</h2><p>微内核架构包含两类组件：核心系统（core system）和插件模块（plug-in modules）。核心系统负责和具体业务功能无关的通用功能，例如模块加载、模块间通信等；插件模块负责实现具体的业务逻辑，例如专栏前面经常提到的“学生信息管理”系统中的“手机号注册”功能。</p><p>微内核的基本架构示意图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/a9/d9/a97399aff2c030aabc9982783cc0bfd9.jpg?wh=3004*1590\" alt=\"\"></p><p>上面这张图中核心系统Core System功能比较稳定，不会因为业务功能扩展而不断修改，插件模块可以根据业务功能的需要不断地扩展。微内核的架构本质就是将变化部分封装在插件里面，从而达到快速灵活扩展的目的，而又不影响整体系统的稳定。</p><!-- [[[read_end]]] --><h2>设计关键点</h2><p>微内核的核心系统设计的关键技术有：插件管理、插件连接和插件通信。</p><p>1.插件管理</p><p>核心系统需要知道当前有哪些插件可用，如何加载这些插件，什么时候加载插件。常见的实现方法是插件注册表机制。</p><p>核心系统提供插件注册表（可以是配置文件，也可以是代码，还可以是数据库），插件注册表含有每个插件模块的信息，包括它的名字、位置、加载时机（启动就加载，还是按需加载）等。</p><p>2.插件连接</p><p>插件连接指插件如何连接到核心系统。通常来说，核心系统必须制定插件和核心系统的连接规范，然后插件按照规范实现，核心系统按照规范加载即可。</p><p>常见的连接机制有OSGi（Eclipse使用）、消息模式、依赖注入（Spring使用），甚至使用分布式的协议都是可以的，比如RPC或者HTTP Web的方式。</p><p>3.插件通信</p><p>插件通信指插件间的通信。虽然设计的时候插件间是完全解耦的，但实际业务运行过程中，必然会出现某个业务流程需要多个插件协作，这就要求两个插件间进行通信。由于插件之间没有直接联系，通信必须通过核心系统，因此核心系统需要提供插件通信机制。这种情况和计算机类似，计算机的CPU、硬盘、内存、网卡是独立设计的配件，但计算机运行过程中，CPU和内存、内存和硬盘肯定是有通信的，计算机通过主板上的总线提供了这些组件之间的通信功能。微内核的核心系统也必须提供类似的通信机制，各个插件之间才能进行正常的通信。</p><h2>OSGi架构简析</h2><p>OSGi的全称是Open Services Gateway initiative，本身其实是指OSGi Alliance。这个联盟是Sun Microsystems、IBM、爱立信等公司于1999年3月成立的开放的标准化组织，最初名为Connected Alliance。它是一个非盈利的国际组织，旨在建立一个开放的服务规范，为通过网络向设备提供服务建立开放的标准，这个标准就是OSGi specification。现在我们谈到OSGi，如果没有特别说明，一般都是指OSGi的规范。</p><p>OSGi联盟的初始目标是构建一个在广域网和局域网或设备上展开业务的基础平台，所以OSGi的最早设计也是针对嵌入式应用的，诸如机顶盒、服务网关、手机、汽车等都是其应用的主要环境。然而，无心插柳柳成荫，由于OSGi具备动态化、热插拔、高可复用性、高效性、扩展方便等优点，它被应用到了PC上的应用开发。尤其是Eclipse这个流行软件采用OSGi标准后，OSGi更是成为了首选的插件化标准。现在我们谈论OSGi，已经和嵌入式应用关联不大了，更多是将OSGi当作一个微内核的架构模式。</p><p>Eclipse从3.0版本开始，抛弃了原来自己实现的插件化框架，改用了OSGi框架。需要注意的是，OSGi是一个插件化的标准，而不是一个可运行的框架，Eclipse采用的OSGi框架称为Equinox，类似的实现还有Apache的Felix、Spring的Spring DM。</p><p>OSGi框架的逻辑架构图如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/b7/fa/b730fdb86888b25d1d22105a2ea54ffa.jpg?wh=2732*1861\" alt=\"\"></p><p>1.模块层（Module层）</p><p>模块层实现插件管理功能。OSGi中，插件被称为Bundle，每个Bundle是一个Java的JAR文件，每个Bundle里面都包含一个元数据文件MANIFEST.MF，这个文件包含了Bundle的基本信息。例如，Bundle的名称、描述、开发商、classpath，以及需要导入的包和输出的包等，OSGi核心系统会将这些信息加载到系统中用于后续使用。</p><p>一个简单的MANIFEST.MF样例如下：</p><pre><code>// MANIFEST.MF \n\tBundle-ManifestVersion: 2 \n\tBundle-Name:UserRegister\n\tBundle-SymbolicName: com.test.userregister \n\tBundle-Version: 1.0 \n\tBundle-Activator: com.test.UserRegisterActivator\n\t \n\tImport-Package: org.log4j;version=&quot;2.0&quot;, \n\t..... \n\tExport-Package: com.test.userregister;version=&quot;1.0&quot;, \n</code></pre><p>2.生命周期层（Lifecycle层）</p><p>生命周期层实现插件连接功能，提供了执行时模块管理、模块对底层OSGi框架的访问。生命周期层精确地定义了Bundle生命周期的操作（安装、更新、启动、停止、卸载），Bundle必须按照规范实现各个操作。例如：</p><pre><code>public class UserRegisterActivator implements BundleActivator { \n\t \n\t public void start(BundleContext context) { \n\t     UserRegister.instance = new UserRegister (); \n\t } \n\t \n\t public void stop(BundleContext context) { \n\t     UserRegister.instance = null; \n\t } \n\t} \n</code></pre><p>3.服务层（Service层）</p><p>服务层实现插件通信的功能。OSGi提供了一个服务注册的功能，用于各个插件将自己能提供的服务注册到OSGi核心的服务注册中心，如果某个服务想用其他服务，则直接在服务注册中心搜索可用服务中心就可以了。</p><p>例如：</p><pre><code>// 注册服务\npublic class UserRegisterActivator implements BundleActivator {\n//在start()中用BundleContext.registerService()注册服务\npublic void start(BundleContext context) {\ncontext.registerService(UserRegister.class.getName(), new UserRegisterImpl(), null);\n}\n//无须在stop()中注销服务，因为Bundle停止时会自动注销该Bundle中已注册的服务\npublic void stop(BundleContext context) {}\n}\n// 检索服务\npublic class Client implements BundleActivator {\npublic void start(BundleContext context) {\n// 1. 从服务注册表中检索间接的“服务引用”\nServiceReference ref = context.getServiceReference(UserRegister.class.getName());\n// 2. 使用“服务引用”去访问服务对象的实例\n((UserRegister) context.getService(ref)).register();\n}\npublic void stop(BundleContext context) {}\n}\n</code></pre><p>注意：这里的服务注册不是插件管理功能中的插件注册，实际上是插件间通信的机制。</p><h2>规则引擎架构简析</h2><p>规则引擎从结构上来看也属于微内核架构的一种具体实现，其中执行引擎可以看作是微内核，执行引擎解析配置好的业务流，执行其中的条件和规则，通过这种方式来支持业务的灵活多变。</p><p>规则引擎在计费、保险、促销等业务领域应用较多。例如电商促销，常见的促销规则有：</p><ul>\n<li>\n<p>满100送50</p>\n</li>\n<li>\n<p>3件立减50</p>\n</li>\n<li>\n<p>3件8折</p>\n</li>\n<li>\n<p>第3件免费</p>\n</li>\n<li>\n<p>跨店满200减100</p>\n</li>\n<li>\n<p>新用户立减50</p>\n</li>\n<li>\n<p>……</p>\n</li>\n</ul><p>以上仅仅列出来常见的几种，实际上完整列下来可能有几十上百种，再加上排列组合，促销方案可能有几百上千种，这样的业务如果完全靠代码来实现，开发效率远远跟不上业务的变化速度，而规则引擎却能够很灵活的应对这种需求，主要原因在于：</p><p>1.可扩展</p><p>通过引入规则引擎，业务逻辑实现与业务系统分离，可以在不改动业务系统的情况下扩展新的业务功能。</p><p>2.易理解</p><p>规则通过自然语言描述，业务人员易于理解和操作，而不像代码那样只有程序员才能理解和开发。</p><p>3.高效率</p><p>规则引擎系统一般提供可视化的规则定制、审批、查询及管理，方便业务人员快速配置新的业务。</p><p>规则引擎的基本架构如下：<br>\n<img src=\"https://static001.geekbang.org/resource/image/af/85/af1b4d572adaede2e45898f794621785.jpg?wh=1799*1058\" alt=\"\"></p><p>我来简单介绍一下：</p><ul>\n<li>\n<p>开发人员将业务功能分解提炼为多个规则，将规则保存在规则库中。</p>\n</li>\n<li>\n<p>业务人员根据业务需要，通过将规则排列组合，配置成业务流程，保存在业务库中。</p>\n</li>\n<li>\n<p>规则引擎执行业务流程实现业务功能。</p>\n</li>\n</ul><p>对照微内核架构的设计关键点，我们来看看规则引擎是具体是如何实现的。</p><p>1.插件管理</p><p>规则引擎中的规则就是微内核架构的插件，引擎就是微内核架构的内核。规则可以被引擎加载和执行。规则引擎架构中，规则一般保存在规则库中，通常使用数据库来存储。</p><p>2.插件连接</p><p>类似于程序员开发的时候需要采用Java、C++等语言，规则引擎也规定了规则开发的语言，业务人员需要基于规则语言来编写规则文件，然后由规则引擎加载执行规则文件来完成业务功能，因此，规则引擎的插件连接实现机制其实就是规则语言。</p><p>3.插件通信</p><p>规则引擎的规则之间进行通信的方式就是数据流和事件流，由于单个规则并不需要依赖其他规则，因此规则之间没有主动的通信，规则只需要输出数据或者事件，由引擎将数据或者事件传递到下一个规则。</p><p>目前最常用的规则引擎是开源的JBoss Drools，采用Java语言编写，基于Rete算法（参考<a href=\"https://en.wikipedia.org/wiki/Rete_algorithm\">https://en.wikipedia.org/wiki/Rete_algorithm</a>）。Drools具有下面这些优点：</p><ul>\n<li>\n<p>非常活跃的社区支持，以及广泛的应用。</p>\n</li>\n<li>\n<p>快速的执行速度。</p>\n</li>\n<li>\n<p>与Java Rule Engine API（JSR-94）兼容。</p>\n</li>\n<li>\n<p>提供了基于Web的BRMS——Guvnor，Guvnor提供了规则管理的知识库，通过它可以实现规则的版本控制，以及规则的在线修改与编译，使得开发人员和系统管理人员可以在线管理业务规则。</p>\n</li>\n</ul><p>虽然Drools号称简单易用，但实际上其规则语言还是和编程语言比较类似，在实际应用的时候普通业务人员面对这样的规则语言，学习成本和理解成本还是比较高的，例如下面这个样例（<a href=\"https://blog.csdn.net/ouyangshixiong/article/details/46315273\">https://blog.csdn.net/ouyangshixiong/article/details/46315273</a>）：</p><p><img src=\"https://static001.geekbang.org/resource/image/a4/17/a427ff38e436e3acb0d24ca64cb07017.png?wh=1668*950\" alt=\"\"></p><p>因此，通常情况下需要基于Drools进行封装，将规则配置做成可视化的操作，例如下面电商反欺诈的一个示例（<a href=\"https://cloud.tencent.com/developer/article/1031839\">https://cloud.tencent.com/developer/article/1031839</a>）：</p><p><img src=\"https://static001.geekbang.org/resource/image/94/4a/9443d6f67ed4c58dfd68b5c7aba1eb4a.jpeg?wh=916*376\" alt=\"\"></p><h2>小结</h2><p>今天我为你讲了微内核架构设计的关键点以及常见的两种微内核具体实现：OSGi和规则引擎，希望对你有所帮助。</p><p>这就是今天的全部内容，留一道思考题给你吧，结合今天所学内容，尝试分析一下手淘Atlas容器化框架是如何实现微内核架构的设计关键点的，分享一下你的理解。</p><p>欢迎你把答案写到留言区，和我一起讨论。相信经过深度思考的回答，也会让你对知识的理解更加深刻。（编辑乱入：精彩的留言有机会获得丰厚福利哦！）</p>","neighbors":{"left":{"article_title":"36 | 微服务架构最佳实践 - 基础设施篇","id":11300},"right":{"article_title":"38 | 架构师应该如何判断技术演进的方向？","id":11760}},"comments":[{"had_liked":false,"id":17987,"user_name":"性能","can_delete":false,"product_type":"c1","uid":1137192,"ip_address":"","ucode":"BBFA2A31B02B8F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIyhbzdkFM64HvRATbWjc3hkic7icUszl9hU9hpIMZcibKH4wWam4SHfkcvM7MUoKjGDRrvYGXuvR91Q/132","comment_is_top":false,"comment_ctime":1533083517,"is_pvip":false,"replies":[{"id":6248,"content":"惊不惊喜，意不意外，醍醐灌顶😄","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1533087159,"ip_address":"","comment_id":17987,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"突然发现我们用了很久的框架，是微内核架构","like_count":41},{"had_liked":false,"id":118194,"user_name":"Boh","can_delete":false,"product_type":"c1","uid":1172201,"ip_address":"","ucode":"0CF4CAC992FB4B","user_header":"https://static001.geekbang.org/account/avatar/00/11/e2/e9/d309c895.jpg","comment_is_top":false,"comment_ctime":1564286696,"is_pvip":false,"replies":[{"id":43894,"content":"调用方自己管理各自的配置，不要由规则引擎来管理","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1564653346,"ip_address":"","comment_id":118194,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"请教老师一个问题，我们目前使用的规则引擎就是这种架构，不过目前存在一个比较头疼的问题，就是对内开放了一个引擎调用接口，可是由于规则非常多，所以接口的请求参数和响应参数是动态的，所以接口调用传参比较头疼。目前我们的做法是将规则根据业务整合成起来，然后将每个业务的输入参数输出参数写入配置表，调用方先根据业务类型读取配置表查询输入输出参数的定义和类型，然后调用方自己生成这份数据调用接口，这样导致接入很不友好同时每次变动改动的地方非常多，而且配置表也越来越臃肿，请问老师这种情况有什么比较好的方案吗","like_count":15,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421351,"discussion_content":"惊不惊喜，意不意外，醍醐灌顶😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533087159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83056,"user_name":"xiao皮孩。。","can_delete":false,"product_type":"c1","uid":1367499,"ip_address":"","ucode":"27AE899819D10F","user_header":"https://static001.geekbang.org/account/avatar/00/14/dd/cb/23b114a7.jpg","comment_is_top":false,"comment_ctime":1554385119,"is_pvip":false,"replies":[{"id":30102,"content":"业务需要，不是我情有独钟😂","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1554536132,"ip_address":"","comment_id":83056,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"作者对规则引擎情有独钟啊","like_count":14,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460295,"discussion_content":"调用方自己管理各自的配置，不要由规则引擎来管理","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564653346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590610,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/B9vSOjMc2a86kYA8R5yDkVdFiaj2JeBZ1PuI9oUKhbnvuZwuibdUam6FTcGzDaiaFdk2GWJveUGhfCVpv4KaOdicoQ/132","nickname":"帝江","note":"","ucode":"93CBA4E4D05DA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":651925,"discussion_content":"典型的基础设施掺和业务。越往后肯定越麻烦。让你那个接口只有传递数据的功能就行了，至于传递的是什么，不要让他掺和，因为这是业务的事情","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1727766250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16810,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1532229426,"is_pvip":false,"replies":[{"id":5836,"content":"纯代码实现可以用策略模式，但每次新来一种促销都要写代码，虽然代码写的少，但还是要测试部署","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1532255002,"ip_address":"","comment_id":16810,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"1 规则引擎，我简单的理解为开发人员把规则提前写到数据库，这个是基础数据，然后用户选择规则，具体选择了那些规则可以通过外键关联。\n2 那么多规则，就比如促销的例子，用策略模式实现是否更妥当？","like_count":13,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445838,"discussion_content":"业务需要，不是我情有独钟😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554536132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16882,"user_name":"醉爱星巴克","can_delete":false,"product_type":"c1","uid":1099386,"ip_address":"","ucode":"3D318677A45F12","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/7a/3c95e843.jpg","comment_is_top":false,"comment_ctime":1532273723,"is_pvip":false,"replies":[{"id":5939,"content":"流程引擎应该是粗粒度的规则引擎","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1532425107,"ip_address":"","comment_id":16882,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"想问问流程引擎算不算规则引擎的一种呢？","like_count":12,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420936,"discussion_content":"纯代码实现可以用策略模式，但每次新来一种促销都要写代码，虽然代码写的少，但还是要测试部署","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532255002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28492,"user_name":"奋斗心","can_delete":false,"product_type":"c1","uid":1247286,"ip_address":"","ucode":"06A195AB0B6570","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/36/98be3d69.jpg","comment_is_top":false,"comment_ctime":1538096821,"is_pvip":false,"replies":[{"id":10259,"content":"你可以理解为道理是相通的，但不要这么等同，规则引擎是面向功能的一个架构设计模式，策略模式是一个面向对象的类设计模式","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1538103781,"ip_address":"","comment_id":28492,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"那能不能说规则引擎用了策略模式","like_count":9,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425283,"discussion_content":"你可以理解为道理是相通的，但不要这么等同，规则引擎是面向功能的一个架构设计模式，策略模式是一个面向对象的类设计模式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1538103781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24250,"user_name":"无聊夫斯基","can_delete":false,"product_type":"c1","uid":1194071,"ip_address":"","ucode":"F7BC3346FFF5EC","user_header":"https://static001.geekbang.org/account/avatar/00/12/38/57/a9f9705a.jpg","comment_is_top":false,"comment_ctime":1536882793,"is_pvip":false,"replies":[{"id":8876,"content":"银行，保险，电商用的比较多","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1536885941,"ip_address":"","comment_id":24250,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"微内核我还真没接触过，又get到灵活的方案\n","like_count":9,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423895,"discussion_content":"银行，保险，电商用的比较多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536885941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132448,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/a0/f12115b7.jpg","nickname":"Sam.张朝","note":"","ucode":"FB20554D94B250","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22996,"discussion_content":"也是部分微内核，不是全部微内核吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569737392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292953,"user_name":"Geek_b6e6bc","can_delete":false,"product_type":"c1","uid":2559741,"ip_address":"","ucode":"0F09EFE0BF48BD","user_header":"","comment_is_top":false,"comment_ctime":1621092898,"is_pvip":false,"replies":[{"id":106097,"content":"MySQL不能算微内核，MySQL只是存储引擎做成了插件，微内核的内核一定要“微”，只负责插件管理和插件通信等基础功能，而MySQL的server层是核心功能，包括SQL引擎、查询优化、binlog等","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1621211476,"ip_address":"","comment_id":292953,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"你好 老师。读了这节感觉收益很多，尤其是加深对spring的认识，有点体会，想到了其他的 mysql是不是也是个微内核架构 server层是公用核心部分，存储引擎层属于插件，可以替换， 还有dubbo框架也算是个微内核架构","like_count":6,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520025,"discussion_content":"MySQL不能算微内核，MySQL只是存储引擎做成了插件，微内核的内核一定要“微”，只负责插件管理和插件通信等基础功能，而MySQL的server层是核心功能，包括SQL引擎、查询优化、binlog等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621211476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88670,"user_name":"飘宝","can_delete":false,"product_type":"c1","uid":1100310,"ip_address":"","ucode":"6D7718F26D7852","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/16/a7ed6dca.jpg","comment_is_top":false,"comment_ctime":1555981086,"is_pvip":false,"replies":[{"id":33318,"content":"谢谢，加油😊","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1557459526,"ip_address":"","comment_id":88670,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"李老师，我已经找到了基于产品这种说法的基本出处了，是在Mark Richards的软件架构模式中描述的。其中也对比了几种常见的架构，写的还是很实用的。\n我也买了您的从零开始学架构的书，是一本非常适合反复翻阅的书。","like_count":6,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447860,"discussion_content":"谢谢，加油😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557459526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17144,"user_name":"汉斯·冯·拉特","can_delete":false,"product_type":"c1","uid":1102385,"ip_address":"","ucode":"29F14B0D938A02","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/31/f1bec7fc.jpg","comment_is_top":false,"comment_ctime":1532453604,"is_pvip":false,"replies":[{"id":6014,"content":"你可以对照Drools的文档写个促销的方案","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1532577840,"ip_address":"","comment_id":17144,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"老师，能不能写个基于微内核的代码例子在github上，之前也听过微内核，但是到目前为止，接触到的都是分层结构的架构","like_count":5,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421056,"discussion_content":"你可以对照Drools的文档写个促销的方案","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532577840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17987,"user_name":"性能","can_delete":false,"product_type":"c1","uid":1137192,"ip_address":"","ucode":"BBFA2A31B02B8F","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIyhbzdkFM64HvRATbWjc3hkic7icUszl9hU9hpIMZcibKH4wWam4SHfkcvM7MUoKjGDRrvYGXuvR91Q/132","comment_is_top":false,"comment_ctime":1533083517,"is_pvip":false,"replies":[{"id":6248,"content":"惊不惊喜，意不意外，醍醐灌顶😄","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1533087159,"ip_address":"","comment_id":17987,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"突然发现我们用了很久的框架，是微内核架构","like_count":41,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421351,"discussion_content":"惊不惊喜，意不意外，醍醐灌顶😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1533087159,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":118194,"user_name":"Boh","can_delete":false,"product_type":"c1","uid":1172201,"ip_address":"","ucode":"0CF4CAC992FB4B","user_header":"https://static001.geekbang.org/account/avatar/00/11/e2/e9/d309c895.jpg","comment_is_top":false,"comment_ctime":1564286696,"is_pvip":false,"replies":[{"id":43894,"content":"调用方自己管理各自的配置，不要由规则引擎来管理","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1564653346,"ip_address":"","comment_id":118194,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"请教老师一个问题，我们目前使用的规则引擎就是这种架构，不过目前存在一个比较头疼的问题，就是对内开放了一个引擎调用接口，可是由于规则非常多，所以接口的请求参数和响应参数是动态的，所以接口调用传参比较头疼。目前我们的做法是将规则根据业务整合成起来，然后将每个业务的输入参数输出参数写入配置表，调用方先根据业务类型读取配置表查询输入输出参数的定义和类型，然后调用方自己生成这份数据调用接口，这样导致接入很不友好同时每次变动改动的地方非常多，而且配置表也越来越臃肿，请问老师这种情况有什么比较好的方案吗","like_count":15,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460295,"discussion_content":"调用方自己管理各自的配置，不要由规则引擎来管理","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564653346,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1590610,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/B9vSOjMc2a86kYA8R5yDkVdFiaj2JeBZ1PuI9oUKhbnvuZwuibdUam6FTcGzDaiaFdk2GWJveUGhfCVpv4KaOdicoQ/132","nickname":"帝江","note":"","ucode":"93CBA4E4D05DA5","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":651925,"discussion_content":"典型的基础设施掺和业务。越往后肯定越麻烦。让你那个接口只有传递数据的功能就行了，至于传递的是什么，不要让他掺和，因为这是业务的事情","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1727766250,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":83056,"user_name":"xiao皮孩。。","can_delete":false,"product_type":"c1","uid":1367499,"ip_address":"","ucode":"27AE899819D10F","user_header":"https://static001.geekbang.org/account/avatar/00/14/dd/cb/23b114a7.jpg","comment_is_top":false,"comment_ctime":1554385119,"is_pvip":false,"replies":[{"id":30102,"content":"业务需要，不是我情有独钟😂","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1554536132,"ip_address":"","comment_id":83056,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"作者对规则引擎情有独钟啊","like_count":14,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445838,"discussion_content":"业务需要，不是我情有独钟😂","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554536132,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16810,"user_name":"小喵喵","can_delete":false,"product_type":"c1","uid":1062444,"ip_address":"","ucode":"FDBBB2A59DB8B6","user_header":"https://static001.geekbang.org/account/avatar/00/10/36/2c/8bd4be3a.jpg","comment_is_top":false,"comment_ctime":1532229426,"is_pvip":false,"replies":[{"id":5836,"content":"纯代码实现可以用策略模式，但每次新来一种促销都要写代码，虽然代码写的少，但还是要测试部署","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1532255002,"ip_address":"","comment_id":16810,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"1 规则引擎，我简单的理解为开发人员把规则提前写到数据库，这个是基础数据，然后用户选择规则，具体选择了那些规则可以通过外键关联。\n2 那么多规则，就比如促销的例子，用策略模式实现是否更妥当？","like_count":13,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420936,"discussion_content":"纯代码实现可以用策略模式，但每次新来一种促销都要写代码，虽然代码写的少，但还是要测试部署","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532255002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16882,"user_name":"醉爱星巴克","can_delete":false,"product_type":"c1","uid":1099386,"ip_address":"","ucode":"3D318677A45F12","user_header":"https://static001.geekbang.org/account/avatar/00/10/c6/7a/3c95e843.jpg","comment_is_top":false,"comment_ctime":1532273723,"is_pvip":false,"replies":[{"id":5939,"content":"流程引擎应该是粗粒度的规则引擎","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1532425107,"ip_address":"","comment_id":16882,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"想问问流程引擎算不算规则引擎的一种呢？","like_count":12,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420955,"discussion_content":"流程引擎应该是粗粒度的规则引擎","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532425107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","nickname":"KW💤","note":"","ucode":"290DD7016F4EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405288,"discussion_content":"一般的业务系统，流程环节都是穷举的，只是支持自定义流程而已，除非你的流程引擎做的很通用，是支持流程环节热插拔的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634549375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":28492,"user_name":"奋斗心","can_delete":false,"product_type":"c1","uid":1247286,"ip_address":"","ucode":"06A195AB0B6570","user_header":"https://static001.geekbang.org/account/avatar/00/13/08/36/98be3d69.jpg","comment_is_top":false,"comment_ctime":1538096821,"is_pvip":false,"replies":[{"id":10259,"content":"你可以理解为道理是相通的，但不要这么等同，规则引擎是面向功能的一个架构设计模式，策略模式是一个面向对象的类设计模式","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1538103781,"ip_address":"","comment_id":28492,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"那能不能说规则引擎用了策略模式","like_count":9,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420955,"discussion_content":"流程引擎应该是粗粒度的规则引擎","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532425107,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1109389,"avatar":"https://static001.geekbang.org/account/avatar/00/10/ed/8d/377c106a.jpg","nickname":"KW💤","note":"","ucode":"290DD7016F4EE0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":405288,"discussion_content":"一般的业务系统，流程环节都是穷举的，只是支持自定义流程而已，除非你的流程引擎做的很通用，是支持流程环节热插拔的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1634549375,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24250,"user_name":"无聊夫斯基","can_delete":false,"product_type":"c1","uid":1194071,"ip_address":"","ucode":"F7BC3346FFF5EC","user_header":"https://static001.geekbang.org/account/avatar/00/12/38/57/a9f9705a.jpg","comment_is_top":false,"comment_ctime":1536882793,"is_pvip":false,"replies":[{"id":8876,"content":"银行，保险，电商用的比较多","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1536885941,"ip_address":"","comment_id":24250,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"微内核我还真没接触过，又get到灵活的方案\n","like_count":9,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":425283,"discussion_content":"你可以理解为道理是相通的，但不要这么等同，规则引擎是面向功能的一个架构设计模式，策略模式是一个面向对象的类设计模式","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1538103781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":292953,"user_name":"Geek_b6e6bc","can_delete":false,"product_type":"c1","uid":2559741,"ip_address":"","ucode":"0F09EFE0BF48BD","user_header":"","comment_is_top":false,"comment_ctime":1621092898,"is_pvip":false,"replies":[{"id":106097,"content":"MySQL不能算微内核，MySQL只是存储引擎做成了插件，微内核的内核一定要“微”，只负责插件管理和插件通信等基础功能，而MySQL的server层是核心功能，包括SQL引擎、查询优化、binlog等","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1621211476,"ip_address":"","comment_id":292953,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"你好 老师。读了这节感觉收益很多，尤其是加深对spring的认识，有点体会，想到了其他的 mysql是不是也是个微内核架构 server层是公用核心部分，存储引擎层属于插件，可以替换， 还有dubbo框架也算是个微内核架构","like_count":6,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423895,"discussion_content":"银行，保险，电商用的比较多","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536885941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1132448,"avatar":"https://static001.geekbang.org/account/avatar/00/11/47/a0/f12115b7.jpg","nickname":"Sam.张朝","note":"","ucode":"FB20554D94B250","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22996,"discussion_content":"也是部分微内核，不是全部微内核吧","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569737392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":88670,"user_name":"飘宝","can_delete":false,"product_type":"c1","uid":1100310,"ip_address":"","ucode":"6D7718F26D7852","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/16/a7ed6dca.jpg","comment_is_top":false,"comment_ctime":1555981086,"is_pvip":false,"replies":[{"id":33318,"content":"谢谢，加油😊","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1557459526,"ip_address":"","comment_id":88670,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"李老师，我已经找到了基于产品这种说法的基本出处了，是在Mark Richards的软件架构模式中描述的。其中也对比了几种常见的架构，写的还是很实用的。\n我也买了您的从零开始学架构的书，是一本非常适合反复翻阅的书。","like_count":6,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520025,"discussion_content":"MySQL不能算微内核，MySQL只是存储引擎做成了插件，微内核的内核一定要“微”，只负责插件管理和插件通信等基础功能，而MySQL的server层是核心功能，包括SQL引擎、查询优化、binlog等","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621211476,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17144,"user_name":"汉斯·冯·拉特","can_delete":false,"product_type":"c1","uid":1102385,"ip_address":"","ucode":"29F14B0D938A02","user_header":"https://static001.geekbang.org/account/avatar/00/10/d2/31/f1bec7fc.jpg","comment_is_top":false,"comment_ctime":1532453604,"is_pvip":false,"replies":[{"id":6014,"content":"你可以对照Drools的文档写个促销的方案","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1532577840,"ip_address":"","comment_id":17144,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100006601,"comment_content":"老师，能不能写个基于微内核的代码例子在github上，之前也听过微内核，但是到目前为止，接触到的都是分层结构的架构","like_count":5,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447860,"discussion_content":"谢谢，加油😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557459526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16929,"user_name":"Snway","can_delete":false,"product_type":"c1","uid":1102888,"ip_address":"","ucode":"0AD31AECA8A8F7","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/28/3b6546e8.jpg","comment_is_top":false,"comment_ctime":1532309638,"is_pvip":false,"replies":[{"id":5937,"content":"我去学习esper😄","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1532424972,"ip_address":"","comment_id":16929,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"采用过esper实现复杂事件流处理引擎，看完此文，对原有架构设计有更深层次理解，感谢华仔","like_count":3},{"had_liked":false,"id":113806,"user_name":"刘工的一号马由","can_delete":false,"product_type":"c1","uid":1024110,"ip_address":"","ucode":"92C4D4186DDFB9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/6e/85512d27.jpg","comment_is_top":false,"comment_ctime":1563159255,"is_pvip":false,"replies":[{"id":41832,"content":"形式也不同，微内核是一个应用，微服务是多个应用","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1563356216,"ip_address":"","comment_id":113806,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"微内核架构和微服务架构区别就在于粒度吗？","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420973,"discussion_content":"我去学习esper😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532424972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288362,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1618438801,"is_pvip":false,"replies":[{"id":104717,"content":"基本都是，因为流程的定制性很强","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1618536487,"ip_address":"","comment_id":288362,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"是不是控制流程的框架类功能都是微内核架构，比如测试框架，junit等","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458393,"discussion_content":"形式也不同，微内核是一个应用，微服务是多个应用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563356216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284146,"user_name":"拉羒尔","can_delete":false,"product_type":"c1","uid":1107286,"ip_address":"","ucode":"6A1C9F8BBB1286","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIeYicSzsPcAWWxTq6LPwicvNg1DIzPjAo0nQDtqMMDRV8Nmm2Is5TiaEHSCZKeEDLBZ78uEViaKiccVFA/132","comment_is_top":false,"comment_ctime":1616078376,"is_pvip":false,"replies":[{"id":103088,"content":"很多流程管理系统、调度系统、监控系统都可以用微内核实现的。","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1616115172,"ip_address":"","comment_id":284146,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"有点像我们的调度系统","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518602,"discussion_content":"基本都是，因为流程的定制性很强","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618536487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154909,"user_name":"jason","can_delete":false,"product_type":"c1","uid":1010644,"ip_address":"","ucode":"7E26C23BAAB474","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/d4/86b09190.jpg","comment_is_top":false,"comment_ctime":1574595479,"is_pvip":false,"replies":[{"id":59849,"content":"可能是你们的规则抽象太细，基本等同于代码块了，所以觉得比较难用，不过确实规则引擎里面各种if和when也是比较复杂的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1574761380,"ip_address":"","comment_id":154909,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"尝试了一下用规则引擎实现各种活动的业务逻辑，感觉很复杂，比如首先第一步你需要通过运营配置的原子规则构造规则模板，这一步少不了代码中写ifelse或者模板中写when then ,第2步需要把业务逻辑封装成各种规则规则，第3步组装规则为新业务，感觉还不如策略模式好维护和效率高，唯一的优点貌似只是动态化，并且这种规则运营会不会使用","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517251,"discussion_content":"很多流程管理系统、调度系统、监控系统都可以用微内核实现的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616115172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87980,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1555776685,"is_pvip":true,"replies":[{"id":33322,"content":"谢谢✌✌😊","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1557459700,"ip_address":"","comment_id":87980,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"在实际场景中遇到的微内核架构基本没有，读了老师这篇文章，有了一个形象的了解，期待能在后续多接触接触微内核这块的架构，老师的文章干货满满！！","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447672,"discussion_content":"谢谢✌✌😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557459700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37888,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1053498,"ip_address":"","ucode":"59752A51A382A6","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/3a/b0454322.jpg","comment_is_top":false,"comment_ctime":1541767898,"is_pvip":false,"replies":[{"id":13738,"content":"CQRS架构算很粗粒度的面向流程的拆分，也可以用来设计高性能的架构","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1542006670,"ip_address":"","comment_id":37888,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"老师 我想问问 事件驱动型 比如 CQRS 是属于那种架构，我个人理解 是 面向流程的？","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":447672,"discussion_content":"谢谢✌✌😊","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1557459700,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24274,"user_name":"cn","can_delete":false,"product_type":"c1","uid":1216011,"ip_address":"","ucode":"0A6DCBC2B09819","user_header":"https://static001.geekbang.org/account/avatar/00/12/8e/0b/89055f4c.jpg","comment_is_top":false,"comment_ctime":1536888700,"is_pvip":false,"replies":[{"id":8900,"content":"有商用的解决方案，也有开源系统","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1536899616,"ip_address":"","comment_id":24274,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"我们现在的数据平台是通过节点连接来表示数据处理和流转，是否也适合用微内核来实现底层引擎。请教下阿里这种数据流引擎是怎么实现的。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423908,"discussion_content":"有商用的解决方案，也有开源系统","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536899616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16988,"user_name":"小鱼儿","can_delete":false,"product_type":"c1","uid":1053492,"ip_address":"","ucode":"989EC453936B91","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/34/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1532353275,"is_pvip":false,"replies":[{"id":5931,"content":"抱歉，对.net不熟😄","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1532424526,"ip_address":"","comment_id":16988,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"以前做电子合同时有涉及到规则引擎，计算很快，不知道.net有没有类似于Drools的框架？","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":423908,"discussion_content":"有商用的解决方案，也有开源系统","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1536899616,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394702,"user_name":"帝江","can_delete":false,"product_type":"c1","uid":1590610,"ip_address":"北京","ucode":"93CBA4E4D05DA5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/B9vSOjMc2a86kYA8R5yDkVdFiaj2JeBZ1PuI9oUKhbnvuZwuibdUam6FTcGzDaiaFdk2GWJveUGhfCVpv4KaOdicoQ/132","comment_is_top":false,"comment_ctime":1727766474,"is_pvip":false,"replies":[{"id":143412,"content":"谈不上微内核吧，因为你的流程是特定的业务流程，这个最多是类似设计模式的模板方法实现的框架","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1729041080,"ip_address":"广东","comment_id":394702,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"以前实现过一个预擎系统，跟据规则采集数据然后报警，我把规则提出来了，核心代码体现流程，具体流程中各种加载。这算什么架构呢？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":652475,"discussion_content":"谈不上微内核吧，因为你的流程是特定的业务流程，这个最多是类似设计模式的模板方法实现的框架","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1729041080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2,\"source\":0}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16929,"user_name":"Snway","can_delete":false,"product_type":"c1","uid":1102888,"ip_address":"","ucode":"0AD31AECA8A8F7","user_header":"https://static001.geekbang.org/account/avatar/00/10/d4/28/3b6546e8.jpg","comment_is_top":false,"comment_ctime":1532309638,"is_pvip":false,"replies":[{"id":5937,"content":"我去学习esper😄","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1532424972,"ip_address":"","comment_id":16929,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"采用过esper实现复杂事件流处理引擎，看完此文，对原有架构设计有更深层次理解，感谢华仔","like_count":3,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420973,"discussion_content":"我去学习esper😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532424972,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":113806,"user_name":"刘工的一号马由","can_delete":false,"product_type":"c1","uid":1024110,"ip_address":"","ucode":"92C4D4186DDFB9","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a0/6e/85512d27.jpg","comment_is_top":false,"comment_ctime":1563159255,"is_pvip":false,"replies":[{"id":41832,"content":"形式也不同，微内核是一个应用，微服务是多个应用","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1563356216,"ip_address":"","comment_id":113806,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"微内核架构和微服务架构区别就在于粒度吗？","like_count":2,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":458393,"discussion_content":"形式也不同，微内核是一个应用，微服务是多个应用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563356216,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288362,"user_name":"梦倚栏杆","can_delete":false,"product_type":"c1","uid":1095857,"ip_address":"","ucode":"BDEB97F2822445","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/bvj76PmeUvW8kokyu91IZWuRATKmabibDWbzAj2TajeEic7WvKCJOLaOh6jibEmdQ36EO3sBUZ0HibAiapsrZo64U8w/132","comment_is_top":false,"comment_ctime":1618438801,"is_pvip":false,"replies":[{"id":104717,"content":"基本都是，因为流程的定制性很强","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1618536487,"ip_address":"","comment_id":288362,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"是不是控制流程的框架类功能都是微内核架构，比如测试框架，junit等","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518602,"discussion_content":"基本都是，因为流程的定制性很强","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618536487,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284146,"user_name":"拉羒尔","can_delete":false,"product_type":"c1","uid":1107286,"ip_address":"","ucode":"6A1C9F8BBB1286","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTIeYicSzsPcAWWxTq6LPwicvNg1DIzPjAo0nQDtqMMDRV8Nmm2Is5TiaEHSCZKeEDLBZ78uEViaKiccVFA/132","comment_is_top":false,"comment_ctime":1616078376,"is_pvip":false,"replies":[{"id":103088,"content":"很多流程管理系统、调度系统、监控系统都可以用微内核实现的。","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1616115172,"ip_address":"","comment_id":284146,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"有点像我们的调度系统","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517251,"discussion_content":"很多流程管理系统、调度系统、监控系统都可以用微内核实现的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616115172,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":154909,"user_name":"jason","can_delete":false,"product_type":"c1","uid":1010644,"ip_address":"","ucode":"7E26C23BAAB474","user_header":"https://static001.geekbang.org/account/avatar/00/0f/6b/d4/86b09190.jpg","comment_is_top":false,"comment_ctime":1574595479,"is_pvip":false,"replies":[{"id":59849,"content":"可能是你们的规则抽象太细，基本等同于代码块了，所以觉得比较难用，不过确实规则引擎里面各种if和when也是比较复杂的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1574761380,"ip_address":"","comment_id":154909,"utype":1}],"discussion_count":2,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"尝试了一下用规则引擎实现各种活动的业务逻辑，感觉很复杂，比如首先第一步你需要通过运营配置的原子规则构造规则模板，这一步少不了代码中写ifelse或者模板中写when then ,第2步需要把业务逻辑封装成各种规则规则，第3步组装规则为新业务，感觉还不如策略模式好维护和效率高，唯一的优点貌似只是动态化，并且这种规则运营会不会使用","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475612,"discussion_content":"可能是你们的规则抽象太细，基本等同于代码块了，所以觉得比较难用，不过确实规则引擎里面各种if和when也是比较复杂的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574761380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2423702,"avatar":"https://static001.geekbang.org/account/avatar/00/24/fb/96/8d9c7a7b.jpg","nickname":"helloworld2021","note":"","ucode":"439991CA282C57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345131,"discussion_content":"规则引擎我觉得已经块要被业界抛弃了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611662636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":87980,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1555776685,"is_pvip":true,"replies":[{"id":33322,"content":"谢谢✌✌😊","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1557459700,"ip_address":"","comment_id":87980,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"在实际场景中遇到的微内核架构基本没有，读了老师这篇文章，有了一个形象的了解，期待能在后续多接触接触微内核这块的架构，老师的文章干货满满！！","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475612,"discussion_content":"可能是你们的规则抽象太细，基本等同于代码块了，所以觉得比较难用，不过确实规则引擎里面各种if和when也是比较复杂的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574761380,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2423702,"avatar":"https://static001.geekbang.org/account/avatar/00/24/fb/96/8d9c7a7b.jpg","nickname":"helloworld2021","note":"","ucode":"439991CA282C57","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":345131,"discussion_content":"规则引擎我觉得已经块要被业界抛弃了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611662636,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":37888,"user_name":"Eric","can_delete":false,"product_type":"c1","uid":1053498,"ip_address":"","ucode":"59752A51A382A6","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/3a/b0454322.jpg","comment_is_top":false,"comment_ctime":1541767898,"is_pvip":false,"replies":[{"id":13738,"content":"CQRS架构算很粗粒度的面向流程的拆分，也可以用来设计高性能的架构","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1542006670,"ip_address":"","comment_id":37888,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"老师 我想问问 事件驱动型 比如 CQRS 是属于那种架构，我个人理解 是 面向流程的？","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428512,"discussion_content":"CQRS架构算很粗粒度的面向流程的拆分，也可以用来设计高性能的架构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542006670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":24274,"user_name":"cn","can_delete":false,"product_type":"c1","uid":1216011,"ip_address":"","ucode":"0A6DCBC2B09819","user_header":"https://static001.geekbang.org/account/avatar/00/12/8e/0b/89055f4c.jpg","comment_is_top":false,"comment_ctime":1536888700,"is_pvip":false,"replies":[{"id":8900,"content":"有商用的解决方案，也有开源系统","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1536899616,"ip_address":"","comment_id":24274,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"我们现在的数据平台是通过节点连接来表示数据处理和流转，是否也适合用微内核来实现底层引擎。请教下阿里这种数据流引擎是怎么实现的。","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":428512,"discussion_content":"CQRS架构算很粗粒度的面向流程的拆分，也可以用来设计高性能的架构","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1542006670,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":16988,"user_name":"小鱼儿","can_delete":false,"product_type":"c1","uid":1053492,"ip_address":"","ucode":"989EC453936B91","user_header":"https://static001.geekbang.org/account/avatar/00/10/13/34/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1532353275,"is_pvip":false,"replies":[{"id":5931,"content":"抱歉，对.net不熟😄","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1532424526,"ip_address":"","comment_id":16988,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"以前做电子合同时有涉及到规则引擎，计算很快，不知道.net有没有类似于Drools的框架？","like_count":1,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420998,"discussion_content":"抱歉，对.net不熟😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532424526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":394702,"user_name":"帝江","can_delete":false,"product_type":"c1","uid":1590610,"ip_address":"北京","ucode":"93CBA4E4D05DA5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/B9vSOjMc2a86kYA8R5yDkVdFiaj2JeBZ1PuI9oUKhbnvuZwuibdUam6FTcGzDaiaFdk2GWJveUGhfCVpv4KaOdicoQ/132","comment_is_top":false,"comment_ctime":1727766474,"is_pvip":false,"replies":[{"id":143412,"content":"谈不上微内核吧，因为你的流程是特定的业务流程，这个最多是类似设计模式的模板方法实现的框架","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1729041080,"ip_address":"广东","comment_id":394702,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100006601,"comment_content":"以前实现过一个预擎系统，跟据规则采集数据然后报警，我把规则提出来了，核心代码体现流程，具体流程中各种加载。这算什么架构呢？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":420998,"discussion_content":"抱歉，对.net不熟😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1532424526,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383040,"user_name":"陈峰","can_delete":false,"product_type":"c1","uid":3721548,"ip_address":"江苏","ucode":"11F92938308C6C","user_header":"","comment_is_top":false,"comment_ctime":1698341826,"is_pvip":false,"replies":[{"id":139520,"content":"1. bundle和bean还不一样，bundle是独立打包的，bean只是逻辑上的一个概念；\n2. 和第一个问题类似，你可以说它们的机制看起来类似，但实际上还是有本质区别的，bundle你可以理解为和一个容器类似\n3. 一般不会这么做，拆的太细了，没有带来什么好处但是大大增加了复杂度；\n4. 规则引擎会执行你定义的规则集里面的各条规则","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1698376902,"ip_address":"广东","comment_id":383040,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"老师，微内核有几个疑问。\n\n1. OSGi中bundle是不是和spring中的bean很像，前面也提到了 Spring的依赖注入也是插件连接的一种。那么，是不是，如果Spring中 我的Component提供一个具体的功能(比如，短信注册)，然后 通过依赖注入相互调用，本质上就是一种微内核架构呢？\n\n2. 感觉文中，依赖注入 写的是 插件连接的方式，好像对比后文不太准确？\n\n读完OSGi的介绍后，我感觉 如果把Component视为插件 Spring对Bean的管理(扫描和注册)是插件管理，Bean的生命周期 是插件连接，Bean相互依赖注入并调用，是插件通信。我不知道我理解的是否有问题？\n\n3. 我们之前讲到，微内核是面相功能的拆分，而分层是面相流程的拆分，这两种方式是否是二选一的，还是说，我可以面相功能拆分成插件以后再对每个插件进行分层拆分。\n\n4.  规则引擎的例子中说到 规则是插件 语言是连接 数据流是通信，对比下文的drools，我不太理解这几句(没用过规则引擎做过业务，不太理解场景)\n\n就比如文中说的 规则是插件，这里的规则是指 drl文件中的一个 rule吗？\n\n后面说 引擎将数据传递到下一个规则，所以数据流是通信。我看网上的demo是，编写 drl文件，在业务代码里过滤出一组规则进行执行。这里怎么样体现了数据流或者插件通信呢？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630381,"discussion_content":"1. bundle和bean还不一样，bundle是独立打包的，bean只是逻辑上的一个概念；\n2. 和第一个问题类似，你可以说它们的机制看起来类似，但实际上还是有本质区别的，bundle你可以理解为和一个容器类似\n3. 一般不会这么做，拆的太细了，没有带来什么好处但是大大增加了复杂度；\n4. 规则引擎会执行你定义的规则集里面的各条规则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698376902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355342,"user_name":"YANG","can_delete":false,"product_type":"c1","uid":1020845,"ip_address":"广东","ucode":"D579AFD200AA9F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/ad/76101119.jpg","comment_is_top":false,"comment_ctime":1661307840,"is_pvip":false,"replies":[{"id":129501,"content":"这个我没有研究","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1661763657,"ip_address":"广东","comment_id":355342,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"Shopify Marketplace 不属于微内核架构？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585697,"discussion_content":"这个我没有研究","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661763657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353182,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1752796,"ip_address":"广东","ucode":"7BC7539A3355DA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/be/dc/ce674e93.jpg","comment_is_top":false,"comment_ctime":1659239833,"is_pvip":false,"replies":[{"id":128454,"content":"看看Drools的案例，基本符合你说的","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1659361661,"ip_address":"广东","comment_id":353182,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"规则引擎是不是代码里编写一套如“当？条件发生，则执行？（比如增加最后结果的权重）”，再有一个判断逻辑“当最后结果满足？时，最终结果发生”。这是代码部分，里面没有一点具体业务规则，而？处就是db里配置的数据。\n如果是这样的规则引擎，那这个引擎的代码要能考虑到各种奇怪的规则，而且这个推出最后结果是否发生的逻辑也要能适配各种复杂情况。这样才能在业务人员在portal配置好规则数据后，直接能用这些规则","like_count":0},{"had_liked":false,"id":349020,"user_name":"| ~浑蛋~","can_delete":false,"product_type":"c1","uid":3024820,"ip_address":"","ucode":"B6904B44DFA805","user_header":"https://static001.geekbang.org/account/avatar/00/2e/27/b4/df65c0f7.jpg","comment_is_top":false,"comment_ctime":1655644946,"is_pvip":false,"replies":[{"id":127180,"content":"是微内核可以基于SPI来实现","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1655951652,"ip_address":"","comment_id":349020,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"SPI机制算是一种微内核架构吗","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":630381,"discussion_content":"1. bundle和bean还不一样，bundle是独立打包的，bean只是逻辑上的一个概念；\n2. 和第一个问题类似，你可以说它们的机制看起来类似，但实际上还是有本质区别的，bundle你可以理解为和一个容器类似\n3. 一般不会这么做，拆的太细了，没有带来什么好处但是大大增加了复杂度；\n4. 规则引擎会执行你定义的规则集里面的各条规则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1698376902,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345696,"user_name":"e⃰v⃰a⃰n⃰","can_delete":false,"product_type":"c1","uid":2988699,"ip_address":"","ucode":"13A98516756517","user_header":"https://static001.geekbang.org/account/avatar/00/2d/9a/9b/cc08f6b3.jpg","comment_is_top":false,"comment_ctime":1652515233,"is_pvip":false,"replies":[{"id":126207,"content":"一条规则背后对应一大段的代码，规则引擎是执行代码运行的，包括逻辑判断和数据库等处理","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1652663731,"ip_address":"","comment_id":345696,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"老师，您好，这个插件是用来修改数据库的吗？自己直接做个页面来指定规则不就行了吗？使用这个插件的意义是什么呢？","like_count":0,"discussions":[{"author":{"id":1645421,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1b/6d/07190315.jpg","nickname":"振伟普拉斯","note":"","ucode":"8A2CC17C7ACB5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582476,"discussion_content":"规则引擎就是干这个的。把判断逻辑抽取到规则文件中，保存到数据库或磁盘上，游离于代码之外，当规则发生变化时修改规则文件，重新Load一下规则文件，规则就生效了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1659440947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582312,"discussion_content":"看看Drools的案例，基本符合你说的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1659361661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334606,"user_name":"Sudouble","can_delete":false,"product_type":"c1","uid":1365574,"ip_address":"","ucode":"B369B09DAF8D20","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/46/5eb5261b.jpg","comment_is_top":false,"comment_ctime":1645017280,"is_pvip":false,"replies":[{"id":122256,"content":"简单的轮子自己可以造，太复杂就别了，除非你在巨头公司\n","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1645064422,"ip_address":"","comment_id":334606,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"谢谢李老师！规则引擎，get到。前不久做了这个，那时候自己想了一套方案，看看目前这方面的是不是可以套用上，降低重复造轮子的程度。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577156,"discussion_content":"是微内核可以基于SPI来实现","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655951652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305719,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1610258,"ip_address":"","ucode":"2CC5F072E84028","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/0iafBsuyfz4p49JhiceAtwT8cAL6bJGaUwZibjw5iatwiankZ9mqnjafzhpBt1Vwzy2mhUiagVqD0URIlKcH07ibnicO5g/132","comment_is_top":false,"comment_ctime":1628132074,"is_pvip":false,"replies":[{"id":110668,"content":"厉害了 ：）","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1628238384,"ip_address":"","comment_id":305719,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"贴上一个手撸微内核架构的源码。 可以按分支版本查看收入的过程\nhttps:&#47;&#47;github.com&#47;qzsang&#47;mini-promotion","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572216,"discussion_content":"一条规则背后对应一大段的代码，规则引擎是执行代码运行的，包括逻辑判断和数据库等处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652663731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287084,"user_name":"自然","can_delete":false,"product_type":"c1","uid":1181887,"ip_address":"","ucode":"EDFC3EFAB0B88E","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/bf/cd6bfc22.jpg","comment_is_top":false,"comment_ctime":1617769171,"is_pvip":false,"replies":[{"id":104246,"content":"看来是有OSGi故事的人……：）","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1617786040,"ip_address":"","comment_id":287084,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"OSGi还是挺复杂的，对整个开发团队要求很高。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551578,"discussion_content":"简单的轮子自己可以造，太复杂就别了，除非你在巨头公司\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645064422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281867,"user_name":"小神david","can_delete":false,"product_type":"c1","uid":1206959,"ip_address":"","ucode":"F593F5ECEC58BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epmAicDUiaUdtLhVwSs6fT0yx69ibWy6ia46ZD4vblGtyee8QFz71icKZJkzccAFG3zHnMngSz7WeGBtKw/132","comment_is_top":false,"comment_ctime":1614929802,"is_pvip":false,"replies":[{"id":102322,"content":"微服务讲完了就讲微内核，具体的逻辑和关联关系看32讲","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1614937643,"ip_address":"","comment_id":281867,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"咋突然从微服务就讲到了微内核呢？其中的关联逻辑是？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518187,"discussion_content":"看来是有OSGi故事的人……：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617786040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265102,"user_name":"silentyears","can_delete":false,"product_type":"c1","uid":1061748,"ip_address":"","ucode":"6E137BFEB874CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/33/74/d9d143fa.jpg","comment_is_top":false,"comment_ctime":1606782765,"is_pvip":false,"replies":[{"id":96370,"content":"建规则管理后台，从业务的角度来划分规则，不要从技术的角度来划分规则","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1606830315,"ip_address":"","comment_id":265102,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"请问李老师 用规则引擎 虽然动态了 但是不好管理和维护 规则粒度该怎么划分好？ 谢谢","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516538,"discussion_content":"微服务讲完了就讲微内核，具体的逻辑和关联关系看32讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614937643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206959,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epmAicDUiaUdtLhVwSs6fT0yx69ibWy6ia46ZD4vblGtyee8QFz71icKZJkzccAFG3zHnMngSz7WeGBtKw/132","nickname":"小神david","note":"","ucode":"F593F5ECEC58BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353086,"discussion_content":"soga","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614998297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383040,"user_name":"陈峰","can_delete":false,"product_type":"c1","uid":3721548,"ip_address":"江苏","ucode":"11F92938308C6C","user_header":"","comment_is_top":false,"comment_ctime":1698341826,"is_pvip":false,"replies":[{"id":139520,"content":"1. bundle和bean还不一样，bundle是独立打包的，bean只是逻辑上的一个概念；\n2. 和第一个问题类似，你可以说它们的机制看起来类似，但实际上还是有本质区别的，bundle你可以理解为和一个容器类似\n3. 一般不会这么做，拆的太细了，没有带来什么好处但是大大增加了复杂度；\n4. 规则引擎会执行你定义的规则集里面的各条规则","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1698376902,"ip_address":"广东","comment_id":383040,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"老师，微内核有几个疑问。\n\n1. OSGi中bundle是不是和spring中的bean很像，前面也提到了 Spring的依赖注入也是插件连接的一种。那么，是不是，如果Spring中 我的Component提供一个具体的功能(比如，短信注册)，然后 通过依赖注入相互调用，本质上就是一种微内核架构呢？\n\n2. 感觉文中，依赖注入 写的是 插件连接的方式，好像对比后文不太准确？\n\n读完OSGi的介绍后，我感觉 如果把Component视为插件 Spring对Bean的管理(扫描和注册)是插件管理，Bean的生命周期 是插件连接，Bean相互依赖注入并调用，是插件通信。我不知道我理解的是否有问题？\n\n3. 我们之前讲到，微内核是面相功能的拆分，而分层是面相流程的拆分，这两种方式是否是二选一的，还是说，我可以面相功能拆分成插件以后再对每个插件进行分层拆分。\n\n4.  规则引擎的例子中说到 规则是插件 语言是连接 数据流是通信，对比下文的drools，我不太理解这几句(没用过规则引擎做过业务，不太理解场景)\n\n就比如文中说的 规则是插件，这里的规则是指 drl文件中的一个 rule吗？\n\n后面说 引擎将数据传递到下一个规则，所以数据流是通信。我看网上的demo是，编写 drl文件，在业务代码里过滤出一组规则进行执行。这里怎么样体现了数据流或者插件通信呢？","like_count":0,"discussions":[{"author":{"id":1645421,"avatar":"https://static001.geekbang.org/account/avatar/00/19/1b/6d/07190315.jpg","nickname":"振伟普拉斯","note":"","ucode":"8A2CC17C7ACB5D","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582476,"discussion_content":"规则引擎就是干这个的。把判断逻辑抽取到规则文件中，保存到数据库或磁盘上，游离于代码之外，当规则发生变化时修改规则文件，重新Load一下规则文件，规则就生效了。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1659440947,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"上海","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582312,"discussion_content":"看看Drools的案例，基本符合你说的","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1659361661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355342,"user_name":"YANG","can_delete":false,"product_type":"c1","uid":1020845,"ip_address":"广东","ucode":"D579AFD200AA9F","user_header":"https://static001.geekbang.org/account/avatar/00/0f/93/ad/76101119.jpg","comment_is_top":false,"comment_ctime":1661307840,"is_pvip":false,"replies":[{"id":129501,"content":"这个我没有研究","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1661763657,"ip_address":"广东","comment_id":355342,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"Shopify Marketplace 不属于微内核架构？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":585697,"discussion_content":"这个我没有研究","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1661763657,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":353182,"user_name":"Michael","can_delete":false,"product_type":"c1","uid":1752796,"ip_address":"广东","ucode":"7BC7539A3355DA","user_header":"https://static001.geekbang.org/account/avatar/00/1a/be/dc/ce674e93.jpg","comment_is_top":false,"comment_ctime":1659239833,"is_pvip":false,"replies":[{"id":128454,"content":"看看Drools的案例，基本符合你说的","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1659361661,"ip_address":"广东","comment_id":353182,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"规则引擎是不是代码里编写一套如“当？条件发生，则执行？（比如增加最后结果的权重）”，再有一个判断逻辑“当最后结果满足？时，最终结果发生”。这是代码部分，里面没有一点具体业务规则，而？处就是db里配置的数据。\n如果是这样的规则引擎，那这个引擎的代码要能考虑到各种奇怪的规则，而且这个推出最后结果是否发生的逻辑也要能适配各种复杂情况。这样才能在业务人员在portal配置好规则数据后，直接能用这些规则","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577156,"discussion_content":"是微内核可以基于SPI来实现","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1655951652,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349020,"user_name":"| ~浑蛋~","can_delete":false,"product_type":"c1","uid":3024820,"ip_address":"","ucode":"B6904B44DFA805","user_header":"https://static001.geekbang.org/account/avatar/00/2e/27/b4/df65c0f7.jpg","comment_is_top":false,"comment_ctime":1655644946,"is_pvip":false,"replies":[{"id":127180,"content":"是微内核可以基于SPI来实现","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1655951652,"ip_address":"","comment_id":349020,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"SPI机制算是一种微内核架构吗","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":572216,"discussion_content":"一条规则背后对应一大段的代码，规则引擎是执行代码运行的，包括逻辑判断和数据库等处理","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652663731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":345696,"user_name":"e⃰v⃰a⃰n⃰","can_delete":false,"product_type":"c1","uid":2988699,"ip_address":"","ucode":"13A98516756517","user_header":"https://static001.geekbang.org/account/avatar/00/2d/9a/9b/cc08f6b3.jpg","comment_is_top":false,"comment_ctime":1652515233,"is_pvip":false,"replies":[{"id":126207,"content":"一条规则背后对应一大段的代码，规则引擎是执行代码运行的，包括逻辑判断和数据库等处理","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1652663731,"ip_address":"","comment_id":345696,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"老师，您好，这个插件是用来修改数据库的吗？自己直接做个页面来指定规则不就行了吗？使用这个插件的意义是什么呢？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":551578,"discussion_content":"简单的轮子自己可以造，太复杂就别了，除非你在巨头公司\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645064422,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334606,"user_name":"Sudouble","can_delete":false,"product_type":"c1","uid":1365574,"ip_address":"","ucode":"B369B09DAF8D20","user_header":"https://static001.geekbang.org/account/avatar/00/14/d6/46/5eb5261b.jpg","comment_is_top":false,"comment_ctime":1645017280,"is_pvip":false,"replies":[{"id":122256,"content":"简单的轮子自己可以造，太复杂就别了，除非你在巨头公司\n","user_name":"作者回复","user_name_real":"编辑","uid":1098920,"ctime":1645064422,"ip_address":"","comment_id":334606,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"谢谢李老师！规则引擎，get到。前不久做了这个，那时候自己想了一套方案，看看目前这方面的是不是可以套用上，降低重复造轮子的程度。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524492,"discussion_content":"厉害了 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628238384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":305719,"user_name":"Joker","can_delete":false,"product_type":"c1","uid":1610258,"ip_address":"","ucode":"2CC5F072E84028","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/0iafBsuyfz4p49JhiceAtwT8cAL6bJGaUwZibjw5iatwiankZ9mqnjafzhpBt1Vwzy2mhUiagVqD0URIlKcH07ibnicO5g/132","comment_is_top":false,"comment_ctime":1628132074,"is_pvip":false,"replies":[{"id":110668,"content":"厉害了 ：）","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1628238384,"ip_address":"","comment_id":305719,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"贴上一个手撸微内核架构的源码。 可以按分支版本查看收入的过程\nhttps:&#47;&#47;github.com&#47;qzsang&#47;mini-promotion","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524492,"discussion_content":"厉害了 ：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628238384,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":287084,"user_name":"自然","can_delete":false,"product_type":"c1","uid":1181887,"ip_address":"","ucode":"EDFC3EFAB0B88E","user_header":"https://static001.geekbang.org/account/avatar/00/12/08/bf/cd6bfc22.jpg","comment_is_top":false,"comment_ctime":1617769171,"is_pvip":false,"replies":[{"id":104246,"content":"看来是有OSGi故事的人……：）","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1617786040,"ip_address":"","comment_id":287084,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"OSGi还是挺复杂的，对整个开发团队要求很高。","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518187,"discussion_content":"看来是有OSGi故事的人……：）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617786040,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281867,"user_name":"小神david","can_delete":false,"product_type":"c1","uid":1206959,"ip_address":"","ucode":"F593F5ECEC58BA","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epmAicDUiaUdtLhVwSs6fT0yx69ibWy6ia46ZD4vblGtyee8QFz71icKZJkzccAFG3zHnMngSz7WeGBtKw/132","comment_is_top":false,"comment_ctime":1614929802,"is_pvip":false,"replies":[{"id":102322,"content":"微服务讲完了就讲微内核，具体的逻辑和关联关系看32讲","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1614937643,"ip_address":"","comment_id":281867,"utype":1}],"discussion_count":2,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"咋突然从微服务就讲到了微内核呢？其中的关联逻辑是？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516538,"discussion_content":"微服务讲完了就讲微内核，具体的逻辑和关联关系看32讲","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614937643,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1206959,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83epmAicDUiaUdtLhVwSs6fT0yx69ibWy6ia46ZD4vblGtyee8QFz71icKZJkzccAFG3zHnMngSz7WeGBtKw/132","nickname":"小神david","note":"","ucode":"F593F5ECEC58BA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353086,"discussion_content":"soga","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614998297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":265102,"user_name":"silentyears","can_delete":false,"product_type":"c1","uid":1061748,"ip_address":"","ucode":"6E137BFEB874CA","user_header":"https://static001.geekbang.org/account/avatar/00/10/33/74/d9d143fa.jpg","comment_is_top":false,"comment_ctime":1606782765,"is_pvip":false,"replies":[{"id":96370,"content":"建规则管理后台，从业务的角度来划分规则，不要从技术的角度来划分规则","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1606830315,"ip_address":"","comment_id":265102,"utype":1}],"discussion_count":1,"race_medal":0,"score":4,"product_id":100006601,"comment_content":"请问李老师 用规则引擎 虽然动态了 但是不好管理和维护 规则粒度该怎么划分好？ 谢谢","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":510802,"discussion_content":"建规则管理后台，从业务的角度来划分规则，不要从技术的角度来划分规则","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606830315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262181,"user_name":"易燃易爆闻一多","can_delete":false,"product_type":"c1","uid":1099541,"ip_address":"","ucode":"BA92EDCFCDC399","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/15/fcd39b72.jpg","comment_is_top":false,"comment_ctime":1605659684,"is_pvip":false,"replies":[{"id":95466,"content":"封装变化层，就像我们对接移动联通电信的短信网关，也是各自写一套","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1606010995,"ip_address":"","comment_id":262181,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"老师您好！想询问下现在项目需要对接多个三方项目api，都有各自的oauth鉴权。但是每个写一套对接逻辑，代码有冗余但是又没有通用场景。这地方能用什么架构思想改进吗？","like_count":0},{"had_liked":false,"id":235416,"user_name":"reverse","can_delete":false,"product_type":"c1","uid":1240138,"ip_address":"","ucode":"0B546E540DF096","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/4a/40a2ba79.jpg","comment_is_top":false,"comment_ctime":1595018121,"is_pvip":false,"replies":[{"id":87417,"content":"开源试试","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1595475239,"ip_address":"","comment_id":235416,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"Esper 规则引擎前端可视化编排，我自己手撸的，只不过不能放出来","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509721,"discussion_content":"封装变化层，就像我们对接移动联通电信的短信网关，也是各自写一套","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606010995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221472,"user_name":"skull","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1590504093,"is_pvip":false,"replies":[{"id":81814,"content":"那肯定的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1590641192,"ip_address":"","comment_id":221472,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"老师，您好，规则引擎如果使用页面配置的话，是不是需要一个业务开发一套对应页面了","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501709,"discussion_content":"开源试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595475239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1240138,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ec/4a/40a2ba79.jpg","nickname":"reverse","note":"","ucode":"0B546E540DF096","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293206,"discussion_content":"给某国有企业做的 开源有阻力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595478676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211894,"user_name":"柳树","can_delete":false,"product_type":"c1","uid":1025223,"ip_address":"","ucode":"F03249D4534BCB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/c7/d1ee69c6.jpg","comment_is_top":false,"comment_ctime":1588036640,"is_pvip":false,"replies":[{"id":79009,"content":"六边形架构没什么了解","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1588162613,"ip_address":"","comment_id":211894,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"想听一下大佬对微内核、微服务、六边形架构之间的区别和联系的看法~","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496465,"discussion_content":"那肯定的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590641192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192513,"user_name":"lyonger","can_delete":false,"product_type":"c1","uid":1313840,"ip_address":"","ucode":"E89A75DADEA2A1","user_header":"https://static001.geekbang.org/account/avatar/00/14/0c/30/d4737cd5.jpg","comment_is_top":false,"comment_ctime":1584856692,"is_pvip":false,"replies":[{"id":74888,"content":"是的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1585540488,"ip_address":"","comment_id":192513,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"Chrome浏览器提供插件支持，这种也是微内核架构的一种表现么？😄","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488412,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585540488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120321,"user_name":"弄花香满衣","can_delete":false,"product_type":"c1","uid":1102394,"ip_address":"","ucode":"7B967B9B506FC2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo5TodrC8rdWMIIIBtZX3IYlK2kXa47HeVicO0USkAIgRHia3OAs4L93kGMyJfGu928DK40YCUKDCXQ/132","comment_is_top":false,"comment_ctime":1564830197,"is_pvip":false,"replies":[{"id":44277,"content":"把规则引擎嵌入到业务代码中","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1564968536,"ip_address":"","comment_id":120321,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"老师您好，每个规则对应的取数规则编码到程序中的吗？如果想实现让业务自己根据数据源，抽取出自定义规则，有没有好办法？我想到的是脚本语言，比如java+groovy,还有其他方法吗？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":488412,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585540488,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82718,"user_name":"飘宝","can_delete":false,"product_type":"c1","uid":1100310,"ip_address":"","ucode":"6D7718F26D7852","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/16/a7ed6dca.jpg","comment_is_top":false,"comment_ctime":1554284274,"is_pvip":false,"replies":[{"id":30107,"content":"没法知道最原始的出处，你可以理解为通用说法即可以","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1554536421,"ip_address":"","comment_id":82718,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"李老师，文中提到的product-base是哪本书或者哪篇文章中说的，还有对应的web-based","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461285,"discussion_content":"把规则引擎嵌入到业务代码中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564968536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78096,"user_name":"jacky","can_delete":false,"product_type":"c1","uid":1049177,"ip_address":"","ucode":"A0BD06E2ABF520","user_header":"https://static001.geekbang.org/account/avatar/00/10/02/59/989f65c8.jpg","comment_is_top":false,"comment_ctime":1553070452,"is_pvip":false,"replies":[{"id":28705,"content":"抱歉，不了解","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1553298997,"ip_address":"","comment_id":78096,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"请问老师，阿里的基于SQL的IoT规则引擎的实现原理？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445699,"discussion_content":"没法知道最原始的出处，你可以理解为通用说法即可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554536421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48941,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1073400,"ip_address":"","ucode":"74279BE011BEA4","user_header":"https://static001.geekbang.org/account/avatar/00/10/60/f8/3f0ba76d.jpg","comment_is_top":false,"comment_ctime":1544580420,"is_pvip":false,"replies":[{"id":17768,"content":"顿悟难得，这课值了😀","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1544679748,"ip_address":"","comment_id":48941,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"有意思，get it.\n有顿悟的感觉","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443967,"discussion_content":"抱歉，不了解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553298997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19752,"user_name":"盛夏未至","can_delete":false,"product_type":"c1","uid":1074599,"ip_address":"","ucode":"DDEA97D9DA18CD","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/a7/b885653a.jpg","comment_is_top":false,"comment_ctime":1534038027,"is_pvip":false,"replies":[{"id":6883,"content":"SOA和微内核差异还是很大的，不知道你们如何糅合在一起的😄😄","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1534059088,"ip_address":"","comment_id":19752,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"我类个去啊，我们公司自己搞得一套基于soa的框架用了好几年了，我看了李老师的文章后才恍然大悟，原来微内核架构…………","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432429,"discussion_content":"顿悟难得，这课值了😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544679748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":262181,"user_name":"易燃易爆闻一多","can_delete":false,"product_type":"c1","uid":1099541,"ip_address":"","ucode":"BA92EDCFCDC399","user_header":"https://static001.geekbang.org/account/avatar/00/10/c7/15/fcd39b72.jpg","comment_is_top":false,"comment_ctime":1605659684,"is_pvip":false,"replies":[{"id":95466,"content":"封装变化层，就像我们对接移动联通电信的短信网关，也是各自写一套","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1606010995,"ip_address":"","comment_id":262181,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"老师您好！想询问下现在项目需要对接多个三方项目api，都有各自的oauth鉴权。但是每个写一套对接逻辑，代码有冗余但是又没有通用场景。这地方能用什么架构思想改进吗？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509721,"discussion_content":"封装变化层，就像我们对接移动联通电信的短信网关，也是各自写一套","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606010995,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":235416,"user_name":"reverse","can_delete":false,"product_type":"c1","uid":1240138,"ip_address":"","ucode":"0B546E540DF096","user_header":"https://static001.geekbang.org/account/avatar/00/12/ec/4a/40a2ba79.jpg","comment_is_top":false,"comment_ctime":1595018121,"is_pvip":false,"replies":[{"id":87417,"content":"开源试试","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1595475239,"ip_address":"","comment_id":235416,"utype":1}],"discussion_count":2,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"Esper 规则引擎前端可视化编排，我自己手撸的，只不过不能放出来","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501709,"discussion_content":"开源试试","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595475239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1240138,"avatar":"https://static001.geekbang.org/account/avatar/00/12/ec/4a/40a2ba79.jpg","nickname":"reverse","note":"","ucode":"0B546E540DF096","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293206,"discussion_content":"给某国有企业做的 开源有阻力","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595478676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":221472,"user_name":"skull","can_delete":false,"product_type":"c1","uid":1263932,"ip_address":"","ucode":"0A8600CB928EFE","user_header":"https://static001.geekbang.org/account/avatar/00/13/49/3c/5d54c510.jpg","comment_is_top":false,"comment_ctime":1590504093,"is_pvip":false,"replies":[{"id":81814,"content":"那肯定的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1590641192,"ip_address":"","comment_id":221472,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"老师，您好，规则引擎如果使用页面配置的话，是不是需要一个业务开发一套对应页面了","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496465,"discussion_content":"那肯定的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590641192,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":211894,"user_name":"柳树","can_delete":false,"product_type":"c1","uid":1025223,"ip_address":"","ucode":"F03249D4534BCB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/c7/d1ee69c6.jpg","comment_is_top":false,"comment_ctime":1588036640,"is_pvip":false,"replies":[{"id":79009,"content":"六边形架构没什么了解","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1588162613,"ip_address":"","comment_id":211894,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"想听一下大佬对微内核、微服务、六边形架构之间的区别和联系的看法~","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493391,"discussion_content":"六边形架构没什么了解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588162613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":192513,"user_name":"lyonger","can_delete":false,"product_type":"c1","uid":1313840,"ip_address":"","ucode":"E89A75DADEA2A1","user_header":"https://static001.geekbang.org/account/avatar/00/14/0c/30/d4737cd5.jpg","comment_is_top":false,"comment_ctime":1584856692,"is_pvip":false,"replies":[{"id":74888,"content":"是的","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1585540488,"ip_address":"","comment_id":192513,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"Chrome浏览器提供插件支持，这种也是微内核架构的一种表现么？😄","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":493391,"discussion_content":"六边形架构没什么了解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1588162613,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120321,"user_name":"弄花香满衣","can_delete":false,"product_type":"c1","uid":1102394,"ip_address":"","ucode":"7B967B9B506FC2","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eo5TodrC8rdWMIIIBtZX3IYlK2kXa47HeVicO0USkAIgRHia3OAs4L93kGMyJfGu928DK40YCUKDCXQ/132","comment_is_top":false,"comment_ctime":1564830197,"is_pvip":false,"replies":[{"id":44277,"content":"把规则引擎嵌入到业务代码中","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1564968536,"ip_address":"","comment_id":120321,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"老师您好，每个规则对应的取数规则编码到程序中的吗？如果想实现让业务自己根据数据源，抽取出自定义规则，有没有好办法？我想到的是脚本语言，比如java+groovy,还有其他方法吗？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461285,"discussion_content":"把规则引擎嵌入到业务代码中","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564968536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":82718,"user_name":"飘宝","can_delete":false,"product_type":"c1","uid":1100310,"ip_address":"","ucode":"6D7718F26D7852","user_header":"https://static001.geekbang.org/account/avatar/00/10/ca/16/a7ed6dca.jpg","comment_is_top":false,"comment_ctime":1554284274,"is_pvip":false,"replies":[{"id":30107,"content":"没法知道最原始的出处，你可以理解为通用说法即可以","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1554536421,"ip_address":"","comment_id":82718,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"李老师，文中提到的product-base是哪本书或者哪篇文章中说的，还有对应的web-based","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":445699,"discussion_content":"没法知道最原始的出处，你可以理解为通用说法即可以","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1554536421,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":78096,"user_name":"jacky","can_delete":false,"product_type":"c1","uid":1049177,"ip_address":"","ucode":"A0BD06E2ABF520","user_header":"https://static001.geekbang.org/account/avatar/00/10/02/59/989f65c8.jpg","comment_is_top":false,"comment_ctime":1553070452,"is_pvip":false,"replies":[{"id":28705,"content":"抱歉，不了解","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1553298997,"ip_address":"","comment_id":78096,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"请问老师，阿里的基于SQL的IoT规则引擎的实现原理？","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":443967,"discussion_content":"抱歉，不了解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1553298997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":48941,"user_name":"sam","can_delete":false,"product_type":"c1","uid":1073400,"ip_address":"","ucode":"74279BE011BEA4","user_header":"https://static001.geekbang.org/account/avatar/00/10/60/f8/3f0ba76d.jpg","comment_is_top":false,"comment_ctime":1544580420,"is_pvip":false,"replies":[{"id":17768,"content":"顿悟难得，这课值了😀","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1544679748,"ip_address":"","comment_id":48941,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"有意思，get it.\n有顿悟的感觉","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":432429,"discussion_content":"顿悟难得，这课值了😀","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1544679748,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":19752,"user_name":"盛夏未至","can_delete":false,"product_type":"c1","uid":1074599,"ip_address":"","ucode":"DDEA97D9DA18CD","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/a7/b885653a.jpg","comment_is_top":false,"comment_ctime":1534038027,"is_pvip":false,"replies":[{"id":6883,"content":"SOA和微内核差异还是很大的，不知道你们如何糅合在一起的😄😄","user_name":"作者回复","user_name_real":"华仔","uid":1098920,"ctime":1534059088,"ip_address":"","comment_id":19752,"utype":1}],"discussion_count":1,"race_medal":0,"score":5,"product_id":100006601,"comment_content":"我类个去啊，我们公司自己搞得一套基于soa的框架用了好几年了，我看了李老师的文章后才恍然大悟，原来微内核架构…………","like_count":0,"discussions":[{"author":{"id":1098920,"avatar":"https://static001.geekbang.org/account/avatar/00/10/c4/a8/f2685e1b.jpg","nickname":"华仔","note":"","ucode":"851FF94CF5133A","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":421965,"discussion_content":"SOA和微内核差异还是很大的，不知道你们如何糅合在一起的😄😄","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1534059088,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17422,"user_name":"Johnny.Z","can_delete":false,"product_type":"c1","uid":1057367,"ip_address":"","ucode":"E4496B8F5163F5","user_header":"https://static001.geekbang.org/account/avatar/00/10/22/57/cf35d10c.jpg","comment_is_top":false,"comment_ctime":1532648722,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"规则引擎Esper 可以使用类sql编写规则，入门比较简单，不过功能应该没Drools强大","like_count":19},{"had_liked":false,"id":217067,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1589415938,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"说个简单场景，指定时间内，累计满5000 ","like_count":3},{"had_liked":false,"id":20934,"user_name":"噗╰_╯噗 ","can_delete":false,"product_type":"c1","uid":1140666,"ip_address":"","ucode":"AFB831EB42256D","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/ba/5a1bd8c9.jpg","comment_is_top":false,"comment_ctime":1534817965,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"REngine，回答楼上，.net规则引擎","like_count":2},{"had_liked":false,"id":16713,"user_name":"空档滑行","can_delete":false,"product_type":"c1","uid":1091611,"ip_address":"","ucode":"06A6A7F503FAA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/1b/ced1d171.jpg","comment_is_top":false,"comment_ctime":1532133592,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"Atlas通过Bundle Framework，提供Bundle管理、加载、生命周期、安全等一些最基本的能力。\n\n通过运行期管理层，提供功能清单，在调用时方便查找；提供版本管理，代理系统的运行环境\n\n\n","like_count":2},{"had_liked":false,"id":230746,"user_name":"张昌","can_delete":false,"product_type":"c1","uid":1510451,"ip_address":"","ucode":"836821A2D3F783","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/33/5b6cdb06.jpg","comment_is_top":false,"comment_ctime":1593482384,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"这篇文章分析中有谈到老师的问题\nhttps:&#47;&#47;mp.weixin.qq.com&#47;s?__biz=MzAxNDEwNjk5OQ==&amp;mid=2650400348&amp;idx=1&amp;sn=99bc1bce932c5b9000d5b54afa2de70e\n\nbundle  framework实现插件管理\nruntime 中清单实现插件发现，代理插件通信","like_count":1},{"had_liked":false,"id":211893,"user_name":"柳树","can_delete":false,"product_type":"c1","uid":1025223,"ip_address":"","ucode":"F03249D4534BCB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/c7/d1ee69c6.jpg","comment_is_top":false,"comment_ctime":1588036598,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"Dubbo也是一个很好的例子。","like_count":1},{"had_liked":false,"id":109081,"user_name":"loveluckystar","can_delete":false,"product_type":"c1","uid":1097877,"ip_address":"","ucode":"370C38AF0E9A43","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/95/6f0aad03.jpg","comment_is_top":false,"comment_ctime":1561957227,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"之前一直觉得插件间通信是个很高深莫测的东西，后来真正实操一把发现，直接通过统一的上下文透传，这种数据流不也是一种插件通信方式🐼 真的要善于总结思考才行","like_count":1},{"had_liked":false,"id":17404,"user_name":"波波安","can_delete":false,"product_type":"c1","uid":1002452,"ip_address":"","ucode":"2A677908E5A75D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","comment_is_top":false,"comment_ctime":1532617320,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"高并发的订单流程用activity工作流，合适吗。流程数据在数据库里边读写，是不是会存在并发瓶颈。望老师解答","like_count":1,"discussions":[{"author":{"id":1137160,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5a/08/2bef230f.jpg","nickname":"慎独","note":"","ucode":"7EA6FB3C7CFE4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340950,"discussion_content":"在生产环境用过esper 吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610215396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383941,"user_name":"柯里","can_delete":false,"product_type":"c1","uid":2556517,"ip_address":"上海","ucode":"B66035EE1E389B","user_header":"https://static001.geekbang.org/account/avatar/00/27/02/65/ddb6460e.jpg","comment_is_top":false,"comment_ctime":1699971288,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"先知道这个概念吧","like_count":0},{"had_liked":false,"id":288843,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1618726297,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"微内核系统\n微内核架构包含两类组件：核心系统（core system）和插件模块（plug-in modules）。\n核心系统负责和具体业务功能无关的通用功能，例如模块加载、模块间通信等；\n插件模块负责实现具体的业务逻辑，例如专栏前面经常提到的“学生信息管理”系统中的“手机号注册”功能。\n\n设计关键点微内核的核心系统设计的关键技术有：插件管理、插件连接和插件通信。\nOSGi 架构简析\nOSGi 的全称是 Open Services Gateway initiative，本身其实是指 OSGi Alliance。\n这个联盟是 Sun Microsystems、IBM、爱立信等公司于 1999 年 3 月成立的开放的标准化组织，最初名为 Connected Alliance。\n它是一个非盈利的国际组织，旨在建立一个开放的服务规范，为通过网络向设备提供服务建立开放的标准，这个标准就是\n OSGi specification。现在我们谈到 OSGi，如果没有特别说明，一般都是指 OSGi 的规范。","like_count":0,"discussions":[{"author":{"id":1903708,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0c/5c/b03b2cc1.jpg","nickname":"Geek_db6a4b","note":"","ucode":"E5992D1CF088C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342785,"discussion_content":"流程配置第一次加载可以缓存到内存里 ，更新更新流程配置时刷新缓存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610809622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":17422,"user_name":"Johnny.Z","can_delete":false,"product_type":"c1","uid":1057367,"ip_address":"","ucode":"E4496B8F5163F5","user_header":"https://static001.geekbang.org/account/avatar/00/10/22/57/cf35d10c.jpg","comment_is_top":false,"comment_ctime":1532648722,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"规则引擎Esper 可以使用类sql编写规则，入门比较简单，不过功能应该没Drools强大","like_count":19,"discussions":[{"author":{"id":1137160,"avatar":"https://static001.geekbang.org/account/avatar/00/11/5a/08/2bef230f.jpg","nickname":"慎独","note":"","ucode":"7EA6FB3C7CFE4C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":340950,"discussion_content":"在生产环境用过esper 吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610215396,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":217067,"user_name":"丁丁历险记","can_delete":false,"product_type":"c1","uid":1661704,"ip_address":"","ucode":"A43829E454C067","user_header":"https://static001.geekbang.org/account/avatar/00/19/5b/08/b0b0db05.jpg","comment_is_top":false,"comment_ctime":1589415938,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"说个简单场景，指定时间内，累计满5000 ","like_count":3},{"had_liked":false,"id":20934,"user_name":"噗╰_╯噗 ","can_delete":false,"product_type":"c1","uid":1140666,"ip_address":"","ucode":"AFB831EB42256D","user_header":"https://static001.geekbang.org/account/avatar/00/11/67/ba/5a1bd8c9.jpg","comment_is_top":false,"comment_ctime":1534817965,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"REngine，回答楼上，.net规则引擎","like_count":2},{"had_liked":false,"id":16713,"user_name":"空档滑行","can_delete":false,"product_type":"c1","uid":1091611,"ip_address":"","ucode":"06A6A7F503FAA7","user_header":"https://static001.geekbang.org/account/avatar/00/10/a8/1b/ced1d171.jpg","comment_is_top":false,"comment_ctime":1532133592,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"Atlas通过Bundle Framework，提供Bundle管理、加载、生命周期、安全等一些最基本的能力。\n\n通过运行期管理层，提供功能清单，在调用时方便查找；提供版本管理，代理系统的运行环境\n\n\n","like_count":2},{"had_liked":false,"id":230746,"user_name":"张昌","can_delete":false,"product_type":"c1","uid":1510451,"ip_address":"","ucode":"836821A2D3F783","user_header":"https://static001.geekbang.org/account/avatar/00/17/0c/33/5b6cdb06.jpg","comment_is_top":false,"comment_ctime":1593482384,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"这篇文章分析中有谈到老师的问题\nhttps:&#47;&#47;mp.weixin.qq.com&#47;s?__biz=MzAxNDEwNjk5OQ==&amp;mid=2650400348&amp;idx=1&amp;sn=99bc1bce932c5b9000d5b54afa2de70e\n\nbundle  framework实现插件管理\nruntime 中清单实现插件发现，代理插件通信","like_count":1},{"had_liked":false,"id":211893,"user_name":"柳树","can_delete":false,"product_type":"c1","uid":1025223,"ip_address":"","ucode":"F03249D4534BCB","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a4/c7/d1ee69c6.jpg","comment_is_top":false,"comment_ctime":1588036598,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"Dubbo也是一个很好的例子。","like_count":1},{"had_liked":false,"id":109081,"user_name":"loveluckystar","can_delete":false,"product_type":"c1","uid":1097877,"ip_address":"","ucode":"370C38AF0E9A43","user_header":"https://static001.geekbang.org/account/avatar/00/10/c0/95/6f0aad03.jpg","comment_is_top":false,"comment_ctime":1561957227,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"之前一直觉得插件间通信是个很高深莫测的东西，后来真正实操一把发现，直接通过统一的上下文透传，这种数据流不也是一种插件通信方式🐼 真的要善于总结思考才行","like_count":1},{"had_liked":false,"id":17404,"user_name":"波波安","can_delete":false,"product_type":"c1","uid":1002452,"ip_address":"","ucode":"2A677908E5A75D","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4b/d4/b7719327.jpg","comment_is_top":false,"comment_ctime":1532617320,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"高并发的订单流程用activity工作流，合适吗。流程数据在数据库里边读写，是不是会存在并发瓶颈。望老师解答","like_count":1,"discussions":[{"author":{"id":1903708,"avatar":"https://static001.geekbang.org/account/avatar/00/1d/0c/5c/b03b2cc1.jpg","nickname":"Geek_db6a4b","note":"","ucode":"E5992D1CF088C4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":342785,"discussion_content":"流程配置第一次加载可以缓存到内存里 ，更新更新流程配置时刷新缓存","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610809622,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":383941,"user_name":"柯里","can_delete":false,"product_type":"c1","uid":2556517,"ip_address":"上海","ucode":"B66035EE1E389B","user_header":"https://static001.geekbang.org/account/avatar/00/27/02/65/ddb6460e.jpg","comment_is_top":false,"comment_ctime":1699971288,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"先知道这个概念吧","like_count":0},{"had_liked":false,"id":288843,"user_name":"prader26","can_delete":false,"product_type":"c1","uid":1433707,"ip_address":"","ucode":"5EFFFC374ADECE","user_header":"https://static001.geekbang.org/account/avatar/00/15/e0/6b/f61d7466.jpg","comment_is_top":false,"comment_ctime":1618726297,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":6,"product_id":100006601,"comment_content":"微内核系统\n微内核架构包含两类组件：核心系统（core system）和插件模块（plug-in modules）。\n核心系统负责和具体业务功能无关的通用功能，例如模块加载、模块间通信等；\n插件模块负责实现具体的业务逻辑，例如专栏前面经常提到的“学生信息管理”系统中的“手机号注册”功能。\n\n设计关键点微内核的核心系统设计的关键技术有：插件管理、插件连接和插件通信。\nOSGi 架构简析\nOSGi 的全称是 Open Services Gateway initiative，本身其实是指 OSGi Alliance。\n这个联盟是 Sun Microsystems、IBM、爱立信等公司于 1999 年 3 月成立的开放的标准化组织，最初名为 Connected Alliance。\n它是一个非盈利的国际组织，旨在建立一个开放的服务规范，为通过网络向设备提供服务建立开放的标准，这个标准就是\n OSGi specification。现在我们谈到 OSGi，如果没有特别说明，一般都是指 OSGi 的规范。","like_count":0},{"had_liked":false,"id":285493,"user_name":"ubuntuMax","can_delete":false,"product_type":"c1","uid":2438569,"ip_address":"","ucode":"242CAEC0FD9C77","user_header":"https://static001.geekbang.org/account/avatar/00/25/35/a9/5f309b81.jpg","comment_is_top":false,"comment_ctime":1616840641,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"确实微内核是单独一个应用，规则引擎算是一个案例吧","like_count":0},{"had_liked":false,"id":130422,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1567462982,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"打卡，微内核架构设计和Atlas这两个都貌似都未接触过，先记下一笔，日后回头再看。","like_count":0},{"had_liked":false,"id":20495,"user_name":"请叫我大圣","can_delete":false,"product_type":"c1","uid":1107419,"ip_address":"","ucode":"424FE29692376A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/db/e2a87e10.jpg","comment_is_top":false,"comment_ctime":1534482945,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"tomcat也是有.mf文件","like_count":0},{"had_liked":false,"id":285493,"user_name":"ubuntuMax","can_delete":false,"product_type":"c1","uid":2438569,"ip_address":"","ucode":"242CAEC0FD9C77","user_header":"https://static001.geekbang.org/account/avatar/00/25/35/a9/5f309b81.jpg","comment_is_top":false,"comment_ctime":1616840641,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"确实微内核是单独一个应用，规则引擎算是一个案例吧","like_count":0},{"had_liked":false,"id":130422,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1567462982,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"打卡，微内核架构设计和Atlas这两个都貌似都未接触过，先记下一笔，日后回头再看。","like_count":0},{"had_liked":false,"id":20495,"user_name":"请叫我大圣","can_delete":false,"product_type":"c1","uid":1107419,"ip_address":"","ucode":"424FE29692376A","user_header":"https://static001.geekbang.org/account/avatar/00/10/e5/db/e2a87e10.jpg","comment_is_top":false,"comment_ctime":1534482945,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":7,"product_id":100006601,"comment_content":"tomcat也是有.mf文件","like_count":0}]}