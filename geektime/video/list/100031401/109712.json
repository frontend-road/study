{"id":109712,"title":"21 | 异步处理为何要复制线程上下文信息？","content":"<ul>\n<li>\n<p>代码：<a href=\"https://gitee.com/geektime-geekbang/staffjoy\">https://gitee.com/geektime-geekbang/staffjoy</a></p>\n</li>\n<li>\n<p>课件：<a href=\"https://pan.baidu.com/s/1Q7eP3yZ1Vm8J2nhle5RzTQ\">https://pan.baidu.com/s/1Q7eP3yZ1Vm8J2nhle5RzTQ</a> 提取码: 1aeh</p>\n</li>\n</ul>","comments":[{"had_liked":false,"id":117322,"user_name":"刘大明","can_delete":false,"product_type":"c3","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1564023916,"is_pvip":false,"replies":[{"id":43002,"content":"异步调用可以分为进程内进程外两类，主要看异步调用的规模和量，量小进程内处理也没问题，量大考虑进程外的甚至分布式的异步处理。进程内的异步调用可以直接采用Spring Async机制，进程外的异步处理，可以考虑引入kafka等mq。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1564059446,"ip_address":"","comment_id":117322,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100031401,"comment_content":"老师请问一下，这种异步调用，我们为啥不用中间件呢。比如说kafka mq之类的。","like_count":11,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459913,"discussion_content":"异步调用可以分为进程内进程外两类，主要看异步调用的规模和量，量小进程内处理也没问题，量大考虑进程外的甚至分布式的异步处理。进程内的异步调用可以直接采用Spring Async机制，进程外的异步处理，可以考虑引入kafka等mq。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564059446,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2971,"discussion_content":"哦哦。明白了。感谢老师的耐心解答。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564096448,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":175019,"user_name":"旭东(Frank)","can_delete":false,"product_type":"c3","uid":1024486,"ip_address":"","ucode":"176FA629800062","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a1/e6/50da1b2d.jpg","comment_is_top":false,"comment_ctime":1580528378,"is_pvip":false,"replies":[{"id":68188,"content":"前面回复有说明，请参考stackoverflow上的这个帖子的第一个解释，很详细：\nhttps:&#47;&#47;stackoverflow.com&#47;questions&#47;24898547&#47;spring-async-method-called-from-another-async-method。\n\n根源是spring AOP机制的局限性造成。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1580730940,"ip_address":"","comment_id":175019,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100031401,"comment_content":"异步操作不能和调用者放到同一个bean的原因没有解释，老师能解释下就更好了","like_count":4,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482597,"discussion_content":"前面回复有说明，请参考stackoverflow上的这个帖子的第一个解释，很详细：\nhttps://stackoverflow.com/questions/24898547/spring-async-method-called-from-another-async-method。\n\n根源是spring AOP机制的局限性造成。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580730940,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":124182,"user_name":"🐛","can_delete":false,"product_type":"c3","uid":1135831,"ip_address":"","ucode":"CFFC1FEBFADBAB","user_header":"https://static001.geekbang.org/account/avatar/00/11/54/d7/7ab8f58a.jpg","comment_is_top":false,"comment_ctime":1565833097,"is_pvip":false,"replies":[{"id":45659,"content":"你好，这个跟spring async&#47;aop的内部实现机制有关，具体可以参考stackoverflow上的一个回答，解释的比较清楚：https:&#47;&#47;stackoverflow.com&#47;questions&#47;24898547&#47;spring-async-method-called-from-another-async-method","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1565878294,"ip_address":"","comment_id":124182,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100031401,"comment_content":"老师，您好，为什么异步的方法不能和调用异步方法的方法在一个类呢？","like_count":2,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463044,"discussion_content":"你好，这个跟spring async/aop的内部实现机制有关，具体可以参考stackoverflow上的一个回答，解释的比较清楚：https://stackoverflow.com/questions/24898547/spring-async-method-called-from-another-async-method","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565878294,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":244952,"user_name":"💢 星星💢","can_delete":false,"product_type":"c3","uid":1254392,"ip_address":"","ucode":"A402B765222C35","user_header":"https://static001.geekbang.org/account/avatar/00/13/23/f8/24fcccea.jpg","comment_is_top":false,"comment_ctime":1598762215,"is_pvip":false,"replies":[{"id":90188,"content":"这些占位符，具体运行时的取值要看你的运行方式：\n\n1. 如果是本地直接运行，那么取值在项目根目录的config&#47;application.yml文件中。\n2. 如果docker compose运行，那么取值在项目根目录的.env文件中。\n3. 如果k8s运行，那么取值在k8s的secret中，相关配置在项目根目录的k8s&#47;{env}&#47;config目录中。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1598882102,"ip_address":"","comment_id":244952,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100031401,"comment_content":"波波老师，问个基础的问题，我看到yaml文件中有好多占位符的值 比如 \n   sentry-dsn: ${SENTRY_DSN}\n  aliyun-access-key: ${ALIYUN_ACCESS_KEY}\n  aliyun-access-secret: ${ALIYUN_ACCESS_SECRET}  ${}占位符的值，是怎么找到的。只看到springboot把它外部化配置自动装配成bean,没看到值具体在哪里，用idea也没发现具体的值在哪。对yaml和springboot集成 不太熟悉。","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504748,"discussion_content":"这些占位符，具体运行时的取值要看你的运行方式：\n\n1. 如果是本地直接运行，那么取值在项目根目录的config/application.yml文件中。\n2. 如果docker compose运行，那么取值在项目根目录的.env文件中。\n3. 如果k8s运行，那么取值在k8s的secret中，相关配置在项目根目录的k8s/{env}/config目录中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598882102,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":121540,"user_name":"韶年","can_delete":false,"product_type":"c3","uid":1269934,"ip_address":"","ucode":"EA4149F98FF39B","user_header":"https://static001.geekbang.org/account/avatar/00/13/60/ae/88d88232.jpg","comment_is_top":false,"comment_ctime":1565156600,"is_pvip":false,"replies":[{"id":44719,"content":"你好，每个应用&#47;系统的场景和流量模式各不相同，所以没有所谓的标准设置，一般都是预设一个估计值(例如可以设置成CPU的核数)，然后做好测试和生产监控，根据实际测试和监控数据再进行调整。实际可以对接Apollo等配置中心，这样可以按需动态调整设置。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1565189605,"ip_address":"","comment_id":121540,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100031401,"comment_content":"老师，我怎么知道在我的系统中，线程池该设置多大？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461841,"discussion_content":"你好，每个应用/系统的场景和流量模式各不相同，所以没有所谓的标准设置，一般都是预设一个估计值(例如可以设置成CPU的核数)，然后做好测试和生产监控，根据实际测试和监控数据再进行调整。实际可以对接Apollo等配置中心，这样可以按需动态调整设置。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565189605,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116777,"user_name":"WL","can_delete":false,"product_type":"c3","uid":1173771,"ip_address":"","ucode":"6277DCD776B87E","user_header":"https://static001.geekbang.org/account/avatar/00/11/e9/0b/1171ac71.jpg","comment_is_top":false,"comment_ctime":1563925627,"is_pvip":false,"replies":[{"id":42819,"content":"对，异步操作抛出的异常，一般在主线程里头是捕获不到的。大部分场景下，如果异步操作抛异常，捕获的话能做的就是记录错误日志，事后可以备查，或者尝试后备操作，还有就是关闭一起启用的资源，防止资源泄漏。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1563972666,"ip_address":"","comment_id":116777,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100031401,"comment_content":"老师请问一下在ServiceHelper的syncUserAsync(String userId)方法里面有很多抛出异常的处理, 我想请问一下在异步方法里抛出异常有啥作用, 调用他的类能接catch到异步方法中抛出的异常吗?\n\n","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459680,"discussion_content":"对，异步操作抛出的异常，一般在主线程里头是捕获不到的。大部分场景下，如果异步操作抛异常，捕获的话能做的就是记录错误日志，事后可以备查，或者尝试后备操作，还有就是关闭一起启用的资源，防止资源泄漏。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563972666,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":197621,"user_name":"春哥","can_delete":false,"product_type":"c3","uid":1103105,"ip_address":"","ucode":"C20FED6AE27B76","user_header":"https://static001.geekbang.org/account/avatar/00/10/d5/01/befc9f3e.jpg","comment_is_top":false,"comment_ctime":1585388423,"is_pvip":false,"replies":[{"id":75146,"content":"对，爬楼梯看上面有参考链接解释这个问题。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1585658610,"ip_address":"","comment_id":197621,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100031401,"comment_content":"异步操作不能放到同一个bean中，是不是因为AOP代理的问题。","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":489564,"discussion_content":"对，爬楼梯看上面有参考链接解释这个问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585658610,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":188761,"user_name":"Bing","can_delete":false,"product_type":"c3","uid":1198825,"ip_address":"","ucode":"0F9CBF0AA712B7","user_header":"https://static001.geekbang.org/account/avatar/00/12/4a/e9/e2280470.jpg","comment_is_top":false,"comment_ctime":1584413289,"is_pvip":false,"replies":[{"id":72897,"content":"这种复制线程上下文信息，一般在用户驱动的调用的场景下才有意义，比如跟踪用户调用产生的调用链(trace)，或者传递一些用户身份标识信息等。\n\n对于定时任务，通常是机器时钟定期触发的，一般没有必要传递线程上下文，记录日志或者产生metrics对这种场景倒是适用的。这种场景如果确实需要传递参数，建议用DB。\n\n\n\n","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1584442146,"ip_address":"","comment_id":188761,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100031401,"comment_content":"定时任务类中使用这个复制好像会出错,有什么好的处理办法吗","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487511,"discussion_content":"这种复制线程上下文信息，一般在用户驱动的调用的场景下才有意义，比如跟踪用户调用产生的调用链(trace)，或者传递一些用户身份标识信息等。\n\n对于定时任务，通常是机器时钟定期触发的，一般没有必要传递线程上下文，记录日志或者产生metrics对这种场景倒是适用的。这种场景如果确实需要传递参数，建议用DB。\n\n\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584442146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120749,"user_name":"Geek_9695b4","can_delete":false,"product_type":"c3","uid":1134153,"ip_address":"","ucode":"E196700C069A9C","user_header":"https://static001.geekbang.org/account/avatar/00/11/4e/49/20a4b82d.jpg","comment_is_top":false,"comment_ctime":1564988875,"is_pvip":false,"replies":[{"id":44351,"content":"你好，多数据源动态切换这类场景我还没有实际接触过，没有足够上下文所以还不清楚你的具体问题出在哪里。但是，线程级上下文信息传递的一般技术思路：1）在同一个线程里头，可以使用线程局部变量在不同类&#47;方法间传递数据；2)如果线程有切换，那么在切换的边界需要将线程上下文数据进行复制，比如从A线程复制到B线程，这样采用在两个线程间传递数据，保证不断。具体问题建议你看源码+调试跟踪进一步分析。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1565004692,"ip_address":"","comment_id":120749,"utype":1}],"discussion_count":4,"race_medal":0,"score":2,"product_id":100031401,"comment_content":"老师，我在看到这个视频时正好遇到类似的问题。问题是我们系统是使用多数据源动态切换的，也就是不同用户使用不同的数据源，主要思想是extends AbstractRoutingDataSource，这个数据源信息是放在请求头里面的。但是遇到一个问题，就是业务代码中使用多线程时，这个设置的动态数据源无效了，请问一下是什么原因，怎么解决比较好？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461458,"discussion_content":"你好，多数据源动态切换这类场景我还没有实际接触过，没有足够上下文所以还不清楚你的具体问题出在哪里。但是，线程级上下文信息传递的一般技术思路：1）在同一个线程里头，可以使用线程局部变量在不同类/方法间传递数据；2)如果线程有切换，那么在切换的边界需要将线程上下文数据进行复制，比如从A线程复制到B线程，这样采用在两个线程间传递数据，保证不断。具体问题建议你看源码+调试跟踪进一步分析。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565004692,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1666659,"avatar":"https://static001.geekbang.org/account/avatar/00/19/6e/63/b15d1d87.jpg","nickname":"🍒古刹飞鹰🍒","note":"","ucode":"375F9FCF925CA6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":47580,"discussion_content":"老师，他这个问题，可不可以使用像mycat这样的数据库中间件解决呢？启用mycat后，代码层面上看起来使用的就是一个数据库，然后在mycat上进行分流。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573371101,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1134153,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4e/49/20a4b82d.jpg","nickname":"Geek_9695b4","note":"","ucode":"E196700C069A9C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1666659,"avatar":"https://static001.geekbang.org/account/avatar/00/19/6e/63/b15d1d87.jpg","nickname":"🍒古刹飞鹰🍒","note":"","ucode":"375F9FCF925CA6","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":49534,"discussion_content":"我现在换用mycat了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1573610293,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":47580,"ip_address":"","group_id":0},"score":49534,"extra":""}]},{"author":{"id":1225243,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b2/1b/947dfcb8.jpg","nickname":"扛着锄头闯江湖","note":"","ucode":"F2A2793EC8F1E6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":14911,"discussion_content":"这个问题我遇到过，需要注意事务的问题，先起一个事务，再在事务内部进行动态数据源切换是会失效的。 检查一下你的数据配置。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568788810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120299,"user_name":"sayid","can_delete":false,"product_type":"c3","uid":1101465,"ip_address":"","ucode":"E40E0D86768DCA","user_header":"https://static001.geekbang.org/account/avatar/00/10/ce/99/4382727b.jpg","comment_is_top":false,"comment_ctime":1564823062,"is_pvip":false,"replies":[{"id":44147,"content":"课程的目标是让大家不仅是知其然，而且知其所以然，所以采用代码实现自己维护调用Context，这个不复杂，工作量也不大，而且也很灵活。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1564842194,"ip_address":"","comment_id":120299,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100031401,"comment_content":"老师好，为何不用Spring 事件监听模式，结合spring的异步去使用，而是自己去维护调用上下文？","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461278,"discussion_content":"课程的目标是让大家不仅是知其然，而且知其所以然，所以采用代码实现自己维护调用Context，这个不复杂，工作量也不大，而且也很灵活。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564842194,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119110,"user_name":"Jxin","can_delete":false,"product_type":"c3","uid":1251111,"ip_address":"","ucode":"4C03928388C413","user_header":"https://static001.geekbang.org/account/avatar/00/13/17/27/ec30d30a.jpg","comment_is_top":false,"comment_ctime":1564506511,"is_pvip":false,"replies":[{"id":43785,"content":"你好，回复你的第2个问题，课程案例项目中的线程池设置只是为了简单演示， 实际项目中可以根据不同处理场景分别配置多个线程池。项目中的线程池配置数据也是预估的，没有所谓经验值，实际要做好线程池的生产监控，然后根据生产实际流量情况进行调整，可以考虑对接配置中心，方便根据需要调整配置。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1564578962,"ip_address":"","comment_id":119110,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100031401,"comment_content":"1.为啥不用中间件？因为成本。a.规模量级用进程内异步难以支撑时才会采用mq实现生产消费模式。（量级够不够，就看消费能持平不，毕竟进程这消息堆积太占空间了）。b.最终一致强要求，进程内异步没玩好容易丢消息，产生中间状态数据啥的，又要写一堆定时任务去检验，自修复。\n2.看老师这个线程池的名字，感觉全部异步任务都用它了。好像也有说法是最好就用一个线程池。但是，总觉得不灵活。比如我有一些任务是io操作耗时较长的，我就喜欢单独领出来用一个线程池去承接，并根据压测指标调整线程数以提高吞吐（当然，黄金流程和其他流程我也偏向于剥离）。接着就是这个队列，作为公用线程池100个的量级是否太小了？然后最多5条线程合适吗？毕竟我配置每个线池也有5条，总的会有四五个池，合起来就20左右线程总数。核数加一还是核数*2加一？怎么去权衡。","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460748,"discussion_content":"你好，回复你的第2个问题，课程案例项目中的线程池设置只是为了简单演示， 实际项目中可以根据不同处理场景分别配置多个线程池。项目中的线程池配置数据也是预估的，没有所谓经验值，实际要做好线程池的生产监控，然后根据生产实际流量情况进行调整，可以考虑对接配置中心，方便根据需要调整配置。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564578962,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}