{"id":253299,"title":"11 | PMQ 2.0的设计解析（上）","content":"<p><strong>课件和Demo地址</strong><br>\n<a href=\"https://gitee.com/geektime-geekbang/geektime-distributed\">https://gitee.com/geektime-geekbang/geektime-distributed</a></p>","comments":[{"had_liked":false,"id":247604,"user_name":"OlafOO","can_delete":false,"product_type":"c3","uid":1019254,"ip_address":"","ucode":"105F8B194ED37B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/8d/76/994a9929.jpg","comment_is_top":false,"comment_ctime":1599754239,"is_pvip":false,"replies":[{"id":91018,"content":"有兴趣可以看pmq源码：\nhttps:&#47;&#47;github.com&#47;ppdaicorp&#47;pmq\n是一个经典的分库分表案例。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1599918439,"ip_address":"","comment_id":247604,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"讲的太精彩了，还能用数据库搞，以前就没想过..","like_count":10,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505449,"discussion_content":"有兴趣可以看pmq源码：\nhttps://github.com/ppdaicorp/pmq\n是一个经典的分库分表案例。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599918439,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1019254,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/8d/76/994a9929.jpg","nickname":"OlafOO","note":"","ucode":"105F8B194ED37B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":305424,"discussion_content":"嗯嗯，先看完老师的专栏，谢谢老师回复😁","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1599919428,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229671,"user_name":"geekbang","can_delete":false,"product_type":"c3","uid":1121231,"ip_address":"","ucode":"ED660016CD014C","user_header":"","comment_is_top":false,"comment_ctime":1593095436,"is_pvip":false,"replies":[{"id":84833,"content":"DB对比文件的优势：\n1.  数据库成熟，并且已经有成熟的HA方案，比文件更可靠\n2. 可以方便查消息\n3. Broker和存储分离，Broker无状态，可以简单扩展\n\n性能比较：DB和文件应该在同一量级，写入和读取基本都是顺序操作，没有哪个有明显的性能问题。\n\nDB的劣势：需要单独的DB数据库，成本稍高，不像Kafka只要Broker上的文件存储就好了。\n","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1593189054,"ip_address":"","comment_id":229671,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"波波老师，请问基于数据库存储除了实现简单外，还有其他优势吗？它和基于文件存储比较有哪些劣势呢？他们的性能比较会是一个什么情况呢？","like_count":6,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499584,"discussion_content":"DB对比文件的优势：\n1.  数据库成熟，并且已经有成熟的HA方案，比文件更可靠\n2. 可以方便查消息\n3. Broker和存储分离，Broker无状态，可以简单扩展\n\n性能比较：DB和文件应该在同一量级，写入和读取基本都是顺序操作，没有哪个有明显的性能问题。\n\nDB的劣势：需要单独的DB数据库，成本稍高，不像Kafka只要Broker上的文件存储就好了。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593189054,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":2,"child_discussions":[{"author":{"id":2823089,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/13/b1/9f089294.jpg","nickname":"施荣荣","note":"","ucode":"7D16C877D40630","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":530648,"discussion_content":"大佬请教一下，关于db和文件的性能在同一量级的原因？我去查了一下mysql的资料，b+树叶子节点存储的记录是顺序的，所以读取id为1234这样按顺序的记录时，mysql底层文件的操作也就是顺序读，我说的对吗？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1637116852,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":499584,"ip_address":"","group_id":0},"score":530648,"extra":"{\"user_type\":1}"},{"author":{"id":2055809,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/5e/81/82709d6e.jpg","nickname":"码小呆","note":"","ucode":"44532D6ABF9340","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2823089,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/13/b1/9f089294.jpg","nickname":"施荣荣","note":"","ucode":"7D16C877D40630","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":591205,"discussion_content":"这里库表id的设计 应该不能用 自增 来使用,因为要考虑分布式的情况,需要使用分布式id","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666362411,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":530648,"ip_address":"广东","group_id":0},"score":591205,"extra":""}]}]},{"had_liked":false,"id":232626,"user_name":"Geek_jm95v6","can_delete":false,"product_type":"c3","uid":1154286,"ip_address":"","ucode":"291F1A4DAA3DB7","user_header":"https://static001.geekbang.org/account/avatar/00/11/9c/ee/f5cb8bd3.jpg","comment_is_top":false,"comment_ctime":1594052203,"is_pvip":false,"replies":[{"id":86106,"content":"嗯，从理论上讲，生产者&#47;消费者直接访问数据库，也可以实现PMQ的功能。但是这样生产者&#47;消费者就和数据库直接耦合了，而且生产者&#47;消费者的逻辑会变得非常复杂，难以维护和升级，比方说数据库扩容的话，生产&#47;消费者的连接字符串都需要调整。\n\n增加一层Broker作为间接，生产&#47;消费者和DB就不耦合，通过Broker可以屏蔽DB的扩容升级等变化，而且生产&#47;消费逻辑简单，易于升级维护。\n","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1594310810,"ip_address":"","comment_id":232626,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"波波老师好 想问下生产者发送消息到broker上 以及消费者去拉消息 broker只是做了一个消息落库的操作和查询的操作吗？如果是这样 那生产者直接将消息入库和消费端直接去查询有啥区别？能详细说下吗？","like_count":2,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500711,"discussion_content":"嗯，从理论上讲，生产者/消费者直接访问数据库，也可以实现PMQ的功能。但是这样生产者/消费者就和数据库直接耦合了，而且生产者/消费者的逻辑会变得非常复杂，难以维护和升级，比方说数据库扩容的话，生产/消费者的连接字符串都需要调整。\n\n增加一层Broker作为间接，生产/消费者和DB就不耦合，通过Broker可以屏蔽DB的扩容升级等变化，而且生产/消费逻辑简单，易于升级维护。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594310810,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1046552,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/f8/18/3e5e7db3.jpg","nickname":"Lorgine","note":"","ucode":"DB64E85327A252","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":289834,"discussion_content":"Mq本质就是你说的这个功能的提炼。你自己去实现要考虑扩容缩容，还有怎么保证多个实例消费多个表的问题？","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1594222418,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":276995,"user_name":"白小龙","can_delete":false,"product_type":"c3","uid":1230191,"ip_address":"","ucode":"34BFCBA8D98AB8","user_header":"https://static001.geekbang.org/account/avatar/00/12/c5/6f/8ba27eab.jpg","comment_is_top":false,"comment_ctime":1612227507,"is_pvip":false,"replies":[{"id":100995,"content":"你的理解是正确的，一个queue里头的数据是状态，如果一个consumerGroup中的两个consumer同时消费的话，必然存在状态竞争问题，加锁对性能的影响非常大，而且两个consumer之间还需要同步消费指针，开销更大，所以一个consumerGroup中的两个consumer不能同时消费一个queue。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1612797609,"ip_address":"","comment_id":276995,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"对于一个partition只能有一个消费指针的理解：如果同一个consumerGroup的两个consumer消费同一个queue（partition），由于各自都存在消费指针，那么这两个consumer就形成了消息资源竞争关系，为了避免重复消费，就得加锁，显然增加了系统复杂性并影响性能。顾一个消费者组的消费者之间不能绑定到同一个queue上。还望老师点评！","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514891,"discussion_content":"你的理解是正确的，一个queue里头的数据是状态，如果一个consumerGroup中的两个consumer同时消费的话，必然存在状态竞争问题，加锁对性能的影响非常大，而且两个consumer之间还需要同步消费指针，开销更大，所以一个consumerGroup中的两个consumer不能同时消费一个queue。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1612797609,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242869,"user_name":"深山小书童","can_delete":false,"product_type":"c3","uid":1079593,"ip_address":"","ucode":"6B5DD3B3D84534","user_header":"https://static001.geekbang.org/account/avatar/00/10/79/29/a90cf777.jpg","comment_is_top":false,"comment_ctime":1597880711,"is_pvip":false,"replies":[{"id":89707,"content":"同一个topic的所有partition存储的消息都是属于这个topic的，比方说和order订单更新消息相关联的topic叫order_update_msg，那么所有和订单更新相关的消息，都会分布在这个order_update_msg的不同partition中。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1598106975,"ip_address":"","comment_id":242869,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"波波老师，同一个topic的所有partition存储的消息都是一样的吗？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504117,"discussion_content":"同一个topic的所有partition存储的消息都是属于这个topic的，比方说和order订单更新消息相关联的topic叫order_update_msg，那么所有和订单更新相关的消息，都会分布在这个order_update_msg的不同partition中。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1598106975,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":230897,"user_name":"江流","can_delete":false,"product_type":"c3","uid":1343480,"ip_address":"","ucode":"D1FDC0777BF88B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTL23Wicb0gO9RIYCXOiajnCf92RDd0MOOGuFxx4ZKQpDDlMgLbZecMDdnfCEIPQkbebgBuic2SXfm0Gw/132","comment_is_top":false,"comment_ctime":1593517658,"is_pvip":false,"replies":[{"id":85373,"content":"你好，我并没有说文件系统一定没有数据库可靠，毕竟数据库底层也是基于文件系统的。\n\n只不过MySQL之类的数据库已经比较成熟，大量可靠性技术已经沉淀在里头，换句话说，坑已经基本上被踩平了。\n\n基于文件在不同节点上存副本，当然可以做到高可靠，不过我觉得有点复杂了，远没有MySQL主从来得简单成熟让人放心(波波个人观点)。\n\n","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1593619224,"ip_address":"","comment_id":230897,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"波波老师，我有个疑问：你说基于文件系统来做没有数据库可靠是因为数据库有日志恢复功能吗，但是基于文件来做在不同节点上有副本来保证可靠性啊？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":500066,"discussion_content":"你好，我并没有说文件系统一定没有数据库可靠，毕竟数据库底层也是基于文件系统的。\n\n只不过MySQL之类的数据库已经比较成熟，大量可靠性技术已经沉淀在里头，换句话说，坑已经基本上被踩平了。\n\n基于文件在不同节点上存副本，当然可以做到高可靠，不过我觉得有点复杂了，远没有MySQL主从来得简单成熟让人放心(波波个人观点)。\n\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593619224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":229930,"user_name":"jhren","can_delete":false,"product_type":"c3","uid":1596987,"ip_address":"","ucode":"60F7CCEA1E2C88","user_header":"https://static001.geekbang.org/account/avatar/00/18/5e/3b/845fb641.jpg","comment_is_top":false,"comment_ctime":1593214903,"is_pvip":false,"replies":[{"id":84922,"content":"PMQ(包括kafka)都是采用消费者拉模式的，不是推模式。也就是说消息是消费者主动来拉的，不是Broker主动推的。这个一定要先理解。\n\n消息在PMQ的DB中(或者Kafka的broker上)，只需要存一份。但是消费者可以组成不同的消费者组(consumer group)，然后都可以来拉同一个分区中的消息，只要各自维护自己的消费者指针就可以了。\n\n这一节课你可以多消化下，把数组和指针的那个ppt看明白。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1593270548,"ip_address":"","comment_id":229930,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"请问波波老师，同一个消息要发给多个consumer分别独立消费。\n是把这个消息在该Topic的每个Partition都发一次吗？","like_count":1,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":499702,"discussion_content":"PMQ(包括kafka)都是采用消费者拉模式的，不是推模式。也就是说消息是消费者主动来拉的，不是Broker主动推的。这个一定要先理解。\n\n消息在PMQ的DB中(或者Kafka的broker上)，只需要存一份。但是消费者可以组成不同的消费者组(consumer group)，然后都可以来拉同一个分区中的消息，只要各自维护自己的消费者指针就可以了。\n\n这一节课你可以多消化下，把数组和指针的那个ppt看明白。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593270548,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1596987,"avatar":"https://static001.geekbang.org/account/avatar/00/18/5e/3b/845fb641.jpg","nickname":"jhren","note":"","ucode":"60F7CCEA1E2C88","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":286773,"discussion_content":"明白了 谢谢波波老师 我再仔细看一遍这节课","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1593275146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289282,"user_name":"写点啥呢","can_delete":false,"product_type":"c3","uid":1065272,"ip_address":"","ucode":"C19032CF1C41BA","user_header":"https://static001.geekbang.org/account/avatar/00/10/41/38/4f89095b.jpg","comment_is_top":false,"comment_ctime":1618968114,"is_pvip":false,"replies":[{"id":106065,"content":"1，自增主键可能出现不连续，生产端没有关系，消费端client会自动处理。\n2，mysql数据库的HA主要采用MySQL MHA机制实现，解决多库事务问题成本很高，发生问题概率很低，综合评估下来暂没有实现，如果确实发生，目前依赖人工解决。","user_name":"作者回复","user_name_real":"杨波","uid":1030344,"ctime":1621095772,"ip_address":"","comment_id":289282,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"数据库自增列有数值不连续的情况(比如事务回滚，数据库崩溃恢复场景），请问波波老师PMQ在工程上是如何处理这种情况的？\n另外利用数据库是如何实现partition replication来做到数据高可用呢（如何解决多库间事务）。谢谢老师","like_count":0,"discussions":[{"author":{"id":1030344,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/b8/c8/c94d38a7.jpg","nickname":"杨波","note":"","ucode":"FA3418BB703BCA","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518874,"discussion_content":"1，自增主键可能出现不连续，生产端没有关系，消费端client会自动处理。\n2，mysql数据库的HA主要采用MySQL MHA机制实现，解决多库事务问题成本很高，发生问题概率很低，综合评估下来暂没有实现，如果确实发生，目前依赖人工解决。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621095772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":372258,"user_name":"张辉","can_delete":false,"product_type":"c3","uid":3583297,"ip_address":"北京","ucode":"28F6CB14AA51D3","user_header":"https://static001.geekbang.org/account/avatar/00/36/ad/41/a89e7c56.jpg","comment_is_top":false,"comment_ctime":1680914480,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100053601,"comment_content":"波波老师，讲义方便发一下么","like_count":0}]}