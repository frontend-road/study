{"id":505740,"title":"01｜遗留系统之殇：为什么要对遗留系统进行现代化？","content":"<p>你好，我是姚琪琳。</p><p>不知道你是否跟曾经的我一样，身处一个遗留系统的漩涡之中，每天为毫无头绪的代码和混乱不堪的架构发愁。一个新的需求来了，都不知道从哪儿开始改起，即便看似简单的需求都要很久才能上线。</p><p>假如你也如此，请不要悲伤，也不要心急，其中有很多妥善的应对之法，我会在这个专栏中一一交付给你。</p><p>但在此之前啊，我想我们是不是得先明确一下，到底什么样的系统才能称之为遗留系统呢？它存在哪些问题，复杂在哪里？</p><p>这节课我们就来一探究竟，好为我们后面深入学习遗留系统奠定一个良好的基础。同时，我们也可以看看在高成本的现代化改造之下，为什么遗留系统还要迎难而上？</p><h2>关于遗留系统的误区</h2><p>请你先思考这样一个问题：假如一个系统七八年了，它是不是个遗留系统？</p><p>系统的时间长等同于就是遗留系统，这是很多人的一个误区。虽然大多数遗留系统确实是存在的时间很长，但并不等于时间长的都是遗留系统。</p><p>这里分享一个我的项目经历。我之前曾在一个项目上工作6年多，这是一个有着12年历史的老项目。</p><p>它的技术栈最初是.NET Framework，现在已经有部分迁移到了.NET Core；它最初是单体架构，现在是一个小单体加多个微服务；它从第一行代码开始就使用TDD的方式开发，至今已经有30000多个不同类型的测试；它一开始使用SVN来管理源代码，不过早在十年前就被迁移到了Git；它从第一天就有CI/CD相伴，并且一直坚持基于主干开发的分支策略，每个月都有稳定的版本发布；它没有一行注释，但是任何开发人员都能通过阅读源代码快速了解系统的实现，也就是说代码质量相当高……</p><!-- [[[read_end]]] --><p>这个系统历时12年之久，比很多公司活的时间都长。那它是遗留系统吗？答案是否定的。因为它的代码质量高、架构合理、自动化测试丰富、DevOps成熟度也高，各种技术、工具都是相对先进的，怎么能说是遗留系统呢？</p><p>这里我还想请你进一步思考一下：存在时间短的系统就不是遗留系统吗？</p><p>仍然拿我个人经历过的一个项目来举例。它是07年左右开发完成的，当我10年加入项目组的时候发现，它仍旧是基于JDK 1.4的（那个时候Java 6已经发布4年了），很多Java的新特性都无法使用。它是一个C/S结构的软件，前端基于Java富客户端，后端是一个大单体向前端提供RPC服务；它没有一行测试，每改一行代码都提心吊胆，有时为了不影响别的功能，只好把代码复制一份，加入自己的逻辑，这就导致了大量的重复代码；每次发布日期都是一拖再拖，而部署到生产环境上的war包，甚至在是开发机器上打包的……</p><p>别看这个系统只开发完3年，但毫不客气地说，它从刚开发完毕的那一刻起，恐怕就是个遗留系统。它的代码质量差、架构不可演进、没有自动化测试、缺乏DevOps，各种技术、工具也十分落后、老旧，这样的系统，即使刚开发完，也是遗留系统。</p><p>那么从上面的描述看，你大概已经发现了我判断遗留系统的几个维度：<strong>代码、架构、测试、DevOps以及技术和工具</strong>。</p><p>所以说啊，时间长短并不是衡量遗留系统的标准。代码质量差、架构混乱、没有测试、纯手工的DevOps（或运维）、老旧的技术和工具，才是遗留系统的真正特点。</p><p>接下来我们就从这些特点出发，逐一分析一下它们都造成了哪些问题。</p><h2>遗留系统的特点和问题</h2><p>首先就是代码质量差。我们说优秀的代码都是相似的，而糟糕的代码则各有各的糟糕之处。</p><p>我曾治理过一个有着6000行代码的单个方法，至今印象深刻。其中包含6个大的if/else块，每个块中大概有1000行左右的代码，这6个1000行的代码只有十分细小的差别。显然是开发人员为了偷懒，不敢在原代码上改动，于是复制出来加入自己的逻辑。他倒是图省事儿了，但是对于维护人员来说简直是噩梦。正所谓编码一时爽，维护火葬场。</p><p>其次是架构，这也是遗留系统的重灾区。一个软件架构的作用，是要解决多个业务模块之间的协作问题。但如果架构混乱，多个模块之间往复调用，数据也是随意访问，模块之间的边界就会变得模糊，数据所有权也会变得含糊。试想一下，如果一张表被10个模块访问，谁能说得清这张表到底属于哪个模块呢？</p><p>下图是一家银行的核心应用系统模块之间的交互图，我想没有一个人愿意工作在这样的系统上吧？</p><p><img src=\"https://static001.geekbang.org/resource/image/24/ae/240594a8fb368884641cc981beed27ae.png?wh=1200x688\" alt=\"图片\"></p><p>综合来看，代码和架构的质量差会导致遗留系统的维护成本相当高昂。这里的维护就包括：新需求的添加、线上Bug的修改，以及为了维护系统运行所需投入的软硬件和人力等。</p><p>我说这些可不是空穴来风，IEEE就曾报道过，2010年以来，全世界在IT产品和服务上的支出达到了35万亿美元。其中四分之三用于运营和维护现有的IT系统，至少有2.5万亿用于尝试替换旧系统，其中差不多三分之一的资金都打了水漂（这个报道详情你感兴趣的话，可以看<a href=\"https://spectrum.ieee.org/computing/it/inside-hidden-world-legacy-it-systems\">这里</a>）。</p><p>企业在遗留系统上的投入巨大，却没能得到相称的回报。很多资金只是用来维持系统的现状，却不能让它们变得更好。</p><p>更严重的是，代码和架构的落后还会导致系统在合规和安全方面的问题。</p><p>随着我国法律法规的健全，软件系统的合规性越来越重要，而一个面对任何需求都难以实现的遗留系统，要想进行修改以符合新的法律法规，是难上加难的事情。去年我国正式施行了《中华人民共和国数据安全法》（即中国的GDPR），明确规定了软件系统的数据安全规范。如果不能依法进行系统的整改，将面临法律的制裁。</p><p>而在遗留系统开始构建的时候，可能就没有考虑太多的安全性。随着新的攻击手段越来越丰富，遗留系统的安全性越来越脆弱，企业也很难对此投资去专门改善安全性。</p><p>然后我们接着看缺乏甚至没有测试所造成的问题。在一个遗留系统上添加新需求简直如履薄冰，当你好不容易找到要修改的位置，敲了几行代码感觉可以了的时候，系统的另一个功能可能会因为你的这几行代码而崩溃。</p><p>而一个线上Bug想要找到元凶，可能会难如登天，一方面缺乏有效的日志难以定位（很多遗留系统的日志是打在命令行里的），另一方面修复了一个Bug也可能会导致更多的Bug。</p><p>这时就体现出自动化测试的重要性了。我不知道你的系统里有没有或者有多少测试，总之我在那个有着30000多个自动化测试的项目上修复一个Bug的过程是这样的：</p><p>1.先在本地复现Bug，找到产生这个Bug的业务场景；<br>\n2.为这个业务场景添加一个自动化测试并运行，发现这个测试是失败的；<br>\n3.修改代码，让这个新增的测试通过；<br>\n4.运行所有的测试，确保所有的测试通过。</p><p>经过这一系列操作，我就可以有十分有信心地宣布，这个Bug被我修复了，而且在目前测试覆盖的场景下没有引入新的Bug。但对于没有测试的遗留系统，在测试人员告知测试通过之前，我简直是胆战心惊。</p><p>那遗留系统落后的DevOps手段会造成哪些问题呢？</p><p>这会造成重大的安全隐患。像我前面举的那个例子，部署到生产环境的安装包是本地打出来的，就是非常严重的安全问题。不知你是否记得几年前著名的XCodeGhost事件，开发人员使用非官方渠道下载的注入了恶意代码的XCode，并用这样的XCode打包App，上传到了App Store上。结果下载了这种App的手机信息就被窃取了。</p><p>这里多说两句，这次事件延伸到我们的日常工作中也是有值得深思之处的。</p><p>一是不要从非官方渠道下载开发工具，但这个教训直到现在仍然没有引起足够的重视，仍然有很多团队使用的付费开发工具不是从官方渠道下载的。二是不要在开发机器上打包部署到非开发环境（特别是生产环境）上，要通过CI/CD来编译、打包和部署（当然CI/CD上的工具也必须是从官方渠道下载）。这就是DevOps的作用之一。</p><p>最后，技术和工具也可能存在很大的安全漏洞（比如前段时间爆雷的log4j）。新的系统虽然也存在这样的风险，但是非常容易补救。反观遗留系统的工具升级，那就举步维艰了，原因也很简单，投入产出比合不来。</p><p>另外，落后的技术和工具也使得遗留系统难以与新系统集成。基于Delphi、PowerBuilder、VB或Lotus Notes那一代的桌面应用，就是很好的例子。新的开发团队在面临遗留系统集成的时候，往往都是唯恐避之不及。这样的系统也使得自己所拥有的企业核心数据成为孤岛，难以与其他系统互联。</p><h2>什么是遗留系统？</h2><p>说了这么多，我们似乎已经有了一个很具体的关于遗留系统的画像了，参考如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/29/e5/2956b29efbd201cf8ecabab096fe0ae5.jpg?wh=1920x840\" alt=\"图片\"></p><p>那是不是可以进一步抽象一下概念了呢？</p><p>很简单，不妨直接看看维基百科是如何定义的吧：</p><blockquote>\n<p>在计算机领域，遗留系统是一种使用旧的方法和技术的、过时的，却仍旧在使用的计算机系统。</p>\n</blockquote><p>而Gartner给出的定义是：</p><blockquote>\n<p>基于过时技术但对日常运营至关重要的信息系统。</p>\n</blockquote><p>嗯，有信息重合，我们找找关键字：<strong>旧的、过时的、重要的、仍在使用的</strong>……</p><p>这里找找对应的例子，辅助下理解。不知道你是否看过一些医疗类型的美剧，还记得发生危急情况时，医院是如何通知医生们的吗？是使用寻呼机——一个在现实生活中已经寿终正寝了快20年的古老的通信设备。</p><p>难道美国的通信设施如此落后吗？当然不是，诞生了iPhone和Android的美国怎么可能通信落后呢？真正落后的是医院的急救寻呼系统。这些系统往往有着六七十年的历史，很难被替换。它就完美符合上面的所有关键字：旧、过时、重要、仍在使用。</p><p>还有Windows XP系统，尽管它很经典，但微软在2014年就已宣布不再维护了。不过直到现在，我们仍然能在很多ATM机上看到它的踪影。</p><p>到这，我们已经完全明确了遗留系统的定义以及它所带来的问题，所以你觉得一个遗留系统还有保留的价值吗？为什么我们没有替换甚至丢弃，还要继续维护，并为其打上重要的标签呢？</p><h2>遗留系统的现代化价值</h2><p>原因有很多。首先，<strong>可能是成本太高了，企业不愿意投入资源去改进；也可能是因为积重难返，根本改不动。</strong>而遗留系统往往都是企业的核心业务系统，支撑着整个企业的业务运营，这样的系统就算问题再多，也是不可替代的。</p><p><strong>其次，遗留系统蕴含了大量的数据资产。</strong>遗留系统中的数据虽然很难与其他系统进行集成，但这部分数据的价值又是巨大的。企业的新系统常常不得不在这些数据的基础之上去构建，其他系统要想获得遗留系统中的数据，就必须对遗留系统进行修改，所以很多团队为了避免修改代码就会去寻求数据库层面的复制和同步，这也是一个选择。</p><p><strong>另外，遗留系统中还藏匿着丰富的业务知识。</strong>由于业务人员长期使用并且养成了习惯，很多软件系统已经与业务融为一体，很难区分哪些是真正的业务，哪些是系统的设计。而由于系统历时太久，已经失去了能够正确描述系统现状的文档，所以到最后只有遗留系统的代码才能够准确表达系统的行为，以及与之对应的业务知识。</p><p>系统改造，有可为有可不为，而对于遗留系统来说，结合其现代化价值，看上去更像是一种不得不为。所谓现代化，其实就是从代码、架构、DevOps和团队结构这四个方面来对遗留系统进行治理。</p><p>既然不能对遗留系统听之任之，我们就要下决心迎难而上，掌握主动权，否则当问题真正出现时就为时已晚了。</p><p>举个例子，疫情期间，美国大量人口失业，但上世纪80年代建造的失业系统无法及时发放失业福利，他们的国税局系统则更加老旧，是60年代建造的，总共需要20个星期的时间才能为符合条件的纳税人发放疫情补贴。</p><p>我们看到的是，在全球疫情这种黑天鹅事件发生时，一方面，高响应力的公司能够快速推出像疫情地图、行程码这种全新的服务，以造福社会服务大众；而一方面，陈旧的遗留系统却在拖着整个时代的后腿。</p><p>用巴菲特的话说就是，当潮水退去之后，你才知道谁在裸泳。</p><p>如果说不得不为，那怎么为之更好呢？</p><p>在数字化时代，每家企业都应该意识到科技是核心竞争力，要依赖科技去重塑业务、创造新的商业模式，创造数字化收益。也就是我们常说的Tech@Core。</p><p>很多互联网公司的数字化基因是与生俱来的，它们能够根据当前的形式和热点迅速地开启一个全新的商业模式并站稳脚跟。比如在疫情下买菜难的问题，很多公司就迅速推出了买菜App。</p><p>然而与此同时，对于传统企业来说，与上下游客户和供应商合作的数字化需求其实也是在不断增多的。以汽车保险这个行业为例，与车主、4S店、汽车制造商、交管系统等等合作方之间，存在着大量的互联需求，这里面有很多商机。一个有雄心的企业是不可能用一个落后的遗留系统去应对这些挑战的。</p><p><img src=\"https://static001.geekbang.org/resource/image/16/0b/165f49aa7fd90fdaa8133c72c120ea0b.jpg?wh=1920x1253\" alt=\"图片\" title=\"图片来源网络\"></p><p>所以，迎难而上是必须的，让老旧、过时的遗留系统变得现代化也是必须的，这样才能更好地为企业的战略和运营服务。</p><h2>总结</h2><p>总结一下今天的内容。</p><p>我们从业界对遗留系统的定义中总结出了4个关键字：<strong>旧、过时、重要、仍在使用</strong>。然而人们对于遗留系统的认识存在一个普遍的误区，即时间长的系统就是遗留系统。</p><p>事实并非如此。有些系统时间虽长，但如果一直坚持现代化的开发方式，在代码质量、架构合理性、测试策略、DevOps等方面都保持先进性，这样的系统就像陈年的老酒一样，历久弥香。而有些系统虽然刚刚开发完成，但如果在上述几个方面都做得不好，我们也可以把它叫做遗留系统。</p><p>遗留系统在维护成本、合规性、安全性、集成性等方面都会给企业造成巨大的负担，但同时也蕴含着丰富的数据和业务资产。我们应该对遗留系统进行现代化，让它重新焕发青春。</p><p>那么遗留系统的现代化都包含哪些方面呢，<a href=\"https://time.geekbang.org/column/article/506570\">下节课</a>我们就揭晓谜题。</p><h2>思考题</h2><p>如果你现在正工作在遗留系统上，你或你的团队最大的痛点是什么？你们又是如何解决这些痛点的？</p><p>期待你的分享，我们可以在留言区进行互动交流！如果今天的学习让你有所收获，也欢迎把课程分享给有需要的朋友，我们下节课再见！</p>","neighbors":{"left":{"article_title":"开篇词｜你现在所写的每一行代码，都是未来的遗留系统","id":505735},"right":{"article_title":"02 | 遗留系统现代化：遗留系统的四化建设","id":506570}},"comments":[{"had_liked":false,"id":341624,"user_name":"子夜枯灯","can_delete":false,"product_type":"c1","uid":1359678,"ip_address":"","ucode":"5D84BFE7832038","user_header":"https://static001.geekbang.org/account/avatar/00/14/bf/3e/cdc36608.jpg","comment_is_top":true,"comment_ctime":1649738844,"is_pvip":false,"replies":[{"id":"124832","content":"这是非常典型的遗留系统，后面的课程会涉及如何添加自动化测试，如何在没有文档的情况下梳理业务，希望对你有所帮助。","user_name":"作者回复","user_name_real":"编辑","uid":"1009237","ctime":1649766793,"ip_address":"","comment_id":341624,"utype":1}],"discussion_count":1,"race_medal":0,"score":"9.2233720470944993e+18","product_id":100111101,"comment_content":"目前工作的遗留系统是单体应用，架构混乱并且没有任何测试。每次开发时都需要大量的人工测试。方案文档不连续，参加价值很低。","like_count":2,"discussions":[{"author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562036,"discussion_content":"这是非常典型的遗留系统，后面的课程会涉及如何添加自动化测试，如何在没有文档的情况下梳理业务，希望对你有所帮助。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649766793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341620,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":true,"comment_ctime":1649737700,"is_pvip":false,"replies":[{"id":"124830","content":"1和2能做到已经相当棒了，超越了绝大多数遗留系统。<br>3你可以试着先把复杂功能做一下重构，把复杂的代码拆分成相对容易的代码。后面课程会讲如何重构遗留代码。<br><br>一起加油！","user_name":"作者回复","user_name_real":"编辑","uid":"1009237","ctime":1649766658,"ip_address":"","comment_id":341620,"utype":1}],"discussion_count":6,"race_medal":0,"score":"9.223372047094399e+18","product_id":100111101,"comment_content":"在遗留系统中上班写bug加班改bug<br>目前应对策略；<br>1、新功能使用TDD开发<br>2、修改原有功能时尽量加一些测试<br>3、修改特别复杂的原有功能，基本靠运气","like_count":2,"discussions":[{"author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562033,"discussion_content":"1和2能做到已经相当棒了，超越了绝大多数遗留系统。\n3你可以试着先把复杂功能做一下重构，把复杂的代码拆分成相对容易的代码。后面课程会讲如何重构遗留代码。\n\n一起加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649766658,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":3,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":562053,"discussion_content":"谢谢！争取跟上老师进度","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649770021,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":562033,"ip_address":""},"score":562053,"extra":""},{"author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562504,"discussion_content":"每周一三五更新，可以制定个学习计划，你一定可以的～","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649838554,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":562053,"ip_address":""},"score":562504,"extra":""},{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1501385,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e8/c9/59bcd490.jpg","nickname":"听水的湖","note":"","ucode":"B1759F90165D81","race_medal":0,"user_type":8,"is_pvip":false},"discussion":{"id":562528,"discussion_content":"谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649845257,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":562504,"ip_address":""},"score":562528,"extra":""}]},{"author":{"id":1434423,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e3/37/c132802f.jpg","nickname":"WESTWALL","note":"","ucode":"295A030F9D3BF4","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561987,"discussion_content":"非常同意这个“尽量”，因为很多老代码压根就是不可测的，哈哈哈哈……","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1649757829,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1121758,"avatar":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","nickname":"aoe","note":"","ucode":"1C6201EDB4E954","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1434423,"avatar":"https://static001.geekbang.org/account/avatar/00/15/e3/37/c132802f.jpg","nickname":"WESTWALL","note":"","ucode":"295A030F9D3BF4","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562055,"discussion_content":"我也是最近才意识到测试的重要性，以前也基本不测","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649770080,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":561987,"ip_address":""},"score":562055,"extra":""}]}]},{"had_liked":false,"id":341596,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1649729424,"is_pvip":false,"replies":[{"id":"124863","content":"你好，你的迷茫我十分理解，这样的遗留系统的确十分棘手。从你的描述看，似乎看不到业务方&#47;甲方主动重构或替换系统的希望，那么我只能从技术侧试着给你一些建议：<br><br>1. 立即给代码加入版本管理（这个不需要太多工作量），否则代码合并起来太麻烦，增加了很多认知负载（下节课会介绍什么是认知负载）。<br>2. 尝试给系统的关键特性添加一些端到端的测试（针对后端），自动化测试可以重复运行，比人工调试要方便很多；针对Swing的测试工具都比较老了，不知道还能不能跑，你可以试一下Swinger、Squish等等。<br>3. 代码库10G的话，需要看一下是否都是源代码，是否把一些依赖的工具包、系统应用上传的文件、图片等也放到了代码库中，如果是的话，把这部分摘出来，给代码库瘦身。<br>4. 尝试从业务影响这个方面去说服客户，比如系统太旧bug修改缓慢会影响业务、旧系统难以支撑企业创新等等，看看客户是否愿意投资重新开发或者购买新的软件。<br><br>希望对你能有帮助。","user_name":"作者回复","user_name_real":"编辑","uid":"1009237","ctime":1649824117,"ip_address":"","comment_id":341596,"utype":1}],"discussion_count":3,"race_medal":0,"score":"23124565904","product_id":100111101,"comment_content":"老师您好，感谢抽空回答。接上次提问。<br>我先介绍下项目背景，和自身定位.<br>自己属于客户二开工程师，也就是针对现有的代码进行二次开发。<br><br>开发ide:eclipse<br>开发数据库:oracle11g<br>开发代码：本地home文件库<br><br>痛点如下：<br>1.全国各地是部署在各个项目本地机器上面，开发的代码包括源文件全部集中在本地环境，导致代码没有版本管理，会导致开发的文件冲突。<br>2.项目属于老旧巨石项目，本地home文件库一般都是10几G以上，数据库都是几百G，而且很多都是内网环境，可能需要挂VPN才能访问。<br>3.平时的开发模式，就是先操作页面，然后录入操作日志，定位具体的代码文件，然后本地起开发环境去debug该文件，根据现象去定位具体的代码可能出现的问题(可能需要重复debug的次数)，找到问题之后，修改相应代码，一般不敢新建文件，只能在旧文件里面去新增方法，导致代码坏味道很重，但是不敢重构。<br>4.测试，修改代码完成之后，重启服务(可能需要10来分钟)，之后在页面看效果，成功就给实施出相应文件的补丁包，实施经理将补丁放到线上环境验证改动是否成功。<br><br>说明：因为自己还是老测试方式，起服务，页面手动看效果，然后debug跟踪代码，debug效率有时候会很慢，不然定位不到具体的问题。<br><br>想请教下老师，基于这样一个背景下，以及自己的身份，怎么最大化提高工作内容呢，或者说针对这种遗留项目需要怎么做，才能变的更好呢？现在有点迷茫。。。。<br>","like_count":5,"discussions":[{"author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562431,"discussion_content":"你好，你的迷茫我十分理解，这样的遗留系统的确十分棘手。从你的描述看，似乎看不到业务方/甲方主动重构或替换系统的希望，那么我只能从技术侧试着给你一些建议：\n\n1. 立即给代码加入版本管理（这个不需要太多工作量），否则代码合并起来太麻烦，增加了很多认知负载（下节课会介绍什么是认知负载）。\n2. 尝试给系统的关键特性添加一些端到端的测试（针对后端），自动化测试可以重复运行，比人工调试要方便很多；针对Swing的测试工具都比较老了，不知道还能不能跑，你可以试一下Swinger、Squish等等。\n3. 代码库10G的话，需要看一下是否都是源代码，是否把一些依赖的工具包、系统应用上传的文件、图片等也放到了代码库中，如果是的话，把这部分摘出来，给代码库瘦身。\n4. 尝试从业务影响这个方面去说服客户，比如系统太旧bug修改缓慢会影响业务、旧系统难以支撑企业创新等等，看看客户是否愿意投资重新开发或者购买新的软件。\n\n希望对你能有帮助。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1649824117,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1360234,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/KYdfKriaVxKe7P0Hk5e0eD3Y013RXq7Jf8BVr2E8qdm3HMcbSAwjFH0mnK6jHaRufdc2fhgo4EA7ywLIb2fYC1g/132","nickname":"yyk","note":"","ucode":"2EBE855AC995F5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562269,"discussion_content":"没救了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649809321,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1035081,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","nickname":"刘大明","note":"","ucode":"83C063FBD9BF2B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1360234,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/KYdfKriaVxKe7P0Hk5e0eD3Y013RXq7Jf8BVr2E8qdm3HMcbSAwjFH0mnK6jHaRufdc2fhgo4EA7ywLIb2fYC1g/132","nickname":"yyk","note":"","ucode":"2EBE855AC995F5","race_medal":0,"user_type":1,"is_pvip":true},"discussion":{"id":562370,"discussion_content":"是的，项目是公司的核心项目，有好几十年的历史了，现在就是想尽可能的让自己最大化的提高自己的工作。。。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649816033,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":562269,"ip_address":""},"score":562370,"extra":""}]}]},{"had_liked":false,"id":341516,"user_name":"刘大明","can_delete":false,"product_type":"c1","uid":1035081,"ip_address":"","ucode":"83C063FBD9BF2B","user_header":"https://static001.geekbang.org/account/avatar/00/0f/cb/49/0b9ffc8e.jpg","comment_is_top":false,"comment_ctime":1649669860,"is_pvip":false,"replies":[{"id":"124799","content":"你好，这是第一个留言，感谢你学习这门课。<br><br>很遗憾，根据遗留系统的定义，你维护的系统肯定是一个遗留系统，而且问题很严重。单从你的描述无法了解全部细节，我就先从这些线索中给你一两个建议：<br><br>1. 既然“客户已经习惯了这种操作模式”，我猜从客户方来说，就没有修改的紧迫性，可能是系统尚能满足需求，或者是“可以将就着用”。这时遗留系统造成的问题，主要是给开发者的，而不是业务方。只有业务方切实感受到痛点（如交付周期太长，bug太多），才会同意改造。所以，你可以进一步说说，系统的需求量是什么样的？交付周期是多长？是否每次都能按质按量交付？<br><br>2. 从开发角度来说，不知道你说的“工作库”是不是指的代码库，如果是的话，强烈建议你按模块进行拆分，否则很难一次性打开整个工程，甚至编译一次都需要很长时间。拆分之后可以更聚焦，效率更高。当然如果代码耦合很严重，这种拆分也是很难的。<br><br>你可以再多介绍一些细节，我们一起来想想办法。加油！","user_name":"作者回复","user_name_real":"编辑","uid":"1009237","ctime":1649687473,"ip_address":"","comment_id":341516,"utype":1}],"discussion_count":1,"race_medal":0,"score":"23124506340","product_id":100111101,"comment_content":"现在在维护老项目，基于本地的工作库开发，工作库很大有10几个G，而且源码都是根据class反编译出来的才能二次开发，有些页面是基于swing开发的，但是客户已经习惯了这种操作模式，想请教老师，这种开发模式属于遗留系统，应该怎么改造呢？","like_count":5,"discussions":[{"author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561627,"discussion_content":"你好，这是第一个留言，感谢你学习这门课。\n\n很遗憾，根据遗留系统的定义，你维护的系统肯定是一个遗留系统，而且问题很严重。单从你的描述无法了解全部细节，我就先从这些线索中给你一两个建议：\n\n1. 既然“客户已经习惯了这种操作模式”，我猜从客户方来说，就没有修改的紧迫性，可能是系统尚能满足需求，或者是“可以将就着用”。这时遗留系统造成的问题，主要是给开发者的，而不是业务方。只有业务方切实感受到痛点（如交付周期太长，bug太多），才会同意改造。所以，你可以进一步说说，系统的需求量是什么样的？交付周期是多长？是否每次都能按质按量交付？\n\n2. 从开发角度来说，不知道你说的“工作库”是不是指的代码库，如果是的话，强烈建议你按模块进行拆分，否则很难一次性打开整个工程，甚至编译一次都需要很长时间。拆分之后可以更聚焦，效率更高。当然如果代码耦合很严重，这种拆分也是很难的。\n\n你可以再多介绍一些细节，我们一起来想想办法。加油！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649687474,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342426,"user_name":"lipop","can_delete":false,"product_type":"c1","uid":1933878,"ip_address":"","ucode":"22D9A38BD7A298","user_header":"https://static001.geekbang.org/account/avatar/00/1d/82/36/f821ee14.jpg","comment_is_top":false,"comment_ctime":1650258426,"is_pvip":false,"replies":[{"id":"125104","content":"账不能这么算。要看你一个需求的交付时间，包括开发、测试、修bug、上线（假设上线后没bug了）的时间。你在开发时编写了自动化测试，开发时间看似延长了，但同时也缩短了修bug的时间。要算总账，不要纠结于局部。<br><br>另外，全面的自动化测试本身就是软件质量强有力的说明，没有测试的代码，质量好不好，谁也不知道。你可以问问需求方，是要量还是要质。我猜他们一定是两个都要的。","user_name":"作者回复","user_name_real":"编辑","uid":"1009237","ctime":1650293553,"ip_address":"","comment_id":342426,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10240193018","product_id":100111101,"comment_content":"自动化测试需要做到分支覆盖吗，分支覆盖的话感觉光是写测试用例就超过了开发的时间","like_count":2,"discussions":[{"author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564658,"discussion_content":"账不能这么算。要看你一个需求的交付时间，包括开发、测试、修bug、上线（假设上线后没bug了）的时间。你在开发时编写了自动化测试，开发时间看似延长了，但同时也缩短了修bug的时间。要算总账，不要纠结于局部。\n\n另外，全面的自动化测试本身就是软件质量强有力的说明，没有测试的代码，质量好不好，谁也不知道。你可以问问需求方，是要量还是要质。我猜他们一定是两个都要的。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1650293553,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":343288,"user_name":"2022","can_delete":false,"product_type":"c1","uid":1837401,"ip_address":"","ucode":"FF4ACF782DCD32","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/0G5nUhs4Isl9DicqZczPQt51OibNcmfjVxhXdpCoAibvyoOPnK7ZvVBgA3A3Shw08hcmMcuhSer3dmQruJ9xibTb7g/132","comment_is_top":false,"comment_ctime":1650764765,"is_pvip":true,"replies":[{"id":"125368","content":"感谢分享，是十分典型的遗留系统。","user_name":"作者回复","user_name_real":"编辑","uid":"1009237","ctime":1650803676,"ip_address":"","comment_id":343288,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5945732061","product_id":100111101,"comment_content":"痛点：<br>1. 项目周期安排紧凑，总有各种各样的原因导致项目延期<br>2. 设计之初写的设计文档，大致方向没问题，细节上会出现多处变动，但项目开发完后，没人去更新设计文档了。人员流动后，对于修复该模块的bug，可能存在改一发而动全身<br>3. 开发的代码，没有进行自动测试，全依赖人工测试<br>4. 开发人员水平高低，导致即使有设计文档，但写出来的代码架构完全没法看（只保存了最终需求是按照设计文档上做的）。","like_count":1,"discussions":[{"author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566945,"discussion_content":"感谢分享，是十分典型的遗留系统。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650803676,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342318,"user_name":"_MISSYOURLOVE","can_delete":false,"product_type":"c1","uid":1516206,"ip_address":"","ucode":"6B595FD0B32D96","user_header":"https://static001.geekbang.org/account/avatar/00/17/22/ae/8a2945c8.jpg","comment_is_top":false,"comment_ctime":1650187955,"is_pvip":true,"replies":[{"id":"125059","content":"确实是非常典型的遗留系统","user_name":"作者回复","user_name_real":"编辑","uid":"1009237","ctime":1650198673,"ip_address":"","comment_id":342318,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5945155251","product_id":100111101,"comment_content":"如此看来，我们维护的也是一个遗留系统了；据说系统最初的版本是由外包团队开发，后面由公司自己的技术团队接手开始维护，代码质量一言难尽，基本就没有什么文档可言，都已经2022年了，某些项目还一直是使用前后端耦合的方式在进行维护着，由于年代久远，某些业务功能连产品都不知道具体逻辑，需要进行改造的时候，还需要我们去看代码然后给产品梳理相关的业务逻辑","like_count":1,"discussions":[{"author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564242,"discussion_content":"确实是非常典型的遗留系统","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650198673,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341558,"user_name":"公号-技术夜未眠","can_delete":false,"product_type":"c1","uid":1013683,"ip_address":"","ucode":"83825B57CBD952","user_header":"https://static001.geekbang.org/account/avatar/00/0f/77/b3/991f3f9b.jpg","comment_is_top":false,"comment_ctime":1649689454,"is_pvip":true,"replies":[{"id":"124805","content":"后面的课程中会有涉及","user_name":"作者回复","user_name_real":"编辑","uid":"1009237","ctime":1649726794,"ip_address":"","comment_id":341558,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5944656750","product_id":100111101,"comment_content":"老师好，遗留系统和现代化系统进行集成的策略和步骤有哪些？谢谢","like_count":1,"discussions":[{"author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":561805,"discussion_content":"后面的课程中会有涉及","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649726794,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358252,"user_name":"花花大脸猫","can_delete":false,"product_type":"c1","uid":1117318,"ip_address":"江苏","ucode":"8ABDB3F7F4FB0F","user_header":"https://static001.geekbang.org/account/avatar/00/11/0c/86/8e52afb8.jpg","comment_is_top":false,"comment_ctime":1664116667,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1664116667","product_id":100111101,"comment_content":"最大的痛点还是在于业务上的断层，相关的材料缺失严重，只能一步一步的摸索！代码以及架构质量差都能克服，唯独遗留系统的业务get不全是个令人沮丧的事情","like_count":0},{"had_liked":false,"id":356374,"user_name":"hanjc","can_delete":false,"product_type":"c1","uid":1706081,"ip_address":"广东","ucode":"6E53FED35995A1","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKqKBP4UXlpDa9JuHP8icQnrJRNyGib3nzWeibgpoxGA9jKLmnKuHYobqrNib6BGeokPxSqibSDwMet55w/132","comment_is_top":false,"comment_ctime":1662214189,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1662214189","product_id":100111101,"comment_content":"我手上有套16年的系统，还用的ssm，没有maven部署，没有springboot，没有单元测试，好在架构简单，并发也很低，每次只需要新增业务逻辑。","like_count":0},{"had_liked":false,"id":349458,"user_name":"磉盘","can_delete":false,"product_type":"c1","uid":1055624,"ip_address":"","ucode":"1C245991F30A73","user_header":"https://static001.geekbang.org/account/avatar/00/10/1b/88/ac69f57a.jpg","comment_is_top":false,"comment_ctime":1655977073,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1655977073","product_id":100111101,"comment_content":"符合遗留系统的特点就是遗留系统，不管是刚开发好的系统只要没有使用合理的规范就是旧系统，因为之后是需要投入人力进行重构的。<br><br>代码质量、架构合理性、测试策略、DevOps。 软件开发的整体流程（需求分析，架构设计，编码，发布）是不变的，变的是使用的工具和策略。","like_count":0},{"had_liked":false,"id":344115,"user_name":"金尚","can_delete":false,"product_type":"c1","uid":1661060,"ip_address":"","ucode":"70C19FE3C984B0","user_header":"https://static001.geekbang.org/account/avatar/00/19/58/84/a8aac073.jpg","comment_is_top":false,"comment_ctime":1651277963,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1651277963","product_id":100111101,"comment_content":"还有我这个崩溃吗。为了安全升级了maven仓库把依赖的本地jar能丢了，而且这几个jar源码无人维护了。","like_count":0},{"had_liked":false,"id":343125,"user_name":"术子米德","can_delete":false,"product_type":"c1","uid":1898023,"ip_address":"","ucode":"382EA7E2AF0B56","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/27/c27599ae.jpg","comment_is_top":false,"comment_ctime":1650641117,"is_pvip":true,"replies":[{"id":"125353","content":"感谢分享","user_name":"作者回复","user_name_real":"编辑","uid":"1009237","ctime":1650770867,"ip_address":"","comment_id":343125,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650641117","product_id":100111101,"comment_content":"🤔☕️🤔☕️🤔<br>* 📖：遗留系统 ：！=长时间存在的系统，！=短时间存在的系统。判断维度：代码&lt;cha&gt;、架构&lt;luan&gt;、测试&lt;wu&gt;、DevOps&lt;shou&gt;、技术&lt;jiu&gt;、工具&lt;lao&gt;等方面。<br>    * 🤔：代码差，可以重写；测试无，可以补上；DevOps手动，可以改造；技术旧，可以学习；工具老，可以更新；可是，架构乱，难道要重来嘛，那所有的可以都变得可以，还是都变得不可以。这是架构带来的最大困惑，它不是问题的时候，就当它不存在，它称为问题的时候，就像空气里放进点硫磺，怎么也弄不干净的味道。不过，如果核心问题真的是架构乱，重写、补上、改造、学习、更新估计都不顶用。架构的问题，要么是基因病，要么是血液病，发作起来，所有的组织和结构，都无法幸免。<br>* 📖：遗留系统蕴含数据资产，隐藏业务知识，它很重要，它还能用。<br>    * 🤔：遗留系统有点像泥石流后形成的冰川，又乱又脏的感觉，搬不动挪不走的样子。但是它蕴含着大量的淡水，它携带着气候变化的信息。<br>","like_count":0,"discussions":[{"author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":566831,"discussion_content":"感谢分享","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650770867,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342415,"user_name":"西米","can_delete":false,"product_type":"c1","uid":1008363,"ip_address":"","ucode":"17AEDCA32E4986","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/eb/3e319cad.jpg","comment_is_top":false,"comment_ctime":1650252862,"is_pvip":true,"discussion_count":0,"race_medal":0,"score":"1650252862","product_id":100111101,"comment_content":"之前也找过你们 Thoughtworks 西安团队的，准备找你们做系统重构的咨询服务，后面选来选去，没选你们Thoughtworks","like_count":0},{"had_liked":false,"id":342413,"user_name":"西米","can_delete":false,"product_type":"c1","uid":1008363,"ip_address":"","ucode":"17AEDCA32E4986","user_header":"https://static001.geekbang.org/account/avatar/00/0f/62/eb/3e319cad.jpg","comment_is_top":false,"comment_ctime":1650252396,"is_pvip":true,"replies":[{"id":"125100","content":"加油，这其实并不算是特别“遗留”，还是相对好改的","user_name":"作者回复","user_name_real":"编辑","uid":"1009237","ctime":1650291399,"ip_address":"","comment_id":342413,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1650252396","product_id":100111101,"comment_content":"我们现在的系统就是一套大的单体系统，虽然它才上线5年，目前是基于 .net core 3.1 。部署在Azure web app上，看了老师您这篇文章，我可以很快的定义它为：遗留系统，因为没有 devops、测试全靠人工黑盒测试。目前公司也下定决心开始 大力全新打造一套系统。","like_count":0,"discussions":[{"author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":564633,"discussion_content":"加油，这其实并不算是特别“遗留”，还是相对好改的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1650291399,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":342221,"user_name":"killer","can_delete":false,"product_type":"c1","uid":1141036,"ip_address":"","ucode":"22BF63C05CFACE","user_header":"https://static001.geekbang.org/account/avatar/00/11/69/2c/046c7265.jpg","comment_is_top":false,"comment_ctime":1650109204,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1650109204","product_id":100111101,"comment_content":"遗留系统大家都不想碰，可能没烂到一定程度，即要新功能准时上线，又要老代码重构，根本鱼和熊掌不可兼得。先保证新的功能代码的可测试性","like_count":0},{"had_liked":false,"id":341841,"user_name":"escray","can_delete":false,"product_type":"c1","uid":1020525,"ip_address":"","ucode":"1F4204930E47C4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/6d/becd841a.jpg","comment_is_top":false,"comment_ctime":1649856606,"is_pvip":true,"replies":[{"id":"124877","content":"感谢你的分享。<br>寻呼机的例子你说得很对，是因为有死角等看上去的“不可抗力”，才一直保留着，但实际上遗留系统也是因为看上去的“不可抗力”（代码不可测、架构耦合太严重），也才一直忍受着不是吗？中国的医院没有寻呼机，但依然能找得到人。","user_name":"作者回复","user_name_real":"编辑","uid":"1009237","ctime":1649897945,"ip_address":"","comment_id":341841,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1649856606","product_id":100111101,"comment_content":"按照代码质量差、架构混乱、没有测试、纯手工 DevOps、陈旧的技术和工具……这样的标准来说，我们现在正在开发的，就是遗留系统。<br><br>如果以后还有机会写代码，至少要找一个有单元测试的地方。<br><br>为什么要对遗留系统进行现代化，在文中已经说的很明白了，主要是因为维护成本高以及安全隐患，而遗留系统的价值在于不可替代、数据资产、业务知识。<br><br>记得之前有专门招聘 COBOL 程序员的，似乎维护遗留系统也还是挺有“钱途”的。<br><br>给一个不进行现代化的理由，因为体制内的单位大多是项目制的，一个项目做完了之后，维护是没有多少经费支持的，只能再从头来二期。而且，不懂技术的业务领导，往往追求“新潮流技术”，云计算、大数据、人工智能……，但是他们却不会注意到单元测试、CI&#47;CD、DevOps 之类的。<br><br>对于寻呼机的例子，我觉得不是很合适，不知道现在是否还在用，但是寻呼机似乎是比较适合医院场景的。在 2019 年之前，还是有大量的医院使用寻呼机的，主要原因是信号、电池和便携，后来也看到在 2021 年前后会逐步被升级或替代。<br><br>https:&#47;&#47;www.thehealthy.com&#47;healthcare&#47;doctors&#47;hospital-pagers&#47;<br>https:&#47;&#47;www.medicaldevice-network.com&#47;analysis&#47;how-will-uk-hospitals-let-go-of-the-pager&#47;","like_count":0,"discussions":[{"author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562798,"discussion_content":"感谢你的分享。\n寻呼机的例子你说得很对，是因为有死角等看上去的“不可抗力”，才一直保留着，但实际上遗留系统也是因为看上去的“不可抗力”（代码不可测、架构耦合太严重），也才一直忍受着不是吗？中国的医院没有寻呼机，但依然能找得到人。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649897945,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":341696,"user_name":"Bradly","can_delete":false,"product_type":"c1","uid":1008415,"ip_address":"","ucode":"E4876475F2DC26","user_header":"https://static001.geekbang.org/account/avatar/00/0f/63/1f/f049597d.jpg","comment_is_top":false,"comment_ctime":1649773661,"is_pvip":true,"replies":[{"id":"124864","content":"你好，可以举具体一点的例子么？是哪里设计得不好？有些数据库问题可以通过技术手段解决，有些不好解决的，就只能从局部开始慢慢替换了。","user_name":"作者回复","user_name_real":"编辑","uid":"1009237","ctime":1649824215,"ip_address":"","comment_id":341696,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1649773661","product_id":100111101,"comment_content":"目前系统最大的痛点是基础表设计不合理导致系统性能很差。而这些数据又是最重要的数据，改起来难度很大。","like_count":0,"discussions":[{"author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562432,"discussion_content":"你好，可以举具体一点的例子么？是哪里设计得不好？有些数据库问题可以通过技术手段解决，有些不好解决的，就只能从局部开始慢慢替换了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649824215,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1155437,"avatar":"https://static001.geekbang.org/account/avatar/00/11/a1/6d/a4ff33bb.jpg","nickname":"Lee","note":"","ucode":"0FF1C4EAF7F98A","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1009237,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/66/55/098b3396.jpg","nickname":"姚琪琳","note":"","ucode":"68EB7FFC9B8A6F","race_medal":0,"user_type":2,"is_pvip":true},"discussion":{"id":581219,"discussion_content":"老师好，我在疑惑一个问题，以订单域来说，有购买方，有代销渠道，有供应商，那么我们在表结构设计比如订单表，要不要落哪个客户哪个渠道购买了哪个产品，id肯定有，但是要不要落产品名字和客户名字、渠道名字等呢？如果不落，那么对于根据产品名字查询，还是分页的话，个人感觉代码复杂度会增高，人力不足，建议做冗余，有的人又不同意，老师觉得怎么处理更妥当呢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658635557,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":562432,"ip_address":""},"score":581219,"extra":""}]}]}]}