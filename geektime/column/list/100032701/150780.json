{"id":150780,"title":"30 | 真正的大杀器：异步I/O探索","content":"<p>你好，我是盛延敏，这里是网络编程实战的第30讲，欢迎回来。</p><p>在性能篇的前几讲中，我们谈到了阻塞I/O、非阻塞I/O以及像select、poll、epoll等I/O多路复用技术，并在此基础上结合线程技术，实现了以事件分发为核心的reactor反应堆模式。你或许还听说过一个叫做Proactor的网络事件驱动模式，这个Proactor模式和reactor模式到底有什么区别和联系呢？在今天的内容中，我们先讲述异步I/O，再一起揭开以异步I/O为基础的proactor模式的面纱。</p><h2>阻塞/非阻塞 VS 同步/异步</h2><p>尽管在前面的课程中，多少都涉及到了阻塞、非阻塞、同步、异步的概念，但为了避免看见这些概念一头雾水，今天，我们就先来梳理一下这几个概念。</p><p>第一种是阻塞I/O。阻塞I/O发起的read请求，线程会被挂起，一直等到内核数据准备好，并把数据从内核区域拷贝到应用程序的缓冲区中，当拷贝过程完成，read请求调用才返回。接下来，应用程序就可以对缓冲区的数据进行数据解析。</p><p><img src=\"https://static001.geekbang.org/resource/image/e7/9a/e7f477d5c2e902de5a23b0e90cf9339a.png?wh=730*480\" alt=\"\"><br>\n第二种是非阻塞I/O。非阻塞的read请求在数据未准备好的情况下立即返回，应用程序可以不断轮询内核，直到数据准备好，内核将数据拷贝到应用程序缓冲，并完成这次read调用。注意，这里最后一次read调用，获取数据的过程，<strong>是一个同步的过程。这里的同步指的是内核区域的数据拷贝到缓冲区的这个过程。</strong></p><!-- [[[read_end]]] --><p><img src=\"https://static001.geekbang.org/resource/image/4f/0c/4f93d6e13fb78be2a937f962175c5b0c.png?wh=718*602\" alt=\"\"><br>\n每次让应用程序去轮询内核的I/O是否准备好，是一个不经济的做法，因为在轮询的过程中应用进程啥也不能干。于是，像select、poll这样的I/O多路复用技术就隆重登场了。通过I/O事件分发，当内核数据准备好时，再通知应用程序进行操作。这个做法大大改善了应用进程对CPU的利用率，在没有被通知的情况下，应用进程可以使用CPU做其他的事情。</p><p>注意，这里read调用，获取数据的过程，<strong>也是一个同步的过程。</strong></p><p><img src=\"https://static001.geekbang.org/resource/image/ea/dc/ea8552f28b0b630af702a9e7434f03dc.png?wh=756*446\" alt=\"\"><br>\n第一种阻塞I/O我想你已经比较了解了，在阻塞I/O的情况下，应用程序会被挂起，直到获取数据。第二种非阻塞I/O和第三种基于非阻塞I/O的多路复用技术，获取数据的操作不会被阻塞。</p><p>无论是第一种阻塞I/O，还是第二种非阻塞I/O，第三种基于非阻塞I/O的多路复用都是<strong>同步调用技术。为什么这么说呢？因为同步调用、异步调用的说法，是对于获取数据的过程而言的，前面几种最后获取数据的read操作调用，都是同步的，在read调用时，内核将数据从内核空间拷贝到应用程序空间，这个过程是在read函数中同步进行的，如果内核实现的拷贝效率很差，read调用就会在这个同步过程中消耗比较长的时间。</strong></p><p>而真正的异步调用则不用担心这个问题，我们接下来就来介绍第四种I/O技术，当我们发起aio_read之后，就立即返回，内核自动将数据从内核空间拷贝到应用程序空间，这个拷贝过程是异步的，内核自动完成的，和前面的同步操作不一样，应用程序并不需要主动发起拷贝动作。</p><p><img src=\"https://static001.geekbang.org/resource/image/de/71/de97e727087775971f83c70c38d6f771.png?wh=732*462\" alt=\"\"><br>\n还记得<a href=\"https://time.geekbang.org/column/article/141573\">第22</a><a href=\"https://time.geekbang.org/column/article/141573\">讲</a>中讲到的去书店买书的例子吗? 基于这个例子，针对以上的场景，我们可以这么理解。</p><p>第一种阻塞I/O就是你去了书店，告诉老板你想要某本书，然后你就一直在那里等着，直到书店老板翻箱倒柜找到你想要的书。</p><p>第二种非阻塞I/O类似于你去了书店，问老板有没有一本书，老板告诉你没有，你就离开了。一周以后，你又来这个书店，再问这个老板，老板一查，有了，于是你买了这本书。</p><p>第三种基于非阻塞的I/O多路复用，你来到书店告诉老板：“老板，到货给我打电话吧，我再来付钱取书。”</p><p>第四种异步I/O就是你连去书店取书的过程也想省了，你留下地址，付了书费，让老板到货时寄给你，你直接在家里拿到就可以看了。</p><p>这里放置了一张表格，总结了以上几种I/O模型。</p><p><img src=\"https://static001.geekbang.org/resource/image/17/32/17191523d4dc62acf48915b7e601e832.png?wh=1056*127\" alt=\"\"></p><h2>aio_read和aio_write的用法</h2><p>听起来，异步I/O有一种高大上的感觉。其实，异步I/O用起来倒是挺简单的。下面我们看一下一个具体的例子：</p><pre><code>#include &quot;lib/common.h&quot;\n#include &lt;aio.h&gt;\n\nconst int BUF_SIZE = 512;\n\nint main() {\n    int err;\n    int result_size;\n\n    // 创建一个临时文件\n    char tmpname[256];\n    snprintf(tmpname, sizeof(tmpname), &quot;/tmp/aio_test_%d&quot;, getpid());\n    unlink(tmpname);\n    int fd = open(tmpname, O_CREAT | O_RDWR | O_EXCL, S_IRUSR | S_IWUSR);\n    if (fd == -1) {\n        error(1, errno, &quot;open file failed &quot;);\n    }\n\n    char buf[BUF_SIZE];\n    struct aiocb aiocb;\n\n    //初始化buf缓冲，写入的数据应该为0xfafa这样的,\n    memset(buf, 0xfa, BUF_SIZE);\n    memset(&amp;aiocb, 0, sizeof(struct aiocb));\n    aiocb.aio_fildes = fd;\n    aiocb.aio_buf = buf;\n    aiocb.aio_nbytes = BUF_SIZE;\n\n    //开始写\n    if (aio_write(&amp;aiocb) == -1) {\n        printf(&quot; Error at aio_write(): %s\\n&quot;, strerror(errno));\n        close(fd);\n        exit(1);\n    }\n\n    //因为是异步的，需要判断什么时候写完\n    while (aio_error(&amp;aiocb) == EINPROGRESS) {\n        printf(&quot;writing... \\n&quot;);\n    }\n\n    //判断写入的是否正确\n    err = aio_error(&amp;aiocb);\n    result_size = aio_return(&amp;aiocb);\n    if (err != 0 || result_size != BUF_SIZE) {\n        printf(&quot; aio_write failed() : %s\\n&quot;, strerror(err));\n        close(fd);\n        exit(1);\n    }\n\n    //下面准备开始读数据\n    char buffer[BUF_SIZE];\n    struct aiocb cb;\n    cb.aio_nbytes = BUF_SIZE;\n    cb.aio_fildes = fd;\n    cb.aio_offset = 0;\n    cb.aio_buf = buffer;\n\n    // 开始读数据\n    if (aio_read(&amp;cb) == -1) {\n        printf(&quot; air_read failed() : %s\\n&quot;, strerror(err));\n        close(fd);\n    }\n\n    //因为是异步的，需要判断什么时候读完\n    while (aio_error(&amp;cb) == EINPROGRESS) {\n        printf(&quot;Reading... \\n&quot;);\n    }\n\n    // 判断读是否成功\n    int numBytes = aio_return(&amp;cb);\n    if (numBytes != -1) {\n        printf(&quot;Success.\\n&quot;);\n    } else {\n        printf(&quot;Error.\\n&quot;);\n    }\n\n    // 清理文件句柄\n    close(fd);\n    return 0;\n}\n</code></pre><p>这个程序展示了如何使用aio系列函数来完成异步读写。主要用到的函数有:</p><ul>\n<li>aio_write：用来向内核提交异步写操作；</li>\n<li>aio_read：用来向内核提交异步读操作；</li>\n<li>aio_error：获取当前异步操作的状态；</li>\n<li>aio_return：获取异步操作读、写的字节数。</li>\n</ul><p>这个程序一开始使用aio_write方法向内核提交了一个异步写文件的操作。第23-27行是这个异步写操作的结构体。结构体aiocb是应用程序和操作系统内核传递的异步申请数据结构，这里我们使用了文件描述符、缓冲区指针aio_buf以及需要写入的字节数aio_nbytes。</p><pre><code>struct aiocb {\n   int       aio_fildes;       /* File descriptor */\n   off_t     aio_offset;       /* File offset */\n   volatile void  *aio_buf;     /* Location of buffer */\n   size_t    aio_nbytes;       /* Length of transfer */\n   int       aio_reqprio;      /* Request priority offset */\n   struct sigevent    aio_sigevent;     /* Signal number and value */\n   int       aio_lio_opcode;       /* Operation to be performed */\n};\n</code></pre><p>这里我们用了一个0xfa的缓冲区，这在后面的演示中可以看到结果。</p><p>30-34行向系统内核申请了这个异步写操作，并且在37-39行查询异步动作的结果，当其结束时在42-48行判断写入的结果是否正确。</p><p>紧接着，我们使用了aio_read从文件中读取这些数据。为此，我们准备了一个新的aiocb结构体，告诉内核需要把数据拷贝到buffer这个缓冲区中，和异步写一样，发起异步读之后在第65-67行一直查询异步读动作的结果。</p><p>接下来运行这个程序，我们看到屏幕上打印出一系列的字符，显示了这个操作是有内核在后台帮我们完成的。</p><pre><code>./aio01\nwriting... \nwriting... \nwriting... \nwriting... \nwriting... \nwriting... \nwriting... \nwriting... \nwriting... \nwriting... \nwriting... \nwriting... \nwriting... \nwriting... \nReading... \nReading... \nReading... \nReading... \nReading... \nReading... \nReading... \nReading... \nReading... \nSuccess.\n</code></pre><p>打开/tmp目录下的aio_test_xxxx文件，可以看到，这个文件成功写入了我们期望的数据。<br>\n<img src=\"https://static001.geekbang.org/resource/image/27/90/2759999db41b8b4e7c493f7513c75890.png?wh=1158*310\" alt=\"\"><br>\n请注意，以上的读写，都不需要我们在应用程序里再发起调用，系统内核直接帮我们做好了。</p><h2>Linux下socket套接字的异步支持</h2><p>aio系列函数是由POSIX定义的异步操作接口，可惜的是，Linux下的aio操作，不是真正的操作系统级别支持的，它只是由GNU libc库函数在用户空间借由pthread方式实现的，而且仅仅针对磁盘类I/O，套接字I/O不支持。</p><p>也有很多Linux的开发者尝试在操作系统内核中直接支持aio，例如一个叫做Ben LaHaise的人，就将aio实现成功merge到2.5.32中，这部分能力是作为patch存在的，但是，它依旧不支持套接字。</p><p>Solaris倒是有真正的系统系别的aio，不过还不是很确定它在套接字上的性能表现，特别是和磁盘I/O相比效果如何。</p><p>综合以上结论就是，Linux下对异步操作的支持非常有限，这也是为什么使用epoll等多路分发技术加上非阻塞I/O来解决Linux下高并发高性能网络I/O问题的根本原因。</p><h2>Windows下的IOCP和Proactor模式</h2><p>和Linux不同，Windows下实现了一套完整的支持套接字的异步编程接口，这套接口一般被叫做IOCompletetionPort(IOCP)。</p><p>这样，就产生了基于IOCP的所谓Proactor模式。</p><p>和Reactor模式一样，Proactor模式也存在一个无限循环运行的event loop线程，但是不同于Reactor模式，这个线程并不负责处理I/O调用，它只是负责在对应的read、write操作完成的情况下，分发完成事件到不同的处理函数。</p><p>这里举一个HTTP服务请求的例子来说明：</p><ol>\n<li>客户端发起一个GET请求；</li>\n<li>这个GET请求对应的字节流被内核读取完成，内核将这个完成事件放置到一个队列中；</li>\n<li>event loop线程，也就是Poractor从这个队列里获取事件，根据事件类型，分发到不同的处理函数上，比如一个http handle的onMessage解析函数；</li>\n<li>HTTP request解析函数完成报文解析；</li>\n<li>业务逻辑处理，比如读取数据库的记录；</li>\n<li>业务逻辑处理完成，开始encode，完成之后，发起一个异步写操作；</li>\n<li>这个异步写操作被内核执行，完成之后这个异步写操作被放置到内核的队列中；</li>\n<li>Proactor线程获取这个完成事件，分发到HTTP handler的onWriteCompled方法执行。</li>\n</ol><p>从这个例子可以看出，由于系统内核提供了真正的“异步”操作，Proactor不会再像Reactor一样，每次感知事件后再调用read、write方法完成数据的读写，它只负责感知事件完成，并由对应的handler发起异步读写请求，I/O读写操作本身是由系统内核完成的。和前面看到的aio的例子一样，这里需要传入数据缓冲区的地址等信息，这样，系统内核才可以自动帮我们把数据的读写工作完成。</p><p>无论是Reactor模式，还是Proactor模式，都是一种基于事件分发的网络编程模式。<strong>Reactor模式是基于待完成的I/O事件，而Proactor模式则是基于已完成的I/O事件</strong>，两者的本质，都是借由事件分发的思想，设计出可兼容、可扩展、接口友好的一套程序框架。</p><h2>总结</h2><p>和同步I/O相比，异步I/O的读写动作由内核自动完成，不过，在Linux下目前仅仅支持简单的基于本地文件的aio异步操作，这也使得我们在编写高性能网络程序时，首选Reactor模式，借助epoll这样的I/O分发技术完成开发；而Windows下的IOCP则是一种异步I/O的技术，并由此产生了和Reactor齐名的Proactor模式，借助这种模式，可以完成Windows下高性能网络程序设计。</p><h2>思考题</h2><p>和往常一样，给你布置两道思考题：</p><ol>\n<li>你可以查一查Linux的资料，看看为了在内核层面支持完全的异步I/O，Linux的世界里都发生了什么？</li>\n<li>在例子程序里，aio_error一直处于占用CPU轮询异步操作的状态，有没有别的方法可以改进一下，比如挂起调用者、设置超时时间等？</li>\n</ol><p>欢迎你在评论区写下你的思考，也欢迎把这篇文章分享给你的朋友或者同事，一起交流进步一下。</p>","comments":[{"had_liked":false,"id":141841,"user_name":"fackgc17","can_delete":false,"product_type":"c1","uid":1017299,"ip_address":"","ucode":"490193B440BFA0","user_header":"https://static001.geekbang.org/account/avatar/00/0f/85/d3/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1571235882,"is_pvip":false,"replies":[{"id":"55112","content":"赞，学习了。","user_name":"作者回复","comment_id":141841,"uid":"1618647","ip_address":"","utype":1,"ctime":1571455699,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"121830320170","product_id":100032701,"comment_content":"Linux 的 AIO 机制可能后面逐渐不用了，可以关注 5.1 的 io_uring 机制，大杀器","like_count":29,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470906,"discussion_content":"赞，学习了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571455699,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":157554,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1575192657,"is_pvip":false,"discussion_count":1,"race_medal":0,"score":"48819832913","product_id":100032701,"comment_content":"记一下自己对阻塞&#47;非阻塞&#47;同步&#47;异步的理解<br>1：阻塞&#47;非阻塞——是站在调用者（客户端或请求方）的角度来说的，如果调用者要数据，此时服务者没准备好，调用者不用傻等，那就是非阻塞的，否则就是阻塞的<br><br>2：同步&#47;异步——是站在服务者（服务端或响应端）的角度来说的，如果服务者不会主动给请求者它想要的数据，那就是同步的，否则就是异步的<br><br>3：两个位置每个位置有两种状态，总共四种状态——同步阻塞&#47;同步非阻塞&#47;异步阻塞（不搭）&#47;异步非阻塞<br>，其中同步阻塞和异步非阻塞是很搭的相互成就，异步阻塞是非常不搭的相互矛盾，同步非阻塞有一点怪，它通常就是靠不断的轮询来实现的，服务者不会主动把准备好的数据发给调用者，调用者也不会等着服务者把数据准备好再返回。<br><br>4：导致出现这种现象的根本原因，我觉得是数据的读取是一个慢动作，数据不管从磁盘中拿出来还是放入到磁盘中，相对内存操作相对CPU执行命令的操作速度是非常慢的，这种速度差必然导致要么等一等，要么不断的来瞧瞧，要么准备好了送过去，这三种解决此问题的思路。","like_count":11,"discussions":[{"author":{"id":2720776,"avatar":"","nickname":"Geek_47f2f2","note":"","ucode":"F035363519E15F","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":578953,"discussion_content":"同步非阻塞不怪，不一定依靠轮询。同步、阻塞的角度不止是调用者和服务者这个纬度区分。同时还有作用域不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657098889,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261583,"user_name":"进击的巨人","can_delete":false,"product_type":"c1","uid":1167120,"ip_address":"","ucode":"DB62D77D460BF1","user_header":"https://static001.geekbang.org/account/avatar/00/11/cf/10/9fa2e5ba.jpg","comment_is_top":false,"comment_ctime":1605430029,"is_pvip":false,"replies":[{"id":"95510","content":"都是前人栽树，后人乘凉 ）","user_name":"作者回复","comment_id":261583,"uid":"1618647","ip_address":"","utype":1,"ctime":1606041932,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"31670201101","product_id":100032701,"comment_content":"非常好的总结：Reactor 模式是基于待完成的 I&#47;O 事件，而 Proactor 模式则是基于已完成的 I&#47;O 事件。","like_count":8,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509527,"discussion_content":"都是前人栽树，后人乘凉 ）","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606041932,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":260437,"user_name":"TinyCalf","can_delete":false,"product_type":"c1","uid":2137418,"ip_address":"","ucode":"0A3EF213359388","user_header":"https://static001.geekbang.org/account/avatar/00/20/9d/4a/09a5041e.jpg","comment_is_top":false,"comment_ctime":1605005247,"is_pvip":false,"replies":[{"id":"95513","content":"Linux系统提供的异步I&#47;O还停留在很浅的阶段，所以，现实的做法都是多路复用+非阻塞I&#47;O来完成你说的&quot;代码层面的异步&quot;，这已经足够高效和有用了。","user_name":"作者回复","comment_id":260437,"uid":"1618647","ip_address":"","utype":1,"ctime":1606042207,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"27374809023","product_id":100032701,"comment_content":"老师我有些想法不知道正不正确：<br>其实我用非阻塞IO，自己写代码把数据拷贝过程和业务处理过程分离到多个线程，也能实现代码层面的异步，而操作系统提供的异步IO只不过是把这个过程转到内核态去完成；可能内核处理这些逻辑比我们自己写的代码效率要高些，但是绝对不会像多路复用接口一样带来巨大的效率提升；nodejs好像就是这样，用非阻塞IO+libuv实现的eventloop来实现代码层面的异步，但并没有使用异步IO接口","like_count":6,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509193,"discussion_content":"Linux系统提供的异步I/O还停留在很浅的阶段，所以，现实的做法都是多路复用+非阻塞I/O来完成你说的&amp;quot;代码层面的异步&amp;quot;，这已经足够高效和有用了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1606042207,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":150948,"user_name":"马不停蹄","can_delete":false,"product_type":"c1","uid":1620168,"ip_address":"","ucode":"9AB66524672291","user_header":"https://static001.geekbang.org/account/avatar/00/18/b8/c8/950fb2c9.jpg","comment_is_top":false,"comment_ctime":1573633561,"is_pvip":false,"replies":[{"id":"58554","content":"Netty用的就是epoll，基于多路复用+非阻塞I&#47;O，至于Future，只是Java里包装异步调用的一种方式，并不是真正的异步 I&#47;O。","user_name":"作者回复","comment_id":150948,"uid":"1618647","ip_address":"","utype":1,"ctime":1573991509,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"27343437337","product_id":100032701,"comment_content":"异步I&#47;O就相当于当数据真正到达或者说应用程序读取完数据了通过注册的回调函数通知你去处理，用 netty 是这样的，但是老师有个问题一直不明白：netty 并没有用异步I&#47;O，而是基于（多路复用+非阻塞I&#47;O）+ Future 实现了异步非阻塞吗？","like_count":6,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474320,"discussion_content":"Netty用的就是epoll，基于多路复用+非阻塞I/O，至于Future，只是Java里包装异步调用的一种方式，并不是真正的异步 I/O。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1573991509,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141593,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571197332,"is_pvip":false,"replies":[{"id":"55104","content":"我理解Linux下标榜的proactor其实都是伪的。","user_name":"作者回复","comment_id":141593,"uid":"1618647","ip_address":"","utype":1,"ctime":1571454260,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"18751066516","product_id":100032701,"comment_content":"看第二遍理解了reactor和proactor的区别前者是同步 有消息到达时调用应用程序的回调,应用程序自己调用read 同步取得数据,而后者是内核异步数据读取完成之后才调用应用程序的回调","like_count":4,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470814,"discussion_content":"我理解Linux下标榜的proactor其实都是伪的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571454260,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141589,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571196306,"is_pvip":false,"replies":[{"id":"55103","content":"你真的悟道了，哈哈:)","user_name":"作者回复","comment_id":141589,"uid":"1618647","ip_address":"","utype":1,"ctime":1571454197,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"14456098194","product_id":100032701,"comment_content":"而突然又理解到了同步i&#47;o和异步i&#47;o的问题  比如我调用read函数 在read函数返回之前数据被拷贝到缓冲区这个过程就是同步i&#47;o的操作 像后面的aio系列函数 是在函数调用后  内核把数据拷贝到应用层缓冲区 这个就叫异步","like_count":3,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470813,"discussion_content":"你真的悟道了，哈哈:)","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571454197,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":288308,"user_name":"null","can_delete":false,"product_type":"c1","uid":1024294,"ip_address":"","ucode":"F9039EFED6B55D","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/PiajxSqBRaELZPnUAiajaR5C25EDLWeJURggyiaOP5GGPe2qlwpQcm5e3ybib8OsP4tvddFDLVRSNNGL5I3SFPJHsA/132","comment_is_top":false,"comment_ctime":1618402597,"is_pvip":false,"replies":[{"id":"104849","content":"我觉得你get到了。","user_name":"作者回复","comment_id":288308,"uid":"1618647","ip_address":"","utype":1,"ctime":1618751704,"user_name_real":"froghui"}],"discussion_count":3,"race_medal":0,"score":"10208337189","product_id":100032701,"comment_content":"还是没太理解阻塞和同步之间的区别<br><br>1. 阻塞：只是针对线程挂起这一场景，线程无法获取 cpu 时间片，无法处理其他逻辑。<br>2. 非阻塞：线程正常获取 cpu 时间片，正常运行，可以不断轮询 read 函数，快速返回，同时也可以处理其他逻辑。<br>结论：阻塞和非阻塞的区别，只是针对线程是否挂起（即能否获取 cpu 时间片）。<br><br><br>同步：线程自己读取数据，不断地从内核缓冲区读取到应用程序缓冲区，直到读取所有数据。读数据期间线程忙个不停，疲于奔命。（读数据这期间线程脱身去无法处理其他逻辑）<br>异步：内核把所有数据写到应用程序缓冲区，再通知应用程序处理。在通知之前，应用程序都可以去处理其他逻辑。<br>结论：同步和异步的区别，只是针对谁将数据读到应用程序缓冲区。<br><br>自己一直混淆阻塞和同步的概念，应该都是被“线程无法处理其他逻辑”所迷惑，感觉两者的表现都是一样的，都是无法处理其他逻辑，因此将这两个概念混为一谈。<br><br>老师，请问一下，我对阻塞&#47;非阻塞和同步&#47;异步的理解，并且相关的结论，是否正确？谢谢老师！！","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518586,"discussion_content":"我觉得你get到了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1618751704,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1011400,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/6e/c8/ed2926b5.jpg","nickname":"soimage","note":"","ucode":"82FC2D560616D2","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579280,"discussion_content":"同步是在忙，阻塞是在等。阻塞本身也是进程/线程的一种状态","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657276597,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2776006,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5SNsSoiaZw4Qzd2ctH4vtibHQordcLrYsX43oFZFloRTId0op617mcGlrvGx33U8ic2LTgdicoEFPvQ/132","nickname":"Frankey","note":"","ucode":"2F09BC2500C9E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569260,"discussion_content":"自己一直混淆阻塞和同步的概念，应该都是被“线程无法处理其他逻辑”所迷惑，感觉两者的表现都是一样的，都是无法处理其他逻辑，因此将这两个概念混为一谈。\n是呀，我也有这样的困惑。本质我觉得我还是概念定义没搞清楚。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651385943,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":153204,"user_name":"土豆牛肉","can_delete":false,"product_type":"c1","uid":1029315,"ip_address":"","ucode":"7BC3F143966968","user_header":"https://static001.geekbang.org/account/avatar/00/0f/b4/c3/ce3a18c6.jpg","comment_is_top":false,"comment_ctime":1574180682,"is_pvip":false,"replies":[{"id":"59333","content":"不是哦，只是设计上各有千秋，现在互联网上跑的最多的还是Linux，就连微软，也在积极拥抱Linux。","user_name":"作者回复","comment_id":153204,"uid":"1618647","ip_address":"","utype":1,"ctime":1574498528,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"10164115274","product_id":100032701,"comment_content":"既然Windows有iocp,是不是可以说Windows更适合运行网络服务器呢","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":475082,"discussion_content":"不是哦，只是设计上各有千秋，现在互联网上跑的最多的还是Linux，就连微软，也在积极拥抱Linux。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574498528,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142673,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571453673,"is_pvip":false,"replies":[{"id":"55593","content":"issue是提一个问题到github上，mr是看哪里有问题直接改代码，提一个merge request过来，我直接merge到master把问题解决了","user_name":"作者回复","comment_id":142673,"uid":"1618647","ip_address":"","utype":1,"ctime":1571845847,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"10161388265","product_id":100032701,"comment_content":"issue和mr是啥意思啊，没接触到过呢！","like_count":2,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471221,"discussion_content":"issue是提一个问题到github上，mr是看哪里有问题直接改代码，提一个merge request过来，我直接merge到master把问题解决了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571845847,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":284533,"user_name":"菠萝power","can_delete":false,"product_type":"c1","uid":1132050,"ip_address":"","ucode":"8B3DA9859187C5","user_header":"https://static001.geekbang.org/account/avatar/00/11/46/12/965a6cc9.jpg","comment_is_top":false,"comment_ctime":1616321564,"is_pvip":false,"replies":[{"id":"103646","content":"这个看你的理解，如果你认为是同步read调用的发起，导致了应用程序进入休眠，等待系统把数据拷贝完，从应用程序角度来看，好像是应用程序自己把时间片拱手让人，从而消耗了自己的时间，这个理解是对的。","user_name":"作者回复","comment_id":284533,"uid":"1618647","ip_address":"","utype":1,"ctime":1616934350,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"5911288860","product_id":100032701,"comment_content":"老师好。同步read的时候，内核把数据拷贝到应用程序这个时间段消耗的是应用程序的时间片吗？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517381,"discussion_content":"这个看你的理解，如果你认为是同步read调用的发起，导致了应用程序进入休眠，等待系统把数据拷贝完，从应用程序角度来看，好像是应用程序自己把时间片拱手让人，从而消耗了自己的时间，这个理解是对的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1616934350,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":188068,"user_name":"Richard","can_delete":false,"product_type":"c1","uid":1316758,"ip_address":"","ucode":"893F958B9DD161","user_header":"https://static001.geekbang.org/account/avatar/00/14/17/96/846fc11b.jpg","comment_is_top":false,"comment_ctime":1584319869,"is_pvip":false,"replies":[{"id":"73539","content":"Linux下确实没有非常好的异步I&#47;O场景，文章中给出了Windows下的IOCP，倒是一个真实的异步I&#47;O的场景。","user_name":"作者回复","comment_id":188068,"uid":"1618647","ip_address":"","utype":1,"ctime":1584863862,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"5879287165","product_id":100032701,"comment_content":"针对老师提出的第二个问题也是我一直思考的:异步io的应用场景。像老师给的例子代码发出读写后依然循环等待结果，这断然不是异步io的使用场景，还不如用同步io来节省CPU呢，所以异步io的使用场景有哪些？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487333,"discussion_content":"Linux下确实没有非常好的异步I/O场景，文章中给出了Windows下的IOCP，倒是一个真实的异步I/O的场景。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584863862,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142178,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571304062,"is_pvip":false,"replies":[{"id":"55120","content":"从onMessage如何调到run_cmd的？","user_name":"作者回复","comment_id":142178,"uid":"1618647","ip_address":"","utype":1,"ctime":1571457152,"user_name_real":"froghui"}],"discussion_count":2,"race_medal":0,"score":"5866271358","product_id":100032701,"comment_content":"在poll-server-onethread程序中 onMessage回调里面调用 char *run_cmd(char *cmd) {<br>    char *data = malloc(16384);<br>    bzero(data, sizeof(data));<br>    FILE *fdp;<br>    const int max_buffer = 256;<br>    char buffer[max_buffer];<br>    fdp = popen(cmd, &quot;r&quot;);<br>    char *data_index = data;<br>    if (fdp) {<br>        while (!feof(fdp)) {<br>            if (fgets(buffer, max_buffer, fdp) != NULL) {<br>                int len = strlen(buffer);<br>                memcpy(data_index, buffer, len);<br>                data_index += len;<br>            }<br>        }<br>        pclose(fdp);<br>    }<br>    return data;<br>}<br>总是提示 get message from tcp connection connection-7<br>ls<br>: not found<br>这就让我很蛋疼了,百度了半天没解决到","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471020,"discussion_content":"从onMessage如何调到run_cmd的？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571457152,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1170784,"avatar":"https://static001.geekbang.org/account/avatar/00/11/dd/60/eae432c6.jpg","nickname":"yusuf","note":"","ucode":"9F32149B2ADDA0","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":41035,"discussion_content":"在做练习的时候也碰到了这样的问题，应该是onMessage函数中input->data里的数据后面带了换行符&#39;/r&#39;、&#39;/n&#39;，所以没匹配到ls","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572333020,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141614,"user_name":"程序水果宝","can_delete":false,"product_type":"c1","uid":1371633,"ip_address":"","ucode":"1700DDFE073A56","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83eqyicZYyW7ahaXgXUD8ZAS8x0t8jx5rYLhwbUCJiawRepKIZfsLdkxdQ9XQMo99c1UDibmNVfFnAqwPg/132","comment_is_top":false,"comment_ctime":1571202351,"is_pvip":false,"replies":[{"id":"55105","content":"感谢你的建议。时间有限，做出来的内容可能没有办法满足所有人的需求。在第四篇里可能会解答你的大部分疑惑，如果有进一步的问题，我可以在答疑中统一回复，解答大家的疑惑。","user_name":"作者回复","comment_id":141614,"uid":"1618647","ip_address":"","utype":1,"ctime":1571454398,"user_name_real":"froghui"}],"discussion_count":2,"race_medal":0,"score":"5866169647","product_id":100032701,"comment_content":"看了最近几篇文章以后个人感觉应该把反应堆、epoll、异步和同步的函数列出来配合着它们的功能讲，很有可能不懂的地方都在那些封装的函数里面，像main函数里面的内容反而给出链接加注释就可以了，这样可能会让人的理解更加深刻一些。还有实验结果也不用列这么多，这些完全可以由自己去实验。","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470819,"discussion_content":"感谢你的建议。时间有限，做出来的内容可能没有办法满足所有人的需求。在第四篇里可能会解答你的大部分疑惑，如果有进一步的问题，我可以在答疑中统一回复，解答大家的疑惑。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571454398,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2776006,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5SNsSoiaZw4Qzd2ctH4vtibHQordcLrYsX43oFZFloRTId0op617mcGlrvGx33U8ic2LTgdicoEFPvQ/132","nickname":"Frankey","note":"","ucode":"2F09BC2500C9E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569261,"discussion_content":"我觉得作者这样写挺好的。因人而异","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651386055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355362,"user_name":"ano","can_delete":false,"product_type":"c1","uid":1783342,"ip_address":"北京","ucode":"7DE64BDFA78550","user_header":"https://static001.geekbang.org/account/avatar/00/1b/36/2e/376a3551.jpg","comment_is_top":false,"comment_ctime":1661316389,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1661316389","product_id":100032701,"comment_content":"之前的那个留言描述不对！正确的应该是下面这样：<br>&quot;非阻塞IO，最后一次 read 调用，获取数据的过程，是一个同步的过程。这里的同步指的是内核区域的数据拷贝到缓冲区的这个过程。”  这里说获取数据是一个同步的过程，那在已经 read ready的非阻塞套接字上调用 recv 的时候，就不会立即返回了？而是要等到数据完全拷贝完成后，才会返回？是这个意思么？","like_count":0},{"had_liked":false,"id":324559,"user_name":"gecko","can_delete":false,"product_type":"c1","uid":1198048,"ip_address":"","ucode":"2B7122536F1A0E","user_header":"https://static001.geekbang.org/account/avatar/00/12/47/e0/1ff26e99.jpg","comment_is_top":false,"comment_ctime":1638500888,"is_pvip":false,"replies":[{"id":"117835","content":"加一下 rt这个动态库<br>在CMakeLists.txt里面添加:<br>target_link_libraries(aio01 yolanda rt)<br>","user_name":"作者回复","comment_id":324559,"uid":"1618647","ip_address":"","utype":1,"ctime":1638691574,"user_name_real":"编辑"}],"discussion_count":1,"race_medal":0,"score":"1638500888","product_id":100032701,"comment_content":"请教老师，编译这个报错怎么解决。<br>git clone https:&#47;&#47;github.com&#47;froghui&#47;yolanda.git<br>cd yolanda<br>mkdir  build<br>cd build&#47;<br>cmake ..&#47;<br>make<br><br><br><br>如下输出<br><br>[ 97%] Linking C executable ..&#47;bin&#47;aio01<br>CMakeFiles&#47;aio01.dir&#47;aio01.c.o: In function `main&#39;:<br>aio01.c:(.text+0x19b): undefined reference to `aio_write&#39;<br>aio01.c:(.text+0x1f4): undefined reference to `aio_error&#39;<br>aio01.c:(.text+0x208): undefined reference to `aio_error&#39;<br>aio01.c:(.text+0x21d): undefined reference to `aio_return&#39;<br>aio01.c:(.text+0x329): undefined reference to `aio_read&#39;<br>aio01.c:(.text+0x379): undefined reference to `aio_error&#39;<br>aio01.c:(.text+0x38d): undefined reference to `aio_return&#39;<br>collect2: error: ld returned 1 exit status<br>chap-30&#47;CMakeFiles&#47;aio01.dir&#47;build.make:95: recipe for target &#39;bin&#47;aio01&#39; failed<br>make[2]: *** [bin&#47;aio01] Error 1<br>CMakeFiles&#47;Makefile2:2286: recipe for target &#39;chap-30&#47;CMakeFiles&#47;aio01.dir&#47;all&#39; failed<br>make[1]: *** [chap-30&#47;CMakeFiles&#47;aio01.dir&#47;all] Error 2<br>Makefile:129: recipe for target &#39;all&#39; failed<br>make: *** [all] Error 2<br>root@ubuntu-192-168-1-182:&#47;tmp&#47;yolanda&#47;build# ","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":536109,"discussion_content":"加一下 rt这个动态库\n在CMakeLists.txt里面添加:\ntarget_link_libraries(aio01 yolanda rt)\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1638691574,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":308296,"user_name":"schbxg","can_delete":false,"product_type":"c1","uid":1189785,"ip_address":"","ucode":"D364F1367D79F4","user_header":"https://static001.geekbang.org/account/avatar/00/12/27/99/51c51cf1.jpg","comment_is_top":false,"comment_ctime":1629523380,"is_pvip":false,"replies":[{"id":"111675","content":"OK。","user_name":"作者回复","comment_id":308296,"uid":"1618647","ip_address":"","utype":1,"ctime":1629635661,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1629523380","product_id":100032701,"comment_content":"如果使用g++编译，52行的cb结构需要初始化一下，不然下边aio_read的时候会报无效参数的错误。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":525452,"discussion_content":"OK。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1629635661,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299953,"user_name":"vv_test","can_delete":false,"product_type":"c1","uid":1685884,"ip_address":"","ucode":"1D164B2F034E2B","user_header":"https://static001.geekbang.org/account/avatar/00/19/b9/7c/afe6f1eb.jpg","comment_is_top":false,"comment_ctime":1624934880,"is_pvip":false,"replies":[{"id":"109698","content":"我理解是已经足够用了，尽管各种学术研究层出不穷，异步I&#47;O这个领域也一直是不温不火。","user_name":"作者回复","comment_id":299953,"uid":"1618647","ip_address":"","utype":1,"ctime":1626606165,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1624934880","product_id":100032701,"comment_content":"老师您好，为什么异步io有好处，linux 也迟迟没有内核级别的支持套接字异步io。是说c10k已经可以使用前面的知道方案解决了，即使内核级别支持(我理解内核级别也是要消耗资源)，想要再高的并发，瓶颈不在这了吗?","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522598,"discussion_content":"我理解是已经足够用了，尽管各种学术研究层出不穷，异步I/O这个领域也一直是不温不火。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626606165,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":280478,"user_name":"night","can_delete":false,"product_type":"c1","uid":1204168,"ip_address":"","ucode":"03B3C955092C03","user_header":"https://static001.geekbang.org/account/avatar/00/12/5f/c8/13aa8aa9.jpg","comment_is_top":false,"comment_ctime":1614229057,"is_pvip":false,"replies":[{"id":"101995","content":"我感觉有点不太对，Proactor是windows里IOCP的抽象，你可以搜一下。","user_name":"作者回复","comment_id":280478,"uid":"1618647","ip_address":"","utype":1,"ctime":1614515971,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1614229057","product_id":100032701,"comment_content":"Reactor 模式是基于待完成的 I&#47;O 事件，而 Proactor 模式则是基于已完成的 I&#47;O 事件。在买书的例子下，就是 <br>Reactor: 书店通知你书到店里了，可以来书店取了<br>Proactor：书店把书寄到了你之前留的地址上了，可以直接签收<br>","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516110,"discussion_content":"我感觉有点不太对，Proactor是windows里IOCP的抽象，你可以搜一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614515971,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":271922,"user_name":"梁✨飞","can_delete":false,"product_type":"c1","uid":2297398,"ip_address":"","ucode":"9F4D5D03F22D9E","user_header":"https://static001.geekbang.org/account/avatar/00/23/0e/36/29b8cb90.jpg","comment_is_top":false,"comment_ctime":1609862476,"is_pvip":false,"replies":[{"id":"98866","content":"线程的状态是由我们程序控制的，这里的问题是读出数据之后线程接下来会去干啥。如果你继续做一段事情，不会丧失控制权。","user_name":"作者回复","comment_id":271922,"uid":"1618647","ip_address":"","utype":1,"ctime":1610285189,"user_name_real":"froghui"}],"discussion_count":1,"race_medal":0,"score":"1609862476","product_id":100032701,"comment_content":"老师你好，假如用堵塞的方式执行 read 操作，缓冲区可以有足够的数据，read 方法马上返回，那么线程的状态还会变为堵塞状态吗？这种立即返回read的情况线程会丢失 CPU 控制权吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":513093,"discussion_content":"线程的状态是由我们程序控制的，这里的问题是读出数据之后线程接下来会去干啥。如果你继续做一段事情，不会丧失控制权。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1610285189,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":238661,"user_name":"范闲","can_delete":false,"product_type":"c1","uid":1073125,"ip_address":"","ucode":"F21FD7DF6BA53C","user_header":"https://static001.geekbang.org/account/avatar/00/10/5f/e5/54325854.jpg","comment_is_top":false,"comment_ctime":1596251928,"is_pvip":false,"replies":[{"id":"89342","content":"现在还没有办法达到这个层次。确实这里的程序是一个模拟程序。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1597585483,"ip_address":"","comment_id":238661,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1596251928","product_id":100032701,"comment_content":"老师这里的异步IO实际上是不完整的。如果要把业务逻辑也设计成异步模式，我理解就只能用多线程+回调了 ","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502821,"discussion_content":"现在还没有办法达到这个层次。确实这里的程序是一个模拟程序。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597585483,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":226949,"user_name":"天之草","can_delete":false,"product_type":"c1","uid":1198882,"ip_address":"","ucode":"03864F7CB36E73","user_header":"https://static001.geekbang.org/account/avatar/00/12/4b/22/09540b7c.jpg","comment_is_top":false,"comment_ctime":1592234049,"is_pvip":false,"replies":[{"id":"84279","content":"应用程序缓冲区就是应用程序里的byte流或者数组，不是内核级别的。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1592744113,"ip_address":"","comment_id":226949,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1592234049","product_id":100032701,"comment_content":"弱弱问一句，应用程序缓冲区是指的应用程序里的内存么，不是内核级别的吧，怎么那些图还显示是在内核","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498427,"discussion_content":"应用程序缓冲区就是应用程序里的byte流或者数组，不是内核级别的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592744113,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":223136,"user_name":"扩散性百万咸面包","can_delete":false,"product_type":"c1","uid":1905171,"ip_address":"","ucode":"6D703D51553B42","user_header":"https://static001.geekbang.org/account/avatar/00/1d/12/13/e103a6e3.jpg","comment_is_top":false,"comment_ctime":1591007055,"is_pvip":false,"replies":[{"id":"84255","content":"select是可以和阻塞I&#47;O一起使用的，不过在实际中，非阻塞I&#47;O和多路复用一起使用的效果更好，我在讲座中讲到了使用阻塞I&#47;O和select等搭配使用的一些问题，你可以体会下。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1592738828,"ip_address":"","comment_id":223136,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1591007055","product_id":100032701,"comment_content":"老师，不太明白为什么，要把Non-Blocking和多路复用I&#47;O技术(select, poll, epoll)一起说？还说多路复用是基于Non-Blocking的呢？select明明可以通过参数设置为阻塞等待，或者不等待，或者等待相应时间后超时呀。我理解的是为了降低轮询的复杂度，多路I&#47;O在Non-blocking的基础上加入了阻塞等候，减少轮询次数？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497024,"discussion_content":"select是可以和阻塞I/O一起使用的，不过在实际中，非阻塞I/O和多路复用一起使用的效果更好，我在讲座中讲到了使用阻塞I/O和select等搭配使用的一些问题，你可以体会下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592738828,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1397631,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKVUskibDnhMt5MCIJ8227HWkeg2wEEyewps8GuWhWaY5fy7Ya56bu2ktMlxdla3K29Wqia9efCkWaQ/132","nickname":"衬衫的价格是19美元","note":"","ucode":"655F925451F772","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":293015,"discussion_content":"1.io多路复用技术是用来检测io是否就绪的方法，如果没有io事件就绪，可以选择无限等待，也可以选择等待一定时间后返回，这就是io多路复用技术的超时配置\n2.非阻塞指的是套接字上的accept, read，write等操作是非阻塞的，用户进程调用这些方法后操作系统立马返回；","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1595413037,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205645,"user_name":"ray","can_delete":false,"product_type":"c1","uid":1717235,"ip_address":"","ucode":"10962C711CBC11","user_header":"","comment_is_top":false,"comment_ctime":1586695001,"is_pvip":false,"replies":[{"id":"77692","content":"基本正确，阻塞多路复用I&#47;O一般用的比较少。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1587288908,"ip_address":"","comment_id":205645,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586695001","product_id":100032701,"comment_content":"老师好，<br>这边重新梳理了一下，阻塞多路复用I&#47;O，和非阻塞多路复用I&#47;O，还请老师点评。<br><br>阻塞多路复用I&#47;O：<br>当应用程序有读写请求时，不管内核缓冲区状况如何，都立即发起通知事件，告知应用程序现在可以读写。<br>读写操作可能需等待内核空出缓冲区。<br><br>非阻塞多路复用I&#47;O:<br>当应用程序有读写请求时，内核缓冲区也有空间可以被读写时，才会对应用程序发起事件通知，告知应用程序现在可以读写。<br>此时读写操作所需的内核缓冲空间已被准备好，应用程序可以立即做读写操作。<br>非阻塞多路复用I&#47;O，不会在应用程序端不断polling，这是和非阻塞I&#47;O最大的区别，而是kernel准备好了才做通知。<br><br>不知道我的理解是否到位？<br><br>谢谢老师！","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491540,"discussion_content":"基本正确，阻塞多路复用I/O一般用的比较少。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1587288908,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":152815,"user_name":"夏目","can_delete":false,"product_type":"c1","uid":1212750,"ip_address":"","ucode":"67C075A01CF4D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/4e/d71092f4.jpg","comment_is_top":false,"comment_ctime":1574083134,"is_pvip":false,"replies":[{"id":"59328","content":"你这样理解也可以。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1574498077,"ip_address":"","comment_id":152815,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1574083134","product_id":100032701,"comment_content":"老师，可以把阻塞非阻塞对应数据准备过程，同步异步对应数据从内核到应用程序缓冲区过程吗？","like_count":1,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":474949,"discussion_content":"你这样理解也可以。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1574498077,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142371,"user_name":"Steiner","can_delete":false,"product_type":"c1","uid":1622329,"ip_address":"","ucode":"232C1C75207A1E","user_header":"https://static001.geekbang.org/account/avatar/00/18/c1/39/11904266.jpg","comment_is_top":false,"comment_ctime":1571360772,"is_pvip":false,"replies":[{"id":"55123","content":"也可以这么说吧。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571457521,"ip_address":"","comment_id":142371,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571360772","product_id":100032701,"comment_content":"应该这么说吧，同步和异步是指数据准备过程，阻塞非阻塞是数据获取过程","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471091,"discussion_content":"也可以这么说吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571457521,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1095363,"avatar":"https://static001.geekbang.org/account/avatar/00/10/b6/c3/9de907e9.jpg","nickname":"广","note":"","ucode":"366DBF0FD385A6","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":223648,"discussion_content":"这样说不对吧，文章里是这样定义同步的：这里的同步指的是内核区域的数据拷贝到缓存区这个过程。同步异步对应的应该是数据获取过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586243377,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142168,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571303264,"is_pvip":false,"replies":[{"id":"55119","content":"贴你的代码过来，大家一起会诊。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571456993,"ip_address":"","comment_id":142168,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571303264","product_id":100032701,"comment_content":"我把github上的代码进行了改进,收到消息时执行run_cmd 用来实现ls pwd ...的shell命令,但是总是提示: not found 原谅我抄的代码,只是对代码进行了逻辑修改 ,百度了半天都解决不了这个问题","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471015,"discussion_content":"贴你的代码过来，大家一起会诊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571456993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":142065,"user_name":"沉淀的梦想","can_delete":false,"product_type":"c1","uid":1177315,"ip_address":"","ucode":"BCB7C26F9D214B","user_header":"https://static001.geekbang.org/account/avatar/00/11/f6/e3/e4bcd69e.jpg","comment_is_top":false,"comment_ctime":1571286936,"is_pvip":false,"replies":[{"id":"55116","content":"Java是一个跨OS的语言，AIO的实施需充分调用OS参与，我理解可能对windows支持的比较好，Linux支持的一般吧。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571456880,"ip_address":"","comment_id":142065,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571286936","product_id":100032701,"comment_content":"Proactor中所谓的队列，我的理解是一个Block Queue，给aio注册一个回调函数，回调函数的内容是往BlockQueue中放置一个通知，然后event loop线程苏醒，获取到这个通知后进行分发，不知道理解的对不对？<br><br>还有一个疑问POSIX的aio库要怎么注册回调？Java里面的aio有这个功能，感觉linux也应该提供吧","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470973,"discussion_content":"Java是一个跨OS的语言，AIO的实施需充分调用OS参与，我理解可能对windows支持的比较好，Linux支持的一般吧。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571456880,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141847,"user_name":"阿卡牛","can_delete":false,"product_type":"c1","uid":1022247,"ip_address":"","ucode":"0BC43A904C3199","user_header":"https://static001.geekbang.org/account/avatar/00/0f/99/27/47aa9dea.jpg","comment_is_top":false,"comment_ctime":1571236357,"is_pvip":false,"replies":[{"id":"55113","content":"我知道的这个已经把该办的事情都办了。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571455731,"ip_address":"","comment_id":141847,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571236357","product_id":100032701,"comment_content":"还有比异步IO更好的吗？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470911,"discussion_content":"我知道的这个已经把该办的事情都办了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571455731,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141733,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571216141,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1571216141","product_id":100032701,"comment_content":"我也想知道应该怎么取设计和封装接口函数 类等等","like_count":0},{"had_liked":false,"id":141732,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571216101,"is_pvip":false,"replies":[{"id":"55108","content":"把我的代码看懂，然后搞清楚原理，自己试着慢慢撸一个。","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571454490,"ip_address":"","comment_id":141732,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1571216101","product_id":100032701,"comment_content":"老师 你好 我要怎么样才能像你一样设计一个服务器框架呢？我需要哪些知识储备呢？","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470864,"discussion_content":"把我的代码看懂，然后搞清楚原理，自己试着慢慢撸一个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571454490,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141588,"user_name":"传说中的成大大","can_delete":false,"product_type":"c1","uid":1236766,"ip_address":"","ucode":"103543D6E706BF","user_header":"https://static001.geekbang.org/account/avatar/00/12/df/1e/cea897e8.jpg","comment_is_top":false,"comment_ctime":1571196096,"is_pvip":false,"replies":[{"id":"55102","content":"好像有点悟道的意思.....","user_name":"作者回复","user_name_real":"froghui","uid":"1618647","ctime":1571454153,"ip_address":"","comment_id":141588,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571196096","product_id":100032701,"comment_content":"再第二遍读的时候 我突然理清了 阻塞&#47;非阻塞 io 和同步&#47;异步io  这里提到的都是跟i&#47;o操作相关 我又想起了线程的同步和异步 跟阻塞和阻塞 没有半毛钱的关系啊。。。。。","like_count":0,"discussions":[{"author":{"id":1618647,"avatar":"https://static001.geekbang.org/account/avatar/00/18/b2/d7/df4086cf.jpg","nickname":"froghui","note":"","ucode":"843028B4E07F41","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470812,"discussion_content":"好像有点悟道的意思.....","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571454153,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2776006,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83er5SNsSoiaZw4Qzd2ctH4vtibHQordcLrYsX43oFZFloRTId0op617mcGlrvGx33U8ic2LTgdicoEFPvQ/132","nickname":"Frankey","note":"","ucode":"2F09BC2500C9E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569262,"discussion_content":"确实没有半毛钱关系。都是不同类型的概念。只是在组合使用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651386746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]}]}