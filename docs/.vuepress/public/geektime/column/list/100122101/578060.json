{"id":578060,"title":"09｜面向对象：通过词法作用域和调用点理解this绑定","content":"<p>你好，我是石川。</p><p>今天，我们来讲讲JavaScript中的this。其实讲this的资料有很多，其中不少已经把这个概念讲的很清楚了。但是为了课程的系统性，我今天也从这个单元咱们讲到的<strong>对象和面向对象的角度</strong>来说一说。</p><p>因为现在正好赶上国庆假期，咱们这节课的内容不是很长，所以你学起来也不会很辛苦。但是字少事大，this的概念还是很重要的。所以如果你之前没有具体了解过，还是希望这节课能帮助你更好地理解this。</p><p>从直观的印象来看，你可能觉得 this 指的是函数本身或它所在的范围，其实这样的理解都是不对。在JavaScript中，this 是在运行时而不是编写时绑定的。所以要正确地使用它，需要考虑到函数调用时的执行上下文。</p><h2>默认绑定</h2><p>我们来看一个简单的例子，在下面的例子中，a 是在全局定义的，aLogger的函数是在全局被调用的，所以返回的this就是全局上下文，所以a的值自然就是2。</p><pre><code class=\"language-javascript\">function aLogger() {\n    console.log( this.a );\n}\nvar a = 2;\naLogger(); // 2\n</code></pre><p>这种默认的绑定只在非strict mode的情况下是可以的。所以如果在strict mode下，这种默认的的绑定是不可以的，则会返回 TypeError: <code>this</code> is <code>undefined</code>。</p><!-- [[[read_end]]] --><h2>隐式绑定</h2><p>下面，我们再来看看，如果我们在一个对象 obj 里给 a 赋值为 3，然后我们通过调用 aLogger 来获取 a 的值，这个时候，aLogger 被调用时的上下文是在 obj 中，所以它的值就是 3。</p><pre><code class=\"language-javascript\">function aLogger() {\n    console.log( this.a );\n}\n\nvar obj = {\n    a: 3,\n    logger: aLogger\n};\n\nvar a = 2;\n\nobj.logger(); // 3\n</code></pre><p>但是隐式绑定也有它的问题，就是当我们把对象里的方法赋值给一个全局变量时，这种绑定就消失了。比如下面的例子中，我们给 objLogger 赋值 obj.logger，结果 this 引用的就是全局中 a 的值。</p><pre><code class=\"language-javascript\">function logger() {\n    console.log( this.a );\n}\n\nvar obj = {\n    a: 3,\n    logger: logger\n};\n\nvar a = 2;\n\nvar objLogger = obj.logger; \n\nobjLogger(); // 2\n</code></pre><h2>显式绑定</h2><p>下面，我们再来看看显式绑定。在这种情况下，我们使用的是 call 或者 apply。通过这种方式，我们可以强行使 this 等于 obj。</p><pre><code class=\"language-javascript\">function logger() {\n    console.log( this.a );\n}\n\nvar obj = {\n    a: 3\n};\n\nlogger.call( obj ); // 3\n</code></pre><p>这种显式绑定也不能完全解决问题，它也会产生一些副作用，比如在通过 wrapper 包装的 new String，new Boolean 或 new Number 的时候，这种绑定就会消失。</p><h2>硬性绑定</h2><p>下面，我们再来看看一种硬性绑定的方式。这里，我们使用从ES5开始支持的 bind 来绑定，通过这种方式，无论后续我们怎么调用 hardBinding 函数，logger 都会把 obj 当做 this 来获取它的 a 属性的值。</p><pre><code class=\"language-javascript\">function logger() {\n    console.log( this.a );\n}\n\nvar obj = {\n    a: 3\n};\n\nvar hardBinding = logger.bind( obj );\n\nsetTimeout( hardBinding, 1000 ); // 3\n\nhardBinding.call( window ); // 3\n</code></pre><h2>new绑定</h2><p>最后，我们再来看看new 绑定，当我们使用 new 创建一个新的实例的时候，这个新的对象就是 this，所以我们可以看到在新的实例中我们传入的 2，就可以给 loggerA 实例的属性 a 赋值为 a，所以返回的结果是 2。</p><pre><code class=\"language-javascript\">function logger(a) {\n&nbsp; &nbsp; this.a = a;\n    console.log( this.a );\n}\n\nvar loggerA = new logger( 2 ); // 2\n</code></pre><p>下面我们来看一个“硬碰硬”的较量，我们来试试用hard binding 来对决 new binding，看看谁拥有绝对的实力。下面，我们先将 logger 里的 this 硬性绑定到obj 1上，这时我们输出的结果是2。然后，我们用 new 来创建一个新的 logger 实例，在这个实例中，我们可以看到 obj 2 作为新的 logger 实例，它的 this 是可以不受 obj 1 影响的。<strong>所以new是强于hard binding的。</strong></p><pre><code class=\"language-javascript\">function logger(a) {\n    this.a = a;\n}\n\nvar obj1 = {};\n\nvar hardBinding = logger.bind( obj1 );\n\nhardBinding( 2 );\n\nconsole.log( obj1.a ); // 2\n\nvar obj2 = new logger( 3 );\n\nconsole.log( obj1.a ); // 2\nconsole.log( obj2.a ); // 3\n</code></pre><p>之前在评论区也有朋友提到过谋智，也就是开发了火狐浏览器的公司，运营的一个MDN网站是一个不错的辅助了解JavaScript的平台。通过在MDN上的 bind polyfill 的代码，我们大概可以看到在 bind 中是有一个逻辑判断的，它会看新的实例是不是通过 new 来创建的，如果是，那么 this 就绑定到新的实例上。</p><pre><code class=\"language-javascript\">this instanceof fNOP &amp;&amp;\noThis ? this : oThis\n\n// ... and:\n\nfNOP.prototype = this.prototype;\nfBound.prototype = new fNOP();\n</code></pre><p>那么我们对比 new 和 bind 各有什么好处呢？用 new 的好处是可以帮助我们忽略 hard binding，同时可以预设函数的实参。用 bind 的好处是任何 this 之后的实参，都可以当做是默认的实参。这样就可以用来创建我们之前<a href=\"https://time.geekbang.org/column/article/574132\">第3讲</a>说过的柯理式中的部分应用。比如在下面的例子中，1 和 2 就作为默认实参，在 partialFunc 中我们只要输入 9，就可以得到3个数字相加的结果。</p><pre><code class=\"language-javascript\">function fullFunc (x, y, z) {\n  return x + y + z;\n}\n\nconst partialFunc = fullFunc.bind(this, 1, 2);\npartialFunc(9); // 12\n</code></pre><p>除了硬性绑定外，还有一个软性绑定的方式，它可以在 global 或 undefined 的情况下，将 this 绑定到一个默认的 obj 上。</p><pre><code class=\"language-javascript\">if (!Function.prototype.softBind) {\n    Function.prototype.softBind = function(obj) {\n        var fn = this,\n            curried = [].slice.call( arguments, 1 ),\n            bound = function bound() {\n                return fn.apply(\n                    (!this ||\n                        (typeof window !== \"undefined\" &amp;&amp;\n                            this === window) ||\n                        (typeof global !== \"undefined\" &amp;&amp;\n                            this === global)\n                    ) ? obj : this,\n                    curried.concat.apply( curried, arguments )\n                );\n            };\n        bound.prototype = Object.create( fn.prototype );\n        return bound;\n    };\n}\n</code></pre><p>在下面的例子当中，我们可以看到，除隐式、显式和软性绑定外，obj2 在 timeout 全局作用域下，返回的默认绑定结果。</p><pre><code class=\"language-javascript\">function logger() {\n   console.log(\"name: \" + this.name);\n}\nvar obj1 = { name: \"obj1\" },\n    obj2 = { name: \"obj2\" },\n    obj3 = { name: \"obj3\" }；\n\nvar logger1 = logger.softBind( obj1 );\nlogger1(); // name: obj1\n\nobj2.logger = logger.softBind( obj1 );\nobj2.logger(); // name: obj2   \n\nlogger1.call( obj3 ); // name: obj3   \n\nsetTimeout( obj2.logger, 1000 ); // name: obj1\n</code></pre><p>同样地，这样的软性绑定也支持我们前面说的柯理式中的部分应用。</p><pre><code class=\"language-javascript\">function fullFunc (x, y, z) {\n  return x + y + z;\n}\n\nconst partialFunc = fullFunc.softBind(this, 1, 2);\npartialFunc(9); // 12\n</code></pre><h2>延伸：箭头函数</h2><p>在 this 的绑定中，有一点是需要我们注意的，那就是当我们使用箭头函数的时候，this 是在词法域里面的，而不是根据函数执行时的上下文。比如在下面的例子中，我们看到返回的结果就是 2 而不是3。</p><pre><code class=\"language-javascript\">function logger() {\n    return (a) =&gt; {\n        console.log( this.a );\n    };\n}\nvar obj1 = {\n    a: 2\n};\n\nvar obj2 = {\n    a: 3\n};\n\nvar logger1 = logger.call( obj1 );\n\nlogger1.call( obj2 ); // 2\n</code></pre><p>通过箭头函数来做 this 绑定的一个比较常用的场景就是setTimeout。在这个函数中的 this 就会绑定在 logger 的函数词法域里。</p><pre><code class=\"language-javascript\">function logger() {\n    setTimeout(() =&gt; {\n        console.log( this.a );\n    },1000);\n}\nvar obj = {\n    a: 2\n};\nlogger.call( obj ); // 2\n</code></pre><p>如果我们不用箭头函数的话，也可以通过 self = this 这样的方式将 this 绑定在词法域里。</p><pre><code class=\"language-javascript\">function logger() {\n    var self = this; \n    setTimeout( function(){\n        console.log( self.a );\n    }, 1000 );\n}\nvar obj = {\n    a: 2\n};\nlogger.call( obj ); // 2\n</code></pre><p>但是通常为了代码的可读性和可维护性，在同一个函数中，应该一以贯之，要么尽量使用词法域，干脆不要有 this；或者要用 this，就通过 bind 等来绑定，而不是通过箭头函数或者 self = this 这样的“奇技淫巧”来做绑定。</p><h2>总结</h2><p>这节课我们学习了 this 的绑定，它可以说是和函数式中的 closure 有着同等重要性的概念。如果说函数式编程离不开对 closure 的理解，那么不理解 this，在 JavaScript 中用面向对象编程也会一头雾水。这两个概念虽然理解起来比较绕脑，但是一旦理解，你就会发现它们的无处不在。</p><h2>思考题</h2><p>我们今天在讲 this 的绑定时，用到了 call 和 bind，我们知道 JavaScript 中和 call 类似的还有 apply，那么你觉得在处理绑定时，它和 call 效果一样吗？</p><p>欢迎在留言区分享你的答案、交流学习心得或者提出问题，如果觉得有收获，也欢迎你把今天的内容分享给更多的朋友。</p>","neighbors":{"left":{"article_title":"08｜深入理解继承、Delegation和组合","id":578058},"right":{"article_title":"10｜JS有哪8种数据类型，你需要注意什么？","id":579427}},"comments":[{"had_liked":false,"id":363679,"user_name":"缄默","can_delete":false,"product_type":"c1","uid":2780630,"ip_address":"海南","ucode":"43BEF60601DA46","user_header":"https://static001.geekbang.org/account/avatar/00/2a/6d/d6/f071d69d.jpg","comment_is_top":false,"comment_ctime":1669971881,"is_pvip":false,"replies":[{"id":133028,"content":"虽然下面是bind的polyfill，但是我们可以看到new是优先于bind的\n\nthis instanceof fNOP &amp;&amp;\noThis ? this : oThis\n\n&#47;&#47; ... and:\n\nfNOP.prototype = this.prototype;\nfBound.prototype = new fNOP();\n\n我理解这样的优先级是为了让new可以忽略this的 hard binding，同时预置一些或全部的参数。","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1672277484,"ip_address":"海南","comment_id":363679,"utype":1}],"discussion_count":3,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"关于“new 是强于 hard binding 的”结论这一块的例子，bind方法本身就是返回一个新函数，对logger这个函数并无影响。而new出来的obj2的this肯定只与new传参时的值相关 。所以这个例子并不能推论出这一结论","like_count":4,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597841,"discussion_content":"虽然下面是bind的polyfill，但是我们可以看到new是优先于bind的\n\nthis instanceof fNOP &amp;&amp;\noThis ? this : oThis\n\n// ... and:\n\nfNOP.prototype = this.prototype;\nfBound.prototype = new fNOP();\n\n我理解这样的优先级是为了让new可以忽略this的 hard binding，同时预置一些或全部的参数。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672277484,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"海南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2056344,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/60/98/e612c162.jpg","nickname":"黑夜里的圣逗士","note":"","ucode":"A284CE7B7B53BB","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":633298,"discussion_content":"我也想说来着，应该是和楼上所说的一样，不知道是不是勘误\n应该是 var obj2 = new hardBinding( 3 ); 如果 new logger()就没有比较的意义了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1701961873,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2829376,"avatar":"https://static001.geekbang.org/account/avatar/00/2b/2c/40/9acdbad6.jpg","nickname":"嬴","note":"","ucode":"465EBAFBB63FD7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":606488,"discussion_content":"应该是这样吧：\n\n》》》》》》》》》》》》》》》》》》》》》\nfunction logger(a) {\n  this.a = a;\n}\n\nvar obj1 = {};\n\nvar hardBinding = logger.bind( obj1 );\n\nhardBinding( 2 );\n\nconsole.log( obj1.a ); // 2\n\nvar obj2 = new hardBinding( 3 );   // \n\nconsole.log( obj1.a ); // 2\nconsole.log( obj2.a ); // 3\n》》》》》》》》》》》》》》》》》》》》》》\n\n使用 logger.bind(obj1) 返回的 hardBinding 函数，作为构造函数，new hardBinding(3) 返回新的实例 obj2，obj2.a 等于 3，说明 new 是要强于 bind\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1677163064,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"陕西","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":365007,"user_name":"WGH丶","can_delete":false,"product_type":"c1","uid":1922568,"ip_address":"海南","ucode":"02E43256770C62","user_header":"https://static001.geekbang.org/account/avatar/00/1d/56/08/bd75f114.jpg","comment_is_top":false,"comment_ctime":1671897331,"is_pvip":false,"replies":[{"id":133016,"content":"很好的对比","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1672233408,"ip_address":"海南","comment_id":365007,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"其他语言中也有this，python也有类似的self。JS的特殊之处在于支持多种编程范式，比如面向对象和函数式编程。本来this是在面向对象中使用就好，但是JS中没有类，有时候要靠函数创建对象，自然地，this从面向对象中被“移植”到了函数式编程中。像new，bind，apply，箭头函数这些，都像是一些补丁，以便更好地同时支持两种编程方式。正是这种适配，导致了JSer理解上的困惑。\n\njava没有这个问题，其函数不能独立于对象使用。python虽然支持函数独立于对象使用，但是在对象外的函数，不再支持self，因此也没有这个困惑。","like_count":3,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":597811,"discussion_content":"很好的对比","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1672233408,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"海南","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359163,"user_name":"拉莱耶的猫","can_delete":false,"product_type":"c1","uid":1026252,"ip_address":"北京","ucode":"E6FC127D4793FC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/a8/cc/3fd87ba9.jpg","comment_is_top":false,"comment_ctime":1665298046,"is_pvip":false,"replies":[{"id":130631,"content":"谢谢指出，这里做些修改，之后也会更新到文稿里。\n\nfunction aLogger() {\n    console.log( this.a );\n}\nvar obj = {\n    a: 3,\n    logger: aLogger\n};\nvar a = 2;\nobj.logger(); &#47;&#47; 3","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1665311296,"ip_address":"北京","comment_id":359163,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"隐式绑定那一节, aLogger跟代码里不一致","like_count":1,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589800,"discussion_content":"谢谢指出，这里做些修改，之后也会更新到文稿里。\n\nfunction aLogger() {\n    console.log( this.a );\n}\nvar obj = {\n    a: 3,\n    logger: aLogger\n};\nvar a = 2;\nobj.logger(); // 3","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665311297,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":370339,"user_name":"荷兰小猪8813","can_delete":false,"product_type":"c1","uid":1135912,"ip_address":"广东","ucode":"FF7E235F91BA5C","user_header":"https://static001.geekbang.org/account/avatar/00/11/55/28/66bf4bc4.jpg","comment_is_top":false,"comment_ctime":1678723278,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"简答总结下，js 确实麻烦，作为一个 Android 工程师，我觉得还是 java 和 kotlin 好～～～～\n\n1、全局作用域下，this 始终指向全局对象 window，无论是否是严格模式！\n\n2、普通函数内的 this 分为两种情况，严格模式下和非严格模式下。\n\n严格模式下：直接调用函数，this 指向 undefined，window.test() 调用函数 this 指向 window\n非严格模式下：直接调用函数和 window.test() 调用函数对象，this 都指向 window。\n\n3、对象内部方法的 this 指向调用这些方法的对象，也就是谁调用就指向谁。多层嵌套的对象，内部方法的 this 指向离被调用函数最近的对象。\n\n4、箭头函数：this 指向于函数作用域所用的对象。\n箭头函数的重要特征：箭头函数中没有 this 和 arguments，都是从外层继承的；\n箭头函数会捕获自己定义所处的外层执行环境，并且继承这个 this 值，指向当前定义时所在的对象。\n箭头函数的 this 指向在被定义的时候就确定了，之后永远都不会改变。即使使用 call()、apply()、bind() 等方法改变 this 指向也不可以。\n\n5、构造函数中的 this 是指向构造函数创建的实例。\n\n6、原型链中的 this：在一个继承机制中，仍然是指向它原本属于的对象，而不是从原型链上找到它时，它所属于的对象。\n\n","like_count":0}]}