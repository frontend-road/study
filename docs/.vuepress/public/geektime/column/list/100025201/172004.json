{"id":172004,"title":"加餐 | 实战：“画图程序” 的整体架构","content":"<p>你好，我是七牛云许式伟。</p><p>我们先回顾一下 “架构思维篇” 前面几讲的内容：</p><ul>\n<li><a href=\"https://time.geekbang.org/column/article/166014\">57 | 心性：架构师的修炼之道</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/167844\">58 | 如何判断架构设计的优劣？</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/169113\">59 | 少谈点框架，多谈点业务</a></li>\n<li><a href=\"https://time.geekbang.org/column/article/170912\">60 | 架构分解：边界，不断重新审视边界</a></li>\n</ul><p>我们先谈了怎么才能修炼成为一个好的架构师，其中最核心的一点是修心。这听起来好像一点都不像是在谈一门有关于工程的学科，但这又的的确确是产生优秀架构师最重要的基础。</p><p>接下来几篇，我们核心围绕着这样几个话题：</p><ul>\n<li>什么是好的架构？</li>\n<li>架构的本质是业务的正交分解，分解后的每个模块业务上仍然是自洽的。</li>\n</ul><p>我们反复在强调 “业务” 一词。可以这样说，关注每个模块的业务属性，是架构的最高准则。</p><p>不同模块的重要程度不同，由此我们会区分出核心模块和周边模块。对于任何一个业务，它总可以分解出一个核心系统，和多个周边系统。不同周边系统相互正交。即使他们可能会发生关联，也是通过与核心系统打交道来建立彼此的间接联系。</p><p>今天我们将通过第二章 “桌面开发篇” 的实战案例 “画图程序” 来验证下我们这些想法。我们以最后一次迭代的版本 v44 为基础：</p><ul>\n<li><a href=\"https://github.com/qiniu/qpaint/tree/v44\">https://github.com/qiniu/qpaint/tree/v44</a></li>\n</ul><h2>整体结构</h2><p>我们先来分析整个 “画图” 程序的整体结构。除了 index.htm 作为总控的入口外，我们把其他的文件分为以下四类：</p><!-- [[[read_end]]] --><ul>\n<li>核心系统（棕色）：这些文件隶属于整个画图程序的业务核心，不可或缺；</li>\n<li>周边系统（黄色）：这些文件属于业务的可选组件；</li>\n<li>通用控件（绿色）：这些文件与画图程序的业务无关，属于通用的界面元素，由画图程序的周边系统所引用；</li>\n<li>基础框架（紫色）：这些文件与画图程序的业务无关，属于第三方代码，或者更基础的底层框架。</li>\n</ul><p>我们可以有如下文件级别的系统组织结构：</p><p><img src=\"https://static001.geekbang.org/resource/image/7d/2c/7d60b52bb3f7ab8b00e5b971c88e0e2c.png?wh=876*2056\" alt=\"图片: https://uploader.shimo.im/f/zKB8bU0Xia8FSf6z.png\"></p><p>通过这个图我们可以看出，这个画图程序的 “内核” 是非常小的，就三个文件：index.htm、view.js、dom.js。为了让你看到每个文件的复杂度，我把各个文件的代码规模也在图中标了出来。如果我们把所有的周边系统以及它们的依赖代码去除，整个程序仍然是可以工作的，只不过我们得到的是一个只读的画图程序的查看器（QPaintViewer）。</p><p>这很有意思，因为我们把所有的 Controllers 都做成了彼此完全正交的可选组件。</p><p>有了这个图，我们对各个文件之间的关系就很清楚了。接下来，正如我们在 “ <a href=\"https://time.geekbang.org/column/article/167844\">58 | 如何判断架构设计的优劣？</a>” 中说的那样，我们最关心的还是周边系统，也就是这些 Controller 对核心系统的伤害是什么样的。</p><p>我们先把所有引用关系列出来：</p><p><img src=\"https://static001.geekbang.org/resource/image/e3/72/e3648810c6eba42c42e69f8bd3170272.jpg?wh=2315*4580\" alt=\"\"></p><p>我们先看 creator/rect.js 模块。它对 View 层，主要是 QPaintView 类的引用是 10 处，对 Model 层，主要是 QPaintDoc、Shape、QShapeStyle 这三者的引用是 6 处。每处引用都是 1 行代码，直接调用 View 层或 Model 层对外提供的接口方法。</p><p>单就 creator/rect.js 模块而言，它对核心系统的伤害值为 10 + 6 = 16。但是实际上这些接口方法绝大部分并不是专门提供给 creator/rect.js 模块的，这意味着所有周边模块应该共担这个伤害值。比如某个接口方法被 N 个周边模块引用，那么每个周边模块分担的伤害值为 1/N。</p><p>这个逻辑初听起来有点奇怪，我新增一个和我互不相关的周边模块，怎么会导致一个既有周边模块对核心系统的伤害值降低？</p><p>这是因为，我们的伤害值是工程测量值。我们往极端来说，如果有无穷多个周边模块都会引用某个接口方法，那么对于其中某个周边模块来说，它为此造成的伤害值为 0，因为这个接口太稳定了。这也证明，抽象出共性的业务方法，比给某个周边模块单独开绿灯要好。我们定义业务的接口要尽可能追求自然。</p><p>但是现实中，被无数个周边模块引用的接口是不存在的。你可能主观判断我这个接口是很通用的，但是它需要实证的依据。每增加一个引用方，这个实证就被加强一次。这也是为什么增加一个新周边模块会导致既有周边模块伤害值降低的原因，因为它证实了一些接口方法的确是通用的。</p><p>有一些接口当前只有 creator/rect.js 引用的，这些接口的引用代码在表格中我把它们标为红色，它们是：</p><ul>\n<li>new QLine</li>\n<li>new QRect</li>\n<li>new QEllipse</li>\n<li>shape.onpaint</li>\n</ul><p>我们一眼看过去就很清楚，这些接口确实是非常通用的接口。之所以它们只有 creator/rect.js 引用，是因为这个 “画图” 程序当前的规模还比较小，随着越来越多的周边模块加入，逐步也会有更多人分担伤害值。</p><p>当前系统有 5 个周边模块。考虑多个周边模块共担伤害值的情况，creator/rect.js 模块对核心系统的伤害值是多少？</p><p>我们做个近似，只要某个接口已经被超过一个周边模块引用，就认为它的引用次数是 5，而不是一一去统计它。这样算的话，creator/rect.js 模块对核心系统的伤害值约 12/5 + 4 = 6.4。</p><p>类似地，我们可以计算其他周边模块对核心系统的伤害值，具体如下：</p><ul>\n<li>creator/path.js 模块，伤害值约 12/5 + 1 = 3.4。</li>\n<li>creator/freepath.js 模块，伤害值约 13/5 = 2.6。</li>\n<li>accel/select.js 模块，伤害值约 10/5 + 6 = 8。</li>\n<li>accel/menu.js 模块，伤害值约 5/5 + 6 = 7。</li>\n</ul><p>如果我们把所有周边模块看作整体，它和核心系统的关系如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/7c/6f/7cfe703828a3a725ef374652c84d786f.jpg?wh=2286*1981\" alt=\"\"></p><p>可以看出，整个周边系统对核心系统的引用是 31 处，也就是说它带来的伤害值为 31。这和上面我们近似计算得到的所有周边系统伤害值之和 6.4 + 3.4 + 2.6 + 8 + 7 = 27.4 不同。这中间的差异主要由于我们没有去实际统计接口方法的引用次数而直接统一用 5，所以估算的伤害值比实际会小一点。</p><h2>Model 层</h2><p>看完了整体，我们把关注点放到 Model 层。</p><p>对于这个画图程序，代码量最多的就是 Model 层，即 dom.js 文件，大约 850 多行代码。所以我们决定进一步分解它，得到如下结构：</p><p><img src=\"https://static001.geekbang.org/resource/image/a9/d3/a957b92f3bac3bcfdfea9943f87583d3.png?wh=1158*2104\" alt=\"\"></p><p>当我们把 Model 层看作一个完整的业务时，它内部仍然可以分解出一个核心系统，和多个周边系统。并且同样地，我们把代码分为四类：</p><ul>\n<li>核心系统：隶属于整个画图程序的业务核心，不可或缺，我们标记为棕色或白色；</li>\n<li>周边系统：属于业务的可选组件，主要是各类图形；</li>\n<li>操作系统相关的辅助函数：与业务无关，但是和平台相关，我们标记为绿色；</li>\n<li>纯算法的辅助函数：与业务无关，与操作系统也无关，我们标记为紫色。</li>\n</ul><p>上图的核心系统中，标记为棕色的模块与白色的模块的区别在于，标棕色的模块会被周边系统所引用，属于核心系统的 “接口级” 模块。标白色的模块只被核心系统内部所引用，不把它们画出来也是可以的。</p><p>另外，图中 Shape 接口因为 JavaScript 是弱类型语言，它在代码中并没有显式体现出来。这里我们将它用 Go 语法表达如下：</p><pre><code>type number = float64\ntype any = interface{}\n\ntype HitResult struct {\n  hitCode  number\n  hitShape Shape\n}\n\ntype Shape interface {\n  style QShapeStyle\n  onpaint(ctx CanvasRenderingContext2D)\n  hitTest(pt Point) HitResult\n  bound() Rect\n  setProp(parent any, key string, val any)\n  move(parent any, dx, dy number)\n  toJSON() any\n}\n</code></pre><p>当然，和分析整个画图程序一样，我们最关心的还是周边系统对核心系统的伤害是什么样的。</p><p>我们先把所有引用关系列出来：</p><p><img src=\"https://static001.geekbang.org/resource/image/74/1f/74d1cb4b80073aa73984841c3c25021f.jpg?wh=1968*1551\" alt=\"\"></p><p>对于 Model 层来说，目前我们需求的开放性主要体现在图形（Shape）的种类。未来是否要支持图片，是否要支持艺术字等等，这些存在很大的变数。所以我们当前的周边模块，基本上都是某种图形。</p><p>通过这个表格我们可以看出，不同的图形对核心系统的需求完全一模一样。我们很容易计算得到，整个周边系统对核心系统的伤害值为 4，平均每一种图形的伤害值为 1。</p><h2>通用控件库</h2><p>聊了文件级别的组织结构，也聊了 Model 层，我们画图程序的整体脉络也就出来了。这里我再补充一个虽然和业务无关，但是也是一个不小的体系设计：通用控件库子系统。</p><p>控件的种类是无穷的，我们自然而然得去考虑怎么适应未来的需求。出于开放性架构的考虑，你会发现它也可以基于核心系统和周边系统来拆分，如下：</p><p><img src=\"https://static001.geekbang.org/resource/image/a2/6e/a2f7dc9e8c0b9fbdac29073e56b6046e.png?wh=1028*684\" alt=\"\"></p><p>同样地，我们最关心的还是周边系统对核心系统的伤害是什么样的。</p><p>我们先把所有引用关系列出来：</p><p><img src=\"https://static001.geekbang.org/resource/image/c9/3c/c9692849b70ab563b6d33fd9cf324e3c.jpg?wh=2129*438\" alt=\"\"></p><p>通过这个表格我们可以看出，这些控件的实现本身和核心系统，即控件框架没什么关系，它们只是把自己注册到控件框架中。所有控件对核心系统的需求完全一模一样。我们很容易计算得到，整个周边系统对核心系统的伤害值为 1，平均每一种控件的伤害值为 1/3。</p><h2>结语</h2><p>这一讲我们通过前面实战的画图程序作为例子，来剖析架构设计过程业务是如何被分解的。</p><p>对于复杂系统，一定要理清核心系统和周边系统的边界，让整个程序的内核最小化。</p><p>另外，我们也实际分析了画图程序中，周边模块对核心系统的伤害值。这个数据可以很好地评判不同架构方案的好坏。</p><p>如果你自己也实现了一个 “画图程序”，可以根据这几讲的内容，对比一下我们给出的样例代码，和自己写的有哪些架构思想上的不同，这些不同之处的得失是什么？</p><p>如果你对今天的内容有什么思考与解读，欢迎给我留言，我们一起讨论。下一讲我们的话题是 “全局性功能的架构设计”。</p><p>如果你觉得有所收获，也欢迎把文章分享给你的朋友。感谢你的收听，我们下期再见。</p>","neighbors":{"left":{"article_title":"60 | 架构分解：边界，不断重新审视边界","id":170912},"right":{"article_title":"61 | 全局性功能的架构设计","id":173619}},"comments":[{"had_liked":false,"id":156975,"user_name":"Aaron Cheung","can_delete":false,"product_type":"c1","uid":1079816,"ip_address":"","ucode":"03972759C53667","user_header":"https://static001.geekbang.org/account/avatar/00/10/7a/08/4d3e47dd.jpg","comment_is_top":false,"comment_ctime":1575006638,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"53114614190","product_id":100025201,"comment_content":"这块伤害值的计算 真的是学习到了","like_count":12},{"had_liked":false,"id":177249,"user_name":"不记年","can_delete":false,"product_type":"c1","uid":1045945,"ip_address":"","ucode":"287E40C68356DC","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f5/b9/888fe350.jpg","comment_is_top":false,"comment_ctime":1581332692,"is_pvip":false,"replies":[{"id":"68835","content":"接口函数的调用也是耦合，只是是比较良性的耦合。有耦合就有伤害。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1581339182,"ip_address":"","comment_id":177249,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10171267284","product_id":100025201,"comment_content":"许老师，有个问题不太明白想请教下您，像rect.js这样的周边系统的代码没有在核心系统里面，根据您之前章节给的公司应该是0啊， 为什么还会有伤害值呢","like_count":2,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483360,"discussion_content":"接口函数的调用也是耦合，只是是比较良性的耦合。有耦合就有伤害。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581339182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181975,"user_name":"Bravery168","can_delete":false,"product_type":"c1","uid":1232973,"ip_address":"","ucode":"DB08AEFBD6DF2B","user_header":"https://static001.geekbang.org/account/avatar/00/12/d0/4d/2116c1a4.jpg","comment_is_top":false,"comment_ctime":1582686601,"is_pvip":false,"discussion_count":0,"race_medal":4,"score":"5877653897","product_id":100025201,"comment_content":"核心和周边的概念可以用在不同的分解层次上，从多系统角度,系统内部结构，模块划分上都可以这么分。","like_count":1},{"had_liked":false,"id":162523,"user_name":"CoderLim","can_delete":false,"product_type":"c1","uid":1029523,"ip_address":"","ucode":"4A856891BE98E5","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKY0ibA4DWA9Bf6MuicKhyEt0yDXvAzG21xnOUHNLDwuic2icxpesyeXc1AMboeZEW97e8SuZdzIBefqA/132","comment_is_top":false,"comment_ctime":1576549250,"is_pvip":false,"replies":[{"id":"61829","content":"核心与否是相对而言的，也就是对要研究的系统来说，哪个更加必不可少。","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1576557086,"ip_address":"","comment_id":162523,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5871516546","product_id":100025201,"comment_content":"有两个问题想要请教：1、为什么 controller 不是核心模块呢，因为 dom+view 只能构成只读的画图业务，是不是核心业务的缺失呢？2、对于 Model 层，QSerializer 和 QSynchronizer 因为对于 Model 来说去掉不会影响业务，为什么它们是核心模块呢？多谢","like_count":1,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478076,"discussion_content":"核心与否是相对而言的，也就是对要研究的系统来说，哪个更加必不可少。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576557086,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":355446,"user_name":"Kevin","can_delete":false,"product_type":"c1","uid":2763179,"ip_address":"广东","ucode":"3588850B3370C8","user_header":"https://static001.geekbang.org/account/avatar/00/2a/29/ab/59a6e437.jpg","comment_is_top":false,"comment_ctime":1661396128,"is_pvip":true,"discussion_count":0,"race_medal":5,"score":"1661396128","product_id":100025201,"comment_content":"简直叹为观止！","like_count":0},{"had_liked":false,"id":321381,"user_name":"哲","can_delete":false,"product_type":"c1","uid":2581217,"ip_address":"","ucode":"2616478F11E457","user_header":"https://static001.geekbang.org/account/avatar/00/27/62/e1/764aca72.jpg","comment_is_top":false,"comment_ctime":1636818546,"is_pvip":false,"replies":[{"id":"116750","content":"👍","user_name":"作者回复","user_name_real":"许式伟-七牛云(已满)","uid":"1228022","ctime":1636907392,"ip_address":"","comment_id":321381,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636818546","product_id":100025201,"comment_content":"抓住核心模块，主要的业务逻辑，区分出周边的模块，才能减少伤害值，主次不分的架构，不是好架构","like_count":0,"discussions":[{"author":{"id":1228022,"avatar":"https://static001.geekbang.org/account/avatar/00/12/bc/f6/e61d4b8f.jpg","nickname":"许式伟-七牛云(已满)","note":"","ucode":"1A2F8AA6F6DB54","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":530284,"discussion_content":"👍","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636907392,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":319844,"user_name":"天天向上","can_delete":false,"product_type":"c1","uid":1031113,"ip_address":"","ucode":"5948D359734193","user_header":"https://static001.geekbang.org/account/avatar/00/0f/bb/c9/37924ad4.jpg","comment_is_top":false,"comment_ctime":1635986958,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1635986958","product_id":100025201,"comment_content":"核心系统 核心领域 企业价值<br>周边系统 提升效率 通用业务 <br>通用系统 提升效率 通用技术<br>基础系统 底座支持","like_count":0},{"had_liked":false,"id":310328,"user_name":"恬毅","can_delete":false,"product_type":"c1","uid":1015240,"ip_address":"","ucode":"914ED16F3BE714","user_header":"https://static001.geekbang.org/account/avatar/00/0f/7d/c8/e4727683.jpg","comment_is_top":false,"comment_ctime":1630596045,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1630596045","product_id":100025201,"comment_content":"触类旁通，每个系统都可以分出核心模块，周边模块，基础控件，通用控件。比如电商系统，商品，下单，支付属于核心，聊天、优惠券属于周边","like_count":0},{"had_liked":false,"id":284240,"user_name":"Run","can_delete":false,"product_type":"c1","uid":1371941,"ip_address":"","ucode":"6738D2F36ACFF6","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTLMDBq7lqg9ZasC4f21R0axKJRVCBImPKlQF8yOicLLXIsNgsZxsVyN1mbvFOL6eVPluTNgJofwZeA/132","comment_is_top":false,"comment_ctime":1616132840,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1616132840","product_id":100025201,"comment_content":"工程思维","like_count":0},{"had_liked":false,"id":156795,"user_name":"leslie","can_delete":false,"product_type":"c1","uid":1324255,"ip_address":"","ucode":"798E7C1CC98CC2","user_header":"https://static001.geekbang.org/account/avatar/00/14/34/df/64e3d533.jpg","comment_is_top":false,"comment_ctime":1574958008,"is_pvip":false,"discussion_count":0,"race_medal":0,"score":"1574958008","product_id":100025201,"comment_content":"   这个图的画法就梳理的就非常清楚：单独的从架构图流程图而不梳理出核心的模块，就是一种缺失；很多看似觉得挺不错，可是真实做起来就是各种补锅。之前总觉得缺啥却又说不上来，缺的就是模块这块的关联，老师的课程里又学到了一招管用的方法。","like_count":0}]}