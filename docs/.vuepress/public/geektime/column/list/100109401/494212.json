{"id":494212,"title":"02｜TDD演示（2）：识别坏味道与代码重构","content":"<p>你好，我是徐昊。今天我们来继续进行命令行参数解析的TDD演示。</p><p>首先让我们回顾一下题目与需求与代码进度。如前所述，题目源自Bob大叔的 <em><em>Clean Code</em></em> 第十四章：</p><blockquote>\n<p>我们中的大多数人都不得不时不时地解析一下命令行参数。如果我们没有一个方便的工具，那么我们就简单地处理一下传入main函数的字符串数组。有很多开源工具可以完成这个任务，但它们可能并不能完全满足我们的要求。所以我们再写一个吧。<br>\n<strong>　</strong><br>\n传递给程序的参数由标志和值组成。标志应该是一个字符，前面有一个减号。每个标志都应该有零个或多个与之相关的值。例如：<br>\n<strong>　</strong><br>\n-l -p 8080 -d /usr/logs<br>\n<strong>　</strong><br>\n“l”（日志）没有相关的值，它是一个布尔标志，如果存在则为true，不存在则为false。“p”（端口）有一个整数值，“d”（目录）有一个字符串值。标志后面如果存在多个值，则该标志表示一个列表：<br>\n<strong>　</strong><br>\n-g this is a list -d 1 2 -3 5<br>\n<strong>　</strong><br>\n\"g\"表示一个字符串列表[“this”, “is”, “a”, “list”]，“d\"标志表示一个整数列表[1, 2, -3, 5]。<br>\n<strong>　</strong><br>\n如果参数中没有指定某个标志，那么解析器应该指定一个默认值。例如，false代表布尔值，0代表数字，”\"代表字符串，[]代表列表。如果给出的参数与模式不匹配，重要的是给出一个好的错误信息，准确地解释什么是错误的。<br>\n<strong>　</strong><br>\n确保你的代码是可扩展的，即如何增加新的数值类型是直接和明显的。</p>\n</blockquote><!-- [[[read_end]]] --><h2>识别坏味道</h2><p>在通过5次红/绿循环之后，我们完成了第一块大的功能，可以处理多个参数并且支持布尔、整数和字符串类型的参数（当然，并不包含错误格式处理）。目前的代码看起来是这样的：</p><pre><code>package geektime.tdd.args;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Parameter;\nimport java.util.Arrays;\nimport java.util.List;\n\n\npublic class Args {\n  public static &lt;T&gt; T parse(Class&lt;T&gt; optionsClass, String... args) {\n    try {\n      List&lt;String&gt; arguments = Arrays.asList(args);\n      Constructor&lt;?&gt; constructor =\n          optionsClass.getDeclaredConstructors()[0];\n      Object[] values =\n          Arrays.stream(constructor.getParameters()).map(it -&gt;   \n              parseOption(arguments, it)).toArray();\n      return (T) constructor.newInstance(values);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n  \n  private static Object parseOption(List&lt;String&gt; arguments, Parameter\n      parameter) {\n    Object value = null;\n    Option option = parameter.getAnnotation(Option.class);\n    if (parameter.getType() == boolean.class) {\n      value = arguments.contains(&quot;-&quot; + option.value());\n    }\n    if (parameter.getType() == int.class) {\n      int index = arguments.indexOf(&quot;-&quot; + option.value());\n      value = Integer.parseInt(arguments.get(index + 1));\n    }\n    if (parameter.getType() == String.class) {\n      int index = arguments.indexOf(&quot;-&quot; + option.value());\n      value = arguments.get(index + 1);\n    }\n    return value;\n  }\n}\n</code></pre><p>现在我们有两个选择：继续完成功能，或者开始重构。是否进入重构有两个先决条件，第一是测试都是绿的，也就是当前功能正常。第二是坏味道足够明显。</p><p>显然我们的测试都是绿的，而且到达了一个里程碑点，完成了一大块功能。同样，目前代码中存在明显的坏味道，就是这段代码：</p><pre><code> if (parameter.getType() == boolean.class) {\n      value = arguments.contains(&quot;-&quot; + option.value());\n    }\n    if (parameter.getType() == int.class) {\n      int index = arguments.indexOf(&quot;-&quot; + option.value());\n      value = Integer.parseInt(arguments.get(index + 1));\n    }\n    if (parameter.getType() == String.class) {\n      int index = arguments.indexOf(&quot;-&quot; + option.value());\n      value = arguments.get(index + 1);\n    }\n</code></pre><p>可以看到，这段代码中存在多个分支条件。而且可以预见，随着我们要支持的类型越来越多，比如double类型，那么我们还需要引入更多类似的结构。</p><p>这是一个明显的面向对象误用的坏味道——分支语句（Switch Statements、Object-Oriented Abusers）。而我们可以利用重构手法“利用多态替换条件分支”（Replacing Conditional with Polymorphism）对其进行重构。</p><h2>利用多态替换条件分支</h2><p>需要注意的是，“利用多态替换条件分支”是一个相当大的重构，我们需要一系列的步骤才能完成这个重构。这期间，我们需要保持小步骤且稳定的节奏，逐步完成重构，而不是按照目标对代码进行重写。所以在观看下面的视频时，请留心数一下，在整个重构过程中，我运行了多少次测试。</p><p>首先，将需要重构的部分抽取方法（Extract Method），并提取接口：</p><p><video poster=\"https://static001.geekbang.org/resource/image/c3/a2/c3f7a5d53abb98f63d4e37c24ed023a2.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/3373f638-17f91553b08-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/6dea22b14c3b4caab62466461955821c/039596878d2540718e32ca87786130f7-77887e32b1a08347a96fc82fe56a0e50-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>接着，再将修改后的方法内联回去（Inline Method）。经过这两步，我们引入了多态的接口，接下来就要消除分支了。由于我们无法扩展内建类型Class类，因此只能使用“抽象工厂”模式（Abstract Factory）的变体来替换分支：</p><p><video poster=\"https://static001.geekbang.org/resource/image/c3/a2/c3f7a5d53abb98f63d4e37c24ed023a2.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/e47c810-17f916ecdb2-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/c68b68b21dd84319931b5e9db355a045/4757539d9a1b4d0793c751c6e1af4486-7f004010fed712c2a8cca7c455fc2879-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><p>好了，我们已经消除了分支语句的坏味道。如果再看一下现在的代码，会发现还有另一个坏味道：<strong>代码重复</strong>（Duplication）。同样，这也是一个不小的重构操作。我们需要保持小步骤且稳定的节奏，逐步完成重构，而不是按照目标对代码进行重写：</p><p><video poster=\"https://static001.geekbang.org/resource/image/c3/a2/c3f7a5d53abb98f63d4e37c24ed023a2.jpg\" preload=\"none\" controls=\"\"><source src=\"https://media001.geekbang.org/customerTrans/7e27d07d27d407ebcc195a0e78395f55/12a1903e-17f9176ef7e-0000-0000-01d-dbacd.mp4\" type=\"video/mp4\"><source src=\" https://media001.geekbang.org/4a96aede29e641c7a58cfd9aa4804969/d416e170eb0544e18fc2f278beec5fde-e3593ddf0857b60ec5676899e0dd4acb-sd.m3u8\" type=\"application/x-mpegURL\"></video></p><h2>小结</h2><p>至此为止，我们就完成了对于代码的重构。回想我们写下的第一段生产代码：</p><pre><code>Constructor&lt;?&gt; constructor = optionClass.getDeclaredConstructors()[0];\n\ntry {\n  return (T) constructor.newInstance(true);\n} catch(Exception e) {\n  throw new RuntimeException(e);\n}\n</code></pre><p>在这个过程中，我们经历了5次红/绿循环，完成了主要功能。同时，也累计了代码坏味道。然后我们通过重构，消除了代码坏味道。在保持功能不变的前提下，得到了结构更好的代码。我估计你大概率是想不到，40分钟以后，我们会得到目前的代码结构。</p><p><strong>TDD的红/绿/重构循环，分离了关注点</strong>。在红/绿阶段，我们不关心代码结构，只关注功能的累积。而在重构的过程中，因为测试的存在，我们可以时刻检查功能是否依旧正确，同时将关注点转移到“怎么让代码变得更好”上去。</p><p>说句题外话，Kent Beck作为极限编程（Exetreme Programming）的创始人，将<strong>勇气</strong>（Courage）作为极限编程的第一原则，提出编程的第一大敌是恐惧（Fear），实在是有非凡的洞见。同时，他也花了极大的篇幅，说明为什么TDD可以让我们免于恐惧：重构使得我们在实现功能时，不恐惧于烂代码；测试使得我们在重构时，不恐惧于功能破坏。</p><p>某种意义上说，TDD认为我们很难同时达到功能正确且结构良好（对，不是针对谁，在座的诸位…），因而通过红/绿/重构，也就是先功能后结构的方式，降低了达成这个目标的难度。</p><p>下节课，我们将在这段代码的基础上完成后续功能的开发。我们将会看到，这次重构将会对任务列表产生什么影响。</p><h2>思考题</h2><p>在重构的时候，如果先消除重复代码，那么在重构步骤上会有什么不同？</p><p>如果你在学习过程中还有什么问题或想法，欢迎加入<a href=\"https://jinshuju.net/f/zvOavT\">读者交流群</a>。最后，也欢迎把你学习这节课的代码与体会分享在留言区，我们下节课再见！</p>","neighbors":{"left":{"article_title":"01｜TDD演示（1）：任务分解法与整体工作流程","id":494207},"right":{"article_title":"03｜TDD演示（3）：按测试策略重组测试","id":494597}},"comments":[{"had_liked":false,"id":339123,"user_name":"🐑","can_delete":false,"product_type":"c1","uid":2189689,"ip_address":"","ucode":"DE34B3B14287D1","user_header":"https://static001.geekbang.org/account/avatar/00/21/69/79/b4132042.jpg","comment_is_top":true,"comment_ctime":1647932982,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"大家好～我是TDD这门课的编辑辰洋～\n\n🎐我来友情提示一下下～\n\n01-04是视频演示，好对TDD有个感性的认识。\n\n05-10是对演示的复盘，同时也会讲解TDD的相关知识点。比如测试的基本结构，TDD中的测试是啥～\n\n所以，如果你在01-04的操作卡壳了，可以从05开始学，看看5-10，这才是重点哇。看完再回头去看01-04～","like_count":5},{"had_liked":false,"id":339073,"user_name":"aoe","can_delete":false,"product_type":"c1","uid":1121758,"ip_address":"","ucode":"1C6201EDB4E954","user_header":"https://static001.geekbang.org/account/avatar/00/11/1d/de/62bfa83f.jpg","comment_is_top":true,"comment_ctime":1647883078,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"1. 跟着徐老师学习了Idea重构的强大功能\n2. 本课学习笔记 https:&#47;&#47;www.wyyl1.com&#47;post&#47;19&#47;02&#47; \n3. 源码 https:&#47;&#47;github.com&#47;wyyl1&#47;geektime-tdd&#47;tree&#47;branch-02&#47;\n4. 笔记摘要\n\n优化思路\n\n不同的实现提取出接口\n实现接口\nif else 分支使用接口替换\n构造函数转工厂方法（因为工厂方法可以 inLine，构造函数不行）\n尽可能使用接口\ninLine\n  精简代码（不用跳转到方法看具体实现）\n  消除多余代码\n\n代码和老师不一样的地方\n\n区别：提前抽取了公共变量 String flag = “-” + option.value();\n理由：\n  DRY 原则\n  此时徐昊老师的代码里有多处重复\n感觉出现问题：\n  我的命名比较糟糕：SingleValueOptionParser 类中 parse(List arguments, String flag)，参数和 Option 无关\n  因为将 Option 转换成了 String，后续多参数解析，可能会出问题","like_count":2},{"had_liked":false,"id":338658,"user_name":"阿崔cxr","can_delete":false,"product_type":"c1","uid":1177565,"ip_address":"","ucode":"26E2C7D96306A4","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/dd/c85f2065.jpg","comment_is_top":true,"comment_ctime":1647649387,"is_pvip":false,"replies":[{"id":123830,"content":"nice","user_name":"作者回复","user_name_real":"编辑","uid":2537798,"ctime":1647768728,"ip_address":"","comment_id":338658,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"交一下第一章和第二章的作业\n\n环境： nodejs\n语言： typescript\n\n暂时先把 happy path 搞定了\n\nhttps:&#47;&#47;github.com&#47;cuixiaorui&#47;args","like_count":1,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557333,"discussion_content":"nice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647768728,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1441207,"avatar":"https://static001.geekbang.org/account/avatar/00/15/fd/b7/3fd3ca23.jpg","nickname":"barnett","note":"","ucode":"DDB9BC4FD34FBD","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":562996,"discussion_content":"正愁这课怎么好像没有前端参与者","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649922997,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":340770,"user_name":"术子米德","can_delete":false,"product_type":"c1","uid":1898023,"ip_address":"","ucode":"382EA7E2AF0B56","user_header":"https://static001.geekbang.org/account/avatar/00/1c/f6/27/c27599ae.jpg","comment_is_top":false,"comment_ctime":1649128801,"is_pvip":true,"replies":[{"id":124602,"content":"nice\n","user_name":"作者回复","user_name_real":"编辑","uid":2537798,"ctime":1649140781,"ip_address":"","comment_id":340770,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"🤔☕️🤔☕️🤔\n* 📖：极限编程提出，第一原则是“勇气（Courage）”，第一大敌叫“恐惧（Fear）”。\n    * 🤔：如果是代码新手，回忆一下我自己是代码新手的时候，看到这两个词，有种摸不着头脑的不明觉厉感。现在看到这两个词，尤其是“勇气”，脑子里第一浮现，就是自己写的代码，有没有勇气拿出来晒，有没有勇气持续去修改。自己以前写的代码，所谓功能正确，是指合并到一个大系统，整体上看起来满足需求。如果局部代码修改，就再得合并到大系统进行验证。这个动作不仅慢，而且不精准，因为无法准确判断哪些代码对应哪些操作。这就导致懒得去改进代码，也就慢慢失去改进自己代码的勇气。当代码在多个地方被使用，不敢改代码的勇气，会变成改代码的恐惧。只要有一次不小心，带来很多恶性评价或投案，这份恐惧就会与日俱增，至于改代码的勇气，早就荡然无存。\n    * 🤔：现在，我正在努力让测试代码和生产代码待在一起，只有让持续改进代码变得物理上阻力最小，才能留住持续改代码的勇气，更不会让恐惧滋生。今天看到Courage和Fear这两个词，忽然间给我内心更坚定的力量，要去把眼下正在推进的Mod[AutoUT&#47;IT&#47;ST]变成一项事业。只有将它成为自己的一项事业，才能让Courage持续加分，而Fear会自动减分，也不会在意别人无意间的戏虐。最终让写代码的人意识到，实际上，当自己保持住修改代码的Courage，就是在为自己的成就感做祭奠，最终在整个过程里体验到，一小步一小步改进的幸福感。\n","like_count":5,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":560039,"discussion_content":"nice\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1649140781,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":351607,"user_name":"爱吃彩虹糖的猫~","can_delete":false,"product_type":"c1","uid":1261108,"ip_address":"","ucode":"9EC7A8FD4B7DB1","user_header":"https://static001.geekbang.org/account/avatar/00/13/3e/34/dd0a3c61.jpg","comment_is_top":false,"comment_ctime":1657985417,"is_pvip":false,"replies":[{"id":127872,"content":"很棒很棒！good work！","user_name":"编辑回复","user_name_real":"编辑","uid":2189689,"ctime":1658042941,"ip_address":"","comment_id":351607,"utype":2}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"交一下02课的作业，提交记录为：2022-07-16的commit记录\nhttps:&#47;&#47;github.com&#47;pengjunzhen&#47;my-geektime-tdd&#47;commits&#47;master","like_count":0,"discussions":[{"author":{"id":2189689,"avatar":"https://static001.geekbang.org/account/avatar/00/21/69/79/b4132042.jpg","nickname":"🐑","note":"","ucode":"DE34B3B14287D1","race_medal":0,"user_type":8,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":580249,"discussion_content":"很棒很棒！good work！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1658042941,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":4}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339634,"user_name":"Gojustforfun","can_delete":false,"product_type":"c1","uid":1187021,"ip_address":"","ucode":"7513A40F27344F","user_header":"https://static001.geekbang.org/account/avatar/00/12/1c/cd/8d552516.jpg","comment_is_top":false,"comment_ctime":1648263725,"is_pvip":true,"replies":[{"id":124133,"content":"nice","user_name":"作者回复","user_name_real":"编辑","uid":2537798,"ctime":1648274310,"ip_address":"","comment_id":339634,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"Go演示git提交记录:\nhttps:&#47;&#47;github.com&#47;longyue0521&#47;TDD-In-Go&#47;commits&#47;args\n\n这次我利用Github上提交记录按天分隔的特性使提交记录更好找.\nCommits on Mar 26, 2022 ~ Commits on Mar 25, 2022之间的内容与本篇文章对应.\n采用baby step每步都有提交记录可以对比学习.如果觉得本项目对你有帮助,欢迎留言、star","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":558390,"discussion_content":"nice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1648274310,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":339121,"user_name":"webmin","can_delete":false,"product_type":"c1","uid":1047014,"ip_address":"","ucode":"98B0CA882454E8","user_header":"https://static001.geekbang.org/account/avatar/00/0f/f9/e6/47742988.jpg","comment_is_top":false,"comment_ctime":1647932822,"is_pvip":true,"replies":[{"id":123943,"content":"重构不需要太花哨的功能 有四五个就够用","user_name":"作者回复","user_name_real":"编辑","uid":2537798,"ctime":1647933596,"ip_address":"","comment_id":339121,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"先实现再优化，就好像同一时间只能带一顶着帽子出门一样，耐心按着步聚来，快与慢是相对的，一开始慢，之后才可以越来越快。\n之前一直觉得Idea的重构功能太少，看了演示才知道其实是自己不会用，回想一下Idea怎么说也是经过全世界的千锤百炼，其中的重构功能是经过凝练的，这也从一个侧面反应出自己对重构的认知太过表面，功能通过组合可以适用很多场景。","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557693,"discussion_content":"重构不需要太花哨的功能 有四五个就够用","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647933596,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338924,"user_name":"Quintos","can_delete":false,"product_type":"c1","uid":1313882,"ip_address":"","ucode":"DD1FB190599279","user_header":"https://static001.geekbang.org/account/avatar/00/14/0c/5a/3b01789e.jpg","comment_is_top":false,"comment_ctime":1647789322,"is_pvip":true,"replies":[{"id":123918,"content":"good","user_name":"作者回复","user_name_real":"编辑","uid":2537798,"ctime":1647907736,"ip_address":"","comment_id":338924,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"个人 C# 版练习提交地址： https:&#47;&#47;github.com&#47;dengyakui&#47;GeekTDD&#47;blob&#47;master&#47;GeekTDD&#47;ArgsTest.cs","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557621,"discussion_content":"good","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647907736,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338905,"user_name":"百炼钢","can_delete":false,"product_type":"c1","uid":1590695,"ip_address":"","ucode":"71A20C3C0B2978","user_header":"https://static001.geekbang.org/account/avatar/00/18/45/a7/da9b2d2b.jpg","comment_is_top":false,"comment_ctime":1647784023,"is_pvip":false,"replies":[{"id":123849,"content":"在构造函数上按 就有了","user_name":"作者回复","user_name_real":"编辑","uid":2537798,"ctime":1647787038,"ip_address":"","comment_id":338905,"utype":1}],"discussion_count":6,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"Refactor &gt; Replace Constructor with Factory Method... ，这个只有正版IDEA才有此功能吧？","like_count":0,"discussions":[{"author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557402,"discussion_content":"在构造函数上按 就有了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647787038,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":4,"child_discussions":[{"author":{"id":1590695,"avatar":"https://static001.geekbang.org/account/avatar/00/18/45/a7/da9b2d2b.jpg","nickname":"百炼钢","note":"","ucode":"71A20C3C0B2978","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":557416,"discussion_content":"多谢(o^^o)  我IDEA 是最新社区版本，没这个选项，我明天下载一个老版本的看看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647790632,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":557402,"ip_address":"","group_id":0},"score":557416,"extra":""},{"author":{"id":1590695,"avatar":"https://static001.geekbang.org/account/avatar/00/18/45/a7/da9b2d2b.jpg","nickname":"百炼钢","note":"","ucode":"71A20C3C0B2978","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2537798,"avatar":"https://static001.geekbang.org/account/avatar/00/26/b9/46/758ecf4a.jpg","nickname":"徐八叉","note":"","ucode":"DA6D1EB08A7396","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":557536,"discussion_content":"ideaIC-2021.3.3.win，没有 Replace Constructor with Factory Method ; ideaIC-2021.2.4.win 有; 目前就观察了这两个。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647855370,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":557402,"ip_address":"","group_id":0},"score":557536,"extra":""},{"author":{"id":1055021,"avatar":"https://static001.geekbang.org/account/avatar/00/10/19/2d/156d1402.jpg","nickname":"飘啊飘","note":"","ucode":"7D59E19351DA4A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1590695,"avatar":"https://static001.geekbang.org/account/avatar/00/18/45/a7/da9b2d2b.jpg","nickname":"百炼钢","note":"","ucode":"71A20C3C0B2978","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":557565,"discussion_content":"最新版上用option+回车会有提示。或者两下shift输入replace constructor。","likes_number":6,"is_delete":false,"is_hidden":false,"ctime":1647863703,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":557536,"ip_address":"","group_id":0},"score":557565,"extra":""}]},{"author":{"id":1565461,"avatar":"https://static001.geekbang.org/account/avatar/00/17/e3/15/baa70388.jpg","nickname":"tripplex","note":"","ucode":"F031692A254ADA","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":611704,"discussion_content":"在构造函数上用Alt+enter就有提示了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1680256523,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":347014,"user_name":"冯俊晨","can_delete":false,"product_type":"c1","uid":1804532,"ip_address":"","ucode":"EFD31527D9BD4F","user_header":"https://static001.geekbang.org/account/avatar/00/1b/88/f4/58a37635.jpg","comment_is_top":false,"comment_ctime":1653617263,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":2,"product_id":100109401,"comment_content":"对于和我一样不熟悉IntelliJ Idea的同学，会对于快捷键很迷惑。在Mac上，徐老师常用的快捷键是：\n抽取变量：OPTION+COMMAND+V\ninline：OPTION+COMMAND+N\n抽取方法：OPTION+COMMAND+M\nGenerate：OPTION+N\n万能通用：OPTION+ENTER","like_count":13},{"had_liked":false,"id":339381,"user_name":"阿崔cxr","can_delete":false,"product_type":"c1","uid":1177565,"ip_address":"","ucode":"26E2C7D96306A4","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/dd/c85f2065.jpg","comment_is_top":false,"comment_ctime":1648049086,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100109401,"comment_content":"补充一下作业： 录了一个视频 https:&#47;&#47;www.bilibili.com&#47;video&#47;BV1eL4y1M7PJ\n\n是使用的 typescript\n如果你是一个前端同学的话 那么也可以看下我的视频\n讲出来才可以验证自己是不是真正的掌握~","like_count":10},{"had_liked":false,"id":339462,"user_name":"Frode","can_delete":false,"product_type":"c1","uid":1503064,"ip_address":"","ucode":"B7B8DBF9980EA1","user_header":"https://static001.geekbang.org/account/avatar/00/16/ef/58/d05ec302.jpg","comment_is_top":false,"comment_ctime":1648113201,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100109401,"comment_content":"这课程真的值了!第一个遍听完感觉蒙了，原来还可以这么编程，感觉自己是个假程序员。暗自佩服大佬的编程技巧。我看过《重构》这本书，但是实践过程中，还真的没有掌握到精髓，也没有很好的利用idea。以前也了解过TDD的概念和敏捷开发的思想，但是都是书本上的东西。极客时间真的应该多出一些类似这样的课程，不仅让我明白的思想，而且可以落地的东西，实际操作到底思想上的内容。\n听一遍是不够的，我是快速过了一遍，对整体有个印象。然后再从头开始每一节的去细读，然后跟着老师把代码敲一遍，收获颇多！\n第一节和第二节的java版本代码内容已经更新上去了，放在不同的分支上。https:&#47;&#47;gitee.com&#47;frode_success&#47;tdd.git","like_count":6},{"had_liked":false,"id":338365,"user_name":"阿崔cxr","can_delete":false,"product_type":"c1","uid":1177565,"ip_address":"","ucode":"26E2C7D96306A4","user_header":"https://static001.geekbang.org/account/avatar/00/11/f7/dd/c85f2065.jpg","comment_is_top":false,"comment_ctime":1647440055,"is_pvip":false,"replies":null,"discussion_count":1,"race_medal":0,"score":3,"product_id":100109401,"comment_content":"哈哈哈 ，最后一个使用 java 来做重构真的感觉比 ts 或者 js 笨重太多了。\n如果使用 js 或者 ts 的话，直接抽取出一个函数来处理 parseValue  就好了\n最后就是 3个处理不同类型的 fn， 外加一个抽离出来处理 string 和 int 的 value 的 fn","like_count":4,"discussions":[{"author":{"id":2987951,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/yTn9elsxHxy5jMtOXFMT9gpxcWkS5Ym1DEI7g9XLrHzCt9son9KSnGynFJxUMQ530e3Ibb6baUiadSibF7Uib0ntQ/132","nickname":"Geek_704c8f","note":"","ucode":"91C52A1760C7DF","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590752,"discussion_content":"我当时想的是把抽取的函数放到接口里，三个子类复用、","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1666063382,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"广东","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":338360,"user_name":"邓志国","can_delete":false,"product_type":"c1","uid":1043844,"ip_address":"","ucode":"380AE67ED7B9D7","user_header":"https://static001.geekbang.org/account/avatar/00/0f/ed/84/0b8e2d25.jpg","comment_is_top":false,"comment_ctime":1647437022,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100109401,"comment_content":"如果先消除重复，过程上应该是先提取方法。然后再switch转为多态就直接出来2个类而不是3个。","like_count":4},{"had_liked":false,"id":341931,"user_name":"barnett","can_delete":false,"product_type":"c1","uid":1441207,"ip_address":"","ucode":"DDB9BC4FD34FBD","user_header":"https://static001.geekbang.org/account/avatar/00/15/fd/b7/3fd3ca23.jpg","comment_is_top":false,"comment_ctime":1649923334,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100109401,"comment_content":"这一节的【重构】那部分对于“非java开发者”已经有些吃力了，尤其是老师噼里啪啦用IDEA的快捷键疯狂重构，并一嘴带过各种设计模式思想。这也意味着这门课的前置条件起码是对《面向对象》、《重构》、《设计模式》和《函数式编程》这些知识有所了解才能继续听了。否则只能说“听的越多，收获越少”。","like_count":3},{"had_liked":false,"id":340054,"user_name":"Geek_fe0336","can_delete":false,"product_type":"c1","uid":1422144,"ip_address":"","ucode":"09D070BD4EFB57","user_header":"https://static001.geekbang.org/account/avatar/00/15/b3/40/54894c8f.jpg","comment_is_top":false,"comment_ctime":1648557396,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100109401,"comment_content":"酣畅淋漓，痛快啊","like_count":2},{"had_liked":false,"id":389901,"user_name":"范飞扬","can_delete":false,"product_type":"c1","uid":2721761,"ip_address":"广东","ucode":"A665DF46833A81","user_header":"https://static001.geekbang.org/account/avatar/00/29/87/e1/b3edcc09.jpg","comment_is_top":false,"comment_ctime":1713838546,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100109401,"comment_content":"TDD 分离关注点，就是一次只做一件事。\n\nEffective executives do first things first and they do one thing at a time. If there is any one secret of effectiveness, it is concentration. 卓有成效的管理者一次只做一件事。","like_count":1},{"had_liked":false,"id":364151,"user_name":"张渝","can_delete":false,"product_type":"c1","uid":1266490,"ip_address":"陕西","ucode":"C02C0FDACB4ECC","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTKjNxfo33B2BNLmY8fGdeHzU1MVrXWgpxIN5TCI8kjxKR1JicYFYOmtXjUDY8Uic0vPdgnZHiae6ptkw/132","comment_is_top":false,"comment_ctime":1670578763,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":1,"score":3,"product_id":100109401,"comment_content":"接着，再将修改后的方法内联回去（Inline Method）。经过这两步，我们引入了多态的接口，接下来就要消除分支了。由于我们无法扩展内建类型 Class 类，因此只能使用“抽象工厂”模式（Abstract Factory）的变体来替换分支：\n如何我们可以扩展Class类如何利用多态重构？","like_count":1},{"had_liked":false,"id":344320,"user_name":"davix","can_delete":false,"product_type":"c1","uid":1074465,"ip_address":"","ucode":"CBFB39BAD7938B","user_header":"https://static001.geekbang.org/account/avatar/00/10/65/21/101a7075.jpg","comment_is_top":false,"comment_ctime":1651467220,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100109401,"comment_content":"補作業：https:&#47;&#47;github.com&#47;davix&#47;geektime-tdd&#47;tree&#47;main&#47;args\n用go寫的，沒幾行代碼，真感覺沒有重構必要","like_count":1},{"had_liked":false,"id":343027,"user_name":"吴鹏","can_delete":false,"product_type":"c1","uid":1002113,"ip_address":"","ucode":"EB7A78CD198E33","user_header":"https://static001.geekbang.org/account/avatar/00/0f/4a/81/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1650600549,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100109401,"comment_content":"python实现 https:&#47;&#47;github.com&#47;warren-wupeng&#47;xhtdd&#47;tree&#47;3bb7510b8f3ea724acb90977eab6a3dbdaf9cfd0","like_count":1},{"had_liked":false,"id":338961,"user_name":"宁","can_delete":false,"product_type":"c1","uid":1110193,"ip_address":"","ucode":"8CF3C2AF6FD079","user_header":"https://static001.geekbang.org/account/avatar/00/10/f0/b1/bb5126fc.jpg","comment_is_top":false,"comment_ctime":1647835949,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100109401,"comment_content":"Test-driven development is a way of managing fear during programming. —Kent Beck","like_count":1},{"had_liked":false,"id":396038,"user_name":"Williamleelol","can_delete":false,"product_type":"c1","uid":1019105,"ip_address":"北京","ucode":"4C9379D25AEC09","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erD8CwHKGGIia1HwRBxy5GxMLTfGGzOeLjrmZ6ich9Ng7bbPia89iaSibbldnV4uiaKNXFcO2vQ3ztibCrDw/132","comment_is_top":false,"comment_ctime":1732781085,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100109401,"comment_content":"最后步骤消除IntOptionParse与StringOptionParse重复的步骤，如果能看到最终效果是否可以直接修改然后跑测试，不经过中间那么多提取方法和内连的过程。","like_count":0},{"had_liked":false,"id":377699,"user_name":"不知道起啥好","can_delete":false,"product_type":"c1","uid":1810890,"ip_address":"浙江","ucode":"8407C3FDD11C0E","user_header":"https://static001.geekbang.org/account/avatar/00/1b/a1/ca/aae116f5.jpg","comment_is_top":false,"comment_ctime":1689056943,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100109401,"comment_content":"还有一个boolean parser 可以消除吗","like_count":0},{"had_liked":false,"id":363284,"user_name":"大鹏","can_delete":false,"product_type":"c1","uid":2659123,"ip_address":"浙江","ucode":"31A65C4C054B93","user_header":"https://static001.geekbang.org/account/avatar/00/28/93/33/2d4de22e.jpg","comment_is_top":false,"comment_ctime":1669456440,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100109401,"comment_content":"我今天根据导师的节奏体验了TDD开发，给我带来了全新的开发体验，这个前三个课程完成的练习。\nhttps:&#47;&#47;github.com&#47;byd-android-2017&#47;args","like_count":0},{"had_liked":false,"id":352471,"user_name":"softbaddog","can_delete":false,"product_type":"c1","uid":1267296,"ip_address":"","ucode":"7030262C82F900","user_header":"https://static001.geekbang.org/account/avatar/00/13/56/60/17bbbcf3.jpg","comment_is_top":false,"comment_ctime":1658717285,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100109401,"comment_content":"不知道有没有人跟我一下，不太会万gradle，为了使@ParameterizedTest注解有效，需要在 build.gradle 中添加 testImplementation &#39;org.junit.jupiter:junit-jupiter-params:5.8.2&#39;，否则会提示找不到注解","like_count":0},{"had_liked":false,"id":351606,"user_name":"爱吃彩虹糖的猫~","can_delete":false,"product_type":"c1","uid":1261108,"ip_address":"","ucode":"9EC7A8FD4B7DB1","user_header":"https://static001.geekbang.org/account/avatar/00/13/3e/34/dd0a3c61.jpg","comment_is_top":false,"comment_ctime":1657985368,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100109401,"comment_content":"交一下02课的作业，提交时间为 2022-07-16 的commit；","like_count":0},{"had_liked":false,"id":349679,"user_name":"王鹏飞","can_delete":false,"product_type":"c1","uid":2178947,"ip_address":"","ucode":"E4A452AA1C64B8","user_header":"https://static001.geekbang.org/account/avatar/00/21/3f/83/fa29cc24.jpg","comment_is_top":false,"comment_ctime":1656222720,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100109401,"comment_content":"收获很大; 对代码那种精益求精的态度； 还有“出神入化”ide 适用技巧, 感觉之前我用的假的IDE， 看完跟着做一下","like_count":0},{"had_liked":false,"id":340989,"user_name":"奇小易","can_delete":false,"product_type":"c1","uid":1171151,"ip_address":"","ucode":"E06B4DFB5352BB","user_header":"https://static001.geekbang.org/account/avatar/00/11/de/cf/ef2e0501.jpg","comment_is_top":false,"comment_ctime":1649256196,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100109401,"comment_content":"2W2H笔记\n\nWhat\nQ: 进入重构的先决条件。\nA:\n1、测试都是绿的\n2、坏味道足够明显\n\nHow\nQ: 坏味道和重构手法\n1、坏味道：分支语句；重构手法：多态替换分支\n2、坏味道：重复；\n3、重构是要保持小步且稳定的节奏\n\nQ: idea重构快捷键\nA: \nInline\nExtract Method\ncreate Factory method\n尽可能用接口\n\nHow good\nQ: 红&#47;绿&#47;重构循环的好处\nA:\n1、分离关注点，红&#47;绿时只关注功能的积累，不关注代码结构。\n重构时，有测试的保护，可以只关注让代码变得更好。\n\nQ：TDD如何解决恐惧？\nA：\n编程的第一大敌是恐惧，极限编程的第一原则是勇气。\n要具备勇气战胜恐惧。TDD通过重构让我们在实现功能时，不恐惧烂代码。\n测试使我们在重构时，不恐惧功能破坏。","like_count":0},{"had_liked":false,"id":340453,"user_name":"Geek_fe0336","can_delete":false,"product_type":"c1","uid":1422144,"ip_address":"","ucode":"09D070BD4EFB57","user_header":"https://static001.geekbang.org/account/avatar/00/15/b3/40/54894c8f.jpg","comment_is_top":false,"comment_ctime":1648820900,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":4,"product_id":100109401,"comment_content":"如果先消除了重复，可以减少把IntOptionparser和StringOptionParser合并的过程，消除重复后，可以先形成同一个方法处理int和string的方法，基于此方法只需生成一个类","like_count":0}]}