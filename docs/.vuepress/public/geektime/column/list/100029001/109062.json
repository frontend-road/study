{"id":109062,"title":"24 | 固若金汤的根本（上）：对称加密与非对称加密","content":"<p>在上一讲中，我们初步学习了HTTPS，知道HTTPS的安全性是由TLS来保证的。</p><p>你一定很好奇，它是怎么为HTTP增加了机密性、完整性，身份认证和不可否认等特性的呢？</p><p>先说说机密性。它是信息安全的基础，缺乏机密性TLS就会成为“无水之源”“无根之木”。</p><p>实现机密性最常用的手段是“<strong>加密</strong>”（encrypt），就是把消息用某种方式转换成谁也看不懂的乱码，只有掌握特殊“钥匙”的人才能再转换出原始文本。</p><p>这里的“钥匙”就叫做“<strong>密钥</strong>”（key），加密前的消息叫“<strong>明文</strong>”（plain text/clear text），加密后的乱码叫“<strong>密文</strong>”（cipher text），使用密钥还原明文的过程叫“<strong>解密</strong>”（decrypt），是加密的反操作，加密解密的操作过程就是“<strong>加密算法</strong>”。</p><p>所有的加密算法都是公开的，任何人都可以去分析研究，而算法使用的“密钥”则必须保密。那么，这个关键的“密钥”又是什么呢？</p><p>由于HTTPS、TLS都运行在计算机上，所以“密钥”就是一长串的数字，但约定俗成的度量单位是“位”（bit），而不是“字节”（byte）。比如，说密钥长度是128，就是16字节的二进制串，密钥长度1024，就是128字节的二进制串。</p><p>按照密钥的使用方式，加密可以分为两大类：<strong>对称加密和非对称加密</strong>。</p><!-- [[[read_end]]] --><h2>对称加密</h2><p>“对称加密”很好理解，就是指加密和解密时使用的密钥都是同一个，是“对称”的。只要保证了密钥的安全，那整个通信过程就可以说具有了机密性。</p><p>举个例子，你想要登录某网站，只要事先和它约定好使用一个对称密钥，通信过程中传输的全是用密钥加密后的密文，只有你和网站才能解密。黑客即使能够窃听，看到的也只是乱码，因为没有密钥无法解出明文，所以就实现了机密性。</p><p><img src=\"https://static001.geekbang.org/resource/image/8f/49/8feab67c25a534f8c72077680927ab49.png?wh=1869*838\" alt=\"\"></p><p>TLS里有非常多的对称加密算法可供选择，比如RC4、DES、3DES、AES、ChaCha20等，但前三种算法都被认为是不安全的，通常都禁止使用，目前常用的只有AES和ChaCha20。</p><p>AES的意思是“高级加密标准”（Advanced Encryption Standard），密钥长度可以是128、192或256。它是DES算法的替代者，安全强度很高，性能也很好，而且有的硬件还会做特殊优化，所以非常流行，是应用最广泛的对称加密算法。</p><p>ChaCha20是Google设计的另一种加密算法，密钥长度固定为256位，纯软件运行性能要超过AES，曾经在移动客户端上比较流行，但ARMv8之后也加入了AES硬件优化，所以现在不再具有明显的优势，但仍然算得上是一个不错的算法。</p><h2>加密分组模式</h2><p>对称算法还有一个“<strong>分组模式</strong>”的概念，它可以让算法用固定长度的密钥加密任意长度的明文，把小秘密（即密钥）转化为大秘密（即密文）。</p><p>最早有ECB、CBC、CFB、OFB等几种分组模式，但都陆续被发现有安全漏洞，所以现在基本都不怎么用了。最新的分组模式被称为AEAD（Authenticated Encryption with Associated Data），在加密的同时增加了认证的功能，常用的是GCM、CCM和Poly1305。</p><p>把上面这些组合起来，就可以得到TLS密码套件中定义的对称加密算法。</p><p>比如，AES128-GCM，意思是密钥长度为128位的AES算法，使用的分组模式是GCM；ChaCha20-Poly1305的意思是ChaCha20算法，使用的分组模式是Poly1305。</p><p>你可以用实验环境的URI“/24-1”来测试OpenSSL里的AES128-CBC，在URI后用参数“key”“plain”输入密钥和明文，服务器会在响应报文里输出加密解密的结果。</p><pre><code>https://www.chrono.com/24-1?key=123456\n\nalgo  = aes_128_cbc\nplain = hello openssl\nenc   = 93a024a94083bc39fb2c2b9f5ce27c09\ndec   = hello openssl\n</code></pre><h2>非对称加密</h2><p>对称加密看上去好像完美地实现了机密性，但其中有一个很大的问题：如何把密钥安全地传递给对方，术语叫“<strong>密钥交换</strong>”。</p><p>因为在对称加密算法中只要持有密钥就可以解密。如果你和网站约定的密钥在传递途中被黑客窃取，那他就可以在之后随意解密收发的数据，通信过程也就没有机密性可言了。</p><p>这个问题该怎么解决呢？</p><p>你或许会说：“把密钥再加密一下发过去就好了”，但传输“加密密钥的密钥”又成了新问题。这就像是“鸡生蛋、蛋生鸡”，可以无限递归下去。只用对称加密算法，是绝对无法解决密钥交换的问题的。</p><p>所以，就出现了非对称加密（也叫公钥加密算法）。</p><p>它有两个密钥，一个叫“<strong>公钥</strong>”（public key），一个叫“<strong>私钥</strong>”（private key）。两个密钥是不同的，“不对称”，公钥可以公开给任何人使用，而私钥必须严格保密。</p><p>公钥和私钥有个特别的“<strong>单向</strong>”性，虽然都可以用来加密解密，但公钥加密后只能用私钥解密，反过来，私钥加密后也只能用公钥解密。</p><p>非对称加密可以解决“密钥交换”的问题。网站秘密保管私钥，在网上任意分发公钥，你想要登录网站只要用公钥加密就行了，密文只能由私钥持有者才能解密。而黑客因为没有私钥，所以就无法破解密文。</p><p><img src=\"https://static001.geekbang.org/resource/image/89/17/89344c2e493600b486d5349a84318417.png?wh=1938*1212\" alt=\"\"></p><p>非对称加密算法的设计要比对称算法难得多，在TLS里只有很少的几种，比如DH、DSA、RSA、ECC等。</p><p>RSA可能是其中最著名的一个，几乎可以说是非对称加密的代名词，它的安全性基于“<strong>整数分解</strong>”的数学难题，使用两个超大素数的乘积作为生成密钥的材料，想要从公钥推算出私钥是非常困难的。</p><p>10年前RSA密钥的推荐长度是1024，但随着计算机运算能力的提高，现在1024已经不安全，普遍认为至少要2048位。</p><p>ECC（Elliptic Curve Cryptography）是非对称加密里的“后起之秀”，它基于“<strong>椭圆曲线离散对数</strong>”的数学难题，使用特定的曲线方程和基点生成公钥和私钥，子算法ECDHE用于密钥交换，ECDSA用于数字签名。</p><p>目前比较常用的两个曲线是P-256（secp256r1，在OpenSSL称为prime256v1）和x25519。P-256是NIST（美国国家标准技术研究所）和NSA（美国国家安全局）推荐使用的曲线，而x25519被认为是最安全、最快速的曲线。</p><p>ECC名字里的“椭圆”经常会引起误解，其实它的曲线并不是椭圆形，只是因为方程很类似计算椭圆周长的公式，实际的形状更像抛物线，比如下面的图就展示了两个简单的椭圆曲线。</p><p><img src=\"https://static001.geekbang.org/resource/image/b4/ba/b452ceb3cbfc5c644a3053f2054b1aba.jpg?wh=1643*1493\" alt=\"\"><span class=\"reference\">两个简单的椭圆曲线：y^2=x^3+7，y^2=x^3-x</span></p><p>比起RSA，ECC在安全强度和性能上都有明显的优势。160位的ECC相当于1024位的RSA，而224位的ECC则相当于2048位的RSA。因为密钥短，所以相应的计算量、消耗的内存和带宽也就少，加密解密的性能就上去了，对于现在的移动互联网非常有吸引力。</p><p>实验环境的URI“/24-2”演示了RSA1024，你在课后可以动手试一下。</p><h2>混合加密</h2><p>看到这里，你是不是认为可以抛弃对称加密，只用非对称加密来实现机密性呢？</p><p>很遗憾，虽然非对称加密没有“密钥交换”的问题，但因为它们都是基于复杂的数学难题，运算速度很慢，即使是ECC也要比AES差上好几个数量级。如果仅用非对称加密，虽然保证了安全，但通信速度有如乌龟、蜗牛，实用性就变成了零。</p><p>实验环境的URI“/24-3”对比了AES和RSA这两种算法的性能，下面列出了一次测试的结果：</p><pre><code>aes_128_cbc enc/dec 1000 times : 0.97ms, 13.11MB/s\n\nrsa_1024 enc/dec 1000 times : 138.59ms, 93.80KB/s\nrsa_1024/aes ratio = 143.17\n\nrsa_2048 enc/dec 1000 times : 840.35ms, 15.47KB/s\nrsa_2048/aes ratio = 868.13\n</code></pre><p>可以看到，RSA的运算速度是非常慢的，2048位的加解密大约是15KB/S（微秒或毫秒级），而AES128则是13MB/S（纳秒级），差了几百倍。</p><p>那么，是不是能够把对称加密和非对称加密结合起来呢，两者互相取长补短，即能高效地加密解密，又能安全地密钥交换。</p><p>这就是现在TLS里使用的<strong>混合加密</strong>方式，其实说穿了也很简单：</p><p>在通信刚开始的时候使用非对称算法，比如RSA、ECDHE，首先解决密钥交换的问题。</p><p>然后用随机数产生对称算法使用的“<strong>会话密钥</strong>”（session key），再用公钥加密。因为会话密钥很短，通常只有16字节或32字节，所以慢一点也无所谓。</p><p>对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换，后续就不再使用非对称加密，全都使用对称加密。</p><p><img src=\"https://static001.geekbang.org/resource/image/e4/85/e41f87110aeea3e548d58cc35a478e85.png?wh=1410*947\" alt=\"\"></p><p>这样混合加密就解决了对称加密算法的密钥交换问题，而且安全和性能兼顾，完美地实现了机密性。</p><p>不过这只是“万里长征的第一步”，后面还有完整性、身份认证、不可否认等特性没有实现，所以现在的通信还不是绝对安全，我们下次再说。</p><h2>小结</h2><ol>\n<li><span class=\"orange\">加密算法的核心思想是“把一个小秘密（密钥）转化为一个大秘密（密文消息）”，守住了小秘密，也就守住了大秘密；</span></li>\n<li><span class=\"orange\">对称加密只使用一个密钥，运算速度快，密钥必须保密，无法做到安全的密钥交换，常用的有AES和ChaCha20；</span></li>\n<li><span class=\"orange\">非对称加密使用两个密钥：公钥和私钥，公钥可以任意分发而私钥保密，解决了密钥交换问题但速度慢，常用的有RSA和ECC；</span></li>\n<li><span class=\"orange\">把对称加密和非对称加密结合起来就得到了“又好又快”的混合加密，也就是TLS里使用的加密方式。</span></li>\n</ol><h2>课下作业</h2><ol>\n<li>加密算法中“密钥”的名字很形象，你能试着用现实中的锁和钥匙来比喻一下吗？</li>\n<li>在混合加密中用到了公钥加密，因为只能由私钥解密。那么反过来，私钥加密后任何人都可以用公钥解密，这有什么用呢？</li>\n</ol><p>欢迎你把自己的学习体会写在留言区，与我和其他同学一起讨论。如果你觉得有所收获，也欢迎把文章分享给你的朋友。</p><p><img src=\"https://static001.geekbang.org/resource/image/b4/d7/b437f2b898a2f3424bd8812d9a0dcbd7.png?wh=1769*3819\" alt=\"unpreview\"></p><p></p>","neighbors":{"left":{"article_title":"23 | HTTPS是什么？SSL/TLS又是什么？","id":108643},"right":{"article_title":"25 | 固若金汤的根本（下）：数字签名与证书","id":109503}},"comments":[{"had_liked":false,"id":134574,"user_name":"xiaolin777","can_delete":false,"product_type":"c1","uid":1514024,"ip_address":"","ucode":"946031F5454208","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/iaV35C64GbQ9Zaos6U3r9zFJPZ7hcXQqlQbkOm8PxmkktsnJicJaDfKNPRsqAnYP4qqaUMHX8x95CrueszjjEW4g/132","comment_is_top":false,"comment_ctime":1568869917,"is_pvip":false,"replies":[{"id":"51668","content":"非对称加密基于大数运算，比如大素数或者椭圆曲线，是复杂的数学难题，所以消耗计算量，运算速度慢。<br><br>除了慢，可能还有一个缺点就是需要更多的位数，相同强度的对称密钥要比非对称密钥短。<br><br>对称密钥一般都128位、256位，而rsa一般要2048位，不过椭圆曲线的会短一点。","user_name":"作者回复","comment_id":134574,"uid":"1181974","ip_address":"","utype":1,"ctime":1568900985,"user_name_real":"chrono"}],"discussion_count":3,"race_medal":0,"score":"276446776861","product_id":100029001,"comment_content":"老师，今天面试官问我非对称加密为什么慢，非对称加密除了慢外还有什么缺点，您能帮我解答一下吗？","like_count":65,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467813,"discussion_content":"非对称加密基于大数运算，比如大素数或者椭圆曲线，是复杂的数学难题，所以消耗计算量，运算速度慢。\n\n除了慢，可能还有一个缺点就是需要更多的位数，相同强度的对称密钥要比非对称密钥短。\n\n对称密钥一般都128位、256位，而rsa一般要2048位，不过椭圆曲线的会短一点。","likes_number":2,"is_delete":false,"is_hidden":false,"ctime":1568900985,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2273620,"avatar":"https://static001.geekbang.org/account/avatar/00/22/b1/54/6d663b95.jpg","nickname":"瓜牛","note":"","ucode":"5EB7D2F4400A70","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":571791,"discussion_content":"还有一个担忧，这些数学难题可能将来有一天就不再是难题了，那非对称加密就土崩瓦解了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1652410187,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1622271,"avatar":"https://static001.geekbang.org/account/avatar/00/18/c0/ff/68fc4ae2.jpg","nickname":"Monday","note":"","ucode":"2459EB342F9915","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":2273620,"avatar":"https://static001.geekbang.org/account/avatar/00/22/b1/54/6d663b95.jpg","nickname":"瓜牛","note":"","ucode":"5EB7D2F4400A70","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590089,"discussion_content":"为了破解个网站，黑客付出的代价超过收益的话一般不会做了，除非是很特殊的利益","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665532311,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":571791,"ip_address":"广东"},"score":590089,"extra":""}]}]},{"had_liked":false,"id":115840,"user_name":"TerryGoForIt","can_delete":false,"product_type":"c1","uid":1020644,"ip_address":"","ucode":"701B0E72F15AB5","user_header":"https://static001.geekbang.org/account/avatar/00/0f/92/e4/abb7bfe3.jpg","comment_is_top":false,"comment_ctime":1563756914,"is_pvip":false,"replies":[{"id":"42340","content":"√","user_name":"作者回复","comment_id":115840,"uid":"1181974","ip_address":"","utype":1,"ctime":1563758855,"user_name_real":"chrono"}],"discussion_count":2,"race_medal":0,"score":"220607089010","product_id":100029001,"comment_content":"简单来说，SSL 就是通信双方通过非对称加密协商出一个用于对称加密的密钥。","like_count":51,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459309,"discussion_content":"√","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563758855,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1057123,"avatar":"https://static001.geekbang.org/account/avatar/00/10/21/63/f47576e1.jpg","nickname":"永钱","note":"","ucode":"E758406EA4E23B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":2524,"discussion_content":"失误呀，手抖反了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563759879,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115827,"user_name":"-W.LI-","can_delete":false,"product_type":"c1","uid":1210699,"ip_address":"","ucode":"3556786538664F","user_header":"https://static001.geekbang.org/account/avatar/00/12/79/4b/740f91ca.jpg","comment_is_top":false,"comment_ctime":1563755602,"is_pvip":false,"replies":[{"id":"42343","content":"√","user_name":"作者回复","comment_id":115827,"uid":"1181974","ip_address":"","utype":1,"ctime":1563758903,"user_name_real":"chrono"}],"discussion_count":2,"race_medal":0,"score":"139002709074","product_id":100029001,"comment_content":"混合加密:用非对称加密，加密对称加密的私钥。对称加密的私钥又是会话级的随机数=一次会话一个私钥。就算别人baoli破解也只是破解了一个会话。","like_count":33,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459303,"discussion_content":"√","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563758903,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2916084,"avatar":"https://static001.geekbang.org/account/avatar/00/2c/7e/f4/bae2de8c.jpg","nickname":"观山","note":"","ucode":"E59B190A0A12A1","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556482,"discussion_content":"非对称加密没有公钥私钥这一说吧\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647398739,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116238,"user_name":"鱼向北游","can_delete":false,"product_type":"c1","uid":1439908,"ip_address":"","ucode":"580EC7DCE57E9A","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/IPdZZXuHVMibwfZWmm7NiawzeEFGsaRoWjhuN99iaoj5amcRkiaOePo6rH1KJ3jictmNlic4OibkF4I20vOGfwDqcBxfA/132","comment_is_top":false,"comment_ctime":1563806196,"is_pvip":false,"replies":[{"id":"42523","content":"√","user_name":"作者回复","comment_id":116238,"uid":"1181974","ip_address":"","utype":1,"ctime":1563842944,"user_name_real":"chrono"}],"discussion_count":2,"race_medal":0,"score":"130412825076","product_id":100029001,"comment_content":"私钥加密用公钥解是为了做身份认证，不可抵赖，因为默认私钥只有持有人知道","like_count":31,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459445,"discussion_content":"√","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563842944,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1050189,"avatar":"https://static001.geekbang.org/account/avatar/00/10/06/4d/09acf127.jpg","nickname":"小陈","note":"","ucode":"812569CB165713","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":3939,"discussion_content":"透彻!","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1564995511,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161261,"user_name":"啦啦啦","can_delete":false,"product_type":"c1","uid":1131687,"ip_address":"","ucode":"6B12EC90A62525","user_header":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","comment_is_top":false,"comment_ctime":1576158315,"is_pvip":false,"replies":[{"id":"61489","content":"应该是钥匙的“yao”吧。<br><br>我搜了一下。<br><br>【mì yuè】读音下的“密钥”的意思：紧密的锁闭。这里的用法用了“密钥”的动词性质。<br>【 mì yào】读音下的“密钥”的意思：密码学中的专有名词，指解密所需要的特殊代码。这里用了“密钥”的名词性。<br>密钥现代用的最多的是密码学中的意思，在英文中解释为key，中文意思偏向于钥匙。在密码学中，特别是公钥密码体系中，密钥的形象描述往往是房屋或者保险箱的钥匙。因此在技术词典中，密钥被标注为【 mì yào】。<br>在一些词典中原来把密钥标注为【mì yuè】，由于权威性带来了一些影响，所以也有很多人把密钥念作【mì yuè】。由于钥在读作【 yuè 】也可以作“钥匙”的解释。但是钥被念作【 yuè 】时，往往偏向于钥的动词性，这种性质就跟“血”的用法相似。","user_name":"作者回复","comment_id":161261,"uid":"1181974","ip_address":"","utype":1,"ctime":1576198205,"user_name_real":"chrono"}],"discussion_count":6,"race_medal":0,"score":"113245308011","product_id":100029001,"comment_content":"今天刚看了另外一个课程的老师讲的，密钥，在这个词里念mi  yue","like_count":26,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477666,"discussion_content":"应该是钥匙的“yao”吧。\n\n我搜了一下。\n\n【mì yuè】读音下的“密钥”的意思：紧密的锁闭。这里的用法用了“密钥”的动词性质。\n【 mì yào】读音下的“密钥”的意思：密码学中的专有名词，指解密所需要的特殊代码。这里用了“密钥”的名词性。\n密钥现代用的最多的是密码学中的意思，在英文中解释为key，中文意思偏向于钥匙。在密码学中，特别是公钥密码体系中，密钥的形象描述往往是房屋或者保险箱的钥匙。因此在技术词典中，密钥被标注为【 mì yào】。\n在一些词典中原来把密钥标注为【mì yuè】，由于权威性带来了一些影响，所以也有很多人把密钥念作【mì yuè】。由于钥在读作【 yuè 】也可以作“钥匙”的解释。但是钥被念作【 yuè 】时，往往偏向于钥的动词性，这种性质就跟“血”的用法相似。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576198205,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2252211,"avatar":"https://static001.geekbang.org/account/avatar/00/22/5d/b3/aa2c17f0.jpg","nickname":"🔥 如初之光","note":"","ucode":"0FB2BA12D4B15A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":353168,"discussion_content":"老师真的实在人，这都去百度了","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1615043044,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":2252211,"avatar":"https://static001.geekbang.org/account/avatar/00/22/5d/b3/aa2c17f0.jpg","nickname":"🔥 如初之光","note":"","ucode":"0FB2BA12D4B15A","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":388063,"discussion_content":"thanks\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628576671,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":353168,"ip_address":""},"score":388063,"extra":""}]},{"author":{"id":1114352,"avatar":"https://static001.geekbang.org/account/avatar/00/11/00/f0/fe94061e.jpg","nickname":"假装在养🐷","note":"","ucode":"D0AB9CD03E0D5B","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":574352,"discussion_content":"老师真有意思····哈哈","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1653989472,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1226806,"avatar":"https://static001.geekbang.org/account/avatar/00/12/b8/36/2e922a82.jpg","nickname":"Alan","note":"","ucode":"7185C21632D4A7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":537387,"discussion_content":"搞笑，河南人钥匙叫yuezhi","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639047602,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1131687,"avatar":"https://static001.geekbang.org/account/avatar/00/11/44/a7/171c1e86.jpg","nickname":"啦啦啦","note":"","ucode":"6B12EC90A62525","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":80840,"discussion_content":"哈哈哈，老师辛苦了","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576199409,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115916,"user_name":"蚂蚁内推+v","can_delete":false,"product_type":"c1","uid":1050508,"ip_address":"","ucode":"24B10AEE54B3FD","user_header":"https://static001.geekbang.org/account/avatar/00/10/07/8c/0d886dcc.jpg","comment_is_top":false,"comment_ctime":1563767172,"is_pvip":false,"replies":[{"id":"42393","content":"拿ECB来举例子，假设使用aes128，密钥长度是16字节，那么就把明文按16字节分组，然后每个分组用密钥加密。<br><br>其他的cbc、ofb等的方法类似，但细节不同，例如cbc增加了初始向量。","user_name":"作者回复","comment_id":115916,"uid":"1181974","ip_address":"","utype":1,"ctime":1563770342,"user_name_real":"chrono"}],"discussion_count":1,"race_medal":0,"score":"83168145796","product_id":100029001,"comment_content":"加密的分组模式，是怎么实现的，具体怎么做，这块不是很理解。方便老师指导下不","like_count":19,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459346,"discussion_content":"拿ECB来举例子，假设使用aes128，密钥长度是16字节，那么就把明文按16字节分组，然后每个分组用密钥加密。\n\n其他的cbc、ofb等的方法类似，但细节不同，例如cbc增加了初始向量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563770342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117532,"user_name":"前端西瓜哥","can_delete":false,"product_type":"c1","uid":1248576,"ip_address":"","ucode":"150130C34CD1C1","user_header":"https://static001.geekbang.org/account/avatar/00/13/0d/40/f70e5653.jpg","comment_is_top":false,"comment_ctime":1564068295,"is_pvip":false,"replies":[{"id":"43059","content":"回答的很认真。<br><br>第二个问题，问的是私钥加密公钥解密有什么作用，能够干什么。<br><br>因为私钥只能由一个人秘密持有，所以它加密的数据谁都可以解密，没有私密性，但这就是它的价值所在，可以证明这个数据就是私钥持有人发布的，可以用来做身份认证。","user_name":"作者回复","comment_id":117532,"uid":"1181974","ip_address":"","utype":1,"ctime":1564102933,"user_name_real":"chrono"}],"discussion_count":1,"race_medal":0,"score":"78873479623","product_id":100029001,"comment_content":"思考题第1题：<br>（这里举个比较勉强的例子）假设 a 持有私钥，b 持有公钥，然后他们用一个加了锁的盒子进行通信。<br><br>1. a 把信件放到盒子里，然后用一排连接为锁链的锁将盒子锁起来，然后寄给 b。只要公钥能解开其中一个锁，那对方就能拿到信件。（可能换成能识别具有某些特征密码的密码锁的比喻会更好一些）<br>2. b 用公钥开锁拿到了信件，然后他写了一封回信，同样放到盒子里，然后挂上一个只有私钥才能打开的锁，寄给 a。<br>3. 只有 a 有有对应的钥匙（私钥），于是 a 拿到了回信。<br><br>思考题第2题不是很清楚题意，大概是问只要有公钥就能解密，私钥有什么意义？<br><br>答：虽然任何公钥都可以对私钥加密的数据解密，但这个解密后的数据如果是某个公钥持有人用自己私有的密钥加密（对称加密）后的加密数据，那其他人拿到是加密后的数据，无法得到真正的数据，于是可以保证机密性。","like_count":19,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":460012,"discussion_content":"回答的很认真。\n\n第二个问题，问的是私钥加密公钥解密有什么作用，能够干什么。\n\n因为私钥只能由一个人秘密持有，所以它加密的数据谁都可以解密，没有私密性，但这就是它的价值所在，可以证明这个数据就是私钥持有人发布的，可以用来做身份认证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564102933,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":119833,"user_name":"青莲居士","can_delete":false,"product_type":"c1","uid":1374087,"ip_address":"","ucode":"DF269017EDD391","user_header":"https://static001.geekbang.org/account/avatar/00/14/f7/87/e7085d32.jpg","comment_is_top":false,"comment_ctime":1564709840,"is_pvip":false,"replies":[{"id":"44004","content":"关键是“如何各保存一份”，两边加密通信必须要使用相同的密钥才行，不交换如何才能保持一致呢？<br><br>而且简单的一对一还好说，现实情况是网站要面对成千上万的用户，如何与这么多的客户端保持一致？<br><br>还有，如果总使用一个密钥，就很容易被破解，风险高，需要定期更换，最好是一次一密。<br><br>所以，为了安全起见，每次通信前双方都要交换密钥，这样就实现了“各保存一份”，用完就扔掉，下次重新交换。","user_name":"作者回复","comment_id":119833,"uid":"1181974","ip_address":"","utype":1,"ctime":1564713367,"user_name_real":"chrono"}],"discussion_count":5,"race_medal":0,"score":"74579153872","product_id":100029001,"comment_content":"老师，你好，我不明白对称加密为啥会有密钥交换的过程，对称加密就一个密钥，客户端服务端各保存一份就可以了，为啥要传输交换呢？","like_count":17,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461091,"discussion_content":"关键是“如何各保存一份”，两边加密通信必须要使用相同的密钥才行，不交换如何才能保持一致呢？\n\n而且简单的一对一还好说，现实情况是网站要面对成千上万的用户，如何与这么多的客户端保持一致？\n\n还有，如果总使用一个密钥，就很容易被破解，风险高，需要定期更换，最好是一次一密。\n\n所以，为了安全起见，每次通信前双方都要交换密钥，这样就实现了“各保存一份”，用完就扔掉，下次重新交换。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564713367,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1673843,"avatar":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erXRaa98A3zjLDkOibUJV1254aQ4EYFTbSLJuEvD0nXicMNA8pLoxOfHf5kPTbGLXNicg8CPFH3Tn0mA/132","nickname":"Geek_115bc8","note":"","ucode":"71FBC9F02AFE1B","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569228,"discussion_content":"我的理解就是，客户端发送报文通过秘钥加密，但是服务器又不知道，所以需要发送过去，当报文到达服务器，服务器拿这个秘钥解密。服务器也是一样的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651373060,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22117,"discussion_content":"一般来说是一个长连接期间。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569579402,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1133711,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4c/8f/a90b3969.jpg","nickname":"oldman","note":"","ucode":"6BACE2832B4429","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":6195,"discussion_content":"这里说的每次会话是指的每一次的HTTP请求吗\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566780818,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1215892,"avatar":"https://static001.geekbang.org/account/avatar/00/12/8d/94/150dfe78.jpg","nickname":"GGL","note":"","ucode":"AED10B8248D1E7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1133711,"avatar":"https://static001.geekbang.org/account/avatar/00/11/4c/8f/a90b3969.jpg","nickname":"oldman","note":"","ucode":"6BACE2832B4429","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374345,"discussion_content":"TCP 长连接期间","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1621145146,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":6195,"ip_address":""},"score":374345,"extra":""}]}]},{"had_liked":false,"id":127429,"user_name":"Geek_66666","can_delete":false,"product_type":"c1","uid":1619479,"ip_address":"","ucode":"36F79954146DE8","user_header":"https://static001.geekbang.org/account/avatar/00/18/b6/17/76f29bfb.jpg","comment_is_top":false,"comment_ctime":1566706954,"is_pvip":false,"replies":[{"id":"47315","content":"公钥的传输必须使用证书，把公钥和持有者身份绑在一起，否则就会有信任问题，容易被别人冒充。<br><br>私钥加密的作用是签名，实现身份认证而不是数据保密，签名是公开的，所以不存在安全问题。","user_name":"作者回复","comment_id":127429,"uid":"1181974","ip_address":"","utype":1,"ctime":1566789274,"user_name_real":"chrono"}],"discussion_count":2,"race_medal":0,"score":"70286183690","product_id":100029001,"comment_content":"在实际传输过程中，大家（包括其他人）怎么知道双方通信用的哪个公钥，是传输过程公开的，大家都可以获取看到的吗？如果大家都知道了，用私钥加密的内容都能被别人用公钥解密，这部分内容是不是不安全？","like_count":16,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464487,"discussion_content":"公钥的传输必须使用证书，把公钥和持有者身份绑在一起，否则就会有信任问题，容易被别人冒充。\n\n私钥加密的作用是签名，实现身份认证而不是数据保密，签名是公开的，所以不存在安全问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566789274,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":2154326,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/z5R6XeWnccR4uPysUyr2qEhORA93K5GSn9XI131YWjDvuwgVQgeWFrIkwkFp4WXjw0yiaPP7WiaCJmXopu770jQw/132","nickname":"Geek_a8fd89","note":"","ucode":"4FCDCA2F01169A","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":531124,"discussion_content":"我对混合加密的理解是:\n\nA在传输对称密钥给B之前，B会先把自己的公钥发给A让A用公钥加密再发给自己。然后自己用自己的私钥解密公钥加密的内容后得到对称密钥，最终双方建立对称加密连接。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1637236667,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":464487,"ip_address":""},"score":531124,"extra":"{\"user_type\":1}"}]}]},{"had_liked":false,"id":200376,"user_name":"钱","can_delete":false,"product_type":"c1","uid":1009652,"ip_address":"","ucode":"2C92A243A463D4","user_header":"https://static001.geekbang.org/account/avatar/00/0f/67/f4/9a1feb59.jpg","comment_is_top":false,"comment_ctime":1585578156,"is_pvip":false,"replies":[{"id":"74997","content":"总结的很好，非常认真，amazing！","user_name":"作者回复","comment_id":200376,"uid":"1181974","ip_address":"","utype":1,"ctime":1585617043,"user_name_real":"chrono"}],"discussion_count":3,"race_medal":0,"score":"57420153004","product_id":100029001,"comment_content":"1：加密算法中“密钥”的名字很形象，你能试着用现实中的锁和钥匙来比喻一下吗？<br>没有锁的大门是不安全的，谁想进就进，谁想拿的啥就拿点啥，就好像在网络中奔跑的HTTP报文。<br>为了安全性需要给明文加密，同样为了安全性需要给大门上锁，加密的明文变成了密文，没有没有解密是看不懂的，没有钥匙的人打不开锁是进不了门的。<br>一把钥匙一把锁，其他钥匙开不了，这就是对称加密。一把钥匙锁门，N把其他的钥匙都能打开，这就是非对称加密，那那把锁门的钥匙有啥用呢？可以证明这个院子是我的，证明锁是我上的。<br><br>2：在混合加密中用到了公钥加密，因为只能由私钥解密。那么反过来，私钥加密后任何人都可以用公钥解密，这有什么用呢？<br>第一眼感觉好像没啥用，后来发现可以凭支票去银行取钱。数字签名和身份认证，也是相当有用。<br><br>这节很有意思。<br>对称加密、非对称加密、混合加密，对于加密二字很容易理解，对于明文都能看懂，加密就是通过一些步骤把明文变密文，让人看不懂，只有使用密钥解密一下，密文变明文了大家又都能看懂了。<br>那啥是对称？啥是非对称？啥是混合？<br>对称强调A钥匙加密只有A钥匙能解码<br>非对称强调A钥匙加密后只有B钥匙能解密，B钥匙加密后只有A钥匙能解码。这个感觉好神奇，就好像我上锁后谁都能打开，上锁是没用的只能证明锁是我上的。<br>混合强调非对称和对称的组合使用，非对称用于密钥交换，对称用于数据的安全传输。","like_count":13,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":490010,"discussion_content":"总结的很好，非常认真，amazing！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585617043,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1004660,"avatar":"https://static001.geekbang.org/account/avatar/00/0f/54/74/66ed87b7.jpg","nickname":"darcyJKB","note":"","ucode":"33D47249E2311E","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":304971,"discussion_content":"“非对称加密 是不是这样理解 谁都可以上锁 但是只有我自己能开锁？”","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599727340,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1677356,"avatar":"","nickname":"Tiantian","note":"","ucode":"CA9E7F259AA257","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":285967,"discussion_content":"跟你讲了之后不能马上知道啊，你这个小你能想出来了那个用的最少哪个图片有点傻，然后呢，那那个第二手他沙场¥15.9米的菜地是不是长宽度一定的是不是猪头是一样的，是不是你不管是怎么看出他是个逗比样的，那就看你是能不能介绍强挡泥板只要一套强的话呢，就会把你发给省了，你这边强你强不强长的多少啊，算了，小点15米这块枪战多少啊。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1593000268,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127102,"user_name":"allen","can_delete":false,"product_type":"c1","uid":1001392,"ip_address":"","ucode":"4DF7E58E89D541","user_header":"https://static001.geekbang.org/account/avatar/00/0f/47/b0/affce3fd.jpg","comment_is_top":false,"comment_ctime":1566553561,"is_pvip":false,"replies":[{"id":"47157","content":"是的，公钥的分发通常都使用证书的形式，防止伪造。","user_name":"作者回复","comment_id":127102,"uid":"1181974","ip_address":"","utype":1,"ctime":1566690464,"user_name_real":"chrono"}],"discussion_count":2,"race_medal":0,"score":"57401128409","product_id":100029001,"comment_content":"非对称加密通信的时候是不是会互相把自己的公钥发给对方？","like_count":13,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464320,"discussion_content":"是的，公钥的分发通常都使用证书的形式，防止伪造。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566690464,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1186808,"avatar":"https://static001.geekbang.org/account/avatar/00/12/1b/f8/01e7fc0e.jpg","nickname":"郑小鹿","note":"","ucode":"E8AF63B4CFCD6E","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":577927,"discussion_content":"如果不是双向认证，客户端的公钥怎么发给服务端呢？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656417251,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":464320,"ip_address":""},"score":577927,"extra":""}]}]},{"had_liked":false,"id":142720,"user_name":"Demon.Lee","can_delete":false,"product_type":"c1","uid":1052859,"ip_address":"","ucode":"7F0E5493A8E345","user_header":"https://static001.geekbang.org/account/avatar/00/10/10/bb/f1061601.jpg","comment_is_top":false,"comment_ctime":1571477341,"is_pvip":false,"replies":[{"id":"55239","content":"取决于是双向认证还是单向认证。<br><br>如果是单向认证，也就是目前大多数的用法，只发送服务器的公钥，验证服务器的身份。<br><br>如果是双向认证，那么服务器和客户端都要发送各自的公钥，互相验证对方的身份，一个常见的场景就是网银的U盾。","user_name":"作者回复","comment_id":142720,"uid":"1181974","ip_address":"","utype":1,"ctime":1571619795,"user_name_real":"chrono"}],"discussion_count":1,"race_medal":1,"score":"44521150301","product_id":100029001,"comment_content":"非对称加密可以解决“密钥交换”的问题。网站秘密保管私钥，在网上任意分发公钥，你想要登录网站只要用公钥加密就行了，密文只能由私钥持有者才能解密。而黑客因为没有私钥，所以就无法破解密文。<br>------------------------<br><br>有留言说：非对称加密通信的时候是互相把自己的公钥发给对方<br>-------------------------<br>老师，有点糊涂，到底这个  非对称加密  是一个有公钥一个有私钥，还是都有公私钥？","like_count":10,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":471244,"discussion_content":"取决于是双向认证还是单向认证。\n\n如果是单向认证，也就是目前大多数的用法，只发送服务器的公钥，验证服务器的身份。\n\n如果是双向认证，那么服务器和客户端都要发送各自的公钥，互相验证对方的身份，一个常见的场景就是网银的U盾。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571619795,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":127203,"user_name":"Geek_steven_wang","can_delete":false,"product_type":"c1","uid":1477120,"ip_address":"","ucode":"8CC8F4C9726191","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTI8mFt5wSkia31qc8paRg2uPSB6AuEBDricrSxvFBuTpP3NnnflekpJ7wqvN0nRrJyu7zVbzd7Lwjxw/132","comment_is_top":false,"comment_ctime":1566610223,"is_pvip":false,"replies":[{"id":"47154","content":"补充的非常好。","user_name":"作者回复","comment_id":127203,"uid":"1181974","ip_address":"","utype":1,"ctime":1566690324,"user_name_real":"chrono"}],"discussion_count":2,"race_medal":0,"score":"40221315887","product_id":100029001,"comment_content":"分组模式：DES和AES都属于分组密码，它们只能加密固定长度的明文。如果需要加密任意长度的明文，就需要对分组密码进行迭代，而分组密码的迭代方法就称为分组密码的“模式”。<br>主要模式：<br>ECB模式：Electronic Code Book mode（电子密码本模式）<br>CBC模式：Cipher Block Chaining mode（密码分组链接模式）（推荐使用）<br>CFB模式：Cipher FeedBack mode（密文反馈模式）<br>OFB模式：Output FeedBack mode（输出反馈模式）<br>CTR模式：CounTeR mode（计数器模式）（推荐使用）<br>","like_count":9,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":464374,"discussion_content":"补充的非常好。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566690324,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1360554,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/aa/fbff810a.jpg","nickname":"二刀田","note":"","ucode":"1854DA6F1017E5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22786,"discussion_content":"感谢分享，你的分享让我的理解通透了许多，谢谢","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569682746,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":162395,"user_name":"周曙光爱学习","can_delete":false,"product_type":"c1","uid":1022920,"ip_address":"","ucode":"98EAB6EBAB34B6","user_header":"https://static001.geekbang.org/account/avatar/00/0f/9b/c8/665100a3.jpg","comment_is_top":false,"comment_ctime":1576508764,"is_pvip":false,"replies":[{"id":"61789","content":"是的，你的理解是正确的。<br><br>有时候回答问题时难免有考虑不周，答案可能不是非常准确，你这种认真的态度值得肯定。<br><br>回到https上，因为https是建立在tls之上，所以一次tls握手成功后，只要不断开，连接一直是处于加密状态，所以可以在这个长连接上收发多次http报文。","user_name":"作者回复","comment_id":162395,"uid":"1181974","ip_address":"","utype":1,"ctime":1576544261,"user_name_real":"chrono"}],"discussion_count":1,"race_medal":0,"score":"31641279836","product_id":100029001,"comment_content":"老师你好，看到回复中有同学说每次https请求都需要走一次完整流程，即先通过非对称加密获取对称加密的秘钥，然后再用对称加密秘钥解密数据，这种说法不准确吧？因为是长链接，只要这个链接不断，不管多少次请求，这个对称加密应该都是同一个吧？只有链接断开重新建连才需要走一遍完整流程？求老师解答","like_count":7,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478037,"discussion_content":"是的，你的理解是正确的。\n\n有时候回答问题时难免有考虑不周，答案可能不是非常准确，你这种认真的态度值得肯定。\n\n回到https上，因为https是建立在tls之上，所以一次tls握手成功后，只要不断开，连接一直是处于加密状态，所以可以在这个长连接上收发多次http报文。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576544261,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":228099,"user_name":"爱学习不害怕","can_delete":false,"product_type":"c1","uid":1245504,"ip_address":"","ucode":"BE325C02E4C92F","user_header":"https://static001.geekbang.org/account/avatar/00/13/01/40/a203a3b9.jpg","comment_is_top":false,"comment_ctime":1592555387,"is_pvip":false,"replies":[{"id":"84148","content":"<br>1.当然了，公私钥任何人都可以持有，不只是服务器，只是现在服务器用的最多，给人以误解。<br><br>2.公钥私钥的生成方式有很多，比如银行常见的U盾，就是在硬件内部生成，Linux也可以用ssh-keygen这样的命令自己生成。<br>app或者浏览器生成公钥私钥也是可以的，因为非对称算法就是个算法，公钥私钥就是个数字，怎么生成都可以，没有什么特别神秘的地方。<br>但如果需要证书，那就必须有ca参与了，可以看后面的课。","user_name":"作者回复","comment_id":228099,"uid":"1181974","ip_address":"","utype":1,"ctime":1592608124,"user_name_real":"罗剑锋"}],"discussion_count":1,"race_medal":0,"score":"23067391867","product_id":100029001,"comment_content":"老师好，有个问题想问一下。<br>文中提到：“网站秘密保管私钥，在网上任意分发公钥，你想要登录网站只要用公钥加密就行了，密文只能由私钥持有者才能解密。而黑客因为没有私钥，所以就无法破解密文。”<br>1.是不是我们普通的用户也会持有自己的私钥？将公钥发给需要通信的网站，防止从网站发回的隐私信息泄露。<br>2.如果普通用户也有，那么这样的私钥和公钥是怎么生成的呢？我猜想是，如果是某个专用的app比如外卖或者电商，可以在app运行时在本地就生成直接传输。请问老师是这样的吗。还有就是是像浏览器这样的客户端怎么生成呢？","like_count":5,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498920,"discussion_content":"\n1.当然了，公私钥任何人都可以持有，不只是服务器，只是现在服务器用的最多，给人以误解。\n\n2.公钥私钥的生成方式有很多，比如银行常见的U盾，就是在硬件内部生成，Linux也可以用ssh-keygen这样的命令自己生成。\napp或者浏览器生成公钥私钥也是可以的，因为非对称算法就是个算法，公钥私钥就是个数字，怎么生成都可以，没有什么特别神秘的地方。\n但如果需要证书，那就必须有ca参与了，可以看后面的课。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592608124,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115815,"user_name":"永钱","can_delete":false,"product_type":"c1","uid":1057123,"ip_address":"","ucode":"E758406EA4E23B","user_header":"https://static001.geekbang.org/account/avatar/00/10/21/63/f47576e1.jpg","comment_is_top":false,"comment_ctime":1563754160,"is_pvip":false,"replies":[{"id":"42345","content":"2不太正确，感觉是弄反了。<br><br>其实两者在密码学上都可以叫加密，互相加密解密。只是一般习惯上的说法是公钥加密私钥解密，私钥签名公钥验签。","user_name":"作者回复","comment_id":115815,"uid":"1181974","ip_address":"","utype":1,"ctime":1563758993,"user_name_real":"chrono"}],"discussion_count":1,"race_medal":0,"score":"23038590640","product_id":100029001,"comment_content":"1.现在很流行密码锁，秘钥就是你设置的密码，没有密码，开不了锁<br>2.私钥加密叫加密，公钥加密叫签名，防止抵赖","like_count":5,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459299,"discussion_content":"2不太正确，感觉是弄反了。\n\n其实两者在密码学上都可以叫加密，互相加密解密。只是一般习惯上的说法是公钥加密私钥解密，私钥签名公钥验签。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563758993,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":245891,"user_name":"Javatar","can_delete":false,"product_type":"c1","uid":2032840,"ip_address":"","ucode":"E216645CDF632C","user_header":"https://static001.geekbang.org/account/avatar/00/1f/04/c8/3c7af100.jpg","comment_is_top":false,"comment_ctime":1599102850,"is_pvip":false,"replies":[{"id":"90417","content":"对，用的是sshkeygen，然后把公钥给GitHub，这样用私钥来标识自己的身份。","user_name":"作者回复","comment_id":245891,"uid":"1181974","ip_address":"","utype":1,"ctime":1599124517,"user_name_real":"罗剑锋"}],"discussion_count":2,"race_medal":0,"score":"18778972034","product_id":100029001,"comment_content":"github或者公司自己的gitlab等这种代码托管平台，应该和u盾的原理类似。需要事先在自己电脑生成一对公私钥，然后把公钥保存到gitlab上，这样你pull代码的时候，你用私钥签名，gitlab那边用公钥解密，就能确认你 是你了。","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":505003,"discussion_content":"对，用的是sshkeygen，然后把公钥给GitHub，这样用私钥来标识自己的身份。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599124517,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2913864,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/MYShyjtRtib2GIQiaK4hV3ZP9pQ1qiaS74DA4K4YHY4SIiaFDfsCKgiaMWwm9zFsSn3bt5pawp5Kdn5MWgiaw5909nug/132","nickname":"Geek_aa1c31","note":"","ucode":"1AC14C053638AF","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":556856,"discussion_content":"哇, 解决了我以前一致纠结的一个问题","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1647542578,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116017,"user_name":"Keep-Moving","can_delete":false,"product_type":"c1","uid":1182631,"ip_address":"","ucode":"76F33C06E07A27","user_header":"https://static001.geekbang.org/account/avatar/00/12/0b/a7/6ef32187.jpg","comment_is_top":false,"comment_ctime":1563772919,"is_pvip":false,"replies":[{"id":"42436","content":"这个其实很简单，就是产生一个随机数，比如16字节，然后用公钥加密后安全传递给对方。","user_name":"作者回复","comment_id":116017,"uid":"1181974","ip_address":"","utype":1,"ctime":1563784556,"user_name_real":"chrono"}],"discussion_count":1,"race_medal":0,"score":"18743642103","product_id":100029001,"comment_content":"然后用随机数产生对称算法使用的“会话密钥”（session key）<br><br>这个能详细说一下吗？","like_count":4,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459356,"discussion_content":"这个其实很简单，就是产生一个随机数，比如16字节，然后用公钥加密后安全传递给对方。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563784556,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275035,"user_name":"牛","can_delete":false,"product_type":"c1","uid":2382521,"ip_address":"","ucode":"12C46025BBA2D3","user_header":"","comment_is_top":false,"comment_ctime":1611283446,"is_pvip":false,"replies":[{"id":"99928","content":"good","user_name":"作者回复","comment_id":275035,"uid":"1181974","ip_address":"","utype":1,"ctime":1611537048,"user_name_real":"罗剑锋"}],"discussion_count":1,"race_medal":0,"score":"14496185334","product_id":100029001,"comment_content":"关于混合加密，会话密钥应该不是通过网络传输的，而是两端独立生成的：<br>非对称加密进行前，两端已经交换了各自生成的一个随机数<br>非对称加密传输了客户端生成的另一个随机数<br>两端根据这三个随机数生成会话密钥。","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514191,"discussion_content":"good","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611537048,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":255382,"user_name":"彻夜繁星","can_delete":false,"product_type":"c1","uid":1243179,"ip_address":"","ucode":"E74446F3B70961","user_header":"https://static001.geekbang.org/account/avatar/00/12/f8/2b/f404c4a4.jpg","comment_is_top":false,"comment_ctime":1603332792,"is_pvip":false,"replies":[{"id":"93040","content":"这个就是GCM等密码算法的优势了，增加随机性，防止重复攻击、选择明文攻击。<br><br>如果用ECB等算法，每次的密文就是一样的，容易被密码分析破解出秘钥。<br><br>再补充一点，比较好理解的做法就是在运算的时候加一点随机的“盐”（salt）。","user_name":"作者回复","comment_id":255382,"uid":"1181974","ip_address":"","utype":1,"ctime":1603347835,"user_name_real":"罗剑锋"}],"discussion_count":1,"race_medal":0,"score":"14488234680","product_id":100029001,"comment_content":"老师好，我有个小白问题：做实验&#47;24-2的时候发现，公钥、私钥、明文都不变的情况下，刷新网页重新执行加解密，密文却会不断变化。<br><br>为什么公钥、私钥、明文、算法都不变的情况下，每次执行加密，会得到不同的密文呢？","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":507703,"discussion_content":"这个就是GCM等密码算法的优势了，增加随机性，防止重复攻击、选择明文攻击。\n\n如果用ECB等算法，每次的密文就是一样的，容易被密码分析破解出秘钥。\n\n再补充一点，比较好理解的做法就是在运算的时候加一点随机的“盐”（salt）。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1603347835,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":174313,"user_name":"keep it simple","can_delete":false,"product_type":"c1","uid":1574739,"ip_address":"","ucode":"72B8DC00247C9E","user_header":"https://static001.geekbang.org/account/avatar/00/18/07/53/05aa9573.jpg","comment_is_top":false,"comment_ctime":1580135958,"is_pvip":false,"replies":[{"id":"67815","content":"128位，就是16字节，再用hex编码显示为16进制字符串，就是32个字符了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1580266406,"ip_address":"","comment_id":174313,"utype":1}],"discussion_count":3,"race_medal":0,"score":"14465037846","product_id":100029001,"comment_content":"老师好，实验环境&#47;24-1输入的key=123456，<br>密钥是123456，明文是hello openssl<br>加密后的结果是93a024a94083bc39fb2c2b9f5ce27c09吗？<br>那为什么说密钥长度为128位呢，难道不是加密后结果为128位吗？","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482366,"discussion_content":"128位，就是16字节，再用hex编码显示为16进制字符串，就是32个字符了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1580266406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":218144,"discussion_content":"传入的参数只是用来生成key的素材，内部会再调用一个函数生成真正使用的16字节key。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1585624220,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1231917,"avatar":"https://static001.geekbang.org/account/avatar/00/12/cc/2d/124656fb.jpg","nickname":"Yefei","note":"","ucode":"D0BAC4BA064329","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":183779,"discussion_content":"老师，同样有点没理解，24-1的例子中，用的aes-128，意思是密钥128位/16字节/32位16进制，那key=123456是用来做什么的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582516177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134414,"user_name":"missing~~","can_delete":false,"product_type":"c1","uid":1583675,"ip_address":"","ucode":"42DDDD1185BFFF","user_header":"https://static001.geekbang.org/account/avatar/00/18/2a/3b/3b938d03.jpg","comment_is_top":false,"comment_ctime":1568820551,"is_pvip":false,"replies":[{"id":"51542","content":"这是为了安全起见，如果长时间都使用一个对称密钥加解密就容易被破解，所以每次通信都要选择新的密钥，保证安全。<br><br>当然这有效率的问题，所以tls就出现了会话复用，在一定的有效期内可以直接重用上次的对称密钥，提高效率。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1568853386,"ip_address":"","comment_id":134414,"utype":1}],"discussion_count":1,"race_medal":0,"score":"14453722439","product_id":100029001,"comment_content":"老师好，对于混合加密这块不是很理解，实质是通过非对称加密传递一个会话级别的密钥，假如客户端A用公钥加密了一个对称加密的秘钥传递给服务端B,B收到后通过私钥解出来这个对称加密密钥然后做对称解密。客户端A第二次请求又走同样的逻辑。不知道我这样理解对不对，如果对那么为什么还要再做一次对称解密感觉没有必要这样不是更影响效率吗？","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467734,"discussion_content":"这是为了安全起见，如果长时间都使用一个对称密钥加解密就容易被破解，所以每次通信都要选择新的密钥，保证安全。\n\n当然这有效率的问题，所以tls就出现了会话复用，在一定的有效期内可以直接重用上次的对称密钥，提高效率。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568853386,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":303424,"user_name":"吃货的自我修养","can_delete":false,"product_type":"c1","uid":2124390,"ip_address":"","ucode":"A62DDD09847877","user_header":"","comment_is_top":false,"comment_ctime":1626782253,"is_pvip":false,"replies":[{"id":"109839","content":"<br>1.密钥交换的过程中，与每一个通信对象使用的会话密钥都是随机生成的，也就是说B、C的会话密钥是不同的，所以是安全的。<br><br>2.私钥加密后任何人都可以用公钥解密，所以必须是用公钥加密才行，私钥只能用来对外发布签名。<br><br>3.要弄清楚公钥私钥的不同应用场合，数据保密就要用公钥加密，验证身份就用私钥加密。反过来，公钥解密验证私钥持有者的身份，私钥解密用来获取秘密交换的信息。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1626829062,"ip_address":"","comment_id":303424,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10216716845","product_id":100029001,"comment_content":"答题：<br>1、把秘钥比作钥匙，把挂上锁的盒子比作加密后的密文，盒子里是明文数据<br>对称加密:双方持有一模一样的钥匙，A把信息放到盒子里，用钥匙给盒子上锁，并把盒子给到B，B使用钥匙开锁，得到明文数据<br>非对称加密(无身份认证的情形):1）假设A想把信息给到B和C，那么A需要先生成两把钥匙，私钥留给自己，公钥提供给B和C，此时锁的特性是，私钥锁上公钥开，公钥锁上私钥开，也就是说A用私钥锁上之后，只有持有公钥的人A,B,C（假设A提供公钥时给自己留了公钥）使用公钥才能打开，这个过程安全的前提是持有公钥的只有A,B,C,如果此时来一个D窃取了这三人当中一人的公钥，那么就可以窃取A盒子里的信息，并且伪造B，C给A送盒子发消息；2）在A持有私钥，ABC持有公钥的前提下，B和C发送给A信息，B和C用公钥锁上盒子给到A，A用私钥打开盒子，这个过程可能B会伪造C给A发送消息，其实也不安全<br>2、这里其实没太懂，像上述说的，A给了B和C公钥，自己持有私钥，如果A给会话秘钥加密，B和C拥有公钥应该都可以解密出会话秘钥，这样怎么保证会话秘钥安全传输呢？还是说这个过程其实是倒过来的，其实这个会话秘钥是必须B或C来生成，使用公钥加密，A私钥解密，先以这样的形式保证会话秘钥安全，再进行会话秘钥加密的安全通信<br>问题：<br>如果是A和B对接接口，B调用A的接口，A返回RSA加密的数据，B得到接口返回的数据并解密得到明文，非对称加密有个说法&quot;私钥签名公钥验证，公钥加密私钥解密&quot;,既然是B解密，出于安全，应该公钥加密私钥解密，B持私钥去解密，可是这个接口是A发布的，如果A需要对接C,D,E,要把私钥给到C，D,E,这样是否说明这个设计不合理，我个人觉得应该A持私钥加密，接口对接的BCDE持公钥解密，但是如果公钥泄露的话，接口信息就泄露了，老师怎么看呢？","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":523672,"discussion_content":"\n1.密钥交换的过程中，与每一个通信对象使用的会话密钥都是随机生成的，也就是说B、C的会话密钥是不同的，所以是安全的。\n\n2.私钥加密后任何人都可以用公钥解密，所以必须是用公钥加密才行，私钥只能用来对外发布签名。\n\n3.要弄清楚公钥私钥的不同应用场合，数据保密就要用公钥加密，验证身份就用私钥加密。反过来，公钥解密验证私钥持有者的身份，私钥解密用来获取秘密交换的信息。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1626829062,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293286,"user_name":"首富手记","can_delete":false,"product_type":"c1","uid":1286588,"ip_address":"","ucode":"879DED4078303C","user_header":"https://static001.geekbang.org/account/avatar/00/13/a1/bc/ef0f26fa.jpg","comment_is_top":false,"comment_ctime":1621322635,"is_pvip":true,"replies":[{"id":"106139","content":"总结的很好，不过要注意这个是rsa密钥交换过程，现在不推荐使用了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1621326239,"ip_address":"","comment_id":293286,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10211257227","product_id":100029001,"comment_content":"我又总结了下。HTTPS加密过程，HTTPS采用混合加密算法，即对称加密、和非对称加密<br>通信前准备工作：申请域名对应的证书，并将其部署在Nginx服务器中。<br>1) 第一步客户端向服务端发送 Client Hello 消息，这个消息里包含了一个客户端生成的随机数 Random1、客户端支持的加密套件 和 客户端支持TLS协议版本等信息。<br>2) 服务端会向客户端发送 Server Hello 消息。返回自己的公钥证书、挑选一个合适的加密套件、另外还会生成一份随机数 Random2推送给客户端。至此客户端和服务端都拥有了两个随机数（Random1+ Random2）<br>3) 客户端收到服务端传来的公钥证书后，先从 CA 验证该证书的合法性（CA公钥去解密公钥证书），验证通过后取出证书中的服务端公钥，再生成一个随机数 Random3，再用服务端公钥非对称加密 Random3。<br>4) 服务端用自己的私钥解出客户端生成的 Random3。至此，客户端和服务端都拥有 Random1 + Random2 + Random3，两边根据同样的算法生成一份秘钥，握手结束后的应用层数据都是使用这个秘钥进行对称加密。","like_count":3,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520143,"discussion_content":"总结的很好，不过要注意这个是rsa密钥交换过程，现在不推荐使用了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621326239,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1500391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e4/e7/31944ee7.jpg","nickname":"千军万马万马@","note":"","ucode":"0BDAD22123435A","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582134,"discussion_content":"好","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659255139,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":122892,"user_name":"业余草","can_delete":false,"product_type":"c1","uid":1126538,"ip_address":"","ucode":"99BDC1E629049D","user_header":"https://static001.geekbang.org/account/avatar/00/11/30/8a/b5ca7286.jpg","comment_is_top":false,"comment_ctime":1565571317,"is_pvip":false,"replies":[{"id":"45082","content":"继续学习，完成作业才是更好的证明。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565572600,"ip_address":"","comment_id":122892,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10155505909","product_id":100029001,"comment_content":"留个言，证明一下我看过此文！","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":462443,"discussion_content":"继续学习，完成作业才是更好的证明。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565572600,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115910,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1563766725,"is_pvip":false,"replies":[{"id":"42391","content":"√","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563770227,"ip_address":"","comment_id":115910,"utype":1}],"discussion_count":2,"race_medal":0,"score":"10153701317","product_id":100029001,"comment_content":"1、加密算法是公开的，好比锁的制造方法是公开的，任何人都可以研究，但是想要开一个锁，只能用某把特定的钥匙，用其他的钥匙是打不开锁的，即想要解密特定的密文，只能用特定的密钥，用其他的密钥是无法解密的","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459345,"discussion_content":"√","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563770227,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1360554,"avatar":"https://static001.geekbang.org/account/avatar/00/14/c2/aa/fbff810a.jpg","nickname":"二刀田","note":"","ucode":"1854DA6F1017E5","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":22787,"discussion_content":"好比喻","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569682890,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115826,"user_name":"何用","can_delete":false,"product_type":"c1","uid":1377393,"ip_address":"","ucode":"B0C6E8176AE6FD","user_header":"https://static001.geekbang.org/account/avatar/00/15/04/71/0b949a4c.jpg","comment_is_top":false,"comment_ctime":1563755575,"is_pvip":false,"replies":[{"id":"42344","content":"great。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563758909,"ip_address":"","comment_id":115826,"utype":1}],"discussion_count":1,"race_medal":0,"score":"10153690167","product_id":100029001,"comment_content":"公钥能解开的信息一定是与之配对的私钥加密的，这能解决身份认证的问题","like_count":2,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459302,"discussion_content":"great。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563758909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":350815,"user_name":"散步去海边","can_delete":false,"product_type":"c1","uid":3015813,"ip_address":"","ucode":"A44C7A4ABFF9E3","user_header":"https://static001.geekbang.org/account/avatar/00/2e/04/85/dac0f5e2.jpg","comment_is_top":false,"comment_ctime":1657240534,"is_pvip":true,"replies":[{"id":"127630","content":"私钥只能自己持有，不能外发，公钥用证书保证安全发送。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1657248576,"ip_address":"","comment_id":350815,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5952207830","product_id":100029001,"comment_content":"老师好，我有个问题，非对称加密过程中，私钥是如何保证安全发到用户手上的？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":579202,"discussion_content":"私钥只能自己持有，不能外发，公钥用证书保证安全发送。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1657248576,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":348144,"user_name":"Geek_21a73c","can_delete":false,"product_type":"c1","uid":3014444,"ip_address":"","ucode":"104A4AD89DA6BC","user_header":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM74658w9PQeTM4TcM14BzfpJnVLrsciaS26ibRwRbCE09ydI6UlZhFrJh7iaVLp2xxhBppVDKLyRRg9Q/132","comment_is_top":false,"comment_ctime":1654778318,"is_pvip":false,"replies":[{"id":"126933","content":"非常正确，这就是签名的作用，无法篡改。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1655097724,"ip_address":"","comment_id":348144,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5949745614","product_id":100029001,"comment_content":"在混合加密中用到了公钥加密，因为只能由私钥解密。那么反过来，私钥加密后任何人都可以用公钥解密，这有什么用呢？————————只能看不能改？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575766,"discussion_content":"非常正确，这就是签名的作用，无法篡改。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1655097724,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":281711,"user_name":"小童","can_delete":false,"product_type":"c1","uid":1763395,"ip_address":"","ucode":"300444B520E79D","user_header":"https://static001.geekbang.org/account/avatar/00/1a/e8/43/f9c0faed.jpg","comment_is_top":false,"comment_ctime":1614854427,"is_pvip":false,"replies":[{"id":"102287","content":"注意非对称加密算法有两个不对称的密钥，公钥可以公开任意发布，而私钥严格保密。<br><br>所以任何人都可以拿到公钥，而私钥不会公开，所以就不存在交换的问题。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1614907772,"ip_address":"","comment_id":281711,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5909821723","product_id":100029001,"comment_content":"老师为什么说 非对称加密没有“密钥交换”的问题？不理解。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":516480,"discussion_content":"注意非对称加密算法有两个不对称的密钥，公钥可以公开任意发布，而私钥严格保密。\n\n所以任何人都可以拿到公钥，而私钥不会公开，所以就不存在交换的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1614907772,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":266384,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1607320280,"is_pvip":false,"replies":[{"id":"96793","content":"多复习，勤总结，很好的学习方法。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1607390406,"ip_address":"","comment_id":266384,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5902287576","product_id":100029001,"comment_content":"再复习一遍<br>1、加密就是用锁锁起来，解密就是用钥匙打开锁。这就是密钥的加密解密。<br>2、私钥只有用户自己持有，能确定文件肯定是来自于该用户，所以可以做身份认证。<br>https系列文章看了好几遍了，越来越清晰了。老师讲的很好👍","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511240,"discussion_content":"多复习，勤总结，很好的学习方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1607390406,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242675,"user_name":"may_huang","can_delete":false,"product_type":"c1","uid":1451623,"ip_address":"","ucode":"EAF989F18FC109","user_header":"https://static001.geekbang.org/account/avatar/00/16/26/67/c3d90f46.jpg","comment_is_top":false,"comment_ctime":1597807614,"is_pvip":true,"replies":[{"id":"89537","content":"如果不使用ssl&#47;tls，那么公钥的分发和确认就是个很大的问题，所以非对称加密只是安全通信的基础。<br><br>后面的ssl&#47;tls就是为了解决这个问题的。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1597885019,"ip_address":"","comment_id":242675,"utype":1}],"discussion_count":3,"race_medal":0,"score":"5892774910","product_id":100029001,"comment_content":"非对称加密中，用户是如何知道对应的私钥的？<br>举例甲发给乙某一个信息。甲使用公钥进行加密。乙收到后用私钥进行解密即可。<br>那么问题来了。乙是如何知道用于解密的这个私钥的？是甲发给乙？还是乙自己算的？<br>补充提问。理论上，甲乙都不知道对方的私钥，那么通信的时候，这个公钥是怎么获得的？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504071,"discussion_content":"如果不使用ssl/tls，那么公钥的分发和确认就是个很大的问题，所以非对称加密只是安全通信的基础。\n\n后面的ssl/tls就是为了解决这个问题的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597885019,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2406841,"avatar":"https://static001.geekbang.org/account/avatar/00/24/b9/b9/9e4d7aa4.jpg","nickname":"乘风破浪","note":"","ucode":"937AF15F3FEBDC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":349703,"discussion_content":"概念有点混乱，非对称加密都是自己生成一对秘钥，然后把公钥告诉别人，在你的的例子里，甲用的是乙的公钥加密的，所以不存在乙不知道私钥无法解密。\n另外，因为公钥加密，只有私钥才能解密，所以公钥可以随意分发，没有私钥解不了密，所以公钥分发也不存在安全性问题。","likes_number":1,"is_delete":false,"is_hidden":false,"ctime":1613468454,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":1,"child_discussions":[{"author":{"id":1500391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e4/e7/31944ee7.jpg","nickname":"千军万马万马@","note":"","ucode":"0BDAD22123435A","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":2406841,"avatar":"https://static001.geekbang.org/account/avatar/00/24/b9/b9/9e4d7aa4.jpg","nickname":"乘风破浪","note":"","ucode":"937AF15F3FEBDC","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582136,"discussion_content":"Good","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659255506,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":349703,"ip_address":"河北"},"score":582136,"extra":""}]}]},{"had_liked":false,"id":237434,"user_name":"马哲富","can_delete":false,"product_type":"c1","uid":1107917,"ip_address":"","ucode":"D6BDDFE3CC07ED","user_header":"https://static001.geekbang.org/account/avatar/00/10/e7/cd/08088f14.jpg","comment_is_top":false,"comment_ctime":1595830522,"is_pvip":false,"replies":[{"id":"87723","content":"<br>1.密文不包含密钥，是明文经过加密后的乱码。<br><br>2.公钥和私钥一一对应，因为数字非常大，所以数量可以说是无限的，这个属于数学领域了，我们不用太关心。<br><br>3.会话密钥是被非对称算法安全传递的，所以很难破解，而且因为是一次一密，即使破解了也只是这次会话受影响。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1595837898,"ip_address":"","comment_id":237434,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5890797818","product_id":100029001,"comment_content":"老师好，有几点不解之处：<br>1.密文是包含秘钥+正文的对么？<br>2.非对称加密中公钥和私钥是一一对应的吗？如果是那么公钥是怎么产生的，是否数量有限？如果不是，那么公钥的生产是不是也是一个类似加密的过程呢？<br>3.在混合加密模式中，一开始用非对称加密，后续用会话秘钥，会话秘钥是随机生产的数，那这样在对称加密传输的过程中岂不是又会被破解？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":502415,"discussion_content":"\n1.密文不包含密钥，是明文经过加密后的乱码。\n\n2.公钥和私钥一一对应，因为数字非常大，所以数量可以说是无限的，这个属于数学领域了，我们不用太关心。\n\n3.会话密钥是被非对称算法安全传递的，所以很难破解，而且因为是一次一密，即使破解了也只是这次会话受影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1595837898,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":234501,"user_name":"风","can_delete":false,"product_type":"c1","uid":1147929,"ip_address":"","ucode":"AFDBEFA49F269E","user_header":"https://static001.geekbang.org/account/avatar/00/11/84/19/7ed2ffa6.jpg","comment_is_top":false,"comment_ctime":1594706590,"is_pvip":true,"replies":[{"id":"86570","content":"提的问题非常好，这些就是SSL&#47;TLS要解决的，接着往下看就会明白了。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1594775820,"ip_address":"","comment_id":234501,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5889673886","product_id":100029001,"comment_content":"对称加密需要进行秘钥交换统一客户端与服务端的秘钥,但是在进行混合加密的过程中,需要使用公钥加密对称加密使用的秘钥,然后服务端通过私钥解密获得对称加密时使用的秘钥,那如果客户端有很多的话,怎么让客户端保证使用同一种非对称加密方式？非对称加密方式是否也需要定时更换？麻烦老师解答下","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":501407,"discussion_content":"提的问题非常好，这些就是SSL/TLS要解决的，接着往下看就会明白了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1594775820,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":227774,"user_name":"潇潇雨歇","can_delete":false,"product_type":"c1","uid":1251429,"ip_address":"","ucode":"4BD52BF0F0A084","user_header":"https://static001.geekbang.org/account/avatar/00/13/18/65/35361f02.jpg","comment_is_top":false,"comment_ctime":1592477210,"is_pvip":false,"replies":[{"id":"84023","content":"继续努力，学得很快。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1592528555,"ip_address":"","comment_id":227774,"utype":1}],"discussion_count":2,"race_medal":0,"score":"5887444506","product_id":100029001,"comment_content":"1、加密等于上锁，解密等于用钥匙开锁<br>2、做身份认证，看评论区才知道","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":498775,"discussion_content":"继续努力，学得很快。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1592528555,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1500391,"avatar":"https://static001.geekbang.org/account/avatar/00/16/e4/e7/31944ee7.jpg","nickname":"千军万马万马@","note":"","ucode":"0BDAD22123435A","race_medal":1,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":582137,"discussion_content":"我也是！","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1659255564,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"河北"},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":224829,"user_name":"alvin","can_delete":false,"product_type":"c1","uid":2013447,"ip_address":"","ucode":"E79D9C6EE8D016","user_header":"https://static001.geekbang.org/account/avatar/00/1e/b9/07/aab6784b.jpg","comment_is_top":false,"comment_ctime":1591553901,"is_pvip":false,"replies":[{"id":"82758","content":"基本正确，非对称密钥的有效期比较长，通常是几个月或者几年，而会话密钥的有效期很短，通常是一次一密。<br><br>可以再参考后面的tls解析。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1591578466,"ip_address":"","comment_id":224829,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5886521197","product_id":100029001,"comment_content":"关于混合加密流程<br><br>1. 客户端发送请求索要公钥<br>2. 服务端返回公钥和加密方法 比如 RSA<br>3. 客户端通过 RSA+公钥+随机会话密钥<br>4. 服务端通过私钥解密，拿到密钥。然后后面就用这个密钥进行通信了<br><br>请问老师我理解的这个流程对吗？以及这个密钥什么时候会更新","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":497622,"discussion_content":"基本正确，非对称密钥的有效期比较长，通常是几个月或者几年，而会话密钥的有效期很短，通常是一次一密。\n\n可以再参考后面的tls解析。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1591578466,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":190151,"user_name":"欢乐的小马驹","can_delete":false,"product_type":"c1","uid":1078951,"ip_address":"","ucode":"B594106688CEE7","user_header":"https://static001.geekbang.org/account/avatar/00/10/76/a7/374e86a7.jpg","comment_is_top":false,"comment_ctime":1584607497,"is_pvip":false,"replies":[{"id":"73221","content":"<br>1.传入的参数只是用来生成key的素材，内部会再调用一个函数生成真正使用的16字节key。<br><br>2.分组算法是指加密的明文是16字节，密钥长度可以一样也可以不一样，看算法。<br><br>3.如果不足会有填充算法，既然是算法那就有相应的策略可以去掉，比如填多少个0，然后再去掉。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1584665491,"ip_address":"","comment_id":190151,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5879574793","product_id":100029001,"comment_content":"老师你好。文中你提到“比如，AES128-GCM，意思是密钥长度为 128 位的 AES 算法，使用的分组模式是 GCM”。这里说密钥的长度是128位，也就是16个字节。但是我看key传入的是123456，也不够16个字节。<br>第一个问题：这里16个字节是指分组后，明文一组16个字节，还是密钥16个字节呢，还是都是16字节？<br>第二个问题：如果是明文16个字节为一组，那总会出现不足16个字节的，这个怎么破？我看有人说会填充，填充值后解密后怎么知道原来是什么？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":487902,"discussion_content":"\n1.传入的参数只是用来生成key的素材，内部会再调用一个函数生成真正使用的16字节key。\n\n2.分组算法是指加密的明文是16字节，密钥长度可以一样也可以不一样，看算法。\n\n3.如果不足会有填充算法，既然是算法那就有相应的策略可以去掉，比如填多少个0，然后再去掉。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1584665491,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":160548,"user_name":"nora","can_delete":false,"product_type":"c1","uid":1206539,"ip_address":"","ucode":"3A3EABF27D0261","user_header":"https://static001.geekbang.org/account/avatar/00/12/69/0b/780b0aac.jpg","comment_is_top":false,"comment_ctime":1575972791,"is_pvip":false,"replies":[{"id":"61316","content":"<br>1.单纯在密码学领域来讲，是不存在客户端和服务器的区别的，只有通信的双方，所以私钥签名即可以是服务器签名，也可以是客户端签名，只要有私钥就可以，对应的另一方用公钥来验证。<br><br>2.验签当然是用对方的公钥来验证，所以客户端签名验证就是用服务器的公钥来验证对数据的签名是否是正确的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1576025952,"ip_address":"","comment_id":160548,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5870940087","product_id":100029001,"comment_content":"有点糊涂了，向老师提问：<br><br>1. 所以私钥的签名作用是指 服务器的签名嘛？ 客户端用公钥来验证收到的消息是否为对应服务器的回复。<br><br>2. 我们平时说的客户端签名验证指的是什么呢？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477411,"discussion_content":"\n1.单纯在密码学领域来讲，是不存在客户端和服务器的区别的，只有通信的双方，所以私钥签名即可以是服务器签名，也可以是客户端签名，只要有私钥就可以，对应的另一方用公钥来验证。\n\n2.验签当然是用对方的公钥来验证，所以客户端签名验证就是用服务器的公钥来验证对数据的签名是否是正确的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576025952,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":145982,"user_name":"听雨","can_delete":false,"product_type":"c1","uid":1254493,"ip_address":"","ucode":"252754F9FCFF0C","user_header":"https://static001.geekbang.org/account/avatar/00/13/24/5d/65e61dcb.jpg","comment_is_top":false,"comment_ctime":1572412129,"is_pvip":false,"replies":[{"id":"56342","content":"<br>1.在非对称加密里，公钥和私钥是“一对”，多份公钥都是一样的，也就是说多份相同的公钥对应一个保密的私钥。<br><br>2.你理解的对，所以私钥加密不能用于保密，只能用作签名，可以参考25讲。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1572416177,"ip_address":"","comment_id":145982,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5867379425","product_id":100029001,"comment_content":"问题：<br>1. 非对称加密，公钥可以随意发布，如果发布了很多份，那这么多公钥是一样的吗？<br>2. 基于问题1，如果公钥是一样的，那完全基于非对称加密实现的机密性怎么保证数据安全呢，可能网站用私钥加密了数据，但是黑客和普通用户都持有公钥，那黑客也就可以解出用户的请求数据了，这样也不安全呀。<br>可能我理解的有问题了，还请老师解答一下！","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472654,"discussion_content":"\n1.在非对称加密里，公钥和私钥是“一对”，多份公钥都是一样的，也就是说多份相同的公钥对应一个保密的私钥。\n\n2.你理解的对，所以私钥加密不能用于保密，只能用作签名，可以参考25讲。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572416177,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":136985,"user_name":"qiezitx","can_delete":false,"product_type":"c1","uid":1664274,"ip_address":"","ucode":"AEA470E33B4C19","user_header":"https://static001.geekbang.org/account/avatar/00/19/65/12/98fe9d80.jpg","comment_is_top":false,"comment_ctime":1569570519,"is_pvip":false,"replies":[{"id":"52771","content":"看得出来很努力、认真，加油。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1569720253,"ip_address":"","comment_id":136985,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5864537815","product_id":100029001,"comment_content":"1、密钥就相当于现实生活中的钥匙，加密算法相当于现实生活中的锁，通过钥匙来上锁和解锁。公私钥相当于A上的锁只能B解锁，B上的锁只能A解锁，但一般A会分发出去有多份。<br>2、私钥加密，公钥解密，这个刚开始没领悟，看了答案才知道用来做身份认证，能解开说明是私钥持有者发给我的。但这个反向认证的应用时机还没领悟，因为毕竟此时已经有会话密钥了，可以用对称加密来通讯。继续学。","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":468892,"discussion_content":"看得出来很努力、认真，加油。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1569720253,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116162,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1563795912,"is_pvip":true,"replies":[{"id":"42524","content":"理论上也可以用于非对称，但一般不用。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563842981,"ip_address":"","comment_id":116162,"utype":1}],"discussion_count":1,"race_medal":1,"score":"5858763208","product_id":100029001,"comment_content":"分组模式，只针对对称加密吗？","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459415,"discussion_content":"理论上也可以用于非对称，但一般不用。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563842981,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115843,"user_name":"彩色的沙漠","can_delete":false,"product_type":"c1","uid":1116183,"ip_address":"","ucode":"19A0975A5E69EA","user_header":"https://static001.geekbang.org/account/avatar/00/11/08/17/e63e50f3.jpg","comment_is_top":false,"comment_ctime":1563757030,"is_pvip":true,"replies":[{"id":"42339","content":"great。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563758836,"ip_address":"","comment_id":115843,"utype":1}],"discussion_count":1,"race_medal":0,"score":"5858724326","product_id":100029001,"comment_content":"非对称加密除了密钥交换还可以用于身份认证","like_count":1,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459311,"discussion_content":"great。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563758836,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":356122,"user_name":"袁帅","can_delete":false,"product_type":"c1","uid":1084993,"ip_address":"上海","ucode":"A71A89B9F1BD69","user_header":"https://static001.geekbang.org/account/avatar/00/10/8e/41/709e9677.jpg","comment_is_top":false,"comment_ctime":1661998084,"is_pvip":true,"replies":[{"id":"129632","content":"可以考虑用这个 ：https:&#47;&#47;github.com&#47;fffonion&#47;lua-resty-openssl。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1662002793,"ip_address":"上海","comment_id":356122,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1661998084","product_id":100029001,"comment_content":"罗老师，你提供的加解密示例url，背后的源码能给出一下么？<br>https:&#47;&#47;www.chrono.com&#47;24-1?key=123456<br><br>我想在openresty上实现加解密功能，但是并没有找到合适的openresty库，目前的实现方式是基于FFI调用的openssl<br>所以我想参考一下您的实现方式<br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":586148,"discussion_content":"可以考虑用这个 ：https://github.com/fffonion/lua-resty-openssl。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1662002793,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"上海"},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":349755,"user_name":"泥鳅儿","can_delete":false,"product_type":"c1","uid":1323000,"ip_address":"","ucode":"26B47C8FC67615","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/ojfRyNRvy1x3Mia0nssz6CNPHrHXwPPmibvds1URgoHQuKXrGiaxrEbsT6sAvuK4N4AOicySh8S9iaWcOLjteOl6Kgg/132","comment_is_top":false,"comment_ctime":1656310779,"is_pvip":false,"replies":[{"id":"127317","content":"不能，公私钥是一对，也就是一个公钥对应一个私钥，这是由算法决定的。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1656323478,"ip_address":"","comment_id":349755,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1656310779","product_id":100029001,"comment_content":"有个问题想问一下老师，就是非对称加密，可以有一个私钥对应多个公钥吗，然后私钥加密后，这些公钥都能对密文进行解密？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":577769,"discussion_content":"不能，公私钥是一对，也就是一个公钥对应一个私钥，这是由算法决定的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1656323478,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":344209,"user_name":"Geek_115bc8","can_delete":false,"product_type":"c1","uid":1673843,"ip_address":"","ucode":"71FBC9F02AFE1B","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/DYAIOgq83erXRaa98A3zjLDkOibUJV1254aQ4EYFTbSLJuEvD0nXicMNA8pLoxOfHf5kPTbGLXNicg8CPFH3Tn0mA/132","comment_is_top":false,"comment_ctime":1651372465,"is_pvip":false,"replies":[{"id":"125710","content":"1.密钥当然是不知道的，不交换怎么能够知道呢？<br>2.非对称算法里公钥公开，随意发放，自然就没有交换的问题。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1651539937,"ip_address":"","comment_id":344209,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1651372465","product_id":100029001,"comment_content":"l看完有一些疑问：<br>1. 在对称加密中。当给报文加密后，为什么需要交换秘钥。难道对方不知道吗。秘钥不都是一样的吗。<br>2. 非对称加密中，为什么就不需要交换秘钥呢。<br><br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":569718,"discussion_content":"1.密钥当然是不知道的，不交换怎么能够知道呢？\n2.非对称算法里公钥公开，随意发放，自然就没有交换的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1651539938,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":337167,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1646657659,"is_pvip":false,"replies":[{"id":"123258","content":"非对称算法本身解决了公钥分发的问题，当然是公钥，私钥必须保密，然后再进一步也解决了非对称会话密钥交换的问题。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1646726535,"ip_address":"","comment_id":337167,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1646657659","product_id":100029001,"comment_content":"请问下 老师 。非对称加密可以解决“密钥交换”的问题 这个语境下的密钥交换指的是交换公钥还是交换私钥呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":555050,"discussion_content":"非对称算法本身解决了公钥分发的问题，当然是公钥，私钥必须保密，然后再进一步也解决了非对称会话密钥交换的问题。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646726536,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1966533,"avatar":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","nickname":"cake","note":"","ucode":"55A7FC6CC1204C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":555052,"discussion_content":"perfect\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1646727018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":555050,"ip_address":""},"score":555052,"extra":""}]}]},{"had_liked":false,"id":335264,"user_name":"Mr.Panda","can_delete":false,"product_type":"c1","uid":1238864,"ip_address":"","ucode":"655A3013B5E849","user_header":"https://static001.geekbang.org/account/avatar/00/12/e7/50/d476ed6c.jpg","comment_is_top":false,"comment_ctime":1645431768,"is_pvip":false,"replies":[{"id":"122508","content":"私钥必须保密，不能对外，这个是非对称算法的基本原则，交换的只能是公钥。<br><br>需要再把公私钥的用途，应用场合仔细想想，推演一下。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1645534353,"ip_address":"","comment_id":335264,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645431768","product_id":100029001,"comment_content":"老师，这里有个疑问，密钥交换问题就是如何解决将用于解密的秘钥安全地给到对方。<br>非对称加密，产生的公钥、私钥，虽然可以解决会话密钥交换的问题，那私钥如何实现密钥交换呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552636,"discussion_content":"私钥必须保密，不能对外，这个是非对称算法的基本原则，交换的只能是公钥。\n\n需要再把公私钥的用途，应用场合仔细想想，推演一下。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645534354,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334983,"user_name":"hzs","can_delete":false,"product_type":"c1","uid":1808206,"ip_address":"","ucode":"6844D91F80286E","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/Q0j4TwGTfTJoOia8n2xdlIAZkJJZ9hflv3rMENqGGuxYRSsYE8bIpXiaQfAbfH7qVmiaJAyVEiaEj6sP9BRlIWWqRA/132","comment_is_top":false,"comment_ctime":1645239060,"is_pvip":false,"replies":[{"id":"122370","content":"是的，第一步的意思就是选择一种非对称算法，也就是协商密码套件，可以看后面的tls握手讲解。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1645327002,"ip_address":"","comment_id":334983,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645239060","product_id":100029001,"comment_content":"这就是现在 TLS 里使用的混合加密方式，其实说穿了也很简单：<br>1、在通信刚开始的时候使用非对称算法，比如 RSA、ECDHE，首先解决密钥交换的问题。<br>2、然后用随机数产生对称算法使用的“会话密钥”（session key），再用公钥加密。因为会话密钥很短，通常只有 16 字节或 32 字节，所以慢一点也无所谓。<br>3、对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换，后续就不再使用非对称加密，全都使用对称加密。<br>===================<br>上面为原文最后内容。<br>老师，请问一下第一步是什么意思，第一步中的非对称密钥加密不是用来加密会话密钥的吗？<br><br><br><br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552149,"discussion_content":"是的，第一步的意思就是选择一种非对称算法，也就是协商密码套件，可以看后面的tls握手讲解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645327002,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":334927,"user_name":"ly","can_delete":false,"product_type":"c1","uid":1221628,"ip_address":"","ucode":"5E2B85252DABF3","user_header":"https://static001.geekbang.org/account/avatar/00/12/a3/fc/379387a4.jpg","comment_is_top":false,"comment_ctime":1645185414,"is_pvip":false,"replies":[{"id":"122369","content":"cbc已经不安全了，最好用tls1.3里的那几种算法，比如aes-gcm。<br><br>想要了解cbc可以去看tls1.2和其他相关的rfc。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1645326936,"ip_address":"","comment_id":334927,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1645185414","product_id":100029001,"comment_content":"老师，目前公司有个应用，用的是AES加密，用的CBC分组，是128位加密，好像这种加密还需要设置一个偏移量，这个偏移量是随便设置的吗，是否有什么规范呢。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":552148,"discussion_content":"cbc已经不安全了，最好用tls1.3里的那几种算法，比如aes-gcm。\n\n想要了解cbc可以去看tls1.2和其他相关的rfc。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1645326936,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":328578,"user_name":"fmouse","can_delete":false,"product_type":"c1","uid":1202325,"ip_address":"","ucode":"9A8858CFFAB858","user_header":"https://static001.geekbang.org/account/avatar/00/12/58/95/640b6465.jpg","comment_is_top":false,"comment_ctime":1640779117,"is_pvip":false,"replies":[{"id":"119718","content":"是的，非对称算法不需要密钥交换，这里的密钥交换就是指对称算法的会话密钥。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1640827306,"ip_address":"","comment_id":328578,"utype":1}],"discussion_count":3,"race_medal":2,"score":"1640779117","product_id":100029001,"comment_content":"原文“这就是现在 TLS 里使用的混合加密方式，其实说穿了也很简单：在通信刚开始的时候使用非对称算法，比如 RSA、ECDHE，首先解决密钥交换的问题。然后用随机数产生对称算法使用的“会话密钥”（session key），再用公钥加密。因为会话密钥很短，通常只有 16 字节或 32 字节，所以慢一点也无所谓。对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换，后续就不再使用非对称加密，全都使用对称加密。”<br><br>文中“首先解决密钥交换的问题”，这里的密钥是哪个密钥，公钥不需要非对称加密来交换吧。这里的密钥是指什么？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542675,"discussion_content":"是的，非对称算法不需要密钥交换，这里的密钥交换就是指对称算法的会话密钥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640827306,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":1,"child_discussions":[{"author":{"id":1202325,"avatar":"https://static001.geekbang.org/account/avatar/00/12/58/95/640b6465.jpg","nickname":"fmouse","note":"","ucode":"9A8858CFFAB858","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"discussion":{"id":542810,"discussion_content":"老师，这里首先…然后…再用…的语句不好理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640851679,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":542675,"ip_address":""},"score":542810,"extra":""}]},{"author":{"id":1202325,"avatar":"https://static001.geekbang.org/account/avatar/00/12/58/95/640b6465.jpg","nickname":"fmouse","note":"","ucode":"9A8858CFFAB858","race_medal":2,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":542681,"discussion_content":"老师，这里首先…然后…再用…的语句，首先就已经解决了对称加密密钥交换问题，后面用然后不太好吧。可能是我咬文嚼字了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1640827599,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":326996,"user_name":"cake","can_delete":false,"product_type":"c1","uid":1966533,"ip_address":"","ucode":"55A7FC6CC1204C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/01/c5/b48d25da.jpg","comment_is_top":false,"comment_ctime":1639821906,"is_pvip":false,"replies":[{"id":"119018","content":"这里是早期的rsa密钥交换过程，使用公钥加密会话密钥，对方再私钥解密。<br><br>但随着密码学的发展，这种方式不够安全，不能够支持前向保密，所以目前基本上都用ecdhe算法来交换密钥了，也就是25讲里的过程。<br><br>我们需要了解密钥交换的核心理念，具体怎么做会因为算法而不同。","user_name":"作者回复","user_name_real":"编辑","uid":"1181974","ctime":1639985601,"ip_address":"","comment_id":326996,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1639821906","product_id":100029001,"comment_content":"对方拿到密文后用私钥解密，取出会话密钥。这样，双方就实现了对称密钥的安全交换，后续就不再使用非对称加密，全都使用对称加密  老师请问下你在TLS1.2 握手那篇文章答疑时说的不会交换拓展出来的会话密钥么？<br><br>你在那篇的答疑如下  因为客户端和服务器都共享了master secret，所以两边可以一致地生成多个密钥，比如key1、key2、key3，两边完全一样，本质上都是master secret，这样比如客户端发数据用key1加密，服务器就用key1解密；服务器发数据不用key1，而是用key2加密，客户端收到数据用key2解密。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":540194,"discussion_content":"这里是早期的rsa密钥交换过程，使用公钥加密会话密钥，对方再私钥解密。\n\n但随着密码学的发展，这种方式不够安全，不能够支持前向保密，所以目前基本上都用ecdhe算法来交换密钥了，也就是25讲里的过程。\n\n我们需要了解密钥交换的核心理念，具体怎么做会因为算法而不同。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1639985601,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":320293,"user_name":"Edison","can_delete":false,"product_type":"c1","uid":1135701,"ip_address":"","ucode":"734A561F363720","user_header":"https://static001.geekbang.org/account/avatar/00/11/54/55/613ddc42.jpg","comment_is_top":false,"comment_ctime":1636206130,"is_pvip":false,"replies":[{"id":"116142","content":"就是生成随机数，比如rsa就是两个随机的质数，然后根据算法生成公钥私钥。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1636275654,"ip_address":"","comment_id":320293,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1636206130","product_id":100029001,"comment_content":"老师，非对称加密中的公钥和私钥是怎么产生的","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":529943,"discussion_content":"就是生成随机数，比如rsa就是两个随机的质数，然后根据算法生成公钥私钥。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1636275654,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":306427,"user_name":"Stitch","can_delete":false,"product_type":"c1","uid":1949818,"ip_address":"","ucode":"FCBA3C67404291","user_header":"https://static001.geekbang.org/account/avatar/00/1d/c0/7a/d825744f.jpg","comment_is_top":false,"comment_ctime":1628560577,"is_pvip":false,"replies":[{"id":"110951","content":"用现实中的钥匙和锁来比喻密码学，虽然可以帮助理解，但毕竟两者不能完全对应，所以在有了一些初步认识之后还是要尽量抛弃比喻，用密码学知识来思考。<br><br>在对称算法中，钥匙相当于密钥，而算法相当于是锁，这个是没问题的，但非对称算法就不太好找现实中的例子，即使有也会比较勉强。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1628576223,"ip_address":"","comment_id":306427,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1628560577","product_id":100029001,"comment_content":"看了三四遍了 才渐渐明白其中的密钥的意思这里大概总结一下第一个问题：“加密算法中“密钥”的名字很形象，你能试着用现实中的锁和钥匙来比喻一下吗？”<br><br><br><br>1. 如果当前是对称加密<br>对称加密 就是大家用同一把相同纹理的钥匙解开一把锁。形象一点说就是：<br><br>a 和 b 两个人拥有同一把钥匙，当a 需要将一个秘密传递给b 的时候 他只需要将秘密放到一个盒子里 再锁上一把锁 然后把盒子交给b。b 用一把和a 一样的钥匙解开盒子获得了秘密。<br><br>这里的秘密就是我们交互的内容 而锁则是加密算法 用钥匙锁上秘密就是加密，另一个人用钥匙打开就是解密。<br><br>但是对称加密需要双方共用一把钥匙 如果在钥匙传递的时候被人拿走了 就会导致内容被别人破解。所以有了混合加密<br><br><br>2. 混合加密<br>混合加密是将非对称加密和对称加密mix 起来，同时带上对应的会话密钥。具体一点来说是这样的。<br><br><br>a 和 b 两个人要交换秘密。a 首先会准备两个盒子 一个放着解开秘密内容盒子的钥匙 而另外一个放着秘密内容。在开始交换秘密的时候，a 先将打开秘密盒子的钥匙放到盒子里用公钥锁住盒子顺便将锁住的钥匙丢到里面去，这个盒子一旦被锁上就必须用私钥解开。然后再将秘密放到另外一个盒子里面锁上。然后同时给b 发两个盒子。b 收到盒子的时候 必须用私钥解开存放公钥的盒子获取解开秘密内容盒子的钥匙，获取之后再打开秘密内容。<br><br><br><br>以上存粹个人脑洞 可能还有一点不严谨的地方 希望老师指正","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":524759,"discussion_content":"用现实中的钥匙和锁来比喻密码学，虽然可以帮助理解，但毕竟两者不能完全对应，所以在有了一些初步认识之后还是要尽量抛弃比喻，用密码学知识来思考。\n\n在对称算法中，钥匙相当于密钥，而算法相当于是锁，这个是没问题的，但非对称算法就不太好找现实中的例子，即使有也会比较勉强。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1628576223,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":299146,"user_name":"includestdio.h","can_delete":false,"product_type":"c1","uid":2314854,"ip_address":"","ucode":"5027BACE9319CD","user_header":"https://static001.geekbang.org/account/avatar/00/23/52/66/3e4d4846.jpg","comment_is_top":false,"comment_ctime":1624493193,"is_pvip":true,"replies":[{"id":"108482","content":"<br>1的理解有点偏差，算法相当于锁，密钥相当于钥匙<br><br>2.基本正确，私钥加密还可以同实现防抵赖。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1624496182,"ip_address":"","comment_id":299146,"utype":1}],"discussion_count":1,"race_medal":4,"score":"1624493193","product_id":100029001,"comment_content":"1.不知道密钥是不是可以这样理解，密钥就是一个锁加一个钥匙，在对称加密中，服务端自己保留一个钥匙和锁，同时发给客户端一个锁和钥匙，服务端用锁加密传输给客户端，客户端用自己持有的钥匙解密，然后再用自己的锁加密，传输给服务端，服务端再用自己的钥匙解密，在这个过程中，服务端和客户端均分别持有锁和钥匙，且锁和钥匙一样<br><br>2.公钥加密是考虑数据机密，做加解密，私钥加密是为了做身份验证，告诉客户端这个数据来自可信的服务端","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":522347,"discussion_content":"\n1的理解有点偏差，算法相当于锁，密钥相当于钥匙\n\n2.基本正确，私钥加密还可以同实现防抵赖。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1624496182,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":293247,"user_name":"首富手记","can_delete":false,"product_type":"c1","uid":1286588,"ip_address":"","ucode":"879DED4078303C","user_header":"https://static001.geekbang.org/account/avatar/00/13/a1/bc/ef0f26fa.jpg","comment_is_top":false,"comment_ctime":1621303981,"is_pvip":true,"replies":[{"id":"106134","content":"会话密钥是客户端本地生成的，它是一个随机数，用公钥加密就保证了传输的安全，只有对应的私钥才能解密。<br><br>当然这个过程还是比较简单的，可以看后面的tls协议。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1621311806,"ip_address":"","comment_id":293247,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1621303981","product_id":100029001,"comment_content":"老师，我简单想了一下这个流程但是有一点不是很清楚，希望老师给予解答？<br>1, 服务端发送公钥给客户端<br>2，客户端拿到公钥之后加密对称加密的秘钥。发送给服务端，<br>3，因为只有服务端有私钥，只有他再能解密，保证安全。<br>4，服务端获取到对称加密的秘钥只有开始通过对称加密和客户端实行加密通信。<br>但是在上面这个流程中，对称加密是有客户端发起的，但是在实际的情况中是由客户端发起对称加密的秘钥生成，还是客户端呢？ 如果是服务端那么如何保证秘钥安全呢？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":520131,"discussion_content":"会话密钥是客户端本地生成的，它是一个随机数，用公钥加密就保证了传输的安全，只有对应的私钥才能解密。\n\n当然这个过程还是比较简单的，可以看后面的tls协议。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621311806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1286588,"avatar":"https://static001.geekbang.org/account/avatar/00/13/a1/bc/ef0f26fa.jpg","nickname":"首富手记","note":"","ucode":"879DED4078303C","race_medal":0,"user_type":1,"is_pvip":true},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":374710,"discussion_content":"我又总结了下。HTTPS加密过程，HTTPS采用混合加密算法，即对称加密、和非对称加密\n通信前准备工作：申请域名对应的证书，并将其部署在Nginx服务器中。\n1) 第一步客户端向服务端发送 Client Hello 消息，这个消息里包含了一个客户端生成的随机数 Random1、客户端支持的加密套件 和 客户端支持TLS协议版本等信息。\n2) 服务端会向客户端发送 Server Hello 消息。返回自己的公钥证书、挑选一个合适的加密套件、另外还会生成一份随机数 Random2推送给客户端。至此客户端和服务端都拥有了两个随机数（Random1+ Random2）\n3) 客户端收到服务端传来的公钥证书后，先从 CA 验证该证书的合法性（CA公钥去解密公钥证书），验证通过后取出证书中的服务端公钥，再生成一个随机数 Random3，再用服务端公钥非对称加密 Random3。\n4) 服务端用自己的私钥解出客户端生成的 Random3。至此，客户端和服务端都拥有 Random1 + Random2 + Random3，两边根据同样的算法生成一份秘钥，握手结束后的应用层数据都是使用这个秘钥进行对称加密。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1621322550,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":289382,"user_name":"zs","can_delete":false,"product_type":"c1","uid":1116790,"ip_address":"","ucode":"9B8C10E030E5DD","user_header":"https://static001.geekbang.org/account/avatar/00/11/0a/76/b621772b.jpg","comment_is_top":false,"comment_ctime":1618993135,"is_pvip":false,"replies":[{"id":"105037","content":"great。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1619074286,"ip_address":"","comment_id":289382,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1618993135","product_id":100029001,"comment_content":"1、锁就是加密算法，密文就是被锁好的盒子，密钥就是可以打开锁的钥匙，密文+加密算法+密钥才能还原明文，<br>对称加密就是用同样的钥匙关锁、开锁。<br>非对称加密就是开锁是一把钥匙，关锁是一把钥匙，两把钥匙互斥，不能用一把钥匙即关锁又开锁。<br>2、非对称加密如果反着过来用是可以做身份认证的，一段用私钥加密了密文，如果可以被用其发布的公钥解密的话，就说明发布密文的服务是拥有私钥本服务，发布信息的对象没有被假冒。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":518900,"discussion_content":"great。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1619074286,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":286176,"user_name":"泰一","can_delete":false,"product_type":"c1","uid":1757959,"ip_address":"","ucode":"D85C764BA108CE","user_header":"https://static001.geekbang.org/account/avatar/00/1a/d3/07/5fc3c694.jpg","comment_is_top":false,"comment_ctime":1617178906,"is_pvip":false,"replies":[{"id":"103899","content":"都在这个相应的GitHub上，课程里应该也给出来了，就是24-3.lua。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1617240369,"ip_address":"","comment_id":286176,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1617178906","product_id":100029001,"comment_content":"想问下老师，AES和RSA性能对比测试的源码可以给出来嘛","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517896,"discussion_content":"都在这个相应的GitHub上，课程里应该也给出来了，就是24-3.lua。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1617240369,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":283819,"user_name":"杨冬武","can_delete":false,"product_type":"c1","uid":1800054,"ip_address":"","ucode":"87D414D3F90F85","user_header":"https://static001.geekbang.org/account/avatar/00/1b/77/76/739a173e.jpg","comment_is_top":false,"comment_ctime":1615947254,"is_pvip":false,"replies":[{"id":"102982","content":"感谢支持和鼓励。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1615983468,"ip_address":"","comment_id":283819,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1615947254","product_id":100029001,"comment_content":"老师做技术真的是严谨认真，实事求是，和您不光学到了技术，也学到了作为一名技术人应有的学习态度，赞！","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":517155,"discussion_content":"感谢支持和鼓励。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1615983468,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":278914,"user_name":"乘风破浪","can_delete":false,"product_type":"c1","uid":2406841,"ip_address":"","ucode":"937AF15F3FEBDC","user_header":"https://static001.geekbang.org/account/avatar/00/24/b9/b9/9e4d7aa4.jpg","comment_is_top":false,"comment_ctime":1613460698,"is_pvip":false,"replies":[{"id":"101379","content":"嗯，我的密码学知识是十多年前的了，用词可能不是太准确。但我觉得这个链接里说的可能也不是太对。<br><br>不过只有AES、chacha是加密算法，而ECB&#47;CBC&#47;AEAD都是对这些算法的应用，建议去维基百科上看权威的解释。<br><br>https:&#47;&#47;zh.wikipedia.org&#47;wiki&#47;分组密码工作模式","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1613524913,"ip_address":"","comment_id":278914,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1613460698","product_id":100029001,"comment_content":"最新的分组模式被称为 AEAD（Authenticated Encryption with Associated Data），在加密的同时增加了认证的功能，常用的是 GCM、CCM 和 Poly1305。<br>---罗大师，根据下面这篇文章，感觉AEAD不是分组模式，而是说的加密算法，比如AES,chacha都是AEAD的加密算法，即解决是否用错误秘钥解密的问题。<br>https:&#47;&#47;zhuanlan.zhihu.com&#47;p&#47;28566058","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":515558,"discussion_content":"嗯，我的密码学知识是十多年前的了，用词可能不是太准确。但我觉得这个链接里说的可能也不是太对。\n\n不过只有AES、chacha是加密算法，而ECB/CBC/AEAD都是对这些算法的应用，建议去维基百科上看权威的解释。\n\nhttps://zh.wikipedia.org/wiki/分组密码工作模式","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1613524913,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":275716,"user_name":"Reborn 2.0","can_delete":false,"product_type":"c1","uid":1977474,"ip_address":"","ucode":"BA506E7455D91C","user_header":"https://static001.geekbang.org/account/avatar/00/1e/2c/82/98e2b82a.jpg","comment_is_top":false,"comment_ctime":1611651623,"is_pvip":false,"replies":[{"id":"100090","content":"<br>1.对称算法的理解正确，不过现实中好像也有类似非对称算法的钥匙。<br><br>2.私钥加密的目的不是保密，而是验证私钥持有者的身份，可以继续往后看。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1611709864,"ip_address":"","comment_id":275716,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611651623","product_id":100029001,"comment_content":"课后作业:<br>1. 对称加密算法里的密钥是普通的钥匙, 对于原文来说, 密钥可以加密解密. 非对称加密算法里的公私钥自己加密的只能对方解开, 不像是钥匙.<br>2. 混合加密中: 公钥加密, 私钥解密, 避免被其他持有公钥的人解密自己的请求.  私钥加密公钥解密, 服务器发出去大家都可以看内容. 这个我不明白, 这样拦截后不久泄密了??","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514450,"discussion_content":"\n1.对称算法的理解正确，不过现实中好像也有类似非对称算法的钥匙。\n\n2.私钥加密的目的不是保密，而是验证私钥持有者的身份，可以继续往后看。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611709864,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":274490,"user_name":"💻","can_delete":false,"product_type":"c1","uid":2340391,"ip_address":"","ucode":"91DA148F3675EB","user_header":"https://static001.geekbang.org/account/avatar/00/23/b6/27/91d81a08.jpg","comment_is_top":false,"comment_ctime":1611036748,"is_pvip":false,"replies":[{"id":"99659","content":"目前最常用的做法，也就是ECDHE，是在每次握手协商的时候都会生成一个临时的公私钥对，交换完会话秘钥后就“扔掉”，不再使用，以实现“前向安全”。<br><br>如果是用老的rsa算法，那么公钥是固定的，这就增大了被破解的风险。<br><br>如果用ecdhe，那么公私钥对是“协商”，用算法产生的，如果是rsa，那么公钥是服务器的证书里给的。<br><br>可以看后面的tls握手过程，我觉得讲的还算是清楚，不明白再问。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1611104996,"ip_address":"","comment_id":274490,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1611036748","product_id":100029001,"comment_content":"老师，你好，我想问一下，公钥是每个浏览器去访问服务器都会协商或者生成一个唯一的公钥的吗?<br><br>公钥是服务器给的还是浏览器自己可以生成的?","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":514034,"discussion_content":"目前最常用的做法，也就是ECDHE，是在每次握手协商的时候都会生成一个临时的公私钥对，交换完会话秘钥后就“扔掉”，不再使用，以实现“前向安全”。\n\n如果是用老的rsa算法，那么公钥是固定的，这就增大了被破解的风险。\n\n如果用ecdhe，那么公私钥对是“协商”，用算法产生的，如果是rsa，那么公钥是服务器的证书里给的。\n\n可以看后面的tls握手过程，我觉得讲的还算是清楚，不明白再问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1611104996,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":267987,"user_name":"忠于","can_delete":false,"product_type":"c1","uid":1616882,"ip_address":"","ucode":"714678985D920E","user_header":"https://static001.geekbang.org/account/avatar/00/18/ab/f2/395ebcf5.jpg","comment_is_top":false,"comment_ctime":1608020763,"is_pvip":false,"replies":[{"id":"97347","content":"理解的不太对。<br><br>公钥加密后虽然谁都可以拿到，但只有私钥才能解密，这个就是非对称的关键。<br><br>所以只有私钥持有人才能解密公钥加密的数据，安全性就有保证。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1608088750,"ip_address":"","comment_id":267987,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1608020763","product_id":100029001,"comment_content":"老师，非对称加密使用公钥加密后，任何人都可以拿到加密后的密文去进行解密，那么我怎么保证只有对方的私钥能解出来呢","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":511807,"discussion_content":"理解的不太对。\n\n公钥加密后虽然谁都可以拿到，但只有私钥才能解密，这个就是非对称的关键。\n\n所以只有私钥持有人才能解密公钥加密的数据，安全性就有保证。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1608088750,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":3014444,"avatar":"https://thirdwx.qlogo.cn/mmopen/vi_32/Q3auHgzwzM74658w9PQeTM4TcM14BzfpJnVLrsciaS26ibRwRbCE09ydI6UlZhFrJh7iaVLp2xxhBppVDKLyRRg9Q/132","nickname":"Geek_21a73c","note":"","ucode":"104A4AD89DA6BC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":575374,"discussion_content":"得到公钥后，可以再用公钥加密一次嘛——攻击者能这样嘛","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1654779774,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":261751,"user_name":"悦空","can_delete":false,"product_type":"c1","uid":1613808,"ip_address":"","ucode":"9559CCBB3033AE","user_header":"https://static001.geekbang.org/account/avatar/00/18/9f/f0/9b59c373.jpg","comment_is_top":false,"comment_ctime":1605512537,"is_pvip":false,"replies":[{"id":"95003","content":"理解的基本正确，但要注意，现实中的锁和密码学中的加密解密还是有点差距的，先形象理解，后面再逐渐加深认识。","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1605519777,"ip_address":"","comment_id":261751,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1605512537","product_id":100029001,"comment_content":"老师，关于对称加密和非对称加密，我理解的是<br> 一个锁，反锁和打开锁用的都是同一把钥匙，是对称加密。<br>反锁和开锁用的是不同的钥匙操作，反锁门的钥匙打不开锁，开锁的钥匙反锁不了门，是非对称加密，<br>不知道是否理解的正确？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":509593,"discussion_content":"理解的基本正确，但要注意，现实中的锁和密码学中的加密解密还是有点差距的，先形象理解，后面再逐渐加深认识。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1605519777,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":242670,"user_name":"may_huang","can_delete":false,"product_type":"c1","uid":1451623,"ip_address":"","ucode":"EAF989F18FC109","user_header":"https://static001.geekbang.org/account/avatar/00/16/26/67/c3d90f46.jpg","comment_is_top":false,"comment_ctime":1597807331,"is_pvip":true,"replies":[{"id":"89538","content":"私钥只能自己持有，所以客户端和服务器两者的私钥必须是不同的，也不能交换，交换的是公钥。<br><br>具体交换的方法见后面的ssl&#47;tls协议解析。<br>","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1597885078,"ip_address":"","comment_id":242670,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1597807331","product_id":100029001,"comment_content":"有个问题，非对称加密中密钥交换，用公钥加密私钥解密，客户端的私钥和服务端的私钥是一样的吗？如果是一样？怎么进行私钥交换的？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":504070,"discussion_content":"私钥只能自己持有，所以客户端和服务器两者的私钥必须是不同的，也不能交换，交换的是公钥。\n\n具体交换的方法见后面的ssl/tls协议解析。\n","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1597885078,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":222540,"user_name":"james","can_delete":false,"product_type":"c1","uid":1232771,"ip_address":"","ucode":"AC42035106E5B9","user_header":"http://thirdwx.qlogo.cn/mmopen/vi_32/yyibGRYCArsUNBfCAEAibua09Yb9D5AdO8TkCmXymhAepibqmlz0hzg06ggBLxyvXicnjqFVGr7zYF0rQoZ0aXCBAg/132","comment_is_top":false,"comment_ctime":1590830561,"is_pvip":false,"replies":[{"id":"82056","content":"nice","user_name":"作者回复","user_name_real":"罗剑锋","uid":"1181974","ctime":1590839142,"ip_address":"","comment_id":222540,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1590830561","product_id":100029001,"comment_content":"1、密钥就相当于现实生活中的钥匙，加密算法相当于现实生活中的锁，通过钥匙来上锁和解锁。公私钥相当于A上的锁只能B解锁，B上的锁只能A解锁，但一般A会分发出去有多份。<br>2、私钥加密，公钥解密，这个是用来做身份认证，能解开说明是私钥持有者发给我的。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496835,"discussion_content":"nice","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590839142,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":219997,"user_name":"我母鸡啊！","can_delete":false,"product_type":"c1","uid":1633705,"ip_address":"","ucode":"7BFB14BC99E978","user_header":"https://static001.geekbang.org/account/avatar/00/18/ed/a9/662318ab.jpg","comment_is_top":false,"comment_ctime":1590133382,"is_pvip":false,"replies":[{"id":"81210","content":"不是太准确，在密码学里是没有服务端概念的，可以参考一下其他同学的回答。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1590136018,"ip_address":"","comment_id":219997,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1590133382","product_id":100029001,"comment_content":"1.加密算法中“密钥”的名字很形象，你能试着用现实中的锁和钥匙来比喻一下吗？<br>锁就是服务端，钥匙就是传递的密钥。<br><br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":496019,"discussion_content":"不是太准确，在密码学里是没有服务端概念的，可以参考一下其他同学的回答。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1590136018,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205643,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1586694695,"is_pvip":false,"replies":[{"id":"76908","content":"<br>1.在tls握手过程中不能直接用公钥，正如你所说，可能会被伪造，所以要用证书来身份认证，确保安全。<br><br>2.可以看后面的课，专门讲TLS1.3。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586743438,"ip_address":"","comment_id":205643,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586694695","product_id":100029001,"comment_content":"又看了一遍，感觉有新的认识了。<br>1.客户端持有私钥，在TLS握手过程中先给公钥到服务器，服务器生成对称加密用的密钥并用公钥加密返回给客户端，但是公钥是公开的，任何人都可以发给客户端一个对称加密用的密钥，所以需要后续的身份认证？<br>2.小贴士最后的TLS1.3 的WITH前面没有了非对称加密的算法名？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491539,"discussion_content":"\n1.在tls握手过程中不能直接用公钥，正如你所说，可能会被伪造，所以要用证书来身份认证，确保安全。\n\n2.可以看后面的课，专门讲TLS1.3。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586743438,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":205388,"user_name":"张三","can_delete":false,"product_type":"c1","uid":1004092,"ip_address":"","ucode":"1155528FAE1546","user_header":"https://static001.geekbang.org/account/avatar/00/0f/52/3c/d6fcb93a.jpg","comment_is_top":false,"comment_ctime":1586605729,"is_pvip":false,"replies":[{"id":"76735","content":"keep going。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1586646883,"ip_address":"","comment_id":205388,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1586605729","product_id":100029001,"comment_content":"太好了！最近都在做的项目需要给代理服务器配置https，遇到一堆问题，还有一些旧服务器证书更新的问题，借这个机会好好学一下相关知识","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":491468,"discussion_content":"keep going。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1586646883,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":181880,"user_name":"张三丰","can_delete":false,"product_type":"c1","uid":1155275,"ip_address":"","ucode":"3A6215A40B3B21","user_header":"https://static001.geekbang.org/account/avatar/00/11/a0/cb/aab3b3e7.jpg","comment_is_top":false,"comment_ctime":1582657066,"is_pvip":false,"replies":[{"id":"70432","content":"是稍微有点没说清楚，我的意思是要先选择非对称算法，这是开始安全通信的基础。<br><br>可以参考后面的tls握手过程，它把混合密钥机制给标准化了。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1582679909,"ip_address":"","comment_id":181880,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1582657066","product_id":100029001,"comment_content":"“在通信刚开始的时候使用非对称算法，比如 RSA、ECDHE，首先解决密钥交换的问题。<br>然后用随机数产生对称算法使用的“会话密钥”（session key），再用公钥加密。因为会话密钥很短，通常只有 16 字节或 32 字节，所以慢一点也无所谓。“<br><br><br>老师这些话看起来有点模糊，应该是先通过随机数生成会话秘钥，再通过该会话秘钥使用对称加密算法对传输内容加密，然后在通过非对称加密算法对会话秘钥进行加密，然后将加密后的两者进行传输，到达服务端后，服务端通过非对称算法对会话秘钥解密，拿到会话秘钥后，通过对称加密算法再使用其对加密的传输内容解密。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":485152,"discussion_content":"是稍微有点没说清楚，我的意思是要先选择非对称算法，这是开始安全通信的基础。\n\n可以参考后面的tls握手过程，它把混合密钥机制给标准化了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1582679909,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":178153,"user_name":"青莲居士","can_delete":false,"product_type":"c1","uid":1374087,"ip_address":"","ucode":"DF269017EDD391","user_header":"https://static001.geekbang.org/account/avatar/00/14/f7/87/e7085d32.jpg","comment_is_top":false,"comment_ctime":1581598739,"is_pvip":false,"replies":[{"id":"69134","content":"1.不太对，第2、4步是错的，要先密钥交换，就是第1步的随机数，双方都确定使用相同的会话密钥后才是加密通信。<br><br>2.通常都使用证书，里面包含公钥。<br><br>3.公钥和私钥当然是成对的，公钥可以在外界任意发布，谁都可以持有，而私钥必须是服务器秘密保管，用来证明自己的身份，只能它自己持有。<br><br>4.建议你再结合后面的tls握手过程仔细学习，有点绕，但只要多读认真看就能理解。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1581642714,"ip_address":"","comment_id":178153,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1581598739","product_id":100029001,"comment_content":"1、首选生成随机数<br>2、再使用对称加密的方式 加密 传输报文<br>3、再用公钥（非对称加密）加密随机数<br>4、把加密后的随机数 与 加密后的报文 一同发送给服务器<br>5、服务器用私钥解密 加密后的随机数<br>6、在用解密后的随机数 解密 报文<br><br><br>问题1、老师麻烦看下，我上面的理解的正确吗 ？<br>问题2、TLS 的公钥是哪里来的 ？是跟证书一起颁发的 ？<br>问题3、如果是跟证书一起颁发，那么每个客户端用的都是一个相同的公钥，那么服务端也是保存了一个私钥 ？<br>","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":483685,"discussion_content":"1.不太对，第2、4步是错的，要先密钥交换，就是第1步的随机数，双方都确定使用相同的会话密钥后才是加密通信。\n\n2.通常都使用证书，里面包含公钥。\n\n3.公钥和私钥当然是成对的，公钥可以在外界任意发布，谁都可以持有，而私钥必须是服务器秘密保管，用来证明自己的身份，只能它自己持有。\n\n4.建议你再结合后面的tls握手过程仔细学习，有点绕，但只要多读认真看就能理解。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1581642714,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":173621,"user_name":"Daiver","can_delete":false,"product_type":"c1","uid":1466447,"ip_address":"","ucode":"9B1A03AFBC79BC","user_header":"https://static001.geekbang.org/account/avatar/00/16/60/4f/db0e62b3.jpg","comment_is_top":false,"comment_ctime":1579619133,"is_pvip":false,"replies":[{"id":"67326","content":"good。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1579672759,"ip_address":"","comment_id":173621,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1579619133","product_id":100029001,"comment_content":"https会涉及到rsa、aes加密技术，使用rsa交换三个随机数，双方再用约定好的加密方式生成aes密钥，这样双方就可以使用这个密钥加解密传输的内容了。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":482142,"discussion_content":"good。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1579672759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":170852,"user_name":"Wr","can_delete":false,"product_type":"c1","uid":1713790,"ip_address":"","ucode":"738B316AA2AD66","user_header":"https://static001.geekbang.org/account/avatar/00/1a/26/7e/823c083e.jpg","comment_is_top":false,"comment_ctime":1578740070,"is_pvip":false,"replies":[{"id":"66348","content":"<br>1.不对，密钥就是钥匙，而加密和解密是上锁和开锁的动作。上锁和开锁必须要有钥匙，锁就是加密算法。<br><br>2.对。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1578877590,"ip_address":"","comment_id":170852,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578740070","product_id":100029001,"comment_content":"1、加密的一方是锁，解密的一方是钥匙<br>2、问题2在后面看到老师的答复中一句话，总结的非常好：私钥加密的作用是签名，实现身份认证而不是数据保密，签名是公开的，所以不存在安全问题","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":481138,"discussion_content":"\n1.不对，密钥就是钥匙，而加密和解密是上锁和开锁的动作。上锁和开锁必须要有钥匙，锁就是加密算法。\n\n2.对。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578877590,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":169247,"user_name":"Khirye","can_delete":false,"product_type":"c1","uid":1080985,"ip_address":"","ucode":"6C54C126FA54B8","user_header":"https://static001.geekbang.org/account/avatar/00/10/7e/99/c4302030.jpg","comment_is_top":false,"comment_ctime":1578300941,"is_pvip":false,"replies":[{"id":"65699","content":"分组模式比较复杂，细讲感觉没有太多意义，主要是密码学方面的知识。<br><br>拿ECB来举例子，假设使用aes128，密钥长度是16字节，那么就把明文按16字节分组，然后每个分组用密钥加密。<br><br>其他的cbc、ofb等的方法类似，但细节不同，例如cbc增加了初始向量。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1578360759,"ip_address":"","comment_id":169247,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1578300941","product_id":100029001,"comment_content":"老师您好，分组模式这块有种一笔带过的感觉，能详细解释一下什么是分组模式吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":480479,"discussion_content":"分组模式比较复杂，细讲感觉没有太多意义，主要是密码学方面的知识。\n\n拿ECB来举例子，假设使用aes128，密钥长度是16字节，那么就把明文按16字节分组，然后每个分组用密钥加密。\n\n其他的cbc、ofb等的方法类似，但细节不同，例如cbc增加了初始向量。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1578360759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163411,"user_name":"Larry","can_delete":false,"product_type":"c1","uid":1623342,"ip_address":"","ucode":"3495A11DE756BA","user_header":"https://static001.geekbang.org/account/avatar/00/18/c5/2e/0326eefc.jpg","comment_is_top":false,"comment_ctime":1576718412,"is_pvip":false,"replies":[{"id":"62109","content":"<br>1.服务器会发送证书链，可参考后面的tls协议。<br><br>2.使用密钥交换算法，如果是rsa就是客户端生成，如果是ecdhe就是通信双方选择参数，使用算法生成。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1576719838,"ip_address":"","comment_id":163411,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576718412","product_id":100029001,"comment_content":"疑问：<br>1.非对称加密中，浏览器怎么拿到服务器的公钥？<br>2.对称加密中，是浏览器生成的密钥？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478385,"discussion_content":"\n1.服务器会发送证书链，可参考后面的tls协议。\n\n2.使用密钥交换算法，如果是rsa就是客户端生成，如果是ecdhe就是通信双方选择参数，使用算法生成。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576719838,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":163366,"user_name":"GitHubGanKai","can_delete":false,"product_type":"c1","uid":1477351,"ip_address":"","ucode":"BF6D6F8F3EED31","user_header":"https://static001.geekbang.org/account/avatar/00/16/8a/e7/a6c603cf.jpg","comment_is_top":false,"comment_ctime":1576713762,"is_pvip":false,"replies":[{"id":"62098","content":"非对称加密保证了对称密钥传输是安全的，所以加密密钥不会被黑客破解。后续的通信和加密即使有人窃听、劫持，拿到的也是被加密后的乱码，无法识别、解密，所以是安全的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1576716916,"ip_address":"","comment_id":163366,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1576713762","product_id":100029001,"comment_content":"老师，有一点不太清楚，就是，当开始的时候，使用非对称加密交换密钥之后，就开始使用对称加密进行通讯，我的疑问是，在以后的使用对称加密的过程中就不会被黑客劫持吗？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":478366,"discussion_content":"非对称加密保证了对称密钥传输是安全的，所以加密密钥不会被黑客破解。后续的通信和加密即使有人窃听、劫持，拿到的也是被加密后的乱码，无法识别、解密，所以是安全的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576716916,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":161023,"user_name":"lesserror","can_delete":false,"product_type":"c1","uid":1351076,"ip_address":"","ucode":"25A54D1165FCF6","user_header":"https://static001.geekbang.org/account/avatar/00/14/9d/a4/e481ae48.jpg","comment_is_top":false,"comment_ctime":1576082328,"is_pvip":false,"replies":[{"id":"61397","content":"<br>1&#47;2，是笔误，感谢指正。<br><br>3，计算机，全称是“电子数字计算机”，处理的都是数字。虽然我们常用的是各种字符（数字、字母、标点符号），但在计算机里都是用数字来表示的，所以说密钥就是数字。<br><br>4.可参考答疑篇，如果不清楚可以在那里提问。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1576111742,"ip_address":"","comment_id":161023,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1576082328","product_id":100029001,"comment_content":"老师，以下几个问题，麻烦看一下：<br>1. 举个例子，你想要登录某网站，只要事先和它约定好使用一个对称密码......  此处应该是对称密钥。<br>2. 以现在不再具有明显的优势，但仍然算得上是一个不错算法。 此处应该是不错的算法。<br>3. 由于 HTTPS、TLS 都运行在计算机上，所以“密钥”就是一长串的数字。我记得这里不是可以数字+字母的嘛？<br>4. 基于“整数分解”的数学难题、基于“椭圆曲线离散对数”的数学难题等等概念不是很清楚，咋办啊？感觉有点深奥。","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":477575,"discussion_content":"\n1/2，是笔误，感谢指正。\n\n3，计算机，全称是“电子数字计算机”，处理的都是数字。虽然我们常用的是各种字符（数字、字母、标点符号），但在计算机里都是用数字来表示的，所以说密钥就是数字。\n\n4.可参考答疑篇，如果不清楚可以在那里提问。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1576111742,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2032840,"avatar":"https://static001.geekbang.org/account/avatar/00/1f/04/c8/3c7af100.jpg","nickname":"Javatar","note":"","ucode":"E216645CDF632C","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":302981,"discussion_content":"问题3很好理解：比如一个十进制的数：24124234231，也就是241亿多\n\n转换成16进制是：59dea99f7，里面就有字母了。\n\n如果觉得这还不像，那么其实还有32进制，由0-9和a-v（10-31）组成\n\n那么转换过来就是：meul6fn。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1599103558,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":158643,"user_name":"夏目","can_delete":false,"product_type":"c1","uid":1212750,"ip_address":"","ucode":"67C075A01CF4D2","user_header":"https://static001.geekbang.org/account/avatar/00/12/81/4e/d71092f4.jpg","comment_is_top":false,"comment_ctime":1575426446,"is_pvip":false,"replies":[{"id":"60706","content":"<br>1说的不错。<br><br>2.没说到点上，你说的还是用公钥加密。私钥加密用来做公开的签名，可以参考后续的课程。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1575427315,"ip_address":"","comment_id":158643,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1575426446","product_id":100029001,"comment_content":"1、加密算法就像锁，密钥就是钥匙，大家都知道你是什么锁，不过没关系你没钥匙打不开<br>2、私钥加密的内容任何人用公钥都能打开，可以用两对公私钥，给对方发消息的时候用对方的公钥加密，只有对方的私钥才能解开对方的公钥加密","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":476792,"discussion_content":"\n1说的不错。\n\n2.没说到点上，你说的还是用公钥加密。私钥加密用来做公开的签名，可以参考后续的课程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1575427315,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":146660,"user_name":"李彬","can_delete":false,"product_type":"c1","uid":1564184,"ip_address":"","ucode":"7536C1DB114CBC","user_header":"https://static001.geekbang.org/account/avatar/00/17/de/18/b2635f3c.jpg","comment_is_top":false,"comment_ctime":1572596542,"is_pvip":false,"replies":[{"id":"56813","content":"理解的有些偏差，证书与ssh没有关系。<br><br>1.现在已经基本不使用sha1了，而是用sha-2。证书不是服务器自己签发的，是由ca颁发的，证书也是公开的，不需要加密。<br><br>2.基本正确。<br><br>会话密钥必须由服务器和客户端双方共同协商得出，简单的做法是一方用私钥加密，另一方用公钥解密。<br><br>完整的方法可参考后面两讲的TLS握手过程。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1572829759,"ip_address":"","comment_id":146660,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1572596542","product_id":100029001,"comment_content":"看了好几遍又查了资料，总结一下我的理解：<br>这个公钥和私钥是由SSH证书那边统一发给网站持有者，然后根据步骤配置好网站即可。具体在网址请求步骤如下：<br>1. 客户端对网站发起请求，双方明文交换公钥<br>     在服务器给客户端传送公钥的过程中，会把自己的公钥和服务器的信息通过哈希算法（一般是sha1）生成信息摘要--&gt;服务器用自己的私钥对摘要信息加密，形成数字签名--&gt;将没有经过算法处理的服务器信息、公钥、数字签名三合一，形成数字证书--&gt;服务器用客户端的公钥对信息内容和数字证书加密--&gt;发给客户端<br>2. 客户端用自己的私钥解密收到的数据--&gt;用服务器公钥对签名解密--&gt;把服务器的公钥和服务器的信息通过哈希算法生成信息摘要，和已解密的签名对比--&gt;若一致则开始安全传输，否则断开传输<br>有一个问题是，那个用于后期传输的对称加密的密钥，是这个信息摘要吗，还是由服务器再随机生成的？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":472961,"discussion_content":"理解的有些偏差，证书与ssh没有关系。\n\n1.现在已经基本不使用sha1了，而是用sha-2。证书不是服务器自己签发的，是由ca颁发的，证书也是公开的，不需要加密。\n\n2.基本正确。\n\n会话密钥必须由服务器和客户端双方共同协商得出，简单的做法是一方用私钥加密，另一方用公钥解密。\n\n完整的方法可参考后面两讲的TLS握手过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572829759,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1564184,"avatar":"https://static001.geekbang.org/account/avatar/00/17/de/18/b2635f3c.jpg","nickname":"李彬","note":"","ucode":"7536C1DB114CBC","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":43079,"discussion_content":"谢谢老师，看了后面的tls握手过程理解了，有一个小问题：客户端拿到的公钥是从服务器发来的server params取出的吗，还是根据服务器发来的证书在ca找到的对应证书里面取出？","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1572852000,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":141655,"user_name":"- shadow -","can_delete":false,"product_type":"c1","uid":1676738,"ip_address":"","ucode":"97B68447A75354","user_header":"https://static001.geekbang.org/account/avatar/00/19/95/c2/afbb3f61.jpg","comment_is_top":false,"comment_ctime":1571208353,"is_pvip":false,"replies":[{"id":"54722","content":"密钥与算法没有直接的关系，实质上都是一些大整数，但不同的算法对密钥有不同的要求。<br><br>比如对称算法aes128，就要求是128位的整数，至于这个整数怎么来与算法无关，通常都是由随机数生成。<br><br>非对称算法的密钥也是一样，例如rsa1024，就需要随机产生一个1024位的整数，但这个整数必须是质数才行。<br><br>加密算法使用密钥加解密，但密钥的产生不是算法来控制的。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1571215211,"ip_address":"","comment_id":141655,"utype":1}],"discussion_count":2,"race_medal":0,"score":"1571208353","product_id":100029001,"comment_content":"老师你好，是不是非对称加密的公钥和密钥是由非对称加密算法产生的，而对称加密的密钥是在对称加密算法之外产生的？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":470838,"discussion_content":"密钥与算法没有直接的关系，实质上都是一些大整数，但不同的算法对密钥有不同的要求。\n\n比如对称算法aes128，就要求是128位的整数，至于这个整数怎么来与算法无关，通常都是由随机数生成。\n\n非对称算法的密钥也是一样，例如rsa1024，就需要随机产生一个1024位的整数，但这个整数必须是质数才行。\n\n加密算法使用密钥加解密，但密钥的产生不是算法来控制的。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571215211,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":1676738,"avatar":"https://static001.geekbang.org/account/avatar/00/19/95/c2/afbb3f61.jpg","nickname":"- shadow -","note":"","ucode":"97B68447A75354","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":34774,"discussion_content":"明白了，谢谢老师！！很赞","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1571221130,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":""},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":134544,"user_name":"missing~~","can_delete":false,"product_type":"c1","uid":1583675,"ip_address":"","ucode":"42DDDD1185BFFF","user_header":"https://static001.geekbang.org/account/avatar/00/18/2a/3b/3b938d03.jpg","comment_is_top":false,"comment_ctime":1568862070,"is_pvip":false,"replies":[{"id":"51578","content":"单纯的非对称加密效率低性能差，不实用。<br><br>混合加密解决了密钥交换问题，安全性得到了保证，而且性能也很快。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1568868591,"ip_address":"","comment_id":134544,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1568862070","product_id":100029001,"comment_content":"关于混合加密，我的理解是先要非对称加密然后再对称加密，这样和单纯的非对称加密想比有什么优势吗","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":467800,"discussion_content":"单纯的非对称加密效率低性能差，不实用。\n\n混合加密解决了密钥交换问题，安全性得到了保证，而且性能也很快。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1568868591,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":126441,"user_name":"Mr.Chen","can_delete":false,"product_type":"c1","uid":1559182,"ip_address":"","ucode":"2AF23AAF147037","user_header":"https://static001.geekbang.org/account/avatar/00/17/ca/8e/4b1d7063.jpg","comment_is_top":false,"comment_ctime":1566386816,"is_pvip":false,"replies":[{"id":"46804","content":"oauth是认证服务，与加密、https没有直接的关系。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1566431224,"ip_address":"","comment_id":126441,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1566386816","product_id":100029001,"comment_content":"老师，OAuth跟加密有什么关系吗","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":463987,"discussion_content":"oauth是认证服务，与加密、https没有直接的关系。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1566431224,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":120795,"user_name":"亚洲舞王.尼古拉斯赵四","can_delete":false,"product_type":"c1","uid":1443078,"ip_address":"","ucode":"7159F5D7232696","user_header":"https://static001.geekbang.org/account/avatar/00/16/05/06/f5979d65.jpg","comment_is_top":false,"comment_ctime":1564997232,"is_pvip":false,"replies":[{"id":"44368","content":"√","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1565009034,"ip_address":"","comment_id":120795,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564997232","product_id":100029001,"comment_content":"私钥可以用于不可抵赖，你发给我的东西只有你的私钥才能解密的，我说是你发给我的就是你发给我的","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":461484,"discussion_content":"√","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1565009034,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":117474,"user_name":"Remember","can_delete":false,"product_type":"c1","uid":1183073,"ip_address":"","ucode":"864B7A40B9B93E","user_header":"https://static001.geekbang.org/account/avatar/00/12/0d/61/c4e05dbf.jpg","comment_is_top":false,"comment_ctime":1564055489,"is_pvip":false,"replies":[{"id":"43056","content":"两边必须要有相同的密钥才能实现加解密，所以要交换。<br><br>你说的本地、服务器各一套是什么意思？这两套密钥是否要一致，如果一致那也就需要一个交换的过程。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1564102732,"ip_address":"","comment_id":117474,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1564055489","product_id":100029001,"comment_content":"老师，对称加密的时候，为什么要交换密钥，一套本地，一套服务器，这样可以吗？什么样的场景需要交换密钥？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459989,"discussion_content":"两边必须要有相同的密钥才能实现加解密，所以要交换。\n\n你说的本地、服务器各一套是什么意思？这两套密钥是否要一致，如果一致那也就需要一个交换的过程。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1564102732,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":116163,"user_name":"一步","can_delete":false,"product_type":"c1","uid":1005391,"ip_address":"","ucode":"73CEA468CE70C3","user_header":"https://static001.geekbang.org/account/avatar/00/0f/57/4f/6fb51ff1.jpg","comment_is_top":false,"comment_ctime":1563796053,"is_pvip":true,"replies":[{"id":"42525","content":"1，是的。<br><br>2，填充模式与分组模式是独立的，没有必然关系，但有的分组模式要求使用配套的填充算法。","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563843055,"ip_address":"","comment_id":116163,"utype":1}],"discussion_count":1,"race_medal":1,"score":"1563796053","product_id":100029001,"comment_content":"加密算法中，还有一系列的填充模式，这个是不是使用的在分组模式中的？不同的分组模式可以使用不通填充模式？还是填充模式针对某一特定的分组模式？","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459416,"discussion_content":"1，是的。\n\n2，填充模式与分组模式是独立的，没有必然关系，但有的分组模式要求使用配套的填充算法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563843055,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":115909,"user_name":"djfhchdh","can_delete":false,"product_type":"c1","uid":1484184,"ip_address":"","ucode":"E71D75328CE398","user_header":"https://static001.geekbang.org/account/avatar/00/16/a5/98/a65ff31a.jpg","comment_is_top":false,"comment_ctime":1563766565,"is_pvip":false,"replies":[{"id":"42392","content":"√","user_name":"作者回复","user_name_real":"chrono","uid":"1181974","ctime":1563770233,"ip_address":"","comment_id":115909,"utype":1}],"discussion_count":1,"race_medal":0,"score":"1563766565","product_id":100029001,"comment_content":"2、私钥加密可以用于数字签名、身份认证","like_count":0,"discussions":[{"author":{"id":1181974,"avatar":"https://static001.geekbang.org/account/avatar/00/12/09/16/1161017c.jpg","nickname":"罗剑锋","note":"","ucode":"95678C988F24AB","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":459344,"discussion_content":"√","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1563770233,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":""},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]}]}