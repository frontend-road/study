{"id":573307,"title":"02 | 如何通过闭包对象管理程序中状态的变化？","content":"<p>你好，我是石川。</p><p>通过上节课的学习，现在我们知道，函数式编程中存在副作用（side effect），而纯函数和不可变就是减少副作用的两个核心思想。那么按理说，我们要想把副作用降低到接近为零，就可以用纯函数，同时不接受任何参数。但是这样完全自我封闭的函数，也就几乎没有什么使用意义了。</p><p>所以，作为一个函数，还是要有输入、计算和输出，才能和外界有互动往来，我们的系统也才能“活”起来。而一个活的系统，它的状态肯定是在不停变化的，<strong>那么我们如何才能在不可变的原则下，来管理这种变化呢？</strong></p><p>今天这节课，我们就一起来看看在函数式编程中，有哪些值是可变的、哪些不可变，以及如何能在状态更新的同时做到不可变。</p><h2>值的（不）可变</h2><p>首先，我们要搞清楚一个问题，<strong>值到底是不是可变的？</strong>在JavaScript中，值一般被分为两种：原始类型和对象类型。</p><p>先来看<strong>原始类型</strong>。像字符串或数字这种数据类型，都是属于原始类型，而它们本身是不可变的。举个例子：在console.log中输入2 = 2.5，得到的结果会是invalid，这就证明了我们不可能改变一个原始类型的值。</p><pre><code class=\"language-javascript\">2 = 2.5 // invalid\n</code></pre><p>然后是<strong>对象类型</strong>。在JavaScript中，像数组、对象这类数据类型就叫做对象类型，这类数据更像是一种数据结构或容器。那这样的“值”是否可变？其实通过上节课<a href=\"https://time.geekbang.org/column/article/572260\">数组</a>的例子，你能看到这类值是可变的，比如通过splice这种方法。</p><!-- [[[read_end]]] --><p>所以下面，我们就来看看在使用对象类型的值来存储状态的时候，要如何在更新状态的同时做到不可变。</p><h3>React.js中的props和state</h3><p>这里，我们就以React.js为例，来观察下它是用什么类型的值作为状态的。</p><p>说到状态，React中有两个很重要的概念经常容易被混淆，分别是props和state。props通常是作为一个外部参数传入到函数里，然后作为<strong>静态元素</strong>输出在UI中渲染；state则是一个内部变量，它会作为<strong>动态元素</strong>输出在UI中渲染，并根据行为更新状态。</p><p><img src=\"https://static001.geekbang.org/resource/image/a7/76/a705d22e81c2e39dd81516a5d9709076.jpg?wh=2000x940\" alt=\"\"></p><p>在上面这个图例中，有一个静态的文案和一个动态的计数器。其中，props就是“点击增加：”这个文案，它在页面上基本是不应该有什么变化的，就是一句固定的提示语，所以它就是props，一个静态的“属性”。</p><p>而在计数按钮中，它的值是基于每次点击加一的，也就是基于点击动态变化的，所以我们说它就是state，一个动态“状态”。</p><pre><code class=\"language-javascript\">// 属性 props \nclass Instruction extends React.Component {\n  render() {\n    return &lt;span&gt;提示 - {this.props.message}&lt;/span&gt;;\n  }\n}\nconst element = &lt;Instruction message=\"点击以下按钮增加：\" /&gt;;\n\n// 状态 state \nclass Button extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n    };\n  }\n  updateCount() {}\n  render() {\n    return (&lt;button onClick={() =&gt; this.updateCount()}&gt; 点击了 {this.state.count} 次&lt;/button&gt;);\n  }\n}\n</code></pre><p>那么回到刚才的问题，在React.js里，props和state是什么类型的值呢？答案是对象，props和state都是用对象来储存状态的。</p><p>可是，<strong>React为什么用对象做属性和状态存储值类型呢？它还有没有其它选择呢？</strong>下面我们就来看看。</p><h2>结构型值的不可变</h2><p>我们先来思考一个问题：props和state是不是必须的？</p><p>答案是，props是必须的，而state不是。因为假设我们的页面是一个静态页面，那么我们渲染内容就好了，但这种<strong>纯静态的应用也完全无法和用户互动</strong>。</p><p>所以在前端，纯静态的应用被叫做dumb as f*ck。当然这是一个不太文明的词，不过话糙理不糙，而且它的意思也很明显，就是说这样的应用也太“笨”了。</p><p>我们的应用肯定需要和用户交互，而一旦有交互，我们就需要管理值的<strong>状态（state）</strong> 和围绕值设计一系列<strong>行为（behavior）</strong>。在这个过程中，我们需要考虑的就是一个值的<strong>结构性不可变的问题</strong>。</p><p>所以接下来，我们就一起看看围绕值的结构性操作，都有哪些数据类型可以选择。</p><h3>闭包和对象</h3><p>首先是闭包（closure）和对象（object），这二者都可以对一个状态值进行封装和创建行为。</p><p>闭包最大的特点是<strong>可以突破生命周期和作用域的限制</strong>，也就是时间和空间的控制。</p><p>这里的突破生命周期的限制是指，当一个外部函数内嵌一个内部函数时，如果内嵌函数引用了外部函数的变量，这个变量就会突破生命周期的限制，在函数结束执行后，仍然存在。比如在下面闭包的例子中，我们创建了一个计数器，每次加1，可以记住上一次的值。</p><p>而突破作用域的限制是指，我们可以把一个内部函数返回成一个方法在外部调用。比如以下代码中，counter返回的counting方法，我们可以通过counter1来执行这个方法，从而就突破了counter作用域的限制。</p><pre><code class=\"language-javascript\">function counter() {\n    let name = \"计数\";\n    let curVal = 0;\n    function counting() {\n        curVal++;\n    }\n    function getCount() {\n        console.log(\n            `${name}是${curVal}`\n        );\n    }\n    return {counting,getCount}\n}\n\nvar counter1 = counter();\n\ncounter1.counting();  \ncounter1.counting();  \ncounter1.counting();  \ncounter1.getCount();  // 计数是3\n</code></pre><p>同样地，我们也可以通过对象来封装一个状态，并且创建一个方法来作用于这个状态值。</p><pre><code class=\"language-javascript\">var counter = {\n    name: \"计数\",\n    curVal: 0,\n    counting() {\n        this.curVal++;\n        console.log(\n            `${this.name}是${this.curVal}`\n        );\n    }\n};\n\ncounter.counting(); // 计数是1\ncounter.counting(); // 计数是2\ncounter.counting(); // 计数是3\n</code></pre><p>所以，单纯从值的状态管理和围绕它的一系列行为的角度来看，我们可以说闭包和对象是同形态的（isomorphic），也就是说可以起到异曲同工的作用。比如上面闭包例子中的状态，就是对象中的属性，我们在闭包中创建的针对值的行为，也可以在对象中通过方法来实现。</p><p><img src=\"https://static001.geekbang.org/resource/image/aa/bc/aab05b1538730f5d2d2594f1ed678bbc.jpg?wh=1920x686\" alt=\"图片\"></p><p>你可能要问，我们对比它们的意义是什么呢？其实是因为它们在隐私（privacy）、状态拷贝（state cloning）和性能（performance）上。还是有差别的，而这些差别在结构性地处理值的问题上，具有不同的优劣势。</p><p>下面，我们就从这几个维度的不同点展开来看下。</p><p><img src=\"https://static001.geekbang.org/resource/image/d4/d3/d4b33bdaebd78854338a331c407fc2d3.jpg?wh=1920x733\" alt=\"图片\"></p><h3>属性的查改</h3><p>实际上，你通过闭包的例子可以发现，除非是通过接口，也就是在外部函数中返回内部函数的方法，比如用来获取值的getCount方法，或者重新赋值的counting方法，不然内部的值是<strong>对外不可见</strong>的。</p><p>所以，它其实可以细粒度地控制我们想要暴露或隐藏的属性，以及相关的操作。</p><pre><code class=\"language-javascript\">counter1.counting();  \ncounter1.getCount();  \n</code></pre><p>而对象则不同，我们不需要特殊的方式，就可以获取对象中的属性和重新赋值。如果想要遵循不可变的原则，有一个 <strong>Object.freeze()</strong> 的方法，可以把所有的对象设置成只读 <code>writable: false</code>。</p><p>但这里有一点需要注意，通过freeze会让对象所有的属性变得只读，而且不可逆。当然，它的好处就是严格遵守了不可变原则。</p><pre><code class=\"language-javascript\">counter.name; \ncounter.initVal; \ncounter.counting();\n</code></pre><h3>状态的拷贝</h3><p>所以到这里，我们可以发现，针对原始类型的数据，无需过度担忧值的不可变。</p><p>不过，既然应用是“活”的，就可能会有“一系列”状态。我们通常需要通过诸如数组、对象类的数据结构，来保存“一系列”状态，那么在面对这一类的数据时，我们如何做到遵循不可变的原则呢？</p><ul>\n<li><strong>如何通过拷贝管理状态？</strong></li>\n</ul><p>要解决这个问题，我们可以通过<strong>拷贝+更新</strong>的方式。也就是说，我们不对原始的对象和数组值做改变，而是拷贝之后，在拷贝的版本上做变更。</p><p>比如在下面的例子中，我们通过使用spread，来展开数组和对象中的元素，然后再把元素赋值给新的变量，通过这种方式，我们完成了浅拷贝。之后，我们再看数组和对象的时候，会发现原始的数据不会有变化。</p><pre><code class=\"language-javascript\">// 数组浅拷贝\nvar a = [ 1, 2 ];\nvar b = [ ...a ];\nb.push( 3 );\na;  // [1,2]\nb;  // [1,2,3]\n\n// 对象浅拷贝\nvar o = {\n&nbsp; &nbsp; x: 1,\n&nbsp; &nbsp; y: 2\n};\nvar p = { ...o };\np.y = 3; \no.y;  // 2\np.y;  // 3\n</code></pre><p>所以可见，数组和对象都是很容易拷贝的，而闭包则相对更难拷贝。</p><ul>\n<li><strong>如何解决拷贝性能问题？</strong></li>\n</ul><p>从上面的例子中，我们可以看到通过对状态的拷贝，是可以做到不可变，不过随之而来的就是<strong>性能问题</strong>。</p><p>如果这个值只改变一两次，那就没问题。但假设我们的系统中有值不停在改变，如果每次都拷贝的话，就会占据大量内存。这样一来，我们应该如何处理呢？</p><p>实际上，在这种情况下，有一个解决方案就是用到一个类似<strong>链表</strong>的结构，当中有一组对象记录改变的指数和相关的值。</p><p>比如下面的 [3, 1, 0, 7] 这组数组中，我们把第0个值变成2，第3个值变成6，第4个值添加1，形成了 [2, 1, 0, 6, 1]。那么如果我们只记录变化的话，就是0:2、3:6和4:1这三组对象，是不是就减少了很多内存占用？</p><p><img src=\"https://static001.geekbang.org/resource/image/b4/9b/b4a1b444fe30607bc3d8051ea3410b9b.jpg?wh=1920x572\" alt=\"图片\"></p><p>其实目前在市面上，已经有很多成熟的三方库比如immutable.js，它们会有自己的数据结构，比如array list和object map，以及相关算法来解决类似的问题了。</p><h3>性能的考虑</h3><p>我们接着再来看看性能上的考虑。</p><p>从性能的角度来讲，对象的内存和运算通常要优于闭包。比如，在下面第一个闭包的例子中，我们每次使用都会创建一个新的函数表达。</p><p>而第二个对象的例子中，我们通过bind将this绑定到greetings2上，这样一来，PrintMessageB就会引用greetings2.name来作为this.name，从而达到和闭包一样的效果。但我们不需要创建一个闭包，只需要将this指向引用的对象即可。</p><pre><code class=\"language-javascript\">// 闭包\nfunction PrintMessageA(name) {\n&nbsp; &nbsp; return function printName(){\n&nbsp; &nbsp; &nbsp; &nbsp; return `${name}, 你好！`;\n&nbsp; &nbsp; };\n}\nvar greetings1 = PrintMessageA( \"先生\" );\ngreetings1();  // 先生，你好！\n\n// 对象\nfunction PrintMessageB(){\n&nbsp; &nbsp;return `${this.name}, 你好！`;\n}\nvar greetings2 = PrintMessageB.bind( {\n&nbsp; &nbsp; name: \"先生\"\n} );\ngreetings2();  // 先生，你好！\n</code></pre><h2>总结</h2><p>这节课，我们一起深入理解了函数式编程中的不可变。我们需要重点关注的，就是对象和闭包在处理不可变问题上的不同优势。</p><ul>\n<li>在属性和方法的隐私方面，<strong>闭包天然对属性有保护作用</strong>，同时它也可以按需暴露接口，来更细粒度地获取或重新给状态赋值。但是它和我们要解决的问题，似乎关系不大。</li>\n<li>而对象不仅可以轻松做到 <strong>props整体不可变</strong>，而且在需要state变化时，在<strong>拷贝</strong>上也更有优势。不过从性能的角度来看，如果拷贝的量不大，也许它们的性能差不多，但如果是一个高频交互的界面，微小的差别可能就会被放大。</li>\n</ul><p>所以总结起来，在React.js中，它选择使用对象作为props和state的值类型，能更容易保证属性和状态值的整体不可变；而且面对状态的变化，它也更容易拷贝；在处理高频交互时，它的性能也会更好。</p><p>而闭包虽然有隐私上的优势和更细粒度的操作，可是在应用交互和状态管理这个场景下，它并没有什么实际的作用。所以，<strong>有利于使用对象的条件会相对多一些。</strong></p><p>最后，你也可以再来复习下这两种方式的优劣势。其实，基于React.js的例子，你可以发现，不同的数据类型和处理变与不变的方式，并没有绝对的好与不好，而是需要<strong>根据具体情况</strong>，来确定哪种方式更适合你的程序和应用所需要支持的场景。</p><p><img src=\"https://static001.geekbang.org/resource/image/02/c8/029e164f69eb1fa3de3568e8b2ea7cc8.jpg?wh=1920x736\" alt=\"图片\"></p><h2>思考题</h2><p>我们在提到值的状态拷贝时，说spread做到的是浅拷贝，那么你是否了解与之对应的深度拷贝？它会不会影响状态的管理？</p><p>欢迎在留言区分享你的思考和答案，也欢迎你把今天的内容分享给更多的朋友。</p><h2>延伸阅读</h2><ul>\n<li><a href=\"https://reactjs.org/docs/faq-state.html\">Component State - React</a></li>\n<li><a href=\"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\">Props vs State</a></li>\n<li><a href=\"https://lucybain.com/blog/2016/react-state-vs-pros/\">ReactJS: Props vs. State</a></li>\n<li><a href=\"https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch7.md/#chapter-7-closure-vs-object\">Closure vs. Object</a></li>\n</ul>","neighbors":{"left":{"article_title":"01 | 函数式vs.面向对象：响应未知和不确定","id":572260},"right":{"article_title":"03 | 如何通过部分应用和柯里化让函数具象化？","id":574132}},"comments":[{"had_liked":false,"id":358430,"user_name":"WGH丶","can_delete":false,"product_type":"c1","uid":1922568,"ip_address":"北京","ucode":"02E43256770C62","user_header":"https://static001.geekbang.org/account/avatar/00/1d/56/08/bd75f114.jpg","comment_is_top":false,"comment_ctime":1664294870,"is_pvip":false,"replies":[{"id":130482,"content":"很好地描述了两者相对的从属关系","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1664632499,"ip_address":"北京","comment_id":358430,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"有一个说法是：闭包是带数据的行为，对象是带行为的数据。","like_count":42,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":589286,"discussion_content":"很好地描述了两者相对的从属关系","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1664632500,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357997,"user_name":"I keep my ideals💤","can_delete":false,"product_type":"c1","uid":1483413,"ip_address":"北京","ucode":"38E68A0BCABA01","user_header":"https://static001.geekbang.org/account/avatar/00/16/a2/95/8f34237c.jpg","comment_is_top":false,"comment_ctime":1663826163,"is_pvip":false,"replies":[{"id":130311,"content":"是的","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1663859635,"ip_address":"北京","comment_id":357997,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"如果要实现值的绝对不可变应该使用深拷贝，这样对拷贝出来的复杂数据结构进行修改时才能保证不会对原始数据造成影响","like_count":8,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588583,"discussion_content":"是的","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663859635,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358026,"user_name":"谷岳","can_delete":false,"product_type":"c1","uid":1362023,"ip_address":"北京","ucode":"2A1B4191CD87B8","user_header":"https://static001.geekbang.org/account/avatar/00/14/c8/67/5489998a.jpg","comment_is_top":false,"comment_ctime":1663836431,"is_pvip":true,"replies":[{"id":130330,"content":"是的，虽然React.PureComponent中的shouldComponentUpdate() 基于性能考虑，不建议用深对比和JSON.stringify()；但如果程序中确实是需要处理复杂的数据结构变化的话，可以用force update或immutable-js来满足类似的需求。","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1663983342,"ip_address":"北京","comment_id":358026,"utype":1}],"discussion_count":1,"race_medal":3,"score":2,"product_id":100122101,"comment_content":"spread 展开语法仅能做到浅拷贝，因为仅遍历一层。在开发中，比较常用的深拷贝方式是：JSON.parse(JSON.stringify(obj))。虽然stringify方法在转化JSON字符串时有不少特殊状况。这种方式不会影响状态，因为stringify方法返回的是一个常量字符串。\n","like_count":6,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588673,"discussion_content":"是的，虽然React.PureComponent中的shouldComponentUpdate() 基于性能考虑，不建议用深对比和JSON.stringify()；但如果程序中确实是需要处理复杂的数据结构变化的话，可以用force update或immutable-js来满足类似的需求。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663983342,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358001,"user_name":"Hello,Tomrrow","can_delete":false,"product_type":"c1","uid":1351769,"ip_address":"北京","ucode":"F9407C1C91B157","user_header":"https://static001.geekbang.org/account/avatar/00/14/a0/59/86073794.jpg","comment_is_top":false,"comment_ctime":1663827723,"is_pvip":false,"replies":[{"id":130310,"content":"深拷贝的简单实现是JSON.parse(JSON.stringify(obj))，不过考虑到JSON safe和性能问题，递归是会更好一些。\n\nReact中的setState()是浅合并而不是深拷贝，会不会影响看情况，如果是“复杂类型”也就是嵌套对象，那就会被影响了。","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1663859611,"ip_address":"北京","comment_id":358001,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"对象或数组的浅拷贝，是简单的值的复制，这对于对象属性值或数组元素是简单类型来说没有问题；如果对象属性值或数组元素是复杂类型，存的是一个内存地址，对内存地址的复制，只是多了一个指向同一个空间的指针。这时需要进行深拷贝，常用的方式通过递归的方式。\n\n深拷贝，是不会影响状态管理的。","like_count":4,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588582,"discussion_content":"深拷贝的简单实现是JSON.parse(JSON.stringify(obj))，不过考虑到JSON safe和性能问题，递归是会更好一些。\n\nReact中的setState()是浅合并而不是深拷贝，会不会影响看情况，如果是“复杂类型”也就是嵌套对象，那就会被影响了。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663859611,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358057,"user_name":"Alison","can_delete":false,"product_type":"c1","uid":2438643,"ip_address":"北京","ucode":"31A580836C778E","user_header":"https://static001.geekbang.org/account/avatar/00/25/35/f3/a661822e.jpg","comment_is_top":false,"comment_ctime":1663859603,"is_pvip":false,"replies":[{"id":130329,"content":"在React，早期有一个shallowCompare附加功能，后面被React.memo和React.PureComponent取代了，但是底层逻辑类似，仍然是一个浅对比。如果想对比更复杂的对象，React.memo也支持在第二个实参传入自定义的对比功能。","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1663982114,"ip_address":"北京","comment_id":358057,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"通常更新state的时候框架会用Object.is来判断2个数组&#47;对象是否相等，浅拷贝对象时，因拷贝的是引用地址，所以Object.is对比后的返回值会是true，状态就无法正常更新；\n深拷贝对象的话，拷贝的是值，此时会产生新的引用地址，所以Object.is对比后的返回值是false，状态会进行更新","like_count":3,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588672,"discussion_content":"在React，早期有一个shallowCompare附加功能，后面被React.memo和React.PureComponent取代了，但是底层逻辑类似，仍然是一个浅对比。如果想对比更复杂的对象，React.memo也支持在第二个实参传入自定义的对比功能。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663982114,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361345,"user_name":"雨中送陈萍萍","can_delete":false,"product_type":"c1","uid":1457879,"ip_address":"北京","ucode":"409FA76EEED669","user_header":"https://static001.geekbang.org/account/avatar/00/16/3e/d7/399d2ba5.jpg","comment_is_top":false,"comment_ctime":1667442356,"is_pvip":false,"replies":[{"id":132376,"content":"Mac自带的keynote，没有特别的工具哈，类似于Windows中的ppt。","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1670651681,"ip_address":"北京","comment_id":361345,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"好像要老师画图的软件，老师可以告知一下麽","like_count":2,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":596091,"discussion_content":"Mac自带的keynote，没有特别的工具哈，类似于Windows中的ppt。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1670651681,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":359360,"user_name":"Change","can_delete":false,"product_type":"c1","uid":1161260,"ip_address":"北京","ucode":"FB60D2378C9F02","user_header":"https://static001.geekbang.org/account/avatar/00/11/b8/2c/0f7baf3a.jpg","comment_is_top":false,"comment_ctime":1665473600,"is_pvip":false,"replies":[{"id":130868,"content":"1. 闭包如果返回属性则失去对属性保护的意义。\n---------------------------------\n是的，所以对象的属性是公开的，闭包的意义就是隐藏。\n\n2. 如果不返回通过哪种方式是实现属性拷贝。\n---------------------------------\n这种情况下，就要在闭包嵌套层加获取权限的方法。","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1665842839,"ip_address":"北京","comment_id":359360,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"文中提到闭包比较难实现拷贝，比较有疑问？\n1. 闭包如果返回属性则失去对属性保护的意义。\n2. 如果不返回通过哪种方式是实现属性拷贝。","like_count":1,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":590538,"discussion_content":"1. 闭包如果返回属性则失去对属性保护的意义。\n---------------------------------\n是的，所以对象的属性是公开的，闭包的意义就是隐藏。\n\n2. 如果不返回通过哪种方式是实现属性拷贝。\n---------------------------------\n这种情况下，就要在闭包嵌套层加获取权限的方法。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1665842840,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":358006,"user_name":"奕晨","can_delete":false,"product_type":"c1","uid":3000956,"ip_address":"北京","ucode":"59E240369BC1DC","user_header":"https://static001.geekbang.org/account/avatar/00/2d/ca/7c/98193e9e.jpg","comment_is_top":false,"comment_ctime":1663828600,"is_pvip":false,"replies":[{"id":130309,"content":"对于嵌套的对象，是有这样的影响。","user_name":"作者回复","user_name_real":"作者","uid":2785919,"ctime":1663856036,"ip_address":"北京","comment_id":358006,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"spread 做到的是浅拷贝，那么你是否了解与之对应的深度拷贝？\n需要根据数据类型区分，若是对象的话，浅拷贝后，修改其中一个值，会影响另一个值，拷贝的是对象的地址；深度拷贝就是重新创建一个新的地址，修改其中的值，互不影响。\n\n它会不会影响状态的管理？\n需要针对props 和state区分，根据值的类型判断，props不会，state会影响。","like_count":1,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588572,"discussion_content":"对于嵌套的对象，是有这样的影响。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663856036,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361129,"user_name":"海","can_delete":false,"product_type":"c1","uid":1798213,"ip_address":"北京","ucode":"3C2BC71C312062","user_header":"https://static001.geekbang.org/account/avatar/00/1b/70/45/7873e955.jpg","comment_is_top":false,"comment_ctime":1667263066,"is_pvip":false,"replies":[{"id":132063,"content":"可能是描述的问题，我再改改。因为是数组，这里我们从0开始计算第一位，然后第3个值变成6是第四位，再然后第4个值添加1是第五位。","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1669345471,"ip_address":"北京","comment_id":361129,"utype":1}],"discussion_count":2,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"比如下面的 [3, 1, 0, 7] 这组数组中，我们把第一个值变成 2，第三个值变成 6，第 4 个值添加 1，形成了 [2, 1, 0, 6, 1]。\n\n老师，这里没太理解呢，第3个值变成6，不是 2，1，6 吗？","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594747,"discussion_content":"可能是描述的问题，我再改改。因为是数组，这里我们从0开始计算第一位，然后第3个值变成6是第四位，再然后第4个值添加1是第五位。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669345471,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]},{"author":{"id":2692882,"avatar":"https://static001.geekbang.org/account/avatar/00/29/17/12/4200d701.jpg","nickname":"Cherry🍒","note":"","ucode":"BE9F4EF0C9A1B7","race_medal":0,"user_type":1,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594667,"discussion_content":"根据下标进行的，","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669273202,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":false,"parent_id":0,"ip_address":"浙江","group_id":0},"score":2,"extra":"","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":361090,"user_name":"哎呦先生","can_delete":false,"product_type":"c1","uid":1200430,"ip_address":"北京","ucode":"24076486C75030","user_header":"https://static001.geekbang.org/account/avatar/00/12/51/2e/6f7b0e7c.jpg","comment_is_top":false,"comment_ctime":1667203587,"is_pvip":false,"replies":[{"id":132062,"content":"这里咱们用的数组和对象就是引用类型的数据结构哈。\n\n举个例子：\nvar a = [1,2,3];\nvar b = a;\na[3] = 4;\nconsole.log(b); &#47;&#47;返回 [1,2,3,4]\n\n你可以看到b引用的是a的数组中的元素。","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1669344805,"ip_address":"北京","comment_id":361090,"utype":1}],"discussion_count":1,"race_medal":0,"score":2,"product_id":100122101,"comment_content":"老师，扩展运算符例子那数组元素用引用类型的数据结构是不是比较合理，原始类型的数据无法深拷贝浅拷贝的内存地址区别，容易迷糊。","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":594744,"discussion_content":"这里咱们用的数组和对象就是引用类型的数据结构哈。\n\n举个例子：\nvar a = [1,2,3];\nvar b = a;\na[3] = 4;\nconsole.log(b); //返回 [1,2,3,4]\n\n你可以看到b引用的是a的数组中的元素。","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1669344806,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357984,"user_name":"Chaos浩","can_delete":false,"product_type":"c1","uid":1675943,"ip_address":"北京","ucode":"4FFAE6EEAA460B","user_header":"https://static001.geekbang.org/account/avatar/00/19/92/a7/00fefed5.jpg","comment_is_top":false,"comment_ctime":1663812596,"is_pvip":false,"replies":[{"id":130307,"content":"很高兴能帮助你理解","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1663854213,"ip_address":"北京","comment_id":357984,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100122101,"comment_content":"闭包和bind，经常见到这两个概念但一直一知半解，这一课看完豁然开朗","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588568,"discussion_content":"很高兴能帮助你理解","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663854213,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":357979,"user_name":"RichardZhang","can_delete":false,"product_type":"c1","uid":2968022,"ip_address":"北京","ucode":"FCA2AE70262123","user_header":"https://static001.geekbang.org/account/avatar/00/2d/49/d6/2027d07a.jpg","comment_is_top":false,"comment_ctime":1663810025,"is_pvip":false,"replies":[{"id":130306,"content":"我们周六见","user_name":"作者回复","user_name_real":"编辑","uid":2785919,"ctime":1663851567,"ip_address":"北京","comment_id":357979,"utype":1}],"discussion_count":1,"race_medal":0,"score":3,"product_id":100122101,"comment_content":"好文打卡，期待周六。","like_count":0,"discussions":[{"author":{"id":2785919,"avatar":"https://static001.geekbang.org/account/avatar/00/2a/82/7f/c22de3a3.jpg","nickname":"石川","note":"","ucode":"99E480A265E25F","race_medal":0,"user_type":2,"is_pvip":false},"reply_author":{"id":0,"avatar":"","nickname":"","note":"","ucode":"","race_medal":0,"user_type":1,"is_pvip":false},"discussion":{"id":588564,"discussion_content":"我们周六见","likes_number":0,"is_delete":false,"is_hidden":false,"ctime":1663851568,"is_liked":false,"can_delete":false,"is_complain":false,"is_top":true,"parent_id":0,"ip_address":"北京","group_id":0},"score":2,"extra":"{\"reply\":true,\"user_type\":2}","child_discussion_number":0,"child_discussions":[]}]},{"had_liked":false,"id":366387,"user_name":"Nuvole Bianche","can_delete":false,"product_type":"c1","uid":2100301,"ip_address":"上海","ucode":"3C059A454C16C7","user_header":"https://static001.geekbang.org/account/avatar/00/20/0c/4d/90ab20d8.jpg","comment_is_top":false,"comment_ctime":1673679604,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100122101,"comment_content":"也许一方面是我自身的能力没达到一定高度，另一方面也感觉作者大大总是用一些看上去比较“假大空”的词汇。每当自己看到这些词汇时，有些不知所云，一时难以理解。然后自己试着根据自己已有的知识，找一个可能与之对应、但更实在的词汇来代替时，就突然明白，原来作者是这个意思呀。 比如原文中：所以，它其实可以细粒度地控制我们想要暴露或隐藏的属性，以及相关的操作。   这个细粒度说白了不就是更加可预测和可控吗？ 可偏偏搞个大词，还是有些不习惯。  可能这就是作者在开篇说的入门既是巅峰者对菜鸡小白的俯视吧。   我还是的咬牙坚持一下。","like_count":1},{"had_liked":false,"id":386088,"user_name":"鐘","can_delete":false,"product_type":"c1","uid":1518535,"ip_address":"中国台湾","ucode":"0106652D5F7BD9","user_header":"https://static001.geekbang.org/account/avatar/00/17/2b/c7/9c8647c8.jpg","comment_is_top":false,"comment_ctime":1704037467,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100122101,"comment_content":"關於 性能的考慮 這個小節提到的例子:\nbind 其實也是會創建一個新的函式, 所以我的感覺跟閉包沒有太大差異, 反而是使用閉包更好懂","like_count":0},{"had_liked":false,"id":381105,"user_name":"Osmond","can_delete":false,"product_type":"c1","uid":2836830,"ip_address":"贵州","ucode":"7D04C6D7B0DDCB","user_header":"https://static001.geekbang.org/account/avatar/00/2b/49/5e/f430ff83.jpg","comment_is_top":false,"comment_ctime":1694683009,"is_pvip":false,"replies":null,"discussion_count":0,"race_medal":0,"score":3,"product_id":100122101,"comment_content":"&#47;&#47; 数组浅拷贝var a = [ 1, 2 ];var b = [ ...a ];b.push( 3 );a; &#47;&#47; [1,2]b; &#47;&#47; [1,2,3]\n老师这里不应该是深拷贝吗 a b内存地址不一样了，有点晕","like_count":0}]}